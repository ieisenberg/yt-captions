[
  {
    "text": "about 1985 I I think it's 1985 I got a job at the Ericson computer science lab",
    "start": "11320",
    "end": "18760"
  },
  {
    "text": "and uh this was a newly formed lab so really nobody knew what we should do and",
    "start": "18760",
    "end": "24480"
  },
  {
    "text": "um so we went there and said what should we do and I said we'll just sort of fiddle around and discover something and",
    "start": "24480",
    "end": "31000"
  },
  {
    "text": "and um try and try and do what we've done before only do it a little bit better and one of the things we wanted",
    "start": "31000",
    "end": "37239"
  },
  {
    "text": "to do better was to reprogram or to think about the ways of of building",
    "start": "37239",
    "end": "42480"
  },
  {
    "text": "large uh real-time systems and so I got to look at the way we used to build",
    "start": "42480",
    "end": "48440"
  },
  {
    "text": "systems the axe system that Ericson built as one of the first digital exchanges I think it was first came from",
    "start": "48440",
    "end": "55840"
  },
  {
    "text": "a series of exchanges that first were built in 1974 and uh I'm 1985 so looking",
    "start": "55840",
    "end": "61160"
  },
  {
    "text": "at the way we build these things and um I got interested",
    "start": "61160",
    "end": "66240"
  },
  {
    "text": "in the architectures of a system that were necessary to make things fault",
    "start": "66240",
    "end": "72560"
  },
  {
    "text": "tolerant and I remember thinking at a pretty early stage that uh um for things",
    "start": "72560",
    "end": "78320"
  },
  {
    "text": "to be fault tolerant you you you need two computers I mean you can't do it with one computer because one computer",
    "start": "78320",
    "end": "83680"
  },
  {
    "text": "crashes you're screwed so if you got two then you can make them fa to of",
    "start": "83680",
    "end": "88840"
  },
  {
    "text": "course if they're independent and uh the probability of them crashing is say at the same time I mean suppose",
    "start": "88840",
    "end": "94880"
  },
  {
    "text": "you've got two computers and the probability that one crashes is one in a th and the probability that two crashing",
    "start": "94880",
    "end": "100280"
  },
  {
    "text": "at the same time if they're independent is one in a million and if you got 100 of them it's one in 10 3 to 100 one in",
    "start": "100280",
    "end": "107240"
  },
  {
    "text": "10 the 300 so so provided you can make things isolated and and um independent",
    "start": "107240",
    "end": "114439"
  },
  {
    "text": "you can achieve fault tolerance um so remember going to a a lecture in",
    "start": "114439",
    "end": "122000"
  },
  {
    "text": "Bournemouth well it was a switching Symposium we went to and I was there",
    "start": "122000",
    "end": "127640"
  },
  {
    "text": "with with my colleagues and um it's hard to hear you in that I'm sorry I shall can I screw the connect sound up a",
    "start": "127640",
    "end": "135440"
  },
  {
    "text": "bit hello can you hear me now just for the recording right oh I",
    "start": "135440",
    "end": "140920"
  },
  {
    "text": "see it should be actually okay I try and speak louder",
    "start": "140920",
    "end": "147760"
  },
  {
    "text": "um yeah so we went to this Symposium in Bournemouth and and there were load of presentations everybody's interested in",
    "start": "147760",
    "end": "153400"
  },
  {
    "text": "in um distributed systems that used distributed garbage collection and things like that and we sat there three",
    "start": "153400",
    "end": "160519"
  },
  {
    "text": "of us with me and Robert Ving and Mike Williams we we we took turns at asking the same question after every lecture",
    "start": "160519",
    "end": "166720"
  },
  {
    "text": "and it was what happens if one of the nodes crash and they'd say well it doesn't work then and then we would turn around",
    "start": "166720",
    "end": "172760"
  },
  {
    "text": "and say well can't use that then and uh so I remember coming away thinking this",
    "start": "172760",
    "end": "178599"
  },
  {
    "text": "is crazy I we're crazy or they're crazy because I didn't really see how you could build",
    "start": "178599",
    "end": "183720"
  },
  {
    "text": "distributed systems out of components that were assumed to work and I thought",
    "start": "183720",
    "end": "190959"
  },
  {
    "text": "um well let's make them completely isolated and of course that means that all the data structures are involved",
    "start": "190959",
    "end": "197159"
  },
  {
    "text": "that in that computation must be copied from one to another machine and then people said well copying is very",
    "start": "197159",
    "end": "202920"
  },
  {
    "text": "inefficient so um you can't do that and I I spent 20 years telling people no um",
    "start": "202920",
    "end": "208519"
  },
  {
    "text": "yeah copying is in effici but if you want to make it f tolerant you you have to copy stuff you can't have dangling",
    "start": "208519",
    "end": "214000"
  },
  {
    "text": "poins to point to another machine then the machine crashes and then expect it to to to work anymore so they put",
    "start": "214000",
    "end": "220360"
  },
  {
    "text": "um uh we made systems with no dangling pointers or anything like that across machine so we just copied everything and",
    "start": "220360",
    "end": "225799"
  },
  {
    "text": "everybody said we were nuts for about 20 years and then for about 5 years after",
    "start": "225799",
    "end": "230879"
  },
  {
    "text": "that um they sort of stopped saying we were nuts",
    "start": "230879",
    "end": "236560"
  },
  {
    "text": "and and and then the multia came along and and and and then sort of all the problems of programming these things",
    "start": "236560",
    "end": "242480"
  },
  {
    "text": "started occurring just because there were shared data I mean got shared data structures across multi course unique mutexes and things like",
    "start": "242480",
    "end": "248760"
  },
  {
    "text": "that and if you have to stop the all the course while you're copying it's really bad news so it's going to be really bad",
    "start": "248760",
    "end": "254439"
  },
  {
    "text": "news we have thousand call multi course and we have to sort of pull some handle and we stop all of them just because we want to do some little trivial copying",
    "start": "254439",
    "end": "261440"
  },
  {
    "text": "operation of course once you've sped out the data everywhere you you've you've made the system parallel as well okay or",
    "start": "261440",
    "end": "268880"
  },
  {
    "text": "you've enabled parallelism so what this lecture is is is about um about these",
    "start": "268880",
    "end": "274880"
  },
  {
    "text": "aspects of a system so what I'm going to do is just a quick overview a quick history of fault",
    "start": "274880",
    "end": "282800"
  },
  {
    "text": "tolerance and then um I'm then going to talk about the principle I",
    "start": "282800",
    "end": "290320"
  },
  {
    "text": "I wrote a thesis in this a PhD thesis a few years ago and and outlin six",
    "start": "290320",
    "end": "296080"
  },
  {
    "text": "principles that you had to achieve in order to make um a fault toing system",
    "start": "296080",
    "end": "301600"
  },
  {
    "text": "those those principles are you could do them in any language I happen to invent a language as well to do them in that's",
    "start": "301600",
    "end": "308080"
  },
  {
    "text": "their Lang and I'm going to show you then how what the mapping between those principles and uh the language are",
    "start": "308080",
    "end": "313479"
  },
  {
    "text": "because they're made to fit together I'll show you that Stu and then I'll just talk a little bit about about whe",
    "start": "313479",
    "end": "319360"
  },
  {
    "text": "whether it actually works or not and I believe it does work actually since we're controlling a large fraction",
    "start": "319360",
    "end": "325720"
  },
  {
    "text": "of the world networks with this stuff um right so it's all about failure well",
    "start": "325720",
    "end": "330840"
  },
  {
    "text": "stuff fails deal with it I mean that's it know we can't we can't assume it doesn't fail it all goes back to I think",
    "start": "330840",
    "end": "336880"
  },
  {
    "text": "the first person who thought about this is V nyman and he wrote what I believe to be one of the first papers about that",
    "start": "336880",
    "end": "343360"
  },
  {
    "text": "and he's saying we should we should look at systems like biological systems we should an intrinsic part of their design",
    "start": "343360",
    "end": "350680"
  },
  {
    "text": "should be that they can fail and we have to live with that fail we have to detect that failure and we have to recover from",
    "start": "350680",
    "end": "356600"
  },
  {
    "text": "it um so in order to handle failure um you need",
    "start": "356600",
    "end": "362759"
  },
  {
    "text": "two machines and one machine has to observe another machine that's like in this little picture and if you if you",
    "start": "362759",
    "end": "367919"
  },
  {
    "text": "think about that that implies a couple of things which immediately hit you in the face one is that you have to be",
    "start": "367919",
    "end": "374560"
  },
  {
    "text": "interested in distributed program because you've got two nodes or you've got more than two nodes you have to be interested in parallel Computing because",
    "start": "374560",
    "end": "381120"
  },
  {
    "text": "they do actually execute programs at the same time and you have to be interested in concurrent programming so even if you",
    "start": "381120",
    "end": "387440"
  },
  {
    "text": "didn't want to be interested in these subjects you have have to be interested in them if you want to do fault tolerant",
    "start": "387440",
    "end": "392960"
  },
  {
    "text": "computation there's no alternative okay now there all sorts of impossibility theorems and things come",
    "start": "392960",
    "end": "398400"
  },
  {
    "text": "up in distributed computing and you can't ignore these things we don't want to break the laws of physics I mean we",
    "start": "398400",
    "end": "403880"
  },
  {
    "text": "if we assume they're synchronous we've just broken a law of physics there is no we you know light does not travel",
    "start": "403880",
    "end": "409160"
  },
  {
    "text": "instantaneously it travels at the speed of light it used to be a physicist so so we can't do this stuff we have to take into account the laws of",
    "start": "409160",
    "end": "415639"
  },
  {
    "text": "physics uh software systems that break the laws of physics will ultimately",
    "start": "415639",
    "end": "422000"
  },
  {
    "text": "fail because they're provably incorrect with respect to the laws of physics okay",
    "start": "422000",
    "end": "427319"
  },
  {
    "text": "so one of the first systems that was built for fa toet operation was",
    "start": "427319",
    "end": "433080"
  },
  {
    "text": "a tandem in in 1981 and uh I didn't actually have a tandem some of my friends had a tandem I got very jealous",
    "start": "433080",
    "end": "439919"
  },
  {
    "text": "of them and uh the classic work um with the tandem was documented by by Jim Gray",
    "start": "439919",
    "end": "446680"
  },
  {
    "text": "and he wrote this classic paper which is why did computers stop and uh what can",
    "start": "446680",
    "end": "452199"
  },
  {
    "text": "be done about it it's all about failure it's all about replicating computations on different machines this if if you",
    "start": "452199",
    "end": "458599"
  },
  {
    "text": "haven't read it read this paper I mean it's it's extremely good paper and it lays down a lot of the principles that",
    "start": "458599",
    "end": "464800"
  },
  {
    "text": "are still true today and uh what Jim did was postulate certain",
    "start": "464800",
    "end": "472599"
  },
  {
    "text": "properties about that and he said well if you were to do these in software software would probably behave the same way and I'd done one way thinking air",
    "start": "472599",
    "end": "479919"
  },
  {
    "text": "and the work I'd done was actually although I didn't know it at the time it's the kind of software emulation of the tandem machine because they were",
    "start": "479919",
    "end": "485840"
  },
  {
    "text": "doing the same sort of things and in Jim's paper he said well um if you if a",
    "start": "485840",
    "end": "491039"
  },
  {
    "text": "computation fails and you just restart it it it'll it'll probably it might work the second time in fact most of the time",
    "start": "491039",
    "end": "497080"
  },
  {
    "text": "it does work the second time this is due to subtle timing errors and things it's not a this is not a mathematical system",
    "start": "497080",
    "end": "503120"
  },
  {
    "text": "it's not a referentially transparent system it's not a pure functional system where if you call a function with the",
    "start": "503120",
    "end": "508639"
  },
  {
    "text": "same arguments every time you'll get the same return values you can get timing",
    "start": "508639",
    "end": "513959"
  },
  {
    "text": "and you can get all sorts of things happening if you call it if you start a computation off with the same values it might fail the first time due to some",
    "start": "513959",
    "end": "520440"
  },
  {
    "text": "strange sequencing and the second time it may work and Jim observed this for hardware and he thought that software",
    "start": "520440",
    "end": "526240"
  },
  {
    "text": "systems would would behave pretty much the same and uh I think they do so I mailed him and said yeah they do and he",
    "start": "526240",
    "end": "533040"
  },
  {
    "text": "mailed back and said welcome to the Church of concurrency which I thought was kind of fun um I I looked up some",
    "start": "533040",
    "end": "539600"
  },
  {
    "text": "things about about the tandem now it's funny because the tandem was built for fault tolerant Computing and uh these",
    "start": "539600",
    "end": "545160"
  },
  {
    "text": "are quotes from the Wikipedia actually and but I've seen them in many other places and the thing they found about the the tandem",
    "start": "545160",
    "end": "553160"
  },
  {
    "text": "computer were in some quotes here says Bes behind handling failures well this shared nothing messaging system design",
    "start": "554000",
    "end": "561079"
  },
  {
    "text": "also scales extremely well right and it says here um non-stop",
    "start": "561079",
    "end": "567320"
  },
  {
    "text": "systems are more and of more often being bought to meet scaling requirements of extreme fault tolerance so this is a",
    "start": "567320",
    "end": "574760"
  },
  {
    "text": "kind of funny side effect but they built an architecture for fault tolerance and then they found it scaled better than",
    "start": "574760",
    "end": "580519"
  },
  {
    "text": "other systems and that's because if you if if I mean if you got a web server or something if you could if you can manage",
    "start": "580519",
    "end": "586920"
  },
  {
    "text": "to scale it horizontally then you can meet enormous demands uh if you if the architecture is such you can't scale it",
    "start": "586920",
    "end": "592920"
  },
  {
    "text": "into independent bits then you can't scale it horizontally and you can't scale it up so so the key to a design um",
    "start": "592920",
    "end": "600040"
  },
  {
    "text": "methodology is being able to split computations into completely independent Parts if you've managed to solve your",
    "start": "600040",
    "end": "607120"
  },
  {
    "text": "problem by dividing it into independent Parts you can both get fault tolerance and you can get scalable so so I don't",
    "start": "607120",
    "end": "612839"
  },
  {
    "text": "really agree with your first statement you know so you can either get you can either get fault to or scalability no you you can either get both or none of",
    "start": "612839",
    "end": "620760"
  },
  {
    "text": "them right I try to say PA and",
    "start": "620760",
    "end": "626000"
  },
  {
    "text": "sensitivity okay right and and he says here um or I don't know if this is a",
    "start": "626399",
    "end": "632519"
  },
  {
    "text": "quote from Jim somebody said might be a quote from Pim these systems have no shared Central components not even the",
    "start": "632519",
    "end": "637920"
  },
  {
    "text": "main component this is this is the kind of you know today it's it's become almost religion I think a lot of",
    "start": "637920",
    "end": "644720"
  },
  {
    "text": "computer people thinking okay I keep I've been telling people shared memory is evil do not use it because it",
    "start": "644720",
    "end": "650040"
  },
  {
    "text": "prevents fault tolerance it itself prevents scalability so um there's quite a few people who believe that there's a",
    "start": "650040",
    "end": "656040"
  },
  {
    "text": "few die hards who still think it's a good idea but dying out as a kind of breed that will be gone in a few years",
    "start": "656040",
    "end": "662160"
  },
  {
    "text": "time right that was uh I won to talk about that",
    "start": "662160",
    "end": "669399"
  },
  {
    "text": "uh says nothing about F yeah um one of the things that was possibly",
    "start": "669399",
    "end": "676560"
  },
  {
    "text": "wrong with the tandem was that it just sort of did things again it didn't really have a",
    "start": "676560",
    "end": "682519"
  },
  {
    "text": "particularly sophisticated way of of organizing computations if they failed so one of the things we did is start",
    "start": "682519",
    "end": "689320"
  },
  {
    "text": "looking at that and figuring out how to do that and we we we came to the conclusion it's good to good to kind of",
    "start": "689320",
    "end": "694920"
  },
  {
    "text": "have a model of of hierarchical failures so basically if you if you're doing",
    "start": "694920",
    "end": "701320"
  },
  {
    "text": "something and and you can't do it uh you you give up you you try again",
    "start": "701320",
    "end": "706800"
  },
  {
    "text": "a few times but if trying again a few times doesn't work then you you stop trying again a few times and and you",
    "start": "706800",
    "end": "712399"
  },
  {
    "text": "just fail all that so so we we evolved this notion of organizing computations into trees and keeping sort of rules",
    "start": "712399",
    "end": "721440"
  },
  {
    "text": "over how often you restart them should they fail and and that became a a sort",
    "start": "721440",
    "end": "726480"
  },
  {
    "text": "of dominant philosophy in fact my thesis was was on um systems that work",
    "start": "726480",
    "end": "732600"
  },
  {
    "text": "reasonably well in the in the presence of failures I'm very interested in stuff that fails I want them to work even",
    "start": "732600",
    "end": "738800"
  },
  {
    "text": "though parts of them are failing and that's how we work you know bits of us fail but we still s muddle along and I",
    "start": "738800",
    "end": "744480"
  },
  {
    "text": "try to make a software analogy of that so what happens had to think about what happens when an error",
    "start": "744480",
    "end": "750160"
  },
  {
    "text": "occurs uh you can mask it pretend it didn't occur and try again or you can do nothing um the do nothing on crashing",
    "start": "750160",
    "end": "758279"
  },
  {
    "text": "later is horrible uh it's not a totally brilliant",
    "start": "758279",
    "end": "763440"
  },
  {
    "text": "idea or um well yeah you could you could you",
    "start": "763440",
    "end": "769720"
  },
  {
    "text": "could reinitialize it and try it again this is what Jim said um and that's what",
    "start": "769720",
    "end": "774839"
  },
  {
    "text": "we do and we we had the provision that if we've done that a few times and and it doesn't work then we'll fail that and",
    "start": "774839",
    "end": "781240"
  },
  {
    "text": "go up this tree of of things right so I evolved this philosophy called Let It",
    "start": "781240",
    "end": "786839"
  },
  {
    "text": "crash now um this is kind of counter to",
    "start": "786839",
    "end": "793000"
  },
  {
    "text": "normal thinking and programming um when I learned programming everybody said uh",
    "start": "793000",
    "end": "798240"
  },
  {
    "text": "we should have defensive programming we should check our arguments all the time C",
    "start": "798240",
    "end": "805360"
  },
  {
    "text": "programmer oops make sure oh damn",
    "start": "805360",
    "end": "811120"
  },
  {
    "text": "[Music] um where was I oh",
    "start": "817230",
    "end": "824440"
  },
  {
    "text": "yes defensive programming in c is only necessary because you have a single",
    "start": "824440",
    "end": "829720"
  },
  {
    "text": "thread of computation if you have a if you have a sequential language and it crashes you you've lost everything so",
    "start": "829720",
    "end": "836639"
  },
  {
    "text": "people who program in sequential Lang languages take enormous care to make sure that their their computations don't",
    "start": "836639",
    "end": "842880"
  },
  {
    "text": "fail for a lang you have as many processes as you want and you have um",
    "start": "842880",
    "end": "850240"
  },
  {
    "text": "you can arrange the processes observe each other so it doesn't really matter if they fa if you've got if youve if",
    "start": "850240",
    "end": "855519"
  },
  {
    "text": "you've got half a million processes to do something what does it matter if a few thousand of them fail okay there's a",
    "start": "855519",
    "end": "862399"
  },
  {
    "text": "completely different failure model instead of having one very fast you want to deliver something you can have one very fast delivery car that goes around",
    "start": "862399",
    "end": "869279"
  },
  {
    "text": "everybody and then you make sure because you've only got one that it doesn't crash or anything or you can have",
    "start": "869279",
    "end": "874880"
  },
  {
    "text": "thousands of little taxis all sort of bumbling around and who cares if a few of them crash if you if you want a reliable message delivery mechanism you",
    "start": "874880",
    "end": "881959"
  },
  {
    "text": "can have one extremely fast way of going between the source and destination and hope it never fails or you can send out",
    "start": "881959",
    "end": "887600"
  },
  {
    "text": "20 or 30 little Messengers who kind of bumble around and you know one of them will get through so you have a completely different view of failure so",
    "start": "887600",
    "end": "893800"
  },
  {
    "text": "I think the way that most programming languages um deal with failure is a",
    "start": "893800",
    "end": "899560"
  },
  {
    "text": "consequence of them being sequential um if if they were parallel you wouldn't think about failure in that way you would do it completely",
    "start": "899560",
    "end": "905839"
  },
  {
    "text": "differently um so this is yeah I said this we build trees of things um then",
    "start": "905839",
    "end": "913880"
  },
  {
    "text": "there was the observation well we can build different types of nodes in these trees if things depend upon each",
    "start": "913880",
    "end": "919240"
  },
  {
    "text": "other uh then if you look at the bottom layer suppose suppose all those things",
    "start": "919240",
    "end": "924600"
  },
  {
    "text": "dependent upon each other so if one of them crashed uh the other one couldn't",
    "start": "924600",
    "end": "929880"
  },
  {
    "text": "continue and so would we we would arrange for one computation to observe",
    "start": "929880",
    "end": "935399"
  },
  {
    "text": "the other ones and if any one of them crashed it would kill all of them and then restart all of them if that's when",
    "start": "935399",
    "end": "941399"
  },
  {
    "text": "they're dependent and if they're independent um then if one of them",
    "start": "941399",
    "end": "947079"
  },
  {
    "text": "crashes you could just restart that one because it wouldn't matter that's a sort of Andor tree the and nodes",
    "start": "947079",
    "end": "953720"
  },
  {
    "text": "are for dependent computations and the or nodes are for independent computations so of course an arbitary",
    "start": "953720",
    "end": "959480"
  },
  {
    "text": "tree can be split into into a graph of and and or nodes that's really rather easy um and that's basically what we do",
    "start": "959480",
    "end": "967480"
  },
  {
    "text": "when we when we build F tolerant systems I I like to think of the guy sort of um swimming between islands with sharks on",
    "start": "967480",
    "end": "973759"
  },
  {
    "text": "you know if he manages to get to the next Island he's okay and he can swim to the next Island and if a shark eats him was okay new man pops up by Magic on the",
    "start": "973759",
    "end": "981440"
  },
  {
    "text": "the island he's gone from start swimming over again and it all works very nicely right so the cornerstones of fault",
    "start": "981440",
    "end": "988279"
  },
  {
    "text": "tolerant programming are to isolate errors to make sure that when one thing",
    "start": "988279",
    "end": "994240"
  },
  {
    "text": "crashes it doesn't crash anything else because I I always used to say to people doesn't doesn't really matter if I write",
    "start": "994240",
    "end": "999360"
  },
  {
    "text": "my you know I Pro my program to be correct it's beautiful then some other program just comes along and Pang",
    "start": "999360",
    "end": "1004399"
  },
  {
    "text": "crashes it well um to really we need to isolate these things that's what uh",
    "start": "1004399",
    "end": "1010240"
  },
  {
    "text": "processes and the operating system uh do and actually it's even better done in",
    "start": "1010240",
    "end": "1015440"
  },
  {
    "text": "Hardware um if I've got one computer in Australia that's not connected to to a computer in America that computer",
    "start": "1015440",
    "end": "1022079"
  },
  {
    "text": "crashing is not probably going to crash the one in America unless we have sort",
    "start": "1022079",
    "end": "1027558"
  },
  {
    "text": "of quantum entanglement or something very strange that that will cause that to happen so the cornerstones of theault",
    "start": "1027559",
    "end": "1033079"
  },
  {
    "text": "tolerant processing are to be able to isolate errors detect them correct them and stop the errors from",
    "start": "1033079",
    "end": "1039760"
  },
  {
    "text": "propagating and then you have to ask is that something you want to do in in the programming language or do you do it in",
    "start": "1039760",
    "end": "1044798"
  },
  {
    "text": "the operating system uh and I would say the answer should you you should do it in the programming language it shouldn't be something that's done in the",
    "start": "1044799",
    "end": "1050600"
  },
  {
    "text": "operating system uh an operating system is yes question what's the difference between the first and the last in that",
    "start": "1050600",
    "end": "1057760"
  },
  {
    "text": "list stop errors from propagating",
    "start": "1057760",
    "end": "1063039"
  },
  {
    "text": "isolation well they're similar yeah I would say that",
    "start": "1063039",
    "end": "1068919"
  },
  {
    "text": "stop no the isolation means that you know where they have occurred right you can also do this in",
    "start": "1068919",
    "end": "1076400"
  },
  {
    "text": "Hardware like the Lin 3 architecture sorry line in three the spark derivative",
    "start": "1076400",
    "end": "1081960"
  },
  {
    "text": "for space horn applications right so so the six rules",
    "start": "1081960",
    "end": "1088840"
  },
  {
    "text": "I wrote in my thesis were were the following I'm going to show you first those rules because they're they're kind of abstract without anything to do with",
    "start": "1088840",
    "end": "1095039"
  },
  {
    "text": "programming languages then I'll bolt them into a programming Lang see what happens so so the first one's isolation I just I just need this property of",
    "start": "1095039",
    "end": "1101039"
  },
  {
    "text": "isolation as much as possible I really like to do it on physically separated machines I'd really like if my system",
    "start": "1101039",
    "end": "1107000"
  },
  {
    "text": "has a million processes i' would really like million processors to do it on I'd really like them to be physically separated in Hardware can't actually do",
    "start": "1107000",
    "end": "1113120"
  },
  {
    "text": "that at the moment but the way things are going maybe we'll be able to do it in in in pretty soon I mean we're going",
    "start": "1113120",
    "end": "1118159"
  },
  {
    "text": "to see a thousand core Network on chip architectures coming pretty pretty quickly and uh so we need that isolation",
    "start": "1118159",
    "end": "1125520"
  },
  {
    "text": "best in Hardware if you can't do it in Hardware do it in software right um yeah well that's obviously why",
    "start": "1125520",
    "end": "1132679"
  },
  {
    "text": "um if they're all nicely isolated and you want 109 reliability and the prob",
    "start": "1132679",
    "end": "1138200"
  },
  {
    "text": "probability failure you know your probability Theory it's easy um I could say we we made at Ericson we made this",
    "start": "1138200",
    "end": "1145320"
  },
  {
    "text": "thing the xxd and it was um got up to 99's reliability and I think then we",
    "start": "1145320",
    "end": "1150799"
  },
  {
    "text": "gave up um didn't need to be any more reliable uh well the next thing you need",
    "start": "1150799",
    "end": "1156039"
  },
  {
    "text": "to support concurrency obviously because you once things are isolated they they run concurrently",
    "start": "1156039",
    "end": "1163679"
  },
  {
    "text": "so you need you need Notions of concurrency um and be able to deal with it um",
    "start": "1163679",
    "end": "1170120"
  },
  {
    "text": "um bad concurrency models I think is is is something that that really makes a lot of programming",
    "start": "1170120",
    "end": "1177520"
  },
  {
    "text": "artificially difficult I mean what what goes on in the real world are a lot of parallel things and um if you try and",
    "start": "1177520",
    "end": "1184440"
  },
  {
    "text": "map those onto sequential programming language it just becomes extraordinar difficult um there's an awful lot of",
    "start": "1184440",
    "end": "1190480"
  },
  {
    "text": "accidental complexity that's due to that I I look at loads of problems and and",
    "start": "1190480",
    "end": "1196400"
  },
  {
    "text": "they appear to be difficult seen through eyes of a sequential world but when you",
    "start": "1196400",
    "end": "1201600"
  },
  {
    "text": "make them parallel you just isolate the message channels and what's going on that it becomes rather easy um and then",
    "start": "1201600",
    "end": "1207799"
  },
  {
    "text": "you need you know lots of computers to do things you must be able to detect",
    "start": "1207799",
    "end": "1212840"
  },
  {
    "text": "failures uh if you can't detect failures um you won't be able to recover",
    "start": "1212840",
    "end": "1218520"
  },
  {
    "text": "from them I mean since you don't know that a failure has occurred um you wouldn't know to do anything that's an",
    "start": "1218520",
    "end": "1224799"
  },
  {
    "text": "obvious principle that that you would need and well just say that oh this should also work across machine",
    "start": "1224799",
    "end": "1231120"
  },
  {
    "text": "boundaries it shouldn't be something within a b within a machine it's a it's if if the way things are done in alang",
    "start": "1231120",
    "end": "1237679"
  },
  {
    "text": "is for example if if I'm running ahead of myself there's a there's a link mechanism which allows",
    "start": "1237679",
    "end": "1244679"
  },
  {
    "text": "you to be told about the failure in a in a different process and if if you're",
    "start": "1244679",
    "end": "1251919"
  },
  {
    "text": "observing another process and that process does a computation and divides by zero you you get told the process",
    "start": "1251919",
    "end": "1257440"
  },
  {
    "text": "will die with a divide by zero exception but if the machine itself",
    "start": "1257440",
    "end": "1263600"
  },
  {
    "text": "dies you will also see an exception even if it's even if it's on the same or if it's on another machine so we try and",
    "start": "1263600",
    "end": "1269799"
  },
  {
    "text": "Abstract out physical boundaries so that we can view them as as software we don't want a programming model where we have",
    "start": "1269799",
    "end": "1275799"
  },
  {
    "text": "two cells of programming one works on one machine and then we have to change the programming model if we have a",
    "start": "1275799",
    "end": "1282279"
  },
  {
    "text": "distributed system we don't want to have that um it's not enough to detect f we",
    "start": "1282279",
    "end": "1289000"
  },
  {
    "text": "need to know why things have failed um maybe we can just restart them",
    "start": "1289000",
    "end": "1295600"
  },
  {
    "text": "and it will work again but if we want to improve our systems we need to put that information into persistent logs and",
    "start": "1295600",
    "end": "1302159"
  },
  {
    "text": "things so Engineers can look at it later uh one of the one of one of the question",
    "start": "1302159",
    "end": "1307840"
  },
  {
    "text": "I answered in my thesis actually was I asked a question can we make a system",
    "start": "1307840",
    "end": "1313039"
  },
  {
    "text": "that will crash at runtime recover without the user noticing it put something in a log file so that some guy",
    "start": "1313039",
    "end": "1319640"
  },
  {
    "text": "can look at that log file 6 months later and figure out what went wrong and then change the software such that when the",
    "start": "1319640",
    "end": "1325880"
  },
  {
    "text": "software is actually running the users are offered a reasonable level of service um and the answer is yes so we",
    "start": "1325880",
    "end": "1332679"
  },
  {
    "text": "can do that I traced down several several examples of that and it's really cool because we've built",
    "start": "1332679",
    "end": "1339679"
  },
  {
    "text": "systems uh where people have thought there were no errors in them because they've been offering a high quality of",
    "start": "1339679",
    "end": "1345559"
  },
  {
    "text": "service to the users and and they so they never bothered to look at the log and they've looked at the log F and",
    "start": "1345559",
    "end": "1351080"
  },
  {
    "text": "found these things are just crashing and restarting and crashing and restarting and it's just all bubbling along without anybody anybody worrying that's rather",
    "start": "1351080",
    "end": "1358240"
  },
  {
    "text": "nice few I believe the earling movie actually demonstrates that exact well",
    "start": "1358240",
    "end": "1363640"
  },
  {
    "text": "yeah that was back in 92 was it yes right next thing I'm want to do is",
    "start": "1363640",
    "end": "1370080"
  },
  {
    "text": "Live code upgrade um this is stuff for building really",
    "start": "1370080",
    "end": "1375240"
  },
  {
    "text": "system I mean I see systems having a stop switch but no that you know there's an on button but there's no off button",
    "start": "1375240",
    "end": "1382080"
  },
  {
    "text": "they're going to evolve forever once we' started them we haven't quite got there the systems we start we do stop I think",
    "start": "1382080",
    "end": "1387799"
  },
  {
    "text": "we've stop you know some systems have been stopped after six years because really we did want to stop them and U we",
    "start": "1387799",
    "end": "1393520"
  },
  {
    "text": "we really need to build this ability into systems to to evolve and uh we're going from these",
    "start": "1393520",
    "end": "1400000"
  },
  {
    "text": "sort of separate programs to large amorphous conglomerations of programs",
    "start": "1400000",
    "end": "1405400"
  },
  {
    "text": "that are never never consistent and they're always changing um more like biological",
    "start": "1405400",
    "end": "1410880"
  },
  {
    "text": "systems uh yeah I upgrade and we need stable storage if stable storage is is",
    "start": "1410880",
    "end": "1416640"
  },
  {
    "text": "there for if we really do crash if really everything if all the computers even though we've replicated even though",
    "start": "1416640",
    "end": "1422320"
  },
  {
    "text": "we've got 20 computers suppose they weren't replicated over data centers and all the",
    "start": "1422320",
    "end": "1427559"
  },
  {
    "text": "power went or suppose they were replicated over data centers and the power for the whole country went out and",
    "start": "1427559",
    "end": "1432600"
  },
  {
    "text": "they came up again later uh then you would need something where the data has",
    "start": "1432600",
    "end": "1437880"
  },
  {
    "text": "been carved in stone or however you do it so that so that when they recover talking about right only storage in the",
    "start": "1437880",
    "end": "1444159"
  },
  {
    "text": "sense that all of storage history is preserved no well you've got a choice",
    "start": "1444159",
    "end": "1453360"
  },
  {
    "text": "sir I want to write enough data to recover from don't necessarily want all data although as it's looking at the",
    "start": "1453360",
    "end": "1460120"
  },
  {
    "text": "moment probably we should to store all data I don't know it it there are some critical numbers",
    "start": "1460120",
    "end": "1465600"
  },
  {
    "text": "floating around there one one is the the amount of energy required to store data the amount of data energy to",
    "start": "1465600",
    "end": "1472600"
  },
  {
    "text": "transmit data and the amount of energy to compute a result from data and depending on how they go we've either",
    "start": "1472600",
    "end": "1479720"
  },
  {
    "text": "got a big problem in the future or we haven't I mean if if if the energy",
    "start": "1479720",
    "end": "1484919"
  },
  {
    "text": "required to store data is less and its growth is less than the data the energy",
    "start": "1484919",
    "end": "1490240"
  },
  {
    "text": "required to analyze that data then big data is a complete disaster because you know the two curves cross like that",
    "start": "1490240",
    "end": "1495320"
  },
  {
    "text": "we'll never analyze it all but if computation grows faster than storage energies then we will be able to analyze",
    "start": "1495320",
    "end": "1500360"
  },
  {
    "text": "it and then we have to get the energy down anyway so we don't fry the planet in doing so but that's a completely different",
    "start": "1500360",
    "end": "1506159"
  },
  {
    "text": "problem so we those ratios are extremely critical and the answer to my question",
    "start": "1506159",
    "end": "1511640"
  },
  {
    "text": "might depend upon those ratios because if we can't analyze it all there's no point in storing it all the old data",
    "start": "1511640",
    "end": "1516840"
  },
  {
    "text": "it's much easier to reason about if we store all the old data but if not we'll just store the",
    "start": "1516840",
    "end": "1522080"
  },
  {
    "text": "data we need to recover from right let's store stuff forever okay uh quotes do",
    "start": "1522080",
    "end": "1527360"
  },
  {
    "text": "you want these quotes yeah no I don't know how long have I got by the way forever or well yes actually",
    "start": "1527360",
    "end": "1535520"
  },
  {
    "text": "till 8:00 tomorrow morning oh right okay um this was a quote by the I've",
    "start": "1535520",
    "end": "1543520"
  },
  {
    "text": "just got a few quotes from the cameras will go up at 5:30 oh I see okay right",
    "start": "1543520",
    "end": "1550039"
  },
  {
    "text": "and then dinner occurs you doesn't leave good incentive to um",
    "start": "1550039",
    "end": "1558960"
  },
  {
    "text": "yeah Jim Gray said it with Hardware the key to fault tolerance software fault tolerance is to hierarchically decompose",
    "start": "1558960",
    "end": "1564919"
  },
  {
    "text": "large systems into modules each module being the unit of service and the unit of failure and the failure of a module",
    "start": "1564919",
    "end": "1570720"
  },
  {
    "text": "does not propagate beyond the module so I mean that was the idea I was saying earlier the isolation of those errors and the stopping them from from from",
    "start": "1570720",
    "end": "1577159"
  },
  {
    "text": "propag that's what Jim Gray said um he also said things processes are made fail fast by defensive programming they check",
    "start": "1577159",
    "end": "1583720"
  },
  {
    "text": "their inputs uh if any error is detected they signal a failure and stop",
    "start": "1583720",
    "end": "1590039"
  },
  {
    "text": "um so I really disagree with postell's principle sort of be be lenient with",
    "start": "1590039",
    "end": "1595960"
  },
  {
    "text": "your inputs generous with your outputs or what whatever he said no you shouldn't be lenient with your inputs if your",
    "start": "1595960",
    "end": "1601640"
  },
  {
    "text": "inputs aren't totally correct you should just stop immediately stop send me the wrong stuff because otherwise you get a",
    "start": "1601640",
    "end": "1606679"
  },
  {
    "text": "sort of knock on effect very difficult to see what's been happening um and you should fail as soon as possible systems",
    "start": "1606679",
    "end": "1612880"
  },
  {
    "text": "should be built which do exactly what their specification says and nothing else if they if they get outside this",
    "start": "1612880",
    "end": "1618760"
  },
  {
    "text": "specification they should immediately die and you shouldn't do anything else right and of of course Alan Kay",
    "start": "1618760",
    "end": "1626880"
  },
  {
    "text": "said of course about um people have got object OED programming all wrong he said it's just",
    "start": "1626880",
    "end": "1633360"
  },
  {
    "text": "a gentle reminder uh that small talk is not about its syntax",
    "start": "1633360",
    "end": "1640279"
  },
  {
    "text": "or the class Library it's not even about classes the big idea is messaging the big idea in objectoriented programming",
    "start": "1640279",
    "end": "1646039"
  },
  {
    "text": "is messaging it's got nothing to do with class is and Method that's just abstract data types and the organization of these things but it does have to do with",
    "start": "1646039",
    "end": "1652200"
  },
  {
    "text": "concurrency and messaging because this this is the thing that decouples systems",
    "start": "1652200",
    "end": "1657559"
  },
  {
    "text": "messaging is the great decoupler um messaging is also if if if it's",
    "start": "1657559",
    "end": "1663320"
  },
  {
    "text": "proper messaging that was I mean asynchronous messaging it doesn't violate the laws of",
    "start": "1663320",
    "end": "1669679"
  },
  {
    "text": "physics so if if we do that bear that in mind decouple things through messaging and don't break the laws of physics then",
    "start": "1669679",
    "end": "1676039"
  },
  {
    "text": "we'll have something that that that is is reasonable I think uh Schneider had a",
    "start": "1676039",
    "end": "1681360"
  },
  {
    "text": "few quotes on halt on failure failure said we should say these things you know we should halt immediately um not",
    "start": "1681360",
    "end": "1688399"
  },
  {
    "text": "continue um although they were saying these things that people weren't doing it in in in many system not in Practical",
    "start": "1688399",
    "end": "1693640"
  },
  {
    "text": "systems I think is this Bruce Schneider yes okay yes",
    "start": "1693640",
    "end": "1700399"
  },
  {
    "text": "me pres of the unit of error encapsulation so process to do what they're supposed to do fail as soon as",
    "start": "1700399",
    "end": "1707000"
  },
  {
    "text": "possible uh uh processes failure and the reason for failure can be DET by remote processes processes share no state but",
    "start": "1707000",
    "end": "1713720"
  },
  {
    "text": "communicate through message passing right so how do we program all this stuff well how do program six use",
    "start": "1713720",
    "end": "1721080"
  },
  {
    "text": "well you could use a library if if you had a programming language that didn't have this stuff you could stick it in a",
    "start": "1721080",
    "end": "1727880"
  },
  {
    "text": "library but if you stuck it in a library you would have things that were sort",
    "start": "1728159",
    "end": "1734679"
  },
  {
    "text": "logically correct but not pragmatically correct you wouldn't you wouldn't be able to make them ient if you put them in a library you you can only put make",
    "start": "1734679",
    "end": "1741159"
  },
  {
    "text": "them efficient by putting them in the lowest possible level of your programming language and if that doesn't survice putting those Primitives into",
    "start": "1741159",
    "end": "1747559"
  },
  {
    "text": "the hardware so if you if you put The Primitives you need into Hardware then this thing will go",
    "start": "1747559",
    "end": "1754240"
  },
  {
    "text": "efficiently if you put it into the lowest level of your language it will go efficiently if you bolt it on top of something else it will not go",
    "start": "1754240",
    "end": "1760360"
  },
  {
    "text": "efficiently my my colleague Mike Williams said three things you had to do in airing that had to be fast you had to",
    "start": "1760360",
    "end": "1766120"
  },
  {
    "text": "spawn processes quickly you had had to send messages quickly and you had to contact switch",
    "start": "1766120",
    "end": "1772080"
  },
  {
    "text": "very quickly so spent an awful lot of time tuning that to make sure that is extremely efficient if you emulate it in",
    "start": "1772080",
    "end": "1778080"
  },
  {
    "text": "in any any other way it won't work that the first version of that language I wrote was the emulation process were",
    "start": "1778080",
    "end": "1784600"
  },
  {
    "text": "emulated using a database that written in prologue so context which actually involved taking your state sticking it",
    "start": "1784600",
    "end": "1790080"
  },
  {
    "text": "in a database waiting for the next job to do and then you lift it out of the database so actually spending all your",
    "start": "1790080",
    "end": "1795320"
  },
  {
    "text": "time lifting things in and out of a database concurrency is not doing one thing at a",
    "start": "1795320",
    "end": "1801120"
  },
  {
    "text": "time and storing the intermediate state in a database that is not concurrency that's a",
    "start": "1801120",
    "end": "1807000"
  },
  {
    "text": "mess right so alang was actually designed for progr fa toet systems oh here here we go so the isolation rule",
    "start": "1807000",
    "end": "1815000"
  },
  {
    "text": "said that um wait a minut I mean processes are",
    "start": "1815000",
    "end": "1820360"
  },
  {
    "text": "isolated by Design This is not something that is done by the operating system or",
    "start": "1820360",
    "end": "1826360"
  },
  {
    "text": "by the hardware it's done by air L design that means that context switches",
    "start": "1826360",
    "end": "1831519"
  },
  {
    "text": "are very lightweight I mean in a regular operating system I think of the order of 700 words are moved when when a thread",
    "start": "1831519",
    "end": "1837600"
  },
  {
    "text": "contact switch occurs in airing there's about three registers are moved um because it's all emulated we've got",
    "start": "1837600",
    "end": "1844039"
  },
  {
    "text": "complete control over what's going on um the processes by Design uh cannot damage each other they",
    "start": "1844039",
    "end": "1851360"
  },
  {
    "text": "can't see each other's memory spaces and each process has its own stack and Heap and they're separately garbage collected",
    "start": "1851360",
    "end": "1857760"
  },
  {
    "text": "um something which at the time people said was nuts sorry how can they be very",
    "start": "1857760",
    "end": "1865039"
  },
  {
    "text": "lightweight if they have shared memory seems they don't have shared memory so if they don't have shared M that implies there's going to have to be duplication",
    "start": "1865039",
    "end": "1870960"
  },
  {
    "text": "and that's going to make them heavier weight right who thinks so yes like like yeah you would think that",
    "start": "1870960",
    "end": "1877559"
  },
  {
    "text": "would be the case I I take it the stack spaces are protected by the mmu no",
    "start": "1877559",
    "end": "1884159"
  },
  {
    "text": "you're not your Stacks no it's there's not a shared memory pool which all Stacks no well I me there is a shed",
    "start": "1884159",
    "end": "1891080"
  },
  {
    "text": "memory the physical memory of the machine right and and the me and the memory management unit prevents Stacks",
    "start": "1891080",
    "end": "1897120"
  },
  {
    "text": "from stabing on each other um if it were the case that we're using different different processes yes but",
    "start": "1897120",
    "end": "1903279"
  },
  {
    "text": "we're not we're all we're all in we're all in one process we took got two threads in one process oh so there's",
    "start": "1903279",
    "end": "1908720"
  },
  {
    "text": "stack protection mechanisms in yeah well that's in software that's the compiler has to be right oh okay okay I mean it's",
    "start": "1908720",
    "end": "1913960"
  },
  {
    "text": "a it's a compiler that that provides the protection okay it's not the runtime okay if if I",
    "start": "1913960",
    "end": "1921000"
  },
  {
    "text": "got the compiler wrong then uh it would be wrong okay so it's done it's done by by",
    "start": "1921000",
    "end": "1926720"
  },
  {
    "text": "software not by Hardware uh that's this thing keeps falling",
    "start": "1926720",
    "end": "1933559"
  },
  {
    "text": "off uh concurrency well in aing all processes are concurrent whether they",
    "start": "1936000",
    "end": "1941600"
  },
  {
    "text": "run in parallel or not that depends on what the hardware is of course if they're on One Core they won't run in parallel but they will still be conc",
    "start": "1941600",
    "end": "1948799"
  },
  {
    "text": "and if we had more cords and processes they would be parallel if we've done a good job there um on a multicore they",
    "start": "1948799",
    "end": "1957279"
  },
  {
    "text": "will sort of spread themselves out over the course you don't need to worry about that it it'll do it for you um to the",
    "start": "1957279",
    "end": "1964519"
  },
  {
    "text": "extent that it does a good or bad job that's a research problem because every time new architectures come along we",
    "start": "1964519",
    "end": "1971159"
  },
  {
    "text": "have to fiddle with them and and and make sure it works our goal is actually to have about a 75% utilization if if we",
    "start": "1971159",
    "end": "1979080"
  },
  {
    "text": "had 100 CPUs we would hope that our programs would go 75 times faster without tweaking them or anything and",
    "start": "1979080",
    "end": "1985080"
  },
  {
    "text": "for some problems that happens and for others it doesn't it depends upon the in intrinsic sequentiality of those",
    "start": "1985080",
    "end": "1992320"
  },
  {
    "text": "programs because amol L will still apply um usually I think you can get",
    "start": "1992320",
    "end": "1998240"
  },
  {
    "text": "down to 10% sequential code in in a problem without much trouble and then you might have to work hard to get rid of the last",
    "start": "1998240",
    "end": "2004720"
  },
  {
    "text": "10% um PL very problem dependent uh there are three Primitives",
    "start": "2004720",
    "end": "2011399"
  },
  {
    "text": "in alang to uh handle the concurrency Aang is",
    "start": "2011399",
    "end": "2017679"
  },
  {
    "text": "fundamentally I mean the the sequential part of Aang is just a simple dynamically typed functional programming",
    "start": "2017679",
    "end": "2024000"
  },
  {
    "text": "language with no mutable variables um there's a three Primitives bolted on top",
    "start": "2024000",
    "end": "2030000"
  },
  {
    "text": "of that one creates a parallel process produces a handle to it that's a spawn function you you give it a function so",
    "start": "2030000",
    "end": "2036799"
  },
  {
    "text": "spawn this function uh you can send it a message uh PID bang message it actually",
    "start": "2036799",
    "end": "2042279"
  },
  {
    "text": "sends it to the mailbox of the process each process has a mailbox and the the receiving process",
    "start": "2042279",
    "end": "2048398"
  },
  {
    "text": "has a little pattern driven engine that looks at the mailbox so can say uh when",
    "start": "2048399",
    "end": "2054599"
  },
  {
    "text": "when this pattern in the mailbox do this it waits for these messages to occur and then it does something so that's the the",
    "start": "2054599",
    "end": "2060638"
  },
  {
    "text": "stuff you need to add to a sequential language to make it concurrent and failure detection um",
    "start": "2060639",
    "end": "2068320"
  },
  {
    "text": "they saying I had spawn I had spawn link I can create a link between two",
    "start": "2068320",
    "end": "2073638"
  },
  {
    "text": "processes now without a link if one process dies no other",
    "start": "2073639",
    "end": "2080200"
  },
  {
    "text": "process will be informed with a link if either of the processes at one",
    "start": "2080200",
    "end": "2086240"
  },
  {
    "text": "side of the link dies the other process will get a message that's stuck in its mailbox so the link actually is one of",
    "start": "2086240",
    "end": "2092240"
  },
  {
    "text": "the things I've never seen in any other programming language or it it that's an Innovative thing in in um you know like",
    "start": "2092240",
    "end": "2099560"
  },
  {
    "text": "and it allows this do I have it right that Scala inherited your parallelism",
    "start": "2099560",
    "end": "2104800"
  },
  {
    "text": "yeah they yeah absolutely yeah I mean they sat down with it and did the same said do it like",
    "start": "2104800",
    "end": "2111960"
  },
  {
    "text": "this um I I I could say these Primitives they seem sort of easy but we did",
    "start": "2112000",
    "end": "2117200"
  },
  {
    "text": "actually try a lot of different mechanisms and kind of there were there",
    "start": "2117200",
    "end": "2123640"
  },
  {
    "text": "were there were pragmatic judgments there it was developed on a machine with you know",
    "start": "2123640",
    "end": "2130240"
  },
  {
    "text": "750 kilobytes of memory and and uh you know one mahz clock and and so we we I",
    "start": "2130240",
    "end": "2136640"
  },
  {
    "text": "mean there a lot of things there for pragmatic reasons it's rather like the early Unix said we didn't have enough room to keep all the stuff so we threw",
    "start": "2136640",
    "end": "2143079"
  },
  {
    "text": "out the stuff that never be used and and uh then we had a very for we had a user group who who were great because you",
    "start": "2143079",
    "end": "2149560"
  },
  {
    "text": "could just give them a new new version of language every day and they didn't bat an eyelid they it's quite nice and",
    "start": "2149560",
    "end": "2156040"
  },
  {
    "text": "at that stage you have you goes wrong you can change the librar so you can change the language or you can change the application so it becomes quite easy",
    "start": "2156040",
    "end": "2162040"
  },
  {
    "text": "to do things we're a small group which helped uh yeah you can you can set up",
    "start": "2162040",
    "end": "2167520"
  },
  {
    "text": "this link condition once you've done spawn link instead of Link um then you'll be told uh about",
    "start": "2167520",
    "end": "2175720"
  },
  {
    "text": "errors now in fact you have to do something else so two types of processes um there are those that if they receive",
    "start": "2175720",
    "end": "2183040"
  },
  {
    "text": "an exit message will themselves die and propagate that ex exit message to the other processes to which they are linked",
    "start": "2183040",
    "end": "2190560"
  },
  {
    "text": "and there are ones which can take care of those and stop that and the reason for that was the problem that occurred",
    "start": "2190560",
    "end": "2198240"
  },
  {
    "text": "in distributed computing of of sort of if of of nailing down zombie processes and killing everything if you if you",
    "start": "2198240",
    "end": "2204599"
  },
  {
    "text": "started a computation involving dozens of parallel processes um and that",
    "start": "2204599",
    "end": "2210160"
  },
  {
    "text": "computation depends upon all of them working uh and then something goes wrong in one of them you want all of them to",
    "start": "2210160",
    "end": "2215560"
  },
  {
    "text": "die and that was a sort of classic problem uh that was difficult to solve",
    "start": "2215560",
    "end": "2220960"
  },
  {
    "text": "so in fact Mike Mike Williams came up with this idea was called the seawire which was used in um telephones in",
    "start": "2220960",
    "end": "2227960"
  },
  {
    "text": "telephones we also had this thing a load of phones being connected together there something called the C and if you",
    "start": "2227960",
    "end": "2233000"
  },
  {
    "text": "grounded the seawire you you short circuited the thing the current went up everything and all the all the things",
    "start": "2233000",
    "end": "2238040"
  },
  {
    "text": "that were electromechanic they all dropped whatever they were doing and the same same principle happens used to",
    "start": "2238040",
    "end": "2243680"
  },
  {
    "text": "happen in the London Underground at the side of the train if you looked out of the thing there were two wires that r ran along everywhere and if the if the",
    "start": "2243680",
    "end": "2249520"
  },
  {
    "text": "train stopped or something you know the driver or somebody could lean out of the window and short circuit these two wires together and that would go through all",
    "start": "2249520",
    "end": "2255839"
  },
  {
    "text": "the circuit breakers and everything would stop and that's what the link mechanism ining it's a sort of thing",
    "start": "2255839",
    "end": "2261240"
  },
  {
    "text": "that grounds everything so they all collapse um but then maybe you don't want everything to collapse so you can",
    "start": "2261240",
    "end": "2267760"
  },
  {
    "text": "say to this process hey I'm a special process and I will not die and so this process becomes a",
    "start": "2267760",
    "end": "2275440"
  },
  {
    "text": "firewall so it doesn't die and it gets these messages in its mailbox and it can do things with it that's the failure",
    "start": "2275440",
    "end": "2281400"
  },
  {
    "text": "detection stuff and yeah but this the underlying principle in in error",
    "start": "2281400",
    "end": "2288359"
  },
  {
    "text": "handling in airl is is not to fix errors locally fix them somewhere",
    "start": "2288359",
    "end": "2293760"
  },
  {
    "text": "else the reason that you can't fix errors locally and you should not try to fix errors",
    "start": "2293760",
    "end": "2300359"
  },
  {
    "text": "locally is your machine that you're executing on might be dead so all this kind of try catch and something that's",
    "start": "2300359",
    "end": "2307119"
  },
  {
    "text": "actually dealing with the error locally that's not going to work if the whole",
    "start": "2307119",
    "end": "2312160"
  },
  {
    "text": "machine dies so you don't want a different way of programming software and Hardware you want to force them into the same the same abstract model so that",
    "start": "2312160",
    "end": "2319880"
  },
  {
    "text": "you can deal with them the same way you don't want a different programming model if you deploy your your your application",
    "start": "2319880",
    "end": "2325680"
  },
  {
    "text": "on one machine or if you deploy it on a network with dozens of machines you want them to behave the same way that's",
    "start": "2325680",
    "end": "2332240"
  },
  {
    "text": "deliberate so this philosophy of letting somebody else fix the problem is kind of Deep ingrained in the way we build",
    "start": "2332240",
    "end": "2338880"
  },
  {
    "text": "systems yes just a clarification you can deploy on an entire cluster of machines the exact same you Deploy on a single",
    "start": "2338880",
    "end": "2344760"
  },
  {
    "text": "machine M so when you Saye will happen are the latencies and things like that the",
    "start": "2344760",
    "end": "2350960"
  },
  {
    "text": "message message passing times will be different but the semantics will be the same yeah which is what we do so of",
    "start": "2350960",
    "end": "2356960"
  },
  {
    "text": "course we set up a a laptop with 20 or 30 nodes sorry only in 3.5 sorry saying that the",
    "start": "2356960",
    "end": "2366160"
  },
  {
    "text": "only difference is a little bit of latency between local and mode that's that's oh some of the fail modes are different as well that the latency is so",
    "start": "2366160",
    "end": "2372160"
  },
  {
    "text": "much higher order it could be th 10,000 or 100,000 times higher that in fact",
    "start": "2372160",
    "end": "2377839"
  },
  {
    "text": "Distributing these across a cluster of a thousand machines could actually run more slowly than just running on the same machine yes so",
    "start": "2377839",
    "end": "2384960"
  },
  {
    "text": "so but the idea of trying to design where something runs equally on one Machine versus a cluster to me feels",
    "start": "2384960",
    "end": "2391599"
  },
  {
    "text": "like a non-starter the environments are just too different well semantic they're the same",
    "start": "2391599",
    "end": "2398040"
  },
  {
    "text": "pragmatically they're different so when you deploy it on that one you're going to have to measure a bit and see see what's happening and figure out where to",
    "start": "2398040",
    "end": "2404200"
  },
  {
    "text": "put these things absolutely I mean you're completely right but that's the second order effect the first order",
    "start": "2404200",
    "end": "2410480"
  },
  {
    "text": "effect is to get that software correct and run it on one machine if it's not running on one machine you're you're you're in trouble having done that you",
    "start": "2410480",
    "end": "2417440"
  },
  {
    "text": "deploy it on a cluster or something like that and measure and see what's going on and see if we need to move things around",
    "start": "2417440",
    "end": "2422480"
  },
  {
    "text": "hopefully we could we'll be able to automate that in the future I mean that's that's in an area of research at the moment how you move those things and",
    "start": "2422480",
    "end": "2428800"
  },
  {
    "text": "where you put them sometimes it's 150 cores on one die in which case a tightly",
    "start": "2428800",
    "end": "2435880"
  },
  {
    "text": "coupled memory gets these messages zooming yeah in and out in a hurry",
    "start": "2435880",
    "end": "2442400"
  },
  {
    "text": "yeah we're playing with these things at the moment they're great fun power machine got 64 cores and it's so",
    "start": "2442400",
    "end": "2450000"
  },
  {
    "text": "hopefully it'll have a,2 you know it'll have a thousand C within if we manag to make the chip clustering model is the",
    "start": "2450000",
    "end": "2456240"
  },
  {
    "text": "multicore is a very idealized cluster",
    "start": "2456240",
    "end": "2461960"
  },
  {
    "text": "right yeah and then of course if we've got this nice model where everything go we talk to our Hardware friends and and",
    "start": "2462319",
    "end": "2468200"
  },
  {
    "text": "they'll do something to get these latencies down or if if it's possible or figure out how to move the",
    "start": "2468200",
    "end": "2474680"
  },
  {
    "text": "computations we'll see uh what happens there fault identification yes",
    "start": "2474680",
    "end": "2481760"
  },
  {
    "text": "um when processes die this message that comes with is",
    "start": "2481760",
    "end": "2487920"
  },
  {
    "text": "included in a additional parameter this y parameter that's in red and and that's",
    "start": "2487920",
    "end": "2493200"
  },
  {
    "text": "um provided by the runtime system it it tries to tell you exactly why it's crashed you can do whatever you want",
    "start": "2493200",
    "end": "2499240"
  },
  {
    "text": "with that the usual thing is to stick it in a log and uh um let some engineer",
    "start": "2499240",
    "end": "2505560"
  },
  {
    "text": "look at it later and if you put good error messages there or if he a good reasons you can",
    "start": "2505560",
    "end": "2511920"
  },
  {
    "text": "actually figure out months later what went wrong uh the live Cod upgrade bit uh",
    "start": "2511920",
    "end": "2518640"
  },
  {
    "text": "this is this is quite fun if if you um got a module Fu this is Aang and you say",
    "start": "2518640",
    "end": "2524640"
  },
  {
    "text": "FU colum bar that means uh call the latest version of Fu",
    "start": "2524640",
    "end": "2531000"
  },
  {
    "text": "even if you Chang the code while it was running and if you call Bar it means always call Bar in that particular model",
    "start": "2531000",
    "end": "2538319"
  },
  {
    "text": "but don't use the latest code uh if you Haven to change it while you running and that allows you to just dynamically",
    "start": "2538319",
    "end": "2544960"
  },
  {
    "text": "patch code um while you're running it without changing the namespace or anything which is kind",
    "start": "2544960",
    "end": "2551319"
  },
  {
    "text": "of convenient um sort of design fault if I was doing airing again uh you can only",
    "start": "2551319",
    "end": "2556400"
  },
  {
    "text": "do it twice you can't do it three times reason for that is we had very little memory on the machines we did it um if I",
    "start": "2556400",
    "end": "2563200"
  },
  {
    "text": "was going to do it again I I would allow infinite versions of that and and garbage collect all the old ones I don't",
    "start": "2563200",
    "end": "2568359"
  },
  {
    "text": "want to change the name space um when I'm updating the program or",
    "start": "2568359",
    "end": "2575160"
  },
  {
    "text": "letting it evolve because other programs depend upon on that Nam space so we we kind of glue the two",
    "start": "2575160",
    "end": "2581800"
  },
  {
    "text": "together uh stable storage is actually this is the one thing that is not done in Aang it's done",
    "start": "2581800",
    "end": "2588400"
  },
  {
    "text": "in third party libraries or the libraries we've written um so there's a lot of um stuff out there to do this",
    "start": "2588400",
    "end": "2596160"
  },
  {
    "text": "Mania is a real-time database that ships with airling and then and then people have built databases using airing",
    "start": "2596160",
    "end": "2602760"
  },
  {
    "text": "airling turns out to be very convenient to write databases in haven't quite told you the truth uh about the immutable",
    "start": "2602760",
    "end": "2608000"
  },
  {
    "text": "data airline's got these shared shared hash tables which which any process can",
    "start": "2608000",
    "end": "2613240"
  },
  {
    "text": "access um and that's the because in a database update we don't want to update",
    "start": "2613240",
    "end": "2618880"
  },
  {
    "text": "the entire world in a in a purely functional language we're not religious about about this kind of stuff um and so",
    "start": "2618880",
    "end": "2624480"
  },
  {
    "text": "people have built Big databases on top of that um two of them you might have",
    "start": "2624480",
    "end": "2630160"
  },
  {
    "text": "heard of a react and couchdb couchdb was the database that c chose um",
    "start": "2630160",
    "end": "2636559"
  },
  {
    "text": "to store all the data from the hron collider and and contributed to the Discovery the higs BOS on so um that's",
    "start": "2636559",
    "end": "2644520"
  },
  {
    "text": "kind of fun because I used to be a physicist uh reac is used all over the place for um internet scale applications",
    "start": "2644520",
    "end": "2653240"
  },
  {
    "text": "so a lot of these big things you see on the you know I I don't know if whatap uses do they use",
    "start": "2653240",
    "end": "2658920"
  },
  {
    "text": "react they use magnesia cool yes I mean their problem isn't big",
    "start": "2658920",
    "end": "2664119"
  },
  {
    "text": "enough to use react I mean so only 400 million people using it at the same time or something I",
    "start": "2664119",
    "end": "2670200"
  },
  {
    "text": "don't know okay so yeah what was I say fault tolerance",
    "start": "2670200",
    "end": "2675760"
  },
  {
    "text": "implies scalability in order to make things fault tolerant you have to make sure they're made out of isolated",
    "start": "2675760",
    "end": "2682520"
  },
  {
    "text": "components uh if the components are isolated we can run them in parallel and hopefully they'll be",
    "start": "2682520",
    "end": "2690520"
  },
  {
    "text": "scalable apart from you there will be your problems of of latencies and things they will change and the failure",
    "start": "2690520",
    "end": "2697040"
  },
  {
    "text": "characteristics will change as well but we have to have some way of doing it we have to evolve towards better ways of",
    "start": "2697040",
    "end": "2703040"
  },
  {
    "text": "doing these things so aling has it feels to me like you may be conflating",
    "start": "2703040",
    "end": "2709119"
  },
  {
    "text": "coincidence with causality that there are some of the things that you do for fall tolerance that also contribute to",
    "start": "2709119",
    "end": "2714680"
  },
  {
    "text": "scalability but in general it's not OB that principle holds for example if you take a consensus based systems like",
    "start": "2714680",
    "end": "2720160"
  },
  {
    "text": "taxos which is highly fa it's also extremely nonscale yeah absolutely yes",
    "start": "2720160",
    "end": "2725520"
  },
  {
    "text": "yes but then you impacts for all problems you don't need this leadership election and all these kind of things",
    "start": "2725520",
    "end": "2730559"
  },
  {
    "text": "you need them for some problems so um I think if they're used as a general Workhorse to solve all problems you you",
    "start": "2730559",
    "end": "2736880"
  },
  {
    "text": "you that's won't lead to good architectures um right so where we got",
    "start": "2736880",
    "end": "2742599"
  },
  {
    "text": "to haang's got very lightweight processes very fast message passing total separation between processes",
    "start": "2742599",
    "end": "2749640"
  },
  {
    "text": "automatic marshalling and Dem Maring of data this is actually back to the old Unix pipe thing or or to monads or",
    "start": "2749640",
    "end": "2756800"
  },
  {
    "text": "something something like that you know the output of one thing should become the input of another thing with as as little fuss as possible in the Unix",
    "start": "2756800",
    "end": "2764119"
  },
  {
    "text": "model you go through text all the time so so programs are serializing and deserializing things all the time which",
    "start": "2764119",
    "end": "2769839"
  },
  {
    "text": "is a complete mess um in the aing model they're aing terms which are just floating through the system so there are no semantic mismatches you don't if you",
    "start": "2769839",
    "end": "2777640"
  },
  {
    "text": "go into a database you don't have to change the format of what's going into that's one reason these databases go very fast because if you store Aang",
    "start": "2777640",
    "end": "2784880"
  },
  {
    "text": "terms in a database they they undergo no data transformations to get",
    "start": "2784880",
    "end": "2790160"
  },
  {
    "text": "themselves into the database they they just go straight in they're like object databas sorry no marshalling well there",
    "start": "2790160",
    "end": "2797520"
  },
  {
    "text": "is a lowlevel marshalling and there is a lowlevel format obviously because we can serialize anything right so there's a",
    "start": "2797520",
    "end": "2803839"
  },
  {
    "text": "there's a ining thing ter term to Binary which takes anying term I anying data structure that serializes it and then um",
    "start": "2803839",
    "end": "2811319"
  },
  {
    "text": "binary to term which reconstructs it but it's not passing it's it's Rec it's llz it's it's reconstruct a to is there an",
    "start": "2811319",
    "end": "2818640"
  },
  {
    "text": "effort to locate structure sequentially in memory such that the marshalling is",
    "start": "2818640",
    "end": "2823800"
  },
  {
    "text": "essentially nil and other words you can just suck up them yeah we've tried some of that stuff yeah fact the atom the",
    "start": "2823800",
    "end": "2833440"
  },
  {
    "text": "there's a caching mechanism between systems where um things like atoms are they sent the first time there's a 256",
    "start": "2833440",
    "end": "2840160"
  },
  {
    "text": "by cache and the first time if if the thing has been sent before and in the",
    "start": "2840160",
    "end": "2847079"
  },
  {
    "text": "local cache you just send a single bite so so you've got like object number 23",
    "start": "2847079",
    "end": "2852440"
  },
  {
    "text": "if I send you a new thing I might say here's a big data structure and it's called object number 23 second time I send it if it hasn't been changed I just",
    "start": "2852440",
    "end": "2858559"
  },
  {
    "text": "send you a 23 and then I might send you a a zero followed by 23 and then a new data structure to to change the cache so",
    "start": "2858559",
    "end": "2865520"
  },
  {
    "text": "we tried to identify common data structures and in fact it went fast when we haven't published much on that we",
    "start": "2865520",
    "end": "2871520"
  },
  {
    "text": "published a paper years and years ago I believe I can't remember we did experiment it's actually faster than",
    "start": "2871520",
    "end": "2877160"
  },
  {
    "text": "sunrpc which is quite cool because we weren't attempting to be fast but the caching made it faster which is um and",
    "start": "2877160",
    "end": "2883079"
  },
  {
    "text": "that that's hidden inside distributed ding these these caching mechanisms Yeah question yes can you",
    "start": "2883079",
    "end": "2890440"
  },
  {
    "text": "quantify the speed of message passing I'm curious when you say very fast what that means either in terms of you know",
    "start": "2890440",
    "end": "2895960"
  },
  {
    "text": "absolute nanoseconds or perhaps relative to the cost of a method indication which would be the alternative in many of",
    "start": "2895960",
    "end": "2901680"
  },
  {
    "text": "these systems well we can measure it but you have't we do all the time yeah",
    "start": "2901680",
    "end": "2907720"
  },
  {
    "text": "absolutely yes cuz when we're tuning things I mean we have to make tradeoffs can you WR this about any any",
    "start": "2907720",
    "end": "2914400"
  },
  {
    "text": "numbers you happen to know off the tip of your tongue there's a multitude of different",
    "start": "2914400",
    "end": "2919720"
  },
  {
    "text": "architectures there's hundreds of different ways of organizing silicon and people have built multics that do many",
    "start": "2919720",
    "end": "2927400"
  },
  {
    "text": "different message passing approaches so each one would have different figures of Merit I play I I got my hands on a 24",
    "start": "2927400",
    "end": "2937119"
  },
  {
    "text": "core multicore one some of the early multicores and I I wrote a simple program make it a 24x 24 Matrix and just",
    "start": "2937119",
    "end": "2944440"
  },
  {
    "text": "send a th messages between each pair and fill up the Matrix and I was totally shocked I mean it went 6,000 times",
    "start": "2944440",
    "end": "2950960"
  },
  {
    "text": "slower between the best pair and the worst pair and then I talked to the hard guy",
    "start": "2950960",
    "end": "2956319"
  },
  {
    "text": "said well what's going on here and he said well this is a cash here and that's got to do that and you get a cash Miss there and it goes out there and it does",
    "start": "2956319",
    "end": "2961599"
  },
  {
    "text": "this and I thought wait a minute that's that's broken my my the the the the the",
    "start": "2961599",
    "end": "2967240"
  },
  {
    "text": "principle we had earlier you know was um the the time it took to send a message",
    "start": "2967240",
    "end": "2972520"
  },
  {
    "text": "to process if you in the same node was was independent of where it was and then suddenly on these um multic course it's",
    "start": "2972520",
    "end": "2979280"
  },
  {
    "text": "very different and then every generation of multicore has been different they've they've they put in cach structures and",
    "start": "2979280",
    "end": "2984520"
  },
  {
    "text": "the network on chip architectures again are very different and and they are I mean I I believe in them I mean they're",
    "start": "2984520",
    "end": "2990319"
  },
  {
    "text": "going to come and knock out all the other architectures because all the other architectures are um they they're",
    "start": "2990319",
    "end": "2995920"
  },
  {
    "text": "not sort of the network on chip are very very regular so you can fabricate them like large memory chips like I think we'll",
    "start": "2995920",
    "end": "3002400"
  },
  {
    "text": "see 1024 chip core things and get the complexity of the individual cores down put a big solid crossbar between them",
    "start": "3002400",
    "end": "3008760"
  },
  {
    "text": "and uh very nice that's what I'm playing with and also very low energy which is good yeah so we try to make fast",
    "start": "3008760",
    "end": "3015960"
  },
  {
    "text": "sequential code well fast fast of course we're not as fast to see or Julia or",
    "start": "3015960",
    "end": "3021160"
  },
  {
    "text": "something like that but if it's not fast enough you can call Julia or you can call C or Fortran or",
    "start": "3021160",
    "end": "3027720"
  },
  {
    "text": "whatever your favorite or build an fpga or build vsi if you want to go really fast I mean are you a Julia fan you seem",
    "start": "3027720",
    "end": "3034280"
  },
  {
    "text": "to mentioning I'm yeah oh Julia is great yeah yeah I like Julia um strict",
    "start": "3034280",
    "end": "3040160"
  },
  {
    "text": "functional code I mean if there any functional programming any functional programs here oh well don't kill me",
    "start": "3040160",
    "end": "3046119"
  },
  {
    "text": "because it's not actually strict sort of more or less mind you the the Simon pton Jones",
    "start": "3046119",
    "end": "3053920"
  },
  {
    "text": "said well H's got IO and so it's not really strict and he said so the only thing it's",
    "start": "3053920",
    "end": "3059400"
  },
  {
    "text": "useful for is heating your house cuz the processor gets warm that's the only strict pure",
    "start": "3059400",
    "end": "3065839"
  },
  {
    "text": "functional program is good can be used to heat your house because the processor gets warm it's got Dynamic typing and",
    "start": "3065839",
    "end": "3072359"
  },
  {
    "text": "transparent distribution and you can compose sequential and concurrent code which is which is nice so the the unit",
    "start": "3072359",
    "end": "3078200"
  },
  {
    "text": "of composition for sequential code is is um the function call and the unit of composition for",
    "start": "3078200",
    "end": "3085400"
  },
  {
    "text": "parallel code is of course creating processes and creating pipelines with with messages in them and the properties of all this well",
    "start": "3085400",
    "end": "3093559"
  },
  {
    "text": "as I said earlier no sharing hot code replacement pure messaging passing no locks lots of",
    "start": "3093559",
    "end": "3099079"
  },
  {
    "text": "computers and functional programming and and in in response to a lot of your question I would say honestly what we're",
    "start": "3099079",
    "end": "3104359"
  },
  {
    "text": "trying to do was not to produce an academic thing we we're",
    "start": "3104359",
    "end": "3109640"
  },
  {
    "text": "working for Eric and we're trying to make something we can put into practice so we weren't around stealing all what",
    "start": "3109640",
    "end": "3115680"
  },
  {
    "text": "we thought were good ideas in in the mid 80s and stick them into a language and see what happens and and uh so are you",
    "start": "3115680",
    "end": "3122040"
  },
  {
    "text": "playing with parallel chips you yeah yeah okay absolutely got them on my desk fact if I wasn't here I'd be playing",
    "start": "3122040",
    "end": "3128040"
  },
  {
    "text": "with them so I'm looking forward to I've been going talking to these silly lecture",
    "start": "3128040",
    "end": "3134160"
  },
  {
    "text": "lecture things all over the place and so $99 is for get parallel right yeah no I",
    "start": "3134160",
    "end": "3140440"
  },
  {
    "text": "want the f 24 call one so parallel here we come y",
    "start": "3140440",
    "end": "3147240"
  },
  {
    "text": "uh let it crash philosophy that that that's I think kind of new to Aang it's not how everybody else does it it's How",
    "start": "3147240",
    "end": "3153599"
  },
  {
    "text": "We Do It um don't handle errors in this I always talk about doing things in band and out",
    "start": "3153599",
    "end": "3159880"
  },
  {
    "text": "of band you know if you if you try and put the error handling in the same band",
    "start": "3159880",
    "end": "3165559"
  },
  {
    "text": "as the computation um it's difficult I always think of",
    "start": "3165559",
    "end": "3170599"
  },
  {
    "text": "these things like like um you have blackboards here it's wonderful or well",
    "start": "3170599",
    "end": "3175799"
  },
  {
    "text": "whiteboards um you know I think of computations like this where sort of you",
    "start": "3175799",
    "end": "3180880"
  },
  {
    "text": "know there's some some in and some output and some kind of functional relationship between them but the errors",
    "start": "3180880",
    "end": "3188040"
  },
  {
    "text": "you know the these sort of go they're on a bus here I think it like chips the errors flow on the errors flow on these",
    "start": "3188040",
    "end": "3194720"
  },
  {
    "text": "things and uh functions flow on the other things think of them wiring chips",
    "start": "3194720",
    "end": "3200760"
  },
  {
    "text": "together um yeah this let it crash philosophy if Pro is Crash then the",
    "start": "3200760",
    "end": "3208319"
  },
  {
    "text": "airling runtime system detects it and should do something about that the OS should protect the",
    "start": "3208319",
    "end": "3215079"
  },
  {
    "text": "resources across boundaries and things and the program should immediately crash if they go off",
    "start": "3215079",
    "end": "3224480"
  },
  {
    "text": "spec and I would say this that defensive programming is a consequence of a bad concurrency model",
    "start": "3224480",
    "end": "3230720"
  },
  {
    "text": "um it's just you you just wouldn't if you had a proper concurrent language you wouldn't do it that way you would I",
    "start": "3230720",
    "end": "3237200"
  },
  {
    "text": "think this is the only way you would do it in fact I I have met so many people who don't know erling who've converted",
    "start": "3237200",
    "end": "3244839"
  },
  {
    "text": "they they're programming in C++ and or something and they said well we needed to invent our own little Executives and",
    "start": "3244839",
    "end": "3250280"
  },
  {
    "text": "we sort of discovered that we needed to group things and then we discovered we needed to monitor them and and then we",
    "start": "3250280",
    "end": "3256480"
  },
  {
    "text": "discovered we need to and then we found airling and found you'd done all this in",
    "start": "3256480",
    "end": "3261559"
  },
  {
    "text": "1986 and and then some of them uh adopt air Lang and then they bankrupt",
    "start": "3261559",
    "end": "3267079"
  },
  {
    "text": "the other companies that are not using hairing And So It Goes On which is kind of fun uh so we got no shared memory",
    "start": "3267079",
    "end": "3272880"
  },
  {
    "text": "pure message passing of all the stuff that I said before and does it",
    "start": "3272880",
    "end": "3278119"
  },
  {
    "text": "work would be an interesting question well here's a little one of many stories",
    "start": "3278119",
    "end": "3286280"
  },
  {
    "text": "um this this is this is I I just brought this up in another this is the road to WhatsApp so um 2002 Alex shipin started",
    "start": "3286280",
    "end": "3295839"
  },
  {
    "text": "building an mppc server in fully in airling um 2005 company called process",
    "start": "3295839",
    "end": "3302160"
  },
  {
    "text": "one MMO formed this company called uh process one uh took the This xmpp Server that",
    "start": "3302160",
    "end": "3311240"
  },
  {
    "text": "that uh Alexi had written and and turned it into some some products and things in",
    "start": "3311240",
    "end": "3317799"
  },
  {
    "text": "in 2007 Facebook uh uh launch a chat server that was",
    "start": "3317799",
    "end": "3324920"
  },
  {
    "text": "based on that software written in in uh um in 2008 they deployed",
    "start": "3324920",
    "end": "3331680"
  },
  {
    "text": "it um in 2009 uh they they dropped it actually",
    "start": "3331680",
    "end": "3337720"
  },
  {
    "text": "and rewrote it in C++ and I talked to the one of the technical people at um",
    "start": "3337720",
    "end": "3343079"
  },
  {
    "text": "Facebook said why'd you do that he said well we had lots of C++ programs we didn't have many airling programs that's because the universities aren't",
    "start": "3343079",
    "end": "3349119"
  },
  {
    "text": "educating airling programmers which is something you might like to think about um so they dropped it and uh but you see",
    "start": "3349119",
    "end": "3357559"
  },
  {
    "text": "um what's his name Yan kuam started using aing before they dropped it so he",
    "start": "3357559",
    "end": "3362880"
  },
  {
    "text": "got into this little window of opportunity uh kind of hey what a what a what are people like Facebook doing yeah",
    "start": "3362880",
    "end": "3369480"
  },
  {
    "text": "they're um they're uh they're using airlin so he he started that in",
    "start": "3369480",
    "end": "3374680"
  },
  {
    "text": "2013 he was tweeting and saying hey we're doing 18 billion messages a day",
    "start": "3374680",
    "end": "3379760"
  },
  {
    "text": "and uh oh another one actually this is not the road to Whatsapp various things keep bubbling along uh",
    "start": "3379760",
    "end": "3387200"
  },
  {
    "text": "um like this and then on the 19th of February WhatsApp was acquired by Facebook um for $19 billion which the",
    "start": "3387200",
    "end": "3393880"
  },
  {
    "text": "highest value of any software acquisition reason of course they not buying airline or anything like that",
    "start": "3393880",
    "end": "3399079"
  },
  {
    "text": "they're buying the fact that that thing got to the marketplace a lot earlier than anybody else because this way of programming is actually much easier to",
    "start": "3399079",
    "end": "3405880"
  },
  {
    "text": "program and you can you can build stuff quicker and you'll have less errors in it and it would be easy to maintain",
    "start": "3405880",
    "end": "3411799"
  },
  {
    "text": "because the code's a lot shorter so that that we've demonstrated many many hello",
    "start": "3411799",
    "end": "3417079"
  },
  {
    "text": "uh and and that we've seen many many times and uh I just come back from uh",
    "start": "3417079",
    "end": "3422799"
  },
  {
    "text": "strangely where I go for Kino and a guy from weather acq is that right AC",
    "start": "3422799",
    "end": "3430599"
  },
  {
    "text": "weather acq weather yeah he said we're using airine I said what can I tell people he said yeah he said we're doing",
    "start": "3430599",
    "end": "3437200"
  },
  {
    "text": "six billion messages a day to mobiles and things he said did you have any problems",
    "start": "3437200",
    "end": "3443559"
  },
  {
    "text": "no do you need any help Fran always says I've always got to ask anybody if they need any help and then I tell him",
    "start": "3443799",
    "end": "3450599"
  },
  {
    "text": "Franchesco will help um cuz he started he was a student of mine who who founded outling Solutions and and no don't need",
    "start": "3450599",
    "end": "3457640"
  },
  {
    "text": "any help it just works and then then then I went to",
    "start": "3457640",
    "end": "3462760"
  },
  {
    "text": "Chicago and there's the airline Factory there and there what was that guy what was his ad ad ad I don't know who they",
    "start": "3462760",
    "end": "3468520"
  },
  {
    "text": "are ad he was 80 billion messages a day or something ads yeah sorry 80 billion",
    "start": "3468520",
    "end": "3473839"
  },
  {
    "text": "server ads a day are running through these things so I think this is kind of proof of concept that the stuff does actually work and then Erics in",
    "start": "3473839",
    "end": "3480000"
  },
  {
    "text": "itself the mobile networks the mobile base stations for smart data are control by airine so they're switching all of",
    "start": "3480000",
    "end": "3485720"
  },
  {
    "text": "the about half I would guess the mobile data traffic is being coordinated by",
    "start": "3485720",
    "end": "3491280"
  },
  {
    "text": "that that's the control plane um still would tell you all about this stuff um the way we",
    "start": "3491280",
    "end": "3497799"
  },
  {
    "text": "build",
    "start": "3497799",
    "end": "3500799"
  },
  {
    "text": "things in data coms is",
    "start": "3502839",
    "end": "3508119"
  },
  {
    "text": "uh we have data plane stuff it's called the data plane here data",
    "start": "3509280",
    "end": "3515200"
  },
  {
    "text": "plane uh that's highspeed data this is 10 gbits per second down here you can't do 10 gbits per second in software and",
    "start": "3515200",
    "end": "3522839"
  },
  {
    "text": "uh up here you've got control plane",
    "start": "3522839",
    "end": "3528280"
  },
  {
    "text": "here uh and you can do control plane stuff in software um traditionally",
    "start": "3528400",
    "end": "3537000"
  },
  {
    "text": "these two things have been bolted together and you can't you can't get at this interface and being sold as very",
    "start": "3537000",
    "end": "3543599"
  },
  {
    "text": "expensive boxes so all these things you buy like dedicated routers DNS boxes firewalls anything like that done by",
    "start": "3543599",
    "end": "3550119"
  },
  {
    "text": "Network people they have bolted these two things together right what's happening now is",
    "start": "3550119",
    "end": "3557720"
  },
  {
    "text": "people are say well hang on can't we split this and have one you know this thing commodity Hardware like a PC and go into Radio Shack and buy one of the",
    "start": "3557720",
    "end": "3565000"
  },
  {
    "text": "data plane things and then just use any old bit of software to control that's open Flow and",
    "start": "3565000",
    "end": "3570039"
  },
  {
    "text": "and network defined programming and things like that so these these things are coming and actually airling in the",
    "start": "3570039",
    "end": "3575799"
  },
  {
    "text": "ericon products airling is doing that stuff of course it's not doing that stuff that stuff's done in Hardware with",
    "start": "3575799",
    "end": "3581200"
  },
  {
    "text": "an fpga in the middle between this right no not well no I mean down down here is",
    "start": "3581200",
    "end": "3586520"
  },
  {
    "text": "fbga and vsi and goodness knows what I mean that's uh but not in between all",
    "start": "3586520",
    "end": "3592400"
  },
  {
    "text": "programmable switches so I think I think",
    "start": "3592400",
    "end": "3599480"
  },
  {
    "text": "that yeah oh yes so the answer my question there was was sort of yes pragmatically yeah this stuff does",
    "start": "3599480",
    "end": "3605160"
  },
  {
    "text": "actually work which is possibly why I'm standing here and telling you about it I don't",
    "start": "3605160",
    "end": "3611480"
  },
  {
    "text": "know the future um what's happening in the future well",
    "start": "3611480",
    "end": "3617720"
  },
  {
    "text": "um yeah we've got to solve The World's energy but we're Engineers you know we",
    "start": "3617720",
    "end": "3623319"
  },
  {
    "text": "don't want to fry the planet so so I I'd really like to move these processors and",
    "start": "3623319",
    "end": "3628720"
  },
  {
    "text": "the switches and things onto solar panels and and just get the energy use down to a sustainable level that can",
    "start": "3628720",
    "end": "3634400"
  },
  {
    "text": "come from solar panels I would like to make the I'd like to connect all of these together in the world to form a big distributed computer based on solar",
    "start": "3634400",
    "end": "3640920"
  },
  {
    "text": "panels where the computation follows the Sun and uh so the next thing we need to",
    "start": "3640920",
    "end": "3646839"
  },
  {
    "text": "do is kind of figure out this location transparency of all the processes in the world faang is only we know about all",
    "start": "3646839",
    "end": "3654119"
  },
  {
    "text": "the processes on one machine we given it name we can send a message to it but I would like actually to know how to send",
    "start": "3654119",
    "end": "3659400"
  },
  {
    "text": "a message to all the processes that exist on any machine anywhere in the world and so I think we know how to do",
    "start": "3659400",
    "end": "3666000"
  },
  {
    "text": "that actually I mean we know that there's many many many many manur of of",
    "start": "3666000",
    "end": "3671200"
  },
  {
    "text": "research into distributed hash tables and you know thousand packs of phds we can go and read how to do it but we have",
    "start": "3671200",
    "end": "3677720"
  },
  {
    "text": "to talk to the network people and we have to talk to software people choose one of those phds and do it build it I I",
    "start": "3677720",
    "end": "3685559"
  },
  {
    "text": "I presume you're heading towards process migration which is to say that live",
    "start": "3685559",
    "end": "3691160"
  },
  {
    "text": "processes can move around well not moving to done that for AG I mean we do migrate processes um in air Lang on a",
    "start": "3691160",
    "end": "3698720"
  },
  {
    "text": "multicore we move them between uh processes yeah sure but we don't move them very far we we don't move processes",
    "start": "3698720",
    "end": "3704799"
  },
  {
    "text": "from here here to Australia and there's a great trade-off you know should we be moving the data to the computation or",
    "start": "3704799",
    "end": "3710480"
  },
  {
    "text": "the computation to the data or move them both somewhere in the middle or do these things so doing some experiments with",
    "start": "3710480",
    "end": "3717559"
  },
  {
    "text": "machine learning to try and figure out what what what's going on there and how does the energy usage depend upon the",
    "start": "3717559",
    "end": "3724720"
  },
  {
    "text": "placement of those processor can we do speculative computation moving the process around to see what happens so I",
    "start": "3724720",
    "end": "3730039"
  },
  {
    "text": "think these sort of things like the parallel and machine learning and those kind of things are very interesting so",
    "start": "3730039",
    "end": "3735880"
  },
  {
    "text": "and and uh yeah so I think it's time for questions cuz that's",
    "start": "3735880",
    "end": "3742520"
  },
  {
    "text": "the end of my slides thank you thank you can you comment on the relationship",
    "start": "3742520",
    "end": "3747640"
  },
  {
    "text": "between erlang and Scala cuz I I'm just coming up to St on Scala and and I want to understand what got inherited and",
    "start": "3747640",
    "end": "3754520"
  },
  {
    "text": "what are the differences in commonalities I don't know because I don't really know Scola but I know they copied the the AL",
    "start": "3754520",
    "end": "3760680"
  },
  {
    "text": "libraries the guy did it I mean he was told just hey look at and do it like that",
    "start": "3760680",
    "end": "3765720"
  },
  {
    "text": "so influen quite a few know both sorry does anybody hear those",
    "start": "3765720",
    "end": "3771960"
  },
  {
    "text": "quot can you make a comment um it's uh so Scola is uh it uses the actor model",
    "start": "3771960",
    "end": "3779079"
  },
  {
    "text": "following llang but it's not part of the language it's simply a library they Scala has very good uh flexible",
    "start": "3779079",
    "end": "3785640"
  },
  {
    "text": "syntactic support so they've been able to emulate the airling syntax as well to some extent when it comes to message",
    "start": "3785640",
    "end": "3791440"
  },
  {
    "text": "passing and pattern matching on the results but they don't have anything like the history of OTP the um",
    "start": "3791440",
    "end": "3798720"
  },
  {
    "text": "robustness the stability the scalability and so forth so they are kind of in a good position to get going on the path",
    "start": "3798720",
    "end": "3805799"
  },
  {
    "text": "but they'll be playing catch up with their line for a long time I don't think they have a success slide uh for scal",
    "start": "3805799",
    "end": "3811760"
  },
  {
    "text": "like the earling I mean they may but I don't know that so scale is an irine wanabe is that what I that's",
    "start": "3811760",
    "end": "3819599"
  },
  {
    "text": "not it's the jvm right now well no it's for people who H you know for for",
    "start": "3819599",
    "end": "3825599"
  },
  {
    "text": "various reasons have to program inside the jvm you know they they're corporate structure says you have to um program",
    "start": "3825599",
    "end": "3832240"
  },
  {
    "text": "inside the jvm so aing doesn't run inside the jvm efficiently there is there is a port of it if you put aling",
    "start": "3832240",
    "end": "3839279"
  },
  {
    "text": "inside the jvm it will inherit the jcm garbage collector and things like that so it's it it'll be logically the same",
    "start": "3839279",
    "end": "3844480"
  },
  {
    "text": "but pragmatically it' be very different what are those semantics of",
    "start": "3844480",
    "end": "3851240"
  },
  {
    "text": "remote P detection like you know if a machine",
    "start": "3851240",
    "end": "3856960"
  },
  {
    "text": "isn't responding to things I don't know if it failed or yes our Network failed",
    "start": "3856960",
    "end": "3862880"
  },
  {
    "text": "how do you handle that uh well this there's a heartbeat that's going on and",
    "start": "3862880",
    "end": "3869160"
  },
  {
    "text": "uh if some time out goes we just assume that machine's",
    "start": "3869160",
    "end": "3874920"
  },
  {
    "text": "dead sorry and if it wasn't got trouble later I this is the reality you know I",
    "start": "3874920",
    "end": "3882440"
  },
  {
    "text": "you know reality B that um the there are certain assumptions you can",
    "start": "3882440",
    "end": "3889480"
  },
  {
    "text": "well somebody said what what assumptions can you make about aing and between messages and and what's going on there",
    "start": "3889480",
    "end": "3895440"
  },
  {
    "text": "is assumption that if you send messages between a pair of processes and you set up one of these links that I talked",
    "start": "3895440",
    "end": "3900599"
  },
  {
    "text": "about and you don't see uh any error messages on those links then you can",
    "start": "3900599",
    "end": "3907160"
  },
  {
    "text": "assume that all the messages got delivered in in the same order they were sent um and when I say assume uh P haand",
    "start": "3907160",
    "end": "3915520"
  },
  {
    "text": "had with the um provision that if you believe that tcpip works you know so so",
    "start": "3915520",
    "end": "3922599"
  },
  {
    "text": "I mean you've always got these kind of well I can assume this if we assume tcpip works and then and then the next",
    "start": "3922599",
    "end": "3928400"
  },
  {
    "text": "level of abstraction say well I'm can assume that if you know if we assume that a proton doesn't come along and",
    "start": "3928400",
    "end": "3933559"
  },
  {
    "text": "sort of sort of change a md5 check some in a consistent way or you know at some",
    "start": "3933559",
    "end": "3939920"
  },
  {
    "text": "level you know Turtles all the way down something you have to make assumptions about the layer below so so we make we",
    "start": "3939920",
    "end": "3945319"
  },
  {
    "text": "make not unreasonable assumptions about what's going to happen if things start failing and if you're deploying into an",
    "start": "3945319",
    "end": "3951000"
  },
  {
    "text": "environment where you expect a lot of network partitions it's very easy to kind of write your own uh Network",
    "start": "3951000",
    "end": "3958039"
  },
  {
    "text": "transport layer between uh separate earling nodes instead of using the built-in one couple of very basic dumb",
    "start": "3958039",
    "end": "3966599"
  },
  {
    "text": "questions there are no dumb question you talked about you know um the",
    "start": "3966599",
    "end": "3972599"
  },
  {
    "text": "different there's a lot of progress on um graph algorithms yeah graph",
    "start": "3972599",
    "end": "3978760"
  },
  {
    "text": "databases uh you mentioned machine learning do you see any work that is sort of combines earling architecture",
    "start": "3978760",
    "end": "3986520"
  },
  {
    "text": "with some of these things meaning a lot of graph algorithms work toward improving",
    "start": "3986520",
    "end": "3993359"
  },
  {
    "text": "performance and one of the aspects of performance is FS which was your topic",
    "start": "3993359",
    "end": "4000279"
  },
  {
    "text": "and um can so yeah well we have seen I",
    "start": "4000279",
    "end": "4005720"
  },
  {
    "text": "mean we've seen some actually using visualization techniques to detect bottle neck and things like that turns out if you visualize them it's very your",
    "start": "4005720",
    "end": "4012039"
  },
  {
    "text": "eyes is very good at seeing what's going on so so there've been some uh concu company did some work on that a",
    "start": "4012039",
    "end": "4018559"
  },
  {
    "text": "while back and had the amazing videos where um uh this is really cool cuz I used to be",
    "start": "4018559",
    "end": "4025400"
  },
  {
    "text": "a physicist like a a sort of gas and you see things flying all over the place your eye immediately sees sort of start",
    "start": "4025400",
    "end": "4030920"
  },
  {
    "text": "coloring processes by the number of messages they send and turn them red and then make them bigger and and draw these",
    "start": "4030920",
    "end": "4036599"
  },
  {
    "text": "graphs and you just I I think these techniques for finding out what's going on in your system are coming and then if",
    "start": "4036599",
    "end": "4043480"
  },
  {
    "text": "we combine that with machine learning or something I mean we are doing some experiments in machine learning to see",
    "start": "4043480",
    "end": "4049359"
  },
  {
    "text": "but it's early days at the moment we're just we're just we're just collecting the collecting data I mean we got some",
    "start": "4049359",
    "end": "4056039"
  },
  {
    "text": "silly I mean let's bu collect some data and run some neuronet on and see what happens try moving them around see if we",
    "start": "4056039",
    "end": "4061319"
  },
  {
    "text": "can learn something I mean that that's beyond state of the art",
    "start": "4061319",
    "end": "4067480"
  },
  {
    "text": "yes doing uh all processes execute the same code or is a process more like a",
    "start": "4067480",
    "end": "4075000"
  },
  {
    "text": "function that executes a particular it is a function that exes they're not they're all execut",
    "start": "4075000",
    "end": "4080640"
  },
  {
    "text": "different things how then do you decide if you need more bandwidth for that",
    "start": "4080640",
    "end": "4086760"
  },
  {
    "text": "particular function how many processes you need to spawn for that function and how do you do uh load balancing to know",
    "start": "4086760",
    "end": "4094480"
  },
  {
    "text": "where that's part of your application I mean gives you no support for that gives you no no support for that I mean you",
    "start": "4094480",
    "end": "4099960"
  },
  {
    "text": "have to design that into your application itself you as a designer of that thing have to say okay I know this takes a lot of time so I will",
    "start": "4099960",
    "end": "4106040"
  },
  {
    "text": "parallelize that using functions or something there's no automatic parallelization you could choose to I",
    "start": "4106040",
    "end": "4112040"
  },
  {
    "text": "mean if if you've written it in a functional Style with maps and folds and things you could just put some pmaps a",
    "start": "4112040",
    "end": "4117400"
  },
  {
    "text": "parallel map and pfold uh in your program but I I think okay so there's a",
    "start": "4117400",
    "end": "4122920"
  },
  {
    "text": "lot of projects trying to automate that stuff and there've been projects to",
    "start": "4122920",
    "end": "4128080"
  },
  {
    "text": "automatically discover parallelism ever since I didn't Fortran you know in 1975",
    "start": "4128080",
    "end": "4133359"
  },
  {
    "text": "and I think none of them have improved anything by more than back 15% or something so I mean I think you need some intuition as to what's going on and",
    "start": "4133359",
    "end": "4139440"
  },
  {
    "text": "I would always say my my my intuition I have no intuition",
    "start": "4139440",
    "end": "4146440"
  },
  {
    "text": "at all as to where bottlenecks are or where performance I have to write programs and measure you know and and I just don't",
    "start": "4146440",
    "end": "4154080"
  },
  {
    "text": "you know um I don't like I get all these questions on the Elling mailing list you know I've got a lot of data and lots of",
    "start": "4154080",
    "end": "4160480"
  },
  {
    "text": "this and big this and I say no no no use words like Lots Big you know what big",
    "start": "4160480",
    "end": "4165679"
  },
  {
    "text": "cuz I'm thinking big pet it's terribly you know it's in your head you know we we use all",
    "start": "4165679",
    "end": "4171798"
  },
  {
    "text": "these words and and we you know lots of data megabytes of data you know",
    "start": "4171799",
    "end": "4178000"
  },
  {
    "text": "terabytes of data has to be fast you know transactions per second how many per millisecond you want per machine you",
    "start": "4178000",
    "end": "4184000"
  },
  {
    "text": "know how many machines have you got how much memory you got oh I ask a load of questions how many machines they got how",
    "start": "4184000",
    "end": "4190278"
  },
  {
    "text": "much memory they got what's the clock rate how big are the packets you know then you can start answering the questions you know and then then you",
    "start": "4190279",
    "end": "4195960"
  },
  {
    "text": "have to sort of take your application and put those two in relationship to each other but that's what you do later first of all you write it as beautifully",
    "start": "4195960",
    "end": "4202280"
  },
  {
    "text": "as possible without any regard to efficiency I'm going you tweak a bit if necessary one more um so I assume you",
    "start": "4202280",
    "end": "4210159"
  },
  {
    "text": "usually have a lot more processes than Hardware units to execute that so what happens with those messages that are",
    "start": "4210159",
    "end": "4217560"
  },
  {
    "text": "sent to processes that are non running where are those stored oh in the",
    "start": "4217560",
    "end": "4222880"
  },
  {
    "text": "mailboxes of the Pres I mean the the Press are not running are just in around Robin queue eventually they will run so",
    "start": "4222880",
    "end": "4227920"
  },
  {
    "text": "the the mailbox is always available and this is managed by run Central process",
    "start": "4227920",
    "end": "4234239"
  },
  {
    "text": "or mailbox it's one mailbox per process the don't don't okay when I'm",
    "start": "4234239",
    "end": "4240360"
  },
  {
    "text": "using words like mailbox and process don't think Unix processes and big heavy things these are don't think big heavy",
    "start": "4240360",
    "end": "4245600"
  },
  {
    "text": "ugly threads think very very small things I mean processes about 350 bytes its mailboxes however much space it",
    "start": "4245600",
    "end": "4252840"
  },
  {
    "text": "needs to to store the messages that come to it you have to also when you're designing your application make sure you",
    "start": "4252840",
    "end": "4258719"
  },
  {
    "text": "don't overflow these mailboxes and make sure that you know if You' got a a sender and a receiver that you there's no flow control either if you want flow",
    "start": "4258719",
    "end": "4265080"
  },
  {
    "text": "control you have to program it yourself processes move on and off the Run Q based on their mailbox status yes yeah",
    "start": "4265080",
    "end": "4271760"
  },
  {
    "text": "sure and and and and whether they're CPU bound so so they get think like used to",
    "start": "4271760",
    "end": "4280640"
  },
  {
    "text": "be used to be 500 reductions a reduction with one function call uh it's now about",
    "start": "4280640",
    "end": "4286560"
  },
  {
    "text": "I think about 2000s they get two they get to call 2,000 functions then if they're not finished they just get stuck",
    "start": "4286560",
    "end": "4291880"
  },
  {
    "text": "in the Run que or if they get to a receive statement and there's nothing to do they're taken out of the Run que",
    "start": "4291880",
    "end": "4297480"
  },
  {
    "text": "completely and then the next time a message comes they're taken they're put in a save they put back into the Run que",
    "start": "4297480",
    "end": "4302560"
  },
  {
    "text": "and rescheduled so it so I mean Ling is much more like an operating system than uh a",
    "start": "4302560",
    "end": "4308639"
  },
  {
    "text": "programming language in fact Aang on Zen um Boots the operating system runs",
    "start": "4308639",
    "end": "4315719"
  },
  {
    "text": "an aing application then go back to sleep in about 400 milliseconds so so it's um that's the time to get a",
    "start": "4315719",
    "end": "4322000"
  },
  {
    "text": "complete functioning system up and running do something and then go away and that's and that can scale out horizontally onto S3 and things like",
    "start": "4322000",
    "end": "4328440"
  },
  {
    "text": "that so a lot of people who are building things like WhatsApp are taking things like airing on Zen deploying it in a",
    "start": "4328440",
    "end": "4335040"
  },
  {
    "text": "horizontally scalable platform so they can boot up thousands of these things they will grow and come into service within 400 milliseconds and be doing",
    "start": "4335040",
    "end": "4341040"
  },
  {
    "text": "their job and then they go away again e",
    "start": "4341040",
    "end": "4348159"
  }
]