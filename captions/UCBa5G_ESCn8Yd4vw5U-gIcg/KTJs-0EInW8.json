[
  {
    "text": "this presentation is delivered by the Stanford center for professional",
    "start": "1160",
    "end": "6520"
  },
  {
    "text": "development today's speaker stev egi gave a very nice talk a couple of years ago so when we found out that he was",
    "start": "15400",
    "end": "23160"
  },
  {
    "text": "doing something new we said hey why don't you come back and talk again um",
    "start": "23160",
    "end": "28359"
  },
  {
    "text": "especially since it hadn't received a lot of exposure set for for some reason Microsoft um so this is the second talk",
    "start": "28359",
    "end": "36320"
  },
  {
    "text": "outside in the in the real world um almost every large software project",
    "start": "36320",
    "end": "41760"
  },
  {
    "text": "involves multiple languages but there isn't a lot of support for systems that",
    "start": "41760",
    "end": "47800"
  },
  {
    "text": "have lots of Lang have multiple languages Beyond say make and U Source control grock aims to take a step beyond",
    "start": "47800",
    "end": "55719"
  },
  {
    "text": "that so see thank you Andy",
    "start": "55719",
    "end": "61239"
  },
  {
    "text": "uh and just as a process question um we have an hour is that about right 5:30",
    "start": "61239",
    "end": "68040"
  },
  {
    "text": "5:30 okay gives me some time for questions okay hi everyone thanks for coming and uh thanks for having me here",
    "start": "68040",
    "end": "75799"
  },
  {
    "text": "uh I'm going to be talking about what I do uh at work every day and what I've been doing for the last four years it's a project that I sold and marketed at",
    "start": "75799",
    "end": "84040"
  },
  {
    "text": "Google and they they bought it and eventually it became important and now it's uh pretty fundamental to a lot of",
    "start": "84040",
    "end": "90200"
  },
  {
    "text": "the planning we do in developer infrastructure so the tools that people use to build software at",
    "start": "90200",
    "end": "96399"
  },
  {
    "text": "Google uh it is uh there's a lot of Uncharted Territory here it's kind of evolving as we go uh I'm going to tell",
    "start": "96399",
    "end": "104119"
  },
  {
    "text": "you a little bit about the uh motivations for the project and then we're going to talk about the technology",
    "start": "104119",
    "end": "109880"
  },
  {
    "text": "talk about some of the future directions and get your guys' input so what I noticed at Google and",
    "start": "109880",
    "end": "117159"
  },
  {
    "text": "Amazon and geoworks and everywhere else I've worked is people like to write um tools that",
    "start": "117159",
    "end": "123600"
  },
  {
    "text": "process source code uh for whatever custom reason whether it's a syntax highlighter or a linter or a Transformer",
    "start": "123600",
    "end": "130200"
  },
  {
    "text": "of some sort and they're always Reinventing the same Wheels they're like oh right well I got to parse the code",
    "start": "130200",
    "end": "135680"
  },
  {
    "text": "I'm going to do a quick and dirty parse of you know using the easiest technology available which is regular",
    "start": "135680",
    "end": "141720"
  },
  {
    "text": "Expressions uh and so if you look at a lot of the uh the code processing tools that are sort of generic like lxr the",
    "start": "141720",
    "end": "147959"
  },
  {
    "text": "Linux cross referencer uh where you can run them on your code and uh uh you know get some sort of index built out of it",
    "start": "147959",
    "end": "154800"
  },
  {
    "text": "you'll find that under the covers very often they're using RX matching to try to parse source code and as we all know",
    "start": "154800",
    "end": "159959"
  },
  {
    "text": "that's not a very good idea uh so some of the more sophisticated tools use real parsers and",
    "start": "159959",
    "end": "165040"
  },
  {
    "text": "they brag about it and they say we use real parsers to parse the code and that's much better than regular",
    "start": "165040",
    "end": "170680"
  },
  {
    "text": "Expressions well just to put it in perspective here's the amount of work required to understand source code and",
    "start": "170680",
    "end": "178879"
  },
  {
    "text": "as you can see these first two here scanning and parsing are very very very small amount of the overall",
    "start": "178879",
    "end": "185400"
  },
  {
    "text": "work you once you have a working parser for your code that gives you the tree structure you uh you've got a long way",
    "start": "185400",
    "end": "192959"
  },
  {
    "text": "to go you got to do name resolution and type resolution and semantics and data flow cross module etc etc it is",
    "start": "192959",
    "end": "199040"
  },
  {
    "text": "lifetimes of work in fact it's a lifetime of work per language so the problem that I set out",
    "start": "199040",
    "end": "206040"
  },
  {
    "text": "to solve was make it so that you could get all this and then build whatever tool you wanted",
    "start": "206040",
    "end": "211760"
  },
  {
    "text": "to build now what are some examples so there's some broad categories idees are a big one we all",
    "start": "211760",
    "end": "219319"
  },
  {
    "text": "love our idees right you get your auto completion and your jump to definition and class browsing and all that good",
    "start": "219319",
    "end": "225200"
  },
  {
    "text": "stuff refactoring tools they do a pretty good job of analyzing the code they actually fall right about here 50 60% of",
    "start": "225200",
    "end": "234799"
  },
  {
    "text": "what we're setting out to do uh and I'll talk about what the differences are and",
    "start": "234799",
    "end": "239879"
  },
  {
    "text": "we try to exceed the IDE bar the eclipse bar the visual studio bar uh so that's one category of clients",
    "start": "239879",
    "end": "246319"
  },
  {
    "text": "code browsing code navigation code editing another category of clients uh is uh static",
    "start": "246319",
    "end": "252720"
  },
  {
    "text": "analysis uh so at Google we when I started this project we weren't allowed to be a static analysis project because",
    "start": "252720",
    "end": "259400"
  },
  {
    "text": "the company didn't think that it was a core competency even though we hired all these brilliant language and VM and",
    "start": "259400",
    "end": "264560"
  },
  {
    "text": "compiler people uh but uh after a couple of incidents uh involving discovering",
    "start": "264560",
    "end": "271280"
  },
  {
    "text": "surprising dependencies that had crept into our multi- hundreds of millions of line code base with 10 10,000 well-",
    "start": "271280",
    "end": "277479"
  },
  {
    "text": "intention Engineers hacking away for over a decade they discover you know we'd find things like the file system",
    "start": "277479",
    "end": "282680"
  },
  {
    "text": "depends on ads you just wrong and so you know they asked why why and they",
    "start": "282680",
    "end": "288720"
  },
  {
    "text": "realized they had no idea why because they couldn't look at the code and so they looked around and they said this",
    "start": "288720",
    "end": "294360"
  },
  {
    "text": "should really be a core confidency for us you you have a project that looks like static analysis and so we actually",
    "start": "294360",
    "end": "299919"
  },
  {
    "text": "had to go into our design document marketing doc where it said grock is not a static analysis project and line out",
    "start": "299919",
    "end": "305639"
  },
  {
    "text": "not that's a true story uh now of course we had to do static analysis under the covers to get it the information that we",
    "start": "305639",
    "end": "311680"
  },
  {
    "text": "wanted to surface but we had to pitch it as a productivity solution which to a large extent it still",
    "start": "311680",
    "end": "316880"
  },
  {
    "text": "is so I'm GNA I'm going to show you a slide about some of the um some of the sort of categories of users to help you",
    "start": "316880",
    "end": "323240"
  },
  {
    "text": "understand who our audience is here in a little bit but I have a few disclaimer type slides to get out of the way first",
    "start": "323240",
    "end": "328280"
  },
  {
    "text": "it's kind of necessary so first of all what is this thing grock is pretty vague um there are different ways to look at",
    "start": "328280",
    "end": "334639"
  },
  {
    "text": "it uh one way to look at it is uh it is it is a single canonical structured index of all source code so in other",
    "start": "334639",
    "end": "342319"
  },
  {
    "text": "words you come up with a standard way to represent artifacts about that code syntax trees call call graphs type",
    "start": "342319",
    "end": "348759"
  },
  {
    "text": "graphs we'll talk about all of them uh and then you put it in sort of a standardized representation you have",
    "start": "348759",
    "end": "354240"
  },
  {
    "text": "your you know your sort of logical representation then you have physical reifications of that representation maybe in a relational data datase or",
    "start": "354240",
    "end": "360120"
  },
  {
    "text": "maybe in a graph store or whatever but the general idea is well it's sort of",
    "start": "360120",
    "end": "366000"
  },
  {
    "text": "like a universal power plug right I mean why can't we have a single Universal power adapter that powers all of our",
    "start": "366000",
    "end": "371720"
  },
  {
    "text": "machines instead of an apple one and a Nokia one and a Samsung one this is basically that kind of effort this is",
    "start": "371720",
    "end": "376919"
  },
  {
    "text": "really best viewed as a standardization effort also emac I was accused recently",
    "start": "376919",
    "end": "383039"
  },
  {
    "text": "of uh of uh manipulating my agenda so that I could make emac better and I said",
    "start": "383039",
    "end": "389639"
  },
  {
    "text": "well yeah guilty is charged cu the idea here is that idees were designed with",
    "start": "389639",
    "end": "395440"
  },
  {
    "text": "the absolute best of early 1980 software engineering practice and and they're",
    "start": "395440",
    "end": "401039"
  },
  {
    "text": "completely monolithic uh Visual Studio you know Eclipse uh you know you you",
    "start": "401039",
    "end": "406680"
  },
  {
    "text": "name it these things are they're designed with the indexer to run in process uh with your UI on your local",
    "start": "406680",
    "end": "413599"
  },
  {
    "text": "desktop everything else is moving to the cloud everything so except idees and and",
    "start": "413599",
    "end": "420120"
  },
  {
    "text": "they're they're defiantly non-cloud they're like fat is good I've actually heard them say this so uh you know the",
    "start": "420120",
    "end": "426120"
  },
  {
    "text": "idea is that we we we started this project off by saying okay Ides are pretty good indexers we're going to",
    "start": "426120",
    "end": "431919"
  },
  {
    "text": "start with that and work our way up we're going to just basically saw eclipse in half and we're going to run the back end on server farms and then",
    "start": "431919",
    "end": "438520"
  },
  {
    "text": "serve it up and see what happens but then it grew a lot and uh",
    "start": "438520",
    "end": "443919"
  },
  {
    "text": "what we found was that there are really three primary surfaces that were marrying to together we're providing",
    "start": "443919",
    "end": "450840"
  },
  {
    "text": "sort of a hub and spoke model cuz today eclipse is good at Java and okay at C++ and kind of bad at Python and JavaScript",
    "start": "450840",
    "end": "457560"
  },
  {
    "text": "and really bad as it goes down there and the same thing goes for emac emac is pretty good at C++ not so good at Java",
    "start": "457560",
    "end": "462840"
  },
  {
    "text": "and goes down everybody's got a long tail of languages they do really have F support for okay and the reason is that",
    "start": "462840",
    "end": "468840"
  },
  {
    "text": "each one of them has to redo all of that analysis right the parsing the semantics analysis and until they just give up an",
    "start": "468840",
    "end": "475680"
  },
  {
    "text": "exhaustion and they can basically do indentation at that point um it turns out that a lot of this analysis is very",
    "start": "475680",
    "end": "482560"
  },
  {
    "text": "very very heavily dependent on the build system that you're using you really need to feed in the dependencies and the",
    "start": "482560",
    "end": "488360"
  },
  {
    "text": "compiler flags and so on to the compilers in order for them to do an adequate job that turns out to be kind of a hard problem but since this is all",
    "start": "488360",
    "end": "494919"
  },
  {
    "text": "about standardization it means that ultimately alth we haven't done it yet we're going to have to standardize the",
    "start": "494919",
    "end": "500400"
  },
  {
    "text": "way that you specify dependencies uh and other build metadata uh but once we're",
    "start": "500400",
    "end": "506159"
  },
  {
    "text": "done uh you reach this nice sort of ecosystem that people can plug into and they automatically get all the benefits",
    "start": "506159",
    "end": "512640"
  },
  {
    "text": "so if I have a visual a slick edit you know I like the Slick edit editor say uh",
    "start": "512640",
    "end": "518279"
  },
  {
    "text": "if it's pluggable then you can have it talk to our service and and decorate files with metadata and do searches and",
    "start": "518279",
    "end": "523518"
  },
  {
    "text": "whatever else and you don't have to reanalyze all the languages that's that's the that's the",
    "start": "523519",
    "end": "528760"
  },
  {
    "text": "aim and the goal was to actually put peer pressure on compiler vendors okay",
    "start": "528760",
    "end": "534120"
  },
  {
    "text": "who have been operating as silos for you know ever since we started writing compilers right 50 60 years",
    "start": "534120",
    "end": "540279"
  },
  {
    "text": "and uh they uh it's uh you we we assumed that they would be sort of uncooperative until it became clear that unless they",
    "start": "540279",
    "end": "546600"
  },
  {
    "text": "were playing along they would have lousy tool chain support but what actually happened was as soon as they heard about it they said sign us up what data do we",
    "start": "546600",
    "end": "553360"
  },
  {
    "text": "have to admit there's just never been a standard for it before it's quite nice actually quite gratifying we had to fend them off in fact because we weren't",
    "start": "553360",
    "end": "559600"
  },
  {
    "text": "ready yet all right here's a here's a big disclaimer slide a couple things get out of the way because people are going",
    "start": "559600",
    "end": "566399"
  },
  {
    "text": "to be watching this video and I don't want to sign up for a bunch of false prom and so on so this is not a search",
    "start": "566399",
    "end": "573279"
  },
  {
    "text": "engine um there are some very good search engines out there uh Google",
    "start": "573279",
    "end": "578399"
  },
  {
    "text": "internally has a code search engine that's quite good and hopefully someday we can make that external but um I don't",
    "start": "578399",
    "end": "584880"
  },
  {
    "text": "know of any plans for that uh now uh but you can use you know free teex search or",
    "start": "584880",
    "end": "590079"
  },
  {
    "text": "whatever you have to make this distinction this important distinction it's sort of like Google search versus Wikipedia you go to Google search when",
    "start": "590079",
    "end": "597079"
  },
  {
    "text": "you're not quite sure what you're looking for or where it is you go Wikipedia when you know exactly what you're looking for and you want to start",
    "start": "597079",
    "end": "602600"
  },
  {
    "text": "browsing edges on that information graph okay so Gro is a graph and once you have",
    "start": "602600",
    "end": "608600"
  },
  {
    "text": "an entry point to it we have all the data you need Super classes sub classes callar call graph we'll get into it",
    "start": "608600",
    "end": "615160"
  },
  {
    "text": "getting an entry point into the graph is actually kind of non-trivial today and we've had to team up with the code search team and with the IDE teams and",
    "start": "615160",
    "end": "621560"
  },
  {
    "text": "so on to have uh common representations of of how to name a node and I'll talk",
    "start": "621560",
    "end": "626920"
  },
  {
    "text": "more about it but we don't do search and we're not really a client per se we are strictly a backend service with some",
    "start": "626920",
    "end": "632640"
  },
  {
    "text": "some demo clients but we ultimately expect um expect this to to be uh you",
    "start": "632640",
    "end": "639240"
  },
  {
    "text": "know uh a marketplace where people uh contribute uh 20% right open source type",
    "start": "639240",
    "end": "645920"
  },
  {
    "text": "uh plugins for editors and and plugins for compilers and things like that and there are a bunch of similar projects",
    "start": "645920",
    "end": "651920"
  },
  {
    "text": "one of them was actually unfortunately called open grock and when I started doing the search the name search when I",
    "start": "651920",
    "end": "657480"
  },
  {
    "text": "started this at Google four and a half years ago Google's search engine didn't do stemming on the word grock even",
    "start": "657480",
    "end": "662800"
  },
  {
    "text": "though it's been around since 1968 or 69 stranger and Strange Land and so I searched for open gr I searched for",
    "start": "662800",
    "end": "668399"
  },
  {
    "text": "grock and it didn't turn up open grock shame and it didn't do it again last year when I looked uh so go figure",
    "start": "668399",
    "end": "674959"
  },
  {
    "text": "anyway uh open grock is kind of a similar product except that it uses a lot of regular expressions and kind of",
    "start": "674959",
    "end": "680360"
  },
  {
    "text": "you know whatever matching but it is a product it's a thing that you run and it gives you search and it gives you browse",
    "start": "680360",
    "end": "686120"
  },
  {
    "text": "and it's if grock is successful open grock will be more successful by being able to use the analysis that we provide",
    "start": "686120",
    "end": "693200"
  },
  {
    "text": "so we're not trying to to crush anybody with this and it's you know making it external is is this big complicated",
    "start": "693200",
    "end": "699920"
  },
  {
    "text": "problem we're talking about at the very end but it's it's sort of a chicken and egg problem so right now I'm just talking about what we're doing inside of",
    "start": "699920",
    "end": "706399"
  },
  {
    "text": "Google but grock is different from these things in the sense that uh we do use",
    "start": "706399",
    "end": "712200"
  },
  {
    "text": "real compilers we made that we made that decision right up front we're not going to write any compilers it's a golden",
    "start": "712200",
    "end": "717680"
  },
  {
    "text": "rule okay because every compiler is a lifetime of work it will suck you in and",
    "start": "717680",
    "end": "722880"
  },
  {
    "text": "you'll never come out again because it's going to be tons of fun and you're going to be like oh we could we could optimize this or we could add that feature or",
    "start": "722880",
    "end": "729200"
  },
  {
    "text": "whatever you know and then you wind up with GCC right or Pearl or whatever and or clang I mean those people they",
    "start": "729200",
    "end": "734800"
  },
  {
    "text": "disappear it's a Vortex and we just all we want to do is like cooperate them without getting too close because it",
    "start": "734800",
    "end": "740600"
  },
  {
    "text": "really is kind of an event horizon um uh if grock is successful ultimately we'll",
    "start": "740600",
    "end": "746160"
  },
  {
    "text": "become a scaling problem because uh everybody will be contributing their metadata to us but you'll that'll become",
    "start": "746160",
    "end": "752440"
  },
  {
    "text": "a little bit clearer later and there have been in the past there have been some attempts to do stuff like this",
    "start": "752440",
    "end": "758600"
  },
  {
    "text": "including by billionaire Charles Simon from Microsoft who uh did intentional",
    "start": "758600",
    "end": "763839"
  },
  {
    "text": "programming and his approach was uh we're going to have a structured representation of the code and you're",
    "start": "763839",
    "end": "770279"
  },
  {
    "text": "going to like it pretty much right you know and he spent 10 years and however many hundreds of millions of dollars on",
    "start": "770279",
    "end": "775760"
  },
  {
    "text": "it and it was ultimately a miserable failure as we all know because of course Engineers aren't going to like it they",
    "start": "775760",
    "end": "781800"
  },
  {
    "text": "like emac or whatever they've been using right and so what we do is we try to you know we try to embrace I mean we'll",
    "start": "781800",
    "end": "787360"
  },
  {
    "text": "index your code even if it's broken when we find people checking stuff in in the Google code base people checking stuff",
    "start": "787360",
    "end": "792720"
  },
  {
    "text": "in with merge conflicts that are the arrows are still in the file and we're just like you know what you know and",
    "start": "792720",
    "end": "798199"
  },
  {
    "text": "whatever we try to index it you know we do our best so we don't judge your sucky",
    "start": "798199",
    "end": "803360"
  },
  {
    "text": "language um that's one of our rules trust me languages don't well wear",
    "start": "803360",
    "end": "809880"
  },
  {
    "text": "with wear well with one's experience uh except maybe see I mean like you get you get deep enough into the details of any",
    "start": "809880",
    "end": "816399"
  },
  {
    "text": "language and the Ws turn into uh you know tumors it's it's they're all really really ugly uh it is a lot of fun though",
    "start": "816399",
    "end": "823519"
  },
  {
    "text": "to try to figure out when they're the same when they're sort of ugly in the same way I'll give you some examples on a few slides but I already talked about",
    "start": "823519",
    "end": "830240"
  },
  {
    "text": "this don't write compilers sometimes we brok in that rule okay we've written we've contributed",
    "start": "830240",
    "end": "835480"
  },
  {
    "text": "parsers we've contributed you have to get the compilers like sort of client uh",
    "start": "835480",
    "end": "840720"
  },
  {
    "text": "and that's kind of an effort it's a bootstrapping effort right so we've we've contributed name resolvers and pieces of compilers but we we we really",
    "start": "840720",
    "end": "847800"
  },
  {
    "text": "want to as quickly as possible get that into the compiler Community for that particular language so they own it because languages evolve right there's",
    "start": "847800",
    "end": "854800"
  },
  {
    "text": "Java 7 and Java 8 and C++ 11 and there's Python 3 and there's ecmascript 5 and I",
    "start": "854800",
    "end": "860120"
  },
  {
    "text": "mean every single language is in the process of upgrading you know it's its feature set sometimes it's syntax it's",
    "start": "860120",
    "end": "866440"
  },
  {
    "text": "grammars we don't want to have to be in the position of playing catchup all the time we we we you know we we can't be in",
    "start": "866440",
    "end": "871880"
  },
  {
    "text": "that business it doesn't scale we ultimately want to handle hundreds of languages and and also the cross product",
    "start": "871880",
    "end": "878040"
  },
  {
    "text": "I'll talk about that in a bit too uh and then you know finally I mean we we've",
    "start": "878040",
    "end": "883480"
  },
  {
    "text": "discovered that a 90% solution is actually really really useful in this space if you're getting Auto completions",
    "start": "883480",
    "end": "889880"
  },
  {
    "text": "uh and they're not 100% it is there's no slide for this but I should probably talk about it before I forget we have",
    "start": "889880",
    "end": "894920"
  },
  {
    "text": "run into a cultural problem uh where where different uh editor communities",
    "start": "894920",
    "end": "900800"
  },
  {
    "text": "have very different expectations about what accuracy means okay Eclipse users are accustomed to waiting potentially",
    "start": "900800",
    "end": "908000"
  },
  {
    "text": "infinite amounts of time but they get they get perfectly accurate",
    "start": "908000",
    "end": "913199"
  },
  {
    "text": "answers the unless you're using reflection or you know dynamic loading or whatever and they go well it doesn't",
    "start": "913199",
    "end": "918560"
  },
  {
    "text": "really count okay so they they've really rationalized and compartmentalized this away whatever anything that's statically",
    "start": "918560",
    "end": "924639"
  },
  {
    "text": "reachable by the by the index or at the time that you're getting your coffee because it takes 5 minutes during the",
    "start": "924639",
    "end": "929839"
  },
  {
    "text": "auto completion is expected to be accurate okay whereas emac users their",
    "start": "929839",
    "end": "935000"
  },
  {
    "text": "completion is you open up 250 buffers and you use meta slash to complete against all open buffers and hope that",
    "start": "935000",
    "end": "941720"
  },
  {
    "text": "one of them hits right it works pretty well you know it's kind of uh and so",
    "start": "941720",
    "end": "947319"
  },
  {
    "text": "emex users if you say well we can give you some Prett you know pretty pretty much more accurate information you know autoc completions than you've got now",
    "start": "947319",
    "end": "953399"
  },
  {
    "text": "they're like all right sign me up whereas Eclipse users say how could I ever trust any of your data",
    "start": "953399",
    "end": "959639"
  },
  {
    "text": "and and unfortunately you know when it comes to static analysis when they're running a big map reduce over the code",
    "start": "959639",
    "end": "965199"
  },
  {
    "text": "and they're saying I want to find all the calls of this function and we miss one you know they really freak out so uh",
    "start": "965199",
    "end": "972519"
  },
  {
    "text": "a lot of this is kind of a ux marketing kind of a trust issue where you know we we really try to get across the notion",
    "start": "972519",
    "end": "979199"
  },
  {
    "text": "that you're working with pretty good results here and if pretty good doesn't do it for you you know go write your own",
    "start": "979199",
    "end": "987319"
  },
  {
    "text": "cuz this is actually this is actually surprising surprisingly grungy Google's sort of core competency is grungy data",
    "start": "987319",
    "end": "992839"
  },
  {
    "text": "sets and I tell you our source code everybody's source code is is a real mess so here's a really high Lev super",
    "start": "992839",
    "end": "998839"
  },
  {
    "text": "high Lev look at what our system looks like okay we have you know source code including a lot of handwritten",
    "start": "998839",
    "end": "1005519"
  },
  {
    "text": "source and a lot of generated source and a lot of copy and pasted source as it happens and we have uh a set of you know",
    "start": "1005519",
    "end": "1013199"
  },
  {
    "text": "dependencies like what are the source files for your project what are the libraries you depend on uh build flags",
    "start": "1013199",
    "end": "1018639"
  },
  {
    "text": "you DD Flags whatever we send them all to our indexers the indexers run in parallel in",
    "start": "1018639",
    "end": "1024918"
  },
  {
    "text": "a big batch job every night and we write them into an",
    "start": "1024919",
    "end": "1030640"
  },
  {
    "text": "index and then we have an API service that fronts the index and uh you can either talk to the API service or you",
    "start": "1030640",
    "end": "1037360"
  },
  {
    "text": "can go against our index directly you go against the index directly usually if you're writing a map produce uh because",
    "start": "1037360",
    "end": "1043038"
  },
  {
    "text": "you don't want to make RPC calls for you know a trillion operations okay",
    "start": "1043039",
    "end": "1049360"
  },
  {
    "text": "we'll go into more depth in a bit um here's actually a different way to look at it you can look at grock as sort of a",
    "start": "1049360",
    "end": "1054520"
  },
  {
    "text": "platform stack uh so we have our dependencies below the green line here",
    "start": "1054520",
    "end": "1059760"
  },
  {
    "text": "somebody has to write the code that's not us somebody has to write compilers or interpreters that are Gro compliant",
    "start": "1059760",
    "end": "1065200"
  },
  {
    "text": "again hopefully not us the compilers have to provide apis in the ideal scenario a grock indexer is just a",
    "start": "1065200",
    "end": "1072000"
  },
  {
    "text": "visitor that walks over their intermediate representation so that means the compiler has to run in a special mode that the compiler is",
    "start": "1072000",
    "end": "1078440"
  },
  {
    "text": "probably not used to running in compilers if you recall their job is to yell at you if you made a mistake the",
    "start": "1078440",
    "end": "1084960"
  },
  {
    "text": "first time there's no point in the compiler giving you 10,000 error messages because you you know forgot one semicolon and so uh typically what",
    "start": "1084960",
    "end": "1092159"
  },
  {
    "text": "compilers do is they throw away information that they don't need anymore for example location information of you",
    "start": "1092159",
    "end": "1097280"
  },
  {
    "text": "know pars tree nodes and so on and they uh uh uh uh they barf they give up at",
    "start": "1097280",
    "end": "1103640"
  },
  {
    "text": "the first error they bulk uh and those are two things we need to train the compilers not to do",
    "start": "1103640",
    "end": "1109440"
  },
  {
    "text": "uh because we want to be able to index the code even if it's got a mistake or it's broken or whatever uh moreover we",
    "start": "1109440",
    "end": "1115600"
  },
  {
    "text": "don't want them to generate any code usually now ironically you have to",
    "start": "1115600",
    "end": "1120679"
  },
  {
    "text": "generate code to do name resolution in Java Java this is this is the most",
    "start": "1120679",
    "end": "1125960"
  },
  {
    "text": "backwards in inverted upside down logic you've ever heard in your life but C++ is far easier to index than Java is okay",
    "start": "1125960",
    "end": "1134080"
  },
  {
    "text": "now C++ as a language is a real pain in the butt and if you look at the internal of clang it's got a very elaborate",
    "start": "1134080",
    "end": "1139760"
  },
  {
    "text": "representation for all the things that you can express in C++ it's a very powerful expressive language uh but for",
    "start": "1139760",
    "end": "1145559"
  },
  {
    "text": "C++ because of the way they do header files every single one of the symbol dependencies that you need is expressed",
    "start": "1145559",
    "end": "1151320"
  },
  {
    "text": "in your header file or the compil letter doesn't know what it is it's up to the Linker it's up to you know somebody else Downstream to figure out where that",
    "start": "1151320",
    "end": "1157120"
  },
  {
    "text": "thing is really defined which means that all you need to analyze a particular source file is it and the the",
    "start": "1157120",
    "end": "1164200"
  },
  {
    "text": "translation unit the the transitive closure of the header files that includes and then the command line FL fls and you're done whereas with Java it",
    "start": "1164200",
    "end": "1171000"
  },
  {
    "text": "may have to crack open arbitrary directories full of Jar files class files go off and look in the you know",
    "start": "1171000",
    "end": "1177720"
  },
  {
    "text": "the the the the constant pools and the heads of the class files to find names and look them up and it has to check the whole class path for this and can be",
    "start": "1177720",
    "end": "1184000"
  },
  {
    "text": "very slow and it's also lossy they don't record all the information we need about positions and stuff in the in the third",
    "start": "1184000",
    "end": "1190159"
  },
  {
    "text": "party libraries so Java actually turns out to be kind of a pain because you have to you have to do some amount of",
    "start": "1190159",
    "end": "1195760"
  },
  {
    "text": "code generation just to uh just to analyze it uh so uh and then the build systems of",
    "start": "1195760",
    "end": "1203360"
  },
  {
    "text": "course give you no API what's the API to make well you write your own parser for make files you know it doesn't it",
    "start": "1203360",
    "end": "1209440"
  },
  {
    "text": "doesn't have some sort of programmatic interface that you can use W maybe it does today I don't know maybe gake does",
    "start": "1209440",
    "end": "1214799"
  },
  {
    "text": "anyway at some point we feed it all the analyzers we stuff it into a persistence layer and then we either can do queries",
    "start": "1214799",
    "end": "1221640"
  },
  {
    "text": "against it we'll talk about those we have an API service for Like O of one lookups you know that people do all the",
    "start": "1221640",
    "end": "1227400"
  },
  {
    "text": "time for IDs and and this is for interactive support hopefully this will be a little bit clearer after we look at",
    "start": "1227400",
    "end": "1232799"
  },
  {
    "text": "the graph and stuff okay this is interesting this is important user tiers we've identified sort of this this",
    "start": "1232799",
    "end": "1239360"
  },
  {
    "text": "pattern which is that 10,000 engineers at Google use grock every single day to jump to definitions of symbols to do",
    "start": "1239360",
    "end": "1245640"
  },
  {
    "text": "hover documentation uh really simple stuff out file outlines uh call graph browsing you",
    "start": "1245640",
    "end": "1253080"
  },
  {
    "text": "know you know just finding their way around I mean you you jump into a company with 100 million lines of code and you know no GP and you you need some",
    "start": "1253080",
    "end": "1260600"
  },
  {
    "text": "help navigating around right uh then you have sort of these power",
    "start": "1260600",
    "end": "1266840"
  },
  {
    "text": "users every team's got one right somebody who writes scripts to automate workflows for the team team has to do",
    "start": "1266840",
    "end": "1272480"
  },
  {
    "text": "some sort of hairy transformation because some other team didn't provide the right API for them or whatever",
    "start": "1272480",
    "end": "1277840"
  },
  {
    "text": "and and so they write scripts and uh so we have a gr command line tool for scriptors where they can make calls to",
    "start": "1277840",
    "end": "1284400"
  },
  {
    "text": "our to our index and get edges get nodes get you know metadata decorations",
    "start": "1284400",
    "end": "1289720"
  },
  {
    "text": "whatever uh to make it nice for scriptors and then you have analysts who want to do SQL queries like we have uh",
    "start": "1289720",
    "end": "1295559"
  },
  {
    "text": "we have a team at Google who is responsible for open sourcing big hunks of our Java code you know the Google",
    "start": "1295559",
    "end": "1301039"
  },
  {
    "text": "Java Collections libraries for example and so on and they want to do things like find out what the most popular apis",
    "start": "1301039",
    "end": "1306600"
  },
  {
    "text": "are they want to find out how people are using their code they want to find out who's calling it and from where so they",
    "start": "1306600",
    "end": "1312279"
  },
  {
    "text": "they make extensive use of our uh our SQL interface we dump it into a colum IO relational",
    "start": "1312279",
    "end": "1317520"
  },
  {
    "text": "database and they make extensive use of our command line tool and then you've got a few people we're down to like 10",
    "start": "1317520",
    "end": "1322880"
  },
  {
    "text": "people now this is an order magnitude shrinkage but they have an order magnitude more leverage to enable",
    "start": "1322880",
    "end": "1328720"
  },
  {
    "text": "productivity for others and then we've got like the the very bottom level of people who are doing massive code health",
    "start": "1328720",
    "end": "1334559"
  },
  {
    "text": "refactorings and cleanups on our code base and we know them by name you know Tom and Kevin and you know I mean it's",
    "start": "1334559",
    "end": "1340200"
  },
  {
    "text": "like they're our friends uh because they can do stuff that that makes life better for you know for everybody at the",
    "start": "1340200",
    "end": "1347840"
  },
  {
    "text": "company okay so a couple quick quick screenshots that'll be completely illegible on this",
    "start": "1347840",
    "end": "1353760"
  },
  {
    "text": "screen but just to show that yeah we really do have clients so we have this uh we have this uh web client that was",
    "start": "1353760",
    "end": "1360320"
  },
  {
    "text": "sort of a proof of concept that we did that uh looks kind of like a read only eclipse and uh you know it's kind of",
    "start": "1360320",
    "end": "1367159"
  },
  {
    "text": "useful as you can see it has a search box so I kind of lied about not having a search engine but all it really does is",
    "start": "1367159",
    "end": "1373720"
  },
  {
    "text": "um pretty much partial file name match so you it's for looking up files and then from there you can say oh I have",
    "start": "1373720",
    "end": "1380760"
  },
  {
    "text": "you know I have this node labeled statement here I want to see who uses it and if you actually click that uh show",
    "start": "1380760",
    "end": "1387120"
  },
  {
    "text": "cross references um so you know here it says we can we can see the derived classes and we can see the",
    "start": "1387120",
    "end": "1393360"
  },
  {
    "text": "instantiations of this class I clicked on a class called labeled statement uh",
    "start": "1393360",
    "end": "1398400"
  },
  {
    "text": "or we can jump to its definition so I I clicked show cross references and it gave me this so it's just like lxr this",
    "start": "1398400",
    "end": "1406799"
  },
  {
    "text": "is the simplest possible use case for our index which is find me all the places this thing was",
    "start": "1406799",
    "end": "1413320"
  },
  {
    "text": "referenced uh so that's kind of boring but you know you got to do it and we have an emac client does exactly the",
    "start": "1413360",
    "end": "1418840"
  },
  {
    "text": "same thing so here it is an emac when you open a file in emac at Google uh it",
    "start": "1418840",
    "end": "1424120"
  },
  {
    "text": "automatically goes and makes an asynchronous call off to our service to see if we know anything about that file and if we do it'll decorate the file",
    "start": "1424120",
    "end": "1430200"
  },
  {
    "text": "with you know underlines and uh error messages and whatever other interesting",
    "start": "1430200",
    "end": "1435440"
  },
  {
    "text": "stuff we found here's a screenshot of the help help for a command line tool uh",
    "start": "1435440",
    "end": "1440919"
  },
  {
    "text": "I was kind of hardpressed to find any queries that weren't uh big and ugly uh but we do have one and it's",
    "start": "1440919",
    "end": "1447919"
  },
  {
    "text": "growing into basically what amounts to a shell it's a shell for basically browsing our index it's going to be kind",
    "start": "1447919",
    "end": "1452960"
  },
  {
    "text": "of cool actually when it's when it's really evolved we also have uh SQL queries this is a real SQL query against",
    "start": "1452960",
    "end": "1459240"
  },
  {
    "text": "our index against that class that we were looking at just now it's a uh JavaScript class and as you can see",
    "start": "1459240",
    "end": "1467399"
  },
  {
    "text": "uh what we've as asked for here is Edge names so I'll talk about nodes and edges",
    "start": "1467399",
    "end": "1472480"
  },
  {
    "text": "on our graph and how we represent source code and how the challenges and trials of trying to figure out whether final is",
    "start": "1472480",
    "end": "1477520"
  },
  {
    "text": "the same as const stuff like that but in the meantime you can see that uh you know this class has these edges it has",
    "start": "1477520",
    "end": "1484640"
  },
  {
    "text": "138 methods that are declared so it's kind of a lot uh but it is a parser so it's probably a bunch of",
    "start": "1484640",
    "end": "1491279"
  },
  {
    "text": "recursive descent grammar Productions and it has uh some uh some usages of the",
    "start": "1491279",
    "end": "1497200"
  },
  {
    "text": "class uh maybe I better show you the graph so that makes more more sense here so here's our graph uh our very small",
    "start": "1497200",
    "end": "1505080"
  },
  {
    "text": "graph it looks like this is kind of unreadable but I'll talk you through it so this is a very small snippet of source code it's a hello world and c and",
    "start": "1505080",
    "end": "1512360"
  },
  {
    "text": "then the signature the only function that we actually call from Hello World which is print F okay uh this generates",
    "start": "1512360",
    "end": "1520080"
  },
  {
    "text": "a much bigger graph than this this is a very tiny cross-section what we find is that there's about a 100x expansion in",
    "start": "1520080",
    "end": "1526000"
  },
  {
    "text": "terms of you know file size to to to metadata size you know give or take uh",
    "start": "1526000",
    "end": "1532000"
  },
  {
    "text": "and one reason is that we have to we have to come up with nodes in the graph for all the types so the built-in types the composed",
    "start": "1532000",
    "end": "1539320"
  },
  {
    "text": "types pointer types parameterized types uh any sort of type representation at all doesn't matter how crazy it is right",
    "start": "1539320",
    "end": "1545000"
  },
  {
    "text": "hascal Union types and uh uh uh you name it it's got to be modelable in our",
    "start": "1545000",
    "end": "1550279"
  },
  {
    "text": "system and uh another uh another big set of subgraph of this is the is the",
    "start": "1550279",
    "end": "1556679"
  },
  {
    "text": "Declarations of symbols user Define types or functions or whatever we have",
    "start": "1556679",
    "end": "1562440"
  },
  {
    "text": "references we create nodes for every reference so every time you name something it has a node and we have ref",
    "start": "1562440",
    "end": "1568399"
  },
  {
    "text": "we have nodes for files pretty much anything that we would want to represent in the index gets a node and it's",
    "start": "1568399",
    "end": "1574000"
  },
  {
    "text": "relationships get edges and it's bidirectional it's an unweighted bidirectional graph every Edge has a",
    "start": "1574000",
    "end": "1580919"
  },
  {
    "text": "mirrored Edge so if I return a Fu then I can go to Foo and say who returns you",
    "start": "1580919",
    "end": "1587640"
  },
  {
    "text": "and follow the opposite direction Edge which is quite useful sometimes so that I mean that's the",
    "start": "1587640",
    "end": "1593240"
  },
  {
    "text": "basic idea right you start with a graph and then why that's your big hammer and everything looks like a",
    "start": "1593240",
    "end": "1599360"
  },
  {
    "text": "nail and we'll talk about what to what we can do with that graph in a bit here are the things that we St store in the",
    "start": "1599360",
    "end": "1604440"
  },
  {
    "text": "graph we store a symbol table and a type graph uh and a call graph and the build",
    "start": "1604440",
    "end": "1611640"
  },
  {
    "text": "dependency graph there's a lot of graphs kind of overlaid in this thing file system structure generated code uh we're",
    "start": "1611640",
    "end": "1618440"
  },
  {
    "text": "working on storing ests I have a slide about that ests are pretty boring huh just pars code get a",
    "start": "1618440",
    "end": "1624440"
  },
  {
    "text": "tree my compilers Prof in college at the University of Washington started off",
    "start": "1624440",
    "end": "1629760"
  },
  {
    "text": "with a statement that parsing was a completely solved problem it was boring and nobody was looking at anymore and boy oh boy was he ever wrong we have",
    "start": "1629760",
    "end": "1636360"
  },
  {
    "text": "found some really interesting parsing problems I mean when you get into multil language of course it gets pretty crazy",
    "start": "1636360",
    "end": "1642200"
  },
  {
    "text": "but uh even the representation of the par code is everybody has a different",
    "start": "1642200",
    "end": "1647320"
  },
  {
    "text": "idea of what it means so we'll talk about it uh so here's what an actual node",
    "start": "1647320",
    "end": "1652520"
  },
  {
    "text": "defin I mean this this is the information we store on our nodes you know I'm not trying to hide it or anything uh every node has a globally",
    "start": "1652520",
    "end": "1659080"
  },
  {
    "text": "unique identifier globally unique is why",
    "start": "1659080",
    "end": "1664159"
  },
  {
    "text": "is it is okay so we found uh for well for starters uh you know like there are",
    "start": "1664159",
    "end": "1671320"
  },
  {
    "text": "a lot of names that are I'm going to talk about this more in the naming problem but we find that versions and",
    "start": "1671320",
    "end": "1677640"
  },
  {
    "text": "sort of copies kind of introduced uh hairiness into the whole model uh like",
    "start": "1677640",
    "end": "1682840"
  },
  {
    "text": "we have like two complete copies of the Java jdk sources uh for completely different reasons in um somewhere in our",
    "start": "1682840",
    "end": "1690960"
  },
  {
    "text": "in our Depots and so if somebody is making a reference to Java Lang object it could be either of those or neither",
    "start": "1690960",
    "end": "1696760"
  },
  {
    "text": "of those and generating a unique identifier for them sort of involves",
    "start": "1696760",
    "end": "1701840"
  },
  {
    "text": "having to put more Providence information in there like about which which Depot it's in and so on so we keep",
    "start": "1701840",
    "end": "1707760"
  },
  {
    "text": "uh we keep thinking that it's Unique and and then somebody will pop up with an edge case that that actually turns out",
    "start": "1707760",
    "end": "1713000"
  },
  {
    "text": "to be non-unique so we've decided recently basically that all nodes should really be node sets that're usually",
    "start": "1713000",
    "end": "1718519"
  },
  {
    "text": "Singleton sets but all clients should be set up to to expect in advance that any query that's really exacting and precise",
    "start": "1718519",
    "end": "1726039"
  },
  {
    "text": "could potentially give them back two matches or more matches that are all like did you mean this and we have a display name to show",
    "start": "1726039",
    "end": "1733320"
  },
  {
    "text": "the user what it looks like uh we have display names for like local variables like there's no syntax in a language for",
    "start": "1733320",
    "end": "1739399"
  },
  {
    "text": "anything that you can't address you can't get the address of a local variable in somebody's function or a",
    "start": "1739399",
    "end": "1745679"
  },
  {
    "text": "parameter right you know or a or a catch block tag or something but we need to be able to address it in grock because you",
    "start": "1745679",
    "end": "1751760"
  },
  {
    "text": "may may need to be able to make a link to it or you may just need to be able to create a reference to it temporarily",
    "start": "1751760",
    "end": "1757919"
  },
  {
    "text": "when you're refactoring so that you can come back to it later and move it and say oh yeah this thing is it still there",
    "start": "1757919",
    "end": "1763000"
  },
  {
    "text": "so grock synthesizes names for everything we make them up we have our own syntax we found over time that that",
    "start": "1763000",
    "end": "1769000"
  },
  {
    "text": "evolved into a query language uh what happens is if you have a a method and it's overloaded on",
    "start": "1769000",
    "end": "1776960"
  },
  {
    "text": "parameters so like Java util arrays. sort you know has like 80 overloads",
    "start": "1776960",
    "end": "1782279"
  },
  {
    "text": "because of the type explosion because Java was well all languages suck let's put it",
    "start": "1782279",
    "end": "1787519"
  },
  {
    "text": "that way but for for for for for a variety of reasons they have lots and lots and lots of overloads and so if you",
    "start": "1787519",
    "end": "1792960"
  },
  {
    "text": "say I want to go to Java utility Ray sort or I call Java utility Ray sort uh",
    "start": "1792960",
    "end": "1798080"
  },
  {
    "text": "potentially what you're doing is a wild card match you want to get all of them back like if you're Auto completing",
    "start": "1798080",
    "end": "1803279"
  },
  {
    "text": "say and so uh what we have to do is uh",
    "start": "1803279",
    "end": "1808919"
  },
  {
    "text": "introduce I mean you know support for partial qualified names and for uh and",
    "start": "1808919",
    "end": "1814799"
  },
  {
    "text": "then for fully qualified ones now in C++ the full qualification for a particular name of like a template instantiation",
    "start": "1814799",
    "end": "1821080"
  },
  {
    "text": "can be pages and pages and pages long we found signatures from clang that were",
    "start": "1821080",
    "end": "1827360"
  },
  {
    "text": "you know 60 4K strings okay it was astonishing you know it's a it looks like it looks like a",
    "start": "1827360",
    "end": "1834799"
  },
  {
    "text": "mangled name but no that's actually the Declaration that you would type in by hand for this thing if you were you know fool enough to have to do that so uh you",
    "start": "1834799",
    "end": "1842480"
  },
  {
    "text": "know what we tried to do is come up with a prettified name and this is this is kind of an open area for us where we're",
    "start": "1842480",
    "end": "1847799"
  },
  {
    "text": "we're really really struggling with it but but basically we we we we've recognized that there's kind of a",
    "start": "1847799",
    "end": "1854080"
  },
  {
    "text": "correspondence between name and URI and we really want a sort of a restful view of this whole index and it's also kind",
    "start": "1854080",
    "end": "1860960"
  },
  {
    "text": "of a query language so I don't know I I don't have a lot to tell you about that today because we're still working it out but it's definitely an interesting",
    "start": "1860960",
    "end": "1867559"
  },
  {
    "text": "problem uh the biggest and the biggest thing to look at here really is location",
    "start": "1867559",
    "end": "1872840"
  },
  {
    "text": "this this is going to come back and bite us again slide after slide location all code has to have a location",
    "start": "1872840",
    "end": "1879519"
  },
  {
    "text": "and most of it doesn't have a location but we'll get to that uh yeah here's a big long list of node kinds to prove",
    "start": "1879519",
    "end": "1885519"
  },
  {
    "text": "that we have different node kinds you don't have to read it all but basically we represent all the things in the code",
    "start": "1885519",
    "end": "1891080"
  },
  {
    "text": "right kind of grouped roughly by ker there's type nodes there's function nodes there's you know number nodes and",
    "start": "1891080",
    "end": "1896480"
  },
  {
    "text": "we try to be so here's the thing right is you can get really really really precise for no reason at all because",
    "start": "1896480",
    "end": "1903399"
  },
  {
    "text": "nobody cares about the distinction they just want to know it returns a number they want to they want to know it returns a signed in but they don't care what the Precision is maybe right so Gro",
    "start": "1903399",
    "end": "1911639"
  },
  {
    "text": "has been this sort of constant uh sort of evolution of increasing Precision right finer and finer grained modeling",
    "start": "1911639",
    "end": "1918600"
  },
  {
    "text": "on demand so we come up with a new client that says well I need to know the difference between electrical closure",
    "start": "1918600",
    "end": "1923639"
  },
  {
    "text": "you know that's writable and and not rable and we say well okay we go back and we fix our model",
    "start": "1923639",
    "end": "1929760"
  },
  {
    "text": "uh but uh uh we did see that there was some value in coming up with this is an",
    "start": "1929760",
    "end": "1936240"
  },
  {
    "text": "enum basically an enumeration of all the possible roles that a node can have it's it's it's h this is really complicated",
    "start": "1936240",
    "end": "1943639"
  },
  {
    "text": "but this works pretty well and that's been our general goal is to try to do something that's able for our users and",
    "start": "1943639",
    "end": "1948880"
  },
  {
    "text": "then and then and then iterate on it and here's what the edges look like okay we we went back and forth on edges and we",
    "start": "1948880",
    "end": "1955279"
  },
  {
    "text": "eventually wind up W with this we wind up because every Edge is an arrow and you know you know the classic problem",
    "start": "1955279",
    "end": "1961080"
  },
  {
    "text": "where everybody draws their inheritance arrows differently some schools say I inherit from this class and some people say I inherit from this class right you",
    "start": "1961080",
    "end": "1967639"
  },
  {
    "text": "know and that actually matters like when you you're composing a syntax where people actually have to type out an arrow in the query to say what they're",
    "start": "1967639",
    "end": "1974279"
  },
  {
    "text": "looking for so you know you got to you got to kind of canalize these things so what we came up with was the convention",
    "start": "1974279",
    "end": "1979639"
  },
  {
    "text": "that the node always extends from me to you right so I extend you and I am",
    "start": "1979639",
    "end": "1985600"
  },
  {
    "text": "extended by you or sorry you are extended by me is actually that the way it work uh so each one of these is by",
    "start": "1985600",
    "end": "1993120"
  },
  {
    "text": "and large uh a a uh verb and verbed by it's not always the case because we",
    "start": "1993120",
    "end": "1999080"
  },
  {
    "text": "don't want to have this incredible proliferation of edges we like to reuse wherever possible because we want to be cross language which I'll talk about in",
    "start": "1999080",
    "end": "2005679"
  },
  {
    "text": "a little bit uh so we have a couple of cases where we reuse edges because they're kind of close again we fuzz the",
    "start": "2005679",
    "end": "2012480"
  },
  {
    "text": "semantics a bit and uh so we wind up with for example base type composing type and type parameter are kind of a",
    "start": "2012480",
    "end": "2018799"
  },
  {
    "text": "triangle um that we use uh sort of liberally when we're doing parameterized types anyway the details aren't really",
    "start": "2018799",
    "end": "2025399"
  },
  {
    "text": "important just to know we have around 100 node kinds and around 100 Edge kinds and each new language that we add at how",
    "start": "2025399",
    "end": "2032760"
  },
  {
    "text": "many new no and Edge kinds well fewer and fewer and fewer and fewer until eventually someday it's going to be none",
    "start": "2032760",
    "end": "2039200"
  },
  {
    "text": "uh now we have we've met with a lot of internal resistance to this idea of having a cross language representation",
    "start": "2039200",
    "end": "2045399"
  },
  {
    "text": "for and part of part of it is that compiler writers and actually anybody who's like really a zealot or an",
    "start": "2045399",
    "end": "2051440"
  },
  {
    "text": "advocate of their language they feel that their language is special Snowflake and nobody else's could possibly be as",
    "start": "2051440",
    "end": "2057079"
  },
  {
    "text": "complicated or as interesting as theirs they all think this uh and uh you know",
    "start": "2057079",
    "end": "2062118"
  },
  {
    "text": "we have not to date ever found a feature that did not exist in at least two languages",
    "start": "2062119",
    "end": "2069280"
  },
  {
    "text": "now think about that think about the craziest language feature that you know the most out there you know the C",
    "start": "2069280",
    "end": "2074638"
  },
  {
    "text": "preprocessor I mean come on how many languages is that going to be in well it turns out it's used extensively in",
    "start": "2074639",
    "end": "2079919"
  },
  {
    "text": "mozilla's JavaScript code base so uh you know there there is nothing that you can you can you can say",
    "start": "2079919",
    "end": "2086480"
  },
  {
    "text": "is Uniquely Yours everybody has the same uh you know like you know lisp symbols",
    "start": "2086480",
    "end": "2093040"
  },
  {
    "text": "you know Ruby stole it so Ruby has symbols too you know I mean doesn't matter what feature so uh",
    "start": "2093040",
    "end": "2100040"
  },
  {
    "text": "yes come from come from so we",
    "start": "2100040",
    "end": "2106119"
  },
  {
    "text": "have uh that's kind of a rat hole we there are a few cases where we",
    "start": "2106119",
    "end": "2111599"
  },
  {
    "text": "know that there are languages coming where we're only aware of one okay but it's almost always possible for somebody",
    "start": "2111599",
    "end": "2117880"
  },
  {
    "text": "to come along and come up with a counter example and say well you know that that's you know that that's a Lis feature but it's in Dylan or that's a",
    "start": "2117880",
    "end": "2124000"
  },
  {
    "text": "small talk feature but it's in squeak you know and they can they can make a distinction that you can say well those are really kind of the same language and",
    "start": "2124000",
    "end": "2129599"
  },
  {
    "text": "they say no they're not and it depends who you're talking to because they may have different run times or whatever uh so inal probably I'm at this",
    "start": "2129599",
    "end": "2138560"
  },
  {
    "text": "point I'm so jaded okay that probably even brain has like a derivative like brain brain Prime I know the",
    "start": "2138560",
    "end": "2146079"
  },
  {
    "text": "guy that wrote that language by the way okay so anyway in any case what we do is",
    "start": "2146079",
    "end": "2151119"
  },
  {
    "text": "we don't assume anymore that a language uh feature is unique but the big question that that that really people",
    "start": "2151119",
    "end": "2157280"
  },
  {
    "text": "want to no they say if they think about this really hard and see where we're going they say are you writing a",
    "start": "2157280",
    "end": "2162560"
  },
  {
    "text": "compiler am I going to be able to write a compiler that goes against your intermediate representation and compiles",
    "start": "2162560",
    "end": "2170119"
  },
  {
    "text": "code are you going to have are you going to have that rich of a semantic representation and if so how can it",
    "start": "2170119",
    "end": "2176400"
  },
  {
    "text": "possibly be language neutral because those two are at odds because my language is special and you know the answer I think",
    "start": "2176400",
    "end": "2183160"
  },
  {
    "text": "in the fullness of time is that yes eventually you know there's no reason why we would didn't have that much",
    "start": "2183160",
    "end": "2188280"
  },
  {
    "text": "information and more we have all kinds of stuff that we collect from linkers and loaders and so on runtime even the",
    "start": "2188280",
    "end": "2193920"
  },
  {
    "text": "compilers don't have any access to at all you might even be able to write a better compiler against R IR uh it does",
    "start": "2193920",
    "end": "2199480"
  },
  {
    "text": "mean that we are providing basically a union or a supet operation over all these language features and sometimes",
    "start": "2199480",
    "end": "2206680"
  },
  {
    "text": "the you know the the union is is one okay come from maybe fine okay and so",
    "start": "2206680",
    "end": "2212760"
  },
  {
    "text": "we'll have one special Edge in there just for that language but uh",
    "start": "2212760",
    "end": "2218040"
  },
  {
    "text": "uh that's not really the problem the problem is conflicts the problem is when we've modeled two things as the same and they're not really the same so if we",
    "start": "2218040",
    "end": "2224560"
  },
  {
    "text": "this is the last this is the last sort of major sort of entity we have in our graph we have nodes we have edges and nodes have modifiers modifiers are bits",
    "start": "2224560",
    "end": "2232000"
  },
  {
    "text": "of metadata that are composable right you can you can basically order them together to Flags uh and these really",
    "start": "2232000",
    "end": "2238599"
  },
  {
    "text": "are this is a Dumping Ground this has really become The Dumping Ground for language semantics right we you know",
    "start": "2238599",
    "end": "2244520"
  },
  {
    "text": "pretty much if you capture scope you know and structure and and you know the call graph and the types and stuff at",
    "start": "2244520",
    "end": "2250000"
  },
  {
    "text": "that point this is just flavor right this is just your particular language as Curry seasoning or MSG or whatever and",
    "start": "2250000",
    "end": "2255280"
  },
  {
    "text": "so well I'll go through some examples later but there are subtle differences between a lot of these things that look initially the same and we we argue",
    "start": "2255280",
    "end": "2262000"
  },
  {
    "text": "endlessly over whether they should be the same for example const final immutable unmodify unmodifiable and readon are",
    "start": "2262000",
    "end": "2269800"
  },
  {
    "text": "they all the same okay well we know that const isn't the same because const is",
    "start": "2269800",
    "end": "2274920"
  },
  {
    "text": "actually basically a wrapper type in C++ it's it's it's a type that provides",
    "start": "2274920",
    "end": "2280480"
  },
  {
    "text": "basically read only interface around the constant thing you can cast It Away by going around it so const is definitely",
    "start": "2280480",
    "end": "2287839"
  },
  {
    "text": "out but the others you know the semantics are a little weird I mean if you think back to what Java's final",
    "start": "2287839",
    "end": "2292880"
  },
  {
    "text": "means first of all it means two things and so one one one decision that we made early on was whenever a language has a",
    "start": "2292880",
    "end": "2299839"
  },
  {
    "text": "keyword or a modifier that means two things we're going to split it into two modifiers so final uh means you you",
    "start": "2299839",
    "end": "2308119"
  },
  {
    "text": "can't subclass it or you can't overwrite it it actually means three things",
    "start": "2308119",
    "end": "2313240"
  },
  {
    "text": "depending on whether it's on a class or a method or if it's on a variable it means you can't write it once it's been",
    "start": "2313240",
    "end": "2320040"
  },
  {
    "text": "initialized uh so we split those into uh you know non subclassable and I don't",
    "start": "2320040",
    "end": "2326319"
  },
  {
    "text": "remember I have to look here now now I'm curious uh terminal I think is what we",
    "start": "2326319",
    "end": "2331480"
  },
  {
    "text": "eventually called classes that you can't subass uh and we have immutable for things that are that are right only but",
    "start": "2331480",
    "end": "2337640"
  },
  {
    "text": "in Java you know there's this really subtle language Edge case where if you have a final variable and I compile",
    "start": "2337640",
    "end": "2345119"
  },
  {
    "text": "against it it's a constant say you know static Final End x equals Fu and I",
    "start": "2345119",
    "end": "2350440"
  },
  {
    "text": "compile against it then what I get is a copy of Fu so even if they did change it",
    "start": "2350440",
    "end": "2356319"
  },
  {
    "text": "say through uh you know runtime reflection or whatever or they just changed it and recompiled it and I didn't recompile now we're talking about",
    "start": "2356319",
    "end": "2363119"
  },
  {
    "text": "two different copies of Fu that's a subtlety That Matters To compilers That Matters to run time and we don't capture",
    "start": "2363119",
    "end": "2368280"
  },
  {
    "text": "it at all in our view currently of you know we just say ah you can't write it you see so uh you know each one of these",
    "start": "2368280",
    "end": "2375079"
  },
  {
    "text": "things we we we wind up having to go through all the languages we know so I hired a bunch of people who know a lot of languages and uh you know and we",
    "start": "2375079",
    "end": "2382200"
  },
  {
    "text": "refine it as needed but we try not to get too refined uh because if you over",
    "start": "2382200",
    "end": "2387319"
  },
  {
    "text": "model it uh then it's just wasted work if you're never going to have a client who cares uh in fact you can do some",
    "start": "2387319",
    "end": "2393520"
  },
  {
    "text": "damage by saying okay well we have ins and floats and big nums and complex is and and they're just like I just want to",
    "start": "2393520",
    "end": "2399560"
  },
  {
    "text": "know if it's a number and so basically you have the clients now having to back into ad hoc polymorphism over all of",
    "start": "2399560",
    "end": "2405560"
  },
  {
    "text": "your finely modeled types because what they really want is when it behaves like a thing so anyway public Global default",
    "start": "2405560",
    "end": "2412560"
  },
  {
    "text": "exported they all mean kind of different things built-in extern pred declared implicit autogenerated all kind of the",
    "start": "2412560",
    "end": "2418280"
  },
  {
    "text": "same all mean different things Etc uh so what we do is you know we do",
    "start": "2418280",
    "end": "2423760"
  },
  {
    "text": "our best and we we we we make them the same we split them out when we need to okay let's talk cross language cross",
    "start": "2423760",
    "end": "2430680"
  },
  {
    "text": "language how do languages call each other does anybody ever write in one language of course not never ever not",
    "start": "2430680",
    "end": "2436560"
  },
  {
    "text": "for anything significant uh so you can call Via foreign function interfaces python calling in a C++ say you can call",
    "start": "2436560",
    "end": "2444119"
  },
  {
    "text": "through rpcs obviously you know Java calling a python server say uh you can",
    "start": "2444119",
    "end": "2449680"
  },
  {
    "text": "uh embedded languages World of Warcraft Lua you know you write all your scripts and it's calling down into C uh language",
    "start": "2449680",
    "end": "2455760"
  },
  {
    "text": "embedding also you know probably the canonical use case if you're not into World of Warcraft would be uh JavaScript",
    "start": "2455760",
    "end": "2460920"
  },
  {
    "text": "and browsers also pretty big and uh they have uh the E if you look at JavaScript",
    "start": "2460920",
    "end": "2466839"
  },
  {
    "text": "it's a true scripting language not like Pearl or python or or or Ruby where they",
    "start": "2466839",
    "end": "2472599"
  },
  {
    "text": "it's just a dynamic language that tried to be everything for everybody no that JavaScript is a scripting language in the sense that they've clearly defined a",
    "start": "2472599",
    "end": "2480200"
  },
  {
    "text": "a a an interface by which it's expected to talk to an underlying runtime and",
    "start": "2480200",
    "end": "2485319"
  },
  {
    "text": "basically allow you to compose and call the entities like for example your Dom",
    "start": "2485319",
    "end": "2490800"
  },
  {
    "text": "and your CSS representation and your browser frame windows and so on right so you know uh we want to be able to trace",
    "start": "2490800",
    "end": "2498240"
  },
  {
    "text": "from a JavaScript call down into the D or from a JavaScript call over Ajax to",
    "start": "2498240",
    "end": "2503400"
  },
  {
    "text": "your Java server I mean of course we do everybody wants that idees don't do it today but there's absolutely no reason",
    "start": "2503400",
    "end": "2509839"
  },
  {
    "text": "we couldn't figure that out if it's you know at all statically decidable or if we can even cheat I'll get to the cheating slide in a",
    "start": "2509839",
    "end": "2515960"
  },
  {
    "text": "bit uh and of course yeah there's uh there's code code gen is huge my God",
    "start": "2515960",
    "end": "2521640"
  },
  {
    "text": "everybody uses so much code gen especially Java people but everybody but especially Java people they use a lot of",
    "start": "2521640",
    "end": "2527920"
  },
  {
    "text": "code generation because Java is fundamentally incapable of expressing you know a whole bunch of things that uh",
    "start": "2527920",
    "end": "2534000"
  },
  {
    "text": "other languages have no problem at all with and so Java people like to write declarative things in XML or in whatever",
    "start": "2534000",
    "end": "2539839"
  },
  {
    "text": "and then compile it down to Java and so half of all Java code is generated code you know that some some Transformers",
    "start": "2539839",
    "end": "2546359"
  },
  {
    "text": "spit out Transformers are even peskier than compilers compilers sometimes will",
    "start": "2546359",
    "end": "2551880"
  },
  {
    "text": "record position information for you from where stuff came from so that you can you can jump back to it right",
    "start": "2551880",
    "end": "2558079"
  },
  {
    "text": "Transformers are usually somebody's hack right somebody wrote a hack and oh yeah we're gonna make Json out of this and so",
    "start": "2558079",
    "end": "2564359"
  },
  {
    "text": "so it's a PE script and and you know then they left the company and it's been running like that for years and you know",
    "start": "2564359",
    "end": "2569839"
  },
  {
    "text": "you're like hey we want to update your Pearl script to get grock metadata information and it's it's pretty hard",
    "start": "2569839",
    "end": "2575520"
  },
  {
    "text": "it's can be pretty hard generation is is a big problem for us but we're doing a pretty good job with it I would say",
    "start": "2575520",
    "end": "2581520"
  },
  {
    "text": "anyway the overall the overall point here is that there's a gazillion ways that languages can talk to each other",
    "start": "2581520",
    "end": "2586640"
  },
  {
    "text": "and it would be kind of foolish for us to try to train our indexer about all of them like hardwiring it it would be",
    "start": "2586640",
    "end": "2592280"
  },
  {
    "text": "better if we had sort of a clearing house for saying okay here's a way and It's Tricky problem okay if I uh okay",
    "start": "2592280",
    "end": "2599599"
  },
  {
    "text": "let's take a Mozilla Rhino it's a JavaScript implementation on the Java VM uh it's used in Google app script it's",
    "start": "2599599",
    "end": "2606000"
  },
  {
    "text": "used in all kinds of applications it's it's JavaScript a serers side JavaScript that runs on the Java VM it compiles",
    "start": "2606000",
    "end": "2611839"
  },
  {
    "text": "down to Java B code you can make any Java call from jav from JavaScript syntax basically but it has a JavaScript",
    "start": "2611839",
    "end": "2618720"
  },
  {
    "text": "you know runtime there too and uh you know you want to uh you want to call",
    "start": "2618720",
    "end": "2623880"
  },
  {
    "text": "into a you know a Java Bean or something let's say actually Rhino is is powerful",
    "start": "2623880",
    "end": "2630880"
  },
  {
    "text": "enough to let you declare Java classes jython can do this too you can actually create a class that can be called from",
    "start": "2630880",
    "end": "2638599"
  },
  {
    "text": "java okay and so now what's happening is you're introducing a cross- language binding the the Java the the thing",
    "start": "2638599",
    "end": "2645760"
  },
  {
    "text": "that's analyzing the JavaScript or the python side has to say okay I'm introducing a binding over on the Java",
    "start": "2645760",
    "end": "2651480"
  },
  {
    "text": "side so yeah how do you what's your guys's naming convention for that because they're completely different",
    "start": "2651480",
    "end": "2657359"
  },
  {
    "text": "across languages so we have to solve this problem of basically allowing a languages to sort of inject information",
    "start": "2657359",
    "end": "2662680"
  },
  {
    "text": "in into each other and it's something that we are we' made sort of significant progress on but it is it is distinctly",
    "start": "2662680",
    "end": "2669559"
  },
  {
    "text": "non-trivial uh so the the next like five or six slides are just going to be problem after problem after problem that",
    "start": "2669559",
    "end": "2674720"
  },
  {
    "text": "we've run into and it's just a big been kind of a miserable Slug and the only thing that keeps us going really is that",
    "start": "2674720",
    "end": "2680680"
  },
  {
    "text": "our customers love it now they express their Love by saying your index sucks and it's driving us nuts and they say",
    "start": "2680680",
    "end": "2687359"
  },
  {
    "text": "why is this template expansion not taking me to the right place and we're just like right but it's it's tough love",
    "start": "2687359",
    "end": "2693000"
  },
  {
    "text": "but we know they love it because they're using it right so default okay so the location problem okay you want to jump",
    "start": "2693000",
    "end": "2700559"
  },
  {
    "text": "to the definition of something you want to see it as a cross reference right somebody's calling you uh how do you",
    "start": "2700559",
    "end": "2705960"
  },
  {
    "text": "show it if it has no location that includes things like default Constructors you know implicit you know",
    "start": "2705960",
    "end": "2712240"
  },
  {
    "text": "items that are generated anything in a macro expansion uh you know JavaScript when you write function Fu in JavaScript",
    "start": "2712240",
    "end": "2719200"
  },
  {
    "text": "actually three things are created right your function the function Constructor object which is also a function and the",
    "start": "2719200",
    "end": "2724319"
  },
  {
    "text": "function prototype object which I believe is also a function although I don't think they get their own prototypes and Constructors I'll have to",
    "start": "2724319",
    "end": "2730160"
  },
  {
    "text": "reread this back but in any case at least three things are created at that declaration site so today what we do is",
    "start": "2730160",
    "end": "2737480"
  },
  {
    "text": "we say well yeah it's it's kind of there I know you didn't really say there's a prototype here you could have said it",
    "start": "2737480",
    "end": "2743760"
  },
  {
    "text": "but you you didn't so right now we use some sort of hacks and there are certain situations where there's a reference to",
    "start": "2743760",
    "end": "2748960"
  },
  {
    "text": "a file but not to a particular location in a file classic example an import I'm importing this file you know in python",
    "start": "2748960",
    "end": "2755480"
  },
  {
    "text": "or whatever so where's the location of that well it's kind of the whole file",
    "start": "2755480",
    "end": "2760640"
  },
  {
    "text": "sort of and so we've kind of had to work out these conventions where you know there are different kinds of locations",
    "start": "2760640",
    "end": "2766079"
  },
  {
    "text": "some locations are a span Starts Here ends here some locations are a whole",
    "start": "2766079",
    "end": "2771640"
  },
  {
    "text": "file some are like a nothing right it's like right here between these two characters some locations are what's the",
    "start": "2771640",
    "end": "2777559"
  },
  {
    "text": "location of void in C okay well the location we've decided is the canonical",
    "start": "2777559",
    "end": "2785960"
  },
  {
    "text": "documentation on what whatever website we trust the most so the location is a URI we do that for all the",
    "start": "2785960",
    "end": "2792319"
  },
  {
    "text": "builtins uh and then then we have uh languages that have operator",
    "start": "2792319",
    "end": "2798880"
  },
  {
    "text": "overloading uh will let you overload the array bracketing operator and then when you actually use it what's the location",
    "start": "2798880",
    "end": "2806200"
  },
  {
    "text": "of the reference is it the first bracket or is it the last bracket is it the whole thing or do you just shoot",
    "start": "2806200",
    "end": "2812280"
  },
  {
    "text": "yourself because it's a lot easier so uh it's the first bracket is the I don't",
    "start": "2812280",
    "end": "2818640"
  },
  {
    "text": "know we just made something up so this is kind of hard but we we need to generate locations for things I mean yeah when you get into electrical",
    "start": "2818640",
    "end": "2824400"
  },
  {
    "text": "closures you know there's kind of a pseudo there's a scope there we know it's there the location is this runtime",
    "start": "2824400",
    "end": "2829880"
  },
  {
    "text": "thing right but we need static locations for everything so location big problem and what we do is we make them up naming",
    "start": "2829880",
    "end": "2837640"
  },
  {
    "text": "you need to be able to name stuff right like Anonymous functions which by definition have no",
    "start": "2837640",
    "end": "2844160"
  },
  {
    "text": "name and yet we have to name them and so we do is we name them dollar one and dollar two and whatever right you know",
    "start": "2844160",
    "end": "2850319"
  },
  {
    "text": "we give them names local variables don't have names that are visible to the rest of your program but we invent our own",
    "start": "2850319",
    "end": "2856280"
  },
  {
    "text": "little syntax so it's food. bar Ampersand some local variable right uh eventually we need to be able to name a",
    "start": "2856280",
    "end": "2862359"
  },
  {
    "text": "constract like try and catch and switch blocks and because well because people",
    "start": "2862359",
    "end": "2867960"
  },
  {
    "text": "need to be able to query on that stuff imagine if you will she looks skeptical which is why I'm clarifying here uh",
    "start": "2867960",
    "end": "2873760"
  },
  {
    "text": "imagine legal needs to do a query to find out anytime somebody called a a function with the word Mozilla in it in",
    "start": "2873760",
    "end": "2880680"
  },
  {
    "text": "a loop that that's that's the thing they need to know if somebody called anything with Mozilla in it in a loop you don't",
    "start": "2880680",
    "end": "2887680"
  },
  {
    "text": "care what language it is you don't care what the destination was it just had the string Mozilla and it had to be in some",
    "start": "2887680",
    "end": "2893839"
  },
  {
    "text": "sort of loop okay well that's that's a pretty language neutral query at that point right uh you need to be able to",
    "start": "2893839",
    "end": "2900680"
  },
  {
    "text": "have some way to say in a loop in the query and so being able to name uh a",
    "start": "2900680",
    "end": "2906760"
  },
  {
    "text": "structures and we're not the first to do this we've seen a lot of cases where people have come up with sort of ad hoc tree pattern matching or pattern query",
    "start": "2906760",
    "end": "2912880"
  },
  {
    "text": "languages fors and and they're all useful you know in their own way except when you have the pre pre-processor in",
    "start": "2912880",
    "end": "2918200"
  },
  {
    "text": "and then they're completely not useful but it's a complicated problem anyway we make up names for stuff we have to come",
    "start": "2918200",
    "end": "2924920"
  },
  {
    "text": "up with names across languages so here's a big one right is everybody is always calling they're always calling or using",
    "start": "2924920",
    "end": "2931000"
  },
  {
    "text": "an identifier in some other language that somebody else is going to figure out but they're talking about it in a doc comment and they're like okay what's",
    "start": "2931000",
    "end": "2937880"
  },
  {
    "text": "going to happen here is there's going to be a code generator and it's going to generate this.h file and then that's going to get linked into this program so",
    "start": "2937880",
    "end": "2943280"
  },
  {
    "text": "see and there's no way to link to it because there's no such thing as cross- language linking Java doc lets you link",
    "start": "2943280",
    "end": "2948520"
  },
  {
    "text": "inside of java doxygen lets you link inside of C++ right py do JS do every",
    "start": "2948520",
    "end": "2954319"
  },
  {
    "text": "single language thinks of itself as the only language in the world they're like professors right and so you know they're",
    "start": "2954319",
    "end": "2960359"
  },
  {
    "text": "like yeah nobody else matters except my class what we have to do is we have to come across and we have to say all right",
    "start": "2960359",
    "end": "2966599"
  },
  {
    "text": "uh uh well basically groon SL slash right come up with a URI syntax that that all",
    "start": "2966599",
    "end": "2972160"
  },
  {
    "text": "languages can share we're not there yet but we are getting there the aling problem yeah so the aing",
    "start": "2972160",
    "end": "2980359"
  },
  {
    "text": "problem is you have a name that really is a reference to some other name C++ reference parameters uh python import Fu",
    "start": "2980359",
    "end": "2986799"
  },
  {
    "text": "as bar so I imported Fu but I renamed it and that's kind of a problem right because like if somebody says well I want to find every place where somebody",
    "start": "2986799",
    "end": "2992799"
  },
  {
    "text": "used Fu you have to include all the bars too so what you could is you could just say that's the same thing and not not",
    "start": "2992799",
    "end": "2999559"
  },
  {
    "text": "capture the fact that there's an alias there which works until somebody says I want to find out everybody everywhere somebody used an alias of Fu and then",
    "start": "2999559",
    "end": "3006440"
  },
  {
    "text": "they're like oh you can't throw any information away if they potentially need that so so you actually have to",
    "start": "3006440",
    "end": "3011640"
  },
  {
    "text": "have a node bar and a node Fu and you have to have two things you have to have an edge between them that says oh yes",
    "start": "3011640",
    "end": "3017359"
  },
  {
    "text": "there's an alias here and you have to automatically flatten or join those when",
    "start": "3017359",
    "end": "3022520"
  },
  {
    "text": "people are doing the query where they don't want to distinguish the two right and so in other words your your your",
    "start": "3022520",
    "end": "3027880"
  },
  {
    "text": "single-edged lookup o of one really guaranteed it's going to come back in 3 milliseconds no matter rain or shine now",
    "start": "3027880",
    "end": "3033960"
  },
  {
    "text": "all of a sudden is an arbitrary walk of declarations and Deals and and aliases",
    "start": "3033960",
    "end": "3039480"
  },
  {
    "text": "and whatever in it's in its hairy but well we got to do it we're like the post",
    "start": "3039480",
    "end": "3044559"
  },
  {
    "text": "office we got to deliver uh the syntax tree problem okay Yeahs easy right",
    "start": "3044559",
    "end": "3052319"
  },
  {
    "text": "easy uh no so when you we found early on that everybody was using the word or",
    "start": "3052319",
    "end": "3058680"
  },
  {
    "text": "syntax tree or parse tree or whatever and they all meant different things it's like they're walking around and they had these little thought Bubbles and they",
    "start": "3058680",
    "end": "3064280"
  },
  {
    "text": "all had completely different scribbles in the bubbles uh some people meant they just wanted a tree like these guys were",
    "start": "3064280",
    "end": "3071200"
  },
  {
    "text": "doing this uh this uh binary tree diff algorithm on code reviews where they were trying to narrow down the part of",
    "start": "3071200",
    "end": "3076839"
  },
  {
    "text": "your fire where you had broken somebody's build and all they needed was a tree structured representation they didn't care about the language or the",
    "start": "3076839",
    "end": "3082480"
  },
  {
    "text": "names or anything they just wanted to be able to like do basically binary division on code code block they really wanted a tree and most other groups come",
    "start": "3082480",
    "end": "3089760"
  },
  {
    "text": "along and they say well what Good's a tree if I can't look up the name and the type of the name and the symbol table and you know the type table right so",
    "start": "3089760",
    "end": "3096400"
  },
  {
    "text": "they want you know basically a full intermediate representation a decorated tree an annotated tree that's gone through maybe semantic analysis and",
    "start": "3096400",
    "end": "3102760"
  },
  {
    "text": "tells you whether there are error nodes in there right or variables that uh have been used before they're assigned you",
    "start": "3102760",
    "end": "3108559"
  },
  {
    "text": "know definitely or whatever uh and then you get like compilers will lower the tree as they go",
    "start": "3108559",
    "end": "3115640"
  },
  {
    "text": "right they start off with some source and they'll make a treat but they'll be like ah you know this thing's eventually going to turn into a jump so I'm not",
    "start": "3115640",
    "end": "3120960"
  },
  {
    "text": "even going to represent it as a loop I'm just going to create a jump label and generate the partial bite code for that thing right right now okay which screws",
    "start": "3120960",
    "end": "3128280"
  },
  {
    "text": "us right because now we've lost we don't have we no longer have a faithful representation of the original source code so we one of the reasons that we go",
    "start": "3128280",
    "end": "3135440"
  },
  {
    "text": "in and we contribute parsers is we have to go and we have to add a separate code path for Tool chain mode that doesn't do",
    "start": "3135440",
    "end": "3141040"
  },
  {
    "text": "any of that no no stuff like pre- lowering which messes up the performance like it's lose lose because now we have",
    "start": "3141040",
    "end": "3148319"
  },
  {
    "text": "two we either have two separate parsers which is a maintenance problem or we have two separate code paths which is",
    "start": "3148319",
    "end": "3153960"
  },
  {
    "text": "still potentially a performance problem and a a source of bugs or we have one code path that has a lot of ifs in it we",
    "start": "3153960",
    "end": "3160040"
  },
  {
    "text": "haven't you know we haven't come up with a good solution for this but and yet tools are so important I mean why did I",
    "start": "3160040",
    "end": "3166359"
  },
  {
    "text": "do this project I did this project really because Engineers smart Engineers a lot of Engineers from Stanford okay",
    "start": "3166359",
    "end": "3173079"
  },
  {
    "text": "because they just go next door to Google were coming in and they were making language decisions not based on the",
    "start": "3173079",
    "end": "3178480"
  },
  {
    "text": "merits of the language but as it turns out on the merits of the tool chain and that turns out to be sort of",
    "start": "3178480",
    "end": "3184760"
  },
  {
    "text": "the status quo engineers make their their default choices about you know what they're going to be comfortable doing something in based on the quality",
    "start": "3184760",
    "end": "3190839"
  },
  {
    "text": "of the tools and the type of tools that they used to using I thought well that's kind of stupid what if you know what if this language is way better than that",
    "start": "3190839",
    "end": "3196440"
  },
  {
    "text": "language for this particular task and the answer was they don't care and so if there we could find a way to make you",
    "start": "3196440",
    "end": "3202319"
  },
  {
    "text": "know sort of the same Universal high quality tool support for all these languages then in Theory okay some",
    "start": "3202319",
    "end": "3208520"
  },
  {
    "text": "Engineers might try to use a different language hopefully I mean it's not not really that hard at that point I mean",
    "start": "3208520",
    "end": "3214160"
  },
  {
    "text": "the biggest argument against bringing a new language into a company they say oh well it's scary what if somebody looked at something and couldn't figure out",
    "start": "3214160",
    "end": "3219799"
  },
  {
    "text": "what it did well you know at first I was like well you're stupid and then you know you know over the years I tempered",
    "start": "3219799",
    "end": "3226280"
  },
  {
    "text": "that to be I I see this is a Tool's problem okay you shouldn't have to figure out what it does it should tell",
    "start": "3226280",
    "end": "3232079"
  },
  {
    "text": "you what it does which I think is a bit more moderate see so you know my old age",
    "start": "3232079",
    "end": "3237359"
  },
  {
    "text": "I'm getting a little bit less grumpy now I get mad at the languages themselves because I'm like why aren't you telling",
    "start": "3237359",
    "end": "3242640"
  },
  {
    "text": "me what you're doing okay so then we have uh where we oh yeah do you include comments in a syntax tree no because",
    "start": "3242640",
    "end": "3249880"
  },
  {
    "text": "they're not part of the syntax they get stripped out before the parser even sees it right except everybody needs it what",
    "start": "3249880",
    "end": "3255440"
  },
  {
    "text": "if you're refact what if you're using the syntax tree for refactoring and you want to move something around you want to carry the comments in that local with",
    "start": "3255440",
    "end": "3260920"
  },
  {
    "text": "it right in the vicinity uh you know same thing with keywords nobody ever stores keywords it's like what we store",
    "start": "3260920",
    "end": "3266839"
  },
  {
    "text": "keyword nodes with a location and a spin and you know all this metadata about it when it's a keyword and the answer is",
    "start": "3266839",
    "end": "3273839"
  },
  {
    "text": "well same thing right refactoring code navigation code understanding so we wind up having to store a lot more",
    "start": "3273839",
    "end": "3279839"
  },
  {
    "text": "information it's a huge pain in the butt mixed language becomes an even Huger pain I have some really clever stuff",
    "start": "3279839",
    "end": "3286040"
  },
  {
    "text": "that I can't talk about in this space sadly my team's not letting me but maybe I'll come back in a year and I'll be able to talk about that mixed language",
    "start": "3286040",
    "end": "3292680"
  },
  {
    "text": "is going to get really interesting uh okay the opacity problem yeah this one's cool so what I noticed as I was writing",
    "start": "3292680",
    "end": "3299040"
  },
  {
    "text": "these analyzers is that frequently there would be information available be right there and it's like hey am I allowed to",
    "start": "3299040",
    "end": "3305599"
  },
  {
    "text": "use that like for example uh you know somebody's making a query inside of a",
    "start": "3305599",
    "end": "3310799"
  },
  {
    "text": "string and I know statically like the system that they're querying right you know they're passing a JD they're",
    "start": "3310799",
    "end": "3316760"
  },
  {
    "text": "passing a SQL query into a through a jdbc API say right uh or or they are uh",
    "start": "3316760",
    "end": "3322720"
  },
  {
    "text": "they're importing something but the language syntax dictates that you put the import in inside of a string and so",
    "start": "3322720",
    "end": "3328240"
  },
  {
    "text": "the parser go does this right so the parser comes or actually C++ you can use a string or a literal right you know a",
    "start": "3328240",
    "end": "3336280"
  },
  {
    "text": "symbol so uh you know sometimes the parsel will give you back and say oh yes this is a string you know you know the move along",
    "start": "3336280",
    "end": "3344119"
  },
  {
    "text": "now right and we're like wait right we know the context here we could be actually going in there and figuring out what's in that string and what does it",
    "start": "3344119",
    "end": "3350079"
  },
  {
    "text": "mean what if it's a regular expression literal it's like you know we have access to maybe to the regex parser it",
    "start": "3350079",
    "end": "3355920"
  },
  {
    "text": "has its own tree representation what if we could give the user the ability to navigate inside the reg X I mean for reg",
    "start": "3355920",
    "end": "3361640"
  },
  {
    "text": "xes that could actually be pretty useful for some pretty hairy ones right so we find all these situations where we can",
    "start": "3361640",
    "end": "3367480"
  },
  {
    "text": "actually look at data that is it's inherently noisy it's messy right it may be malformed it may be incomplete it may",
    "start": "3367480",
    "end": "3374359"
  },
  {
    "text": "not be there in all source files uh and yet another another good place is",
    "start": "3374359",
    "end": "3380000"
  },
  {
    "text": "comments should you here's it's a basic question it's a it's a UI question should your editor",
    "start": "3380000",
    "end": "3387400"
  },
  {
    "text": "underline a name of an identifier in a comment okay so I've got a class Fubar",
    "start": "3387400",
    "end": "3394079"
  },
  {
    "text": "baz you know and I'm using Fubar baz all over the place on my code and I mention Fubar baz in a comment and I hover over",
    "start": "3394079",
    "end": "3400960"
  },
  {
    "text": "it should I be able to see or is the comment private you know what I mean is it opaque is it quoted so I shouldn't be",
    "start": "3400960",
    "end": "3406680"
  },
  {
    "text": "looking in there and the thing is if you try to do what I think is the right thing and actually underline the name",
    "start": "3406680",
    "end": "3413280"
  },
  {
    "text": "then you start getting into heris land cuz what if the identifier is there t h",
    "start": "3413280",
    "end": "3418440"
  },
  {
    "text": "e re e right and they say oh well hello there and they're not really talking about there but you underline it you",
    "start": "3418440",
    "end": "3423680"
  },
  {
    "text": "know it's like those horrible ad schemes that just look for just random you know text matches and they they you know",
    "start": "3423680",
    "end": "3429240"
  },
  {
    "text": "you're reading an article and they're say oh you're looking for the here click on this right it's horrible right it's a horrible experience and so uh you know",
    "start": "3429240",
    "end": "3436240"
  },
  {
    "text": "your her istics start to get kind of fancy about what counts as a as a potentially resolvable name inside of a",
    "start": "3436240",
    "end": "3442359"
  },
  {
    "text": "comet but we do it and people love it they're like oo it's so smart except when it's not and then they say I hate",
    "start": "3442359",
    "end": "3448000"
  },
  {
    "text": "you but it's love okay the linking problem oh yeah the linking problem we",
    "start": "3448000",
    "end": "3453799"
  },
  {
    "text": "use real compilers we brag we thought we were so cool turns out compilers suck",
    "start": "3453799",
    "end": "3459799"
  },
  {
    "text": "right compilers punt on everything compilers only care about compiling a particular translation unit one class",
    "start": "3459799",
    "end": "3465880"
  },
  {
    "text": "file one a file or. o file right I mean you know uh uh their their job or one",
    "start": "3465880",
    "end": "3471359"
  },
  {
    "text": "bite code snippet uh and and and compilers are critically dependent on on",
    "start": "3471359",
    "end": "3476760"
  },
  {
    "text": "the inputs like the pre-processor and and and more importantly you know later phases like the Linker and the loader",
    "start": "3476760",
    "end": "3483280"
  },
  {
    "text": "and uh and those things do a lot of the name resolution where the compiler's just like punt right and so we ask the",
    "start": "3483280",
    "end": "3488799"
  },
  {
    "text": "compiler so what is this thing and the compiler like that's the official answer from you know the clang team or whatever so then",
    "start": "3488799",
    "end": "3495960"
  },
  {
    "text": "we got to go to the Linker team and say yeah we need to make your Linker gr compliant right you they're like oh yeah",
    "start": "3495960",
    "end": "3501319"
  },
  {
    "text": "no we can do a good job with that except for oh yeah this is a DL you're going to go have to ask the runtime for that and we're like a it just goes on forever",
    "start": "3501319",
    "end": "3507599"
  },
  {
    "text": "right people like defer stuff lazily and so you know this is a problem grock has to play the role of pre-processor and",
    "start": "3507599",
    "end": "3514240"
  },
  {
    "text": "compiler and Linker and loader and I mean at some point I mean this is metrics we're giving people metrics on",
    "start": "3514240",
    "end": "3519839"
  },
  {
    "text": "their code and metrics beget metrics you got me on my metrics rant everybody nobody can look at a metric or a graph",
    "start": "3519839",
    "end": "3526119"
  },
  {
    "text": "or a chart without wanting more right they're like oh that's an interesting why why right and they make you go back to the drawing board it doesn't matter",
    "start": "3526119",
    "end": "3532160"
  },
  {
    "text": "until you can watch ants walking around on the loading docks right you know they're like where did that ant come",
    "start": "3532160",
    "end": "3537280"
  },
  {
    "text": "from so the thing is like we're going to run into this situation people are like well you do a really good job with static analysis but if you looked at the",
    "start": "3537280",
    "end": "3543119"
  },
  {
    "text": "log data you we're like yeah yeah yeah yeah yeah we'll get there so grock really has to be I mean really has to",
    "start": "3543119",
    "end": "3549839"
  },
  {
    "text": "understand everything about the code that's available eventually oh we're almost on the last slide which is good because we have time",
    "start": "3549839",
    "end": "3555599"
  },
  {
    "text": "for questions so analysis and queries I finished this slide like right before so we're starting to do queries",
    "start": "3555599",
    "end": "3561640"
  },
  {
    "text": "like real for real queries right not just lookups but uh you know analysis now you we can give people the index and",
    "start": "3561640",
    "end": "3568280"
  },
  {
    "text": "we can say go write a map produce and go wild and figure out whatever you want about the code which is just like a restaurant saying here's a cow and a",
    "start": "3568280",
    "end": "3574599"
  },
  {
    "text": "knife and a plate you know go make your own steak right it's no fun nobody's going to do it it's messy and uh and so",
    "start": "3574599",
    "end": "3581880"
  },
  {
    "text": "uh what we want to do is we want to try to find a sweet spot I'm gonna have to use a new metaphor because I think I",
    "start": "3581880",
    "end": "3587000"
  },
  {
    "text": "just killed her with that one um so we're gonna have to find this sweet spot where uh you know casual users who don't",
    "start": "3587000",
    "end": "3594039"
  },
  {
    "text": "want to learn a bunch of stuff can do reasonably rich and sophisticated queries on the code and they come to us",
    "start": "3594039",
    "end": "3600359"
  },
  {
    "text": "all the time with these queries I mean every single day somebody's mailing me and going hey Steve you know what's the Syntax for saying okay I want to find",
    "start": "3600359",
    "end": "3607680"
  },
  {
    "text": "all the methods that return HTTP serate request and I go oh yeah that's easy that's just a single edge yeah that's",
    "start": "3607680",
    "end": "3613680"
  },
  {
    "text": "one lookup and they go or any subass of HT Ser request I'm like okay because",
    "start": "3613680",
    "end": "3618799"
  },
  {
    "text": "that's a graph walk that's a graph expansion what we found okay first off we started kind of cloning eclipse and",
    "start": "3618799",
    "end": "3624520"
  },
  {
    "text": "lxr and some of these you know tools and we we we would do cross references and I showed you cross references I said oh",
    "start": "3624520",
    "end": "3630559"
  },
  {
    "text": "yes everyone knows cross references right what we found is that cross references are a canned predefined query",
    "start": "3630559",
    "end": "3637680"
  },
  {
    "text": "of sort of generic blandness that's kind of minimally minimally appealing to everybody but not very satisfying to",
    "start": "3637680",
    "end": "3644599"
  },
  {
    "text": "anybody and what people always want to do is they want to add filters they want to say well yeah I want to see all these",
    "start": "3644599",
    "end": "3650200"
  },
  {
    "text": "Real Results but only for my project or only for their project right or only for files that end in you know Foo uh and",
    "start": "3650200",
    "end": "3656720"
  },
  {
    "text": "and then they want to W so so and then they want to take that set of nodes and they want to they want to follow an edge",
    "start": "3656720",
    "end": "3663319"
  },
  {
    "text": "and then prob more filters and follow another Edge and they basically are doing this this expand contract lather repeat it's X path basically right this",
    "start": "3663319",
    "end": "3672599"
  },
  {
    "text": "exactly what XPath does for XML documents right you select a node set you have a moving cursor as it",
    "start": "3672599",
    "end": "3677839"
  },
  {
    "text": "interprets your your your your query your xath query it's keeping track of the current node set and it gives you",
    "start": "3677839",
    "end": "3683839"
  },
  {
    "text": "not one not two but 13 different dimensions that you can go on from that node you can say follow all the",
    "start": "3683839",
    "end": "3689160"
  },
  {
    "text": "ancestors All My Siblings all my next siblings my descendants my children my name spaces my attributes whatever it's",
    "start": "3689160",
    "end": "3694799"
  },
  {
    "text": "a horrible horrible mess right well when we looked at ours we have like a hundred different dimensions that you could potentially want to go in it's all the",
    "start": "3694799",
    "end": "3701760"
  },
  {
    "text": "edges that we have right I showed you the list earlier so it's actually potentially quite a bit more complicated",
    "start": "3701760",
    "end": "3707079"
  },
  {
    "text": "than next PATH the thing is we're looking for a sweet spot here we don't",
    "start": "3707079",
    "end": "3712240"
  },
  {
    "text": "want a manual this thick I want something that is roughly as as you know as as hard to learn or as easy to learn",
    "start": "3712240",
    "end": "3719079"
  },
  {
    "text": "is regular expressions or X path tool that everybody can learn once get out the manual if they have to do something really fancy but for basic queries it's",
    "start": "3719079",
    "end": "3725920"
  },
  {
    "text": "pretty easy right and I wanted to go and do the and I don't want it to be able to answer every question in the world but I wanted to be able to do some reasonably",
    "start": "3725920",
    "end": "3731960"
  },
  {
    "text": "Rich queries because people need it people need it so you know I have no idea how to do it I really have no idea",
    "start": "3731960",
    "end": "3737680"
  },
  {
    "text": "I mean we're just starting on this we do have we do know how to interpret it uh we know that uh Google has some really",
    "start": "3737680",
    "end": "3742920"
  },
  {
    "text": "really Nifty graph computation uh engines that we can shove our graph into and they can tell us spanning trees and",
    "start": "3742920",
    "end": "3749839"
  },
  {
    "text": "clicks and clustering and and all kinds of cool stuff so uh this is all you know",
    "start": "3749839",
    "end": "3755160"
  },
  {
    "text": "Uncharted Territory obviously you can use data log and SQL and whatever we do use SQL today the problem with SQL is it",
    "start": "3755160",
    "end": "3761440"
  },
  {
    "text": "can't it can't express recursive joints and that's what people are really doing with this graph walk they're saying okay",
    "start": "3761440",
    "end": "3766640"
  },
  {
    "text": "join all that to this and join all that to this and then filter select where select wear and since you can't do recursive joint and SQL your only option",
    "start": "3766640",
    "end": "3773480"
  },
  {
    "text": "if you want to uh offer people uh to to reduce the number of joins necessary for a given query is to denormalize which",
    "start": "3773480",
    "end": "3780799"
  },
  {
    "text": "Google does a lot of Google's like what Full Table scan why do a full table scan when you can look at every single Row in",
    "start": "3780799",
    "end": "3787000"
  },
  {
    "text": "parallel at the same time right so that's how our you know our our Dremel SQL uh index uh works or they'll say uh",
    "start": "3787000",
    "end": "3795200"
  },
  {
    "text": "you know why walk the edges when you can just store the transitive closure that blows up really fast but if you narrow",
    "start": "3795200",
    "end": "3802200"
  },
  {
    "text": "it to the really common queries and so let's say take take an example I want my superclass chain multiple",
    "start": "3802200",
    "end": "3809319"
  },
  {
    "text": "inheritance that means potentially it's a big dag that goes up right so you could have them walk potentially you",
    "start": "3809319",
    "end": "3815640"
  },
  {
    "text": "know 10 12 15 however deep your class hierarchy is levels to fetch that data",
    "start": "3815640",
    "end": "3820960"
  },
  {
    "text": "or you could just from every class store a link called ancestor to everybody in",
    "start": "3820960",
    "end": "3826680"
  },
  {
    "text": "its dag of its superclass chain its ancestor chain it's wasteful it's piggish it's expensive it's horrible",
    "start": "3826680",
    "end": "3833000"
  },
  {
    "text": "right but it's awfully convenient when you do that SQL query and just go give me the answer sisters right so you know",
    "start": "3833000",
    "end": "3838160"
  },
  {
    "text": "it's always as usual A Spacetime tradeoff um that's where we're at today",
    "start": "3838160",
    "end": "3843400"
  },
  {
    "text": "so h a little bit scaling yeah we've got kind of a scaling issue I think I suspect that Google's codebase is",
    "start": "3843400",
    "end": "3849599"
  },
  {
    "text": "nowhere near as big as Microsoft's or Amazon's but we do have 10,000 diligent Engineers cranking out code and",
    "start": "3849599",
    "end": "3855880"
  },
  {
    "text": "everybody measures the code based size every once in a while and they all come with radically different numbers I mean these numbers are I mean I might as well",
    "start": "3855880",
    "end": "3861720"
  },
  {
    "text": "just be making them up I mean it's really weird you would think especially since we have a single tree more or less",
    "start": "3861720",
    "end": "3868119"
  },
  {
    "text": "uh that you could just look at it and see how much code is in there but it on any given day it'll it'll vary just dramatically and people like what why",
    "start": "3868119",
    "end": "3875079"
  },
  {
    "text": "are there 20,000 fewer JavaScript files today and just so nobody knows we really don't know I mean you know it would take",
    "start": "3875079",
    "end": "3880799"
  },
  {
    "text": "forever to go figure it out and you figure it out and go oh and then you know wasn't worth the time right so uh",
    "start": "3880799",
    "end": "3887200"
  },
  {
    "text": "so you know it's kind of a mystery at this point I'd love to turn grock into a metrics package that can tell people all about how big and Harry our codebase is",
    "start": "3887200",
    "end": "3894240"
  },
  {
    "text": "but right now uh basically it's it's more of our enemy than our friend right we have to run analyzers over all of our",
    "start": "3894240",
    "end": "3900079"
  },
  {
    "text": "code all day long and what's more users aren't happy with yesterday's data they",
    "start": "3900079",
    "end": "3905720"
  },
  {
    "text": "want to know the data that's up to date with their typing you just added a function you want it you know you want",
    "start": "3905720",
    "end": "3911279"
  },
  {
    "text": "to be able to find all the colors of that function you just wrote and so we need to be able to write you know we need to be able sort interactive uh",
    "start": "3911279",
    "end": "3917680"
  },
  {
    "text": "which we're working on there's a you know some some tricky problems with mixing your local data with the global",
    "start": "3917680",
    "end": "3922760"
  },
  {
    "text": "data right if you delete a function we can't just go oh okay well I don't see it here so we'll go look in the global",
    "start": "3922760",
    "end": "3927839"
  },
  {
    "text": "index because you deleted it we actually have to put in a deletion token right all the standard stuff this actually turns into a garbage collection problem",
    "start": "3927839",
    "end": "3934119"
  },
  {
    "text": "when you look at it closely enough when you look at incremental indexing over time uh so but that's the goal because",
    "start": "3934119",
    "end": "3940680"
  },
  {
    "text": "we want to actually store all the revision history for all the code every time somebody does a change any change",
    "start": "3940680",
    "end": "3946039"
  },
  {
    "text": "we want to just basically layer it onto the graph with versions and then you can do historical queries and people will love it except when it doesn't work and",
    "start": "3946039",
    "end": "3952119"
  },
  {
    "text": "then they'll hate us but that's tough love and then we have all these other challenges a big long list a big long",
    "start": "3952119",
    "end": "3959520"
  },
  {
    "text": "list other Depot other languages other build systems other clients incremental indexing interactive canonicalizing ests",
    "start": "3959520",
    "end": "3966520"
  },
  {
    "text": "so that you know they can be the same across languages except when they can't be uh standardizing all these protocols",
    "start": "3966520",
    "end": "3972319"
  },
  {
    "text": "etc etc it goes on forever this project will take forever so you know what do we do well",
    "start": "3972319",
    "end": "3978559"
  },
  {
    "text": "we try to you know use other people's work as much as possible now a lot of people have come to us and said how can I help and the answer is well we're not",
    "start": "3978559",
    "end": "3985079"
  },
  {
    "text": "actually like pushing most of the stuff out open source yet because it's kind of not ready we're embarrassed to show it it's it's buggy if our own if our own",
    "start": "3985079",
    "end": "3991640"
  },
  {
    "text": "Engineers are complaining about it we' hardly want the whole world complaining about it uh however you can prep okay",
    "start": "3991640",
    "end": "3999039"
  },
  {
    "text": "you and anybody watching this video and anybody interested in this space at all can prep by going in we can even publish",
    "start": "3999039",
    "end": "4004520"
  },
  {
    "text": "a doc about this we have an internal document that says what a compiler has to spit out to be CR compliant because it doesn't matter if your format's",
    "start": "4004520",
    "end": "4010640"
  },
  {
    "text": "exactly the same as ours right we can write a visitor that walks it and gets the info we need as long as you're providing it and so uh you know if you",
    "start": "4010640",
    "end": "4018520"
  },
  {
    "text": "happen to be working with a language Community a compiler or an interpreter or a code generator a Transformer",
    "start": "4018520",
    "end": "4023599"
  },
  {
    "text": "anything that spits out code or processes code and spits out you know stuff then you should probably take a",
    "start": "4023599",
    "end": "4030319"
  },
  {
    "text": "look at the document that I'm no doubt going to have to publish that says you know here's what we look for it's pretty",
    "start": "4030319",
    "end": "4035520"
  },
  {
    "text": "basic we want an a that represents the code with location information for everything and we want a symbol table",
    "start": "4035520",
    "end": "4040839"
  },
  {
    "text": "and we want to be able to look up types and if you're calling into some third party package we want to get all the information for that thing too right and",
    "start": "4040839",
    "end": "4046920"
  },
  {
    "text": "don't throw anything away expose it all it's not too hard you can contribute to open source uh you know compilers you",
    "start": "4046920",
    "end": "4052960"
  },
  {
    "text": "can you can write your own type influencer we do Dynamic languages too we have a great type influencer for",
    "start": "4052960",
    "end": "4058279"
  },
  {
    "text": "JavaScript we're working on a great type influencer for python they do outstanding jobs it's almost as if",
    "start": "4058279",
    "end": "4063559"
  },
  {
    "text": "you're writing Java code or C++ code you can hardly tell that it's a dynamic language uh you know go in and do it for",
    "start": "4063559",
    "end": "4069680"
  },
  {
    "text": "Ruby so that it'll be easy for us to grock Ruby uh you know or or or lisp or or whatever uh or if you're in the",
    "start": "4069680",
    "end": "4076559"
  },
  {
    "text": "editor space if you're in the tool chain space if you use Vim or emac or eclipse or intj or any extensible editor uh you",
    "start": "4076559",
    "end": "4083119"
  },
  {
    "text": "know go in there and uh and and you know if you ever get get an urge work with them to to to to split it up and",
    "start": "4083119",
    "end": "4088760"
  },
  {
    "text": "modularize it so that we can be the index so that they can be a thin client that does a nice presentation of the",
    "start": "4088760",
    "end": "4095240"
  },
  {
    "text": "index but but doesn't need to do the analysis we can do it in the cloud all right that's it",
    "start": "4095240",
    "end": "4101920"
  },
  {
    "text": "questions talk to you all out yes uh would you look at searching uh how the",
    "start": "4102520",
    "end": "4108798"
  },
  {
    "text": "code is used like if someone searches for a loop would you return instances of tail",
    "start": "4108799",
    "end": "4114120"
  },
  {
    "text": "recursion yeah so uh we would actually yeah so we that",
    "start": "4114120",
    "end": "4120640"
  },
  {
    "text": "that would have to be language specific right if it were scheme or if it were say closure we would have to actually",
    "start": "4120640",
    "end": "4126040"
  },
  {
    "text": "specify to the user we we we we would model ta tail recursive contracts differently from Loops even though the",
    "start": "4126040",
    "end": "4131480"
  },
  {
    "text": "compiler is just going to compile it down to a loop right so now now that said okay this that's specifically for",
    "start": "4131480",
    "end": "4138600"
  },
  {
    "text": "the use cases we have today but we've had a lot of customers come in and say well we want to do security analysis using your your representation which",
    "start": "4138600",
    "end": "4145159"
  },
  {
    "text": "implies that we need to store you know uh data flow graphs and control flow graphs and so on right so which means",
    "start": "4145159",
    "end": "4150798"
  },
  {
    "text": "single assignment basic block representation where it really is just a loop right it's just a jump Target and",
    "start": "4150799",
    "end": "4156318"
  },
  {
    "text": "so you know down at that level they really don't care whether it's tail call optimization you know or or it's a loop",
    "start": "4156319",
    "end": "4161798"
  },
  {
    "text": "or what right a go-to you know they don't care so a lot of it depends on the client whether they need to know or not",
    "start": "4161799",
    "end": "4168480"
  },
  {
    "text": "other questions yes did you finally get use common LP inside Google yeah did I",
    "start": "4168480",
    "end": "4174159"
  },
  {
    "text": "personally finally get to use common list inside Google uh no not yet um we we did purchase ITA",
    "start": "4174159",
    "end": "4183758"
  },
  {
    "text": "which is a fantastic flight reservation uh uh system that was written uh largely",
    "start": "4183759",
    "end": "4190238"
  },
  {
    "text": "in common lisp and uh so it has become a semi quasi blessed language in Google as",
    "start": "4190239",
    "end": "4195960"
  },
  {
    "text": "long as you don't use it um It's Complicated politics are always complicated but uh uh you know there's",
    "start": "4195960",
    "end": "4202400"
  },
  {
    "text": "sort of support for it you can you can you can actually use it to talk to Google infrastructure now whether you have the guts to use it and not get",
    "start": "4202400",
    "end": "4208800"
  },
  {
    "text": "death threats from your you know colleagues well you know I got a death threat for using Scala at one point it",
    "start": "4208800",
    "end": "4214880"
  },
  {
    "text": "was a half joking death threat so it was like half a death you know at that point I was like I just don't think I'm going to use",
    "start": "4214880",
    "end": "4220280"
  },
  {
    "text": "it uh down the road I hope so and the way that we're going to do it is we're going to write a grock analyz for lisp",
    "start": "4220280",
    "end": "4226400"
  },
  {
    "text": "that makes the tools just as good as they are for for Java today which is a really painful thing to say for anybody who's got a lisp background right",
    "start": "4226400",
    "end": "4232719"
  },
  {
    "text": "because there was a day when lisp had the best tools in small talk it will come again any other",
    "start": "4232719",
    "end": "4239320"
  },
  {
    "text": "questions yes you sh a lot of stuff with with static analysis have you given some",
    "start": "4239320",
    "end": "4244760"
  },
  {
    "text": "thought to D more Dynamic analysis okay yes so we've talked a lot about static anal analysis have we thought about",
    "start": "4244760",
    "end": "4250199"
  },
  {
    "text": "doing any more Dynamic analysis and the answer is yeah about as much as that I I",
    "start": "4250199",
    "end": "4255400"
  },
  {
    "text": "mean we have some people who are who are doing different kinds of dynamic analysis obviously we've got some jit",
    "start": "4255400",
    "end": "4261360"
  },
  {
    "text": "teams some some VM teams that are doing you know uh jit tracing and that kind of",
    "start": "4261360",
    "end": "4266520"
  },
  {
    "text": "thing uh we haven't really talked to him much yet we've really got to kind of nail the static side of it first it",
    "start": "4266520",
    "end": "4272800"
  },
  {
    "text": "would be kind of I don't know I mean there are a lot of different directions that we can go we can go off and chase",
    "start": "4272800",
    "end": "4278120"
  },
  {
    "text": "them and for a while we did because we were looking for low hanging fruit you know easy victories uh but then",
    "start": "4278120",
    "end": "4283960"
  },
  {
    "text": "eventually we realized that we had this giant sparse feature Matrix and what we really needed to do now that people were",
    "start": "4283960",
    "end": "4289480"
  },
  {
    "text": "using it was really fill in some of those those submatrices so that people would trust us and I would rather get",
    "start": "4289480",
    "end": "4295920"
  },
  {
    "text": "nailed the Trust on the static before we do Dynamic than do a half fast job at both",
    "start": "4295920",
    "end": "4301440"
  },
  {
    "text": "someday other questions yes so there's another you had compiler flags on on",
    "start": "4301440",
    "end": "4307840"
  },
  {
    "text": "your list of things there's another whole Space out there like what version",
    "start": "4307840",
    "end": "4313400"
  },
  {
    "text": "of the compiler is is doing this yeah and what OS is this package running on yeah so the question is uh you know I I",
    "start": "4313400",
    "end": "4321199"
  },
  {
    "text": "said oh yeah compiler flags as if I there's only one compiler for the language and one operating system is the",
    "start": "4321199",
    "end": "4326360"
  },
  {
    "text": "target when in reality there are multiple compilers especially for C++ right you know there's multiple compilers there's multiple uh multiple",
    "start": "4326360",
    "end": "4333400"
  },
  {
    "text": "systems system header files you could be bringing in uh yeah I mean you know uh",
    "start": "4333400",
    "end": "4339000"
  },
  {
    "text": "uh analyzing Windows code is is actually a little bit different from analyzing Mac code or or Linux code you know uh",
    "start": "4339000",
    "end": "4346480"
  },
  {
    "text": "and this actually shows up in the as representation thing right because different compilers have differents for",
    "start": "4346480",
    "end": "4353280"
  },
  {
    "text": "everything right I mean the way they represent a method it might be completely different you know often compilers will translate them down into",
    "start": "4353280",
    "end": "4359360"
  },
  {
    "text": "a child child sibling relationship tree you know so they can quickly just iterate over the tree uh but if they do",
    "start": "4359360",
    "end": "4364719"
  },
  {
    "text": "rich any sort of Rich modeling uh you know they may come up with different representations we found like Java C's",
    "start": "4364719",
    "end": "4370159"
  },
  {
    "text": "representation of java is different from eclipse's representation of java clangs is different from significantly",
    "start": "4370159",
    "end": "4375880"
  },
  {
    "text": "different from gcc's and uh what happens is uh as soon as you start exposing ests",
    "start": "4375880",
    "end": "4381480"
  },
  {
    "text": "to people you've made a contract with them right they don't want to have to go you don't you don't want to break their",
    "start": "4381480",
    "end": "4386719"
  },
  {
    "text": "code if you switch backend compilers which we've done now twice at least twice we switched from the eclipse CDT",
    "start": "4386719",
    "end": "4393080"
  },
  {
    "text": "indexer to clang once clang started really kicking ass and we switched from the eclipse Java indexer to Java C once",
    "start": "4393080",
    "end": "4400400"
  },
  {
    "text": "it became clear that that wasn't going to die and uh anybody who was using rsts at that that point had to be Rewritten",
    "start": "4400400",
    "end": "4407040"
  },
  {
    "text": "so now we have this kind of open question do we do we do we come up with a language neutral not a cross language",
    "start": "4407040",
    "end": "4412400"
  },
  {
    "text": "canonical but you know at least a compiler neutral representation of not just that but the types you know and for",
    "start": "4412400",
    "end": "4418880"
  },
  {
    "text": "C++ you can get into how you represent templates and instantiations and specializations and things like that it's It's Tricky uh you know and you can",
    "start": "4418880",
    "end": "4426159"
  },
  {
    "text": "throw into the mix the build system you can be using the same compiler and the same OS and using you know you can be using ant or make or Maven or uh uh you",
    "start": "4426159",
    "end": "4432719"
  },
  {
    "text": "know Google's build system or whatever your own build system system and um yeah so this is a problem this is a problem",
    "start": "4432719",
    "end": "4439199"
  },
  {
    "text": "where we're now we're getting into uh views of the graph that are kind of specific to your project uh and so we",
    "start": "4439199",
    "end": "4446199"
  },
  {
    "text": "want to introduce the notion of a project space in our graph so we can keep track of what version of the",
    "start": "4446199",
    "end": "4452679"
  },
  {
    "text": "compiler was it what tool chain you know we use a cross compiler at Google that can in theory use GCC or CL because we",
    "start": "4452679",
    "end": "4458760"
  },
  {
    "text": "use them both actually so uh now we've got this basically hypervisor of a compiler that we got to talk to it's",
    "start": "4458760",
    "end": "4464880"
  },
  {
    "text": "it's quite complicated and the answer is like for most things we punt right now we don't we don't do a very good job",
    "start": "4464880",
    "end": "4470280"
  },
  {
    "text": "with that what we're offering people is a service where they can use gr they can they can run their own version of grock on their own Branch using their own",
    "start": "4470280",
    "end": "4476679"
  },
  {
    "text": "compilers and tools and stuff and the index that's produced will be all the things that are relevant for their",
    "start": "4476679",
    "end": "4481840"
  },
  {
    "text": "workspace which is a compromise right it's not it's not perfect we'd like to be able to you know generalize across",
    "start": "4481840",
    "end": "4488199"
  },
  {
    "text": "these things and come up with the generic representation for what the compiler flags are needed are the include path or whatever but we'll get there might be years but",
    "start": "4488199",
    "end": "4495639"
  },
  {
    "text": "we understand the the the complexity of it and what we do is try to make the maximum number of people happy for the minimum effort in each",
    "start": "4495639",
    "end": "4502760"
  },
  {
    "text": "stepes that answer your question um yeah that was interesting but it wasn't what I was trying to ask",
    "start": "4502760",
    "end": "4508760"
  },
  {
    "text": "okay um suppose I've got a specific compiler and I switch from version you know",
    "start": "4508760",
    "end": "4514920"
  },
  {
    "text": "13.26 to 13.2.78",
    "start": "4514920",
    "end": "4519198"
  },
  {
    "text": "versions fixing a bug which potentially could change the representation of the code that we've stored uh is is",
    "start": "4525199",
    "end": "4531840"
  },
  {
    "text": "generalizable across uh it actually happens the most with our BL our build system our Blaze uh uh representation",
    "start": "4531840",
    "end": "4538199"
  },
  {
    "text": "changes you know every few months and if we're storing historical versions uh now",
    "start": "4538199",
    "end": "4543320"
  },
  {
    "text": "we've got fundamentally different semantic representations across versions and it makes querying hard like you have",
    "start": "4543320",
    "end": "4549080"
  },
  {
    "text": "this question of okay from 1327 to 1325 there was this change in the way these",
    "start": "4549080",
    "end": "4554199"
  },
  {
    "text": "types were represented do we backfill the data so that today's queries are as if we had been compiling",
    "start": "4554199",
    "end": "4559840"
  },
  {
    "text": "a code with 1327 all along or do we tell clients okay at this particular point in time your quer is going to get kind of",
    "start": "4559840",
    "end": "4566440"
  },
  {
    "text": "weird right is that that closer to the problem that you were asking about yeah and uh you know um this this is this is",
    "start": "4566440",
    "end": "4575239"
  },
  {
    "text": "a problem it's even a problem if the compilers don't change but our data model changes our representation becomes",
    "start": "4575239",
    "end": "4580840"
  },
  {
    "text": "more accurate or more precise or whatever to to fix to fix a bug and in our representation and uh this is",
    "start": "4580840",
    "end": "4587840"
  },
  {
    "text": "actually a you know Common problem with anybody who's representing historical data at Google right I mean even if it's",
    "start": "4587840",
    "end": "4593120"
  },
  {
    "text": "Maps data right if you start collecting different data do you go back and retrofit all the old historical Maps if you're keeping it",
    "start": "4593120",
    "end": "4598880"
  },
  {
    "text": "around and boy oh boy I don't know do you know K I would love to know the answer to",
    "start": "4598880",
    "end": "4604960"
  },
  {
    "text": "this track of what what was you know going at the right time you're right you have to keep track you have to model the",
    "start": "4604960",
    "end": "4610840"
  },
  {
    "text": "change itself that's ideally right uh and uh yeah voice so that's that's a",
    "start": "4610840",
    "end": "4615960"
  },
  {
    "text": "kind of a metam modeling you have to be able to recreate the environment yep yeah yeah so we have run into this",
    "start": "4615960",
    "end": "4621120"
  },
  {
    "text": "problem a few times the need to sort of uh uh we have uh we want to so it's not",
    "start": "4621120",
    "end": "4628120"
  },
  {
    "text": "related to grock but we have a source control system and people can like you know check in code and and at a particular point in time the code might",
    "start": "4628120",
    "end": "4634440"
  },
  {
    "text": "be good and then it's bad for a while as people make changes and people may want to go back and they want to get a fresh",
    "start": "4634440",
    "end": "4640120"
  },
  {
    "text": "build even just for QA purposes of that particular time but unfortunately the Blaze the the build system uh our our",
    "start": "4640120",
    "end": "4646639"
  },
  {
    "text": "build compiler as it were has changed dramatically in the meantime so you have to go back and you have to be able to",
    "start": "4646639",
    "end": "4652280"
  },
  {
    "text": "check out the compiler at that point in time that was used yeah it's pretty hairy I mean we have it's hard when you",
    "start": "4652280",
    "end": "4658600"
  },
  {
    "text": "come to Google you know you it takes a while to realize how much storage space we have we have a lot of storage space",
    "start": "4658600",
    "end": "4665199"
  },
  {
    "text": "and uh you need to start thinking in terms of storing everything for all time even if it seems wasteful uh and we're",
    "start": "4665199",
    "end": "4671000"
  },
  {
    "text": "getting better about that I mean it was only maybe after four years on this project just just over the holidays here",
    "start": "4671000",
    "end": "4676400"
  },
  {
    "text": "that I realized that we could probably store uh our metadata for every file",
    "start": "4676400",
    "end": "4682560"
  },
  {
    "text": "save that everybody does all the time for all history and I was like oh yeah I did the math and I was like oh yeah",
    "start": "4682560",
    "end": "4688320"
  },
  {
    "text": "that's a tiny data set it seemed huge at first right so yeah Will We Will We Will We model those changes oh God yeah",
    "start": "4688320",
    "end": "4694679"
  },
  {
    "text": "eventually maybe but uh but that's hard that's hard often do is when they finally get a",
    "start": "4694679",
    "end": "4702639"
  },
  {
    "text": "board or a chip D is they take the PC that they've been doing the work on yes they just unplug itug away there in case",
    "start": "4702639",
    "end": "4709679"
  },
  {
    "text": "they ever have to come back to it yeah yeah so what we'll do is we'll make a copy of our data center every time we",
    "start": "4709679",
    "end": "4715120"
  },
  {
    "text": "produce an yeah okay so you got me that's a hard one you haven't done that one",
    "start": "4715120",
    "end": "4723199"
  },
  {
    "text": "yet beige box in the corner any other questions any easy",
    "start": "4723880",
    "end": "4732320"
  },
  {
    "text": "questions yes uh how do you represent like macros and that sort of thing in your graph I mean what is macro uh so uh",
    "start": "4732360",
    "end": "4741480"
  },
  {
    "text": "if it lisp has sort of tree macros and it has and it also has reader macros which are like Leal so depends",
    "start": "4741480",
    "end": "4747760"
  },
  {
    "text": "whe you're talking about basically press but text macros uh you know uh they're",
    "start": "4747760",
    "end": "4754880"
  },
  {
    "text": "they're a little tricky we're working on them like this quarter uh",
    "start": "4754880",
    "end": "4760520"
  },
  {
    "text": "uh what we want is really obvious okay we want to be able to click click on a macro and see it's it's one level",
    "start": "4760520",
    "end": "4766760"
  },
  {
    "text": "expansion and potentially it's n level expansions and if there are any so so if there are any macros used within the",
    "start": "4766760",
    "end": "4772239"
  },
  {
    "text": "macro expansion we want to be able to expand those and so on right uh and then if there are identifiers that are created or referenced inside of the",
    "start": "4772239",
    "end": "4779000"
  },
  {
    "text": "macro expansion or its recursive expansion then we want to be able to index those things we have some clever",
    "start": "4779000",
    "end": "4784760"
  },
  {
    "text": "ideas that my team won't let me talk about but I will I will uh I will definitely lump that in the hard",
    "start": "4784760",
    "end": "4790000"
  },
  {
    "text": "question category it's a it's definitely not an easy space I mean I think K and",
    "start": "4790000",
    "end": "4795120"
  },
  {
    "text": "Brian ker or maybe it was Dennis Richie said a couple of years ago that yeah if they had to do it all over again they",
    "start": "4795120",
    "end": "4800560"
  },
  {
    "text": "probably would have left the C processor C pre processor out because it just made such a mess for Tool chains Forever",
    "start": "4800560",
    "end": "4806159"
  },
  {
    "text": "After but then it wouldn't have been successful so it's tough",
    "start": "4806159",
    "end": "4811760"
  },
  {
    "text": "right all right well thank you you've been a lovely audience thanks",
    "start": "4811760",
    "end": "4818360"
  }
]