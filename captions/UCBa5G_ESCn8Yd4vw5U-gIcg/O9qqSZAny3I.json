[
  {
    "text": "I'm Keith Winston I'm here in computer science and my almost entire group",
    "start": "10830",
    "end": "15880"
  },
  {
    "text": "showed up to this this is the first time I've seen them all together so they will be answering all the questions at the end so I'm very happy to have questions",
    "start": "15880",
    "end": "23650"
  },
  {
    "text": "or interruptions in the middle please just go for it I'm here to tell you about sort of a style of building systems that we've used in our group",
    "start": "23650",
    "end": "29860"
  },
  {
    "text": "that has a number of applications there's no sort of functional programming but not in the you know Haskell kind of sense but just in the",
    "start": "29860",
    "end": "36550"
  },
  {
    "text": "idea that it can be helpful to take a sort of mega system and divide it up into sort of small granular pieces so",
    "start": "36550",
    "end": "43089"
  },
  {
    "text": "the message of this talk is that sort of granular functional interfaces to computing resources reasoning carefully",
    "start": "43089",
    "end": "48460"
  },
  {
    "text": "about state is going to open up new ways of doing things or new ways of doing existing things and new things that we",
    "start": "48460",
    "end": "54489"
  },
  {
    "text": "can do and I think based on our experience so far we think there's a pretty strong case that it's worth",
    "start": "54489",
    "end": "59710"
  },
  {
    "text": "refactoring sort of the mega modules that we have today things that people are scared of touching things like TCP",
    "start": "59710",
    "end": "65080"
  },
  {
    "text": "congestion control or video codecs or compilers or machine learning kernels these are things that people should have",
    "start": "65080",
    "end": "70840"
  },
  {
    "text": "reluctant to do by themselves or reluctant to redo you know oh that's you need an expert to do video codec or you",
    "start": "70840",
    "end": "76000"
  },
  {
    "text": "know you need an expert to do congestion control you know I don't think that's true I mean I do these things I'm just sort of a dilettante you don't you don't",
    "start": "76000",
    "end": "82420"
  },
  {
    "text": "need to be an expert and you especially don't if you can reason carefully about state and if the consequences of a",
    "start": "82420",
    "end": "87550"
  },
  {
    "text": "mistake are not that bad because there's sort of no side effects so this ability to sort of save and restore the state of",
    "start": "87550",
    "end": "93160"
  },
  {
    "text": "a mega module saving restore the programme state it's a powerful tool because you can always sort of back up so I'm going to tell you about four",
    "start": "93160",
    "end": "99250"
  },
  {
    "text": "systems that we built that sort of demonstrate this idea so the first is a system for fast interactive video",
    "start": "99250",
    "end": "105310"
  },
  {
    "text": "encoding called X camera the second is work we did with Dropbox to recompress all of the JPEGs hundreds of petabytes",
    "start": "105310",
    "end": "111880"
  },
  {
    "text": "of JPEGs that are in the Dropbox distributed file system the third is a real-time video conferencing system that",
    "start": "111880",
    "end": "117880"
  },
  {
    "text": "has again one of these purely functional systems and the fourth affair time to get to it is a system for outsourcing anything to the cloud sort of make - a",
    "start": "117880",
    "end": "124150"
  },
  {
    "text": "1,000 1,000 way parallelism and each of these uses this functional idea for a",
    "start": "124150",
    "end": "129190"
  },
  {
    "text": "different benefit so in the X camera we have a purely functional video codec that we use to get fine-grained massive",
    "start": "129190",
    "end": "135610"
  },
  {
    "text": "parallelism to reducer to the end and completion time in the case of the JPEG recompression we have a functional JPEG",
    "start": "135610",
    "end": "142030"
  },
  {
    "text": "codec a functional Huffman encoder Dease predicted huffman encoder that we use to be able to shard the JPEG files",
    "start": "142030",
    "end": "148300"
  },
  {
    "text": "that Dropbox has on a distributed file system so we can break them up into tiny little pieces that's compatible with their sort of the redundancy story there",
    "start": "148300",
    "end": "155230"
  },
  {
    "text": "they're sharding story in the case of the video conferencing the real-time video we use this functional abstraction",
    "start": "155230",
    "end": "161470"
  },
  {
    "text": "to be able to explore an execution path without committing to it say you know what if we encoded the video to high",
    "start": "161470",
    "end": "166690"
  },
  {
    "text": "quality what if we included the video to low quality and then we'll make a decision which one we wanted to do only after the fact we considered rewind",
    "start": "166690",
    "end": "172870"
  },
  {
    "text": "State and in the case of the the GG the massive compilation we have this",
    "start": "172870",
    "end": "178120"
  },
  {
    "text": "abstraction we call a cloud thunk that allows us to have sort of any task to the cloud to these cloud functions for",
    "start": "178120",
    "end": "184090"
  },
  {
    "text": "pennies so you can take a normal sort of unix pipeline like a makefile and infer one of these functional you",
    "start": "184090",
    "end": "190000"
  },
  {
    "text": "know a lambda expression really from it and then run that with massive parallelism across thousands of workers",
    "start": "190000",
    "end": "195010"
  },
  {
    "text": "or locally and you know sort of get the same answer so there's four different benefits from this quasi functional",
    "start": "195010",
    "end": "200740"
  },
  {
    "text": "functional ish style all right so let's go into the first one which is the fine-grained parallel video processing",
    "start": "200740",
    "end": "207040"
  },
  {
    "text": "so this was a 10 STI last year motivation here is that video is really",
    "start": "207040",
    "end": "212670"
  },
  {
    "text": "painful to do with who here has maybe kids and you've edited a home movie maybe a home movie not about your kids",
    "start": "212670",
    "end": "218320"
  },
  {
    "text": "yeah all right sir with it with kids with that okay and how long was the video okay and did you edit it or do",
    "start": "218320",
    "end": "227320"
  },
  {
    "text": "anything to it in the computer okay how what what kind of change you make like a cut or change the colors or picking",
    "start": "227320",
    "end": "233470"
  },
  {
    "text": "pieces and splicing them together all right and then how long did that take and end to re-render after you did that",
    "start": "233470",
    "end": "238740"
  },
  {
    "text": "months that seems crazy from you making",
    "start": "238740",
    "end": "248710"
  },
  {
    "text": "a change for someone else in the world to be able to see that change yeah yeah",
    "start": "248710",
    "end": "257200"
  },
  {
    "text": "and even if it was so-called real-time it would still have taken you like 18 minutes right the playback might have",
    "start": "257200",
    "end": "262750"
  },
  {
    "text": "taken three hours to do whatever had to be done Oh granted I don't know what it was actually happy",
    "start": "262750",
    "end": "267960"
  },
  {
    "text": "there's no that's how long it took or there was a new file I can look at yes if you think about the things that have",
    "start": "267960",
    "end": "273449"
  },
  {
    "text": "made computing like really different especially things around here like you know the Xerox Alto right or like the",
    "start": "273449",
    "end": "279419"
  },
  {
    "text": "mother of all demos like the amazing thing here was you could take something and make it interactive and see the results immediately or sketchpad any of",
    "start": "279419",
    "end": "286080"
  },
  {
    "text": "these systems the interactivity is a powerful thing I remember Mike right I mean Mike right was amazing it was like the paragraphs would reflow as you typed",
    "start": "286080",
    "end": "292410"
  },
  {
    "text": "fantastic and now we have this insert of Internet collaborative way we have Google Docs or if I'm we're looking at",
    "start": "292410",
    "end": "298289"
  },
  {
    "text": "the same document and I mean X you know not only do I see the X and the text reflow on my screen but everybody else sees it too at the same time the results",
    "start": "298289",
    "end": "305070"
  },
  {
    "text": "of making a change are instantly visible it's just like sort of the old-fashioned way where you'd like put a pan on a",
    "start": "305070",
    "end": "310530"
  },
  {
    "text": "piece of paper and it would like happen immediately it's like revelatory to have that in the computer context that's Google Docs but we don't have this for",
    "start": "310530",
    "end": "316770"
  },
  {
    "text": "video video is the most popular kind of content on the internet by time spent by byte sent it's the vast majority of",
    "start": "316770",
    "end": "322800"
  },
  {
    "text": "content set over the internet but to manipulate video is a huge pain in the neck there's no way to have a sort of instant editing and transformation in a",
    "start": "322800",
    "end": "328680"
  },
  {
    "text": "collaborative sense of a video it would be very nice to have you can imagine here you have some video what if you wanted to experiment apply some filter",
    "start": "328680",
    "end": "335190"
  },
  {
    "text": "to video that would be nice or we could do some analysis like you know instead of skip to the next chapter of the DVD",
    "start": "335190",
    "end": "340889"
  },
  {
    "text": "what if we skip to the next time we see this actor be nicer how many times this actor appear you know along you know can",
    "start": "340889",
    "end": "346650"
  },
  {
    "text": "we see a scene that has this actor in this actor together can we edit that together what if you wanted to take actor and remove them from the movie",
    "start": "346650",
    "end": "352409"
  },
  {
    "text": "that could be nice to just like automatically fine and replace like take someone just take them out it would be",
    "start": "352409",
    "end": "357539"
  },
  {
    "text": "nice to play with these sorts of transformations in a you know make right type sense you know like a sketch pad type steps like immediately not have to",
    "start": "357539",
    "end": "363630"
  },
  {
    "text": "wait months to rerender an 18 minute video so if you think about what it would take from a systems perspective to",
    "start": "363630",
    "end": "368729"
  },
  {
    "text": "accomplish this you know the question would be a standard toolbox can we just put a lot of computers on it can we have",
    "start": "368729",
    "end": "374490"
  },
  {
    "text": "massive parallelism to be able to apply these video operations just very very quickly Bob iMovie course",
    "start": "374490",
    "end": "385970"
  },
  {
    "text": "[Music]",
    "start": "386440",
    "end": "389560"
  },
  {
    "text": "well I think it depends and we'll see some numerical benchmarks alright I mean",
    "start": "397670",
    "end": "408840"
  },
  {
    "text": "you were at Apple probably with like a high-speed line well we'll show the benchmarks so the challenge if you",
    "start": "408840",
    "end": "414870"
  },
  {
    "text": "wanted to do this with massive parallelism there's sort of two challenges one is you would need to be able to summon thousands of threads",
    "start": "414870",
    "end": "420420"
  },
  {
    "text": "thousands of course at once doing this operation you're on Mik right you can hit an X and it's sort of an eight kilohertz megahertz now what was it it",
    "start": "420420",
    "end": "426930"
  },
  {
    "text": "was to kill to maker some early Macintosh can reflow the text was that some number Hertz Macintosh could reflow",
    "start": "426930",
    "end": "434490"
  },
  {
    "text": "the tank and that was considered a a major accomplishment at that time that you could have sort of real-time you know text reflow",
    "start": "434490",
    "end": "440700"
  },
  {
    "text": "but to do this with video would take just like many many you know thousands of computers and you'd have to be able",
    "start": "440700",
    "end": "445740"
  },
  {
    "text": "to summon them only when the user was doing an interactive operation it would be way too expensive to have these computers just sitting there humming waiting for you to do something",
    "start": "445740",
    "end": "452400"
  },
  {
    "text": "that's part one you have to have the available power ilysm the second thing is that how do you get on your",
    "start": "452400",
    "end": "458580"
  },
  {
    "text": "calculation paralyzed enough to make use of that kind of level resource so the challenge with video compression is that",
    "start": "458580",
    "end": "464880"
  },
  {
    "text": "the finer grain of parallelism if you try to divide up a video into thousands of tiny pieces the compression efficiency actually gets worse and worse",
    "start": "464880",
    "end": "470970"
  },
  {
    "text": "so there's sort of a fundamental reason that limits the available parallelism in this task so that's sort of what our",
    "start": "470970",
    "end": "476100"
  },
  {
    "text": "project was about was addressing those two challenges so the first is that we made a framework to run these sort of",
    "start": "476100",
    "end": "482310"
  },
  {
    "text": "five thousand way interactive parallel jobs with inner thread communication on a commercial cloud function service and",
    "start": "482310",
    "end": "487650"
  },
  {
    "text": "number two we developed a purely functional video codec that allows us to start encoding chunks for mid-stream it",
    "start": "487650",
    "end": "494700"
  },
  {
    "text": "allows us to have a granularity of parallelism that is finer grained than the dependency boundaries in the video",
    "start": "494700",
    "end": "499800"
  },
  {
    "text": "stream I'll talk about them in a second so Hostos we call this X camera so part one is this realization that we had that",
    "start": "499800",
    "end": "506490"
  },
  {
    "text": "these cloud functions services had an unrealized power these are servers like AWS land or Google cloud functions or as",
    "start": "506490",
    "end": "511920"
  },
  {
    "text": "your functions they were intended for sort of event handlers and web micro services sort of asynchronous tasks",
    "start": "511920",
    "end": "517409"
  },
  {
    "text": "where there's a million people with cell phones and maybe occasionally one of them will do something and then when that happens one of these functions will",
    "start": "517410",
    "end": "523110"
  },
  {
    "text": "get fired off and reply and the cool benefits is that you know your it's not",
    "start": "523110",
    "end": "528360"
  },
  {
    "text": "like you're booting up over machine every time I mean I know VMware was a very successful company but yeah this is being videotaped anyway I love",
    "start": "528360",
    "end": "535920"
  },
  {
    "text": "VMware if you think about what should be the abstraction to program the cloud the",
    "start": "535920",
    "end": "541290"
  },
  {
    "text": "idea that you have to have a simulation of an x86 computer with a you know pretending they have access to the x86",
    "start": "541290",
    "end": "547170"
  },
  {
    "text": "chip and a fake Ethernet card and a fake hard drive and and and RAM you know your",
    "start": "547170",
    "end": "552990"
  },
  {
    "text": "own RAM and that you have to then boot the operating system before you can do a calculation it seems like there's other",
    "start": "552990",
    "end": "558180"
  },
  {
    "text": "abstractions we could think about for how to program the cloud because in this case if you you know to boot up an",
    "start": "558180",
    "end": "563189"
  },
  {
    "text": "Amazon virtual machine you know it takes a minute or so to boot up they bill it based on the minute you know there's a minimum sort of minute to pay for it and",
    "start": "563189",
    "end": "569519"
  },
  {
    "text": "you'd have to wait like a minute before you could actually do anything because like Linux is booting up so the beautiful thing with this new",
    "start": "569519",
    "end": "574529"
  },
  {
    "text": "abstraction this age of us lambda is you don't have that that you can run thousands of threads it turns out you can run arbitrary Linux executables we",
    "start": "574529",
    "end": "580139"
  },
  {
    "text": "discover you just upload a static Linux executable you can run it and they boot up in less than a second and the billing",
    "start": "580139",
    "end": "585839"
  },
  {
    "text": "is less than a second so you can imagine an application your computer that would normally take one hour what if the",
    "start": "585839",
    "end": "591569"
  },
  {
    "text": "computer could tell you know what we can do this locally it'll take an hour or I can fire up 3600 lambdas like that each",
    "start": "591569",
    "end": "597420"
  },
  {
    "text": "one will run for one second we still get an hour of CPU time that's gonna cost you less than a dime I mean that's the",
    "start": "597420",
    "end": "603990"
  },
  {
    "text": "economics I think it's a pretty I would pay the nine cents to save an hour of CPU time to go from an hour to one second I think you can imagine any",
    "start": "603990",
    "end": "610290"
  },
  {
    "text": "interactive application might be this way sort of pervasive parallelism for interactive applications so we built a library to enable this a library that",
    "start": "610290",
    "end": "617579"
  },
  {
    "text": "fires off thousands and thousands of lambdas running a arbitrary sort of executable very very quickly so you know",
    "start": "617579",
    "end": "623670"
  },
  {
    "text": "we use a lot of sort of engineering tricks like we open up a lot of TCP connections and we fire them off at the same time these are not maybe that",
    "start": "623670",
    "end": "629459"
  },
  {
    "text": "intellectually interesting but we built this framework that that allows us to harness the parallelism of lambda for",
    "start": "629459",
    "end": "635850"
  },
  {
    "text": "these sort of not asynchronously parallel jobs but burst parallel jobs we want to come in and say I want 5,000",
    "start": "635850",
    "end": "640920"
  },
  {
    "text": "lambdas right now and when we communicated with this to Amazon we all flew up there we had like a hard time communicating with them because we said",
    "start": "640920",
    "end": "646829"
  },
  {
    "text": "you know you know they won't only wanted to give us like a thousand concurrent lambdas and we said you know can we have",
    "start": "646829",
    "end": "652439"
  },
  {
    "text": "many many more and they said well how many requests per second does your application have you know think of it",
    "start": "652439",
    "end": "657809"
  },
  {
    "text": "like an asynchronous thing we said well most the time zero and then occasionally when the user hits a",
    "start": "657809",
    "end": "663190"
  },
  {
    "text": "you know I want as many as it'll give me I mean if we could have a million we'd love a million so like so a million per second like snow just a million every so",
    "start": "663190",
    "end": "669910"
  },
  {
    "text": "often that was sort they really don't like that because you know they want to have to provision for us but it's sort",
    "start": "669910",
    "end": "675490"
  },
  {
    "text": "of the difference between circuit switching and packet switching if you think about like booting up VMs for an hour that's kind of like the AT&T you",
    "start": "675490",
    "end": "681640"
  },
  {
    "text": "know circa 1955 model the circuit switching and what we're asking for is this more packet switched as an analogy",
    "start": "681640",
    "end": "687550"
  },
  {
    "text": "packet switch interface to the cloud where we can say I want 5,000 functions now and 3,000 function now and they'll be very short-lived and this was a",
    "start": "687550",
    "end": "693790"
  },
  {
    "text": "challenge when they were starting the internet you know when the internet people in Kleinrock called up 18t and says i want to be able to send one",
    "start": "693790",
    "end": "699310"
  },
  {
    "text": "packet they said well sir there's a six minute minimum time you know any telephone call you can have a telephone call send whatever you want over but",
    "start": "699310",
    "end": "705280"
  },
  {
    "text": "we're gonna bill you for six minutes no matter what you do that's kind of the world we're in now or they're you know the VMS are gonna bill us for a minute whatever we doing we",
    "start": "705280",
    "end": "711130"
  },
  {
    "text": "want a microsecond but to have this sort of packet-switched interface to the cloud it turns out to be very very",
    "start": "711130",
    "end": "716560"
  },
  {
    "text": "powerful so we were able to get these threads we can have five thousand threads starting at the same time but",
    "start": "716560",
    "end": "722140"
  },
  {
    "text": "the challenge is how do you use five thousand threads at the same guy didn't compress a video because the challenge is the finer grain the parallelism the",
    "start": "722140",
    "end": "727870"
  },
  {
    "text": "worse the compression efficiency let's talk about why that is what is a video codec it is to modulars a video encoder",
    "start": "727870",
    "end": "736480"
  },
  {
    "text": "and a video decoder with a contract between them that you can have raw pictures coming in on the left raw",
    "start": "736480",
    "end": "742510"
  },
  {
    "text": "images off a camera going to the video encoder and in the middle there's an opaque bit stream and they'll go into",
    "start": "742510",
    "end": "749590"
  },
  {
    "text": "the decoder and then on the right side you get some fuzzy version of the pictures on the left that's the contract for the end coder and the decoder",
    "start": "749590",
    "end": "755770"
  },
  {
    "text": "there's a stream in a stream of pictures produces a stream of bits produces a stream of reconstructed pictures and the",
    "start": "755770",
    "end": "761980"
  },
  {
    "text": "way that the compression can reduce the number of bits from the sort of representation of the right image is to",
    "start": "761980",
    "end": "768070"
  },
  {
    "text": "exploit the correlation between adjacent frames so if I was taking a video of you right now you know the first frame I",
    "start": "768070",
    "end": "774010"
  },
  {
    "text": "would have to send everything I see I'd have to compress it only using information within the first frame sort of like I just a JPEG picture just a",
    "start": "774010",
    "end": "780190"
  },
  {
    "text": "snapshot but on the second frame what I can tell that what the encoder can tell",
    "start": "780190",
    "end": "785530"
  },
  {
    "text": "the decoder is hey remember that frame I just sent you it's gonna be very similar so for this little square of the frame",
    "start": "785530",
    "end": "790870"
  },
  {
    "text": "it's gonna be exactly the same and for this little square is almost the frame would just move it up down one pixel into the left a half pix",
    "start": "790870",
    "end": "796960"
  },
  {
    "text": "in the next frame it's almost the same but I'm gonna add this residue to it and that's how the video compression works is by exploiting the correlation between",
    "start": "796960",
    "end": "803770"
  },
  {
    "text": "the adjacent frames and that it's called motion compensated prediction turns out to be extremely powerful so in a typical",
    "start": "803770",
    "end": "810610"
  },
  {
    "text": "4k or virtual reality stream the first frame the one that stands by itself is",
    "start": "810610",
    "end": "815709"
  },
  {
    "text": "called a keyframe that consumes about a megabyte in a typical video and the",
    "start": "815709",
    "end": "820810"
  },
  {
    "text": "second frame and the subsequent frames is 40 times smaller it's like 25 kilobytes each so there's a considerable",
    "start": "820810",
    "end": "827940"
  },
  {
    "text": "experience see the correlation between adjacent frames and it's the search for those correlations finding the most",
    "start": "827940",
    "end": "834070"
  },
  {
    "text": "concise way to express the difference between adjacent frames that consumes most of the CPU of a video compression",
    "start": "834070",
    "end": "839560"
  },
  {
    "text": "engine just finding the what is the correlation these slides are all online you can I can they're all they're not a",
    "start": "839560",
    "end": "847029"
  },
  {
    "text": "secret so the interface that is a that is advertised by commercial video",
    "start": "847029",
    "end": "852850"
  },
  {
    "text": "encoders and decoders whether they're hardware software is this sort of stream to stream interface there's an encode function or a code module and the input",
    "start": "852850",
    "end": "859510"
  },
  {
    "text": "is a stream of pictures and the output is one keyframe that's like a megabyte and then a stream of inter frames that",
    "start": "859510",
    "end": "865959"
  },
  {
    "text": "make use of the previous frames and the contract is you can put that same sequence of frames one keyframe in a",
    "start": "865959",
    "end": "871839"
  },
  {
    "text": "bunch of inter frames in the decoder and get back a stream of reconstructed pictures that's the contract and this if",
    "start": "871839",
    "end": "876940"
  },
  {
    "text": "you you can go to Sony and buy a chip that implements this you can get it in software no matter how you get it this",
    "start": "876940",
    "end": "883330"
  },
  {
    "text": "is sort of the interface that you get the challenge is that it makes it harder to I mean if you're building a",
    "start": "883330",
    "end": "890080"
  },
  {
    "text": "high-definition television this is great there's a TV station broadcasting a stream of bits you show it on the screen it's perfect if you're trying to do",
    "start": "890080",
    "end": "895660"
  },
  {
    "text": "something interesting that manipulates the stator that paralyzes this is not the right abstraction it makes things",
    "start": "895660",
    "end": "901450"
  },
  {
    "text": "very challenging because let's say we have these 200 frames we want to encode them we end up with one key frame and",
    "start": "901450",
    "end": "906490"
  },
  {
    "text": "199 inter frames no problem serve one megabyte and then each one of these is 40th of that what happens we want to split it into sort of",
    "start": "906490",
    "end": "912760"
  },
  {
    "text": "20 different threads and do it in parallel well thread one encodes ten frames and it's with one key frame and",
    "start": "912760",
    "end": "918040"
  },
  {
    "text": "nine inter frames the same time thread 2 encodes of different 10 frames ends up with one key frame and 9 their frames",
    "start": "918040",
    "end": "923589"
  },
  {
    "text": "etc each one of these threads ends up contributing an extra megabyte to the compressed result and so the more",
    "start": "923589",
    "end": "930850"
  },
  {
    "text": "find the finer grain the parallelism the more keyframes they have to insert the more sort of state refreshes or",
    "start": "930850",
    "end": "936130"
  },
  {
    "text": "dependency boundaries and a sort of memory sense it's a guarantee that this chunk can stand alone it's not going to",
    "start": "936130",
    "end": "941829"
  },
  {
    "text": "depend on anything else the more memory dependency founder's we insert the worse the compression efficiency so it's not",
    "start": "941829",
    "end": "948430"
  },
  {
    "text": "really economical from a compression standpoint to have this finer finer grained parallelism so systems like YouTube for example they use a",
    "start": "948430",
    "end": "954100"
  },
  {
    "text": "granularity of 128 frames which is about what is five seconds or so that's sort",
    "start": "954100",
    "end": "959529"
  },
  {
    "text": "of how often they refresh the stream because more than that becomes more expensive so in order to exploit the",
    "start": "959529",
    "end": "966220"
  },
  {
    "text": "parallelism that lambda and this mew library make available to us we need a way to start encoding for midstream",
    "start": "966220",
    "end": "971649"
  },
  {
    "text": "we need a way to tell the encoder you know what you're encoding this tiny chunk here but don't start with a keyframe you need to start with",
    "start": "971649",
    "end": "977980"
  },
  {
    "text": "knowledge of the state of the decoder that you can't just assume it's in some initial state that you get to initialize",
    "start": "977980",
    "end": "983019"
  },
  {
    "text": "from scratch because that's just too expensive so to do this we had to be able to define what do we mean by the",
    "start": "983019",
    "end": "988029"
  },
  {
    "text": "state of the decoder we were on a Tele encoder start encoding from mid stream how do we define mid stream so we we",
    "start": "988029",
    "end": "993790"
  },
  {
    "text": "implemented a video codec for this Google vp8 format and we did it in a very rigorous way called explicit state",
    "start": "993790",
    "end": "999370"
  },
  {
    "text": "passing style which is a purely functional style so we had to define what does it mean the state of the",
    "start": "999370",
    "end": "1004439"
  },
  {
    "text": "decoder so we defined the video decoder as an otamatone as sort of a finite",
    "start": "1004439",
    "end": "1009990"
  },
  {
    "text": "state transducer so it starts out in some initial state and it consumes a key frame so this is a coded frame here this",
    "start": "1009990",
    "end": "1016560"
  },
  {
    "text": "line this is like bits on the coming over the coming over the wire it consumes a key frame and it traverses",
    "start": "1016560",
    "end": "1023040"
  },
  {
    "text": "and enters a new state this is the new state of the decoder then it consumes an inter frame it traverses and enters a",
    "start": "1023040",
    "end": "1028918"
  },
  {
    "text": "new state consumes inter frame traverses and enters a new state and every time it takes one of these state transitions it",
    "start": "1028919",
    "end": "1034438"
  },
  {
    "text": "spits out an image for display on the screen this is a formal definition of what the video decoder is doing and each",
    "start": "1034439",
    "end": "1041760"
  },
  {
    "text": "one of these inter frames is designed to be applied to a particular source state so there's an assumption in the inner",
    "start": "1041760",
    "end": "1046770"
  },
  {
    "text": "frame that these are the this is the information that's available so that's how we define the video decoder here's",
    "start": "1046770",
    "end": "1052470"
  },
  {
    "text": "actually the contents of the state it's a sort of Bunch it's a it's a few images that have been saved and some",
    "start": "1052470",
    "end": "1057750"
  },
  {
    "text": "probability tables for the arithmetic code that's the source state and then the target state is different imagers saved and maybe different probability",
    "start": "1057750",
    "end": "1063630"
  },
  {
    "text": "tables and there's some image that got sent off to the screen so what we implemented was a purely",
    "start": "1063630",
    "end": "1069960"
  },
  {
    "text": "functional version of a vp8 video coder and decoder so this is a standards-compliant vp8 encoder and",
    "start": "1069960",
    "end": "1076380"
  },
  {
    "text": "decoder but they're implemented in this way where there's no side effects and it's purely functional and it's in C++ I",
    "start": "1076380",
    "end": "1081990"
  },
  {
    "text": "don't want to suggest there's no like Haskell smart person stuff here it's very just normal normal programming but",
    "start": "1081990",
    "end": "1087510"
  },
  {
    "text": "it's done in a way with no side effects at purely functional so we have a decode function and the inputs are the frame",
    "start": "1087510",
    "end": "1093870"
  },
  {
    "text": "it's supposed to be decoding those are the compressed bits but also this explicit object that represents the state that it's in let's provide it",
    "start": "1093870",
    "end": "1099900"
  },
  {
    "text": "explicitly and the output is an image for display to the screen but also the new state for the next time that you're",
    "start": "1099900",
    "end": "1106920"
  },
  {
    "text": "gonna run the decoder so you could decode any video on YouTube this way any vp8 video on YouTube it'll work you just",
    "start": "1106920",
    "end": "1112290"
  },
  {
    "text": "have to keep applying this decode function over and over again and save this state object and every time you",
    "start": "1112290",
    "end": "1117360"
  },
  {
    "text": "apply the decoder put the new state object in to the code function and then it'll give you a new state object and then you run that the next time you sort",
    "start": "1117360",
    "end": "1123270"
  },
  {
    "text": "of thread it through like that so that's the purely functional decoder for vp8 and then we implemented the the",
    "start": "1123270",
    "end": "1130440"
  },
  {
    "text": "corresponding encoder which takes as explicitly the same state object now",
    "start": "1130440",
    "end": "1135840"
  },
  {
    "text": "that's the same kind of state object there's an image coming off the camera but we tell the encoder this is the state of the decoder that you can assume",
    "start": "1135840",
    "end": "1142080"
  },
  {
    "text": "that it's in and it produces a compressed frame an intra frame that relies on have the decoder having been",
    "start": "1142080",
    "end": "1148830"
  },
  {
    "text": "in that state this is a purely functional no side effects implementation of one step of a video",
    "start": "1148830",
    "end": "1154380"
  },
  {
    "text": "encoder and finally we implemented a transform that modifies compressed",
    "start": "1154380",
    "end": "1160680"
  },
  {
    "text": "frames into a different version of the same compressed frame we call this rebase so it takes an inter frame that",
    "start": "1160680",
    "end": "1168660"
  },
  {
    "text": "was intended for one state and it modifies it to be applicable to a slightly different state still targeting",
    "start": "1168660",
    "end": "1175800"
  },
  {
    "text": "the same image of the camera so this is kind of I can get in software development if I have some state of my",
    "start": "1175800",
    "end": "1181320"
  },
  {
    "text": "software repository and I want to make a whole bunch of changes I can hire a bunch of people on up work and ask a",
    "start": "1181320",
    "end": "1186720"
  },
  {
    "text": "thousand different people to make a thousand different changes in parallel and they all make a change on the same version of the repository and I end up",
    "start": "1186720",
    "end": "1192420"
  },
  {
    "text": "with a hundred get commits all dependent on the same repository state so now what do I need to do",
    "start": "1192420",
    "end": "1198830"
  },
  {
    "text": "well rebase was the answer I said before yeah rebased was the was the the hope",
    "start": "1199490",
    "end": "1204990"
  },
  {
    "text": "for answer I need to rebase these on top of each other produce a linear history I need to sort of cherry-pick them in and",
    "start": "1204990",
    "end": "1210270"
  },
  {
    "text": "turn these commits that were intended for one history one one state of the repository to be applicable to a different state a slightly different",
    "start": "1210270",
    "end": "1216240"
  },
  {
    "text": "state so that they could have a sort of linear history so that's the the third operation so we do that for these video",
    "start": "1216240",
    "end": "1221400"
  },
  {
    "text": "frames and that the hope here is that the rebus operation will be pretty cheap because once you already know what's in",
    "start": "1221400",
    "end": "1228180"
  },
  {
    "text": "the compress frame and you know the temporal correlations you know that this car and this frame is the same as this car in this frame you already have that",
    "start": "1228180",
    "end": "1233880"
  },
  {
    "text": "information so you just have to sort of recode these residues but it's a it's a small change so the algorithm we have",
    "start": "1233880",
    "end": "1239550"
  },
  {
    "text": "here is to try and do as much as possible in parallel and then do that rebasing which is a sort of linear step do that at the end in serial but that",
    "start": "1239550",
    "end": "1245880"
  },
  {
    "text": "supposed to be a cheap thing so we have the parallel step where we encode the tiny independent trunks and then a serial step where we erase the extra key",
    "start": "1245880",
    "end": "1252750"
  },
  {
    "text": "frames and we thread it all together so we end up with a playable video that doesn't have a lot of key frames even though it was encoded mostly in fine",
    "start": "1252750",
    "end": "1259230"
  },
  {
    "text": "grained parallelism so I'll show you what that looks like step one we have all these separate",
    "start": "1259230",
    "end": "1264450"
  },
  {
    "text": "threads we got five thousand threads running on a Tobias lambda all at the same time and each one downloads a few",
    "start": "1264450",
    "end": "1269700"
  },
  {
    "text": "frames let's say six frames of raw video from the camera X camera and then it",
    "start": "1269700",
    "end": "1274800"
  },
  {
    "text": "encodes them the sort of simple way the you know that using a production video encoder from Google we encode them and",
    "start": "1274800",
    "end": "1280890"
  },
  {
    "text": "we end up with one keyframe and then five inter frames in each chunk so now we actually we have a playable video you",
    "start": "1280890",
    "end": "1286890"
  },
  {
    "text": "could play this you want you start here you play this then you throw that state away start here play this throw that state away start here play this it'll",
    "start": "1286890",
    "end": "1292620"
  },
  {
    "text": "play it'll just be very big because every one of those key frames is like an extra megabyte so the question is can we",
    "start": "1292620",
    "end": "1298920"
  },
  {
    "text": "now rewrite those key frames and turn them into intro frames so we're gonna do that we're gonna have our encoder start from mid stream so we figure out what is",
    "start": "1298920",
    "end": "1306930"
  },
  {
    "text": "the exiting state of every chunk here the final state and we in parallel send",
    "start": "1306930",
    "end": "1312030"
  },
  {
    "text": "that to the next thread and then we have the next thread encode the first image in terms of that exiting state instead",
    "start": "1312030",
    "end": "1319350"
  },
  {
    "text": "of in terms of this sort of initial blank state in terms of the exiting state so it looks like that I'll go back",
    "start": "1319350",
    "end": "1324420"
  },
  {
    "text": "once this is what we had this is what we end up with so we run our encode function that was this the one time that",
    "start": "1324420",
    "end": "1330180"
  },
  {
    "text": "function is going to get invoked to an code the first image in terms of the exiting state of the previous chunk and",
    "start": "1330180",
    "end": "1336809"
  },
  {
    "text": "now what we have to do is just we don't quite have a playable video now because we play here where we ended up here now we're stuck there's no way to get up to",
    "start": "1336809",
    "end": "1342000"
  },
  {
    "text": "here so we now have to do is just rebase these states are very similar so just gonna rebase this chunk to be applicable",
    "start": "1342000",
    "end": "1347100"
  },
  {
    "text": "to this state like that and we do it again and we do it again that's a serial step so most of the work is done in",
    "start": "1347100",
    "end": "1352830"
  },
  {
    "text": "parallel but that rebase happens at the end so that's the algorithm and there's",
    "start": "1352830",
    "end": "1358230"
  },
  {
    "text": "a few different variations we can run different numbers of frames in each chunk and we can rebase and stitch different numbers of chunks together and",
    "start": "1358230",
    "end": "1363929"
  },
  {
    "text": "I'll show you an evaluation here so this is looking just at the compression efficiency so the questions as the bit",
    "start": "1363929",
    "end": "1369990"
  },
  {
    "text": "rate goes up how good does the quality go up so this is a standard metric structural similarity and so we can see",
    "start": "1369990",
    "end": "1375750"
  },
  {
    "text": "the best encoder you can get this is Google's VPX encoder with one thread no parallelism as the bit rate goes up",
    "start": "1375750",
    "end": "1382590"
  },
  {
    "text": "definitely the quality goes up and Google's multi-threaded encoder this is what the maximum parallelism that they",
    "start": "1382590",
    "end": "1387720"
  },
  {
    "text": "have you know there's a compromise because we end up not being able to predict across these boundaries it's still pretty good but that's this is the",
    "start": "1387720",
    "end": "1394080"
  },
  {
    "text": "best Google can do in a sort of multi-threaded way let's now let's look at the dumb hyper parallel way where we just encode",
    "start": "1394080",
    "end": "1400559"
  },
  {
    "text": "separate six frame chunks but we don't stitch them together so how it looks like this is not that good and now the",
    "start": "1400559",
    "end": "1409110"
  },
  {
    "text": "question is what if we encode the separate 6 6 train chunks but then we stitch 16 of them together in a row so we eliminate 15 key frames that looks",
    "start": "1409110",
    "end": "1416190"
  },
  {
    "text": "like this so we're able to get almost the same compression efficiency as a",
    "start": "1416190",
    "end": "1421200"
  },
  {
    "text": "function of bitrate almost the same qualities of function of bitrate as the Google encoder using this much finer",
    "start": "1421200",
    "end": "1427020"
  },
  {
    "text": "grained parallelism just the quarter of a second chunks so that's the compression efficiency now let's talk about how long it takes so that that",
    "start": "1427020",
    "end": "1433620"
  },
  {
    "text": "best best-of-breed encoder takes seven and a half hours so we should say we took a four to 15 minute video 4k video",
    "start": "1433620",
    "end": "1440059"
  },
  {
    "text": "uploaded it while we you know we tried to encode in various ways so this 15 minute 4k video the best best ever",
    "start": "1440059",
    "end": "1446549"
  },
  {
    "text": "encoder takes seven and a half hours to encode and that's on a fast Intel machine and the super parallel encoder",
    "start": "1446549",
    "end": "1451710"
  },
  {
    "text": "from Google takes two and a half hours we also looked at you know what if you sort of had access to all the parallelism you could imagine I mean",
    "start": "1451710",
    "end": "1457410"
  },
  {
    "text": "Google's got a ton of computers so let's just upload the video to YouTube and let them encode it and that takes 37 minutes",
    "start": "1457410",
    "end": "1463710"
  },
  {
    "text": "for their fastest encoder but that's only using this parallelism of every 128 frames so the question is",
    "start": "1463710",
    "end": "1469679"
  },
  {
    "text": "you know what if we use 20 times more parallelism we'll going from 128 frames we have six frame trunks and it ends up",
    "start": "1469679",
    "end": "1475379"
  },
  {
    "text": "about fourteen times faster so we're 20 X the parallelism about 14 X 2 speed",
    "start": "1475379",
    "end": "1481769"
  },
  {
    "text": "compared with sort of end n YouTube and this is sort of to make the video end and available on the web so the whole",
    "start": "1481769",
    "end": "1486899"
  },
  {
    "text": "pipeline so that's the sort of speed comparison so you know the the lessons",
    "start": "1486899",
    "end": "1492840"
  },
  {
    "text": "here number one these these lambdas can be used for a lot more than sort of asynchronous event handlers they can be used to these burst parallel tasks and they sort like",
    "start": "1492840",
    "end": "1499169"
  },
  {
    "text": "a supercomputer that you can access you know paying by the tenth of a second it's very powerful abstraction and I think it's going to allow us to paralyze",
    "start": "1499169",
    "end": "1505200"
  },
  {
    "text": "all kinds of jobs if we can express the job in a fine-grained parallel way which even with considerable overhead is gonna",
    "start": "1505200",
    "end": "1511889"
  },
  {
    "text": "have a huge benefit taking things that take an hour and being able to do them in one second it's just so powerful I mean that's sort of the lesson of all",
    "start": "1511889",
    "end": "1518070"
  },
  {
    "text": "interactive computing so I don't think it's gonna be just video editing and home movies but you know any sort of filter or 3d artists you know the people",
    "start": "1518070",
    "end": "1524429"
  },
  {
    "text": "at DreamWorks when they want to see you know should I move the light on Shrek's head from here to here it takes something like four hours to see the",
    "start": "1524429",
    "end": "1530220"
  },
  {
    "text": "result of that they have a very parallel operation they can probably render all of the movie in four hours but that's",
    "start": "1530220",
    "end": "1535289"
  },
  {
    "text": "because they have a cpu for each frame that doesn't help if you're trying to make an artistic decision about where should the light be on this particular",
    "start": "1535289",
    "end": "1541289"
  },
  {
    "text": "frame so being able to do that with massive parallelism or any sort of compilation which I'll talk about later if we have time or or interactive",
    "start": "1541289",
    "end": "1546450"
  },
  {
    "text": "machine learning or data visualization or any database query or Google search or genomics all of these applications I",
    "start": "1546450",
    "end": "1551909"
  },
  {
    "text": "believe may have a button on your screen it says okay I'll do this calculation you press this button it could take an",
    "start": "1551909",
    "end": "1557669"
  },
  {
    "text": "hour or press this one button I'll do it in one second it'll cost you nine cents I think we're sort of you know back to",
    "start": "1557669",
    "end": "1563249"
  },
  {
    "text": "the 60s where computing is going to be a sort of you know build by the millisecond utility but will have access",
    "start": "1563249",
    "end": "1568379"
  },
  {
    "text": "just like so much powerful paddles in the cloud if if we can treat application stage as a first-class object if we can",
    "start": "1568379",
    "end": "1574440"
  },
  {
    "text": "divide up our tasks with sufficient parallelism so that's sort of part one I'm gonna move on if there's no",
    "start": "1574440",
    "end": "1580710"
  },
  {
    "text": "questions yes sir was that from the key frame each",
    "start": "1580710",
    "end": "1586710"
  },
  {
    "text": "enter frame was gonna be smaller that",
    "start": "1586710",
    "end": "1594210"
  },
  {
    "text": "goes from what you had produced two what you need to start",
    "start": "1594210",
    "end": "1599620"
  },
  {
    "text": "from which may not be as dense as the inner frames your computing earlier",
    "start": "1599620",
    "end": "1606040"
  },
  {
    "text": "well that operation has access to the original image so we really just throw this keyframe away and we make a fresh inner frame make that fresh inner frame",
    "start": "1606040",
    "end": "1614820"
  },
  {
    "text": "working from both ends both what you started with after several steps of compression and what you need to start",
    "start": "1614820",
    "end": "1621850"
  },
  {
    "text": "with is something it would be ideally your keyframe for the next you're",
    "start": "1621850",
    "end": "1627190"
  },
  {
    "text": "throwing away a keyframe but you need to exactly reproduce that keyframe in order to have the starting",
    "start": "1627190",
    "end": "1633070"
  },
  {
    "text": "point that the next stage is all expected well it's not exact it's the sort of secret here is that when we",
    "start": "1633070",
    "end": "1639670"
  },
  {
    "text": "rebase is how we patch up those residue differences so it's it's not exactly to do it exactly would be very expensive",
    "start": "1639670",
    "end": "1646320"
  },
  {
    "text": "intermediate frames and have the same compression ratio as the inner frames",
    "start": "1646320",
    "end": "1653020"
  },
  {
    "text": "that you would have with the conventional technique you know it's a",
    "start": "1653020",
    "end": "1658390"
  },
  {
    "text": "hard question to answer that precisely because that inner frame is encoded with our encoder which he wrote and the",
    "start": "1658390",
    "end": "1663610"
  },
  {
    "text": "original inner frame was encoded with Google's encoder so to answer that question fairly would probably require more more work yes sir go back to that",
    "start": "1663610",
    "end": "1674070"
  },
  {
    "text": "illustration so the way you have it drawn here - and I could be completely",
    "start": "1674070",
    "end": "1680290"
  },
  {
    "text": "wrong it looks to me like it's a synchronous serial string well okay so",
    "start": "1680290",
    "end": "1685750"
  },
  {
    "text": "this part is parallel it's well alternately we end up with a playable video so yeah it is a the decoder will",
    "start": "1685750",
    "end": "1693340"
  },
  {
    "text": "download this and just play it in order what they so you're finding if thread",
    "start": "1693340",
    "end": "1701020"
  },
  {
    "text": "two needs an inter frame from thread one to start thread thread - how does thread",
    "start": "1701020",
    "end": "1706780"
  },
  {
    "text": "to start before thread one completes well so this so this part happens in",
    "start": "1706780",
    "end": "1713020"
  },
  {
    "text": "parallel and then this part happens in parallel where they share they're exiting state with the next thread and",
    "start": "1713020",
    "end": "1719230"
  },
  {
    "text": "then this part happens in parallel",
    "start": "1719230",
    "end": "1722669"
  },
  {
    "text": "all right what do we move on we can I can show you we have another graph on this that might help you at the end all",
    "start": "1724750",
    "end": "1730670"
  },
  {
    "text": "right so the second application of these sorts of techniques was something we did with Dropbox where they have a whole",
    "start": "1730670",
    "end": "1736940"
  },
  {
    "text": "bunch of JPEGs in Dropbox this is also last year so Dropbox has roughly one",
    "start": "1736940",
    "end": "1742520"
  },
  {
    "text": "exabyte of other people's data in it and all these things have been uploaded to Dropbox and the median number of times",
    "start": "1742520",
    "end": "1748820"
  },
  {
    "text": "that they get downloaded anyone want to guess zeroes is the answer most most",
    "start": "1748820",
    "end": "1755990"
  },
  {
    "text": "files uploaded are never downloaded most YouTube videos are never watched most people never tweet the Internet is",
    "start": "1755990",
    "end": "1761210"
  },
  {
    "text": "mostly just a ghost town so yes but they nonetheless have an exabyte of people's",
    "start": "1761210",
    "end": "1766340"
  },
  {
    "text": "data which they have pledged to not lose and about a third well more than a third of it like 40% was JPEG files people's",
    "start": "1766340",
    "end": "1772520"
  },
  {
    "text": "people's pictures a lot of these were taken with mobile cameras so you know if you imagine that's roughly 300 petabytes",
    "start": "1772520",
    "end": "1779030"
  },
  {
    "text": "of JPEG files the company is very incentivized to want to save back-end space so you imagine how how would they",
    "start": "1779030",
    "end": "1785390"
  },
  {
    "text": "do that and you could think well you know JPEG was standardized in 1989 and when people use JPEG they only use",
    "start": "1785390",
    "end": "1792560"
  },
  {
    "text": "techniques that were not patented in 1989 so maybe there's something over the last you know 30 years of compression 29",
    "start": "1792560",
    "end": "1799970"
  },
  {
    "text": "years a compression that have improved that we can use to recompress these JPEG files now the the simplest way to do it",
    "start": "1799970",
    "end": "1806120"
  },
  {
    "text": "would just be to decode the JPEG file and then recompress it into some more modern image format like htif or",
    "start": "1806120",
    "end": "1811580"
  },
  {
    "text": "whatever but you can't do that because people would be pretty angry if you change the contents of their files in",
    "start": "1811580",
    "end": "1816680"
  },
  {
    "text": "this distributed file sitting up someone has their jpeg and a git repository and you just go and change it and they say well now my hashes don't match you say",
    "start": "1816680",
    "end": "1822770"
  },
  {
    "text": "oh no sir it's better that doesn't fly in the file system business so you have to keep the exact same constant of file",
    "start": "1822770",
    "end": "1827840"
  },
  {
    "text": "but nonetheless you know if you look at how JPEG works there's a there's pixels",
    "start": "1827840",
    "end": "1833270"
  },
  {
    "text": "coming in and then there's a lossless transform that's applied there's a discrete cosine transform that's basically lost list but then those",
    "start": "1833270",
    "end": "1839960"
  },
  {
    "text": "coefficients the DCT coefficients are divided by a quantizer and that's the lossy step it's an integer division so they're divided and then rounded off to",
    "start": "1839960",
    "end": "1846020"
  },
  {
    "text": "the nearest integer that's the lossy step and then at the bottom of this pancake those coefficients are just written out using",
    "start": "1846020",
    "end": "1852080"
  },
  {
    "text": "a Huffman code that's a totally lossless operation so the theory would be let's just strip off this the",
    "start": "1852080",
    "end": "1857240"
  },
  {
    "text": "the pancake decode those coefficients we're not gonna change anything about the lossy part but we'll just Rhian code",
    "start": "1857240",
    "end": "1862670"
  },
  {
    "text": "the same coefficients using a smarter code maybe an arithmetic code something like that so people have done this and",
    "start": "1862670",
    "end": "1870740"
  },
  {
    "text": "we can look at how well these techniques work so here we're seeing the compression savings as the compression savings go up and here we'll see the",
    "start": "1870740",
    "end": "1877250"
  },
  {
    "text": "speed of the corresponding decompressor so the best algorithms are sort of up and to the right and you can look one",
    "start": "1877250",
    "end": "1882620"
  },
  {
    "text": "thing you can do is just rearrange the coefficients to make them more compressible so if you put numbers that",
    "start": "1882620",
    "end": "1887960"
  },
  {
    "text": "are similar or closer together jpg has this DC predicted Huffman code so it's better compression if the similar numbers are together so this is",
    "start": "1887960",
    "end": "1894770"
  },
  {
    "text": "one thing you can do jpg rescan that's really good but not so good compression efficiency you can also change the",
    "start": "1894770",
    "end": "1899870"
  },
  {
    "text": "Huffman code for an arithmetic code so arithmetic codes were known in the 80s but they were patented so nobody uses",
    "start": "1899870",
    "end": "1905270"
  },
  {
    "text": "them but we can use them now so you could imagine reading coding them as there's a tool that does that so that",
    "start": "1905270",
    "end": "1911480"
  },
  {
    "text": "has not as good decompression speed but you know the compression efficiency is better and anytime you have an",
    "start": "1911480",
    "end": "1917150"
  },
  {
    "text": "arithmetic code you know really what matters is how good can you predict whether the next bit is a 1 or a zero",
    "start": "1917150",
    "end": "1922430"
  },
  {
    "text": "because the way it works if I know for certainty that the next bit is a 1 and it is a 1 it consumes zero bits in the",
    "start": "1922430",
    "end": "1928220"
  },
  {
    "text": "output and if I know for certainty it's a 1 and it turns out to be a zero like a Trump election or something like that that no one expected then it's like",
    "start": "1928220",
    "end": "1934910"
  },
  {
    "text": "infinite bits in the output that's sort of the the Faustian bargain you make with these arithmetic codes the better that you can predict this is sort of a",
    "start": "1934910",
    "end": "1940610"
  },
  {
    "text": "machine learning problem the better you can predict the probability of the next bit being a zero one the better savings you can get when you're right and then",
    "start": "1940610",
    "end": "1947360"
  },
  {
    "text": "if you want to be crazy about it like this German guy you can do the world's most complicated arithmetic code you can",
    "start": "1947360",
    "end": "1953450"
  },
  {
    "text": "take all the coefficients of the file this global operation resource them in the most compressible order and then",
    "start": "1953450",
    "end": "1959060"
  },
  {
    "text": "have a huge model like a hundred thousand parameters in your machine learned model to predict whether the",
    "start": "1959060",
    "end": "1964070"
  },
  {
    "text": "next bit is gonna be a one or a zero and then use an arithmetic code based on that probability model to compress them so this gets about 23% compression",
    "start": "1964070",
    "end": "1970610"
  },
  {
    "text": "efficiency very slow to decode because it takes all these sort of global operations the challenge here is that in",
    "start": "1970610",
    "end": "1978140"
  },
  {
    "text": "the file system context you cannot have a global operation on a file because no part of the system of this distributed",
    "start": "1978140",
    "end": "1984560"
  },
  {
    "text": "file system ever sees a file at once instead these files are divided up into",
    "start": "1984560",
    "end": "1990230"
  },
  {
    "text": "small blocks content addressed blocks and they're stored redundantly so if you upload a",
    "start": "1990230",
    "end": "1995270"
  },
  {
    "text": "JPEG file to any of these services Dropbox and Google they're all sort of similar well I don't know that I'm",
    "start": "1995270",
    "end": "2001690"
  },
  {
    "text": "guessing Ivan I can tell you about Dropbox but the files are split up into",
    "start": "2001690",
    "end": "2007240"
  },
  {
    "text": "separate pieces and each piece is content address so it's addressed by the hash of its contents which means that they don't have to store duplicates you",
    "start": "2007240",
    "end": "2013330"
  },
  {
    "text": "have two people both upload a trunk that's all zeros you know they only have to store that once so when your computer",
    "start": "2013330",
    "end": "2018669"
  },
  {
    "text": "wants to retrieve a file from Dropbox it goes out to separate back in file servers and it asks for different chunks",
    "start": "2018669",
    "end": "2024520"
  },
  {
    "text": "different blocks of the file so you can imagine it would be nice to be able to compress them and turn each chunk into a",
    "start": "2024520",
    "end": "2030370"
  },
  {
    "text": "correspondingly compressed chunk we call this lepton a lepton file representing a",
    "start": "2030370",
    "end": "2035470"
  },
  {
    "text": "certain number of bytes of the original file but then when the client downloads it it ends up getting the original jpg",
    "start": "2035470",
    "end": "2040960"
  },
  {
    "text": "piece of the original file this is the way it would have to work because anything else either if somebody has to",
    "start": "2040960",
    "end": "2046539"
  },
  {
    "text": "know the whole JPEG file at once that's not gonna work and also if you want to send the lepton file down to the client",
    "start": "2046539",
    "end": "2051908"
  },
  {
    "text": "that's not going to work because there's no way to sort of upgrade every client in the world and they have like a million clients and so it has to be sort",
    "start": "2051909",
    "end": "2057220"
  },
  {
    "text": "of this transparent compression operating at the file system trunk level on each back-end file server because that's where they have the redundancy so",
    "start": "2057220",
    "end": "2064510"
  },
  {
    "text": "the challenge of this is that you have to be able to take the file and store and decode it in these independent",
    "start": "2064510",
    "end": "2070388"
  },
  {
    "text": "chunks and these chunks can start at any byte offset because they're sort of up to the file system people they're not up to me I mean the files have already been",
    "start": "2070389",
    "end": "2076118"
  },
  {
    "text": "sort of pre chunked and you know you have to be able to achieve like good decoding speeds so people have like",
    "start": "2076119",
    "end": "2081580"
  },
  {
    "text": "hundred megabit per second connection to the Internet you can't suddenly make the whole Dropbox ten times slower they",
    "start": "2081580",
    "end": "2087429"
  },
  {
    "text": "won't like that even if they never don't load the files when they do download they're gonna notice and it's very important not to lose data so you have",
    "start": "2087429",
    "end": "2094210"
  },
  {
    "text": "to make sure that this whole system is immune to any sort of pathological adversarial input every time the program",
    "start": "2094210",
    "end": "2099369"
  },
  {
    "text": "changes it was very important that it runs successfully and identically on a billion files each compiled with three different compilers and it has to be",
    "start": "2099369",
    "end": "2105760"
  },
  {
    "text": "completely deterministic because the thing that terrifies an organization like this is that they'll compress a",
    "start": "2105760",
    "end": "2111190"
  },
  {
    "text": "file someone will upload a file they'll compress it they'll double check at that time and decompress and make",
    "start": "2111190",
    "end": "2116200"
  },
  {
    "text": "sure they get the same thing they'll store it and then six months later the same user will try and download the file",
    "start": "2116200",
    "end": "2121660"
  },
  {
    "text": "they'll decompress it and the hash will not match anymore and then they're in trouble so it's that non-determinism",
    "start": "2121660",
    "end": "2127610"
  },
  {
    "text": "that they're very terrified by if there's just a bug when they go to compress it and then they decompress again if they don't get the same answer then they can write me a",
    "start": "2127610",
    "end": "2134240"
  },
  {
    "text": "nasty email and say you know we were never gonna work with Stanford again we're very unhappy with you but if they store the file because it worked once",
    "start": "2134240",
    "end": "2140900"
  },
  {
    "text": "and then it never works again then they've lost someone's data so that it has to be deterministic which is not",
    "start": "2140900",
    "end": "2146300"
  },
  {
    "text": "something that our programming languages really are very good at ensuring it's very hard to avoid non-deterministic non",
    "start": "2146300",
    "end": "2151520"
  },
  {
    "text": "determinism in a normal sort of programming language all right so the question is how does the file server",
    "start": "2151520",
    "end": "2157340"
  },
  {
    "text": "when the client goes to the backend file servers and requests pieces of a jpeg",
    "start": "2157340",
    "end": "2162860"
  },
  {
    "text": "file the file server has to decode it from our crazy format which is fine but then the hard part is it has to",
    "start": "2162860",
    "end": "2168560"
  },
  {
    "text": "re-encode it in this JPEG format and how does a file server star tree encoding for midstream that's sort of the",
    "start": "2168560",
    "end": "2176330"
  },
  {
    "text": "challenge the same challenge as before and has to be able to reincarnate stream",
    "start": "2176330",
    "end": "2181390"
  },
  {
    "text": "however it turns out to be much much easier than before because JPEG is really simple so people it's so easy to",
    "start": "2181390",
    "end": "2188000"
  },
  {
    "text": "be sort of scared of it oh it's this 1980s thing it's a Huffman code it's very complicated it turns out if you just sort of play with it it's not that",
    "start": "2188000",
    "end": "2193880"
  },
  {
    "text": "complicated so we formulated this JPEG encoder this DC predictive Huffman code err in explicit state passing style and then we",
    "start": "2193880",
    "end": "2200240"
  },
  {
    "text": "implemented it as a pure function in those side effects so there's a state object that evolves byte by byte as it's writing out the JPEG file and then once",
    "start": "2200240",
    "end": "2206870"
  },
  {
    "text": "you have that state object you can resume from anywhere even in the middle of a Huffman code word so Huffman code would be 17 bits you want to be able to",
    "start": "2206870",
    "end": "2212390"
  },
  {
    "text": "resume anywhere because the byte boundary might not be lined up with it so it turns out you can get that state down to 16 bytes it's not that",
    "start": "2212390",
    "end": "2219980"
  },
  {
    "text": "complicated it's the partial Huffman code word it's the one you're in the middle of sending you know you say well I've sent three bits of my seven bit",
    "start": "2219980",
    "end": "2226400"
  },
  {
    "text": "code word so you've got four bits left over that's one thing you have to save and then it's DC predicted so you have to save the prior DC values it turns out",
    "start": "2226400",
    "end": "2232790"
  },
  {
    "text": "to be not that complicated and you know you can just once it's functional you can have a regression test and say well give me the hardest file you have and",
    "start": "2232790",
    "end": "2238880"
  },
  {
    "text": "I'll just try freezing the state at every byte boundary and then resuming from there and I'll see if I get identical results and you know we got",
    "start": "2238880",
    "end": "2244880"
  },
  {
    "text": "that down to 16 bytes so once you have this sort of ability to back up and experiment with different choices it",
    "start": "2244880",
    "end": "2250490"
  },
  {
    "text": "turns out to be a lot of fun to make so we ended up doing this and we use the this ability to break the file up and",
    "start": "2250490",
    "end": "2256910"
  },
  {
    "text": "start encoding from midstream we use it for two purpose one is to comply with these file system block boundaries the second is just to",
    "start": "2256910",
    "end": "2262520"
  },
  {
    "text": "have parallelism even within a single file server we may as well just split it up into eight pieces so that we can decode it more quickly so I'll show you",
    "start": "2262520",
    "end": "2268640"
  },
  {
    "text": "the benefit of just the second choice just decoding a single block here again is the three terms of techniques and",
    "start": "2268640",
    "end": "2273950"
  },
  {
    "text": "here's the software that we published so this is sort of open source software it ends up being almost the same",
    "start": "2273950",
    "end": "2280550"
  },
  {
    "text": "compression efficiency is the crazy German guy not quite but almost but it's nine times faster and that's within a",
    "start": "2280550",
    "end": "2285740"
  },
  {
    "text": "single block so if you have two blocks it's you know it's 18 times faster so oh I this is the fun well just so it's",
    "start": "2285740",
    "end": "2292250"
  },
  {
    "text": "encoded 150 billion files it's 200 petabytes have been encoded saved like 46 petabytes and consider they have a",
    "start": "2292250",
    "end": "2298880"
  },
  {
    "text": "cluster running this program this one program consumes 300 kilowatts continuously compressing the back",
    "start": "2298880",
    "end": "2304220"
  },
  {
    "text": "catalogue and actually they suspected a bug at one point and they turned it off and the power consumption only dropped",
    "start": "2304220",
    "end": "2309500"
  },
  {
    "text": "to like buy half so the program is there's a cluster running that only runs the program that consumes 300 kilowatts",
    "start": "2309500",
    "end": "2315500"
  },
  {
    "text": "but half of that is just like the blinky lights on the front of the machine you consume half the power whether you're running the program or not so four",
    "start": "2315500",
    "end": "2322460"
  },
  {
    "text": "people actually make computers this seems stupid but anyway it incentivizes them to keep my program running all the",
    "start": "2322460",
    "end": "2327500"
  },
  {
    "text": "time so the lesson here is that a little bit of functional programming can go a very long way we're talking about 16 bytes of state here this is not that",
    "start": "2327500",
    "end": "2333740"
  },
  {
    "text": "hard to keep track of but by having it you can do all kinds of crazy things like 23% compression of hundreds of",
    "start": "2333740",
    "end": "2339470"
  },
  {
    "text": "petabytes of JPEG files fitting within an existing context where you don't control the boundaries all right okay so",
    "start": "2339470",
    "end": "2349100"
  },
  {
    "text": "great so that's how a company and a different company made you know money ok so let's talk about some of the work we",
    "start": "2349100",
    "end": "2354380"
  },
  {
    "text": "did where there's a get another benefit of functional programming or you know it's functional style of implementation",
    "start": "2354380",
    "end": "2359620"
  },
  {
    "text": "where we were able to make a video conferencing program well it works",
    "start": "2359620",
    "end": "2364760"
  },
  {
    "text": "better than ones like Skype or FaceTime or hangouts or WebRTC and the advantage here is that by having a functional",
    "start": "2364760",
    "end": "2369890"
  },
  {
    "text": "abstraction to the video codec we can explore the consequences of an execution path we can follow an execution path a",
    "start": "2369890",
    "end": "2375200"
  },
  {
    "text": "little bit and if we don't like it we can abandon it so we don't have to commit to an execution batch just to try it out we get that again by this sort of",
    "start": "2375200",
    "end": "2381380"
  },
  {
    "text": "purely functional abstraction so this is going to appear in this year's an STI and then the observation here is that",
    "start": "2381380",
    "end": "2386990"
  },
  {
    "text": "you know if you try videoconferencing Skype or FaceTime or hangouts or Chrome web RTC OH",
    "start": "2386990",
    "end": "2392390"
  },
  {
    "text": "for any sort of network where there's uncertainty or variability I don't people do this anyone ever video conference like when you're the car or",
    "start": "2392390",
    "end": "2398059"
  },
  {
    "text": "anything like that no one tries it if you try to do how will it work yeah yeah",
    "start": "2398059",
    "end": "2408140"
  },
  {
    "text": "anyone else had this experience people just don't even try I got on this topic actually when I was in grad school and",
    "start": "2408140",
    "end": "2413390"
  },
  {
    "text": "my adviser says I don't think there's a good topic you know it's a very well studied topic Skype and FaceTime and hangouts and they says I have to go home",
    "start": "2413390",
    "end": "2419720"
  },
  {
    "text": "and see my kids today so we're gonna have to continue this conversation over videoconference so he's skyping home through the streets of Boston with his",
    "start": "2419720",
    "end": "2425930"
  },
  {
    "text": "phone up like this and it was terrible I couldn't no one could understand and then is like okay maybe you you know it is a good topic to work on so one of the",
    "start": "2425930",
    "end": "2433880"
  },
  {
    "text": "problems here in our opinion is that the way these programs are architected is that companies are scared to sort of do",
    "start": "2433880",
    "end": "2438890"
  },
  {
    "text": "it all in-house so video codecs are thought to be a specialized thing you have to buy a chip to do it and",
    "start": "2438890",
    "end": "2443900"
  },
  {
    "text": "companies outsource that so when we once when I was in you know in grad school we developed a transport protocol which is",
    "start": "2443900",
    "end": "2450559"
  },
  {
    "text": "a way of sending data over the Internet and a way of estimating the available capacity of the network and we thought our transfer protocol was pretty cool",
    "start": "2450559",
    "end": "2456500"
  },
  {
    "text": "and we went to Skype and we said you know you should use it it'll be better than Skype they said well it doesn't",
    "start": "2456500",
    "end": "2461809"
  },
  {
    "text": "really work that way because we don't make the whole system our video codec don't tell anybody but we licensed it from Google because at that time Skype",
    "start": "2461809",
    "end": "2468710"
  },
  {
    "text": "was using vp8 they say we don't have the flexibility to combine these things in the way you're talking about we have",
    "start": "2468710",
    "end": "2474109"
  },
  {
    "text": "sort of separate modules we have a transfer forego that we make and we have a video code at that Google banks and they interface sort of at arm's length",
    "start": "2474109",
    "end": "2480259"
  },
  {
    "text": "it's a modular system and it's in art in my opinion it's too modular or the boundaries between the modules are just",
    "start": "2480259",
    "end": "2486349"
  },
  {
    "text": "not good yes sir well we don't have data",
    "start": "2486349",
    "end": "2493430"
  },
  {
    "text": "on that Braddock's only about two years old what was that no I don't I don't I don't",
    "start": "2493430",
    "end": "2500809"
  },
  {
    "text": "know so so this is sort of the current architecture that these two compiled then I bet when we went to Google and we",
    "start": "2500809",
    "end": "2506930"
  },
  {
    "text": "said okay you should use this transfer protocol because you make the video could I can they say well yes but as it turns out this is unhanged so we don't",
    "start": "2506930",
    "end": "2512720"
  },
  {
    "text": "make the whole transfer protocol we license that from an ax company called video and then later I was on a panel",
    "start": "2512720",
    "end": "2518029"
  },
  {
    "text": "discussion with the chief scientist of video and I complained and she said oh no no no Google we didn't give them our good stuff we just gave them our",
    "start": "2518029",
    "end": "2524089"
  },
  {
    "text": "consumer stuff you have to be testing our it's very hard to pin these companies down but ultimately I believe the",
    "start": "2524089",
    "end": "2529310"
  },
  {
    "text": "problem is that the architecture is too arm's length so what happens is that the",
    "start": "2529310",
    "end": "2534920"
  },
  {
    "text": "Transfer Protocol can tell the encoder what sort of bitrate to target there's an estimate that the network has a certain bitrate and these systems",
    "start": "2534920",
    "end": "2541430"
  },
  {
    "text": "started sort of in the world of ATM you know where you could reserve and isochronous deliveries channel over the network and get a particular bit rate",
    "start": "2541430",
    "end": "2548390"
  },
  {
    "text": "and this tell the encoder oK we've reserved one megabit per second encode at that and then the encoder based on",
    "start": "2548390",
    "end": "2553670"
  },
  {
    "text": "that chooses its encoding parameters so chooses a frame rate it chooses a quantizer you know some quality setting and then the transport protocol is stuck",
    "start": "2553670",
    "end": "2560630"
  },
  {
    "text": "sending whatever the encoder created even if it overshoots or undershoots that capacity the problem is that the",
    "start": "2560630",
    "end": "2566090"
  },
  {
    "text": "capacity on the internet can change you know it's not like ATM you don't have provision capacity can change and there's sort of too much latency between",
    "start": "2566090",
    "end": "2572750"
  },
  {
    "text": "the the encoder and the the transfer protocol to match the encoders the data",
    "start": "2572750",
    "end": "2578810"
  },
  {
    "text": "that the encoder is generating to the varying capacity of the network so what actually happens in WebRTC for example",
    "start": "2578810",
    "end": "2584770"
  },
  {
    "text": "if the encoder generates a frame that's too big they don't have a way to not",
    "start": "2584770",
    "end": "2590060"
  },
  {
    "text": "send it so the encoder the network thinks that the network the Transfer Protocol thinks the network can accommodate a frame of a certain size",
    "start": "2590060",
    "end": "2596180"
  },
  {
    "text": "the encoder for whatever reason generates a frame that's too big which can happen all the time these encoders on a single frame basis it's very hard",
    "start": "2596180",
    "end": "2601849"
  },
  {
    "text": "to target a particular compress frame size a priori because you don't know what the correlation is gonna be between",
    "start": "2601849",
    "end": "2606890"
  },
  {
    "text": "a frame and the previous frame until you sort of try to compress it so it's on a single frame base is very easy to overshoot or undershoot and that's why",
    "start": "2606890",
    "end": "2613190"
  },
  {
    "text": "these encoders specify an average bit rate they they don't tell you a particular frames gonna be a particular size nonetheless for the most part the",
    "start": "2613190",
    "end": "2619700"
  },
  {
    "text": "transfer protocol just has to send it even if it knows at that time that the frame is too big it still has to send it",
    "start": "2619700",
    "end": "2624859"
  },
  {
    "text": "and then it screws up the network it causes congestion and then they enter what they call you know they say well",
    "start": "2624859",
    "end": "2630109"
  },
  {
    "text": "now I know that I've screwed up the network so I'm gonna pause the input to the encoder I'm not going to encode any more frames for a while I'm gonna wait",
    "start": "2630109",
    "end": "2636830"
  },
  {
    "text": "for this congestion to clear but it would have been much better just to pause the output from the encoder for",
    "start": "2636830",
    "end": "2642710"
  },
  {
    "text": "the transfer protocol to tell encoder you know what you made a frame that's too big I'm not gonna send it I'm gonna throw that away I'm not gonna send that",
    "start": "2642710",
    "end": "2648560"
  },
  {
    "text": "and screw up the network try again encode another frame that'll be smaller send that one that would be nice but",
    "start": "2648560",
    "end": "2655280"
  },
  {
    "text": "once the encoder has encoded a frame you know it's it's gone through a state transition remember that's the interface encode a stream the",
    "start": "2655280",
    "end": "2661790"
  },
  {
    "text": "encoder has the state inside itself there's no way to tell it to sort of back up so that's that's what we wanted",
    "start": "2661790",
    "end": "2667130"
  },
  {
    "text": "to explore if you can explore an execution path without committing to it you know what sort of benefits can you",
    "start": "2667130",
    "end": "2672350"
  },
  {
    "text": "realise so if you build like a combined algorithm with one control loop so there's not there's not sort of a",
    "start": "2672350",
    "end": "2677870"
  },
  {
    "text": "framerate and a bitrate these are not separate there's one rate and every time through the control loop we call the",
    "start": "2677870",
    "end": "2683240"
  },
  {
    "text": "transfer protocol function we call the video codec function we say what should what the capacity of the network what size should the frame be we go with just",
    "start": "2683240",
    "end": "2689690"
  },
  {
    "text": "one control loop can we build an application where the video transmissions better match the varying capacity of the network so in the system",
    "start": "2689690",
    "end": "2696740"
  },
  {
    "text": "we have a video aware congestion control scheme a video aware transport protocol scheme and we have a sort of network",
    "start": "2696740",
    "end": "2702080"
  },
  {
    "text": "aware video codec and they're they're fused together to sort of better match the Volvic capacity so what we do this",
    "start": "2702080",
    "end": "2708440"
  },
  {
    "text": "is we it's the same video codec that I showed you in the first part of the talk it's there's that decode given state in",
    "start": "2708440",
    "end": "2713720"
  },
  {
    "text": "code given state that's the interface we don't use the rebase and every time we go through this control loop there's an",
    "start": "2713720",
    "end": "2719870"
  },
  {
    "text": "estimate from the network for the transfer protocol about what is the size that the frame should be how big do we",
    "start": "2719870",
    "end": "2725030"
  },
  {
    "text": "think the the network can accommodate right now because if you send more than that you can cause packet loss or you can cause a cue to accumulate you don't",
    "start": "2725030",
    "end": "2731510"
  },
  {
    "text": "want either of those to happen so there's some estimate about the size and every iteration of the control loop it",
    "start": "2731510",
    "end": "2736580"
  },
  {
    "text": "would be very nice if we could tell the codec you know we think the next frame should be 17 kilobytes so make it exactly 17 kilobytes there's no way that",
    "start": "2736580",
    "end": "2743120"
  },
  {
    "text": "codecs can't do that because to do that you have to sort of try to compress it and see how big it ends up being so instead we just we beat this with trying",
    "start": "2743120",
    "end": "2749870"
  },
  {
    "text": "multiple options so we tell the encoder you know what try a higher quality version than the one you just sent and try a lower quality version of the same",
    "start": "2749870",
    "end": "2756860"
  },
  {
    "text": "frame so we have one state that we assume the decoder is at we ask the encoder to try a higher quality encoding",
    "start": "2756860",
    "end": "2761990"
  },
  {
    "text": "and lower quality encoding both based on the same state and then the transfer protocol has options because it can look",
    "start": "2761990",
    "end": "2768080"
  },
  {
    "text": "at what the actual size is that it wants the frame to be and it can look at what the sizes turn out to be that it's",
    "start": "2768080",
    "end": "2773360"
  },
  {
    "text": "actually gotten from the encoder you know there's a frame that's 20 kilobytes is a frame that 10 kilobytes so it has three options it can send the twenty",
    "start": "2773360",
    "end": "2779480"
  },
  {
    "text": "kilobyte version it can send a ten kilobyte version or if it doesn't think the networks ready it can just say you",
    "start": "2779480",
    "end": "2784940"
  },
  {
    "text": "know what we're not going to do it we're gonna take them all again we're not gonna send a frame at all and we'll just go through the control loop another time",
    "start": "2784940",
    "end": "2790790"
  },
  {
    "text": "we'll encode a new frame whatever next comes off the can but we're gonna base it on still the",
    "start": "2790790",
    "end": "2795920"
  },
  {
    "text": "same state of the decoder it says if nothing ever happens just a total do-over so this turns out to be a very",
    "start": "2795920",
    "end": "2801410"
  },
  {
    "text": "powerful capability to have to explore execution states to the encoder without committing to any of them because it",
    "start": "2801410",
    "end": "2806750"
  },
  {
    "text": "means the framerate of the system is totally dynamic it's not 60 frames per second it's not 10 frames per second we",
    "start": "2806750",
    "end": "2812510"
  },
  {
    "text": "send a frame or don't send a frame at any moment based on whether we think the network can accommodate it",
    "start": "2812510",
    "end": "2817520"
  },
  {
    "text": "so then erect gets good we can send more frames and then it works bad we just skip more frames but ultimately there's no time evolution like a frame rate",
    "start": "2817520",
    "end": "2825230"
  },
  {
    "text": "that's evolving and forces the computer to send a frame when it doesn't want to you never send the frame unless the network is ready alright so how do we",
    "start": "2825230",
    "end": "2832280"
  },
  {
    "text": "evaluate this we were very proud of the evaluation testbed which the people in this room built this is the first time this appears to have ever been done is",
    "start": "2832280",
    "end": "2838670"
  },
  {
    "text": "that we have a comparative evaluation of different blackbox video compression system video conferencing systems in a",
    "start": "2838670",
    "end": "2845960"
  },
  {
    "text": "sort of codec agnostic way so the goal here was to have a totally reproducible video that we that we stream that we you",
    "start": "2845960",
    "end": "2851840"
  },
  {
    "text": "know reproducible web video conference a reproducible network conditions that we test over and we want to run the",
    "start": "2851840",
    "end": "2857359"
  },
  {
    "text": "unmodified versions of the system under test so I don't want to be changing Skype or FaceTime or hangouts or WebRTC I'm gonna run them unmodified and of",
    "start": "2857359",
    "end": "2863990"
  },
  {
    "text": "course our system and we'll just see how well they do and the target metrics are this sort of standard quality of experience metrics the delay what is the",
    "start": "2863990",
    "end": "2871190"
  },
  {
    "text": "delay between when something happens at the sender and the first time you see that the receiver and the quality which is the same structural similarity metric",
    "start": "2871190",
    "end": "2877490"
  },
  {
    "text": "so here's the actual system so we have a computer with a very cool and expensive",
    "start": "2877490",
    "end": "2883010"
  },
  {
    "text": "Blackmagic HDMI input output card so we have a synthetic and that synthetic we",
    "start": "2883010",
    "end": "2888080"
  },
  {
    "text": "have a real video conference that some of our colleagues generously provided so these are them pretending to have a Viacom what did you tell them to do you",
    "start": "2888080",
    "end": "2894800"
  },
  {
    "text": "say pretend I have a video conference ok so that's a pretend real video conference actual people and then it's",
    "start": "2894800",
    "end": "2901010"
  },
  {
    "text": "60 frames per second High Definition and then we put on each frame we put a barcode identifying exactly which frame",
    "start": "2901010",
    "end": "2907609"
  },
  {
    "text": "it is and this is a big barcode every dot there is 16 pixels across and the goal here is that the barcode will",
    "start": "2907609",
    "end": "2912980"
  },
  {
    "text": "survive any sort of lost video compression and video transmission so we barcode every frame 60 frames per second",
    "start": "2912980",
    "end": "2918380"
  },
  {
    "text": "and we play it outside this computer at this very rigorously timestamp way so this this card has a hardware timestamp",
    "start": "2918380",
    "end": "2924410"
  },
  {
    "text": "so it can tell us exactly sub millisecond granularity when did that frame leave the HDMI port and then it",
    "start": "2924410",
    "end": "2929480"
  },
  {
    "text": "goes into this box which is made by a company in downtown Palo Alto that converts HDMI into a pretend webcam so",
    "start": "2929480",
    "end": "2936230"
  },
  {
    "text": "HDMI comes in here and what comes out is a USB port that pretends to be a webcam and you can plug that USB port into a",
    "start": "2936230",
    "end": "2942650"
  },
  {
    "text": "Mac running FaceTime or a PC running Skype or a Linux machine running hangouts or our system and they all",
    "start": "2942650",
    "end": "2948980"
  },
  {
    "text": "appear to be a webcam so these computers think they're getting webcam input but they're really getting our are",
    "start": "2948980",
    "end": "2953990"
  },
  {
    "text": "reproducible test video with barcodes on it and it's all you know time stamp to the millisecond so then that computer",
    "start": "2953990",
    "end": "2960350"
  },
  {
    "text": "sends video running Skype or whatever it's running however it wants over a time varying network whose a trace of",
    "start": "2960350",
    "end": "2966170"
  },
  {
    "text": "sort of variations in capacity is synchronized to the video and then it goes to a receiver computer also running",
    "start": "2966170",
    "end": "2971390"
  },
  {
    "text": "the unmodified skype or facetime or hangouts we fullscreen the window on the receiver computer and it comes out the HDMI port on that computer back into the",
    "start": "2971390",
    "end": "2978800"
  },
  {
    "text": "same fancy card that the video came out of where it gets time-stamped on receipt by the hardware clock and that same PCE",
    "start": "2978800",
    "end": "2985040"
  },
  {
    "text": "car on the same time base that the video was sent at and then we just recognize the barcode which is really big so we",
    "start": "2985040",
    "end": "2991369"
  },
  {
    "text": "can do so we match up the corresponding frames when we sent that frame when we received the same frame then we can get",
    "start": "2991369",
    "end": "2996530"
  },
  {
    "text": "the frame by frame delay of every single frame and once we have the corresponding frames we can measure the quality the structure similarity between what we",
    "start": "2996530",
    "end": "3002560"
  },
  {
    "text": "sent and what we received so that's the benchmark so let's look at some Network measurements and then we'll look at some",
    "start": "3002560",
    "end": "3008109"
  },
  {
    "text": "video measurements so here's a network measurement we just looked at what happens when the network gets worse for a while and then it gets better for a",
    "start": "3008109",
    "end": "3014590"
  },
  {
    "text": "while so this shaded region is the network's capacity so it just gets worse and then it gets better and we can see",
    "start": "3014590",
    "end": "3020260"
  },
  {
    "text": "how the different transport algorithms behind these schemes follow or don't follow then our X bearing capacity so",
    "start": "3020260",
    "end": "3025450"
  },
  {
    "text": "salsa fee is the red line that's our scheme so you can see it sort of follows the networks capacity when it gets bad we're sending really bad video or maybe",
    "start": "3025450",
    "end": "3032740"
  },
  {
    "text": "no video at all and once it's good we sort of resume and you can look at Skype and web part you see they're a little",
    "start": "3032740",
    "end": "3038320"
  },
  {
    "text": "more stubborn so Skype tries to send it a particular rate and it continues trying to send at that rate even when",
    "start": "3038320",
    "end": "3043720"
  },
  {
    "text": "the network has fallen out beneath it and there used to be a mentality well there still is a mentality but you want",
    "start": "3043720",
    "end": "3049480"
  },
  {
    "text": "to have slowly varying video quality it's not good to change the user's video quality too rapidly and it makes sense",
    "start": "3049480",
    "end": "3056080"
  },
  {
    "text": "that maybe you don't want to increase the quality too rapidly because you know it could fall away again but it does not",
    "start": "3056080",
    "end": "3061180"
  },
  {
    "text": "work to try and slowly decrease the quality if the network has already fallen out beneath you because all you're doing by sending faster than that",
    "start": "3061180",
    "end": "3067270"
  },
  {
    "text": "we can accommodate is is causing packet loss or building up a queue it ultimately does not serve the Clawd of the user there's no reason to slow down",
    "start": "3067270",
    "end": "3073780"
  },
  {
    "text": "the decrease because you can look at what happens in Skype actually recovers here whatever our GCS is totally",
    "start": "3073780",
    "end": "3078940"
  },
  {
    "text": "confused and it's it's in it's like bad network mode it's just not sending anything at all so we can also look at a",
    "start": "3078940",
    "end": "3085030"
  },
  {
    "text": "video metric of delay here every dot here is a frame of video and we can see",
    "start": "3085030",
    "end": "3090460"
  },
  {
    "text": "the delay between when it's sent when it's received so WebRTC is sending basically oh sorry it's also fee is",
    "start": "3090460",
    "end": "3096130"
  },
  {
    "text": "sending basically constant delay and then when the network is bad the delay spikes up for bit and then it recovers",
    "start": "3096130",
    "end": "3102309"
  },
  {
    "text": "pretty quickly that's the red line Skype it doesn't slow down fast now if it builds up a big delay and it takes a",
    "start": "3102309",
    "end": "3107890"
  },
  {
    "text": "while to recover and WebRTC has starts out with a big delay it spikes and then it gets totally confused and sends a",
    "start": "3107890",
    "end": "3114309"
  },
  {
    "text": "bunch of frames here then there's nothing for about eight seconds it sends one frame here and then nothing for a while because it's in this bad network",
    "start": "3114309",
    "end": "3119920"
  },
  {
    "text": "mode this is Skype in chrome 62 okay",
    "start": "3119920",
    "end": "3125619"
  },
  {
    "text": "it's a recent it's a recent Chrome so we can also look at the quality metrics and",
    "start": "3125619",
    "end": "3131799"
  },
  {
    "text": "we see them here so here we see the video delay is on the x-axis and the best delay is again on the right side we",
    "start": "3131799",
    "end": "3136809"
  },
  {
    "text": "flip the x-axis and the quality structural similarity is here on the y-axis so the best schemes will be up",
    "start": "3136809",
    "end": "3142420"
  },
  {
    "text": "into the right so here's salsa fee which gets the best video quality and the best",
    "start": "3142420",
    "end": "3147609"
  },
  {
    "text": "delay of any of the sort of conventional schemes over a Verizon LTE type network trace so I'm not sure that I mean it it",
    "start": "3147609",
    "end": "3156190"
  },
  {
    "text": "surprised me that we're able to get better quality so maybe these schemes using very fancy video compression formats but vp9 SVC or h.264 a video",
    "start": "3156190",
    "end": "3164619"
  },
  {
    "text": "encoder written by one graduate student in three months for an outdated format is able to beat all of these schemes on",
    "start": "3164619",
    "end": "3171280"
  },
  {
    "text": "a video compression metric of structural similarity that suggests that",
    "start": "3171280",
    "end": "3178950"
  },
  {
    "text": "improvement in video codecs are not that helpful in this context the difference",
    "start": "3178950",
    "end": "3184089"
  },
  {
    "text": "between vp8 and vp9 SVC or one grad student versus Google it didn't cause Google to win this one but improvements",
    "start": "3184089",
    "end": "3191680"
  },
  {
    "text": "in video systems must have considerable low-hanging route if one research group building a",
    "start": "3191680",
    "end": "3197349"
  },
  {
    "text": "better system with a better architecture can outperform the best video codecs so this is over Verizon trace here's an 18",
    "start": "3197349",
    "end": "3204339"
  },
  {
    "text": "t trace again best quality and they're comparable delay to Skype",
    "start": "3204339",
    "end": "3209619"
  },
  {
    "text": "here's over a t-mobile trace again best quality lowest delay so I think this",
    "start": "3209619",
    "end": "3217150"
  },
  {
    "text": "this mode where we think of a video codec is a specialized thing that operates on streams and we don't ask for",
    "start": "3217150",
    "end": "3223089"
  },
  {
    "text": "the ability to introspect on its state or not even to inspect the state but just to be able to save and restore the state this is not a world you want to be",
    "start": "3223089",
    "end": "3229420"
  },
  {
    "text": "in every component in your system you want to be able to save and restore the state and talk about the state because",
    "start": "3229420",
    "end": "3235119"
  },
  {
    "text": "to treat these components to something foreign that you just have to live with oh the codec produced too big a frame when we have to send it anyway I mean",
    "start": "3235119",
    "end": "3241809"
  },
  {
    "text": "it's just it's you don't get good results you have to be able to reason about state and integrate these control",
    "start": "3241809",
    "end": "3247569"
  },
  {
    "text": "loops in order to get good quality results I think that's the lesson there that's a third benefit of the sort of functional programming paradigm alright",
    "start": "3247569",
    "end": "3254680"
  },
  {
    "text": "I'll take questions there and then we can move on to the fun demo yes well I I",
    "start": "3254680",
    "end": "3264910"
  },
  {
    "text": "mean this graph is using structure similarity as the video quality metric",
    "start": "3264910",
    "end": "3270239"
  },
  {
    "text": "well I think it's possible I mean we had this work as funded by Google I should say so I think if they had we go over",
    "start": "3277559",
    "end": "3284469"
  },
  {
    "text": "there and we presented this work at Google I think if they had a you know a better metric for us they would tell us I mean what do you what did they say",
    "start": "3284469",
    "end": "3290289"
  },
  {
    "text": "when we they seem to believe SM is a reasonable metric you know they do care",
    "start": "3290289",
    "end": "3296890"
  },
  {
    "text": "about compatibility with hardware codecs I mean that you know that to implement",
    "start": "3296890",
    "end": "3302619"
  },
  {
    "text": "this you need the interface to the codec to be able to save and restore the state so hangouts is supposed to work on sort of every cell phone in the world I think",
    "start": "3302619",
    "end": "3308469"
  },
  {
    "text": "that is one limit tape there's a major limitation of the scheme is that it you need the interface from the codec so",
    "start": "3308469",
    "end": "3317170"
  },
  {
    "text": "I'll just quickly talk about the last thing we're do which is trying to outsource sort of any do I have it here so if it observes any calculation to the",
    "start": "3317170",
    "end": "3323979"
  },
  {
    "text": "cloud so take just a universal abstraction to take anything you might do on your computer on your laptop and extend it to the",
    "start": "3323979",
    "end": "3330640"
  },
  {
    "text": "cloud so they sort of laptop extension workloads and we talk abouts a little bit but you know what are the things you spend CPU time on your computer it's",
    "start": "3330640",
    "end": "3336490"
  },
  {
    "text": "like compilation maybe searching for things maybe analysis j-john analyze 20",
    "start": "3336490",
    "end": "3342220"
  },
  {
    "text": "terabytes of Antarctic and Arctic radar images that would how long can that take",
    "start": "3342220",
    "end": "3348720"
  },
  {
    "text": "yeah take a long time so anything interesting that you want to do with a",
    "start": "3348720",
    "end": "3353740"
  },
  {
    "text": "computer that could take a long time what if there were sort of common interchange format an intermediate representation for the cloud kind of",
    "start": "3353740",
    "end": "3359890"
  },
  {
    "text": "like the LLVM ir or like halide some way of declaratively specifying a lambda expression for the calculation that you",
    "start": "3359890",
    "end": "3366609"
  },
  {
    "text": "want to do and then let's talk about evaluating it maybe locally but maybe also across 10,000 lambdas or 10,000",
    "start": "3366609",
    "end": "3372280"
  },
  {
    "text": "open whisks or maybe if everything's purely functional reproducible maybe we just sort of throw it up on Reddit and",
    "start": "3372280",
    "end": "3378130"
  },
  {
    "text": "let anyone evaluate the functions you know any way anyone could volunteer that was maybe too much for this group anyway anyone could evaluate the functions and",
    "start": "3378130",
    "end": "3384280"
  },
  {
    "text": "give us the answer as long as it's deterministic it doesn't really matter who's doing it it doesn't have to be Amazon it could be anybody so that's the",
    "start": "3384280",
    "end": "3390640"
  },
  {
    "text": "idea so we've done this sort of four compilation and four video compression so I want to see if we can get the demo to work so we have this system here so",
    "start": "3390640",
    "end": "3396730"
  },
  {
    "text": "here I have ffmpeg which is a video compression tool it takes about 10",
    "start": "3396730",
    "end": "3402339"
  },
  {
    "text": "minutes to compile so I think if I just did make dash j8 let's see here all right so here's here's what it",
    "start": "3402339",
    "end": "3407500"
  },
  {
    "text": "normally looks like just take so long I'm not gonna make you sit here for 10 well it's 10 minutes on a single core so it'd take like well this is a 4 core",
    "start": "3407500",
    "end": "3414849"
  },
  {
    "text": "machine anyway I'm not gonna make you sit for there but that's this what compiling looks like what if instead we try and take this make file and infer a",
    "start": "3414849",
    "end": "3422950"
  },
  {
    "text": "lambda expression infer a very big expression of nested functions that have",
    "start": "3422950",
    "end": "3429339"
  },
  {
    "text": "to be evaluated to ultimately produce a program called ffmpeg so that's basically what we've built and the thing",
    "start": "3429339",
    "end": "3435849"
  },
  {
    "text": "that we didn't want to do is have to learn anything about make files because that's super unpleasant you can imagine",
    "start": "3435849",
    "end": "3442720"
  },
  {
    "text": "we're gonna read the make file and we're gonna infer the functional dependencies between stages and that's not so much",
    "start": "3442720",
    "end": "3448720"
  },
  {
    "text": "fun because you know no other leaving likes make files I mean there's people who do ninja and people who basil and",
    "start": "3448720",
    "end": "3454059"
  },
  {
    "text": "people do see make you don't want to sort of tie to a particular make file or something like that so the question is",
    "start": "3454059",
    "end": "3459130"
  },
  {
    "text": "can we infer or reverse-engineer the functional dependency one of these eunuch C tasks just by sort",
    "start": "3459130",
    "end": "3465219"
  },
  {
    "text": "of pretending to actually do it so that's what we built I'll make sure you",
    "start": "3465219",
    "end": "3470469"
  },
  {
    "text": "should we do the hello world let's try the hello world okay so here I have a we have a hello world program just see the",
    "start": "3470469",
    "end": "3478900"
  },
  {
    "text": "last time I gave this talk hi III okay so here we've got hello world and I",
    "start": "3478900",
    "end": "3484719"
  },
  {
    "text": "could compile it to hello like that what if we fake do it what if we pretend to",
    "start": "3484719",
    "end": "3492579"
  },
  {
    "text": "do it so we have a program here called GG so our system is called GG it's the",
    "start": "3492579",
    "end": "3497709"
  },
  {
    "text": "Stanford builder George Goodman is the freemason who built Stanford University you can see his name in the in the main",
    "start": "3497709",
    "end": "3503499"
  },
  {
    "text": "quad so we have the the Stanford builder we're gonna infer the functional dependencies of a compilation process so",
    "start": "3503499",
    "end": "3509229"
  },
  {
    "text": "I'm just gonna prepend this GG and fir here to the command line and it it pretends to compile but it doesn't",
    "start": "3509229",
    "end": "3516969"
  },
  {
    "text": "really compile it runs it through something we call model substitution so",
    "start": "3516969",
    "end": "3522279"
  },
  {
    "text": "we run not the real GC we were GCC excuse me we're on a model of GCC and this model has to figure out for every",
    "start": "3522279",
    "end": "3528549"
  },
  {
    "text": "stage and the real compilation so what we just did here was we pre processed it we compiled it we assembled it and we",
    "start": "3528549",
    "end": "3534099"
  },
  {
    "text": "linked it to produce this file called hello for every step we need to be able to model the functional dependencies of",
    "start": "3534099",
    "end": "3541749"
  },
  {
    "text": "that step so what does it take to pre-process a file what do you have to know you need to know what's in the file",
    "start": "3541749",
    "end": "3550390"
  },
  {
    "text": "you need to know what's in all the header files that the file includes and that's most of it you also need to know",
    "start": "3550390",
    "end": "3555519"
  },
  {
    "text": "like what is the preprocessor itself you know so if you had that information what's in hello dot see what is in the",
    "start": "3555519",
    "end": "3563259"
  },
  {
    "text": "preprocessor itself you know which version are using and then what's in all the header files that it's going to include or at least what which header files does it want to include that would",
    "start": "3563259",
    "end": "3570789"
  },
  {
    "text": "be enough there's the functional dependencies and then you could run that anywhere what does it take to compile a file you basically just need to compile",
    "start": "3570789",
    "end": "3578799"
  },
  {
    "text": "the pre-processed input and the compiler and you run the compiler in the pre process input and that produces the",
    "start": "3578799",
    "end": "3584229"
  },
  {
    "text": "assembly output and then to assemble a file you need the assembly output and the assembler you run the assembler on",
    "start": "3584229",
    "end": "3590199"
  },
  {
    "text": "the compiled output the assembled output compiled output and that produces the object file",
    "start": "3590199",
    "end": "3596620"
  },
  {
    "text": "so what is this term when we take a program and we apply it to data that's sort of like a valent apply right it's",
    "start": "3596620",
    "end": "3603460"
  },
  {
    "text": "like the list community coming back that we heard about earlier you can't you can't keep us down except this is all",
    "start": "3603460",
    "end": "3608800"
  },
  {
    "text": "just C++ it's not smart people were involved in this so so that's so what we",
    "start": "3608800",
    "end": "3614380"
  },
  {
    "text": "can see is the output here it did write a file called hello but if we look at it",
    "start": "3614380",
    "end": "3619570"
  },
  {
    "text": "it's not a real thing it's a funk it is a memorialization of",
    "start": "3619570",
    "end": "3626470"
  },
  {
    "text": "what would have to happen if we ever wanted to actually evaluate the output of that step of functions so we have a",
    "start": "3626470",
    "end": "3633640"
  },
  {
    "text": "hash here and we can describe it and",
    "start": "3633640",
    "end": "3638880"
  },
  {
    "text": "what it tells us is that okay there's some function that's gonna be applied the executable is called GCC and here's",
    "start": "3638880",
    "end": "3645040"
  },
  {
    "text": "the exact hash of that executable so it's totally content addressed and then here are the data dependencies here are",
    "start": "3645040",
    "end": "3651040"
  },
  {
    "text": "the arguments to the function one is the contents of GCC here's some helper program that GCC depends on here's the",
    "start": "3651040",
    "end": "3656830"
  },
  {
    "text": "linker here is an anonymous dependency that is another thunk so what is",
    "start": "3656830",
    "end": "3664600"
  },
  {
    "text": "happening here this is the last step we're linking it so the inputs to the linker are the object file and then the linker itself and the linker runs on the",
    "start": "3664600",
    "end": "3670930"
  },
  {
    "text": "object file so the object file is not known at this stage because that's also a function of pension this is like F of",
    "start": "3670930",
    "end": "3676600"
  },
  {
    "text": "G of H etc so this is the output of an intermediate stage in the compilation and we can look at this thunk - Gigi",
    "start": "3676600",
    "end": "3683560"
  },
  {
    "text": "describe this guy so this is the assembly step so we have the assembler",
    "start": "3683560",
    "end": "3690250"
  },
  {
    "text": "in here and the input is the compiled output and the the output in assembling",
    "start": "3690250",
    "end": "3696730"
  },
  {
    "text": "the output is the object file etc so we have this chain of dependencies so that's for hello world but we can run",
    "start": "3696730",
    "end": "3702880"
  },
  {
    "text": "any sort of build process and as long as everything hard that it tries to do has a model we can extract a functional tree",
    "start": "3702880",
    "end": "3710170"
  },
  {
    "text": "a lambda expression from what was a very messy and complicated thing so let's try with ffmpeg I'll make clean here I hope",
    "start": "3710170",
    "end": "3716350"
  },
  {
    "text": "this works so we'll dig in Gigi infer make so this is gonna run a whole bunch of GCC's I",
    "start": "3716350",
    "end": "3722920"
  },
  {
    "text": "shoot it out with the time let's do it we'll do it the time try to impress you okay time so this is gonna run a whole",
    "start": "3722920",
    "end": "3729910"
  },
  {
    "text": "of compiles and links and preprocessors and all kinds of crazy things but it doesn't really run them it just runs the",
    "start": "3729910",
    "end": "3735700"
  },
  {
    "text": "models and that took 3.8 seconds and at the end we have something called ffmpeg",
    "start": "3735700",
    "end": "3741420"
  },
  {
    "text": "but but if it's just a thunk and I if I wanted to force the thunk I could run",
    "start": "3741420",
    "end": "3746559"
  },
  {
    "text": "the shell script and it would compile in lambda in the cloud and then produce an executable and then download executable",
    "start": "3746559",
    "end": "3752950"
  },
  {
    "text": "and then run it so let's let's do that and I'm gonna do it explicitly so we can see the UI what we'll see if it works we",
    "start": "3752950",
    "end": "3760270"
  },
  {
    "text": "don't have the best failure handling right now but it's purely functional so if it crashes we just control C and do",
    "start": "3760270",
    "end": "3766089"
  },
  {
    "text": "it again it picks up from where I left off so it's a bonus okay well how about how",
    "start": "3766089",
    "end": "3771339"
  },
  {
    "text": "power is to be two hundred or two hundred okay here we go all right ready",
    "start": "3771339",
    "end": "3781078"
  },
  {
    "text": "okay done 300k there we go okay so we see here there's two hundred pending",
    "start": "3781380",
    "end": "3788589"
  },
  {
    "text": "lambdas here's the number that are done there's five thousand separate functions to compute and we've spent six cents",
    "start": "3788589",
    "end": "3793980"
  },
  {
    "text": "seven cents eight cents we're 90% done",
    "start": "3793980",
    "end": "3800039"
  },
  {
    "text": "all right now we get down to the final linking stage this is kind of on dolls law coming to bite us last one come on",
    "start": "3800039",
    "end": "3806859"
  },
  {
    "text": "oh I wish this had worked in my last more important venue for giving this",
    "start": "3806859",
    "end": "3813400"
  },
  {
    "text": "talk anyway it worked and we can run it and hey it's ffmpeg just built in the",
    "start": "3813400",
    "end": "3818829"
  },
  {
    "text": "cloud so that was a deterministic evaluation of a lambda expression that had 5,180 sub expressions totally",
    "start": "3818829",
    "end": "3826990"
  },
  {
    "text": "functional and that lambda expression was learned by running the make file through this model substitution where",
    "start": "3826990",
    "end": "3832599"
  },
  {
    "text": "every stage we didn't run the real stage we ran it a fake version that sort of inferred what to do so we believe at least I hope that this kind of",
    "start": "3832599",
    "end": "3839200"
  },
  {
    "text": "abstraction can allow people to outsource anything you might do on your laptop if you can divide into lots of tiny pieces and write it out in this",
    "start": "3839200",
    "end": "3845230"
  },
  {
    "text": "sort of JSON format which is not that hard outsource it to lambda or Open whisk or a family of ec2 machines or",
    "start": "3845230",
    "end": "3850809"
  },
  {
    "text": "maybe even crazy people on reddit because once it's all deterministic you can run the calculation anywhere it's",
    "start": "3850809",
    "end": "3856569"
  },
  {
    "text": "deterministic and Condon dressed and you can even share the memoization cache so when I've evaluated this function to be",
    "start": "3856569",
    "end": "3862210"
  },
  {
    "text": "something else facts try that make clean Gigi Gigi in fur",
    "start": "3862210",
    "end": "3869410"
  },
  {
    "text": "make - J okay and now let's GG forced SJ",
    "start": "3869410",
    "end": "3877060"
  },
  {
    "text": "200 SS f f/a okay ready see it was memorized so all those 5,180",
    "start": "3877060",
    "end": "3883770"
  },
  {
    "text": "sub-expressions have a have a name they have a hash and we've memorized that that that thunk when forced evaluates to",
    "start": "3883770",
    "end": "3890800"
  },
  {
    "text": "a certain output so we can resolve the whole thing from the cache so no two people ever have to evaluate the same function twice so this is kind of the",
    "start": "3890800",
    "end": "3897580"
  },
  {
    "text": "world I want to live in where you don't depend on Amazon or IBM or anyone to be honest you express you things in functional format and then you can have",
    "start": "3897580",
    "end": "3903880"
  },
  {
    "text": "sourcing to anyone you want and it's totally interactive and fast and you can run 5,000 jobs in like 10 seconds so",
    "start": "3903880",
    "end": "3909210"
  },
  {
    "text": "ultimately I believe that sort of granular functional interfaces of computing resources this is the way we",
    "start": "3909210",
    "end": "3914740"
  },
  {
    "text": "got to go anything that works on streams or anything that's big and scary we got to blow that up weak the point of being a hacker is to not be scared anymore and",
    "start": "3914740",
    "end": "3921580"
  },
  {
    "text": "if you divide things into small enough pieces no one is scary it is worth refactoring these interfaces to the codec or the compiler or TCP and machine",
    "start": "3921580",
    "end": "3928119"
  },
  {
    "text": "learning whatever we're most sort of scared of is most grody some neural network blow it up functions and the ability to sort of",
    "start": "3928119",
    "end": "3934330"
  },
  {
    "text": "save and restore program State it turns out to be a very powerful tool even if you can't understand what's in the state just being able to do that very powerful",
    "start": "3934330",
    "end": "3940270"
  },
  {
    "text": "I showed you that for video encoding where the benefit of the functional style was paralyzing in tiny little pieces I showed it for lepton where the",
    "start": "3940270",
    "end": "3946990"
  },
  {
    "text": "benefit is being able to match the arbitrary boundaries of a distributed file system I showed it to you for salsa fee where it's being able to explore an",
    "start": "3946990",
    "end": "3953440"
  },
  {
    "text": "execution path without committing to it so we can match the video codecs generated bit stream to the network's",
    "start": "3953440",
    "end": "3960310"
  },
  {
    "text": "bearing capacity and I showed it for hopefully everything sort of compilation of everything in the cloud for pennies thank you very much",
    "start": "3960310",
    "end": "3966590"
  },
  {
    "text": "[Applause]",
    "start": "3966590",
    "end": "3972169"
  },
  {
    "text": "you",
    "start": "3977019",
    "end": "3979079"
  }
]