[
  {
    "text": "Our last topic for Chapter 1 is complexity.",
    "start": "3980",
    "end": "8295"
  },
  {
    "text": "And that's a- it's gon- it's a very rough measure",
    "start": "8295",
    "end": "10845"
  },
  {
    "text": "of how- how long does it take on a computer,",
    "start": "10845",
    "end": "13740"
  },
  {
    "text": "uh, to carry out, uh, a certain operation.",
    "start": "13740",
    "end": "16215"
  },
  {
    "text": "It's something we'll be talking about,",
    "start": "16215",
    "end": "18090"
  },
  {
    "text": "uh, throughout the course.",
    "start": "18090",
    "end": "20040"
  },
  {
    "text": "Okay. So the way this works is computers store,",
    "start": "20040",
    "end": "25680"
  },
  {
    "text": "uh, a real number in floating point format.",
    "start": "25680",
    "end": "29390"
  },
  {
    "text": "Now, in this course, you don't have to know what that is.",
    "start": "29390",
    "end": "32134"
  },
  {
    "text": "Uh, but what it is, is it- it allows you it",
    "start": "32135",
    "end": "34789"
  },
  {
    "text": "doesn't- it doesn't represent the number exactly,",
    "start": "34790",
    "end": "38210"
  },
  {
    "text": "but it's very, very close.",
    "start": "38210",
    "end": "40460"
  },
  {
    "text": "So for example, it wouldn't- it wouldn't store the number one-third exactly as one-third,",
    "start": "40460",
    "end": "44315"
  },
  {
    "text": "but it would store it as like 0.33333 with about 15 threes in there, right?",
    "start": "44315",
    "end": "49519"
  },
  {
    "text": "Which is for all practical purposes, close enough.",
    "start": "49520",
    "end": "52455"
  },
  {
    "text": "Okay. Now, when you take a- a basic,",
    "start": "52455",
    "end": "55460"
  },
  {
    "text": "when you ask a computer to carry out a basic operation on two floating point numbers,",
    "start": "55460",
    "end": "59840"
  },
  {
    "text": "like you ask it to add or multiply them or divide them or subtract.",
    "start": "59840",
    "end": "64745"
  },
  {
    "text": "Now that's called a floating point operation or,",
    "start": "64745",
    "end": "67355"
  },
  {
    "text": "and the slang for that is flops.",
    "start": "67355",
    "end": "69305"
  },
  {
    "text": "That's a flop. A single flop is adding two numbers on a computer.",
    "start": "69305",
    "end": "73365"
  },
  {
    "text": "Okay. Now when you have an algorithm or an operation and you wanna, uh,",
    "start": "73365",
    "end": "78485"
  },
  {
    "text": "what you do is the- the complexity of it, uh,",
    "start": "78485",
    "end": "82160"
  },
  {
    "text": "is judged by simply counting up the total number of flops,",
    "start": "82160",
    "end": "85460"
  },
  {
    "text": "uh, that it's- that you're going to need to do.",
    "start": "85460",
    "end": "88275"
  },
  {
    "text": "Uh, so for example, you might count the number, uh,",
    "start": "88275",
    "end": "91275"
  },
  {
    "text": "both times you have to multiply two numbers, add two numbers,",
    "start": "91275",
    "end": "94160"
  },
  {
    "text": "subtract or divide them,",
    "start": "94160",
    "end": "95675"
  },
  {
    "text": "and you add up all those numbers together.",
    "start": "95675",
    "end": "97670"
  },
  {
    "text": "And that- that's called the flop count for your, uh, operation.",
    "start": "97670",
    "end": "102659"
  },
  {
    "text": "Okay. Now, it turns out this can be very grossly approximated because implicit in",
    "start": "102660",
    "end": "108020"
  },
  {
    "text": "this is the idea that adding two numbers comes at",
    "start": "108020",
    "end": "110600"
  },
  {
    "text": "the same cost is dividing two numbers, which is false.",
    "start": "110600",
    "end": "113299"
  },
  {
    "text": "It actually takes longer to divide two numbers.",
    "start": "113300",
    "end": "115945"
  },
  {
    "text": "However, still, this is just meant to give you a rough idea",
    "start": "115945",
    "end": "119405"
  },
  {
    "text": "of whether [NOISE] carrying out an operation is going to cost you.",
    "start": "119405",
    "end": "122960"
  },
  {
    "text": "Is it going to be done in way under a second- a second,",
    "start": "122960",
    "end": "125750"
  },
  {
    "text": "a minute, an hour, a day.",
    "start": "125750",
    "end": "127790"
  },
  {
    "text": "That's- that's really what we're aiming for with this very crude estimate.",
    "start": "127790",
    "end": "132100"
  },
  {
    "text": "Okay. Now a crude approximation",
    "start": "132100",
    "end": "135275"
  },
  {
    "text": "of how long at times it takes for a computer to actually carry out,",
    "start": "135275",
    "end": "138590"
  },
  {
    "text": "uh, that, uh, that set of operations,",
    "start": "138590",
    "end": "141860"
  },
  {
    "text": "or that operation is this.",
    "start": "141860",
    "end": "145485"
  },
  {
    "text": "It's the number of flops you need,",
    "start": "145485",
    "end": "147420"
  },
  {
    "text": "uh, to carry out, uh,",
    "start": "147420",
    "end": "149140"
  },
  {
    "text": "divided by the computer speed and then it computer speed is given in,",
    "start": "149140",
    "end": "152410"
  },
  {
    "text": "uh, flops per second.",
    "start": "152410",
    "end": "154430"
  },
  {
    "text": "Okay? So you can see that flops into divided by flops per second gives you seconds.",
    "start": "154430",
    "end": "159530"
  },
  {
    "text": "So it tells you - it tells you how long it's gonna take in seconds.",
    "start": "159530",
    "end": "162430"
  },
  {
    "text": "Now, this is very crude approximation.",
    "start": "162430",
    "end": "165805"
  },
  {
    "text": "We would not- we certainly don't expect this to be even like,",
    "start": "165805",
    "end": "168620"
  },
  {
    "text": "you know, accurate within plus minus twenty percent.",
    "start": "168620",
    "end": "171165"
  },
  {
    "text": "And in fact, it could even be - be off by big factor,",
    "start": "171165",
    "end": "173510"
  },
  {
    "text": "like a factor of ten or more.",
    "start": "173510",
    "end": "175265"
  },
  {
    "text": "But it - it doesn't distinguish between seconds and hours that it can actually do.",
    "start": "175265",
    "end": "180069"
  },
  {
    "text": "Okay, now a current computer is around",
    "start": "180070",
    "end": "182790"
  },
  {
    "text": "a- can carry out or run a billion flops per second.",
    "start": "182790",
    "end": "186310"
  },
  {
    "text": "Uh, actually, my phone can carry out a billion flops per second.",
    "start": "186310",
    "end": "191030"
  },
  {
    "text": "So, uh, and a- my laptop can do maybe 10.",
    "start": "191030",
    "end": "195095"
  },
  {
    "text": "Uh, but fancier computers,",
    "start": "195095",
    "end": "197764"
  },
  {
    "text": "GPUs, for example, gra- you know, graphical processing units.",
    "start": "197764",
    "end": "201350"
  },
  {
    "text": "They can actually carry out even much more than that.",
    "start": "201350",
    "end": "204010"
  },
  {
    "text": "Uh, they can, some of them can even,",
    "start": "204010",
    "end": "206030"
  },
  {
    "text": "actually, many of them now can actually carry out,",
    "start": "206030",
    "end": "208895"
  },
  {
    "text": "not just, uh, they can actually carry out ten to the twelve flops per second.",
    "start": "208895",
    "end": "214595"
  },
  {
    "text": "That's- that's a thousand billion to trillion flops per second.",
    "start": "214595",
    "end": "218195"
  },
  {
    "text": "That's called a teraflop,",
    "start": "218195",
    "end": "219410"
  },
  {
    "text": "uh, per second computer.",
    "start": "219410",
    "end": "221225"
  },
  {
    "text": "Okay. Ah, so let's just do a quick example.",
    "start": "221225",
    "end": "224865"
  },
  {
    "text": "Um, and let's say that you have an operation that takes,",
    "start": "224865",
    "end": "229070"
  },
  {
    "text": "you know, uh, 10,",
    "start": "229070",
    "end": "230960"
  },
  {
    "text": "uh, that's going to require you to do 10_10,",
    "start": "230960",
    "end": "234350"
  },
  {
    "text": "uh, floating point operations.",
    "start": "234350",
    "end": "237120"
  },
  {
    "text": "That's a lot, right? That's- that's, that's 10 billion.",
    "start": "237120",
    "end": "239614"
  },
  {
    "text": "And so on a typical computer,",
    "start": "239615",
    "end": "241580"
  },
  {
    "text": "let's make it a 10 giga flop computer,",
    "start": "241580",
    "end": "243410"
  },
  {
    "text": "but that means it's also we can carry out 10_10 flops per second.",
    "start": "243410",
    "end": "247415"
  },
  {
    "text": "And so we would guess that that's gonna take you about one second on that computer.",
    "start": "247415",
    "end": "252635"
  },
  {
    "text": "Okay. So let's look at the complexity of vector addition inner product.",
    "start": "252635",
    "end": "258650"
  },
  {
    "text": "We can also look at scalar vector multiplication. All right.",
    "start": "258650",
    "end": "261870"
  },
  {
    "text": "Let's look at adding two vectors.",
    "start": "261870",
    "end": "263780"
  },
  {
    "text": "So, uh, when we add two vectors.",
    "start": "263780",
    "end": "266360"
  },
  {
    "text": "Well, it takes n additions because you have to add each x_i to each y_i.",
    "start": "266360",
    "end": "270719"
  },
  {
    "text": "And there's n of those and entries.",
    "start": "270720",
    "end": "273290"
  },
  {
    "text": "So that's n flops total.",
    "start": "273290",
    "end": "275195"
  },
  {
    "text": "Um, an inner product that's forming,",
    "start": "275195",
    "end": "277805"
  },
  {
    "text": "that's calculating this x_1,",
    "start": "277805",
    "end": "279919"
  },
  {
    "text": "y_1 plus up to x_n, y_n.",
    "start": "279920",
    "end": "284635"
  },
  {
    "text": "Okay? Well, first you gotta multiply all these pairs and there's n of those.",
    "start": "284635",
    "end": "288440"
  },
  {
    "text": "So you're gonna have n multiplications.",
    "start": "288440",
    "end": "290240"
  },
  {
    "text": "And then you're gonna add them up.",
    "start": "290240",
    "end": "292324"
  },
  {
    "text": "Now when you add two numbers, that's one addition.",
    "start": "292325",
    "end": "294965"
  },
  {
    "text": "When you add three numbers, that's two additions.",
    "start": "294965",
    "end": "296915"
  },
  {
    "text": "So what do you add n numbers?",
    "start": "296915",
    "end": "298310"
  },
  {
    "text": "That's n minus one additions.",
    "start": "298310",
    "end": "299825"
  },
  {
    "text": "So you're going to have to do n",
    "start": "299825",
    "end": "301400"
  },
  {
    "text": "minus one additions and multiplications and altogether 2n minus one flops.",
    "start": "301400",
    "end": "306185"
  },
  {
    "text": "Now, no one would ever give them",
    "start": "306185",
    "end": "307970"
  },
  {
    "text": "minus one because it's- it's understood that this is very",
    "start": "307970",
    "end": "310550"
  },
  {
    "text": "crude and so people would always say that an inner product cost 2n flops.",
    "start": "310550",
    "end": "315590"
  },
  {
    "text": "In fact, a lot of people would even just say n because we're",
    "start": "315590",
    "end": "317840"
  },
  {
    "text": "not even shooting for a factor of two and accuracy here,",
    "start": "317840",
    "end": "320105"
  },
  {
    "text": "just n for the inner product.",
    "start": "320105",
    "end": "322595"
  },
  {
    "text": "Now, incidentally, this is interesting.",
    "start": "322595",
    "end": "324740"
  },
  {
    "text": "Now you can- now we can say something about if- if one of these vectors is sparse,",
    "start": "324740",
    "end": "328264"
  },
  {
    "text": "that can be a whole lot less.",
    "start": "328265",
    "end": "330155"
  },
  {
    "text": "For example, suppose x is sparse and y is not.",
    "start": "330155",
    "end": "335210"
  },
  {
    "text": "Um, x is sparse means that most of his entries are zero.",
    "start": "335210",
    "end": "338810"
  },
  {
    "text": "Now when I calculate the inner product,",
    "start": "338810",
    "end": "340400"
  },
  {
    "text": "I don't have to worry about those entries because all I'm gonna do is multiply x_i,",
    "start": "340400",
    "end": "343190"
  },
  {
    "text": "which zero by y_i.",
    "start": "343190",
    "end": "344495"
  },
  {
    "text": "Didn't matter what y is, I don't have to do it.",
    "start": "344495",
    "end": "346955"
  },
  {
    "text": "So the only turns out the only actually have to do is for every non-zero entry in x,",
    "start": "346955",
    "end": "352235"
  },
  {
    "text": "I have to multiply that x_i by the corresponding y_i and I have to add those up.",
    "start": "352235",
    "end": "356495"
  },
  {
    "text": "And so the complexity is- is around this.",
    "start": "356495",
    "end": "360005"
  },
  {
    "text": "It's twice the number of non-zeros in x.",
    "start": "360005",
    "end": "363600"
  },
  {
    "text": "Right. So this is an example of why you",
    "start": "363600",
    "end": "366380"
  },
  {
    "text": "might be interested in or care about sparse vectors.",
    "start": "366380",
    "end": "371520"
  }
]