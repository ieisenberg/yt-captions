[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "Welcome to Exploring Computing.",
    "start": "0",
    "end": "3660"
  },
  {
    "text": "Today's video is strings.",
    "start": "3660",
    "end": "6660"
  },
  {
    "text": "So in this video, we're\ngoing to take a closer",
    "start": "6660",
    "end": "9240"
  },
  {
    "text": "look at how strings work.",
    "start": "9240",
    "end": "10950"
  },
  {
    "text": "And I want to start\noff with this problem",
    "start": "10950",
    "end": "13260"
  },
  {
    "text": "that we ran into\nin the last video.",
    "start": "13260",
    "end": "15460"
  },
  {
    "text": "So you'll recall I\nwas writing to a file,",
    "start": "15460",
    "end": "18450"
  },
  {
    "text": "and I had two write statements.",
    "start": "18450",
    "end": "19965"
  },
  {
    "text": "So I wrote Go Stanford and\nthen I wrote Go Cardinal.",
    "start": "19965",
    "end": "23520"
  },
  {
    "text": "And instead of ending up with\nGo Stanford on one line and Go",
    "start": "23520",
    "end": "27690"
  },
  {
    "text": "Cardinal in the other line, when\nwe actually open up the file,",
    "start": "27690",
    "end": "30330"
  },
  {
    "text": "we discovered that Go Stanford\nand Go Cardinal end up",
    "start": "30330",
    "end": "33360"
  },
  {
    "text": "on the same line.",
    "start": "33360",
    "end": "34400"
  },
  {
    "text": "So how am I going to fix this?",
    "start": "34400",
    "end": "37360"
  },
  {
    "start": "37000",
    "end": "159000"
  },
  {
    "text": "All right, so up\non the top here,",
    "start": "37360",
    "end": "39370"
  },
  {
    "text": "we have what we ended up with.",
    "start": "39370",
    "end": "41390"
  },
  {
    "text": "And down at the bottom,\nwe have what we want.",
    "start": "41390",
    "end": "44000"
  },
  {
    "text": "So if we were to represent\nthese as strings,",
    "start": "44000",
    "end": "48177"
  },
  {
    "text": "this is what we would have here.",
    "start": "48177",
    "end": "49510"
  },
  {
    "text": "So up at the top, quote,\n\"go StanfordGo Cardinal,\"",
    "start": "49510",
    "end": "52629"
  },
  {
    "text": "that's what we ended up with.",
    "start": "52630",
    "end": "54950"
  },
  {
    "text": "And then the second one, \"Go\nStanford slash nGo Cardinal,\"",
    "start": "54950",
    "end": "59350"
  },
  {
    "text": "what is this slash n?",
    "start": "59350",
    "end": "62120"
  },
  {
    "text": "All right, that\nslash n is what we",
    "start": "62120",
    "end": "63640"
  },
  {
    "text": "refer to as an escape sequence.",
    "start": "63640",
    "end": "65770"
  },
  {
    "text": "And in this particular\ncase, the slash n",
    "start": "65770",
    "end": "68829"
  },
  {
    "text": "represents new line, which\ninserts a carriage return.",
    "start": "68830",
    "end": "72140"
  },
  {
    "text": "Now as we talked about\nin the very first lecture",
    "start": "72140",
    "end": "75070"
  },
  {
    "text": "of the quarter, there are\ndifferent ways computers use",
    "start": "75070",
    "end": "78970"
  },
  {
    "text": "to represent the end of\nline, and it's different",
    "start": "78970",
    "end": "81082"
  },
  {
    "text": "depending on whether we're\nworking with Unix machines",
    "start": "81082",
    "end": "83290"
  },
  {
    "text": "or working with\nWindows machines.",
    "start": "83290",
    "end": "85240"
  },
  {
    "text": "And we have a really\nold, old, old, Mac.",
    "start": "85240",
    "end": "87430"
  },
  {
    "text": "They represent it\na different way.",
    "start": "87430",
    "end": "89350"
  },
  {
    "text": "And Python the Python\ninterpreter is actually",
    "start": "89350",
    "end": "91810"
  },
  {
    "text": "going to know the\nproper representation",
    "start": "91810",
    "end": "95860"
  },
  {
    "text": "for your specific computer, and\nit will translate that slash",
    "start": "95860",
    "end": "99010"
  },
  {
    "text": "n into the exact sequence\nof ASCII characters",
    "start": "99010",
    "end": "102580"
  },
  {
    "text": "or Unicode characters that is\nnecessary for the particular",
    "start": "102580",
    "end": "106270"
  },
  {
    "text": "computer you're working on.",
    "start": "106270",
    "end": "107829"
  },
  {
    "text": "But just so we have a\ngeneral way of doing it",
    "start": "107830",
    "end": "110140"
  },
  {
    "text": "for any type of\ncomputer that Python",
    "start": "110140",
    "end": "111930"
  },
  {
    "text": "is designed to work\nwith, we're just going",
    "start": "111930",
    "end": "113680"
  },
  {
    "text": "to represent it with a slash n.",
    "start": "113680",
    "end": "116490"
  },
  {
    "text": "This is called an\nescape sequence",
    "start": "116490",
    "end": "117990"
  },
  {
    "text": "because that back\nslash there indicates",
    "start": "117990",
    "end": "121680"
  },
  {
    "text": "to Python that the next\ncharacter that it sees",
    "start": "121680",
    "end": "125220"
  },
  {
    "text": "is not to be treated normally.",
    "start": "125220",
    "end": "127290"
  },
  {
    "text": "I'm supposed to escape the\nnormal sequence of treating",
    "start": "127290",
    "end": "131160"
  },
  {
    "text": "characters and do\nsomething special",
    "start": "131160",
    "end": "132990"
  },
  {
    "text": "with the next character.",
    "start": "132990",
    "end": "134640"
  },
  {
    "text": "So don't treat that n there\nafter the slash as just",
    "start": "134640",
    "end": "138120"
  },
  {
    "text": "a regular n, that I've printed\nan n out on the output, which",
    "start": "138120",
    "end": "140763"
  },
  {
    "text": "is what you would normally\ndo if you saw an n.",
    "start": "140763",
    "end": "142680"
  },
  {
    "text": "It says, no, this is\nsomething different.",
    "start": "142680",
    "end": "146290"
  },
  {
    "text": "There's a special table\nof escape sequences.",
    "start": "146290",
    "end": "149200"
  },
  {
    "text": "Look it up in the table\nof escape sequences",
    "start": "149200",
    "end": "151349"
  },
  {
    "text": "and do what it says there.",
    "start": "151350",
    "end": "152460"
  },
  {
    "text": "And it looks it up in the\ntable and it says, oh,",
    "start": "152460",
    "end": "154680"
  },
  {
    "text": "that slash n is not a regular n.",
    "start": "154680",
    "end": "156900"
  },
  {
    "text": "That is actually\na carriage return.",
    "start": "156900",
    "end": "159454"
  },
  {
    "text": "And so there's a\ncouple of these.",
    "start": "159455",
    "end": "160830"
  },
  {
    "text": "So probably the most common\nyou run into are the slash",
    "start": "160830",
    "end": "163605"
  },
  {
    "text": "n's and the slash t's.",
    "start": "163605",
    "end": "165629"
  },
  {
    "text": "Slash n represents new\nline or carriage return.",
    "start": "165630",
    "end": "167910"
  },
  {
    "text": "Slash t represents a tab.",
    "start": "167910",
    "end": "170170"
  },
  {
    "text": "And so here, I've got\nthis string Stanford slash",
    "start": "170170",
    "end": "172560"
  },
  {
    "text": "n slash t slash tUniversity.",
    "start": "172560",
    "end": "176280"
  },
  {
    "text": "And so that actually\nrepresents Stanford",
    "start": "176280",
    "end": "179459"
  },
  {
    "text": "followed by a new line\nfollowed by 2 tabs.",
    "start": "179460",
    "end": "182670"
  },
  {
    "text": "And if we were to actually\nlook at the output,",
    "start": "182670",
    "end": "184590"
  },
  {
    "text": "this is what we would see.",
    "start": "184590",
    "end": "185672"
  },
  {
    "text": "We would see\nStanford on one line,",
    "start": "185673",
    "end": "187410"
  },
  {
    "text": "University on the\nnext line, but not",
    "start": "187410",
    "end": "189030"
  },
  {
    "text": "University at the\nbeginning of the line",
    "start": "189030",
    "end": "190860"
  },
  {
    "text": "because there are those two\nslash t's representing tabs--",
    "start": "190860",
    "end": "193770"
  },
  {
    "text": "so University tabbed over a bit.",
    "start": "193770",
    "end": "198110"
  },
  {
    "text": "Here's a couple more escape\nsequences you might run into.",
    "start": "198110",
    "end": "202297"
  },
  {
    "text": "One question is, how do\nyou represent a backslash?",
    "start": "202297",
    "end": "204379"
  },
  {
    "text": "You can't just put\na backslash there",
    "start": "204380",
    "end": "206900"
  },
  {
    "text": "because that starts\nthe escape sequence.",
    "start": "206900",
    "end": "209340"
  },
  {
    "text": "And so if you really want to\nbackslash-- not super common,",
    "start": "209340",
    "end": "211790"
  },
  {
    "text": "but if you really\nwant a backslash,",
    "start": "211790",
    "end": "213247"
  },
  {
    "text": "you have to put two\nbackslashes in a row.",
    "start": "213248",
    "end": "215120"
  },
  {
    "text": "The first backslash says\nthat's an escape character.",
    "start": "215120",
    "end": "218760"
  },
  {
    "text": "Get out of the normal sequence.",
    "start": "218760",
    "end": "220670"
  },
  {
    "text": "And the next backslash says,\noh, this particular sequence",
    "start": "220670",
    "end": "224819"
  },
  {
    "text": "is backslash backslash, which\nrepresents a single backslash.",
    "start": "224820",
    "end": "228660"
  },
  {
    "text": "All right, we also need one\nfor representing quotes.",
    "start": "228660",
    "end": "231350"
  },
  {
    "text": "So if I wanted a quote,\nI would represent",
    "start": "231350",
    "end": "235410"
  },
  {
    "text": "that with a backslash quote.",
    "start": "235410",
    "end": "237690"
  },
  {
    "text": "Why would I want to do that?",
    "start": "237690",
    "end": "239230"
  },
  {
    "text": "Well, suppose I actually\nwant a quote in the output.",
    "start": "239230",
    "end": "241580"
  },
  {
    "text": "So suppose I wanted the output,\nquote, \"give them the axe,\"",
    "start": "241580",
    "end": "244380"
  },
  {
    "text": "end quote, a traditional\nStanford cheer.",
    "start": "244380",
    "end": "248900"
  },
  {
    "text": "If I were to just\nput this in a string,",
    "start": "248900",
    "end": "251142"
  },
  {
    "text": "this is what the\nstring would look like.",
    "start": "251143",
    "end": "252810"
  },
  {
    "text": "And you can see by\nmy little not sign",
    "start": "252810",
    "end": "255560"
  },
  {
    "text": "or cancel sign at the\nend, don't do this.",
    "start": "255560",
    "end": "258540"
  },
  {
    "text": "What's going to happen\nhere is I start off",
    "start": "258540",
    "end": "260838"
  },
  {
    "text": "the string with a quote,\nand I end the string",
    "start": "260839",
    "end": "263090"
  },
  {
    "text": "with a quote on the\nfar right after cheer.",
    "start": "263090",
    "end": "265639"
  },
  {
    "text": "And then I place my double\nquotes in the middle.",
    "start": "265640",
    "end": "268770"
  },
  {
    "text": "And so the way this\nis actually going",
    "start": "268770",
    "end": "270440"
  },
  {
    "text": "to be interpreted\nby Python is it's",
    "start": "270440",
    "end": "273380"
  },
  {
    "text": "going to see that first\npair of double quotes,",
    "start": "273380",
    "end": "275540"
  },
  {
    "text": "the initial double quote\nfall by the double quote",
    "start": "275540",
    "end": "277760"
  },
  {
    "text": "for give them the axe.",
    "start": "277760",
    "end": "278780"
  },
  {
    "text": "And I'll say, oh, that's a\nlittle string right there.",
    "start": "278780",
    "end": "281810"
  },
  {
    "text": "And you may recall from the\nlast lecture, we have a string,",
    "start": "281810",
    "end": "284360"
  },
  {
    "text": "and there's no characters in it.",
    "start": "284360",
    "end": "285740"
  },
  {
    "text": "That is completely\nlegal, and that is what",
    "start": "285740",
    "end": "288680"
  },
  {
    "text": "we refer to as an empty string.",
    "start": "288680",
    "end": "290759"
  },
  {
    "text": "And then it will\njust see the quote",
    "start": "290760",
    "end": "292700"
  },
  {
    "text": "after the word axe followed\nby dash a traditional Stanford",
    "start": "292700",
    "end": "297380"
  },
  {
    "text": "chair followed by quote.",
    "start": "297380",
    "end": "298550"
  },
  {
    "text": "I say, OK, that's a\nstring because really,",
    "start": "298550",
    "end": "302367"
  },
  {
    "text": "what it's doing is it's mashing\nup the pairs of double quotes",
    "start": "302368",
    "end": "304910"
  },
  {
    "text": "here.",
    "start": "304910",
    "end": "305720"
  },
  {
    "text": "And then I'll say, but\nyou've got these words",
    "start": "305720",
    "end": "307610"
  },
  {
    "text": "here, give them the axe.",
    "start": "307610",
    "end": "309169"
  },
  {
    "text": "I don't know what that is.",
    "start": "309170",
    "end": "310550"
  },
  {
    "text": "Patrick, I think\nthis is illegal.",
    "start": "310550",
    "end": "312150"
  },
  {
    "text": "I think you need to\nfix your Python code.",
    "start": "312150",
    "end": "315080"
  },
  {
    "text": "So this won't work.",
    "start": "315080",
    "end": "316879"
  },
  {
    "text": "This won't work because the\ndouble quotes are paired up,",
    "start": "316880",
    "end": "320270"
  },
  {
    "text": "and because they're paired up,\nI can't put actual double quotes",
    "start": "320270",
    "end": "326539"
  },
  {
    "text": "into the string that\nI'm trying to create.",
    "start": "326540",
    "end": "329130"
  },
  {
    "text": "So the way I get around\nthis is by the slash quote.",
    "start": "329130",
    "end": "331910"
  },
  {
    "text": "So I say quote slash quote\nor backslash quote give them",
    "start": "331910",
    "end": "337670"
  },
  {
    "text": "the axe, backslash quote, a\ntraditional Stanford cheer.",
    "start": "337670",
    "end": "341060"
  },
  {
    "text": "What's going to\nhappen is it's going",
    "start": "341060",
    "end": "342560"
  },
  {
    "text": "to see that first\ndouble quote, and it's",
    "start": "342560",
    "end": "345880"
  },
  {
    "text": "going to see the\nslash double quote,",
    "start": "345880",
    "end": "347690"
  },
  {
    "text": "and it will see the slash first.",
    "start": "347690",
    "end": "349470"
  },
  {
    "text": "And it will say, OK, so\nthe next character I see,",
    "start": "349470",
    "end": "351890"
  },
  {
    "text": "which is a double\nquote, don't just",
    "start": "351890",
    "end": "353518"
  },
  {
    "text": "treat that like a double quote.",
    "start": "353518",
    "end": "354810"
  },
  {
    "text": "So don't treat it\nas if, you know,",
    "start": "354810",
    "end": "356960"
  },
  {
    "text": "that matches with the\noriginal double quote.",
    "start": "356960",
    "end": "359210"
  },
  {
    "text": "No, that's a special character.",
    "start": "359210",
    "end": "361460"
  },
  {
    "text": "That should not be treated as\na double quote character, which",
    "start": "361460",
    "end": "365840"
  },
  {
    "text": "would terminate the string\nwith our empty string there.",
    "start": "365840",
    "end": "368480"
  },
  {
    "text": "That's actually, oh,\nI want a double quote",
    "start": "368480",
    "end": "370580"
  },
  {
    "text": "in the actual output, not\nas a delimiting character",
    "start": "370580",
    "end": "373879"
  },
  {
    "text": "delineating when\nthe string starts",
    "start": "373880",
    "end": "375800"
  },
  {
    "text": "and when the string ends.",
    "start": "375800",
    "end": "377759"
  },
  {
    "text": "So if you happen to need a\ndouble quote into string,",
    "start": "377760",
    "end": "380090"
  },
  {
    "text": "that's how you would do it.",
    "start": "380090",
    "end": "383449"
  },
  {
    "start": "383000",
    "end": "801000"
  },
  {
    "text": "All right, if you want to\nstart doing some fancier",
    "start": "383450",
    "end": "386570"
  },
  {
    "text": "things with strings, one of\nthe things to be aware of",
    "start": "386570",
    "end": "389270"
  },
  {
    "text": "is that strings actually\nwork pretty similar to lists.",
    "start": "389270",
    "end": "393289"
  },
  {
    "text": "So lists and strings\nboth act as sequences,",
    "start": "393290",
    "end": "397132"
  },
  {
    "text": "and there are certain\nthings that you can",
    "start": "397132",
    "end": "398840"
  },
  {
    "text": "do with sequences in Python.",
    "start": "398840",
    "end": "401360"
  },
  {
    "text": "And as we saw\npreviously, in order",
    "start": "401360",
    "end": "403909"
  },
  {
    "text": "to access individual\nelements in a list,",
    "start": "403910",
    "end": "406700"
  },
  {
    "text": "we have the square\nbracket notation.",
    "start": "406700",
    "end": "408330"
  },
  {
    "text": "So this case, we have\na list of team members.",
    "start": "408330",
    "end": "410720"
  },
  {
    "text": "And I say I want to print\nthe second team member.",
    "start": "410720",
    "end": "413270"
  },
  {
    "text": "But you'll recall it actually\nstarts off numbered at 0.",
    "start": "413270",
    "end": "416490"
  },
  {
    "text": "So Casey would be 0.",
    "start": "416490",
    "end": "417763"
  },
  {
    "text": "Hank would be 1.",
    "start": "417763",
    "end": "418430"
  },
  {
    "text": "Tammy would be 2.",
    "start": "418430",
    "end": "419419"
  },
  {
    "text": "And so this would actually\nprint the word Tammy.",
    "start": "419420",
    "end": "423320"
  },
  {
    "text": "And here I've got a\nname, which is a string--",
    "start": "423320",
    "end": "428240"
  },
  {
    "text": "Stanford.",
    "start": "428240",
    "end": "429020"
  },
  {
    "text": "And I tell it to\nprint name bracket 0.",
    "start": "429020",
    "end": "433039"
  },
  {
    "text": "And so what this\nis going to do is",
    "start": "433040",
    "end": "434930"
  },
  {
    "text": "I can access each of the\nindividual characters",
    "start": "434930",
    "end": "436936"
  },
  {
    "text": "in the string.",
    "start": "436937",
    "end": "437520"
  },
  {
    "text": "So string-- so\nname 0 would be S.",
    "start": "437520",
    "end": "441860"
  },
  {
    "text": "Name 1 would be T. Name\n2 would be A. name three",
    "start": "441860",
    "end": "445590"
  },
  {
    "text": "would be N and so on.",
    "start": "445590",
    "end": "447090"
  },
  {
    "text": "So in this case, if I\nsay print name zero,",
    "start": "447090",
    "end": "449090"
  },
  {
    "text": "that actually prints the S.\nI should caution you, though.",
    "start": "449090",
    "end": "452419"
  },
  {
    "text": "In contrast to the\nelements of the list",
    "start": "452420",
    "end": "455620"
  },
  {
    "text": "where I can access the\nindividual elements",
    "start": "455620",
    "end": "457370"
  },
  {
    "text": "in a list and not only access\nand get the information out",
    "start": "457370",
    "end": "460915"
  },
  {
    "text": "with the list--",
    "start": "460915",
    "end": "461540"
  },
  {
    "text": "I can actually replace\nelements in the list.",
    "start": "461540",
    "end": "463373"
  },
  {
    "text": "We can't actually do\nthis with strings.",
    "start": "463373",
    "end": "466629"
  },
  {
    "text": "So if I were to try and replace\nthat S with some other letter,",
    "start": "466630",
    "end": "470700"
  },
  {
    "text": "that actually is\nnot going to work.",
    "start": "470700",
    "end": "473910"
  },
  {
    "text": "All right, we also\nsaw previously",
    "start": "473910",
    "end": "476550"
  },
  {
    "text": "that we can get the\nlength of a list of items.",
    "start": "476550",
    "end": "479430"
  },
  {
    "text": "And so here, I am taking\nlength of the course list",
    "start": "479430",
    "end": "484470"
  },
  {
    "text": "number of classes.",
    "start": "484470",
    "end": "485588"
  },
  {
    "text": "And so this would, like--",
    "start": "485588",
    "end": "486630"
  },
  {
    "text": "I think in our example,\nwe had three classes.",
    "start": "486630",
    "end": "488505"
  },
  {
    "text": "So this would print I'm\ntaking three classes.",
    "start": "488505",
    "end": "490625"
  },
  {
    "text": "And we could do the same\nthing with strength.",
    "start": "490625",
    "end": "492500"
  },
  {
    "text": "So if I say length name where\nname is the string Stanford,",
    "start": "492500",
    "end": "496820"
  },
  {
    "text": "that would actually\nprint the number eight",
    "start": "496820",
    "end": "498570"
  },
  {
    "text": "because there are eight\ncharacters in Stanford.",
    "start": "498570",
    "end": "500550"
  },
  {
    "start": "500550",
    "end": "503348"
  },
  {
    "text": "One thing that you\nmay have noticed--",
    "start": "503348",
    "end": "504889"
  },
  {
    "text": "when I've been talking about\ntaking advantage of some",
    "start": "504890",
    "end": "509210"
  },
  {
    "text": "of the features\nbuilt into Python,",
    "start": "509210",
    "end": "512179"
  },
  {
    "text": "you may have\nnoticed a difference",
    "start": "512179",
    "end": "513559"
  },
  {
    "text": "between different ways\nthat we're accessing these.",
    "start": "513559",
    "end": "516440"
  },
  {
    "text": "So I've told you, hey,\nyou can go ahead and get",
    "start": "516440",
    "end": "519429"
  },
  {
    "text": "the length of something.",
    "start": "519429",
    "end": "520429"
  },
  {
    "text": "You can go ahead and\nprint something out.",
    "start": "520429",
    "end": "522137"
  },
  {
    "text": "You can go ahead\nand close the file.",
    "start": "522137",
    "end": "523880"
  },
  {
    "text": "You can go ahead\nand append a file.",
    "start": "523880",
    "end": "525680"
  },
  {
    "text": "And there is\nactually a difference",
    "start": "525680",
    "end": "527420"
  },
  {
    "text": "between how these were accessed.",
    "start": "527420",
    "end": "529910"
  },
  {
    "text": "Some of them I just\nhad the name of the--",
    "start": "529910",
    "end": "533404"
  },
  {
    "text": "we'll refer to it as\na function followed",
    "start": "533405",
    "end": "536000"
  },
  {
    "text": "by a pair of parentheses\nfollowed by whatever",
    "start": "536000",
    "end": "537963"
  },
  {
    "text": "information we needed.",
    "start": "537963",
    "end": "538880"
  },
  {
    "text": "So length followed\nby the variable",
    "start": "538880",
    "end": "541580"
  },
  {
    "text": "that's storing a sequence,\noriginally a list of items,",
    "start": "541580",
    "end": "545810"
  },
  {
    "text": "now we could see that you\ncan either pass in something",
    "start": "545810",
    "end": "548475"
  },
  {
    "text": "referred to a list of items,\nor you can pass in something",
    "start": "548475",
    "end": "550850"
  },
  {
    "text": "to refer to a string.",
    "start": "550850",
    "end": "551953"
  },
  {
    "text": "And it will go\nahead and print out",
    "start": "551953",
    "end": "553370"
  },
  {
    "text": "the number of items\nin the string.",
    "start": "553370",
    "end": "555560"
  },
  {
    "text": "We've definitely been doing\nthis with the print statement.",
    "start": "555560",
    "end": "558650"
  },
  {
    "text": "We can print--\nsay print and then",
    "start": "558650",
    "end": "561140"
  },
  {
    "text": "pass in a string\nor a number, and it",
    "start": "561140",
    "end": "563038"
  },
  {
    "text": "will go ahead and print it out.",
    "start": "563038",
    "end": "564330"
  },
  {
    "text": "And in fact, we saw\nthat you can actually",
    "start": "564330",
    "end": "567020"
  },
  {
    "text": "ask it to print a bunch of\nthings in the same line.",
    "start": "567020",
    "end": "569650"
  },
  {
    "text": "So those are what we\nrefer to as function.",
    "start": "569650",
    "end": "571400"
  },
  {
    "text": "So with the functions,\nyou just have the name",
    "start": "571400",
    "end": "573275"
  },
  {
    "text": "that I've told you to\nuse-- so length or print",
    "start": "573275",
    "end": "576020"
  },
  {
    "text": "or whatever followed\nby the preferences.",
    "start": "576020",
    "end": "578600"
  },
  {
    "text": "In contrast, this other\nway of doing things",
    "start": "578600",
    "end": "581498"
  },
  {
    "text": "is something we\nrefer to as a method.",
    "start": "581498",
    "end": "583040"
  },
  {
    "text": "With the method, we have\nan existing variable",
    "start": "583040",
    "end": "585920"
  },
  {
    "text": "that is referring to an item\nfollowed by a dot followed",
    "start": "585920",
    "end": "591230"
  },
  {
    "text": "by the name of this method\nI've told you to use followed",
    "start": "591230",
    "end": "595250"
  },
  {
    "text": "by a pair of parentheses.",
    "start": "595250",
    "end": "596470"
  },
  {
    "text": "So with closing a\nfile, I have the name",
    "start": "596470",
    "end": "600079"
  },
  {
    "text": "of a variable, which\nis referring to a file,",
    "start": "600080",
    "end": "602030"
  },
  {
    "text": "followed by dot followed\nby close followed",
    "start": "602030",
    "end": "604400"
  },
  {
    "text": "by a pair of parentheses.",
    "start": "604400",
    "end": "606020"
  },
  {
    "text": "And we also saw\nthis with append.",
    "start": "606020",
    "end": "607550"
  },
  {
    "text": "So with append, I had the\nname of a variable, which",
    "start": "607550",
    "end": "610700"
  },
  {
    "text": "was referring to\na list, followed",
    "start": "610700",
    "end": "613160"
  },
  {
    "text": "by dot followed by append\nfollowed by the item",
    "start": "613160",
    "end": "616160"
  },
  {
    "text": "that I want to\nappend to that list.",
    "start": "616160",
    "end": "618410"
  },
  {
    "text": "So I don't want to go too much\ninto the technical details",
    "start": "618410",
    "end": "622519"
  },
  {
    "text": "here, but I did want\nto acknowledge that",
    "start": "622520",
    "end": "624650"
  },
  {
    "text": "that, yes, there are two\nthings that look like they're",
    "start": "624650",
    "end": "628270"
  },
  {
    "text": "kind of doing the same thing,\nbut they have different syntax",
    "start": "628270",
    "end": "630770"
  },
  {
    "text": "rules.",
    "start": "630770",
    "end": "631430"
  },
  {
    "text": "So the main thing\nfor our purposes",
    "start": "631430",
    "end": "633380"
  },
  {
    "text": "is they have totally different\nways of accessing them.",
    "start": "633380",
    "end": "638820"
  },
  {
    "text": "I wouldn't say\ntotally different,",
    "start": "638820",
    "end": "640230"
  },
  {
    "text": "but they have different,\ndistinct, clearly different",
    "start": "640230",
    "end": "642949"
  },
  {
    "text": "ways of accessing them.",
    "start": "642950",
    "end": "644010"
  },
  {
    "text": "So you do need to know\nwhether you're working",
    "start": "644010",
    "end": "645885"
  },
  {
    "text": "with a function or a method.",
    "start": "645885",
    "end": "647440"
  },
  {
    "text": "And in terms of why they're\ndifferent, in some cases,",
    "start": "647440",
    "end": "652540"
  },
  {
    "text": "you could do one or the other.",
    "start": "652540",
    "end": "654860"
  },
  {
    "text": "But what's really\ngoing on is there",
    "start": "654860",
    "end": "657399"
  },
  {
    "text": "are differences in how the\nfunctions versus the methods",
    "start": "657400",
    "end": "660520"
  },
  {
    "text": "are used for\norganizing programs.",
    "start": "660520",
    "end": "663100"
  },
  {
    "text": "When you're writing\ncomplex programs,",
    "start": "663100",
    "end": "664821"
  },
  {
    "text": "whether you use\none or the other is",
    "start": "664822",
    "end": "666280"
  },
  {
    "text": "going to have an effect on\nhow your overall programs are",
    "start": "666280",
    "end": "668613"
  },
  {
    "text": "organized.",
    "start": "668613",
    "end": "669370"
  },
  {
    "text": "And there are definitely\ndifferences in terms",
    "start": "669370",
    "end": "671515"
  },
  {
    "text": "of how they're implemented.",
    "start": "671515",
    "end": "672640"
  },
  {
    "text": "The functions are easier\nto write on your own.",
    "start": "672640",
    "end": "675385"
  },
  {
    "text": "In order to understand\nhow the methods work,",
    "start": "675385",
    "end": "677320"
  },
  {
    "text": "it's actually fairly messy.",
    "start": "677320",
    "end": "678580"
  },
  {
    "text": "You need quite a\nbit of understanding",
    "start": "678580",
    "end": "681190"
  },
  {
    "text": "of the details of how\nPython works in order",
    "start": "681190",
    "end": "683470"
  },
  {
    "text": "to properly use the methods.",
    "start": "683470",
    "end": "687019"
  },
  {
    "text": "All right, so with\nthat little discussion,",
    "start": "687020",
    "end": "688850"
  },
  {
    "text": "I've got a bunch of methods\nI want to talk about.",
    "start": "688850",
    "end": "691670"
  },
  {
    "text": "And we're going to need some\nof these to work with files.",
    "start": "691670",
    "end": "695610"
  },
  {
    "text": "So bear with me here.",
    "start": "695610",
    "end": "698000"
  },
  {
    "text": "The first couple we don't\nneed to use for files,",
    "start": "698000",
    "end": "700130"
  },
  {
    "text": "but they're pretty\nstraightforward.",
    "start": "700130",
    "end": "701850"
  },
  {
    "text": "So I want to start\noff with these.",
    "start": "701850",
    "end": "703370"
  },
  {
    "text": "OK, so the isdigit\nmethod returns true",
    "start": "703370",
    "end": "705770"
  },
  {
    "text": "if a string is composed\nonly of digits.",
    "start": "705770",
    "end": "707880"
  },
  {
    "text": "So let's say I've been\nreading for files,",
    "start": "707880",
    "end": "710750"
  },
  {
    "text": "and I've been converting them to\nnumbers by calling int or float",
    "start": "710750",
    "end": "714830"
  },
  {
    "text": "and converting them to numbers.",
    "start": "714830",
    "end": "716360"
  },
  {
    "text": "Maybe we've got a file that\nhas a bunch of numbers mixed",
    "start": "716360",
    "end": "719300"
  },
  {
    "text": "in with a bunch of\nnames, and I only",
    "start": "719300",
    "end": "720800"
  },
  {
    "text": "want to convert the ones\nthat are actually numbers.",
    "start": "720800",
    "end": "722959"
  },
  {
    "text": "How would I know which one's\na number and which one isn't?",
    "start": "722960",
    "end": "725510"
  },
  {
    "text": "Well, so one way you\ncan do that is there's",
    "start": "725510",
    "end": "727810"
  },
  {
    "text": "an isdigit that\nworks on strings,",
    "start": "727810",
    "end": "730700"
  },
  {
    "text": "and it returns\neither true or false.",
    "start": "730700",
    "end": "733570"
  },
  {
    "text": "You can see our little example\nhere-- if data.isdigit.",
    "start": "733570",
    "end": "736600"
  },
  {
    "text": "So that's our method\nand application",
    "start": "736600",
    "end": "738589"
  },
  {
    "text": "that we saw a minute ago.",
    "start": "738590",
    "end": "740180"
  },
  {
    "text": "Name of a variable referring to\na string followed by a followed",
    "start": "740180",
    "end": "743825"
  },
  {
    "text": "by the name of the\nmethod, which in this case",
    "start": "743825",
    "end": "745700"
  },
  {
    "text": "is isdigit, followed by\na pair of parentheses--",
    "start": "745700",
    "end": "748365"
  },
  {
    "text": "whether or not that\npair of parentheses",
    "start": "748365",
    "end": "749990"
  },
  {
    "text": "is empty or not depends upon the\nparticular method we're using.",
    "start": "749990",
    "end": "754220"
  },
  {
    "text": "OK, so if data is digit,\nprint is a number.",
    "start": "754220",
    "end": "758360"
  },
  {
    "text": "Else, contains\nletters or symbols.",
    "start": "758360",
    "end": "761790"
  },
  {
    "text": "So if data were a variable\nstoring the string 1234,",
    "start": "761790",
    "end": "767009"
  },
  {
    "text": "data.isdigit would say,\nyes, this is entirely",
    "start": "767010",
    "end": "769860"
  },
  {
    "text": "consisting of digits.",
    "start": "769860",
    "end": "770950"
  },
  {
    "text": "So it would go ahead\nand print is a number.",
    "start": "770950",
    "end": "774620"
  },
  {
    "text": "OK, isalpha is sort\nof the opposite.",
    "start": "774620",
    "end": "778279"
  },
  {
    "text": "Isalpha says this is\ngoing to return true",
    "start": "778280",
    "end": "781340"
  },
  {
    "text": "if the string is only composed\nof letters of the alphabet.",
    "start": "781340",
    "end": "785320"
  },
  {
    "text": "So if data.isalpha,\nprint all letters.",
    "start": "785320",
    "end": "789750"
  },
  {
    "text": "Else, print contains\nnumbers or symbols.",
    "start": "789750",
    "end": "792780"
  },
  {
    "text": "So if data is set\nto quote \"z24,\"",
    "start": "792780",
    "end": "796620"
  },
  {
    "text": "this would print contains\nnumbers or symbols",
    "start": "796620",
    "end": "798870"
  },
  {
    "text": "because there's the 24 in there.",
    "start": "798870",
    "end": "801720"
  },
  {
    "start": "801000",
    "end": "1151000"
  },
  {
    "text": "All right, so here's\nthe ones we really need.",
    "start": "801720",
    "end": "805170"
  },
  {
    "text": "So I mentioned this concept\nof white space before.",
    "start": "805170",
    "end": "808649"
  },
  {
    "text": "White space refers to any\ncharacter that creates",
    "start": "808650",
    "end": "811120"
  },
  {
    "text": "blank space on a screen.",
    "start": "811120",
    "end": "813100"
  },
  {
    "text": "So that's pretty\nmuch the spaces.",
    "start": "813100",
    "end": "814769"
  },
  {
    "text": "If you have a whole\nbunch of spaces,",
    "start": "814770",
    "end": "816270"
  },
  {
    "text": "that's obviously going to\ngenerate a bunch of blank space",
    "start": "816270",
    "end": "818645"
  },
  {
    "text": "on in the document.",
    "start": "818645",
    "end": "819690"
  },
  {
    "text": "So if you have a\nbunch of tabs, that",
    "start": "819690",
    "end": "821380"
  },
  {
    "text": "generates a bunch of white\nspace in the document,",
    "start": "821380",
    "end": "823590"
  },
  {
    "text": "blank space in the document.",
    "start": "823590",
    "end": "824860"
  },
  {
    "text": "Carriage return, if you have\na bunch of carriage returns,",
    "start": "824860",
    "end": "827235"
  },
  {
    "text": "you're creating a\nbunch of blank lines.",
    "start": "827235",
    "end": "828779"
  },
  {
    "text": "And so that's going to\ncreate a lot of blank space",
    "start": "828780",
    "end": "830490"
  },
  {
    "text": "in the document.",
    "start": "830490",
    "end": "831190"
  },
  {
    "text": "So again, these characters\nthat are creating",
    "start": "831190",
    "end": "833138"
  },
  {
    "text": "these blank spaces, we just sort\nof grouped them all together",
    "start": "833138",
    "end": "835680"
  },
  {
    "text": "and say, oh, those\nare characters that",
    "start": "835680",
    "end": "838050"
  },
  {
    "text": "are generating white space.",
    "start": "838050",
    "end": "839890"
  },
  {
    "text": "And so these are methods\nthat remove white space.",
    "start": "839890",
    "end": "842430"
  },
  {
    "text": "lstrip removes white space on\nthe left side of the string.",
    "start": "842430",
    "end": "846360"
  },
  {
    "text": "rstrip removes white space on\nthe right side of the string,",
    "start": "846360",
    "end": "849660"
  },
  {
    "text": "and then strip\nremoves white space",
    "start": "849660",
    "end": "851699"
  },
  {
    "text": "on either side of the string.",
    "start": "851700",
    "end": "853030"
  },
  {
    "text": "So let's take a look\nat how these will work.",
    "start": "853030",
    "end": "855390"
  },
  {
    "text": "OK, so let's say we have\nthis string here stored",
    "start": "855390",
    "end": "858630"
  },
  {
    "text": "in the variable original where\nwe've got a bunch of spaces",
    "start": "858630",
    "end": "861540"
  },
  {
    "text": "followed by Stanford\nfollowed by a slash n",
    "start": "861540",
    "end": "864779"
  },
  {
    "text": "followed by a slash t.",
    "start": "864780",
    "end": "865950"
  },
  {
    "text": "So that slash n, that's\nmy new line character.",
    "start": "865950",
    "end": "868410"
  },
  {
    "text": "The slash t, that's the tab.",
    "start": "868410",
    "end": "870629"
  },
  {
    "text": "And so both the\nspaces and a slash",
    "start": "870630",
    "end": "872790"
  },
  {
    "text": "n on a slash t, that's\nall white space.",
    "start": "872790",
    "end": "875740"
  },
  {
    "text": "So if I create a new\nvariable called data",
    "start": "875740",
    "end": "879120"
  },
  {
    "text": "and I say what I want to store\nin data is the original string",
    "start": "879120",
    "end": "883270"
  },
  {
    "text": "and then call the\nmethod strip on it,",
    "start": "883270",
    "end": "886260"
  },
  {
    "text": "that is going to remove\nwhite space from both sides.",
    "start": "886260",
    "end": "889210"
  },
  {
    "text": "So it'll remove the spaces at\nthe beginning of the string.",
    "start": "889210",
    "end": "891960"
  },
  {
    "text": "It will remove the slash and\nthe t at the end of the string.",
    "start": "891960",
    "end": "894900"
  },
  {
    "text": "And so when we're done with\nthis, the variable data,",
    "start": "894900",
    "end": "897270"
  },
  {
    "text": "we'll store the string\nquote, \"Stanford,\" end",
    "start": "897270",
    "end": "899310"
  },
  {
    "text": "quote without the spaces,\nwithout the slash n,",
    "start": "899310",
    "end": "902670"
  },
  {
    "text": "without the slash t.",
    "start": "902670",
    "end": "903571"
  },
  {
    "text": "Those will all go away.",
    "start": "903572",
    "end": "904530"
  },
  {
    "start": "904530",
    "end": "907640"
  },
  {
    "text": "Now if you want to--",
    "start": "907640",
    "end": "909320"
  },
  {
    "text": "I think it's less common to\nneed to strip the white space",
    "start": "909320",
    "end": "912440"
  },
  {
    "text": "from just one of the sides.",
    "start": "912440",
    "end": "913880"
  },
  {
    "text": "But if you wanted to, if we\nwere to do, for example, rstrip,",
    "start": "913880",
    "end": "917330"
  },
  {
    "text": "this strips off the white\nspace on the right side",
    "start": "917330",
    "end": "919990"
  },
  {
    "text": "of string, which in this case\nis the slash n and the slash t.",
    "start": "919990",
    "end": "923750"
  },
  {
    "text": "But it leaves the white space\non the left side of the string.",
    "start": "923750",
    "end": "926580"
  },
  {
    "text": "So in this particular\ncase, data would",
    "start": "926580",
    "end": "928460"
  },
  {
    "text": "be set to quote\nspace space Stanford",
    "start": "928460",
    "end": "931130"
  },
  {
    "text": "because the white space on\nthe left side of the string",
    "start": "931130",
    "end": "933830"
  },
  {
    "text": "is left, and only\nthe white space",
    "start": "933830",
    "end": "935480"
  },
  {
    "text": "on the right side of\nstring is removed.",
    "start": "935480",
    "end": "938060"
  },
  {
    "text": "All right, so why do\nI want to do this?",
    "start": "938060",
    "end": "940990"
  },
  {
    "text": "Why do I care about this?",
    "start": "940990",
    "end": "943649"
  },
  {
    "text": "All right, so it turns out\nthat when I'm reading strings",
    "start": "943650",
    "end": "946640"
  },
  {
    "text": "from a file, it's actually\ngoing to leave the new lines",
    "start": "946640",
    "end": "952452"
  },
  {
    "text": "at the end of each character.",
    "start": "952452",
    "end": "953660"
  },
  {
    "text": "I've alluded to this\na little bit earlier.",
    "start": "953660",
    "end": "955790"
  },
  {
    "text": "So here, I'm reading a\nbunch of names for a file",
    "start": "955790",
    "end": "959120"
  },
  {
    "text": "and storing them in a list.",
    "start": "959120",
    "end": "962930"
  },
  {
    "text": "If my list contains\nthe following names--",
    "start": "962930",
    "end": "967490"
  },
  {
    "text": "Patrick, Molly,\nCraig, Tammy, Chloe--",
    "start": "967490",
    "end": "970250"
  },
  {
    "text": "the actual list that\nI'm going to end up with",
    "start": "970250",
    "end": "973760"
  },
  {
    "text": "says, quote, \"Patrick slash\nn,\" quote, \"Molly slash n,\"",
    "start": "973760",
    "end": "979150"
  },
  {
    "text": "slash Craig slash n, and so on.",
    "start": "979150",
    "end": "981470"
  },
  {
    "text": "So we've talked before about\nhow that end of the line",
    "start": "981470",
    "end": "986889"
  },
  {
    "text": "is actually represented\nby an actual bit sequence.",
    "start": "986890",
    "end": "991030"
  },
  {
    "text": "Whether we're using ASCII\nor Unicode or whatever",
    "start": "991030",
    "end": "993510"
  },
  {
    "text": "our character encoding is, there\nis a bit sequence associated",
    "start": "993510",
    "end": "996558"
  },
  {
    "text": "with the end of the line.",
    "start": "996558",
    "end": "997600"
  },
  {
    "text": "And so what we're seeing\nhere is that Python",
    "start": "997600",
    "end": "999800"
  },
  {
    "text": "is going ahead and just\ncopying those over and saying,",
    "start": "999800",
    "end": "1002050"
  },
  {
    "text": "hey, there's a character\nat the end of the line.",
    "start": "1002050",
    "end": "1004050"
  },
  {
    "text": "I'm just going to go\nahead and put it in your--",
    "start": "1004050",
    "end": "1006381"
  },
  {
    "text": "when you read the\nline, I'm going",
    "start": "1006381",
    "end": "1008459"
  },
  {
    "text": "to go ahead and not only\ninclude the visible characters.",
    "start": "1008460",
    "end": "1011040"
  },
  {
    "text": "I'm also going to include\nthat invisible end of line",
    "start": "1011040",
    "end": "1013620"
  },
  {
    "text": "character.",
    "start": "1013620",
    "end": "1015610"
  },
  {
    "text": "You may also notice that\nthis list down at the bottom",
    "start": "1015610",
    "end": "1020829"
  },
  {
    "text": "that Python has\ngiven us is marking",
    "start": "1020830",
    "end": "1023320"
  },
  {
    "text": "its strings with single quotes\ninstead of double quotes.",
    "start": "1023320",
    "end": "1026890"
  },
  {
    "text": "So it turns out that in Python,\nyou can represent strings",
    "start": "1026890",
    "end": "1030348"
  },
  {
    "text": "either with single\nquotes, or you can",
    "start": "1030348",
    "end": "1031890"
  },
  {
    "text": "represent with double quotes.",
    "start": "1031890",
    "end": "1033098"
  },
  {
    "text": "I've been using double quotes\nbecause most programming",
    "start": "1033098",
    "end": "1035400"
  },
  {
    "text": "languages use double quote.",
    "start": "1035400",
    "end": "1037079"
  },
  {
    "text": "So if you were to continue\non studying computer science",
    "start": "1037079",
    "end": "1040230"
  },
  {
    "text": "and you were used to having\nsingle quotes for your strings,",
    "start": "1040230",
    "end": "1042869"
  },
  {
    "text": "that would be a bad\nhabit to get into.",
    "start": "1042869",
    "end": "1044670"
  },
  {
    "text": "However, while Python\nis perfectly happy",
    "start": "1044670",
    "end": "1048000"
  },
  {
    "text": "to accept double quotes\nwhen we're writing our code",
    "start": "1048000",
    "end": "1050310"
  },
  {
    "text": "or when you're interacting\nwith the Python shell--",
    "start": "1050310",
    "end": "1053250"
  },
  {
    "text": "in fact, when it spits\nthe strings back to you,",
    "start": "1053250",
    "end": "1055355"
  },
  {
    "text": "it always uses\nthe single quotes.",
    "start": "1055355",
    "end": "1056730"
  },
  {
    "text": "I'm not quite sure why\nthey did it, but anyway,",
    "start": "1056730",
    "end": "1059460"
  },
  {
    "text": "so you will see those single\nquoted strings when you're",
    "start": "1059460",
    "end": "1061950"
  },
  {
    "text": "working with the Python shell.",
    "start": "1061950",
    "end": "1065299"
  },
  {
    "text": "You can use single quote\nstrings if you want,",
    "start": "1065300",
    "end": "1067202"
  },
  {
    "text": "but again, I think\nit's a bad habit",
    "start": "1067202",
    "end": "1068660"
  },
  {
    "text": "to get to because\nmost languages require",
    "start": "1068660",
    "end": "1071120"
  },
  {
    "text": "you to use double quotes.",
    "start": "1071120",
    "end": "1072290"
  },
  {
    "text": "All right, so you\nknow, probably, I",
    "start": "1072290",
    "end": "1074630"
  },
  {
    "text": "don't want all those slash\nn's at the end of each",
    "start": "1074630",
    "end": "1076765"
  },
  {
    "text": "of these names.",
    "start": "1076765",
    "end": "1077390"
  },
  {
    "text": "It just seems kind of annoying.",
    "start": "1077390",
    "end": "1079860"
  },
  {
    "text": "I don't know about you,\nbut if I have a kid,",
    "start": "1079860",
    "end": "1082350"
  },
  {
    "text": "I'm not naming it with a slash\nn at the end of their name.",
    "start": "1082350",
    "end": "1085190"
  },
  {
    "text": "Maddy does not have a slash\nn at the name of her name.",
    "start": "1085190",
    "end": "1090080"
  },
  {
    "text": "OK, so how am I going\nto get rid of it?",
    "start": "1090080",
    "end": "1093429"
  },
  {
    "text": "Well, here's a new version of\nthe code that's going to read--",
    "start": "1093430",
    "end": "1099100"
  },
  {
    "text": "it's going to read the\nnames from our file.",
    "start": "1099100",
    "end": "1101929"
  },
  {
    "text": "And you can see what I've\ndone here is I've just",
    "start": "1101930",
    "end": "1103930"
  },
  {
    "text": "added name dot rstrip.",
    "start": "1103930",
    "end": "1105382"
  },
  {
    "text": "So what this is\ngoing to do is this",
    "start": "1105382",
    "end": "1106840"
  },
  {
    "text": "is going to read each\nof the individual names.",
    "start": "1106840",
    "end": "1108757"
  },
  {
    "text": "So I've got a little for\nloop, name, and dataFile.",
    "start": "1108757",
    "end": "1111580"
  },
  {
    "text": "And so name is going to be set\nto each of the lines of text",
    "start": "1111580",
    "end": "1115059"
  },
  {
    "text": "from our dataFile here\nor our names file here.",
    "start": "1115060",
    "end": "1118690"
  },
  {
    "text": "And what we're\ngoing to do is we're",
    "start": "1118690",
    "end": "1120519"
  },
  {
    "text": "going to strip off any\nof the extra white space",
    "start": "1120520",
    "end": "1125530"
  },
  {
    "text": "on the right side before\nI start into my name list,",
    "start": "1125530",
    "end": "1129220"
  },
  {
    "text": "before I append it on\nthe end of my name list.",
    "start": "1129220",
    "end": "1131600"
  },
  {
    "text": "So in this case,\nthose slash n's which",
    "start": "1131600",
    "end": "1133330"
  },
  {
    "text": "occur at the end of\neach line, that's",
    "start": "1133330",
    "end": "1135250"
  },
  {
    "text": "just going to get stripped\noff by the rstrip.",
    "start": "1135250",
    "end": "1137410"
  },
  {
    "text": "And so you can see I end\nup with a list that I want,",
    "start": "1137410",
    "end": "1139880"
  },
  {
    "text": "which is the list of the names\nfrom the file without the slash",
    "start": "1139880",
    "end": "1142660"
  },
  {
    "text": "n's on the end.",
    "start": "1142660",
    "end": "1143890"
  },
  {
    "text": "Right, that's for now.",
    "start": "1143890",
    "end": "1145090"
  },
  {
    "text": "I'll talk to you all soon.",
    "start": "1145090",
    "end": "1147330"
  },
  {
    "start": "1147330",
    "end": "1152000"
  }
]