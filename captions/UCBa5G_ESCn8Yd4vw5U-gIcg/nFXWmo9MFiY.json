[
  {
    "start": "0",
    "end": "5150"
  },
  {
    "text": "So as I said today,\nwe're going to finish our discussion of\ncache coherence,",
    "start": "5150",
    "end": "10670"
  },
  {
    "text": "and then we'll talk about\ncoherence's tricky pal, memory consistency.",
    "start": "10670",
    "end": "16910"
  },
  {
    "text": "So to refresh our memories\nabout where we were, we were talking about the\ndefinition of coherence.",
    "start": "16910",
    "end": "24050"
  },
  {
    "text": "And the definition of\ncoherence, we said was we wanted to have a memory\nsystem that even though we",
    "start": "24050",
    "end": "30109"
  },
  {
    "text": "had these multiple caches\nthat shared the cached memory",
    "start": "30110",
    "end": "36110"
  },
  {
    "text": "locations from a\nshared address space, if we looked at any particular\naddress, what we want to see",
    "start": "36110",
    "end": "42200"
  },
  {
    "text": "is that all of the reads and\nwrites made to that address by all the processes can be\nordered in some sequential order",
    "start": "42200",
    "end": "52190"
  },
  {
    "text": "such that the\nordering corresponds to the program\norder issued by any",
    "start": "52190",
    "end": "59090"
  },
  {
    "text": "of the threads in the processor. So that's the first thing. Second thing we want\nis we want to make sure that in this sequential order\nthat the value that you read,",
    "start": "59090",
    "end": "68770"
  },
  {
    "text": "it was the value that was last\nwritten in the sequential order. So these are the\ntwo things that we",
    "start": "68770",
    "end": "75090"
  },
  {
    "text": "want to maintain in a coherent\nmemory system with caches.",
    "start": "75090",
    "end": "85590"
  },
  {
    "text": "So we said that in\norder to implement this, there were two invariants\nthat we needed to maintain.",
    "start": "85590",
    "end": "91940"
  },
  {
    "text": "First, the idea of a\nsingle-writer, multiple-reader invariant. So we can abstractly\ndivide the access",
    "start": "91940",
    "end": "100110"
  },
  {
    "text": "to any particular location\ninto these epochs. And these epochs could be a\nread-write epoch in which only",
    "start": "100110",
    "end": "106080"
  },
  {
    "text": "one processor has sole\naccess to the cache line, or a read-only epoch in which\nmultiple processes can read--",
    "start": "106080",
    "end": "117340"
  },
  {
    "text": "so it's read-only but multiple\nprocesses can share the line. And the idea of the\ndata value invariant",
    "start": "117340",
    "end": "123810"
  },
  {
    "text": "was that the value that you\nsee in the read-only epoch is the value that was\nlast written in the most",
    "start": "123810",
    "end": "131009"
  },
  {
    "text": "recent read-write epoch. OK, everybody understand\nthese two invariants? OK, we're going to come back\nto them in just a moment.",
    "start": "131009",
    "end": "137970"
  },
  {
    "text": "So we said the issue\nthat we have with write, is we could implement\ncache coherence",
    "start": "137970",
    "end": "143040"
  },
  {
    "text": "with write through caches, but\nthat had performance problems because every write\nthat the processor makes",
    "start": "143040",
    "end": "151170"
  },
  {
    "text": "appears on the bus, and the\nbus becomes a performance bottleneck. So in a write back cache\nwe have this problem",
    "start": "151170",
    "end": "158800"
  },
  {
    "text": "that each individual\nprocessor has its own cache. And if everybody is\nwriting into that cache",
    "start": "158800",
    "end": "165570"
  },
  {
    "text": "in a write-back fashion,\nthen, of course, we have an incoherent system. ",
    "start": "165570",
    "end": "172740"
  },
  {
    "text": "There are two questions. One is when as a processor\ndo I have the permission",
    "start": "172740",
    "end": "179820"
  },
  {
    "text": "to actually perform a write? And the way that\nwe want to indicate",
    "start": "179820",
    "end": "187530"
  },
  {
    "text": "that a process can\nperform a write is by having a modified\nor dirty state.",
    "start": "187530",
    "end": "193540"
  },
  {
    "text": "And so the idea is\nthat the only one processor should\nbe in the modified",
    "start": "193540",
    "end": "199920"
  },
  {
    "text": "state at any point in time. And then the second\nquestion is, OK, so I have got this\ndata in my cache",
    "start": "199920",
    "end": "207299"
  },
  {
    "text": "and some other processor\nwants to read that data,",
    "start": "207300",
    "end": "212460"
  },
  {
    "text": "read that cache line. So the question then is\nthat, who should provide",
    "start": "212460",
    "end": "217770"
  },
  {
    "text": "the data to that processor? And it should be the owner\nof the cache line, which",
    "start": "217770",
    "end": "223320"
  },
  {
    "text": "is typically also the\nprocessor that has the cache line in modified state.",
    "start": "223320",
    "end": "229900"
  },
  {
    "text": "So let's see how we actually\nimplement a cache coherency",
    "start": "229900",
    "end": "237900"
  },
  {
    "text": "and write-back caches. And what we want is an\ninvalidation-based write-back protocol to maintain these two\ninvariants that we've defined.",
    "start": "237900",
    "end": "247600"
  },
  {
    "text": "So the idea, as we've\nalready pointed out, is that you want to have a\nsingle line in the system",
    "start": "247600",
    "end": "256320"
  },
  {
    "text": "in modified state at\nany point in time, and that the idea is that\nthe processes can only",
    "start": "256320",
    "end": "261660"
  },
  {
    "text": "write when the they've got the\ncache line in modified state. And then you have to\nhave a way of getting",
    "start": "261660",
    "end": "267960"
  },
  {
    "text": "the data from a\ncache that has it in modified state\nto other caches",
    "start": "267960",
    "end": "273780"
  },
  {
    "text": "that want to read that data\nat some later point in time. OK, so let's see how this works.",
    "start": "273780",
    "end": "280270"
  },
  {
    "text": "So we reminded you that the idea\nwe talked about a cache line. We said the data component\nand the metadata.",
    "start": "280270",
    "end": "287410"
  },
  {
    "text": "And part of the\nmetadata is the tag that indicates the line,\nthe address of the line that",
    "start": "287410",
    "end": "293639"
  },
  {
    "text": "is contained in this\nparticular cache line. And then the dirty bit is\nindicating that the data",
    "start": "293640",
    "end": "302729"
  },
  {
    "text": "has been modified in the cache. And then the line\nstate which is going to be used in the cache\ncoherence protocol.",
    "start": "302730",
    "end": "309510"
  },
  {
    "text": "So we briefly\nintroduced the idea of a modified, shared,\nwrite-back invalidation",
    "start": "309510",
    "end": "319670"
  },
  {
    "text": "protocol. And so what we want to make\nsure then is with this protocol",
    "start": "319670",
    "end": "326960"
  },
  {
    "text": "that we can maintain the\ntwo invariants to implement cache coherency correctly.",
    "start": "326960",
    "end": "332280"
  },
  {
    "text": "So there are three line states. Invalid which basically means\nthat the cache line is not",
    "start": "332280",
    "end": "340840"
  },
  {
    "text": "in the cache. It's the idea that it's\nnot there, or, of course,",
    "start": "340840",
    "end": "346770"
  },
  {
    "text": "if you access that cache\nline in an invalid state, it's going to be a miss. Then there's the shared state.",
    "start": "346770",
    "end": "354110"
  },
  {
    "text": "That says the line is valid\nin one or more caches. And the important\nthing to remember",
    "start": "354110",
    "end": "360770"
  },
  {
    "text": "is that memory is up to date. So whenever a cache\nline is in shared state, memory is always up to date.",
    "start": "360770",
    "end": "366690"
  },
  {
    "text": "And then there's\nthe modified state. And in this state the line is\nvalid and exactly one cache.",
    "start": "366690",
    "end": "374560"
  },
  {
    "text": "So only one cache in the\nsystem has the cache line in modified state, and also\nmeans that the dirty bit is set.",
    "start": "374560",
    "end": "384280"
  },
  {
    "text": "Another way of thinking\nabout this is it's exclusive. So only one cache\nin the system has",
    "start": "384280",
    "end": "391660"
  },
  {
    "text": "the cache line in that state. And so you can think of\nit as being exclusive.",
    "start": "391660",
    "end": "397270"
  },
  {
    "text": "So then there are two operations\nthat the processors can make. They can make reads and\nwrites to cache lines,",
    "start": "397270",
    "end": "405370"
  },
  {
    "text": "so process of reads\nand process of writes. And then there are three\ncoherence bus transactions",
    "start": "405370",
    "end": "411420"
  },
  {
    "text": "that are the result\nof these reads and writes that get\nmade by the processes.",
    "start": "411420",
    "end": "417310"
  },
  {
    "text": "There's a bus read which\nsays, give me the line because I want to read it.",
    "start": "417310",
    "end": "423730"
  },
  {
    "text": "Bus read exclusives that says\ngive me the line because I want to actually modify it.",
    "start": "423730",
    "end": "429075"
  },
  {
    "text": "I want to change\nit, so I want it to get it into exclusive state. And then bus\nwrite-back, which says,",
    "start": "429075",
    "end": "435710"
  },
  {
    "text": "hey, there's a dirty\nline in the cache that's going to be replaced,\nand I'm going",
    "start": "435710",
    "end": "440800"
  },
  {
    "text": "to write it back to memory. OK, so let's see how these\noperations get implemented",
    "start": "440800",
    "end": "449229"
  },
  {
    "text": "in a cache coherency. So here is the cache coherency\nprotocol state transition",
    "start": "449230",
    "end": "456310"
  },
  {
    "text": "diagram. So we have the three states\ninvalid, shared, and modified. And we have the\noperations that are",
    "start": "456310",
    "end": "465849"
  },
  {
    "text": "made by the processor and the\nsubsequent transactions that",
    "start": "465850",
    "end": "472150"
  },
  {
    "text": "come from the bus. So the way to read this\nstate transition diagram",
    "start": "472150",
    "end": "477940"
  },
  {
    "text": "is that each of the arcs is\nlabeled by a A-B action pair",
    "start": "477940",
    "end": "484580"
  },
  {
    "text": "or transaction pair. And so the A is the\ninitiating action,",
    "start": "484580",
    "end": "491480"
  },
  {
    "text": "and then the B is the resulting\nbehavior or resulting action",
    "start": "491480",
    "end": "498560"
  },
  {
    "text": "taken by the cache controller. And the way to look at it is\nthat the green label actions are",
    "start": "498560",
    "end": "505940"
  },
  {
    "text": "initiated by the\nprocessor, and the red are initiated by the bus.",
    "start": "505940",
    "end": "512159"
  },
  {
    "text": "So let's look at this transition\ndiagram in more detail",
    "start": "512159",
    "end": "517520"
  },
  {
    "text": "and dissect all of the\ndifferent transitions. So let's start with the\nprocessor-initiated arcs.",
    "start": "517520",
    "end": "530940"
  },
  {
    "text": "So let's assume that the\ncache line is not in the cache",
    "start": "530940",
    "end": "536750"
  },
  {
    "text": "or it's an invalid state. So if a processor does a read,\nwhat is the action of the bus?",
    "start": "536750",
    "end": "548420"
  },
  {
    "text": "What's going to\nhappen on the bus? So, of course, if it's\ninvalid, this is a miss.",
    "start": "548420",
    "end": "554930"
  },
  {
    "text": "So you can think\nabout any action that the process takes that\nresults in a bus transaction,",
    "start": "554930",
    "end": "562530"
  },
  {
    "text": "think of it as a miss. OK all right. So we start out in\nan invalid state,",
    "start": "562530",
    "end": "569200"
  },
  {
    "text": "and we issue a process to read,\nand this results in a bus read.",
    "start": "569200",
    "end": "575120"
  },
  {
    "text": "It says get me the cache line\nbecause I want to read it. So that means that the line has\nto move from invalid to shared.",
    "start": "575120",
    "end": "585010"
  },
  {
    "text": " And then if the application\nthen does a write to that cache,",
    "start": "585010",
    "end": "598430"
  },
  {
    "text": "to that address, which is\ncontained in the cache line,",
    "start": "598430",
    "end": "604550"
  },
  {
    "text": "then it's going to\nissue a process read. And what's the result on the\nbus is a bus read exclusive.",
    "start": "604550",
    "end": "614270"
  },
  {
    "text": "And so bus reads\nexclusive says, hey, now I need to move the state\nof the cache line",
    "start": "614270",
    "end": "620350"
  },
  {
    "text": "from shared to modified. And modified means\nthat, of course,",
    "start": "620350",
    "end": "625820"
  },
  {
    "text": "that this is the only cache\nline in the system that is in modified state.",
    "start": "625820",
    "end": "631480"
  },
  {
    "text": "So then if we have the\ncache line in modified state",
    "start": "631480",
    "end": "636940"
  },
  {
    "text": "and we issue reads and\nwrites from the process, so what happens? Nothing right?",
    "start": "636940",
    "end": "642860"
  },
  {
    "text": "These are hits. These are hits, so that's\nindicated by nothing",
    "start": "642860",
    "end": "650230"
  },
  {
    "text": "in terms of the action. And so you can do whatever\nyou like and modify state,",
    "start": "650230",
    "end": "657010"
  },
  {
    "text": "and there are no\nbus transactions that result from that. OK, so what happens\nif the processor",
    "start": "657010",
    "end": "667120"
  },
  {
    "text": "we're in the cache\nline is invalid, and we issue a processor write?",
    "start": "667120",
    "end": "674300"
  },
  {
    "text": "You go straight to the modified. OK, good. All right. So this is what happens from\nthe processes point of view",
    "start": "674300",
    "end": "682850"
  },
  {
    "text": "on an individual cache. But then all the other\nprocessor cache controllers",
    "start": "682850",
    "end": "691400"
  },
  {
    "text": "are snooping on the bus. So whatever transactions\nshow up on the bus of a single processor, remember,\nall the other processes",
    "start": "691400",
    "end": "699830"
  },
  {
    "text": "get to see. And they're snooping on those. And if they see a transaction\nfor an address contained",
    "start": "699830",
    "end": "707000"
  },
  {
    "text": "in their cache, then they\nneed to take an action. So let's look at those actions.",
    "start": "707000",
    "end": "714140"
  },
  {
    "text": "All right. So we've got a few more\nprocessor initiated.",
    "start": "714140",
    "end": "719380"
  },
  {
    "text": "Well, one more processor\ninitiated action. So if we're in the shared state\nand the processor does a read,",
    "start": "719380",
    "end": "724620"
  },
  {
    "text": "what happens? You stay there. And any bus transaction?",
    "start": "724620",
    "end": "730270"
  },
  {
    "text": "No. OK, so what happens if\nwe're in a shared state and we see a bus read\ntransaction over the bus?",
    "start": "730270",
    "end": "740460"
  },
  {
    "text": " Nothing, OK. It's a shared state.",
    "start": "740460",
    "end": "745820"
  },
  {
    "text": "So what does that mean\nabout the state of the cache",
    "start": "745820",
    "end": "751000"
  },
  {
    "text": "line in the system? Yeah. It's the same across the caches.",
    "start": "751000",
    "end": "757550"
  },
  {
    "text": "That have had that\nline in shared state. So any cache that has that\ncache line in its cache",
    "start": "757550",
    "end": "764720"
  },
  {
    "text": "is going to have\nit in shared state. ",
    "start": "764720",
    "end": "769880"
  },
  {
    "text": "Is it possible for\nany of those caches to have it in modified state? No.",
    "start": "769880",
    "end": "774935"
  },
  {
    "text": " All right, so suppose we see a\nboss read exclusive transaction",
    "start": "774935",
    "end": "784660"
  },
  {
    "text": "on the bus for a cache\nline in our cache? Then we need to\nmake this transition from shared to invalid.",
    "start": "784660",
    "end": "794244"
  },
  {
    "text": "So that would be the case where\nsome other processor wants to write this cache line.",
    "start": "794244",
    "end": "800890"
  },
  {
    "text": "So what happens to the state\nof the cache line in my cache?",
    "start": "800890",
    "end": "805960"
  },
  {
    "text": "It goes to invalid. ",
    "start": "805960",
    "end": "812210"
  },
  {
    "text": "So if I see a bus read-- I mean, modified,\nwhat has to happen?",
    "start": "812210",
    "end": "818330"
  },
  {
    "text": "So we know that if we've got\nthe cache line in modified state and it's a write-back\ncache, so we have the only",
    "start": "818330",
    "end": "824170"
  },
  {
    "text": "valid copy of the\nline in the system, so if you see a bus read\ntransaction on the bus, then",
    "start": "824170",
    "end": "834279"
  },
  {
    "text": "what has to happen? Well, I need to supply\nthe data in my cache. So I see the bus read and the\nresponse is a bus write-back.",
    "start": "834280",
    "end": "845730"
  },
  {
    "text": "Everybody follow that? Yeah. Can I also [INAUDIBLE]\nback in shared state? Yeah.",
    "start": "845730",
    "end": "851209"
  },
  {
    "text": "And then transition\ninto shared state because we know that it is\nnot possible for cache lines,",
    "start": "851210",
    "end": "859080"
  },
  {
    "text": "for anything, any other cache to\nhave a cache line in its cache",
    "start": "859080",
    "end": "865830"
  },
  {
    "text": "if it's in modified state. So it's got to move to shared. Yeah. And the right-back is sliding\nback to memory, right?",
    "start": "865830",
    "end": "873540"
  },
  {
    "text": "Correct. So you're giving the\ndata to the requester,",
    "start": "873540",
    "end": "879220"
  },
  {
    "text": "but you're also updating memory. Because whenever\nyou're in shared state, memory is always up to date.",
    "start": "879220",
    "end": "884765"
  },
  {
    "text": " If there's contention,\nwhat keeps us from thrashing back and\nforth to different states?",
    "start": "884765",
    "end": "892287"
  },
  {
    "text": "That's what you're going\nto do all day long. Absolutely, that's\nwhat's going to happen. [LAUGHS] And what are you going\nto see in terms of performance?",
    "start": "892287",
    "end": "902622"
  },
  {
    "text": "Yeah, it's going\nto be a lot worse. You're going to see\nlots of cache misses. And we'll look at a case\nlike that in just a moment.",
    "start": "902622",
    "end": "911250"
  },
  {
    "text": "What about we're\nin modified state, we see a bus read exclusive?",
    "start": "911250",
    "end": "919156"
  },
  {
    "text": " That means some other processor\nwants to read this cache line.",
    "start": "919156",
    "end": "927260"
  },
  {
    "text": "We have it, the\nonly value, so we have to supply\nthat the up to date",
    "start": "927260",
    "end": "933790"
  },
  {
    "text": "the most recent copy\nof the cache line. So it's got to be\na bus writeback. But then we also have to\nmove to invalid state.",
    "start": "933790",
    "end": "940870"
  },
  {
    "text": "Everybody understand that? So let's do an example\njust to reinforce",
    "start": "940870",
    "end": "946930"
  },
  {
    "text": "what we just talked about. All right, so cache\ncoherence example.",
    "start": "946930",
    "end": "952580"
  },
  {
    "text": "Here are the processor actions\nby the different processors",
    "start": "952580",
    "end": "959660"
  },
  {
    "text": "which simplify things. We're just using one address. And so what we want to\nlook at is the state",
    "start": "959660",
    "end": "966760"
  },
  {
    "text": "of the cache line\nin the three caches, the bus transaction that results\nfrom the processor action,",
    "start": "966760",
    "end": "973060"
  },
  {
    "text": "and where the data comes from. ",
    "start": "973060",
    "end": "979339"
  },
  {
    "text": "So processor 1 does a read. What's the bus transaction--",
    "start": "979339",
    "end": "985470"
  },
  {
    "text": "I suppose I gave the\ngame away here-- what's the bus transaction?",
    "start": "985470",
    "end": "990530"
  },
  {
    "text": "Bus read, OK. What's the state of\nthe different caches?",
    "start": "990530",
    "end": "996750"
  },
  {
    "text": "A shared [INAUDIBLE]. Huh?",
    "start": "996750",
    "end": "1002490"
  },
  {
    "text": "Shared in processor 1's cache. And it's invalid or not\nthere in the other caches.",
    "start": "1002490",
    "end": "1009394"
  },
  {
    "text": "Where's the data\ngoing to come from? [? Probably ?] 3. All right, processor\n3 does a read of x.",
    "start": "1009395",
    "end": "1015959"
  },
  {
    "text": "What's the bus transaction?  What's the state of the caches?",
    "start": "1015960",
    "end": "1023225"
  },
  {
    "text": "[INTERPOSING VOICES]  OK, so and then where's\nthe data coming from?",
    "start": "1023226",
    "end": "1033990"
  },
  {
    "text": "[INAUDIBLE] Remember, When you're\nin shared state,",
    "start": "1033990",
    "end": "1039390"
  },
  {
    "text": "the data always\ncomes from memory. And it's just to\nkeep things simple.",
    "start": "1039390",
    "end": "1044459"
  },
  {
    "text": "We can imagine\nsome other scheme, but then we'll see an\nexample where should you get if two caches have it,\nwho should you get it from.",
    "start": "1044460",
    "end": "1051460"
  },
  {
    "text": " So process 3 does a write.",
    "start": "1051460",
    "end": "1058370"
  },
  {
    "text": "What's the bus transaction? [INAUDIBLE] Bus read exclusive.",
    "start": "1058370",
    "end": "1064190"
  },
  {
    "text": "What's the state of the caches? [INTERPOSING VOICES]",
    "start": "1064190",
    "end": "1070445"
  },
  {
    "text": " Modify in processor 3 and\ninvalid in processor 1.",
    "start": "1070445",
    "end": "1080750"
  },
  {
    "text": "And the data comes from memory. OK, processor 1\ndoes a read of x.",
    "start": "1080750",
    "end": "1087460"
  },
  {
    "text": "What's the bus transaction? What's the state of the caches?",
    "start": "1087460",
    "end": "1094440"
  },
  {
    "text": "Shared. ",
    "start": "1094440",
    "end": "1101429"
  },
  {
    "text": "And where's the\ndata coming from?  Processor 3's cache.",
    "start": "1101430",
    "end": "1107040"
  },
  {
    "text": "OK. Processor 1 does a read of x,\nwhereas what bus transaction",
    "start": "1107040",
    "end": "1117510"
  },
  {
    "text": "occurs? [INAUDIBLE] Ah, it's a tricky one. There's no bus\ntransaction in here.",
    "start": "1117510",
    "end": "1123490"
  },
  {
    "text": "It's a hit. Yeah. So this data that\nis coming from E3,",
    "start": "1123490",
    "end": "1129610"
  },
  {
    "text": "how does memory\nknow that it doesn't need to reply to that\nread transaction?",
    "start": "1129610",
    "end": "1135600"
  },
  {
    "text": "How does memory know? Because it sees\nthe state of the--",
    "start": "1135600",
    "end": "1143363"
  },
  {
    "text": " well, basically, the processor\nthat has the cache line",
    "start": "1143363",
    "end": "1153570"
  },
  {
    "text": "tells memory to hold off. Yeah, that's the way\nto think about it.",
    "start": "1153570",
    "end": "1159350"
  },
  {
    "text": "Yeah. What if he had P1 read\nafter the P3 read?",
    "start": "1159350",
    "end": "1166410"
  },
  {
    "text": "Where? This one? Here, if this was a right. You tell me what happens.",
    "start": "1166410",
    "end": "1173990"
  },
  {
    "text": "If P1 does a right, what's\nthe bus transaction? BusRdX. And then what happens?",
    "start": "1173990",
    "end": "1181040"
  },
  {
    "text": "Then the P1 copy from P3. Yeah, so in that case,\nit's the same thing.",
    "start": "1181040",
    "end": "1188090"
  },
  {
    "text": "The data is going\nto come from P3, but what's going to be\nthe state of the caches?",
    "start": "1188090",
    "end": "1193570"
  },
  {
    "text": "[INAUDIBLE] Yeah. Right.",
    "start": "1193570",
    "end": "1198660"
  },
  {
    "text": "Exactly. But the data moves, right. OK.",
    "start": "1198660",
    "end": "1204005"
  },
  {
    "text": "So in this case, nothing\nhappens in terms of the state, we don't have a Bus transaction,\nand where does the data",
    "start": "1204005",
    "end": "1211580"
  },
  {
    "text": "come from? Right. It's on cache. It was a hit. ",
    "start": "1211580",
    "end": "1219630"
  },
  {
    "text": "Processes [? do ?]\ndoes a write of x, what's the bus transaction?",
    "start": "1219630",
    "end": "1225880"
  },
  {
    "text": "What's the state of the cache? [INTERPOSING VOICES]",
    "start": "1225880",
    "end": "1231440"
  },
  {
    "text": "Right. And then where's the\ndata coming from? [INAUDIBLE]",
    "start": "1231440",
    "end": "1236600"
  },
  {
    "text": "What? Memory. Memory, right. [LAUGHTER] Yeah? Is there a functional difference\nbetween invalid and just a dash?",
    "start": "1236600",
    "end": "1245899"
  },
  {
    "text": "Well, dash says we\nnever saw it at all, but functionally, as far as the\nprocess of accessing the cache",
    "start": "1245900",
    "end": "1256039"
  },
  {
    "text": "line, it's the same thing. Yeah. So essentially,\nif it was a dash,",
    "start": "1256040",
    "end": "1263029"
  },
  {
    "text": "then it would be a [? called ?]\nlist as opposed to, hey, it got invalidated.",
    "start": "1263030",
    "end": "1269380"
  },
  {
    "text": "OK. So notice that we do have this\nsingle-writer, multiple-reader",
    "start": "1269380",
    "end": "1274660"
  },
  {
    "text": "protocol, and so\nthe question is, why do you need this transition\nfrom modified to shared? ",
    "start": "1274660",
    "end": "1284970"
  },
  {
    "text": "Why is that important?  Yeah?",
    "start": "1284970",
    "end": "1290290"
  },
  {
    "text": "I guess to indicate that the\ncache line is back in memory. Back in memory, and what else?",
    "start": "1290290",
    "end": "1296580"
  },
  {
    "text": "Yeah? To indicate that another\ncache or another processor is the one that can modify it.",
    "start": "1296580",
    "end": "1302581"
  },
  {
    "text": "[INAUDIBLE] Transition. Modify to share. Why do you need to modify\nit, for instance, this case?",
    "start": "1302582",
    "end": "1308970"
  },
  {
    "text": "Why is that important? Yeah? Well, otherwise you would have\nto go to invalidate, right? Right. Well, you need to-- remember,\nwe can only have one.",
    "start": "1308970",
    "end": "1316590"
  },
  {
    "text": "Remember, the invariant\nwe're trying to maintain is single-writer,\nmultiple-reader.",
    "start": "1316590",
    "end": "1323230"
  },
  {
    "text": "So in order to track\nthat transition,",
    "start": "1323230",
    "end": "1329350"
  },
  {
    "text": "we need the transition\nfrom modified to share. So the other thing to know is\nthat communication increases",
    "start": "1329350",
    "end": "1335940"
  },
  {
    "text": "memory latency, right. So we saw that here is that,\nbecause P3 did a write to x,",
    "start": "1335940",
    "end": "1342921"
  },
  {
    "text": "P1 which had x in\nits cache, now has to do a Bus\ntransaction, which is",
    "start": "1342921",
    "end": "1350320"
  },
  {
    "text": "going to take much more time\nthan hitting in its cache. And this is the case where\nyou had the cache hit, right?",
    "start": "1350320",
    "end": "1358760"
  },
  {
    "text": "But if you had an\nintervening write, then it causes\nextra cache misses, and so, of course, you're\ngoing to lose performance.",
    "start": "1358760",
    "end": "1366340"
  },
  {
    "text": "So just to reinforce\nthis idea of how the MSI",
    "start": "1366340",
    "end": "1373960"
  },
  {
    "text": "protocol maintains\ncache coherence, let's think about the cache\ncoherence invariance, and so how",
    "start": "1373960",
    "end": "1381640"
  },
  {
    "text": "do we maintain the single-writer\nmultiple-reader invariant?",
    "start": "1381640",
    "end": "1386680"
  },
  {
    "text": "Yeah? That's a transition\nfrom modified to shared that we\nwere talking about. Right. And then so that that's\nhow in shared state",
    "start": "1386680",
    "end": "1398110"
  },
  {
    "text": "you have multiple\nreaders, and how about how about the single-writer?",
    "start": "1398110",
    "end": "1406150"
  },
  {
    "text": "[INAUDIBLE] only 1% is involved. Yeah, only one cache\ncan be in the modified state at any point in time.",
    "start": "1406150",
    "end": "1412400"
  },
  {
    "text": "Right? Yeah? I was going to say that, yeah. Good.",
    "start": "1412400",
    "end": "1418130"
  },
  {
    "text": "OK. What about data-value invariant? Tell me about that. ",
    "start": "1418130",
    "end": "1424320"
  },
  {
    "text": "So how do we maintain\nthe right serialization? We go through the\nBus every time. So the bus [INAUDIBLE], like\nthe serializer in this case.",
    "start": "1424320",
    "end": "1432279"
  },
  {
    "text": "Right. And what about the data value? How do we make\nsure that the data",
    "start": "1432280",
    "end": "1437490"
  },
  {
    "text": "is moved from the read-write\nepoch to the read-only epoch?",
    "start": "1437490",
    "end": "1446260"
  },
  {
    "text": "Yeah? We go to the shared state\nso we know that nothing is-- You go to shared state, yeah.",
    "start": "1446260",
    "end": "1452910"
  },
  {
    "text": "I guess, it's like you use the\nprocessor that modified it, like that's the\nsource of the data.",
    "start": "1452910",
    "end": "1459159"
  },
  {
    "text": "Right. And that is maintained\nwith the Bus write-back.",
    "start": "1459160",
    "end": "1465150"
  },
  {
    "text": "So the Bus write-back,\nwhenever you come out of the modified state,\nyou, as the cache",
    "start": "1465150",
    "end": "1472020"
  },
  {
    "text": "that had the line\nin modified state, has to provide the data\nfor the cache line.",
    "start": "1472020",
    "end": "1477039"
  },
  {
    "text": "Yeah? So the processor makes a write-- I mean, isn't modified state,\nand another processor tries",
    "start": "1477040",
    "end": "1484450"
  },
  {
    "text": "to make the write decision,\n[INAUDIBLE] out of the first buses are out of modified state\nafter that processor's done",
    "start": "1484450",
    "end": "1490930"
  },
  {
    "text": "writing, but you can't\n[? feel ?] [? you ?] mid-write, and then have to like-- Well, it's going to\ncomplete it's write.",
    "start": "1490930",
    "end": "1496930"
  },
  {
    "text": "If it gets the line--",
    "start": "1496930",
    "end": "1502810"
  },
  {
    "text": "spacing the Bus is going to\nserialize all the actions. Right? It will complete? It will complete,\nmodify its cache line,",
    "start": "1502810",
    "end": "1509860"
  },
  {
    "text": "and then it will be time to\nwriteback to the next processor that it wants to write. So the line could bounce all\nthe way around, but essentially,",
    "start": "1509860",
    "end": "1520250"
  },
  {
    "text": "every time that you got\nexclusive access to the cache line, you get to do a write.",
    "start": "1520250",
    "end": "1525309"
  },
  {
    "text": "Yeah? Where is the logic process, this\nnew form of bus transaction?",
    "start": "1525310",
    "end": "1530900"
  },
  {
    "text": "Yeah. Well, this is hardware\nthat's implemented in the cache controller.",
    "start": "1530900",
    "end": "1536630"
  },
  {
    "text": "Yeah. Does each processor has\nits own cache controller? Each processor has its own cache\ncontroller connected to the Bus.",
    "start": "1536630",
    "end": "1543200"
  },
  {
    "text": "Is there also maybe a logic\nacross them, like the track? Well, there's not\nlogic across, but there",
    "start": "1543200",
    "end": "1548590"
  },
  {
    "text": "is some access control\nlogic that says who gets to go next, right.",
    "start": "1548590",
    "end": "1554705"
  },
  {
    "text": "[INAUDIBLE] All right. ",
    "start": "1554705",
    "end": "1562260"
  },
  {
    "text": "And the bus serializes\ntransactions. So these are the two\nstatements that we just made. OK.",
    "start": "1562260",
    "end": "1567702"
  },
  {
    "text": "Any questions about\nhow this works?  All right. So in summary then, the way that\nwe're going to do MSI is we're",
    "start": "1567702",
    "end": "1575550"
  },
  {
    "text": "going to keep\nthese three states, we're going to make sure that\nonly one process can be modified",
    "start": "1575550",
    "end": "1582540"
  },
  {
    "text": "state, and in\nmodified state, this is the only process that\ncan write in the system",
    "start": "1582540",
    "end": "1589350"
  },
  {
    "text": "to a particular cache line. And if you maintain this\ninvariance by having this Bus,",
    "start": "1589350",
    "end": "1601120"
  },
  {
    "text": "which serializes all the\ntransactions in the system, and makes sure that we move\nfrom the state in one cache",
    "start": "1601120",
    "end": "1613410"
  },
  {
    "text": "to the next in a\nserialized manner. OK? So this is the way the MSI\nworks, and the result is,",
    "start": "1613410",
    "end": "1625289"
  },
  {
    "text": "of course, it keeps the caches\ncoherent, but it has a downside, and that is whenever you\nwant to read a cache line",
    "start": "1625290",
    "end": "1635690"
  },
  {
    "text": "and then write, sometimes going\nfrom shared state to modified",
    "start": "1635690",
    "end": "1641389"
  },
  {
    "text": "state is called an upgrade. So this is the term,\nupgrade, but the problem",
    "start": "1641390",
    "end": "1651770"
  },
  {
    "text": "is that you now have\ntwo Bus transactions. You have the bus\nread, which is a miss,",
    "start": "1651770",
    "end": "1658740"
  },
  {
    "text": "and then you have a bus read\nexclusive, which is also a miss, to upgrade the cache line\nfrom shared to modified.",
    "start": "1658740",
    "end": "1665880"
  },
  {
    "text": "And so the idea is that you\ncan optimize the MSI protocol",
    "start": "1665880",
    "end": "1672170"
  },
  {
    "text": "by adding an exclusive state. This is called the MESI\ninvalidation protocol,",
    "start": "1672170",
    "end": "1678780"
  },
  {
    "text": "not to be confused with the\nArgentinian international soccer superstar.",
    "start": "1678780",
    "end": "1685010"
  },
  {
    "text": "And the idea is that now\nyou're decoupling ownership",
    "start": "1685010",
    "end": "1690200"
  },
  {
    "text": "from whether you have the\nline in modified state. So what does this mean? What does exclusive\nmean in this context?",
    "start": "1690200",
    "end": "1698612"
  },
  {
    "text": " What's another way of\ndescribing the exclusive state?",
    "start": "1698613",
    "end": "1707120"
  },
  {
    "text": "Yeah? [? One ?] is the line is not\ndirty, but one that processor has--",
    "start": "1707120",
    "end": "1712390"
  },
  {
    "text": "Right. So it's clean, exclusive, right? Yeah. All right. So it's clean, but it's--",
    "start": "1712390",
    "end": "1720776"
  },
  {
    "text": "but only one cache has it. And so the idea then is when you\nread a cache line that is not",
    "start": "1720776",
    "end": "1730070"
  },
  {
    "text": "shared by any other processor,\ninstead of bringing it into the cache in shared state,\nyou bring it in exclusive state,",
    "start": "1730070",
    "end": "1738260"
  },
  {
    "text": "because no other\ncache has it, right? So you go from invalid to\nshared would be the typical case",
    "start": "1738260",
    "end": "1752169"
  },
  {
    "text": "if the line was shared. But if the line were\nnot shared, then you",
    "start": "1752170",
    "end": "1757300"
  },
  {
    "text": "could go directly\nto exclusive state. And now the upgrade can be made\nwithout doing a bus transaction.",
    "start": "1757300",
    "end": "1768290"
  },
  {
    "text": "So it's not a miss, it's a hit. And in which case, it's going\nto be a lot more efficient.",
    "start": "1768290",
    "end": "1776890"
  },
  {
    "text": "And so given what you know\nabout the MSI protocol, you can fill in the\nrest of the transitions.",
    "start": "1776890",
    "end": "1784330"
  },
  {
    "text": "And so I'll leave\nthat for you to look at in detail at your leisure.",
    "start": "1784330",
    "end": "1790630"
  },
  {
    "text": "Any questions on\nMESI, MESI protocol? Yeah. Why is it more efficient than\njust taking that far left path",
    "start": "1790630",
    "end": "1798850"
  },
  {
    "text": "of just BusRdX invalid?",
    "start": "1798850",
    "end": "1804740"
  },
  {
    "text": "Where? Sorry. Other one there.",
    "start": "1804740",
    "end": "1810020"
  },
  {
    "text": "This one? Yeah. The BusRdX. So that's if you\ndid a write first.",
    "start": "1810020",
    "end": "1817899"
  },
  {
    "text": "Oh, you want to read-- I want to read first\nand then write.",
    "start": "1817900",
    "end": "1823020"
  },
  {
    "text": "Yeah. OK. Questions?",
    "start": "1823020",
    "end": "1828960"
  },
  {
    "text": "All right. So the problem with buses, of\ncourse, is they don't scale.",
    "start": "1828960",
    "end": "1834440"
  },
  {
    "text": "You've got a single set of\nwires that everybody's sharing, and so that means that every\ntransaction for every cache line",
    "start": "1834440",
    "end": "1844309"
  },
  {
    "text": "is seen by all the\nprocesses, right? Even the processes that\ndon't have that cache line.",
    "start": "1844310",
    "end": "1850789"
  },
  {
    "text": "So that's one problem. One problem is that, of\ncourse, all the processes",
    "start": "1850790",
    "end": "1855960"
  },
  {
    "text": "are sharing this interface\nbetween the caches and memory, and so you're going to\nrun out of bandwidth.",
    "start": "1855960",
    "end": "1862620"
  },
  {
    "text": "And so the other\nissue is that you're serializing all of the bus.",
    "start": "1862620",
    "end": "1871909"
  },
  {
    "text": "So serializing the transactions\nto all the cache lines,",
    "start": "1871910",
    "end": "1877200"
  },
  {
    "text": "whereas we really only\nneed to serialize actions to a particular cache line.",
    "start": "1877200",
    "end": "1883850"
  },
  {
    "text": "And so one way to\npotentially make",
    "start": "1883850",
    "end": "1889169"
  },
  {
    "text": "a system that's more scalable is\nto use the idea of a directory.",
    "start": "1889170",
    "end": "1895660"
  },
  {
    "text": "So the idea of a directory\nis it stores information about which processes actually\nhave this particular cache",
    "start": "1895660",
    "end": "1904410"
  },
  {
    "text": "line in their cache. And then given that information,\nyou can send invalidates,",
    "start": "1904410",
    "end": "1912010"
  },
  {
    "text": "or you can communicate with\njust a set of processes that need to know,\nas opposed to all",
    "start": "1912010",
    "end": "1919440"
  },
  {
    "text": "of the processes in the system. And so this makes it\npossible to use interconnects",
    "start": "1919440",
    "end": "1925110"
  },
  {
    "text": "that are more scalable. So instead of having\na bus, you could have a network or a\nring or something that",
    "start": "1925110",
    "end": "1930960"
  },
  {
    "text": "doesn't require this\nability to broadcast information and serialize all of\nthe transactions in the system.",
    "start": "1930960",
    "end": "1939910"
  },
  {
    "text": "You only need to\nserialize transactions to a particular cache line.",
    "start": "1939910",
    "end": "1946350"
  },
  {
    "text": "So that's the idea\nof directories. And so that's what's\nimplemented these days",
    "start": "1946350",
    "end": "1951540"
  },
  {
    "text": "on most multicore processors.",
    "start": "1951540",
    "end": "1957520"
  },
  {
    "text": "For instance, the I7 that's\nused in your Myth machines. So you've got a\nring interconnect.",
    "start": "1957520",
    "end": "1963870"
  },
  {
    "text": "And the ring interconnect is\nnot a broadcast interconnect, and so snooping won't work here.",
    "start": "1963870",
    "end": "1970150"
  },
  {
    "text": "And it's also, of\ncourse, more scalable. But what we have is\nwe have a directory",
    "start": "1970150",
    "end": "1975390"
  },
  {
    "text": "associated with the L3 cache. For this to work,\nwe have to guarantee",
    "start": "1975390",
    "end": "1981690"
  },
  {
    "text": "that every cache line that could\nbe in any of the L2's will also",
    "start": "1981690",
    "end": "1989220"
  },
  {
    "text": "be in L3. This property is\ncalled inclusion. ",
    "start": "1989220",
    "end": "1998300"
  },
  {
    "text": "So L3 is an inclusive cache. And then we've got a-- for each of the cache lines in\nthe L3, we have a directory.",
    "start": "1998300",
    "end": "2007610"
  },
  {
    "text": "And the directory\nin this case is, you can think of\nit as five bits.",
    "start": "2007610",
    "end": "2015075"
  },
  {
    "text": " So we have a bit for processing\nzero, a bit for processes two,",
    "start": "2015075",
    "end": "2024009"
  },
  {
    "text": "a bit for processes one, two,\nand three, and a dirty bit.",
    "start": "2024010",
    "end": "2029830"
  },
  {
    "text": "So the idea then is that\nif you're in shared state,",
    "start": "2029830",
    "end": "2036720"
  },
  {
    "text": "then multiple bits would be on. So this would indicate\nthat a particular cache",
    "start": "2036720",
    "end": "2042059"
  },
  {
    "text": "line is in cache for\nprocesses zero, one and two.",
    "start": "2042060",
    "end": "2047500"
  },
  {
    "text": "And so if a write\ncame in, then we would know which processes\nto send invalidates to.",
    "start": "2047500",
    "end": "2055169"
  },
  {
    "text": "And then if it were-- if the\ncache line were in modified state, then, of course,\nthere would be a bit set--",
    "start": "2055170",
    "end": "2064109"
  },
  {
    "text": "the dirty bit would be set, and\nthen just one of these bits, say bit for processor\nthree would be set,",
    "start": "2064110",
    "end": "2073649"
  },
  {
    "text": "and the rest would be zeros.  Indicating the only one--",
    "start": "2073650",
    "end": "2079760"
  },
  {
    "text": "we know that whenever\nwe're in modified state, only one of the caches in the\nsystem can have the cache line.",
    "start": "2079760",
    "end": "2087820"
  },
  {
    "text": "So the directory then\nis more scalable, but, of course, you need\nextra information associated",
    "start": "2087820",
    "end": "2095230"
  },
  {
    "text": "with some place in the memory\nsystem that keeps the directory. And there are all\nsorts of schemes",
    "start": "2095230",
    "end": "2101620"
  },
  {
    "text": "for implementing directories\nmore efficiently, but you get the idea.",
    "start": "2101620",
    "end": "2107545"
  },
  {
    "text": "And with a directory-based\ncache coherence scheme, you can scale to tens\nof processes, maybe even",
    "start": "2107545",
    "end": "2114340"
  },
  {
    "text": "hundreds of processes. OK, any questions?",
    "start": "2114340",
    "end": "2120680"
  },
  {
    "text": "All right. So what are the implications\nof cache coherence to the programmer?",
    "start": "2120680",
    "end": "2125960"
  },
  {
    "text": "So the issue, of course, as\nwe've already talked about, is that when you have cache--",
    "start": "2125960",
    "end": "2134640"
  },
  {
    "text": "when you have communication\nin your application, since you're sharing memory,\nand the processes have caches,",
    "start": "2134640",
    "end": "2143589"
  },
  {
    "text": "and the way that\nthe caches are kept coherent is by using cache\ncoherency mechanisms, what's",
    "start": "2143590",
    "end": "2149560"
  },
  {
    "text": "going to happen is that the\ndistribution of misses--",
    "start": "2149560",
    "end": "2157000"
  },
  {
    "text": "of accesses in your\nsystem is going to change. So what's going to\nhappen is that you're",
    "start": "2157000",
    "end": "2162190"
  },
  {
    "text": "going to have an\nincreased number of cache misses at the different levels\nof the memory hierarchy.",
    "start": "2162190",
    "end": "2169280"
  },
  {
    "text": "And if you have a\nNUMA system-- have we talked about NUMA systems?",
    "start": "2169280",
    "end": "2174420"
  },
  {
    "text": "Yeah. OK. So NUMA systems, so if\nyou've got multiple chips, so multiple sockets\nin your system.",
    "start": "2174420",
    "end": "2182240"
  },
  {
    "text": "Suppose socket one,\nlet's call this. ",
    "start": "2182240",
    "end": "2187560"
  },
  {
    "text": "CPU one and CPU two.",
    "start": "2187560",
    "end": "2194740"
  },
  {
    "text": "And these are different sockets. They have DRAM\nassociated with them.",
    "start": "2194740",
    "end": "2200440"
  },
  {
    "start": "2200440",
    "end": "2209040"
  },
  {
    "text": "Dram one, DRAM two. And then there's\nsome interconnect. ",
    "start": "2209040",
    "end": "2216600"
  },
  {
    "text": "And remember, inside these\nCPUs are multiple cores.",
    "start": "2216600",
    "end": "2223250"
  },
  {
    "text": "So the idea is that\nyou have much higher",
    "start": "2223250",
    "end": "2228560"
  },
  {
    "text": "bandwidth to your local\nmemory than you have to-- so CPU one has high\nbandwidth access",
    "start": "2228560",
    "end": "2236960"
  },
  {
    "text": "to its local DRAM\nthan its remote DRAM. And to a first order as\nan application programmer,",
    "start": "2236960",
    "end": "2246090"
  },
  {
    "text": "you could care less,\nbecause you'd rather not have to deal with this issue.",
    "start": "2246090",
    "end": "2251580"
  },
  {
    "text": "But if you actually want to\nget to maximum performance, then you may want to have the\noperating system allocate data",
    "start": "2251580",
    "end": "2259880"
  },
  {
    "text": "such that you have better-- so that data is accessed\nmore often by the processor",
    "start": "2259880",
    "end": "2268940"
  },
  {
    "text": "where that data is local. But anyway, from the point of\nview of the access patterns,",
    "start": "2268940",
    "end": "2276049"
  },
  {
    "text": "NUMA accesses cost you more. So if we're looking at,\nfor instance, the Core I7,",
    "start": "2276050",
    "end": "2285600"
  },
  {
    "text": "we see that an L3 hit is\n40 cycles if it's unshared,",
    "start": "2285600",
    "end": "2295180"
  },
  {
    "text": "it's 65 cycles if it's\nshared, and it's almost 70--",
    "start": "2295180",
    "end": "2300970"
  },
  {
    "text": "almost double, 75\ncycles if it was modified in a different core.",
    "start": "2300970",
    "end": "2306280"
  },
  {
    "text": "So essentially, because\nyou have communication and because you've got a\ncache coherency protocol that",
    "start": "2306280",
    "end": "2315360"
  },
  {
    "text": "is managing this\ncommunication, communication means extra latency,\nextra time, and it also",
    "start": "2315360",
    "end": "2323130"
  },
  {
    "text": "changes the\ndistribution of misses. And so if you think about\nthe average memory access",
    "start": "2323130",
    "end": "2331680"
  },
  {
    "text": "time of your program, it's going\nto be the frequency of access",
    "start": "2331680",
    "end": "2340050"
  },
  {
    "text": "of a particular part\nof the memory hierarchy times the latency of access.",
    "start": "2340050",
    "end": "2346870"
  },
  {
    "text": "And what happens when you go\nfrom a uniprocessor application",
    "start": "2346870",
    "end": "2351900"
  },
  {
    "text": "to a multiprocessor\napplication is that you change the\ndistribution of accesses",
    "start": "2351900",
    "end": "2357900"
  },
  {
    "text": "such that you access levels\nof the memory hierarchy",
    "start": "2357900",
    "end": "2363270"
  },
  {
    "text": "that have longer latency. So the result, of course, is\nyour average memory access time",
    "start": "2363270",
    "end": "2370380"
  },
  {
    "text": "of a multiprocessor or a\nmulti-- a parallel program is going to be larger\nthan a sequential program.",
    "start": "2370380",
    "end": "2378520"
  },
  {
    "text": "And so that is the impact on the\nperformance of your application of the communication overhead.",
    "start": "2378520",
    "end": "2385950"
  },
  {
    "text": "And you can see the latencies\nas shown by the Core I7 data",
    "start": "2385950",
    "end": "2392857"
  },
  {
    "text": "that I've shown you there. If you want to analyze this,\nyou can use system tools.",
    "start": "2392857",
    "end": "2399400"
  },
  {
    "text": "So, for instance, if you're\non an Intel processor, you can use Intel VTune.",
    "start": "2399400",
    "end": "2405150"
  },
  {
    "text": "And Intel VTune will interrogate\nthe performance counting",
    "start": "2405150",
    "end": "2410220"
  },
  {
    "text": "hardware on the processor and\ntell you about cache misses and to some extent,\ncommunication.",
    "start": "2410220",
    "end": "2417160"
  },
  {
    "text": "If you're on an Apple\nM1 machine on a laptop,",
    "start": "2417160",
    "end": "2422950"
  },
  {
    "text": "you might use Apple\nXcode Instruments to get similar\nsorts of information to tell you about what data\nstructures are causing cache",
    "start": "2422950",
    "end": "2432330"
  },
  {
    "text": "misses, and then based on your\nknowledge of the application,",
    "start": "2432330",
    "end": "2437500"
  },
  {
    "text": "you can improve the locality\nto improve performance.",
    "start": "2437500",
    "end": "2443220"
  },
  {
    "text": "So one of the\nthings that happens when you have caches and\ncache lines and sharing",
    "start": "2443220",
    "end": "2453509"
  },
  {
    "text": "is sometimes you get sharing\nwhere you don't expect it. This is called full sharing. So let's look at an example of\nhow and where this can happen.",
    "start": "2453510",
    "end": "2462660"
  },
  {
    "text": "Suppose I've got as\narray of integers",
    "start": "2462660",
    "end": "2469119"
  },
  {
    "text": "based on the number of\nthreads I have in my program. And so the question is, why--",
    "start": "2469120",
    "end": "2478050"
  },
  {
    "text": "I could allocate it\nthe per-thread variable as shown in the\nfirst instance, or I",
    "start": "2478050",
    "end": "2488290"
  },
  {
    "text": "could create a struct\nthat looks like this",
    "start": "2488290",
    "end": "2493700"
  },
  {
    "text": "in the second instance. So can somebody tell me\nwhy this second instance",
    "start": "2493700",
    "end": "2500780"
  },
  {
    "text": "might be more performant? Yeah. Then the data will\n[INAUDIBLE] for each process. What data will be\n[INAUDIBLE] for each process?",
    "start": "2500780",
    "end": "2508180"
  },
  {
    "text": "You're not sharing--\nlike in the first one, the per-thread\nvariables are allocated",
    "start": "2508180",
    "end": "2514960"
  },
  {
    "text": "like in a different cache. So I guess-- it seems to me\nthat the second one would",
    "start": "2514960",
    "end": "2520420"
  },
  {
    "text": "be in the cache that's\nlocal [? written ?] process. Can somebody expand on that?",
    "start": "2520420",
    "end": "2526160"
  },
  {
    "text": "Yeah. In the first case, you could\nhave multiple instances",
    "start": "2526160",
    "end": "2531280"
  },
  {
    "text": "of the counter, like\nmultiple locations going into the same cache line. Whereas in the second one,\nyou ensure that each one",
    "start": "2531280",
    "end": "2538210"
  },
  {
    "text": "is exclusive [INAUDIBLE]. So there's no contention.\n[? So ?] in theory, everything is implemented\nbecause we crush it",
    "start": "2538210",
    "end": "2545020"
  },
  {
    "text": "into a cache line,\nin the first case, we are going to\nhave communication.",
    "start": "2545020",
    "end": "2550480"
  },
  {
    "text": "Exactly right. So remember, cache\ncoherence does communication on the basis of cache lines.",
    "start": "2550480",
    "end": "2556370"
  },
  {
    "text": "So ideally, if you could do it\non a per word or per byte basis,",
    "start": "2556370",
    "end": "2564060"
  },
  {
    "text": "if you could do coherence\non the per byte, it would be very fine grained. It would be great for the\napplication programmer,",
    "start": "2564060",
    "end": "2571080"
  },
  {
    "text": "but a nightmare for\na hardware designer. But the result of using cache\nlines is that we have what",
    "start": "2571080",
    "end": "2579530"
  },
  {
    "text": "is called full sharing,\nwhich is sharing where you don't expect it. So, for instance, if this\nis the worker function,",
    "start": "2579530",
    "end": "2586349"
  },
  {
    "text": "which is essentially\njust going to add a-- increment the per-thread\nvariable, right?",
    "start": "2586350",
    "end": "2593520"
  },
  {
    "text": "And we could implement it-- so we can fire off\na bunch of threads,",
    "start": "2593520",
    "end": "2599810"
  },
  {
    "text": "and we time the two instances.",
    "start": "2599810",
    "end": "2605250"
  },
  {
    "text": "And in the first case,\non a four-core system, it takes 14.2 seconds,\nand in the second case,",
    "start": "2605250",
    "end": "2612320"
  },
  {
    "text": "it takes 4.7 seconds. So dramatic-- of course, this\nis a contrived situation,",
    "start": "2612320",
    "end": "2618480"
  },
  {
    "text": "but false sharing can really\nimpact your performance if it's happening a lot. ",
    "start": "2618480",
    "end": "2627260"
  },
  {
    "text": "And that's an example where,\nof course, these thread-- the data is actually all\nindependent, but because",
    "start": "2627260",
    "end": "2634660"
  },
  {
    "text": "of the fact that the multiple\nthreads, variable local threads variables are landing\non the same cache line,",
    "start": "2634660",
    "end": "2644870"
  },
  {
    "text": "we get this unintended\ncommunication called false sharing.",
    "start": "2644870",
    "end": "2650950"
  },
  {
    "text": "False sharing also happens\nin numerical applications. If you've got some\nof grid application",
    "start": "2650950",
    "end": "2656349"
  },
  {
    "text": "and you have cache lines that\ncross a grid boundary that's",
    "start": "2656350",
    "end": "2663550"
  },
  {
    "text": "been assigned to\ndifferent processes, then you can get false sharing. Here's some data from\nsome old benchmarks that",
    "start": "2663550",
    "end": "2671335"
  },
  {
    "text": "were first written at Stanford\nprobably around 30 years ago but are still being used.",
    "start": "2671335",
    "end": "2677270"
  },
  {
    "text": "And so this is data\nwhich is showing-- it's showing miss rate\nfor different cache line",
    "start": "2677270",
    "end": "2683560"
  },
  {
    "text": "sizes for different\ntypes of misses.",
    "start": "2683560",
    "end": "2689720"
  },
  {
    "text": "So you've got cold\nmisses, which we talked about, capacity\nconflict misses, which we've talked about,\nthen true sharing misses.",
    "start": "2689720",
    "end": "2696599"
  },
  {
    "text": "This is where the data\nis actually shared. And false sharing. And this is where\nthe data is only",
    "start": "2696600",
    "end": "2703250"
  },
  {
    "text": "shared because it happens to\nland on the same cache line. So the first thing to\nnotice is that there's",
    "start": "2703250",
    "end": "2710089"
  },
  {
    "text": "a significant amount of spatial\nlocality in truly shared data.",
    "start": "2710090",
    "end": "2715760"
  },
  {
    "text": "Because you see, as you\nincrease the cache line size, the amount of true sharing\nmisses gets reduced.",
    "start": "2715760",
    "end": "2726119"
  },
  {
    "text": "But take the example\nof radiosity, we see the amount\nof false sharing",
    "start": "2726120",
    "end": "2732020"
  },
  {
    "text": "misses increase with\ncache line size.",
    "start": "2732020",
    "end": "2739835"
  },
  {
    "text": "Which is-- you would expect\nif it was truly just--",
    "start": "2739835",
    "end": "2745335"
  },
  {
    "text": " you'd expect it to go down if it\nwas giving the increased cache",
    "start": "2745335",
    "end": "2755579"
  },
  {
    "text": "line size, but it goes up\nbecause of false sharing. The extreme case is\nradix sort, where",
    "start": "2755580",
    "end": "2762809"
  },
  {
    "text": "you have a dramatic\nincrease in false sharing due to the way that the\napplication is written.",
    "start": "2762810",
    "end": "2768080"
  },
  {
    "text": " So of course, the longer\nyou make the line size,",
    "start": "2768080",
    "end": "2775610"
  },
  {
    "text": "the worse the\nfalse sharing gets. All right? So you can imagine if you got to\na virtual memory size line size,",
    "start": "2775610",
    "end": "2784650"
  },
  {
    "text": "the false sharing\nwould be terrible. So remember way\nback when I said one of the ways of doing\ncoherence is potentially",
    "start": "2784650",
    "end": "2790910"
  },
  {
    "text": "using a virtual memory page\nand the operating system. So forget about the\nsoftware overhead,",
    "start": "2790910",
    "end": "2797100"
  },
  {
    "text": "your false sharing problem\nis going to be horrible. Yeah. If you were intelligent\nenough and always",
    "start": "2797100",
    "end": "2803740"
  },
  {
    "text": "use simply operations which\nwere the size of the cache line, because it's simply,\nthen you would not",
    "start": "2803740",
    "end": "2810790"
  },
  {
    "text": "have this problem, right? Well, false sharing\nhas everything to do with the size\nof the cache line",
    "start": "2810790",
    "end": "2816700"
  },
  {
    "text": "and the data that's\nbeing accessed",
    "start": "2816700",
    "end": "2822130"
  },
  {
    "text": "by the different processes. What happens inside\nthe processor is kind of not relevant.",
    "start": "2822130",
    "end": "2831958"
  },
  {
    "text": "Yeah. Is it like, can you\nalmost guarantee what you can produce\nbefore sharing [INAUDIBLE]",
    "start": "2831958",
    "end": "2837740"
  },
  {
    "text": "programmatically, or is it just\nlike, this is just how it is? Well, you can always do it\nprogrammatically if you space",
    "start": "2837740",
    "end": "2845660"
  },
  {
    "text": "the data apart such that-- ",
    "start": "2845660",
    "end": "2853062"
  },
  {
    "text": "[INAUDIBLE] But you may be increasing\nyour-- you may be wasting space.",
    "start": "2853062",
    "end": "2860300"
  },
  {
    "text": "So you certainly can make sure\nthat you space things apart such",
    "start": "2860300",
    "end": "2865755"
  },
  {
    "text": "that false sharing\ndoesn't occur, but there may be other reasons. Maybe you have phases to your\napplication, and at some point,",
    "start": "2865755",
    "end": "2875830"
  },
  {
    "text": "you need to switch\nthings around, and it may not be convenient\nto organize things in ways",
    "start": "2875830",
    "end": "2881730"
  },
  {
    "text": "that minimize false sharing. But you should be aware of it.",
    "start": "2881730",
    "end": "2887870"
  },
  {
    "text": " OK, so in summary\nthen, of course,",
    "start": "2887870",
    "end": "2895369"
  },
  {
    "text": "the reason that we've got\nthis coherence problem is that we have\nthis shared address space being implemented by\nindependent, separate caches.",
    "start": "2895370",
    "end": "2903480"
  },
  {
    "text": "And in order to maintain\nthe behavior that we want, we want to be able\nto serialize accesses",
    "start": "2903480",
    "end": "2911660"
  },
  {
    "text": "to any particular address such\nthat all the processes see",
    "start": "2911660",
    "end": "2917630"
  },
  {
    "text": "the serialized access--",
    "start": "2917630",
    "end": "2924259"
  },
  {
    "text": "see the same serialized access\nto a particular address. And we said that you could\nimplement cache coherence",
    "start": "2924260",
    "end": "2934009"
  },
  {
    "text": "using a bus as a broadcaster\nnotification mechanism",
    "start": "2934010",
    "end": "2939800"
  },
  {
    "text": "and snooping. However, snooping doesn't scale.",
    "start": "2939800",
    "end": "2944820"
  },
  {
    "text": "And so what you'd\nlike is something that scales, and\ndirectory mechanisms",
    "start": "2944820",
    "end": "2951539"
  },
  {
    "text": "are much more scalable. And so from a software\ndeveloper's point of view,",
    "start": "2951540",
    "end": "2957270"
  },
  {
    "text": "the impact of cache\ncoherence shows itself up most in the ideas that\nyou have full sharing.",
    "start": "2957270",
    "end": "2966790"
  },
  {
    "text": "And that if you can think about\nchanging your applications such",
    "start": "2966790",
    "end": "2974430"
  },
  {
    "text": "that you can reduce\nthe false sharing, then potentially performance\ncould be a lot better. And one way to understand when\nfalse sharing is happening",
    "start": "2974430",
    "end": "2983340"
  },
  {
    "text": "potentially is to use\nsome of these system tools to analyze cache behavior.",
    "start": "2983340",
    "end": "2989442"
  },
  {
    "text": "OK. So now we're going to-- so\nfirst of all, I should ask, are there any questions\nabout cache coherency?",
    "start": "2989443",
    "end": "2997140"
  },
  {
    "text": "All right. So you're-- certainly, there are\nsome exercises in the assignment",
    "start": "2997140",
    "end": "3003059"
  },
  {
    "text": "that cover the stuff. Yeah. We talked about\ndirectory protocol. And then you had mentioned\nthat you're going to track--",
    "start": "3003060",
    "end": "3011116"
  },
  {
    "text": "the different cache\n[INAUDIBLE], right? The size of that\nwill keep increasing",
    "start": "3011116",
    "end": "3016890"
  },
  {
    "text": "with more processes, yes? Yeah, absolutely. And then you might have some\nother schemes for reducing that,",
    "start": "3016890",
    "end": "3023859"
  },
  {
    "text": "but we're not going to\nget into those details. Other question. I was just wondering\nthe benchmark example,",
    "start": "3023860",
    "end": "3029260"
  },
  {
    "text": "why did radix sort\nstart [? increasing-- ?] ensuring better performance with\nincreased cache [INAUDIBLE]?",
    "start": "3029260",
    "end": "3034759"
  },
  {
    "text": "It doesn't. It gets worse. ",
    "start": "3034760",
    "end": "3040431"
  },
  {
    "text": "OK. Then [INAUDIBLE], it\nwas decreasing earlier.",
    "start": "3040431",
    "end": "3045450"
  },
  {
    "text": "Yeah, so-- [INAUDIBLE] ",
    "start": "3045450",
    "end": "3051779"
  },
  {
    "text": "So we're looking at\nmiss rate, right?  So you're saying why does\nit go down and then up?",
    "start": "3051780",
    "end": "3058970"
  },
  {
    "text": "Yeah. You tell me. What do you think? ",
    "start": "3058970",
    "end": "3064694"
  },
  {
    "text": "[INAUDIBLE] OK, so what do we know about\nline size and spatial locality?",
    "start": "3064694",
    "end": "3072260"
  },
  {
    "text": " As line size increases,\nspatial locality increases.",
    "start": "3072260",
    "end": "3079820"
  },
  {
    "text": "Well, spatial locality\nis better exploited. And so the impact of that is--",
    "start": "3079820",
    "end": "3085279"
  },
  {
    "text": "And then you have\nfalse sharing, which-- Full sharing, which\nis pushing things up. And so eventually,\nthe improvements",
    "start": "3085280",
    "end": "3092300"
  },
  {
    "text": "that you get from\nexploiting spatial locality are outweighed by the\ndetriment of false sharing.",
    "start": "3092300",
    "end": "3100849"
  },
  {
    "text": "Yeah. Is eight length the\nstandard cache line size? In most browsers, it's like\n64 or something like that.",
    "start": "3100850",
    "end": "3108500"
  },
  {
    "text": "It depends, but\nusually it's 64, 128. Cache line sizes have been\ngetting longer over time.",
    "start": "3108500",
    "end": "3114200"
  },
  {
    "text": "Yeah. That was interesting. So going back to the\ndirectory-based invalidation",
    "start": "3114200",
    "end": "3119405"
  },
  {
    "text": "protocol and MESI MSI, so\nweren't MESI and MSI primarily",
    "start": "3119405",
    "end": "3125060"
  },
  {
    "text": "used in caches that\ndidn't have [INAUDIBLE]? ",
    "start": "3125060",
    "end": "3130910"
  },
  {
    "text": "Well, so the\ndirectory mechanism is somewhat orthogonal to the\nexact protocol you're using.",
    "start": "3130910",
    "end": "3140440"
  },
  {
    "text": "It's just a way of-- I mean, you could still have\nmodified exclusive shared.",
    "start": "3140440",
    "end": "3148520"
  },
  {
    "text": "And the question is, when do\nyou indicate to the processor that you should pay\nattention to a transaction?",
    "start": "3148520",
    "end": "3157750"
  },
  {
    "text": "You could do it with a bus,\nwhere everybody is snooping, or you could do it with\nthe directory, which",
    "start": "3157750",
    "end": "3163069"
  },
  {
    "text": "has point to point messages\nand is more scalable. But you still keep the\nsame states, right?",
    "start": "3163070",
    "end": "3168920"
  },
  {
    "text": " The answer? Yes",
    "start": "3168920",
    "end": "3177349"
  },
  {
    "text": "All right. ",
    "start": "3177350",
    "end": "3183440"
  },
  {
    "text": "Yeah, so let's talk about\nmemory consistency, right? Which is the kind of\nother side of the coin",
    "start": "3183440",
    "end": "3189049"
  },
  {
    "text": "of dealing with memory\nand multi-processes.",
    "start": "3189050",
    "end": "3194130"
  },
  {
    "text": "So we talked about how loads\nand store should behave.",
    "start": "3194130",
    "end": "3200240"
  },
  {
    "text": "Intuitively, you want to return\nthe latest value written, right? And we said coherence\nsays we're just",
    "start": "3200240",
    "end": "3208700"
  },
  {
    "text": "going to talk about a\nsingle memory location. Memory consistency says, what\nabout the apparent ordering of",
    "start": "3208700",
    "end": "3216140"
  },
  {
    "text": "reads and writes to\ndifferent addresses by different processes?",
    "start": "3216140",
    "end": "3221270"
  },
  {
    "text": "How should they be\nordered, and how should we interpret the behavior of\na program, a shared memory",
    "start": "3221270",
    "end": "3227330"
  },
  {
    "text": "program that does this? So this is going to affect\nhow we interpret programs.",
    "start": "3227330",
    "end": "3236540"
  },
  {
    "text": "What programs mean,\nand by telling us what is the allowed\nbehavior of the memory system",
    "start": "3236540",
    "end": "3246060"
  },
  {
    "text": "or the compiler and\nthe memory system--",
    "start": "3246060",
    "end": "3251310"
  },
  {
    "text": "and the memory system. And so it's important because\nthe way in which you allow loads",
    "start": "3251310",
    "end": "3260760"
  },
  {
    "text": "and stores to different\naddresses to be reordered is going to have a big impact\non how performant our system is.",
    "start": "3260760",
    "end": "3270309"
  },
  {
    "text": "And it's also going to affect\nwhat I as the programmer",
    "start": "3270310",
    "end": "3276990"
  },
  {
    "text": "can do to improve the\nperformance of my program.",
    "start": "3276990",
    "end": "3282520"
  },
  {
    "text": "So what are we\ngoing to focus on?",
    "start": "3282520",
    "end": "3289810"
  },
  {
    "text": "So let's see. ",
    "start": "3289810",
    "end": "3302540"
  },
  {
    "text": "So why should you care? So if you want to implement\na synchronization library,",
    "start": "3302540",
    "end": "3307730"
  },
  {
    "text": "you really need to pay\nattention to memory consistency. And if you want to develop a\ncompiler or low-level OS code,",
    "start": "3307730",
    "end": "3318060"
  },
  {
    "text": "then it's important\nto understand about memory consistency. It turns out that if you are\nan application programmer who",
    "start": "3318060",
    "end": "3326090"
  },
  {
    "text": "does most of their development\nusing a compiler, so",
    "start": "3326090",
    "end": "3332324"
  },
  {
    "text": "a sort of high-level\nlanguage programmer, or you are going to use kernel\nlibraries or system libraries,",
    "start": "3332324",
    "end": "3342690"
  },
  {
    "text": "then it's not so\nimportant to understand the details of the\nmemory consistency model.",
    "start": "3342690",
    "end": "3348750"
  },
  {
    "text": "But if you are kind\nof a low-level system developer like potentially\nthe people in this class,",
    "start": "3348750",
    "end": "3354720"
  },
  {
    "text": "then it's important\nto understand. So memory consistency, it\ndiffers from memory coherence",
    "start": "3354720",
    "end": "3361550"
  },
  {
    "text": "because we're talking about\nmultiple different addresses. So what memory\nconsistency focuses on",
    "start": "3361550",
    "end": "3369300"
  },
  {
    "text": "is reads and writes to\ndifferent locations as observed",
    "start": "3369300",
    "end": "3374760"
  },
  {
    "text": "by different processes. So coherence says,\nhey, eventually, any",
    "start": "3374760",
    "end": "3380549"
  },
  {
    "text": "writes made to a\nparticular address will all be seen by all the\nprocesses in the same order.",
    "start": "3380550",
    "end": "3386740"
  },
  {
    "text": "And consistency says, when\nwrites to different-- reads",
    "start": "3386740",
    "end": "3392369"
  },
  {
    "text": "and writes to\ndifferent addresses gets seen by reads\nfrom other processes. So said it slightly differently.",
    "start": "3392370",
    "end": "3400940"
  },
  {
    "text": "The goal of coherence is ensure\nthe memory system behaves",
    "start": "3400940",
    "end": "3406650"
  },
  {
    "text": "as if the caches weren't there. So you imagine that\nany system that has multiple-- has caches in\nthe system needs to be coherent.",
    "start": "3406650",
    "end": "3418285"
  },
  {
    "text": "It's kind of fundamental. You don't want to work\nwith a system that's not cache coherent.",
    "start": "3418285",
    "end": "3424580"
  },
  {
    "text": "But even if you had a\nsystem without caches, you would still need a\nmemory consistency model.",
    "start": "3424580",
    "end": "3430700"
  },
  {
    "text": "So even systems without caches\nneed a memory consistency model because we need to define the\nallowed behavior of the memory",
    "start": "3430700",
    "end": "3440030"
  },
  {
    "text": "system, whether or not there\nare caches in the system.",
    "start": "3440030",
    "end": "3445070"
  },
  {
    "text": "All right? So to give you a\npreview of what we're going to talk about, in a\nmodern multiprocessor system,",
    "start": "3445070",
    "end": "3456000"
  },
  {
    "text": "memory accesses are\ngoing to get reordered. And the main reason for doing\nthat is to improve performance.",
    "start": "3456000",
    "end": "3463850"
  },
  {
    "text": "But then the question\nis, what does that mean to the programmer? Well, if you're an\napplication programmer,",
    "start": "3463850",
    "end": "3471750"
  },
  {
    "text": "you probably don't care so much. But if you are a systems\nprogrammer or a compiler writer,",
    "start": "3471750",
    "end": "3477340"
  },
  {
    "text": "then you care a lot, right? Because it's going\nto affect what you can do in your\ncompiler, it's",
    "start": "3477340",
    "end": "3483480"
  },
  {
    "text": "going to affect the behavior\nof your low level system code.",
    "start": "3483480",
    "end": "3488560"
  },
  {
    "text": "OK. So let's define a\nfew things here. So there are four types\nof memory orderings",
    "start": "3488560",
    "end": "3498000"
  },
  {
    "text": "that we can have in the system. So you've got a program defines\na bunch of reads and writes,",
    "start": "3498000",
    "end": "3503340"
  },
  {
    "text": "loads and stores. And these happen\nin program order. And the question is whether\nthe memory system maintains",
    "start": "3503340",
    "end": "3512080"
  },
  {
    "text": "this program order or not. ",
    "start": "3512080",
    "end": "3517960"
  },
  {
    "text": "Well, for any\nparticular thread, it's going to maintain\nthe program order. The question is what it does to\naccesses from different threads.",
    "start": "3517960",
    "end": "3529480"
  },
  {
    "text": "So you have four types\nof operation orderings.",
    "start": "3529480",
    "end": "3535150"
  },
  {
    "text": "A write of x to a\nread of y is called--",
    "start": "3535150",
    "end": "3541569"
  },
  {
    "text": " is write to read\nmemory ordering. ",
    "start": "3541570",
    "end": "3549490"
  },
  {
    "text": "So that says that the write\nof x has to commit and change",
    "start": "3549490",
    "end": "3554619"
  },
  {
    "text": "the state of the memory before\nthe read of y takes place.",
    "start": "3554620",
    "end": "3560270"
  },
  {
    "text": "So that's write to\nread memory ordering. There's read to read\nmemory ordering,",
    "start": "3560270",
    "end": "3567260"
  },
  {
    "text": "there's read to write\nmemory ordering, and there's write to\nwrite memory ordering. So the key thing, of\ncourse, is that x and y",
    "start": "3567260",
    "end": "3576460"
  },
  {
    "text": "are different addresses. So these are the four\ntypes of memory orderings.",
    "start": "3576460",
    "end": "3583250"
  },
  {
    "text": "And the question is,\nwhat memory orderings are going to be maintained\nby the memory system?",
    "start": "3583250",
    "end": "3589480"
  },
  {
    "text": "So in order to get our\nheads thinking about this,",
    "start": "3589480",
    "end": "3595490"
  },
  {
    "text": "let's look at a\nvery simple program. So initially, A and B are 0.",
    "start": "3595490",
    "end": "3601750"
  },
  {
    "text": "And processes 0, we\nset A to 1, and then we",
    "start": "3601750",
    "end": "3607810"
  },
  {
    "text": "print B. And processes 1, we\nset B to 1 and then print A.",
    "start": "3607810",
    "end": "3614520"
  },
  {
    "text": "So why don't you discuss\nwith your neighbor and tell me which one of\nthese outputs can be printed.",
    "start": "3614520",
    "end": "3624360"
  },
  {
    "text": "So I'll give you a\nminute to think about it. ",
    "start": "3624360",
    "end": "3638039"
  },
  {
    "text": "What do you think?  Any of them.",
    "start": "3638040",
    "end": "3643700"
  },
  {
    "text": "Huh? Any of them. Any of them. So we have option\nfor any of them.",
    "start": "3643700",
    "end": "3649710"
  },
  {
    "text": "Do we have another view\nof what can be printed? Yeah.",
    "start": "3649710",
    "end": "3654750"
  },
  {
    "text": "Is it just 11? 11. Well, I think that's possible.",
    "start": "3654750",
    "end": "3660680"
  },
  {
    "text": "So 11.  What else? 01.",
    "start": "3660680",
    "end": "3667390"
  },
  {
    "text": "Yeah, 01.  Can 10 be printed?",
    "start": "3667390",
    "end": "3674349"
  },
  {
    "text": "Someone said yes,\nsomeone said no. ",
    "start": "3674350",
    "end": "3682260"
  },
  {
    "text": "Yes? Well, not clear. But let's see.",
    "start": "3682260",
    "end": "3688050"
  },
  {
    "text": "So let's put a double\nquestion mark by that. What about 00?",
    "start": "3688050",
    "end": "3693460"
  },
  {
    "text": "Is that permissible? No. OK. So that's not.",
    "start": "3693460",
    "end": "3698480"
  },
  {
    "text": "All right. So in order to understand\nwhat could be printed, a useful way to think\nabout it is in terms of",
    "start": "3698480",
    "end": "3705510"
  },
  {
    "text": "happens before graph, right? So what's required-- what has\nto happen before what in order",
    "start": "3705510",
    "end": "3713369"
  },
  {
    "text": "to allow the output\nthat you expect? So remember, when you are\nexecuting in a multiprocessor",
    "start": "3713370",
    "end": "3720720"
  },
  {
    "text": "environment, the instructions\nof the different threads on the different processes\ncan be interleaved",
    "start": "3720720",
    "end": "3727830"
  },
  {
    "text": "in any manner in time. Now, on any particular\nthread, the instructions",
    "start": "3727830",
    "end": "3733590"
  },
  {
    "text": "are going to be executed\nin program order. But when they get interleaved\ninto the global order, whatever",
    "start": "3733590",
    "end": "3740670"
  },
  {
    "text": "that may be, is going to\nbe dependent on things that you can't control.",
    "start": "3740670",
    "end": "3746869"
  },
  {
    "text": "So let's assume that we want\na particular output like 00.",
    "start": "3746870",
    "end": "3754700"
  },
  {
    "text": "So that says that we would\nneed to have the print of B",
    "start": "3754700",
    "end": "3760060"
  },
  {
    "text": "happen before B gets\nset to 1, right?",
    "start": "3760060",
    "end": "3765560"
  },
  {
    "text": "And we'd also need\nthe print of A to happen before\nA gets set to 1.",
    "start": "3765560",
    "end": "3774240"
  },
  {
    "text": "And we know the program order\non any particular thread is statement one\nbefore statement two,",
    "start": "3774240",
    "end": "3784050"
  },
  {
    "text": "and statement three\nbefore statement four. So we put those arcs in. And then what we\nhave is a cycle.",
    "start": "3784050",
    "end": "3791190"
  },
  {
    "text": "So we don't-- so when\nwe've got a cycle, we know that the outcome is\nimpossible because an event must",
    "start": "3791190",
    "end": "3798690"
  },
  {
    "text": "happen before it's\nheld, before itself. And so that says we can't\nget 00, and we can't get 10.",
    "start": "3798690",
    "end": "3807790"
  },
  {
    "text": "Yeah. If you have a stored\nbuffer and you're like out-of-order operating\nand rearranging a read",
    "start": "3807790",
    "end": "3815710"
  },
  {
    "text": "or read to occur before write. Could you have 00?",
    "start": "3815710",
    "end": "3821290"
  },
  {
    "text": "We'll see. That's a good question. And we're going to\ninvestigate that.",
    "start": "3821290",
    "end": "3828250"
  },
  {
    "text": "All right. So the question is, what should\nthe programmer really expect?",
    "start": "3828250",
    "end": "3834119"
  },
  {
    "text": "Well, one, if I\nkind of asked you, given what you know\nabout shared memory",
    "start": "3834120",
    "end": "3840530"
  },
  {
    "text": "so far, what you\nwould probably say is, hey, there's some\nglobal ordering",
    "start": "3840530",
    "end": "3846130"
  },
  {
    "text": "to all of the accesses\nin the system,",
    "start": "3846130",
    "end": "3852089"
  },
  {
    "text": "and I want to respect\nthat global ordering. And I also want-- I want to have the global\nordering that everybody sees.",
    "start": "3852090",
    "end": "3859630"
  },
  {
    "text": "That I can serialize\nall the accesses, memory accesses in the system.",
    "start": "3859630",
    "end": "3866770"
  },
  {
    "text": "And also, of course,\nthat global order would mean that any particular\nthread, the memory accesses",
    "start": "3866770",
    "end": "3874760"
  },
  {
    "text": "are made in program\norder, right? So what you would be\ndescribing loosely",
    "start": "3874760",
    "end": "3881090"
  },
  {
    "text": "is what was formally defined\nby Leslie Lamport in 1976 as sequential consistency.",
    "start": "3881090",
    "end": "3888240"
  },
  {
    "text": "So sequential consistency,\nfor which she partly won the Turing Award\nin 2013, basically",
    "start": "3888240",
    "end": "3896540"
  },
  {
    "text": "says that all\noperations are executed in some sequential order as\nif they were manipulating",
    "start": "3896540",
    "end": "3903830"
  },
  {
    "text": "a single shared memory. And then any of\nthe accesses or any",
    "start": "3903830",
    "end": "3910130"
  },
  {
    "text": "of the operations in any\nparticular thread are always--",
    "start": "3910130",
    "end": "3916519"
  },
  {
    "text": "happen in program order. And so that means that\nsequentially consistent systems",
    "start": "3916520",
    "end": "3923090"
  },
  {
    "text": "maintain all of the\nfour memory orderings",
    "start": "3923090",
    "end": "3931090"
  },
  {
    "text": "that we just described. Write to read, read to\nread, read to write, and write to write.",
    "start": "3931090",
    "end": "3937609"
  },
  {
    "text": "So we've got this\nsequential global order, and notice that this\ndiagram slightly",
    "start": "3937610",
    "end": "3944859"
  },
  {
    "text": "changed from the coherence\nexample in that we now have multiple addresses\nx and y in the diagram,",
    "start": "3944860",
    "end": "3953120"
  },
  {
    "text": "and there's some\nglobal order, right? One way of kind of thinking\nabout sequential consistency",
    "start": "3953120",
    "end": "3959350"
  },
  {
    "text": "is this switch\nmetaphor where you've got a single shared memory,\nyou've got this pointer,",
    "start": "3959350",
    "end": "3965020"
  },
  {
    "text": "and this pointer randomly\npoints to any of the processes,",
    "start": "3965020",
    "end": "3971500"
  },
  {
    "text": "accepts a memory operation\nfrom the processor,",
    "start": "3971500",
    "end": "3976660"
  },
  {
    "text": "and then flips to\nanother processor and takes some random number of\naccesses from that processor.",
    "start": "3976660",
    "end": "3986760"
  },
  {
    "text": "So we've got this idea of\nsequential consistency. So here's the picture.",
    "start": "3986760",
    "end": "3992855"
  },
  {
    "text": "We've got A equals 1, 1\nequals B, B equals 1, 2",
    "start": "3992855",
    "end": "3999440"
  },
  {
    "text": "equals A on processor 0. In processor 1, we\nstart by executing",
    "start": "3999440",
    "end": "4006640"
  },
  {
    "text": "an operation from\nprocessor 0, followed by an operation\nfrom processor 1,",
    "start": "4006640",
    "end": "4014150"
  },
  {
    "text": "followed by an operation\nfrom processor 1, and then finally an\noperation from processor 0.",
    "start": "4014150",
    "end": "4021040"
  },
  {
    "text": " So with a switch\nmetaphor, then you can look at the interleavings\nthat you might get,",
    "start": "4021040",
    "end": "4029109"
  },
  {
    "text": "and you would see-- we go back; this is just\nanother representation of that first example--",
    "start": "4029110",
    "end": "4034780"
  },
  {
    "text": "that both 00 and 10 are illegal.",
    "start": "4034780",
    "end": "4039880"
  },
  {
    "text": "You can never get it from\nsequential consistency. OK. So why might we want to\nrelax these orderings?",
    "start": "4039880",
    "end": "4050440"
  },
  {
    "text": "So do something other than\nsequential consistency? So from the point of\nview of a programmer, sequential consistency is the\nmost obvious and intuitive",
    "start": "4050440",
    "end": "4057960"
  },
  {
    "text": "thing. If I look at a program and I\nthink about its multiprocessor execution, what I want to see\nwould be sequential consistency.",
    "start": "4057960",
    "end": "4066819"
  },
  {
    "text": "And the question is, why\nwould any system implementer want anything else?",
    "start": "4066820",
    "end": "4072400"
  },
  {
    "text": "And the reason is, of course,\nit's always performance. That's what this class is about.",
    "start": "4072400",
    "end": "4078450"
  },
  {
    "text": "So we want to\nrelax the orderings so we can get more performance. In particular, there was\nsome comment about, hey,",
    "start": "4078450",
    "end": "4085599"
  },
  {
    "text": "what if I had a write which\nwas going to miss the cache,",
    "start": "4085600",
    "end": "4090665"
  },
  {
    "text": "and you have to do\nall sorts of things. It's going to take a long time. Followed by a read,\nand maybe this read",
    "start": "4090665",
    "end": "4096149"
  },
  {
    "text": "is going to hit the cache. They are two\ndifferent addresses. They're unrelated. Why shouldn't I do the\nread before the write?",
    "start": "4096149",
    "end": "4106259"
  },
  {
    "text": "Or at least maybe I want\nto overlap the two, right? So if you think about\nfrom the point of view",
    "start": "4106260",
    "end": "4112229"
  },
  {
    "text": "of the application,\nthe application wants to read its data\nas early as possible. And who cares about the writes?",
    "start": "4112229",
    "end": "4119799"
  },
  {
    "text": "You can push them\noff later or try and overlap them\nwith other reads. So that would be the\nidea, is that why wait",
    "start": "4119800",
    "end": "4127710"
  },
  {
    "text": "for the write to finish, which\nwould be sequential consistency? Let's at least overlap\nand maybe reorder.",
    "start": "4127710",
    "end": "4135330"
  },
  {
    "text": "So let's see what\nhappens when you do that.",
    "start": "4135330",
    "end": "4140398"
  },
  {
    "text": "So the problem with\nSC is, of course, that you've got this case\nwhere these two accesses are",
    "start": "4140398",
    "end": "4150689"
  },
  {
    "text": "unrelated, and you'd like to\nhave the read happen before",
    "start": "4150689",
    "end": "4156600"
  },
  {
    "text": "or earlier than the write,\nbecause the write is going to take a long time. So somebody said write buffer.",
    "start": "4156600",
    "end": "4163500"
  },
  {
    "text": "Good idea. Let's put a write buffer in. So the write buffer is going to\nbasically say, hey, you write.",
    "start": "4163500",
    "end": "4170399"
  },
  {
    "text": "You're going to go--\neventually, it's going to be sent to\nthe memory system. But in the meantime, hold\noff, don't use the bus,",
    "start": "4170399",
    "end": "4178710"
  },
  {
    "text": "don't use the\nresources because I'm going to issue the read first\nbecause the processor is waiting",
    "start": "4178710",
    "end": "4185250"
  },
  {
    "text": "for the read. And that's going to-- if I get the read earlier, then\nI will get better performance.",
    "start": "4185250",
    "end": "4194610"
  },
  {
    "text": "So I'm going to put\na write buffer in. And the problem\nwith a write buffer",
    "start": "4194610",
    "end": "4201160"
  },
  {
    "text": "is it's going to change\nmy memory behavior. So in the case of can\nR1 and R2 equal 0,",
    "start": "4201160",
    "end": "4213350"
  },
  {
    "text": "we said in sequential\nconsistency, that can happen. So the question is, how could\nit happen with write buffers?",
    "start": "4213350",
    "end": "4220710"
  },
  {
    "text": " You asked the question,\nso you tell me.",
    "start": "4220710",
    "end": "4227260"
  },
  {
    "text": "If you have the writes just\nsitting in the write buffers, and then you go ahead and\nexecute the reads while",
    "start": "4227260",
    "end": "4234280"
  },
  {
    "text": "that's occurring, then\nyou would read 00. Right. So in this case,\nyou would read 00.",
    "start": "4234280",
    "end": "4240559"
  },
  {
    "text": "And that's not\nsequentially consistent.",
    "start": "4240560",
    "end": "4246710"
  },
  {
    "text": "It may not be obvious why\nthis behavior should be.",
    "start": "4246710",
    "end": "4253610"
  },
  {
    "text": "And the question is, OK,\nso I have a write buffer. We said the reason that\nyou want to reorder things",
    "start": "4253610",
    "end": "4259750"
  },
  {
    "text": "is to improve performance. This just shows you\na couple of examples where you can get performance\nimprovement that's",
    "start": "4259750",
    "end": "4269860"
  },
  {
    "text": "pretty substantial by\nhaving a write buffer between the processor\nand the cache.",
    "start": "4269860",
    "end": "4279230"
  },
  {
    "text": "Or maybe you put\nthe write buffer on the other side of the cache\nbetween the cache and the bus.",
    "start": "4279230",
    "end": "4286632"
  },
  {
    "text": "So write buffers are important. Every major instruction\nset architecture",
    "start": "4286632",
    "end": "4293120"
  },
  {
    "text": "supports write buffers. And the problem is,\nwrite buffers don't fit",
    "start": "4293120",
    "end": "4299090"
  },
  {
    "text": "within sequential consistency. You need a weaker\nconsistency model to have a write\nbuffer, because--",
    "start": "4299090",
    "end": "4305930"
  },
  {
    "text": "and you want it because you want\nthe improved performance that comes from that. But now you need a\nweaker memory model,",
    "start": "4305930",
    "end": "4313620"
  },
  {
    "text": "one like total store order\nor processor consistency--",
    "start": "4313620",
    "end": "4319790"
  },
  {
    "text": "or partial store order. And in total store order\nand partial store order,",
    "start": "4319790",
    "end": "4327360"
  },
  {
    "text": "you are going to relax\nthe first ordering case.",
    "start": "4327360",
    "end": "4333219"
  },
  {
    "text": "So write to read order. You're going to allow\nreads to happen in the--",
    "start": "4333220",
    "end": "4340050"
  },
  {
    "text": "write to x followed\nby a read to y to happen in a different order.",
    "start": "4340050",
    "end": "4345430"
  },
  {
    "text": "So total store ordering\nor partial store ordering. This should actually be--",
    "start": "4345430",
    "end": "4351770"
  },
  {
    "start": "4351770",
    "end": "4358140"
  },
  {
    "text": "processor consistency is\nactually something different. ",
    "start": "4358140",
    "end": "4364750"
  },
  {
    "text": "Which is PSO. And so now we're\ngoing to allow you",
    "start": "4364750",
    "end": "4369910"
  },
  {
    "text": "to overlap the\nread with the write",
    "start": "4369910",
    "end": "4376270"
  },
  {
    "text": "and somehow reduce the\nimpact of the write latency.",
    "start": "4376270",
    "end": "4381860"
  },
  {
    "text": "So hide the write latency.  So total store ordering\nbasically says--",
    "start": "4381860",
    "end": "4390793"
  },
  {
    "start": "4390793",
    "end": "4397550"
  },
  {
    "text": "yeah, total store\nordering says processor can read B before it writes to\nA is seen by all the processes.",
    "start": "4397550",
    "end": "4407960"
  },
  {
    "text": "And the processor consistency-- I thought-- I mixed them up.",
    "start": "4407960",
    "end": "4418330"
  },
  {
    "text": "Sorry, processor consistency-- ",
    "start": "4418330",
    "end": "4424920"
  },
  {
    "text": "Yeah, so I think--\nanyway, I'll get it right. I think this is right. ",
    "start": "4424920",
    "end": "4431060"
  },
  {
    "text": "So this is the one\nthat says, hey, you can reorder the\nwrites and the reads,",
    "start": "4431060",
    "end": "4436680"
  },
  {
    "text": "and the question--\nthe difference between total store ordering\nand processor consistency is when everybody gets\nto see the stores.",
    "start": "4436680",
    "end": "4444630"
  },
  {
    "text": "In total store\nordering, everybody sees the stores\nin the same order. In what I thought was\npartial store ordering,",
    "start": "4444630",
    "end": "4453300"
  },
  {
    "text": "some get to see it earlier. But anyway, I'll make\nsure that I actually get--",
    "start": "4453300",
    "end": "4459990"
  },
  {
    "text": " there is a joke\nthat says something",
    "start": "4459990",
    "end": "4466200"
  },
  {
    "text": "like there are two hard\nthings in computer science, naming things and process--",
    "start": "4466200",
    "end": "4471390"
  },
  {
    "text": "and memory consistency. So this is the-- ",
    "start": "4471390",
    "end": "4476580"
  },
  {
    "text": "Exactly. So anyway. All right. So coherency, because\nwe got caches,",
    "start": "4476580",
    "end": "4484570"
  },
  {
    "text": "consistency, because we need\nto have a way of understanding",
    "start": "4484570",
    "end": "4489929"
  },
  {
    "text": "what our programs mean. We can do things that are even\nmore aggressive than allowing",
    "start": "4489930",
    "end": "4501030"
  },
  {
    "text": "writes to bypass-- allowing reads to bypass writes. We can reorder writes.",
    "start": "4501030",
    "end": "4507030"
  },
  {
    "text": "And this is partial\nstore ordering. And in this case,\nif we are protecting",
    "start": "4507030",
    "end": "4515250"
  },
  {
    "text": "a change of a\nvariable from a flag, we're trying to do\nsynchronization,",
    "start": "4515250",
    "end": "4520930"
  },
  {
    "text": "then things could get\nreordered and our behavior would be not what we expect.",
    "start": "4520930",
    "end": "4528990"
  },
  {
    "text": "So again, we're going to do\nthis to improve performance. The way that we--",
    "start": "4528990",
    "end": "4535710"
  },
  {
    "text": "we can get rid of them all. And by the way, who\nhas a cell phone?",
    "start": "4535710",
    "end": "4541250"
  },
  {
    "text": " [INAUDIBLE] uses what's\ncalled relaxed consistency.",
    "start": "4541250",
    "end": "4550030"
  },
  {
    "text": "So it doesn't have any of\nthese orderings in its memory-- in its memory consistency model.",
    "start": "4550030",
    "end": "4556730"
  },
  {
    "text": "And so how do you\nfix this problem? Well, you put fences in.",
    "start": "4556730",
    "end": "4563800"
  },
  {
    "text": "How do you fix any problem\nin parallel computing? you slow things down.",
    "start": "4563800",
    "end": "4571449"
  },
  {
    "text": "Locking is a mechanism\nfor slowing things down.",
    "start": "4571450",
    "end": "4577690"
  },
  {
    "text": "And fencing is even worse. So fencing says, we're going\nto wait for the memory system",
    "start": "4577690",
    "end": "4582790"
  },
  {
    "text": "to quiesce. And everybody is going to\nmake sure that their memory--",
    "start": "4582790",
    "end": "4589900"
  },
  {
    "text": "all the processes are\ngoing to make sure that they have issued all\ntheir memory, their operations",
    "start": "4589900",
    "end": "4599860"
  },
  {
    "text": "before we allow any of them\nto go beyond the fence. So this is a hardware mechanism\nthat gets implemented.",
    "start": "4599860",
    "end": "4607940"
  },
  {
    "text": "Yeah. [INAUDIBLE] also for some reason\nbecause of this, or is it just [INAUDIBLE]?",
    "start": "4607940",
    "end": "4614500"
  },
  {
    "text": "Well, it's both the\nsimpler implementation and also higher performance.",
    "start": "4614500",
    "end": "4620280"
  },
  {
    "text": "But it means from the systems\nprogrammer's point of view, it's more tricky to deal with. But the way to deal with\nit is to add fences.",
    "start": "4620280",
    "end": "4628710"
  },
  {
    "text": "And you can have fences, you\ncan have store fences and load",
    "start": "4628710",
    "end": "4634640"
  },
  {
    "text": "fences. And this all gets pretty tricky. And I'd refer you to lots\nof online documentation",
    "start": "4634640",
    "end": "4641930"
  },
  {
    "text": "if you want the details. So the problem is data races. Is that you've got two\naccesses to the same address.",
    "start": "4641930",
    "end": "4651320"
  },
  {
    "text": "At least one of them\nis a store, and you don't have any synchronization\nbetween the loads",
    "start": "4651320",
    "end": "4659180"
  },
  {
    "text": "and the stores. And so you have an\nunsynchronized program. And whenever you have\nunsynchronized program,",
    "start": "4659180",
    "end": "4666510"
  },
  {
    "text": "then you can get data races. And when you have data races,\nyou can get unintended behavior.",
    "start": "4666510",
    "end": "4672150"
  },
  {
    "text": "And so the question\nis, how do you make sure that you\ncan run programs",
    "start": "4672150",
    "end": "4677990"
  },
  {
    "text": "on a machine that\ndoesn't support sequential consistency\nbut still have behavior",
    "start": "4677990",
    "end": "4683090"
  },
  {
    "text": "that you can understand? You make them synchronized. So that's the whole idea behind\ndata race-free programming,",
    "start": "4683090",
    "end": "4692270"
  },
  {
    "text": "is don't write code that uses\nunsynchronized accesses to data.",
    "start": "4692270",
    "end": "4698750"
  },
  {
    "text": "Whenever you've got\nshared data, make sure you put in synchronization. And then the people who actually\nwrite the synchronization",
    "start": "4698750",
    "end": "4706400"
  },
  {
    "text": "libraries have to understand\nthe memory consistency behavior of the\nunderlying processor,",
    "start": "4706400",
    "end": "4711980"
  },
  {
    "text": "and the people who\ndevelop the compilers have to understand these issues. But you as the\napplication programmer",
    "start": "4711980",
    "end": "4718639"
  },
  {
    "text": "can just rely on the\nfact that somebody who's much more\nknowledgeable than you",
    "start": "4718640",
    "end": "4726440"
  },
  {
    "text": "has done the right\nthing and given you a library, a call that\nyou can just make.",
    "start": "4726440",
    "end": "4732573"
  },
  {
    "text": "So I think we're at time. So we're going to just-- turns out that memory\nconsistency really needs",
    "start": "4732574",
    "end": "4740300"
  },
  {
    "text": "to be dealt with at two levels. At the hardware level,\nwhat the hardware provides, but also at\nthe language level.",
    "start": "4740300",
    "end": "4747429"
  },
  {
    "text": "So we'll say a few words\nabout that next time. See you next week.",
    "start": "4747430",
    "end": "4752450"
  },
  {
    "start": "4752450",
    "end": "4755000"
  }
]