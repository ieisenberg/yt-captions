[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "The plan for today is what I am gonna talk about is the topic of convolutional neural networks.",
    "start": "4280",
    "end": "10710"
  },
  {
    "text": "So essentially, um, there's actually quite a lot of content in this lecture of different things that's good to know about,",
    "start": "10710",
    "end": "17700"
  },
  {
    "text": "since essentially this is going to be learn about convolutional neural networks in one large bite for NLP.",
    "start": "17700",
    "end": "24840"
  },
  {
    "text": "So, um, bit on announcements, explain the general idea of convolutional neural networks,",
    "start": "24840",
    "end": "30945"
  },
  {
    "text": "and then for quite a bit of it, I want to go through in sort of some detail to particular papers that made",
    "start": "30945",
    "end": "38490"
  },
  {
    "text": "use of convolutional neural networks for text classification, sentence classification tasks.",
    "start": "38490",
    "end": "44235"
  },
  {
    "text": "Um, the first is a sort of a pretty simple, um, CNN that was done in 2014,",
    "start": "44235",
    "end": "50370"
  },
  {
    "text": "and then the second one is a way more complex CNN that was done much more recently in 2017.",
    "start": "50370",
    "end": "58435"
  },
  {
    "text": "Okay. But first, a couple of announcements. Um, firstly, the last reminder on the mid-quarter feedback survey.",
    "start": "58435",
    "end": "66360"
  },
  {
    "start": "60000",
    "end": "133000"
  },
  {
    "text": "So tons of you have done the- this already. Thank you, thank you very much. Um, but if you'd still be putting it off till the very last minute, um,",
    "start": "66360",
    "end": "74340"
  },
  {
    "text": "tonight at midnight is your last chance, um, to fill in the mid-quarter survey to get your,",
    "start": "74340",
    "end": "80045"
  },
  {
    "text": "um, to give us feedback and to get your half-a-point. Um, okay. And then the other thing that you should be thinking about,",
    "start": "80045",
    "end": "86990"
  },
  {
    "text": "and I know lots of you are thinking about since I spent three hours talking to people yesterday,",
    "start": "86990",
    "end": "92495"
  },
  {
    "text": "um, is about final projects. Um, and so make sure you've got some plans from that, um,",
    "start": "92495",
    "end": "99060"
  },
  {
    "text": "in place for, um, 04:00 p.m, uh, 04:30 p.m. Thursday.",
    "start": "99060",
    "end": "104640"
  },
  {
    "text": "I mean, in particular as we've discussed, um, your- part of what you're meant to do this year is to have found some research paper,",
    "start": "104640",
    "end": "112745"
  },
  {
    "text": "have read it, and have a summary and thoughts as to how it can inform your work. Um, and then just make sure you have in your calendars, um,",
    "start": "112745",
    "end": "121550"
  },
  {
    "text": "the final project poster session for CS224n, which is gonna be in the evening of Wednesday March 20th,",
    "start": "121550",
    "end": "129320"
  },
  {
    "text": "and we're holding it at the Alumni Center. Okay. Um, one more sort of announcement or just general stuff to cogitate.",
    "start": "129320",
    "end": "139940"
  },
  {
    "start": "133000",
    "end": "400000"
  },
  {
    "text": "Um, so we're now officially in the second half of the class. Congratulations. Um, and, you know,",
    "start": "139940",
    "end": "146630"
  },
  {
    "text": "there's sort of still a few things that we want to teach you that are sort of basic,",
    "start": "146630",
    "end": "151880"
  },
  {
    "text": "and actually convolutional neural networks is one of them. But, I mean, nevertheless in the second half of the class, I mean,",
    "start": "151880",
    "end": "159950"
  },
  {
    "text": "things start to change and we're hoping to much more, um, prepare you for being real deep learning NLP researchers or practitioners.",
    "start": "159950",
    "end": "169970"
  },
  {
    "text": "And so what does that mean concretely? Well, the lectures start to be less",
    "start": "169970",
    "end": "175745"
  },
  {
    "text": "giving every detail of how to build a very basic thing, and more giving you some ideas",
    "start": "175745",
    "end": "182629"
  },
  {
    "text": "to sort of some of the work that's been done in different areas. And so to the extent that there's something of interest or",
    "start": "182629",
    "end": "188510"
  },
  {
    "text": "rele- relevant to a project or things like that. Um, the hope is that while you can take some initiative to",
    "start": "188510",
    "end": "194360"
  },
  {
    "text": "find out more about some of the things that are being talked about. Um, also would really welcome any questions about things that people,",
    "start": "194360",
    "end": "202099"
  },
  {
    "text": "um, would want to know more about. And the other thing that you should know about deep learning is that once we get past the fundamentals,",
    "start": "202100",
    "end": "210440"
  },
  {
    "text": "a lot of the stuff we teach just isn't really known science or things that people are sure of that,",
    "start": "210440",
    "end": "218120"
  },
  {
    "text": "you know, most of what I'm teaching in the second half of the course is pretty much what people think is good practice in 2019.",
    "start": "218120",
    "end": "226174"
  },
  {
    "text": "But, you know, the fact of the matter is what people think is good practice in deep learning has been changing really rapidly.",
    "start": "226175",
    "end": "233390"
  },
  {
    "text": "So if you go back even two years or definitely if you go back four years, right? There's just a lot of different things that people used to believe,",
    "start": "233390",
    "end": "241640"
  },
  {
    "text": "and now people have some different ideas as to what works best. And it's perfectly clear that come 2021 or 2023,",
    "start": "241640",
    "end": "249530"
  },
  {
    "text": "there will be some different ideas again as to what, um, people think is best. So you sort of just have to accept that this is, um,",
    "start": "249530",
    "end": "257750"
  },
  {
    "text": "a nascent rapidly emerging field and it's good to understand the fundamentals and how things fit together.",
    "start": "257750",
    "end": "264125"
  },
  {
    "text": "But after that, quite a bit of the knowledge is this is what people think is good at the moment and it keeps evolving over time.",
    "start": "264125",
    "end": "271280"
  },
  {
    "text": "And if you want to stay in the field, or doing things with deep learning, you kind of still have to keep up with how it changes.",
    "start": "271280",
    "end": "277505"
  },
  {
    "text": "It's called lifelong learning these days. It's a very trendy concept. Um, and so as well as the lectures,",
    "start": "277505",
    "end": "285200"
  },
  {
    "text": "this is also true for the assignments. Um, and, you know,",
    "start": "285200",
    "end": "291719"
  },
  {
    "text": "we've been trying to make the assignments so that they started off very introductory,",
    "start": "291720",
    "end": "297050"
  },
  {
    "text": "and gradually started to use less scaffolding, and we're going to hope to, um,",
    "start": "297050",
    "end": "303395"
  },
  {
    "text": "continue that, um, with the sort of less hand holding in assignment five.",
    "start": "303395",
    "end": "310530"
  },
  {
    "text": "And, you know, I guess what we're hoping to do is prepare you both for the final project and for real life.",
    "start": "310530",
    "end": "317495"
  },
  {
    "text": "I guess I was making an analogy this morning, um, comparing this to the sort of intro CS sequence,",
    "start": "317495",
    "end": "325370"
  },
  {
    "text": "so when there's CS106A and B that have tons of scaffolding, and then in CS107,",
    "start": "325370",
    "end": "331025"
  },
  {
    "text": "you're meant to learn how to diagnose and solve problems for yourself in a debugger that is kind of the same,",
    "start": "331025",
    "end": "338910"
  },
  {
    "text": "um, for neural networks that, you know, for the early assignments, um, you know, we've given you every bit of handholding here, all of",
    "start": "338910",
    "end": "346610"
  },
  {
    "text": "these tests to make sure every little bit of it is okay, and here's exactly how to structure things.",
    "start": "346610",
    "end": "351815"
  },
  {
    "text": "But, you know, in the real world, um, you're only going to be able to build and use neural networks.",
    "start": "351815",
    "end": "357695"
  },
  {
    "text": "If you can figure out why they're not working and what you have to change to make them work.",
    "start": "357695",
    "end": "362990"
  },
  {
    "text": "And, you know, the truth is as I talked a bit about last week, you know, that's often well more than half of the job that it seems easy enough to stick down.",
    "start": "362990",
    "end": "371210"
  },
  {
    "text": "Here's my neural net and the pieces that make sense to me, and then you can spend the remaining 80 percent of the time",
    "start": "371210",
    "end": "377660"
  },
  {
    "text": "scratching your head wondering why it doesn't actually work well, and how you could change it to make it to work well.",
    "start": "377660",
    "end": "384335"
  },
  {
    "text": "Um, so, um, I confess that debugging neural nets can often be hard, but, you know,",
    "start": "384335",
    "end": "389810"
  },
  {
    "text": "the goal is that you should actually learn something about doing it, and that's kind of one of the learning goals of the course when it comes down to it.",
    "start": "389810",
    "end": "398600"
  },
  {
    "text": "Um, final little advertisement. If you feel like you'd like to read a book, um, just out this week,",
    "start": "398600",
    "end": "405155"
  },
  {
    "start": "400000",
    "end": "656000"
  },
  {
    "text": "there's a new book on natural language processing with PyTorch by Delip Rao and Brian McMahan.",
    "start": "405155",
    "end": "411574"
  },
  {
    "text": "Delip actually lives in San Francisco. Um, so, um, if you want to,",
    "start": "411575",
    "end": "416660"
  },
  {
    "text": "you can buy a copy of this, of course. But if you don't want to, um, buy it and you feel like having a bit of a look through it, um,",
    "start": "416660",
    "end": "423230"
  },
  {
    "text": "the Stanford library is actually has a license to the O'Reilly's Safari Books collection.",
    "start": "423230",
    "end": "429110"
  },
  {
    "text": "So you can start off at library.stanford.edu and read it for free.",
    "start": "429110",
    "end": "434944"
  },
  {
    "text": "There's one catch to this which is the library only has 16 simultaneous licenses to Safari Books.",
    "start": "434945",
    "end": "441710"
  },
  {
    "text": "So if you'd also like your classmates to be able to read it for free, it really helps if you remember to log out of Safari Books Online,",
    "start": "441710",
    "end": "449944"
  },
  {
    "text": "um, when you're done looking at it. Um, yes, so this is sort of a, I mean, in some sense,",
    "start": "449944",
    "end": "456420"
  },
  {
    "text": "I hope you will feel if you look at this book, \"Boy, I already know most of that stuff already.",
    "start": "456420",
    "end": "461610"
  },
  {
    "text": "It's not a super advanced book. But it's a good well-written tutorial of how to do things with PyTorch and NLP.\"",
    "start": "461610",
    "end": "469780"
  },
  {
    "text": "If you don't feel like you know most of the stuff in this book, you can let me know but I will be a little sad.",
    "start": "469780",
    "end": "476250"
  },
  {
    "text": "Um, okay, um, yeah. So, let, so starting into today.",
    "start": "476250",
    "end": "483760"
  },
  {
    "text": "Um, so, we spent a lot of time on recurrent neural networks and they are great for many things.",
    "start": "483760",
    "end": "490630"
  },
  {
    "text": "Um, but there's sort of some things that they're not so good at.",
    "start": "490630",
    "end": "495670"
  },
  {
    "text": "So, you know, we kind of might like to know about a phrase like my birth,",
    "start": "495670",
    "end": "501280"
  },
  {
    "text": "or a bigger phrase like of my birth, and there's sort of no independent, um,",
    "start": "501280",
    "end": "507550"
  },
  {
    "text": "representation of those spans in a recurrent neural network. We kind of get sort of prefixes of a whole sentence.",
    "start": "507550",
    "end": "515365"
  },
  {
    "text": "And while we did, um, bidirectional, um, recurrent neural networks, and you could say, 'Well,",
    "start": "515365",
    "end": "522099"
  },
  {
    "text": "wait a minute you could use it in both directions' and to some extent that's true. We can get stuff from this direction and stuff from this direction,",
    "start": "522100",
    "end": "529120"
  },
  {
    "text": "but we still kind of have sort of whole sequences that go to one end of the sentence or another.",
    "start": "529120",
    "end": "534730"
  },
  {
    "text": "We don't just have pieces of sentences. And often, we'd like to sort of work out meanings of pieces of sentences,",
    "start": "534730",
    "end": "543595"
  },
  {
    "text": "and so, we sort of have two problems here. We only have sort of initial and final sub-sequences.",
    "start": "543595",
    "end": "549835"
  },
  {
    "text": "And also, if you look at these representations, like if you say, take this last state as the representation of the meaning of this text.",
    "start": "549835",
    "end": "558820"
  },
  {
    "text": "What you find out, is it's very dominated by the meaning of the most recent words and what they are trying to predict as to what comes after them,",
    "start": "558820",
    "end": "567640"
  },
  {
    "text": "and that's part of the reason why I mentioned last time in the question answering, um, lecture,",
    "start": "567640",
    "end": "573280"
  },
  {
    "text": "the idea that well you can do better by having a sentinel and training something that has attention over the whole, um, LSTM structure.",
    "start": "573280",
    "end": "581755"
  },
  {
    "text": "Okay. But today we're going to look at a different alternative which is convolutional neural nets,",
    "start": "581755",
    "end": "588565"
  },
  {
    "text": "which are often abbreviated as either CNN's or ConvNets. Um, and the idea of these is, well,",
    "start": "588565",
    "end": "597385"
  },
  {
    "text": "look maybe we could just take every sub-sequence of a certain length and calculate a representation for it, um,",
    "start": "597385",
    "end": "606910"
  },
  {
    "text": "so that, you know, if we have some piece of text like, tentative deal reached to keep government open,",
    "start": "606910",
    "end": "612684"
  },
  {
    "text": "and we could sort of just say, well, let's just take all three words sequences, tentative deal reached, deal reached to,",
    "start": "612684",
    "end": "619765"
  },
  {
    "text": "reached to keep et cetera, and we're going to calculate some kind of representation for each of those sequences.",
    "start": "619765",
    "end": "626470"
  },
  {
    "text": "So, this is an- isn't a strongly linguistic idea. Right? We're not worrying about whether it's a coherent phrase,",
    "start": "626470",
    "end": "633430"
  },
  {
    "text": "that's grammatical linguistically valid, cognitively plausible, we're just taking every sub-sequence of a certain length.",
    "start": "633430",
    "end": "641125"
  },
  {
    "text": "And then, once we've calculated representations of those, we're going to look at how to group them.",
    "start": "641125",
    "end": "648025"
  },
  {
    "text": "Okay. So, let's get into more detail as to what CNN's are and how they work.",
    "start": "648025",
    "end": "655900"
  },
  {
    "text": "Um, yeah, so, there's this general idea of a convolution which you may or may",
    "start": "655900",
    "end": "661900"
  },
  {
    "start": "656000",
    "end": "1939000"
  },
  {
    "text": "not have seen in some math or electrical engineering class.",
    "start": "661900",
    "end": "667855"
  },
  {
    "text": "And then, there's the particular version of convolutions, the discrete convolutions, which you can means that",
    "start": "667855",
    "end": "675310"
  },
  {
    "text": "you can use the friendly summation symbol rather than an integral. Um, and that's a,",
    "start": "675310",
    "end": "680904"
  },
  {
    "text": "that's a discrete convolution. I find that that notation as completely unhelpful. So, I won't even try and explain it.",
    "start": "680905",
    "end": "687040"
  },
  {
    "text": "But I've got lots of examples, and convolutions are really easy for neural nets in terms of what they do for examples.",
    "start": "687040",
    "end": "694075"
  },
  {
    "text": "All right, so the classic case of where convolutional neural networks are used, is in vision applications.",
    "start": "694075",
    "end": "700270"
  },
  {
    "text": "So, if you do CS231N next quarter, essentially you know,  the first four weeks is just all doing",
    "start": "700270",
    "end": "707769"
  },
  {
    "text": "convolutional neural networks in all their variants and glory. Um, and the sort of essential idea of, um,",
    "start": "707770",
    "end": "715540"
  },
  {
    "text": "convolutions for a vision, is that you want to recognize things no matter where they appear in an image.",
    "start": "715540",
    "end": "722410"
  },
  {
    "text": "So, you have a sort of property of translation and variance, and the idea of a convolution as a way",
    "start": "722410",
    "end": "728230"
  },
  {
    "text": "of finding something in different places in the image, regardless of where it appears. Um, so this is the vision example which I stole from Andrew Ng's UFLDL website.",
    "start": "728230",
    "end": "739360"
  },
  {
    "text": "And so, what a convolution is, is it's here a patch, but you can think of it as just as a vector,",
    "start": "739360",
    "end": "746815"
  },
  {
    "text": "and the patch has weights which are these little numbers in red, and what you're gonna do,",
    "start": "746815",
    "end": "752995"
  },
  {
    "text": "is slide that patch over the image as this as this animation does.",
    "start": "752995",
    "end": "760345"
  },
  {
    "text": "Um, and so at each position, you're going to multiply each of the red numbers by the black number in that position,",
    "start": "760345",
    "end": "767905"
  },
  {
    "text": "and then you're just going to sum them up. So, that's what a discrete convolution does,",
    "start": "767905",
    "end": "773245"
  },
  {
    "text": "which is what that notation at the top is saying, right? You're multiplying things together and then you're summing them up,",
    "start": "773245",
    "end": "778495"
  },
  {
    "text": "and so you're doing this, and then you're filling in the pink with the products,",
    "start": "778495",
    "end": "784240"
  },
  {
    "text": "um, the sum products. So, it's sort of like, you're taking these sort of patch dot products and putting them into the pink matrix,",
    "start": "784240",
    "end": "792399"
  },
  {
    "text": "and that's then your convolved feature. So, that's a 2D convolution, which for the rest of today,",
    "start": "792400",
    "end": "798759"
  },
  {
    "text": "we're not going to look at anymore. So, this is all you're learning about vision. Um, and so we're now going to go back and look at 1D convolutions,",
    "start": "798760",
    "end": "808390"
  },
  {
    "text": "which is what people use when they're using convolutional neural networks for text. So, the starting point of a convolutional neural network for text,",
    "start": "808390",
    "end": "816610"
  },
  {
    "text": "is we have an input. So, here's my sentence and for each word",
    "start": "816610",
    "end": "822190"
  },
  {
    "text": "in the sentence I have here got a dense word vector, I made it a 4D, want to keep it small in my example but usually as you know, it's more.",
    "start": "822190",
    "end": "831324"
  },
  {
    "text": "So, our starting point is we have some input, you know, input could just be a one-hot encoding that's not forbidden here,",
    "start": "831325",
    "end": "838060"
  },
  {
    "text": "but normally we'll have these kind of dense word vectors. And so, then it's sort of the same as the 3D as the 2D one,",
    "start": "838060",
    "end": "846310"
  },
  {
    "text": "apart from we've only got one dimension. So, we have a filter. Um, so here is our filter,",
    "start": "846310",
    "end": "854410"
  },
  {
    "text": "and so our filter is gonna do three steps and time, three words.",
    "start": "854410",
    "end": "861680"
  },
  {
    "text": "And that's going to work across the dimensions. So, these different dimensions in",
    "start": "861750",
    "end": "868240"
  },
  {
    "text": "the convolutional neural network often get referred to as channels. So, we're kind of working across the input channels,",
    "start": "868240",
    "end": "875665"
  },
  {
    "text": "and so we have a patch like this. And we're going to take this patch and put it on top of the first three words.",
    "start": "875665",
    "end": "885430"
  },
  {
    "text": "I don't have as good an animation as the previous slide. Sorry. And we're going to work out the dot product,",
    "start": "885430",
    "end": "891610"
  },
  {
    "text": "um, between those, and I did that at home by putting this into Excel. And the answer [LAUGHTER] to that,",
    "start": "891610",
    "end": "898014"
  },
  {
    "text": "is that the product is minus 1.0. And then at that point, we slide our,",
    "start": "898015",
    "end": "905495"
  },
  {
    "text": "We slide this, um, matrix which gets referred to as a kernel or",
    "start": "905495",
    "end": "911410"
  },
  {
    "text": "a filter which is the patch that we're using for our convolutional neural network. We slide it down one and do the dot product of those terms again.",
    "start": "911410",
    "end": "921520"
  },
  {
    "text": "And that comes out as minus a half and we keep on sliding that down and we get what,",
    "start": "921520",
    "end": "928955"
  },
  {
    "text": "um, gets what's shown on the right as our output. So at this point,",
    "start": "928955",
    "end": "934264"
  },
  {
    "text": "we've just reduced the sentence, um, to a single vector. Um, and that seems like we might want to do more than that.",
    "start": "934265",
    "end": "944740"
  },
  {
    "text": "Um, but the other thing that you will have noticed is that our sentence is sort of shrunk because before, you know,",
    "start": "944740",
    "end": "952500"
  },
  {
    "text": "we had a seven word sentence but because I've just sort of slid this three word,",
    "start": "952500",
    "end": "957710"
  },
  {
    "text": "um, kernel down here, I ended up with only five positions to put it in.",
    "start": "957710",
    "end": "963015"
  },
  {
    "text": "So it's become a five word thing. Um, so to first of all address that problem,",
    "start": "963015",
    "end": "968960"
  },
  {
    "text": "commonly when people do convolutional neural networks, they add padding.",
    "start": "968960",
    "end": "974030"
  },
  {
    "text": "Um, so what I can do is I can add zero padding at both ends and then sort of do the same trick and say run a convolution on that.",
    "start": "974030",
    "end": "985805"
  },
  {
    "text": "And now, I'll be able to put my size three filter in seven different places as I",
    "start": "985805",
    "end": "991355"
  },
  {
    "text": "slide it down and so I'm getting out a vector that's the same length of my input.",
    "start": "991355",
    "end": "997834"
  },
  {
    "text": "Um, that, you know, there are different way, so this is the most common way of doing things.",
    "start": "997835",
    "end": "1003200"
  },
  {
    "text": "And it's kind of seems logical because it maintains size. I mean, you know, there's always more than one way to do it.",
    "start": "1003200",
    "end": "1010460"
  },
  {
    "text": "Um, if you really wanted to, you, oops, I don't want you, yeah, there, oops, I made, uh,",
    "start": "1010460",
    "end": "1019560"
  },
  {
    "text": "I made a slight mistake on my slide because this",
    "start": "1019560",
    "end": "1025855"
  },
  {
    "text": "turns out which I was about to get to in a minute but I'll just explain this bit here anyway [LAUGHTER].",
    "start": "1025855",
    "end": "1032790"
  },
  {
    "text": "Um, you know, if you wanted to, you could have two steps of padding on both ends here.",
    "start": "1032790",
    "end": "1039740"
  },
  {
    "text": "So that your first convolution we'll be looking at zero, zero, 10 to the of and then the convolution would actually grow the size of your input.",
    "start": "1039740",
    "end": "1050585"
  },
  {
    "text": "Yeah. But, yes. So I mean,",
    "start": "1050585",
    "end": "1055914"
  },
  {
    "text": "so what we've done so far, we've started with these word vectors which in",
    "start": "1055915",
    "end": "1061379"
  },
  {
    "text": "convolutional neural networks terms were of length four. So our kind of input had four channels.",
    "start": "1061380",
    "end": "1069475"
  },
  {
    "text": "But when we were back here, um, we were just producing from this, um,",
    "start": "1069475",
    "end": "1076515"
  },
  {
    "text": "kernel, one column of output. So our output has only a single channel.",
    "start": "1076515",
    "end": "1082559"
  },
  {
    "text": "So we've sort of shrunk things in the columns direction from four to one.",
    "start": "1082560",
    "end": "1088690"
  },
  {
    "text": "And that might seem bad. And for many purposes, it is bad.",
    "start": "1088690",
    "end": "1094105"
  },
  {
    "text": "Um, and so, a lot of the time, what you want to do is to say,",
    "start": "1094105",
    "end": "1101164"
  },
  {
    "text": "well, rather than have only one filter, instead of that, why don't I have several filters?",
    "start": "1101164",
    "end": "1109260"
  },
  {
    "text": "So here I've got three different filters and each of these filters is just sort of the same size three,",
    "start": "1109260",
    "end": "1116620"
  },
  {
    "text": "three the size, the kernel size times the input,",
    "start": "1116620",
    "end": "1121825"
  },
  {
    "text": "number of channels for the matrix. So I have three different filters and I'm going to run",
    "start": "1121825",
    "end": "1129550"
  },
  {
    "text": "each one down the text and get a column here. So now, I'm ending up with three columns of output.",
    "start": "1129550",
    "end": "1136510"
  },
  {
    "text": "And so I have this sort of a three channel output. And the way to intuitively think of this is for these filters,",
    "start": "1136510",
    "end": "1144940"
  },
  {
    "text": "well, you know, for what we do in neural networks, we're going to learn them by backpropagation like everything else.",
    "start": "1144940",
    "end": "1151040"
  },
  {
    "text": "But our hope is that these filters could somehow specialize in different things.",
    "start": "1151040",
    "end": "1156760"
  },
  {
    "text": "So maybe this filter could specialize on, is this language polite?",
    "start": "1156760",
    "end": "1162355"
  },
  {
    "text": "And it will produce a high value whenever it sees polite words. And maybe, um, this, um,",
    "start": "1162355",
    "end": "1169850"
  },
  {
    "text": "filter could specialize on, I don't know,",
    "start": "1169850",
    "end": "1175605"
  },
  {
    "text": "eating and it will have a high value whenever it sees words about food and you know this filter will do a third thing.",
    "start": "1175605",
    "end": "1182430"
  },
  {
    "text": "And so that's the sense in which people sometimes talk about, um, the, um,",
    "start": "1182430",
    "end": "1189235"
  },
  {
    "text": "what you're getting is output of different features because your hope is that you'll kind of gain different latent features coming out of the text.",
    "start": "1189235",
    "end": "1197514"
  },
  {
    "text": "Okay. So that gives us a representation and that's sort of",
    "start": "1197515",
    "end": "1202555"
  },
  {
    "text": "a useful sort of having found learn features in our text. That quite often though, what we'll want to do is just",
    "start": "1202555",
    "end": "1211290"
  },
  {
    "text": "summarize the text with re- with respect to those features. So you might just have the question of, well,",
    "start": "1211290",
    "end": "1218030"
  },
  {
    "text": "in this piece of text, um, is it polite and does it talk about food?",
    "start": "1218030",
    "end": "1223435"
  },
  {
    "text": "So another operation that we'll quite often do is wanna summarize the output of a convolutional network.",
    "start": "1223435",
    "end": "1230410"
  },
  {
    "text": "And the simplest way to do that, is for 1D convolutions, is called max pooling over time.",
    "start": "1230410",
    "end": "1237635"
  },
  {
    "text": "So if we max pool over time, that each of the channels or otherwise known as features,",
    "start": "1237635",
    "end": "1243934"
  },
  {
    "text": "we're just simply going to look down and see what is its maximum value, 0.3, 1.6, 1.4.",
    "start": "1243935",
    "end": "1253865"
  },
  {
    "text": "Um, and so, you know, if I use my story about the first two, um, filters, it's sort of saying, well,",
    "start": "1253865",
    "end": "1260700"
  },
  {
    "text": "it's not very polite text but it's really about food, right? That we're sort of summarizing,",
    "start": "1260700",
    "end": "1266299"
  },
  {
    "text": "um, what we've detected there. Um, so the concept of max pooling in some sense captures,",
    "start": "1266300",
    "end": "1274399"
  },
  {
    "text": "does, is this thing being activated anywhere, right? So if we have things like politeness and about food,",
    "start": "1274400",
    "end": "1282180"
  },
  {
    "text": "that the output of max pooling will have a high value. If somewhere in the sentence there was a clear marker of",
    "start": "1282180",
    "end": "1288600"
  },
  {
    "text": "politeness or something clearly about food. And that's often a useful notion because often what you want to know is,",
    "start": "1288600",
    "end": "1297210"
  },
  {
    "text": "you know, is there some discussion of food in this sentence or is there not?",
    "start": "1297210",
    "end": "1302260"
  },
  {
    "text": "There's another thing, there are other things that you could do. Instead of, ah, max pooling,",
    "start": "1302260",
    "end": "1308635"
  },
  {
    "text": "you can instead do average pooling. So here you just take these numbers and find the average of them.",
    "start": "1308635",
    "end": "1315404"
  },
  {
    "text": "That then has the different semantics which is sort of what's the average amount of politeness of this, um,",
    "start": "1315405",
    "end": "1322595"
  },
  {
    "text": "text or on average how much, you know, how, what percent of the sentence is about food or something like that.",
    "start": "1322595",
    "end": "1330265"
  },
  {
    "text": "Um, for some purposes, this is better because, you know, it takes in all of the important builds to an average.",
    "start": "1330265",
    "end": "1336960"
  },
  {
    "text": "I mean, a lot of the time, people have found that actually max pooling is better because,",
    "start": "1336960",
    "end": "1342890"
  },
  {
    "text": "you know, a lot of signals in natural language are sparse. You know, no matter how polite you are trying to be,",
    "start": "1342890",
    "end": "1350630"
  },
  {
    "text": "you're not going to be being polite in every word. You're going to say nouns and articles like that and a,",
    "start": "1350630",
    "end": "1357429"
  },
  {
    "text": "and prepositions and conjunctions, none of which are inherently polite, right?",
    "start": "1357430",
    "end": "1362635"
  },
  {
    "text": "Um, so that if there's some politeness showing up prominently, then the sentence becomes polite and max pooling is actually better for capturing that.",
    "start": "1362635",
    "end": "1371470"
  },
  {
    "text": "Um, of course the one other kind of thing that you can do as min pooling and find the least [LAUGHTER] active thing.",
    "start": "1371470",
    "end": "1378115"
  },
  {
    "text": "Um, it doesn't get used much but you could do that as well. Okay. So, um, so if you're in PyTorch,",
    "start": "1378115",
    "end": "1384380"
  },
  {
    "text": "this is all pretty easy stuff to do. So there's a handy dandy Conv1d.",
    "start": "1384380",
    "end": "1390005"
  },
  {
    "text": "There's also a Conv2d as you might guess for vision. But there's a Conv1d, um, where you're specifying how many input channels there are.",
    "start": "1390005",
    "end": "1398790"
  },
  {
    "text": "That was our word embedding size. How many output channels there are? We have three.",
    "start": "1398790",
    "end": "1404365"
  },
  {
    "text": "What the size of the convolutional kernel is? So the ones that we were showing were also",
    "start": "1404365",
    "end": "1409524"
  },
  {
    "text": "three and then there are various other parameters you can have. Like you can say that you want a padding of one and things like that.",
    "start": "1409525",
    "end": "1415990"
  },
  {
    "text": "And then once you've got one of those, you can just sort of run your convolutional filter on the input to get a new hidden state.",
    "start": "1415990",
    "end": "1424355"
  },
  {
    "text": "And then if you wanna max pool, you can just max, um, through the output of that and then you've got a max pooled output.",
    "start": "1424355",
    "end": "1431750"
  },
  {
    "text": "Okay. So that gives us the basics of building a kind of a convolutional neural network,",
    "start": "1431750",
    "end": "1438869"
  },
  {
    "text": "um, for, um, NLP. Does that sort of makes sense up until there?",
    "start": "1438869",
    "end": "1444280"
  },
  {
    "text": "Yeah. Okay. So next bit is to sort of show you three or four other things that you can do.",
    "start": "1446000",
    "end": "1455264"
  },
  {
    "text": "Um, I started off typing these slides other less useful notions because I",
    "start": "1455265",
    "end": "1460919"
  },
  {
    "text": "kinda thought, oh, at least they don't really come up much in NLP. But, you know, actually it turned out when I got on to that second paper,",
    "start": "1460920",
    "end": "1468090"
  },
  {
    "text": "when I say the complex convolutional neural network, actually, in that paper they try out just about all of these things that I say no one uses.",
    "start": "1468090",
    "end": "1477750"
  },
  {
    "text": "So it's sort of good to know what they are for looking at various papers. So here, when we did things so far then we were calculating these convolutions,",
    "start": "1477750",
    "end": "1489795"
  },
  {
    "text": "that we're sort of trying them out at every position. So we had one for zero, tentative deal.",
    "start": "1489795",
    "end": "1495285"
  },
  {
    "text": "Then for tentative deal reached then deal reached to. And so we were just walking down one step at",
    "start": "1495285",
    "end": "1500970"
  },
  {
    "text": "a time which is referred to as a stride as, of one. And that's by far the most common thing to do.",
    "start": "1500970",
    "end": "1508095"
  },
  {
    "text": "But you could observe, look wait a minute, since the first convolution concerns zero tentative deal.",
    "start": "1508095",
    "end": "1515654"
  },
  {
    "text": "I've got all those three words in there. Even if I skip down to a next did, deal reach to and then I did to keep government,",
    "start": "1515655",
    "end": "1525225"
  },
  {
    "text": "I'd still have in one or other of the convolutions every word of the sentence",
    "start": "1525225",
    "end": "1530460"
  },
  {
    "text": "so I can do half as much computation and I've still got everything in there in some sense.",
    "start": "1530460",
    "end": "1535635"
  },
  {
    "text": "And so that's referred to as using a stride of two. And so then I get something with half as many rows out.",
    "start": "1535635",
    "end": "1542130"
  },
  {
    "text": "So it's one way to sort of compactify your representation and produce something shorter from a longer sentence and we'll see that use of it coming up later.",
    "start": "1542130",
    "end": "1552855"
  },
  {
    "text": "There's other ways to compactify what cut representation that comes out of your sentence.",
    "start": "1552855",
    "end": "1559890"
  },
  {
    "text": "And so there's a different notion of pooling which is local pooling.",
    "start": "1559890",
    "end": "1565710"
  },
  {
    "text": "Now, if if you've seen any of the vision world when people talk about max pooling and vision,",
    "start": "1565710",
    "end": "1573510"
  },
  {
    "text": "they normally mean local pooling as opposed to the max pooling through time that I showed you first.",
    "start": "1573510",
    "end": "1581399"
  },
  {
    "text": "So here we're sort of back to where we started and we've done",
    "start": "1581400",
    "end": "1587070"
  },
  {
    "text": "our size three stride one convolution which is producing output as before.",
    "start": "1587070",
    "end": "1593534"
  },
  {
    "text": "But now, what I'm gonna do is local pool with a stride of two.",
    "start": "1593535",
    "end": "1599310"
  },
  {
    "text": "Which means I'm gonna take each two rows and I'm gonna pool them together into",
    "start": "1599310",
    "end": "1604650"
  },
  {
    "text": "one row and I could do that again by either maxing or averaging or whatever appeals to me.",
    "start": "1604650",
    "end": "1610679"
  },
  {
    "text": "So I take the first two rows, I max pool them I get this. I take the next two rows,",
    "start": "1610680",
    "end": "1616799"
  },
  {
    "text": "I max pool them I get this. Next two, next two and I sort of pad it on the bottom so I have two rows at the bottom.",
    "start": "1616800",
    "end": "1624285"
  },
  {
    "text": "And so that's then give me a local max pooling of a stride of two.",
    "start": "1624285",
    "end": "1629415"
  },
  {
    "text": "And that sort of had exactly the same effect in the sense but with a different result as using a stride of two in",
    "start": "1629415",
    "end": "1636990"
  },
  {
    "text": "my convolution because I have again reduced it to something of four rows that used to be eight rows.",
    "start": "1636990",
    "end": "1646090"
  },
  {
    "text": "Yeah, picture that. Okay so that's that one.",
    "start": "1646970",
    "end": "1653640"
  },
  {
    "text": "What else can you do. There are more things you can do to make it complex. Another thing that people have sometimes done is k-max pooling.",
    "start": "1653640",
    "end": "1663765"
  },
  {
    "text": "And so this is a more complex thing and it's sort of saying well,",
    "start": "1663765",
    "end": "1669510"
  },
  {
    "text": "rather than just keeping the max over time, if a feature is being kind of activated two or three times in the sentence,",
    "start": "1669510",
    "end": "1680325"
  },
  {
    "text": "maybe it'd be good to record all the times that it's activated in the sentence while throwing away the rest.",
    "start": "1680325",
    "end": "1687375"
  },
  {
    "text": "So in k-max pooling, and I'm doing two max here, you look down this column and you find the two highest values for that column.",
    "start": "1687375",
    "end": "1697335"
  },
  {
    "text": "But then you put the two highest values not in the order of highest to lowest,",
    "start": "1697335",
    "end": "1703664"
  },
  {
    "text": "but in the order in which they are in these columns. So it's minus 0.2,",
    "start": "1703665",
    "end": "1708840"
  },
  {
    "text": "0.3 for this one and it's 1.6, 0.6 for this one because it reflects the orders of the columns up above.",
    "start": "1708840",
    "end": "1718065"
  },
  {
    "text": "Okay. Almost done, one more concept.",
    "start": "1718065",
    "end": "1723210"
  },
  {
    "text": "This is another way of compressing data which is a dilated convolution.",
    "start": "1723210",
    "end": "1732284"
  },
  {
    "text": "So if you have a dilated convolution, so dilated convolution doing it over here doesn't really make sense but where you can use",
    "start": "1732285",
    "end": "1741870"
  },
  {
    "text": "a dilated convolution is if I take this and put it through another convolutional layer,",
    "start": "1741870",
    "end": "1748440"
  },
  {
    "text": "we can kind of have deep convolutional networks that have multiple convolutional layers.",
    "start": "1748440",
    "end": "1753539"
  },
  {
    "text": "So the idea of a dilated convolution issue is you're gonna skip some of the rows.",
    "start": "1753540",
    "end": "1760560"
  },
  {
    "text": "So if you use a dilation of two starting at the top, you're going to take the first, third,",
    "start": "1760560",
    "end": "1767460"
  },
  {
    "text": "and the fifth row and multiply them by my fil- sorry, I have different filters.",
    "start": "1767460",
    "end": "1772980"
  },
  {
    "text": "Multiply them by my filters and then get the values that appear here.",
    "start": "1772980",
    "end": "1778304"
  },
  {
    "text": "And then if stride as one, you'd then use, you would go on and sort of do the next spread out rows.",
    "start": "1778305",
    "end": "1786900"
  },
  {
    "text": "And so this allows you to have convolutions that see a bigger spread of the sentence without having many parameters.",
    "start": "1786900",
    "end": "1796680"
  },
  {
    "text": "So you don't have to do things this way. You could have said, look, I could just instead have convolutions with a kernel size of five.",
    "start": "1796680",
    "end": "1807015"
  },
  {
    "text": "And then they'd say five, see five words in a row but then I'd be having sort of bigger matrices to specify my feature.",
    "start": "1807015",
    "end": "1817230"
  },
  {
    "text": "Whereas, this way I can keep the matrices small but still see a bigger range of the sentence in one operation.",
    "start": "1817230",
    "end": "1825105"
  },
  {
    "text": "Yeah and that concept of how much of a sentence you",
    "start": "1825105",
    "end": "1830669"
  },
  {
    "text": "see is kind of an important notion in convolutional neural networks.",
    "start": "1830670",
    "end": "1836490"
  },
  {
    "text": "Because, you know, if you start at the beginning of a sentence and you're just running three-by-three convolutions, um,",
    "start": "1836490",
    "end": "1843779"
  },
  {
    "text": "you're sort of seeing these three word patches of the sentence. And it turns out in natural language that's",
    "start": "1843780",
    "end": "1850350"
  },
  {
    "text": "already actually quite a useful representation. Because sort of having those kind of n-grams as features is",
    "start": "1850350",
    "end": "1856920"
  },
  {
    "text": "just good for many purposes including text classification. But if you want to sort of understand more of the semantics of a sentence,",
    "start": "1856920",
    "end": "1865680"
  },
  {
    "text": "somehow you wanna see more of that at once. And you've sort of got several tools you can use to see more of it once,",
    "start": "1865680",
    "end": "1873779"
  },
  {
    "text": "you can use bigger filters, you could use, uh, kernel size five, seven, nine or something convolution.",
    "start": "1873780",
    "end": "1880649"
  },
  {
    "text": "You could do something like dilated convolution so you can see spread out pictures. And the third thing that you can do is you",
    "start": "1880650",
    "end": "1888120"
  },
  {
    "text": "can have depth of a convolutional neural network. Because as you have greater depth of a convolutional neural network, you see more.",
    "start": "1888120",
    "end": "1895605"
  },
  {
    "text": "So at this first layer, the rows now have sort of info about three words in them.",
    "start": "1895605",
    "end": "1903149"
  },
  {
    "text": "And if you sort of just stuck a second layer of convolutional neural network with",
    "start": "1903150",
    "end": "1908280"
  },
  {
    "text": "the same general nature on top of it and you sort of take the first three rows and convolve it again then and",
    "start": "1908280",
    "end": "1915450"
  },
  {
    "text": "then the next ones that those then know about five words of your original input sentence.",
    "start": "1915450",
    "end": "1920940"
  },
  {
    "text": "So as you kind of have a deeper ConvNet stack you start to know about bigger and bigger patches of the sentence.",
    "start": "1920940",
    "end": "1927495"
  },
  {
    "text": "Okay. All good? Any questions?",
    "start": "1927495",
    "end": "1932530"
  },
  {
    "text": "No, that's good, okay. So, um, the next piece is essentially shows you this stuff again,",
    "start": "1934760",
    "end": "1942899"
  },
  {
    "start": "1939000",
    "end": "2222000"
  },
  {
    "text": "um, in the context of a particular paper. So this was, um, a paper by Yoon Kim who was a Harvard student,",
    "start": "1942899",
    "end": "1952125"
  },
  {
    "text": "maybe still is a Harvard student, um, in 2014. So this was sort of a fairly early paper.",
    "start": "1952125",
    "end": "1959789"
  },
  {
    "text": "Um, and he wanted to show that you could use convolutional neural networks to do",
    "start": "1959790",
    "end": "1965520"
  },
  {
    "text": "a good job for doing text classification when what you want to classify is a single sentence.",
    "start": "1965520",
    "end": "1972240"
  },
  {
    "text": "So, the kind of thing you might want to do is look at the kind of snippets of movie reviews that you see on the Rotten Tomatoes site and say,",
    "start": "1972240",
    "end": "1980400"
  },
  {
    "text": "\"Is this a positive or is this a negative sentence description?\" And the model he built is actually kind of similar",
    "start": "1980400",
    "end": "1988155"
  },
  {
    "text": "to the convolutional neural networks that Collobert and Weston, um, introduced in their 2011 paper that we",
    "start": "1988155",
    "end": "1994980"
  },
  {
    "text": "mentioned before when we were talking about window-based classifiers. So, in their paper they actually use",
    "start": "1994980",
    "end": "2000500"
  },
  {
    "text": "both window-based classifiers and the convolutional classifier.",
    "start": "2000500",
    "end": "2005600"
  },
  {
    "text": "Okay. Um, so yeah, I sort of already said this. So their tasks are sentence classification, could be sentiment.",
    "start": "2005600",
    "end": "2014210"
  },
  {
    "text": "It could be other things like, is this sentence subjective or objective? So objective is what the main news articles are meant",
    "start": "2014210",
    "end": "2022039"
  },
  {
    "text": "to be and subjective is what the opinion pieces are meant to be. Um, and then other things like question classification.",
    "start": "2022040",
    "end": "2028970"
  },
  {
    "text": "Is this a question asking about a person, location, number, or whatever? Okay, so here is what he did.",
    "start": "2028970",
    "end": "2037399"
  },
  {
    "text": "And it's sort of the- these slides sort of, um, use the notation of his paper which is sort of a little bit different the",
    "start": "2037400",
    "end": "2046880"
  },
  {
    "text": "way the math gets written down to what I just showed you, that it's really doing exactly the same thing.",
    "start": "2046880",
    "end": "2052159"
  },
  {
    "text": "So we start with word vectors of length k. Um, the sentence is made by just concatenating all of those word vectors together and then,",
    "start": "2052160",
    "end": "2064609"
  },
  {
    "text": "when we- so we have a range of words, it's a subpart of that sentence vector.",
    "start": "2064610",
    "end": "2070190"
  },
  {
    "text": "And so, the convolutional filter is just being represented as a vector because",
    "start": "2070190",
    "end": "2076310"
  },
  {
    "text": "here he's flattened everything out into one long vector for the entire sentence,",
    "start": "2076310",
    "end": "2082100"
  },
  {
    "text": "whereas I'd sort of stepped into a matrix. Um, so a size three convolution is just a real vector of length hk,",
    "start": "2082100",
    "end": "2091069"
  },
  {
    "text": "the size of the convolutional filter times the dimensionality of the words.",
    "start": "2091070",
    "end": "2096350"
  },
  {
    "text": "Um, and so, what he's gonna do to build his text classifier is use convolutions made out of different sizes.",
    "start": "2096350",
    "end": "2107450"
  },
  {
    "text": "So you can have size two convolutions, size three convolutions as shown here, and bigger convolutions.",
    "start": "2107450",
    "end": "2116000"
  },
  {
    "text": "And so, um, so to compute a feature one channel for our CNN, we're",
    "start": "2116000",
    "end": "2123140"
  },
  {
    "text": "then doing a dot product between the weight vector of the feature times this sub-sequence of the same terms,",
    "start": "2123140",
    "end": "2130415"
  },
  {
    "text": "and he sort of also put in a bias which I sort of omitted. Um, and then putting it through a non-linearity,",
    "start": "2130415",
    "end": "2141109"
  },
  {
    "text": "um, which I wasn't doing either. Um, but as sort of we've seen a ton of. Um, and so, what we're wanting to do is that's our,",
    "start": "2141110",
    "end": "2149809"
  },
  {
    "text": "um, feature and we want to, um, do it through all this- for a feature of kernel size three,",
    "start": "2149810",
    "end": "2158150"
  },
  {
    "text": "we're gonna go all the way through the sentence. The other thing he did though was slightly funnel funny is,",
    "start": "2158150",
    "end": "2164734"
  },
  {
    "text": "his windows were sort of lopsided in the notation, right. There's a word and th- the,",
    "start": "2164735",
    "end": "2171694"
  },
  {
    "text": "um, h minus 1 words to the right of it. So he has padding here just on the right end whereas",
    "start": "2171695",
    "end": "2180095"
  },
  {
    "text": "most people do their convolutions symmetrically in both directions around things.",
    "start": "2180095",
    "end": "2185810"
  },
  {
    "text": "Okay. And so, we're going to do that for a bunch of features or",
    "start": "2185810",
    "end": "2191630"
  },
  {
    "text": "channels Ci and therefore compute our convolved representations just as we've talked about.",
    "start": "2191630",
    "end": "2198680"
  },
  {
    "text": "Okay. Um, then he does just what we talked about. Um, there's max over time pooling in the pooling layer to capture",
    "start": "2198680",
    "end": "2208370"
  },
  {
    "text": "the most relevant things and is giving us a single number for each channel.",
    "start": "2208370",
    "end": "2213650"
  },
  {
    "text": "Um, and we have features that look at different that have different kernel sizes.",
    "start": "2213650",
    "end": "2221464"
  },
  {
    "text": "Um, here's one other idea he used which is possibly a neat idea.",
    "start": "2221465",
    "end": "2228230"
  },
  {
    "start": "2222000",
    "end": "2470000"
  },
  {
    "text": "Um, he knows one of the things that you could even think about in various ways,",
    "start": "2228230",
    "end": "2233659"
  },
  {
    "text": "um, for say a question answering system among other things. Um, and so he used pre-trained word vectors.",
    "start": "2233659",
    "end": "2241605"
  },
  {
    "text": "Um, but what he did was he actually kind of doubled the word vectors.",
    "start": "2241605",
    "end": "2248980"
  },
  {
    "text": "So, for each word he had two copies of the word vector, and so you have sort of two channel sets and one set he",
    "start": "2248980",
    "end": "2257290"
  },
  {
    "text": "froze and the other one he fine tuned as he trained.",
    "start": "2257290",
    "end": "2262375"
  },
  {
    "text": "So it's sort of he tried to get the best of both worlds of sort of fine tuning and not fine tuning and all that went into the max pooling operation.",
    "start": "2262375",
    "end": "2271770"
  },
  {
    "text": "Okay. Um, so, after the max pooling we get out one number for each channel and so,",
    "start": "2271770",
    "end": "2281614"
  },
  {
    "text": "um, he has something of three size convolutions, three,",
    "start": "2281614",
    "end": "2286760"
  },
  {
    "text": "four, five, 100 features for each size. So we're getting out a vector of size,",
    "start": "2286760",
    "end": "2293434"
  },
  {
    "text": "um, 300 at that point, and at that point you're taking that final vector and just sticking it",
    "start": "2293435",
    "end": "2299809"
  },
  {
    "text": "through a softmax and that's then giving your classification of the classes. Um, so all of that can be summarized in this picture if it's big enough to sort of read.",
    "start": "2299810",
    "end": "2311494"
  },
  {
    "text": "So, here's our sentence. I like this movie very much, which has you know, our word embedding dimension is five,",
    "start": "2311495",
    "end": "2319310"
  },
  {
    "text": "and so then doing it in this example, we are having two channels for each kernel size and",
    "start": "2319310",
    "end": "2326930"
  },
  {
    "text": "we consider kernels of size two, three, and four.",
    "start": "2326930",
    "end": "2332030"
  },
  {
    "text": "Um, and so and then we are getting two different ones.",
    "start": "2332030",
    "end": "2337205"
  },
  {
    "text": "Um, so we're getting, um, six. This is showing six of our filters.",
    "start": "2337205",
    "end": "2344405"
  },
  {
    "text": "Um, so we apply those. When we- when we apply those filters without any padding,",
    "start": "2344405",
    "end": "2350974"
  },
  {
    "text": "we are then getting out these outputs of the filters which are of sizes four, five, and six respectively.",
    "start": "2350975",
    "end": "2358984"
  },
  {
    "text": "Um, and so then once we've got these for each of these sets of numbers we're doing one max pooling.",
    "start": "2358985",
    "end": "2367265"
  },
  {
    "text": "So, we're just taking the max of each of these, um, output features which gives us these six numbers.",
    "start": "2367265",
    "end": "2376714"
  },
  {
    "text": "Um, we can concatenate them all together into one vector which we feed into,",
    "start": "2376715",
    "end": "2383060"
  },
  {
    "text": "um, a softmax over two classes as to whether sentiment is positive or negative.",
    "start": "2383060",
    "end": "2390120"
  },
  {
    "text": "Um, so that's basically the model. So something- so this is sort of really actually a very simple,",
    "start": "2392580",
    "end": "2401200"
  },
  {
    "text": "very computationally efficient, uh, model as to how to build a text classifier.",
    "start": "2401200",
    "end": "2406779"
  },
  {
    "text": "[NOISE] Um, yeah, just a couple more things to get through,",
    "start": "2406780",
    "end": "2413155"
  },
  {
    "text": "um, so in one of the assignments, we talked about Dropout [NOISE] and you used it. So, um, you know,",
    "start": "2413155",
    "end": "2419065"
  },
  {
    "text": "hopefully you're all masters of Dropout at this point. Um, so he was using Dropout, um,",
    "start": "2419065",
    "end": "2424720"
  },
  {
    "text": "and this being 2014 and the, um, Dropout paper only coming out in 2014.",
    "start": "2424720",
    "end": "2431820"
  },
  {
    "text": "I guess, there'd been an earlier version that came out a couple of years earlier. This was sort of still fairly early,",
    "start": "2431820",
    "end": "2437160"
  },
  {
    "text": "um, to be taking advantage of Dropout. So that while training, you've got this sort of Dropout vector, um,",
    "start": "2437160",
    "end": "2444105"
  },
  {
    "text": "where you sample your Bernoulli random variables and you're, sort of, um, sort of, designed to drop out some of the features each time you are doing things.",
    "start": "2444105",
    "end": "2454825"
  },
  {
    "text": "At testing time, you don't do the dropout, but because before you were sort of dropping out a lot of stuff,",
    "start": "2454825",
    "end": "2462130"
  },
  {
    "text": "you're scaling your weight matrix by the same probability that you use for dropping out,",
    "start": "2462130",
    "end": "2467454"
  },
  {
    "text": "so that you get, sort of, vectors of the same scale as before. Um, so as we sort of discussed in the assignment,",
    "start": "2467455",
    "end": "2475075"
  },
  {
    "start": "2470000",
    "end": "2539000"
  },
  {
    "text": "Dropout is a really effective form of regularization, widely used in neural networks.",
    "start": "2475075",
    "end": "2480579"
  },
  {
    "text": "Um, he didn't only do that, he actually did, a kind of another sort of funky form of regularization.",
    "start": "2480580",
    "end": "2487599"
  },
  {
    "text": "So that's for the softmax weight vector, he constrained the L2 norms,",
    "start": "2487600",
    "end": "2495280"
  },
  {
    "text": "so the squared norms of the weight vectors and the softmax, [NOISE] um,",
    "start": "2495280",
    "end": "2501100"
  },
  {
    "text": "matrix, um, to a fixed number S, which was sort of set of the hyper-parameters,",
    "start": "2501100",
    "end": "2507460"
  },
  {
    "text": "actually set to the value three. Um, and if your weights were getting too large,",
    "start": "2507460",
    "end": "2513055"
  },
  {
    "text": "they were being rescaled, um, so they didn't blow up. Um, this isn't a very common thing to do.",
    "start": "2513055",
    "end": "2520210"
  },
  {
    "text": "I'm not sure it's very necessary, um, but, um, I guess it gives you some- I mean,",
    "start": "2520210",
    "end": "2525849"
  },
  {
    "text": "I guess by showing you a few of the details of this one, my hope is, sort of, gives you some ideas about how there are lots of things you can play",
    "start": "2525850",
    "end": "2533680"
  },
  {
    "text": "around with and muck with if you wanna try different things, um, for your final projects.",
    "start": "2533680",
    "end": "2539020"
  },
  {
    "start": "2539000",
    "end": "2579000"
  },
  {
    "text": "Um, okay. So here are some of his final hyperparameters.",
    "start": "2539020",
    "end": "2544120"
  },
  {
    "text": "So he's using ReLU nonlinearities, um, window sizes of three, four, and five,",
    "start": "2544120",
    "end": "2550765"
  },
  {
    "text": "the convolutions, hundred features or channels for each size,",
    "start": "2550765",
    "end": "2555789"
  },
  {
    "text": "um, Dropout of a half as usual. Um, you get several percentage improvements from dropout,",
    "start": "2555790",
    "end": "2561865"
  },
  {
    "text": "which is quite common actually. Um, the sort of L2 constraint, s equals three,",
    "start": "2561865",
    "end": "2567835"
  },
  {
    "text": "mini batch of 50, 300 dimensional word vectors, train to maximize dev set performance.",
    "start": "2567835",
    "end": "2575755"
  },
  {
    "text": "Okay. And here is the big table, you know, I was too lazy, um, to redo of performance on these different text classification data sets.",
    "start": "2575755",
    "end": "2586569"
  },
  {
    "start": "2579000",
    "end": "2691000"
  },
  {
    "text": "Um, there are lots of different ones. So these two are both Stanford Sentiment Treebank.",
    "start": "2586570",
    "end": "2591820"
  },
  {
    "text": "This is the Subjective Objective Language. This is the Question Classification, of is it asking for a person name and location,",
    "start": "2591820",
    "end": "2599650"
  },
  {
    "text": "a company or whatever. Um, this is, um, talking about, sort of, a perspective,",
    "start": "2599650",
    "end": "2606279"
  },
  {
    "text": "which is another classification thing. Consumer Reports is another sentiment one. Um, so lots of data sets and then here are lots of models.",
    "start": "2606280",
    "end": "2616210"
  },
  {
    "text": "So the model- some of the models down here or here,",
    "start": "2616210",
    "end": "2621580"
  },
  {
    "text": "are traditional feature-based, um, classifiers. Um, so in particular,",
    "start": "2621580",
    "end": "2628000"
  },
  {
    "text": "um, sort of Wang and me back in 2012, had sort of pointed out that by taking certain steps",
    "start": "2628000",
    "end": "2636025"
  },
  {
    "text": "with n-gram features and other forms of normalization, that you could actually get quite good results with",
    "start": "2636025",
    "end": "2643420"
  },
  {
    "text": "just the traditional feature, um, based classifiers. So many people use that as a baseline for showing that you can do better things.",
    "start": "2643420",
    "end": "2652045"
  },
  {
    "text": "Um, the ones up here, were tree structured neural networks that my group was very fond",
    "start": "2652045",
    "end": "2658200"
  },
  {
    "text": "of in the early 2010s and then up at the very top, uh, his CNN models.",
    "start": "2658200",
    "end": "2664694"
  },
  {
    "text": "And as you can see, it's sort of a mix. Sometimes the CNN model wins,",
    "start": "2664695",
    "end": "2670870"
  },
  {
    "text": "like in this column and this column, sometimes it doesn't win like in these columns.",
    "start": "2670870",
    "end": "2676015"
  },
  {
    "text": "Um, but in general, um, what you didn't see from this is that, you know, this is an extremely simple, um,",
    "start": "2676015",
    "end": "2683140"
  },
  {
    "text": "convolutional neural network model and it actually does, um, kind of well on this system.",
    "start": "2683140",
    "end": "2688720"
  },
  {
    "text": "Um, you can quibble with this results table,",
    "start": "2688720",
    "end": "2694720"
  },
  {
    "start": "2691000",
    "end": "2936000"
  },
  {
    "text": "and again in terms of like writing your propos- project proposal, um,",
    "start": "2694720",
    "end": "2701285"
  },
  {
    "text": "one thing that you should do is kind of think about what you're reading, um,",
    "start": "2701285",
    "end": "2707250"
  },
  {
    "text": "because, you know, a lot of papers aren't perfect and there are reasons to quibble with what they claim.",
    "start": "2707250",
    "end": "2713130"
  },
  {
    "text": "And sometimes if you think about what they're claiming and whether it's reasonable, um, there are reasons why it's not or there are ideas",
    "start": "2713130",
    "end": "2720895"
  },
  {
    "text": "of how you could do things differently or show something different. I mean, the main reason why you could quibble with,",
    "start": "2720895",
    "end": "2727315"
  },
  {
    "text": "um, Yoon Kim's results table is, well, he already said, as I had a couple of slides back, um,",
    "start": "2727315",
    "end": "2735385"
  },
  {
    "text": "that the statement that Dropout gives you two to four percent accuracy improvement in this neural nets.",
    "start": "2735385",
    "end": "2741220"
  },
  {
    "text": "[NOISE] Um, but most of these systems because they are older and were done before Dropout was invented,",
    "start": "2741220",
    "end": "2749365"
  },
  {
    "text": "um, didn't make use of Dropout. But, you know, any of these sort of neural net systems up here",
    "start": "2749365",
    "end": "2755170"
  },
  {
    "text": "could have used Dropout and presumably it would have given them a couple of, um, percent gain as well.",
    "start": "2755170",
    "end": "2761140"
  },
  {
    "text": "So arguably, this is sort of a biased, unfair comparison. And the right thing would have been to be comparing all the systems, um, using Dropout.",
    "start": "2761140",
    "end": "2770635"
  },
  {
    "text": "Um, but, you know, despite that, you know, this was still a prett- a lot of people noticed",
    "start": "2770635",
    "end": "2776980"
  },
  {
    "text": "this paper because it showed that using this sort of very simple, very fast convolutional architecture,",
    "start": "2776980",
    "end": "2783190"
  },
  {
    "text": "could give you strong results for text classification.",
    "start": "2783190",
    "end": "2787069"
  },
  {
    "text": "Um, that's that. Yes. So in summary,",
    "start": "2788250",
    "end": "2793765"
  },
  {
    "text": "you know, something that you should be thinking about for projects and otherwise, we're effectively building up a bigger toolkit of different tools you could be using,",
    "start": "2793765",
    "end": "2804370"
  },
  {
    "text": "um, for projects or future work or whatever it is. So starting off with,",
    "start": "2804370",
    "end": "2809635"
  },
  {
    "text": "we had word vectors and then we could build bag of vector models by just taking the word vectors and averaging them.",
    "start": "2809635",
    "end": "2817105"
  },
  {
    "text": "And, you know, that's actually a surprisingly good baseline to start with. We suggest to you in many cases for things like projects,",
    "start": "2817105",
    "end": "2823960"
  },
  {
    "text": "you should use that. See how well it does, make sure you're working better. I mean particularly, you can do even better with that,",
    "start": "2823960",
    "end": "2830605"
  },
  {
    "text": "if you sort of add some extra ReLU layers on top, which is an idea that's been explored in deep averaging networks.",
    "start": "2830605",
    "end": "2838015"
  },
  {
    "text": "Um, then we looked at window models which were very simple. You're just taking these sort of",
    "start": "2838015",
    "end": "2843850"
  },
  {
    "text": "five word windows and computing a feed-forward network on them, and they work very well for word classification problems that only need local context.",
    "start": "2843850",
    "end": "2852835"
  },
  {
    "text": "Things like, part of speech tagging or NER. But then we've gone ahead and looked at some other models.",
    "start": "2852835",
    "end": "2859390"
  },
  {
    "text": "And so, um, CNN's are very good for text classification, um,",
    "start": "2859390",
    "end": "2865404"
  },
  {
    "text": "and they're very good because they parallelize really well on GPUs, which is something I'll come back to again later.",
    "start": "2865405",
    "end": "2871840"
  },
  {
    "text": "So they, they just sort- the general sort of representing sentence meaning.",
    "start": "2871840",
    "end": "2877510"
  },
  {
    "text": "They're actually a efficient, versatile, good method, which has been used quite a bit. And then they sort of contrast with recurrent neural networks.",
    "start": "2877510",
    "end": "2885460"
  },
  {
    "text": "Recurrent neural networks have some advantages. They're sort of more cognitively plausible, because you're sort of reading through the text and,",
    "start": "2885460",
    "end": "2892120"
  },
  {
    "text": "um, getting its meaning. Um, recurrent neural networks are good for things like sequence tagging and classification,",
    "start": "2892120",
    "end": "2899800"
  },
  {
    "text": "building language models to predict what's coming next. Um, they can do really well when combined with attention.",
    "start": "2899800",
    "end": "2906910"
  },
  {
    "text": "Um, but they also have some disadvantages. They're way slower than convolutional neural networks and if what you wanna",
    "start": "2906910",
    "end": "2913869"
  },
  {
    "text": "do is get out some kind of overall meaning representation of a sentence, you know, \"What does this mean?",
    "start": "2913870",
    "end": "2919845"
  },
  {
    "text": "Are these two, um, phrases paraphrases with each other?\" There are now many results that show that people",
    "start": "2919845",
    "end": "2926730"
  },
  {
    "text": "don't get better results with recurrent neural networks. They can get better results using techniques like convolutional neural networks.",
    "start": "2926730",
    "end": "2935440"
  },
  {
    "text": "Okay. [NOISE] So in the next step then [NOISE] is to,",
    "start": "2935550",
    "end": "2945010"
  },
  {
    "start": "2936000",
    "end": "3014000"
  },
  {
    "text": "sort of, head towards our com- our complex, um, convolutional architecture example.",
    "start": "2945010",
    "end": "2952375"
  },
  {
    "text": "So before getting to that, I just wanna sort of introduce a few concepts that we haven't seen,",
    "start": "2952375",
    "end": "2958525"
  },
  {
    "text": "all of which, um, start to turn up when we do this. So we spent a lot of time in the sequence models part,",
    "start": "2958525",
    "end": "2966360"
  },
  {
    "text": "talking about gated models or the gated recurrent units and the LSTM units.",
    "start": "2966360",
    "end": "2972345"
  },
  {
    "text": "But the idea of a gate is general that we can sort of have this idea that we can calculate something,",
    "start": "2972345",
    "end": "2980130"
  },
  {
    "text": "put it through, um, a sigmoid nonlinearity and gets a value between zero and one,",
    "start": "2980130",
    "end": "2987370"
  },
  {
    "text": "um, or a vector of values between zero and one. And then do a Hadamard product with a vector",
    "start": "2987370",
    "end": "2992980"
  },
  {
    "text": "and sort of gate it between its value and zero. So that suggests the idea that you could also apply",
    "start": "2992980",
    "end": "2999490"
  },
  {
    "text": "gates vertically when you're building multilayer networks. And after the successive LSTMs had been proven,",
    "start": "2999490",
    "end": "3007845"
  },
  {
    "text": "that was, um, an idea that really took off, was people start exploring,",
    "start": "3007845",
    "end": "3013730"
  },
  {
    "text": "how can we have, use these ideas of skip connections and gating in a,",
    "start": "3013730",
    "end": "3019445"
  },
  {
    "start": "3014000",
    "end": "3312000"
  },
  {
    "text": "in a vertical direction? And here are two versions of it. This one is a very simple one,",
    "start": "3019445",
    "end": "3026450"
  },
  {
    "text": "but a very successful one that's basically just about a skip connection. So and this is referred to as a residual block and- which is used in residual networks,",
    "start": "3026450",
    "end": "3036890"
  },
  {
    "text": "otherwise known as ResNets. Um, so in a residual block, for each block,",
    "start": "3036890",
    "end": "3042470"
  },
  {
    "text": "you allow a value just to skip ahead to the next, um, layer.",
    "start": "3042470",
    "end": "3048440"
  },
  {
    "text": "Or you can stick it through a conv block, and the typical conv block is you go through a convolutional layer,",
    "start": "3048440",
    "end": "3056825"
  },
  {
    "text": "you then go through a ReLU nonlinearity, another convolutional layer, and then when you come out,",
    "start": "3056825",
    "end": "3063250"
  },
  {
    "text": "you just sum these two values. So this is the same idea that sort of summing values is magical in the same way as an LSTM.",
    "start": "3063250",
    "end": "3071820"
  },
  {
    "text": "And then you put the output of that through another ReLU, and this thing here is called a residual block",
    "start": "3071820",
    "end": "3078705"
  },
  {
    "text": "and then commonly you'll stack residual blocks on top of each other. Um, there's one little trick here,",
    "start": "3078705",
    "end": "3085230"
  },
  {
    "text": "um, which is you need to use padding, right? Um, because at the end of the day since you want to sum these two pathways,",
    "start": "3085230",
    "end": "3093000"
  },
  {
    "text": "you want them to be the same size. And if you, sort of, have them shrinking in the conv blocks you wouldn't be able to sum them.",
    "start": "3093000",
    "end": "3100200"
  },
  {
    "text": "So you want to, sort of, have a padding at each stage so they stay the same size here, and so that you can add them together.",
    "start": "3100200",
    "end": "3107437"
  },
  {
    "text": "Um, here's, um, a different version of a block which is",
    "start": "3107437",
    "end": "3114500"
  },
  {
    "text": "sort of more LSTM-ish and indeed this block was developed by Jürgen Schmidhuber and students,",
    "start": "3114500",
    "end": "3121710"
  },
  {
    "text": "who's the same guy who's behind LSTMs and you can see the same thinking. It's called a highway block.",
    "start": "3121710",
    "end": "3128150"
  },
  {
    "text": "So in a way it's sort of similar. You've got, you know, kind of thinking of moving an identity x that skips",
    "start": "3128150",
    "end": "3136080"
  },
  {
    "text": "a nonlinear block or you can have it go through exactly the same stuff conv, relu, conv.",
    "start": "3136080",
    "end": "3143085"
  },
  {
    "text": "The difference is that unlike this one, this time there's explicit gates so there's,",
    "start": "3143085",
    "end": "3149165"
  },
  {
    "text": "um, and this T-gate and the C-gate. And so you're multiplying both of the path through here and the path through here",
    "start": "3149165",
    "end": "3159230"
  },
  {
    "text": "by a gate just kinda like the sort of the get input gates that we saw before and then summing them together.",
    "start": "3159230",
    "end": "3167130"
  },
  {
    "text": "So that sort of feels more powerful but it's not actually clear that it is more powerful.",
    "start": "3167130",
    "end": "3176285"
  },
  {
    "text": "I mean, this one actually has a very simple semantic because if you think of the semantics of this one",
    "start": "3176285",
    "end": "3183070"
  },
  {
    "text": "is the default is just you walk this way and you just sort of carry forward your value and do nothing.",
    "start": "3183070",
    "end": "3191015"
  },
  {
    "text": "Um, so, what this block's job to- is to do, is to learn a delta that is meant to learn",
    "start": "3191015",
    "end": "3198154"
  },
  {
    "text": "what kind of deviation you have from doing nothing. Um, so that's a nice simple semantic which, um,",
    "start": "3198155",
    "end": "3205210"
  },
  {
    "text": "seems to work well in neural networks to learn things. Um, this sort of has",
    "start": "3205210",
    "end": "3211390"
  },
  {
    "text": "more complicated apparent semantics because you're taking, you know,",
    "start": "3211390",
    "end": "3216500"
  },
  {
    "text": "some parts of the identity multiplying by this sort of gate in a Hadamard product",
    "start": "3216500",
    "end": "3223005"
  },
  {
    "text": "and some parts of this conv block multiplied by this other gate T in a Hadamard product.",
    "start": "3223005",
    "end": "3229880"
  },
  {
    "text": "So that sort of feels more powerful as that gives me a lot more control because I can take pieces of the different ones and so on.",
    "start": "3229880",
    "end": "3238325"
  },
  {
    "text": "If you think about it for a bit longer, I mean, mathematically it's actually not any more powerful that you",
    "start": "3238325",
    "end": "3245380"
  },
  {
    "text": "can represent anything you can do with this one with that one. And the way to think about that is well, um,",
    "start": "3245380",
    "end": "3253530"
  },
  {
    "text": "you know, here you're kind of keeping only part of the identity,",
    "start": "3253530",
    "end": "3259410"
  },
  {
    "text": "um, but what you could do is keep the whole of the identity and see it as your job",
    "start": "3259410",
    "end": "3266839"
  },
  {
    "text": "to subtract off the bits that this one isn't keeping over here in the conv block which you can do theoretically.",
    "start": "3266840",
    "end": "3274440"
  },
  {
    "text": "Um, and so, you can sort of anything you can compute with this as a function,",
    "start": "3274440",
    "end": "3279480"
  },
  {
    "text": "you can actually compute with a, um, ResNet block. Um, and so then as quite often in neural network land,",
    "start": "3279480",
    "end": "3287185"
  },
  {
    "text": "the question isn't sort of, um, some kind of proof of compute- can be computed or not.",
    "start": "3287185",
    "end": "3293190"
  },
  {
    "text": "It sort of comes down to learning and regularization questions as to",
    "start": "3293190",
    "end": "3298454"
  },
  {
    "text": "whether one or the other of these actually proves better as something to use in a learning architecture.",
    "start": "3298455",
    "end": "3305270"
  },
  {
    "text": "Okay. Second concept. Um, batch normalization.",
    "start": "3306430",
    "end": "3311859"
  },
  {
    "text": "So when people are building deep convolutional neural networks,",
    "start": "3311860",
    "end": "3317405"
  },
  {
    "start": "3312000",
    "end": "3478000"
  },
  {
    "text": "um, in the 2015 pluses, um, they almost always use batch normalization layers because",
    "start": "3317405",
    "end": "3327065"
  },
  {
    "text": "this makes your life a lot better and if they're not using batch normalization layers,",
    "start": "3327065",
    "end": "3332685"
  },
  {
    "text": "they're normally using one of the other variant ideas that people have suggested such as layer normalization which is sort of meant to do about the same thing.",
    "start": "3332685",
    "end": "3342165"
  },
  {
    "text": "Um, so what batch normalization does? I mean, I think many of you will have seen somewhere in steps or",
    "start": "3342165",
    "end": "3350650"
  },
  {
    "text": "otherwise the idea of doing a Z-transform which means you take your data,",
    "start": "3350650",
    "end": "3356305"
  },
  {
    "text": "you work out its mean and you work out its standard deviation and then you rescale by subtraction and",
    "start": "3356305",
    "end": "3363970"
  },
  {
    "text": "multiplication so that you have a set of data which has a mean of zero and a standard deviation of one.",
    "start": "3363970",
    "end": "3372359"
  },
  {
    "text": "Most people see that, right? Yeah? Um, so batch normalization is effectively doing exactly that but in a weird way.",
    "start": "3372360",
    "end": "3383500"
  },
  {
    "text": "So what you're doing is that you're taking each mini batch. So whatever just random 32 examples you've stuck in a mini batch,",
    "start": "3383500",
    "end": "3391875"
  },
  {
    "text": "you're running them through a layer of your neural network like a ConvBlock that we saw before",
    "start": "3391875",
    "end": "3397355"
  },
  {
    "text": "and you take the output of that mini batch and then you do a Z-transform on it.",
    "start": "3397355",
    "end": "3403190"
  },
  {
    "text": "Um, and then it goes forward into the next ConvBlock or whatever, and the next time you have a different mini batch,",
    "start": "3403190",
    "end": "3409410"
  },
  {
    "text": "you just Z-transform it. So it seems a little bit weird. You're just doing it on the output of these mini batches.",
    "start": "3409410",
    "end": "3416600"
  },
  {
    "text": "Um, but that's proven to be a very effective thing to do.",
    "start": "3416600",
    "end": "3421680"
  },
  {
    "text": "So that it sort of means that what comes out of a ConvBlock sort of always has the same kind of scale.",
    "start": "3421680",
    "end": "3429890"
  },
  {
    "text": "So it doesn't sort of fluctuate a lot and mess things up and it tends to make the models just much more reliably trainable because,",
    "start": "3429890",
    "end": "3438224"
  },
  {
    "text": "you know, you just have to be much less fussy about a lot of things. Because, you know, a lot of the things we've talked about,",
    "start": "3438225",
    "end": "3445505"
  },
  {
    "text": "about initializing your parameters and setting your learning rates is sort of about, well,",
    "start": "3445505",
    "end": "3451130"
  },
  {
    "text": "you have to keep the scale of things about right so they don't get too big or too small and things like that.",
    "start": "3451130",
    "end": "3457810"
  },
  {
    "text": "Whereas, if you're doing this batch normalization, you're sort of forcing scale, um, to being the same size each time.",
    "start": "3457810",
    "end": "3465705"
  },
  {
    "text": "And s o therefore, you kind of don't have to do the other stuff as well and it still tends to,",
    "start": "3465705",
    "end": "3471200"
  },
  {
    "text": "um, work pretty well. So that's a good technique to know about. Okay. Um, one last thing to learn about.",
    "start": "3471200",
    "end": "3479800"
  },
  {
    "start": "3478000",
    "end": "4819000"
  },
  {
    "text": "Um, there's a concept of, um, size one convolutions.",
    "start": "3479800",
    "end": "3487015"
  },
  {
    "text": "Um, and actually, I guess I really sort of, um, renamed it- I named this wrong because I wrote down",
    "start": "3487015",
    "end": "3494680"
  },
  {
    "text": "one by one convolutions because that's the term you normally see. But that's, um, the vision world where you have 2D convolutions.",
    "start": "3494680",
    "end": "3502530"
  },
  {
    "text": "So I guess I should have just called this one convolutions. So you can have convolutions, um,",
    "start": "3502530",
    "end": "3508890"
  },
  {
    "text": "with a kernel size of one and when you first see that, it seems like that makes no sense whatsoever because the whole idea",
    "start": "3508890",
    "end": "3517840"
  },
  {
    "text": "of a convolution was I was taking this patch and calculating something from it.",
    "start": "3517840",
    "end": "3523305"
  },
  {
    "text": "If I'm not looking at any other words,",
    "start": "3523305",
    "end": "3528329"
  },
  {
    "text": "surely I'm calculating nothing. But what actually happens in the size one convolution,",
    "start": "3528330",
    "end": "3534975"
  },
  {
    "text": "is if you have a number of channels that sort of in a previous layer if you'd calculated whatever it was,",
    "start": "3534975",
    "end": "3543849"
  },
  {
    "text": "32 channels or something like that. What the one by one convolution is doing is acting as",
    "start": "3543850",
    "end": "3551070"
  },
  {
    "text": "a tiny little embedded fully-connected network over those channels.",
    "start": "3551070",
    "end": "3556625"
  },
  {
    "text": "And so you're sort of doing a position specific fully-connected network,",
    "start": "3556625",
    "end": "3562280"
  },
  {
    "text": "um, in- for each row of your data. And so you can do that,",
    "start": "3562280",
    "end": "3568050"
  },
  {
    "text": "um, for various reasons. You can do it because you want to map down from having a lot of channels to having fewer channels or",
    "start": "3568050",
    "end": "3574869"
  },
  {
    "text": "you can do it just because you think another non-linearity will help and this is a really cheap way to do it.",
    "start": "3574870",
    "end": "3580345"
  },
  {
    "text": "Because the crucial thing to notice is that if you sort of put fully-connected layers over everything,",
    "start": "3580345",
    "end": "3587990"
  },
  {
    "text": "they involve a lot of parameters whereas putting in these size one convolutions involve very few parameters",
    "start": "3587990",
    "end": "3596650"
  },
  {
    "text": "because you're just doing it at the level of a single word. Um, okay.",
    "start": "3596650",
    "end": "3603765"
  },
  {
    "text": "Um, two random things and then I'll go onto my complex model. Um, this is just a sort of",
    "start": "3603765",
    "end": "3610540"
  },
  {
    "text": "almost a bias- aside but it just shows something different that you could do and it's something that you could play with.",
    "start": "3610540",
    "end": "3617109"
  },
  {
    "text": "I mean, when we talked about machine translation, we talk about the SIC to SIC architecture that was introduced in",
    "start": "3617110",
    "end": "3624500"
  },
  {
    "text": "2014 and has been very successful for machine translation.",
    "start": "3624500",
    "end": "3629930"
  },
  {
    "text": "But actually, the year before that came out, um, there was a paper, um, doing neural machine translation by Nal Kalchbrenner and Phil Blunsom in the UK.",
    "start": "3629930",
    "end": "3641255"
  },
  {
    "text": "And this sort of was actually essentially the first neural machine translation paper of the modern era.",
    "start": "3641255",
    "end": "3648839"
  },
  {
    "text": "If you dig back far enough, there are actually a couple of people that tried to use neural networks for machine translation",
    "start": "3648840",
    "end": "3654134"
  },
  {
    "text": "in the '80s and '90s but this was sort of the first one that restarted it, and they didn't actually use a SIC to SIC architecture.",
    "start": "3654135",
    "end": "3662205"
  },
  {
    "text": "So what they used was for the encoder, they used the convolutional neural networks.",
    "start": "3662205",
    "end": "3668490"
  },
  {
    "text": "And so that they had a stack of convolutional neural networks that progressively shrunk down the input and then finally pulled it to get a sentence representation,",
    "start": "3668490",
    "end": "3678760"
  },
  {
    "text": "and then they used a sequence model as the decoder. Um, so, um, that's sort of something that you could",
    "start": "3678760",
    "end": "3686880"
  },
  {
    "text": "try in some other applications that for encoders, it's really easy to use convolutional neural networks.",
    "start": "3686880",
    "end": "3693800"
  },
  {
    "text": "There has been work on using convolutional neural networks as decoders as well,",
    "start": "3693800",
    "end": "3699175"
  },
  {
    "text": "though that's a little bit harder to get your brain around and isn't used nearly as much.",
    "start": "3699175",
    "end": "3704415"
  },
  {
    "text": "Then the second thing I want to mention because we'll turn to it in just a minute is so,",
    "start": "3704415",
    "end": "3710960"
  },
  {
    "text": "so far we've done Convolutional models over words so that",
    "start": "3710960",
    "end": "3717305"
  },
  {
    "text": "our kernels are effectively picking up these word n-gram units of two-word or three word sub-sequences.",
    "start": "3717305",
    "end": "3726049"
  },
  {
    "text": "And the idea that then developed fairly soon was well maybe it would also be useful to use convolutions over characters.",
    "start": "3726050",
    "end": "3734704"
  },
  {
    "text": "So, you could run a convolutional neural network over the characters of the word to try and,",
    "start": "3734705",
    "end": "3739970"
  },
  {
    "text": "um, generate a word embedding, um, and this idea has been explored quite a lot, um,",
    "start": "3739970",
    "end": "3745760"
  },
  {
    "text": "it's part of what you guys are gonna do for assignment five is build a character level ConvNet,",
    "start": "3745760",
    "end": "3751714"
  },
  {
    "text": "um, for your improved machine translation system. I'm not going to say sort of a huge amount about the foundations of this today, um,",
    "start": "3751715",
    "end": "3760250"
  },
  {
    "text": "because Thursday's lecture is then talking about subword models and we'll go through all the details of different subword models.",
    "start": "3760250",
    "end": "3769055"
  },
  {
    "text": "But, I wanted to show you a con- a complex convolutional neural network which is also used for text classification.",
    "start": "3769055",
    "end": "3778010"
  },
  {
    "text": "So, essentially, the same task as Yoon Kim's model and this model actually is built on characters,",
    "start": "3778010",
    "end": "3786230"
  },
  {
    "text": "it's not built on words. So, we are at the foundation of it, um, having a word-like model.",
    "start": "3786230",
    "end": "3793144"
  },
  {
    "text": "Um, so, this is a paper from 2017, um, by, um, the four authors shown here, um,",
    "start": "3793145",
    "end": "3801349"
  },
  {
    "text": "people working at Facebook AI Research, um, in France, um, and so,",
    "start": "3801350",
    "end": "3807635"
  },
  {
    "text": "they kind of had an interesting hypothesis for this paper which was essentially to say, that, you know,",
    "start": "3807635",
    "end": "3814205"
  },
  {
    "text": "by 2017 people who are using deep learning for vision were building really,",
    "start": "3814205",
    "end": "3822530"
  },
  {
    "text": "really deep networks and fi- finding that they work much,",
    "start": "3822530",
    "end": "3827600"
  },
  {
    "text": "much better for vision tasks. So, essentially to some extend, the breakthrough was these guys that once these ideas that emerged,",
    "start": "3827600",
    "end": "3838490"
  },
  {
    "text": "it then proved that it wasn't just that you could build a six layer or an eight layer,",
    "start": "3838490",
    "end": "3844445"
  },
  {
    "text": "um, Convolutional Neural Network for vision tasks. You could start building really, really deep networks for vision tasks which had tens or even hundreds of",
    "start": "3844445",
    "end": "3854270"
  },
  {
    "text": "layers and that those models when trained on a lot of data proved to work even better.",
    "start": "3854270",
    "end": "3861090"
  },
  {
    "text": "So, um, if that's what's in your head and you then looked,",
    "start": "3861210",
    "end": "3867115"
  },
  {
    "text": "look at what was and indeed is happening in natural language processing,",
    "start": "3867115",
    "end": "3873970"
  },
  {
    "text": "the observation is, you know, these NLP people are kind of pathetic, they claim they're doing deep learning but they're still working with three layer LSTMs.",
    "start": "3873970",
    "end": "3883549"
  },
  {
    "text": "Surely, we can make some progress, um, by building really deep networks that kinda look like vision networks and using them,",
    "start": "3883550",
    "end": "3893735"
  },
  {
    "text": "um, for natural language processing goals. And so, that is precisely what they said about doing.",
    "start": "3893735",
    "end": "3901414"
  },
  {
    "text": "So, that they designed and built really deep network which sort of looks like a vision stack,",
    "start": "3901415",
    "end": "3908930"
  },
  {
    "text": "um, as a convolutional neural network that is built over characters.",
    "start": "3908930",
    "end": "3914900"
  },
  {
    "text": "Um, so, I've got the picture of it here but sufficiently deep that it's fitting it on",
    "start": "3914900",
    "end": "3920660"
  },
  {
    "text": "the slide and making it readable [LAUGHTER] is a little bit of a challenge but we can try and look at this.",
    "start": "3920660",
    "end": "3926150"
  },
  {
    "text": "So, at the bottom, we have the text, um, which is a sequence of characters and so, um,",
    "start": "3926150",
    "end": "3933965"
  },
  {
    "text": "for the text, um, so, when people do vision object recognition on",
    "start": "3933965",
    "end": "3940640"
  },
  {
    "text": "pictures normally all the pictures are made the same size. Right. You make every picture 300 pixels by 300 pixels or something like that.",
    "start": "3940640",
    "end": "3950224"
  },
  {
    "text": "So, they do exactly the same for NLP, um, they have a size, um,",
    "start": "3950225",
    "end": "3955490"
  },
  {
    "text": "for their document which is 1024 characters. If it's longer than that they truncate it and keep the first part.",
    "start": "3955490",
    "end": "3963710"
  },
  {
    "text": "If it's shorter than that they pad it until it's of size 1024 and then they're gonna stick it into their stack.",
    "start": "3963710",
    "end": "3971315"
  },
  {
    "text": "So, the first part is that for each character, they're going to learn a character embedding now and",
    "start": "3971315",
    "end": "3978200"
  },
  {
    "text": "their character embeddings are of dimensionality 16. So, that the piece of text is now 16 by 1024, um, so,",
    "start": "3978200",
    "end": "3989540"
  },
  {
    "text": "they're going to stick that through a convolutional layer where you've got kernel size of three and 64 output channels.",
    "start": "3989540",
    "end": "3998210"
  },
  {
    "text": "So you now have something that's 64 times of 1024 in size.",
    "start": "3998210",
    "end": "4004150"
  },
  {
    "text": "You now stick this through a convolutional block. I'll explain the details of that convolutional block on the next slide but,",
    "start": "4004150",
    "end": "4012085"
  },
  {
    "text": "you should be thinking of that ResNet picture I showed earlier where you can either be going through some convolutions or taking this optional shortcut.",
    "start": "4012085",
    "end": "4021310"
  },
  {
    "text": "Another ResNet, another residual block where you can be going through convolutions are an optional shortcut,",
    "start": "4021310",
    "end": "4028765"
  },
  {
    "text": "um, they're then doing local pooling in the same way people typically do envision.",
    "start": "4028765",
    "end": "4035019"
  },
  {
    "text": "So, commonly what people do in vision systems is you are sort of shrinking the size of the images, um,",
    "start": "4035020",
    "end": "4041530"
  },
  {
    "text": "by doing pooling that halves the dimensions in each direction. But, at the same time,",
    "start": "4041530",
    "end": "4047020"
  },
  {
    "text": "you do that in your neural network, you expand the number of channels, and so you make it deeper in terms of the number of",
    "start": "4047020",
    "end": "4054130"
  },
  {
    "text": "channels at the same time as you make it smaller in the x, y size of the image.",
    "start": "4054130",
    "end": "4059710"
  },
  {
    "text": "So, they do exactly the same apart from these one-dimensional convolutions. So, before we had 64 channels in our 1024 character,",
    "start": "4059710",
    "end": "4069760"
  },
  {
    "text": "um, embedding, um, document. So, now we pool it, um, so,",
    "start": "4069760",
    "end": "4077110"
  },
  {
    "text": "we're going to have 512 positions which are sort of like pairs of characters,",
    "start": "4077110",
    "end": "4083605"
  },
  {
    "text": "um, but we now have 128 channels and then they kind of repeat that over and over again, right?",
    "start": "4083605",
    "end": "4089380"
  },
  {
    "text": "So, there are two more convolutional blocks which I'll explain more but they're sort of residual blocks. They pool it again and they do exactly the same thing.",
    "start": "4089380",
    "end": "4097960"
  },
  {
    "text": "So, now there are 256, um, positions which are like four character blocks and they have 256 channels,",
    "start": "4097960",
    "end": "4106900"
  },
  {
    "text": "um, I can't point high enough but they repeat that again and they pool again. So, now they've got, um,",
    "start": "4106900",
    "end": "4113589"
  },
  {
    "text": "128 positions which are about eight characters each and they have 512 channels representing that.",
    "start": "4113590",
    "end": "4120775"
  },
  {
    "text": "They pool again, they have convolutional blocks again, um, then lo and behold because I said that even the",
    "start": "4120775",
    "end": "4127569"
  },
  {
    "text": "weird ideas are going to turn up, right up there, they're doing k max pooling and they're keeping the eight strongest values,",
    "start": "4127570",
    "end": "4135325"
  },
  {
    "text": "um, in each channel. Um, and so at that point, they've got something of size 512 by eight, um, so,",
    "start": "4135325",
    "end": "4145194"
  },
  {
    "text": "sort of like eight of the eight character sequences have been deemed important to the classification and they're",
    "start": "4145195",
    "end": "4151704"
  },
  {
    "text": "kept but they sort per channel and there are 512 of them you're then putting that through three fully connected layers.",
    "start": "4151705",
    "end": "4159475"
  },
  {
    "text": "So, typically vision systems at the top have a couple of fully connected layers at the end,",
    "start": "4159475",
    "end": "4165355"
  },
  {
    "text": "um, and the very last one of those, is effectively sort of feeding into your Softmax.",
    "start": "4165355",
    "end": "4171835"
  },
  {
    "text": "So, it's size 2,048 times the number of classes which might just be positive negative two class unlike the topical classes.",
    "start": "4171835",
    "end": "4181330"
  },
  {
    "text": "Um, so, yeah, so it's essentially like a vision stack but they're going to use it for language.",
    "start": "4181330",
    "end": "4187180"
  },
  {
    "text": "Um, okay. So, the bit that I hand quite explained was",
    "start": "4187180",
    "end": "4192339"
  },
  {
    "text": "these convolutional blocks but it sort of looks like the picture that we had before or,",
    "start": "4192340",
    "end": "4197514"
  },
  {
    "text": "um, departments slightly more complicated. So you're doing, um, a convolutional block of size three",
    "start": "4197515",
    "end": "4205840"
  },
  {
    "text": "convolutions some number of channels depending on where you are in the sequence. You're then putting it through a batch norm as we just",
    "start": "4205840",
    "end": "4213490"
  },
  {
    "text": "talked about putting it through a ReLu non-linearity, repeating all those three things again or remember there",
    "start": "4213490",
    "end": "4221320"
  },
  {
    "text": "was this sort of skipped connection that went right around the outside of this block. And so this is sort of a residual style block, um, so,",
    "start": "4221320",
    "end": "4231190"
  },
  {
    "text": "that's the kind of complex architecture you can put together and try in your final projects if you dare in PyTorch.",
    "start": "4231190",
    "end": "4238675"
  },
  {
    "text": "Um, yeah, um, so, for experiments so- so one of",
    "start": "4238675",
    "end": "4246090"
  },
  {
    "text": "the things that they were interested in and wanted to make a point of is well some",
    "start": "4246090",
    "end": "4252570"
  },
  {
    "text": "of these traditional sentence and text classification datasets have been used in other papers",
    "start": "4252570",
    "end": "4258969"
  },
  {
    "text": "like Yoon Kim's paper are effectively quite small. So, something like that Rotten Tomatoes dataset is actually only 10,000 examples, 5,000,",
    "start": "4258970",
    "end": "4270550"
  },
  {
    "text": "positive 5,000 negative and they sort of have the idea that just like ImageNet was needed for",
    "start": "4270550",
    "end": "4277179"
  },
  {
    "text": "deep learning models to really show their worth and vision that probably does show the value of a huge model like that.",
    "start": "4277180",
    "end": "4284155"
  },
  {
    "text": "Um, you need to have really big datasets. So, they get some much bigger,",
    "start": "4284155",
    "end": "4289855"
  },
  {
    "text": "um, text classification datasets. So, here's an Amazon review positive-negative dataset, um,",
    "start": "4289855",
    "end": "4296065"
  },
  {
    "text": "with which they have sort of 3.6 million documents, um, Yelp reviews 650,000 documents.",
    "start": "4296065",
    "end": "4303030"
  },
  {
    "text": "So much bigger datasets, um, and here are their experiments.",
    "start": "4303030",
    "end": "4308230"
  },
  {
    "text": "Okay. So, the numbers at the top, uh, for the different datasets of the best previous result printed in the literature,",
    "start": "4308230",
    "end": "4315940"
  },
  {
    "text": "and then if you read the, um, footnotes, um, there are a few things that they want to sort of star.",
    "start": "4315940",
    "end": "4323200"
  },
  {
    "text": "So, the ones that have a star next to them use an external thesaurus which they don't use. [NOISE]",
    "start": "4323200",
    "end": "4333225"
  },
  {
    "text": "And the Yang method, um, use some special techniques as well that I cut off.",
    "start": "4333225",
    "end": "4338610"
  },
  {
    "text": "Um, and the other thing to mention is these numbers, they're error rates, so low is good.",
    "start": "4338610",
    "end": "4344175"
  },
  {
    "text": "Um, so the lower you get them, the better. And so then these are all of their results.",
    "start": "4344175",
    "end": "4350940"
  },
  {
    "text": "Um, and so what can you get out of these results? Um, well, the first thing that you can notice is basically with these results,",
    "start": "4350940",
    "end": "4359545"
  },
  {
    "text": "the deeper networks are working better, right? So, the one I showed you,",
    "start": "4359545",
    "end": "4364845"
  },
  {
    "text": "uh, well, no, I think the one that I have the picture of this isn't the full thing. Um, but they have ones with depth 9, 17,",
    "start": "4364845",
    "end": "4372720"
  },
  {
    "text": "and 29 in terms of the number of convolutional layers, and the deepest one is always the one that's working best.",
    "start": "4372720",
    "end": "4381150"
  },
  {
    "text": "So, that's a proof of deep networks. Um, that didn't keep on working, um,",
    "start": "4381150",
    "end": "4387570"
  },
  {
    "text": "so an interesting footnote here is, um, I guess they thought, oh, this is cool.",
    "start": "4387570",
    "end": "4393225"
  },
  {
    "text": "Why don't we try an even deeper one that has 47 layers and see how well that works?",
    "start": "4393225",
    "end": "4399315"
  },
  {
    "text": "And, I mean, the results were sort of interesting for that. So, for the 47 layer one,",
    "start": "4399315",
    "end": "4406125"
  },
  {
    "text": "it worked a fraction worse than this one. Um, so in one sense you,",
    "start": "4406125",
    "end": "4412050"
  },
  {
    "text": "they showed the result of sort of residual layers work really well.",
    "start": "4412050",
    "end": "4417900"
  },
  {
    "text": "So, they did an experiment of let's try to train a 47-layer network without using residual connections.",
    "start": "4417900",
    "end": "4425325"
  },
  {
    "text": "And, well, it was a lot worse. The numbers went down about two percent. And they trained one with residual connections,",
    "start": "4425325",
    "end": "4432825"
  },
  {
    "text": "and the fact of the matter is the numbers were just a teeny weeny bit worse.",
    "start": "4432825",
    "end": "4438870"
  },
  {
    "text": "They were sort of 0.1 of a percent worse. So, you know, they sort of work just about as well.",
    "start": "4438870",
    "end": "4445514"
  },
  {
    "text": "But, nevertheless, that's kind of different to the situation in vision, because for the sort of residual networks that people are using in vision,",
    "start": "4445515",
    "end": "4455145"
  },
  {
    "text": "this is sort of like the very minimum depth that people use. So, if you're using residual networks in vision typically,",
    "start": "4455145",
    "end": "4463485"
  },
  {
    "text": "you might use ResNet-34. If you're really short on memory and want to have a small model,",
    "start": "4463485",
    "end": "4469215"
  },
  {
    "text": "but you just know you'd get better results if you used ResNet-50, and in fact, if you used ResNet-101 it'd work even better again.",
    "start": "4469215",
    "end": "4476730"
  },
  {
    "text": "Um, and so that somehow, you know, whether it's got to do with the different nature of language or the amounts of data or something,",
    "start": "4476730",
    "end": "4484350"
  },
  {
    "text": "you haven't yet gone to the same depth that you can in vision. Um, but other results, um,",
    "start": "4484350",
    "end": "4490620"
  },
  {
    "text": "so the other thing they're comparing here is that they're comparing three different ways of sort of stringing things down.",
    "start": "4490620",
    "end": "4499245"
  },
  {
    "text": "So, you could be using, um, the stride in the Convolution,",
    "start": "4499245",
    "end": "4506715"
  },
  {
    "text": "you can be using local MaxPooling, and you could be using KMaxPooling.",
    "start": "4506715",
    "end": "4512805"
  },
  {
    "text": "Um, and they're general, they're slightly different numbers as you can see. Each one, um, wins and one, uh,",
    "start": "4512805",
    "end": "4519989"
  },
  {
    "text": "at least one of these datasets or actually at least two of these datasets. But not only does MaxPooling win for four of the datasets,",
    "start": "4519990",
    "end": "4527430"
  },
  {
    "text": "if you sort of look at the numbers, MaxPooling always does pretty well. Because MaxPooling does pretty well here,",
    "start": "4527430",
    "end": "4534495"
  },
  {
    "text": "whereas the convolutional stride works badly, and over here MaxPooling works pretty well,",
    "start": "4534495",
    "end": "4541605"
  },
  {
    "text": "and the, um, KMaxPooling works kind of badly. So, their recommendation at the end of the day is you should always use, um,",
    "start": "4541605",
    "end": "4550890"
  },
  {
    "text": "just MaxPooling of a simple kind, that that seems to be fine, um, and nothing else.",
    "start": "4550890",
    "end": "4557340"
  },
  {
    "text": "Um, it's actually worth the trouble of thinking about doing. Okay. Um, was there any other conclusions I wanted to say?",
    "start": "4557340",
    "end": "4570540"
  },
  {
    "text": "Okay. Um, I think that was most of that. I guess their overall message is you can build super good, um,",
    "start": "4570540",
    "end": "4577440"
  },
  {
    "text": "text classification systems using ConvNets, and you should take away that message.",
    "start": "4577440",
    "end": "4582630"
  },
  {
    "text": "Okay. So, there are just a couple of minutes left. There was sort of one other thing that I wanted to mention,",
    "start": "4582630",
    "end": "4590145"
  },
  {
    "text": "but I think I'll just sort of mention it very quickly, and you can look in more detail if you want to.",
    "start": "4590145",
    "end": "4596505"
  },
  {
    "text": "So, we sort of have this situation that re- recurrent neural networks are a very standard building block for NLP,",
    "start": "4596505",
    "end": "4604065"
  },
  {
    "text": "but they have this big problem that they just don't parallelize well.",
    "start": "4604065",
    "end": "4609405"
  },
  {
    "text": "And the way we get fast computation deep learning is we find things that parallelize well so that we can stick them on GPUs.",
    "start": "4609405",
    "end": "4618179"
  },
  {
    "text": "GPUs only are fast if they can be simultaneously doing the same computation many times,",
    "start": "4618180",
    "end": "4625425"
  },
  {
    "text": "which is sort of trivial for a convolutional neural network, because precisely, you're doing the same comput- computation every position.",
    "start": "4625425",
    "end": "4633225"
  },
  {
    "text": "But that's not what's happening in the recurrent neural network because you have to work out the value of position one",
    "start": "4633225",
    "end": "4639990"
  },
  {
    "text": "before you can start to calculate the value of position two, which is used for the value of position three.",
    "start": "4639990",
    "end": "4646320"
  },
  {
    "text": "Um, so this was a piece of work, um, done by sometimes CS224N co-instructor",
    "start": "4646320",
    "end": "4653030"
  },
  {
    "text": "Richard Socher and some of his people at Salesforce Research on saying, how can we get the best of both worlds?",
    "start": "4653030",
    "end": "4660110"
  },
  {
    "text": "How can we get something that's kind of like a recurrent neural network, but doesn't have the bad computational properties?",
    "start": "4660110",
    "end": "4669650"
  },
  {
    "text": "And so the idea that they had was, well, rather than doing the standard LSTM style thing where you're calculating, you know,",
    "start": "4669650",
    "end": "4680550"
  },
  {
    "text": "an updated candidate value and your gates in terms of the preceding time slice,",
    "start": "4680550",
    "end": "4687090"
  },
  {
    "text": "maybe what instead we could do is we could stick a relation between time",
    "start": "4687090",
    "end": "4693510"
  },
  {
    "text": "minus 1 and time into the MaxPooling layer of a convolutional neural network.",
    "start": "4693510",
    "end": "4700155"
  },
  {
    "text": "So, we're sort of calculating a candidate and a forget gate and an output gate.",
    "start": "4700155",
    "end": "4706260"
  },
  {
    "text": "But these, these candidate and the, um, gated values are done inside the pooling layer via compute,",
    "start": "4706260",
    "end": "4718500"
  },
  {
    "text": "um, via, um, uh, uh, convolutional operation.",
    "start": "4718500",
    "end": "4724350"
  },
  {
    "text": "So, it sort of get, it doesn't, it, you know, if there's no free lunch you can't get true recurrence and not pay the penalty.",
    "start": "4724350",
    "end": "4733065"
  },
  {
    "text": "This is giving you sort of a pseudo-recurrence because you are modeling an association between adjacent elements at each time slice,",
    "start": "4733065",
    "end": "4742244"
  },
  {
    "text": "but it's sort of just worked out locally rather than being carried forward, um, in one layer.",
    "start": "4742244",
    "end": "4748200"
  },
  {
    "text": "But sort of what they found is, if you made your networks deeper using this idea,",
    "start": "4748200",
    "end": "4754320"
  },
  {
    "text": "well then, you sort of start to, again, expand your window of influence. So, you got a certain amount of information being carried forward.",
    "start": "4754320",
    "end": "4762090"
  },
  {
    "text": "Um, so, their conclusions was that you could sort of build these kind of models and get them to work,",
    "start": "4762090",
    "end": "4768870"
  },
  {
    "text": "you know, not necessarily better actually on this slide, um, it says often better. Um, you can get them to work kind of as well as an LSTM does,",
    "start": "4768870",
    "end": "4777540"
  },
  {
    "text": "but you could get them to work much faster because you're avoiding the standard recurrent operation and keeping it as something that you can parallelize,",
    "start": "4777540",
    "end": "4786554"
  },
  {
    "text": "um, in the MaxPooling operations. Um, yes, so that was a kind of",
    "start": "4786555",
    "end": "4793034"
  },
  {
    "text": "an interesting alternative way of sort of trying to get some of the benefits. I think long-term this isn't the idea that's going to end up winning out.",
    "start": "4793035",
    "end": "4801825"
  },
  {
    "text": "And so next week we're going to talk about transformer networks, which actually seems to be the idea that's gained the most steam at the moment.",
    "start": "4801825",
    "end": "4809655"
  },
  {
    "text": "Okay. I'll stop there for today. Thanks a lot.",
    "start": "4809655",
    "end": "4812829"
  }
]