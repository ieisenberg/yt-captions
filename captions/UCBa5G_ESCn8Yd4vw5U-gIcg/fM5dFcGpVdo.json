[
  {
    "text": "And we I guess I better start this morning by recapitulating a little bit where we are.",
    "start": "7310",
    "end": "14510"
  },
  {
    "text": "But the main theme for today in the four elections will be the.",
    "start": "14510",
    "end": "20030"
  },
  {
    "text": "The guts of tech, the inner parts that really do most of the processing inside.",
    "start": "20030",
    "end": "26960"
  },
  {
    "text": "And tomorrow's theme is going to be the. Things that are going to be a primary concern to people in this audience.",
    "start": "26960",
    "end": "35329"
  },
  {
    "text": "How they or what they really want to know about the things that is going to be slightly different from one place to another.",
    "start": "35330",
    "end": "45230"
  },
  {
    "text": "So to remind you of this of the structure of tech itself.",
    "start": "45230",
    "end": "52489"
  },
  {
    "text": "Somebody asked yesterday. Could they have a copy of this diagram? And so I made up Xerox copies, will pass these out now.",
    "start": "52490",
    "end": "60330"
  },
  {
    "text": "Start starting going in two directions. Oh, you can get a feeling for where we are.",
    "start": "60330",
    "end": "71680"
  },
  {
    "text": "Now, this is. Remember, they said this part was the code and each box represents about 10 modules in your listing.",
    "start": "71680",
    "end": "84560"
  },
  {
    "text": "So when we were talking yesterday about the dynamic memory in the last hour, this represents the amount of code there was for the dynamic memory.",
    "start": "84560",
    "end": "92759"
  },
  {
    "text": "But the dynamic memory itself was taking a lot more space that we that might might overlap this whole diagram by at least half of it,",
    "start": "92760",
    "end": "102920"
  },
  {
    "text": "but maybe maybe all of it for the dynamic memory itself. Then they eat the KUTV TV.",
    "start": "102920",
    "end": "107930"
  },
  {
    "text": "The equivalent table was is what I call locals here.",
    "start": "107930",
    "end": "114380"
  },
  {
    "text": "This is the part of the. This is the part of the program that that refers to saving and restoring the equivalence and defining",
    "start": "114380",
    "end": "121130"
  },
  {
    "text": "all the macros that we had for equivalent in the first lecture that we're having this morning.",
    "start": "121130",
    "end": "128060"
  },
  {
    "text": "I want to study this part, Syntex, which is the part that tech that reads the input and figures out what to do next.",
    "start": "128060",
    "end": "138410"
  },
  {
    "text": "Then next hour, we'll be talking about semantics, which is doing it, and questions on what we're about to do.",
    "start": "138410",
    "end": "147250"
  },
  {
    "text": "So then we'll go back in and take a look at that listing.",
    "start": "147250",
    "end": "153690"
  },
  {
    "text": "So certainly I can't cover all of the all of the ideas of syntax in one hour.",
    "start": "153690",
    "end": "161300"
  },
  {
    "text": "But what I want to do is give you the feeling for for how it's organized so that if you have any particular question on it,",
    "start": "161300",
    "end": "169550"
  },
  {
    "text": "you know exactly where to look. And the sections on syntax start out with part twenty one, module 277, introduction to the syntactic routines.",
    "start": "169550",
    "end": "183230"
  },
  {
    "text": "And then that carries on through. Part 27 building talking this with the basic scanning subroutines.",
    "start": "183230",
    "end": "191599"
  },
  {
    "text": "Part 26 system is the bulk of the thing that's that's about 55 modules worth in that in that section.",
    "start": "191600",
    "end": "199550"
  },
  {
    "text": "And I'll probably talk a lot about basic scanning, sifting, since I can't cover everything. The approach I usually take is is trying to do a sample,",
    "start": "199550",
    "end": "209410"
  },
  {
    "text": "a random sample study to study the whole thing lightly and one thing in depth and thereby get some some idea.",
    "start": "209410",
    "end": "219120"
  },
  {
    "text": "I'm not sure which one to study in depth. And maybe I can take some suggestions from the audience as we get into it.",
    "start": "219120",
    "end": "224330"
  },
  {
    "text": "But first, they should we should start out just with the basic idea of syntax.",
    "start": "224330",
    "end": "230000"
  },
  {
    "text": "What we have to do. The goal of syntax is to deliver is to scan the input and deliver the necessary information to the semantic routines.",
    "start": "230000",
    "end": "244580"
  },
  {
    "text": "And at the at the level of semantic routine, once it it usually wants to get a command and a modifier to the command, which is.",
    "start": "244580",
    "end": "255470"
  },
  {
    "text": "Which is called. Sure. Sure. Sometimes is a pointer.",
    "start": "255470",
    "end": "260480"
  },
  {
    "text": "Not really a character. So we have a command code and a character part.",
    "start": "260480",
    "end": "265700"
  },
  {
    "text": "And then there's also the C.S. pointer goes with it in case the thing that you fetch from the input was the control sequence.",
    "start": "265700",
    "end": "274370"
  },
  {
    "text": "Then the command will will maybe be. I'm sorry, the CEO's point will point to whatever control sequence actually gave this had this command and so that it kicked in an error message,",
    "start": "274370",
    "end": "286639"
  },
  {
    "text": "for example. You you'd like to use the the control sequence that actually caused this thing.",
    "start": "286640",
    "end": "296390"
  },
  {
    "text": "Somebody in tech can say, let's backslash a equals def or something like this.",
    "start": "296390",
    "end": "304670"
  },
  {
    "text": "Now, if I have a or what if you decided to redefine text primitive called def and the user is using some other name for it,",
    "start": "304670",
    "end": "312740"
  },
  {
    "text": "then you have an error message. You'd like to use the the new name in the error message rather than the the old one.",
    "start": "312740",
    "end": "321319"
  },
  {
    "text": "So C.S. Pointer is another thing you get from the input routine so that the thing that delivers the next token is called get.",
    "start": "321320",
    "end": "332390"
  },
  {
    "text": "Seventeen get next, and its job is to get the next token of input.",
    "start": "332390",
    "end": "341330"
  },
  {
    "text": "Now might sound like an easy job after all. You just advance your point or one in the buffer and there it is.",
    "start": "341330",
    "end": "349660"
  },
  {
    "text": "Right. However, get next. Turns out to have a lot of different things that it might be having to get.",
    "start": "349660",
    "end": "358930"
  },
  {
    "text": "For example, it had it might have to expand a Mac or it might have to be reading an argument on macro.",
    "start": "358930",
    "end": "366850"
  },
  {
    "text": "It might have to recognize the control sequence. Whether it's defined or not, and look it up in the hash table, it might have.",
    "start": "366850",
    "end": "374200"
  },
  {
    "text": "It might find that in order to get the next thing, actually we have to prompt for it.",
    "start": "374200",
    "end": "379460"
  },
  {
    "text": "Because because it hasn't been given to us yet. Might run to the end of a file and and ah.",
    "start": "379460",
    "end": "391100"
  },
  {
    "text": "You know, so. So if we get to the end of the file, it means that we have to close out their file. Do some processing. All kinds of things can actually happen when you say get next.",
    "start": "391100",
    "end": "403480"
  },
  {
    "text": "Historically, in fact, the get next was the routine that started this whole web project going.",
    "start": "403480",
    "end": "409690"
  },
  {
    "text": "We took the we took the get next procedure out of tech.",
    "start": "409690",
    "end": "414890"
  },
  {
    "text": "Seventy eight. And we we said, well, how would how would we really want to present this, this code.",
    "start": "414890",
    "end": "424210"
  },
  {
    "text": "And we and we played around with Lewis and I tried several drafts until we until we had played around with it,",
    "start": "424210",
    "end": "431169"
  },
  {
    "text": "till we got to what we thought would be a good way to present the next routine. And that led to the doc system of two years ago and eventually to the Web.",
    "start": "431170",
    "end": "442300"
  },
  {
    "text": "So it was a it was had enough structure and some parts to us that it did that it",
    "start": "442300",
    "end": "449080"
  },
  {
    "text": "was really our first test case for the whole idea of this style of documentation.",
    "start": "449080",
    "end": "456250"
  },
  {
    "text": "The get next routine is, is it begins in module 317.",
    "start": "456250",
    "end": "464690"
  },
  {
    "text": "And the hope the structure of it is it's given there.",
    "start": "464690",
    "end": "470590"
  },
  {
    "text": "So I get next. It's by itself looks looks very simple. Let's see if we can if we can get if we can focus on this.",
    "start": "470590",
    "end": "478120"
  },
  {
    "text": "Can you read can you read that with your TV. Can with your camera.",
    "start": "478120",
    "end": "484630"
  },
  {
    "text": "Try to get ceiling set up the where we had yesterday. Yes. OK.",
    "start": "484630",
    "end": "493020"
  },
  {
    "text": "You need enough light. Not on my podium. In order to read the. In order to see where my finger is within and people on the screen might could",
    "start": "493020",
    "end": "501090"
  },
  {
    "text": "see where I'm pointing if if they project onto the screen what's going on. The monitor. It worked. Yes. Yesterday would might take a little bit of figuring to do it here.",
    "start": "501090",
    "end": "511570"
  },
  {
    "text": "Now I've got something on the screen here and I'm pointing to get next of kin. All you can see a finger. Yeah, well that's about all.",
    "start": "511570",
    "end": "519990"
  },
  {
    "text": "OK. Somebody said that they could shut the door back there and that would make the light. That would make it easier to read the screen. OK.",
    "start": "519990",
    "end": "529270"
  },
  {
    "text": "So the whole idea of getting extras is rather simple.",
    "start": "529270",
    "end": "534700"
  },
  {
    "text": "Then we have a couple of labels in here restart. If we have if for some reason what we tried to get resulted in nothing.",
    "start": "534700",
    "end": "542650"
  },
  {
    "text": "And so we have to have to start again. Then there's some other some other switches that we go to. But the the code is forget next is very short, except that we involve a couple of submodular.",
    "start": "542650",
    "end": "552460"
  },
  {
    "text": "So we set C. S pointer to zero six pointer is going to be zero unless there was a control sequence gucky.",
    "start": "552460",
    "end": "561340"
  },
  {
    "text": "That's why the EQR TB starts at location one instead of zero, because the first control sequence actually is is is one.",
    "start": "561340",
    "end": "570500"
  },
  {
    "text": "Now then state is one of the variables that we have set up for us all the time",
    "start": "570500",
    "end": "576790"
  },
  {
    "text": "at our fingertips to tell us what kind of what kind of input we're doing.",
    "start": "576790",
    "end": "583839"
  },
  {
    "text": "If the state is talking list, that means that we're getting we're getting something not from the user source file,",
    "start": "583840",
    "end": "591070"
  },
  {
    "text": "but from from inside of tech, from some talking list that that we have to read through and get the next symbol off.",
    "start": "591070",
    "end": "600250"
  },
  {
    "text": "That token list to tokenized can be about, oh, about ten different kinds. So the for example, it could be an output routine, it could be a macro, could be every PA.",
    "start": "600250",
    "end": "613399"
  },
  {
    "text": "This feature that comes up at the beginning of a paragraph could be the parameter to a macro, could be something that we inserted just to back up.",
    "start": "613400",
    "end": "621010"
  },
  {
    "text": "We we read, we read some token. We decided we weren't ready for it now. So we put it back and we packed into a small token list so that we can read it again.",
    "start": "621010",
    "end": "629920"
  },
  {
    "text": "It might be. Something like we converted a number to Roman numerals and we want to read that.",
    "start": "629920",
    "end": "635459"
  },
  {
    "text": "So anyway, talking. So Tolkan, this is one way we can get input, but if it's not talking, this if the state is not open this, then we get input from an external file.",
    "start": "635460",
    "end": "645960"
  },
  {
    "text": "And we would go to restart if there wasn't anything found. Otherwise, we, of course,",
    "start": "645960",
    "end": "651000"
  },
  {
    "text": "want input from a token list and we have other cases where we might have to go to restart because there was nothing there yet.",
    "start": "651000",
    "end": "658680"
  },
  {
    "text": "So two main branches of getting text for this, two cases. Then if we've got to the end of an alignment entry, then we have to do something special for alignment.",
    "start": "658680",
    "end": "667530"
  },
  {
    "text": "Here's one one of the places where this posthypnotic suggestion comes in with alignment, saying that, for example, if you if you've just now got to a tab marked in alignment.",
    "start": "667530",
    "end": "677610"
  },
  {
    "text": "This is the time to emit. The thing that's supposed to finish off that column.",
    "start": "677610",
    "end": "685019"
  },
  {
    "text": "And so you do a little bit of special calculation for alignment. If you just happen to notice that if it gets triggered right here in the middle, look at next get next as part of the inner loop of the code.",
    "start": "685020",
    "end": "699269"
  },
  {
    "text": "Certainly when we read the first part of it here, this restarts has pointed to zero and so on.",
    "start": "699270",
    "end": "704640"
  },
  {
    "text": "And I talked a little bit about Interlude yesterday. Now, if you want to find out exactly where, I think most of the time is spent in tech,",
    "start": "704640",
    "end": "711000"
  },
  {
    "text": "you look in the index and under inner loop and it refers you to about 20 modules, which I believe are the ones that that account for almost all of the processing time",
    "start": "711000",
    "end": "722640"
  },
  {
    "text": "in the sense that the other ones are probably executed in order magnitude less. And not all of these modules are executed very often.",
    "start": "722640",
    "end": "732570"
  },
  {
    "text": "But so we try to write the programs so that the frequent parts are done in rather fast.",
    "start": "732570",
    "end": "739980"
  },
  {
    "text": "And. And I think my estimate is something like 100 machine instructions per per character of text is is approximately right.",
    "start": "739980",
    "end": "750180"
  },
  {
    "text": "I have to double check it again now that I've got the whole text put together. But that was if you consider what would happen if you took a text file, added one more character to one of the paragraphs.",
    "start": "750180",
    "end": "763020"
  },
  {
    "text": "How many more machine instructs instructions with the C4 you have to do? And it was on the order of one hundred, I believe. And that and you tried to keep that going fast.",
    "start": "763020",
    "end": "775410"
  },
  {
    "text": "So we want we won't get next in particular to be reasonably, reasonably fast.",
    "start": "775410",
    "end": "782519"
  },
  {
    "text": "And if we're inputting from an external file, we call to module not 319.",
    "start": "782520",
    "end": "789460"
  },
  {
    "text": "Module 319 is a switch that we're reading from an external file now.",
    "start": "789460",
    "end": "798660"
  },
  {
    "text": "So our state actually the state consists of of a number of different things, five or six different quantities that actually correspond to to the current input state.",
    "start": "798660",
    "end": "807839"
  },
  {
    "text": "And one of them is called State, which we looked at to see if it was talking this or not.",
    "start": "807840",
    "end": "813750"
  },
  {
    "text": "Another one is called Look, which is the location where we are in the buffer. Another one is called Limit, which is the end of that line. In the buffer, in the buffer.",
    "start": "813750",
    "end": "823170"
  },
  {
    "text": "We might have lots of different lines. We might have part of a line from a terminal. We have we then we're reading some file.",
    "start": "823170",
    "end": "830730"
  },
  {
    "text": "And in the middle that might have said input from another file. And so so we might have several different things in the buffer.",
    "start": "830730",
    "end": "838440"
  },
  {
    "text": "But that limit tells where that where the current line ends and if it's a local less than the legal limit and current line is not yet finished.",
    "start": "838440",
    "end": "845700"
  },
  {
    "text": "And so we have to do the thing that we're almost always doing. Now, when the lock is greater than limit, though,",
    "start": "845700",
    "end": "850830"
  },
  {
    "text": "then we have an unusual case not in the inner loop and that is moved to the next minor file or go to restart if there is no next line in the file.",
    "start": "850830",
    "end": "858810"
  },
  {
    "text": "And so we do that. And that's the time when we can also check and interrupt.",
    "start": "858810",
    "end": "864630"
  },
  {
    "text": "There is a provision, if you can do it in your system, for interrupts for interrupting tech and safe times to make an interrupt.",
    "start": "864630",
    "end": "875610"
  },
  {
    "text": "I'll say check it out. There aren't that many places where I do it. But this is this is a fairly good place at the end of a line in the buffer.",
    "start": "875610",
    "end": "885769"
  },
  {
    "text": "So if you at the end of a token, this is another is another place.",
    "start": "885770",
    "end": "891510"
  },
  {
    "text": "And this happens fast enough that if somebody's sitting there and wants to stop the tech run or do something special,",
    "start": "891510",
    "end": "897570"
  },
  {
    "text": "you can probably catch it in one of those places now.",
    "start": "897570",
    "end": "903730"
  },
  {
    "text": "And the main case, though, the one that that we want to be at high speed is this first line here where LOC is less than or equal limit,",
    "start": "903730",
    "end": "912630"
  },
  {
    "text": "because that's the case where we're most interested in getting to go fast. OK, so then we said current cha cha to buffer position buffer look.",
    "start": "912630",
    "end": "923550"
  },
  {
    "text": "So a buffer is a is an array of ASCII code characters. This is TECs internal code and. The external file has been converted to that and sits in the buffer next in internal code form increase location,",
    "start": "923550",
    "end": "937830"
  },
  {
    "text": "and then we go to set up the current command, which is that the code of the Kirchherr Code of Kirchherr is really this is a macro that's an",
    "start": "937830",
    "end": "948510"
  },
  {
    "text": "abbreviation for get out of the EU to be the current value of the of the of the code for that character.",
    "start": "948510",
    "end": "957390"
  },
  {
    "text": "We have made sure elsewhere that this that this is going to be in range.",
    "start": "957390",
    "end": "962940"
  },
  {
    "text": "Nobody's allowed to store into that part of KUTV a number. That's. That's. That couldn't possibly be a code of a character.",
    "start": "962940",
    "end": "971250"
  },
  {
    "text": "I think the only legal ones are zero to 15. So this this this is known to be current command is now known to be a number of in zero and fifteen.",
    "start": "971250",
    "end": "979650"
  },
  {
    "text": "And then we have the big thing that changes state and go to switch if the current character should be ignored or not.",
    "start": "979650",
    "end": "985650"
  },
  {
    "text": "The tech manual. I have a chapter that sort that sort of says what the states are and how we're how we're actually reading.",
    "start": "985650",
    "end": "991050"
  },
  {
    "text": "So we have a state that says we're skipping blanks. If we're skipping blank state, then if a blank comes next, we skip it.",
    "start": "991050",
    "end": "999480"
  },
  {
    "text": "And so on. There's there's three states, actually, midline new line and skipping blanks.",
    "start": "999480",
    "end": "1005089"
  },
  {
    "text": "And we want this to be fast. So that's module 320. Let's take a look at what that is. So a module 320 is a big case statement and and it's done by case of state plus Kirk command.",
    "start": "1005090",
    "end": "1019190"
  },
  {
    "text": "So the state is now encoded as a number that is one 17 or 33.",
    "start": "1019190",
    "end": "1027829"
  },
  {
    "text": "I believe it is. So that's the current command being between zero and 15. Added to the state will take us to a unique location. No, since multiplying here, we're in the inner loop.",
    "start": "1027830",
    "end": "1040189"
  },
  {
    "text": "We might as well define the state code so that it already includes the multiplication by 16.",
    "start": "1040190",
    "end": "1045629"
  },
  {
    "text": "And and so then we can have a state of various states like, well, here's an example, midline plus spacer midline plus carriage return.",
    "start": "1045630",
    "end": "1056900"
  },
  {
    "text": "Blanks plus carriage return. Any state plus in line, any state plus is a is a macro that's defined.",
    "start": "1056900",
    "end": "1065990"
  },
  {
    "text": "Two that's defined over here. Where was it here. Any state plus anybody. Any state plus a midline.",
    "start": "1065990",
    "end": "1075820"
  },
  {
    "text": "So that adds midline plus the things skip length plus the thing new line plus. So anyway this is the way we recognize it's a it's a sixteen to forty eight.",
    "start": "1075820",
    "end": "1086600"
  },
  {
    "text": "We switch that at high speed, decide what to do next.",
    "start": "1086600",
    "end": "1093230"
  },
  {
    "text": "Okay. If for example, we get any state plus escape we have to scana control sequence and then set state",
    "start": "1093230",
    "end": "1101270"
  },
  {
    "text": "to skip blanks because we're going to skip a blank after a control sequence. That's the way this this part of the code looks.",
    "start": "1101270",
    "end": "1108050"
  },
  {
    "text": "And the the number of machine instructions actually needed for this is supposed to be rather small.",
    "start": "1108050",
    "end": "1115250"
  },
  {
    "text": "If you and if your compiler really does terrible things with case statements,",
    "start": "1115250",
    "end": "1121430"
  },
  {
    "text": "then you might want to take the the the few places in the inner loop where there is a case statement",
    "start": "1121430",
    "end": "1127710"
  },
  {
    "text": "and and and do something special to the to that part of the program that as a refinement,",
    "start": "1127710",
    "end": "1135380"
  },
  {
    "text": "but it will make tech run faster. If you can make this part run five percent faster.",
    "start": "1135380",
    "end": "1141530"
  },
  {
    "text": "Your tech will probably run four percent faster. So something like that I think is is worth pointing out now.",
    "start": "1141530",
    "end": "1151400"
  },
  {
    "text": "I mean, if you have a talking list that starts in module three three.",
    "start": "1151400",
    "end": "1156780"
  },
  {
    "text": "And so the token list, again, we have state state information besides the state, the thing variable called state itself will equal token list.",
    "start": "1156780",
    "end": "1169340"
  },
  {
    "text": "But then look, in this case will be a pointer to what token is next in the in the men in a memory array.",
    "start": "1169340",
    "end": "1177230"
  },
  {
    "text": "And if that's no, then we might you know, we're at the end of the talking list. But if it's not now, then we we fetched out of the token the command and char and C.",
    "start": "1177230",
    "end": "1187040"
  },
  {
    "text": "S finer, just as if we had scanned it out of the input. And otherwise, if it's null, then again, we have one of these things where we where we can end a token list.",
    "start": "1187040",
    "end": "1198890"
  },
  {
    "text": "I thought that I, I guess in token list itself is where the is where it would check for an in or out.",
    "start": "1198890",
    "end": "1209610"
  },
  {
    "text": "OK. I am surprised I don't see a for interrupting there, but I suppose it's in token list itself.",
    "start": "1209610",
    "end": "1215740"
  },
  {
    "text": "I don't want to take time to look it up now. One thing I wanted to mention about this is that you'll notice that the control sequence never doesn't live in men by its alphabetic name.",
    "start": "1215740",
    "end": "1227659"
  },
  {
    "text": "The only control sequence is certain is repeated. It as as the as an address and if you TB in that token.",
    "start": "1227660",
    "end": "1237350"
  },
  {
    "text": "And so the only time you're ever you're ever looking at at at at US control sequence to figure out what Atash address is,",
    "start": "1237350",
    "end": "1246919"
  },
  {
    "text": "is when that is when that appeared in a file. Only when the only time you are scanning it, you have to compute a hash code to figure out where the key to be addresses is.",
    "start": "1246920",
    "end": "1262179"
  },
  {
    "text": "In the first case, I forget next where you saw and escapes the limiter in the file. So if you have a long or short macro name, it doesn't make any difference when you're actually using the macro how long the name was.",
    "start": "1262180",
    "end": "1275360"
  },
  {
    "text": "It only took a little longer if for a long name. At first when you input the thing into into a talking list in the first place.",
    "start": "1275360",
    "end": "1282500"
  },
  {
    "text": "But once once you've got a control sequence into a talking list,",
    "start": "1282500",
    "end": "1288950"
  },
  {
    "text": "it's just like any other control sequence, no matter how long it's it's actual external name was.",
    "start": "1288950",
    "end": "1295630"
  },
  {
    "text": "OK. So all of these modules handle then the those weird cases of get next where we have to do things like a person has said pause set to non-zero value.",
    "start": "1295630",
    "end": "1308360"
  },
  {
    "text": "And in that case, that means that after you've read a new line onto your file, you're supposed to display it on the terminal,",
    "start": "1308360",
    "end": "1314540"
  },
  {
    "text": "give the user a chance to see what's going on and maybe make a change to it before tech actually gets it.",
    "start": "1314540",
    "end": "1320810"
  },
  {
    "text": "You have to. And in my change file, the only thing I had to change and get next was to make it more friendly on our particular editor at Sale,",
    "start": "1320810",
    "end": "1331610"
  },
  {
    "text": "which is page oriented editor. So we have not only page numbers, line numbers, but we also have page numbers.",
    "start": "1331610",
    "end": "1336860"
  },
  {
    "text": "So I. So I had to make sure that that the page number would get adjusted when I passed the page marking the file.",
    "start": "1336860",
    "end": "1347570"
  },
  {
    "text": "Also, I spent most of an afternoon trying to get it to work with our our line editor, which is a special feature system that allows the user to change a line as as it",
    "start": "1347570",
    "end": "1359600"
  },
  {
    "text": "comes in and edit it with them with some rather powerful editing commands us.",
    "start": "1359600",
    "end": "1365090"
  },
  {
    "text": "That was search for characters and insert characters in the line and so on.",
    "start": "1365090",
    "end": "1370640"
  },
  {
    "text": "And I and I made made the this part of the of the next routine, talked to that system routine.",
    "start": "1370640",
    "end": "1379280"
  },
  {
    "text": "So it's certainly not standard in Pa. So I had to do those two things in the change file for Forget Next now.",
    "start": "1379280",
    "end": "1386360"
  },
  {
    "text": "Now almost all users of get next are covered in the next part of the program.",
    "start": "1386360",
    "end": "1392809"
  },
  {
    "text": "They're starting at three thirty eight. And the most common way to call get next is, is get NSC token.",
    "start": "1392810",
    "end": "1414200"
  },
  {
    "text": "If you look at the rest of text, you'll find and find out where he's got next actually used, you think? Well, this would be one of the most common subroutines to call because you need to get the next token a lot in a lot of different places.",
    "start": "1414200",
    "end": "1425300"
  },
  {
    "text": "And continue on advancing to do something. But if you look at the index under get next for the uses of would you find that it's only only used in about four places,",
    "start": "1425300",
    "end": "1435140"
  },
  {
    "text": "but that's what it's used in. Get NC Token and most of the other times in tech, when we when we want the next thing,",
    "start": "1435140",
    "end": "1442700"
  },
  {
    "text": "we actually get what we actually call this subroutine instead of the other one.",
    "start": "1442700",
    "end": "1447740"
  },
  {
    "text": "The only exception to that is, well, the only place where where the main body of tech itself calls get next is in the inner loop,",
    "start": "1447740",
    "end": "1457640"
  },
  {
    "text": "where we want to avoid an extra level of procedure overhead, get n c token. And so in the very inner loop where you're scanning a word out of a paragraph and looking for ligatures and things like this,",
    "start": "1457640",
    "end": "1468590"
  },
  {
    "text": "where you expect that the next letter is the next thing, it's just gonna be a letter. Then you call get next in order to avoid getting antsy talking.",
    "start": "1468590",
    "end": "1475549"
  },
  {
    "text": "And then if you look at it and it looks like it's something that's more complicated than what we'll call a subroutine and leave the inner loop.",
    "start": "1475550",
    "end": "1484820"
  },
  {
    "text": "So this inner loop has has the idea of making it efficient,",
    "start": "1484820",
    "end": "1490519"
  },
  {
    "text": "has has affected the according to as much to a certain extent, makes it a little harder to read.",
    "start": "1490520",
    "end": "1497870"
  },
  {
    "text": "But only I think only one only one percent harder. So it was OK.",
    "start": "1497870",
    "end": "1503150"
  },
  {
    "text": "Now get M.C. Tolkan is like get next. But it does, it does more. It in NC stands for non call and call.",
    "start": "1503150",
    "end": "1512360"
  },
  {
    "text": "It is a macro that that or that has to be expanded.",
    "start": "1512360",
    "end": "1517610"
  },
  {
    "text": "So you get NC token means that if, if it's the get next.",
    "start": "1517610",
    "end": "1522950"
  },
  {
    "text": "But if it turned out the next thing was a macro, expand it and get me the next thing that isn't a macro.",
    "start": "1522950",
    "end": "1531340"
  },
  {
    "text": "So this is the. So when I call get NSC token, this is let me see whatever is next, but be sure that it doesn't include any control.",
    "start": "1531340",
    "end": "1539590"
  },
  {
    "text": "It's not something that's been vetted. Furthermore, get NSC token sets besides command and.",
    "start": "1539590",
    "end": "1550740"
  },
  {
    "text": "In fact, it's called Kurr Command and Kirchherr are the variables that get next sent.",
    "start": "1550740",
    "end": "1557470"
  },
  {
    "text": "It sets Curto, which is the which is a token a half word representation of the command and char and C pointer so that you can,",
    "start": "1557470",
    "end": "1569830"
  },
  {
    "text": "you can have one variable that that stands for all of the others in effect form.",
    "start": "1569830",
    "end": "1576519"
  },
  {
    "text": "This is this is convenient if you want to store it away. In another token, that's just something like that. You can use it if you have to back up. It's already to be backed up. So so get insee token gives you the values of Kirkman,",
    "start": "1576520",
    "end": "1589179"
  },
  {
    "text": "Kerch are C.S. Pointer and Kirk talk which and this is enough by itself to deduce the other three.",
    "start": "1589180",
    "end": "1599900"
  },
  {
    "text": "Get NC token it is, it is.",
    "start": "1599900",
    "end": "1605930"
  },
  {
    "text": "Will also expand not only macros, but it will it will expand markets like Top Mark or something like that if you if you want to,",
    "start": "1605930",
    "end": "1616730"
  },
  {
    "text": "which are somewhat analogous to macros. If you if the next token is an undefined control sequence, you get NC token issues,",
    "start": "1616730",
    "end": "1626480"
  },
  {
    "text": "you the error error message saying undefined control sequence because this is where it would it would not let let it get through.",
    "start": "1626480",
    "end": "1634429"
  },
  {
    "text": "When you call it NC token, you don't have to check afterwards that the thing was an undefined control sequence.",
    "start": "1634430",
    "end": "1639710"
  },
  {
    "text": "Get NC and will. We'll already remove all unconfined control sequences from you and get the next thing that's really legitimate.",
    "start": "1639710",
    "end": "1648899"
  },
  {
    "text": "There is another routine called NC Token. I might just mention because it's used only in the one place in the inner loop where the inner loop.",
    "start": "1648900",
    "end": "1656540"
  },
  {
    "text": "We had a place where we expected that that it was unlikely we'd have a macro coming next.",
    "start": "1656540",
    "end": "1661720"
  },
  {
    "text": "And so we call it next was gonna save us at the level of procedure, call it would have said call this first and then that would call getting access a little faster.",
    "start": "1661720",
    "end": "1671300"
  },
  {
    "text": "But if we found out that that our assumption was wrong, that really that really there was a macro there.",
    "start": "1671300",
    "end": "1677360"
  },
  {
    "text": "Then we call NC Tolkan, which is exactly the same as get NC Token accepted,",
    "start": "1677360",
    "end": "1682720"
  },
  {
    "text": "except somehow get NC Token is equivalent to get next, followed by NC token.",
    "start": "1682720",
    "end": "1693870"
  },
  {
    "text": "The other main way to call again next is called Get Tolkan, and this one does not expand macro's.",
    "start": "1693870",
    "end": "1708030"
  },
  {
    "text": "It just gives it to you with. So the token that you get, you get you get your kurk command.",
    "start": "1708030",
    "end": "1713940"
  },
  {
    "text": "You get your curd char and you see us Feiner and you get Kirt Tolkan also.",
    "start": "1713940",
    "end": "1720899"
  },
  {
    "text": "But if but it's possible that Kurk Command would be the call or long call for calling",
    "start": "1720900",
    "end": "1728220"
  },
  {
    "text": "along Macro or Ohara or something like a Mark Hökmark or an undefined control sequence.",
    "start": "1728220",
    "end": "1735240"
  },
  {
    "text": "It's certainly possible that get Tolkan will return to the name of a of an undefined control sequence.",
    "start": "1735240",
    "end": "1740730"
  },
  {
    "text": "And this is the thing that you use at times when you're building a definition. For example, after the word def and then if you say def, whatever follows it, you'd say get Tolkan.",
    "start": "1740730",
    "end": "1753630"
  },
  {
    "text": "You certainly wouldn't want to say get n c token. That would replace a thing by his previous definition or give you an area if it wasn't already defined, would be a big, big, tragic mistake.",
    "start": "1753630",
    "end": "1762990"
  },
  {
    "text": "So there are places where we don't where we definitely want to suppress macro expansion.",
    "start": "1762990",
    "end": "1768540"
  },
  {
    "text": "And that's what get talking does. So the the those routines get tokin, get NC token are they're just they're rather simple routines of module three.",
    "start": "1768540",
    "end": "1785400"
  },
  {
    "text": "Thirty nine is a get token just to reinforce it.",
    "start": "1785400",
    "end": "1790650"
  },
  {
    "text": "Let's let let's show you what get talking is this module three thirty nine.",
    "start": "1790650",
    "end": "1796170"
  },
  {
    "text": "And it says sets Kirk Command Kirchherr and per talk. I goofed. I said per token on the board here I meant Kurt tough and OK there.",
    "start": "1796170",
    "end": "1808860"
  },
  {
    "text": "There's a no new control sequence to set the false. Then get next and set no new control sequence to the in the middle of the get next routine.",
    "start": "1808860",
    "end": "1820029"
  },
  {
    "text": "There is a part of it that would have to look that might have to go and look at the hash table and and descend and add a new undefined control sequence to the hash table.",
    "start": "1820030",
    "end": "1835350"
  },
  {
    "text": "Now, we don't want to put misspelled things in the hash table if they turn out to be an error.",
    "start": "1835350",
    "end": "1841260"
  },
  {
    "text": "So generally, we have a variable, no new control sequence that says new control sequences aren't allowed.",
    "start": "1841260",
    "end": "1848700"
  },
  {
    "text": "This is the only place where we set it false and we set it true afterwards. Now, this is a this violates a prevailing wisdom about programing which says that you shouldn't the",
    "start": "1848700",
    "end": "1859799"
  },
  {
    "text": "global variables are considered harmful and that you should pass such things as parameters.",
    "start": "1859800",
    "end": "1865710"
  },
  {
    "text": "But my comments about the inner loop should indicate why I thought why. I feel that this is actually as long as we're using it in a disciplined way, we know what we're doing.",
    "start": "1865710",
    "end": "1874080"
  },
  {
    "text": "This is a valid way to save a lot of time by not saying get next of some parameter that says whether or not a new control sequence is allowed or not.",
    "start": "1874080",
    "end": "1882640"
  },
  {
    "text": "And next would have to propagate that dance's to the hash routine. And in a bunch of other things, setting up the setting up a parameter every time we call it subroutine would make tech run a lot slower.",
    "start": "1882640",
    "end": "1896820"
  },
  {
    "text": "All right. So get next. This will then allow a new control sequence to appear.",
    "start": "1896820",
    "end": "1906450"
  },
  {
    "text": "I guess I made a little lie when I said that's the only place. This is said false. There is one other place and that's in Initech when you're first loading the when you're first loading the hash table, OK.",
    "start": "1906450",
    "end": "1915919"
  },
  {
    "text": "Then if C.S. Pointer is zero, this means there was no it was not a control sequence found.",
    "start": "1915920",
    "end": "1921450"
  },
  {
    "text": "Then we do this part. Otherwise we said current token equal to the C as tokens like plus. Yes. Pointer. So Kurt Tokers is properly set up and that's all there to it.",
    "start": "1921450",
    "end": "1930090"
  },
  {
    "text": "If we did it but it was zero, then there's a fatal error in here.",
    "start": "1930090",
    "end": "1936480"
  },
  {
    "text": "If the current command is envy, envy occurs in alignment. And this would actually be something I'm not even sure it can ever happen.",
    "start": "1936480",
    "end": "1945299"
  },
  {
    "text": "But probably it will. It will. But but if it would happen, I wouldn't have any idea how to recover from it.",
    "start": "1945300",
    "end": "1951940"
  },
  {
    "text": "And this would mean that somebody is is calling macro without expansion at a time when it's also possible to to be finishing a column in an alignment and.",
    "start": "1951940",
    "end": "1963200"
  },
  {
    "text": "Well, if you think about it the way I like it, I think there's nothing else to do is give a fatal error and then we'll see what happens if there's ever.",
    "start": "1963200",
    "end": "1970710"
  },
  {
    "text": "Maybe if that turns out there is a way to recover in a reasonably common case.",
    "start": "1970710",
    "end": "1976110"
  },
  {
    "text": "And of course, we would change this part of the code to make the check here, because if I didn't and I loved it, I allowed that envy to get through.",
    "start": "1976110",
    "end": "1985920"
  },
  {
    "text": "Then all kinds of things could could screw up in the rest of tech. So I wanted to trap it. Here, even though this might be the inner loop and curtail, then it said in this case,",
    "start": "1985920",
    "end": "1999049"
  },
  {
    "text": "too, to a packed version of the command and character, as we mentioned yesterday. That's the way we represent a token. All right.",
    "start": "1999050",
    "end": "2007300"
  },
  {
    "text": "Those are the basic things that all the rest of tech relies on. Get token, get NC token in order to look at its input.",
    "start": "2007300",
    "end": "2016450"
  },
  {
    "text": "Any questions on that? OK. Now, the interesting part of Syntex is the is the section called Basic Scanning Subroutines.",
    "start": "2016450",
    "end": "2030039"
  },
  {
    "text": "And these are the things that do higher level passing source.",
    "start": "2030040",
    "end": "2036170"
  },
  {
    "text": "And while basic scanning routines start out with some that are actually pretty,",
    "start": "2036170",
    "end": "2042640"
  },
  {
    "text": "pretty dumb, there is one called scan, lift, brace every once in a while.",
    "start": "2042640",
    "end": "2050200"
  },
  {
    "text": "Tech gets to a point where it's gotta see a left brace or not. Or else. Or else it's stuck. And so it called scan left brace. And this subroutine, I think it's probably used about 15, 20 times this module, 363.",
    "start": "2050200",
    "end": "2067569"
  },
  {
    "text": "And so it just you know, this is this well.",
    "start": "2067570",
    "end": "2073240"
  },
  {
    "text": "This is the typical way that we that we call something and it says get the next non blank, non call token if the next thing is really a space.",
    "start": "2073240",
    "end": "2082570"
  },
  {
    "text": "Then then then we won't give an error message saying Miss Missing Left Brace because we will keep on going.",
    "start": "2082570",
    "end": "2087830"
  },
  {
    "text": "So we get something besides the space, but then sort. So this is a little, a little thing that gets used very often.",
    "start": "2087830",
    "end": "2094600"
  },
  {
    "text": "Noticed the module 360 for this court is used in sections 360 three rather off and we'll say get NC Token until her command is on equal space.",
    "start": "2094600",
    "end": "2107590"
  },
  {
    "text": "And then if Kirk Command is not a left brace, then we're then we got this long message at night.",
    "start": "2107590",
    "end": "2115350"
  },
  {
    "text": "And here it gives us a chance to show how those health messages and arrows are. A typical error is is is done. Fatal errors are very unusual.",
    "start": "2115350",
    "end": "2124750"
  },
  {
    "text": "But this kind of area where where we give a help message is is typical. So take a look at this. We start out with it with print something on a new line and our error message,",
    "start": "2124750",
    "end": "2132940"
  },
  {
    "text": "our official error message here has it starts with exclamation point missing the phrase inserted.",
    "start": "2132940",
    "end": "2140109"
  },
  {
    "text": "Now, the health message is is then is given next before I called the arrow subroutine.",
    "start": "2140110",
    "end": "2147230"
  },
  {
    "text": "And the number of lines of help is is is used here. So. So that I could stick to simple web macros.",
    "start": "2147230",
    "end": "2155290"
  },
  {
    "text": "And so I have a help for for a four line help message and help three, four, three line help message and so on.",
    "start": "2155290",
    "end": "2161860"
  },
  {
    "text": "The help message comes in a left brace was mantri here. So I put one in. You might want it to leave or insert some correction. So I'll find a matching right very soon.",
    "start": "2161860",
    "end": "2170080"
  },
  {
    "text": "If you're confused by all this. Try typing. I write brace now.",
    "start": "2170080",
    "end": "2175570"
  },
  {
    "text": "That's the best way to probably recover if they didn't. But if they had a missing left brace and I'm going to put one in. It can also be a problem if there isn't a right brace somewhere else.",
    "start": "2175570",
    "end": "2188980"
  },
  {
    "text": "Then I called back error. Back error is is something that takes current tokens and puts it back so that it'll be red again.",
    "start": "2188980",
    "end": "2197590"
  },
  {
    "text": "And so the next thing. Get Tolkan or get. Next we'll see is, is that the one that just already saw.",
    "start": "2197590",
    "end": "2205390"
  },
  {
    "text": "And it backs up and also does the right things for backing up. And then the current token is set to a left brace token. And we pretend that we've read it.",
    "start": "2205390",
    "end": "2215230"
  },
  {
    "text": "That's in agreement with what we said here, that the missing one was inserted. Somebody asked me the other day why I know the style of these health messages using I and you in this mess.",
    "start": "2215230",
    "end": "2227680"
  },
  {
    "text": "And I believe there's several reasons why it's.",
    "start": "2227680",
    "end": "2232720"
  },
  {
    "text": "It turns out to be a win to have the computer talking to you as if it is if it understands. I mean,",
    "start": "2232720",
    "end": "2237930"
  },
  {
    "text": "it will make us a statement like saying I don't understand this or I do understand something when we all know the computer doesn't really think well.",
    "start": "2237930",
    "end": "2249579"
  },
  {
    "text": "Because the main reason is that you can communicate a lot more in a small space.",
    "start": "2249580",
    "end": "2255700"
  },
  {
    "text": "When you when you use the the English language, the way it was designed to be used in English language has developed over thousands of years.",
    "start": "2255700",
    "end": "2262390"
  },
  {
    "text": "And I think it's most powerful, that is discourses between between people.",
    "start": "2262390",
    "end": "2267640"
  },
  {
    "text": "And so when we win, if we if we if we restrict ourselves to using third person all the time, then we then we're losing a great deal of power of it.",
    "start": "2267640",
    "end": "2276430"
  },
  {
    "text": "So, so so, in fact, I sketched out all kinds of ways to write health messages.",
    "start": "2276430",
    "end": "2282160"
  },
  {
    "text": "And finally, this one turned out to be by far the one that gave the most the most effective.",
    "start": "2282160",
    "end": "2290020"
  },
  {
    "text": "I'm quite convinced. And all the health messages have to be at most 60 characters long per line.",
    "start": "2290020",
    "end": "2300560"
  },
  {
    "text": "And I also like to make those lines break and somehow read, you know, fairly for a nice way.",
    "start": "2300560",
    "end": "2306770"
  },
  {
    "text": "So I was a little bit of a challenge, some time to take a sixty one character or one and figure out what was the right word to substitute.",
    "start": "2306770",
    "end": "2313450"
  },
  {
    "text": "But when when writing these health messages, I also tried to use words that were different from the ones in the official error message that was given earlier.",
    "start": "2313450",
    "end": "2322300"
  },
  {
    "text": "So that person has the error described in two different ways, has a chance of understanding one of those two.",
    "start": "2322300",
    "end": "2329220"
  },
  {
    "text": "So so I don't know if people hear from foreign countries implementing tech there would like to to make tech more friendly there.",
    "start": "2329220",
    "end": "2339430"
  },
  {
    "text": "You might probably do better to have the health messages translated into your own",
    "start": "2339430",
    "end": "2345579"
  },
  {
    "text": "native language or you from the East Coast might want to translate it into East Coast.",
    "start": "2345580",
    "end": "2350720"
  },
  {
    "text": "And so I'm and my team is another special case.",
    "start": "2350720",
    "end": "2357849"
  },
  {
    "text": "Right. I mean, anyone who's reading the health messages in Emacs knows that they have a language of their own.",
    "start": "2357850",
    "end": "2363680"
  },
  {
    "text": "Right. So now the. Anyway, we try to make the help message.",
    "start": "2363680",
    "end": "2370309"
  },
  {
    "text": "You know, I you the situation. And when you see the new tech manual with the illustrations,",
    "start": "2370310",
    "end": "2378230"
  },
  {
    "text": "you'll also get an idea that we can sort of personify tech because there's a character that appears in these illustrations who is going to be on all our T-shirts next to you now that the.",
    "start": "2378230",
    "end": "2390849"
  },
  {
    "text": "So this is a simple, simple use of the scanning.",
    "start": "2390850",
    "end": "2396430"
  },
  {
    "text": "And there's a slightly more interesting one on the next page, a case you're getting bored.",
    "start": "2396430",
    "end": "2403329"
  },
  {
    "text": "This one is used to scan a keyword where and we're looking for something like plus or minus or or four after various words that that might be present in a in a text.",
    "start": "2403330",
    "end": "2417820"
  },
  {
    "text": "And this one will we'll look ahead to see if you've got if you if you match a keyword either with uppercase or possibly in an upper case version of the keyword.",
    "start": "2417820",
    "end": "2427630"
  },
  {
    "text": "It's all done here. Whenever you're looking for such a keyword, this this function scan keyword returns.",
    "start": "2427630",
    "end": "2433480"
  },
  {
    "text": "Yes or no. Whether it found the keyword or not, if it found it, then we pass it in the input and we're ready to read on if it didn't find it.",
    "start": "2433480",
    "end": "2440859"
  },
  {
    "text": "We back up over the partial finds that we might have made and our our position back at where we were before before we started.",
    "start": "2440860",
    "end": "2450810"
  },
  {
    "text": "OK. Now the most.",
    "start": "2450810",
    "end": "2459010"
  },
  {
    "text": "But after that, we get into the interesting things. The really, really important basic screening routines are the ones that recognize high level constructs in in the input.",
    "start": "2459010",
    "end": "2470710"
  },
  {
    "text": "For example, if a time comes time for tech to look for an integer number,",
    "start": "2470710",
    "end": "2477369"
  },
  {
    "text": "then IT tech can say scan it and it will look for an integer number in the next",
    "start": "2477370",
    "end": "2483550"
  },
  {
    "text": "thing and include integer number can be an integer number like twelve one,",
    "start": "2483550",
    "end": "2491830"
  },
  {
    "text": "followed by two. But it could be an octal. So we mean it starts with the next thing we see is a apostrophe.",
    "start": "2491830",
    "end": "2498790"
  },
  {
    "text": "Then we start to say well we'll scan and write in the notation and one, two will mean 10.",
    "start": "2498790",
    "end": "2505720"
  },
  {
    "text": "It might start with a backwards apostrophe, which means we're looking for a character constant.",
    "start": "2505720",
    "end": "2511670"
  },
  {
    "text": "But integer number might start with a minus sign. Of course, then we then we have to have to have all these options again after we've decided to negate it.",
    "start": "2511670",
    "end": "2521290"
  },
  {
    "text": "In fact, it will start with the plus sign, which is sort of a no. And when we go past the plus sign and we can have a bunch of minus signs, in fact a bunch of minus signs and plus signs,",
    "start": "2521290",
    "end": "2531640"
  },
  {
    "text": "there are certain you it's important when you have a language that uses macros so to allow",
    "start": "2531640",
    "end": "2538690"
  },
  {
    "text": "minus minus to appear because otherwise the macros would have to be very worried about,",
    "start": "2538690",
    "end": "2544660"
  },
  {
    "text": "about not allowing that to come through. So minus minus six should be it should be legal.",
    "start": "2544660",
    "end": "2550180"
  },
  {
    "text": "But besides, all of these things have others. Integers can also be stored in text registers.",
    "start": "2550180",
    "end": "2555280"
  },
  {
    "text": "So it might say backslash count something or other. And we're supposed to recognize that and fetch the current value of the counter.",
    "start": "2555280",
    "end": "2564600"
  },
  {
    "text": "Most complicated one is when when you say VAR InTech 82, this is something that is in the present text.",
    "start": "2564600",
    "end": "2571420"
  },
  {
    "text": "But if you if you want to give an integer, you can start out with the word. And then there will fetch. So many things inside of text.",
    "start": "2571420",
    "end": "2582220"
  },
  {
    "text": "Internal tables. So they will be able to fetch out, for example, any one of the parameters, the hyphenation penalty if something like that.",
    "start": "2582220",
    "end": "2592880"
  },
  {
    "text": "The can be used to find out parameters that have been stored with a particular fund and many other things.",
    "start": "2592880",
    "end": "2601250"
  },
  {
    "text": "Now scan it, then scan scans integer. There's also scanned dimin, which scans the dimensions and we'll return the value of the dimension.",
    "start": "2601250",
    "end": "2612320"
  },
  {
    "text": "Now, where they wrote this, it turned out to be better not to return the value as the value of a function, but to put it in a global variable curve.",
    "start": "2612320",
    "end": "2623810"
  },
  {
    "text": "And again, here was a case that it took that my my original design was not to use this global forever.",
    "start": "2623810",
    "end": "2629600"
  },
  {
    "text": "But I found out later that I was getting much better program by by using a global variable for this purpose.",
    "start": "2629600",
    "end": "2637350"
  },
  {
    "text": "So there's some core values. If you call, scan it. The answer, cruising appears in Kervella now.",
    "start": "2637350",
    "end": "2644640"
  },
  {
    "text": "So scan demand is getting a dimension. There's scan, skip or scan glue.",
    "start": "2644640",
    "end": "2650299"
  },
  {
    "text": "Gosh, I forgot what I called it. Scan demand starts at four hundred and scan glue.",
    "start": "2650300",
    "end": "2660730"
  },
  {
    "text": "Yes, scan glue it for 13. So these are three three high level things.",
    "start": "2660730",
    "end": "2667640"
  },
  {
    "text": "The scan glue routine is going to look for something that is a dimension and then possibly same. Plus some other of stretch ability and then or minus something or other.",
    "start": "2667640",
    "end": "2680930"
  },
  {
    "text": "Well, now all of these think three things can say, though.",
    "start": "2680930",
    "end": "2685940"
  },
  {
    "text": "For example, when you when tech comes to a point where it wants to scan glue,",
    "start": "2685940",
    "end": "2691880"
  },
  {
    "text": "the glue might start with the words, but it might be the baseline skipp, for example.",
    "start": "2691880",
    "end": "2697279"
  },
  {
    "text": "So if you want to. If you want to do a V skip by the baseline skip, you can say V skip the baseline skip.",
    "start": "2697280",
    "end": "2704900"
  },
  {
    "text": "When when tech start. Since V skip instruction, it'll call scan glue to figure out how much it's supposed to skip by.",
    "start": "2704900",
    "end": "2712490"
  },
  {
    "text": "So v skip can be followed by that.",
    "start": "2712490",
    "end": "2720030"
  },
  {
    "text": "Now let's look at the syntax a little bit of a look at the syntax of of glue.",
    "start": "2720030",
    "end": "2728330"
  },
  {
    "text": "What does it consist of? Well, it consists of a dimension. And then optionally plus sorry.",
    "start": "2728330",
    "end": "2737570"
  },
  {
    "text": "Plus a dimension and optionally minus a dimension.",
    "start": "2737570",
    "end": "2747060"
  },
  {
    "text": "So we know that in order to scan these words plus and minus, we're going to have that scanned keyword subroutine. And we got scanned demand to do this. To do this thing well.",
    "start": "2747060",
    "end": "2759310"
  },
  {
    "text": "But now think about it. Demand starts with a domain like, you know, ten points starts with scan.",
    "start": "2759310",
    "end": "2767670"
  },
  {
    "text": "And one of the dimensions can also be apostrophe seventy seven point.",
    "start": "2767670",
    "end": "2777049"
  },
  {
    "text": "You can give a dimensions in octal. So it has to start with. With scanning integer, you can say count five points.",
    "start": "2777050",
    "end": "2783110"
  },
  {
    "text": "Things like that. So Diemen can start with an integer and effort and glue can start with a domain.",
    "start": "2783110",
    "end": "2793520"
  },
  {
    "text": "And all of these can be there. So when I call here. OK.",
    "start": "2793520",
    "end": "2799010"
  },
  {
    "text": "If it says the baseline skip. That would substitute for all of this. But if it says the VAR unit, that's a dimension.",
    "start": "2799010",
    "end": "2807870"
  },
  {
    "text": "The H size. What these guys say. That's a dimension that would leave us.",
    "start": "2807870",
    "end": "2812990"
  },
  {
    "text": "That would leave us only at the first part. And we still have to look for plus again. And though if it was if it was accounts or some other or some other integer register like the the time or something like that.",
    "start": "2812990",
    "end": "2827480"
  },
  {
    "text": "All kinds of integers that can occur. Who would like to be skip. By the time of day. But why not. Then it has to be followed by.",
    "start": "2827480",
    "end": "2836900"
  },
  {
    "text": "Then that's only part of a dimension. So after we've finished. So. So we have a subroutines of tech called skins.",
    "start": "2836900",
    "end": "2843349"
  },
  {
    "text": "But it doesn't know what what is going to wind up with. It might wind up with it with glue, the whole piece of glue.",
    "start": "2843350",
    "end": "2850470"
  },
  {
    "text": "It might line up with a dimensioned, it might wind up with just an integer. So besides curve ball, which contains the result of skin.",
    "start": "2850470",
    "end": "2862280"
  },
  {
    "text": "We also have Kervella level which tells what kind of a thing it found.",
    "start": "2862280",
    "end": "2869820"
  },
  {
    "text": "So the Kerbal level will be set to either int val or demand Val or glue Val telling you what kind of a thing you got.",
    "start": "2869820",
    "end": "2877430"
  },
  {
    "text": "So so after you've called. So you call a subroutine called scan. And looks ahead to see what what's followed.",
    "start": "2877430",
    "end": "2885260"
  },
  {
    "text": "And afterwards, if it's found a baseline script, full piece of glue and kubel level.",
    "start": "2885260",
    "end": "2891160"
  },
  {
    "text": "We will say glue, Val and Val will be a pointer to the specification of the glue that that that was found.",
    "start": "2891160",
    "end": "2900559"
  },
  {
    "text": "Well, you can figure out what you got. That was the main one unusual aspect of the design of these particular subroutines.",
    "start": "2900560",
    "end": "2914590"
  },
  {
    "text": "Now, you these things are also recursive because if you see what's going on.",
    "start": "2914590",
    "end": "2920320"
  },
  {
    "text": "If you say you're trying to scan an integer integer starts with the word count, then which counter are you doing?",
    "start": "2920320",
    "end": "2928880"
  },
  {
    "text": "You have to give a number between two zero 255. And that's an integer. So you have so. So scan. So.",
    "start": "2928880",
    "end": "2936910"
  },
  {
    "text": "So scanning an integer can ask can reduce to scanning an integer or scanning the I mean you can say count something or other.",
    "start": "2936910",
    "end": "2947109"
  },
  {
    "text": "And that would give you one of the counters. And so the scandal has to call, scan and scan in test to call, scan or scan it.",
    "start": "2947110",
    "end": "2956500"
  },
  {
    "text": "So these proceedings are mutually recursive, but they just keep on getting further and further into the input.",
    "start": "2956500",
    "end": "2962990"
  },
  {
    "text": "So they don't they don't get into a loop. Of course. Question. Yeah. Yeah. It seems almost that what you're asking it to do there is identical to what you're asking it to do when it expands macros.",
    "start": "2962990",
    "end": "2973900"
  },
  {
    "text": "I'm a little curious about why you didn't do it the same way in the in the get an extra 18 itself.",
    "start": "2973900",
    "end": "2980319"
  },
  {
    "text": "Yeah. That's simply have glew parameters. In fact, B macros and B have them expand Tolkan lists.",
    "start": "2980320",
    "end": "2987040"
  },
  {
    "text": "Well, the easy answer is I didn't think of it. And but I haven't got a simple otherwise.",
    "start": "2987040",
    "end": "2996400"
  },
  {
    "text": "This is the way that occurred to me to do this. Yeah. Now the.",
    "start": "2996400",
    "end": "3005809"
  },
  {
    "text": "OK. So so I'd like to look at in the remaining five minutes,",
    "start": "3005810",
    "end": "3011100"
  },
  {
    "text": "I'd like to look at one of these in a little more detail so you can get a little more feeling for it by take a suggestion from the audience.",
    "start": "3011100",
    "end": "3018640"
  },
  {
    "text": "What do you think would be a good one to pursue? It's to get a feeling for what, what, what, what what's totally involved here or or you don't want to look at any of them.",
    "start": "3018640",
    "end": "3030410"
  },
  {
    "text": "But Lind's telling. No. No idea what to do. OK, well, let's take a look at the details of scanning the men and scan the men starts on module 400.",
    "start": "3030410",
    "end": "3051230"
  },
  {
    "text": "And when we look at what actually has to be done, other job scan men is going to be to put in curve L. a. a an integer in scale points or another",
    "start": "3051230",
    "end": "3064920"
  },
  {
    "text": "where the scale quantity and the units are two to the 16th to the minus sixteen points.",
    "start": "3064920",
    "end": "3074089"
  },
  {
    "text": "And this is supposed to be something that all versions of tech eighty two will will arrive at exactly the same number.",
    "start": "3074090",
    "end": "3082250"
  },
  {
    "text": "It's quite important to, to, to design a language so that it's machine independent in this way.",
    "start": "3082250",
    "end": "3089720"
  },
  {
    "text": "Now there is. But it turns out there's three parameters to this. When you start looking at what scan dimension has to has to handle and the first parameter is called Mbewe because of of things in math mode,",
    "start": "3089720",
    "end": "3105650"
  },
  {
    "text": "when in math mode, when you when you say M M Skipp or M Kurn to give spacing in math mode, you're not supposed to say three three points.",
    "start": "3105650",
    "end": "3121640"
  },
  {
    "text": "You're supposed to say three mbewe, which is three math units. This is a variable unit that will change whether or not you're in a subscript or something like that.",
    "start": "3121640",
    "end": "3131190"
  },
  {
    "text": "But but math units are not allowed outside of this outside of this context.",
    "start": "3131190",
    "end": "3136270"
  },
  {
    "text": "And so scan men takes the first panner meal with you. True or false saying whether whether the units are supposed to be mbewe or not.",
    "start": "3136270",
    "end": "3144680"
  },
  {
    "text": "Most of the time, the next parameter to scan the men is called in.",
    "start": "3144680",
    "end": "3151700"
  },
  {
    "text": "And this this says whether or not it will allow the units to be infinite.",
    "start": "3151700",
    "end": "3161839"
  },
  {
    "text": "There are three versions of infinity. Phil Filo and Phil allô?",
    "start": "3161840",
    "end": "3170960"
  },
  {
    "text": "And if anybody knows, a poem by Ogden Nash about a one El Lama is a priest to a allama is a beast,",
    "start": "3170960",
    "end": "3178220"
  },
  {
    "text": "and he bets something that they'll never see a three alarm on or something like that. Well, we don't have four L fills in this in this language.",
    "start": "3178220",
    "end": "3186180"
  },
  {
    "text": "Not now. But this just in parameter is to men is is true or false,",
    "start": "3186180",
    "end": "3196550"
  },
  {
    "text": "depending on whether or not such things are are legal and they're only legal after plus or minus.",
    "start": "3196550",
    "end": "3204060"
  },
  {
    "text": "So. So usually that parameter is false. And the third parameter is called shortcut.",
    "start": "3204060",
    "end": "3210070"
  },
  {
    "text": "And that says and that's because when you're scanning a dimension, you may already have built up part of that dimension and you're ready to go right",
    "start": "3210070",
    "end": "3218780"
  },
  {
    "text": "to the to to the part that adds up the that that inserts the points or whatever.",
    "start": "3218780",
    "end": "3224780"
  },
  {
    "text": "And because you might have called the. And it gave you an integer and then that.",
    "start": "3224780",
    "end": "3229820"
  },
  {
    "text": "And so you're halfway through and into your scanning dimension already. So. So you want to you want to pass by that first part of the routine.",
    "start": "3229820",
    "end": "3237350"
  },
  {
    "text": "So those are three parameters to scan demand. Most of the time when I want to get a dimensional in one of my semantic routines,",
    "start": "3237350",
    "end": "3243830"
  },
  {
    "text": "I'll call scan to mean a false, false, false, because all of those other cases haven't arisen. There's no shortcut, no new and no infinite glue. OK.",
    "start": "3243830",
    "end": "3255110"
  },
  {
    "text": "Now scan them in as I'm looking at module four or one and I have a fairly large procedure here.",
    "start": "3255110",
    "end": "3265760"
  },
  {
    "text": "But if you put. But I think by reading it in this module form, we get it.",
    "start": "3265760",
    "end": "3270960"
  },
  {
    "text": "We boil it down to, in this case, little more than 12 lines. But we can see exactly what all all it has to do.",
    "start": "3270960",
    "end": "3279230"
  },
  {
    "text": "F is the images, the numerator refraction whose denominators to the 16th. The big problem is going to man is going to be the preserve this machining independents to",
    "start": "3279230",
    "end": "3287540"
  },
  {
    "text": "make sure I do all my fixed point arithmetic with numbers that would fit on 32 bit machine.",
    "start": "3287540",
    "end": "3294350"
  },
  {
    "text": "And also I have to check for arithmetic overflow that might occur then during these calculations.",
    "start": "3294350",
    "end": "3300110"
  },
  {
    "text": "The cur order. This is a global variable that's going to be if if I do find infinite blue, I have to tell somebody whether it.",
    "start": "3300110",
    "end": "3306830"
  },
  {
    "text": "Which kind of feel it was with, with one, two or three else. So the cur order is going to be normal unless I've found some special glue.",
    "start": "3306830",
    "end": "3315200"
  },
  {
    "text": "Negative. Is it something I said. False and that'll flip back and forth if I find minus signs in front of the darn thing.",
    "start": "3315200",
    "end": "3321940"
  },
  {
    "text": "Negative means, should the answer be negated?",
    "start": "3321940",
    "end": "3327880"
  },
  {
    "text": "OK, then, if not short cut, then I have to do all this stuff which gets the energy part or gets the sensually,",
    "start": "3327880",
    "end": "3336069"
  },
  {
    "text": "sets up a value for four incur Vall containing and containing the energy part of the dimension, and F is the fraction part of the dimension.",
    "start": "3336070",
    "end": "3352060"
  },
  {
    "text": "By the time I finish this loop, then I've got some integer plus a fraction over two to the 16th. That's got to be finished up with units supply.",
    "start": "3352060",
    "end": "3360490"
  },
  {
    "text": "So let's look at this first part, which we do in case of a short get the next non blank, non signed token set.",
    "start": "3360490",
    "end": "3367810"
  },
  {
    "text": "Negative appropriately. So this is really gonna pass up. Minus signs and plus signs that might be at the beginning and blanks. Then we have to check if it's there or register registers.",
    "start": "3367810",
    "end": "3381040"
  },
  {
    "text": "What comes up. If you say count or dimin or one of the internal things, four for one text internal six 286 registers.",
    "start": "3381040",
    "end": "3394720"
  },
  {
    "text": "In that case, then we have to do a special thing that either fetches an internal integer or or an internal dimension.",
    "start": "3394720",
    "end": "3404859"
  },
  {
    "text": "If we find a whole dimension, like if we find the V size, then we get.",
    "start": "3404860",
    "end": "3411850"
  },
  {
    "text": "Then we get to go to attach sine because we've got the whole thing in the right units. But if we just get an integer, then we continue on and we have to figure out at this point six centimeters or whatever.",
    "start": "3411850",
    "end": "3424180"
  },
  {
    "text": "If we didn't have in that other case, we back up the input.",
    "start": "3424180",
    "end": "3429579"
  },
  {
    "text": "Right. Get ready to read the token again and check to see whether with a decimal point or not.",
    "start": "3429580",
    "end": "3437230"
  },
  {
    "text": "And if it was a decimal point, we have to set decimal radix and.",
    "start": "3437230",
    "end": "3443470"
  },
  {
    "text": "And can and. And in other words, the whole thing might have started with a decimal point.",
    "start": "3443470",
    "end": "3450190"
  },
  {
    "text": "You can say two point one. You don't have to say zero point one. And if you start with a point, then you're getting into a base 10 thing.",
    "start": "3450190",
    "end": "3461050"
  },
  {
    "text": "If you look at this code, you see what happens if a guy just says a decimal point and doesn't say zero either before or after it,",
    "start": "3461050",
    "end": "3467080"
  },
  {
    "text": "but just period and then peaty or something like that. And it turns out that that's a zero. But I hope people don't use that now.",
    "start": "3467080",
    "end": "3480570"
  },
  {
    "text": "OK. That's the way the thing goes. And the on the next page, we have one of the prettiest modules of the way.",
    "start": "3480570",
    "end": "3489340"
  },
  {
    "text": "The way it gets formatted by we've sifts, I guess. Anyway, this is where we're just looking for all the different kinds of units that can arise.",
    "start": "3489340",
    "end": "3500000"
  },
  {
    "text": "And and we have to convert inches to points by by calling a macro here set conversion, which will takes two parameters, an array and denominator.",
    "start": "3500000",
    "end": "3512850"
  },
  {
    "text": "So it's essentially multiplying by seventy two, twenty seven dividing by a hundred to get in inches into points.",
    "start": "3512850",
    "end": "3523330"
  },
  {
    "text": "This is my definition of of a point there. I've searched for a standard official definition of what is a point and not found,",
    "start": "3523330",
    "end": "3533779"
  },
  {
    "text": "not found a pronouncement of the Bureau standards or anything like that up the the reference sources",
    "start": "3533780",
    "end": "3542860"
  },
  {
    "text": "give give more or less significant figures in the ones that that gave the most significant figures.",
    "start": "3542860",
    "end": "3548470"
  },
  {
    "text": "We're all consistent with his value. So it's nice. Simple fraction. Choosing it as a definition of of of an inch to a point.",
    "start": "3548470",
    "end": "3559230"
  },
  {
    "text": "And I wanted to emphasize again, all this arithmetic has been carefully designed so that it will not wheel around well and it will and it will not go over 32 bit calculations.",
    "start": "3559230",
    "end": "3572440"
  },
  {
    "text": "Give it give a decent answer. Okay. Any questions before we break? So these are the routines that there is one.",
    "start": "3572440",
    "end": "3587410"
  },
  {
    "text": "This is a question mainly on the web and philosophy. The next shows that you use labels to find labels in one module that aren't actually quite defined until X number of modules later.",
    "start": "3587410",
    "end": "3599260"
  },
  {
    "text": "You find this to be a problem. Well, I wish that I wish that that was that that Pascal had had a better setup for those.",
    "start": "3599260",
    "end": "3612600"
  },
  {
    "text": "But actually, what I did with the is is almost all the labels in the program are defined once and for all at the beginning.",
    "start": "3612600",
    "end": "3620030"
  },
  {
    "text": "And I probably have mentioned that in my first lecture in Module 15. It tells about this site. I have labels that that are used in in ways that are quite common in order to do things.",
    "start": "3620030",
    "end": "3635830"
  },
  {
    "text": "So exit is is generally it is is generally just before the end of a subroutine",
    "start": "3635830",
    "end": "3642140"
  },
  {
    "text": "and there is done to get out of loops and found and things like this continue.",
    "start": "3642140",
    "end": "3647380"
  },
  {
    "text": "And these are used in in ways that are always the same as if I had if I had a programing language that supported it.",
    "start": "3647380",
    "end": "3657009"
  },
  {
    "text": "And so these are just general, a few idioms that are used in the programing and there and the labels would define once and for all here.",
    "start": "3657010",
    "end": "3672520"
  },
  {
    "text": "Only a few places where we have a special label like Attach Sign. And in that case, if you notice, the attached sign was defined in the module,",
    "start": "3672520",
    "end": "3682190"
  },
  {
    "text": "but also also carried through in the names of other measures that we're gonna go to attach sign.",
    "start": "3682190",
    "end": "3687550"
  },
  {
    "text": "It's very important when you give the name of a module that if it if there's some something funny about the control structure that that gets into the name of the module.",
    "start": "3687550",
    "end": "3697390"
  },
  {
    "text": "That was one of the important things we learned about of formulating these these rules.",
    "start": "3697390",
    "end": "3704500"
  },
  {
    "text": "But most of the things if we had reprogramed this to be done with with very few go to statements, it would have turned out,",
    "start": "3704500",
    "end": "3713750"
  },
  {
    "text": "I believe the program would have been a lot less readable and much slower just because of the way the programing languages are working.",
    "start": "3713750",
    "end": "3720370"
  },
  {
    "text": "And if you don't believe me, we should debate this after class. And that's the that's but that is a firmly held belief of philosophy after doing a lots of lots of coding in this form.",
    "start": "3720370",
    "end": "3730980"
  },
  {
    "text": "We tried to have these labels on module fifteen is part of the style of programing that's represented in this in this code.",
    "start": "3730980",
    "end": "3741820"
  },
  {
    "text": "But but, for example, exit I have I've defined return to be go to exit very.",
    "start": "3741820",
    "end": "3749560"
  },
  {
    "text": "And Pascal didn't have a return statement. So we just do that now. That means that I have to remember when I use the return statement of procedure,",
    "start": "3749560",
    "end": "3757600"
  },
  {
    "text": "I to remember to declare the label exit at the beginning and put it there at the end.",
    "start": "3757600",
    "end": "3764140"
  },
  {
    "text": "Wasn't much of it has to remember that though. OK, thanks a lot.",
    "start": "3764140",
    "end": "3769240"
  },
  {
    "text": "See you again at 11:00.",
    "start": "3769240",
    "end": "3778467"
  }
]