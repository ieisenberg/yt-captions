[
  {
    "start": "0",
    "end": "203000"
  },
  {
    "text": "Two countries, Austria and, and- what's the other one?",
    "start": "4970",
    "end": "11475"
  },
  {
    "text": "Hungary. Hungary, right? [LAUGHTER] Because, speaks Hungarian. Yeah. So like, Austria and Hungary,",
    "start": "11475",
    "end": "16725"
  },
  {
    "text": "that could be an answer. Uh, so the way you thought about this problem was- if, if, if you think about it, it was pretty different from,",
    "start": "16725",
    "end": "23940"
  },
  {
    "text": "from, like normal search problems. You had this constraint in your head that, oh, I have two countries that are right next to each other, that's one constraint.",
    "start": "23940",
    "end": "30845"
  },
  {
    "text": "And if you were thinking about, oh, one of them needs to start with an A. So you had a bunch of [NOISE] constraints whe- when, when you think about, you have a bunch of constraints when you",
    "start": "30845",
    "end": "37880"
  },
  {
    "text": "think about a problem that- that's like this. Uh, and that makes it pretty- like that,",
    "start": "37880",
    "end": "42935"
  },
  {
    "text": "that helps us to use different types of model that could be pretty different from state-based models.",
    "start": "42935",
    "end": "47975"
  },
  {
    "text": "So this is more of a motivating example. We are gonna talk about these types of models. So, so far, we have talked about reflex based models, state-based models.",
    "start": "47975",
    "end": "56210"
  },
  {
    "text": "So we spent some time talking about search problems, MDPs, adversarial games, and then what the plan is to talk about variable-based models,",
    "start": "56210",
    "end": "64580"
  },
  {
    "text": "specifically constraint satisfaction problems today and, and on Wednesday. And then we're going to talk about Bayesian networks next week.",
    "start": "64580",
    "end": "72110"
  },
  {
    "text": "So we'll have three lectures on Bayesian networks. Uh, so what's gonna happen is, Reed is going to talk, uh,",
    "start": "72110",
    "end": "77490"
  },
  {
    "text": "talk about the CSP, the second lecture of CSP on Wednesday, and then Percy is going to be back next week talking about Bayesian networks,",
    "start": "77490",
    "end": "85400"
  },
  {
    "text": "and I will do the third lecture of Bayesian networks. So it will be whole mix of us,",
    "start": "85400",
    "end": "90585"
  },
  {
    "text": "talking about variable-based models. You'll see all views of us. So, so that's, that's the plan. Okay? All right.",
    "start": "90585",
    "end": "97700"
  },
  {
    "text": "So, um, okay, so going back to our paradigm. So our paradigm is,",
    "start": "97700",
    "end": "102780"
  },
  {
    "text": "uh, starting with modeling. So how do we model, uh, various types of problems, and then how do we develop inference algorithms?",
    "start": "102780",
    "end": "109850"
  },
  {
    "text": "I tried to answer questions we care about, objectives we care about based on those models. And we have been talking about learning a little bit.",
    "start": "109850",
    "end": "116390"
  },
  {
    "text": "So, so if you have these models and they are not full models, how do we go about learning, learning these models?",
    "start": "116390",
    "end": "121610"
  },
  {
    "text": "So, so here is just a review of what we have talked about so far. In terms of modeling, we talked about various frameworks like search problems,",
    "start": "121610",
    "end": "129000"
  },
  {
    "text": "or MDPs, or games. So these were various frameworks that we had, and, and we had different objectives.",
    "start": "129000",
    "end": "134930"
  },
  {
    "text": "So we had things like minimum cost path for search problems or we cared about other things like maximizing the value of policies for,",
    "start": "134930",
    "end": "143840"
  },
  {
    "text": "uh, for MDPs, or, or games. So this was kind of some of the frameworks we talked about.",
    "start": "143840",
    "end": "149750"
  },
  {
    "text": "And in terms of inference, we discussed tree-based algorithms, and we discuss- we discussed graph-based algorithms.",
    "start": "149750",
    "end": "156065"
  },
  {
    "text": "So if you remember, backtracking search was the simplest most naive thing we tried out for our search problems.",
    "start": "156065",
    "end": "162265"
  },
  {
    "text": "Uh, for, for games, like we looked at minimax and expectimax, which was also going down a tree.",
    "start": "162265",
    "end": "167879"
  },
  {
    "text": "And then you can have more, uh, graph-based type algorithms where, where you're looking at a recurrence relationship, and,",
    "start": "167880",
    "end": "174285"
  },
  {
    "text": "and examples of that are things like dynamic programming, uniform cost search, A star. In terms of MDPs in games,",
    "start": "174285",
    "end": "180410"
  },
  {
    "text": "we looked at value and policy it- iteration. And then in terms of learning, we discussed a few types of methods for each one of these frameworks.",
    "start": "180410",
    "end": "188030"
  },
  {
    "text": "We looked at structured perceptron, Q-learning, TD learning. So, so these are some of the topics that we have talked about so far.",
    "start": "188030",
    "end": "195230"
  },
  {
    "text": "So, so if you're midway through the quarter, these are all the cool things we have learned so far,",
    "start": "195230",
    "end": "200299"
  },
  {
    "text": "and these are for state-based models. Okay? So state-based models were kind of cool.",
    "start": "200300",
    "end": "205790"
  },
  {
    "start": "203000",
    "end": "427000"
  },
  {
    "text": "And we had, we had a couple of takeaways from state-based models. So let's just summarize like two main takeaways from state-based models.",
    "start": "205790",
    "end": "213255"
  },
  {
    "text": "One of the key way- key takeaways was, was that when we're modeling these, these state-based models, we had,",
    "start": "213255",
    "end": "220065"
  },
  {
    "text": "we had local relationships. So, so our model would specify these local interactions and local relationships that we had between the states.",
    "start": "220065",
    "end": "227590"
  },
  {
    "text": "So for example, if I wanted to go from S to A, my neighboring state A, then I would think about what would be the cost of going from S to A.",
    "start": "227590",
    "end": "234500"
  },
  {
    "text": "So I had this local relationship between them. And the goal was to do inference and an inference",
    "start": "234500",
    "end": "240320"
  },
  {
    "text": "was more trying to like look at a global property. Can I find the, the shortest path from some state to some other state in this whole graph?",
    "start": "240320",
    "end": "247959"
  },
  {
    "text": "So, so the idea was, let's actually model and specify these local relationships,",
    "start": "247960",
    "end": "253385"
  },
  {
    "text": "and then do inference where we find globally optimal solutions. So, so that was kind of the whole idea of state-based models.",
    "start": "253385",
    "end": "260840"
  },
  {
    "text": "And the thing that they use, the thing that they, that made them powerful was this concept of a state.",
    "start": "260840",
    "end": "266729"
  },
  {
    "text": "So, so let's just summarize what state was. Well, a state is a summary of all past actions that's sufficient to choose future actions optimally.",
    "start": "266730",
    "end": "275345"
  },
  {
    "text": "And, and that's how we define states, that's how we went about states. Okay? And, and once we had state,",
    "start": "275345",
    "end": "281810"
  },
  {
    "text": "when once we had the notion about state, then our mindset was, I'm gonna move through these states through actions.",
    "start": "281810",
    "end": "287824"
  },
  {
    "text": "So I have states that I can think of them as nodes here, and I have actions which, where I can think of them as the edges in this graph.",
    "start": "287825",
    "end": "294845"
  },
  {
    "text": "And the question is, how do I go through one state to another state, and what is the sequence of actions I should take? So, so if you think about a policy,",
    "start": "294845",
    "end": "301819"
  },
  {
    "text": "like we were talking about a sequence of actions and, and the sequence actually mattered, right? Like I, I would take this action and another action,",
    "start": "301820",
    "end": "308765"
  },
  {
    "text": "and the goal is, I'd say for me, to go from here to the door and I would have a [NOISE] sequence of actions that need to go one after each other for me to,",
    "start": "308765",
    "end": "315830"
  },
  {
    "text": "to achieve the task. Okay? So the type of problems that we wanna talk about today,",
    "start": "315830",
    "end": "322535"
  },
  {
    "text": "um, don't have, they, they have a little bit more structure. They don't really care about ordering. And that's kind of the key difference.",
    "start": "322535",
    "end": "329110"
  },
  {
    "text": "So, so when I asked that very first question of pick like two countries, one of them, the name of one of them should start with A,",
    "start": "329110",
    "end": "335599"
  },
  {
    "text": "the other one should speak Hungarian and they're not right next to each other, then the way you think of like all those constraints,",
    "start": "335600",
    "end": "341330"
  },
  {
    "text": "all the things that you need to satisfy, you don't really need to like follow a specific order. They're a bunch of constraints,",
    "start": "341330",
    "end": "346789"
  },
  {
    "text": "you need to satisfy all of them. It really doesn't matter to start from where. And then that's kind of the idea that a,",
    "start": "346790",
    "end": "353135"
  },
  {
    "text": "a variable based model is. And, and we're going to go through this example throughout the lecture.",
    "start": "353135",
    "end": "358265"
  },
  {
    "text": "So the example is, it's a map coloring example. So, so the idea is, let's say we have a map of, uh, Australia here.",
    "start": "358265",
    "end": "366035"
  },
  {
    "text": "And Australia has seven provinces. So these are all the provinces here. And what we wanna do is,",
    "start": "366035",
    "end": "372370"
  },
  {
    "text": "we wanna color this map. So, so the question is, how can we color each of these seven provinces with three colors?",
    "start": "372370",
    "end": "379070"
  },
  {
    "text": "I have red, green, and blue. So that no two neighboring provinces have the same color.",
    "start": "379070",
    "end": "384590"
  },
  {
    "text": "Okay. So that's, that's a task we wanna do. Okay. And then kind of the key idea again here,",
    "start": "384590",
    "end": "391310"
  },
  {
    "text": "is the order of things doesn't matter, right? I can pick any of them [NOISE] and pick a color, and then just go from there.",
    "start": "391310",
    "end": "396830"
  },
  {
    "text": "It doesn't matter, like, if I'm, if I'm, it matters in the sense of the algorithm side of the things,",
    "start": "396830",
    "end": "402290"
  },
  {
    "text": "but in terms of the model, it doesn't matter to, to include that. So, so here, for example, this is one possible solution.",
    "start": "402290",
    "end": "407900"
  },
  {
    "text": "Right? Like I can have the map of Australia. I can have these different colors like red, green, and blue for,",
    "start": "407900",
    "end": "413720"
  },
  {
    "text": "for different parts of it, and no two neighboring countries have, have the same color. So, so this is one possible solution that we can get,",
    "start": "413720",
    "end": "420005"
  },
  {
    "text": "we can have other solutions, er, to get. And, and our goal is to find these types of solutions.",
    "start": "420005",
    "end": "425600"
  },
  {
    "text": "Right? All right. So, so I can think of this as a search problem. I can, I can perfectly think of this as a search problem,",
    "start": "425600",
    "end": "433430"
  },
  {
    "start": "427000",
    "end": "582000"
  },
  {
    "text": "where let's say, it starts with a partial solution. And my partial solution is, somehow I've decided to,",
    "start": "433430",
    "end": "439100"
  },
  {
    "text": "to choose, I'm just gonna refer to these provinces by their first letters. So I'm gonna choose WA, V,",
    "start": "439100",
    "end": "444980"
  },
  {
    "text": "and T. I'm gonna just make them red. And now what I wanna do is, I wanna figure out what other colors to use for the rest of the provinces.",
    "start": "444980",
    "end": "453005"
  },
  {
    "text": "Okay. So I can just go down like a search tree. So, so my state here is this partial assignment,",
    "start": "453005",
    "end": "458854"
  },
  {
    "text": "and I can go down the search tree and I can choose Queensland as, as my next thing.",
    "start": "458854",
    "end": "465245"
  },
  {
    "text": "And, and I'm gonna color that red. So if I color that red, everything looks good. Everything is great. So now,",
    "start": "465245",
    "end": "471770"
  },
  {
    "text": "I'm looking at Northern Territories, so NT. I'm gonna pick a color, I'm just gonna color that green, let's say.",
    "start": "471770",
    "end": "478400"
  },
  {
    "text": "So [NOISE] I color that green. Then if you look at SA, I only have one option for it, right?",
    "start": "478400",
    "end": "484360"
  },
  {
    "text": "Because I've already picked red and I've already picked green, and SA is connected to all these red and greens.",
    "start": "484360",
    "end": "490610"
  },
  {
    "text": "So, so the only color I can pick for SA is blue. So, so that is, that is all I have.",
    "start": "490610",
    "end": "496604"
  },
  {
    "text": "Then how about NSW? Then that has to be green, right?",
    "start": "496605",
    "end": "501945"
  },
  {
    "text": "Because, because I've already picked blue right there, so that has to be green. And, and here is one solution. So I just went down a search tree and picked a solution to this problem.",
    "start": "501945",
    "end": "511400"
  },
  {
    "text": "I could have picked some other solution like that decision that I made over there to make NT green,",
    "start": "511400",
    "end": "516860"
  },
  {
    "text": "that was kinda random, right? Like I can just pick blue there. So let me just pick blue there. And then I can just have another solution,",
    "start": "516860",
    "end": "523203"
  },
  {
    "text": "that's a perfectly fine solution, and I'll have my, my map going. How about I choose, I choose a different color for Queensland?",
    "start": "523204",
    "end": "530240"
  },
  {
    "text": "So, so I decided, I decided to make it red, maybe I want to make it, uh, blue. So if I make it blue then NT has to be green because that's the only option I can have.",
    "start": "530240",
    "end": "539990"
  },
  {
    "text": "And then when I get to NSW, I don't really have any options for it, right? NSW, I have no colors for it that would work.",
    "start": "539990",
    "end": "547735"
  },
  {
    "text": "Because, because green is taken, red is taken, blue is taken, NSW is connected to all three of these.",
    "start": "547735",
    "end": "553144"
  },
  {
    "text": "That's not really gonna work. How about I choose queen to be- Queensland to be, uh,",
    "start": "553145",
    "end": "559580"
  },
  {
    "text": "green, same story, NT has to be blue, SW I don't really have a solution for it.",
    "start": "559580",
    "end": "565925"
  },
  {
    "text": "Okay. Okay, so, so this was just going through this example assuming that it's a search problem,",
    "start": "565925",
    "end": "572870"
  },
  {
    "text": "and I have these states that represent partial assignments, and I'm going to pick actions and the actions are going to just give",
    "start": "572870",
    "end": "579440"
  },
  {
    "text": "a coloring to the next- to some next variable here, okay? So, so the state is partial assignment of colors to provinces and",
    "start": "579440",
    "end": "587570"
  },
  {
    "start": "582000",
    "end": "773000"
  },
  {
    "text": "the action I'm going to take is assign the next uncolored province to a compatible color. So I can perfectly think of this problem as",
    "start": "587570",
    "end": "595329"
  },
  {
    "text": "a state-based or like using state-based models, using this particular state and action. But, but the thing is there is more structure to the problem and",
    "start": "595330",
    "end": "604310"
  },
  {
    "text": "the structure in this particular case comes from the fact that again ordering doesn't matter. So, so variable ordering does not really affect correctness here.",
    "start": "604310",
    "end": "613100"
  },
  {
    "text": "It's just a bunch of constraints. It doesn't matter in what order I'm satisfying those constraints.",
    "start": "613100",
    "end": "618274"
  },
  {
    "text": "And, and in addition to that the variables, they're, they're kind of interdependent in a local way.",
    "start": "618275",
    "end": "623404"
  },
  {
    "text": "So, so for example if I just look at Tasmania like right here, it's not connected to anything,",
    "start": "623405",
    "end": "629270"
  },
  {
    "text": "so I can just pick whatever color I want for that. And it's not affecting the rest of my problem.",
    "start": "629270",
    "end": "634339"
  },
  {
    "text": "So I don't really need to have some order to like pick t first or pick t last, right? I can just pick a color for t and it doesn't affect the rest of- the rest of my system.",
    "start": "634340",
    "end": "643745"
  },
  {
    "text": "Okay. So the idea variable-based models is, let's, let's kind of make our models- like",
    "start": "643745",
    "end": "650795"
  },
  {
    "text": "let's make our models simpler than state-based models. Let's now try to figure out what is this",
    "start": "650795",
    "end": "656105"
  },
  {
    "text": "the state thing that's sufficient for us to make, er, make decisions in the future and, and pick actions sequentially.",
    "start": "656105",
    "end": "662855"
  },
  {
    "text": "Let's try to have an easier language, er, to represent the model of,",
    "start": "662855",
    "end": "668014"
  },
  {
    "text": "of a problem that kind of looks like this. So, so the idea is to come up with this new framework.",
    "start": "668015",
    "end": "674090"
  },
  {
    "text": "And, and in this new framework, we're going to have variables as opposed to states. So, so we are going to call these things variables.",
    "start": "674090",
    "end": "681770"
  },
  {
    "text": "And we're going to have assignments to these variables. So, so the whole job of modeling is to figure out what the variables",
    "start": "681770",
    "end": "687320"
  },
  {
    "text": "are and what's sort of assignment we are picking for those variables. And this decision of, well,",
    "start": "687320",
    "end": "693230"
  },
  {
    "text": "what order should I color things or what value should I pick for, uh, for, pick for each province like,",
    "start": "693230",
    "end": "699230"
  },
  {
    "text": "like that decision of what order of values should I pick? What order of variables should I pick? I can push all of that to inference.",
    "start": "699230",
    "end": "706325"
  },
  {
    "text": "Okay. So, so it's not going anywhere, I'm just pushing it to inference. So another analogy here is you can think that you have",
    "start": "706325",
    "end": "713360"
  },
  {
    "text": "a difficult problem and you can have like an ad hoc way of going about it and solving it, an, an analogy in programming languages so that it would be,",
    "start": "713360",
    "end": "720980"
  },
  {
    "text": "I would be solving it using assembly language. If you look at state-based models,",
    "start": "720980",
    "end": "726080"
  },
  {
    "text": "you come up with the idea of state. You're doing something, something more general and you're doing a lot of work and why are you doing that?",
    "start": "726080",
    "end": "732680"
  },
  {
    "text": "Because you have a higher level of abstraction, so when you're using something like state-based models, an analogy to that is maybe you're programming in",
    "start": "732680",
    "end": "739279"
  },
  {
    "text": "C. So you're moving the level of abstraction. And when you're using things like variable-based models,",
    "start": "739280",
    "end": "744680"
  },
  {
    "text": "it's even moving the level of abstractions a little bit higher. It's, it's even like programming in Python. So, so sure you can do the exact same thing in C too,",
    "start": "744680",
    "end": "752555"
  },
  {
    "text": "but now you have this higher level of abstraction to think about problems and that makes your model much simpler.",
    "start": "752555",
    "end": "758435"
  },
  {
    "text": "And, and the order of things that can become the problem of inference. Okay. All right.",
    "start": "758435",
    "end": "765545"
  },
  {
    "text": "Everyone happy with, with why we want to do state-based or we want to do variable based modeling? All right.",
    "start": "765545",
    "end": "773825"
  },
  {
    "start": "773000",
    "end": "816000"
  },
  {
    "text": "So, so I've kind of motivated this but I haven't really said what it is, how we go about solving it. So what I want to do for the rest of the class is,",
    "start": "773825",
    "end": "781295"
  },
  {
    "text": "I want to start formalizing variable-based models by this idea called factor graphs .",
    "start": "781295",
    "end": "786545"
  },
  {
    "text": "And then after that I want to talk a little bit about inference in the case of state- uh, variable-based models.",
    "start": "786545",
    "end": "792275"
  },
  {
    "text": "So specifically, I'm going to talk about dynamic ordering and arc consistency as ways- as heuristics that allows us to,",
    "start": "792275",
    "end": "799760"
  },
  {
    "text": "to solve these variable-based models. And then towards the end, I just want to show you a couple of examples,",
    "start": "799760",
    "end": "805535"
  },
  {
    "text": "other examples of why variable-based models are so powerful and where they come in and just give you some ideas of like what- some other examples to look at, okay?",
    "start": "805535",
    "end": "814774"
  },
  {
    "text": "All right, so, so that is the plan for today. So, so let's, let's start with a simpler example.",
    "start": "814775",
    "end": "820220"
  },
  {
    "text": "So let's say that I have three people. Maybe I can draw that here.",
    "start": "820220",
    "end": "825514"
  },
  {
    "text": "So I have three people, Person 1, Person 2, Person 3,",
    "start": "825515",
    "end": "832640"
  },
  {
    "text": "and each of them they are going to choose a color either red or blue, that- that's what they're gonna do,",
    "start": "832640",
    "end": "838415"
  },
  {
    "text": "red or blue, red or blue, okay. And each of them have a set of constraints.",
    "start": "838415",
    "end": "845240"
  },
  {
    "text": "So, so the idea is maybe this guy really wants to pick blue. So, so really wants to pick blue.",
    "start": "845240",
    "end": "851000"
  },
  {
    "text": "Maybe this third person prefers to pick red, but maybe he doesn't- it's not like as bad as this guy so prefers red.",
    "start": "851000",
    "end": "860450"
  },
  {
    "text": "And maybe we want to make sure that they pick the same thing. The first person and second person.",
    "start": "860450",
    "end": "868385"
  },
  {
    "text": "And maybe we want to ensure that the second person and the third person,",
    "start": "868385",
    "end": "873545"
  },
  {
    "text": "we prefer they pick the same, they pick, they pick the same thing- the same color.",
    "start": "873545",
    "end": "881130"
  },
  {
    "text": "Okay. So these are some set of constraints almost that I'm putting on, on this example.",
    "start": "883120",
    "end": "889070"
  },
  {
    "text": "And the way we can think about these constraints that I've just laid down on this picture is using this idea of a factor graph.",
    "start": "889070",
    "end": "896420"
  },
  {
    "text": "So a factor graph is going to have a set of variables. Okay, and this is like analog of states as,",
    "start": "896420",
    "end": "903590"
  },
  {
    "text": "as we talked about in state-based models. It's going to have a bunch of variables. I'm going to have three variables because this person is going to pick something,",
    "start": "903590",
    "end": "910745"
  },
  {
    "text": "this person is going to pick another color, this last person is going to pick a color. So I'm going to have variables; X_1,",
    "start": "910745",
    "end": "917599"
  },
  {
    "text": "X_2 and X_3, okay? Let me actually write down some of these.",
    "start": "917599",
    "end": "925130"
  },
  {
    "text": "So we're going to go over a bunch of definitions for the first part of the class at least. So we're going to talk about factor graphs.",
    "start": "925130",
    "end": "932490"
  },
  {
    "text": "Factor graphs are going to have some number of variables.",
    "start": "933850",
    "end": "939019"
  },
  {
    "text": "We're going to represent variables with capital letters, so like capital X.",
    "start": "939020",
    "end": "944270"
  },
  {
    "text": "So in that particular example the variables that I have are X_1, X_2 and X_3.",
    "start": "944270",
    "end": "950825"
  },
  {
    "text": "Okay. And each one of these variables, they're going to- they're going to live in some domain,",
    "start": "950825",
    "end": "958610"
  },
  {
    "text": "they're either going to get red or blue, right? So, so each one of these X_is, they are going to live in some domain.",
    "start": "958610",
    "end": "966335"
  },
  {
    "text": "So we're going to say, X_i lives in some domain of i.",
    "start": "966335",
    "end": "974704"
  },
  {
    "text": "So in this particular example, the domain is just red and blue.",
    "start": "974705",
    "end": "980069"
  },
  {
    "text": "So each one of these X_is are going to live in either red or blue.",
    "start": "980590",
    "end": "985670"
  },
  {
    "text": "And if I pick a value for it, and if I come in and say, well,",
    "start": "985670",
    "end": "991490"
  },
  {
    "text": "this guy picked red and this guy picked blue and this guy picked red, then I'm giving an assignment.",
    "start": "991490",
    "end": "997925"
  },
  {
    "start": "996000",
    "end": "1210000"
  },
  {
    "text": "So that's called an assignment. [NOISE]",
    "start": "997925",
    "end": "1004665"
  },
  {
    "text": "So an assignment, I'm going to write it with small x. And it's going to tell me well what X1 took and what small means kinda red or blue.",
    "start": "1004665",
    "end": "1013800"
  },
  {
    "text": "So capital means the actual variable. And X2 and X3. What were they? So maybe for this particular example maybe you're talking about red.",
    "start": "1013800",
    "end": "1023175"
  },
  {
    "text": "Blue and red, okay? All right. So, so that was variables.",
    "start": "1023175",
    "end": "1028199"
  },
  {
    "text": "They live in a domain and then we can pick an assignment, okay? So now I have all these constraints and I can write",
    "start": "1028200",
    "end": "1034709"
  },
  {
    "text": "those constraints as something that's called factors. So these factors are going to be functions that",
    "start": "1034710",
    "end": "1042390"
  },
  {
    "text": "tell me how happy I would be if this X1 takes value red or value blue.",
    "start": "1042390",
    "end": "1047444"
  },
  {
    "text": "So their functions, in this case F1 is a function of X1.",
    "start": "1047445",
    "end": "1053024"
  },
  {
    "text": "So, so I'm gonna write, a factor graph needs factors. And these factors are Fj's.",
    "start": "1053025",
    "end": "1061320"
  },
  {
    "text": "There are some number of them. There might be a lot of them. Fj's of, ah, some X taking some value Xi.",
    "start": "1061320",
    "end": "1071280"
  },
  {
    "text": "Some Xi taking some value Xi or some number of, let me just write the most general form right now.",
    "start": "1071280",
    "end": "1077250"
  },
  {
    "text": "X. And these Fj's have to be greater than or equal to zero, okay?",
    "start": "1077250",
    "end": "1083405"
  },
  {
    "text": "So they are kind of telling me how happy I would be, right? So, so here I would have F1 of X1.",
    "start": "1083405",
    "end": "1089600"
  },
  {
    "text": "Um, so if I really want this guy to pick blue then what would be a good factor to put here?",
    "start": "1089600",
    "end": "1096585"
  },
  {
    "text": "What should I say for F1 of X1? So I can write it as an indicator function making sure that X1 definitely takes blue.",
    "start": "1096585",
    "end": "1107400"
  },
  {
    "text": "Maybe I can write it like this, okay? So, ah, so if it is an indicator function what does it say- what does it tell me?",
    "start": "1107400",
    "end": "1114690"
  },
  {
    "text": "If it is an indicator function, if X1 actually takes blue, then the value of this factor is going to be one.",
    "start": "1114690",
    "end": "1121710"
  },
  {
    "text": "If X1 takes red, the value is going to be 0. So I'm kind of treating 0 as this thing that I don't want and",
    "start": "1121710",
    "end": "1128190"
  },
  {
    "text": "anything above 0 as something that I actually want to get, okay? So, so I'm going to have another constraint.",
    "start": "1128190",
    "end": "1134850"
  },
  {
    "text": "This constraint is going to be F2. It's a function of X1 and X2 that's why it's connected to both of them.",
    "start": "1134850",
    "end": "1141360"
  },
  {
    "text": "So I'm gonna draw these squares as, as kind of like showing where the factors are. So, so the circles are my variables.",
    "start": "1141360",
    "end": "1149025"
  },
  {
    "text": "And then the squares are my factors. These functions that kind of told me what are the constraints? What are the things that I need to satisfy?",
    "start": "1149025",
    "end": "1155190"
  },
  {
    "text": "So F2 is going to somehow encode that they need to pick the same thing. Again it can be maybe an indicator function.",
    "start": "1155190",
    "end": "1161340"
  },
  {
    "text": "Making sure this is- these two are equal to each other. And maybe I'll have F3 of.",
    "start": "1161340",
    "end": "1167445"
  },
  {
    "text": "F3 is going to be a function of X2 and X3. [NOISE] This ensures that they sometimes make the same,",
    "start": "1167445",
    "end": "1174615"
  },
  {
    "text": "or sometimes here kinda means that we can have an indicator function, but maybe if they don't pick the same thing you wouldn't be too sad.",
    "start": "1174615",
    "end": "1181395"
  },
  {
    "text": "So, so maybe you don't put 0 for that. So it would be an indicator function plus some constant. That's one way of going about it.",
    "start": "1181395",
    "end": "1188265"
  },
  {
    "text": "And then X3 is going to be take, prefers red.",
    "start": "1188265",
    "end": "1193830"
  },
  {
    "text": "So it's going to have a factor. That says it prefers red, okay?",
    "start": "1193830",
    "end": "1199680"
  },
  {
    "text": "All right. So let's look at the same thing on the slide. So that's a factor graph.",
    "start": "1199680",
    "end": "1206235"
  },
  {
    "text": "So I can actually look at the values of the factors maybe F1 of X1.",
    "start": "1206235",
    "end": "1211860"
  },
  {
    "text": "Maybe what I want is I want if, ah, for that to be equal to 1. If X1 picks blue I want that to be equal to 0.",
    "start": "1211860",
    "end": "1218430"
  },
  {
    "text": "If X1 picks red. For, ah, the two, they have to agree, for the case that they have to",
    "start": "1218430",
    "end": "1225240"
  },
  {
    "text": "agree that I can define it as an indicator function but if they are not equal to each other,",
    "start": "1225240",
    "end": "1230430"
  },
  {
    "text": "if I'm gonna get 0, I'm going to be very unhappy. If they are equal to each other I'm going to get 1. So I would be happy.",
    "start": "1230430",
    "end": "1236475"
  },
  {
    "text": "And then for the case that X2 and X3 needs to kind of be equal to each other, then maybe we can do something like an indicator function plus 2.",
    "start": "1236475",
    "end": "1244590"
  },
  {
    "text": "This means that if they don't pick the same thing, oh I'll be happy. But like if they picked exactly the same thing,",
    "start": "1244590",
    "end": "1251100"
  },
  {
    "text": "I'm going to be even happier. So I'm going to get 3. And then for the last one similar thing I,",
    "start": "1251100",
    "end": "1256425"
  },
  {
    "text": "I preferred the last person to pick red. So I'm gonna give it a value of 2 to that and I'm going to give 1 for the case of blue, okay?",
    "start": "1256425",
    "end": "1263924"
  },
  {
    "text": "So, so these are my factors, question?",
    "start": "1263925",
    "end": "1266770"
  },
  {
    "text": "Does the factor value matter, or is the only thing that matters if it's equal to 0 or not. So good question. So question is, does the factor value matter",
    "start": "1269450",
    "end": "1275580"
  },
  {
    "text": "or is it just like if it is above 0 or not. In general it does matter like what you were picking.",
    "start": "1275580",
    "end": "1280785"
  },
  {
    "text": "For you're soon going to be talking about a specific case of concerns, specific case of factor graphs where the",
    "start": "1280785",
    "end": "1288270"
  },
  {
    "text": "zero and one is the only thing that's, that matters. So I'm not focusing too much on the exact value.",
    "start": "1288270",
    "end": "1293370"
  },
  {
    "text": "It's just if you get zero that's pretty bad. If you get non-zero that's good. So I'm treating them like that because soon we are going to talk about CSPs,",
    "start": "1293370",
    "end": "1301740"
  },
  {
    "text": "constraint satisfaction problems which are just factor graphs where you have 0s and 1s, you don't have anything above them, okay?",
    "start": "1301740",
    "end": "1310060"
  },
  {
    "text": "All right. So let's try to actually write this up. So, um, here's this environment that you can play with it if you want.",
    "start": "1310160",
    "end": "1319424"
  },
  {
    "text": "Um. Okay. This is visible. Yeah. All right. So here you can define variables.",
    "start": "1319425",
    "end": "1326060"
  },
  {
    "text": "So I have variable X1. It can take value red or blue. X2 and X3 similar thing.",
    "start": "1326060",
    "end": "1331309"
  },
  {
    "text": "They can take values red or blue. I have four factors so I'm going to write up what those factors are. Factor F1 depends on X1.",
    "start": "1331310",
    "end": "1338430"
  },
  {
    "text": "It's a function and it's going to return the result of this indicator. And then a similar thing,",
    "start": "1338430",
    "end": "1343530"
  },
  {
    "text": "ah, I'm going to define, ah, the second factor also as a function of X1 and X2 and it",
    "start": "1343530",
    "end": "1349170"
  },
  {
    "text": "returns a value of the indicator and has all these other factors. And on the right you can kind of see these factors being generated.",
    "start": "1349170",
    "end": "1357419"
  },
  {
    "text": "So we're going to look at this environment even more next time when we talk about more fancier inference algorithms,",
    "start": "1357420",
    "end": "1363210"
  },
  {
    "text": "but for now let's move to-.",
    "start": "1363210",
    "end": "1369460"
  },
  {
    "text": "Let's move to finding our factor graphs. All right. So. Alright. So what is a factor graph? So more formally a factor graph has a set of variables X1 through Xn and each one of",
    "start": "1371330",
    "end": "1381750"
  },
  {
    "start": "1373000",
    "end": "1404000"
  },
  {
    "text": "these variables each one of these Xi's lies in some domain in this case the red or blue was our domain.",
    "start": "1381750",
    "end": "1387644"
  },
  {
    "text": "And then the factors are going to be F1 through Fn. We have m of them in this case let's say.",
    "start": "1387645",
    "end": "1392684"
  },
  {
    "text": "And, and each of these factors is just a function over X that is going to be greater than or equal to 0, okay?",
    "start": "1392685",
    "end": "1399510"
  },
  {
    "text": "So, so that's a factor graph. It tells us what are the things that we really want. So let's look at one example here.",
    "start": "1399510",
    "end": "1406304"
  },
  {
    "start": "1404000",
    "end": "1479000"
  },
  {
    "text": "So in this- in this particular map coloring example, the variables or the provinces that we have. We have seven of them.",
    "start": "1406305",
    "end": "1412365"
  },
  {
    "text": "The domain is going to be red, green, and blue. So those are the colors that we can pick.",
    "start": "1412365",
    "end": "1417419"
  },
  {
    "text": "And then the factors. Well, the factors here are just going to be telling us that",
    "start": "1417420",
    "end": "1423029"
  },
  {
    "text": "don't pick the same color for two provinces that are neighbors. So I'm going to have factors that are indicators ensuring that we",
    "start": "1423030",
    "end": "1430530"
  },
  {
    "text": "don't give the same value to two neighboring territories. So we have factors that basically connect every neighboring territory.",
    "start": "1430530",
    "end": "1439830"
  },
  {
    "text": "And again this square here corresponds to each one of these functions, question? Now isn't it the same for all the variables?",
    "start": "1439830",
    "end": "1446460"
  },
  {
    "text": "Not necessarily. So the question is is the domain always the same for all variables? It depends on the problem. Not really.",
    "start": "1446460",
    "end": "1452174"
  },
  {
    "text": "Also we are going to talk about how to reduce the domain as we go. So that's, that's another reason that I'm emphasizing",
    "start": "1452175",
    "end": "1457800"
  },
  {
    "text": "on the domain because when we think about the inference algorithm, the domain is not going to stay the same throughout. If I pick a red for example for WA,",
    "start": "1457800",
    "end": "1465420"
  },
  {
    "text": "then NT is not gonna have red in its domain anymore. So, so the reason I keep bringing up the domain is we're going to look at how to update",
    "start": "1465420",
    "end": "1472590"
  },
  {
    "text": "the domain for the- for the inference algorithm, okay? All right.",
    "start": "1472590",
    "end": "1478740"
  },
  {
    "text": "So this is a factor graph. Um, [NOISE] let's define a few more things just so",
    "start": "1478740",
    "end": "1483900"
  },
  {
    "start": "1479000",
    "end": "1615000"
  },
  {
    "text": "we have a common language to talk about things. So, so we're going to find a scope.",
    "start": "1483900",
    "end": "1489255"
  },
  {
    "text": "So scope of a factor is a set of variables it depends on. So, so it's really simple. So scope.",
    "start": "1489255",
    "end": "1495585"
  },
  {
    "text": "So I'm going to write scope here. Scope. So it's just set of variables a factor depends on.",
    "start": "1495585",
    "end": "1507789"
  },
  {
    "text": "So for example, ah, for this case if I have F2,",
    "start": "1510080",
    "end": "1516090"
  },
  {
    "text": "it depends on two variables X1 and X2. So the scope of F2 is just X1 and X2.",
    "start": "1516090",
    "end": "1522000"
  },
  {
    "text": "Ah, so in this other case, when we looked at the map coloring example. If we look at F1 as a factor that tells us WA and NT should not have the same color.",
    "start": "1522000",
    "end": "1532470"
  },
  {
    "text": "The two variables that are used are WA and NT, okay? So, so that's the scope. Then now that we have the scope,",
    "start": "1532470",
    "end": "1538679"
  },
  {
    "text": "we can define something else called arity which is the number of variables in the scope. So each one of these squares just",
    "start": "1538680",
    "end": "1546585"
  },
  {
    "text": "how many- how many edges is it coming out of it? That's arity. So in this case, this particular square depends on two variables, arity is two.",
    "start": "1546585",
    "end": "1555300"
  },
  {
    "text": "I can have a setting where maybe I have a factor that depends on three variables, then arity is three.",
    "start": "1555300",
    "end": "1560429"
  },
  {
    "text": "I can have a factor that depends on only one variable, then arity is one.",
    "start": "1560430",
    "end": "1565505"
  },
  {
    "text": "And, and if arity is two then we call it- we call the factor a binary factor.",
    "start": "1565505",
    "end": "1571640"
  },
  {
    "text": "If arity is one we call the factor a unary factor. So just common language.",
    "start": "1571640",
    "end": "1577520"
  },
  {
    "text": "[NOISE] So we have arity and then we have-.",
    "start": "1577520",
    "end": "1584660"
  },
  {
    "text": "Which is- which is the number of variables in the scope. And then you have unary, unary, unary factors.",
    "start": "1584660",
    "end": "1593250"
  },
  {
    "text": "When arity is one, our binary factors and arity is two.",
    "start": "1593250",
    "end": "1600630"
  },
  {
    "text": "So it's just defining things. So for example in this case of map coloring F1 is a binary factor.",
    "start": "1600630",
    "end": "1608735"
  },
  {
    "text": "So in the case of map coloring all our factors were binary if you- if you look at it.",
    "start": "1608735",
    "end": "1614015"
  },
  {
    "text": "All right. Let me go back to that. Here it is. So I have a bunch of factors that just",
    "start": "1614015",
    "end": "1619470"
  },
  {
    "text": "say these two variables should not be equal to each other. So I have a bunch of binary factors and that's pretty much the only thing I have, okay?",
    "start": "1619470",
    "end": "1627070"
  },
  {
    "text": "In this case, I have a binary factor, I have a binary factor, I have a unary factor, a unary factor.",
    "start": "1629690",
    "end": "1636400"
  },
  {
    "text": "All right. Okay. So, so far so good. So- so we talked about the assignments, right?",
    "start": "1636400",
    "end": "1642750"
  },
  {
    "start": "1642000",
    "end": "1808000"
  },
  {
    "text": "The assignments are going to be a setting where we give actual values to these variables.",
    "start": "1642750",
    "end": "1648060"
  },
  {
    "text": "And an assignment can have a weight that tells us how good that assignment is.",
    "start": "1648060",
    "end": "1653325"
  },
  {
    "text": "So- so remember, a factor tells us how good this particular excite, like how happy I would be if x_2 takes a value and x_3 gets a value,",
    "start": "1653325",
    "end": "1660899"
  },
  {
    "text": "a weight tells me how happy I would be for the full assignment. So- so what it is going to be is like in this case,",
    "start": "1660900",
    "end": "1667515"
  },
  {
    "text": "we can- we- we can look at weight to just be a product of- of my factors.",
    "start": "1667515",
    "end": "1672705"
  },
  {
    "text": "So I'm gonna write- uh, maybe I'll just write it in front of here. So I'm going to define a weight of an assignment x.",
    "start": "1672705",
    "end": "1683640"
  },
  {
    "text": "And the way I'm writing that is I'm just gonna write it to be a product of f_j's,",
    "start": "1683640",
    "end": "1691425"
  },
  {
    "text": "uh, j from 1 through m. So I have m factors, so it's going to be f_j's of x taking assignment x.",
    "start": "1691425",
    "end": "1699615"
  },
  {
    "text": "Okay? So for this particular example, we looked at the tables,",
    "start": "1699615",
    "end": "1705660"
  },
  {
    "text": "and each one of these tables represents our factor. But- but now, if I talk about a full assignment,",
    "start": "1705660",
    "end": "1710790"
  },
  {
    "text": "then I'm looking at what does it- what happens if x_1, x_2, and x_3 take all possible values that they could be taking.",
    "start": "1710790",
    "end": "1717150"
  },
  {
    "text": "So I have eight possible options here. And then I'm looking at a weight, eh, as- as a product of ea- all of these factors multiplied out by each other.",
    "start": "1717150",
    "end": "1726674"
  },
  {
    "text": "So- so remember, I was saying well, 0 is the thing that I really don't want to have. So if I have a 0 ever, like that,",
    "start": "1726675",
    "end": "1733410"
  },
  {
    "text": "that's a super like hard constraint that I'm trying to enforce, and that makes my weight equal to 0.",
    "start": "1733410",
    "end": "1739020"
  },
  {
    "text": "So so- if x_1 ever picks red, that was like a hard constraint. We really wanted the first person to pick blue.",
    "start": "1739020",
    "end": "1745575"
  },
  {
    "text": "So fir- if the first person picks red, then the weight is going to be equal to 0. The other thing we really wanted was",
    "start": "1745575",
    "end": "1751920"
  },
  {
    "text": "the first and second person to pick exactly the same color. If they pick different colors, then my second factor is going to be 0,",
    "start": "1751920",
    "end": "1759450"
  },
  {
    "text": "weight of that is equal to 0. Otherwise, I would have different- I- I would have different weights.",
    "start": "1759450",
    "end": "1764895"
  },
  {
    "text": "Maybe the thing I care about is to maximize the weight, so I'll pick the one, the assignment with- with the value 4.",
    "start": "1764895",
    "end": "1770985"
  },
  {
    "text": "Okay? So going back to this, um, demo environment we were just looking at,",
    "start": "1770985",
    "end": "1778200"
  },
  {
    "text": "um, what we can do is, uh, we can- basically, we've defined our factor graph,",
    "start": "1778200",
    "end": "1784020"
  },
  {
    "text": "and we can actually step through it, and you can play with this, but you can basically get these [NOISE] two different- different assignments that- that give you non-zero weights,",
    "start": "1784020",
    "end": "1792810"
  },
  {
    "text": "and you can pick your favorite. So we're gonna talk about various types of algorithms that allow you to compute these weights.",
    "start": "1792810",
    "end": "1798810"
  },
  {
    "text": "Okay? All right.",
    "start": "1798810",
    "end": "1803880"
  },
  {
    "text": "Okay. All right. So weight of an assignment x is just a product of the factors of that assignment.",
    "start": "1803880",
    "end": "1815175"
  },
  {
    "text": "Okay? And then our objective is to maximize the weight of the assignments. So I- I want- what I want to find is,",
    "start": "1815175",
    "end": "1821190"
  },
  {
    "text": "at the end of the day, what I wanna do is I want to find an assignment. So I wanna find that small x that maximizes the weight of, er,",
    "start": "1821190",
    "end": "1828105"
  },
  {
    "text": "of that particular x. Okay? All right. So going back to the map coloring example.",
    "start": "1828105",
    "end": "1836070"
  },
  {
    "text": "So here, um, let's say that we defined all these indicator factors.",
    "start": "1836070",
    "end": "1841259"
  },
  {
    "text": "So if it is an indicator factor, I'm either going to get 0 or 1, I'm not gonna get anything other than that.",
    "start": "1841260",
    "end": "1847005"
  },
  {
    "text": "Then if I have this particular assignment which kinda looks right, then the weight of that assignment is just going to be",
    "start": "1847005",
    "end": "1853860"
  },
  {
    "text": "a bunch of 1 multiplied out by each other, so I'm just gonna get 1. Okay? So- so if I find a solution to this map coloring problem,",
    "start": "1853860",
    "end": "1861240"
  },
  {
    "text": "the weight of that- that particular assignment is going to be 1. I could have another assignment where I don't get,",
    "start": "1861240",
    "end": "1868500"
  },
  {
    "text": "uh, a good solution. I had two of- two of these- these neighboring territories are going to be have the same color if they're both going to be red.",
    "start": "1868500",
    "end": "1875895"
  },
  {
    "text": "Then in that case, two of my factors are going to be 0. If they are going to be 0,",
    "start": "1875895",
    "end": "1881130"
  },
  {
    "text": "the weight is going to be equal to 0. So for this particular map coloring example, where my factors are just indicators,",
    "start": "1881130",
    "end": "1887520"
  },
  {
    "text": "the only weights I can get are 0 or 1. I can either get 0 or I can get 1. If I get one, I find a solution.",
    "start": "1887520",
    "end": "1893294"
  },
  {
    "text": "If I don't get 1, I don't find a solution. Okay? All right.",
    "start": "1893295",
    "end": "1898460"
  },
  {
    "start": "1897000",
    "end": "2014000"
  },
  {
    "text": "So we have been talking about factor graphs, they're these more general things. Now, we're going to start talking about CSPs, constraint satisfaction problems,",
    "start": "1898460",
    "end": "1906860"
  },
  {
    "text": "which are just factor graphs where all factors are called constraints, and the factors are going to take value 0 or 1.",
    "start": "1906860",
    "end": "1915135"
  },
  {
    "text": "And the constraint is satisfied if the factor takes value 1. [NOISE] So we talked about factor graphs.",
    "start": "1915135",
    "end": "1922110"
  },
  {
    "text": "We're going to talk now about constraint. I'm just gonna write CSP,",
    "start": "1922110",
    "end": "1927434"
  },
  {
    "text": "constraint satisfaction problem, CSPs. Okay? They also have the same variables as before.",
    "start": "1927435",
    "end": "1935575"
  },
  {
    "text": "And we're gonna pick assignments for them. So same thing, I'm gonna- assignments.",
    "start": "1935575",
    "end": "1941195"
  },
  {
    "text": "But the factors are going to be called constraints.",
    "start": "1941195",
    "end": "1947600"
  },
  {
    "text": "[NOISE] And these factors fj's of x are either 0 or 1,",
    "start": "1947600",
    "end": "1957000"
  },
  {
    "text": "they're not anything else. Okay? And if you find an assignment where your weight is equal to one,",
    "start": "1957000",
    "end": "1964109"
  },
  {
    "text": "then that means that you are satisfying all your factors, and that's called the consistent assignment.",
    "start": "1964109",
    "end": "1969735"
  },
  {
    "text": "So you- we have consistency, consistent assignment, assign- I'm gonna write assignment.",
    "start": "1969735",
    "end": "1979695"
  },
  {
    "text": "Um, that is when the weight is equal to 1. If the weight is equal to 0,",
    "start": "1979695",
    "end": "1986130"
  },
  {
    "text": "then we have an inconsistent assignment. So- so it's either 0 or 1. We have consistent assignments or inconsistent assignments.",
    "start": "1986130",
    "end": "1992460"
  },
  {
    "text": "[NOISE] Okay? So an assignment x is consistent if and only",
    "start": "1992460",
    "end": "1998460"
  },
  {
    "text": "if the weight of that particular assignment is 1. That means, all the constraints are satisfied, because constraints are just give me 1  and 0.",
    "start": "1998460",
    "end": "2005929"
  },
  {
    "text": "I'm multiplying 1 and 0. If anything is not satisfied, then the thing is 0, okay? All right.",
    "start": "2005930",
    "end": "2014870"
  },
  {
    "start": "2014000",
    "end": "2072000"
  },
  {
    "text": "So, so far, summary so far is we have just gone over a bunch of definitions. Factor graph is the more general case of it.",
    "start": "2014870",
    "end": "2022865"
  },
  {
    "text": "Constraint satisfaction problems is more of an all or nothing kind of a situation. So you have hard constraints,",
    "start": "2022865",
    "end": "2028460"
  },
  {
    "text": "everything is a hard constraint. And then you have- so, um, so for example, if you think of map coloring,",
    "start": "2028460",
    "end": "2033725"
  },
  {
    "text": "you can think of that as- as a constraint satisfaction problem because everything is a hard constraint, right? Like you- you don't want any two neighboring countries to have the same color.",
    "start": "2033725",
    "end": "2041825"
  },
  {
    "text": "So you're either going to give 1 if- if that constraint is satisfied, or you're going to give 0 if that's not satisfied.",
    "start": "2041825",
    "end": "2047644"
  },
  {
    "text": "You still have variables. Factors are called constraints. Assignment weight. If that is equal to 1,",
    "start": "2047645",
    "end": "2053720"
  },
  {
    "text": "we have consistent assignment. Otherwise, we have an inconsistent assignment. Can we just think of the CSP as a-",
    "start": "2053720",
    "end": "2060754"
  },
  {
    "text": "Constrained factor graph is that the idea? It's- it's a more constrained factor graph. Yeah, it is- factor graph is this big picture of CSP is",
    "start": "2060755",
    "end": "2067399"
  },
  {
    "text": "an instance of factor graph. All right. So that was factor graphs and constraint satisfaction problems.",
    "start": "2067400",
    "end": "2074450"
  },
  {
    "start": "2072000",
    "end": "2203000"
  },
  {
    "text": "So, so let's talk about how we go about solving these. So, so how should we find an assignment?",
    "start": "2074450",
    "end": "2079940"
  },
  {
    "text": "Our goal is to find an assignment. So we have consistency, right? Because, because if, if you are talking about CSPs,",
    "start": "2079940",
    "end": "2085925"
  },
  {
    "text": "we wanna get weight 1, that means you wanna have an assignment that's consistent and makes all my factors 1.",
    "start": "2085925",
    "end": "2091595"
  },
  {
    "text": "So, so how do I pick, how do I pick that? Okay. So, er, so let's look at an example. Let's just like, let's just see how we would do it normally,",
    "start": "2091595",
    "end": "2099065"
  },
  {
    "text": "like if you wanted to solve this. Like, if I was solving this I would pick one of these, like one of these nodes, or variables,",
    "start": "2099065",
    "end": "2105770"
  },
  {
    "text": "I would pick WA, maybe I would say well, let's just pick red, just to see how that goes with that. And then I would go to a neighboring,",
    "start": "2105770",
    "end": "2112790"
  },
  {
    "text": "neighboring node like NT. And I do have a constraint. The constraint is WA and NT should not be equal to each other.",
    "start": "2112790",
    "end": "2119359"
  },
  {
    "text": "So the only thing that tells me is that NT should not be red. So I'm just gonna pick some color, let's just pick green.",
    "start": "2119360",
    "end": "2125600"
  },
  {
    "text": "So then I'm gonna go to some other neighboring, neighboring node, so that's SA.",
    "start": "2125600",
    "end": "2131275"
  },
  {
    "text": "I have two constraints. The two constraints are is SA should not be equal to WA, should not be equal to NT,",
    "start": "2131275",
    "end": "2137500"
  },
  {
    "text": "so it shouldn't be red or it shouldn't be green. The only option I have is blue, so I'm gonna set that equal to blue.",
    "start": "2137500",
    "end": "2143280"
  },
  {
    "text": "Then I'm gonna go to Q, the only option I have where Q is red because, because green and blue are already taken,",
    "start": "2143280",
    "end": "2149195"
  },
  {
    "text": "then I'm gonna go to NSW, the only option I have there is green. When you go to V, again then the only option I have is, is, is red.",
    "start": "2149195",
    "end": "2157880"
  },
  {
    "text": "And then I can pick whatever color I want for T because that's kind of random node out there. Okay. So, so this is a thing that we would probably do if we were to do this, right?",
    "start": "2157880",
    "end": "2167390"
  },
  {
    "text": "We, we would go over these nodes with some order and we would pick colors in some other order, and I know that's important.",
    "start": "2167390",
    "end": "2173360"
  },
  {
    "text": "But, but the way we would do it is just, just pick some order and maybe we'd have some heuristic that picks your order",
    "start": "2173360",
    "end": "2178820"
  },
  {
    "text": "and picks the values and tries to make the constraints satisfied. So, so what we wanna do is we actually wanna spend [NOISE] a little bit of time,",
    "start": "2178820",
    "end": "2188645"
  },
  {
    "text": "uh, talking about doing that, and go- and having actually heuristics that,",
    "start": "2188645",
    "end": "2193865"
  },
  {
    "text": "that tells us what order we should use, we should use for the variables, and what order of values we should pick.",
    "start": "2193865",
    "end": "2200000"
  },
  {
    "text": "So, so we're gonna talk about a few heuristics mainly this time. So, so, so to do that, um,",
    "start": "2200000",
    "end": "2205175"
  },
  {
    "start": "2203000",
    "end": "2333000"
  },
  {
    "text": "we need to define one more thing, it's the last thing I'm gonna define, and then after that talk about the algorithm.",
    "start": "2205175",
    "end": "2211100"
  },
  {
    "text": "So, so we're gonna define dependent factors. So dependent- so the partial assignment is going to",
    "start": "2211100",
    "end": "2218510"
  },
  {
    "text": "be partially assigning values to variables in this, in this, um, CSP, right?",
    "start": "2218510",
    "end": "2224900"
  },
  {
    "text": "So, so a partial assignment, for example here, could be that WA needs to be red and NT needs to be green.",
    "start": "2224900",
    "end": "2231005"
  },
  {
    "text": "That's a partial assignment, okay? Then I can define dependent factors to be a function",
    "start": "2231005",
    "end": "2236839"
  },
  {
    "text": "of partial assignments and a new variable X_i. So let me depend- let me just write that somewhere,",
    "start": "2236840",
    "end": "2244099"
  },
  {
    "text": "maybe I'll write it, a different color because it's. So we have, um,",
    "start": "2244100",
    "end": "2249470"
  },
  {
    "text": "we have something else called dependent factors, it's D of x and X_i,",
    "start": "2249470",
    "end": "2260090"
  },
  {
    "text": "where x is partial assignment and X_i is a new variable I'm picking.",
    "start": "2260090",
    "end": "2267440"
  },
  {
    "text": "And dependent factors is going to return a set of factors. It- it's going to return a set of factors that,",
    "start": "2267440",
    "end": "2274190"
  },
  {
    "text": "that depend on x and X_i. So, so for example, in this particular case,",
    "start": "2274190",
    "end": "2279425"
  },
  {
    "text": "this we said, this is a partial assignment. Let's say I'm asking what are the dependent factors of this partial assignment and SA?",
    "start": "2279425",
    "end": "2287810"
  },
  {
    "text": "So I'm picking a new variable, I'm picking SA, and I'm saying, what are, what are the dependent factors?",
    "start": "2287810",
    "end": "2293224"
  },
  {
    "text": "And then these are going to be the factors that depend on this new thing SA and depend on the partial- partial assignment.",
    "start": "2293225",
    "end": "2300110"
  },
  {
    "text": "So it's going to be this factor and this factor, right? I'm going to pick the factor that says WA is not equal to SA,",
    "start": "2300110",
    "end": "2306200"
  },
  {
    "text": "and I'm gonna pick a factor that tells me NT is not equal to SA, okay? [NOISE] And that kind of like the idea of dependent factors is that it allows me to,",
    "start": "2306200",
    "end": "2315289"
  },
  {
    "text": "to think about the next thing I should- next things I should be worrying about. So, so if you remember like tree search algorithm,",
    "start": "2315290",
    "end": "2320930"
  },
  {
    "text": "if you would look at children of, of some note. Here we are going to look at dependent factors, because,",
    "start": "2320930",
    "end": "2325940"
  },
  {
    "text": "because those are the factors, the next factor is we should, we should care about, that's why I'm defining these dependent factors.",
    "start": "2325940",
    "end": "2331670"
  },
  {
    "text": "Okay. All right. So, so now this is the algorithm. Kinda I want to write it up on the board because it would be good to have it,",
    "start": "2331670",
    "end": "2341809"
  },
  {
    "start": "2333000",
    "end": "2653000"
  },
  {
    "text": "[NOISE] but it is a little bit of a long pseudo-code. So, all right.",
    "start": "2341810",
    "end": "2347480"
  },
  {
    "text": "So the algorithm we're gonna talk about right now is, is just backtracking search. It's not doing anything fancy.",
    "start": "2347480",
    "end": "2353224"
  },
  {
    "text": "We're gonna talk about fancier things next time. But, um, you have backtracking search.",
    "start": "2353225",
    "end": "2359645"
  },
  {
    "text": "It does the thing that you expect it to do. So it takes some partial assignment x,",
    "start": "2359645",
    "end": "2365630"
  },
  {
    "text": "it takes the weights that we have so far, and it takes the domains, domains of, of those variables that I have so far.",
    "start": "2365630",
    "end": "2374285"
  },
  {
    "text": "Okay. So if x is a complete assignment, if you have found a complete assignment, then we are going to update the best thing we have and we would return,",
    "start": "2374285",
    "end": "2381414"
  },
  {
    "text": "or we would do whatever you're supposed to do for the problem, right? Like we might have different types of problems here,",
    "start": "2381415",
    "end": "2386980"
  },
  {
    "text": "like maybe the question is find one assignment. If I find one complete assignment, I can, I can just return.",
    "start": "2386980",
    "end": "2392640"
  },
  {
    "text": "Maybe I'm looking for another question which, which tells me count all possible assignments that you can have.",
    "start": "2392640",
    "end": "2398300"
  },
  {
    "text": "So, so if I'm counting assignments then I'm just going to update my counter and try to find the next assignment.",
    "start": "2398300",
    "end": "2403325"
  },
  {
    "text": "So depending on what the question is I might want to do different things when I find my, my complete assignment.",
    "start": "2403325",
    "end": "2408740"
  },
  {
    "text": "But let's say I find my complete assignment, then I update and I'm happy. Okay. Then [NOISE] um,",
    "start": "2408740",
    "end": "2414875"
  },
  {
    "text": "I feel like then we're going to choose an unassigned variable, so I, I should have written this.",
    "start": "2414875",
    "end": "2420440"
  },
  {
    "text": "So if x is complete, then let's say we are happy.",
    "start": "2420440",
    "end": "2426920"
  },
  {
    "text": "Then we are gonna choose, um,",
    "start": "2426920",
    "end": "2432440"
  },
  {
    "text": "an unassigned variable, unassigned, so choose a variable, chosen an unassigned variable X_i.",
    "start": "2432440",
    "end": "2438815"
  },
  {
    "text": "And well, how do I do that? I'm gonna talk about a heuristic to do it.",
    "start": "2438815",
    "end": "2444049"
  },
  {
    "text": "Um, so, so we'll talk about that, but let's say I have some way of figuring out what is the next variable I'm picking.",
    "start": "2444050",
    "end": "2450170"
  },
  {
    "text": "And then after you pick the variable, you're gonna pick some value for it, right? The map coloring. You're gonna pick a province and you're gonna say red.",
    "start": "2450170",
    "end": "2457970"
  },
  {
    "text": "So how, how do you know it's red? Like how do you know the val- the next value you need to pick is red? Well, that comes from another heuristic, uh,",
    "start": "2457970",
    "end": "2465515"
  },
  {
    "text": "which says order, values, and domain.",
    "start": "2465515",
    "end": "2472039"
  },
  {
    "text": "So values would be red, blue, green. So those are my values, right? So ordered the values that are in domain I,",
    "start": "2472040",
    "end": "2480599"
  },
  {
    "text": "um, [NOISE] I've chosen X_i. So, so you picked up the next i,",
    "start": "2481240",
    "end": "2487115"
  },
  {
    "text": "maybe the only colors that you can use right now are red and blue. So, so then you are going to order red and",
    "start": "2487115",
    "end": "2492740"
  },
  {
    "text": "blue using some heuristic that I haven't talked about yet. But maybe some heuristic says, you should use red first and then you- you'd use red first,",
    "start": "2492740",
    "end": "2500900"
  },
  {
    "text": "you'd order it in that domain- in, in that order. And then for each of these values in this order,",
    "start": "2500900",
    "end": "2507095"
  },
  {
    "text": "so for each v in this order, that you've decided, you're gonna update your weight,",
    "start": "2507095",
    "end": "2515105"
  },
  {
    "text": "or you're gonna have this Delta weight value. And this Delta weight value is going to be product of your factors, okay?",
    "start": "2515105",
    "end": "2523820"
  },
  {
    "text": "[NOISE] And these factors are factors of your partial assignment whatever you've decided so far,",
    "start": "2523820",
    "end": "2529400"
  },
  {
    "text": "maybe you, you have assigned two colors for two territories already and you're looking at the third one. So it's going to be the partial assignment union whatever value you are",
    "start": "2529400",
    "end": "2538640"
  },
  {
    "text": "looking at for this new X_i that you're trying to pick, maybe a color for. Okay. And, and what are these f_j's that",
    "start": "2538640",
    "end": "2546200"
  },
  {
    "text": "you are looking at? Well, these f_j's are going to be the f_j's that are interdependent factors of the partial assignment and your variable,",
    "start": "2546200",
    "end": "2555109"
  },
  {
    "text": "that's why we defined dependent factors. Because these are the factors that we care about, these are- I'm not gonna look at Tasmania if I'm not looking at that part of the graph,",
    "start": "2555110",
    "end": "2563645"
  },
  {
    "text": "I'm just gonna look at the things that depend on my current partial assignment and my, my, my, er, my X_i.",
    "start": "2563645",
    "end": "2570590"
  },
  {
    "text": "Okay. If Delta is equal to 0 return, or continue, 0 continue.",
    "start": "2570590",
    "end": "2578420"
  },
  {
    "text": "So that means that this assignment you- continue, continue. Er, this means that this is a",
    "start": "2578420",
    "end": "2583970"
  },
  {
    "text": "particular value that you have picked just made everything 0, it didn't work. So, so you should try other things.",
    "start": "2583970",
    "end": "2590090"
  },
  {
    "text": "The other thing you're gonna do is if this value works is you're gonna update your domain,",
    "start": "2590090",
    "end": "2595820"
  },
  {
    "text": "so we're gonna talk about how to do that. That's the thing that's going to save you- save your time.",
    "start": "2595820",
    "end": "2601714"
  },
  {
    "text": "Because like you have now found out that you only need to care about colors red and blue, and you don't need to worry about green.",
    "start": "2601715",
    "end": "2607625"
  },
  {
    "text": "So, so that- that's updating the domain, making sure that you don't need to worry about all the colors. And then after that, you're just going to backtrack on this new thing.",
    "start": "2607625",
    "end": "2616070"
  },
  {
    "text": "Backtrack on this new thing. So on this new thing is X union you've picked value v for X_i.",
    "start": "2616070",
    "end": "2624440"
  },
  {
    "text": "So this is your new assignment you have extended your assignment by value v. Your weight is going to be whatever weight you started times Delta,",
    "start": "2624440",
    "end": "2632960"
  },
  {
    "text": "that's weight Delta, and then you've updated your domain, so you're just gonna use domain prime, okay?",
    "start": "2632960",
    "end": "2640309"
  },
  {
    "text": "Domain's prime. So this is domains of everyone's, like domains of, uh, all the other nodes.",
    "start": "2640310",
    "end": "2646535"
  },
  {
    "text": "All right. So, so we're gonna talk about this a little bit more. So- but this is the basic of, of the algorithm.",
    "start": "2646535",
    "end": "2653210"
  },
  {
    "start": "2653000",
    "end": "2793000"
  },
  {
    "text": "Okay. So gonna first talk a little bit about updating domain. So, so how do we update domain?",
    "start": "2653210",
    "end": "2658880"
  },
  {
    "text": "So, uh, one very simple way of updating domain is, is this thing that's called forward checking,",
    "start": "2658880",
    "end": "2665000"
  },
  {
    "text": "which says well, if you pick a color, so let's say that you pick W to be red,",
    "start": "2665000",
    "end": "2670555"
  },
  {
    "text": "then just look at the neighbors of WA and, and then see if you can update the domains of them.",
    "start": "2670555",
    "end": "2676365"
  },
  {
    "text": "So this is the simplest thing I can do, right? Like I've picked WA, I've decided WA is red.",
    "start": "2676365",
    "end": "2681425"
  },
  {
    "text": "So the thing that I'm gonna do is I'm just gonna look at the neighbors and the neighbors are NT and SA. They cannot be red,",
    "start": "2681425",
    "end": "2686780"
  },
  {
    "text": "so I'm gonna to just update their domains to be red- er, to be blue and green, I just drop red. Yeah. So, so that's like",
    "start": "2686780",
    "end": "2692650"
  },
  {
    "text": "the simplest thing while would do so maybe I'll write it in different color. So what option is this forward checking approach for updating domain.",
    "start": "2692650",
    "end": "2706565"
  },
  {
    "text": "Okay. So let's go further. So maybe now I'm at NT. I'm deciding NT to be green.",
    "start": "2706565",
    "end": "2713390"
  },
  {
    "text": "If I'm deciding NT to be green, I'm gonna look at neighbors of NT. So I'm gonna look at SA and Q,",
    "start": "2713390",
    "end": "2718730"
  },
  {
    "text": "they cannot be green anymore. So I'm gonna drop green. Okay. I'm, I'm gonna look at Q for whatever reason.",
    "start": "2718730",
    "end": "2726425"
  },
  {
    "text": "And Q, I'm going to pick blue for Q, because I want to pick blue for Q.",
    "start": "2726425",
    "end": "2731780"
  },
  {
    "text": "And, and then I'm gonna look at the neighbors, and my neighbor SA does not have anything in its domain.",
    "start": "2731780",
    "end": "2737900"
  },
  {
    "text": "So I realized that at this point, like this particular assignment is inconsistent. I don't need to worry about the rest of",
    "start": "2737900",
    "end": "2744350"
  },
  {
    "text": "the nodes and when what I'm picking for the rest of the nodes, it's kinda like equivalent to pruning, like I don't need to worry about anything else,",
    "start": "2744350",
    "end": "2749915"
  },
  {
    "text": "because I've just found out that this- this assignment does not work. Okay. So that's kinda the whole idea of updating the domain.",
    "start": "2749915",
    "end": "2756900"
  },
  {
    "text": "So, so forward checking is the idea of doing one step lookahead. So after assigning a variable X_i,",
    "start": "2757450",
    "end": "2764015"
  },
  {
    "text": "you wanna eliminate inconsistent values from domains of X_i's neighbors. So you want to reduce the,",
    "start": "2764015",
    "end": "2770195"
  },
  {
    "text": "the domains of X_i's neighbors, uh, and if any domain becomes empty, then, then you don't recurse on that.",
    "start": "2770195",
    "end": "2776105"
  },
  {
    "text": "And, and when you, you unassig- something to notice is, if you're unassigning X_i,",
    "start": "2776105",
    "end": "2781295"
  },
  {
    "text": "you have to restore the domains. So, so because you change the domains if you're unassigning, if you're deciding, uh,",
    "start": "2781295",
    "end": "2786710"
  },
  {
    "text": "green who was not the color to go then, then, then you got to- you got to update your domains, okay?",
    "start": "2786710",
    "end": "2792450"
  },
  {
    "text": "All right. So the other question was this heuristic.",
    "start": "2792490",
    "end": "2798695"
  },
  {
    "start": "2793000",
    "end": "2911000"
  },
  {
    "text": "All right, so this heuristic updating domain, one way to go about it is forward checking, just update the neighbors.",
    "start": "2798695",
    "end": "2804424"
  },
  {
    "text": "Another, um, place that, that we need to, uh, pick things wisely is choosing the unassigned variable.",
    "start": "2804425",
    "end": "2811130"
  },
  {
    "text": "So which one- which, which unassigned variable should I start off? So, so which variable to look next?",
    "start": "2811130",
    "end": "2816920"
  },
  {
    "text": "And, and again, one heuristic to, to look at here is to pick the variable that's the most constrained variable.",
    "start": "2816920",
    "end": "2824839"
  },
  {
    "text": "So, so choose the variable that has the fewest consistent values. So, so you are going to pick the one that's the most constrained variable.",
    "start": "2824840",
    "end": "2836480"
  },
  {
    "text": "Why do we wanna do this? Why would I pick the most constrained thing?",
    "start": "2836480",
    "end": "2842810"
  },
  {
    "text": "Probably because of less options. Yeah. So you're left with less options. And, and, and the idea is if I'm going to fail,",
    "start": "2842810",
    "end": "2848615"
  },
  {
    "text": "let me just fail early. Like if this is not gonna work, let me just find out that it's not gonna work early.",
    "start": "2848615",
    "end": "2854165"
  },
  {
    "text": "So, so that's the whole idea of it. And in this case, like if you are left with this option where we- where we choose red and green here,",
    "start": "2854165",
    "end": "2861665"
  },
  {
    "text": "and now we wanna pick what should I look at next? I should be looking at SA because that only has one value.",
    "start": "2861665",
    "end": "2867410"
  },
  {
    "text": "So if that's not going to work, well, nothing else is going to work, right? So, so we want to choose, choose, uh,",
    "start": "2867410",
    "end": "2872510"
  },
  {
    "text": "a variable that has the fewest consistent values. And again, the reason this works is,",
    "start": "2872510",
    "end": "2877940"
  },
  {
    "text": "is if we have some number of constraints in our factor graphs. So, so these are more general for factor graphs too.",
    "start": "2877940",
    "end": "2884165"
  },
  {
    "text": "Like everything I'm saying is not just about CSPs, it's about factor graphs. Um, and, and the reason this works is we have some constraints, right?",
    "start": "2884165",
    "end": "2891980"
  },
  {
    "text": "We ha- we have some, some of these factors are going to return a 0, because they are going to return a 0,",
    "start": "2891980",
    "end": "2897785"
  },
  {
    "text": "that is why I, I, I would like to follow a heuristic like this because that allows me to not look at everything.",
    "start": "2897785",
    "end": "2903589"
  },
  {
    "text": "So, so this, this heuristic only gives us benefit if we have some factors that are constraints.",
    "start": "2903590",
    "end": "2908735"
  },
  {
    "text": "Okay. All right. So, so that's one heuristic. The second question is, okay,",
    "start": "2908735",
    "end": "2914750"
  },
  {
    "start": "2911000",
    "end": "3178000"
  },
  {
    "text": "so now like using most constrained variable, I pick my variable, what value am I going to pick for it?",
    "start": "2914750",
    "end": "2921395"
  },
  {
    "text": "And, then for value, but it's interesting because for value you want to pick the least constrained value.",
    "start": "2921395",
    "end": "2928130"
  },
  {
    "text": "So- and, and the reason again is [NOISE] you pick the most constrained variable because you wanted,",
    "start": "2928130",
    "end": "2935315"
  },
  {
    "text": "you wanted to know if you're going to fail, you wanted to fail early. But now you've committed to that variable.",
    "start": "2935315",
    "end": "2940640"
  },
  {
    "text": "Like now you're going with that variable. So you might as well- you, you have to like assign a value for it. So you might as well pick the least constrained variable here,",
    "start": "2940640",
    "end": "2953390"
  },
  {
    "text": "to, to leave options for, for the other variables around you. So, so an example here is,",
    "start": "2953390",
    "end": "2959345"
  },
  {
    "text": "and, and how can you think about- so, so an example here is you're going to look at, um, [NOISE] this, this setting where,",
    "start": "2959345",
    "end": "2967039"
  },
  {
    "text": "what is it, you're picking Q, right? And, and you want to choose what color to,",
    "start": "2967040",
    "end": "2972980"
  },
  {
    "text": "to use, what value to use for Q, right? You can- you can color Q red. If you color Q red,",
    "start": "2972980",
    "end": "2979070"
  },
  {
    "text": "you're gonna do this forward checking, and if you're gonna do forward checking, you are going to update the domains.",
    "start": "2979070",
    "end": "2984454"
  },
  {
    "text": "And when you update the domains, you have two options here, two options here, two options here. So that could be a measure of consistency.",
    "start": "2984455",
    "end": "2990410"
  },
  {
    "text": "So you have six consistent values. If you decide to use blue for Q, what's gonna happen is you are going to update NT,",
    "start": "2990410",
    "end": "2997580"
  },
  {
    "text": "and, and that's going to have one value, SA is going to have one value, and SW is going to have two values.",
    "start": "2997580",
    "end": "3002590"
  },
  {
    "text": "So you have 1 plus 1 plus 2  pl- and that's equal to 4 consistent values. And, and you're gonna, you're gonna basically pick the one that,",
    "start": "3002590",
    "end": "3010359"
  },
  {
    "text": "that leaves the most options possible. So you're going to order the values, the colors values here refers to colors, of selected X_i by",
    "start": "3010360",
    "end": "3017619"
  },
  {
    "text": "decreasing number of consistent values of neighboring variables. [inaudible].",
    "start": "3017620",
    "end": "3026830"
  },
  {
    "text": "Yeah. Yeah. So it's the cardinality of the domain of neighbors. Yeah. And, and one other thing is like",
    "start": "3026830",
    "end": "3033160"
  },
  {
    "text": "these heuristics are only going to work if you are doing forward checking. If you're not updating our domains they're not going to give us any benefits.",
    "start": "3033160",
    "end": "3041710"
  },
  {
    "text": "Okay. And, uh, also another note about this particular heuristic,",
    "start": "3041710",
    "end": "3046839"
  },
  {
    "text": "uh, which is for ordering the values, the only like place that this is actually going to give us",
    "start": "3046840",
    "end": "3052030"
  },
  {
    "text": "some benefits is when you're working with CSPs when, when, when we actually have everything as constraints.",
    "start": "3052030",
    "end": "3057755"
  },
  {
    "text": "Because, because if we don't, we actually need to go through all the va- all the values and then figure out where the value of the factor is for, for them.",
    "start": "3057755",
    "end": "3064815"
  },
  {
    "text": "So, so, so this is only going to be beneficial when we have- when we have everything as, as, a constraint.",
    "start": "3064815",
    "end": "3072330"
  },
  {
    "text": "Just a question, so when we are doing all of this, we are not actually copying anything, right? Well, we're it's just, it's just one possible what if we find something without worrying about [inaudible]",
    "start": "3072330",
    "end": "3080500"
  },
  {
    "text": "[OVERLAPPING] So it is a recurrence. Other optimal, more optimal solutions. Uh, yeah. So, so depends on what we were doing, right?",
    "start": "3080500",
    "end": "3087210"
  },
  {
    "text": "So, so that's kind of this pa- this part. So, so the question is are we finding for the optimal solution, are we finding for S solution?",
    "start": "3087210",
    "end": "3092985"
  },
  {
    "text": "It depends on like- and that's kind of this line. If you find S solution and you're happy with that one solution you can just like return it here and be happy.",
    "start": "3092985",
    "end": "3100855"
  },
  {
    "text": "If you want to find the best solution and you need to like iterate this multiple times, then maybe you have like a counter here that still like keeps iterating.",
    "start": "3100855",
    "end": "3108280"
  },
  {
    "text": "Um, for CSPs you want to find S solution because, because, because we, we just want satisfy the constrain- constraints.",
    "start": "3108280",
    "end": "3114234"
  },
  {
    "text": "But if I have a factor graph I actually want to optimize my, my, my weight. All right.",
    "start": "3114235",
    "end": "3122680"
  },
  {
    "text": "Yeah. So, so yeah. So the, so the idea of this most constrained variable is we must assign every variable.",
    "start": "3122680",
    "end": "3128950"
  },
  {
    "text": "So if you're going to fail, let's just fail early, it's kind of similar to pruning. And the idea of, uh, what order we are picking for,",
    "start": "3128950",
    "end": "3135460"
  },
  {
    "text": "for values is we are going to pick values for the least constrained value. Uh, so and, and kind of the reasoning behind that is you've got to choose some value.",
    "start": "3135460",
    "end": "3144055"
  },
  {
    "text": "Like, like we have to choose values for all of these things. So, so choosing, uh, so, so choose a value that's the most likely to lead a solution for everything.",
    "start": "3144055",
    "end": "3152890"
  },
  {
    "text": "Okay. And this is what we just actually said. Okay. So, so going back to this, this algorithm,",
    "start": "3152890",
    "end": "3160570"
  },
  {
    "text": "now we have a heuristic to, to follow for all these three different red lines.",
    "start": "3160570",
    "end": "3165970"
  },
  {
    "text": "And, in doing so we're just doing backtracking, and then we can update this and,",
    "start": "3165970",
    "end": "3171549"
  },
  {
    "text": "and just go through it, and it does- it does find a solution. Okay. All right.",
    "start": "3171550",
    "end": "3179050"
  },
  {
    "start": "3178000",
    "end": "3424000"
  },
  {
    "text": "So, um, so now I want to spend a little bit of time talking about arc consistency.",
    "start": "3179050",
    "end": "3185380"
  },
  {
    "text": "So what arc consistency is, is it's just a fancier way of doing forward checking.",
    "start": "3185380",
    "end": "3191320"
  },
  {
    "text": "So, so we talked about a heuristic for this one, a heuristic for this one, the only algorithm we are talking about today is this,",
    "start": "3191320",
    "end": "3196720"
  },
  {
    "text": "that's, that's the only thing. And, uh, we said, well, in this algorithm we gotta update the domain, the way we have been updating the domain is just looking at",
    "start": "3196720",
    "end": "3204190"
  },
  {
    "text": "the neighbors and trying to update the domain using forward checking. So another idea is to do something slightly better which is called arc consistency.",
    "start": "3204190",
    "end": "3216565"
  },
  {
    "text": "And arc consistency doesn't just look at the neighbors, it goes through the whole, the whole, uh,",
    "start": "3216565",
    "end": "3223420"
  },
  {
    "text": "the whole CSP, and tries to update, uh, the domains of even like further nodes ahead of us.",
    "start": "3223420",
    "end": "3229734"
  },
  {
    "text": "So it doesn't just look at the neighbors. So, so that- that's what this whole section is going to be about, how to do arc consistency.",
    "start": "3229735",
    "end": "3235675"
  },
  {
    "text": "Okay. All right. So, so the idea of arc consistency is let's eliminate the values from domain.",
    "start": "3235675",
    "end": "3243820"
  },
  {
    "text": "So, so I have this, this giant domain, I don't want to go over all those, uh, values. Uh, I have a for loop here for all the values.",
    "start": "3243820",
    "end": "3250810"
  },
  {
    "text": "If I can update my domain, I have less things to iterate over that's going to be much better. So let's just try to reduce branching.",
    "start": "3250810",
    "end": "3257740"
  },
  {
    "text": "Okay. So, so here is an example. So let's say that I have X_i and X_i lives in- so I'm looking at X_i and X_j,",
    "start": "3257740",
    "end": "3267895"
  },
  {
    "text": "and X_i takes val- the, the domain of X_i is 1, 2, 3, 4, and 5, and then the domain of X_j is 1 and 2.",
    "start": "3267895",
    "end": "3277585"
  },
  {
    "text": "Okay. So now what I wanna do is, um, I had a constraint, the constraint is X_i plus X_j is equal to 4.",
    "start": "3277585",
    "end": "3286734"
  },
  {
    "text": "So if this is my current domain of X_i, I don't really need to worry about all these values in X_i because the constraint tells me,",
    "start": "3286735",
    "end": "3294640"
  },
  {
    "text": "well, 5 never works because X_i plus X_j has to be 4, so that's not going to work.",
    "start": "3294640",
    "end": "3300220"
  },
  {
    "text": "This one is not going to work. The only way for things to work is to have 3 plus 1,",
    "start": "3300220",
    "end": "3305395"
  },
  {
    "text": "and 2 plus 2, and that's it, right? So, so the only variables that I actually need to worry about for domains of X_i is,",
    "start": "3305395",
    "end": "3313720"
  },
  {
    "text": "is 2 and 3, not 1, 2, 3, 4. So, so what I wanna do is I wanna take the domain 1, 2, 3,",
    "start": "3313720",
    "end": "3319569"
  },
  {
    "text": "4, and 5, and reduce that to just looking at 2 and 3. Because those are the only values that I should actually care about.",
    "start": "3319570",
    "end": "3327710"
  },
  {
    "text": "And this const- yeah, because this constraint is kinda enforcing that.",
    "start": "3327710",
    "end": "3333070"
  },
  {
    "text": "Okay. So and enforcing+ our consistency basically tries to get to the, this smaller domain.",
    "start": "3333290",
    "end": "3341795"
  },
  {
    "text": "Okay. So, um, all right. So a variable X_i so let's actually formally define this.",
    "start": "3341795",
    "end": "3347500"
  },
  {
    "text": "A variable X_i's are consistent with some variable X_j. If each, each, uh,",
    "start": "3347500",
    "end": "3353890"
  },
  {
    "text": "value X_i in the domain of- for each value X_i in the domain of X_i there exists some X_j the domain of X_j.",
    "start": "3353890",
    "end": "3361645"
  },
  {
    "text": "So, so the factor is equal to- is not equal to 0. So basically it's ensuring that everything is going to be consistent.",
    "start": "3361645",
    "end": "3368680"
  },
  {
    "text": "So, so if you have inconsistencies, remove things from the domain of X_i.",
    "start": "3368680",
    "end": "3373750"
  },
  {
    "text": "So our consistency ensures that if there are any sort of inconsistencies between two variables X_i and X_j's,",
    "start": "3373750",
    "end": "3380305"
  },
  {
    "text": "it's let's say it starts from X_i, and it tries to remove for- from the domains of X_i, uh, to, to make sure that all factors are not equal to 0.",
    "start": "3380305",
    "end": "3388540"
  },
  {
    "text": "[inaudible]. So we start from 1 and- so we pick x_1,",
    "start": "3388540",
    "end": "3395140"
  },
  {
    "text": "and I will try all, all these other variables, xj's and values of them, and then we keep, like, iterating.",
    "start": "3395140",
    "end": "3400450"
  },
  {
    "text": "We do iterating over all of them, but we gotta like pick one, and update the domains of that. Okay. Yeah, so, so what we're",
    "start": "3400450",
    "end": "3408609"
  },
  {
    "text": "gonna do is we're gonna just write up the function, enforcing our consistency. And it's gonna remove values from domain of i to mix- it",
    "start": "3408610",
    "end": "3415089"
  },
  {
    "text": "make xi consistent with respect to some other xj. Okay. So, so the only thing I'm touching is domain of xi.",
    "start": "3415090",
    "end": "3423280"
  },
  {
    "text": "All right. So, so let's actually, like, go over an example of how this works. And then we're going to look at the pseudocode for it.",
    "start": "3423280",
    "end": "3430450"
  },
  {
    "start": "3424000",
    "end": "3600000"
  },
  {
    "text": "So here's our example. I'm gonna start from WA. I'm gonna pick red for it.",
    "start": "3430450",
    "end": "3436509"
  },
  {
    "text": "Okay. So that's my current domain for WA, is red. If I was doing forward checking, what would I do?",
    "start": "3436510",
    "end": "3443875"
  },
  {
    "text": "I would just look at NT and SA. I would update the domains of NT and SA.",
    "start": "3443875",
    "end": "3449695"
  },
  {
    "text": "So now what I'm gonna do is I've realized that NT and SA their domains are changed.",
    "start": "3449695",
    "end": "3455155"
  },
  {
    "text": "So I'm gonna push them to the, to the same- to the same list of things I have, and I'm gonna look at each of them and see the neighbors of them too.",
    "start": "3455155",
    "end": "3463360"
  },
  {
    "text": "So the arcs that come from them. So I'm going to look at NT. Um, well, that is right here. Actually, it's too soon.",
    "start": "3463360",
    "end": "3470680"
  },
  {
    "text": "So, so e- everything looks consistent there. Everything is great. I can't update anything more.",
    "start": "3470680",
    "end": "3475855"
  },
  {
    "text": "I'm going to pick NT now. Let's say I decide NT is green. So NT is green, I'm gonna look at neighbors of NT.",
    "start": "3475855",
    "end": "3482619"
  },
  {
    "text": "So neighbors of NT are WA. WA is red. Everything is great. SA has a green.",
    "start": "3482620",
    "end": "3488800"
  },
  {
    "text": "I need to get rid of that green because it can't be green anymore. Q has a green, I need to get rid of that. So let's update that.",
    "start": "3488800",
    "end": "3495490"
  },
  {
    "text": "So Q and SA, their domains are touched, right, their domains have changed. So I actually need to look at them,",
    "start": "3495490",
    "end": "3502089"
  },
  {
    "text": "and then see how the domains of their neighbors are going to be affected. For example, I can look at SA,",
    "start": "3502090",
    "end": "3507713"
  },
  {
    "text": "and I can see well, SA is, is blue. The only way for SA to be consistent with",
    "start": "3507714",
    "end": "3512875"
  },
  {
    "text": "the rest of these guys is that they don't have a blue in them. So I'm gonna remove blue from Q and SW and V. Because,",
    "start": "3512875",
    "end": "3521049"
  },
  {
    "text": "because they cannot have blue for these two to be consistent. Again, if SA here is kinda of my xi.",
    "start": "3521050",
    "end": "3527755"
  },
  {
    "text": "So I'm, um, sorry. It's actually my xj. So I am gonna pick xiQ here,",
    "start": "3527755",
    "end": "3533980"
  },
  {
    "text": "and I'm gonna update the domain of xi, so it becomes consistent with SA. Right? So I'm gonna like pick- change the domain of Q, get rid of blue.",
    "start": "3533980",
    "end": "3542910"
  },
  {
    "text": "I'm gonna change the domain of NSW, get rid of blue. I'm gonna change the domain of V, get rid of blue. Okay. So what has updated? Q is updated,",
    "start": "3542910",
    "end": "3551250"
  },
  {
    "text": "NSW is updated, V is updated. They're gonna go to- go back, and I'm gonna go through them again and see if,",
    "start": "3551250",
    "end": "3556780"
  },
  {
    "text": "if their neighbors need to be updated. Okay. So going back to, to, to Q, Q is red.",
    "start": "3556780",
    "end": "3563380"
  },
  {
    "text": "NSW's domain needs to be updated to be consistent with Q. So I'm gonna remove red.",
    "start": "3563380",
    "end": "3570130"
  },
  {
    "text": "NSW's domain is touched. So, so now I gotta go back to V. V is going to become red,",
    "start": "3570130",
    "end": "3576640"
  },
  {
    "text": "and then T can take any value that it wants. So if I do like this full, like enforcing our consistency here,",
    "start": "3576640",
    "end": "3583900"
  },
  {
    "text": "I'm gonna end up with, with something that looks like here. So all my domains are kind of pruned, and I have, I just like have a solution, right.",
    "start": "3583900",
    "end": "3590410"
  },
  {
    "text": "Like I don't need to actually iterate over any values. And this is just done by, by updating the domains.",
    "start": "3590410",
    "end": "3596155"
  },
  {
    "text": "And then doing this arc consistency approach, rather than doing backtracking search. So, so all of that is done in this step.",
    "start": "3596155",
    "end": "3602559"
  },
  {
    "text": "Okay. All right. Yes? [inaudible] solution, go back and make NT blue as well.",
    "start": "3602560",
    "end": "3611230"
  },
  {
    "text": "Uh, so, so if you wanna, if you wanna actually- so, so this whole, like, pruning is only, like, useful, right,",
    "start": "3611230",
    "end": "3617740"
  },
  {
    "text": "if you want to find best- like a solution in a CSP, but if you have a factor graph and you actually- if you have a factor graph,",
    "start": "3617740",
    "end": "3623740"
  },
  {
    "text": "you need to actually try out all these values to see what is the value you're gonna get for each, each one of the colors.",
    "start": "3623740",
    "end": "3628975"
  },
  {
    "text": "If we did forward checking instead, we actually would have arrived at the same conclusion here, right?",
    "start": "3628975",
    "end": "3634060"
  },
  {
    "text": "It would have just have taken more steps like filling more of these different- If we were doing forward checking,",
    "start": "3634060",
    "end": "3639220"
  },
  {
    "text": "we had to do the, like, we actually had to do the algorithm. Like, like we wouldn't get to this, like,",
    "start": "3639220",
    "end": "3644769"
  },
  {
    "text": "we would get to this much later because if, because if you are doing forward checking, we would just look at the immediate neighbors,",
    "start": "3644770",
    "end": "3649900"
  },
  {
    "text": "we'd update the domains, and then we'd go to the next, like, nodes in the neighbor- neighbors and do backtracking search again.",
    "start": "3649900",
    "end": "3655405"
  },
  {
    "text": "Here, like, I'm not- I haven't, like, called back-, like, I'm here. I've updated by domain. And I'm with that scenario,",
    "start": "3655405",
    "end": "3661809"
  },
  {
    "text": "and I haven't called backtracking search yet. All right. So yeah,",
    "start": "3661810",
    "end": "3668380"
  },
  {
    "text": "so forward checking is kind of a simpler version where we're assigning xj to be equal to xj,",
    "start": "3668380",
    "end": "3674440"
  },
  {
    "text": "and, um, and you're enforcing arc consistency on all the neighbors of xi with respect to xj.",
    "start": "3674440",
    "end": "3682164"
  },
  {
    "text": "Arc consistency, what it does is it repeatedly- well, there- there are different algorithms that try to do arc consistency.",
    "start": "3682165",
    "end": "3688480"
  },
  {
    "text": "The particular algorithm we were talking about in this class is called AC-3. It's just the most useful- like,",
    "start": "3688480",
    "end": "3694870"
  },
  {
    "text": "the most, um, common way of doing arc consistency. And what it does is it repeatedly enforces arc consistency on all the variables.",
    "start": "3694870",
    "end": "3703270"
  },
  {
    "text": "So, so it goes over everything pretty much. So, so what it does is you're gonna add xj to your set.",
    "start": "3703270",
    "end": "3709170"
  },
  {
    "text": "Then while set is not empty, you're gonna remove an xk from, from that set. And for all neighbors,",
    "start": "3709170",
    "end": "3715790"
  },
  {
    "text": "let's call them xl of, of this this xk that you have picked. For all the neighbors, what you're gonna do is you're gonna call enforce",
    "start": "3715790",
    "end": "3722484"
  },
  {
    "text": "arc consistency on xl with respect to x here- xk. Okay. And then if your domain is changed,",
    "start": "3722485",
    "end": "3728860"
  },
  {
    "text": "if don- you change the domain of domain of l, then you're gonna add that back in. And that's kinda what we're doing in this previous example,",
    "start": "3728860",
    "end": "3735010"
  },
  {
    "text": "like, we, we kept adding the nodes back in. So, um, yeah, so in terms of complexity,",
    "start": "3735010",
    "end": "3743200"
  },
  {
    "text": "um, of this algorithm or worst-case scenario, it's going to be order of e times d cubed,",
    "start": "3743200",
    "end": "3750100"
  },
  {
    "text": "where e is the number of edges and d let's say is the number- maximum number of values that you can have.",
    "start": "3750100",
    "end": "3755515"
  },
  {
    "text": "So, so, so the reason it is that is, when you're enforcing arc consistency,",
    "start": "3755515",
    "end": "3760525"
  },
  {
    "text": "this line takes order of d squared. Let's say you have d values. For each of them you have d values,",
    "start": "3760525",
    "end": "3765820"
  },
  {
    "text": "you need to co- consider all that combi- all those combinations. That's d squared. You are, are doing- going over all the edges,",
    "start": "3765820",
    "end": "3772645"
  },
  {
    "text": "right, so, so you have all the edges. So that's ed squared. And another thing to notice is,",
    "start": "3772645",
    "end": "3778029"
  },
  {
    "text": "you're sometimes adding these things back in the set. Well, why are we adding them? Because their domains can be changed.",
    "start": "3778030",
    "end": "3784450"
  },
  {
    "text": "Their domains can be changed at most d times. So that's that extra d. So, so that's order of ed cubed.",
    "start": "3784450",
    "end": "3791185"
  },
  {
    "text": "If you're interested in it, you can look at the notes for it. That's worst-case scenario. In general, it doesn't take that long.",
    "start": "3791185",
    "end": "3797725"
  },
  {
    "text": "In general, like, I'm not gonna keep, like, adding the same value, like, a million times, like, back in.",
    "start": "3797725",
    "end": "3803109"
  },
  {
    "text": "Or the same xl back in my set. Um, in general it's much faster.",
    "start": "3803110",
    "end": "3808555"
  },
  {
    "text": "In practice, it's much, much less. Okay. All right. So, so again, it's a heuristic.",
    "start": "3808555",
    "end": "3813700"
  },
  {
    "text": "It's not the best thing in the world. Like, if- I, like, ideally, you would have wanted AC-3 to not",
    "start": "3813700",
    "end": "3819670"
  },
  {
    "text": "return a solution if there doesn't exist a solution. But, but here, for example AC-3 is not being very effective.",
    "start": "3819670",
    "end": "3826015"
  },
  {
    "text": "Here's an example. Right. So you have these three nodes, and let's say you are left with these domains. So blue and red.",
    "start": "3826015",
    "end": "3832150"
  },
  {
    "text": "If you're enforcing arc consistency, the domains are not gonna change. These domains are very consistent with each other.",
    "start": "3832150",
    "end": "3838405"
  },
  {
    "text": "But, but there is no solution that actually, uh, you can find here, right?",
    "start": "3838405",
    "end": "3843970"
  },
  {
    "text": "Because if you choose blue and red here, you don't really have an option for the third one. So arc consistency is actually not going to,",
    "start": "3843970",
    "end": "3850165"
  },
  {
    "text": "uh, be able to figure out that this, this doesn't work. And there are more complicated versions of arc consistency that consider,",
    "start": "3850165",
    "end": "3857950"
  },
  {
    "text": "um, uh, that, that go beyond these binary relationships, uh, but they are,",
    "start": "3857950",
    "end": "3863290"
  },
  {
    "text": "they're going to take exponential time. So, so our consistency is simple. You run it, it's usually useful,",
    "start": "3863290",
    "end": "3869320"
  },
  {
    "text": "but it's not gonna find everything for you. Okay, okay.",
    "start": "3869320",
    "end": "3876220"
  },
  {
    "text": "Yeah, so and I'm kind of the whole intuition of arc consistency is we are looking at this graph in a local manner.",
    "start": "3876220",
    "end": "3881859"
  },
  {
    "text": "And locally we're trying to like update our domains to be more efficient, but it's- it's not,",
    "start": "3881860",
    "end": "3887545"
  },
  {
    "text": "it's not gonna give us a global answer. Of course, it's not gonna give us a global answer. Because if you want it to have a global answer,",
    "start": "3887545",
    "end": "3892930"
  },
  {
    "text": "we had to reconsider the relationships of all arc- all arc constraints with respect to each other. Uh, but it's, it's basically making sure that locally at least everything looks good.",
    "start": "3892930",
    "end": "3903619"
  },
  {
    "text": "How do you figure out when you should or shouldn't use AC-3? When you should- so in general you can use- so I would- in,",
    "start": "3904050",
    "end": "3911020"
  },
  {
    "text": "in general I would say use AC-3 because it's going to prune things usually. Um, if, if you have a lot of dependencies between, like,",
    "start": "3911020",
    "end": "3918580"
  },
  {
    "text": "if you ha- if you have like the circular type of dependencies, it's not gonna figure everything out but it's usually just going to be useful.",
    "start": "3918580",
    "end": "3924520"
  },
  {
    "text": "So, so running it in practice, it doesn't take that long. Running it is usually going to prune part- part of your domain.",
    "start": "3924520",
    "end": "3931270"
  },
  {
    "text": "So I do recommend using it, but it's not gonna figure out everything because you have- you have connected. Like everything is connect- everything is connected with everything.",
    "start": "3931270",
    "end": "3938110"
  },
  {
    "text": "Then you have dependencies between all your variables. All right, okay.",
    "start": "3938110",
    "end": "3945415"
  },
  {
    "text": "So, so summary so far is, uh, well, we've been talking about backtracking search on partial assignments,",
    "start": "3945415",
    "end": "3951730"
  },
  {
    "text": "we talked about dynamic ordering, so how to order our variables and how to order our values. We decided to order our variables based on the most",
    "start": "3951730",
    "end": "3959080"
  },
  {
    "text": "constrained variable because if you're failing, you wanna fail early. And we decided to order our values, like,",
    "start": "3959080",
    "end": "3964720"
  },
  {
    "text": "if I'm picking red, blue, or green, uh, based on the least constrained value because if you're- if you've,",
    "start": "3964720",
    "end": "3970660"
  },
  {
    "text": "if you've decided to pick a value, you should try to succeed. So, so that's kind of the intuition behind it. And, and look ahead is useful,",
    "start": "3970660",
    "end": "3977310"
  },
  {
    "text": "forward checking is, uh, one way of doing it. So it enforces arc consistency only on neighbors,",
    "start": "3977310",
    "end": "3982680"
  },
  {
    "text": "our consis- cons- consistent AC-3 enforces arc consistency, on neighbors and their neighbors and just goes over all the arcs that,",
    "start": "3982680",
    "end": "3990580"
  },
  {
    "text": "that we have in the- in the graph, okay? All right. So that was kind of the set of algorithms I wanted to talk about,",
    "start": "3990580",
    "end": "3997870"
  },
  {
    "text": "but next time we're going to talk about more, more inference and learning type, types- type of algorithms for CSP.",
    "start": "3997870",
    "end": "4004410"
  },
  {
    "text": "So now what I wanna do is, I wanna spend a little bit of time talking about modeling. So, uh, we've talked about two examples now, right?",
    "start": "4004410",
    "end": "4011865"
  },
  {
    "text": "The, the map, the map coloring. And this one is also, like, picking colors. These, these are the examples we have talked about so far.",
    "start": "4011865",
    "end": "4018780"
  },
  {
    "text": "So, so let's look at another example. So, so let's say that we have three sculptures, A, B,",
    "start": "4018780",
    "end": "4024000"
  },
  {
    "text": "and C and they're gonna be exhibited in a museum or in an art gallery and, and I have room 1 and 2.",
    "start": "4024000",
    "end": "4030240"
  },
  {
    "text": "So they can be either in room 1 or, er, room 2. And I'm going to have a set of constraints, so maybe my constraints are;",
    "start": "4030240",
    "end": "4036660"
  },
  {
    "text": "sculpture A and B cannot be in the same room, sculpture B and C must be in the same room,",
    "start": "4036660",
    "end": "4043319"
  },
  {
    "text": "and room 2 can only hold one sculpture, okay? So, so these are my constraints.",
    "start": "4043320",
    "end": "4049350"
  },
  {
    "text": "How would I go about this? Well, I need to write a bunch of factors. I need to write- I need to actually model this.",
    "start": "4049350",
    "end": "4054900"
  },
  {
    "text": "So, so let's try to do this. [NOISE] So this was my domain.",
    "start": "4054900",
    "end": "4061590"
  },
  {
    "text": "So I have three sculptures. So I am gonna find variable A, right? So that's sculpture A,",
    "start": "4061590",
    "end": "4067665"
  },
  {
    "text": "it can be in room 1 or 2, okay? Then I have three sculptures,",
    "start": "4067665",
    "end": "4073410"
  },
  {
    "text": "so I'm gonna have variable B and variable C. Each one of them can be in room 1 or 2, okay?",
    "start": "4073410",
    "end": "4082230"
  },
  {
    "text": "So now I gotta define factors, right? I had all these constraints. One of the constraints was A and B cannot be in the same room,",
    "start": "4082230",
    "end": "4089235"
  },
  {
    "text": "so, so that's a factor, okay? Let's call that f1. It's going to depend on A and B, right?",
    "start": "4089235",
    "end": "4097589"
  },
  {
    "text": "It, it cannot- A and B cannot be in the same room. Er, what is that factor?",
    "start": "4097590",
    "end": "4102750"
  },
  {
    "text": "It's a function, right? Over A and B. And that function is going to return something. What should it return?",
    "start": "4102750",
    "end": "4113685"
  },
  {
    "text": "It should return A not being equal to B, okay? So, so that's one factor. What else do I need?",
    "start": "4113685",
    "end": "4121720"
  },
  {
    "text": "Let's just make sure that everything is okay here. So, so far what I've done is I've defined A,",
    "start": "4122570",
    "end": "4128370"
  },
  {
    "text": "B and C. They can take values 1 and 2. I've defined one factor that connects A and B. I'm gonna define another factor",
    "start": "4128370",
    "end": "4137609"
  },
  {
    "text": "f2 that's going to connect B and C. And I really want a sculpture B and C to be in the same room.",
    "start": "4137610",
    "end": "4145620"
  },
  {
    "text": "So these are local variables but let's just be consistent. So what I want is B and C to be equal to each other, okay?",
    "start": "4145620",
    "end": "4152279"
  },
  {
    "text": "So to be in the same room. So that's factors f2 that's just created here.",
    "start": "4152280",
    "end": "4157619"
  },
  {
    "text": "And what was the last thing I wanted? Each room, one?",
    "start": "4157620",
    "end": "4163350"
  },
  {
    "text": "Yeah. So every room gets, uh, one, right? Was it every room or was it- actually I don't remember.",
    "start": "4163350",
    "end": "4170345"
  },
  {
    "text": "Second room. [OVERLAPPING] Second room. Okay. Second room only gets, um, only gets one. So that's a factor that depends of- on all three of them, right?",
    "start": "4170345",
    "end": "4177950"
  },
  {
    "text": "It depends on A, B, and C. And one way to enforce that is- what I am gonna say is,",
    "start": "4177950",
    "end": "4184440"
  },
  {
    "text": "well, if A is in 2 or if B is in 2,",
    "start": "4184440",
    "end": "4190424"
  },
  {
    "text": "or if C is in 2, right? So I'm gonna- I'm gonna write indicator functions if A is in 2,",
    "start": "4190425",
    "end": "4196170"
  },
  {
    "text": "B is in 2, C is in 2. And if I add those up, well, that should be what? That should be less than or equal to 1, right?",
    "start": "4196170",
    "end": "4204195"
  },
  {
    "text": "Because I don't want there to be more than one of them in, in a- in one room, okay?",
    "start": "4204195",
    "end": "4209525"
  },
  {
    "text": "And this is enforcing that. So okay, I have this third factor.",
    "start": "4209525",
    "end": "4214550"
  },
  {
    "text": "This third factor is not a binary factor anymore, right? It depends on all three of them. And then if I step, then,",
    "start": "4214550",
    "end": "4220965"
  },
  {
    "text": "we're going to talk about these algorithms next time. But, um, here is the assignment that, that you're gonna find.",
    "start": "4220965",
    "end": "4226680"
  },
  {
    "text": "So we're gonna find that, uh, sculpture A is going to be in room 2,",
    "start": "4226680",
    "end": "4231825"
  },
  {
    "text": "B is going to be in room 1, C is going to be in room 1 and, and, and that satisfies all the factors that we just like wrote, okay?",
    "start": "4231825",
    "end": "4238530"
  },
  {
    "text": "So if you're interested in writing up more models, use this environment, it would be cool.",
    "start": "4238530",
    "end": "4246614"
  },
  {
    "text": "So, so that was another example of, of CSPs. So now I want to talk about one more example,",
    "start": "4246615",
    "end": "4252929"
  },
  {
    "text": "so, uh, I think two more examples. Uh, okay. So this is an event scheduling example.",
    "start": "4252930",
    "end": "4260534"
  },
  {
    "text": "So, so the event scheduling example is, I have E events.",
    "start": "4260535",
    "end": "4266594"
  },
  {
    "text": "Let's say these are classes or yeah, different courses that you're taking. And then you have T times slots.",
    "start": "4266595",
    "end": "4273255"
  },
  {
    "text": "So you have E events and T time slots, okay?",
    "start": "4273255",
    "end": "4281850"
  },
  {
    "text": "And you wanna schedule- you wanna schedule a time slot for an event that- that's what your plan is.",
    "start": "4281850",
    "end": "4287640"
  },
  {
    "text": "So it's a scheduling problem. And you have one of two constraints. So the first constraint is, each event must be put in exactly one time slot.",
    "start": "4287640",
    "end": "4294735"
  },
  {
    "text": "So each event in exactly one time slot.",
    "start": "4294735",
    "end": "4301485"
  },
  {
    "text": "One time slot T. So that's one constraint.",
    "start": "4301485",
    "end": "4306554"
  },
  {
    "text": "Another constraint that you wanna have is, maybe we want each time slot T to hold at most one event because we don't want them to overlap.",
    "start": "4306555",
    "end": "4314520"
  },
  {
    "text": "So each time slot T you want that,",
    "start": "4314520",
    "end": "4322410"
  },
  {
    "text": "uh, it can have at most, uh At most, uh, one event,",
    "start": "4322410",
    "end": "4330920"
  },
  {
    "text": "at most one event. So this is another constraint, at most one event.",
    "start": "4330920",
    "end": "4337130"
  },
  {
    "text": "And then maybe I have a set maybe, maybe event E is allowed in time slots T only if",
    "start": "4337130",
    "end": "4344540"
  },
  {
    "text": "event E and time slot T are in some set that someone gave me some A set. So, so I have another constraint that ensures that some E,",
    "start": "4344540",
    "end": "4353000"
  },
  {
    "text": "with its time slot, is in some predefined fixed set that someone gave me.",
    "start": "4353000",
    "end": "4358160"
  },
  {
    "text": "Okay. So, so these are some of the constraints that I have. And what I wanna do is I want to, I want to formulate this problem as a CSP.",
    "start": "4358160",
    "end": "4364610"
  },
  {
    "text": "So, so how would I go about it? What should be my variables?",
    "start": "4364610",
    "end": "4371510"
  },
  {
    "text": "What should be my variables?",
    "start": "4371510",
    "end": "4376699"
  },
  {
    "text": "[NOISE] Events? Events. [NOISE] So we're gonna go with events. Okay. So let's say that- so we can actually have multiple formulations for this.",
    "start": "4376700",
    "end": "4384290"
  },
  {
    "text": "So one formulation, maybe the most natural formulation here is to say that my variables are going to be events.",
    "start": "4384290",
    "end": "4390980"
  },
  {
    "text": "So those are going to be my X_es here. And every event can take a time slot,",
    "start": "4390980",
    "end": "4396080"
  },
  {
    "text": "so the value that it's going to get is 1 through T where T is the time- we have T different time slots, okay.",
    "start": "4396080",
    "end": "4402905"
  },
  {
    "text": "So then if I, if I start with this, if I start with a setting where I'm saying every event is a variable,",
    "start": "4402905",
    "end": "4409309"
  },
  {
    "text": "then I kind of get this first constraint for free. So each event E is, is in exactly one time slot because I have my variables E,",
    "start": "4409310",
    "end": "4418745"
  },
  {
    "text": "they're not gonna get multiple values assigned to them, they're gonna get one assignment. So if they get one assignment,",
    "start": "4418745",
    "end": "4424100"
  },
  {
    "text": "I kind of already get this one for free. The second constraint is this constraint which makes sure",
    "start": "4424100",
    "end": "4430130"
  },
  {
    "text": "that each time slot can have at most one event. So to ensure that, then I need to make sure that X_e is not equal to any some other X_e prime, right?",
    "start": "4430130",
    "end": "4440179"
  },
  {
    "text": "Because, because X_e is my variable, my event variable, it's gonna get a time, time slot value,",
    "start": "4440180",
    "end": "4445864"
  },
  {
    "text": "the two time slot values for two different events should not be equal to each other. So the constraint that I have is X_e is not equal to X_e prime, X_e prime.",
    "start": "4445865",
    "end": "4454804"
  },
  {
    "text": "Okay. And how many of these do I have? Well, I have like order of e squared of them,",
    "start": "4454805",
    "end": "4461150"
  },
  {
    "text": "right, because I have- let's say I have e events, so I have- so then I have e times",
    "start": "4461150",
    "end": "4466295"
  },
  {
    "text": "e options here to make sure that they're not equal, equal to each other. So I have e squared, uh,",
    "start": "4466295",
    "end": "4472160"
  },
  {
    "text": "binary, uh, factors, okay. So, um, and then I have another constraint which tries to ensure that these,",
    "start": "4472160",
    "end": "4481325"
  },
  {
    "text": "these events and their time slots which is the X_e value is going to be in some set A.",
    "start": "4481325",
    "end": "4487430"
  },
  {
    "text": "You can kind of treat this as a unary factor, so you have some number of unary factors, you have e unary factors here.",
    "start": "4487430",
    "end": "4493550"
  },
  {
    "text": "Okay. So, uh, and, and the, the, the number of variables that you have is,",
    "start": "4493550",
    "end": "4498575"
  },
  {
    "text": "uh- the number of variables you have is e but their domain is size T. So, so it's, it's good to think about this.",
    "start": "4498575",
    "end": "4504920"
  },
  {
    "text": "Because if you have multiple choices, so I'm gonna talk about the second choice in a second. But if you have multiple choices for modeling this- it's",
    "start": "4504920",
    "end": "4511640"
  },
  {
    "text": "a good idea to think about what type of factors do you have. How many of them do you have? So here are like the worst-case scenarios.",
    "start": "4511640",
    "end": "4517670"
  },
  {
    "text": "I have e squared binary factors. Okay. So I have another option, right?",
    "start": "4517670",
    "end": "4523385"
  },
  {
    "text": "So in this option what I did was I took, um, the events as my variable. The second way to formulate this is to say,",
    "start": "4523385",
    "end": "4531320"
  },
  {
    "text": "well, maybe my variables are just the time slots. So, so maybe I'm gonna go a different, different approach, take a different approach for modeling this.",
    "start": "4531320",
    "end": "4538580"
  },
  {
    "text": "I'm going to call it Y_t, Y_t are the time slots. So I have variables for time slots.",
    "start": "4538580",
    "end": "4543710"
  },
  {
    "text": "Each one of them can either take an event or maybe there's no event added, that's empty, empty value.",
    "start": "4543710",
    "end": "4549454"
  },
  {
    "text": "So, so they either take an event or no event. And if I model this, this problem using,",
    "start": "4549455",
    "end": "4555079"
  },
  {
    "text": "using the second approach, then I get the second, the second one, the second constraint for free because my variables are again time slots,",
    "start": "4555080",
    "end": "4562655"
  },
  {
    "text": "so I can, I can, I can satisfy the second constraint. And then for the first constraint, I actually need to write something for the first constraint which",
    "start": "4562655",
    "end": "4570020"
  },
  {
    "text": "says each event is in exactly one time slot. So I'm gonna write a constraint that says Y_t,",
    "start": "4570020",
    "end": "4576125"
  },
  {
    "text": "this time slot is going to get an event for exactly one t. So, so this particular constraint that I have,",
    "start": "4576125",
    "end": "4582680"
  },
  {
    "text": "it's how many variables does it have? If I want it to be exactly one time slot.",
    "start": "4582680",
    "end": "4589760"
  },
  {
    "text": "Remember the sculpture example? I wanted it to be exactly in one room. It needed to depend on everything else.",
    "start": "4589760",
    "end": "4596600"
  },
  {
    "text": "So this is going to be a t-ary constraint, right? So I have t variables here.",
    "start": "4596600",
    "end": "4601610"
  },
  {
    "text": "So previous formulation, everything was binary or unary. Here, I have a t-ary constraint.",
    "start": "4601610",
    "end": "4607219"
  },
  {
    "text": "I have less of it but I have a t-ary constraint. Okay. And then I'm going to have another constraint to just ensure this,",
    "start": "4607220",
    "end": "4613640"
  },
  {
    "text": "this last, this last constraint. Okay. So, so one way to think about these two different approaches is how many of these constraints do I have?",
    "start": "4613640",
    "end": "4621640"
  },
  {
    "text": "So, so we just saw that we have a t-ary constraint here, one thing that you can actually do, and I have the slide afterwards about that,",
    "start": "4621640",
    "end": "4628495"
  },
  {
    "text": "is if we have some, some n-ary constraints, some t-ary constraints, some constraint that depends on t number of variables,",
    "start": "4628495",
    "end": "4635464"
  },
  {
    "text": "I can actually change that to order of t binary constraints. So I can actually like reduce down to binary constraints.",
    "start": "4635464",
    "end": "4643489"
  },
  {
    "text": "So, so I can make these two algorithms- not algorithms, sorry. Make these two models to have all binary or unary constraints.",
    "start": "4643490",
    "end": "4650840"
  },
  {
    "text": "So that part is fine. But one of them is going to have t number- like order of t number of factors,",
    "start": "4650840",
    "end": "4659119"
  },
  {
    "text": "the other one is going to have order of e type factors. And the question is, well, which one should we use?",
    "start": "4659120",
    "end": "4664565"
  },
  {
    "text": "And it really depends on if your e is greater than t or t is greater than e, right? So if you have,",
    "start": "4664565",
    "end": "4669920"
  },
  {
    "text": "if you have more time slots than events, if you've a lot of time slots and you have like five events, let's say that you want,",
    "start": "4669920",
    "end": "4675710"
  },
  {
    "text": "you want to set, then you should use the first algorithm because that, that was where we had order of e squared number of constraints.",
    "start": "4675710",
    "end": "4684155"
  },
  {
    "text": "But if you have it the other way around, which is again less natural but maybe you don't want to, you don't want to- you're okay with not assigning all events a time slot, so,",
    "start": "4684155",
    "end": "4692660"
  },
  {
    "text": "so if you, if you had it the other way around, then, then you can use the second formulation.",
    "start": "4692660",
    "end": "4697670"
  },
  {
    "text": "So the point of it is you might have different ways of formulating a problem, you should use the one that,",
    "start": "4697670",
    "end": "4703159"
  },
  {
    "text": "that is the most beneficial depending on what, how many constraints you have and then so forth. And then one last thing to,",
    "start": "4703160",
    "end": "4710345"
  },
  {
    "text": "to- before, before we head out, so I just said if you have an n-ary constraint, we can actually write down binary constraints that are equivalent to this.",
    "start": "4710345",
    "end": "4717560"
  },
  {
    "text": "And the reason is usually our algorithms require having binary or unary constraints. Here, I have, I have a setting where I have this or between X_1,",
    "start": "4717560",
    "end": "4726335"
  },
  {
    "text": "X_2, X_3, and X_4. So the way to make this- makes",
    "start": "4726335",
    "end": "4731960"
  },
  {
    "text": "the binary constraint is what we can do is we can define an auxiliary variable. So, so I'm going to define a new variable,",
    "start": "4731960",
    "end": "4738620"
  },
  {
    "text": "and this new variable, I'm going to call these A_is. And these A_is are going to be just the result of- the or of A_i minus 1 or X_i.",
    "start": "4738620",
    "end": "4749075"
  },
  {
    "text": "Okay. So what's happening here is, let me just draw this real quick.",
    "start": "4749075",
    "end": "4755765"
  },
  {
    "text": "So I have a setting, ah. I'll just do one. So I had X_1, X_2, X_3,",
    "start": "4755765",
    "end": "4763430"
  },
  {
    "text": "X_4, I can have an n-ary constraint that connects all of these together to one factor graph.",
    "start": "4763430",
    "end": "4769715"
  },
  {
    "text": "What I can do is I can actually define new variables. So I am defining that many new variables, A_2, A_3,",
    "start": "4769715",
    "end": "4778745"
  },
  {
    "text": "A_4, and then I'm ensuring- and I'm defining new factors where A_1 is the result of these two ors.",
    "start": "4778745",
    "end": "4789005"
  },
  {
    "text": "So I'm going to just draw this like this. A_2 is the result of or of these two variables.",
    "start": "4789005",
    "end": "4797270"
  },
  {
    "text": "A_3 is the result of or of these variables and so on. This is not binary, right?",
    "start": "4797270",
    "end": "4804800"
  },
  {
    "text": "What is there right here? It's three. So we need to do one more step, like, after you're defining these auxiliary variables, after that,",
    "start": "4804800",
    "end": "4812210"
  },
  {
    "text": "we need to define- we need to do one more step where we define a new variable B which kind of represents A_i and A_i minus 1.",
    "start": "4812210",
    "end": "4819635"
  },
  {
    "text": "So I'm going to replace these two with just one variable. I'm gonna call it B_1 and I'm gonna just connect that to X_1.",
    "start": "4819635",
    "end": "4828290"
  },
  {
    "text": "I'm not going to draw it, but you get the idea. So, so B_i's are just going to be representing A_i minus 1 and A_i.",
    "start": "4828290",
    "end": "4839190"
  },
  {
    "text": "And that allows me to have binary, um, binary factors here.",
    "start": "4839260",
    "end": "4846395"
  },
  {
    "text": "Okay. And, and by doing so, I'm adding actually one more constraint. I actually need to add a consistency constraint that makes",
    "start": "4846395",
    "end": "4854060"
  },
  {
    "text": "your B_i minus 1 of 2 is equal to B_i minus- B_i of 1. Just ensuring that like pre and",
    "start": "4854060",
    "end": "4860690"
  },
  {
    "text": "post are staying the same as we're moving through the graph. So that's another reinforcement.",
    "start": "4860690",
    "end": "4866285"
  },
  {
    "text": "All right. Let's chat next time about this more.",
    "start": "4866285",
    "end": "4870120"
  }
]