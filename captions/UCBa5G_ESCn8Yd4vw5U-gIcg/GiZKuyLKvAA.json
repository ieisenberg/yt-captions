[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "denis emailed me Monday morning and I did not have anything prepared so this",
    "start": "11139",
    "end": "18439"
  },
  {
    "text": "is kind of rough although I've been talking about and thinking about this",
    "start": "18439",
    "end": "24680"
  },
  {
    "text": "topic for a long time as you will shortly see so last time I was here",
    "start": "24680",
    "end": "35360"
  },
  {
    "start": "33000",
    "end": "204000"
  },
  {
    "text": "python was a pretty cool language I'm still shocked that we're now number four",
    "start": "35360",
    "end": "42710"
  },
  {
    "text": "on the most conservative list of popular",
    "start": "42710",
    "end": "47720"
  },
  {
    "text": "languages and number one or two other",
    "start": "47720",
    "end": "53330"
  },
  {
    "text": "popularity ratings and Denis just asked me how come Python is so popular I don't",
    "start": "53330",
    "end": "62210"
  },
  {
    "text": "actually know I have a wild guess which is that data science has lifted all",
    "start": "62210",
    "end": "68810"
  },
  {
    "text": "boats I don't do data science myself",
    "start": "68810",
    "end": "74990"
  },
  {
    "text": "I barely know what the pandas thing looks like I'm sure several of you here",
    "start": "74990",
    "end": "81950"
  },
  {
    "text": "spend a lot of time with that so yay Python but as always Python is easy to",
    "start": "81950",
    "end": "91700"
  },
  {
    "text": "read easy to learn easy to write but that comes last actually and I should",
    "start": "91700",
    "end": "102440"
  },
  {
    "text": "actually call out my great mentor alum bear mertens who in the late 70s early",
    "start": "102440",
    "end": "108470"
  },
  {
    "text": "80s designed a language named ABC that was designed to be easy to read and",
    "start": "108470",
    "end": "114800"
  },
  {
    "text": "write and learn from for which I was one",
    "start": "114800",
    "end": "121159"
  },
  {
    "text": "of the four or so programmers tasked with implementing ABC after three or",
    "start": "121159",
    "end": "128720"
  },
  {
    "text": "four years the project was cancelled for lack of popularity and Python is really",
    "start": "128720",
    "end": "135980"
  },
  {
    "text": "just a remix of ABC with perhaps the biggest difference being that ABC used",
    "start": "135980",
    "end": "142760"
  },
  {
    "text": "capital letters for keywords as was sort of prevailing fashion in the late 70s and before utter",
    "start": "142760",
    "end": "154460"
  },
  {
    "text": "things that sort of make python a good thing for people it's it lets you write",
    "start": "154460",
    "end": "163970"
  },
  {
    "text": "short code but not so short that it becomes cryptic and it comes with",
    "start": "163970",
    "end": "169370"
  },
  {
    "text": "batteries included there is a huge standard library plus it's really easy",
    "start": "169370",
    "end": "174410"
  },
  {
    "text": "to put in different batteries better batteries batteries I had never heard of",
    "start": "174410",
    "end": "180580"
  },
  {
    "text": "batteries I don't care about in the form of third-party packages and Python as",
    "start": "180580",
    "end": "187160"
  },
  {
    "text": "well as everything in pythons ecosystem pretty much is open source which makes",
    "start": "187160",
    "end": "193760"
  },
  {
    "text": "my work easier because I don't actually have to do any of it anymore I just have",
    "start": "193760",
    "end": "201020"
  },
  {
    "text": "to say I'm the PD FL now oh let's just",
    "start": "201020",
    "end": "208010"
  },
  {
    "start": "204000",
    "end": "631000"
  },
  {
    "text": "do a quick poll who here is familiar with coding in Python from sort of",
    "start": "208010",
    "end": "214540"
  },
  {
    "text": "regular ok that's almost everyone so I don't really have to explain too much",
    "start": "214540",
    "end": "220040"
  },
  {
    "text": "about pythons pythons runtime type system one of the reasons that Python is",
    "start": "220040",
    "end": "228260"
  },
  {
    "text": "concise is that you don't have to be explicit about the types of your variables arguments return types and",
    "start": "228260",
    "end": "236030"
  },
  {
    "text": "other things Python does all its typing",
    "start": "236030",
    "end": "243530"
  },
  {
    "text": "at runtime so from a compilers perspective there's not much more you",
    "start": "243530",
    "end": "250790"
  },
  {
    "text": "can say about a typical name that occurs in Python except that it is an object",
    "start": "250790",
    "end": "256870"
  },
  {
    "text": "this is true even if it's a very primitive type like integer or a string",
    "start": "256870",
    "end": "262430"
  },
  {
    "text": "or floating-point number there are no unboxed values in Python there is some",
    "start": "262430",
    "end": "268760"
  },
  {
    "text": "obscure library that will let you manipulate unboxed values and",
    "start": "268760",
    "end": "275540"
  },
  {
    "text": "the data science world numpy arrays are actually a raise of unboxed values but everything is sort of demarcated by",
    "start": "275540",
    "end": "283490"
  },
  {
    "text": "api's that mean that the type system of the language itself has no worries about",
    "start": "283490",
    "end": "289460"
  },
  {
    "text": "unboxed values it also has no opportunities for efficient code generation because the compiler just",
    "start": "289460",
    "end": "295729"
  },
  {
    "text": "doesn't know it's object-oriented it",
    "start": "295729",
    "end": "301040"
  },
  {
    "text": "supports multiple inheritance if you really want to you can do crazy things",
    "start": "301040",
    "end": "306320"
  },
  {
    "text": "like write a function that computes a list of classes and use that as the set",
    "start": "306320",
    "end": "312229"
  },
  {
    "text": "of base classes for your class you can even create your own meta classes I'm",
    "start": "312229",
    "end": "319639"
  },
  {
    "text": "not going into too much detail here as I",
    "start": "319639",
    "end": "324919"
  },
  {
    "text": "mentioned there are no declarations as such well the only type of declaration",
    "start": "324919",
    "end": "330020"
  },
  {
    "text": "is about the scope of a variable but nothing about its type you just say def",
    "start": "330020",
    "end": "336650"
  },
  {
    "text": "add of a and B return a plus B and it either works or it doesn't when you call",
    "start": "336650",
    "end": "343070"
  },
  {
    "text": "it also and a lot of people don't",
    "start": "343070",
    "end": "349039"
  },
  {
    "text": "appreciate this when they start using Python variables are not actually really variables in the sense that they are in",
    "start": "349039",
    "end": "356599"
  },
  {
    "text": "most other programming languages in Python a variable is basically just a",
    "start": "356599",
    "end": "363020"
  },
  {
    "text": "dynamic binding in most places what the user thinks of as a variable and what",
    "start": "363020",
    "end": "369740"
  },
  {
    "text": "the language actually goes to considerable lengths to make you believe",
    "start": "369740",
    "end": "374750"
  },
  {
    "text": "is a variable is really just a key in a dictionary and when you assign to that",
    "start": "374750",
    "end": "380840"
  },
  {
    "text": "variable under the hood it sets value in",
    "start": "380840",
    "end": "386510"
  },
  {
    "text": "that dictionary this is also why the the origin at least of why you can delete",
    "start": "386510",
    "end": "393530"
  },
  {
    "text": "variables in Python now for local",
    "start": "393530",
    "end": "400400"
  },
  {
    "text": "variables in functions there are certain constraints that make it possible for the compiler to actually cheat and not",
    "start": "400400",
    "end": "408889"
  },
  {
    "text": "materialised that dictionary and in fact just manipulate values as if there were",
    "start": "408889",
    "end": "414540"
  },
  {
    "text": "registers or something like that but for the most part you can't actually tell",
    "start": "414540",
    "end": "422669"
  },
  {
    "text": "the difference you have to sort of really try to use some introspection api",
    "start": "422669",
    "end": "428010"
  },
  {
    "text": "before you can tell oh hmm i guess in this context there is no real dictionary",
    "start": "428010",
    "end": "434610"
  },
  {
    "text": "or you have to read the reference method so unlike some other dynamically typed",
    "start": "434610",
    "end": "442830"
  },
  {
    "text": "languages in Python there is still a certain level of type safety which comes",
    "start": "442830",
    "end": "448290"
  },
  {
    "text": "purely from the interpreter being fastidious in doing type checks when",
    "start": "448290",
    "end": "455040"
  },
  {
    "text": "they matter when you try to add two objects together and one of those",
    "start": "455040",
    "end": "461490"
  },
  {
    "text": "objects is an int and the other is a float great we'll turn the int into a",
    "start": "461490",
    "end": "467580"
  },
  {
    "text": "float add the two floats and return the float on the other hand if one of them is an int and the other is a string and",
    "start": "467580",
    "end": "474660"
  },
  {
    "text": "we'll throw a type error now if you try to multiply an int and a string together",
    "start": "474660",
    "end": "480289"
  },
  {
    "text": "you probably know what happens it's not a type error you get a repeated string",
    "start": "480289",
    "end": "488120"
  },
  {
    "text": "other things that are interesting in the type system that more or less follow from all this the concept called duck",
    "start": "488120",
    "end": "496410"
  },
  {
    "text": "typing I guess the technical term would be structural type checking or structural",
    "start": "496410",
    "end": "502260"
  },
  {
    "text": "subtyping when you call a method on an object it may or may not work if it if",
    "start": "502260",
    "end": "510600"
  },
  {
    "text": "it works you win if it doesn't work well you have a bug in your program that's",
    "start": "510600",
    "end": "515909"
  },
  {
    "text": "the sort of the attitude which means that you can do all sorts of interesting things where you pass a function an",
    "start": "515909",
    "end": "524640"
  },
  {
    "text": "argument that has an attribute that is actually a method and the function calls",
    "start": "524640",
    "end": "530820"
  },
  {
    "text": "that method and it will work for any",
    "start": "530820",
    "end": "536010"
  },
  {
    "text": "class that defines that particular method there is no requirement to say",
    "start": "536010",
    "end": "541770"
  },
  {
    "text": "well the right method on files can be called here but the right method on some",
    "start": "541770",
    "end": "548850"
  },
  {
    "text": "other object cannot be called even though it happens to be called right duck typing for the win people love it",
    "start": "548850",
    "end": "557580"
  },
  {
    "text": "with sort of some limitations also with",
    "start": "557580",
    "end": "563640"
  },
  {
    "text": "this dynamic type system comes a lot of introspection if you want to know what",
    "start": "563640",
    "end": "572090"
  },
  {
    "text": "the attributes of the data attributes of an object are you can ask for that",
    "start": "572090",
    "end": "579690"
  },
  {
    "text": "objects dunder dict attribute we pronounce under-under as dunder if you",
    "start": "579690",
    "end": "585990"
  },
  {
    "text": "want to know what its type is you can ask for its dunder class attribute if",
    "start": "585990",
    "end": "591740"
  },
  {
    "text": "you have a particular class and you want to check whether it's the instance of that class you can call is instance like",
    "start": "591740",
    "end": "598380"
  },
  {
    "text": "in most languages then there are all sorts of interesting quirks where at",
    "start": "598380",
    "end": "605580"
  },
  {
    "text": "some point we added an interesting new feature like a decorators context managers descriptors a whole bunch of",
    "start": "605580",
    "end": "613560"
  },
  {
    "text": "stuff that is well defined but is not",
    "start": "613560",
    "end": "618570"
  },
  {
    "text": "apparent from the syntax of the language or only marginally so so why do we like",
    "start": "618570",
    "end": "626070"
  },
  {
    "text": "dynamic typing or why do pythons users in general like dynamic typing well less",
    "start": "626070",
    "end": "632700"
  },
  {
    "start": "631000",
    "end": "702000"
  },
  {
    "text": "typing finger typing means shorter code less boring code you can use those",
    "start": "632700",
    "end": "639900"
  },
  {
    "text": "dynamic tricks to add a little touch of excitement like if you have a function",
    "start": "639900",
    "end": "645270"
  },
  {
    "text": "that takes arbitrary keyword arguments then you can also turn those arbitrary",
    "start": "645270",
    "end": "650370"
  },
  {
    "text": "keyword arguments into attributes of the current instance of any instance in fact",
    "start": "650370",
    "end": "656940"
  },
  {
    "text": "although I wouldn't recommend it necessarily why does this not lead to",
    "start": "656940",
    "end": "664670"
  },
  {
    "text": "terribly buggy programs because we also have a culture in the Python world of",
    "start": "664670",
    "end": "670580"
  },
  {
    "text": "doing a lot of unit testing and other types of tests there I remember it's it's sort of",
    "start": "670580",
    "end": "677980"
  },
  {
    "text": "settled now I think PI test is mostly one but like a decade ago there was a battle of",
    "start": "677980",
    "end": "684580"
  },
  {
    "text": "different testing frameworks and there was a good thing there was lots of interesting developments were going on",
    "start": "684580",
    "end": "692500"
  },
  {
    "text": "and this was all open source stuff there where I didn't really have to do much so",
    "start": "692500",
    "end": "698620"
  },
  {
    "text": "pop dynamic typing is clearly popular on the other hand the static typing people",
    "start": "698620",
    "end": "705450"
  },
  {
    "start": "702000",
    "end": "806000"
  },
  {
    "text": "have not given up yet static typing definitely catches bugs earlier at least",
    "start": "705450",
    "end": "711520"
  },
  {
    "text": "some bugs it clearly doesn't catch all bugs with static typing you have a",
    "start": "711520",
    "end": "718810"
  },
  {
    "text": "little more confidence when you're refactoring your code if you add an extra argument to a method then static",
    "start": "718810",
    "end": "725980"
  },
  {
    "text": "typing will tell you when you forgot to add an extra value to a call site in",
    "start": "725980",
    "end": "736390"
  },
  {
    "text": "addition and I call type declarations I call them type annotations because",
    "start": "736390",
    "end": "742660"
  },
  {
    "text": "that's what we call them in Python now that we sort of have them human readers",
    "start": "742660",
    "end": "749620"
  },
  {
    "text": "of large code bases the people who sort of are hired to maintain a million lines",
    "start": "749620",
    "end": "757570"
  },
  {
    "text": "of code that they didn't write but they're still going to be responsible for fixing it or adding stuff to it",
    "start": "757570",
    "end": "764400"
  },
  {
    "text": "those humans really appreciate having something that tells them what the types",
    "start": "764400",
    "end": "772240"
  },
  {
    "text": "of arguments of functions are and you can say well we have documentation well",
    "start": "772240",
    "end": "781080"
  },
  {
    "text": "documentation doesn't always stay up to date sadly I wish it was not so but it",
    "start": "781080",
    "end": "787240"
  },
  {
    "text": "turns out that it's really hard not to get the type annotations keep the type",
    "start": "787240",
    "end": "792640"
  },
  {
    "text": "annotations up-to-date because the compiler will tell you when they they don't match the code and it turns out",
    "start": "792640",
    "end": "802720"
  },
  {
    "text": "static typing is also still pretty popular so there is this new concept well it was",
    "start": "802720",
    "end": "810660"
  },
  {
    "start": "806000",
    "end": "1050000"
  },
  {
    "text": "new a decade ago although I I think I only heard about it about four years ago gradual typing in Python we typically",
    "start": "810660",
    "end": "818880"
  },
  {
    "text": "call it optional static typing it is a",
    "start": "818880",
    "end": "824730"
  },
  {
    "text": "technique for adding static typing to a dynamic language that lets the user",
    "start": "824730",
    "end": "831529"
  },
  {
    "text": "basically mix and match statically typed and dynamically typed parts of their",
    "start": "831529",
    "end": "836699"
  },
  {
    "text": "code now obviously this mean that if you want to cheat you can just keep your",
    "start": "836699",
    "end": "842610"
  },
  {
    "text": "code dynamic and the compiler will not catch you we're not into that kind of",
    "start": "842610",
    "end": "847740"
  },
  {
    "text": "bondage and bondage and discipline you",
    "start": "847740",
    "end": "853220"
  },
  {
    "text": "you're just shooting yourself in the foot but if you want to have more",
    "start": "853220",
    "end": "861779"
  },
  {
    "text": "confidence about the correctness of your code now perfect confidence but some",
    "start": "861779",
    "end": "867660"
  },
  {
    "text": "better confidence you if you want to benefit from some of the benefits of static typing including its popularity",
    "start": "867660",
    "end": "875120"
  },
  {
    "text": "you can start using type annotations in your Python code now and sort of we've",
    "start": "875120",
    "end": "884190"
  },
  {
    "text": "developed this over the past half decade and we found that it is actually a very",
    "start": "884190",
    "end": "891449"
  },
  {
    "text": "reasonable way to introduce typing into a large dynamic code base Python is not",
    "start": "891449",
    "end": "900449"
  },
  {
    "text": "unique of course typescript is exactly the same idea for JavaScript",
    "start": "900449",
    "end": "905550"
  },
  {
    "text": "and Facebook did the same thing for PHP with hack so my part I just noticed it's",
    "start": "905550",
    "end": "916620"
  },
  {
    "text": "it's doubly open-source it's a type checker for python it was developed in I",
    "start": "916620",
    "end": "924750"
  },
  {
    "text": "think starting in 2012 or so by a Finnish guy in yoga lettuce lettuce hello can never pronounce his name he",
    "start": "924750",
    "end": "934050"
  },
  {
    "text": "got a PhD from Cambridge Cambridge England from that pretty",
    "start": "934050",
    "end": "939139"
  },
  {
    "text": "I remember he approached me at a Python",
    "start": "939139",
    "end": "944420"
  },
  {
    "text": "conference either in late 2012 or early 2013 and he said look I I have this",
    "start": "944420",
    "end": "952009"
  },
  {
    "text": "language that is sort of inspired by Python but I've added static type",
    "start": "952009",
    "end": "958429"
  },
  {
    "text": "annotations to it in a gradual fashion because that that was also part of it",
    "start": "958429",
    "end": "965540"
  },
  {
    "text": "and I've written a type checker and the trans transpiler that turns that code",
    "start": "965540",
    "end": "971839"
  },
  {
    "text": "into Python code which you can then execute I said wow that's great and how",
    "start": "971839",
    "end": "978589"
  },
  {
    "text": "many users do you expect to have well you know the story about the typical",
    "start": "978589",
    "end": "984980"
  },
  {
    "text": "language developed by a PhD candidate there's one user until the thesis has",
    "start": "984980",
    "end": "991669"
  },
  {
    "text": "been approved and I didn't come up with",
    "start": "991669",
    "end": "997970"
  },
  {
    "text": "that that that story that I heard that from someone in the Haskell world anyway",
    "start": "997970",
    "end": "1004809"
  },
  {
    "text": "I said but if you change your syntax just a little bit let's start by turning",
    "start": "1004809",
    "end": "1011529"
  },
  {
    "text": "the angular brackets into square brackets because angular brackets will",
    "start": "1011529",
    "end": "1016929"
  },
  {
    "text": "not work and we can change a few other things and guess what you can actually",
    "start": "1016929",
    "end": "1024038"
  },
  {
    "text": "make your language a superset of Python",
    "start": "1024039",
    "end": "1030788"
  },
  {
    "text": "or maybe a subset am never never sure in which direction this goes but you can",
    "start": "1030789",
    "end": "1037089"
  },
  {
    "text": "make it compatible with Python so you don't need the transporation phase code",
    "start": "1037089",
    "end": "1045399"
  },
  {
    "text": "written in language X well language mypie is valid Python code and will",
    "start": "1045399",
    "end": "1051909"
  },
  {
    "start": "1050000",
    "end": "1344000"
  },
  {
    "text": "execute and the Python interpreter will execute it just fine and in fact the",
    "start": "1051909",
    "end": "1057340"
  },
  {
    "text": "Python interpreter will execute it at the same speed as it would completely",
    "start": "1057340",
    "end": "1063039"
  },
  {
    "text": "unanimity yuka thought about that and together we",
    "start": "1063039",
    "end": "1068379"
  },
  {
    "text": "sort of whipped up a plan and after that and after I hired him at",
    "start": "1068379",
    "end": "1077350"
  },
  {
    "text": "Dropbox we started actually introducing",
    "start": "1077350",
    "end": "1082480"
  },
  {
    "text": "this in the Python community and we started working on standardizing this",
    "start": "1082480",
    "end": "1088660"
  },
  {
    "text": "this happened in 2014-2015 with a very",
    "start": "1088660",
    "end": "1093820"
  },
  {
    "text": "contentious PAP 484 that takes existing",
    "start": "1093820",
    "end": "1100360"
  },
  {
    "text": "function annotation syntax in Python them basically says henceforth function",
    "start": "1100360",
    "end": "1105580"
  },
  {
    "text": "annotations will be used for type annotations because syntactically these",
    "start": "1105580",
    "end": "1112030"
  },
  {
    "text": "things already existed in Python that was the sort of that hint I was giving Yuka",
    "start": "1112030",
    "end": "1117100"
  },
  {
    "text": "but semantically there was never any agreement on what they meant and sort of",
    "start": "1117100",
    "end": "1122620"
  },
  {
    "text": "when we entered when we started a Python 3 work there was also a very contentious",
    "start": "1122620",
    "end": "1129400"
  },
  {
    "text": "discussion about adding typing to Python somehow and after sort of going around",
    "start": "1129400",
    "end": "1137620"
  },
  {
    "text": "that subject several times myself I realized that we would never get",
    "start": "1137620",
    "end": "1143530"
  },
  {
    "text": "agreement at least not in time for time for Python 3 oh and probably not in time for Python 3 10 we would never get",
    "start": "1143530",
    "end": "1151090"
  },
  {
    "text": "agreement on exactly how those type annotations should work but I said if we",
    "start": "1151090",
    "end": "1159510"
  },
  {
    "text": "just add a little bit of syntax without giving it meaning then people can",
    "start": "1159510",
    "end": "1166630"
  },
  {
    "text": "experiment with assigning different meanings to that syntax the big debate",
    "start": "1166630",
    "end": "1173050"
  },
  {
    "text": "by the way was about whether these type",
    "start": "1173050",
    "end": "1178179"
  },
  {
    "text": "annotations are just used for correctness checking or whether they're also used for runtime checking or",
    "start": "1178179",
    "end": "1185670"
  },
  {
    "text": "possibly even for code generation and it",
    "start": "1185670",
    "end": "1190840"
  },
  {
    "text": "turns out that you need sort of quite different approaches for the different",
    "start": "1190840",
    "end": "1198070"
  },
  {
    "text": "different ideas and I wasn't sure that I knew with what I wanted but I knew that",
    "start": "1198070",
    "end": "1204309"
  },
  {
    "text": "eventually we would want some of type annotations well so that happened because you could work tat",
    "start": "1204309",
    "end": "1212259"
  },
  {
    "text": "Dropbox he started sort of playing with my PI and Dropbox codebase during events",
    "start": "1212259",
    "end": "1220749"
  },
  {
    "text": "called hack week and in 2015 I think after the second hack week where we",
    "start": "1220749",
    "end": "1226720"
  },
  {
    "text": "played with it we started introducing annotations in the Dropbox codebase for",
    "start": "1226720",
    "end": "1233019"
  },
  {
    "text": "real fast forward to this year we now",
    "start": "1233019",
    "end": "1238210"
  },
  {
    "text": "have two million annotated lines of code",
    "start": "1238210",
    "end": "1243809"
  },
  {
    "text": "now how do you count that it means that",
    "start": "1243809",
    "end": "1249580"
  },
  {
    "text": "the total line count of the functions that are annotated is about two million this out of five or six million lines",
    "start": "1249580",
    "end": "1257519"
  },
  {
    "text": "total we currently have a four person team including Yuka it's pretty popular",
    "start": "1257519",
    "end": "1265090"
  },
  {
    "text": "in fact we almost never hear anything negative about this except about the",
    "start": "1265090",
    "end": "1271539"
  },
  {
    "text": "speed of the tooling or the speed of the introduction of type annotations in the",
    "start": "1271539",
    "end": "1276909"
  },
  {
    "text": "remaining four megabytes million lines of code we also because my PI is open",
    "start": "1276909",
    "end": "1285279"
  },
  {
    "text": "source and we kept it open source and we aggressively developed it open source so",
    "start": "1285279",
    "end": "1291669"
  },
  {
    "text": "all the design discussions about how should we solve this problem in my PI the entire bug tracker everything in all",
    "start": "1291669",
    "end": "1299320"
  },
  {
    "text": "code reviews is done on github and as a result of that we have quite a few",
    "start": "1299320",
    "end": "1306149"
  },
  {
    "text": "external contributors some of whom occasionally get promoted to Cordell and",
    "start": "1306149",
    "end": "1312639"
  },
  {
    "text": "sometimes to Dropbox or we've also found that Facebook adopted this Quora adopted",
    "start": "1312639",
    "end": "1321279"
  },
  {
    "text": "this lift adopted this there is an open",
    "start": "1321279",
    "end": "1326470"
  },
  {
    "text": "source chat bot named zu lip that there's a Python code base of about 100 500 thousand lines of code that was",
    "start": "1326470",
    "end": "1334690"
  },
  {
    "text": "completely annotated over the course I think of the previous summer",
    "start": "1334690",
    "end": "1340119"
  },
  {
    "text": "so anyway I think that's a pretty healthy project the standardization",
    "start": "1340119",
    "end": "1348979"
  },
  {
    "start": "1344000",
    "end": "1426000"
  },
  {
    "text": "efforts also paid off because it's now supported by other type checkers for",
    "start": "1348979",
    "end": "1355789"
  },
  {
    "text": "Python perhaps the most well-known of which is PyCharm popular ide which has",
    "start": "1355789",
    "end": "1363889"
  },
  {
    "text": "its own code completion and type checking engine but which supports the",
    "start": "1363889",
    "end": "1371029"
  },
  {
    "text": "same syntax that we introduced for my pie google has a static analysis tool that",
    "start": "1371029",
    "end": "1377690"
  },
  {
    "text": "will eventually help them port their I don't know tens of millions of lines of",
    "start": "1377690",
    "end": "1383119"
  },
  {
    "text": "Python 2 code to Python 3 Facebook was so excited that they wrote their own",
    "start": "1383119",
    "end": "1389090"
  },
  {
    "text": "type checker which they just recently open sourced at the last Python last",
    "start": "1389090",
    "end": "1396830"
  },
  {
    "text": "month and then there is a component",
    "start": "1396830",
    "end": "1402519"
  },
  {
    "text": "which is sort of type stubs or descriptions of the standard library and",
    "start": "1402519",
    "end": "1408559"
  },
  {
    "text": "third-party packages that haven't been annotated that everybody shares and contributes to so with the project",
    "start": "1408559",
    "end": "1420409"
  },
  {
    "text": "status out of the way let's start showing some code and give some details",
    "start": "1420409",
    "end": "1429529"
  },
  {
    "start": "1426000",
    "end": "1671000"
  },
  {
    "text": "so an important requirement was that",
    "start": "1429529",
    "end": "1435109"
  },
  {
    "text": "there would not be changes to the Python syntax which is where the existing",
    "start": "1435109",
    "end": "1440960"
  },
  {
    "text": "syntax for function annotations was essential which is also of why I",
    "start": "1440960",
    "end": "1447759"
  },
  {
    "text": "convinced Yuka to change his angular brackets to square brackets because it",
    "start": "1447759",
    "end": "1453200"
  },
  {
    "text": "turns out that in Python you can overload array indexing or dictionary",
    "start": "1453200",
    "end": "1460460"
  },
  {
    "text": "indexing on anything including using meta classes on types themselves so you",
    "start": "1460460",
    "end": "1468769"
  },
  {
    "text": "can sort of you can define the meaning of list square",
    "start": "1468769",
    "end": "1473789"
  },
  {
    "text": "brackets in square record clothes as this refers to a list of integers the",
    "start": "1473789",
    "end": "1484109"
  },
  {
    "text": "other requirements were that Python itself should not slow down and should",
    "start": "1484109",
    "end": "1489210"
  },
  {
    "text": "not actually do anything with the types so you can put all the annotations you",
    "start": "1489210",
    "end": "1494909"
  },
  {
    "text": "want in your code your code executes",
    "start": "1494909",
    "end": "1500129"
  },
  {
    "text": "exactly as if those annotations weren't there and finally no transpilers",
    "start": "1500129",
    "end": "1509659"
  },
  {
    "text": "otherwise we would have a lot more syntactic options but it would also be",
    "start": "1509659",
    "end": "1514820"
  },
  {
    "text": "incredibly hard to get people to adopt this because transpilers only work if",
    "start": "1514820",
    "end": "1522450"
  },
  {
    "text": "all the tooling understands the sort of the richer syntax that the transpiler",
    "start": "1522450",
    "end": "1527729"
  },
  {
    "text": "accepts and so I'm very happy that we didn't go that way so now here is a tiny bit of code I'm",
    "start": "1527729",
    "end": "1537389"
  },
  {
    "text": "not using a fixed width font because I think that's old fashioned for slides",
    "start": "1537389",
    "end": "1543499"
  },
  {
    "text": "let's some a thing named X sorry X thing named a we start with the total",
    "start": "1543499",
    "end": "1550590"
  },
  {
    "text": "initialize to zero we loop over all the things in a and we add those things to",
    "start": "1550590",
    "end": "1558509"
  },
  {
    "text": "the total and then we return the total well you can see that if a was a list of",
    "start": "1558509",
    "end": "1563970"
  },
  {
    "text": "integers or a list of floating-point numbers or a list of or maybe a numpy",
    "start": "1563970",
    "end": "1569070"
  },
  {
    "text": "array of complex numbers it would all make total sense",
    "start": "1569070",
    "end": "1575009"
  },
  {
    "text": "there are also things where it doesn't make sense but that's okay like you can't sum a list of strings this way",
    "start": "1575009",
    "end": "1581369"
  },
  {
    "text": "because the total is initialized to a number number type so this is fine this",
    "start": "1581369",
    "end": "1587159"
  },
  {
    "text": "is also still fine in my pie but of course is no type checked now let's add",
    "start": "1587159",
    "end": "1593369"
  },
  {
    "text": "an annotation so we add list square brackets of in square bracket close and",
    "start": "1593369",
    "end": "1599789"
  },
  {
    "text": "arrow int 2 the function heading the signature and that's the only change we",
    "start": "1599789",
    "end": "1605789"
  },
  {
    "text": "make now the mypie checker has enough information to figure out what's going",
    "start": "1605789",
    "end": "1612130"
  },
  {
    "text": "on and it will in fact say this is fine because I don't have any examples with",
    "start": "1612130",
    "end": "1619480"
  },
  {
    "text": "bugs in them so the syntax for",
    "start": "1619480",
    "end": "1626560"
  },
  {
    "text": "annotations is named : type where type can be any anything that will explain",
    "start": "1626560",
    "end": "1633130"
  },
  {
    "text": "soon return type is indicated using an arrow I think there are few other",
    "start": "1633130",
    "end": "1639910"
  },
  {
    "text": "languages that loot use the same notation it's definitely not very common",
    "start": "1639910",
    "end": "1647370"
  },
  {
    "text": "but Python is not unique I don't know maybe maybe Python sort of inspired the",
    "start": "1648180",
    "end": "1654130"
  },
  {
    "text": "other language that they have this I think rust uses the same notation and Scala also uses square brackets for",
    "start": "1654130",
    "end": "1661420"
  },
  {
    "text": "generics this same function we could annotate it differently for example with",
    "start": "1661420",
    "end": "1668170"
  },
  {
    "text": "lists of floats to float now if you're",
    "start": "1668170",
    "end": "1673360"
  },
  {
    "start": "1671000",
    "end": "1735000"
  },
  {
    "text": "still a Python to user this is the only slide I'll spend on the Python 2 syntax",
    "start": "1673360",
    "end": "1679060"
  },
  {
    "text": "there is a Python 2 version of this syntax which uses a comment that we call",
    "start": "1679060",
    "end": "1684190"
  },
  {
    "text": "a type comment pound type column and then in this case types in parentheses",
    "start": "1684190",
    "end": "1692230"
  },
  {
    "text": "and in arrow for the return type note that the type comment that does not repeat the variable names there are the",
    "start": "1692230",
    "end": "1699100"
  },
  {
    "text": "argument names otherwise this does exactly the same thing as the Python 3",
    "start": "1699100",
    "end": "1705640"
  },
  {
    "text": "version in fact you can write this even in Python 3 why would we allow using",
    "start": "1705640",
    "end": "1711640"
  },
  {
    "text": "type comments in Python 3 to enable people to write code that is type of",
    "start": "1711640",
    "end": "1717820"
  },
  {
    "text": "version neutral which is an incredibly important property of code while you're",
    "start": "1717820",
    "end": "1722860"
  },
  {
    "text": "porting into Python 3 oh yeah a reminder",
    "start": "1722860",
    "end": "1728590"
  },
  {
    "text": "that we have about a year and a half until Python 2 is officially unsupported",
    "start": "1728590",
    "end": "1733840"
  },
  {
    "text": "which doesn't mean that the world suddenly will stop using it",
    "start": "1733840",
    "end": "1739680"
  },
  {
    "start": "1735000",
    "end": "1902000"
  },
  {
    "text": "okay so how does type inferencing work this may be fairly basic a simple",
    "start": "1739680",
    "end": "1746950"
  },
  {
    "text": "example the sum of two integers for some reason I assign the sum to an",
    "start": "1746950",
    "end": "1755430"
  },
  {
    "text": "intermediate local variable X and then we return that and how does the type",
    "start": "1755430",
    "end": "1761620"
  },
  {
    "text": "checker go about sort of figuring out what's going on well let's focus on the",
    "start": "1761620",
    "end": "1766930"
  },
  {
    "text": "line x equals a plus B so we start start by looking up the types of a and B which",
    "start": "1766930",
    "end": "1773740"
  },
  {
    "text": "come from the signature so we know that",
    "start": "1773740",
    "end": "1778930"
  },
  {
    "text": "both a and B are ins then because we have operator overloading we're looking",
    "start": "1778930",
    "end": "1786370"
  },
  {
    "text": "up the function dunder add on integers I'm simplifying",
    "start": "1786370",
    "end": "1793240"
  },
  {
    "text": "things here if you know how binary operators work in Python you know it's much more complicated than the",
    "start": "1793240",
    "end": "1798940"
  },
  {
    "text": "complications don't don't add anything to explaining the type inference so now",
    "start": "1798940",
    "end": "1806440"
  },
  {
    "text": "we have this dunder add method on the type of a which so that is actually installed under add can it be called",
    "start": "1806440",
    "end": "1815080"
  },
  {
    "text": "with an int darn-tootin it cam so what",
    "start": "1815080",
    "end": "1820480"
  },
  {
    "text": "does it return in that case because that function could be overloaded and in fact",
    "start": "1820480",
    "end": "1825490"
  },
  {
    "text": "I believe it is because if you call it with float it will magically also work",
    "start": "1825490",
    "end": "1831370"
  },
  {
    "text": "and return a float yes you call it with an integer and int and that is the type",
    "start": "1831370",
    "end": "1840490"
  },
  {
    "text": "assigned to the variable X Y on the next line return X we do a similar thing we",
    "start": "1840490",
    "end": "1847600"
  },
  {
    "text": "say well what is the type of X because that's the entire expression it's int because we just computed that on the",
    "start": "1847600",
    "end": "1853660"
  },
  {
    "text": "previous line is that the desired return",
    "start": "1853660",
    "end": "1858880"
  },
  {
    "text": "type for this function yes bingo okay the whole function works there's a lot",
    "start": "1858880",
    "end": "1864670"
  },
  {
    "text": "more to this in particular I'm not touching on the notion of context where",
    "start": "1864670",
    "end": "1870040"
  },
  {
    "text": "in some cases if you have a variable of that whose",
    "start": "1870040",
    "end": "1877010"
  },
  {
    "text": "type is declared the declare type can actually influence how we interpret the",
    "start": "1877010",
    "end": "1885050"
  },
  {
    "text": "the types occurring in the expression that's being assigned to it that seemed",
    "start": "1885050",
    "end": "1890660"
  },
  {
    "text": "overly complicated it turns out it's essential to deal with all sorts of",
    "start": "1890660",
    "end": "1896930"
  },
  {
    "text": "corner cases of Python I don't have time to go more into that if I were ever want",
    "start": "1896930",
    "end": "1902780"
  },
  {
    "start": "1902000",
    "end": "2200000"
  },
  {
    "text": "to get to the end of this talk so then we have the question well what what can",
    "start": "1902780",
    "end": "1909470"
  },
  {
    "text": "it type be I've shown a few very simple examples int list of int well they're",
    "start": "1909470",
    "end": "1916430"
  },
  {
    "text": "only a very small number of atomic types others are string and bytes well they're",
    "start": "1916430",
    "end": "1921680"
  },
  {
    "text": "not even atomic but they're sort of common built-in types then we have",
    "start": "1921680",
    "end": "1931370"
  },
  {
    "text": "container types and those are in fact not built-in because again for obscure",
    "start": "1931370",
    "end": "1940100"
  },
  {
    "text": "technical reasons you have to spell them with a capital letter at least that's",
    "start": "1940100",
    "end": "1946190"
  },
  {
    "text": "how we made it so that you can use this in versions of Python that were already",
    "start": "1946190",
    "end": "1951620"
  },
  {
    "text": "released before my PI was invented so capital lists with square brackets is a",
    "start": "1951620",
    "end": "1959810"
  },
  {
    "text": "list of whatever occurs inside those square brackets we also have sets dictionaries have to type parameters",
    "start": "1959810",
    "end": "1967100"
  },
  {
    "text": "because of course there is a key type and value type in Python unlike some other languages where the key type is",
    "start": "1967100",
    "end": "1972740"
  },
  {
    "text": "always strength tuples are technically not generic types but a special form for",
    "start": "1972740",
    "end": "1979790"
  },
  {
    "text": "example a tuple square bracket int in wool is a three tuple there's also a way",
    "start": "1979790",
    "end": "1985490"
  },
  {
    "text": "to spell a tuple of a variable length but I don't really like those guys",
    "start": "1985490",
    "end": "1992230"
  },
  {
    "text": "perhaps more useful than the concrete container types are the abstract",
    "start": "1993370",
    "end": "1998810"
  },
  {
    "text": "container types like sequence and mapping and mutable mapping and mutable sequence",
    "start": "1998810",
    "end": "2005670"
  },
  {
    "text": "there's at least a dozen of those for those that existing names already were",
    "start": "2005979",
    "end": "2014899"
  },
  {
    "text": "predefined in pythons collections dot ABC module which is pretty old from the",
    "start": "2014899",
    "end": "2023929"
  },
  {
    "text": "first the first time we introduced abstract base classes in Python for my",
    "start": "2023929",
    "end": "2031190"
  },
  {
    "text": "PI we basically sort of steal those names and give them aggressively better",
    "start": "2031190",
    "end": "2038450"
  },
  {
    "text": "meanings then there are a bunch of things that are not so regular there is",
    "start": "2038450",
    "end": "2047570"
  },
  {
    "text": "a type named any which means well for this particular variable don't bother",
    "start": "2047570",
    "end": "2053118"
  },
  {
    "text": "checking the type because I'm going to do nasty things to it which perhaps you shouldn't do in a",
    "start": "2053119",
    "end": "2063138"
  },
  {
    "text": "perfectly well type program but in practice in Python and sort of on the path to gradual typing real",
    "start": "2063139",
    "end": "2070809"
  },
  {
    "text": "realistically that happens also Python has a bunch of dynamic features that when used sparingly are very useful then",
    "start": "2070809",
    "end": "2079908"
  },
  {
    "text": "there is a whole bunch of stuff that I really don't want to get into much there is optional which says it's either an X",
    "start": "2079909",
    "end": "2087710"
  },
  {
    "text": "or it's none very useful a very very common sort of style of of using things",
    "start": "2087710",
    "end": "2096980"
  },
  {
    "text": "in Python even in untyped code how often do you see if X is none then there is",
    "start": "2096980",
    "end": "2103640"
  },
  {
    "text": "Union which is well it could be you can say union of intend stir it could either",
    "start": "2103640",
    "end": "2109369"
  },
  {
    "text": "be an integer or string then you have to insert a runtime type check just like",
    "start": "2109369",
    "end": "2116270"
  },
  {
    "text": "you would do if the code was untyped I'll get to those a little later there is a callable type you can say well the",
    "start": "2116270",
    "end": "2124460"
  },
  {
    "text": "type must be none which is not very useful for arguments but pretty popular for return types obviously then there's",
    "start": "2124460",
    "end": "2131599"
  },
  {
    "text": "no return which means this thing never returns it either loops forever or it",
    "start": "2131599",
    "end": "2137029"
  },
  {
    "text": "raises an exception there's a couple of crazy things having to do with strings and bytes and more",
    "start": "2137029",
    "end": "2147440"
  },
  {
    "text": "things named tuple type Dix a new type that you can look up in the manual so of",
    "start": "2147440",
    "end": "2155390"
  },
  {
    "text": "course these steps can types can can be combined here is a very verbose function",
    "start": "2155390",
    "end": "2161260"
  },
  {
    "text": "signature sequence of tuple of float and float returning tuple of float and float",
    "start": "2161260",
    "end": "2167890"
  },
  {
    "text": "we can solve that with a type alias which is just a Python assignment that",
    "start": "2167890",
    "end": "2173060"
  },
  {
    "text": "takes a type on the right like tuple a float and float and assigns it to name",
    "start": "2173060",
    "end": "2178100"
  },
  {
    "text": "on left and my PI is smart enough to realize oh this is not a regular",
    "start": "2178100",
    "end": "2184100"
  },
  {
    "text": "variable assignments this defines a type that I can then use later and lo and",
    "start": "2184100",
    "end": "2189260"
  },
  {
    "text": "behold you can now write the signature using list of Veck and Veck all pretty",
    "start": "2189260",
    "end": "2198740"
  },
  {
    "text": "standard stuff so escape hooks already mentioned any a few times there are",
    "start": "2198740",
    "end": "2205010"
  },
  {
    "start": "2200000",
    "end": "2384000"
  },
  {
    "text": "other escape hooks there is a cast the cast is completely unsafe maybe at some",
    "start": "2205010",
    "end": "2211850"
  },
  {
    "text": "point we should add a down cast to the",
    "start": "2211850",
    "end": "2217370"
  },
  {
    "text": "repertoire which actually checks that you're doing a down cast and not just",
    "start": "2217370",
    "end": "2222500"
  },
  {
    "text": "casting to some random object other types that's unrelated but we currently",
    "start": "2222500",
    "end": "2227600"
  },
  {
    "text": "don't have that we do have a cast which is like the last resort my PI is",
    "start": "2227600",
    "end": "2237980"
  },
  {
    "text": "apparently confused about what the type of notice we tell my PI don't worry I",
    "start": "2237980",
    "end": "2244580"
  },
  {
    "text": "know it's a list expression and then you can use it as a list expression there is",
    "start": "2244580",
    "end": "2251690"
  },
  {
    "text": "also a different way to just suppress an error that might by my give for example",
    "start": "2251690",
    "end": "2258170"
  },
  {
    "text": "if you import a module that my PI cannot find you can put a type ignore on that",
    "start": "2258170",
    "end": "2263630"
  },
  {
    "text": "line and then my PI will not tell you that it cannot find it however it will",
    "start": "2263630",
    "end": "2270020"
  },
  {
    "text": "create a variable at least in its it's own representation of your program",
    "start": "2270020",
    "end": "2275030"
  },
  {
    "text": "it will say well they're there as a variable that name setup tools that has type ne and if you call a method on it",
    "start": "2275030",
    "end": "2283400"
  },
  {
    "text": "the return type is still any sure Rajan",
    "start": "2283400",
    "end": "2290750"
  },
  {
    "text": "a nobody I don't know that that there",
    "start": "2290750",
    "end": "2309589"
  },
  {
    "text": "are any Python implementations that that run on such unusual platforms see Python",
    "start": "2309589",
    "end": "2319579"
  },
  {
    "text": "is portable as long as you have 8-bit bytes and your integers are at least 32 bits and we're slowly entering a world",
    "start": "2319579",
    "end": "2329060"
  },
  {
    "text": "where we're not even caring about we don't even care about integers or",
    "start": "2329060",
    "end": "2334820"
  },
  {
    "text": "pointers smaller than 64 bits there are some other Python the implementations",
    "start": "2334820",
    "end": "2340849"
  },
  {
    "text": "jython which runs on the JVM aren't Python I think is still in existence",
    "start": "2340849",
    "end": "2347810"
  },
  {
    "text": "which runs it on Microsoft's DRL I'm not",
    "start": "2347810",
    "end": "2353810"
  },
  {
    "text": "sure what the cast sort of could do differently for other platforms I mean",
    "start": "2353810",
    "end": "2362270"
  },
  {
    "text": "this cast is not there to truncate bits or anything it's really really there to",
    "start": "2362270",
    "end": "2368720"
  },
  {
    "text": "correct the type checker and that whether the list expression example was",
    "start": "2368720",
    "end": "2375380"
  },
  {
    "text": "actually meant to be downcast but there's not much difference generics",
    "start": "2375380",
    "end": "2382010"
  },
  {
    "text": "okay so we have generics I already showed list of int and dict off well here's a slightly more complicated",
    "start": "2382010",
    "end": "2388400"
  },
  {
    "start": "2384000",
    "end": "2455000"
  },
  {
    "text": "dictionary that has string keys and tuples of two integers for values you",
    "start": "2388400",
    "end": "2396800"
  },
  {
    "text": "can also create generic type aliases you need a type variable type variables are",
    "start": "2396800",
    "end": "2402800"
  },
  {
    "text": "one of the warts of the type system because we didn't have a way to to sort of introduce type",
    "start": "2402800",
    "end": "2410990"
  },
  {
    "text": "variables without pre declaring them so you have to call a utility function to",
    "start": "2410990",
    "end": "2417530"
  },
  {
    "text": "create a type variable and you shouldn't",
    "start": "2417530",
    "end": "2423170"
  },
  {
    "text": "be playing dynamic tricks with that because the type checker is not actually ever executing your code the type",
    "start": "2423170",
    "end": "2428930"
  },
  {
    "text": "checker is just reading your code and trying to guess what it means anyway so we can create a generic type alias name",
    "start": "2428930",
    "end": "2435950"
  },
  {
    "text": "pair which is a tuple of two values that have the same type and then we can",
    "start": "2435950",
    "end": "2442520"
  },
  {
    "text": "derive from that a type alias named Veck",
    "start": "2442520",
    "end": "2448280"
  },
  {
    "text": "which is a pair of floats and then we can find the same add vectors function again you can also define your own",
    "start": "2448280",
    "end": "2457550"
  },
  {
    "start": "2455000",
    "end": "2616000"
  },
  {
    "text": "generic classes which is much more interesting stuff than using them again",
    "start": "2457550",
    "end": "2464000"
  },
  {
    "text": "you have to start with type variable and then you creates you you start with",
    "start": "2464000",
    "end": "2470780"
  },
  {
    "text": "class statement stack plus stack your base class must be generic of some type",
    "start": "2470780",
    "end": "2479840"
  },
  {
    "text": "variable now you can also include other base fare base classes still so you can have multiple inheritance from a",
    "start": "2479840",
    "end": "2488510"
  },
  {
    "text": "non-generic class or from a different legionary class but basically you must",
    "start": "2488510",
    "end": "2494300"
  },
  {
    "text": "have generic of T in there now we have an instance variable named data declared",
    "start": "2494300",
    "end": "2501140"
  },
  {
    "text": "in the class using Python field 6 and",
    "start": "2501140",
    "end": "2506240"
  },
  {
    "text": "later syntax we spent a lot of time",
    "start": "2506240",
    "end": "2511550"
  },
  {
    "text": "debating how we would introduce variable declarations that were somewhat similar",
    "start": "2511550",
    "end": "2517220"
  },
  {
    "text": "to the function annotations that we",
    "start": "2517220",
    "end": "2522800"
  },
  {
    "text": "already have and we ended up introducing syntax that does not use a new keyword",
    "start": "2522800",
    "end": "2528350"
  },
  {
    "text": "you just say variable name colon type and that has worked out pretty well very",
    "start": "2528350",
    "end": "2534290"
  },
  {
    "text": "sort of short and pythonic before that",
    "start": "2534290",
    "end": "2539630"
  },
  {
    "text": "you would have to use a type comment on a variable initializer anyway this is",
    "start": "2539630",
    "end": "2545000"
  },
  {
    "text": "your classic stack except I forgot the full or empty method there is a push",
    "start": "2545000",
    "end": "2551360"
  },
  {
    "text": "that takes a T there's a pump that returns a T for things that return nothing you have to explicitly say",
    "start": "2551360",
    "end": "2558080"
  },
  {
    "text": "returns none and then on the right we have little we create a stack so to",
    "start": "2558080",
    "end": "2565700"
  },
  {
    "text": "create the stack to instantiate that generic class you have to first in Chet",
    "start": "2565700",
    "end": "2571490"
  },
  {
    "text": "instantiate stack of T to stack of int and then you have to call that to create an instance",
    "start": "2571490",
    "end": "2578470"
  },
  {
    "text": "there's some cashing there to make it fast now you push an integer you can not",
    "start": "2578470",
    "end": "2583610"
  },
  {
    "text": "push a string at least they've made what at runtime you can but if the type checker catches you doing that it will",
    "start": "2583610",
    "end": "2590150"
  },
  {
    "text": "give you an error you can pop something from that stack and then the inferred",
    "start": "2590150",
    "end": "2596120"
  },
  {
    "text": "type for that variable will certainly be in an integer which you can prove to",
    "start": "2596120",
    "end": "2603170"
  },
  {
    "text": "yourself by sort of trying to do something to it that you can do with integers there's also a built-in",
    "start": "2603170",
    "end": "2609080"
  },
  {
    "text": "function in only in my PI revealed type that will just print the type as an error message that's really just for",
    "start": "2609080",
    "end": "2615950"
  },
  {
    "text": "debugging what are we getting to here",
    "start": "2615950",
    "end": "2622089"
  },
  {
    "start": "2616000",
    "end": "2883000"
  },
  {
    "text": "runtime type checks so when say you have an optional and a function upper that",
    "start": "2623890",
    "end": "2632180"
  },
  {
    "text": "takes an optional string and apparently there are some cases where we want to be",
    "start": "2632180",
    "end": "2639110"
  },
  {
    "text": "able to pass none into it and then we want to get on an empty string back a",
    "start": "2639110",
    "end": "2644260"
  },
  {
    "text": "different version actually would also return an optional string but let's say",
    "start": "2644260",
    "end": "2650420"
  },
  {
    "text": "well we want to always return a string so the way you write that is if the",
    "start": "2650420",
    "end": "2657680"
  },
  {
    "text": "argument is actually a string we call the upper method on it there's an",
    "start": "2657680",
    "end": "2663080"
  },
  {
    "text": "existing string method named upper but of course you can't call that on none otherwise if it's not a string we just",
    "start": "2663080",
    "end": "2670580"
  },
  {
    "text": "return an empty string on the right is code that works the same",
    "start": "2670580",
    "end": "2676220"
  },
  {
    "text": "way except instead of using is instance it just checks if it's none returned an empty string that's actually more",
    "start": "2676220",
    "end": "2682700"
  },
  {
    "text": "idiomatic my PI understands both versions equally well and it will will",
    "start": "2682700",
    "end": "2693710"
  },
  {
    "text": "understand that in one branch of the if statement the type of the variable is",
    "start": "2693710",
    "end": "2700370"
  },
  {
    "text": "actually ster what do we have on the bottom we have a similar case where we",
    "start": "2700370",
    "end": "2706610"
  },
  {
    "text": "check we take an an argument that could be any object which you can express with",
    "start": "2706610",
    "end": "2713600"
  },
  {
    "text": "object and unlike any object does not suppress any error messages so you can't",
    "start": "2713600",
    "end": "2719720"
  },
  {
    "text": "do anything with an object because the type checker says object has no methods well you can convert it to a string",
    "start": "2719720",
    "end": "2726170"
  },
  {
    "text": "that's about it so if that object is an integer then we",
    "start": "2726170",
    "end": "2731840"
  },
  {
    "text": "add one to it and otherwise we just give up and return zero on the right I have a",
    "start": "2731840",
    "end": "2737540"
  },
  {
    "text": "little helper function that takes an optional int and returns a non-optional",
    "start": "2737540",
    "end": "2742550"
  },
  {
    "text": "int and at runtime it just throws an",
    "start": "2742550",
    "end": "2748490"
  },
  {
    "text": "assertion error when the argument is not none sorry when the argument is none again the type checker understands",
    "start": "2748490",
    "end": "2757070"
  },
  {
    "text": "things like is instance or is none or even just false sort of a equals B or",
    "start": "2757070",
    "end": "2766070"
  },
  {
    "text": "just if a it understands those things in assertions as well as in if statements",
    "start": "2766070",
    "end": "2771430"
  },
  {
    "text": "and it will do the right thing there so that again that's those three statements",
    "start": "2771430",
    "end": "2782570"
  },
  {
    "text": "on the bottom right type check correctly the required call will in fact raise an",
    "start": "2782570",
    "end": "2790940"
  },
  {
    "text": "assertion error if there's no key in that dictionary D which is apparently",
    "start": "2790940",
    "end": "2796460"
  },
  {
    "text": "the functionality that we want for this particular require function yeah",
    "start": "2796460",
    "end": "2803050"
  },
  {
    "text": "is that included in some sort of specification or is that just how my eye works and user has to understand that like pyre might work differently no we",
    "start": "2804280",
    "end": "2811870"
  },
  {
    "text": "we have that that particular one we have nailed down in that four eight four yeah",
    "start": "2811870",
    "end": "2818110"
  },
  {
    "text": "yep four eight four does not nail down every corner case of the type system",
    "start": "2818110",
    "end": "2824220"
  },
  {
    "text": "unfortunately and there there are other corner cases of inference where it doesn't doesn't specify things",
    "start": "2824220",
    "end": "2832140"
  },
  {
    "text": "completely and unfortunately pyre and why I give vastly different answers on",
    "start": "2832140",
    "end": "2838450"
  },
  {
    "text": "some program actually on many interesting programs but my PI is sort",
    "start": "2838450",
    "end": "2844090"
  },
  {
    "text": "of the reference implementation at this point and the pyre people are feeding us sort of complaints and bug reports and",
    "start": "2844090",
    "end": "2851860"
  },
  {
    "text": "feature requests and I expect that they will also send us requests to change the",
    "start": "2851860",
    "end": "2859750"
  },
  {
    "text": "status the standard let's see",
    "start": "2859750",
    "end": "2867340"
  },
  {
    "text": "so after pep for eight four good thing you mentioned that we started sort of",
    "start": "2867340",
    "end": "2875380"
  },
  {
    "text": "evolving the type system a bit and probably the biggest addition is",
    "start": "2875380",
    "end": "2880830"
  },
  {
    "text": "protocols or duck typing I'll try to",
    "start": "2880830",
    "end": "2887740"
  },
  {
    "start": "2883000",
    "end": "3245000"
  },
  {
    "text": "read through this example quickly there is a log function that takes a message and a file object and it appends a new",
    "start": "2887740",
    "end": "2896800"
  },
  {
    "text": "line to the string arguments and then writes that thing to the file very",
    "start": "2896800",
    "end": "2901810"
  },
  {
    "text": "primitive logging function then there is a class save which derives from the",
    "start": "2901810",
    "end": "2908170"
  },
  {
    "text": "stack class I defined previously just for convenience and to show that you can",
    "start": "2908170",
    "end": "2916140"
  },
  {
    "text": "inherit from a generic class sort of specializing it to a specific type",
    "start": "2916140",
    "end": "2922060"
  },
  {
    "text": "because save is no longer generic it is a stack of strings that has has a write",
    "start": "2922060",
    "end": "2927400"
  },
  {
    "text": "method so the write method just pushes that message on the stack and I don't know",
    "start": "2927400",
    "end": "2933880"
  },
  {
    "text": "what happens to it after that so we're creating more those savers and we try to log to it now",
    "start": "2933880",
    "end": "2941980"
  },
  {
    "text": "if you run that code it will actually work but if you try to type check it you",
    "start": "2941980",
    "end": "2947020"
  },
  {
    "text": "get a complaint from my PI saying that save object nevermind that it has a",
    "start": "2947020",
    "end": "2954730"
  },
  {
    "text": "right method then and everything works just fine it's not actually an instance",
    "start": "2954730",
    "end": "2960970"
  },
  {
    "text": "of IO of ster which is the very elaborate type that defines the i/o",
    "start": "2960970",
    "end": "2967540"
  },
  {
    "text": "streams in Python which has like two dozen methods write and read and read line and read lines and read into is a",
    "start": "2967540",
    "end": "2976960"
  },
  {
    "text": "TTY way to many methods it's also",
    "start": "2976960",
    "end": "2983980"
  },
  {
    "text": "generic because you have files of strings and files of bytes anyway the type checking doesn't work well here so",
    "start": "2983980",
    "end": "2991030"
  },
  {
    "text": "we want a way to say accept anything that has a write method",
    "start": "2991030",
    "end": "2996370"
  },
  {
    "text": "well actually accept anything that has a write method that takes one argument that is a string so here we go we define",
    "start": "2996370",
    "end": "3005220"
  },
  {
    "text": "a class writable and we writable and we inherited from a predefined thing named",
    "start": "3005220",
    "end": "3010650"
  },
  {
    "text": "protocol we add a method to it the",
    "start": "3010650",
    "end": "3016410"
  },
  {
    "text": "method is complete dummy there's a path there you can also literally use the",
    "start": "3016410",
    "end": "3022200"
  },
  {
    "text": "syntax dot dot dot instead of the pass although that won't work if you're also",
    "start": "3022200",
    "end": "3027540"
  },
  {
    "text": "Python 2 compatible this is not a class",
    "start": "3027540",
    "end": "3035040"
  },
  {
    "text": "that you can instantiate this is a class for putting in signatures so now we",
    "start": "3035040",
    "end": "3042270"
  },
  {
    "text": "change your log method and the rest of the code is the same we change it to say that the file argument is a writable",
    "start": "3042270",
    "end": "3049160"
  },
  {
    "text": "well since the only thing we do with it is call it write method that works just",
    "start": "3049160",
    "end": "3054690"
  },
  {
    "text": "fine and since that save class actually has a",
    "start": "3054690",
    "end": "3061440"
  },
  {
    "text": "write method of the correct signature the last line the log call is actually",
    "start": "3061440",
    "end": "3068700"
  },
  {
    "text": "now correct and this is how we deal with duck typing",
    "start": "3068700",
    "end": "3075030"
  },
  {
    "text": "there are a few details like in most versions of the typing module you would",
    "start": "3075030",
    "end": "3081750"
  },
  {
    "text": "have to import protocols from a typing extensions module but will smoothen that",
    "start": "3081750",
    "end": "3088619"
  },
  {
    "text": "out eventually so the key thing to note here is that",
    "start": "3088619",
    "end": "3093720"
  },
  {
    "text": "writeable is not an abstract base class because save does not in fact inherit",
    "start": "3093720",
    "end": "3099000"
  },
  {
    "text": "from writable so without protocols you",
    "start": "3099000",
    "end": "3104790"
  },
  {
    "text": "could only solve this by defining a abstract base class that has the defines",
    "start": "3104790",
    "end": "3113190"
  },
  {
    "text": "the write method and modifying the i/o class which is deep inside the standard",
    "start": "3113190",
    "end": "3120270"
  },
  {
    "text": "library to inherit from that writable class we sort of we did this long ago in",
    "start": "3120270",
    "end": "3128130"
  },
  {
    "text": "the standard library for one or two very popular duck type methods like there's a",
    "start": "3128130",
    "end": "3134220"
  },
  {
    "text": "hashable class there which if you check",
    "start": "3134220",
    "end": "3139440"
  },
  {
    "text": "dynamically is this thing hashable the hat you can use that is instance law of hashable and the hashable class",
    "start": "3139440",
    "end": "3146280"
  },
  {
    "text": "overloads the is instance behavior and just checks is there a right is is there",
    "start": "3146280",
    "end": "3151500"
  },
  {
    "text": "a dunder hash method that stuff doesn't really scale yes questions that it does",
    "start": "3151500",
    "end": "3162839"
  },
  {
    "text": "not that is really difficult because",
    "start": "3162839",
    "end": "3168960"
  },
  {
    "text": "that sort of my PI would need its own interpreter that is able to execute all",
    "start": "3168960",
    "end": "3175200"
  },
  {
    "text": "the code in this instance or his subclass overload method so we chose not",
    "start": "3175200",
    "end": "3181800"
  },
  {
    "text": "yet to go down that path future generations will get some PhDs out of",
    "start": "3181800",
    "end": "3189270"
  },
  {
    "text": "that probably but that would that would",
    "start": "3189270",
    "end": "3196140"
  },
  {
    "text": "really not solve everything for protocols it would certainly be a very",
    "start": "3196140",
    "end": "3202410"
  },
  {
    "text": "large stick to kill that particular mouse poorly translated Dutch say okay",
    "start": "3202410",
    "end": "3212480"
  },
  {
    "text": "well glad you're all still with me here so there are many details I didn't even",
    "start": "3212480",
    "end": "3218210"
  },
  {
    "text": "mention the typing module you can look that up in the documentation I do want",
    "start": "3218210",
    "end": "3223339"
  },
  {
    "text": "to mention stub files and a thing called type shed sometimes there is no source",
    "start": "3223339",
    "end": "3229400"
  },
  {
    "text": "code to annotate and where is my PI going to get its type definitions from",
    "start": "3229400",
    "end": "3236559"
  },
  {
    "text": "this happens when the code is written in C or C++ or Fortran sometimes there is",
    "start": "3236559",
    "end": "3246710"
  },
  {
    "start": "3245000",
    "end": "3334000"
  },
  {
    "text": "source code but it's too crusty or it's read-only for some reason you don't want",
    "start": "3246710",
    "end": "3251720"
  },
  {
    "text": "to annotate it the standard library has a lot of very crusty code that would not be easy to annotate so my pie is",
    "start": "3251720",
    "end": "3260329"
  },
  {
    "text": "actually configured not to bother reading the standard library it never never reads any standard library code",
    "start": "3260329",
    "end": "3266690"
  },
  {
    "text": "and it doesn't read any install packet third-party code either but it does read",
    "start": "3266690",
    "end": "3272180"
  },
  {
    "text": "a thing called type chat which is a collection of stub modules that are basically class definitions with empty",
    "start": "3272180",
    "end": "3280789"
  },
  {
    "text": "method bodies and function definitions and constant definitions and few other",
    "start": "3280789",
    "end": "3286400"
  },
  {
    "text": "things but like it's in tactically valid",
    "start": "3286400",
    "end": "3291859"
  },
  {
    "text": "Python code it is not executable but it has all the type annotations that are",
    "start": "3291859",
    "end": "3298369"
  },
  {
    "text": "necessary to make my PI understand what's going on and so we start out with",
    "start": "3298369",
    "end": "3303559"
  },
  {
    "text": "like a stub for the built-ins module and we have stubs for I would say at least a",
    "start": "3303559",
    "end": "3310670"
  },
  {
    "text": "third of the standard library that doesn't sound like much but it's definitely the most popular third and a",
    "start": "3310670",
    "end": "3318049"
  },
  {
    "text": "small number of popular third-party code and I think I already mentioned this",
    "start": "3318049",
    "end": "3323450"
  },
  {
    "text": "this is also an open source collection it's on github and it's actually shared",
    "start": "3323450",
    "end": "3329750"
  },
  {
    "text": "with all the other static type analyzers for Python another thing I want to",
    "start": "3329750",
    "end": "3336589"
  },
  {
    "start": "3334000",
    "end": "3546000"
  },
  {
    "text": "mention briefly is suppose you have a million lines of code or maybe just 10,000 lines to start",
    "start": "3336589",
    "end": "3345530"
  },
  {
    "text": "small somewhat small how do you get that",
    "start": "3345530",
    "end": "3352980"
  },
  {
    "text": "stuff annotated if you point my pie at 10,000 lines of code that you wrote over",
    "start": "3352980",
    "end": "3359490"
  },
  {
    "text": "the past two years let alone five million lines of code you wrote over the",
    "start": "3359490",
    "end": "3364950"
  },
  {
    "text": "past decade it's gonna throw a lot of errors it might even crash man in 2015 when we",
    "start": "3364950",
    "end": "3373319"
  },
  {
    "text": "started experimenting we thought we fixed a lot of my pie crashes just",
    "start": "3373319",
    "end": "3379380"
  },
  {
    "text": "because that sort of the drop box code was much richer in all the corner cases of Python that it explored that any of",
    "start": "3379380",
    "end": "3387270"
  },
  {
    "text": "the test cases we had thought of at the",
    "start": "3387270",
    "end": "3392760"
  },
  {
    "text": "last icon in May in Cleveland was a good talk by Greg price clear code at scale",
    "start": "3392760",
    "end": "3400650"
  },
  {
    "text": "aesthetic types at Zoo leap and Dropbox which sort of explains step by step how",
    "start": "3400650",
    "end": "3409680"
  },
  {
    "text": "should you go about it my three point summary of that is write some kind of",
    "start": "3409680",
    "end": "3416849"
  },
  {
    "text": "wrapper script that sort of invokes my pie on the right set of files with the",
    "start": "3416849",
    "end": "3422430"
  },
  {
    "text": "right set of flags start annotating only",
    "start": "3422430",
    "end": "3427770"
  },
  {
    "text": "a small number of files in fact start analyzing only a small number of files",
    "start": "3427770",
    "end": "3432990"
  },
  {
    "text": "at a time so you don't get overwhelmed set up continuous integration so that",
    "start": "3432990",
    "end": "3438599"
  },
  {
    "text": "once you you have a fixed point where you have zero errors for at least the",
    "start": "3438599",
    "end": "3445079"
  },
  {
    "text": "configuration that that you actually have in that script you will keep your",
    "start": "3445079",
    "end": "3451319"
  },
  {
    "text": "developers or yourself if it's just you honest and you don't introduce new type",
    "start": "3451319",
    "end": "3459270"
  },
  {
    "text": "failures and then I want to mention that",
    "start": "3459270",
    "end": "3464430"
  },
  {
    "text": "there is a config file where you can set things like strict optional is true the",
    "start": "3464430",
    "end": "3469890"
  },
  {
    "text": "whole story I mentioned about optional actually only works if you use strict optional is true you can also say",
    "start": "3469890",
    "end": "3476130"
  },
  {
    "text": "disallow untyped calls which is useful flag that tells my PI if I mean type",
    "start": "3476130",
    "end": "3483989"
  },
  {
    "text": "checked code and I see a call to a method or function that has no",
    "start": "3483989",
    "end": "3491069"
  },
  {
    "text": "annotations flag that as an error by",
    "start": "3491069",
    "end": "3496349"
  },
  {
    "text": "default when anything that's uh Nana kated is just seeing as a big blob of",
    "start": "3496349",
    "end": "3501900"
  },
  {
    "text": "Enys and when you call that it always type checks fine and whatever it returns",
    "start": "3501900",
    "end": "3507989"
  },
  {
    "text": "is now inferred as also having type any and that in many cases sort of",
    "start": "3507989",
    "end": "3514709"
  },
  {
    "text": "propagates through the rest of your code or at least to the bottom of your function or however far you you're using",
    "start": "3514709",
    "end": "3521190"
  },
  {
    "text": "the variable that captured that result so by using disallow untyped calls you",
    "start": "3521190",
    "end": "3528809"
  },
  {
    "text": "can make my pilot pick here about that particular situation there is like 30",
    "start": "3528809",
    "end": "3534779"
  },
  {
    "text": "more flags that effect all sorts of things like where to look for modules",
    "start": "3534779",
    "end": "3540029"
  },
  {
    "text": "and a whole bunch more strictness Flags oh yeah they're also you can specify",
    "start": "3540029",
    "end": "3545400"
  },
  {
    "text": "most of the flags differently for different packages or modules so here's",
    "start": "3545400",
    "end": "3552269"
  },
  {
    "start": "3546000",
    "end": "4626000"
  },
  {
    "text": "a summary of the standardization effort at 484 sort of was the result of a long",
    "start": "3552269",
    "end": "3560759"
  },
  {
    "text": "and painful discussion in the community about well should we have type annotations what should it look like",
    "start": "3560759",
    "end": "3566609"
  },
  {
    "text": "what should the syntax be in the end",
    "start": "3566609",
    "end": "3571859"
  },
  {
    "text": "that the sort of the mypie design mostly prevailed it's definitely",
    "start": "3571859",
    "end": "3578339"
  },
  {
    "text": "not a complete standard you couldn't start implementing a type checker from just that specification and end up with",
    "start": "3578339",
    "end": "3586319"
  },
  {
    "text": "the useful type checker it would sort of report errors for most interesting Python programs the variable annotation",
    "start": "3586319",
    "end": "3595380"
  },
  {
    "text": "syntax was not in Python 3 when it was created so we had a separate pep for",
    "start": "3595380",
    "end": "3600959"
  },
  {
    "text": "that and it's only available in 36 then protocols were their own pep",
    "start": "3600959",
    "end": "3607339"
  },
  {
    "text": "we have another pet that lets you publish stubs outside the type shed",
    "start": "3607339",
    "end": "3613220"
  },
  {
    "text": "collection because while type chat is a really handy way to bootstrap you for",
    "start": "3613220",
    "end": "3618270"
  },
  {
    "text": "third party packages it really doesn't scale to have everyone submit their",
    "start": "3618270",
    "end": "3623910"
  },
  {
    "text": "stubs to type chat in fact there are many third-party packages that are not",
    "start": "3623910",
    "end": "3629550"
  },
  {
    "text": "very popular and commonly used and have conflicting names so who's whose",
    "start": "3629550",
    "end": "3636060"
  },
  {
    "text": "packaging ends up in in type shed so the answer is neither but each package can",
    "start": "3636060",
    "end": "3643440"
  },
  {
    "text": "publish their stubs with their package or separate for as a separate package",
    "start": "3643440",
    "end": "3649589"
  },
  {
    "text": "and then their first thing that came out of Facebook was for word references",
    "start": "3649589",
    "end": "3655230"
  },
  {
    "text": "which I didn't even mention here but there are so much painful syntactically",
    "start": "3655230",
    "end": "3660800"
  },
  {
    "text": "and there's now a future import where you can avoid most so that pain that's",
    "start": "3660800",
    "end": "3669060"
  },
  {
    "text": "actually it except for our questions I have a bunch of handy links mypie long",
    "start": "3669060",
    "end": "3674460"
  },
  {
    "text": "wrangled org is really the only one you have to memorize because all the others are linked from there yeah how to",
    "start": "3674460",
    "end": "3680819"
  },
  {
    "text": "install it tip 3 install my pie my pie itself of course is a PI 3 program even though it",
    "start": "3680819",
    "end": "3688619"
  },
  {
    "text": "can analyze Python 2 code and here are",
    "start": "3688619",
    "end": "3693720"
  },
  {
    "text": "some more links to all the various bits of tooling that I could remember this",
    "start": "3693720",
    "end": "3698730"
  },
  {
    "text": "afternoon including Peyer which is named pyar check on github we have two of",
    "start": "3698730",
    "end": "3707670"
  },
  {
    "text": "everything it seems we have two different packages that do run time type collection which is something again",
    "start": "3707670",
    "end": "3716240"
  },
  {
    "text": "didn't mention at all but again when you're annotating a large code base that",
    "start": "3716240",
    "end": "3721680"
  },
  {
    "text": "is already working and you've got unit tests and everything it would be nice if",
    "start": "3721680",
    "end": "3727410"
  },
  {
    "text": "you could instrument your running program with something that observes",
    "start": "3727410",
    "end": "3732780"
  },
  {
    "text": "every single function call and logs what are the types of the arguments",
    "start": "3732780",
    "end": "3738950"
  },
  {
    "text": "and well it turns out there's not a completely trivial problem so Dropbox",
    "start": "3738950",
    "end": "3745160"
  },
  {
    "text": "and Facebook came up with separate solutions type checkers the lor so",
    "start": "3745160",
    "end": "3755859"
  },
  {
    "text": "questions heckling selfie requests",
    "start": "3755859",
    "end": "3761450"
  },
  {
    "text": "[Applause]",
    "start": "3761450",
    "end": "3769910"
  },
  {
    "text": "couldn't cram that into a slide either the variant story is that there is a way",
    "start": "3776829",
    "end": "3783950"
  },
  {
    "text": "to say it's covariant invariant or contravariant in each type variable you",
    "start": "3783950",
    "end": "3792140"
  },
  {
    "text": "could you you can have things that are that have multiple type variables like dictionary is invariant in both of its",
    "start": "3792140",
    "end": "3800900"
  },
  {
    "text": "type arguments on the other hand mapping which is a read-only version of",
    "start": "3800900",
    "end": "3807200"
  },
  {
    "text": "dictionary is covariant in the value type tigran's no that is definitely an",
    "start": "3807200",
    "end": "3829130"
  },
  {
    "text": "issue I refrained from showing a certain",
    "start": "3829130",
    "end": "3834230"
  },
  {
    "text": "example because of that currently it",
    "start": "3834230",
    "end": "3839720"
  },
  {
    "text": "doesn't seem to be a big deal because in",
    "start": "3839720",
    "end": "3845950"
  },
  {
    "text": "general people have already solved this problem for untyped code which is kind",
    "start": "3845950",
    "end": "3855920"
  },
  {
    "text": "of a cop-out but that's sort of realistically that's that's where we are we are mostly adding annotations to",
    "start": "3855920",
    "end": "3863480"
  },
  {
    "text": "existing code and like that stack example works just found",
    "start": "3863480",
    "end": "3870410"
  },
  {
    "text": "without find without ever being able to instantiate tea obviously there are",
    "start": "3870410",
    "end": "3876140"
  },
  {
    "text": "other examples where it's not so easy like that this the summing example would",
    "start": "3876140",
    "end": "3884330"
  },
  {
    "text": "be nice if you could create a new tea but the problem is in Python you can't",
    "start": "3884330",
    "end": "3889370"
  },
  {
    "text": "always create a new instance of a class without knowing the signature of its constructor so we really don't I mean",
    "start": "3889370",
    "end": "3898450"
  },
  {
    "text": "Python just doesn't really lend itself to doing something like that okay I'm",
    "start": "3898450",
    "end": "3951950"
  },
  {
    "text": "actually kind of curious how many cases are there of things being removed from",
    "start": "3951950",
    "end": "3958300"
  },
  {
    "text": "we have not done it for that reason we have removed things from type shed but",
    "start": "3965500",
    "end": "3971630"
  },
  {
    "text": "always for the reason that the module or the package turned out to be hopelessly",
    "start": "3971630",
    "end": "3977600"
  },
  {
    "text": "dynamic and someone had contribute partial stubs that caused more pain than",
    "start": "3977600",
    "end": "3983920"
  },
  {
    "text": "than being helpful I expect that people will start sort of",
    "start": "3983920",
    "end": "3995890"
  },
  {
    "text": "taking their their own annotations in their own hands that the",
    "start": "3995890",
    "end": "4001390"
  },
  {
    "text": "first example that that will happen I think is the utter package or utters I",
    "start": "4001390",
    "end": "4006760"
  },
  {
    "text": "think you do import adder it's very popular in certain circles it turns out",
    "start": "4006760",
    "end": "4015040"
  },
  {
    "text": "that adder is not easily typed using this type system but my PI has a plug-in",
    "start": "4015040",
    "end": "4022780"
  },
  {
    "text": "mechanism which is currently still very experimental but someone contributed a",
    "start": "4022780",
    "end": "4029460"
  },
  {
    "text": "plugin that lets you type classes created with the help of utters",
    "start": "4029460",
    "end": "4035260"
  },
  {
    "text": "decorators after is incredibly dynamic it's a class decorator and a bunch of",
    "start": "4035260",
    "end": "4042220"
  },
  {
    "text": "things you put in the class and suddenly the class has an automatically generated",
    "start": "4042220",
    "end": "4049800"
  },
  {
    "text": "comparison constructor or a bunch of other things maybe pickle support",
    "start": "4049800",
    "end": "4056160"
  },
  {
    "text": "hashing and because it's a class",
    "start": "4056160",
    "end": "4061750"
  },
  {
    "text": "decorator that sort of just adds methods",
    "start": "4061750",
    "end": "4067240"
  },
  {
    "text": "to the class my PI has no hopes of understanding what's going on there so",
    "start": "4067240",
    "end": "4072880"
  },
  {
    "text": "when you instantiate an instance of those class my PI is very sad or actually the user is very sad so using",
    "start": "4072880",
    "end": "4082750"
  },
  {
    "text": "the plug-in we basically special case Mike my PI so that it actually",
    "start": "4082750",
    "end": "4088660"
  },
  {
    "text": "understands what that class decorator does in that particular case without having a like a hole interpreter for for",
    "start": "4088660",
    "end": "4097569"
  },
  {
    "text": "class decorators built into my PI but one of the first bits of feedback we got",
    "start": "4097570",
    "end": "4104710"
  },
  {
    "text": "was well adders is evolving there's enters 1.7 and 1.8 and whatever comes",
    "start": "4104710",
    "end": "4112420"
  },
  {
    "text": "next and they're all different and now we want to have different versions of the plug-in that will happen there",
    "start": "4112420",
    "end": "4124960"
  },
  {
    "text": "they're sort of that we there there are",
    "start": "4124960",
    "end": "4131259"
  },
  {
    "text": "a couple of other packages for example Jango where people are working on a set of stubs and Pep 561 is coming",
    "start": "4131260",
    "end": "4138880"
  },
  {
    "text": "just in time so that's no Django stubs will ever have to be placed into type",
    "start": "4138880",
    "end": "4143949"
  },
  {
    "text": "chat because Django can just publish its own stubs and of course it can publish",
    "start": "4143949",
    "end": "4149020"
  },
  {
    "text": "different versions of the stubs for different versions of Jenga which is also the point sure",
    "start": "4149020",
    "end": "4154480"
  },
  {
    "text": "back to you well okay",
    "start": "4154480",
    "end": "4158609"
  },
  {
    "text": "it supports a tiny bit of magic just",
    "start": "4163830",
    "end": "4168929"
  },
  {
    "text": "enough to understand I believe yeah I'm",
    "start": "4168929",
    "end": "4197320"
  },
  {
    "text": "sure Dropbox uses some of those things internally is that how they sort of approach that sort of Dropbox is trying",
    "start": "4197320",
    "end": "4206170"
  },
  {
    "text": "to stay away from Jason not always successfully this explains why we have a",
    "start": "4206170",
    "end": "4213760"
  },
  {
    "text": "protobuf plot let's not plug in well it's a plug-in for the protobuf compiler",
    "start": "4213760",
    "end": "4219429"
  },
  {
    "text": "actually we don't have a good strategy for Jason other than saying well you",
    "start": "4219429",
    "end": "4225940"
  },
  {
    "text": "have to write a verifier and verifier should probably return objects of a same",
    "start": "4225940",
    "end": "4232030"
  },
  {
    "text": "class that can be fully typed if you have a very basic JSON schema that isn't",
    "start": "4232030",
    "end": "4240280"
  },
  {
    "text": "recursive you can also use a thing called type dict which is a hack where you can tell my PI",
    "start": "4240280",
    "end": "4249630"
  },
  {
    "text": "well here's a type and it's just an alias for type check it as follows it should only have these five",
    "start": "4249630",
    "end": "4258040"
  },
  {
    "text": "keys and for the first key the type of the value is that and for the second key",
    "start": "4258040",
    "end": "4264250"
  },
  {
    "text": "the type of the value is that and so on and you have to only index it with literals for the keys and",
    "start": "4264250",
    "end": "4272020"
  },
  {
    "text": "it turns out that there is a law of sort of Perl code written in Python that uses this approach and Jason often follows",
    "start": "4272020",
    "end": "4280900"
  },
  {
    "text": "that pattern as well but yeah that there",
    "start": "4280900",
    "end": "4286780"
  },
  {
    "text": "are definitely some some things that could be done better for Jason in",
    "start": "4286780",
    "end": "4292060"
  },
  {
    "text": "particular well the DB API is purely a",
    "start": "4292060",
    "end": "4302950"
  },
  {
    "text": "runtime thing so it's too late because all the type checking happens just by reading your source code so I didn't yet",
    "start": "4302950",
    "end": "4311820"
  },
  {
    "text": "four databases we would probably have to have some other way where you you sort",
    "start": "4311820",
    "end": "4321400"
  },
  {
    "text": "of you somehow get the database engine to spit out the schema and then you have",
    "start": "4321400",
    "end": "4329290"
  },
  {
    "text": "a little translator that turns that schema into a set of class definitions",
    "start": "4329290",
    "end": "4334540"
  },
  {
    "text": "that have annotations in them and then you can use that yeah I'm afraid that",
    "start": "4334540",
    "end": "4359140"
  },
  {
    "text": "that is really out of scope for this talk because I I have no idea what you're talking about",
    "start": "4359140",
    "end": "4364380"
  },
  {
    "text": "sorry file a bug okay first off thank",
    "start": "4364380",
    "end": "4370690"
  },
  {
    "text": "you very much for the talk and I'll admit I'm not a programmer so I'm not qualified these are two philosophical",
    "start": "4370690",
    "end": "4378550"
  },
  {
    "text": "questions I was startled by what are your slides saying the advantages of a dynamically typed language including the",
    "start": "4378550",
    "end": "4384730"
  },
  {
    "text": "fact it's exciting power tool if black &",
    "start": "4384730",
    "end": "4392650"
  },
  {
    "text": "decker made a chainsaw with no safety interlocks they could say was a real fighting chainsaw but I don't think",
    "start": "4392650",
    "end": "4399340"
  },
  {
    "text": "that's what they were so the first question is that a product should be",
    "start": "4399340",
    "end": "4405250"
  },
  {
    "text": "safe above all else and in retrospect do you think it was a mistake to not have",
    "start": "4405250",
    "end": "4410800"
  },
  {
    "text": "this be strongly tight ethically tight from the store that's that I don't know",
    "start": "4410800",
    "end": "4419949"
  },
  {
    "text": "I the anthropic principle for that if I had created a statically typed language",
    "start": "4419949",
    "end": "4426340"
  },
  {
    "text": "I would have had to compete with C++ and Java and I wouldn't be standing here",
    "start": "4426340",
    "end": "4433469"
  },
  {
    "text": "from the opposite perspective a product that's easy to use or easy to jump onto",
    "start": "4441210",
    "end": "4447489"
  },
  {
    "text": "the bandwagon that looks appealing that's fun that does have value because otherwise it might just founder I don't",
    "start": "4447489",
    "end": "4456790"
  },
  {
    "text": "know how to balance the philosophy of giving people what they want versus giving people what they need doing what",
    "start": "4456790",
    "end": "4462159"
  },
  {
    "text": "they want persons pushing on them some reason their consciousness and what",
    "start": "4462159",
    "end": "4468489"
  },
  {
    "text": "exactly it is it that they need I mean I I also created a language that while",
    "start": "4468489",
    "end": "4475780"
  },
  {
    "text": "being dynamically typed was not easy to set hold and apart from one corner of",
    "start": "4475780",
    "end": "4484659"
  },
  {
    "text": "the standard library whose only goal it is to to sort of unsafely hook into see",
    "start": "4484659",
    "end": "4492420"
  },
  {
    "text": "you cannot segfault python easily from within itself I mean you'd have to",
    "start": "4492420",
    "end": "4498730"
  },
  {
    "text": "basically rely on a bug and interpreter",
    "start": "4498730",
    "end": "4506370"
  },
  {
    "text": "both where the sites were declared",
    "start": "4507179",
    "end": "4512710"
  },
  {
    "text": "upfront but maybe one of your types was treat this as a dynamic type such that",
    "start": "4512710",
    "end": "4518320"
  },
  {
    "text": "in special cases like calls to standard IO or something the sharp uses that",
    "start": "4518320",
    "end": "4524650"
  },
  {
    "text": "approach I gotta admit I mean there there is something to say for that",
    "start": "4524650",
    "end": "4531040"
  },
  {
    "text": "that idea in ABC there were no visible type declarations but ABC was statically",
    "start": "4531040",
    "end": "4537550"
  },
  {
    "text": "typed the language design had to compromise because there were sort of",
    "start": "4537550",
    "end": "4546790"
  },
  {
    "text": "there was a different operator for each type basically like there was no",
    "start": "4546790",
    "end": "4552580"
  },
  {
    "text": "operator overloading because like plus meant that both the arguments were numbers period and then there was like",
    "start": "4552580",
    "end": "4560380"
  },
  {
    "text": "runtime stuff where oh well actually we have different representations of numbers like summer rationals and some",
    "start": "4560380",
    "end": "4567640"
  },
  {
    "text": "are floats and the floats have a bit whether they were exact or not or something but and then there was a",
    "start": "4567640",
    "end": "4578440"
  },
  {
    "text": "separate separate level in ABC where suddenly everything was still dynamic",
    "start": "4578440",
    "end": "4583600"
  },
  {
    "text": "because you could sort of edit your code and the system as designed did not have",
    "start": "4583600",
    "end": "4590490"
  },
  {
    "text": "sort of did not retype check every piece of code in existence when you change one",
    "start": "4590490",
    "end": "4596410"
  },
  {
    "text": "function",
    "start": "4596410",
    "end": "4599070"
  },
  {
    "text": "[Applause]",
    "start": "4612150",
    "end": "4618320"
  },
  {
    "text": "you",
    "start": "4623340",
    "end": "4625400"
  }
]