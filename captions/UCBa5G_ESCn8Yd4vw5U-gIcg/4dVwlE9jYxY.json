[
  {
    "text": "We continue with our investigation of traditional machine learning approaches uh,",
    "start": "4070",
    "end": "10005"
  },
  {
    "text": "to uh, graph level predictions.",
    "start": "10005",
    "end": "12375"
  },
  {
    "text": "And now we have- we are going to focus on",
    "start": "12375",
    "end": "15855"
  },
  {
    "text": "link pre- prediction tasks and features that capture,",
    "start": "15855",
    "end": "19605"
  },
  {
    "text": "uh, structure of links,",
    "start": "19605",
    "end": "21449"
  },
  {
    "text": "uh, in a given, uh, network.",
    "start": "21450",
    "end": "23790"
  },
  {
    "text": "So the link le- level prediction tasks is the following.",
    "start": "23790",
    "end": "28815"
  },
  {
    "text": "The task is to predict new links based on the existing links in the network.",
    "start": "28815",
    "end": "33350"
  },
  {
    "text": "So this means at test time,",
    "start": "33350",
    "end": "35445"
  },
  {
    "text": "we have to evaluate all node pairs that are not yet linked,",
    "start": "35445",
    "end": "39555"
  },
  {
    "text": "uh, rank them, and then, uh,",
    "start": "39555",
    "end": "41535"
  },
  {
    "text": "proclaim that the top k note pairs, as, um,",
    "start": "41535",
    "end": "45160"
  },
  {
    "text": "predicted by our algorithm,",
    "start": "45160",
    "end": "47494"
  },
  {
    "text": "are the links that are going to occur,",
    "start": "47494",
    "end": "49399"
  },
  {
    "text": "uh, in the network.",
    "start": "49400",
    "end": "50660"
  },
  {
    "text": "And the key here is to design features for a pair of nodes.",
    "start": "50660",
    "end": "54965"
  },
  {
    "text": "And of course, what we can do, um, uh,",
    "start": "54965",
    "end": "57650"
  },
  {
    "text": "as we have seen in the node level, uh,",
    "start": "57650",
    "end": "60050"
  },
  {
    "text": "tasks, we could go and, uh,",
    "start": "60050",
    "end": "62360"
  },
  {
    "text": "let say concatenate, uh,",
    "start": "62360",
    "end": "64280"
  },
  {
    "text": "uh, the features of node number 1,",
    "start": "64280",
    "end": "67130"
  },
  {
    "text": "features of the node number 2,",
    "start": "67130",
    "end": "68719"
  },
  {
    "text": "and train a model on that type of, uh, representation.",
    "start": "68720",
    "end": "72380"
  },
  {
    "text": "However, that would be very, um,",
    "start": "72380",
    "end": "74540"
  },
  {
    "text": "unsatisfactory, because, uh, many times this would, uh,",
    "start": "74540",
    "end": "78245"
  },
  {
    "text": "lose, uh, much of important information about the relationship between the two nodes,",
    "start": "78245",
    "end": "83380"
  },
  {
    "text": "uh, in the network.",
    "start": "83380",
    "end": "84545"
  },
  {
    "text": "So the way we will think of this link prediction task is two-way.",
    "start": "84545",
    "end": "89465"
  },
  {
    "text": "We can formulate it in two different ways.",
    "start": "89465",
    "end": "91625"
  },
  {
    "text": "One way we can formulate it is simply to say,",
    "start": "91625",
    "end": "94100"
  },
  {
    "text": "links in the network are,",
    "start": "94100",
    "end": "95390"
  },
  {
    "text": "let say missing at random,",
    "start": "95390",
    "end": "97010"
  },
  {
    "text": "so we are given a network,",
    "start": "97010",
    "end": "98870"
  },
  {
    "text": "we are going to remove, uh,",
    "start": "98870",
    "end": "100470"
  },
  {
    "text": "at random some number of links and then trying to predict,",
    "start": "100470",
    "end": "103890"
  },
  {
    "text": "uh, back, uh, those links using our,",
    "start": "103890",
    "end": "106380"
  },
  {
    "text": "uh, machine learning algorithm.",
    "start": "106380",
    "end": "107700"
  },
  {
    "text": "That's one type of a formulation.",
    "start": "107700",
    "end": "109710"
  },
  {
    "text": "And then the other type of a formulation is that we are going to predict links over time.",
    "start": "109710",
    "end": "115190"
  },
  {
    "text": "This means that if we have a network that naturally evolves over time, for example,",
    "start": "115190",
    "end": "119480"
  },
  {
    "text": "our citation network, our social network,",
    "start": "119480",
    "end": "121880"
  },
  {
    "text": "or our collaboration network,",
    "start": "121880",
    "end": "123725"
  },
  {
    "text": "then we can say, ah,",
    "start": "123725",
    "end": "125180"
  },
  {
    "text": "we are going to look at a graph between time zero and time zero,",
    "start": "125180",
    "end": "129450"
  },
  {
    "text": "uh, prime, and based on the edges and the structure up to this uh,",
    "start": "129450",
    "end": "133310"
  },
  {
    "text": "the time t 0 prime, uh,",
    "start": "133310",
    "end": "135305"
  },
  {
    "text": "we are going then to output a ranked list L of",
    "start": "135305",
    "end": "138709"
  },
  {
    "text": "links that we predict are going to occur in the future.",
    "start": "138710",
    "end": "142100"
  },
  {
    "text": "Let's say that are going to appear between times T1 and T1 prime.",
    "start": "142100",
    "end": "146215"
  },
  {
    "text": "And the way, uh, we can then evaluate this type of approach is to say ah,",
    "start": "146215",
    "end": "150830"
  },
  {
    "text": "we know that in the future, um,",
    "start": "150830",
    "end": "152810"
  },
  {
    "text": "n new links will appear, let's, uh,",
    "start": "152810",
    "end": "155720"
  },
  {
    "text": "let's rank, uh, the- the potential edges outputed by",
    "start": "155720",
    "end": "159440"
  },
  {
    "text": "our algorithm and let's compare it to the edges",
    "start": "159440",
    "end": "162320"
  },
  {
    "text": "that actually really appeared, uh, in the future.",
    "start": "162320",
    "end": "165470"
  },
  {
    "text": "Uh, this type of formulation is useful or natural",
    "start": "165470",
    "end": "169010"
  },
  {
    "text": "for networks that evolve over time like transaction networks,",
    "start": "169010",
    "end": "172745"
  },
  {
    "text": "like social networks, well, edges, uh, keep,",
    "start": "172745",
    "end": "175985"
  },
  {
    "text": "um- keep adding, while for example,",
    "start": "175985",
    "end": "178685"
  },
  {
    "text": "the links missing at random type formulation is more useful, for example,",
    "start": "178685",
    "end": "183440"
  },
  {
    "text": "for static networks like protein- protein interaction networks,",
    "start": "183440",
    "end": "187400"
  },
  {
    "text": "where we can assume,",
    "start": "187400",
    "end": "189258"
  },
  {
    "text": "even though this assumption is actually heavily violated, that, you know,",
    "start": "189259",
    "end": "192590"
  },
  {
    "text": "biologists are testing kind of at random connections between proteins,",
    "start": "192590",
    "end": "197510"
  },
  {
    "text": "um, and we'd like to infer what other connections in the future, uh,",
    "start": "197510",
    "end": "201125"
  },
  {
    "text": "are going for- for biologists are going to discover, uh, in the future,",
    "start": "201125",
    "end": "205610"
  },
  {
    "text": "or which links should they probe with the,",
    "start": "205610",
    "end": "208380"
  },
  {
    "text": "uh- that lab, uh, experiments.",
    "start": "208380",
    "end": "210375"
  },
  {
    "text": "Of course, in reality,",
    "start": "210375",
    "end": "211984"
  },
  {
    "text": "biologists are not exploring the physical, uh,",
    "start": "211984",
    "end": "214790"
  },
  {
    "text": "protein-protein interaction network, uh, um, at random.",
    "start": "214790",
    "end": "218689"
  },
  {
    "text": "Um, you know, they are heavily influenced by positive results of one another.",
    "start": "218690",
    "end": "222785"
  },
  {
    "text": "So essentially some parts of this network suddenly well explored,",
    "start": "222785",
    "end": "226280"
  },
  {
    "text": "while others are very much, uh, under explored.",
    "start": "226280",
    "end": "229540"
  },
  {
    "text": "So with these two formulations, uh,",
    "start": "229540",
    "end": "232515"
  },
  {
    "text": "let's now start thinking about, um,",
    "start": "232515",
    "end": "235260"
  },
  {
    "text": "how are we going to, uh,",
    "start": "235260",
    "end": "237060"
  },
  {
    "text": "provide a feature descriptor,",
    "start": "237060",
    "end": "239295"
  },
  {
    "text": "uh, for a given, uh, pair of nodes?",
    "start": "239295",
    "end": "241395"
  },
  {
    "text": "So the idea is that for a pair of nodes x, y,",
    "start": "241395",
    "end": "244160"
  },
  {
    "text": "we are going to compute some score,",
    "start": "244160",
    "end": "246279"
  },
  {
    "text": "um, uh, c, uh, x, y.",
    "start": "246279",
    "end": "248550"
  },
  {
    "text": "For example, a score, uh,",
    "start": "248550",
    "end": "250155"
  },
  {
    "text": "could be the number of common neighbors between nodes, uh, X and Y.",
    "start": "250155",
    "end": "254735"
  },
  {
    "text": "And then we are going to sort all pairs x,",
    "start": "254735",
    "end": "257630"
  },
  {
    "text": "y according to the decreasing, uh,",
    "start": "257630",
    "end": "259970"
  },
  {
    "text": "score C, um, and we will predict top end pairs as the new links that are going to appear,",
    "start": "259970",
    "end": "265490"
  },
  {
    "text": "uh, in the network.",
    "start": "265490",
    "end": "266724"
  },
  {
    "text": "And then we can end, uh, the test-time, right,",
    "start": "266725",
    "end": "268950"
  },
  {
    "text": "we can actually go and observe which links actually appear and compare these two lists,",
    "start": "268950",
    "end": "273080"
  },
  {
    "text": "and this way determine how well our approach,",
    "start": "273080",
    "end": "275705"
  },
  {
    "text": "our algorithm, um, is working.",
    "start": "275705",
    "end": "277775"
  },
  {
    "text": "We are going to review, uh,",
    "start": "277775",
    "end": "279455"
  },
  {
    "text": "three different ways how to, uh,",
    "start": "279455",
    "end": "282349"
  },
  {
    "text": "featurize or create a descriptor of the relationship between two nodes in the network.",
    "start": "282350",
    "end": "287130"
  },
  {
    "text": "We are going to talk about distance-based features,",
    "start": "287130",
    "end": "289730"
  },
  {
    "text": "local neighborhood overlap features,",
    "start": "289730",
    "end": "291785"
  },
  {
    "text": "as well as global neighbor- neighborhood overlap, uh, features.",
    "start": "291785",
    "end": "295385"
  },
  {
    "text": "And the goal is that for a given pair of nodes,",
    "start": "295385",
    "end": "297650"
  },
  {
    "text": "we are going to describe the relationship, um,",
    "start": "297650",
    "end": "300630"
  },
  {
    "text": "between the two nodes, uh,",
    "start": "300630",
    "end": "302250"
  },
  {
    "text": "so that from this relationship we can then predict or",
    "start": "302250",
    "end": "304850"
  },
  {
    "text": "learn whether there exists a link between them or not.",
    "start": "304850",
    "end": "308810"
  },
  {
    "text": "So first, uh, we talk about distance-based feature.",
    "start": "308810",
    "end": "313040"
  },
  {
    "text": "Uh, this is very natural.",
    "start": "313040",
    "end": "314510"
  },
  {
    "text": "We can think about",
    "start": "314510",
    "end": "315740"
  },
  {
    "text": "the shortest path distance between the two nodes and characterize it in this way.",
    "start": "315740",
    "end": "319199"
  },
  {
    "text": "So for example, if we have nodes B and H,",
    "start": "319200",
    "end": "322070"
  },
  {
    "text": "then the shortest path length between them, uh, equals two.",
    "start": "322070",
    "end": "325415"
  },
  {
    "text": "So the value of this feature would be equal to two.",
    "start": "325415",
    "end": "327950"
  },
  {
    "text": "However, if you look at this, uh, this does,",
    "start": "327950",
    "end": "330390"
  },
  {
    "text": "uh- what this- what this metric does not capture it, it captures the distance,",
    "start": "330390",
    "end": "333675"
  },
  {
    "text": "but it doesn't measure,",
    "start": "333675",
    "end": "335384"
  },
  {
    "text": "kind of capture the degree of neighborhood overlap or the strength of connection.",
    "start": "335385",
    "end": "340250"
  },
  {
    "text": "Because for example, you can look in this network",
    "start": "340250",
    "end": "342680"
  },
  {
    "text": "nodes B and H actually have two friends in common.",
    "start": "342680",
    "end": "345560"
  },
  {
    "text": "So the- the connection here in some sense is stronger between them.",
    "start": "345560",
    "end": "349580"
  },
  {
    "text": "Then for example, the connection between, uh,",
    "start": "349580",
    "end": "351995"
  },
  {
    "text": "node D and, uh, node, uh,",
    "start": "351995",
    "end": "354514"
  },
  {
    "text": "F, um, because they only have kind of- there is",
    "start": "354515",
    "end": "357350"
  },
  {
    "text": "only one path while here there are two different paths.",
    "start": "357350",
    "end": "360395"
  },
  {
    "text": "So the way we can, um,",
    "start": "360395",
    "end": "362360"
  },
  {
    "text": "try to capture the strength of connection between two nodes would be to ask, okay,",
    "start": "362360",
    "end": "365870"
  },
  {
    "text": "how many neighbors, uh,",
    "start": "365870",
    "end": "367820"
  },
  {
    "text": "do you have in common, right?",
    "start": "367820",
    "end": "369635"
  },
  {
    "text": "What is the number of common friends between a pair of nodes?",
    "start": "369635",
    "end": "372785"
  },
  {
    "text": "And this is captured by the notion of local neighborhood overlap,",
    "start": "372785",
    "end": "376745"
  },
  {
    "text": "which captures the number of neighboring nodes shared between two nodes,",
    "start": "376745",
    "end": "381020"
  },
  {
    "text": "v and, uh- v1 and v2.",
    "start": "381020",
    "end": "383379"
  },
  {
    "text": "Uh, one way to capture this is you simply say,",
    "start": "383380",
    "end": "386055"
  },
  {
    "text": "what is the- what is the number of common neighbors, right?",
    "start": "386055",
    "end": "388460"
  },
  {
    "text": "We take the neighbors of node V1,",
    "start": "388460",
    "end": "391205"
  },
  {
    "text": "take the neighbors of node V2,",
    "start": "391205",
    "end": "392960"
  },
  {
    "text": "and take the intersection of these two sets.",
    "start": "392960",
    "end": "396354"
  },
  {
    "text": "Um, a normalized version of this, uh,",
    "start": "396355",
    "end": "399795"
  },
  {
    "text": "same idea is Jaccard coefficient,",
    "start": "399795",
    "end": "402180"
  },
  {
    "text": "where we take the intersection-",
    "start": "402180",
    "end": "404264"
  },
  {
    "text": "the size of the intersection divided by the size of the union.",
    "start": "404265",
    "end": "407360"
  },
  {
    "text": "The issue with common neighbors is that, of course,",
    "start": "407360",
    "end": "409759"
  },
  {
    "text": "nodes that have higher degree are more likely to have neighbors with others.",
    "start": "409760",
    "end": "413840"
  },
  {
    "text": "While here in the Jaccard coefficient, in some sense,",
    "start": "413840",
    "end": "416600"
  },
  {
    "text": "we are norma- we are trying to normalize, um,",
    "start": "416600",
    "end": "420065"
  },
  {
    "text": "by the degree, uh,",
    "start": "420065",
    "end": "422150"
  },
  {
    "text": "to some degree by saying what is the union of the number of,",
    "start": "422150",
    "end": "425449"
  },
  {
    "text": "um, neighbors of the two nodes.",
    "start": "425450",
    "end": "427330"
  },
  {
    "text": "Uh, and then, uh,",
    "start": "427330",
    "end": "428775"
  },
  {
    "text": "the other type of, uh,",
    "start": "428775",
    "end": "430650"
  },
  {
    "text": "uh, local neighborhood overlap, uh,",
    "start": "430650",
    "end": "432585"
  },
  {
    "text": "metric that is- that actually works quite well in practice is called,",
    "start": "432585",
    "end": "436235"
  },
  {
    "text": "uh, Adamic- Adar index.",
    "start": "436235",
    "end": "437930"
  },
  {
    "text": "And simply what this is saying is,",
    "start": "437930",
    "end": "439610"
  },
  {
    "text": "let's go over the,",
    "start": "439610",
    "end": "440900"
  },
  {
    "text": "um- let's sum over the neighbors that nodes v1 and v2 have in common,",
    "start": "440900",
    "end": "446120"
  },
  {
    "text": "and let's take one over the log, uh, their degree.",
    "start": "446120",
    "end": "449810"
  },
  {
    "text": "So basically, the idea here is that we count how many neighbors,",
    "start": "449810",
    "end": "453520"
  },
  {
    "text": "um, the two nodes have in common,",
    "start": "453520",
    "end": "455294"
  },
  {
    "text": "but the importance of uneven neighbor is,",
    "start": "455295",
    "end": "457955"
  },
  {
    "text": "uh- is low, uh- decreases, uh, with these degrees.",
    "start": "457955",
    "end": "462650"
  },
  {
    "text": "So if you have a lot of,",
    "start": "462650",
    "end": "463669"
  },
  {
    "text": "um, neighbors in common that have low degree,",
    "start": "463670",
    "end": "467315"
  },
  {
    "text": "that is better than if you have a lot of high-",
    "start": "467315",
    "end": "470780"
  },
  {
    "text": "highly connected celebrities as a set of common neighbors.",
    "start": "470780",
    "end": "474260"
  },
  {
    "text": "So this is a- a net- a feature that works really well in a social network.",
    "start": "474260",
    "end": "479335"
  },
  {
    "text": "Of course, the problem with, uh, local, um,",
    "start": "479335",
    "end": "482949"
  },
  {
    "text": "network neighborhood overlap is the limitation is that this, uh,",
    "start": "482950",
    "end": "487805"
  },
  {
    "text": "metric always returns zero if two- two nodes are not- do not have any,",
    "start": "487805",
    "end": "493145"
  },
  {
    "text": "uh, neighbors in common.",
    "start": "493145",
    "end": "494525"
  },
  {
    "text": "So for example, in this case,",
    "start": "494525",
    "end": "496264"
  },
  {
    "text": "if we would want to say what is the neighborhood overlap between nodes A and E,",
    "start": "496265",
    "end": "500315"
  },
  {
    "text": "because they have no neighbors in common,",
    "start": "500315",
    "end": "502230"
  },
  {
    "text": "they are more than, um,",
    "start": "502230",
    "end": "504170"
  },
  {
    "text": "uh, two hops away from each other.",
    "start": "504170",
    "end": "506040"
  },
  {
    "text": "Then the- if only in such cases,",
    "start": "506040",
    "end": "508185"
  },
  {
    "text": "the return- the value of that it will be returned to will always be, zero.",
    "start": "508185",
    "end": "513500"
  },
  {
    "text": "However, in reality, these two nodes may still potentially be connected in the future.",
    "start": "513500",
    "end": "518240"
  },
  {
    "text": "So to fix this problem,",
    "start": "518240",
    "end": "520625"
  },
  {
    "text": "we then define global neighborhood overlap matrix.",
    "start": "520625",
    "end": "524020"
  },
  {
    "text": "That is all of this limitation by only, uh,",
    "start": "524020",
    "end": "527450"
  },
  {
    "text": "focusing on a hop- two hop distances and",
    "start": "527450",
    "end": "530330"
  },
  {
    "text": "two-hop paths between a pairs- pair of nodes and consider,",
    "start": "530330",
    "end": "534085"
  },
  {
    "text": "um, all other distances or the entire graph as well.",
    "start": "534085",
    "end": "537895"
  },
  {
    "text": "So let's now look at global neigh- neighborhood overlap type, uh, metrics.",
    "start": "537895",
    "end": "543465"
  },
  {
    "text": "And the metric we are going to talk about is called Katz index,",
    "start": "543465",
    "end": "547960"
  },
  {
    "text": "and it counts the number of all paths, uh,",
    "start": "547960",
    "end": "550955"
  },
  {
    "text": "of all different lengths between a given pair of nodes.",
    "start": "550955",
    "end": "555510"
  },
  {
    "text": "So now we need to figure out two things here.",
    "start": "555510",
    "end": "558325"
  },
  {
    "text": "First is, how do we compute number of paths of a given length,",
    "start": "558325",
    "end": "562495"
  },
  {
    "text": "uh, between, uh, two, uh, nodes?",
    "start": "562495",
    "end": "565485"
  },
  {
    "text": "This can actually be very elegantly computed by",
    "start": "565485",
    "end": "568850"
  },
  {
    "text": "using powers of the graph adjacency matrix.",
    "start": "568850",
    "end": "571699"
  },
  {
    "text": "So let me give you a quick illustration or a quick proof why this is true.",
    "start": "571700",
    "end": "576260"
  },
  {
    "text": "So the uh, first,",
    "start": "576260",
    "end": "578135"
  },
  {
    "text": "I wanna give you the intuition around the powers of adjacency matrix, right?",
    "start": "578135",
    "end": "581990"
  },
  {
    "text": "The point is that what we are going to show is",
    "start": "581990",
    "end": "584450"
  },
  {
    "text": "that computing number of paths between uh, two nodes um,",
    "start": "584450",
    "end": "588800"
  },
  {
    "text": "reduces down to computing powers of the graph adjacency matrix or",
    "start": "588800",
    "end": "592730"
  },
  {
    "text": "essentially taking the graph adjacency matrix and multiplying it with itself.",
    "start": "592730",
    "end": "597334"
  },
  {
    "text": "So first graph adjacency matrix recall,",
    "start": "597335",
    "end": "600500"
  },
  {
    "text": "it has a value 1 at every entry uv if- if nodes u and v are connected.",
    "start": "600500",
    "end": "607760"
  },
  {
    "text": "Then let's say that p,",
    "start": "607760",
    "end": "609665"
  },
  {
    "text": "uv uh superscript capital K counts the number of paths of",
    "start": "609665",
    "end": "614779"
  },
  {
    "text": "length K between nodes u and v. And our goal is to show that uh,",
    "start": "614780",
    "end": "620000"
  },
  {
    "text": "uh, if we are interested in the number of paths uh,",
    "start": "620000",
    "end": "622950"
  },
  {
    "text": "uh, of length K,",
    "start": "622950",
    "end": "625145"
  },
  {
    "text": "then we have to uh,",
    "start": "625145",
    "end": "626765"
  },
  {
    "text": "compute A to the power of k and that entry uv will tell us the number of pets.",
    "start": "626765",
    "end": "632615"
  },
  {
    "text": "The capital K here is the same as uh,",
    "start": "632615",
    "end": "635959"
  },
  {
    "text": "uh, a small case,",
    "start": "635960",
    "end": "637190"
  },
  {
    "text": "so the Kth power of A measures the number of paths of a given length.",
    "start": "637190",
    "end": "642875"
  },
  {
    "text": "And if you think about it right,",
    "start": "642875",
    "end": "644810"
  },
  {
    "text": "how many paths of length 1 are there between a pair of",
    "start": "644810",
    "end": "647630"
  },
  {
    "text": "nodes that is exactly captured by the graph adjacency matrix, right?",
    "start": "647630",
    "end": "651230"
  },
  {
    "text": "If a pair of nodes is connected,",
    "start": "651230",
    "end": "653120"
  },
  {
    "text": "then there is a value 1,",
    "start": "653120",
    "end": "654755"
  },
  {
    "text": "and if a pair of nodes is not connected,",
    "start": "654755",
    "end": "657215"
  },
  {
    "text": "then there is the value 0.",
    "start": "657215",
    "end": "659855"
  },
  {
    "text": "Now that we know how to compute um,",
    "start": "659855",
    "end": "663589"
  },
  {
    "text": "the number of paths of length 1 between a pair of nodes.",
    "start": "663590",
    "end": "667505"
  },
  {
    "text": "Now we can ask how many- how do we compute",
    "start": "667505",
    "end": "670100"
  },
  {
    "text": "the number of paths of length 2 between a pair of nodes u.",
    "start": "670100",
    "end": "673040"
  },
  {
    "text": "And we are going to do this via the two- two-step procedure.",
    "start": "673040",
    "end": "676459"
  },
  {
    "text": "Uh, and we are going to do this by decompose the path of",
    "start": "676460",
    "end": "680810"
  },
  {
    "text": "length 2 into a path of length 1 plus another path of length 1.",
    "start": "680810",
    "end": "685430"
  },
  {
    "text": "So the idea is that we compute the number of paths of length 1",
    "start": "685430",
    "end": "689555"
  },
  {
    "text": "between each of u's neighbors and v,",
    "start": "689555",
    "end": "693995"
  },
  {
    "text": "and then um, add one to that.",
    "start": "693995",
    "end": "696650"
  },
  {
    "text": "So the idea is the following,",
    "start": "696650",
    "end": "698660"
  },
  {
    "text": "the number of paths between nodes u and v of length 1- of length 2 is",
    "start": "698660",
    "end": "703850"
  },
  {
    "text": "simply a summation over the nodes i that are the neighbors of the starting node u,",
    "start": "703850",
    "end": "709334"
  },
  {
    "text": "um, times the number of paths now from",
    "start": "709335",
    "end": "712270"
  },
  {
    "text": "this neighbor i to the target node v. And this will",
    "start": "712270",
    "end": "716320"
  },
  {
    "text": "now give us the number of paths of length 2 between u and v. And now what you can see,",
    "start": "716320",
    "end": "723680"
  },
  {
    "text": "you can see a substitute here back, the adjacency matrix.",
    "start": "723680",
    "end": "727190"
  },
  {
    "text": "So all these is a sum over i,",
    "start": "727190",
    "end": "729155"
  },
  {
    "text": "u- A _ui times A_iv.",
    "start": "729155",
    "end": "733790"
  },
  {
    "text": "So if you see this,",
    "start": "733790",
    "end": "736505"
  },
  {
    "text": "this is simply the product of matrices uh,",
    "start": "736505",
    "end": "739580"
  },
  {
    "text": "of made- of adjacency matrix A_ iu itself.",
    "start": "739580",
    "end": "743090"
  },
  {
    "text": "So this is now uh,",
    "start": "743090",
    "end": "744455"
  },
  {
    "text": "the entry uv of the adjacency matrix A uh, squared.",
    "start": "744455",
    "end": "749420"
  },
  {
    "text": "Um, this is uh,",
    "start": "749420",
    "end": "751370"
  },
  {
    "text": "now by basically by induction,",
    "start": "751370",
    "end": "752900"
  },
  {
    "text": "we can keep repeating this and get a higher powers that count paths of longer lengths um,",
    "start": "752900",
    "end": "761090"
  },
  {
    "text": "as- as this is uh, increasing.",
    "start": "761090",
    "end": "763700"
  },
  {
    "text": "Another way to look at this,",
    "start": "763700",
    "end": "765950"
  },
  {
    "text": "here is a visual proof is that uh,",
    "start": "765950",
    "end": "767960"
  },
  {
    "text": "what is A squared?",
    "start": "767960",
    "end": "769220"
  },
  {
    "text": "A squared is A multiplied by itself,",
    "start": "769220",
    "end": "772459"
  },
  {
    "text": "so when we are interested in a given,",
    "start": "772460",
    "end": "775040"
  },
  {
    "text": "let's say entry, here these are entry,",
    "start": "775040",
    "end": "777740"
  },
  {
    "text": "these are neighbors of Node 1.",
    "start": "777740",
    "end": "779990"
  },
  {
    "text": "These are um, now the,",
    "start": "779990",
    "end": "782735"
  },
  {
    "text": "the number of paths of length 1 between one- one's neighbors and node number 2.",
    "start": "782735",
    "end": "788959"
  },
  {
    "text": "So after the multiplication,",
    "start": "788960",
    "end": "791090"
  },
  {
    "text": "the value here will be 1,",
    "start": "791090",
    "end": "792530"
  },
  {
    "text": "which we mean that there is one path of length 2 between node 1 uh, and Node 2.",
    "start": "792530",
    "end": "799565"
  },
  {
    "text": "So this is how powers of adjacency matrix give",
    "start": "799565",
    "end": "803420"
  },
  {
    "text": "account paths of length K between a pair of nodes uh, in the network.",
    "start": "803420",
    "end": "809089"
  },
  {
    "text": "What this means is that now we can define the- we have developed",
    "start": "809090",
    "end": "814400"
  },
  {
    "text": "the first component that will allow us to count- to compute the cuts index,",
    "start": "814400",
    "end": "819650"
  },
  {
    "text": "because it allows us to count the number of paths between a pair of nodes for a given K.",
    "start": "819650",
    "end": "825275"
  },
  {
    "text": "But what we still need to decide is how do we do this for all the path lengths,",
    "start": "825275",
    "end": "831560"
  },
  {
    "text": "from one to infinity.",
    "start": "831560",
    "end": "833285"
  },
  {
    "text": "So to compute the pets, as we said,",
    "start": "833285",
    "end": "835759"
  },
  {
    "text": "we are going to use powers of the adjacency matrix uh,",
    "start": "835760",
    "end": "838880"
  },
  {
    "text": "you know, uh, the adjacency matrix itself tells us powers of length 1,",
    "start": "838880",
    "end": "843545"
  },
  {
    "text": "square of it tells us power of,",
    "start": "843545",
    "end": "845300"
  },
  {
    "text": "uh squared tells us paths of length 2,",
    "start": "845300",
    "end": "849005"
  },
  {
    "text": "and the adjacency matrix raised to",
    "start": "849005",
    "end": "852470"
  },
  {
    "text": "the power l counts the number of paths of length l between a pair of nodes.",
    "start": "852470",
    "end": "857839"
  },
  {
    "text": "NOW, the Katz index goes over from 1 path lengths all the way to infinity.",
    "start": "857840",
    "end": "864050"
  },
  {
    "text": "So the- the Katz index uh,",
    "start": "864050",
    "end": "867214"
  },
  {
    "text": "global neighborhood overlap between nodes v1 and",
    "start": "867215",
    "end": "870230"
  },
  {
    "text": "v2 is simply a summation of l from one to infinity.",
    "start": "870230",
    "end": "874535"
  },
  {
    "text": "We have this Beta raised to the power of l by basically",
    "start": "874535",
    "end": "877850"
  },
  {
    "text": "a disc- discount factor that gives lower- lower importance",
    "start": "877850",
    "end": "882649"
  },
  {
    "text": "to paths of longer lengths and A to b_l counts",
    "start": "882650",
    "end": "886670"
  },
  {
    "text": "the number of paths of length l between nodes of v1 and v2.",
    "start": "886670",
    "end": "891440"
  },
  {
    "text": "And now what is interesting about Katz index is that, um,",
    "start": "891440",
    "end": "896120"
  },
  {
    "text": "um,uh, we can actually compute this particular expression in a closed-form.",
    "start": "896120",
    "end": "901205"
  },
  {
    "text": "And here is- here is the- the formula for the Katz index again,",
    "start": "901205",
    "end": "905180"
  },
  {
    "text": "and basically what uh,",
    "start": "905180",
    "end": "906635"
  },
  {
    "text": "here is a closed form expression that will exactly compute the sum,",
    "start": "906635",
    "end": "910805"
  },
  {
    "text": "and the reason um,",
    "start": "910805",
    "end": "912274"
  },
  {
    "text": "why this is true or y there is inequality is this.",
    "start": "912275",
    "end": "915095"
  },
  {
    "text": "We notice that this is simply uh,",
    "start": "915095",
    "end": "916774"
  },
  {
    "text": "geometric series uh, for matrices,",
    "start": "916775",
    "end": "919654"
  },
  {
    "text": "and for that there exists",
    "start": "919654",
    "end": "921350"
  },
  {
    "text": "a closed form expression that all that it requires us is take the identity matrix",
    "start": "921350",
    "end": "926180"
  },
  {
    "text": "minus Beta times adjacency matrix inverted that and",
    "start": "926180",
    "end": "929510"
  },
  {
    "text": "then again then subtract the identity matrix again.",
    "start": "929510",
    "end": "933020"
  },
  {
    "text": "And the entries of this matrix S will give us",
    "start": "933020",
    "end": "937895"
  },
  {
    "text": "the Katz neighborhood overlap scores for any pair uh, of nodes.",
    "start": "937895",
    "end": "944000"
  },
  {
    "text": "So to summarize, uh, link level features.",
    "start": "944000",
    "end": "947795"
  },
  {
    "text": "Uh, we- we described three types of them.",
    "start": "947795",
    "end": "950450"
  },
  {
    "text": "We talked about distance-based features that users, for example,",
    "start": "950450",
    "end": "953990"
  },
  {
    "text": "shortest path between a pair of nodes and does not capture neighborhood overlaps.",
    "start": "953990",
    "end": "958535"
  },
  {
    "text": "Then we talked about this neighborhood overlap metrics like common neighbors, Jaccard,",
    "start": "958535",
    "end": "963560"
  },
  {
    "text": "and the Dmitry data that captures find- in a fine-grained wait,",
    "start": "963560",
    "end": "968225"
  },
  {
    "text": "how many neighbors does a pair of nodes have in common?",
    "start": "968225",
    "end": "972454"
  },
  {
    "text": "But the problem with this is that nodes that are more than two hops apart,",
    "start": "972455",
    "end": "975815"
  },
  {
    "text": "nodes that have no neighbors in common,",
    "start": "975815",
    "end": "977855"
  },
  {
    "text": "the metric will return value 0.",
    "start": "977855",
    "end": "980345"
  },
  {
    "text": "So the global neighborhood overlap type metrics,",
    "start": "980345",
    "end": "983360"
  },
  {
    "text": "for example, like Katz, uh,",
    "start": "983360",
    "end": "985774"
  },
  {
    "text": "uses global graph structure to give us a score for a pair of nodes and Katz index counts",
    "start": "985775",
    "end": "991910"
  },
  {
    "text": "the number of pets of all lands between a pair of",
    "start": "991910",
    "end": "995000"
  },
  {
    "text": "nodes where these paths are discounted um,",
    "start": "995000",
    "end": "998600"
  },
  {
    "text": "exponentially with their length.",
    "start": "998600",
    "end": "1002480"
  }
]