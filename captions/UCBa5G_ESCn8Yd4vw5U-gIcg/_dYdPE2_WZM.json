[
  {
    "text": "Hi. So here we are again at a session number three.",
    "start": "7010",
    "end": "12180"
  },
  {
    "text": "And during lunch, I thought of something that I wanted to mention in session number one. And it's just a little bit of my personal feelings about how I hope publishing this whole program will well achieve.",
    "start": "12180",
    "end": "26669"
  },
  {
    "text": "I learned programing myself by reading other people's software, reading listings of software.",
    "start": "26670",
    "end": "34110"
  },
  {
    "text": "When I was a high court student and some of the software,",
    "start": "34110",
    "end": "39150"
  },
  {
    "text": "I was very good for me because it was badly written and gave me a lot of motivation",
    "start": "39150",
    "end": "46310"
  },
  {
    "text": "that I said this was written by professional and I could do better than that. So I must be have a special talent for it.",
    "start": "46310",
    "end": "53320"
  },
  {
    "text": "So I'm gonna major I'm going to become interested in computers and others of it was was very beautifully written.",
    "start": "53320",
    "end": "60660"
  },
  {
    "text": "And I thought, this is a pleasure to read. I like to do something like that someday.",
    "start": "60660",
    "end": "67170"
  },
  {
    "text": "Now, I'm not sure which category this particular program is going to fall into, but either way,",
    "start": "67170",
    "end": "73409"
  },
  {
    "text": "it seems to be winning and you could reach the right the right person, you know. And so I'm hoping that some some people, young people might see this program and learn learn from it.",
    "start": "73410",
    "end": "84220"
  },
  {
    "text": "At least one aspect of software writing, and I'm not sure exactly how this could be used in in curriculum or if it's or if it's just",
    "start": "84220",
    "end": "92490"
  },
  {
    "text": "something that people would would do during the summer or two on their own to to pick up.",
    "start": "92490",
    "end": "97850"
  },
  {
    "text": "But somehow one of my goals has been to provide a picture of software here, you know,",
    "start": "97850",
    "end": "105930"
  },
  {
    "text": "in a way that might inspire some some people out there to try to write their best software.",
    "start": "105930",
    "end": "114720"
  },
  {
    "text": "Now the agenda for our afternoon, the next. This thing is called data structures for boxes and glue.",
    "start": "114720",
    "end": "123990"
  },
  {
    "text": "And this is one of the key things that that is used over and over in tech, the way the way boxes, lists of things are represented there.",
    "start": "123990",
    "end": "137040"
  },
  {
    "text": "So as I mentioned in the last lecture, a large part of the memory,",
    "start": "137040",
    "end": "144030"
  },
  {
    "text": "a large part of the core memory that that's going on while tech is running more memory than,",
    "start": "144030",
    "end": "150480"
  },
  {
    "text": "in fact, the whole program itself is, is this dynamic memory area.",
    "start": "150480",
    "end": "158430"
  },
  {
    "text": "This is where we're going to store things about boxes and glue, really horizontal lists and vertical lists and the elements of horizontal lists and verticals can be can include boxes,",
    "start": "158430",
    "end": "170700"
  },
  {
    "text": "glue and a variety of other things. So now the first thing we have to understand is, is the way that memory array works.",
    "start": "170700",
    "end": "180840"
  },
  {
    "text": "And and so step number one is, is this is to see that every item that you address in the array is what we call a memory word.",
    "start": "180840",
    "end": "194640"
  },
  {
    "text": "It's a Pasko, a record called memory word. And this is starting on it's in module one hundred and five.",
    "start": "194640",
    "end": "200819"
  },
  {
    "text": "On page thirty seven. Not a memory word is is something that is that ought to be represented well by your PA. compiler.",
    "start": "200820",
    "end": "218920"
  },
  {
    "text": "If you don't have a PA. compiler that's going to do this memory word correctly. You can be wasting an incredible amount of memory. Well, a factor for probably.",
    "start": "218920",
    "end": "229270"
  },
  {
    "text": "So you'd like to have a PA. compiler that packs things properly to a memory word.",
    "start": "229270",
    "end": "236590"
  },
  {
    "text": "Now, one week when I have something of type memory word, I.",
    "start": "236590",
    "end": "242019"
  },
  {
    "text": "It's a variant record. The definition is actually on page thirty eight.",
    "start": "242020",
    "end": "249130"
  },
  {
    "text": "So let's look at the whole definition. That's in module one or eight.",
    "start": "249130",
    "end": "255800"
  },
  {
    "text": "It's where C you might get it on the screen.",
    "start": "255800",
    "end": "264400"
  },
  {
    "text": "So we have a memory where it is made up of four quarter words. This is one of the options or two 1/2 words. And so we have a definition there that says two choices, four choices.",
    "start": "264400",
    "end": "277150"
  },
  {
    "text": "This is just because of the way Pa. I needed this particular type. But the memory word then is a packed record.",
    "start": "277150",
    "end": "284919"
  },
  {
    "text": "And it's and then it's a case for choices of this in PA. means that there's four possibilities.",
    "start": "284920",
    "end": "290380"
  },
  {
    "text": "And if you store something under under any one of these, you should retrieve it under the same one.",
    "start": "290380",
    "end": "298270"
  },
  {
    "text": "So if I set X, dot it to something that ought to be an integer, then then I shouldn't try to read out x dot G.R.",
    "start": "298270",
    "end": "308650"
  },
  {
    "text": "I should if I'm listening. This I'm using Dirty Pascal. Thirty Pascal would allow me to read out x Duccio.",
    "start": "308650",
    "end": "315360"
  },
  {
    "text": "And this is called a variant record and it's a special case of the variant record where I don't store the particular variant.",
    "start": "315360",
    "end": "322840"
  },
  {
    "text": "Some some people would put in their store an integer one to four with the record with, with, with X telling what kind it is.",
    "start": "322840",
    "end": "331430"
  },
  {
    "text": "But they waste space and time and there's no point in it the way we we were using it. So we have four choices int G.R., H.H. and QQQ.",
    "start": "331430",
    "end": "341350"
  },
  {
    "text": "Q are four different types. So this memory word is for all four different types.",
    "start": "341350",
    "end": "347530"
  },
  {
    "text": "They're all supposed to come out to be approximately one word of memory and talk about these types.",
    "start": "347530",
    "end": "355780"
  },
  {
    "text": "A little bit. There's actually fifth type that I use in the program called SC. And when I'm and that's because I, I also have scaled quantities.",
    "start": "355780",
    "end": "366220"
  },
  {
    "text": "This is a section that I didn't discuss. The previous section of the program, scale quantity is an integer, but it doesn't represent an integer.",
    "start": "366220",
    "end": "375850"
  },
  {
    "text": "It represents a unit of. It represents a physical distance.",
    "start": "375850",
    "end": "381460"
  },
  {
    "text": "So it has units and the units are scaled points, namely to two to the sixteenth scale points makes one point.",
    "start": "381460",
    "end": "393300"
  },
  {
    "text": "That's a scale point then is so a word is scale.",
    "start": "393300",
    "end": "398569"
  },
  {
    "text": "That means that the decimal point is, is sixteen bits from the right hand edge.",
    "start": "398570",
    "end": "404110"
  },
  {
    "text": "And when I when something is an integer but it's really representing scaled.",
    "start": "404110",
    "end": "409870"
  },
  {
    "text": "I call it SC instead of I.A. All right. I say that its type is scaled instead of integer. In order to provide a comment to the reader about that, Pascal never sees this,",
    "start": "409870",
    "end": "423430"
  },
  {
    "text": "but the person reading this program gets to see the difference between SC and engineer. Now, all of these are supposed to take up the same space.",
    "start": "423430",
    "end": "432730"
  },
  {
    "text": "I worked it out so the tech will never allow the user to to give it an integer constant greater than two to the thirty one minus one.",
    "start": "432730",
    "end": "446610"
  },
  {
    "text": "So on or less than negative of that. So. So this means that tech should be able to work with 32 bit integers that have signed that have signs.",
    "start": "446610",
    "end": "461040"
  },
  {
    "text": "And if you have a machine that has more bits than that, well, you still run text.",
    "start": "461040",
    "end": "468820"
  },
  {
    "text": "And those other bits will presumably be zero. However, you could get actually larger integers in there through some arithmetic operations and they just would overflow on machines that are smaller.",
    "start": "468820",
    "end": "482800"
  },
  {
    "text": "But we we would prefer that people write tech programs that are going to work on all on all the 32 bit machines.",
    "start": "482800",
    "end": "492580"
  },
  {
    "text": "If you have a larger machine, what you should do with it is make your quarter words and half words bigger.",
    "start": "492580",
    "end": "498490"
  },
  {
    "text": "So that gives you a chance of making the men already bigger than you can address.",
    "start": "498490",
    "end": "503639"
  },
  {
    "text": "More. Words, but not actually work with bigger integers or scale values.",
    "start": "503640",
    "end": "508900"
  },
  {
    "text": "You don't really need anything more than any dimensions that large inside a typesetting job. Who's going to type said something more 19 feet in one piece.",
    "start": "508900",
    "end": "519019"
  },
  {
    "text": "Thought so. So we're we're you know, at least if you if you wanted to, you could probably break it into two parts.",
    "start": "519020",
    "end": "526720"
  },
  {
    "text": "And or or say that it was in or magnify it up from something else. And have the magnification done in the TVI file. So. So 32 bits is plenty for these images.",
    "start": "526720",
    "end": "537540"
  },
  {
    "text": "No glue ratio is the next case. And that is something that you could define any way you want to as defined here as real.",
    "start": "537540",
    "end": "546399"
  },
  {
    "text": "Now, a glew ratio is is used only to when we're when we're setting a box and we have to stretch or shrink the glue,",
    "start": "546400",
    "end": "558460"
  },
  {
    "text": "then the glue ratio is the proportion by which the thing will stretch or shrink. So for stretching, for example, in the glue ratio is point three, three three.",
    "start": "558460",
    "end": "566980"
  },
  {
    "text": "Then one third of the stretch component gets gets that.",
    "start": "566980",
    "end": "572500"
  },
  {
    "text": "And and I distinguish between that and scale.",
    "start": "572500",
    "end": "579730"
  },
  {
    "text": "The scale values are kept as integers. And the arithmetic is defined very precisely on all the scale values.",
    "start": "579730",
    "end": "586839"
  },
  {
    "text": "Because it's important that every implementation of text compute exactly the same numbers when it works with scale values.",
    "start": "586840",
    "end": "594250"
  },
  {
    "text": "Scale values will affect the performance of tech as far as how how many lines get put onto a page and how many pages there will be in a manuscript.",
    "start": "594250",
    "end": "606830"
  },
  {
    "text": "And so on. If you stick with the calculations as they're given here, you can be sure that you get the same typesetting information on a CDC machine as you would get on an IBM machine,",
    "start": "606830",
    "end": "620770"
  },
  {
    "text": "even though their arithmetic is done quite differently. They at least agree on integers.",
    "start": "620770",
    "end": "625840"
  },
  {
    "text": "But when you try to tell them to do floating point arithmetic, you're liable to get all kinds of different results.",
    "start": "625840",
    "end": "632290"
  },
  {
    "text": "And this would lead to different types setting different pages and and people sending tech job from one place to another would find that it doesn't work out.",
    "start": "632290",
    "end": "642250"
  },
  {
    "text": "So this is a major change that I that I made in Tech 82 that was at first was going to be the only major change.",
    "start": "642250",
    "end": "650710"
  },
  {
    "text": "But we felt quite strongly about it as being one of the first first noticeable VFX and tech",
    "start": "650710",
    "end": "655720"
  },
  {
    "text": "that we we weren't machine dependent because we were depending on floating point arithmetic. So I went to scale. However, for Glew ratio, it was a big pain to work with scaled numbers and doing multiplication by by so many ratios which you",
    "start": "655720",
    "end": "672580"
  },
  {
    "text": "had to do in multi simulating multiple precision in order to get a decent result in all the cases.",
    "start": "672580",
    "end": "679030"
  },
  {
    "text": "And really, it wasn't necessary because the result of a new ratio never participates upfront in tech's decision making.",
    "start": "679030",
    "end": "688060"
  },
  {
    "text": "It only comes out when you're setting the final box in a putting to a DVOA file.",
    "start": "688060",
    "end": "695290"
  },
  {
    "text": "Does it actually ever compute. This number from the Google ratio? So so I can I can use real arithmetic, floating point arithmetic.",
    "start": "695290",
    "end": "705440"
  },
  {
    "text": "In other words, even though it's not it's not a machine independent because that's that will only affect",
    "start": "705440",
    "end": "715900"
  },
  {
    "text": "the positioning of the final boxes and something that the eye couldn't possibly detect.",
    "start": "715900",
    "end": "721340"
  },
  {
    "text": "So so you can use that if you want, however, to do a fixed point arithmetic instead of floating point.",
    "start": "721340",
    "end": "728860"
  },
  {
    "text": "For example, you're implementing this on some kind of a micro. That doesn't have floating point or it has horrible floating point software.",
    "start": "728860",
    "end": "737560"
  },
  {
    "text": "Then there's a suggestion for how to do all the computations you need with glue ratio in a in something that would pack into a into a word,",
    "start": "737560",
    "end": "749800"
  },
  {
    "text": "32 bit word. And I wrote that up in Tugboat and that appeared in the in I think the February issue of Tugboat.",
    "start": "749800",
    "end": "756310"
  },
  {
    "text": "And I have a reference to it actually in the program somewhere. Glue ratio. Here it is, tugboat three.",
    "start": "756310",
    "end": "765160"
  },
  {
    "text": "Nineteen eighty two pages, ten to twenty seven. It's the reference in module hundred four. So that's the that's, that's a type glue ratio which I've made real in this case.",
    "start": "765160",
    "end": "775570"
  },
  {
    "text": "Now if you change it to some other type, then you just need to find a few places where I've used glue ratios,",
    "start": "775570",
    "end": "783220"
  },
  {
    "text": "I have to print glue ratio, I have to multiply by glue ratio and one or two other things and go.",
    "start": "783220",
    "end": "791360"
  },
  {
    "text": "And then you could you could substitute something there that would be probably better than a bad floating point of implementation if you if you had to do it on a micro now on an IBM.",
    "start": "791360",
    "end": "803890"
  },
  {
    "text": "Pascal, at least the way it was some time ago, if you said real, that would give you a 64 bits.",
    "start": "803890",
    "end": "812410"
  },
  {
    "text": "So you'd have to say short, real. In order to get a 32 bit floating point number, and each person should be careful to declare a memory word so that this will work out.",
    "start": "812410",
    "end": "824560"
  },
  {
    "text": "If you do ratio was real and then Integer will be 30 Cubitt, but you'd still be wasting 64 bits for every memory word.",
    "start": "824560",
    "end": "831190"
  },
  {
    "text": "Because. Because it picks the worst case of these. What about two halves?",
    "start": "831190",
    "end": "836290"
  },
  {
    "text": "Here's another common common thing. Or we're going to break up this word impact to different to two different things in the word.",
    "start": "836290",
    "end": "843430"
  },
  {
    "text": "So to have this, we find up above that. And it's a packed record also that has a R.H., which you might realize is right half.",
    "start": "843430",
    "end": "853180"
  },
  {
    "text": "And then the other part of it is either L.H. and other half word or two quarto words that are each is always a half word.",
    "start": "853180",
    "end": "863140"
  },
  {
    "text": "But within our age, you don't necessarily have an L.H.",
    "start": "863140",
    "end": "868180"
  },
  {
    "text": "You might have two quarter words, be zero and be one. So that's the two halves type.",
    "start": "868180",
    "end": "874589"
  },
  {
    "text": "And and that two halves type is is quite commonly used, especially in the whole upper part of mammies is entirely to have this.",
    "start": "874590",
    "end": "886960"
  },
  {
    "text": "We'll see. Now, the other possibility is four quarters. And that I think you could guess it's V zero, B one, B to be three quarter words.",
    "start": "886960",
    "end": "898329"
  },
  {
    "text": "Now, some machines will pack a quarter word if it goes in the range zero to 255.",
    "start": "898330",
    "end": "906760"
  },
  {
    "text": "Say, and and if you have a 32 bit machine, you'll be able to get four quarter words in one word and they'll be treated this from zero to fifty five.",
    "start": "906760",
    "end": "915760"
  },
  {
    "text": "But in other machines, you only take the only way they would pack is if it was like minus hundred twenty eight plus honored and twenty seven.",
    "start": "915760",
    "end": "927150"
  },
  {
    "text": "What's happening here? We're losing we're losing the screen. I think you better leave that down because I might get back to it again.",
    "start": "927150",
    "end": "936300"
  },
  {
    "text": "It's fun to watch it, isn't it? So on a micro on a particle implementation that if you give it to zero to 255,",
    "start": "936300",
    "end": "946029"
  },
  {
    "text": "if it considers that a nine bit position, then then you wouldn't be able to put for those in a word.",
    "start": "946030",
    "end": "952950"
  },
  {
    "text": "And on the other hand, on our PA. if you ask if you say minus hundred twenty eight plus hundred twenty seven, it takes up a whole word for that.",
    "start": "952950",
    "end": "962870"
  },
  {
    "text": "It considers that a science position has to go. So Pascals are quite different from each other. And I didn't want to make tech unusable just for that fact.",
    "start": "962870",
    "end": "971339"
  },
  {
    "text": "So I was slightly fine quarter word in in a very general way, where it's a sub range from min quarter word to max quarter word.",
    "start": "971340",
    "end": "984910"
  },
  {
    "text": "And similarly, half words go from in half word to max F word.",
    "start": "984910",
    "end": "990870"
  },
  {
    "text": "And you can really find these. And chances are tech will still work.",
    "start": "990870",
    "end": "997230"
  },
  {
    "text": "Now, I'm going to have to debug it with quarter word non-zero to make sure that I've not forgotten to add it in the right place and subtract it in the right place.",
    "start": "997230",
    "end": "1004459"
  },
  {
    "text": "What I do is if I want to represent a number from zero to 255 in a quarter word I subtract mean quarter word from it or no,",
    "start": "1004460",
    "end": "1012950"
  },
  {
    "text": "I add in quarter word to excuse me. And then when I read it out I subtract mean quarter word from it.",
    "start": "1012950",
    "end": "1021470"
  },
  {
    "text": "Now the conditions that those constants have to satisfy are all listed there in one oh six.",
    "start": "1021470",
    "end": "1027240"
  },
  {
    "text": "So all the program is supposed to work provided these conditions are true. And the program actually runs through and checks those conditions in any anything does",
    "start": "1027240",
    "end": "1036709"
  },
  {
    "text": "any way checks these conditions and gives you a stop at the beginning saying I'm sorry,",
    "start": "1036710",
    "end": "1042500"
  },
  {
    "text": "but you set up here. You set this thing up wrong so that I can handle it. The conditions are, first of all, that you're mean.",
    "start": "1042500",
    "end": "1051220"
  },
  {
    "text": "Quarter word has to be zero or negative. You can't have mid-quarter word equal to one because I'm storing zero sometimes in a of words.",
    "start": "1051220",
    "end": "1060660"
  },
  {
    "text": "OK. Similarly, Max, court award has to be at least one hundred and twenty seven because sometimes I'm storing 127 in there and I mean halfway it has to be again,",
    "start": "1060660",
    "end": "1074840"
  },
  {
    "text": "zero or negative and the maximum half word has to be at least two of the largest fifteen bit.",
    "start": "1074840",
    "end": "1082950"
  },
  {
    "text": "No. Then we also have to have a relation between quarters and Halford's that any quarter where it can be storable and a half word.",
    "start": "1082950",
    "end": "1091639"
  },
  {
    "text": "So that's the next line says that the minimum quarter would be great and equal a minimum half word. And similarly for the Maxus,",
    "start": "1091640",
    "end": "1099620"
  },
  {
    "text": "the next line says that the memory base that's the lowest address in memory has to be greater than or equal to a minimum half word.",
    "start": "1099620",
    "end": "1110930"
  },
  {
    "text": "And the largest address in memory, Min Max, has to be strictly less than Max F where these are the cases.",
    "start": "1110930",
    "end": "1119320"
  },
  {
    "text": "The relations here are not the ones that must be true, but the ones that must be false. So Memex cannot be granted equal to Max F word.",
    "start": "1119320",
    "end": "1125340"
  },
  {
    "text": "The max F word itself is used as a flags of the largest location. Addressable in memory has to be strictly less than your maximum Hafford.",
    "start": "1125340",
    "end": "1132919"
  },
  {
    "text": "So for example, if you mean half where it is minus to the fifteenth, you max f word is to 15th, minus one is 32 767.",
    "start": "1132920",
    "end": "1140780"
  },
  {
    "text": "Then your men, Max had better not be any larger than 32 766.",
    "start": "1140780",
    "end": "1147560"
  },
  {
    "text": "If you have a 36 foot machine, you see, you could make your max half word to the 18th minus one.",
    "start": "1147560",
    "end": "1155840"
  },
  {
    "text": "And then you can, in your memory, Max, could be four times as large as on a 32 bit machine.",
    "start": "1155840",
    "end": "1163370"
  },
  {
    "text": "Similarly for France. So so the gist of that line there says that any memory address can fit in a half word.",
    "start": "1163370",
    "end": "1171290"
  },
  {
    "text": "So I keep pointer data pointers to memory locations and a half where the next",
    "start": "1171290",
    "end": "1177830"
  },
  {
    "text": "line says essentially that any font int. font number can fit in a quarter word.",
    "start": "1177830",
    "end": "1183679"
  },
  {
    "text": "My internal font numbers are the numbers that I that I assigned to fonts, not the user's number, but about the one that tech the tech keeps.",
    "start": "1183680",
    "end": "1192200"
  },
  {
    "text": "The user might have several fonts, 10, 11 and 12 that all turn out to boil down to the exactly the same fun.",
    "start": "1192200",
    "end": "1199010"
  },
  {
    "text": "And I'll map those into the same number inside. So so I have an internal phone number. And besides, his numbers might range from zero to a very high case, but I want to pack them all tightly.",
    "start": "1199010",
    "end": "1208710"
  },
  {
    "text": "So I. So I internally we have numbers running from font base to font.",
    "start": "1208710",
    "end": "1214520"
  },
  {
    "text": "Max, in those numbers, internal phone numbers must all be representable in a quarter where the next thing is similarly things I want to represent and a half word and the.",
    "start": "1214520",
    "end": "1224750"
  },
  {
    "text": "Size, that's usually very small, only a few hundred, but I. But but if it were larger than a maximum halfwit, I'd be in trouble.",
    "start": "1224750",
    "end": "1231350"
  },
  {
    "text": "So I put all those restrictions that it could conceivably ever cause tech. Any problem? I think I listed them here. And so they you're not allowed to have more than, say, 32 K strings.",
    "start": "1231350",
    "end": "1243740"
  },
  {
    "text": "Now, that's not the size of the string pool. That's the size of the string stark array that says that you shouldn't have that many strings.",
    "start": "1243740",
    "end": "1250640"
  },
  {
    "text": "Well, it's rare to have more than 10000 strings.",
    "start": "1250640",
    "end": "1257360"
  },
  {
    "text": "Who'd win? Thirty thousand. I mean, because each one of those strings would be pretty long, too. So. So if you can't get that and a half where you're in trouble, I doubt if anybody would ever set next things that high.",
    "start": "1257360",
    "end": "1266060"
  },
  {
    "text": "But if it did, they would say Badul 16. And later we get an error message saying this is case 16 of what you can't do.",
    "start": "1266060",
    "end": "1274950"
  },
  {
    "text": "This error message is expected to see these error messages are expected to come along so, so rarely and seen only by a person running any Initech that they have just been left as numeric codes.",
    "start": "1274950",
    "end": "1288230"
  },
  {
    "text": "The last one is the buffer size, your input buffer, which I have at five hundred now, and it's been more than enough.",
    "start": "1288230",
    "end": "1295340"
  },
  {
    "text": "If that gets larger than 32000, then is that because I'm storing a buffer pointer somewhere and a half word and at least one place?",
    "start": "1295340",
    "end": "1304990"
  },
  {
    "text": "OK. So those are the constraints there. And you want to design those so that it all gets packed together.",
    "start": "1304990",
    "end": "1315120"
  },
  {
    "text": "Now Pascal composed don't always optimize adding zero and subtracting zero.",
    "start": "1315120",
    "end": "1323690"
  },
  {
    "text": "And my program is careful to add min quarter words and subtract min mac,",
    "start": "1323690",
    "end": "1329480"
  },
  {
    "text": "subtract mean quarter word and half words and so on, especially this quarter word.",
    "start": "1329480",
    "end": "1334730"
  },
  {
    "text": "Every time that I'm packing something that might might go past one hundred twenty seven into a quarter word.",
    "start": "1334730",
    "end": "1345290"
  },
  {
    "text": "And while this is in the inner loop, I mean like every character.",
    "start": "1345290",
    "end": "1351680"
  },
  {
    "text": "This happens to every character. And so I'd be adding zero, subtracting zero rather needlessly.",
    "start": "1351680",
    "end": "1357590"
  },
  {
    "text": "And in the part of tech, that's supposed to run real fast. If I believe the we've made memory counts before and I think it'll still happen in new tech,",
    "start": "1357590",
    "end": "1369710"
  },
  {
    "text": "that a small, very small part of tech, maybe one percent or so, is executed.",
    "start": "1369710",
    "end": "1376970"
  },
  {
    "text": "A large number of times I'm in and call out the inner loop and we make pain so that that inner loop doesn't have a lot of wasted emotion in it.",
    "start": "1376970",
    "end": "1388530"
  },
  {
    "text": "So because if the inner loop is fast, I do just about anything everywhere else and it won't make much difference.",
    "start": "1388530",
    "end": "1393920"
  },
  {
    "text": "So one of the things we're doing in the inner loop is adding, subtracting mean quarter word.",
    "start": "1393920",
    "end": "1399230"
  },
  {
    "text": "So I define macros for this purpose. Is the cue eye macro for into a quarter word.",
    "start": "1399230",
    "end": "1405470"
  },
  {
    "text": "And cue O macro for out of a quarter word and then just add and subtract mean quarter words.",
    "start": "1405470",
    "end": "1411409"
  },
  {
    "text": "This is in section one o seven. Here you see. Now of course in my change file at Sayle Min quarter word is zero.",
    "start": "1411410",
    "end": "1424550"
  },
  {
    "text": "So I've just redefined Kuai of hash to be hash.",
    "start": "1424550",
    "end": "1430070"
  },
  {
    "text": "And because this Pascal wouldn't optimize the way that zero that'll save.",
    "start": "1430070",
    "end": "1435549"
  },
  {
    "text": "That'll make tech run maybe five percent faster. So changing that one macro I now if I haven't if I've missed it somewhere in the probe.",
    "start": "1435550",
    "end": "1445520"
  },
  {
    "text": "In the program. Thank you. I. Where I should have. I won't notice it right now because q I have something is leaving it out would have been the same.",
    "start": "1445520",
    "end": "1454490"
  },
  {
    "text": "So I'm gonna run some tests where I where I have min quarter word negative.",
    "start": "1454490",
    "end": "1460940"
  },
  {
    "text": "And that means that my memory words are going to not pack into one into one word, but that will be OK because I can run tests on a small memory size.",
    "start": "1460940",
    "end": "1470899"
  },
  {
    "text": "Check that. But you won't have to worry about. I'll be the one that has to worry about this kind of testing.",
    "start": "1470900",
    "end": "1477230"
  },
  {
    "text": "Any questions on this part? Now think you understand what a memory word is.",
    "start": "1477230",
    "end": "1482820"
  },
  {
    "text": "Yeah. Question. Please use the mike.",
    "start": "1482820",
    "end": "1488720"
  },
  {
    "text": "There is a table macros, in other words, that are compiled. Yes. In your in your change file. You see, I'll, I'll, I'll put that up on.",
    "start": "1488720",
    "end": "1499299"
  },
  {
    "text": "I'll put that up on the screen. Let's see if we can switch to the computer file here and search for Q I left bracket.",
    "start": "1499300",
    "end": "1510770"
  },
  {
    "text": "OK. Here's the change that I made it at sale for this.",
    "start": "1510770",
    "end": "1517070"
  },
  {
    "text": "And so you'll see that with all changes to start, the top line is this is common to the two. And then I added this other sentence here. So they have similar. Right here in the obvious way.",
    "start": "1517070",
    "end": "1525740"
  },
  {
    "text": "And you see how I did it. You can you read the can can you read a Web source file instead of a Web output file?",
    "start": "1525740",
    "end": "1533520"
  },
  {
    "text": "Is it sufficiently enough contrast. Seriously. Put a smile at outside D for a definition.",
    "start": "1533520",
    "end": "1541700"
  },
  {
    "text": "So that's that's what you do.",
    "start": "1541700",
    "end": "1549539"
  },
  {
    "text": "Now, while I'm at this, I guess I could explain at the that I have a last resort thing for for debugging it built into the into the tech debugger.",
    "start": "1549540",
    "end": "1560520"
  },
  {
    "text": "And let me see if I can activate that. I see.",
    "start": "1560520",
    "end": "1566630"
  },
  {
    "text": "I'll run. I'll run a preloaded version of tech. This is this is tech that's been preloaded with a format from from the trip file.",
    "start": "1566630",
    "end": "1577610"
  },
  {
    "text": "Yesterday we we played around with the trip file. It has the Pascal debugger in it. So I have to do this to get out of the Pascal debugger.",
    "start": "1577610",
    "end": "1585900"
  },
  {
    "text": "And now it's running this tech and it says format equals trip eighty two seven twenty five, which is probably last Sunday.",
    "start": "1585900",
    "end": "1595520"
  },
  {
    "text": "And now to get into my debugger, I have a lot of the tech debugger built in.",
    "start": "1595520",
    "end": "1602100"
  },
  {
    "text": "Also that will do things in tech. So tech debugger icons, for example, given undefined control sequence and it'll stop only flying control sequence.",
    "start": "1602100",
    "end": "1612870"
  },
  {
    "text": "Now, why compile tech with the debug switch debugging and view better whatever that debug backwards is?",
    "start": "1612870",
    "end": "1620910"
  },
  {
    "text": "If I if I've not commented on the debug code, then I have a special secret option that I can type to an undefined control sequence.",
    "start": "1620910",
    "end": "1629190"
  },
  {
    "text": "However, I'd better get out of scroll mode before I do that because I means gromo.",
    "start": "1629190",
    "end": "1635190"
  },
  {
    "text": "That doesn't allow me to respond to undefined control sequence. So I go here stock mode and give another undefined thing. Now I've got it.",
    "start": "1635190",
    "end": "1642870"
  },
  {
    "text": "Now I've got a question mark prompt and and so I can say D this is the secret thing that I can do and that gets me into my debugger.",
    "start": "1642870",
    "end": "1654400"
  },
  {
    "text": "Now the debugger is written at the very end of your program, its module. Oh gosh.",
    "start": "1654400",
    "end": "1663720"
  },
  {
    "text": "Maybe not the very end but near that, near the very end. I see it here.",
    "start": "1663720",
    "end": "1669179"
  },
  {
    "text": "Page three, ninety five ninety six module Toivo. Seven and twelve away. And this is a cryptic thing that I use only in emergencies,",
    "start": "1669180",
    "end": "1678419"
  },
  {
    "text": "but it gives me as prompt of a hashmark and it and then the numbered options that I can type or are described in page three, 96.",
    "start": "1678420",
    "end": "1686190"
  },
  {
    "text": "And there are various things that I can do, for example. Eleven will check the memory to see if all the links are OK, if there is any weak links,",
    "start": "1686190",
    "end": "1697860"
  },
  {
    "text": "if there is if the of lists have been clobbered, somehow it will we will have checked that.",
    "start": "1697860",
    "end": "1703950"
  },
  {
    "text": "Well it didn't find any problems. Oh, I guess they would like some of the houselights in the audience so that they can look at their own copy.",
    "start": "1703950",
    "end": "1718510"
  },
  {
    "text": "Is it getting brighter out there? Can you give? Can you give me some houselights in the audience, please?",
    "start": "1718510",
    "end": "1725930"
  },
  {
    "text": "OK. Thanks. Now, the the option number one will print memory word of of a location in in memory and well, I should find out of location.",
    "start": "1725930",
    "end": "1741480"
  },
  {
    "text": "That's not zero. Let me just try. Let me try. Five five eighty.",
    "start": "1741480",
    "end": "1746730"
  },
  {
    "text": "And hope that it's not zero. See what it is. It's not been. Perrino has been preloaded to zero. I should be doing well. Five eighty one zero two.",
    "start": "1746730",
    "end": "1756990"
  },
  {
    "text": "Let's see. Excuse me a sec here. I'm going to. What's going on?",
    "start": "1756990",
    "end": "1772170"
  },
  {
    "text": "Well, let's see. I'm going to try to find out which locations are and are not free.",
    "start": "1772170",
    "end": "1784040"
  },
  {
    "text": "So five twenty seven to five seventy are not free. So I should I should be able to get 570 or something like that.",
    "start": "1784040",
    "end": "1791389"
  },
  {
    "text": "Five. Twenty seven. Let me try five. Twenty seven. OK, so.",
    "start": "1791390",
    "end": "1799000"
  },
  {
    "text": "So if I say one and then five. Twenty seven one is my debugging command says print out memory word five twenty seven known as zero two.",
    "start": "1799000",
    "end": "1806120"
  },
  {
    "text": "Done it. Well here's one that wasn't zero.",
    "start": "1806120",
    "end": "1812510"
  },
  {
    "text": "OK, now print memory word is something that I can use. I will print out a memory word in all of its possible forms.",
    "start": "1812510",
    "end": "1820370"
  },
  {
    "text": "So location, memory, location five twenty eight is a memory word that can be interpreted as an integer as minus 262 144 on this particular machine.",
    "start": "1820370",
    "end": "1832820"
  },
  {
    "text": "Or if it's interpreted as a glew ratio, it would be minus four point zero. OK. And if it's in.",
    "start": "1832820",
    "end": "1845000"
  },
  {
    "text": "No, I'm sorry. Has the scale. If it's interpreted as a scale, it would be minus 4.0 because I divided by two to the 16th.",
    "start": "1845000",
    "end": "1851060"
  },
  {
    "text": "If it's interpreted as a as a glue ratio would be zero because it has a zero mantises essentially.",
    "start": "1851060",
    "end": "1858110"
  },
  {
    "text": "Now the next line print out that memory word is if it was two halves.",
    "start": "1858110",
    "end": "1866570"
  },
  {
    "text": "And so to the left of the semicolon, it says four nine one five two equals one ninety two column zero.",
    "start": "1866570",
    "end": "1872809"
  },
  {
    "text": "So the left half is cedar and LHD field in this to have since either left half of forty nine 152 or",
    "start": "1872810",
    "end": "1881210"
  },
  {
    "text": "it's a B zero of one ninety two and a B one to zero and the right half is six five five three five.",
    "start": "1881210",
    "end": "1888700"
  },
  {
    "text": "Z. Is that the sort of clear. No. If this word memory was packed to halves then the right the RH bar would be six five five three five.",
    "start": "1888700",
    "end": "1897510"
  },
  {
    "text": "And with the two halves you have either L.H., which would be forty nine one for you two or you have B zero and B one which would have been one to zero.",
    "start": "1897510",
    "end": "1905780"
  },
  {
    "text": "And then the last thing on that second line is 255 255 one ninety two zero. That's B zero B one. B to be three. In case you call it four quarters.",
    "start": "1905780",
    "end": "1917730"
  },
  {
    "text": "Now this particular it shows that this particular Pascal compiler packs these words.",
    "start": "1917730",
    "end": "1923179"
  },
  {
    "text": "The one that I call write half actually is in the left half of the word.",
    "start": "1923180",
    "end": "1928490"
  },
  {
    "text": "And they will think that I called B zero in the case in case two houses, one ninety two would be zero if it's four quarters is 255.",
    "start": "1928490",
    "end": "1938300"
  },
  {
    "text": "That's I think it's the left half anyway. Must be or comes in somehow that way.",
    "start": "1938300",
    "end": "1945889"
  },
  {
    "text": "So it doesn't matter how poorly Pascal Compiler does that since I never going to make any assumptions about the way Pascal does the packing.",
    "start": "1945890",
    "end": "1955550"
  },
  {
    "text": "I'm always going when I saw something in it with with two halves or if I start something in the B zero fields,",
    "start": "1955550",
    "end": "1962270"
  },
  {
    "text": "I'm never going to read out an LHD field. OK.",
    "start": "1962270",
    "end": "1968840"
  },
  {
    "text": "But when I'm debugging, I might want to take a look at memory and have it printed out in this way to see what it would be like in different fields.",
    "start": "1968840",
    "end": "1978299"
  },
  {
    "text": "Here's one of the places then when I did Dirty Pascal, this is one of the few places in the code where it does read a memory word in a different format from the way it was stored.",
    "start": "1978300",
    "end": "1986360"
  },
  {
    "text": "But I only use this as a last resort. I just built this in in something so that I could do so without having to do a",
    "start": "1986360",
    "end": "1991520"
  },
  {
    "text": "lot of pendent pencil and paper calculations on the on the thing if I had to. Otherwise, I found out afterwards it wasn't that bad because if I go back I typed zero and I get back into Pascal debugger and Pascal debugger,",
    "start": "1991520",
    "end": "2004150"
  },
  {
    "text": "I could look, I could talk about them five twenty seven and I could say dot int it.",
    "start": "2004150",
    "end": "2009720"
  },
  {
    "text": "And this debugger rule five twenty eight sorry.",
    "start": "2009720",
    "end": "2016630"
  },
  {
    "text": "Tells me what it is. And then if I wanted it with the H h R.H. it would have given me six five five three five and",
    "start": "2016630",
    "end": "2025540"
  },
  {
    "text": "and I could also ask for the dot QQQ Cuban dot b to field and it would have told me what it is.",
    "start": "2025540",
    "end": "2034240"
  },
  {
    "text": "So I didn't really need this print memory word very much because I have it in the past.",
    "start": "2034240",
    "end": "2039780"
  },
  {
    "text": "But that does illustrate, however, the idea of a memory word with a little bit of redundancy.",
    "start": "2039780",
    "end": "2047800"
  },
  {
    "text": "So I think by now everybody knows so much about memory words. They want me to move on to something else. Right. OK. The format file that you dump out is all full of memory words.",
    "start": "2047800",
    "end": "2059579"
  },
  {
    "text": "So and so the the the format that contains all of your strings, your macros, font information for quick preloading.",
    "start": "2059580",
    "end": "2071470"
  },
  {
    "text": "F.A. file, that is a file of memory work.",
    "start": "2071470",
    "end": "2077450"
  },
  {
    "text": "That's one of the reasons why we wouldn't expect it to be readable from one machine to another inside that memory.",
    "start": "2077450",
    "end": "2086240"
  },
  {
    "text": "Well. Several arrays in the program are our type memory word.",
    "start": "2086240",
    "end": "2091879"
  },
  {
    "text": "But the big one is this mem MGM. And that's the one that goes from member base up to Memex inclusive.",
    "start": "2091880",
    "end": "2101450"
  },
  {
    "text": "And inside of that, we do dynamic location.",
    "start": "2101450",
    "end": "2109760"
  },
  {
    "text": "Up until a point called Hineman Base. And there's Heimann base and low moon base.",
    "start": "2109760",
    "end": "2115370"
  },
  {
    "text": "And the layout of memory is explained in modules starting at 156.",
    "start": "2115370",
    "end": "2122840"
  },
  {
    "text": "And then the next few pages after that there are 156 gives really the layout of memory that just on page 51.",
    "start": "2122840",
    "end": "2132620"
  },
  {
    "text": "So the the key the key place there is Highman base because memory is divided once and for all into two areas.",
    "start": "2132620",
    "end": "2142760"
  },
  {
    "text": "The low part of it and the high part of it and the high part of it is used only for one word records.",
    "start": "2142760",
    "end": "2153950"
  },
  {
    "text": "And the low part is is used only for records that are more than one word long.",
    "start": "2153950",
    "end": "2160550"
  },
  {
    "text": "Here again, I didn't use Pascal's heap something. I programed something from scratch so that I could control exactly how much memory was getting used here.",
    "start": "2160550",
    "end": "2171380"
  },
  {
    "text": "And so that it would be more portable now and we could do a lot of other things with it.",
    "start": "2171380",
    "end": "2178880"
  },
  {
    "text": "Same same kind of reasons as for strings, but even more so now. The area less than high, ma'am.",
    "start": "2178880",
    "end": "2188690"
  },
  {
    "text": "Then, as I said, is always has notes of two words or more, and those above Hyman are done with the simple one, one word at a time reservation.",
    "start": "2188690",
    "end": "2202910"
  },
  {
    "text": "If you set if you have a job that has lots of macros, macro gets stored in one word, one word items.",
    "start": "2202910",
    "end": "2213200"
  },
  {
    "text": "The item actually consists of the R.H. Part is a link and the LHD part is divided to be zero.",
    "start": "2213200",
    "end": "2219859"
  },
  {
    "text": "B one note the LH part, which is a token sixteen bit representation of one token of your macro definition.",
    "start": "2219860",
    "end": "2226850"
  },
  {
    "text": "So if you have a if you are running something with large macro packages, you want a lot of space above Highman base.",
    "start": "2226850",
    "end": "2235010"
  },
  {
    "text": "The thing that put in in the presence of the old version of tech, the thing that put big,",
    "start": "2235010",
    "end": "2242780"
  },
  {
    "text": "big demands on things less than I and base were boxes and also the the notes that were made up intermediate to making paragraphs.",
    "start": "2242780",
    "end": "2256580"
  },
  {
    "text": "For example, when I ran this tech job on Sunday to print this this book for you,",
    "start": "2256580",
    "end": "2262140"
  },
  {
    "text": "I got I overflowed my memory below Highman base when I got to the index.",
    "start": "2262140",
    "end": "2270529"
  },
  {
    "text": "And here I was, four hundred and thirty pages into this thing and and it crashed. Memory capacity exceeded. And the reason was that there was the word type had been used so often and it came right at the end of a page.",
    "start": "2270530",
    "end": "2285890"
  },
  {
    "text": "So tech memory was already fairly full. And then along came comes a paragraph that says all the places where I use type in this program.",
    "start": "2285890",
    "end": "2294559"
  },
  {
    "text": "And if and for each of those, it built a very large break node so that it could optimize the index entry for type,",
    "start": "2294560",
    "end": "2303500"
  },
  {
    "text": "which was also a trivial optimization if you looked at it, because only three digit numbers, there would five of them fit on a line and there was nothing else to do. But to know this is doing a fancy ragged right margin and everything.",
    "start": "2303500",
    "end": "2315500"
  },
  {
    "text": "So. So the memory crashed because it was overloaded there with with with boxes and and things for the for the paragraph say, well,",
    "start": "2315500",
    "end": "2328310"
  },
  {
    "text": "indicating to the paragraph, nodes are reduced in size from 10 words to three words and they aren't generated as often.",
    "start": "2328310",
    "end": "2336700"
  },
  {
    "text": "So this, that and so you won't need quite so much space there. However, if there are still that if you had an application it was doing things with real long",
    "start": "2336700",
    "end": "2347000"
  },
  {
    "text": "paragraphs there you'd want there you would need a lot of space below high members.",
    "start": "2347000",
    "end": "2353630"
  },
  {
    "text": "But there's there's important reasons for fixing it once and for all at compile time what this home base is, as you'll see as you get into it.",
    "start": "2353630",
    "end": "2360980"
  },
  {
    "text": "So. So this is the way you have to make a decision when you when you compile tech as to what.",
    "start": "2360980",
    "end": "2371280"
  },
  {
    "text": "Is going to be home and base is not listed in that list of compile time constants in the Module Eleven,",
    "start": "2371280",
    "end": "2377750"
  },
  {
    "text": "because if you change Highman base at compile time, then you can't run a format.",
    "start": "2377750",
    "end": "2384350"
  },
  {
    "text": "You have to also change your F.A. file. See, the F.A. file is going to start loading macros at Heimann Base or and compute some other some other things that go in to the memory there.",
    "start": "2384350",
    "end": "2401930"
  },
  {
    "text": "And what you're allowed to change Min Max at compile time and it won't affect your format file.",
    "start": "2401930",
    "end": "2408050"
  },
  {
    "text": "So if somebody can, you can increase the size of the memory up in the macro region, up in up in the upper area and just just change it in in the constant section effect recompile.",
    "start": "2408050",
    "end": "2419840"
  },
  {
    "text": "And you've got more memory up there. But if you've going to if you have to change Hineman base,",
    "start": "2419840",
    "end": "2425450"
  },
  {
    "text": "then you're going to have to also run Unitech again and make another format for the the",
    "start": "2425450",
    "end": "2435410"
  },
  {
    "text": "presence that you're not supposed to change at compile time are listed in module twelve.",
    "start": "2435410",
    "end": "2441079"
  },
  {
    "text": "So the constants in eleven are given as Pascal c0 NIST type constants in module 12.",
    "start": "2441080",
    "end": "2448560"
  },
  {
    "text": "The the the constants mem base in high Mamm base are defined as web macros.",
    "start": "2448560",
    "end": "2458750"
  },
  {
    "text": "Also hash size is another one is defined there. So if you want to change the size of the hash table, certainly you can't preload your your hash codes unless if you change the size of the hash table.",
    "start": "2458750",
    "end": "2469970"
  },
  {
    "text": "Many of the other things though can be just changed and the F.A. file will still work even though the size has been different.",
    "start": "2469970",
    "end": "2475880"
  },
  {
    "text": "So you can increase the number of fonts, you can increase the number of parameters, increase the size of your buffer side, say the stream pool.",
    "start": "2475880",
    "end": "2485539"
  },
  {
    "text": "Most of those things can all be changed without recompiling any text.",
    "start": "2485540",
    "end": "2491930"
  },
  {
    "text": "That's the high end base then separates the dynamic variable sized memory from from the other part of the variable sized memory.",
    "start": "2491930",
    "end": "2504020"
  },
  {
    "text": "Starts out with a few words that are in fixed locations.",
    "start": "2504020",
    "end": "2510250"
  },
  {
    "text": "And I guess here I get to throw out this pad and see what happens.",
    "start": "2510250",
    "end": "2515670"
  },
  {
    "text": "Or should I try the blackboard? I think the blackboard might be better because everybody feels so on.",
    "start": "2515670",
    "end": "2528430"
  },
  {
    "text": "Here's the dynamic memory and here is your here.",
    "start": "2528430",
    "end": "2540630"
  },
  {
    "text": "I got you, I got you. OK, I have a better life there, but it's OK. So here's your dynamic memory.",
    "start": "2540630",
    "end": "2546279"
  },
  {
    "text": "This is Mem and and I put them bass here and Memex is the largest.",
    "start": "2546280",
    "end": "2560560"
  },
  {
    "text": "And then there's Heimann Bass somewhere where you decide is a good place you can compile with the state option.",
    "start": "2560560",
    "end": "2569860"
  },
  {
    "text": "Then it tells you exactly what the maximum amount of memory you've used to both kinds is for each job and also within a particular page.",
    "start": "2569860",
    "end": "2579730"
  },
  {
    "text": "So you can get a feeling for what would be good for the kinds of jobs you're running. Now, there is another location we find in this section on the memory allocation called First, Ma'am and second, ma'am.",
    "start": "2579730",
    "end": "2595270"
  },
  {
    "text": "And these are where we actually do the dynamic locations in between here. We have fixed locations set up, set aside for things that that I can refer to by fixed addresses.",
    "start": "2595270",
    "end": "2606250"
  },
  {
    "text": "I know they want to be somewhere in them. And I also know that I'll always, always need them there.",
    "start": "2606250",
    "end": "2611530"
  },
  {
    "text": "So I always put them there. So right here, for example, we put the definition, the specifications for glue that are like a fill glue or zero glue,",
    "start": "2611530",
    "end": "2620560"
  },
  {
    "text": "things that are that are people can say when they say h fill.",
    "start": "2620560",
    "end": "2626320"
  },
  {
    "text": "And it will refer to one of these words. We know we will always want an H feel to be present in this area.",
    "start": "2626320",
    "end": "2631750"
  },
  {
    "text": "I have one word, nodes that I always want to be present. These are typically the heads of lists so that they'll they'll be they'll have a link field.",
    "start": "2631750",
    "end": "2640510"
  },
  {
    "text": "And this will be starting to point to to the first item on the list. And then it's good to have another word that starts that list,",
    "start": "2640510",
    "end": "2648520"
  },
  {
    "text": "makes a lot of the algorithm simpler so they don't have to consider the empty case as a special case. So this is the Hyram based second, ma'am. And then all of these other from first ma'am to Hineman base.",
    "start": "2648520",
    "end": "2660520"
  },
  {
    "text": "This is twenty up to Homebase. And then this is about a dozen locations in here, all the way up to men, Max.",
    "start": "2660520",
    "end": "2668290"
  },
  {
    "text": "This is all dynamically allocated. Now the easiest thing to describe is how you allocate memory in this part, in this part of it.",
    "start": "2668290",
    "end": "2677530"
  },
  {
    "text": "All of these words are of type two House member, the type to have had an R.H. part and either B zero, B one or H or LH.",
    "start": "2677530",
    "end": "2690430"
  },
  {
    "text": "Oh, no. So the two halves here are right with our each part is size called link.",
    "start": "2690430",
    "end": "2697559"
  },
  {
    "text": "And so typically our one word nodes will be linked together in the list that we draw this way.",
    "start": "2697560",
    "end": "2706370"
  },
  {
    "text": "The link feel like call it link. And so there is a definition that link is the same age.",
    "start": "2706370",
    "end": "2713570"
  },
  {
    "text": "Now there's a pointer, there's a there's a global variable called Ma'am and which tells the largest location in this memory that you've that you've ever seen.",
    "start": "2713570",
    "end": "2730790"
  },
  {
    "text": "Did you ever ask for. So you never. Tech never bothers to initialize this part of it.",
    "start": "2730790",
    "end": "2736210"
  },
  {
    "text": "This might be gobs and gobs of memory. Just sit. You know, it's Ne'eman is the largest one you ever needed.",
    "start": "2736210",
    "end": "2744160"
  },
  {
    "text": "And it points to the. And there is another one called Avail, which points to the first one.",
    "start": "2744160",
    "end": "2750190"
  },
  {
    "text": "That's that's not being used right now. So if avail ever gets to be empty, null pointer, then we increase Mammen by one and and get the new location.",
    "start": "2750190",
    "end": "2764950"
  },
  {
    "text": "Otherwise, we never look at madmen. And if we solve it, but otherwise a veil is pointing to two to one and that one is pointing to the next one that's available and so on.",
    "start": "2764950",
    "end": "2773200"
  },
  {
    "text": "A typical way of keeping track of of words, which things aren't currently in use.",
    "start": "2773200",
    "end": "2779530"
  },
  {
    "text": "So when something is recycled, instead of doing a garbage collection, we have a algorithm that makes it available.",
    "start": "2779530",
    "end": "2788350"
  },
  {
    "text": "And then when the veil becomes now, then and we need another one, then we try to move Mammen at that time.",
    "start": "2788350",
    "end": "2796120"
  },
  {
    "text": "If Mammen equals Mad Max work, we're out of luck. We've run out.",
    "start": "2796120",
    "end": "2803120"
  },
  {
    "text": "OK, now those algorithms then are described just before the discussion of memory layer dynamic memory allocation starting as marginal.",
    "start": "2803120",
    "end": "2814820"
  },
  {
    "text": "One hundred and ten. That's right after the description of memory words.",
    "start": "2814820",
    "end": "2822470"
  },
  {
    "text": "And in that section, he talks about the the way avail is, is his handle.",
    "start": "2822470",
    "end": "2830869"
  },
  {
    "text": "So let's see. That's the bottom of page thirty nine. And can we you might see my finger here.",
    "start": "2830870",
    "end": "2839690"
  },
  {
    "text": "Vaill link of a link. A link of a veil. These are the available locations terminated by no I never say zero for another link.",
    "start": "2839690",
    "end": "2848660"
  },
  {
    "text": "I always say no and I'll be fine. No to be name base.",
    "start": "2848660",
    "end": "2855799"
  },
  {
    "text": "So it's the same as the address here of the first word in memory, which is turns out to be also the same as the word zero glue is stored.",
    "start": "2855800",
    "end": "2865400"
  },
  {
    "text": "I never make use of these of this fact, but it's it's true. And in order. But when I say no, this means I'm thinking of it as a null pointer.",
    "start": "2865400",
    "end": "2876290"
  },
  {
    "text": "If I say zero glue, it means I'm thinking of that as the address where zero point plus zero point minus zero point is stored.",
    "start": "2876290",
    "end": "2884270"
  },
  {
    "text": "And if I say zero, that means I'm not talking about a memory address at all in my program.",
    "start": "2884270",
    "end": "2891830"
  },
  {
    "text": "Okay, now. So Global's four avail and Mem End are defined at the bottom of page thirty nine there in module 113.",
    "start": "2891830",
    "end": "2902010"
  },
  {
    "text": "To get a new word. I say get a veil and we have a function says that returns a pointer and the word pointer is is is a synonym for half word.",
    "start": "2902010",
    "end": "2915860"
  },
  {
    "text": "However, it's only used when I intended to be a pointer into either Mamet or one of the text other big tables.",
    "start": "2915860",
    "end": "2923930"
  },
  {
    "text": "Could you show that on screen? Possibly. Here is the get avail function.",
    "start": "2923930",
    "end": "2930180"
  },
  {
    "text": "Your camera's pretty good. Get a real function that allocates a single word node.",
    "start": "2930180",
    "end": "2937190"
  },
  {
    "text": "And so that's the simple algorithm that I mentioned. Except that you see, we have to also always care, be careful of errors.",
    "start": "2937190",
    "end": "2946190"
  },
  {
    "text": "And so P is set to avail. If it's not, no, that's good. Then we just set availed to link of avail. Now Avail is pointing to the next available one.",
    "start": "2946190",
    "end": "2956660"
  },
  {
    "text": "And we reserved it. Otherwise we look at them end and we hope it's less than Max going the Virgin territory.",
    "start": "2956660",
    "end": "2967460"
  },
  {
    "text": "So if it was less than Memex, that's great. We increase Mammen and that's the value P that we are going to get for this pointer.",
    "start": "2967460",
    "end": "2975320"
  },
  {
    "text": "Otherwise, we call a procedure called runaway. Now, this is a procedure that will come in and give them error message saying do you have a runaway argument?",
    "start": "2975320",
    "end": "2984320"
  },
  {
    "text": "Because that's one of the most common reasons for for running out of memory at this point, is if somebody forgot to write brace and and it might be a parameter too long macro that doesn't have any protection against.",
    "start": "2984320",
    "end": "2997090"
  },
  {
    "text": "Against. Right. Grace is missing. And here we would like it at least as long as we're going to going to abort the job for running out of memory.",
    "start": "2997090",
    "end": "3006190"
  },
  {
    "text": "We're going to at least want to point to where the where the error was so it won't happen again.",
    "start": "3006190",
    "end": "3012450"
  },
  {
    "text": "So so there's a runaway procedure that will that will give a essentially appropriate error message terribly.",
    "start": "3012450",
    "end": "3019270"
  },
  {
    "text": "Then we we we said Linkov of pizza. No, before we return, get avail.",
    "start": "3019270",
    "end": "3028390"
  },
  {
    "text": "Whenever we get something from that procedure, it's going to it's going to have its Lingfield.",
    "start": "3028390",
    "end": "3033940"
  },
  {
    "text": "No, because if you ever want it to be something you want it to be. No. And you almost always want it to be know when you're getting a new word out of this memory,",
    "start": "3033940",
    "end": "3041300"
  },
  {
    "text": "then there is something that would be commented out unless we were maintaining statistics. And here's what would slow it down, because we have to get available things rather often.",
    "start": "3041300",
    "end": "3049510"
  },
  {
    "text": "So increasing this counter thing, how many words are are currently in use and that and then I get a veil.",
    "start": "3049510",
    "end": "3059800"
  },
  {
    "text": "Is this the full value of the function? Is return at this point not set to free avail.",
    "start": "3059800",
    "end": "3071650"
  },
  {
    "text": "Put something on. Again, I just wrote a macro for it. I didn't want the procedure call overhead particularly.",
    "start": "3071650",
    "end": "3077470"
  },
  {
    "text": "So it was only needed about five places in tech. And so why not repeat the code each time sort of calling in procedure? So we have free, free avail of that pointer.",
    "start": "3077470",
    "end": "3087910"
  },
  {
    "text": "And so we just do the opposite process. We we put we plan to Lingfield to the previously available.",
    "start": "3087910",
    "end": "3093190"
  },
  {
    "text": "One avail now points to the new newly available one and we decrease the number of things dynamically used.",
    "start": "3093190",
    "end": "3099490"
  },
  {
    "text": "There's no other way to get available. One word. No. You have to call one. You have to say get a veil or free of veil. It's not allowed to do this yourself.",
    "start": "3099490",
    "end": "3108900"
  },
  {
    "text": "You've come to the next procedure is something that'll take a whole list and freedom and freedom of now.",
    "start": "3108900",
    "end": "3116440"
  },
  {
    "text": "So that's simple in a one word, part of memory in the in the variables word, part of memory.",
    "start": "3116440",
    "end": "3122180"
  },
  {
    "text": "There's a kind of interesting method used. And I'll go to the blackboard again, switching this multimedia show here.",
    "start": "3122180",
    "end": "3133410"
  },
  {
    "text": "Does somebody have the time, by the way? I want to try to pace myself to actually, I have it on my screen here if the computer isn't done.",
    "start": "3133410",
    "end": "3142079"
  },
  {
    "text": "Yeah. 255. You're right. OK. So in this area of memory, I'm sorry.",
    "start": "3142080",
    "end": "3151190"
  },
  {
    "text": "In this area of memory. Every time I get out of a variable size cluster of nodes, I make sure that I that the link field in the first word is something unequal to memex.",
    "start": "3151190",
    "end": "3173660"
  },
  {
    "text": "It's never equal to men, Max. Remember the men men we never I'm sorry, never equal to Max half word because we made sure that Max was strictly less than Max Halfords.",
    "start": "3173660",
    "end": "3187550"
  },
  {
    "text": "So this this is something we'd never occurs. Lingfield or appointer.",
    "start": "3187550",
    "end": "3193280"
  },
  {
    "text": "If this was. But the ones that are available are going to be flagged by having their first word.",
    "start": "3193280",
    "end": "3198680"
  },
  {
    "text": "Lingfield here as Max Hafford. Now, if it's long.",
    "start": "3198680",
    "end": "3204559"
  },
  {
    "text": "So we can store any data here except that one that one bad one. And then the rest of the format is completely free.",
    "start": "3204560",
    "end": "3211800"
  },
  {
    "text": "But going to this is a use.",
    "start": "3211800",
    "end": "3217210"
  },
  {
    "text": "But if it's free, then we put Max Hafford here, which I can just indicate by all once or something like that in binary.",
    "start": "3217210",
    "end": "3226070"
  },
  {
    "text": "And then we put the size here of the free area. And then I have an L link and Arling in the next word.",
    "start": "3226070",
    "end": "3235550"
  },
  {
    "text": "And this is a this is a doubly linked list of free cells. That's that goes around in a circle. And then the rest of the words are are unknown.",
    "start": "3235550",
    "end": "3246500"
  },
  {
    "text": "I want to free something up. I simply stamp its size field here.",
    "start": "3246500",
    "end": "3251600"
  },
  {
    "text": "I have to know how big it is when I'm freeing it. And then I link it into the circular list is a list of all these of all these notes that are free.",
    "start": "3251600",
    "end": "3263520"
  },
  {
    "text": "And when I'm when I need to find a new place in this memory, I go around this list until I find one that's big enough by looking at the size fields.",
    "start": "3263520",
    "end": "3274820"
  },
  {
    "text": "But before I check to see if it's if I find a place big enough. I also look at the one right after it to see if it's also free. If it's also free, then it'll have ones that in in this field here.",
    "start": "3274820",
    "end": "3287780"
  },
  {
    "text": "And then I can then I can combine these two at that point. And I keep doing that until I get to a place that's followed by a non free one.",
    "start": "3287780",
    "end": "3296180"
  },
  {
    "text": "Might be preceded by a free one. I don't care. I'll get to that one later. If I if if if I really need it when I look ahead and collapse it at this point and it dynamically is, this works on very nicely.",
    "start": "3296180",
    "end": "3308359"
  },
  {
    "text": "And then I and then I get a then I see if the size is right.",
    "start": "3308360",
    "end": "3313460"
  },
  {
    "text": "If it's big enough that means that it might fit perfectly. And I can just allocated and take it out of its list.",
    "start": "3313460",
    "end": "3321020"
  },
  {
    "text": "If it's if it's one too big. I can't do anything with it because I'm not allowed nodes of size two of a size one.",
    "start": "3321020",
    "end": "3329360"
  },
  {
    "text": "In this area. So it has to be at least two to larger. If it's in these two larger than I allocate the top part and I decrease the size of this one.",
    "start": "3329360",
    "end": "3340280"
  },
  {
    "text": "So that's the algorithm that's explained there in the next part. For a variable first for getting variable size records.",
    "start": "3340280",
    "end": "3347930"
  },
  {
    "text": "Important thing to remember is if you're implementing any extensions to it, make sure that you put some kind of a link feel to something in the first word here that could never possibly be all once.",
    "start": "3347930",
    "end": "3357170"
  },
  {
    "text": "That's a mild restriction, but it could certainly be violated if somebody somewhere didn't know.",
    "start": "3357170",
    "end": "3364359"
  },
  {
    "text": "OK, well, now the I'm running a little bit short, though, because I wanted to tell you what goes into these lists and.",
    "start": "3364360",
    "end": "3374020"
  },
  {
    "text": "But I got I got through most of the main ideas because we talk about the info, I guess, in the one word section of memory.",
    "start": "3374020",
    "end": "3383120"
  },
  {
    "text": "I always call the left hand the LHD part, the info field and the right arch part, the link field.",
    "start": "3383120",
    "end": "3390410"
  },
  {
    "text": "Then something it's also rather commonly used in the program is an L link and Arling Field.",
    "start": "3390410",
    "end": "3395599"
  },
  {
    "text": "But these always refer to the info and link parts of the second of the second word of a multi word.",
    "start": "3395600",
    "end": "3402380"
  },
  {
    "text": "So if somebody if I ever in my program say L link, I'm talking about the left hand part of a word, too, of something that's at least two words long.",
    "start": "3402380",
    "end": "3412759"
  },
  {
    "text": "Now, all of these things that can go on in a horizontal list are indicated somehow and linked together.",
    "start": "3412760",
    "end": "3422420"
  },
  {
    "text": "So if I have a list, I have 100 items in it. They're going I'm gonna have a pointer to the first one somehow.",
    "start": "3422420",
    "end": "3427730"
  },
  {
    "text": "It's Lingfield will link to the second one. It's Lingfield will point to the third. And the final one will point to no. I use a circular linking like this only in the list of available cells for the variable sized memory.",
    "start": "3427730",
    "end": "3442850"
  },
  {
    "text": "But the other lists are always. Well, there's only one or two exceptions almost always end with no.",
    "start": "3442850",
    "end": "3450740"
  },
  {
    "text": "And I have to tell what kind of what kind of a thing I like, what kind of thing I'm doing.",
    "start": "3450740",
    "end": "3457790"
  },
  {
    "text": "So there's a little bit of a problem because I want to pack a link field in a word.",
    "start": "3457790",
    "end": "3465740"
  },
  {
    "text": "And I also typically have a font and a character font is ten or fifty six possibilities.",
    "start": "3465740",
    "end": "3470980"
  },
  {
    "text": "That's a quarter word. A character is 256 possibility. There's another quarter word and my link is a half word.",
    "start": "3470980",
    "end": "3477230"
  },
  {
    "text": "I use up my 32 bits. Well, here we have a great solution due to lose track Parlo and in Yanqui.",
    "start": "3477230",
    "end": "3482690"
  },
  {
    "text": "I don't know what combination of the two of you, but they realize that just by looking at the address of the word,",
    "start": "3482690",
    "end": "3489290"
  },
  {
    "text": "I could tell whether it was in the one word part of memory or the or the variable part of memory.",
    "start": "3489290",
    "end": "3494760"
  },
  {
    "text": "So it goes up into one word, part of memory. I know it's a character node and I don't need to look at it any further.",
    "start": "3494760",
    "end": "3501290"
  },
  {
    "text": "I know that that it contains Fontain character information. So up here, anything up above Highman base is going to have a link in this park and then it's going to have a font and a character in its V0 and one parts.",
    "start": "3501290",
    "end": "3514070"
  },
  {
    "text": "So it's called the Fun Character Fields. So as I'm going through a list, I can check to see whether the pointer is high.",
    "start": "3514070",
    "end": "3520220"
  },
  {
    "text": "Then I know that it's a font and character saved a bit that way. Now if it's not, then we have a type field.",
    "start": "3520220",
    "end": "3527990"
  },
  {
    "text": "And so we have a type field and a subtype field type field tells what kind of a thing it is,",
    "start": "3527990",
    "end": "3534050"
  },
  {
    "text": "is a box horizontal made out of horizontal list is a kearn or whatever the subtype is is.",
    "start": "3534050",
    "end": "3542090"
  },
  {
    "text": "Further information relating to the type. So the type feel then is something that we have room for ten or 56 different types.",
    "start": "3542090",
    "end": "3551720"
  },
  {
    "text": "I'm only using about 30 of them. Subtype field is often not used at all.",
    "start": "3551720",
    "end": "3558930"
  },
  {
    "text": "If I was implementing this on a microcomputer, I could do something different about the organization of the memory.",
    "start": "3558930",
    "end": "3568579"
  },
  {
    "text": "Since all these words up above Heimann base are half, I could allocate them a sixteen bit as to sixteen bit arrays which go from Hineman base up to Memex.",
    "start": "3568580",
    "end": "3581020"
  },
  {
    "text": "And then I could implement from from base up the first memory sixteen bit words and make instead of a memory word I could use,",
    "start": "3581020",
    "end": "3590900"
  },
  {
    "text": "I could devise something so that if this would ever come out to some other number of bytes then I wouldn't, I'd save a little bit of space in here.",
    "start": "3590900",
    "end": "3602660"
  },
  {
    "text": "I don't think it would save a great deal, but it's a possibility for a change. If you change some of these macros,",
    "start": "3602660",
    "end": "3607670"
  },
  {
    "text": "you would be able to run the rest of tech just by changing the way it refers to",
    "start": "3607670",
    "end": "3613790"
  },
  {
    "text": "nodes in memory with with some other memory organizations that would be equivalent.",
    "start": "3613790",
    "end": "3619460"
  },
  {
    "text": "I don't think the typical use you'd gain a great deal over, over, over what we have right now.",
    "start": "3619460",
    "end": "3627700"
  },
  {
    "text": "Now, each each time I am looking at something and the thing I look at the T field that tells me what type it is",
    "start": "3627700",
    "end": "3634550"
  },
  {
    "text": "and the type will be it's one of these things listed starting on on March one hundred and twenty nine.",
    "start": "3634550",
    "end": "3645880"
  },
  {
    "text": "And there's just a great number of definitions there. Following all of the English language words, it says ageless, known as zero.",
    "start": "3645880",
    "end": "3656180"
  },
  {
    "text": "And so the type field will be zero. In such a case, box node size is seven.",
    "start": "3656180",
    "end": "3662540"
  },
  {
    "text": "This is a declared as a macro so that when I free a box note, if somebody chose another way of storing this and boxes were some other number of words,",
    "start": "3662540",
    "end": "3671960"
  },
  {
    "text": "then then you would only have to change this macro on this one place. The width offset depth. The second word of a box note is its width as a scaled number.",
    "start": "3671960",
    "end": "3683150"
  },
  {
    "text": "That's defined here. Width of something is memo of that plus width offset. SC. OK, that's the width of a box. The depth of the box. Height of a box shift.",
    "start": "3683150",
    "end": "3691890"
  },
  {
    "text": "Amount of a box. These things are explained in words above it. Now the different things we can have is our age list. No delice known rule.",
    "start": "3691890",
    "end": "3701280"
  },
  {
    "text": "No. Turn the page. We get new. We get in Snoad insertion nodes.",
    "start": "3701280",
    "end": "3706750"
  },
  {
    "text": "Mark nodes adjustment nodes for the V adjust operation, ligature node, discretionary node.",
    "start": "3706750",
    "end": "3715870"
  },
  {
    "text": "All of these have subfields that are explained what they are, what their function is there.",
    "start": "3715870",
    "end": "3723070"
  },
  {
    "text": "I might go into that a little more next hour. The what's it. No, they mentioned in a lecture yesterday that's not tape eight and that's for extensions in the subtype.",
    "start": "3723070",
    "end": "3733869"
  },
  {
    "text": "You look at the subtype or what's it node and it would tell you what kind of or what's that you have. There's a math. No. That begins and ends math formulas, glue nodes,",
    "start": "3733870",
    "end": "3744460"
  },
  {
    "text": "which are pointers to to the actual specification of glew current nodes and",
    "start": "3744460",
    "end": "3751150"
  },
  {
    "text": "penalty nodes and some more coming up later onset nodes and things like that. So the various different types of nodes. And I described this all in words as two so that you know what they represent in order to reinforce that.",
    "start": "3751150",
    "end": "3765100"
  },
  {
    "text": "Whenever I in this program, whenever I define a complicated data type, I, I usually follow that by a bunch of programs that print out that data type in symbolic form.",
    "start": "3765100",
    "end": "3775870"
  },
  {
    "text": "So at least you can you can get an idea as to some programs that use this data structure and how a safe way to refer to the data structure is.",
    "start": "3775870",
    "end": "3783830"
  },
  {
    "text": "Because if you're going to have a program that's going to print out what's in a node, you've got to be able to you know, it's not only this printout is not going to explain what's in the node, but the program is going to use the right protocols for accessing a node.",
    "start": "3783830",
    "end": "3795790"
  },
  {
    "text": "So this whole section called Displaying Boxes is really worth reading when if you ever want to know what's what's in a box.",
    "start": "3795790",
    "end": "3803530"
  },
  {
    "text": "We looked at one of those examples before a display, a node P, it says is Cherno than confronting somebody.",
    "start": "3803530",
    "end": "3810280"
  },
  {
    "text": "If you look at these cores, you'll see that this is the way you're supposed to, to look at the data structure by using the macros in the in these routines that display boxes and glue and so on.",
    "start": "3810280",
    "end": "3822610"
  },
  {
    "text": "So so are the programs. Not only we'll give printouts then when you have to find out what's inside of tech",
    "start": "3822610",
    "end": "3830950"
  },
  {
    "text": "instead of looking at all those bits and and and checking against the macro definition, saying what was type three? Not only does this give you a program that does it symbolically,",
    "start": "3830950",
    "end": "3842920"
  },
  {
    "text": "but it also the program itself shows you is a paradigm of how to write other programs that access the data structure.",
    "start": "3842920",
    "end": "3853059"
  },
  {
    "text": "Any questions on that? Before we adjourn. OK, thanks very much and I'll see you in 24 minutes.",
    "start": "3853060",
    "end": "3870070"
  }
]