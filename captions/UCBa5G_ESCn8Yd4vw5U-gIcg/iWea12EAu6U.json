[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "Hi, everyone. I'm Abby, I'm the head TA for this class and I'm also a PhD student in the Stanford NLP group.",
    "start": "5210",
    "end": "12510"
  },
  {
    "text": "And today I'm gonna be telling you about language models and recurrent neural networks. So, here's an overview of what we're gonna do today.",
    "start": "12510",
    "end": "19980"
  },
  {
    "text": "Today, first, we're going to introduce a new NLP task, that's language modelling, and that's going to motivate us to learn about a new family of neural networks,",
    "start": "19980",
    "end": "29504"
  },
  {
    "text": "that is recurrent neural networks or RNNs. So, I'd say that these are two of the most important ideas you're going to learn for the rest of the course.",
    "start": "29504",
    "end": "37414"
  },
  {
    "start": "33000",
    "end": "170000"
  },
  {
    "text": "So, we're going to be covering some fairly cool material today. So, let's start off with language modeling.",
    "start": "37415",
    "end": "44305"
  },
  {
    "text": "Language modeling is the task of predicting what word comes next. So, given this piece of text the students opens their blank,",
    "start": "44305",
    "end": "52230"
  },
  {
    "text": "could anyone shout out a word which you think might be coming next?",
    "start": "52230",
    "end": "56200"
  },
  {
    "text": "Purpose. [NOISE]. [OVERLAPPING] Mind, what else? I didn't quite hear them,",
    "start": "58370",
    "end": "63840"
  },
  {
    "text": "but, uh, yeah, these are all likely things, right? So, these are some things which I thought, students might be opening, uh,",
    "start": "63840",
    "end": "69490"
  },
  {
    "text": "students open their books, seems likely. Uh, students open their laptops, students open their exams,",
    "start": "69490",
    "end": "75040"
  },
  {
    "text": "Students open their minds, incredibly, someone came up with one, that one just now, uh, it's kind of a metaphorical meaning of opening.",
    "start": "75040",
    "end": "80329"
  },
  {
    "text": "So, you are all performing language modeling right now. And thinking about what word comes next,",
    "start": "80330",
    "end": "85475"
  },
  {
    "text": "you are being a language model. So, here's a more formal definition of what a language model is.",
    "start": "85475",
    "end": "91385"
  },
  {
    "text": "Given a sequence of words X1 up to Xt, a language model, is something that computes",
    "start": "91385",
    "end": "97340"
  },
  {
    "text": "the probability distribution of the next word, Xt plus 1. So, a language model comes up with the probability distribution,",
    "start": "97340",
    "end": "104194"
  },
  {
    "text": "the conditional probability, of what X t plus 1 is given the words it found. And here we're assuming that, Xt plus 1",
    "start": "104194",
    "end": "110810"
  },
  {
    "text": "can be any word w from a fixed vocabulary V. So we are assuming that there is a pre-defined list of words that we're considering.",
    "start": "110810",
    "end": "118204"
  },
  {
    "text": "In this way, you can view language modeling as a type of classification task, because there's a predefined number of possibilities.",
    "start": "118205",
    "end": "124580"
  },
  {
    "text": "Um, we call a system that does this a language model.",
    "start": "124580",
    "end": "129360"
  },
  {
    "text": "There's an alternative way of thinking about a language model as well. You can think of a language model",
    "start": "129850",
    "end": "135200"
  },
  {
    "text": "as a system which assigns probability to a piece of text. So, for example, if we have some piece of text,",
    "start": "135200",
    "end": "141470"
  },
  {
    "text": "X up to X capital T, then, the probability of this text according to the language model can be broken down.",
    "start": "141470",
    "end": "147829"
  },
  {
    "text": "So, just by definition, you can say that the probability is equal to, the product of all of these conditional probabilities.",
    "start": "147830",
    "end": "154530"
  },
  {
    "text": "And, uh, the form inside, the products is exactly what a language model provides.",
    "start": "154530",
    "end": "160480"
  },
  {
    "text": "So, you can think of these things as somewhat equivalent. Predicting next words, gives you a system, that can give the probability of a given piece of text.",
    "start": "160480",
    "end": "169110"
  },
  {
    "text": "So, in fact, you, use language models every day. For example, when you're texting on your phone and you're writing a message,",
    "start": "169270",
    "end": "176120"
  },
  {
    "start": "170000",
    "end": "336000"
  },
  {
    "text": "then most likely if you have a smartphone, it will be predicting what word you might be about to say. So, if you say, um, I'll meet you at the-",
    "start": "176120",
    "end": "181790"
  },
  {
    "text": "your phone might suggest perhaps you mean airport or cafe, or office, for example. Another situation which you use language models every day",
    "start": "181790",
    "end": "188905"
  },
  {
    "text": "is when you search for something on the internet, for example, Google, and you start typing your query, then Google tries to complete your query for you, and that's language modeling.",
    "start": "188905",
    "end": "195952"
  },
  {
    "text": "It's predicting what word or words might come next. So, that's what a language model is,",
    "start": "195952",
    "end": "203715"
  },
  {
    "text": "and the question is, how would you learn a language model? So, if I was to ask that question in the pre- deep learning era,",
    "start": "203715",
    "end": "209917"
  },
  {
    "text": "which was really only a few years ago, the answer would be, you would learn a n-gram language model.",
    "start": "209917",
    "end": "215004"
  },
  {
    "text": "So, today first we're going to learn about n-gram language models. So, before I can tell you what a n-gram language model is,",
    "start": "215005",
    "end": "221330"
  },
  {
    "text": "you need to know what an n-gram is. So, by definition an n-gram is a chunk of n  consecutive words.",
    "start": "221330",
    "end": "227905"
  },
  {
    "text": "So, for example, a one gram or unigram, is just all of the individual words in the sequence that would be \"the students open the-\"",
    "start": "227905",
    "end": "235020"
  },
  {
    "text": "A two gram or bigram would be all of the consecutive chunks of pairs of words, \"the students\", \"students opened\", \"opened their\"",
    "start": "235020",
    "end": "240980"
  },
  {
    "text": "and so on for trigrams and four-grams, etc. So, the core idea of an n-gram language model",
    "start": "240980",
    "end": "248575"
  },
  {
    "text": "is that in order to predict what word comes next, you're going to collect a bunch of statistics, about how frequent different n-grams are,",
    "start": "248575",
    "end": "254930"
  },
  {
    "text": "from some kind of training data, and then you can use those statistics to predict what next words might be likely.",
    "start": "254930",
    "end": "261120"
  },
  {
    "text": "Here is some more detail. So, to make an n-gram language model, first you need to make a simplifying assumption,",
    "start": "261830",
    "end": "268490"
  },
  {
    "text": "and this your assumption. You say that the next word Xt plus 1 depends only on the preceding N-1 words.",
    "start": "268490",
    "end": "277535"
  },
  {
    "text": "So, what we're assuming, is that the probability distribution, the conditional probability of Xt plus 1 given all of the words they follow,",
    "start": "277535",
    "end": "285020"
  },
  {
    "text": "we're just going to simplify that, and say it only depends on the last N-1 words,  and that's our assumption.",
    "start": "285020",
    "end": "290485"
  },
  {
    "text": "So, by the definition of conditional probability, we can say that this probability,",
    "start": "290485",
    "end": "295600"
  },
  {
    "text": "is just the ratio of two different probabilities. So, on the top, you've got the probability of",
    "start": "295600",
    "end": "301180"
  },
  {
    "text": "a particular n-gram and on the bottom we've got the probability of a particular N-1 gram",
    "start": "301180",
    "end": "306192"
  },
  {
    "text": "This is a little hard to read because of all the superscripts but I'm gonna give an example with words on the next slide. Okay. So, that's the definition of the probability of the next word,",
    "start": "306192",
    "end": "315055"
  },
  {
    "text": "but the question remains, how do we get all of these n-gram and N-1 gram probabilities? So, the answer is, we're going to get them by",
    "start": "315055",
    "end": "322300"
  },
  {
    "text": "counting them in some large corpus of text. So, we're going to approximate, these probabilities just by the count of the number of times that",
    "start": "322300",
    "end": "329560"
  },
  {
    "text": "these particular n-grams and N-1 grams appeared in our training corpus. Okay. So, here's an example with some words.",
    "start": "329560",
    "end": "337370"
  },
  {
    "start": "336000",
    "end": "612000"
  },
  {
    "text": "Suppose we are trying to learn a 4-gram language model, and suppose that we have a piece of text, that says,",
    "start": "337370",
    "end": "342830"
  },
  {
    "text": "\"As the proctor started the clock, the students opened their blank\", and we're trying to predict what word is coming next.",
    "start": "342830",
    "end": "348895"
  },
  {
    "text": "So, because we're learning a 4-gram language model, a simplifying assumption is that the next word depends only on the last three words,",
    "start": "348895",
    "end": "355910"
  },
  {
    "text": "last N-1 words. So, we're going to discard all of the context so far except for the last few words,",
    "start": "355910",
    "end": "361520"
  },
  {
    "text": "which is, \"Students opened their.\" So, as a reminder, n-gram language model says that,",
    "start": "361520",
    "end": "367620"
  },
  {
    "text": "the probability of the next word being, some particular word W in the vocabulary is equal to the number of times we saw",
    "start": "367620",
    "end": "373230"
  },
  {
    "text": "students opened their W divided by the number of times we saw students opened their,  in the training corpus.",
    "start": "373230",
    "end": "378655"
  },
  {
    "text": "So, let's suppose that in our training corpus, we saw the phrase \"students open their\" 1,000 times.",
    "start": "378655",
    "end": "384215"
  },
  {
    "text": "And suppose that, we saw \"students opened their books\" 400 times. This means that the probability of the next word being books is 0.4.",
    "start": "384215",
    "end": "392220"
  },
  {
    "text": "And uh, similarly, let's suppose that we saw students open their exams 100 times, this means that the probability of exams given students",
    "start": "392220",
    "end": "399260"
  },
  {
    "text": "open their is 0.1. Is there a question? [inaudible].",
    "start": "399260",
    "end": "404900"
  },
  {
    "text": "The question is, does the order of the words matter? And the answer is yes, the order of students open there does matter.",
    "start": "404900",
    "end": "410340"
  },
  {
    "text": "It's different to \"the students opened.\" So, the question I want to raise now is,",
    "start": "410340",
    "end": "416985"
  },
  {
    "text": "was it a good idea for us to discard the proctor context? If you look at the actual example that we had,",
    "start": "416985",
    "end": "423115"
  },
  {
    "text": "the example was as the proctor started the clock, the students opened their blank. So, do we think that books or exams is more likely given the actual context,",
    "start": "423115",
    "end": "432360"
  },
  {
    "text": "the full context? Yep. Exams. Right. Exams is more likely because the proctor and",
    "start": "432360",
    "end": "437795"
  },
  {
    "text": "the clock heavily implies that it's an exam scenario, so they're more likely to be opening the exams than the books, unless it's an open book exam.",
    "start": "437795",
    "end": "444400"
  },
  {
    "text": "Uh, but I think, overall, it should be exams. So, the problem that we're seeing here is that in the training corpus,",
    "start": "444400",
    "end": "449889"
  },
  {
    "text": "the fact that students were opening something means that it's more likely to be books than exams because overall, books are more common than exams.",
    "start": "449890",
    "end": "456305"
  },
  {
    "text": "But if we know that the context is, the proctor and the clock, then it should be exams. So, what I'm highlighting here is a problem with our simplifying assumption.",
    "start": "456305",
    "end": "464240"
  },
  {
    "text": "If we throw away too much context, then we are not as good as predicting the words as we would be if we kept the context.",
    "start": "464240",
    "end": "470455"
  },
  {
    "text": "Okay. So, that's one problem with n-gram, uh, language models. Uh, there are some other problems as well.",
    "start": "470455",
    "end": "476810"
  },
  {
    "text": "So, uh, here again is the equation that you saw before. One problem which we're gonna call",
    "start": "476810",
    "end": "481880"
  },
  {
    "text": "the sparsity problem is what happens if the number on top, the numerator, what if that count is equal to zero.",
    "start": "481880",
    "end": "488380"
  },
  {
    "text": "So, what if for some particular word W, the phrase students opened their W never occurred in the data.",
    "start": "488380",
    "end": "494449"
  },
  {
    "text": "So, for example, let's suppose students opened their petri dishes, is fairly uncommon and it never appears in the data,",
    "start": "494450",
    "end": "499880"
  },
  {
    "text": "then that means our probability of the next word being petri dishes will be zero. And this is bad, because it might be uncommon but it is,",
    "start": "499880",
    "end": "507390"
  },
  {
    "text": "a valid scenario, right? If you're a biology student for example. So, this is a problem and we call it the sparsity problem,",
    "start": "507390",
    "end": "514085"
  },
  {
    "text": "because the problem is that if we'd never seen an event happen in the training data, then our model assigns zero probability to that event.",
    "start": "514085",
    "end": "521485"
  },
  {
    "text": "So, one partial solution to this problem is that maybe we should add a small delta, small number delta to the count,",
    "start": "521485",
    "end": "528290"
  },
  {
    "text": "for every word in the vocabulary. And then this way, every possible word that come next,",
    "start": "528290",
    "end": "533920"
  },
  {
    "text": "has at least some small probability. So, petri dishes will have some small probability,",
    "start": "533920",
    "end": "539089"
  },
  {
    "text": "but then so, will all of the other words which are possibly bad choices. So, this, uh, technique is called smoothing, because the idea is,",
    "start": "539089",
    "end": "545579"
  },
  {
    "text": "you're going from a very, uh, sparse probability distribution, which is zero, almost everywhere, with a few spikes where there's,",
    "start": "545580",
    "end": "551550"
  },
  {
    "text": "uh, being n-grams that we've seen, it goes from that to being a more smooth probability distribution where everything has at least a small probability on it.",
    "start": "551550",
    "end": "559615"
  },
  {
    "text": "So, the second sparsity problem which is possibly worse than the first one is, what happens if the number in the denominator is zero?",
    "start": "559615",
    "end": "568130"
  },
  {
    "text": "So, in our example, that would mean, what if we never even saw the trigram \"students opened their\" in the training data.",
    "start": "568130",
    "end": "574655"
  },
  {
    "text": "If that happens, then we can't even calculate this probability distribution at all for any word W because we never even saw this context before.",
    "start": "574655",
    "end": "582820"
  },
  {
    "text": "So, a possible solution to this is that if you can't find \"students open their\" in the corpus,",
    "start": "582820",
    "end": "588450"
  },
  {
    "text": "then you should back off to just conditioning on the last two words, rather than the last three words.",
    "start": "588450",
    "end": "593545"
  },
  {
    "text": "So, now you'd be looking at times when you'd seen, uh, \"open their\" and seeing what what's come next. So, this is called back-off because in this failure case,",
    "start": "593545",
    "end": "601350"
  },
  {
    "text": "for when you have no data for your 4-gram language model, you're backing off to a trigram language model. Are there any questions at this point?",
    "start": "601350",
    "end": "609510"
  },
  {
    "start": "612000",
    "end": "658000"
  },
  {
    "text": "Okay. So, um, another thing to note is that these sparsity problems",
    "start": "612310",
    "end": "617570"
  },
  {
    "text": "get worse if you increase N. If you make N larger in your n-gram language model, and you might want to do this, for example,",
    "start": "617570",
    "end": "623870"
  },
  {
    "text": "you might think, uh, I want to have a larger context, so I can pay attention to words that happened longer ago and that's gonna make it a better predictor.",
    "start": "623870",
    "end": "630890"
  },
  {
    "text": "So, you might think making N bigger is a good idea. But the problem is if you do that then the sparsity problems get worse.",
    "start": "630890",
    "end": "636410"
  },
  {
    "text": "Because, let's suppose you say, I want a 10-gram language model. Then the problem is that you're going to be counting, how often you seen process in 9-grams and 10-grams.",
    "start": "636410",
    "end": "643480"
  },
  {
    "text": "But 9-grams and 10-grams, there's so many of them, that the one you are interested in probably never occurred, in your training data which means that the whole thing becomes dysfunctional.",
    "start": "643480",
    "end": "651154"
  },
  {
    "text": "So, in practice, we usually can't have N much bigger than five.",
    "start": "651155",
    "end": "655680"
  },
  {
    "text": "Okay. So, that was, uh, two sparsity problems with n-gram language models. Here is a problem with storage.",
    "start": "656170",
    "end": "662770"
  },
  {
    "start": "658000",
    "end": "694000"
  },
  {
    "text": "So, if we look at this equation, uh, you have to think about what do you need to store in order to use your n-gram language model.",
    "start": "662770",
    "end": "669365"
  },
  {
    "text": "You need to store this count number, for all of the n-grams that you observed in the corpus when you were going through the training corpus counting them.",
    "start": "669365",
    "end": "677215"
  },
  {
    "text": "And the problem is, that as you increase N, then this number of n-grams that you have to store and count increases.",
    "start": "677215",
    "end": "683480"
  },
  {
    "text": "So, another problem with increasing N is that the size of your model, or your n-gram model, uh, gets bigger.",
    "start": "683480",
    "end": "690750"
  },
  {
    "text": "Okay, so n-gram Language Models in practice. Let's look at an example.",
    "start": "691490",
    "end": "697214"
  },
  {
    "start": "694000",
    "end": "773000"
  },
  {
    "text": "You can actually build a simple trigram Language Model over a 1.7 million word corpus,",
    "start": "697215",
    "end": "702540"
  },
  {
    "text": "uh, in a few seconds on your laptop. And in fact, the corpus that I used to do this was the same one that you met in assignment one.",
    "start": "702540",
    "end": "707970"
  },
  {
    "text": "It's Reuters' corpus which is, uh, business and financial news. So, if you want to do this yourself, you can follow that link at the bottom of the slide later.",
    "start": "707970",
    "end": "715005"
  },
  {
    "text": "So, uh, this is, uh, something which I ran on my laptop in a few second. So I gave it the context of the bigram today the,",
    "start": "715005",
    "end": "722790"
  },
  {
    "text": "and then I asked the trigram Language Model what word is likely to come next. So, the Language Model said that the top next most likely words are",
    "start": "722790",
    "end": "729855"
  },
  {
    "text": "company, bank, price, Italian, emirate, et cetera. So already just looking at these probabilities that are assigned to these different words,",
    "start": "729855",
    "end": "737640"
  },
  {
    "text": "uh, you can see that there is a sparsity problem. For example, the top two most likely words have the exact same probability and the reason for that is,",
    "start": "737640",
    "end": "744720"
  },
  {
    "text": "that this number is 4 over 26. So these are quite small integers, uh, meaning that we only saw, uh,",
    "start": "744720",
    "end": "750269"
  },
  {
    "text": "today the company and today the bank four times each. So, uh, this is an example of the sparsity problem because overall these are quite low counts,",
    "start": "750270",
    "end": "757290"
  },
  {
    "text": "we haven't seen that many different, uh, versions of this event, so we don't have a very granular probability distribution.",
    "start": "757290",
    "end": "763885"
  },
  {
    "text": "But in any case ignoring the sparsity problem, I would say that overall, these, uh, top suggestions look pretty reasonable.",
    "start": "763885",
    "end": "770640"
  },
  {
    "text": "So you can actually use a Language Model to generate text and this is how you would do it.",
    "start": "772600",
    "end": "778305"
  },
  {
    "start": "773000",
    "end": "908000"
  },
  {
    "text": "So let's suppose you have your first two words already, uh, you condition on this and you ask your Language Model what's likely to come next.",
    "start": "778305",
    "end": "784560"
  },
  {
    "text": "So then given this probability distribution over the words, you can sample from it, that is, select some words with, you know, the associated probability.",
    "start": "784560",
    "end": "791865"
  },
  {
    "text": "So let's suppose that gives us the word price. So then price is your next word, and then you just condition on the last two words,",
    "start": "791865",
    "end": "797730"
  },
  {
    "text": "which in this ex- example is now the price. So now you get a new probability distribution and you can continue this process,",
    "start": "797730",
    "end": "803790"
  },
  {
    "text": "uh, sampling and then conditioning again and sampling. So if you do this long enough,",
    "start": "803790",
    "end": "810150"
  },
  {
    "text": "you will get a piece of text, so this is the actual text that I got when I run this generation process with this trigram Language Model.",
    "start": "810150",
    "end": "817005"
  },
  {
    "text": "So it says, \"Today the price of gold per ton, while production of shoe lasts and shoe industry,",
    "start": "817005",
    "end": "823260"
  },
  {
    "text": "the bank intervened just after it considered and rejected an IMF demand to rebuild depleted European stocks,",
    "start": "823260",
    "end": "829365"
  },
  {
    "text": "September, 30th end primary 76 counts a share.'' Okay. So, uh, what do we think about this text?",
    "start": "829365",
    "end": "835250"
  },
  {
    "text": "We think it's good? We, uh, surprised? Um, I would say that in some ways it is good,",
    "start": "835250",
    "end": "842370"
  },
  {
    "text": "it's kind of surprisingly grammatical, you know, it mostly, uh, kind of pauses,",
    "start": "842370",
    "end": "847860"
  },
  {
    "text": "uh, but you would definitely say that it, it doesn't really make any sense. It's pretty incoherent. And we shouldn't be surprised that it's incoherent I",
    "start": "847860",
    "end": "854580"
  },
  {
    "text": "think because if you remember this is a trigram Language Model, it has a memory of just the last well,",
    "start": "854580",
    "end": "860265"
  },
  {
    "text": "three or two words depending on how you look at it. So clearly we need to consider more than three words at a time if we want to model language well.",
    "start": "860265",
    "end": "867990"
  },
  {
    "text": "But as we already know, increasing n makes the sparsity problem worse, n-gram Language Models, and it also increases model size. Is that a question?",
    "start": "867990",
    "end": "878370"
  },
  {
    "text": "How does it [inaudible] [NOISE] So the question is, how does the n-gram Language Model know when to put commas.",
    "start": "878370",
    "end": "883380"
  },
  {
    "text": "Uh, so you can, [NOISE] decide that commas and other punctuation are just another kind of word,",
    "start": "883380",
    "end": "890400"
  },
  {
    "text": "is that well or token, and then, to the Language Model it doesn't really make much difference. It's just used that as another possible world that can be, um, predicted,",
    "start": "890400",
    "end": "897705"
  },
  {
    "text": "that's why we've got the weird spacing around the, the commas is because it was essentially viewed as a separate word. [NOISE] Okay.",
    "start": "897705",
    "end": "906135"
  },
  {
    "text": "So this course is called NLP with Deep Learning. So you probably thinking how do we build a neural Language Model?",
    "start": "906135",
    "end": "912765"
  },
  {
    "start": "908000",
    "end": "963000"
  },
  {
    "text": "So let's just recap, uh, in case you forgot. Remember that a Language Model is something that takes",
    "start": "912765",
    "end": "917940"
  },
  {
    "text": "inputs which is a sequence of words X1 up to Xt, and then it outputs a probability distribution of what the next word might be Xt plus 1.",
    "start": "917940",
    "end": "926290"
  },
  {
    "text": "Okay, so when we think about what kind of neural models we've met in this course so far. Uh, we've already met window-based neural models.",
    "start": "927470",
    "end": "934545"
  },
  {
    "text": "And in lecture three, we saw how you could apply a window-based neural model to a named entity recognition.",
    "start": "934545",
    "end": "940035"
  },
  {
    "text": "So in that scenario you take some kind of window around the word that you care about which in this example is Paris, and then, uh,",
    "start": "940035",
    "end": "946125"
  },
  {
    "text": "you get the word embeddings for those, concatenate them put them through some layers, and then you get your decision which is that Paris is a location not,",
    "start": "946125",
    "end": "952890"
  },
  {
    "text": "you know, a person or organization. So that's a recap of what we saw in lecture three.",
    "start": "952890",
    "end": "957899"
  },
  {
    "text": "How would we apply a model like this to language modeling? So here's how you would do it.",
    "start": "957900",
    "end": "963795"
  },
  {
    "start": "963000",
    "end": "1257000"
  },
  {
    "text": "Here's an example of a fixed-window neural language model. So, again, we have some kind of context",
    "start": "963795",
    "end": "969420"
  },
  {
    "text": "which is, as the proctor started the clock the students opened their, um, we're trying to guess what word might come next.",
    "start": "969420",
    "end": "975225"
  },
  {
    "text": "So we have to make a similar simplifying assumption to before. Uh, because it's a fixed size window, uh,",
    "start": "975225",
    "end": "981255"
  },
  {
    "text": "we have to discard the context except for the window that we're conditioning on. So let's suppose that our fixed window is of size four.",
    "start": "981255",
    "end": "989070"
  },
  {
    "text": "So what we'll do is similarly to the, ah, NER model.",
    "start": "989070",
    "end": "994390"
  },
  {
    "text": "We're going to represent these words with one-hot vectors, and then we'll use those to look up the word embeddings for these words using the,",
    "start": "994390",
    "end": "1002745"
  },
  {
    "text": "uh, embedding lookup matrix. So then we get all of our word embeddings E,1, 2, 3, 4,",
    "start": "1002745",
    "end": "1008075"
  },
  {
    "text": "and then we concatenate them together to get e. We put this through a linear layer and a nonlinearity function f to get some kind of hidden layer,",
    "start": "1008075",
    "end": "1015215"
  },
  {
    "text": "and then we put it through another linear layer and the softmax function and now we have an output probability distribution y hat.",
    "start": "1015215",
    "end": "1021860"
  },
  {
    "text": "And in our case because we're trying to predict what word comes next, ah, ah, vector y hat will be of length v where v is",
    "start": "1021860",
    "end": "1028430"
  },
  {
    "text": "the vocabulary and it will contain the probabilities of all the different words in the vocabulary. So here I've represented that as a bar charts where if you suppose",
    "start": "1028430",
    "end": "1035600"
  },
  {
    "text": "you've got all of the words listed alphabetically from a to z, and then there's the different probabilities of the words.",
    "start": "1035600",
    "end": "1041299"
  },
  {
    "text": "So if everything goes well, then this language model should tell us that some likely next words are books and laptops, for example.",
    "start": "1041300",
    "end": "1047929"
  },
  {
    "text": "So none of this should be, um, unfamiliar to you because you saw it all last week. We're just applying a Window-based model to a different task,  such as language modeling.",
    "start": "1047930",
    "end": "1056100"
  },
  {
    "text": "Okay, so what are, some good things about this model compared to n-gram language models?",
    "start": "1056470",
    "end": "1062240"
  },
  {
    "text": "So one, ah, advantage I'd say is that there's no sparsity problem. If you remember an n-gram language model has a sparsity problem",
    "start": "1062240",
    "end": "1069695"
  },
  {
    "text": "which is that if you've never seen a particular n-gram in training then, you can't assign any probability to it.",
    "start": "1069695",
    "end": "1075005"
  },
  {
    "text": "You don't have any data on it. Whereas at least here you can take any, you know, for example, 4-gram you want and you can feed it into the, ah,",
    "start": "1075005",
    "end": "1082115"
  },
  {
    "text": "the neural nets and it will give you an output distribution of what it thinks the next word would be. It might not be a good prediction but at least it will, it will run.",
    "start": "1082115",
    "end": "1090245"
  },
  {
    "text": "Another advantage is you don't need to store all of the observed n-grams that you ever saw. So, uh, this an advantage by, uh,",
    "start": "1090245",
    "end": "1097279"
  },
  {
    "text": "comparison you just have to store all of the word vectors for all the words in your vocabulary. Uh, but there are quite a lot of problems with this fixed-window language model.",
    "start": "1097280",
    "end": "1106085"
  },
  {
    "text": "So here are some remaining problems: Uh, one is that your fixed window is probably too small.",
    "start": "1106085",
    "end": "1111470"
  },
  {
    "text": "No matter how big you make your fixed window, uh, you're probably going to be losing some kind of useful context that you would want to use sometimes.",
    "start": "1111470",
    "end": "1118490"
  },
  {
    "text": "And in fact, if you try to enlarge the window size, then you also have to enlarge the size of your,",
    "start": "1118490",
    "end": "1124175"
  },
  {
    "text": "uh, weight factor, sorry, your weight matrix W. Uh, so the width of W because you're multiplying it",
    "start": "1124175",
    "end": "1129590"
  },
  {
    "text": "by e which is the concatenation of your word embeddings. The width of W grows as you increase the size of your window.",
    "start": "1129590",
    "end": "1136230"
  },
  {
    "text": "So in inclusion really your window can never be large enough. Another problem with this model which is more of a subtle point is that",
    "start": "1136390",
    "end": "1145460"
  },
  {
    "text": "X1 and X2 and really all of the words in the window they're, uh, multiplied by completely diffe rent weights in",
    "start": "1145460",
    "end": "1151100"
  },
  {
    "text": "W. So to demonstrate this you could draw a picture. So the problem is that if you have",
    "start": "1151100",
    "end": "1157610"
  },
  {
    "text": "your weight matrix W and then you have your concatenation of embeddings e and we have, uh, four embeddings.",
    "start": "1157610",
    "end": "1166909"
  },
  {
    "text": "So we have e_1, e_2, e_3, e_4, and you multiply, uh,",
    "start": "1166910",
    "end": "1173135"
  },
  {
    "text": "the concatenated embeddings by the weight matrix. So really you can see that there are essentially",
    "start": "1173135",
    "end": "1179120"
  },
  {
    "text": "kind of four sections of the weight matrix, and the first word embedding e_1 is only",
    "start": "1179120",
    "end": "1185570"
  },
  {
    "text": "ever multiplied by the weights for it in this section, and that's completely separate to the weights that multiply by e_2 and so forth.",
    "start": "1185570",
    "end": "1193024"
  },
  {
    "text": "So the problem with this is that what you learn in the weight matrix in one section is not shared with the others.",
    "start": "1193025",
    "end": "1200059"
  },
  {
    "text": "You're kind of learning a lot of similar functions four times. So the reason why we think this is a problem is because there should be a lot of",
    "start": "1200060",
    "end": "1207910"
  },
  {
    "text": "commonalities in how you process the incoming word embeddings. So what you learn about how to process, you know,",
    "start": "1207910",
    "end": "1214880"
  },
  {
    "text": "the third embedding, some of it at least should be shared with all of the embeddings. So what I'm saying is it's kind of inefficient that we're learning, uh,",
    "start": "1214880",
    "end": "1221960"
  },
  {
    "text": "all of these separate weights for these different words when there's a lot of commonalities between them. Is there a question?",
    "start": "1221960",
    "end": "1227970"
  },
  {
    "text": "So that's why [inaudible] [NOISE]. Okay- Yeah, hopefully- hopefully the verbal description is on.",
    "start": "1229840",
    "end": "1236559"
  },
  {
    "text": "So, in conclusion, I'd say that the biggest problem that we've got with this fixed-size neural model is that clearly we",
    "start": "1238280",
    "end": "1245280"
  },
  {
    "text": "need some kind of neural architecture that can process any length input, because most of the problems here come from the fact that we had to make",
    "start": "1245280",
    "end": "1251070"
  },
  {
    "text": "this simplifying assumption that there was a fixed window.",
    "start": "1251070",
    "end": "1254919"
  },
  {
    "text": "Okay. So this motivates, uh, us to introduce this new family of neural architecture,",
    "start": "1256670",
    "end": "1262590"
  },
  {
    "start": "1257000",
    "end": "1359000"
  },
  {
    "text": "it's called recurrent neural networks or RNNs. So, this is a simplified diagram that shows you the most important,",
    "start": "1262590",
    "end": "1269100"
  },
  {
    "text": "um, features of an RNN. So we have again an input sequence of X1, X2,",
    "start": "1269100",
    "end": "1275070"
  },
  {
    "text": "et cetera, but you can assume that this sequence is of any arbitrary length you like.",
    "start": "1275070",
    "end": "1280245"
  },
  {
    "text": "The idea is that you have a sequence of hidden states instead of just having, for example, one hidden state as we did in the previous model.",
    "start": "1280245",
    "end": "1287174"
  },
  {
    "text": "We have a sequence of hidden states and we have as many of them as we have inputs. And the important thing is that each hidden state ht is computed based",
    "start": "1287175",
    "end": "1295440"
  },
  {
    "text": "on the previous hidden state and also the input on that step. So the reason why they're called hidden states is because you could think of",
    "start": "1295440",
    "end": "1304049"
  },
  {
    "text": "this as a single state that's mutating over time. It's kind of like several versions of the same thing.",
    "start": "1304050",
    "end": "1310260"
  },
  {
    "text": "And for this reason, we often call these time-steps, right? So these steps that go left to right,",
    "start": "1310260",
    "end": "1315539"
  },
  {
    "text": "we often call them time-steps. So the really important thing is that",
    "start": "1315540",
    "end": "1321870"
  },
  {
    "text": "the same weight matrix W is applied on every time-step of this RNN.",
    "start": "1321870",
    "end": "1327210"
  },
  {
    "text": "That's what makes us able to process any length input we want. Is because we don't have to have different weights on every step,",
    "start": "1327210",
    "end": "1333929"
  },
  {
    "text": "because we just apply the exact same transformation on every step. So additionally, you can also have some outputs from the RNN.",
    "start": "1333930",
    "end": "1342690"
  },
  {
    "text": "So these y hats, these are the outputs on each step. And they're optional because you don't have to compute them",
    "start": "1342690",
    "end": "1348735"
  },
  {
    "text": "or you can compute them on just some steps and not others. It depends on where you want to use your RNN to do.",
    "start": "1348735",
    "end": "1354159"
  },
  {
    "text": "Okay. So that's a simple diagram of an RNN. Uh, here I'm going to give you a bit more detail. So here's how you would apply an RNN to do language modeling.",
    "start": "1354920",
    "end": "1363630"
  },
  {
    "start": "1359000",
    "end": "1971000"
  },
  {
    "text": "So, uh, again, let's suppose that we have some kind of text so far. My text is only four words long,",
    "start": "1363630",
    "end": "1370860"
  },
  {
    "text": "but you can assume that it could be any length, right? It's just short because we can't fit more on the slide. So you have some sequence of tags, which could be kind of long.",
    "start": "1370860",
    "end": "1378390"
  },
  {
    "text": "And again, we're going to represent these by some kind of one-hot vectors and use those to look up the word embeddings from our embedding matrix.",
    "start": "1378390",
    "end": "1386460"
  },
  {
    "text": "So then to compute the first hidden state H1, we need to compute it based on the previous hidden state and the current input.",
    "start": "1386460",
    "end": "1394300"
  },
  {
    "text": "We already have the current input, that's E1, but the question is where do we get this first hidden state from?",
    "start": "1394300",
    "end": "1399570"
  },
  {
    "text": "All right, what comes before H1? So we often call the initial hidden state H0, uh, yes,",
    "start": "1399570",
    "end": "1404670"
  },
  {
    "text": "we call the initial hidden state and it can either be something that you learn, like it's a parameter of the network and you learn how to initialize it,",
    "start": "1404670",
    "end": "1412065"
  },
  {
    "text": "or you can assume something like maybe it's the zero vector. So the formula we use to compute the new hidden state based on the previous one,",
    "start": "1412065",
    "end": "1420495"
  },
  {
    "text": "and also the current inputs is written on the left. So you do a linear transformation on the previous hidden state and on",
    "start": "1420495",
    "end": "1426690"
  },
  {
    "text": "the current input and then you add some kind of bias and then put it through a non-linearity, like for example, the sigmoid function.",
    "start": "1426690",
    "end": "1432990"
  },
  {
    "text": "And that gives you a new hidden state. Okay. So, once you've done that,",
    "start": "1432990",
    "end": "1439470"
  },
  {
    "text": "then you can compute the next hidden state and you can keep unrolling the network like this. And that's, uh, yeah,",
    "start": "1439470",
    "end": "1446025"
  },
  {
    "text": "that's called unrolling because you're kind of computing each step given the previous one. All right. So finally, if you remember,",
    "start": "1446025",
    "end": "1452160"
  },
  {
    "text": "we're trying to do language modeling. So we're trying to predict which words should come next after the students opened their.",
    "start": "1452160",
    "end": "1457529"
  },
  {
    "text": "So on this fourth step over here, we can use, uh, the current hidden state, H4,",
    "start": "1457530",
    "end": "1462825"
  },
  {
    "text": "and put it through a linear layer and put it through a softmax function and then we get our output distribution Y-hat 4 which is a distribution over the vocabulary.",
    "start": "1462825",
    "end": "1472800"
  },
  {
    "text": "And again, hopefully, we'll get some kind of sensible estimates for what the next word might be.",
    "start": "1472800",
    "end": "1478080"
  },
  {
    "text": "Any questions at this point. Yep?",
    "start": "1478080",
    "end": "1483210"
  },
  {
    "text": "Is the- the number of hidden state or is it gonna be the number of words in your input? The question is, is the number of hidden states the number of words in your input?",
    "start": "1483210",
    "end": "1490845"
  },
  {
    "text": "Yeah, in this setting here, uh, yes, or you could say more generally the number of hidden states is the number of inputs. Yep.",
    "start": "1490845",
    "end": "1498405"
  },
  {
    "text": "And just as with the n-gram model, we could use the output as the input from the tasks mutation in transformational model?",
    "start": "1498405",
    "end": "1505590"
  },
  {
    "text": "Yeah, so the question is, as with the n-gram language model, could we use the output as the input on the next step? And the answer is yes, and I'll show you that in a minute.",
    "start": "1505590",
    "end": "1512715"
  },
  {
    "text": "Any other questions? Yeah. Are you learning the embedding?",
    "start": "1512715",
    "end": "1517995"
  },
  {
    "text": "The question is, are you learning the embeddings? Um, that's a choice. You could have the embeddings be for example,",
    "start": "1517995",
    "end": "1523770"
  },
  {
    "text": "pre-generated embeddings that you download and you use those and they're frozen, or maybe you could download them, but then you could fine-tune them.",
    "start": "1523770",
    "end": "1530190"
  },
  {
    "text": "That is,  allow them to be changed as parameters of the network or you could initialize them to, you know, small, uh, random values and learn them from scratch.",
    "start": "1530190",
    "end": "1538560"
  },
  {
    "text": "Any other questions? Yeah. So you said you use the same delta matrix,",
    "start": "1538560",
    "end": "1543690"
  },
  {
    "text": "like you do back propagation, does that you only update like WE, or do you update both WH and WE?",
    "start": "1543690",
    "end": "1551080"
  },
  {
    "text": "So the question is, you say we reuse the matrix, do we update WE and WH, or just one?",
    "start": "1551080",
    "end": "1556085"
  },
  {
    "text": "So you suddenly learn both WE and WH. I suppose I was emphasizing WH more, but yeah,",
    "start": "1556085",
    "end": "1561410"
  },
  {
    "text": "they're both matrices that are applied repeatedly. There was also a question about back-prop, but we're going to cover that later in this lecture.",
    "start": "1561410",
    "end": "1567675"
  },
  {
    "text": "Okay, moving on for now. Um, so, what are some advantages and disadvantages of this RNN language model?",
    "start": "1567675",
    "end": "1577530"
  },
  {
    "text": "So here are some advantages that we can see in comparison to the fixed window one.",
    "start": "1577530",
    "end": "1583005"
  },
  {
    "text": "So an obvious advantage is that this RNN can process any length of input.",
    "start": "1583005",
    "end": "1588210"
  },
  {
    "text": "Another advantage is that the computation for step t can in theory use information from many steps back.",
    "start": "1588210",
    "end": "1595050"
  },
  {
    "text": "So in our motivation example, which was as the proctor started the clock, the students opened their. We think that proctor and maybe clock are",
    "start": "1595050",
    "end": "1602250"
  },
  {
    "text": "both pretty important hints for what might be coming up next. So, at least in theory,",
    "start": "1602250",
    "end": "1607275"
  },
  {
    "text": "the hidden state at the end can have access to the information from the input from many steps ago.",
    "start": "1607275",
    "end": "1614950"
  },
  {
    "text": "Another advantage is that the model size doesn't increase for longer inputs. So, uh, the size of the model is actually fixed.",
    "start": "1615350",
    "end": "1622485"
  },
  {
    "text": "It's just WH and WE,s and then also the biases and also the embedding matrix, if you're counting that.",
    "start": "1622485",
    "end": "1629400"
  },
  {
    "text": "None of those get bigger if you want to apply it to more, uh, longer inputs because you just apply the same weights repeatedly.",
    "start": "1629400",
    "end": "1637300"
  },
  {
    "text": "And another advantage is that you have the same weights applied on every time-step.",
    "start": "1638030",
    "end": "1643995"
  },
  {
    "text": "So I said this thing before about how the fixed-sized window neural model,",
    "start": "1643995",
    "end": "1649425"
  },
  {
    "text": "it was less efficient because it was applying different weights of the weight matrix to the different, uh, words in the window.",
    "start": "1649425",
    "end": "1655905"
  },
  {
    "text": "And the advantage about this RNN is that it's applying the exact same transformation to each of the inputs.",
    "start": "1655905",
    "end": "1661650"
  },
  {
    "text": "So this means that if it learns a good way to process one input, that is applied to every input in the sequence.",
    "start": "1661650",
    "end": "1668010"
  },
  {
    "text": "So you can see it as more efficient in that way. Okay, so what are the disadvantages of this model?",
    "start": "1668010",
    "end": "1674804"
  },
  {
    "text": "One is that recurrent computation is pretty slow. Uh, as you saw before,",
    "start": "1674805",
    "end": "1679995"
  },
  {
    "text": "you have to compute the hidden state based on the previous hidden state. So this means that you can't compute all of the hidden states in parallel.",
    "start": "1679995",
    "end": "1686925"
  },
  {
    "text": "You have to compute them in sequence. So, especially if you're trying to compute an RNN over a pretty long sequence of inputs,",
    "start": "1686925",
    "end": "1693120"
  },
  {
    "text": "this means that the RNN can be pretty slow to compute. Another disadvantage of RNNs is that it tuns out,",
    "start": "1693120",
    "end": "1700425"
  },
  {
    "text": "in practice, it's quite difficult to access information from many steps back. So even though I said we should be able to remember about",
    "start": "1700425",
    "end": "1706290"
  },
  {
    "text": "the proctor and the clock and use that to predict exams and our books, it turns out that RNNs, at least the ones that I've presented in this lecture,",
    "start": "1706290",
    "end": "1712470"
  },
  {
    "text": "are not as good as that as you would think. Um, we're gonna learn more about both of these disadvantages later in the course,",
    "start": "1712470",
    "end": "1719295"
  },
  {
    "text": "and we're going to learn something about how you can try to fix them. Have we gotten any questions at this point? Yep.",
    "start": "1719295",
    "end": "1726900"
  },
  {
    "text": "Why do we assume that WH are the same? Sorry, can you speak up? Why do we assume that the WH should be the same?",
    "start": "1726900",
    "end": "1735900"
  },
  {
    "text": "So the question is, why should you assume that the WH are the same? I suppose, it's not exactly an assumption,",
    "start": "1735900",
    "end": "1741450"
  },
  {
    "text": "it's more a deliberate decision in the design of an RNN. So, an RNN is by definition,",
    "start": "1741450",
    "end": "1746460"
  },
  {
    "text": "a network where you apply the exact same weights on every step. So, I suppose the question why do you assume maybe should be,",
    "start": "1746460",
    "end": "1753799"
  },
  {
    "text": "why is that a good idea? Um, so I spoke a little bit about why it's a good idea, and this list of advantages, I suppose, are the reasons why you'd want to do that. Does that answer your question?",
    "start": "1753800",
    "end": "1763950"
  },
  {
    "text": "Open their books, right? If you assume that WH are the same, you mean that like, uh,",
    "start": "1764560",
    "end": "1771420"
  },
  {
    "text": "Markov chain, it's like a Markov chain. Uh, the trans- transmit, uh,",
    "start": "1771420",
    "end": "1777780"
  },
  {
    "text": "trans- transfer probability for the human moods open,",
    "start": "1777780",
    "end": "1782955"
  },
  {
    "text": "they are the same, but actually the Markov chain.",
    "start": "1782955",
    "end": "1790940"
  },
  {
    "text": "The model, [inaudible] the transfer probability for that is the same,",
    "start": "1790940",
    "end": "1796534"
  },
  {
    "text": "so [inaudible] probability, it- it's just an approximation but it's another test.",
    "start": "1796535",
    "end": "1807105"
  },
  {
    "text": "Okay. So I think that [OVERLAPPING] If you assume WH could be the same, it's good because you used a number of parameters,",
    "start": "1807105",
    "end": "1814725"
  },
  {
    "text": "but this is just an, this is just an approximation.",
    "start": "1814725",
    "end": "1820559"
  },
  {
    "text": "The underlying transfer, uh, probability, it shouldn't be the same. Especially [OVERLAPPING]",
    "start": "1820560",
    "end": "1825660"
  },
  {
    "text": "Okay. Um, so I think the question is saying that given the- these words the students opened their are all different and they're happening in different context,",
    "start": "1825660",
    "end": "1832490"
  },
  {
    "text": "then why should we be applying the same transformation each time? So that's a- that's a good question. I think, uh, the idea is that you are learning a general function, not just, you know,",
    "start": "1832490",
    "end": "1841669"
  },
  {
    "text": "how to deal with students, the one-word students in this one context. We're trying to learn a general function of how you",
    "start": "1841670",
    "end": "1848520"
  },
  {
    "text": "should deal with a word given the word so far. You're trying to learn a general representation of language and context so far,",
    "start": "1848520",
    "end": "1855090"
  },
  {
    "text": "which is indeed a very difficult problem. Um, I think you also mentioned that something about an approximation.",
    "start": "1855090",
    "end": "1860175"
  },
  {
    "text": "Uh, another thing to note is that all of the hidden states are vectors, they're not just single numbers, right? They are vectors of lengths, I don't know, 500 or something?",
    "start": "1860175",
    "end": "1866669"
  },
  {
    "text": "So they have quite a large capacity to hold lots of information about different things in all of their different, um, positions.",
    "start": "1866670",
    "end": "1873530"
  },
  {
    "text": "So, I think the idea is that you can store a lot of different information in different contexts, in different parts of the hidden state,",
    "start": "1873530",
    "end": "1879830"
  },
  {
    "text": "but it is indeed an approximation and there is some kind of limit to how much information you can store. Okay, any other questions? Yes.",
    "start": "1879830",
    "end": "1886845"
  },
  {
    "text": "Since you kinda process any single length frame, what length do you use during your training? And does the length you use for training affect WH?",
    "start": "1886845",
    "end": "1895035"
  },
  {
    "text": "Okay, so, the question is, given that you can have any length input, what length is the input during training?",
    "start": "1895035",
    "end": "1901950"
  },
  {
    "text": "So, I suppose in practice, you choose how long the inputs are in training either based on what your data is or maybe based on,",
    "start": "1901950",
    "end": "1909630"
  },
  {
    "text": "uh, your efficiency concerns so maybe you make it artificially shorter by chopping it up. Um, what was the other question?",
    "start": "1909630",
    "end": "1915900"
  },
  {
    "text": "Uh, does WH depend on that? Okay. So the question was, does WH depend on the length you used?",
    "start": "1915900",
    "end": "1921255"
  },
  {
    "text": "So, no, and that's one of the good things in the advantages list. Is that the model size doesn't increase for longer input,",
    "start": "1921255",
    "end": "1927164"
  },
  {
    "text": "because we just unroll the RNN applying the same weights again and again for as long as we'd like. There's no need to have more weights just because you have a longer input.",
    "start": "1927165",
    "end": "1933930"
  },
  {
    "text": "[NOISE] Yeah. So how the ratios that you mentioned are [inaudible] the number of words.",
    "start": "1933930",
    "end": "1944235"
  },
  {
    "text": "[NOISE] Are you asking about capital E or the lowercase E? Uh, lowercase E.",
    "start": "1944235",
    "end": "1949485"
  },
  {
    "text": "Okay. So, the question is, how do we choose the dimension of the lowercase Es? Uh, so, you could, for example, assume that those are just pre-trained word vectors like the ones that you,",
    "start": "1949485",
    "end": "1957120"
  },
  {
    "text": "uh, used in assignment one. More like word2vec. Yeah. For example, word2vec, and you just download them and use them,",
    "start": "1957120",
    "end": "1962610"
  },
  {
    "text": "or maybe you learn them from scratch, in which case, you decide at the beginning of training how big you want those vectors to be. [NOISE] Okay. I'm gonna move on for now.",
    "start": "1962610",
    "end": "1969210"
  },
  {
    "text": "[NOISE] So, we've learned what an RNN language model is and we've learned how you would,",
    "start": "1969210",
    "end": "1974895"
  },
  {
    "start": "1971000",
    "end": "2195000"
  },
  {
    "text": "uh, run one forward, but the question remains, how would you train an RNN language model? How would you learn it? [NOISE]",
    "start": "1974895",
    "end": "1982230"
  },
  {
    "text": "So, as always, in machine learning, our answer starts with, you're going to get a big corpus of text, and we're gonna call that just a sequence of words X1 up to X capital T. So,",
    "start": "1982230",
    "end": "1991230"
  },
  {
    "text": "you feed the sequence of words into the RNN language model, and then, the idea is that you compute the output distribution Y-hat T for every step T. So,",
    "start": "1991230",
    "end": "1999615"
  },
  {
    "text": "I know that the picture I showed on the previous, uh, slide [NOISE] only showed us doing on the last step, but the idea is, you would actually compute this on every step.",
    "start": "1999615",
    "end": "2006140"
  },
  {
    "text": "So, this means that you're actually predicting the probability of the next word on every step. [NOISE] Okay.",
    "start": "2006140",
    "end": "2013130"
  },
  {
    "text": "So, once you've done that, then you can define the loss function, and this should be familiar to you by now. Uh, this is the cross-entropy between [NOISE]",
    "start": "2013130",
    "end": "2019190"
  },
  {
    "text": "our predicted probability distribution Y-hat T and the true, uh, distribution, which is Y-hat- sorry, just YT,",
    "start": "2019190",
    "end": "2027260"
  },
  {
    "text": "which is a one-hot vector, uh, representing the true next [NOISE] words, which is XT plus one.",
    "start": "2027260",
    "end": "2032495"
  },
  {
    "text": "So, as you've seen before, this, uh, cross-entropy [NOISE] between those two vectors can be written also as a negative log probability.",
    "start": "2032495",
    "end": "2040640"
  },
  {
    "text": "And then, lastly, if you average this cross-entropy loss across every step, uh, every T in the corpus time step T, then,",
    "start": "2040640",
    "end": "2048740"
  },
  {
    "text": "uh, this gives you your overall loss for the entire training set. [NOISE] Okay.",
    "start": "2048740",
    "end": "2056360"
  },
  {
    "text": "So, just to make that even more clear with a picture, uh, suppose that our corpus is, the students open their exams,",
    "start": "2056360",
    "end": "2061370"
  },
  {
    "text": "et cetera, and it goes on for a long time. Then, what we'd be doing is, we'd be running our RNN over this text, and then,",
    "start": "2061370",
    "end": "2066980"
  },
  {
    "text": "on every step, we would be predicting the probability [NOISE] distribution Y-hats, and then, from each of those, you can calculate what your loss is,",
    "start": "2066980",
    "end": "2073310"
  },
  {
    "text": "which is the JT, and then, uh, on the first step, the loss would be the negative log probability of the next word,",
    "start": "2073310",
    "end": "2078964"
  },
  {
    "text": "which is, in this example, students, [NOISE] and so on. Each of those is the negative log probability of the next word.",
    "start": "2078965",
    "end": "2085070"
  },
  {
    "text": "[NOISE] And then, once you've computed all of those, you can add them [NOISE] all up and average them, and then, this gives you your final loss.",
    "start": "2085070",
    "end": "2091159"
  },
  {
    "text": "[NOISE] Okay. So, there's a caveat here.",
    "start": "2091160",
    "end": "2096260"
  },
  {
    "text": "Um, computing the loss and gradients across the entire corpus, all of those words X1 up to X capital T is too",
    "start": "2096260",
    "end": "2102350"
  },
  {
    "text": "expensive [NOISE] because your corpus is probably really big. [NOISE] So, um, as a student asked earlier,",
    "start": "2102350",
    "end": "2107810"
  },
  {
    "text": "uh, in practice, what do you actually regard as your sequence? So, in practice, you might regard your sequence as, uh, something like a sentence or a document,",
    "start": "2107810",
    "end": "2114590"
  },
  {
    "text": "some shorter unit of text. So, uh, another thing you'll do [NOISE] is, if you remember,",
    "start": "2114590",
    "end": "2120890"
  },
  {
    "text": "stochastic gradient descent allows you to compute gradients for small chunks of data rather than the whole corpus at a time.",
    "start": "2120890",
    "end": "2126980"
  },
  {
    "text": "So, in practice, if you're training a language model, what you're actually likely to be doing is computing the loss for a sentence,",
    "start": "2126980",
    "end": "2132829"
  },
  {
    "text": "but that's actually a batch of sentences, and then, you compute the gradients with respect to that batch of sentences,",
    "start": "2132830",
    "end": "2137945"
  },
  {
    "text": "update your weights, and repeat. Any questions at this point? [NOISE] Okay.",
    "start": "2137945",
    "end": "2146405"
  },
  {
    "text": "So, uh, moving onto backprop. Don't worry, there won't be as much backprop as there was last week, but, uh, there's an interesting question here, right?",
    "start": "2146405",
    "end": "2153230"
  },
  {
    "text": "So, the, uh, characteristic thing about RNNs is that they apply the same weight matrix repeatedly.",
    "start": "2153230",
    "end": "2158974"
  },
  {
    "text": "So, the question is, [NOISE] what's the derivative of our loss function, let's say, on step T? What's the derivative of that loss with respect to the repeated weight matrix WH?",
    "start": "2158975",
    "end": "2168635"
  },
  {
    "text": "So, the answer is that the derivative of the loss, uh, the gradient with respect to the repeated weight is",
    "start": "2168635",
    "end": "2176390"
  },
  {
    "text": "the sum of the gradient with respect to each time it appears, and that's what that equation says. So, on the right, the notation with the vertical line and the I is saying, uh,",
    "start": "2176390",
    "end": "2185615"
  },
  {
    "text": "the derivative of the loss with respect to WH when it appears on the Ith step.",
    "start": "2185615",
    "end": "2190670"
  },
  {
    "text": "Okay. So, so, why is that true? [NOISE] Uh, to sketch why this is true, uh, [NOISE] I'm gonna remind you of the multivariable chain rule.",
    "start": "2190670",
    "end": "2197840"
  },
  {
    "start": "2195000",
    "end": "2230000"
  },
  {
    "text": "So, uh, this is a screenshot from a Khan Academy article on the multivariable chain rule, and, uh, I advise you check it out if you",
    "start": "2197840",
    "end": "2204440"
  },
  {
    "text": "want to learn more because it's very easy to understand. Uh, and what it says is, given a function F [NOISE] which depends on X and Y,",
    "start": "2204440",
    "end": "2212045"
  },
  {
    "text": "which are both themselves functions of some variable T, then, if you want to get the derivative of F with respect to T,",
    "start": "2212045",
    "end": "2219430"
  },
  {
    "text": "then you need to do the chain ru- rule across X and Y separately and then add them up. [NOISE] So, that's the multivariable chain rule,",
    "start": "2219430",
    "end": "2227019"
  },
  {
    "text": "[NOISE] and if we apply this to our scenario with trying to take the derivative of the loss JT with respect to our weight matrix WH,",
    "start": "2227020",
    "end": "2234889"
  },
  {
    "start": "2230000",
    "end": "2483000"
  },
  {
    "text": "then you could view it as this kind of diagram [NOISE] where WH has, uh, a relationship with all of these individual appearances of WH,",
    "start": "2234889",
    "end": "2242810"
  },
  {
    "text": "but it's a [NOISE] simple relationship, it's just equality, and then, each of those appearances of WH affect the loss in different ways.",
    "start": "2242810",
    "end": "2249690"
  },
  {
    "text": "So, then, if we apply the multivariable chain rule, then it says that the derivative of the loss with respect to",
    "start": "2249690",
    "end": "2257470"
  },
  {
    "text": "WH is the sum of those chain rule things, but the expression on the right is just one because it's an equality relation,",
    "start": "2257470",
    "end": "2265599"
  },
  {
    "text": "[NOISE] and then, that gives us the equation that I wrote on the previous slide. So, this is a proof sketch for why the derivative of the loss with",
    "start": "2265600",
    "end": "2275240"
  },
  {
    "text": "respect to our recurrent matrix is the sum of the derivatives each time it appears.",
    "start": "2275240",
    "end": "2280565"
  },
  {
    "text": "Okay. So, suppose you believe me on that, that is, how you compute the, uh, gradient with respect to the recurrent weight.",
    "start": "2280565",
    "end": "2286474"
  },
  {
    "text": "So, a remaining question is, well, how [NOISE] do we actually calculate this in practice? [NOISE] So, the answer is that you're going to calculate this sum by doing backprop,",
    "start": "2286475",
    "end": "2296660"
  },
  {
    "text": "uh, backwards, kind of right to left, um, through the RNN, and you're going to accumulate this sum as you go.",
    "start": "2296660",
    "end": "2303589"
  },
  {
    "text": "So, the important thing is, you shouldn't compute each of those things separately, uh, you should compute them by accumulating, like,",
    "start": "2303590",
    "end": "2310880"
  },
  {
    "text": "each one can be computed in form- in terms of the previous one. [NOISE] So, this algorithm of computing each of these,",
    "start": "2310880",
    "end": "2319130"
  },
  {
    "text": "uh, each of these gradients with respect to the previous one is called backpropagation through time.",
    "start": "2319130",
    "end": "2324305"
  },
  {
    "text": "And, um, I always think that this sounds way more sci-fi than it is. It sounds like it's time travel or something, but it's actually pretty simple.",
    "start": "2324305",
    "end": "2330560"
  },
  {
    "text": "Uh, it's just the name you give to applying the backprop algorithm to a recurrent neural network.",
    "start": "2330560",
    "end": "2337290"
  },
  {
    "text": "Any questions at this point? Yep. [NOISE] So, it seems that how you break up the batches matter your end result.",
    "start": "2337960",
    "end": "2347240"
  },
  {
    "text": "[inaudible].",
    "start": "2347240",
    "end": "2355700"
  },
  {
    "text": "So, if you break it into much more [inaudible].",
    "start": "2355700",
    "end": "2361460"
  },
  {
    "text": "Okay. So the question is, um, surely, how you decide to break up your batches affects how you learn, right?",
    "start": "2361460",
    "end": "2367865"
  },
  {
    "text": "Because if you choose, uh, one set of data to be your batch, right, then, you will make your update based on that, and then,",
    "start": "2367865",
    "end": "2373880"
  },
  {
    "text": "you only update the next one based on [NOISE] where you go from there. So, if you decided to put different data in the batch,",
    "start": "2373880",
    "end": "2378950"
  },
  {
    "text": "then you would have made a different step. So, that's true, [NOISE] and that is why stochastic gradient descent is only an approximation of",
    "start": "2378950",
    "end": "2385910"
  },
  {
    "text": "true gradient descent because the gradient that you compute with respect to one batch is just an approximation of the true gradient with respect to the,",
    "start": "2385910",
    "end": "2393950"
  },
  {
    "text": "uh, the loss over the whole corpus. So, yes, it's true that it's an approximation and how [NOISE] you choose to batch up your data can matter,",
    "start": "2393950",
    "end": "2400580"
  },
  {
    "text": "and that's why, for example, shuffling your data is a good idea, and shuffling it differently, each epoch, is a good idea. Uh, but the, the core idea of SGD is [NOISE] that, um,",
    "start": "2400580",
    "end": "2409130"
  },
  {
    "text": "it should be a good enough approximation that over many steps, you will, uh, minimize your loss.",
    "start": "2409130",
    "end": "2414740"
  },
  {
    "text": "[NOISE] Any other questions? [NOISE] Yeah.",
    "start": "2414740",
    "end": "2433010"
  },
  {
    "text": "[NOISE] So, is, uh, is the question, as you compute forward prop, do you start computing backprop before you've even, like, got to the loss?",
    "start": "2433010",
    "end": "2440345"
  },
  {
    "text": "Is that the question? [NOISE] Yes. I didn't think so, right? Because you need to know what the loss is in",
    "start": "2440345",
    "end": "2445640"
  },
  {
    "text": "order to compute the derivative of the loss with respect to something. So, I think you need to get to the end. So, if we assume simplicity,",
    "start": "2445640",
    "end": "2451760"
  },
  {
    "text": "that there is only one loss which you get at the end of several steps, then you need to get to the end, compute the loss before you can compute the derivatives.",
    "start": "2451760",
    "end": "2459365"
  },
  {
    "text": "But I suppose you, you, you could compute the derivative of two, kind of, adjacent things of one with respect to the other. [OVERLAPPING] But, yeah. [NOISE]",
    "start": "2459365",
    "end": "2465470"
  },
  {
    "text": "As you're going forward, do- you need to sort of keep a track of what, what you would have [inaudible] the one you eventually get the loss. [inaudible]",
    "start": "2465470",
    "end": "2473720"
  },
  {
    "text": "Yes. So, when you forward prop, you certainly have to hang on to all of the intervening factors.",
    "start": "2473720",
    "end": "2479660"
  },
  {
    "text": "[NOISE] Okay. I'm gonna move on for now. Uh, so, that was a maths-heavy bit but,",
    "start": "2479660",
    "end": "2484790"
  },
  {
    "start": "2483000",
    "end": "3099000"
  },
  {
    "text": "um, now, we're getting on to text generation, which someone asked about earlier. So, um, just as we use the n-gram language model to generate text,",
    "start": "2484790",
    "end": "2492965"
  },
  {
    "text": "you can also use an RNN language model to generate text, uh, via the same repeated sampling technique.",
    "start": "2492965",
    "end": "2498650"
  },
  {
    "text": "Um, so, here's a picture of how that would work. How you start off with your initial hidden state H0, uh,",
    "start": "2498650",
    "end": "2503990"
  },
  {
    "text": "which, uh, we have either as a parameter of the model or we initialize it to zero, or something like that.",
    "start": "2503990",
    "end": "2509060"
  },
  {
    "text": "So, let's suppose that we have the first word my, and Iet's suppose I, um, supply that to the model.",
    "start": "2509060",
    "end": "2514235"
  },
  {
    "text": "So, then, using the inputs and the initial hidden state, you can get our first hidden state H1. And then from there, we can compute the, er,",
    "start": "2514235",
    "end": "2521555"
  },
  {
    "text": "probability distribution Y hat one of what's coming next, and then we can use that distribution to sample some word.",
    "start": "2521555",
    "end": "2527434"
  },
  {
    "text": "So let's suppose that we sampled the word favorite. So, the idea is that we use the outputted word as the input on the next step.",
    "start": "2527435",
    "end": "2534200"
  },
  {
    "text": "So, we feed favorite into the second step of the RNN, we get a new hidden state, and again we get a new probability distribution,",
    "start": "2534200",
    "end": "2540784"
  },
  {
    "text": "and from that we can sample a new word. So, we can just continue doing this process again and again, and in this way we can generate some text.",
    "start": "2540784",
    "end": "2547685"
  },
  {
    "text": "So, uh, here we've generated the text, My favorite season is Spring, and we can keep going for as long as we'd like.",
    "start": "2547685",
    "end": "2554070"
  },
  {
    "text": "Okay, so, uh, let's have some fun with this. Uh, you can generate,",
    "start": "2556060",
    "end": "2561394"
  },
  {
    "text": "uh, text using an RNN language model. If you train the RNN language model on any kind of text,",
    "start": "2561395",
    "end": "2568070"
  },
  {
    "text": "then you can use it to generate text in that style. And in fact, this has become a whole kind of",
    "start": "2568070",
    "end": "2573380"
  },
  {
    "text": "genre of internet humor that you might've seen. So, uh, for example, here is an RNN language model trained on Obama speeches,",
    "start": "2573380",
    "end": "2580925"
  },
  {
    "text": "and I found this in a blog post online. So, here's the text that the RNN language model generated.",
    "start": "2580925",
    "end": "2587120"
  },
  {
    "text": "\"The United States will step up to the cost of a new challenges of the American people that will share the fact that we created the problem.",
    "start": "2587120",
    "end": "2595520"
  },
  {
    "text": "They were attacked and so that they have to say that all the task of the final days of war that I will not be able to get this done.\"",
    "start": "2595520",
    "end": "2604190"
  },
  {
    "text": "[LAUGHTER] Okay. So, if we look at this and",
    "start": "2604190",
    "end": "2610204"
  },
  {
    "text": "especially think about what did that text look like that we got from the n-gram language model, the one about the, the price of gold.",
    "start": "2610205",
    "end": "2616160"
  },
  {
    "text": "Um, I'd say that this is kind of recognizably better than that. It seems more fluent overall.",
    "start": "2616160",
    "end": "2621620"
  },
  {
    "text": "Uh, I'd say it has a more of a sustained context in that it kind of makes sense for longer stretches at a time,",
    "start": "2621620",
    "end": "2628535"
  },
  {
    "text": "and I'd say it does sound totally like Obama as well. So, all of that's pretty good, but you can see that it's still pretty incoherent overall,",
    "start": "2628535",
    "end": "2635734"
  },
  {
    "text": "like i- it was quite difficult to read it because it didn't really make sense, right? So I had to read the words carefully. Um, so, yeah, I think this shows",
    "start": "2635735",
    "end": "2642890"
  },
  {
    "text": "some of the progress you can get from using RNNs to generate text but still, um, very far from human level. Here are some more examples.",
    "start": "2642890",
    "end": "2649610"
  },
  {
    "text": "Uh, here's an RNN language model that was trained on the Harry Potter books. And here's what it said. \"Sorry.\" Harry shouted, panicking.",
    "start": "2649610",
    "end": "2657095"
  },
  {
    "text": "\"I'll leave those brooms in London.\" Are they? \"No idea.\" said Nearly Headless Nick, casting low close by Cedric,",
    "start": "2657095",
    "end": "2663740"
  },
  {
    "text": "carrying the last bit of treacle Charms from Harry's shoulder. And to answer him the common room perched upon it,",
    "start": "2663740",
    "end": "2669290"
  },
  {
    "text": "four arms held a shining knob from when the Spider hadn't felt it seemed. He reached the teams too.\"",
    "start": "2669290",
    "end": "2674855"
  },
  {
    "text": "So, again, I'd say that this is fairly fluent. It sounds totally like the Harry Potter books.",
    "start": "2674855",
    "end": "2680000"
  },
  {
    "text": "In fact, I'm pretty impressed by how much it does sound like in the voice of the Harry Potter books. You even got some character attributes,",
    "start": "2680000",
    "end": "2686510"
  },
  {
    "text": "I'd say that Harry the character does often panic in the book so that seems right. Um, [LAUGHTER] but some bad things are that we have,",
    "start": "2686510",
    "end": "2694520"
  },
  {
    "text": "for example, a pretty long run-on sentence in the second paragraph that's hard to read. Uh, you have some nonsensical things that really make no sense.",
    "start": "2694520",
    "end": "2701490"
  },
  {
    "text": "Like, I don't know what a treacle charm is. It sounds delicious but I don't think it's real, uh, and overall it's just pretty nonsensical.",
    "start": "2701490",
    "end": "2707789"
  },
  {
    "text": "Here's another example. Here is an RNN language model that was trained on recipes.",
    "start": "2707790",
    "end": "2712865"
  },
  {
    "text": "So, uh, [LAUGHTER] this one's pretty bizarre, the title is 'chocolate ranch barbecue',",
    "start": "2712865",
    "end": "2718565"
  },
  {
    "text": "It contains Parmesan cheese, coconut milk, eggs, and the recipe says place each pasta over layers of lumps,",
    "start": "2718565",
    "end": "2725555"
  },
  {
    "text": "shape mixture into the moderate oven and simmer until firm. Serve hot in bodied fresh,",
    "start": "2725555",
    "end": "2731210"
  },
  {
    "text": "mustard orange and cheese. Combine the cheese and salt together the dough in a large skillet; add the ingredients and stir in the chocolate and pepper.",
    "start": "2731210",
    "end": "2738140"
  },
  {
    "text": "[LAUGHTER] Um, so, one thing that I think is even more clear here in the recipes example than the prose example,",
    "start": "2738140",
    "end": "2745340"
  },
  {
    "text": "is the inability to remember what's [NOISE] what's happening overall, right? Cuz a recipe you could say is pretty challenging because you need to remember",
    "start": "2745340",
    "end": "2753020"
  },
  {
    "text": "the title of what you're trying to make which in this case is chocolate ranch barbecue, and you need to actually, you know, make that thing by the end.",
    "start": "2753020",
    "end": "2759470"
  },
  {
    "text": "Uh, you also need to remember what were the ingredients in the beginning and did you use them. And in a recipe, if you make something and put it in the oven,",
    "start": "2759470",
    "end": "2765230"
  },
  {
    "text": "you need to take it out later, a- and stuff like that, right? So, clearly it's not really remembering what's happening overall or what it's trying to do,",
    "start": "2765230",
    "end": "2771890"
  },
  {
    "text": "it seems to be just generating kind of generic recipe sentences and putting them in a random order.",
    "start": "2771890",
    "end": "2777785"
  },
  {
    "text": "Uh, but again, I mean, we can see that it's fairly fluent, it's grammatically right, it kind of sounds like a recipe.",
    "start": "2777785",
    "end": "2783350"
  },
  {
    "text": "Uh, but the problem is it's just nonsensical. Like for example, shape mixture into the moderate oven is grammatical but it doesn't make any sense.",
    "start": "2783350",
    "end": "2791345"
  },
  {
    "text": "Okay, last example. So, here's an RNN language model that's trained on paint-color names.",
    "start": "2791345",
    "end": "2797510"
  },
  {
    "text": "And this is an example of a character-level language model because it's predicting what character comes next not what word comes next.",
    "start": "2797510",
    "end": "2804845"
  },
  {
    "text": "And this is why it's able to come up with new words. Another thing to note is that this language model was trained to be conditioned on some kind of input.",
    "start": "2804845",
    "end": "2812090"
  },
  {
    "text": "So here, the input is the color itself I think represented by the three numbers, that's probably RGB numbers.",
    "start": "2812090",
    "end": "2817145"
  },
  {
    "text": "And it generated some names for the colors. And I think these are pretty funny. My favorite one is Stanky Bean,",
    "start": "2817145",
    "end": "2824059"
  },
  {
    "text": "which is in the bottom right. [LAUGHTER] Um, so, it's pretty creative, [LAUGHTER] and I think these do sound kind of",
    "start": "2824060",
    "end": "2830210"
  },
  {
    "text": "like paint colors but often they're quite bizarre. [LAUGHTER] Light of Blast is pretty good too.",
    "start": "2830210",
    "end": "2840570"
  },
  {
    "text": "So, uh, you're gonna learn more about character-level language models in a future lecture, and you're also going to learn more about how to condition a language model",
    "start": "2840910",
    "end": "2848869"
  },
  {
    "text": "based on some kind of input such as the color, um, code. So, these are pretty funny,",
    "start": "2848870",
    "end": "2854329"
  },
  {
    "text": "uh, but I do want to say a warning. Um, you'll find a lot of these kinds of articles online, uh, often with headlines like,",
    "start": "2854330",
    "end": "2860585"
  },
  {
    "text": "\"We forced a bot to watch, you know, 1000 hours of sci-fi movies and it wrote a script,\" something like that.",
    "start": "2860585",
    "end": "2866705"
  },
  {
    "text": "Um, so, my advice is you have to take these with a big pinch of salt, because often, uh, the examples that people put online were",
    "start": "2866705",
    "end": "2873080"
  },
  {
    "text": "hand selected by humans to be the funniest examples. Like I think all of the examples I've shown today were definitely hand selected",
    "start": "2873080",
    "end": "2878660"
  },
  {
    "text": "by humans as the funniest examples that the RNN came up with. And in some cases they might even have been edited by a human.",
    "start": "2878660",
    "end": "2885454"
  },
  {
    "text": "So, uh, yeah, you do need to be a little bit skeptical when you look at these examples. [OVERLAPPING] Yep. So, uh, in the Harry Potter one,",
    "start": "2885455",
    "end": "2892925"
  },
  {
    "text": "there was a opening quote and then there was a closing quote. So, like do you expect the RNN,",
    "start": "2892925",
    "end": "2898744"
  },
  {
    "text": "like when it puts that opening quote and keeps putting more words, do you expect the probability of a closing quote to like increase as you're going or decrease?",
    "start": "2898745",
    "end": "2908825"
  },
  {
    "text": "That's a great question. So, uh, the question was, uh, we noticed that in the Harry Potter example,",
    "start": "2908825",
    "end": "2914450"
  },
  {
    "text": "there was some open quotes and some closed quotes. And it looks like the model didn't screw up, right? All of these open quotes and closed quotes,",
    "start": "2914450",
    "end": "2920075"
  },
  {
    "text": "uh, are in the correct places. So, the question is, do we expect the model to put a higher probability on closing the quote given that is inside a quo- quote passage?",
    "start": "2920075",
    "end": "2928775"
  },
  {
    "text": "So, I should say definitely yes and that's most- mostly the explanation for why this works.",
    "start": "2928775",
    "end": "2934220"
  },
  {
    "text": "Um, there's been some really interesting work in trying to look inside the hidden states of, uh, language models to see whether it's tracking things like,",
    "start": "2934220",
    "end": "2941345"
  },
  {
    "text": "are we inside an open quote or a close quote? And there has been some limited evidence to show that",
    "start": "2941345",
    "end": "2946430"
  },
  {
    "text": "maybe there are certain neuron or neurons inside the hidden state, which are tracking things like, are we currently inside a quote or not?",
    "start": "2946430",
    "end": "2952549"
  },
  {
    "text": "[NOISE]. Yeah. So, so, like do you think the probability would increase  as you go more to the right [OVERLAPPING]?",
    "start": "2952550",
    "end": "2958369"
  },
  {
    "text": "So, the question is as the quote passage goes on for longer, do you think the priority or",
    "start": "2958370",
    "end": "2963740"
  },
  {
    "text": "the probability of outputting a closed quote should increase? Um, I don't know. Maybe. Um, that would be good, I suppose,",
    "start": "2963740",
    "end": "2971420"
  },
  {
    "text": "because you don't want an infinite quote, uh, but I wouldn't be surprised if that didn't happen. Like I wouldn't be surprised if maybe some other worse-trained language models,",
    "start": "2971420",
    "end": "2979400"
  },
  {
    "text": "just opened quotes and never closed them. Uh, any other questions? Yeah.",
    "start": "2979400",
    "end": "2984815"
  },
  {
    "text": "What are the dimensions of the W metric? Okay. So, the question is what are the dimensions of the W metric?",
    "start": "2984815",
    "end": "2990710"
  },
  {
    "text": "So we're going back to the online stuff. Uh, okay. You're asking me about W_h or W_e or something else?",
    "start": "2990710",
    "end": "2995900"
  },
  {
    "text": "Yeah. So, W_h will be, uh, if we say that the hidden size has size n,",
    "start": "2995900",
    "end": "3001435"
  },
  {
    "text": "then W_h will be n by n. And if we suppose that the embeddings have size d,",
    "start": "3001435",
    "end": "3007240"
  },
  {
    "text": "then W_e will be, uh, d by n, n by d, maybe.",
    "start": "3007240",
    "end": "3012550"
  },
  {
    "text": "Does that answer your question? [NOISE] Uh,",
    "start": "3012550",
    "end": "3019990"
  },
  {
    "text": "any other questions about generating or anything? Yep. So, you said that there was a long sentence in the Harry Potter-related text?",
    "start": "3019990",
    "end": "3028029"
  },
  {
    "text": "Yeah. Is it ever sort of practical to combine RNNs with like in this hand written rules?",
    "start": "3028030",
    "end": "3033640"
  },
  {
    "text": "Sorry. Is it ever practical to combine- RNNs with a written list of hand-written rules. [OVERLAPPING]",
    "start": "3033640",
    "end": "3038830"
  },
  {
    "text": "Okay. Yeah. That's a great question. So the question was, is it ever practical to combine RNNs with a list of hand-written rules?",
    "start": "3038830",
    "end": "3044980"
  },
  {
    "text": "For example, don't let your sentence be longer than this many words. Um, so yeah.",
    "start": "3044980",
    "end": "3050530"
  },
  {
    "text": "I'd say it probably is practical maybe especially if you're interested in, uh, making sure that certain bad things don't happen,",
    "start": "3050530",
    "end": "3056260"
  },
  {
    "text": "you might apply some hacky rules like yeah forcing it to end, uh, early.",
    "start": "3056260",
    "end": "3061900"
  },
  {
    "text": "I mean, okay. So there's this thing called Beam Search which we're going to learn about in a later lecture, which essentially doesn't just, um, choose one word in each step and continue.",
    "start": "3061900",
    "end": "3069339"
  },
  {
    "text": "It explores many different options for words you could generate. And you can apply some kinds of rules on that",
    "start": "3069340",
    "end": "3074410"
  },
  {
    "text": "where if you have lots of different things to choose from, then you can maybe get rid of some options if you don't like them because they break some of your rules.",
    "start": "3074410",
    "end": "3081265"
  },
  {
    "text": "But, um, it can be difficult to do. Any other questions?",
    "start": "3081265",
    "end": "3088339"
  },
  {
    "text": "Okay. Um, so we've talked about generating from language models.",
    "start": "3089490",
    "end": "3098380"
  },
  {
    "text": "Uh, so unfortunately, you can't just use generation as your evaluation metric for the language models.",
    "start": "3098380",
    "end": "3104140"
  },
  {
    "start": "3099000",
    "end": "3210000"
  },
  {
    "text": "You do need some kind of, um, measurable metric. So, the standard evaluation metric for language models is called perplexity.",
    "start": "3104140",
    "end": "3112015"
  },
  {
    "text": "And, uh, perplexity is defined as the inverse probability of the corpus according to the language model.",
    "start": "3112015",
    "end": "3118480"
  },
  {
    "text": "So, if you look at it you can see that that's what this formula is saying. It's saying that for every, uh,",
    "start": "3118480",
    "end": "3124075"
  },
  {
    "text": "word xt, lowercase t, in the corpus, uh, we're computing the probability of that word given",
    "start": "3124075",
    "end": "3130420"
  },
  {
    "text": "everything that came so far but its inverse is one over that. And then lastly, when normalizing this big,",
    "start": "3130420",
    "end": "3136599"
  },
  {
    "text": "uh, product by the number of words, which is capital T. And the reason why we're doing that is because if we didn't do that,",
    "start": "3136600",
    "end": "3143994"
  },
  {
    "text": "then perplexity would just get smaller and smaller as your corpus got bigger. So we need to normalize by that factor.",
    "start": "3143995",
    "end": "3151070"
  },
  {
    "text": "So, you can actually show you that this, uh, perplexity is equal to the exponential of the cross-entropy loss J Theta.",
    "start": "3151140",
    "end": "3158470"
  },
  {
    "text": "So if you remember, cross-entropy loss J Theta is, uh, the training objective that we're using to train the language model.",
    "start": "3158470",
    "end": "3164305"
  },
  {
    "text": "And, uh, by rearranging things a little bit, you can see that perplexity is actually the exponential of the cross-entropy.",
    "start": "3164305",
    "end": "3170890"
  },
  {
    "text": "And this is a good thing, uh, because if we're training the language model to, uh, minimize the cross-entropy loss,",
    "start": "3170890",
    "end": "3178900"
  },
  {
    "text": "then you are training it to optimize the perplexity as well.",
    "start": "3178900",
    "end": "3184069"
  },
  {
    "text": "So you should remember that the lower perplexity is better, uh, because perplexity is the inverse probability of the corpus.",
    "start": "3184800",
    "end": "3192640"
  },
  {
    "text": "So, uh, if you want your language model to assign high probability to the corpus, right?",
    "start": "3192640",
    "end": "3197964"
  },
  {
    "text": "Then that means you want to get low perplexity. Uh, any questions? [NOISE] Okay.",
    "start": "3197965",
    "end": "3208480"
  },
  {
    "text": "Uh, so RNNs have been pretty successful in recent years in improving perplexity.",
    "start": "3208480",
    "end": "3216220"
  },
  {
    "start": "3210000",
    "end": "3249000"
  },
  {
    "text": "So, uh, this is a results table from a recent, uh, Facebook research paper about RNN language models.",
    "start": "3216220",
    "end": "3223630"
  },
  {
    "text": "And, uh, you don't have to understand all of the details of this table, but what it's telling you is that, on the, uh, top where we have n gram language model.",
    "start": "3223630",
    "end": "3230785"
  },
  {
    "text": "And thessssssssssssn in the subsequent various, we have some increasingly complex and large RNNs. And you can see that the perplexity numbers are decreasing,",
    "start": "3230785",
    "end": "3238945"
  },
  {
    "text": "because lower is better. So RNNs have been really great for making more effective language models in the last few years.",
    "start": "3238945",
    "end": "3246320"
  },
  {
    "text": "Okay. So to zoom out a little bit, you might be thinking, uh, why should I care about Language Modelling?",
    "start": "3248910",
    "end": "3255460"
  },
  {
    "start": "3249000",
    "end": "3510000"
  },
  {
    "text": "Why is it important? I'd say there are two main reasons why Language Modelling is important. Uh, so the first one is,",
    "start": "3255460",
    "end": "3261160"
  },
  {
    "text": "that language modelling is a benchmark task that helps us measure our progress on understanding language.",
    "start": "3261160",
    "end": "3266770"
  },
  {
    "text": "So, you could view language modeling as a pretty general language understanding task, right?",
    "start": "3266770",
    "end": "3271990"
  },
  {
    "text": "Because predicting what word comes next to given any, any kind of, uh, generic text.",
    "start": "3271990",
    "end": "3277795"
  },
  {
    "text": "Um, that's quite a difficult and general problem. And in order to be good at language modelling,",
    "start": "3277795",
    "end": "3283330"
  },
  {
    "text": "you have to understand a lot of things, right? You have to understand grammar, you have to understand syntax, and you have to understand,",
    "start": "3283330",
    "end": "3289615"
  },
  {
    "text": "uh, logic and reasoning. And you have to understand something about, you know, real-world knowledge. You have to understand a lot of things in order to be",
    "start": "3289615",
    "end": "3295720"
  },
  {
    "text": "able to do language modelling properly. So, the reason why we care about it as a benchmark task is because if you're able to build a model,",
    "start": "3295720",
    "end": "3302350"
  },
  {
    "text": "which is a better language model than the ones that came before it, then you must have made some kind of progress on at",
    "start": "3302350",
    "end": "3307930"
  },
  {
    "text": "least some of those sub-components of natural language understanding. So, another more tangible reason why you might",
    "start": "3307930",
    "end": "3314470"
  },
  {
    "text": "care about language modelling is that it's a sub-component of many many NLP tasks especially those which involve",
    "start": "3314470",
    "end": "3319990"
  },
  {
    "text": "generating text or estimating the probability of text. So, here's a bunch of examples.",
    "start": "3319990",
    "end": "3325675"
  },
  {
    "text": "Uh, one is predictive typing. That's the example that we showed at the beginning of the lecture with typing on your phone or searching on Google.",
    "start": "3325675",
    "end": "3331450"
  },
  {
    "text": "Uh, this is also very useful for people who have movement disabilities, uh, because they are these systems that help people communicate using fewer movements.",
    "start": "3331450",
    "end": "3339595"
  },
  {
    "text": "Uh, another example is speech recognition. So, in speech recognition you have some kind of audio recording of a person saying something",
    "start": "3339595",
    "end": "3345820"
  },
  {
    "text": "and often it's kind of noisy and hard to make out what they're saying and you need to, uh, figure out what words did they say.",
    "start": "3345820",
    "end": "3351700"
  },
  {
    "text": "So this an example where you have to estimate the probability of different, uh, different options of what, what it is they could have said.",
    "start": "3351700",
    "end": "3358210"
  },
  {
    "text": "And in the same way, handwriting recognition, is an example where there's a lot of noise and you have to figure out what the person intended to say.",
    "start": "3358210",
    "end": "3365470"
  },
  {
    "text": "Uh, spelling and grammar correction is yet another example where it's all about trying to figure out what someone meant.",
    "start": "3365470",
    "end": "3370705"
  },
  {
    "text": "And that means you actually understand how likely it is that they were saying different things. Uh, an interesting, an interesting application is authorship identification.",
    "start": "3370705",
    "end": "3379555"
  },
  {
    "text": "So suppose that you have a piece of text and you're trying to figure out who likely wrote it and maybe you have,",
    "start": "3379555",
    "end": "3385494"
  },
  {
    "text": "uh, several different authors and you have text written by those different authors. So you could, for example,",
    "start": "3385495",
    "end": "3391285"
  },
  {
    "text": "train a separate language model on each of the different authors' texts. And then, because, remember, a language model can tell you the probability of a given piece of text.",
    "start": "3391285",
    "end": "3399805"
  },
  {
    "text": "Then you could ask all the different language models, um, how likely the texts and the question is,",
    "start": "3399805",
    "end": "3405790"
  },
  {
    "text": "and then if a certain author's language model says that it's likely then that means that text the texts and the question is more likely to be written by that author.",
    "start": "3405790",
    "end": "3415000"
  },
  {
    "text": "Um, other examples include machine translation. This is a huge, uh, application of language models,",
    "start": "3415000",
    "end": "3421390"
  },
  {
    "text": "uh, because it's all about generating text. Uh, similarly, summarization is a task where we need to generate some text given some input text.",
    "start": "3421390",
    "end": "3429280"
  },
  {
    "text": "Uh, dialogue as well, not all dialogue agents necessarily are RNN language models but you can",
    "start": "3429280",
    "end": "3434980"
  },
  {
    "text": "build a dialogue agent that generates the text using an RNN language model. And there are more examples as well.",
    "start": "3434980",
    "end": "3441559"
  },
  {
    "text": "Any questions on this? [LAUGHTER] Yep. So, I know that [inaudible]",
    "start": "3441560",
    "end": "3467875"
  },
  {
    "text": "Great question. So, the question was, uh, for some of these examples, uh, such as speech recognition or maybe [NOISE] image captioning,",
    "start": "3467875",
    "end": "3475315"
  },
  {
    "text": "the input is audio or image or something that is not text, right? So, you can't represent it in the way that we've talked about so far.",
    "start": "3475315",
    "end": "3481780"
  },
  {
    "text": "Um, so, [NOISE] in those examples, you will have some way of representing the input, some way of encoding the audio or the image or whatever.",
    "start": "3481780",
    "end": "3488724"
  },
  {
    "text": "Uh, the reason I brought it up now in terms of language models is that that's the input, but you use the language model to get the output, right?",
    "start": "3488725",
    "end": "3495685"
  },
  {
    "text": "So, the language model, [NOISE] uh, generates the output in the way that we saw earlier, uh, but we're gonna learn more about those conditional language [NOISE] models later.",
    "start": "3495685",
    "end": "3502119"
  },
  {
    "text": "[NOISE] Anyone else? [NOISE] Okay.",
    "start": "3502120",
    "end": "3509020"
  },
  {
    "text": "[NOISE] So, uh, here's a recap. If I've lost you somewhere in this lecture, uh, or you got tired,",
    "start": "3509020",
    "end": "3516730"
  },
  {
    "start": "3510000",
    "end": "3561000"
  },
  {
    "text": "um, now's a great time to jump back in because things are gonna get a little bit more accessible. Okay. So, here's a recap of what we've done today.",
    "start": "3516730",
    "end": "3523045"
  },
  {
    "text": "Uh, a language model is a system that predicts the next word, [NOISE] and a recurrent neural network,",
    "start": "3523045",
    "end": "3528460"
  },
  {
    "text": "is a new family, oh, new to us, a family of neural networks that takes sequential input",
    "start": "3528460",
    "end": "3533710"
  },
  {
    "text": "of any length and it applies the same weights on every step, and it can optionally produce some kind of output on",
    "start": "3533710",
    "end": "3539620"
  },
  {
    "text": "each step or some of the steps or none of the steps. [NOISE] So, don't be confused.",
    "start": "3539620",
    "end": "3544945"
  },
  {
    "text": "A recurrent neural network is not [NOISE] the same thing as a language model. Uh, we've seen today that an RNN is a great way to build a language model, but actually,",
    "start": "3544945",
    "end": "3552970"
  },
  {
    "text": "it turns out that you can use RNNs for, uh, a lot of other different things that are not language modeling. [NOISE] So, here's a few examples of that.",
    "start": "3552970",
    "end": "3559839"
  },
  {
    "text": "[NOISE] Uh, you can use an RNN to do a tagging task. So, some examples of tagging tasks are",
    "start": "3559840",
    "end": "3566320"
  },
  {
    "start": "3561000",
    "end": "4105000"
  },
  {
    "text": "part-of-speech tagging and named entity recognition. So, pictured here is part-of-speech tagging, and this is the task.",
    "start": "3566320",
    "end": "3572590"
  },
  {
    "text": "We have some kind of input text such as, uh, the startled cat knocked over the vase,",
    "start": "3572590",
    "end": "3577645"
  },
  {
    "text": "and your job is to, uh, label or tag each word with its part of speech. So, for example, cat is a noun and knocked is a verb.",
    "start": "3577645",
    "end": "3585160"
  },
  {
    "text": "So, you can use an RNN to do this task in, in the way that we've pictured, which is that you, uh,",
    "start": "3585160",
    "end": "3590350"
  },
  {
    "text": "feed the text into the RNN, [NOISE] and then, on each step of the RNN, you, uh, have an output,",
    "start": "3590350",
    "end": "3595705"
  },
  {
    "text": "probably a distribution over what, uh, tag you think it is, and then, uh, you can tag it in that way.",
    "start": "3595705",
    "end": "3601775"
  },
  {
    "text": "And then, also for named entity recognition, that's all about, um, tagging each of the words with what named entity type they are.",
    "start": "3601775",
    "end": "3608085"
  },
  {
    "text": "So, you do it in the same way. [NOISE] Okay. Here's another thing you can use RNNs for,",
    "start": "3608085",
    "end": "3613470"
  },
  {
    "text": "uh, you can use them for sentence classification. So, sentence classification is just a general term to mean",
    "start": "3613470",
    "end": "3619079"
  },
  {
    "text": "any kind of task where you want to take sentence or other piece of text, and then, you want to classify it into one of several classes.",
    "start": "3619080",
    "end": "3624944"
  },
  {
    "text": "So, an example of that is sentiment classification. Uh, sentiment classification is when you have some kind",
    "start": "3624945",
    "end": "3630400"
  },
  {
    "text": "of input text such as, let's say, overall, I enjoyed the movie a lot, and then, you're trying to classify that as being",
    "start": "3630400",
    "end": "3635770"
  },
  {
    "text": "positive or negative or [NOISE] neutral sentiment. So, in this example, this is positive sentiment. [NOISE] So, one way you might use an RNN to tackle this task is, uh,",
    "start": "3635770",
    "end": "3645400"
  },
  {
    "text": "you might encode the text using the RNN, and then, really what you want is some kind of sentence encoding so that you",
    "start": "3645400",
    "end": "3653349"
  },
  {
    "text": "can output your label for the sentence, right? And it'll be useful if you would have a single vector to",
    "start": "3653350",
    "end": "3659680"
  },
  {
    "text": "represent the sentence rather than all of these separate vectors. So, how would you do this?",
    "start": "3659680",
    "end": "3664870"
  },
  {
    "text": "How would you get the sentence encoding from the RNN? [NOISE] Uh, one thing you could do [NOISE] is,",
    "start": "3664870",
    "end": "3670540"
  },
  {
    "text": "you could use the final hidden state as your sentence encoding. So, um, the reason why you might think this is a good idea is because,",
    "start": "3670540",
    "end": "3678460"
  },
  {
    "text": "for example, in the RNN, we regard the, the final hidden state as, um, this is the thing you use to predict what's coming next, right?",
    "start": "3678460",
    "end": "3685735"
  },
  {
    "text": "So, we're assuming that the final hidden state contains information about all of the text that has come so far, right?",
    "start": "3685735",
    "end": "3691465"
  },
  {
    "text": "So, for that reason, you might suppose that this is a good sentence encoding, and we could use that [NOISE] to predict, you know, what, uh, what sentiment is this sentence.",
    "start": "3691465",
    "end": "3699040"
  },
  {
    "text": "And it turns out that usually, a better way to do this, usually a more effective way, is to do something like maybe take an element-wise max or",
    "start": "3699040",
    "end": "3706240"
  },
  {
    "text": "an element-wise mean of all these hidden states to get your sentence encoding, um, [NOISE] and, uh,",
    "start": "3706240",
    "end": "3712345"
  },
  {
    "text": "this tends to work better than just using the final hidden state. [NOISE] Uh, there are some other more advanced things you can do as well.",
    "start": "3712345",
    "end": "3718490"
  },
  {
    "text": "Okay. [NOISE] Another thing that you can use RNNs for is as a general purpose encoder module.",
    "start": "3719310",
    "end": "3725335"
  },
  {
    "text": "Uh, so, here's an example that's question answering, but really this idea of RNNs as",
    "start": "3725335",
    "end": "3730480"
  },
  {
    "text": "a general purpose encoder module is very common [NOISE] and use it in lots of different, um, deep learning [NOISE] architectures for NLP.",
    "start": "3730480",
    "end": "3737589"
  },
  {
    "text": "[NOISE] So, here's an example which is question answering. Uh, so, let's suppose that the, the task is,",
    "start": "3737590",
    "end": "3743410"
  },
  {
    "text": "you've got some kind of context, which, in this, uh, situation, is the Wikipedia article on Beethoven, and then,",
    "start": "3743410",
    "end": "3749365"
  },
  {
    "text": "you have a question which is asking, what nationality was Beethoven? Uh, and this is actually taken from the SQuAD Challenge,",
    "start": "3749365",
    "end": "3756400"
  },
  {
    "text": "which is the subject of the Default Final Project. So, um, if you choose to do- to do the Default Final Project,",
    "start": "3756400",
    "end": "3761770"
  },
  {
    "text": "you're going to be building systems that solve this problem. So, what you might do is, you might use an RNN to process the question,",
    "start": "3761770",
    "end": "3769930"
  },
  {
    "text": "what nationality was [NOISE] Beethoven? And then, you might use those hidden states that you get from this, uh,",
    "start": "3769930",
    "end": "3776215"
  },
  {
    "text": "RNN of the question as a representation of the question. And I'm being intentionally vague here [NOISE] about what might happen next, uh,",
    "start": "3776215",
    "end": "3783580"
  },
  {
    "text": "but the idea is that you have [NOISE] both the context and the question are going to be fed some way, and maybe you'll use an RNN on context as well,",
    "start": "3783580",
    "end": "3790900"
  },
  {
    "text": "and you're going to have lots more neural architecture in order to get your answer, which is, uh, German. So, the point here is that the RNN is acting as an encoder for the question,",
    "start": "3790900",
    "end": "3801355"
  },
  {
    "text": "that is, the hidden states that you get from running the RNN over the question, represent the question.",
    "start": "3801355",
    "end": "3806650"
  },
  {
    "text": "[NOISE] Uh, so, the encoder is part of a larger neural system,",
    "start": "3806650",
    "end": "3811809"
  },
  {
    "text": "[NOISE] and it's the, the hidden states themselves that you're interested in because they contain the information. So, you could have, um, taken,",
    "start": "3811810",
    "end": "3818140"
  },
  {
    "text": "uh, element-wise max or mean, like we showed in the previous slide, to get a single vector for the question, but often, you don't do that.",
    "start": "3818140",
    "end": "3824170"
  },
  {
    "text": "Often, you'll, uh, do something else which uses the hidden states directly. So, the general point here is that RNNs are quite powerful as a way to represent,",
    "start": "3824170",
    "end": "3833440"
  },
  {
    "text": "uh, a sequence of text, uh, for further computation. Okay. Last example. So, going back to RNN language models again, [NOISE] uh,",
    "start": "3833440",
    "end": "3842934"
  },
  {
    "text": "they can be used to generate text, and there are lots of different, uh, applications for this. So, for example, speech recognition, uh, you will have your input,",
    "start": "3842935",
    "end": "3851020"
  },
  {
    "text": "which is the audio, and as a student asked earlier, this will be, uh, represented in some way, and then, uh, maybe you'll do a neural encoding of that, [NOISE] and then,",
    "start": "3851020",
    "end": "3859480"
  },
  {
    "text": "you use your RNN language model to generate the output, which, in this case, is going to be a transcription of what the audio recording is saying.",
    "start": "3859480",
    "end": "3866275"
  },
  {
    "text": "So, you will have some way of conditioning, and we're gonna talk more about how this works, uh, in a later lecture, but you have some way of",
    "start": "3866275",
    "end": "3871780"
  },
  {
    "text": "conditioning your RNN language model on the input. So, you'll use that to generate your text, [NOISE] and in this case,",
    "start": "3871780",
    "end": "3878920"
  },
  {
    "text": "the utterance might be something like, what's the weather, question mark. [OVERLAPPING] [NOISE]",
    "start": "3878920",
    "end": "3884589"
  },
  {
    "text": "Yeah. [NOISE]",
    "start": "3884590",
    "end": "3894220"
  },
  {
    "text": "In speech recognition, [inaudible]. Okay. So, the question is, in speech recognition,",
    "start": "3894220",
    "end": "3900100"
  },
  {
    "text": "we often use word error rates to evaluate, but would you use perplexity to evaluate? [NOISE] Um, I don't actually know much about that. Do you know, Chris,",
    "start": "3900100",
    "end": "3907690"
  },
  {
    "text": "what they use in, uh, speech recognition as an eval metric? [NOISE]",
    "start": "3907690",
    "end": "3915010"
  },
  {
    "text": "[inaudible] word error rate [inaudible].",
    "start": "3915010",
    "end": "3923590"
  },
  {
    "text": "The answer is, you often use WER, uh, for eval, but you might also use perplexity. Yeah. Any other questions?",
    "start": "3923590",
    "end": "3929500"
  },
  {
    "text": "[NOISE] Okay. So, um,",
    "start": "3929500",
    "end": "3935575"
  },
  {
    "text": "this is an example of a conditional language model, and it's called a conditional language model because we have the language model component,",
    "start": "3935575",
    "end": "3941724"
  },
  {
    "text": "but crucially, we're conditioning it on some kind of input. So, unlike the, uh, fun examples like with the Harry Potter text where we were just, uh,",
    "start": "3941725",
    "end": "3948580"
  },
  {
    "text": "generating text basically unconditionally, you know, we trained it on the training data, and then, we just started [NOISE] with some kind of random seed,",
    "start": "3948580",
    "end": "3954820"
  },
  {
    "text": "and then, it generates unconditionally. This is called a conditional language model because there's some kind of input that we need to condition on.",
    "start": "3954820",
    "end": "3961615"
  },
  {
    "text": "Uh, machine translation is an example [NOISE] also of a conditional language model, and we're going to see that in much more detail in",
    "start": "3961615",
    "end": "3967780"
  },
  {
    "text": "the lecture next week on machine translation. [NOISE] All right. Are there any more questions?",
    "start": "3967780",
    "end": "3972895"
  },
  {
    "text": "You have a bit of extra time, I think. [NOISE] Yeah. I have a question about RNNs in general.",
    "start": "3972895",
    "end": "3980350"
  },
  {
    "text": "[NOISE] Do people ever combine the RNN, uh, patterns of architecture,",
    "start": "3980350",
    "end": "3987220"
  },
  {
    "text": "um, with other neural networks? Say, [NOISE] you have, um, you know, N previous layers that could be doing anything,",
    "start": "3987220",
    "end": "3994285"
  },
  {
    "text": "and at the end of your network, you wanna run them through, uh, five recurrent layers. Do people mix and match like that,",
    "start": "3994285",
    "end": "4000809"
  },
  {
    "text": "or these, uh, [inaudible]. [NOISE] Uh, the question is,",
    "start": "4000810",
    "end": "4006089"
  },
  {
    "text": "do you ever combine RNN for the other types of architecture? So, I think the answer is yes. [NOISE] Uh, you might, [NOISE] you know, uh,",
    "start": "4006090",
    "end": "4011595"
  },
  {
    "text": "have- you might have other types of architectures, uh, to produce the vectors that are going to be the input to RNN,",
    "start": "4011595",
    "end": "4018540"
  },
  {
    "text": "or you might use the output of your RNN [NOISE] and feed that into a different type of neural network.",
    "start": "4018540",
    "end": "4023320"
  },
  {
    "text": "So, yes. [NOISE] Any other questions? [NOISE] Okay.",
    "start": "4026390",
    "end": "4031820"
  },
  {
    "text": "Uh, so, before we finish, uh, I have a note on terminology. Uh, when you're reading papers,",
    "start": "4031820",
    "end": "4037490"
  },
  {
    "text": "you might find often this phrase vanilla RNN, and when you see the phrase vanilla RNN,",
    "start": "4037490",
    "end": "4043065"
  },
  {
    "text": "that usually means, uh, the RNNs that are described in this lecture. So, the reason why those are called vanilla RNNs is",
    "start": "4043065",
    "end": "4050460"
  },
  {
    "text": "because there are actually other more complex kinds of RNN flavors. So, for example, there's GRU and LSTM,",
    "start": "4050460",
    "end": "4058005"
  },
  {
    "text": "and we're gonna learn about both of those next week. And another thing we're going to learn about next week [NOISE] is that you can actually get some multi-layer RNNs,",
    "start": "4058005",
    "end": "4065085"
  },
  {
    "text": "which is when you stack multiple RNNs on top of each other. [NOISE] So, uh, you're gonna learn about those,",
    "start": "4065085",
    "end": "4070935"
  },
  {
    "text": "but we hope that by the time you reach the end of this course, you're going to be able to read a research paper and see a phrase like",
    "start": "4070935",
    "end": "4076905"
  },
  {
    "text": "stacked bidirectional LSTM with residual connections and self-attention, and you'll know exactly what that is.",
    "start": "4076905",
    "end": "4082680"
  },
  {
    "text": "[NOISE] That's just an RNN with all of the toppings. [LAUGHTER] All right. Thank you. That's it for today.",
    "start": "4082680",
    "end": "4087840"
  },
  {
    "text": "[NOISE] Uh, next time- [APPLAUSE] next time,",
    "start": "4087840",
    "end": "4095910"
  },
  {
    "text": "we're learning about problems [NOISE] and fancy RNNs. [NOISE]",
    "start": "4095910",
    "end": "4104770"
  }
]