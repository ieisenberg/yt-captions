[
  {
    "text": "ah okay welcome to session number two we're going to start looking now into",
    "start": "8240",
    "end": "13599"
  },
  {
    "text": "some of the fundamental uh data structures that are used by the program and uh to start out I'd like to um to",
    "start": "13599",
    "end": "23519"
  },
  {
    "text": "just give some idea as to how these 1200 modules of tech can be rep can be br",
    "start": "23519",
    "end": "29960"
  },
  {
    "text": "broken down um so uh let's see we can this is a a",
    "start": "29960",
    "end": "36719"
  },
  {
    "text": "little diagram that I tried to to uh estimate the relative sizes if you had",
    "start": "36719",
    "end": "42719"
  },
  {
    "text": "if you uh looked inside a memory and took out all the system routines that were needed for running Pascal programs",
    "start": "42719",
    "end": "48239"
  },
  {
    "text": "and and so on what what tech would U would involve now the parts um here",
    "start": "48239",
    "end": "55680"
  },
  {
    "text": "between uh uh okay these lines here",
    "start": "55680",
    "end": "60840"
  },
  {
    "text": "um this is code and then these on the outside are tables of of large tables of",
    "start": "60840",
    "end": "68880"
  },
  {
    "text": "data um and the uh so the the program itself has uh 1200 mod roughly 1,00",
    "start": "68880",
    "end": "78799"
  },
  {
    "text": "modules and I just counted modules and I'm assuming about 100 bytes per module 100 bit of code for every module in the",
    "start": "78799",
    "end": "85799"
  },
  {
    "text": "web thing that's the estimate that I made um so 10 modules would be 1 K bytes",
    "start": "85799",
    "end": "92600"
  },
  {
    "text": "and that's one square on here and so if you so if I'd say that um",
    "start": "92600",
    "end": "98360"
  },
  {
    "text": "uh like looked like about 14 140 of those modules were concerned with syntax",
    "start": "98360",
    "end": "104680"
  },
  {
    "text": "then that would that counts for this chart I also tried in this chart to indicate something about how the the",
    "start": "104680",
    "end": "110159"
  },
  {
    "text": "parts of the program talk to each other although it it couldn't reflect all the all the constraints um uh you get some",
    "start": "110159",
    "end": "118079"
  },
  {
    "text": "some feeling for the for the organization of the program by this uh diagram so I'll go through a little bit",
    "start": "118079",
    "end": "125240"
  },
  {
    "text": "um there's three kinds of input files get read there's the text the user's",
    "start": "125240",
    "end": "130560"
  },
  {
    "text": "source file on the text text input then there's the font information which comes in which is here and then there's the",
    "start": "130560",
    "end": "137879"
  },
  {
    "text": "initi initialization which is your format file um comes in uh at the very",
    "start": "137879",
    "end": "145440"
  },
  {
    "text": "beginning when when Tech is loaded these are three different kinds of files this one would be a pascal textt file just",
    "start": "145440",
    "end": "153200"
  },
  {
    "text": "characters um this one is a TFM file this one is an fmt file uh format",
    "start": "153200",
    "end": "161319"
  },
  {
    "text": "file uh the uh TFM file is in 8bit bytes",
    "start": "161319",
    "end": "166560"
  },
  {
    "text": "uh the fmt file is in memory Words which is a tech internal data structure we would never expect to to um send fmt",
    "start": "166560",
    "end": "175640"
  },
  {
    "text": "files from one computer to another these are these are local things that we' keep only in the uh in someone's own um uh uh",
    "start": "175640",
    "end": "184799"
  },
  {
    "text": "uh local library and in any Tech writes these files other versions of tech read",
    "start": "184799",
    "end": "190640"
  },
  {
    "text": "these files now the the um the part of tech that that we call its eyes and",
    "start": "190640",
    "end": "197239"
  },
  {
    "text": "mouth is cons is the part that reads in of the user's text file and it also has",
    "start": "197239",
    "end": "204799"
  },
  {
    "text": "the macros um that it uh that it looks at uh when for things that have already",
    "start": "204799",
    "end": "211120"
  },
  {
    "text": "been defined the fmt file of course feeds into macros um and the syntax part uh is",
    "start": "211120",
    "end": "218920"
  },
  {
    "text": "supposed to make some sense out of these and keep track of what levels of input that we're in so that we might be uh",
    "start": "218920",
    "end": "224519"
  },
  {
    "text": "reading one file and then that file said uh uh call a macro and that macro said",
    "start": "224519",
    "end": "230640"
  },
  {
    "text": "uh had some parameter and we're actually looking at that parameter of the macro and in that parameter it said input another file and various levels can be",
    "start": "230640",
    "end": "237760"
  },
  {
    "text": "going on all at once uh so so um now remember these boxes of tech I'm indicating just here not the size of",
    "start": "237760",
    "end": "244760"
  },
  {
    "text": "the of the data but the size of the program so this is the amount of program I have here to deal with macros reading",
    "start": "244760",
    "end": "252079"
  },
  {
    "text": "and and and defining macros this is how much program I have uh for in inputting",
    "start": "252079",
    "end": "258840"
  },
  {
    "text": "uh text from files um roughly speaking um and this includes from the terminal",
    "start": "258840",
    "end": "265759"
  },
  {
    "text": "so this includes things like responding to error messages and so on uh but it does doesn't indicate the size of the buffers the size of buffer is only about",
    "start": "265759",
    "end": "272880"
  },
  {
    "text": "uh a half a k uh for for input you could make it larger if you wanted to but it's",
    "start": "272880",
    "end": "279280"
  },
  {
    "text": "trivial with respect to the size of the program in that case now the uh alignment is sitting in here too there's",
    "start": "279280",
    "end": "284320"
  },
  {
    "text": "some program for alignment I said this was the hypnotic suggestion type of thing and this um it sits in the",
    "start": "284320",
    "end": "289680"
  },
  {
    "text": "background and and U contributes to the syntax now and again um then locals program to deal",
    "start": "289680",
    "end": "297880"
  },
  {
    "text": "with local variables this is the grouping aspect of tech that's things are supposed to go away when right braces are hit and um and uh we have to",
    "start": "297880",
    "end": "306039"
  },
  {
    "text": "save and restore thing equivalence the table of local things is called the equivalence table and this is a this is",
    "start": "306039",
    "end": "312039"
  },
  {
    "text": "data here this is area where we actually are storing all the counts Dimensions skips uh values of Baseline skip uh all",
    "start": "312039",
    "end": "319840"
  },
  {
    "text": "the parameters the uh codes and all and the uh also uh for every control",
    "start": "319840",
    "end": "325960"
  },
  {
    "text": "sequence of a pointer to where it's defined um now um after we've read in things",
    "start": "325960",
    "end": "335199"
  },
  {
    "text": "then there's also text out this can be either a terminal for for ER for um uh",
    "start": "335199",
    "end": "340880"
  },
  {
    "text": "for error messages it could be to the or or to the transcript file or to ascend file um and uh this and so some program",
    "start": "340880",
    "end": "350039"
  },
  {
    "text": "has to be there for dealing with text output and it's about 40 modules worth um so that's four of these",
    "start": "350039",
    "end": "356960"
  },
  {
    "text": "squares now semantics uh is generally what we're doing to digest this",
    "start": "356960",
    "end": "362120"
  },
  {
    "text": "information after we've eaten it and uh and the big part of the semantics is concerned with math formatting um this",
    "start": "362120",
    "end": "369960"
  },
  {
    "text": "is everything else uh besides math and this is math um so this will be parts",
    "start": "369960",
    "end": "375680"
  },
  {
    "text": "for things that that do when you say hbox or something like that uh uh",
    "start": "375680",
    "end": "381240"
  },
  {
    "text": "dealing with constructing of of of boxes uh doing proper things with glue um some",
    "start": "381240",
    "end": "389160"
  },
  {
    "text": "of the parsing though will be in the Syntax for example if you say h skip Five Points uh",
    "start": "389160",
    "end": "396520"
  },
  {
    "text": "in the syntax we consider the thing that that recognizes 5 PT and converts that to a number that the semantics will deal",
    "start": "396520",
    "end": "403680"
  },
  {
    "text": "with um then in the math mode routines these are uh the things that that will",
    "start": "403680",
    "end": "409960"
  },
  {
    "text": "build M lists um instead ofic or other sematics build H list and V list M list",
    "start": "409960",
    "end": "416080"
  },
  {
    "text": "are the math list H and V are horizontal and vertical list um now the programs that deal with the",
    "start": "416080",
    "end": "422039"
  },
  {
    "text": "dynamic memory are um uh this is where most of tech uh is is uh stored and um",
    "start": "422039",
    "end": "431960"
  },
  {
    "text": "and so we have to allocate things in this dynamic memory and that in the first lecture in the afternoon we'll be",
    "start": "431960",
    "end": "437639"
  },
  {
    "text": "talking about the dynamic memory um fer am of code is is devoted to that including the one I mentioned the last",
    "start": "437639",
    "end": "443759"
  },
  {
    "text": "lecture where it's a display box B because one of the things you do with the dynamic memory is show what's in it",
    "start": "443759",
    "end": "450400"
  },
  {
    "text": "um then sort of separate from all that is the is are the optimization routines that that come into action after you've",
    "start": "450400",
    "end": "457080"
  },
  {
    "text": "gathered together a list and then then we try to to break the list in the best way into into lines or pages so there's",
    "start": "457080",
    "end": "463360"
  },
  {
    "text": "a paragraph uh there there's a lot of code devoted to finding the best way them to break paragraphs and that code",
    "start": "463360",
    "end": "470680"
  },
  {
    "text": "um occasionally talks to the hyphenation part of tech but the hyphenation doesn't really um uh talk directly to any other",
    "start": "470680",
    "end": "478759"
  },
  {
    "text": "module just the paragrapher if paragrapher gets stuck it calls hyphen um and the paragrapher puts",
    "start": "478759",
    "end": "486440"
  },
  {
    "text": "things back in the memory um and and uh asynchronously whenever there's enough",
    "start": "486440",
    "end": "491639"
  },
  {
    "text": "gathered to do something to for output then the page uh Builder comes along and",
    "start": "491639",
    "end": "498680"
  },
  {
    "text": "um and sends something out then the uh the program that actually does the",
    "start": "498680",
    "end": "504039"
  },
  {
    "text": "output to the DVI file um is a little it's not very long uh in fact most of these modules our comments about what",
    "start": "504039",
    "end": "510680"
  },
  {
    "text": "DVI files do what DVI files are um and there's program that reads in font",
    "start": "510680",
    "end": "516399"
  },
  {
    "text": "information so on now the Hy foration tables um take up a certain amount of space um and the equivalence table takes",
    "start": "516399",
    "end": "523279"
  },
  {
    "text": "up about the same amount of space for all the registers we have more space indicated here for font information and",
    "start": "523279",
    "end": "530519"
  },
  {
    "text": "a little bit less uh for um all the strings in and we're going to talk mostly this hour about strings now if",
    "start": "530519",
    "end": "537760"
  },
  {
    "text": "you add all this up and say how many k bytes is it it's very encouraging because it comes out to be something",
    "start": "537760",
    "end": "543399"
  },
  {
    "text": "like 260k or something like that however I left out one one small detail and that",
    "start": "543399",
    "end": "549279"
  },
  {
    "text": "is there's another table which is the whole dynamic memory which uh which I haven't shown on here uh because",
    "start": "549279",
    "end": "555079"
  },
  {
    "text": "everybody talks to that practically and you can think of that as an overlay uh about equal in size or or or maybe half",
    "start": "555079",
    "end": "562240"
  },
  {
    "text": "the size so um uh to get the dynamic memory I would put it I I would give I",
    "start": "562240",
    "end": "567399"
  },
  {
    "text": "would say you need 100K of dynamic memory to do um uh uh to do fair amount",
    "start": "567399",
    "end": "573160"
  },
  {
    "text": "of type setting and uh uh the the and uh",
    "start": "573160",
    "end": "578240"
  },
  {
    "text": "with u with 300K it'll be it would be uh uh no 256k is is as much as as you'll be",
    "start": "578240",
    "end": "586079"
  },
  {
    "text": "able to get on some machines with 16bit addresses uh because um we we address",
    "start": "586079",
    "end": "591920"
  },
  {
    "text": "them four bytes at a time um uh so somewhere in between there uh",
    "start": "591920",
    "end": "598920"
  },
  {
    "text": "you'll get the the total size of tech I've made these other tables reasonable for for Fairly large scale production so",
    "start": "598920",
    "end": "606959"
  },
  {
    "text": "I would say that uh uh your your Tech would then uh add up to something",
    "start": "606959",
    "end": "612680"
  },
  {
    "text": "between 350 and 600,000 bytes um plus the amount for",
    "start": "612680",
    "end": "618760"
  },
  {
    "text": "Pascal runtime system depending on so so for half a megabyte it looks like you",
    "start": "618760",
    "end": "624200"
  },
  {
    "text": "should you you have a you have a chance of of doing good type setting but uh uh uh you'd be comfortable with just a",
    "start": "624200",
    "end": "630920"
  },
  {
    "text": "little more than that any questions on this I hope this picture helps to give a",
    "start": "630920",
    "end": "637800"
  },
  {
    "text": "little bit more perspective as to what we're going to be dealing with inside so you're your um this is a a 10 x 12 area",
    "start": "637800",
    "end": "645120"
  },
  {
    "text": "from in here which covers the 12200 um modules in the tech in the tech",
    "start": "645120",
    "end": "652519"
  },
  {
    "text": "writing and uh the number of those modules devoted to different parts of tech is sort of indicated by the sizes",
    "start": "652519",
    "end": "658200"
  },
  {
    "text": "of those rectangles",
    "start": "658200",
    "end": "661240"
  },
  {
    "text": "oh by the way I forgot to mention there's little microphones in front of your uh and you pick that up and push",
    "start": "663240",
    "end": "669079"
  },
  {
    "text": "the red button then everyone can hear uh on the tape how does that memory uh",
    "start": "669079",
    "end": "674320"
  },
  {
    "text": "requirement compare with tech 80 can do you know no inaki can you have can you",
    "start": "674320",
    "end": "683240"
  },
  {
    "text": "say Well about the the dynamic memory the size is about the same",
    "start": "686839",
    "end": "693440"
  },
  {
    "text": "okay I think the program has gotten a little small or about the same so but",
    "start": "693760",
    "end": "699160"
  },
  {
    "text": "the uh string memory is new well I don't know no it isn't really new things are",
    "start": "699160",
    "end": "704680"
  },
  {
    "text": "packed reasonably efficiently you you can also uh use trickery to uh uh to",
    "start": "704680",
    "end": "710959"
  },
  {
    "text": "decrease the memory requirements of course uh but not just plug in this this program you'd have to you'd have to uh",
    "start": "710959",
    "end": "718279"
  },
  {
    "text": "uh do some major changes to some of the macros uh there's a wasted bite here and there",
    "start": "718279",
    "end": "725079"
  },
  {
    "text": "uh I I tried to emphasize readability over efficiency without sacrificing",
    "start": "725079",
    "end": "731040"
  },
  {
    "text": "efficiency too much so yeah um but it it's roughly the",
    "start": "731040",
    "end": "737320"
  },
  {
    "text": "same I would say now the um",
    "start": "737320",
    "end": "743120"
  },
  {
    "text": "uh uh the let's see next thing I want to do is is uh",
    "start": "743120",
    "end": "748160"
  },
  {
    "text": "turn next thing I want to do is turn off the projector so we can see the computer again I wanted to show you the pool file",
    "start": "748160",
    "end": "753800"
  },
  {
    "text": "that tangle typed out for Tech we're going to be talking about strings and uh and one of the uh things that Pascal is",
    "start": "753800",
    "end": "761079"
  },
  {
    "text": "weak on is strings uh they uh they they provide certain certain kind of support",
    "start": "761079",
    "end": "767399"
  },
  {
    "text": "for Strings but not very much and and uh so in order to use Pascal as a language we had to uh develop uh a mechanism now",
    "start": "767399",
    "end": "777160"
  },
  {
    "text": "this was originally the idea of I think Luis trapar and nyaki in the other version of tech uh after they fought",
    "start": "777160",
    "end": "784360"
  },
  {
    "text": "with the problem of strings foran I think they came up with a solution that's not only good but um has turned",
    "start": "784360",
    "end": "790199"
  },
  {
    "text": "out to have many other payoffs that we didn't expect so that now I'm very happy that Pascal didn't have strings if if I",
    "start": "790199",
    "end": "796600"
  },
  {
    "text": "had used Pascal strings there would have been a lot of other things that wouldn't have worked as well as things are working now so we have a string me me",
    "start": "796600",
    "end": "804240"
  },
  {
    "text": "method in Tech that also turned out to solve a lot of other problems in a better way than than we had then",
    "start": "804240",
    "end": "811360"
  },
  {
    "text": "otherwise would have occurred and and as we get more into it I think you'll understand what I what I mean um but",
    "start": "811360",
    "end": "818079"
  },
  {
    "text": "first of all let's see what tangle does to to Strings so if the machine is still up we can uh take a look at tech.",
    "start": "818079",
    "end": "826440"
  },
  {
    "text": "poo um Can can you see this uh on that",
    "start": "826440",
    "end": "833600"
  },
  {
    "text": "screen there is it coming up oh that's a okay now the pool file that's WR WR out",
    "start": "833600",
    "end": "839440"
  },
  {
    "text": "by tangle is um uh it consists of lines again of",
    "start": "839440",
    "end": "845720"
  },
  {
    "text": "maximum length of uh uh 72 characters uh",
    "start": "845720",
    "end": "851360"
  },
  {
    "text": "because the uh there a restriction on the length of strings that you can use in weave and each uh line comes out at",
    "start": "851360",
    "end": "859480"
  },
  {
    "text": "um each string comes out on a line by itself so that means carriage return line feed or if somebody has a IBM",
    "start": "859480",
    "end": "866320"
  },
  {
    "text": "machine uh means uh that that there's a lot of blanks or nulls at the",
    "start": "866320",
    "end": "871639"
  },
  {
    "text": "end now the the first two characters of the line is the length of the string itself so the first string that",
    "start": "871639",
    "end": "879639"
  },
  {
    "text": "currently appears in this program is buffer size and it's 11 characters long",
    "start": "879639",
    "end": "885600"
  },
  {
    "text": "and uh and so on um you get to see all of the all of the uh strings if you if",
    "start": "885600",
    "end": "892120"
  },
  {
    "text": "you push through this file and it's 8898 lines long actually um",
    "start": "892120",
    "end": "900440"
  },
  {
    "text": "uh the uh uh the last line is not a string the last line is special it's a",
    "start": "900440",
    "end": "906759"
  },
  {
    "text": "it's called the string pool sum check um now tangle adds this extra the",
    "start": "906759",
    "end": "913560"
  },
  {
    "text": "special number with an asterisk in front of it at at the end of the file with the following idea that if you have changed",
    "start": "913560",
    "end": "920720"
  },
  {
    "text": "any one of the strings in the uh in the program then chances are very good that",
    "start": "920720",
    "end": "926720"
  },
  {
    "text": "this number will be different and you can also refer to this number in your web program and say what is my",
    "start": "926720",
    "end": "934720"
  },
  {
    "text": "string pool number therefore you can find out if you've read in the string pool that's",
    "start": "934720",
    "end": "941720"
  },
  {
    "text": "that's yours because you can look and see if your string pool number equals this one at the end of the file now if I",
    "start": "941720",
    "end": "948920"
  },
  {
    "text": "edit this if I edit this Tech pool file it without changing that number at the bottom um uh program won't complain",
    "start": "948920",
    "end": "957000"
  },
  {
    "text": "you're not supposed to touch this this file yourself this file is supposed to be made by tangle but you see this is",
    "start": "957000",
    "end": "963279"
  },
  {
    "text": "this is important because if you were started to load a file that was that was generated without the right you know",
    "start": "963279",
    "end": "970279"
  },
  {
    "text": "somebody suddenly put another string in his change file or something like that and uh and the your strings get out of",
    "start": "970279",
    "end": "976480"
  },
  {
    "text": "sync then uh you get very interesting print outs from Tech uh where we have",
    "start": "976480",
    "end": "981560"
  },
  {
    "text": "some permutation of all the strings coming out when when it says print string 100 it actually prints something",
    "start": "981560",
    "end": "988199"
  },
  {
    "text": "quite different and and uh it um might be amusing to some people but uh frustrating to others okay so that last",
    "start": "988199",
    "end": "995759"
  },
  {
    "text": "thing on the file is your is uh the U string Pro check s now this file isn't",
    "start": "995759",
    "end": "1001319"
  },
  {
    "text": "that isn't that pneumonic to read because it doesn't tell you what string number n is and and so there's a trivial",
    "start": "1001319",
    "end": "1008240"
  },
  {
    "text": "program at the beginning of the techware uh report that handout that you got called pool type and uh the pool type",
    "start": "1008240",
    "end": "1015279"
  },
  {
    "text": "program does something to to String Pools and so we demonst at that now um I",
    "start": "1015279",
    "end": "1021000"
  },
  {
    "text": "think I've got it already compiled it's such a a",
    "start": "1021000",
    "end": "1026480"
  },
  {
    "text": "trivial oh wait my son has a message for me",
    "start": "1028360",
    "end": "1033240"
  },
  {
    "text": "here okay now um okay so let's write pool",
    "start": "1042520",
    "end": "1051440"
  },
  {
    "text": "time uh pool file will be tech. pool or poo and output will be um um oh I don't",
    "start": "1051840",
    "end": "1061000"
  },
  {
    "text": "know cool okay so now it's reading in that file and presumably making the output",
    "start": "1061000",
    "end": "1067960"
  },
  {
    "text": "file for it and uh we can look at pool. type to see we we could print this out",
    "start": "1067960",
    "end": "1074400"
  },
  {
    "text": "of course um to see what uh what the string are inside now the the the first",
    "start": "1074400",
    "end": "1082240"
  },
  {
    "text": "128 strings I mentioned are special and",
    "start": "1082240",
    "end": "1087480"
  },
  {
    "text": "uh um that's right I this is these are not",
    "start": "1087480",
    "end": "1094960"
  },
  {
    "text": "but however the pool type I've done was done with with sale versions pool type so uh uh this has our local character",
    "start": "1094960",
    "end": "1102280"
  },
  {
    "text": "set I'll be talking what B character said uh also in this hour but uh let me make another let me do another Pool type",
    "start": "1102280",
    "end": "1109679"
  },
  {
    "text": "um without the uh sale dependent changes so let's see I'll run tangle on pool",
    "start": "1109679",
    "end": "1118440"
  },
  {
    "text": "type without any change file",
    "start": "1118799",
    "end": "1124799"
  },
  {
    "text": "and and uh it doesn't have a pool of its own so and whenever you you run a a web",
    "start": "1125120",
    "end": "1132200"
  },
  {
    "text": "with a it's done you see it isn't that great when you have a short program",
    "start": "1132200",
    "end": "1138320"
  },
  {
    "text": "it was one one second instead of 2 minutes",
    "start": "1139559",
    "end": "1146520"
  },
  {
    "text": "um now uh the now we're going to compile and and go the uh uh and I'm making a",
    "start": "1146520",
    "end": "1153240"
  },
  {
    "text": "version without the change file I my change file refers to my local character set and and the sale character set has a",
    "start": "1153240",
    "end": "1160159"
  },
  {
    "text": "a a keyboard that has some symbols on it which I I like very much uh especially",
    "start": "1160159",
    "end": "1166760"
  },
  {
    "text": "the unequal sign and and the um and less than or equal sign gr equal",
    "start": "1166760",
    "end": "1173960"
  },
  {
    "text": "in the left Arrow I would find it very difficult to have to write less than greater than every time instead of",
    "start": "1173960",
    "end": "1179960"
  },
  {
    "text": "unequal that would be quite painful for me so I'm glad I can do that here um and I imagine there are a few other people",
    "start": "1179960",
    "end": "1185640"
  },
  {
    "text": "that feel the same way so we try to make Tech uh that it will be able to be to to",
    "start": "1185640",
    "end": "1190919"
  },
  {
    "text": "allow that for people at Stanford however we want also so that it's not going to be confusing uh that we can",
    "start": "1190919",
    "end": "1196799"
  },
  {
    "text": "also send our files to to elsewhere and not lose the machine um dependence so we",
    "start": "1196799",
    "end": "1203159"
  },
  {
    "text": "have I think a pretty good solution to that and I'll explain it in a minute first let's look at pool. temp pool.",
    "start": "1203159",
    "end": "1208840"
  },
  {
    "text": "temp shows the strings that we would get uh without sale character set",
    "start": "1208840",
    "end": "1216679"
  },
  {
    "text": "temp okay now the the first 128 uh strings so number 0 through",
    "start": "1219480",
    "end": "1225799"
  },
  {
    "text": "127 are are uh uh what gets printed out for ask for",
    "start": "1225799",
    "end": "1233440"
  },
  {
    "text": "Tech internal uh codes and uh so starting at 32 we have asky code 32 is a",
    "start": "1233440",
    "end": "1240280"
  },
  {
    "text": "space 33 exclamation point 34 is is a double quote can you see that okay on",
    "start": "1240280",
    "end": "1246679"
  },
  {
    "text": "there I can't see it on my M yeah okay so um um uh and then we get up to 126",
    "start": "1246679",
    "end": "1253799"
  },
  {
    "text": "which is a Tilda and um",
    "start": "1253799",
    "end": "1259720"
  },
  {
    "text": "then um then the the other codes aren't visible in aski and so for in",
    "start": "1259720",
    "end": "1266640"
  },
  {
    "text": "interchange purposes we are representing them with two up arrows and another",
    "start": "1266640",
    "end": "1272120"
  },
  {
    "text": "symbol and uh for example 127 which would be asky code octal",
    "start": "1272120",
    "end": "1278440"
  },
  {
    "text": "177 would it comes out as up Arrow up Arrow question mark and uh at the",
    "start": "1278440",
    "end": "1283640"
  },
  {
    "text": "beginning of the thing if you remember um we have the at sign an A through um",
    "start": "1283640",
    "end": "1291440"
  },
  {
    "text": "capital A through um capital Z and then the next asy codes that that go in there",
    "start": "1291440",
    "end": "1298240"
  },
  {
    "text": "so so this is a a a form that Tech 82 will accept if you put it in your input",
    "start": "1298240",
    "end": "1305640"
  },
  {
    "text": "if you say up Arrow up Arrow s uh capital S up Arrow up Arrow capital S it",
    "start": "1305640",
    "end": "1311520"
  },
  {
    "text": "will um treat it as the asky code um",
    "start": "1311520",
    "end": "1317200"
  },
  {
    "text": "that is um 19 in decimal if we compare this to um I'm sorry it was",
    "start": "1317200",
    "end": "1325279"
  },
  {
    "text": "pool. type uh we compare that same thing to",
    "start": "1325279",
    "end": "1330320"
  },
  {
    "text": "the sale character set you see that at sale um some of these we we'll uh assume",
    "start": "1330320",
    "end": "1336760"
  },
  {
    "text": "that someone can type so a down arrow will assume they can type yeah yeah that's rather handy for subscripts um and Alpha Beta and S not",
    "start": "1336760",
    "end": "1346520"
  },
  {
    "text": "Epsilon Pi Lambda and then when we get to uh symbol nine there which is which",
    "start": "1346520",
    "end": "1354000"
  },
  {
    "text": "is octal 11 that's a uh is that tab I",
    "start": "1354000",
    "end": "1359480"
  },
  {
    "text": "think isn't it um yeah eight is backspace sometimes",
    "start": "1359480",
    "end": "1365400"
  },
  {
    "text": "but uh mine is Tab and so there uh if somebody wants to uh so if we're",
    "start": "1365400",
    "end": "1370919"
  },
  {
    "text": "printing out this is these strings are used in printing and um so if we're printing out a tab Mark that somebody",
    "start": "1370919",
    "end": "1377600"
  },
  {
    "text": "that we might have ready in at sale um then it would print out as up AR up AI",
    "start": "1377600",
    "end": "1383880"
  },
  {
    "text": "if somebody inputs up AR up I even at sale or anywhere it will go in as",
    "start": "1383880",
    "end": "1389120"
  },
  {
    "text": "internal code number nine okay um and uh these tab Mark um",
    "start": "1389120",
    "end": "1395880"
  },
  {
    "text": "Line Feed uh vertical tab uh carriage return and um page Mark form feed um are",
    "start": "1395880",
    "end": "1405400"
  },
  {
    "text": "are not visible symbols so so we would print them in that way and if someone",
    "start": "1405400",
    "end": "1411640"
  },
  {
    "text": "wants to define a control sequence um back slash um up Arrow up",
    "start": "1411640",
    "end": "1418240"
  },
  {
    "text": "Arrow L that'll work and it'll it'll be a back or if he wants to do a chode on",
    "start": "1418240",
    "end": "1423880"
  },
  {
    "text": "that symbol he can do it this way or you can toode your carriage return to mean something and so on now um these",
    "start": "1423880",
    "end": "1431080"
  },
  {
    "text": "internal codes on the other one would would all be would all be um up arrows",
    "start": "1431080",
    "end": "1436400"
  },
  {
    "text": "and so if I'm sending a file to some other place I would use a version of tech that would print and that would",
    "start": "1436400",
    "end": "1443640"
  },
  {
    "text": "print um in the standard form and by making system dependent changes you say",
    "start": "1443640",
    "end": "1449440"
  },
  {
    "text": "what there's a module called character K can be printed and that that code is",
    "start": "1449440",
    "end": "1454679"
  },
  {
    "text": "duplicated in the pool type program and in the tech listing module K uh I forgot",
    "start": "1454679",
    "end": "1460520"
  },
  {
    "text": "to tell you an important thing about how to read web program that is that there's an index to all the modules all the",
    "start": "1460520",
    "end": "1466039"
  },
  {
    "text": "module names after the other index and that's very helpful um if you uh are",
    "start": "1466039",
    "end": "1472840"
  },
  {
    "text": "looking at something in the web file and want to find out where it is in the thing and and as I remember it was",
    "start": "1472840",
    "end": "1478600"
  },
  {
    "text": "called character K can be printed is the module that um I'm looking for here so",
    "start": "1478600",
    "end": "1484159"
  },
  {
    "text": "on page 438 I found character K cannot be printed is module number",
    "start": "1484159",
    "end": "1490679"
  },
  {
    "text": "49 and so now I can look at module number 49 and and there's a comment",
    "start": "1490679",
    "end": "1496320"
  },
  {
    "text": "there um it's called true uh in the in most versions of tech",
    "start": "1496320",
    "end": "1503640"
  },
  {
    "text": "character K cannot be printed as true in most versions of tech",
    "start": "1503640",
    "end": "1508760"
  },
  {
    "text": "um uh namely this is for characters K that are nonas codes nonvisible asy code",
    "start": "1508760",
    "end": "1515440"
  },
  {
    "text": "that's only supposed to work for the for those those values of K less than than octal octal 40 less than 32 decimal uh",
    "start": "1515440",
    "end": "1524600"
  },
  {
    "text": "so I'm saying that this this is true here um now on the other and at MIT I suggest that um uh it can't be printed",
    "start": "1524600",
    "end": "1533159"
  },
  {
    "text": "be be 0 10 to 12 14 15 and 33 because uh",
    "start": "1533159",
    "end": "1539559"
  },
  {
    "text": "uh 33 is an escape code and 14 is your U car is your U line uh form feed and so",
    "start": "1539559",
    "end": "1547120"
  },
  {
    "text": "on um now uh so then only a few characters cannot",
    "start": "1547120",
    "end": "1553240"
  },
  {
    "text": "be printed in that place now this is a system dependent change um",
    "start": "1553240",
    "end": "1558840"
  },
  {
    "text": "and uh in foreign countries uh uh there will be different uh ideas on what to do",
    "start": "1558840",
    "end": "1564399"
  },
  {
    "text": "with these codes less than 40 um so question curs what does it so",
    "start": "1564399",
    "end": "1573279"
  },
  {
    "text": "what so uh what significance do these internal codes have well",
    "start": "1573279",
    "end": "1580240"
  },
  {
    "text": "um in a way if you changed your codes to some to anything else um it wouldn't",
    "start": "1580240",
    "end": "1586360"
  },
  {
    "text": "matter that much to Tech uh we it would still compile uh it still compile uh uh",
    "start": "1586360",
    "end": "1594360"
  },
  {
    "text": "programs except that uh these numbers are used in the language in in several",
    "start": "1594360",
    "end": "1600520"
  },
  {
    "text": "ways first of all the internal numbers that Tech has go out into your DVI file",
    "start": "1600520",
    "end": "1605559"
  },
  {
    "text": "in the font like if you happen to say letter a in in a certain font then the",
    "start": "1605559",
    "end": "1611760"
  },
  {
    "text": "then the internal uh code that Tech has for a is what gets used as the character number in in your DVI file so it'll say",
    "start": "1611760",
    "end": "1619520"
  },
  {
    "text": "it so DV file say you're maybe in font number three and you're setting character number 65 that's a capital a",
    "start": "1619520",
    "end": "1627399"
  },
  {
    "text": "um or at least that's in Tex internal code for Capital a so so if the manufacturer has that Capa in another",
    "start": "1627399",
    "end": "1634919"
  },
  {
    "text": "position in his font file it your output driver makes the conversion at that point um so we have um we have to have",
    "start": "1634919",
    "end": "1642640"
  },
  {
    "text": "some kind of standard internal code that everybody uses and if you're using Epic",
    "start": "1642640",
    "end": "1648320"
  },
  {
    "text": "something on your external files the first thing Tech does reading in a pro program out of the outside world is",
    "start": "1648320",
    "end": "1654720"
  },
  {
    "text": "going to convert that to uh its internal code so that all so that the rest of tech knows exactly what's uh what's",
    "start": "1654720",
    "end": "1661039"
  },
  {
    "text": "going on and guarantee that 0 through n are consecutive numbers and things like that um now if you do something now you",
    "start": "1661039",
    "end": "1669519"
  },
  {
    "text": "can convert any of your outside codes to any internal codes you want",
    "start": "1669519",
    "end": "1675399"
  },
  {
    "text": "um uh and uh and then then on the output",
    "start": "1675399",
    "end": "1680600"
  },
  {
    "text": "we we'll go back and uh and and do the inverse operation the um um uh the idea",
    "start": "1680600",
    "end": "1688159"
  },
  {
    "text": "is that if you if you never um print out these codes that are not standard in",
    "start": "1688159",
    "end": "1695480"
  },
  {
    "text": "asky then you can still do it with the up Arrow when I said up Arrow up Arrow s is equivalent to um one of these asky",
    "start": "1695480",
    "end": "1702720"
  },
  {
    "text": "control codes I should have been a little more exact that it's not an up Arrow um any character whose chode is a",
    "start": "1702720",
    "end": "1711880"
  },
  {
    "text": "superscript mark is is is uh the real thing that instead of what I said up",
    "start": "1711880",
    "end": "1717600"
  },
  {
    "text": "Arrow so if up Arrow hasn't been decoded to superscript Mark then it doesn't work",
    "start": "1717600",
    "end": "1722679"
  },
  {
    "text": "and if uh but if if any character who has been Chota to to superscript Mark um",
    "start": "1722679",
    "end": "1727840"
  },
  {
    "text": "the the two should be should be identical and both superscript marks but they could be any but but otherwise uh",
    "start": "1727840",
    "end": "1734440"
  },
  {
    "text": "Tech Will Allow this on input in the middle of a control sequence name if that thing is to coded as a letter for",
    "start": "1734440",
    "end": "1740399"
  },
  {
    "text": "example it's possible to do that um now the the the other place",
    "start": "1740399",
    "end": "1746760"
  },
  {
    "text": "where where uh internal code is used in chode statements for example in Tech so you'll say what's the chode of of",
    "start": "1746760",
    "end": "1753880"
  },
  {
    "text": "something and we have this uh this uh back this reverse apostrophe operator",
    "start": "1753880",
    "end": "1759279"
  },
  {
    "text": "that converts a character into Tech internal code number so code 65 sets the",
    "start": "1759279",
    "end": "1765360"
  },
  {
    "text": "code for uppercase a um the reverse apostrophe uppercase a is",
    "start": "1765360",
    "end": "1771440"
  },
  {
    "text": "equal to 65 so this is a definite part of a language of of of text language as to what it does uh for the uh uh uh for",
    "start": "1771440",
    "end": "1780200"
  },
  {
    "text": "its internal code number I think some of you know that s the computer that we're",
    "start": "1780200",
    "end": "1785279"
  },
  {
    "text": "that we've got here um has a strange code that nobody else does in the world",
    "start": "1785279",
    "end": "1790840"
  },
  {
    "text": "uh it's because that they started at Stanford with asy code earlier than before asy code was even in its first",
    "start": "1790840",
    "end": "1797080"
  },
  {
    "text": "form and one guy one night figured he could save five uh um resistors or",
    "start": "1797080",
    "end": "1803799"
  },
  {
    "text": "something in the uh in our machine by switching around the Cod of right brace",
    "start": "1803799",
    "end": "1809080"
  },
  {
    "text": "uh to one to the other he did it overnight without telling anybody and next and ever since we've had right brace in the position different from the",
    "start": "1809080",
    "end": "1816039"
  },
  {
    "text": "rest of the world now um we have a few other characters that are that are um",
    "start": "1816039",
    "end": "1822039"
  },
  {
    "text": "unusual too and certainly the burden should not be on the rest of the world but should be on us to to have to make",
    "start": "1822039",
    "end": "1827559"
  },
  {
    "text": "our change file a little harder than yours uh in order to do that so Tech's internal character code is based on a",
    "start": "1827559",
    "end": "1834039"
  },
  {
    "text": "code that I that I think is the best uh uh proposal for for representing these",
    "start": "1834039",
    "end": "1839559"
  },
  {
    "text": "extra characters uh as uh uh invisible way um uh it's the one that's used on",
    "start": "1839559",
    "end": "1848399"
  },
  {
    "text": "several MIT machines um and uh so at MIT no no conversions are needed uh uh if",
    "start": "1848399",
    "end": "1857360"
  },
  {
    "text": "you wanted to use a recommended conventions for codes less than octo 40 the the strange as codes um now most of",
    "start": "1857360",
    "end": "1866480"
  },
  {
    "text": "you just won't want to do anything with those characters and you won't see them on your input files and you won't ever a write them on your output files but you",
    "start": "1866480",
    "end": "1872559"
  },
  {
    "text": "could do you can imagine uh people in in foreign countries that want that have",
    "start": "1872559",
    "end": "1878880"
  },
  {
    "text": "more than 26 letters in their alphabet and they also want to have backslash and a lot of and other control characters to",
    "start": "1878880",
    "end": "1884559"
  },
  {
    "text": "use um I believe it would be a good idea to map those letters for Tech purpose for Tech purposes into",
    "start": "1884559",
    "end": "1891320"
  },
  {
    "text": "codes less than 40 and uh and then they can send their source files and",
    "start": "1891320",
    "end": "1896639"
  },
  {
    "text": "everything else to America and we'll still be able to do to uh uh work with them as if they were as if they were",
    "start": "1896639",
    "end": "1903360"
  },
  {
    "text": "generated here um so the the internal",
    "start": "1903360",
    "end": "1909120"
  },
  {
    "text": "character uh set represents the first these first cause and then pool type just types out the other ones with with",
    "start": "1909120",
    "end": "1916200"
  },
  {
    "text": "numbers associated with them so that you can see exactly uh if you if you had a debug and you you wanted to really look",
    "start": "1916200",
    "end": "1922840"
  },
  {
    "text": "at the Pascal program and and Pascal program refers to co string number 432",
    "start": "1922840",
    "end": "1928320"
  },
  {
    "text": "then you could look at the thing and say well 432 is this such and such a message so you probably be able to ident to",
    "start": "1928320",
    "end": "1934960"
  },
  {
    "text": "recognize from what that string was maybe a help message or something be able to recognize what what part of the",
    "start": "1934960",
    "end": "1941039"
  },
  {
    "text": "of of the of a pascal program you're looking at so that that uh pool type is is simply a help uh you that way to so",
    "start": "1941039",
    "end": "1948760"
  },
  {
    "text": "that you can figure out what's in a what's in one of these cool files that tangle",
    "start": "1948760",
    "end": "1954799"
  },
  {
    "text": "generates any questions on that now uh what what actually happens",
    "start": "1955240",
    "end": "1961360"
  },
  {
    "text": "then when uh when uh Tex starts it has to read in the pool file so it reads in",
    "start": "1961360",
    "end": "1966399"
  },
  {
    "text": "it but only initech does this initech reads in the pool file and checks to see",
    "start": "1966399",
    "end": "1972440"
  },
  {
    "text": "that um we've got the right uh sum check",
    "start": "1972440",
    "end": "1978159"
  },
  {
    "text": "and stores that all into the format file with the rest of the macros and font information that it's going to",
    "start": "1978159",
    "end": "1984240"
  },
  {
    "text": "preload um on the other hand U uh it also stores the font Su check so that",
    "start": "1984240",
    "end": "1989480"
  },
  {
    "text": "the other versions of tech they won't check anything except but except they will check the see that they have the right uh the format file was generated",
    "start": "1989480",
    "end": "1997600"
  },
  {
    "text": "from the right sum check uh okay so so other production versions of tech will",
    "start": "1997600",
    "end": "2003600"
  },
  {
    "text": "also know that their format file is compatible with them uh they'll try a load a format file that was generated",
    "start": "2003600",
    "end": "2009720"
  },
  {
    "text": "with a different version of tech uh then then the strings won't be compatible and so it'll it'll uh say right away um that",
    "start": "2009720",
    "end": "2017559"
  },
  {
    "text": "this format file is wrong now the uh um uh the way strings",
    "start": "2017559",
    "end": "2023760"
  },
  {
    "text": "are represented inside of tech um have a big array called the string pool and let's see where I can string handling is",
    "start": "2023760",
    "end": "2031559"
  },
  {
    "text": "uh starts in module 36 page 18",
    "start": "2031559",
    "end": "2037320"
  },
  {
    "text": "um okay the big there's a big uh array",
    "start": "2039559",
    "end": "2045039"
  },
  {
    "text": "declared in module 39 and um and uh in this",
    "start": "2045039",
    "end": "2051398"
  },
  {
    "text": "array uh you see string pool packed array of asy code now asy code is a sub",
    "start": "2051399",
    "end": "2057560"
  },
  {
    "text": "range of the integer 0 to 127 and uh only things that are going to go in this string pool array are are our",
    "start": "2057560",
    "end": "2064200"
  },
  {
    "text": "visible charact our characters that we can print also so um uh the the input",
    "start": "2064200",
    "end": "2069638"
  },
  {
    "text": "routine is set up so that I'm not going to put in into that into that string pool buffer any of the codes that would",
    "start": "2069639",
    "end": "2076200"
  },
  {
    "text": "come out with up Arrow up Arrow something in the printing out only only the ones that I could print are going in",
    "start": "2076200",
    "end": "2082118"
  },
  {
    "text": "there and they're all seven bits um uh characters nothing uh over 127 allowed",
    "start": "2082119",
    "end": "2087800"
  },
  {
    "text": "if you look just above that it says types in the outer block 18 plus equivalent and it mentions pool pointer",
    "start": "2087800",
    "end": "2095280"
  },
  {
    "text": "uh I guess I should have mentioned that types when when you have the plus equivalent there and it refers to module",
    "start": "2095280",
    "end": "2101079"
  },
  {
    "text": "18 but here we are in module 38 uh what we're saying here is that U these are",
    "start": "2101079",
    "end": "2106640"
  },
  {
    "text": "more types in the outer block uh 18 was the first module where we had types in the outer block and if you turn to to",
    "start": "2106640",
    "end": "2113720"
  },
  {
    "text": "module 18 it tells you all the other ones where they are so module 18 says",
    "start": "2113720",
    "end": "2118760"
  },
  {
    "text": "see also sections 2538 that's when we're at 96 and so on up to",
    "start": "2118760",
    "end": "2125560"
  },
  {
    "text": "812 and besides saying the code is used it says C also and this means that um",
    "start": "2125560",
    "end": "2131359"
  },
  {
    "text": "many modules with the same name all get buted together in the order in which they appear in the program so this is",
    "start": "2131359",
    "end": "2138880"
  },
  {
    "text": "one of the places where we want a new type so when we refer to something as a pool pointer this will mean um an index",
    "start": "2138880",
    "end": "2145599"
  },
  {
    "text": "into the string pool array and whenever we're talking about the the string pool array then uh something that's going to",
    "start": "2145599",
    "end": "2151800"
  },
  {
    "text": "go into uh Stir Pool um it'll have an index called the type will be pool pointer and similarly a string number is",
    "start": "2151800",
    "end": "2159960"
  },
  {
    "text": "something that that's a string start array well the string start array is a directory to the pool to the pool and uh",
    "start": "2159960",
    "end": "2167640"
  },
  {
    "text": "the strings that Tech gets it once it reads one in it never removes it again",
    "start": "2167640",
    "end": "2173040"
  },
  {
    "text": "um unless it's the very last one read in sometimes the last one read in you don't want to see anymore and you delete that",
    "start": "2173040",
    "end": "2179079"
  },
  {
    "text": "but we but it's it just operates in a very simple fashion because that the rules of tech it turn out that's what",
    "start": "2179079",
    "end": "2184319"
  },
  {
    "text": "you want so um it starts out with all the uh string that these 800 and some strings that tangle given we read that",
    "start": "2184319",
    "end": "2191400"
  },
  {
    "text": "into the string pool array and that then after that we're going to have strings for various other purposes in Tech as",
    "start": "2191400",
    "end": "2197680"
  },
  {
    "text": "Tech gets going um and they they'll they'll be continually added at the end like file names of your fonts and so",
    "start": "2197680",
    "end": "2205200"
  },
  {
    "text": "on now um the string start is a pointer into into the array and so that uh it",
    "start": "2205200",
    "end": "2212760"
  },
  {
    "text": "tells you where that string begins uh so string number",
    "start": "2212760",
    "end": "2218160"
  },
  {
    "text": "um 100 for example uh will start it at",
    "start": "2218160",
    "end": "2223880"
  },
  {
    "text": "some place in the in that pool array and and uh at the very beginning we're going to put in we're going to put in those",
    "start": "2223880",
    "end": "2231119"
  },
  {
    "text": "first 128 strings also even if they're one character long we're going to put them there now there's no string end",
    "start": "2231119",
    "end": "2237359"
  },
  {
    "text": "array reason is that um if you want to know where string um 100 ends you just",
    "start": "2237359",
    "end": "2244480"
  },
  {
    "text": "look at where string 101 starts and it's one pos you know and that's that's where",
    "start": "2244480",
    "end": "2250200"
  },
  {
    "text": "it is so uh uh so we don't need so we only need the one U array string start",
    "start": "2250200",
    "end": "2255680"
  },
  {
    "text": "then we have to keep uh if we have n strings in the string pool we have n plus one starting positions uh so the",
    "start": "2255680",
    "end": "2262720"
  },
  {
    "text": "the starting the start of uh of the of the string we're going to do next is",
    "start": "2262720",
    "end": "2267960"
  },
  {
    "text": "also recorded there so that we could find the end of of the last string we had in so that's all that's two it as",
    "start": "2267960",
    "end": "2273319"
  },
  {
    "text": "far as representing strings is concerned um and so there's a macro defined there",
    "start": "2273319",
    "end": "2278720"
  },
  {
    "text": "in U module 40 length of a string um so if we want to know how long string",
    "start": "2278720",
    "end": "2284760"
  },
  {
    "text": "number K is we just uh uh ask for its length which is the difference between the two string start",
    "start": "2284760",
    "end": "2291520"
  },
  {
    "text": "positions the modules 38 uh to U uh and",
    "start": "2291520",
    "end": "2297359"
  },
  {
    "text": "so on I just build up very simple routines for for dealing with strings",
    "start": "2297359",
    "end": "2302720"
  },
  {
    "text": "that that other parts of tech are going to use um uh as sub",
    "start": "2302720",
    "end": "2308200"
  },
  {
    "text": "um there's a simple one that flushes a string that destroys the most most recently made string that's module",
    "start": "2308200",
    "end": "2315560"
  },
  {
    "text": "44 um there's there's one that's called um string room that's at the bottom of",
    "start": "2315560",
    "end": "2321480"
  },
  {
    "text": "page 18 a string room uh you'd call string room of five for example to see",
    "start": "2321480",
    "end": "2327119"
  },
  {
    "text": "if there's room for a string of length five and uh so it say if pool pointer",
    "start": "2327119",
    "end": "2332800"
  },
  {
    "text": "plus 5 greater than pool size then overflow pool size pool size size the",
    "start": "2332800",
    "end": "2337960"
  },
  {
    "text": "first parameter to overflow is a string saying is you're going to get an error message saying sorry text memory text uh",
    "start": "2337960",
    "end": "2345839"
  },
  {
    "text": "capacity is exceeded the pool size equals and then it'll give the numerical",
    "start": "2345839",
    "end": "2351839"
  },
  {
    "text": "um size uh that it's been compiled with and pool size is a compile time",
    "start": "2351839",
    "end": "2357920"
  },
  {
    "text": "parameter and all the compile time parameters I believe are in module 11 no",
    "start": "2357920",
    "end": "2363280"
  },
  {
    "text": "yeah module 11 and and the that um we",
    "start": "2363280",
    "end": "2368760"
  },
  {
    "text": "that um uh you can decide on um how much space you",
    "start": "2368760",
    "end": "2376040"
  },
  {
    "text": "want uh and here I declared it to be 30,000 remember this gets this is a packed array of seven bits on our 36 bit",
    "start": "2376040",
    "end": "2383480"
  },
  {
    "text": "computers that means we get five to a word and 30,000 takes 6,000 words on a",
    "start": "2383480",
    "end": "2389400"
  },
  {
    "text": "on a a bit a bite oriented machine this would mean uh 30 30k bytes um in a row",
    "start": "2389400",
    "end": "2396400"
  },
  {
    "text": "and uh 32 bit word machine this would of course be four to a a word and so on um",
    "start": "2396400",
    "end": "2405000"
  },
  {
    "text": "and uh this number it says it must be at least 22,000 more than string vacancies",
    "start": "2405000",
    "end": "2411599"
  },
  {
    "text": "and string vacancies is another compile time parameter um and I set that to",
    "start": "2411599",
    "end": "2417720"
  },
  {
    "text": "8,000 now why did I put this 22,000 that's because we're using almost",
    "start": "2417720",
    "end": "2423240"
  },
  {
    "text": "22,000 for the um strings in in Tech already the error messages and",
    "start": "2423240",
    "end": "2430040"
  },
  {
    "text": "help messages and everything I think at the end of the pool type I might even have that",
    "start": "2430040",
    "end": "2435319"
  },
  {
    "text": "I don't don't worry about oh yeah you got it okay uh wait a minute I got to",
    "start": "2435319",
    "end": "2440720"
  },
  {
    "text": "get all the way to the end here um last extension yeah",
    "start": "2440720",
    "end": "2448520"
  },
  {
    "text": "2,75 characters in all and so I I'm just rounded that up to 22,000 because people",
    "start": "2448520",
    "end": "2453800"
  },
  {
    "text": "will be adding extensions and things like that to probably round up a little bit so this is uh now what happens is",
    "start": "2453800",
    "end": "2460160"
  },
  {
    "text": "that when when it reads in the pool file um it makes sure that there's also room for string vacancies more more otherwise",
    "start": "2460160",
    "end": "2468800"
  },
  {
    "text": "uh any Tech will complain saying that string that you got to increase pool",
    "start": "2468800",
    "end": "2474319"
  },
  {
    "text": "size um so that's a compile time parameter depending how how many things that you're going to do and it say it",
    "start": "2474319",
    "end": "2480400"
  },
  {
    "text": "tells you here in module 11 it says it's the maximum number of characters in strings including all error messages and",
    "start": "2480400",
    "end": "2486160"
  },
  {
    "text": "help text also the names of all fonts names of all control sequences these are",
    "start": "2486160",
    "end": "2491839"
  },
  {
    "text": "the kinds of things that go into the pool um see it's names of um names of",
    "start": "2491839",
    "end": "2497319"
  },
  {
    "text": "control sequences when you declare a control sequence um and it's not a one letter one character control sequence if",
    "start": "2497319",
    "end": "2503599"
  },
  {
    "text": "it's if it's a multiletter charact uh control sequence the name goes right into the string pool now here's one of",
    "start": "2503599",
    "end": "2509880"
  },
  {
    "text": "the things I mentioned before where I saying that this was this method of dealing with strings was was giving us",
    "start": "2509880",
    "end": "2516480"
  },
  {
    "text": "advantages over for what we had in the sale version of tech because sale version of tech we couldn't um uh uh the",
    "start": "2516480",
    "end": "2524480"
  },
  {
    "text": "the implementation of strings was uh quite inefficient we we didn't want to use S strings for uh control sequences",
    "start": "2524480",
    "end": "2532920"
  },
  {
    "text": "instead uh though we had to go into our dynamic memory and take away valuable space there for the names of uh control",
    "start": "2532920",
    "end": "2539359"
  },
  {
    "text": "sequences my first original design of tech if anybody remembers way back in 1977 I had uh real strange restrictions",
    "start": "2539359",
    "end": "2546800"
  },
  {
    "text": "that tool sequence had to consist of at most five letters and and upper and",
    "start": "2546800",
    "end": "2552160"
  },
  {
    "text": "lower case were not distinguished after the first one and things like this was all so that I could keep a separate",
    "start": "2552160",
    "end": "2558160"
  },
  {
    "text": "table of my control sequences um and uh I had the idea at",
    "start": "2558160",
    "end": "2563839"
  },
  {
    "text": "first that hardly anybody would be defining new control sequences um I didn't realize the macros were",
    "start": "2563839",
    "end": "2570520"
  },
  {
    "text": "going to be very powerful at at first and so then uh gradually we found that people actually want control sequence so",
    "start": "2570520",
    "end": "2578200"
  },
  {
    "text": "we've made room for well now but treating them as strings solve lots of problems with the data structure because then I can CU I don't need a special",
    "start": "2578200",
    "end": "2587160"
  },
  {
    "text": "program for example to print out the name of a control of a control sequence because I've already got a program that prints out a string um and uh so that",
    "start": "2587160",
    "end": "2595839"
  },
  {
    "text": "was one of the one of the simple advantages that we were able to combine two kind two kinds of data structures",
    "start": "2595839",
    "end": "2602359"
  },
  {
    "text": "into one here now um You see there are sube there on module 45 to compare a",
    "start": "2602359",
    "end": "2609640"
  },
  {
    "text": "string to the buffer uh this is what we would be doing when we're looking up uh to see if our control sequence is in a",
    "start": "2609640",
    "end": "2616079"
  },
  {
    "text": "table or not um another one it Compares two strings to see if they're uh if",
    "start": "2616079",
    "end": "2621240"
  },
  {
    "text": "they're equal to each other that went one that's what we want to do when we're loading fonts to see if a font has already been",
    "start": "2621240",
    "end": "2626880"
  },
  {
    "text": "loaded um and uh then the next few sections are just the things that that",
    "start": "2626880",
    "end": "2632240"
  },
  {
    "text": "are used to to initialize the strings uh one point I could point to show you at",
    "start": "2632240",
    "end": "2638200"
  },
  {
    "text": "the page 2 see page 21 module 51 says I can't read Tech pool uh you notice that",
    "start": "2638200",
    "end": "2645319"
  },
  {
    "text": "that's not uh that's a pascal string it has single quotes around it not double",
    "start": "2645319",
    "end": "2651200"
  },
  {
    "text": "quotes you can see why because we couldn't read the string pool so we have to use Pascal strings there well now in",
    "start": "2651200",
    "end": "2658240"
  },
  {
    "text": "Pascal you can't call a uh you can't use strings um as a as an argument to a",
    "start": "2658240",
    "end": "2665040"
  },
  {
    "text": "function uh unless they're all there a certain length that uh so uh you might",
    "start": "2665040",
    "end": "2670960"
  },
  {
    "text": "wonder how I could do this well that's because bad pool of course is a macro uh it's defined up up above there and it",
    "start": "2670960",
    "end": "2677400"
  },
  {
    "text": "writes this string uh and so again having macros was we were able to get around one of the deficiencies of Pascal",
    "start": "2677400",
    "end": "2685400"
  },
  {
    "text": "um and it um it writes an error message saying I can't read",
    "start": "2685400",
    "end": "2690760"
  },
  {
    "text": "techpool um and uh dies uh it returns false to the uh to the procedure itself",
    "start": "2690760",
    "end": "2697880"
  },
  {
    "text": "so that the uh environment will give you another error message um there there's",
    "start": "2697880",
    "end": "2703720"
  },
  {
    "text": "so these messages you have to increase pool size depending on string vacancies and so on are all done in this case and",
    "start": "2703720",
    "end": "2709800"
  },
  {
    "text": "it also syntax checks the pool file to see if it uh if it's been clabbered or",
    "start": "2709800",
    "end": "2715480"
  },
  {
    "text": "not okay um any questions on that I don't see yeah uh please um use",
    "start": "2715480",
    "end": "2724400"
  },
  {
    "text": "the mic can a can a string begin with a con can",
    "start": "2724400",
    "end": "2730960"
  },
  {
    "text": "a what a string begin with a con a string begin with a constant a string uh",
    "start": "2730960",
    "end": "2736800"
  },
  {
    "text": "begins with a double quote and ends with a double quote and anything goes in",
    "start": "2736800",
    "end": "2742200"
  },
  {
    "text": "between well I yeah it's okay anything goes in",
    "start": "2742640",
    "end": "2748760"
  },
  {
    "text": "between right so um so any any text whatsoever if you",
    "start": "2748760",
    "end": "2756000"
  },
  {
    "text": "have double quotes in side you you have to to uh have have quadruple quotes you",
    "start": "2756000",
    "end": "2761319"
  },
  {
    "text": "have to double them again so that uh uh a double quote inside of a string gets",
    "start": "2761319",
    "end": "2767920"
  },
  {
    "text": "gets doubled in question there you said that the string pool is used for macron",
    "start": "2767920",
    "end": "2773040"
  },
  {
    "text": "names therefore there is no garbage collection if you redefine macron names uh there's no if it turns out in Tech",
    "start": "2773040",
    "end": "2779079"
  },
  {
    "text": "that you redefine a a uh if you define a control sequence undefine a control",
    "start": "2779079",
    "end": "2785160"
  },
  {
    "text": "sequence this happens only at the end of a group then it's it's very difficult to to tell whether that control sequence is really",
    "start": "2785160",
    "end": "2792200"
  },
  {
    "text": "not going to be used again because another control sequence might have used it and been declared Global and so in",
    "start": "2792200",
    "end": "2798640"
  },
  {
    "text": "order to so there is no garbage collection uh the the number of times that that would actually have saved",
    "start": "2798640",
    "end": "2804680"
  },
  {
    "text": "memory was much uh uh was actually less than the amount of memory we would have saved by not having the code for garbage",
    "start": "2804680",
    "end": "2810920"
  },
  {
    "text": "collection so so uh this is why there's no garbage collection okay um",
    "start": "2810920",
    "end": "2818440"
  },
  {
    "text": "so the next section talks about online and offline Printing and here's where we get to use the string pool uh to just",
    "start": "2818440",
    "end": "2824480"
  },
  {
    "text": "print messages and so um the um uh I'll talk a little bit about the",
    "start": "2824480",
    "end": "2830599"
  },
  {
    "text": "printing routines um these again are very basic to the whole process I think these are the ones",
    "start": "2830599",
    "end": "2836960"
  },
  {
    "text": "that actually get declared first there's a procedure called initialized and then there's a procedure then the basic printing procedures and they start in",
    "start": "2836960",
    "end": "2844079"
  },
  {
    "text": "module 56 um the first one is a print print line procedure now the interesting thing",
    "start": "2844079",
    "end": "2852119"
  },
  {
    "text": "here is that the printing procedure there's a destination for printing so that when my program says print it might",
    "start": "2852119",
    "end": "2859440"
  },
  {
    "text": "write on the terminal it might write on the uh on the the the errors transcript file that you get after you run Tech it",
    "start": "2859440",
    "end": "2866839"
  },
  {
    "text": "might do both it might be writing on one of the send files it might be uh writing",
    "start": "2866839",
    "end": "2872040"
  },
  {
    "text": "into the string pool itself and uh so you can change the destination",
    "start": "2872040",
    "end": "2877559"
  },
  {
    "text": "so that all so that all you need is a few print procedures and whenever you say print integer that'll send an",
    "start": "2877559",
    "end": "2882720"
  },
  {
    "text": "integer to the proper destination but that destination might uh be a variety",
    "start": "2882720",
    "end": "2888160"
  },
  {
    "text": "of different things uh you still don't need a different sub rutine for each one okay so by switching the destination",
    "start": "2888160",
    "end": "2894000"
  },
  {
    "text": "we're a we're able to get by with just a few you know all our procedures are called print but what actually happens to it one of the destinations is no",
    "start": "2894000",
    "end": "2901040"
  },
  {
    "text": "print which means it just disappears okay there's one called Pudo which is",
    "start": "2901040",
    "end": "2906319"
  },
  {
    "text": "number 20 these are all defined on page 22 module 54 this one called pseudo",
    "start": "2906319",
    "end": "2912800"
  },
  {
    "text": "which is um used um in a interesting way for showing the the context of your",
    "start": "2912800",
    "end": "2918599"
  },
  {
    "text": "error lines um you know when you get an error message from Tech it tries to show you where it was and it gives a two-line",
    "start": "2918599",
    "end": "2924839"
  },
  {
    "text": "indication of this the first line shows the characters Tech has read so far second line shows the things it hasn't",
    "start": "2924839",
    "end": "2930920"
  },
  {
    "text": "uh even seen yet and uh this might be in the middle of a huge macro definition",
    "start": "2930920",
    "end": "2936400"
  },
  {
    "text": "for examp example and so the macro might be uh 100,000 bytes long uh when it",
    "start": "2936400",
    "end": "2944480"
  },
  {
    "text": "expands or very long anyway um now um",
    "start": "2944480",
    "end": "2950359"
  },
  {
    "text": "because when we're expanding it we're expanding all the control sequence names out to their full length and so on um",
    "start": "2950359",
    "end": "2956839"
  },
  {
    "text": "now we don't want to have a special buffer that expands out 100,000 bytes and then and then shows the 60 that",
    "start": "2956839",
    "end": "2962640"
  },
  {
    "text": "we're actually interested in so instead we keep a buffer of size 60 and we go",
    "start": "2962640",
    "end": "2967680"
  },
  {
    "text": "circularly around and around in this buffer that's what pseudo printing is and then when it stops it has enough",
    "start": "2967680",
    "end": "2973599"
  },
  {
    "text": "information um to just print out the the characters you needed in the environment the buffer is a little more than 60 but",
    "start": "2973599",
    "end": "2979680"
  },
  {
    "text": "but it's just a you know small amount so this is a a method so sudo printing is turned on when you're just when you uh",
    "start": "2979680",
    "end": "2986520"
  },
  {
    "text": "have a a little bit of of uh when you're using this trick of um uh when you're",
    "start": "2986520",
    "end": "2992400"
  },
  {
    "text": "going to run you're going to print a whole bunch of stuff and then you're only going to select a little bit out of it and and uh what you do is you turn",
    "start": "2992400",
    "end": "2998200"
  },
  {
    "text": "off storing into the buffer after you've gotten past your your key point so so",
    "start": "2998200",
    "end": "3003319"
  },
  {
    "text": "let's say the buffer is of length 60 and uh the transition between line one and line two occurs at a certain point at",
    "start": "3003319",
    "end": "3009720"
  },
  {
    "text": "this time you're going to you're going to write at most uh 30 or 40 more characters before you quit and then",
    "start": "3009720",
    "end": "3016480"
  },
  {
    "text": "you're going to shut off printing so that's the pseudo thing which is explained um elsewhere now now that's so",
    "start": "3016480",
    "end": "3023520"
  },
  {
    "text": "so by having these print procedures we can uh but they're all called print and um",
    "start": "3023520",
    "end": "3029520"
  },
  {
    "text": "many it's one of the most frequently used things in Tech we'll say print an integer and this automatically does",
    "start": "3029520",
    "end": "3035359"
  },
  {
    "text": "binary decimal conversion and uh but you can send the integer anywhere you want like to a string so if somebody wants to",
    "start": "3035359",
    "end": "3041160"
  },
  {
    "text": "see a string uh uh but stored as a string you can do that by setting the selector to new string and then you get",
    "start": "3041160",
    "end": "3047520"
  },
  {
    "text": "a new string into the string pool so this is a another turned out to be another advantage of having the data",
    "start": "3047520",
    "end": "3053319"
  },
  {
    "text": "structures organized this way instead of have instead of making use of of a particular um string feature that might",
    "start": "3053319",
    "end": "3059760"
  },
  {
    "text": "have been in in in Pascal um so what I guess I'm saying is that uh that by",
    "start": "3059760",
    "end": "3066040"
  },
  {
    "text": "programming my strings um uh homemade I uh have much",
    "start": "3066040",
    "end": "3072280"
  },
  {
    "text": "more uh I had more flexibility on what I could do with them uh in an efficient way I didn't have to to worry I didn't",
    "start": "3072280",
    "end": "3079359"
  },
  {
    "text": "have to uh um uh consider uh very inefficient um but highly General",
    "start": "3079359",
    "end": "3086119"
  },
  {
    "text": "methods that a some system programmer would put in for a string package um that would have a lot of overhead take a",
    "start": "3086119",
    "end": "3092760"
  },
  {
    "text": "lot more memory space besides making the program a lot more portable um and and U",
    "start": "3092760",
    "end": "3098760"
  },
  {
    "text": "not really longer so so this homebaked approach to Strings uh has not been uh",
    "start": "3098760",
    "end": "3104440"
  },
  {
    "text": "it turned out this we one of the first things I've struggled with using Pascal turned out afterwards was a blessing in",
    "start": "3104440",
    "end": "3110760"
  },
  {
    "text": "the sky um the print procedure on page 24",
    "start": "3110760",
    "end": "3117799"
  },
  {
    "text": "module 58 is the thing that we use to print out a string and so just to reinforce what we what I've said this",
    "start": "3117799",
    "end": "3124319"
  },
  {
    "text": "hour I'm getting near the end of the hour let's just look at that print procedure and see well this is this is",
    "start": "3124319",
    "end": "3130040"
  },
  {
    "text": "um um uh so simple it doesn't even call",
    "start": "3130040",
    "end": "3135559"
  },
  {
    "text": "anything else but just it should reinforce what we're talking about so procedure print s is integer print",
    "start": "3135559",
    "end": "3141359"
  },
  {
    "text": "string s now this is something I changed last week as I was debugging s used to be called type",
    "start": "3141359",
    "end": "3148079"
  },
  {
    "text": "um uh stir number like print new line S is a stir number and this is print",
    "start": "3148079",
    "end": "3155040"
  },
  {
    "text": "string at the beginning of a line um it's the same as print except for the",
    "start": "3155040",
    "end": "3160240"
  },
  {
    "text": "making sure that it goes at the beginning of a line but but here I said s could be any integer anybody have an",
    "start": "3160240",
    "end": "3165280"
  },
  {
    "text": "idea why that why I had to make that change why I decided to make that change uh the reason is that while I'm",
    "start": "3165280",
    "end": "3170680"
  },
  {
    "text": "debugging um I have made my debugging routines extremely robust so that if you",
    "start": "3170680",
    "end": "3175720"
  },
  {
    "text": "if memory has got completely clobbered is still allowed to look at any location in memory and say if this is a pointer",
    "start": "3175720",
    "end": "3182200"
  },
  {
    "text": "to a string print it and U so it should be a it should give uh uh and and if memory did get",
    "start": "3182200",
    "end": "3190280"
  },
  {
    "text": "clobbered then at least I would have some uh my symbolic indication would part of it would make sense and the",
    "start": "3190280",
    "end": "3196359"
  },
  {
    "text": "clobber part would would would would be there but it wouldn't uh the program wouldn't die on me well if I didn't say",
    "start": "3196359",
    "end": "3202000"
  },
  {
    "text": "this was an integer Pascal would stop me saying that parameter to print is not in the in the range of a of a string number",
    "start": "3202000",
    "end": "3210359"
  },
  {
    "text": "uh so I change this to an integer and then we have a test inside the program that says if s is less than Z or greater",
    "start": "3210359",
    "end": "3217799"
  },
  {
    "text": "than or equal string pointer then set s to zero this can't happen Well it can't",
    "start": "3217799",
    "end": "3223040"
  },
  {
    "text": "happen unless a bug is is present of course nothing everything can happen in a computer if if there's a bug um and I",
    "start": "3223040",
    "end": "3231599"
  },
  {
    "text": "don't call an error message if s is less than Z or S is greater than zero remember I said before print programs",
    "start": "3231599",
    "end": "3237680"
  },
  {
    "text": "aren't supposed to aren't supposed to call error messages um otherwise error would call print and print would call",
    "start": "3237680",
    "end": "3243520"
  },
  {
    "text": "error and you and you go on and on forever um so it just sets s to zero",
    "start": "3243520",
    "end": "3249040"
  },
  {
    "text": "which is going to print out a very unusual string one that you string number zero is this up Arrow up Arrow at",
    "start": "3249040",
    "end": "3256240"
  },
  {
    "text": "sign when you see that uh that's a good error message enough um okay so then J",
    "start": "3256240",
    "end": "3262240"
  },
  {
    "text": "is set to stir start of s that's where that's J is now of type pool pointer it",
    "start": "3262240",
    "end": "3268000"
  },
  {
    "text": "means it's an index into the buffer um and uh uh I'm I'm assuming",
    "start": "3268000",
    "end": "3275240"
  },
  {
    "text": "that stir start is not cled but but the S itself might have been cled now while J is less than the string",
    "start": "3275240",
    "end": "3282839"
  },
  {
    "text": "start of the next string s+ one that's always defined when string s is less than string pointer and greater than",
    "start": "3282839",
    "end": "3289760"
  },
  {
    "text": "zero then the stir start s+1 is defined that's where the next one starts so while J is less than that I print Char",
    "start": "3289760",
    "end": "3297599"
  },
  {
    "text": "string pool J print Char is the lower level procedure that just takes the",
    "start": "3297599",
    "end": "3303839"
  },
  {
    "text": "character right out of the buffer and U sends it out to Pascal increase J and",
    "start": "3303839",
    "end": "3310880"
  },
  {
    "text": "continue that that prints the things so that's why I that's the print Char procedure doesn't look for string number",
    "start": "3310880",
    "end": "3319319"
  },
  {
    "text": "uh you know print Char 65 doesn't look for string number 65 print Char Prince Char that's text internal character code",
    "start": "3319319",
    "end": "3327240"
  },
  {
    "text": "65 um and so the the uh stir poool entries must all be printable characters",
    "start": "3327240",
    "end": "3334200"
  },
  {
    "text": "let's look at print Char all of the print procedure I said you could change the destination every print procedure",
    "start": "3334200",
    "end": "3340760"
  },
  {
    "text": "Works through print print line and print Char these are and and they all reduce",
    "start": "3340760",
    "end": "3346359"
  },
  {
    "text": "to these so these are the only two that look at the selector that look that look at the at the at the print selector and",
    "start": "3346359",
    "end": "3351880"
  },
  {
    "text": "do and so you could if you want to deflect it you just deflect it in these two places and print Char takes an asky code as a",
    "start": "3351880",
    "end": "3359200"
  },
  {
    "text": "parameter and um and so for example let's suppose we're writing on the terminal only that would be termon case",
    "start": "3359200",
    "end": "3366799"
  },
  {
    "text": "and it would say write term out exture of C now exture is the array that is set",
    "start": "3366799",
    "end": "3373960"
  },
  {
    "text": "up to convert from text internal code toep epic or whatever and that's where",
    "start": "3373960",
    "end": "3382319"
  },
  {
    "text": "you want to make system dependent changes so let's look at where xture is set up that's um starts on page 10 in a",
    "start": "3382319",
    "end": "3390280"
  },
  {
    "text": "section called the character set um and the things I mentioned about",
    "start": "3390280",
    "end": "3396079"
  },
  {
    "text": "character set are discussed there on page 10 on page 11 you see where exture is set up a whole bunch of assignment",
    "start": "3396079",
    "end": "3401720"
  },
  {
    "text": "statements these are supposedly not system dependent if we assume that your",
    "start": "3401720",
    "end": "3407400"
  },
  {
    "text": "Pascal can read any of the visible asy codes then you don't need any changes",
    "start": "3407400",
    "end": "3413160"
  },
  {
    "text": "here otherwise you do but this these assignments St ments will set extra of octal 40 to uh the the the character",
    "start": "3413160",
    "end": "3422039"
  },
  {
    "text": "blank and so on and many many uh implementations of Pascal will then set exture properly by this by by these",
    "start": "3422039",
    "end": "3429599"
  },
  {
    "text": "statements it and it um then on the other on the other codes less than octal",
    "start": "3429599",
    "end": "3434720"
  },
  {
    "text": "40 um uh that's explained on the next page on page 12 um and there's a uh and",
    "start": "3434720",
    "end": "3442680"
  },
  {
    "text": "the standard version of tech that hasn't been modified in module 23 The Standard",
    "start": "3442680",
    "end": "3447720"
  },
  {
    "text": "Version uh down here uh is uh says just blank it out said said all these other",
    "start": "3447720",
    "end": "3454160"
  },
  {
    "text": "characters that you don't expect to find on the input uh to blank and then uh you",
    "start": "3454160",
    "end": "3459359"
  },
  {
    "text": "know if you want the output them they'll output is blanks also but at MIT I suggested that you could just set them",
    "start": "3459359",
    "end": "3464559"
  },
  {
    "text": "all to the character itself because um text internal code agrees with this MIT",
    "start": "3464559",
    "end": "3471599"
  },
  {
    "text": "code um so that's a system dependent change that uh uh uh of course uh would",
    "start": "3471599",
    "end": "3479799"
  },
  {
    "text": "have to be made if you want to do something special with the codes under 40 however most installations won't have",
    "start": "3479799",
    "end": "3486359"
  },
  {
    "text": "to do anything with those I I I guess all right that's all except if there are",
    "start": "3486359",
    "end": "3492160"
  },
  {
    "text": "questions any more question I can offer you attempting lunch uh if you don't ask me any",
    "start": "3492160",
    "end": "3499440"
  },
  {
    "text": "questions okay good that that worked so we'll meet again here at 2 what is it",
    "start": "3499440",
    "end": "3506760"
  },
  {
    "text": "2:00 uh sharp",
    "start": "3506760",
    "end": "3511520"
  },
  {
    "text": "thanks",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e",
    "start": "3565039",
    "end": "3568039"
  },
  {
    "text": "e",
    "start": "3595039",
    "end": "3598039"
  },
  {
    "text": "e",
    "start": "3624960",
    "end": "3627960"
  },
  {
    "text": "e",
    "start": "3654920",
    "end": "3657920"
  },
  {
    "text": "e for",
    "start": "3684920",
    "end": "3688920"
  }
]