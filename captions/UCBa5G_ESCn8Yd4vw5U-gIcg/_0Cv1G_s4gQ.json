[
  {
    "start": "0",
    "end": "83000"
  },
  {
    "text": "for",
    "start": "0",
    "end": "3000"
  },
  {
    "text": "is the the section of the tech uh 82 listing is SEC is part 20 starting in",
    "start": "30759",
    "end": "36920"
  },
  {
    "text": "section 456 page 158 on your copies",
    "start": "36920",
    "end": "44239"
  },
  {
    "text": "um the uh uh important thing the important thing to understand here is is",
    "start": "45160",
    "end": "51280"
  },
  {
    "text": "what kind of files Tech uses in order to get all the information it needs about",
    "start": "51280",
    "end": "57920"
  },
  {
    "text": "fonts and these are called TFM files uh Tech font metric",
    "start": "57920",
    "end": "63799"
  },
  {
    "text": "files and uh they are used not only by Tech but by other system programs and",
    "start": "63799",
    "end": "69320"
  },
  {
    "text": "the design was intended uh oops to make them to make it a a compact way to to uh",
    "start": "69320",
    "end": "77240"
  },
  {
    "text": "communicate lots of information",
    "start": "77240",
    "end": "83600"
  },
  {
    "start": "83000",
    "end": "270000"
  },
  {
    "text": "um these were designed by La ramshaw who's sitting here in the audience today and so he's going to to be bored",
    "start": "83600",
    "end": "90479"
  },
  {
    "text": "by this by this hour but he can also correct me in case I make mistakes um and so a TFM",
    "start": "90479",
    "end": "99159"
  },
  {
    "text": "file um consists of a long string of",
    "start": "99159",
    "end": "105840"
  },
  {
    "text": "8bit bytes when we send you a TFM",
    "start": "105840",
    "end": "112200"
  },
  {
    "text": "file um we found that the easiest way to do it so that nobody could could get",
    "start": "112200",
    "end": "117360"
  },
  {
    "text": "confused by this is by sending these bytes in decimal with spaces between",
    "start": "117360",
    "end": "123119"
  },
  {
    "text": "them so that the bytes would say zero space 255 space or whatever in decimal",
    "start": "123119",
    "end": "129840"
  },
  {
    "text": "everybody has been able to read those kinds of files then you can then there's a um a two or three line program in",
    "start": "129840",
    "end": "137480"
  },
  {
    "text": "Fortran or something which will convert those into whatever your local conventions are for files that are made",
    "start": "137480",
    "end": "144879"
  },
  {
    "text": "out of 8bit bytes uh packed file of 8bit bytes but this is uh uh but that seems",
    "start": "144879",
    "end": "150640"
  },
  {
    "text": "to vary greatly between systems as far as Tech is concerned it just calls it a bite file which means a packed file of 8",
    "start": "150640",
    "end": "158000"
  },
  {
    "text": "bit uh and 8 Bits is a is are numbers between 0 and",
    "start": "158000",
    "end": "163200"
  },
  {
    "text": "255 um and uh it has to be 0 to 255 notus 128 to plus",
    "start": "163200",
    "end": "170480"
  },
  {
    "text": "127 uh when we when we conf when we uh uh refer to something from the bite file",
    "start": "170480",
    "end": "176720"
  },
  {
    "text": "we're going to get the next bite from it and it's got to be a number between 0 and 255 you have to do something to make",
    "start": "176720",
    "end": "182560"
  },
  {
    "text": "sure that that that assumption is valid but that's the only assumption we make about bike files",
    "start": "182560",
    "end": "189000"
  },
  {
    "text": "um now actually um you could also consider it as as 32-bit words because",
    "start": "189000",
    "end": "195840"
  },
  {
    "text": "the number of uh bytes in the file is always a multiple of four and we always",
    "start": "195840",
    "end": "202239"
  },
  {
    "text": "read and we always read them uh almost always read them four bytes at a time it's only at the beginning when we read",
    "start": "202239",
    "end": "208480"
  },
  {
    "text": "them two bytes at a time and uh uh so if it's if you wanted to",
    "start": "208480",
    "end": "214200"
  },
  {
    "text": "you could you could imagine it as uh consisting of these words but um all of",
    "start": "214200",
    "end": "220120"
  },
  {
    "text": "the but for Tech purposes it was more it was it was better to uh uh stick to",
    "start": "220120",
    "end": "225920"
  },
  {
    "text": "smaller number of file types if possible so we so Tech has Alpha files bite files",
    "start": "225920",
    "end": "232319"
  },
  {
    "text": "and Word files uh we needed those three anyway didn't want to go to a fourth one",
    "start": "232319",
    "end": "237720"
  },
  {
    "text": "which was made out of um 30 2 bit words TFM file let's think of it as bytes but",
    "start": "237720",
    "end": "243000"
  },
  {
    "text": "four bytes to a word so I'm going to draw my lines here indicating uh four",
    "start": "243000",
    "end": "248959"
  },
  {
    "text": "bytes um four bytes and I'm going to consider that the the bytes are left to",
    "start": "248959",
    "end": "254040"
  },
  {
    "text": "right located in a word so Zero by zero the file by one by two by three and so",
    "start": "254040",
    "end": "260959"
  },
  {
    "text": "on um this is uh what L calls big Indian order where the big end is that right uh",
    "start": "260959",
    "end": "269160"
  },
  {
    "text": "you noted your head this way um it it's called the big endian order but I didn't invent the term Dan",
    "start": "269160",
    "end": "275520"
  },
  {
    "start": "270000",
    "end": "357000"
  },
  {
    "text": "Cohen of isi invented the term in a very amusing essay about uh bite order inside of words oh okay CU they they go in",
    "start": "275520",
    "end": "283280"
  },
  {
    "text": "different in in different ways and uh um and that's why we we transmit them as",
    "start": "283280",
    "end": "288720"
  },
  {
    "text": "bites uh uh this way but I'm going to represent them in uh on the board assuming that this is your first bite",
    "start": "288720",
    "end": "295000"
  },
  {
    "text": "second bite third bite fourth bite that's just a a convention for the way I the way I write",
    "start": "295000",
    "end": "301240"
  },
  {
    "text": "right and now that the um the first part of the file is six words long so it's",
    "start": "301240",
    "end": "308000"
  },
  {
    "text": "always fixed and it tells you how big the rest of the file is um and uh it has",
    "start": "308000",
    "end": "313919"
  },
  {
    "text": "12 halfword in it uh 12 16bit integers um that",
    "start": "313919",
    "end": "321000"
  },
  {
    "text": "are uh composed of the first by * 256 plus the second",
    "start": "321000",
    "end": "327800"
  },
  {
    "text": "bite that's the big end in order there so um uh this is the uh uh uh the length",
    "start": "327800",
    "end": "336039"
  },
  {
    "text": "and uh we got a whole bunch of these things are all described in module 457 I'll just read them to you so you get",
    "start": "336039",
    "end": "342520"
  },
  {
    "text": "the feeling of it the first comes the length of the entire file in words uh so uh the length of the header",
    "start": "342520",
    "end": "350560"
  },
  {
    "text": "data um so that rest is the next the next parts of the file there's the",
    "start": "350560",
    "end": "357680"
  },
  {
    "text": "header and then there's the Char info",
    "start": "358280",
    "end": "363919"
  },
  {
    "text": "um let me try to do it from memory and then I can correct it afterward this will be more fun for me I don't it' be",
    "start": "363919",
    "end": "369960"
  },
  {
    "text": "confusing for you if I get it wrong but let's hope I get it right then comes the",
    "start": "369960",
    "end": "375719"
  },
  {
    "text": "width then comes the",
    "start": "375759",
    "end": "379720"
  },
  {
    "text": "heights um then comes the depth and comes the italic Corrections",
    "start": "381000",
    "end": "390880"
  },
  {
    "text": "then comes um the uh ligature current",
    "start": "393800",
    "end": "399360"
  },
  {
    "text": "instructions then comes uh plan ahead here got to get then",
    "start": "404639",
    "end": "410560"
  },
  {
    "text": "come the curs and then come the extensible",
    "start": "410560",
    "end": "416400"
  },
  {
    "text": "characters",
    "start": "416400",
    "end": "419400"
  },
  {
    "text": "and finally the parameters that's all just made",
    "start": "421720",
    "end": "428840"
  },
  {
    "text": "it now did I get it right wow okay curs",
    "start": "430840",
    "end": "438160"
  },
  {
    "text": "yeah now so uh start out length of the",
    "start": "438160",
    "end": "443560"
  },
  {
    "text": "file then the length of the header part then it then the next two uh half wordss",
    "start": "443560",
    "end": "448960"
  },
  {
    "text": "here are the beginning character and ending character of the font and uh characters don't have to be consecutive",
    "start": "448960",
    "end": "455199"
  },
  {
    "text": "inside there's another way to indicate gaps inside but uh but uh this is uh more efficient if we can if if you",
    "start": "455199",
    "end": "463639"
  },
  {
    "text": "don't have two characters in the font one of which is number zero and the other is which 255 because then we have",
    "start": "463639",
    "end": "469080"
  },
  {
    "text": "more space in here the the Char info gives charact give starts at BC and ends",
    "start": "469080",
    "end": "474479"
  },
  {
    "text": "at EC um and so if you so uh there will be",
    "start": "474479",
    "end": "480800"
  },
  {
    "text": "zeros in here um for for missing characters but uh the fewer those are",
    "start": "480800",
    "end": "486440"
  },
  {
    "text": "the fewer words of char info you need Char info is packed uh as I'll describe",
    "start": "486440",
    "end": "491840"
  },
  {
    "text": "later giving uh for each character in the font uh uh uh information about its",
    "start": "491840",
    "end": "499360"
  },
  {
    "text": "actual width height depth and italic uh those pieces of information are indirect",
    "start": "499360",
    "end": "504879"
  },
  {
    "text": "pointers to the width height depth and metallic correction parts of the uh",
    "start": "504879",
    "end": "510319"
  },
  {
    "text": "format file that come next so um Char info follows here then",
    "start": "510319",
    "end": "517839"
  },
  {
    "text": "you specify the the number of widths the number of heights the number of depths",
    "start": "517839",
    "end": "524080"
  },
  {
    "text": "the number of metallic Corrections the length of your number of commands you have of",
    "start": "524080",
    "end": "529720"
  },
  {
    "text": "ligature currs the number of currents the number of extension Parts the number of parameters so this first part just",
    "start": "529720",
    "end": "535880"
  },
  {
    "text": "gives the length of all those and there's a a formula that has to be satisfied that that the length of the file has to be six plus length of the",
    "start": "535880",
    "end": "543079"
  },
  {
    "text": "header plus uh you know and so on that that has to be checked and uh so you'll",
    "start": "543079",
    "end": "548480"
  },
  {
    "text": "know Uh something's wrong if that equation doesn't uh doesn't work out",
    "start": "548480",
    "end": "553680"
  },
  {
    "text": "correctly now beginning character and ending character are supposed",
    "start": "553680",
    "end": "559040"
  },
  {
    "text": "to um satisfy the relation BC -1 less",
    "start": "559040",
    "end": "564880"
  },
  {
    "text": "than or equal EC less than or equal 255 inside of Tech",
    "start": "564880",
    "end": "571600"
  },
  {
    "text": "82 um I'm not saying that BC has to be less than or equal EC you could have beginning character equals uh one and",
    "start": "571600",
    "end": "578800"
  },
  {
    "text": "ending character equals zero that's the empty font it's not uh a particularly",
    "start": "578800",
    "end": "584040"
  },
  {
    "text": "interesting font but uh uh I just put I just made sure that it would be legal",
    "start": "584040",
    "end": "589760"
  },
  {
    "text": "because U history of mathematics indicated that it was useful to have zero around and so sometimes um a person",
    "start": "589760",
    "end": "597839"
  },
  {
    "text": "might want to be able to input n font",
    "start": "597839",
    "end": "603560"
  },
  {
    "text": "um uh does uh BC minus one really have to be greater than equals zero I believe",
    "start": "603560",
    "end": "609920"
  },
  {
    "text": "so what happens if BC is zero no you're right BC just has to be",
    "start": "609920",
    "end": "617000"
  },
  {
    "text": "greater than equal zero sorry yeah excuse me and I and I that's all I said to in",
    "start": "617000",
    "end": "624640"
  },
  {
    "start": "620000",
    "end": "830000"
  },
  {
    "text": "in that section now the definition of U font metric data not only is in this section C but it's also in the other",
    "start": "624640",
    "end": "630640"
  },
  {
    "text": "handout that you have called techware and there program in there called uh TF",
    "start": "630640",
    "end": "637040"
  },
  {
    "text": "topl is the uh is the uh I believe it's got starts at page 200 and one it's the",
    "start": "637040",
    "end": "644600"
  },
  {
    "text": "second program in the in the book they it jumps from page 110 to page 2011 tfpl",
    "start": "644600",
    "end": "651760"
  },
  {
    "text": "contains a separate description of uh you know just copied out of tech of this",
    "start": "651760",
    "end": "657519"
  },
  {
    "text": "of these fonts again it's it's reproduced there but with a slight more generality because this is in intended",
    "start": "657519",
    "end": "664480"
  },
  {
    "text": "for also for processors that are a little more uh General in Tech and uh so",
    "start": "664480",
    "end": "670240"
  },
  {
    "text": "there will be a comment in um in that section that's not in the tech manual if",
    "start": "670240",
    "end": "675920"
  },
  {
    "text": "you look at module 8 of tf2pl it'll say um exception to these rules is planned",
    "start": "675920",
    "end": "681279"
  },
  {
    "text": "for Oriental fonts which will be identified by the condition ecal",
    "start": "681279",
    "end": "686760"
  },
  {
    "text": "256 we're planning to say that if e is 256 then we're going to um um uh do",
    "start": "686760",
    "end": "696279"
  },
  {
    "text": "something special in in extension of tech well say something about that uh that plan",
    "start": "696279",
    "end": "703240"
  },
  {
    "text": "um in the saving thing about Oriental characters like Japanese or Chinese is",
    "start": "703240",
    "end": "709240"
  },
  {
    "text": "that they uh don't have that many different widths Heights and depths they're in fact they're almost always",
    "start": "709240",
    "end": "714959"
  },
  {
    "text": "the same um the they have lots and lots of different uh uh um different shapes",
    "start": "714959",
    "end": "721839"
  },
  {
    "text": "of characters but only a few wids Heights and depths so inside of tech we",
    "start": "721839",
    "end": "727320"
  },
  {
    "text": "would represent those as a character code first of all that tells what its",
    "start": "727320",
    "end": "732440"
  },
  {
    "text": "width height and depth is and then we would have another bit another thing after it uh uh 16 bits that tells",
    "start": "732440",
    "end": "740320"
  },
  {
    "text": "exactly what glyph it is in the font um and uh by looking by looking for",
    "start": "740320",
    "end": "747680"
  },
  {
    "text": "a font that has some that has EC equal 256 we Tech in such an extension would",
    "start": "747680",
    "end": "753399"
  },
  {
    "text": "know to look for a a glyph code besides to figure out what charact what the actual character is but the first part",
    "start": "753399",
    "end": "760440"
  },
  {
    "text": "of it would be treated just as usual by Tech to figure out this the width height and depth so the character the different",
    "start": "760440",
    "end": "765880"
  },
  {
    "text": "widths Heights and depths would be um described in the in the ordinary way",
    "start": "765880",
    "end": "771160"
  },
  {
    "text": "okay well uh that's uh uh uh something that we would then uh",
    "start": "771160",
    "end": "779639"
  },
  {
    "text": "then I think we were going to say character 256 would maybe refer to would represent all of the other ones or",
    "start": "779639",
    "end": "785720"
  },
  {
    "text": "something like that that there's no large proposal worked out I just wanted",
    "start": "785720",
    "end": "791000"
  },
  {
    "text": "to make sure that this kind of thing would would be easy to graft in uh",
    "start": "791000",
    "end": "796040"
  },
  {
    "text": "without much difficulty okay now um inside of these Char info parts we",
    "start": "796040",
    "end": "803279"
  },
  {
    "text": "have the we have the the highly compressed data uh which makes it",
    "start": "803279",
    "end": "808639"
  },
  {
    "text": "possible to to do this most most of the time the rest of this uh uh these tables are also going to be fairly",
    "start": "808639",
    "end": "816680"
  },
  {
    "text": "short um in fact uh well we can find out how how big these files are I suppose",
    "start": "816720",
    "end": "822560"
  },
  {
    "text": "let me let me just uh type something here so I can",
    "start": "822560",
    "end": "828839"
  },
  {
    "text": "uh let me see U uh I'm not going to be doing anything",
    "start": "828839",
    "end": "834079"
  },
  {
    "start": "830000",
    "end": "880000"
  },
  {
    "text": "real interesting so you don't have to see it yourself but U but if you want if you want to we could switch over to the",
    "start": "834079",
    "end": "840720"
  },
  {
    "text": "computer now for just to test it out L can you can you dim the house lights now",
    "start": "840720",
    "end": "846040"
  },
  {
    "text": "and go to the computer uh terminal and see see if we can get anything here I'm going to try cmr1 ttfm on our on texis",
    "start": "846040",
    "end": "855440"
  },
  {
    "text": "and type it out in octal just to see what uh see how long it",
    "start": "855440",
    "end": "862320"
  },
  {
    "text": "is um let's see can anybody you see any now",
    "start": "864240",
    "end": "871279"
  },
  {
    "text": "this is the beginning of the file you see those uh uh those that Header information appearing in the first six",
    "start": "871279",
    "end": "877160"
  },
  {
    "text": "word can you see it no yeah they'd like to see the computer",
    "start": "877160",
    "end": "884600"
  },
  {
    "start": "880000",
    "end": "1020000"
  },
  {
    "text": "screen is that connected",
    "start": "884600",
    "end": "890800"
  },
  {
    "text": "ah okay see what a Dreadful thing if you",
    "start": "890800",
    "end": "897279"
  },
  {
    "text": "have to watch me all the time I I can't stand to look at mirrors not so this is the beginning you see the the the length",
    "start": "897279",
    "end": "903560"
  },
  {
    "text": "of the file in words is 215 octo um uh no no wait a minute we got to be",
    "start": "903560",
    "end": "910600"
  },
  {
    "text": "careful cuz these are 36-bit words and they're shifted left so what what is that",
    "start": "910600",
    "end": "915839"
  },
  {
    "text": "really uh 0215 now let's see that's 3 6 9 12 15",
    "start": "915839",
    "end": "923079"
  },
  {
    "text": "bits so we need 16 bits um so that'll really be uh one Z",
    "start": "923079",
    "end": "930079"
  },
  {
    "text": "that'll really be 4 4 uh 32 octo which is uh 4 * 64",
    "start": "930079",
    "end": "941040"
  },
  {
    "text": "256 uh 24 more 26 more 256 and 26",
    "start": "941040",
    "end": "947040"
  },
  {
    "text": "282 something like that 282 words so typically we're running between 250 and",
    "start": "947040",
    "end": "952199"
  },
  {
    "text": "300 words for the to for the for the whole um uh TFM file",
    "start": "952199",
    "end": "959440"
  },
  {
    "text": "um you see the next part of the file coming through there this would be uhu um your Char info words for the for this",
    "start": "959680",
    "end": "968199"
  },
  {
    "text": "Roman font um after the header the header the header contains the name in of the font",
    "start": "968199",
    "end": "974800"
  },
  {
    "text": "it'll say computer modern or something like that um and uh Tech pretty much",
    "start": "974800",
    "end": "980759"
  },
  {
    "text": "ignores that uh but then the character info Parts most of these are zero that's",
    "start": "980759",
    "end": "986440"
  },
  {
    "text": "when the um uh the height and depth the depth is zero for example on most of",
    "start": "986440",
    "end": "991680"
  },
  {
    "text": "these characters and the bulk of the information is taken by the Char info table and at the end we're going to get",
    "start": "991680",
    "end": "997519"
  },
  {
    "text": "things where there are more bits on probably and that's when we're getting into the height the actual width data and height",
    "start": "997519",
    "end": "1004959"
  },
  {
    "text": "data but uh it looks like most binary dump files okay so back to the house",
    "start": "1008120",
    "end": "1015360"
  },
  {
    "text": "lights on again then",
    "start": "1015360",
    "end": "1019160"
  },
  {
    "start": "1020000",
    "end": "1345000"
  },
  {
    "text": "it's packed highly condensed and uh so we have the tf2pl program available to",
    "start": "1021319",
    "end": "1027120"
  },
  {
    "text": "print that in symbolic form and we'll we'll take a look at what it prints uh from that binary data in a minute now uh",
    "start": "1027120",
    "end": "1034880"
  },
  {
    "text": "the Char info words are are packed into they have four bytes to them the first",
    "start": "1034880",
    "end": "1040480"
  },
  {
    "text": "bite second bite third bite and fourth bite I guess the zero first second this one is",
    "start": "1040480",
    "end": "1046720"
  },
  {
    "text": "width and it's a point into the width table if the width is",
    "start": "1046720",
    "end": "1052000"
  },
  {
    "text": "zero however this means the character is not there just the condition width equal",
    "start": "1052000",
    "end": "1057080"
  },
  {
    "text": "zero is the is is uh necessary and sufficient as far as Tech is concerned saying don't put it in the DVI file and",
    "start": "1057080",
    "end": "1065000"
  },
  {
    "text": "and give an error message if the user wants to be told about such errors so it's an 8bit pointer um we could handle",
    "start": "1065000",
    "end": "1072360"
  },
  {
    "text": "almost all cases um however if somebody has 256 nonzero widths in his in 256",
    "start": "1072360",
    "end": "1079600"
  },
  {
    "text": "characters in the font then we couldn't have we couldn't handle them all because we only have two we have we have zero is",
    "start": "1079600",
    "end": "1085799"
  },
  {
    "text": "reserved for a flag to to to indicate um um not",
    "start": "1085799",
    "end": "1090840"
  },
  {
    "text": "present the next one height and depth is packed four bits for height and",
    "start": "1090840",
    "end": "1097679"
  },
  {
    "text": "four bits for depth which means that we're only allowing 16 different heights 16 different",
    "start": "1097679",
    "end": "1102960"
  },
  {
    "text": "depths furthermore the first width is zero the first height is zero the first depth is zero first aell direction is",
    "start": "1102960",
    "end": "1109320"
  },
  {
    "text": "zero um uh this is a convention also that we can help to check that we got a",
    "start": "1109320",
    "end": "1115000"
  },
  {
    "text": "TFM file and um well that doesn't really hurt you because you usually want uh uh",
    "start": "1115000",
    "end": "1122240"
  },
  {
    "text": "at least one character that has height zero or or depth zero uh so you're not paying but now so you can't so if you",
    "start": "1122240",
    "end": "1129280"
  },
  {
    "text": "have a font that has more than 16 different heights in it um the program will round to the to the closest uh uh",
    "start": "1129280",
    "end": "1139080"
  },
  {
    "text": "the closest ones that it had it'll take all the heights that are there and it'll pick 16 of them so that the maximum error is as small as",
    "start": "1139080",
    "end": "1145679"
  },
  {
    "text": "possible um that's of no that's of little consolation however if your",
    "start": "1145679",
    "end": "1151400"
  },
  {
    "text": "height is represents the thickness of a of a rule of a square root sign um so so",
    "start": "1151400",
    "end": "1159159"
  },
  {
    "text": "we're careful to design our symbol font so that whenever we have a square root sign um it's it's not going to be in a",
    "start": "1159159",
    "end": "1164720"
  },
  {
    "text": "font that's that's Heights are getting rounded uh they're going to be exact Hees",
    "start": "1164720",
    "end": "1170000"
  },
  {
    "text": "given um uh but uh typically this is this is plenty and",
    "start": "1170000",
    "end": "1178320"
  },
  {
    "text": "we only have that many bits so that's it so four four bits for height four bits for depth are packed in there metalic",
    "start": "1178320",
    "end": "1185640"
  },
  {
    "text": "correction and tag are here but this is 6 fit so this is 8 fits wide 44 this is",
    "start": "1185640",
    "end": "1192440"
  },
  {
    "text": "six and two um metallic correction and we have 66 bits so we can have 64 different",
    "start": "1192440",
    "end": "1198720"
  },
  {
    "text": "metalic Corrections in the file",
    "start": "1198720",
    "end": "1204000"
  },
  {
    "text": "um and um in my if I'm not uh",
    "start": "1204000",
    "end": "1210240"
  },
  {
    "text": "well if I if I calculate each italic correction uh in by a tricky math",
    "start": "1210240",
    "end": "1216559"
  },
  {
    "text": "formula then I tend to get 65 or 66 of them in a typical italic font of 128",
    "start": "1216559",
    "end": "1222840"
  },
  {
    "text": "characters uh but that but rounding doesn't really bother me on um on italic",
    "start": "1222840",
    "end": "1228360"
  },
  {
    "text": "correction the I won't see the difference of a of a percentage point of a point so we got",
    "start": "1228360",
    "end": "1235799"
  },
  {
    "text": "that that thing then the tag field which which has four values and then there's the remainder field which is a which is",
    "start": "1235799",
    "end": "1242720"
  },
  {
    "text": "sort of like a parameter to the tag 8 Bits now the tag has four values and 0 1",
    "start": "1242720",
    "end": "1253919"
  },
  {
    "text": "2 and 3 zero is the vanilla case the normal case",
    "start": "1253919",
    "end": "1259600"
  },
  {
    "text": "uh and almost all characters have a tag of zero tag of one is Li it says a ligature",
    "start": "1259600",
    "end": "1268120"
  },
  {
    "text": "current program is there and in that case the remainder is",
    "start": "1268120",
    "end": "1274880"
  },
  {
    "text": "a pointer into the ligature current commands and we start looking there to see what uh about ligatures and currents",
    "start": "1274880",
    "end": "1281880"
  },
  {
    "text": "we'll talk a little bit more about that in a minute type two is is where we have a a",
    "start": "1281880",
    "end": "1290440"
  },
  {
    "text": "character list and this means we there's a next larger character in in some list",
    "start": "1290440",
    "end": "1296120"
  },
  {
    "text": "of characters for example uh left parenthesis might be uh might be linked",
    "start": "1296120",
    "end": "1302159"
  },
  {
    "text": "together and and uh and so we can get the to the next larger one by by and the",
    "start": "1302159",
    "end": "1308600"
  },
  {
    "text": "remainder is a pointer to the to the character that's next larger in in the sequence and that can point to still",
    "start": "1308600",
    "end": "1315120"
  },
  {
    "text": "another one and so on so we can find we have a uh we can have list of characters and the last one is extend the third",
    "start": "1315120",
    "end": "1321960"
  },
  {
    "text": "case is for an extensible character and in that case the remainder field is a pointer into the extensible into the",
    "start": "1321960",
    "end": "1328760"
  },
  {
    "text": "extensible recipes for making up extensible characters um well I can explain",
    "start": "1328760",
    "end": "1336000"
  },
  {
    "text": "extensible recipes right now extensible recipes have four",
    "start": "1336000",
    "end": "1341240"
  },
  {
    "text": "parts um top middle bottom and repeatable part",
    "start": "1341240",
    "end": "1350279"
  },
  {
    "start": "1345000",
    "end": "1505000"
  },
  {
    "text": "and these are the the names of of um four characters in the font or they",
    "start": "1350279",
    "end": "1356080"
  },
  {
    "text": "might be zero in this in these three cases they might be zero indicating that the thing isn't present so we make up",
    "start": "1356080",
    "end": "1361760"
  },
  {
    "text": "repeatable characters in that way for example the um a left brace left curly",
    "start": "1361760",
    "end": "1368320"
  },
  {
    "text": "brace has four has all all four things present repeatable part is this here",
    "start": "1368320",
    "end": "1374360"
  },
  {
    "text": "gets repeated as many times as you need the same number of times above and below the middle part of course is this the",
    "start": "1374360",
    "end": "1380840"
  },
  {
    "text": "top part this the bottom part that four different characters and uh Tech will",
    "start": "1380840",
    "end": "1386039"
  },
  {
    "text": "will take top any number you know n of these then middle then n again of these",
    "start": "1386039",
    "end": "1392400"
  },
  {
    "text": "and uh and the bottom if um the middle is empty that would be indicated by zero",
    "start": "1392400",
    "end": "1398360"
  },
  {
    "text": "here that would be a character like a left parenthesis has just a top a bottom and a repeater",
    "start": "1398360",
    "end": "1403840"
  },
  {
    "text": "part font designer should Pro should to make a good font font designer should",
    "start": "1403840",
    "end": "1409360"
  },
  {
    "text": "make the uh um the set of all different widths that you can get uh be the same",
    "start": "1409360",
    "end": "1415799"
  },
  {
    "text": "for all of his delimiters you shouldn't uh for examp so that if you have a left parenthesis with the repeater part of",
    "start": "1415799",
    "end": "1423200"
  },
  {
    "text": "six points uh then you your your repeater part for braces should be three points each so uh so that you'll have",
    "start": "1423200",
    "end": "1430520"
  },
  {
    "text": "the same sequence of uh of of length CU When Tech is is matching suppose",
    "start": "1430520",
    "end": "1436159"
  },
  {
    "text": "somebody for some reason wanted a left parenthesis and a right brace it would be funny if the right brace would be a",
    "start": "1436159",
    "end": "1442120"
  },
  {
    "text": "different size from the left parenthesis just because the set of different uh available Heights is um is different for",
    "start": "1442120",
    "end": "1449240"
  },
  {
    "text": "the two you'd like to make them consistent um uh so so you design it so",
    "start": "1449240",
    "end": "1454480"
  },
  {
    "text": "that the the set of different things that that uh that that can be made up has the same uh has the same dimensions",
    "start": "1454480",
    "end": "1461240"
  },
  {
    "text": "anyway um uh you take a symbol like",
    "start": "1461240",
    "end": "1466679"
  },
  {
    "text": "um vertical line that doesn't have top middle or bottom it's all repeater",
    "start": "1466679",
    "end": "1472679"
  },
  {
    "text": "parts and uh one of these floor brackets has a bottom but no top and so on I",
    "start": "1472679",
    "end": "1479520"
  },
  {
    "text": "haven't seen one yet that has a middle and no nothing El but could you can imagine all all those combinations the",
    "start": "1479520",
    "end": "1484559"
  },
  {
    "text": "repeater part is always there even if it's zero uh it's that that would mean that zero is your repeater character but",
    "start": "1484559",
    "end": "1491399"
  },
  {
    "text": "but if it's an extensible character um uh this is used in certain parts of tech",
    "start": "1491399",
    "end": "1496440"
  },
  {
    "text": "Math mode uh to see if you if if if this character is an extensible character and then uh then it would see if the tag is",
    "start": "1496440",
    "end": "1504760"
  },
  {
    "text": "three now what about the ligature Kern programs I think I've we've covered everything about this except parameters",
    "start": "1504760",
    "end": "1511559"
  },
  {
    "start": "1505000",
    "end": "1579000"
  },
  {
    "text": "and ligature Kern commands because wids height steps these are just the the different uh dabs I got to mention",
    "start": "1511559",
    "end": "1519240"
  },
  {
    "text": "though that these are given in um in certain units because they represent",
    "start": "1519240",
    "end": "1524960"
  },
  {
    "text": "physical dimensions so we ought to talk about those units the uh um in the header in the header",
    "start": "1524960",
    "end": "1531440"
  },
  {
    "text": "part there's two important words as far as Tech is concerned um and I forget",
    "start": "1531440",
    "end": "1536840"
  },
  {
    "text": "which comes first and which comes second but um yeah first is the check",
    "start": "1536840",
    "end": "1542120"
  },
  {
    "text": "sum and next is the um is the design size so we got to talk about those two",
    "start": "1542120",
    "end": "1550159"
  },
  {
    "text": "things check sum first that's a number that's supposed to be um that's supposed",
    "start": "1551360",
    "end": "1557960"
  },
  {
    "text": "to change if uh if if text in uh important information is different um if",
    "start": "1557960",
    "end": "1566600"
  },
  {
    "text": "for example somebody is uh uses Tech to produce a DVI file in",
    "start": "1566600",
    "end": "1573799"
  },
  {
    "text": "January and then you use that DVI file to print in",
    "start": "1573799",
    "end": "1580240"
  },
  {
    "start": "1579000",
    "end": "1623000"
  },
  {
    "text": "February um the check sum that Tech found in its in its TFM file that used",
    "start": "1580240",
    "end": "1586840"
  },
  {
    "text": "in January should agree with the check sum that's being used in in February to print the font otherwise there's been an",
    "start": "1586840",
    "end": "1593320"
  },
  {
    "text": "incompatibility okay and so this check sum is computed by mapon if if the check",
    "start": "1593320",
    "end": "1598440"
  },
  {
    "text": "sum is zero uh it doesn't get no test is made um but uh but but otherwise the",
    "start": "1598440",
    "end": "1606120"
  },
  {
    "text": "user is warned that something has happened to the font in the meantime so that the assumptions that Tech made",
    "start": "1606120",
    "end": "1611200"
  },
  {
    "text": "generating the file are not necessarily uh valid anymore and we can't maybe",
    "start": "1611200",
    "end": "1616840"
  },
  {
    "text": "print it uh uh directly so beware that's what the check sum is for the design side",
    "start": "1616840",
    "end": "1623399"
  },
  {
    "start": "1623000",
    "end": "1710000"
  },
  {
    "text": "is is uh uh the size that the that sort",
    "start": "1623399",
    "end": "1628480"
  },
  {
    "text": "of uh normal for this font uh that the uh designer had in mind it's but it's",
    "start": "1628480",
    "end": "1635480"
  },
  {
    "text": "kind of an arbitrary thing it's just what all the other units are expressed in terms of so all the widths are expressed as",
    "start": "1635480",
    "end": "1642679"
  },
  {
    "text": "multiples of the design size all the heights depths italic Corrections Kerns",
    "start": "1642679",
    "end": "1648320"
  },
  {
    "text": "and parameters except one parameter is pure number but all the other parameters are expressed as multiples of the design",
    "start": "1648320",
    "end": "1655880"
  },
  {
    "text": "size um and um uh the design size uh",
    "start": "1655880",
    "end": "1662559"
  },
  {
    "text": "doesn't necessarily have to have to reflect any universal truth or something",
    "start": "1662559",
    "end": "1668159"
  },
  {
    "text": "but if you say that you've that your design size is 10 points this is given in units of points um then uh uh uh then",
    "start": "1668159",
    "end": "1677880"
  },
  {
    "text": "if somebody just calls for this font without saying at a certain other size",
    "start": "1677880",
    "end": "1683360"
  },
  {
    "text": "then he gets it at 10 points design size is sort of the default at size so a",
    "start": "1683360",
    "end": "1690399"
  },
  {
    "text": "person in in writing in Tech will say font 10 equals",
    "start": "1690399",
    "end": "1696880"
  },
  {
    "text": "cmr1 and its design size happens to be 10 and and the design size of CMR 9 happens to be",
    "start": "1696880",
    "end": "1702919"
  },
  {
    "text": "9 uh but if he says CMR 10 at 15 point",
    "start": "1702919",
    "end": "1710120"
  },
  {
    "start": "1710000",
    "end": "1742000"
  },
  {
    "text": "then Tech just reads in the same TFM file but pretends that 15 was the design",
    "start": "1710360",
    "end": "1716679"
  },
  {
    "text": "size here and so everything is in a multiple of the design size so everything gets",
    "start": "1716679",
    "end": "1722960"
  },
  {
    "text": "multiplied by by 15 instead now these W these widths are",
    "start": "1722960",
    "end": "1728159"
  },
  {
    "text": "actually given as um as what the documentation calls fix words and fix",
    "start": "1728159",
    "end": "1735760"
  },
  {
    "text": "words are um",
    "start": "1735760",
    "end": "1740039"
  },
  {
    "start": "1742000",
    "end": "1834000"
  },
  {
    "text": "um our our fix Point things that have 20",
    "start": "1742080",
    "end": "1747159"
  },
  {
    "text": "bits to the right of the decimal point so there's 20 bits to the right of the decimal point and uh therefore 12 to the",
    "start": "1747159",
    "end": "1754720"
  },
  {
    "text": "left of the decimal point okay now the the fixed words um um",
    "start": "1754720",
    "end": "1761240"
  },
  {
    "text": "however should not actually use all this Precision to the left of the decimal point Tech is only going to allow them",
    "start": "1761240",
    "end": "1766279"
  },
  {
    "text": "to to use eight bits uh to the left decimal point uh or is it four four bits",
    "start": "1766279",
    "end": "1772840"
  },
  {
    "text": "yeah only four of those should actually be used so we're not say so nobody's supposed to have a width more than 16",
    "start": "1772840",
    "end": "1778600"
  },
  {
    "text": "times the design size so if so for example if you really",
    "start": "1778600",
    "end": "1783880"
  },
  {
    "text": "want to you know to have something more than 16 M so design size we might call an m is typically is is one quad 1 M uh",
    "start": "1783880",
    "end": "1791080"
  },
  {
    "text": "somebody really wants to to have a character that's more than 16 M's in in some direction or other he should say",
    "start": "1791080",
    "end": "1796480"
  },
  {
    "text": "that his design size is larger",
    "start": "1796480",
    "end": "1800039"
  },
  {
    "text": "okay um and the reason is that then Tech can can do the conversion multiplying by",
    "start": "1802200",
    "end": "1808440"
  },
  {
    "text": "the design size with uh with single Precision without a lot of time it saves it it saves saves these internal",
    "start": "1808440",
    "end": "1816360"
  },
  {
    "text": "calculations so the uh um so these are given as fixed words so the first bite",
    "start": "1816360",
    "end": "1822320"
  },
  {
    "text": "will either be zero or 255 a negative is given in two complement notations so the first bite",
    "start": "1822320",
    "end": "1828640"
  },
  {
    "text": "has to be 0 or 255 in all the widths Heights depths",
    "start": "1828640",
    "end": "1834120"
  },
  {
    "start": "1834000",
    "end": "2129000"
  },
  {
    "text": "parameters okay now to leature current commands here's where uh we got another",
    "start": "1834799",
    "end": "1841880"
  },
  {
    "text": "uh uh another highly efficient way to pack logic into bits and ligature",
    "start": "1841880",
    "end": "1849720"
  },
  {
    "text": "current command table is a big there's a big table of of instructions possibly",
    "start": "1849720",
    "end": "1855440"
  },
  {
    "text": "big but uh but possibly um and uh if the tag bit was one that",
    "start": "1855440",
    "end": "1862480"
  },
  {
    "text": "would say the remainder is an index into this table as to where we start and there's four bit four byte",
    "start": "1862480",
    "end": "1870360"
  },
  {
    "text": "commands in the table um and uh and you",
    "start": "1870360",
    "end": "1875639"
  },
  {
    "text": "and you and you execute this command and uh if it didn't find something then you go on to the next one now the commands",
    "start": "1875639",
    "end": "1881720"
  },
  {
    "text": "have four parts and the first one is called the stop bite or the stop bit",
    "start": "1881720",
    "end": "1888159"
  },
  {
    "text": "this one is called the op I think this one is called no this one is called the",
    "start": "1888159",
    "end": "1894240"
  },
  {
    "text": "character and this one is called the op and this one is called the um remainder",
    "start": "1894240",
    "end": "1900720"
  },
  {
    "text": "or the operand or something I don't have a specific name for I call it remainder",
    "start": "1900720",
    "end": "1905840"
  },
  {
    "text": "um and the command has the following the",
    "start": "1905840",
    "end": "1911960"
  },
  {
    "text": "um uh the right now we're using one bit for stop one bit for op eight bits for",
    "start": "1911960",
    "end": "1917440"
  },
  {
    "text": "character and eight bits for remainder so people uh like Pier Makai have been",
    "start": "1917440",
    "end": "1922960"
  },
  {
    "text": "eyeing these extra 14 bits with great uh uh interest because they want to do",
    "start": "1922960",
    "end": "1928720"
  },
  {
    "text": "things for Arabic and other languages that where they um uh would like to go beyond 26 character limit um right now",
    "start": "1928720",
    "end": "1937679"
  },
  {
    "text": "we're just using the high order bit in the stop bite and the op bite um the command means this look at",
    "start": "1937679",
    "end": "1945600"
  },
  {
    "text": "the next character following the the the present one and uh if does it match this",
    "start": "1945600",
    "end": "1951279"
  },
  {
    "text": "one if not go on to the next instruction or stop depending on whether the stop it is there so the first thing is look for",
    "start": "1951279",
    "end": "1958559"
  },
  {
    "text": "a match on the character after it and if and uh if you didn't find it then you",
    "start": "1958559",
    "end": "1964039"
  },
  {
    "text": "stop if if this stop bit is on otherwise you go on and sequentially until you either find a match or you find a stop",
    "start": "1964039",
    "end": "1970559"
  },
  {
    "text": "bit um now if you did find a match then the opit tells you it's either a",
    "start": "1970559",
    "end": "1976039"
  },
  {
    "text": "ligature or a current if it's a if it's a Kern then you look at the remainder part",
    "start": "1976039",
    "end": "1983880"
  },
  {
    "text": "and that's an index into this Kern table here it tells you how much the current",
    "start": "1983880",
    "end": "1989600"
  },
  {
    "text": "is if it's a ligature the the remainder tells you replace your present character",
    "start": "1989600",
    "end": "1995720"
  },
  {
    "text": "and the following character by this one and then start the whole process over",
    "start": "1995720",
    "end": "2000799"
  },
  {
    "text": "again pretend that that that was the character that was input and go through and see if that character in turn has a",
    "start": "2000799",
    "end": "2006840"
  },
  {
    "text": "ligature tag and if so it will refer to to its program to continue on so see what",
    "start": "2006840",
    "end": "2014039"
  },
  {
    "text": "happens then f for example in a typical American version of ligatures f has a",
    "start": "2014039",
    "end": "2019519"
  },
  {
    "text": "ligature program that says are you follow if you're followed by an F then",
    "start": "2019519",
    "end": "2024840"
  },
  {
    "text": "replace this by FF character as a ligature and go on if you're followed by",
    "start": "2024840",
    "end": "2031399"
  },
  {
    "text": "an I replace it by fi and and and and uh",
    "start": "2031399",
    "end": "2036720"
  },
  {
    "text": "same for l similar um then FF itself FF ligature if",
    "start": "2036720",
    "end": "2043000"
  },
  {
    "text": "followed by an I then replace that by",
    "start": "2043000",
    "end": "2048000"
  },
  {
    "text": "ffi F would also be followed for also often followed by currs for example F",
    "start": "2048040",
    "end": "2053679"
  },
  {
    "text": "followed by an exclamation point you'd want to uh uh uh put some extra space",
    "start": "2053679",
    "end": "2059118"
  },
  {
    "text": "between F and the exclamation point so that that they don't run into each other quote marks same way okay so",
    "start": "2059119",
    "end": "2068040"
  },
  {
    "text": "that's the uh idea of these ligature curent instructions and uh uh command",
    "start": "2068040",
    "end": "2073638"
  },
  {
    "text": "and Tech Will interpret this in several parts of the of the program so let's now",
    "start": "2073639",
    "end": "2079040"
  },
  {
    "text": "see what the tf2pl program does with this um and so let's have the lights off",
    "start": "2079040",
    "end": "2085638"
  },
  {
    "text": "and go back to the computer and see if this works it's still up TF to PL TF to PL is a program that U",
    "start": "2085639",
    "end": "2095118"
  },
  {
    "text": "is is one of these techware programs that you've got and it asked me for this",
    "start": "2095119",
    "end": "2100160"
  },
  {
    "text": "TFM file and I'll just use the cmr1 TFM uh that on techy that we were just",
    "start": "2100160",
    "end": "2107000"
  },
  {
    "text": "looking at in binary on this and uh I'll print out CMR",
    "start": "2107000",
    "end": "2113040"
  },
  {
    "text": "10. and this is this is uh uh the program that you have a",
    "start": "2113040",
    "end": "2121040"
  },
  {
    "text": "listing of doing it it prints out the the character codes that it has uh processed as it's doing it okay so now",
    "start": "2121040",
    "end": "2127040"
  },
  {
    "text": "we should be able to look at CMR",
    "start": "2127040",
    "end": "2131400"
  }
]