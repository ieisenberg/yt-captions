[
  {
    "start": "0",
    "end": "28000"
  },
  {
    "text": "SHA stands for the secure hash algorithm. Which is interesting given that it has just kind of been broken",
    "start": "0",
    "end": "5850"
  },
  {
    "text": "But I'm not going to talk specifically about the attack on SHA today",
    "start": "6640",
    "end": "10170"
  },
  {
    "text": "that's for a different video, but",
    "start": "11469",
    "end": "13469"
  },
  {
    "text": "What I wanted to do was talk in a little bit more detail about hash functions and what they are",
    "start": "14290",
    "end": "18569"
  },
  {
    "text": "And how SHA in particular works so you can get an idea of a kind of way these things are implemented",
    "start": "19300",
    "end": "24930"
  },
  {
    "text": "let's have a quick look at what a hash function is briefly because Tom's got somebody covered it in this video and",
    "start": "27849",
    "end": "33029"
  },
  {
    "start": "28000",
    "end": "57000"
  },
  {
    "text": "He's gone into a lot of the reasons you might use a hash function. The kind of hash functions",
    "start": "33130",
    "end": "36329"
  },
  {
    "text": "I'm talking about are not the ones that we've been talking about for",
    "start": "36360",
    "end": "39140"
  },
  {
    "text": "Hashing passwords. Those ones have to be quite slow in some sense because you need them to be secure",
    "start": "40280",
    "end": "45519"
  },
  {
    "text": "We're going to talk mostly about the hash functions that are used routinely in cryptography for things like message authentication",
    "start": "45520",
    "end": "51620"
  },
  {
    "text": "Digital signatures, and so on. So they need to be fairly quick, both to verify and compute. A hash function",
    "start": "52059",
    "end": "57419"
  },
  {
    "start": "57000",
    "end": "95000"
  },
  {
    "text": "Take some string, right, let's say \"abc\" and it turns it into some fixed length string",
    "start": "57520",
    "end": "64650"
  },
  {
    "text": "(that's not usually three long) of random",
    "start": "64650",
    "end": "67000"
  },
  {
    "text": "So we know a bit string right, but so so you, 011001011...",
    "start": "67020",
    "end": "72179"
  },
  {
    "text": "Go forward this way for however many bits that hash function is. Now, there's a few important properties of Hash functions",
    "start": "72840",
    "end": "78020"
  },
  {
    "text": "That we care about for cryptography, but the most important one perhaps. Is that it's essentially pseudo-random",
    "start": "78600",
    "end": "83119"
  },
  {
    "text": "So that means that we put in \"abc\"",
    "start": "83260",
    "end": "85150"
  },
  {
    "text": "And we get out something that is in no way like \"abc\" and appears completely random to us and if we change this even slightly",
    "start": "85150",
    "end": "91420"
  },
  {
    "text": "Because it's appearing random this has completely changed",
    "start": "91740",
    "end": "94220"
  },
  {
    "text": "So let's have a quick look at SHA-1 as an example just so we can see this in action",
    "start": "94680",
    "end": "98640"
  },
  {
    "start": "95000",
    "end": "184000"
  },
  {
    "text": "I'm on some page that has a script that calculates hashes on the fly so I can put in \"abc\" and",
    "start": "98640",
    "end": "104879"
  },
  {
    "text": "You can see that the hash is a9993e and so on all the way up to d, right?",
    "start": "105340",
    "end": "110490"
  },
  {
    "text": "This is the SHA1 hash. A SHA1 hash is 160 bits long. If I change this",
    "start": "110490",
    "end": "115460"
  },
  {
    "text": "C to a D the hash is completely changed. So there's the appearance of randomness - the idea that",
    "start": "115900",
    "end": "121380"
  },
  {
    "text": "This hash is actually not related to this at all",
    "start": "122140",
    "end": "124500"
  },
  {
    "text": "Even though it is and we know it is because if I put C back again",
    "start": "124630",
    "end": "127740"
  },
  {
    "text": "We're back to a9993",
    "start": "129459",
    "end": "131459"
  },
  {
    "text": "So we can use this to verify messages haven't been changed or verify signatures on certificates",
    "start": "131520",
    "end": "136760"
  },
  {
    "text": "And we can do it knowing that we have the appearance of randomness , but actually it's not random at all. Today",
    "start": "137140",
    "end": "142770"
  },
  {
    "text": "We're going to talk a bit about how you actually write a hash function to do this",
    "start": "142770",
    "end": "146300"
  },
  {
    "text": "How do we take something that essentially isn't random with a very known structure and turn it into something that looks like nonsense",
    "start": "146410",
    "end": "152009"
  },
  {
    "text": "Such that we can use it. Now,",
    "start": "152170",
    "end": "154170"
  },
  {
    "text": "There'll be people raising a few eyebrows that",
    "start": "155230",
    "end": "156900"
  },
  {
    "text": "I'm using SHA1 as an example to do this",
    "start": "156900",
    "end": "159060"
  },
  {
    "text": "But actually there's fairly reasonable reason to do so.",
    "start": "159060",
    "end": "165030"
  },
  {
    "text": "First of all you know we might also talk about the weaknesses at some point",
    "start": "165030",
    "end": "165550"
  },
  {
    "text": "but also SHA-1 bears a striking similarity in structure to MD4 and MD5 which is see a lot of use historically and",
    "start": "165550",
    "end": "172350"
  },
  {
    "text": "SHA-256 and SHA-512 which is a SHA2",
    "start": "173470",
    "end": "176429"
  },
  {
    "text": "Which currently is in some sense a standard that everyone uses right SHA3 is quite different",
    "start": "177580",
    "end": "182699"
  },
  {
    "text": "And that's is something else for another day",
    "start": "182700",
    "end": "184180"
  },
  {
    "start": "184000",
    "end": "224000"
  },
  {
    "text": "So SHA1 was developed by the NSA",
    "start": "184180",
    "end": "186510"
  },
  {
    "text": "And released and published in 1995 now a lot of people don't trust things that the NSA do sort of by default",
    "start": "186850",
    "end": "192749"
  },
  {
    "text": "Which might be fair, but in this case actually SHA1 was quite good for a long long time",
    "start": "193140",
    "end": "198319"
  },
  {
    "text": "when there were some concerns ... recently much more serious concerns, but",
    "start": "199100",
    "end": "203360"
  },
  {
    "text": "Originally the NSA weren't doing it as a back door and stuff the NSA need cryptography",
    "start": "204820",
    "end": "208880"
  },
  {
    "text": "Just like everyone else and this is a good function",
    "start": "208890",
    "end": "210890"
  },
  {
    "text": "MD5 had a lot of problems and so what they basically did was extend it and make it better",
    "start": "211800",
    "end": "216000"
  },
  {
    "text": "SHA1 takes any length of string and outputs a",
    "start": "216220",
    "end": "218820"
  },
  {
    "text": "160 bit value. Alright, so that's",
    "start": "220120",
    "end": "222459"
  },
  {
    "text": "160 zeros and ones. The question then becomes: I've got a string but could be \"abc\" or it could be an incredibly long file or",
    "start": "222730",
    "end": "229830"
  },
  {
    "start": "224000",
    "end": "304000"
  },
  {
    "text": "You know a whole movie right, and I want to calculate 160-bit signature of that",
    "start": "229930",
    "end": "234120"
  },
  {
    "text": "How do I even get started doing that well the answer is that I basically have a loop that takes",
    "start": "234580",
    "end": "239369"
  },
  {
    "text": "512 bit blocks of data one at a time until the file's expended. Let's look at an example of how SHA1 works on just",
    "start": "240070",
    "end": "246959"
  },
  {
    "text": "a single message of exactly the right length",
    "start": "246959",
    "end": "248549"
  },
  {
    "text": "And then we'll just talk briefly about what you do when inevitably isn't the right length",
    "start": "248549",
    "end": "252749"
  },
  {
    "text": "Which is almost always, right? So SHA1 takes a message of n blocks of 512 bits in length, and",
    "start": "253030",
    "end": "260669"
  },
  {
    "text": "If it's only one block - if the message is exactly 512 bits in length, then we only run it once, in essence",
    "start": "261300",
    "end": "266940"
  },
  {
    "text": "And then we out put the hash at the end so SHA-1",
    "start": "267580",
    "end": "270159"
  },
  {
    "text": "Starts with an internal state then we bring in bits of our message one at a time",
    "start": "270360",
    "end": "274400"
  },
  {
    "text": "And we change that internal state and after we've done that at the very end when there's no more message left",
    "start": "274410",
    "end": "279119"
  },
  {
    "text": "We just read what the internal state is and that's our hash alright",
    "start": "279120",
    "end": "282690"
  },
  {
    "text": "so we're going to basically be taking the internal state and updating it with the message until",
    "start": "282690",
    "end": "286769"
  },
  {
    "text": "We run out of message, and then as soon as that process stops we can read the results",
    "start": "287020",
    "end": "290539"
  },
  {
    "text": "That's how the SHA family of hash functions works, so our internal state we call H so I'm going to say H0",
    "start": "291000",
    "end": "297840"
  },
  {
    "text": "H1 H2 H3",
    "start": "299400",
    "end": "301400"
  },
  {
    "text": "and H4",
    "start": "302199",
    "end": "303880"
  },
  {
    "text": "Now the internal state of SHA1 is exactly the same length as the hash that it produces. Which is 160 bits. Which is five",
    "start": "303880",
    "end": "311639"
  },
  {
    "start": "304000",
    "end": "323000"
  },
  {
    "text": "32-bit words four bytes each you know for 32-bit machine this would be an int",
    "start": "312699",
    "end": "316769"
  },
  {
    "text": "So this is initialized based on some constants. Which is defined in the standard",
    "start": "316770",
    "end": "320220"
  },
  {
    "text": "We might talk about that in a bit",
    "start": "320560",
    "end": "322289"
  },
  {
    "text": "but it's not very important and what we're going to do is we're update these h's as",
    "start": "322289",
    "end": "325739"
  },
  {
    "start": "323000",
    "end": "519000"
  },
  {
    "text": "We bring in our message and then at the end. We'll see what the Hs are and that's our hash function",
    "start": "326050",
    "end": "330960"
  },
  {
    "text": "So how do we do this? Well? We have something [called] a compression function?",
    "start": "331270",
    "end": "334168"
  },
  {
    "text": "It's going to take in this data and a bit of message",
    "start": "334330",
    "end": "337530"
  },
  {
    "text": "Turn it into another set of h values and that's going to repeat as we have message",
    "start": "337990",
    "end": "342840"
  },
  {
    "text": "But that's only going to happen once this time because my message is exactly 5 12, which is very handy",
    "start": "342840",
    "end": "346979"
  },
  {
    "text": "So this is our compression function",
    "start": "347050",
    "end": "349020"
  },
  {
    "text": "And I'm going to rename these slightly just to confuse everyone to ABc dearly so at the beginning of our compression function",
    "start": "349020",
    "end": "355710"
  },
  {
    "text": "We copy B's the internal state into a b c d and e",
    "start": "355990",
    "end": "361530"
  },
  {
    "text": "We then perform 80 rounds of char compression function, right?",
    "start": "361530",
    "end": "366000"
  },
  {
    "text": "Which is like this so x 80 now what that's going to do is take in words from our",
    "start": "366000",
    "end": "372750"
  },
  {
    "text": "512 bit block of our message, so if this is our message here that message is",
    "start": "373210",
    "end": "377759"
  },
  {
    "text": "512 bits this is going to come in at this point and be mixed in with this ABc and D so well for now",
    "start": "378729",
    "end": "386098"
  },
  {
    "text": "We won't talk about exactly what's going on in this compression function",
    "start": "386099",
    "end": "388408"
  },
  {
    "text": "But the idea is that the bits of abcde are being combined together? They're being shuffled",
    "start": "388409",
    "end": "393509"
  },
  {
    "text": "They're being commuted around to make it look more and more random as we go and at the same time",
    "start": "393699",
    "end": "398999"
  },
  {
    "text": "We're bringing in bits from this message to further increase the appearance of mandamus",
    "start": "399000",
    "end": "403320"
  },
  {
    "text": "But also to make sure that this shower function is calculating a digest on this specific message rather than just a general one",
    "start": "403419",
    "end": "409919"
  },
  {
    "text": "That's the same every time for this message. We're always going to perform the exact same algorithm",
    "start": "409919",
    "end": "414659"
  },
  {
    "text": "So if we put in this message a second time the shower function will produce exactly the same result",
    "start": "414660",
    "end": "419189"
  },
  {
    "text": "Now once we've done this and we shuffled up abcde will be left with a new",
    "start": "420009",
    "end": "424589"
  },
  {
    "text": "Abcde so a b c d and e",
    "start": "425380",
    "end": "428969"
  },
  {
    "text": "And then we finish this block by bringing our h values down here and adding [them] to these values here",
    "start": "428970",
    "end": "436799"
  },
  {
    "text": "to create a new",
    "start": "437199",
    "end": "438940"
  },
  {
    "text": "H naught",
    "start": "438940",
    "end": "440470"
  },
  {
    "text": "H1 H2 H3",
    "start": "440470",
    "end": "442470"
  },
  {
    "text": "H4 the State is now been updated by whatever we did in this compression function by just adding to it all right now all addition",
    "start": "443349",
    "end": "450989"
  },
  {
    "text": "In Char is done without any overflow modulo 2 to the 32 well that means is that if you ever go over?",
    "start": "450990",
    "end": "457590"
  },
  {
    "text": "The maximum value allowed by a 4-byte integer you lap back around again",
    "start": "458050",
    "end": "463650"
  },
  {
    "text": "Right which is one of the reasons why shark arm in reverse because you might lose information that way",
    "start": "463690",
    "end": "468599"
  },
  {
    "text": "This is not encryption. We don't need to be able to reverse it, so this state is",
    "start": "469270",
    "end": "473280"
  },
  {
    "text": "Finished now if our message is exactly 512 bits",
    "start": "474070",
    "end": "477659"
  },
  {
    "text": "We need these 18 or h1 h2 h3 h4 values out that is our hash, so for short messages. We're done",
    "start": "477699",
    "end": "484469"
  },
  {
    "text": "I could just you know go home",
    "start": "484470",
    "end": "486470"
  },
  {
    "text": "in actual fact the the principle of extending this to arbitrary length messages right in increments of",
    "start": "486849",
    "end": "493739"
  },
  {
    "text": "512 Bits is",
    "start": "493960",
    "end": "495550"
  },
  {
    "text": "We copy this state back up to the top and we repeat the process and then we copy back up and we repeat the process",
    "start": "495550",
    "end": "500578"
  },
  {
    "text": "For as many blocks as we have of our message 512 bits at a time of our message",
    "start": "500580",
    "end": "505500"
  },
  {
    "text": "We feed it in we alter the state using this approach here, and then we lead off a state when we're done, right?",
    "start": "505500",
    "end": "512070"
  },
  {
    "text": "That's basically how it works",
    "start": "512070",
    "end": "514000"
  },
  {
    "text": "So be the security of SHA is all in this compression function and what it's doing. If it's shorter than that, what",
    "start": "514000",
    "end": "519659"
  },
  {
    "start": "519000",
    "end": "620000"
  },
  {
    "text": "happens there?  If it's not a multiple of 512 bits. We're going to have to do some padding right?",
    "start": "520510",
    "end": "525569"
  },
  {
    "text": "Char only works with 512 bit blocks, so what we do is if we have our message. Which is let's say",
    "start": "526329",
    "end": "532438"
  },
  {
    "text": "1 0 1 1 0 1 it's not a very long message. If we want to pad that up to 512 bits",
    "start": "533670",
    "end": "539370"
  },
  {
    "text": "We start with [a] one. We pad with 11 [alright], so I'm going to sort of mark, de-mark the padding here",
    "start": "539530",
    "end": "545490"
  },
  {
    "text": "so we know we go with",
    "start": "545490",
    "end": "547500"
  },
  {
    "text": "0000 and then we finish off the message with the length of the actual message in it",
    "start": "549370",
    "end": "553709"
  },
  {
    "text": "So we know where to sort of remove the padding which in this case is 7 so in Binary 1 1 1 so 1 11?",
    "start": "553710",
    "end": "560820"
  },
  {
    "text": "Obviously would a lot more bits for your length than I have done. You get the idea now this padding scheme",
    "start": "561040",
    "end": "567180"
  },
  {
    "text": "Ensures that messages of the same length and messages that end in the same way or in very similar ways don't share the same padding",
    "start": "567910",
    "end": "575190"
  },
  {
    "text": "And don't end up being the same that's very important, so this approach to SHA [its] repetitive",
    "start": "575620",
    "end": "581370"
  },
  {
    "text": "Updating of the internal state with a compression function in essence is called a merkel down guard construction",
    "start": "581920",
    "end": "587579"
  },
  {
    "text": "This was sort of independently proved by murkland damn. [God]",
    "start": "588760",
    "end": "591389"
  },
  {
    "text": "But essentially what's good about it is if your compression function is good and has good pSeudo-random properties then so does your shower function",
    "start": "591940",
    "end": "599429"
  },
  {
    "text": "Which is of course very useful right?",
    "start": "599800",
    "end": "601800"
  },
  {
    "text": "The problem is that the compression function of char one is not so good that the attacks are",
    "start": "604450",
    "end": "610200"
  },
  {
    "text": "To the 18 they can be reduced somewhat to about 2 to the 60 something like this which it becomes",
    "start": "610570",
    "end": "616169"
  },
  {
    "text": "Into the realm of possibility for people with a lot of money",
    "start": "617380",
    "end": "620039"
  }
]