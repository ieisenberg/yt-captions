[
  {
    "text": "If you look back on the car-park video, you'll see \nit's very handy",
    "start": "20",
    "end": "3040"
  },
  {
    "text": "Everything's cut and dried",
    "start": "3040",
    "end": "4500"
  },
  {
    "text": "Every possible combination of 20s, 10s and 5s",
    "start": "4580",
    "end": "7939"
  },
  {
    "text": "will work",
    "start": "7940",
    "end": "8580"
  },
  {
    "text": "get us to twenty-five,",
    "start": "8580",
    "end": "10040"
  },
  {
    "text": "deliver a ticket.",
    "start": "10040",
    "end": "11160"
  },
  {
    "text": "If we turn to what we were talking about briefly",
    "start": "11760",
    "end": "14880"
  },
  {
    "text": "at the end of that video",
    "start": "14980",
    "end": "16080"
  },
  {
    "text": "something like... I'm in a program language and I want",
    "start": "16220",
    "end": "19820"
  },
  {
    "text": "to declare an identifier name for my integers.",
    "start": "20200",
    "end": "23760"
  },
  {
    "text": "I want to call my integers 'sean' and 'dave', or even",
    "start": "24140",
    "end": "27500"
  },
  {
    "text": "'k9' as I said last time.",
    "start": "27580",
    "end": "30000"
  },
  {
    "text": "Well, they're fine. But if you want arbitrary-length\nvariable names,",
    "start": "30160",
    "end": "34900"
  },
  {
    "text": "How do you say",
    "start": "35680",
    "end": "36540"
  },
  {
    "text": "\"I don't know whether it's going to be three letters long,  \nfive letters long,",
    "start": "36540",
    "end": "40080"
  },
  {
    "text": "or even sixty letters long\" ?",
    "start": "40080",
    "end": "41520"
  },
  {
    "text": "Maybe the compiler has an external limit anyway.",
    "start": "41520",
    "end": "43860"
  },
  {
    "text": "But, in general, how can we keep going around",
    "start": "43900",
    "end": "46320"
  },
  {
    "text": "without knowing how many?",
    "start": "46320",
    "end": "48079"
  },
  {
    "text": "And the answer, of course, is: Recursion.",
    "start": "48080",
    "end": "50280"
  },
  {
    "start": "50480",
    "end": "53860"
  },
  {
    "text": "I'm now going to draw you",
    "start": "53860",
    "end": "55440"
  },
  {
    "text": "a finite-state automaton diagram",
    "start": "55580",
    "end": "57520"
  },
  {
    "text": "for a programming identifier, yeah?",
    "start": "57640",
    "end": "61980"
  },
  {
    "text": "And those of you from Electronics Engineering \ndepartments, you can say:",
    "start": "61980",
    "end": "65339"
  },
  {
    "text": "\"Yes! We've known about these for years! \nThey're just state-machines.\"",
    "start": "65340",
    "end": "69159"
  },
  {
    "text": "So here comes a state machine for...",
    "start": "69160",
    "end": "71420"
  },
  {
    "start": "71420",
    "end": "72400"
  },
  {
    "text": "identifiers.",
    "start": "72400",
    "end": "73360"
  },
  {
    "text": "You have to have a starting point, we had \none in the car park",
    "start": "73360",
    "end": "76800"
  },
  {
    "text": "and we have to have one here, now.",
    "start": "76800",
    "end": "78800"
  },
  {
    "text": "And then, what I'm going to do",
    "start": "78800",
    "end": "80720"
  },
  {
    "text": "is to say",
    "start": "80720",
    "end": "81740"
  },
  {
    "text": "\"Well, in order to get started on a programming \nlanguage identifier,",
    "start": "81740",
    "end": "86380"
  },
  {
    "text": "the rule is, you MUST start with a letter -",
    "start": "86440",
    "end": "90340"
  },
  {
    "text": "not a digit.\"",
    "start": "90380",
    "end": "91640"
  },
  {
    "text": "And i'll just denote any letter, for the moment, by L",
    "start": "91640",
    "end": "95080"
  },
  {
    "text": "This state here, which I'm calling the 'tailpiece' of the identifier,",
    "start": "95120",
    "end": "99600"
  },
  {
    "text": "is to take care of the fact",
    "start": "99600",
    "end": "101280"
  },
  {
    "text": "eventually,",
    "start": "101280",
    "end": "102159"
  },
  {
    "text": "that identifiers could just be a single letter.",
    "start": "102160",
    "end": "104960"
  },
  {
    "text": "Its perfectly possible to say \"int i;\" \n[in the C language]",
    "start": "104960",
    "end": "108159"
  },
  {
    "text": "It's just a single-letter identifier.",
    "start": "108160",
    "end": "110500"
  },
  {
    "text": "So we've got to allow for that, it could be just one letter long,",
    "start": "110500",
    "end": "112880"
  },
  {
    "text": "or, it can be a letter",
    "start": "113320",
    "end": "115040"
  },
  {
    "text": "followed by ANY mix of letters and digits",
    "start": "115040",
    "end": "118920"
  },
  {
    "text": "in ANY order.",
    "start": "118940",
    "end": "120780"
  },
  {
    "text": "But eventually there has to be an end-marker.",
    "start": "120800",
    "end": "123000"
  },
  {
    "text": "And of course, typically, in the C programming language,",
    "start": "123000",
    "end": "125460"
  },
  {
    "text": "the end-marker is ; (semicolon).",
    "start": "125460",
    "end": "128100"
  },
  {
    "text": "Okay; how do we do that 'any-mixutre-of-letters-and-digits' stuff",
    "start": "128200",
    "end": "132720"
  },
  {
    "text": "Well, here's something new:",
    "start": "132720",
    "end": "135340"
  },
  {
    "text": "inside this 'tailpiece' state, I am saying",
    "start": "135380",
    "end": "139680"
  },
  {
    "text": "\"You can go back into yourself...",
    "start": "139940",
    "end": "142420"
  },
  {
    "text": "by accepting more letters.\"",
    "start": "142620",
    "end": "144299"
  },
  {
    "text": "Down at the bottom I can say:",
    "start": "144500",
    "end": "146260"
  },
  {
    "text": "\"Accept a digit...\"",
    "start": "146500",
    "end": "147860"
  },
  {
    "text": "I'll call any digit just D at the moment.",
    "start": "147860",
    "end": "150360"
  },
  {
    "text": "So can you see whats happening here?",
    "start": "150500",
    "end": "151960"
  },
  {
    "text": "You go in, you MUST have an initial letter",
    "start": "152040",
    "end": "153860"
  },
  {
    "text": "but once you're in the \"T\" state",
    "start": "153980",
    "end": "155739"
  },
  {
    "text": "can come back into yourself!",
    "start": "155740",
    "end": "157960"
  },
  {
    "text": "And that is recursion.",
    "start": "157960",
    "end": "159480"
  },
  {
    "text": "But as you go back and come back into yourself,",
    "start": "159480",
    "end": "162519"
  },
  {
    "text": "you must accept a letter, or you must find a digit on \nthe input stream.",
    "start": "162520",
    "end": "166940"
  },
  {
    "text": "Eventually, the party's got to end;",
    "start": "167240",
    "end": "169320"
  },
  {
    "text": "you can't keep recurring for ever...",
    "start": "169400",
    "end": "171120"
  },
  {
    "text": "No good at all, you will crash!",
    "start": "171120",
    "end": "173459"
  },
  {
    "text": "You will run out of memory.",
    "start": "173460",
    "end": "175140"
  },
  {
    "text": "So eventually there's gotta be a way out of all this \nmorass.",
    "start": "175140",
    "end": "179120"
  },
  {
    "text": "And what I'm going to do, just so I can link up with \nwhat Noam Chomsky did ...",
    "start": "179120",
    "end": "182480"
  },
  {
    "text": "The great Noam really liked to think of EVERYTHING \nas a legal \"sentence\".",
    "start": "182480",
    "end": "186720"
  },
  {
    "text": "Let's call it S",
    "start": "186720",
    "end": "189240"
  },
  {
    "text": "We've mentioned this already that, you know, in car-park \nlanguage a legal",
    "start": "189340",
    "end": "191480"
  },
  {
    "text": "sentence is \"10 10 5\" because it adds up to 25, and so on.",
    "start": "191480",
    "end": "195099"
  },
  {
    "text": "But to get into this final state which sometimes \nis called the \"finish\" state,",
    "start": "195260",
    "end": "199819"
  },
  {
    "text": "sometimes, equally, it's called the \"accept\" state,",
    "start": "199940",
    "end": "202740"
  },
  {
    "text": "then I need",
    "start": "202860",
    "end": "204120"
  },
  {
    "text": "to see",
    "start": "204120",
    "end": "204959"
  },
  {
    "text": "an E.",
    "start": "205440",
    "end": "206180"
  },
  {
    "text": "And an E is a valid end-marker.",
    "start": "206320",
    "end": "209140"
  },
  {
    "text": "And i'm saying that in... for this subset of the C-programming \nlanguage we're doing here",
    "start": "209160",
    "end": "213960"
  },
  {
    "text": "the end marker will be a ; (semicolon).",
    "start": "214100",
    "end": "216260"
  },
  {
    "text": "I might, later on, extend that a bit because if I do \nsome AWK examples",
    "start": "216260",
    "end": "219540"
  },
  {
    "text": "I want to be able to accept \"newline\" [\\n]  as being \nan end-marker as well.",
    "start": "219540",
    "end": "223159"
  },
  {
    "text": "But for the moment let's say yes, it's ; (semicolon)",
    "start": "223160",
    "end": "225860"
  },
  {
    "text": "So, that's it then!",
    "start": "227080",
    "end": "228160"
  },
  {
    "text": "That is a state machine.",
    "start": "228200",
    "end": "229300"
  },
  {
    "text": "The factor that's new in it, is the ability to do recursion.",
    "start": "229340",
    "end": "233420"
  },
  {
    "text": "for as long as you want, until you finally bottle out \nof the whole thing,",
    "start": "233780",
    "end": "237660"
  },
  {
    "text": "and take the end-marker and say \"that's the end of my declaration.\"",
    "start": "237740",
    "end": "241280"
  },
  {
    "text": "Okay!",
    "start": "241280",
    "end": "243060"
  },
  {
    "text": "Well, what emerged from all of this stuff about state-machines",
    "start": "243060",
    "end": "247620"
  },
  {
    "text": "and from Chomsky's work, in the mid to late 50's ?",
    "start": "247700",
    "end": "252270"
  },
  {
    "text": "For every machine you can draw,",
    "start": "252720",
    "end": "255900"
  },
  {
    "text": "like this,",
    "start": "256100",
    "end": "256959"
  },
  {
    "text": "and this is a MACHINE interpretation",
    "start": "256960",
    "end": "259180"
  },
  {
    "text": "of identifiers,",
    "start": "259200",
    "end": "260320"
  },
  {
    "text": "there's always a grammatical alternative.",
    "start": "260320",
    "end": "263120"
  },
  {
    "text": "And the more, if you like, mathematical-theoretician you are,",
    "start": "263140",
    "end": "266680"
  },
  {
    "text": "the more you like rather abstruse, so-called \"top-down\", \nways of thinking about things.",
    "start": "266700",
    "end": "272480"
  },
  {
    "text": "So, Chomsky's notation - let me just start you off on this, for this:",
    "start": "272640",
    "end": "275880"
  },
  {
    "text": "was to  say: Look, my goal is a sentence (S).",
    "start": "275880",
    "end": "279180"
  },
  {
    "text": "But what seems to be the case is that",
    "start": "279400",
    "end": "281540"
  },
  {
    "text": "to get to sentence (S), I've got to take",
    "start": "281540",
    "end": "284460"
  },
  {
    "text": "first of all an L, and then that gets me into a T state.",
    "start": "284460",
    "end": "288020"
  },
  {
    "text": "Okay...",
    "start": "288260",
    "end": "288980"
  },
  {
    "text": "Chomsky notation! ",
    "start": "289300",
    "end": "290659"
  },
  {
    "text": "You can read the arrow as being \"...is defined as\".",
    "start": "290860",
    "end": "294219"
  },
  {
    "text": "A sentence...",
    "start": "294540",
    "end": "295600"
  },
  {
    "text": "is defined as...",
    "start": "296000",
    "end": "297120"
  },
  {
    "text": "an L,",
    "start": "297940",
    "end": "298840"
  },
  {
    "text": "any letter,",
    "start": "299200",
    "end": "300160"
  },
  {
    "text": "Followed by what I'll call a 'tail', or a 'tailpiece', \nof the identifier - L and T.",
    "start": "300180",
    "end": "305780"
  },
  {
    "text": "Fine!",
    "start": "305780",
    "end": "306280"
  },
  {
    "text": "Well what... let's just do one example of what a T can be.",
    "start": "306360",
    "end": "310039"
  },
  {
    "text": "A T, look",
    "start": "310040",
    "end": "311080"
  },
  {
    "text": "Let's take this one.",
    "start": "311440",
    "end": "312800"
  },
  {
    "start": "312860",
    "end": "313360"
  },
  {
    "start": "313360",
    "end": "314719"
  },
  {
    "start": "314720",
    "end": "315360"
  },
  {
    "text": "Can be further defined as: yet another letter, \nfollowed by another T.",
    "start": "315380",
    "end": "321420"
  },
  {
    "text": "Now look what's happening here, for the first time..",
    "start": "321420",
    "end": "324200"
  },
  {
    "text": "A rule for T is developing another visit into a T on \nits right-hand side.",
    "start": "324200",
    "end": "330440"
  },
  {
    "text": "This is technically called Right Recursive.",
    "start": "330460",
    "end": "333500"
  },
  {
    "text": "And the Chomsky rules say you can be right recursive",
    "start": "333500",
    "end": "336640"
  },
  {
    "text": "If you want to do it the other way around, perversely,",
    "start": "336740",
    "end": "338979"
  },
  {
    "text": "and do T becomes T -> T L that's okay!",
    "start": "338980",
    "end": "341740"
  },
  {
    "text": "That's still within the Chomsky [Type 3] rules.",
    "start": "341740",
    "end": "344300"
  },
  {
    "text": "It can be purely right recursive, or purely left recursive.",
    "start": "344300",
    "end": "347560"
  },
  {
    "text": "I'll make it right recursive... it's a bit more intuitive to me.",
    "start": "347580",
    "end": "350539"
  },
  {
    "text": "And,just in case you think:",
    "start": "350540",
    "end": "352620"
  },
  {
    "text": "\"Well, this is going to go on forever, and I can imagine \nthe T becoming a D T",
    "start": "352620",
    "end": "356419"
  },
  {
    "text": "and you're taking digits for ever...",
    "start": "356420",
    "end": "358300"
  },
  {
    "text": "What's the thing that gets you out of all this in the end?\"",
    "start": "358300",
    "end": "360620"
  },
  {
    "text": "And the answer is - well - look back at the automaton \ndiagram and say \"Ah!,",
    "start": "360660",
    "end": "364820"
  },
  {
    "text": "in the end you take the escape route!\"",
    "start": "364820",
    "end": "367840"
  },
  {
    "text": "You take a T is defined as being an E",
    "start": "367840",
    "end": "370120"
  },
  {
    "text": "Thats one of the options. But what about E then?",
    "start": "370320",
    "end": "373440"
  },
  {
    "text": "Ah! well here's a classic example then,",
    "start": "373600",
    "end": "375980"
  },
  {
    "text": "of something that doesn't lead on to another rule,",
    "start": "375980",
    "end": "380080"
  },
  {
    "text": "it leads, in tree terms, ",
    "start": "380340",
    "end": "382540"
  },
  {
    "text": "to a leaf of the tree - a terminal symbol that goes \nnowhere else.",
    "start": "382700",
    "end": "386380"
  },
  {
    "text": "And what I'm hoping is there, is just a semicolon.",
    "start": "386380",
    "end": "389260"
  },
  {
    "text": "Of course you've spotted that the picture is completed --",
    "start": "389580",
    "end": "392939"
  },
  {
    "text": "refer back to the automaton again --",
    "start": "392940",
    "end": "394860"
  },
  {
    "text": "there's also a right-recursive option to say;",
    "start": "394860",
    "end": "399000"
  },
  {
    "text": "\"Yes, accept any digit",
    "start": "399360",
    "end": "401419"
  },
  {
    "text": "and go back into T\"",
    "start": "401420",
    "end": "402720"
  },
  {
    "text": "...so you go back into yourself again.",
    "start": "402720",
    "end": "405280"
  },
  {
    "text": "But equally you can now write at the bottom here --,",
    "start": "405300",
    "end": "408240"
  },
  {
    "text": "and it's in the handout --",
    "start": "408340",
    "end": "409780"
  },
  {
    "text": "we will do all of this in a linked handout --",
    "start": "409800",
    "end": "412440"
  },
  {
    "text": "So do read the Info block of this video. Find out \nwhere the handout is,",
    "start": "412440",
    "end": "415620"
  },
  {
    "start": "415620",
    "end": "416520"
  },
  {
    "text": "download it,",
    "start": "416520",
    "end": "417160"
  },
  {
    "text": "read it.",
    "start": "417160",
    "end": "417720"
  },
  {
    "text": "You'll find in this complete thing",
    "start": "417880",
    "end": "420700"
  },
  {
    "text": "I've also said a letter can be anything \nfrom a to z,  or A to Z",
    "start": "420700",
    "end": "425240"
  },
  {
    "text": "A digit can be anything from 0 to 9",
    "start": "425240",
    "end": "427240"
  },
  {
    "text": "That's the way you finish off that grammar.",
    "start": "427240",
    "end": "430419"
  },
  {
    "text": "This encourages you to think as computer scientists say:",
    "start": "430420",
    "end": "433960"
  },
  {
    "text": "top-down",
    "start": "434040",
    "end": "434940"
  },
  {
    "text": "You start with the purity of the abstraction of a \"sentence\",",
    "start": "435140",
    "end": "438900"
  },
  {
    "text": "and then you develop the detail below it.",
    "start": "438960",
    "end": "442080"
  },
  {
    "text": "Automata, really - I tried to show you the whole picture...",
    "start": "442960",
    "end": "446460"
  },
  {
    "text": "You can... for me, from an automaton, get a rather...",
    "start": "446460",
    "end": "450460"
  },
  {
    "text": "it's a bit top-down -- but you can always get more \nof an idea of how",
    "start": "450460",
    "end": "454060"
  },
  {
    "text": "all this is built up in sequential steps going through it.",
    "start": "454180",
    "end": "458020"
  },
  {
    "text": "There's nothing very magic there now,",
    "start": "458200",
    "end": "461620"
  },
  {
    "text": "its just emphasising what I said at the start:",
    "start": "461620",
    "end": "464540"
  },
  {
    "text": "To every machine-picture of a circle in \nthe [Chomsky] hierarchy,",
    "start": "464540",
    "end": "469980"
  },
  {
    "text": "there is a corresponding",
    "start": "469980",
    "end": "472100"
  },
  {
    "start": "472100",
    "end": "473540"
  },
  {
    "text": "grammatical expression of it.",
    "start": "473540",
    "end": "476280"
  },
  {
    "text": "It's just as we'll go out through that Chomsky hierarchy",
    "start": "476680",
    "end": "479960"
  },
  {
    "text": "the machine interpretations become more complicated",
    "start": "479960",
    "end": "483759"
  },
  {
    "text": "and more involving of this magic thing called \"memory\",",
    "start": "483760",
    "end": "487680"
  },
  {
    "text": "as an ancillary to what state is your machine in.",
    "start": "488340",
    "end": "491940"
  },
  {
    "text": "Down here in type 3, where we are at the moment,",
    "start": "492180",
    "end": "494639"
  },
  {
    "text": "all we're saying is: \"All you get is your states",
    "start": "494660",
    "end": "497540"
  },
  {
    "text": "and yes, you've got to model those correctly\",",
    "start": "497680",
    "end": "500919"
  },
  {
    "text": "but you dont need ancillary memory for any purpose.",
    "start": "500920",
    "end": "503720"
  },
  {
    "text": "Later on, we'll find that we do.",
    "start": "503720",
    "end": "506420"
  }
]