[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "Today we're going to do some live coding,\nand we're going to do something which",
    "start": "0",
    "end": "3240"
  },
  {
    "text": "sounds impossible, but is actually\nquite natural and practical, and that's",
    "start": "3240",
    "end": "7439"
  },
  {
    "text": "programming with infinite data\nstructures. And we're going to be using",
    "start": "7440",
    "end": "10950"
  },
  {
    "text": "Haskell for this, but it doesn't\nmatter if you don't know anything about",
    "start": "10950",
    "end": "13349"
  },
  {
    "text": "Haskell, because I'm going to explain\neverything in a simple way as we go",
    "start": "13349",
    "end": "16529"
  },
  {
    "text": "along. The first thing we're going to do,\nis we're going to start up the Haskell",
    "start": "16529",
    "end": "22020"
  },
  {
    "start": "19000",
    "end": "113000"
  },
  {
    "text": "system which we're going to be\nusing, which is called GHCi.",
    "start": "22020",
    "end": "25080"
  },
  {
    "text": "And if you'd like to try this stuff out\nfor yourself, this is freely available",
    "start": "25080",
    "end": "28529"
  },
  {
    "text": "online - just search for the obvious thing.\nBefore we start thinking about infinite",
    "start": "28529",
    "end": "31830"
  },
  {
    "text": "data structures, we're going to do a\nlittle bit of computation with a simple",
    "start": "31830",
    "end": "35100"
  },
  {
    "text": "finite data structure, which is a finite\nlist. So here's a finite list in Haskell.",
    "start": "35100",
    "end": "41070"
  },
  {
    "text": "It's just a list of numbers between 1\nand 20, and it's written 1..20. And if",
    "start": "41070",
    "end": "46230"
  },
  {
    "text": "we ask the Haskell system to evaluate\nthat, and we'll just expand it out, to",
    "start": "46230",
    "end": "50370"
  },
  {
    "text": "give the numbers between 1 and 20. And\nthen we can think, well what can we",
    "start": "50370",
    "end": "54538"
  },
  {
    "text": "actually do with the finite list? So, for\nexample, we could sum the list up, and we",
    "start": "54539",
    "end": "58980"
  },
  {
    "text": "get the expected answer 210. We could say,\nwell maybe we want to square all the",
    "start": "58980",
    "end": "63390"
  },
  {
    "text": "numbers between 1 and 20. So we can \"map\"\nthe squaring function over the list from",
    "start": "63390",
    "end": "69030"
  },
  {
    "text": "1 to 20, and we get the first 20 squares.\nWhat else could we do? Well, maybe we want",
    "start": "69030",
    "end": "74340"
  },
  {
    "text": "to filter out the even numbers from the\nlist between 1 and 20, and we can do that.",
    "start": "74340",
    "end": "79200"
  },
  {
    "text": "We just write \"filter even\" from 1 to 20.\nOr if we want to be a little bit more",
    "start": "79200",
    "end": "82770"
  },
  {
    "text": "fancy, we could combine everything we've\ndone up to this point, and we could say:",
    "start": "82770",
    "end": "86100"
  },
  {
    "text": "what is the sum, of the squares, of all\nthe even numbers between 1 and 20? And",
    "start": "86100",
    "end": "94909"
  },
  {
    "text": "hopefully 1,540 is the correct answer. So\nhere's a little example of a finite list,",
    "start": "94909",
    "end": "100469"
  },
  {
    "text": "1 up to 20, and then we've seen four small\nexamples of simple kinds of computation",
    "start": "100470",
    "end": "105869"
  },
  {
    "text": "which we could do on that finite list.\nBut the video today is about infinite",
    "start": "105869",
    "end": "110280"
  },
  {
    "text": "data structures. In particular, we're\ngoing to be talking about infinite lists.",
    "start": "110280",
    "end": "113548"
  },
  {
    "start": "113000",
    "end": "242000"
  },
  {
    "text": "So how do we do infinite lists in a\nlanguage like Haskell? Well, it's very",
    "start": "113549",
    "end": "117270"
  },
  {
    "text": "simple. Rather than writing something\nlike 1..20, we just say 1.., and when",
    "start": "117270",
    "end": "122670"
  },
  {
    "text": "I press return, this will be the infinite\nlist of all the natural numbers",
    "start": "122670",
    "end": "127200"
  },
  {
    "text": "beginning with 1. And this is going to go\non forever, but I can interrupt and you",
    "start": "127200",
    "end": "131879"
  },
  {
    "text": "can see we've already got up to\nabout 196,000 here. Okay, so it runs,",
    "start": "131879",
    "end": "136520"
  },
  {
    "text": "it runs quite quickly. So this is an\ninfinite list. So what can we actually do",
    "start": "136520",
    "end": "140480"
  },
  {
    "text": "with an infinite list? So let's try some\nof the things which we tried before",
    "start": "140480",
    "end": "144620"
  },
  {
    "text": "first of all. So maybe we can sum it? So\nlet's try summing the infinite list of",
    "start": "144620",
    "end": "149299"
  },
  {
    "text": "all the numbers beginning with one. And I\npress that, and of course this doesn't",
    "start": "149300",
    "end": "153650"
  },
  {
    "text": "actually work, because there's an\ninfinite number of values in this list,",
    "start": "153650",
    "end": "157730"
  },
  {
    "text": "and we try and sum them - it's never\ngoing to finish. So I need to",
    "start": "157730",
    "end": "161030"
  },
  {
    "text": "interrupt this one here. Let's try\nsomething else. Maybe I can try filtering",
    "start": "161030",
    "end": "166040"
  },
  {
    "text": "the even numbers from an infinite list,\nand hopefully this will work?",
    "start": "166040",
    "end": "170299"
  },
  {
    "text": "And yes it does. What we get this time, is\nwe get the infinite list of all the even",
    "start": "170300",
    "end": "176569"
  },
  {
    "text": "numbers. Okay so you can see there's no\nodd numbers in the list here. What we're",
    "start": "176569",
    "end": "180620"
  },
  {
    "text": "actually doing, is we're taking an\ninfinite data structure as an input,",
    "start": "180620",
    "end": "183799"
  },
  {
    "text": "we're taking an infinite list, and we're\nprocessing it, and we're giving an",
    "start": "183799",
    "end": "187129"
  },
  {
    "text": "infinite data structure as an output.\nWe're taking an infinite list in, and",
    "start": "187130",
    "end": "190970"
  },
  {
    "text": "giving an infinite list out, which is\nquite an interesting idea. So let's try",
    "start": "190970",
    "end": "195200"
  },
  {
    "text": "another example. Let's try filtering all\nthe numbers less than 100, from the",
    "start": "195200",
    "end": "199970"
  },
  {
    "text": "infinite list beginning with 1. And this\nkind of works, but not quite. There's a",
    "start": "199970",
    "end": "204200"
  },
  {
    "text": "little problem at the end. So we get all\nthe numbers from 1 up to 99, which is",
    "start": "204200",
    "end": "209390"
  },
  {
    "text": "exactly what we expect, But now it's just\nsitting here, and that's because it's",
    "start": "209390",
    "end": "212750"
  },
  {
    "text": "basically trying to find another number\nwhich is less than 100. And it will never",
    "start": "212750",
    "end": "217160"
  },
  {
    "text": "succeed with that, but it doesn't know\nit's not going to find one, so it will go",
    "start": "217160",
    "end": "220850"
  },
  {
    "text": "on forever. Ok, so I have to break out of\nthis one. And this again illustrates the",
    "start": "220850",
    "end": "225320"
  },
  {
    "text": "idea that when you're programming with\ninfinite data structures, you need to be",
    "start": "225320",
    "end": "228320"
  },
  {
    "text": "careful. We tried to sum an infinite data\nstructure, and it didn't work,",
    "start": "228320",
    "end": "232010"
  },
  {
    "text": "it just went immediately into an\ninfinite loop. We're trying to filter",
    "start": "232010",
    "end": "234829"
  },
  {
    "text": "here from an infinite data structure, and\nit gave us the expected results, but in",
    "start": "234829",
    "end": "238940"
  },
  {
    "text": "the end it just hung. So you need to be\ncareful with this kind of thing. Let's",
    "start": "238940",
    "end": "242660"
  },
  {
    "text": "try one more example. Let's try taking 20\nelements, from the infinite list",
    "start": "242660",
    "end": "248150"
  },
  {
    "text": "beginning with 1. And this of course\nworks. We just get exactly what we expect,",
    "start": "248150",
    "end": "252950"
  },
  {
    "text": "we get the numbers between 1 and 20.\nWe're taking an infinite data structure",
    "start": "252950",
    "end": "257268"
  },
  {
    "text": "as an input, we're taking the infinite\nlist of all the values from 1 onwards,",
    "start": "257269",
    "end": "260570"
  },
  {
    "text": "and we're getting a finite data\nstructure as the output, we're getting a",
    "start": "260570",
    "end": "263750"
  },
  {
    "text": "finite list of all the numbers\nbetween 1 and 20. How does",
    "start": "263750",
    "end": "266950"
  },
  {
    "text": "this kind of behavior actually work? And\nit's to do with the evaluation order",
    "start": "266950",
    "end": "271480"
  },
  {
    "text": "which you have in your programming\nlanguage. Most languages are what's",
    "start": "271480",
    "end": "275440"
  },
  {
    "text": "called strict, or eager. And that means\nwhen you have a parameter, like this",
    "start": "275440",
    "end": "279880"
  },
  {
    "text": "infinite list, you completely\nevaluate that parameter",
    "start": "279880",
    "end": "282760"
  },
  {
    "text": "before you try and do anything with it.\nSo if you're in an eager, or strict,",
    "start": "282760",
    "end": "286930"
  },
  {
    "text": "language and you try and run \"take 20\" of\nan infinite list, it's never going to get",
    "start": "286930",
    "end": "292030"
  },
  {
    "text": "anywhere, because it will just attempt to\nevaluate the infinite list, and that will",
    "start": "292030",
    "end": "296080"
  },
  {
    "text": "never stop, and you'll never actually get\nany result. But languages like Haskell are",
    "start": "296080",
    "end": "300280"
  },
  {
    "text": "lazy. When you have a parameter in\nHaskell, you only evaluate it on demand.",
    "start": "300280",
    "end": "305440"
  },
  {
    "text": "So, the demand here, is that we want to\ntake 20 elements from the infinite list.",
    "start": "305440",
    "end": "310570"
  },
  {
    "text": "So the two parts here, \"take 20\" and the\ninfinite list, they kind of collaborate",
    "start": "310570",
    "end": "316090"
  },
  {
    "text": "together and say, well, we only actually\nneed to generate 20 elements to proceed,",
    "start": "316090",
    "end": "319780"
  },
  {
    "text": "so we don't actually generate the entire\ninfinite list. So in Haskell, when we",
    "start": "319780",
    "end": "324550"
  },
  {
    "text": "write one up to infinity, it's not really\nan infinite list, it's a *potentially*",
    "start": "324550",
    "end": "328569"
  },
  {
    "text": "infinite list, which gets evaluated as\nmuch as required by the context in which",
    "start": "328570",
    "end": "333280"
  },
  {
    "text": "we use it. There's some small little\nexamples. Let's maybe trying something a",
    "start": "333280",
    "end": "337510"
  },
  {
    "start": "334000",
    "end": "485000"
  },
  {
    "text": "bit more interesting now. Let's try and\nwrite a program which generates all the",
    "start": "337510",
    "end": "342160"
  },
  {
    "text": "prime numbers - the infinite list of all\nprime numbers. So let's remind yourself",
    "start": "342160",
    "end": "346750"
  },
  {
    "text": "what a prime number is. So a number is\nprime if it's only factors, so that's the",
    "start": "346750",
    "end": "351730"
  },
  {
    "text": "numbers that divide into it exactly, are\n1 and itself. So for example 7 is prime,",
    "start": "351730",
    "end": "357490"
  },
  {
    "text": "because it's got two factors, 1 and 7, but\n15 is not prime, because it's got four",
    "start": "357490",
    "end": "361599"
  },
  {
    "text": "factors. So let's write a program to do\nthis. So first of all, we're going to",
    "start": "361600",
    "end": "366220"
  },
  {
    "text": "write a small function called \"factors\",\nwhich is going to return all the numbers",
    "start": "366220",
    "end": "370930"
  },
  {
    "text": "which divide exactly into a number. So if\nI give it a number like n, I'm going to",
    "start": "370930",
    "end": "375580"
  },
  {
    "text": "return all the values x, such the x comes\nfrom the list 1 up to n. And if I take",
    "start": "375580",
    "end": "380860"
  },
  {
    "text": "the remainder when I divide n by x, then\nthat had better be 0. So this is just",
    "start": "380860",
    "end": "386439"
  },
  {
    "text": "running over all the numbers between 1\nand the given number, and I could be",
    "start": "386440",
    "end": "390010"
  },
  {
    "text": "clever here and write square root of n,\nbut let's just keep it simple - you run",
    "start": "390010",
    "end": "393310"
  },
  {
    "text": "over all the numbers between 1 and the\ngiven number, and you just check is the",
    "start": "393310",
    "end": "396639"
  },
  {
    "text": "remainder when I divide one by the other\nzero. So for example, if I say what's the",
    "start": "396640",
    "end": "400930"
  },
  {
    "text": "factors of 7, I just get two factors\none and 7, so that's a prime number.",
    "start": "400930",
    "end": "404710"
  },
  {
    "text": "And if I say what's the factors of 15, I\nget four factors, 1, 3, 5 and 15,",
    "start": "404710",
    "end": "409870"
  },
  {
    "text": "so that's not a prime number. And\nthis tells us basically how we can",
    "start": "409870",
    "end": "413770"
  },
  {
    "text": "define a very simple program to check if\na number is prime. I can say, a number n",
    "start": "413770",
    "end": "419409"
  },
  {
    "text": "is prime, if and only if, if I look at its\nfactors, if I get back exactly the list 1",
    "start": "419409",
    "end": "426099"
  },
  {
    "text": "and n. So that's my definition of what it\nmeans to be a prime number. Now I can",
    "start": "426099",
    "end": "429940"
  },
  {
    "text": "check that this actually works. I can say\nis 7 a prime number? And it says true,",
    "start": "429940",
    "end": "434889"
  },
  {
    "text": "because it has exactly two factors. And I\ncan say is 15 a prime number? And I get",
    "start": "434889",
    "end": "440650"
  },
  {
    "text": "false, because it's got more than two\nfactors. Now we've got all we need to",
    "start": "440650",
    "end": "444580"
  },
  {
    "text": "actually generate the infinite list of\nall prime numbers. And we can use, you can",
    "start": "444580",
    "end": "448960"
  },
  {
    "text": "do this simply using the filter function.\nIf we just now filter, all the prime",
    "start": "448960",
    "end": "453159"
  },
  {
    "text": "numbers from the infinite list beginning\nwith one, then as soon as I hit return,",
    "start": "453159",
    "end": "457870"
  },
  {
    "text": "this thing will start generating the\ninfinite list of all prime numbers, ok.",
    "start": "457870",
    "end": "463210"
  },
  {
    "text": "And you can see here, it's already gone\nquite far, we've got up to about 16,000,",
    "start": "463210",
    "end": "466960"
  },
  {
    "text": "and you can check that all of these\nnumbers are actually prime. But actually",
    "start": "466960",
    "end": "469870"
  },
  {
    "text": "this is quite a modern laptop, we'd\nexpect this program to run much faster",
    "start": "469870",
    "end": "473830"
  },
  {
    "text": "than this, so what we'd like to do now is\nsee how we can take this simple means of",
    "start": "473830",
    "end": "478120"
  },
  {
    "text": "producing the infinite list of all the\nprime numbers, and actually make it go a",
    "start": "478120",
    "end": "481719"
  },
  {
    "text": "lot faster, by using a 2000 year\nold algorithm.  Did they",
    "start": "481719",
    "end": "485529"
  },
  {
    "start": "485000",
    "end": "558000"
  },
  {
    "text": "have algorithms 2000 years ago?  Yes they\ndid, the ancient Greeks discovered",
    "start": "485529",
    "end": "488830"
  },
  {
    "text": "many things, including many interesting\nalgorithms. So here is a 2000 ",
    "start": "488830",
    "end": "493930"
  },
  {
    "text": "year old algorithm, which is called the\nsieve of Eratosthenes, after a Greek",
    "start": "493930",
    "end": "498039"
  },
  {
    "text": "mathematician, and this is a very very\nsimple algorithm for generating the",
    "start": "498039",
    "end": "501909"
  },
  {
    "text": "infinite list of all the prime numbers.\nSo let's see how it actually works. The",
    "start": "501909",
    "end": "506319"
  },
  {
    "text": "first step, is we write down the infinite\nlist, 2, 3, 4, all the way up to infinity.",
    "start": "506319",
    "end": "511539"
  },
  {
    "text": "The second step, is we mark the first\nvalue p, so that's going to be 2, as being",
    "start": "511539",
    "end": "516518"
  },
  {
    "text": "a prime number. And the third step is\nto remove all the multiples of p, so",
    "start": "516519",
    "end": "520779"
  },
  {
    "text": "initially that will be 2, from the list.\nAnd the fourth step, is that we go back",
    "start": "520779",
    "end": "524740"
  },
  {
    "text": "to the second step. So it's a very simple,\nfour step process, for generating all the",
    "start": "524740",
    "end": "529480"
  },
  {
    "text": "prime numbers. And an interesting\nobservation here, is that",
    "start": "529480",
    "end": "532029"
  },
  {
    "text": "infinity occurs all over the place in\nthis algorithm. We're writing down an",
    "start": "532030",
    "end": "536290"
  },
  {
    "text": "infinite list at the beginning; we're\nremoving an infinite number of elements",
    "start": "536290",
    "end": "540699"
  },
  {
    "text": "from an infinite list in step 3; and then,\nwe're having an infinite loop in step 4,",
    "start": "540700",
    "end": "545590"
  },
  {
    "text": "because we're looping around here,\nforever. So let's see how this 2,000 year",
    "start": "545590",
    "end": "549280"
  },
  {
    "text": "old algorithm actually works in practice,\nwith a little example. So the first step",
    "start": "549280",
    "end": "554590"
  },
  {
    "text": "in the algorithm was we write down all\nthe numbers from 2 up to infinity. So",
    "start": "554590",
    "end": "558580"
  },
  {
    "text": "let's stop at 12, but of course, in\nprinciple, we go on forever here. Then the",
    "start": "558580",
    "end": "562510"
  },
  {
    "text": "next step is, we mark the first value in\nthe list as being a prime number. So",
    "start": "562510",
    "end": "566890"
  },
  {
    "text": "we'll say 2 is our first prime number.\nThen we need to remove all the multiples",
    "start": "566890",
    "end": "572980"
  },
  {
    "text": "of 2 from the list, and let's do this by\nputting a small barrier under all the",
    "start": "572980",
    "end": "577329"
  },
  {
    "text": "multiples of 2, so that's the even\nnumbers - oops, forgot 11 - and we'll think",
    "start": "577330",
    "end": "582370"
  },
  {
    "text": "of these barriers as kind of stopping\nthese numbers falling down the page. So",
    "start": "582370",
    "end": "586480"
  },
  {
    "text": "we imagine the numbers trying to fall\ndown the page now. So the 3 will fall",
    "start": "586480",
    "end": "589720"
  },
  {
    "text": "down, the 5 will fall down, and in general\nall the odd numbers will fall down,",
    "start": "589720",
    "end": "593319"
  },
  {
    "text": "because the even numbers are stopped by\na little barrier. And you can think of",
    "start": "593320",
    "end": "597190"
  },
  {
    "text": "this as being a sieve. This is why it's\ncalled the sieve of Eratosthenes, because",
    "start": "597190",
    "end": "600430"
  },
  {
    "text": "you're blocking some numbers from coming\ndown the page. And now we go back to the",
    "start": "600430",
    "end": "604630"
  },
  {
    "text": "start again. So 3 is a prime number, and\nthen we put a small barrier under all",
    "start": "604630",
    "end": "610360"
  },
  {
    "text": "the multiples of 3. So 6 is already gone,\n9 and 12, and then the numbers that are",
    "start": "610360",
    "end": "615220"
  },
  {
    "text": "not stopped by the barrier, or sieved out,\nthey come down the page. So 5 comes down,",
    "start": "615220",
    "end": "620259"
  },
  {
    "text": "7 comes down, 11 comes down. And we continue.\n5 is a prime number. We remove all the",
    "start": "620260",
    "end": "626020"
  },
  {
    "text": "multiples of 5; the numbers come down the\npage, and so on. So you can see the basic",
    "start": "626020",
    "end": "630700"
  },
  {
    "text": "idea here - we're generating, in a very\nsimple way, all the prime numbers. We're",
    "start": "630700",
    "end": "635410"
  },
  {
    "text": "getting 2, 3, 5, 7, and eventually 11, and\nso on. So that's the algorithm. What we're",
    "start": "635410",
    "end": "640600"
  },
  {
    "text": "going to do now, is think how can we\nactually implement this in our a",
    "start": "640600",
    "end": "644380"
  },
  {
    "text": "programming language. And we'll see\nthat we actually only need a two-line",
    "start": "644380",
    "end": "647620"
  },
  {
    "text": "program to implement this. It's a\nvery direct translation of the",
    "start": "647620",
    "end": "651730"
  },
  {
    "start": "651000",
    "end": "766000"
  },
  {
    "text": "2000 year old algorithm into an actual\nworking program. So let me start",
    "start": "651730",
    "end": "655779"
  },
  {
    "text": "up an editor, and we're going to write a\nprogram now. So we're going to generate",
    "start": "655780",
    "end": "659560"
  },
  {
    "text": "the infinite list of all the prime\nnumbers, and I'm going to define that by",
    "start": "659560",
    "end": "663790"
  },
  {
    "text": "sieving the infinite\nlist starting from 2.",
    "start": "663790",
    "end": "667920"
  },
  {
    "text": "So the first step of the algorithm, was\nwe write down all numbers from 2 onwards.",
    "start": "667920",
    "end": "672089"
  },
  {
    "text": "So that's what we've got here, and then\nwe're going to pass it into a function",
    "start": "672089",
    "end": "674760"
  },
  {
    "text": "called \"sieve\", which we haven't written\nyet, which is going to do all the other",
    "start": "674760",
    "end": "677700"
  },
  {
    "text": "steps for us. So what does sieve do? Well,\nsieve is going to take the list apart. So",
    "start": "677700",
    "end": "683250"
  },
  {
    "text": "p will be the first thing in the list, so\nthat's initially going to be 2. And ps",
    "start": "683250",
    "end": "687839"
  },
  {
    "text": "will be everything else, so that's 3, 4, 5\netc, all the way up to infinity. And then",
    "start": "687839",
    "end": "692820"
  },
  {
    "text": "what we're going to do, on the right hand\nside, is we'll keep the first value, so",
    "start": "692820",
    "end": "696450"
  },
  {
    "text": "that's like marking the first number as\nbeing prime. And then we're going to",
    "start": "696450",
    "end": "700019"
  },
  {
    "text": "recursively sieve something. So what we're\ngoing to do, is we're going to sieve out",
    "start": "700019",
    "end": "705329"
  },
  {
    "text": "all the numbers which are multiples of p.\nWhat this part in the brackets here",
    "start": "705329",
    "end": "711899"
  },
  {
    "text": "does is, is it takes the infinite list of\nall the remaining numbers - so 3 all the",
    "start": "711899",
    "end": "716399"
  },
  {
    "text": "way up to infinity - and it's going to\nremove all the multiples of 2. So it's",
    "start": "716399",
    "end": "720870"
  },
  {
    "text": "just running over the list, and it's\nremoving all the numbers which are",
    "start": "720870",
    "end": "724500"
  },
  {
    "text": "multiples of 2. So this will remove\nthe 4, the 6, the 8, and the so on.",
    "start": "724500",
    "end": "728760"
  },
  {
    "text": "And then we just call ourselves\nrecursively again. And this is the entire",
    "start": "728760",
    "end": "732450"
  },
  {
    "text": "program. So actually, the program is\nshorter than the English description we",
    "start": "732450",
    "end": "737070"
  },
  {
    "text": "had of the algorithm. It's useful to\nactually think, how does each step",
    "start": "737070",
    "end": "740550"
  },
  {
    "text": "actually get represented here? Well the\nfirst step was, we write down the numbers",
    "start": "740550",
    "end": "744930"
  },
  {
    "text": "from 2 up to infinity, which is here. The\nsecond step is, we mark the first value",
    "start": "744930",
    "end": "749790"
  },
  {
    "text": "as being prime, so that's the value p\nhere. The third step is, we remove all the",
    "start": "749790",
    "end": "755670"
  },
  {
    "text": "multiples of p, so all the multiples of\ntwo initially from the list, and that's",
    "start": "755670",
    "end": "759089"
  },
  {
    "text": "the part here. And then the final step is,\nwe run the algorithm again from step 2,",
    "start": "759089",
    "end": "763860"
  },
  {
    "text": "and that's calling the sieve function. So\nwe've got our program here, so let's see",
    "start": "763860",
    "end": "767760"
  },
  {
    "start": "766000",
    "end": "852000"
  },
  {
    "text": "it actually working. So let me start up\nthe Haskell system again. Good, we've got",
    "start": "767760",
    "end": "773730"
  },
  {
    "text": "no errors, which is good. So let's run the\nprime number program. And here we get all",
    "start": "773730",
    "end": "778829"
  },
  {
    "text": "the prime numbers again. So it gives\nexactly the same results as the simpler",
    "start": "778829",
    "end": "781769"
  },
  {
    "text": "algorithm, which we wrote before, but it\ndoes so a lot more quickly. And if you do",
    "start": "781769",
    "end": "785790"
  },
  {
    "text": "some simple experiments, for numbers\nup this kind of size, it runs about 10",
    "start": "785790",
    "end": "789570"
  },
  {
    "text": "times faster than the simple algorithm\nwhich we had previously. So what could we",
    "start": "789570",
    "end": "793529"
  },
  {
    "text": "do with this? Well we could do a whole\nbunch of things. So, for example, if I",
    "start": "793529",
    "end": "797579"
  },
  {
    "text": "wanted a hundred prime\nnumbers, I don't now ",
    "start": "797579",
    "end": "799620"
  },
  {
    "text": "need to write a program which generates\n100 prime numbers, I just take the",
    "start": "799620",
    "end": "802980"
  },
  {
    "text": "infinite list of all the prime numbers,\nand I take a hundred. So I've kind of",
    "start": "802980",
    "end": "807720"
  },
  {
    "text": "separated my \"control\" part, which is\ntaking a hundred numbers, from my \"data\"",
    "start": "807720",
    "end": "812129"
  },
  {
    "text": "part, which is having an infinite list of\nprimes. And this idea of separating",
    "start": "812130",
    "end": "815460"
  },
  {
    "text": "control and data, using infinite data\nstructures, is a very powerful way of",
    "start": "815460",
    "end": "819720"
  },
  {
    "text": "thinking about programming.\nAnd I can do other things as well.",
    "start": "819720",
    "end": "822899"
  },
  {
    "text": "So for example if I wanted to say, give\nme all the prime numbers less than 100,",
    "start": "822900",
    "end": "828270"
  },
  {
    "text": "I don't need to write a separate program\nfor that now. I just take my infinite",
    "start": "828270",
    "end": "832950"
  },
  {
    "text": "list, of all the prime numbers, and I say\n\"takeWhile\" less than 100, and I get that.",
    "start": "832950",
    "end": "838380"
  },
  {
    "text": "And in many languages, if you wanted to\nwrite these two separate programs, you'd",
    "start": "838380",
    "end": "842280"
  },
  {
    "text": "need to write some separate programs,\nbasically. But if you can manipulate",
    "start": "842280",
    "end": "846270"
  },
  {
    "text": "infinite data structures, you just have\nyour infinite list of primes, and then",
    "start": "846270",
    "end": "849750"
  },
  {
    "text": "you can do whatever you want with them\nafterwards: you can select what parts you",
    "start": "849750",
    "end": "852540"
  },
  {
    "text": "like. Just to conclude, let me do one\nfinal little example, to do with what's",
    "start": "852540",
    "end": "856620"
  },
  {
    "text": "called twin primes.\nSo twin primes, are primes",
    "start": "856620",
    "end": "860279"
  },
  {
    "text": "which differ by two -- so 3 and 5 are twins,\nbecause they differ by two; 5 and 7 are",
    "start": "860280",
    "end": "865950"
  },
  {
    "text": "twins, because they differ by two; 7 and 11\nare not twins, because they differ by four.",
    "start": "865950",
    "end": "869430"
  },
  {
    "text": "So how do we write a program, using what\nwe've already done, that generates all",
    "start": "869430",
    "end": "873570"
  },
  {
    "text": "the twin primes. So first of all, let me say\nwhat it means to be a twin. So, I'll say a",
    "start": "873570",
    "end": "879120"
  },
  {
    "text": "pair (x,y) is a twin, if y is x+2. So\nfor example, if I say is 3 and 5 a twin,",
    "start": "879120",
    "end": "886950"
  },
  {
    "text": "it will say true; and if I say is 7 and 11\na twin, then I get no. So how do I use",
    "start": "886950",
    "end": "892710"
  },
  {
    "text": "this to write a program that generates\nall the twin primes. Well what I'm going",
    "start": "892710",
    "end": "896010"
  },
  {
    "text": "to do, is I'm going to generate the\ninfinite list of all the twins, and I'm",
    "start": "896010",
    "end": "899730"
  },
  {
    "text": "going to simply filter twin, from \"zip\"\nof primes and \"tail\" primes. So there's a",
    "start": "899730",
    "end": "905370"
  },
  {
    "text": "couple of bits we haven't seen before\nhere. What does tail do? So tail takes a",
    "start": "905370",
    "end": "909180"
  },
  {
    "text": "list, which could be infinite, and removes\nthe first thing. So if we write tail of",
    "start": "909180",
    "end": "913980"
  },
  {
    "text": "primes, what we're going to do is take\nthe infinite list of all prime numbers,",
    "start": "913980",
    "end": "917279"
  },
  {
    "text": "and throw the 2 away. So we'll get 3, 5,\n7, 11, etc. What zip does is it takes two",
    "start": "917280",
    "end": "923190"
  },
  {
    "text": "lists, and they can be finite or infinite.\nSo suppose I've got two lists of five",
    "start": "923190",
    "end": "926250"
  },
  {
    "text": "numbers. What zip does, is it pairs up the\ncorresponding elements in the two lists.",
    "start": "926250",
    "end": "930720"
  },
  {
    "text": "So it pairs up the first thing,\nthe second, third, fourth",
    "start": "930720",
    "end": "933000"
  },
  {
    "text": "and fifth. So what it's going to do here\nwith the infinite lists, is we're going",
    "start": "933000",
    "end": "936390"
  },
  {
    "text": "to zip, the infinite list of all the\nprime numbers, with the infinite list of",
    "start": "936390",
    "end": "941220"
  },
  {
    "text": "all the prime numbers apart from the\nfirst one. So what we're going to get",
    "start": "941220",
    "end": "944910"
  },
  {
    "text": "coming out of this zip, is an infinite\nlist of pairs, of each prime number and",
    "start": "944910",
    "end": "949709"
  },
  {
    "text": "the next prime number. So we'll get\n2 and 3, 3 and 5, and so on, and so on.",
    "start": "949710",
    "end": "954990"
  },
  {
    "text": "And then all we're going to do, is take\nthat infinite list of all of those pairs,",
    "start": "954990",
    "end": "958410"
  },
  {
    "text": "and filter the twins out of it. And this\nis enough to generate all the twin",
    "start": "958410",
    "end": "962579"
  },
  {
    "text": "primes. So I can test this out. Here's \nthe infinite list of twin primes. And",
    "start": "962580",
    "end": "966420"
  },
  {
    "text": "this is a one-line program to do this,\nbased on a two-line program which we had,",
    "start": "966420",
    "end": "970380"
  },
  {
    "text": "to generate the infinite list of all the\nprime numbers. Going back to where I",
    "start": "970380",
    "end": "973680"
  },
  {
    "text": "started, programming with infinite data\nstructures sounds impossible, but as",
    "start": "973680",
    "end": "978000"
  },
  {
    "text": "we've seen today, and I hope to have\nconvinced you, it's actually quite simple,",
    "start": "978000",
    "end": "981060"
  },
  {
    "text": "and natural, and practical.\n That's all because Haskell is lazy?",
    "start": "981060",
    "end": "986040"
  },
  {
    "text": "Yeah it's because of laziness. So you can\ndo this in other programming languages,",
    "start": "986040",
    "end": "990120"
  },
  {
    "text": "but essentially you need to fake lazy\nevaluation in some way. And languages are",
    "start": "990120",
    "end": "994710"
  },
  {
    "text": "providing a bit more support these days\nfor doing that and there's...",
    "start": "994710",
    "end": "1000490"
  }
]