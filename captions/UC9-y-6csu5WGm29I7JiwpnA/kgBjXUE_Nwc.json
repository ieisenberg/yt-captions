[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "Today we are going to be going over some some basic sorting algorithms [simply] case",
    "start": "370",
    "end": "4680"
  },
  {
    "text": "So you have a list [of] numbers and you want to sort that into?",
    "start": "4680",
    "end": "7108"
  },
  {
    "text": "numerical order and",
    "start": "7630",
    "end": "9280"
  },
  {
    "text": "[there's] all sorts of reasons you want to do that say you've got a spreadsheet open",
    "start": "9280",
    "end": "12900"
  },
  {
    "text": "And you want to sort one column that [use] [a] sorting algorithm, but also, there's the less obvious",
    "start": "12900",
    "end": "18240"
  },
  {
    "text": "applications all Sorts of artificial intelligent stuff",
    "start": "19000",
    "end": "21420"
  },
  {
    "text": "if you're playing a computer game",
    "start": "23619",
    "end": "24990"
  },
  {
    "text": "And there's some sort of AI somewhere there will be somewhere that they'll definitely using sorting to find the best way to go about doing",
    "start": "24990",
    "end": "30480"
  },
  {
    "text": "something",
    "start": "30480",
    "end": "31539"
  },
  {
    "start": "31000",
    "end": "182000"
  },
  {
    "text": "Let me explain. How bubble Sort works. It's got some playing [cards] here, so I'll just tell you I'll deal them out upside down",
    "start": "31540",
    "end": "37889"
  },
  {
    "text": "So I can't see hopefully won't come out Sorted",
    "start": "37890",
    "end": "40020"
  },
  {
    "text": "So we've got five three seven eight okay, so this is actually quite a boring bubble",
    "start": "40239",
    "end": "45899"
  },
  {
    "text": "Sort you",
    "start": "45899",
    "end": "46420"
  },
  {
    "text": "Go through the list you compare each pair of elements in turn",
    "start": "46420",
    "end": "49739"
  },
  {
    "text": "And if you need to swap them you swap them so you need to swap three and five",
    "start": "49739",
    "end": "53248"
  },
  {
    "text": "Yes, because three is lower than five okay",
    "start": "53800",
    "end": "55829"
  },
  {
    "text": "So we swapped those over then we look at five and seven - we've swapped those there",
    "start": "55829",
    "end": "59639"
  },
  {
    "text": "We don't seven and eight three sort those no. We don't let me go back to start based and",
    "start": "59640",
    "end": "64048"
  },
  {
    "text": "[tweenies] Swap three and five no five and seven no seven and eight",
    "start": "64989",
    "end": "69118"
  },
  {
    "text": "No, that was very simple very [easy] once we've gone through the list one full time, and there's no swaps",
    "start": "69299",
    "end": "74699"
  },
  {
    "text": "We know the list must be sorted so I'll show you that with a few more cards, okay, so let's deal out",
    "start": "74700",
    "end": "79649"
  },
  {
    "text": "three four five",
    "start": "80650",
    "end": "82650"
  },
  {
    "text": "six seven eight cards, okay",
    "start": "83259",
    "end": "86519"
  },
  {
    "text": "So we start from the left do we need to swap seven and three yes?",
    "start": "86520",
    "end": "89460"
  },
  {
    "text": "Doing you swap seven and ten no do we need to swap ten six yes, ten four yes, ten and eight. Yes",
    "start": "89790",
    "end": "96779"
  },
  {
    "text": "Ten and five yes, ten and seven yes, okay. Let me go back to the start",
    "start": "97210",
    "end": "101729"
  },
  {
    "text": "To need to stop three and seven no seven or six yes seven or four yes, seven and eight no eight and five yes",
    "start": "102520",
    "end": "109828"
  },
  {
    "text": "eight and seven yes, eight and Ten no",
    "start": "109899",
    "end": "112529"
  },
  {
    "text": "That's the start three and six no six and four. Yes six and seven no 7:05",
    "start": "113049",
    "end": "119459"
  },
  {
    "text": "Yes",
    "start": "119460",
    "end": "119920"
  },
  {
    "text": "[seven] or 7 no 8 and 7 no 8 and 10 no",
    "start": "119920",
    "end": "123328"
  },
  {
    "text": "practical start [3] and [4] no 4 and 6 no 6 and 5",
    "start": "123790",
    "end": "127649"
  },
  {
    "text": "Yes 6 and 7 no 6 and 7 no 7 and 8 no 8 and 10 no back to start",
    "start": "127649",
    "end": "134489"
  },
  {
    "text": "Three and four no four and five no five and six no six and seven no seven seven no",
    "start": "135370",
    "end": "141629"
  },
  {
    "text": "Seven and eight no eight and ten no, so we've sorted the list I took a lot of effort",
    "start": "141790",
    "end": "147030"
  },
  {
    "text": "and if you had even more cars it would take",
    "start": "147820",
    "end": "149820"
  },
  {
    "text": "Even longer you can't actually make bubble sauce slightly simpler, so let me just do a quick",
    "start": "150340",
    "end": "154769"
  },
  {
    "text": "first pass over this so",
    "start": "155860",
    "end": "157780"
  },
  {
    "text": "Swap those don't swap those that's all those dents all those don't stop those do swap those do swap those",
    "start": "157780",
    "end": "162479"
  },
  {
    "text": "What you do now is after every pass the highest card will definitely have been swapped all the way to the end",
    "start": "162580",
    "end": "167190"
  },
  {
    "text": "So actually you don't need to check that one anymore. You can move that off and just go right",
    "start": "167560",
    "end": "171300"
  },
  {
    "text": "Don't stop those no those no those no those no those no those yes, okay?",
    "start": "171820",
    "end": "178259"
  },
  {
    "text": "So now you know eight is actually the next [card] there, but it's still not a very good algorithm. I can demonstrate",
    "start": "178260",
    "end": "182670"
  },
  {
    "start": "182000",
    "end": "280000"
  },
  {
    "text": "Merge sort to you if you like so for that. I have got another prop",
    "start": "183280",
    "end": "186119"
  },
  {
    "text": "We bring in this so I'll deal out seven cards the merge, sort we split the [list] into two parts, okay?",
    "start": "186120",
    "end": "192239"
  },
  {
    "text": "So we've got this left half goes there and the right half goes there",
    "start": "192239",
    "end": "194909"
  },
  {
    "text": "we've got two lists now this list gets put into to this let's guess listen to two and",
    "start": "194980",
    "end": "199618"
  },
  {
    "text": "Then each of these four lists gets put into two until you've got either one card or or no cards in [your] list now what?",
    "start": "200140",
    "end": "206309"
  },
  {
    "text": "we do we look at each of these pairs of",
    "start": "206310",
    "end": "208769"
  },
  {
    "text": "Sorted lists and",
    "start": "209019",
    "end": "210069"
  },
  {
    "text": "we merge them back together in the right order by looking at the top card on each list first of all we put four and",
    "start": "210070",
    "end": "215249"
  },
  {
    "text": "Then we put seven okay, so now we've that's a sorted list there, okay?",
    "start": "215250",
    "end": "219419"
  },
  {
    "text": "So with ten and eight we look at the lowest card put that in first",
    "start": "219420",
    "end": "222030"
  },
  {
    "text": "We've got eight then we've got ten and then this one. We've got five and then we've got seven",
    "start": "222030",
    "end": "227339"
  },
  {
    "text": "But these two we've got",
    "start": "228100",
    "end": "229690"
  },
  {
    "text": "Three and the Empty list so three just goes there hopefully everyone will agree that a list with [just] one card in it is",
    "start": "229690",
    "end": "235229"
  },
  {
    "text": "Sorted I've separated them just a clarity so you can see the cards",
    "start": "235360",
    "end": "238470"
  },
  {
    "text": "You should only bear to look at the top [element] at each",
    "start": "238470",
    "end": "240400"
  },
  {
    "text": "List so now what we do we merge these two sub lists part together",
    "start": "240400",
    "end": "243900"
  },
  {
    "text": "Which is the lowest card between [four] and eight?",
    "start": "243940",
    "end": "245940"
  },
  {
    "text": "Those are the two we can see so we pick four",
    "start": "246070",
    "end": "247920"
  },
  {
    "text": "I goes in that list and then we say which is lowest between seven and eight",
    "start": "247920",
    "end": "250709"
  },
  {
    "text": "It's seven which is lowest between eight and nothing it's eight",
    "start": "250709",
    "end": "254369"
  },
  {
    "text": "And then similarly ten and nothing it's ten and then look at these two lists we take pick the lowest",
    "start": "254370",
    "end": "259560"
  },
  {
    "text": "so we've got three and then got an empty list so we just put five there and",
    "start": "259560",
    "end": "263970"
  },
  {
    "text": "Seven there, so we've got two so to [lists] now and all we do is merge them back together",
    "start": "264490",
    "end": "269340"
  },
  {
    "text": "So we've got four here and three [here] so threes lowest",
    "start": "269340",
    "end": "271919"
  },
  {
    "text": "[so] that goes first between 4 & 5 5 & 7 & 7 7 & 7 8 7 8 and nothing it's 8 and then",
    "start": "271919",
    "end": "278008"
  },
  {
    "text": "Between 10 nothing it's 10. I did three tests. We've got bubble Sorts",
    "start": "278009",
    "end": "282329"
  },
  {
    "text": "We've got the slightly better bubble",
    "start": "282330",
    "end": "283830"
  },
  {
    "text": "Sort which is the one where you check less elements each time because you know the highest ones are already sorted so we can see",
    "start": "283830",
    "end": "288330"
  },
  {
    "text": "that actually around the low end Mergesort can be",
    "start": "288330",
    "end": "291960"
  },
  {
    "text": "significantly slower than either bubble sorts, and that's because most thoughts got slightly more overhead associated with it and",
    "start": "293050",
    "end": "298888"
  },
  {
    "text": "Also, I guess the lists are more likely to be sorted or nearer Sorted when they're smaller",
    "start": "299440",
    "end": "304499"
  },
  {
    "text": "So we've got the input size here, so I sorted 10 things in this row",
    "start": "304509",
    "end": "307379"
  },
  {
    "text": "I run it a thousand times for each, so a thousand different randomly Sorted lists, so it took three hundred ninety one ninety seconds",
    "start": "307380",
    "end": "314669"
  },
  {
    "text": "Sort 10 things with the first bubble sort 322 with the second bubble, sort and",
    "start": "314669",
    "end": "319228"
  },
  {
    "text": "770 with Merge Sort even though Merge, Sort should be quicker. There's going to be a little bit of overheads",
    "start": "320139",
    "end": "325168"
  },
  {
    "text": "It's a slightly more complicated sorting algorithm however as the input size gets bigger if [we're] get to 100 say bubble sort to twenty eight",
    "start": "325169",
    "end": "332758"
  },
  {
    "text": "thousand nine eight seconds the better Bubble, Sort took nineteen microseconds and",
    "start": "333219",
    "end": "337018"
  },
  {
    "text": "Know sort took about eight microseconds, [so] [you] can see there that the merge, Sort [Saul] ready starting to",
    "start": "337539",
    "end": "343619"
  },
  {
    "text": "Take over even by 100, so let's see what it's like at a thousand bubble, sort is taking",
    "start": "344259",
    "end": "350999"
  },
  {
    "text": "three milliseconds to Sort this of a thousand things the better bubble, sort to take in two milliseconds and",
    "start": "351789",
    "end": "356789"
  },
  {
    "text": "Merge Sort is taking",
    "start": "357789",
    "end": "359789"
  },
  {
    "text": "[0.1] of a millisecond to sort the list with a small end",
    "start": "360340",
    "end": "363419"
  },
  {
    "text": "It doesn't remake with difference, but with a big end makes it makes a world of difference really important, okay?",
    "start": "363419",
    "end": "369089"
  },
  {
    "text": "So at five thousand it was taking seventy seven milliseconds to Sort with double sort",
    "start": "369090",
    "end": "374429"
  },
  {
    "text": "51 milliseconds Sort of the Better level, Sort Point Six five [the]",
    "start": "375009",
    "end": "378869"
  },
  {
    "text": "Millisecond to do those Sort bubble sort as I said earlier scales with the square of the input size",
    "start": "379449",
    "end": "385799"
  },
  {
    "text": "So they're going to call the emphasize n. So we can say bubble, sort scales with N",
    "start": "385800",
    "end": "391078"
  },
  {
    "text": "Squared merge",
    "start": "391300",
    "end": "392370"
  },
  {
    "text": "sort that we've just done that scales with the input size times the log of the input size a",
    "start": "392370",
    "end": "398310"
  },
  {
    "text": "Log is it's just the inverse of a power if you've got",
    "start": "398500",
    "end": "402000"
  },
  {
    "text": "10 to the power of [3] say is a thousand log base 10 of thousands 3",
    "start": "402220",
    "end": "405929"
  },
  {
    "text": "Whatever the base of the log, is it just is [just] a constant factor in front of it, and that doesn't matter motor",
    "start": "406180",
    "end": "410820"
  },
  {
    "text": "Sort will always take N",
    "start": "410820",
    "end": "412150"
  },
  {
    "text": "Times log N [runtime] so in the best case and the worst case and the average case you've always got to split the list",
    "start": "412150",
    "end": "418470"
  },
  {
    "text": "into two and into two again and two again",
    "start": "418720",
    "end": "422040"
  },
  {
    "text": "And then you still want to compare them all immersion about together so that one that one that one that one",
    "start": "422040",
    "end": "426809"
  },
  {
    "text": "So you've kind of always got to do the same number of steps the best case of merge, Sort is still n",
    "start": "426810",
    "end": "430710"
  },
  {
    "text": "Log n. Whereas bubble Sort what actually what you'll find is if you've got a list that's already Sorted it will only take N",
    "start": "430780",
    "end": "437399"
  },
  {
    "text": "Steps to do it because all it's doing is goes doing sort these no don't need to top these no",
    "start": "437400",
    "end": "441900"
  },
  {
    "text": "Don't need to sort these no okay, so you've done basically n. Steps, so it's proportional to number of cards",
    "start": "442060",
    "end": "447450"
  },
  {
    "text": "Don't [is] Duty swap",
    "start": "447550",
    "end": "448620"
  },
  {
    "text": "So you're done, but if you want to sort [a] list with a million things in Bubble Sorts, not the way to go",
    "start": "448620",
    "end": "452190"
  },
  {
    "text": "You need to better succinctly convey how when I wear them scales",
    "start": "452920",
    "end": "456599"
  },
  {
    "start": "453000",
    "end": "620000"
  },
  {
    "text": "There's some mathematical notation used by computer scientists",
    "start": "457180",
    "end": "460080"
  },
  {
    "text": "This is called Big O notation so actually what you might find is your actual algorithm might run in N squared plus",
    "start": "460080",
    "end": "466499"
  },
  {
    "text": "[4n] plus tens, but what you don't write you don't write n. Squared plus 4n Plus [ten]",
    "start": "467110",
    "end": "472738"
  },
  {
    "text": "You can just chuck away the lower order terms",
    "start": "473530",
    "end": "475619"
  },
  {
    "text": "So you just take the term the scales biggest so you can cross off those and you just say as o of n squared?",
    "start": "475620",
    "end": "480780"
  },
  {
    "text": "Okay, and the reason is as you increase n. The n squared term will always dominate for N",
    "start": "481660",
    "end": "487200"
  },
  {
    "text": "so [if] n is 1 we get 1",
    "start": "487200",
    "end": "489719"
  },
  {
    "text": "Squared which is 1",
    "start": "489910",
    "end": "491410"
  },
  {
    "text": "Plus 4 times 1 which is 4",
    "start": "491410",
    "end": "493150"
  },
  {
    "text": "Plus 10 so you can see this term is actually the biggest one and then this term is biggest and then the n squared times",
    "start": "493150",
    "end": "498270"
  },
  {
    "text": "smallest, but if n is 2",
    "start": "498270",
    "end": "500488"
  },
  {
    "text": "You get 2 squared which is 4 you get 2 times 4 which is 8 [and] then we still got 10?",
    "start": "501130",
    "end": "507059"
  },
  {
    "text": "But if we make n, 10 you get 10 squared here",
    "start": "507060",
    "end": "509910"
  },
  {
    "text": "Which is 100 we get 4 times 10 which is 40, and then we've got 10 here",
    "start": "509910",
    "end": "513809"
  },
  {
    "text": "But as n gets bigger the n, squared term it dominates the rest of it the n. Squared term really takes",
    "start": "514180",
    "end": "520080"
  },
  {
    "text": "Takes precedence over the others with big o we only care about the highest order term",
    "start": "520780",
    "end": "525269"
  },
  {
    "text": "so N squared",
    "start": "526000",
    "end": "527920"
  },
  {
    "text": "So is it a way of saying there is stuff that goes along there might be other stuff",
    "start": "527920",
    "end": "532120"
  },
  {
    "text": "but it's a way of simplifying it when we're looking at the figures from my",
    "start": "532120",
    "end": "535390"
  },
  {
    "text": "Tests or and you know merge sort of it's slower actually at the start than bubble sort that's probably because there's some big",
    "start": "535460",
    "end": "541329"
  },
  {
    "text": "Constant factors in there or some overhead that is making it take longer there are some algorithms that scale the order of N factorial",
    "start": "541490",
    "end": "548500"
  },
  {
    "text": "Is N times n minus?",
    "start": "548630",
    "end": "550630"
  },
  {
    "text": "1 Times N minus 2",
    "start": "551330",
    "end": "554559"
  },
  {
    "text": "Times all the way down to [one] got n and n factorial n is [one] N. Factorials one N",
    "start": "555290",
    "end": "562719"
  },
  {
    "text": "Is two it's two [it's] three. [we've] got [three] times two times one. Which is six when it's four",
    "start": "562720",
    "end": "569319"
  },
  {
    "text": "We've got six six six six",
    "start": "569360",
    "end": "571688"
  },
  {
    "text": "720 but seven it's whatever seven times by it is quite a big number",
    "start": "573290",
    "end": "577480"
  },
  {
    "text": "by the time you get to 70 factorial my calculator doesn't like it because you've [gone] over [ten] to the power of",
    "start": "577700",
    "end": "582280"
  },
  {
    "text": "100 [I] can show you a sorting algorithm that in the average case is n. Factorial if you like?",
    "start": "582530",
    "end": "586780"
  },
  {
    "text": "So we've got some cards you throw them up into the air and pick them up",
    "start": "588500",
    "end": "592510"
  },
  {
    "text": "We check if they're sorted so are they sorted no right so so chuck them up in the air again and [once] more",
    "start": "593270",
    "end": "600460"
  },
  {
    "text": "Pick them up. Are they sorted?",
    "start": "601700",
    "end": "604119"
  },
  {
    "text": "No, we could be here forever, but in the average case. It's the factorial of the number of cards, so we've got",
    "start": "604820",
    "end": "610090"
  },
  {
    "text": "Seven cards here, so let's go",
    "start": "610610",
    "end": "612610"
  },
  {
    "text": "It's going to take me a long time",
    "start": "613400",
    "end": "615400"
  },
  {
    "start": "620000",
    "end": "658000"
  },
  {
    "text": "Called Bogo [Salt] by the way interesting though Bogo Sort has got a [best-case] complexity of N",
    "start": "621610",
    "end": "626169"
  },
  {
    "text": "Because if the list is sorted you check if it's sorted and these so you finished you've only done n. Steps",
    "start": "626570",
    "end": "631779"
  },
  {
    "text": "There's anything that you know I've [used] [bogus] sorting and practical I don't think so",
    "start": "631820",
    "end": "637089"
  },
  {
    "text": "I think the term was invented just to just as just the sort of instructive purposes so you can kind of",
    "start": "637089",
    "end": "642549"
  },
  {
    "text": "Have an example of an n. Factorial algorithm. I mean you'll find it in practice quite difficult to write any algorithm",
    "start": "642800",
    "end": "648130"
  },
  {
    "text": "that runs an n factorial",
    "start": "648130",
    "end": "649970"
  },
  {
    "text": "It's difficult even if you're a really bad programmer, you'd struggle",
    "start": "649970",
    "end": "652540"
  },
  {
    "text": "You probably ought to be [quite] good programmer to work out how to do something that runs it runs that badly",
    "start": "653240",
    "end": "658149"
  }
]