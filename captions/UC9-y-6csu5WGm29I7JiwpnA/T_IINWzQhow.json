[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "Today we're going to be doing something\na little bit different. And it's",
    "start": "0",
    "end": "3360"
  },
  {
    "text": "something that brings together many\nideas in computer science - and it's",
    "start": "3360",
    "end": "6720"
  },
  {
    "text": "the idea of program correctness.\nSo what we're going",
    "start": "6720",
    "end": "10000"
  },
  {
    "text": "to be thinking about, is\nwhat does it actually mean",
    "start": "10000",
    "end": "12240"
  },
  {
    "text": "for a program to be correct, and\nthen how can we specify and verify",
    "start": "12240",
    "end": "16080"
  },
  {
    "text": "that in some kind of precise way.\nSo that's what we're going to",
    "start": "16080",
    "end": "19279"
  },
  {
    "text": "be thinking about today,\nprogram correctness.",
    "start": "19279",
    "end": "24480"
  },
  {
    "start": "24000",
    "end": "79000"
  },
  {
    "text": "We're going to come at this problem by\nmeans of an example, and the example that",
    "start": "24480",
    "end": "27840"
  },
  {
    "text": "we're going to look at\nis a simple compiler.",
    "start": "27840",
    "end": "30080"
  },
  {
    "text": "So what a compiler does in computing\nis it's a program that takes a high-level",
    "start": "30080",
    "end": "34559"
  },
  {
    "text": "language, and translates it down\nto a low-level language,",
    "start": "34559",
    "end": "37440"
  },
  {
    "text": "which is more easy for a machine\nlike this one to execute.",
    "start": "37440",
    "end": "41280"
  },
  {
    "text": "So what I'm going to show you, is a\nlittle Haskell file which I've written.",
    "start": "41280",
    "end": "45680"
  },
  {
    "text": "But it doesn't matter if you don't know\nanything about Haskell, because it's",
    "start": "45680",
    "end": "47840"
  },
  {
    "text": "really incidental to everything that\nwe're going to talk about today.",
    "start": "47840",
    "end": "50559"
  },
  {
    "text": "It just allows me to do everything in\nquite a concise way, but actually you can",
    "start": "50559",
    "end": "53839"
  },
  {
    "text": "do everything in any old programming\nlanguage that you like. But I'm going to",
    "start": "53840",
    "end": "57199"
  },
  {
    "text": "explain everything as we go\nalong anyway. We have two data",
    "start": "57199",
    "end": "61280"
  },
  {
    "text": "type declarations, and we have\nthree function declarations,",
    "start": "61280",
    "end": "65438"
  },
  {
    "text": "or function definitions rather.\nAnd what we're going to do, is we're",
    "start": "65439",
    "end": "68560"
  },
  {
    "text": "going to explain what these do\nby means of some simple examples.",
    "start": "68560",
    "end": "72880"
  },
  {
    "text": "And then we're going to think, well what does\nit actually mean for the compiler, which",
    "start": "72880",
    "end": "76240"
  },
  {
    "text": "is embedded in this code, to\nactually be correct? So what we're",
    "start": "76240",
    "end": "79758"
  },
  {
    "start": "79000",
    "end": "134000"
  },
  {
    "text": "going to start off looking at is\nthe source language for the compiler.",
    "start": "79759",
    "end": "84000"
  },
  {
    "text": "And it's going to be a very\nsimple language, it's going to be",
    "start": "84000",
    "end": "86640"
  },
  {
    "text": "the language of integer\nvalues combined using an",
    "start": "86640",
    "end": "89280"
  },
  {
    "text": "addition operator. So we're going to be\nbuilding up simple arithmetic",
    "start": "89280",
    "end": "92320"
  },
  {
    "text": "expressions -- things like\ntwo, plus three, plus four.",
    "start": "92320",
    "end": "96159"
  },
  {
    "text": "So here is the data type declaration for\nthis in Haskell. And it's got a few",
    "start": "96159",
    "end": "100240"
  },
  {
    "text": "components, so we'll work through these.\nSo we're declaring a new data type",
    "start": "100240",
    "end": "103680"
  },
  {
    "text": "called Expr for these simple\narithmetic expressions, and then the data",
    "start": "103680",
    "end": "107759"
  },
  {
    "text": "type has two constructors for building\nexpressions -- it's got a value constructor,",
    "start": "107759",
    "end": "112399"
  },
  {
    "text": "which takes an integer parameter,\nand it's got an add constructor,",
    "start": "112399",
    "end": "116159"
  },
  {
    "text": "which takes two sub-expressions as\narguments. So this is how we're going to",
    "start": "116159",
    "end": "120078"
  },
  {
    "text": "build up our simple\nexpressions, and they are really",
    "start": "120079",
    "end": "122399"
  },
  {
    "text": "expression trees.  And you might be\nthinking, well what does",
    "start": "122399",
    "end": "125840"
  },
  {
    "text": "\"deriving show\" mean here? Well, this\nis a little bit of Haskell magic,",
    "start": "125840",
    "end": "129039"
  },
  {
    "text": "and it just instructs the system\nto be able to print these things",
    "start": "129039",
    "end": "132239"
  },
  {
    "text": "on the screen, so we can view them. So not\neveryone's familiar with Haskell, so I'm",
    "start": "132239",
    "end": "136239"
  },
  {
    "text": "going to give you three\nlittle examples of values in this",
    "start": "136239",
    "end": "139520"
  },
  {
    "text": "expression data type. And these\nare going to be running examples",
    "start": "139520",
    "end": "142239"
  },
  {
    "text": "that we're going to be using throughout\nthe video today. So the first one",
    "start": "142239",
    "end": "145520"
  },
  {
    "text": "is going to be e1, and it's\njust going to be a simple",
    "start": "145520",
    "end": "149120"
  },
  {
    "text": "integer value. So we have\nan integer here, one,",
    "start": "149120",
    "end": "152319"
  },
  {
    "text": "and then we tag it with the Val\nconstructor, and then we've called it e1,",
    "start": "152319",
    "end": "155599"
  },
  {
    "text": "so we don't need to type this in again.\nWhenever we type e1 now, it just stands",
    "start": "155599",
    "end": "159040"
  },
  {
    "text": "for Val of one.  Our\nsecond example is going",
    "start": "159040",
    "end": "161920"
  },
  {
    "text": "to be an addition. So we're going\nto do Add of Val 2 and Val 3.",
    "start": "161920",
    "end": "166000"
  },
  {
    "text": "So this is like how we\nwould represent two plus three",
    "start": "166000",
    "end": "170080"
  },
  {
    "text": "as a value in our simple expression data\ntype. So we've got a number of components",
    "start": "170080",
    "end": "173920"
  },
  {
    "text": "here - we've got the\nvalue two, and we've got",
    "start": "173920",
    "end": "176400"
  },
  {
    "text": "the value three, and then\nwe combine them with the Add",
    "start": "176400",
    "end": "178959"
  },
  {
    "text": "constructor. So it's a little bit more\nverbose than what you'd normally write",
    "start": "178959",
    "end": "182239"
  },
  {
    "text": "down in mathematics - you'd\nnormally just write down 2+3, but here",
    "start": "182239",
    "end": "186319"
  },
  {
    "text": "we're doing in a programming language,\nso we need to be a little bit more",
    "start": "186319",
    "end": "188879"
  },
  {
    "text": "verbose, and we're using the two\nconstructors of the expression data type.",
    "start": "188879",
    "end": "193280"
  },
  {
    "text": "So just as one final example,\nlet's do something a bit more",
    "start": "193280",
    "end": "196319"
  },
  {
    "text": "sophisticated, let's reuse e2\nand add that onto Val 4. So we",
    "start": "196319",
    "end": "202000"
  },
  {
    "text": "defined e3 here to be the sum\nof e2 and the value four. So what",
    "start": "202000",
    "end": "206959"
  },
  {
    "text": "this really is is it's two,\nplus three, plus four. And we",
    "start": "206959",
    "end": "209920"
  },
  {
    "text": "can use the little pretty printer here,\nwhich we got from writing \"deriving show\",",
    "start": "209920",
    "end": "213840"
  },
  {
    "text": "and if we print out the\nvalue of e3, what you get is",
    "start": "213840",
    "end": "217040"
  },
  {
    "text": "you get the addition of two and three\nhere as the first parameter to the add,",
    "start": "217040",
    "end": "220719"
  },
  {
    "text": "and then as the second parameter,\nyou have Val 4. So these are three",
    "start": "220720",
    "end": "224640"
  },
  {
    "text": "little running examples\nof arithmetic expressions",
    "start": "224640",
    "end": "227920"
  },
  {
    "text": "which we're going to put into our\ncompiler as source expressions.",
    "start": "227920",
    "end": "232080"
  },
  {
    "start": "232000",
    "end": "312000"
  },
  {
    "text": "So the next thing we're going to think\nabout is what do expressions in this",
    "start": "232080",
    "end": "235439"
  },
  {
    "text": "language actually mean?\nAnd this is very simple in",
    "start": "235439",
    "end": "237920"
  },
  {
    "text": "this case - expressions just denote\nsimple integer values. So we can",
    "start": "237920",
    "end": "242400"
  },
  {
    "text": "think about evaluating an\nexpression. So let's look at the three",
    "start": "242400",
    "end": "246239"
  },
  {
    "text": "examples. So we had e1, and if\nwe evaluated e1, we just get rid",
    "start": "246239",
    "end": "251680"
  },
  {
    "text": "of the Val constructor and we\nget the value one - very simple.",
    "start": "251680",
    "end": "255359"
  },
  {
    "text": "If we look at our second example,\nwhich was two plus three,",
    "start": "255360",
    "end": "258320"
  },
  {
    "text": "if we evaluate two plus three, then of\ncourse we're just going to get five. And",
    "start": "258320",
    "end": "263199"
  },
  {
    "text": "if we look at our third example,\nthis is two plus, three, plus four - bit",
    "start": "263199",
    "end": "266800"
  },
  {
    "text": "more verbose - but when\nwe evaluate this one,",
    "start": "266800",
    "end": "269520"
  },
  {
    "text": "we're going to get the\nvalue nine, as we expect.",
    "start": "269520",
    "end": "272800"
  },
  {
    "text": "So let's have a look at the source file\nnow, and think how do we actually",
    "start": "272800",
    "end": "276478"
  },
  {
    "text": "define this evaluation function?\nAnd it's actually just a very simple",
    "start": "276479",
    "end": "280479"
  },
  {
    "text": "two-line recursive definition. So let's\nlook at the two lines one by one.",
    "start": "280479",
    "end": "284400"
  },
  {
    "text": "So the first line says,\nif we evaluate a value n,  ",
    "start": "284400",
    "end": "288320"
  },
  {
    "text": "we simply remove the Val constructor,\nand we get the underlying value n.",
    "start": "288320",
    "end": "292800"
  },
  {
    "text": "The second line says if we\nevaluate an addition",
    "start": "292800",
    "end": "296000"
  },
  {
    "text": "of two expressions x and y, all we're\ngoing to do is evaluate the first",
    "start": "296000",
    "end": "300240"
  },
  {
    "text": "expression x, evaluate the\nsecond expression y -- that",
    "start": "300240",
    "end": "303918"
  },
  {
    "text": "will give us two integers -- and\nthen we can add them together,",
    "start": "303919",
    "end": "306479"
  },
  {
    "text": "and that will be the evaluation\nof the integer. So it's a very",
    "start": "306479",
    "end": "310000"
  },
  {
    "text": "simple two-line recursive definition.\nThe next thing we're going to look at now",
    "start": "310000",
    "end": "314240"
  },
  {
    "start": "312000",
    "end": "474000"
  },
  {
    "text": "is the actual compiler for\nthese simple arithmetic expressions.",
    "start": "314240",
    "end": "318560"
  },
  {
    "text": "And what it's going to do, is\ncompile from expressions down to",
    "start": "318560",
    "end": "322160"
  },
  {
    "text": "code. And the code is going to be a\nsequence of operations for a very simple",
    "start": "322160",
    "end": "326320"
  },
  {
    "text": "stack machine. And the stack is\njust like having a stack of books,",
    "start": "326320",
    "end": "329199"
  },
  {
    "text": "it grows and shrinks, and you always\nput new values on top of the stack.",
    "start": "329199",
    "end": "332720"
  },
  {
    "text": "So let's have some examples to\nsee how the compiler works first.",
    "start": "332720",
    "end": "336240"
  },
  {
    "text": "And then we'll see how it's\nactually defined in the code.",
    "start": "336240",
    "end": "339360"
  },
  {
    "text": "If we think about our first example,\nVal 1, we can compile that one,",
    "start": "339360",
    "end": "343520"
  },
  {
    "text": "and what we're going to get\nis just a sequence of a single",
    "start": "343520",
    "end": "346879"
  },
  {
    "text": "operation for the little machine.\nAnd what the operation is going to do",
    "start": "346880",
    "end": "350320"
  },
  {
    "text": "is just push that\nvalue one onto the stack.",
    "start": "350320",
    "end": "353440"
  },
  {
    "text": "If we look at our second\nexample, we had add of two",
    "start": "353440",
    "end": "356720"
  },
  {
    "text": "and three. If we compile that,\nthen we really start to see",
    "start": "356720",
    "end": "360400"
  },
  {
    "text": "what the compiler is doing. It's compiled\nit down to a lower-level sequence of",
    "start": "360400",
    "end": "364319"
  },
  {
    "text": "operations, and in this\ncase what we're going to do",
    "start": "364319",
    "end": "367199"
  },
  {
    "text": "is we're going to do a\nsingle push of the value two,",
    "start": "367199",
    "end": "370160"
  },
  {
    "text": "another push of the value three - so that\nwe have two values sitting on the stack -",
    "start": "370160",
    "end": "374240"
  },
  {
    "text": "and then you'll perform an addition on\nthose two values, and that will leave the",
    "start": "374240",
    "end": "377520"
  },
  {
    "text": "value five sitting on top\nof the stack. So you start",
    "start": "377520",
    "end": "380240"
  },
  {
    "text": "to see how the compiler here is taking\nhigh-level arithmetic expressions, and",
    "start": "380240",
    "end": "384638"
  },
  {
    "text": "compiling them down to\nlower-level sequences of operations,",
    "start": "384639",
    "end": "388560"
  },
  {
    "text": "which a machine like this\none could more easily execute.",
    "start": "388560",
    "end": "391199"
  },
  {
    "text": "So let's have one more example. Let's\nlook at our third example, two plus three",
    "start": "391199",
    "end": "395360"
  },
  {
    "text": "plus four. If we compile\nthis one, then we get",
    "start": "395360",
    "end": "398960"
  },
  {
    "text": "five operations this time.\nWe have push of two,",
    "start": "398960",
    "end": "402479"
  },
  {
    "text": "push of three, and then add. And that\nwill leave the value five sitting on the",
    "start": "402479",
    "end": "406160"
  },
  {
    "text": "stack. And then we push the\nvalue four. And then we",
    "start": "406160",
    "end": "408720"
  },
  {
    "text": "perform an addition, and that\nwill leave the value nine sitting",
    "start": "408720",
    "end": "412240"
  },
  {
    "text": "on the stack at the end.  So\nthat's what the compiler does. ",
    "start": "412240",
    "end": "415840"
  },
  {
    "text": "Let's have a look to see\nhow it's actually defined.",
    "start": "415840",
    "end": "418400"
  },
  {
    "text": "And again, it's just defined as\na simple two-line recursive",
    "start": "418400",
    "end": "422160"
  },
  {
    "text": "definition. So if we look at\nthe base case for the recursion,",
    "start": "422160",
    "end": "425199"
  },
  {
    "text": "what it's saying is if you compile a\nvalue, this is very simple,",
    "start": "425199",
    "end": "428720"
  },
  {
    "text": "you just simply emit a single\ninstruction, or a single operation,",
    "start": "428720",
    "end": "432720"
  },
  {
    "text": "which pushes the value n onto the stack.\nWhereas if you compile an addition,",
    "start": "432720",
    "end": "437360"
  },
  {
    "text": "then you have three things to do. What\nyou're going to do is you're going to",
    "start": "437360",
    "end": "440240"
  },
  {
    "text": "compile the first part\nof the addition, compile",
    "start": "440240",
    "end": "443039"
  },
  {
    "text": "the second part of the addition, and\nthen put an add operation on at the end.",
    "start": "443039",
    "end": "446800"
  },
  {
    "text": "And the ++ here is\njust a way in Haskell",
    "start": "446800",
    "end": "449440"
  },
  {
    "text": "of combining lists together -  it's\nlist concatenation, or list append.",
    "start": "449440",
    "end": "453360"
  },
  {
    "text": "And this then brings us to our second\ndata type declaration at the top.",
    "start": "453360",
    "end": "456960"
  },
  {
    "text": "We're defining the data type for\noperations, and this is very simple -",
    "start": "456960",
    "end": "460240"
  },
  {
    "text": "there's no recursion involved\nthis time around -",
    "start": "460240",
    "end": "462319"
  },
  {
    "text": "it's just simply you push an\ninteger value onto the stack,",
    "start": "462319",
    "end": "465680"
  },
  {
    "text": "or you can perform an add on\nthe top two values on the stack.",
    "start": "465680",
    "end": "468800"
  },
  {
    "text": "And again we're using the\nHaskell magic here to derive",
    "start": "468800",
    "end": "471918"
  },
  {
    "text": "a pretty-printer which can\nprint these things on the screen.",
    "start": "471919",
    "end": "475039"
  },
  {
    "start": "474000",
    "end": "626000"
  },
  {
    "text": "So that's the compiler\nfor arithmetic expressions.",
    "start": "475039",
    "end": "478400"
  },
  {
    "text": "But we're not quite done yet, we still\nneed to think about how does",
    "start": "478400",
    "end": "481680"
  },
  {
    "text": "code for this little stack\nmachine actually get executed?",
    "start": "481680",
    "end": "485599"
  },
  {
    "text": "So again, let me give you some\nexamples of this, and then we'll see",
    "start": "485599",
    "end": "489199"
  },
  {
    "text": "how this is actually implemented\nin terms of Haskell code.",
    "start": "489199",
    "end": "492800"
  },
  {
    "text": "So if we take some examples here. So the\nfirst example is just going to be if we",
    "start": "492800",
    "end": "497520"
  },
  {
    "text": "execute the result of\npushing one onto the stack,",
    "start": "497520",
    "end": "501360"
  },
  {
    "text": "and we give it the empty stack,\nthen you just get exactly what you",
    "start": "501360",
    "end": "504800"
  },
  {
    "text": "expect - you get the value one sitting on\nthe stack. Remember, a stack is like a",
    "start": "504800",
    "end": "507918"
  },
  {
    "text": "pile of books, and in this case\nit's a pile of integer",
    "start": "507919",
    "end": "510479"
  },
  {
    "text": "values, and you always\nput things on the top.",
    "start": "510479",
    "end": "512959"
  },
  {
    "text": "So in this case we're just taking an\nempty pile, and then putting the value",
    "start": "512959",
    "end": "516640"
  },
  {
    "text": "one on the top.\nLet's take another example.",
    "start": "516640",
    "end": "519760"
  },
  {
    "text": "Suppose we did push two, push\nthree, and then add, and we",
    "start": "519760",
    "end": "524000"
  },
  {
    "text": "executed that with an empty stack.\nThen we get the final stack with the",
    "start": "524000",
    "end": "527680"
  },
  {
    "text": "value five on it. So the way\nthis will actually get executed",
    "start": "527680",
    "end": "530800"
  },
  {
    "text": "is the value two will go on the\nstack, then the value three,",
    "start": "530800",
    "end": "534000"
  },
  {
    "text": "then you'll add them together, and you'll\nget the value five sitting on top of the",
    "start": "534000",
    "end": "537040"
  },
  {
    "text": "stack. And that's exactly what we get\nsitting here. So the very last example,",
    "start": "537040",
    "end": "541279"
  },
  {
    "text": "if we did the two plus\nthree plus four example.",
    "start": "541279",
    "end": "543760"
  },
  {
    "text": "So I do push two, push three,\nperform an addition,",
    "start": "543760",
    "end": "548080"
  },
  {
    "text": "push four, perform another addition,\nand then hopefully we get the right",
    "start": "548080",
    "end": "552959"
  },
  {
    "text": "result - which we do - which is the value\nnine sitting on the stack. So this kind of",
    "start": "552959",
    "end": "557279"
  },
  {
    "text": "shows you how the little\nstack machine actually works.",
    "start": "557279",
    "end": "560320"
  },
  {
    "text": "So let's have a look at the\ncode for this. So the code",
    "start": "560320",
    "end": "563519"
  },
  {
    "text": "looks a bit more complicated, but it's\nactually completely straightforward, and",
    "start": "563519",
    "end": "566480"
  },
  {
    "text": "we can just kind of talk through this.\nSo the way if we want to execute a push,",
    "start": "566480",
    "end": "572320"
  },
  {
    "text": "and then we have some more code\nafterwards, in the context of a given",
    "start": "572320",
    "end": "575600"
  },
  {
    "text": "stack, is we're simply\ngoing to put that number",
    "start": "575600",
    "end": "578399"
  },
  {
    "text": "on top of the stack, and\nthen continue executing the",
    "start": "578399",
    "end": "581200"
  },
  {
    "text": "remaining code. So very simple -\nif you want to execute a push,",
    "start": "581200",
    "end": "584160"
  },
  {
    "text": "you put that number on top of the stack,\nand then you just continue with whatever",
    "start": "584160",
    "end": "587360"
  },
  {
    "text": "it was you were\ngoing to continue with.",
    "start": "587360",
    "end": "589839"
  },
  {
    "text": "The second case says, if we're\ntrying to execute an addition,",
    "start": "589839",
    "end": "592959"
  },
  {
    "text": "all we're going to do is\ninspect the top of the stack, and hope",
    "start": "592959",
    "end": "596240"
  },
  {
    "text": "that we have at least two values,\nm and n, on top of the stack, and s is",
    "start": "596240",
    "end": "600480"
  },
  {
    "text": "everything else, and all\nwe're going to do is add",
    "start": "600480",
    "end": "602720"
  },
  {
    "text": "together those two values,\nand then put them on top of the stack,",
    "start": "602720",
    "end": "605920"
  },
  {
    "text": "and then we'll continue by executing\neverything else that we're going to",
    "start": "605920",
    "end": "609440"
  },
  {
    "text": "execute. So again, very simple. If\nyou perform an addition, you take the",
    "start": "609440",
    "end": "612959"
  },
  {
    "text": "top two values of the stack,\nadd them together, and put the result",
    "start": "612959",
    "end": "616000"
  },
  {
    "text": "back on. That's all that's going on here.\nAnd the very last case is kind of the",
    "start": "616000",
    "end": "619200"
  },
  {
    "text": "catch-all case. It says,\nif you've got any other",
    "start": "619200",
    "end": "621680"
  },
  {
    "text": "code sequence, and any old\nstack, then there's nothing to do -",
    "start": "621680",
    "end": "625120"
  },
  {
    "text": "you just return the stack. So this\nbrings us now to the issue of compiler",
    "start": "625120",
    "end": "629120"
  },
  {
    "start": "626000",
    "end": "731000"
  },
  {
    "text": "correctness. So what\nwe've defined now, is we've",
    "start": "629120",
    "end": "631279"
  },
  {
    "text": "defined a syntax for our source language,\nwhich is simple arithmetic expressions.",
    "start": "631279",
    "end": "635680"
  },
  {
    "text": "We've defined our target language,\nwhich is stack machine code, for a simple",
    "start": "635680",
    "end": "640160"
  },
  {
    "text": "stack-based machine.  And\nthen we had a compiler, which",
    "start": "640160",
    "end": "643600"
  },
  {
    "text": "translates arithmetic expressions\ndown to the simple stack machine code.",
    "start": "643600",
    "end": "647759"
  },
  {
    "text": "But how do we know the compiler actually\ndoes the right thing? That's the point of",
    "start": "647760",
    "end": "651120"
  },
  {
    "text": "this video today, we're thinking\nabout program correctness.",
    "start": "651120",
    "end": "654240"
  },
  {
    "text": "How do we know that our program for\ncompilation actually does the right thing?",
    "start": "654240",
    "end": "658240"
  },
  {
    "text": "So that's what we're\ngoing to think about now.",
    "start": "658240",
    "end": "660800"
  },
  {
    "text": "So let's look at our most\ncomplicated example,",
    "start": "660800",
    "end": "664480"
  },
  {
    "text": "which was 2+3+4. So there's a bunch\nof things we could do with this.",
    "start": "664480",
    "end": "669279"
  },
  {
    "text": "We could evaluate it, and we\nget the result nine - very simple.",
    "start": "669279",
    "end": "674320"
  },
  {
    "text": "We could also compile it. So we\ncould translate it down to some",
    "start": "674320",
    "end": "677519"
  },
  {
    "text": "stack machine code.\nAnd then we get push two,",
    "start": "677519",
    "end": "680160"
  },
  {
    "text": "push three, add, push four, and add. And\nthen we could execute that stack machine code",
    "start": "680160",
    "end": "684639"
  },
  {
    "text": "now. So what we could do,\nis we could execute",
    "start": "684640",
    "end": "686959"
  },
  {
    "text": "the result of compiling that\nexpression, using an empty stack.",
    "start": "686959",
    "end": "691920"
  },
  {
    "text": "And what we get is the value\nnine sitting on the stack.",
    "start": "691920",
    "end": "694639"
  },
  {
    "text": "Which is exactly what we expect.  And\nyou can see here by looking at these",
    "start": "694640",
    "end": "698240"
  },
  {
    "text": "examples, the essence of what it means\nfor this compiler to be correct,",
    "start": "698240",
    "end": "702160"
  },
  {
    "text": "is that when we compile an expression,\nand then execute the resulting code,",
    "start": "702160",
    "end": "707199"
  },
  {
    "text": "we get basically the same\nvalue as when we evaluate it.",
    "start": "707200",
    "end": "711279"
  },
  {
    "text": "So in each case we get the value nine.\nIn the evaluation case we just get the",
    "start": "711279",
    "end": "715600"
  },
  {
    "text": "integer just sitting\nthere on its own. Whereas in",
    "start": "715600",
    "end": "718240"
  },
  {
    "text": "the compilation case, we get a\nstack with the value nine sitting",
    "start": "718240",
    "end": "721760"
  },
  {
    "text": "on it. So this is the essence of what it\nmeans for the compiler to be correct.",
    "start": "721760",
    "end": "725440"
  },
  {
    "text": "If we compile, and then execute the code,\nit's the same as just evaluating the",
    "start": "725440",
    "end": "729839"
  },
  {
    "text": "original expression.  So what\nwe can do now is actually think",
    "start": "729839",
    "end": "732880"
  },
  {
    "start": "731000",
    "end": "862000"
  },
  {
    "text": "about making this precise, and\nkind of precisely specifying what it",
    "start": "732880",
    "end": "736720"
  },
  {
    "text": "means for the compiler to be correct.\nAnd then we can wrap things up by",
    "start": "736720",
    "end": "739759"
  },
  {
    "text": "thinking how can we actually verify\nthat? So what I'm going to do",
    "start": "739760",
    "end": "742800"
  },
  {
    "text": "is write down a simple function\ndefinition, which captures",
    "start": "742800",
    "end": "746079"
  },
  {
    "text": "what I've just said about the compiler\nbeing correct. So I'm defining a little",
    "start": "746079",
    "end": "749600"
  },
  {
    "text": "function called correct, and\nit's going to take an arithmetic",
    "start": "749600",
    "end": "752880"
  },
  {
    "text": "expression e as input.  And\nwhat we're going to do is",
    "start": "752880",
    "end": "756160"
  },
  {
    "text": "we're going to execute the\nresult of compiling that expression,",
    "start": "756160",
    "end": "760800"
  },
  {
    "text": "with an empty stack. And what\nwe want is that that's the same",
    "start": "760800",
    "end": "764480"
  },
  {
    "text": "as the stack we get by just\nputting the value of that",
    "start": "764480",
    "end": "767519"
  },
  {
    "text": "expression into a stack on its own.\nSo this generalises what we just had.",
    "start": "767519",
    "end": "772079"
  },
  {
    "text": "What this is saying is if you\ncompile an expression e, and",
    "start": "772079",
    "end": "775600"
  },
  {
    "text": "then you execute the resulting code,\nusing an initial stack which is empty,",
    "start": "775600",
    "end": "780319"
  },
  {
    "text": "then what you expect to get is\njust the value of the expression",
    "start": "780320",
    "end": "784000"
  },
  {
    "text": "sitting as a single little value on the\nstack. The double equal symbol here",
    "start": "784000",
    "end": "788320"
  },
  {
    "text": "is just Haskell's operator for checking\nwhether two lists are actually equal.",
    "start": "788320",
    "end": "792399"
  },
  {
    "text": "So this captures in a very\nprecise, concise mathematical",
    "start": "792399",
    "end": "795920"
  },
  {
    "text": "way what it means for this\ncompiler to be correct. But how can we",
    "start": "795920",
    "end": "799920"
  },
  {
    "text": "actually check that this\nproperty is actually true?",
    "start": "799920",
    "end": "803120"
  },
  {
    "text": "Well, if you were eagle-eyed, you\nmight have noticed right at the top",
    "start": "803120",
    "end": "805920"
  },
  {
    "text": "of my file, I was importing\nthe QuickCheck library.",
    "start": "805920",
    "end": "809040"
  },
  {
    "text": "And QuickCheck is a random testing tool,\nwhich Computerphile's already done a very",
    "start": "809040",
    "end": "812880"
  },
  {
    "text": "nice video on with John Hughes,\nwhich you might want to check out.",
    "start": "812880",
    "end": "815920"
  },
  {
    "text": "And what QuickCheck does, is\nit blasts random test cases",
    "start": "815920",
    "end": "819680"
  },
  {
    "text": "through properties. And it tries\nto check that the property is true",
    "start": "819680",
    "end": "823120"
  },
  {
    "text": "for all of these test cases. So we\nhave a property here - we've got a simple",
    "start": "823120",
    "end": "826720"
  },
  {
    "text": "compiler correctness property.  So\nwhat I can do then, I can just write",
    "start": "826720",
    "end": "830319"
  },
  {
    "text": "QuickCheck the correctness\nproperty, and it will run",
    "start": "830320",
    "end": "833839"
  },
  {
    "text": "100 test cases through it. It will start\nwith very small things like just simple",
    "start": "833839",
    "end": "837279"
  },
  {
    "text": "values like 0, 1 and 2, and so on. And\nthen it will consider larger and larger",
    "start": "837279",
    "end": "841199"
  },
  {
    "text": "expressions, with more and\nmore additions. And it's trying",
    "start": "841199",
    "end": "843759"
  },
  {
    "text": "to find an example which\nbreaks this compiler correctness",
    "start": "843760",
    "end": "847600"
  },
  {
    "text": "property. But it doesn't do it\nbecause the compiler is correct.",
    "start": "847600",
    "end": "850720"
  },
  {
    "text": "Maybe it was a fluke? Maybe we can try\nagain - let's try two or three different",
    "start": "850720",
    "end": "854879"
  },
  {
    "text": "runs.  And in fact it\ndoesn't matter how many",
    "start": "854880",
    "end": "856959"
  },
  {
    "text": "runs we do of this, this is always\ngoing to work. Because the compiler",
    "start": "856959",
    "end": "861279"
  },
  {
    "text": "is actually correct.  So, suppose\nwe'd messed up - suppose we had",
    "start": "861279",
    "end": "866800"
  },
  {
    "start": "862000",
    "end": "923000"
  },
  {
    "text": "a compiler, which we'd implemented\nincorrectly. So let me break the compiler",
    "start": "866800",
    "end": "871199"
  },
  {
    "text": "now.  Let me change the\ncompiler, and this is a ",
    "start": "871199",
    "end": "873600"
  },
  {
    "text": "very easy mistake to make.\nRather than compiling an addition by",
    "start": "873600",
    "end": "878959"
  },
  {
    "text": "compiling the first thing, and then the\nsecond thing, and then omitting an add",
    "start": "878959",
    "end": "882000"
  },
  {
    "text": "operation, what I'm\ngoing to do is put the add",
    "start": "882000",
    "end": "884079"
  },
  {
    "text": "operation in the middle. And this is a\nkind of very common mistake - if you teach",
    "start": "884079",
    "end": "887920"
  },
  {
    "text": "compilers to students, this is a\nvery common mistake that you see",
    "start": "887920",
    "end": "891199"
  },
  {
    "text": "in their code. But it will break the\ncompiler correctness property.",
    "start": "891199",
    "end": "894880"
  },
  {
    "text": "So this compiler is now incorrect - let me\nQuickCheck it. And it's managed to find",
    "start": "894880",
    "end": "901519"
  },
  {
    "text": "a counter example.\nAnd in fact any addition",
    "start": "901519",
    "end": "904160"
  },
  {
    "text": "will break this compiler, if you work\nthrough the details. What we've seen here",
    "start": "904160",
    "end": "907839"
  },
  {
    "text": "now is how, in a\nvery simple way, you can",
    "start": "907839",
    "end": "910399"
  },
  {
    "text": "capture the correctness property\nof a small, but interesting program",
    "start": "910399",
    "end": "914079"
  },
  {
    "text": "- a simple compiler - and then\nhow you can actually verify",
    "start": "914079",
    "end": "916880"
  },
  {
    "text": "this, or give high confidence that this\nis actually doing the right thing,",
    "start": "916880",
    "end": "920399"
  },
  {
    "text": "using an automatic testing tool\nsuch as the QuickCheck system.",
    "start": "920399",
    "end": "924240"
  },
  {
    "text": "If you wanted to do this properly, of\ncourse you could do some kind of",
    "start": "924240",
    "end": "927600"
  },
  {
    "text": "mathematical proof that\nit's also correct - or that it's",
    "start": "927600",
    "end": "931040"
  },
  {
    "text": "correct - using some kind of induction.\nOr if you wanted some machine assistance,",
    "start": "931040",
    "end": "935120"
  },
  {
    "text": "you could maybe use an automated\ntheorem prover, or an automated",
    "start": "935120",
    "end": "938720"
  },
  {
    "text": "proof assistant.  But actually,\nfor many applications, just",
    "start": "938720",
    "end": "941680"
  },
  {
    "text": "doing this kind of\nhigh confidence activity",
    "start": "941680",
    "end": "944000"
  },
  {
    "text": "of using a random testing tool like\nQuickCheck, actually gives you",
    "start": "944000",
    "end": "947279"
  },
  {
    "text": "very strong confidence that your\nprograms are actually correct.",
    "start": "947279",
    "end": "950399"
  },
  {
    "text": "But ultimately, the gold\nstandard is always to do a proper",
    "start": "950399",
    "end": "954320"
  },
  {
    "text": "inductive proof, or to use some kind of\nproof assistant to do it for you. So",
    "start": "954320",
    "end": "958720"
  },
  {
    "start": "958000",
    "end": "1033000"
  },
  {
    "text": "just to summarise what we've done today,\nwe've been looking at the problem of",
    "start": "958720",
    "end": "962560"
  },
  {
    "text": "program correctness. And\nwhat we've shown is how you can",
    "start": "962560",
    "end": "965440"
  },
  {
    "text": "prove a simple compiler correct.\nAnd the way we came at this, is we first",
    "start": "965440",
    "end": "968959"
  },
  {
    "text": "of all defined what the source\nlanguage for the compiler was,",
    "start": "968959",
    "end": "972079"
  },
  {
    "text": "which was simple arithmetic\nexpressions. Then we defined",
    "start": "972079",
    "end": "975199"
  },
  {
    "text": "what the target language was for the\ncompiler, which is simple stack machine",
    "start": "975199",
    "end": "978800"
  },
  {
    "text": "code.  We defined a\nsemantics for both of those",
    "start": "978800",
    "end": "981680"
  },
  {
    "text": "languages - we worked\nout a way of evaluating",
    "start": "981680",
    "end": "984160"
  },
  {
    "text": "expressions, and executing code -\nand then we had a compiler which",
    "start": "984160",
    "end": "988160"
  },
  {
    "text": "translated from one into the other.\nAnd then finally, we formulated this",
    "start": "988160",
    "end": "992160"
  },
  {
    "text": "simple correctness property, and\nused the QuickCheck system to check",
    "start": "992160",
    "end": "996560"
  },
  {
    "text": "that it was correct with high confidence.\nAnd of course if you want to do this",
    "start": "996560",
    "end": "999759"
  },
  {
    "text": "properly, you could do\na mathematical proof,",
    "start": "999759",
    "end": "1002000"
  },
  {
    "text": "using some form of induction, or you\ncould even use some kind of mechanised",
    "start": "1002000",
    "end": "1005920"
  },
  {
    "text": "proof assistant. And maybe those would be\ninteresting topics for other Computerphiles",
    "start": "1005920",
    "end": "1009600"
  },
  {
    "text": "another day. So that's it for\ntoday - see you again next time!",
    "start": "1009600",
    "end": "1015040"
  }
]