[
  {
    "text": "So it was an interesting start to 2018 --",
    "start": "0",
    "end": "1979"
  },
  {
    "text": "There was a lot of chatter on Twitter and other social networks about how",
    "start": "1979",
    "end": "5249"
  },
  {
    "text": "there was (sort of) a lot of patches",
    "start": "5500",
    "end": "7380"
  },
  {
    "text": "going into the Linux kernel was what I think started people noticing this -- and that perhaps there was a major",
    "start": "7380",
    "end": "12440"
  },
  {
    "text": "exploit about to be announced that would affect Linux perhaps and actually, as it turns out, Windows, Mac OS.",
    "start": "12720",
    "end": "19100"
  },
  {
    "text": "and other operating systems as well. The short of this is is that people at Google and various other universities, Rambus, and various other",
    "start": "19420",
    "end": "26099"
  },
  {
    "text": "institutions and so on have discovered a way that",
    "start": "26220",
    "end": "29640"
  },
  {
    "text": "any program can pretty much read data that it's not meant to be reading. That can be anything as simple as",
    "start": "30000",
    "end": "35520"
  },
  {
    "text": "reading a value past the end of an array even though the program is coded",
    "start": "36140",
    "end": "39540"
  },
  {
    "text": "to not let you do that -- which will then give you access to data that you shouldn't have in your program --",
    "start": "39580",
    "end": "43600"
  },
  {
    "text": "to up to, in the worst case, being able to read kernel memory",
    "start": "44110",
    "end": "47099"
  },
  {
    "text": "which is the operating system's memory where there's things like passwords and encryption keys stored -",
    "start": "47100",
    "end": "51419"
  },
  {
    "text": "to actually reading the whole memory of your computer in the worst case.",
    "start": "51730",
    "end": "55919"
  },
  {
    "text": "To make it worse, the really nasty thing about this one is it's not a problem in the software as such;",
    "start": "56020",
    "end": "61109"
  },
  {
    "text": "it's an actual problem with the way that modern CPUs are implemented, whether it's AMD,",
    "start": "61539",
    "end": "66749"
  },
  {
    "text": "Intel, ARM and so on - they've all said that in certain circumstances all their CPUs could be affected so it's a pretty",
    "start": "67299",
    "end": "74819"
  },
  {
    "text": "major thing which is going to require some rethinking perhaps of the way the CPUs are designed. The best comment",
    "start": "75460",
    "end": "81989"
  },
  {
    "text": "I've seen about this is the U.S.'s CERT - Computer Emergency Response Team's",
    "start": "81990",
    "end": "85890"
  },
  {
    "text": "article on this, which I've got open here.",
    "start": "86500",
    "end": "89009"
  },
  {
    "text": "It says CPU hardware implementations are vulnerable to",
    "start": "89009",
    "end": "92140"
  },
  {
    "text": "side channel attacks. These vulnerabilities are referred to as Meltdown and Spectre. And they say: \"Solution: replace CPU hardware\"",
    "start": "92160",
    "end": "100160"
  },
  {
    "text": "So it's pretty major",
    "start": "103050",
    "end": "105050"
  },
  {
    "text": "So the short of it is that you can now...",
    "start": "105730",
    "end": "108060"
  },
  {
    "text": "even though the OS is saying you can't [read memory] even though the program is saying you can't - you can read memory",
    "start": "108580",
    "end": "113860"
  },
  {
    "text": "that you shouldn't have access to, and then use that to exfiltrate data from the computer system that perhaps you shouldn't have access to.",
    "start": "114040",
    "end": "121500"
  },
  {
    "text": "According to Mozilla and Chrome and things there are ways that this can be done via JavaScript, say on a webpage, so you could",
    "start": "121900",
    "end": "127499"
  },
  {
    "text": "technically -- and I don't think it's been exploited yet -- but the real danger would be that you could go to a webpage",
    "start": "128080",
    "end": "132479"
  },
  {
    "text": "and it would copy out all your memory very slowly (must admit)",
    "start": "132480",
    "end": "135599"
  },
  {
    "text": "over the network and people would have access to things. It's not as bad as it sounds; there are",
    "start": "135600",
    "end": "141560"
  },
  {
    "text": "things that can be done in software that can patch and sort of mitigate the effects of this and stop it happening.",
    "start": "141780",
    "end": "147140"
  },
  {
    "text": "The downside of that is that they can have a significant",
    "start": "147460",
    "end": "150480"
  },
  {
    "text": "sort of speed performance hit.",
    "start": "151270",
    "end": "153190"
  },
  {
    "text": "Your programs will probably end up running slightly slower, slightly depends on what it's doing, how it's actually interacting with the operating system, and",
    "start": "153190",
    "end": "161080"
  },
  {
    "text": "so on but",
    "start": "161160",
    "end": "163160"
  },
  {
    "text": "as the CERT says, to really fix this it's going to need to require",
    "start": "163270",
    "end": "167639"
  },
  {
    "text": "redesigned CPUs.",
    "start": "167820",
    "end": "169120"
  },
  {
    "text": "[Sean]: The very big difference between this and other exploits",
    "start": "169120",
    "end": "172280"
  },
  {
    "text": "we've covered -- because every exploit seems to be the biggest thing since sliced bread -- the biggest thing is this the fact that it's hardware, right?",
    "start": "172290",
    "end": "178540"
  },
  {
    "text": "Yeah\nSo this is not",
    "start": "178560",
    "end": "179980"
  },
  {
    "text": "something that can be directly patched in",
    "start": "179980",
    "end": "182730"
  },
  {
    "text": "with a new version of the software. or you can switch from Windows to Linux, or Linux to Windows to Mac OS, whatever it is, Free BSD...",
    "start": "182920",
    "end": "188580"
  },
  {
    "text": "FreeBSD, Dragonfly BSD, Open BSD -- whatever your favorite operating system of the month is.",
    "start": "189100",
    "end": "193709"
  },
  {
    "text": "This is an attack that is",
    "start": "195160",
    "end": "198940"
  },
  {
    "text": "[based] fundamentally in the way that the CPUs have been designed to work and",
    "start": "199620",
    "end": "203700"
  },
  {
    "text": "doesn't even require the operating system.",
    "start": "203980",
    "end": "205739"
  },
  {
    "text": "It can be done - if you can get the code to work",
    "start": "205740",
    "end": "208260"
  },
  {
    "text": "say, from a bit of JavaScript on a web page, and there are examples",
    "start": "208380",
    "end": "212080"
  },
  {
    "text": "that have been shown to do that.",
    "start": "212260",
    "end": "214340"
  },
  {
    "text": "[Sean]: As far as I see in the media, there's Spectre and there's Meltdown.",
    "start": "214340",
    "end": "218540"
  },
  {
    "text": "Are they completely different things then? Or is it just that they affect different devices? How does it work?",
    "start": "218540",
    "end": "224120"
  },
  {
    "text": "So they're basically all variants of the same techniques - a way of exploiting the design of a modern CPU",
    "start": "224120",
    "end": "230060"
  },
  {
    "text": "to access data that you shouldn't have access to. The best way to think about it",
    "start": "230260",
    "end": "234799"
  },
  {
    "text": "is that Spectre describes a sort of family of different techniques or",
    "start": "234800",
    "end": "239460"
  },
  {
    "text": "exploiting the way the CPU is designed to access data that you perhaps shouldn't have access to.",
    "start": "239680",
    "end": "244200"
  },
  {
    "text": "Meltdown is a specific instance of using one of those techniques",
    "start": "245100",
    "end": "248560"
  },
  {
    "text": "specifically to access the kernel's memory, and from that, to be able to get access to any sort of memory inside",
    "start": "248820",
    "end": "255320"
  },
  {
    "text": "the computer at that time. So they're all related and they sort of all work in a similar way.",
    "start": "255540",
    "end": "260900"
  },
  {
    "text": "We'll dive down in a minute and have a look.",
    "start": "260900",
    "end": "263300"
  },
  {
    "text": "In the paper that has been released describing the way the Spectre attacks work,",
    "start": "263300",
    "end": "267780"
  },
  {
    "text": "there's some demonstration code, which I've got here. It runs the same on Mac, Windows, Linux; you can take the same code",
    "start": "267780",
    "end": "274679"
  },
  {
    "text": "and bring it to different things. It's completely independent of the operating system; this is right down at the CPU level. What we've got is",
    "start": "274780",
    "end": "282080"
  },
  {
    "text": "a function which is accessing an array of 16 elements. So we have an array and it's called",
    "start": "282100",
    "end": "288520"
  },
  {
    "text": "array one",
    "start": "289270",
    "end": "290650"
  },
  {
    "text": "which has got 16 elements in it, and they are set to be 1, 2, 3, dot dot dot... up to",
    "start": "290650",
    "end": "297900"
  },
  {
    "text": "16. So accessing in this array... They're laid out in memory, and we've talked about that in previous videos.",
    "start": "298180",
    "end": "303389"
  },
  {
    "text": "This is then accessed by a variable X, which is used to index that array, but the program says if",
    "start": "303389",
    "end": "310780"
  },
  {
    "text": "X is less than 16, [then] access the array. If it isn't [less than 16], it's not going to access the array.",
    "start": "311340",
    "end": "318240"
  },
  {
    "text": "The program's been specifically written in a way so that they won't access values past the end of the array.",
    "start": "318240",
    "end": "323080"
  },
  {
    "text": "However,",
    "start": "323500",
    "end": "324699"
  },
  {
    "text": "by using the attacks described as what's been termed Spectre, then",
    "start": "324700",
    "end": "329320"
  },
  {
    "text": "you are able to still get the values. In this case,",
    "start": "329680",
    "end": "332639"
  },
  {
    "text": "the string that I've changed from the example to be \"Hello Computerphile,\" and so if we compile this up and run it,",
    "start": "332980",
    "end": "340360"
  },
  {
    "text": "what we should see...",
    "start": "340600",
    "end": "342600"
  },
  {
    "text": "( just make it slightly bigger... )",
    "start": "342940",
    "end": "345380"
  },
  {
    "text": "... is we should see the message \"Hello Computerphile\" pop up.",
    "start": "347640",
    "end": "352200"
  },
  {
    "text": "So it's getting the data of various things, and we see here a \"Hello Computerphile\"",
    "start": "352260",
    "end": "356240"
  },
  {
    "text": "is popping up. If you go and grab the code, look at the paper -- it's sitting there at the back",
    "start": "357940",
    "end": "363700"
  },
  {
    "text": "Now this isn't",
    "start": "363940",
    "end": "365020"
  },
  {
    "text": "Anything too spectacular; it's one program accessing data inside its own program space.",
    "start": "365020",
    "end": "370440"
  },
  {
    "text": "Why is that an issue? Well the interesting thing is that what we've managed to do...",
    "start": "370680",
    "end": "374660"
  },
  {
    "text": "we've been able to do this by accessing a value that we shouldn't be able to access. This code, this if statement, should stop us",
    "start": "375100",
    "end": "380820"
  },
  {
    "text": "being able to access this past the end of this array. Yet as we can see there, the message",
    "start": "380820",
    "end": "385769"
  },
  {
    "text": "\"Hello Computerphile\" is appearing. This is a problem because this could actually be done from JavaScript on code",
    "start": "385770",
    "end": "392430"
  },
  {
    "text": "that's being downloaded from a webpage, and so one webpage will be able to pull things out of your web browser that",
    "start": "392430",
    "end": "397680"
  },
  {
    "text": "perhaps have been loaded from another webpage -- say, your bank details or something. So that's",
    "start": "397680",
    "end": "401910"
  },
  {
    "text": "one possible way that this could be exploited. The way that Spectre and",
    "start": "402240",
    "end": "407199"
  },
  {
    "text": "Meltdown work is that they take advantage of two features of a modern CPU -- the way they're designed and actually implemented.",
    "start": "407680",
    "end": "413370"
  },
  {
    "text": "So we've talked about how they're running our machine code, but underneath that's getting converted into the electronic circuits",
    "start": "413370",
    "end": "420000"
  },
  {
    "text": "which execute that and are firing them off",
    "start": "420000",
    "end": "422070"
  },
  {
    "text": "at the right times. Modern CPUs take advantage of two techniques, one of which is called out-of-order execution.",
    "start": "422530",
    "end": "427919"
  },
  {
    "text": "Basically, what this means is that the CPU will reorder the instructions --",
    "start": "428160",
    "end": "432780"
  },
  {
    "text": "Well, technically, reorder that micro-ops that the instructions get split up into, but that's going",
    "start": "433000",
    "end": "437360"
  },
  {
    "text": "into even more detail than we need",
    "start": "437889",
    "end": "439780"
  },
  {
    "text": "to find the best",
    "start": "439780",
    "end": "441580"
  },
  {
    "text": "way to execute them to keep everything going and running at the best speed. On top of this we get what's called speculative",
    "start": "441580",
    "end": "448340"
  },
  {
    "text": "evaluation, which basically means that the CPU is going to",
    "start": "448340",
    "end": "451220"
  },
  {
    "text": "execute code",
    "start": "451750",
    "end": "453750"
  },
  {
    "text": "even if it doesn't need to necessarily do that. The best example... If we go back to the code that we were running here...",
    "start": "454060",
    "end": "458820"
  },
  {
    "text": "This program has got a bit of code, and I've written it down here (the bits and we'll sort-of build up a bit)",
    "start": "459039",
    "end": "464309"
  },
  {
    "text": "which is accessing values from array 1",
    "start": "464590",
    "end": "467250"
  },
  {
    "text": "with an index of X. But before that, we check that our X is",
    "start": "468040",
    "end": "471420"
  },
  {
    "text": "less than the size of the array, and if it isn't, this code doesn't get executed. So what does Spectre need to do?",
    "start": "471600",
    "end": "477120"
  },
  {
    "text": "Spectre needs to do two things.",
    "start": "477120",
    "end": "478419"
  },
  {
    "text": "One: It needs to have this bit of code execute",
    "start": "478419",
    "end": "482189"
  },
  {
    "text": "even though it shouldn't, to try and get those values from our message out of there.",
    "start": "482919",
    "end": "487319"
  },
  {
    "text": "That's the first thing: it needs to get this bit of code to execute even though it shouldn't, and",
    "start": "487360",
    "end": "491788"
  },
  {
    "text": "Two: It needs to get the value returned from that out",
    "start": "492480",
    "end": "496860"
  },
  {
    "text": "and pass it so you can actually",
    "start": "496860",
    "end": "498699"
  },
  {
    "text": "extract that value -- to get that value that it was trying to read. So it's two things that it needs to do, and it can",
    "start": "499040",
    "end": "503960"
  },
  {
    "text": "do both of those things by exploiting the way that a modern CPU is designed.",
    "start": "503969",
    "end": "508018"
  },
  {
    "text": "Because a modern CPU",
    "start": "508810",
    "end": "510810"
  },
  {
    "text": "actually is designed",
    "start": "511060",
    "end": "512828"
  },
  {
    "text": "to sometimes execute code even though it doesn't need to.",
    "start": "512829",
    "end": "516760"
  },
  {
    "text": "Or rather, we have a technique called speculative evaluation, and what it will say is:",
    "start": "516760",
    "end": "521720"
  },
  {
    "text": "Okay, I am going to execute this code",
    "start": "522960",
    "end": "526780"
  },
  {
    "text": "because there's a very good chance that it might need to be done.",
    "start": "527320",
    "end": "529900"
  },
  {
    "text": "... But it might not, and if it doesn't, I'll undo what that code did and then execute the code",
    "start": "529930",
    "end": "535649"
  },
  {
    "text": "that should be done. An example where this might happen in",
    "start": "535649",
    "end": "539360"
  },
  {
    "text": "this code is if we didn't know the value of array one size --",
    "start": "539700",
    "end": "543779"
  },
  {
    "text": "we didn't know it was 16, so we hadn't actually got that value --",
    "start": "543779",
    "end": "546688"
  },
  {
    "text": "we'd have to go off to memory and get that value. If this had to go off to main memory rather than get it from",
    "start": "546690",
    "end": "552029"
  },
  {
    "text": "cache, it would take 200 times as long to",
    "start": "552029",
    "end": "554920"
  },
  {
    "text": "access it from main memory -- about 100 nanoseconds as opposed to half a nanosecond on a modern",
    "start": "554920",
    "end": "559740"
  },
  {
    "text": "sort-of typical modern CPU, so it'll take it a reasonably long time.",
    "start": "560110",
    "end": "563760"
  },
  {
    "text": "And so what the CPU will do while it's waiting for that value,",
    "start": "563760",
    "end": "566879"
  },
  {
    "text": "it'll make a prediction based on what's happened before -- based on the way this branch has happened before --",
    "start": "566880",
    "end": "571559"
  },
  {
    "text": "about whether it's going to execute this code or not.",
    "start": "571630",
    "end": "573719"
  },
  {
    "text": "And so it may well execute this code even though it doesn't need to, because it thinks it's going to do it.",
    "start": "573780",
    "end": "578900"
  },
  {
    "text": "In fact, there's ways that Spectre uses to",
    "start": "578940",
    "end": "580920"
  },
  {
    "text": "set that up so that that actually happens. The modern CPU will execute this anyway, and then throw the",
    "start": "580920",
    "end": "585660"
  },
  {
    "text": "result away. So how do we get the value out of it? Well actually if you look at the code",
    "start": "585660",
    "end": "590779"
  },
  {
    "text": "that's being used, it's not just getting the value from this.",
    "start": "591000",
    "end": "594320"
  },
  {
    "text": "It's actually then using that value to access another array, and it's actually multiplying this by 512.",
    "start": "594320",
    "end": "603120"
  },
  {
    "text": "Why is it doing that? Let's assume that this gets executed as well.",
    "start": "603120",
    "end": "607120"
  },
  {
    "text": "When it accesses this memory, it's going to",
    "start": "607560",
    "end": "610040"
  },
  {
    "text": "fetch (again we're talking about the cache) it's going to fetch in the whole cache line containing that thing into memory",
    "start": "610040",
    "end": "615380"
  },
  {
    "text": "and put it into the cache, so that will then get cached.",
    "start": "615380",
    "end": "618160"
  },
  {
    "text": "What that means is that the next time it's accessed, that",
    "start": "618360",
    "end": "622600"
  },
  {
    "text": "value is cached, so it'll be accessed very quickly, as opposed to very slowly - again about 200 times slower.",
    "start": "624000",
    "end": "630160"
  },
  {
    "text": "There's a way you can use the cache as a sort of covert channel to transfer information out based on whether something has been cached or not.",
    "start": "630360",
    "end": "639100"
  },
  {
    "text": "And as it turns out,",
    "start": "639680",
    "end": "641510"
  },
  {
    "text": "even though the result of this is thrown away,",
    "start": "641510",
    "end": "643510"
  },
  {
    "text": "because this then accessed the cache and brought that value into the cache line, it's not thrown away. So the cache actually",
    "start": "644360",
    "end": "650200"
  },
  {
    "text": "has that value in it.",
    "start": "650220",
    "end": "652720"
  },
  {
    "text": "So you can use speculative evaluation to cause this instruction to get executed and actually get the value from memory,",
    "start": "652720",
    "end": "659410"
  },
  {
    "text": "and then you can use the cache as a sort of covert channel to get that value,",
    "start": "659410",
    "end": "663308"
  },
  {
    "text": "or parts of that value out of this thing that's actually thrown away -- and you never actually see it --",
    "start": "663410",
    "end": "668678"
  },
  {
    "text": "[and turn it] into something that you can then extract. If you look at the rest of the code,",
    "start": "669470",
    "end": "673029"
  },
  {
    "text": "you'll see there're things where it's flushing the cache and timing how long",
    "start": "673820",
    "end": "677420"
  },
  {
    "text": "instructions take to run. So it's calling the function, and then it's looking at how long",
    "start": "677440",
    "end": "682720"
  },
  {
    "text": "instructions take to access to find out which value was cached --",
    "start": "683080",
    "end": "687300"
  },
  {
    "text": "which one was accessed quickly -- and that is based on",
    "start": "687310",
    "end": "690070"
  },
  {
    "text": "the value that was returned. So if you can find out which bit of memory was cached,",
    "start": "690200",
    "end": "694420"
  },
  {
    "text": "you can effectively use that as a proxy to find out what the value that was returned was,",
    "start": "694690",
    "end": "698320"
  },
  {
    "text": "even though the CPU threw that value away and so Spectre and",
    "start": "698560",
    "end": "703800"
  },
  {
    "text": "Meltdown all rely on the fact that the CPUs will sometimes do work",
    "start": "704360",
    "end": "707740"
  },
  {
    "text": "they don't have to, they will speculate and say well actually...",
    "start": "707740",
    "end": "709700"
  },
  {
    "text": "There's ways you can force that to actually be more likely to happen by setting things up in the right way",
    "start": "709780",
    "end": "714360"
  },
  {
    "text": "And if you read the paper [bitly link in description] you can see how that's done.",
    "start": "714370",
    "end": "716440"
  },
  {
    "text": "So it uses that to cause it, but normally that would be thrown away, but actually unfortunately",
    "start": "717160",
    "end": "721660"
  },
  {
    "text": "the way the modern CPUs are designed is that it's possible to set things up so they leave a footprint in the cache",
    "start": "721700",
    "end": "727720"
  },
  {
    "text": "about whether they accessed a value or not, and you can then",
    "start": "728120",
    "end": "731500"
  },
  {
    "text": "see what the value was returned. So it's sort of",
    "start": "732170",
    "end": "735488"
  },
  {
    "text": "clever way of extracting the values. They do it perhaps a bit at a time or a byte at a time.",
    "start": "735740",
    "end": "740200"
  },
  {
    "text": "What meltdown does is the same thing,",
    "start": "741960",
    "end": "744560"
  },
  {
    "text": "but it actually sort of",
    "start": "744580",
    "end": "746480"
  },
  {
    "text": "manages to get the data out of the kernel address space because of the way the caches are implemented and",
    "start": "746480",
    "end": "751279"
  },
  {
    "text": "the way that the protection checks are done; the speculative evaluation can sometimes happen",
    "start": "751280",
    "end": "756980"
  },
  {
    "text": "before the protection check happens because of the way the instructions can actually be reordered to make things work as best as possible.",
    "start": "757160",
    "end": "763079"
  },
  {
    "text": "So yeah, not good; probably need a new CPU.",
    "start": "763420",
    "end": "766279"
  },
  {
    "text": "[Sean]: Just reading between the lines: even though everybody's blowing up about Intel at the moment,",
    "start": "766280",
    "end": "770229"
  },
  {
    "text": "actually, the medium- to longer-term problem is all CPUs.",
    "start": "770850",
    "end": "774050"
  },
  {
    "text": "At the moment Intel has a problem because Meltdown specifically is a nasty effect,",
    "start": "776000",
    "end": "781860"
  },
  {
    "text": "and the mitigation will slow down the way computers work -- significantly, in some cases.",
    "start": "781980",
    "end": "787519"
  },
  {
    "text": "This technique of Spectre does work on other CPUs as well:",
    "start": "787540",
    "end": "792019"
  },
  {
    "text": "AMD, ARM, Intel have all said that in certain circumstances",
    "start": "792199",
    "end": "794928"
  },
  {
    "text": "there are ways that they're affected, so I suspect we will see a few more plays on this in the next few years.",
    "start": "794929",
    "end": "800860"
  },
  {
    "text": "By using this sort of idea of a superscalar approach we can actually have multiple instructions if they're in the right order --",
    "start": "802680",
    "end": "809140"
  },
  {
    "text": "they're sort of using different parts of the chips and so on -- we know multiple instructions execute at the same time",
    "start": "809140",
    "end": "814040"
  },
  {
    "text": "And then you can say well actually if we can do that",
    "start": "814040",
    "end": "816079"
  },
  {
    "text": "We can start to actually put say two ALU bits in which do the addition and so on we can have to add instructions?",
    "start": "816959",
    "end": "822768"
  },
  {
    "text": "providing they're separate",
    "start": "823170",
    "end": "825170"
  }
]