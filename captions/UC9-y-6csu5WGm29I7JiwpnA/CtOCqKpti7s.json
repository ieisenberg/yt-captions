[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "Well, today is hardcore Coding Theory,\nrelatively speaking. It's still \"64 shades",
    "start": "0",
    "end": "5730"
  },
  {
    "text": "of Grey\" for those of you looking for the\nsequel.  And remember, the sequel is always",
    "start": "5730",
    "end": "9660"
  },
  {
    "text": "better than the original thing!\n>> Sean: Is  this \"50 shades Darker then? \n\t\"64 Shades Darker ?\"\n>> DFB: Yeah! \"64 Shades Darker!\"",
    "start": "9660",
    "end": "18000"
  },
  {
    "start": "18000",
    "end": "96000"
  },
  {
    "text": "To send pictures back from Mariner 9 a\nReed-Muller code was used and Irving",
    "start": "18000",
    "end": "25439"
  },
  {
    "text": "Reed is a very famous coding theorist.\nAnd this worked incredibly well; they [JPL]",
    "start": "25439",
    "end": "29039"
  },
  {
    "text": "were ever so pleased about the results\nthey got from this.  The nice thing about",
    "start": "29039",
    "end": "33600"
  },
  {
    "text": "it from the theory point of view is that\nif you want to go all mathematical and say:",
    "start": "33600",
    "end": "38699"
  },
  {
    "text": "\"It's a multi-variable polynomial \nblah blah... y' know ...\"\nYou can do that. Because it is. But I",
    "start": "38700",
    "end": "45300"
  },
  {
    "text": "can disguise that for you with Reed-Muller\nand I can say: \"Look everyone, trust",
    "start": "45300",
    "end": "51390"
  },
  {
    "text": "me. It's just an exercise in recursion\nthat we're all familiar with\". And you've",
    "start": "51390",
    "end": "56878"
  },
  {
    "text": "got to be prepared to do concatenation\nof bit strings which I think in North",
    "start": "56879",
    "end": "61649"
  },
  {
    "text": "America and Canada is called bit\nfiddling, but here in the UK we call it",
    "start": "61649",
    "end": "65280"
  },
  {
    "text": "bit twiddling. Bit twiddling? Fiddling? \nWe don't mind which. Recursion and bit",
    "start": "65280",
    "end": "69990"
  },
  {
    "text": "twiddling is all we need to understand\nhow those pictures were sent. But because",
    "start": "69990",
    "end": "76229"
  },
  {
    "text": "it's a recursive procedure it takes us\nalmost on a sort of magical mystery tour",
    "start": "76229",
    "end": "80490"
  },
  {
    "text": "of everything we've ever done about\ncodes. Because as you build up to",
    "start": "80490",
    "end": "85020"
  },
  {
    "text": "something usable - in terms of lots of\nerror correction - you meet lots of other,",
    "start": "85020",
    "end": "89880"
  },
  {
    "text": "almost familiar, friends on the way. \nThe [n, k, d] notation is what we're going to use.",
    "start": "89880",
    "end": "96328"
  },
  {
    "start": "96000",
    "end": "173000"
  },
  {
    "text": "This comes from a previous video where\nwe qualitatively took a look at pictures",
    "start": "96329",
    "end": "101340"
  },
  {
    "text": "from Mars and how they were sent. But, of\ncourse, we're now getting down to",
    "start": "101340",
    "end": "104100"
  },
  {
    "text": "hard-core details involving recursion and\nbit twiddling. But, just for revision, the",
    "start": "104100",
    "end": "109710"
  },
  {
    "text": "total number of bits in what you're\nsending. including payload bits [i.e. message",
    "start": "109710",
    "end": "114210"
  },
  {
    "text": "bits] and the parity check bits, that's 'n'.\nWithin that, how many bits are devoted to",
    "start": "114210",
    "end": "119368"
  },
  {
    "text": "the message itself, 'k'.  What's your distance?\nAnd the bigger that number is the more",
    "start": "119369",
    "end": "124680"
  },
  {
    "text": "errors you can correct. So the\ncorrectable errors is your distance,",
    "start": "124680",
    "end": "130429"
  },
  {
    "text": "here minus 1, divided by 2, and take the \"floor of\" \nThe thing that we are headed for at the end",
    "start": "130429",
    "end": "137599"
  },
  {
    "text": "of our recursion is 32 bits total, 6\nbits of message.  16 is the distance. This",
    "start": "137599",
    "end": "145459"
  },
  {
    "text": "magic code, when we've got there, will\nactually correct up to 7 wrong bits",
    "start": "145459",
    "end": "151700"
  },
  {
    "text": "in 32. And, I mean, some of you will be saying: \n\"Why couldn't you do this earlier?!\" The answer",
    "start": "151700",
    "end": "157250"
  },
  {
    "text": "is: \"It's a trade-off\". The trade-off is\n[that] we've only got six payload bits, whereas",
    "start": "157250",
    "end": "163459"
  },
  {
    "text": "with things like Hamming codes it would\nhave been more like 26. You pay your",
    "start": "163459",
    "end": "166909"
  },
  {
    "text": "money and you make your choice! OK, well how\ndo we do this recursion then? How does it",
    "start": "166909",
    "end": "172760"
  },
  {
    "text": "develop? Every recursion has to have a\nsort of bottom point where it finishes.",
    "start": "172760",
    "end": "177950"
  },
  {
    "start": "173000",
    "end": "385000"
  },
  {
    "text": "You know, factorial(0) is 1. That sort of\nthing. Well, here we're going to develop",
    "start": "177950",
    "end": "184400"
  },
  {
    "text": "the ... [what are] known in some textbooks as the \nH_n codes. And the reason for that is that",
    "start": "184400",
    "end": "192769"
  },
  {
    "text": "they are actually derived from things\ncalled Hadamard matrices. There's lots",
    "start": "192769",
    "end": "199099"
  },
  {
    "text": "of ways of getting at these Reed-Muller\ncodes. But the fact that there is a",
    "start": "199099",
    "end": "204799"
  },
  {
    "text": "Hadamard matrix method of getting at\nit is good news for us. Because what",
    "start": "204799",
    "end": "210739"
  },
  {
    "text": "it means is you can do it recursively\nand, as computer scientists, we're all",
    "start": "210739",
    "end": "214459"
  },
  {
    "text": "totally and completely happy with\nrecursion, I know we are. The zeroth one of",
    "start": "214459",
    "end": "220220"
  },
  {
    "text": "these codes, the very simplest, is just so\nsimple it's laughable, just the single",
    "start": "220220",
    "end": "225949"
  },
  {
    "text": "bit \"1\". But every good recursion has got\nto have an algorithm for how you get",
    "start": "225949",
    "end": "231829"
  },
  {
    "text": "from this one, to the previous one, to the\nnext one and so on. The rule for",
    "start": "231829",
    "end": "237109"
  },
  {
    "text": "constructing - shall we call it H_n - is\nat every stage you take 2^(n-1) 0s",
    "start": "237109",
    "end": "244790"
  },
  {
    "text": "and  2^(n-1) 1s\nSo, in other words, you get a bunch of",
    "start": "244790",
    "end": "251418"
  },
  {
    "text": "zeros and a bunch of ones - joined together by\nconcatenation. Plus, at every stage of the",
    "start": "251419",
    "end": "257299"
  },
  {
    "text": "recursion, you do 2-fold repetitions of previous",
    "start": "257299",
    "end": "264680"
  },
  {
    "text": "patterns, from the previous version of\nthe recursion. It's one of these things",
    "start": "264680",
    "end": "271039"
  },
  {
    "text": "where it's actually ... let's start doing it \nand then I'll keep cross-referring here and",
    "start": "271040",
    "end": "274850"
  },
  {
    "text": "you'll get the hang. H_0 is 1. That's\ngod-given, you can't contest that. That's",
    "start": "274850",
    "end": "279110"
  },
  {
    "text": "the bottom. OK then, so what about H_1 ?\nWell, what this is saying is that for H_1",
    "start": "279110",
    "end": "285979"
  },
  {
    "text": "our 'n' value is 1. So we're going to have to\nput in a pattern, here, that is ",
    "start": "285980",
    "end": "292010"
  },
  {
    "text": "2^(n-1) 0s.  Well 'n' is 1.\nThat's 2 ^ (1 - 1).",
    "start": "292010",
    "end": "298220"
  },
  {
    "text": "2 ^ 0. But anything to the power 0 is 1. \nSo you start off with one 0 and one 1 [i.e. 01]",
    "start": "298220",
    "end": "305450"
  },
  {
    "text": "OK but the rule says ... and as well as\nthat your working set - this is called ",
    "start": "305450",
    "end": "312560"
  },
  {
    "text": "your *basis set* of things you're building\nup - your working set must also include a",
    "start": "312560",
    "end": "317030"
  },
  {
    "text": "two-fold repetition of the things you\nhad previously. Well the only thing I had",
    "start": "317030",
    "end": "322340"
  },
  {
    "text": "previously was a 1. So what's a two-fold\nrepetition of 1?  [It's] 11.  It's all to do",
    "start": "322340",
    "end": "328250"
  },
  {
    "text": "with *concatenation*. We're not, at the\nmoment, doing any arithmetic or XORs.",
    "start": "328250",
    "end": "332180"
  },
  {
    "text": "We're just joining bit patterns together. \nSo here we are then, it's 11. Now a rule",
    "start": "332180",
    "end": "337340"
  },
  {
    "text": "here - which is a quite general thing in\ndeveloping these codes - is you can always",
    "start": "337340",
    "end": "343910"
  },
  {
    "text": "introduce a 0 vector, as it's called. If I\nkeep calling these things *vectors* don't",
    "start": "343910",
    "end": "352400"
  },
  {
    "text": "worry. It's a very \"in\" phrase - you can\nbandy it around in the pub. But all it",
    "start": "352400",
    "end": "356330"
  },
  {
    "text": "really means is 'bit strings'. You can\nalways introduce a zero vector of order 'n'.",
    "start": "356330",
    "end": "362720"
  },
  {
    "text": "What that means is - absolutely for free\nand from nowhere - I can add to this 00.",
    "start": "362720",
    "end": "369590"
  },
  {
    "text": "OK? And if I was working with bit strings,\nas we will eventually be, that are",
    "start": "369590",
    "end": "375050"
  },
  {
    "text": "4 bits long,  I can just bring in four 0s.\nIt's bound to be there. The zero vector, at",
    "start": "375050",
    "end": "380090"
  },
  {
    "text": "whatever length, is always part of your\nset of codewords. That's fine. So you can",
    "start": "380090",
    "end": "386030"
  },
  {
    "start": "385000",
    "end": "431000"
  },
  {
    "text": "look at this now and say \"You know, you've almost\ngot a valid code there, haven't you, in 2 bits?\"",
    "start": "386030",
    "end": "390110"
  },
  {
    "text": "Look you've got 01, 11.\nAnd you say that absolutely for",
    "start": "390110",
    "end": "395589"
  },
  {
    "text": "free i can have 00? Do you know if you\njust added 10 in there, you'd have a complete",
    "start": "395589",
    "end": "401349"
  },
  {
    "text": "set of 4-bit possibilities wouldn't\nyou? Yes and here is a lovely way to",
    "start": "401349",
    "end": "406119"
  },
  {
    "text": "introduce you to what I blather on about\nfrom some time-  it's called a *linear code*.",
    "start": "406119",
    "end": "409988"
  },
  {
    "text": "It means, if you add these things\ntogether with XOR they'll",
    "start": "409989",
    "end": "415300"
  },
  {
    "text": "deliver something else in the same\nfamily. Well, look, there's only one thing",
    "start": "415300",
    "end": "419319"
  },
  {
    "text": "we're missing in this family of 4-bit\npossibilities. So if I do 01 - and I'll",
    "start": "419319",
    "end": "425649"
  },
  {
    "text": "indicate my XOR, \"binary addition without carry\", \nwith that + [within a circle], what happens",
    "start": "425649",
    "end": "431888"
  },
  {
    "start": "431000",
    "end": "538000"
  },
  {
    "text": "if you add 01 to 11? Well 1 + 0 is 1,\nbecause they differ, 1 + 1 is 0 because",
    "start": "431889",
    "end": "438399"
  },
  {
    "text": "they're the same.  Hurrah! that has delivered\nme my final possibility of 10. So what",
    "start": "438399",
    "end": "447638"
  },
  {
    "text": "we're saying is: at every level of this\nrecursion you take what's called your",
    "start": "447639",
    "end": "452589"
  },
  {
    "text": "basis vectors, that come from this\nrecursive algorithm, lots of zeros, lots",
    "start": "452589",
    "end": "456698"
  },
  {
    "text": "of ones, plus double-ups of what you had\nlast time. You do all of those but then",
    "start": "456699",
    "end": "461319"
  },
  {
    "text": "you add together what you've got in all\npossible combinations. And you know that",
    "start": "461319",
    "end": "467050"
  },
  {
    "text": "they'll form a closed family. You'll get to\na stage where they won't deliver",
    "start": "467050",
    "end": "470379"
  },
  {
    "text": "anything different. They just rattle\naround within themselves. Now look at",
    "start": "470379",
    "end": "475749"
  },
  {
    "text": "this fabulous code, Sean! It's so familiar\nto us isn't it? But it's not very",
    "start": "475749",
    "end": "480699"
  },
  {
    "text": "exciting because in [n, k, d] terms what\nare we saying that this is? It's got a",
    "start": "480699",
    "end": "488110"
  },
  {
    "text": "2-bit code but the payload is 2 bits\nlong. There is no space for any error",
    "start": "488110",
    "end": "493599"
  },
  {
    "text": "correction, and if there's no space for\nany error correction whatsoever, then",
    "start": "493599",
    "end": "497740"
  },
  {
    "text": "they must be distance 1 apart. They all\ndiffer by one bit as you go from zero",
    "start": "497740",
    "end": "502629"
  },
  {
    "text": "through to 4.\n>> Sean:  I have to confess to being\ncompletely lost at this moment!",
    "start": "502629",
    "end": "506409"
  },
  {
    "text": "I understood what you said but I don't see\nhow it has a bearing on where we're going.",
    "start": "506409",
    "end": "509768"
  },
  {
    "text": ">> DFB: It will! Next time around, believe me, this\nwill have such a bearing as you can't imagine.",
    "start": "509769",
    "end": "515078"
  },
  {
    "text": "What I'm saying is, in the\ntrivial case this doesn't give us an",
    "start": "515079",
    "end": "518229"
  },
  {
    "text": "error-correcting code at all so it's\nuseless. But we recur one more time! ",
    "start": "518229",
    "end": "522789"
  },
  {
    "text": "I might need your help here. H_2. \nOh crumbs! You need 2 ^ (n - 1) 0s",
    "start": "522789",
    "end": "528860"
  },
  {
    "text": "and 2^(n-1) 1s. So that's always the new\nthing - introduced every time, yeah? ",
    "start": "528860",
    "end": "533839"
  },
  {
    "text": "It's 2 ^ 1, which is 2. So you need two\n0s and two 1s, plus two-fold",
    "start": "533840",
    "end": "539960"
  },
  {
    "start": "538000",
    "end": "603000"
  },
  {
    "text": "repetitions ... now I did derive that, but\nthat wasn't part of the basis set.",
    "start": "539960",
    "end": "546740"
  },
  {
    "text": "Two-fold repetitions of what you had last\ntime. Well, 0101 and 1111.",
    "start": "546740",
    "end": "555560"
  },
  {
    "text": "Don't worry about the zeros. You can always add\nthose in at this stage. If we want to add",
    "start": "555560",
    "end": "559550"
  },
  {
    "text": "in a four 0s vector we can do so at whatever\nstage we want.\n>> Sean: So that's just",
    "start": "559550",
    "end": "565490"
  },
  {
    "text": "like you can have a code of nothing?\n>> DFB: Yeah, it's a bit like, you know, when",
    "start": "565490",
    "end": "570649"
  },
  {
    "text": "you're doing arithmetic systems you find\nzeros are useful. But it really is like",
    "start": "570650",
    "end": "574970"
  },
  {
    "text": "saying 5 + 0 = 5. all right?\nBut, of course, with XOR systems it's",
    "start": "574970",
    "end": "580430"
  },
  {
    "text": "handy to have it because if you\naccidentally XOR something with",
    "start": "580430",
    "end": "584720"
  },
  {
    "text": "itself, because they're identical, it will\nyield a bunch of zeros for you. So it's handy",
    "start": "584720",
    "end": "589129"
  },
  {
    "text": "to have that there, as a kind of check\nthat it didn't just arise from outer",
    "start": "589130",
    "end": "593420"
  },
  {
    "text": "space. It could have arisen from adding\ntwo things together that were absolutely",
    "start": "593420",
    "end": "597410"
  },
  {
    "text": "identical. These are what's called *basis vectors* \nfor the vector space and",
    "start": "597410",
    "end": "601670"
  },
  {
    "text": "they're 4 bits long. But from these you\ncan generate all of the 4-bit",
    "start": "601670",
    "end": "608660"
  },
  {
    "start": "603000",
    "end": "688000"
  },
  {
    "text": "possibilities you're after by simply\nadding - either taking them as they come or",
    "start": "608660",
    "end": "613490"
  },
  {
    "text": "adding them together with XOR.\nAnd I'll show this now on this sheet",
    "start": "613490",
    "end": "618080"
  },
  {
    "text": "which I'll carefully introduce over here.\nI've introduced a 4-bit 0 vector which",
    "start": "618080",
    "end": "623120"
  },
  {
    "text": "sometimes is called 'bold 0'. That is the 0\nvector of whatever length you need.",
    "start": "623120",
    "end": "628430"
  },
  {
    "text": "Remember the x_1 we got? Two 0s and two 1s? Fine.\nx_2: 0101 ;   x_3:  1111. Those are the three we",
    "start": "628430",
    "end": "637040"
  },
  {
    "text": "started with. Now add them together in\nall possible combinations until you",
    "start": "637040",
    "end": "641930"
  },
  {
    "text": "don't get anything new. And I mean\nXOR of course. x_1 + x_2 = 0110",
    "start": "641930",
    "end": "648140"
  },
  {
    "text": "x_1 + x_ 3 = 1100. How about x_2 + x_3?\n1010. And finally the final",
    "start": "648140",
    "end": "657800"
  },
  {
    "text": "possible combination is all three of them.\nAnd of course you",
    "start": "657800",
    "end": "660959"
  },
  {
    "text": "know it doesn't matter what order you do\nthese XORs in: x_1 + x_2 + x_3",
    "start": "660960",
    "end": "665040"
  },
  {
    "text": "is the same as x_3 + x_1 + x_2.\nYou do all that one and you get 1001.",
    "start": "665040",
    "end": "669420"
  },
  {
    "text": "Now when you look here, look,\n[counting] 1, 2, 3, 4, 5, 6, 7, 8.",
    "start": "669420",
    "end": "675000"
  },
  {
    "text": "You've generated 8 possibilities out of all the 16",
    "start": "675000",
    "end": "680100"
  },
  {
    "text": "possibilities in 4 bits. What I'm\nsaying to you is, you take any two of",
    "start": "680100",
    "end": "684060"
  },
  {
    "text": "those now, and add them together again.\nYou won't get anything new. If I take 1010 [+]",
    "start": "684060",
    "end": "690270"
  },
  {
    "text": "1100. Do an XOR on those. I'll get \n0110. There it is look, just above.",
    "start": "690270",
    "end": "698010"
  },
  {
    "text": "Try it with any of those and you\nwon't get anything new. The other thing I'd",
    "start": "698010",
    "end": "702420"
  },
  {
    "text": "point out to you, here, is what is the\nminimum distance of this code? Well, look",
    "start": "702420",
    "end": "707519"
  },
  {
    "text": "0011 how distant is that from 0000? Two.\nYeah, the only exception is if",
    "start": "707520",
    "end": "714000"
  },
  {
    "text": "you take the zero vector with the vector\nthat's all 1s. you will get a much",
    "start": "714000",
    "end": "719610"
  },
  {
    "text": "bigger distance - you'll  get 4. But you're\nnot worried about the maximum [distance] one.",
    "start": "719610",
    "end": "723660"
  },
  {
    "text": "You're worried about the [minimum distance] one.\nSo this thing, then, it's not exactly",
    "start": "723660",
    "end": "727170"
  },
  {
    "text": "award-winning but it's a step on the way.\nWe've now got something -  let me use my",
    "start": "727170",
    "end": "733470"
  },
  {
    "text": "crib-sheet and write down for you. \nH_2 is a [4, 3, 2] code. And you look at that and ",
    "start": "733470",
    "end": "742980"
  },
  {
    "text": "you say: \"Well, that's a bit better than last\ntime where we didn't do any error correction\"t",
    "start": "742980",
    "end": "747029"
  },
  {
    "text": "But we all know, from previous videos, if the\nthing's only got a distance of 2 you",
    "start": "747029",
    "end": "750690"
  },
  {
    "text": "can't correct an error, you can only\ndetect it. And when you look back at",
    "start": "750690",
    "end": "754890"
  },
  {
    "text": "this set of possible codewords,\nwe've seen that it's actually carrying a",
    "start": "754890",
    "end": "761400"
  },
  {
    "text": "3-bit payload with one parity check bit\nat the end of it. And overall it's always",
    "start": "761400",
    "end": "766589"
  },
  {
    "text": "even parity. Yes, but we're on our way! We\ncan now fast forward and say: \"What about H_3?\"",
    "start": "766589",
    "end": "772980"
  },
  {
    "text": "What we're going to develop\nfrom here is basically a set of 16 8-bit",
    "start": "772980",
    "end": "780959"
  },
  {
    "text": "possibilities and if you sort of say\n\"Well this is H_3, what is its [n, k, d] rating?",
    "start": "780959",
    "end": "787529"
  },
  {
    "text": "It's an [8, 4, 4] code. We're coming on!",
    "start": "787529",
    "end": "795010"
  },
  {
    "text": "We're getting a bit of error correction at\nlast! Now. In this recursive build up. Aren't we?r",
    "start": "795010",
    "end": "798190"
  },
  {
    "text": "4 - 1 Sean?  3.  3 / 2 = 1.5\nround down to 1 \nIt can correct one error. It's getting up",
    "start": "798190",
    "end": "807310"
  },
  {
    "text": "to Hamming code standards this is! We're\nup to [8, 4, 4] for this H_3 code.",
    "start": "807310",
    "end": "814600"
  },
  {
    "text": "But probably the most equivalent Hamming code\nI could pluck out for you is [7, 4, 3].",
    "start": "814600",
    "end": "823540"
  },
  {
    "text": "A perfect illustration of trade-off. Look, that will\nonly correct one error but it's got a",
    "start": "823540",
    "end": "828160"
  },
  {
    "text": "payload of four bits. That's [also] got a\npayload of four bits and this is pretty comparable.",
    "start": "828160",
    "end": "832600"
  },
  {
    "text": ">> Sean: How far do you have to go with\nthis before you get ...\n>> DFB: well we've done H_3",
    "start": "832600",
    "end": "836680"
  },
  {
    "text": "and you've got to get to H_5. We will draw a veil\nover H_4 completely. I will leave",
    "start": "836680",
    "end": "842380"
  },
  {
    "text": "you to read the handout and work out the\nbasis vectors and do it all for yourself. ",
    "start": "842380",
    "end": "847510"
  },
  {
    "text": "Or, if you can't be bothered to, you can use\nmy 'awk' program which has got an option",
    "start": "847510",
    "end": "851410"
  },
  {
    "text": "in to generate it. Let me just say H_4 has a\n[n, k, d] rating of [16, 5, 8]  and that's very nice",
    "start": "851410",
    "end": "862600"
  },
  {
    "text": "Look at that: 8 - 1 = 7; 7/2 = 3.5; \nRound it down. It could correct ",
    "start": "862600",
    "end": "868480"
  },
  {
    "text": "three errors in a 16-bit codeword. This is\nlooking good. But those clever engineers",
    "start": "868480",
    "end": "873730"
  },
  {
    "text": "at JPL, and elsewhere, said: \"Oh!! if we\nwent one stage further we could do even",
    "start": "873730",
    "end": "878889"
  },
  {
    "text": "better\". H_5, this is our target. [32, 6, 16].\nNotice what's happening is that at every",
    "start": "878889",
    "end": "888850"
  },
  {
    "text": "stage of these Hadamard / Reed-Muller\ncodes the size - the length of them.",
    "start": "888850",
    "end": "893380"
  },
  {
    "text": "It's exponential; it's doubling. It's \ngone 2, 4, 8, 16, 32 The next one will \nbe 64. So they are expanding at",
    "start": "893380",
    "end": "900760"
  },
  {
    "text": "a heck of a rate. And as some sardonic\nperson has once said, in the Comments on these:",
    "start": "900760",
    "end": "907389"
  },
  {
    "text": "\"The trouble with extending these codes\nis [that] it only gives the cosmic rays more",
    "start": "907389",
    "end": "911290"
  },
  {
    "text": "chance to damage them\" And that's quite\ntrue, So this is a fabulous compromise as",
    "start": "911290",
    "end": "916029"
  },
  {
    "text": "you can see now.\nI hope you've all by now seen the",
    "start": "916029",
    "end": "920430"
  },
  {
    "text": "previous video, with the pictures from\nMars. If not you can always go and",
    "start": "920430",
    "end": "923940"
  },
  {
    "text": "consult it but this was just about\nperfect - you get a 6-bit payload packed",
    "start": "923940",
    "end": "928950"
  },
  {
    "text": "inside 32. And with a lot of hard work, at\nthe Jet Propulsion Laboratory, you can",
    "start": "928950",
    "end": "935040"
  },
  {
    "text": "deterministically decode every one of\nthese vectors to get its shade of grey",
    "start": "935040",
    "end": "941759"
  },
  {
    "text": "out of it - so long as it's not being hit\nby more than 7 errors. You might have",
    "start": "941760",
    "end": "946950"
  },
  {
    "text": "a big decoding effort to do this quickly\nenough because it can very easily mount up,",
    "start": "946950",
    "end": "954240"
  },
  {
    "text": "but that's solved the problem for you.\nMission Accomplished, really, I think, this.",
    "start": "954240",
    "end": "958920"
  },
  {
    "text": "It solves all our error correcting\ndesires for this particular level of",
    "start": "958920",
    "end": "968130"
  },
  {
    "text": "technology that happened in the Mariner\n9. It was always counted a great success",
    "start": "968130",
    "end": "972690"
  },
  {
    "text": "Of course, things have moved on from\nthere a lot, since that date. ",
    "start": "972690",
    "end": "980400"
  },
  {
    "text": "[Trailer for EXTRA BITS]\nWe've used secure shell [ssh] to bridge across \nto something I'm more familiar with: Open",
    "start": "980400",
    "end": "985020"
  },
  {
    "text": "SuSse Linux. And i think I can't remember\nin the previous ....",
    "start": "985020",
    "end": "991970"
  }
]