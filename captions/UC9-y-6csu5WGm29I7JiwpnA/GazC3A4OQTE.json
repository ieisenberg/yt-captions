[
  {
    "text": "(Sean:) So what we got here, Mike, tell me, tell me!",
    "start": "30",
    "end": "2399"
  },
  {
    "text": "(Mike:) Well, we have a strange graph drawn out on my page. A comment on a previous video asked about Dijkstra's shortest path, now",
    "start": "2399",
    "end": "8549"
  },
  {
    "text": "I happen to have implemented Dijkstra's shorter path for one of the pieces of research",
    "start": "8550",
    "end": "11399"
  },
  {
    "text": "I was doing a few years ago, so I thought: \"I'm at least somewhat placed to have to give an opinion on it!\"",
    "start": "11400",
    "end": "17010"
  },
  {
    "text": "So let's talk about Dijkstra's shortest path, what it is, where it's used, and so on.",
    "start": "17010",
    "end": "22049"
  },
  {
    "text": "Path finding algorithms are obviously quite important -- we use them all the time on Google maps or on our sat-nav system,",
    "start": "24939",
    "end": "32099"
  },
  {
    "text": "all right, there was a recent video on satellite navigation",
    "start": "32320",
    "end": "34500"
  },
  {
    "text": "and how it works, but of course that's only half the story.",
    "start": "34690",
    "end": "37349"
  },
  {
    "text": "(Mike:) Finding out where you are exactly is the first part of the problem, the second part is \"I want to go over here,",
    "start": "37690",
    "end": "43110"
  },
  {
    "text": "what's the best route to do this?\"",
    "start": "43110",
    "end": "44770"
  },
  {
    "text": "Okay, route planning also comes in on things like routing, so if you've got a network and lots of routers",
    "start": "44770",
    "end": "50249"
  },
  {
    "text": "what's the best way to route those packets through which ports to get to your destination the quickest, so things like this -- now Dijkstra's",
    "start": "50280",
    "end": "57180"
  },
  {
    "text": "shortest paths sees a lot of use in all of these things and",
    "start": "57180",
    "end": "59520"
  },
  {
    "text": "extensions of it, so for example A* search -- so I've drawn out an",
    "start": "60100",
    "end": "64710"
  },
  {
    "text": "approximation of a road system on this piece of paper,",
    "start": "65379",
    "end": "68518"
  },
  {
    "text": "so we're going to use the analogy of roads",
    "start": "68520",
    "end": "70520"
  },
  {
    "text": "for this one, because I think it's a good -- good example of types of shortest paths and we're trying to start here, at S, and",
    "start": "70659",
    "end": "76739"
  },
  {
    "text": "get down to E, right, this is broadly speaking, a small version of what a sat-nav does when you say:",
    "start": "76740",
    "end": "82798"
  },
  {
    "text": "\"How do I get there\", right?",
    "start": "82799",
    "end": "84799"
  },
  {
    "text": "Now, each of these",
    "start": "85090",
    "end": "87090"
  },
  {
    "text": "nodes represents a junction, so, the vertices on the graph, so, A could be a roundabout, B the T-junction -- doesn't really matter --",
    "start": "87490",
    "end": "94258"
  },
  {
    "text": "actually B is more of a roundabout because it has four outputs -- anyway, each of these numbers",
    "start": "94840",
    "end": "98490"
  },
  {
    "text": "represents how hard it is to get along that road, so that in real life would be whether it was a motorway or a highway,",
    "start": "99159",
    "end": "105029"
  },
  {
    "text": "whether it was a country road with a load of potholes,",
    "start": "105399",
    "end": "107609"
  },
  {
    "text": "maybe there's a tree down it and so you can't get through that road, right, so in the Dijkstra implementation that I",
    "start": "107850",
    "end": "113970"
  },
  {
    "text": "am familiar with, and most Dijkstra implementations,",
    "start": "114220",
    "end": "117149"
  },
  {
    "text": "smaller is better okay, so broadly speaking this route here is kind of like our motorway right, twos, ones,",
    "start": "117939",
    "end": "125309"
  },
  {
    "text": "that's good,",
    "start": "125310",
    "end": "126008"
  },
  {
    "text": "this one is a bit of a faff, you know, for some maybe mildly A-roads,",
    "start": "126009",
    "end": "130469"
  },
  {
    "text": "right, and this seven here that you're falling in a fort,",
    "start": "130569",
    "end": "133409"
  },
  {
    "text": "and, you know, you've got water in the engine,",
    "start": "133730",
    "end": "135470"
  },
  {
    "text": "and it's bad. The question is \"how do we find a route from here to here\", now, of course, this is a small graph",
    "start": "135470",
    "end": "141619"
  },
  {
    "text": "so actually what we could just do is just search all the way through it by hand or",
    "start": "141660",
    "end": "145129"
  },
  {
    "text": "using a very simple sort of brute-force search approach, and kind of get the best go, right,",
    "start": "145650",
    "end": "150530"
  },
  {
    "text": "but if you think of the UK or the US or some other countries'",
    "start": "150540",
    "end": "153920"
  },
  {
    "text": "massive road network, we can't afford to do that, right, we have to be a bit smarter about how we look through.",
    "start": "154170",
    "end": "159349"
  },
  {
    "text": "And we also want to know absolutely that once we found a route, it is in fact the shortest route,",
    "start": "159900",
    "end": "165110"
  },
  {
    "text": "and we didn't just miss one. What Dijkstra does is basically",
    "start": "165110",
    "end": "168139"
  },
  {
    "text": "similar to a sort of brute-force flood-fill search through this space,",
    "start": "169349",
    "end": "172309"
  },
  {
    "text": "but does it in a kind of -- in the order that makes the most sense,",
    "start": "172620",
    "end": "175370"
  },
  {
    "text": "based on how fast these roads are, so it will check the quickest roads first. So to do Dijkstra,",
    "start": "175530",
    "end": "180919"
  },
  {
    "text": "we need a few things, first of all we obviously need a graph right and then we need some -- some",
    "start": "180920",
    "end": "186500"
  },
  {
    "text": "idea of how long the path is, to let's say B,",
    "start": "186959",
    "end": "190097"
  },
  {
    "text": "once we've calculated it or something like it so at the very beginning of our search we have S, we are at S,",
    "start": "190099",
    "end": "196429"
  },
  {
    "text": "(Sean:) As for start, right? (Mike:) It's for start, yes,",
    "start": "196650",
    "end": "198769"
  },
  {
    "text": "which confused me because some of the other",
    "start": "198810",
    "end": "200609"
  },
  {
    "text": "letters are just in order and then these two aren't, but anyway,",
    "start": "200609",
    "end": "203058"
  },
  {
    "text": "S has a distance of zero, right, it costs me nothing to get to S because I'm already there, everything else --",
    "start": "203060",
    "end": "207739"
  },
  {
    "text": "I'll just put a couple out, just to show you, A, B and K have a distance of infinity because that basically says we haven't",
    "start": "207840",
    "end": "213769"
  },
  {
    "text": "looked yet, we don't know how far, so for all we know it might not be possible to get there,",
    "start": "214079",
    "end": "218329"
  },
  {
    "text": "no, and finally, E",
    "start": "218480",
    "end": "220480"
  },
  {
    "text": "it's just the same, it's infinity, but with a smiley face to say that we've made it, right,",
    "start": "220530",
    "end": "225139"
  },
  {
    "text": "now this structure here that I'm going to create is called a \"priority queue\". Each of these will have a distance,",
    "start": "225389",
    "end": "230929"
  },
  {
    "text": "but they're ordered also by that distance, so the shortest one is at the top, that's important, and we'll do it as we go through.",
    "start": "231030",
    "end": "237589"
  },
  {
    "text": "So let's start our search, we start at S, and we look through the neighbors of S and we say \"right, well, A,",
    "start": "238170",
    "end": "242929"
  },
  {
    "text": "it costs me 7 to get to A\", right, it's a bit of a pain.",
    "start": "243389",
    "end": "246319"
  },
  {
    "text": "So, we were at 0 distance, it costs me 7, so now we're at 7, right?",
    "start": "246480",
    "end": "252049"
  },
  {
    "text": "So, A, I scratch my infinity,",
    "start": "252500",
    "end": "254450"
  },
  {
    "text": "and I write 7, all right, so A is 7, okay, A is still the second shortest path currently because all the others are infinity.",
    "start": "254450",
    "end": "261708"
  },
  {
    "text": "Yeah, B is 0+2 so that's 2,",
    "start": "261709",
    "end": "265580"
  },
  {
    "text": "so let's just put a 2 in there. (Sean:) This is all even though we haven't actually got to the end yet,",
    "start": "265860",
    "end": "269900"
  },
  {
    "text": "you're just looking at the numbers.",
    "start": "269900",
    "end": "271340"
  },
  {
    "text": "(Mike:) we can't get to E without having a look through all of these junctions,",
    "start": "271340",
    "end": "274789"
  },
  {
    "text": "so this is what we're doing, and we're working our way in a smart way, now B",
    "start": "274889",
    "end": "278299"
  },
  {
    "text": "is in this priority queue, but it has a lower number than A, so it takes its place at the top of a line,",
    "start": "278300",
    "end": "283460"
  },
  {
    "text": "okay, so that's good so far.",
    "start": "283500",
    "end": "285500"
  },
  {
    "text": "Finally, the only other thing connected to S is",
    "start": "285629",
    "end": "287779"
  },
  {
    "text": "C, which has got a weighting of three, so let's just find C in my list, of course, shuffled",
    "start": "287879",
    "end": "293179"
  },
  {
    "text": "thingies and there we go,",
    "start": "293550",
    "end": "295220"
  },
  {
    "text": "and hopefully",
    "start": "295220",
    "end": "296000"
  },
  {
    "text": "how Dijkstra works will start to become clear once you see what I do next, so C is three, the only other thing that of",
    "start": "296000",
    "end": "302179"
  },
  {
    "text": "course I forgot, is",
    "start": "302180",
    "end": "303690"
  },
  {
    "text": "while we're doing our search, we have to keep track of where we've been, so B, for example,",
    "start": "303690",
    "end": "309109"
  },
  {
    "text": "we know has a distance of two through the path S, ok, so S was the previous version, right, that's also true of A, and",
    "start": "309110",
    "end": "316819"
  },
  {
    "text": "also true of C. Now after we swap",
    "start": "317039",
    "end": "319999"
  },
  {
    "text": "C and A so now we have them in order, all we have not seen is still infinity. Now, S is done, right, so we can take it away",
    "start": "320000",
    "end": "325789"
  },
  {
    "text": "and put it in our finished pile over here, right, S we don't need to worry about anymore.",
    "start": "325789",
    "end": "330169"
  },
  {
    "text": "The next step, is to see where is the current shortest path, well it's B,",
    "start": "330569",
    "end": "335029"
  },
  {
    "text": "right, B has got the lowest number, so let's start looking at B. So, if we look at B,",
    "start": "335030",
    "end": "339139"
  },
  {
    "text": "we've already been to S, so we ignore it. We can go to D,",
    "start": "339139",
    "end": "342079"
  },
  {
    "text": "so let's put in a D, and D is the distance to B plus whatever this road is which is 6, 2 plus 4 is 6,",
    "start": "342080",
    "end": "348180"
  },
  {
    "text": "and the route",
    "start": "348180",
    "end": "349460"
  },
  {
    "text": "through D, which is shortest is currently going through B, and we'll put that in, now 6 goes in just above A, ok, there",
    "start": "349469",
    "end": "356359"
  },
  {
    "text": "we go. Now we can also go to B from A -- we haven't finished with A yet,",
    "start": "356360",
    "end": "361430"
  },
  {
    "text": "it's just sitting in this queue -- and currently the distance to A is 7, right,",
    "start": "361430",
    "end": "365000"
  },
  {
    "text": "but, actually, the distance to B was 2, and the distance to A from B is 3, which is 5, so actually,",
    "start": "365639",
    "end": "372079"
  },
  {
    "text": "taking this detour here which looks longer is actually shorter, because of this tree on the line or something like that right, so remember, you know this",
    "start": "372479",
    "end": "379278"
  },
  {
    "text": "isn't representative of the actual physical distance from S to C. So we've updated D, and A is now shorter, right?",
    "start": "379279",
    "end": "385669"
  },
  {
    "text": "So, we kept -- we take our A, and we say \"well now the route is 5, not 7\", it's decreased and",
    "start": "385669",
    "end": "391609"
  },
  {
    "text": "it's no longer the shortest path from S to A, it's from B,",
    "start": "392130",
    "end": "395479"
  },
  {
    "text": "so look scribble out S, right, like, I'm getting too much technical needs but don't worry about it.",
    "start": "395479",
    "end": "399829"
  },
  {
    "text": "So, A now overtakes D in our priority queue, all right?",
    "start": "400010",
    "end": "404120"
  },
  {
    "text": "So that's looking good, okay, H, B had a length of 2, H",
    "start": "404850",
    "end": "408890"
  },
  {
    "text": "has a length of 1, so H has a distance of 3, B is done, right? We've done B,",
    "start": "409200",
    "end": "413599"
  },
  {
    "text": "we can count that as done, so C next, right, so we're here. We can't go to S, we can only go to L,",
    "start": "413600",
    "end": "420650"
  },
  {
    "text": "that's a nice, easy one. So I need to find out -- so L goes to C and",
    "start": "420650",
    "end": "424669"
  },
  {
    "text": "it's 3 plus 2, it's 5, so L comes in just underneath value like this, so C's done",
    "start": "425310",
    "end": "430580"
  },
  {
    "text": "So we look at H,",
    "start": "430580",
    "end": "431419"
  },
  {
    "text": "and we say \"what's next from H\". We can look at F, so F will get 3 plus another 3, so about 6,",
    "start": "431420",
    "end": "437749"
  },
  {
    "text": "via H, and then G is H, which is 3, plus 2 so that's 5.",
    "start": "438450",
    "end": "444200"
  },
  {
    "text": "A next, we've already been to S, we've already been to B. So we start to get a little bit faster now,",
    "start": "444510",
    "end": "449450"
  },
  {
    "text": "we've seen some stuff, already. What we're basically saying is, we know what the shortest path to B",
    "start": "449450",
    "end": "452990"
  },
  {
    "text": "is, because we've already seen it so we can only look at new things, so we look at D,",
    "start": "452990",
    "end": "457159"
  },
  {
    "text": "D is currently 6 via B, A is currently 5, 5 plus 4 is 9,",
    "start": "457290",
    "end": "462439"
  },
  {
    "text": "which is bigger than the old D, so we make no change, the shortest path to D",
    "start": "463080",
    "end": "467210"
  },
  {
    "text": "does not go through A, so we don't worry about that, ok A's done. Next up: L. L",
    "start": "467210",
    "end": "472279"
  },
  {
    "text": "can't go to C, we've already been there,",
    "start": "472470",
    "end": "474170"
  },
  {
    "text": "I and J both have a length of 4, so that's just fine, those two I and J --",
    "start": "474170",
    "end": "478759"
  },
  {
    "text": "[I'm] needing all of them --",
    "start": "479280",
    "end": "481080"
  },
  {
    "text": "right, so these both go through L, and they both have a path length of",
    "start": "481080",
    "end": "485900"
  },
  {
    "text": "9... 9 okay, so these go -- and they're both long, but they go in front of all the infinity ones.",
    "start": "486540",
    "end": "492140"
  },
  {
    "text": "But -- but down at the bottom here all right, the order isn't important.",
    "start": "492140",
    "end": "495559"
  },
  {
    "text": "So how [are] we doing, L is done, so then you can see what's about to happen, right?",
    "start": "495560",
    "end": "499190"
  },
  {
    "text": "We start with G, G has got a distance of 5, we've already been to H,",
    "start": "499190",
    "end": "502730"
  },
  {
    "text": "let's go to E, and so we say E goes back to G and",
    "start": "502890",
    "end": "506869"
  },
  {
    "text": "has a length of",
    "start": "507870",
    "end": "509870"
  },
  {
    "text": "5, 6, 7, and we're there, right?",
    "start": "510210",
    "end": "512628"
  },
  {
    "text": "And then the final step is just to backtrack our route based on where we've been, so E goes to G --",
    "start": "512760",
    "end": "518299"
  },
  {
    "text": "we can skip these, they aren't used -- G goes to H, H goes to B, and B",
    "start": "518300",
    "end": "522740"
  },
  {
    "text": "Goes straight to S, and that is our shortest route through this graph,",
    "start": "523380",
    "end": "526910"
  },
  {
    "text": "it's found by Dijkstra, the idea is, that if this graph was much much bigger,",
    "start": "526980",
    "end": "530420"
  },
  {
    "text": "you would prioritize looking down motorways first, because they have less weight, and you would",
    "start": "530640",
    "end": "535080"
  },
  {
    "text": "prioritize physically short distances,",
    "start": "536080",
    "end": "538139"
  },
  {
    "text": "anything that you can to try and make your search a bit quicker.",
    "start": "538570",
    "end": "541470"
  },
  {
    "text": "When you're searching to let's say travel from Nottingham to London, you don't look at the roads in Scotland, at least not first,",
    "start": "541570",
    "end": "547590"
  },
  {
    "text": "Because it's unlikely",
    "start": "547810",
    "end": "548710"
  },
  {
    "text": "[that] they're going to be the shortest ones. What you do is you get yourself to the M1 and start travelling down towards London as quickly",
    "start": "548710",
    "end": "554099"
  },
  {
    "text": "as possible. That leads us to one last problem with Dijkstra,",
    "start": "554100",
    "end": "556860"
  },
  {
    "text": "which is perhaps for another video?",
    "start": "556870",
    "end": "558250"
  },
  {
    "text": "But I'll just -- I'll just introduce it -- if you imagine a situation where I'm at my house,",
    "start": "558250",
    "end": "562890"
  },
  {
    "text": "and let's say my house is here, at S, and this is sort of [the] M1 junction, right, which happens to be about junking 26?",
    "start": "562890",
    "end": "570569"
  },
  {
    "text": "But we'll call this A, alright, and then this is where I'm going in this direction,",
    "start": "570570",
    "end": "574469"
  },
  {
    "text": "so lots of nodes along here, and there's lots of nodes along here.",
    "start": "574570",
    "end": "578879"
  },
  {
    "text": "And this is my destination down here on the end of this motorway. Because of a slight traffic jam,",
    "start": "578880",
    "end": "583770"
  },
  {
    "text": "these all have slightly higher weights than these. Because Dijkstra doesn't build any idea of the direction",
    "start": "584080",
    "end": "590280"
  },
  {
    "text": "you're traveling, any kind of heuristic about what you're doing in a sort of smarter way, it's going to look up here first,",
    "start": "590280",
    "end": "595739"
  },
  {
    "text": "it's going to travel all the way up this motorway as far as it can and",
    "start": "595930",
    "end": "599010"
  },
  {
    "text": "only change direction when it becomes the shortest path to do so, so",
    "start": "599350",
    "end": "603839"
  },
  {
    "text": "what you need to do if you're going to actually implement a sat-nav, is be a little bit smarter -- don't start sort of",
    "start": "604180",
    "end": "609270"
  },
  {
    "text": "looking to all the fast roads,",
    "start": "609490",
    "end": "611140"
  },
  {
    "text": "look at the fast roads that are going roughly in the right direction because otherwise you might be wasting a lot of time.",
    "start": "611140",
    "end": "615359"
  }
]