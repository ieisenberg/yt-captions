[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "So far we've looked at primitive recursion",
    "start": "30",
    "end": "3320"
  },
  {
    "text": "- things where you can use recursion if\nyou want to, but you don't have to",
    "start": "3320",
    "end": "7250"
  },
  {
    "text": "because it can be de-recursed and turned into\nan iterative \"for\" loop.",
    "start": "7250",
    "end": "10849"
  },
  {
    "text": "We did factorial and we did fibonacci",
    "start": "10849",
    "end": "14740"
  },
  {
    "text": "both of which are primitive recursive in\nthis sense.",
    "start": "14740",
    "end": "18520"
  },
  {
    "text": "And there'll be a great danger in thinking\nwell, surely,",
    "start": "18520",
    "end": "22410"
  },
  {
    "text": "you can do anything then in \"for\" loops, why\nbother with recursion at all?",
    "start": "22410",
    "end": "25720"
  },
  {
    "text": "Well, there are some things which are so\nfundamentally recursive",
    "start": "25720",
    "end": "29609"
  },
  {
    "text": "that you just have to do them recursively.",
    "start": "29609",
    "end": "34860"
  },
  {
    "start": "33000",
    "end": "102000"
  },
  {
    "text": "It became clear to mathematicians really\nat the turn of the last century",
    "start": "34860",
    "end": "39340"
  },
  {
    "text": "about the nature of functions in general that",
    "start": "39340",
    "end": "43420"
  },
  {
    "text": "there were some things that were so - if\nyou like -  huge, so enormous, so badly behaved",
    "start": "43420",
    "end": "49780"
  },
  {
    "text": "that they just had to be recursively defined.",
    "start": "49780",
    "end": "53239"
  },
  {
    "text": "And I think one the earliest people to\nrealize this was",
    "start": "53239",
    "end": "58930"
  },
  {
    "text": "a research student of David Hilbert's -- now",
    "start": "58930",
    "end": "62370"
  },
  {
    "text": "who is David Hilbert? We're back on Numberphile\nterritory again !",
    "start": "62370",
    "end": "65930"
  },
  {
    "text": "Probably, perhaps, the greatest\nmathematician of the late 19th and early",
    "start": "65930",
    "end": "71170"
  },
  {
    "text": "20th century.",
    "start": "71170",
    "end": "72590"
  },
  {
    "text": "He was a phenomenal mathematical",
    "start": "72590",
    "end": "76530"
  },
  {
    "text": "genius, capabilities, and so on",
    "start": "76530",
    "end": "79790"
  },
  {
    "text": "He was at Goettingen, in Germany, and I think\nI'm right in saying that",
    "start": "79790",
    "end": "83150"
  },
  {
    "text": "Ackermann was one of his research students\nand it's Wilhelm",
    "start": "83150",
    "end": "86990"
  },
  {
    "text": "Ackermann's function that we're going to\nlook at today.",
    "start": "86990",
    "end": "90170"
  },
  {
    "text": "The test was, can you come up with\nsomething that just has to be done",
    "start": "90170",
    "end": "94118"
  },
  {
    "text": "totally recursively - you can't do \nit, as it were, in a \"for\" loop",
    "start": "94119",
    "end": "98920"
  },
  {
    "text": "even though those hadn't been properly\ninvented at that stage.",
    "start": "98920",
    "end": "102220"
  },
  {
    "start": "102000",
    "end": "213000"
  },
  {
    "text": "What became clear as a result of",
    "start": "102220",
    "end": "105530"
  },
  {
    "text": "work started by Ackermann, and by others,",
    "start": "105530",
    "end": "108770"
  },
  {
    "text": "is that we've got a hierarchy of\nprogram types:",
    "start": "108770",
    "end": "112670"
  },
  {
    "text": "Right down at the bottom - the simple ones \nwe've seen --  the ones that can be de-recursed,",
    "start": "112670",
    "end": "116649"
  },
  {
    "text": "these are Primitive Recursive. There's a whole\nlayer on top of that",
    "start": "116649",
    "end": "120930"
  },
  {
    "text": "where they're functions where you just have\nto define them",
    "start": "120930",
    "end": "125060"
  },
  {
    "text": "recursively. Just above this set are the",
    "start": "125060",
    "end": "128729"
  },
  {
    "text": "Recursively Enumerable functions",
    "start": "128729",
    "end": "132200"
  },
  {
    "text": "Let's be clear here, by saying Primitive\nRecursive at the bottom",
    "start": "132200",
    "end": "135739"
  },
  {
    "text": "I'm including every other program that\nisn't recursive",
    "start": "135739",
    "end": "139129"
  },
  {
    "text": "I'm regarding a thing that just goes\nthrough a sequence as being a very",
    "start": "139129",
    "end": "141970"
  },
  {
    "text": "simple example of",
    "start": "141970",
    "end": "143470"
  },
  {
    "text": "a primitive recursive program with no\nreal recursion in it",
    "start": "143470",
    "end": "146489"
  },
  {
    "text": "and anything that's got \"for\" loops\nor nested \"for\" loops,  well actually",
    "start": "146489",
    "end": "150360"
  },
  {
    "text": "you could have done that recursively, and\nprobably languages like Haskell do",
    "start": "150360",
    "end": "153950"
  },
  {
    "text": "for all I know.",
    "start": "153950",
    "end": "155019"
  },
  {
    "text": "But they still count as the simplest form \nof program",
    "start": "155019",
    "end": "158239"
  },
  {
    "text": "- primitive recursion if it's got\nrecursion in there at all",
    "start": "158239",
    "end": "161410"
  },
  {
    "text": "you could always de-recurse it - make it \ninto \"for\" loops, This next thing",
    "start": "161410",
    "end": "164959"
  },
  {
    "text": "Recursive, on top of that, there's an even\nmore problematical set of programs,",
    "start": "164959",
    "end": "170819"
  },
  {
    "text": "above that, which says they're recursive,",
    "start": "170819",
    "end": "174239"
  },
  {
    "text": "but for some values of the arguments you\nput into the function",
    "start": "174239",
    "end": "178159"
  },
  {
    "text": "they will stop and give an answer and \nfor others",
    "start": "178159",
    "end": "181569"
  },
  {
    "text": "they will go on for ever and they will\nnever ever stop.",
    "start": "181569",
    "end": "185349"
  },
  {
    "text": "[How do you define 'for ever' then, go on]",
    "start": "185349",
    "end": "188360"
  },
  {
    "text": "Forever and ever and ever - they will go\ninto just repeating the same old stack",
    "start": "188360",
    "end": "192989"
  },
  {
    "text": "frames and you may not be aware of it",
    "start": "192989",
    "end": "194950"
  },
  {
    "text": "and just go round and round. And then you'll \nsay: \"But how can I decide ahead of time",
    "start": "194950",
    "end": "201300"
  },
  {
    "text": "for given arguments, whether it will stop\nor won't ?\"",
    "start": "201300",
    "end": "205049"
  },
  {
    "text": "And the answer is - Hello Alan Turing -",
    "start": "205049",
    "end": "208840"
  },
  {
    "text": "in general that may well be Undecidable.",
    "start": "208840",
    "end": "212230"
  },
  {
    "text": "So above here, out in hyperspace, is the Great ",
    "start": "212230",
    "end": "216500"
  },
  {
    "start": "213000",
    "end": "295000"
  },
  {
    "text": "Undecidable Universe.",
    "start": "216500",
    "end": "220430"
  },
  {
    "text": "There are some problems you can set in computing",
    "start": "220430",
    "end": "224549"
  },
  {
    "text": "that just are not decidable",
    "start": "224549",
    "end": "227890"
  },
  {
    "text": "at all - not by any algorithm and one of the",
    "start": "227890",
    "end": "232439"
  },
  {
    "text": "great names in this was Kurt Godel -",
    "start": "232439",
    "end": "236200"
  },
  {
    "text": "in the early nineteen thirties - and the\nsecond great name for computer",
    "start": "236200",
    "end": "240060"
  },
  {
    "text": "scientists that linked",
    "start": "240060",
    "end": "241430"
  },
  {
    "text": "Godel's work with how computer programs\nworked",
    "start": "241430",
    "end": "245260"
  },
  {
    "text": "and with his Turing Machines, was Alan\nTuring. He wrote",
    "start": "245260",
    "end": "248900"
  },
  {
    "text": "a famous paper in 1936 about his Turing Machines",
    "start": "248900",
    "end": "252510"
  },
  {
    "text": "- referred back to Kurt Godel's work and\nbasically said",
    "start": "252510",
    "end": "255700"
  },
  {
    "text": "\"There are some things in computing",
    "start": "255700",
    "end": "258880"
  },
  {
    "text": "that are undecidable\"  But for the moment ",
    "start": "258880",
    "end": "261959"
  },
  {
    "text": "were coming in here, at the next level\nabove Primitive Recursive",
    "start": "261959",
    "end": "266000"
  },
  {
    "text": "We're going and take a look at a Recursive \nfunction where",
    "start": "266000",
    "end": "269770"
  },
  {
    "text": "I can reason through with you that it will give",
    "start": "269770",
    "end": "273229"
  },
  {
    "text": "an answer. It's not in the nasty set above it,",
    "start": "273229",
    "end": "276240"
  },
  {
    "text": "the Recursively Enumerables, where sometimes\nit would go wrong",
    "start": "276240",
    "end": "279539"
  },
  {
    "text": "and just end up spinning and not doing\nanything useful.",
    "start": "279540",
    "end": "282720"
  },
  {
    "text": "This thing - and this is a good\nintroduction as well to the way that",
    "start": "282720",
    "end": "286600"
  },
  {
    "text": "theoretical computer scientists",
    "start": "286600",
    "end": "288470"
  },
  {
    "text": "- of which I'm not one - but I'll try and give you \nthe flavour about how you can reason about programs,",
    "start": "288470",
    "end": "293840"
  },
  {
    "text": "and how they behave, even without\nactually executing them.",
    "start": "293840",
    "end": "297490"
  },
  {
    "text": "The version of Ackermann's function that tends to be\nused nowadays - the one modified by Peter and by",
    "start": "297490",
    "end": "303418"
  },
  {
    "text": "Robinson:  here is where all the hard work occurs",
    "start": "303419",
    "end": "306820"
  },
  {
    "text": "This is the recursive function itself\nWe declare 'ack',",
    "start": "306820",
    "end": "310020"
  },
  {
    "text": "for short, a function with two incoming\ninteger arguments.",
    "start": "310020",
    "end": "313990"
  },
  {
    "text": "And here, look, it delivers back an integer\nresult",
    "start": "313990",
    "end": "317370"
  },
  {
    "text": "It delivers back the integer result in its\nlocal variable",
    "start": "317370",
    "end": "320560"
  },
  {
    "text": "which it declares for itself for holding\nthe answer and eventually of course,",
    "start": "320560",
    "end": "324419"
  },
  {
    "text": "look, it's going to return",
    "start": "324419",
    "end": "325720"
  },
  {
    "text": "the answer. But how does it do its\nrecursive horrors?",
    "start": "325720",
    "end": "329639"
  },
  {
    "text": "If the incoming argument 'm' is 0",
    "start": "329639",
    "end": "332740"
  },
  {
    "text": "then deliver back the integer answer 'm + 1'",
    "start": "332740",
    "end": "336289"
  },
  {
    "text": "So if I came in with ackermann(0,2)",
    "start": "336289",
    "end": "339740"
  },
  {
    "text": "because the 'm' is zero, it would deliver back",
    "start": "339740",
    "end": "343509"
  },
  {
    "text": "two plus one : three. Easy. Otherwise if that\nisn't true - if 'm' isn't zero, if it's any other",
    "start": "343509",
    "end": "349650"
  },
  {
    "text": "integer, else if 'n' is 0",
    "start": "349650",
    "end": "353169"
  },
  {
    "text": "then the answer is what you get by\ncalling up ackermann, recursively again,",
    "start": "353169",
    "end": "358630"
  },
  {
    "text": "but this time by reducing the first\nargument by one. Call up",
    "start": "358630",
    "end": "363710"
  },
  {
    "text": "ackermann with 'm - 1', not 'm', and with",
    "start": "363710",
    "end": "367130"
  },
  {
    "text": "the first argument 1. Otherwise - now that's",
    "start": "367130",
    "end": "370280"
  },
  {
    "text": "bad enough but here comes the real\nkiller - if 'm' isn't 0 and if",
    "start": "370280",
    "end": "374470"
  },
  {
    "text": "'n' isn't 0, what's the general case? The\ngeneral case is",
    "start": "374470",
    "end": "378940"
  },
  {
    "text": "that the answer is ackerman of 'm - 1'",
    "start": "378940",
    "end": "381970"
  },
  {
    "text": "notice you're reducing 'm' again, look, and\nthis is where a headache starts to",
    "start": "381970",
    "end": "385759"
  },
  {
    "text": "set in, this blows your brain and makes you\nrealize why you can't",
    "start": "385759",
    "end": "389729"
  },
  {
    "text": "de-recurse this into iteration - the\nsecond argument for that generalized call",
    "start": "389729",
    "end": "395169"
  },
  {
    "text": "of ackermann, is itself a call of",
    "start": "395169",
    "end": "398180"
  },
  {
    "text": "ackermann!  So you have to go through endless",
    "start": "398180",
    "end": "402630"
  },
  {
    "start": "400000",
    "end": "447000"
  },
  {
    "text": "thousands of stack frames to calculate\njust what the second argument must be",
    "start": "402630",
    "end": "407889"
  },
  {
    "text": "to another call of ackermann that's gonna go\nthrough the same agony",
    "start": "407889",
    "end": "410919"
  },
  {
    "text": "all over again. Now I think you can\nmentally visualize just what a huge",
    "start": "410919",
    "end": "416470"
  },
  {
    "text": "amount of computation",
    "start": "416470",
    "end": "418389"
  },
  {
    "text": "might be involved here and how big",
    "start": "418389",
    "end": "421699"
  },
  {
    "text": "the numbers might get to be.  But what I\nwould like to just",
    "start": "421699",
    "end": "425229"
  },
  {
    "text": "draw your attention to, because this is\nimportant,",
    "start": "425229",
    "end": "428380"
  },
  {
    "text": "is that every time 'm' and 'n'",
    "start": "428380",
    "end": "431400"
  },
  {
    "text": "are altered, in going round recursively, they",
    "start": "431400",
    "end": "434889"
  },
  {
    "text": "reduce. We found out that on the second\nline it says if 'n' was zero",
    "start": "434889",
    "end": "440300"
  },
  {
    "text": "then it called up a thing with ackermann( n-1, ...)\nin it",
    "start": "440300",
    "end": "444190"
  },
  {
    "text": "yeah, so you're reducing 'm' in that place",
    "start": "444190",
    "end": "447340"
  },
  {
    "start": "447000",
    "end": "570000"
  },
  {
    "text": "and even in the horrible worst case, the\nthird line,",
    "start": "447340",
    "end": "450729"
  },
  {
    "text": "you reduce the first argument to 'm - 1'",
    "start": "450729",
    "end": "454270"
  },
  {
    "text": "and within that vile second argument",
    "start": "454270",
    "end": "457990"
  },
  {
    "text": "it's ackerman(m, n-1)",
    "start": "457990",
    "end": "461430"
  },
  {
    "text": "so as you go around this if 'm' and 'n'\nchange at all",
    "start": "461430",
    "end": "466080"
  },
  {
    "text": "they are reduced. Therefore",
    "start": "466080",
    "end": "470819"
  },
  {
    "text": "if your first two traps,",
    "start": "470819",
    "end": "474020"
  },
  {
    "text": "which we've got here, are for when 'm' \ngets down to zero",
    "start": "474020",
    "end": "477650"
  },
  {
    "text": "and when 'n' gets down to zero then",
    "start": "477650",
    "end": "481069"
  },
  {
    "text": "in the end it will terminate, so long as",
    "start": "481069",
    "end": "484449"
  },
  {
    "text": "you feed in positive integers for 'm' and\n'n'. Now, as ever, I have done no",
    "start": "484449",
    "end": "489300"
  },
  {
    "text": "error checking whatever - that's down to you.",
    "start": "489300",
    "end": "492379"
  },
  {
    "text": "I want you to concentrate on this. Yeah, if\nyou put negative numbers in there, boy",
    "start": "492379",
    "end": "497139"
  },
  {
    "text": "are you in for a rough old ride !",
    "start": "497139",
    "end": "498910"
  },
  {
    "text": "Yeah, it's got to be",
    "start": "498910",
    "end": "501919"
  },
  {
    "text": "positive integers, zeros are fine, but must \nbe zero or positive integers.",
    "start": "501919",
    "end": "507030"
  },
  {
    "text": "Although this is a huge recursive mess,",
    "start": "507030",
    "end": "510060"
  },
  {
    "text": "with millions of stack frames, nonetheless",
    "start": "510060",
    "end": "513159"
  },
  {
    "text": "by reasoning and saying that when these\nvalues are altered they",
    "start": "513159",
    "end": "516969"
  },
  {
    "text": "always alter downwards, you can\nconvince yourself that this will",
    "start": "516969",
    "end": "520930"
  },
  {
    "text": "eventually deliver an answer.",
    "start": "520930",
    "end": "524420"
  },
  {
    "text": "Now, the only trouble is that, in delivering\nan answer, there may be a huge amount of",
    "start": "524420",
    "end": "528959"
  },
  {
    "text": "computation involved",
    "start": "528959",
    "end": "530430"
  },
  {
    "text": "particularly when we get into this third\nline and you have to run Ackermann's function",
    "start": "530430",
    "end": "535420"
  },
  {
    "text": "in order to work out what an argument\nto Ackermann's function is going to be.",
    "start": "535420",
    "end": "539760"
  },
  {
    "text": "And just to show you how bad this gets",
    "start": "539760",
    "end": "543380"
  },
  {
    "text": "I've set up two nested \"for\" loops \non 'i' and 'j'",
    "start": "543380",
    "end": "546910"
  },
  {
    "text": "taking 'i'from 0 through to 5 actually, \nbecause it's 'i' less than 6",
    "start": "546910",
    "end": "552379"
  },
  {
    "text": "'j' from 0 through to 5,  and I call up",
    "start": "552380",
    "end": "555610"
  },
  {
    "text": "the Ackermann function as the argument\nto be printed",
    "start": "555610",
    "end": "558970"
  },
  {
    "text": "in the standard piece of text here.\nSo you get things like ackermann(0,0)",
    "start": "558970",
    "end": "562810"
  },
  {
    "text": "is whatever, and you call up ackermann",
    "start": "562810",
    "end": "566850"
  },
  {
    "text": "recursively, to work it out.\n[\"So, how's that going for you?\"]",
    "start": "566850",
    "end": "570009"
  },
  {
    "start": "570000",
    "end": "894000"
  },
  {
    "text": "How is that going for me?!  Well, what\nSteve and I",
    "start": "570010",
    "end": "574230"
  },
  {
    "text": "(Dr Heartbleed as we now call him ....)",
    "start": "574230",
    "end": "577410"
  },
  {
    "text": "We set this going four weeks ago\nnearly, now.",
    "start": "577410",
    "end": "582240"
  },
  {
    "text": "The first few have vanished off the top,\nYou'll be delighted to know that",
    "start": "582240",
    "end": "586779"
  },
  {
    "text": "ackermann(0,3) has a value",
    "start": "586779",
    "end": "588110"
  },
  {
    "text": "of 4, that ackermann(2,2) is 7",
    "start": "588110",
    "end": "591779"
  },
  {
    "text": "ackermann(3,2) is 29 - doesn't look \ntoo bad.",
    "start": "591779",
    "end": "595010"
  },
  {
    "text": "Now it did have a bit of a gasp for air",
    "start": "595010",
    "end": "598110"
  },
  {
    "text": "between 4,0 which is",
    "start": "598110",
    "end": "601600"
  },
  {
    "text": "13 and it finally decided that ackermann(4,1)",
    "start": "601600",
    "end": "606430"
  },
  {
    "text": "was 65,533.",
    "start": "606430",
    "end": "609790"
  },
  {
    "text": "It still took it, recursively,",
    "start": "609790",
    "end": "613750"
  },
  {
    "text": "on this machine, 3 minutes to work out",
    "start": "613750",
    "end": "617100"
  },
  {
    "text": "that ackermann(4,1) was 65,533",
    "start": "617100",
    "end": "621620"
  },
  {
    "text": "so this is progress, because this of\ncourse is a",
    "start": "621620",
    "end": "625860"
  },
  {
    "text": "fairly modern quad-core Pentium, or whatever \nit is [Note: actually a Pentium 4] running Linux.",
    "start": "625860",
    "end": "631540"
  },
  {
    "text": "The previous machine I had, when I first\ntried this, seven or eight years ago,",
    "start": "631540",
    "end": "635209"
  },
  {
    "text": "was a venerable Sun SparcBlade and the\nSparcBlade -",
    "start": "635209",
    "end": "639079"
  },
  {
    "text": "miracle of its age - took 20 minutes to work\nthat out. So twenty minutes, three",
    "start": "639079",
    "end": "643019"
  },
  {
    "text": "minutes, we're progressing.",
    "start": "643019",
    "end": "644769"
  },
  {
    "text": "And then, do you know, I was looking at this\nwith Steve",
    "start": "644769",
    "end": "647800"
  },
  {
    "text": "we've set the thing going - it's still running. \nAnd I said: \"Oh!, y'know, it probably",
    "start": "647800",
    "end": "651680"
  },
  {
    "text": "won't be that bad, it'll be ...",
    "start": "651680",
    "end": "654070"
  },
  {
    "text": "if it took three minutes to work out\nsomething whose answer was 65,533",
    "start": "654070",
    "end": "658709"
  },
  {
    "text": "it'll take about, maybe, sixty five\nthousand",
    "start": "658709",
    "end": "662320"
  },
  {
    "text": "times three minutes to work the next \none out ",
    "start": "662320",
    "end": "665670"
  },
  {
    "text": "and did a few calculations - yeah, about\nfour months on this machine.",
    "start": "665670",
    "end": "669480"
  },
  {
    "text": "something like that\". Er, no!",
    "start": "669480",
    "end": "672510"
  },
  {
    "text": "I've just looked into it more deeply and\nreminded myself of the appalling properties",
    "start": "672510",
    "end": "676750"
  },
  {
    "text": "of the Ackermann function when it starts \nto build.",
    "start": "676750",
    "end": "679000"
  },
  {
    "text": "No, it will take two to the power",
    "start": "679000",
    "end": "682620"
  },
  {
    "text": "of 65,533 -",
    "start": "682620",
    "end": "685910"
  },
  {
    "text": "times three - three minutes per go.\nIt will take three",
    "start": "685910",
    "end": "689120"
  },
  {
    "text": "times two to the 65,533",
    "start": "689120",
    "end": "693600"
  },
  {
    "text": "minutes, to work out that value.",
    "start": "693600",
    "end": "696750"
  },
  {
    "text": "That is unimaginably huge!  It's no\ngood saying it's 'astronomical'",
    "start": "696750",
    "end": "701019"
  },
  {
    "text": "- it's way beyond astronomical. The number\nof particles I think including all dark",
    "start": "701019",
    "end": "706089"
  },
  {
    "text": "matter isn't more than about",
    "start": "706089",
    "end": "707760"
  },
  {
    "text": "2 to the 300 - something like that - the number \nof seconds since the Big Bang is probably about",
    "start": "707760",
    "end": "713420"
  },
  {
    "text": "two to the 500 or 600 at most\n[Note: actually it's about 2 to the 59]",
    "start": "713420",
    "end": "716540"
  },
  {
    "text": "not 2 to the power of 65,533.",
    "start": "716540",
    "end": "719959"
  },
  {
    "text": "But what's gonna happen eventually - \n2 to the power of 65,533",
    "start": "719959",
    "end": "724260"
  },
  {
    "text": "is such a big number, so we're going to start \ngetting wrong answers. We'll either get",
    "start": "724260",
    "end": "728139"
  },
  {
    "text": "overflow happening or perhaps if integer",
    "start": "728139",
    "end": "731139"
  },
  {
    "text": "overflow isn't signalled to us - you know\ninteger numbers sometimes tend to roll",
    "start": "731139",
    "end": "736190"
  },
  {
    "text": "over the top and go",
    "start": "736190",
    "end": "737110"
  },
  {
    "text": "negative. So who knows what will happen.\nI'll probably stop this off now",
    "start": "737110",
    "end": "742160"
  },
  {
    "text": "when we've made this video because frankly\nI have not - ",
    "start": "742160",
    "end": "745589"
  },
  {
    "text": "I don't think I'm going to survive for two \nto the power of 65,533 minutes",
    "start": "745589",
    "end": "750050"
  },
  {
    "text": "- multiplied by three - for this to\ncome to an end.",
    "start": "750050",
    "end": "753910"
  },
  {
    "text": "I think the astronomers would probably\nsay the Big Crunch, when the universe all",
    "start": "753910",
    "end": "758740"
  },
  {
    "text": "gets down to a dot again, even that is probably",
    "start": "758740",
    "end": "762649"
  },
  {
    "text": "going to happen in about another 2 to the\npower few hundred ....",
    "start": "762649",
    "end": "766110"
  },
  {
    "text": "This sort of  behaviour is often called\n'super exponential'.",
    "start": "766110",
    "end": "769990"
  },
  {
    "text": "One of the ways of indicating that a\nfunction probably has to be done",
    "start": "769990",
    "end": "773959"
  },
  {
    "text": "recursively and can't be done in \"for\" loops",
    "start": "773959",
    "end": "776200"
  },
  {
    "text": "is when it starts behaving super exponentially",
    "start": "776200",
    "end": "779700"
  },
  {
    "text": "Not just like 'n' to the power 'n',\nwhich would be exponential",
    "start": "779700",
    "end": "783399"
  },
  {
    "text": "but 'n' to the power of 'n' to the power of 'n'\nto the power",
    "start": "783399",
    "end": "786920"
  },
  {
    "text": "of 'n' to the power of 'n' - done 'n' times",
    "start": "786920",
    "end": "790070"
  },
  {
    "text": "And your brain just collapses and refuses \nto even contemplate what that means.",
    "start": "790070",
    "end": "795579"
  },
  {
    "text": "In fact I've noticed one commenter - thank\nyou whoever it was -",
    "start": "795579",
    "end": "799040"
  },
  {
    "text": "when somebody said: \"Surely you can do\nanything in \"for\" loops? What do you have",
    "start": "799040",
    "end": "804199"
  },
  {
    "text": "to do",
    "start": "804200",
    "end": "804860"
  },
  {
    "text": "totally recursively?\"  Somebody has picked up one\nof those numbers I don't know much about",
    "start": "804860",
    "end": "809459"
  },
  {
    "text": "really big ones called googles and googleplexes\n - they've day been covered in Numberphile -",
    "start": "809459",
    "end": "813279"
  },
  {
    "text": "and said",
    "start": "813279",
    "end": "814060"
  },
  {
    "text": "How about ackermann of g64, I think it's called \n[Note: g64 is actually Graham's Number]",
    "start": "814060",
    "end": "818440"
  },
  {
    "text": "How about ackermann(g64,g64) ? The arguments \nbefore you ever start inflating them",
    "start": "818440",
    "end": "823620"
  },
  {
    "text": "are still absolutely astronomical but",
    "start": "823620",
    "end": "827279"
  },
  {
    "text": "the really interesting thing is that\nalthough we can never know what the",
    "start": "827279",
    "end": "830880"
  },
  {
    "text": "answer is",
    "start": "830880",
    "end": "832110"
  },
  {
    "text": "and the answer two to the 65 thousand whatever",
    "start": "832110",
    "end": "836829"
  },
  {
    "text": "divided by three, that is going to\ninvolve 20,000",
    "start": "836829",
    "end": "841029"
  },
  {
    "text": "decimal digits when it finally comes out",
    "start": "841029",
    "end": "844519"
  },
  {
    "text": "way beyond the Big Crunch, but",
    "start": "844519",
    "end": "847870"
  },
  {
    "text": "by reasoning with the program in the way\nwe did we know",
    "start": "847870",
    "end": "852070"
  },
  {
    "text": "it is not uncomputable. Think back to\nthe original hierarchy;",
    "start": "852070",
    "end": "856720"
  },
  {
    "text": "because we can never know the answer to\nsome of these values",
    "start": "856720",
    "end": "860230"
  },
  {
    "text": "does it mean it's uncomputable? No- \n'uncomputable' means there",
    "start": "860230",
    "end": "864329"
  },
  {
    "text": "is no algorithm for doing it. Ackermann is\na perfectly good algorithm!",
    "start": "864329",
    "end": "869060"
  },
  {
    "text": "You can prove it terminates - it's just that\nnone of us are going to be around long enough",
    "start": "869060",
    "end": "873389"
  },
  {
    "text": "to find out what some of those values are.",
    "start": "873389",
    "end": "877350"
  }
]