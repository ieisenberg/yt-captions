[
  {
    "text": "so yeah we have done uh this autometer",
    "start": "160",
    "end": "3159"
  },
  {
    "text": "we have done in in Python and now we",
    "start": "3159",
    "end": "6240"
  },
  {
    "text": "have this ambitious project to do",
    "start": "6240",
    "end": "8559"
  },
  {
    "text": "regular expressions in Python which is",
    "start": "8559",
    "end": "10880"
  },
  {
    "text": "quite a useful little exercise because",
    "start": "10880",
    "end": "13360"
  },
  {
    "text": "running regular expression is actually",
    "start": "13360",
    "end": "16278"
  },
  {
    "text": "like grab the the unit command which we",
    "start": "16279",
    "end": "18840"
  },
  {
    "text": "have mentioned uh is is sort of a useful",
    "start": "18840",
    "end": "24359"
  },
  {
    "text": "application we have done deterministic",
    "start": "25400",
    "end": "28119"
  },
  {
    "text": "finite autometer DFAS and nfas and we",
    "start": "28119",
    "end": "32920"
  },
  {
    "text": "have looked at translations in both",
    "start": "32920",
    "end": "34480"
  },
  {
    "text": "directions and we've done this in Python",
    "start": "34480",
    "end": "36239"
  },
  {
    "text": "beautiful enough and then last session",
    "start": "36239",
    "end": "38640"
  },
  {
    "text": "we looked at regular expressions and we",
    "start": "38640",
    "end": "40399"
  },
  {
    "text": "have just done them on paper and now",
    "start": "40399",
    "end": "42640"
  },
  {
    "text": "today we're going to do them in Python",
    "start": "42640",
    "end": "45160"
  },
  {
    "text": "okay let's not look at the definition of",
    "start": "45160",
    "end": "47239"
  },
  {
    "text": "regular expression which is here so",
    "start": "47239",
    "end": "49280"
  },
  {
    "text": "let's not look at it yeah but let's look",
    "start": "49280",
    "end": "52280"
  },
  {
    "text": "at an example here's an example regular",
    "start": "52280",
    "end": "55239"
  },
  {
    "text": "expression which is sort of our running",
    "start": "55239",
    "end": "57600"
  },
  {
    "text": "example so what's the idea so it starts",
    "start": "57600",
    "end": "59920"
  },
  {
    "text": "starts with B plus Epsilon as b or",
    "start": "59920",
    "end": "62199"
  },
  {
    "text": "nothing and then there is a sequence of",
    "start": "62199",
    "end": "64439"
  },
  {
    "text": "a BS and then there is an A or nothing",
    "start": "64439",
    "end": "67240"
  },
  {
    "text": "and basically what this is It's a",
    "start": "67240",
    "end": "69200"
  },
  {
    "text": "sequence of A's and B's always",
    "start": "69200",
    "end": "71240"
  },
  {
    "text": "interchanging yeah I mean you can have",
    "start": "71240",
    "end": "72840"
  },
  {
    "text": "just an a you can have also nothing it's",
    "start": "72840",
    "end": "74920"
  },
  {
    "text": "also okay so these are the words this is",
    "start": "74920",
    "end": "78439"
  },
  {
    "text": "the language of this regular",
    "start": "78439",
    "end": "80600"
  },
  {
    "text": "expression so now the first question is",
    "start": "80600",
    "end": "84079"
  },
  {
    "text": "how do we represent a regular expression",
    "start": "84079",
    "end": "86560"
  },
  {
    "text": "what is a regular expression so what's",
    "start": "86560",
    "end": "88720"
  },
  {
    "text": "an expression actually so we've done a",
    "start": "88720",
    "end": "90759"
  },
  {
    "text": "video about this arithmetic expressions",
    "start": "90759",
    "end": "93880"
  },
  {
    "text": "and there are trees if I turn this this",
    "start": "93880",
    "end": "97159"
  },
  {
    "text": "uh regular expression into a tree that's",
    "start": "97159",
    "end": "99799"
  },
  {
    "text": "what I get yeah I wrote a pent for the",
    "start": "99799",
    "end": "102399"
  },
  {
    "text": "sort of invisible just one after the",
    "start": "102399",
    "end": "104840"
  },
  {
    "text": "other which is make explicit here I call",
    "start": "104840",
    "end": "107560"
  },
  {
    "text": "it a pent then there is this plus star",
    "start": "107560",
    "end": "110719"
  },
  {
    "text": "operation and down there epsilons and",
    "start": "110719",
    "end": "113799"
  },
  {
    "text": "and symbols and so this Tre is a",
    "start": "113799",
    "end": "115920"
  },
  {
    "text": "representation of a regular expression",
    "start": "115920",
    "end": "118880"
  },
  {
    "text": "now we have have to to have to to turn",
    "start": "118880",
    "end": "122640"
  },
  {
    "text": "this tree into into a python object so",
    "start": "122640",
    "end": "126920"
  },
  {
    "text": "I'm going to Define python classes and",
    "start": "126920",
    "end": "130360"
  },
  {
    "text": "since this is a bit much I'm I'm I'm",
    "start": "130360",
    "end": "133400"
  },
  {
    "text": "have done prepared this like you know if",
    "start": "133400",
    "end": "136280"
  },
  {
    "text": "you if you have these chefs cooking",
    "start": "136280",
    "end": "138000"
  },
  {
    "text": "something they prepare some sources so I",
    "start": "138000",
    "end": "140480"
  },
  {
    "text": "have lots of prepared sources today",
    "start": "140480",
    "end": "142319"
  },
  {
    "text": "because the recipe today is is a little",
    "start": "142319",
    "end": "144879"
  },
  {
    "text": "bit um involved let's say okay so here I",
    "start": "144879",
    "end": "149360"
  },
  {
    "text": "have the find a class of regular",
    "start": "149360",
    "end": "152400"
  },
  {
    "text": "expression which is an abstract class so",
    "start": "152400",
    "end": "155720"
  },
  {
    "text": "I'm not giving a way to create aular",
    "start": "155720",
    "end": "159440"
  },
  {
    "text": "expression but I have subclasses and",
    "start": "159440",
    "end": "161440"
  },
  {
    "text": "each of these subclasses correspond to",
    "start": "161440",
    "end": "164400"
  },
  {
    "text": "one way of making regular expression I",
    "start": "164400",
    "end": "166760"
  },
  {
    "text": "empty is the empty regular expression",
    "start": "166760",
    "end": "169200"
  },
  {
    "text": "Epsilon we've seen is the the one which",
    "start": "169200",
    "end": "171120"
  },
  {
    "text": "is just the empty word symbol is was one",
    "start": "171120",
    "end": "174360"
  },
  {
    "text": "symbol plus we have also seen a pend and",
    "start": "174360",
    "end": "177720"
  },
  {
    "text": "star these are the ways to make regular",
    "start": "177720",
    "end": "180120"
  },
  {
    "text": "expressions and I also have some boiler",
    "start": "180120",
    "end": "182959"
  },
  {
    "text": "plate every regular expression can print",
    "start": "182959",
    "end": "185640"
  },
  {
    "text": "itself okay and now here I have I have",
    "start": "185640",
    "end": "188360"
  },
  {
    "text": "typed in this tree as a python code let",
    "start": "188360",
    "end": "192080"
  },
  {
    "text": "me just run this and now I have E1 for",
    "start": "192080",
    "end": "196360"
  },
  {
    "text": "E1 is a regular expression and like it",
    "start": "196360",
    "end": "199319"
  },
  {
    "text": "can actually print itself as we can see",
    "start": "199319",
    "end": "202519"
  },
  {
    "text": "Okay cool so we have a representation of",
    "start": "202519",
    "end": "204480"
  },
  {
    "text": "regular Expressions but what can we do",
    "start": "204480",
    "end": "206519"
  },
  {
    "text": "with it we want to run it I want to have",
    "start": "206519",
    "end": "209080"
  },
  {
    "text": "a run function yeah here I want for",
    "start": "209080",
    "end": "211319"
  },
  {
    "text": "every regular expression I want to have",
    "start": "211319",
    "end": "214519"
  },
  {
    "text": "a run function right so I want to have",
    "start": "214519",
    "end": "217439"
  },
  {
    "text": "run and it gets a a word and it returns",
    "start": "217439",
    "end": "221560"
  },
  {
    "text": "true or false it returns a a bullion",
    "start": "221560",
    "end": "224760"
  },
  {
    "text": "yeah so if this word is is an element of",
    "start": "224760",
    "end": "227519"
  },
  {
    "text": "the regular expression I mean of the",
    "start": "227519",
    "end": "229760"
  },
  {
    "text": "language say yes otherwise said no now",
    "start": "229760",
    "end": "232680"
  },
  {
    "text": "there's a little extra thing we have to",
    "start": "232680",
    "end": "234439"
  },
  {
    "text": "supply we have to supply the alphabet",
    "start": "234439",
    "end": "236959"
  },
  {
    "text": "because that that's an extra parameter",
    "start": "236959",
    "end": "240000"
  },
  {
    "text": "so we we want to implement this run",
    "start": "240000",
    "end": "241720"
  },
  {
    "text": "function now what's the idea so if you",
    "start": "241720",
    "end": "244280"
  },
  {
    "text": "look at this picture",
    "start": "244280",
    "end": "246879"
  },
  {
    "text": "again then I indicated that actually",
    "start": "246879",
    "end": "249480"
  },
  {
    "text": "regular expressions and NFA have a close",
    "start": "249480",
    "end": "253400"
  },
  {
    "text": "relationship in particular there is a",
    "start": "253400",
    "end": "255919"
  },
  {
    "text": "translation from regular Expressions to",
    "start": "255919",
    "end": "258519"
  },
  {
    "text": "NFA to nondeterministic finite autometer",
    "start": "258519",
    "end": "261720"
  },
  {
    "text": "and we have already defined the Run",
    "start": "261720",
    "end": "263720"
  },
  {
    "text": "function for nfas so let's have a quick",
    "start": "263720",
    "end": "266840"
  },
  {
    "text": "look at nfas again we want to implement",
    "start": "266840",
    "end": "269440"
  },
  {
    "text": "the run function for regular expression",
    "start": "269440",
    "end": "271320"
  },
  {
    "text": "piggy Begging On The Run function for",
    "start": "271320",
    "end": "273160"
  },
  {
    "text": "nfas which we have already",
    "start": "273160",
    "end": "276000"
  },
  {
    "text": "defined okay let's have a look at the",
    "start": "276000",
    "end": "278639"
  },
  {
    "text": "nfas so that's we have done previously",
    "start": "278639",
    "end": "281360"
  },
  {
    "text": "this is very simple an NFA has a set of",
    "start": "281360",
    "end": "283600"
  },
  {
    "text": "State an alphabet a transition function",
    "start": "283600",
    "end": "286320"
  },
  {
    "text": "set of initial States set of final",
    "start": "286320",
    "end": "288840"
  },
  {
    "text": "States and uh we have a run",
    "start": "288840",
    "end": "292080"
  },
  {
    "text": "function which get a word sort of keeps",
    "start": "292080",
    "end": "295360"
  },
  {
    "text": "track of the states in which the NFA",
    "start": "295360",
    "end": "298320"
  },
  {
    "text": "could be and and at the end it checks",
    "start": "298320",
    "end": "301320"
  },
  {
    "text": "whether the set of states and the final",
    "start": "301320",
    "end": "305560"
  },
  {
    "text": "states have a non-empty intersection",
    "start": "305560",
    "end": "307720"
  },
  {
    "text": "this end here is actually the",
    "start": "307720",
    "end": "309800"
  },
  {
    "text": "intersection operator from set theory",
    "start": "309800",
    "end": "313360"
  },
  {
    "text": "okay we have two example finite",
    "start": "313360",
    "end": "315520"
  },
  {
    "text": "autometer so that's n zero this was the",
    "start": "315520",
    "end": "319039"
  },
  {
    "text": "autometer and recognizes that the the",
    "start": "319039",
    "end": "321280"
  },
  {
    "text": "symbol before the last symbol is",
    "start": "321280",
    "end": "323800"
  },
  {
    "text": "one okay this is n0o I've defined it",
    "start": "323800",
    "end": "327199"
  },
  {
    "text": "here so that's basically hacking in this",
    "start": "327199",
    "end": "330160"
  },
  {
    "text": "diagram as as a definition of a",
    "start": "330160",
    "end": "333199"
  },
  {
    "text": "expression so I can I can do this n z.",
    "start": "333199",
    "end": "337600"
  },
  {
    "text": "run and then one Z let's say and",
    "start": "337600",
    "end": "341560"
  },
  {
    "text": "hopefully it says yes it says yes okay",
    "start": "341560",
    "end": "344680"
  },
  {
    "text": "that's already enough and and I have",
    "start": "344680",
    "end": "347319"
  },
  {
    "text": "another finite automaton which I call N1",
    "start": "347319",
    "end": "349960"
  },
  {
    "text": "and N1 recognizes whether the last",
    "start": "349960",
    "end": "352800"
  },
  {
    "text": "symbol is a one so it has here 0 one it",
    "start": "352800",
    "end": "355080"
  },
  {
    "text": "stays in zero but as as soon as the last",
    "start": "355080",
    "end": "357759"
  },
  {
    "text": "symbol is a one it goes in in here and",
    "start": "357759",
    "end": "360160"
  },
  {
    "text": "that's this uh I I hack this in as N1",
    "start": "360160",
    "end": "364080"
  },
  {
    "text": "okay this is a two examples of fin",
    "start": "364080",
    "end": "366639"
  },
  {
    "text": "autometer which we're going to use in a",
    "start": "366639",
    "end": "368960"
  },
  {
    "text": "minute so now back to our regular",
    "start": "368960",
    "end": "373360"
  },
  {
    "text": "Expressions so we want to Define this",
    "start": "373360",
    "end": "375880"
  },
  {
    "text": "run function what we're going to",
    "start": "375880",
    "end": "377800"
  },
  {
    "text": "implement is this translation I'm going",
    "start": "377800",
    "end": "379840"
  },
  {
    "text": "to implement a method NFA which gets the",
    "start": "379840",
    "end": "383840"
  },
  {
    "text": "alphabet and returns an NFA so it",
    "start": "383840",
    "end": "387960"
  },
  {
    "text": "returns a Nona Mystic find autom which",
    "start": "387960",
    "end": "390639"
  },
  {
    "text": "corresponds to this regular expression",
    "start": "390639",
    "end": "392520"
  },
  {
    "text": "that's the idea and and and and once we",
    "start": "392520",
    "end": "395120"
  },
  {
    "text": "have this we can Implement uh the Run",
    "start": "395120",
    "end": "398199"
  },
  {
    "text": "function which gets the alphabet and the",
    "start": "398199",
    "end": "401400"
  },
  {
    "text": "word and it returns okay return not Red",
    "start": "401400",
    "end": "405880"
  },
  {
    "text": "Run Red Run is not right okay it returns",
    "start": "405880",
    "end": "408599"
  },
  {
    "text": "it converts itself to an NFA and then",
    "start": "408599",
    "end": "411639"
  },
  {
    "text": "runs this on the word okay so still Red",
    "start": "411639",
    "end": "416240"
  },
  {
    "text": "Run and now I can it boils down to",
    "start": "416240",
    "end": "418560"
  },
  {
    "text": "implement this NFA function so in the",
    "start": "418560",
    "end": "421520"
  },
  {
    "text": "spirit of test driv",
    "start": "421520",
    "end": "423319"
  },
  {
    "text": "development I'm going to write some unit",
    "start": "423319",
    "end": "425720"
  },
  {
    "text": "tests so um first of all write a test",
    "start": "425720",
    "end": "429360"
  },
  {
    "text": "function which g a regular expression",
    "start": "429360",
    "end": "433080"
  },
  {
    "text": "and the word and now we fix the sigma it",
    "start": "433080",
    "end": "436240"
  },
  {
    "text": "prints the expression it prints the word",
    "start": "436240",
    "end": "438199"
  },
  {
    "text": "and then it runs the expression on the",
    "start": "438199",
    "end": "440319"
  },
  {
    "text": "word and tells you true or false and we",
    "start": "440319",
    "end": "443199"
  },
  {
    "text": "do some tests for this this AB example",
    "start": "443199",
    "end": "446840"
  },
  {
    "text": "maybe you should also have a negative",
    "start": "446840",
    "end": "448360"
  },
  {
    "text": "test",
    "start": "448360",
    "end": "449840"
  },
  {
    "text": "okay",
    "start": "449840",
    "end": "451960"
  },
  {
    "text": "uh",
    "start": "451960",
    "end": "453560"
  },
  {
    "text": "so yeah so for example the empty ver",
    "start": "453560",
    "end": "456080"
  },
  {
    "text": "should be in at a a should be in it AB B",
    "start": "456080",
    "end": "458440"
  },
  {
    "text": "should be not in it AB a yes b a b a b",
    "start": "458440",
    "end": "464199"
  },
  {
    "text": "is also fine whereas bab aab should be",
    "start": "464199",
    "end": "468440"
  },
  {
    "text": "not fine okay so that's that's our test",
    "start": "468440",
    "end": "471560"
  },
  {
    "text": "Suite right so how are we going to",
    "start": "471560",
    "end": "473800"
  },
  {
    "text": "implement uh so I'm I'm I'm I'm not",
    "start": "473800",
    "end": "476039"
  },
  {
    "text": "going to go all the details let's just",
    "start": "476039",
    "end": "478000"
  },
  {
    "text": "look at at at some examples okay so",
    "start": "478000",
    "end": "480639"
  },
  {
    "text": "let's look at at three examples the",
    "start": "480639",
    "end": "483080"
  },
  {
    "text": "empty regular this is too",
    "start": "483080",
    "end": "485479"
  },
  {
    "text": "small the empty regular expression the",
    "start": "485479",
    "end": "489240"
  },
  {
    "text": "Epsilon and the",
    "start": "489240",
    "end": "491400"
  },
  {
    "text": "symbol now I have implemented the NFA",
    "start": "491400",
    "end": "494919"
  },
  {
    "text": "method which constructs the",
    "start": "494919",
    "end": "496599"
  },
  {
    "text": "corresponding NFA but to do this I need",
    "start": "496599",
    "end": "500360"
  },
  {
    "text": "to implement some factories which",
    "start": "500360",
    "end": "503759"
  },
  {
    "text": "produces produce the nistic finet",
    "start": "503759",
    "end": "507680"
  },
  {
    "text": "autometer the nfas is co responding to",
    "start": "507680",
    "end": "509919"
  },
  {
    "text": "it okay let's look at these factories I",
    "start": "509919",
    "end": "512919"
  },
  {
    "text": "need a factory for the empty NFA so",
    "start": "512919",
    "end": "515000"
  },
  {
    "text": "maybe I can draw this what",
    "start": "515000",
    "end": "516760"
  },
  {
    "text": "is what is the NFA recognizes the empty",
    "start": "516760",
    "end": "520599"
  },
  {
    "text": "language it is yeah definitely an empty",
    "start": "520599",
    "end": "523719"
  },
  {
    "text": "language yeah it's the empty NFA but the",
    "start": "523719",
    "end": "526519"
  },
  {
    "text": "empty NFA recognizes the empty language",
    "start": "526519",
    "end": "529480"
  },
  {
    "text": "yeah okay and and so here when I do this",
    "start": "529480",
    "end": "532200"
  },
  {
    "text": "in in Python I say out the empty set of",
    "start": "532200",
    "end": "534600"
  },
  {
    "text": "states is the empty uh transition",
    "start": "534600",
    "end": "537800"
  },
  {
    "text": "function the empty set of initial States",
    "start": "537800",
    "end": "539680"
  },
  {
    "text": "the empty set of final stat that's",
    "start": "539680",
    "end": "542120"
  },
  {
    "text": "that's the the empty NFA very very easy",
    "start": "542120",
    "end": "544959"
  },
  {
    "text": "so now Epsilon what's the Epsilon okay",
    "start": "544959",
    "end": "547200"
  },
  {
    "text": "let me let me draw some pictures so here",
    "start": "547200",
    "end": "549959"
  },
  {
    "text": "this is the NFA for the empty language",
    "start": "549959",
    "end": "553320"
  },
  {
    "text": "intentionally left empty now we have",
    "start": "553320",
    "end": "555560"
  },
  {
    "text": "this Epsilon so this is a little bit",
    "start": "555560",
    "end": "559279"
  },
  {
    "text": "more",
    "start": "559279",
    "end": "560240"
  },
  {
    "text": "complicated it has got one state which",
    "start": "560240",
    "end": "563519"
  },
  {
    "text": "is initial and",
    "start": "563519",
    "end": "565200"
  },
  {
    "text": "final so we start here if nothing comes",
    "start": "565200",
    "end": "568160"
  },
  {
    "text": "we say yes if something comes we we lose",
    "start": "568160",
    "end": "571079"
  },
  {
    "text": "it okay so here also exactly this",
    "start": "571079",
    "end": "574600"
  },
  {
    "text": "implementation in Python we say okay",
    "start": "574600",
    "end": "577880"
  },
  {
    "text": "there is uh one state and then no",
    "start": "577880",
    "end": "580279"
  },
  {
    "text": "transitions the initial State and the",
    "start": "580279",
    "end": "582040"
  },
  {
    "text": "final state is just this okay and now",
    "start": "582040",
    "end": "585560"
  },
  {
    "text": "the symbol now we have one symbol and we",
    "start": "585560",
    "end": "587920"
  },
  {
    "text": "want to Define an NFA which recognizes",
    "start": "587920",
    "end": "590600"
  },
  {
    "text": "exactly this symbol so so how do we do",
    "start": "590600",
    "end": "594560"
  },
  {
    "text": "this oh it's it's we have actually two",
    "start": "594560",
    "end": "596760"
  },
  {
    "text": "states initial state",
    "start": "596760",
    "end": "600560"
  },
  {
    "text": "and the final State and we have one",
    "start": "600560",
    "end": "603959"
  },
  {
    "text": "transition and that is the regular",
    "start": "603959",
    "end": "607560"
  },
  {
    "text": "expression a so here I do this we have",
    "start": "607560",
    "end": "611640"
  },
  {
    "text": "two states we have Sigma as we as as as",
    "start": "611640",
    "end": "614519"
  },
  {
    "text": "we get it and we have one transition",
    "start": "614519",
    "end": "616440"
  },
  {
    "text": "from zero to sim we have just one",
    "start": "616440",
    "end": "619920"
  },
  {
    "text": "consequence one next state which is the",
    "start": "619920",
    "end": "622600"
  },
  {
    "text": "state one this zero is the only initial",
    "start": "622600",
    "end": "625760"
  },
  {
    "text": "State one is the final",
    "start": "625760",
    "end": "627680"
  },
  {
    "text": "State translation",
    "start": "627680",
    "end": "630120"
  },
  {
    "text": "so let's",
    "start": "630120",
    "end": "633120"
  },
  {
    "text": "uh let's look at this from the point of",
    "start": "633120",
    "end": "638040"
  },
  {
    "text": "view of regular expression so now I'm",
    "start": "638040",
    "end": "641560"
  },
  {
    "text": "calling these factories now I have to to",
    "start": "641560",
    "end": "644160"
  },
  {
    "text": "do to say this is a class method so I",
    "start": "644160",
    "end": "647600"
  },
  {
    "text": "have to say NFA mty nf. Epsilon and",
    "start": "647600",
    "end": "652720"
  },
  {
    "text": "whatever NFA do symbol okay so we have",
    "start": "652720",
    "end": "656440"
  },
  {
    "text": "this un test yeah the empty doesn't even",
    "start": "656440",
    "end": "660120"
  },
  {
    "text": "recognize the empty word the Epsilon one",
    "start": "660120",
    "end": "663079"
  },
  {
    "text": "recognizes the empty word uh but not the",
    "start": "663079",
    "end": "666720"
  },
  {
    "text": "word a uh the a symbol doesn't say false",
    "start": "666720",
    "end": "671480"
  },
  {
    "text": "for the empty string but is true for a",
    "start": "671480",
    "end": "674440"
  },
  {
    "text": "it's just as",
    "start": "674440",
    "end": "676079"
  },
  {
    "text": "expected okay so now we get to the more",
    "start": "676079",
    "end": "679200"
  },
  {
    "text": "interesting one so let me do this Plus",
    "start": "679200",
    "end": "682360"
  },
  {
    "text": "in in some detail yeah we have to Define",
    "start": "682360",
    "end": "686519"
  },
  {
    "text": "uh uh Factory which get two automaton",
    "start": "686519",
    "end": "691519"
  },
  {
    "text": "builds a new one which recognizes the",
    "start": "691519",
    "end": "694399"
  },
  {
    "text": "union of the language yeah so it's it's",
    "start": "694399",
    "end": "696800"
  },
  {
    "text": "like know we have to to implement this",
    "start": "696800",
    "end": "698839"
  },
  {
    "text": "plus and it turns out uh on on paper",
    "start": "698839",
    "end": "704120"
  },
  {
    "text": "it's very simple so how do we Define how",
    "start": "704120",
    "end": "706880"
  },
  {
    "text": "do we construct the plus of two regular",
    "start": "706880",
    "end": "710399"
  },
  {
    "text": "of two automaton or the automaton which",
    "start": "710399",
    "end": "714040"
  },
  {
    "text": "recognizes a word from either language",
    "start": "714040",
    "end": "716800"
  },
  {
    "text": "let's see I have here n zero one",
    "start": "716800",
    "end": "718519"
  },
  {
    "text": "automatic here and one another automaton",
    "start": "718519",
    "end": "721800"
  },
  {
    "text": "and all I",
    "start": "721800",
    "end": "723040"
  },
  {
    "text": "do is put it together so here these two",
    "start": "723040",
    "end": "729000"
  },
  {
    "text": "I'm just putting them together I have",
    "start": "729000",
    "end": "730839"
  },
  {
    "text": "one bigger",
    "start": "730839",
    "end": "732680"
  },
  {
    "text": "automaton and this autom will recognize",
    "start": "732680",
    "end": "735560"
  },
  {
    "text": "the word either from this language or",
    "start": "735560",
    "end": "737079"
  },
  {
    "text": "from this language okay yeah okay so",
    "start": "737079",
    "end": "740920"
  },
  {
    "text": "let's do the factory for plus here is a",
    "start": "740920",
    "end": "746560"
  },
  {
    "text": "little bit of subtlety because if you",
    "start": "746560",
    "end": "749279"
  },
  {
    "text": "look at this automatan so so we want to",
    "start": "749279",
    "end": "751839"
  },
  {
    "text": "Define this plus plus the factory plus",
    "start": "751839",
    "end": "755160"
  },
  {
    "text": "given gets two automat call them a z and",
    "start": "755160",
    "end": "758040"
  },
  {
    "text": "A1 or call them A1 A2 and now I need to",
    "start": "758040",
    "end": "761760"
  },
  {
    "text": "construct the states of the union",
    "start": "761760",
    "end": "764760"
  },
  {
    "text": "aor and the question is how do I do this",
    "start": "764760",
    "end": "767440"
  },
  {
    "text": "so I have n Zer has got some states",
    "start": "767440",
    "end": "771440"
  },
  {
    "text": "012 and N1 has some states so how can we",
    "start": "771440",
    "end": "775440"
  },
  {
    "text": "put two sets together now what's the",
    "start": "775440",
    "end": "777600"
  },
  {
    "text": "wrong answer Union that's the wrong",
    "start": "777600",
    "end": "779639"
  },
  {
    "text": "answer that's the wrong answer so why is",
    "start": "779639",
    "end": "781519"
  },
  {
    "text": "it the wrong answer because n0",
    "start": "781519",
    "end": "785199"
  },
  {
    "text": "doq Union which is a bar N1",
    "start": "785199",
    "end": "789240"
  },
  {
    "text": "Q is 012 is a union but if you look at",
    "start": "789240",
    "end": "794519"
  },
  {
    "text": "this picture here we have five states",
    "start": "794519",
    "end": "797399"
  },
  {
    "text": "not three and if we if you combine this",
    "start": "797399",
    "end": "800440"
  },
  {
    "text": "automatan and and and overlap these",
    "start": "800440",
    "end": "802920"
  },
  {
    "text": "states maybe in this example it works in",
    "start": "802920",
    "end": "804720"
  },
  {
    "text": "general it will not work because we get",
    "start": "804720",
    "end": "806760"
  },
  {
    "text": "into some chaos yeah so there is some",
    "start": "806760",
    "end": "809199"
  },
  {
    "text": "some unintended interaction between",
    "start": "809199",
    "end": "811079"
  },
  {
    "text": "these automat so I need What's called",
    "start": "811079",
    "end": "814279"
  },
  {
    "text": "the disjoint Union let me let me just",
    "start": "814279",
    "end": "817480"
  },
  {
    "text": "run this and I have implemented it",
    "start": "817480",
    "end": "820079"
  },
  {
    "text": "myself but it's not very difficult so I",
    "start": "820079",
    "end": "822959"
  },
  {
    "text": "have implemented the method D Union so I",
    "start": "822959",
    "end": "826199"
  },
  {
    "text": "can now take the disjoint Union of two",
    "start": "826199",
    "end": "829320"
  },
  {
    "text": "set let's just n the Q And1",
    "start": "829320",
    "end": "832480"
  },
  {
    "text": "doq and what it is",
    "start": "832480",
    "end": "834839"
  },
  {
    "text": "doing it it it labels the one from the",
    "start": "834839",
    "end": "839480"
  },
  {
    "text": "first set with with a false and it",
    "start": "839480",
    "end": "842360"
  },
  {
    "text": "labels the element of the second set",
    "start": "842360",
    "end": "844120"
  },
  {
    "text": "with a true and then put them together",
    "start": "844120",
    "end": "846560"
  },
  {
    "text": "and this makes sure that they're kept",
    "start": "846560",
    "end": "849920"
  },
  {
    "text": "separate yeah so this Union this this",
    "start": "849920",
    "end": "854000"
  },
  {
    "text": "joint Union operator is what I then use",
    "start": "854000",
    "end": "856839"
  },
  {
    "text": "so I I I have prepared this already okay",
    "start": "856839",
    "end": "859720"
  },
  {
    "text": "so here okay for for the alphabets I",
    "start": "859720",
    "end": "862160"
  },
  {
    "text": "take the normal Union but for the states",
    "start": "862160",
    "end": "864839"
  },
  {
    "text": "I take the disjoint Union and then I",
    "start": "864839",
    "end": "867440"
  },
  {
    "text": "have implemented a little method which",
    "start": "867440",
    "end": "869560"
  },
  {
    "text": "can also uh lift the function the Delta",
    "start": "869560",
    "end": "873639"
  },
  {
    "text": "to the disjoint Union yeah and then",
    "start": "873639",
    "end": "877880"
  },
  {
    "text": "initial State final states are the dist",
    "start": "877880",
    "end": "880360"
  },
  {
    "text": "Union and I get a new",
    "start": "880360",
    "end": "882959"
  },
  {
    "text": "automaton",
    "start": "882959",
    "end": "884800"
  },
  {
    "text": "and so I can I can now I I can for for",
    "start": "884800",
    "end": "888120"
  },
  {
    "text": "example I can do NFA plus of two",
    "start": "888120",
    "end": "891959"
  },
  {
    "text": "automaton okay n z and",
    "start": "891959",
    "end": "894639"
  },
  {
    "text": "N1 and I get a complicated new automaton",
    "start": "894639",
    "end": "898240"
  },
  {
    "text": "which if you look in detail is really a",
    "start": "898240",
    "end": "900320"
  },
  {
    "text": "representation of this very simple",
    "start": "900320",
    "end": "902360"
  },
  {
    "text": "action putting two pictures together but",
    "start": "902360",
    "end": "905880"
  },
  {
    "text": "we have to be take here that everything",
    "start": "905880",
    "end": "907440"
  },
  {
    "text": "is kept separate so I can now implement",
    "start": "907440",
    "end": "911279"
  },
  {
    "text": "the the NFA method for plus using the",
    "start": "911279",
    "end": "915680"
  },
  {
    "text": "plus Factory and here there is oh scary",
    "start": "915680",
    "end": "918800"
  },
  {
    "text": "thing going on there's some recursion",
    "start": "918800",
    "end": "920440"
  },
  {
    "text": "going on because to translate a plus",
    "start": "920440",
    "end": "923000"
  },
  {
    "text": "regular expression I now have to",
    "start": "923000",
    "end": "925160"
  },
  {
    "text": "recursively translate the sub trees and",
    "start": "925160",
    "end": "928440"
  },
  {
    "text": "then",
    "start": "928440",
    "end": "929160"
  },
  {
    "text": "plus them together I test plus Epsilon a",
    "start": "929160",
    "end": "933000"
  },
  {
    "text": "so let's see whether this",
    "start": "933000",
    "end": "934839"
  },
  {
    "text": "works so the unit test for plus so if",
    "start": "934839",
    "end": "938319"
  },
  {
    "text": "you have a plus Epsilon we recognize",
    "start": "938319",
    "end": "940720"
  },
  {
    "text": "both the A and the empty word but we",
    "start": "940720",
    "end": "943040"
  },
  {
    "text": "still don't recognize a seems to work",
    "start": "943040",
    "end": "946399"
  },
  {
    "text": "okay so let's uh tell the rest of the",
    "start": "946399",
    "end": "950279"
  },
  {
    "text": "story we have two more uh Constructors",
    "start": "950279",
    "end": "954680"
  },
  {
    "text": "two more uh yeah two more uh sub classes",
    "start": "954680",
    "end": "958079"
  },
  {
    "text": "here a pen end and star and for each of",
    "start": "958079",
    "end": "960880"
  },
  {
    "text": "them we have to find a factory now I'm",
    "start": "960880",
    "end": "963079"
  },
  {
    "text": "going to give you the code let's just",
    "start": "963079",
    "end": "966120"
  },
  {
    "text": "show how it works so I have to implement",
    "start": "966120",
    "end": "968880"
  },
  {
    "text": "a factory for a pent and a factory for a",
    "start": "968880",
    "end": "971680"
  },
  {
    "text": "star now let me do this at least on",
    "start": "971680",
    "end": "974199"
  },
  {
    "text": "paper how do I do a factory for for a",
    "start": "974199",
    "end": "976959"
  },
  {
    "text": "pent so I have one automaton for the",
    "start": "976959",
    "end": "979720"
  },
  {
    "text": "first bit let's call it nn1 and one",
    "start": "979720",
    "end": "982680"
  },
  {
    "text": "automaton for the second bit and two and",
    "start": "982680",
    "end": "985440"
  },
  {
    "text": "I want to run one after the other so I",
    "start": "985440",
    "end": "987399"
  },
  {
    "text": "first of all I put them together",
    "start": "987399",
    "end": "989120"
  },
  {
    "text": "like for plus I just put big thing",
    "start": "989120",
    "end": "992240"
  },
  {
    "text": "around them I put them together but I I",
    "start": "992240",
    "end": "996319"
  },
  {
    "text": "only at the initial State for the first",
    "start": "996319",
    "end": "999519"
  },
  {
    "text": "and the final State for the second and",
    "start": "999519",
    "end": "1002639"
  },
  {
    "text": "then here if here is a final state of",
    "start": "1002639",
    "end": "1006160"
  },
  {
    "text": "the first automater and here is an",
    "start": "1006160",
    "end": "1008279"
  },
  {
    "text": "initial state of the second I'm adding a",
    "start": "1008279",
    "end": "1010720"
  },
  {
    "text": "what's called an Epsilon transition I",
    "start": "1010720",
    "end": "1012880"
  },
  {
    "text": "can silently go from the end of the",
    "start": "1012880",
    "end": "1014759"
  },
  {
    "text": "first to the beginning of the second so",
    "start": "1014759",
    "end": "1017079"
  },
  {
    "text": "this is N1",
    "start": "1017079",
    "end": "1019000"
  },
  {
    "text": "and two just one after the other and if",
    "start": "1019000",
    "end": "1022519"
  },
  {
    "text": "you look at this implementation here",
    "start": "1022519",
    "end": "1024400"
  },
  {
    "text": "there are a few things to to comment on",
    "start": "1024400",
    "end": "1027720"
  },
  {
    "text": "but what I'm basically doing is I put",
    "start": "1027720",
    "end": "1029798"
  },
  {
    "text": "these two together then I add the",
    "start": "1029799",
    "end": "1032640"
  },
  {
    "text": "injection of the first set as initial",
    "start": "1032640",
    "end": "1035520"
  },
  {
    "text": "State and the injection of the final",
    "start": "1035520",
    "end": "1038038"
  },
  {
    "text": "state of the second as the final State",
    "start": "1038039",
    "end": "1040400"
  },
  {
    "text": "and then I say for any final state in",
    "start": "1040400",
    "end": "1043079"
  },
  {
    "text": "the first and for any uh initial state",
    "start": "1043079",
    "end": "1045678"
  },
  {
    "text": "of the second add an Epsilon transition",
    "start": "1045679",
    "end": "1048079"
  },
  {
    "text": "and here have a little method what it",
    "start": "1048079",
    "end": "1050840"
  },
  {
    "text": "means to add Epsilon transitions to an",
    "start": "1050840",
    "end": "1052679"
  },
  {
    "text": "NFA and star is actually not not very",
    "start": "1052679",
    "end": "1056080"
  },
  {
    "text": "different so you have an",
    "start": "1056080",
    "end": "1058360"
  },
  {
    "text": "NFA you just take it so this n and now",
    "start": "1058360",
    "end": "1062520"
  },
  {
    "text": "we have n star and and and and what we",
    "start": "1062520",
    "end": "1065000"
  },
  {
    "text": "do is we first of all add the empty",
    "start": "1065000",
    "end": "1067120"
  },
  {
    "text": "language so that we not language that's",
    "start": "1067120",
    "end": "1070760"
  },
  {
    "text": "the empty word and then we have to",
    "start": "1070760",
    "end": "1073679"
  },
  {
    "text": "shortcut here from Epsilon transition",
    "start": "1073679",
    "end": "1076840"
  },
  {
    "text": "from the from the final stat",
    "start": "1076840",
    "end": "1079360"
  },
  {
    "text": "to the initial States so we add all",
    "start": "1079360",
    "end": "1081600"
  },
  {
    "text": "these lots of",
    "start": "1081600",
    "end": "1083919"
  },
  {
    "text": "extra transitions",
    "start": "1083919",
    "end": "1086280"
  },
  {
    "text": "like we can go around as many times as",
    "start": "1086280",
    "end": "1089200"
  },
  {
    "text": "we like M and that's this few lines of",
    "start": "1089200",
    "end": "1092960"
  },
  {
    "text": "code here uh and also adding an an Epson",
    "start": "1092960",
    "end": "1095960"
  },
  {
    "text": "transition and now going back to the",
    "start": "1095960",
    "end": "1098480"
  },
  {
    "text": "regular",
    "start": "1098480",
    "end": "1099440"
  },
  {
    "text": "Expressions okay let me go to my last",
    "start": "1099440",
    "end": "1103440"
  },
  {
    "text": "prepared source so now I have this",
    "start": "1103440",
    "end": "1106000"
  },
  {
    "text": "Factory for plus the factory for and I'm",
    "start": "1106000",
    "end": "1109159"
  },
  {
    "text": "using here for pent also recursively",
    "start": "1109159",
    "end": "1111400"
  },
  {
    "text": "translating the expression and for Star",
    "start": "1111400",
    "end": "1114120"
  },
  {
    "text": "I recursively translate the expression",
    "start": "1114120",
    "end": "1116480"
  },
  {
    "text": "and then use my star",
    "start": "1116480",
    "end": "1119159"
  },
  {
    "text": "Factory and okay I I have the wrong test",
    "start": "1119159",
    "end": "1123000"
  },
  {
    "text": "so that's very bad how that this",
    "start": "1123000",
    "end": "1125200"
  },
  {
    "text": "happen Okay uh let's go to",
    "start": "1125200",
    "end": "1130159"
  },
  {
    "text": "here let's copy the unit test over which",
    "start": "1130159",
    "end": "1133840"
  },
  {
    "text": "I wanted to",
    "start": "1133840",
    "end": "1135760"
  },
  {
    "text": "do let's hope it works",
    "start": "1135760",
    "end": "1140320"
  },
  {
    "text": "okay let's",
    "start": "1143200",
    "end": "1144919"
  },
  {
    "text": "see so here okay oh oh this it didn't",
    "start": "1144919",
    "end": "1150159"
  },
  {
    "text": "work no that's that's a nice thing so",
    "start": "1150159",
    "end": "1153159"
  },
  {
    "text": "here I I I I checked the unit",
    "start": "1153159",
    "end": "1156120"
  },
  {
    "text": "test and the unit test doesn't work it",
    "start": "1156120",
    "end": "1159080"
  },
  {
    "text": "says false for b a b a b and then I",
    "start": "1159080",
    "end": "1162480"
  },
  {
    "text": "realize it's maybe not my code it's I",
    "start": "1162480",
    "end": "1166320"
  },
  {
    "text": "have the wrong test EX",
    "start": "1166320",
    "end": "1168960"
  },
  {
    "text": "sample which I had before let me just",
    "start": "1168960",
    "end": "1171960"
  },
  {
    "text": "copy it from",
    "start": "1171960",
    "end": "1174559"
  },
  {
    "text": "here yeah because it that that's also",
    "start": "1174559",
    "end": "1177840"
  },
  {
    "text": "the wrong one oh okay that's the wrong",
    "start": "1177840",
    "end": "1180240"
  },
  {
    "text": "one everywhere okay so it should it it",
    "start": "1180240",
    "end": "1184360"
  },
  {
    "text": "should it's B plus",
    "start": "1184360",
    "end": "1188159"
  },
  {
    "text": "Epsilon yeah and it finishes with a",
    "start": "1188159",
    "end": "1191520"
  },
  {
    "text": "otherwise it's",
    "start": "1191520",
    "end": "1193760"
  },
  {
    "text": "wrong and now I have to change this with",
    "start": "1193760",
    "end": "1197240"
  },
  {
    "text": "B",
    "start": "1197240",
    "end": "1198919"
  },
  {
    "text": "and that's with a this is a",
    "start": "1198919",
    "end": "1201240"
  },
  {
    "text": "problem if you do test based",
    "start": "1201240",
    "end": "1203559"
  },
  {
    "text": "developments your test should be right",
    "start": "1203559",
    "end": "1206799"
  },
  {
    "text": "that's an interesting B test",
    "start": "1206799",
    "end": "1209840"
  },
  {
    "text": "failed okay this time it it seems to",
    "start": "1209840",
    "end": "1213400"
  },
  {
    "text": "work so we have this complicated",
    "start": "1213400",
    "end": "1215640"
  },
  {
    "text": "expression and we what what do we say we",
    "start": "1215640",
    "end": "1217640"
  },
  {
    "text": "say the empty word is true the a is true",
    "start": "1217640",
    "end": "1219880"
  },
  {
    "text": "AB is true ABB is false AA is true b a b",
    "start": "1219880",
    "end": "1224240"
  },
  {
    "text": "a b is true and b a b a a b is false so",
    "start": "1224240",
    "end": "1228200"
  },
  {
    "text": "so seems to work so now for",
    "start": "1228200",
    "end": "1232120"
  },
  {
    "text": "entertainment yeah I asked what's the",
    "start": "1232120",
    "end": "1234120"
  },
  {
    "text": "language of this regular expression and",
    "start": "1234120",
    "end": "1236480"
  },
  {
    "text": "now we can resolve the mystery a little",
    "start": "1236480",
    "end": "1238799"
  },
  {
    "text": "bit at least we can play around with it",
    "start": "1238799",
    "end": "1242320"
  },
  {
    "text": "so I have here implemented this",
    "start": "1242320",
    "end": "1244840"
  },
  {
    "text": "expression as a tree as a python",
    "start": "1244840",
    "end": "1248799"
  },
  {
    "text": "expression and now I can run it so it",
    "start": "1248799",
    "end": "1251799"
  },
  {
    "text": "says it says yes for one one it says",
    "start": "1251799",
    "end": "1255280"
  },
  {
    "text": "false for",
    "start": "1255280",
    "end": "1256679"
  },
  {
    "text": "one0 it says also false for 1 1 but it",
    "start": "1256679",
    "end": "1260240"
  },
  {
    "text": "says yes for 1 1 0 and it says yes for 1",
    "start": "1260240",
    "end": "1264559"
  },
  {
    "text": "0",
    "start": "1264559",
    "end": "1266960"
  },
  {
    "text": "001 okay starts and ends at",
    "start": "1266960",
    "end": "1270640"
  },
  {
    "text": "one oh no okay uh everything which end",
    "start": "1270640",
    "end": "1274440"
  },
  {
    "text": "with one you think okay let's see",
    "start": "1274440",
    "end": "1276279"
  },
  {
    "text": "whether this that certainly uh seems to",
    "start": "1276279",
    "end": "1279960"
  },
  {
    "text": "be justified uh by so far uh but if you",
    "start": "1279960",
    "end": "1284799"
  },
  {
    "text": "just had one then it should recognize",
    "start": "1284799",
    "end": "1286440"
  },
  {
    "text": "one right yeah",
    "start": "1286440",
    "end": "1290039"
  },
  {
    "text": "it doesn't okay go then that's that's me",
    "start": "1290159",
    "end": "1293640"
  },
  {
    "text": "go we need more info yeah we leave it I",
    "start": "1293640",
    "end": "1296320"
  },
  {
    "text": "mean I I'm going to okay I'm I'm going",
    "start": "1296320",
    "end": "1299000"
  },
  {
    "text": "to uh publish this code and then",
    "start": "1299000",
    "end": "1301400"
  },
  {
    "text": "everybody can play around and figure out",
    "start": "1301400",
    "end": "1305000"
  },
  {
    "text": "what is the language I mean there's some",
    "start": "1305000",
    "end": "1306880"
  },
  {
    "text": "binary numbers here right maybe has",
    "start": "1306880",
    "end": "1308760"
  },
  {
    "text": "something to do with binary numbers",
    "start": "1308760",
    "end": "1311080"
  },
  {
    "text": "there's some some property of binary",
    "start": "1311080",
    "end": "1313559"
  },
  {
    "text": "numbers which correspond to this regular",
    "start": "1313559",
    "end": "1315640"
  },
  {
    "text": "expression",
    "start": "1315640",
    "end": "1317039"
  },
  {
    "text": "okay",
    "start": "1317039",
    "end": "1319559"
  },
  {
    "text": "there's a few important properties of",
    "start": "1319559",
    "end": "1320760"
  },
  {
    "text": "hash functions that we care about",
    "start": "1320760",
    "end": "1322480"
  },
  {
    "text": "fortography but the most important one",
    "start": "1322480",
    "end": "1324279"
  },
  {
    "text": "perhaps is that it's essentially pseudo",
    "start": "1324279",
    "end": "1325840"
  },
  {
    "text": "random so that means that we put in ABC",
    "start": "1325840",
    "end": "1328320"
  },
  {
    "text": "the literal adding and incrementing and",
    "start": "1328320",
    "end": "1330640"
  },
  {
    "text": "decrementing these counts can become",
    "start": "1330640",
    "end": "1332840"
  },
  {
    "text": "surprisingly um punishing in terms of",
    "start": "1332840",
    "end": "1335000"
  },
  {
    "text": "performance",
    "start": "1335000",
    "end": "1337559"
  }
]