[
  {
    "text": "I'll give you a quick introduction to",
    "start": "60",
    "end": "1589"
  },
  {
    "text": "Erlang a programming language which was",
    "start": "1589",
    "end": "3959"
  },
  {
    "text": "developed by the Computer Science",
    "start": "3959",
    "end": "5670"
  },
  {
    "text": "Laboratory in the late 80s and then",
    "start": "5670",
    "end": "9030"
  },
  {
    "text": "released as open source in the late 90s",
    "start": "9030",
    "end": "12030"
  },
  {
    "text": "actually this is oh it's the Erlang give",
    "start": "12030",
    "end": "14670"
  },
  {
    "text": "comment let it crash you know so so",
    "start": "14670",
    "end": "16680"
  },
  {
    "text": "crashes are good with their long run yes",
    "start": "16680",
    "end": "19260"
  },
  {
    "text": "because what you do is you sold the",
    "start": "19260",
    "end": "20880"
  },
  {
    "text": "problem that way most programming",
    "start": "20880",
    "end": "24960"
  },
  {
    "text": "languages the history is completely",
    "start": "24960",
    "end": "26039"
  },
  {
    "text": "irrelevant but in the case of airline",
    "start": "26039",
    "end": "28429"
  },
  {
    "text": "you know the team who invented it we're",
    "start": "28429",
    "end": "30599"
  },
  {
    "text": "actually out to solve a problem they",
    "start": "30599",
    "end": "33030"
  },
  {
    "text": "were out invent a programming language",
    "start": "33030",
    "end": "34380"
  },
  {
    "text": "and whatever instead task to do was",
    "start": "34380",
    "end": "37620"
  },
  {
    "text": "figure out how do we build the next",
    "start": "37620",
    "end": "40260"
  },
  {
    "text": "generation of telecom switches you know",
    "start": "40260",
    "end": "42719"
  },
  {
    "text": "back then near the telecom switches with",
    "start": "42719",
    "end": "44940"
  },
  {
    "text": "only systems which were massively",
    "start": "44940",
    "end": "47039"
  },
  {
    "text": "scalable so this was before the internet",
    "start": "47039",
    "end": "49340"
  },
  {
    "text": "they had to be reliable they could never",
    "start": "49340",
    "end": "51600"
  },
  {
    "text": "fail there were incredibly complex this",
    "start": "51600",
    "end": "55590"
  },
  {
    "text": "was happening at the same time as the",
    "start": "55590",
    "end": "58289"
  },
  {
    "text": "hotel car industry being in a state of",
    "start": "58289",
    "end": "59820"
  },
  {
    "text": "transitions they were going from single",
    "start": "59820",
    "end": "61800"
  },
  {
    "text": "service networks where you had a phone",
    "start": "61800",
    "end": "64198"
  },
  {
    "text": "network only thing you could do is fall",
    "start": "64199",
    "end": "65790"
  },
  {
    "text": "you had internet you know and the only",
    "start": "65790",
    "end": "68909"
  },
  {
    "text": "thing you could do was basically your",
    "start": "68909",
    "end": "70799"
  },
  {
    "text": "connect to the internet or mobile",
    "start": "70799",
    "end": "72720"
  },
  {
    "text": "networks no anything you could do is",
    "start": "72720",
    "end": "74640"
  },
  {
    "text": "call other mobile phones and what was",
    "start": "74640",
    "end": "76680"
  },
  {
    "text": "happening was that they were all merged",
    "start": "76680",
    "end": "79470"
  },
  {
    "text": "the systems were all slowly being merged",
    "start": "79470",
    "end": "81390"
  },
  {
    "text": "into a kind of multi service network",
    "start": "81390",
    "end": "85350"
  },
  {
    "text": "developing these systems you know with",
    "start": "85350",
    "end": "87930"
  },
  {
    "text": "the deregulation of the telecom markets",
    "start": "87930",
    "end": "89670"
  },
  {
    "text": "time to market became critical so you",
    "start": "89670",
    "end": "93329"
  },
  {
    "text": "know the large telcos didn't have all",
    "start": "93329",
    "end": "94920"
  },
  {
    "text": "the time they wanted to develop the",
    "start": "94920",
    "end": "96570"
  },
  {
    "text": "systems as they had in the previous",
    "start": "96570",
    "end": "98130"
  },
  {
    "text": "decades",
    "start": "98130",
    "end": "98869"
  },
  {
    "text": "if you know now all of a sudden whose",
    "start": "98869",
    "end": "101400"
  },
  {
    "text": "competitions in the market so if a",
    "start": "101400",
    "end": "104579"
  },
  {
    "text": "provider telco provider couldn't",
    "start": "104579",
    "end": "107600"
  },
  {
    "text": "couldn't you provide a particular system",
    "start": "107600",
    "end": "110040"
  },
  {
    "text": "they go to the competitors and and the",
    "start": "110040",
    "end": "113100"
  },
  {
    "text": "same applied you know two to two users",
    "start": "113100",
    "end": "114840"
  },
  {
    "text": "if you weren't happy with bt in the 80s",
    "start": "114840",
    "end": "118500"
  },
  {
    "text": "you were stuck with bt in the 90s you",
    "start": "118500",
    "end": "121409"
  },
  {
    "text": "could change when they're trying to",
    "start": "121409",
    "end": "122909"
  },
  {
    "text": "solve the problem of developing next",
    "start": "122909",
    "end": "124890"
  },
  {
    "text": "generation of switches what they did is",
    "start": "124890",
    "end": "127140"
  },
  {
    "text": "they took all of the existing that or",
    "start": "127140",
    "end": "129060"
  },
  {
    "text": "many of the existing languages at the",
    "start": "129060",
    "end": "130470"
  },
  {
    "text": "time and you know the prototype telecom",
    "start": "130470",
    "end": "132750"
  },
  {
    "text": "at",
    "start": "132750",
    "end": "132920"
  },
  {
    "text": "vacations and after few years came to",
    "start": "132920",
    "end": "135140"
  },
  {
    "text": "the conclusion that no all of these",
    "start": "135140",
    "end": "137270"
  },
  {
    "text": "languages had a lot of desirable",
    "start": "137270",
    "end": "138680"
  },
  {
    "text": "features but there was no one language",
    "start": "138680",
    "end": "140660"
  },
  {
    "text": "which had them all and that's when they",
    "start": "140660",
    "end": "143090"
  },
  {
    "text": "decided to start inventing a programming",
    "start": "143090",
    "end": "145520"
  },
  {
    "text": "language and you know spent another you",
    "start": "145520",
    "end": "148280"
  },
  {
    "text": "know three four years prototyping what",
    "start": "148280",
    "end": "150950"
  },
  {
    "text": "eventually became Erlang one of the main",
    "start": "150950",
    "end": "152959"
  },
  {
    "text": "features which increased programmer",
    "start": "152959",
    "end": "156380"
  },
  {
    "text": "productivity were the declarative was",
    "start": "156380",
    "end": "158780"
  },
  {
    "text": "the declarative aspects of a language",
    "start": "158780",
    "end": "161530"
  },
  {
    "text": "declarative programming gives you a much",
    "start": "161530",
    "end": "163610"
  },
  {
    "text": "higher level of abstraction and it gives",
    "start": "163610",
    "end": "165680"
  },
  {
    "text": "you smaller concise programs which are",
    "start": "165680",
    "end": "168319"
  },
  {
    "text": "easier to read but also most importantly",
    "start": "168319",
    "end": "170209"
  },
  {
    "text": "to maintain let's not forget yet they",
    "start": "170209",
    "end": "172459"
  },
  {
    "text": "will look at how to reduce the",
    "start": "172459",
    "end": "173780"
  },
  {
    "text": "maintainability costs of of their",
    "start": "173780",
    "end": "176780"
  },
  {
    "text": "systems and yeah actually studies later",
    "start": "176780",
    "end": "180350"
  },
  {
    "text": "on discovered that you're comparing say",
    "start": "180350",
    "end": "183350"
  },
  {
    "text": "Erlang to C++ or Java academic studies",
    "start": "183350",
    "end": "187340"
  },
  {
    "text": "showed that airline consisted of 4 to 20",
    "start": "187340",
    "end": "192170"
  },
  {
    "text": "times less code than their counterparts",
    "start": "192170",
    "end": "194450"
  },
  {
    "text": "in imperative and object-oriented",
    "start": "194450",
    "end": "196130"
  },
  {
    "text": "programming languages and these are your",
    "start": "196130",
    "end": "199100"
  },
  {
    "text": "similar numbers near which you'll see in",
    "start": "199100",
    "end": "202820"
  },
  {
    "text": "Haskell and others and it is an it is an",
    "start": "202820",
    "end": "205459"
  },
  {
    "text": "attribute of functional programming so",
    "start": "205459",
    "end": "207590"
  },
  {
    "text": "just to give you a quick example a",
    "start": "207590",
    "end": "209239"
  },
  {
    "text": "little taste over what an airline",
    "start": "209239",
    "end": "210769"
  },
  {
    "text": "program it looked like let's just do",
    "start": "210769",
    "end": "212390"
  },
  {
    "text": "factorial of 3 we'll write a little",
    "start": "212390",
    "end": "215150"
  },
  {
    "text": "program so factorial of zero returns 1",
    "start": "215150",
    "end": "219620"
  },
  {
    "text": "factorial of n when n is greater than or",
    "start": "219620",
    "end": "225560"
  },
  {
    "text": "equal to 1 returns n times factorial of",
    "start": "225560",
    "end": "230180"
  },
  {
    "text": "M minus 1 so n here is a variable it's",
    "start": "230180",
    "end": "234709"
  },
  {
    "text": "an upper case and what we do is we use",
    "start": "234709",
    "end": "237170"
  },
  {
    "text": "something called pattern matching to",
    "start": "237170",
    "end": "238660"
  },
  {
    "text": "understand which of these two function",
    "start": "238660",
    "end": "240920"
  },
  {
    "text": "clauses we execute it so if we call",
    "start": "240920",
    "end": "243019"
  },
  {
    "text": "factorial 3 we try to pattern match 3 to",
    "start": "243019",
    "end": "246440"
  },
  {
    "text": "the 0 it fails so we go on to the next",
    "start": "246440",
    "end": "249079"
  },
  {
    "text": "clause and n is a number variable so",
    "start": "249079",
    "end": "251840"
  },
  {
    "text": "gets bound to 3 3 is greater than or",
    "start": "251840",
    "end": "254150"
  },
  {
    "text": "equal to 1 so we call 3 times factorial",
    "start": "254150",
    "end": "257299"
  },
  {
    "text": "of n minus 1 so it's free times",
    "start": "257299",
    "end": "260320"
  },
  {
    "text": "factorial of 2 2 will fail patter magic",
    "start": "260320",
    "end": "266210"
  },
  {
    "text": "appear",
    "start": "266210",
    "end": "266570"
  },
  {
    "text": "we'll pass a match here and it's now",
    "start": "266570",
    "end": "268940"
  },
  {
    "text": "gets rebound 2 to 2 is greater than",
    "start": "268940",
    "end": "270980"
  },
  {
    "text": "equal to 1 so we call 2 times factorial",
    "start": "270980",
    "end": "274100"
  },
  {
    "text": "of 1 and it won't had a match up here it",
    "start": "274100",
    "end": "278630"
  },
  {
    "text": "will pattern match here so we end up",
    "start": "278630",
    "end": "280310"
  },
  {
    "text": "calling 1 times factorial of zero 0 now",
    "start": "280310",
    "end": "285080"
  },
  {
    "text": "we'll Pat a match in the first clause",
    "start": "285080",
    "end": "286670"
  },
  {
    "text": "which is our base case we return a 1 and",
    "start": "286670",
    "end": "289220"
  },
  {
    "text": "at this point we do 1 x 1 x 2 x 3 and",
    "start": "289220",
    "end": "294010"
  },
  {
    "text": "return 6 note a few things here the",
    "start": "294010",
    "end": "297860"
  },
  {
    "text": "variables inner length or single",
    "start": "297860",
    "end": "299240"
  },
  {
    "text": "assignment that means that once you've",
    "start": "299240",
    "end": "300920"
  },
  {
    "text": "bound them to a value you cannot change",
    "start": "300920",
    "end": "303290"
  },
  {
    "text": "them so they're immutable this shouldn't",
    "start": "303290",
    "end": "305360"
  },
  {
    "text": "actually be called variables because you",
    "start": "305360",
    "end": "306800"
  },
  {
    "text": "can't you can't change it but whenever",
    "start": "306800",
    "end": "308840"
  },
  {
    "text": "you call them in you recall the function",
    "start": "308840",
    "end": "311090"
  },
  {
    "text": "it's considered fresh you know whenever",
    "start": "311090",
    "end": "312920"
  },
  {
    "text": "you re enter the function clause and",
    "start": "312920",
    "end": "314960"
  },
  {
    "text": "also there's another property in here",
    "start": "314960",
    "end": "317900"
  },
  {
    "text": "which is that of defensive programming",
    "start": "317900",
    "end": "320600"
  },
  {
    "text": "defensive programming is not encouraged",
    "start": "320600",
    "end": "322790"
  },
  {
    "text": "so if we call factorial of negative 1",
    "start": "322790",
    "end": "325790"
  },
  {
    "text": "for example it will fail pattern",
    "start": "325790",
    "end": "327890"
  },
  {
    "text": "matching up here because negative 1 is",
    "start": "327890",
    "end": "329720"
  },
  {
    "text": "not equal to 0 we will be bound to end",
    "start": "329720",
    "end": "331820"
  },
  {
    "text": "here but negative 1 is not greater than",
    "start": "331820",
    "end": "333590"
  },
  {
    "text": "or equal to 1 so this Clause will also",
    "start": "333590",
    "end": "335780"
  },
  {
    "text": "fail at this point there are no more",
    "start": "335780",
    "end": "337490"
  },
  {
    "text": "clauses but one of the function clauses",
    "start": "337490",
    "end": "339920"
  },
  {
    "text": "has to always succeed if it doesn't the",
    "start": "339920",
    "end": "343040"
  },
  {
    "text": "actual process executing this particular",
    "start": "343040",
    "end": "345080"
  },
  {
    "text": "code terminates and it terminates",
    "start": "345080",
    "end": "347300"
  },
  {
    "text": "because of a bug I mean you shouldn't be",
    "start": "347300",
    "end": "348860"
  },
  {
    "text": "calling factorial with a negative 1 so",
    "start": "348860",
    "end": "351730"
  },
  {
    "text": "by not encouraging defensive programming",
    "start": "351730",
    "end": "355010"
  },
  {
    "text": "and instead letting the process",
    "start": "355010",
    "end": "357680"
  },
  {
    "text": "executing the code crash if your state",
    "start": "357680",
    "end": "359630"
  },
  {
    "text": "gets corrupted results in very compact",
    "start": "359630",
    "end": "362180"
  },
  {
    "text": "and concise programs which are very easy",
    "start": "362180",
    "end": "364010"
  },
  {
    "text": "to rain you program for the positive",
    "start": "364010",
    "end": "365900"
  },
  {
    "text": "case and we'll see later how we handle",
    "start": "365900",
    "end": "368150"
  },
  {
    "text": "these errors we don't ignore them we",
    "start": "368150",
    "end": "370280"
  },
  {
    "text": "just have them slightly differently than",
    "start": "370280",
    "end": "371780"
  },
  {
    "text": "what you might be used to so now we've",
    "start": "371780",
    "end": "373670"
  },
  {
    "text": "looked now at the declarative aspects",
    "start": "373670",
    "end": "375730"
  },
  {
    "text": "but your actual program your main",
    "start": "375730",
    "end": "378230"
  },
  {
    "text": "building blocks when working with",
    "start": "378230",
    "end": "380330"
  },
  {
    "text": "variant programs is concurrency their",
    "start": "380330",
    "end": "381950"
  },
  {
    "text": "processes and you know process is an",
    "start": "381950",
    "end": "384980"
  },
  {
    "text": "airline don't share memory so they're",
    "start": "384980",
    "end": "387320"
  },
  {
    "text": "based on immutable state and your",
    "start": "387320",
    "end": "389150"
  },
  {
    "text": "there's action another video where we",
    "start": "389150",
    "end": "390350"
  },
  {
    "text": "look at you know concurrency models with",
    "start": "390350",
    "end": "392120"
  },
  {
    "text": "a mutable state and mutable state as",
    "start": "392120",
    "end": "393800"
  },
  {
    "text": "well now processes are lightweight",
    "start": "393800",
    "end": "396140"
  },
  {
    "text": "processes so they're detached from the",
    "start": "396140",
    "end": "398249"
  },
  {
    "text": "underlying operating system back in the",
    "start": "398249",
    "end": "400199"
  },
  {
    "text": "days when we could have a maximum of 16",
    "start": "400199",
    "end": "402779"
  },
  {
    "text": "or 32 August Fred's the virtual machine",
    "start": "402779",
    "end": "405509"
  },
  {
    "text": "could actually handle near hundreds or",
    "start": "405509",
    "end": "407129"
  },
  {
    "text": "even thousands of processes running and",
    "start": "407129",
    "end": "408899"
  },
  {
    "text": "running concurrently and that's near",
    "start": "408899",
    "end": "411629"
  },
  {
    "text": "that that was a very wise decision to",
    "start": "411629",
    "end": "413279"
  },
  {
    "text": "detach the concurrency model from the",
    "start": "413279",
    "end": "414959"
  },
  {
    "text": "underlying operating system as it allows",
    "start": "414959",
    "end": "417719"
  },
  {
    "text": "you to design for scale irrespective of",
    "start": "417719",
    "end": "420929"
  },
  {
    "text": "the target architecture so that means",
    "start": "420929",
    "end": "422759"
  },
  {
    "text": "airlines handling the threads is that",
    "start": "422759",
    "end": "425459"
  },
  {
    "text": "right that is correct so divert airline",
    "start": "425459",
    "end": "427409"
  },
  {
    "text": "runs in a virtual machine and the",
    "start": "427409",
    "end": "428789"
  },
  {
    "text": "virtual machine can be seen as an",
    "start": "428789",
    "end": "430199"
  },
  {
    "text": "operating system on top of the operating",
    "start": "430199",
    "end": "431969"
  },
  {
    "text": "system so I wouldn't call them Fred's",
    "start": "431969",
    "end": "434749"
  },
  {
    "text": "but lightweight processes the virtual",
    "start": "434749",
    "end": "437999"
  },
  {
    "text": "machine itself runs on one or more",
    "start": "437999",
    "end": "440279"
  },
  {
    "text": "threads you know depending on if you're",
    "start": "440279",
    "end": "441599"
  },
  {
    "text": "running on a multi-core architecture so",
    "start": "441599",
    "end": "443399"
  },
  {
    "text": "we've got processes in Erlang and your",
    "start": "443399",
    "end": "445919"
  },
  {
    "text": "processes are created using spawn",
    "start": "445919",
    "end": "448319"
  },
  {
    "text": "building functions so we call spawn",
    "start": "448319",
    "end": "450119"
  },
  {
    "text": "where we pass in a module a function and",
    "start": "450119",
    "end": "452549"
  },
  {
    "text": "a list of 0 or more arguments and in",
    "start": "452549",
    "end": "459019"
  },
  {
    "text": "less than a microsecond in the sub",
    "start": "459019",
    "end": "461579"
  },
  {
    "text": "microseconds a new process is created",
    "start": "461579",
    "end": "464249"
  },
  {
    "text": "which is running this function in this",
    "start": "464249",
    "end": "467399"
  },
  {
    "text": "module with these arguments and you know",
    "start": "467399",
    "end": "470849"
  },
  {
    "text": "initially this process takes up very",
    "start": "470849",
    "end": "473279"
  },
  {
    "text": "little memory just a few K and so it",
    "start": "473279",
    "end": "479579"
  },
  {
    "text": "just changes the way you model your",
    "start": "479579",
    "end": "481110"
  },
  {
    "text": "programs because for every concurrent",
    "start": "481110",
    "end": "483689"
  },
  {
    "text": "activity in your system you'll actually",
    "start": "483689",
    "end": "486089"
  },
  {
    "text": "go in and create a process so imagine an",
    "start": "486089",
    "end": "489449"
  },
  {
    "text": "instant messaging server what you would",
    "start": "489449",
    "end": "492569"
  },
  {
    "text": "do is for every message coming in coming",
    "start": "492569",
    "end": "495059"
  },
  {
    "text": "out every login request every status",
    "start": "495059",
    "end": "499619"
  },
  {
    "text": "update sex telling your buddies I'm",
    "start": "499619",
    "end": "501329"
  },
  {
    "text": "online or I'm gone offline will actually",
    "start": "501329",
    "end": "503699"
  },
  {
    "text": "be a process executing that particular",
    "start": "503699",
    "end": "506339"
  },
  {
    "text": "code and you know once it's executed you",
    "start": "506339",
    "end": "508889"
  },
  {
    "text": "know the process terminates a virtual",
    "start": "508889",
    "end": "510749"
  },
  {
    "text": "machine today can handle you know tens",
    "start": "510749",
    "end": "512490"
  },
  {
    "text": "of millions of processes in the VM",
    "start": "512490",
    "end": "515578"
  },
  {
    "text": "itself and it makes reasoning about your",
    "start": "515579",
    "end": "519000"
  },
  {
    "text": "program very easy because you just need",
    "start": "519000",
    "end": "520289"
  },
  {
    "text": "to think in terms of a single message",
    "start": "520289",
    "end": "522029"
  },
  {
    "text": "and then the VM itself will allow you to",
    "start": "522029",
    "end": "524670"
  },
  {
    "text": "scale you know way beyond that processes",
    "start": "524670",
    "end": "527910"
  },
  {
    "text": "yeah do not share memory they",
    "start": "527910",
    "end": "532260"
  },
  {
    "text": "with each other through message-passing",
    "start": "532260",
    "end": "533370"
  },
  {
    "text": "and so you know when when we spawn a new",
    "start": "533370",
    "end": "535920"
  },
  {
    "text": "process the spawn built-in function will",
    "start": "535920",
    "end": "538350"
  },
  {
    "text": "return a process identifier which we",
    "start": "538350",
    "end": "540780"
  },
  {
    "text": "here bind to the variable pit and this",
    "start": "540780",
    "end": "544470"
  },
  {
    "text": "process here now can send a message to",
    "start": "544470",
    "end": "547590"
  },
  {
    "text": "this other process so here we're sending",
    "start": "547590",
    "end": "549780"
  },
  {
    "text": "an atom hello an atom is just a constant",
    "start": "549780",
    "end": "552930"
  },
  {
    "text": "literal it's what you see is what you",
    "start": "552930",
    "end": "554700"
  },
  {
    "text": "get so it's used for comparison and it's",
    "start": "554700",
    "end": "557610"
  },
  {
    "text": "used for mainly readability and so a",
    "start": "557610",
    "end": "561510"
  },
  {
    "text": "copy of this atom gets made and stored",
    "start": "561510",
    "end": "564360"
  },
  {
    "text": "into the process mailbox of this other",
    "start": "564360",
    "end": "567420"
  },
  {
    "text": "process the key points here is these are",
    "start": "567420",
    "end": "569760"
  },
  {
    "text": "lightweight processes they are they",
    "start": "569760",
    "end": "573360"
  },
  {
    "text": "don't share memory and they communicate",
    "start": "573360",
    "end": "575700"
  },
  {
    "text": "with each other through message passing",
    "start": "575700",
    "end": "577050"
  },
  {
    "text": "and your virtual machines are incredibly",
    "start": "577050",
    "end": "580080"
  },
  {
    "text": "powerful and can can scale you know to",
    "start": "580080",
    "end": "583080"
  },
  {
    "text": "tens of thousands and even millions of",
    "start": "583080",
    "end": "584820"
  },
  {
    "text": "processes if need be so I was saying",
    "start": "584820",
    "end": "587370"
  },
  {
    "text": "earlier that you try to avoid defensive",
    "start": "587370",
    "end": "590040"
  },
  {
    "text": "programming in Erlang and if something",
    "start": "590040",
    "end": "591960"
  },
  {
    "text": "goes wrong because of a bug in your",
    "start": "591960",
    "end": "593640"
  },
  {
    "text": "program because your state is corrupt",
    "start": "593640",
    "end": "595530"
  },
  {
    "text": "you let your process terminate and you",
    "start": "595530",
    "end": "599310"
  },
  {
    "text": "know when a process terminates you",
    "start": "599310",
    "end": "601170"
  },
  {
    "text": "basically lose that process and you lose",
    "start": "601170",
    "end": "603000"
  },
  {
    "text": "that state but all of the other",
    "start": "603000",
    "end": "605460"
  },
  {
    "text": "processes around it will continue",
    "start": "605460",
    "end": "607470"
  },
  {
    "text": "executing so you imagine a phone switch",
    "start": "607470",
    "end": "609540"
  },
  {
    "text": "where each process represents a phone",
    "start": "609540",
    "end": "611970"
  },
  {
    "text": "call a bug in your program would cause",
    "start": "611970",
    "end": "614790"
  },
  {
    "text": "you to terminate one process which is",
    "start": "614790",
    "end": "617370"
  },
  {
    "text": "handling a phone call you drop one phone",
    "start": "617370",
    "end": "619140"
  },
  {
    "text": "call but all of the other thousands of",
    "start": "619140",
    "end": "620940"
  },
  {
    "text": "phone calls going on and in parallel in",
    "start": "620940",
    "end": "623040"
  },
  {
    "text": "your system wouldn't be affected and so",
    "start": "623040",
    "end": "626730"
  },
  {
    "text": "it's a form of isolation of isolating",
    "start": "626730",
    "end": "629190"
  },
  {
    "text": "versus saying you know you get a bug in",
    "start": "629190",
    "end": "631500"
  },
  {
    "text": "a Fred you're a Fred usually will handle",
    "start": "631500",
    "end": "634590"
  },
  {
    "text": "many more phone calls you know that Fred",
    "start": "634590",
    "end": "636030"
  },
  {
    "text": "terminates all of the phone calls in",
    "start": "636030",
    "end": "638070"
  },
  {
    "text": "that Fred will be terminated even if",
    "start": "638070",
    "end": "640170"
  },
  {
    "text": "they were not the cause of the of the",
    "start": "640170",
    "end": "643470"
  },
  {
    "text": "bug or the corrupt date in the first",
    "start": "643470",
    "end": "644820"
  },
  {
    "text": "place so you know this this isolation",
    "start": "644820",
    "end": "648210"
  },
  {
    "text": "however needs to be controlled and we do",
    "start": "648210",
    "end": "650790"
  },
  {
    "text": "that through something we call",
    "start": "650790",
    "end": "651870"
  },
  {
    "text": "supervisors we use supervisors to",
    "start": "651870",
    "end": "654390"
  },
  {
    "text": "encourage the whole your program for the",
    "start": "654390",
    "end": "656430"
  },
  {
    "text": "correct case paradigm and learning",
    "start": "656430",
    "end": "658830"
  },
  {
    "text": "processes crash or terminate when",
    "start": "658830",
    "end": "660900"
  },
  {
    "text": "something goes wrong and the whole idea",
    "start": "660900",
    "end": "662460"
  },
  {
    "text": "behind",
    "start": "662460",
    "end": "663649"
  },
  {
    "text": "supervise it is that of layering so we",
    "start": "663649",
    "end": "666319"
  },
  {
    "text": "will have a site top level supervisor",
    "start": "666319",
    "end": "668329"
  },
  {
    "text": "which is a process here I'll denote it",
    "start": "668329",
    "end": "670100"
  },
  {
    "text": "as a little square and supervisors have",
    "start": "670100",
    "end": "673160"
  },
  {
    "text": "a property of being able to monitor",
    "start": "673160",
    "end": "676040"
  },
  {
    "text": "other processes and if they terminate",
    "start": "676040",
    "end": "680949"
  },
  {
    "text": "catch and exit so you know assume we've",
    "start": "680949",
    "end": "683899"
  },
  {
    "text": "got a process here which is monitoring",
    "start": "683899",
    "end": "685579"
  },
  {
    "text": "200 processes one is just a regular",
    "start": "685579",
    "end": "687829"
  },
  {
    "text": "process that is a supervisor if one of",
    "start": "687829",
    "end": "690379"
  },
  {
    "text": "these processes terminates the",
    "start": "690379",
    "end": "692300"
  },
  {
    "text": "supervisor which is trapping exits will",
    "start": "692300",
    "end": "694550"
  },
  {
    "text": "receive an exit signal and based on this",
    "start": "694550",
    "end": "697399"
  },
  {
    "text": "X is signal it can decide what to do it",
    "start": "697399",
    "end": "699709"
  },
  {
    "text": "could either restart the process so",
    "start": "699709",
    "end": "702050"
  },
  {
    "text": "assume it's a process storing some data",
    "start": "702050",
    "end": "705050"
  },
  {
    "text": "was a phone calls ongoing but it's",
    "start": "705050",
    "end": "706730"
  },
  {
    "text": "actually not responsible for that phone",
    "start": "706730",
    "end": "708559"
  },
  {
    "text": "call we restart a process so when that",
    "start": "708559",
    "end": "711050"
  },
  {
    "text": "data is needed other process can go in",
    "start": "711050",
    "end": "713899"
  },
  {
    "text": "and access sou we would just restart it",
    "start": "713899",
    "end": "715699"
  },
  {
    "text": "or if it's a process responsible for a",
    "start": "715699",
    "end": "718339"
  },
  {
    "text": "phone call it would just terminate that",
    "start": "718339",
    "end": "720499"
  },
  {
    "text": "process the phone call would be dropped",
    "start": "720499",
    "end": "722420"
  },
  {
    "text": "and it wouldn't restart it and what",
    "start": "722420",
    "end": "727040"
  },
  {
    "text": "would then happen is when you know you",
    "start": "727040",
    "end": "729079"
  },
  {
    "text": "soak the phone calls dropped you blame",
    "start": "729079",
    "end": "731240"
  },
  {
    "text": "it on the network you redial and then a",
    "start": "731240",
    "end": "733610"
  },
  {
    "text": "new process with a fresh state will be",
    "start": "733610",
    "end": "735949"
  },
  {
    "text": "will be created and hopefully you're",
    "start": "735949",
    "end": "738050"
  },
  {
    "text": "nothing's going to go wrong at that",
    "start": "738050",
    "end": "739009"
  },
  {
    "text": "point so it's the whole idea of",
    "start": "739009",
    "end": "740660"
  },
  {
    "text": "isolating but there will be times when",
    "start": "740660",
    "end": "743720"
  },
  {
    "text": "you know the supervisor realizes that",
    "start": "743720",
    "end": "746629"
  },
  {
    "text": "just restarting the process won't solve",
    "start": "746629",
    "end": "748970"
  },
  {
    "text": "the problem so what they do is it will",
    "start": "748970",
    "end": "751339"
  },
  {
    "text": "go in and terminate all of the other",
    "start": "751339",
    "end": "752990"
  },
  {
    "text": "processes in its sub tree and then",
    "start": "752990",
    "end": "755059"
  },
  {
    "text": "terminate itself sending an exit signal",
    "start": "755059",
    "end": "757429"
  },
  {
    "text": "up to its supervisor and the top level",
    "start": "757429",
    "end": "760490"
  },
  {
    "text": "supervisor then decides what to do it",
    "start": "760490",
    "end": "762920"
  },
  {
    "text": "could be that this process down here is",
    "start": "762920",
    "end": "764779"
  },
  {
    "text": "crashing with of corrupt state in here",
    "start": "764779",
    "end": "767420"
  },
  {
    "text": "so you know this supervisor might then",
    "start": "767420",
    "end": "769639"
  },
  {
    "text": "decide to terminate this process and",
    "start": "769639",
    "end": "771410"
  },
  {
    "text": "then restart it then restart the sub",
    "start": "771410",
    "end": "775339"
  },
  {
    "text": "level supervisor which you know when new",
    "start": "775339",
    "end": "777709"
  },
  {
    "text": "phone calls and come in would get added",
    "start": "777709",
    "end": "779660"
  },
  {
    "text": "here and if the top level supervisor",
    "start": "779660",
    "end": "781970"
  },
  {
    "text": "realizes that a can solve the problem it",
    "start": "781970",
    "end": "785629"
  },
  {
    "text": "will itself terminate taking down the",
    "start": "785629",
    "end": "787939"
  },
  {
    "text": "whole supervision tree and the program",
    "start": "787939",
    "end": "789889"
  },
  {
    "text": "with it and at that point that's maybe",
    "start": "789889",
    "end": "791600"
  },
  {
    "text": "when you go in and you reboot the",
    "start": "791600",
    "end": "792889"
  },
  {
    "text": "Machine you reboot or restart the",
    "start": "792889",
    "end": "794629"
  },
  {
    "text": "virtual machine you know as the problems",
    "start": "794629",
    "end": "797059"
  },
  {
    "text": "might be",
    "start": "797059",
    "end": "798050"
  },
  {
    "text": "see the whole error handling mechanism",
    "start": "798050",
    "end": "799550"
  },
  {
    "text": "as an onion we're on a smallest level",
    "start": "799550",
    "end": "801589"
  },
  {
    "text": "you've got aid your sequential error",
    "start": "801589",
    "end": "805490"
  },
  {
    "text": "handling your sequential code you then",
    "start": "805490",
    "end": "807649"
  },
  {
    "text": "do it on a process level you'd then do",
    "start": "807649",
    "end": "809779"
  },
  {
    "text": "it on a supervision tree level then the",
    "start": "809779",
    "end": "812269"
  },
  {
    "text": "next core is on a virtual machine level",
    "start": "812269",
    "end": "814100"
  },
  {
    "text": "where you restart the virtual machine",
    "start": "814100",
    "end": "815779"
  },
  {
    "text": "and then you've got it on a machine",
    "start": "815779",
    "end": "818149"
  },
  {
    "text": "level Aaron Lang is you know the first",
    "start": "818149",
    "end": "820490"
  },
  {
    "text": "programming language I'm aware of which",
    "start": "820490",
    "end": "822680"
  },
  {
    "text": "actually embedded distribution into the",
    "start": "822680",
    "end": "825230"
  },
  {
    "text": "semantics of the language so we've got",
    "start": "825230",
    "end": "828079"
  },
  {
    "text": "two processes which are running on a",
    "start": "828079",
    "end": "830449"
  },
  {
    "text": "single machine here and process a",
    "start": "830449",
    "end": "832990"
  },
  {
    "text": "communicates to process B you know my",
    "start": "832990",
    "end": "835430"
  },
  {
    "text": "message passing we'd seen earlier that",
    "start": "835430",
    "end": "837019"
  },
  {
    "text": "you know we use the exclamation mark",
    "start": "837019",
    "end": "838250"
  },
  {
    "text": "hello to send a message to that process",
    "start": "838250",
    "end": "842089"
  },
  {
    "text": "now using the same syntax you know we",
    "start": "842089",
    "end": "845509"
  },
  {
    "text": "could have process C running on a",
    "start": "845509",
    "end": "848240"
  },
  {
    "text": "separate note and you know we've got the",
    "start": "848240",
    "end": "850160"
  },
  {
    "text": "network in between and what process I",
    "start": "850160",
    "end": "852440"
  },
  {
    "text": "could do is take the process identify",
    "start": "852440",
    "end": "854269"
  },
  {
    "text": "err of C and send it the message hello",
    "start": "854269",
    "end": "856250"
  },
  {
    "text": "and this message now will be sent",
    "start": "856250",
    "end": "859279"
  },
  {
    "text": "straight to C so being the same syntax",
    "start": "859279",
    "end": "862610"
  },
  {
    "text": "by writing a program which runs on a",
    "start": "862610",
    "end": "864740"
  },
  {
    "text": "single machine with very little changes",
    "start": "864740",
    "end": "867920"
  },
  {
    "text": "or by doing it right from the start you",
    "start": "867920",
    "end": "869420"
  },
  {
    "text": "can actually distribute it across a",
    "start": "869420",
    "end": "871100"
  },
  {
    "text": "cluster of machines without you know we",
    "start": "871100",
    "end": "873980"
  },
  {
    "text": "are having to do any major changes in",
    "start": "873980",
    "end": "876019"
  },
  {
    "text": "the business logic of your system as",
    "start": "876019",
    "end": "877730"
  },
  {
    "text": "soon as you solve the problem of",
    "start": "877730",
    "end": "878839"
  },
  {
    "text": "distribution what you automatically get",
    "start": "878839",
    "end": "881269"
  },
  {
    "text": "is the ability to scale on multi-core",
    "start": "881269",
    "end": "883339"
  },
  {
    "text": "architectures and because in effect the",
    "start": "883339",
    "end": "887300"
  },
  {
    "text": "multi-core multi-core is yeah it has",
    "start": "887300",
    "end": "890240"
  },
  {
    "text": "very similar principles to to",
    "start": "890240",
    "end": "892550"
  },
  {
    "text": "distribution and you're guessing I",
    "start": "892550",
    "end": "895009"
  },
  {
    "text": "assume we've got two cords and we've got",
    "start": "895009",
    "end": "896870"
  },
  {
    "text": "five processes running you know we put",
    "start": "896870",
    "end": "898670"
  },
  {
    "text": "three he throws it on one core and to",
    "start": "898670",
    "end": "900470"
  },
  {
    "text": "first to another they communicate with",
    "start": "900470",
    "end": "902300"
  },
  {
    "text": "each other through message passing and",
    "start": "902300",
    "end": "903589"
  },
  {
    "text": "it doesn't matter if your discourse are",
    "start": "903589",
    "end": "906649"
  },
  {
    "text": "on the same chipset or under learn",
    "start": "906649",
    "end": "909649"
  },
  {
    "text": "different chipsets on the same machines",
    "start": "909649",
    "end": "911149"
  },
  {
    "text": "or they're actually on separate machines",
    "start": "911149",
    "end": "912740"
  },
  {
    "text": "all we need to do is you know used a",
    "start": "912740",
    "end": "915410"
  },
  {
    "text": "bang hello to communicate with this",
    "start": "915410",
    "end": "918649"
  },
  {
    "text": "process be it on the same core or on",
    "start": "918649",
    "end": "921019"
  },
  {
    "text": "different course and the concurrency",
    "start": "921019",
    "end": "923959"
  },
  {
    "text": "model earning has is based on no shared",
    "start": "923959",
    "end": "925670"
  },
  {
    "text": "memory you're the biggest problem to",
    "start": "925670",
    "end": "928010"
  },
  {
    "text": "your scanning on multi-core is",
    "start": "928010",
    "end": "930710"
  },
  {
    "text": "memory lock contention you know it's the",
    "start": "930710",
    "end": "933470"
  },
  {
    "text": "the feature which slows down the whole",
    "start": "933470",
    "end": "935630"
  },
  {
    "text": "scalability on them and so what you do",
    "start": "935630",
    "end": "938450"
  },
  {
    "text": "is you pick a programming language with",
    "start": "938450",
    "end": "940460"
  },
  {
    "text": "a concurrency model based on no shared",
    "start": "940460",
    "end": "942020"
  },
  {
    "text": "memory and that solves a problem for",
    "start": "942020",
    "end": "944090"
  },
  {
    "text": "either this is going to be an iterative",
    "start": "944090",
    "end": "946430"
  },
  {
    "text": "process and what we want to do is move",
    "start": "946430",
    "end": "948410"
  },
  {
    "text": "these things around and permute them so",
    "start": "948410",
    "end": "950300"
  },
  {
    "text": "if this is our data path with our",
    "start": "950300",
    "end": "952070"
  },
  {
    "text": "columns by sharing bytes around with",
    "start": "952070",
    "end": "954140"
  },
  {
    "text": "different columns when we combine it",
    "start": "954140",
    "end": "956090"
  },
  {
    "text": "with the mixed column step which we'll",
    "start": "956090",
    "end": "957590"
  },
  {
    "text": "do in a minute you'll see that actually",
    "start": "957590",
    "end": "959240"
  },
  {
    "text": "we're mixing everything up so within",
    "start": "959240",
    "end": "960830"
  },
  {
    "text": "just a couple of rounds everything is",
    "start": "960830",
    "end": "963110"
  },
  {
    "text": "very very jumbled up",
    "start": "963110",
    "end": "966250"
  }
]