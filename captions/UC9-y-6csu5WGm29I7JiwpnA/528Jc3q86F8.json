[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "Today. Well today, as ever, we're going to\nlisten to our subscribers. And a lot of",
    "start": "0",
    "end": "6720"
  },
  {
    "text": "them keep saying: \"Well, you haven't really\ndone regular expressions head on. You",
    "start": "6720",
    "end": "11820"
  },
  {
    "text": "keep on mentioning them as though we\nknow all about them. but we don't. It will",
    "start": "11820",
    "end": "15870"
  },
  {
    "text": "be nice to have a sort of \"Regular\nExpressions Explained\", as it were.\".",
    "start": "15870",
    "end": "21029"
  },
  {
    "text": "So, although I'm gonna do my best to do\nRegular Expressions completely, as a",
    "start": "21029",
    "end": "26070"
  },
  {
    "text": "one-off - no previous experience needed,\nfor those of you who look at it and think: \"Oh!",
    "start": "26070",
    "end": "32160"
  },
  {
    "text": "come on, this relates to something else\",\nwe will give you the link to go to ",
    "start": "32160",
    "end": "36540"
  },
  {
    "text": "previous episodes and you can get more\ndetails about just how it links into",
    "start": "36540",
    "end": "40800"
  },
  {
    "text": "other things. To those of you who think I\nmust be infinitely old and [be] personal",
    "start": "40800",
    "end": "47190"
  },
  {
    "start": "42000",
    "end": "510000"
  },
  {
    "text": "friends of all these people, well I am\nof some of them but not all. And today's",
    "start": "47190",
    "end": "51600"
  },
  {
    "text": "hero is called Stephen Kleene.\nHe's the man who, in the mid-1950s,",
    "start": "51600",
    "end": "58160"
  },
  {
    "text": "invented Regular Expressions. What Kleene\nwanted was a way that he didn't have",
    "start": "58160",
    "end": "65040"
  },
  {
    "text": "to draw diagrams like this one but that\nhe could abbreviate what the automaton",
    "start": "65040",
    "end": "70140"
  },
  {
    "text": "was doing. So I'm going to number these\ndays 0 1 and 2 and I'm going to label this",
    "start": "70140",
    "end": "77700"
  },
  {
    "text": "one, over here, as being the 'Finish' state.\nAnd this is going to be an incredibly",
    "start": "77700",
    "end": "82860"
  },
  {
    "text": "simple string fragment. A fragment of a\nstring of characters that we're going to",
    "start": "82860",
    "end": "87990"
  },
  {
    "text": "recognize. This is the automaton way of\ndepicting it. At the start you are in state 0",
    "start": "87990",
    "end": "93659"
  },
  {
    "text": "And we're going to say that, in state 0,\nas you are analyzing your input string",
    "start": "93659",
    "end": "99560"
  },
  {
    "text": "- we'll put some input strings down here\nthat this thing will be able to recognize -",
    "start": "99560",
    "end": "103798"
  },
  {
    "text": "if what you see at the start\nof your string, at the moment, not being",
    "start": "103799",
    "end": "109439"
  },
  {
    "text": "coped with, is a letter 'a' then you're\ngoing to state 1. If - let's take the",
    "start": "109439",
    "end": "115470"
  },
  {
    "text": "simplest one I want to recognize - if in\nstate 1 you've coped with the 'a', if the",
    "start": "115470",
    "end": "123180"
  },
  {
    "text": "next character is 'c' then that is\nacceptable. So, I write a 'c', over that",
    "start": "123180",
    "end": "129509"
  },
  {
    "text": "transition arc here, and that gets me\ninto state 2.",
    "start": "129509",
    "end": "133950"
  },
  {
    "text": "Usually the finish state is sometimes\ndistinguished by drawing a sort of",
    "start": "133950",
    "end": "137310"
  },
  {
    "text": "double circle like that. So, you've just \nglanced at it and you say: \"Ah! that's it\".",
    "start": "137310",
    "end": "140670"
  },
  {
    "text": "So, yeah, what I've drawn there certainly\nrecognizes the string \"ac\".",
    "start": "140670",
    "end": "147810"
  },
  {
    "text": "Frankly, electronics engineers, and so on, were\nusing these - not in the late 50s but in",
    "start": "147810",
    "end": "151980"
  },
  {
    "text": "the early 50s. They used them for creating and",
    "start": "151980",
    "end": "155550"
  },
  {
    "text": "understanding what they called 'state\nmachines'.  And, as I say,",
    "start": "155550",
    "end": "159810"
  },
  {
    "text": "Kleene sort of liked the idea, liked the\npictorial notation but wanted to see if",
    "start": "159810",
    "end": "164580"
  },
  {
    "text": "he could get it to be more compact. So\nlet's just finish the story by saying",
    "start": "164580",
    "end": "169260"
  },
  {
    "text": "that if you come around on this loop and\nre-enter State 1, you can do so by",
    "start": "169260",
    "end": "176099"
  },
  {
    "text": "recognizing a 'b' in the string. So we've\nalready shown that it can recognize \"ac\"",
    "start": "176099",
    "end": "182010"
  },
  {
    "text": "You just come here, you start, you get an\n'a', you see a 'c' and you're finished.",
    "start": "182010",
    "end": "188280"
  },
  {
    "text": "But equally, as we now see, it would also\naccept \"abc\". Start here. See an 'a', if the next",
    "start": "188280",
    "end": "197400"
  },
  {
    "text": "character in your string is a 'b', fine,\nyou accept it, but you come back into",
    "start": "197400",
    "end": "202409"
  },
  {
    "text": "state 1. Although it doesn't explicitly\ninvolve a stack this is like a sort of",
    "start": "202410",
    "end": "206450"
  },
  {
    "text": "iterative-recursive re-entry into the\nsame state. But the only way out of that",
    "start": "206450",
    "end": "211500"
  },
  {
    "text": "state to the finish is via accepting a 'c' at \nthe end of the string for [state] number 2.",
    "start": "211500",
    "end": "215700"
  },
  {
    "text": "You can keep going around this 'b'\nloop as long as you want. It will",
    "start": "215700",
    "end": "219810"
  },
  {
    "text": "certainly accept \"abbc\", \"abbbc\" and\nso on. And, effectively, what Kleene came",
    "start": "219810",
    "end": "228780"
  },
  {
    "text": "up with, as being a good way of talking\nabout these things over the phone, and not",
    "start": "228780",
    "end": "234450"
  },
  {
    "text": "having to draw diagrams, is to say in his\nRegular Expression notation that it",
    "start": "234450",
    "end": "239670"
  },
  {
    "text": "accepts ab*c. And this is the first\nbit of Kleene-invented notation.",
    "start": "239670",
    "end": "247739"
  },
  {
    "text": "That '*' which as we almost all of us now\nknow means \"zero or more of\" - there we are then.",
    "start": "247739",
    "end": "254099"
  },
  {
    "text": "The strings that that the automaton\naccepts is 'a', followed by zero or more",
    "start": "254099",
    "end": "259049"
  },
  {
    "text": "'b's, finishing with a 'c'\nAnd the nice thing about this",
    "start": "259049",
    "end": "265140"
  },
  {
    "text": "regular expression notation is just look\nat how compact it is! It is just so much",
    "start": "265140",
    "end": "272520"
  },
  {
    "text": "easier to handle in a program than\ntrying to do elementary computer",
    "start": "272520",
    "end": "278669"
  },
  {
    "text": "graphics and literally draw yourself\nautomata. Although for ... pictorially I",
    "start": "278670",
    "end": "284610"
  },
  {
    "text": "think everybody liked this way of\nsketching out what your automaton would accept,",
    "start": "284610",
    "end": "289379"
  },
  {
    "text": "those of you - some of you - may have\nseen it. If not, follow the link out to",
    "start": "289380",
    "end": "293820"
  },
  {
    "text": "the things we did about 3 years ago.\nyou'll find in there an automaton that",
    "start": "293820",
    "end": "297630"
  },
  {
    "text": "accepts 25 pence in order to issue a\nparking permit. It's all done with quite",
    "start": "297630",
    "end": "304080"
  },
  {
    "text": "complicated, but locally simple, little\ntransitions on either coins or",
    "start": "304080",
    "end": "309210"
  },
  {
    "text": "characters or whatever. So, just to\nunderline and re-emphasize why this",
    "start": "309210",
    "end": "313770"
  },
  {
    "text": "regular expression notation of Kleene's\nwas seized upon because it was so",
    "start": "313770",
    "end": "318479"
  },
  {
    "text": "compact, is ... let's complete the triangle:\nOne side of the triangle is the automaton",
    "start": "318480",
    "end": "324480"
  },
  {
    "text": "approach. Another side of the triangle we've\nnow seen is the regular expression approach -",
    "start": "324480",
    "end": "327780"
  },
  {
    "text": "completely equivalent. But if we\nlook at the Chomsky Grammar approach,",
    "start": "327780",
    "end": "332940"
  },
  {
    "text": "done on the playlist, would that be\ncompact and nice? Not so much. The rules",
    "start": "332940",
    "end": "340050"
  },
  {
    "text": "on Chomsky Grammars, in their purest form,\nis that if you use a capital letter that",
    "start": "340050",
    "end": "345810"
  },
  {
    "text": "is a so-called non-terminal symbol.\nThere'll be another left hand side rule",
    "start": "345810",
    "end": "350280"
  },
  {
    "text": "that develops it further.\nWhereas lowercase literally means what",
    "start": "350280",
    "end": "354660"
  },
  {
    "text": "it says. So this means - well Chomsky\ntended to call them all' sentences', a",
    "start": "354660",
    "end": "359490"
  },
  {
    "text": "sentence in this limited language is a\nlittle letter 'a' followed by anything",
    "start": "359490",
    "end": "364110"
  },
  {
    "text": "that a 'B' can be. So, I have to complete this \nby saying: \"Well, what can a capital B become?\"",
    "start": "364110",
    "end": "368280"
  },
  {
    "text": "Well, again, look at the automaton\ndiagram, which is completely",
    "start": "368280",
    "end": "373530"
  },
  {
    "text": "equivalent, what happens with a 'B' is you\ncan spit out a lowercase letter 'b'and a 'B'",
    "start": "373530",
    "end": "381210"
  },
  {
    "text": "or you can have a much simpler rule that\nsays a capital B can just become the",
    "start": "381210",
    "end": "386340"
  },
  {
    "text": "letter 'c'. So there we are. Instead of one\nsmall [regex] line we've got three lines.",
    "start": "386340",
    "end": "392910"
  },
  {
    "text": "And if you're doing it the grammar\nway you might say: \"Oh! well can't you",
    "start": "392910",
    "end": "395790"
  },
  {
    "text": "abbreviate that grammar a bit more?\" \nIt's awful having to do three lines like that!",
    "start": "395790",
    "end": "399840"
  },
  {
    "text": "It's very verbose. Yeah, here's the\nallowed shortening - but it's",
    "start": "399840",
    "end": "405810"
  },
  {
    "text": "not much - is you could say: \"All right, I will\nallow myself the luxury of the OR bar",
    "start": "405810",
    "end": "413340"
  },
  {
    "text": "and put a 'c' there. So, it's down to two\nlines now, not three. What it's saying is",
    "start": "413340",
    "end": "419520"
  },
  {
    "text": "a 'B' can be a lowercase 'b followed by\nrecursive re-entry into 'B' again, or it can",
    "start": "419520",
    "end": "425490"
  },
  {
    "text": "just be a letter 'c'. So it's down to two\nlines now. But it's still nowhere near as",
    "start": "425490",
    "end": "429449"
  },
  {
    "text": "compact and nice as the regular\nexpression is. And what I must absolutely",
    "start": "429450",
    "end": "434720"
  },
  {
    "text": "emphasize -  can't emphasize too much - I shall\nput double-headed arrows all over",
    "start": "434720",
    "end": "440310"
  },
  {
    "text": "the place here - is that all of these\nthings: the automaton diagram, the regular",
    "start": "440310",
    "end": "447720"
  },
  {
    "text": "expression the grammar. They are all\ncompletely equivalent to each other",
    "start": "447720",
    "end": "454169"
  },
  {
    "text": "Those of you have been through mathematics\ncourses will know your instructors go on",
    "start": "454169",
    "end": "458430"
  },
  {
    "text": "and on and on about: \" ... no I'm not asking\nyou whether one is a subset of the other",
    "start": "458430",
    "end": "464039"
  },
  {
    "text": "or \"one is contained within the other but\nthere's a little bit extra\". No, they are",
    "start": "464040",
    "end": "468900"
  },
  {
    "text": "completely and totally equivalent. There\nis not a single thing that one will",
    "start": "468900",
    "end": "474060"
  },
  {
    "text": "accept that the other won't, and vice\nversa. So, it's just a matter of",
    "start": "474060",
    "end": "479130"
  },
  {
    "text": "convenience of the notation.\nPerhaps, if you're a computer scientist,",
    "start": "479130",
    "end": "483120"
  },
  {
    "text": "for using in a programming context. And I\nthink the other thing that also had to",
    "start": "483120",
    "end": "493050"
  },
  {
    "text": "be coped with is to say: \"Well, all right, you\ncan do it as an automaton diagram, you can",
    "start": "493050",
    "end": "499110"
  },
  {
    "text": "do it as a regular expression you can do it as a \ngrammar. The regular expression's looking good",
    "start": "499110",
    "end": "503250"
  },
  {
    "text": "because of the compactness of the\nnotation but are we sure that there",
    "start": "503250",
    "end": "510840"
  },
  {
    "start": "510000",
    "end": "837000"
  },
  {
    "text": "aren't some snags in this process of\nsaying they're equivalent?\"",
    "start": "510840",
    "end": "514380"
  },
  {
    "text": "Well, one snag that did occur and was\nrecognized very early on in the late 1950s.",
    "start": "514380",
    "end": "521820"
  },
  {
    "text": "I mean, all of this is that sometimes,",
    "start": "521820",
    "end": "527160"
  },
  {
    "text": "looking at it, let's look at it from the\nautomaton diagram point of view:",
    "start": "527160",
    "end": "531860"
  },
  {
    "text": "Sometimes you get a situation where what\nyou want is what's called",
    "start": "531860",
    "end": "537300"
  },
  {
    "text": "'non-deterministic' In other words, I'm\nhappy here because there's only one exit",
    "start": "537300",
    "end": "542009"
  },
  {
    "text": "from [state] 0 to get you into [state] 1.\nIt's labeled 'a'.  How would it be if I took",
    "start": "542009",
    "end": "547079"
  },
  {
    "text": "another arrow out of [state] 0 and said 'a'\ncould also lead you somewhere else?",
    "start": "547079",
    "end": "552389"
  },
  {
    "text": "So, let's just draw up a little diagram of\nwhat horrors that might be. What happens,",
    "start": "552389",
    "end": "557790"
  },
  {
    "text": "and what would you do about it, if you\nsay: \"Well, my regular expression, let's",
    "start": "557790",
    "end": "562350"
  },
  {
    "text": "call it E, is actually either \"abab\" or\nI want to recognize \"abbb\". Now you might",
    "start": "562350",
    "end": "578009"
  },
  {
    "text": "say that's useless, you know, how does\nthat fit into anything? It does",
    "start": "578009",
    "end": "581550"
  },
  {
    "text": "illustrate, though, a very very important\npoint which is that if you are trying to",
    "start": "581550",
    "end": "587579"
  },
  {
    "text": "build an automaton, or recognizer, for\nthis you've got two alternatives here.",
    "start": "587579",
    "end": "592589"
  },
  {
    "text": "You are in state 0 and you want to go\ninto possibly two completely different",
    "start": "592589",
    "end": "600959"
  },
  {
    "text": "directions. But they both begin 'a' How do\nyou choose?! For the moment I'm saying no",
    "start": "600959",
    "end": "608370"
  },
  {
    "text": "cheating you're not allowed to look ahead.\nYou just get given an 'a'. What do you do?",
    "start": "608370",
    "end": "612360"
  },
  {
    "text": "And worse still of course - it doesn't end there -",
    "start": "612360",
    "end": "616680"
  },
  {
    "text": "it then goes on. But whichever route you\ngo you find that the next thing is ...",
    "start": "616680",
    "end": "620910"
  },
  {
    "text": "you've got to recognize a 'b'. So, the\n\"common factor\", if you like, and it is just",
    "start": "620910",
    "end": "625438"
  },
  {
    "text": "like factorizing expressions in algebra,\nyou know, x^3 - x^2.  Take out an x^2",
    "start": "625439",
    "end": "631139"
  },
  {
    "text": "factor out at the front. It's\nx^2 (x  - 1) that's what. ",
    "start": "631139",
    "end": "635519"
  },
  {
    "text": "It's similar in principle to that. Now, of\ncourse,  they do change a bit eventually",
    "start": "635519",
    "end": "640920"
  },
  {
    "text": "because this one accepts an 'a' here\nand then finishes up by accepting a 'b'.",
    "start": "640920",
    "end": "649230"
  },
  {
    "text": "This one, next one, goes a 'b' and another 'b'\nand finally it gets down into the 'Finish' state",
    "start": "649230",
    "end": "658680"
  },
  {
    "text": "as well.\nOK, well it looks trivial. But what are",
    "start": "658680",
    "end": "662639"
  },
  {
    "text": "you going to do? Here you are - \nthe programmer trying to implement this.",
    "start": "662639",
    "end": "667680"
  },
  {
    "text": "You look at the string and you say:\n\"There's two ways I can cope with this!\"",
    "start": "667680",
    "end": "671459"
  },
  {
    "text": "The most amazing thing about this is\nthat two theoreticians in the late 50s",
    "start": "671459",
    "end": "677820"
  },
  {
    "text": "won the Turing ACM award for saying it\nwill always be possible to turn the",
    "start": "677820",
    "end": "684630"
  },
  {
    "text": "non-deterministic one into a deterministic \none. Now, how would we do that?",
    "start": "684630",
    "end": "689459"
  },
  {
    "text": "In this case, easy. You start off\nwith [state] 0. You say that first of all",
    "start": "689459",
    "end": "694980"
  },
  {
    "text": "we'll accept [that] you always do an 'a' and then\na 'b'. That's the \"common factor\" if you like",
    "start": "694980",
    "end": "701820"
  },
  {
    "text": "for the start. But you put your split\npoint here that [alternative] continues with an 'a'",
    "start": "701820",
    "end": "707010"
  },
  {
    "text": "and that [lower] line continues with a 'b', to\nget the two avenues that you see up there.",
    "start": "707010",
    "end": "711360"
  },
  {
    "text": "So, we factorize out the [initial] 'a' and the 'b'\nAnd the story was: \"Well, it's all right for",
    "start": "711360",
    "end": "717180"
  },
  {
    "text": "us humans who are really intelligent to\nsee that you could do that but will it",
    "start": "717180",
    "end": "720750"
  },
  {
    "text": "always be possible for these things to\nturn the non-deterministic one into a",
    "start": "720750",
    "end": "728370"
  },
  {
    "text": "deterministic one, where you force it\nthrough factorization first?\" And the",
    "start": "728370",
    "end": "732750"
  },
  {
    "text": "answer from Dana Scott and Michael Rabin\nin the late 1950s was: \"It is",
    "start": "732750",
    "end": "737519"
  },
  {
    "text": "always do-able so long as you stick to\nsimple finite-state automata\". Don't start",
    "start": "737519",
    "end": "743070"
  },
  {
    "text": "monkeying around with extra RAM or\nstacks, just stick to them as they are",
    "start": "743070",
    "end": "747209"
  },
  {
    "text": "you can always do it. But it [the algorithm] can \nget very very hairy. So, who was the first person",
    "start": "747209",
    "end": "754350"
  },
  {
    "text": "who plunged headlong into this and said:\n\"I'm gonna do it!\"",
    "start": "754350",
    "end": "758370"
  },
  {
    "text": "Answer: Ken Thompson - our hero from UNIX\nand Bell Labs. And the whole lot. By the late",
    "start": "758370",
    "end": "763769"
  },
  {
    "text": "60s he effectively was saying: \"This\nregular expression stuff is great for",
    "start": "763769",
    "end": "769199"
  },
  {
    "text": "pattern matching in editors. I want to\nuse it but this problem of",
    "start": "769199",
    "end": "773130"
  },
  {
    "text": "non-determinism how do I cope with it?\"\nAnd it is the most amazingly far-sighted",
    "start": "773130",
    "end": "779459"
  },
  {
    "text": "piece of work. You understand, when you\nlook at this, why Ken Thompson is a legend.",
    "start": "779459",
    "end": "784230"
  },
  {
    "text": "He basically said: \"I know it's not deterministic",
    "start": "784230",
    "end": "788910"
  },
  {
    "text": "but I'll look at all possibilities and I'll\nstart pre compiling little bits of",
    "start": "788910",
    "end": "794069"
  },
  {
    "text": "assembler code to cope with whichever\none turns up on the day\" -  as it were.",
    "start": "794070",
    "end": "800180"
  },
  {
    "text": "And everybody's open-mouthed about this. He\nalso realized - he said: look, yeah, if you",
    "start": "800180",
    "end": "806040"
  },
  {
    "text": "don't mind doing pre-processing you can\nactually, you know, Michael and Dana have",
    "start": "806040",
    "end": "811019"
  },
  {
    "text": "shown us that it is possible... Yeah I know\nhow to do that, but on the other hand",
    "start": "811020",
    "end": "815040"
  },
  {
    "text": "that could take some time\". Because it's\nall very well doing a little toy example",
    "start": "815040",
    "end": "819329"
  },
  {
    "text": "like this but non-determinism in a big\nreal-life automaton can be hell to disentangle.",
    "start": "819330",
    "end": "824130"
  },
  {
    "text": ">> Sean: What's an example of one of those then ?\n>> DFB: Well, let me give you one\nexample which sounds utterly innocuous",
    "start": "824130",
    "end": "831840"
  },
  {
    "text": "but which I can give you, Sean, on a\ncomplete page that you can show to the",
    "start": "831840",
    "end": "836130"
  },
  {
    "text": "fans about this. Brian Kernighan wanted\nto get a regular expression recognizer",
    "start": "836130",
    "end": "840810"
  },
  {
    "text": "[by using 'lex'] for all of the keywords and all \nof the constructs in his 'pic' language, which",
    "start": "840810",
    "end": "846150"
  },
  {
    "text": "after all is a preprocessor for the UNIX\n'troff' typesetting language. You just",
    "start": "846150",
    "end": "850590"
  },
  {
    "text": "want to draw simple line diagrams. So\nwe've got primitives like 'circle', 'line'",
    "start": "850590",
    "end": "854580"
  },
  {
    "text": "'ellipse' 'from' 'to' 'with' 'dotted' etc. \n to show you the nature line all this kind of stuff.",
    "start": "854580",
    "end": "861180"
  },
  {
    "text": "It looks innocuous -  biggish but innocuous.\nAnd [via 'lex'] he put it through one of these NFA",
    "start": "861180",
    "end": "868710"
  },
  {
    "text": "to DFA [transformations]. Let's stop it being\nnon-deterministic. We want fast",
    "start": "868710",
    "end": "872520"
  },
  {
    "text": "recognition. We want to build an engine -\nwe don't care if it has more states than the",
    "start": "872520",
    "end": "877590"
  },
  {
    "text": "non-deterministic one - but boy it has got to go\noff like a Lamborghini! Right, so be",
    "start": "877590",
    "end": "882450"
  },
  {
    "text": "prepared to spend some pre-processing\ntime. You can put out his release note",
    "start": "882450",
    "end": "886890"
  },
  {
    "text": "for [early 1980s] 'pic', which says the 'lex' phase \n\" ... takes an eon - 15 minutes on a VAX 750. Be patient\"",
    "start": "886890",
    "end": "895530"
  },
  {
    "text": "Brian is always noted for his Ernest Hemingway",
    "start": "895530",
    "end": "898740"
  },
  {
    "text": "terseness, you know. So that is\nwhat can come to haunt you, it's that ",
    "start": "898740",
    "end": "906899"
  },
  {
    "text": "de convoluting and tracing round everything to\nget it deterministic. It is worthwhile if",
    "start": "906900",
    "end": "913200"
  },
  {
    "text": "you are going to be putting huge 'pic'\nscripts through this - so we are hammering",
    "start": "913200",
    "end": "917220"
  },
  {
    "text": "it over and over and over again, anything\nto get this really efficient. Otherwise",
    "start": "917220",
    "end": "921589"
  },
  {
    "text": "we'll be here forever while we're using\nit. On the other hand Ken's usage of it,",
    "start": "921589",
    "end": "926959"
  },
  {
    "text": "in the UNIX editor 'ed', took the\npragmatic view this thing 'ed'. in the",
    "start": "926959",
    "end": "933529"
  },
  {
    "text": "early days -  because stream editor [sed] Lee\nMcMahon hadn't been invented yet - ",
    "start": "933529",
    "end": "937070"
  },
  {
    "text": "just 'ed'. You can get away with very\nsimple regular expressions because",
    "start": "937070",
    "end": "942649"
  },
  {
    "text": "that's all that humans will use. If\nyou're feeding it stuff that's been",
    "start": "942649",
    "end": "947540"
  },
  {
    "text": "prepared by another program that's when\nyour pet schemes tend to die the death",
    "start": "947540",
    "end": "953120"
  },
  {
    "text": "because stuff prepared by another\nprogram can exploit little wrinkles that",
    "start": "953120",
    "end": "958579"
  },
  {
    "text": "cause you great difficulty. But Ken said: \"No, \nin 'ed' I think I can get away with",
    "start": "958579",
    "end": "965839"
  },
  {
    "text": "keeping it non-deterministic but\n[with] preparing and look ahead. It's one the",
    "start": "965839",
    "end": "970490"
  },
  {
    "text": "first examples of just-in-time\ncompilation. It took the attitude \"I'll",
    "start": "970490",
    "end": "974389"
  },
  {
    "text": "look at which way the cookie crumbles\"\nto try and work out which is the most",
    "start": "974389",
    "end": "977990"
  },
  {
    "text": "likely [alternative] and precompute pieces \nof fast assembler code that I can put in to",
    "start": "977990",
    "end": "984500"
  },
  {
    "text": "actually execute these things. And it was\nthe most amazing flexible system. It",
    "start": "984500",
    "end": "989029"
  },
  {
    "text": "basically adapted to the input. It is a\ngood example of just-in-time compilation.",
    "start": "989029",
    "end": "995569"
  },
  {
    "text": "While Ken says: \"I'll do it as I need\nit\",  Brian, in 'pic', couldn't say that",
    "start": "995569",
    "end": "1000550"
  },
  {
    "text": "because it's basically much more like a\ncompiler and it's a compiler that's being",
    "start": "1000550",
    "end": "1005440"
  },
  {
    "text": "driven [possibly] by reams of externally provided\ninput. So, two approaches to the same",
    "start": "1005440",
    "end": "1010899"
  },
  {
    "text": "thing. Are you going to make it\ndeterministic in all cases, ahead of time,",
    "start": "1010899",
    "end": "1016209"
  },
  {
    "text": "or are you going to cope with it as you go. ",
    "start": "1016209",
    "end": "1022690"
  }
]