[
  {
    "text": "today I wanted to talk a little bit about how we can build bigger programs than the ones that we've been sort of",
    "start": "160",
    "end": "6160"
  },
  {
    "text": "demonstrating with my silly pen and paper computer with my little robot and his array of pigeon holes that represent",
    "start": "6160",
    "end": "12320"
  },
  {
    "text": "the CPU and the array of memory where all of the data and instructions that is",
    "start": "12320",
    "end": "18240"
  },
  {
    "text": "the recipe for the robot to follow are stored um so let's sort of refresh our",
    "start": "18240",
    "end": "23840"
  },
  {
    "text": "memory a little bit and um I'm going to draw my little robot over here and I've probably picked the one pen that is",
    "start": "23840",
    "end": "30240"
  },
  {
    "text": "going to run out in the middle of this but I have a box of them now because of this and so our robot lives over here",
    "start": "30240",
    "end": "35840"
  },
  {
    "text": "and he's got his abacus and then over is a huge array of pigeon holes which are",
    "start": "35840",
    "end": "42399"
  },
  {
    "text": "like I suppose letter boxes in an apartment building would be another analogy but that's more appropriate",
    "start": "42399",
    "end": "49360"
  },
  {
    "text": "lockers yeah yeah yeah that's a good lockers there you go that's a good one as well so and in each one of those each one of those is numbered so 0 1 2 3 4 5",
    "start": "49360",
    "end": "56559"
  },
  {
    "text": "up to like billions of them as we've discussed before and um the robot also has a little bit of a temporary working",
    "start": "56559",
    "end": "63440"
  },
  {
    "text": "space which we call registers they are like a small amount of local um storage",
    "start": "63440",
    "end": "69520"
  },
  {
    "text": "little post-it notes that he's got uh you know that we maybe call the A register and the B register and uh he",
    "start": "69520",
    "end": "75360"
  },
  {
    "text": "can read numbers in and out of them and he can add them together and then he can put the numbers back inside this big pigeon hole fantastic that's where we",
    "start": "75360",
    "end": "80400"
  },
  {
    "text": "were before and we wrote a Fibonacci sequence program if you recall now we're into a bit that we are going to do over",
    "start": "80400",
    "end": "86560"
  },
  {
    "text": "and over and over again step five and we showed as well that the various types of instruction like read the next number",
    "start": "86560",
    "end": "93200"
  },
  {
    "text": "and put it into the A register um they can be encoded as numbers and those numbers themselves can go in the pigeon",
    "start": "93200",
    "end": "99200"
  },
  {
    "text": "holes and so there's this sort of beautiful um combined uh storage for",
    "start": "99200",
    "end": "104320"
  },
  {
    "text": "both the data and the program itself all in one place so wonderful um but it was",
    "start": "104320",
    "end": "110159"
  },
  {
    "text": "kind of tricky to do anything tricky to see how you could do anything like meaningful other than simple toy",
    "start": "110159",
    "end": "116079"
  },
  {
    "text": "programs and that's because when we're writing code we don't just write loads of instructions one after another in",
    "start": "116079",
    "end": "121439"
  },
  {
    "text": "fact we don't typically write instructions anymore but that's a whole other topic um we sort of break the",
    "start": "121439",
    "end": "126640"
  },
  {
    "text": "problem down into smaller pieces and then reuse those pieces over and over again and give them usually we give them",
    "start": "126640",
    "end": "133599"
  },
  {
    "text": "a useful name um and um I'd like to show how the computer gives us the tools that",
    "start": "133599",
    "end": "140080"
  },
  {
    "text": "lets us write little snippets of code that can be",
    "start": "140080",
    "end": "145239"
  },
  {
    "text": "reused what I'd like to do first of all is write a snippet of code that I'd like to reuse so I'm I'm writing a little",
    "start": "145239",
    "end": "152160"
  },
  {
    "text": "game and this is obviously hypothetical thing i'm writing a little game and one of the things I want to be able to do is",
    "start": "152160",
    "end": "157760"
  },
  {
    "text": "find the magnitude of some vector it doesn't really matter what this is but the magnitude of a vector is how fast",
    "start": "157760",
    "end": "165840"
  },
  {
    "text": "something is moving in what direction so for example you might want to know um how quickly you're going to hit a wall",
    "start": "165840",
    "end": "171599"
  },
  {
    "text": "if you're a pro a player or something like or it's also the distance between two points if you use the magnitude of the vector between them so you could say",
    "start": "171599",
    "end": "178160"
  },
  {
    "text": "am I about to crash into something those are the kind of things that you might want to do and the magnitude of a point",
    "start": "178160",
    "end": "183440"
  },
  {
    "text": "and we're going to this is a 2D game because this is simple is the square root of x^2 + y^2 again it really",
    "start": "183440",
    "end": "191360"
  },
  {
    "text": "doesn't matter it's just a little piece of code that we're going to use all over the place and we don't want to have to keep writing out over and over again and",
    "start": "191360",
    "end": "197120"
  },
  {
    "text": "so in my sort of funny pigeon madeup assembly language that's going to look",
    "start": "197120",
    "end": "202400"
  },
  {
    "text": "something like this the first thing we need to do is we need to work out what x squ is so I'm going to say mull for",
    "start": "202400",
    "end": "208200"
  },
  {
    "text": "multiply and in this particular sort of syntax I'm going to say there are three",
    "start": "208200",
    "end": "213440"
  },
  {
    "text": "um operands three things that are going to appear on the on the right hand side of this the the leftmost is like the",
    "start": "213440",
    "end": "219040"
  },
  {
    "text": "where the result is going to go so I'm going to say t0 to say just some temporary place and we'll talk about",
    "start": "219040",
    "end": "224560"
  },
  {
    "text": "what these t's and whatever are in a second comma x comma x so what this is",
    "start": "224560",
    "end": "230879"
  },
  {
    "text": "saying is multiply x by x and put the result in t0 which I mean it's just temporary storage one of the other",
    "start": "230879",
    "end": "236480"
  },
  {
    "text": "registers that we're going to say the robot has access to here and also we're going to assume the robot has a an x",
    "start": "236480",
    "end": "241840"
  },
  {
    "text": "register and as you might be able to guess for the next thing a y register so effectively this",
    "start": "241840",
    "end": "249120"
  },
  {
    "text": "first instruction does x squ second instruction does y 2 we're going to add",
    "start": "249120",
    "end": "254720"
  },
  {
    "text": "them together in ter of t2 so this gives me x^2 + y^2 and then I'm going to say I",
    "start": "254720",
    "end": "262720"
  },
  {
    "text": "want the square root which I'm assuming this computer can do which is actually very uncommon for the kind of computers",
    "start": "262720",
    "end": "268960"
  },
  {
    "text": "that I'm drawing here but you know I'm allowed to make up whatever I like it seems and I'm going to say wherever the result needs to go I'm going to call",
    "start": "268960",
    "end": "275199"
  },
  {
    "text": "something called result with uh the square root of t2 okay so those four",
    "start": "275199",
    "end": "281880"
  },
  {
    "text": "instructions are how we would get the magnitude of something that is in x and y reasonable and you know again we would",
    "start": "281880",
    "end": "289280"
  },
  {
    "text": "put this somewhere in the pigeon hole array so let's say it lives at address 1,000 and let's assume that each of",
    "start": "289280",
    "end": "295759"
  },
  {
    "text": "these instructions takes up exactly one of the slots we can see that this is four instructions we could put it",
    "start": "295759",
    "end": "301360"
  },
  {
    "text": "somewhere in memory and then what we really would like to be able to do is somewhere else in the program say \"Hey",
    "start": "301360",
    "end": "308400"
  },
  {
    "text": "I've got something in the X and Y and I'd like to know with the magnitude can I just use this bit of code please?\" And",
    "start": "308400",
    "end": "316000"
  },
  {
    "text": "there's a way that the CPU allows us to do that with an instruction called call c A L L so somewhere else in the program",
    "start": "316000",
    "end": "323680"
  },
  {
    "text": "let's say instruction 10 in memory we're going to do something like you know move X with 10 instruction 11",
    "start": "323680",
    "end": "331880"
  },
  {
    "text": "move Y with 20 and then I'd like to get the the magnitude of this vector there's",
    "start": "331880",
    "end": "337680"
  },
  {
    "text": "10 20 and so I'm going to say call 1,000 and that says I'd like to go",
    "start": "337680",
    "end": "343919"
  },
  {
    "text": "and run the little program that's over in address 10,00 and then we need a way",
    "start": "343919",
    "end": "349440"
  },
  {
    "text": "to come back to here so that step 13 which is obviously the rest of the program can carry on so we need to sort",
    "start": "349440",
    "end": "354800"
  },
  {
    "text": "of remember where we were and come back to it and also we need a way over here in our little subruine um which is and",
    "start": "354800",
    "end": "361280"
  },
  {
    "text": "the name for one of these snippets of code or a function sometimes you'll hear it being called we need a way for this to say I'm finished go back to whatever",
    "start": "361280",
    "end": "368160"
  },
  {
    "text": "you were doing before so sort of the opposite of a call is I'm going to put this in over here in 10004 is return or",
    "start": "368160",
    "end": "376720"
  },
  {
    "text": "write now we've got a way where we can write a little bit of code and keep reusing this same 1,00 function because",
    "start": "376720",
    "end": "384240"
  },
  {
    "text": "maybe then we would say you know like print out and I'm just making up code here print out whatever result is and",
    "start": "384240",
    "end": "389520"
  },
  {
    "text": "then we do 14 and we can do like mo x with some other number move y with some other number call it again and just keep doing that's great it's useful and",
    "start": "389520",
    "end": "396000"
  },
  {
    "text": "moreover I don't have to think about this anymore or somebody wrote the magnitude sub routine or function for me",
    "start": "396000",
    "end": "401680"
  },
  {
    "text": "and as long as I remember it's at address 1,000 in memory I can keep calling it until the cows come home and",
    "start": "401680",
    "end": "406800"
  },
  {
    "text": "we're and everything's fantastic so so far so awesome um but what if for",
    "start": "406800",
    "end": "413360"
  },
  {
    "text": "example this routine over here in 1000 wanted to call another routine because you know maybe the the magnitude needs",
    "start": "413360",
    "end": "420080"
  },
  {
    "text": "to go and do some other maybe this square root in fact isn't an instruction we actually have to call the square root routine somebody carefully works out how",
    "start": "420080",
    "end": "426960"
  },
  {
    "text": "to do a binary square root which is a fun thing to do if you ever want to try it on pen and paper uh and you know you",
    "start": "426960",
    "end": "432720"
  },
  {
    "text": "write a program to do that so now this 10003 becomes a call and now we've got kind of a routine that calls a routine",
    "start": "432720",
    "end": "438319"
  },
  {
    "text": "that calls another routine and so how is the computer keeping track of where the heck it was before i mean like I go up",
    "start": "438319",
    "end": "445440"
  },
  {
    "text": "the stairs sometimes and I can't remember what it is I was meant to be doing when I come back down again so how",
    "start": "445440",
    "end": "450720"
  },
  {
    "text": "does the computer do this we need to introduce a new register and I'm going to have a new box over here and it's",
    "start": "450720",
    "end": "457360"
  },
  {
    "text": "going to call SP for stack pointer and we're going to use a stack i'm no",
    "start": "457360",
    "end": "462479"
  },
  {
    "text": "computer file would have covered stacks before and when we think of things like stacks we think of them as like a data",
    "start": "462479",
    "end": "467560"
  },
  {
    "text": "structure and typically data structures are things that we write programs to do but this is going to be something which",
    "start": "467560",
    "end": "472960"
  },
  {
    "text": "is going to be implemented by the CPU itself in silicon in the hardware of the CPU so it has to be super super simple",
    "start": "472960",
    "end": "480479"
  },
  {
    "text": "and luckily the stack is incredibly simple so what is a stack let's just do a quick recap a stack is a nice pack of",
    "start": "480479",
    "end": "488479"
  },
  {
    "text": "um if I can get them out here post-it notes where um I would like to be able to keep record of what I've been doing",
    "start": "488479",
    "end": "493919"
  },
  {
    "text": "before or whatever's happened before and then I want to be able to put things on the top of the stack and we call that",
    "start": "493919",
    "end": "499720"
  },
  {
    "text": "pushing and then when I'm done with them I want to pop them off of the stack you know push and pull would be make more",
    "start": "499720",
    "end": "506000"
  },
  {
    "text": "sense but actually we say push and pop uh pop them off of the stack in the reverse order that I put them on there",
    "start": "506000",
    "end": "511360"
  },
  {
    "text": "that's the key aspect here so for example if we were over here let's assume I'm going to write over here 2,00",
    "start": "511360",
    "end": "518320"
  },
  {
    "text": "is going to be my square root routine oops and it's going to be lots of clever instructions that I don't know how to",
    "start": "518320",
    "end": "524800"
  },
  {
    "text": "write off off the top of my head that actually calculate the square root of whatever is in T2 as it happens we'll",
    "start": "524800",
    "end": "530800"
  },
  {
    "text": "come back to that in a sec and so this instruction at line 103 wouldn't be a square root it would be something like",
    "start": "530800",
    "end": "536399"
  },
  {
    "text": "call 2000 so we just ignore the square root for now what we're going to see",
    "start": "536399",
    "end": "541440"
  },
  {
    "text": "here is let's assume our robot is here at instruction 10 he executes instruction at memory address 10 the",
    "start": "541440",
    "end": "547360"
  },
  {
    "text": "move 11 12 call he's now going to go to 1,00 but before he does that he's going to write down 13 to say this is where I",
    "start": "547360",
    "end": "554560"
  },
  {
    "text": "need to come back to and he's going to push that onto the stack so we're going to for now the stack is going to live",
    "start": "554560",
    "end": "560720"
  },
  {
    "text": "over here in this corner and now he carries on over instruction 10,00 he multiplies he multiplies he adds now he",
    "start": "560720",
    "end": "567600"
  },
  {
    "text": "needs to call to 2,00 but when he's finished with 2,000 he needs to come back to 1004 so I'm going to write 104 on my",
    "start": "567600",
    "end": "575560"
  },
  {
    "text": "stack and put it on the top now notice that's hiding the 13 and now we've got the 104 he's going to go and do the",
    "start": "575560",
    "end": "582399"
  },
  {
    "text": "square root routine which I haven't written out he'll hit the return at the end of the square root routine and the",
    "start": "582399",
    "end": "587920"
  },
  {
    "text": "return says go get the most recent 104 and then go there and then throw this",
    "start": "587920",
    "end": "593440"
  },
  {
    "text": "away so we're going to take 1004 away and we're going to throw it away so now we come back to 104 oh and now we're",
    "start": "593440",
    "end": "599839"
  },
  {
    "text": "going to return again as it happens there's no extra work in this particular case but there usually is a little bit more work um and now we're going to",
    "start": "599839",
    "end": "606000"
  },
  {
    "text": "return we're going to get 13 off this piece of paper and that means we're going to go back to address 13 and we carry on with our printing result so",
    "start": "606000",
    "end": "612320"
  },
  {
    "text": "that's fantastic we've got a way of keeping a sort of arbitrary number of the things that we were doing before to",
    "start": "612320",
    "end": "618959"
  },
  {
    "text": "go back to fab but how do we implement this in hardware so I'm going to get my little stack pointer and I'm going to",
    "start": "618959",
    "end": "625279"
  },
  {
    "text": "use this terrible little piece of post-it note and what the stack pointer really is is it points to where the",
    "start": "625279",
    "end": "631040"
  },
  {
    "text": "stack is in memory and just like everything we can solve uh our problems by finding a way to store them in this",
    "start": "631040",
    "end": "638399"
  },
  {
    "text": "massive array of pigeon holes so we're going to say that the stack pointer initially starts over here somewhere in",
    "start": "638399",
    "end": "644640"
  },
  {
    "text": "memory and so effectively this stack pointer will have let's say this is address uh 5,000 this is address 5,000",
    "start": "644640",
    "end": "651519"
  },
  {
    "text": "over here somehow so our stack pointer is 5,000 when we push what we're going",
    "start": "651519",
    "end": "657279"
  },
  {
    "text": "to do is we're going to write the value into the location that the stack pointer is currently referencing so we're going",
    "start": "657279",
    "end": "662480"
  },
  {
    "text": "to put our value in the case of this it would have been 13 then we're going to walk the stack pointer backwards and",
    "start": "662480",
    "end": "667920"
  },
  {
    "text": "we'll talk about why it goes backwards in a second the next call would have put you know 1,4 in here and it would have moved the",
    "start": "667920",
    "end": "674959"
  },
  {
    "text": "stack pointer forward and then obviously popping is the reverse we move the stack pointer up one we read the number that's out of there and that's where we go and",
    "start": "674959",
    "end": "681440"
  },
  {
    "text": "then we move the stack pointer up again so that's the mechanism it's super simple and you'll notice that I put the",
    "start": "681440",
    "end": "687279"
  },
  {
    "text": "stack pointer somewhere very very high up in memory because typically we start our programs and data and everything",
    "start": "687279",
    "end": "692959"
  },
  {
    "text": "starts at the bottom of our giant array of pigeon holes and then we put the stack pointer way off in the back and we",
    "start": "692959",
    "end": "699200"
  },
  {
    "text": "hope that they never cross over each other because if they do we've got big",
    "start": "699200",
    "end": "704320"
  },
  {
    "text": "problems and I mean there's a name for that you've probably even you're probably thinking it right now there's a there's a website called it isn't there",
    "start": "704320",
    "end": "710560"
  },
  {
    "text": "i think is there is a website that's that's called for exactly this reason it's like a known pro programmer problem",
    "start": "710560",
    "end": "716000"
  },
  {
    "text": "and it's the the website is a is a sort of solve my programming problem site and it's called a stack overflow and so the",
    "start": "716000",
    "end": "722720"
  },
  {
    "text": "so the stack itself is an area of memory that we have reserved for this purposes",
    "start": "722720",
    "end": "728240"
  },
  {
    "text": "of keeping a sort of temporary track of where we were before and the the hope is that we make that area of memory big",
    "start": "728240",
    "end": "734880"
  },
  {
    "text": "enough that you don't write off of the end of it now obviously modern operating systems and everything have all sorts of",
    "start": "734880",
    "end": "741120"
  },
  {
    "text": "clever protections to prevent that from being too much of a problem but we there are still problems associated with this that is the mechanisms by which we we",
    "start": "741120",
    "end": "748240"
  },
  {
    "text": "call but I would like to demonstrate this a little bit better by writing our Fibonacci program again except in a",
    "start": "748240",
    "end": "754240"
  },
  {
    "text": "different way um so I'm going to move these out the way and if you remember",
    "start": "754240",
    "end": "760320"
  },
  {
    "text": "our Fibonacci program uh it calculated by essentially starting at the beginning and just walking up all of the Fibonacci",
    "start": "760320",
    "end": "766480"
  },
  {
    "text": "numbers and keeping track of what it had done before and just adding things together um there's an cute way of",
    "start": "766480",
    "end": "772800"
  },
  {
    "text": "defining the Fibonacci sequence like for the nth Fibonacci sequence in terms of",
    "start": "772800",
    "end": "778320"
  },
  {
    "text": "the previous Fibonacci numbers and you can actually write a program to compute it that way it's terribly inefficient",
    "start": "778320",
    "end": "784560"
  },
  {
    "text": "and you shouldn't do it but it certainly demonstrates some of the things I'd like to talk about so let me just write out",
    "start": "784560",
    "end": "790160"
  },
  {
    "text": "the mathematical definition and I'm no mathematician um I'm barely a programmer the function Fibonacci has the value",
    "start": "790160",
    "end": "797519"
  },
  {
    "text": "Fibonacci sorry of n some value some number n and now we're turning into I",
    "start": "797519",
    "end": "802800"
  },
  {
    "text": "feel like we're we're turning into the sister channel right now but it is defined to be n if n is less than or",
    "start": "802800",
    "end": "808800"
  },
  {
    "text": "equal to one that gives us if n is zero Fibonacci is zero if n if n is one",
    "start": "808800",
    "end": "813920"
  },
  {
    "text": "Fibonacci of one is one but other than that Fibonacci of n is Fibonacci of n minus one plus",
    "start": "813920",
    "end": "825720"
  },
  {
    "text": "Fibonacci of n minus 2 so that's that's the other case so if it's if n is less",
    "start": "825720",
    "end": "831519"
  },
  {
    "text": "than equal to one we just know the answer otherwise we can define it in terms of ourself which is a cute way of",
    "start": "831519",
    "end": "838480"
  },
  {
    "text": "doing it um let's quickly try writing that program right now so I'm not going",
    "start": "838480",
    "end": "844959"
  },
  {
    "text": "to write the addresses on the left hand side it doesn't really matter that much i'm just going to give a name to fib and",
    "start": "844959",
    "end": "850160"
  },
  {
    "text": "this is typically what we do if we're writing assembly code is that we we give names to things and then we let a computer program work out where all the",
    "start": "850160",
    "end": "856880"
  },
  {
    "text": "addresses are actually going to be and in fact the computer program also works out all of the numbers and things like that we don't have to do most of that",
    "start": "856880",
    "end": "862560"
  },
  {
    "text": "work for us which is which is fun so like the first thing we're going to do is let's take care of the initial",
    "start": "862560",
    "end": "867760"
  },
  {
    "text": "condition so I'm going to say compare n R but n is what I mean how many",
    "start": "867760",
    "end": "876480"
  },
  {
    "text": "registers has my my computer got here i mean I could make up another one called n but I'm going to run out of them very very quickly so we're going to pause",
    "start": "876480",
    "end": "883839"
  },
  {
    "text": "here and I'm going to have to come up with a better way of doing this because eventually I'm going to call Fibonacci again and I've already used n and so how",
    "start": "883839",
    "end": "890160"
  },
  {
    "text": "many ends can I possibly have so what we need to do is come up with a convention",
    "start": "890160",
    "end": "896240"
  },
  {
    "text": "about how we're going to interact with other subprograms and that convention is",
    "start": "896240",
    "end": "902480"
  },
  {
    "text": "essentially a contract between the caller saying hey I expect this environment like these",
    "start": "902480",
    "end": "910639"
  },
  {
    "text": "registers should be allocated in this way and the call that says okay if I",
    "start": "910639",
    "end": "915680"
  },
  {
    "text": "need to use one of the parameters or if I need to use some registers I know which ones I'm allowed to use which ones",
    "start": "915680",
    "end": "922160"
  },
  {
    "text": "I'm not allowed to use and that that kind of thing so it's a bit like you know when you when you have a contract with a with a person and you say like",
    "start": "922160",
    "end": "928800"
  },
  {
    "text": "okay you're you're doing some work on my desk temporarily um feel free to use the",
    "start": "928800",
    "end": "935360"
  },
  {
    "text": "desk but can you put it back exactly how you find it now that would be a very strict contract but that's not totally",
    "start": "935360",
    "end": "941920"
  },
  {
    "text": "unreasonable I think but you know maybe you say I don't really mind what's on top of the desk i can just chuck that in",
    "start": "941920",
    "end": "947680"
  },
  {
    "text": "the the bin um but don't muck around with my book collection please that's that's fine you know or if you do just",
    "start": "947680",
    "end": "953440"
  },
  {
    "text": "make sure the book collection is back again that way I can rely on you haven't fiddled around with like my alphabetized",
    "start": "953440",
    "end": "959600"
  },
  {
    "text": "sequence of books and so what I'm going to do is I'm going to make up a a a calling convention for my madeup",
    "start": "959600",
    "end": "967759"
  },
  {
    "text": "program uh my madeup CPU here and instead of calling the registers A and B and whatever I'm going to call them R0",
    "start": "967759",
    "end": "974320"
  },
  {
    "text": "R1 and I'm going to have say 15 of them there's 15 registers sorry 16 off by one",
    "start": "974320",
    "end": "979519"
  },
  {
    "text": "errors uh 16 registers R0 through R15 and uh that's all the robot has access",
    "start": "979519",
    "end": "985040"
  },
  {
    "text": "to but obviously has this big memory so what I'm going to say is if you are",
    "start": "985040",
    "end": "990639"
  },
  {
    "text": "calling a function if I want to pass in an argument into that function if I want",
    "start": "990639",
    "end": "996079"
  },
  {
    "text": "to give it a value to to work on I'm going to put the first argument in register zero the second one in register",
    "start": "996079",
    "end": "1002000"
  },
  {
    "text": "one register two and then register three for the others so this particular operating system or program whatever",
    "start": "1002000",
    "end": "1008480"
  },
  {
    "text": "we're going to call it this this a this calling only allows up to passing up to four arguments for the simplicity now if",
    "start": "1008480",
    "end": "1014480"
  },
  {
    "text": "I call someone else's function maybe I'm doing some temporary work myself and I'm using some of the other registers to",
    "start": "1014480",
    "end": "1020560"
  },
  {
    "text": "store values and it would be a pain if I had to store them every single time",
    "start": "1020560",
    "end": "1025600"
  },
  {
    "text": "somewhere don't know where we store them but like preserve them so that when I call a function it can use all the",
    "start": "1025600",
    "end": "1030720"
  },
  {
    "text": "registers in the whole computer and then when it returns back to me I have to somehow recover from this right that",
    "start": "1030720",
    "end": "1036240"
  },
  {
    "text": "would be that would be annoying so I'm going to say that you're not allowed if you're a function you're not allowed to change the contents of R4 through R15 so",
    "start": "1036240",
    "end": "1044558"
  },
  {
    "text": "the rest of the registers you have to leave leave alone now that doesn't mean in principle you can't change them you just have to make sure you put them back",
    "start": "1044559",
    "end": "1050799"
  },
  {
    "text": "so again for our desk analogy you can move those books around all you like just So long as when you let me come",
    "start": "1050799",
    "end": "1057280"
  },
  {
    "text": "back in you've put them back the way you found them which as a parent I'm sure",
    "start": "1057280",
    "end": "1062880"
  },
  {
    "text": "you're like please just leave it how it was before right so R4 through R15 we're",
    "start": "1062880",
    "end": "1070400"
  },
  {
    "text": "going to say you have to preserve them and then the last sort of part of this so this these are the parameters coming",
    "start": "1070400",
    "end": "1075720"
  },
  {
    "text": "in and then this is the sort of do not touch do not touch do not not and then",
    "start": "1075720",
    "end": "1082320"
  },
  {
    "text": "last of all if your function returns a value as our Fibonacci sequence will",
    "start": "1082320",
    "end": "1088160"
  },
  {
    "text": "let's just say the the result goes in R0 that's a convenient place for the result to go so now we've got a little contract",
    "start": "1088160",
    "end": "1095600"
  },
  {
    "text": "and this is going to help us write our Fibonacci routine in a sensible way but also it means we can interoperate with",
    "start": "1095600",
    "end": "1101840"
  },
  {
    "text": "every other program without us all having to decide on you know magnitude",
    "start": "1101840",
    "end": "1107360"
  },
  {
    "text": "uses T0 but square root uses result in T2 that would be too confusing if we just rephrase this in terms of the right",
    "start": "1107360",
    "end": "1114080"
  },
  {
    "text": "the correct registers maybe we have to do a tiny bit more work and we have to be a bit careful about which registers we use but it means we can interoperate",
    "start": "1114080",
    "end": "1120880"
  },
  {
    "text": "with two different programmers uh code and that's important right and usually",
    "start": "1120880",
    "end": "1127280"
  },
  {
    "text": "the second programmer is you yesterday and you're trying to work with the code that you wrote before um so right now",
    "start": "1127280",
    "end": "1133919"
  },
  {
    "text": "we're going to apply our calling convention to our Fibonacci routine as we go so the first thing we know is that the n value will be in register zero",
    "start": "1133919",
    "end": "1140960"
  },
  {
    "text": "because that's the parameter to our function so I'm going to compare r0 with 1 and then I'm going to say branch if",
    "start": "1140960",
    "end": "1149840"
  },
  {
    "text": "less than or equal and I'm picking these words because they are very close to a",
    "start": "1149840",
    "end": "1155360"
  },
  {
    "text": "real um CPU's um architecture um branch of less equal to end and that's just",
    "start": "1155360",
    "end": "1162640"
  },
  {
    "text": "going to say we're done and look as it turns out R0 has the result in it because we return n if n is less than",
    "start": "1162640",
    "end": "1169039"
  },
  {
    "text": "equal to zero and I'm going to write end all the way down here and end is going to be ret so I'm effectively saying jump",
    "start": "1169039",
    "end": "1176080"
  },
  {
    "text": "to the end and finish and then you'll go back to the caller fabulous okay so the next thing we need to do is we need to",
    "start": "1176080",
    "end": "1184240"
  },
  {
    "text": "get Fibonacci of n minus one so what I could do down here and I'm going to",
    "start": "1184240",
    "end": "1190160"
  },
  {
    "text": "leave some space here because I'm going to have to do a little bit more and I maybe I haven't left enough room now I look at",
    "start": "1190160",
    "end": "1195320"
  },
  {
    "text": "my again I'm going to rely on Sean's editing to make this look okay um is",
    "start": "1195320",
    "end": "1201039"
  },
  {
    "text": "we're going to say subtract R0 comma R0 comma and I'm going to use a hash one to",
    "start": "1201039",
    "end": "1207919"
  },
  {
    "text": "mean this is not a register this is the actual value one which is something that again my architecture is going to allow me to do and that is I'm going to say",
    "start": "1207919",
    "end": "1214640"
  },
  {
    "text": "let R0 be one R0 minus one that is N minus one so we're saying that n the",
    "start": "1214640",
    "end": "1220720"
  },
  {
    "text": "input to the next routine is n minus one fantastic um and then I'm going to call",
    "start": "1220720",
    "end": "1228440"
  },
  {
    "text": "fib wonderful so now having done that we've got the fib of r0 here so we now",
    "start": "1228440",
    "end": "1234400"
  },
  {
    "text": "know what uh so this gets fib of n minus one wonderful and now we want to get fib",
    "start": "1234400",
    "end": "1241840"
  },
  {
    "text": "of n minus 2 but unfortunately we've just lost whatever n was right we've got",
    "start": "1241840",
    "end": "1248320"
  },
  {
    "text": "the result of n a fib of n in r0 but we no longer have the original n value darn",
    "start": "1248320",
    "end": "1256480"
  },
  {
    "text": "it so I need a way of preserving it so why don't I borrow one of the other registers that I know that fib even",
    "start": "1256480",
    "end": "1262559"
  },
  {
    "text": "though it's myself right it won't touch or is not allowed to touch so right at the beginning here I'm going to say",
    "start": "1262559",
    "end": "1269640"
  },
  {
    "text": "let's put a copy of the input value into R4 right we'll worry about I've just",
    "start": "1269640",
    "end": "1277600"
  },
  {
    "text": "realized I haven't left enough space again we'll worry about um the fact that we're we're mcking mcking around with R4",
    "start": "1277600",
    "end": "1283679"
  },
  {
    "text": "in a second so we've called fib of n minus one and then what I want to be able to do is say okay I want to now",
    "start": "1283679",
    "end": "1289840"
  },
  {
    "text": "call sub r0 comma r4 comma",
    "start": "1289840",
    "end": "1294919"
  },
  {
    "text": "#2 and call fib so here we're saying R0 which again was",
    "start": "1294919",
    "end": "1301039"
  },
  {
    "text": "be the input value to our fib is equal to the original N minus 2 cool fib",
    "start": "1301039",
    "end": "1307640"
  },
  {
    "text": "wonderful except that um we've now lost the result that we got from the previous fib which was in R0 darn so why don't we",
    "start": "1307640",
    "end": "1317080"
  },
  {
    "text": "temporarily move uh it into R5 so what",
    "start": "1317080",
    "end": "1322240"
  },
  {
    "text": "we've got here at this point is R5 is equal to fib of n minus",
    "start": "1322240",
    "end": "1329000"
  },
  {
    "text": "one down here we now know that R0 is equal to fib of n minus2 and we can",
    "start": "1329000",
    "end": "1335679"
  },
  {
    "text": "actually just add R0 to uh R0 to R5 so now we're saying fib of n",
    "start": "1335679",
    "end": "1344520"
  },
  {
    "text": "minus2 plus the thing we remembered before of fib of n minus one and so",
    "start": "1344520",
    "end": "1350240"
  },
  {
    "text": "there's a little bit more work that we've had to do here but we've brought back the interoperability with any function and we don't have to kind of",
    "start": "1350240",
    "end": "1356320"
  },
  {
    "text": "come up with a a different convention for everything but we've we've given ourselves a problem and that problem is",
    "start": "1356320",
    "end": "1362240"
  },
  {
    "text": "that we've just corrupted R4 and R5 even though we said we're not allowed to touch them so we need a way of preserving them and restoring them now",
    "start": "1362240",
    "end": "1369600"
  },
  {
    "text": "could you think of a way a data structure that we've just talked about that could preserve and restore values",
    "start": "1369600",
    "end": "1375840"
  },
  {
    "text": "in a way that lets us kind of nest and keep going does it involve post-it notes",
    "start": "1375840",
    "end": "1380960"
  },
  {
    "text": "it does involve post-it notes exactly right so uh not real ones although my",
    "start": "1380960",
    "end": "1386000"
  },
  {
    "text": "maybe the robot does use Post-it notes i don't know no he has to use pigeon holes he has to use pigeon holes in this here so post-it notes in pigeon holes post",
    "start": "1386000",
    "end": "1393919"
  },
  {
    "text": "notes in pigeon holes i guess it is yeah what I really should have done and I mean I don't know if you can fix this in",
    "start": "1393919",
    "end": "1398960"
  },
  {
    "text": "the edit somewhere is that mob should have been here r4 R0 and then directly",
    "start": "1398960",
    "end": "1404000"
  },
  {
    "text": "before once we've decided that we we aren't immediately going to operate we need to push and the CPU allows us to do",
    "start": "1404000",
    "end": "1410000"
  },
  {
    "text": "this as well it lets us put arbitrary values on the stack so here we want to say I need to push R4 and then I need to",
    "start": "1410000",
    "end": "1416480"
  },
  {
    "text": "push R5 which says hey preserve on the stack R4 and R5 do all of this work",
    "start": "1416480",
    "end": "1423679"
  },
  {
    "text": "because now I can use R4 and five as much as I like provided before I get back I pop and very importantly in the",
    "start": "1423679",
    "end": "1430159"
  },
  {
    "text": "opposite order that I push them on because of the the way that the stack works pop R5 and then pop R4 and that",
    "start": "1430159",
    "end": "1436840"
  },
  {
    "text": "is before the RT so the original version doesn't use the stack at all if our zero",
    "start": "1436840",
    "end": "1442320"
  },
  {
    "text": "is one or zero just bump straight to the end and we're done but as soon as we know we have to call ourselves we immediately preserve R4 and R5 do our",
    "start": "1442320",
    "end": "1449760"
  },
  {
    "text": "work with some careful manipulation of R4 and R5 and R0 to make sure that we we've got everything lined up right for",
    "start": "1449760",
    "end": "1455600"
  },
  {
    "text": "our calling ourself and then restore order before we come back to return and",
    "start": "1455600",
    "end": "1460799"
  },
  {
    "text": "so that lets us write this recursive function and we don't have to worry about running out of register numbers we",
    "start": "1460799",
    "end": "1468799"
  },
  {
    "text": "do have to worry about running out of stack but the stack is in the memory of the computer and there's a lot more of",
    "start": "1468799",
    "end": "1475120"
  },
  {
    "text": "that than there are registers so that helps us a lot although if you're not paying you know if you're not paying",
    "start": "1475120",
    "end": "1481360"
  },
  {
    "text": "attention as a programmer perfectly to exactly balancing the number of pushes to the number of pops if there was some",
    "start": "1481360",
    "end": "1488400"
  },
  {
    "text": "mistake in here for example if I if this branch of less than equal jumped and actually got to the pops instead of to",
    "start": "1488400",
    "end": "1493840"
  },
  {
    "text": "the red or we we did the comparison after we done the pushes and we go",
    "start": "1493840",
    "end": "1498880"
  },
  {
    "text": "straight to the red then now our stack which is mixing two things it's mixing the where to go back to addresses with",
    "start": "1498880",
    "end": "1505679"
  },
  {
    "text": "the numbers that we've decided to preserve ourselves and if you get that wrong or if you can trick a program into",
    "start": "1505679",
    "end": "1511760"
  },
  {
    "text": "doing that when it's not supposed to you can now take control of where the program is executing because if for",
    "start": "1511760",
    "end": "1518480"
  },
  {
    "text": "example you can put the number 27 into R4 or whatever and then contrive for",
    "start": "1518480",
    "end": "1523919"
  },
  {
    "text": "that to be left on the stack when it gets to the RET it goes to 24 instead of wherever it was meant to go and that is",
    "start": "1523919",
    "end": "1530320"
  },
  {
    "text": "rather unfortunately a security problem if any of these numbers came from the outside world but it is also a",
    "start": "1530320",
    "end": "1535679"
  },
  {
    "text": "programming bug but this is why we talk about stack overflows as being an issue it's why we talk about issues with the",
    "start": "1535679",
    "end": "1541919"
  },
  {
    "text": "program where where you can take control of the stack and then force the the execution to go elsewhere is there one",
    "start": "1541919",
    "end": "1547440"
  },
  {
    "text": "stack in a computer is it one stack for a CPU is it is it where is the stack is that is this in a cache or That's a",
    "start": "1547440",
    "end": "1554400"
  },
  {
    "text": "really interesting question so yes it is is it so the this is a funny thing so this is like where the the boundary",
    "start": "1554400",
    "end": "1559440"
  },
  {
    "text": "between the physical CPU and its registers of which it has exactly one",
    "start": "1559440",
    "end": "1564559"
  },
  {
    "text": "stack pointer so that CPU has one stack pointer um the calling convention which explains where things are going to go",
    "start": "1564559",
    "end": "1570960"
  },
  {
    "text": "and whatever is more of a convention that is not tied to the CPU so you know a different operating systems even might",
    "start": "1570960",
    "end": "1577679"
  },
  {
    "text": "choose to do things differently and then the operating system as well if you've got many programs running on a computer",
    "start": "1577679",
    "end": "1583279"
  },
  {
    "text": "or if you have many threads running each thread will have its own stack and the operating system does some magic to",
    "start": "1583279",
    "end": "1589440"
  },
  {
    "text": "switch the stack pointer from one stack area to another stack as it switches between which programs are executing and",
    "start": "1589440",
    "end": "1597120"
  },
  {
    "text": "you know those kinds of subtle distinctions which while they're not specific to the CPU the C CPU provides the primitives that you can build these",
    "start": "1597120",
    "end": "1603840"
  },
  {
    "text": "things with um they those those things are sort of vaguely operating system uh",
    "start": "1603840",
    "end": "1609760"
  },
  {
    "text": "again specific mean that like this is why you can't take code naively from like say Linux and run it on Windows",
    "start": "1609760",
    "end": "1615679"
  },
  {
    "text": "because they might dis disagree on which registers have which values when right even even in simple pieces of code so um",
    "start": "1615679",
    "end": "1624240"
  },
  {
    "text": "but yeah yeah yeah and and typically to answer your question about cache typically because the stack is so",
    "start": "1624240",
    "end": "1629360"
  },
  {
    "text": "frequently accessed so we're forever pushing and popping things from the stack it is almost certainly in the the",
    "start": "1629360",
    "end": "1636320"
  },
  {
    "text": "most warm cache the level one cache of your system and so it's relatively cheap",
    "start": "1636320",
    "end": "1641600"
  },
  {
    "text": "to push and pop things to the stack whereas if your if every program one you know one solution to this if we weren't",
    "start": "1641600",
    "end": "1646880"
  },
  {
    "text": "recursive would be if every program every every uh uh procedure had its own",
    "start": "1646880",
    "end": "1652080"
  },
  {
    "text": "temporary little storage area where it stored the like R4 and R5 that it's about to splat it just stores it there",
    "start": "1652080",
    "end": "1658240"
  },
  {
    "text": "then you know first of all you couldn't use recursion because you couldn't call yourself and all that kind of stuff because you've only got one place to put them but secondly it means every time",
    "start": "1658240",
    "end": "1664880"
  },
  {
    "text": "you call a function it's using its own area of memory which probably isn't in the cache unless you've just done it and",
    "start": "1664880",
    "end": "1670400"
  },
  {
    "text": "and so the stack kind of brings these great properties of relatively performant um uh memory access times and",
    "start": "1670400",
    "end": "1678640"
  },
  {
    "text": "you know also CPUs are really smart and they're very clever at noticing that when you're pushing and popping to the",
    "start": "1678640",
    "end": "1684159"
  },
  {
    "text": "stack and they can often take shortcuts to avoid um doing too many memory",
    "start": "1684159",
    "end": "1689360"
  },
  {
    "text": "accesses or at least making those those those hide away from the the program in terms of the latency that they might",
    "start": "1689360",
    "end": "1694880"
  },
  {
    "text": "bring so it's it's a fun it's a fun trick um yeah and as having a a hardware",
    "start": "1694880",
    "end": "1702080"
  },
  {
    "text": "resource I mean actually so just to be sort of amusing some um some computers don't directly have a a stack pointer or",
    "start": "1702080",
    "end": "1710960"
  },
  {
    "text": "they don't need a stack pointer you could just pick one register and say this is what I'm going to use this register to point at it could be like R15 let's just pick R15 is is I'm",
    "start": "1710960",
    "end": "1718320"
  },
  {
    "text": "arbitrarily choosing to use that as a stack pointer and then maybe instead of um having the computer automatically",
    "start": "1718320",
    "end": "1725039"
  },
  {
    "text": "push and pop the return address um we could just have another register which is like where did I last come from and",
    "start": "1725039",
    "end": "1732080"
  },
  {
    "text": "we could call that say a link register that's like where I came from it's just so it's just one of them bit like a program counter that sort of a thing",
    "start": "1732080",
    "end": "1738880"
  },
  {
    "text": "it's like a program counter just keeps the last one and then if you want to return what you do is you say can you put the the link register back into the",
    "start": "1738880",
    "end": "1745440"
  },
  {
    "text": "program counter and that returns and now if you call another function though you now need to push the link register and",
    "start": "1745440",
    "end": "1751520"
  },
  {
    "text": "now you've built the ST but that means you can choose whichever register you like is that you can choose whichever way of doing it you like um and um I",
    "start": "1751520",
    "end": "1758960"
  },
  {
    "text": "actually have a surprise i we I'm going to if let's see if this works and I I'm sorry if this breaks and everything i'm",
    "start": "1758960",
    "end": "1764720"
  },
  {
    "text": "going to click this button here so what are we looking at here then this is uh a website called Compiler Explorer which I'm involved in running um so you know",
    "start": "1764720",
    "end": "1772559"
  },
  {
    "text": "uh disclaimers abound i think some people have Yes have definitely in the comments before spotted that you're involved they have noticed that I'm and",
    "start": "1772559",
    "end": "1779039"
  },
  {
    "text": "and it allows you to to pull things apart basically does it or was it yeah yeah it lets you write um in various",
    "start": "1779039",
    "end": "1784480"
  },
  {
    "text": "different programming languages on the left hand side feed them into compilers and and then see what the results look",
    "start": "1784480",
    "end": "1790159"
  },
  {
    "text": "like in terms of the actual assembly code that the computer's going to run on the right hand side and I took a moment",
    "start": "1790159",
    "end": "1795840"
  },
  {
    "text": "to write in C the Fibonacci program and I compiled it for the ARM architecture",
    "start": "1795840",
    "end": "1804240"
  },
  {
    "text": "which is what this is sort of vaguely heading towards on the left hand side is the code and then the colors of the",
    "start": "1804240",
    "end": "1809279"
  },
  {
    "text": "backgrounds represent which part of the C code which is a higher level language maps to which kinds of assembly",
    "start": "1809279",
    "end": "1815760"
  },
  {
    "text": "instructions on the right hand side and while it's not exactly what I've written down on this piece of paper here it is",
    "start": "1815760",
    "end": "1821120"
  },
  {
    "text": "surprisingly close like we see that it unconditionally pushes a bunch of stuff it does that comparison and goes to like",
    "start": "1821120",
    "end": "1826880"
  },
  {
    "text": "end down here where it pops and then this BX is to move the program counter into the LR the link register and then",
    "start": "1826880",
    "end": "1832799"
  },
  {
    "text": "down here we can see it's doing exactly what I say exactly very similar things to what I was doing by subtracting one",
    "start": "1832799",
    "end": "1838000"
  },
  {
    "text": "and two calling Fibonacci and adding them all together so so the math checks how it does i have actually written",
    "start": "1838000",
    "end": "1844640"
  },
  {
    "text": "something vaguely correct here but um yeah so typically one as a programmer",
    "start": "1844640",
    "end": "1850159"
  },
  {
    "text": "doesn't write stuff either on paper or uh or uh uh in assembly instructions we",
    "start": "1850159",
    "end": "1855279"
  },
  {
    "text": "use higher level languages to do that and but they have to do the same thing ultimately they all boils down to the",
    "start": "1855279",
    "end": "1861120"
  },
  {
    "text": "same uh instructions the same ones and zeros at the end and you can tinker with it so if I go over here and you know",
    "start": "1861120",
    "end": "1866960"
  },
  {
    "text": "maybe we're going to make up a new Fibonacci number sequence which is actually fib of x minus two two three",
    "start": "1866960",
    "end": "1872880"
  },
  {
    "text": "even as well and make that less equals to then in a moment or two the whole",
    "start": "1872880",
    "end": "1878240"
  },
  {
    "text": "thing starts immediately sort of recompiles and shows you and it works for tiny snippets of code and there's 100 different things you can do with it",
    "start": "1878240",
    "end": "1884799"
  },
  {
    "text": "um yeah it's it's fun but you know obviously we this is higher level than we've been talking about and certainly the lefth hand side here is much higher",
    "start": "1884799",
    "end": "1890720"
  },
  {
    "text": "level than the uh the code I've been writing out by hand but you know there's a reason why I wrote a website called",
    "start": "1890720",
    "end": "1896640"
  },
  {
    "text": "compiler explorer that that explores all this type of stuff i'm really fascinated by it and I find it really interesting and I I hope I hope the viewers do",
    "start": "1896640",
    "end": "1904880"
  },
  {
    "text": "too a sum of a bunch of square roots and the other path is also going to be the sum of a bunch of square roots and so",
    "start": "1910519",
    "end": "1917360"
  },
  {
    "text": "the question we have is how hard is it given a list of square roots and another list of square roots to determine which",
    "start": "1917360",
    "end": "1923519"
  },
  {
    "text": "of them has a bigger sum and it sounds like you think it's not going to be that",
    "start": "1923519",
    "end": "1928960"
  }
]