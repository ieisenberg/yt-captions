[
  {
    "text": "We're going to talk about going from\nGalois fields to Reed-Solomon codes.",
    "start": "0",
    "end": "8309"
  },
  {
    "text": "We must be mad, Sean. Really, I mean, so many\nof you have said: \"Just do Reed-Solomon,",
    "start": "8309",
    "end": "15299"
  },
  {
    "text": "y' know. You've done Hamming codes. They [Reed-Solomon]\ncan't be that much more complex?\"  Oh yes they can!",
    "start": "15299",
    "end": "23810"
  },
  {
    "text": "The stuff we have done earlier - and we've done a\nfair bit on Hamming codes, which if you",
    "start": "24289",
    "end": "30119"
  },
  {
    "text": "remember are basically going to correct a\n... put right a single error. That all",
    "start": "30119",
    "end": "35968"
  },
  {
    "text": "happened in the 1960s. And in two of the\nvideos out there, which we'll put the",
    "start": "35969",
    "end": "43020"
  },
  {
    "text": "links out for you, I did a thing called\nMulti-Dimensional Error Correction where",
    "start": "43020",
    "end": "47550"
  },
  {
    "text": "I had two bits of information (which was\na San Francisco state of weather). So",
    "start": "47550",
    "end": "53190"
  },
  {
    "text": "there was two bits for the state of the\nweather, like I think it was '11' for \"sunny\",",
    "start": "53190",
    "end": "57870"
  },
  {
    "text": "or something like that. But in\norder to protect those bits against a",
    "start": "57870",
    "end": "62670"
  },
  {
    "text": "1-bit damage, I had to add no fewer\nthan 3 extra bits. I had to make it into",
    "start": "62670",
    "end": "69060"
  },
  {
    "text": "a 5-bit code. But it was OK, because\nchecking up whether it had been damaged",
    "start": "69060",
    "end": "74729"
  },
  {
    "text": "was easy. It was a simple parity check. It\nwas effectively saying : \"Look, here's the",
    "start": "74729",
    "end": "80609"
  },
  {
    "text": "3 parity-check bits at the end\". I've\nmade the rule that overall it must be",
    "start": "80610",
    "end": "85290"
  },
  {
    "text": "even parity. I know that one of them says\n'1' Another one says '0' but this [third] bit I",
    "start": "85290",
    "end": "91170"
  },
  {
    "text": "don't know. But it's got to be even\nparity overall so if I've only got a single",
    "start": "91170",
    "end": "95008"
  },
  {
    "text": "'1'and a '0',  I need another '1' to\nmake that grouping be even parity.",
    "start": "95009",
    "end": "99180"
  },
  {
    "text": "Now that's the easy error correction. How did\nit advance from that?  What changed? ",
    "start": "99180",
    "end": "103890"
  },
  {
    "text": "Well, we're talking about 10 years hence. I\nmean Richard Hamming was very definitely",
    "start": "103890",
    "end": "109860"
  },
  {
    "text": "late '50s / early '60s. The next\nphase of this or, this \"big jump forward\"",
    "start": "109860",
    "end": "116670"
  },
  {
    "text": "thst we would want to do, was by Reed and Solomon [and]\nwas 10 years later. It was late '60s / early '70s.",
    "start": "116670",
    "end": "121649"
  },
  {
    "text": "O!h and big surprise:  Were Reed and",
    "start": "121649",
    "end": "125250"
  },
  {
    "text": "Solomon at Bell Labs ?! No! For a change.\nEverybody else seemed to be at Bell Labs",
    "start": "125250",
    "end": "131039"
  },
  {
    "text": "[but] Reed and Solomon were,\nI think, at  MIT's Lincoln Laboratory. But there",
    "start": "131039",
    "end": "136489"
  },
  {
    "text": "was a realization that if you wanted\nmore powerful error correction there",
    "start": "136489",
    "end": "141290"
  },
  {
    "text": "were several things you could do but, the\nmore they looked into it, the more they",
    "start": "141290",
    "end": "145579"
  },
  {
    "text": "found themselves having to learn about\nPure Mathematics concepts called Galois",
    "start": "145580",
    "end": "151459"
  },
  {
    "text": "Fields. And this is finite field\narithmetic where you've got to be able",
    "start": "151459",
    "end": "157849"
  },
  {
    "text": "to find a multiplicative and an additive\ninverse. We've tried to prepare you for",
    "start": "157849",
    "end": "163760"
  },
  {
    "text": "this by doing ISBN book codes, which is a\nvery simple manifestation of those two",
    "start": "163760",
    "end": "169400"
  },
  {
    "text": "things. We thought in our early things [i.e. videos]\nwhere a code word became a string of bits.",
    "start": "169400",
    "end": "175189"
  },
  {
    "text": "And some of those are information bits.\nAnd interleaved with them, or parked at",
    "start": "175190",
    "end": "180709"
  },
  {
    "text": "the right-hand end very often, were\nparity check bits. What we're now going",
    "start": "180709",
    "end": "186590"
  },
  {
    "text": "to try and do is instead of just having\none great long string of bits, linearly,",
    "start": "186590",
    "end": "193209"
  },
  {
    "text": "we're going to try and make it be almost\ntwo-dimensional. Think of every one of",
    "start": "193209",
    "end": "198680"
  },
  {
    "text": "these positions in your code-word now\nas not being a single bit but a column",
    "start": "198680",
    "end": "204650"
  },
  {
    "text": "of bits. Let's say it's an 8 bit column.\nIf you're doing something like Reed-Solomon",
    "start": "204650",
    "end": "209150"
  },
  {
    "text": "correction in a CD context, y'know,\nhow big is the bucket size of",
    "start": "209150",
    "end": "214189"
  },
  {
    "text": "these columns? I think it's something\nlike 40-odd bits but then even that",
    "start": "214190",
    "end": "218989"
  },
  {
    "text": "couldn't cope. They had, like, two layers\nof Reed-Solomon encoding - one backing up",
    "start": "218989",
    "end": "224239"
  },
  {
    "text": "the other. So, if you like, the filling up\nof these things, instead of linearly",
    "start": "224239",
    "end": "227930"
  },
  {
    "text": "going like that - and then at the very far\nend you put a few parity check bits - what",
    "start": "227930",
    "end": "234049"
  },
  {
    "text": "we now do is we declare that every one\nof these positions isn't a *bit* position",
    "start": "234049",
    "end": "238609"
  },
  {
    "text": "it's a *symbol* position but a symbol can\nbe multiple bits, OK? For the sake of",
    "start": "238609",
    "end": "246139"
  },
  {
    "text": "argument let's say it's an 8-bit symbol,\na byte. The way they get filled up is the",
    "start": "246139",
    "end": "251480"
  },
  {
    "text": "bit stream comes in and it fills up a\ncolumn of 8, and then it fills up a next",
    "start": "251480",
    "end": "256370"
  },
  {
    "text": "column 8 and a next column of 8. So it's\nalmost like we've got a 2-dimensional",
    "start": "256370",
    "end": "261409"
  },
  {
    "text": "array of bits - and symbols in that direction- ",
    "start": "261409",
    "end": "265440"
  },
  {
    "text": "but every symbol is composed of 'n' bits, as\nit goes along. What's the advantage of",
    "start": "265440",
    "end": "271740"
  },
  {
    "text": "doing that?  Well, you can see one\nadvantage, when you think about it,",
    "start": "271740",
    "end": "275490"
  },
  {
    "text": "straight away. Hamming codes, for example,\nthe old way, tended to presume you've got",
    "start": "275490",
    "end": "281668"
  },
  {
    "text": "the occasional error, now and then, wide\napart. What this is anticipating - if you",
    "start": "281669",
    "end": "288210"
  },
  {
    "text": "can fill up symbol positions - is you\nmight get 'burst errors'. Yeah, you might",
    "start": "288210",
    "end": "294690"
  },
  {
    "text": "get - here we go - bits coming off a CD, \ntrying to play your music.",
    "start": "294690",
    "end": "300930"
  },
  {
    "text": "It's encoded music. Now, if\nthey're filling up a bucket in a column,",
    "start": "300930",
    "end": "307259"
  },
  {
    "text": "in some sense, and then moving on to the\nnext one",
    "start": "307259",
    "end": "310020"
  },
  {
    "text": "there is just a chance that a localized\nscratch will get all its 'bit-clobbering'",
    "start": "310020",
    "end": "316918"
  },
  {
    "text": "over and done with, within two symbols\nshall we say. So,  we know that we can",
    "start": "316919",
    "end": "323190"
  },
  {
    "text": "devise codes that will can detect and\npotentially correct a certain number of",
    "start": "323190",
    "end": "328560"
  },
  {
    "text": "errors but if we can make it so that\nthose errors are not [only] bit errors within",
    "start": "328560",
    "end": "334349"
  },
  {
    "text": "the symbol but just the symbol itself ...\nsomething's wrong with it! Right?",
    "start": "334349",
    "end": "337650"
  },
  {
    "text": "You then might stand a chance if\nyou've got, again, parity-check *symbols* at",
    "start": "337650",
    "end": "345599"
  },
  {
    "text": "the far right-hand end -  not [just] parity-check\nbits, if they've got enough information",
    "start": "345599",
    "end": "349770"
  },
  {
    "text": "in them, you might be able to say:\n\"Something went wrong. I got a burst error",
    "start": "349770",
    "end": "354000"
  },
  {
    "text": "there, as a scratch on that CD. Can I put\nit right?\" Yes, but it's not going to be",
    "start": "354000",
    "end": "362370"
  },
  {
    "text": "simple-minded parity checking; it's gonna\nbe serious hardcore stuff. Because those",
    "start": "362370",
    "end": "369650"
  },
  {
    "text": "check symbols at the end will normally\nbe arranged so that if the information",
    "start": "369650",
    "end": "378090"
  },
  {
    "text": "is correct and nothing's got damaged\nthere'll be zeros. If something gets",
    "start": "378090",
    "end": "383610"
  },
  {
    "text": "damaged,  the first thing you know about\nit is that the parity-check symbols at",
    "start": "383610",
    "end": "387900"
  },
  {
    "text": "the end are nonzero. You're getting [perhaps]\n3, 5, 12, 15. What does that mean?",
    "start": "387900",
    "end": "393419"
  },
  {
    "text": "well the answer is using\nlots and lots of detective work - by the",
    "start": "393419",
    "end": "398640"
  },
  {
    "text": "way those symbols that you put on the\nfar right-hand end - revel in the name of",
    "start": "398640",
    "end": "402510"
  },
  {
    "text": "\"syndrome\", which i think is a wonderful\nword. And my first thought was what on",
    "start": "402510",
    "end": "406680"
  },
  {
    "text": "earth are pure mathematicians, or\ncommunications engineers, doing with",
    "start": "406680",
    "end": "410820"
  },
  {
    "text": "syndromes? They're medical aren' they?! Well, I\nlooked up in the dictionary and as far",
    "start": "410820",
    "end": "415320"
  },
  {
    "text": "as I can make out it all makes sense. If\nyou have a certain syndrome it means you",
    "start": "415320",
    "end": "421110"
  },
  {
    "text": "are exhibiting symptoms of an underlying problem",
    "start": "421110",
    "end": "425580"
  },
  {
    "text": "So the grouping of symptoms that's\ncaused by an underlying problem is often",
    "start": "425580",
    "end": "430169"
  },
  {
    "text": "called a syndrome. [There's] something like the\nGuillain-Barre syndrome isn't there? I don't know what",
    "start": "430170",
    "end": "434670"
  },
  {
    "text": "it is but I'm no doubt you'll all put me\nright on that. But you can see it makes",
    "start": "434670",
    "end": "438420"
  },
  {
    "text": "sense. The signal that something has gone\nwrong is you get all of these",
    "start": "438420",
    "end": "442710"
  },
  {
    "text": "information bytes or even bigger columns,\nmultiple bytes, whatever. But right at the",
    "start": "442710",
    "end": "447780"
  },
  {
    "text": "end is now a \"checksum from hell\". You have\ngot a syndrome a set of remainders if",
    "start": "447780",
    "end": "456389"
  },
  {
    "text": "you like, that are not zeros. Given only\nthat information, how can you work",
    "start": "456390",
    "end": "461490"
  },
  {
    "text": "backwards and find out which of these\ncolumns got hit and where in the column",
    "start": "461490",
    "end": "466169"
  },
  {
    "text": "it got hit? And the answer is: By using Galois\nField theory over finite fields and",
    "start": "466170",
    "end": "471870"
  },
  {
    "text": "doing lots and lots of long divisions\nand additions. So, the bottom line is that",
    "start": "471870",
    "end": "477660"
  },
  {
    "text": "for this work and particularly if you're\nusing, as we are of course now, powers of",
    "start": "477660",
    "end": "484680"
  },
  {
    "text": "two, Galois said: \"I can liberate you from\nit having to be primes all the time,",
    "start": "484680",
    "end": "492419"
  },
  {
    "text": "I can do powers of primes. And for all of\nyou future computer scientists that I'm",
    "start": "492420",
    "end": "497310"
  },
  {
    "text": "not even aware of, you'll love this because\nyour beloved 2 comes into the real",
    "start": "497310",
    "end": "502500"
  },
  {
    "text": "world because where you say '4'  and I\nsay: Don't think of it as 2 x 2",
    "start": "502500",
    "end": "506880"
  },
  {
    "text": "Think of it as 2 ^ 2.\"\nAnd so he said: \"Yeah, I can do powers of",
    "start": "506880",
    "end": "513780"
  },
  {
    "text": "any prime, including two, but what he\ndidn't say is: Here are the rules",
    "start": "513780",
    "end": "518789"
  },
  {
    "text": "if you you light on 2 and say you want\nto use my methods, here's rule number 1.",
    "start": "518790",
    "end": "523949"
  },
  {
    "text": "Everything must be done modulo 2\nNot modulo your bigger number - like 256 -",
    "start": "523950",
    "end": "530830"
  },
  {
    "text": "that's different.\nModulo 2. So, for addition what do we know",
    "start": "530830",
    "end": "534400"
  },
  {
    "text": "about addition modulo 2, from Bletchley\nPark Sean? What do the ",
    "start": "534400",
    "end": "538830"
  },
  {
    "text": "mathematical logicians call 'addition\nmodulo 2' ?\n>> Sean:  This is exclusive OR",
    "start": "538830",
    "end": "543430"
  },
  {
    "text": ">> DFB: It's Exclusive OR! So, no sweat for computer\nscientists. All our additions of these",
    "start": "543430",
    "end": "549750"
  },
  {
    "text": "numbers, represented in bytes or whatever,\nare going to be done",
    "start": "549750",
    "end": "553720"
  },
  {
    "text": "with Exclusive OR. Worse still - as we\nfound out in the ISBN previous example -",
    "start": "553720",
    "end": "559449"
  },
  {
    "text": "you've got to be able to find\nmultiplicative inverses.  And that's going",
    "start": "559450",
    "end": "564310"
  },
  {
    "text": "to lead us into doing long divisions\nmodulo 2 in a Galois Finite Field. Now",
    "start": "564310",
    "end": "573130"
  },
  {
    "text": "that is a bit hair-raising but not too\nterrifying. But if you're prepared in the",
    "start": "573130",
    "end": "578320"
  },
  {
    "text": "end to do all of that work then fine.\nYou can use your 'syndrome' and analyze",
    "start": "578320",
    "end": "586690"
  },
  {
    "text": "it to tell you where the errors went. That's\na lot of equation solving. For those of",
    "start": "586690",
    "end": "591520"
  },
  {
    "text": "you into these things it's like solving\nlots of simultaneous equations saying [for example]:",
    "start": "591520",
    "end": "595180"
  },
  {
    "text": "\"The only logical solution to this damage\nis it absolutely must be column 3 and",
    "start": "595180",
    "end": "601149"
  },
  {
    "text": "column 13. That's where the damage has\ncome. Does that syndrome always work back",
    "start": "601150",
    "end": "607870"
  },
  {
    "text": "to getting your precisely one answer? \nYes - it's just magic the way that this",
    "start": "607870",
    "end": "613900"
  },
  {
    "text": "error correction works but it is complex\nbecause the brute force way to do it is",
    "start": "613900",
    "end": "619960"
  },
  {
    "text": "to get a set of simultaneous equations\nand - some of you will know this - get lots",
    "start": "619960",
    "end": "623950"
  },
  {
    "text": "of simultaneous equations to solve you use\n'matrix inversion'. That is computationally",
    "start": "623950",
    "end": "628870"
  },
  {
    "text": "a very heavy undertaking. And so you're\nlooking all the time for simplifications",
    "start": "628870",
    "end": "635020"
  },
  {
    "text": "because, if you don't, you're sitting\nthere, like Sean and I were in the early",
    "start": "635020",
    "end": "638860"
  },
  {
    "text": "'80s, thinking: \" ... this error correction [for CDs]\nthis is in real time! How is this thing",
    "start": "638860",
    "end": "645160"
  },
  {
    "text": "solving sets of matrix equations in real\ntime to make sure I can listen to this",
    "start": "645160",
    "end": "649690"
  },
  {
    "text": "CD without hearing the scratches? Where's\nour supercomputer free with every CD - a",
    "start": "649690",
    "end": "655540"
  },
  {
    "text": "Cray XMP [in those days] - to solve your syndrome\nequations?  Nope! what's the answer? You shake",
    "start": "655540",
    "end": "664069"
  },
  {
    "text": "head and think: \nit's those hardware types! It's custom",
    "start": "664069",
    "end": "667428"
  },
  {
    "text": "hardware! Yes, custom hardware can fairly\neasily attain supercomputer capabilities",
    "start": "667429",
    "end": "675859"
  },
  {
    "text": "so long as it's in a tightly defined\nfield. And it turns out, thank heavens,",
    "start": "675859",
    "end": "680539"
  },
  {
    "text": "that error correction in Reed-Solomon\nschemes lends itself very nicely indeed",
    "start": "680539",
    "end": "686959"
  },
  {
    "text": "to things that computer engineers love\nlike \"shift registers\" [and pipelining]\nand all sorts of",
    "start": "686959",
    "end": "693248"
  },
  {
    "text": "hardware 'specials'. ",
    "start": "693249",
    "end": "698000"
  }
]