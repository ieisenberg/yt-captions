[
  {
    "text": ">> DFB: You said you wanted to talk about Algol\n60?  Because somebody has said",
    "start": "0",
    "end": "5400"
  },
  {
    "text": "it's its 60th anniversary of release? Which is\nright. I mean, it did come out in 1960.",
    "start": "5400",
    "end": "10980"
  },
  {
    "text": "Which is why it was called Algol 60 (!) And\nso yes, it is 60 years old. \n>> Sean: 60 years of Algol60 !",
    "start": "10980",
    "end": "20699"
  },
  {
    "text": ">> DFB: Happy Birthday Algol60! It's another\nof these [languages] that was tremendously",
    "start": "20699",
    "end": "27900"
  },
  {
    "text": "influential at the time and a flag \nthat everybody could rally around. But in",
    "start": "27900",
    "end": "33300"
  },
  {
    "text": "the end it was designed by a committee.\nAnd despite all their attempts to be",
    "start": "33300",
    "end": "40350"
  },
  {
    "text": "reasonable - and not too demanding -\nindividual committee members tried like",
    "start": "40350",
    "end": "45000"
  },
  {
    "text": "heck to get their favourite things in\nthere, regardless of how expensive they",
    "start": "45000",
    "end": "50100"
  },
  {
    "text": "were to implement and sulked mightily, or\ntended to, if they didn't get them in.",
    "start": "50100",
    "end": "54870"
  },
  {
    "text": "I'm going to  start off with an Algol60\nversion of -  we've done a video on it -",
    "start": "54870",
    "end": "60780"
  },
  {
    "text": "Ackermann's function. Now, Algol 60, one of\nits famous selling points was that, at",
    "start": "60780",
    "end": "66000"
  },
  {
    "text": "last, you'll be able to do truly,\ndesperately, recursive things like",
    "start": "66000",
    "end": "70710"
  },
  {
    "text": "Ackermann's function. because this time ...\nAnd there was a big punch-up in the",
    "start": "70710",
    "end": "75180"
  },
  {
    "text": "Committee about it. Basically saying: \"Do we\nwant to do recursion? It's bound to give",
    "start": "75180",
    "end": "78780"
  },
  {
    "text": "us a bad name because it'll be slow ...\" \nAnd everybody said: \"No! we've got to do it,",
    "start": "78780",
    "end": "82259"
  },
  {
    "text": "you know.\" It's no good saying things like\n'factorial' and 'fibonacci' can be done - not",
    "start": "82259",
    "end": "89100"
  },
  {
    "text": "properly recursively - in loops.\nEssentially things like 'ackermann' can't.",
    "start": "89100",
    "end": "92909"
  },
  {
    "text": "So we've got to do it! It's part of our\nduty as to what Algol's going to be.",
    "start": "92909",
    "end": "98210"
  },
  {
    "text": "So, this is the way it came out. And it\nworked just fine. I think I can even",
    "start": "98210",
    "end": "104460"
  },
  {
    "text": "explain it to you using on here [points to iPad] \nthe [highlight] comments thing. OK, so I've just",
    "start": "104460",
    "end": "108960"
  },
  {
    "text": "dragged over the word 'begin'. Later on in\nthe 60s decade when C came upon us they",
    "start": "108960",
    "end": "114720"
  },
  {
    "text": "used { and } to define a block of code.",
    "start": "114720",
    "end": "119909"
  },
  {
    "text": "Algol is much more verbose. It uses 'begin'\nand 'end'.\n>> Sean: Could you nest those? \n>> DFB: Yes in fact",
    "start": "119909",
    "end": "125039"
  },
  {
    "text": "I've got one here, look.\nThe initial 'begin' is up at the top and",
    "start": "125040",
    "end": "129270"
  },
  {
    "text": "this matches with that 'end'. But hidden in\nhere, as part of this program, there is a",
    "start": "129270",
    "end": "136120"
  },
  {
    "text": "'do' loop here. But, to show the extent of\nthe 'do' loop, not curly braces, like in C,",
    "start": "136120",
    "end": "142659"
  },
  {
    "text": "[but rather] 'begin' and 'end.' So here's my 'begin' \nand here's the matching 'end' that goes with it.",
    "start": "142660",
    "end": "147550"
  },
  {
    "text": "Oh it's sort of working! But then what\nhappens after that? Well, let's cut to the",
    "start": "147550",
    "end": "153160"
  },
  {
    "text": "chase and let me tell you. This thing\n[declaration] first of all, defines the 'ackermann'",
    "start": "153160",
    "end": "158350"
  },
  {
    "text": "procedure that is going to get called.\nAnd it does it, obviously, in Algol 60",
    "start": "158350",
    "end": "163560"
  },
  {
    "text": "nomenclature. Part way down the procedure\n[declaration] stops and the bottom half is the main",
    "start": "163560",
    "end": "170110"
  },
  {
    "text": "program. Now here is another contentious\ndiscussion point it's not immediately",
    "start": "170110",
    "end": "177730"
  },
  {
    "text": "obvious, until you look at the structure\nof the program, that down here, where it",
    "start": "177730",
    "end": "182170"
  },
  {
    "text": "says \"integer m n\" -  that is not a part of\nthe Ackermann function. It's part of the",
    "start": "182170",
    "end": "189130"
  },
  {
    "text": "main program so when you move on to C\n- which you can remember is 8 or 9",
    "start": "189130",
    "end": "194230"
  },
  {
    "text": "years downstream of the Algol 60\nCommittee - so many lessons have been",
    "start": "194230",
    "end": "201250"
  },
  {
    "text": "learned. And the feeling was that Algol is\nterrible sometimes for you to have to",
    "start": "201250",
    "end": "206920"
  },
  {
    "text": "mentally parse the program to discover\nwhere the main program begins(!) Wouldn't",
    "start": "206920",
    "end": "212950"
  },
  {
    "text": "it be nice to flag it up with something like \n'main' which was obligatory. Yes - it would.",
    "start": "212950",
    "end": "217750"
  },
  {
    "text": "It's a very good idea. So if we go\nthrough this line by line we've got a",
    "start": "217750",
    "end": "221440"
  },
  {
    "text": "'begin' and then that next line says:\n'integer procedure ackermann (m, n)' ",
    "start": "221440",
    "end": "228700"
  },
  {
    "text": "OK it's a procedure, no abbreviation, no ability\nto use 'proc' or anything like that. It's a",
    "start": "228700",
    "end": "235360"
  },
  {
    "text": "procedure. It delivers an integer. No\nabbreviations allowed. It's got to be",
    "start": "235360",
    "end": "240010"
  },
  {
    "text": "'integer',  not 'int' and what it's saying is:\n\"ackerman takes two arguments m and n but",
    "start": "240010",
    "end": "247239"
  },
  {
    "text": "at the end of the day when it's done its\nwork it delivers back an integer\". That's",
    "start": "247239",
    "end": "252130"
  },
  {
    "text": "why you say it's an 'integer procedure'.\nOK so it's heralding the idea of",
    "start": "252130",
    "end": "258970"
  },
  {
    "text": "what's actually called a 'function', more\nin C i.e. a thing that delivers back a value,",
    "start": "258970",
    "end": "263590"
  },
  {
    "text": "in integer or float or [string of] characters \nor whatever. Here we go then.",
    "start": "263590",
    "end": "269900"
  },
  {
    "text": "Ah! now here comes something that we\nwill absolutely be stumbling over in",
    "start": "269900",
    "end": "276290"
  },
  {
    "text": "future discussion. You had to say that\nthe incoming arguments 'm' and 'n' were",
    "start": "276290",
    "end": "280670"
  },
  {
    "text": "not very clever ones - they were mere\n'value's so you actually have to say not",
    "start": "280670",
    "end": "285170"
  },
  {
    "text": "just [that] 'm' and 'n' are integers but also that 'm'\nand 'n' are passed by value and not by reference -",
    "start": "285170",
    "end": "291680"
  },
  {
    "text": "which was [a subset of] the most general\nmechanism. So all of that top line then",
    "start": "291680",
    "end": "295820"
  },
  {
    "text": "is just the procedure heading. Then\nthere's something which really does put",
    "start": "295820",
    "end": "300410"
  },
  {
    "text": "alarm among you. 'ackermann :=  'if' m = 0\n'then' n plus 1 'else'  if  ....'   whatever.",
    "start": "300410",
    "end": "309500"
  },
  {
    "text": "The rule was in Algol60\nthat you returned the value of a",
    "start": "309500",
    "end": "315380"
  },
  {
    "text": "function - not with the reserved word\n'return', which by the time C came along became",
    "start": "315380",
    "end": "321650"
  },
  {
    "text": "the standard [which] was that you say 'return thing',\nor whatever - ",
    "start": "321650",
    "end": "324680"
  },
  {
    "text": "no, you returned it, in a very logical way,\nby doing a pseudo-assignment to the name",
    "start": "324680",
    "end": "331520"
  },
  {
    "text": "of the procedure. You're saying the\nwhole 'ackermann' effect becomes the",
    "start": "331520",
    "end": "337310"
  },
  {
    "text": "action of this procedure body here (which\nI'm writing out on the right-hand side).",
    "start": "337310",
    "end": "342380"
  },
  {
    "text": "{so] 'ackermann' becomes the truth or falsehood\nof 'if m = 0 then deliver back",
    "start": "342380",
    "end": "348229"
  },
  {
    "text": "n plus 1'. So the value of m + 1,\nwhatever that is - 6 or something - would",
    "start": "348229",
    "end": "352430"
  },
  {
    "text": "get put into -  not a real [i.e. genuine] \nvariable, but into a pseudo-variable that is there to",
    "start": "352430",
    "end": "358580"
  },
  {
    "text": "return just the result of the procedure.\nNow that can be so confusing for beginners! To say that ....",
    "start": "358580",
    "end": "364580"
  },
  {
    "text": ">> Sean: It's confusing for me right now! \n>> DFB: You declare it as a",
    "start": "364580",
    "end": "369978"
  },
  {
    "text": "procedure, but that's what it is. So the\nobvious way to return its results is not",
    "start": "369979",
    "end": "375410"
  },
  {
    "text": "to say 'return n' but to say ackermann \n*becomes* this thing. Making it look",
    "start": "375410",
    "end": "382880"
  },
  {
    "text": "like a pseudo assignment statement. Some\npeople love it; some people hate it. But,",
    "start": "382880",
    "end": "388220"
  },
  {
    "text": "you see, you can have arbitrary\ncomplexity on the right hand side.",
    "start": "388220",
    "end": "391940"
  },
  {
    "text": "It's saying \"Well, if m = 0 then you\ndeliver the result n plus 1 .... \"",
    "start": "391940",
    "end": "395750"
  },
  {
    "text": "And here's the notorious bit - that we've\nalready covered in a video somewhere -",
    "start": "395750",
    "end": "399349"
  },
  {
    "text": "\" ... otherwise if n = 0 then you call up",
    "start": "399349",
    "end": "402340"
  },
  {
    "text": "'ackermann' again. Now, that's your first\nexample of a recursive call. You're",
    "start": "402340",
    "end": "406780"
  },
  {
    "text": "calling up 'ackermann' within 'ackermann'\nbut with arguments 'n - 1'  and '1' ",
    "start": "406780",
    "end": "410740"
  },
  {
    "text": "this time. And if that is not true - \nif it isn't 0, then the most general",
    "start": "410740",
    "end": "416289"
  },
  {
    "text": "recursive call of 'ackermann' is ackermann(n - 1)\nand then the second",
    "start": "416290",
    "end": "422080"
  },
  {
    "text": "'argument from hell' is itself a call\nof 'ackerman' to work out your second",
    "start": "422080",
    "end": "426520"
  },
  {
    "text": "parameter and it's *that* that drives it\nsuper-exponential eventually. But that's",
    "start": "426520",
    "end": "431650"
  },
  {
    "text": "the end of the whole thing! It may not be\nobvious to you but that thing they're",
    "start": "431650",
    "end": "436780"
  },
  {
    "text": "saying in ' ... else ackermann(m, n - 1), the\nnext line says 'integer m,  n'. What's that",
    "start": "436780",
    "end": "443020"
  },
  {
    "text": "got to do with this function? Nothing at\nall! It's part of the main program because,",
    "start": "443020",
    "end": "449500"
  },
  {
    "text": "you see, you have given what would be a\none-liner definition of what you want to",
    "start": "449500",
    "end": "455620"
  },
  {
    "text": "deliver into 'ackermann'. So that, clearly,\nwith its semicolon at the end of it,",
    "start": "455620",
    "end": "460570"
  },
  {
    "text": "is all you need to define what 'ackermann'\nhas to deliver. So, you didn't use a 'begin' and",
    "start": "460570",
    "end": "467470"
  },
  {
    "text": "'end' because you didn't have to. It was an\ninteger procedure - there's the header - and",
    "start": "467470",
    "end": "471520"
  },
  {
    "text": "it was a one-liner pseudo-assignment\nstatement that returned the value. Oh! gosh! I",
    "start": "471520",
    "end": "478660"
  },
  {
    "text": "used to love teaching this to raw beginners! \nSo, you had sort of put this paper [mask]",
    "start": "478660",
    "end": "482710"
  },
  {
    "text": "down to, but not including\n'integer m n', it's the procedure body. But by",
    "start": "482710",
    "end": "488080"
  },
  {
    "text": "the time we come through 'integer m n'\nit's extra declarations in the main",
    "start": "488080",
    "end": "493509"
  },
  {
    "text": "program here! You've already defined the\nprocedure 'ackermann' but now these are",
    "start": "493510",
    "end": "497260"
  },
  {
    "text": "common-or-garden integers were going to\nuse. So, integer variables, basically, 'm' and 'n'.",
    "start": "497260",
    "end": "502150"
  },
  {
    "text": "Fair enough. And then we get on to a\npiece of code that is very very similar",
    "start": "502150",
    "end": "507100"
  },
  {
    "text": "in C, very similar in whatever\nlanguage you do. Basically just putting",
    "start": "507100",
    "end": "512010"
  },
  {
    "text": "two 'do' loops inside each other to\ninvestigate the low-value-parameter end",
    "start": "512010",
    "end": "518320"
  },
  {
    "text": "of the Ackermann function. So, we've got\nhere for 'm' - different but similar you know -",
    "start": "518320",
    "end": "523300"
  },
  {
    "text": "you can think of a 'for' loop in C\nwith its parentheses and semi-colons",
    "start": "523300",
    "end": "527950"
  },
  {
    "text": "inside it, but this is very similar. 'for m := 0'\nthat's the start value",
    "start": "527950",
    "end": "533020"
  },
  {
    "text": "'step 1' step it up in ones as we go\naround the loop until it reaches 3",
    "start": "533020",
    "end": "537070"
  },
  {
    "text": "'do' the following.\nBut then, straightaway nested inside that,",
    "start": "537070",
    "end": "541060"
  },
  {
    "text": "it doesn't just say 'do' it says 'do begin'\nThere's another 'for' loop ! 'for n from 0",
    "start": "541060",
    "end": "547150"
  },
  {
    "text": "step 1 until 6 do' And then here's the\nnext nightmare! Did Algol 60 have",
    "start": "547150",
    "end": "555250"
  },
  {
    "text": "standardly defined input/output?  No! \"It'll be\ntoo complicated and caused too many",
    "start": "555250",
    "end": "560710"
  },
  {
    "text": "fist-fights in the committee\" So, it's\nimplementation-dependent",
    "start": "560710",
    "end": "568030"
  },
  {
    "text": "what your input/output will look like!\nIt's always a mess and it's nothing",
    "start": "568030",
    "end": "572560"
  },
  {
    "text": "to do with us but your programming\nmanual will define for you what the",
    "start": "572560",
    "end": "578500"
  },
  {
    "text": "input/output conventions are for your\ncompilers, running on your computer, at",
    "start": "578500",
    "end": "582490"
  },
  {
    "text": "your university, or whatever. So, I've got\nhere this particular version from",
    "start": "582490",
    "end": "586870"
  },
  {
    "text": "Rosetta Code they've used 'outinteger'\nwhich is as good as anything. So 'outinteger'",
    "start": "586870",
    "end": "591970"
  },
  {
    "text": "and 'outstring',  they're using\nactually here. And the way they're doing",
    "start": "591970",
    "end": "596379"
  },
  {
    "text": "this is just putting out the values for\n'm' and 'n'increasing in fact you know, as",
    "start": "596380",
    "end": "602770"
  },
  {
    "text": "we all know the first \"zeroth\" values are\njust the [integer] numbers themselves, like 1 2",
    "start": "602770",
    "end": "607900"
  },
  {
    "text": "3 4 5 6 7 and so on. So, yes,  you can see\nfrom the printed out numbers there it",
    "start": "607900",
    "end": "612640"
  },
  {
    "text": "works just fine but I think in terms of\nimpenetrable obscurity it is not good.",
    "start": "612640",
    "end": "618940"
  },
  {
    "text": "the worst bit is the fact that you can\ncarry on - after what is obvious at the",
    "start": "618940",
    "end": "627400"
  },
  {
    "text": "end of the 'integer procedure' definition -\nbecause there's a semicolon. There are no",
    "start": "627400",
    "end": "632350"
  },
  {
    "text": "extra 'begin's or 'end's to help you. They're\nnot necessary. I can't quite recall",
    "start": "632350",
    "end": "637420"
  },
  {
    "text": "whether it would have been wrong to put\nthem in but anyway it was his heart was",
    "start": "637420",
    "end": "643690"
  },
  {
    "text": "in the right place but the trouble is ...\nit was a committee and this is what came out of it.",
    "start": "643690",
    "end": "648220"
  },
  {
    "text": ">> Sean: These things you're talking\nabout now, with the benefit of hindsight",
    "start": "648220",
    "end": "651069"
  },
  {
    "text": "and having used C for many years, would\nyou have thought of these things then or",
    "start": "651070",
    "end": "656830"
  },
  {
    "text": "is this stuff that you can just see in hindsight?\n>> DFB: You get a lot of it you know in hindsight.",
    "start": "656830",
    "end": "660250"
  },
  {
    "text": "The thing I think a lot of people\nsaid was:",
    "start": "660250",
    "end": "663670"
  },
  {
    "text": "in the real live engineering and science\nworld you might have some need",
    "start": "663670",
    "end": "670389"
  },
  {
    "text": "for a 'factorial' but you could always\ncalculate it by going around a loop",
    "start": "670390",
    "end": "674050"
  },
  {
    "text": "because it's a primitive recursive\nfunction. And when people said \"But what",
    "start": "674050",
    "end": "678970"
  },
  {
    "text": "do you really need recursion for, that\nwould matter to me?\", the answer is:",
    "start": "678970",
    "end": "684269"
  },
  {
    "text": "\" ... probably nothing\" A lot of people did say,\nand rightly, [that] once recursion becomes",
    "start": "684270",
    "end": "692800"
  },
  {
    "text": "part of the scenery people will work out\nhow to implement it far more efficiently.",
    "start": "692800",
    "end": "697690"
  },
  {
    "text": "And it is actually for some problems a\nvery very elegant way of coping with it.",
    "start": "697690",
    "end": "704650"
  },
  {
    "text": "But you need to be sure that your\nimplementation of recursion has been",
    "start": "704650",
    "end": "708760"
  },
  {
    "text": "done by somebody with at least the\ntalents of Ken Thomson to make sure it",
    "start": "708760",
    "end": "712450"
  },
  {
    "text": "doesn't run hideously, hideously slowly.\nSo there we are.",
    "start": "712450",
    "end": "716770"
  },
  {
    "text": "It works! Algol 60 did the job!\nIt wasn't exactly obvious syntax as a",
    "start": "716770",
    "end": "724900"
  },
  {
    "text": "method for doing it ... you can't even see  \nwhere the main program begins but nevertheless it",
    "start": "724900",
    "end": "728770"
  },
  {
    "text": "did the job. How did things improve and\nget more efficient? By the time C was",
    "start": "728770",
    "end": "734380"
  },
  {
    "text": "developed to fruition, roughly eight to\nten years later, well rather than spend",
    "start": "734380",
    "end": "739030"
  },
  {
    "text": "ages doing that myself I will refer you\nto one of my videos which is about the",
    "start": "739030",
    "end": "743590"
  },
  {
    "text": "Ackermann function. What was it: \n\"The Most Difficult Program to Compute?\"",
    "start": "743590",
    "end": "747430"
  },
  {
    "text": "is what we called it \n>> Sean: Yes, the question mark was important \nas we went on to",
    "start": "747430",
    "end": "751060"
  },
  {
    "text": "find different, [and]  more difficult ones .... \n>> DFB:Oh yes, yes, we discovered it wasn't ....",
    "start": "751060",
    "end": "755410"
  },
  {
    "text": "We discovered \"Busy Beaver\" was far worse, but\nthat's another story.",
    "start": "755410",
    "end": "758139"
  },
  {
    "text": "No in the Ackermann [video] info block I think\nyou will find if you revisit that",
    "start": "758140",
    "end": "763630"
  },
  {
    "text": "video there is a link out there to\neither a package of stuff or to a",
    "start": "763630",
    "end": "768480"
  },
  {
    "text": "listing of the C version of how to do\nthe Ackermann function. Let me say, right here",
    "start": "768480",
    "end": "776920"
  },
  {
    "text": "and now, I did it that way to prove a\npoint. It is very very old-fashioned C.",
    "start": "776920",
    "end": "783190"
  },
  {
    "text": "It is original Kernighan and Ritchie C,\nwhere you specified the type of the",
    "start": "783190",
    "end": "788620"
  },
  {
    "text": "incoming arguments to functions separately",
    "start": "788620",
    "end": "792460"
  },
  {
    "text": "from the procedure-head. You had like a\nlittle separate ... well,  like in Algol 60",
    "start": "792460",
    "end": "797500"
  },
  {
    "text": "you said 'int a, b' inside not up at the\ntop. So, please don't castigate me because",
    "start": "797500",
    "end": "805030"
  },
  {
    "text": "at the time I was interested to see if\nmy original usage of C to show that",
    "start": "805030",
    "end": "809470"
  },
  {
    "text": "Ackermann's function worked, would still\nstand up in a modern compiler and   -",
    "start": "809470",
    "end": "813279"
  },
  {
    "text": "thank you 'gcc'. You did not fake a\n'theological' approach and refuse to",
    "start": "813280",
    "end": "819250"
  },
  {
    "text": "compile me - you just understood it was\nold-fashioned [C] but it was OK and it works.",
    "start": "819250",
    "end": "824770"
  }
]