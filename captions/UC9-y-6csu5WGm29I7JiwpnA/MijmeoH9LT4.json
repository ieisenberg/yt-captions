[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "UTF-8 is perhaps the best hack,",
    "start": "269",
    "end": "4480"
  },
  {
    "text": "the best single thing that's used",
    "start": "4480",
    "end": "8040"
  },
  {
    "text": "that can be written down on the back of a napkin,",
    "start": "8040",
    "end": "10180"
  },
  {
    "text": "and that's how was it was put together.",
    "start": "10180",
    "end": "11580"
  },
  {
    "text": "The first draft of UTF-8 was written on the back of a napkin in a diner",
    "start": "11590",
    "end": "16049"
  },
  {
    "text": "and it's just such an elegant hack",
    "start": "16050",
    "end": "18410"
  },
  {
    "text": "that solved so many problems and I\nabsolutely love it.",
    "start": "18410",
    "end": "21260"
  },
  {
    "start": "21000",
    "end": "519000"
  },
  {
    "text": "Back in the 1960s,",
    "start": "23600",
    "end": "24720"
  },
  {
    "text": "we had teleprinters, we had simple\ndevices where you type a key",
    "start": "24730",
    "end": "28230"
  },
  {
    "text": "and it sends some numbers and the same letter comes out on the other side,",
    "start": "28230",
    "end": "31500"
  },
  {
    "text": "but there needs to be a standard so in\nthe mid-1960s",
    "start": "31500",
    "end": "34649"
  },
  {
    "text": "America, at least, settled on ASCII, which is the American Standard Code for Information Interchange,",
    "start": "34649",
    "end": "40228"
  },
  {
    "text": "and it's a 7-bit binary system,",
    "start": "40230",
    "end": "42410"
  },
  {
    "text": "so each letter you type in",
    "start": "42410",
    "end": "43940"
  },
  {
    "text": "gets converted into 7 binary numbers and sent over the wire.",
    "start": "43940",
    "end": "48280"
  },
  {
    "text": "Now that means you can have numbers from 0 to 127.",
    "start": "48280",
    "end": "52760"
  },
  {
    "text": "They sort of moved the first 32 for control codes and less important stuff for writing,",
    "start": "52760",
    "end": "58339"
  },
  {
    "text": "things like like \"go down a line\" or backspace.",
    "start": "58340",
    "end": "61280"
  },
  {
    "text": "And then they made the rest characters. They added some numbers, some punctuation marks.",
    "start": "61860",
    "end": "65920"
  },
  {
    "text": "They did a really clever thing, which is that they made 'A' 65 which, in binary—",
    "start": "65920",
    "end": "72460"
  },
  {
    "text": "find 1, 2, 4, 8, 16, 32, 64—",
    "start": "72460",
    "end": "78000"
  },
  {
    "text": "in binary, 65 is 1000001,",
    "start": "78000",
    "end": "85220"
  },
  {
    "text": "which means that 'B' is 66, which means you've got 2 in binary just here.",
    "start": "85220",
    "end": "91340"
  },
  {
    "text": "C, 67, 3 in binary.",
    "start": "91340",
    "end": "94799"
  },
  {
    "text": "So you can look at a 7-bit binary character and just knock off the first two digits",
    "start": "94800",
    "end": "99900"
  },
  {
    "text": "and know what its position in the alphabet is.",
    "start": "99900",
    "end": "101760"
  },
  {
    "text": "Even cleverer than that, they started lowercase 32 later,",
    "start": "101760",
    "end": "105800"
  },
  {
    "text": "which means that lowercase 'a' is 97—1100001.",
    "start": "105800",
    "end": "111980"
  },
  {
    "text": "Anything that doesn't fit into that is probably a space, which conveniently will be all zeroes,",
    "start": "111980",
    "end": "116560"
  },
  {
    "text": "or some kind of punctuation mark.",
    "start": "116560",
    "end": "118600"
  },
  {
    "text": "Brilliant, clever, wonderful, great way of doing things,",
    "start": "118600",
    "end": "121900"
  },
  {
    "text": "and that became the standard, at least in the English-speaking world.",
    "start": "121900",
    "end": "125600"
  },
  {
    "text": "As for the rest of the world, a few of them did versions of that,",
    "start": "125600",
    "end": "129840"
  },
  {
    "text": "but you start getting into other alphabets, into languages that don't really use alphabets at all.",
    "start": "129840",
    "end": "134780"
  },
  {
    "text": "They all came up with their own encoding, which is fine.",
    "start": "134780",
    "end": "138700"
  },
  {
    "text": "And then along come computers, and, over time, things change.",
    "start": "138700",
    "end": "142620"
  },
  {
    "text": "We move to 8-bit computers, so we now have a whole extra number at the start just to confuse matters,",
    "start": "142620",
    "end": "148659"
  },
  {
    "text": "which means we can go to 256! We can have twice as many characters!",
    "start": "148660",
    "end": "152800"
  },
  {
    "text": "And, of course, everyone settled on the same standard for this, because that would make perfect s—",
    "start": "152800",
    "end": "158200"
  },
  {
    "text": "No. None of them did.",
    "start": "158200",
    "end": "159060"
  },
  {
    "text": "All the Nordic countries start putting Norwegian characters and Finnish characters in there.",
    "start": "159060",
    "end": "163080"
  },
  {
    "text": "Japan just doesn't use ASCII at all.",
    "start": "163080",
    "end": "166680"
  },
  {
    "text": "Japan goes and creates its own multibyte encoding with more letters and more characters",
    "start": "166680",
    "end": "171900"
  },
  {
    "text": "and more binary numbers going to each individual character.",
    "start": "171900",
    "end": "174439"
  },
  {
    "text": "All of these things are massively incompatible.",
    "start": "174440",
    "end": "177640"
  },
  {
    "text": "Japan actually has three or four different encodings, all of which are completely incompatible with each other.",
    "start": "177640",
    "end": "184680"
  },
  {
    "text": "So you send a document from one old-school Japanese computer to another,",
    "start": "184680",
    "end": "188700"
  },
  {
    "text": "it will come out so garbled that there is even a word in Japanese for \"garbled characters,\"",
    "start": "188700",
    "end": "194099"
  },
  {
    "text": "which is—I'm probably mispronouncing this—but it's \"mojibake.\"",
    "start": "194100",
    "end": "197600"
  },
  {
    "text": "It's a bit of a nightmare, but it's not bad,",
    "start": "197600",
    "end": "199380"
  },
  {
    "text": "because how often does someone in London have to send a document",
    "start": "199380",
    "end": "203340"
  },
  {
    "text": "to a completely incompatible and unknown computer at another company in Japan?",
    "start": "203340",
    "end": "207660"
  },
  {
    "text": "In those days, it's rare. You printed it off and you faxed it.",
    "start": "207660",
    "end": "210960"
  },
  {
    "text": "And then the World Wide Web hit, and we have a problem,",
    "start": "210960",
    "end": "216300"
  },
  {
    "text": "because suddenly documents are being sent from all around the world all the time.",
    "start": "216300",
    "end": "221140"
  },
  {
    "text": "So a thing is set up called the Unicode Consortium.",
    "start": "221140",
    "end": "224280"
  },
  {
    "text": "In what I can only describe as a miracle, over the last couple of decades, they have hammered out a standard.",
    "start": "224280",
    "end": "233240"
  },
  {
    "text": "Unicode now have a list of more than a hundred thousand characters",
    "start": "233240",
    "end": "238660"
  },
  {
    "text": "that covers everything you could possibly want to write in any language—",
    "start": "238660",
    "end": "242460"
  },
  {
    "text": "English alphabet, Cyrillic alphabet, Arabic alphabet, Japanese, Chinese, and Korean characters.",
    "start": "242460",
    "end": "250180"
  },
  {
    "text": "What you have at the end is the Unicode Consortium assigning 100,000+ characters to 100,000 numbers.",
    "start": "250180",
    "end": "257799"
  },
  {
    "text": "They have not chosen binary digits. They have not chosen what they should be represented as.",
    "start": "257800",
    "end": "262340"
  },
  {
    "text": "All they have said is that THAT Arabic character there, that is number 5,700-something,",
    "start": "262340",
    "end": "268699"
  },
  {
    "text": "and this linguistic symbol here, that's 10,000-something.",
    "start": "268700",
    "end": "272840"
  },
  {
    "text": "I have to simplify massively here because there are about,",
    "start": "272840",
    "end": "275460"
  },
  {
    "text": "of course, five or six incompatible ways to do this,",
    "start": "275460",
    "end": "278819"
  },
  {
    "text": "but what the web has more or less settled on is something called \"UTF-8.\"",
    "start": "278820",
    "end": "283360"
  },
  {
    "text": "There are a couple of problems with doing the obvious thing, which is saying,",
    "start": "283360",
    "end": "287599"
  },
  {
    "text": "\"OK. We're going to 100,000.",
    "start": "287600",
    "end": "290080"
  },
  {
    "text": "That's gonna need, what... to be safe, that's gonna need 32 binary digits to encode it.\"",
    "start": "290080",
    "end": "296379"
  },
  {
    "text": "They encoded the English alphabet in exactly the same way as ASCII did. 'A' is still 65.",
    "start": "296380",
    "end": "303520"
  },
  {
    "text": "So if you have just a string of English text, and you're encoding it at 32 bits per character,",
    "start": "303520",
    "end": "309740"
  },
  {
    "text": "you're gonna have about 20-something... 26? Yeah.",
    "start": "309740",
    "end": "315199"
  },
  {
    "text": "26, 27 zeroes and then a few ones for every single character.",
    "start": "315200",
    "end": "320680"
  },
  {
    "text": "That is incredibly wasteful.",
    "start": "320680",
    "end": "322280"
  },
  {
    "text": "Suddenly every English language text file takes four times the space on disk.",
    "start": "322280",
    "end": "327300"
  },
  {
    "text": "So problem 1: you have to get rid of all the zeroes in the English text.",
    "start": "327300",
    "end": "330560"
  },
  {
    "text": "Problem 2: there are lots of old computer systems that interpret 8 zeroes in a row,",
    "start": "330560",
    "end": "337260"
  },
  {
    "text": "a NULL, as \"this is the end of the string of characters.\"",
    "start": "337260",
    "end": "340620"
  },
  {
    "text": "so if you ever send 8 zeroes in a row, they just stop listening.",
    "start": "340620",
    "end": "345240"
  },
  {
    "text": "They assume the string has ended there, and it gets cut off,",
    "start": "345240",
    "end": "348020"
  },
  {
    "text": "so you can't have 8 zeroes in a row anywhere.",
    "start": "348020",
    "end": "351720"
  },
  {
    "text": "'K. Problem number 3: it has to be backwards-compatible.",
    "start": "351720",
    "end": "356440"
  },
  {
    "text": "You have to be able to take this Unicode text and chuck it into something that only understands basic ASCII,",
    "start": "356440",
    "end": "363800"
  },
  {
    "text": "and have it more or less work for English text.",
    "start": "363800",
    "end": "366659"
  },
  {
    "text": "UTF-8 solves all of these problems and it's just a wonderful hack.",
    "start": "366660",
    "end": "372100"
  },
  {
    "text": "It starts by just taking ASCII.",
    "start": "372100",
    "end": "374960"
  },
  {
    "text": "If you have something under 128, that can just be expressed as 7 digits,",
    "start": "374960",
    "end": "380800"
  },
  {
    "text": "you put down a zero, and then you put the same numbers that you would otherwise,",
    "start": "380800",
    "end": "385460"
  },
  {
    "text": "so let's have that 'A' again—there we go!",
    "start": "385460",
    "end": "389819"
  },
  {
    "text": "That's still 'A.' That's still 65. That's still UTF-8-valid, and that's still ASCII-valid. Brilliant.",
    "start": "389820",
    "end": "395380"
  },
  {
    "text": "OK. Now let's say we're going above that.",
    "start": "395380",
    "end": "398100"
  },
  {
    "text": "Now you need something that's gonna work more or less for ASCII, or at least not break things,",
    "start": "398100",
    "end": "403280"
  },
  {
    "text": "but still be understood.",
    "start": "403280",
    "end": "404580"
  },
  {
    "text": "So what you do is you start by writing down \"110.\"",
    "start": "404580",
    "end": "409180"
  },
  {
    "text": "This means this is the start of a new character, and this character is going to be 2 bytes long.",
    "start": "409180",
    "end": "414560"
  },
  {
    "text": "Two ones, two bytes, a byte being 8 characters.",
    "start": "414560",
    "end": "417360"
  },
  {
    "text": "And you say on this one, we're gonna start it with \"10,\" which means this is a continuation,",
    "start": "417360",
    "end": "421379"
  },
  {
    "text": "and at all these blank spaces, of which you have 5 here and 6 here,",
    "start": "421380",
    "end": "425520"
  },
  {
    "text": "you fill in the other numbers,",
    "start": "425520",
    "end": "427919"
  },
  {
    "text": "and then when you calculate it, you just take off those headers,",
    "start": "427920",
    "end": "431060"
  },
  {
    "text": "and it understands just  as being whatever number that turns out to be.",
    "start": "431060",
    "end": "435280"
  },
  {
    "text": "That's probably somewhere in the hundreds.",
    "start": "435280",
    "end": "437880"
  },
  {
    "text": "That'll do you for the first 4,096. What about above that?",
    "start": "437880",
    "end": "442220"
  },
  {
    "text": "Well, above that you go \"1110,\" meaning there are three bytes in this—three ones, three bytes—",
    "start": "442220",
    "end": "448640"
  },
  {
    "text": "with two continuation bytes.",
    "start": "448640",
    "end": "450500"
  },
  {
    "text": "So now you have 1, 2, 3, 4, 10, 16 spaces.",
    "start": "450500",
    "end": "455240"
  },
  {
    "text": "You want to go above that? You can.",
    "start": "455240",
    "end": "456560"
  },
  {
    "text": "This specification goes all the way to \"1111110x\" with this many continuation bytes after it.",
    "start": "456560",
    "end": "466020"
  },
  {
    "text": "It's a neat hack that you can explain on the back of a napkin or a bit of paper.",
    "start": "466020",
    "end": "470000"
  },
  {
    "text": "It's backwards-compatible. It avoids waste. At no point will it ever, ever, ever send 8 zeroes in a row,",
    "start": "470000",
    "end": "477420"
  },
  {
    "text": "and, really, really crucially, the one that made it win over every other system",
    "start": "477420",
    "end": "481960"
  },
  {
    "text": "is that you can move backwards and forwards really easily.",
    "start": "481960",
    "end": "485520"
  },
  {
    "text": "You do not have to have an index of where the character starts.",
    "start": "485520",
    "end": "488180"
  },
  {
    "text": "If you are halfway through a string and you wanna go back one character,",
    "start": "488180",
    "end": "492520"
  },
  {
    "text": "you just look for the previous header.",
    "start": "492520",
    "end": "494940"
  },
  {
    "text": "And that's it, and that works,",
    "start": "494940",
    "end": "496060"
  },
  {
    "text": "and, as of a few years ago, UTF-8 beat out ASCII and everything else as, for the first time,",
    "start": "496060",
    "end": "502419"
  },
  {
    "text": "the dominant character encoding on the web.",
    "start": "502420",
    "end": "505140"
  },
  {
    "text": "We don't have that mojibake that Japanese has.",
    "start": "505140",
    "end": "508900"
  },
  {
    "text": "We have something that nearly works, and that is why it's the most beautiful hack that I can think of",
    "start": "508900",
    "end": "515000"
  },
  {
    "text": "that is used around the world every second of every day.",
    "start": "515000",
    "end": "518000"
  },
  {
    "start": "519000",
    "end": "576000"
  },
  {
    "text": "(BRADY HARAN)\n-We'd like to think Audible.com for their support of this Computerphile video,",
    "start": "520840",
    "end": "525180"
  },
  {
    "text": "and, if you register with Audible and go to audible.com/computerphile,",
    "start": "525180",
    "end": "529880"
  },
  {
    "text": "you can download a free audiobook.",
    "start": "529880",
    "end": "532640"
  },
  {
    "text": "They've got a huge range of books at Audible. I'd like to recommend \"The Last Man On the Moon,\"",
    "start": "532640",
    "end": "538200"
  },
  {
    "text": "which is by Eugene Cernan who is the eleventh of twelve men to step onto the Moon.",
    "start": "538200",
    "end": "544740"
  },
  {
    "text": "but he was the last man to step off the Moon,",
    "start": "544740",
    "end": "547000"
  },
  {
    "text": "so I'm not sure whether or not he is \"the last man on the Moon\" or not.",
    "start": "547000",
    "end": "550560"
  },
  {
    "text": "Sort of depends how you define it.",
    "start": "550560",
    "end": "552500"
  },
  {
    "text": "But his book is really good, and what I really like about it is it's read by Cernan himself,",
    "start": "552500",
    "end": "557660"
  },
  {
    "text": "which I think is pretty cool",
    "start": "557660",
    "end": "558759"
  },
  {
    "text": "Again, thanks to Audible. Go to audible.com/computerphile",
    "start": "558760",
    "end": "563720"
  },
  {
    "text": "and get a free audiobook.",
    "start": "563720",
    "end": "565100"
  },
  {
    "text": "(TOM SCOTT)\n-\"... an old system that hasn't been programmed well will take those nice curly quotes",
    "start": "565100",
    "end": "569759"
  },
  {
    "text": "that Microsoft Word has put into Unicode, and it will look at that and say,",
    "start": "569760",
    "end": "573560"
  },
  {
    "text": "'That is three separate characters...' \"",
    "start": "573560",
    "end": "576640"
  }
]