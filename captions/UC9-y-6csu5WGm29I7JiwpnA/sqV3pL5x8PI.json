[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "The same problem of summing up from one to ten",
    "start": "20",
    "end": "3720"
  },
  {
    "text": "is actually done by what would appear to be magic",
    "start": "4860",
    "end": "6860"
  },
  {
    "text": "by simply going, \"sum... one... ten.\"",
    "start": "7900",
    "end": "11660"
  },
  {
    "text": "Done.",
    "start": "11820",
    "end": "12340"
  },
  {
    "text": "It's not quite as easy as that.",
    "start": "12340",
    "end": "13820"
  },
  {
    "text": "One of the questions that I get asked umm when introduce myself as a computer scientist is",
    "start": "16660",
    "end": "20279"
  },
  {
    "text": "what exactly is I do and the easiest answer for that is, \"programming.\"",
    "start": "20280",
    "end": "24480"
  },
  {
    "text": "There are different styles and",
    "start": "25060",
    "end": "26359"
  },
  {
    "text": "a lot of people might not be aware of them",
    "start": "27420",
    "end": "29420"
  },
  {
    "text": "so, today, I'm just going contrast two of the most popular ones.",
    "start": "29420",
    "end": "35460"
  },
  {
    "text": "Namely, imperative programming and functional programming.",
    "start": "35640",
    "end": "38180"
  },
  {
    "text": "Adding the numbers from one to ten in two languages",
    "start": "38300",
    "end": "40600"
  },
  {
    "text": "Java and Haskell",
    "start": "40780",
    "end": "41820"
  },
  {
    "text": "So, we'll start with Java.",
    "start": "42380",
    "end": "43680"
  },
  {
    "text": "We begin by introducing a variable, \"total\", an integer and saying, \"well, that's zero to start with.\"",
    "start": "45040",
    "end": "49940"
  },
  {
    "text": "because we haven't added anything up yet.",
    "start": "50460",
    "end": "51379"
  },
  {
    "text": "and that's comparatively easy.",
    "start": "51860",
    "end": "53060"
  },
  {
    "text": "and the actual meat of the loop is done by opening up a for loop",
    "start": "53460",
    "end": "56980"
  },
  {
    "text": "where we say, \"for some number int i = 0",
    "start": "57900",
    "end": "62580"
  },
  {
    "text": "and i less than or equal to ten then i plus plus",
    "start": "63500",
    "end": "69100"
  },
  {
    "text": "and what that means here",
    "start": "69100",
    "end": "70799"
  },
  {
    "text": "is we've got this little tracking variable, i, which we initialize to zero",
    "start": "70800",
    "end": "75280"
  },
  {
    "text": "we're going to be repeating this loop as long as it's less than",
    "start": "75700",
    "end": "78500"
  },
  {
    "text": "or equal to 10.",
    "start": "78500",
    "end": "79620"
  },
  {
    "text": "And every time we repeat the loop, we're going to increase \"i\" by 1.",
    "start": "79620",
    "end": "82300"
  },
  {
    "text": "We're adding numbers 1 to 10",
    "start": "82300",
    "end": "83860"
  },
  {
    "text": "so the obvious thing to do",
    "start": "83860",
    "end": "85620"
  },
  {
    "text": "is to say we'll change the variable \"total\" to the result of",
    "start": "85980",
    "end": "89560"
  },
  {
    "text": "\"total\" plus \"i.\"",
    "start": "89560",
    "end": "91240"
  },
  {
    "text": "All we have here, is we've got an appearance of",
    "start": "91800",
    "end": "93800"
  },
  {
    "text": "the \"equals\" sign--some people would look at this and go",
    "start": "94820",
    "end": "96820"
  },
  {
    "text": "\"Right. This is clearly the mathematical definition of 'equals'.\"",
    "start": "97620",
    "end": "99620"
  },
  {
    "text": "\"which means that the left hand is equal to the right hand side.\"",
    "start": "99620",
    "end": "101440"
  },
  {
    "text": "Now, that's not the case in Java and other \"C-like\" languages.",
    "start": "101720",
    "end": "103720"
  },
  {
    "text": "What this single \"equals\" actual means",
    "start": "103720",
    "end": "105400"
  },
  {
    "text": "is, um, an assignment. We're saying that \"total\" is now equal to the previous",
    "start": "105680",
    "end": "111280"
  },
  {
    "text": "value of \"total\" and we've added to it in some way. In this way we've added 1 to it.",
    "start": "111520",
    "end": "115200"
  },
  {
    "text": "equals then we would be checking for\nequality in which case this total equals",
    "start": "116509",
    "end": "120860"
  },
  {
    "text": "total plus what I would be false in all\ncases except for when I was 0 so this",
    "start": "120860",
    "end": "127039"
  },
  {
    "text": "kind of statement that involves\nvariables such as total is",
    "start": "127039",
    "end": "130940"
  },
  {
    "text": "characteristic imperative languages\nwhere the main method of computation is",
    "start": "130940",
    "end": "134990"
  },
  {
    "text": "assignment of values to variables",
    "start": "134990",
    "end": "137180"
  },
  {
    "text": "that's going to say we start with total\nzero its a 50 total equals 0 plus 0 0",
    "start": "137180",
    "end": "144140"
  },
  {
    "text": "then we go back we increase i buy one",
    "start": "144140",
    "end": "147800"
  },
  {
    "text": "so now we say okay total is 0 plus 1\nwhich is one we go back is now to total",
    "start": "147800",
    "end": "154250"
  },
  {
    "text": "is 1 plus 2",
    "start": "154250",
    "end": "155660"
  },
  {
    "text": "it's now three and we repeat once we get\nto the ends then we're done",
    "start": "155660",
    "end": "159980"
  },
  {
    "text": "if we want to call total then it would\njust be the result of going 1 + 2 + 3 +",
    "start": "159980",
    "end": "166280"
  },
  {
    "text": "w and eventually at the end of it will\nhave total if we were to do a calling it",
    "start": "166280",
    "end": "170000"
  },
  {
    "text": "is 55",
    "start": "170000",
    "end": "170990"
  },
  {
    "text": "because that's the sum from one step\nthis is a characteristic of imperative",
    "start": "170990",
    "end": "175400"
  },
  {
    "text": "programming in that we are referring two\nvariables",
    "start": "175400",
    "end": "178140"
  },
  {
    "text": "that are defined globally this is a\nsimple example of adding a couple of",
    "start": "178140",
    "end": "183900"
  },
  {
    "text": "numbers up in an imperative language",
    "start": "183900",
    "end": "185909"
  },
  {
    "text": "namely this is done in java",
    "start": "185910",
    "end": "189720"
  },
  {
    "text": "what I'd like to do now having just\nspoken about the mathematical definition",
    "start": "189720",
    "end": "193709"
  },
  {
    "text": "of equals move on to a another language\nin which to do this something from one",
    "start": "193709",
    "end": "197940"
  },
  {
    "text": "to ten",
    "start": "197940",
    "end": "198450"
  },
  {
    "text": "namely Haskell which is a functional\nprogramming language",
    "start": "198450",
    "end": "201440"
  },
  {
    "start": "201000",
    "end": "608000"
  },
  {
    "text": "so the same problem of something up from\none to ten is actually done by what",
    "start": "201440",
    "end": "207890"
  },
  {
    "text": "would appear to be magic are simply\ngoing",
    "start": "207890",
    "end": "210530"
  },
  {
    "text": "some 110 done",
    "start": "210530",
    "end": "214100"
  },
  {
    "text": "it's not quite as easy as that there is\na library function in the background",
    "start": "214100",
    "end": "217250"
  },
  {
    "text": "that's explaining how some actually\nworks",
    "start": "217250",
    "end": "220310"
  },
  {
    "text": "the first thing that we need to know\nabout the sum function is what it's type",
    "start": "220310",
    "end": "223220"
  },
  {
    "text": "is so we would say that the function sum\nis the function that takes a list of",
    "start": "223220",
    "end": "230750"
  },
  {
    "text": "integers",
    "start": "230750",
    "end": "231440"
  },
  {
    "text": "this is syntax for list and it returns a\nsingle integer",
    "start": "231440",
    "end": "236030"
  },
  {
    "text": "namely if we take a list from one to ten\nwe're going to return some of them and",
    "start": "236030",
    "end": "240920"
  },
  {
    "text": "what we're going to do now is we're\ngoing to define this function in terms",
    "start": "240920",
    "end": "244040"
  },
  {
    "text": "of pattern matching a function can have\nmultiple definitions associated with the",
    "start": "244040",
    "end": "251480"
  },
  {
    "text": "value that's given to it what pattern\nmatching ends is a way of deciding which",
    "start": "251480",
    "end": "257180"
  },
  {
    "text": "definition of a function to apply in a\ngiven case depending on the structure of",
    "start": "257180",
    "end": "261738"
  },
  {
    "text": "the input so let's say that we are\nlooking at a function that takes lists",
    "start": "261739",
    "end": "266480"
  },
  {
    "text": "then that function could be looking at\nan empty list",
    "start": "266480",
    "end": "270919"
  },
  {
    "text": "it could be looking at a list with one\nelement in it or it could be looking at",
    "start": "270919",
    "end": "274220"
  },
  {
    "text": "one with more than that and a simpler\nexample perhaps is a function is defined",
    "start": "274220",
    "end": "279169"
  },
  {
    "text": "over the billions",
    "start": "279169",
    "end": "280400"
  },
  {
    "text": "so a billion value can either be true or\nfalse and a function that's to find out",
    "start": "280400",
    "end": "284900"
  },
  {
    "text": "of that the obvious one will be not so\nnot true is false not false is true and",
    "start": "284900",
    "end": "290120"
  },
  {
    "text": "if we're using pattern matching",
    "start": "290120",
    "end": "291560"
  },
  {
    "text": "I'm going to take my value and say is it\ntrue if the value that I've got is true",
    "start": "291560",
    "end": "295910"
  },
  {
    "text": "then i use the function definition of\ngoing to false if the value that I've",
    "start": "295910",
    "end": "299630"
  },
  {
    "text": "got is false it will say look at this\nfirst line and well if I got true no i",
    "start": "299630",
    "end": "303980"
  },
  {
    "text": "don't i'll go down to the next one and\nalso",
    "start": "303980",
    "end": "307280"
  },
  {
    "text": "okay well I've got a match there when\nyou look at a function your input",
    "start": "307280",
    "end": "310460"
  },
  {
    "text": "you will try and match from the top say\nis that the 1i need no right",
    "start": "310460",
    "end": "315110"
  },
  {
    "text": "look at the next one is that the one I\nneed no is next one and it may be the",
    "start": "315110",
    "end": "320000"
  },
  {
    "text": "case that you don't have all of the\npatterns necessary to fully define your",
    "start": "320000",
    "end": "325730"
  },
  {
    "text": "function in which case a school will\ngive you an error",
    "start": "325730",
    "end": "328080"
  },
  {
    "text": "it's a non-exhaustive patterns so if we\nhave this sum of a single number",
    "start": "328080",
    "end": "334978"
  },
  {
    "text": "this is a list of one element we say\nthat the results of the sum of one",
    "start": "334979",
    "end": "338550"
  },
  {
    "text": "number is just that one number and if we\nhave a list of more than one number then",
    "start": "338550",
    "end": "344069"
  },
  {
    "text": "we would write it like this",
    "start": "344069",
    "end": "345569"
  },
  {
    "text": "some and ends this is just shorthand for\nsaying that the element that's at the",
    "start": "345569",
    "end": "349740"
  },
  {
    "text": "front of the list we call n all the\nother elements are called ends and we",
    "start": "349740",
    "end": "354000"
  },
  {
    "text": "were just define that as n plus some\nends so this function sum is defined",
    "start": "354000",
    "end": "360330"
  },
  {
    "text": "recursively that is to say it's defined\nin terms of itself",
    "start": "360330",
    "end": "363240"
  },
  {
    "text": "what I might like to do for some people\naren't familiar with functional",
    "start": "363240",
    "end": "365430"
  },
  {
    "text": "programming is going through a very\nquick example of how the sum function",
    "start": "365430",
    "end": "367949"
  },
  {
    "text": "works some of 452",
    "start": "367949",
    "end": "372690"
  },
  {
    "text": "so we can refer to this function here\nand throughout and see how this is",
    "start": "373229",
    "end": "377580"
  },
  {
    "text": "equivalent to the java representation\nthat we've got over here",
    "start": "377580",
    "end": "380969"
  },
  {
    "text": "so what pattern matching involves we\nlook down and say are we looking at a",
    "start": "380969",
    "end": "385139"
  },
  {
    "text": "single list",
    "start": "385139",
    "end": "386370"
  },
  {
    "text": "no we're not so we can move down to the\nnext pattern and we say okay",
    "start": "386370",
    "end": "390120"
  },
  {
    "text": "in this instance this for is the end of\nthis 52 is the ends so this is defined",
    "start": "390120",
    "end": "397289"
  },
  {
    "text": "to be 4 plus the son of 52 grand next\nstep we're going again",
    "start": "397289",
    "end": "407129"
  },
  {
    "text": "summers are defined in terms of itself\nwe haven't gotten down to the base value",
    "start": "407129",
    "end": "410339"
  },
  {
    "text": "yet so we're going to have to carry on",
    "start": "410339",
    "end": "412229"
  },
  {
    "text": "so we do so by saying okay so what you\nmean by the base for them",
    "start": "412229",
    "end": "416580"
  },
  {
    "text": "ok so functional programming the main\nmethod of computation for that is",
    "start": "416580",
    "end": "421948"
  },
  {
    "text": "applying arguments to functions as\ncompared with Java but it's assigning",
    "start": "421949",
    "end": "426120"
  },
  {
    "text": "values to variables by here when I say\nwe've reached a value",
    "start": "426120",
    "end": "429180"
  },
  {
    "text": "I mean that we've evaluated a singleton\nand returned and so to carry on with",
    "start": "429930",
    "end": "434819"
  },
  {
    "text": "this evaluation hear what I want to do\nis to say okay that's some five plus sum",
    "start": "434819",
    "end": "442919"
  },
  {
    "text": "of two because in this instance here\nthis was the end and this was the ends",
    "start": "442919",
    "end": "448979"
  },
  {
    "text": "and now I carry on and I say oh well if\nI'm going to be corrected going to",
    "start": "448979",
    "end": "453719"
  },
  {
    "text": "bracket that and say four plus five plus\nnow i can look and say",
    "start": "453719",
    "end": "459149"
  },
  {
    "text": "pattern matching start from the top have\nI got a single to list yes I do",
    "start": "459660",
    "end": "463560"
  },
  {
    "text": "so what am I going to return just that\nnumber two",
    "start": "463560",
    "end": "466620"
  },
  {
    "text": "so now I can start boiling it down so\nthat's 4 plus 7 equals 11",
    "start": "467190",
    "end": "474660"
  },
  {
    "text": "so wyd gone through here is just a quick\nexample of how a functional programming",
    "start": "474660",
    "end": "478860"
  },
  {
    "text": "would take the approach to some function\ndefining what the some actually does as",
    "start": "478860",
    "end": "486539"
  },
  {
    "text": "opposed to looking down and doing it in\nterms of variables saying will track",
    "start": "486540",
    "end": "491160"
  },
  {
    "text": "this and add it to this and eventually\nthe result will fall outfit",
    "start": "491160",
    "end": "495570"
  },
  {
    "text": "it's it's probably worth saying though\nthat this isn't how some is defined in",
    "start": "495570",
    "end": "499800"
  },
  {
    "text": "my Haskell high bring it is actually\ndefined as some fold l + 0 but that is",
    "start": "499800",
    "end": "508889"
  },
  {
    "text": "dark out that I don't want to get into\nit",
    "start": "508890",
    "end": "511680"
  },
  {
    "text": "this video so one particularly important\nthing to take away here given that i've",
    "start": "511680",
    "end": "516180"
  },
  {
    "text": "been contrasting these two is that in\nthis example here where I've been",
    "start": "516180",
    "end": "519870"
  },
  {
    "text": "something one to ten in java",
    "start": "519870",
    "end": "521880"
  },
  {
    "text": "this is revolved somewhat around this\nvariable total which has been evolving",
    "start": "521880",
    "end": "526470"
  },
  {
    "text": "as the for loop progresses",
    "start": "526470",
    "end": "528600"
  },
  {
    "text": "I've been updating this total variable\nand increasing it to reflect a new value",
    "start": "528600",
    "end": "533880"
  },
  {
    "text": "until I get to the end of the for loop",
    "start": "533880",
    "end": "535860"
  },
  {
    "text": "so this is characteristic of imperative\nprogramming languages",
    "start": "535860",
    "end": "539370"
  },
  {
    "text": "the fact that i have a external global\nvariable that i can update a will",
    "start": "539370",
    "end": "543150"
  },
  {
    "text": "whereas in functional programming and\nhigh school there is no state externally",
    "start": "543150",
    "end": "547860"
  },
  {
    "text": "I'm not calling anything from outside\nthis sum function this sum from 1 to 10",
    "start": "547860",
    "end": "553110"
  },
  {
    "text": "is defined entirely in terms of itself\nthere is no reference to a total or",
    "start": "553110",
    "end": "557850"
  },
  {
    "text": "something that's not explicitly\nreachable from inside this function body",
    "start": "557850",
    "end": "561600"
  },
  {
    "text": "and that's because functional\nprogramming languages or purely",
    "start": "561600",
    "end": "565560"
  },
  {
    "text": "functional programming languages don't\nallow for side effects and a particular",
    "start": "565560",
    "end": "568800"
  },
  {
    "text": "example of a side effect is a mutable\nstate swear by mutable",
    "start": "568800",
    "end": "572610"
  },
  {
    "text": "I mean it can mutate you can update it\nso it can change from one value to",
    "start": "572610",
    "end": "576480"
  },
  {
    "text": "another as a program progresses",
    "start": "576480",
    "end": "578639"
  },
  {
    "text": "it's worth saying that these are both\nhigh level instances of languages and",
    "start": "578640",
    "end": "583050"
  },
  {
    "text": "particularly simple instances of\nfragments from these high-level",
    "start": "583050",
    "end": "586769"
  },
  {
    "text": "languages",
    "start": "586770",
    "end": "587760"
  },
  {
    "text": "these do look quite different in the way\nthat they approach things but they will",
    "start": "587760",
    "end": "592080"
  },
  {
    "text": "be boiled down",
    "start": "592080",
    "end": "593020"
  },
  {
    "text": "to machine code and very similar machine\ngo to that given that it does something",
    "start": "593020",
    "end": "596530"
  },
  {
    "text": "quite simple and in effectively the same\nway it's something one to ten it's not",
    "start": "596530",
    "end": "601270"
  },
  {
    "text": "something that can be done very very\ncomplicated ways by different compilers",
    "start": "601270",
    "end": "607780"
  },
  {
    "text": "what if the university is just a\ncomputer simulation",
    "start": "607780",
    "end": "612430"
  },
  {
    "start": "608000",
    "end": "643000"
  },
  {
    "text": "how would we know what sort of things\nwhen we expect to see",
    "start": "613180",
    "end": "616420"
  },
  {
    "text": "could we have our tab could we ever be\nable to work out that work",
    "start": "616930",
    "end": "620649"
  },
  {
    "text": "you know living in proud of a simulation\nof words and being pivoted down putting",
    "start": "620650",
    "end": "625210"
  },
  {
    "text": "all the elements lesson on one side and\nthen Christ on the other side",
    "start": "625210",
    "end": "628690"
  },
  {
    "text": "I mean it that does not get any to\nsomething like side so you can see it's",
    "start": "628690",
    "end": "632920"
  },
  {
    "text": "kind of it's done all the left hand side\nand I start doing the right hand side so",
    "start": "632920",
    "end": "636940"
  },
  {
    "text": "the paper it does all the left hand side",
    "start": "636940",
    "end": "639010"
  },
  {
    "text": "it's another pivot keeps doing this this\nanimal until it's sorted",
    "start": "639010",
    "end": "642670"
  }
]