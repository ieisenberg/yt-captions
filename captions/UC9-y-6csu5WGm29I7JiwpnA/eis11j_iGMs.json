[
  {
    "text": "Today we're going to talk about one of\nmy favorite topics in Computer Science,",
    "start": "0",
    "end": "3510"
  },
  {
    "text": "which is the Lambda Calculus. And in\nparticular, we're going to talk about",
    "start": "3510",
    "end": "7799"
  },
  {
    "text": "three things: we're going to think what\nactually is it, why is it useful, and",
    "start": "7799",
    "end": "12750"
  },
  {
    "text": "where did it actually come from? So\nwe're going to start with the last",
    "start": "12750",
    "end": "17970"
  },
  {
    "text": "question here - where did it actually come\nfrom?  This is Alonzo Church, who was",
    "start": "17970",
    "end": "27060"
  },
  {
    "text": "a mathematician at Princeton University\nin the United States, and he",
    "start": "27060",
    "end": "31439"
  },
  {
    "text": "was the person who invented the Lambda\nCalculus. And what he was interested in",
    "start": "31439",
    "end": "36120"
  },
  {
    "text": "is what is the notion of a function from\na computational perspective. And his",
    "start": "36120",
    "end": "42210"
  },
  {
    "text": "answer to this question is what we now\nknow as the Lambda Calculus. And there's",
    "start": "42210",
    "end": "47610"
  },
  {
    "text": "an interesting piece of history here,\nwhich many people don't know.",
    "start": "47610",
    "end": "51149"
  },
  {
    "text": "So, it turns out that Alonzo Church was\nthe PhD supervisor of someone very",
    "start": "51149",
    "end": "55530"
  },
  {
    "text": "famous in computer science -- Alan\nTuring.  And of course Alan Turing,",
    "start": "55530",
    "end": "59399"
  },
  {
    "text": "amongst many other things which he did,\nhe invented Turing machines -- which",
    "start": "59399",
    "end": "63628"
  },
  {
    "text": "Computerphile has done a number of videos\non -- and Turing machines capture a basic",
    "start": "63629",
    "end": "68280"
  },
  {
    "text": "state-based model of computation.  It's\ninteresting that his PhD supervisor,",
    "start": "68280",
    "end": "72479"
  },
  {
    "text": "Alonzo Church, he captured a basic\nfunctional notion of computation with",
    "start": "72479",
    "end": "77700"
  },
  {
    "text": "his Lambda Calculus. And it turns out\nthat these two, quite different notions,",
    "start": "77700",
    "end": "82140"
  },
  {
    "text": "one functional and one state-based, turn\nout to be equivalent -- and this is what's",
    "start": "82140",
    "end": "86580"
  },
  {
    "text": "called the Church-Turing hypothesis, or \npart of the Church-Turing hypothesis.",
    "start": "86580",
    "end": "90869"
  },
  {
    "text": "So for Church, a function was a black box,\nbut you're not allowed to look inside.",
    "start": "90869",
    "end": "95189"
  },
  {
    "text": "And what it does is it takes some input, so\nmaybe it takes a number like x, and it's",
    "start": "95189",
    "end": "101579"
  },
  {
    "text": "going to process it in some way, and it's\ngoing to produce an output. So maybe it",
    "start": "101579",
    "end": "106320"
  },
  {
    "text": "produces the output x + 1. So this would\nbe a function that takes a single",
    "start": "106320",
    "end": "111540"
  },
  {
    "text": "input, a number called x, processes in\nsome way, and then produces a single",
    "start": "111540",
    "end": "116250"
  },
  {
    "text": "output, which is the number x + 1.\nAnd we could have a slightly more",
    "start": "116250",
    "end": "120840"
  },
  {
    "text": "interesting example. Maybe we\nhave a box with two inputs, x",
    "start": "120840",
    "end": "125469"
  },
  {
    "text": "and y, and we process them in some way,\nand maybe we produce their sum as the",
    "start": "125470",
    "end": "130990"
  },
  {
    "text": "output. So this would be a function which\ntakes two inputs, x and y, processes",
    "start": "130990",
    "end": "135430"
  },
  {
    "text": "them in some way, and then produces their\nsum, x + y. And there's two important",
    "start": "135430",
    "end": "141310"
  },
  {
    "text": "things about functions in this sense. The\nfirst is that they're black boxes; you're",
    "start": "141310",
    "end": "145180"
  },
  {
    "text": "not allowed to look inside, and you can't\nsee the mechanics of what's going on",
    "start": "145180",
    "end": "148659"
  },
  {
    "text": "inside that box, all you can do it put\nsomething in and observe what comes out",
    "start": "148660",
    "end": "152500"
  },
  {
    "text": "the other side. And the second important\nthing is that these functions are pure,",
    "start": "152500",
    "end": "156370"
  },
  {
    "text": "they have no internal state; so all that\nhappens when you map x across to x + 1,",
    "start": "156370",
    "end": "161830"
  },
  {
    "text": "is the magic goes on inside the box, and\nthere's no internal state, there's no",
    "start": "161830",
    "end": "166090"
  },
  {
    "text": "hidden information that we can use. And\nthis is quite different from the notion of",
    "start": "166090",
    "end": "169900"
  },
  {
    "text": "computation that Alan Turing was interested\nin with his Turing machines -- he had",
    "start": "169900",
    "end": "174310"
  },
  {
    "text": "internal state -- there's no internal state,\nthese are pure mathematical functions. Now",
    "start": "174310",
    "end": "179680"
  },
  {
    "text": "we can think how do you actually define\nfunctions in the Lambda Calculus. And",
    "start": "179680",
    "end": "183879"
  },
  {
    "text": "there is a very, very simple syntax for\nthis, which I'll introduce to you now. So",
    "start": "183880",
    "end": "187930"
  },
  {
    "text": "let's think about the increment function\nin the Lambda Calculus. What you do is",
    "start": "187930",
    "end": "191829"
  },
  {
    "text": "you write down a lambda symbol -- so this\nis the Greek lower-case letter lambda, and",
    "start": "191830",
    "end": "195880"
  },
  {
    "text": "that says we're introducing a function\nat this point. And then you just write",
    "start": "195880",
    "end": "199090"
  },
  {
    "text": "down the name of the input, so that was x.\nAnd then you have a dot, and then",
    "start": "199090",
    "end": "203709"
  },
  {
    "text": "you say how the output is calculated in\nterms of the input, that's x + 1. So we",
    "start": "203709",
    "end": "209980"
  },
  {
    "text": "could do the same with addition, you just\nneed two lambdas, and write lambda x,",
    "start": "209980",
    "end": "213610"
  },
  {
    "text": "dot, lambda y, dot, x + y. So this is the\nfunction that takes two inputs, x",
    "start": "213610",
    "end": "220269"
  },
  {
    "text": "and y, and then delivers the result x + y.\nAnd this is written down formally in",
    "start": "220269",
    "end": "225819"
  },
  {
    "text": "Church's Lambda Calculus exactly like\nthis. So, when you've got a function,",
    "start": "225820",
    "end": "229989"
  },
  {
    "text": "what can you do with it? Well, all you can\ndo is give it some input, let it do its",
    "start": "229989",
    "end": "234850"
  },
  {
    "text": "thing, and it will give you some output.\nSo let's have a simple example of this.",
    "start": "234850",
    "end": "238510"
  },
  {
    "text": "If we take a function like increment,\nwhich was lambda x, x + 1, and we",
    "start": "238510",
    "end": "244510"
  },
  {
    "text": "apply it to a number like 5, what actually\nhappens? It's a basic process of",
    "start": "244510",
    "end": "249280"
  },
  {
    "text": "substitution; we're essentially substituting\nthe number 5 here into the body of",
    "start": "249280",
    "end": "255069"
  },
  {
    "text": "this lambda expression and then x\nbecomes 5, so we get 5 + 1,",
    "start": "255069",
    "end": "258910"
  },
  {
    "text": "and then we get the result 6 on the\nother side. And this is basically all",
    "start": "258910",
    "end": "262900"
  },
  {
    "text": "there is to the Lambda Calculus. It's\nonly got three things: it's got variables,",
    "start": "262900",
    "end": "266500"
  },
  {
    "text": "like x, y and z; and it's got a way of\nbuilding functions -- this lambda notation;",
    "start": "266500",
    "end": "271330"
  },
  {
    "text": "and it's got a way of applying functions.\nThis is the only three things that you",
    "start": "271330",
    "end": "275770"
  },
  {
    "text": "have in the setting.  What is\nactually the point of the Lambda ",
    "start": "275770",
    "end": "279220"
  },
  {
    "text": "Calculus? We've introduced this very\nsimple notation, why should you be",
    "start": "279220",
    "end": "282190"
  },
  {
    "text": "interested in learning about it? I think\nthere's three answers which I would give",
    "start": "282190",
    "end": "286090"
  },
  {
    "text": "to this. The first point I'd make is that\nthe Lambda Calculus can encode any",
    "start": "286090",
    "end": "290110"
  },
  {
    "text": "computation. If you write a program in\nany programming language, which has ever",
    "start": "290110",
    "end": "294460"
  },
  {
    "text": "been invented, or ever will be invented,\nor really any sequential programming",
    "start": "294460",
    "end": "298210"
  },
  {
    "text": "language, it can in some way be encoded\nin the Lambda Calculus. And of course it",
    "start": "298210",
    "end": "302410"
  },
  {
    "text": "may be extremely inefficient when you do\nthat, but that's not the point -- this is a",
    "start": "302410",
    "end": "306040"
  },
  {
    "text": "basic idea of computation, and we want to\nthink how many and what kind of programs",
    "start": "306040",
    "end": "310480"
  },
  {
    "text": "can we encode this, and actually you can\nencode anything. And this is really the",
    "start": "310480",
    "end": "314470"
  },
  {
    "text": "kind of Church-Turing hypothesis which\nI mentioned. Alan Turing, you can encode",
    "start": "314470",
    "end": "319540"
  },
  {
    "text": "anything in his Turing machines, and in\nChurch's Lambda Calculus, you can encode",
    "start": "319540",
    "end": "324130"
  },
  {
    "text": "anything.  And actually these two systems\nare formally equivalent -- any Turing",
    "start": "324130",
    "end": "327370"
  },
  {
    "text": "machine program can be translated into an\nequivalent Lambda Calculus program, and",
    "start": "327370",
    "end": "331300"
  },
  {
    "text": "vice versa.  They are\nformally equivalent. The",
    "start": "331300",
    "end": "333729"
  },
  {
    "text": "second point I would make is that Lambda\nCalculus can also be regarded as the",
    "start": "333730",
    "end": "338260"
  },
  {
    "text": "basis for functional programming\nlanguages like Haskell. So these are",
    "start": "338260",
    "end": "341560"
  },
  {
    "text": "becoming increasingly popular these days.\nAnd actually a very sophisticated",
    "start": "341560",
    "end": "345070"
  },
  {
    "text": "language like Haskell is compiled down to\na very small core language, which is",
    "start": "345070",
    "end": "349810"
  },
  {
    "text": "essentially a glorified form of Lambda\nCalculus. So if you're interested in",
    "start": "349810",
    "end": "353560"
  },
  {
    "text": "functional programming languages\nlike Haskell, or the ML family,",
    "start": "353560",
    "end": "356590"
  },
  {
    "text": "these are all fundamentally based on the\nLambda Calculus -- it's just kind of a ",
    "start": "356590",
    "end": "359680"
  },
  {
    "text": "glorified syntax on top of that. The\nthird point which I would make, is that",
    "start": "359680",
    "end": "364690"
  },
  {
    "text": "the Lambda Calculus is actually now\npresent in most major programming",
    "start": "364690",
    "end": "369100"
  },
  {
    "text": "languages. So this wasn't the case 10 or 15\nyears ago, but it is the case today. So if",
    "start": "369100",
    "end": "373810"
  },
  {
    "text": "you look at languages like Java, like\nC#, even Visual Basic, F#, and so",
    "start": "373810",
    "end": "379510"
  },
  {
    "text": "on, all of these languages now encode\nLambda Calculus, or include Lambda",
    "start": "379510",
    "end": "383500"
  },
  {
    "text": "Calculus, as a fundamental component. So\nevery computer scientist today needs to",
    "start": "383500",
    "end": "388090"
  },
  {
    "text": "know about Lambda Calculus. What\nI'd like to end up with is",
    "start": "388090",
    "end": "392449"
  },
  {
    "text": "a couple of little examples of what you\ncan do with it. So, the Lambda Calculus has",
    "start": "392449",
    "end": "396229"
  },
  {
    "text": "basically got nothing in it: it's got variables,\nit's got a way of building functions, and it's",
    "start": "396229",
    "end": "400819"
  },
  {
    "text": "got a way of applying functions. It\ndoesn't have any built-in data types",
    "start": "400819",
    "end": "403699"
  },
  {
    "text": "like numbers, logical values, recursion\nand things like that. So if you want to",
    "start": "403699",
    "end": "408080"
  },
  {
    "text": "do these things in the Lambda Calculus,\nyou need to encode them. So I'll end",
    "start": "408080",
    "end": "411710"
  },
  {
    "text": "up showing you a simple encoding, and the\nencoding which I'm going to show you is",
    "start": "411710",
    "end": "415999"
  },
  {
    "text": "the logical values TRUE and FALSE. And\nthe key to this is to think what do you",
    "start": "415999",
    "end": "421279"
  },
  {
    "text": "do with logical values in a programming\nlanguage? And the basic observation is",
    "start": "421279",
    "end": "425900"
  },
  {
    "text": "that you use them to make a choice\nbetween doing two things -- you say if",
    "start": "425900",
    "end": "429770"
  },
  {
    "text": "something is TRUE do one thing, if\nsomething is FALSE do another thing, and",
    "start": "429770",
    "end": "434659"
  },
  {
    "text": "we're going to use this idea of making a\nchoice between two things to actually",
    "start": "434659",
    "end": "438080"
  },
  {
    "text": "encode TRUE and FALSE. So the trick is\nfor TRUE, you write down this lambda",
    "start": "438080",
    "end": "444228"
  },
  {
    "text": "expression. So what it does is it takes\ntwo things, x and y, and then it chooses",
    "start": "444229",
    "end": "449120"
  },
  {
    "text": "the first. And FALSE does the opposite.\nIt's going to take two things, and it's",
    "start": "449120",
    "end": "453589"
  },
  {
    "text": "going to choose the second. So we've got\ntwo lambda expressions here, both of",
    "start": "453589",
    "end": "457430"
  },
  {
    "text": "which take two inputs, x and y, and one\nchooses the first one, x, and one chooses the",
    "start": "457430",
    "end": "463159"
  },
  {
    "text": "second one, y.  So fair enough,\nwhat can we actually",
    "start": "463159",
    "end": "465589"
  },
  {
    "text": "do with this? Well, let's think how we\ncould define a little logical operator.",
    "start": "465589",
    "end": "470839"
  },
  {
    "text": "So, NOT is the most simple logical\noperator which I could think of. It's going",
    "start": "470839",
    "end": "474439"
  },
  {
    "text": "to flip TRUE to FALSE, and FALSE to TRUE.\nIt's logical negation. Based upon this",
    "start": "474439",
    "end": "479479"
  },
  {
    "text": "encoding, how could I actually define the\nNOT operator or the NOT function. It's",
    "start": "479479",
    "end": "484669"
  },
  {
    "text": "very easy to do. I will take in a logical\nvalue, or a Boolean as it normally called",
    "start": "484669",
    "end": "490310"
  },
  {
    "text": "in Computer Science, after George Boole, who\nfirst studied a kind of formal logic. So",
    "start": "490310",
    "end": "494779"
  },
  {
    "text": "we take a Boolean, which will be one of TRUE\nor FALSE, and here's what we do. We apply",
    "start": "494779",
    "end": "499430"
  },
  {
    "text": "it to FALSE, and we apply it TRUE. And I\nclaim that this is a valid definition",
    "start": "499430",
    "end": "504499"
  },
  {
    "text": "for a NOT function. But I can very\neasily convince you that it's the case,",
    "start": "504499",
    "end": "508669"
  },
  {
    "text": "because I can do a little calculation.\nSo, let's check, if we apply NOT to TRUE,",
    "start": "508669",
    "end": "513260"
  },
  {
    "text": "that we actually get FALSE. And in just a\nfew steps, using the Lambda Calculus magic,",
    "start": "513260",
    "end": "517578"
  },
  {
    "text": "we'll find that this actually works\nout. So what can we do here?",
    "start": "517579",
    "end": "520698"
  },
  {
    "text": "Well the only thing we\ncan do is start to expand",
    "start": "520699",
    "end": "523319"
  },
  {
    "text": "definitions. So, we know what the definition\nof NOT is. It was lambda b, b applied to",
    "start": "523320",
    "end": "528690"
  },
  {
    "text": "FALSE and TRUE, and then we just copy\ndown the TRUE. So all I've done in the",
    "start": "528690",
    "end": "532890"
  },
  {
    "text": "first step here, is I've expanded my\ndefinition of NOT -- NOT was defined to be",
    "start": "532890",
    "end": "537060"
  },
  {
    "text": "this Lambda Calculus expression here. Now,\nI've got a function, which is this thing,",
    "start": "537060",
    "end": "541410"
  },
  {
    "text": "and it's applied to an input,\nso i can just apply it.",
    "start": "541410",
    "end": "545190"
  },
  {
    "text": "OK, and the function says if I take in a b,\nI just apply that b to FALSE and TRUE.",
    "start": "545190",
    "end": "549780"
  },
  {
    "text": "So, the thing I'm applying it to is TRUE\nhere, so i just do the little",
    "start": "549780",
    "end": "553200"
  },
  {
    "text": "substitution. Rather than b, I write TRUE,\nand then I copy down the FALSE, and copy",
    "start": "553200",
    "end": "557730"
  },
  {
    "text": "down the TRUE, and I get down to here.\nAnd at this point, you might quite",
    "start": "557730",
    "end": "561000"
  },
  {
    "text": "rightly be thinking this\nlooks like complete rubbish.",
    "start": "561000",
    "end": "563280"
  },
  {
    "text": "I've just written TRUE FALSE TRUE.\nWhat does that mean? It means absolutely",
    "start": "563280",
    "end": "566100"
  },
  {
    "text": "nothing. But it means something in the\nLambda Calculus, because we continue to",
    "start": "566100",
    "end": "569490"
  },
  {
    "text": "expand. So, what we can do now, is expand\nthe definition of TRUE. We said that TRUE",
    "start": "569490",
    "end": "574680"
  },
  {
    "text": "takes two things, and chooses the first one.\nSo, let's expand it out. So, TRUE is",
    "start": "574680",
    "end": "579870"
  },
  {
    "text": "lambda x, lambda y, x. So, it chooses the\nfirst thing of two things, and then we just",
    "start": "579870",
    "end": "585210"
  },
  {
    "text": "copy down the two inputs, FALSE AND TRUE.\nAnd you can see what's going to",
    "start": "585210",
    "end": "588750"
  },
  {
    "text": "happen now -- we've got a function here\nwhich takes two things and chooses the first",
    "start": "588750",
    "end": "592290"
  },
  {
    "text": "thing. Here the first thing is FALSE, so\nwhen we apply the function, we just get",
    "start": "592290",
    "end": "596370"
  },
  {
    "text": "back FALSE.  So what you see\nhas happened here, in just",
    "start": "596370",
    "end": "599580"
  },
  {
    "text": "a few steps, we've shown how using this\nencoding of TRUE and FALSE, and not, we",
    "start": "599580",
    "end": "604950"
  },
  {
    "text": "can actually get the desired behavior.\nAnd it's very easy to check for yourself,",
    "start": "604950",
    "end": "608250"
  },
  {
    "text": "if you apply NOT to FALSE, you'll get TRUE.\nAnd I'd like to set you a little kind of",
    "start": "608250",
    "end": "614340"
  },
  {
    "text": "puzzle at this point -- think how\nyou could define logical AND,",
    "start": "614340",
    "end": "617640"
  },
  {
    "text": "or logical OR, in this style as well.\nAnd I'm interested to see what kind",
    "start": "617640",
    "end": "622140"
  },
  {
    "text": "of definitions people come up with in\nthe comments. So, the very last thing I'd",
    "start": "622140",
    "end": "627510"
  },
  {
    "text": "like to show you is this lambda\nexpression here, which is a very famous",
    "start": "627510",
    "end": "632550"
  },
  {
    "text": "Lambda Calculus expression called the Y\ncombinator, or the Y operator. And actually,",
    "start": "632550",
    "end": "638010"
  },
  {
    "text": "this is the key to doing recursion in\nthe Lambda Calculus. So, as I mentioned,",
    "start": "638010",
    "end": "642180"
  },
  {
    "text": "Lambda Calculus has basically nothing in\nit, or it's only got three things in it:",
    "start": "642180",
    "end": "645720"
  },
  {
    "text": "variables x, y and z, and so on; a way of\nbuilding functions; and a way of applying",
    "start": "645720",
    "end": "650160"
  },
  {
    "text": "functions. It's got no other control\nstructures, no other data types, no anything.",
    "start": "650160",
    "end": "654839"
  },
  {
    "text": "So, if you want to do recursion,\nwhich is the basic mechanism for",
    "start": "654840",
    "end": "658410"
  },
  {
    "text": "defining things in terms of themselves --\nagain Computerphile's had videos on this --",
    "start": "658410",
    "end": "662129"
  },
  {
    "text": "you need to encode it. And it turns out\nthat this expression here is the key to",
    "start": "662130",
    "end": "666690"
  },
  {
    "text": "encoding recursion in the Lambda\nCalculus. And this expression was",
    "start": "666690",
    "end": "670350"
  },
  {
    "text": "invented by someone called Haskell Curry,\nand this is the Haskell that gives",
    "start": "670350",
    "end": "673800"
  },
  {
    "text": "his name to the Haskell programming\nlanguage. And he was a PhD student of",
    "start": "673800",
    "end": "677730"
  },
  {
    "text": "David Hilbert, who's a very famous\nmathematician. The last observation",
    "start": "677730",
    "end": "681870"
  },
  {
    "text": "I'd like to leave you with here, is\nsomething that's interested me for many",
    "start": "681870",
    "end": "685650"
  },
  {
    "text": "years. I think there's a connection between\nthis piece of kind of abstract computer",
    "start": "685650",
    "end": "689910"
  },
  {
    "text": "science, or abstract mathematics, and\nbiology. If you look at human DNA, you",
    "start": "689910",
    "end": "695639"
  },
  {
    "text": "have this double helix structure; you\nhave two copies of the same thing,",
    "start": "695640",
    "end": "698880"
  },
  {
    "text": "side-by-side, and this is the key to\nallowing DNA to self-replicate. If you",
    "start": "698880",
    "end": "703800"
  },
  {
    "text": "look at the structure of this lambda\nexpression here, we have two copies of",
    "start": "703800",
    "end": "707910"
  },
  {
    "text": "the same thing side-by-side.  You have\nlambda x, f applied to x x, and exactly the",
    "start": "707910",
    "end": "712889"
  },
  {
    "text": "same here. This is the key to doing\nrecursion, which is kind of related to",
    "start": "712890",
    "end": "716880"
  },
  {
    "text": "self-replication in a programming\nlanguage, or in the Lambda Calculus. And",
    "start": "716880",
    "end": "721980"
  },
  {
    "text": "for me, I don't think this is a\ncoincidence -- I think it's kind of",
    "start": "721980",
    "end": "724470"
  },
  {
    "text": "interesting philosophical observation.\nThe Lambda Calculus has this kind of",
    "start": "724470",
    "end": "728310"
  },
  {
    "text": "very clever way of doing recursion, which\nwould take a video on its own to explain",
    "start": "728310",
    "end": "733200"
  },
  {
    "text": "how it actually works, but you can look it\nup on Wikipedia. And there's a link here,",
    "start": "733200",
    "end": "737610"
  },
  {
    "text": "I think, to biology.  Somebody\nactually found the Y Combinator",
    "start": "737610",
    "end": "744649"
  },
  {
    "text": "so interesting, that they've had it\ntattooed permanently on their arm, and",
    "start": "744650",
    "end": "748160"
  },
  {
    "text": "you can find a picture of this if you do a\nquick web search. What would people search for?",
    "start": "748160",
    "end": "752690"
  },
  {
    "text": "The Y combination -- the Y combinator in\nmathematics or computer science.",
    "start": "752690",
    "end": "757940"
  },
  {
    "text": "And tattoo I'm guessing.  Yup!",
    "start": "757940",
    "end": "763090"
  }
]