[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "I think, as far as I know, it was Brian\nKernighan and Dennis Ritchie who first",
    "start": "0",
    "end": "4529"
  },
  {
    "text": "introduced it to me. I don't if it goes\nback earlier than that, but certainly  in",
    "start": "4529",
    "end": "8639"
  },
  {
    "text": "the C book - there it is: 'printf (\"hello\nworld\\n\")', you know, and the use of '\\n'",
    "start": "8639",
    "end": "13650"
  },
  {
    "text": "to denote a new line at the end of it,\nand all that. It's now really become a",
    "start": "13650",
    "end": "17970"
  },
  {
    "text": "part of Comp Sci legend. The first thing\nyou do when you show that you've",
    "start": "17970",
    "end": "21840"
  },
  {
    "text": "mastered [or just begun] a new language \nbe it Python or whatever, you know, \"Oh yes! here's",
    "start": "21840",
    "end": "26939"
  },
  {
    "text": "how to do 'Hello World' \". Of course, \"Hello\nWorld\" is a characters-based challenge.",
    "start": "26939",
    "end": "35699"
  },
  {
    "text": "And from what we now know about\ncharacters - in modern computers at least -",
    "start": "35700",
    "end": "39989"
  },
  {
    "text": "being stored in addressable bytes - \ndoes it sort of follow then, that \"Hello",
    "start": "39989",
    "end": "45210"
  },
  {
    "text": "World\" would be somewhat easier [at low level]\non a byte-based machine? Oh yes! it would be a lot",
    "start": "45210",
    "end": "50760"
  },
  {
    "text": "easier on a byte-based machine. But there's\nother things as well. So as, perhaps, an",
    "start": "50760",
    "end": "56038"
  },
  {
    "text": "illustration of just how horrible it\ncould be - and given that we have done",
    "start": "56039",
    "end": "60210"
  },
  {
    "text": "some stuff on EDSAC already -  let's go\nand do that. If you haven't seen the",
    "start": "60210",
    "end": "67350"
  },
  {
    "text": "other EDSAC stuff I think you'll be\nable to follow what I'm doing anyway.",
    "start": "67350",
    "end": "70680"
  },
  {
    "text": "And you could always go back later and\npick up some more background about EDSAC.",
    "start": "70680",
    "end": "74250"
  },
  {
    "text": "But when we were on this EDSAC\nsimulator, the last time, we actually did",
    "start": "74250",
    "end": "79350"
  },
  {
    "text": "run the program that Martin Campbell-Kelly\nsupplies with it. And he got fed up of",
    "start": "79350",
    "end": "84570"
  },
  {
    "text": "doing \"Hello World\". He said: \"I'll just do a\nbrief version that says 'HI' \". We did that.",
    "start": "84570",
    "end": "88290"
  },
  {
    "text": "Thanks to a combined programming effort\nnow, by those in this room, I have here",
    "start": "88290",
    "end": "95250"
  },
  {
    "text": "the new version \"HelloWorld_SR_DFB.txt\" \nAnd there it is. It's quite a lot",
    "start": "95250",
    "end": "101759"
  },
  {
    "text": "longer, of course, than the previous one was. \n>> Sean: So, is each of those lines using a word, then ?",
    "start": "101759",
    "end": "106530"
  },
  {
    "text": ">> DFB: Yes. EDSAC was designed\naround the most minimalist set of things",
    "start": "106530",
    "end": "112259"
  },
  {
    "text": "It was basically ... the story was ... if it's\npossible to do [it] with what we've got",
    "start": "112259",
    "end": "116369"
  },
  {
    "text": "already, then don't start inventing new flavours of",
    "start": "116369",
    "end": "119490"
  },
  {
    "text": "instructions. So, all you've got here is\n- this is the stuff of course for setting",
    "start": "119490",
    "end": "124828"
  },
  {
    "text": "up where the load point is,\nand where the relative offsets of these",
    "start": "124829",
    "end": "130810"
  },
  {
    "text": "addresses is, relative to 64. The '@' symbol at \nthe end [of an instruction]  signals to David",
    "start": "130810",
    "end": "137019"
  },
  {
    "text": "Wheeler's Initial Orders that what comes\nhere is a relative address. So what it's",
    "start": "137019",
    "end": "144340"
  },
  {
    "text": "saying is: letter O - not a zero - \"output\nthe character which you can find in the",
    "start": "144340",
    "end": "151269"
  },
  {
    "text": "memory location 16 further on than 64 is\".\nSo, all these offsets: 16, 17, 18, 19, 20 are",
    "start": "151269",
    "end": "160900"
  },
  {
    "text": "all relative to 64. So in actual fact,\nthen, it turns out that address 80 holds",
    "start": "160900",
    "end": "167500"
  },
  {
    "text": "the very first thing you want to output.\nAnd of course 16 on from 64 .... well if 64",
    "start": "167500",
    "end": "173170"
  },
  {
    "text": "is here this is where the actual data\nstarts. The 'ZF' and the things like that",
    "start": "173170",
    "end": "178989"
  },
  {
    "text": "correspond to what are nowadays called\nassembler directives. It's not always the",
    "start": "178989",
    "end": "184510"
  },
  {
    "text": "case that these things go\none-for-one into occupying a word. Some",
    "start": "184510",
    "end": "189730"
  },
  {
    "text": "of them are messages to the assembler.\nAll the stuff up here is basically",
    "start": "189730",
    "end": "193690"
  },
  {
    "text": "saying: \"I want you to remember 64 and\nstart locating everything relative to that\".",
    "start": "193690",
    "end": "199569"
  },
  {
    "text": ">> Sean: Because if we look specifically\nat the line numbers on the left there that",
    "start": "199569",
    "end": "203829"
  },
  {
    "text": "wouldn't be the  place you're trying to\nget to,  right?\".\n>> DFB: No, this stuff up here is",
    "start": "203829",
    "end": "208420"
  },
  {
    "text": "what would probably be done in modern\nassemblers by saying something like \"ORG = 64\".",
    "start": "208420",
    "end": "212889"
  },
  {
    "text": "[where ORG = \"origin\"] In other words that isn't \na program instruction. It's telling you, the",
    "start": "212889",
    "end": "218290"
  },
  {
    "text": "assembler: \"Please start me [loading] at 64\". And it's \nfor your own [assembler] internal knowledge. It's not",
    "start": "218290",
    "end": "223599"
  },
  {
    "text": "to be translated into a program\ninstruction. So the ZF says \"Stop\" - stop",
    "start": "223600",
    "end": "228609"
  },
  {
    "text": "execution. But in the meantime what we're\nexpecting is the thing that is 16 on",
    "start": "228609",
    "end": "233470"
  },
  {
    "text": "from 64 will actually get us to here \nfor *F. What does *F do?   * is a short",
    "start": "233470",
    "end": "240519"
  },
  {
    "text": "code for saying \"Put yourself in letter\nshift\". Veterans of 5-hole paper tape will",
    "start": "240519",
    "end": "247239"
  },
  {
    "text": "know - you've got to make sure that you're\nin letter shift to print meaningful",
    "start": "247239",
    "end": "251260"
  },
  {
    "text": "messages. The other possible shift is\nfigure shift and all hell breaks loose",
    "start": "251260",
    "end": "256900"
  },
  {
    "text": "if you start forgetting to shift out [of that].\nIt's just like the shift key on a typewriter,",
    "start": "256900",
    "end": "261910"
  },
  {
    "text": "that's where it comes from historically\n>> Sean: Can you use that as a very, very",
    "start": "261910",
    "end": "264910"
  },
  {
    "text": "simplistic code ?!\n>> DFB:  [laughing] Yes! Possibly! Anyway, so\nturn into letter shift and, look, this",
    "start": "264910",
    "end": "272650"
  },
  {
    "text": "makes sense now! Can you see HF in one\n[single-length] word?  F means: \"This",
    "start": "272650",
    "end": "280210"
  },
  {
    "text": "is a single length word\". Yeah, 18 bits.\nActually the op-code field for those",
    "start": "280210",
    "end": "285340"
  },
  {
    "text": "who've got the EDSAC tutorial. The\nop-code field is occupied by an H",
    "start": "285340",
    "end": "291360"
  },
  {
    "text": "but the O command will output these [bits in \nthe op-code field] as if they were characters,\n-  and meant to be characters.",
    "start": "291360",
    "end": "299139"
  },
  {
    "text": "They've got to be in the\nop-code field but the O command says: ",
    "start": "299140",
    "end": "302830"
  },
  {
    "text": "\"Look in the opcode field\". Regard it -\nas not a Baudot character, remember Maurice",
    "start": "302830",
    "end": "308139"
  },
  {
    "text": "Wilkes had invented EDSAC code - subtly\ndifferent but never mind. And it's so you",
    "start": "308140",
    "end": "312850"
  },
  {
    "text": "end up coming to here and saying: \"Oh! it's a\nletter H [that] I am to output when this O",
    "start": "312850",
    "end": "318250"
  },
  {
    "text": "instruction, with a relative address\noffset on it. And you go all the way. Look",
    "start": "318250",
    "end": "322780"
  },
  {
    "text": "here H-E-L-L-O. What's the exclamation mark?\nLook it up in the EDSAC tutorial, as I",
    "start": "322780",
    "end": "329470"
  },
  {
    "text": "had to do. That's the marker you put in\nif you want to force an explicit space",
    "start": "329470",
    "end": "334000"
  },
  {
    "text": "between HELLO and WORLD. Which we did. And\nwe finally ... what are @F and",
    "start": "334000",
    "end": "339250"
  },
  {
    "text": "&F after the 'D' of \"HELLO WORLD\"?\nWell, let's take a guess. We're trying to",
    "start": "339250",
    "end": "343390"
  },
  {
    "text": "be neat and tidy - make it look good -\nthat's the code for \"give me a carriage",
    "start": "343390",
    "end": "347260"
  },
  {
    "text": "return; give me a line feed\". And then we\nsay \"end of the whole thing; end execution\".",
    "start": "347260",
    "end": "352000"
  },
  {
    "text": "And this is a marker also to Initial Orders:",
    "start": "352000",
    "end": "355240"
  },
  {
    "text": "You can stop relocating this program for me. \nI'm done.",
    "start": "355240",
    "end": "358539"
  },
  {
    "text": "OK. so that - since it's on top now -\nOh! - fingers crossed Sean - what do we do? We do",
    "start": "358540",
    "end": "364570"
  },
  {
    "text": "Start don't we? We noticed that, way back up at the top \n[of the program], we put in a Stop, just to make",
    "start": "364570",
    "end": "370870"
  },
  {
    "text": "sure. Because [puts on 'ironic' voice] with our \nincredible knowledge of EDSAC binary. Sean and I",
    "start": "370870",
    "end": "374770"
  },
  {
    "text": "can see, straight away, [looks at oscilloscope display] \nthat that, of course, is HELLO WORLD. I mean,",
    "start": "374770",
    "end": "378729"
  },
  {
    "text": "we're not kidding. David Wheeler would know\nthat it said HELLO WORLD. I'll tell you",
    "start": "378730",
    "end": "382840"
  },
  {
    "text": "something else, Sean. After only half a day's \nfamiliarity with this,",
    "start": "382840",
    "end": "386680"
  },
  {
    "text": "John von Neumann would know that\nthat was HELLO WORLD! He'd find it so ",
    "start": "386680",
    "end": "391240"
  },
  {
    "text": "comfortable to remember the details of\nthe binary. Y'know, I'm sure he would!",
    "start": "391240",
    "end": "395740"
  },
  {
    "text": "I really do.\nSo, here we go then. Let's do a Single",
    "start": "395740",
    "end": "398530"
  },
  {
    "text": "EP,  a single instruction, Single\nShot, it's sometimes called nowadays. ",
    "start": "398530",
    "end": "403660"
  },
  {
    "text": "Right! There we are! It's still blinking. We\nturned into letter shift with that click,",
    "start": "403660",
    "end": "407590"
  },
  {
    "text": "next click 'H'.Oh! isn't this wonderful Sean?!\nAren't we demon programmers?! E-L-L-  ",
    "start": "407590",
    "end": "414580"
  },
  {
    "text": "O-space.  Yes!  W-O-R-L-D- carriage\nreturn - line feed. So, that was pretty",
    "start": "414580",
    "end": "423728"
  },
  {
    "text": "painful! Although the T64K gives you relocatability -",
    "start": "423729",
    "end": "427270"
  },
  {
    "text": "[e.g.] you could change that to be T256K,\nsay, if you wanted to - [i.e.] shove the",
    "start": "427270",
    "end": "432400"
  },
  {
    "text": "whole thing up memory and then maybe\nturn it into a subroutine? You want to",
    "start": "432400",
    "end": "436600"
  },
  {
    "text": "push it somewhere else in memory. So, the\nbulk relocation, against the base address,",
    "start": "436600",
    "end": "441789"
  },
  {
    "text": "is taken care of by Initial Orders, but\nyou've still got to get the offsets",
    "start": "441789",
    "end": "445690"
  },
  {
    "text": "right. And it's painful!\nIt's utterly, utterly painful. We're now",
    "start": "445690",
    "end": "450130"
  },
  {
    "text": "gonna jump forward [in time] into safe \nbyte-addressed territory, for handling",
    "start": "450130",
    "end": "456610"
  },
  {
    "text": "characters, and [focus on] the ARM\n32-bit ARM chip, which we use for",
    "start": "456610",
    "end": "460150"
  },
  {
    "text": "teaching assembler programming here \n[at Univ of Nottingham] to our first years \n[undergrads.] Yeah, it is a 32-bit word,",
    "start": "460150",
    "end": "467669"
  },
  {
    "text": "broken up into four bytes, 8-bit bytes,\nwhich of course use ASCII not IBM EBCDIC",
    "start": "467669",
    "end": "474340"
  },
  {
    "text": "Fine,  so down at the assembler\nlevel for the ARM, then, what does",
    "start": "474340",
    "end": "480430"
  },
  {
    "text": "the byte addressability give us and what\nother things have happened between the",
    "start": "480430",
    "end": "486789"
  },
  {
    "text": "EDSAC era and this era, where we're\ntalking late 80s, 90s - this sort of",
    "start": "486789",
    "end": "491919"
  },
  {
    "text": "thing. What else has happened to make this \n{ARM assembler] thing so much more compact, so much",
    "start": "491919",
    "end": "496150"
  },
  {
    "text": "easier to understand and so much more\nflexible? Well, let's go here through, step",
    "start": "496150",
    "end": "500050"
  },
  {
    "start": "500000",
    "end": "870000"
  },
  {
    "text": "by step. Comments: anything after a\nsemicolon is a comment. I've put a",
    "start": "500050",
    "end": "503590"
  },
  {
    "text": "comment up at the top saying to put out\nthe \"Hello World\", we've used the so-called",
    "start": "503590",
    "end": "508600"
  },
  {
    "text": "software interrupts - the\nsystem calls - as provided by the",
    "start": "508600",
    "end": "513010"
  },
  {
    "text": "University of Manchester's KoMoDo ARM\ndevelopment environment, which is what we",
    "start": "513010",
    "end": "517570"
  },
  {
    "text": "use. So when we get to actually printing\nthe character out, don't get worried by",
    "start": "517570",
    "end": "522510"
  },
  {
    "text": "SWI, it means  'software interrupt', to ask the\n[KoMoDo] operating system to print something for",
    "start": "522510",
    "end": "527200"
  },
  {
    "text": "me, or something like that. So let's start\nup here. Programs on the ARM will",
    "start": "527200",
    "end": "531730"
  },
  {
    "text": "cheerfully expect - if you don't tell them\notherwise - that they will start executing",
    "start": "531730",
    "end": "536320"
  },
  {
    "text": "at line 1 of your program, and go\nmadly on. I put this data for \"Hello World\"",
    "start": "536320",
    "end": "541630"
  },
  {
    "text": "up at the top of the listing. Not at the\nbottom as I could have done. But the rule",
    "start": "541630",
    "end": "548800"
  },
  {
    "text": "then is:  if I declare \"Hello World\" here, as\nbeing a piece of text, and this DEFB",
    "start": "548800",
    "end": "554649"
  },
  {
    "text": "here means ' ,,, just define a bunch of bytes'.\nAnd you put them in \" quotes like you",
    "start": "554650",
    "end": "559450"
  },
  {
    "text": "would in C. And even - taking over some\nof its story from C - it even allows you",
    "start": "559450",
    "end": "565180"
  },
  {
    "text": "to ask for a newline to be put in there\nwith \\n. And the only difference",
    "start": "565180",
    "end": "569440"
  },
  {
    "text": "is whereas C implicitly plugs its\nstrings with a null character at the end,",
    "start": "569440",
    "end": "576250"
  },
  {
    "text": "ARM doesn't do that for you. You  must\nexplicitly put in a null character at",
    "start": "576250",
    "end": "580750"
  },
  {
    "text": "the end of your string - if that is your\nstop indicator. But in order to stop the",
    "start": "580750",
    "end": "587410"
  },
  {
    "text": "ARM chip executing \"Hello World\" as if it\nwas bit-patterns for instructions - which you",
    "start": "587410",
    "end": "592540"
  },
  {
    "text": "don't want - you want to jump past it,  I've\nput in here, look, an unconditional branch",
    "start": "592540",
    "end": "597220"
  },
  {
    "text": "to [the label] 'main'. Branch to 'main'. Aw! now this is\nwonderful! You don't have to say branch",
    "start": "597220",
    "end": "603220"
  },
  {
    "text": "to an absolute address and be like David\nWheeler and John von Neumann and have",
    "start": "603220",
    "end": "607300"
  },
  {
    "text": "them all in your head,  you just say: \"Let's\nlabel it 'main' and this thing called 'an",
    "start": "607300",
    "end": "613089"
  },
  {
    "text": "assembler' will work out what 'main' means\nin terms of the address you want to jump",
    "start": "613090",
    "end": "618160"
  },
  {
    "text": "to. Isn't that wonderful! [In fantasy] von Neumann \nstares at you and says: \"That's for the weak-brained",
    "start": "618160",
    "end": "623589"
  },
  {
    "text": "who can't keep track of their addresses!\"\nY' know! Anyway, so, we branch to 'main'",
    "start": "623590",
    "end": "628450"
  },
  {
    "text": "and the first thing it says, very\nself-evidently, really is:",
    "start": "628450",
    "end": "633190"
  },
  {
    "text": "\"Get me the start address of the text\nstring and put that start address into",
    "start": "633190",
    "end": "638890"
  },
  {
    "text": "register 1  [r1]\". Next thing we notice - as\nlong promised: ",
    "start": "638890",
    "end": "642900"
  },
  {
    "text": "modern CPUs [like ARM] have [typically] 15 or 16\nspecial-purpose registers to make life",
    "start": "642900",
    "end": "649390"
  },
  {
    "text": "bearable. EDSAC didn't - it only had the\naccumulator! And if you wanted other",
    "start": "649390",
    "end": "654130"
  },
  {
    "text": "storage places, you had to start parking\nit in memory, in all sorts of horrible",
    "start": "654130",
    "end": "658090"
  },
  {
    "text": "ways. So, that helps us straight away:  r1\nis going to be our so-called index",
    "start": "658090",
    "end": "663040"
  },
  {
    "text": "register; it's going to start off by\npointing at the address of 'H'. Now I don't",
    "start": "663040",
    "end": "670029"
  },
  {
    "text": "know what the byte address of 'H' is. It\nmight even be relatively zero here. It's",
    "start": "670030",
    "end": "673900"
  },
  {
    "text": "the first thing that happens in this\nprogram. But whatever is the actual",
    "start": "673900",
    "end": "677710"
  },
  {
    "text": "bytes address of 'H' is now in register 1.\nHere is the crux of the whole thing:",
    "start": "677710",
    "end": "683850"
  },
  {
    "text": "LDRB [B=byte] \"load into a register the byte\nspecified as follows; here I say r0,",
    "start": "683850",
    "end": "692319"
  },
  {
    "text": "that's the register I want to load it\ninto. But where does it come from?",
    "start": "692320",
    "end": "697420"
  },
  {
    "text": "In square brackets [r1]. That says look in\nr1 and you will find an address of the",
    "start": "697420",
    "end": "704860"
  },
  {
    "text": "start of that string. I don't want you to\nload the address into r0, I want",
    "start": "704860",
    "end": "710019"
  },
  {
    "text": "you to load the character that is at\nthat address into r0. It's [called] ",
    "start": "710020",
    "end": "714310"
  },
  {
    "text": "\"indirection\" and that is indicated by that\nsquare bracket [i.e.] not putting the address",
    "start": "714310",
    "end": "720910"
  },
  {
    "text": "that's in r1 into r0; I'm following the\npointer from r1 saying:\" Oh! that's the",
    "start": "720910",
    "end": "727930"
  },
  {
    "text": "letter 'H'at the moment and that's what I\nput into r0. And here's the other",
    "start": "727930",
    "end": "731560"
  },
  {
    "text": "cute thing at the end - wouldn't those\npioneers have given the world for this - ",
    "start": "731560",
    "end": "735130"
  },
  {
    "text": "is to say: \" ... and when you've done that,\nplease, for next time around the loop",
    "start": "735130",
    "end": "740340"
  },
  {
    "text": "increment that r1 address by one\". So, if\nit was pointing at 18, shall we say to",
    "start": "740340",
    "end": "746350"
  },
  {
    "text": "start with, it's 19 now, for next time\naround the loop. So you keep on going",
    "start": "746350",
    "end": "750759"
  },
  {
    "text": "around that loop. And here's the thing\nwhere you check whether you've hit the null",
    "start": "750760",
    "end": "753640"
  },
  {
    "text": "character: \"Compare the contents of\nregister 0 - which would be a character",
    "start": "753640",
    "end": "757480"
  },
  {
    "text": "contents - against literally 0, which is\nwhat the null character is. Now, is the",
    "start": "757480",
    "end": "762820"
  },
  {
    "text": "answer \"yes\" or \"no\"? Is it equal, or not\nequal, to 0. And here's another lovely",
    "start": "762820",
    "end": "767590"
  },
  {
    "text": "thing about the ARM chip that Steve and I love",
    "start": "767590",
    "end": "771309"
  },
  {
    "text": "dearly. This is the 32-bit ARM chip - I\nthink in the 64-bit one they've [decided] it's not",
    "start": "771309",
    "end": "776619"
  },
  {
    "text": "so important to do it nowadays. They have\na thing in the 32-bit one called",
    "start": "776619",
    "end": "781119"
  },
  {
    "text": "'conditional execution', which can save you\noften using a branch instruction, which",
    "start": "781119",
    "end": "786610"
  },
  {
    "text": "are relatively expensive in pipeline\nterms. So here we've got SWINE-  which is",
    "start": "786610",
    "end": "791529"
  },
  {
    "text": "wonderful! Software interrupt 0 says\n\" ... punch out this character for me on the",
    "start": "791529",
    "end": "796089"
  },
  {
    "text": "display, on the screen\". But NE says: \" ...  but\ndo that only if the last thing you did",
    "start": "796089",
    "end": "800819"
  },
  {
    "text": "didn't yield 'equal' [so it's 'not equal'] \nWell, we're checking for the null character. So, as",
    "start": "800819",
    "end": "807279"
  },
  {
    "text": "long as it wasn't the null character\nit'll say: \"No - I'm not equal to the null",
    "start": "807279",
    "end": "811029"
  },
  {
    "text": "character\". And you print it out and out\nit comes, character by character. After",
    "start": "811029",
    "end": "815139"
  },
  {
    "text": "that, of course, you loop back to go\naround and print another character,",
    "start": "815139",
    "end": "819998"
  },
  {
    "text": "remembering that the #1 has\nincremented your address pointer along",
    "start": "819999",
    "end": "824499"
  },
  {
    "text": "that string. So you keep on going round\nhere you don't have to remember what [the]",
    "start": "824499",
    "end": "828220"
  },
  {
    "text": "address 'loop' is. You don't know! [But] the\nassembler knows [and] it fixes it up for you.",
    "start": "828220",
    "end": "832029"
  },
  {
    "text": "And then, right at the very end, the way\nto say: \"Stop execution - I've done it\" ",
    "start": "832029",
    "end": "835980"
  },
  {
    "text": "SWI flavour 2,  on this emulated environment\nsays \"Stop it completely\". The development",
    "start": "835980",
    "end": "841628"
  },
  {
    "text": "of that from EDSAC? You think \"Oh! my golly, I\nam so pleased I've got that!\" And Martin",
    "start": "841629",
    "end": "849249"
  },
  {
    "text": "the inventor of the EDSAC simulator here, I\nemailed him the other day and he came",
    "start": "849249",
    "end": "853449"
  },
  {
    "text": "back to me and said: \"Yes, the need for an\nindex register was realized so quickly",
    "start": "853449",
    "end": "858639"
  },
  {
    "text": "that that's why my [EDSAC] emulator is [only] \nearly '49 to late-ish 1950, because in late 1950",
    "start": "858639",
    "end": "867459"
  },
  {
    "text": "David Wheeler and everybody said \"My golly, we need \nan index register!\" And they built",
    "start": "867459",
    "end": "872678"
  },
  {
    "start": "870000",
    "end": "1111000"
  },
  {
    "text": "one in. So, in a way then, this is what is\nhappening. It's that the pioneers were",
    "start": "872679",
    "end": "880239"
  },
  {
    "text": "using their early machinery\nto lead the way into saying: \"What extra",
    "start": "880239",
    "end": "885030"
  },
  {
    "text": "facilities do we need to make life\ntolerable for us?\" Now, there is the",
    "start": "885030",
    "end": "890610"
  },
  {
    "text": "hardware facility of having the index\nregisters and they've just become",
    "start": "890610",
    "end": "894029"
  },
  {
    "text": "standard kit, afterwards every other machine\nhas index registers.  But also what interests me is",
    "start": "894030",
    "end": "899190"
  },
  {
    "text": "the role of a proper assembler. Initial\nOrders II is not a full-blown assembler.",
    "start": "899190",
    "end": "905580"
  },
  {
    "text": "It helps you a little bit by turning\ndecimal addresses into binary but you",
    "start": "905580",
    "end": "912060"
  },
  {
    "text": "have to remember that that letter A - that\nyou put in the leading five bits -",
    "start": "912060",
    "end": "915840"
  },
  {
    "text": "could be the character 'A', but if\nyou're regarding this as an instruction,",
    "start": "915840",
    "end": "919230"
  },
  {
    "text": "that's an ADD instruction. So, but then\nInitial Orders II is relocating; it's",
    "start": "919230",
    "end": "926880"
  },
  {
    "text": "relocating; doing a bit of binary\ntranslation; it's a single-pass process;",
    "start": "926880",
    "end": "931800"
  },
  {
    "text": "it's wonderful! The problem with\nassembler is it has to be a two-pass",
    "start": "931800",
    "end": "936209"
  },
  {
    "text": "process. The trouble always is that\nif you jump back to labels you",
    "start": "936210",
    "end": "939900"
  },
  {
    "text": "have already seen, you will know already what\naddress that will be at. But it's  when you",
    "start": "939900",
    "end": "943140"
  },
  {
    "text": "jump forward. How do I know where the heck that \nlabel down there is gonna be [in address terms]?",
    "start": "943140",
    "end": "947220"
  },
  {
    "text": "I don't even want to calculate it! I want\nthe assembler to say: \"Oh! I'm on location 186",
    "start": "947220",
    "end": "952500"
  },
  {
    "text": "now - how handy!\" But then it can't fix up\nthe addresses till it knows and has",
    "start": "952500",
    "end": "958920"
  },
  {
    "text": "counted its way through the program.  So\nthen it says: \"Right,",
    "start": "958920",
    "end": "961680"
  },
  {
    "text": "I will now output you a definitive thing\n- that you can put in through David",
    "start": "961680",
    "end": "966899"
  },
  {
    "text": "Wheelers Initial Orders II - because I've\nmade it so much easier; because I've",
    "start": "966900",
    "end": "971760"
  },
  {
    "text": "allowed labels. One doesn't think of\nlabels as being a structuring convention",
    "start": "971760",
    "end": "975900"
  },
  {
    "text": "and yet at this low level they are, in a\nway. Because this [label] is saying 'loop' - it",
    "start": "975900",
    "end": "979590"
  },
  {
    "text": "starts here. Another label. Oh! it ends\nhere. Please calculate the addresses of",
    "start": "979590",
    "end": "985740"
  },
  {
    "text": "what's happening there and fix it up\nfor me. And so you might say: \"Well, all right",
    "start": "985740",
    "end": "990630"
  },
  {
    "text": "but didn't everybody say 'we must have\nassemblers it's the modern way to do",
    "start": "990630",
    "end": "994470"
  },
  {
    "text": "things' ?\" There were very mixed views\nabout this. And I don't think EDSAC got",
    "start": "994470",
    "end": "999180"
  },
  {
    "text": "an assembler until EDSAC 2 - when\nanother friend of mine, David Hartley ",
    "start": "999180",
    "end": "1002810"
  },
  {
    "text": "did, I think, a macro-assembler for EDSAC 2 -\nnot EDSAC 1. Because there's a",
    "start": "1002810",
    "end": "1008300"
  },
  {
    "text": "story here related to von Neumann as\nwell. I don't know whether it was EDVAC or",
    "start": "1008300",
    "end": "1012649"
  },
  {
    "text": "his version of EDVAC that he had in his \nbasement (called Johnniac ?!). Apparently he",
    "start": "1012650",
    "end": "1016980"
  },
  {
    "text": "really berated a grad student who wrote an assembler. \n[Invented quote] \"Assemblers are for the weak-",
    "start": "1016980",
    "end": "1023550"
  },
  {
    "text": "brained who cannot work out their own\naddresses!  You do realize that in",
    "start": "1023550",
    "end": "1029699"
  },
  {
    "text": "running this assembler of yours - punching\nout a paper tape - I'm behind you in the",
    "start": "1029700",
    "end": "1034319"
  },
  {
    "text": "queue. I don't get my turn next! You come\nto me and say: 'Ah but this is ready to",
    "start": "1034320",
    "end": "1038939"
  },
  {
    "text": "load now, in the second phase, as absolute binary'\nYou're wasting time! If you're so weak-brained",
    "start": "1038940",
    "end": "1045480"
  },
  {
    "text": "you can't program in absolute ... [I'm\nputting words in his mouth !! ]. But this was",
    "start": "1045480",
    "end": "1048929"
  },
  {
    "text": "essentially it. He, no doubt, had dreams in\nAbsolute Binary. There was no problem",
    "start": "1048930",
    "end": "1055140"
  },
  {
    "text": "with John von Neumann about coping as\nclose to binary as possible. He could",
    "start": "1055140",
    "end": "1060210"
  },
  {
    "text": "keep it all in his head and he would, I\nthink have found Initial Orders on EDSAC",
    "start": "1060210",
    "end": "1063870"
  },
  {
    "text": "about, yes, nice and helpful. Single pass\nNot slowing down things a lot. But an assembler!",
    "start": "1063870",
    "end": "1070740"
  },
  {
    "text": "You're wasting time on this machine! By doing\nassemblers. I mean it really really",
    "start": "1070740",
    "end": "1076980"
  },
  {
    "text": "brings it home to those of us who always\njoked about, y'know: \"Real Programmers",
    "start": "1076980",
    "end": "1082320"
  },
  {
    "text": "use Assembler\" The answer, certainly\nfrom John von Neumann - possibly even from David",
    "start": "1082320",
    "end": "1087630"
  },
  {
    "text": "Wheeler - but he wouldn't have been as\nextreme as that - is: \"Real Programmers use",
    "start": "1087630",
    "end": "1090480"
  },
  {
    "text": "Absolute Binary!\"",
    "start": "1090480",
    "end": "1096870"
  }
]