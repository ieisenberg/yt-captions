[
  {
    "text": "last time we were binary searching we",
    "start": "80",
    "end": "2360"
  },
  {
    "text": "were binary searching last time what we",
    "start": "2360",
    "end": "3399"
  },
  {
    "text": "searching for this week we're still",
    "start": "3399",
    "end": "5000"
  },
  {
    "text": "binary searching but we're going to",
    "start": "5000",
    "end": "6080"
  },
  {
    "text": "binary search ever so slightly better",
    "start": "6080",
    "end": "7640"
  },
  {
    "text": "than we did before that's the idea so it",
    "start": "7640",
    "end": "9559"
  },
  {
    "text": "was pointed out into comments to me that",
    "start": "9559",
    "end": "11639"
  },
  {
    "text": "under some you know languages and",
    "start": "11639",
    "end": "14160"
  },
  {
    "text": "computational architectures there'd be a",
    "start": "14160",
    "end": "15639"
  },
  {
    "text": "bug in the binary search code that I",
    "start": "15639",
    "end": "17560"
  },
  {
    "text": "wrote now I mean I would I would like",
    "start": "17560",
    "end": "19640"
  },
  {
    "text": "the record to show that there isn't a",
    "start": "19640",
    "end": "20720"
  },
  {
    "text": "bug in my code obviously uh mostly",
    "start": "20720",
    "end": "23359"
  },
  {
    "text": "because I programmed it in Python um and",
    "start": "23359",
    "end": "25720"
  },
  {
    "text": "python has a slightly different way of",
    "start": "25720",
    "end": "27160"
  },
  {
    "text": "dealing with numbers but let's look at",
    "start": "27160",
    "end": "28439"
  },
  {
    "text": "this bug because actually this was quite",
    "start": "28439",
    "end": "29720"
  },
  {
    "text": "a serous problem this existed in Java",
    "start": "29720",
    "end": "32558"
  },
  {
    "text": "for example for about 9 years nearly",
    "start": "32559",
    "end": "34360"
  },
  {
    "text": "nearly a decade this bug was there which",
    "start": "34360",
    "end": "36960"
  },
  {
    "text": "would have thrown errors in a certain",
    "start": "36960",
    "end": "39280"
  },
  {
    "text": "set set of circumstances where this",
    "start": "39280",
    "end": "40800"
  },
  {
    "text": "binary search that you program that",
    "start": "40800",
    "end": "42480"
  },
  {
    "text": "makes absolute sense doesn't actually do",
    "start": "42480",
    "end": "44800"
  },
  {
    "text": "what you think it does under some",
    "start": "44800",
    "end": "48600"
  },
  {
    "text": "circumstances it's an edge case that you",
    "start": "49360",
    "end": "51480"
  },
  {
    "text": "haven't spotted right there are always",
    "start": "51480",
    "end": "53320"
  },
  {
    "text": "going to be things like this so there's",
    "start": "53320",
    "end": "54600"
  },
  {
    "text": "a much safer way to code it where you",
    "start": "54600",
    "end": "56120"
  },
  {
    "text": "can get around this problem but this",
    "start": "56120",
    "end": "58960"
  },
  {
    "text": "happens a lot with code you write your",
    "start": "58960",
    "end": "60640"
  },
  {
    "text": "code you do a lot of tests everything",
    "start": "60640",
    "end": "62399"
  },
  {
    "text": "works fine you just didn't test those",
    "start": "62399",
    "end": "64600"
  },
  {
    "text": "exact set of circumstances that caused",
    "start": "64600",
    "end": "66520"
  },
  {
    "text": "the bug to appear right so actually one",
    "start": "66520",
    "end": "68640"
  },
  {
    "text": "of the phrases you see a lot is recreate",
    "start": "68640",
    "end": "70320"
  },
  {
    "text": "the bug right which is what where when",
    "start": "70320",
    "end": "72680"
  },
  {
    "text": "someone reports there's a bug to you if",
    "start": "72680",
    "end": "74320"
  },
  {
    "text": "you can recreate it that's the first",
    "start": "74320",
    "end": "76040"
  },
  {
    "text": "step in finding it so let's REM remind",
    "start": "76040",
    "end": "78159"
  },
  {
    "text": "ourselves what we were up to we we had",
    "start": "78159",
    "end": "79759"
  },
  {
    "text": "some boxes which I'm going to draw again",
    "start": "79759",
    "end": "81479"
  },
  {
    "text": "but we're not going to spend too much",
    "start": "81479",
    "end": "82720"
  },
  {
    "text": "time talking about binary search this",
    "start": "82720",
    "end": "84400"
  },
  {
    "text": "time we're just going to talk about the",
    "start": "84400",
    "end": "85920"
  },
  {
    "text": "way we calculate which box to open next",
    "start": "85920",
    "end": "89240"
  },
  {
    "text": "so if you remember",
    "start": "89240",
    "end": "90680"
  },
  {
    "text": "we have some variables in our binary",
    "start": "90680",
    "end": "92759"
  },
  {
    "text": "search that represent where we are",
    "start": "92759",
    "end": "94399"
  },
  {
    "text": "currently looking right so at the",
    "start": "94399",
    "end": "95920"
  },
  {
    "text": "beginning we have our left point over on",
    "start": "95920",
    "end": "98280"
  },
  {
    "text": "the at start of your array and the right",
    "start": "98280",
    "end": "100119"
  },
  {
    "text": "point at the right hand side of your",
    "start": "100119",
    "end": "101479"
  },
  {
    "text": "array and then later maybe you've",
    "start": "101479",
    "end": "103200"
  },
  {
    "text": "decided it's only in this section so you",
    "start": "103200",
    "end": "104759"
  },
  {
    "text": "have your midpoint somewhere over here",
    "start": "104759",
    "end": "107200"
  },
  {
    "text": "right so let's suppose we have our left",
    "start": "107200",
    "end": "110520"
  },
  {
    "text": "Point here and our right point up here",
    "start": "110520",
    "end": "113640"
  },
  {
    "text": "what we need to do is calculate our",
    "start": "113640",
    "end": "116039"
  },
  {
    "text": "midpoint and we do that so that we can",
    "start": "116039",
    "end": "118200"
  },
  {
    "text": "decide work okay we're probably going to",
    "start": "118200",
    "end": "119320"
  },
  {
    "text": "open this box box we open this box and",
    "start": "119320",
    "end": "121119"
  },
  {
    "text": "decide which side then we need to look",
    "start": "121119",
    "end": "122880"
  },
  {
    "text": "on or maybe we found our number so the",
    "start": "122880",
    "end": "125200"
  },
  {
    "text": "formula we used for this was m is equal",
    "start": "125200",
    "end": "128479"
  },
  {
    "text": "to l + r / 2 right and then what we did",
    "start": "128479",
    "end": "133640"
  },
  {
    "text": "was we did the floor function which says",
    "start": "133640",
    "end": "136040"
  },
  {
    "text": "the nearest integer below this now in",
    "start": "136040",
    "end": "139360"
  },
  {
    "text": "Python this will always work because in",
    "start": "139360",
    "end": "140959"
  },
  {
    "text": "python as far as I know in Python we",
    "start": "140959",
    "end": "143400"
  },
  {
    "text": "don't have the same restrictions as we",
    "start": "143400",
    "end": "145120"
  },
  {
    "text": "do in some other languages where numbers",
    "start": "145120",
    "end": "146599"
  },
  {
    "text": "are a fixed size but as mentioned in the",
    "start": "146599",
    "end": "148680"
  },
  {
    "text": "comments quite reasonably",
    "start": "148680",
    "end": "150440"
  },
  {
    "text": "uh in the last video there are certain",
    "start": "150440",
    "end": "152440"
  },
  {
    "text": "circumstances where this will fail right",
    "start": "152440",
    "end": "154720"
  },
  {
    "text": "and that's because what we're doing is",
    "start": "154720",
    "end": "156040"
  },
  {
    "text": "we're doing this very large intermediate",
    "start": "156040",
    "end": "157840"
  },
  {
    "text": "sum between the left and the right and",
    "start": "157840",
    "end": "159879"
  },
  {
    "text": "then dividing by two which basically",
    "start": "159879",
    "end": "161959"
  },
  {
    "text": "means that temporarily our number gets",
    "start": "161959",
    "end": "163519"
  },
  {
    "text": "very large and then it gets reduced back",
    "start": "163519",
    "end": "165560"
  },
  {
    "text": "down into correct range so what this",
    "start": "165560",
    "end": "167200"
  },
  {
    "text": "should do is give us an N value of l+ R",
    "start": "167200",
    "end": "170400"
  },
  {
    "text": "/ 2 which will be the average which is M",
    "start": "170400",
    "end": "174080"
  },
  {
    "text": "right here but imagine your data is",
    "start": "174080",
    "end": "177720"
  },
  {
    "text": "let's say one or two billion elements in",
    "start": "177720",
    "end": "179760"
  },
  {
    "text": "length which doesn't happen to me very",
    "start": "179760",
    "end": "181920"
  },
  {
    "text": "often but it does happen sometimes um",
    "start": "181920",
    "end": "183720"
  },
  {
    "text": "and it would be much more common if you",
    "start": "183720",
    "end": "184959"
  },
  {
    "text": "were working for a large organization",
    "start": "184959",
    "end": "186400"
  },
  {
    "text": "that had a huge amount of data now let's",
    "start": "186400",
    "end": "188720"
  },
  {
    "text": "imagine that each of these numbers is",
    "start": "188720",
    "end": "191239"
  },
  {
    "text": "over about 1.2 billion or something like",
    "start": "191239",
    "end": "193920"
  },
  {
    "text": "that so the theoretical maximum size of",
    "start": "193920",
    "end": "196239"
  },
  {
    "text": "an array in Java is about um 2.1 billion",
    "start": "196239",
    "end": "199879"
  },
  {
    "text": "elements roughly speaking that's the",
    "start": "199879",
    "end": "201280"
  },
  {
    "text": "maximum size of of a signed integer and",
    "start": "201280",
    "end": "204640"
  },
  {
    "text": "if we have if we're looking up at the",
    "start": "204640",
    "end": "206159"
  },
  {
    "text": "top end of this array then our L and R",
    "start": "206159",
    "end": "208319"
  },
  {
    "text": "values are going to be close to that",
    "start": "208319",
    "end": "209760"
  },
  {
    "text": "value when we add them together they're",
    "start": "209760",
    "end": "210959"
  },
  {
    "text": "going to overflow over the maximum",
    "start": "210959",
    "end": "212840"
  },
  {
    "text": "integer size so if if L plus r is over",
    "start": "212840",
    "end": "216159"
  },
  {
    "text": "this value of 2.1 billion you'll get",
    "start": "216159",
    "end": "217760"
  },
  {
    "text": "what we call an integer overflow where",
    "start": "217760",
    "end": "219319"
  },
  {
    "text": "your integer becomes so big but it wraps",
    "start": "219319",
    "end": "222319"
  },
  {
    "text": "back around and you get a very very",
    "start": "222319",
    "end": "224080"
  },
  {
    "text": "large minus number because of two",
    "start": "224080",
    "end": "225599"
  },
  {
    "text": "complement perhaps the most easy one to",
    "start": "225599",
    "end": "227599"
  },
  {
    "text": "understand is that yes if you add",
    "start": "227599",
    "end": "229040"
  },
  {
    "text": "together two positive numbers that are",
    "start": "229040",
    "end": "230760"
  },
  {
    "text": "too big they're going to come out",
    "start": "230760",
    "end": "232280"
  },
  {
    "text": "looking like a negative number right now",
    "start": "232280",
    "end": "234560"
  },
  {
    "text": "if you try and index your array at M",
    "start": "234560",
    "end": "236560"
  },
  {
    "text": "where m is a hugely minus number you're",
    "start": "236560",
    "end": "238720"
  },
  {
    "text": "going to get an error right and out of",
    "start": "238720",
    "end": "240319"
  },
  {
    "text": "bounds exception and your um your code",
    "start": "240319",
    "end": "243000"
  },
  {
    "text": "is going to crash so if you don't ever",
    "start": "243000",
    "end": "246200"
  },
  {
    "text": "have that situation then this will never",
    "start": "246200",
    "end": "247760"
  },
  {
    "text": "come up right and that doesn't mean",
    "start": "247760",
    "end": "249040"
  },
  {
    "text": "necessarily that you should always just",
    "start": "249040",
    "end": "250200"
  },
  {
    "text": "use this code but it's worth noting that",
    "start": "250200",
    "end": "252599"
  },
  {
    "text": "you might have a set of circumstances",
    "start": "252599",
    "end": "254000"
  },
  {
    "text": "where 1 billion is way out of the range",
    "start": "254000",
    "end": "256079"
  },
  {
    "text": "that your program would ever produce in",
    "start": "256079",
    "end": "257799"
  },
  {
    "text": "which case this is not really a big deal",
    "start": "257799",
    "end": "259359"
  },
  {
    "text": "and this is probably why it didn't get",
    "start": "259359",
    "end": "260600"
  },
  {
    "text": "spotted for many years because it just",
    "start": "260600",
    "end": "263479"
  },
  {
    "text": "didn't come up very often right and then",
    "start": "263479",
    "end": "265160"
  },
  {
    "text": "when it when it was eventually when it",
    "start": "265160",
    "end": "266680"
  },
  {
    "text": "was eventually found it found there was",
    "start": "266680",
    "end": "268320"
  },
  {
    "text": "textbooks that were wrong j was wrong",
    "start": "268320",
    "end": "270240"
  },
  {
    "text": "huge implementations were wrong because",
    "start": "270240",
    "end": "272479"
  },
  {
    "text": "there's not really anything wrong with",
    "start": "272479",
    "end": "273960"
  },
  {
    "text": "this it just doesn't work because of the",
    "start": "273960",
    "end": "276960"
  },
  {
    "text": "the restrictions on introduced so what",
    "start": "276960",
    "end": "278680"
  },
  {
    "text": "would be a better way of doing it what",
    "start": "278680",
    "end": "280000"
  },
  {
    "text": "we were originally doing was L + r / 2",
    "start": "280000",
    "end": "283840"
  },
  {
    "text": "so if you had um an L that was here like",
    "start": "283840",
    "end": "286560"
  },
  {
    "text": "this and a and a bigger R because your R",
    "start": "286560",
    "end": "289360"
  },
  {
    "text": "is over on the right hand side over here",
    "start": "289360",
    "end": "291759"
  },
  {
    "text": "what you will be doing is putting this",
    "start": "291759",
    "end": "293039"
  },
  {
    "text": "here adding together and taking the",
    "start": "293039",
    "end": "294720"
  },
  {
    "text": "midpoint which would be somewhere sort",
    "start": "294720",
    "end": "296120"
  },
  {
    "text": "of here right that's that's kind of the",
    "start": "296120",
    "end": "298400"
  },
  {
    "text": "idea that's your average but yeah if you",
    "start": "298400",
    "end": "300280"
  },
  {
    "text": "put that there it' probably run off the",
    "start": "300280",
    "end": "301600"
  },
  {
    "text": "end runs off the end of the screen and",
    "start": "301600",
    "end": "302960"
  },
  {
    "text": "we've got our overflow and then we're",
    "start": "302960",
    "end": "304080"
  },
  {
    "text": "all way over here on the yeah exactly",
    "start": "304080",
    "end": "306199"
  },
  {
    "text": "right so you know the paper works we",
    "start": "306199",
    "end": "307880"
  },
  {
    "text": "should stick with it what we're going to",
    "start": "307880",
    "end": "309000"
  },
  {
    "text": "do instead is we're going to do R minus",
    "start": "309000",
    "end": "310600"
  },
  {
    "text": "L right R minus l so what would that be",
    "start": "310600",
    "end": "314120"
  },
  {
    "text": "that would be the difference between R",
    "start": "314120",
    "end": "316479"
  },
  {
    "text": "minus L here I could probably drawn it",
    "start": "316479",
    "end": "318720"
  },
  {
    "text": "over here so then what you do is what",
    "start": "318720",
    "end": "320840"
  },
  {
    "text": "half of that and then add it to the L",
    "start": "320840",
    "end": "322800"
  },
  {
    "text": "exactly right so we divide this by two",
    "start": "322800",
    "end": "325039"
  },
  {
    "text": "to get this bit here right and then we",
    "start": "325039",
    "end": "328000"
  },
  {
    "text": "add the original L back again so this is",
    "start": "328000",
    "end": "330479"
  },
  {
    "text": "r - L / 2 and then we add back L right",
    "start": "330479",
    "end": "334280"
  },
  {
    "text": "I'm not sure if drawing it out like this",
    "start": "334280",
    "end": "335560"
  },
  {
    "text": "worked but hopefully that makes so it's",
    "start": "335560",
    "end": "337759"
  },
  {
    "text": "a slightly more complicated sum but",
    "start": "337759",
    "end": "339680"
  },
  {
    "text": "hopefully it keeps us in bounds right",
    "start": "339680",
    "end": "341600"
  },
  {
    "text": "yeah so what we've done is we it keeps",
    "start": "341600",
    "end": "343680"
  },
  {
    "text": "us in bounds because we've never R is",
    "start": "343680",
    "end": "345440"
  },
  {
    "text": "always bigger than l in our in our",
    "start": "345440",
    "end": "346919"
  },
  {
    "text": "binary search or they might be the same",
    "start": "346919",
    "end": "348360"
  },
  {
    "text": "in which case that's the last step but",
    "start": "348360",
    "end": "350720"
  },
  {
    "text": "essentially R minus L is never going to",
    "start": "350720",
    "end": "352800"
  },
  {
    "text": "be a negative number and it's never",
    "start": "352800",
    "end": "355199"
  },
  {
    "text": "going to overflow over the end of a",
    "start": "355199",
    "end": "356840"
  },
  {
    "text": "32-bit integer right and that avoids",
    "start": "356840",
    "end": "358720"
  },
  {
    "text": "this problem okay so I actually uh",
    "start": "358720",
    "end": "361240"
  },
  {
    "text": "implemented this in Java and we can",
    "start": "361240",
    "end": "362560"
  },
  {
    "text": "actually see it crash and then we can",
    "start": "362560",
    "end": "364039"
  },
  {
    "text": "fix it right okay so I just recreated my",
    "start": "364039",
    "end": "367120"
  },
  {
    "text": "python code in Java because I wanted to",
    "start": "367120",
    "end": "368759"
  },
  {
    "text": "recreate the bug and in Python it has",
    "start": "368759",
    "end": "371520"
  },
  {
    "text": "arbitrary size integers which means that",
    "start": "371520",
    "end": "373120"
  },
  {
    "text": "basically when your integer becomes 33",
    "start": "373120",
    "end": "375000"
  },
  {
    "text": "bits it doesn't wrap around it's just 33",
    "start": "375000",
    "end": "377080"
  },
  {
    "text": "bits from then on right now that has a",
    "start": "377080",
    "end": "378759"
  },
  {
    "text": "performance hit but it's not much for",
    "start": "378759",
    "end": "382319"
  },
  {
    "text": "for normal use and uh so that's a good",
    "start": "382319",
    "end": "384680"
  },
  {
    "text": "way to program in some ways but actually",
    "start": "384680",
    "end": "387360"
  },
  {
    "text": "I quite like the restrictions sometimes",
    "start": "387360",
    "end": "389240"
  },
  {
    "text": "and for example in things like",
    "start": "389240",
    "end": "390280"
  },
  {
    "text": "cryptography it's very important that",
    "start": "390280",
    "end": "392319"
  },
  {
    "text": "your data is always the exact size that",
    "start": "392319",
    "end": "395440"
  },
  {
    "text": "they're expecting because otherwise the",
    "start": "395440",
    "end": "396759"
  },
  {
    "text": "mathematics won't do the same thing at",
    "start": "396759",
    "end": "398039"
  },
  {
    "text": "all right and so actually for encryption",
    "start": "398039",
    "end": "400199"
  },
  {
    "text": "algorithms it's always very very strict",
    "start": "400199",
    "end": "403039"
  },
  {
    "text": "about exactly how big your data is at",
    "start": "403039",
    "end": "405000"
  },
  {
    "text": "any given time now so I've created",
    "start": "405000",
    "end": "407520"
  },
  {
    "text": "binary search again so we can see the",
    "start": "407520",
    "end": "409440"
  },
  {
    "text": "same algs we had before and here is our",
    "start": "409440",
    "end": "411360"
  },
  {
    "text": "offending line so I'm going to say bad",
    "start": "411360",
    "end": "414240"
  },
  {
    "text": "that's not that's a python comment not a",
    "start": "414240",
    "end": "415879"
  },
  {
    "text": "Java comment excuse me right so this is",
    "start": "415879",
    "end": "419120"
  },
  {
    "text": "bad right and it's bad",
    "start": "419120",
    "end": "421120"
  },
  {
    "text": "because theoretically if we have very",
    "start": "421120",
    "end": "423520"
  },
  {
    "text": "large indices left and right our",
    "start": "423520",
    "end": "425319"
  },
  {
    "text": "midpoint will our intermediates on will",
    "start": "425319",
    "end": "427479"
  },
  {
    "text": "overflow so I'm going to create an array",
    "start": "427479",
    "end": "430440"
  },
  {
    "text": "of a len of length 1.2 billion which is",
    "start": "430440",
    "end": "432800"
  },
  {
    "text": "long enough that we're going to overflow",
    "start": "432800",
    "end": "434759"
  },
  {
    "text": "if we're near the end of it right",
    "start": "434759",
    "end": "436199"
  },
  {
    "text": "because the left and right values added",
    "start": "436199",
    "end": "437840"
  },
  {
    "text": "together will be larger than the biggest",
    "start": "437840",
    "end": "439400"
  },
  {
    "text": "size of ingry we can handle someone",
    "start": "439400",
    "end": "441039"
  },
  {
    "text": "pointed out in the comments very wisely",
    "start": "441039",
    "end": "442800"
  },
  {
    "text": "that why not just create an array of",
    "start": "442800",
    "end": "445160"
  },
  {
    "text": "consecutive numbers from one up to the",
    "start": "445160",
    "end": "446720"
  },
  {
    "text": "length of the array well one to be",
    "start": "446720",
    "end": "449639"
  },
  {
    "text": "really clever and smart about it sure or",
    "start": "449639",
    "end": "451199"
  },
  {
    "text": "we can wait here for 10 minutes while we",
    "start": "451199",
    "end": "452479"
  },
  {
    "text": "drink coffee because it's sorting",
    "start": "452479",
    "end": "453919"
  },
  {
    "text": "algorithm takes ages fine I take your",
    "start": "453919",
    "end": "456120"
  },
  {
    "text": "point so what I'm doing here is I'm",
    "start": "456120",
    "end": "457680"
  },
  {
    "text": "creating an array of length 1.2 billion",
    "start": "457680",
    "end": "459840"
  },
  {
    "text": "I'm then just going to make every",
    "start": "459840",
    "end": "461800"
  },
  {
    "text": "element in the array its own Index right",
    "start": "461800",
    "end": "464240"
  },
  {
    "text": "so essentially the first number will be",
    "start": "464240",
    "end": "466319"
  },
  {
    "text": "not the next number will be one all the",
    "start": "466319",
    "end": "467840"
  },
  {
    "text": "way up to 199 million no anyway uh yeah",
    "start": "467840",
    "end": "473560"
  },
  {
    "text": "1 billion 100 anyway so on so if we run",
    "start": "473560",
    "end": "476759"
  },
  {
    "text": "this and you'll want to skip through the",
    "start": "476759",
    "end": "478240"
  },
  {
    "text": "build process you'll find that there is",
    "start": "478240",
    "end": "480039"
  },
  {
    "text": "no error right uh because there's",
    "start": "480039",
    "end": "482039"
  },
  {
    "text": "nothing wrong with creating an array of",
    "start": "482039",
    "end": "483319"
  },
  {
    "text": "this size so if I output binary search",
    "start": "483319",
    "end": "485840"
  },
  {
    "text": "of let's say using our array and we're",
    "start": "485840",
    "end": "489080"
  },
  {
    "text": "going to search for the number 17 which",
    "start": "489080",
    "end": "491479"
  },
  {
    "text": "we know is in the array because uh 17",
    "start": "491479",
    "end": "494120"
  },
  {
    "text": "again I don't think there's any real",
    "start": "494120",
    "end": "495680"
  },
  {
    "text": "actual significance of the number 17 um",
    "start": "495680",
    "end": "498159"
  },
  {
    "text": "so if we run this what should happen is",
    "start": "498159",
    "end": "499879"
  },
  {
    "text": "it prints out true because we can find a",
    "start": "499879",
    "end": "503639"
  },
  {
    "text": "number and",
    "start": "503639",
    "end": "506120"
  },
  {
    "text": "it does right good now so suppose we",
    "start": "506120",
    "end": "509680"
  },
  {
    "text": "remove 17 from the the array so all I'm",
    "start": "509680",
    "end": "512760"
  },
  {
    "text": "going to do is in front of this line I'm",
    "start": "512760",
    "end": "514518"
  },
  {
    "text": "going to say array at 17 is going to be",
    "start": "514519",
    "end": "518880"
  },
  {
    "text": "16 right so what I'm doing there is just",
    "start": "518880",
    "end": "521200"
  },
  {
    "text": "saying there's going to be two 16s in a",
    "start": "521200",
    "end": "522518"
  },
  {
    "text": "row which is not ideal but it will be",
    "start": "522519",
    "end": "524039"
  },
  {
    "text": "fine if there's no longer a 17 in the",
    "start": "524039",
    "end": "525839"
  },
  {
    "text": "array this should return false cut to",
    "start": "525839",
    "end": "528480"
  },
  {
    "text": "the bit where it says false false right",
    "start": "528480",
    "end": "530760"
  },
  {
    "text": "so it's working so our binary search is",
    "start": "530760",
    "end": "533000"
  },
  {
    "text": "working now what would have happened is",
    "start": "533000",
    "end": "534920"
  },
  {
    "text": "someone implemented this based on some",
    "start": "534920",
    "end": "536640"
  },
  {
    "text": "textbook it works fine they cons",
    "start": "536640",
    "end": "539160"
  },
  {
    "text": "considered their job done for the day",
    "start": "539160",
    "end": "540200"
  },
  {
    "text": "and they went home right and then 9",
    "start": "540200",
    "end": "541880"
  },
  {
    "text": "years later someone goes a second right",
    "start": "541880",
    "end": "545000"
  },
  {
    "text": "so let's now look at what happens when",
    "start": "545000",
    "end": "548040"
  },
  {
    "text": "we're not looking for 17 we're looking",
    "start": "548040",
    "end": "549440"
  },
  {
    "text": "at a number right at the far other side",
    "start": "549440",
    "end": "551240"
  },
  {
    "text": "of the array where the numbers get much",
    "start": "551240",
    "end": "553279"
  },
  {
    "text": "bigger okay so what I'm going to do is",
    "start": "553279",
    "end": "556440"
  },
  {
    "text": "I'm going to say okay do a binary search",
    "start": "556440",
    "end": "559360"
  },
  {
    "text": "for the number 1 billion 190 million and",
    "start": "559360",
    "end": "565000"
  },
  {
    "text": "let's say uh 17 oh yeah all right",
    "start": "565000",
    "end": "570920"
  },
  {
    "text": "is that the right length of number we",
    "start": "570920",
    "end": "572440"
  },
  {
    "text": "will soon find out so I'm going to run",
    "start": "572440",
    "end": "574560"
  },
  {
    "text": "that and we'll see what",
    "start": "574560",
    "end": "576839"
  },
  {
    "text": "happens right we've got an exception",
    "start": "576839",
    "end": "578920"
  },
  {
    "text": "which is kind of funny enough what I",
    "start": "578920",
    "end": "580760"
  },
  {
    "text": "wanted to happen so our index of minus a",
    "start": "580760",
    "end": "584200"
  },
  {
    "text": "billion and something is out of bounds",
    "start": "584200",
    "end": "585880"
  },
  {
    "text": "for this array which is obviously out of",
    "start": "585880",
    "end": "587680"
  },
  {
    "text": "bounds because it doesn't allow negative",
    "start": "587680",
    "end": "589240"
  },
  {
    "text": "indices so why is that happened well",
    "start": "589240",
    "end": "591800"
  },
  {
    "text": "what happened was at some point we were",
    "start": "591800",
    "end": "594399"
  },
  {
    "text": "looking at this far end of the array and",
    "start": "594399",
    "end": "596640"
  },
  {
    "text": "L and R added up to be a number more",
    "start": "596640",
    "end": "598800"
  },
  {
    "text": "than",
    "start": "598800",
    "end": "600200"
  },
  {
    "text": "1.2 billion so now let's fix our code",
    "start": "600200",
    "end": "602519"
  },
  {
    "text": "and see if we can do a bit better so",
    "start": "602519",
    "end": "604200"
  },
  {
    "text": "what we're going to do is we're going to",
    "start": "604200",
    "end": "605040"
  },
  {
    "text": "take this line away good and we're going",
    "start": "605040",
    "end": "607800"
  },
  {
    "text": "to say okay we're going to do L plus",
    "start": "607800",
    "end": "610279"
  },
  {
    "text": "half a difference between them right",
    "start": "610279",
    "end": "611640"
  },
  {
    "text": "which is still the same exact result but",
    "start": "611640",
    "end": "613760"
  },
  {
    "text": "we haven't had to add them together so",
    "start": "613760",
    "end": "615440"
  },
  {
    "text": "we can do right minus left / two okay",
    "start": "615440",
    "end": "619160"
  },
  {
    "text": "like that and that should perform",
    "start": "619160",
    "end": "621120"
  },
  {
    "text": "exactly the same it should find 17 it",
    "start": "621120",
    "end": "622600"
  },
  {
    "text": "should not find 17 it should find this",
    "start": "622600",
    "end": "624600"
  },
  {
    "text": "number but hopefully won't crash this",
    "start": "624600",
    "end": "628040"
  },
  {
    "text": "time",
    "start": "628040",
    "end": "631040"
  },
  {
    "text": "true it found it and if we take that",
    "start": "631399",
    "end": "633240"
  },
  {
    "text": "number away we should get a false so if",
    "start": "633240",
    "end": "635560"
  },
  {
    "text": "we say array of I'm going to copy it",
    "start": "635560",
    "end": "639279"
  },
  {
    "text": "because I don't think I can type that a",
    "start": "639279",
    "end": "640480"
  },
  {
    "text": "second time there we go something like",
    "start": "640480",
    "end": "642480"
  },
  {
    "text": "that right this allows us to keep the",
    "start": "642480",
    "end": "644360"
  },
  {
    "text": "them in consecutive order this should",
    "start": "644360",
    "end": "646800"
  },
  {
    "text": "return",
    "start": "646800",
    "end": "649000"
  },
  {
    "text": "false there we go so the binary search",
    "start": "650839",
    "end": "653560"
  },
  {
    "text": "now works but it also works for any",
    "start": "653560",
    "end": "655760"
  },
  {
    "text": "numbers in your array even if your array",
    "start": "655760",
    "end": "658160"
  },
  {
    "text": "is up to the maximum size that Java",
    "start": "658160",
    "end": "659880"
  },
  {
    "text": "allows right which is which is nice",
    "start": "659880",
    "end": "662079"
  },
  {
    "text": "right now if you actually look at the",
    "start": "662079",
    "end": "663000"
  },
  {
    "text": "Java source code you'll find that this",
    "start": "663000",
    "end": "664360"
  },
  {
    "text": "this bug has been fixed as of about 2006",
    "start": "664360",
    "end": "667000"
  },
  {
    "text": "something like that so it was seen quite",
    "start": "667000",
    "end": "668760"
  },
  {
    "text": "a while ago but this bug did exist for",
    "start": "668760",
    "end": "670920"
  },
  {
    "text": "quite a long",
    "start": "670920",
    "end": "672600"
  },
  {
    "text": "time shouldn't just use it all the time",
    "start": "672600",
    "end": "675320"
  },
  {
    "text": "you use it when you're doing more",
    "start": "675320",
    "end": "677120"
  },
  {
    "text": "lookups than you are sorting right so if",
    "start": "677120",
    "end": "679120"
  },
  {
    "text": "you you know maybe you sort your data at",
    "start": "679120",
    "end": "680720"
  },
  {
    "text": "the beginning of a day you may want to",
    "start": "680720",
    "end": "682360"
  },
  {
    "text": "come up with a new one and say should",
    "start": "682360",
    "end": "684200"
  },
  {
    "text": "this belong to group one or group two so",
    "start": "684200",
    "end": "686079"
  },
  {
    "text": "before actually going there and then",
    "start": "686079",
    "end": "687920"
  },
  {
    "text": "doing this synthesizer of them could I",
    "start": "687920",
    "end": "692279"
  }
]