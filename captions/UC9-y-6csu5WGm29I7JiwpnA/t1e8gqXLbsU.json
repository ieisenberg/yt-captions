[
  {
    "text": "So, monads are a concept that was\ninvented in mathematics in the 1960s, and",
    "start": "0",
    "end": "5100"
  },
  {
    "text": "then it was rediscovered in computer\nscience in the 1990s. And what it gives",
    "start": "5100",
    "end": "9540"
  },
  {
    "text": "you, is a new way of thinking about\nprogramming with effects. And for me, this",
    "start": "9540",
    "end": "14460"
  },
  {
    "text": "is one of the most important new ideas\nin programming languages in the last 25",
    "start": "14460",
    "end": "17880"
  },
  {
    "text": "years. So that's what we're going to be\nlooking at today - programming with monads.",
    "start": "17880",
    "end": "23900"
  },
  {
    "text": "We're going to come at this using a\nsimple example, and the example that",
    "start": "23900",
    "end": "29428"
  },
  {
    "text": "we're going to look at is the idea of\nwriting a function that evaluates simple",
    "start": "29429",
    "end": "33750"
  },
  {
    "text": "expressions. And I'm going to use Haskell\nfor this, but it doesn't matter if you don't",
    "start": "33750",
    "end": "38399"
  },
  {
    "text": "know anything about Haskell, because\nwe're going to use it in a very simple",
    "start": "38399",
    "end": "41190"
  },
  {
    "text": "way, and I'm going to explain everything\nas we're going along. So, what we're going",
    "start": "41190",
    "end": "45660"
  },
  {
    "text": "to start with, is by defining a simple\ndatatype for the kind of expressions",
    "start": "45660",
    "end": "50160"
  },
  {
    "text": "that we're going to be evaluating. So,\nwe'll use the data keyword in Haskell,",
    "start": "50160",
    "end": "54989"
  },
  {
    "text": "which introduces a new data type, and\nthen we're going to define a new data",
    "start": "54989",
    "end": "58620"
  },
  {
    "text": "type for expressions. And then there's\ntwo things that an expression can be. It",
    "start": "58620",
    "end": "63899"
  },
  {
    "text": "can either be an integer value, so we'll\nwrite that down - we have Val of an Int.",
    "start": "63899",
    "end": "68729"
  },
  {
    "text": "Or, it can be the division of two\nsub-expressions. So we've got two",
    "start": "68729",
    "end": "73438"
  },
  {
    "text": "constructors here in our\ndata type - we've got Val,",
    "start": "73439",
    "end": "75780"
  },
  {
    "text": "which builds expressions from integers, and\nwe've got Div, which builds expressions",
    "start": "75780",
    "end": "79950"
  },
  {
    "text": "from two sub-expressions. So, just to\nreiterate what what's actually going on",
    "start": "79950",
    "end": "83250"
  },
  {
    "text": "here, we're declaring a new data type\ncalled Expr, and it's got two new",
    "start": "83250",
    "end": "87840"
  },
  {
    "text": "constructors - one called Val, which\ntakes an integer parameter, and one",
    "start": "87840",
    "end": "92280"
  },
  {
    "text": "called Div, which takes two\nsub-expressions as parameters as well.",
    "start": "92280",
    "end": "96840"
  },
  {
    "text": "So basically what we're working with is\nexpressions that are built up from",
    "start": "96840",
    "end": "100770"
  },
  {
    "text": "integer values using a simple division\noperator. So, many of you may not be",
    "start": "100770",
    "end": "106078"
  },
  {
    "text": "familiar of this kind of syntax, so let's\nhave a couple of examples of values of",
    "start": "106079",
    "end": "110100"
  },
  {
    "text": "this data type, so that we make sure\neveryone's on the same page. So, what I'm",
    "start": "110100",
    "end": "114540"
  },
  {
    "text": "going to do here, is draw a little table.\nSo, on one side, on the left-hand side, I'm",
    "start": "114540",
    "end": "119340"
  },
  {
    "text": "going to have what we would normally\nwrite down in mathematics. And then on",
    "start": "119340",
    "end": "122968"
  },
  {
    "text": "the right-hand side, we'll think how\nwould you translate this into a value in",
    "start": "122969",
    "end": "127860"
  },
  {
    "text": "this Haskell data type? So, let's have\nthree simple examples here - we'll have",
    "start": "127860",
    "end": "131970"
  },
  {
    "text": "one, and we'll have\nsix divided by two, and",
    "start": "131970",
    "end": "135420"
  },
  {
    "text": "let's do one more example, we'll have six\ndivided by three divided by one. So, these are",
    "start": "135420",
    "end": "140609"
  },
  {
    "text": "simple expressions built up from integers\nusing a division operator. But, we're",
    "start": "140609",
    "end": "145019"
  },
  {
    "text": "writing Haskell programs today, so let's\nthink how do these things actually get",
    "start": "145019",
    "end": "148319"
  },
  {
    "text": "represented as values of our expression\ndata type? So, the first one is very",
    "start": "148319",
    "end": "152189"
  },
  {
    "text": "simple - if we want to represent the value\none, we just need to use the Val tag, so we",
    "start": "152189",
    "end": "156870"
  },
  {
    "text": "write Val of one. If we want to have an\nexpression like six divided by two, well it's",
    "start": "156870",
    "end": "161430"
  },
  {
    "text": "a division, so we have a Div at the top\nlevel, and then we have two values - we",
    "start": "161430",
    "end": "165959"
  },
  {
    "text": "have Val six, and Val two. And actually, I'll\nleave the last one is a little exercise",
    "start": "165959",
    "end": "170459"
  },
  {
    "text": "for you here, so you can try this one for\nyourself - how do you represent this as a",
    "start": "170459",
    "end": "173730"
  },
  {
    "text": "value in Haskell? Well, you're gonna need\ntwo divisions, you're going to need three",
    "start": "173730",
    "end": "177750"
  },
  {
    "text": "Val constructors, and then a bunch of\nbrackets. So, this is the basic idea - ",
    "start": "177750",
    "end": "182010"
  },
  {
    "text": "we've got simple expressions built up\nfrom integers using division, and we want",
    "start": "182010",
    "end": "187379"
  },
  {
    "text": "to think about how do we write a program\nto evaluate these expressions? Let's",
    "start": "187379",
    "end": "191700"
  },
  {
    "text": "write a program to do that. So, we're\ngoing to write an evaluator, and it's",
    "start": "191700",
    "end": "196379"
  },
  {
    "text": "going to be a program, or a function in\nthis case, that takes an expression as",
    "start": "196379",
    "end": "201090"
  },
  {
    "text": "input, and what it's going to give back\nis the integer value of that expression.",
    "start": "201090",
    "end": "206549"
  },
  {
    "text": "And there's going to be two cases here,\nbecause we have two kinds of expressions.",
    "start": "206549",
    "end": "210359"
  },
  {
    "text": "We have a case for values, and we need to\nfigure out what to do with that, which",
    "start": "210359",
    "end": "214829"
  },
  {
    "text": "we'll do in a moment. And then we have a\ncase for division, and we need to think",
    "start": "214829",
    "end": "219780"
  },
  {
    "text": "what to do with that. So, we've got the\nskeleton here of a program, and then we",
    "start": "219780",
    "end": "223109"
  },
  {
    "text": "just need to fill in the details. So, how\ndo you evaluate an integer value? Well,",
    "start": "223109",
    "end": "227250"
  },
  {
    "text": "that's very simple, you just give back\nthe number - so if I had Val of one,",
    "start": "227250",
    "end": "231599"
  },
  {
    "text": "it's value is just one. And then how do I\nevaluate a division? Well, these two",
    "start": "231599",
    "end": "236099"
  },
  {
    "text": "expressions here, x and y, these could be\nas complicated as you wish. So, we need to",
    "start": "236099",
    "end": "240569"
  },
  {
    "text": "evaluate these recursively. So what we\nwould do, is evaluate the first one, x, and",
    "start": "240569",
    "end": "246569"
  },
  {
    "text": "that will give us an integer. And then\nwe'll evaluate the second one, y, and that",
    "start": "246569",
    "end": "251040"
  },
  {
    "text": "will give us another integer. And then,\nall we need to do is divide one by the",
    "start": "251040",
    "end": "255989"
  },
  {
    "text": "other. So, this is a nice simple program\nthat evaluates these kind of expressions",
    "start": "255989",
    "end": "260729"
  },
  {
    "text": "built up from integers using division - we\njust have a simple recursive program, two",
    "start": "260729",
    "end": "264419"
  },
  {
    "text": "cases, and everything looks\nfine. But there's a",
    "start": "264419",
    "end": "266610"
  },
  {
    "text": "problem with this program, and the\nproblem is that it may crash - because if",
    "start": "266610",
    "end": "270719"
  },
  {
    "text": "you divide a number by zero, then that's\nundefined, so this program will just",
    "start": "270720",
    "end": "276420"
  },
  {
    "text": "crash. So, in particular, if the value of\nthe expression y here was zero, then this",
    "start": "276420",
    "end": "281580"
  },
  {
    "text": "division operator would crash, and you\nget some kind of runtime error. So we",
    "start": "281580",
    "end": "285060"
  },
  {
    "text": "don't want our programs to crash, so we\nthink, what do we do to fix this problem?",
    "start": "285060",
    "end": "289590"
  },
  {
    "text": "First of all, what we're going to do is\nwe're going to define a safe version of",
    "start": "289590",
    "end": "293610"
  },
  {
    "text": "the division operator, which doesn't\ncrash anymore. Because that's basically",
    "start": "293610",
    "end": "297210"
  },
  {
    "text": "the root of the problem here - division by\nzero gives an undefined result, and the",
    "start": "297210",
    "end": "301410"
  },
  {
    "text": "program is going to crash. So, let's\ndefine a safe version of the division",
    "start": "301410",
    "end": "305040"
  },
  {
    "text": "operator. We're going to define a\nfunction called safediv, and it's going",
    "start": "305040",
    "end": "308850"
  },
  {
    "text": "to take a couple of integers, and it's\ngoing to give back Maybe an integer. And",
    "start": "308850",
    "end": "313680"
  },
  {
    "text": "Maybe is the way that we deal with\nthings that can possibly fail in Haskell.",
    "start": "313680",
    "end": "318030"
  },
  {
    "text": "So, the type here is not Int to Int to Int,\nit's Int to Int to Maybe Int, because",
    "start": "318030",
    "end": "322440"
  },
  {
    "text": "division may fail. And we'll see how this\nMaybe type works in a moment. So, how do",
    "start": "322440",
    "end": "327870"
  },
  {
    "text": "we actually define safediv? We take two\nintegers, n and m, and then what we'll do",
    "start": "327870",
    "end": "333090"
  },
  {
    "text": "is check - is the second of these zero?\nBecause that's the case when things",
    "start": "333090",
    "end": "336810"
  },
  {
    "text": "would go wrong. So, if m happened to be\nzero, then we will give back the result",
    "start": "336810",
    "end": "343020"
  },
  {
    "text": "Nothing. Okay, so Nothing is one of the\nconstructors in the Maybe type. If m is",
    "start": "343020",
    "end": "347430"
  },
  {
    "text": "not zero, what we're going to do is Just\ngive back the result of dividing. So, Just",
    "start": "347430",
    "end": "352979"
  },
  {
    "text": "is another constructor in the Maybe type -\nMaybe only has two constructors, Nothing,",
    "start": "352980",
    "end": "356940"
  },
  {
    "text": "which represents things that have gone\nwrong, or in our case division by zero,",
    "start": "356940",
    "end": "360570"
  },
  {
    "text": "and Just, which represent things that\nhave gone fine. In this case, we actually",
    "start": "360570",
    "end": "364320"
  },
  {
    "text": "just get back the result of dividing one\nnumber by the other. So, what we have here",
    "start": "364320",
    "end": "368460"
  },
  {
    "text": "now is a safe version of the division\noperator, which is explicitly checking",
    "start": "368460",
    "end": "372419"
  },
  {
    "text": "for the case when the program would have\ncrashed. So this doesn't crash anymore, it",
    "start": "372420",
    "end": "376560"
  },
  {
    "text": "returns one of two values - either Nothing\nif things go wrong, or Just of the",
    "start": "376560",
    "end": "380940"
  },
  {
    "text": "division if things have gone fine. So,\nwhat we can do then, with this safe",
    "start": "380940",
    "end": "384960"
  },
  {
    "text": "division operator, is rewrite our little\nevaluator program to make sure that it",
    "start": "384960",
    "end": "390509"
  },
  {
    "text": "doesn't crash. So, our new evaluator is\ngoing to have a slightly different type",
    "start": "390510",
    "end": "395460"
  },
  {
    "text": "than before. So before, the original\nprogram just took an expression",
    "start": "395460",
    "end": "400840"
  },
  {
    "text": "as input, and then it gave back an\ninteger. But that program could crash. The",
    "start": "400840",
    "end": "405160"
  },
  {
    "text": "new evaluator takes an expression as\ninput as before, but now it Maybe gives",
    "start": "405160",
    "end": "409120"
  },
  {
    "text": "you an integer, because it could fail, it\ncould have division by zero. So, how do we",
    "start": "409120",
    "end": "413620"
  },
  {
    "text": "rewrite this evaluator? So, we'll do the\ntwo cases again - write down the skeleton,",
    "start": "413620",
    "end": "418780"
  },
  {
    "text": "and then we'll fill in the details. So, in\nthe base case, we can't just return n",
    "start": "418780",
    "end": "423310"
  },
  {
    "text": "this time, because we've got to return a\nMaybe value. And there's only two things",
    "start": "423310",
    "end": "426910"
  },
  {
    "text": "we could return, either Nothing or Just,\nand in this case the right thing to do",
    "start": "426910",
    "end": "430419"
  },
  {
    "text": "is to return Just of n, because if you\nevaluate a value that's always going to",
    "start": "430419",
    "end": "434620"
  },
  {
    "text": "succeed, so we use a success tag, which\nis Just, and then we have the integer",
    "start": "434620",
    "end": "438610"
  },
  {
    "text": "value sitting in here. If we have a\ndivision, now we need to do a bit more",
    "start": "438610",
    "end": "441788"
  },
  {
    "text": "work, because when we evaluate x that may\nfail, when we evaluate y that may fail,",
    "start": "441789",
    "end": "447729"
  },
  {
    "text": "and then when we do the division that\nmay fail. So, we're going to need to do a",
    "start": "447729",
    "end": "450910"
  },
  {
    "text": "little bit of checking and management of\nfailure. So, what we're going to do, is",
    "start": "450910",
    "end": "454389"
  },
  {
    "text": "when we evaluate a division, first of all,\nwe'll do a case analysis on the result",
    "start": "454389",
    "end": "460539"
  },
  {
    "text": "of evaluating x. And that could be one of\ntwo things - it could either be Nothing, in",
    "start": "460539",
    "end": "466150"
  },
  {
    "text": "which case we're going to do something,\nor we could get Just of some number, in",
    "start": "466150",
    "end": "471160"
  },
  {
    "text": "which case we're going to do something.  So,\nthere's two cases to consider - when we",
    "start": "471160",
    "end": "474669"
  },
  {
    "text": "evaluate the first parameter x, either it\nsucceeds or it fails. So in the failure",
    "start": "474669",
    "end": "479050"
  },
  {
    "text": "case, if we get back Nothing, the only\nsensible thing to do is just to say, well",
    "start": "479050",
    "end": "482978"
  },
  {
    "text": "if evaluation of x fails, the evaluation\nof the whole division fails. So we'll",
    "start": "482979",
    "end": "487060"
  },
  {
    "text": "just return Nothing as well. In the Just\ncase, then we need to evaluate the second",
    "start": "487060",
    "end": "491500"
  },
  {
    "text": "parameter y. So, what we're going to do is\ndo another case analysis, we'll do a case",
    "start": "491500",
    "end": "495940"
  },
  {
    "text": "eval of y, and then again there's two\npossible outcomes which we could have",
    "start": "495940",
    "end": "500440"
  },
  {
    "text": "here - either we could have Nothing, which\nmeans it failed, or we could have Just of m,",
    "start": "500440",
    "end": "506020"
  },
  {
    "text": "some other number, in which case we've\nsucceeded. Then again, we need to think",
    "start": "506020",
    "end": "510129"
  },
  {
    "text": "what do we do in each of these two cases.\nSo, in the first case, if the evaluation",
    "start": "510130",
    "end": "514240"
  },
  {
    "text": "of y fails, the only sensible thing to do\nis say, well, we fail as well. In the",
    "start": "514240",
    "end": "518620"
  },
  {
    "text": "second case, we've now got to\nsuccessfully evaluated expressions - x has",
    "start": "518620",
    "end": "522909"
  },
  {
    "text": "given the result n, y has given the\nresult m, and now we can do the safe",
    "start": "522909",
    "end": "527320"
  },
  {
    "text": "division. So, in this case we just do\nsafediv.  Now we have a working evaluator.",
    "start": "527320",
    "end": "532630"
  },
  {
    "text": "We started off with a two-line program,\nwhich kind of did the essence of",
    "start": "532630",
    "end": "536220"
  },
  {
    "text": "evaluation, but it didn't check for\nthings going wrong - it didn't check for a",
    "start": "536220",
    "end": "539980"
  },
  {
    "text": "division by zero.  Now we've\nfixed the problem completely, we",
    "start": "539980",
    "end": "543130"
  },
  {
    "text": "have a program which works, this program\nwill never crash, it will always give a",
    "start": "543130",
    "end": "546370"
  },
  {
    "text": "well-defined result, either Nothing or\nJust, but there's a bit of a problem with",
    "start": "546370",
    "end": "549970"
  },
  {
    "text": "this program, in that it's a bit too\nlong. It's a bit too verbose, there's",
    "start": "549970",
    "end": "554290"
  },
  {
    "text": "quite a lot of noise in here, I can\nhardly see what's going on anymore,",
    "start": "554290",
    "end": "557350"
  },
  {
    "text": "because it's all of this management of\nfailure. So, we can look at this program,",
    "start": "557350",
    "end": "560560"
  },
  {
    "text": "and think - how can we make this program\nbetter? And how can we make it more like",
    "start": "560560",
    "end": "564940"
  },
  {
    "text": "the original program, that didn't work,\nbut still maintain the fact that this",
    "start": "564940",
    "end": "569710"
  },
  {
    "text": "actually does the right thing? And the\nidea here, is we're going to observe a",
    "start": "569710",
    "end": "574540"
  },
  {
    "text": "common pattern. So, when you look at this\nprogram, you can see quite clearly we're",
    "start": "574540",
    "end": "578860"
  },
  {
    "text": "doing the same thing twice - we're doing\ntwo case analyses. What we're doing, is",
    "start": "578860",
    "end": "582579"
  },
  {
    "text": "doing a case analysis on the result of\nevaluating x, and if it's Nothing we give",
    "start": "582580",
    "end": "586720"
  },
  {
    "text": "back Nothing, and if it's Just, we do\nsomething with the result. And then we do",
    "start": "586720",
    "end": "590379"
  },
  {
    "text": "exactly the same thing with eval of y -\nwe're doing a case analysis on the",
    "start": "590380",
    "end": "594190"
  },
  {
    "text": "result of evaluating y, if that gives\nNothing we give back Nothing, and if it's",
    "start": "594190",
    "end": "598780"
  },
  {
    "text": "a Just, we do something with it.  So,\na very common idea in computing is",
    "start": "598780",
    "end": "602470"
  },
  {
    "text": "when you see the same things multiple\ntimes, you abstract them out, and have",
    "start": "602470",
    "end": "606939"
  },
  {
    "text": "them as a definition. And that's what\nwe're going to do here. So, let's draw a",
    "start": "606940",
    "end": "611050"
  },
  {
    "text": "little picture first, to capture the\npattern which we've seen twice. So, the",
    "start": "611050",
    "end": "615550"
  },
  {
    "text": "pattern we have here, is we're doing a\ncase analysis on something, so let me",
    "start": "615550",
    "end": "620649"
  },
  {
    "text": "just draw as a little box - we don't know\nwhat's in there, we're doing a case",
    "start": "620650",
    "end": "623410"
  },
  {
    "text": "analysis on something. And, there's two\ncases - if it's Nothing, we give back",
    "start": "623410",
    "end": "627759"
  },
  {
    "text": "Nothing, and if we get Just of some value x,\nthen what we're going to do is we're",
    "start": "627760",
    "end": "633220"
  },
  {
    "text": "going to process it in some way, we're\ngoing to apply some other function to x.",
    "start": "633220",
    "end": "637810"
  },
  {
    "text": "So, this is the pattern which we've seen\ntwice. In the first case, we had eval of x",
    "start": "637810",
    "end": "642730"
  },
  {
    "text": "sitting here, and in the second case, we\nhad eval of y sitting here, but this is",
    "start": "642730",
    "end": "646540"
  },
  {
    "text": "the same pattern that we see two\ntimes in the new evaluator",
    "start": "646540",
    "end": "649899"
  },
  {
    "text": "which we've just written. So, what we\ncan do now, is abstract this out as a",
    "start": "649900",
    "end": "653770"
  },
  {
    "text": "definition. And the idea here, is that\nwe're going to give names to these boxes.",
    "start": "653770",
    "end": "657580"
  },
  {
    "text": "So, this box is a Maybe value - it's going\nto be either Nothing or a Just, so we'll",
    "start": "657580",
    "end": "662230"
  },
  {
    "text": "call it m. And this box is going\nto be a function, it's going",
    "start": "662230",
    "end": "665019"
  },
  {
    "text": "process the result in the case we're\nsuccessful, so we'll call this f. So, we",
    "start": "665020",
    "end": "669580"
  },
  {
    "text": "can turn this picture here into a\ndefinition now, and then we can use it to",
    "start": "669580",
    "end": "673270"
  },
  {
    "text": "make our program simpler.  So, the\ndefinition we're going to have is,",
    "start": "673270",
    "end": "676510"
  },
  {
    "text": "if we have some Maybe value, feeding into,\nor in sequence with, some function f. So,",
    "start": "676510",
    "end": "683830"
  },
  {
    "text": "the operator we're defining here is\nthis funny sequencing symbol, and we'll",
    "start": "683830",
    "end": "687160"
  },
  {
    "text": "back to that in a second. What we're\ngoing to do, is a case analysis - we're",
    "start": "687160",
    "end": "691060"
  },
  {
    "text": "going to look at what the Maybe\nvalue is - if it's Nothing,",
    "start": "691060",
    "end": "694000"
  },
  {
    "text": "we'll give back Nothing, and if it's Just\nof x, we'll apply the function to it. Okay,",
    "start": "694000",
    "end": "699730"
  },
  {
    "text": "so we'll just captured the pattern, which\nwe've seen twice, by a definition now. So,",
    "start": "699730",
    "end": "704079"
  },
  {
    "text": "we have some Maybe value, then, or in\nsequence with, some function f, and all",
    "start": "704080",
    "end": "708880"
  },
  {
    "text": "we're going to do is look at what the\nvalue of the Maybe is - if it's failed,",
    "start": "708880",
    "end": "712780"
  },
  {
    "text": "we'll fail, if it succeeds, we pass the\nresult to the function f. It's just the",
    "start": "712780",
    "end": "717010"
  },
  {
    "text": "idea of abstracting out a common pattern\nas a definition. So, now we can use this",
    "start": "717010",
    "end": "722950"
  },
  {
    "text": "definition to make our program simpler.\nSo, let's rewrite our evaluator once",
    "start": "722950",
    "end": "727750"
  },
  {
    "text": "again. The type will remain the same -\nit takes in an expression as input, and",
    "start": "727750",
    "end": "733690"
  },
  {
    "text": "it's going to give back a Maybe value,\nas before. But the definition is going",
    "start": "733690",
    "end": "737320"
  },
  {
    "text": "to be a bit simpler this time. So, let's\nwrite down the skeleton. So, if we",
    "start": "737320",
    "end": "741190"
  },
  {
    "text": "evaluate a value, we're going to do\nsomething. If we evaluate a division,",
    "start": "741190",
    "end": "745300"
  },
  {
    "text": "we're going to do something. So, what do\nwe write in the base case? Well, I could",
    "start": "745300",
    "end": "749080"
  },
  {
    "text": "write Just of n here, but actually I'm\ngoing to abstract that as well - rather",
    "start": "749080",
    "end": "753490"
  },
  {
    "text": "than writing Just of n, I'm going to\nwrite return of n, so really what I'm",
    "start": "753490",
    "end": "757660"
  },
  {
    "text": "making is a little kind of side\ndefinition, that says return of x is the",
    "start": "757660",
    "end": "761949"
  },
  {
    "text": "same as Just of x. And then, what are we\ndoing in the division case? Well, we're",
    "start": "761950",
    "end": "766660"
  },
  {
    "text": "going to do an evaluation first - we're\ngoing to evaluate x, and then if that's",
    "start": "766660",
    "end": "772089"
  },
  {
    "text": "successful, using our little sequencing\noperator, we're going to feed the result",
    "start": "772090",
    "end": "776710"
  },
  {
    "text": "into a function. So that function is\ngoing to take the result, n, that comes",
    "start": "776710",
    "end": "781450"
  },
  {
    "text": "from evaluating that, and then it's going\nto evaluate y. So, if we do eval of y, if",
    "start": "781450",
    "end": "787270"
  },
  {
    "text": "that's successful, we're going to feed\nthat result into a function. And here",
    "start": "787270",
    "end": "791620"
  },
  {
    "text": "again, I'm using the lambda notation,\nwhich we did a video about previously,",
    "start": "791620",
    "end": "794980"
  },
  {
    "text": "you can have a look back at that. So, if\nthese two things are both successful,",
    "start": "794980",
    "end": "799000"
  },
  {
    "text": "we'll have two values, n and m, and then\nall we do is call safediv with them,",
    "start": "799000",
    "end": "804520"
  },
  {
    "text": "then close the brackets. So, this program\nhere is equivalent to the program which",
    "start": "804520",
    "end": "809920"
  },
  {
    "text": "we wrote, which had all the nested case\nanalyses. But, that's all been abstracted",
    "start": "809920",
    "end": "814089"
  },
  {
    "text": "away now - it's all been kind of\nabstracted into return, and the",
    "start": "814090",
    "end": "817480"
  },
  {
    "text": "sequencing, and safediv. So, this is a\nnicer program now, but still I'm not",
    "start": "817480",
    "end": "822550"
  },
  {
    "text": "entirely happy with this. There's\nstill some complexity in there - we're",
    "start": "822550",
    "end": "825220"
  },
  {
    "text": "still using the funny lambda notation,\nwe're still using this funny symbol,",
    "start": "825220",
    "end": "828850"
  },
  {
    "text": "which we've introduced. Maybe I can make\nit even simpler? So, what a language like",
    "start": "828850",
    "end": "833920"
  },
  {
    "text": "Haskell gives you, is a special notation\nfor writing programs which have this",
    "start": "833920",
    "end": "838720"
  },
  {
    "text": "kind of form. And this is called the do\nnotation. So let me write this in do",
    "start": "838720",
    "end": "843579"
  },
  {
    "text": "notation, and then we'll come back to\nwhat this has all got to do with monads.",
    "start": "843580",
    "end": "847540"
  },
  {
    "text": "So, let's write this program in an even\nmore simple form, and this will be our",
    "start": "847540",
    "end": "851019"
  },
  {
    "text": "final program. We take an expression as\ninput, and it's going to Maybe deliver",
    "start": "851020",
    "end": "855760"
  },
  {
    "text": "us an integer. And the base case will not\nchange, so we'll get return of n. But the",
    "start": "855760",
    "end": "862480"
  },
  {
    "text": "recursive case is going to become a bit\nsimpler, because we use the do notation",
    "start": "862480",
    "end": "866380"
  },
  {
    "text": "as a shorthand for using the sequencing\noperator which we've introduced. So, I can",
    "start": "866380",
    "end": "871270"
  },
  {
    "text": "say, if I evaluate a division, what I'm\ngoing to do, and this is the keyword,",
    "start": "871270",
    "end": "875680"
  },
  {
    "text": "which just gives you a shorthand for\nexactly what we've just written, it's",
    "start": "875680",
    "end": "878830"
  },
  {
    "text": "not anything special, it's just shorthand,\njust syntactic sugar. What we're going to",
    "start": "878830",
    "end": "882580"
  },
  {
    "text": "do, is take the result n, from the result\nof evaluating x, if it's successful. Then,",
    "start": "882580",
    "end": "888670"
  },
  {
    "text": "we'll take the result m, from the result\nof evaluating y, if that's successful. And",
    "start": "888670",
    "end": "894250"
  },
  {
    "text": "then, we will call safediv. And this is\nour final program, and I'm much happier",
    "start": "894250",
    "end": "900010"
  },
  {
    "text": "with this one. I mean, it looks kind of\nsimilar to the original program, a",
    "start": "900010",
    "end": "902980"
  },
  {
    "text": "similar level of complexity, but all the\nfailure management is now handled for us",
    "start": "902980",
    "end": "907690"
  },
  {
    "text": "automatically. The failure\nis happening behind the",
    "start": "907690",
    "end": "910390"
  },
  {
    "text": "scenes with the do notation, and with\nsafediv, but we don't need to see that",
    "start": "910390",
    "end": "913810"
  },
  {
    "text": "when we're reading this program. This is\na much nicer program than the last one,",
    "start": "913810",
    "end": "917140"
  },
  {
    "text": "because we've kind of abstracted away\nfrom a lot of the detail. So, you can look",
    "start": "917140",
    "end": "921520"
  },
  {
    "text": "at a program like this, and I've hardly\nmentioned the word monads in the last",
    "start": "921520",
    "end": "925000"
  },
  {
    "text": "ten minutes, you can say what's this\nactually got to do with monads? Well, what",
    "start": "925000",
    "end": "928030"
  },
  {
    "text": "we've actually done,\nis we've rediscovered what's",
    "start": "928030",
    "end": "931570"
  },
  {
    "text": "known as the Maybe monad. The\nMaybe monad is three things -",
    "start": "931570",
    "end": "935980"
  },
  {
    "text": "it's the Maybe type, or really the Maybe\ntype constructor, because it takes a",
    "start": "935980",
    "end": "940060"
  },
  {
    "text": "parameter. So you can have Maybe of an\ninteger, or maybe of a Boolean, or maybe of",
    "start": "940060",
    "end": "943600"
  },
  {
    "text": "whatever you like. And then it's two\nfunctions - it's the function called",
    "start": "943600",
    "end": "947050"
  },
  {
    "text": "return, and it's the sequencing operator\nwhich we introduced. And we can think",
    "start": "947050",
    "end": "952060"
  },
  {
    "text": "about what are the types of these things?\nSo what return does, is it takes a thing",
    "start": "952060",
    "end": "956260"
  },
  {
    "text": "of any old type, a - could be an integer,\ncould be a Boolean, could be whatever you",
    "start": "956260",
    "end": "960220"
  },
  {
    "text": "like. And it converts it into a Maybe\nvalue. So, in our case, this just took an",
    "start": "960220",
    "end": "966879"
  },
  {
    "text": "integer like five, and we return Just of\nfive. Okay, so that's all the return was",
    "start": "966880",
    "end": "972040"
  },
  {
    "text": "doing, it's basically just applying Just.\nAnd what it gives you, is a bridge",
    "start": "972040",
    "end": "975459"
  },
  {
    "text": "between the pure world of values here,\nand the impure world of things that",
    "start": "975460",
    "end": "981190"
  },
  {
    "text": "could go wrong - so it's a bridge from\npure to impure, if you like. And what",
    "start": "981190",
    "end": "984550"
  },
  {
    "text": "sequencing does, is it gives you a way of\nsequencing things - so you give it",
    "start": "984550",
    "end": "988330"
  },
  {
    "text": "something which can fail, a Maybe a, and\nthen you give it a function that tells",
    "start": "988330",
    "end": "992740"
  },
  {
    "text": "you what to do with that a, if you\nsucceed - so an a to Maybe b. And then,",
    "start": "992740",
    "end": "998020"
  },
  {
    "text": "finally, what you're going to get back is a\nMaybe b. Okay, and this is all that",
    "start": "998020",
    "end": "1003150"
  },
  {
    "text": "a monad is essentially - a monad is some\nkind of type constructor, like Maybe, or",
    "start": "1003150",
    "end": "1007740"
  },
  {
    "text": "List, or something else, as there's many\nother examples, together with two functions",
    "start": "1007740",
    "end": "1011430"
  },
  {
    "text": "that have these types here. So, what we've\nessentially done is rediscovered what's",
    "start": "1011430",
    "end": "1016500"
  },
  {
    "text": "called the Maybe monad. What's the point\nof all of this? I mean, what's the point?",
    "start": "1016500",
    "end": "1020460"
  },
  {
    "text": "We seem to have gone through quite a lot\nof steps, to write in the end quite a",
    "start": "1020460",
    "end": "1024630"
  },
  {
    "text": "simple program. What was the actual point\nhere? So there's four points which I",
    "start": "1024630",
    "end": "1028530"
  },
  {
    "text": "would like to emphasize here. So, the\nfirst point, is that the same idea we've",
    "start": "1028530",
    "end": "1033360"
  },
  {
    "text": "seen works for other effects as well -\nit's not specific to Maybe, which",
    "start": "1033360",
    "end": "1038429"
  },
  {
    "text": "captures failure. The same idea captures\nother kinds, or you can use with, other",
    "start": "1038430",
    "end": "1042360"
  },
  {
    "text": "kinds of effects like input/output, like\nmutable state, like reading from",
    "start": "1042360",
    "end": "1047100"
  },
  {
    "text": "environments, like writing to log files,\nnon-determinism. All sorts of other",
    "start": "1047100",
    "end": "1051690"
  },
  {
    "text": "things which you think of as being\neffects in programming languages fit",
    "start": "1051690",
    "end": "1055139"
  },
  {
    "text": "exactly the same pattern. So, monads kind\nof give you a uniform framework for",
    "start": "1055140",
    "end": "1059640"
  },
  {
    "text": "thinking about programming with effects.\nAnother important point is that it supports",
    "start": "1059640",
    "end": "1064830"
  },
  {
    "text": "pure programming with effects.\nI mean, Haskell is a pure",
    "start": "1064830",
    "end": "1067200"
  },
  {
    "text": "language - functions just take inputs, and\nproduce outputs, they don't have any kind",
    "start": "1067200",
    "end": "1071610"
  },
  {
    "text": "of side effects at all. But you need to\nhave side effects to write real",
    "start": "1071610",
    "end": "1074910"
  },
  {
    "text": "programs. So, what monads give you is a\nway of doing impure things, like proper",
    "start": "1074910",
    "end": "1081270"
  },
  {
    "text": "side effects, like input/output, in a pure\nprogramming language like Haskell. Another",
    "start": "1081270",
    "end": "1085650"
  },
  {
    "text": "important point here, is that the use of\nthe effects is explicit in the types.",
    "start": "1085650",
    "end": "1090600"
  },
  {
    "text": "When I wrote the\nevaluator which didn't fail,",
    "start": "1090600",
    "end": "1093870"
  },
  {
    "text": "it took an expression as input, and it\ndelivered Maybe of an integer. So, the",
    "start": "1093870",
    "end": "1098670"
  },
  {
    "text": "Maybe in the type is telling me that\nthis program may fail. So, this is the",
    "start": "1098670",
    "end": "1103440"
  },
  {
    "text": "idea of being explicit about what kind\nof effects, or side effects, that your",
    "start": "1103440",
    "end": "1107460"
  },
  {
    "text": "programs can have in the types. And this\nis a very, very powerful idea. And the",
    "start": "1107460",
    "end": "1111570"
  },
  {
    "text": "last thing is, it's a little bit strange,\nbut it's particularly interesting, it's",
    "start": "1111570",
    "end": "1114750"
  },
  {
    "text": "the idea of writing functions that work\nfor any effect - we might call this kind of",
    "start": "1114750",
    "end": "1118770"
  },
  {
    "text": "effect polymorphism. So, a simple example\nof this would be maybe you have a",
    "start": "1118770",
    "end": "1123660"
  },
  {
    "text": "sequence of things, which can have some\neffects, and you want to run them all one",
    "start": "1123660",
    "end": "1128160"
  },
  {
    "text": "after the other. You could write a\ngeneric function, in a language like",
    "start": "1128160",
    "end": "1131490"
  },
  {
    "text": "Haskell which supports monads, which\nwould take a sequence of effects of any",
    "start": "1131490",
    "end": "1135240"
  },
  {
    "text": "kind, any monadic type, and it would run\nthem for you. So this is a very, very",
    "start": "1135240",
    "end": "1139440"
  },
  {
    "text": "powerful idea, and languages like Haskell\nhave libraries of kind of generic effect",
    "start": "1139440",
    "end": "1144450"
  },
  {
    "text": "functions, which are very useful. So,\nthat's basically all I want to say. Just",
    "start": "1144450",
    "end": "1148110"
  },
  {
    "text": "going back to the start, I think the idea\nof programming with monads is one of the",
    "start": "1148110",
    "end": "1151770"
  },
  {
    "text": "most important developments in\nprogramming languages in the last 25",
    "start": "1151770",
    "end": "1154560"
  },
  {
    "text": "years - I find this particularly\nfascinating. We've only really touched on",
    "start": "1154560",
    "end": "1159090"
  },
  {
    "text": "the surface here, and if you want to know\na little bit more, I can do a bit of a",
    "start": "1159090",
    "end": "1163260"
  },
  {
    "text": "plug - I have a new book which came out\nfairly recently, Programming in Haskell,",
    "start": "1163260",
    "end": "1167730"
  },
  {
    "text": "and this has got a chapter specifically\nabout this, which goes into much more",
    "start": "1167730",
    "end": "1172890"
  },
  {
    "text": "detail. I've only really touched on the\nsurface, there's lots of things I didn't",
    "start": "1172890",
    "end": "1175470"
  },
  {
    "text": "say, which maybe you need to know to\nwrite real programs using this stuff. So,",
    "start": "1175470",
    "end": "1179340"
  },
  {
    "text": "you could have a look in the book to \nfind out more about that.  This is an",
    "start": "1179340",
    "end": "1185460"
  },
  {
    "text": "interesting point, it causes quite quite\nsome problems for people learning",
    "start": "1185460",
    "end": "1188909"
  },
  {
    "text": "languages like Haskell, because Haskell\npeople tend to use the proper",
    "start": "1188910",
    "end": "1193260"
  },
  {
    "text": "mathematical terms for things, and those\nterms are often quite foreign to",
    "start": "1193260",
    "end": "1196830"
  },
  {
    "text": "programmers. And it does cause quite a\nlot of difficulty - so there's some people",
    "start": "1196830",
    "end": "1200760"
  },
  {
    "text": "have the view that we shouldn't actually\nhave used the term monad, maybe we ",
    "start": "1200760",
    "end": "1204270"
  },
  {
    "text": "should have called them effects, or\nsomething like that. So, just use the more",
    "start": "1204270",
    "end": "1207870"
  },
  {
    "text": "kind of human, or a familiar term. But\nit is an issue. But I'm actually of",
    "start": "1207870",
    "end": "1211860"
  },
  {
    "text": "the point of view that, if we know the\nproper term for something, we should call",
    "start": "1211860",
    "end": "1216690"
  },
  {
    "text": "it that something, and the people who\nare using it should just learn that term.",
    "start": "1216690",
    "end": "1220110"
  },
  {
    "text": "I mean, it's what it is, it's a monad,\nand we should kind of pay homage to",
    "start": "1220110",
    "end": "1224580"
  },
  {
    "text": "the mathematicians for discovering this idea\nfirst, and not kind of reappropriate it as",
    "start": "1224580",
    "end": "1227309"
  },
  {
    "text": "if it was discovered independently - the\nmathematicians discovered this, they should get ",
    "start": "1227310",
    "end": "1232920"
  },
  {
    "text": "credit for that, and so I'm quite happy\nwith the word monad. But, it does cause",
    "start": "1232920",
    "end": "1237780"
  },
  {
    "text": "some problems when people are learning\nprogramming languages, because it does",
    "start": "1237780",
    "end": "1240210"
  },
  {
    "text": "sound a bit scary, and there's lots more\nscary terms like this in programming as",
    "start": "1240210",
    "end": "1243990"
  },
  {
    "text": "well. This is all built into\nlanguages like Haskell. So, there's",
    "start": "1243990",
    "end": "1255450"
  },
  {
    "text": "lots of libraries for programming\nwith monadic things - you",
    "start": "1255450",
    "end": "1258510"
  },
  {
    "text": "don't need to define a lot of the\ninfrastructure, like Maybe, and return, and",
    "start": "1258510",
    "end": "1262920"
  },
  {
    "text": "the sequencing, for yourself - this is\nkind of built in as libraries. You can",
    "start": "1262920",
    "end": "1267120"
  },
  {
    "text": "define your own ones if you want to, but\nthere's maybe kind of fifteen or twenty",
    "start": "1267120",
    "end": "1270300"
  },
  {
    "text": "monads which are just lying around\nwaiting for people to use. And if you",
    "start": "1270300",
    "end": "1273570"
  },
  {
    "text": "want to use multiple different monads\nin your programs, maybe you need two",
    "start": "1273570",
    "end": "1276899"
  },
  {
    "text": "different kinds of effects, maybe you need\nthings that can fail, and you need some",
    "start": "1276900",
    "end": "1280200"
  },
  {
    "text": "state, there's ways of coping with that\nkind of stuff as well. So, you don't need",
    "start": "1280200",
    "end": "1283230"
  },
  {
    "text": "to do all yourself,\nit's mostly built in for you.",
    "start": "1283230",
    "end": "1287460"
  }
]