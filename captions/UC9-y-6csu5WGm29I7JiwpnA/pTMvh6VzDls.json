[
  {
    "start": "0",
    "end": "57000"
  },
  {
    "text": "previously you've done a video about",
    "start": "80",
    "end": "1760"
  },
  {
    "text": "garbage collection we need resources for",
    "start": "1760",
    "end": "3679"
  },
  {
    "text": "our programs to run but if we hang on to",
    "start": "3679",
    "end": "5640"
  },
  {
    "text": "those resources for too long that's a",
    "start": "5640",
    "end": "7520"
  },
  {
    "text": "problem cuz no one else can use them and",
    "start": "7520",
    "end": "9040"
  },
  {
    "text": "eventually we run out of memory garbage",
    "start": "9040",
    "end": "10840"
  },
  {
    "text": "collection before which is one way of",
    "start": "10840",
    "end": "14200"
  },
  {
    "text": "solving that problem the difficulty with",
    "start": "14200",
    "end": "16198"
  },
  {
    "text": "it as was kind of mentioned in that",
    "start": "16199",
    "end": "18000"
  },
  {
    "text": "video was",
    "start": "18000",
    "end": "19680"
  },
  {
    "text": "that that in itself takes memory and CPU",
    "start": "19680",
    "end": "23519"
  },
  {
    "text": "time to run which isn't great because if",
    "start": "23519",
    "end": "26199"
  },
  {
    "text": "you're trying to really run something",
    "start": "26199",
    "end": "28720"
  },
  {
    "text": "fast you want to reduce the amounts of",
    "start": "28720",
    "end": "31000"
  },
  {
    "text": "resources you're using as much as",
    "start": "31000",
    "end": "32640"
  },
  {
    "text": "possible so what we're going to talk",
    "start": "32640",
    "end": "33920"
  },
  {
    "text": "about today is a concept called",
    "start": "33920",
    "end": "36160"
  },
  {
    "text": "ra uh resource acquisition is",
    "start": "36160",
    "end": "39840"
  },
  {
    "text": "initialization and specifically we're",
    "start": "39840",
    "end": "41520"
  },
  {
    "text": "going to talk about how a language",
    "start": "41520",
    "end": "42760"
  },
  {
    "text": "called rust has built that into its",
    "start": "42760",
    "end": "45800"
  },
  {
    "text": "language in order",
    "start": "45800",
    "end": "48079"
  },
  {
    "text": "to do the most it possibly can to stop",
    "start": "48079",
    "end": "51399"
  },
  {
    "text": "the",
    "start": "51399",
    "end": "52239"
  },
  {
    "text": "programmer making mistakes with",
    "start": "52239",
    "end": "56358"
  },
  {
    "text": "memory it's not a niche language but",
    "start": "56760",
    "end": "59239"
  },
  {
    "start": "57000",
    "end": "205000"
  },
  {
    "text": "it's probably not as um well known as",
    "start": "59239",
    "end": "62359"
  },
  {
    "text": "maybe some others so uh we could show a",
    "start": "62359",
    "end": "64680"
  },
  {
    "text": "brief uh hello world if you want if I",
    "start": "64680",
    "end": "67119"
  },
  {
    "text": "just make a new file here hello. RS",
    "start": "67119",
    "end": "70759"
  },
  {
    "text": "we'll start with a main",
    "start": "70759",
    "end": "72080"
  },
  {
    "text": "function so it's a bit SE like then is",
    "start": "72080",
    "end": "74400"
  },
  {
    "text": "it a little bit SE like yeah it",
    "start": "74400",
    "end": "76040"
  },
  {
    "text": "definitely wants to borrow from that",
    "start": "76040",
    "end": "79200"
  },
  {
    "text": "General type of C Java that General",
    "start": "79200",
    "end": "82560"
  },
  {
    "text": "syntax so if I just print hello world",
    "start": "82560",
    "end": "86119"
  },
  {
    "text": "here and close it there so you can see",
    "start": "86119",
    "end": "88720"
  },
  {
    "text": "that the basic structure of it is going",
    "start": "88720",
    "end": "90479"
  },
  {
    "text": "to look very familiar we use FN to",
    "start": "90479",
    "end": "93640"
  },
  {
    "text": "declare a function instead of starting",
    "start": "93640",
    "end": "95079"
  },
  {
    "text": "with a return type if I wanted to return",
    "start": "95079",
    "end": "96840"
  },
  {
    "text": "something that would come after the",
    "start": "96840",
    "end": "98479"
  },
  {
    "text": "function name uh but the basic syntax of",
    "start": "98479",
    "end": "101439"
  },
  {
    "text": "it doesn't look too different the first",
    "start": "101439",
    "end": "104399"
  },
  {
    "text": "place where it starts to look a little",
    "start": "104399",
    "end": "105799"
  },
  {
    "text": "bit different from languages like C C++",
    "start": "105799",
    "end": "109240"
  },
  {
    "text": "is the way we declare variables instead",
    "start": "109240",
    "end": "111200"
  },
  {
    "text": "of putting the type first then the",
    "start": "111200",
    "end": "112840"
  },
  {
    "text": "variable name then the value we use this",
    "start": "112840",
    "end": "115280"
  },
  {
    "text": "keyword let with a variable name then",
    "start": "115280",
    "end": "118240"
  },
  {
    "text": "I'm going to specify the type so we're",
    "start": "118240",
    "end": "119600"
  },
  {
    "text": "going to have an",
    "start": "119600",
    "end": "121640"
  },
  {
    "text": "i32 and let's give it the value 10 so",
    "start": "121640",
    "end": "125000"
  },
  {
    "text": "the syntax is a little bit different",
    "start": "125000",
    "end": "126560"
  },
  {
    "text": "compared to what you're used to in C in",
    "start": "126560",
    "end": "128200"
  },
  {
    "text": "Java nothing too different so far the",
    "start": "128200",
    "end": "131400"
  },
  {
    "text": "first interesting bit comes in uh this",
    "start": "131400",
    "end": "133360"
  },
  {
    "text": "is the very first bit where rust starts",
    "start": "133360",
    "end": "135519"
  },
  {
    "text": "to try and stop you from making mistakes",
    "start": "135519",
    "end": "138120"
  },
  {
    "text": "uh is the fact that if you want to be",
    "start": "138120",
    "end": "139560"
  },
  {
    "text": "allowed to change a variable you have to",
    "start": "139560",
    "end": "141400"
  },
  {
    "text": "explicitly tell it you want to do that",
    "start": "141400",
    "end": "143640"
  },
  {
    "text": "uh there's a distinction uh between a",
    "start": "143640",
    "end": "145640"
  },
  {
    "text": "normal variable and one that you're",
    "start": "145640",
    "end": "147560"
  },
  {
    "text": "allowed to mutate if I want to mutator",
    "start": "147560",
    "end": "150519"
  },
  {
    "text": "variable I have to explicitly say let",
    "start": "150519",
    "end": "152519"
  },
  {
    "text": "mute and let's have y i32 is 20 some",
    "start": "152519",
    "end": "158440"
  },
  {
    "text": "other languages do this as well like",
    "start": "158440",
    "end": "160360"
  },
  {
    "text": "cotlin you've got a difference between",
    "start": "160360",
    "end": "161920"
  },
  {
    "text": "vowels and vs I think typescript you",
    "start": "161920",
    "end": "164519"
  },
  {
    "text": "have uh let for a mutable variable and",
    "start": "164519",
    "end": "167360"
  },
  {
    "text": "const for one that you can't change a",
    "start": "167360",
    "end": "169319"
  },
  {
    "text": "few other languages picking this up as",
    "start": "169319",
    "end": "170680"
  },
  {
    "text": "well but that's the first place where",
    "start": "170680",
    "end": "172440"
  },
  {
    "text": "rust is going to start trying to help",
    "start": "172440",
    "end": "174720"
  },
  {
    "text": "you avoid making mistakes if you want to",
    "start": "174720",
    "end": "177360"
  },
  {
    "text": "change a variable you have to explicitly",
    "start": "177360",
    "end": "179319"
  },
  {
    "text": "let it change the variable and that's",
    "start": "179319",
    "end": "182280"
  },
  {
    "text": "going to help guarantee that your",
    "start": "182280",
    "end": "183599"
  },
  {
    "text": "variables have got the",
    "start": "183599",
    "end": "185120"
  },
  {
    "text": "values you think they have I'm going to",
    "start": "185120",
    "end": "187560"
  },
  {
    "text": "go with to to C++ first because it's",
    "start": "187560",
    "end": "190000"
  },
  {
    "text": "going to be easier to uh demonstrate",
    "start": "190000",
    "end": "193159"
  },
  {
    "text": "particularly to people who haven't seen",
    "start": "193159",
    "end": "194400"
  },
  {
    "text": "rust before and then we'll switch over",
    "start": "194400",
    "end": "197239"
  },
  {
    "text": "to showing how rust has embedded that in",
    "start": "197239",
    "end": "200519"
  },
  {
    "text": "the language C++ you have to do it",
    "start": "200519",
    "end": "202440"
  },
  {
    "text": "yourself rust it's pretty much built in",
    "start": "202440",
    "end": "205760"
  },
  {
    "start": "205000",
    "end": "275000"
  },
  {
    "text": "the basic idea of RA I I've never I",
    "start": "205760",
    "end": "209439"
  },
  {
    "text": "don't know if there I don't know if",
    "start": "209439",
    "end": "210840"
  },
  {
    "text": "there's an established way of shortening",
    "start": "210840",
    "end": "212799"
  },
  {
    "text": "that like you could you could say I or",
    "start": "212799",
    "end": "214840"
  },
  {
    "text": "Ray or Ry um you know what I'm going to",
    "start": "214840",
    "end": "218879"
  },
  {
    "text": "call it Ray um if that's wrong doubtless",
    "start": "218879",
    "end": "222480"
  },
  {
    "text": "I'll find out in the",
    "start": "222480",
    "end": "223799"
  },
  {
    "text": "comments um so the basic idea of r a i i",
    "start": "223799",
    "end": "228120"
  },
  {
    "text": "is that when you construct an",
    "start": "228120",
    "end": "230400"
  },
  {
    "text": "object you allocate the memory you need",
    "start": "230400",
    "end": "233000"
  },
  {
    "text": "for that object uh at the time you",
    "start": "233000",
    "end": "235560"
  },
  {
    "text": "create it and then you make sure it's",
    "start": "235560",
    "end": "238400"
  },
  {
    "text": "destroyed when the object is destroyed",
    "start": "238400",
    "end": "241840"
  },
  {
    "text": "the idea being then that the lifetime of",
    "start": "241840",
    "end": "245360"
  },
  {
    "text": "the memory you request is tied to the",
    "start": "245360",
    "end": "250200"
  },
  {
    "text": "lifetime of the object that's using it",
    "start": "250200",
    "end": "253200"
  },
  {
    "text": "means you don't have to worry about",
    "start": "253200",
    "end": "255120"
  },
  {
    "text": "freeing it elsewhere it means you don't",
    "start": "255120",
    "end": "257720"
  },
  {
    "text": "have to worry about allocating it",
    "start": "257720",
    "end": "259680"
  },
  {
    "text": "elsewhere when I create my object I",
    "start": "259680",
    "end": "263040"
  },
  {
    "text": "allocate my memory when I destroy my",
    "start": "263040",
    "end": "265600"
  },
  {
    "text": "object my memory gets freed for me it's",
    "start": "265600",
    "end": "268360"
  },
  {
    "text": "a load off my mind as a programmer um it",
    "start": "268360",
    "end": "271039"
  },
  {
    "text": "means I have much less to worry about",
    "start": "271039",
    "end": "272960"
  },
  {
    "text": "dangling memory so if I do a brief",
    "start": "272960",
    "end": "275720"
  },
  {
    "start": "275000",
    "end": "601000"
  },
  {
    "text": "example in C++ let's have a class called",
    "start": "275720",
    "end": "279000"
  },
  {
    "text": "Bob and Bob is going to hold on to some",
    "start": "279000",
    "end": "281960"
  },
  {
    "text": "integers for me so we create a class",
    "start": "281960",
    "end": "283960"
  },
  {
    "text": "variable uh called n which is a pointer",
    "start": "283960",
    "end": "287479"
  },
  {
    "text": "to some integers now we'll have the",
    "start": "287479",
    "end": "290680"
  },
  {
    "text": "Constructor which is what we're going to",
    "start": "290680",
    "end": "292680"
  },
  {
    "text": "call to initialize Bob and I'm going to",
    "start": "292680",
    "end": "296160"
  },
  {
    "text": "pass the number of integers I want Bob",
    "start": "296160",
    "end": "297960"
  },
  {
    "text": "to hold as an argument",
    "start": "297960",
    "end": "300440"
  },
  {
    "text": "and then we can say",
    "start": "300440",
    "end": "302880"
  },
  {
    "text": "this n equals",
    "start": "302880",
    "end": "305919"
  },
  {
    "text": "new",
    "start": "305919",
    "end": "307560"
  },
  {
    "text": "int",
    "start": "307560",
    "end": "309840"
  },
  {
    "text": "X okay so I'm saying that when I create",
    "start": "309840",
    "end": "312800"
  },
  {
    "text": "a new Bob I'm going to allocate enough",
    "start": "312800",
    "end": "315000"
  },
  {
    "text": "memory to hold uh X integers in C that",
    "start": "315000",
    "end": "320120"
  },
  {
    "text": "would be a call to maloc um C++ has a a",
    "start": "320120",
    "end": "324360"
  },
  {
    "text": "keyword to do that so makes it slightly",
    "start": "324360",
    "end": "325960"
  },
  {
    "text": "nicer to program but it's pretty much",
    "start": "325960",
    "end": "327479"
  },
  {
    "text": "doing the same thing underneath",
    "start": "327479",
    "end": "330440"
  },
  {
    "text": "then in my Destructor which is something",
    "start": "330440",
    "end": "332280"
  },
  {
    "text": "that c has a Destructor is a function",
    "start": "332280",
    "end": "334120"
  },
  {
    "text": "that gets called whenever the variable",
    "start": "334120",
    "end": "336880"
  },
  {
    "text": "gets freed or it goes out of scope and",
    "start": "336880",
    "end": "339360"
  },
  {
    "text": "in my",
    "start": "339360",
    "end": "340280"
  },
  {
    "text": "Destructor I am going to delete this",
    "start": "340280",
    "end": "345759"
  },
  {
    "text": "n and finish my",
    "start": "345759",
    "end": "348360"
  },
  {
    "text": "class so what we've just done there as",
    "start": "348360",
    "end": "350960"
  },
  {
    "text": "soon as I create a bob I'm going to",
    "start": "350960",
    "end": "352800"
  },
  {
    "text": "allocate enough memory to store all of",
    "start": "352800",
    "end": "354840"
  },
  {
    "text": "Bob's numbers and when Bob goes out of",
    "start": "354840",
    "end": "357000"
  },
  {
    "text": "scope or Bob gets deleted Bob releases",
    "start": "357000",
    "end": "359680"
  },
  {
    "text": "is all of the memory he was using to",
    "start": "359680",
    "end": "361039"
  },
  {
    "text": "hold his numbers and that's really great",
    "start": "361039",
    "end": "363199"
  },
  {
    "text": "because it means that I don't have to",
    "start": "363199",
    "end": "364840"
  },
  {
    "text": "keep track anymore of Bob's memory I",
    "start": "364840",
    "end": "368440"
  },
  {
    "text": "don't have to remember that Bob's",
    "start": "368440",
    "end": "370639"
  },
  {
    "text": "holding on to a load of inages soon as",
    "start": "370639",
    "end": "373400"
  },
  {
    "text": "Bob goes out of scope Bob drops his",
    "start": "373400",
    "end": "376319"
  },
  {
    "text": "memory reduce the chance for memory",
    "start": "376319",
    "end": "378919"
  },
  {
    "text": "leaks that's",
    "start": "378919",
    "end": "380960"
  },
  {
    "text": "awesome uh the one obviously slight",
    "start": "380960",
    "end": "383240"
  },
  {
    "text": "drawback is that I still have to",
    "start": "383240",
    "end": "385360"
  },
  {
    "text": "implement that myself um I still have to",
    "start": "385360",
    "end": "388800"
  },
  {
    "text": "write that myself self um so it still",
    "start": "388800",
    "end": "391560"
  },
  {
    "text": "puts some of the work on me as a",
    "start": "391560",
    "end": "393360"
  },
  {
    "text": "programmer to remember to make sure I've",
    "start": "393360",
    "end": "395560"
  },
  {
    "text": "done that properly it doesn't save me",
    "start": "395560",
    "end": "397680"
  },
  {
    "text": "the problem it just means I'm only doing",
    "start": "397680",
    "end": "400039"
  },
  {
    "text": "it in one place and does sometimes",
    "start": "400039",
    "end": "401720"
  },
  {
    "text": "people cut Corners with that uh I don't",
    "start": "401720",
    "end": "404400"
  },
  {
    "text": "know if people will cut corners but it's",
    "start": "404400",
    "end": "406160"
  },
  {
    "text": "definitely possible where maybe Bob's",
    "start": "406160",
    "end": "409880"
  },
  {
    "text": "holding a lot of different kinds of",
    "start": "409880",
    "end": "411199"
  },
  {
    "text": "memory for different things if I just",
    "start": "411199",
    "end": "413880"
  },
  {
    "text": "forget if I miss one of",
    "start": "413880",
    "end": "415879"
  },
  {
    "text": "those um in the process or",
    "start": "415879",
    "end": "420280"
  },
  {
    "text": "this works great so long as absolutely",
    "start": "420280",
    "end": "422840"
  },
  {
    "text": "every class uses this",
    "start": "422840",
    "end": "425440"
  },
  {
    "text": "pattern if I forget to do that for",
    "start": "425440",
    "end": "428039"
  },
  {
    "text": "something and I just use a plain old",
    "start": "428039",
    "end": "430120"
  },
  {
    "text": "pointer",
    "start": "430120",
    "end": "431120"
  },
  {
    "text": "somewhere then memory leaks can still",
    "start": "431120",
    "end": "434319"
  },
  {
    "text": "happen it it's sort of if done properly",
    "start": "434319",
    "end": "438360"
  },
  {
    "text": "it makes it much harder to get memory",
    "start": "438360",
    "end": "440319"
  },
  {
    "text": "leaks but it's still contingent on me as",
    "start": "440319",
    "end": "444280"
  },
  {
    "text": "a programmer doing my job",
    "start": "444280",
    "end": "446520"
  },
  {
    "text": "properly uh and implementing it properly",
    "start": "446520",
    "end": "449160"
  },
  {
    "text": "mist mes can still happen right one of",
    "start": "449160",
    "end": "453120"
  },
  {
    "text": "the biggest actually is that this stops",
    "start": "453120",
    "end": "455800"
  },
  {
    "text": "one of the problems with memory",
    "start": "455800",
    "end": "457280"
  },
  {
    "text": "management it stops the problem of",
    "start": "457280",
    "end": "459080"
  },
  {
    "text": "memory leak which is where I forget to",
    "start": "459080",
    "end": "461960"
  },
  {
    "text": "freeze",
    "start": "461960",
    "end": "462960"
  },
  {
    "text": "something it doesn't solve the problem",
    "start": "462960",
    "end": "466520"
  },
  {
    "text": "of uh what you call a dangling pointer",
    "start": "466520",
    "end": "468919"
  },
  {
    "text": "which is where I try and access memory",
    "start": "468919",
    "end": "471240"
  },
  {
    "text": "after it's been",
    "start": "471240",
    "end": "472759"
  },
  {
    "text": "deleted this doesn't stop that so if I",
    "start": "472759",
    "end": "475520"
  },
  {
    "text": "add a method to Bob that's going to be",
    "start": "475520",
    "end": "479520"
  },
  {
    "text": "in pointer get n and get",
    "start": "479520",
    "end": "483520"
  },
  {
    "text": "n is just going to return that pointer",
    "start": "483520",
    "end": "486520"
  },
  {
    "text": "to the memory that Bob's holding right",
    "start": "486520",
    "end": "489080"
  },
  {
    "text": "maybe I want to use that somewhere",
    "start": "489080",
    "end": "490879"
  },
  {
    "text": "else then in my main function let's have",
    "start": "490879",
    "end": "493800"
  },
  {
    "text": "int main I'm going to make a new Bob",
    "start": "493800",
    "end": "497240"
  },
  {
    "text": "it's going to hold five numbers then I'm",
    "start": "497240",
    "end": "498919"
  },
  {
    "text": "going to have a int pointer that I'm",
    "start": "498919",
    "end": "501759"
  },
  {
    "text": "going to call X's that's going to have B",
    "start": "501759",
    "end": "505759"
  },
  {
    "text": "get",
    "start": "505759",
    "end": "507000"
  },
  {
    "text": "n then I'm going to delete",
    "start": "507000",
    "end": "510280"
  },
  {
    "text": "Bob and for good measure print",
    "start": "510280",
    "end": "514640"
  },
  {
    "text": "F the first number in x's and I should",
    "start": "514640",
    "end": "519599"
  },
  {
    "text": "probably include the right header as",
    "start": "519599",
    "end": "521320"
  },
  {
    "text": "well to make that compile so what we've",
    "start": "521320",
    "end": "524000"
  },
  {
    "text": "just done is we've created a bob bob",
    "start": "524000",
    "end": "526760"
  },
  {
    "text": "allocated his",
    "start": "526760",
    "end": "528240"
  },
  {
    "text": "memory we then got a ref got a pointer",
    "start": "528240",
    "end": "531120"
  },
  {
    "text": "to that memory so that I can do",
    "start": "531120",
    "end": "532440"
  },
  {
    "text": "something else with it then I deleted",
    "start": "532440",
    "end": "534760"
  },
  {
    "text": "Bob and Bob was very good Bob uses um",
    "start": "534760",
    "end": "538079"
  },
  {
    "text": "Ray and deletes his memory problem is",
    "start": "538079",
    "end": "542519"
  },
  {
    "text": "I've still got another pointer to that",
    "start": "542519",
    "end": "544680"
  },
  {
    "text": "memory when I try and print out the",
    "start": "544680",
    "end": "546800"
  },
  {
    "text": "first elements of that memory it might",
    "start": "546800",
    "end": "548640"
  },
  {
    "text": "work it might not this is a very simple",
    "start": "548640",
    "end": "550959"
  },
  {
    "text": "example I've not done anything else to",
    "start": "550959",
    "end": "552680"
  },
  {
    "text": "the memory in between so this will",
    "start": "552680",
    "end": "554040"
  },
  {
    "text": "probably work if this was a more",
    "start": "554040",
    "end": "555760"
  },
  {
    "text": "complicated program someone else might",
    "start": "555760",
    "end": "558160"
  },
  {
    "text": "have used that memory and then at best",
    "start": "558160",
    "end": "561320"
  },
  {
    "text": "I'm going to get",
    "start": "561320",
    "end": "562480"
  },
  {
    "text": "garbage at worst I might",
    "start": "562480",
    "end": "565000"
  },
  {
    "text": "crash right so Ray solves one of the",
    "start": "565000",
    "end": "568560"
  },
  {
    "text": "problems with memory managements but it",
    "start": "568560",
    "end": "570760"
  },
  {
    "text": "doesn't fix any of the others I've still",
    "start": "570760",
    "end": "573360"
  },
  {
    "text": "got to be thinking carefully about is my",
    "start": "573360",
    "end": "576279"
  },
  {
    "text": "memory still in use am I still allowed",
    "start": "576279",
    "end": "579240"
  },
  {
    "text": "to use it that's where rust comes in and",
    "start": "579240",
    "end": "582399"
  },
  {
    "text": "that's where rust tries to Hold Your",
    "start": "582399",
    "end": "585760"
  },
  {
    "text": "Hand a bit and stop you from making",
    "start": "585760",
    "end": "588480"
  },
  {
    "text": "these kinds of",
    "start": "588480",
    "end": "589959"
  },
  {
    "text": "mistakes so let's write a a simple bit",
    "start": "589959",
    "end": "594000"
  },
  {
    "text": "of rust uh that's hopefully going to",
    "start": "594000",
    "end": "596519"
  },
  {
    "text": "Showcase these same sorts of things and",
    "start": "596519",
    "end": "598920"
  },
  {
    "text": "then I'll explain some of the concepts",
    "start": "598920",
    "end": "600560"
  },
  {
    "text": "behind how it's working firstly Ross",
    "start": "600560",
    "end": "602920"
  },
  {
    "text": "doesn't have classes as such it just",
    "start": "602920",
    "end": "604360"
  },
  {
    "text": "uses structs that's probably not too",
    "start": "604360",
    "end": "606640"
  },
  {
    "text": "important but let's have a struct called",
    "start": "606640",
    "end": "609880"
  },
  {
    "text": "Bob and Bob is going to have uh n is we",
    "start": "609880",
    "end": "616279"
  },
  {
    "text": "use a vector of I",
    "start": "616279",
    "end": "619959"
  },
  {
    "text": "32s so same as the C++ version Bob is",
    "start": "619959",
    "end": "623440"
  },
  {
    "text": "going to hang on to some number of",
    "start": "623440",
    "end": "625839"
  },
  {
    "text": "numbers for",
    "start": "625839",
    "end": "627200"
  },
  {
    "text": "me um it's got a vector and then when I",
    "start": "627200",
    "end": "631600"
  },
  {
    "text": "make Bob when I create a new",
    "start": "631600",
    "end": "635800"
  },
  {
    "text": "Bob uh let's just say we're going to",
    "start": "636880",
    "end": "640519"
  },
  {
    "text": "return a bob where N is a new Vector so",
    "start": "640519",
    "end": "645519"
  },
  {
    "text": "I'm making a",
    "start": "645519",
    "end": "646920"
  },
  {
    "text": "bob and when Bob is made he's going to",
    "start": "646920",
    "end": "649639"
  },
  {
    "text": "allocate some memory on the heat for me",
    "start": "649639",
    "end": "651680"
  },
  {
    "text": "to store his numbers and that's pretty",
    "start": "651680",
    "end": "653440"
  },
  {
    "text": "much all I have to do to make sure that",
    "start": "653440",
    "end": "654920"
  },
  {
    "text": "Bob's memory always remains",
    "start": "654920",
    "end": "657880"
  },
  {
    "text": "valid the way this",
    "start": "657880",
    "end": "660519"
  },
  {
    "text": "works every variable in Rust has",
    "start": "660519",
    "end": "663480"
  },
  {
    "text": "something called an owner right every",
    "start": "663480",
    "end": "665920"
  },
  {
    "text": "piece of memory uh has what's called an",
    "start": "665920",
    "end": "669440"
  },
  {
    "text": "owner and the owner as you imagine from",
    "start": "669440",
    "end": "671880"
  },
  {
    "text": "the name the owner is the person who has",
    "start": "671880",
    "end": "675440"
  },
  {
    "text": "control of that",
    "start": "675440",
    "end": "677600"
  },
  {
    "text": "memory every bit of memory has exactly",
    "start": "677600",
    "end": "680240"
  },
  {
    "text": "one",
    "start": "680240",
    "end": "681680"
  },
  {
    "text": "owner and like we just talked about with",
    "start": "681680",
    "end": "684240"
  },
  {
    "text": "Ray as soon as the owner gets deleted",
    "start": "684240",
    "end": "687639"
  },
  {
    "text": "goes out of scope or whatever all the",
    "start": "687639",
    "end": "690079"
  },
  {
    "text": "memory that the that the owner owns gets",
    "start": "690079",
    "end": "695240"
  },
  {
    "text": "destroyed okay so there's our uh Ray",
    "start": "695240",
    "end": "698639"
  },
  {
    "text": "principle and that's just baked into the",
    "start": "698639",
    "end": "700639"
  },
  {
    "text": "language right if I now write a main",
    "start": "700639",
    "end": "704040"
  },
  {
    "text": "function for my rust program here let's",
    "start": "704040",
    "end": "709120"
  },
  {
    "text": "have let's n equal",
    "start": "709120",
    "end": "712320"
  },
  {
    "text": "Bob",
    "start": "712320",
    "end": "715040"
  },
  {
    "text": "new",
    "start": "715040",
    "end": "716600"
  },
  {
    "text": "then I will",
    "start": "716600",
    "end": "719560"
  },
  {
    "text": "and the function there I mean this is a",
    "start": "719560",
    "end": "722200"
  },
  {
    "text": "main function so I mean the program is",
    "start": "722200",
    "end": "724680"
  },
  {
    "text": "finished at this point so everything",
    "start": "724680",
    "end": "725880"
  },
  {
    "text": "gets freed but you know what let's call",
    "start": "725880",
    "end": "728360"
  },
  {
    "text": "this funk one and let's then call Funk",
    "start": "728360",
    "end": "732079"
  },
  {
    "text": "one from a different main function just",
    "start": "732079",
    "end": "734880"
  },
  {
    "text": "to make the case there we go we'll do it",
    "start": "734880",
    "end": "737720"
  },
  {
    "text": "like that so n was created inside Funk",
    "start": "737720",
    "end": "740760"
  },
  {
    "text": "one which is our new Bob Bob allocates",
    "start": "740760",
    "end": "743480"
  },
  {
    "text": "memory for his numbers once Funk one",
    "start": "743480",
    "end": "745839"
  },
  {
    "text": "returns our variable n has gone out of",
    "start": "745839",
    "end": "747959"
  },
  {
    "text": "scope so n gets deleted",
    "start": "747959",
    "end": "750440"
  },
  {
    "text": "the memory that Bob was holding gets",
    "start": "750440",
    "end": "753079"
  },
  {
    "text": "deleted at the same time fine that's Ray",
    "start": "753079",
    "end": "756680"
  },
  {
    "start": "755000",
    "end": "981000"
  },
  {
    "text": "this all hinges on maintaining this",
    "start": "756680",
    "end": "759480"
  },
  {
    "text": "property of uh one bit of memory having",
    "start": "759480",
    "end": "763680"
  },
  {
    "text": "one",
    "start": "763680",
    "end": "765199"
  },
  {
    "text": "owner okay we need to make sure that",
    "start": "765199",
    "end": "767680"
  },
  {
    "text": "that that stays true because the moment",
    "start": "767680",
    "end": "769720"
  },
  {
    "text": "a bit of memory has two owners the whole",
    "start": "769720",
    "end": "772720"
  },
  {
    "text": "system collapses right and that's when",
    "start": "772720",
    "end": "774600"
  },
  {
    "text": "we can end up if we go back to the C++",
    "start": "774600",
    "end": "777639"
  },
  {
    "text": "for a moment",
    "start": "777639",
    "end": "779680"
  },
  {
    "text": "Bob had a pointer to that block of",
    "start": "779680",
    "end": "781839"
  },
  {
    "text": "memory that we called n and then I also",
    "start": "781839",
    "end": "784680"
  },
  {
    "text": "got a second pointer to the same block",
    "start": "784680",
    "end": "786920"
  },
  {
    "text": "of memory our variable B owned that data",
    "start": "786920",
    "end": "791399"
  },
  {
    "text": "our variable X's also owned that data",
    "start": "791399",
    "end": "794680"
  },
  {
    "text": "and that's where the problem came in so",
    "start": "794680",
    "end": "796519"
  },
  {
    "text": "rust needs to stop us from doing that",
    "start": "796519",
    "end": "800519"
  },
  {
    "text": "there's a few way Concepts that we want",
    "start": "800519",
    "end": "802720"
  },
  {
    "text": "to talk about that rust",
    "start": "802720",
    "end": "805040"
  },
  {
    "text": "uses",
    "start": "805040",
    "end": "807120"
  },
  {
    "text": "okay the first thing we need to talk",
    "start": "807120",
    "end": "809920"
  },
  {
    "text": "about is moving let's go back to Funk",
    "start": "809920",
    "end": "812440"
  },
  {
    "text": "One n is my new Bob and maybe I want to",
    "start": "812440",
    "end": "815399"
  },
  {
    "text": "get a second variable uh that refers to",
    "start": "815399",
    "end": "817600"
  },
  {
    "text": "Bob okay so I'm going to say let m equal",
    "start": "817600",
    "end": "820720"
  },
  {
    "text": "n I'm allowed to do that m is a new",
    "start": "820720",
    "end": "823360"
  },
  {
    "text": "variable and I'm going to assign it to",
    "start": "823360",
    "end": "825320"
  },
  {
    "text": "the same thing as",
    "start": "825320",
    "end": "827360"
  },
  {
    "text": "n",
    "start": "827360",
    "end": "828880"
  },
  {
    "text": "okay that might look like M and N are",
    "start": "828880",
    "end": "832920"
  },
  {
    "text": "now looking at the same memory but the",
    "start": "832920",
    "end": "835320"
  },
  {
    "text": "first thing that rust is doing behind",
    "start": "835320",
    "end": "836480"
  },
  {
    "text": "the scenes it's done what's called a",
    "start": "836480",
    "end": "837959"
  },
  {
    "text": "move",
    "start": "837959",
    "end": "839600"
  },
  {
    "text": "because we're only allowed one owner to",
    "start": "839600",
    "end": "841279"
  },
  {
    "text": "a piece of data that's sort of made a",
    "start": "841279",
    "end": "843560"
  },
  {
    "text": "copy as it quite the opposite it has",
    "start": "843560",
    "end": "847120"
  },
  {
    "text": "absolutely not made a copy because that",
    "start": "847120",
    "end": "850360"
  },
  {
    "text": "would mean well you can get a copy but",
    "start": "850360",
    "end": "853360"
  },
  {
    "text": "what it's done in this case m is now the",
    "start": "853360",
    "end": "858959"
  },
  {
    "text": "owner okay and N not allowed to use",
    "start": "858959",
    "end": "863399"
  },
  {
    "text": "anymore if I was to try now and do",
    "start": "863399",
    "end": "865800"
  },
  {
    "text": "something with n the compiler would tell",
    "start": "865800",
    "end": "868320"
  },
  {
    "text": "me that I can't use n because the data",
    "start": "868320",
    "end": "871000"
  },
  {
    "text": "has been moved out of",
    "start": "871000",
    "end": "873480"
  },
  {
    "text": "it okay it's guaranteeing that at any",
    "start": "873480",
    "end": "877320"
  },
  {
    "text": "time there's only one owner for the data",
    "start": "877320",
    "end": "881079"
  },
  {
    "text": "and that applies to function calls as",
    "start": "881079",
    "end": "882600"
  },
  {
    "text": "well if I'm going to write let's write",
    "start": "882600",
    "end": "884800"
  },
  {
    "text": "uh fun two and that's going to take an",
    "start": "884800",
    "end": "888399"
  },
  {
    "text": "argument of type",
    "start": "888399",
    "end": "891800"
  },
  {
    "text": "Bob and we're just going to print line",
    "start": "891800",
    "end": "897040"
  },
  {
    "text": "bob. n and we'll have the first element",
    "start": "901160",
    "end": "904959"
  },
  {
    "text": "of",
    "start": "904959",
    "end": "906880"
  },
  {
    "text": "that in our Funk one say",
    "start": "906880",
    "end": "911079"
  },
  {
    "text": "Let's uh we'll call Funk",
    "start": "911079",
    "end": "913920"
  },
  {
    "text": "two with our Bob variable in other",
    "start": "913920",
    "end": "917880"
  },
  {
    "text": "languages when you pass something as an",
    "start": "917880",
    "end": "919800"
  },
  {
    "text": "argument to a function either it's going",
    "start": "919800",
    "end": "923000"
  },
  {
    "text": "to um make a copy of it or it's going to",
    "start": "923000",
    "end": "926440"
  },
  {
    "text": "give that function a reference to it",
    "start": "926440",
    "end": "930959"
  },
  {
    "text": "but this isn't quite what we want either",
    "start": "931240",
    "end": "932720"
  },
  {
    "text": "we're going to end up with a duplicated",
    "start": "932720",
    "end": "934120"
  },
  {
    "text": "version of the data or we've got two",
    "start": "934120",
    "end": "936079"
  },
  {
    "text": "owners with a function same thing",
    "start": "936079",
    "end": "938440"
  },
  {
    "text": "applies our Bob gets moved into the",
    "start": "938440",
    "end": "941639"
  },
  {
    "text": "function so now my B variable that I",
    "start": "941639",
    "end": "945199"
  },
  {
    "text": "defined in the function owns that Bob",
    "start": "945199",
    "end": "948160"
  },
  {
    "text": "and in Funk one if I try and do",
    "start": "948160",
    "end": "950279"
  },
  {
    "text": "something with uh n try and do the same",
    "start": "950279",
    "end": "953199"
  },
  {
    "text": "thing I was doing in Funk 2 the compiler",
    "start": "953199",
    "end": "955440"
  },
  {
    "text": "will warn me can't do that n has been",
    "start": "955440",
    "end": "958120"
  },
  {
    "text": "moved so there's the first step where",
    "start": "958120",
    "end": "960279"
  },
  {
    "text": "we're",
    "start": "960279",
    "end": "961680"
  },
  {
    "text": "guaranteeing that our memory stays safe",
    "start": "961680",
    "end": "964240"
  },
  {
    "text": "so that's great right one owner at a",
    "start": "964240",
    "end": "966600"
  },
  {
    "text": "time that makes sure that when my",
    "start": "966600",
    "end": "969240"
  },
  {
    "text": "variable goes out of Scope when the",
    "start": "969240",
    "end": "970680"
  },
  {
    "text": "owner goes out of scope and gets deleted",
    "start": "970680",
    "end": "973000"
  },
  {
    "text": "I know for a fact no one else is using",
    "start": "973000",
    "end": "976040"
  },
  {
    "text": "it there are no dangling references to",
    "start": "976040",
    "end": "978839"
  },
  {
    "text": "that data",
    "start": "978839",
    "end": "980959"
  },
  {
    "text": "perfect problem is sometimes I do want",
    "start": "980959",
    "end": "983519"
  },
  {
    "start": "981000",
    "end": "1081000"
  },
  {
    "text": "to keep using my data after I've moved",
    "start": "983519",
    "end": "985560"
  },
  {
    "text": "it right maybe Funk 2 does something to",
    "start": "985560",
    "end": "988639"
  },
  {
    "text": "end",
    "start": "988639",
    "end": "989839"
  },
  {
    "text": "but then I still want to keep using n so",
    "start": "989839",
    "end": "992199"
  },
  {
    "text": "that's when the second part of this",
    "start": "992199",
    "end": "993639"
  },
  {
    "text": "comes in which is this business of",
    "start": "993639",
    "end": "995440"
  },
  {
    "text": "borrowing in Rust in Rust you you have",
    "start": "995440",
    "end": "998680"
  },
  {
    "text": "this idea where you don't take ownership",
    "start": "998680",
    "end": "1001959"
  },
  {
    "text": "of the data but you say just for a",
    "start": "1001959",
    "end": "1005880"
  },
  {
    "text": "moment I'd like to do something with it",
    "start": "1005880",
    "end": "1008079"
  },
  {
    "text": "I'm not going to take ownership of it",
    "start": "1008079",
    "end": "1009319"
  },
  {
    "text": "it's still your data but I just want",
    "start": "1009319",
    "end": "1012160"
  },
  {
    "text": "permission to look at it or maybe tweak",
    "start": "1012160",
    "end": "1014199"
  },
  {
    "text": "it for a bit and I'm going to give it",
    "start": "1014199",
    "end": "1015800"
  },
  {
    "text": "back to you and that's what we use",
    "start": "1015800",
    "end": "1019199"
  },
  {
    "text": "borrowing for and the way we do that in",
    "start": "1019199",
    "end": "1020800"
  },
  {
    "text": "Rust is through uh a syntax called",
    "start": "1020800",
    "end": "1025160"
  },
  {
    "text": "referencing so I'm going to edit Funk 2",
    "start": "1025160",
    "end": "1027558"
  },
  {
    "text": "now so that instead of taking ownership",
    "start": "1027559",
    "end": "1030160"
  },
  {
    "text": "of my Bob it's just going to borrow Bob",
    "start": "1030160",
    "end": "1032918"
  },
  {
    "text": "for a moment and then give it back the",
    "start": "1032919",
    "end": "1036720"
  },
  {
    "text": "way we represent that in Rust we just",
    "start": "1036720",
    "end": "1039000"
  },
  {
    "text": "stick an ampersand in front of the type",
    "start": "1039000",
    "end": "1041678"
  },
  {
    "text": "uh and that says that funk 2 gains a",
    "start": "1041679",
    "end": "1043640"
  },
  {
    "text": "reference to a bob it doesn't take",
    "start": "1043640",
    "end": "1045918"
  },
  {
    "text": "ownership of a bob and then I put an",
    "start": "1045919",
    "end": "1047918"
  },
  {
    "text": "ampersand operator in front of the n as",
    "start": "1047919",
    "end": "1050080"
  },
  {
    "text": "well in Funk one and that says don't",
    "start": "1050080",
    "end": "1053120"
  },
  {
    "text": "pass n into Funk 2 pass a reference to n",
    "start": "1053120",
    "end": "1057919"
  },
  {
    "text": "into Funk 2 so now Funk 2 has borrowed",
    "start": "1057919",
    "end": "1060600"
  },
  {
    "text": "Bob it can do whatever it wants with Bob",
    "start": "1060600",
    "end": "1064080"
  },
  {
    "text": "but then when the function returns Funk",
    "start": "1064080",
    "end": "1066679"
  },
  {
    "text": "one still has ownership of",
    "start": "1066679",
    "end": "1069760"
  },
  {
    "text": "Bob because Funk two just borrowed him",
    "start": "1069760",
    "end": "1072480"
  },
  {
    "text": "it didn't take him take control of him",
    "start": "1072480",
    "end": "1074160"
  },
  {
    "text": "completely and then if I was to compile",
    "start": "1074160",
    "end": "1076080"
  },
  {
    "text": "this funk one now it would compile",
    "start": "1076080",
    "end": "1079039"
  },
  {
    "text": "absolutely fine no",
    "start": "1079039",
    "end": "1081200"
  },
  {
    "start": "1081000",
    "end": "1461000"
  },
  {
    "text": "issues so between this um moving and",
    "start": "1081200",
    "end": "1087480"
  },
  {
    "text": "borrowing we make",
    "start": "1087480",
    "end": "1089880"
  },
  {
    "text": "sure we've got our Ray principles sort",
    "start": "1089880",
    "end": "1092360"
  },
  {
    "text": "of baked into the language and we make",
    "start": "1092360",
    "end": "1094400"
  },
  {
    "text": "sure we don't have any dangling",
    "start": "1094400",
    "end": "1097200"
  },
  {
    "text": "references so presumably if something's",
    "start": "1097200",
    "end": "1099559"
  },
  {
    "text": "borrowed like any good library book you",
    "start": "1099559",
    "end": "1101720"
  },
  {
    "text": "need to give it back at the end is that",
    "start": "1101720",
    "end": "1103320"
  },
  {
    "text": "how it works yes exactly so the borrow",
    "start": "1103320",
    "end": "1105480"
  },
  {
    "text": "gets given back um at the same time as",
    "start": "1105480",
    "end": "1108120"
  },
  {
    "text": "it would be deleted so at the end of",
    "start": "1108120",
    "end": "1109600"
  },
  {
    "text": "funk 2 um Funk 2 does its thing it's",
    "start": "1109600",
    "end": "1114720"
  },
  {
    "text": "done and that kind of gets given",
    "start": "1114720",
    "end": "1117720"
  },
  {
    "text": "back it's slightly different though this",
    "start": "1117720",
    "end": "1120520"
  },
  {
    "text": "is the last thing we'll talk about um",
    "start": "1120520",
    "end": "1124200"
  },
  {
    "text": "because I introduced at the very start",
    "start": "1124200",
    "end": "1125880"
  },
  {
    "text": "the idea that rust has a difference",
    "start": "1125880",
    "end": "1127840"
  },
  {
    "text": "between if you want something to be",
    "start": "1127840",
    "end": "1129200"
  },
  {
    "text": "mutable you have to explicitly say",
    "start": "1129200",
    "end": "1132000"
  },
  {
    "text": "so right and that plays into referencing",
    "start": "1132000",
    "end": "1134720"
  },
  {
    "text": "as well um because you just talked about",
    "start": "1134720",
    "end": "1136960"
  },
  {
    "text": "library books um if I borrow library",
    "start": "1136960",
    "end": "1139080"
  },
  {
    "text": "book eventually I've got to give it back",
    "start": "1139080",
    "end": "1140880"
  },
  {
    "text": "or you get fined or you get fined uh",
    "start": "1140880",
    "end": "1143120"
  },
  {
    "text": "which in which in this case I guess the",
    "start": "1143120",
    "end": "1144640"
  },
  {
    "text": "compiler would just refuse to compile I",
    "start": "1144640",
    "end": "1146559"
  },
  {
    "text": "guess the analogy is slightly different",
    "start": "1146559",
    "end": "1148320"
  },
  {
    "text": "because so long as I'm not modifying the",
    "start": "1148320",
    "end": "1151120"
  },
  {
    "text": "thing I've",
    "start": "1151120",
    "end": "1152360"
  },
  {
    "text": "borrowed multiple different functions",
    "start": "1152360",
    "end": "1154960"
  },
  {
    "text": "could borrow the same",
    "start": "1154960",
    "end": "1157480"
  },
  {
    "text": "value okay if I introduce a uh function",
    "start": "1157480",
    "end": "1161159"
  },
  {
    "text": "called Funk three bit like them being",
    "start": "1161159",
    "end": "1163799"
  },
  {
    "text": "able to read it but not to write to it",
    "start": "1163799",
    "end": "1166080"
  },
  {
    "text": "exactly yeah yeah if I just borrow like",
    "start": "1166080",
    "end": "1169360"
  },
  {
    "text": "normal I can read the data so here I'm",
    "start": "1169360",
    "end": "1172240"
  },
  {
    "text": "going to print line I'll",
    "start": "1172240",
    "end": "1174480"
  },
  {
    "text": "print the second element of n now I mean",
    "start": "1174480",
    "end": "1178640"
  },
  {
    "text": "everyone's going to tell me I haven't",
    "start": "1178640",
    "end": "1179640"
  },
  {
    "text": "put anything in N yet so technically",
    "start": "1179640",
    "end": "1181640"
  },
  {
    "text": "this wouldn't work but you get the point",
    "start": "1181640",
    "end": "1183440"
  },
  {
    "text": "uh fun three so instead of passing a",
    "start": "1183440",
    "end": "1185679"
  },
  {
    "text": "reference directly let's have",
    "start": "1185679",
    "end": "1188120"
  },
  {
    "text": "N1 is a reference to n N2 is a reference",
    "start": "1188120",
    "end": "1194080"
  },
  {
    "text": "to n and then I could call Funk two with",
    "start": "1194080",
    "end": "1197720"
  },
  {
    "text": "N1",
    "start": "1197720",
    "end": "1199720"
  },
  {
    "text": "Funk three with N2 and R is going to be",
    "start": "1199720",
    "end": "1203559"
  },
  {
    "text": "happily fine with that because neither",
    "start": "1203559",
    "end": "1205840"
  },
  {
    "text": "N1 nor N2 is trying to modify n they can",
    "start": "1205840",
    "end": "1209280"
  },
  {
    "text": "both borrow it and it's absolutely",
    "start": "1209280",
    "end": "1211640"
  },
  {
    "text": "fine what Russ doesn't let you get away",
    "start": "1211640",
    "end": "1213960"
  },
  {
    "text": "with though is a mutable borrow if I",
    "start": "1213960",
    "end": "1217559"
  },
  {
    "text": "want to modify a piece of data that I'm",
    "start": "1217559",
    "end": "1219559"
  },
  {
    "text": "borrowing I'm allowed to do that let's",
    "start": "1219559",
    "end": "1222000"
  },
  {
    "text": "say function two now is going to modify",
    "start": "1222000",
    "end": "1224400"
  },
  {
    "text": "Bob I'm going to tag that mute keyword",
    "start": "1224400",
    "end": "1227960"
  },
  {
    "text": "onto the end of the reference to tell",
    "start": "1227960",
    "end": "1230039"
  },
  {
    "text": "rust that I want a mutable reference and",
    "start": "1230039",
    "end": "1233799"
  },
  {
    "text": "then I could do stuff let's reassign n",
    "start": "1233799",
    "end": "1236559"
  },
  {
    "text": "in here for example okay so function two",
    "start": "1236559",
    "end": "1240280"
  },
  {
    "text": "is going to",
    "start": "1240280",
    "end": "1243919"
  },
  {
    "text": "modify uh",
    "start": "1246480",
    "end": "1249280"
  },
  {
    "text": "Bob and that's allowed I'm allowed to",
    "start": "1249280",
    "end": "1251880"
  },
  {
    "text": "borrow something and change it so long",
    "start": "1251880",
    "end": "1253440"
  },
  {
    "text": "as I say so and let's make N1 a mutable",
    "start": "1253440",
    "end": "1257840"
  },
  {
    "text": "borrow but what rust's going to tell me",
    "start": "1257840",
    "end": "1260919"
  },
  {
    "text": "is that I can't have a mutable reference",
    "start": "1260919",
    "end": "1266000"
  },
  {
    "text": "to a data and an immutable reference to",
    "start": "1266000",
    "end": "1268679"
  },
  {
    "text": "the data at the same",
    "start": "1268679",
    "end": "1271679"
  },
  {
    "text": "time because you can imagine that",
    "start": "1271679",
    "end": "1273559"
  },
  {
    "text": "situation if I've if I've told my",
    "start": "1273559",
    "end": "1275760"
  },
  {
    "text": "function that it's getting an immutable",
    "start": "1275760",
    "end": "1277799"
  },
  {
    "text": "reference I'm telling",
    "start": "1277799",
    "end": "1280000"
  },
  {
    "text": "it that this data is not going to change",
    "start": "1280000",
    "end": "1282640"
  },
  {
    "text": "you're not allowed to change it and",
    "start": "1282640",
    "end": "1284559"
  },
  {
    "text": "I'm yeah I'm guaranteeing to you your",
    "start": "1284559",
    "end": "1287840"
  },
  {
    "text": "data is going to stay the",
    "start": "1287840",
    "end": "1289919"
  },
  {
    "text": "same if I have a mutable reference and a",
    "start": "1289919",
    "end": "1293400"
  },
  {
    "text": "immutable reference at the same time you",
    "start": "1293400",
    "end": "1296600"
  },
  {
    "text": "can see how that causes",
    "start": "1296600",
    "end": "1298679"
  },
  {
    "text": "problems it's a slightly different type",
    "start": "1298679",
    "end": "1300919"
  },
  {
    "text": "of problem this is a problem where the",
    "start": "1300919",
    "end": "1302400"
  },
  {
    "text": "memory holds something different from",
    "start": "1302400",
    "end": "1304159"
  },
  {
    "text": "what you think it",
    "start": "1304159",
    "end": "1306360"
  },
  {
    "text": "should and so again the compiler is",
    "start": "1306360",
    "end": "1308960"
  },
  {
    "text": "going to stop you doing that it's going",
    "start": "1308960",
    "end": "1311159"
  },
  {
    "text": "to say no you're being naughty you can't",
    "start": "1311159",
    "end": "1313320"
  },
  {
    "text": "have an immutable reference and a",
    "start": "1313320",
    "end": "1315039"
  },
  {
    "text": "mutable reference to the same bit of",
    "start": "1315039",
    "end": "1316799"
  },
  {
    "text": "data at the same time so it's protecting",
    "start": "1316799",
    "end": "1319760"
  },
  {
    "text": "you from accidentally modifying data",
    "start": "1319760",
    "end": "1323400"
  },
  {
    "text": "that another bit of your program assumes",
    "start": "1323400",
    "end": "1325799"
  },
  {
    "text": "is",
    "start": "1325799",
    "end": "1326559"
  },
  {
    "text": "constant really we've just touched on",
    "start": "1326559",
    "end": "1328640"
  },
  {
    "text": "the main sort of way that you'll work",
    "start": "1328640",
    "end": "1330760"
  },
  {
    "text": "with memory and rust this business of",
    "start": "1330760",
    "end": "1332440"
  },
  {
    "text": "moving and borrowing there are other",
    "start": "1332440",
    "end": "1335000"
  },
  {
    "text": "bits to it if you want to do it in the",
    "start": "1335000",
    "end": "1336799"
  },
  {
    "text": "old C C++ way of manually allocating",
    "start": "1336799",
    "end": "1339559"
  },
  {
    "text": "exactly what you need and manually",
    "start": "1339559",
    "end": "1341640"
  },
  {
    "text": "freeing it when you need you can do that",
    "start": "1341640",
    "end": "1344279"
  },
  {
    "text": "right Russ supports that um it just",
    "start": "1344279",
    "end": "1347480"
  },
  {
    "text": "forces you to put it in a special block",
    "start": "1347480",
    "end": "1349159"
  },
  {
    "text": "that's marked",
    "start": "1349159",
    "end": "1351279"
  },
  {
    "text": "unsafe uh to make sure that you know as",
    "start": "1351279",
    "end": "1353960"
  },
  {
    "text": "a programmer you're taking 100% control",
    "start": "1353960",
    "end": "1356960"
  },
  {
    "text": "of the memory there are also constructs",
    "start": "1356960",
    "end": "1360600"
  },
  {
    "text": "that you can use if you if you um want",
    "start": "1360600",
    "end": "1363600"
  },
  {
    "text": "to use that um reference counting sort",
    "start": "1363600",
    "end": "1366679"
  },
  {
    "text": "of garbage collection style of things",
    "start": "1366679",
    "end": "1368640"
  },
  {
    "text": "that's particularly useful if you're",
    "start": "1368640",
    "end": "1369880"
  },
  {
    "text": "sharing memory between multiple threads",
    "start": "1369880",
    "end": "1372279"
  },
  {
    "text": "uh you have construct available that'll",
    "start": "1372279",
    "end": "1375360"
  },
  {
    "text": "do that as well and I think this is one",
    "start": "1375360",
    "end": "1376960"
  },
  {
    "text": "of the reasons why uh people like for",
    "start": "1376960",
    "end": "1379120"
  },
  {
    "text": "it's certainly why I like it is because",
    "start": "1379120",
    "end": "1380880"
  },
  {
    "text": "it gives you this whole range of options",
    "start": "1380880",
    "end": "1385600"
  },
  {
    "text": "for how to work with memory borrowing",
    "start": "1385600",
    "end": "1388480"
  },
  {
    "text": "and um",
    "start": "1388480",
    "end": "1390640"
  },
  {
    "text": "moving is great for the vast majority of",
    "start": "1390640",
    "end": "1394120"
  },
  {
    "text": "cases sometimes actually I want",
    "start": "1394120",
    "end": "1396200"
  },
  {
    "text": "reference counting because sometimes I",
    "start": "1396200",
    "end": "1399080"
  },
  {
    "text": "do",
    "start": "1399080",
    "end": "1400200"
  },
  {
    "text": "want several different people to take",
    "start": "1400200",
    "end": "1403279"
  },
  {
    "text": "ownership of this data and so in that",
    "start": "1403279",
    "end": "1406120"
  },
  {
    "text": "case I can introduce some reference",
    "start": "1406120",
    "end": "1407600"
  },
  {
    "text": "Counting and and it'll take care of it",
    "start": "1407600",
    "end": "1410520"
  },
  {
    "text": "it'll be a bit slower but I can do it",
    "start": "1410520",
    "end": "1413279"
  },
  {
    "text": "other",
    "start": "1413279",
    "end": "1414279"
  },
  {
    "text": "times maybe I want precise fine grained",
    "start": "1414279",
    "end": "1417200"
  },
  {
    "text": "control of when memory gets allocated",
    "start": "1417200",
    "end": "1418960"
  },
  {
    "text": "and freed uh because maybe I know that I",
    "start": "1418960",
    "end": "1421640"
  },
  {
    "text": "can free up some data halfway through an",
    "start": "1421640",
    "end": "1423600"
  },
  {
    "text": "object's",
    "start": "1423600",
    "end": "1425480"
  },
  {
    "text": "Lifetime and I can do that as well I can",
    "start": "1425480",
    "end": "1428600"
  },
  {
    "text": "open an unsafe block and start using",
    "start": "1428600",
    "end": "1431320"
  },
  {
    "text": "pointers directly Russ lets me do that",
    "start": "1431320",
    "end": "1433559"
  },
  {
    "text": "as well saves a whole lot of complexity",
    "start": "1433559",
    "end": "1436400"
  },
  {
    "text": "in writing the code",
    "start": "1436400",
    "end": "1439720"
  },
  {
    "text": "for not really much downside",
    "start": "1439720",
    "end": "1443400"
  },
  {
    "text": "really R stairs is red and football is",
    "start": "1444279",
    "end": "1449240"
  },
  {
    "text": "green right it's a terrible example if",
    "start": "1449240",
    "end": "1451520"
  },
  {
    "text": "you wanted memory you had to ask for it",
    "start": "1451520",
    "end": "1453240"
  },
  {
    "text": "and release it yourself so um there are",
    "start": "1453240",
    "end": "1456640"
  },
  {
    "text": "two Primitives here one's called malok",
    "start": "1456640",
    "end": "1458760"
  },
  {
    "text": "and Malo says give me some quantity of",
    "start": "1458760",
    "end": "1461279"
  },
  {
    "text": "memory",
    "start": "1461279",
    "end": "1463559"
  }
]