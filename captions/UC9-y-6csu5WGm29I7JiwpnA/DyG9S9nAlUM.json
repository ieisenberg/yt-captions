[
  {
    "text": "When alex did a video on linked list there's a lot of comments on it it sort of thing",
    "start": "60",
    "end": "4500"
  },
  {
    "text": "I want to use a linked list arrays a factor",
    "start": "4500",
    "end": "6929"
  },
  {
    "text": "What's the point of reading this and so I was sort of thinking about is that well actually \"Are arrays",
    "start": "6930",
    "end": "10950"
  },
  {
    "text": "faster than the linked list or are the linked lists faster than an array, how do we go about finding out?\"",
    "start": "11100",
    "end": "15740"
  },
  {
    "text": "Which one's faster, so let's have a shoot out arrays versus linked list",
    "start": "15740",
    "end": "19700"
  },
  {
    "text": "First question to start is",
    "start": "21700",
    "end": "23360"
  },
  {
    "text": "I should just remind ourselves what the difference is between a linked list and",
    "start": "23360",
    "end": "26360"
  },
  {
    "text": "An array so let's start with the array so probably the simplest",
    "start": "26600",
    "end": "29560"
  },
  {
    "text": "To understand so an array is just a way of storing",
    "start": "30120",
    "end": "33080"
  },
  {
    "text": "several",
    "start": "33780",
    "end": "35039"
  },
  {
    "text": "values",
    "start": "35040",
    "end": "36630"
  },
  {
    "text": "in memory so we start off with the first value and",
    "start": "36630",
    "end": "39589"
  },
  {
    "text": "for the purposes of this demonstration, I'm going to use a",
    "start": "40380",
    "end": "43609"
  },
  {
    "text": "Structure containing multiple values. We did talk about objects a while ago structures are what you had before",
    "start": "44190",
    "end": "49069"
  },
  {
    "text": "We saw this object which is a collection of values in memories and store to integer values",
    "start": "49070",
    "end": "53989"
  },
  {
    "text": "So this is array element zero and it's got two numbers. We then got array element one",
    "start": "53989",
    "end": "59329"
  },
  {
    "text": "And it's got two numbers",
    "start": "60240",
    "end": "62100"
  },
  {
    "text": "Looks like I'm playing break out got a great element",
    "start": "62100",
    "end": "64698"
  },
  {
    "text": "To and it's got two numbers and so we can refer to any of these",
    "start": "65250",
    "end": "69199"
  },
  {
    "text": "by",
    "start": "70200",
    "end": "71398"
  },
  {
    "text": "reference to the Index starts at 0 3 4 5 6",
    "start": "71399",
    "end": "77269"
  },
  {
    "text": "7 10 so you can have an array of any size we have to know how big it is if you wanted to be when",
    "start": "78420",
    "end": "83839"
  },
  {
    "text": "You create so you allocate the memory for all the things and then?",
    "start": "83840",
    "end": "86210"
  },
  {
    "text": "You can store some values so we can write 42 in this one. We can put 21 in here",
    "start": "86280",
    "end": "91729"
  },
  {
    "text": "I'm going to put 3 in that one and we can store them or we can put different values in here as",
    "start": "91729",
    "end": "97519"
  },
  {
    "text": "Well as we need them so that's how an array works. Which is one big block of memory each thing stored one after the other",
    "start": "98159",
    "end": "105288"
  },
  {
    "text": "linked list works slightly different we start off at the beginning of",
    "start": "105990",
    "end": "110149"
  },
  {
    "text": "the linked list and it points at nothing but then as we add things to the list we",
    "start": "110670",
    "end": "114798"
  },
  {
    "text": "Allocate the memory for it. We're going to store two things so the first thing we'll label these things inside it p",
    "start": "115740",
    "end": "122240"
  },
  {
    "text": "And Q so it's a lot p here",
    "start": "122909",
    "end": "124937"
  },
  {
    "text": "And we've got q but we also have an extra thing that tells us where the next they will be and that's empty, too",
    "start": "125400",
    "end": "131600"
  },
  {
    "text": "So it's all put 42 and 16 so we just allocate space for that one",
    "start": "131600",
    "end": "135649"
  },
  {
    "text": "Structure that one thing that we're going to store and we connect it up",
    "start": "136140",
    "end": "139579"
  },
  {
    "text": "So we point this at the first thing so we often call this something like first",
    "start": "139980",
    "end": "144890"
  },
  {
    "text": "And we see Alex videos to see how that have done",
    "start": "144890",
    "end": "147350"
  },
  {
    "text": "So when we want to store the next thing we allocate explai for another one",
    "start": "147570",
    "end": "151519"
  },
  {
    "text": "And we can store the value, so we've still got 8",
    "start": "153000",
    "end": "155330"
  },
  {
    "text": "21 in it now the difference between this could be anywhere else in memory, and we connect to the next pointer",
    "start": "155910",
    "end": "162259"
  },
  {
    "text": "to point in",
    "start": "163410",
    "end": "165060"
  },
  {
    "text": "To the next thing so we have some known starting point",
    "start": "165060",
    "end": "167929"
  },
  {
    "text": "which points to the first thing and the first thing 22 the second thing and the second thing would point to the third thing and",
    "start": "168150",
    "end": "174620"
  },
  {
    "text": "So on and that would point down and these could be all over",
    "start": "174840",
    "end": "178069"
  },
  {
    "text": "anywhere",
    "start": "178620",
    "end": "179640"
  },
  {
    "text": "In the computer's memory and then at the end you normally point it at some known value",
    "start": "179640",
    "end": "185270"
  },
  {
    "text": "Which is often referred to as null and is often the number zero?",
    "start": "185270",
    "end": "190039"
  },
  {
    "text": "So you can then walk through your list",
    "start": "190620",
    "end": "193190"
  },
  {
    "text": "And when you find at the next point of zero or null you know you've come to the end of it",
    "start": "193190",
    "end": "197449"
  },
  {
    "text": "There are two different ways of storing data the best or the same amount of data now",
    "start": "197519",
    "end": "202339"
  },
  {
    "text": "He's got some differences this one as I says it's fixed inside, and you create it you can store",
    "start": "202340",
    "end": "206810"
  },
  {
    "text": "How many things you know I've actually filled in but as soon as you get more than eleven since final top array?",
    "start": "206810",
    "end": "212660"
  },
  {
    "text": "You can't go past eleven if you can see yeah the numbers all go to",
    "start": "212660",
    "end": "217639"
  },
  {
    "text": "11 on this however if we wanted to put something else thing we can just get rid of this thing",
    "start": "218280",
    "end": "224119"
  },
  {
    "text": "And update this to point",
    "start": "224459",
    "end": "226459"
  },
  {
    "text": "To a new thing so we can make this grow",
    "start": "227190",
    "end": "229190"
  },
  {
    "text": "Quite easily, and we can also be really clever",
    "start": "229680",
    "end": "232400"
  },
  {
    "text": "We can add things in the middle and the beginning very very simply, but we're going to go into that today",
    "start": "232400",
    "end": "236810"
  },
  {
    "text": "So creating them. We're probably only going to do once but which one is actually faster",
    "start": "238680",
    "end": "243409"
  },
  {
    "text": "Well, let's think about what actually to do. Let's define a very very simple problem",
    "start": "244530",
    "end": "249380"
  },
  {
    "text": "We've created the structure here, and it's got two things in it",
    "start": "249450",
    "end": "252109"
  },
  {
    "text": "It's got an integer called p and an integer called Q so saving the linked list and in",
    "start": "252109",
    "end": "258109"
  },
  {
    "text": "The array let's consider an operation where we're just going to go through all the elements in our array",
    "start": "258570",
    "end": "264739"
  },
  {
    "text": "Or all the elements in our linked list and sum the value of p are going to add up all the value",
    "start": "264740",
    "end": "271009"
  },
  {
    "text": "So we're going to add up. What's in array",
    "start": "271010",
    "end": "273319"
  },
  {
    "text": "Element Zeroes P in array of them at once P and so on so we're going to effectively do",
    "start": "273360",
    "end": "277728"
  },
  {
    "text": "Something's going to add them all up. We'll do the same with the linked list as well",
    "start": "277860",
    "end": "281030"
  },
  {
    "text": "So we're going to set what the first thing is to point to p",
    "start": "281030",
    "end": "284750"
  },
  {
    "text": "Now that one. No. There's no time out of its value of p the next one and so on and we'll add them all up",
    "start": "285450",
    "end": "290299"
  },
  {
    "text": "Why are we using missiles they want to the unique thing about this is",
    "start": "292380",
    "end": "295969"
  },
  {
    "text": "That it's going to visit every single element in either the array or every single element in the linked list",
    "start": "296490",
    "end": "301789"
  },
  {
    "text": "so we're going to visit every single element if you only have to visit one element then the very nature of",
    "start": "302040",
    "end": "307249"
  },
  {
    "text": "Random access into array means as we fast",
    "start": "307530",
    "end": "309410"
  },
  {
    "text": "There's no way you can make any difference unless it's the first element if you only one to ever access the first element",
    "start": "309410",
    "end": "314390"
  },
  {
    "text": "Then look at the same speed we fuel directly to random element",
    "start": "314670",
    "end": "317330"
  },
  {
    "text": "Then the array or win hands down you can just think about how it works that will be the case. We're going to consider",
    "start": "317460",
    "end": "322789"
  },
  {
    "text": "We want to access every single element and do something to it and in this case",
    "start": "322790",
    "end": "326689"
  },
  {
    "text": "You're just going to sum up the values, but it could be if things were representing say windows on the screen",
    "start": "326690",
    "end": "331190"
  },
  {
    "text": "We want to move them around we want to redraw them",
    "start": "331190",
    "end": "333739"
  },
  {
    "text": "Whatever it is will then do something to every single wall so we sort of set out the problem?",
    "start": "333740",
    "end": "338270"
  },
  {
    "text": "I'm going to go over an array of values and a linked list of values",
    "start": "338270",
    "end": "342289"
  },
  {
    "text": "I'm going to in sum in the visits all and we do actually add up all the numbers",
    "start": "342420",
    "end": "345649"
  },
  {
    "text": "Stored in the element P. Which is part of the structure so what I've done is I've written",
    "start": "346290",
    "end": "352099"
  },
  {
    "text": "To see poems which are more or less identical",
    "start": "352710",
    "end": "355759"
  },
  {
    "text": "I'm going to create",
    "start": "356610",
    "end": "358610"
  },
  {
    "text": "125,000 elements in my array",
    "start": "359370",
    "end": "361370"
  },
  {
    "text": "or mailing list and in the linked list I've got a structure which contains an integer p and an integer Q and",
    "start": "361890",
    "end": "369439"
  },
  {
    "text": "in the array version",
    "start": "369900",
    "end": "371840"
  },
  {
    "text": "I've got a structure which contains an integer p and interested Q in the array item",
    "start": "371840",
    "end": "375738"
  },
  {
    "text": "The only difference is that the linked list has one extra item which is the next pointer to the next thing?",
    "start": "375990",
    "end": "381289"
  },
  {
    "text": "So very listen see so hopefully we'll go as fast as we possibly can most of the rest of the program",
    "start": "381290",
    "end": "386809"
  },
  {
    "text": "is",
    "start": "387320",
    "end": "388080"
  },
  {
    "text": "identical",
    "start": "388080",
    "end": "389250"
  },
  {
    "text": "so I have my main Routine here which creates a",
    "start": "389250",
    "end": "391880"
  },
  {
    "text": "List or an array of random number generator?",
    "start": "392700",
    "end": "395779"
  },
  {
    "text": "125,000 random numbers which is a slowest part of the program you'll see and then store them",
    "start": "397200",
    "end": "401809"
  },
  {
    "text": "So allocate memory for each element in the linked list and then we set the value",
    "start": "402000",
    "end": "406190"
  },
  {
    "text": "Everything else will just leave with 0 and we do the same with the array just as we did on the paper",
    "start": "406740",
    "end": "411410"
  },
  {
    "text": "We then run the program",
    "start": "412410",
    "end": "414410"
  },
  {
    "text": "100 times and all going to here is time",
    "start": "414450",
    "end": "417379"
  },
  {
    "text": "How long it takes to run a function which adds afforda numbers either in the list or in the array?",
    "start": "417810",
    "end": "423350"
  },
  {
    "text": "I will do that 100 times",
    "start": "424050",
    "end": "425370"
  },
  {
    "text": "And then we can work out the average time it takes to calculate one and we'll print out the values as we go",
    "start": "425370",
    "end": "430048"
  },
  {
    "text": "So we're just using the built-in clock function in C. Which should be accurate accurate enough for what we want to do",
    "start": "430050",
    "end": "436078"
  },
  {
    "text": "so the real meat the body of the program is this function here some list or",
    "start": "436690",
    "end": "442079"
  },
  {
    "text": "Some array",
    "start": "442990",
    "end": "444030"
  },
  {
    "text": "Let's start with the array one because possibly the simplest we said a variable to be zero that's going to be asked some",
    "start": "444030",
    "end": "449309"
  },
  {
    "text": "You have another variable",
    "start": "449710",
    "end": "450810"
  },
  {
    "text": "I which is going to be our index through the array and we go from I equals zero",
    "start": "450810",
    "end": "455009"
  },
  {
    "text": "I first element until we get to the end the number of elements in there",
    "start": "455310",
    "end": "459089"
  },
  {
    "text": "and we just say this sum equals the value that was already in sum plus the value in the ice element in the array a",
    "start": "459090",
    "end": "466738"
  },
  {
    "text": "P element",
    "start": "467740",
    "end": "469060"
  },
  {
    "text": "Remember we said the array had a p and a Q in it we want the value stored in the p space within the structure",
    "start": "469060",
    "end": "474389"
  },
  {
    "text": "in our array, so I'm just going to add get them together the list version very very similar we set the someone to be 0",
    "start": "474390",
    "end": "480150"
  },
  {
    "text": "We say while p does not equal null",
    "start": "480790",
    "end": "483090"
  },
  {
    "text": "So why we haven't reached the end of the list and we set p initially to be the first thing in the linked list?",
    "start": "483090",
    "end": "487500"
  },
  {
    "text": "So pointing out that first thing sum equals sum plus",
    "start": "487690",
    "end": "491160"
  },
  {
    "text": "P inside p. We using P inside p",
    "start": "491680",
    "end": "494548"
  },
  {
    "text": "Confusing variable names, but then I'm asleep programmer, and then we set p ir pointer to point to the next thing",
    "start": "495100",
    "end": "502259"
  },
  {
    "text": "So we follow the link to the next thing in the linked list and we keep doing that until we come to the end",
    "start": "502260",
    "end": "507629"
  },
  {
    "text": "There are two programs as simple as you get in terms of implementing a linked list or on array",
    "start": "508180",
    "end": "512758"
  },
  {
    "text": "so we're going to do is run them and",
    "start": "513460",
    "end": "515460"
  },
  {
    "text": "We should get some values output",
    "start": "515710",
    "end": "517920"
  },
  {
    "text": "But we're not going to run them on the I max we're not going to run them on the raspberry Pi",
    "start": "518050",
    "end": "521969"
  },
  {
    "text": "we're actually going to run them on the atari behind me which means I need a very high Peak high-tech piece of",
    "start": "522760",
    "end": "529290"
  },
  {
    "text": "Equipment, so I need a floppy disk to transfer other programs from the iMac",
    "start": "529930",
    "end": "533940"
  },
  {
    "text": "Go topping them off the iMac, and then we can run them on the AtAri",
    "start": "535630",
    "end": "540210"
  },
  {
    "text": "so go over to the Atari and",
    "start": "543070",
    "end": "545070"
  },
  {
    "text": "Assurance that it's cameras and spot. We can see it. So what I'm gonna do at first is they got to run",
    "start": "546550",
    "end": "550829"
  },
  {
    "text": "the list first also going to generate",
    "start": "551410",
    "end": "553410"
  },
  {
    "text": "125,000",
    "start": "554050",
    "end": "555580"
  },
  {
    "text": "linked list values to let it Run",
    "start": "555580",
    "end": "557580"
  },
  {
    "text": "Right while it loads off the floppy disk",
    "start": "558910",
    "end": "560910"
  },
  {
    "text": "that's what it used to be like back in the 80s and 90s you had to wait one you crave them ran a",
    "start": "561220",
    "end": "565709"
  },
  {
    "text": "While a",
    "start": "567580",
    "end": "569580"
  },
  {
    "text": "long While",
    "start": "570340",
    "end": "572340"
  },
  {
    "text": "And this is just a simple program",
    "start": "573400",
    "end": "575400"
  },
  {
    "text": "So there is good",
    "start": "576010",
    "end": "576930"
  },
  {
    "text": "So it's not",
    "start": "576930",
    "end": "577779"
  },
  {
    "text": "Initializing the link list it's allocating all the memory for the different elements and then putting a random number",
    "start": "577780",
    "end": "582869"
  },
  {
    "text": "In the P value of each one, so we'll let that run",
    "start": "583000",
    "end": "585900"
  },
  {
    "text": "In the words of the old Hobbit computer game time passes or in the words of every apple of this",
    "start": "587680",
    "end": "593880"
  },
  {
    "text": "secret short",
    "start": "594790",
    "end": "596470"
  },
  {
    "text": "How long does this take?",
    "start": "596470",
    "end": "598470"
  },
  {
    "text": "A while lots of oil, I don't know another time this bit",
    "start": "599620",
    "end": "605160"
  },
  {
    "text": "125,000 times however long it takes to allocate a random number and allocate some memory",
    "start": "606820",
    "end": "609869"
  },
  {
    "text": "On the clock speed of what this is actually an 8 MegAhertz cPU",
    "start": "611140",
    "end": "615780"
  },
  {
    "text": "So it's a takes a while the computer loaded off all the code for the program and off the floppy disk into memory",
    "start": "617050",
    "end": "623368"
  },
  {
    "text": "And it's now running it to generate the data set that we need then Gonna sum all the values",
    "start": "624010",
    "end": "630359"
  },
  {
    "text": "So everything is happening now will happen off memory",
    "start": "630360",
    "end": "632670"
  },
  {
    "text": "It's just taking a while to process it",
    "start": "633190",
    "end": "635280"
  },
  {
    "text": "But we are recording it in 4k which is a slight overkill. I hope you're getting into that",
    "start": "636130",
    "end": "642119"
  },
  {
    "text": "extra bit",
    "start": "643270",
    "end": "644680"
  },
  {
    "text": "So the programs going through now and we'll let it run 400 times",
    "start": "644680",
    "end": "648270"
  },
  {
    "text": "We'll get an average, but actually looking at the values of the coming up",
    "start": "648270",
    "end": "650910"
  },
  {
    "text": "I think we can safely assume that the average is going to end up being",
    "start": "650910",
    "end": "654178"
  },
  {
    "text": "166 clock ticks now when I say qwop takes each of the machines. We're going to look at are going to have",
    "start": "654910",
    "end": "660238"
  },
  {
    "text": "Different clocks perms that they use the time things so we can't compare the values directly what we could come read with the seconds",
    "start": "660820",
    "end": "667260"
  },
  {
    "text": "But we can certainly see the relative patterns between it will call that",
    "start": "667260",
    "end": "670530"
  },
  {
    "text": "166 clock ticks over to run the linked list version of the program it takes",
    "start": "673270",
    "end": "679199"
  },
  {
    "text": "166 clock ticks",
    "start": "680230",
    "end": "682230"
  },
  {
    "text": "So let's now run the array version of the program",
    "start": "682630",
    "end": "685830"
  },
  {
    "text": "So now we're going to do exactly the same thing",
    "start": "686860",
    "end": "688769"
  },
  {
    "text": "we're going to allocate an array every time tWenty-five thousand elements and",
    "start": "688770",
    "end": "692790"
  },
  {
    "text": "populate them with random values because of the way",
    "start": "693130",
    "end": "695040"
  },
  {
    "text": "I've written the program",
    "start": "695040",
    "end": "695490"
  },
  {
    "text": "It will actually be the same pSeudo random number sequence that the sum should be the same and then we're going to fill",
    "start": "695490",
    "end": "700049"
  },
  {
    "text": "each of them up and time how long that takes and we'll they'll see whether an array actually is faster than the linked list or",
    "start": "700300",
    "end": "708060"
  },
  {
    "text": "Whether a linked list will be b. Array",
    "start": "708280",
    "end": "710550"
  },
  {
    "text": "So that to me looks like that little spinny thing is going faster",
    "start": "711310",
    "end": "714989"
  },
  {
    "text": "Yeah, well so and I haven't just upgraded the processor while they're off camera",
    "start": "715210",
    "end": "718829"
  },
  {
    "text": "What's actually happening is?",
    "start": "718840",
    "end": "720700"
  },
  {
    "text": "When we allocate the space for the linked list we have to allocate space for each element and then for the gym there",
    "start": "720700",
    "end": "727050"
  },
  {
    "text": "We allocate space for the next element. We could do that in a different way and speed things up, but we did it",
    "start": "727050",
    "end": "731699"
  },
  {
    "text": "That's the classic way with the array. We allocate the whole lot in one go, so we all take one",
    "start": "731700",
    "end": "736650"
  },
  {
    "text": "Huge block of memory under 25,000 times eight is about one meg's worth of memory",
    "start": "737200",
    "end": "741780"
  },
  {
    "text": "So allocate all that in one go, and then we're just going through it filling in all the values setting all the values",
    "start": "742150",
    "end": "748079"
  },
  {
    "text": "So that should be quicker",
    "start": "748870",
    "end": "751049"
  },
  {
    "text": "and it seems and spinning wheel is going slightly faster what why would that Spin wheel very fast can you just learn how that",
    "start": "751050",
    "end": "757259"
  },
  {
    "text": "You can read it if you've heard this thing you it yeah?",
    "start": "757570",
    "end": "760079"
  },
  {
    "text": "So to give some nice sort of visual Feedback while this is running",
    "start": "760080",
    "end": "763590"
  },
  {
    "text": "Well, I'm just a plain white screen what I'm doing is I'm printing every hundred element ideals",
    "start": "763590",
    "end": "768660"
  },
  {
    "text": "I update that thing and just printing either a dash a",
    "start": "768660",
    "end": "771060"
  },
  {
    "text": "Vertical line or one of the two slashes to make it look like it's getting round and those are printing it it creates a little",
    "start": "771370",
    "end": "777539"
  },
  {
    "text": "Effect which is see that something's happened and the computer hasn't crashed",
    "start": "777540",
    "end": "781560"
  },
  {
    "text": "So this should be faster, and we should get a value so is now working and the immediate thing we see is",
    "start": "781560",
    "end": "788070"
  },
  {
    "text": "That the array is taking about",
    "start": "788620",
    "end": "791159"
  },
  {
    "text": "179 or",
    "start": "791800",
    "end": "793800"
  },
  {
    "text": "178 ticks it's the same quad kick so we can compare these two values",
    "start": "794170",
    "end": "798029"
  },
  {
    "text": "the Array is",
    "start": "798790",
    "end": "800470"
  },
  {
    "text": "slower than a linked list I",
    "start": "800470",
    "end": "802649"
  },
  {
    "text": "Know down, okay? All right now. So you can't argue in - okay, so the numbers have come in the computers around",
    "start": "803860",
    "end": "810240"
  },
  {
    "text": "170 angular call is to that 170 8.5. Always for the final average to come in but for that. So they're roughly comparable",
    "start": "813250",
    "end": "821099"
  },
  {
    "text": "Basically there's not much it sort of thing, but there's something about 200 qwop ticks per second on this machine",
    "start": "822730",
    "end": "829118"
  },
  {
    "text": "It's is probably a noticeable. It's about 10 percent slower",
    "start": "830450",
    "end": "834009"
  },
  {
    "text": "Okay, so that's it. I mean we can stop here come a that's it. We know. What's what arrays are slow",
    "start": "834800",
    "end": "840039"
  },
  {
    "text": "You wrinkly yep, so arrays are slower than ling Li",
    "start": "840040",
    "end": "842949"
  },
  {
    "text": "Gotta get my vendor video yeah and a video you can now bring up the slash computer, so",
    "start": "843920",
    "end": "848440"
  },
  {
    "text": "virtually",
    "start": "849529",
    "end": "851029"
  },
  {
    "text": "There are two ways you can walk over the Ray",
    "start": "851029",
    "end": "853269"
  },
  {
    "text": "We went up the array from the smaller numbers to the larger numbers",
    "start": "854120",
    "end": "858640"
  },
  {
    "text": "But we could also start at the larger indexes and move back to the smaller indexes, and I thought well",
    "start": "858640",
    "end": "863529"
  },
  {
    "text": "Let's try it both ways let's not have anyone posting some comments saying no, but if you went the other way",
    "start": "863839",
    "end": "868719"
  },
  {
    "text": "So let's run it the other way, so I wrote a version which walks down and because we're adding the numbers together",
    "start": "869210",
    "end": "874900"
  },
  {
    "text": "We'll get exactly the same answer a plus b equals b. Plus a and all that you can watch numberphile to find out",
    "start": "874900",
    "end": "880479"
  },
  {
    "text": "More online. I'm sure",
    "start": "881060",
    "end": "883060"
  },
  {
    "text": "You think this would take exactly the same amount of time, so just update our table",
    "start": "883220",
    "end": "889029"
  },
  {
    "text": "To do this and we're going to have the reverse array here",
    "start": "889880",
    "end": "894609"
  },
  {
    "text": "I'll just wait while it does that",
    "start": "896150",
    "end": "898010"
  },
  {
    "text": "So going backwards through the array the only thing can we do the same thing with the linked list",
    "start": "898010",
    "end": "902229"
  },
  {
    "text": "Well the way we've designed the linked list we",
    "start": "902560",
    "end": "904929"
  },
  {
    "text": "Have a pointer to the next thing in each thing, but we don't have a pointer back to the previous thing",
    "start": "905750",
    "end": "912460"
  },
  {
    "text": "It's a singly linked list so we can only move forwards along it",
    "start": "912460",
    "end": "915369"
  },
  {
    "text": "We could design it to be a doubly linked list and have a backwards and forwards pointer",
    "start": "915410",
    "end": "920529"
  },
  {
    "text": "but if you think about it if we started at the end",
    "start": "920570",
    "end": "923679"
  },
  {
    "text": "And move backwards that's going to be exactly the same",
    "start": "923680",
    "end": "926830"
  },
  {
    "text": "Operations as if we start at the beginning and before so there's actually no point in testing",
    "start": "927200",
    "end": "930729"
  },
  {
    "text": "It'd be exactly the same code. We just be using different offsets into memory so taking exactly the same amount of time",
    "start": "930730",
    "end": "936310"
  },
  {
    "text": "While we wait for that to do its thing let's run the same programs on",
    "start": "937580",
    "end": "943209"
  },
  {
    "text": "The Imac and see how much faster it is so let's compile them up. I am turning on as I did before all the optimizations",
    "start": "944029",
    "end": "950559"
  },
  {
    "text": "For the array and things that'll make it go as fast as poss but some of the comparison to the array",
    "start": "951770",
    "end": "959639"
  },
  {
    "text": "Test and I going to compile with the speed test",
    "start": "960820",
    "end": "963360"
  },
  {
    "text": "Done, and I'm going to do the same thing",
    "start": "965980",
    "end": "967980"
  },
  {
    "text": "for the link",
    "start": "968830",
    "end": "970830"
  },
  {
    "text": "Test I'm going to say something really obvious now",
    "start": "971440",
    "end": "974129"
  },
  {
    "text": "But it's honestly a heck of a lot quicker this machine just to get compiled up and ready. Yeah",
    "start": "974130",
    "end": "979170"
  },
  {
    "text": "Those machines much faster because while I'm compiling everything on here and then transferring it across",
    "start": "979170",
    "end": "983219"
  },
  {
    "text": "Rather than trying to get my old C compiler going on the AtAri",
    "start": "983530",
    "end": "988170"
  },
  {
    "text": "And also the chances are this will produce better code, so it'll take make the most benefit of the speed",
    "start": "988570",
    "end": "994230"
  },
  {
    "text": "We can pile them up, so let's run the linked list test as we did before",
    "start": "994780",
    "end": "998699"
  },
  {
    "text": "boom",
    "start": "999910",
    "end": "1001800"
  },
  {
    "text": "It's done",
    "start": "1001800",
    "end": "1003240"
  },
  {
    "text": "Everything now you notice that took a lot quicker?",
    "start": "1003240",
    "end": "1005599"
  },
  {
    "text": "The numbers are still roughly in the same order still about 100 and around 200 but remember this is a different",
    "start": "1006120",
    "end": "1013579"
  },
  {
    "text": "Clock we cannot compare the ticks from that one - it's on the different numbers, but we get the average here two hundred and nine",
    "start": "1013890",
    "end": "1021290"
  },
  {
    "text": "Point five four I'm acting this is 166 atari ticks",
    "start": "1021870",
    "end": "1026869"
  },
  {
    "text": "They're much slower chicks than the I like ticks we can't compare that to that we can compare",
    "start": "1026870",
    "end": "1031130"
  },
  {
    "text": "horizontally",
    "start": "1031710",
    "end": "1032819"
  },
  {
    "text": "let's do the same now with the array test and",
    "start": "1032820",
    "end": "1036079"
  },
  {
    "text": "Wow",
    "start": "1038220",
    "end": "1039600"
  },
  {
    "text": "When we did the linked list test on the atari it was faster than the array test",
    "start": "1039600",
    "end": "1044510"
  },
  {
    "text": "Roughly take you about ten percent faster",
    "start": "1045570",
    "end": "1047599"
  },
  {
    "text": "Nothing really in it you could say look at the difference on",
    "start": "1048660",
    "end": "1052099"
  },
  {
    "text": "The Imac the IMac takes forty three point four four clock ticks to do the array",
    "start": "1052710",
    "end": "1058878"
  },
  {
    "text": "209 that's five times",
    "start": "1059730",
    "end": "1061730"
  },
  {
    "text": "Faster for the Array was on the Atari the linked list was faster",
    "start": "1062670",
    "end": "1066979"
  },
  {
    "text": "So a reverse array is now going on",
    "start": "1067620",
    "end": "1070219"
  },
  {
    "text": "the Atari",
    "start": "1071220",
    "end": "1073220"
  },
  {
    "text": "114 and",
    "start": "1073860",
    "end": "1075860"
  },
  {
    "text": "That's quicker. That's quicker than the original array, and that's quicker than the linked list, so if we do everything backwards",
    "start": "1075990",
    "end": "1082790"
  },
  {
    "text": "Doogie where it's very good if you do everything forwards",
    "start": "1084570",
    "end": "1088518"
  },
  {
    "text": "It's much slower. I'm a bit confused",
    "start": "1089630",
    "end": "1092109"
  },
  {
    "text": "Is there any possibility that's just a problem the code or something always are you going to reveal something to this year?",
    "start": "1092180",
    "end": "1097509"
  },
  {
    "text": "We need to delve a bit deeper here to see what's really going on",
    "start": "1099890",
    "end": "1102850"
  },
  {
    "text": "Remember we wrote these programs in C",
    "start": "1104480",
    "end": "1106480"
  },
  {
    "text": "So we wrote these in the high-level language and then they got compiled down",
    "start": "1106790",
    "end": "1109960"
  },
  {
    "text": "To the instructions that the machine can execute and what's actually happening here. Is that the research shows that the machine can execute?",
    "start": "1110300",
    "end": "1116259"
  },
  {
    "text": "Favor walking backwards down something compared with going further upwards now",
    "start": "1116840",
    "end": "1122979"
  },
  {
    "text": "Let's run that same array backwards",
    "start": "1123260",
    "end": "1125379"
  },
  {
    "text": "Program on the IMac for completing this so let me compile that one up and again. I'm",
    "start": "1125900",
    "end": "1132580"
  },
  {
    "text": "Optimizing everything to the hilt",
    "start": "1133280",
    "end": "1135280"
  },
  {
    "text": "Test and so we'll run speed tests back",
    "start": "1135800",
    "end": "1138220"
  },
  {
    "text": "And we'll run this one so before the arrays now much faster",
    "start": "1141380",
    "end": "1146200"
  },
  {
    "text": "According to this a reversal rate should be faster than the forward array. So what would you expect the value to be shown for?",
    "start": "1147590",
    "end": "1153609"
  },
  {
    "text": "Run on the reverse away about fifteen or twenty directly if it was the same as that did",
    "start": "1154730",
    "end": "1160179"
  },
  {
    "text": "All right",
    "start": "1160940",
    "end": "1162889"
  },
  {
    "text": "Would you like to stick with that answer or would you like to change that oh?",
    "start": "1162890",
    "end": "1166090"
  },
  {
    "text": "nervous excited actually",
    "start": "1167270",
    "end": "1169270"
  },
  {
    "text": "Because the Atari was faster to do a linked list in an array and the iMac was the other way around",
    "start": "1169760",
    "end": "1176260"
  },
  {
    "text": "I'm going to say it's going to be slower to do it in reverse. So you reckon firm supposed to do it in reverse",
    "start": "1176260",
    "end": "1180640"
  },
  {
    "text": "Oh, I do like an indecisive person there. We go average time forty seven",
    "start": "1181030",
    "end": "1185920"
  },
  {
    "text": "point four six",
    "start": "1188090",
    "end": "1190010"
  },
  {
    "text": "So marginally slow marginally slower about 10% slower",
    "start": "1190010",
    "end": "1194619"
  },
  {
    "text": "but still an order of magnitude",
    "start": "1195410",
    "end": "1197590"
  },
  {
    "text": "faster than this we could do the same on the raspberry Pi",
    "start": "1199220",
    "end": "1202329"
  },
  {
    "text": "So again, we'll compile all of these up, so we'll do it array test",
    "start": "1203750",
    "end": "1208450"
  },
  {
    "text": "Compile it up noticeably slower to compile will do the LL test. This is the list version",
    "start": "1210290",
    "end": "1217509"
  },
  {
    "text": "And we'll do the reverse test",
    "start": "1219600",
    "end": "1223829"
  },
  {
    "text": "So compile them all up on the last repair, so let's run these and get the numbers we've run the array test",
    "start": "1225700",
    "end": "1231299"
  },
  {
    "text": "we now get nine 165 point seven five as an average for the array will run the link list and",
    "start": "1231970",
    "end": "1239518"
  },
  {
    "text": "We get one eight five eight",
    "start": "1241150",
    "end": "1244800"
  },
  {
    "text": "Point six one for the linked list test and now we run the reverse test",
    "start": "1246160",
    "end": "1252000"
  },
  {
    "text": "and",
    "start": "1253810",
    "end": "1255810"
  },
  {
    "text": "We get 101",
    "start": "1255880",
    "end": "1258209"
  },
  {
    "text": "9.5 five so we've run the test now. So we've we've assumed nothing",
    "start": "1261190",
    "end": "1266158"
  },
  {
    "text": "We've ran some tests or to get some data so we can see which is faster an array or liquids with this operation",
    "start": "1266160",
    "end": "1271259"
  },
  {
    "text": "We've been trying",
    "start": "1271260",
    "end": "1272710"
  },
  {
    "text": "And we've got some pretty interesting results",
    "start": "1272710",
    "end": "1275278"
  },
  {
    "text": "So we're running on the atari the linked list was faster than the array",
    "start": "1275280",
    "end": "1279090"
  },
  {
    "text": "unless he ran the array backwards in which case the array was faster than the linked list and",
    "start": "1279460",
    "end": "1283380"
  },
  {
    "text": "The array going forward we'll come back to that",
    "start": "1283510",
    "end": "1285600"
  },
  {
    "text": "We ran it on the raspberry Pi and here the array was about twice as fast as the linked list",
    "start": "1285600",
    "end": "1289648"
  },
  {
    "text": "Baby rarely backwards the Array was slower, and if you do it on the IMac view range height, I'm faster than the linked list",
    "start": "1289960",
    "end": "1296460"
  },
  {
    "text": "Whichever way you went so what's going on here?",
    "start": "1296980",
    "end": "1299370"
  },
  {
    "text": "Well, let's ignore the iMac for the minute the apple Haters will love that bit",
    "start": "1299490",
    "end": "1303539"
  },
  {
    "text": "but let's ignore the Imac for though and let's just have a look at the raspBerry Pi and",
    "start": "1303540",
    "end": "1308009"
  },
  {
    "text": "the attali so we've got",
    "start": "1308620",
    "end": "1310620"
  },
  {
    "text": "the Atari and the Raspberry Pi and we'll just go with",
    "start": "1310780",
    "end": "1314399"
  },
  {
    "text": "The array speed and the link to this so we've got about one hundred and seventy nine",
    "start": "1315040",
    "end": "1320340"
  },
  {
    "text": "For that and one hundred and sixty-six clock ticks that now when we can't compare the clock ticks between the different machines because they're different",
    "start": "1320590",
    "end": "1327028"
  },
  {
    "text": "different clocks used in the machines",
    "start": "1327700",
    "end": "1329429"
  },
  {
    "text": "but we can compare them relatively between the same thing on the same machine for the raspberry Pi it was",
    "start": "1329430",
    "end": "1335279"
  },
  {
    "text": "966 and",
    "start": "1335830",
    "end": "1337600"
  },
  {
    "text": "that was a",
    "start": "1337600",
    "end": "1339600"
  },
  {
    "text": "1859 Kish now what's going on here?",
    "start": "1339790",
    "end": "1342450"
  },
  {
    "text": "Well the thing we need to remember",
    "start": "1343840",
    "end": "1345730"
  },
  {
    "text": "if you look at the machine code",
    "start": "1345730",
    "end": "1346900"
  },
  {
    "text": "It's roughly the same length the same number of operation now on the atari some of the instructions will take slightly longer than to execute",
    "start": "1346900",
    "end": "1354059"
  },
  {
    "text": "But that's not what gets going on here",
    "start": "1354370",
    "end": "1356400"
  },
  {
    "text": "We need to think back to the video on",
    "start": "1356500",
    "end": "1358829"
  },
  {
    "text": "Cashiers that we did the difference between the raspberry Pi CPU would have been much faster and more modern and the Ataris",
    "start": "1359320",
    "end": "1366149"
  },
  {
    "text": "Is that the AtAris?",
    "start": "1366520",
    "end": "1368520"
  },
  {
    "text": "Doesn't have a cache",
    "start": "1368980",
    "end": "1370690"
  },
  {
    "text": "So every instructionally needs to fetch every bit of data that needs to fetch has to be fetched from memory each time",
    "start": "1370690",
    "end": "1378509"
  },
  {
    "text": "No, it's not cached",
    "start": "1378880",
    "end": "1380880"
  },
  {
    "text": "broadly speaking we believe something going on there, but broadly speaking with no cache is about half the",
    "start": "1381220",
    "end": "1387000"
  },
  {
    "text": "Prefetch buffer if you want to get into the details, but we can see there's no cash",
    "start": "1387760",
    "end": "1390900"
  },
  {
    "text": "So if we think about the cPU in the atari, then it's having to access",
    "start": "1390900",
    "end": "1395249"
  },
  {
    "text": "memory",
    "start": "1396340",
    "end": "1398340"
  },
  {
    "text": "For everything so everything that the cPU needs to fetch on the Atari the instructions",
    "start": "1399130",
    "end": "1403979"
  },
  {
    "text": "The data from the array or a linked list and of course the next pointer from the linked list has to come from memory",
    "start": "1404290",
    "end": "1411569"
  },
  {
    "text": "So it takes the same amount of time we get are the two weather fetching data or fetching instructions on the raspBerry Pi however?",
    "start": "1411570",
    "end": "1417750"
  },
  {
    "text": "We still got the main body the cPU which is going to execute things and it has memory",
    "start": "1418750",
    "end": "1425400"
  },
  {
    "text": "as well",
    "start": "1426100",
    "end": "1427570"
  },
  {
    "text": "but in between there we have a cache in fact we actually probably have two caches one for Data and",
    "start": "1427570",
    "end": "1434730"
  },
  {
    "text": "one for instructions as",
    "start": "1437140",
    "end": "1439140"
  },
  {
    "text": "I want to see if you activate as we looked at in the previous video is",
    "start": "1439720",
    "end": "1442709"
  },
  {
    "text": "Access to it via the caches, and then they if they haven't got it to get it",
    "start": "1443290",
    "end": "1447929"
  },
  {
    "text": "From memory, so why does this make a difference?",
    "start": "1448600",
    "end": "1451140"
  },
  {
    "text": "Surely things will still wake up so well on the atari the fastest",
    "start": "1451809",
    "end": "1455099"
  },
  {
    "text": "thing in the theory is basically the memory the memory is much faster than the cPU that's about twice as fast and",
    "start": "1455770",
    "end": "1460650"
  },
  {
    "text": "So the memory can provide a data exactly when the cPU needs it. There's no real need for cash",
    "start": "1460870",
    "end": "1465929"
  },
  {
    "text": "Move ahead to the raspberry Pi and the are make of course then the cPU is much faster than the memory",
    "start": "1466900",
    "end": "1473309"
  },
  {
    "text": "So when cPU ask for something it has to wait while the memory?",
    "start": "1473740",
    "end": "1478140"
  },
  {
    "text": "provides it",
    "start": "1478780",
    "end": "1480340"
  },
  {
    "text": "Now let's figure out how what happens when we run our program?",
    "start": "1480340",
    "end": "1482549"
  },
  {
    "text": "with the array",
    "start": "1483550",
    "end": "1485550"
  },
  {
    "text": "on the raspberry Pi",
    "start": "1486220",
    "end": "1488220"
  },
  {
    "text": "Every instruction after the first time will be accessed will be cached in the instruction cache",
    "start": "1488450",
    "end": "1494378"
  },
  {
    "text": "So the first time we go through the loop all the instructions are going to be used in that loop will have been cached in",
    "start": "1494509",
    "end": "1498849"
  },
  {
    "text": "The instruction cap so you can get these immediately the data",
    "start": "1498850",
    "end": "1501278"
  },
  {
    "text": "particularly with the array would also collapse a bit with a linked list we",
    "start": "1502669",
    "end": "1505627"
  },
  {
    "text": "Don't get just one or two bytes in each time",
    "start": "1506090",
    "end": "1508898"
  },
  {
    "text": "I'll get what we call a cache line pickups 128 bytes in a go, so we'll get some of the data that we already need",
    "start": "1508899",
    "end": "1514268"
  },
  {
    "text": "Into the cache as well, so some of the data will already be there in the array more so with your right",
    "start": "1515090",
    "end": "1519758"
  },
  {
    "text": "so the reason of the array runs faster on the raspberry Pi is that all the instructions are coming straight out of the",
    "start": "1519769",
    "end": "1526089"
  },
  {
    "text": "Institute basically giving us a fast lane for those instructions, so they get there immediately",
    "start": "1526250",
    "end": "1529750"
  },
  {
    "text": "There's only the data that needs to get from main memory, which will get cached as well",
    "start": "1530840",
    "end": "1535028"
  },
  {
    "text": "So the same happens with the route list program",
    "start": "1535789",
    "end": "1537789"
  },
  {
    "text": "Except for one crucial difference with the linked list poem we have to make one memory access",
    "start": "1538279",
    "end": "1542768"
  },
  {
    "text": "to get the data value that we're going to sum and",
    "start": "1542990",
    "end": "1545620"
  },
  {
    "text": "Then we have to make another memory access which has to go through the cat into main memory",
    "start": "1545929",
    "end": "1549877"
  },
  {
    "text": "for the address of the next thing",
    "start": "1550970",
    "end": "1552970"
  },
  {
    "text": "we have to make to",
    "start": "1553789",
    "end": "1555789"
  },
  {
    "text": "Memory request which may get satisfied by main Memory here",
    "start": "1555889",
    "end": "1558819"
  },
  {
    "text": "Where's our the array one?",
    "start": "1559519",
    "end": "1560710"
  },
  {
    "text": "We only have to make one for the value that we're interested in and because of the cache",
    "start": "1560710",
    "end": "1564250"
  },
  {
    "text": "We get sort of a fast passing instructions, and so actually not having to do that second memory access to get the next pointer here",
    "start": "1564590",
    "end": "1572018"
  },
  {
    "text": "Means that this the arraylist of the program ends are working about twice as fast on the atari because everything is coming from",
    "start": "1572720",
    "end": "1579669"
  },
  {
    "text": "memory it doesn't matter whether you're reading an instruction or reading a",
    "start": "1580070",
    "end": "1584230"
  },
  {
    "text": "bit of Data",
    "start": "1585740",
    "end": "1586539"
  },
  {
    "text": "It's still going to come from memory each time so actually the front of the value is already pre-calculated in memory means that actually runs",
    "start": "1586539",
    "end": "1593528"
  },
  {
    "text": "Slightly faster, I mean, we're talking perhaps 10% faster. Not really a billion so we get a slight speed benefit",
    "start": "1594470",
    "end": "1600579"
  },
  {
    "text": "Now to show that this is the case",
    "start": "1601700",
    "end": "1603850"
  },
  {
    "text": "I took the same version of the program on the atari and ran it on the atari router now the difference for the AtAri",
    "start": "1603850",
    "end": "1610148"
  },
  {
    "text": "St. We use there and the Falcon is that the falcon has a slightly later version of the 68000 processor",
    "start": "1610149",
    "end": "1615518"
  },
  {
    "text": "which has a cache",
    "start": "1616159",
    "end": "1618130"
  },
  {
    "text": "In it both instructions and data cache and when I ran that on there the times that came out",
    "start": "1618130",
    "end": "1624010"
  },
  {
    "text": "So the array was 46 clock ticks is much faster processor anyway, and the link list",
    "start": "1625130",
    "end": "1631270"
  },
  {
    "text": "was",
    "start": "1631970",
    "end": "1633970"
  },
  {
    "text": "58.5",
    "start": "1634580",
    "end": "1636080"
  },
  {
    "text": "Clock ticks so on the Falcon because you've got the cache. They're just like on the raspberry Pi",
    "start": "1636080",
    "end": "1640750"
  },
  {
    "text": "The array version ends up being traffic exactly the same program exactly the same machine code",
    "start": "1641390",
    "end": "1646839"
  },
  {
    "text": "Because you've got the cache there the array version ends up being faster because the instructions of their",
    "start": "1647510",
    "end": "1652209"
  },
  {
    "text": "Professional and that sort of fat packs from the cache rather having to go to main memory each time",
    "start": "1652640",
    "end": "1656169"
  },
  {
    "text": "mean that the",
    "start": "1656900",
    "end": "1658520"
  },
  {
    "text": "irradiation becomes faster than the linked list version",
    "start": "1658520",
    "end": "1661539"
  },
  {
    "text": "Now tell them other things we haven't talked about yet. Why is the reverse array faster on the AtAri?",
    "start": "1662870",
    "end": "1669400"
  },
  {
    "text": "Simple answer to that it",
    "start": "1670280",
    "end": "1671980"
  },
  {
    "text": "Just uses slightly different instructions their instructions on the six 8000 that allow you to do a decrement",
    "start": "1671980",
    "end": "1676809"
  },
  {
    "text": "Testing with zero branch which isn't all in one instruction",
    "start": "1676880",
    "end": "1679869"
  },
  {
    "text": "So you can actually make the code slightly more compact and run slightly faster again. It's a small enough time",
    "start": "1680299",
    "end": "1686648"
  },
  {
    "text": "Why then is the imac significantly faster? We're getting sort of five times faster?",
    "start": "1687860",
    "end": "1693849"
  },
  {
    "text": "Well that's because I use a slightly different compiler that I use the clang C",
    "start": "1694220",
    "end": "1698319"
  },
  {
    "text": "Compiler on the IMac rather than GCC for the other two and it cheats it",
    "start": "1698450",
    "end": "1703210"
  },
  {
    "text": "It squats that you've got an array axises in the loop, and it says well",
    "start": "1703850",
    "end": "1708039"
  },
  {
    "text": "Okay, rather than doing a loop around one array access",
    "start": "1708039",
    "end": "1711248"
  },
  {
    "text": "I will do a loop around eight array accesses all in one go",
    "start": "1711250",
    "end": "1715030"
  },
  {
    "text": "So it actually removes some of the tests for the loop and it makes the program much faster for the compilers being clever",
    "start": "1715030",
    "end": "1721179"
  },
  {
    "text": "And optimizing the program",
    "start": "1721460",
    "end": "1722950"
  },
  {
    "text": "So it runs faster the answer to whether the raise faster than the link list or not?",
    "start": "1722950",
    "end": "1727870"
  },
  {
    "text": "Very much depends on how you cpu in the machine that you've built is configured to actually execute the code",
    "start": "1728240",
    "end": "1734260"
  },
  {
    "text": "So you can't make assumptions?",
    "start": "1734690",
    "end": "1736220"
  },
  {
    "text": "About how a cpu will execute code you really need to do the test to see what's happening even within the same",
    "start": "1736220",
    "end": "1741970"
  },
  {
    "text": "architecture family the difference between the six 8006 8030 in the Falcon mean that",
    "start": "1742970",
    "end": "1749319"
  },
  {
    "text": "Assumptions we make based on what they charity did where the Rally was slower than the link list aren't true on",
    "start": "1749750",
    "end": "1756069"
  },
  {
    "text": "The Falcon and when you move it on to a completely different architecture like the raspberry Pi or the X86 chip in the iMac",
    "start": "1756260",
    "end": "1762909"
  },
  {
    "text": "Then again you get different effects, so the best thing is when you're faced with a question question like this, and you're not sure",
    "start": "1763070",
    "end": "1768700"
  },
  {
    "text": "Come up with some test and collect real data, and you'll be able to see what's going on",
    "start": "1769220",
    "end": "1773500"
  },
  {
    "text": "could you",
    "start": "1795300",
    "end": "1797300"
  }
]