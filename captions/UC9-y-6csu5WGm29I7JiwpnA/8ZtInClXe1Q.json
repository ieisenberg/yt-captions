[
  {
    "text": "The title of this, ur, video should be, c...can we have this. The title of this video should be \"How not to store passwords\"",
    "start": "0",
    "end": "6620"
  },
  {
    "text": "um...uh, thank you, um",
    "start": "6620",
    "end": "9800"
  },
  {
    "text": "because, y...you really shouldn't store passwords yourself",
    "start": "9840",
    "end": "14440"
  },
  {
    "text": "if you can at all avoid it",
    "start": "14440",
    "end": "16039"
  },
  {
    "text": "if you are running any kind of web service",
    "start": "16040",
    "end": "18040"
  },
  {
    "text": "and you are storing passwords",
    "start": "18040",
    "end": "20220"
  },
  {
    "text": "it is so incredibly easy to get it wrong",
    "start": "20240",
    "end": "24260"
  },
  {
    "text": "ur, that basically you shouldn't try",
    "start": "24260",
    "end": "27540"
  },
  {
    "text": "if you can use sign-in with facebook or twitter or google",
    "start": "27540",
    "end": "31160"
  },
  {
    "text": "and get them to handle it for you",
    "start": "31160",
    "end": "33739"
  },
  {
    "text": "for crying out loud please do",
    "start": "33740",
    "end": "35740"
  },
  {
    "text": "if you're web programmer",
    "start": "37900",
    "end": "39760"
  },
  {
    "text": "sooner or later, you're gonna have to store passwords",
    "start": "39760",
    "end": "42620"
  },
  {
    "text": "and this is the ways not to do it",
    "start": "42620",
    "end": "46840"
  },
  {
    "text": "if you wanna know the ways to do it i will kinda say that at the end",
    "start": "46840",
    "end": "50060"
  },
  {
    "text": "but please please please look up a recent tutorial for the language you're using.",
    "start": "50060",
    "end": "55760"
  },
  {
    "text": "um, by the time you watch this video,",
    "start": "55760",
    "end": "58000"
  },
  {
    "text": "the advice will have changed",
    "start": "58120",
    "end": "59480"
  },
  {
    "text": "you may be watching this years in the future",
    "start": "59480",
    "end": "61480"
  },
  {
    "text": "look up a tutorial that has been written the last few months by someone reputable and follow that.",
    "start": "61860",
    "end": "67420"
  },
  {
    "text": "how do you not store passwords.",
    "start": "68040",
    "end": "69600"
  },
  {
    "text": "the first instinct, the naive thing :",
    "start": "69600",
    "end": "72400"
  },
  {
    "text": "is just store the users passwords",
    "start": "73740",
    "end": "75740"
  },
  {
    "text": "so let's say you have a signup box, and you have a username and password box",
    "start": "75740",
    "end": "81700"
  },
  {
    "text": "the naive thing is when a user signs up,",
    "start": "81720",
    "end": "84100"
  },
  {
    "text": "you take their password and store it in the database as it is in plain text.",
    "start": "84140",
    "end": "89340"
  },
  {
    "text": "that has a couple of advantages:",
    "start": "89360",
    "end": "90840"
  },
  {
    "text": "first of all if they forget their password, you could just email it to them.",
    "start": "90840",
    "end": "94920"
  },
  {
    "text": "and it means that checking it is really simple:",
    "start": "95340",
    "end": "98100"
  },
  {
    "text": "when they log in again, you take the username, you take that password,",
    "start": "98100",
    "end": "101460"
  },
  {
    "text": "and then you check what they just typed",
    "start": "101460",
    "end": "103460"
  },
  {
    "text": "you compare it to what it's in the database",
    "start": "103460",
    "end": "105460"
  },
  {
    "text": "and if it matches, you let them in",
    "start": "105460",
    "end": "107460"
  },
  {
    "text": "and that is the naive approach to storing passwords",
    "start": "107880",
    "end": "111560"
  },
  {
    "text": "and there are still professional websites, out there, run by big corporations",
    "start": "111560",
    "end": "117540"
  },
  {
    "text": "that still use this strategy",
    "start": "117540",
    "end": "119540"
  },
  {
    "text": "and you can tell that they're using this strategy",
    "start": "119540",
    "end": "121540"
  },
  {
    "text": "because they email your password back to you in plain text when you ask for it",
    "start": "121540",
    "end": "126480"
  },
  {
    "text": "um, this is a monumentally bad idea",
    "start": "126840",
    "end": "130519"
  },
  {
    "text": "this is an astonishingly bad idea because if someone gets into your database",
    "start": "130520",
    "end": "136780"
  },
  {
    "text": "through a security hole, or because they're an insider with access",
    "start": "136780",
    "end": "140440"
  },
  {
    "text": "and let's be honest if you're storing passwords this way",
    "start": "140440",
    "end": "142440"
  },
  {
    "text": "you probably have other security holes too",
    "start": "142440",
    "end": "145060"
  },
  {
    "text": "then, they can just read out every user, and their passwords",
    "start": "145060",
    "end": "150280"
  },
  {
    "text": "so you have their email address, and you have their passwords",
    "start": "150280",
    "end": "152500"
  },
  {
    "text": "and let's be honest, most people reuse the same password for their email address on websites",
    "start": "152500",
    "end": "158580"
  },
  {
    "text": "so this is a bad idea, because it's incredibly insecure",
    "start": "158800",
    "end": "162280"
  },
  {
    "text": "approach number 2",
    "start": "162280",
    "end": "164280"
  },
  {
    "text": "slightly less naive, still a bad idea",
    "start": "165800",
    "end": "168420"
  },
  {
    "text": "is you take that password,",
    "start": "168420",
    "end": "170220"
  },
  {
    "text": "and you encrypt it,",
    "start": "170260",
    "end": "172400"
  },
  {
    "text": "so you hide it behind something",
    "start": "172400",
    "end": "176019"
  },
  {
    "text": "and encryption is two way",
    "start": "176120",
    "end": "178120"
  },
  {
    "text": "so encryption is so you have a key",
    "start": "178120",
    "end": "180120"
  },
  {
    "text": "that will lock something, and then unlock it again",
    "start": "180120",
    "end": "182760"
  },
  {
    "text": "so the naive approach is you take the user's password",
    "start": "182760",
    "end": "186500"
  },
  {
    "text": "you take it into your database, encrypt it like this behind the other thing you've locked",
    "start": "186860",
    "end": "191760"
  },
  {
    "text": "and then, when they log in again",
    "start": "191760",
    "end": "195360"
  },
  {
    "text": "you take what they've got, you go here, you unlock this",
    "start": "195360",
    "end": "200080"
  },
  {
    "text": "you compare them, and then you let them in!",
    "start": "200080",
    "end": "202080"
  },
  {
    "text": "now that's a little bit more secure,",
    "start": "202680",
    "end": "204680"
  },
  {
    "text": "because if someone just reads out the database you've got an encryption key there",
    "start": "204680",
    "end": "208439"
  },
  {
    "text": "but it's got a couple of big flaws",
    "start": "208440",
    "end": "210440"
  },
  {
    "text": "first of all, as soon as that key is available",
    "start": "210860",
    "end": "213900"
  },
  {
    "text": "the password is still visible and can still be read out",
    "start": "214060",
    "end": "217340"
  },
  {
    "text": "and it means that an insider, or even a hacker in some cases",
    "start": "217340",
    "end": "221060"
  },
  {
    "text": "can just take the encryption key as well with them",
    "start": "221060",
    "end": "223660"
  },
  {
    "text": "and they've still got access to all the passwords",
    "start": "223660",
    "end": "225660"
  },
  {
    "text": "that's a pretty bad idea",
    "start": "226060",
    "end": "228300"
  },
  {
    "text": "the other flaw with this is that if you have lots of people using the same password",
    "start": "228880",
    "end": "233740"
  },
  {
    "text": "and if you've got a big site this will happen",
    "start": "233740",
    "end": "235740"
  },
  {
    "text": "because lots of people will use 123456 or password1",
    "start": "235740",
    "end": "239860"
  },
  {
    "text": "and if I've just said either of your youtube passwords, go change it",
    "start": "239860",
    "end": "243380"
  },
  {
    "text": "if you have that all the encryption will be the same",
    "start": "243380",
    "end": "247840"
  },
  {
    "text": "so, even if you don't have the encryption key,",
    "start": "247840",
    "end": "250700"
  },
  {
    "text": "you can still tell that all these people have the same password, so it's probably a common one",
    "start": "251040",
    "end": "255480"
  },
  {
    "text": "Adobe just made this mistake this month, as we record this",
    "start": "255480",
    "end": "259419"
  },
  {
    "text": "Adobe, the big company",
    "start": "259420",
    "end": "261420"
  },
  {
    "text": "behind Acrobat, which makes PDFs",
    "start": "261420",
    "end": "264140"
  },
  {
    "text": "behind Photoshop, behind all the big tools",
    "start": "264140",
    "end": "267540"
  },
  {
    "text": "millions and millions and millions of users",
    "start": "267540",
    "end": "269540"
  },
  {
    "text": "their password database got breached",
    "start": "270180",
    "end": "272180"
  },
  {
    "text": "gigabytes of passwords lost",
    "start": "272180",
    "end": "275539"
  },
  {
    "text": "but it's fine..",
    "start": "275680",
    "end": "277380"
  },
  {
    "text": "yours ? yes mine were as well",
    "start": "277440",
    "end": "279040"
  },
  {
    "text": "fortunately i didn't use that password anywhere else, which is what you should hopefully be doing",
    "start": "279040",
    "end": "283740"
  },
  {
    "text": "their passwords were encrypted",
    "start": "283740",
    "end": "286180"
  },
  {
    "text": "and, that was it, it was just a lock on it",
    "start": "286320",
    "end": "290060"
  },
  {
    "text": "and it meant that everyone who had the same password",
    "start": "290060",
    "end": "292380"
  },
  {
    "text": "had the same encrypted code",
    "start": "292500",
    "end": "294940"
  },
  {
    "text": "unfortunately they'd also stored all the password hints with them",
    "start": "294940",
    "end": "298500"
  },
  {
    "text": "which is wonderful",
    "start": "298500",
    "end": "300500"
  },
  {
    "text": "because then you can look, oh look, there's 20 people who've used the same password here",
    "start": "300500",
    "end": "305520"
  },
  {
    "text": "and that one says Michael Jackson is the password hint",
    "start": "305520",
    "end": "308560"
  },
  {
    "text": "and that one says Halloween",
    "start": "308560",
    "end": "311300"
  },
  {
    "text": "and that one says \"type of movie\" oh look it's \"thriller'",
    "start": "311300",
    "end": "314000"
  },
  {
    "text": "OK, wonderful it's \"thriller'",
    "start": "314000",
    "end": "316000"
  },
  {
    "text": "and that's  one of the biggest software companies in the world didn't do this properly",
    "start": "317340",
    "end": "322500"
  },
  {
    "text": "anyway, so , don't use encryption",
    "start": "324400",
    "end": "326400"
  },
  {
    "text": "naive attempt number 3:",
    "start": "326400",
    "end": "328400"
  },
  {
    "text": "hashing",
    "start": "329440",
    "end": "330040"
  },
  {
    "text": "now i talked about this in an earlier video",
    "start": "330280",
    "end": "332280"
  },
  {
    "text": "a hash is a summary of a load of data",
    "start": "332280",
    "end": "336200"
  },
  {
    "text": "so let's say you have the password the user enters",
    "start": "336200",
    "end": "339140"
  },
  {
    "text": "and you know that, when they enter it, you're gonna hash it.",
    "start": "339520",
    "end": "342979"
  },
  {
    "text": "you're gonna put it through some kind of convolutions",
    "start": "342980",
    "end": "344980"
  },
  {
    "text": "that ends up like that",
    "start": "344980",
    "end": "347120"
  },
  {
    "text": "and then, when the users enters their password again",
    "start": "347120",
    "end": "350139"
  },
  {
    "text": "mutate in the same way, compare, they're the same",
    "start": "350920",
    "end": "353740"
  },
  {
    "text": "which is great in theory,",
    "start": "353740",
    "end": "355740"
  },
  {
    "text": "but unfortunately you open the same problem that Adobe had",
    "start": "355740",
    "end": "359120"
  },
  {
    "text": "which is that if you can tell a common password, if it's in loads of people's database entries",
    "start": "359240",
    "end": "364720"
  },
  {
    "text": "you probably can work out what it is",
    "start": "364860",
    "end": "366860"
  },
  {
    "text": "worse than that, as i've said before",
    "start": "366980",
    "end": "368900"
  },
  {
    "text": "Google has an index of these things",
    "start": "368900",
    "end": "370780"
  },
  {
    "text": "if you're using a basic hashing algorithm",
    "start": "370780",
    "end": "373120"
  },
  {
    "text": "you can pretty much just type the code into Google and it will give you the password back",
    "start": "373120",
    "end": "378120"
  },
  {
    "text": "as well as just  searching for common hashes on Google",
    "start": "378240",
    "end": "381280"
  },
  {
    "text": "there are these things called \"rainbow tables\"",
    "start": "381280",
    "end": "383280"
  },
  {
    "text": "which trade off computation time for hard drive space",
    "start": "383280",
    "end": "387639"
  },
  {
    "text": "so rather than having to calculate millions and milions of hashes,",
    "start": "387640",
    "end": "391480"
  },
  {
    "text": "for this one password, someone has already done it for you",
    "start": "391480",
    "end": "394780"
  },
  {
    "text": "calculated hashes for billions of common passwords",
    "start": "395140",
    "end": "399960"
  },
  {
    "text": "and just put them out in a database",
    "start": "400220",
    "end": "402220"
  },
  {
    "text": "it's gigabytes long, but it's a lot easier to search through that",
    "start": "402220",
    "end": "405600"
  },
  {
    "text": "than it is to try and do a load of calculations",
    "start": "405600",
    "end": "407600"
  },
  {
    "text": "so if you're using something common like MD5 or SHA1 with nothing else added",
    "start": "407600",
    "end": "412820"
  },
  {
    "text": "the rainbow table will pretty much help you crack that in a few seconds",
    "start": "413340",
    "end": "418400"
  },
  {
    "text": "i have in the past used all those naive approaches myself on things i built in my youth",
    "start": "418920",
    "end": "424440"
  },
  {
    "text": "i've gone back and fixed them where they're still alive",
    "start": "424440",
    "end": "426460"
  },
  {
    "text": "and just sort of quietly buried code where they weren't",
    "start": "426460",
    "end": "430380"
  },
  {
    "text": "but the approach nowadays is to use something called hashing and salting",
    "start": "431420",
    "end": "435920"
  },
  {
    "text": "as i said the best thing is not to store passwords at all but if you have to",
    "start": "435920",
    "end": "439380"
  },
  {
    "text": "the advice these days is hash; salt",
    "start": "439380",
    "end": "442900"
  },
  {
    "text": "so a salt is a random string of characters",
    "start": "443020",
    "end": "446780"
  },
  {
    "text": "that is different for every single user",
    "start": "447000",
    "end": "449640"
  },
  {
    "text": "it's a password you know, in your database, you can store it in plain text, it doesn't matter",
    "start": "449660",
    "end": "454640"
  },
  {
    "text": "the user could even know it, not it would help them with anything",
    "start": "454640",
    "end": "457660"
  },
  {
    "text": "that means",
    "start": "457660",
    "end": "459520"
  },
  {
    "text": "when the user registers, they put their password in",
    "start": "459520",
    "end": "462360"
  },
  {
    "text": "and it goes into the same algorithm but as well as that",
    "start": "462360",
    "end": "465520"
  },
  {
    "text": "you generate a random string of characters for each user",
    "start": "465540",
    "end": "468060"
  },
  {
    "text": "completely random, a new second password if you like",
    "start": "468220",
    "end": "471400"
  },
  {
    "text": "that goes in the database",
    "start": "471400",
    "end": "472919"
  },
  {
    "text": "and that gets fed into this algorithm too",
    "start": "473080",
    "end": "475800"
  },
  {
    "text": "so that comes in, mutates it a bit more, comes out with something else",
    "start": "476180",
    "end": "480500"
  },
  {
    "text": "so if another user uses the same password",
    "start": "480500",
    "end": "483520"
  },
  {
    "text": "that algorithm will get a completely different salt",
    "start": "483680",
    "end": "485960"
  },
  {
    "text": "from them",
    "start": "485960",
    "end": "487180"
  },
  {
    "text": "some people might base it on the username that's generally a bad thing to do",
    "start": "487180",
    "end": "490600"
  },
  {
    "text": "it should just be a random string of characters",
    "start": "490600",
    "end": "492680"
  },
  {
    "text": "so the same password going in from a different user will mutate into something entirely different",
    "start": "492680",
    "end": "498320"
  },
  {
    "text": "the point of this",
    "start": "499140",
    "end": "500260"
  },
  {
    "text": "is that now you just have a random string for each user",
    "start": "501020",
    "end": "504460"
  },
  {
    "text": "you cannot possibly pull the password back from this",
    "start": "504460",
    "end": "507680"
  },
  {
    "text": "it wont appear in Google",
    "start": "507700",
    "end": "509300"
  },
  {
    "text": "because it's a massively long random string",
    "start": "509660",
    "end": "512539"
  },
  {
    "text": "you can't brute force it back",
    "start": "512940",
    "end": "514860"
  },
  {
    "text": "by looking at what common passwords are reused",
    "start": "514980",
    "end": "518099"
  },
  {
    "text": "all you can do",
    "start": "518220",
    "end": "519439"
  },
  {
    "text": "is do the old style attack",
    "start": "519440",
    "end": "521419"
  },
  {
    "text": "of trying every single common password one after the other",
    "start": "522080",
    "end": "526000"
  },
  {
    "text": "and if your salt is long enough",
    "start": "526000",
    "end": "527520"
  },
  {
    "text": "and your hashing algorithm is complicated enough",
    "start": "527520",
    "end": "529760"
  },
  {
    "text": "then that's really incredibly difficult to do",
    "start": "529760",
    "end": "532660"
  },
  {
    "text": "do it right, and it's lifetime of the universe difficult to do",
    "start": "532680",
    "end": "536760"
  },
  {
    "text": "or at least it is, until they use the password 123456",
    "start": "536760",
    "end": "542120"
  }
]