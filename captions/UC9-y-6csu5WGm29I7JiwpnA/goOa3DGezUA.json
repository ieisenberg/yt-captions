[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "We thought it might be a good idea to revisit the topic of text compression.",
    "start": "0",
    "end": "4920"
  },
  {
    "text": "Which was visited for the first time in the original compression video on the computerphile channel.",
    "start": "5080",
    "end": "10980"
  },
  {
    "text": "Some of you in the comments made the point to which",
    "start": "11040",
    "end": "13700"
  },
  {
    "text": "I must plead guilty that in trying to explain things I perhaps oversimplified a little.",
    "start": "13700",
    "end": "18600"
  },
  {
    "text": "To take the discussion on and make some more general points about text in general:",
    "start": "21740",
    "end": "27400"
  },
  {
    "text": "How compressible it is, what are good and bad ways to do it, and how it has all become",
    "start": "27400",
    "end": "34400"
  },
  {
    "text": "really quite big business over the past  thirty-odd years since it became commonly available.",
    "start": "34400",
    "end": "39240"
  },
  {
    "text": "Well -- the two names we ought to write down to start with on text compression are two gentlemen",
    "start": "39240",
    "end": "47240"
  },
  {
    "start": "40000",
    "end": "110000"
  },
  {
    "text": "who wrote a classic paper on it called Ziv and Lempel.",
    "start": "47240",
    "end": "52100"
  },
  {
    "text": "But most people certainly in English speaking worlds seem to find it easier to say Lempel-Ziv rather than Ziv-\nLempel",
    "start": "52100",
    "end": "60280"
  },
  {
    "text": "and so very widely now it's known as the LZ77 method.",
    "start": "61080",
    "end": "69000"
  },
  {
    "text": "Let's say we got something like this: \"The computerphile channel",
    "start": "69200",
    "end": "77320"
  },
  {
    "text": "handles computer topics\" in my original explanation, I put to you the idea of having a dictionary",
    "start": "77500",
    "end": "85000"
  },
  {
    "text": "of well known words and buzz phrases. Up at the top of the file with pointers to where these words occured",
    "start": "85000",
    "end": "91000"
  },
  {
    "text": "and if in doubt, use the pointers -- for repeats of certain words.",
    "start": "91000",
    "end": "96000"
  },
  {
    "text": "Well, the way it's actually done in practice is not dissimilar in principle to that, but",
    "start": "96000",
    "end": "101000"
  },
  {
    "text": "the details are even more clever in terms of achieving maximum compression",
    "start": "101000",
    "end": "108000"
  },
  {
    "text": "cutting down file size and so on.",
    "start": "108000",
    "end": "111000"
  },
  {
    "text": "What a typical LZ compressor will do is it will work its way through all of the text that you need to compress and will actually",
    "start": "111000",
    "end": "121000"
  },
  {
    "text": "look for sequences of characters that recur over and over again and will attempt to reuse them as much as it possibly can.",
    "start": "121000",
    "end": "130000"
  },
  {
    "text": "It doesn't overtly make a dictionary entry by putting them somewhere special but just by leaving these strings of text in place,",
    "start": "130000",
    "end": "140000"
  },
  {
    "text": "it can reuse stuff in place.",
    "start": "140000",
    "end": "144000"
  },
  {
    "text": "Here we've got the word computers: eight characters.",
    "start": "144000",
    "end": "146000"
  },
  {
    "text": "A compressor could remember that it has seen that string of characters already as a subset of the string 'computerphile'",
    "start": "146000",
    "end": "156000"
  },
  {
    "text": "The thought immediately occurs--one, two, three, four, five, six, seven, eight-- characters are identical here to what they are in the beginning of that word,",
    "start": "156000",
    "end": "167500"
  },
  {
    "text": "can't we use that in some way and cut down the length of this?",
    "start": "167500",
    "end": "173200"
  },
  {
    "text": "And what the Lempel-Ziv method does is it uses a pointer, and in that composite pointer it points back to where the phrase first occurred.",
    "start": "173200",
    "end": "186400"
  },
  {
    "text": "And it also notes down how long the phrase was at that point.",
    "start": "186400",
    "end": "191500"
  },
  {
    "text": "Now I'm going to denote these pointers with a notation that looks like this: I'll call it 'j' and 'l'",
    "start": "191500",
    "end": "200500"
  },
  {
    "start": "192000",
    "end": "260000"
  },
  {
    "text": "'j' being the jump. It's a relative jump. How many characters back would I need to go to encounter this word 'computer' somewhere else",
    "start": "200500",
    "end": "211000"
  },
  {
    "text": "And when I do get back to that character position in the file, then how long will that string of characters be?",
    "start": "211000",
    "end": "219000"
  },
  {
    "text": "Now I must emphasize that if you look inside a Lempel-Ziv file, you will not see pointed brackets, let alone numbers or characters here",
    "start": "219000",
    "end": "228000"
  },
  {
    "text": "This is just my notation to try and illustrate what is going on.",
    "start": "228000",
    "end": "232000"
  },
  {
    "text": "In actual fact, this pointer might well be, at its very simplest, lets say it's 16 bits.",
    "start": "232000",
    "end": "241000"
  },
  {
    "text": "two 8 bit bytes if you like.",
    "start": "242500",
    "end": "246500"
  },
  {
    "text": "The details say it's a little more complicated than this even.",
    "start": "246500",
    "end": "250000"
  },
  {
    "text": "In two bytes, I might be able to do some magic here that will replace 8 bytes in the word computer",
    "start": "250000",
    "end": "257000"
  },
  {
    "text": "with a two-byte composite pointer of this sort.",
    "start": "257000",
    "end": "260000"
  },
  {
    "start": "260000",
    "end": "314000"
  },
  {
    "text": "Now what I have to do is to say, \"Right, where did 'computer' occur relative to where it is now?\"",
    "start": "260700",
    "end": "268000"
  },
  {
    "text": "Now this is just a single space here although it might not look like it. One, two, three, four, five, six, seven, eight",
    "start": "268000",
    "end": "275800"
  },
  {
    "text": "We'll assume there isn't a newline here but there is a character-- nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen (...) thirty",
    "start": "275800",
    "end": "286500"
  },
  {
    "text": "relative backward jump of 30 characters.",
    "start": "286500",
    "end": "289500"
  },
  {
    "text": "There was, let me put a little partition here, a[n] 8 byte word.",
    "start": "290400",
    "end": "297900"
  },
  {
    "text": "So there we go. Those numbers, those integers, are cheerfully representable within 8 bits each.",
    "start": "297900",
    "end": "305000"
  },
  {
    "text": "So I could take out 'computer' here and replace it with, in my notation,",
    "start": "305000",
    "end": "311200"
  },
  {
    "text": "<30, 8>",
    "start": "311200",
    "end": "314500"
  },
  {
    "start": "314000",
    "end": "427000"
  },
  {
    "text": "Thinking around it a little bit, it should be pretty clear you've got a trade off. If we are going to allow a total of 16 bits",
    "start": "314500",
    "end": "321900"
  },
  {
    "text": "to take the jump and also the length of the string you're pointing at,",
    "start": "321900",
    "end": "327199"
  },
  {
    "text": "now you can trade off that internal boundary",
    "start": "327200",
    "end": "330500"
  },
  {
    "text": "because 8 bits, 2 to the power 8 is 256 so on either size of this notional divide,",
    "start": "330500",
    "end": "338500"
  },
  {
    "text": "you've got the ability to hold integers from 0 to 255.",
    "start": "338500",
    "end": "344000"
  },
  {
    "text": "Now, in actual fact, there are not many situations, in Western European languages at least",
    "start": "344000",
    "end": "351000"
  },
  {
    "text": "where you get massively long words repeated again, and again, and again.",
    "start": "351000",
    "end": "356000"
  },
  {
    "text": "So the attitude taken in many practical implementations of these tends to be: 'Let's keep the pointed out string fairly short,",
    "start": "356000",
    "end": "364500"
  },
  {
    "text": "So if it is a long word we might have to do a few of these pointers, but better to have a long jump back possibility.",
    "start": "364500",
    "end": "372500"
  },
  {
    "text": "That means that you can keep reusing words up to... well what, let's say",
    "start": "372500",
    "end": "378000"
  },
  {
    "text": "We do a partition like this: four bits here, twelve bits here,",
    "start": "378000",
    "end": "384000"
  },
  {
    "text": "2 to the power 12 is 4096.",
    "start": "384000",
    "end": "388400"
  },
  {
    "text": "Note to those of you that keep writing in on comments saying: \"Hey Professor,",
    "start": "388400",
    "end": "392500"
  },
  {
    "text": "what should I do, I'm just at High School and I want to do computer science at university.",
    "start": "392500",
    "end": "397500"
  },
  {
    "text": "What's the best preparation?\" my statement would be: learn your powers of 2.",
    "start": "397500",
    "end": "402500"
  },
  {
    "text": "Backwards, upside down, inside out learn your powers of 2. And while your at it learn your 16 times table so you'll be very quick at doing hexadecimal.",
    "start": "402500",
    "end": "411500"
  },
  {
    "text": "I was forced to learn my 16 times table at school, not because we did hexadecimal, but because in those days, there were 16 ounces in a pound.",
    "start": "411500",
    "end": "420000"
  },
  {
    "text": "of ... sugar, or whatever. So one 16 is 16, two 16s is 32,  three 16s is 48 and so on.",
    "start": "420000",
    "end": "427000"
  },
  {
    "text": "It's worth it. Anyway, what we're saying there is 2 to the power 12 is 4096, 2 to the power 4 is 16.",
    "start": "427000",
    "end": "436000"
  },
  {
    "text": "You can encode in it here a string that is anything--if you like--1 to 16 bytes long, but you can have a relative backward jump of 4096 characters.",
    "start": "436000",
    "end": "446500"
  },
  {
    "text": "That is a pretty good trade off. What will happen of course, is if your pointer back to the substring 'computer' gets to be more than 4096",
    "start": "446500",
    "end": "459500"
  },
  {
    "text": "characters away, then your encoder will have to remember and put in its mental dictionary a new instance of the word 'computer'",
    "start": "459500",
    "end": "468200"
  },
  {
    "text": "that can be referred back to.",
    "start": "468200",
    "end": "470200"
  },
  {
    "text": "So imagine this happening for more than just the word 'computer' but for words like 'channel'",
    "start": "470200",
    "end": "475000"
  },
  {
    "text": "for 'handles', for substrings of 'handles' called 'hand', and so on.",
    "start": "475000",
    "end": "481000"
  },
  {
    "text": "All the time, the thing is preparing, in a sense, to make a dictionary entry of anything that seems suitable",
    "start": "481000",
    "end": "487500"
  },
  {
    "text": "So it can be referred back to again and again and again.",
    "start": "487500",
    "end": "490500"
  },
  {
    "text": "So what one is saying here is that even with a simple model, you are able to replace a multi-byte entity by a two-byte pointer.",
    "start": "490500",
    "end": "502000"
  },
  {
    "text": "probabilities, probabilities, probabilities: the three Ps.",
    "start": "506000",
    "end": "510000"
  },
  {
    "text": "Getting your probability model right, for the material you are coping with is the heart of getting a really successful compression.",
    "start": "510000",
    "end": "518000"
  },
  {
    "text": "And the web browser looks at that and goes: \"THAT IS JAVASCRIPT CODE! I'M GONNA RUN THAT!\"",
    "start": "518000",
    "end": "522659"
  }
]