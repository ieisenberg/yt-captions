[
  {
    "text": "In the last video, we talked about the beginnings of JPEG, so",
    "start": "220",
    "end": "3280"
  },
  {
    "text": "what do we do at the beginning of the process to start preparing for the discrete cosine transform,",
    "start": "3520",
    "end": "7480"
  },
  {
    "text": "which is really how the lossy compression happens within a JPEG.",
    "start": "7740",
    "end": "11320"
  },
  {
    "text": "We start with our RGB image, we convert that into YCbCr color space,",
    "start": "14560",
    "end": "17640"
  },
  {
    "text": "which separates illuminance and chrominance.",
    "start": "18320",
    "end": "20500"
  },
  {
    "text": "And then we can down sample the chrominance if we want,",
    "start": "20580",
    "end": "22920"
  },
  {
    "text": "and we can kind of get away with quite a bit of down sampling there that people won't be able to see.",
    "start": "23240",
    "end": "27080"
  },
  {
    "text": "The next step is the discrete cosine transform.",
    "start": "27520",
    "end": "29720"
  },
  {
    "text": "Before we start talking about how images are compressed using the discrete cosine transform,",
    "start": "32540",
    "end": "36280"
  },
  {
    "text": "it's much better just to start with a simple example of what a discrete cosine transform is and how it works.",
    "start": "36740",
    "end": "41480"
  },
  {
    "text": "A cosine function, for anyone who isn't familiar with it, is a function that goes between 1 and -1.",
    "start": "41500",
    "end": "46940"
  },
  {
    "text": "What we tend to do on this x-axis is go from 0, to pi, to 2*pi.",
    "start": "47140",
    "end": "52420"
  },
  {
    "text": "This is in radians, those of you familiar with degrees, this is 180° at pi, and 360° at 2*pi.",
    "start": "52700",
    "end": "59040"
  },
  {
    "text": "And the cosine wave looks like this. So it's 1 at 0, and then at pi, it goes down to -1,",
    "start": "59100",
    "end": "66040"
  },
  {
    "text": "And then it goes back up to one at 2*pi.",
    "start": "66040",
    "end": "69160"
  },
  {
    "text": "And it just goes on and on like this up and down as you increase.",
    "start": "69180",
    "end": "72120"
  },
  {
    "text": "The way that the discrete cosine transform works, is we take some data, in this case our image data,",
    "start": "72180",
    "end": "76680"
  },
  {
    "text": "and we try to represent it as the sum of lots of these waves.",
    "start": "76720",
    "end": "80640"
  },
  {
    "text": "Which doesn't make a lot of sense until you start drawing them out.",
    "start": "80640",
    "end": "82620"
  },
  {
    "text": "So let's imagine that we've got this cosine wave here, which is our standard frequency cosine wave,",
    "start": "82660",
    "end": "87540"
  },
  {
    "text": "and then we've got another cosine wave, which is a much higher frequency.",
    "start": "87600",
    "end": "91040"
  },
  {
    "text": "So that would be, come down a bit faster, go up a bit faster,",
    "start": "91140",
    "end": "94740"
  },
  {
    "text": "come down a bit faster, and go up a bit faster like this.",
    "start": "94820",
    "end": "98200"
  },
  {
    "text": "So  now we have two waves. If we add them together, what we get is a sort of another wave",
    "start": "98220",
    "end": "103760"
  },
  {
    "text": "which is a combination of the two.",
    "start": "103760",
    "end": "105020"
  },
  {
    "text": "So if we draw it in here in this dashed line, we can see halfway between these two waves",
    "start": "105020",
    "end": "110520"
  },
  {
    "text": "is like this, and then kind of like this.",
    "start": "110580",
    "end": "113560"
  },
  {
    "text": "And you can see that we've created a more complex shaped wave by adding these two together.",
    "start": "113640",
    "end": "117840"
  },
  {
    "text": "Now, as we increase the number of cosines,",
    "start": "119000",
    "end": "122040"
  },
  {
    "text": "we can increase the number of possible shapes of waves that we can produce",
    "start": "122040",
    "end": "125860"
  },
  {
    "text": "In practice, if we added these two waves together, we'd have a wave that was much taller than the input",
    "start": "125860",
    "end": "129840"
  },
  {
    "text": "So here, it would be two, not one.",
    "start": "129840",
    "end": "131780"
  },
  {
    "text": "So what in fact we do is we weight both of these, and so we take an average",
    "start": "131780",
    "end": "135600"
  },
  {
    "text": "So both of these are weighted, in this case it's a half, and so this is essentially the average of both of them.",
    "start": "135600",
    "end": "140780"
  },
  {
    "text": "We can also change the weighting of these.",
    "start": "141060",
    "end": "143620"
  },
  {
    "text": "So we can have it with mostly this higher frequency one, but only a little bit of this low frequency one.",
    "start": "143620",
    "end": "148440"
  },
  {
    "text": "And we'd have a different shaped wave coming out at the end.",
    "start": "148440",
    "end": "150960"
  },
  {
    "text": "So each wave represents a small constituent of the output.",
    "start": "151300",
    "end": "155560"
  },
  {
    "text": "And the higher the frequency of the wave, the higher   the frequency part of the signal we're dealing with.",
    "start": "155760",
    "end": "159939"
  },
  {
    "text": "So if we look at my jumper here,",
    "start": "159940",
    "end": "161780"
  },
  {
    "text": "there's a low frequency change from this black table to a brightness, bright of my jumper, to dark table again.",
    "start": "161880",
    "end": "167620"
  },
  {
    "text": "And there's much higher frequency changes on my jumper, where we go up and down within the woolen knit.",
    "start": "167620",
    "end": "172819"
  },
  {
    "text": "And it's the same kind of principle. We're arguing in JPEG that we can get rid of some of the higher frequency signals",
    "start": "172960",
    "end": "178360"
  },
  {
    "text": "and the general gist of the image will still be there.",
    "start": "178360",
    "end": "181600"
  },
  {
    "text": "So this is just a one-dimensional discrete cosine transform with only two components.",
    "start": "181660",
    "end": "186000"
  },
  {
    "text": "The way that the mathematics works, is if we have a signal that 8 long,",
    "start": "186300",
    "end": "191060"
  },
  {
    "text": "Then we find that we can represent it using 8 cosine waves of different frequencies.",
    "start": "191060",
    "end": "196099"
  },
  {
    "text": "And the same is true of an image. What we do in JPEG is we split each image into 8 by 8 pixel groups.",
    "start": "196340",
    "end": "202319"
  },
  {
    "text": "And each of those pixel groups is separately encoded with its own discrete cosine transform.",
    "start": "202320",
    "end": "207300"
  },
  {
    "text": "Each of those 8 by 8 pixel groups can be exactly replicated by 64, so 8 by 8 cosine waves.",
    "start": "207540",
    "end": "214159"
  },
  {
    "text": "This actually shows the 64 base cosine waves that produce any image we might like to do in 8 by 8 pixels.",
    "start": "214420",
    "end": "222600"
  },
  {
    "text": "This particular component here, is essentially flat.",
    "start": "222600",
    "end": "225820"
  },
  {
    "text": "So if you had only this component, and that was all the contributed to your final output, your image would look like that.",
    "start": "225900",
    "end": "232060"
  },
  {
    "text": "If you had only this one, your image would go white, and then it would dip down and go black.",
    "start": "232060",
    "end": "237120"
  },
  {
    "text": "And you can see that the frequency is increasing as we go along here.",
    "start": "237120",
    "end": "240280"
  },
  {
    "text": "This is in the x direction, and in the y direction, the frequency is increasing down here.",
    "start": "240280",
    "end": "245120"
  },
  {
    "text": "So this is a cosine wave, and this is a higher frequency cosine wave down here.",
    "start": "245120",
    "end": "250080"
  },
  {
    "text": "As we increase the frequency in both directions, we get a kind of checkerboard pattern.",
    "start": "250080",
    "end": "253500"
  },
  {
    "text": "And this is a high frequency information that we're encoding in these regions.",
    "start": "253500",
    "end": "258859"
  },
  {
    "text": "So these are the 64 cosines functions that can be combined to make any 8 by 8 image.",
    "start": "258860",
    "end": "266000"
  },
  {
    "text": "This is only in one channel, so let's say just illuminance or just Cr.",
    "start": "266220",
    "end": "270180"
  },
  {
    "text": "For example, if we had half of this wave and half of this wave,",
    "start": "270220",
    "end": "274440"
  },
  {
    "text": "then what you get is a square image that is generally brighter on the left",
    "start": "274440",
    "end": "278560"
  },
  {
    "text": "with a little bit of bright on the right hand side, because you've summed the two together.",
    "start": "278560",
    "end": "282080"
  },
  {
    "text": "To create any kind of 8 by 8 image, what we need to do is have a combination of all of these at the same time.",
    "start": "282080",
    "end": "287860"
  },
  {
    "text": "Each of these is weighted based on something called a coefficient",
    "start": "287860",
    "end": "291360"
  },
  {
    "text": "Which is a number representing the contribution of each of these individual blocks to the whole.",
    "start": "291360",
    "end": "297539"
  },
  {
    "text": "So for example, if the contribution of this one is zero,",
    "start": "297540",
    "end": "300040"
  },
  {
    "text": "Then there's no part of this cosine in the 8 by 8 image that we're looking at.",
    "start": "300040",
    "end": "304540"
  },
  {
    "text": "If it's 0.1, and this one's 10, then this has a hundred-fold less impact on your output image than this one.",
    "start": "304760",
    "end": "312300"
  },
  {
    "text": "And what we do with the discrete cosine transform, is basically calculate the coefficients for these waves.",
    "start": "312540",
    "end": "317260"
  },
  {
    "text": "Putting this discrete cosine transform aside for a minute,",
    "start": "317260",
    "end": "320180"
  },
  {
    "text": "If we just look at an example image. So this is a small crop section of our flower image.",
    "start": "320180",
    "end": "324840"
  },
  {
    "text": "This is the y-component, so it's just every value from 0-255, how intense is the pixel.",
    "start": "324840",
    "end": "331400"
  },
  {
    "text": "So, you can see this is not a hugely interesting piece of image, it's kind of grey",
    "start": "331400",
    "end": "335600"
  },
  {
    "text": "with a little bit of brighter region down here.",
    "start": "335600",
    "end": "337800"
  },
  {
    "text": "What we want to try and do is calculate the contributions of each of our cosine waves to this image.",
    "start": "337800",
    "end": "343020"
  },
  {
    "text": "Which bits of cosine do we need to add together to create an image that looks exactly like this.",
    "start": "343020",
    "end": "348360"
  },
  {
    "text": "So to start with, what we need to do is center all of these values, which are currently centered at 128,",
    "start": "348360",
    "end": "354240"
  },
  {
    "text": "because they're from 0-255,",
    "start": "354260",
    "end": "355960"
  },
  {
    "text": "We center with values around zero, because remember cosine wave goes from 1 to -1, not 1 to 0.",
    "start": "355980",
    "end": "362820"
  },
  {
    "text": "So we take away 128 off every value, and we get our shifted block like this.",
    "start": "362820",
    "end": "368040"
  },
  {
    "text": "So this is the exact same image, but this time now centered around zero.",
    "start": "368240",
    "end": "371880"
  },
  {
    "text": "And how we can use this in the discrete cosine transform to calculate our coefficients.",
    "start": "371880",
    "end": "376840"
  },
  {
    "text": "We apply the -- it's actually discrete cosine transform #2, which is the one that's always used in JPEG.",
    "start": "376920",
    "end": "382400"
  },
  {
    "text": "And what that does, is calculate the contribution of each of our cosines waves",
    "start": "382560",
    "end": "387380"
  },
  {
    "text": "that when added together, will create this image exactly.",
    "start": "387400",
    "end": "390560"
  },
  {
    "text": "Which of these blocks, when multiplied by that coefficient, to tell us how much of each one we use,",
    "start": "390700",
    "end": "395620"
  },
  {
    "text": "will add together to create this exact image.",
    "start": "395620",
    "end": "398100"
  },
  {
    "text": "So it might be a bit of that, a bit of this, and bit a that, a lot of that, and none of this one. Exactly.",
    "start": "398100",
    "end": "403260"
  },
  {
    "text": "And so you'll find that all of these will have some impact on the image .",
    "start": "403260",
    "end": "407000"
  },
  {
    "text": "It's almost certain, unless the image is completely flat.",
    "start": "407000",
    "end": "408980"
  },
  {
    "text": "One of the nice things about JPEG is",
    "start": "408980",
    "end": "410540"
  },
  {
    "text": "these low frequency ones will have a much bigger effect than high frequency data.",
    "start": "410540",
    "end": "414240"
  },
  {
    "text": "And we also see them better.",
    "start": "414240",
    "end": "415960"
  },
  {
    "text": "So that's how we compress JPEG.",
    "start": "415960",
    "end": "417740"
  },
  {
    "text": "So, we calculate our DCT2 coefficients, and that gives us some slightly arbitrary values between -1024 and 1024.",
    "start": "417740",
    "end": "426699"
  },
  {
    "text": "But that's not too much of a big problem.",
    "start": "426700",
    "end": "428460"
  },
  {
    "text": "And what we have, each of these represents the weight, or the amount, of each of our cosine waves.",
    "start": "428460",
    "end": "433160"
  },
  {
    "text": "So if you put this next to here, we can say that if we take this cosine,",
    "start": "433160",
    "end": "437180"
  },
  {
    "text": "and multiply it by -370, and add it to this one multiplied by 29.7, and so on,",
    "start": "437180",
    "end": "442880"
  },
  {
    "text": "And we do it for all of them, the added sum will be the original image back again.",
    "start": "442880",
    "end": "446720"
  },
  {
    "text": "Usually, this top left coefficient is much bigger than the others.",
    "start": "447100",
    "end": "451360"
  },
  {
    "text": "Because it's flat and not a cosine wave it represents the general intensity of that particular image block.",
    "start": "451360",
    "end": "457360"
  },
  {
    "text": "So that is called our direct current coefficient, or DC coefficient,",
    "start": "457360",
    "end": "460620"
  },
  {
    "text": "All of the others, are alternating current, AC coefficients.",
    "start": "460620",
    "end": "463500"
  },
  {
    "text": "In practice, usually the DC coefficients are stored separately, but we won't dwell on that too much.",
    "start": "463500",
    "end": "468700"
  },
  {
    "text": "The really important aspect of JPEG that you want to understand is that these coefficients are often very very small.",
    "start": "469020",
    "end": "474400"
  },
  {
    "text": "And these ones are very very big. And what that tells is that for the high frequency",
    "start": "474400",
    "end": "478780"
  },
  {
    "text": "cosine waves, don't really contribute much to the image.",
    "start": "478780",
    "end": "481540"
  },
  {
    "text": "For example, this one is zero, which means that this cosine wave here is having no effect on the image at all.",
    "start": "481540",
    "end": "486720"
  },
  {
    "text": "The image is essentially not a checkerboard in any way.",
    "start": "486720",
    "end": "489640"
  },
  {
    "text": "These ones, compared to these big coefficients here, are incredibly small as well, and have very subtle effects on the actual output pixel data.",
    "start": "489640",
    "end": "497760"
  },
  {
    "text": "I mean, these weights are so small that if you took these away, the image would be almost identical.",
    "start": "497760",
    "end": "502540"
  },
  {
    "text": "And yet, you could just take them away and save all that space.",
    "start": "502540",
    "end": "505500"
  },
  {
    "text": "So that's how we do it. The next step, after calculating our discrete cosine transform coefficients",
    "start": "505660",
    "end": "510700"
  },
  {
    "text": "is, basically, try to remove the ones you don't want.",
    "start": "510880",
    "end": "513039"
  },
  {
    "text": "We call the process of removing the high frequency data quantization.",
    "start": "513160",
    "end": "517620"
  },
  {
    "text": "Hopefully, it would be easier if I show you a quantization table.",
    "start": "517620",
    "end": "520279"
  },
  {
    "text": "This is the standard JPEG quantization table that represents a quality of 50%.",
    "start": "520280",
    "end": "525260"
  },
  {
    "text": "So in a JPEG standard, different compressors, like the ones used in photoshop, will use different quantization tables depending on how they feel.",
    "start": "525280",
    "end": "532360"
  },
  {
    "text": "And also, what level of quality you set it at. And what we do, is we divide every one of our coefficients by the corresponding quantization value",
    "start": "532360",
    "end": "541959"
  },
  {
    "text": "and then round to the nearest integer.",
    "start": "542020",
    "end": "544620"
  },
  {
    "text": "And you can see already that these ones are much bigger than these ones.",
    "start": "544620",
    "end": "547779"
  },
  {
    "text": "So what essentially happens is these get scaled by a huge amount, usually to close to zero,",
    "start": "547780",
    "end": "551700"
  },
  {
    "text": "And then get removed by being set to zero when we round to the nearest integer.",
    "start": "551700",
    "end": "555180"
  },
  {
    "text": "So for example, 370 divided by 16 is roughly 23. Or minus 23. And the actual quantized output is this.",
    "start": "555300",
    "end": "564380"
  },
  {
    "text": "And you can see that almost all of it is now zero. So, this coefficient now no longer has any effect, nor does this one or this one.",
    "start": "564700",
    "end": "570300"
  },
  {
    "text": "The only ones that have any effect on our image are these nine here.",
    "start": "570520",
    "end": "575280"
  },
  {
    "text": "And, essentially, the argument that we're making is that with just these nine, we can get pretty much the same image back.",
    "start": "575440",
    "end": "583060"
  },
  {
    "text": "It won't be exactly the same, a couple of pixels will maybe be an intensity level up or down,",
    "start": "583120",
    "end": "587279"
  },
  {
    "text": "but when viewed at normal image range, you know, let's say a photograph or on a monitor, it will look exactly the same to us.",
    "start": "587280",
    "end": "593340"
  },
  {
    "text": "So what we then finally do when we want to output this information into our file",
    "start": "593460",
    "end": "597580"
  },
  {
    "text": "Is we essentially list all these in a long line.We then use a huffman encoding,",
    "start": "597580",
    "end": "602240"
  },
  {
    "text": "which Professor Brelfooters (?) covered in a video to further compress this data.",
    "start": "602240",
    "end": "606740"
  },
  {
    "text": "The way that we serialize this into our file is in a zig-zag fashion.",
    "start": "606880",
    "end": "610140"
  },
  {
    "text": "So we start with -23, then we go -2, -21,  so we're going up and down and up and down -- 6, 4, 0, 0, 2, 1, and so on.",
    "start": "610220",
    "end": "621779"
  },
  {
    "text": "And the important thing about this is that by doing this, we're going to get a huge list of naughts in a row.",
    "start": "621780",
    "end": "626820"
  },
  {
    "text": "At that is very easily compressed by huffman encoding.",
    "start": "626820",
    "end": "630000"
  },
  {
    "text": "So we take this table, and we do this for every 8 by 8 block in our image.",
    "start": "630000",
    "end": "633940"
  },
  {
    "text": "We then serialize them out into a long line, and we use huffman encoding to shrink them right down,",
    "start": "633940",
    "end": "638720"
  },
  {
    "text": "and that's what goes into our JPEG.",
    "start": "638720",
    "end": "640259"
  },
  {
    "text": "And in all other aspects of JPEG, are really sort of minor format considerations. That's the core of how the compression works.",
    "start": "640500",
    "end": "646460"
  },
  {
    "text": "To decompress the image, let's imagine that we've sent our JPEG to someone, and their decoder is trying to read it.",
    "start": "646780",
    "end": "651980"
  },
  {
    "text": "What we have to do is the exact opposite of this approach.",
    "start": "652140",
    "end": "654880"
  },
  {
    "text": "So we begin by multiplying each of the values by our quantization table.",
    "start": "654940",
    "end": "660180"
  },
  {
    "text": "So this is the same quantization table. It's stored inside the JPEG so we know which one the used.",
    "start": "660180",
    "end": "664740"
  },
  {
    "text": "Because if use a different one on the way out, you're going to ruin your image.",
    "start": "664860",
    "end": "667220"
  },
  {
    "text": "So we multiply each of these values by the specific value in the quantization table",
    "start": "667240",
    "end": "672160"
  },
  {
    "text": "And we get the coefficients. And you can see that because most of them are naught, most of them on the other side are also naught.",
    "start": "672380",
    "end": "677800"
  },
  {
    "text": "So, none of these are going to contribute to our image anymore.",
    "start": "677840",
    "end": "681100"
  },
  {
    "text": "Then, in reverse, we use discrete cosine transform #3, which is usually just called the inverse discrete cosine transform",
    "start": "681240",
    "end": "688399"
  },
  {
    "text": "because it's generally used to reverse what we did for discrete cosine transform two,",
    "start": "688500",
    "end": "692420"
  },
  {
    "text": "and that gives us our shifted block back again, which of course we then add 128 to every value",
    "start": "692480",
    "end": "698079"
  },
  {
    "text": "And we have our output block. And there it is.",
    "start": "698080",
    "end": "700400"
  },
  {
    "text": "So that's the complete JPEG compression using discrete cosine transforms.",
    "start": "700480",
    "end": "704620"
  },
  {
    "text": "If we look at our imput block and our output block, next to each other, we can see that there are some changes in values,",
    "start": "704620",
    "end": "712680"
  },
  {
    "text": "but it's actually pretty close. These are sort of changed -- like this has gone up a few intensity levels, this is the same, this has gone down four,",
    "start": "712680",
    "end": "718500"
  },
  {
    "text": "But these are from 0 to 255. No one is going to see that kind of difference. And this is at 50%. So you can do a lot less than this",
    "start": "718500",
    "end": "725880"
  },
  {
    "text": "If you have your JPEG quality set higher, and smaller values in your quantization table.",
    "start": "726020",
    "end": "730980"
  },
  {
    "text": "So in the JPEG standard, this is the quantization table they give you.",
    "start": "730980",
    "end": "734760"
  },
  {
    "text": "This is actually the quantization table for luminosity, not for chrominance. They have a different one for chrominance",
    "start": "734760",
    "end": "739760"
  },
  {
    "text": "which is much -- has much higher penalties on the high frequency",
    "start": "739760",
    "end": "744180"
  },
  {
    "text": "because if high frequency data is not very important in grey, it's even less important given that we don't see color that well.",
    "start": "744200",
    "end": "750080"
  },
  {
    "text": "One thing you can do to immediately increase the quality of our overall JPEG compression if I just preserve as much image as possible,",
    "start": "750200",
    "end": "756780"
  },
  {
    "text": "is to halve all of these values in the quantization table. If we divide all of these values by two, then essentially everything is being scaled by less.",
    "start": "756780",
    "end": "764440"
  },
  {
    "text": "All of these high frequency coefficients won't necessarily be rounded to zero, they might be rounded to one or two, and they'll still have a little bit of an effect.",
    "start": "764440",
    "end": "770960"
  },
  {
    "text": "On the other hand, if we increase the values in these quantization tables, we're essentially operating a lower JPEG quality setting.",
    "start": "770960",
    "end": "778120"
  },
  {
    "text": "This is the approach that the JPEG standard uses. In other software, they may have their own quantization tables",
    "start": "778120",
    "end": "784960"
  },
  {
    "text": "in fact, as far as I know, photoshop I think they have 12, 14 settings, and they have different quantization tables for most of those settings.",
    "start": "784960",
    "end": "791380"
  },
  {
    "text": "And different sampling frequencies. So lots of different things that they've decided make for a pretty good scale bar that a user can use.",
    "start": "791380",
    "end": "798500"
  },
  {
    "text": "And all of those settings, are all then stored in the header of the file --",
    "start": "798500",
    "end": "801840"
  },
  {
    "text": "Yeah. Between each part of the image, you'll get a small block that says these are the quantization tables and the huffman encoding tables that we used",
    "start": "801840",
    "end": "808240"
  },
  {
    "text": "so that everyone can reverse that process. If you don't know what the quantization table was,",
    "start": "808240",
    "end": "812700"
  },
  {
    "text": "you might be multiplying your encoded coefficients by different values and get something completely different out at the end.",
    "start": "812800",
    "end": "817880"
  },
  {
    "text": "What would it be? Just different colors?",
    "start": "817880",
    "end": "819580"
  },
  {
    "text": "It could just be a completely different image. You've divided by certain numbers, you need to multiply by those numbers to reverse the process",
    "start": "819580",
    "end": "824580"
  },
  {
    "text": "Otherwise you might get nonsense back out.",
    "start": "824580",
    "end": "826460"
  },
  {
    "text": "So going back to the original diagram that I drew, this is sort of the overview of JPEG. We start with our image,",
    "start": "826460",
    "end": "833080"
  },
  {
    "text": "we've transformed our color, and in then DCT, essentially removes the high frequency information in our image.",
    "start": "833080",
    "end": "839740"
  },
  {
    "text": "So if we've got an image where lots of high frequency information pixel changes are happening, that might get significantly compressed,",
    "start": "839740",
    "end": "846640"
  },
  {
    "text": "but it also might look worse. In most photographs, certainly over an 8 by 8 image block, you won't be finding that much high frequency information",
    "start": "846640",
    "end": "855160"
  },
  {
    "text": "and so we can quite safely get rid of a lot of it.",
    "start": "855160",
    "end": "857440"
  },
  {
    "text": "We calculate our DCT coefficients, we quantize them to remove the high frequency ones, and then we huffman encoding",
    "start": "857440",
    "end": "863620"
  },
  {
    "text": "to compress that into a manageable small stream that we put into our JPEG file.",
    "start": "863620",
    "end": "867960"
  },
  {
    "text": "And then the reverse of that process is exactly that. We decode the huffman tables, the huffman encoding,",
    "start": "867960",
    "end": "874220"
  },
  {
    "text": "we unquantize by multiplying by all our values in the quantization table, and then we apply the inverse DCT,",
    "start": "874220",
    "end": "880560"
  },
  {
    "text": "to obtain our block back. And we do this for every little 8 by 8 image in our picture.",
    "start": "880560",
    "end": "884900"
  },
  {
    "text": "If our image isn't a multiple of 8, then we have to add some padding bytes at the end",
    "start": "884900",
    "end": "890380"
  },
  {
    "text": "to make it work, usually we could duplicate the ones near the edge, so that it kind of is coherent, or do something a little smarter.",
    "start": "890380",
    "end": "898660"
  },
  {
    "text": "Text violates our assumtions that high frequency information doesn't contribute a lot to the image.",
    "start": "900000",
    "end": "905260"
  },
  {
    "text": "So this is a small 8 by 8 image. This is, in a sense text. This is the computerphile 'C' with little triangular brackets",
    "start": "905260",
    "end": "911240"
  }
]