[
  {
    "text": "We're going to be looking at the very famous old \nalgorithm called Quicksort. It's very clever and  ",
    "start": "80",
    "end": "5520"
  },
  {
    "text": "it's very fast but it can also be very simple. \nSo what I'm actually going to show you today is  ",
    "start": "5520",
    "end": "10960"
  },
  {
    "text": "how you can do Quicksort in just five lines \nof code. Where did the Quicksort algorithm  ",
    "start": "10960",
    "end": "18800"
  },
  {
    "text": "actually come from? This is Tony Hoare or \nSir Tony Hoare to give him his proper name  ",
    "start": "18800",
    "end": "24560"
  },
  {
    "text": "and he was a computer scientist from Oxford and \nactually he was Oxford's head of computer science  ",
    "start": "24560",
    "end": "30279"
  },
  {
    "text": "for many, many years. And he published in 1962 a \nvery famous paper with a lovely one-word title,  ",
    "start": "30280",
    "end": "38040"
  },
  {
    "text": "it's just called Quicksort. And you know you've \ndone something quite fundamental and important  ",
    "start": "38040",
    "end": "42440"
  },
  {
    "text": "when you can have a paper with a one-word title. \nSo this was published more than 60 years ago,  ",
    "start": "42440",
    "end": "47640"
  },
  {
    "text": "it's one of the older algorithms in computer \nscience, but actually Tony invented this algorithm  ",
    "start": "47640",
    "end": "52280"
  },
  {
    "text": "a few years before that in 1959, but the actual \npaper which everyone cites was published in 1962.  ",
    "start": "52280",
    "end": "59440"
  },
  {
    "text": "What we're actually going to do is see how to do \nquicksort in two different ways. So first of all,  ",
    "start": "59440",
    "end": "65400"
  },
  {
    "text": "I'm going to explain on the lovely computer file \npaper how to do quicksort with a simple example.  ",
    "start": "65400",
    "end": "70800"
  },
  {
    "text": "And then we're going to move over to the laptop \nand see how to write it in actual code and in  ",
    "start": "70800",
    "end": "75440"
  },
  {
    "text": "five lines of code. And what we're going to do is \nput the numbers from one to nine into these boxes  ",
    "start": "75440",
    "end": "81840"
  },
  {
    "text": "in random order. So let's put the one here, two, \nthree, four, five, six, seven, eight, and nine. So  ",
    "start": "81840",
    "end": "94159"
  },
  {
    "text": "we've got nine numbers here in jumbled up order, \nand we want to think how can we actually sort  ",
    "start": "94160",
    "end": "99800"
  },
  {
    "text": "these. So the way the quicksort algorithm works is \nyou first of all pick what's called a pivot value.  ",
    "start": "99800",
    "end": "106480"
  },
  {
    "text": "And for symmetry reasons here, and we'll see why \nin a second, I'm just going to pick the middle  ",
    "start": "106480",
    "end": "111080"
  },
  {
    "text": "value in the list, the 5 here, so highlight \nthat in red. So we've picked our pivot value,  ",
    "start": "111080",
    "end": "116840"
  },
  {
    "text": "and the next step in the algorithm now is that \nwe're going to divide up the remaining numbers,  ",
    "start": "116840",
    "end": "121679"
  },
  {
    "text": "depending on whether they're less than or \ngreater than the pivot value. So we're going  ",
    "start": "121680",
    "end": "126240"
  },
  {
    "text": "to send the numbers which are less than the 5 \ndown the left-hand side, so we'll end up with  ",
    "start": "126240",
    "end": "131400"
  },
  {
    "text": "4 of these. And we're going to send the numbers \nwhich are greater than 5 down the right-hand side,  ",
    "start": "131400",
    "end": "137120"
  },
  {
    "text": "and we'll also end up with 4 of these. And this \nis just a really simple process now. We just go  ",
    "start": "137120",
    "end": "141440"
  },
  {
    "text": "through the list apart from the pivot, and if it's \nless than five we write it here, greater than five  ",
    "start": "141440",
    "end": "146560"
  },
  {
    "text": "we write it here. So two is less than five, so \nthat goes down here. Seven is greater than five,  ",
    "start": "146560",
    "end": "152840"
  },
  {
    "text": "so that goes here, and we keep going. And again, \nwe have to be very careful not to mess it up.  ",
    "start": "152840",
    "end": "158959"
  },
  {
    "text": "We've got four numbers here, less than five, and \nwe've also got four numbers greater than five.  ",
    "start": "158960",
    "end": "164000"
  },
  {
    "text": "The next step in the algorithm is we're going to \nsort in some way these two sub lists. So suppose  ",
    "start": "164000",
    "end": "171080"
  },
  {
    "text": "we sorted these numbers here. We're going to get \nfour numbers. We're going to get one, two, three,  ",
    "start": "171080",
    "end": "178400"
  },
  {
    "text": "four. And suppose we sorted in some way, and again \nwe'll come back to this in a second, we sort these  ",
    "start": "178400",
    "end": "184519"
  },
  {
    "text": "numbers here and we will get six, seven, eight, \nand nine. And then the final step in the algorithm  ",
    "start": "184520",
    "end": "190720"
  },
  {
    "text": "is the kind of obvious one. we've got two sorted \nsub-lists here. We've got 1, 2, 3, 4, 6, 7, 8,  ",
    "start": "190720",
    "end": "195920"
  },
  {
    "text": "9, and we've got our original pivot up the top \nhere. All we're going to do is bring everything  ",
    "start": "195920",
    "end": "200920"
  },
  {
    "text": "back together. So we need nine boxes again. So \nwe copy down the 1, 2, 3, 4. We copy down the  ",
    "start": "200920",
    "end": "206040"
  },
  {
    "text": "original pivot value, which we use to divide the \nlist into two parts. And then we copy down the 6,  ",
    "start": "206040",
    "end": "212040"
  },
  {
    "text": "7, 8, and 9. So what we've done in moving from the \ntop of the page down to the bottom of the page is  ",
    "start": "212040",
    "end": "218519"
  },
  {
    "text": "we've sorted the numbers from 1 to 9. But there's \na couple of questions remaining, and actually I'm  ",
    "start": "218520",
    "end": "223360"
  },
  {
    "text": "going to put Sean on the spot now here. So first \nquestion for you, Sean. So how do we actually sort  ",
    "start": "223360",
    "end": "229880"
  },
  {
    "text": "the two sublists? Because I said we can sort them \nin some way. Any ideas how we could sort the two  ",
    "start": "229880",
    "end": "235000"
  },
  {
    "text": "sublists? Well, kind of presumably you've got to \ndo the same thing again, right? You've got to pick  ",
    "start": "235000",
    "end": "240240"
  },
  {
    "text": "a pivot and do something like that. Yeah, exactly. \nSo you do the same thing again. You just apply the  ",
    "start": "240240",
    "end": "245200"
  },
  {
    "text": "quick sort algorithm again. So we could take \nthe numbers 2, 4, 1, 3, pick a pivot, divide  ",
    "start": "245200",
    "end": "250480"
  },
  {
    "text": "up the numbers, and do the sorting and merging. \nAnd it's a recursive algorithm. So quick sort is  ",
    "start": "250480",
    "end": "256560"
  },
  {
    "text": "defined in terms of itself. We divide up into two \nparts based on a pivot value. We recursively sort  ",
    "start": "256560",
    "end": "262880"
  },
  {
    "text": "the two parts using the same algorithm. And then \nwe combine everything together at the end. But  ",
    "start": "262880",
    "end": "268960"
  },
  {
    "text": "when you're writing recursive programs, you always \nhave to worry, how do they stop? So can I ask Sean  ",
    "start": "268960",
    "end": "274080"
  },
  {
    "text": "another question again. There needs to be an end \ncase, is that right? Yeah, exactly. So you have to  ",
    "start": "274080",
    "end": "277800"
  },
  {
    "text": "stop. So when does this algorithm actually stop? \nSo I'm just thinking about 2, 4, 1, 3. So if you  ",
    "start": "277800",
    "end": "283000"
  },
  {
    "text": "had, I don't know, pick 4, you've got 1, 2, 3. \nI don't know, how do you pass? So the algorithm  ",
    "start": "283000",
    "end": "289080"
  },
  {
    "text": "stops when you have no numbers left, because \nevery time you call this algorithm recursively,  ",
    "start": "289080",
    "end": "293960"
  },
  {
    "text": "the sublists are going to be smaller, because you \nhave a pivot value. So you might like have a pivot  ",
    "start": "293960",
    "end": "297840"
  },
  {
    "text": "of 1, right? As in you've only got one number, \nso you can't pivot. And then there'll be maybe  ",
    "start": "297840",
    "end": "301919"
  },
  {
    "text": "nothing left to actually sort. So the kind of \nbase case for the algorithm or when the recursion  ",
    "start": "301920",
    "end": "307080"
  },
  {
    "text": "stops is when you don't have any numbers left. So \nthat's the way QuickSort works in pictures. You  ",
    "start": "307080",
    "end": "312879"
  },
  {
    "text": "pick a pivot, divide up based on the two values, \nrecursively sort and then merge back together at  ",
    "start": "312880",
    "end": "318040"
  },
  {
    "text": "the end, and the algorithm stops when you don't \nhave any numbers left. What we're going to do now  ",
    "start": "318040",
    "end": "322440"
  },
  {
    "text": "is move over to the laptop and see how to do \nit in code. And as by the title of the video,  ",
    "start": "322440",
    "end": "328120"
  },
  {
    "text": "it's going to be five lines of code. So of course \nI'm going to use my favorite programming language  ",
    "start": "328120",
    "end": "332880"
  },
  {
    "text": "which is Haskell, which is a functional language, \nit's very concise, but everything I'm going to  ",
    "start": "332880",
    "end": "336880"
  },
  {
    "text": "show you today you can do in basically any high \nlevel language today that's got some kind of nice  ",
    "start": "336880",
    "end": "342240"
  },
  {
    "text": "facilities for manipulating lists. But Haskell is \na good choice because it's so concise. So what I'm  ",
    "start": "342240",
    "end": "348240"
  },
  {
    "text": "going to do is start up an editor, I'll just make \na temporary file here for putting the code in,  ",
    "start": "348240",
    "end": "353479"
  },
  {
    "text": "and we're going to write a quick sort function. So \nthe quick sort function takes a list as an input,  ",
    "start": "353480",
    "end": "359000"
  },
  {
    "text": "and it gives a list as an output. And as we talked \nabout a few minutes ago, the base case for the  ",
    "start": "359000",
    "end": "364720"
  },
  {
    "text": "definition is if you quicksort a list with nothing \nin it, then that stops the program running and  ",
    "start": "364720",
    "end": "371760"
  },
  {
    "text": "you get a list with nothing in it. So this is the \nbase case for our definition. And the tiny piece  ",
    "start": "371760",
    "end": "377520"
  },
  {
    "text": "of notation here is in the language I'm using, \nthe empty list is a square bracket followed by  ",
    "start": "377520",
    "end": "382960"
  },
  {
    "text": "a closed square bracket. But in other languages, \nit may be slightly different. So the other case,  ",
    "start": "382960",
    "end": "388280"
  },
  {
    "text": "which is the interesting case, is how do you \nquicksort a non-empty list? And this is the  ",
    "start": "388280",
    "end": "393360"
  },
  {
    "text": "only other tiny bit of notation, which I need \nto maybe explain here. This notation here means  ",
    "start": "393360",
    "end": "398280"
  },
  {
    "text": "a non-empty list where x is the first thing. \nThat's actually going to be our pivot value.  ",
    "start": "398280",
    "end": "403080"
  },
  {
    "text": "We're going to have the first thing in the list \nbeing the pivot rather than the middle. And xs  ",
    "start": "403080",
    "end": "407520"
  },
  {
    "text": "is everything else in the list. So this is just a \nway of breaking down a list into the first thing,  ",
    "start": "407520",
    "end": "412280"
  },
  {
    "text": "which is going to be our pivot value and \neverything else in the list. And then we  ",
    "start": "412280",
    "end": "416920"
  },
  {
    "text": "can just go back to the example and think how do \nyou actually quick sort a list? Well what we're  ",
    "start": "416920",
    "end": "422160"
  },
  {
    "text": "going to do is we're going to have the smaller \nnumbers in a list so I'll call that smaller  ",
    "start": "422160",
    "end": "429120"
  },
  {
    "text": "and we're going to have the larger numbers in the \nlist and we'll call that larger and the way we get  ",
    "start": "429120",
    "end": "433800"
  },
  {
    "text": "these is very simple. To get the smaller numbers \nall we're going to do is filter out the numbers  ",
    "start": "433800",
    "end": "439159"
  },
  {
    "text": "which are less than or equal to the first value in \nthe list, which is here called x, and that's our  ",
    "start": "439160",
    "end": "444200"
  },
  {
    "text": "pivot value. That was 5 in our example. So we're \ngoing to filter out the values smaller than x  ",
    "start": "444200",
    "end": "449800"
  },
  {
    "text": "from the remaining numbers xs. Okay, so nice and \neasy. This is a primitive in the language that  ",
    "start": "449800",
    "end": "456800"
  },
  {
    "text": "I'm using. It filters things out of a list. Other \nlanguages, this may be called something different,  ",
    "start": "456800",
    "end": "461639"
  },
  {
    "text": "but other languages will have a similar \nkind of feature. To get the larger numbers,  ",
    "start": "461640",
    "end": "466040"
  },
  {
    "text": "we can do exactly the same thing. we can filter \nout the numbers which are bigger than x from the  ",
    "start": "466040",
    "end": "471880"
  },
  {
    "text": "list of remaining numbers. And now we have the \nkind of second level of the picture which we had.  ",
    "start": "471880",
    "end": "477360"
  },
  {
    "text": "We had the numbers 1 to 9 jumbled up. We picked \na pivot. Now we're picking the first value. We  ",
    "start": "477360",
    "end": "482039"
  },
  {
    "text": "divide the list up into two parts, the smaller \nnumbers and the larger numbers. And then we can  ",
    "start": "482040",
    "end": "486840"
  },
  {
    "text": "think, how do we continue from here? So let me \nwrite the rest of the code. It's really short,  ",
    "start": "486840",
    "end": "492240"
  },
  {
    "text": "all of this. So qsort larger. So this is the \nentire code now. So let me explain the kind  ",
    "start": "492240",
    "end": "500039"
  },
  {
    "text": "of bit up here where we kind of put everything \ntogether. All we're doing here is we're quick  ",
    "start": "500040",
    "end": "504640"
  },
  {
    "text": "sorting the smaller numbers. So that was down the \nleft hand side of the example which we did. Then  ",
    "start": "504640",
    "end": "510040"
  },
  {
    "text": "we're quick sorting the larger numbers. So that \nwas down the right hand side where we had the 6,  ",
    "start": "510040",
    "end": "514880"
  },
  {
    "text": "7, 8 and 9 jumbled up. And then all we do is kind \nof combine everything together and put the pivot  ",
    "start": "514880",
    "end": "520840"
  },
  {
    "text": "value, which here is x, in the middle. So plus \nplus is the operator in this particular language,  ",
    "start": "520840",
    "end": "527800"
  },
  {
    "text": "which joins two lists together. Here, we're just \nputting the pivot into a little list on its own,  ",
    "start": "527800",
    "end": "533040"
  },
  {
    "text": "and then we just smash everything together. \nAnd basically this is the quicksort algorithm.  ",
    "start": "533040",
    "end": "539000"
  },
  {
    "text": "And what's interesting here is that this is \njust five lines of code. We have a base case,  ",
    "start": "539000",
    "end": "544400"
  },
  {
    "text": "which says if you quicksort an empty list, you get \nan empty list. And then we have four lines which  ",
    "start": "544400",
    "end": "549160"
  },
  {
    "text": "are dealing with the recursion, which are telling \nus how to quicksort a non-empty list. And for me,  ",
    "start": "549160",
    "end": "555399"
  },
  {
    "text": "when you see kind of quicksort in pictures, it's \nkind of intuitively obvious how it's working,  ",
    "start": "555400",
    "end": "560280"
  },
  {
    "text": "but you might think, do I really understand \nwhat's going on? But when you look at the  ",
    "start": "560280",
    "end": "564040"
  },
  {
    "text": "code here, that's it. I mean, this is a complete \nimplementation of quicksort in just five lines of  ",
    "start": "564040",
    "end": "569160"
  },
  {
    "text": "code. And it's kind of hard to think how you could \nexpress the essence of this quicksort algorithm  ",
    "start": "569160",
    "end": "574000"
  },
  {
    "text": "any more concisely than we've got here. There's \nreally no redundant symbols here. If you've seen  ",
    "start": "574000",
    "end": "578440"
  },
  {
    "text": "quicksort in some other languages, it may be kind \nof quite a few more lines. It could be up to a  ",
    "start": "578440",
    "end": "582600"
  },
  {
    "text": "page of code in some other languages. But if you \nuse a very high level language, like the one I'm  ",
    "start": "582600",
    "end": "587600"
  },
  {
    "text": "using here, you can really express the essence of \nthe algorithm extremely concisely. Let's see how  ",
    "start": "587600",
    "end": "593199"
  },
  {
    "text": "it actually runs in practice. And let's see what \nkind of performance it's got. So what I've done is  ",
    "start": "593200",
    "end": "599480"
  },
  {
    "text": "I've prepared another file called qsort, \nand let me load that into the system. So  ",
    "start": "599480",
    "end": "604839"
  },
  {
    "text": "what I've got here is three bits of code now. \nI've got the quicksort algorithm in five lines,  ",
    "start": "604840",
    "end": "610640"
  },
  {
    "text": "which we've just developed. I've also got another \nsorting algorithm here called insertion sort. And  ",
    "start": "610640",
    "end": "616440"
  },
  {
    "text": "I'm not going to go into the details of how this \nworks. But the important point here is quicksort  ",
    "start": "616440",
    "end": "620800"
  },
  {
    "text": "is a fast algorithm. Insertion sort is a slow \nalgorithm. And we're going to see that in practice  ",
    "start": "620800",
    "end": "625760"
  },
  {
    "text": "when we do a little example. And of course, \nwe're going to need some random lists to actually  ",
    "start": "625760",
    "end": "631320"
  },
  {
    "text": "sort. So I've written a little bit of code here \nthat's going to randomize a list of numbers. And  ",
    "start": "631320",
    "end": "638080"
  },
  {
    "text": "it doesn't actually properly randomize. I'm just \nusing what's called a riffle shuffle here. So if  ",
    "start": "638080",
    "end": "642000"
  },
  {
    "text": "you've ever played cards, you know, you can often \nshuffle cards by taking an entire deck, splitting  ",
    "start": "642000",
    "end": "646440"
  },
  {
    "text": "it in half, riffling it, which means kind of \ninterleaving the odd and even cards. And if you do  ",
    "start": "646440",
    "end": "651120"
  },
  {
    "text": "that a bunch of times, that's a kind of reasonable \napproximation to randomizing things. So you can  ",
    "start": "651120",
    "end": "656040"
  },
  {
    "text": "see at the top here, if I'm randomizing a list of \nnumbers, I'm just going to riffle shuffle it five  ",
    "start": "656040",
    "end": "662199"
  },
  {
    "text": "times. But the details of this are not important \nhere. So let's make a list of random numbers. So  ",
    "start": "662200",
    "end": "669080"
  },
  {
    "text": "let's take randomize one up to 5,000. So we've got \n5,000 random numbers. Let's have a look at that.  ",
    "start": "669080",
    "end": "678320"
  },
  {
    "text": "So, well, it's not very interesting. It's just \n5,000 random numbers. But now what we can do is we  ",
    "start": "678320",
    "end": "683520"
  },
  {
    "text": "can quicksort it. And if we quicksort this list of \n5,000 random numbers, almost as soon as I hit the  ",
    "start": "683520",
    "end": "689920"
  },
  {
    "text": "return key, we get the result. It's sorted it into \nthe correct order. And this is not running on a  ",
    "start": "689920",
    "end": "695800"
  },
  {
    "text": "compiler here. This is an interpreted programming \nlanguage, which I'm using. So if I actually  ",
    "start": "695800",
    "end": "699959"
  },
  {
    "text": "compile this, this would be about 10 times faster. \nBut even just on an interpreter, this is a fast  ",
    "start": "699960",
    "end": "705800"
  },
  {
    "text": "algorithm. So let's contrast this by seeing how a \nnot-so-good sorting algorithm works. So insertion  ",
    "start": "705800",
    "end": "712640"
  },
  {
    "text": "sort. Let's try insertion sorting the same list of \n5,000 numbers. Well, it's not even done 1,000 yet.  ",
    "start": "712640",
    "end": "720160"
  },
  {
    "text": "Now it's up to 2000 and it's taking kind of five \nor six seconds to sort 5000 numbers. And actually,  ",
    "start": "720160",
    "end": "727800"
  },
  {
    "text": "this gets even worse if we consider a longer list. \nLet's try randomizing 10,000 numbers. If I quick  ",
    "start": "727800",
    "end": "736399"
  },
  {
    "text": "sort that, it takes a bit longer this time, maybe \na second or two. But this time, if I run insertion  ",
    "start": "736400",
    "end": "743520"
  },
  {
    "text": "sort, it's not even got to 500, 1000. and this \nis a really slow algorithm. Not only is Quicksort  ",
    "start": "743520",
    "end": "753240"
  },
  {
    "text": "kind of a very clever algorithm, it's also a very \nefficient algorithm. And what I've been trying to  ",
    "start": "753240",
    "end": "758040"
  },
  {
    "text": "show you here in this short video is that if you \nlook at Quicksort in the right way, using a very  ",
    "start": "758040",
    "end": "763759"
  },
  {
    "text": "high-level language, like the one we've been \nlooking at here, then Quicksort can also be a  ",
    "start": "763760",
    "end": "768280"
  },
  {
    "text": "very simple algorithm, which you can write in \njust five lines of code. I'd like to show you  ",
    "start": "768280",
    "end": "781040"
  },
  {
    "text": "one extra thing, Sean, and I have to get a bit of \nHaskell magic in here, you know me. So we're going  ",
    "start": "781040",
    "end": "788120"
  },
  {
    "text": "to have a look again quickly at the quicksort \nalgorithm, just five lines of code. Something  ",
    "start": "788120",
    "end": "792240"
  },
  {
    "text": "that's interesting about it is that it doesn't \njust sort numbers, it can sort other numbers.",
    "start": "792240",
    "end": "797521"
  }
]