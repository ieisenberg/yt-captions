[
  {
    "text": "In a previous video, we looked at how CPU's can use caches to speed up accesses to memory.",
    "start": "0",
    "end": "4080"
  },
  {
    "text": "So, the CPU has to fetch things from memory; it might be a bit of data, it might be an instruction",
    "start": "4580",
    "end": "8880"
  },
  {
    "text": "And it goes through the cache to try and access it.",
    "start": "8880",
    "end": "11720"
  },
  {
    "text": "And the cache keeps a local copy in fast memory to try and speed up the accesses",
    "start": "11720",
    "end": "15580"
  },
  {
    "text": "But what we didn't talk about is:\nWhat does a CPU do with what it's fetched from memory",
    "start": "16360",
    "end": "20940"
  },
  {
    "text": "what is it actually doing and how does it process it?",
    "start": "20940",
    "end": "23140"
  },
  {
    "text": "So the CPU is fetching values from memory.",
    "start": "26020",
    "end": "28080"
  },
  {
    "text": "We'll ignore the cache for now, because it doesn't matter if the CPU has a cache or not",
    "start": "28120",
    "end": "31680"
  },
  {
    "text": "it's still gonna do roughly the same things",
    "start": "31680",
    "end": "33460"
  },
  {
    "text": "And we're also gonna look at very old CPU's",
    "start": "33460",
    "end": "35920"
  },
  {
    "text": "the sort of things that are in 8-bit machines",
    "start": "35920",
    "end": "37600"
  },
  {
    "text": "purely because they're simpler to deal with",
    "start": "37600",
    "end": "39719"
  },
  {
    "text": "and simpler to see what's going on",
    "start": "39720",
    "end": "40880"
  },
  {
    "text": "The same idea is still applied to an ARM CPU today or an X86 chip",
    "start": "40880",
    "end": "45420"
  },
  {
    "text": "or whatever it is you got in your machine.",
    "start": "45420",
    "end": "48480"
  },
  {
    "text": "Modern CPU's use what's called \nthe Van Neumann architecture",
    "start": "48480",
    "end": "51880"
  },
  {
    "text": "and what this basically means is\nthat you have a CPU",
    "start": "51980",
    "end": "56579"
  },
  {
    "text": "and you have a block of memory.",
    "start": "56620",
    "end": "61320"
  },
  {
    "text": "And that memory is connected to the CPU\nby two buses",
    "start": "61960",
    "end": "64699"
  },
  {
    "text": "Each is just a collection of several wires that are connecting",
    "start": "64700",
    "end": "67399"
  },
  {
    "text": "And again we're looking at old-fashioned macines. \nOn a modern machine it gets a bit more complicated",
    "start": "67400",
    "end": "71780"
  },
  {
    "text": "But the idea, the principle, is the same.",
    "start": "71780",
    "end": "73680"
  },
  {
    "text": "So we have an addess bus",
    "start": "74560",
    "end": "76079"
  },
  {
    "text": "and the idea is that the CPU can generate a number in here in binary",
    "start": "77520",
    "end": "82299"
  },
  {
    "text": "to access any particular value in here.",
    "start": "82320",
    "end": "84960"
  },
  {
    "text": "So we say that the first one is at adress 0",
    "start": "84960",
    "end": "87540"
  },
  {
    "text": "and we're gonna use a 6502 as an example",
    "start": "87880",
    "end": "90420"
  },
  {
    "text": "We'll say that the last one is at address 65535 in decimal, or FFFF in hexadecimal",
    "start": "90420",
    "end": "100399"
  },
  {
    "text": "So we can generate any of these numbers on 16 bits of this address bus",
    "start": "100800",
    "end": "104180"
  },
  {
    "text": "to access any of the individual bytes \nin this memory",
    "start": "104200",
    "end": "107840"
  },
  {
    "text": "How do we get the data between the two?\nWell we have another bus",
    "start": "109400",
    "end": "112060"
  },
  {
    "text": "which is called the data bus,\nwhich connects the two together",
    "start": "112100",
    "end": "116180"
  },
  {
    "text": "Now the reason why this is a Van Neumann machine",
    "start": "116180",
    "end": "118260"
  },
  {
    "text": "is because this memory can \ncontain both the program",
    "start": "118480",
    "end": "121920"
  },
  {
    "text": "i.e. the bytes that make up the instructions\nthat the CPU can execute",
    "start": "121920",
    "end": "125840"
  },
  {
    "text": "and the data",
    "start": "126100",
    "end": "128319"
  },
  {
    "text": "So the same block of memory\ncontain some bytes",
    "start": "128500",
    "end": "131540"
  },
  {
    "text": "which contain program instructions",
    "start": "131540",
    "end": "133120"
  },
  {
    "text": "some bytes which contain data",
    "start": "133120",
    "end": "134799"
  },
  {
    "text": "And the CPU if you wanted to could \ntreat the program as data",
    "start": "135120",
    "end": "137620"
  },
  {
    "text": "or treat the data as program",
    "start": "137660",
    "end": "139520"
  },
  {
    "text": "Well if you do that then it would probably crash",
    "start": "139520",
    "end": "141200"
  },
  {
    "text": "So what we've got here is an old BBC Micro\nusing a 6502 CPU",
    "start": "141200",
    "end": "144680"
  },
  {
    "text": "and we're gonna just write a very, very simple\nmachine code program",
    "start": "144680",
    "end": "148879"
  },
  {
    "text": "that uses",
    "start": "148980",
    "end": "150819"
  },
  {
    "text": "well the operation is saying just to\nprint out the letter C for computerphile",
    "start": "150820",
    "end": "154200"
  },
  {
    "text": "So if you assemble it,\nwe're using hexadecimal",
    "start": "154300",
    "end": "156700"
  },
  {
    "text": "we've started our program at 084C",
    "start": "156920",
    "end": "159400"
  },
  {
    "text": "So that's the address,\nwere our program is being created",
    "start": "159900",
    "end": "162799"
  },
  {
    "text": "And our program is very simple",
    "start": "162800",
    "end": "164480"
  },
  {
    "text": "It loads one of the CPU's registers",
    "start": "164480",
    "end": "166780"
  },
  {
    "text": "which is just basically a temporary data store\nthat you can use",
    "start": "166780",
    "end": "168900"
  },
  {
    "text": "and this one is called the accumulator",
    "start": "168900",
    "end": "170819"
  },
  {
    "text": "with the ascii code 67 which represents\na capital C",
    "start": "170820",
    "end": "173880"
  },
  {
    "text": "and then it says:\njump to the subroutine at this address",
    "start": "173880",
    "end": "177380"
  },
  {
    "text": "which will print out that particular character",
    "start": "177380",
    "end": "179860"
  },
  {
    "text": "And then we tell it we want to stop\nso we gotta return",
    "start": "179860",
    "end": "182540"
  },
  {
    "text": "from subroutine.\nAnd if we run this",
    "start": "182540",
    "end": "184159"
  },
  {
    "text": "and type in the address,\nso we're at ... 84C",
    "start": "184160",
    "end": "188160"
  },
  {
    "text": "then you'll see that it prints out the letter C",
    "start": "188160",
    "end": "190600"
  },
  {
    "text": "and then we get a prompt\nto carry on doing things",
    "start": "190600",
    "end": "192560"
  },
  {
    "text": "So our program,\nwe write it in assembly language",
    "start": "192560",
    "end": "195520"
  },
  {
    "text": "which we can understand as humans",
    "start": "195520",
    "end": "197100"
  },
  {
    "text": "-ish, LDA: Load Accumulator\nJSR: Jump to subroutine",
    "start": "197120",
    "end": "201299"
  },
  {
    "text": "RTS: Return to subroutine",
    "start": "201300",
    "end": "202960"
  },
  {
    "text": "You get the idea once you've done it a few times",
    "start": "202960",
    "end": "205020"
  },
  {
    "text": "And the computer converts this\ninto a series of numbers, in binary",
    "start": "205020",
    "end": "208340"
  },
  {
    "text": "The CPU is working in binary but to make it easier to read we display it as hexadecimal",
    "start": "208340",
    "end": "212739"
  },
  {
    "text": "So our program becomes:\nA9, 43",
    "start": "212960",
    "end": "215760"
  },
  {
    "text": "20 EE FF\n60",
    "start": "215860",
    "end": "218860"
  },
  {
    "text": "That's the program we've written",
    "start": "218860",
    "end": "220240"
  },
  {
    "text": "And the CPU, when it runs it\nneeds to fetch those bytes from memory",
    "start": "222300",
    "end": "226620"
  },
  {
    "text": "into the CPU",
    "start": "227560",
    "end": "228980"
  },
  {
    "text": "Now, how does it do that?",
    "start": "228980",
    "end": "230319"
  },
  {
    "text": "To get the first byte we need to \nput the address: 084C on the address bus",
    "start": "230320",
    "end": "237120"
  },
  {
    "text": "and a bit later on, the memory will send back\nthe byte that represents the instruction: A9",
    "start": "237120",
    "end": "242400"
  },
  {
    "text": "Now, how does the CPU know where to get these instructions from?",
    "start": "242400",
    "end": "245319"
  },
  {
    "text": "Well, it's quite simple. \nInside the CPU",
    "start": "245320",
    "end": "247800"
  },
  {
    "text": "there is a register, which we call\nthe program counter, or PC on a 6502",
    "start": "247800",
    "end": "252800"
  },
  {
    "text": "or something like an X86 machine it's\nknown as the instruction pointer.",
    "start": "252840",
    "end": "256720"
  },
  {
    "text": "And all that does is store the address\nto the next instruction to execute",
    "start": "257260",
    "end": "262060"
  },
  {
    "text": "So when we were starting up here, \nit would have 084C in it",
    "start": "262960",
    "end": "266639"
  },
  {
    "text": "That's the address to the instruction we want to execute",
    "start": "266640",
    "end": "269140"
  },
  {
    "text": "So when the CPU wants to fetch the \ninstruction it's gonna execute",
    "start": "269140",
    "end": "273220"
  },
  {
    "text": "It puts that address on the address bus",
    "start": "273520",
    "end": "276199"
  },
  {
    "text": "and the memory then sends the instruction \nback to the CPU",
    "start": "276200",
    "end": "279860"
  },
  {
    "text": "So the first thing the CPU is \ngonna do to run our program",
    "start": "279860",
    "end": "282219"
  },
  {
    "text": "is to fetch the instruction",
    "start": "282360",
    "end": "284199"
  },
  {
    "text": "and the way it does that is by \nputting the address from",
    "start": "284200",
    "end": "285960"
  },
  {
    "text": "the program counter onto\nthe address bus",
    "start": "285960",
    "end": "288240"
  },
  {
    "text": "and then fetching the actual instruction",
    "start": "289240",
    "end": "292580"
  },
  {
    "text": "So the memory provides it,\nbut the CPU then reads that in",
    "start": "292580",
    "end": "295720"
  },
  {
    "text": "on it's input on the data bus",
    "start": "295900",
    "end": "297740"
  },
  {
    "text": "Now it needs to fetch the whole \ninstruction that the CPU is gonna execute",
    "start": "297740",
    "end": "301120"
  },
  {
    "text": "and on the example we saw there \nit was relatively straightforward",
    "start": "301120",
    "end": "304000"
  },
  {
    "text": "because the instruction was only\na byte long",
    "start": "304000",
    "end": "306140"
  },
  {
    "text": "Not all CPU's are that simple",
    "start": "307320",
    "end": "309240"
  },
  {
    "text": "Some CPU's will vary these things,\nso this hardware can actually be quite complicated",
    "start": "309240",
    "end": "314759"
  },
  {
    "text": "so it needs to work out how long \nthe instruction is",
    "start": "314760",
    "end": "317600"
  },
  {
    "text": "So it could be as short as one byte",
    "start": "318080",
    "end": "320340"
  },
  {
    "text": "it could be as long on some CPU's\nas 15 bytes",
    "start": "320340",
    "end": "323680"
  },
  {
    "text": "and you sometimes don't know how long it's gonna be until you've read at few of the bytes",
    "start": "323680",
    "end": "327479"
  },
  {
    "text": "So this hardware can be relatively trivial",
    "start": "327480",
    "end": "330080"
  },
  {
    "text": "So an ARM CPU makes it very, very simple\nit says: all instructions are 32 bits long",
    "start": "330080",
    "end": "334199"
  },
  {
    "text": "So the Archimedes over there\ncan fetch the instruction very, very simply",
    "start": "334480",
    "end": "339360"
  },
  {
    "text": "32 bits",
    "start": "339400",
    "end": "340580"
  },
  {
    "text": "On something like an x86, it can be\nany length up to 15 bytes or so",
    "start": "341040",
    "end": "345200"
  },
  {
    "text": "and so this becomes more complicated,\nyou have to sort of work out",
    "start": "345200",
    "end": "348240"
  },
  {
    "text": "what it is utnil you've got it",
    "start": "348240",
    "end": "349440"
  },
  {
    "text": "But we fetch the instruction",
    "start": "349780",
    "end": "351700"
  },
  {
    "text": "So in the example we've got, \nwe've got A9 here",
    "start": "351700",
    "end": "354520"
  },
  {
    "text": "So we now need to work out what A9 does",
    "start": "354520",
    "end": "356599"
  },
  {
    "text": "Well, we need to decode it into \nwhat we want the CPU to actually do",
    "start": "356600",
    "end": "360420"
  },
  {
    "text": "So we need to have another bit \nof our CPU's hardware",
    "start": "360420",
    "end": "363320"
  },
  {
    "text": "which we're dedicating to\ndecoding the instruction",
    "start": "363380",
    "end": "367280"
  },
  {
    "text": "So we have a part of the CPU which is \nfetching it",
    "start": "367280",
    "end": "369540"
  },
  {
    "text": "and part of the CPU which is then\ndecoding it",
    "start": "369540",
    "end": "371280"
  },
  {
    "text": "So it gets A9 into it:\nSo the A9 comes into the decode",
    "start": "371960",
    "end": "375319"
  },
  {
    "text": "And it says: Well okay, that's a load instruction.",
    "start": "375900",
    "end": "379259"
  },
  {
    "text": "So I need to fetch a value from memory",
    "start": "379540",
    "end": "381940"
  },
  {
    "text": "which was the 43",
    "start": "382240",
    "end": "383520"
  },
  {
    "text": "the ASCII code for the capital letter C\nthat we saw earlier",
    "start": "383640",
    "end": "387740"
  },
  {
    "text": "So we need to fetch something else \nfrom memory",
    "start": "387740",
    "end": "390180"
  },
  {
    "text": "We need to access memory again,\nand we need to work out what address",
    "start": "390180",
    "end": "393000"
  },
  {
    "text": "that's gonna be.",
    "start": "393000",
    "end": "394020"
  },
  {
    "text": "We also then need to,\nonce we've got that value,",
    "start": "395420",
    "end": "398540"
  },
  {
    "text": "update the right register \nto store that value",
    "start": "398580",
    "end": "402780"
  },
  {
    "text": "So we've gotta do things in sequence.",
    "start": "402780",
    "end": "404120"
  },
  {
    "text": "So part of the Decode logic is to\ntake the single instruction byte,",
    "start": "404120",
    "end": "407419"
  },
  {
    "text": "or how long it is,",
    "start": "407720",
    "end": "408760"
  },
  {
    "text": "and work out what's the sequence that we need to drive the other bits of the CPU to do",
    "start": "408760",
    "end": "413560"
  },
  {
    "text": "And so that also means that we have\nanother bit of the CPU",
    "start": "413560",
    "end": "416080"
  },
  {
    "text": "which is the actual bit that does things,",
    "start": "416080",
    "end": "417840"
  },
  {
    "text": "which is gonna be all the logic \nwhich actually executes instructions",
    "start": "418160",
    "end": "422800"
  },
  {
    "text": "So we start off by fetching it",
    "start": "422800",
    "end": "424379"
  },
  {
    "text": "and then once we've fetched it\nwe can start decoding it",
    "start": "424380",
    "end": "426860"
  },
  {
    "text": "and then we can execute it",
    "start": "426860",
    "end": "427680"
  },
  {
    "text": "And the decode logic is responsible for saying:",
    "start": "427720",
    "end": "430020"
  },
  {
    "text": "Put the address for where you want to get the value,\nthat you can load into memory from",
    "start": "430020",
    "end": "432759"
  },
  {
    "text": "and then store it,\nonce it's been loaded into the CPU",
    "start": "432760",
    "end": "435820"
  },
  {
    "text": "So you're doing things in order:",
    "start": "435820",
    "end": "436900"
  },
  {
    "text": "We have to fetch it first",
    "start": "436900",
    "end": "438280"
  },
  {
    "text": "and we can't decode it until we've fetched it",
    "start": "438280",
    "end": "440180"
  },
  {
    "text": "and we can't execute things \nuntil we've decoded it",
    "start": "440660",
    "end": "443380"
  },
  {
    "text": "So, at any one time, \nwe'll probably find on a simple CPU",
    "start": "443880",
    "end": "447480"
  },
  {
    "text": "that quite a few of the bits of the \nCPU wouldn't actually be doing anything",
    "start": "447480",
    "end": "450620"
  },
  {
    "text": "So, while we're fetching the value\nfrom memory",
    "start": "450620",
    "end": "452180"
  },
  {
    "text": "to work out how we're gonna decode it",
    "start": "452180",
    "end": "454539"
  },
  {
    "text": "the decode and the execute logic \naren't doing anything",
    "start": "454540",
    "end": "457060"
  },
  {
    "text": "They're just sitting there, waiting for their turn",
    "start": "457060",
    "end": "458960"
  },
  {
    "text": "And then, when we decode it,\nit's not fetching anything",
    "start": "458960",
    "end": "461720"
  },
  {
    "text": "and it's not executing anything",
    "start": "461720",
    "end": "463220"
  },
  {
    "text": "So we're sort of moving through these different\nstates one after the other",
    "start": "463220",
    "end": "466260"
  },
  {
    "text": "And that takes different amounts of time",
    "start": "466260",
    "end": "467720"
  },
  {
    "text": "If we're fetching 15 bytes it's gonna take longer than\nif we're fetching one",
    "start": "467720",
    "end": "471060"
  },
  {
    "text": "decoding it might well be shorter",
    "start": "471060",
    "end": "473080"
  },
  {
    "text": "than if we're fetching something from memory,\ncos' this is all inside the CPU",
    "start": "473080",
    "end": "476460"
  },
  {
    "text": "And the execution depends on \nwhat's actually happening",
    "start": "476460",
    "end": "479020"
  },
  {
    "text": "So your CPU will work like this:\nIt will go through each phase,",
    "start": "479020",
    "end": "481500"
  },
  {
    "text": "then once it's done that, \nit'll start on the next clock tick",
    "start": "481500",
    "end": "484500"
  },
  {
    "text": "all the CPU's are synchronized to a clock,",
    "start": "484500",
    "end": "486480"
  },
  {
    "text": "which just keeps things moving in sequence",
    "start": "486480",
    "end": "488240"
  },
  {
    "text": "and you can build a CPU. \nSomething like the 6502 worked like that",
    "start": "488240",
    "end": "491699"
  },
  {
    "text": "But, as we said, lots of the CPU aren't actually \ndoing anything at any time",
    "start": "491700",
    "end": "496240"
  },
  {
    "text": "which is a bit wasteful of the resources",
    "start": "496300",
    "end": "498940"
  },
  {
    "text": "So is there another way you can do this?",
    "start": "498940",
    "end": "501220"
  },
  {
    "text": "And the answer is yes!\nYou can do what's called",
    "start": "501220",
    "end": "503580"
  },
  {
    "text": "a sort of pipe-lined model of a CPU",
    "start": "503580",
    "end": "506099"
  },
  {
    "text": "So what you do here is,\nyou still have the same 3 bits of the CPU",
    "start": "506120",
    "end": "511199"
  },
  {
    "text": "But you say: Okay, so we gotta fetch (f)",
    "start": "512000",
    "end": "514560"
  },
  {
    "text": "instruction one",
    "start": "514680",
    "end": "515800"
  },
  {
    "text": "In the next bit of time,\nI'm gonna start decoding this one",
    "start": "515800",
    "end": "519120"
  },
  {
    "text": "So, I'm gonna start decoding instruction one",
    "start": "519140",
    "end": "522180"
  },
  {
    "text": "But I'm gonna say: I'm not using \nthe fetch logic here,",
    "start": "522180",
    "end": "524899"
  },
  {
    "text": "so I'm gonna have this start to get things ready",
    "start": "524900",
    "end": "527160"
  },
  {
    "text": "and, start to do things ahead of schedule",
    "start": "527160",
    "end": "529440"
  },
  {
    "text": "I'm also at the same time\ngonna fetch instruction 2",
    "start": "529560",
    "end": "533540"
  },
  {
    "text": "So now I'm doing two things,\ntwo bit's of my CPU in use the same time",
    "start": "533540",
    "end": "536500"
  },
  {
    "text": "I'm fetching the next instruction,\nwhile decoding the first one",
    "start": "536500",
    "end": "539980"
  },
  {
    "text": "And once we've done decoding, I can start\nexecuting the first instruction",
    "start": "539980",
    "end": "544380"
  },
  {
    "text": "So I execute that",
    "start": "544440",
    "end": "545560"
  },
  {
    "text": "But at the same time, I can start\ndecoding instruction 2",
    "start": "545680",
    "end": "550060"
  },
  {
    "text": "and hopefully, \nI can start fetching instruction 3",
    "start": "550100",
    "end": "554000"
  },
  {
    "text": "So what? It is still taking the same\namount of time to execute that first instruction",
    "start": "554000",
    "end": "558440"
  },
  {
    "text": "So the beauty is when it \ncomes to executing instruction two",
    "start": "558440",
    "end": "561300"
  },
  {
    "text": "it completes exactly one \ncycle after the other",
    "start": "561300",
    "end": "563880"
  },
  {
    "text": "rather than having to wait for it to go through \nthe fetch and decode and execute cycles",
    "start": "563880",
    "end": "567420"
  },
  {
    "text": "we can just execute it as soon as we've\nfinished instruction one",
    "start": "567420",
    "end": "570019"
  },
  {
    "text": "So each instruction still takes the \nsame amount of time",
    "start": "570020",
    "end": "572140"
  },
  {
    "text": "it's gonna take, say, three clock cycles\nto go through the CPU",
    "start": "572140",
    "end": "575240"
  },
  {
    "text": "but because we've sort of pipelined it together",
    "start": "575240",
    "end": "577700"
  },
  {
    "text": "they actually appear to execute one after each other",
    "start": "577700",
    "end": "579960"
  },
  {
    "text": "so it appears to execute one clock cycle\nafter each other",
    "start": "579960",
    "end": "582580"
  },
  {
    "text": "And we could do this again\nSo we could start decoding",
    "start": "582580",
    "end": "585880"
  },
  {
    "text": "instruction 3 here",
    "start": "585960",
    "end": "587780"
  },
  {
    "text": "at the same time as we're executing instruction two",
    "start": "587780",
    "end": "589520"
  },
  {
    "text": "Now there can be problems",
    "start": "589520",
    "end": "590640"
  },
  {
    "text": "This works for some instructions,\nbut say this instruction",
    "start": "590640",
    "end": "593940"
  },
  {
    "text": "said \"store this value in memory\"",
    "start": "593940",
    "end": "596100"
  },
  {
    "text": "Now you've got a problem",
    "start": "596100",
    "end": "597360"
  },
  {
    "text": "You've only got one address bus \nand one data bus",
    "start": "597360",
    "end": "600100"
  },
  {
    "text": "so you can only access or store\none thing in memory at a time",
    "start": "600100",
    "end": "603180"
  },
  {
    "text": "You can't execute a store instruction and fetch a value from memory",
    "start": "603180",
    "end": "606440"
  },
  {
    "text": "So you wouldn't be able to fetch it until the next clock cycle",
    "start": "606440",
    "end": "609620"
  },
  {
    "text": "So we fetch instruction four there",
    "start": "609620",
    "end": "611640"
  },
  {
    "text": "while executing instruction three",
    "start": "612160",
    "end": "614560"
  },
  {
    "text": "But we can't decode anything here",
    "start": "614560",
    "end": "616120"
  },
  {
    "text": "So in this clock cycle, we can \ndecode instruction four",
    "start": "616120",
    "end": "619260"
  },
  {
    "text": "and fetch instruction five",
    "start": "619640",
    "end": "621840"
  },
  {
    "text": "but we can't execute anything",
    "start": "621840",
    "end": "622900"
  },
  {
    "text": "We've got what's called a \"bubble\"\nin our pipelines,",
    "start": "622900",
    "end": "626160"
  },
  {
    "text": "or pipeline store",
    "start": "626220",
    "end": "627420"
  },
  {
    "text": "because at this point,\nthe design of the CPU doesn't let us",
    "start": "627420",
    "end": "631060"
  },
  {
    "text": "fetch an instruction",
    "start": "631240",
    "end": "632680"
  },
  {
    "text": "and execute an instruction at the same time",
    "start": "632680",
    "end": "634660"
  },
  {
    "text": "it's ... what is called \"pipeline hazards\"",
    "start": "634820",
    "end": "637700"
  },
  {
    "text": "that you can get when designing a pipeline CPU",
    "start": "637700",
    "end": "639720"
  },
  {
    "text": "because the design of the CPU\ndoesn't let you",
    "start": "639720",
    "end": "642160"
  },
  {
    "text": "do the things you need to \ndo at the same time",
    "start": "642160",
    "end": "644720"
  },
  {
    "text": "at the same time.\nSo you have to",
    "start": "644720",
    "end": "646500"
  },
  {
    "text": "delay things, which means that \nyou get a bubble",
    "start": "646500",
    "end": "649200"
  },
  {
    "text": "So, you can't quite get up to \none instruction per cycle",
    "start": "649280",
    "end": "652880"
  },
  {
    "text": "efficiency",
    "start": "652940",
    "end": "653740"
  },
  {
    "text": "But you can certainly get closer",
    "start": "653740",
    "end": "655459"
  },
  {
    "text": "than you could if you \njust had everything",
    "start": "655460",
    "end": "657320"
  },
  {
    "text": "to do one instruction at a time.",
    "start": "657320",
    "end": "659300"
  }
]