[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "So we're doing this series Graham - thank you\nfor coming back to Computerphile - about the",
    "start": "0",
    "end": "4529"
  },
  {
    "text": "most important thing in computing, or one of\nthe most important things; have you got",
    "start": "4529",
    "end": "8790"
  },
  {
    "text": "something for us? Yeah, I think so. So maybe\nit's not the most important, but it's certainly",
    "start": "8790",
    "end": "11670"
  },
  {
    "text": "one of the most interesting, and one of\nthe weirdest ideas in Computer",
    "start": "11670",
    "end": "14639"
  },
  {
    "text": "Science, and that is the Y combinator. The\nbackground to this, is that in the last",
    "start": "14639",
    "end": "21930"
  },
  {
    "start": "20000",
    "end": "55000"
  },
  {
    "text": "video we did an introduction to the\nLambda Calculus, and this generated quite",
    "start": "21930",
    "end": "25470"
  },
  {
    "text": "a lot of discussion and comments, which\nwas very nice, but it turned out that the",
    "start": "25470",
    "end": "28590"
  },
  {
    "text": "top comment was \"can we have more on the\nY combinator?\" So that's what we're going",
    "start": "28590",
    "end": "32790"
  },
  {
    "text": "to do today. So what the Y combinator\nactually is, is a way of doing recursion",
    "start": "32790",
    "end": "37200"
  },
  {
    "text": "in a language which doesn't have any\nrecursion, or any looping mechanism at",
    "start": "37200",
    "end": "40739"
  },
  {
    "text": "all. So what we'll start off with is a\nquick refresher about what recursion",
    "start": "40739",
    "end": "44820"
  },
  {
    "text": "actually is. So recursion is the idea of\ndefining things in terms of themselves,",
    "start": "44820",
    "end": "50100"
  },
  {
    "text": "and a simple example of this is the\nwell-known factorial function, so let's",
    "start": "50100",
    "end": "54059"
  },
  {
    "text": "have a little look at this. The way\nfactorial works is you give it a number",
    "start": "54059",
    "end": "58350"
  },
  {
    "text": "like 3, and it's going to count down from\n3 to 1, and multiply up all the numbers",
    "start": "58350",
    "end": "63000"
  },
  {
    "text": "in between. So for example, factorial of 3\nthen would be 3 times 2 times 1, which",
    "start": "63000",
    "end": "69298"
  },
  {
    "text": "would give us the result 6. And then we\ncan think how do we actually define this",
    "start": "69299",
    "end": "73979"
  },
  {
    "text": "function? And it turns out that the\nfactorial function has a very simple, and",
    "start": "73979",
    "end": "77729"
  },
  {
    "text": "a very natural definition, using\nrecursion - defining things in terms of",
    "start": "77729",
    "end": "81810"
  },
  {
    "text": "itself. So let's see how we can do that.\nIf you give the factorial function a",
    "start": "81810",
    "end": "86700"
  },
  {
    "text": "number n, it's going to make a choice\nbetween doing one of two things. If the",
    "start": "86700",
    "end": "91649"
  },
  {
    "text": "number you give it is already 1, which is\nthe point where you're trying to count",
    "start": "91650",
    "end": "95280"
  },
  {
    "text": "down to, then there's nothing to do. So if\nthe number equals 1, then we just return",
    "start": "95280",
    "end": "100110"
  },
  {
    "text": "the result 1. Otherwise, what we're going\nto do, is we'll take the number you're",
    "start": "100110",
    "end": "104430"
  },
  {
    "text": "given, and we'll multiply it by the\nfactorial of its predecessor. So for",
    "start": "104430",
    "end": "109680"
  },
  {
    "text": "example, if n was 3 we would take 3\ntimes the factorial of 2. So this is a",
    "start": "109680",
    "end": "115619"
  },
  {
    "text": "recursive function because we're\ndefining factorial in terms of itself -",
    "start": "115619",
    "end": "120899"
  },
  {
    "text": "the factorial of any number n is defined\nin terms of the factorial of n minus 1.",
    "start": "120899",
    "end": "126630"
  },
  {
    "text": "So you can see the way that this is\ngoing to work - if you give it a number",
    "start": "126630",
    "end": "129179"
  },
  {
    "text": "like 3, it's going to loop round - two,\none, and so - on until it eventually",
    "start": "129179",
    "end": "133159"
  },
  {
    "text": "gets to one, and then it will stop and do\nall the multiplies. So let's do a little",
    "start": "133159",
    "end": "136970"
  },
  {
    "text": "example of this running, to see that we\nknow how it actually works. If we take",
    "start": "136970",
    "end": "141049"
  },
  {
    "start": "140000",
    "end": "190000"
  },
  {
    "text": "factorial of 3 - so factorial of any\nnumber that's not 1 is going to be that",
    "start": "141049",
    "end": "147799"
  },
  {
    "text": "number times the factorial\nof its predecessor -",
    "start": "147799",
    "end": "150530"
  },
  {
    "text": "so we'll take 3 times the factorial of 2.\nAnd then what do we do now? Well, we just",
    "start": "150530",
    "end": "156590"
  },
  {
    "text": "do the same thing again. We've worked out\nwhat factorial of 3 is, now we need to",
    "start": "156590",
    "end": "160400"
  },
  {
    "text": "work out what factorial of 2 is, and\nwe just run the definition again,",
    "start": "160400",
    "end": "162920"
  },
  {
    "text": "recursively. So we copy down what we had\nbefore. We have 3 times, and then we have",
    "start": "162920",
    "end": "168079"
  },
  {
    "text": "2 times factorial of 1. And then the\nfinal step is the base case - this is",
    "start": "168079",
    "end": "173810"
  },
  {
    "text": "where the recursion stops - because\nthe factorial of 1, according to our",
    "start": "173810",
    "end": "177829"
  },
  {
    "text": "definition, was just 1. So we're going\nto get 3 times 2 times 1, which is 6. So",
    "start": "177829",
    "end": "184730"
  },
  {
    "text": "that's a simple example of a recursive\nfunction, and how it may run. So what",
    "start": "184730",
    "end": "190310"
  },
  {
    "text": "we were looking at in the last video was\nthe Lambda Calculus, which is a minimal",
    "start": "190310",
    "end": "194810"
  },
  {
    "text": "language for defining functions. And it's\nonly got three things in it - it's got",
    "start": "194810",
    "end": "198739"
  },
  {
    "text": "variables, like X, Y and Z; it's got a\nway of building functions, that's the",
    "start": "198739",
    "end": "203090"
  },
  {
    "text": "lambda notation that we saw last day;\nand it's got a way of applying functions,",
    "start": "203090",
    "end": "206780"
  },
  {
    "text": "that's just putting two things next to\neach other. And everything else in the",
    "start": "206780",
    "end": "210980"
  },
  {
    "text": "Lambda Calculus is encoded in terms of\nthese three basic things. So an example",
    "start": "210980",
    "end": "216769"
  },
  {
    "text": "which we did last day was the logical\nvalues True and False, and I'll just",
    "start": "216769",
    "end": "220879"
  },
  {
    "text": "refresh your memory about how we did\nthis last day. The two logical values are",
    "start": "220879",
    "end": "224540"
  },
  {
    "start": "223000",
    "end": "302000"
  },
  {
    "text": "True and False, and how do you represent\nthese, or encode these, in the Lambda",
    "start": "224540",
    "end": "230540"
  },
  {
    "text": "Calculus? You do it very simply as two\nfunctions. So True is going to be encoded",
    "start": "230540",
    "end": "235939"
  },
  {
    "text": "as the function that takes two things, x\nand y, and just gives you back the first",
    "start": "235940",
    "end": "241220"
  },
  {
    "text": "one, x. And then False is the opposite - it\ntakes two things, x and y, and it gives",
    "start": "241220",
    "end": "247129"
  },
  {
    "text": "you back the second one. And these\nencodings can then be used to define any",
    "start": "247129",
    "end": "251389"
  },
  {
    "text": "other function which you'd like on the\nlogical values. Like, I think last day, we",
    "start": "251389",
    "end": "254840"
  },
  {
    "text": "looked at Not, and we looked at And, and\nwe looked at Or. So any other function",
    "start": "254840",
    "end": "259130"
  },
  {
    "text": "can be defined in terms of these two\nencodings. And these encodings are very",
    "start": "259130",
    "end": "262430"
  },
  {
    "text": "natural - they express the\nidea that, in programming,",
    "start": "262430",
    "end": "265599"
  },
  {
    "text": "True and False are often used to choose\nbetween two different things. So if one",
    "start": "265599",
    "end": "270400"
  },
  {
    "text": "thing is True, you do something; and if\nit's False, then you do something else.",
    "start": "270400",
    "end": "274660"
  },
  {
    "text": "And these two definitions just encode\nthis idea of choosing between one thing,",
    "start": "274660",
    "end": "278349"
  },
  {
    "text": "or another thing. What we're thinking\nabout today is recursion. And you can ask",
    "start": "278349",
    "end": "283720"
  },
  {
    "text": "yourself, if we have our definition like\nthe factorial function here, the key",
    "start": "283720",
    "end": "289240"
  },
  {
    "text": "thing in the definition is that it's\nrecursive - we're defining the factorial",
    "start": "289240",
    "end": "293050"
  },
  {
    "text": "function in terms of itself, recursively.\nSo how do we encode recursion in the",
    "start": "293050",
    "end": "298270"
  },
  {
    "text": "Lambda Calculus, which doesn't have any\nsophisticated feature like that at all?",
    "start": "298270",
    "end": "302080"
  },
  {
    "start": "302000",
    "end": "405000"
  },
  {
    "text": "So let's start off by reducing the\nproblem a bit. Let me write down the very",
    "start": "302080",
    "end": "307180"
  },
  {
    "text": "simplest recursive definition which I\ncan think of. And the simplest possible",
    "start": "307180",
    "end": "311110"
  },
  {
    "text": "recursive definition is just a program\nthat loops - it doesn't do anything at all.",
    "start": "311110",
    "end": "315310"
  },
  {
    "text": "So here would be the program. So I just\nsay loop equals loop. And if you think",
    "start": "315310",
    "end": "320440"
  },
  {
    "text": "about running this thing, we say what's\nthe value of loop, or how do you execute",
    "start": "320440",
    "end": "323770"
  },
  {
    "text": "loop? Well, you just go to the right-hand\nside, and you say, well it's loop. So you",
    "start": "323770",
    "end": "327190"
  },
  {
    "text": "go back to the left-hand side, and it's\njust going to go around like this",
    "start": "327190",
    "end": "329710"
  },
  {
    "text": "forever - it's just going to kind of spin\non the spot, without doing anything at",
    "start": "329710",
    "end": "333099"
  },
  {
    "text": "all. So this is the simplest recursive\nprogram which you could write down. So",
    "start": "333099",
    "end": "337389"
  },
  {
    "text": "how could I encode this behavior in the\nLambda Calculus? And the key to this is",
    "start": "337389",
    "end": "342639"
  },
  {
    "text": "something called self application - it's the\nidea of applying something to itself - or",
    "start": "342639",
    "end": "347590"
  },
  {
    "text": "in this case, applying a function to\nitself. So let me show you how to encode",
    "start": "347590",
    "end": "352120"
  },
  {
    "text": "loop. So the way this works is we will\ndefine loop to be this function here. So",
    "start": "352120",
    "end": "358630"
  },
  {
    "text": "the first thing to observe is that we\nhave two functions in here, and in fact",
    "start": "358630",
    "end": "362919"
  },
  {
    "text": "two copies of the same function. If we look\nat this function here, and this function",
    "start": "362919",
    "end": "367270"
  },
  {
    "text": "here, they're both exactly the same. So\nwhat we're doing here is we're applying",
    "start": "367270",
    "end": "371650"
  },
  {
    "text": "this function to itself - it's the idea\nof self application. And this actually",
    "start": "371650",
    "end": "375729"
  },
  {
    "text": "occurs at another level as well. If we\nlook at what each of these functions",
    "start": "375729",
    "end": "378789"
  },
  {
    "text": "actually does, it takes an input called x,\nand then applies x to itself; so again,",
    "start": "378789",
    "end": "384039"
  },
  {
    "text": "this is the idea of self application -\nwe're taking something in here, and then",
    "start": "384039",
    "end": "387310"
  },
  {
    "text": "we're applying it to itself, and the\nsame is happening over here.",
    "start": "387310",
    "end": "390400"
  },
  {
    "text": "And it turns out that this idea of self\napplication is the key to how you do",
    "start": "390400",
    "end": "394930"
  },
  {
    "text": "looping, or recursion, in a\nlanguage which doesn't have support",
    "start": "394930",
    "end": "398330"
  },
  {
    "text": "for that feature. So let's actually\ncheck that this thing actually has the",
    "start": "398330",
    "end": "401840"
  },
  {
    "text": "behavior that we'd like - check that it\nactually performance looping. If we write",
    "start": "401840",
    "end": "405740"
  },
  {
    "start": "405000",
    "end": "482000"
  },
  {
    "text": "down the same thing again, we have lambda x,\nx x, and then we have lambda x, x x. Let's",
    "start": "405740",
    "end": "413030"
  },
  {
    "text": "think about how we can actually run this\nthing. So we need to remember what a",
    "start": "413030",
    "end": "416030"
  },
  {
    "text": "function actually does. So a function\ntakes an input, like x, and then it tells",
    "start": "416030",
    "end": "420830"
  },
  {
    "text": "you what to do with it - so in\nthis case it takes an x and just",
    "start": "420830",
    "end": "423289"
  },
  {
    "text": "makes two copies of it side by side. And\nin this case, the x is this thing here -",
    "start": "423290",
    "end": "428690"
  },
  {
    "text": "this is the argument, or the input, to the\nfunction - we're applying it to itself. So",
    "start": "428690",
    "end": "433310"
  },
  {
    "text": "what's going to happen is that this\ninput is going to be plugged in, or",
    "start": "433310",
    "end": "437350"
  },
  {
    "text": "substituted, for x and then we'll just\nget two copies of the thing in the box.",
    "start": "437350",
    "end": "441590"
  },
  {
    "text": "So that's how you would run the function.\nSo if we write this down, we're going to",
    "start": "441590",
    "end": "445250"
  },
  {
    "text": "get two copies of the box, and inside the\nbox will be exactly the same thing. And",
    "start": "445250",
    "end": "450740"
  },
  {
    "text": "what you see here, is that in going from\nhere to here, we've got exactly back to",
    "start": "450740",
    "end": "455479"
  },
  {
    "text": "where we started. We started with this\nexpression here, which was the definition",
    "start": "455480",
    "end": "459320"
  },
  {
    "text": "of loop, and we've ended up with exactly\nthe same thing. And of course if we do",
    "start": "459320",
    "end": "462800"
  },
  {
    "text": "the same thing again, if we say this is a\nfunction, this is its input, let's plug it",
    "start": "462800",
    "end": "467000"
  },
  {
    "text": "in, in the two places where we see x, then\nwe'll get exactly the same thing again.",
    "start": "467000",
    "end": "471860"
  },
  {
    "text": "So this thing is just going to go around\nin circles. It will never get anywhere -",
    "start": "471860",
    "end": "475099"
  },
  {
    "text": "every time you run one step of it, it\nwill go back to exactly the same point,",
    "start": "475100",
    "end": "478730"
  },
  {
    "text": "so it encodes the idea of looping. So\nthat's a simple example. Let's have a",
    "start": "478730",
    "end": "485210"
  },
  {
    "start": "482000",
    "end": "606000"
  },
  {
    "text": "more general example of recursion. So\nhere's a little recursive definition. I'm",
    "start": "485210",
    "end": "490789"
  },
  {
    "text": "going to define a function called rec,\nfor recursion, and it's going to take",
    "start": "490790",
    "end": "494630"
  },
  {
    "text": "another function as an input, and what\nit's going to do is apply that function",
    "start": "494630",
    "end": "498740"
  },
  {
    "text": "to rec of f. So what does this definition\nactually do? Well, first of all, we can see",
    "start": "498740",
    "end": "503270"
  },
  {
    "text": "that it's recursive, because rec of f is\ndefined in terms of rec of f. But it's",
    "start": "503270",
    "end": "507680"
  },
  {
    "text": "not just looping around all the time -\nit's got a function f here, sitting in",
    "start": "507680",
    "end": "511220"
  },
  {
    "text": "the way. So if you think about unwinding\nthis definition, what you'll get is f of f of",
    "start": "511220",
    "end": "516979"
  },
  {
    "text": "f of f, forever. If you run this recursive\nprogram, it's just going to apply the",
    "start": "516980",
    "end": "521719"
  },
  {
    "text": "function f infinitely often. And this\nturns out to be the idea of what's",
    "start": "521720",
    "end": "526610"
  },
  {
    "text": "called general recursion in Computer Science -\nthis is the most general pattern of",
    "start": "526610",
    "end": "530880"
  },
  {
    "text": "recursion you can have, and any other\nrecursive function can be encoded in",
    "start": "530880",
    "end": "535680"
  },
  {
    "text": "terms of this one. So if we can encode\nrec in the Lambda Calculus, we can encode",
    "start": "535680",
    "end": "540960"
  },
  {
    "text": "any recursive function. But let me set\nyou a couple of exercises at this point.",
    "start": "540960",
    "end": "545490"
  },
  {
    "text": "Using the definition of rec, which is\nrecursive, how do you program loop? Define,",
    "start": "545490",
    "end": "550770"
  },
  {
    "text": "or redefine, loop to be rec of some\nfunction. So you've got to figure out",
    "start": "550770",
    "end": "556290"
  },
  {
    "text": "what function to apply rec to here. It's\nactually a very, very simple function -",
    "start": "556290",
    "end": "561029"
  },
  {
    "text": "it's probably the simplest, or it is the\nsimplest function, you could write down",
    "start": "561030",
    "end": "563700"
  },
  {
    "text": "in the Lambda Calculus, so don't try and\nover complicate it - write down the",
    "start": "563700",
    "end": "566730"
  },
  {
    "text": "simplest function you can here, work\nthrough the definition of rec, and you'll",
    "start": "566730",
    "end": "570570"
  },
  {
    "text": "see that it actually has the looping\nbehaviour. A slightly more interesting",
    "start": "570570",
    "end": "573810"
  },
  {
    "text": "exercise, and a bit more challenging, is\nhow to define the factorial function using",
    "start": "573810",
    "end": "579029"
  },
  {
    "text": "rec? And I'll give you a bit of a hint on\nthis one - what you need to do is pass it",
    "start": "579030",
    "end": "583350"
  },
  {
    "text": "lambda f, lambda n, and then you need to\nfigure out what you write for the",
    "start": "583350",
    "end": "587759"
  },
  {
    "text": "question mark here, okay. And what you'll\nfind, is that the function that you write",
    "start": "587760",
    "end": "591240"
  },
  {
    "text": "in here is not recursive - it's the non-\nrecursive part of the factorial function.",
    "start": "591240",
    "end": "596580"
  },
  {
    "text": "Okay, so that's a bit of a challenging\nexercise. This one's quite easy,",
    "start": "596580",
    "end": "599700"
  },
  {
    "text": "this one's a little bit more challenging,\nbut you'll learn a lot about the way",
    "start": "599700",
    "end": "602520"
  },
  {
    "text": "recursion works in the Lambda Calculus\nif you do these two exercises. So what",
    "start": "602520",
    "end": "606660"
  },
  {
    "start": "606000",
    "end": "805000"
  },
  {
    "text": "we've reached now is the point where,\nif we can encode rec, which is general",
    "start": "606660",
    "end": "611790"
  },
  {
    "text": "recursion - any other recursive function\ncan be encoded in terms of that, or",
    "start": "611790",
    "end": "615000"
  },
  {
    "text": "defined in terms of that - if we\ncan encode rec, then we're done,",
    "start": "615000",
    "end": "618810"
  },
  {
    "text": "because that lets us do everything. So\nit's a bit of a mouthful, so I haven't",
    "start": "618810",
    "end": "624210"
  },
  {
    "text": "tried to memorise it - I've just got\na copy pre-prepared here. Here is the",
    "start": "624210",
    "end": "627900"
  },
  {
    "text": "definition, or one possible definition,\nof rec in the Lambda Calculus. And this is",
    "start": "627900",
    "end": "632850"
  },
  {
    "text": "what's known as the Y combinator. And if\nyou look at this, I mean it looks like a",
    "start": "632850",
    "end": "636600"
  },
  {
    "text": "jumble of symbols, but it's actually very\nsimilar to loop. If we look back to see",
    "start": "636600",
    "end": "640620"
  },
  {
    "text": "the definition of loop, it had the idea\nof self application, so we applied a",
    "start": "640620",
    "end": "646380"
  },
  {
    "text": "function to itself. And the function we\napplied was lambda x, x x. And we saw, how",
    "start": "646380",
    "end": "652260"
  },
  {
    "text": "when you run that, it will actually\nachieve the looping behaviour. If you look",
    "start": "652260",
    "end": "655320"
  },
  {
    "text": "at the definition of the Y combinator,\nwhich is defined here, it's got exactly",
    "start": "655320",
    "end": "660000"
  },
  {
    "text": "the same structure. Here we have a function,\nand here we have another copy of the",
    "start": "660000",
    "end": "665610"
  },
  {
    "text": "same function, so it's exactly the same\nidea of self application. The only",
    "start": "665610",
    "end": "669930"
  },
  {
    "text": "difference here, we haven't got lambda x,\nx x, we've got an f in the way, and that's",
    "start": "669930",
    "end": "674310"
  },
  {
    "text": "the f which we're going to be kind of\nrepeatedly applying when we do the",
    "start": "674310",
    "end": "677970"
  },
  {
    "text": "recursion. So this is the Y combinator.\nIt's not recursive, but it encodes",
    "start": "677970",
    "end": "682410"
  },
  {
    "text": "recursion. And this is a very simple but\npowerful idea, and you can do this in",
    "start": "682410",
    "end": "686279"
  },
  {
    "text": "most programming languages, unless you\nhave some kind of type system which",
    "start": "686279",
    "end": "689519"
  },
  {
    "text": "would stop you from doing this. This\ngives you a way of doing recursion in a",
    "start": "689519",
    "end": "693420"
  },
  {
    "text": "language which doesn't have any\nrecursion at all. If you want to know",
    "start": "693420",
    "end": "696600"
  },
  {
    "text": "where it comes from, it was invented by\na mathematician from the United States -",
    "start": "696600",
    "end": "700410"
  },
  {
    "text": "Haskell Curry, and this is the Haskell\nwho gives his name to the Haskell",
    "start": "700410",
    "end": "704790"
  },
  {
    "text": "programming language. So if anyone asks\nyou about the Y combinator, this is what",
    "start": "704790",
    "end": "708930"
  },
  {
    "text": "it is. If you want to know a bit more\nabout the Y combinator, you can of",
    "start": "708930",
    "end": "713550"
  },
  {
    "text": "course look online, and there's a very\nnice Wikipedia page about this, where you",
    "start": "713550",
    "end": "717360"
  },
  {
    "text": "can find more details about these kind\nof things, and see how to do some of the",
    "start": "717360",
    "end": "720810"
  },
  {
    "text": "calculations and proofs of some of the\nthings which I have been saying. But",
    "start": "720810",
    "end": "724529"
  },
  {
    "text": "actually, it's interesting that the top\nhit on Google for Y combinator is not",
    "start": "724529",
    "end": "729029"
  },
  {
    "text": "this stuff. It's actually a company which\nis called Y combinator. And you think, well",
    "start": "729029",
    "end": "733170"
  },
  {
    "text": "why would anyone call their company Y\ncombinator? If you look at the company's",
    "start": "733170",
    "end": "736440"
  },
  {
    "text": "web page, they've got a frequently asked\nquestions list, and one of the questions",
    "start": "736440",
    "end": "739589"
  },
  {
    "text": "is - why did you choose the name Y\ncombinator for your company? And they say",
    "start": "739589",
    "end": "743579"
  },
  {
    "text": "a number of things here - so Y combinator\nis one of the coolest ideas in Computer",
    "start": "743579",
    "end": "747810"
  },
  {
    "text": "Science, and of course I'm going to agree\nwith this, and I think this is a very nice,",
    "start": "747810",
    "end": "750510"
  },
  {
    "text": "very interesting, fundamental idea\nabout how you do recursion in a language",
    "start": "750510",
    "end": "754680"
  },
  {
    "text": "which doesn't have recursion. And it's\nalso a metaphor for what this company",
    "start": "754680",
    "end": "758279"
  },
  {
    "text": "does. So the Y combinator is a\nway of having programs that run",
    "start": "758279",
    "end": "763589"
  },
  {
    "text": "other programs, and in this case it's a\nway of doing recursion in a language",
    "start": "763589",
    "end": "766980"
  },
  {
    "text": "which doesn't have recursion. And that's\nbasically what their company is doing -",
    "start": "766980",
    "end": "770160"
  },
  {
    "text": "they're a company that helps start\ncompanies - they're a startup incubator in",
    "start": "770160",
    "end": "773370"
  },
  {
    "text": "Silicon Valley, and it's the same kind\nof self application idea. They want",
    "start": "773370",
    "end": "776699"
  },
  {
    "text": "to help someone to make a company,\nand it's the same thing here - we",
    "start": "776699",
    "end": "780720"
  },
  {
    "text": "want to have programs that run other\nprograms. So for me, this is certainly one",
    "start": "780720",
    "end": "785490"
  },
  {
    "text": "of the coolest ideas in Computer Science.",
    "start": "785490",
    "end": "790579"
  },
  {
    "text": "This is Alonzo Church, who was a mathematician\nat Princeton University in the United",
    "start": "790579",
    "end": "796488"
  },
  {
    "text": "States, and he was the person who\ninvented the Lambda Calculus, and what he",
    "start": "796489",
    "end": "801980"
  },
  {
    "text": "was interested in, is what\nis the notion of a function...",
    "start": "801980",
    "end": "807519"
  }
]