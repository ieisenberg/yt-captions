[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "[There's] a lot of interesting stuff both from the\npoint of view of the content but also",
    "start": "0",
    "end": "5940"
  },
  {
    "text": "the historical context between, y' know\n\"When were `for' loops invented?\". Well",
    "start": "5940",
    "end": "12450"
  },
  {
    "text": "that's what Algol called them but prior\nto that FORTRAN called them DO loops.",
    "start": "12450",
    "end": "17250"
  },
  {
    "text": "And prior to that they existed in assembler.\nSo, first of all, what's the history and",
    "start": "17250",
    "end": "22380"
  },
  {
    "text": "what does it get you when you can do\nloops, but when do you run out of steam,",
    "start": "22380",
    "end": "27029"
  },
  {
    "text": "even with loops, and you have to use this\nshock! horror! Pure Mathematicians thing -",
    "start": "27029",
    "end": "34230"
  },
  {
    "text": "that computer scientists have to learn\nabout - recursion?! It was a real culture",
    "start": "34230",
    "end": "42510"
  },
  {
    "text": "shock, it really was, in the roughly\n1940s, 1950s to suddenly find",
    "start": "42510",
    "end": "49288"
  },
  {
    "text": "out that what the theoreticians had been\ndrivelling on about for years - about recursive",
    "start": "49289",
    "end": "55890"
  },
  {
    "text": "functions in mathematics - actually was of\nmassive, massive importance for computer",
    "start": "55890",
    "end": "61680"
  },
  {
    "text": "science. Back in the '40s and early\n'50s it was all Assembler - or a",
    "start": "61680",
    "end": "67560"
  },
  {
    "start": "63000",
    "end": "126000"
  },
  {
    "text": "slightly dressed-up thing called a macro\nassembler, where you can have little",
    "start": "67560",
    "end": "70890"
  },
  {
    "text": "routines full of, y' know, packaged\nassembler instructions which could be",
    "start": "70890",
    "end": "78659"
  },
  {
    "text": "called up, as and when needed. So, that\nsort of served people for quite some",
    "start": "78659",
    "end": "82770"
  },
  {
    "text": "time. But probably one of the first\nhigh-level languages to introduce loops",
    "start": "82770",
    "end": "91070"
  },
  {
    "text": "was good old FORTRAN [shows textbook]. Even though \nthat was published in '65 Fortran itself goes",
    "start": "91070",
    "end": "97140"
  },
  {
    "text": "back, I think, for almost ten years before\nthat. It was invented by John Backus and",
    "start": "97140",
    "end": "103560"
  },
  {
    "text": "a large team of people at IBM in the\n1950s. Many of you will know it. It's an",
    "start": "103560",
    "end": "109409"
  },
  {
    "text": "excellent language for engineering and\nscientific calculations. It is low level.",
    "start": "109409",
    "end": "116909"
  },
  {
    "text": "I mean, when you look at the nature of a\nFORTRAN loop it's almost like doing it",
    "start": "116909",
    "end": "125008"
  },
  {
    "text": "in assembler - but not quite. They didn't\ncall them for loops - they called them DO loops.",
    "start": "125009",
    "end": "129660"
  },
  {
    "start": "126000",
    "end": "197000"
  },
  {
    "text": "What I'm saying here is - you package all this\nup - where you're saying",
    "start": "129660",
    "end": "133700"
  },
  {
    "text": "repeat the following sequence of\ninstructions, which I've done with my",
    "start": "133700",
    "end": "137640"
  },
  {
    "text": "wavy lines here. Keep doing them until\nyou hit the statement with a numeric",
    "start": "137640",
    "end": "143310"
  },
  {
    "text": "label on it of 180. The loop back from\nthe statement labelled 180, back up to",
    "start": "143310",
    "end": "151079"
  },
  {
    "text": "here to increment the loop counter, which\nyou're all familiar with in languages",
    "start": "151079",
    "end": "156480"
  },
  {
    "text": "like C. It wasn't done, as it would\nbe in C, by saying: \"Here's my block of",
    "start": "156480",
    "end": "162569"
  },
  {
    "text": "stuff to be repeated it's inside these\ncurly braces\". Here you can see it's a lot",
    "start": "162569",
    "end": "167040"
  },
  {
    "text": "more like assembler, a lot more low-level.\nI mean there's nothing magic about \"180\"; it could",
    "start": "167040",
    "end": "171299"
  },
  {
    "text": "be \"72\"; it depended on your labelling\nsystem. Implicitly here, in a simple",
    "start": "171299",
    "end": "177780"
  },
  {
    "text": "thing like this, you'd start off [with the counter] \nat one and every time I returned back here it would",
    "start": "177780",
    "end": "181859"
  },
  {
    "text": "reset [the counter] to be 2, 3, 4 and so on up to\nand including 10. It's comforting for",
    "start": "181859",
    "end": "188459"
  },
  {
    "text": "those who were coming from assembler\ninto a higher-level language to see",
    "start": "188459",
    "end": "192120"
  },
  {
    "text": "something that was only slightly higher\nlevel, in sophistication, than assembler was.",
    "start": "192120",
    "end": "196530"
  },
  {
    "text": "How did loops become more \"powerful\",\nif you like?",
    "start": "196530",
    "end": "200459"
  },
  {
    "start": "197000",
    "end": "323000"
  },
  {
    "text": "Well, again, even in assembler and even in\nFORTRAN, there's no reason why you",
    "start": "200459",
    "end": "206609"
  },
  {
    "text": "couldn't have a loop within a loop. So I\nmight have, outside of all this code, yet",
    "start": "206609",
    "end": "213840"
  },
  {
    "text": "another layer of DO. What shall we say:\n\"DO 200 J = 1, 20\". So, there might",
    "start": "213840",
    "end": "224189"
  },
  {
    "text": "be some more statements between 180 and\n200, who knows, but again, you see, a",
    "start": "224189",
    "end": "229620"
  },
  {
    "text": "numeric label. And can see what's\nhappening is that for every setting of J,",
    "start": "229620",
    "end": "235948"
  },
  {
    "text": "which will start at 1 and go up to 20,\nfor every single one of those J settings",
    "start": "235949",
    "end": "240959"
  },
  {
    "text": "the inner loop will be running through\nthe complete spectrum of settings of I",
    "start": "240959",
    "end": "246120"
  },
  {
    "text": "going from 1 to 10. So you will have 200\nlocations [that] are being affected here.",
    "start": "246120",
    "end": "251849"
  },
  {
    "text": "Basically going through the rows and\ncolumns of a matrix. All sorts of",
    "start": "251849",
    "end": "256169"
  },
  {
    "text": "calculations in physics, chemistry and\nparticularly engineering just rely on",
    "start": "256169",
    "end": "260570"
  },
  {
    "text": "two-dimensional arrays full of numbers\n- either integers or scientific numbers",
    "start": "260570",
    "end": "265919"
  },
  {
    "text": "with a decimal point. and so on. Even hard-core",
    "start": "265919",
    "end": "268010"
  },
  {
    "text": "assembly programmers had to admit if you were\ndoing heavy scientific programming it was",
    "start": "268010",
    "end": "271550"
  },
  {
    "text": "nice to be a little bit more abstract\nand to have this sort of facility",
    "start": "271550",
    "end": "275210"
  },
  {
    "text": "available to you. Now you might say: \"Well,\nwhat came along to spoil the party then ?\"",
    "start": "275210",
    "end": "282979"
  },
  {
    "text": "or \"How did people realize that this was\nwonderful but not quite enough?\" ",
    "start": "282979",
    "end": "288350"
  },
  {
    "text": "The compiler of course has got to be\ntolerant and has got to be capable of",
    "start": "288350",
    "end": "292310"
  },
  {
    "text": "compiling nested DO loops correctly but\nhow deep would it let you nest them?",
    "start": "292310",
    "end": "298040"
  },
  {
    "text": "Well, I'm guessing, I would suspect that\nthe early FORTRAN compilers probably",
    "start": "298040",
    "end": "302870"
  },
  {
    "text": "wouldn't allow you to go more than about\n10 deep, maximum. And I think you and I",
    "start": "302870",
    "end": "307970"
  },
  {
    "text": "Sean have just been looking up what are the\ncurrent limits in C?  I seem to remember",
    "start": "307970",
    "end": "312260"
  },
  {
    "text": "the earliest `gcc' was something like 32\nBut Ithink we looked up this ... some C++",
    "start": "312260",
    "end": "318110"
  },
  {
    "text": "nowadays allows you to do nested loops\n256 deep! And, of course, there are",
    "start": "318110",
    "end": "324650"
  },
  {
    "start": "323000",
    "end": "395000"
  },
  {
    "text": "multi-dimensional problems that might\nactually need that, because it it doesn't",
    "start": "324650",
    "end": "330080"
  },
  {
    "text": "take much knowledge of higher maths to\nrealize if you've got a loop within a loop",
    "start": "330080",
    "end": "334759"
  },
  {
    "text": "the outer loop goes around n times; the\ninner loop is going around n times, you",
    "start": "334760",
    "end": "340099"
  },
  {
    "text": "are then coping with an n-squared\nproblem. If you put the third loop inside",
    "start": "340099",
    "end": "345410"
  },
  {
    "text": "the other two you're coping with a cubic,\nthree-dimensional, problem. So what we're",
    "start": "345410",
    "end": "351080"
  },
  {
    "text": "saying is all these multi-dimensional\npolynomial-going-on-exponential problems,",
    "start": "351080",
    "end": "357080"
  },
  {
    "text": "that come up quite naturally, you can\ncope with them in nested for-loops so",
    "start": "357080",
    "end": "361819"
  },
  {
    "text": "long as they don't need to be more than\npower-32 or power-256 or whatever it is. ",
    "start": "361820",
    "end": "369740"
  },
  {
    "text": "And you think, well, that should be enough for\nanybody! There's these multi-dimensional",
    "start": "369740",
    "end": "373580"
  },
  {
    "text": "problems you can just do them by nesting\n`for' loops and surely [a depth of] 256 is",
    "start": "373580",
    "end": "378710"
  },
  {
    "text": "enough for anybody? What kind of problem\nwouldn't it be enough for? Well, a lot of",
    "start": "378710",
    "end": "383500"
  },
  {
    "text": "theoretical computer scientists of my\nknowledge amused me greatly when - those of",
    "start": "383500",
    "end": "390979"
  },
  {
    "text": "them that will own up to this - back in\nthe 60s. People started going to lectures",
    "start": "390979",
    "end": "397880"
  },
  {
    "start": "395000",
    "end": "455000"
  },
  {
    "text": "from mathematicians, theoreticians, people concerned",
    "start": "397880",
    "end": "402210"
  },
  {
    "text": "with \"Godel Computability\" and so on. And\nof course, those sort of people, were very",
    "start": "402210",
    "end": "408840"
  },
  {
    "text": "familiar indeed, at a mathematical level,\nwith Ackermann's function. Now, as you know -",
    "start": "408840",
    "end": "414510"
  },
  {
    "text": "you and I - we've done that one: \n>> Sean: Was that \"The most difficult ... ?\"\n>> DFB:  \"The most difficult number to compute, question mark\"",
    "start": "414510",
    "end": "420360"
  },
  {
    "text": "\n\"We set this going four weeks ago\nnearly now the first few are vanished ...\"\n",
    "start": "420360",
    "end": "426569"
  },
  {
    "text": "So what made it so difficult?\nwell you write down Ackermann's function and",
    "start": "426570",
    "end": "431370"
  },
  {
    "text": "it very clearly ends up with routines\ncalling themselves recursively in a very",
    "start": "431370",
    "end": "439620"
  },
  {
    "text": "very complicated way. Now I think your\naverage sort of engineer would be happy",
    "start": "439620",
    "end": "444840"
  },
  {
    "text": "to say that there's this thing called `factorial'\nwhich is 5 times 4 times 3 times 2 times 1,",
    "start": "444840",
    "end": "449160"
  },
  {
    "text": "or whatever. And you could do that in a\nloop as well as doing this fancy",
    "start": "449160",
    "end": "453780"
  },
  {
    "text": "recursion thing, but a lot of\ntheoreticians admitted to me they saw a",
    "start": "453780",
    "end": "461220"
  },
  {
    "start": "455000",
    "end": "549000"
  },
  {
    "text": "Ackermann's function and said: \"I could try that\nout in FORTRAN !\". Now what they perhaps",
    "start": "461220",
    "end": "469170"
  },
  {
    "text": "didn't realize - but it became famous by 1960 - is:",
    "start": "469170",
    "end": "472350"
  },
  {
    "text": "FORTRAN is wonderful, but original\nFORTRAN did not do user-level recursion",
    "start": "472350",
    "end": "477960"
  },
  {
    "text": "You could write a thing called ACK.\nYou could actually get it to call itself",
    "start": "477960",
    "end": "482639"
  },
  {
    "text": "in FORTRAN. But you might have been\nexpecting that every time it called",
    "start": "482640",
    "end": "487590"
  },
  {
    "text": "itself it would lay out a data area for\neach recursive call they're called \"stack",
    "start": "487590",
    "end": "492900"
  },
  {
    "text": "frames\" - we know that now. You get lots of\nstack frames, one on top of another and",
    "start": "492900",
    "end": "496800"
  },
  {
    "text": "as you come back through the recursion\nthey're deleted and thrown away and you",
    "start": "496800",
    "end": "500879"
  },
  {
    "text": "climb back into your main program.\nFORTRAN doesn't do that. It sets",
    "start": "500880",
    "end": "506040"
  },
  {
    "text": "aside one stack frame. You keep calling\nyourself recursively it just tramples",
    "start": "506040",
    "end": "510660"
  },
  {
    "text": "in its muddy gumboots over all your\ndata area and you end up with total",
    "start": "510660",
    "end": "515610"
  },
  {
    "text": "garbage. It no more gives you values of the\nAckermann function than fly to the moon!",
    "start": "515610",
    "end": "520380"
  },
  {
    "text": "And people said: \"I then realized the\nimportance of having user-level",
    "start": "520380",
    "end": "527370"
  },
  {
    "text": "recursion, in programming languages, to\ncope with those really hard problems",
    "start": "527370",
    "end": "532140"
  },
  {
    "text": "that fell outside nested for-loops\".\nAlgol was famous in that its routines",
    "start": "532140",
    "end": "536430"
  },
  {
    "text": "could call themselves recursively and\ncould get the right answer and, for",
    "start": "536430",
    "end": "541440"
  },
  {
    "text": "limited low-order values of Ackermann's\nfunction - very slow, very slow indeed - but",
    "start": "541440",
    "end": "547470"
  },
  {
    "text": "it would come out with the right answer.\n>> Sean: Is there any need to think of an example of a",
    "start": "547470",
    "end": "551519"
  },
  {
    "start": "549000",
    "end": "610000"
  },
  {
    "text": "problem, or program, because Ackermann\nfeels to me like it's the test-bed.",
    "start": "551520",
    "end": "555960"
  },
  {
    "text": "You know, when you're testing out a\nmotor-car you might take it on the track",
    "start": "555960",
    "end": "559980"
  },
  {
    "text": "and see how fast it can go.\nBut in day-to-day life that car might",
    "start": "559980",
    "end": "563490"
  },
  {
    "text": "only get half that speed. What's the\nreal-world kind of equivalent? Is there",
    "start": "563490",
    "end": "569070"
  },
  {
    "text": "such a thing?\n>> DFB: Real world equivalent?\n>> Sean: ... of something that might need to use",
    "start": "569070",
    "end": "574230"
  },
  {
    "text": "recursion ... ?\n>> DFB: ... of that complexity? Not many things",
    "start": "574230",
    "end": "578910"
  },
  {
    "text": "is the answer to that. I mean, yes, it's\ntrue that Ackermann, as you know, was David",
    "start": "578910",
    "end": "584639"
  },
  {
    "text": "Hilbert's research student. And the\nchallenge was on to find something that",
    "start": "584640",
    "end": "588930"
  },
  {
    "text": "was so innately recursive that - remember\nit was \"generally recursive\", they called it -",
    "start": "588930",
    "end": "595589"
  },
  {
    "text": "as opposed to \"primitive recursive\". And\nsimple things like factorial and indeed",
    "start": "595590",
    "end": "600150"
  },
  {
    "text": "indeed Fibonacci, are primitive recursive.\nSo I think you're right that you really",
    "start": "600150",
    "end": "605640"
  },
  {
    "text": "are just making the point that\neventually there are things that will",
    "start": "605640",
    "end": "609540"
  },
  {
    "text": "kill you. I think the question in the\nmiddle is: \"Is there something out there -",
    "start": "609540",
    "end": "617540"
  },
  {
    "start": "610000",
    "end": "711000"
  },
  {
    "text": "pieces of program you need to write -\nwhere non-trivial recursion, in a sense,",
    "start": "617540",
    "end": "623910"
  },
  {
    "text": "is needed but not quite to the\nhorrendous degree that Ackermann did. And the",
    "start": "623910",
    "end": "629639"
  },
  {
    "text": "answer is:  \"Yes, compilers is where it hit\npeople\".  Because although early FORTRAN",
    "start": "629640",
    "end": "637740"
  },
  {
    "text": "did not provide user-level recursion, for\nyou and me, nevertheless John Backus and",
    "start": "637740",
    "end": "643080"
  },
  {
    "text": "his team implemented it in the middle\n1950s I think at IBM.",
    "start": "643080",
    "end": "647560"
  },
  {
    "text": "And Backus wrote articles afterwards\nbasically saying: \"We didn't know enough",
    "start": "647560",
    "end": "653410"
  },
  {
    "text": "about recursion and even though we\ndidn't provide it for the users of our",
    "start": "653410",
    "end": "657339"
  },
  {
    "text": "language, boy did we need it in the\ncompiler! And",
    "start": "657340",
    "end": "662080"
  },
  {
    "text": "we ended up inventing it in all but name\"\nThe syntactic structures of what is",
    "start": "662080",
    "end": "668190"
  },
  {
    "text": "legal, in a language, even at the level\njust of arithmetic statements can be",
    "start": "668190",
    "end": "673150"
  },
  {
    "text": "quite recursive. Because you end up with\nbrackets within brackets within brackets",
    "start": "673150",
    "end": "677500"
  },
  {
    "text": "all with a multiplier outside. And which\norder do you do the brackets in? And, you",
    "start": "677500",
    "end": "682839"
  },
  {
    "text": "know, how how many levels of bracket\nnesting can you have. And if you don't",
    "start": "682839",
    "end": "688540"
  },
  {
    "text": "get things sorted out correctly then\nyou'll get the wrong answer. But once again",
    "start": "688540",
    "end": "694660"
  },
  {
    "text": "the problem could be that your users\nwould come up to you and present you",
    "start": "694660",
    "end": "700959"
  },
  {
    "text": "with a problem just designed to test out\nyour compiler, and whether it was robust",
    "start": "700960",
    "end": "706390"
  },
  {
    "text": "enough to be able to cope with a high\ndegree of nesting even just in",
    "start": "706390",
    "end": "710410"
  },
  {
    "text": "arithmetic statements. So by 1960 in\nAlgol, yeah, the there were enough users, at",
    "start": "710410",
    "end": "718540"
  },
  {
    "text": "the user level, who could see that a\nmodicum of recursion, perhaps more",
    "start": "718540",
    "end": "723550"
  },
  {
    "text": "complicated than factorial but not quite\nup to full Ackermann capabilities would be",
    "start": "723550",
    "end": "728529"
  },
  {
    "text": "very nice indeed to have within your language. \n\nAgain referring back to that",
    "start": "728530",
    "end": "735940"
  },
  {
    "text": "original video, I had a lot of really\ninteresting mail from various people who",
    "start": "735940",
    "end": "741310"
  },
  {
    "text": "said to me: \"OK, you said that this is an\ninnately recursive problem and it just",
    "start": "741310",
    "end": "748420"
  },
  {
    "text": "had to have general recursion capabilities? \nWell I .... \"\n",
    "start": "748420",
    "end": "753000"
  }
]