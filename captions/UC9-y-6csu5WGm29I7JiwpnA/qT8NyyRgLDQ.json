[
  {
    "text": "There's a new way to do Mathematics.",
    "start": "0",
    "end": "3920"
  },
  {
    "text": "which has a number of advantages",
    "start": "4700",
    "end": "7080"
  },
  {
    "text": "and this new way of doing mathematics",
    "start": "7080",
    "end": "9800"
  },
  {
    "text": "is basically very close to just using a programming language.",
    "start": "9800",
    "end": "14500"
  },
  {
    "text": "[Computer Science ∩ Mathematics]",
    "start": "14640",
    "end": "16920"
  },
  {
    "text": "In Mathematics, people prove theorems",
    "start": "17060",
    "end": "20900"
  },
  {
    "text": "I mean that's the productivity of mathematicians",
    "start": "20900",
    "end": "24160"
  },
  {
    "text": "and there's a problem: Sometimes theorems turn out to be wrong!",
    "start": "24280",
    "end": "28980"
  },
  {
    "text": "so it's very embarassing: I mean people publish something and provide a proof",
    "start": "29660",
    "end": "34860"
  },
  {
    "text": "but then there's something wrong with the proof. That happens lots of times.",
    "start": "34860",
    "end": "38940"
  },
  {
    "text": "And now we have a new opportunity, using Computer Science technology",
    "start": "39320",
    "end": "47300"
  },
  {
    "text": "We have something called Interactive Proof Assistants",
    "start": "47300",
    "end": "50899"
  },
  {
    "text": "and what you can do with those is, basically, dialogue with a computer",
    "start": "51200",
    "end": "57800"
  },
  {
    "text": "you produce a proof - a mathematical proof.",
    "start": "57800",
    "end": "60100"
  },
  {
    "text": "which can be stored like a computer program",
    "start": "60100",
    "end": "62840"
  },
  {
    "text": "And it can be checked by this or another program to make sure that you haven't cheated.",
    "start": "63080",
    "end": "69700"
  },
  {
    "text": "So that's... Very cool. And there is increasing use of this:",
    "start": "70160",
    "end": "75180"
  },
  {
    "text": "There are actually some conferences where you can submit an artifact which is this formal proof.",
    "start": "75180",
    "end": "82760"
  },
  {
    "text": "like, computer code which actually proofs the theorem.",
    "start": "82760",
    "end": "85900"
  },
  {
    "text": "and then people can check and you can be very, very sure, that your proof is correct.",
    "start": "86060",
    "end": "92000"
  },
  {
    "text": "People are getting lazy these days, you know? You get all these referee requests:",
    "start": "92000",
    "end": "96240"
  },
  {
    "text": "\"I can't read this proof, this is too much! I don't have the time!\"",
    "start": "96240",
    "end": "99159"
  },
  {
    "text": "But now we have these computer systems, one of them is called Coq",
    "start": "99160",
    "end": "103280"
  },
  {
    "text": "it's a French system. I think they called it that to upset English speakers.",
    "start": "103280",
    "end": "107720"
  },
  {
    "text": "We could just do mathematics as it has been done using Set Theory",
    "start": "107820",
    "end": "113860"
  },
  {
    "text": "and we'd learn about Sets and Elements and that sort of thing",
    "start": "114120",
    "end": "119120"
  },
  {
    "text": "and just formalize it that way",
    "start": "119120",
    "end": "122600"
  },
  {
    "text": "but I think if we would do this, we really miss an opportunity:",
    "start": "123140",
    "end": "128600"
  },
  {
    "text": "This Coq system, for example, is actually based on a programming language called Type Theory.",
    "start": "128680",
    "end": "136299"
  },
  {
    "text": "So this Type Theory is at the same time a programming language and logic, so you can do logical reasoning",
    "start": "137300",
    "end": "149300"
  },
  {
    "text": "and it's a replacement for this language Mathematicians use, called Set theory.",
    "start": "149300",
    "end": "154700"
  },
  {
    "text": "It's a more recent development going back to the 70s:",
    "start": "154940",
    "end": "159500"
  },
  {
    "text": "By the Swedish Mathematician and Philosopher\nPer Martin-Löf",
    "start": "159500",
    "end": "163800"
  },
  {
    "text": "He wanted to capture what it called Constructive Mathematics",
    "start": "163800",
    "end": "168940"
  },
  {
    "text": "By Constructive Mathematics we mean that we can actually always obtain a result.",
    "start": "169280",
    "end": "179920"
  },
  {
    "text": "that we don't just claim, for example, if you have a function, you may have no way to calculate the answer",
    "start": "180060",
    "end": "186940"
  },
  {
    "text": "In constructive mathematics there is always a way to obtain an answer.",
    "start": "187520",
    "end": "192240"
  },
  {
    "text": "If you say there exists a number of some property, in classical mathematics you may not know the number.",
    "start": "192240",
    "end": "200460"
  },
  {
    "text": "In constructive Mathematics you can only make this claim if you can actually provide a concrete number.",
    "start": "200460",
    "end": "210760"
  },
  {
    "text": "and Per Martin-Löf, he had nothing to do with computer science, he was really a Philosopher and Mathematician",
    "start": "214280",
    "end": "220819"
  },
  {
    "text": "a very interesting guy",
    "start": "220960",
    "end": "222760"
  },
  {
    "text": "\"but then people thought: ok, this idea of always getting an answer:\"",
    "start": "222760",
    "end": "227140"
  },
  {
    "text": "\"doesn't this correspond to, like, writing a computer program?\"",
    "start": "227140",
    "end": "230560"
  },
  {
    "text": "And he said: \"Yeah, this is like a computer program.\"",
    "start": "230560",
    "end": "233099"
  },
  {
    "text": "And this has been made more precise and has been used,",
    "start": "233600",
    "end": "238580"
  },
  {
    "text": "so people started basically to implement this Type Theory on a computer.",
    "start": "238820",
    "end": "246880"
  },
  {
    "text": "Type Theory uses the Types we have in Programming language, like for example",
    "start": "247400",
    "end": "255439"
  },
  {
    "text": "the type of booleans, the type of Integers...",
    "start": "255440",
    "end": "257840"
  },
  {
    "text": "or the type of functions from Integers to Booleans.\nInt → Bool",
    "start": "257840",
    "end": "261980"
  },
  {
    "text": "Input an Integer and output a Boolean\nInt → Bool",
    "start": "261980",
    "end": "264240"
  },
  {
    "text": "and so on. These are types.",
    "start": "264240",
    "end": "265599"
  },
  {
    "text": "And a very important observation is, that we can use types in order to model logical reasoning.",
    "start": "266180",
    "end": "275620"
  },
  {
    "text": "To model logical propositions.",
    "start": "275840",
    "end": "278620"
  },
  {
    "text": "So if you have a proposition, a logical expression,",
    "start": "278920",
    "end": "284680"
  },
  {
    "text": "For example, \"There are infinitely many ℙrime Numbers\"\n∀p∈ℙ : ∃q∈ℙ | q > p",
    "start": "284680",
    "end": "287000"
  },
  {
    "text": "is a proposition",
    "start": "287000",
    "end": "288620"
  },
  {
    "text": "or, for every two ℕatural Numbers, one is less than, equal to or greater than the other\n∀a,b∈ℕ: ab",
    "start": "288780",
    "end": "297200"
  },
  {
    "text": "These are propositions.",
    "start": "297200",
    "end": "298420"
  },
  {
    "text": "And the observation is that, for every proposition, we can associate a type.",
    "start": "299180",
    "end": "308560"
  },
  {
    "text": "And that's the type of evidence or proof for this proposition.",
    "start": "309900",
    "end": "315300"
  },
  {
    "text": "This is called the Curry-Howard Equivalence",
    "start": "316060",
    "end": "319560"
  },
  {
    "text": "So whenever you have a proposition",
    "start": "320620",
    "end": "322940"
  },
  {
    "text": "you find a Type such that",
    "start": "323260",
    "end": "326300"
  },
  {
    "text": ", if there is a program of its corresponding type, then you know this proposition holds.",
    "start": "326300",
    "end": "332740"
  },
  {
    "text": "Sean: So this is computing getting its elbows in and getting stuck into some mathematics",
    "start": "332740",
    "end": "337099"
  },
  {
    "text": "Yes and I would say, ok, using type theory is very natural to do on a computer",
    "start": "337700",
    "end": "348000"
  },
  {
    "text": "where as Set Theory seems to be rather alien to use on computers.",
    "start": "348000",
    "end": "354440"
  },
  {
    "text": "In Set Theory, for example, there is the notion of a function, but it's a derived concept:",
    "start": "354820",
    "end": "363080"
  },
  {
    "text": "You have a set of pairs with certain properties\n{p|p=(a,b), *certain properties hold*}",
    "start": "363080",
    "end": "366120"
  },
  {
    "text": "There is not this idea like in Type Theory",
    "start": "366160",
    "end": "370020"
  },
  {
    "text": "That a function is something where you put something in and get something out\nf : a → b",
    "start": "370020",
    "end": "373400"
  },
  {
    "text": "Which corresponds to how we think in Computer Science",
    "start": "373400",
    "end": "378479"
  },
  {
    "text": "So a function in Type Theory is something we can actually compute with,",
    "start": "378480",
    "end": "382640"
  },
  {
    "text": "Where as a function in Mathematics and Set Theory is something like",
    "start": "382640",
    "end": "386960"
  },
  {
    "text": "the set of all pairs of inputs with corresponding outputs",
    "start": "386960",
    "end": "390940"
  },
  {
    "text": "but a function in Mathematics may be something you cannot compute",
    "start": "390940",
    "end": "395340"
  },
  {
    "text": "So I'm always saying \"This is not a good name, to call it `function` because",
    "start": "395340",
    "end": "399520"
  },
  {
    "text": "a function which doesn't function shouldn't be called a function\"",
    "start": "399520",
    "end": "403800"
  },
  {
    "text": "Sean: dysfunctional functions\nThorsten: Yeah dysfunctional functions",
    "start": "403800",
    "end": "406900"
  },
  {
    "text": "Type Theory has got some other interesting features, which have been",
    "start": "407460",
    "end": "414780"
  },
  {
    "text": "discovered or made explicit more recently",
    "start": "414780",
    "end": "418420"
  },
  {
    "text": "and this is work which was started by a mathematician, actually:",
    "start": "419560",
    "end": "425860"
  },
  {
    "text": "He's called Vladimir Voevodskij and he's a Fields medalist at the Institute for Advanced Study in Princeton",
    "start": "425860",
    "end": "433319"
  },
  {
    "text": "He is doing something called Homotopy Theory",
    "start": "433320",
    "end": "436920"
  },
  {
    "text": "So Homotopy Theory is a quite abstract area of Mathematics",
    "start": "436920",
    "end": "440620"
  },
  {
    "text": "where we try to understand geometric objects, a very abstract geometric objects.",
    "start": "440620",
    "end": "446240"
  },
  {
    "text": "and you can identify geometric objects which you can transform like plastic... or play dough",
    "start": "447100",
    "end": "459260"
  },
  {
    "text": "where you can transform one into the other in continuous transformations",
    "start": "459260",
    "end": "463660"
  },
  {
    "text": "and first of all that doesn't seem to have anything to do with the Type Theory I mentioned",
    "start": "463660",
    "end": "468120"
  },
  {
    "text": "but, Vladimir Voevodskij observed, that",
    "start": "468420",
    "end": "472900"
  },
  {
    "text": "there actually is a close connection between Type Theory and Homotopy Theory",
    "start": "472900",
    "end": "477639"
  },
  {
    "text": "which leads to this new idea called Homotopy Type Theory (HoTT)",
    "start": "477640",
    "end": "481460"
  },
  {
    "text": "and the idea here is, that when, in Type Theory, you have a proof that two things are equal,",
    "start": "481720",
    "end": "489420"
  },
  {
    "text": "this is like surfaces where you have a path between them",
    "start": "489420",
    "end": "494640"
  },
  {
    "text": "and then you can also ask yourself: \"Are two equalities equal?\" - \"Is there a path between paths?\"",
    "start": "494980",
    "end": "503000"
  },
  {
    "text": "A continuous transformation of paths",
    "start": "503000",
    "end": "505240"
  },
  {
    "text": "Ok. That's\nSean: It's getting quite abstract",
    "start": "505760",
    "end": "509160"
  },
  {
    "text": "Thorsten: It's getting very abstract\nSean: Is this like a",
    "start": "509160",
    "end": "511360"
  },
  {
    "text": "Sean: -These play dough objects are a bit like a way of visualizing these ideas? Is that what he has discovered?",
    "start": "511460",
    "end": "518459"
  },
  {
    "text": "Thorsten: No, it's not really. It's rather surprising. Because we started with something that is called",
    "start": "518460",
    "end": "524840"
  },
  {
    "text": "Type Theory which is a programming language and a logic as I have explained.",
    "start": "524840",
    "end": "529400"
  },
  {
    "text": "And then there is this Homotopy Theory which has completely different rules in",
    "start": "529400",
    "end": "533460"
  },
  {
    "text": "what is called, Algebraic Topology",
    "start": "533460",
    "end": "536020"
  },
  {
    "text": "Which is like, I mean, topology is an idea of describing continuous phenomena like ℝeal numbers and",
    "start": "536420",
    "end": "543639"
  },
  {
    "text": "and surfaces and so on, which are important in physics and so on",
    "start": "544820",
    "end": "549220"
  },
  {
    "text": "And then, in Homotopy Theory, people do this more and more abstractly.",
    "start": "549660",
    "end": "554720"
  },
  {
    "text": "They try to distill the essence of these objects.",
    "start": "554720",
    "end": "560079"
  },
  {
    "text": "They are infinitely dimensional - no really good intuition for what's going on.",
    "start": "561560",
    "end": "567900"
  },
  {
    "text": "But then, the surprising thing, and this one of the surprising reuses of mathematics:",
    "start": "569320",
    "end": "575080"
  },
  {
    "text": "You go completely abstract in one direction and you come out somewhere completely different",
    "start": "575080",
    "end": "580440"
  },
  {
    "text": "And this is a relation between Type Theory and Homotopy Theory, ok?",
    "start": "580820",
    "end": "586520"
  },
  {
    "text": "So it's not very direct; it's not like we have a type and then we have a picture which corresponds to this type",
    "start": "586520",
    "end": "592320"
  },
  {
    "text": "It's not like this.",
    "start": "592320",
    "end": "594360"
  },
  {
    "text": "It's much more indirect",
    "start": "594360",
    "end": "599040"
  },
  {
    "text": "but the mathematical principles underlying this Homotopy Theory and Type Theory are matched up",
    "start": "599040",
    "end": "607560"
  },
  {
    "text": "Surprisingly well.",
    "start": "607800",
    "end": "609160"
  },
  {
    "text": "Maybe one question is \"What is the pay-off?\", I mean, what does this buy us?",
    "start": "609160",
    "end": "612819"
  },
  {
    "text": "And I think there are some very exciting opportunities now,",
    "start": "613100",
    "end": "617279"
  },
  {
    "text": "where Type Theory shows its superiorirty over Set Theory",
    "start": "617280",
    "end": "623460"
  },
  {
    "text": "And this has to do with abstraction:",
    "start": "623960",
    "end": "627560"
  },
  {
    "text": "If you want to build large mathematical libaries",
    "start": "628120",
    "end": "632460"
  },
  {
    "text": "you have to climb a ladder of abstract reasoning",
    "start": "633360",
    "end": "636560"
  },
  {
    "text": "You don't want to do everything on a concrete level, you have to do things abstractly.",
    "start": "636560",
    "end": "642000"
  },
  {
    "text": "That's the power of Mathematics.",
    "start": "642000",
    "end": "643460"
  },
  {
    "text": "Type Theory, and especially Homotopy Type Theory, in its very structure is designed in a way,",
    "start": "643460",
    "end": "650420"
  },
  {
    "text": "that you cannot talk about the details of how things are actually implemented",
    "start": "650420",
    "end": "656720"
  },
  {
    "text": "so for example, ℕatural Numbers: In Set Theory, ℕatural Numbers are Sets. That's maybe surprising.",
    "start": "657060",
    "end": "664480"
  },
  {
    "text": "But in Set Theory, Everything is a Set.",
    "start": "664480",
    "end": "666279"
  },
  {
    "text": "And there is a particular Encoding of ℕatural Numbers using Sets using {curly brackets}",
    "start": "666280",
    "end": "672840"
  },
  {
    "text": "but there is more than one! So you can use Sets to encode ℕatural Numbers in various ways.",
    "start": "672840",
    "end": "678800"
  },
  {
    "text": "so for example, in the standard encoding in Set Theory, there is a very strange artifact",
    "start": "679280",
    "end": "686060"
  },
  {
    "text": "for example, one number is element of a bigger number of ℕatural Numbers, Counting Numbers",
    "start": "686240",
    "end": "692740"
  },
  {
    "text": "It's true that 2 is an element of 3\n0∈1∈2∈3∈4∈...",
    "start": "692740",
    "end": "695279"
  },
  {
    "text": "doesn't really make any sense, right?",
    "start": "695280",
    "end": "697360"
  },
  {
    "text": "It's just the way it's set up. Which means, when you work in Set Theory, you can see the implementation details.",
    "start": "697620",
    "end": "706760"
  },
  {
    "text": "How numbers are actually represented using {curly brackets}.",
    "start": "707060",
    "end": "711900"
  },
  {
    "text": "Now that's something that doesn't really matter when you think about numbers: 2∈3 is silly.",
    "start": "711900",
    "end": "717920"
  },
  {
    "text": "But you can't hide this",
    "start": "718360",
    "end": "720480"
  },
  {
    "text": "In Type Theory, when you introduce ℕatural Numbers in Type Theory,",
    "start": "720960",
    "end": "726140"
  },
  {
    "text": "you cannot talk about the encoding - how they are actually represented -",
    "start": "726140",
    "end": "730300"
  },
  {
    "text": "So for example, numbers are often represented following an idea of an Italian mathematician",
    "start": "730640",
    "end": "737720"
  },
  {
    "text": "callead Peano, who said:",
    "start": "737720",
    "end": "739139"
  },
  {
    "text": "0 is a ℕatural Number\n0∈ℕ",
    "start": "739140",
    "end": "740500"
  },
  {
    "text": "and every other ℕatural Number is a previous number +1\n∀n∈ℕ : succ(n)∈ℕ (where succ(n) is n+1)",
    "start": "740500",
    "end": "743340"
  },
  {
    "text": "is also a ℕatural Number\n∀n∈ℕ : succ(n)∈ℕ (where succ(n) is n+1)",
    "start": "743340",
    "end": "744600"
  },
  {
    "text": "and that's a way we can build all ℕatural Numbers.",
    "start": "744780",
    "end": "747700"
  },
  {
    "text": "But there are other ways to do this, right? When you write numbers in this system they become very long.",
    "start": "748500",
    "end": "755380"
  },
  {
    "text": "Because you write +1 + 1 +1 +1; that's not a very good system.",
    "start": "755380",
    "end": "759960"
  },
  {
    "text": "So what we rather like to do is using binary encoding of numbers",
    "start": "760300",
    "end": "764459"
  },
  {
    "text": "Using 0 and 1. That's much shorter. I mean still longer than decimal, but",
    "start": "764460",
    "end": "769600"
  },
  {
    "text": "It's much shorter than this +1+1+1",
    "start": "769900",
    "end": "773860"
  },
  {
    "text": "And this are two ways of encoding the ℕatural Numbers.",
    "start": "773860",
    "end": "778120"
  },
  {
    "text": "Now in Type Theory, you cannot express the difference between these two encodings.",
    "start": "778120",
    "end": "784900"
  },
  {
    "text": "Because they are actually in a way the same:\nThey exhibit the same concept.",
    "start": "784900",
    "end": "790420"
  },
  {
    "text": "So you automatically hide implementation details, like, that's what we wanted to do in Computer Science.",
    "start": "790420",
    "end": "797220"
  },
  {
    "text": "We want to hide implementation details because, like, if you want to change one implementation  for another,",
    "start": "797220",
    "end": "803180"
  },
  {
    "text": "we don't want to go all the way up so everything which uses this has to be rewritten.",
    "start": "803180",
    "end": "807440"
  },
  {
    "text": "We want to say \"Ok I'll just plug something else in and it works.\"",
    "start": "807440",
    "end": "810340"
  },
  {
    "text": "So you want to be able to plug in, if we use the Peano Numbers and say \"that's too cumbersome\"",
    "start": "810340",
    "end": "815660"
  },
  {
    "text": "\"and I'll plug in my binary numbers\" and nothing should change.\"",
    "start": "815660",
    "end": "818920"
  },
  {
    "text": "And that's how Type Theory is designed.",
    "start": "819540",
    "end": "823420"
  },
  {
    "text": "And from this Homotopy Type Theory comes a very important principle",
    "start": "823780",
    "end": "830000"
  },
  {
    "text": "which is called the Univalence Principle\n(=)≅(≅)",
    "start": "830000",
    "end": "833360"
  },
  {
    "text": "And it basically says that two things which are equivalent (≅), like the binary and Peano numbers,",
    "start": "833360",
    "end": "842100"
  },
  {
    "text": "then they are equal (=)",
    "start": "842100",
    "end": "843399"
  },
  {
    "text": "We cannot, not just, we cannot talk about implementation details",
    "start": "843400",
    "end": "847200"
  },
  {
    "text": "but because we cannot talk about implementation details,",
    "start": "847200",
    "end": "851800"
  },
  {
    "text": "two things which behave the same from outside (≅) are actually considered to be the same (=)",
    "start": "851800",
    "end": "858500"
  },
  {
    "text": "Sean: Is this changing massively the way that people  think about things in other areas, then?",
    "start": "858500",
    "end": "863120"
  },
  {
    "text": "Thorsten: Yes, so let's see:\nIt has the potential of doing this.",
    "start": "863120",
    "end": "869100"
  },
  {
    "text": "So Homotopy Type Theory has been suggested as a new Foundation of Mathematics.",
    "start": "869100",
    "end": "878339"
  },
  {
    "text": "People can just move into it, they can learn logical reasoning and abstract mathematics",
    "start": "878340",
    "end": "885880"
  },
  {
    "text": "just coming from this programming angle.",
    "start": "885880",
    "end": "888880"
  },
  {
    "text": "So I think there is an exciting opportunity.",
    "start": "890220",
    "end": "894279"
  },
  {
    "text": "And I think, looking back to Set Theory, we have these new tools of Proof Assistants to do interactive proofs",
    "start": "894460",
    "end": "905820"
  },
  {
    "text": "And in a way it would be a shame if we used this new technology to",
    "start": "906180",
    "end": "912320"
  },
  {
    "text": "formalize the mathematics of the 20s and 30s, the mathematics of, let's say, yesterday.",
    "start": "912320",
    "end": "920180"
  },
  {
    "text": "But there is an exciting new opportunity here, to really use new mathematical ideas, new foundations",
    "start": "920380",
    "end": "931460"
  },
  {
    "text": "when we formalize mathematics.",
    "start": "931460",
    "end": "934940"
  },
  {
    "text": "...we got a value here at x1 and we are going between x0 and x1 and the value of y, at this position...",
    "start": "937820",
    "end": "944580"
  },
  {
    "text": "...in Type Theory means you can proof the Excluded Middle for this particular predicate,",
    "start": "944580",
    "end": "950580"
  },
  {
    "text": "You can proof, for all numbers, either prime(n) or not prime(n)...",
    "start": "950580",
    "end": "955160"
  }
]