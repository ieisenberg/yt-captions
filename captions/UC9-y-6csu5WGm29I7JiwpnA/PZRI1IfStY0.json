[
  {
    "text": "People expect computers to be \nentirely accurate and precise with numbers.",
    "start": "0",
    "end": "4500"
  },
  {
    "text": "You know, you grow up with calculators.\nYou expect that if you type in:",
    "start": "4600",
    "end": "7319"
  },
  {
    "text": "\"0.1 + 0.2\", you expect it to come out to \"0.3\".",
    "start": "7320",
    "end": "11880"
  },
  {
    "text": "And sooner or later \nevery programmer, as they're learning,",
    "start": "12000",
    "end": "15440"
  },
  {
    "text": "tries something like that. \nAnd they type it into a programming language.",
    "start": "15440",
    "end": "19300"
  },
  {
    "text": "Something like \"0.1 + 0.2\",\nand they will hit Enter,",
    "start": "19460",
    "end": "24660"
  },
  {
    "text": "and what the computer will give them\nis something like \"0.300000000...1\".",
    "start": "24660",
    "end": "30400"
  },
  {
    "text": "And at that point, they will have started \nto learn about floating point numbers,",
    "start": "30400",
    "end": "34640"
  },
  {
    "text": "and they will be starting to tear their hair out.",
    "start": "34640",
    "end": "37260"
  },
  {
    "text": "Floating point numbers are \nessentially scientific notation.",
    "start": "39480",
    "end": "42960"
  },
  {
    "text": "For the uninitiated, let's say\nyou're an astrophysicist,",
    "start": "43120",
    "end": "47579"
  },
  {
    "text": "and you have the speed of light,",
    "start": "47620",
    "end": "49680"
  },
  {
    "text": "which is this enormous number with eight 0s after it.",
    "start": "49680",
    "end": "53880"
  },
  {
    "text": "And you want to multiply it by a tiny distance.",
    "start": "54040",
    "end": "56360"
  },
  {
    "text": "It doesn't really matter what we're measuring here, \nit's just a big number and a small number.",
    "start": "56540",
    "end": "59280"
  },
  {
    "text": "Let's say, 0.00000015.",
    "start": "59440",
    "end": "64159"
  },
  {
    "text": "Let's say you want to multiply these two together.\n(I may have made this a bit deliberately easy.)",
    "start": "64160",
    "end": "68640"
  },
  {
    "text": "You could try and do some \nreally complicated maths and work it all out,",
    "start": "68640",
    "end": "72140"
  },
  {
    "text": "but you don't need to.\nBecause in scientific notation,",
    "start": "72140",
    "end": "75140"
  },
  {
    "text": "this is 3 times 10 to the 8,",
    "start": "75320",
    "end": "79020"
  },
  {
    "text": "and this one is 1.5 times 10 to the -7.",
    "start": "79360",
    "end": "83780"
  },
  {
    "text": "So you don't need to do anything particularly complicated to multiply these two together.",
    "start": "83780",
    "end": "87360"
  },
  {
    "text": "All you have to do is multiply these,\nwhich is 4.5,",
    "start": "87420",
    "end": "91780"
  },
  {
    "text": "and then add these exponents together here.",
    "start": "91920",
    "end": "95720"
  },
  {
    "text": "So, 8 add -7, eight minus seven \nmeans that's 1.",
    "start": "95880",
    "end": "100460"
  },
  {
    "text": "So we'll have 4.5 times 10 to the 1, \nor 4.5 times 10, or 45.",
    "start": "100460",
    "end": "106340"
  },
  {
    "text": "Brilliant. That's much easier than \ntrying to actually handle large numbers.",
    "start": "106500",
    "end": "111420"
  },
  {
    "text": "And it also brings us to \nthe concept of significant figures.",
    "start": "111580",
    "end": "114960"
  },
  {
    "text": "Because the speed of light isn't\nexactly 3 times 10 to the 8.",
    "start": "114980",
    "end": "118460"
  },
  {
    "text": "It's 2.997[something], and there's \na lot of digits on the end of there",
    "start": "118460",
    "end": "124020"
  },
  {
    "text": "which don't really matter \nfor everyday calculations.",
    "start": "124160",
    "end": "127080"
  },
  {
    "text": "We round it up. We say it's 3 times 10 to the 8.",
    "start": "127140",
    "end": "130160"
  },
  {
    "text": "Or maybe, for being precise, \nwe say it's 2.997 times 10 to the 8,",
    "start": "130300",
    "end": "135640"
  },
  {
    "text": "but we don't really worry \nabout the numbers beyond that.",
    "start": "135640",
    "end": "138400"
  },
  {
    "text": "Hold that thought. \nSo, we'll come back to significant digits later.",
    "start": "138400",
    "end": "141939"
  },
  {
    "text": "The two main advantages to floating point \nare speed and efficiency.",
    "start": "141940",
    "end": "145660"
  },
  {
    "text": "Speed, because floating point \nhas been built over many, many years.",
    "start": "145660",
    "end": "148760"
  },
  {
    "text": "It is now lightning fast \nfor computers to deal with.",
    "start": "148760",
    "end": "152459"
  },
  {
    "text": "And efficiency, because \nit can deal with really big numbers --",
    "start": "152540",
    "end": "155620"
  },
  {
    "text": "massive numbers, \"size of the universe\" numbers --",
    "start": "155620",
    "end": "158440"
  },
  {
    "text": "and really small numbers -- \n\"size of an atom\" numbers --",
    "start": "158440",
    "end": "161600"
  },
  {
    "text": "without needing enormous amounts of space.",
    "start": "161740",
    "end": "164100"
  },
  {
    "text": "If you had a format that needed \nto include the size of the universe",
    "start": "164100",
    "end": "168300"
  },
  {
    "text": "and the size of an atom, you'd need \nso many zeroes stored on both ends",
    "start": "168300",
    "end": "174520"
  },
  {
    "text": "or you'd need something particularly \ncomplicated for a computer to work out",
    "start": "174520",
    "end": "178320"
  },
  {
    "text": "that it would either be really inefficient, \nstoring one number as a megabyte,",
    "start": "178360",
    "end": "183300"
  },
  {
    "text": "or you would need something that would be\nreally fiddly for a computer",
    "start": "183300",
    "end": "187180"
  },
  {
    "text": "to work out as it tries to place \nall the zeroes and the numbers everywhere.",
    "start": "187180",
    "end": "190760"
  },
  {
    "text": "Let's talk about base 10. \nLet's talk about us - people.",
    "start": "190760",
    "end": "193739"
  },
  {
    "text": "(Let's talk about the lights being on \nall of a sudden. That's weird.)",
    "start": "193740",
    "end": "197140"
  },
  {
    "text": "In base 10, in our normal human numbers,",
    "start": "197300",
    "end": "201900"
  },
  {
    "text": "so you know ten digits - base 10,",
    "start": "201900",
    "end": "204079"
  },
  {
    "text": "we have hundreds, tens, and units.\nYou learn that in primary school.",
    "start": "204080",
    "end": "207780"
  },
  {
    "text": "And over here, you have tenths, \nhundredths, and thousandths.",
    "start": "207780",
    "end": "213300"
  },
  {
    "text": "So if you want to say \"one tenth\" in decimal,\nyou say \"0.1\",",
    "start": "213300",
    "end": "219160"
  },
  {
    "text": "and that's normal, and that's natural.",
    "start": "219180",
    "end": "221400"
  },
  {
    "text": "Base 2, on the other hand, binary..., computers..., they don't do that.",
    "start": "221400",
    "end": "225019"
  },
  {
    "text": "Because what they see are fours, twos, and ones.",
    "start": "225020",
    "end": "228460"
  },
  {
    "text": "And then over here: halves, quarters, eighths and sixteenths.",
    "start": "228500",
    "end": "232920"
  },
  {
    "text": "There's no 0.1 in there.",
    "start": "232920",
    "end": "234900"
  },
  {
    "text": "In fact, 0.1 in binary is \"0.00011\", \nand that \"0011\" is recurring.",
    "start": "235100",
    "end": "244560"
  },
  {
    "text": "It's actually 0.00011001100110011... \nall the way to infinity.",
    "start": "244680",
    "end": "251260"
  },
  {
    "text": "Which is interesting, \nbecause 32-bit computers,",
    "start": "251260",
    "end": "255319"
  },
  {
    "text": "the ones we generally use,\n(we've moved a bit on now)",
    "start": "255320",
    "end": "257760"
  },
  {
    "text": "32-bit computers only store 23 significant digits.",
    "start": "257760",
    "end": "262940"
  },
  {
    "text": "They also store where the decimal point is.",
    "start": "263200",
    "end": "265260"
  },
  {
    "text": "They basically do scientific notation in base 2.\nThat's what floating point is.",
    "start": "265380",
    "end": "270300"
  },
  {
    "text": "So they say, \"All right, so we've got \nthis long binary number,",
    "start": "270300",
    "end": "274180"
  },
  {
    "text": "times 2 to the something.\"",
    "start": "274180",
    "end": "278220"
  },
  {
    "text": "And that's a problem. \nBecause what it loses is precision.",
    "start": "278220",
    "end": "280980"
  },
  {
    "text": "It doesn't understand recursion.",
    "start": "280980",
    "end": "283160"
  },
  {
    "text": "I have an analogy for that in base 10:",
    "start": "283160",
    "end": "285920"
  },
  {
    "text": "if you try to write \"a third\" as a decimal, we go:",
    "start": "286040",
    "end": "289640"
  },
  {
    "text": "hundreds, tens, units, tenths, hundredths, thousandths,",
    "start": "289640",
    "end": "295300"
  },
  {
    "text": "and then, we try and do this and we end up with\n0.333333333... recurring.",
    "start": "295300",
    "end": "303020"
  },
  {
    "text": "Now imagine you don't understand \nrecurring numbers, like a computer,",
    "start": "303020",
    "end": "306860"
  },
  {
    "text": "like scientific notation \nif you take away that recursion,",
    "start": "306860",
    "end": "309719"
  },
  {
    "text": "like floating point arithmetic doesn't.",
    "start": "309720",
    "end": "312640"
  },
  {
    "text": "So this is where we bring everything together.",
    "start": "312640",
    "end": "314920"
  },
  {
    "text": "If you're in base 10, if you're in decimal,\nlet's say you have 1/3 + 1/3 + 1/3.",
    "start": "314920",
    "end": "323220"
  },
  {
    "text": "As humans we go, \"Well that's 0.3 recurring,\nplus 0.3 recurring,",
    "start": "323280",
    "end": "328020"
  },
  {
    "text": "plus 0.3 recurring, which is 1.\"",
    "start": "328020",
    "end": "330699"
  },
  {
    "text": "But say you're a computer \nand you don't understand recursion,",
    "start": "330700",
    "end": "334020"
  },
  {
    "text": "because floating point math \nis essentially significant figures.",
    "start": "334040",
    "end": "338020"
  },
  {
    "text": "So a computer would look at that and go,\n\"0.333333333...",
    "start": "338200",
    "end": "343680"
  },
  {
    "text": "plus 333..., plus 333...\", \nand it will say,",
    "start": "344700",
    "end": "347300"
  },
  {
    "text": "\"Well, a third plus a third plus a third.\nTotal it to 0.99999999...\"",
    "start": "347300",
    "end": "353300"
  },
  {
    "text": "But after a while, you'll stop. \nBecause you've run out of digits.",
    "start": "353300",
    "end": "357699"
  },
  {
    "text": "What you've just got there \nis a floating point rounding error.",
    "start": "357700",
    "end": "362340"
  },
  {
    "text": "Let's take it down again to base 2. \nLet's do 1/10 + 2/10.",
    "start": "362460",
    "end": "367039"
  },
  {
    "text": "Which is 0.00011001100110011...\nOh! We've run out of digits!",
    "start": "367040",
    "end": "374520"
  },
  {
    "text": "Because floating point arithmetic \non 32-bit computers only stores 23 digits.",
    "start": "374520",
    "end": "380699"
  },
  {
    "text": "And then you try and add 2/10, which is\n0.001100110011...",
    "start": "380780",
    "end": "389340"
  },
  {
    "text": "I'm not going to try and do that maths,\nbecause it's going to take ages",
    "start": "389340",
    "end": "392300"
  },
  {
    "text": "but what happens is exactly the same\nas back here.",
    "start": "392300",
    "end": "396240"
  },
  {
    "text": "After 23 digits in 32-bit arithmetic\n(I think we've got 56 on 64-bit computers)",
    "start": "396240",
    "end": "401800"
  },
  {
    "text": "it cuts. \nIt doesn't understand recurring,",
    "start": "401800",
    "end": "404800"
  },
  {
    "text": "which means that floating point looks at \n1/10 + 2/10, what you just typed in,",
    "start": "404820",
    "end": "409600"
  },
  {
    "text": "\"0.1 + 0.2\" in decimal, \nand it says that 1/10 + 2/10",
    "start": "409600",
    "end": "415720"
  },
  {
    "text": "does NOT quite equal 3/10.",
    "start": "415720",
    "end": "419320"
  },
  {
    "text": "Because, to its mind, it doesn't.",
    "start": "419320",
    "end": "423120"
  },
  {
    "text": "For nearly all cases, it IS close enough.",
    "start": "423160",
    "end": "426220"
  },
  {
    "text": "In most cases, you don't need \nmore than 23 binary digits of precision.",
    "start": "426220",
    "end": "430960"
  },
  {
    "text": "If you do, you go to 64-bit.",
    "start": "430960",
    "end": "433180"
  },
  {
    "text": "If you are doing a 3D game and you need to know \nwhere to point something on the screen,",
    "start": "433180",
    "end": "437960"
  },
  {
    "text": "it doesn't matter if it's 1/100000 of a pixel out",
    "start": "437960",
    "end": "442199"
  },
  {
    "text": "because it will be in the right place.",
    "start": "442200",
    "end": "444080"
  },
  {
    "text": "And if you're doing big calculations, \nit doesn't matter if a tiny, tiny, tiny fraction --",
    "start": "444080",
    "end": "448300"
  },
  {
    "text": "something smaller than a molecule -- is out,",
    "start": "448300",
    "end": "451099"
  },
  {
    "text": "because it will look more or less right:",
    "start": "451100",
    "end": "453540"
  },
  {
    "text": "right beyond any precision or tolerance \nthat the real world could possibly manage.",
    "start": "453540",
    "end": "459340"
  },
  {
    "text": "But it means that if you're dealing with currency, \nand you say that",
    "start": "459380",
    "end": "462940"
  },
  {
    "text": "you are adding 10p (or £0.1) to 20p, \nevery programmer hits this sooner or later,",
    "start": "462940",
    "end": "470740"
  },
  {
    "text": "we just go like that. That's easy.",
    "start": "470740",
    "end": "472560"
  },
  {
    "text": "A computer will come back and say, \n\"That's actually... that many pence.\"",
    "start": "472700",
    "end": "478140"
  },
  {
    "text": "And in these particular human things, \nwe will notice the error",
    "start": "478140",
    "end": "482600"
  },
  {
    "text": "because suddenly to us\nit's very, very obvious.",
    "start": "482600",
    "end": "486500"
  },
  {
    "text": "That's the problem with floating point. \nTo fix that, by the way, if you're doing currency,",
    "start": "487100",
    "end": "490560"
  },
  {
    "text": "you either use a decimal type \nin more advanced programming languages",
    "start": "490560",
    "end": "493860"
  },
  {
    "text": "or you just store everything as an integer \nin terms of pence, cents, or whatever",
    "start": "493880",
    "end": "498560"
  },
  {
    "text": "and then divide by 100 at the end.",
    "start": "498680",
    "end": "500900"
  },
  {
    "text": "Floating point is something \nthat really, really confuses a lot of people.",
    "start": "500900",
    "end": "504000"
  },
  {
    "text": "It's tough to get your head around\nuntil you realize that it is just scientific notation.",
    "start": "504000",
    "end": "508420"
  },
  {
    "text": "It's the same thing that we learned \nin maths class at school, only in base 2.",
    "start": "508420",
    "end": "513640"
  },
  {
    "text": "It's halves and quarters and eighths,",
    "start": "513640",
    "end": "516500"
  },
  {
    "text": "and once you crack that, once you realize that \nit's storing a set length of number",
    "start": "516500",
    "end": "521820"
  },
  {
    "text": "and then working out where the decimal point could be\nand it's just significant figures,",
    "start": "521820",
    "end": "526660"
  },
  {
    "text": "it starts to become a lot easier.\nAnd you start to realize,",
    "start": "526740",
    "end": "529540"
  },
  {
    "text": "\"Oh, that's why if i type 0.1 + 0.2, what I get isn't 0.3.\"",
    "start": "529560",
    "end": "535880"
  }
]