[
  {
    "text": "So, we'll talk about something very different today; very different to my normal image filtering videos -",
    "start": "60",
    "end": "4660"
  },
  {
    "text": "- and that is \"buffer overflow exploits\" and what they are and how you do them.",
    "start": "4660",
    "end": "9760"
  },
  {
    "text": "Which is kinda fun",
    "start": "9760",
    "end": "11480"
  },
  {
    "text": "I'm obviously somewhat of a geek, I quite like these sort of things - low level memory exploits.",
    "start": "11480",
    "end": "16400"
  },
  {
    "text": "A buffer overflow exploit is a situation where -",
    "start": "20180",
    "end": "23500"
  },
  {
    "text": "- we're using some, probably low-level C function or something to write a string -",
    "start": "23500",
    "end": "26880"
  },
  {
    "text": "- or some other variable - into a piece of memory that is only a certain length.",
    "start": "26880",
    "end": "30800"
  },
  {
    "text": "But we're trying to write something in that's longer than that -",
    "start": "30800",
    "end": "33559"
  },
  {
    "text": "- and it then overwrites the later memory addresses, and that can cause all kinds of problems.",
    "start": "33560",
    "end": "38300"
  },
  {
    "text": "The first thing we should talk about, probably, is roughly what happens in memory with a program when it's run.",
    "start": "38300",
    "end": "44520"
  },
  {
    "text": "Now, we're talking about C programmes in Linux today, just because I happen to have a Linux VM running here and it's easier.",
    "start": "44520",
    "end": "51080"
  },
  {
    "text": "But this will apply to many different languages and many different operating systems.",
    "start": "51080",
    "end": "55240"
  },
  {
    "text": "So, when a programme is run by the operating system... so we're in some shell and we type in a command to run a programme",
    "start": "55240",
    "end": "61600"
  },
  {
    "text": "The operating system will effectively call, as a function, the main method of your code.",
    "start": "61600",
    "end": "68860"
  },
  {
    "text": "But your actual process, your executable, will be held in memory in a very specific way.",
    "start": "68860",
    "end": "74700"
  },
  {
    "text": "And it's consistent between different processes.",
    "start": "74700",
    "end": "77280"
  },
  {
    "text": "So, we have a big block of RAM. We don't know how big our RAM is because it can be varied, but -",
    "start": "77280",
    "end": "82460"
  },
  {
    "text": "- we use something called Virtual Memory Address Translation to say that -",
    "start": "82460",
    "end": "85979"
  },
  {
    "text": "- everything in here, this is 0. 0x000...",
    "start": "85980",
    "end": "89940"
  },
  {
    "text": "This is the bottom of the memory, as it were",
    "start": "89940",
    "end": "92060"
  },
  {
    "text": "And up here is 0xFFF. So, this is the equivalent of \"11111111\" memory address -",
    "start": "92060",
    "end": "98820"
  },
  {
    "text": "- all the way up to 32 or 64 bits, and this is 0.",
    "start": "98820",
    "end": "102040"
  },
  {
    "text": "Now, when you use this, there are certain areas of this memory that are always allocated to certain things.",
    "start": "102040",
    "end": "107700"
  },
  {
    "text": "So, up here we have kernel things. So, this will be command line parameters that we can pass to our programme -",
    "start": "107700",
    "end": "113640"
  },
  {
    "text": "- and environment variables and so on.",
    "start": "113640",
    "end": "115640"
  },
  {
    "text": "Down here we have something called the text. That's the actual code of our programme.",
    "start": "115640",
    "end": "119860"
  },
  {
    "text": "The machine instructions that we've compiled get loaded in there.",
    "start": "119860",
    "end": "123540"
  },
  {
    "text": "Now that's read-only, because we don't want to be messing about down there.",
    "start": "123540",
    "end": "126420"
  },
  {
    "text": "In here we have data. So, uninitialised and initialised variables get held here.",
    "start": "126420",
    "end": "131300"
  },
  {
    "text": "And then we have the heap. Now, the heap may have been mentioned from time to time.",
    "start": "131300",
    "end": "135200"
  },
  {
    "text": "It's where you allocate large things in your memory.",
    "start": "135200",
    "end": "137520"
  },
  {
    "text": "Big area of memory that you can allocate huge chunks on to do various things.",
    "start": "137520",
    "end": "141440"
  },
  {
    "text": "What you do with that is, of course, up to your programme.",
    "start": "141440",
    "end": "143540"
  },
  {
    "text": "And then up here, perhaps the most important bit, in some ways anyway, is the stack.",
    "start": "143540",
    "end": "148159"
  },
  {
    "text": "Now the stack holds the local variables for each of your functions -",
    "start": "148160",
    "end": "151620"
  },
  {
    "text": "- and when you call a new function like, let's say you say \"printf\" and then some parameters -",
    "start": "151620",
    "end": "156480"
  },
  {
    "text": "- that gets put on the end of the stack.",
    "start": "156480",
    "end": "158200"
  },
  {
    "text": "So, the heap grows in this direction as you add memory, and the stack grows in this direction.",
    "start": "158200",
    "end": "163540"
  },
  {
    "text": "Now that I've laid that out, we won't talk about it any more; we'll just focus on the stack, because that's where a lot of these buffer overflows happen.",
    "start": "163540",
    "end": "171379"
  },
  {
    "text": "You can have overflows in other areas, but we're not going to be dealing with them today.",
    "start": "171380",
    "end": "174220"
  },
  {
    "text": "I'm going to turn this sideways, because I think it's a little bit easier to understand. At least that's how I tend to look at it.",
    "start": "174220",
    "end": "180520"
  },
  {
    "text": "This is our memory again, nice and big. This is now our stack area (excuse my programmer's writing).",
    "start": "181860",
    "end": "187560"
  },
  {
    "text": "Up here we have the high memory addresses (0xff...) So, something up here is high...",
    "start": "187680",
    "end": "192959"
  },
  {
    "text": "... and this is 0x000. Now, of course, the stack won't be taking up this whole region but it doesn't matter.",
    "start": "192960",
    "end": "198480"
  },
  {
    "text": "So, there are high memory addresses and low memory addresses.",
    "start": "198480",
    "end": "200780"
  },
  {
    "text": "And the stack grows downwards, so when we add something onto the end of the stack it gets put on this side and moves in this direction.",
    "start": "200780",
    "end": "207760"
  },
  {
    "text": "Of course, I'm talking about a stack without telling you what a stack is.",
    "start": "207760",
    "end": "210200"
  },
  {
    "text": "Professor Brailsford has already talked about this and has probably done a much better job of explaining it than I would!",
    "start": "210200",
    "end": "213760"
  },
  {
    "text": "Brailsford: There's a lot of computer science that depends on stacks. I sometimes think stacks and trees are just about all computer science is about.",
    "start": "213820",
    "end": "221120"
  },
  {
    "text": "So we'll just say that you know how a stack works and then we'll move on!",
    "start": "221120",
    "end": "224739"
  },
  {
    "text": "We have some programme that's calling a function. A function is some area of code that does something and then returns back to where it was before.",
    "start": "224740",
    "end": "231420"
  },
  {
    "text": "So, this is our calling function here..",
    "start": "231420",
    "end": "233720"
  },
  {
    "text": "When the calling function wants to make use of something, it adds its parameters that it's passing onto the stack.",
    "start": "233720",
    "end": "240260"
  },
  {
    "text": "This will be parameter A and this will be parameter B, and they will be added into the stack in reverse order.",
    "start": "240260",
    "end": "246200"
  },
  {
    "text": "And then the Assembler code for this function will make something called a \"call\" -",
    "start": "246200",
    "end": "249940"
  },
  {
    "text": "- and that will jump to somewhere else in memory and work with these two things.",
    "start": "249940",
    "end": "253860"
  },
  {
    "text": "And it's the nature of this stack that causes us to have problems.",
    "start": "253860",
    "end": "257100"
  },
  {
    "text": "Let's look at some code and then we'll see how it works.",
    "start": "257100",
    "end": "259840"
  },
  {
    "text": "I've got myself here a program that isn't very good. I wrote it.",
    "start": "259840",
    "end": "263139"
  },
  {
    "text": "So, it's a piece of C code, so if we look at it...",
    "start": "263140",
    "end": "265260"
  },
  {
    "text": "It's a very simple C code that allocates some memory on the stack and then copies a string into it from the command line.",
    "start": "265260",
    "end": "271560"
  },
  {
    "text": "So up here we've got the main function for C that takes the number of parameters given and a pointer to those variables that you've got.",
    "start": "271560",
    "end": "280120"
  },
  {
    "text": "And they'll be held in kernel area of our memory.",
    "start": "280120",
    "end": "282380"
  },
  {
    "text": "We've allocated a buffer that's 500 characters long and then we call a function called \"string copy\" (strcopy) -",
    "start": "282380",
    "end": "288080"
  },
  {
    "text": "- which will copy our command line parameter from argv into our buffer.",
    "start": "288380",
    "end": "293100"
  },
  {
    "text": "Our function puts on a return address which is replacing the code we need to go back to once we've done strcopy.",
    "start": "293100",
    "end": "299160"
  },
  {
    "text": "So that's how main knows where to go after it's finished.",
    "start": "299160",
    "end": "302040"
  },
  {
    "text": "And then we put on a reference to the base pointer in our previous function. We won't worry about that too much because it's not relevant particularly to this video.",
    "start": "302040",
    "end": "309700"
  },
  {
    "text": "This is just going to be our EBP base pointer.",
    "start": "309700",
    "end": "312580"
  },
  {
    "text": "This is our allocated space for our buffer, and it's 500 long.",
    "start": "312580",
    "end": "316659"
  },
  {
    "text": "If we write into it something that's longer than 500, we're going to go straight past the buffer, over this, and crucially over our return variable.",
    "start": "316660",
    "end": "325220"
  },
  {
    "text": "And that's where we point back to something we shouldn't be doing.",
    "start": "325220",
    "end": "328640"
  },
  {
    "text": "What I'm going to do is walk through it in the code and then let's see if it works.",
    "start": "329620",
    "end": "334820"
  },
  {
    "text": "So this is my Kali Linux distribution, which has all kinds of slightly dubious password cracking tools and other penetration testing tools.",
    "start": "334820",
    "end": "341780"
  },
  {
    "text": "It's meant for ethical hacking, let's just make that clear!",
    "start": "341780",
    "end": "343340"
  },
  {
    "text": "I've written here a small function that does our copy from the command line.",
    "start": "343340",
    "end": "347740"
  },
  {
    "text": "Now I've compiled it and I can run it. So I can run my vulnerable code with \"Hello\".",
    "start": "347740",
    "end": "352039"
  },
  {
    "text": "And that will copy \"Hello\" into this buffer and then simply return, so nothing happens.",
    "start": "352040",
    "end": "356200"
  },
  {
    "text": "It's the most boring programme ever!",
    "start": "356200",
    "end": "357920"
  },
  {
    "text": "[Sean Riley offscreen] Another program might do something like copy \"Hello\" in there and now it's in the buffer they can go off and process it?",
    "start": "357920",
    "end": "363380"
  },
  {
    "text": "Yeah, I mean maybe you've got a function that makes things all uppercase.",
    "start": "363380",
    "end": "366520"
  },
  {
    "text": "So you copy \"Hello\" off and then you change this new copy to be all uppercase, and then you output it to the screen.",
    "start": "366520",
    "end": "371460"
  },
  {
    "text": "And this doesn't have to be \"main()\", this could be any function.",
    "start": "371460",
    "end": "374000"
  },
  {
    "text": "We're going to run something called GDB, which is the Linux command line debugger.",
    "start": "374100",
    "end": "378280"
  },
  {
    "text": "Erm...",
    "start": "378360",
    "end": "379259"
  },
  {
    "text": "I wouldn't advice using GDB unless you really like seeing lots of Assembly and doing really low-level Linux things.",
    "start": "379700",
    "end": "384640"
  },
  {
    "text": "[Sean Riley offscreen] There's a lot of text on the screen now so we don't have to worry about - [cut off]",
    "start": "384640",
    "end": "386900"
  },
  {
    "text": "No, this text here is just warranty information.",
    "start": "386900",
    "end": "389300"
  },
  {
    "text": "So now I'm going to type in \"list\" -",
    "start": "389300",
    "end": "392099"
  },
  {
    "text": "- and it shows use the code for our function. So we can see it's just a compiled function.",
    "start": "392100",
    "end": "397020"
  },
  {
    "text": "It knows this because the compiler included this information along with the executable.",
    "start": "397140",
    "end": "401080"
  },
  {
    "text": "We can also show the machine code for this so we can say \"disas main\" and we can see the code for \"main()\".",
    "start": "401220",
    "end": "407760"
  },
  {
    "text": "[Sean Riley offscreen] So they're the instructions that would actually go to the CPU?",
    "start": "407760",
    "end": "410240"
  },
  {
    "text": "These are the actual CPU instructions that will be run.",
    "start": "410240",
    "end": "412819"
  },
  {
    "text": "Now we won't dwell on much of this, because Assembly is perhaps a whole series of talks by someone other than me!",
    "start": "412820",
    "end": "418560"
  },
  {
    "text": "Steve Bagley knows a lot about Assembler.",
    "start": "418560",
    "end": "420180"
  },
  {
    "text": "However, a couple of really important things are:",
    "start": "420180",
    "end": "422660"
  },
  {
    "text": "This line here, sub of 0x1f4 from %esp, that's allocating the 500 for the buffer.",
    "start": "422660",
    "end": "429320"
  },
  {
    "text": "That is we're here and we go 500 in this direction and that's where our buffer goes.",
    "start": "429320",
    "end": "433020"
  },
  {
    "text": "So buffer's sitting to the left in this image but is lower in memory than the rest of our variables.",
    "start": "433020",
    "end": "437979"
  },
  {
    "text": "Now...",
    "start": "438420",
    "end": "438920"
  },
  {
    "text": "We can run this programme from GDB- and if it crashes, we can look at the registers and find out what's happened",
    "start": "439260",
    "end": "445480"
  },
  {
    "text": "So we can say \"run Hello\" and it will start the programme and say \"Hello\".",
    "start": "445480",
    "end": "452100"
  },
  {
    "text": "And it's exited normally.",
    "start": "452100",
    "end": "453400"
  },
  {
    "text": "Now, we can pass something in a little bit longer than \"Hello\".",
    "start": "453400",
    "end": "456820"
  },
  {
    "text": "If we pass something that's over 500, then this buffer will go over this base pointer and this return value, and break the code.",
    "start": "456820",
    "end": "464380"
  },
  {
    "text": "[Sean Riley offscreen] So that will just crash your-",
    "start": "464380",
    "end": "465700"
  },
  {
    "text": "It should just crash it. Python, for example, can produce strings based on simple scripts on the command line",
    "start": "465700",
    "end": "471240"
  },
  {
    "text": "So what we do is we say \"run\" and then we pass it a Python script of print... 41 (that's the \"a\" character\"), let's say 506 times.",
    "start": "471240",
    "end": "482120"
  },
  {
    "text": "Just a little bit more than 500 so it's going to cause somewhat of a problem but not a catastrophe. [Chuckling] Okay?",
    "start": "482120",
    "end": "487340"
  },
  {
    "text": "And then we run that.",
    "start": "487340",
    "end": "488620"
  },
  {
    "text": "And it's received a segmentation fault. Now a segmentation fault is what a CPU will send back to you when you're trying to access something in memory you shouldn't be doing.",
    "start": "488620",
    "end": "496240"
  },
  {
    "text": "Now that's not actually happened because we overwrote somewhere we shouldn't; what's happened is the return address was half overwritten with these 41s.",
    "start": "496240",
    "end": "504400"
  },
  {
    "text": "[Sean Riley offscreen] So it doesn't know what it is?",
    "start": "504400",
    "end": "505300"
  },
  {
    "text": "Yeah, there is nothing in memory at 0xb7004141, and if there is, it doesn't belong to this process. It's not allowed, so it gets a segmentation fault.",
    "start": "505300",
    "end": "512839"
  },
  {
    "text": "So if we change this to 508, we're going two bytes further along, which means we're now overwriting the entirety of our return address.",
    "start": "512840",
    "end": "521200"
  },
  {
    "text": "We're overwriting this \"ret\" here with 41s. Now if there were some virus code at 414141, that's a big problem. So that's where we're going with this.",
    "start": "521200",
    "end": "531240"
  },
  {
    "text": "So we run this, and you can see the return address is now 0x414141.",
    "start": "531240",
    "end": "537500"
  },
  {
    "text": "I can actually show you the registers and you can see that the construction pointer is now trying to point to 0x414141.",
    "start": "537580",
    "end": "544580"
  },
  {
    "text": "So that means that it's read this return value and tried to return to that place in the code and run it, and of course it can't.",
    "start": "544580",
    "end": "551120"
  },
  {
    "text": "Now we can have a little bit more fun. We've broken our code, what can we do now?",
    "start": "551120",
    "end": "555920"
  },
  {
    "text": "Well, what we need to do is change this return value to somewhere where we've got some payload we're trying to give- we're trying to produce. Okay?",
    "start": "555920",
    "end": "563060"
  },
  {
    "text": "So luckily, if I quit this debugger, I have some pre-prepared payload just for this occassion!",
    "start": "563060",
    "end": "570279"
  },
  {
    "text": "Now in fact this payload is just a simple, very short programme in Assembler, that puts some variables on the stack and then executes a system call to tell it to run a shell -",
    "start": "570280",
    "end": "580680"
  },
  {
    "text": "- to run a new command line.",
    "start": "580680",
    "end": "583260"
  },
  {
    "text": "If I show this code, our shell code, this code will depend on the Linux operating system and whether you're using an Intel CPU or something else.",
    "start": "583260",
    "end": "592520"
  },
  {
    "text": "This is just a string of different commands. Crucially, this xcd / x80 is throwing a system interrupt, which means that it's going to run the system call.",
    "start": "592520",
    "end": "602640"
  },
  {
    "text": "That's all we're going to do about this. What this will actually do is run something called ZSH, which is an old shell that doesn't have a lot of protections involved.",
    "start": "602640",
    "end": "610700"
  },
  {
    "text": "Let's go back to our debugger.",
    "start": "610700",
    "end": "612980"
  },
  {
    "text": "And... we're going to run again but this time we're going to run a slightly more malicious piece of code.",
    "start": "612980",
    "end": "619720"
  },
  {
    "text": "We're going to put in our \\x41s timesed by 508 - and then we're going to put in our shell code. There we go, okay?",
    "start": "619720",
    "end": "629639"
  },
  {
    "text": "So now we're doing all 41s and then a bunch of malicious code. Now that's actually too long; we've gone too far. But we'll fix that in a minute, okay?",
    "start": "629640",
    "end": "637740"
  },
  {
    "text": "And finally, the last thing we want to add in is our return address, which we'll customise in a moment.",
    "start": "637740",
    "end": "643560"
  },
  {
    "text": "To craft an exploit from this, what we need to do is remember the fact that strcopy is going to copy into our buffer.",
    "start": "643560",
    "end": "649840"
  },
  {
    "text": "So we're going to start here. We want to overwrite the memory of this return address with somewhere pointing to our malicious code.",
    "start": "649840",
    "end": "659540"
  },
  {
    "text": "Now, we can't necessarily know for sure where our malicious code might be stored elsewhere on the disc, so we don't worry about that or memory.",
    "start": "659540",
    "end": "665800"
  },
  {
    "text": "We want to put it in this buffer. So we're going to put some malicious code in here and then we're going to have a return address that points back into it.",
    "start": "665800",
    "end": "671640"
  },
  {
    "text": "Okay... now...",
    "start": "671640",
    "end": "673220"
  },
  {
    "text": "Memory moves around slightly. When you run these programmes, things change slightly, environment variables are added and removed, things move around.",
    "start": "673220",
    "end": "681360"
  },
  {
    "text": "So, we want to try and hedge our bets and get the rough area that this will go in.",
    "start": "681360",
    "end": "684820"
  },
  {
    "text": "In here, we put in something called a No-Op sled. Or, y'know, there's various other words for it.",
    "start": "684820",
    "end": "690500"
  },
  {
    "text": "So this is simply \\x90. That is a machine instruction for \"just move to the next one\". So that's good.",
    "start": "690500",
    "end": "697780"
  },
  {
    "text": "Anywhere we land in that No-Op is going to tick along to our malicious code.",
    "start": "697780",
    "end": "701940"
  },
  {
    "text": "So we have a load of \\x90s here... then we have our shell code, right?",
    "start": "701940",
    "end": "708820"
  },
  {
    "text": "That's our malicious payload that runs our shell.",
    "start": "708820",
    "end": "711400"
  },
  {
    "text": "And then we have the return address, right in the right place, that points back right smack in the middle of these \\x90s.",
    "start": "711400",
    "end": "718220"
  },
  {
    "text": "And what that means is, even if these move a bit, it'll still work.",
    "start": "718220",
    "end": "720800"
  },
  {
    "text": "[Sean Riley offscreen] So it's like having a slope almost, is it?",
    "start": "720800",
    "end": "723019"
  },
  {
    "text": "It's exactly like that, yes. Anywhere where we land in here is going to cause a real problem for the computer-",
    "start": "723020",
    "end": "726300"
  },
  {
    "text": "[Sean Riley offscreen] So we've got our bomb, or our... I dunno... pit of lava [laughs]",
    "start": "726300",
    "end": "731220"
  },
  {
    "text": "Yep, it's a Sarlacc pit isn't it and your No-Op sled takes you in and you get digested over 10,000 years or whatever it is.",
    "start": "731220",
    "end": "737839"
  },
  {
    "text": "So we've got three things we need to do. We need to put in some \\x90s, we need to put in our shell code, which I've already got, and we need to put in our return address.",
    "start": "737840",
    "end": "745360"
  },
  {
    "text": "Worry about the return address last, okay? So...",
    "start": "745360",
    "end": "748500"
  },
  {
    "text": "If we go back to my code: we change the first \\x41s that we were putting in, and we change to 90. We're putting in a load of No-Op operations.",
    "start": "748500",
    "end": "757160"
  },
  {
    "text": "Then we've got our shell code and then we've got what will eventually be our return address.",
    "start": "757160",
    "end": "761980"
  },
  {
    "text": "And we'll put in 10 of those because it's just to have a little bit of padding between our shell code and our stack that's moving about.",
    "start": "761980",
    "end": "768620"
  },
  {
    "text": "This 508 here, people will have noticed, now this is too big, because we're putting in extra information.",
    "start": "768620",
    "end": "774560"
  },
  {
    "text": "So, if we write 508 bytes, it goes exactly where we want: over our return address.",
    "start": "774560",
    "end": "779540"
  },
  {
    "text": "But we've now got 43 bytes of shell code and we've got 40 bytes of return address.",
    "start": "779540",
    "end": "786519"
  },
  {
    "text": "So... -40... -43... is 425. We'll change this 508 to 425, and so now this exploit here that we're looking at is exactly what I hoped it would be here.",
    "start": "786520",
    "end": "801740"
  },
  {
    "text": "Some \\x90 no operation sleds, the shell code and then we've got our return address, which is 10 times four bytes.",
    "start": "801740",
    "end": "808720"
  },
  {
    "text": "We run this and we've got a segmentation fault, which is exactly what we hoped we'd get because our return address hasn't been changed yet.",
    "start": "808720",
    "end": "815040"
  },
  {
    "text": "So now let's look at our memory and work out where our return address should go.",
    "start": "815040",
    "end": "818560"
  },
  {
    "text": "So in GDB, it's paused the programme after the segmentation fault, so we can say \"list the registers\", let's say about 200 of them, at the stack point of -550.",
    "start": "818560",
    "end": "831120"
  },
  {
    "text": "So that's going to be right at the beginning of our buffer. And what we're seeing here is a load of 90s in a row.",
    "start": "831120",
    "end": "836839"
  },
  {
    "text": "So we just need to pick a memory address right in the middle of them, so let's pick this one, let's say 0xbffffaba -",
    "start": "836840",
    "end": "843800"
  },
  {
    "text": "- and write that down so I don't forget it.",
    "start": "843800",
    "end": "846540"
  },
  {
    "text": "Now, there's a nice quirk in this, which is that Intel CPUs are little ednian, which means I have to put it in backwards.",
    "start": "846540",
    "end": "853000"
  },
  {
    "text": "It's yet more things we have to learn, but it's fine!",
    "start": "853000",
    "end": "854700"
  },
  {
    "text": "b-f... f-f... f-a... Oops, put my caps-lock on... Can't type with people watching! Errrrm... and er, b-a.",
    "start": "854840",
    "end": "863640"
  },
  {
    "text": "Theoretically when I run this, what will happen is string copy will do its thing: it'll copy a string in.",
    "start": "865380",
    "end": "871380"
  },
  {
    "text": "And then, when it tries to return, it will load this return value and execute that instruction, which will be somewhere in this buffer.",
    "start": "871380",
    "end": "878400"
  },
  {
    "text": "Then it will read off and run our shell code, so we should get a shell.",
    "start": "878400",
    "end": "882820"
  },
  {
    "text": "Okay?",
    "start": "882820",
    "end": "883780"
  },
  {
    "text": "[tappity tappity]",
    "start": "883780",
    "end": "884520"
  },
  {
    "text": "And we did!",
    "start": "885140",
    "end": "887060"
  },
  {
    "text": "So that's a good start, right? We know our program works. Albeit in a debugger with very little side effect.",
    "start": "887060",
    "end": "893000"
  },
  {
    "text": "The question now is: can I take this and use it on a command line to gain access to this machine?",
    "start": "893000",
    "end": "897840"
  },
  {
    "text": "Now...",
    "start": "897840",
    "end": "899400"
  },
  {
    "text": "Linux has quite restrictive policies on what can and can't be done from certain programmes, but some programmes, such as changing your password, are run using something called SUID.",
    "start": "899400",
    "end": "909300"
  },
  {
    "text": "So what that means is that, for the sake of running that programme, you have complete root access to that machine.",
    "start": "909300",
    "end": "916300"
  },
  {
    "text": "Because otherwise, how could you change the password file? You're not normally allowed to even read it.",
    "start": "916300",
    "end": "921220"
  },
  {
    "text": "The shadow file. So...",
    "start": "921220",
    "end": "922879"
  },
  {
    "text": "If you find a vulnerability in that kind of programme, and there's more than I think there should be, then that's when there's a real problem.",
    "start": "922920",
    "end": "929920"
  },
  {
    "text": "Now obviously these vulnerabilities are getting rarer, but it's catastrophic if you get one.",
    "start": "929920",
    "end": "934660"
  },
  {
    "text": "So, let's leave this debugger and back to our nice clear command line environment.",
    "start": "934660",
    "end": "941519"
  },
  {
    "text": "If I list the files we've got, this vulnerable programme here is shown in red, that shows that it's SUID root.",
    "start": "941520",
    "end": "947040"
  },
  {
    "text": "Which means that when we run it, it will be running as root, which is not great for security.",
    "start": "947040",
    "end": "952440"
  },
  {
    "text": "That and my shoddy programming, which means it's vulnerable to a buffer overflow.",
    "start": "952440",
    "end": "955800"
  },
  {
    "text": "So, if I copy my exploit... here we go, this is a big moment of truth, where this whole video is going to work.",
    "start": "955800",
    "end": "962000"
  },
  {
    "text": "I've put my code in just like it was in the debugger. I've tried to make it exactly the same so that the memory doesn't move around.",
    "start": "962000",
    "end": "967260"
  },
  {
    "text": "Let's just say \"whoami\" on Linux, so we can see I am myself. I don't have root access.",
    "start": "967260",
    "end": "972400"
  },
  {
    "text": "So can I, for example, look at the password file? So I can say \"cat /etc/shadow\".",
    "start": "972400",
    "end": "978100"
  },
  {
    "text": "\"Permission denied\". No dice, okay. Fair enough. I'm not supposed to be looking at that.",
    "start": "978100",
    "end": "982779"
  },
  {
    "text": "Now I'm on my exploit, so \"./envexec\", then my vulnerability, with the right address... now we've got a shell.",
    "start": "982780",
    "end": "989320"
  },
  {
    "text": "\"whoami\"?",
    "start": "989320",
    "end": "991120"
  },
  {
    "text": "Root.",
    "start": "991120",
    "end": "992500"
  },
  {
    "text": "So now can I look at my shadow file? [Sean Riley offscreen] So root is like God for this system?",
    "start": "992500",
    "end": "996700"
  },
  {
    "text": "In Linux, there is nothing you can't do with root.",
    "start": "996700",
    "end": "999660"
  },
  {
    "text": "So I've got my root shell and I'm root, so I can \"cat /etc/shadow\", and I can see what's in the shadow file.",
    "start": "999660",
    "end": "1005420"
  },
  {
    "text": "But the point is that there's nothing I can't do now, I can wipe the machine, or do anything like that myself.",
    "start": "1005420",
    "end": "1009260"
  },
  {
    "text": "And then I can quit this and then my programme just gracefully exits. Because it now returns to normal code.",
    "start": "1009260",
    "end": "1015720"
  },
  {
    "text": "And, hopefully, no-one is any the wiser that anything's gone on.",
    "start": "1015720",
    "end": "1018699"
  },
  {
    "text": "Now there are things that the operating system does to try and stop this from happening: randomising your memory layout and no executing of stacks and stuff.",
    "start": "1018700",
    "end": "1028319"
  },
  {
    "text": "There are ways around this; they're obviously for a different video.",
    "start": "1028320",
    "end": "1031880"
  },
  {
    "text": "But... at least things are getting definitely better.",
    "start": "1031880",
    "end": "1034060"
  }
]