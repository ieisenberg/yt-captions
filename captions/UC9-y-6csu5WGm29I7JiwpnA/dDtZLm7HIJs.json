[
  {
    "text": "Today we're going to do some more\nlive coding, and we're going to talk",
    "start": "0",
    "end": "3780"
  },
  {
    "text": "about something which is quite close to\nmy heart, because I wrote some of the",
    "start": "3780",
    "end": "6930"
  },
  {
    "text": "early papers on it many years ago, and\nthat's something called functional",
    "start": "6930",
    "end": "10230"
  },
  {
    "text": "parsing, or combinator parsing. Before\nwe get started with actual live coding, I",
    "start": "10230",
    "end": "17789"
  },
  {
    "text": "want to begin with the question. And the\nquestion is: what actually is a parser?",
    "start": "17789",
    "end": "22769"
  },
  {
    "text": "So for me a parser is a program which takes\na string of characters as its input, and",
    "start": "22769",
    "end": "27990"
  },
  {
    "text": "as its output produces some form of tree.\nAnd the idea is that the tree makes",
    "start": "27990",
    "end": "33300"
  },
  {
    "text": "explicit the structure in the input\nstring. So that's a bit of a mouthful, so",
    "start": "33300",
    "end": "37680"
  },
  {
    "text": "let's have a simple example to explain\nwhat's going on with this. So what we've",
    "start": "37680",
    "end": "41670"
  },
  {
    "text": "got here is we've got a string of five\ncharacters -- 2 plus 3 times 4 -- and",
    "start": "41670",
    "end": "46050"
  },
  {
    "text": "that's our input string. But when we look\nat this we know that that's not just a",
    "start": "46050",
    "end": "49620"
  },
  {
    "text": "random sequence of five characters, it's\nactually got some structure to it. So in",
    "start": "49620",
    "end": "53670"
  },
  {
    "text": "particular, we've got three numbers\nhere -- 2, 3 and 4 -- and we've got two ",
    "start": "53670",
    "end": "58198"
  },
  {
    "text": "arithmetic operators -- we've got the plus\nand the times -- and one of the things we",
    "start": "58199",
    "end": "62340"
  },
  {
    "text": "learn at school is that the times happens\nbefore the plus. So you really do 3 times 4",
    "start": "62340",
    "end": "66600"
  },
  {
    "text": "here, and then you add the 2 on at the\nend. So that's our input string.",
    "start": "66600",
    "end": "70770"
  },
  {
    "text": "So what a parser does, is it takes a string\nof characters -- like that -- and it",
    "start": "70770",
    "end": "75000"
  },
  {
    "text": "tries to recognize the structure in the\nform of a tree. And the tree we would get",
    "start": "75000",
    "end": "79798"
  },
  {
    "text": "from a parser is something like this\nhere. And you see we've got some leaves",
    "start": "79799",
    "end": "83580"
  },
  {
    "text": "in the tree -- the leaves are the numbers\n2, 3 and 4 -- and the nodes in the",
    "start": "83580",
    "end": "87869"
  },
  {
    "text": "tree are the two arithmetic operators --\nthat's the plus symbol and the times",
    "start": "87869",
    "end": "91740"
  },
  {
    "text": "symbol -- and you can see the structure\nof the tree reflects the fact that we do",
    "start": "91740",
    "end": "95340"
  },
  {
    "text": "the multiplication. First we\nmultiply 3 by 4, and then we do the",
    "start": "95340",
    "end": "99719"
  },
  {
    "text": "addition second. So that's the basic idea\nof what a parser is: it takes as input a",
    "start": "99720",
    "end": "104460"
  },
  {
    "text": "string of characters, and as output it\nproduces a tree. So it's really a",
    "start": "104460",
    "end": "108630"
  },
  {
    "text": "function -- it's taking as input a string\nand as output as a tree. So we've seen",
    "start": "108630",
    "end": "113490"
  },
  {
    "text": "what a parser is. It's a function that\ntakes a string as an input and produces",
    "start": "113490",
    "end": "117090"
  },
  {
    "text": "a tree as an output. So now we want to\nthink how can we actually implement this:",
    "start": "117090",
    "end": "121289"
  },
  {
    "text": "how can we implement the idea of a parser?\nAnd I'm going to do this in Haskell",
    "start": "121290",
    "end": "124890"
  },
  {
    "text": "today, but it doesn't matter if you don't\nknow anything about Haskell because",
    "start": "124890",
    "end": "127439"
  },
  {
    "text": "I'll be explaining everything as I go\nalong. And actually, nothing I'm going",
    "start": "127439",
    "end": "130679"
  },
  {
    "text": "to show you today is specific\nto a language like Haskell.",
    "start": "130679",
    "end": "133170"
  },
  {
    "text": "You can do it in any general-purpose\nprogramming language. So if you do a web",
    "start": "133170",
    "end": "136830"
  },
  {
    "text": "search for a 'combinator parsing' or\n'functional parsing', and then whichever",
    "start": "136830",
    "end": "140670"
  },
  {
    "text": "language you're interested in, you'll\nfind the same kind of stuff which I'm",
    "start": "140670",
    "end": "143670"
  },
  {
    "text": "going to show you today. So it's not\nspecific to the Haskell setting. So",
    "start": "143670",
    "end": "146580"
  },
  {
    "text": "what we're going to do then first, is\nwe're going to define precisely, in our",
    "start": "146580",
    "end": "150959"
  },
  {
    "text": "programming language, what it means to be\na parser. We're going to define a new",
    "start": "150959",
    "end": "154440"
  },
  {
    "text": "type called Parser, and it's simply going\nto be a function which takes a string as",
    "start": "154440",
    "end": "158880"
  },
  {
    "text": "an input and produces a tree as an\noutput. So it captures the very simple",
    "start": "158880",
    "end": "163319"
  },
  {
    "text": "idea of what we are wanting to do -- a\nparser is a function that takes a string",
    "start": "163319",
    "end": "167370"
  },
  {
    "text": "as an input, and gives the tree as an\noutput, and the arrow here just means",
    "start": "167370",
    "end": "171030"
  },
  {
    "text": "that we have a function from one thing\ninto the other. So this captures the",
    "start": "171030",
    "end": "175440"
  },
  {
    "text": "basic idea of what a parser is. But\nunfortunately, it's not sufficient to",
    "start": "175440",
    "end": "180150"
  },
  {
    "text": "program with. We need to refine this a\nlittle bit to actually write programs",
    "start": "180150",
    "end": "184140"
  },
  {
    "text": "with this. So the first little refinement\nwe're going to make is that a parser",
    "start": "184140",
    "end": "188850"
  },
  {
    "text": "might not consume all of its input. So\nfor example, if we're trying to parse a",
    "start": "188850",
    "end": "193080"
  },
  {
    "text": "number, like 2, we maybe we find the 2,\nand then maybe we've got some more stuff",
    "start": "193080",
    "end": "197069"
  },
  {
    "text": "left in the input string that we need to\nparse. And if we want to chain parsers",
    "start": "197069",
    "end": "201329"
  },
  {
    "text": "together, we're going to need to have\naccess to the remaining input string",
    "start": "201329",
    "end": "204720"
  },
  {
    "text": "that we didn't manage to consume. So the\nfirst little refinement that we'll make",
    "start": "204720",
    "end": "208200"
  },
  {
    "text": "is rather than just returning a single\ntree, we're actually going to return a",
    "start": "208200",
    "end": "213720"
  },
  {
    "text": "pair now. We're going to return two\nthings -- we're going to return a tree as",
    "start": "213720",
    "end": "217200"
  },
  {
    "text": "before, and we're also going to return\nthe unconsumed part of the input string.",
    "start": "217200",
    "end": "222720"
  },
  {
    "text": "So that's the first refinement we've\nmade. The second refinement we're going",
    "start": "222720",
    "end": "226739"
  },
  {
    "text": "to make is that a parser may not always\nsucceed. We may be trying to parse a",
    "start": "226739",
    "end": "231000"
  },
  {
    "text": "number, and we don't find the number, we\nfind something else. So we need to have a",
    "start": "231000",
    "end": "234690"
  },
  {
    "text": "way of representing that a parser can fail.\nSo the way we're going to do that, is",
    "start": "234690",
    "end": "239010"
  },
  {
    "text": "we're actually going to make a parser\nreturn a list of results, rather than a",
    "start": "239010",
    "end": "245819"
  },
  {
    "text": "single result. So lists in Haskell are\ndenoted using square brackets. So this",
    "start": "245819",
    "end": "250170"
  },
  {
    "text": "simply means that rather than returning\none pair of results, we could return zero,",
    "start": "250170",
    "end": "254609"
  },
  {
    "text": "or one, or two, or as many as we like. And\nthe idea is going to be if our parser can't",
    "start": "254609",
    "end": "260130"
  },
  {
    "text": "parse, so it doesn't succeed, we'll return\nan empty list of results. And if it does",
    "start": "260130",
    "end": "264780"
  },
  {
    "text": "succeed, we'll return a list with\none pair -- we'll return a tree,",
    "start": "264780",
    "end": "268110"
  },
  {
    "text": "that represents the structure of the\ninput string, and we'll return the",
    "start": "268110",
    "end": "271349"
  },
  {
    "text": "unconsumed part of the input.  But\nbecause we're working with lists here,",
    "start": "271350",
    "end": "275069"
  },
  {
    "text": "we could actually be more flexible.  We\ncould return two, three, or four, or five,",
    "start": "275069",
    "end": "278849"
  },
  {
    "text": "or as many as we like parses. And this\nis actually quite a good flexibility,",
    "start": "278849",
    "end": "282389"
  },
  {
    "text": "because for some languages the input\nstring may be ambiguous -- maybe we're",
    "start": "282389",
    "end": "287310"
  },
  {
    "text": "trying to parse English, and English\nsentences don't always have one parse,",
    "start": "287310",
    "end": "290910"
  },
  {
    "text": "they can be interpreted in many ways.\nSo this type here is giving us a",
    "start": "290910",
    "end": "294539"
  },
  {
    "text": "flexibility to return many results if we\nwanted. We're not actually going to use",
    "start": "294539",
    "end": "298650"
  },
  {
    "text": "that flexibility today, but it's nice to\nactually have it. So I haven't told you",
    "start": "298650",
    "end": "302460"
  },
  {
    "text": "what the tree data type is here. And\nthat's because I'm actually going to get",
    "start": "302460",
    "end": "305729"
  },
  {
    "text": "rid of that now. Sometimes you may want\nto return a number, or a program, or some",
    "start": "305729",
    "end": "310080"
  },
  {
    "text": "kind of other structure. So we're going\nto replace that specific type of trees",
    "start": "310080",
    "end": "313500"
  },
  {
    "text": "by some arbitrary type 'a'. And I'll make\nthis a parameter of my type. This is our",
    "start": "313500",
    "end": "318389"
  },
  {
    "text": "final type, which we're going to work\nwith today. What we're saying is that a",
    "start": "318389",
    "end": "321630"
  },
  {
    "text": "parser whose results have type 'a' is\nsimply a function which takes a string",
    "start": "321630",
    "end": "326520"
  },
  {
    "text": "as an input, and then it gives a list of\nresults. And each result is a pair",
    "start": "326520",
    "end": "331129"
  },
  {
    "text": "comprising a single value of type 'a'\n-- maybe a tree, maybe a number, maybe",
    "start": "331130",
    "end": "335610"
  },
  {
    "text": "something else -- and then an unconsumed\npart of the input string. Okay, so this is",
    "start": "335610",
    "end": "340138"
  },
  {
    "text": "our final type. And if you look in any of\nthe articles, or books, about these kind",
    "start": "340139",
    "end": "343740"
  },
  {
    "text": "of parser combinators, or functional\nparsers, you'll find a type very",
    "start": "343740",
    "end": "347130"
  },
  {
    "text": "similar to this there. It's quite a\nmouthful again, so let's think about how",
    "start": "347130",
    "end": "351000"
  },
  {
    "text": "we could understand this in a simpler\nway. And actually, we can write a little",
    "start": "351000",
    "end": "354090"
  },
  {
    "text": "rhyme to understand what's going on with\nthis type. So let me write the rhyme out",
    "start": "354090",
    "end": "358110"
  },
  {
    "text": "for you as a comment. So what we can say\nis: a parser for things, is a function",
    "start": "358110",
    "end": "364138"
  },
  {
    "text": "from strings, to lists of pairs, of things\nand strings. This is a little Dr. Seuss",
    "start": "364139",
    "end": "372090"
  },
  {
    "text": "rhyme to tell you what a parser is, or\nwhat a functional parser is. And that's",
    "start": "372090",
    "end": "375659"
  },
  {
    "text": "actually how I remember this type. So\nthat's our basic type now. We've seen so",
    "start": "375659",
    "end": "379919"
  },
  {
    "text": "far, a parser is basically a function\nfrom strings to trees, but in order to",
    "start": "379919",
    "end": "384000"
  },
  {
    "text": "actually program with these kind of\nthings, we need to refine the type a",
    "start": "384000",
    "end": "386969"
  },
  {
    "text": "little bit. And this is the type we'll be\nworking with today. But you don't need to",
    "start": "386969",
    "end": "390419"
  },
  {
    "text": "worry about the details of it. Just\nbasically think it's a function from",
    "start": "390419",
    "end": "393090"
  },
  {
    "text": "strings into trees, or some other kind of\nstructure. What we're going to do now,",
    "start": "393090",
    "end": "397139"
  },
  {
    "text": "is we're going to load up the\nparsing library. So I'll start up",
    "start": "397139",
    "end": "401389"
  },
  {
    "text": "the compiler. This is a library, which\ncontains a whole bunch of parsing stuff,",
    "start": "401389",
    "end": "405379"
  },
  {
    "text": "which allows us to program with parsers of\nthis form. And this is a parsing library I",
    "start": "405379",
    "end": "409699"
  },
  {
    "text": "wrote myself. I'll see if I can get Sean\nto upload it as part of the video.",
    "start": "409699",
    "end": "413300"
  },
  {
    "text": "A parsing library comes with any\nprogramming language you can think off.",
    "start": "413300",
    "end": "416300"
  },
  {
    "text": "And again, if you just search for parser\ncombinators, functional parsing, ",
    "start": "416300",
    "end": "419240"
  },
  {
    "text": "whichever language you like, you'll find\nthe library, which gives you all sorts of",
    "start": "419240",
    "end": "423020"
  },
  {
    "text": "basic ways of building parsers. And\nthat's what I'm going to show you now.",
    "start": "423020",
    "end": "426319"
  },
  {
    "text": "All of these libraries work in the same\nway. So you have some basic primitives, or",
    "start": "426319",
    "end": "430189"
  },
  {
    "text": "basic building blocks, for parsers. And\nthen you have a way of combining parsers",
    "start": "430189",
    "end": "434990"
  },
  {
    "text": "to build bigger parsers. So it's like a\nkind of Lego kit, or a construction kit.",
    "start": "434990",
    "end": "438620"
  },
  {
    "text": "You have some basic bricks that you can\ndo things with. And then you can put",
    "start": "438620",
    "end": "442370"
  },
  {
    "text": "those bricks, or components, or primitives,\ntogether in all sorts of different ways.",
    "start": "442370",
    "end": "446120"
  },
  {
    "text": "So I'm going to show you a few of the\nprimitives, and a few of the combining",
    "start": "446120",
    "end": "449599"
  },
  {
    "text": "forms. And then we'll do an example. The\nfirst primitive I want to show you is",
    "start": "449599",
    "end": "453349"
  },
  {
    "text": "very simple. It's just a way of parsing a\nsingle digit. So what the digit parser",
    "start": "453349",
    "end": "458689"
  },
  {
    "text": "does, is it takes a string of characters,\nand it tries to consume a single numeric",
    "start": "458689",
    "end": "464330"
  },
  {
    "text": "digit off the start of that string. And you\nmight think, well, what does 'parse' do",
    "start": "464330",
    "end": "468830"
  },
  {
    "text": "here? What parse does, is it takes a\nparser, which in this case is just digit,",
    "start": "468830",
    "end": "473629"
  },
  {
    "text": "and it takes an input string to that\nparser, and it just applies one to the",
    "start": "473629",
    "end": "477500"
  },
  {
    "text": "other. So of course, this parser here is\ngoing to succeed, because we do have a",
    "start": "477500",
    "end": "481219"
  },
  {
    "text": "digit at the start of the input string.\nSo we get exactly the expected result. ",
    "start": "481219",
    "end": "485810"
  },
  {
    "text": "We get a list with one pair. And the first\nthing in the pair is the actual digit. We",
    "start": "485810",
    "end": "490310"
  },
  {
    "text": "get the character '1'. And the second thing\nin the pair is the unconsumed part of",
    "start": "490310",
    "end": "495319"
  },
  {
    "text": "the input. And that's something we could\nthen try and parse subsequently with",
    "start": "495319",
    "end": "498379"
  },
  {
    "text": "another parser. We can test, does this\nthing fail properly? So, if I give it an",
    "start": "498379",
    "end": "503389"
  },
  {
    "text": "input string that doesn't have a single\ndigit at the start, then it's going to",
    "start": "503389",
    "end": "507050"
  },
  {
    "text": "fail. So if I give it the input string\n\"abc\", there's no digit at the beginning, so",
    "start": "507050",
    "end": "511159"
  },
  {
    "text": "we're just going to get the empty list\nof results. So I'll show you one more",
    "start": "511159",
    "end": "513890"
  },
  {
    "text": "quick primitive. If I parse a single\ncharacter, say an 'a', from that string, then ",
    "start": "513890",
    "end": "520120"
  },
  {
    "text": "that will do the right thing. If I parse\nsingle character 'a', and I didn't have an",
    "start": "520120",
    "end": "526220"
  },
  {
    "text": "'a' at the beginning, then it will fail.\nSo we've seen two basic parsing",
    "start": "526220",
    "end": "529579"
  },
  {
    "text": "primitives here -- we've\nseen a way of parsing a digit, ",
    "start": "529579",
    "end": "532149"
  },
  {
    "text": "a way of parsing a specific character,\nand we've seen that these things can",
    "start": "532150",
    "end": "535120"
  },
  {
    "text": "succeed or fail. And in the library, or in\nany of these libraries, there'll be a",
    "start": "535120",
    "end": "538870"
  },
  {
    "text": "bunch of these basic building blocks, or\nbasic bricks, or primitives, that you can",
    "start": "538870",
    "end": "543100"
  },
  {
    "text": "use to build up your parsers. Where\nthings get more interesting is when you",
    "start": "543100",
    "end": "546100"
  },
  {
    "text": "think how do you combine these kind of\nthings, how do you use these basic bricks",
    "start": "546100",
    "end": "549850"
  },
  {
    "text": "to build actually useful parsers? Let me\nshow you an example of this. So there's a",
    "start": "549850",
    "end": "554740"
  },
  {
    "text": "parsing combining form called 'some'. And\nwhat it does is it takes a parser as its",
    "start": "554740",
    "end": "559570"
  },
  {
    "text": "input, and it tries to apply it one or\nmore times, as many times as possible. So",
    "start": "559570",
    "end": "564339"
  },
  {
    "text": "if we're trying to parse 'some' digits,\nwhat we're trying to do is consume one",
    "start": "564339",
    "end": "568630"
  },
  {
    "text": "digit, then two, then three, and as many as\nwe can until we don't find any more",
    "start": "568630",
    "end": "572620"
  },
  {
    "text": "digits. So if we apply the 'some digit'\nparser to the string \"123\" then",
    "start": "572620",
    "end": "578110"
  },
  {
    "text": "it will do the expected thing. It will\nconsume all three of the digits, and then",
    "start": "578110",
    "end": "581980"
  },
  {
    "text": "we'll get the empty string left here. So\nthat's 'some', it gives us a form of",
    "start": "581980",
    "end": "586089"
  },
  {
    "text": "repetition. And we also have a very\nsimple way of making a choice as well.",
    "start": "586089",
    "end": "590620"
  },
  {
    "text": "So if I want to make a choice here,\nbetween a digit, and a letter. And let me",
    "start": "590620",
    "end": "598150"
  },
  {
    "text": "parse the string \"abc123\". So, what\nwe've got here, is this funny symbol",
    "start": "598150",
    "end": "604690"
  },
  {
    "text": "here -- with the three symbols -- that's a\nchoice operator. It says do that, or do",
    "start": "604690",
    "end": "608860"
  },
  {
    "text": "that. So if I try to parse a digit, or a\nletter, what it's going to try first is",
    "start": "608860",
    "end": "614440"
  },
  {
    "text": "it will take the first character in the\ninput string, and say is it a digit? If so,",
    "start": "614440",
    "end": "618100"
  },
  {
    "text": "I'll parse it. And if it's not a digit,\nthen I'll go over to the other side, and",
    "start": "618100",
    "end": "622060"
  },
  {
    "text": "say is it a letter? And I will try and\nparse that. You can see what's happening",
    "start": "622060",
    "end": "625570"
  },
  {
    "text": "with this particular example here -- if I\nlook at the first character, it's not a",
    "start": "625570",
    "end": "628600"
  },
  {
    "text": "digit, it's a letter. So when I apply the\ndigit parser it would fail, and then the",
    "start": "628600",
    "end": "632980"
  },
  {
    "text": "'or' operator, or the choice operator here,\nwill go over to the other side and say,",
    "start": "632980",
    "end": "636670"
  },
  {
    "text": "well, is it a letter instead? And of\ncourse it is, so we can parse the single",
    "start": "636670",
    "end": "640570"
  },
  {
    "text": "'a' off the front here, and then we\nget everything else as unconsumed.",
    "start": "640570",
    "end": "644950"
  },
  {
    "text": "And of course, if we wanted to be a bit\nmore clever we could combine some of",
    "start": "644950",
    "end": "648010"
  },
  {
    "text": "these things. So I could say, some digit\nor letter -- get my brackets right --",
    "start": "648010",
    "end": "655209"
  },
  {
    "text": "\"abc123\", and then that will parse\neverything. Because all I'm doing here is",
    "start": "655209",
    "end": "658390"
  },
  {
    "text": "I'm repeating, or iterating, the choice\nbetween either parsing a single digit, or",
    "start": "658390",
    "end": "662980"
  },
  {
    "text": "a single letter. And I've got a\nstring of digits and letters here,",
    "start": "662980",
    "end": "665920"
  },
  {
    "text": "so I can parse the whole thing. So I've\nconsumed them all. And then I get nothing",
    "start": "665920",
    "end": "669488"
  },
  {
    "text": "left at the end. So what we've seen so\nfar, is some basic building blocks, and",
    "start": "669489",
    "end": "673239"
  },
  {
    "text": "we've seen a couple of combining\nforms -- we've seen a way of doing",
    "start": "673239",
    "end": "675639"
  },
  {
    "text": "repetition, which is 'some', and we've seen\na way of making a choice, which is the",
    "start": "675639",
    "end": "679600"
  },
  {
    "text": "funny operator in the middle there. What\nI haven't shown you so far, is how to do",
    "start": "679600",
    "end": "683589"
  },
  {
    "text": "some form of sequencing. And this is the\nmost common thing you typically want to",
    "start": "683589",
    "end": "687279"
  },
  {
    "text": "do with parsers. You want to say do this,\nand then do that, and maybe do that as",
    "start": "687279",
    "end": "692350"
  },
  {
    "text": "well. You want to sequence things\ntogether. So I'll actually show you a bit",
    "start": "692350",
    "end": "695918"
  },
  {
    "text": "of the parsing library here. So here's\nthe parsing library. And I don't want to",
    "start": "695919",
    "end": "699429"
  },
  {
    "text": "go through all the details of this, but\none thing I want to know, is it's quite",
    "start": "699429",
    "end": "702369"
  },
  {
    "text": "short. If I kind of scroll down here, I\nthink it's about four and a half screen",
    "start": "702369",
    "end": "706419"
  },
  {
    "text": "fulls. And I've got quite a big font here,\nand this is actually already quite a",
    "start": "706419",
    "end": "709749"
  },
  {
    "text": "sophisticated parsing library. So it shows\nyou the power of this method, that you",
    "start": "709749",
    "end": "713410"
  },
  {
    "text": "don't need hundreds of lines of code to\nwrite parsers -- four and a half screen",
    "start": "713410",
    "end": "717009"
  },
  {
    "text": "fulls is a library which\nis fully fledged and you can",
    "start": "717009",
    "end": "719319"
  },
  {
    "text": "basically implement any parser\nthat you like using this. So I'll",
    "start": "719319",
    "end": "722649"
  },
  {
    "text": "show you a couple of examples of\nsequencing. The first example I want to",
    "start": "722649",
    "end": "726489"
  },
  {
    "text": "show you is a parser for natural numbers.\nSo what's a natural number? It's just a",
    "start": "726489",
    "end": "731439"
  },
  {
    "text": "non-negative integer, like 0, 1, 2, 3, or 10,\nor something like that. So you think how",
    "start": "731439",
    "end": "736509"
  },
  {
    "text": "do you parse a natural number? Well I'm\ngoing to use the sequencing notation for",
    "start": "736509",
    "end": "740980"
  },
  {
    "text": "parsers, which is to do notation. And the\ndo notation is very simple -- you write",
    "start": "740980",
    "end": "744759"
  },
  {
    "text": "the word 'do', and then you have a whole\nbunch of parsers one after the other, and",
    "start": "744759",
    "end": "748329"
  },
  {
    "text": "it just runs them each in sequence. So\nthe first thing here, is we're going to",
    "start": "748329",
    "end": "752199"
  },
  {
    "text": "parse 'some digits'. Because that's the\nbasics of what a natural number is -- it's",
    "start": "752199",
    "end": "756279"
  },
  {
    "text": "just some digits. And if that succeeds,\nI'm going to call all those digits 'xs'.",
    "start": "756279",
    "end": "760839"
  },
  {
    "text": "So 'xs' is just going to be a list of all\nthe digits. And then what I'm going to do",
    "start": "760839",
    "end": "764558"
  },
  {
    "text": "here to be a bit more flexible, probably\nwhen I parse a number I don't want a",
    "start": "764559",
    "end": "767949"
  },
  {
    "text": "string of characters back, I actually\nwant the number. So I'm going to pass the",
    "start": "767949",
    "end": "771699"
  },
  {
    "text": "string in to a little function called\n'read', which just converts the string into",
    "start": "771699",
    "end": "775569"
  },
  {
    "text": "a number. And then I'm going to simply\nreturn it. So the basic idea here is",
    "start": "775569",
    "end": "778748"
  },
  {
    "text": "we're sequencing two things together --\nwe're reading some digits, or parsing",
    "start": "778749",
    "end": "782499"
  },
  {
    "text": "some digits, and then we're translating\nthose into a normal number, and then",
    "start": "782499",
    "end": "786669"
  },
  {
    "text": "we're returning it. And we're sequencing\nthose things together using the 'do'",
    "start": "786669",
    "end": "790269"
  },
  {
    "text": "notation here. So just one more little\nexample, because we'll use this in a",
    "start": "790269",
    "end": "793720"
  },
  {
    "text": "minute. Here's how you could parse an\ninteger. So an integer is either a",
    "start": "793720",
    "end": "797949"
  },
  {
    "text": "negative number, or a\npositive number. So there's a",
    "start": "797949",
    "end": "800850"
  },
  {
    "text": "choice there. So we're going to use the\nchoice operator. So here's the 'or'",
    "start": "800850",
    "end": "804480"
  },
  {
    "text": "operator, which we've seen a few minutes\nago. And the two parts here just say -- have",
    "start": "804480",
    "end": "808920"
  },
  {
    "text": "we got a negative number, or have we got\na positive number? So the parser for a",
    "start": "808920",
    "end": "812639"
  },
  {
    "text": "negative number, we use the 'do' notation,\nbecause we need to do three things. ",
    "start": "812640",
    "end": "816750"
  },
  {
    "text": "So the three things are here. So if we're\ntrying to parse a negative number, the",
    "start": "816750",
    "end": "820560"
  },
  {
    "text": "first thing we do is we parse a minus\nsign. So we're using the 'char' primitive",
    "start": "820560",
    "end": "824850"
  },
  {
    "text": "that we saw previously -- that will parse a\nminus sign. Then we're going to parse a",
    "start": "824850",
    "end": "829170"
  },
  {
    "text": "number, and call it 'n'. And then we\nneed to remember that we need to make it",
    "start": "829170",
    "end": "833220"
  },
  {
    "text": "negative, so we negate it and then we\nreturn it. So again here, we're just using",
    "start": "833220",
    "end": "837810"
  },
  {
    "text": "the simple idea of sequencing three\nparsers, one after the other. And then the",
    "start": "837810",
    "end": "842160"
  },
  {
    "text": "'or' here says, or we can just have a\nsimple natural number. Okay so this",
    "start": "842160",
    "end": "845940"
  },
  {
    "text": "illustrates the idea of sequencing. And\nif you've seen some of my previous",
    "start": "845940",
    "end": "848760"
  },
  {
    "text": "videos, you may recognize the 'do' notation\nhere. And this is because parsers form an",
    "start": "848760",
    "end": "853770"
  },
  {
    "text": "example of what's known as a 'monad'. And\nin fact, for me, parsers being monadic is",
    "start": "853770",
    "end": "858510"
  },
  {
    "text": "one of the key ways to understand what\na monad is. So if you've seen the monad",
    "start": "858510",
    "end": "861840"
  },
  {
    "text": "video, or even if you haven't seen\nit, maybe you have a look back at that,",
    "start": "861840",
    "end": "864480"
  },
  {
    "text": "and if you find it interesting. maybe\nlook up some of the work which people",
    "start": "864480",
    "end": "867870"
  },
  {
    "text": "have done on monadic parsing. And it's a\nreally good way to get a very good feel",
    "start": "867870",
    "end": "871020"
  },
  {
    "text": "for what's going on with both these kind\nof parsers, and monads as well. We've seen",
    "start": "871020",
    "end": "875430"
  },
  {
    "text": "that parsers are basically functions --\nthey take a string as an input, and they",
    "start": "875430",
    "end": "878940"
  },
  {
    "text": "produce essentially a tree as an output.\nWe've seen some basic primitives for",
    "start": "878940",
    "end": "882870"
  },
  {
    "text": "consuming single digits, and single\ncharacters, and things like that. And",
    "start": "882870",
    "end": "886110"
  },
  {
    "text": "we've seen some basic combining forms -- we\ncan have repetition, with 'some', we can",
    "start": "886110",
    "end": "890700"
  },
  {
    "text": "have choice, and we can have sequencing.\nSo we've got our basic kind of building",
    "start": "890700",
    "end": "895020"
  },
  {
    "text": "blocks for making larger parsers. So\nlet's wrap this up now by doing a little",
    "start": "895020",
    "end": "900960"
  },
  {
    "text": "example. And the example I want to do is\nto build a really simple parser for the",
    "start": "900960",
    "end": "905940"
  },
  {
    "text": "kind of expressions, or arithmetic\nexpressions, that we saw back at the",
    "start": "905940",
    "end": "909030"
  },
  {
    "text": "start. So things like two plus three\ntimes four. So what I'm doing here is I'm",
    "start": "909030",
    "end": "913500"
  },
  {
    "text": "writing a Haskell program, which is going\nto implement this parser. What I've got",
    "start": "913500",
    "end": "916740"
  },
  {
    "text": "in the first line here is simply\nimporting the parsing library, which",
    "start": "916740",
    "end": "920970"
  },
  {
    "text": "we've just seen -- it's just four and a\nhalf pages of code -- it's very",
    "start": "920970",
    "end": "923610"
  },
  {
    "text": "straightforward. And what we've got here\nin the comments, is a simple way of",
    "start": "923610",
    "end": "928079"
  },
  {
    "text": "writing down what the syntax, or\nform, or structure, of expressions are.",
    "start": "928080",
    "end": "932390"
  },
  {
    "text": "And this is what's known as a 'grammar'.\nBut it doesn't matter if you ",
    "start": "932390",
    "end": "935030"
  },
  {
    "text": "don't know what a grammar is, because the\nbasic idea is very simple here. The first",
    "start": "935030",
    "end": "938990"
  },
  {
    "text": "line says an expression can be one of\ntwo things, so this means 'or' here, in",
    "start": "938990",
    "end": "943610"
  },
  {
    "text": "grammars. So an expression can either be\na term plus an expression, or it can be a",
    "start": "943610",
    "end": "948649"
  },
  {
    "text": "term. And then in turn, a term could\neither be a factor times a term, or a",
    "start": "948650",
    "end": "954470"
  },
  {
    "text": "factor. And finally, a factor can be a\nbracketed expression, or an integer. So",
    "start": "954470",
    "end": "959990"
  },
  {
    "text": "there's three simple rules here, which\nexplain the form, or structure, of what a",
    "start": "959990",
    "end": "964580"
  },
  {
    "text": "simple arithmetic expression can be. There's\nactually quite a lot of things going on",
    "start": "964580",
    "end": "968060"
  },
  {
    "text": "here, but the only key thing I want to\npoint out is we've got three rules,",
    "start": "968060",
    "end": "971420"
  },
  {
    "text": "because there's three different levels\nof priority in an expression. So the",
    "start": "971420",
    "end": "976010"
  },
  {
    "text": "highest level of priority is brackets. So\nthat's one thing you learn in school, you",
    "start": "976010",
    "end": "979970"
  },
  {
    "text": "learn that you do the brackets first,\nthat's the highest priority thing.",
    "start": "979970",
    "end": "982790"
  },
  {
    "text": "The middle level of priority here is\nmultiplication, so that's thing in the",
    "start": "982790",
    "end": "985970"
  },
  {
    "text": "middle rule. And the lowest level of\npriority is you do addition, and that's",
    "start": "985970",
    "end": "990019"
  },
  {
    "text": "sitting at the top rule. And again, this\npriority order is something you learn at",
    "start": "990020",
    "end": "993290"
  },
  {
    "text": "school -- you do brackets first, then you do\nmultiplication second, and then you do",
    "start": "993290",
    "end": "996290"
  },
  {
    "text": "things like addition last. And these\nthree rules are just making that precise.",
    "start": "996290",
    "end": "999860"
  },
  {
    "text": "And again, if you want to know more\nabout grammars, you can search on that,",
    "start": "999860",
    "end": "1003040"
  },
  {
    "text": "and you'll find a lot of\ninformation about that online.",
    "start": "1003040",
    "end": "1006639"
  },
  {
    "text": "So what we want to do now, is take this\nlittle grammar, and implement it as an",
    "start": "1006640",
    "end": "1010510"
  },
  {
    "text": "actual parser. And this is very\nstraightforward to do, because we're",
    "start": "1010510",
    "end": "1014320"
  },
  {
    "text": "using this functional parsing idea.\nEssentially, we just take those three",
    "start": "1014320",
    "end": "1018310"
  },
  {
    "text": "grammatical rules, and we just implement\nthem using the combining forms, and the",
    "start": "1018310",
    "end": "1022690"
  },
  {
    "text": "primitives that we've seen. So it's\na very straightforward translation.",
    "start": "1022690",
    "end": "1026050"
  },
  {
    "text": "So the first one, is we want to say an\nexpression can either be a term plus an",
    "start": "1026050",
    "end": "1032380"
  },
  {
    "text": "expression, or a term. So let's do the\nfirst part of that. So we've got term",
    "start": "1032380",
    "end": "1036430"
  },
  {
    "text": "plus expression. So what we're going to\ndo is parse a term, and if that succeeds",
    "start": "1036430",
    "end": "1040660"
  },
  {
    "text": "call it 'x'. Then we're going to parse a\n'+' character, then we're going to parse",
    "start": "1040660",
    "end": "1045339"
  },
  {
    "text": "an expression and call it 'y', and then\nwe're going to return x plus y. So there's",
    "start": "1045340",
    "end": "1052000"
  },
  {
    "text": "four things going on in sequence here.\nWe're first of all parsing a term.",
    "start": "1052000",
    "end": "1055600"
  },
  {
    "text": "Then we're parsing the '+' character.\nThen we're parsing an expression, and",
    "start": "1055600",
    "end": "1059980"
  },
  {
    "text": "we're getting the values x and y -- these\nwill be numbers. And then we're going to",
    "start": "1059980",
    "end": "1064000"
  },
  {
    "text": "simply add those two numbers together.\nSo you can see here we're actually doing",
    "start": "1064000",
    "end": "1067120"
  },
  {
    "text": "more than just parsing -- we're actually\nevaluating the expression as well. And",
    "start": "1067120",
    "end": "1071170"
  },
  {
    "text": "that's one of the advantages of this\napproach to parsing, that it's not just",
    "start": "1071170",
    "end": "1074260"
  },
  {
    "text": "about building a tree, you can actually\nprocess things as you're going along. And",
    "start": "1074260",
    "end": "1078040"
  },
  {
    "text": "we're actually processing them here by\ndoing complete evaluation. So x and y",
    "start": "1078040",
    "end": "1082000"
  },
  {
    "text": "will be numbers which, result from this\nterm and this expression, and then we just",
    "start": "1082000",
    "end": "1085690"
  },
  {
    "text": "add them together here, and return the\nresult. Then the last part of parsing an",
    "start": "1085690",
    "end": "1089799"
  },
  {
    "text": "expression is we can either be a term\nplus an expression, or we could be a term.",
    "start": "1089800",
    "end": "1094150"
  },
  {
    "text": "So we just use the choice operator, and\nwe get term.  And these five lines here",
    "start": "1094150",
    "end": "1100090"
  },
  {
    "text": "are our full parser for expressions.\nSo we had this one rule up here -- an",
    "start": "1100090",
    "end": "1104529"
  },
  {
    "text": "expression could be a term plus an\nexpression, or a term, and we just",
    "start": "1104530",
    "end": "1107200"
  },
  {
    "text": "translate it directly into our parsing\nnotation. And again the key observation",
    "start": "1107200",
    "end": "1111220"
  },
  {
    "text": "here is that the grammatical rule here\nlooks basically the same as the parser.",
    "start": "1111220",
    "end": "1116080"
  },
  {
    "text": "So let's look at the second rule, and in\nfact it's pretty much the same as the",
    "start": "1116080",
    "end": "1119380"
  },
  {
    "text": "first rule, except a few symbols are\nchanged. So let me just copy it. And I can",
    "start": "1119380",
    "end": "1123550"
  },
  {
    "text": "just change it. So I can say a term can\nbe a factor times a term, and then I can",
    "start": "1123550",
    "end": "1131710"
  },
  {
    "text": "do a multiply there, or I get a factor.\nOkay, so in just a few key presses, I've",
    "start": "1131710",
    "end": "1136330"
  },
  {
    "text": "managed to implement my parser for terms.\nAnd again the point to note here is that",
    "start": "1136330",
    "end": "1139990"
  },
  {
    "text": "the grammatical rule here looks\nbasically exactly the same as the parser.",
    "start": "1139990",
    "end": "1145330"
  },
  {
    "text": "Okay, I've just got a few more symbols\nin here, because I'm actually writing a",
    "start": "1145330",
    "end": "1148179"
  },
  {
    "text": "program to do parsing, or actually\nevaluation, but it's the same basic",
    "start": "1148180",
    "end": "1151720"
  },
  {
    "text": "structure. And then just to wrap things\nup, I can implement what a factor is.",
    "start": "1151720",
    "end": "1155470"
  },
  {
    "text": "So a factor is either a bracketed\nexpression, or it's an integer. So let me",
    "start": "1155470",
    "end": "1160179"
  },
  {
    "text": "write the parser for that. So a bracketed\nexpression, I just parse a character, and",
    "start": "1160180",
    "end": "1165310"
  },
  {
    "text": "then I parse as an expression and call it\n'x', and then I parse a closed bracket, and",
    "start": "1165310",
    "end": "1170620"
  },
  {
    "text": "then I return the 'x'. Or, I can parse an\ninteger. And again, if you look at the",
    "start": "1170620",
    "end": "1175510"
  },
  {
    "text": "structure of the rule up here -- a factor\nis a bracketed expression or an integer.",
    "start": "1175510",
    "end": "1178930"
  },
  {
    "text": "I've got exactly the same thing down\nhere -- here I'm parsing a bracketed",
    "start": "1178930",
    "end": "1182950"
  },
  {
    "text": "expression, and here I'm parsing an\ninteger. And this is actually our entire",
    "start": "1182950",
    "end": "1187480"
  },
  {
    "text": "parser. We've got three lines up here, and\nwe've just got kind of ten or fifteen",
    "start": "1187480",
    "end": "1191200"
  },
  {
    "text": "lines down here, and this is actually\na complete parser, and evaluator,",
    "start": "1191200",
    "end": "1193659"
  },
  {
    "text": "for arithmetic expressions.  And\nagain, the beauty of this approach is",
    "start": "1193660",
    "end": "1198400"
  },
  {
    "text": "the parser looks basically the same as\nthe grammar. So let's try and see if this",
    "start": "1198400",
    "end": "1204340"
  },
  {
    "text": "works, and hopefully I haven't made any\nmistakes. So let's load it into the",
    "start": "1204340",
    "end": "1208240"
  },
  {
    "text": "system. Okay that's great, no errors. And\nwe can see that we've loaded two files",
    "start": "1208240",
    "end": "1213309"
  },
  {
    "text": "in now -- we've loaded the parsing file\nin, which is about four and a half pages",
    "start": "1213310",
    "end": "1216700"
  },
  {
    "text": "of definitions, and we've loaded the\nexample program in now. So now we can check,",
    "start": "1216700",
    "end": "1221289"
  },
  {
    "text": "does our parser actually do what we want.\nSo let's try out our parser with the",
    "start": "1221290",
    "end": "1226240"
  },
  {
    "text": "little example that we had at the start,\n2 plus 3 times 4.  So we're going",
    "start": "1226240",
    "end": "1230950"
  },
  {
    "text": "to parse an expression, and the\nexpression is 2 plus 3 times 4.",
    "start": "1230950",
    "end": "1236320"
  },
  {
    "text": "And we press return, and we hope we get\nthe right result, and we do. So remember",
    "start": "1236320",
    "end": "1240279"
  },
  {
    "text": "from school, you do the multiply first,\nyou do the 3 times 4, so you get 12,",
    "start": "1240280",
    "end": "1243970"
  },
  {
    "text": "and then you add the 2 on at the end,\nand you get 14. So we've managed to",
    "start": "1243970",
    "end": "1247659"
  },
  {
    "text": "get the result 14 here, and there's no\nportion of the input string left. So",
    "start": "1247660",
    "end": "1252160"
  },
  {
    "text": "we've got a successful result -- we've got\na list, and we've got one result value,",
    "start": "1252160",
    "end": "1256090"
  },
  {
    "text": "we've got 14, and we've managed to consume\nthe whole thing. Or we could check,",
    "start": "1256090",
    "end": "1259690"
  },
  {
    "text": "does this actually work with more\nsophisticated examples? So let's try",
    "start": "1259690",
    "end": "1263320"
  },
  {
    "text": "putting some brackets in, and let's put\nbrackets around the 2 plus 3, so we get 2",
    "start": "1263320",
    "end": "1267070"
  },
  {
    "text": "plus 3 times 4. So we hope then that we\ndo the addition first, and we get 5, and",
    "start": "1267070",
    "end": "1271870"
  },
  {
    "text": "then times by 4 to get 20. Yes, and it\nworks. We can try more sophisticated",
    "start": "1271870",
    "end": "1276190"
  },
  {
    "text": "examples. So let's do something like 2\nplus 7 times 10 plus 8 times 20, and if",
    "start": "1276190",
    "end": "1285129"
  },
  {
    "text": "I've got the brackets right, yes then it\nworks fine. We can also check what",
    "start": "1285130",
    "end": "1288970"
  },
  {
    "text": "happens if you give it something which\ndoesn't parse. So suppose I do something",
    "start": "1288970",
    "end": "1292809"
  },
  {
    "text": "like, I parse expression, so 2 plus 3\ntimes, and I forget to write the 4 at the",
    "start": "1292810",
    "end": "1298060"
  },
  {
    "text": "end. What's going to happen? Well,\nthe parser will still manage to",
    "start": "1298060",
    "end": "1300730"
  },
  {
    "text": "succeed, because it will manage to parse\nthe 2 plus 3, and we'll get the 5 out,",
    "start": "1300730",
    "end": "1306100"
  },
  {
    "text": "but it doesn't know what to do with\nthis symbol sitting on its own. So you get",
    "start": "1306100",
    "end": "1308980"
  },
  {
    "text": "that back as an unconsumed part of the\ninput. And again, we can try another",
    "start": "1308980",
    "end": "1313510"
  },
  {
    "text": "example. Suppose I forget to close the\nbrackets, so I do something like 2 plus 3,",
    "start": "1313510",
    "end": "1318520"
  },
  {
    "text": "and I forget to close the brackets, then\nit won't know what to do with that at",
    "start": "1318520",
    "end": "1322270"
  },
  {
    "text": "all, and we'll just get the empty string.\nThat's basically it -- this is the idea of",
    "start": "1322270",
    "end": "1325920"
  },
  {
    "text": "functional parsing, or combinator\nparsing. The idea is very simple --",
    "start": "1325920",
    "end": "1329550"
  },
  {
    "text": "parsers are basically functions,\nyou define a library with some",
    "start": "1329550",
    "end": "1333300"
  },
  {
    "text": "basic building blocks, or primitives, some\ncombining forms that let you put these",
    "start": "1333300",
    "end": "1337710"
  },
  {
    "text": "things together, and then you can end up\nwriting parsers as we've seen that look",
    "start": "1337710",
    "end": "1341580"
  },
  {
    "text": "very similar to the grammars that you\nwrite to describe languages. ",
    "start": "1341580",
    "end": "1346799"
  }
]