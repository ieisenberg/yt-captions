[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "What we're searching for today is very\nsimple. So, it's the answer to how do we",
    "start": "0",
    "end": "4589"
  },
  {
    "text": "decode the wonderful code that we\ncreated just about what a week ago now.",
    "start": "4589",
    "end": "11880"
  },
  {
    "text": "Something like that.\nLet's just remind ourselves where we",
    "start": "11880",
    "end": "16020"
  },
  {
    "text": "were with this code. It was a 5-bit code.\nCoding theorists will talk about this",
    "start": "16020",
    "end": "22769"
  },
  {
    "text": "code, which i'm going to write out, as being\na [5, 2, 3] code. I'll fill in the details and",
    "start": "22769",
    "end": "30720"
  },
  {
    "text": "then I'll refer what I've written down to this.",
    "start": "30720",
    "end": "34820"
  },
  {
    "start": "33000",
    "end": "110000"
  },
  {
    "text": "Remember also that these are the exact\npowers of 2. That's 2 squared, the number",
    "start": "34820",
    "end": "42200"
  },
  {
    "text": "two position is 2 to the power 1, the number\none position - well that's two to the power 0",
    "start": "42200",
    "end": "46760"
  },
  {
    "text": "But that leaves bit three and bit five for\nthe actual message bits. Two bits - ",
    "start": "46760",
    "end": "54739"
  },
  {
    "text": "bit 3; bit 5. Two bits: four combinations\npossible. And those are the four San",
    "start": "54739",
    "end": "59570"
  },
  {
    "text": "Francisco weather states. So I'll sometimes refer \nto these as \"info bits\", \"message bits\", it",
    "start": "59570",
    "end": "65210"
  },
  {
    "text": "comes to the same thing. That's the\nmessage you're trying to get across.",
    "start": "65210",
    "end": "68720"
  },
  {
    "text": "That's the message that these parity\nbits are there to check out and make sure",
    "start": "68720",
    "end": "72560"
  },
  {
    "text": "it's ok. And we ended up with one codeword -\nif you remember that's the \"in\" phrase",
    "start": "72560",
    "end": "80868"
  },
  {
    "text": "for these things.\nThe 00 state in message terms, I think, we",
    "start": "80869",
    "end": "87170"
  },
  {
    "text": "said was \"foggy\" this time around. And\nhere's the protection of the parity bits",
    "start": "87170",
    "end": "92420"
  },
  {
    "text": "There we are, all written out again now. Coding\ntheorists would call this a [5, 2, 3] code.",
    "start": "92420",
    "end": "99618"
  },
  {
    "text": "How does that work? Well, it's a 5-bit\ncode. That's what the first number means.",
    "start": "99619",
    "end": "105380"
  },
  {
    "text": "It means total number of bits. The 2\nmeans the number of message or",
    "start": "105380",
    "end": "112310"
  },
  {
    "start": "110000",
    "end": "147000"
  },
  {
    "text": "information bits. And this, if you\nremember, is this business called the",
    "start": "112310",
    "end": "116898"
  },
  {
    "text": "\"distance\". How many bits differ between\nthese rows? So the \"distance\" in this",
    "start": "116899",
    "end": "123890"
  },
  {
    "text": "technical usage of the term, here, the\nnumber of bits that differ between that",
    "start": "123890",
    "end": "128929"
  },
  {
    "text": "line and that line is 3. And to get one\nof these codes working you need a",
    "start": "128929",
    "end": "136250"
  },
  {
    "text": "minimum distance of 3. And what do we\nmean by \"working\"? What we mean is that a",
    "start": "136250",
    "end": "141709"
  },
  {
    "text": "distance-3 code can correct a 1-bit error.\nAnd for those of you just yelling at me:",
    "start": "141709",
    "end": "149330"
  },
  {
    "start": "147000",
    "end": "425000"
  },
  {
    "text": "\"But what's the general formula then?\" \n- for what you can correct, for a given",
    "start": "149330",
    "end": "154819"
  },
  {
    "text": "distance in that?  Watch carefully.",
    "start": "154819",
    "end": "158590"
  },
  {
    "text": "It's a one-liner more or less. Floor of \n(d -1) / 2 where 'the floor of'",
    "start": "158590",
    "end": "167200"
  },
  {
    "text": "means 'round down'. So let's do it for distance \nthree.  3 - 1? Two.  2/ 2? One. Round down 1?.",
    "start": "167200",
    "end": "177489"
  },
  {
    "text": "It's already rounded down. So that's telling you.\nUsing the \"floor of\" function it's saying:",
    "start": "177490",
    "end": "184570"
  },
  {
    "text": "\"For distance three you can detect and\ncorrect one error\". So bearing that in",
    "start": "184570",
    "end": "189850"
  },
  {
    "text": "mind if we see things in future with\ndifferent distance properties at the end,",
    "start": "189850",
    "end": "194620"
  },
  {
    "text": "we can always apply this to find out how\nmany things they could correct. The",
    "start": "194620",
    "end": "198640"
  },
  {
    "text": "powers of two and the parity check bits.\nWhat sequence of numbers were they using",
    "start": "198640",
    "end": "205270"
  },
  {
    "text": "[or] checking up on? This first block the \"1\".\nThis checks itself and 3 and 5.",
    "start": "205270",
    "end": "212260"
  },
  {
    "text": "The 2 bit checks itself and 3. And the\n4-bit checks 4 and 5. Where do those",
    "start": "212260",
    "end": "220690"
  },
  {
    "text": "come from?  How do you get those lists?  And\nI think, last time, I perhaps didn't make",
    "start": "220690",
    "end": "226450"
  },
  {
    "text": "this quite crystal clear.\nSo, let me explain that those come from",
    "start": "226450",
    "end": "232330"
  },
  {
    "text": "effectively saying - for all of the things\nthat aren't powers of two -",
    "start": "232330",
    "end": "237820"
  },
  {
    "text": "how could you build them up from adding\ntogether powers of 2?",
    "start": "237820",
    "end": "244450"
  },
  {
    "text": "1: you don't have to build it up, that's\nitself. 1 is 1. Similarly 2 is a power of two",
    "start": "244450",
    "end": "249610"
  },
  {
    "text": "and it's just itself. Where you really\nhave to start doing this powers of two",
    "start": "249610",
    "end": "256209"
  },
  {
    "text": "\"add them together to build them up\" thing\nis with 3. The most compact way to",
    "start": "256209",
    "end": "261850"
  },
  {
    "text": "represent three as sums of powers of 2 is\n1 + 2. What about 4? No problem. Four",
    "start": "261850",
    "end": "270130"
  },
  {
    "text": "is itself, it's a power of two.\nWhen you get to 5, you say \"Ah! The most compact",
    "start": "270130",
    "end": "275979"
  },
  {
    "text": "way to do this is 1 +4\". Powers of 2.\nSix? 2 + 4. Seven? Quite",
    "start": "275979",
    "end": "286170"
  },
  {
    "text": "complicated now. But if you think about it,\nsum of powers of two that add up to seven, in the",
    "start": "286170",
    "end": "290940"
  },
  {
    "text": "most compact way you can do it? 1 + 2 +4.\nSo really, these lists that",
    "start": "290940",
    "end": "296340"
  },
  {
    "text": "we had previously - about what checks for\nwhat - is as a result of writing these out",
    "start": "296340",
    "end": "302730"
  },
  {
    "text": "first and then saying: but if we were going\nbackwards",
    "start": "302730",
    "end": "306600"
  },
  {
    "text": "where does the digit 1 appear? It appears\nin itself. It appears in the",
    "start": "306600",
    "end": "312450"
  },
  {
    "text": "formula for 3; it appears in the formula\nfor 5; it appears in the formula for 7.",
    "start": "312450",
    "end": "316890"
  },
  {
    "text": "So that's where that first list\ncame out here: that 1 checks up on 1,",
    "start": "316890",
    "end": "323820"
  },
  {
    "text": "3, 5, 7, 9, 11 - all the odd\nnumbers.  Because 1 would appear in the",
    "start": "323820",
    "end": "329640"
  },
  {
    "text": "sums of powers of two that build those up.\nTwo? Yes, 2 appears obviously in its own list",
    "start": "329640",
    "end": "335940"
  },
  {
    "text": "but it appears first of all, next door, in\n3 as being 1 + 2. Does it appear in 4 ?",
    "start": "335940",
    "end": "341670"
  },
  {
    "text": "No. 4 is all on its own - it's a\npower of 2. What about 5?  Would 2 appear",
    "start": "341670",
    "end": "346290"
  },
  {
    "text": "in 5? No! It's 1 + 4. So, the next place that",
    "start": "346290",
    "end": "350850"
  },
  {
    "text": "2 would appear is 6 - which \nis 2 + 4. So I hope if you ....",
    "start": "350850",
    "end": "357180"
  },
  {
    "text": ">> Sean: So, if you had a 6-bit code, would \n2 have to check on ....\n>> DFB: On one extra bit?",
    "start": "357180",
    "end": "362430"
  },
  {
    "text": "Yes it would! Similarly 4. It checks on 4;\nit checks on 5; it also checks on 6. Because 6 is",
    "start": "362430",
    "end": "368940"
  },
  {
    "text": "2 + 4. So, if you're building up these\nlists and making them longer - to do more complex",
    "start": "368940",
    "end": "374910"
  },
  {
    "text": "codes - then if you're encoding and decoding\nin this by-hand method, you need to keep",
    "start": "374910",
    "end": "381420"
  },
  {
    "text": "up-to-date your sums of powers of 2, for\nall the new positions - unless they're exact",
    "start": "381420",
    "end": "387420"
  },
  {
    "text": "powers of 2 - and then go backwards and say\n\"Ah! but these are my checklists that I",
    "start": "387420",
    "end": "391770"
  },
  {
    "text": "have built up from that\". So, just to remind you\nthen, of what happened, was that on this one",
    "start": "391770",
    "end": "398520"
  },
  {
    "text": "here, let's take this second one. The\ninformation, or message, bits are 0 and 1.",
    "start": "398520",
    "end": "403410"
  },
  {
    "text": "But what it tells us here - that's bit 3 and bit 5 -\nbut it says here that bits 1, 3 and 5, taken",
    "start": "403410",
    "end": "409560"
  },
  {
    "text": "together must be even.  Well [bits] 3 and 5 - \n0 and 1- ",
    "start": "409560",
    "end": "412620"
  },
  {
    "text": "add them together, that's 1. So\ntherefore bit 1, which we'll be filling in",
    "start": "412620",
    "end": "417539"
  },
  {
    "text": "has to be 1, to make it even. We're going \nto say -- because you all want to know",
    "start": "417539",
    "end": "421949"
  },
  {
    "text": "how to decode it and detect errors and\ncorrect them! This one here is going to",
    "start": "421949",
    "end": "427889"
  },
  {
    "start": "425000",
    "end": "476000"
  },
  {
    "text": "be badly transmitted. Instead of 10011\nit is received as 10111. \n>> Sean: So straight away whoever",
    "start": "427889",
    "end": "442319"
  },
  {
    "text": "gets that is going to say 'That isn't right!\n>> DFB: They're going to say 'That isn't right' because",
    "start": "442319",
    "end": "445830"
  },
  {
    "text": "there's so few of these - there's only\nfour of them. You get to know them like old",
    "start": "445830",
    "end": "450990"
  },
  {
    "text": "friends. But you imagine if you've got 64\nof the so-and-so's can you guarantee",
    "start": "450990",
    "end": "455580"
  },
  {
    "text": "that you'll be able to memorize every single one?",
    "start": "455580",
    "end": "458580"
  },
  {
    "text": "Er, no! You need an algorithm. And what we do\nhere is a reverse of what we did when we",
    "start": "458580",
    "end": "464698"
  },
  {
    "text": "encoded. we say let's look at the list\nthat follows on, and is checked from 1. ",
    "start": "464699",
    "end": "475289"
  },
  {
    "text": "1,3, 5 and so on.\nThat's what we received: bit one is 1;",
    "start": "475289",
    "end": "481259"
  },
  {
    "text": "bit 3 is 1;  1+1 is 0; bit 5 is 1; 0+1 is 1.\nAaaagh!!  It's supposed to be even parity. Wrong!",
    "start": "481259",
    "end": "491699"
  },
  {
    "text": "It came out as odd parity.  Bit 2 checks\nout on itself and on bit 3.",
    "start": "491699",
    "end": "498240"
  },
  {
    "start": "498000",
    "end": "523000"
  },
  {
    "text": "It doesn't occur in bit 5 because 5 is 1 + 4,\nnot 2 + 4. So you look at bit 2",
    "start": "498240",
    "end": "504270"
  },
  {
    "text": "and bit 3. 0 XOR-ed (or added if\nyou like) to 1. Its a 1 !  It's odd",
    "start": "504270",
    "end": "511800"
  },
  {
    "text": "parity! It's wrong!\nOK, now you look at the 4-bit and you say",
    "start": "511800",
    "end": "518698"
  },
  {
    "text": "Bit 4 checks out 4 and 5.  4 and 5: 1 + 1.\nIt's zero. Hooray!",
    "start": "518699",
    "end": "526800"
  },
  {
    "text": "It passed the test.\n>> Sean: Yeah,we failed two tests. We can work \nout from that now what went wrong ?",
    "start": "526800",
    "end": "531510"
  },
  {
    "text": ">> DFB: Yes you can. very simply, because\nthe headers of these lists - are the powers of ",
    "start": "531510",
    "end": "536459"
  },
  {
    "text": "two that they check up on in all of those",
    "start": "536459",
    "end": "539230"
  },
  {
    "text": "lists. And if the [bit] 2 \"1\" has gone wrong and\nthe [bit] 1 \"1\" has gone wrong, then the wrong bit",
    "start": "539230",
    "end": "546639"
  },
  {
    "text": "was 1 + 2 - ordinary addition this time,\nnot binary addition. 1 + 2 makes 3.",
    "start": "546640",
    "end": "553630"
  },
  {
    "text": "Bit 3 is wrong! \n>> Sean: So then we flip bit 3 and we've\ngot the right column?\n>> DFB: You flip bit 3. 10111 that's the bad bit.\nIt's received as a 1.",
    "start": "553630",
    "end": "562960"
  },
  {
    "text": "It's wrong, so it must have been a 0.\n10011, magic! Does that look familiar?",
    "start": "562960",
    "end": "570580"
  },
  {
    "text": "That's what you correct it back to.\nAnd it's entirely done by getting these",
    "start": "570580",
    "end": "575740"
  },
  {
    "text": "lists of powers of two - doing another\ncheck on them - almost like ... It's exactly",
    "start": "575740",
    "end": "581890"
  },
  {
    "text": "the same as when you were encoding. It's just\nyou're doing it again. That's wrong - it doesn't add up!",
    "start": "581890",
    "end": "588610"
  },
  {
    "text": ">> Sean: So you simply reverse the process?\n    I mean, does that always work then? \n>> DFB: Yes! \n>> Sean: For any of those bits - the parity bits .... ?",
    "start": "588610",
    "end": "594850"
  },
  {
    "text": ">> DFB: Ah! now that's a good thing. If you're\nthinking: \"Oh! but that's a message bit\" Oh no! - ",
    "start": "594850",
    "end": "599139"
  },
  {
    "text": "come on - something really went wrong\nthere because what was transmitted as 0 1",
    "start": "599140",
    "end": "603670"
  },
  {
    "text": "- that's 'Sunny' wasn't it? - has turned out as\n.... 'Rainy', 11, wasn't it? You turned [it] into 'Rainy'.",
    "start": "603670",
    "end": "612130"
  },
  {
    "text": "Oh yeah! That's fine, but what if you hit\nthe parity bit? Surely that messes",
    "start": "612130",
    "end": "615520"
  },
  {
    "text": "everything up? No it doesn't.\nIt's actually dead easy. And I",
    "start": "615520",
    "end": "618220"
  },
  {
    "text": "want to leave as an exercise for you \n[the viewers] to do is, this time",
    "start": "618220",
    "end": "622839"
  },
  {
    "text": "10011, don't hit a message bit. Hit that\nparity bit at position 4. Change it to 0.",
    "start": "622840",
    "end": "632260"
  },
  {
    "start": "625000",
    "end": "660000"
  },
  {
    "text": "Do the checks and you'll find out that the \"1\"\nlist passes with flying colours,",
    "start": "632260",
    "end": "637030"
  },
  {
    "text": "nothing wrong with it. The \"2\" list passes\nwith flying colours.",
    "start": "637030",
    "end": "640870"
  },
  {
    "text": "The only one that fails is the \"4\" list. \nSo, if it's only one fails that's it: 4. It's 4,",
    "start": "640870",
    "end": "646480"
  },
  {
    "text": "Nothing to add to it!\n>> Sean: You've done the homework for them!\n>> DFB: I've done the homework. Again! So do it for",
    "start": "646480",
    "end": "652779"
  },
  {
    "text": "yourself, on any bit you like, and convince\nyourself that it doesn't matter if it's",
    "start": "652780",
    "end": "656260"
  },
  {
    "text": "message bit or parity bit - this method\nwill come in on it. I have built this up",
    "start": "656260",
    "end": "661360"
  },
  {
    "text": "and I have explained to you now. You can\ngo into a pub, full of coding",
    "start": "661360",
    "end": "666130"
  },
  {
    "text": "theorists and say: \"Hey! Like I've got this\n[5,2,3]-code\" and they will say: \"Well, you",
    "start": "666130",
    "end": "671260"
  },
  {
    "text": "realize that you derived it using\nRichard Hamming's algorithm but it's not a",
    "start": "671260",
    "end": "677680"
  },
  {
    "text": "true, proper, Hamming code because it's\nnot perfect. And you say: \"Perfect ?!\"",
    "start": "677680",
    "end": "684730"
  },
  {
    "text": "\"What's Perfect?!\". I think we have to go to\nanother video, Sean, I know they hate cliff-hangers",
    "start": "684730",
    "end": "689380"
  },
  {
    "text": "but, yes, real Hamming codes are \"perfect\".\nThey really are.\n[trailer for follow-up  EXTRA BITS video]\nNow the only sort of, if you",
    "start": "689380",
    "end": "699340"
  },
  {
    "text": "like, flight health-warning to say about\nthis - just to round this off now - is by all",
    "start": "699340",
    "end": "704530"
  },
  {
    "text": "means do it by hand. If you want to code\nit up as a program, great, you'll learn a lot",
    "start": "704530",
    "end": "708550"
  },
  {
    "text": "but don't run away with the idea that\nthis is the most efficient way to do it.",
    "start": "708550",
    "end": "716640"
  }
]