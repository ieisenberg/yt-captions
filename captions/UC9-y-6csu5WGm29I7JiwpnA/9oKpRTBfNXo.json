[
  {
    "text": "we've done a couple of videos on binary",
    "start": "0",
    "end": "1319"
  },
  {
    "text": "search big fan right you know it's great",
    "start": "1319",
    "end": "3959"
  },
  {
    "text": "it has some pros and cons one of the",
    "start": "3959",
    "end": "5440"
  },
  {
    "text": "pros is that look UPS very very fast one",
    "start": "5440",
    "end": "7439"
  },
  {
    "text": "of the cons is you have to sort the data",
    "start": "7439",
    "end": "9280"
  },
  {
    "text": "and there are lots of other data",
    "start": "9280",
    "end": "10480"
  },
  {
    "text": "structures available to us that we could",
    "start": "10480",
    "end": "12000"
  },
  {
    "text": "use but serve slightly different",
    "start": "12000",
    "end": "13679"
  },
  {
    "text": "purposes and again they have pros and",
    "start": "13679",
    "end": "15799"
  },
  {
    "text": "cons as well so today we're going to",
    "start": "15799",
    "end": "18000"
  },
  {
    "text": "start looking at hashmaps or hash sets",
    "start": "18000",
    "end": "20720"
  },
  {
    "text": "depending on how you're using them which",
    "start": "20720",
    "end": "22519"
  },
  {
    "text": "are a very different way of storing your",
    "start": "22519",
    "end": "24000"
  },
  {
    "text": "data but they're very very popular so",
    "start": "24000",
    "end": "25920"
  },
  {
    "text": "for example if you've used python the",
    "start": "25920",
    "end": "27800"
  },
  {
    "text": "dictionary is implemented as a hash map",
    "start": "27800",
    "end": "30640"
  },
  {
    "text": "almost all languages will have a data",
    "start": "30640",
    "end": "33000"
  },
  {
    "text": "structure that does or multiple data",
    "start": "33000",
    "end": "34480"
  },
  {
    "text": "structures that does something like this",
    "start": "34480",
    "end": "36399"
  },
  {
    "text": "because of the benefits that they have",
    "start": "36399",
    "end": "37879"
  },
  {
    "text": "for storing data and looking up very",
    "start": "37879",
    "end": "39600"
  },
  {
    "text": "very",
    "start": "39600",
    "end": "41840"
  },
  {
    "text": "quickly so let's think a bit about the",
    "start": "42200",
    "end": "44719"
  },
  {
    "text": "speed of binary search let's put aside",
    "start": "44719",
    "end": "46640"
  },
  {
    "text": "the fact that we had to sort the data",
    "start": "46640",
    "end": "48120"
  },
  {
    "text": "that was a bit of a pain it takes a long",
    "start": "48120",
    "end": "49840"
  },
  {
    "text": "time but once the data is sorted the",
    "start": "49840",
    "end": "53440"
  },
  {
    "text": "lookup if you remember is O log n so",
    "start": "53440",
    "end": "56559"
  },
  {
    "text": "it's log that's how it scales right yeah",
    "start": "56559",
    "end": "59280"
  },
  {
    "text": "that's how it scales so if your size of",
    "start": "59280",
    "end": "61120"
  },
  {
    "text": "your data is n if your list doubles in",
    "start": "61120",
    "end": "63199"
  },
  {
    "text": "size your log two of n only goes up by",
    "start": "63199",
    "end": "67680"
  },
  {
    "text": "one right which basically means you have",
    "start": "67680",
    "end": "69560"
  },
  {
    "text": "to do one additional lookup which is of",
    "start": "69560",
    "end": "71920"
  },
  {
    "text": "no real concern right for most computers",
    "start": "71920",
    "end": "74680"
  },
  {
    "text": "so it means that it's scales very very",
    "start": "74680",
    "end": "76759"
  },
  {
    "text": "well with the size of your data now that",
    "start": "76759",
    "end": "79159"
  },
  {
    "text": "log two of n is good right what's better",
    "start": "79159",
    "end": "81520"
  },
  {
    "text": "is log is 01 right o1 says it doesn't",
    "start": "81520",
    "end": "85479"
  },
  {
    "text": "mean that you only have to do one",
    "start": "85479",
    "end": "86680"
  },
  {
    "text": "operation right that's I think a common",
    "start": "86680",
    "end": "88680"
  },
  {
    "text": "misconception it it just means that",
    "start": "88680",
    "end": "91400"
  },
  {
    "text": "there is no relationship between the",
    "start": "91400",
    "end": "93960"
  },
  {
    "text": "speed of lookup really and the number of",
    "start": "93960",
    "end": "97360"
  },
  {
    "text": "elements in your list so if your list is",
    "start": "97360",
    "end": "99000"
  },
  {
    "text": "100 elements or a thousand elements it's",
    "start": "99000",
    "end": "101280"
  },
  {
    "text": "still just the same amount of",
    "start": "101280",
    "end": "102439"
  },
  {
    "text": "computation you have to to do that",
    "start": "102439",
    "end": "103759"
  },
  {
    "text": "lookup right so o1 is obviously the",
    "start": "103759",
    "end": "106600"
  },
  {
    "text": "ideal case and there are some data",
    "start": "106600",
    "end": "108200"
  },
  {
    "text": "structures that offer you this you would",
    "start": "108200",
    "end": "109719"
  },
  {
    "text": "think why would you use binary search",
    "start": "109719",
    "end": "111520"
  },
  {
    "text": "then well each of these have their pros",
    "start": "111520",
    "end": "112840"
  },
  {
    "text": "and cons but I just wanted to talk about",
    "start": "112840",
    "end": "115320"
  },
  {
    "text": "hashsets today or hashmaps because they",
    "start": "115320",
    "end": "118479"
  },
  {
    "text": "are one of these data structures right",
    "start": "118479",
    "end": "120039"
  },
  {
    "text": "and they are very very popular what is a",
    "start": "120039",
    "end": "121799"
  },
  {
    "text": "hash we've talked about cryptographic",
    "start": "121799",
    "end": "123280"
  },
  {
    "text": "hashes before hash function takes some",
    "start": "123280",
    "end": "125200"
  },
  {
    "text": "string right let's say a BC and it turns",
    "start": "125200",
    "end": "129319"
  },
  {
    "text": "it into some fixed length string that's",
    "start": "129319",
    "end": "131959"
  },
  {
    "text": "not usually three long these sort of",
    "start": "131959",
    "end": "133720"
  },
  {
    "text": "hashes that we're looking at today are a",
    "start": "133720",
    "end": "134920"
  },
  {
    "text": "little bit different they are a",
    "start": "134920",
    "end": "136480"
  },
  {
    "text": "numerical code that represents some",
    "start": "136480",
    "end": "138440"
  },
  {
    "text": "object in memory that we're trying to",
    "start": "138440",
    "end": "140000"
  },
  {
    "text": "put into our data structure so a hashset",
    "start": "140000",
    "end": "142640"
  },
  {
    "text": "is essentially a large list of numbers",
    "start": "142640",
    "end": "146440"
  },
  {
    "text": "indexed by their hash rather than by",
    "start": "146440",
    "end": "148480"
  },
  {
    "text": "themselves so you might have a very",
    "start": "148480",
    "end": "149920"
  },
  {
    "text": "large list of numbers",
    "start": "149920",
    "end": "152280"
  },
  {
    "text": "right and this is zero and this is one",
    "start": "152280",
    "end": "154840"
  },
  {
    "text": "and this is two and this is three dot",
    "start": "154840",
    "end": "157040"
  },
  {
    "text": "dot dot dot dot all the way up to the",
    "start": "157040",
    "end": "158680"
  },
  {
    "text": "maximum size of your set so let's say",
    "start": "158680",
    "end": "161080"
  },
  {
    "text": "10,000 right so I'm going to do",
    "start": "161080",
    "end": "163200"
  },
  {
    "text": "9999 here now I nearly made a mistake so",
    "start": "163200",
    "end": "167680"
  },
  {
    "text": "now these are not your actual values",
    "start": "167680",
    "end": "170760"
  },
  {
    "text": "these are the hashes of those values so",
    "start": "170760",
    "end": "172920"
  },
  {
    "text": "you have let's say you have a string or",
    "start": "172920",
    "end": "174239"
  },
  {
    "text": "you have an object or a class or you",
    "start": "174239",
    "end": "176440"
  },
  {
    "text": "have a number you hash it into here and",
    "start": "176440",
    "end": "178879"
  },
  {
    "text": "it comes out as four four and then you",
    "start": "178879",
    "end": "180720"
  },
  {
    "text": "can put your",
    "start": "180720",
    "end": "182480"
  },
  {
    "text": "object in here right and when you have",
    "start": "182480",
    "end": "185000"
  },
  {
    "text": "object two comes along and you get you",
    "start": "185000",
    "end": "186599"
  },
  {
    "text": "compute a hash on it and it and it comes",
    "start": "186599",
    "end": "188799"
  },
  {
    "text": "up as 770 so down here somewhere you",
    "start": "188799",
    "end": "192720"
  },
  {
    "text": "have this object you know with 770 as",
    "start": "192720",
    "end": "196799"
  },
  {
    "text": "his hash let's talk about how his hash",
    "start": "196799",
    "end": "198400"
  },
  {
    "text": "is calculated if you have an integer",
    "start": "198400",
    "end": "200920"
  },
  {
    "text": "right and you want your hash to also be",
    "start": "200920",
    "end": "202360"
  },
  {
    "text": "an integer then there is no there's",
    "start": "202360",
    "end": "204560"
  },
  {
    "text": "nothing to do right the hash is the",
    "start": "204560",
    "end": "206599"
  },
  {
    "text": "number okay that works well if you have",
    "start": "206599",
    "end": "208760"
  },
  {
    "text": "something for example if you're trying",
    "start": "208760",
    "end": "210040"
  },
  {
    "text": "to return a",
    "start": "210040",
    "end": "211159"
  },
  {
    "text": "32bit hash value and you've got a 64-bit",
    "start": "211159",
    "end": "215400"
  },
  {
    "text": "number then what you would commonly do",
    "start": "215400",
    "end": "216920"
  },
  {
    "text": "is take the two hares and EXO them",
    "start": "216920",
    "end": "218879"
  },
  {
    "text": "together and then for a string you have",
    "start": "218879",
    "end": "220840"
  },
  {
    "text": "to do a computation that combines each",
    "start": "220840",
    "end": "223879"
  },
  {
    "text": "of the characters for every position in",
    "start": "223879",
    "end": "225560"
  },
  {
    "text": "the string for example and so the more",
    "start": "225560",
    "end": "227080"
  },
  {
    "text": "complicated your object perhaps the more",
    "start": "227080",
    "end": "229040"
  },
  {
    "text": "complicated hash is we're going to look",
    "start": "229040",
    "end": "231120"
  },
  {
    "text": "at integers today just because for",
    "start": "231120",
    "end": "233200"
  },
  {
    "text": "Simplicity but it these are usually",
    "start": "233200",
    "end": "236519"
  },
  {
    "text": "quite fast and they're not they don't",
    "start": "236519",
    "end": "237599"
  },
  {
    "text": "have to be cryptographically secure",
    "start": "237599",
    "end": "239239"
  },
  {
    "text": "right but the same restrictions that",
    "start": "239239",
    "end": "240799"
  },
  {
    "text": "we've talked about previously on on you",
    "start": "240799",
    "end": "242599"
  },
  {
    "text": "know cryptographic hashes they don't",
    "start": "242599",
    "end": "244120"
  },
  {
    "text": "hold here what we're looking for here is",
    "start": "244120",
    "end": "246159"
  },
  {
    "text": "a broadly good distribution of our",
    "start": "246159",
    "end": "248120"
  },
  {
    "text": "values around this list so it's a bit of",
    "start": "248120",
    "end": "250400"
  },
  {
    "text": "a way of kind of like boiling it down or",
    "start": "250400",
    "end": "252439"
  },
  {
    "text": "abbreviating yes it's like a sort of",
    "start": "252439",
    "end": "253879"
  },
  {
    "text": "fingerprint yes but very very simplistic",
    "start": "253879",
    "end": "256000"
  },
  {
    "text": "one we'll talk about what happens when",
    "start": "256000",
    "end": "257519"
  },
  {
    "text": "two objects have the same hash in a",
    "start": "257519",
    "end": "258759"
  },
  {
    "text": "moment but you're not absolutely",
    "start": "258759",
    "end": "259720"
  },
  {
    "text": "concerned about that right it does it's",
    "start": "259720",
    "end": "261160"
  },
  {
    "text": "going to happen I mean the thing to",
    "start": "261160",
    "end": "262680"
  },
  {
    "text": "think about is if we've got our list of",
    "start": "262680",
    "end": "264040"
  },
  {
    "text": "numbers here it's only 10,000 long and",
    "start": "264040",
    "end": "266720"
  },
  {
    "text": "we've got 12,000 different objects if we",
    "start": "266720",
    "end": "269639"
  },
  {
    "text": "find a way of hashing them into this",
    "start": "269639",
    "end": "270960"
  },
  {
    "text": "list of 10,000 numbers by definition",
    "start": "270960",
    "end": "272800"
  },
  {
    "text": "some of them are going to have the same",
    "start": "272800",
    "end": "273960"
  },
  {
    "text": "hash right um and in fact this is what",
    "start": "273960",
    "end": "276160"
  },
  {
    "text": "we would normally do so normally you",
    "start": "276160",
    "end": "277440"
  },
  {
    "text": "will hash set would have a capacity",
    "start": "277440",
    "end": "279960"
  },
  {
    "text": "right in this case 10,000 and so we",
    "start": "279960",
    "end": "282600"
  },
  {
    "text": "actually calculate that the actual hash",
    "start": "282600",
    "end": "284759"
  },
  {
    "text": "lookup value right is going to be the",
    "start": "284759",
    "end": "288240"
  },
  {
    "text": "hash of our integer hash of I which is",
    "start": "288240",
    "end": "291400"
  },
  {
    "text": "going to be itself or some other",
    "start": "291400",
    "end": "293160"
  },
  {
    "text": "complicated way of doing it mod remember",
    "start": "293160",
    "end": "295960"
  },
  {
    "text": "mod yeah it's come back mod our capacity",
    "start": "295960",
    "end": "299120"
  },
  {
    "text": "which I'm just going to right C right",
    "start": "299120",
    "end": "300720"
  },
  {
    "text": "like this so mod 10,000 or something",
    "start": "300720",
    "end": "302759"
  },
  {
    "text": "like this and this means that if your",
    "start": "302759",
    "end": "305039"
  },
  {
    "text": "number is 12,000 it's going to loop back",
    "start": "305039",
    "end": "306960"
  },
  {
    "text": "around to be 2,000 on this set and it",
    "start": "306960",
    "end": "309919"
  },
  {
    "text": "also means that broadly speaking as long",
    "start": "309919",
    "end": "311680"
  },
  {
    "text": "as your original hashes are fairly",
    "start": "311680",
    "end": "314080"
  },
  {
    "text": "uniform in their distribution their",
    "start": "314080",
    "end": "316600"
  },
  {
    "text": "positions on this are also going to be",
    "start": "316600",
    "end": "317960"
  },
  {
    "text": "fairly uniform right and that avoids too",
    "start": "317960",
    "end": "319880"
  },
  {
    "text": "many too many values clumping around",
    "start": "319880",
    "end": "321960"
  },
  {
    "text": "zero for example and no one nothing at",
    "start": "321960",
    "end": "324400"
  },
  {
    "text": "four right that's the idea so how do we",
    "start": "324400",
    "end": "328440"
  },
  {
    "text": "deal with collisions because that will",
    "start": "328440",
    "end": "330000"
  },
  {
    "text": "happen right and if you have a imagine",
    "start": "330000",
    "end": "332560"
  },
  {
    "text": "collisions where two things boil down be",
    "start": "332560",
    "end": "334479"
  },
  {
    "text": "the same imagine that you had a capacity",
    "start": "334479",
    "end": "336880"
  },
  {
    "text": "that was equal to the number of possible",
    "start": "336880",
    "end": "338680"
  },
  {
    "text": "values you could have and you had a",
    "start": "338680",
    "end": "340400"
  },
  {
    "text": "hashing function that always gave unique",
    "start": "340400",
    "end": "342160"
  },
  {
    "text": "values then we wouldn't have any",
    "start": "342160",
    "end": "343960"
  },
  {
    "text": "collisions right because they'd all just",
    "start": "343960",
    "end": "345280"
  },
  {
    "text": "go into you know into the correct place",
    "start": "345280",
    "end": "347880"
  },
  {
    "text": "and that'll be fine that is unlikely to",
    "start": "347880",
    "end": "349960"
  },
  {
    "text": "happen because you know there's issues",
    "start": "349960",
    "end": "351600"
  },
  {
    "text": "of memory for example we want to put 1.2",
    "start": "351600",
    "end": "354120"
  },
  {
    "text": "billion items into our set you might not",
    "start": "354120",
    "end": "356680"
  },
  {
    "text": "have a maximum capacity of 1 you might",
    "start": "356680",
    "end": "358880"
  },
  {
    "text": "but in even then your hash function",
    "start": "358880",
    "end": "361759"
  },
  {
    "text": "might not be perfect and you know for",
    "start": "361759",
    "end": "363360"
  },
  {
    "text": "Strings and things might produce the",
    "start": "363360",
    "end": "364800"
  },
  {
    "text": "same hash for some complicated strings",
    "start": "364800",
    "end": "367039"
  },
  {
    "text": "so we're going to get some collisions so",
    "start": "367039",
    "end": "368759"
  },
  {
    "text": "what do you do well this is what you do",
    "start": "368759",
    "end": "370720"
  },
  {
    "text": "when you when you insert something into",
    "start": "370720",
    "end": "372840"
  },
  {
    "text": "this you say okay what what is the hash",
    "start": "372840",
    "end": "374720"
  },
  {
    "text": "of this value mod C so let's say that",
    "start": "374720",
    "end": "376800"
  },
  {
    "text": "that gives us a value of four right so",
    "start": "376800",
    "end": "379479"
  },
  {
    "text": "we come in here and we look oh hang on a",
    "start": "379479",
    "end": "380800"
  },
  {
    "text": "minute there's already something in the",
    "start": "380800",
    "end": "382840"
  },
  {
    "text": "four so what we do is we create a little",
    "start": "382840",
    "end": "384479"
  },
  {
    "text": "list at this at this position where we",
    "start": "384479",
    "end": "386880"
  },
  {
    "text": "have object two like you see like this",
    "start": "386880",
    "end": "390280"
  },
  {
    "text": "now this list is a slower data structure",
    "start": "390280",
    "end": "392479"
  },
  {
    "text": "because we're doing that linear search",
    "start": "392479",
    "end": "394160"
  },
  {
    "text": "but it's only got two objects in it so",
    "start": "394160",
    "end": "396199"
  },
  {
    "text": "this is much much faster so we have",
    "start": "396199",
    "end": "398520"
  },
  {
    "text": "another object object four that's coming",
    "start": "398520",
    "end": "401160"
  },
  {
    "text": "up this time and maybe it has a hash of",
    "start": "401160",
    "end": "402840"
  },
  {
    "text": "two so we put in a new one and that's",
    "start": "402840",
    "end": "405280"
  },
  {
    "text": "fine object in here and then we have",
    "start": "405280",
    "end": "408160"
  },
  {
    "text": "another one so this gets appended onto",
    "start": "408160",
    "end": "409800"
  },
  {
    "text": "here object two I'm giving them all the",
    "start": "409800",
    "end": "412560"
  },
  {
    "text": "same names my nameing convention is",
    "start": "412560",
    "end": "414000"
  },
  {
    "text": "rubbish you just hold lots of little",
    "start": "414000",
    "end": "415599"
  },
  {
    "text": "lists at each of these indices such that",
    "start": "415599",
    "end": "418400"
  },
  {
    "text": "anything that has the same hand hash",
    "start": "418400",
    "end": "419599"
  },
  {
    "text": "just gets put into this short list into",
    "start": "419599",
    "end": "422199"
  },
  {
    "text": "if your hash function is good and so",
    "start": "422199",
    "end": "423879"
  },
  {
    "text": "everything is is is reasonably well",
    "start": "423879",
    "end": "425319"
  },
  {
    "text": "distributed then you'll find that you",
    "start": "425319",
    "end": "427039"
  },
  {
    "text": "have roughly the same number in each",
    "start": "427039",
    "end": "428360"
  },
  {
    "text": "bucket that's kind of the idea now",
    "start": "428360",
    "end": "431360"
  },
  {
    "text": "what's the speed of lookup of this well",
    "start": "431360",
    "end": "433160"
  },
  {
    "text": "in the best case it's 01 because you say",
    "start": "433160",
    "end": "436080"
  },
  {
    "text": "okay is 17 in the data set you hash it",
    "start": "436080",
    "end": "440280"
  },
  {
    "text": "it comes out of 17 let's say you look",
    "start": "440280",
    "end": "442360"
  },
  {
    "text": "and there is always not an object there",
    "start": "442360",
    "end": "443800"
  },
  {
    "text": "and it's so you're done that's all you",
    "start": "443800",
    "end": "445639"
  },
  {
    "text": "have to do in a slightly worst case you",
    "start": "445639",
    "end": "447400"
  },
  {
    "text": "have a short list that you have to look",
    "start": "447400",
    "end": "448680"
  },
  {
    "text": "through right in the in the absolute",
    "start": "448680",
    "end": "450879"
  },
  {
    "text": "worst casee you have all of the items",
    "start": "450879",
    "end": "453520"
  },
  {
    "text": "have received the same hash and so you",
    "start": "453520",
    "end": "455039"
  },
  {
    "text": "have literally a list of length n here",
    "start": "455039",
    "end": "457199"
  },
  {
    "text": "right so in a sense the best case",
    "start": "457199",
    "end": "459319"
  },
  {
    "text": "scenario for a hash set is 01 and the",
    "start": "459319",
    "end": "462039"
  },
  {
    "text": "worst case is o",
    "start": "462039",
    "end": "463400"
  },
  {
    "text": "n but you rarely see o right if you've",
    "start": "463400",
    "end": "467240"
  },
  {
    "text": "given any thought to your design right",
    "start": "467240",
    "end": "469520"
  },
  {
    "text": "at all okay and so and it doesn't tend",
    "start": "469520",
    "end": "471440"
  },
  {
    "text": "to happen if if you are looking for the",
    "start": "471440",
    "end": "474080"
  },
  {
    "text": "hash 17 why is that quicker than looking",
    "start": "474080",
    "end": "477039"
  },
  {
    "text": "for 17 in say an AR raay like not right",
    "start": "477039",
    "end": "480080"
  },
  {
    "text": "and that's that's really interesting so",
    "start": "480080",
    "end": "481319"
  },
  {
    "text": "one of the downsides of a hash is it",
    "start": "481319",
    "end": "482840"
  },
  {
    "text": "there is a bit of memory and a bit of",
    "start": "482840",
    "end": "484560"
  },
  {
    "text": "computational overhead this 01 in some",
    "start": "484560",
    "end": "486800"
  },
  {
    "text": "sense is ever slightly worse than the",
    "start": "486800",
    "end": "488680"
  },
  {
    "text": "o01 array lookup that you would do where",
    "start": "488680",
    "end": "490319"
  },
  {
    "text": "you just index at 17 but for that to",
    "start": "490319",
    "end": "492599"
  },
  {
    "text": "work you would have to know that you",
    "start": "492599",
    "end": "494680"
  },
  {
    "text": "were only ever going to see indices that",
    "start": "494680",
    "end": "496360"
  },
  {
    "text": "were numbers and were between these two",
    "start": "496360",
    "end": "498879"
  },
  {
    "text": "values right so it might be that you",
    "start": "498879",
    "end": "501720"
  },
  {
    "text": "have that exact situation right you know",
    "start": "501720",
    "end": "503520"
  },
  {
    "text": "you're only going to have one between a",
    "start": "503520",
    "end": "505199"
  },
  {
    "text": "number between zero and 10,000 and so",
    "start": "505199",
    "end": "507919"
  },
  {
    "text": "and you're never going to have",
    "start": "507919",
    "end": "508599"
  },
  {
    "text": "duplicates and you're never going to",
    "start": "508599",
    "end": "510080"
  },
  {
    "text": "have collisions so just have an array",
    "start": "510080",
    "end": "512200"
  },
  {
    "text": "right you don't need to use a hashset",
    "start": "512200",
    "end": "514159"
  },
  {
    "text": "you don't need to use a dictionary in",
    "start": "514159",
    "end": "515680"
  },
  {
    "text": "Python to do that which is why we have",
    "start": "515680",
    "end": "517599"
  },
  {
    "text": "lists so again it comes back to that",
    "start": "517599",
    "end": "521080"
  },
  {
    "text": "idea of think a little bit about why",
    "start": "521080",
    "end": "522800"
  },
  {
    "text": "you're using a specific data structure",
    "start": "522800",
    "end": "524720"
  },
  {
    "text": "right just because you can have a list",
    "start": "524720",
    "end": "526839"
  },
  {
    "text": "of keys like this and and Associated",
    "start": "526839",
    "end": "528600"
  },
  {
    "text": "values or not doesn't mean you just have",
    "start": "528600",
    "end": "531040"
  },
  {
    "text": "to right and so um indexing just",
    "start": "531040",
    "end": "534120"
  },
  {
    "text": "straight off using a number is always",
    "start": "534120",
    "end": "535680"
  },
  {
    "text": "going to be the fastest way of doing it",
    "start": "535680",
    "end": "537279"
  },
  {
    "text": "I've had to go implementing this in p",
    "start": "537279",
    "end": "539279"
  },
  {
    "text": "and let's have a look so I implemented",
    "start": "539279",
    "end": "540920"
  },
  {
    "text": "this as a short class now of course",
    "start": "540920",
    "end": "542079"
  },
  {
    "text": "you'd be ill advised to use this class",
    "start": "542079",
    "end": "543880"
  },
  {
    "text": "right because it's a perfectly good set",
    "start": "543880",
    "end": "546200"
  },
  {
    "text": "in Python right which is called a set",
    "start": "546200",
    "end": "549079"
  },
  {
    "text": "and you can use that and it implements",
    "start": "549079",
    "end": "551279"
  },
  {
    "text": "this but mostly in C and it's much much",
    "start": "551279",
    "end": "553560"
  },
  {
    "text": "faster so definitely use that um let's",
    "start": "553560",
    "end": "556880"
  },
  {
    "text": "just draw a brief distinction between",
    "start": "556880",
    "end": "558399"
  },
  {
    "text": "the two types A hashset is one where you",
    "start": "558399",
    "end": "560240"
  },
  {
    "text": "store only the numbers and you're",
    "start": "560240",
    "end": "561560"
  },
  {
    "text": "essentially trying to work out what's in",
    "start": "561560",
    "end": "563480"
  },
  {
    "text": "there and what's not in there and you",
    "start": "563480",
    "end": "564760"
  },
  {
    "text": "can do things you can do standard set",
    "start": "564760",
    "end": "566560"
  },
  {
    "text": "notation things from mathematics so for",
    "start": "566560",
    "end": "568279"
  },
  {
    "text": "example intersection of sets the union",
    "start": "568279",
    "end": "570279"
  },
  {
    "text": "of sets and things like this um this was",
    "start": "570279",
    "end": "573240"
  },
  {
    "text": "for a long time in Python implemented",
    "start": "573240",
    "end": "574760"
  },
  {
    "text": "literally as a dictionary um it's just",
    "start": "574760",
    "end": "577279"
  },
  {
    "text": "you never used for values a dictionary",
    "start": "577279",
    "end": "579640"
  },
  {
    "text": "is where you have your set of keys which",
    "start": "579640",
    "end": "582000"
  },
  {
    "text": "are this hashmap and then they link to",
    "start": "582000",
    "end": "584399"
  },
  {
    "text": "something that has a value like an index",
    "start": "584399",
    "end": "586880"
  },
  {
    "text": "in a book it is so your hashes are your",
    "start": "586880",
    "end": "589040"
  },
  {
    "text": "index into your element right so a set",
    "start": "589040",
    "end": "591680"
  },
  {
    "text": "doesn't have the actual element it just",
    "start": "591680",
    "end": "593000"
  },
  {
    "text": "has the indices right they they are both",
    "start": "593000",
    "end": "596160"
  },
  {
    "text": "implemented often in very very similar",
    "start": "596160",
    "end": "597800"
  },
  {
    "text": "ways because they're essentially the",
    "start": "597800",
    "end": "599640"
  },
  {
    "text": "same data structure it's just one of",
    "start": "599640",
    "end": "600959"
  },
  {
    "text": "them then has a pointer to something",
    "start": "600959",
    "end": "602279"
  },
  {
    "text": "else and perhaps we can look at",
    "start": "602279",
    "end": "603560"
  },
  {
    "text": "extending this to dictionaries in a",
    "start": "603560",
    "end": "604880"
  },
  {
    "text": "different video I partially implemented",
    "start": "604880",
    "end": "607200"
  },
  {
    "text": "a class here called hashset it has a",
    "start": "607200",
    "end": "609320"
  },
  {
    "text": "capacity which is the essentially the",
    "start": "609320",
    "end": "611279"
  },
  {
    "text": "size of the underlying data structure",
    "start": "611279",
    "end": "612760"
  },
  {
    "text": "that we're using which is a which is a",
    "start": "612760",
    "end": "614079"
  },
  {
    "text": "list and I initialize that data to have",
    "start": "614079",
    "end": "616519"
  },
  {
    "text": "nothing in it right so just be a long",
    "start": "616519",
    "end": "618000"
  },
  {
    "text": "list of nothing where when we start to",
    "start": "618000",
    "end": "620040"
  },
  {
    "text": "put elements in we can create a little",
    "start": "620040",
    "end": "621600"
  },
  {
    "text": "entry there and then there's really only",
    "start": "621600",
    "end": "623079"
  },
  {
    "text": "a few functions we have to implement I'm",
    "start": "623079",
    "end": "625640"
  },
  {
    "text": "not implementing most of the set",
    "start": "625640",
    "end": "626959"
  },
  {
    "text": "functions because you know I've got",
    "start": "626959",
    "end": "629360"
  },
  {
    "text": "other things to do but there's an you",
    "start": "629360",
    "end": "631160"
  },
  {
    "text": "want to be able to add an item ideally",
    "start": "631160",
    "end": "632920"
  },
  {
    "text": "you want to be able to remove an item",
    "start": "632920",
    "end": "634120"
  },
  {
    "text": "although I haven't implemented this and",
    "start": "634120",
    "end": "635480"
  },
  {
    "text": "you want to use the contains function to",
    "start": "635480",
    "end": "637360"
  },
  {
    "text": "be able to use the in keyword so",
    "start": "637360",
    "end": "639240"
  },
  {
    "text": "remember when we were doing binary",
    "start": "639240",
    "end": "640560"
  },
  {
    "text": "search we we tested against um whether",
    "start": "640560",
    "end": "643560"
  },
  {
    "text": "something was in 17 was in our list",
    "start": "643560",
    "end": "646160"
  },
  {
    "text": "we'll be able to do that on this set",
    "start": "646160",
    "end": "647560"
  },
  {
    "text": "we'll be able to say is 17 in our set so",
    "start": "647560",
    "end": "649760"
  },
  {
    "text": "how do we implement this well actually",
    "start": "649760",
    "end": "651200"
  },
  {
    "text": "there's very little code involved python",
    "start": "651200",
    "end": "653079"
  },
  {
    "text": "implements an underlying hash function",
    "start": "653079",
    "end": "654600"
  },
  {
    "text": "that you can use rather than writing",
    "start": "654600",
    "end": "656079"
  },
  {
    "text": "your own every time right you could",
    "start": "656079",
    "end": "657480"
  },
  {
    "text": "write your own if you were very if you",
    "start": "657480",
    "end": "658920"
  },
  {
    "text": "had had a specific data structure you",
    "start": "658920",
    "end": "660240"
  },
  {
    "text": "were very worried about and you wanted",
    "start": "660240",
    "end": "661680"
  },
  {
    "text": "maximum speed um in Python the hash of",
    "start": "661680",
    "end": "664839"
  },
  {
    "text": "an integer is just the integer we knew",
    "start": "664839",
    "end": "666600"
  },
  {
    "text": "we knew this a hash of a string will be",
    "start": "666600",
    "end": "668440"
  },
  {
    "text": "calculated in a different way but will",
    "start": "668440",
    "end": "670079"
  },
  {
    "text": "still give you a number right it could",
    "start": "670079",
    "end": "671639"
  },
  {
    "text": "be very large and it could be positive",
    "start": "671639",
    "end": "673279"
  },
  {
    "text": "or negative but it will be a number in",
    "start": "673279",
    "end": "675720"
  },
  {
    "text": "this case we're only really looking at",
    "start": "675720",
    "end": "677079"
  },
  {
    "text": "integers for the sake of simplicity so",
    "start": "677079",
    "end": "679519"
  },
  {
    "text": "at the beginning of AD I'm going to have",
    "start": "679519",
    "end": "681560"
  },
  {
    "text": "our integer I that I'm trying to add",
    "start": "681560",
    "end": "683399"
  },
  {
    "text": "into our hash set we're going to create",
    "start": "683399",
    "end": "685720"
  },
  {
    "text": "the hash of I and then we're going to",
    "start": "685720",
    "end": "687600"
  },
  {
    "text": "call H mod the capacity of our data so",
    "start": "687600",
    "end": "690760"
  },
  {
    "text": "that we can run this on a very small",
    "start": "690760",
    "end": "692079"
  },
  {
    "text": "hashset with very few bins or a very",
    "start": "692079",
    "end": "693880"
  },
  {
    "text": "large hashset with lots and lots of bins",
    "start": "693880",
    "end": "695839"
  },
  {
    "text": "and then actually deciding whether",
    "start": "695839",
    "end": "697480"
  },
  {
    "text": "something's already in the data is quite",
    "start": "697480",
    "end": "699519"
  },
  {
    "text": "easy we look up the data element at the",
    "start": "699519",
    "end": "702839"
  },
  {
    "text": "correct index which is given by hash our",
    "start": "702839",
    "end": "705079"
  },
  {
    "text": "hash mod the capacity and then we say if",
    "start": "705079",
    "end": "707560"
  },
  {
    "text": "it's not none which means that there's",
    "start": "707560",
    "end": "709440"
  },
  {
    "text": "already something in there we append it",
    "start": "709440",
    "end": "711360"
  },
  {
    "text": "to the list that's in there we add it",
    "start": "711360",
    "end": "713240"
  },
  {
    "text": "onto the list if it is none we just",
    "start": "713240",
    "end": "716079"
  },
  {
    "text": "create a new little list at that",
    "start": "716079",
    "end": "717440"
  },
  {
    "text": "location with our single line item in it",
    "start": "717440",
    "end": "719680"
  },
  {
    "text": "and then really the contains function is",
    "start": "719680",
    "end": "721920"
  },
  {
    "text": "exactly the same so in Python if you",
    "start": "721920",
    "end": "724440"
  },
  {
    "text": "implement this underscore underscore",
    "start": "724440",
    "end": "726160"
  },
  {
    "text": "contains function what you're doing is",
    "start": "726160",
    "end": "728000"
  },
  {
    "text": "is allowing it to use the in keyword",
    "start": "728000",
    "end": "729920"
  },
  {
    "text": "essentially and so we're going to say",
    "start": "729920",
    "end": "731600"
  },
  {
    "text": "okay we're going to create our hash in",
    "start": "731600",
    "end": "732639"
  },
  {
    "text": "the exact same way we're going to again",
    "start": "732639",
    "end": "735680"
  },
  {
    "text": "calculate the modulo so that we are",
    "start": "735680",
    "end": "737519"
  },
  {
    "text": "within our capacity limit and then we",
    "start": "737519",
    "end": "739720"
  },
  {
    "text": "just say Okay is the data at that",
    "start": "739720",
    "end": "741600"
  },
  {
    "text": "location none if it's",
    "start": "741600",
    "end": "743760"
  },
  {
    "text": "not can we find our value we're looking",
    "start": "743760",
    "end": "746160"
  },
  {
    "text": "for in that little list right and",
    "start": "746160",
    "end": "747600"
  },
  {
    "text": "hopefully that list isn't too long so we",
    "start": "747600",
    "end": "749120"
  },
  {
    "text": "can just use the in keyword which will",
    "start": "749120",
    "end": "750880"
  },
  {
    "text": "just be a little linear search but it",
    "start": "750880",
    "end": "752440"
  },
  {
    "text": "won't take too long there are better",
    "start": "752440",
    "end": "753959"
  },
  {
    "text": "ways to implement hashmaps right than",
    "start": "753959",
    "end": "756399"
  },
  {
    "text": "this this is a demonstration of a kind",
    "start": "756399",
    "end": "757959"
  },
  {
    "text": "of minimum Bare Bones implementation",
    "start": "757959",
    "end": "760000"
  },
  {
    "text": "that does work at least as far as I know",
    "start": "760000",
    "end": "762360"
  },
  {
    "text": "I've also written a print function so I",
    "start": "762360",
    "end": "763920"
  },
  {
    "text": "can see what's in this in the uh in the",
    "start": "763920",
    "end": "766079"
  },
  {
    "text": "set so let's test it out right so I'm",
    "start": "766079",
    "end": "767920"
  },
  {
    "text": "going to run python minus IM map.",
    "start": "767920",
    "end": "771279"
  },
  {
    "text": "piy okay we're in Python and we have our",
    "start": "771279",
    "end": "773519"
  },
  {
    "text": "hash set now so we're going to create a",
    "start": "773519",
    "end": "774680"
  },
  {
    "text": "new one how many elements do we want to",
    "start": "774680",
    "end": "775959"
  },
  {
    "text": "test it with same numbers again or",
    "start": "775959",
    "end": "777760"
  },
  {
    "text": "slightly fewer just for say save",
    "start": "777760",
    "end": "778959"
  },
  {
    "text": "ourselves some time all right so ruce",
    "start": "778959",
    "end": "781560"
  },
  {
    "text": "let's say our hash set H is equal to a",
    "start": "781560",
    "end": "784959"
  },
  {
    "text": "hash set with a maximum size of let's",
    "start": "784959",
    "end": "787639"
  },
  {
    "text": "say a million elements right what does",
    "start": "787639",
    "end": "789720"
  },
  {
    "text": "this mean well it means that our",
    "start": "789720",
    "end": "790959"
  },
  {
    "text": "underlying data structure is only a",
    "start": "790959",
    "end": "792240"
  },
  {
    "text": "million in size it doesn't mean we can",
    "start": "792240",
    "end": "794199"
  },
  {
    "text": "only store a million elements because",
    "start": "794199",
    "end": "795560"
  },
  {
    "text": "some of them just might have the same",
    "start": "795560",
    "end": "796600"
  },
  {
    "text": "hash right um You can really store as",
    "start": "796600",
    "end": "799040"
  },
  {
    "text": "many elements as you want but of course",
    "start": "799040",
    "end": "800560"
  },
  {
    "text": "the more you store Beyond Your Capacity",
    "start": "800560",
    "end": "803079"
  },
  {
    "text": "the more more collisions you're going to",
    "start": "803079",
    "end": "804600"
  },
  {
    "text": "have the slower it will get right so",
    "start": "804600",
    "end": "807760"
  },
  {
    "text": "let's create an now our random in Array",
    "start": "807760",
    "end": "810440"
  },
  {
    "text": "of um in fact let's let's just do our",
    "start": "810440",
    "end": "812600"
  },
  {
    "text": "numbers like we did before right so",
    "start": "812600",
    "end": "814480"
  },
  {
    "text": "that's much much easier so let's say we",
    "start": "814480",
    "end": "816839"
  },
  {
    "text": "have our list which is equal to I for I",
    "start": "816839",
    "end": "819560"
  },
  {
    "text": "in range and then let's say we're going",
    "start": "819560",
    "end": "821959"
  },
  {
    "text": "to put 10 million in there right so that",
    "start": "821959",
    "end": "824480"
  },
  {
    "text": "means we're going to have around 10 in",
    "start": "824480",
    "end": "826839"
  },
  {
    "text": "each of our bins right which means there",
    "start": "826839",
    "end": "829399"
  },
  {
    "text": "short linear search for a lookup but not",
    "start": "829399",
    "end": "831440"
  },
  {
    "text": "anything like a linear search across",
    "start": "831440",
    "end": "833399"
  },
  {
    "text": "across 10 million elements so if I look",
    "start": "833399",
    "end": "835560"
  },
  {
    "text": "at if I look at list first 10 items then",
    "start": "835560",
    "end": "838800"
  },
  {
    "text": "you have n to n so now we can see we can",
    "start": "838800",
    "end": "841279"
  },
  {
    "text": "add all these items into our hash set",
    "start": "841279",
    "end": "844480"
  },
  {
    "text": "right which is a little bit of a slow",
    "start": "844480",
    "end": "845759"
  },
  {
    "text": "proces but shouldn't be too bad so we",
    "start": "845759",
    "end": "847440"
  },
  {
    "text": "can say for uh integer in uh",
    "start": "847440",
    "end": "853399"
  },
  {
    "text": "list h. add",
    "start": "853399",
    "end": "856880"
  },
  {
    "text": "I and it's just going to go off and do",
    "start": "856880",
    "end": "858959"
  },
  {
    "text": "that by the way if you use the actual",
    "start": "858959",
    "end": "861000"
  },
  {
    "text": "python set it's much much faster right",
    "start": "861000",
    "end": "863040"
  },
  {
    "text": "it's faster because it has finished now",
    "start": "863040",
    "end": "865360"
  },
  {
    "text": "just just not that it's not that bad",
    "start": "865360",
    "end": "866800"
  },
  {
    "text": "it's faster because this should be done",
    "start": "866800",
    "end": "868279"
  },
  {
    "text": "in low level C code right what I'm doing",
    "start": "868279",
    "end": "870680"
  },
  {
    "text": "is a lot of intermediate python code",
    "start": "870680",
    "end": "872720"
  },
  {
    "text": "checking variables going back to C",
    "start": "872720",
    "end": "874320"
  },
  {
    "text": "coming back again there's a lot of",
    "start": "874320",
    "end": "875680"
  },
  {
    "text": "waiting around for things that happen",
    "start": "875680",
    "end": "877519"
  },
  {
    "text": "Okay so now we can see if 17 is in our",
    "start": "877519",
    "end": "879160"
  },
  {
    "text": "hashset so we can say 17 in h and it",
    "start": "879160",
    "end": "883040"
  },
  {
    "text": "says true right and that works and it",
    "start": "883040",
    "end": "885240"
  },
  {
    "text": "worked really really quickly even though",
    "start": "885240",
    "end": "886680"
  },
  {
    "text": "we've got a 10 million value so we can",
    "start": "886680",
    "end": "888880"
  },
  {
    "text": "find is's another one in there so we",
    "start": "888880",
    "end": "890160"
  },
  {
    "text": "could say you know",
    "start": "890160",
    "end": "892240"
  },
  {
    "text": "999,999 in h it is now if we take that",
    "start": "892240",
    "end": "895600"
  },
  {
    "text": "out of a list just like we you know",
    "start": "895600",
    "end": "897639"
  },
  {
    "text": "we've done before so we could say okay",
    "start": "897639",
    "end": "899320"
  },
  {
    "text": "so LS so hash I can't take it out of the",
    "start": "899320",
    "end": "902480"
  },
  {
    "text": "list cuz I didn't I didn't implement the",
    "start": "902480",
    "end": "903800"
  },
  {
    "text": "remove function did",
    "start": "903800",
    "end": "906440"
  },
  {
    "text": "I um well let's just implement it",
    "start": "906440",
    "end": "908880"
  },
  {
    "text": "quickly now uh you can speed fast",
    "start": "908880",
    "end": "911839"
  },
  {
    "text": "forward this bit um it's going to be",
    "start": "911839",
    "end": "914000"
  },
  {
    "text": "exactly the same as our insert function",
    "start": "914000",
    "end": "917279"
  },
  {
    "text": "except we're going to delete it",
    "start": "917279",
    "end": "920959"
  },
  {
    "text": "instead in h yeah okay so I've I've I've",
    "start": "920959",
    "end": "924920"
  },
  {
    "text": "now added a remove function this will",
    "start": "924920",
    "end": "926320"
  },
  {
    "text": "teach me to be lazy um where is very",
    "start": "926320",
    "end": "929000"
  },
  {
    "text": "very similar to the ad function except",
    "start": "929000",
    "end": "930480"
  },
  {
    "text": "instead of a um appending a new item to",
    "start": "930480",
    "end": "933720"
  },
  {
    "text": "a list we're going to remove it from",
    "start": "933720",
    "end": "934880"
  },
  {
    "text": "that list if it's there okay so now",
    "start": "934880",
    "end": "937480"
  },
  {
    "text": "let's test this out so we we know that",
    "start": "937480",
    "end": "939680"
  },
  {
    "text": "999999 is in h so let's now remove it",
    "start": "939680",
    "end": "943360"
  },
  {
    "text": "from H h.",
    "start": "943360",
    "end": "945759"
  },
  {
    "text": "remove right that seems to have done",
    "start": "945759",
    "end": "947600"
  },
  {
    "text": "something so now can we say a uh",
    "start": "947600",
    "end": "950600"
  },
  {
    "text": "999999 in h false right and actually if",
    "start": "950600",
    "end": "954480"
  },
  {
    "text": "we look at the data structure we can see",
    "start": "954480",
    "end": "955959"
  },
  {
    "text": "that so if we go um if we do hash on of",
    "start": "955959",
    "end": "959199"
  },
  {
    "text": "999999 it should be the same number",
    "start": "959199",
    "end": "961920"
  },
  {
    "text": "again because we already said that",
    "start": "961920",
    "end": "963160"
  },
  {
    "text": "hashes in Python just return a number",
    "start": "963160",
    "end": "965079"
  },
  {
    "text": "for an integer so now let's look at our",
    "start": "965079",
    "end": "967319"
  },
  {
    "text": "data structure at that location so if we",
    "start": "967319",
    "end": "969279"
  },
  {
    "text": "look at the what what we'll find is",
    "start": "969279",
    "end": "971920"
  },
  {
    "text": "we'll find all the numbers that module",
    "start": "971920",
    "end": "973519"
  },
  {
    "text": "over capacity are the same are",
    "start": "973519",
    "end": "976120"
  },
  {
    "text": "999999 so let's have a quick look so if",
    "start": "976120",
    "end": "978639"
  },
  {
    "text": "we go H do data",
    "start": "978639",
    "end": "983160"
  },
  {
    "text": "at nine one shouldn't normally look at",
    "start": "983160",
    "end": "986639"
  },
  {
    "text": "the internals of a data structure like",
    "start": "986639",
    "end": "988120"
  },
  {
    "text": "this but sometimes it's useful for",
    "start": "988120",
    "end": "989240"
  },
  {
    "text": "learning you can see we've got 1,",
    "start": "989240",
    "end": "992319"
  },
  {
    "text": "999,999 we also have 2, 999,9 all the",
    "start": "992319",
    "end": "996959"
  },
  {
    "text": "increments of a million right on this",
    "start": "996959",
    "end": "999240"
  },
  {
    "text": "value okay except for",
    "start": "999240",
    "end": "1002079"
  },
  {
    "text": "999,999 which we removed and I'm now",
    "start": "1002079",
    "end": "1005360"
  },
  {
    "text": "wishing I picked a shorter number to say",
    "start": "1005360",
    "end": "1008120"
  },
  {
    "text": "but anyway",
    "start": "1008120",
    "end": "1009759"
  },
  {
    "text": "so a hash set is is an extremely useful",
    "start": "1009759",
    "end": "1013800"
  },
  {
    "text": "um data structure right so in Python",
    "start": "1013800",
    "end": "1017360"
  },
  {
    "text": "using a set will allow you to to very",
    "start": "1017360",
    "end": "1018880"
  },
  {
    "text": "quickly find what numbers are in what",
    "start": "1018880",
    "end": "1020800"
  },
  {
    "text": "lists finding the numbers that are",
    "start": "1020800",
    "end": "1022759"
  },
  {
    "text": "common between two lists and things like",
    "start": "1022759",
    "end": "1024520"
  },
  {
    "text": "this is extremely useful perhaps the",
    "start": "1024520",
    "end": "1026798"
  },
  {
    "text": "extended version is the one you see most",
    "start": "1026799",
    "end": "1028400"
  },
  {
    "text": "of all which is the dictionary right so",
    "start": "1028400",
    "end": "1030199"
  },
  {
    "text": "in a dictionary we now add to these",
    "start": "1030199",
    "end": "1032438"
  },
  {
    "text": "indices we add an actual item that we",
    "start": "1032439",
    "end": "1035000"
  },
  {
    "text": "can add so you have key value Pairs and",
    "start": "1035000",
    "end": "1037160"
  },
  {
    "text": "this hashmap is perhaps something to",
    "start": "1037160",
    "end": "1039520"
  },
  {
    "text": "look at next time global trading firm",
    "start": "1039520",
    "end": "1042360"
  },
  {
    "text": "and computer file supporter James straet",
    "start": "1042360",
    "end": "1045240"
  },
  {
    "text": "have made a little puzzle for us",
    "start": "1045240",
    "end": "1047400"
  },
  {
    "text": "all here it is it involves placing",
    "start": "1047400",
    "end": "1050120"
  },
  {
    "text": "numbers in this Manhattan grid",
    "start": "1050120",
    "end": "1052280"
  },
  {
    "text": "representing skyscrapers and you got to",
    "start": "1052280",
    "end": "1054919"
  },
  {
    "text": "figure out what Heights of skyscrapers",
    "start": "1054919",
    "end": "1057120"
  },
  {
    "text": "block other ones does it look like",
    "start": "1057120",
    "end": "1058919"
  },
  {
    "text": "something you could crack now the",
    "start": "1058919",
    "end": "1060720"
  },
  {
    "text": "puzzle's just for fun but it is aimed at",
    "start": "1060720",
    "end": "1062559"
  },
  {
    "text": "drawing a bit of attention to Jane",
    "start": "1062559",
    "end": "1064440"
  },
  {
    "text": "Street's summer am event which is going",
    "start": "1064440",
    "end": "1067799"
  },
  {
    "text": "to be in New York that's the Academy of",
    "start": "1067799",
    "end": "1070160"
  },
  {
    "text": "math and programming now this is",
    "start": "1070160",
    "end": "1072039"
  },
  {
    "text": "something for recent high school",
    "start": "1072039",
    "end": "1073400"
  },
  {
    "text": "graduates to come to New York and",
    "start": "1073400",
    "end": "1074840"
  },
  {
    "text": "immerse themselves in things like Game",
    "start": "1074840",
    "end": "1076760"
  },
  {
    "text": "Theory programming data anal analysis",
    "start": "1076760",
    "end": "1079280"
  },
  {
    "text": "all that good stuff and it's aimed at",
    "start": "1079280",
    "end": "1081320"
  },
  {
    "text": "opening doors to students who perhaps",
    "start": "1081320",
    "end": "1082880"
  },
  {
    "text": "have faced barriers to getting Advanced",
    "start": "1082880",
    "end": "1084919"
  },
  {
    "text": "stem education opportunities like this",
    "start": "1084919",
    "end": "1087440"
  },
  {
    "text": "it's an amazing program and it's a very",
    "start": "1087440",
    "end": "1089880"
  },
  {
    "text": "generous opportunity there are more",
    "start": "1089880",
    "end": "1091679"
  },
  {
    "text": "details in the video description it's",
    "start": "1091679",
    "end": "1093600"
  },
  {
    "text": "well worth a look and by the way you",
    "start": "1093600",
    "end": "1095440"
  },
  {
    "text": "don't have to complete the skyscraper",
    "start": "1095440",
    "end": "1097240"
  },
  {
    "text": "puzzle to apply that's just something",
    "start": "1097240",
    "end": "1098919"
  },
  {
    "text": "they've made for fun and you can do the",
    "start": "1098919",
    "end": "1101159"
  },
  {
    "text": "puzzle even if you're not interested in",
    "start": "1101159",
    "end": "1103000"
  },
  {
    "text": "the thing if you want to find out more",
    "start": "1103000",
    "end": "1105240"
  },
  {
    "text": "there's going to be links in all the",
    "start": "1105240",
    "end": "1106280"
  },
  {
    "text": "usual places you know the video",
    "start": "1106280",
    "end": "1107679"
  },
  {
    "text": "description comments things you can",
    "start": "1107679",
    "end": "1109159"
  },
  {
    "text": "click on check it out and thanks to Jane",
    "start": "1109159",
    "end": "1111600"
  },
  {
    "text": "Street for supporting this",
    "start": "1111600",
    "end": "1113570"
  },
  {
    "text": "[Music]",
    "start": "1113570",
    "end": "1116769"
  },
  {
    "text": "episode",
    "start": "1117120",
    "end": "1120120"
  }
]