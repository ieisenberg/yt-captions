[
  {
    "text": "Okay, so endianness it's, um, it's a simple problem really",
    "start": "20",
    "end": "3480"
  },
  {
    "text": "Computers these days arrange their memory in terms of bytes. So 8-bit values, eight binary digits, 8 bits",
    "start": "4360",
    "end": "10960"
  },
  {
    "text": "arranged in the computer's memory and we have an individual address for those things, for each of those bytes.",
    "start": "11710",
    "end": "16859"
  },
  {
    "text": "Now, the computers don't deal always with bytes. Sometimes they use 16-bit values",
    "start": "16900",
    "end": "22230"
  },
  {
    "text": "sometimes they use 32-bit values and so you have an interesting question is that you've got say",
    "start": "22230",
    "end": "27039"
  },
  {
    "text": "a 32-bit value, let's just stick with 32-bit values for now",
    "start": "27220",
    "end": "30220"
  },
  {
    "text": "and you need to assign it into a memory location.",
    "start": "30900",
    "end": "33840"
  },
  {
    "text": "So you've got 8 bits per memory location per memory address and you've got 32 bits so you're gonna have to split it into 4",
    "start": "36520",
    "end": "43920"
  },
  {
    "text": "bytes worth of things, four individual pieces, and then assign each of those individual pieces",
    "start": "44079",
    "end": "49499"
  },
  {
    "text": "into one memory location. Let's pick a 32-bit value and we'll do it in hexadecimal. Just cause it makes the numbers easier.",
    "start": "50260",
    "end": "57538"
  },
  {
    "text": "So the 0x means it's hexadecimal and we're gonna go for 0 0 C 0",
    "start": "57570",
    "end": "64169"
  },
  {
    "text": "F F E E. So this is going to be",
    "start": "65700",
    "end": "68500"
  },
  {
    "text": "our 32-bit value that we're going to want to assign into",
    "start": "69320",
    "end": "73300"
  },
  {
    "text": "four different memory locations.",
    "start": "73540",
    "end": "76700"
  },
  {
    "text": "So this would be address 0 1 2 3 and then 4 it would go on like that, memory locations.",
    "start": "76750",
    "end": "84180"
  },
  {
    "text": "So each of those addresses is going to represent a byte.",
    "start": "84180",
    "end": "86369"
  },
  {
    "text": "That's the number between 0 and 255 which is equivalent to two hexadecimal digits. Each hexadecimal digit represents one nibble four bits",
    "start": "86369",
    "end": "94139"
  },
  {
    "text": "So two of them is a bytes worth. Eight of them is 32 bits worth. So we need to assign",
    "start": "94140",
    "end": "98879"
  },
  {
    "text": "these bytes into",
    "start": "99460",
    "end": "101460"
  },
  {
    "text": "the memory locations. So how do we do it? What would your suggestion be, Shawn?",
    "start": "101920",
    "end": "107060"
  },
  {
    "text": "Shawn: \"To me, it looks like you were just kind of translate that down and have",
    "start": "107060",
    "end": "110600"
  },
  {
    "text": "the 0 0 in 0 and just carry on like that.\"",
    "start": "110600",
    "end": "114600"
  },
  {
    "text": "So you want me to put the 0 0 there and then I put C 0 in there?",
    "start": "114600",
    "end": "119460"
  },
  {
    "text": "I put FF in there and then E E in there?",
    "start": "119460",
    "end": "123020"
  },
  {
    "text": "Shawn: \"Yeah, but I do feel like I'm walking into a trap.\"",
    "start": "123020",
    "end": "125219"
  },
  {
    "text": "No, obviously you like to eat your hard-boiled eggs from the big end",
    "start": "125260",
    "end": "129720"
  },
  {
    "text": "Shawn: \"Right.\"",
    "start": "130539",
    "end": "131659"
  },
  {
    "text": "Ok.",
    "start": "131659",
    "end": "132430"
  },
  {
    "text": "There is another way you could it though. You could start",
    "start": "132430",
    "end": "134640"
  },
  {
    "text": "from the little end and there is a reason why I'm talking about a hard-boiled egg. I haven't completely flipped in this computerphile video.",
    "start": "135010",
    "end": "140640"
  },
  {
    "text": "We'll come back to that in a minute.",
    "start": "140640",
    "end": "142319"
  },
  {
    "text": "Let's draw out another set of four memory locations.",
    "start": "142320",
    "end": "145120"
  },
  {
    "text": "0 1 2 3 & 4. We could also have started from this end",
    "start": "145160",
    "end": "150140"
  },
  {
    "text": "and put the EE in there, the F F in there",
    "start": "150140",
    "end": "153420"
  },
  {
    "text": "the C 0 in there, and then the two zeros in there and that would be another way of doing it.",
    "start": "153480",
    "end": "159180"
  },
  {
    "text": "In actual fact, as long as you're consistent in the way you do it",
    "start": "159180",
    "end": "162500"
  },
  {
    "text": "and you build a computer knowing that if it's going to read a 32-bit value",
    "start": "162500",
    "end": "165440"
  },
  {
    "text": "they're going to be in this order or that order or whatever order and it's consistent then your computer system would work.",
    "start": "165440",
    "end": "171000"
  },
  {
    "text": "What we've done here is we've got two different ways of writing these things out",
    "start": "171700",
    "end": "176099"
  },
  {
    "text": "and this is basically the issue around endianness is: How does your computer store values that are bigger than 1 byte",
    "start": "176400",
    "end": "183659"
  },
  {
    "text": "in memory when each memory is made up of 8-bit locations where we can store 8 bits?",
    "start": "183920",
    "end": "188660"
  },
  {
    "text": "So how do we map say a 32-bit value, a 64-bit value, a 16-bit value",
    "start": "188660",
    "end": "193320"
  },
  {
    "text": "into those 8-bit locations. And this is where we come back to our friend the egg.",
    "start": "193320",
    "end": "198020"
  },
  {
    "text": "There's a book published in the 1700s by Jonathan Swift called Gulliver's Travels.",
    "start": "198100",
    "end": "202760"
  },
  {
    "text": "It's a novel, it's a satire of society. In this novel, Gulliver goes on his travels.",
    "start": "202880",
    "end": "207980"
  },
  {
    "text": "The first place he goes to is a town called Lilliput.",
    "start": "207980",
    "end": "210540"
  },
  {
    "text": "Lilliput, everyone's very tiny, but they like to argue about things and apparently - I haven't read the book -",
    "start": "210540",
    "end": "214889"
  },
  {
    "text": "but apparently at one point civil war breaks out",
    "start": "214889",
    "end": "218420"
  },
  {
    "text": "over which way do you eat an egg?",
    "start": "218740",
    "end": "220980"
  },
  {
    "text": "Do you start from the top, the little end, because it's pointy or do you start from the bottom, the big end?",
    "start": "221440",
    "end": "228360"
  },
  {
    "text": "Half of Lilliput was little-endian.",
    "start": "228360",
    "end": "230190"
  },
  {
    "text": "They would start from the the pointy end and the other half were big-endian. They would start from the other end.",
    "start": "230190",
    "end": "235499"
  },
  {
    "text": "So they would sort of smack it down like that",
    "start": "235500",
    "end": "237640"
  },
  {
    "text": "and start peeling their eggs or hitting it with, uh, probably with a teaspoon and serving it",
    "start": "237980",
    "end": "242000"
  },
  {
    "text": "and dipping their yolk in there.",
    "start": "242000",
    "end": "243780"
  },
  {
    "text": "And we've got here the two main types that are used.",
    "start": "243780",
    "end": "246560"
  },
  {
    "text": "This one is called big-endian and this one is called little-endian.",
    "start": "246570",
    "end": "252629"
  },
  {
    "text": "And the reason why it's called that is because if we were to write this out as a binary number",
    "start": "252630",
    "end": "256589"
  },
  {
    "text": "If you've got a hexadecimal number, you can convert each of the hexadecimal digits into four binary digits",
    "start": "256720",
    "end": "262640"
  },
  {
    "text": "it's relatively easy to write it out.",
    "start": "262640",
    "end": "264480"
  },
  {
    "text": "So we get 1 1 1 0 for the first E, followed by 1 1 1 0",
    "start": "264480",
    "end": "270700"
  },
  {
    "text": "going backwards for the second E.",
    "start": "270720",
    "end": "273320"
  },
  {
    "text": "Then we get 1 1 ... 0 0 and this should be 32 bits there.",
    "start": "273320",
    "end": "277840"
  },
  {
    "text": "Now each of these bits has a number associated with it.",
    "start": "277840",
    "end": "281240"
  },
  {
    "text": "So this would be considered bit 0 and this would be considered bit 31.",
    "start": "281240",
    "end": "286840"
  },
  {
    "text": "And then we can count down, so this is then bit 24. That's bit 23.",
    "start": "286840",
    "end": "291320"
  },
  {
    "text": "Bit 16 and 15.",
    "start": "291520",
    "end": "293440"
  },
  {
    "text": "And then that would be the bit 8 and that's bit 7.",
    "start": "293440",
    "end": "296940"
  },
  {
    "text": "And so this byte, the E E, is what we call the least significant byte",
    "start": "296940",
    "end": "300920"
  },
  {
    "text": "because it's got the bits with the least numbers on them, the smaller bits.",
    "start": "300920",
    "end": "304100"
  },
  {
    "text": "And this is the most significant byte because it's got the bits with the higher numbers on: 24-to-31 as opposed to 0-to-7.",
    "start": "304100",
    "end": "311640"
  },
  {
    "text": "Someone had the big idea that the way to name these things was to reference the egg Wars of Gulliver's Travels",
    "start": "311640",
    "end": "316820"
  },
  {
    "text": "and to refer to",
    "start": "317080",
    "end": "318758"
  },
  {
    "text": "systems that started, the sensible way in my opinion, putting the 0 0 then C 0 then F F then EE",
    "start": "318760",
    "end": "325940"
  },
  {
    "text": "like that in memory, they would be big-endian systems.",
    "start": "325980",
    "end": "329300"
  },
  {
    "text": "People that started by putting E E at the bottom",
    "start": "329300",
    "end": "332340"
  },
  {
    "text": "and then F F C 0 0 0 would be called little-endian systems.",
    "start": "332440",
    "end": "336980"
  },
  {
    "text": "So that's why we call it endianness. It all traces back to eggs of Lilliput in Gulliver's Travels.",
    "start": "337270",
    "end": "343168"
  },
  {
    "text": "Now you might ask why have two systems at all, why not just standardize on doing it one way or the other?",
    "start": "343330",
    "end": "348569"
  },
  {
    "text": "Well, as I said, it doesn't make any difference as long as your computer system's consistent",
    "start": "348570",
    "end": "353380"
  },
  {
    "text": "the people who are writing the software know how it's done, the hardware designers know how it's done",
    "start": "353380",
    "end": "357240"
  },
  {
    "text": "everything's lined up in the right place and it isn't a problem.",
    "start": "357310",
    "end": "359969"
  },
  {
    "text": "But there are some advantages to doing it one way over the other.",
    "start": "361120",
    "end": "364540"
  },
  {
    "text": "So, for example with the big-endian system",
    "start": "364540",
    "end": "367300"
  },
  {
    "text": "it's what you naturally went for, you naturally went for a big-endian system.",
    "start": "367300",
    "end": "370940"
  },
  {
    "text": "And so the people who designed some of the IBM mainframes, the PowerPC architecture",
    "start": "370949",
    "end": "375809"
  },
  {
    "text": "the 68000 chip, and things like the original Macintosh and the Atari ST.",
    "start": "376240",
    "end": "380060"
  },
  {
    "text": "There all big-endian systems. So when they got a 32-bit value they start in the first address",
    "start": "380160",
    "end": "385220"
  },
  {
    "text": "they put the most significant byte and then they go down towards the least significant byte.",
    "start": "385229",
    "end": "390269"
  },
  {
    "text": "On the other hand, the 6502 chip, the ARM chip by default, it can work the other way",
    "start": "390960",
    "end": "396060"
  },
  {
    "text": "the Intel x86 and the AMD x86 chips, there all little-endian systems, Z80 was as well.",
    "start": "396060",
    "end": "401480"
  },
  {
    "text": "They will put the least significant byte first in memory, and there is an advantage from that",
    "start": "401700",
    "end": "407460"
  },
  {
    "text": "because when you're reading it and building the hardware",
    "start": "407460",
    "end": "410759"
  },
  {
    "text": "it doesn't matter whether you've got a",
    "start": "410760",
    "end": "414060"
  },
  {
    "text": "16-bit value or a 32-bit value. If we had a 16-bit value",
    "start": "414500",
    "end": "418180"
  },
  {
    "text": "let us have A B C D, that would be big-endian. And you could also write that",
    "start": "418180",
    "end": "424259"
  },
  {
    "text": "as C D A B, and then that would be little.",
    "start": "424260",
    "end": "427900"
  },
  {
    "text": "If it's a little-endian system, the first byte always goes in bits naught-to-7 the second byte always goes into bits 8-to-15",
    "start": "427900",
    "end": "435560"
  },
  {
    "text": "regardless of whether it's a 2-byte number, a 16-bit number, or a 32-bit number, or a 64-bit number.",
    "start": "435660",
    "end": "442000"
  },
  {
    "text": "So your hardware's simpler to design. On the other hand, if you're reading the memory in a debugger or something",
    "start": "442000",
    "end": "447880"
  },
  {
    "text": "it becomes harder and you have to manually rearrange the bytes in your own head.",
    "start": "447889",
    "end": "452779"
  },
  {
    "text": "There's also another system, which is sometimes referred to as PDP 11 ordering, or mix ordering",
    "start": "452840",
    "end": "458500"
  },
  {
    "text": "which is when you just sort of really mix it up and start from the middle and go out.",
    "start": "458580",
    "end": "462740"
  },
  {
    "text": "You can get really weird ordering, but we'll ignore that for now.",
    "start": "462740",
    "end": "465798"
  },
  {
    "text": "So generally on one system if it's not talking to anything else",
    "start": "466400",
    "end": "470419"
  },
  {
    "text": "it doesn't matter which endianness you need as long as you know what it is.",
    "start": "470420",
    "end": "473820"
  },
  {
    "text": "The problem comes is when you have one computer",
    "start": "474720",
    "end": "477620"
  },
  {
    "text": "communicating with another whether that's over a network",
    "start": "477780",
    "end": "480840"
  },
  {
    "text": "or whether that's by putting data onto a floppy disk, a USB stick, or something.",
    "start": "481349",
    "end": "485269"
  },
  {
    "text": "You've then got bytes laid out in something by one machine",
    "start": "485430",
    "end": "488750"
  },
  {
    "text": "which is being read by another machine and when you do that",
    "start": "488750",
    "end": "491720"
  },
  {
    "text": "you need to make sure that both machines agree on how the bytes are laid out.",
    "start": "492060",
    "end": "497139"
  },
  {
    "text": "So for example...",
    "start": "497140",
    "end": "498000"
  },
  {
    "text": "Networks, when they're transferring data across, they're going to need to agree what order do the bits come in?",
    "start": "498800",
    "end": "504580"
  },
  {
    "text": "What order do the bytes come in to represent a 32-bit number?",
    "start": "504590",
    "end": "508070"
  },
  {
    "text": "If they don't agree on a standard and the Internet, for example, is agreed on everything being big-endian, sensible choice",
    "start": "508139",
    "end": "514129"
  },
  {
    "text": "then",
    "start": "515459",
    "end": "516630"
  },
  {
    "text": "one machine will send it big-endian",
    "start": "516630",
    "end": "518300"
  },
  {
    "text": "the other machine will read it little-endian and get completely the wrong number out when they do it.",
    "start": "518300",
    "end": "522979"
  },
  {
    "text": "So the only time it really matters is when you're transferring data between machines of different types in which case you have to make sure",
    "start": "522979",
    "end": "529129"
  },
  {
    "text": "that you agree on what standard your using to transfer them.",
    "start": "529320",
    "end": "532380"
  },
  {
    "text": "Shawn: \"Where's that translation happen?\"",
    "start": "532500",
    "end": "533980"
  },
  {
    "text": "So that's a good question. Normally it will happen in the software. Say, for example",
    "start": "534620",
    "end": "539080"
  },
  {
    "text": "when you write software to communicate over a network using IP",
    "start": "539760",
    "end": "543770"
  },
  {
    "text": "there's various functions that you will call to take the number, say, for example, your TCP port number",
    "start": "543960",
    "end": "549829"
  },
  {
    "text": "so like, if you're trying to connect to a web server that's port 80 or port 443 if you've got encryption.",
    "start": "549830",
    "end": "554720"
  },
  {
    "text": "Rather than just setting the value directly in memory, you run it through a function",
    "start": "555120",
    "end": "560220"
  },
  {
    "text": "which is called network to host ordering",
    "start": "560220",
    "end": "563819"
  },
  {
    "text": "or host to network ordering depending on which way you're doing it.",
    "start": "563820",
    "end": "567950"
  },
  {
    "text": "So if you're setting the port number you'd use this one, if you're reading it from a network packet you'd use that one",
    "start": "567950",
    "end": "572220"
  },
  {
    "text": "and that will do the conversion for you, if needed.",
    "start": "572220",
    "end": "574399"
  },
  {
    "text": "So that thing will be defined on, say, an Intel system to convert from little-endian to big-endian.",
    "start": "574400",
    "end": "580639"
  },
  {
    "text": "But on a Motorola system using a 68000, which is natively big-endian, it will just do nothing and copy the values.",
    "start": "581550",
    "end": "587089"
  },
  {
    "text": "Shawn: \"Does it slow things down?\"",
    "start": "587340",
    "end": "589340"
  },
  {
    "text": "Um, yes, a bit.",
    "start": "589480",
    "end": "592399"
  },
  {
    "text": "So, for example, you have to",
    "start": "593100",
    "end": "595459"
  },
  {
    "text": "read the bytes individually and then shuffle them around in memory",
    "start": "596040",
    "end": "599519"
  },
  {
    "text": "in actual fact modern CPUs, modern ARM chips, modern Intel chips have",
    "start": "599520",
    "end": "604540"
  },
  {
    "text": "instructions that can move big-endian numbers even though they're natively little-endian. And at that point it's done as fast as possible.",
    "start": "604920",
    "end": "610740"
  },
  {
    "text": "These days, with the clock speeds you're dealing with, the slowdown won't be noticeable because you're not doing it that often.",
    "start": "611490",
    "end": "616128"
  },
  {
    "text": "It's... you set one value in a port number when you create the socket.",
    "start": "616300",
    "end": "620779"
  },
  {
    "text": "The rest of the transmission probably is in ASCII, anyway",
    "start": "620780",
    "end": "623360"
  },
  {
    "text": "so you never need to convert anything so it's not gonna make that much of a difference.",
    "start": "623360",
    "end": "626880"
  },
  {
    "text": "If I write down 0 0 1 0",
    "start": "627540",
    "end": "631519"
  },
  {
    "text": "that represents a 2 in its simplest form. That is what",
    "start": "631520",
    "end": "635100"
  },
  {
    "text": "binary coded decimal is and you just use them in 4-bit nibbles. Now. We all know a nibble is half a byte.",
    "start": "635580",
    "end": "642860"
  },
  {
    "text": "A byte equals eight...",
    "start": "642860",
    "end": "645720"
  }
]