[
  {
    "text": "We were talking a few weeks ago about how we can add additional processes into a computers (sic) to do specialist tasks",
    "start": "60",
    "end": "6880"
  },
  {
    "text": "One of the things we talked about was floating point processors",
    "start": "6940",
    "end": "9680"
  },
  {
    "text": "Now these days they're built directly onto your CPU",
    "start": "9680",
    "end": "12160"
  },
  {
    "text": "But, you can still get some CPUs –some of the variants of the ARM CPU– and certainly if you go back in history",
    "start": "12180",
    "end": "18100"
  },
  {
    "text": "Some of the other CPUs you can get didn't have a floating-point unit. They could do math but they could only do integer math",
    "start": "18280",
    "end": "24090"
  },
  {
    "text": "So they could add 1 and 2 but they couldn't add 1.5 and 2.5",
    "start": "24090",
    "end": "28280"
  },
  {
    "text": "Well you \"could\" but you had to write the software to handle the fractional part of the number an do the math",
    "start": "28600",
    "end": "34980"
  },
  {
    "text": "and stick it back together in the right order. So I was wondering",
    "start": "34980",
    "end": "37380"
  },
  {
    "text": "What's the difference in speed that a floating-point person would actually make?",
    "start": "38050",
    "end": "41489"
  },
  {
    "text": "So as I said most computers we have these days have floating-point units of some sort built-in",
    "start": "43930",
    "end": "48809"
  },
  {
    "text": "So I went back to one of my old ones and I decided to write a program to test it",
    "start": "49690",
    "end": "55410"
  },
  {
    "text": "So I wrote a very simple program which does a 3d spinning cube. So the program is relatively straightforward",
    "start": "55410",
    "end": "60959"
  },
  {
    "text": "It's got a series of eight points which restores representation into a series of matrix transformations on them",
    "start": "61300",
    "end": "66750"
  },
  {
    "text": "To get them into the screen coordinates and then we draw the lines",
    "start": "66970",
    "end": "69659"
  },
  {
    "text": "so I did this using floating point maps and the programs running here and we can see it's",
    "start": "70000",
    "end": "74489"
  },
  {
    "text": "Reasonably quick it takes no point not for five a second to calculate where all the screen coordinates need to be for each frame",
    "start": "75100",
    "end": "82500"
  },
  {
    "text": "sometimes varies but that's in general what it takes so I then went off onto a",
    "start": "82780",
    "end": "88349"
  },
  {
    "text": "popular auction site",
    "start": "88900",
    "end": "90900"
  },
  {
    "text": "beginning with a letter E and",
    "start": "91060",
    "end": "93060"
  },
  {
    "text": "Ordered myself a floating point ship for the Falcon and I then inserted it",
    "start": "93490",
    "end": "98399"
  },
  {
    "text": "into the machine and I recompiled the program this time to use",
    "start": "98680",
    "end": "103979"
  },
  {
    "text": "The floating point unit. So this version it's doing floating point maps",
    "start": "104710",
    "end": "108449"
  },
  {
    "text": "It's using the fractions",
    "start": "108450",
    "end": "109920"
  },
  {
    "text": "But it's all being done in software this machine code instructions for the six 8030 chip in there",
    "start": "109920",
    "end": "114839"
  },
  {
    "text": "To calculate all those different floating point numbers",
    "start": "115149",
    "end": "118589"
  },
  {
    "text": "so then we compiled the program this time to actually use the floating point unit and",
    "start": "119740",
    "end": "125460"
  },
  {
    "text": "This version runs about 4.5 times faster it takes no point",
    "start": "126969",
    "end": "131458"
  },
  {
    "text": "Not one seconds rather no point naught four five seconds to do exactly the same calculations. This is exactly the same source code",
    "start": "131459",
    "end": "137819"
  },
  {
    "text": "I just recompile a using GCC to produce a version that used the floating-point",
    "start": "137819",
    "end": "141958"
  },
  {
    "text": "Unit and you can actually see that the graphics are slightly smoother and the time is much less",
    "start": "142390",
    "end": "148079"
  },
  {
    "text": "So the fact we can speed it up by doing it in hardware. Perhaps isn't that surprising?",
    "start": "148079",
    "end": "151409"
  },
  {
    "text": "There's lots of tasks where you could either implement it in software or implement it in harder",
    "start": "151719",
    "end": "156539"
  },
  {
    "text": "And if you implement it in hard way it's often",
    "start": "156540",
    "end": "158540"
  },
  {
    "text": "Faster to do so so we are going to try that but it's actually worth thinking about what's involved in adding up",
    "start": "158560",
    "end": "164879"
  },
  {
    "text": "Floating-point numbers Tom did a good video",
    "start": "165280",
    "end": "167399"
  },
  {
    "text": "Right back at the beginning computer file looking at how floating-point numbers are represented as a sort of high-level and it will say well",
    "start": "167680",
    "end": "173939"
  },
  {
    "text": "It - naught point nine nine nine nine nine nine nine then after a while",
    "start": "176139",
    "end": "179999"
  },
  {
    "text": "you'll stop but actually when you get down to the sort of",
    "start": "180760",
    "end": "183269"
  },
  {
    "text": "Level of the computer's having to deal with them and see how they're stored",
    "start": "183639",
    "end": "186509"
  },
  {
    "text": "It's quite interesting to see how they're stored and how then manipulating them",
    "start": "186909",
    "end": "191249"
  },
  {
    "text": "Are you writing software to do something simple like adding two numbers together?",
    "start": "191250",
    "end": "194489"
  },
  {
    "text": "Actually ends up being quite an involved task compared to adding together two binary numbers",
    "start": "195189",
    "end": "200159"
  },
  {
    "text": "So let's look at how we add numbers together",
    "start": "200229",
    "end": "202949"
  },
  {
    "text": "So let's let's take a number and to save time I've printed out the bits. So let's take the number",
    "start": "202949",
    "end": "208079"
  },
  {
    "text": "Let's say 42 because why everyone who uses that so we've got here the number 42 is one zero",
    "start": "208079",
    "end": "214769"
  },
  {
    "text": "One zero one zero and then we need to fill the rest of these with zeros. Well ignore that for now",
    "start": "215319",
    "end": "221219"
  },
  {
    "text": "So that's bit naught over on the right hand side through two bit",
    "start": "221220",
    "end": "225720"
  },
  {
    "text": "One two three, and these of course are the same with the powers of 2",
    "start": "225849",
    "end": "230188"
  },
  {
    "text": "So 2 2 zeros is ones two to the one is two four eight",
    "start": "230189",
    "end": "234569"
  },
  {
    "text": "Just like we have powers of 10 when we do decimal numbers. So let's everyone to add together 42 and",
    "start": "234970",
    "end": "239939"
  },
  {
    "text": "23 so I've got another binary number here 23 so the same bits and",
    "start": "241419",
    "end": "245758"
  },
  {
    "text": "We'll just basically do addition. So 0 plus 1 Shaun is",
    "start": "246189",
    "end": "250319"
  },
  {
    "text": "1 good",
    "start": "250930",
    "end": "252930"
  },
  {
    "text": "yeah, ok, 1 plus 1 is",
    "start": "253479",
    "end": "255989"
  },
  {
    "text": "0 and we have to carry the 1 0 plus 1 plus 1",
    "start": "257079",
    "end": "262228"
  },
  {
    "text": "Okay. Yeah 1 plus 0 plus 1",
    "start": "263139",
    "end": "265949"
  },
  {
    "text": "So yeah",
    "start": "266400",
    "end": "266850"
  },
  {
    "text": "We've run it up 42 this numbers 23 42 plus 23 is 65 and sorry produced",
    "start": "266850",
    "end": "272579"
  },
  {
    "text": "65 in binary is a result",
    "start": "272979",
    "end": "274889"
  },
  {
    "text": "So rubbing up in binary is a relatively straightforward thing",
    "start": "274889",
    "end": "278129"
  },
  {
    "text": "What we do is we take from the right each pair of bits add them together",
    "start": "278130",
    "end": "282570"
  },
  {
    "text": "We produce a sum bit and occasion",
    "start": "282570",
    "end": "285749"
  },
  {
    "text": "We also produce a carry bit and then we add the carry on in the next column just like we do",
    "start": "285750",
    "end": "289949"
  },
  {
    "text": "when we do decimal arithmetic",
    "start": "290290",
    "end": "292290"
  },
  {
    "text": "And you can generate systems that represent",
    "start": "292720",
    "end": "295559"
  },
  {
    "text": "Decimals or by symbols",
    "start": "297400",
    "end": "298919"
  },
  {
    "text": "I guess they'd be called or fractional numbers",
    "start": "298919",
    "end": "300919"
  },
  {
    "text": "Using this so you can use a system which is quite common",
    "start": "301000",
    "end": "303299"
  },
  {
    "text": "Was used in Adobe Acrobat as used on the iOS for 3d graphics at one point",
    "start": "303520",
    "end": "308039"
  },
  {
    "text": "which is fixed point numbers where you say that say about 32 bits the top 16 bits are going to represent the sort of",
    "start": "308560",
    "end": "315000"
  },
  {
    "text": "Integer part the bottom 16 bits are going to represent",
    "start": "315130",
    "end": "317639"
  },
  {
    "text": "the fractional part and the basic way to think about that is you multiplied every number by 6 on",
    "start": "318130",
    "end": "322589"
  },
  {
    "text": "65,536 shifts everything along and then when you want to produce the final result you divide it all by 6",
    "start": "324190",
    "end": "329910"
  },
  {
    "text": "65536 now the problem with fixed point numbers is that they have a fixed scale",
    "start": "331570",
    "end": "335279"
  },
  {
    "text": "Fixed is key in the name. So for example, if we use",
    "start": "335830",
    "end": "339150"
  },
  {
    "text": "32-bit fixed point numbers splitting into 16 bits and 16 bits. That's great. We can go up to",
    "start": "340030",
    "end": "345329"
  },
  {
    "text": "65,000 or so on the integer part, but if we need to get to 70,000 we can't story",
    "start": "345849",
    "end": "350729"
  },
  {
    "text": "Likewise we can go to 1",
    "start": "351340",
    "end": "353340"
  },
  {
    "text": "65536 the other thing we'd agree to go to 1",
    "start": "354400",
    "end": "357060"
  },
  {
    "text": "130",
    "start": "358120",
    "end": "359650"
  },
  {
    "text": "1072 sort of a thing we can't because we don't have that resolution on occasion",
    "start": "359650",
    "end": "364798"
  },
  {
    "text": "We need the bits down here to represent very small quantities and occasion",
    "start": "364800",
    "end": "368819"
  },
  {
    "text": "We want them to represent very large quantities for something like 3d graphics or graphics in general",
    "start": "368820",
    "end": "373109"
  },
  {
    "text": "Fixed point numbers can work. Well for general-purpose things. They don't work that well",
    "start": "373539",
    "end": "377729"
  },
  {
    "text": "So what people tend to do is they use floating-point numbers, which is the right things as tom said in",
    "start": "378340",
    "end": "383789"
  },
  {
    "text": "scientific notation so rather than writing",
    "start": "384460",
    "end": "386460"
  },
  {
    "text": "102 4 we write it as 1 point 0 to 4 times 10 to the 3 so we're using scientific notation",
    "start": "387130",
    "end": "393779"
  },
  {
    "text": "We can do the same in binary rather than writing",
    "start": "393940",
    "end": "396809"
  },
  {
    "text": "101",
    "start": "398020",
    "end": "399370"
  },
  {
    "text": "One, oh, we can write one point",
    "start": "399370",
    "end": "401709"
  },
  {
    "text": "zero one zero",
    "start": "402380",
    "end": "404380"
  },
  {
    "text": "One times two this time rather than 10 to the 1 2 3 4 so we can write it 2 to the 4",
    "start": "404419",
    "end": "411279"
  },
  {
    "text": "So what floating-point numbers do is that they say okay rather than representing",
    "start": "411490",
    "end": "415539"
  },
  {
    "text": "Numbers using a fixed number as bits for each we're going to represent them in scientific notation effectively. We're the sort of",
    "start": "416510",
    "end": "423909"
  },
  {
    "text": "Number that were then going to multiply by 2 to the something to shift it to the right point to make things absolutely clear",
    "start": "425270",
    "end": "431349"
  },
  {
    "text": "I'm going to use",
    "start": "431350",
    "end": "433070"
  },
  {
    "text": "Decimal numbers here to represent the 2 times 10 to the 4 so I will cheat and use this here",
    "start": "433070",
    "end": "438159"
  },
  {
    "text": "but of course it would be",
    "start": "438160",
    "end": "439850"
  },
  {
    "text": "102 the 1 0 0 so I guess the question that remains is how do we represent this in a computer?",
    "start": "439850",
    "end": "445749"
  },
  {
    "text": "We've got to change this notation, which we can write nicely on a piece of paper to represent the binary number",
    "start": "445750",
    "end": "451389"
  },
  {
    "text": "Multiplied by a power of 2, but how do we represent that in the computer?",
    "start": "451910",
    "end": "455739"
  },
  {
    "text": "what we need to do is take this and find an encouraging which",
    "start": "455750",
    "end": "459970"
  },
  {
    "text": "Represents it as a series of bits that the computer can then deal with",
    "start": "460280",
    "end": "463179"
  },
  {
    "text": "So we're going to look at 32 bit of floating point numbers mainly because the number of digits I have to fill in",
    "start": "463700",
    "end": "469869"
  },
  {
    "text": "become",
    "start": "470539",
    "end": "471620"
  },
  {
    "text": "Relatively smaller to deal with then rather than doing 64 bit",
    "start": "471620",
    "end": "475359"
  },
  {
    "text": "We could have done 16 bit sign things, but they use the same thing",
    "start": "475360",
    "end": "478240"
  },
  {
    "text": "It's just the way they break it down change your slightly how many bits are assigned to each section",
    "start": "478240",
    "end": "483250"
  },
  {
    "text": "So we've got our 32 bits and we need to represent",
    "start": "483320",
    "end": "486399"
  },
  {
    "text": "this number in there we start off by splitting this up into",
    "start": "486919",
    "end": "490899"
  },
  {
    "text": "A few different things. So the first bits or the most significant bit are in the number. The one on the left over here is",
    "start": "491539",
    "end": "498939"
  },
  {
    "text": "The sign bit and that says whether it's a positive number",
    "start": "499550",
    "end": "502990"
  },
  {
    "text": "We just let it be zero or negative number what which case it will be what?",
    "start": "503690",
    "end": "506829"
  },
  {
    "text": "So unlike two's complement",
    "start": "506900",
    "end": "508630"
  },
  {
    "text": "Which David's looked at in the past two's complement is equivalent to the ones complement with one?",
    "start": "508630",
    "end": "515559"
  },
  {
    "text": "Added to it. The sign is represented purely as being a zero means positive one means negative",
    "start": "515870",
    "end": "521830"
  },
  {
    "text": "We just have one bit represented with that",
    "start": "521830",
    "end": "523240"
  },
  {
    "text": "They then say we're going to have eight bits, which we're going to use to represent the exponent this bit here",
    "start": "523240",
    "end": "528130"
  },
  {
    "text": "I what power of 2 which gives us 255 or so",
    "start": "528130",
    "end": "531999"
  },
  {
    "text": "Different powers of two we can use we'll come back to how that's represented in a second and then the rest of it",
    "start": "532519",
    "end": "538959"
  },
  {
    "text": "Is used to represent the mantissa as its referred to so the remaining 23 bits are at the 32 are used to represent",
    "start": "539749",
    "end": "546609"
  },
  {
    "text": "The remaining bit of the number, okay",
    "start": "546799",
    "end": "549129"
  },
  {
    "text": "So they've got 23 bits to represent the number which is n gonna be multiplied by the 8 bit exponent",
    "start": "549139",
    "end": "555579"
  },
  {
    "text": "They said every single possible floating-point number you're gonna write down is going to have a 1 as its most significant digit",
    "start": "555579",
    "end": "561188"
  },
  {
    "text": "Except 1 0 say, ok. We'll treat 0 as a special case and to represent 0 they just set all bits to be zeros",
    "start": "562519",
    "end": "568808"
  },
  {
    "text": "So we know that this is going to be 1 what we know is 1 so we don't need to encode it",
    "start": "569089",
    "end": "574029"
  },
  {
    "text": "It's always going to be 1 so actually these",
    "start": "574029",
    "end": "576029"
  },
  {
    "text": "23 bits here are the bits that come after the 1 so it's one dollar",
    "start": "576290",
    "end": "580029"
  },
  {
    "text": "So on which are all the bits that come after here",
    "start": "581869",
    "end": "584559"
  },
  {
    "text": "So we we sort of don't encode that bit because we know it's there one way to think about floating-point numbers",
    "start": "584559",
    "end": "589809"
  },
  {
    "text": "Is there a sort of lossy compression mechanism for?",
    "start": "589809",
    "end": "592928"
  },
  {
    "text": "real",
    "start": "593569",
    "end": "594589"
  },
  {
    "text": "numbers floating-point real",
    "start": "594589",
    "end": "596589"
  },
  {
    "text": "Fractional numbers because we're taking a number which is some representation and we're compressing it into these bits",
    "start": "596839",
    "end": "603368"
  },
  {
    "text": "But we lose some information and we can see that in a second",
    "start": "603529",
    "end": "606308"
  },
  {
    "text": "we run a little demo and we'll see that actually it can't represent all numbers and",
    "start": "606309",
    "end": "609939"
  },
  {
    "text": "It's surprising sometimes which numbers it can't represent and which can each it can so we can then start writing",
    "start": "610189",
    "end": "615849"
  },
  {
    "text": "Numbers in this form and to simplify things. I've printed out a form like this",
    "start": "616399",
    "end": "621248"
  },
  {
    "text": "So if you want to write out the number one, it's one point naught naught naught naught",
    "start": "621529",
    "end": "627099"
  },
  {
    "text": "Times 2 to the power of 0 so it's one point",
    "start": "627649",
    "end": "631328"
  },
  {
    "text": "na-na-na-na-na-na-na-na naught",
    "start": "631939",
    "end": "633110"
  },
  {
    "text": "times 2 to the power of",
    "start": "633110",
    "end": "634368"
  },
  {
    "text": "0 which is 1 so it's 1 times 1 which is 1 and of course the sign bit because it's positive",
    "start": "634369",
    "end": "638918"
  },
  {
    "text": "would be 0 to say that so we could write that out as",
    "start": "639499",
    "end": "643509"
  },
  {
    "text": "The number so we can start assigning these things to the different bits",
    "start": "644360",
    "end": "648188"
  },
  {
    "text": "We put a 0 there cuz it's positive and the mantissa is all 0 so we just fill them up with",
    "start": "648189",
    "end": "653199"
  },
  {
    "text": "Zeros, and that leaves us with this 8 bit here",
    "start": "653480",
    "end": "656110"
  },
  {
    "text": "We've got to represent 2 to the power of 0 now they could have decided to just put 0 in there",
    "start": "656110",
    "end": "661868"
  },
  {
    "text": "But then the number 1 would have exactly the same a bit patent",
    "start": "661869",
    "end": "665359"
  },
  {
    "text": "There's the number zero and introduced that's potentially not a good idea",
    "start": "665360",
    "end": "668479"
  },
  {
    "text": "so what they actually say we're going to do is we're going to take the power which will go from mind 127 through to",
    "start": "668820",
    "end": "674989"
  },
  {
    "text": "127 and then they add 127 on it. So our exponent here. Our power of 2 is 0",
    "start": "675930",
    "end": "681500"
  },
  {
    "text": "so 0",
    "start": "682170",
    "end": "683339"
  },
  {
    "text": "plus",
    "start": "683340",
    "end": "685170"
  },
  {
    "text": "127 obviously is 127 so we encode",
    "start": "685170",
    "end": "688759"
  },
  {
    "text": "127 into these remaining bits so 0 1 1 1 1",
    "start": "689400",
    "end": "694129"
  },
  {
    "text": "1 1 1",
    "start": "694860",
    "end": "696860"
  },
  {
    "text": "So to encode the number 1 like that we encode it into the binary representation",
    "start": "697230",
    "end": "702589"
  },
  {
    "text": "0 for the sign bit 0 1",
    "start": "703140",
    "end": "705499"
  },
  {
    "text": "127 for the exponent and then because we know that one's already encoded the rest of it becomes 0 this is a lossy system",
    "start": "706680",
    "end": "714350"
  },
  {
    "text": "We can encode some numbers, but we're only encoding 24 significant bits where they are within the number of encoding changes",
    "start": "714350",
    "end": "721670"
  },
  {
    "text": "But we're only encoding 24 significant bits",
    "start": "721670",
    "end": "723860"
  },
  {
    "text": "So that's just right program",
    "start": "723860",
    "end": "725430"
  },
  {
    "text": "That takes a number 1 6 7 7 7 - 1 5 an integer number and adds one to it",
    "start": "725430",
    "end": "731989"
  },
  {
    "text": "And we'll do this in a loop",
    "start": "732300",
    "end": "733880"
  },
  {
    "text": "We'll add one to the result and add one to the world and print out the values",
    "start": "733880",
    "end": "736580"
  },
  {
    "text": "So we think that one six seven seven seven two one six one six seven seven seven",
    "start": "736580",
    "end": "742879"
  },
  {
    "text": "Two one seven and we'll do this with both for an integer variable. So a 32-bit integer and also with a",
    "start": "743190",
    "end": "750050"
  },
  {
    "text": "32-bit float, so got to money without program written here on the computer",
    "start": "750600",
    "end": "755358"
  },
  {
    "text": "So we set up a float why we set up the variable. I to be",
    "start": "755790",
    "end": "759738"
  },
  {
    "text": "16 million 770",
    "start": "760320",
    "end": "762320"
  },
  {
    "text": "7215 checking things binary there and we set Y to equal I so they both start off with the same value",
    "start": "763140",
    "end": "768230"
  },
  {
    "text": "We're then going to print them out. Where's the decimal and the floating point? Well, I'm also going to print out the hexadecimal",
    "start": "768270",
    "end": "774350"
  },
  {
    "text": "Representations of the bits so we can see what's going on",
    "start": "774870",
    "end": "777020"
  },
  {
    "text": "We're then going to add 1 to the value of y and add 1 to the value of ice",
    "start": "777600",
    "end": "782659"
  },
  {
    "text": "So we're going to increment them both",
    "start": "782660",
    "end": "784660"
  },
  {
    "text": "So let's run this program",
    "start": "784740",
    "end": "786740"
  },
  {
    "text": "To not million mistakes that's always a good sign and let's run it so we get",
    "start": "789810",
    "end": "795440"
  },
  {
    "text": "And 15 and we get",
    "start": "797800",
    "end": "799839"
  },
  {
    "text": "16777215 point normal or not? What would expect?",
    "start": "802100",
    "end": "805360"
  },
  {
    "text": "16,777,216 and the same there. So now we had one on it again and we get for the integer value",
    "start": "808370",
    "end": "814630"
  },
  {
    "text": "16777215 point number that's not a right. Okay, so that's not right what's going on there? Well, if we think about how we represent this",
    "start": "818839",
    "end": "825819"
  },
  {
    "text": "Let's think about the number one six seven seven seven two one six",
    "start": "826640",
    "end": "830709"
  },
  {
    "text": "That number is one times two to the 24 and I sort of tricked by",
    "start": "831980",
    "end": "837969"
  },
  {
    "text": "Generating it this way at the beginning. There's one with lots of zeros after it times two to the 24",
    "start": "838430",
    "end": "843070"
  },
  {
    "text": "we have only 23 bits to represent this bit in here if",
    "start": "843310",
    "end": "847690"
  },
  {
    "text": "We want to add on",
    "start": "848300",
    "end": "850300"
  },
  {
    "text": "an extra bit",
    "start": "850610",
    "end": "852610"
  },
  {
    "text": "We would need 24 bits here. We've only got 23 we can't do it",
    "start": "853519",
    "end": "857649"
  },
  {
    "text": "So we can't represent it. If we added up to each time, it would work fine. So actually as we get some larger numbers",
    "start": "857899",
    "end": "863949"
  },
  {
    "text": "We still have the same number of significant bits",
    "start": "864529",
    "end": "866769"
  },
  {
    "text": "or significant digits",
    "start": "867470",
    "end": "869470"
  },
  {
    "text": "But we can't store certain values. Well as we can with integers, so it's a lossy compression system",
    "start": "869630",
    "end": "875079"
  },
  {
    "text": "basically, we can store a large range of values for anything from",
    "start": "875079",
    "end": "878678"
  },
  {
    "text": "minus 2 to the power of 127 through 2 2 to the power of",
    "start": "879649",
    "end": "883089"
  },
  {
    "text": "127 or we can go very very low and have numbers as small as 2 to the minus 127",
    "start": "883339",
    "end": "889239"
  },
  {
    "text": "But we only have a certain they were pursuing",
    "start": "890990",
    "end": "893589"
  },
  {
    "text": "So if we deal with very very large numbers that we've still only got 23 bits",
    "start": "893589",
    "end": "897248"
  },
  {
    "text": "We have the precision and if we do them very small, but numbers we can got 23 bits worth of precision, which is fine",
    "start": "897250",
    "end": "902859"
  },
  {
    "text": "We can cope with that because often when you're dealing with big numbers",
    "start": "902899",
    "end": "905618"
  },
  {
    "text": "You're not worried about the small fiddly decimal places in your small four significant figures if you're measuring how far it is from the Earth",
    "start": "905990",
    "end": "913959"
  },
  {
    "text": "to Alpha Centauri in",
    "start": "914360",
    "end": "916360"
  },
  {
    "text": "millimeters plus or minus a few",
    "start": "916579",
    "end": "918998"
  },
  {
    "text": "Millimeters a few points of a millimeter isn't going to make much difference that sort of thing",
    "start": "920000",
    "end": "924250"
  },
  {
    "text": "So it's a compression where it's just a lossy system",
    "start": "924250",
    "end": "926799"
  },
  {
    "text": "you",
    "start": "928290",
    "end": "930290"
  },
  {
    "text": "All for this videos gonna mean writing zeroes 23 times, maybe I should have done 16-bit numbers",
    "start": "933540",
    "end": "938630"
  }
]