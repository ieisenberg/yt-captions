[
  {
    "text": ">> Sean: We've done a series of hardware videos\nwith Dr Bagley about various different",
    "start": "0",
    "end": "3959"
  },
  {
    "text": "parts of CPUs, and things like this. And\none of the things he'd mentioned during",
    "start": "3959",
    "end": "8280"
  },
  {
    "text": "one of the videos is something that I\nbelieve you want to tell us a bit more",
    "start": "8280",
    "end": "12780"
  },
  {
    "text": "about --  the Wheeler Jump ?\n>> DFB: Yes the Wheeler Jump \nDavid Wheeler [a]",
    "start": "12780",
    "end": "18180"
  },
  {
    "text": "very very talented computer scientist. An\nexcellent lateral thinker. I didn't know",
    "start": "18180",
    "end": "24150"
  },
  {
    "text": "him very well; I knew him very slightly.\nMaybe met him four or five times but you",
    "start": "24150",
    "end": "29400"
  },
  {
    "text": "just had to be impressed that he, as a\ncomputer pioneer, had to grapple with the",
    "start": "29400",
    "end": "36120"
  },
  {
    "text": "fact that very early computers did not\nhave enough registers in their CPUs.",
    "start": "36120",
    "end": "43878"
  },
  {
    "text": ">> Sean: Registers are just like tiny bits of memory?\n>> DFB: Yeah! tiny bits of memory, but within the",
    "start": "43879",
    "end": "48120"
  },
  {
    "text": "central processor unit. They could be\nbuilt of much faster technology than",
    "start": "48120",
    "end": "52890"
  },
  {
    "text": "main memory, so typically, you know, like\nwith the ARM chip at user level, you'd",
    "start": "52890",
    "end": "57120"
  },
  {
    "text": "end up with 16 general-purpose registers.\nOne or two of those might be set aside",
    "start": "57120",
    "end": "61590"
  },
  {
    "text": "to use for all sorts of useful things.\nAnd one of the useful things was the",
    "start": "61590",
    "end": "67650"
  },
  {
    "text": "idea of -- you're running through your program --\nyou want to jump into a subroutine to",
    "start": "67650",
    "end": "72540"
  },
  {
    "text": "calculate a sine, or to print out \"Hello\nWorld\", or something like that. You don't",
    "start": "72540",
    "end": "76799"
  },
  {
    "text": "want it to be running linearly on your\nprogram you want to jump into it and",
    "start": "76799",
    "end": "81330"
  },
  {
    "text": "jump back out of it again.  So you could\nuse it several times in your program",
    "start": "81330",
    "end": "85380"
  },
  {
    "text": "from several different places. You could\njump in and jump back out. Now David",
    "start": "85380",
    "end": "90030"
  },
  {
    "text": "Wheeler is credited with this idea of\ninventing the subroutine and say[ing]  \"Well,",
    "start": "90030",
    "end": "94798"
  },
  {
    "text": "yeah, when people want to calculate sine\nof something they don't want to have to",
    "start": "94799",
    "end": "99540"
  },
  {
    "text": "replicate, in their program, the coding\nfor sine in six different places\". It might",
    "start": "99540",
    "end": "104759"
  },
  {
    "text": "make it go faster - and of course some of\nyou will know that if you write macros",
    "start": "104759",
    "end": "109229"
  },
  {
    "text": "you can force it [to create in-line code] to do\nthat. [You] sacrifice a lot more code for faster speed \nBut no, to",
    "start": "109229",
    "end": "115109"
  },
  {
    "text": "keep it clean you basically say \"I want\nthis piece of code to be separate but",
    "start": "115110",
    "end": "120079"
  },
  {
    "text": "\"jumpable into\" and \"jump back outable\nfrom\", back to where you came from.",
    "start": "120079",
    "end": "127409"
  },
  {
    "text": "So, before you jump in, at the moment of the\njump, you've got to say \"Where am i coming",
    "start": "127409",
    "end": "131489"
  },
  {
    "text": "from? Whose responsibility is it to remember",
    "start": "131489",
    "end": "134230"
  },
  {
    "text": "that? And in modern CPUs you would have a\nlink register of some sort that",
    "start": "134230",
    "end": "140230"
  },
  {
    "text": "remembers. You  didn't have that in the very\nearly days. But, boy, did it [soon] dawn on them",
    "start": "140230",
    "end": "145030"
  },
  {
    "text": "that you needed it! So if you didn't have\na link register how on earth were you",
    "start": "145030",
    "end": "151840"
  },
  {
    "text": "going to get into, and out of, your\nsubroutine? So let's say you're coming",
    "start": "151840",
    "end": "156459"
  },
  {
    "text": "from 70 shall we say - location 70 -\nsomething like that? Right, now, on this",
    "start": "156459",
    "end": "162489"
  },
  {
    "text": "particular occasion therefore - when you\nget back out of that subroutine - you",
    "start": "162489",
    "end": "166750"
  },
  {
    "text": "don't want to go back to 70 itself\nbecause you'd end up in an endless loop",
    "start": "166750",
    "end": "170590"
  },
  {
    "text": "of jumping back into yourself you want\nto go to the instruction just beyond 70.",
    "start": "170590",
    "end": "175090"
  },
  {
    "text": "But you want to get back out! You want to\nremember 70 [and] add -- depending on the",
    "start": "175090",
    "end": "179500"
  },
  {
    "text": "architecture -- you add 1, 2, 4 ...  depending.\nwhetherWhen it's a byte machine, a word machine,",
    "start": "179500",
    "end": "184389"
  },
  {
    "text": "whatever. But you add a small number on\nto that address and say: \"That's where I",
    "start": "184389",
    "end": "188829"
  },
  {
    "text": "want to get back to -- the instruction\nafter where I jumped from\". \n>> Sean: And the",
    "start": "188829",
    "end": "194260"
  },
  {
    "text": "problem is that you've got nowhere tosave [it]?  \n>> DFB: Well, on modern machines [address] 70 would be",
    "start": "194260",
    "end": "199418"
  },
  {
    "text": "saved in a link register, maybe [on the ARM chip] \nregister number 14, or something.",
    "start": "199419",
    "end": "203260"
  },
  {
    "text": "You say: \"Jump to subroutine\". The moment\nyou say it, it automatically",
    "start": "203260",
    "end": "206230"
  },
  {
    "text": "remembers where you're jumping from and\nputs it in the link register. So when you",
    "start": "206230",
    "end": "211090"
  },
  {
    "text": "want to come back out you say: \"ere I am,\non this architecture, where's my link",
    "start": "211090",
    "end": "215980"
  },
  {
    "text": "register? Number 14?. Let's look at its\ncontent. Oh! it says \"70\" and I'm on a",
    "start": "215980",
    "end": "222010"
  },
  {
    "text": "32-bit machine with 4 bytes to the word\nso that's ... I want to jump 4 beyond 70\".",
    "start": "222010",
    "end": "229299"
  },
  {
    "text": "Or if it's, y' know, like EDSAC it might\nbe 1 or 2 beyond. But you want to",
    "start": "229299",
    "end": "234909"
  },
  {
    "text": "just jump back to where you came from,\nslightly adjusted, with a little amount",
    "start": "234909",
    "end": "239319"
  },
  {
    "text": "added. And it is that link register that\nsaves you from going insane. Now back in",
    "start": "239319",
    "end": "245440"
  },
  {
    "text": "the early days of David Wheeler and this\nEDSAC machine he had to do this for ... ",
    "start": "245440",
    "end": "250620"
  },
  {
    "text": "Oh golly! I wish I had an extra register but\nI haven't",
    "start": "250620",
    "end": "255099"
  },
  {
    "text": "Wat register have I got, that's in use all\nthe time, that might - if I'm very careful -",
    "start": "255099",
    "end": "260250"
  },
  {
    "text": "serve me all right. And the answer is - the\nArithmetic Accumulator.",
    "start": "260250",
    "end": "264570"
  },
  {
    "text": "Every time you loaded a number into the\naccumulator, or did some arithmetic, the",
    "start": "264570",
    "end": "270510"
  },
  {
    "text": "answer stays in the accumulator. OK, so\nhere's the deal: we're going to use the",
    "start": "270510",
    "end": "275840"
  },
  {
    "text": "arithmetic accumulator as the means of\nremembering where we came from. So here",
    "start": "275840",
    "end": "284699"
  },
  {
    "text": "you are at location 70, in the early\nEDSAC machine, what do you have to do ...",
    "start": "284700",
    "end": "291540"
  },
  {
    "text": ">> Sean: So, you have to add 70 to 0, or something?\n>> DFB: Yes! Basically \"yes\"! You're jumping",
    "start": "291540",
    "end": "296640"
  },
  {
    "text": "from 70 -- OK 70 has got to be in the\naccumulator at the moment of jump -- and",
    "start": "296640",
    "end": "301560"
  },
  {
    "text": "then you do an unconditional branch\ninstruction to get to the start of the",
    "start": "301560",
    "end": "305669"
  },
  {
    "text": "subroutine. Fine!\nBut you wake up in that subroutine your",
    "start": "305670",
    "end": "309960"
  },
  {
    "text": "first job is to preserve your link to\nget back! You must NOT do any arithmetic",
    "start": "309960",
    "end": "315590"
  },
  {
    "text": "- because you [might] feel like it.  Duty calls!\nYou must save off your return link",
    "start": "315590",
    "end": "322040"
  },
  {
    "text": "somewhere safe! Right?! Because, if you\ndon't, you won't be able to get back. ",
    "start": "322040",
    "end": "330480"
  },
  {
    "text": "But you have no spare ...\n>> Sean: So we've got nowhere to save ....\n>> DFB: ... no spare registers to save it",
    "start": "330480",
    "end": "334430"
  },
  {
    "text": "Yeah! you might think so, but how about\nthis: suppose at the bottom of your",
    "start": "334430",
    "end": "339720"
  },
  {
    "text": "subroutine there is a branch instruction,\na dummy one, which is basically going to",
    "start": "339720",
    "end": "345930"
  },
  {
    "text": "say branch, or jump, back to where I came\nfrom. But \"where I came from\"",
    "start": "345930",
    "end": "350130"
  },
  {
    "text": "must be a literal correct address. And in\nthe accumulator is 70. So what you that",
    "start": "350130",
    "end": "357810"
  },
  {
    "text": "have to do is - knowing the length of your\nsubroutine and its addresses and knowing",
    "start": "357810",
    "end": "365270"
  },
  {
    "text": "where the return instruction is planted\nas a dummy - you've basically got to turn",
    "start": "365270",
    "end": "370830"
  },
  {
    "text": "70 into 72, 74, whatever it is, to make it\ngo back to the next instruction after",
    "start": "370830",
    "end": "375780"
  },
  {
    "text": "where you came from. And you must\nliterally plant that instruction and -",
    "start": "375780",
    "end": "381360"
  },
  {
    "text": "shock! horror! -  overwrite your own program\ncode at the bottom of this subroutine, so",
    "start": "381360",
    "end": "388259"
  },
  {
    "text": "that the dummy jump, which has probably\ngot zeros left in it by now, becomes jump",
    "start": "388260",
    "end": "393570"
  },
  {
    "text": "back to location 72, shall we say. But you are actually",
    "start": "393570",
    "end": "398570"
  },
  {
    "text": "altering memory. Now can you imagine if\nthat goes wrong,  how to debug a program",
    "start": "398570",
    "end": "404100"
  },
  {
    "text": "that's trampling all over itself and\njumping back to the wrong address! you",
    "start": "404100",
    "end": "408270"
  },
  {
    "text": "know \n>> Sean: Code gets altered all the time,\nright?! Can you give us some sense of how",
    "start": "408270",
    "end": "412800"
  },
  {
    "text": "sacrosanct these lines of code are when\nit's running? \n>> DFB: Well, code may seem to alter",
    "start": "412800",
    "end": "417750"
  },
  {
    "text": "itself all the time but it's usually\naltering itself by manipulating",
    "start": "417750",
    "end": "421440"
  },
  {
    "text": "registers in the CPU not physically\noverwriting memory in your main memory store.",
    "start": "421440",
    "end": "427320"
  },
  {
    "text": ">> Sean: So it's OK to obviously change\nthe value for variables, and and all of",
    "start": "427320",
    "end": "431400"
  },
  {
    "text": "that, but actually changing those lines\nof code should be ....\n>> DFB: Changing variables is",
    "start": "431400",
    "end": "435810"
  },
  {
    "text": "fine. That's data. You're allowed to\nchange data. What you're not allowed to",
    "start": "435810",
    "end": "439440"
  },
  {
    "text": "do is to treat a program-instruction bit\npattern as if it was just a piece of",
    "start": "439440",
    "end": "444210"
  },
  {
    "text": "data and to patch something on top of it\nNow you can do this on Z80 chips, ",
    "start": "444210",
    "end": "450270"
  },
  {
    "text": "I've tried doing it! If you go to very\nsimple chips there's no protection",
    "start": "450270",
    "end": "453930"
  },
  {
    "text": "mechanisms. They'll let you do anything\nyou want and you just hang yourself! Fine.",
    "start": "453930",
    "end": "458810"
  },
  {
    "text": "More advanced chips, now, and particularly\noperating systems make use of this,  give",
    "start": "458810",
    "end": "464669"
  },
  {
    "text": "you an ability to mark which pieces of\nmemory are read-only and are not to be",
    "start": "464669",
    "end": "469139"
  },
  {
    "text": "overwritten. And that way you can stay\nfairly sane.",
    "start": "469139",
    "end": "472770"
  },
  {
    "text": "Although you've left behind a polluted\npiece of code saying \"jump back to 72\" the",
    "start": "472770",
    "end": "478168"
  },
  {
    "text": "next time you come into this routine -\nmaybe having jumped from 256, shall we",
    "start": "478169",
    "end": "482610"
  },
  {
    "text": "say, you've now got to remember 256six in \nthe accumulator. The moment you",
    "start": "482610",
    "end": "487948"
  },
  {
    "text": "get in there you adjust it ever so\nslightly to come back to 258,",
    "start": "487949",
    "end": "491580"
  },
  {
    "text": "or whatever it is, and you plant that\ninstruction to overwrite the jump back",
    "start": "491580",
    "end": "496888"
  },
  {
    "text": "to 72 which is still there, literally\ninside your code. So, every single call",
    "start": "496889",
    "end": "502770"
  },
  {
    "text": "you  make into that subroutine the\nlink back has to overwrite whatever",
    "start": "502770",
    "end": "506789"
  },
  {
    "text": "usage you had before and plant it in\nexactly the right place to get back. You",
    "start": "506789",
    "end": "513270"
  },
  {
    "text": "can see now why the moment EDSAC II\ncame along - all  of a sudden this had link",
    "start": "513270",
    "end": "519330"
  },
  {
    "text": "registers. All of this early experience\njust showed the pioneers",
    "start": "519330",
    "end": "524940"
  },
  {
    "text": "what the next generation of machinery\nhad to have. And that's how the",
    "start": "524940",
    "end": "530730"
  },
  {
    "text": "importance of link registers became\nobvious. It will have occured to you of",
    "start": "530730",
    "end": "535470"
  },
  {
    "text": "course, Sean, I think I've got this right,\nthat doing it the day David Wheeler way",
    "start": "535470",
    "end": "539939"
  },
  {
    "text": "with a Wheeler Junp, right, you\nsuccessively at the end of your routine",
    "start": "539940",
    "end": "546120"
  },
  {
    "text": "of writing back and patching it with\nyour address you need to get back to,",
    "start": "546120",
    "end": "549589"
  },
  {
    "text": "That's fine and it'll work. But what does\nthat NOT enable you to do? Begins with an \"R\". omen",
    "start": "549590",
    "end": "557760"
  },
  {
    "text": ">> Sean: A further ... recursion oh yeah!\n>> DFB: One of thereasons for wanting a more general",
    "start": "557760",
    "end": "564080"
  },
  {
    "text": "mechanism for doing it is [that] you can't do\nrecursion with the Wheeler method",
    "start": "564080",
    "end": "568140"
  },
  {
    "text": "because you've only got one place in\nmemory, at the end of the subroutine,",
    "start": "568140",
    "end": "572210"
  },
  {
    "text": "where you patch back a new return\naddress. What you need with recursion is",
    "start": "572210",
    "end": "577170"
  },
  {
    "text": "to have *several* return addresses all\nwaiting to be used",
    "start": "577170",
    "end": "580860"
  },
  {
    "text": "queued up ... no not queued up ... stacked up on\ntha stack. So, that's the other thing.",
    "start": "580860",
    "end": "585660"
  },
  {
    "text": ">> Sean: Recursion is obviously a very particular\nspecial case but does this Wheeler Jump",
    "start": "585660",
    "end": "589110"
  },
  {
    "text": "not even allow you to do branches in\nbranches?\n>> DFB: Oh! you can do that. Yes, yes, you",
    "start": "589110",
    "end": "594000"
  },
  {
    "text": "can do that but but actually having, y'know \na thing call itself, since you've ",
    "start": "594000",
    "end": "601260"
  },
  {
    "text": "textually only got one copy of the\nroutine, just one, you're not able to",
    "start": "601260",
    "end": "607650"
  },
  {
    "text": "replicate the text in any way, there's no\nability to do that. You can only damage",
    "start": "607650",
    "end": "612270"
  },
  {
    "text": "that one return address, just the one.\nThat means that the next realization from",
    "start": "612270",
    "end": "618390"
  },
  {
    "text": "being a pioneer is my golly we've gotta\nbe able to do recursion. My golly we need",
    "start": "618390",
    "end": "623160"
  },
  {
    "text": "more general-purpose registers and\nall this kind of stuff. And oh! also,",
    "start": "623160",
    "end": "628379"
  },
  {
    "text": "wouldn't it be nice to put a marker on\nmemory saying: \"Don't let anybody over-write",
    "start": "628380",
    "end": "632370"
  },
  {
    "text": "this!\" And actually have it hardware-\nimposed not just by people's good nature.",
    "start": "632370",
    "end": "639350"
  }
]