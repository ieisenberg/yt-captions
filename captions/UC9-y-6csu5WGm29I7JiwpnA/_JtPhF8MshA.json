[
  {
    "text": "So computerphile's done quite a bit on\nrecursion, but so far we haven't talked",
    "start": "0",
    "end": "4380"
  },
  {
    "text": "about the idea of \"tail recursion\", which\nis a simple trick for making recursive",
    "start": "4380",
    "end": "8010"
  },
  {
    "text": "programs more efficient. And really, it's\nsomething that every programmer should",
    "start": "8010",
    "end": "10950"
  },
  {
    "text": "know about. So that's what we're going to\nlook at today - tail recursion. So as we",
    "start": "10950",
    "end": "17910"
  },
  {
    "text": "often do with these things, we're going\nto start off with a simple example, and",
    "start": "17910",
    "end": "20820"
  },
  {
    "text": "the example that we're going to look at\nis the factorial function. So what the",
    "start": "20820",
    "end": "25680"
  },
  {
    "text": "factorial function does, is it takes a\nnumber, like four, and it's simply going",
    "start": "25680",
    "end": "30720"
  },
  {
    "text": "to multiply all the numbers from four\ndown to one. So we'll do four, times three,",
    "start": "30720",
    "end": "36540"
  },
  {
    "text": "times two, times one, which hopefully\nequals 24. And this is a classic example",
    "start": "36540",
    "end": "43079"
  },
  {
    "text": "of a function that you can define\nrecursively, with two cases. So we have a",
    "start": "43079",
    "end": "48239"
  },
  {
    "text": "simple base case, which says the factorial\nof one is going to be one, because",
    "start": "48239",
    "end": "54359"
  },
  {
    "text": "if you multiply the numbers from one down\nto one, there's really nothing to do -",
    "start": "54360",
    "end": "57930"
  },
  {
    "text": "you just simply return the number one\nstraight away. And then we have a",
    "start": "57930",
    "end": "60510"
  },
  {
    "text": "recursive case, which says, if you have\nany other positive number n, what you're",
    "start": "60510",
    "end": "65820"
  },
  {
    "text": "going to do is you'll take the number n,\nand you multiply it by the factorial of",
    "start": "65820",
    "end": "71189"
  },
  {
    "text": "n minus one. So it's recursive, because\nwe're defining the factorial function in",
    "start": "71189",
    "end": "78810"
  },
  {
    "text": "terms of itself - we're saying the\nfactorial of a number n, like four, is going",
    "start": "78810",
    "end": "82890"
  },
  {
    "text": "to be n times the factorial of its\npredecessor. So it's a recursive function,",
    "start": "82890",
    "end": "87030"
  },
  {
    "text": "that's defined in terms of itself. Let's\nmake sure we all understand how this",
    "start": "87030",
    "end": "91860"
  },
  {
    "text": "function is actually operating, with a\nsimple example. And we'll find it's",
    "start": "91860",
    "end": "95670"
  },
  {
    "text": "actually very inefficient, and this is\nwhere tail recursion is going to come in,",
    "start": "95670",
    "end": "99450"
  },
  {
    "text": "to help us to make this function more\nefficient. So let's look at our simple",
    "start": "99450",
    "end": "103950"
  },
  {
    "text": "example - so we do factorial of four, and\nwe simply go to our definition, and that",
    "start": "103950",
    "end": "110640"
  },
  {
    "text": "tells us that factorial of four is going\nto be four times the factorial of its",
    "start": "110640",
    "end": "116159"
  },
  {
    "text": "predecessor, which is three. And then we think,\nwell what do we do now? Well, we're simply",
    "start": "116159",
    "end": "120868"
  },
  {
    "text": "going to take the factorial of three, and\nwe're going to expand that as well. So we",
    "start": "120869",
    "end": "125759"
  },
  {
    "text": "copy down what we had before. We've got\nfour times, and then we've got factorial",
    "start": "125759",
    "end": "130739"
  },
  {
    "text": "of three, and I'm going to use brackets here\nto make the structure, or the grouping,",
    "start": "130739",
    "end": "134550"
  },
  {
    "text": "explicit because that's going to be\nquite important. So we're doing factorial",
    "start": "134550",
    "end": "137910"
  },
  {
    "text": "of three, which is three times the factorial\nof its predecessor, which is two. And then we",
    "start": "137910",
    "end": "145020"
  },
  {
    "text": "simply do the same again. We unwind the\nrecursion one more time. We copy down",
    "start": "145020",
    "end": "148800"
  },
  {
    "text": "everything we had before - we have four times\nthree, and then we get in brackets, two times",
    "start": "148800",
    "end": "154830"
  },
  {
    "text": "the factorial of one. And now we finally\nreach the point where the recursion is",
    "start": "154830",
    "end": "159480"
  },
  {
    "text": "going to stop. We've got a factorial of one\nhere, and by definition that was just one.",
    "start": "159480",
    "end": "164010"
  },
  {
    "text": "And then finally now we can start to\nactually perform the multiplications. So",
    "start": "164010",
    "end": "167909"
  },
  {
    "text": "we'll do two times one. So I'm not going to\nskip any steps here. And then we do the three",
    "start": "167910",
    "end": "174060"
  },
  {
    "text": "times two to get six. And then finally we do\nthe four times six to get 24. You can see by",
    "start": "174060",
    "end": "181680"
  },
  {
    "text": "kind of expanding the definition here,\nthat we've been able to see that the",
    "start": "181680",
    "end": "185640"
  },
  {
    "text": "factorial of four is 24, using our simple\nrecursive definition. But unfortunately,",
    "start": "185640",
    "end": "190140"
  },
  {
    "text": "this definition is actually quite\ninefficient, and it's inefficient in",
    "start": "190140",
    "end": "194250"
  },
  {
    "text": "terms of the amount of memory it uses.\nAnd you can see this just by looking at",
    "start": "194250",
    "end": "197640"
  },
  {
    "text": "the structure of what I've written down\nhere. We start off with factorial of four,",
    "start": "197640",
    "end": "201240"
  },
  {
    "text": "which is small, and then we get a bigger\nexpression here, and a bigger expression",
    "start": "201240",
    "end": "205140"
  },
  {
    "text": "here, and a bigger expression here. And\nthis is because we're unwinding the",
    "start": "205140",
    "end": "209340"
  },
  {
    "text": "recursion, and we need to unwind, or apply,\nall the recursion before we can actually",
    "start": "209340",
    "end": "213780"
  },
  {
    "text": "get to the point where we do any of the\nmultiplications. And then we can do the",
    "start": "213780",
    "end": "217380"
  },
  {
    "text": "multiplications, and things shrink down\nagain at the end. And it's got kind of a",
    "start": "217380",
    "end": "221370"
  },
  {
    "text": "triangular shape - you start off with a\nsmall term at the top, or a small",
    "start": "221370",
    "end": "224670"
  },
  {
    "text": "expression, and as you go down, the\nexpression is getting bigger and bigger,",
    "start": "224670",
    "end": "227730"
  },
  {
    "text": "until you finally reach the end of the\nrecursion, and then you can start doing",
    "start": "227730",
    "end": "231150"
  },
  {
    "text": "the multiplies, and it all shrinks down\nto the end. So it's like a triangular",
    "start": "231150",
    "end": "234689"
  },
  {
    "text": "shape. So this kind of shows us, with the\nsimple example, that this is potentially",
    "start": "234690",
    "end": "239120"
  },
  {
    "text": "inefficient, in terms of how much memory\nit uses. And you can imagine, for example,",
    "start": "239120",
    "end": "243599"
  },
  {
    "text": "if you calculated the factorial of a\nlarge number, like a million, you'd have",
    "start": "243600",
    "end": "247590"
  },
  {
    "text": "to build up this very large intermediate\nexpression, counting down from a million",
    "start": "247590",
    "end": "251400"
  },
  {
    "text": "down to one, building up all the\nmultiplications in the middle, before you",
    "start": "251400",
    "end": "255209"
  },
  {
    "text": "actually get to the end, and you can\nstart collapsing this whole thing down.",
    "start": "255209",
    "end": "258150"
  },
  {
    "text": "So this function works - it has the\ncorrect behavior - but it's not",
    "start": "258150",
    "end": "262320"
  },
  {
    "text": "satisfactory, because it uses too\nmuch memory. So we can fix this using the",
    "start": "262320",
    "end": "268560"
  },
  {
    "text": "idea of what's called tail recursion. So\nwhat I'm going to show you now, is how to",
    "start": "268560",
    "end": "273030"
  },
  {
    "text": "redefine this function in a way which\ngives the same answer as before, but is",
    "start": "273030",
    "end": "277530"
  },
  {
    "text": "actually much more efficient. And we'll\nsee, afterwards, that this is what's",
    "start": "277530",
    "end": "281280"
  },
  {
    "text": "called tail recursion. So I'm going to\nredefine the factorial function, and I'm",
    "start": "281280",
    "end": "286169"
  },
  {
    "text": "going to use a little helper function,\nwhich I'm going to call go - and this",
    "start": "286169",
    "end": "290370"
  },
  {
    "text": "is often the name that people use for\nthese things. And go is going to take two",
    "start": "290370",
    "end": "294210"
  },
  {
    "text": "parameters, or two inputs. The first one,\nwill be the number we're trying to",
    "start": "294210",
    "end": "298800"
  },
  {
    "text": "calculate the factorial of - that's just n.\nAnd the second parameter is going to be",
    "start": "298800",
    "end": "303629"
  },
  {
    "text": "what's called an accumulator, and this is\njust a simple value that we're going to",
    "start": "303630",
    "end": "308490"
  },
  {
    "text": "use to build up a running multiplication\nas we go along, rather than waiting until",
    "start": "308490",
    "end": "312900"
  },
  {
    "text": "the end, and then doing all the\nmultiplications backwards. We'll do the",
    "start": "312900",
    "end": "315360"
  },
  {
    "text": "multiplications as we go along, and we'll\nuse this extra argument to accumulate",
    "start": "315360",
    "end": "319680"
  },
  {
    "text": "all of those values for us. So how does\nthe go function itself actually get",
    "start": "319680",
    "end": "324240"
  },
  {
    "text": "defined? Well there's two cases for this,\njust like we have two cases for the",
    "start": "324240",
    "end": "328680"
  },
  {
    "text": "factorial function. So the first case\nsays, if you're trying to calculate the",
    "start": "328680",
    "end": "333599"
  },
  {
    "text": "factorial of one, then you don't return the\nvalue one anymore, you can just return your",
    "start": "333599",
    "end": "338190"
  },
  {
    "text": "accumulated value. And if you're trying\nto calculate the factorial of some",
    "start": "338190",
    "end": "342270"
  },
  {
    "text": "number n, and you've got an accumulated value a,\nwhat you're going to do is call the go function",
    "start": "342270",
    "end": "346560"
  },
  {
    "text": "- you'll decrement the value, so four will become\nthree for example - and then the trick here is that",
    "start": "346560",
    "end": "353849"
  },
  {
    "text": "you're going to take your accumulator\nvalue, and you're going to multiply it by n.",
    "start": "353849",
    "end": "357780"
  },
  {
    "text": "So we've got a simple recursive\ndefinition here, very similar to the way",
    "start": "357780",
    "end": "362190"
  },
  {
    "text": "the factorial function works, but we're\ngoing to see that this actually gives us",
    "start": "362190",
    "end": "366120"
  },
  {
    "text": "a much more efficient definition. So\nlet's look at the same example as before.",
    "start": "366120",
    "end": "370080"
  },
  {
    "text": "We're going to look at factorial of four,\nand see whether this is more efficient",
    "start": "370080",
    "end": "376228"
  },
  {
    "text": "or not, and actually check whether it\ngives us the same result as well. So",
    "start": "376229",
    "end": "379560"
  },
  {
    "text": "we're going to call go, and we'll have\nfour, and then we'll have our initial",
    "start": "379560",
    "end": "383940"
  },
  {
    "text": "accumulator value being one. And what do we\ndo? Well, we just go to the definition, and",
    "start": "383940",
    "end": "389699"
  },
  {
    "text": "it says we subtract one, from the first\nparameter, and then we're going to",
    "start": "389699",
    "end": "394260"
  },
  {
    "text": "multiply the one by the four.  So if\nwe work out the details of that,",
    "start": "394260",
    "end": "398529"
  },
  {
    "text": "it's very simple, we're just going to\nget three and four. Now we just simply",
    "start": "398529",
    "end": "403659"
  },
  {
    "text": "repeat the process. We say what is go of\nthree and four? Well, we call the go",
    "start": "403659",
    "end": "408309"
  },
  {
    "text": "function again, and we decrement the\nfirst parameter. And then we multiply the",
    "start": "408309",
    "end": "412629"
  },
  {
    "text": "two parameters. So in this case, we\nmultiply the three and the four. So we",
    "start": "412629",
    "end": "416738"
  },
  {
    "text": "get twelve. And then we go one more time.\nWe go. We decrement the first parameter,",
    "start": "416739",
    "end": "420969"
  },
  {
    "text": "so we get one. And then we multiply\nthe two in the twelve, and we get 24.",
    "start": "420969",
    "end": "425949"
  },
  {
    "text": "Now we're finally down at the base case, so\nwe can stop. And we simply give back the",
    "start": "425949",
    "end": "431139"
  },
  {
    "text": "result, 24. What you see here is that you\nget the same result as we had before,",
    "start": "431139",
    "end": "436209"
  },
  {
    "text": "factorial of four is 24, but now it's much\nmore efficient in terms of memory. And we",
    "start": "436209",
    "end": "441999"
  },
  {
    "text": "can see this, simply by looking at the\nstructure of what we have. Here we have",
    "start": "441999",
    "end": "446199"
  },
  {
    "text": "go applied to four and one, then go apply\nit to three and four, and so on, and so on.",
    "start": "446199",
    "end": "451449"
  },
  {
    "text": "So the term here, or the expression that\nwe're manipulating, is simply a function",
    "start": "451449",
    "end": "455589"
  },
  {
    "text": "applied to two inputs. That just uses a\nvery tiny amount of memory - we don't need",
    "start": "455589",
    "end": "460089"
  },
  {
    "text": "to use enormous amounts of memory to\nbuild up a large intermediate expression,",
    "start": "460089",
    "end": "463719"
  },
  {
    "text": "which then we collapse down at the end.\nWe're just using constant amounts of",
    "start": "463719",
    "end": "467499"
  },
  {
    "text": "memory, as we go along. And this is\nachieved, because the go function is",
    "start": "467499",
    "end": "472779"
  },
  {
    "text": "what's called tail recursive. Let's have\na look at the definition of the go",
    "start": "472779",
    "end": "476649"
  },
  {
    "text": "function. In particular, let's look at the\nright-hand side of the recursive case.",
    "start": "476649",
    "end": "482589"
  },
  {
    "text": "So, the right-hand side tells us how to\ncalculate go of n and a. And if we think",
    "start": "482589",
    "end": "486849"
  },
  {
    "text": "about how this is actually evaluated, we\nwould first of all subtract one from n,",
    "start": "486849",
    "end": "491559"
  },
  {
    "text": "then we would multiply a and n together,\nto give our new accumulator value. And",
    "start": "491559",
    "end": "497018"
  },
  {
    "text": "then finally, the last thing that we do,\nis do the recursion. So this is the idea",
    "start": "497019",
    "end": "502809"
  },
  {
    "text": "of tail recursion, when you make a single\nrecursive call, and the very last thing",
    "start": "502809",
    "end": "507339"
  },
  {
    "text": "you do is make that recursive call. So\nthere's nothing to do afterwards.",
    "start": "507339",
    "end": "510578"
  },
  {
    "text": "And actually, this is what's making this\ndefinition more efficient than our",
    "start": "510579",
    "end": "514779"
  },
  {
    "text": "previous one, because we don't need to\nremember anything after we make the",
    "start": "514779",
    "end": "518529"
  },
  {
    "text": "recursive call to the go function. And\nthis is in contrast to our original",
    "start": "518529",
    "end": "524078"
  },
  {
    "text": "definition of the factorial function. If\nwe look at this definition, and we think,",
    "start": "524079",
    "end": "528459"
  },
  {
    "text": "well how does this right-hand\nside here, in the recursive-case, ",
    "start": "528459",
    "end": "530950"
  },
  {
    "text": "case get evaluated. Well, what we would do\nis we'd first of all subtract one from n,",
    "start": "530950",
    "end": "536170"
  },
  {
    "text": "then we'd call the factorial function,\nand once that had returned, we need to",
    "start": "536170",
    "end": "541510"
  },
  {
    "text": "remember that we still need to do the\nmultiply. So it's not tail recursive,",
    "start": "541510",
    "end": "545530"
  },
  {
    "text": "because the last thing that we do, is not\napplying the recursive definition - after",
    "start": "545530",
    "end": "550360"
  },
  {
    "text": "the recursive call, we still need to\nremember to multiply by n. And that's the",
    "start": "550360",
    "end": "554470"
  },
  {
    "text": "source of our inefficiency here. So\nthat's one example of tail recursion. Let",
    "start": "554470",
    "end": "560410"
  },
  {
    "text": "me show you another example of tail\nrecursion, and what we're going to look",
    "start": "560410",
    "end": "563769"
  },
  {
    "text": "at is what's called the Fibonacci\nsequence, which is a very famous sequence",
    "start": "563770",
    "end": "567820"
  },
  {
    "text": "of numbers in computer\nscience and mathematics.",
    "start": "567820",
    "end": "570760"
  },
  {
    "text": "So the Fibonacci sequence begins in a very\nsimple way - we simply have zero and one.",
    "start": "570760",
    "end": "576490"
  },
  {
    "text": "These are going to end up being the base\ncases for our definition. And then, the",
    "start": "576490",
    "end": "580360"
  },
  {
    "text": "Fibonacci sequence proceeds, by simply\nadding together the two previous values.",
    "start": "580360",
    "end": "584740"
  },
  {
    "text": "So you add the zero and one, to give one.\nYou add the one and the one to give two.",
    "start": "584740",
    "end": "588760"
  },
  {
    "text": "You add the one on the two to give three.\nAnd then hopefully, I don't mess it up.",
    "start": "588760",
    "end": "593560"
  },
  {
    "text": "And the sequence proceeds out to\ninfinity. So this is the Fibonacci",
    "start": "593560",
    "end": "598870"
  },
  {
    "text": "sequence - how do we define this as a\nrecursive definition? And there's a very",
    "start": "598870",
    "end": "603700"
  },
  {
    "text": "simple way to do this, but the very\nsimple way is actually going to be very",
    "start": "603700",
    "end": "607090"
  },
  {
    "text": "inefficient, but we can make it efficient\nusing tail recursion. So let me show you",
    "start": "607090",
    "end": "611980"
  },
  {
    "text": "the inefficient way first of all. So we\ncan define a function, which is going to",
    "start": "611980",
    "end": "617290"
  },
  {
    "text": "take a number as an input, n. And then\nit's going to give us back the nth",
    "start": "617290",
    "end": "623050"
  },
  {
    "text": "Fibonacci number starting from zero,\nbecause computer scientists always count",
    "start": "623050",
    "end": "626709"
  },
  {
    "text": "from zero. So the base case for the\ndefinition - if you want the 0th",
    "start": "626710",
    "end": "630520"
  },
  {
    "text": "Fibonacci number, that's the first thing\nin the sequence, that's zero. If you want",
    "start": "630520",
    "end": "634960"
  },
  {
    "text": "the 1st Fibonacci number, counting from\nzero, that's the second thing in the",
    "start": "634960",
    "end": "638410"
  },
  {
    "text": "sequence, so that's going to be one. And\nthen if you want the nth Fibonacci",
    "start": "638410",
    "end": "641829"
  },
  {
    "text": "number, you take the two preceeding ones,\nand you add them together - so fib of n, is",
    "start": "641830",
    "end": "646300"
  },
  {
    "text": "fib of n minus one, plus fib of n minus\ntwo. So that's a nice simple recursive",
    "start": "646300",
    "end": "651250"
  },
  {
    "text": "definition, but unfortunately it's\nhorrendously inefficient. For example, if",
    "start": "651250",
    "end": "655240"
  },
  {
    "text": "you tried just calculating Fibonacci of 50,\neven using quite a fast machine, even",
    "start": "655240",
    "end": "659740"
  },
  {
    "text": "after a few minutes, it won't have\nterminated - it's going to take an awfully",
    "start": "659740",
    "end": "662620"
  },
  {
    "text": "long time to do that.  And\nthere's a number of problems",
    "start": "662620",
    "end": "665150"
  },
  {
    "text": "with the definition - it uses double\nrecursion here, we're making two",
    "start": "665150",
    "end": "668300"
  },
  {
    "text": "recursive calls. That potentially could\nbe a source of inefficiency. We're also",
    "start": "668300",
    "end": "672140"
  },
  {
    "text": "not using tail recursion, because once\nthe two recursive calls finish,",
    "start": "672140",
    "end": "676670"
  },
  {
    "text": "we still need to remember that we need\nto add the two resulting numbers",
    "start": "676670",
    "end": "680269"
  },
  {
    "text": "together. And actually, there's another\nsource of inefficiency here - if you think",
    "start": "680270",
    "end": "683600"
  },
  {
    "text": "about it, this is recomputing the same\nFibonacci numbers all of the time. So",
    "start": "683600",
    "end": "688009"
  },
  {
    "text": "let's see, how we can use the idea of\ntail recursion, to make this recursive",
    "start": "688010",
    "end": "692390"
  },
  {
    "text": "definition more efficient, or actually\nextremely efficient. So let's rewrite it.",
    "start": "692390",
    "end": "696440"
  },
  {
    "text": "We use the same kind of trick as we did\nbefore. So we're redefining the Fibonacci",
    "start": "696440",
    "end": "701510"
  },
  {
    "text": "function, and it takes a number n. And\nwe're going to call a helper function",
    "start": "701510",
    "end": "705920"
  },
  {
    "text": "called go. And it's going to take n as\nits first parameter. And this time, it's",
    "start": "705920",
    "end": "710420"
  },
  {
    "text": "not going to take an accumulator as its\nsecond input, it's going to take a pair",
    "start": "710420",
    "end": "715070"
  },
  {
    "text": "of numbers. And the pair\nof numbers we're going to",
    "start": "715070",
    "end": "717950"
  },
  {
    "text": "take, are simply the current Fibonacci\nnumber, and the next one. So initially",
    "start": "717950",
    "end": "722810"
  },
  {
    "text": "we're going to have zero and one, because\nthose are the two first Fibonacci",
    "start": "722810",
    "end": "726290"
  },
  {
    "text": "numbers. And then as we move along, we're\ngoing to kind of shift that little",
    "start": "726290",
    "end": "730279"
  },
  {
    "text": "window on the Fibonacci sequence along.  So\ninitially it will be 0 1, then 1 1, 1 2,",
    "start": "730280",
    "end": "735890"
  },
  {
    "text": "and so on. So I'm going to be shifting\nthat little window along. So this is what",
    "start": "735890",
    "end": "739700"
  },
  {
    "text": "the go function is going to do for us. So\nthere's three cases here. So we could go",
    "start": "739700",
    "end": "745370"
  },
  {
    "text": "with zero, we could go with one, and we have\na pair (a,b). Or we could go with n, and we",
    "start": "745370",
    "end": "751760"
  },
  {
    "text": "have a pair (a,b). So we can think how do\nwe define the three cases? So the two",
    "start": "751760",
    "end": "756230"
  },
  {
    "text": "base cases are very simple - if I want the\n0th Fibonacci number, I've already got it,",
    "start": "756230",
    "end": "760459"
  },
  {
    "text": "it's simply a. If I want the 1st one,\nit's simply b. And then if I want the",
    "start": "760460",
    "end": "765560"
  },
  {
    "text": "nth one, all I'm going to do is call the go\nfunction, decement the 1st parameter, so the four",
    "start": "765560",
    "end": "772100"
  },
  {
    "text": "would become three. And then I take my little\nwindow (a,b), and I'm going to move it",
    "start": "772100",
    "end": "776300"
  },
  {
    "text": "along one. So if a is the current\nFibonacci number, and b is the next, and I",
    "start": "776300",
    "end": "780920"
  },
  {
    "text": "want to move along one step, then b will\nnow be the current Fibonacci number, and",
    "start": "780920",
    "end": "785839"
  },
  {
    "text": "a plus b will be the next one. So this is\nthe idea of just moving along a step. So",
    "start": "785840",
    "end": "791900"
  },
  {
    "text": "a simple example with that,\nwould be if I take the pair (2,3), ",
    "start": "791900",
    "end": "795649"
  },
  {
    "text": "and move it along, the three will\nmove into the first position, and we add",
    "start": "795649",
    "end": "800839"
  },
  {
    "text": "the two numbers together and we get five.\nSo that's kind of moving one step along",
    "start": "800839",
    "end": "804350"
  },
  {
    "text": "in the Fibonacci sequence. So here is my\ndefinition, for the go function, and",
    "start": "804350",
    "end": "809389"
  },
  {
    "text": "notice that it's tail-recursive - it makes\na single recursive call, and it's the",
    "start": "809389",
    "end": "814339"
  },
  {
    "text": "last thing that we do. So in particular,\nif we think how does the right-hand",
    "start": "814339",
    "end": "818720"
  },
  {
    "text": "side here actually get executed? Well\nwe'd subtract one from n, then we'd form",
    "start": "818720",
    "end": "823459"
  },
  {
    "text": "this pair a, and a plus b, and then the\nvery last thing we do, is we make a",
    "start": "823459",
    "end": "827720"
  },
  {
    "text": "single recursive call. Okay, there's no\nmore double recursion anymore. So let's",
    "start": "827720",
    "end": "832519"
  },
  {
    "text": "just check that this actually works\ncorrectly, and that it is actually more",
    "start": "832519",
    "end": "835428"
  },
  {
    "text": "efficient. So let's try calculating the\n4th Fibonacci number, using this, and",
    "start": "835429",
    "end": "841670"
  },
  {
    "text": "see what happens. So we apply the go\nfunction. Four is the first parameter, and",
    "start": "841670",
    "end": "846529"
  },
  {
    "text": "we take zero and one as the current and\nnext Fibonacci numbers. And then we just",
    "start": "846529",
    "end": "851509"
  },
  {
    "text": "unwind the recursive definition. So the\nfour is going to decrement to become three.",
    "start": "851509",
    "end": "855949"
  },
  {
    "text": "And then we move our little window along\none. So one is going to become the",
    "start": "855949",
    "end": "861199"
  },
  {
    "text": "current Fibonacci number, and we add the\nzero and one to get the next one, so we get",
    "start": "861199",
    "end": "865579"
  },
  {
    "text": "(1,1). Then we continue, so we go, we\ndecrement the three to get two. The second",
    "start": "865579",
    "end": "872149"
  },
  {
    "text": "one becomes the first component of the\npair here, and then we add the one and",
    "start": "872149",
    "end": "875628"
  },
  {
    "text": "the one to get two. Then we continue. So\nthe two is now going to move over - we're",
    "start": "875629",
    "end": "881240"
  },
  {
    "text": "shifting along one, the two becomes the\nfirst thing, we add the one and the two",
    "start": "881240",
    "end": "884329"
  },
  {
    "text": "we get three. And then, finally, we reach\none of our base cases, and that will be",
    "start": "884329",
    "end": "888470"
  },
  {
    "text": "the second component of the pair, which\nis three. And we can just double-check",
    "start": "888470",
    "end": "893209"
  },
  {
    "text": "that that's correct - and we go back to\nthe Fibonacci sequence, and we're looking",
    "start": "893209",
    "end": "896839"
  },
  {
    "text": "for the 4th Fibonacci number counting\nfrom zero. So there's zero, one, two, three",
    "start": "896839",
    "end": "901639"
  },
  {
    "text": "four, so we find that three is the\ncorrect answer here. The point here is",
    "start": "901639",
    "end": "905329"
  },
  {
    "text": "that because the go function is tail\nrecursive, we get this result extremely",
    "start": "905329",
    "end": "909529"
  },
  {
    "text": "efficiently. If you look at the structure\nof what we have over here, it's very",
    "start": "909529",
    "end": "912949"
  },
  {
    "text": "simple - we just simply have a function,\napplied to two numbers, or three numbers",
    "start": "912949",
    "end": "916730"
  },
  {
    "text": "really - four, zero and one. Same here, same\nhere, and same here. So we don't have a",
    "start": "916730",
    "end": "921829"
  },
  {
    "text": "computation, or an expression, which is\ngrowing and shrinking - it uses constant",
    "start": "921829",
    "end": "925819"
  },
  {
    "text": "memory here. And it can run\nextremely fast because of that.",
    "start": "925819",
    "end": "929449"
  },
  {
    "text": "So that's all for today. It's just been a\nquick introduction to the idea of tail",
    "start": "929450",
    "end": "933800"
  },
  {
    "text": "recursion. And the idea is, basically, you\ncan sometimes make recursive functions",
    "start": "933800",
    "end": "937730"
  },
  {
    "text": "more efficient by making recursion the\nlast thing that you do. And it's a simple",
    "start": "937730",
    "end": "942860"
  },
  {
    "text": "trick which really every\nprogrammer should know.",
    "start": "942860",
    "end": "948140"
  }
]