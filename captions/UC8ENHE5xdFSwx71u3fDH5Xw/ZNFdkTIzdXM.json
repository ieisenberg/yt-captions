[
  {
    "text": "right now A lot of people are trying",
    "start": "280",
    "end": "2159"
  },
  {
    "text": "rust out and there is a lot of",
    "start": "2159",
    "end": "4560"
  },
  {
    "text": "difficulty I mean the memes for the",
    "start": "4560",
    "end": "6279"
  },
  {
    "text": "borrow Checker are incredible don't be a",
    "start": "6279",
    "end": "8840"
  },
  {
    "text": "meme okay this video is going to help",
    "start": "8840",
    "end": "10880"
  },
  {
    "text": "you not be a meme by showing you some",
    "start": "10880",
    "end": "13000"
  },
  {
    "text": "typescript and then how to do it in Rust",
    "start": "13000",
    "end": "16000"
  },
  {
    "text": "hopefully to demystify how the borrow",
    "start": "16000",
    "end": "18320"
  },
  {
    "text": "Checker works now before we begin I do",
    "start": "18320",
    "end": "20960"
  },
  {
    "text": "make the basic assumption that you have",
    "start": "20960",
    "end": "22880"
  },
  {
    "text": "programming experience meaning that this",
    "start": "22880",
    "end": "24800"
  },
  {
    "text": "is truly a tutorial for people who know",
    "start": "24800",
    "end": "27160"
  },
  {
    "text": "typescript well so none of this should",
    "start": "27160",
    "end": "29119"
  },
  {
    "text": "even surprise you up here you can see",
    "start": "29119",
    "end": "31080"
  },
  {
    "text": "okay this is the main function this is",
    "start": "31080",
    "end": "32439"
  },
  {
    "text": "the entry point okay I'm creating a list",
    "start": "32439",
    "end": "34680"
  },
  {
    "text": "of 1 2 3 yeah maybe some Concepts aren't",
    "start": "34680",
    "end": "37559"
  },
  {
    "text": "directly familiar coming from the",
    "start": "37559",
    "end": "39280"
  },
  {
    "text": "typescript only world but you get the",
    "start": "39280",
    "end": "41399"
  },
  {
    "text": "concept I have a variable that equals",
    "start": "41399",
    "end": "43719"
  },
  {
    "text": "this and of course you're Advanced",
    "start": "43719",
    "end": "45200"
  },
  {
    "text": "enough to be able to read this ER and",
    "start": "45200",
    "end": "46520"
  },
  {
    "text": "realize you made a huge mistake by not",
    "start": "46520",
    "end": "48160"
  },
  {
    "text": "subscribing to me check the comments",
    "start": "48160",
    "end": "49680"
  },
  {
    "text": "down below everyone will tell you how",
    "start": "49680",
    "end": "51520"
  },
  {
    "text": "much easier it is to understand the",
    "start": "51520",
    "end": "53600"
  },
  {
    "text": "borrow Checker if you are subscribed so",
    "start": "53600",
    "end": "55960"
  },
  {
    "text": "let's start off with this simple",
    "start": "55960",
    "end": "57280"
  },
  {
    "text": "typescript example effectively all I'm",
    "start": "57280",
    "end": "59320"
  },
  {
    "text": "going to do is print out an array of",
    "start": "59320",
    "end": "61160"
  },
  {
    "text": "numbers I'm going to create the array",
    "start": "61160",
    "end": "62879"
  },
  {
    "text": "right here and then I'm going to print",
    "start": "62879",
    "end": "64158"
  },
  {
    "text": "it out twice passing in that array now",
    "start": "64159",
    "end": "66479"
  },
  {
    "text": "this may seem like pretty benign code",
    "start": "66479",
    "end": "68360"
  },
  {
    "text": "but the identical code in Rust actually",
    "start": "68360",
    "end": "70880"
  },
  {
    "text": "does not compile so this is a good time",
    "start": "70880",
    "end": "73280"
  },
  {
    "text": "to talk about a couple things that you",
    "start": "73280",
    "end": "74640"
  },
  {
    "text": "need to know in Rust there are such",
    "start": "74640",
    "end": "76759"
  },
  {
    "text": "things as values and in this case item",
    "start": "76759",
    "end": "79600"
  },
  {
    "text": "holds on to the value of a vector 1 2 3",
    "start": "79600",
    "end": "83079"
  },
  {
    "text": "you can think of a vector almost",
    "start": "83079",
    "end": "84400"
  },
  {
    "text": "identical as you would say a list in",
    "start": "84400",
    "end": "86600"
  },
  {
    "text": "JavaScript now the thing in Rust is that",
    "start": "86600",
    "end": "88320"
  },
  {
    "text": "there can only be one value holder so",
    "start": "88320",
    "end": "91759"
  },
  {
    "text": "when I hand this value to the function",
    "start": "91759",
    "end": "95439"
  },
  {
    "text": "print out item that function now is the",
    "start": "95439",
    "end": "98479"
  },
  {
    "text": "owner of the value which means that when",
    "start": "98479",
    "end": "100600"
  },
  {
    "text": "I hand it out a second time that value",
    "start": "100600",
    "end": "103040"
  },
  {
    "text": "is gone the function had it it used it",
    "start": "103040",
    "end": "105680"
  },
  {
    "text": "it did nothing with it it's gone the",
    "start": "105680",
    "end": "107479"
  },
  {
    "text": "list is gone that's why you can see",
    "start": "107479",
    "end": "109200"
  },
  {
    "text": "something right here that says value",
    "start": "109200",
    "end": "110759"
  },
  {
    "text": "moved here use of moved value those",
    "start": "110759",
    "end": "114040"
  },
  {
    "text": "errors are pretty clear what's happened",
    "start": "114040",
    "end": "115960"
  },
  {
    "text": "so that leads us to our second kind of",
    "start": "115960",
    "end": "117640"
  },
  {
    "text": "type of value I can put an Amper right",
    "start": "117640",
    "end": "120280"
  },
  {
    "text": "here and that means I'm going to refer",
    "start": "120280",
    "end": "122640"
  },
  {
    "text": "to a value not actually be the owner of",
    "start": "122640",
    "end": "124920"
  },
  {
    "text": "the value I'll be the owner of this",
    "start": "124920",
    "end": "126719"
  },
  {
    "text": "specific reference to that value I can",
    "start": "126719",
    "end": "128840"
  },
  {
    "text": "go down here and I can hand out these",
    "start": "128840",
    "end": "130840"
  },
  {
    "text": "two references now the thing about these",
    "start": "130840",
    "end": "132440"
  },
  {
    "text": "references is they're called immutable",
    "start": "132440",
    "end": "134120"
  },
  {
    "text": "references they have handed out a",
    "start": "134120",
    "end": "136120"
  },
  {
    "text": "reference in which somebody else can",
    "start": "136120",
    "end": "137680"
  },
  {
    "text": "hold on and look to the values but they",
    "start": "137680",
    "end": "140400"
  },
  {
    "text": "may not mutate it in any way so this",
    "start": "140400",
    "end": "142760"
  },
  {
    "text": "Vector is effectively constant at this",
    "start": "142760",
    "end": "144519"
  },
  {
    "text": "point and you can see cuz I can go like",
    "start": "144519",
    "end": "146200"
  },
  {
    "text": "this item. push you know five and it's",
    "start": "146200",
    "end": "148840"
  },
  {
    "text": "going to tell you sorry you cannot",
    "start": "148840",
    "end": "151040"
  },
  {
    "text": "borrow this thing as mutable it's",
    "start": "151040",
    "end": "153480"
  },
  {
    "text": "immutable so now we have made this",
    "start": "153480",
    "end": "155239"
  },
  {
    "text": "effectively identical to the typescript",
    "start": "155239",
    "end": "157519"
  },
  {
    "text": "version in which instead of passing in",
    "start": "157519",
    "end": "159440"
  },
  {
    "text": "the value we pass in a reference to that",
    "start": "159440",
    "end": "162080"
  },
  {
    "text": "value this is also referred to as",
    "start": "162080",
    "end": "164400"
  },
  {
    "text": "borrowing so that is why it's called the",
    "start": "164400",
    "end": "166319"
  },
  {
    "text": "borrow Checker it checks who is",
    "start": "166319",
    "end": "168440"
  },
  {
    "text": "borrowing what whether they're borrowing",
    "start": "168440",
    "end": "169959"
  },
  {
    "text": "it immutably or mutably now if you like",
    "start": "169959",
    "end": "172879"
  },
  {
    "text": "rust and typescript check out these guys",
    "start": "172879",
    "end": "174599"
  },
  {
    "text": "at chisel strike it's a rust codebase",
    "start": "174599",
    "end": "176800"
  },
  {
    "text": "that allows you to use typescript to",
    "start": "176800",
    "end": "178200"
  },
  {
    "text": "define your data model and your business",
    "start": "178200",
    "end": "180400"
  },
  {
    "text": "logic and security policies and have a",
    "start": "180400",
    "end": "182360"
  },
  {
    "text": "fully functional rest API for you no",
    "start": "182360",
    "end": "184840"
  },
  {
    "text": "database management it's all done with",
    "start": "184840",
    "end": "186640"
  },
  {
    "text": "their own version of SQL light and it's",
    "start": "186640",
    "end": "188599"
  },
  {
    "text": "no hassle and it's all open source so go",
    "start": "188599",
    "end": "191640"
  },
  {
    "text": "check out their Russ Fu and give them a",
    "start": "191640",
    "end": "193280"
  },
  {
    "text": "start on GitHub and if you want a fully",
    "start": "193280",
    "end": "194799"
  },
  {
    "text": "managed solution you can sign up for",
    "start": "194799",
    "end": "196159"
  },
  {
    "text": "their beta right now for free with your",
    "start": "196159",
    "end": "198519"
  },
  {
    "text": "GitHub account at schisel strike.com all",
    "start": "198519",
    "end": "201080"
  },
  {
    "text": "right back to the rust all right so the",
    "start": "201080",
    "end": "203000"
  },
  {
    "text": "second thing that we're going to look at",
    "start": "203000",
    "end": "204319"
  },
  {
    "text": "is this right here so we create a class",
    "start": "204319",
    "end": "205840"
  },
  {
    "text": "that's called Foo we have an array of",
    "start": "205840",
    "end": "208000"
  },
  {
    "text": "three foo's and then I'm going to grab",
    "start": "208000",
    "end": "209799"
  },
  {
    "text": "gra the last item out of the array then",
    "start": "209799",
    "end": "212159"
  },
  {
    "text": "I'm going to pop that item out of the",
    "start": "212159",
    "end": "213879"
  },
  {
    "text": "array and then I'll log out that last",
    "start": "213879",
    "end": "216120"
  },
  {
    "text": "item now this looks like a pretty kind",
    "start": "216120",
    "end": "217760"
  },
  {
    "text": "of normal case you've seen in JavaScript",
    "start": "217760",
    "end": "219920"
  },
  {
    "text": "before where you refer to something in",
    "start": "219920",
    "end": "222439"
  },
  {
    "text": "an array and then the array eventually",
    "start": "222439",
    "end": "224159"
  },
  {
    "text": "gets mutated but you still hold on to",
    "start": "224159",
    "end": "226040"
  },
  {
    "text": "that value or a reference to that value",
    "start": "226040",
    "end": "228000"
  },
  {
    "text": "now this works because JavaScript keeps",
    "start": "228000",
    "end": "229760"
  },
  {
    "text": "track of who holds on to what and only",
    "start": "229760",
    "end": "231599"
  },
  {
    "text": "deletes things once nobody holds on to",
    "start": "231599",
    "end": "233920"
  },
  {
    "text": "them anymore this is commonly referred",
    "start": "233920",
    "end": "235439"
  },
  {
    "text": "to as garbage collection so when I jump",
    "start": "235439",
    "end": "237159"
  },
  {
    "text": "over to my rust example you just see",
    "start": "237159",
    "end": "238680"
  },
  {
    "text": "errors and everything BL up everywhere",
    "start": "238680",
    "end": "240400"
  },
  {
    "text": "and you don't understand why let's walk",
    "start": "240400",
    "end": "242159"
  },
  {
    "text": "through why well first off I do the same",
    "start": "242159",
    "end": "244120"
  },
  {
    "text": "thing I create an array list of FO then",
    "start": "244120",
    "end": "247560"
  },
  {
    "text": "I hold on to the last item in the list",
    "start": "247560",
    "end": "250000"
  },
  {
    "text": "then I pop then I try to print out the",
    "start": "250000",
    "end": "252439"
  },
  {
    "text": "last item in the list so what's",
    "start": "252439",
    "end": "254239"
  },
  {
    "text": "effectively happening right here is that",
    "start": "254239",
    "end": "256160"
  },
  {
    "text": "we have a immutable reference to an item",
    "start": "256160",
    "end": "259040"
  },
  {
    "text": "within the list that means we're",
    "start": "259040",
    "end": "260519"
  },
  {
    "text": "referring to a value that means I could",
    "start": "260519",
    "end": "262440"
  },
  {
    "text": "technically take this value and print it",
    "start": "262440",
    "end": "264440"
  },
  {
    "text": "right here and it's not a problem we",
    "start": "264440",
    "end": "266199"
  },
  {
    "text": "could see that value being the third Fu",
    "start": "266199",
    "end": "268600"
  },
  {
    "text": "so if we had some sort of of way to",
    "start": "268600",
    "end": "270199"
  },
  {
    "text": "identify that this was a third Fu you'd",
    "start": "270199",
    "end": "271880"
  },
  {
    "text": "see it within that print statement but",
    "start": "271880",
    "end": "273479"
  },
  {
    "text": "then we mutate the vector so what am I",
    "start": "273479",
    "end": "276720"
  },
  {
    "text": "referring to am I referring to the last",
    "start": "276720",
    "end": "279240"
  },
  {
    "text": "spot in the vector that no longer exists",
    "start": "279240",
    "end": "281199"
  },
  {
    "text": "who holds on to that value there is no",
    "start": "281199",
    "end": "283520"
  },
  {
    "text": "garbage collector there is nothing that",
    "start": "283520",
    "end": "285199"
  },
  {
    "text": "manages all the objects for you instead",
    "start": "285199",
    "end": "288120"
  },
  {
    "text": "you manage who owns the object just like",
    "start": "288120",
    "end": "290680"
  },
  {
    "text": "in our previous example that there was a",
    "start": "290680",
    "end": "292520"
  },
  {
    "text": "value nobody holds on to that value",
    "start": "292520",
    "end": "295080"
  },
  {
    "text": "anymore only you hold on to a reference",
    "start": "295080",
    "end": "297479"
  },
  {
    "text": "to that value and that's very",
    "start": "297479",
    "end": "298919"
  },
  {
    "text": "problematic and how rust catches that is",
    "start": "298919",
    "end": "301720"
  },
  {
    "text": "by not allowing a immutable reference at",
    "start": "301720",
    "end": "304639"
  },
  {
    "text": "the exact same time you have a mutable",
    "start": "304639",
    "end": "307080"
  },
  {
    "text": "reference out a mutable reference of",
    "start": "307080",
    "end": "308960"
  },
  {
    "text": "course meaning that vector. pop requires",
    "start": "308960",
    "end": "311280"
  },
  {
    "text": "a mutable reference to Vector such that",
    "start": "311280",
    "end": "313639"
  },
  {
    "text": "they can mutate the inner state but if",
    "start": "313639",
    "end": "315360"
  },
  {
    "text": "you want to see something funny if I",
    "start": "315360",
    "end": "316800"
  },
  {
    "text": "delete this last line all the warnings",
    "start": "316800",
    "end": "318840"
  },
  {
    "text": "go away and the reason being is that",
    "start": "318840",
    "end": "320840"
  },
  {
    "text": "Russ was able to tell I have an",
    "start": "320840",
    "end": "323319"
  },
  {
    "text": "immutable reference up until this point",
    "start": "323319",
    "end": "326080"
  },
  {
    "text": "and then I only have a mutable reference",
    "start": "326080",
    "end": "328800"
  },
  {
    "text": "out so long as I don't refer to last Fu",
    "start": "328800",
    "end": "331560"
  },
  {
    "text": "again after this point it will not give",
    "start": "331560",
    "end": "334360"
  },
  {
    "text": "me an error that's because I've obeyed",
    "start": "334360",
    "end": "335919"
  },
  {
    "text": "the most important rule about the rust",
    "start": "335919",
    "end": "337520"
  },
  {
    "text": "Barrow Checker I may have a mutable",
    "start": "337520",
    "end": "340280"
  },
  {
    "text": "reference or immutable references but",
    "start": "340280",
    "end": "342919"
  },
  {
    "text": "not both at the same time all right so",
    "start": "342919",
    "end": "344800"
  },
  {
    "text": "let's look at this third example so",
    "start": "344800",
    "end": "346280"
  },
  {
    "text": "right here I'm creating a Fu that has a",
    "start": "346280",
    "end": "348280"
  },
  {
    "text": "value that's incremented every time I",
    "start": "348280",
    "end": "349840"
  },
  {
    "text": "knew one up I'm going to reverse and",
    "start": "349840",
    "end": "351919"
  },
  {
    "text": "then print an array I'll create that",
    "start": "351919",
    "end": "354680"
  },
  {
    "text": "array and then I've called reverse and",
    "start": "354680",
    "end": "356840"
  },
  {
    "text": "print twice for those that don't know",
    "start": "356840",
    "end": "358680"
  },
  {
    "text": "what happened effectively we did reverse",
    "start": "358680",
    "end": "360520"
  },
  {
    "text": "the array but then we re- reversed our",
    "start": "360520",
    "end": "363280"
  },
  {
    "text": "reverse now what makes this so difficult",
    "start": "363280",
    "end": "365280"
  },
  {
    "text": "for a lot of people in JavaScript",
    "start": "365280",
    "end": "367319"
  },
  {
    "text": "there's a series of methods that both do",
    "start": "367319",
    "end": "369360"
  },
  {
    "text": "something and return an array some of",
    "start": "369360",
    "end": "371440"
  },
  {
    "text": "them mutate some of them copy a good",
    "start": "371440",
    "end": "373280"
  },
  {
    "text": "example would be food.map map copies and",
    "start": "373280",
    "end": "376400"
  },
  {
    "text": "creates a new array food. reverse does",
    "start": "376400",
    "end": "379039"
  },
  {
    "text": "not copy but returns out the array now",
    "start": "379039",
    "end": "381440"
  },
  {
    "text": "for those that are very experienced they",
    "start": "381440",
    "end": "383400"
  },
  {
    "text": "already know all these rules okay sorts",
    "start": "383400",
    "end": "385280"
  },
  {
    "text": "in place reverses in place uh map and",
    "start": "385280",
    "end": "387960"
  },
  {
    "text": "filter are copies right you like know",
    "start": "387960",
    "end": "390199"
  },
  {
    "text": "these things intrinsically but for all",
    "start": "390199",
    "end": "392120"
  },
  {
    "text": "the people that are new they don't know",
    "start": "392120",
    "end": "394440"
  },
  {
    "text": "this and everybody has to go through the",
    "start": "394440",
    "end": "396800"
  },
  {
    "text": "process of learning by error eventually",
    "start": "396800",
    "end": "399560"
  },
  {
    "text": "now this does not even exist in Rust and",
    "start": "399560",
    "end": "401440"
  },
  {
    "text": "let me show you so I tried to create the",
    "start": "401440",
    "end": "403160"
  },
  {
    "text": "exact same version now remember we",
    "start": "403160",
    "end": "405400"
  },
  {
    "text": "already learned this in our first lesson",
    "start": "405400",
    "end": "407199"
  },
  {
    "text": "I'm taking in a reference to a vector",
    "start": "407199",
    "end": "409840"
  },
  {
    "text": "and then I'm calling an iterator and I'm",
    "start": "409840",
    "end": "411599"
  },
  {
    "text": "reversing it and then printing it each",
    "start": "411599",
    "end": "413240"
  },
  {
    "text": "out my value is right here owned by the",
    "start": "413240",
    "end": "416240"
  },
  {
    "text": "variable vector and then I just pass a",
    "start": "416240",
    "end": "418560"
  },
  {
    "text": "reference into each one of these now for",
    "start": "418560",
    "end": "420960"
  },
  {
    "text": "me to recreate exactly what happened",
    "start": "420960",
    "end": "423360"
  },
  {
    "text": "before I would have to call reverse on",
    "start": "423360",
    "end": "425639"
  },
  {
    "text": "the vector so let's go over here and go",
    "start": "425639",
    "end": "427400"
  },
  {
    "text": "like this Fu reverse now reverse does",
    "start": "427400",
    "end": "430360"
  },
  {
    "text": "happen but look at what the",
    "start": "430360",
    "end": "431440"
  },
  {
    "text": "documentation says right here it",
    "start": "431440",
    "end": "433440"
  },
  {
    "text": "requires a mutable reference so let's",
    "start": "433440",
    "end": "436680"
  },
  {
    "text": "just try to call this it's going to say",
    "start": "436680",
    "end": "438280"
  },
  {
    "text": "hey you can't do that you can't borrow",
    "start": "438280",
    "end": "440360"
  },
  {
    "text": "Fu as mutable because it's behind an",
    "start": "440360",
    "end": "443639"
  },
  {
    "text": "immutable reference meaning that if I",
    "start": "443639",
    "end": "446000"
  },
  {
    "text": "were to erase this make this immutable I",
    "start": "446000",
    "end": "449039"
  },
  {
    "text": "would then then be able to actually",
    "start": "449039",
    "end": "451479"
  },
  {
    "text": "mutate in place Fu reverse mutate that",
    "start": "451479",
    "end": "455960"
  },
  {
    "text": "then iter then go down to the bottom and",
    "start": "455960",
    "end": "459479"
  },
  {
    "text": "mute mute and of course you also have to",
    "start": "459479",
    "end": "462080"
  },
  {
    "text": "declare the variable as mutable itself",
    "start": "462080",
    "end": "464120"
  },
  {
    "text": "now what this has done is it's clearly",
    "start": "464120",
    "end": "466280"
  },
  {
    "text": "told you what's going to happen reverse",
    "start": "466280",
    "end": "468479"
  },
  {
    "text": "and print will mutate your vector to be",
    "start": "468479",
    "end": "472000"
  },
  {
    "text": "reversed and to be printed whereas with",
    "start": "472000",
    "end": "474360"
  },
  {
    "text": "this example it's not necessarily clear",
    "start": "474360",
    "end": "476520"
  },
  {
    "text": "nor unless if you have experience with",
    "start": "476520",
    "end": "477960"
  },
  {
    "text": "reverse is it obvious so this is what is",
    "start": "477960",
    "end": "480400"
  },
  {
    "text": "making people so excited about rust I",
    "start": "480400",
    "end": "482479"
  },
  {
    "text": "know some of you saw that and thought oh",
    "start": "482479",
    "end": "484280"
  },
  {
    "text": "gosh I would never want to do that but",
    "start": "484280",
    "end": "486240"
  },
  {
    "text": "at the same time you do have to admit",
    "start": "486240",
    "end": "488039"
  },
  {
    "text": "the fact that you can know when",
    "start": "488039",
    "end": "489400"
  },
  {
    "text": "something gets mutated and doesn't get",
    "start": "489400",
    "end": "491479"
  },
  {
    "text": "mutated does just completely cross off",
    "start": "491479",
    "end": "494120"
  },
  {
    "text": "an entire set of bugs and the reality is",
    "start": "494120",
    "end": "497120"
  },
  {
    "text": "that immutability used everywhere often",
    "start": "497120",
    "end": "499479"
  },
  {
    "text": "can slow down a system you can see",
    "start": "499479",
    "end": "501159"
  },
  {
    "text": "chunks while scrolling you can feel",
    "start": "501159",
    "end": "502840"
  },
  {
    "text": "these garbage collection bad moments",
    "start": "502840",
    "end": "504720"
  },
  {
    "text": "happening especially on something like",
    "start": "504720",
    "end": "506520"
  },
  {
    "text": "mobile so it's not always the answer",
    "start": "506520",
    "end": "508479"
  },
  {
    "text": "just to make a cop of everything so",
    "start": "508479",
    "end": "510440"
  },
  {
    "text": "hopefully this helps you really",
    "start": "510440",
    "end": "512240"
  },
  {
    "text": "understand the borrow Checker in a more",
    "start": "512240",
    "end": "514120"
  },
  {
    "text": "complete way thank you so much for",
    "start": "514120",
    "end": "515880"
  },
  {
    "text": "watching again please like the video hit",
    "start": "515880",
    "end": "517760"
  },
  {
    "text": "the Subscribe button and take the chance",
    "start": "517760",
    "end": "519399"
  },
  {
    "text": "to you know try out rust Advent of code",
    "start": "519399",
    "end": "521399"
  },
  {
    "text": "is happening right now at the end of the",
    "start": "521399",
    "end": "522839"
  },
  {
    "text": "2022 it's amazing a really great",
    "start": "522839",
    "end": "525200"
  },
  {
    "text": "problems for rust the name is the",
    "start": "525200",
    "end": "527800"
  },
  {
    "text": "primagen",
    "start": "527800",
    "end": "530600"
  }
]