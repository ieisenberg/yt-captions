[
  {
    "text": "so what's wrong with this code now your",
    "start": "199",
    "end": "2159"
  },
  {
    "text": "first thought was it's not rust which",
    "start": "2159",
    "end": "4080"
  },
  {
    "text": "you would normally be correct but not",
    "start": "4080",
    "end": "5600"
  },
  {
    "text": "this time it's the infinity timeout",
    "start": "5600",
    "end": "7520"
  },
  {
    "text": "duration why would you ever create a",
    "start": "7520",
    "end": "9120"
  },
  {
    "text": "timer that never executes wait and even",
    "start": "9120",
    "end": "12360"
  },
  {
    "text": "stranger this one executes within 1",
    "start": "12360",
    "end": "14480"
  },
  {
    "text": "second and even stranger this number",
    "start": "14480",
    "end": "16680"
  },
  {
    "text": "which is significantly smaller executes",
    "start": "16680",
    "end": "18720"
  },
  {
    "text": "immediately and even stranger this",
    "start": "18720",
    "end": "20880"
  },
  {
    "text": "number will execute in 596 hours it's",
    "start": "20880",
    "end": "24080"
  },
  {
    "text": "only 1 millisecond shorter than the one",
    "start": "24080",
    "end": "26279"
  },
  {
    "text": "that just executed immediately",
    "start": "26279",
    "end": "30359"
  },
  {
    "text": "what is going on what are you doing",
    "start": "31519",
    "end": "34200"
  },
  {
    "text": "first off you'll notice something's",
    "start": "34200",
    "end": "35559"
  },
  {
    "text": "wrong right here I got in a bar fight",
    "start": "35559",
    "end": "37520"
  },
  {
    "text": "with tailwind and you should see the",
    "start": "37520",
    "end": "40000"
  },
  {
    "text": "other guy second I'm somebody that when",
    "start": "40000",
    "end": "41879"
  },
  {
    "text": "I see this I have to know why why does",
    "start": "41879",
    "end": "45559"
  },
  {
    "text": "infinity execute immediately why why why",
    "start": "45559",
    "end": "50399"
  },
  {
    "text": "why before we look at the chromium code",
    "start": "50399",
    "end": "52359"
  },
  {
    "text": "there's something you need to understand",
    "start": "52359",
    "end": "53480"
  },
  {
    "text": "about JavaScript when calling a native",
    "start": "53480",
    "end": "55640"
  },
  {
    "text": "method such as set timeout we have to",
    "start": "55640",
    "end": "57680"
  },
  {
    "text": "take JavaScript values and convert them",
    "start": "57680",
    "end": "60000"
  },
  {
    "text": "into C++ values if you ever look at the",
    "start": "60000",
    "end": "63000"
  },
  {
    "text": "chromium or VA code you'll see something",
    "start": "63000",
    "end": "64878"
  },
  {
    "text": "like JS arguments and that is because",
    "start": "64879",
    "end": "67400"
  },
  {
    "text": "any argument here can technically be any",
    "start": "67400",
    "end": "70240"
  },
  {
    "text": "type I can pass in an object instead of",
    "start": "70240",
    "end": "72799"
  },
  {
    "text": "infinity zero or even the string Fu and",
    "start": "72799",
    "end": "76000"
  },
  {
    "text": "since a language like C++ cannot work",
    "start": "76000",
    "end": "78240"
  },
  {
    "text": "that way you need a wrapper class that",
    "start": "78240",
    "end": "80640"
  },
  {
    "text": "means V8 has something that looks like",
    "start": "80640",
    "end": "82159"
  },
  {
    "text": "this a type discriminator in which says",
    "start": "82159",
    "end": "84439"
  },
  {
    "text": "what type of argument it is and a",
    "start": "84439",
    "end": "86479"
  },
  {
    "text": "pointer to the Heap where the value is",
    "start": "86479",
    "end": "88280"
  },
  {
    "text": "stored now the interesting thing about",
    "start": "88280",
    "end": "89640"
  },
  {
    "text": "the pointer is that it also has a tag",
    "start": "89640",
    "end": "92079"
  },
  {
    "text": "itself the first bit can be a zero or a",
    "start": "92079",
    "end": "95119"
  },
  {
    "text": "one if it is a zero that means that the",
    "start": "95119",
    "end": "98040"
  },
  {
    "text": "remaining bits are actually a small",
    "start": "98040",
    "end": "100280"
  },
  {
    "text": "integer if it is a one the remaining",
    "start": "100280",
    "end": "102680"
  },
  {
    "text": "bits are actually an address onto the",
    "start": "102680",
    "end": "104640"
  },
  {
    "text": "Heap apparently the Heap looks like a",
    "start": "104640",
    "end": "106360"
  },
  {
    "text": "cloud you can read more about this in",
    "start": "106360",
    "end": "108360"
  },
  {
    "text": "this amazing article on pointer",
    "start": "108360",
    "end": "109880"
  },
  {
    "text": "compression in which will be linked in",
    "start": "109880",
    "end": "111799"
  },
  {
    "text": "the description which is directly below",
    "start": "111799",
    "end": "113560"
  },
  {
    "text": "the Subscribe button so press it after a",
    "start": "113560",
    "end": "115920"
  },
  {
    "text": "little bit of searching I found the",
    "start": "115920",
    "end": "117479"
  },
  {
    "text": "native method for set timeout now",
    "start": "117479",
    "end": "120240"
  },
  {
    "text": "remember when you call a function from",
    "start": "120240",
    "end": "121640"
  },
  {
    "text": "JavaScript you actually give it an array",
    "start": "121640",
    "end": "123399"
  },
  {
    "text": "of boxed values typically this is called",
    "start": "123399",
    "end": "125479"
  },
  {
    "text": "a bridge method for Bridging the",
    "start": "125479",
    "end": "127200"
  },
  {
    "text": "JavaScript world to the C++ World these",
    "start": "127200",
    "end": "130119"
  },
  {
    "text": "arguments need to be converted into",
    "start": "130119",
    "end": "132040"
  },
  {
    "text": "values in which C++ can deal with and in",
    "start": "132040",
    "end": "134160"
  },
  {
    "text": "our case a V8 function and some integer",
    "start": "134160",
    "end": "136840"
  },
  {
    "text": "representing how long to sleep so this",
    "start": "136840",
    "end": "138800"
  },
  {
    "text": "is not the Droid we're looking for this",
    "start": "138800",
    "end": "140879"
  },
  {
    "text": "is the Droid we're looking for this is",
    "start": "140879",
    "end": "142760"
  },
  {
    "text": "the bridge method that takes the",
    "start": "142760",
    "end": "144400"
  },
  {
    "text": "JavaScript values and converts them into",
    "start": "144400",
    "end": "146480"
  },
  {
    "text": "C++ values at the bottom of this",
    "start": "146480",
    "end": "148560"
  },
  {
    "text": "function you will see that it does call",
    "start": "148560",
    "end": "150760"
  },
  {
    "text": "that set timeout function that we were",
    "start": "150760",
    "end": "152440"
  },
  {
    "text": "just at and here's the value we are",
    "start": "152440",
    "end": "154560"
  },
  {
    "text": "looking for that is converted right here",
    "start": "154560",
    "end": "156519"
  },
  {
    "text": "of course it does the conversion",
    "start": "156519",
    "end": "158200"
  },
  {
    "text": "converts the argument into an IDL long",
    "start": "158200",
    "end": "160959"
  },
  {
    "text": "what the hell is that with a little bit",
    "start": "160959",
    "end": "163360"
  },
  {
    "text": "more searching we will find that an IDL",
    "start": "163360",
    "end": "165280"
  },
  {
    "text": "long is actually a 32-bit int now",
    "start": "165280",
    "end": "168040"
  },
  {
    "text": "personally I thought L long stood for",
    "start": "168040",
    "end": "169680"
  },
  {
    "text": "long long but actually IDL is the prefix",
    "start": "169680",
    "end": "172120"
  },
  {
    "text": "and there is a long long which actually",
    "start": "172120",
    "end": "174000"
  },
  {
    "text": "looks like a long long long it's pretty",
    "start": "174000",
    "end": "176000"
  },
  {
    "text": "long with a little bit more searching we",
    "start": "176000",
    "end": "178040"
  },
  {
    "text": "found the method that takes in the",
    "start": "178040",
    "end": "179840"
  },
  {
    "text": "JavaScript value and converts it into a",
    "start": "179840",
    "end": "182040"
  },
  {
    "text": "C++ native value the first thing it has",
    "start": "182040",
    "end": "184120"
  },
  {
    "text": "to do is check is this thing a in 32",
    "start": "184120",
    "end": "187519"
  },
  {
    "text": "which first checks to see is this thing",
    "start": "187519",
    "end": "189120"
  },
  {
    "text": "a SME meaning that the value pointer is",
    "start": "189120",
    "end": "191200"
  },
  {
    "text": "actually a small integer else is the",
    "start": "191200",
    "end": "193040"
  },
  {
    "text": "thing a number remember JavaScript you",
    "start": "193040",
    "end": "194799"
  },
  {
    "text": "can pass in any type and checks to see",
    "start": "194799",
    "end": "197400"
  },
  {
    "text": "is the double a 32bit number or in other",
    "start": "197400",
    "end": "200239"
  },
  {
    "text": "words is it between a Min and Max int",
    "start": "200239",
    "end": "202959"
  },
  {
    "text": "not minus 0 minus Z you say well of",
    "start": "202959",
    "end": "205959"
  },
  {
    "text": "course it is the i e 754-1985",
    "start": "205959",
    "end": "209920"
  },
  {
    "text": "specification for floating Point numbers",
    "start": "209920",
    "end": "211760"
  },
  {
    "text": "which means that you can have positive",
    "start": "211760",
    "end": "213000"
  },
  {
    "text": "and negative infinity and of course",
    "start": "213000",
    "end": "215080"
  },
  {
    "text": "negative 0 which stringify to zero what",
    "start": "215080",
    "end": "218400"
  },
  {
    "text": "all right back to the code if we can do",
    "start": "218400",
    "end": "220480"
  },
  {
    "text": "a double to integer conversion and",
    "start": "220480",
    "end": "222680"
  },
  {
    "text": "integer back to double conversion it",
    "start": "222680",
    "end": "224879"
  },
  {
    "text": "still is the value that we passed in",
    "start": "224879",
    "end": "226720"
  },
  {
    "text": "that means it is a 32bit signed integer",
    "start": "226720",
    "end": "229799"
  },
  {
    "text": "double value which means we can do the",
    "start": "229799",
    "end": "231720"
  },
  {
    "text": "fast return of a simple value to a",
    "start": "231720",
    "end": "234159"
  },
  {
    "text": "32-bit number now none of this explains",
    "start": "234159",
    "end": "236360"
  },
  {
    "text": "why Infinity is zero so therefore we",
    "start": "236360",
    "end": "237840"
  },
  {
    "text": "need to go to the slow case the slow",
    "start": "237840",
    "end": "240040"
  },
  {
    "text": "case is a bit more involved but a little",
    "start": "240040",
    "end": "242439"
  },
  {
    "text": "bit further down you'll see this right",
    "start": "242439",
    "end": "244280"
  },
  {
    "text": "away standard is infinity number value",
    "start": "244280",
    "end": "247920"
  },
  {
    "text": "return zero so there we go we found out",
    "start": "247920",
    "end": "250439"
  },
  {
    "text": "why that happens but that doesn't",
    "start": "250439",
    "end": "252040"
  },
  {
    "text": "explain all those other weird numbers",
    "start": "252040",
    "end": "253720"
  },
  {
    "text": "that I showed you so first the number 4",
    "start": "253720",
    "end": "255439"
  },
  {
    "text": "billion 294",
    "start": "255439",
    "end": "257639"
  },
  {
    "text": "m968 296 milliseconds is actually",
    "start": "257639",
    "end": "261160"
  },
  {
    "text": "represented in binary in the following",
    "start": "261160",
    "end": "263080"
  },
  {
    "text": "way the first 32 bits look like this",
    "start": "263080",
    "end": "265759"
  },
  {
    "text": "00001",
    "start": "265759",
    "end": "267560"
  },
  {
    "text": "01111 1 and then 22 two more zeros and",
    "start": "267560",
    "end": "270479"
  },
  {
    "text": "then there's a singular bit on the other",
    "start": "270479",
    "end": "272280"
  },
  {
    "text": "side this of course represents the 4",
    "start": "272280",
    "end": "274440"
  },
  {
    "text": "billion and this represents the",
    "start": "274440",
    "end": "276360"
  },
  {
    "text": "additional 1,000 now when we convert",
    "start": "276360",
    "end": "278919"
  },
  {
    "text": "this number to a 32-bit number that",
    "start": "278919",
    "end": "280840"
  },
  {
    "text": "means this one right here is going to",
    "start": "280840",
    "end": "282479"
  },
  {
    "text": "get cut off where the remaining ones",
    "start": "282479",
    "end": "284320"
  },
  {
    "text": "that we have will remain within the",
    "start": "284320",
    "end": "286360"
  },
  {
    "text": "number so therefore we will sleep for",
    "start": "286360",
    "end": "288360"
  },
  {
    "text": "1,000 milliseconds kind of funny when",
    "start": "288360",
    "end": "290400"
  },
  {
    "text": "you think about it it's just chopped it",
    "start": "290400",
    "end": "292600"
  },
  {
    "text": "right off but what about that 2 billion",
    "start": "292600",
    "end": "294720"
  },
  {
    "text": "instant executing one well this one can",
    "start": "294720",
    "end": "296720"
  },
  {
    "text": "be represented in binary in the",
    "start": "296720",
    "end": "298160"
  },
  {
    "text": "following way there's a one here and",
    "start": "298160",
    "end": "300560"
  },
  {
    "text": "then 31 Zer now what this means in a",
    "start": "300560",
    "end": "303840"
  },
  {
    "text": "signed world is a largely negative",
    "start": "303840",
    "end": "306400"
  },
  {
    "text": "number in fact it's the maximum negative",
    "start": "306400",
    "end": "308680"
  },
  {
    "text": "number you can actually convert any",
    "start": "308680",
    "end": "310320"
  },
  {
    "text": "number in JavaScript to a signed 32-bit",
    "start": "310320",
    "end": "312639"
  },
  {
    "text": "number by doing a binary operation and",
    "start": "312639",
    "end": "315240"
  },
  {
    "text": "here you can see it becomes negative",
    "start": "315240",
    "end": "317720"
  },
  {
    "text": "which means this thing needs to happen",
    "start": "317720",
    "end": "319319"
  },
  {
    "text": "into the past therefore the timer needs",
    "start": "319319",
    "end": "321280"
  },
  {
    "text": "to execute immediately but why does this",
    "start": "321280",
    "end": "323440"
  },
  {
    "text": "number take 596 hours well its binary",
    "start": "323440",
    "end": "327039"
  },
  {
    "text": "representation is a single zero and then",
    "start": "327039",
    "end": "329759"
  },
  {
    "text": "31 1es if this isn't obvious why that is",
    "start": "329759",
    "end": "333080"
  },
  {
    "text": "just think about taking the number",
    "start": "333080",
    "end": "334400"
  },
  {
    "text": "10,000 and minusing one from it you're",
    "start": "334400",
    "end": "337080"
  },
  {
    "text": "going to get 9",
    "start": "337080",
    "end": "338759"
  },
  {
    "text": "999 so if you take a power of two say 16",
    "start": "338759",
    "end": "342160"
  },
  {
    "text": "write it out in binary and then subtract",
    "start": "342160",
    "end": "344360"
  },
  {
    "text": "one from it what you're going to get is",
    "start": "344360",
    "end": "346199"
  },
  {
    "text": "15 or all ones so that means when you",
    "start": "346199",
    "end": "349280"
  },
  {
    "text": "take this number which is normally a",
    "start": "349280",
    "end": "350639"
  },
  {
    "text": "large negative number and simply",
    "start": "350639",
    "end": "352479"
  },
  {
    "text": "subtract one from it you'll get a large",
    "start": "352479",
    "end": "355080"
  },
  {
    "text": "positive number which is the maximum",
    "start": "355080",
    "end": "356919"
  },
  {
    "text": "amount of sleep time which means your",
    "start": "356919",
    "end": "358639"
  },
  {
    "text": "timer will never f fire so that means",
    "start": "358639",
    "end": "360600"
  },
  {
    "text": "the next time you have a PR you need to",
    "start": "360600",
    "end": "362520"
  },
  {
    "text": "make with a set timeout zero go ahead",
    "start": "362520",
    "end": "364840"
  },
  {
    "text": "use a beautifully negative number and",
    "start": "364840",
    "end": "367160"
  },
  {
    "text": "confuse your whole team and then explain",
    "start": "367160",
    "end": "368840"
  },
  {
    "text": "to them why you understand two's",
    "start": "368840",
    "end": "370319"
  },
  {
    "text": "compliment instant promotion now",
    "start": "370319",
    "end": "372919"
  },
  {
    "text": "remember everything I did is open source",
    "start": "372919",
    "end": "374680"
  },
  {
    "text": "if you ever have a question about how",
    "start": "374680",
    "end": "376199"
  },
  {
    "text": "something works you can look through the",
    "start": "376199",
    "end": "378000"
  },
  {
    "text": "source code I also hear subscribing to",
    "start": "378000",
    "end": "380520"
  },
  {
    "text": "this channel helps and pressing the like",
    "start": "380520",
    "end": "382639"
  },
  {
    "text": "button the name is the swagen I'd like",
    "start": "382639",
    "end": "386160"
  },
  {
    "text": "to give a big shout out to Alexi who",
    "start": "386160",
    "end": "387720"
  },
  {
    "text": "helped me play around with the chromium",
    "start": "387720",
    "end": "389000"
  },
  {
    "text": "source code give him a follow on Twitter",
    "start": "389000",
    "end": "391520"
  },
  {
    "text": "he's one of the best Engineers I've ever",
    "start": "391520",
    "end": "393240"
  },
  {
    "text": "worked with",
    "start": "393240",
    "end": "395880"
  }
]