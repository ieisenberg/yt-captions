[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "in typescript enums are considered",
    "start": "0",
    "end": "2040"
  },
  {
    "text": "harmful by the wizard himself Matt",
    "start": "2040",
    "end": "3899"
  },
  {
    "text": "pocock Paco picake in typescript 5 enums",
    "start": "3899",
    "end": "7560"
  },
  {
    "text": "have been upgraded but they are still",
    "start": "7560",
    "end": "9059"
  },
  {
    "text": "terrible but in Rust it's a completely",
    "start": "9059",
    "end": "11880"
  },
  {
    "text": "different story rust enums are amazing",
    "start": "11880",
    "end": "14880"
  },
  {
    "text": "if you've never seen how they work it",
    "start": "14880",
    "end": "17220"
  },
  {
    "text": "will truly expand the way you think",
    "start": "17220",
    "end": "19560"
  },
  {
    "text": "programming can be done so let me show",
    "start": "19560",
    "end": "21240"
  },
  {
    "text": "you how rust enums work by using",
    "start": "21240",
    "end": "23460"
  },
  {
    "text": "typescript as a guide this is an enum in",
    "start": "23460",
    "end": "26640"
  },
  {
    "start": "25000",
    "end": "89000"
  },
  {
    "text": "typescript in typescript you can create",
    "start": "26640",
    "end": "28019"
  },
  {
    "text": "functions to take in enums and in this",
    "start": "28019",
    "end": "29820"
  },
  {
    "text": "case when the colors red we print red",
    "start": "29820",
    "end": "31439"
  },
  {
    "text": "when it's green green and when it's blue",
    "start": "31439",
    "end": "33600"
  },
  {
    "text": "blue an obvious problem is if we add a",
    "start": "33600",
    "end": "35820"
  },
  {
    "text": "new value to our enum this switch",
    "start": "35820",
    "end": "37680"
  },
  {
    "text": "statement will give you no indication",
    "start": "37680",
    "end": "39120"
  },
  {
    "text": "that you are forgetting a case and this",
    "start": "39120",
    "end": "41160"
  },
  {
    "text": "is one of many issues that are brought",
    "start": "41160",
    "end": "42600"
  },
  {
    "text": "up against enums now let's look at enums",
    "start": "42600",
    "end": "45059"
  },
  {
    "text": "in Rust first they can be defined the",
    "start": "45059",
    "end": "46920"
  },
  {
    "text": "same way they are in typescript this",
    "start": "46920",
    "end": "48600"
  },
  {
    "text": "looks pretty much identical working with",
    "start": "48600",
    "end": "50219"
  },
  {
    "text": "enums however are a bit different here",
    "start": "50219",
    "end": "52500"
  },
  {
    "text": "is an equivalent in Behavior print color",
    "start": "52500",
    "end": "54539"
  },
  {
    "text": "function in Rust let's look at this",
    "start": "54539",
    "end": "56460"
  },
  {
    "text": "statement it's called a match statement",
    "start": "56460",
    "end": "58020"
  },
  {
    "text": "it's a little bit different than a",
    "start": "58020",
    "end": "59340"
  },
  {
    "text": "switch statement instead of comparing a",
    "start": "59340",
    "end": "61199"
  },
  {
    "text": "value it does pattern matching now if",
    "start": "61199",
    "end": "63120"
  },
  {
    "text": "color was red we would print out red and",
    "start": "63120",
    "end": "65460"
  },
  {
    "text": "the same thing happens for blue and",
    "start": "65460",
    "end": "66720"
  },
  {
    "text": "green but what happens if we add yellow",
    "start": "66720",
    "end": "68460"
  },
  {
    "text": "this match statement will actually throw",
    "start": "68460",
    "end": "70140"
  },
  {
    "text": "an error and you're unable to build your",
    "start": "70140",
    "end": "71820"
  },
  {
    "text": "program because you are missing case",
    "start": "71820",
    "end": "73439"
  },
  {
    "text": "yellow there we go we've added case",
    "start": "73439",
    "end": "75479"
  },
  {
    "text": "yellow and our programs compiling again",
    "start": "75479",
    "end": "77280"
  },
  {
    "text": "right now you're probably thinking all",
    "start": "77280",
    "end": "78840"
  },
  {
    "text": "right well I guess rust has the same",
    "start": "78840",
    "end": "80340"
  },
  {
    "text": "enums as typescript they look the same",
    "start": "80340",
    "end": "82380"
  },
  {
    "text": "they have about the same developer",
    "start": "82380",
    "end": "83939"
  },
  {
    "text": "experience just rust is slightly better",
    "start": "83939",
    "end": "85439"
  },
  {
    "text": "this does not compel me to want to use",
    "start": "85439",
    "end": "87240"
  },
  {
    "text": "rust trust me it gets much better so",
    "start": "87240",
    "end": "89939"
  },
  {
    "start": "89000",
    "end": "153000"
  },
  {
    "text": "let's just look at the rust example for",
    "start": "89939",
    "end": "91560"
  },
  {
    "text": "a moment something that typescript",
    "start": "91560",
    "end": "92880"
  },
  {
    "text": "cannot do is that rust can attach",
    "start": "92880",
    "end": "94439"
  },
  {
    "text": "functions to enums effectively they",
    "start": "94439",
    "end": "96119"
  },
  {
    "text": "become methods so we declare hey this is",
    "start": "96119",
    "end": "98040"
  },
  {
    "text": "an implementation for color the",
    "start": "98040",
    "end": "99659"
  },
  {
    "text": "function's called Green part we take in",
    "start": "99659",
    "end": "101759"
  },
  {
    "text": "a reference to the Edom and we return",
    "start": "101759",
    "end": "103680"
  },
  {
    "text": "out a Boolean if the colors either",
    "start": "103680",
    "end": "105540"
  },
  {
    "text": "yellow or blue which is what makes up",
    "start": "105540",
    "end": "107280"
  },
  {
    "text": "green in the subtractive system we",
    "start": "107280",
    "end": "108840"
  },
  {
    "text": "return true else for all of the cases we",
    "start": "108840",
    "end": "111119"
  },
  {
    "text": "return false let's add one more method",
    "start": "111119",
    "end": "113100"
  },
  {
    "text": "that's called is green but this time",
    "start": "113100",
    "end": "114899"
  },
  {
    "text": "we're using a different technique so",
    "start": "114899",
    "end": "116820"
  },
  {
    "text": "you're probably familiar with how this",
    "start": "116820",
    "end": "118020"
  },
  {
    "text": "function is defined but it's this that's",
    "start": "118020",
    "end": "119640"
  },
  {
    "text": "kind kind of weird right what this does",
    "start": "119640",
    "end": "121619"
  },
  {
    "text": "is that it takes a reference for self",
    "start": "121619",
    "end": "123479"
  },
  {
    "text": "and pattern matches it but on an if",
    "start": "123479",
    "end": "125399"
  },
  {
    "text": "statement so only enums that are of type",
    "start": "125399",
    "end": "128340"
  },
  {
    "text": "color green will return true the rest",
    "start": "128340",
    "end": "131280"
  },
  {
    "text": "will return false these are both",
    "start": "131280",
    "end": "133200"
  },
  {
    "text": "examples of pattern matching it's one",
    "start": "133200",
    "end": "135360"
  },
  {
    "text": "way to make working with enums",
    "start": "135360",
    "end": "136980"
  },
  {
    "text": "significantly easier methods on edoms",
    "start": "136980",
    "end": "139800"
  },
  {
    "text": "make it so much more useful to work with",
    "start": "139800",
    "end": "142020"
  },
  {
    "text": "but that is only part of the reason why",
    "start": "142020",
    "end": "144180"
  },
  {
    "text": "enums are so good in Rust let me show",
    "start": "144180",
    "end": "147060"
  },
  {
    "text": "you one more example and this is gonna",
    "start": "147060",
    "end": "148920"
  },
  {
    "text": "be amazing because it solves one of my",
    "start": "148920",
    "end": "151260"
  },
  {
    "text": "biggest problems I have with typescript",
    "start": "151260",
    "end": "153780"
  },
  {
    "text": "all right let's go back to typescript",
    "start": "153780",
    "end": "155160"
  },
  {
    "text": "and see that we've defined a custom type",
    "start": "155160",
    "end": "157080"
  },
  {
    "text": "with name and age also a union type item",
    "start": "157080",
    "end": "159780"
  },
  {
    "text": "that has string number or custom here",
    "start": "159780",
    "end": "161700"
  },
  {
    "text": "would be the equivalent in Rust first we",
    "start": "161700",
    "end": "163680"
  },
  {
    "text": "create a custom object with name and age",
    "start": "163680",
    "end": "165540"
  },
  {
    "text": "then we have an enum item Foose the same",
    "start": "165540",
    "end": "167819"
  },
  {
    "text": "as the string bar is the same as the",
    "start": "167819",
    "end": "169560"
  },
  {
    "text": "number and baz is the same as the custom",
    "start": "169560",
    "end": "171239"
  },
  {
    "text": "object let's create an item called Foo",
    "start": "171239",
    "end": "173220"
  },
  {
    "text": "and it is a string we can tell that it's",
    "start": "173220",
    "end": "174840"
  },
  {
    "text": "string by doing type of Foo and we can",
    "start": "174840",
    "end": "176819"
  },
  {
    "text": "log it out let's only look at rust for a",
    "start": "176819",
    "end": "178800"
  },
  {
    "text": "second look at how we create create Foo",
    "start": "178800",
    "end": "180660"
  },
  {
    "text": "first we create it as an enum Foo and",
    "start": "180660",
    "end": "182580"
  },
  {
    "text": "then we pass in a string we can pattern",
    "start": "182580",
    "end": "185160"
  },
  {
    "text": "match out that string Again by using Foo",
    "start": "185160",
    "end": "188099"
  },
  {
    "text": "and pattern matching item Foo with a",
    "start": "188099",
    "end": "190800"
  },
  {
    "text": "subtype s now this s is the value of the",
    "start": "190800",
    "end": "193620"
  },
  {
    "text": "subtype that was passed in and in our",
    "start": "193620",
    "end": "195239"
  },
  {
    "text": "case that is a string and now we can",
    "start": "195239",
    "end": "196920"
  },
  {
    "text": "print out hello easily we could do the",
    "start": "196920",
    "end": "198659"
  },
  {
    "text": "same operation with bar and even the",
    "start": "198659",
    "end": "200280"
  },
  {
    "text": "same operation with baz and the custom",
    "start": "200280",
    "end": "201900"
  },
  {
    "text": "struct here's an example using baz here",
    "start": "201900",
    "end": "204180"
  },
  {
    "text": "we're pattern matching baz and we get",
    "start": "204180",
    "end": "205860"
  },
  {
    "text": "access to custom and here we can print",
    "start": "205860",
    "end": "207599"
  },
  {
    "text": "it out let's create equivalent methods",
    "start": "207599",
    "end": "209580"
  },
  {
    "text": "in both typescript and rust both in",
    "start": "209580",
    "end": "211379"
  },
  {
    "text": "typescript and rust we take in a list of",
    "start": "211379",
    "end": "213239"
  },
  {
    "text": "items and we add to that list an item",
    "start": "213239",
    "end": "215400"
  },
  {
    "text": "with the number subtype in the case of",
    "start": "215400",
    "end": "217140"
  },
  {
    "text": "typescript it's just 69 but in the case",
    "start": "217140",
    "end": "218940"
  },
  {
    "text": "of rust it's item bar 69. remember these",
    "start": "218940",
    "end": "221640"
  },
  {
    "text": "two are equivalent in values let's",
    "start": "221640",
    "end": "223860"
  },
  {
    "text": "create a list of strings in both",
    "start": "223860",
    "end": "225180"
  },
  {
    "text": "languages next let's call a pen in both",
    "start": "225180",
    "end": "227400"
  },
  {
    "text": "languages in typescript we can pass in a",
    "start": "227400",
    "end": "230159"
  },
  {
    "text": "list of strings to anything that takes a",
    "start": "230159",
    "end": "231840"
  },
  {
    "text": "list of items that is because a list of",
    "start": "231840",
    "end": "233819"
  },
  {
    "text": "strings in some sense is equivalent to a",
    "start": "233819",
    "end": "235980"
  },
  {
    "text": "list of items but a list of items is not",
    "start": "235980",
    "end": "237900"
  },
  {
    "text": "equivalent to a list of strings you can",
    "start": "237900",
    "end": "239280"
  },
  {
    "text": "imagine that every square is a rectangle",
    "start": "239280",
    "end": "241140"
  },
  {
    "text": "but not every rectangle is a square",
    "start": "241140",
    "end": "242580"
  },
  {
    "text": "therefore a list of strings now will",
    "start": "242580",
    "end": "244920"
  },
  {
    "text": "contain a number when you call a pen now",
    "start": "244920",
    "end": "247680"
  },
  {
    "text": "for rust this won't work and the reason",
    "start": "247680",
    "end": "250140"
  },
  {
    "text": "being is this is a list of strings this",
    "start": "250140",
    "end": "252540"
  },
  {
    "text": "requires a list of items they are",
    "start": "252540",
    "end": "255299"
  },
  {
    "text": "different rust fundamentally sees them",
    "start": "255299",
    "end": "257459"
  },
  {
    "text": "as different types that's pretty cool",
    "start": "257459",
    "end": "259500"
  },
  {
    "text": "right like not only does it help prevent",
    "start": "259500",
    "end": "261660"
  },
  {
    "text": "any weird kind of bugs when it comes to",
    "start": "261660",
    "end": "263520"
  },
  {
    "text": "Union types it also allows you to have",
    "start": "263520",
    "end": "265680"
  },
  {
    "text": "these heterogeneous lists where you",
    "start": "265680",
    "end": "267120"
  },
  {
    "text": "could have multiple types in there but",
    "start": "267120",
    "end": "268740"
  },
  {
    "text": "you get to Define exactly which types",
    "start": "268740",
    "end": "270720"
  },
  {
    "text": "you want that has to blow your mind",
    "start": "270720",
    "end": "272639"
  },
  {
    "text": "enums are so useful they're even used in",
    "start": "272639",
    "end": "274680"
  },
  {
    "text": "replacing null and undefined and how",
    "start": "274680",
    "end": "276600"
  },
  {
    "text": "error handling Works in Rust here is the",
    "start": "276600",
    "end": "279540"
  },
  {
    "start": "278000",
    "end": "348000"
  },
  {
    "text": "option and resolve type of course the",
    "start": "279540",
    "end": "281520"
  },
  {
    "text": "option represents undefined slash null",
    "start": "281520",
    "end": "283740"
  },
  {
    "text": "or some value a result represents a",
    "start": "283740",
    "end": "286620"
  },
  {
    "text": "value or an error they use generic so",
    "start": "286620",
    "end": "288600"
  },
  {
    "text": "they can be whatever type you need them",
    "start": "288600",
    "end": "289860"
  },
  {
    "text": "to be something super cool that rust",
    "start": "289860",
    "end": "291600"
  },
  {
    "text": "does that typescript doesn't when you",
    "start": "291600",
    "end": "293160"
  },
  {
    "text": "call a function you know what it returns",
    "start": "293160",
    "end": "295320"
  },
  {
    "text": "whereas with typescript does this thing",
    "start": "295320",
    "end": "296940"
  },
  {
    "text": "throw an error do you need a try catch",
    "start": "296940",
    "end": "298919"
  },
  {
    "text": "you better handle undefined of course",
    "start": "298919",
    "end": "300780"
  },
  {
    "text": "typescript has made this a lot better",
    "start": "300780",
    "end": "302100"
  },
  {
    "text": "but nonetheless you can still run into",
    "start": "302100",
    "end": "304020"
  },
  {
    "text": "these situations whereas with rust it",
    "start": "304020",
    "end": "306240"
  },
  {
    "text": "comes back as an option if it's",
    "start": "306240",
    "end": "308100"
  },
  {
    "text": "undefined it comes back as a result if",
    "start": "308100",
    "end": "310560"
  },
  {
    "text": "there could be an error and you can even",
    "start": "310560",
    "end": "312360"
  },
  {
    "text": "have things like result with a value of",
    "start": "312360",
    "end": "314699"
  },
  {
    "text": "option and this is one thing I really",
    "start": "314699",
    "end": "316440"
  },
  {
    "text": "appreciate about rust which is when",
    "start": "316440",
    "end": "318120"
  },
  {
    "text": "you're working with rust every function",
    "start": "318120",
    "end": "319860"
  },
  {
    "text": "you're calling you know the exact return",
    "start": "319860",
    "end": "321900"
  },
  {
    "text": "type and how it behaves so if this",
    "start": "321900",
    "end": "323639"
  },
  {
    "text": "function were to air the function above",
    "start": "323639",
    "end": "325620"
  },
  {
    "text": "would know that this function could err",
    "start": "325620",
    "end": "327600"
  },
  {
    "text": "and would have to handle it or pass it",
    "start": "327600",
    "end": "329639"
  },
  {
    "text": "to the next function whereas in",
    "start": "329639",
    "end": "330960"
  },
  {
    "text": "typescript does this function even know",
    "start": "330960",
    "end": "332880"
  },
  {
    "text": "that you could throw an error who",
    "start": "332880",
    "end": "334440"
  },
  {
    "text": "handles the error does anybody handle",
    "start": "334440",
    "end": "336360"
  },
  {
    "text": "the air hopefully you see why enums are",
    "start": "336360",
    "end": "338280"
  },
  {
    "text": "amazing in Rust and hopefully you",
    "start": "338280",
    "end": "339960"
  },
  {
    "text": "appreciated this little presentation",
    "start": "339960",
    "end": "341940"
  },
  {
    "text": "that we went on if you like this hey",
    "start": "341940",
    "end": "343740"
  },
  {
    "text": "please press the like button already",
    "start": "343740",
    "end": "345419"
  },
  {
    "text": "subscribe to the channel the name is the",
    "start": "345419",
    "end": "348060"
  },
  {
    "text": "primogen",
    "start": "348060",
    "end": "350479"
  }
]