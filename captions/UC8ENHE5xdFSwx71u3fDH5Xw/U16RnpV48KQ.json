[
  {
    "text": "1.6 million percent faster it's hard to",
    "start": "380",
    "end": "4200"
  },
  {
    "text": "even display visually because it shows",
    "start": "4200",
    "end": "6359"
  },
  {
    "text": "up as nothing today I'm going to show",
    "start": "6359",
    "end": "8099"
  },
  {
    "text": "you the seven steps taken to improve the",
    "start": "8099",
    "end": "10380"
  },
  {
    "text": "running time of an algorithm but here's",
    "start": "10380",
    "end": "12000"
  },
  {
    "text": "the kicker the slowest one was O of N",
    "start": "12000",
    "end": "14460"
  },
  {
    "text": "and the fastest one is still o of N and",
    "start": "14460",
    "end": "17520"
  },
  {
    "text": "along the way I'm going to use common",
    "start": "17520",
    "end": "19080"
  },
  {
    "text": "optimization techniques that you can use",
    "start": "19080",
    "end": "21420"
  },
  {
    "text": "in any application and then we're gonna",
    "start": "21420",
    "end": "23640"
  },
  {
    "text": "get a little bit exotic and go into the",
    "start": "23640",
    "end": "25680"
  },
  {
    "text": "bit manipulation world to really speed",
    "start": "25680",
    "end": "28080"
  },
  {
    "text": "things up then of course compiler",
    "start": "28080",
    "end": "30000"
  },
  {
    "text": "optimizations and symmet and everything",
    "start": "30000",
    "end": "31500"
  },
  {
    "text": "to go blazingly fast but first the",
    "start": "31500",
    "end": "35280"
  },
  {
    "text": "problem of course right so the problem",
    "start": "35280",
    "end": "36960"
  },
  {
    "text": "is simple it was from Advent of code",
    "start": "36960",
    "end": "38820"
  },
  {
    "text": "2022 which is find 14 distinct",
    "start": "38820",
    "end": "42420"
  },
  {
    "text": "characters in a long string once you",
    "start": "42420",
    "end": "44940"
  },
  {
    "text": "find 14 distinct characters you just",
    "start": "44940",
    "end": "46800"
  },
  {
    "text": "report the position directly after those",
    "start": "46800",
    "end": "48780"
  },
  {
    "text": "if you're not familiar with Advent of",
    "start": "48780",
    "end": "50579"
  },
  {
    "text": "code it's kind of like a fun Santa",
    "start": "50579",
    "end": "52500"
  },
  {
    "text": "themed holiday Adventure in which you're",
    "start": "52500",
    "end": "55020"
  },
  {
    "text": "solving problems to bring Christmas tree",
    "start": "55020",
    "end": "59160"
  },
  {
    "text": "solution possible would just be to use a",
    "start": "59160",
    "end": "61440"
  },
  {
    "text": "hash set right grab the first 14",
    "start": "61440",
    "end": "63480"
  },
  {
    "text": "characters throw them all in the hash",
    "start": "63480",
    "end": "65280"
  },
  {
    "text": "set and then check the length of the",
    "start": "65280",
    "end": "66720"
  },
  {
    "text": "hash that at the end if it's 14 we got",
    "start": "66720",
    "end": "69360"
  },
  {
    "text": "ourselves a go if it's not we need to",
    "start": "69360",
    "end": "71700"
  },
  {
    "text": "move forward everything and try again we",
    "start": "71700",
    "end": "74400"
  },
  {
    "text": "need to try again try again try again",
    "start": "74400",
    "end": "76619"
  },
  {
    "text": "try again oh my goodness look at that we",
    "start": "76619",
    "end": "79320"
  },
  {
    "text": "have found 14 distinct characters now",
    "start": "79320",
    "end": "81720"
  },
  {
    "text": "all we need to do is report that little",
    "start": "81720",
    "end": "83280"
  },
  {
    "text": "J right here that jth position and we've",
    "start": "83280",
    "end": "85740"
  },
  {
    "text": "solved Advent of code so here's the code",
    "start": "85740",
    "end": "88080"
  },
  {
    "text": "very very simple we simply go over 14",
    "start": "88080",
    "end": "90600"
  },
  {
    "text": "characters at a time collect it all into",
    "start": "90600",
    "end": "92580"
  },
  {
    "text": "a hash set check the length of 14 boom",
    "start": "92580",
    "end": "95220"
  },
  {
    "text": "we're done now there's a very simple",
    "start": "95220",
    "end": "97320"
  },
  {
    "text": "optimization that could be made and this",
    "start": "97320",
    "end": "99659"
  },
  {
    "text": "is the first optimization which will",
    "start": "99659",
    "end": "101159"
  },
  {
    "text": "lead us to a 92 faster run time and of",
    "start": "101159",
    "end": "104939"
  },
  {
    "text": "course that is to insert characters one",
    "start": "104939",
    "end": "106619"
  },
  {
    "text": "at a time the moment you detect a",
    "start": "106619",
    "end": "108600"
  },
  {
    "text": "duplicate you do not process any further",
    "start": "108600",
    "end": "111119"
  },
  {
    "text": "and we go to the next set of 14. I know",
    "start": "111119",
    "end": "113700"
  },
  {
    "text": "it's shocking right 92 percent faster",
    "start": "113700",
    "end": "116159"
  },
  {
    "text": "for such a simple if statement let's go",
    "start": "116159",
    "end": "118860"
  },
  {
    "text": "to the next level of optimization this",
    "start": "118860",
    "end": "121500"
  },
  {
    "text": "is going to improve the running time 8.9",
    "start": "121500",
    "end": "124079"
  },
  {
    "text": "fold practically an order of magnitude",
    "start": "124079",
    "end": "127020"
  },
  {
    "text": "faster and it's going to surprise you",
    "start": "127020",
    "end": "128759"
  },
  {
    "text": "how we do that that of course is to use",
    "start": "128759",
    "end": "131099"
  },
  {
    "text": "a vector instead of a hash set it might",
    "start": "131099",
    "end": "134280"
  },
  {
    "text": "be a bit counter-intuitive you're",
    "start": "134280",
    "end": "136140"
  },
  {
    "text": "thinking well why would checking every",
    "start": "136140",
    "end": "138239"
  },
  {
    "text": "position somehow be faster than a hash",
    "start": "138239",
    "end": "141840"
  },
  {
    "text": "set lookup aren't those constant time",
    "start": "141840",
    "end": "144540"
  },
  {
    "text": "yes but so is a single Vector lookup",
    "start": "144540",
    "end": "147599"
  },
  {
    "text": "it's also a constant time but I want you",
    "start": "147599",
    "end": "149640"
  },
  {
    "text": "to think about something when you see",
    "start": "149640",
    "end": "151440"
  },
  {
    "text": "Big O of one constant time it's kind of",
    "start": "151440",
    "end": "154800"
  },
  {
    "text": "a lie in the sense that it's actually",
    "start": "154800",
    "end": "156540"
  },
  {
    "text": "Big O of a constant multiplied by one",
    "start": "156540",
    "end": "160379"
  },
  {
    "text": "now what is that constant when it comes",
    "start": "160379",
    "end": "163080"
  },
  {
    "text": "to a hash set that constant is",
    "start": "163080",
    "end": "165980"
  },
  {
    "text": "significantly larger than a vector",
    "start": "165980",
    "end": "168660"
  },
  {
    "text": "constant and that should make sense",
    "start": "168660",
    "end": "170580"
  },
  {
    "text": "right because when you're talking about",
    "start": "170580",
    "end": "172140"
  },
  {
    "text": "a hash set you have to compute a hash",
    "start": "172140",
    "end": "175019"
  },
  {
    "text": "and an index into a large table inside",
    "start": "175019",
    "end": "178260"
  },
  {
    "text": "that table you then have to go to that",
    "start": "178260",
    "end": "180420"
  },
  {
    "text": "entry and potentially scan through some",
    "start": "180420",
    "end": "182819"
  },
  {
    "text": "couple item list if there are any",
    "start": "182819",
    "end": "184980"
  },
  {
    "text": "collisions and check for equality",
    "start": "184980",
    "end": "187140"
  },
  {
    "text": "whereas with the victory you're still",
    "start": "187140",
    "end": "189060"
  },
  {
    "text": "allocating on the Heap like a hash set",
    "start": "189060",
    "end": "190860"
  },
  {
    "text": "but you just simply have to follow a",
    "start": "190860",
    "end": "192659"
  },
  {
    "text": "reference and calculate an offset into a",
    "start": "192659",
    "end": "195420"
  },
  {
    "text": "memory region that's just gonna be super",
    "start": "195420",
    "end": "198300"
  },
  {
    "text": "fast in comparison and the code's not",
    "start": "198300",
    "end": "201120"
  },
  {
    "text": "that much more complex we create a",
    "start": "201120",
    "end": "203340"
  },
  {
    "text": "vector instead of a hash set and we",
    "start": "203340",
    "end": "205019"
  },
  {
    "text": "simply have to call contains instead of",
    "start": "205019",
    "end": "207239"
  },
  {
    "text": "checking the return value of insert it's",
    "start": "207239",
    "end": "209819"
  },
  {
    "text": "really not that much different but it is",
    "start": "209819",
    "end": "212300"
  },
  {
    "text": "significantly faster and the same code",
    "start": "212300",
    "end": "214980"
  },
  {
    "text": "but in JavaScript is 6.7 times faster it",
    "start": "214980",
    "end": "219000"
  },
  {
    "text": "is it works in both languages because",
    "start": "219000",
    "end": "221459"
  },
  {
    "text": "adding and checking a list in general is",
    "start": "221459",
    "end": "225000"
  },
  {
    "text": "significantly faster than a hash set on",
    "start": "225000",
    "end": "227459"
  },
  {
    "text": "a small scale small scale meaning a few",
    "start": "227459",
    "end": "229739"
  },
  {
    "text": "items like 14. alright the next one",
    "start": "229739",
    "end": "232019"
  },
  {
    "text": "should be obvious what we're going to do",
    "start": "232019",
    "end": "233760"
  },
  {
    "text": "here and this one will be 26 times",
    "start": "233760",
    "end": "236519"
  },
  {
    "text": "faster which of course is to use an",
    "start": "236519",
    "end": "238680"
  },
  {
    "text": "array instead of a vector it's stack",
    "start": "238680",
    "end": "241019"
  },
  {
    "text": "allocated and we get like some cash",
    "start": "241019",
    "end": "242940"
  },
  {
    "text": "locality kind of benefits here much much",
    "start": "242940",
    "end": "246540"
  },
  {
    "text": "faster but obviously this one's a bit",
    "start": "246540",
    "end": "248879"
  },
  {
    "text": "more work because now I have to keep",
    "start": "248879",
    "end": "250439"
  },
  {
    "text": "track of the index as well because I",
    "start": "250439",
    "end": "252599"
  },
  {
    "text": "don't want to keep checking all 14",
    "start": "252599",
    "end": "253920"
  },
  {
    "text": "elements every single time but just a",
    "start": "253920",
    "end": "256199"
  },
  {
    "text": "subset of them but still not much more",
    "start": "256199",
    "end": "258780"
  },
  {
    "text": "complicated than our previous solution",
    "start": "258780",
    "end": "260459"
  },
  {
    "text": "now I know at this point this has all",
    "start": "260459",
    "end": "262500"
  },
  {
    "text": "been a bit surprising especially if you",
    "start": "262500",
    "end": "264419"
  },
  {
    "text": "have not used a real language real",
    "start": "264419",
    "end": "266340"
  },
  {
    "text": "language meaning a language that has",
    "start": "266340",
    "end": "267960"
  },
  {
    "text": "static arrays hey sorry JavaScript what",
    "start": "267960",
    "end": "270960"
  },
  {
    "text": "about a ray buffer okay calm down I I",
    "start": "270960",
    "end": "273840"
  },
  {
    "text": "mean they kind of do but real talk these",
    "start": "273840",
    "end": "276120"
  },
  {
    "text": "next couple of optimizations are gonna",
    "start": "276120",
    "end": "278280"
  },
  {
    "text": "be a bit wild we're gonna go from 26x to",
    "start": "278280",
    "end": "283100"
  },
  {
    "text": "233 times faster we're starting to get",
    "start": "283100",
    "end": "286740"
  },
  {
    "text": "into the blazingly faster category all",
    "start": "286740",
    "end": "289919"
  },
  {
    "text": "right before we can go blazingly faster",
    "start": "289919",
    "end": "292139"
  },
  {
    "text": "which is technically a word you first",
    "start": "292139",
    "end": "294540"
  },
  {
    "text": "need to hit the Subscribe button and I'm",
    "start": "294540",
    "end": "296460"
  },
  {
    "text": "going to explain to you about bits",
    "start": "296460",
    "end": "298320"
  },
  {
    "text": "because from here on out all the",
    "start": "298320",
    "end": "300120"
  },
  {
    "text": "solution involves some bit manipulation",
    "start": "300120",
    "end": "302040"
  },
  {
    "text": "to gain some super speeds because we no",
    "start": "302040",
    "end": "304440"
  },
  {
    "text": "longer need to use an array we can use a",
    "start": "304440",
    "end": "306960"
  },
  {
    "text": "singular 32-bit number to store the",
    "start": "306960",
    "end": "309600"
  },
  {
    "text": "state of our search one thing you have",
    "start": "309600",
    "end": "311520"
  },
  {
    "text": "to understand about ASCII characters is",
    "start": "311520",
    "end": "312900"
  },
  {
    "text": "that there is a numeric value Associated",
    "start": "312900",
    "end": "314940"
  },
  {
    "text": "for each one of them and they happen to",
    "start": "314940",
    "end": "316620"
  },
  {
    "text": "be contiguous from 97 to 122. Second Au",
    "start": "316620",
    "end": "319919"
  },
  {
    "text": "32 is an unsigned number that has 32",
    "start": "319919",
    "end": "323160"
  },
  {
    "text": "bits you can think of that as an array",
    "start": "323160",
    "end": "325440"
  },
  {
    "text": "that has the ability to store a true or",
    "start": "325440",
    "end": "327780"
  },
  {
    "text": "a false in 32 positions a true being a",
    "start": "327780",
    "end": "331740"
  },
  {
    "text": "one a false being a zero that means any",
    "start": "331740",
    "end": "334560"
  },
  {
    "text": "character that's moduloed by 32 will",
    "start": "334560",
    "end": "337259"
  },
  {
    "text": "result in a number between 0 to 31 which",
    "start": "337259",
    "end": "340620"
  },
  {
    "text": "is how many bits are stored in a u32",
    "start": "340620",
    "end": "343199"
  },
  {
    "text": "let's go over a quick example let's say",
    "start": "343199",
    "end": "345240"
  },
  {
    "text": "our search state is zero we have not",
    "start": "345240",
    "end": "347280"
  },
  {
    "text": "seen any characters yet and we want to",
    "start": "347280",
    "end": "349740"
  },
  {
    "text": "insert the character d d or 100 modulo",
    "start": "349740",
    "end": "353340"
  },
  {
    "text": "32 is 4. a left shift operator is the",
    "start": "353340",
    "end": "356759"
  },
  {
    "text": "equivalent of multiplying by 10. that",
    "start": "356759",
    "end": "358620"
  },
  {
    "text": "means we're going to shift this one over",
    "start": "358620",
    "end": "360060"
  },
  {
    "text": "by four positions thus equaling the",
    "start": "360060",
    "end": "362280"
  },
  {
    "text": "binary representation of one zero zero",
    "start": "362280",
    "end": "364680"
  },
  {
    "text": "zero zero or binary ten thousand so if",
    "start": "364680",
    "end": "367500"
  },
  {
    "text": "our state is equal to zero and we or it",
    "start": "367500",
    "end": "370560"
  },
  {
    "text": "with our new binary value that we just",
    "start": "370560",
    "end": "372479"
  },
  {
    "text": "created the resulting value will be",
    "start": "372479",
    "end": "374759"
  },
  {
    "text": "binary 10 000. let's say our next",
    "start": "374759",
    "end": "377160"
  },
  {
    "text": "character is an a following this",
    "start": "377160",
    "end": "379199"
  },
  {
    "text": "equation it will yield a value of binary",
    "start": "379199",
    "end": "382259"
  },
  {
    "text": "10. if we or in binary 10 we will get",
    "start": "382259",
    "end": "385020"
  },
  {
    "text": "out the value binary ten thousand and",
    "start": "385020",
    "end": "387360"
  },
  {
    "text": "ten but how do we check to see if that",
    "start": "387360",
    "end": "389580"
  },
  {
    "text": "binary has already been set before we",
    "start": "389580",
    "end": "391740"
  },
  {
    "text": "set it in well we just simply use the",
    "start": "391740",
    "end": "393479"
  },
  {
    "text": "logical and operator using our previous",
    "start": "393479",
    "end": "395639"
  },
  {
    "text": "example we would run the and operator on",
    "start": "395639",
    "end": "397979"
  },
  {
    "text": "it and we'd get out a value of zero",
    "start": "397979",
    "end": "400620"
  },
  {
    "text": "therefore these two values do not share",
    "start": "400620",
    "end": "403139"
  },
  {
    "text": "any common ones now I know that was a",
    "start": "403139",
    "end": "405600"
  },
  {
    "text": "very abbreviated version of binary if",
    "start": "405600",
    "end": "407639"
  },
  {
    "text": "you want to learn more about it I'll",
    "start": "407639",
    "end": "409199"
  },
  {
    "text": "throw a link in the description go check",
    "start": "409199",
    "end": "411660"
  },
  {
    "text": "it out it's directly below the like",
    "start": "411660",
    "end": "413280"
  },
  {
    "text": "button so here is Benny's algorithm and",
    "start": "413280",
    "end": "416039"
  },
  {
    "text": "it's actually quite clever so we do the",
    "start": "416039",
    "end": "418440"
  },
  {
    "text": "state thing that we talked about earlier",
    "start": "418440",
    "end": "420360"
  },
  {
    "text": "and we grabbed the first 13 characters",
    "start": "420360",
    "end": "423060"
  },
  {
    "text": "in the sequence and here's the secret",
    "start": "423060",
    "end": "425880"
  },
  {
    "text": "sauce it uses an xor and exor think of",
    "start": "425880",
    "end": "428699"
  },
  {
    "text": "it like a toggle if there is a zero in",
    "start": "428699",
    "end": "431100"
  },
  {
    "text": "that bit position it will flip it to a",
    "start": "431100",
    "end": "432960"
  },
  {
    "text": "one if there's a one in that bit",
    "start": "432960",
    "end": "434639"
  },
  {
    "text": "position it will flip it to a zero",
    "start": "434639",
    "end": "437060"
  },
  {
    "text": "exclusive or or xor so we do the same",
    "start": "437060",
    "end": "440220"
  },
  {
    "text": "operations that I showed earlier except",
    "start": "440220",
    "end": "441960"
  },
  {
    "text": "for using xor that means we have toggled",
    "start": "441960",
    "end": "444780"
  },
  {
    "text": "on 13 characters at this point from here",
    "start": "444780",
    "end": "448020"
  },
  {
    "text": "we just go over the input 14 at a time",
    "start": "448020",
    "end": "450660"
  },
  {
    "text": "if you're not familiar with the windows",
    "start": "450660",
    "end": "452099"
  },
  {
    "text": "operation it literally goes from 0 to 13",
    "start": "452099",
    "end": "454740"
  },
  {
    "text": "1 to 14 2 to 15 it just does a nice",
    "start": "454740",
    "end": "458580"
  },
  {
    "text": "window for you and the position iterator",
    "start": "458580",
    "end": "460500"
  },
  {
    "text": "will return the index of the first True",
    "start": "460500",
    "end": "463740"
  },
  {
    "text": "Result meaning when I return true right",
    "start": "463740",
    "end": "466500"
  },
  {
    "text": "here it will return the index not the",
    "start": "466500",
    "end": "469500"
  },
  {
    "text": "value that that happened at all right so",
    "start": "469500",
    "end": "471780"
  },
  {
    "text": "we grab the first and last character in",
    "start": "471780",
    "end": "474240"
  },
  {
    "text": "our window now remember our state has",
    "start": "474240",
    "end": "476039"
  },
  {
    "text": "the first 13 characters we toggle on the",
    "start": "476039",
    "end": "479639"
  },
  {
    "text": "14th character so now we have a",
    "start": "479639",
    "end": "481979"
  },
  {
    "text": "possibility of having 14 ones within our",
    "start": "481979",
    "end": "485280"
  },
  {
    "text": "state if we do have 14 ones then we have",
    "start": "485280",
    "end": "488340"
  },
  {
    "text": "found the position we're looking for",
    "start": "488340",
    "end": "490139"
  },
  {
    "text": "then we remove the first character that",
    "start": "490139",
    "end": "492360"
  },
  {
    "text": "we saw that means we go from 14 toggles",
    "start": "492360",
    "end": "494819"
  },
  {
    "text": "down to 13 toggles from 1 to 13. then we",
    "start": "494819",
    "end": "498360"
  },
  {
    "text": "do the loop again adding in the next",
    "start": "498360",
    "end": "501300"
  },
  {
    "text": "last item in the window which is now the",
    "start": "501300",
    "end": "503580"
  },
  {
    "text": "14th position so now we have from 1 to",
    "start": "503580",
    "end": "505919"
  },
  {
    "text": "14 we do the distinct count again then",
    "start": "505919",
    "end": "508440"
  },
  {
    "text": "we remove the first and go to the second",
    "start": "508440",
    "end": "510240"
  },
  {
    "text": "and we keep doing that little window",
    "start": "510240",
    "end": "511800"
  },
  {
    "text": "crawl motion over this clever algorithm",
    "start": "511800",
    "end": "515279"
  },
  {
    "text": "earned Benny",
    "start": "515279",
    "end": "517279"
  },
  {
    "text": "233 times faster than the hash set or 23",
    "start": "517279",
    "end": "522599"
  },
  {
    "text": "000 faster it is incredibly clever",
    "start": "522599",
    "end": "525839"
  },
  {
    "text": "algorithm hats off to Benny damn it",
    "start": "525839",
    "end": "528839"
  },
  {
    "text": "Benny what a smart man and to think my",
    "start": "528839",
    "end": "531240"
  },
  {
    "text": "solution was only like 100x faster than",
    "start": "531240",
    "end": "533220"
  },
  {
    "text": "the hash that one I feel so stupid",
    "start": "533220",
    "end": "534899"
  },
  {
    "text": "looking at Benny's super clever window",
    "start": "534899",
    "end": "537180"
  },
  {
    "text": "crawling solution let's kind of get into",
    "start": "537180",
    "end": "539220"
  },
  {
    "text": "our final form here we're going to look",
    "start": "539220",
    "end": "540779"
  },
  {
    "text": "at the algorithm that sped up Benny's by",
    "start": "540779",
    "end": "543060"
  },
  {
    "text": "over four-fold it was approximately a",
    "start": "543060",
    "end": "546360"
  },
  {
    "text": "thousand X faster so instead of walking",
    "start": "546360",
    "end": "549480"
  },
  {
    "text": "through the idea let's just walk through",
    "start": "549480",
    "end": "551459"
  },
  {
    "text": "the code on this last one because it's",
    "start": "551459",
    "end": "553019"
  },
  {
    "text": "just mind-blowing so the first thing we",
    "start": "553019",
    "end": "555000"
  },
  {
    "text": "do is just start by going through a",
    "start": "555000",
    "end": "557339"
  },
  {
    "text": "fixed size windowing right here you'll",
    "start": "557339",
    "end": "559500"
  },
  {
    "text": "notice that we do a input git from index",
    "start": "559500",
    "end": "562680"
  },
  {
    "text": "to index plus 14. so that is a constant",
    "start": "562680",
    "end": "565920"
  },
  {
    "text": "size window it's very important to",
    "start": "565920",
    "end": "568080"
  },
  {
    "text": "remember that next we create a state",
    "start": "568080",
    "end": "569640"
  },
  {
    "text": "variable 32 bits just like Benny's",
    "start": "569640",
    "end": "571860"
  },
  {
    "text": "solution next we're going to go through",
    "start": "571860",
    "end": "573480"
  },
  {
    "text": "that slice and we're going to iterate in",
    "start": "573480",
    "end": "576060"
  },
  {
    "text": "Reverse now for me personally when I saw",
    "start": "576060",
    "end": "578279"
  },
  {
    "text": "this that means we had to take an",
    "start": "578279",
    "end": "580140"
  },
  {
    "text": "iterator get all the elements collect",
    "start": "580140",
    "end": "582720"
  },
  {
    "text": "them all up and then walk backwards",
    "start": "582720",
    "end": "585000"
  },
  {
    "text": "through them I thought there's no way",
    "start": "585000",
    "end": "586680"
  },
  {
    "text": "this is faster than Benny's we do the",
    "start": "586680",
    "end": "588480"
  },
  {
    "text": "same operation we take the modulo 32 of",
    "start": "588480",
    "end": "590820"
  },
  {
    "text": "the bit we test to see is that bit",
    "start": "590820",
    "end": "593700"
  },
  {
    "text": "already set to one if it is set to one",
    "start": "593700",
    "end": "596700"
  },
  {
    "text": "then we found a place of a duplicate we",
    "start": "596700",
    "end": "599459"
  },
  {
    "text": "then shift on that bit using the or",
    "start": "599459",
    "end": "601380"
  },
  {
    "text": "operator then we return whether or not",
    "start": "601380",
    "end": "603180"
  },
  {
    "text": "we've seen this byte already so here's",
    "start": "603180",
    "end": "605399"
  },
  {
    "text": "one of the two mind-blowing",
    "start": "605399",
    "end": "606600"
  },
  {
    "text": "optimizations if we have seen this bite",
    "start": "606600",
    "end": "609180"
  },
  {
    "text": "since we're going backwards through the",
    "start": "609180",
    "end": "611640"
  },
  {
    "text": "list we can actually jump all the way to",
    "start": "611640",
    "end": "613800"
  },
  {
    "text": "this position plus one that is a huge",
    "start": "613800",
    "end": "616680"
  },
  {
    "text": "optimization we're going to cut out",
    "start": "616680",
    "end": "618240"
  },
  {
    "text": "several characters we don't have to look",
    "start": "618240",
    "end": "620339"
  },
  {
    "text": "over and over again for if we do not",
    "start": "620339",
    "end": "622440"
  },
  {
    "text": "find a repeat character or the false",
    "start": "622440",
    "end": "624420"
  },
  {
    "text": "condition we actually return this index",
    "start": "624420",
    "end": "626640"
  },
  {
    "text": "which is correct this is the position of",
    "start": "626640",
    "end": "629519"
  },
  {
    "text": "the 14 contiguous characters now you're",
    "start": "629519",
    "end": "632040"
  },
  {
    "text": "probably asking yourself how how show me",
    "start": "632040",
    "end": "634560"
  },
  {
    "text": "show me how this was so fast because I",
    "start": "634560",
    "end": "637260"
  },
  {
    "text": "don't understand why going backwards",
    "start": "637260",
    "end": "639120"
  },
  {
    "text": "through a list was faster other than",
    "start": "639120",
    "end": "640500"
  },
  {
    "text": "that little jump but you still have to",
    "start": "640500",
    "end": "642120"
  },
  {
    "text": "iterate over everything right",
    "start": "642120",
    "end": "643920"
  },
  {
    "text": "right so check this out this is the",
    "start": "643920",
    "end": "646320"
  },
  {
    "text": "compiler Explorer this is godbolt.org so",
    "start": "646320",
    "end": "648720"
  },
  {
    "text": "first I put in Benny's solution right",
    "start": "648720",
    "end": "650459"
  },
  {
    "text": "here so we can look at it first now the",
    "start": "650459",
    "end": "652680"
  },
  {
    "text": "first thing that you'll notice is that",
    "start": "652680",
    "end": "654180"
  },
  {
    "text": "the input right here since it was a",
    "start": "654180",
    "end": "656100"
  },
  {
    "text": "fixed size what did the compiler do over",
    "start": "656100",
    "end": "658500"
  },
  {
    "text": "here during optimization it actually",
    "start": "658500",
    "end": "660420"
  },
  {
    "text": "unrolled the loop it just made it all in",
    "start": "660420",
    "end": "662880"
  },
  {
    "text": "line so there's no jumping back and",
    "start": "662880",
    "end": "664800"
  },
  {
    "text": "doing this a whole bunch and then",
    "start": "664800",
    "end": "666120"
  },
  {
    "text": "jumping out at the end then we get to",
    "start": "666120",
    "end": "668040"
  },
  {
    "text": "this our Windows 14. now this is kind of",
    "start": "668040",
    "end": "670500"
  },
  {
    "text": "interesting because this is pretty much",
    "start": "670500",
    "end": "671700"
  },
  {
    "text": "the primary Loop right here we just go",
    "start": "671700",
    "end": "673440"
  },
  {
    "text": "over this code over and over and over",
    "start": "673440",
    "end": "675120"
  },
  {
    "text": "again so it's it's pretty fast right but",
    "start": "675120",
    "end": "677519"
  },
  {
    "text": "now let's look at David's solution so we",
    "start": "677519",
    "end": "679680"
  },
  {
    "text": "have the same thing happens to David's",
    "start": "679680",
    "end": "681600"
  },
  {
    "text": "solution right here it actually gets",
    "start": "681600",
    "end": "683880"
  },
  {
    "text": "Unwound so that reverse iterator happens",
    "start": "683880",
    "end": "686339"
  },
  {
    "text": "in Reverse right here you can see it",
    "start": "686339",
    "end": "688019"
  },
  {
    "text": "right there look that 11 10 9 8 7 5 3 2",
    "start": "688019",
    "end": "691500"
  },
  {
    "text": "1 and then whatever this means I don't",
    "start": "691500",
    "end": "693240"
  },
  {
    "text": "even know what it means and I have been",
    "start": "693240",
    "end": "694620"
  },
  {
    "text": "told that what's happening up here is",
    "start": "694620",
    "end": "696959"
  },
  {
    "text": "all the Sim D stuff that's happening",
    "start": "696959",
    "end": "698760"
  },
  {
    "text": "that means single instruction is",
    "start": "698760",
    "end": "700740"
  },
  {
    "text": "multiple data calculations in a single",
    "start": "700740",
    "end": "703140"
  },
  {
    "text": "go with the compiler that means you can",
    "start": "703140",
    "end": "705060"
  },
  {
    "text": "massively speed up what you're doing so",
    "start": "705060",
    "end": "707640"
  },
  {
    "text": "not only is the inner loop being",
    "start": "707640",
    "end": "709620"
  },
  {
    "text": "unrolled unlike Benny's it's also",
    "start": "709620",
    "end": "712019"
  },
  {
    "text": "getting simd optimization and that my",
    "start": "712019",
    "end": "714779"
  },
  {
    "text": "friends is blazingly fast but you're",
    "start": "714779",
    "end": "717420"
  },
  {
    "text": "probably asking yourself wait wait that",
    "start": "717420",
    "end": "719339"
  },
  {
    "text": "one was 16 000 times faster no that was",
    "start": "719339",
    "end": "723480"
  },
  {
    "text": "just shy of three orders of magnitude",
    "start": "723480",
    "end": "726000"
  },
  {
    "text": "faster a thousand X faster was",
    "start": "726000",
    "end": "728240"
  },
  {
    "text": "983 X faster so how did we make it that",
    "start": "728240",
    "end": "732779"
  },
  {
    "text": "much much more faster of course they",
    "start": "732779",
    "end": "735000"
  },
  {
    "text": "just used by 64 threads that are just",
    "start": "735000",
    "end": "736920"
  },
  {
    "text": "doing nothing of come on of course I'm",
    "start": "736920",
    "end": "738540"
  },
  {
    "text": "gonna do that and that allowed us to go",
    "start": "738540",
    "end": "740899"
  },
  {
    "text": "blazingly fast in fact 16 000 times",
    "start": "740899",
    "end": "744779"
  },
  {
    "text": "faster than the original solution I know",
    "start": "744779",
    "end": "746700"
  },
  {
    "text": "someone's probably like well that's kind",
    "start": "746700",
    "end": "748260"
  },
  {
    "text": "of cheating us now I mean it's a little",
    "start": "748260",
    "end": "749459"
  },
  {
    "text": "cheating I mean it's part of an",
    "start": "749459",
    "end": "750600"
  },
  {
    "text": "algorithm right we're just improving",
    "start": "750600",
    "end": "752339"
  },
  {
    "text": "upon the algorithm it's a very simple",
    "start": "752339",
    "end": "754680"
  },
  {
    "text": "set of work to parallelize in fact it's",
    "start": "754680",
    "end": "757019"
  },
  {
    "text": "so fast that Google charts I can't even",
    "start": "757019",
    "end": "759839"
  },
  {
    "text": "get a blue line to show up here that's",
    "start": "759839",
    "end": "762959"
  },
  {
    "text": "how much faster it is it is so fast that",
    "start": "762959",
    "end": "765720"
  },
  {
    "text": "the original solution would process",
    "start": "765720",
    "end": "768560"
  },
  {
    "text": "3.84 megabytes of data per second",
    "start": "768560",
    "end": "771380"
  },
  {
    "text": "whereas the multi-threaded final",
    "start": "771380",
    "end": "774180"
  },
  {
    "text": "solution did 617 gigabytes per second of",
    "start": "774180",
    "end": "778740"
  },
  {
    "text": "course it only did it for about 11.9",
    "start": "778740",
    "end": "780839"
  },
  {
    "text": "milliseconds because that's all it took",
    "start": "780839",
    "end": "782519"
  },
  {
    "text": "to cover about 800 megabytes worth of",
    "start": "782519",
    "end": "784860"
  },
  {
    "text": "data of course the 980 three times",
    "start": "784860",
    "end": "787980"
  },
  {
    "text": "faster solution is brought to you by",
    "start": "787980",
    "end": "790139"
  },
  {
    "text": "David A Perez go give them a follow on",
    "start": "790139",
    "end": "792420"
  },
  {
    "text": "GitHub now that's blazingly fast I hope",
    "start": "792420",
    "end": "795660"
  },
  {
    "text": "you enjoyed this hey hit the like button",
    "start": "795660",
    "end": "797579"
  },
  {
    "text": "let me know down below it was a lot of",
    "start": "797579",
    "end": "800160"
  },
  {
    "text": "fun to do this this was all obviously",
    "start": "800160",
    "end": "801899"
  },
  {
    "text": "done on Twitch we went through all the",
    "start": "801899",
    "end": "803639"
  },
  {
    "text": "optimizations and everything ma glorious",
    "start": "803639",
    "end": "806459"
  },
  {
    "text": "times on there thank you for watching",
    "start": "806459",
    "end": "808320"
  },
  {
    "text": "the name is the primagen",
    "start": "808320",
    "end": "812060"
  }
]