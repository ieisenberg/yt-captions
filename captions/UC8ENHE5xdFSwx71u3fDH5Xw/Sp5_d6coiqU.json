[
  {
    "text": "gatsby blazingly fast seven \nreact libraries blazingly fast  ",
    "start": "160",
    "end": "4799"
  },
  {
    "text": "blazing fast javascript the promise of every \njavascript library but you're probably asking  ",
    "start": "6240",
    "end": "11040"
  },
  {
    "text": "yourself how do you make fast that which is \nslow astute question and observation so you  ",
    "start": "11040",
    "end": "16720"
  },
  {
    "text": "can't really i mean technically javascript's \nslower than a lot of other languages but  ",
    "start": "16720",
    "end": "20640"
  },
  {
    "text": "you can definitely make it fast in comparison \nto itself blazingly fast but how do you make it  ",
    "start": "20640",
    "end": "26880"
  },
  {
    "text": "faster well it's actually a little bit surprising \nsome of the techniques you can use to make your  ",
    "start": "26880",
    "end": "30960"
  },
  {
    "text": "javascript applications faster so i'm going \nto walk you through how to actually do it how  ",
    "start": "30960",
    "end": "35680"
  },
  {
    "text": "to actually make javascript basically fast so \nwhat did we build and by we i mean me building  ",
    "start": "35680",
    "end": "42480"
  },
  {
    "text": "the actual application and of course degenerates \non twitch explaining to me what i've done wrong  ",
    "start": "42480",
    "end": "47200"
  },
  {
    "text": "and what i should be doing wow so zig has zero \nmacros and zero meta programming yet it's still  ",
    "start": "47200",
    "end": "53120"
  },
  {
    "text": "powerful enough to express any complex program \nin a simple and concise manner what are you a  ",
    "start": "53120",
    "end": "58480"
  },
  {
    "text": "walking pamphlet get the hell out of here so \nwhat i did build was actually a pretty simple  ",
    "start": "58480",
    "end": "63200"
  },
  {
    "text": "game server that runs at 60 ticks per second and \nwe measured how successful we were at maintaining  ",
    "start": "63200",
    "end": "69360"
  },
  {
    "text": "60 ticks per second the game starts off with two \nplayers each are given a fire rate it's obvious  ",
    "start": "69360",
    "end": "74240"
  },
  {
    "text": "that one of the fire rates is slower therefore \none of the players is going to lose every single  ",
    "start": "74240",
    "end": "78799"
  },
  {
    "text": "time after receiving a ready up command and a \nplay game command the players will start firing  ",
    "start": "78800",
    "end": "83520"
  },
  {
    "text": "at each other every 200 milliseconds which means \nthat the slower firing rate will be disadvantaged  ",
    "start": "83520",
    "end": "88399"
  },
  {
    "text": "and eventually will lose the game the game \nlooks like this we start with the ready state  ",
    "start": "88400",
    "end": "93200"
  },
  {
    "text": "once both players are ready and started firing we \nenter into a loop we check for any fire commands  ",
    "start": "93200",
    "end": "97840"
  },
  {
    "text": "and create any new bullets if needed we check for \ncollisions and move the bullets according to how  ",
    "start": "97840",
    "end": "102000"
  },
  {
    "text": "much time has passed since the last loop then we \ncheck for an end state to the actual game so this  ",
    "start": "102000",
    "end": "105680"
  },
  {
    "text": "should give us a pretty robust place to be able \nto test out some performance improvements so let's  ",
    "start": "105680",
    "end": "111200"
  },
  {
    "text": "get started let's try to make this application a \nbit more blazingly fast no karen blazingly fast is  ",
    "start": "111200",
    "end": "117119"
  },
  {
    "text": "not a euphemism i mean i guess it kind of i mean \ni get i get it kind of is yeah okay reasonable i  ",
    "start": "117120",
    "end": "122720"
  },
  {
    "text": "will stop saying that you win karen i'll update my \nvocabulary blazingly fast the must-do first step  ",
    "start": "122720",
    "end": "129119"
  },
  {
    "text": "to improving any performance is to get a baseline \nmeasurement what are you trying to improve if you  ",
    "start": "129120",
    "end": "135360"
  },
  {
    "text": "recall from earlier this was our game loop now \nevery single time it runs we may get some good  ",
    "start": "135360",
    "end": "140480"
  },
  {
    "text": "loops but sometimes we get some bad loops meaning \nsomething happened that caused it to run a little  ",
    "start": "140480",
    "end": "145440"
  },
  {
    "text": "longer than expected and of course we can take \nall these times and we can actually bucket them  ",
    "start": "145440",
    "end": "149440"
  },
  {
    "text": "together therefore there are seven good loops \nthere are two uh you know kind of exceeding  ",
    "start": "149440",
    "end": "153920"
  },
  {
    "text": "ones and then one that gets even further exceeded \nnow with the actual data that i was capturing i  ",
    "start": "153920",
    "end": "158160"
  },
  {
    "text": "had many more buckets to fill in and of course we \nwould have somewhere between 200 concurrent games  ",
    "start": "158160",
    "end": "162880"
  },
  {
    "text": "to 800 concurrent games being played at once on a \nlinode.com/prime single cpu instance so that way it was, you  ",
    "start": "162880",
    "end": "170240"
  },
  {
    "text": "know, a fairly repeatable experiment a little side \nnote you shouldn't run your experiments on your  ",
    "start": "170240",
    "end": "175120"
  },
  {
    "text": "own computer just because your computer has a lot \nof things happening so i always have an instance  ",
    "start": "175120",
    "end": "179440"
  },
  {
    "text": "that is at least more quiet and more predictable \nthan my computer with the base implementation  ",
    "start": "179440",
    "end": "185040"
  },
  {
    "text": "no performance improvements at all i had about \n96.6% of the ticks actually considered good ticks  ",
    "start": "185040",
    "end": "190640"
  },
  {
    "text": "within 16 to 17 milliseconds the rest after that \nwere comprised of mostly 19 to 20 milliseconds  ",
    "start": "190640",
    "end": "196800"
  },
  {
    "text": "after that a very small percent for anything above \nthat once we increased to 400 concurrent games or  ",
    "start": "196800",
    "end": "201920"
  },
  {
    "text": "about 800 active players the percentage dropped \nquite a bit even more so once we got up to 1200  ",
    "start": "201920",
    "end": "207520"
  },
  {
    "text": "and at 1600 less than half of the ticks even \nwere considered good so the typescript server  ",
    "start": "207520",
    "end": "212400"
  },
  {
    "text": "fell apart pretty hard as it got under load so \nnow we have a goal just simply make this blue bar  ",
    "start": "212400",
    "end": "217200"
  },
  {
    "text": "bigger again karen not a euphemism or just \ntrying to make a big girthy blue bar okay totally  ",
    "start": "217760",
    "end": "223519"
  },
  {
    "text": "normal totally normal one of the easiest ways to \nunderstand what's happening in your server is to  ",
    "start": "223520",
    "end": "228240"
  },
  {
    "text": "do a flame graph now with node it's pretty simple \nyou pass a simple flag --perf-basic-profs run perf  ",
    "start": "228240",
    "end": "234560"
  },
  {
    "text": "throw it through the little perl script and of \ncourse generate the flame graph and boom you got  ",
    "start": "234560",
    "end": "239040"
  },
  {
    "text": "yourself a flame graph now how do you read this \nthing well effectively how perf works is it's  ",
    "start": "239040",
    "end": "244239"
  },
  {
    "text": "like taking a stack trace hundreds or thousands of \ntimes a second it takes all those stack traces  ",
    "start": "244240",
    "end": "250080"
  },
  {
    "text": "sorts them so that the x-axis isn't meaningful \nin a time sense meaning you couldn't say okay  ",
    "start": "250080",
    "end": "256959"
  },
  {
    "text": "this one call over here is 45 milliseconds \nno what it is instead is it's proportions  ",
    "start": "256960",
    "end": "263360"
  },
  {
    "text": "so when i look at this i can see that right here \nthis is 45% of my program i am within this function  ",
    "start": "263360",
    "end": "271520"
  },
  {
    "text": "so it's actually a really easy way to see what is \ntaking a long time to run now when i look through  ",
    "start": "271520",
    "end": "275680"
  },
  {
    "text": "a lot of these peaks what i'm going to see is a \nlot of like e-poll so probably not going to improve  ",
    "start": "275680",
    "end": "280320"
  },
  {
    "text": "that part of my program i see tcp probably again \nnot something i'm going to improve node internals  ",
    "start": "280320",
    "end": "285520"
  },
  {
    "text": "when it comes to firing timers node internals \nwhen it comes to reading streams all of these i'm  ",
    "start": "285520",
    "end": "290400"
  },
  {
    "text": "probably unlikely going to improve this running \ntime my application really consists within this  ",
    "start": "290400",
    "end": "295840"
  },
  {
    "text": "stack right here so let's look at this top one \nspecifically it is called collisions it's taking  ",
    "start": "295840",
    "end": "301600"
  },
  {
    "text": "20 percent of the time when i can do a little \ncontrol find i can do collisions and in case  ",
    "start": "301600",
    "end": "307360"
  },
  {
    "text": "it appears else in the stack i've raised myself \nup just so you can see this down below this says  ",
    "start": "307360",
    "end": "311520"
  },
  {
    "text": "21.5 percent of the time i am in this function i \nknow what function this is and i know probably how  ",
    "start": "311520",
    "end": "317759"
  },
  {
    "text": "to make this faster so this looks like a great \nplace for me to try to improve the reason being  ",
    "start": "317760",
    "end": "322160"
  },
  {
    "text": "is that i just did a simple n squared algorithm \ntake every single object and just compare it to  ",
    "start": "322160",
    "end": "326240"
  },
  {
    "text": "the rest of them so what i could do is break up \nplayer one's bullets to player two bullets and  ",
    "start": "326240",
    "end": "330560"
  },
  {
    "text": "only test against each other because player one \nbullets will never collide with each other player  ",
    "start": "330560",
    "end": "334560"
  },
  {
    "text": "two bullets will never collide with each other \nit's only this direction so easy win all right  ",
    "start": "334560",
    "end": "338800"
  },
  {
    "text": "so i re-ran the program and what i see is that my \ncollision went from 21 and a half percent of the  ",
    "start": "338800",
    "end": "344080"
  },
  {
    "text": "time to only eight percent of the time this means \nwe should see an effect on this we should actually  ",
    "start": "344080",
    "end": "349199"
  },
  {
    "text": "see our program run faster at least i would assume \nso at this point i made a pretty decent sized  ",
    "start": "349200",
    "end": "356080"
  },
  {
    "text": "improvement here you'll notice that this side of \nthe graph actually got larger meaning that we have  ",
    "start": "356080",
    "end": "360639"
  },
  {
    "text": "more time to be able to do operations that i can't \nquite control their running time by reducing the  ",
    "start": "360640",
    "end": "366640"
  },
  {
    "text": "amount of time that i can control so i re-ran \nthe exact same experiment and what i see is a  ",
    "start": "366640",
    "end": "371440"
  },
  {
    "text": "dramatic improvement in the amount of blue ticks \nin both the 800 connection and the 1200 connection  ",
    "start": "371440",
    "end": "377680"
  },
  {
    "text": "comparing it i see about 62.4 percent of the time \ni'm in the blue bar section or the well-behaved  ",
    "start": "377680",
    "end": "384479"
  },
  {
    "text": "ticks 16 to 17 millisecond in the original \nserver versus 72 percent of the time so this is  ",
    "start": "384480",
    "end": "390560"
  },
  {
    "text": "definitely better all right so if you don't know \nhow to run perf i will include the commands in the  ",
    "start": "390560",
    "end": "395200"
  },
  {
    "text": "readme on the repo https://github.com/ThePrimeagen/tyrone-biggums do that free five \no'clock crack giveaway again yes yes twitch did  ",
    "start": "395200",
    "end": "401760"
  },
  {
    "text": "choose the name okay stop judging me all the links \nwill be down below were you surprised at how much  ",
    "start": "401760",
    "end": "407120"
  },
  {
    "text": "of an improvement we got that was a decent 10% improvement by fixing something that was  ",
    "start": "407120",
    "end": "411840"
  },
  {
    "text": "pretty trivial to fix often what you'll find is \nthat you've made some pretty simple mistakes when  ",
    "start": "411840",
    "end": "416320"
  },
  {
    "text": "you look at a flame graph but let's try to improve \nour server but on a completely different dimension  ",
    "start": "416320",
    "end": "421840"
  },
  {
    "text": "something that might surprise you you can run node \nwith the --inspect flag and you'll be able to see a  ",
    "start": "421840",
    "end": "426160"
  },
  {
    "text": "memory tab in the chrome debugger by going to \nallocation sampling you can measure just like  ",
    "start": "426160",
    "end": "430960"
  },
  {
    "text": "perf traces memory being created instead of cpu \nbeing used they're identical in how to read the  ",
    "start": "430960",
    "end": "436560"
  },
  {
    "text": "graphs so this one you read it of course as this \ntakes up a lot of memory this takes up some memory  ",
    "start": "436560",
    "end": "442880"
  },
  {
    "text": "this takes up a lot of memory the total amounts \nof memory probably don't really matter because  ",
    "start": "442880",
    "end": "448240"
  },
  {
    "text": "it's not quite correct it's a sampled amount but \nit's again you just look at portions and can you  ",
    "start": "448240",
    "end": "453919"
  },
  {
    "text": "improve it proportionally you'll notice right here \nthat looks kind of crazy about 33 percent of the  ",
    "start": "453920",
    "end": "460080"
  },
  {
    "text": "time we're generating all of our memory from a \nplace called processMessage now what process  ",
    "start": "460080",
    "end": "464639"
  },
  {
    "text": "message does is it takes in a fire command from \nthe websocket creates a bullet and adds it to the  ",
    "start": "464640",
    "end": "469760"
  },
  {
    "text": "world i was a little bit surprised seeing that \nand when we look at our flame graph only 2.7%  ",
    "start": "469760",
    "end": "475120"
  },
  {
    "text": "of the time are we in this function so it's not \nlike it's a heavy cpu function but it is a heavy  ",
    "start": "475120",
    "end": "481680"
  },
  {
    "text": "memory generation function along with that we \ngenerate a lot of memory just listening to sockets  ",
    "start": "481680",
    "end": "486720"
  },
  {
    "text": "so if we could improve that along with how we keep \nstats for game the players we create we could see  ",
    "start": "486720",
    "end": "491680"
  },
  {
    "text": "a much better performance in our server so we're \ngoing to improve this by creating memory pools  ",
    "start": "491680",
    "end": "496960"
  },
  {
    "text": "effectively a memory pool allows you to cache an \nobject and reuse it over and over again since i'm  ",
    "start": "496960",
    "end": "502639"
  },
  {
    "text": "going to create literally thousands of bullets \na second i should probably just have a pool  ",
    "start": "502640",
    "end": "507760"
  },
  {
    "text": "these short-lived objects can be created once and \njust used over and over again if i can just simply  ",
    "start": "507760",
    "end": "512320"
  },
  {
    "text": "reset their position and their direction so to \ncreate a memory pool i created a very simple ring  ",
    "start": "512320",
    "end": "516479"
  },
  {
    "text": "buffer if you're unfamiliar with the ring buffer \nring buffer allows you to have a fixed size array  ",
    "start": "516480",
    "end": "520560"
  },
  {
    "text": "where you have two pointers one where you need to \ninsert at and one where you need to remove at and  ",
    "start": "520560",
    "end": "525440"
  },
  {
    "text": "as you insert and remove they go around eventually \nyou could have your insertion catch up to your  ",
    "start": "525440",
    "end": "530080"
  },
  {
    "text": "removal at that point you need to create a bigger \narea to store your items or the other direction  ",
    "start": "530080",
    "end": "535520"
  },
  {
    "text": "your removal catches up to your insertion then \nyou just need to create a new object to be held  ",
    "start": "535520",
    "end": "540080"
  },
  {
    "text": "by the memory pool now the dangerous part about \ndoing this is you have to manage your own memory  ",
    "start": "540080",
    "end": "544000"
  },
  {
    "text": "meaning you can't just let the bullet be garbage \ncollected you need to manage its lifetime (RUST BABY) when i  ",
    "start": "544000",
    "end": "548160"
  },
  {
    "text": "create a bullet i actually have to remove it from \nthe pool update all of its positions and set its  ",
    "start": "548160",
    "end": "552800"
  },
  {
    "text": "direction and every single time i need to remove a \nbullet i actually have to call the cleanUp method  ",
    "start": "552800",
    "end": "556959"
  },
  {
    "text": "and make sure that the bullet re-adds itself back \nto its own pool which also means when we tear down  ",
    "start": "556960",
    "end": "561680"
  },
  {
    "text": "our world i need to remove all the bullets and go \none by one through the list along with removing  ",
    "start": "561680",
    "end": "566960"
  },
  {
    "text": "the lists themselves releasing the players doing \nall of that so this can actually become quite  ",
    "start": "566960",
    "end": "571680"
  },
  {
    "text": "cumbersome and easily you can mess this up but the \neffects are incredible so here's the previous one  ",
    "start": "571680",
    "end": "577120"
  },
  {
    "text": "now notice if you look at this graph this section \npretty much over here represents ws the blazingly  ",
    "start": "577120",
    "end": "584000"
  },
  {
    "text": "fast websocket library and you can see some more \nof it right in here as well so about 40 percent of it  ",
    "start": "584000",
    "end": "589920"
  },
  {
    "text": "is comprised of just ws memory and stuff when we \nlook at the new version you'll notice that process  ",
    "start": "589920",
    "end": "594800"
  },
  {
    "text": "message becomes nothing i do have to json parse \nso of course that's gonna have some effect but on  ",
    "start": "594800",
    "end": "600480"
  },
  {
    "text": "top of it the ws memory that's being used is now \nlike 66 perof the program we've really slimmed down  ",
    "start": "600480",
    "end": "606480"
  },
  {
    "text": "our program to be as optimal as possible now \nbefore i show you the results what do you think  ",
    "start": "606480",
    "end": "611279"
  },
  {
    "text": "is going to happen will we actually be faster or \nis all this memory management not gonna improve  ",
    "start": "611280",
    "end": "616320"
  },
  {
    "text": "anything because you could defeat the compiler \nright jit may not be able to run i have no idea  ",
    "start": "616320",
    "end": "621520"
  },
  {
    "text": "the javascript engine is a very complicated piece \nof machinery what you think may make it faster may  ",
    "start": "621520",
    "end": "628000"
  },
  {
    "text": "make it slower so just to remind you about 64.2 \npercent of the time we had good frames at 1200  ",
    "start": "628000",
    "end": "634080"
  },
  {
    "text": "connections in our base implementation now when \nwe look at our memory pool we actually see that  ",
    "start": "634080",
    "end": "638240"
  },
  {
    "text": "74.7 percent of the time we have good ticks this is \nactually a bigger improvement than our hot spot ",
    "start": "638240",
    "end": "646000"
  },
  {
    "text": "implementation for me this was kind of surprising \ni did not think it would be a better improvement  ",
    "start": "646000",
    "end": "652160"
  },
  {
    "text": "it didn't really show up in flame graphs the way \ni thought it would i thought the fix was kind of   ",
    "start": "652160",
    "end": "656800"
  },
  {
    "text": "obvious so for me this was a bit surprising how \ngood it was and something else that was actually  ",
    "start": "656800",
    "end": "661920"
  },
  {
    "text": "kind of surprising is that you'll notice that the \nmemory used our base implementation was getting up  ",
    "start": "661920",
    "end": "667519"
  },
  {
    "text": "over 200 megabytes at 1200 players versus \nright around 110 megabytes for our memory  ",
    "start": "667520",
    "end": "673840"
  },
  {
    "text": "optimization look at the memory much smoother \nbarely grows the average is literally twice as  ",
    "start": "673840",
    "end": "679760"
  },
  {
    "text": "much for our base implementation versus our memory \noptimized all right so for the final experiment i  ",
    "start": "679760",
    "end": "683920"
  },
  {
    "text": "played a hundred thousand games with the base \nimplementation versus the final implementation  ",
    "start": "683920",
    "end": "688800"
  },
  {
    "text": "both the memory and the hotspot improvement to \ncompare the differences of course when we get into  ",
    "start": "688800",
    "end": "693680"
  },
  {
    "text": "the final one right here we're looking at 46.1 \npercent of the frames are within our acceptable  ",
    "start": "693680",
    "end": "699600"
  },
  {
    "text": "range that means over half of the frames were 18 \nmilliseconds or higher which is actually pretty  ",
    "start": "699600",
    "end": "704800"
  },
  {
    "text": "surprising like our server was really slowing down \nall right so let's look at the exact same graph  ",
    "start": "704800",
    "end": "709680"
  },
  {
    "text": "at 100 000 games played 54.1 percent of the time \nthe ticks were good which is actually an over 20 percent ",
    "start": "709680",
    "end": "715839"
  },
  {
    "text": "improvement compared to the base implementation at \n1200 connected players it's 75 percent versus 64 percent another  ",
    "start": "716480",
    "end": "724720"
  },
  {
    "text": "huge improvement okay yeah come on in twitch okay \nyeah oh okay yeah youtube yeah you can come in too  ",
    "start": "724720",
    "end": "731920"
  },
  {
    "text": "i get it you guys want Rustlang and golang yeah well \nhere's the deal like i said last time give this  ",
    "start": "731920",
    "end": "736880"
  },
  {
    "text": "video a like do a little comment let me know that \nyou like this content because once again if you  ",
    "start": "736880",
    "end": "741520"
  },
  {
    "text": "guys don't interact with me how am i supposed to \nmeasure the improvement here okay come on as you  ",
    "start": "741520",
    "end": "745920"
  },
  {
    "text": "can see i like graphs so if you're not providing \nme the information i can't graph it and of course  ",
    "start": "745920",
    "end": "751120"
  },
  {
    "text": "youtube you want to see this created live you \ngotta head on over to twitch i mean look at twitch  ",
    "start": "751120",
    "end": "755279"
  },
  {
    "text": "what a nice character huh you like him well guess \nwhat you can hang out with twitch all day long",
    "start": "755280",
    "end": "768480"
  }
]