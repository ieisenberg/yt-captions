[
  {
    "text": "for venten systems you should not rely on exactly once's delivery even if it sounds plausible you should just not",
    "start": "40",
    "end": "5839"
  },
  {
    "text": "because at some point in time someone is going to Reit a message accidentally twice and then basically you're in a",
    "start": "5839",
    "end": "12160"
  },
  {
    "text": "world of hurt so instead just build your systems with item potency in mind that there's a possibility that an event is",
    "start": "12160",
    "end": "17960"
  },
  {
    "text": "going to get duplicated if you want to do do duplication on your side go for it but like the easiest one is that like",
    "start": "17960",
    "end": "23519"
  },
  {
    "text": "have I handled this before yes I have ignore and just move",
    "start": "23519",
    "end": "28960"
  },
  {
    "text": "on big thanks to our partners Leno fastly and launch Darkly we love Leno they keep it fast and simple check them",
    "start": "28960",
    "end": "35480"
  },
  {
    "text": "out at lin.com changelog our bandwidth is provided by fastly learn more at",
    "start": "35480",
    "end": "40640"
  },
  {
    "text": "fastly.com and get your feature Flags powered by lunch darkle get a demo at launch dark.com what's up Gophers our",
    "start": "40640",
    "end": "47600"
  },
  {
    "text": "friends over gravitational made a big transition at the end of 2020 to Rebrand",
    "start": "47600",
    "end": "52960"
  },
  {
    "text": "as teleport and shared a new product announcement to showcase the direction they're taking teleport is operating",
    "start": "52960",
    "end": "58559"
  },
  {
    "text": "from a vision of being a able to run and access software anywhere in a secure and compliant manner something they call",
    "start": "58559",
    "end": "65198"
  },
  {
    "text": "environment free Computing with teleport engineering teams can quickly access any resource anywhere using a unified access",
    "start": "65199",
    "end": "72960"
  },
  {
    "text": "plane that consolidates access controls and auditing across all environments infrastructure applications as well as",
    "start": "72960",
    "end": "80040"
  },
  {
    "text": "data teleport server access let you Sate securely into Linux servers and smart",
    "start": "80040",
    "end": "85240"
  },
  {
    "text": "devices with a complete audit Trail teleport kuber's access let you access kuber these clusters securely with",
    "start": "85240",
    "end": "91119"
  },
  {
    "text": "complete visibility to access and behavior and finally teleport application access let you access web",
    "start": "91119",
    "end": "97119"
  },
  {
    "text": "apps running behind natat and firewalls with security and compliance try teleport today in the cloud self-hosted",
    "start": "97119",
    "end": "103360"
  },
  {
    "text": "or open source head to go teleport.to learn more and get started again go",
    "start": "103360",
    "end": "110439"
  },
  {
    "text": "[Music]",
    "start": "113740",
    "end": "118840"
  },
  {
    "text": "teleport.to",
    "start": "118840",
    "end": "121840"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "130599",
    "end": "137160"
  },
  {
    "text": "from around the go Community we record the show Live on YouTube each and every Tuesday at 3 p.m. us Eastern 700 p.m.",
    "start": "137160",
    "end": "144879"
  },
  {
    "text": "UTC subscribe at youtube.com/ changelog to be notified when we go live and don't",
    "start": "144879",
    "end": "151280"
  },
  {
    "text": "forget to follow gotime FM on Twitter and vote on our unpopular opinion polls",
    "start": "151280",
    "end": "156879"
  },
  {
    "text": "this is very important stuff okay let's do this here we",
    "start": "156879",
    "end": "162040"
  },
  {
    "text": "go hello everybody and welcome to go time today Chris and I are joined by",
    "start": "164239",
    "end": "169519"
  },
  {
    "text": "Daniel salons and Steve High to talk about event driven systems hey Daniel how are you doing all right what's going",
    "start": "169519",
    "end": "175720"
  },
  {
    "text": "on uh not too much just uh excited to learn about event driven systems from you guys Steve how are you doing I'm",
    "start": "175720",
    "end": "181000"
  },
  {
    "text": "doing great thanks awesome and Chris how are you doing pretty well okay so Daniel",
    "start": "181000",
    "end": "186760"
  },
  {
    "text": "why don't we just start with a little bit of background information about yourself what experience do you have with event driven systems and why are",
    "start": "186760",
    "end": "193440"
  },
  {
    "text": "you sort of the person to talk about it I don't know if I'm the exact person to talk about it or a person to talk about",
    "start": "193440",
    "end": "199599"
  },
  {
    "text": "it yeah I'll take that seat the king of the castle seat yeah so I've been in the",
    "start": "199599",
    "end": "205040"
  },
  {
    "text": "industry for about I don't know I don't want to age myself too much but it's been like 15 or 20 years I've worked in",
    "start": "205040",
    "end": "212280"
  },
  {
    "text": "like all kinds of various places um I have a pretty serious background in data like in data centers I did a lot of well",
    "start": "212280",
    "end": "219560"
  },
  {
    "text": "back in the day it was known as systems Integrations and now it's really just like automation stuff after that I I",
    "start": "219560",
    "end": "224920"
  },
  {
    "text": "spent a lot of time in like fintech and design space and kind of all over the place including APM space as well most",
    "start": "224920",
    "end": "231920"
  },
  {
    "text": "recently I was at a a social startup called Community where it had the best",
    "start": "231920",
    "end": "238280"
  },
  {
    "text": "event driven system I had ever seen they managed to pull off something that is uh",
    "start": "238280",
    "end": "243879"
  },
  {
    "text": "fairly rare which is a tiny startup implementing an amazing foundation so",
    "start": "243879",
    "end": "250519"
  },
  {
    "text": "that as they continued growing they didn't have to patch a bunch of holes I've been building Advent in systems for",
    "start": "250519",
    "end": "256120"
  },
  {
    "text": "a while but we started playing around with kovka between me and my um well now",
    "start": "256120",
    "end": "261440"
  },
  {
    "text": "co-founder just somebody I was working with the community as well yeah we just basically we came up with this prototype",
    "start": "261440",
    "end": "267919"
  },
  {
    "text": "of like an idea as to how like we could basically simplify event driven systems in the first place and uh ended up",
    "start": "267919",
    "end": "274720"
  },
  {
    "text": "submitting that to whitec combinator just kind of for fun and then thought that it was a fluke when the interview",
    "start": "274720",
    "end": "280680"
  },
  {
    "text": "came up and we were like oh well I guess this is real so ended up getting accepted into white combinator and then",
    "start": "280680",
    "end": "287039"
  },
  {
    "text": "I we it started you know on our trick to basically build this stuff I've been exposed to event driven systems for a",
    "start": "287039",
    "end": "293600"
  },
  {
    "text": "long time and now that I'm actually working on it full-time is more apparent",
    "start": "293600",
    "end": "299759"
  },
  {
    "text": "than ever it is still an area that it's kind of unknown right like and people are generally afraid of it that sort of",
    "start": "299759",
    "end": "305680"
  },
  {
    "text": "a thing so I'm here to really try to kind of like clear the space clear the air that sort of thing cool and your",
    "start": "305680",
    "end": "312880"
  },
  {
    "text": "startup is batch which is at batch. sh so do you want to give like a quick elevator pitch just to why somebody",
    "start": "312880",
    "end": "319120"
  },
  {
    "text": "might want to check it out sure yeah it's basically we are a data pipeline",
    "start": "319120",
    "end": "324280"
  },
  {
    "text": "company essentially um that specializes in extracting data from message buses",
    "start": "324280",
    "end": "329840"
  },
  {
    "text": "and we work with basically anything any message bus text so it could be Kafka rabbit Nats AWS sqs and the list goes on",
    "start": "329840",
    "end": "338240"
  },
  {
    "text": "and on or basically like message bus agnostic you don't necessarily have to do a vent driven as long as you're doing",
    "start": "338240",
    "end": "344240"
  },
  {
    "text": "something with message buses and the data that's on them is important to you and you need to look at it and be able",
    "start": "344240",
    "end": "349759"
  },
  {
    "text": "to inspect it and that sort of thing then you should definitely check it out just like shoot me a message could just",
    "start": "349759",
    "end": "355360"
  },
  {
    "text": "chat about it awesome Steve how about yourself what is your experience with with event driven systems So currently",
    "start": "355360",
    "end": "361280"
  },
  {
    "text": "I'm with a company called network uh which is a kind of build as the uh QVC",
    "start": "361280",
    "end": "367520"
  },
  {
    "text": "for um for Gen Z which basically means that we drop really high demand products",
    "start": "367520",
    "end": "373479"
  },
  {
    "text": "at a given time and a funding her of people try to buy these things all at the same time so the event driven stuff",
    "start": "373479",
    "end": "379560"
  },
  {
    "text": "that we do right there is um there's a lot of uh transactional management that we have to worry about a lot of State",
    "start": "379560",
    "end": "385000"
  },
  {
    "text": "Management that we have to worry about previously I was with a few other companies that had simp",
    "start": "385000",
    "end": "390280"
  },
  {
    "text": "or not quite so simple message buses using you know Kafka and and qtt and and",
    "start": "390280",
    "end": "395720"
  },
  {
    "text": "other types of Technologies like that but going back even further my main",
    "start": "395720",
    "end": "400759"
  },
  {
    "text": "background is actually embedded systems design so message buses in in that sphere look a little different than they",
    "start": "400759",
    "end": "407720"
  },
  {
    "text": "kind of do in the current flavor of Technology but at the end of the day it's kind of the same concept so um it",
    "start": "407720",
    "end": "414319"
  },
  {
    "text": "translated pretty nicely for me to move all that knowledge to where we're currently at with",
    "start": "414319",
    "end": "420199"
  },
  {
    "text": "an event driven microservices architecture awesome you've both mentioned some different Technologies",
    "start": "420199",
    "end": "425360"
  },
  {
    "text": "would one of you like to take a stab at just sort of explaining at a high level what an event-driven system actually is I'm going to try to do it in a like a",
    "start": "425360",
    "end": "432000"
  },
  {
    "text": "non-scientific way but really at the core of it it's a systems architecture that essentially requires you to or it",
    "start": "432000",
    "end": "439360"
  },
  {
    "text": "uses asynchronous messaging to communicate State usually asynchronous messaging to communicate State and that",
    "start": "439360",
    "end": "446440"
  },
  {
    "text": "basically just means one instead of a service a talking to service B directly via rest or grpc or whatever instead you",
    "start": "446440",
    "end": "454440"
  },
  {
    "text": "emitting a message saying that some sort of a state change occurred and you do not know the like uh in advance the",
    "start": "454440",
    "end": "460919"
  },
  {
    "text": "audience that actually it's intended for but somebody's going to consume that message and do something with it honestly it's a fairly simple concept",
    "start": "460919",
    "end": "467840"
  },
  {
    "text": "what you end up with is gaining a lot of reliability for you know introduced complexity essentially so that's at the",
    "start": "467840",
    "end": "474560"
  },
  {
    "text": "core of it what do you think Steve going to Hype that up so yeah basically what Daniel said I mean what the main Crux of",
    "start": "474560",
    "end": "481400"
  },
  {
    "text": "it is you are communicating the state of something in your business logic it could be literally anything uh a",
    "start": "481400",
    "end": "487879"
  },
  {
    "text": "shopping cart or a customers uh status that kind of thing the key is the",
    "start": "487879",
    "end": "493800"
  },
  {
    "text": "coordination I guess we'll probably get into that in a bit but the coordination of those events uh and translating of those events and tolerance that you have",
    "start": "493800",
    "end": "500800"
  },
  {
    "text": "for lost data and that sort of thing um that's really where the Crux of the design of the adventure of an",
    "start": "500800",
    "end": "506560"
  },
  {
    "text": "architecture really uh or most of the time you should spend on such a thing should take place that's normally in my",
    "start": "506560",
    "end": "513320"
  },
  {
    "text": "experience at least that's where most of the time is spent is dealing with kind of like Edge casy failure stuff but yeah",
    "start": "513320",
    "end": "520120"
  },
  {
    "text": "it's asynchronous events sometimes synchronous the receiver really doesn't know where it's coming from they just know that they got a message so that's",
    "start": "520120",
    "end": "527240"
  },
  {
    "text": "kind of that simple okay so as as like a more concrete example in let's say I have a system",
    "start": "527240",
    "end": "533880"
  },
  {
    "text": "where I don't know a user is signing up and paying for a plan and then that sort of unlocks their account what would that",
    "start": "533880",
    "end": "539760"
  },
  {
    "text": "look like in an event- driven system would like you still be talking with services or or would just events be used for certain parts of that you would",
    "start": "539760",
    "end": "546079"
  },
  {
    "text": "definitely not talk to any Services all the services in an event driven system usually utilize some sort of a message",
    "start": "546079",
    "end": "551680"
  },
  {
    "text": "broker like an event bus right so the idea would be that whatever your front-end app is is communicating to a",
    "start": "551680",
    "end": "558680"
  },
  {
    "text": "main BFF like a backend for a frontend backend for a front end receives a request to charge somebody or something",
    "start": "558680",
    "end": "565240"
  },
  {
    "text": "like that or put it in an order and what it's going to do is it's going to just subit a message Mage saying that like hey a new order has come in or something",
    "start": "565240",
    "end": "571959"
  },
  {
    "text": "like that another service let's say a billing service is going to pick up that order because it's listening because it's listening to those messages or for",
    "start": "571959",
    "end": "578640"
  },
  {
    "text": "that you know let's say that routing key it picks up the message does something with it maybe it emits another message",
    "start": "578640",
    "end": "583959"
  },
  {
    "text": "for another service to do something with that message as well but let's say it charges the person and goes to stripe",
    "start": "583959",
    "end": "589160"
  },
  {
    "text": "and does everything then he would emit another message onto the same event bus that the frontend app or like the BFF is",
    "start": "589160",
    "end": "596079"
  },
  {
    "text": "basically listening on as well and says oh it's complete that's essentially it and it can get obviously the more",
    "start": "596079",
    "end": "602600"
  },
  {
    "text": "business logic you have and the more decoupling you're doing you could have you know five Services actually be",
    "start": "602600",
    "end": "608399"
  },
  {
    "text": "working in that you basically build it out as complex as you need depending on what kind of scale you really need as",
    "start": "608399",
    "end": "613720"
  },
  {
    "text": "well right it's it's all growing on of necessity not because it's the proper way to do it or whatever from the get-go",
    "start": "613720",
    "end": "619920"
  },
  {
    "text": "so obviously anybody who's just starting out with you know building an application or just sort of getting a feel for it it's going to seem",
    "start": "619920",
    "end": "626240"
  },
  {
    "text": "intuitively easier to just talk to the services you need um especially because then you'll you'll know that things have",
    "start": "626240",
    "end": "632120"
  },
  {
    "text": "happened so if somebody was considering this event-driven you know architecture what are some of the benefits of doing",
    "start": "632120",
    "end": "638160"
  },
  {
    "text": "that that like might entice them to try it out one of the things is that you'll probably notice immediately depending on",
    "start": "638160",
    "end": "643320"
  },
  {
    "text": "how you've written your service to begin with but one of those things you'll notice immediately is a performance bump you will be able to dispatch these kind",
    "start": "643320",
    "end": "650079"
  },
  {
    "text": "of dog and pony show things in the background and then you you know your UI can can do things to make make the",
    "start": "650079",
    "end": "655440"
  },
  {
    "text": "experience kind of seamless for the user but really what's happening is um you're getting a performance bump from the fact",
    "start": "655440",
    "end": "661720"
  },
  {
    "text": "that you are now asyn dispatching you know hundreds or thousands or even hundreds of thousands of messages",
    "start": "661720",
    "end": "667720"
  },
  {
    "text": "immediately and then the rest of your architecture is kind of delegating those tasks around you know dis to handle the",
    "start": "667720",
    "end": "673920"
  },
  {
    "text": "disposition of those events um whereas you know with a with a synchronous architecture you know restful you know",
    "start": "673920",
    "end": "680639"
  },
  {
    "text": "quests database calls that sort of thing you are Tethered to your IO at that point you really can't escape the",
    "start": "680639",
    "end": "687040"
  },
  {
    "text": "physical reality that you have this IO boundary around your service in my",
    "start": "687040",
    "end": "692279"
  },
  {
    "text": "opinion that's the biggest Advantage there are some other advantages I mean in general the distribution of work but",
    "start": "692279",
    "end": "698040"
  },
  {
    "text": "it also makes it a lot easier to as an organization let's say to create like a common lexicon of types that you can",
    "start": "698040",
    "end": "705920"
  },
  {
    "text": "then work from it kind of forces you if within reason it kind of forces you to",
    "start": "705920",
    "end": "711560"
  },
  {
    "text": "to curate those things properly instead of just kind of willy-nilly throw vents over the fence because you have to",
    "start": "711560",
    "end": "717440"
  },
  {
    "text": "maintain that discipline to then unpack those events uh any observability that you have to worry about any of that",
    "start": "717440",
    "end": "722680"
  },
  {
    "text": "stuff it really forces you to think about how you're communicating across your stack I would say also that uh a",
    "start": "722680",
    "end": "729560"
  },
  {
    "text": "massive benefit from this is you're building a really solid foundation for the future instead of having to like",
    "start": "729560",
    "end": "736360"
  },
  {
    "text": "untether a massive mess from you know at some point in time once your company or",
    "start": "736360",
    "end": "741839"
  },
  {
    "text": "whatever your org is has grown and having to basically try to like having to try to decouple a huge monolith and",
    "start": "741839",
    "end": "749040"
  },
  {
    "text": "so on you already have gone down the right rails right you already are decoupled in the first place and so on",
    "start": "749040",
    "end": "755920"
  },
  {
    "text": "that said just to put in a a slight con even though I love Event Event driven",
    "start": "755920",
    "end": "761040"
  },
  {
    "text": "systems um it's the fact that they are fairly complex so it doesn't necessarily",
    "start": "761040",
    "end": "766440"
  },
  {
    "text": "mean that every startup should be doing event driven there's actually in most cases I would say that they probably should not do event driven for a tiny",
    "start": "766440",
    "end": "773079"
  },
  {
    "text": "startup if you're just doing you know a web shop or something like that maybe it's not necessary however if you you",
    "start": "773079",
    "end": "778959"
  },
  {
    "text": "are planning to build something that has to be high throughput and high scale it totally makes sense to actually get",
    "start": "778959",
    "end": "784480"
  },
  {
    "text": "those foundations right like Steve said I think that that is like one of my number one things that you gain out of",
    "start": "784480",
    "end": "790000"
  },
  {
    "text": "event driven systems is Speed and Performance just a simple fact that there is nothing blocking no you know",
    "start": "790000",
    "end": "796680"
  },
  {
    "text": "any longer as you're inputting some sort of data u i mean you still have kfco or something that's basically buffering all",
    "start": "796680",
    "end": "802199"
  },
  {
    "text": "the stuff behind the scenes but really now you're essentially limited by how fast you're able to write to Kafka and",
    "start": "802199",
    "end": "807959"
  },
  {
    "text": "that is incredible because uh a really simple service all of a sudden instead of just being able to do a th requests a",
    "start": "807959",
    "end": "813800"
  },
  {
    "text": "second can do 100,000 right that's a really big deal but again it depends purely on your use case right like so",
    "start": "813800",
    "end": "820839"
  },
  {
    "text": "what are the goals of the thing that you're building are the goals super high throughput in scalability reliability",
    "start": "820839",
    "end": "827040"
  },
  {
    "text": "that sort of thing or is it just a little tiny you know little tiny side project so a question on that um it kind",
    "start": "827040",
    "end": "834920"
  },
  {
    "text": "of sounds like doing this event driven uh type of system would require either low coordination or induce some kind of",
    "start": "834920",
    "end": "842880"
  },
  {
    "text": "higher latency for coordination if you have to use kofka to talk to another service and you need something back from it you incur the cost of sending things",
    "start": "842880",
    "end": "850440"
  },
  {
    "text": "over Kafka so I guess for either of you would you suggest that you know if you're use case kind of skewed toward",
    "start": "850440",
    "end": "856199"
  },
  {
    "text": "that you avoid event driven or is there some kind of hybrid pattern that you might be able to use where event driven",
    "start": "856199",
    "end": "861639"
  },
  {
    "text": "could help you out I'm going to use the copout answer for most of these kind of nebulous not not even a nebulous",
    "start": "861639",
    "end": "866920"
  },
  {
    "text": "question but the every single one of these questions could be answered with it depends and this is definitely one of",
    "start": "866920",
    "end": "872759"
  },
  {
    "text": "those times like so if I was intren my services I would probably measure the",
    "start": "872759",
    "end": "879639"
  },
  {
    "text": "amount of time it takes to to run that Loop versus like a direct connection and I'd weigh that against the performance",
    "start": "879639",
    "end": "886360"
  },
  {
    "text": "load that it puts on using the event bus versus not using it what that load looks like and basically those decisions those",
    "start": "886360",
    "end": "893920"
  },
  {
    "text": "are engineering decisions based on what you're willing to tolerate in terms of",
    "start": "893920",
    "end": "899240"
  },
  {
    "text": "you know customer experience and that sort of thing so if it was a a transaction let's say where you're",
    "start": "899240",
    "end": "906040"
  },
  {
    "text": "you're making a purchase and your money is involved obviously the tolerance for failure there is really low if not",
    "start": "906040",
    "end": "912959"
  },
  {
    "text": "non-existent whereas if you're just refreshing a page in the user experience side of things that tolerance can go up",
    "start": "912959",
    "end": "920120"
  },
  {
    "text": "a lot higher so you basically have to make those those value judgments there's probably some mathematical formula that",
    "start": "920120",
    "end": "926240"
  },
  {
    "text": "somebody came up with at some point I normally just based it on starting with user experience and work work my way",
    "start": "926240",
    "end": "932519"
  },
  {
    "text": "back what can a user tolerate before they either close the web page or put",
    "start": "932519",
    "end": "938199"
  },
  {
    "text": "your app down I would also mention by the way that uh so first off it depends is a pretty sweet answer because it's",
    "start": "938199",
    "end": "944079"
  },
  {
    "text": "totally true so for me also like when I'm looking at this sort of stuff it",
    "start": "944079",
    "end": "949480"
  },
  {
    "text": "depends on the number of events that you expect in there you know for a particular transaction to take place if",
    "start": "949480",
    "end": "955440"
  },
  {
    "text": "you are expecting there's going to be a 100 events that need to be exchanged well besides the fact that maybe the",
    "start": "955440",
    "end": "960839"
  },
  {
    "text": "like you haven't quite architected it correctly at that point maybe it doesn't quite make sense to do that right at the",
    "start": "960839",
    "end": "967440"
  },
  {
    "text": "same time like if we go down on a slightly like lower level on a technical level the difference between creating a",
    "start": "967440",
    "end": "974040"
  },
  {
    "text": "connection to uh some HTTP service versus a pre-established connection to your event bus is going to be faster on",
    "start": "974040",
    "end": "980839"
  },
  {
    "text": "the event bus 100% of the time always so you creating six connections you know",
    "start": "980839",
    "end": "986160"
  },
  {
    "text": "one after another to various different Serv plus you have like circuit breakers",
    "start": "986160",
    "end": "991360"
  },
  {
    "text": "like histric style circuit breakers or something like that in place it's guaranteed going to be slower than you",
    "start": "991360",
    "end": "997000"
  },
  {
    "text": "emitting events right so I think generally speaking if you're doing like under you know 50 events to like or",
    "start": "997000",
    "end": "1003680"
  },
  {
    "text": "let's say even like under 20 events to like you know to perform some sort of a transaction I think it's fine and it's",
    "start": "1003680",
    "end": "1009319"
  },
  {
    "text": "generally negligible in comparison to like some sort of a restful call right that you're you know sending to some",
    "start": "1009319",
    "end": "1015399"
  },
  {
    "text": "whatever service so can we take a step back one second uh Daniel I know you mentioned that batch works with pretty",
    "start": "1015399",
    "end": "1021279"
  },
  {
    "text": "much any event bus yeah but like dawn on me that everybody listening might not quite know what an event bus is so like",
    "start": "1021279",
    "end": "1027678"
  },
  {
    "text": "at a high level could we just sort of make sure that they're you know on the same page totally yeah an event bus is",
    "start": "1027679",
    "end": "1033678"
  },
  {
    "text": "really just a fancy word for a message broker which is really a fancy word for",
    "start": "1033679",
    "end": "1039199"
  },
  {
    "text": "a queue so Q with different kinds of uh capabilities basically it's a",
    "start": "1039199",
    "end": "1044798"
  },
  {
    "text": "centralized system which accepts messages acces them up and sends them to Consumers right that's essentially it at",
    "start": "1044799",
    "end": "1051280"
  },
  {
    "text": "the core of aveng driven Tech um or aveng driven architectures there's always a message bus and message bus",
    "start": "1051280",
    "end": "1057919"
  },
  {
    "text": "versus event bus like it's synonymous really we've seen as we've built batch we've we've seen people using everything",
    "start": "1057919",
    "end": "1064919"
  },
  {
    "text": "that's the reason we continued building out batch towards the support of all these different systems not because we",
    "start": "1064919",
    "end": "1070240"
  },
  {
    "text": "were a bunch of geniuses who are like oh yeah we need to add support for like this and this no because people were",
    "start": "1070240",
    "end": "1075720"
  },
  {
    "text": "asking for it and we're like all right well you want web sphere cues sure like",
    "start": "1075720",
    "end": "1080840"
  },
  {
    "text": "I've never heard of it but sounds good we'll just add it anyway so yeah people use yeah mqtt and Nats and Kafka and",
    "start": "1080840",
    "end": "1088840"
  },
  {
    "text": "rabbit mq and gcp Pub sub there's like I mean ton of them but really anything",
    "start": "1088840",
    "end": "1094360"
  },
  {
    "text": "that is usable for transmitting a message and it being sent to somewhere else that basically works as an event",
    "start": "1094360",
    "end": "1101120"
  },
  {
    "text": "bus or a message bus awesome thanks and then going back to the discussion you guys were having about performance I",
    "start": "1101120",
    "end": "1107600"
  },
  {
    "text": "know that you've said times that it is definitely faster to use like the event driven system because you can write",
    "start": "1107600",
    "end": "1113559"
  },
  {
    "text": "these events really quickly but I assume that one of the downsides to that means that you write an event but you don't actually know if people have consumed it",
    "start": "1113559",
    "end": "1119600"
  },
  {
    "text": "or done anything with it yet so it's faster in the sense that you write things but I assume you would have this like eventual consistency problem where",
    "start": "1119600",
    "end": "1126960"
  },
  {
    "text": "you can't count on you know things just happening in a certain order is that true absolutely that's a term that I",
    "start": "1126960",
    "end": "1133320"
  },
  {
    "text": "just absolutely love I think that uh eventual consistency in this case you have to be okay and accept eventual",
    "start": "1133320",
    "end": "1140120"
  },
  {
    "text": "consistency into your heart and say that this is okay and I am okay with it at the core of it really is that you have",
    "start": "1140120",
    "end": "1146360"
  },
  {
    "text": "really no guarantees you can add guarantees into it if you want to and can have special acts and so on but in general if you just simply accept the",
    "start": "1146360",
    "end": "1153400"
  },
  {
    "text": "fact that you know that it's eventually going to become consistent it's okay and it's good enough and I think that's a",
    "start": "1153400",
    "end": "1159559"
  },
  {
    "text": "building block for the entire architecture basically you are okay with things just working eventually it's",
    "start": "1159559",
    "end": "1166159"
  },
  {
    "text": "totally possible that things are going to go down and they will not be immediate but that's okay because at some point in time later in the future",
    "start": "1166159",
    "end": "1172640"
  },
  {
    "text": "like let's say like when a service goes down doesn't consume an event it'll come back up and then it'll consume it and",
    "start": "1172640",
    "end": "1177840"
  },
  {
    "text": "the system will become in a correct State again got anything to add Steve I'm surprised you didn't say the I word",
    "start": "1177840",
    "end": "1183559"
  },
  {
    "text": "Dan would you like to say the I word item potency there you go so yeah I mean that's that's the Crux of it right like",
    "start": "1183559",
    "end": "1189679"
  },
  {
    "text": "you know you're firing off a bunch of asynchronous events and they're not guaranteed to be delivered at the same",
    "start": "1189679",
    "end": "1194960"
  },
  {
    "text": "time so you have to make sure that when you read these events that a change that that occurs in event a does not undo the",
    "start": "1194960",
    "end": "1203400"
  },
  {
    "text": "change that occurred in event b or it basically just it's a noop at that point so again it's a design decision you have",
    "start": "1203400",
    "end": "1209919"
  },
  {
    "text": "to kind of incur or or decision you have to make and once you kind of get used to doing that the fear uncertainty and",
    "start": "1209919",
    "end": "1217240"
  },
  {
    "text": "doubt around an event driven system kind of goes down because now you have things like dead letter cues you have things",
    "start": "1217240",
    "end": "1223559"
  },
  {
    "text": "like um event retries that sort of thing to kind of help mitigate these failures that do happen and they happen all the",
    "start": "1223559",
    "end": "1229880"
  },
  {
    "text": "time even in managed architectures like say you know an AWS Cloud environment these things always happen to everybody",
    "start": "1229880",
    "end": "1236760"
  },
  {
    "text": "so you do have to to do things to mitigate that stuff part of it is also right that I mean just the concept of event driven or like even event sourcing",
    "start": "1236760",
    "end": "1243799"
  },
  {
    "text": "in this case is that you're able to replay the events that's part of the reason why we're doing this in the first place is that when there is an outage or",
    "start": "1243799",
    "end": "1250799"
  },
  {
    "text": "something bad happens you can basically take those events and shoot them right back all right and basically and ensure",
    "start": "1250799",
    "end": "1257520"
  },
  {
    "text": "that the system is going to go back into the correct state but it's it's what Steve said like yeah I love to say the",
    "start": "1257520",
    "end": "1263840"
  },
  {
    "text": "word item potency even though I don't know if that's the correct way to pronounce it but anyway so item potency",
    "start": "1263840",
    "end": "1269240"
  },
  {
    "text": "it just needs to be it's it's just a thing that you should build your services with from the get-go and things",
    "start": "1269240",
    "end": "1275000"
  },
  {
    "text": "are going to be okay after that so you you brought up two things one the item potency essentially and you were talking",
    "start": "1275000",
    "end": "1281159"
  },
  {
    "text": "about replaying so I assume that means that you it's uncommon to rely on messages being delivered exactly once or",
    "start": "1281159",
    "end": "1286919"
  },
  {
    "text": "events being delivered exactly once is that pretty true oh yes the snake oil",
    "start": "1286919",
    "end": "1292840"
  },
  {
    "text": "that is exactly once delivery so I believe yeah that um once we have a we",
    "start": "1292840",
    "end": "1298760"
  },
  {
    "text": "come up with a Perpetual emotion machine then yeah that exactly once delivery will also happen it'll be great but",
    "start": "1298760",
    "end": "1304840"
  },
  {
    "text": "until that happens I do not believe in it I have never seen it properly be implemented ever it is doable I guess",
    "start": "1304840",
    "end": "1312120"
  },
  {
    "text": "it's in some really really closed circuits and and like really controlled environments but I mean technically it's",
    "start": "1312120",
    "end": "1319120"
  },
  {
    "text": "still it's very hard to guarantee that if it relies on even electricity so um",
    "start": "1319120",
    "end": "1324400"
  },
  {
    "text": "yeah you should for venten systems you should not rely on exactly once's delivery even if it sounds plausible um",
    "start": "1324400",
    "end": "1330320"
  },
  {
    "text": "you should just not because at some point in time someone is going to Reit a message accidentally twice and then",
    "start": "1330320",
    "end": "1336360"
  },
  {
    "text": "basically you're in a world of hurt so instead just build your systems with item potency in mind that there's a",
    "start": "1336360",
    "end": "1343159"
  },
  {
    "text": "possibility that an event is going to get duplicated if you want to do do duplication on your side go for it if",
    "start": "1343159",
    "end": "1349080"
  },
  {
    "text": "you but like the easiest one is that like have I handled this before yes I have ignore and just move on it's so",
    "start": "1349080",
    "end": "1356200"
  },
  {
    "text": "much easier the logic that's involved in that so so when you talk about handling that what are some techniques that that",
    "start": "1356200",
    "end": "1362840"
  },
  {
    "text": "work well for making things item potent is it just like looking at an event ID of some sort and being like oh I've handled this one or is it something else",
    "start": "1362840",
    "end": "1370240"
  },
  {
    "text": "like are there other techniques that work well time stamps are pretty sweet I like time stamps a lot in the words of",
    "start": "1370240",
    "end": "1375880"
  },
  {
    "text": "Steve it depends it depends on on how important the data set is right so you",
    "start": "1375880",
    "end": "1381240"
  },
  {
    "text": "can absolutely look at timestamps and just basically say if the event that I've already handled has a timestamp in",
    "start": "1381240",
    "end": "1387279"
  },
  {
    "text": "the future right and like and another event that comes in afterwards has got an older timestamp don't worry about the",
    "start": "1387279",
    "end": "1392960"
  },
  {
    "text": "older you know about the older event just dismiss it and similarly every service here can have its own data store",
    "start": "1392960",
    "end": "1399360"
  },
  {
    "text": "as well so that means like you can have your own caches and all kinds of stuff so you can either build it put it in",
    "start": "1399360",
    "end": "1405000"
  },
  {
    "text": "memory and then put like you know like basically keep track of all the messages that you've already handled and so on um",
    "start": "1405000",
    "end": "1410799"
  },
  {
    "text": "keep that stuff either in a cold cache and ETD or inm or wherever in regards to like keeping track of IDs and that sort",
    "start": "1410799",
    "end": "1417159"
  },
  {
    "text": "of thing you could do that but it's generally speaking not really necessary I don't",
    "start": "1417159",
    "end": "1422919"
  },
  {
    "text": "[Music]",
    "start": "1423890",
    "end": "1432000"
  },
  {
    "text": "think this episode is brought to you by our friends at retool rol helps you build internal tools fast fast and easy",
    "start": "1432000",
    "end": "1439080"
  },
  {
    "text": "from startups to Fortune 500s the world's best teams use retool to power their internal apps assemble your app in",
    "start": "1439080",
    "end": "1444720"
  },
  {
    "text": "just a few minutes by dragging and dropping from pre-built components connect to most databases or anything with the rest graphql or grpc API retool",
    "start": "1444720",
    "end": "1453159"
  },
  {
    "text": "empowers you to work with all your data sources seamlessly in one single app retool is highly hackable so you're",
    "start": "1453159",
    "end": "1458720"
  },
  {
    "text": "never limited by what's available out of the box if you can Reddit in JavaScript and an API you can build it in retool",
    "start": "1458720",
    "end": "1465080"
  },
  {
    "text": "you can use their cloud service or host it on Prem for yourself learn more and trap free at ret.com changelog again",
    "start": "1465080",
    "end": "1472360"
  },
  {
    "text": "ret.com",
    "start": "1472360",
    "end": "1475039"
  },
  {
    "text": "changelog so it sounds like generally speaking with an event driven system you do you just naturally get an event log",
    "start": "1480960",
    "end": "1487399"
  },
  {
    "text": "or an audit log of some sort that shows you everything that have happened in your system or is that something you have to build into it that is the",
    "start": "1487399",
    "end": "1493120"
  },
  {
    "text": "awesome part well you'll still need to build some sort of a archiv or of sorts but like in general as an event because",
    "start": "1493120",
    "end": "1500360"
  },
  {
    "text": "the event is the source of truth you're basically getting audit logging for free that's essentially what it comes down to",
    "start": "1500360",
    "end": "1506159"
  },
  {
    "text": "that every single thing that has happened within your system if folks are familiar with like concepts of like",
    "start": "1506159",
    "end": "1512039"
  },
  {
    "text": "change dat to capture that's essentially it where you're basically you're plugging into actually let's roll back",
    "start": "1512039",
    "end": "1517399"
  },
  {
    "text": "change data capture change data capture is basically like you know plugging into a databases replication log watching",
    "start": "1517399",
    "end": "1523919"
  },
  {
    "text": "every single thing that changes if you need like some sort of compliance let's say like sock two or something like that",
    "start": "1523919",
    "end": "1529159"
  },
  {
    "text": "you probably will need that sort of stuff right and you're going to need to set up some sort of a pipeline to actually read all those changes and so",
    "start": "1529159",
    "end": "1535320"
  },
  {
    "text": "on and record them somewhere with event driven it's the same exact thing except there is no database um you have just a",
    "start": "1535320",
    "end": "1542200"
  },
  {
    "text": "message bus so you would basically record every single one of those events and those events are essentially your",
    "start": "1542200",
    "end": "1549480"
  },
  {
    "text": "change data capture you're watching everything that is happened within your system right so you do not need to build yet another system to say like oh now",
    "start": "1549480",
    "end": "1556679"
  },
  {
    "text": "we're going to have audit logging that sort of thing so it absolutely is an audit log with that said you will need",
    "start": "1556679",
    "end": "1561919"
  },
  {
    "text": "to build some things on your own that's part of the reason why we built batch as well is because we didn't want folks to",
    "start": "1561919",
    "end": "1568240"
  },
  {
    "text": "have to build all this stuff on their own whatever on the side so it's a decent size Endeavor but it you totally",
    "start": "1568240",
    "end": "1574600"
  },
  {
    "text": "get a lot of free functionality out of it as well I would imagine at least in my mind that some of the added",
    "start": "1574600",
    "end": "1580000"
  },
  {
    "text": "functionality also comes down to just like making things like seeding a developer database or things like that",
    "start": "1580000",
    "end": "1585919"
  },
  {
    "text": "sound like they'd be a lot easier if really that process is just having a set of events and then sort of running them",
    "start": "1585919",
    "end": "1592000"
  },
  {
    "text": "and it doesn't you you don't have to worry too much about how your system has changed over time or anything those events should still theoretically replay",
    "start": "1592000",
    "end": "1598559"
  },
  {
    "text": "and and get you to the right place so does is this something that ends up improving the developer experience you",
    "start": "1598559",
    "end": "1604320"
  },
  {
    "text": "when we're not in production and we're working locally or how does that I guess how does that affect the developer experience you know building something",
    "start": "1604320",
    "end": "1610440"
  },
  {
    "text": "to me the the ability to replay events uh even though events are supposed to be delivered asynchronously the same batch",
    "start": "1610440",
    "end": "1617960"
  },
  {
    "text": "no pun intended of events being delivered in a let's say a test is really helpful particularly around",
    "start": "1617960",
    "end": "1625279"
  },
  {
    "text": "testing the boundaries of of connected services that are connected via event propagation I'm saying this as a as a",
    "start": "1625279",
    "end": "1631600"
  },
  {
    "text": "consumer of batsh when I'm able to replay a batch of events that I've emitted to the service in let's say an",
    "start": "1631600",
    "end": "1639200"
  },
  {
    "text": "integration test or even even a unit test for that matter it just reduces the amount of work I have to do so for me",
    "start": "1639200",
    "end": "1646120"
  },
  {
    "text": "the biggest positive of Replay is other than auditing it would definitely be for",
    "start": "1646120",
    "end": "1651159"
  },
  {
    "text": "just testing with known inputs there's a a really big piece of event driven so I",
    "start": "1651159",
    "end": "1656919"
  },
  {
    "text": "I mentioned the word event sourcing and it's just basically a sub architecture of event driven and it's actually let me",
    "start": "1656919",
    "end": "1665120"
  },
  {
    "text": "just quickly spell it out so basically in event sourcing the idea is that you're able to utilize the events to",
    "start": "1665120",
    "end": "1672919"
  },
  {
    "text": "essentially build another data source because we are considering the events the source of Truth",
    "start": "1672919",
    "end": "1678120"
  },
  {
    "text": "it basically enables a developer to essentially spin up their own data store",
    "start": "1678120",
    "end": "1683360"
  },
  {
    "text": "utilizing the events right but the data store only is pertinent to the service",
    "start": "1683360",
    "end": "1688919"
  },
  {
    "text": "that they're building so that is incredible so where in the past you would basically let's talk about like a",
    "start": "1688919",
    "end": "1694440"
  },
  {
    "text": "regular architecture you would probably try to create a dump of the previous like some main monolithic database",
    "start": "1694440",
    "end": "1700360"
  },
  {
    "text": "import it into your your own DB and then you know build a feature off of that and now you have a second problem which is",
    "start": "1700360",
    "end": "1705919"
  },
  {
    "text": "like well now my service is either connected to this other DB or I have to keep them somehow in sync that stuff is",
    "start": "1705919",
    "end": "1712240"
  },
  {
    "text": "gone because you're essentially plugging into all the events like the ones that you're interested in say you filter out",
    "start": "1712240",
    "end": "1718159"
  },
  {
    "text": "and say like you know what I know that there's like five billion events in there but I only care about the billing events because I'm the billing service",
    "start": "1718159",
    "end": "1724760"
  },
  {
    "text": "well you basically siphon off only the billing events build up your own data store with just the events and how you",
    "start": "1724760",
    "end": "1731640"
  },
  {
    "text": "know what they actually represent and build the DB as to how your service would be best to utilize it right like",
    "start": "1731640",
    "end": "1738320"
  },
  {
    "text": "how your service could best utilize it I'm glad you answered that one because uh when I was writing the tweets I didn't quite realize the difference",
    "start": "1738320",
    "end": "1745039"
  },
  {
    "text": "between the two so I wrote one that had event sourcing and Chris actually pointed that out to me he's like are we talking about event sourcing today or",
    "start": "1745039",
    "end": "1751399"
  },
  {
    "text": "just event driven so does that answer your question Chris or do you have more no I think that answers my question I",
    "start": "1751399",
    "end": "1758080"
  },
  {
    "text": "think the other thing that's important there too is that there's a distinction between the two a little bit of event",
    "start": "1758080",
    "end": "1763919"
  },
  {
    "text": "sourcing and event driven like you don't have to do event sourcing to do event driven um but and you don't necessarily",
    "start": "1763919",
    "end": "1769760"
  },
  {
    "text": "have to do event driven if you do event sourcing it can be useful on its own um but it's important to not conflate the",
    "start": "1769760",
    "end": "1776559"
  },
  {
    "text": "two or you'll wind up in a really awkward world I think most of the time totally we probably should have started",
    "start": "1776559",
    "end": "1783240"
  },
  {
    "text": "off with that they are extremely similar and they they work with each other as well there's quite a few like these sub",
    "start": "1783240",
    "end": "1789840"
  },
  {
    "text": "architectures there's like curs as well there's like for like there's like Saga patterns that you can utilize and they",
    "start": "1789840",
    "end": "1795880"
  },
  {
    "text": "all kind of work together I just look at it as really event driven is the bigger one that is like an umbrella term that",
    "start": "1795880",
    "end": "1802720"
  },
  {
    "text": "basically encompasses all this other stuff and there's like different ways how you can you know utilize it basically and one of them is like event",
    "start": "1802720",
    "end": "1809240"
  },
  {
    "text": "sourcing so you both mentioned you know replaying you can technically replay events especially if you just want to",
    "start": "1809240",
    "end": "1814320"
  },
  {
    "text": "like see at a database or do some testing in my mind this seems like something that would make a lot of testing simpler because rather than like",
    "start": "1814320",
    "end": "1821080"
  },
  {
    "text": "having to spin six different Services up and make sure they interact correctly you can sort of just it's almost like a",
    "start": "1821080",
    "end": "1826159"
  },
  {
    "text": "unit test where it's like here's input does it emit the event I want it to emit um is that generally what testing ends",
    "start": "1826159",
    "end": "1831600"
  },
  {
    "text": "up looking like totally here's some anecdote time really quick and it was awesome it was it was the first time I",
    "start": "1831600",
    "end": "1837360"
  },
  {
    "text": "ever experienced this like in my entire career where basically when we were building our company and we were",
    "start": "1837360",
    "end": "1843440"
  },
  {
    "text": "building out the architecture for it we didn't actually have a database behind it for the first 6 months I believe",
    "start": "1843440",
    "end": "1850240"
  },
  {
    "text": "everything was so event driven you say that uh all we did is basically just",
    "start": "1850240",
    "end": "1856159"
  },
  {
    "text": "write features admitted events you know had another service consume the event",
    "start": "1856159",
    "end": "1861240"
  },
  {
    "text": "and then we moved on and because you're utilizing some sort of caching because you still need to bootstrap your services right like and you need to keep",
    "start": "1861240",
    "end": "1867840"
  },
  {
    "text": "some sort of state within the service so you we would use CD behind the scenes and we would basically as we you know",
    "start": "1867840",
    "end": "1873919"
  },
  {
    "text": "consume an event and we want to stay say that like oh yeah this event has been consumed or we've done something with",
    "start": "1873919",
    "end": "1879200"
  },
  {
    "text": "this customer save it to at CD service starts back up loads it from etcd and we're back into the same thing so in",
    "start": "1879200",
    "end": "1885960"
  },
  {
    "text": "that particular case and so a database and this the these concepts of having to see the DB and so on they're all",
    "start": "1885960",
    "end": "1892679"
  },
  {
    "text": "basically gone you don't really need to do that sort of stuff so in regards to testing things or whether it's like",
    "start": "1892679",
    "end": "1899519"
  },
  {
    "text": "actually part of your CI and so on yes you're essentially just emitting events you rarely will have to like uh do some",
    "start": "1899519",
    "end": "1906760"
  },
  {
    "text": "sort of DB mocks and so on to actually yeah perform your unit test or integration test so I feel like like",
    "start": "1906760",
    "end": "1912880"
  },
  {
    "text": "this is obviously all great but one of the things that's kind of always in my mind when it comes to event driven stuff",
    "start": "1912880",
    "end": "1918000"
  },
  {
    "text": "is how do you manage a designing the events well and then B kind of updating",
    "start": "1918000",
    "end": "1923519"
  },
  {
    "text": "or changing those events when you like need to add something is it just I I guess what would be your suggestions to",
    "start": "1923519",
    "end": "1929559"
  },
  {
    "text": "people that are getting started off with this because there's you know a number of different paths you can add things to events we can make entirely new events I",
    "start": "1929559",
    "end": "1935039"
  },
  {
    "text": "don't know like what what are your thoughts on that topic my favorite topic let's well almost my favorite topic I",
    "start": "1935039",
    "end": "1940960"
  },
  {
    "text": "don't think it's an unpopular opinion I am 100% in the camp of you should use protuff you should not use anything else",
    "start": "1940960",
    "end": "1947919"
  },
  {
    "text": "you should just use protuff and just call it a day and follow the best guidelines for how to write protuff um",
    "start": "1947919",
    "end": "1953679"
  },
  {
    "text": "schemas protuff is not just for grpc it's great for grpc but really you can",
    "start": "1953679",
    "end": "1958880"
  },
  {
    "text": "use it as a message Envelope as well and all the same patterns that apply to writing good types and so on and how to",
    "start": "1958880",
    "end": "1965120"
  },
  {
    "text": "deprecate them and so on for like when you're writing a grpc service all the same stuff applies still same with you",
    "start": "1965120",
    "end": "1971360"
  },
  {
    "text": "know however your CI pipeline is set up to actually compile your protos same",
    "start": "1971360",
    "end": "1977159"
  },
  {
    "text": "exact thing applies to these schemas as well you use proper tagging you vendor them in your code or whatever basically",
    "start": "1977159",
    "end": "1983360"
  },
  {
    "text": "all the same good practices that you would usually do for grpc you do the same thing for protuff I would just say",
    "start": "1983360",
    "end": "1989080"
  },
  {
    "text": "avoid Json that's like if you do not want to have conflicts that is how you",
    "start": "1989080",
    "end": "1994279"
  },
  {
    "text": "avoid them having something that's strict and I think Steve touched on this like briefly in the beginning uh that",
    "start": "1994279",
    "end": "1999960"
  },
  {
    "text": "basically uh having something that has a a strict schema is the friend here so",
    "start": "1999960",
    "end": "2006679"
  },
  {
    "text": "that nobody can just go out of their way and just willy-nilly add various you",
    "start": "2006679",
    "end": "2012000"
  },
  {
    "text": "know some field or change a type of something and so on if it is uh stamped down such as you know with protuff then",
    "start": "2012000",
    "end": "2019000"
  },
  {
    "text": "it will make everyone's life significantly easier yeah the protuff compiler is just to illustrate what",
    "start": "2019000",
    "end": "2026000"
  },
  {
    "text": "Daniel just said like grpc is just one of so many uses for protuff especially",
    "start": "2026000",
    "end": "2032039"
  },
  {
    "text": "the compiler granted some of the go- code that the protuff compiler generates is pretty ugly but it's also highly",
    "start": "2032039",
    "end": "2039399"
  },
  {
    "text": "performant and it's also uh just really easy to work with Al although it's a bit for Bose but you can write plugins for",
    "start": "2039399",
    "end": "2046120"
  },
  {
    "text": "protuff compiler you can do basically anything based off a common dialect of your abstract syntax tree where you can",
    "start": "2046120",
    "end": "2053320"
  },
  {
    "text": "kind of go in there and assign properties create you know functions that sort of thing I mean it's kind of",
    "start": "2053320",
    "end": "2058638"
  },
  {
    "text": "just a toolkit that you can use to to do anything with and the reason I like using protuff is because it works across",
    "start": "2058639",
    "end": "2066440"
  },
  {
    "text": "several you know stacks and languages and that sort of thing so if on the back end we're writing you know we're writing",
    "start": "2066440",
    "end": "2071638"
  },
  {
    "text": "go code on the front end we're writing you know typescript we can share the same definitions and we don't even",
    "start": "2071639",
    "end": "2076800"
  },
  {
    "text": "necessarily have to share the same entirety of the definition but just a sub slice so you don't expose data to",
    "start": "2076800",
    "end": "2082679"
  },
  {
    "text": "the front end all right write that into the compiler rules right you can just you know expose just enough that the",
    "start": "2082679",
    "end": "2088800"
  },
  {
    "text": "frontend uh experience does what it needs to do but you're still working off the same data definition the same schema",
    "start": "2088800",
    "end": "2095440"
  },
  {
    "text": "so when you when you update the schema and then do all the code gen then you know as long as you're kind of like",
    "start": "2095440",
    "end": "2100920"
  },
  {
    "text": "using proper sver and all that stuff you're going to get that to propagate across all your services including you",
    "start": "2100920",
    "end": "2106680"
  },
  {
    "text": "know clients and that sort of thing and it's just really I don't want to say it's magical because it certainly isn't",
    "start": "2106680",
    "end": "2112000"
  },
  {
    "text": "but it's kind of magical I want to add a quick shout out by the way to intellig up in here okay because uh the intellig",
    "start": "2112000",
    "end": "2119359"
  },
  {
    "text": "Proto plugin is so great it works so well and that is a massive part of the",
    "start": "2119359",
    "end": "2126240"
  },
  {
    "text": "reason why I absolutely love protuff for this because uh it does so much for you",
    "start": "2126240",
    "end": "2132079"
  },
  {
    "text": "like in regards to even like includes of other protos like the schemas that we utilize my company are fairly complex",
    "start": "2132079",
    "end": "2139720"
  },
  {
    "text": "there's I mean tons and tons of different types and they're included back and forth between different places",
    "start": "2139720",
    "end": "2144920"
  },
  {
    "text": "and uh yeah as long as your editor is able to support that stuff it is super",
    "start": "2144920",
    "end": "2150119"
  },
  {
    "text": "awesome and I would say with that's the one thing that you're totally going to miss with Json like almost guaranteed",
    "start": "2150119",
    "end": "2155800"
  },
  {
    "text": "it's you're not going to be able ble to construct really complex schemas you know that are representative of what you",
    "start": "2155800",
    "end": "2161280"
  },
  {
    "text": "actually need you're probably going to cut some corners and then you're going to get bit when you forgot to add a",
    "start": "2161280",
    "end": "2166680"
  },
  {
    "text": "comma somewhere so I feel like this is also a good use case where you could bring in one of the other topic we've",
    "start": "2166680",
    "end": "2172920"
  },
  {
    "text": "had a couple weeks ago of using q and kind of bringing q and Proto Buffs together to help give you some of that",
    "start": "2172920",
    "end": "2178839"
  },
  {
    "text": "you know constraints that you were talking about Steve around like what is valid in a protocol buffer because I've",
    "start": "2178839",
    "end": "2183880"
  },
  {
    "text": "definitely found that Proto Buffs is a great Universal format but it's missing some of that like constraint or required",
    "start": "2183880",
    "end": "2190119"
  },
  {
    "text": "Fields or anything like that and there's good reasons why those things are in there but at some level you need to express those sorts of things I'm a I'm",
    "start": "2190119",
    "end": "2196680"
  },
  {
    "text": "a really big fan of you're referring to Q Lang right like I'm a huge fan of Q Lang unfortunately I just really never",
    "start": "2196680",
    "end": "2203359"
  },
  {
    "text": "had the use case to to switch over to it every time I look at the docs I'm like this is just a really nice way to kind",
    "start": "2203359",
    "end": "2210359"
  },
  {
    "text": "of build out rules without having to uh actually code them yeah it's pretty",
    "start": "2210359",
    "end": "2216960"
  },
  {
    "text": "awesome so for using something like protuff and or Q Lang or anything like that really as far as I can tell it's",
    "start": "2216960",
    "end": "2223440"
  },
  {
    "text": "mostly language agnostic are there any benefits to using like does go bring any",
    "start": "2223440",
    "end": "2228920"
  },
  {
    "text": "benefits to using it in an event driven system over some other language I'll start with this cuz I'm sure we both got",
    "start": "2228920",
    "end": "2235319"
  },
  {
    "text": "opinions here the primary benefit for me are all the concurrency Primitives that are on go in event driven stuff you tend",
    "start": "2235319",
    "end": "2242359"
  },
  {
    "text": "to have to accept an event read something fire off some one off jobs to do something specific you know in the",
    "start": "2242359",
    "end": "2248800"
  },
  {
    "text": "service and so on and being able to spin up a go routine that is cheap and not",
    "start": "2248800",
    "end": "2253960"
  },
  {
    "text": "having to think about threading or how it affects your you know your instance or whatever is pretty awesome from the",
    "start": "2253960",
    "end": "2261160"
  },
  {
    "text": "simple concept of right like uh you're not going to be able to launch a th000 threads or difficult it's going to be",
    "start": "2261160",
    "end": "2267599"
  },
  {
    "text": "very difficult to launch a th threads uh in Java and expect that everything's going to work great whereas in go you",
    "start": "2267599",
    "end": "2274800"
  },
  {
    "text": "really don't even think about the concept that like oh man I'm going to have to spin up 500 of these so that is",
    "start": "2274800",
    "end": "2280359"
  },
  {
    "text": "super awesome um and from the perspective of protuff protuff the syntax itself is so similar to go and",
    "start": "2280359",
    "end": "2289040"
  },
  {
    "text": "the type system is Works still the same way as well even the dreaded like false",
    "start": "2289040",
    "end": "2295240"
  },
  {
    "text": "SL whatever the default false is there there's very little surprises in any of",
    "start": "2295240",
    "end": "2300280"
  },
  {
    "text": "it it works very similarly between how you would write go and how you would actually write the schemas themselves so",
    "start": "2300280",
    "end": "2305920"
  },
  {
    "text": "and the tool say itself it just works extremely well with goang yeah I think that's it's a fantastic package for it",
    "start": "2305920",
    "end": "2312400"
  },
  {
    "text": "and the fact that I mean go is so incredibly simple to get bootstrapped into um to like I mean start developing",
    "start": "2312400",
    "end": "2319680"
  },
  {
    "text": "in this language it is fantastic for building tiny Services quickly",
    "start": "2319680",
    "end": "2326040"
  },
  {
    "text": "regardless of the architecture whether it's like event driven or whatever else it doesn't take very much one last part",
    "start": "2326040",
    "end": "2331200"
  },
  {
    "text": "is also the quality of the libraries that's a really big deal the quality of the libraries and go uh for event bus",
    "start": "2331200",
    "end": "2338319"
  },
  {
    "text": "like for message buses is really great like the quality is quite high as a",
    "start": "2338319",
    "end": "2343400"
  },
  {
    "text": "result of working on this tool called plumber we basically have had to interface with pretty much every event",
    "start": "2343400",
    "end": "2349160"
  },
  {
    "text": "bus Under the Sun and it is written in go and we use the basically the library",
    "start": "2349160",
    "end": "2355920"
  },
  {
    "text": "that has most of the stars and they always work really really well even in",
    "start": "2355920",
    "end": "2361920"
  },
  {
    "text": "production as well so quick side note then for Kafka uh there's a the segment library and it works fantastic it is",
    "start": "2361920",
    "end": "2370280"
  },
  {
    "text": "absolutely an excellent library and the same way with for all the other main message buses uh it's the ones which are",
    "start": "2370280",
    "end": "2377680"
  },
  {
    "text": "fairly popular are the ones that work really well that's basically it yeah just to to add on to that like what",
    "start": "2377680",
    "end": "2383920"
  },
  {
    "text": "makes go I think a really good language for an advent driven system just you know to Echo what Daniel just said is",
    "start": "2383920",
    "end": "2390920"
  },
  {
    "text": "the concurrency Primitives in the language itself for me others may feel this way others may not but for me it's",
    "start": "2390920",
    "end": "2397839"
  },
  {
    "text": "really easy to transition my thinking from the event bus to the language",
    "start": "2397839",
    "end": "2404440"
  },
  {
    "text": "because I can think in go routines if that even makes any sense like I can think about I can reason about the",
    "start": "2404440",
    "end": "2409960"
  },
  {
    "text": "events being accepted into the system a lot easier than if I were to have to",
    "start": "2409960",
    "end": "2415119"
  },
  {
    "text": "create a thread and then manage its life cycle whereas in a go routine I mean you get you have to know how your go",
    "start": "2415119",
    "end": "2420960"
  },
  {
    "text": "routines end obviously but it's a lot easier it's just a lot easier and a lot less of overhead to to worry about so",
    "start": "2420960",
    "end": "2428800"
  },
  {
    "text": "for me at least that's that's one of the big because I I only have so much space available up here uh and the less I have",
    "start": "2428800",
    "end": "2434839"
  },
  {
    "text": "to think about managing threads the [Music]",
    "start": "2434839",
    "end": "2450440"
  },
  {
    "text": "better lenot is simple affordable and accessible cloud computing the developers Trust Leno is our cloud of",
    "start": "2450440",
    "end": "2457599"
  },
  {
    "text": "choice we trust them and we think you should build anything you're working on a fun side project or that next big infr",
    "start": "2457599",
    "end": "2464000"
  },
  {
    "text": "move it work with lenoe the best part you can get started on Leno with $100 in free credit get all the details at",
    "start": "2464000",
    "end": "2469760"
  },
  {
    "text": "lin.com changelog or text change log to 474747 and get instant access to that",
    "start": "2469760",
    "end": "2476640"
  },
  {
    "text": "$100 free credit again lin.com",
    "start": "2476640",
    "end": "2480880"
  },
  {
    "text": "[Music] changelog [Music]",
    "start": "2481940",
    "end": "2494150"
  },
  {
    "text": "so a follow-up question then I guess a lot of our listeners tend to be people who are learning go or who are sometimes",
    "start": "2494359",
    "end": "2500920"
  },
  {
    "text": "new to programming or or maybe they're even expert developers but they just haven't touched something like this so",
    "start": "2500920",
    "end": "2506839"
  },
  {
    "text": "what would you recommend like do you have any recommendations you give to people if they want to build like a starter project using event driven um",
    "start": "2506839",
    "end": "2514240"
  },
  {
    "text": "because I'm guessing they probably don't want to go build a production system first sh shot maybe but seems scary all",
    "start": "2514240",
    "end": "2520760"
  },
  {
    "text": "right I'm going to give it a shot so I'm G to put some sub opinions here this is definitely opinion time this is not the",
    "start": "2520760",
    "end": "2527400"
  },
  {
    "text": "definitive way to do this but um throughout my career I have basically come to Preferred setup of this sort of",
    "start": "2527400",
    "end": "2533839"
  },
  {
    "text": "stuff I will talk about the production side of things first just to like say just to keep that out there but",
    "start": "2533839",
    "end": "2538920"
  },
  {
    "text": "basically I think production setup would consist of Kafka and that would be",
    "start": "2538920",
    "end": "2544280"
  },
  {
    "text": "utilized for highr put messaging and I would utilize something else like let's say rabbit rabbitmq for",
    "start": "2544280",
    "end": "2551839"
  },
  {
    "text": "facilitating actual inner service communication right like inter service communication so and the reason being is",
    "start": "2551839",
    "end": "2557960"
  },
  {
    "text": "that Kafka is incredibly fast but it's kind of a beast and to try to set it up",
    "start": "2557960",
    "end": "2564040"
  },
  {
    "text": "and to even write a consumer and a producer for and go for it um might be complicated also on top of it it doesn't",
    "start": "2564040",
    "end": "2570640"
  },
  {
    "text": "have a whole lot of routing capabilities like you cannot say that I want this type of message but I don't want this type of message or or based on headers",
    "start": "2570640",
    "end": "2577079"
  },
  {
    "text": "or based on uh the routing key that is being used for writing the stuff I would choose rabbit for that sort of stuff for",
    "start": "2577079",
    "end": "2583480"
  },
  {
    "text": "somebody who's starting right out basically just rabbit rabbit and Proto buff that's essentially all you would",
    "start": "2583480",
    "end": "2588800"
  },
  {
    "text": "need to be able to start building this sort of a system out I would take care though to learn about all the different",
    "start": "2588800",
    "end": "2595559"
  },
  {
    "text": "capabilities that rabbit actually has in regards to the sort of like complex routing mechanisms you can come up with",
    "start": "2595559",
    "end": "2602559"
  },
  {
    "text": "because it will 100% influence your architecture your software AR Ure itself there is a lot of stuff that I have even",
    "start": "2602559",
    "end": "2609079"
  },
  {
    "text": "learned several years after like running rabbit in production and realizing that",
    "start": "2609079",
    "end": "2614480"
  },
  {
    "text": "oh my God I could have done it this way and that would have saved on so much complexity you know like maybe like a",
    "start": "2614480",
    "end": "2620559"
  },
  {
    "text": "you know some sort of a delivery pattern where it only reaches one specific service under some specific you know",
    "start": "2620559",
    "end": "2626240"
  },
  {
    "text": "conditions whatever yeah and then another piece I think I I mentioned a little bit earlier is ETD I am a massive",
    "start": "2626240",
    "end": "2633319"
  },
  {
    "text": "fan of it because you could use for cold cach obviously you could use something like reddis but the idea is that you",
    "start": "2633319",
    "end": "2640200"
  },
  {
    "text": "want to utilize components that are scalable right that hopefully are distributed and hopefully can",
    "start": "2640200",
    "end": "2646480"
  },
  {
    "text": "horizontally scale SCD is one of them it can totally scale horizontally um you",
    "start": "2646480",
    "end": "2652119"
  },
  {
    "text": "can and it's extremely resilient to uh to latency issues as well so uh it makes",
    "start": "2652119",
    "end": "2657960"
  },
  {
    "text": "I think especially now that it also has grpc transports as well inside of it um it makes a fantastic use case for just",
    "start": "2657960",
    "end": "2665040"
  },
  {
    "text": "using it as a caching layer as well so maybe somebody who's starting out doesn't need a catching layer but if",
    "start": "2665040",
    "end": "2670880"
  },
  {
    "text": "you're doing something production level then now I'd say it makes sense I would say and this is probably not a even",
    "start": "2670880",
    "end": "2677440"
  },
  {
    "text": "though we're not on that segment yet not a very popular opinion I would advise people learning event propagation",
    "start": "2677440",
    "end": "2684640"
  },
  {
    "text": "specifically to not rely so much on all",
    "start": "2684640",
    "end": "2690000"
  },
  {
    "text": "the stuff that a library gives you let's say but just focus on the wire protocol",
    "start": "2690000",
    "end": "2695839"
  },
  {
    "text": "like like like think about how things look going over the wire which is why etcd is actually really ETD is super",
    "start": "2695839",
    "end": "2702000"
  },
  {
    "text": "lightweight like ETD is fast it's lightweight it's very simple so mqtt is the same way they're very uh easy and uh",
    "start": "2702000",
    "end": "2710119"
  },
  {
    "text": "they're very easy to understand because I think you need to understand exactly how messages are communicated across the",
    "start": "2710119",
    "end": "2715559"
  },
  {
    "text": "wire you don't necessarily need to know that in order to to write the system but you you should understand how they're",
    "start": "2715559",
    "end": "2721880"
  },
  {
    "text": "propagated what the actual protocol looks like and then you can kind of step back in into bigger and bigger you",
    "start": "2721880",
    "end": "2728839"
  },
  {
    "text": "know Realms of functionality but I really truly believe that starting out you should try to just stay as close to",
    "start": "2728839",
    "end": "2734319"
  },
  {
    "text": "the metal as possible and even if it's a toy uh implementation I mean that's how",
    "start": "2734319",
    "end": "2740200"
  },
  {
    "text": "I learn so I think others may be the same way I know some people just like to use the tools I think that's a great",
    "start": "2740200",
    "end": "2745559"
  },
  {
    "text": "point because like mqtt is incredibly simple there's really nothing to it I",
    "start": "2745559",
    "end": "2750599"
  },
  {
    "text": "would agree with that totally start out with just actually understanding the simple transaction of I emitted a",
    "start": "2750599",
    "end": "2756079"
  },
  {
    "text": "message and somebody else consumed a message and then from there on you can go on further or whatever so um my point",
    "start": "2756079",
    "end": "2762520"
  },
  {
    "text": "about rabbit really is is just the fact that um I've been in that boat before where I have written something and they",
    "start": "2762520",
    "end": "2768400"
  },
  {
    "text": "utilized rabbit for something and I had to architect around the problem and come",
    "start": "2768400",
    "end": "2773559"
  },
  {
    "text": "up with a Crazy Design only to later find out that like oh it supports this",
    "start": "2773559",
    "end": "2779520"
  },
  {
    "text": "fantastic feature and I could have routed messages in this in this you know Manner and I wouldn't have needed all",
    "start": "2779520",
    "end": "2785000"
  },
  {
    "text": "this like crazy complexity around it so that's just a general word of caution that like that sort of stuff needs to be",
    "start": "2785000",
    "end": "2790880"
  },
  {
    "text": "figured out like there's not a whole lot you need to learn about mqtt you put a message in you take it out like that's",
    "start": "2790880",
    "end": "2796480"
  },
  {
    "text": "what you need to learn about it really that's it um and then but if you use like more complex um message buses like",
    "start": "2796480",
    "end": "2804160"
  },
  {
    "text": "rabbit then you you should probably look into it because there's all kinds of different paradigms",
    "start": "2804160",
    "end": "2810880"
  },
  {
    "text": "so unpopular opinion",
    "start": "2811680",
    "end": "2817800"
  },
  {
    "text": "popular [Music]",
    "start": "2820599",
    "end": "2825680"
  },
  {
    "text": "opinion I'll just go first it's probably unpopular I think so at least but um I",
    "start": "2825680",
    "end": "2830880"
  },
  {
    "text": "am super super against continuous deployment I cannot stand the concept of",
    "start": "2830880",
    "end": "2836559"
  },
  {
    "text": "it and I've seen it break so many different things at the worst possible",
    "start": "2836559",
    "end": "2842480"
  },
  {
    "text": "times as well um so I'm a huge proponent instead of owning your deployments and",
    "start": "2842480",
    "end": "2848640"
  },
  {
    "text": "like owning your deploys and considering marking a ticket that's done truly when",
    "start": "2848640",
    "end": "2854280"
  },
  {
    "text": "it is actually done means it is deployed into production and it shouldn't be thrown over the wall it should be your",
    "start": "2854280",
    "end": "2861559"
  },
  {
    "text": "responsibility to actually deploy this thing so yeah gone to Great Lengths to",
    "start": "2861559",
    "end": "2867000"
  },
  {
    "text": "Institute that at various different organizations and then be generally hated but that's okay so to make sure",
    "start": "2867000",
    "end": "2873359"
  },
  {
    "text": "I'm understanding this correctly you're okay with continuous integration for testing and that sort of stuff you just don't like the deployment aspect yeah",
    "start": "2873359",
    "end": "2879480"
  },
  {
    "text": "totally that's exactly it like I think that absolutely there needs to be CI and your CI pipeline can also build like",
    "start": "2879480",
    "end": "2886400"
  },
  {
    "text": "should actually build the artifacts and so on as well for for additional testing or whatever but ultimately when you're",
    "start": "2886400",
    "end": "2893480"
  },
  {
    "text": "perform when you click that merge button in GitHub um it can totally kick off",
    "start": "2893480",
    "end": "2898520"
  },
  {
    "text": "something like some sort of CI that's also now going to build the artifact and push it to like I don't know Docker Hub",
    "start": "2898520",
    "end": "2903720"
  },
  {
    "text": "or whatever some GitHub registry but the deployment part itself should be actually um manual to some degree like",
    "start": "2903720",
    "end": "2911240"
  },
  {
    "text": "right like and I'm not talking about 15 Steps with a run book or whatever how to deploy stuff it should still be a make",
    "start": "2911240",
    "end": "2916359"
  },
  {
    "text": "deploy you know make deploy Dev or something like that but that should ultimately just be essentially a",
    "start": "2916359",
    "end": "2921800"
  },
  {
    "text": "kubernetes deployment right like you're just like Cube CTL deploy ammo basically",
    "start": "2921800",
    "end": "2927359"
  },
  {
    "text": "which is pointing to the latest you know Docker image or something like that I don't really have a strong opinion one way or the other here so I can't really",
    "start": "2927359",
    "end": "2934640"
  },
  {
    "text": "the thing that I've seen in the past uh throughout like my career is that basically the deployment part has been",
    "start": "2934640",
    "end": "2940920"
  },
  {
    "text": "basically treated like the sr/ devops part which is like or like a QA type of",
    "start": "2940920",
    "end": "2946119"
  },
  {
    "text": "thing where it's like well we created this functionality throw it over the wall to QA and QA is going to figure it",
    "start": "2946119",
    "end": "2952359"
  },
  {
    "text": "out and see what's happening throw it back over the wall then Dev where you know the devs are going to say oh that's",
    "start": "2952359",
    "end": "2958079"
  },
  {
    "text": "not totally right throw it back over the wall you know it's QA same exact thing here you own the thing you built it you",
    "start": "2958079",
    "end": "2964760"
  },
  {
    "text": "know how it works you know how it should be interacting and how it should respond and so on and you are the best person to",
    "start": "2964760",
    "end": "2970319"
  },
  {
    "text": "see it to its conclusion essentially I don't know if this is an unpopular opinion as well but like basically if",
    "start": "2970319",
    "end": "2976200"
  },
  {
    "text": "it's in master or in main or whatever then that is what should be deployed",
    "start": "2976200",
    "end": "2981960"
  },
  {
    "text": "right that that is what should be actually running in Dev and in uh in production so I forget what project it",
    "start": "2981960",
    "end": "2987799"
  },
  {
    "text": "was but i' I've actually seen like taking what you just said there about master being what should be running in production i' I've seen some app like a",
    "start": "2987799",
    "end": "2994599"
  },
  {
    "text": "couple open source code Bas is that take of the weirder approach of Master doesn't necessarily always compile and",
    "start": "2994599",
    "end": "3001400"
  },
  {
    "text": "like basically if it's not a version to release it's not really expected it and that one always threw me off um cuz I'm",
    "start": "3001400",
    "end": "3007200"
  },
  {
    "text": "kind of in the same mindset of you is is Master should be something that anybody could grab and it should work and we should be good to go yeah yes 100% it",
    "start": "3007200",
    "end": "3016200"
  },
  {
    "text": "should work nobody should be expected to go into tags and start looking for like oh let me find that the I know how your",
    "start": "3016200",
    "end": "3022920"
  },
  {
    "text": "project works it probably uses the stable tag right God forbid they use the incorrect tag which is actually like",
    "start": "3022920",
    "end": "3029000"
  },
  {
    "text": "minor numbers means unstable like or you know no I don't need to figure any of that stuff out I just want to go grab",
    "start": "3029000",
    "end": "3034680"
  },
  {
    "text": "master and make it work anyway I feel like part of that's also built into the go Community since for so long like",
    "start": "3034680",
    "end": "3041040"
  },
  {
    "text": "Master is what Gog get would get so if Master doesn't work then no one's going to use your library because it's broken",
    "start": "3041040",
    "end": "3047240"
  },
  {
    "text": "all the time uh and and maybe that wasn't such a bad thing maybe that was actually a really good thing for us as a",
    "start": "3047240",
    "end": "3053119"
  },
  {
    "text": "community it taught us some good skills MH agreed I will definitely say that get branching and how people decide to do",
    "start": "3053119",
    "end": "3058680"
  },
  {
    "text": "that is something that I don't know if I've ever quite been at companies that all do it exactly the same now granted I",
    "start": "3058680",
    "end": "3064920"
  },
  {
    "text": "haven't been to a ton of different companies and I've worked for myself a lot more but I I've definitely seen",
    "start": "3064920",
    "end": "3069960"
  },
  {
    "text": "different companies all do it differently so it's sometimes interesting to see the reasoning behind it but yeah as far as continuous deployment goes I have no strong",
    "start": "3069960",
    "end": "3076839"
  },
  {
    "text": "opinions one way or the other I feel like in most of my projects a huge chunk of my career has been on very very small",
    "start": "3076839",
    "end": "3082400"
  },
  {
    "text": "teams where you're pretty much responsible for everything regardless so I completely relate with that and I",
    "start": "3082400",
    "end": "3088000"
  },
  {
    "text": "haven't really had a lot of experience on the other side where you have the opportunity to throw it over the wall maybe if I had the chance I'd love to",
    "start": "3088000",
    "end": "3093680"
  },
  {
    "text": "try it oh totally that's exactly what happens like it gets thrown over the wall and I mean usually like there is",
    "start": "3093680",
    "end": "3100680"
  },
  {
    "text": "going to be a Dev that still sees that like oh it shipped or whatever but it's going to something is going to break at",
    "start": "3100680",
    "end": "3106640"
  },
  {
    "text": "the most inopportune time at like 2: a.m. on a Thursday and it's going to be",
    "start": "3106640",
    "end": "3111920"
  },
  {
    "text": "some SRE dealing with this thing and not realizing that you know that this particular Dev is responsible for it",
    "start": "3111920",
    "end": "3118040"
  },
  {
    "text": "right because like they didn't test that particular Edge case you know or that sort of a thing so um yeah this is just",
    "start": "3118040",
    "end": "3124000"
  },
  {
    "text": "it's an ownership thing and I think that also we've gotten very used to the concept now of automating everything",
    "start": "3124000",
    "end": "3131040"
  },
  {
    "text": "because automating something even I don't know six or seven years ago um you needed to have a decent skill set right",
    "start": "3131040",
    "end": "3138599"
  },
  {
    "text": "to like be able to automate stuff in the first place you needed to be a programmer of some sorts and be able to do that sort of stuff and now um I think",
    "start": "3138599",
    "end": "3145880"
  },
  {
    "text": "every Sr is expected to be able to write code essentially right so um we have",
    "start": "3145880",
    "end": "3151079"
  },
  {
    "text": "this ability now to say like well everything can be automated everywhere and I guess what I'm saying is that not",
    "start": "3151079",
    "end": "3156880"
  },
  {
    "text": "everything should be automated this reminds me of I swear I",
    "start": "3156880",
    "end": "3162079"
  },
  {
    "text": "read an article about GitHub how they use some sort of Bot or something where basically developers would pretty much",
    "start": "3162079",
    "end": "3168480"
  },
  {
    "text": "deploy a branch to production verify things worked and then that's when it would get merged into master I think but",
    "start": "3168480",
    "end": "3175040"
  },
  {
    "text": "I I remember reading some article about their deploy process CU it was a like on one hand it looked rather chaotic cuz I'm like they have a lot of Engineers",
    "start": "3175040",
    "end": "3181240"
  },
  {
    "text": "and if they're all deploying things and verifying they work that sounds slightly scary but at the same time it the",
    "start": "3181240",
    "end": "3187640"
  },
  {
    "text": "ownership aspect of it I definitely agree with is you know having somebody actually verify their stuff when they",
    "start": "3187640",
    "end": "3193559"
  },
  {
    "text": "deploy it I think ownership that's a fantastic word for it uh it is proper",
    "start": "3193559",
    "end": "3198720"
  },
  {
    "text": "production level service ownership that's really what it's about right like you owning the the service from the",
    "start": "3198720",
    "end": "3204079"
  },
  {
    "text": "beginning to the end you're owning its dependencies you're owning everything for it right including even its CI",
    "start": "3204079",
    "end": "3210680"
  },
  {
    "text": "process and it's like if it has a CD process you should own that too every you're owning everything all right Steve",
    "start": "3210680",
    "end": "3217160"
  },
  {
    "text": "do you have an unpopular opinion you'd like to share oh man yeah I I shared this with Dan yesterday and he he didn't",
    "start": "3217160",
    "end": "3223960"
  },
  {
    "text": "like it at all so I'm pretty sure this is unpopular I think the overuse of er e",
    "start": "3223960",
    "end": "3229359"
  },
  {
    "text": "r r as an error variable I I think it makes code harder to read I really do now there's a lot of",
    "start": "3229359",
    "end": "3237040"
  },
  {
    "text": "you know a lot of guardrails around that statement I mean obviously you shouldn't be writing 200 300 line functions I",
    "start": "3237040",
    "end": "3243880"
  },
  {
    "text": "don't know I think the error should in some way describe what it the error actually is even if you put like a m or",
    "start": "3243880",
    "end": "3251359"
  },
  {
    "text": "G in front of it I I don't know I see the ReUse of R too much and I don't know",
    "start": "3251359",
    "end": "3256960"
  },
  {
    "text": "to me it just makes code a little harder to read as a corollary to that I think there's another part of the language",
    "start": "3256960",
    "end": "3263720"
  },
  {
    "text": "that people don't use and that is naked braces you know you just have two mustache braces and then to me like I",
    "start": "3263720",
    "end": "3271880"
  },
  {
    "text": "look at the code and I can just totally read it a lot cleaner even though it does some some things with scope as well",
    "start": "3271880",
    "end": "3277880"
  },
  {
    "text": "it just makes things a lot easier to read so an old guy like me with failing eyes it's it's really hard for me to to",
    "start": "3277880",
    "end": "3284359"
  },
  {
    "text": "kind of figure out where that error began you know I'm I just can't so just",
    "start": "3284359",
    "end": "3289559"
  },
  {
    "text": "give it a better name that's my opinion I will definitely say that the error variable is one of those things where I",
    "start": "3289559",
    "end": "3295880"
  },
  {
    "text": "feel like as I've had more experience with it it'd be weird not seeing that as the variable name not saying it would necessarily be worse but it just would",
    "start": "3295880",
    "end": "3302359"
  },
  {
    "text": "throw me off at first cuz I'm just so used to seeing that and I definitely get that throughout the life cycle of a",
    "start": "3302359",
    "end": "3308839"
  },
  {
    "text": "program like it's kind of hard to like basically that that's the one that gets reused like by far the most throughout a",
    "start": "3308839",
    "end": "3314880"
  },
  {
    "text": "program so I get that aspect of it I don't know I'd almost have to see an alternative approach before I could even",
    "start": "3314880",
    "end": "3321440"
  },
  {
    "text": "like give any sort of feedback I think and like you mentioning the naked braces is to me i' I've never found a use for",
    "start": "3321440",
    "end": "3330000"
  },
  {
    "text": "them that I liked so I'd love to see how you use them sometime like what you",
    "start": "3330000",
    "end": "3335200"
  },
  {
    "text": "examples I mostly use them in Te in in tests actually okay if I want to you know I create kind of like this",
    "start": "3335200",
    "end": "3341359"
  },
  {
    "text": "reference variable at the top and then I just can or sorry I can do a lot of copy paste in a test and I have to worry",
    "start": "3341359",
    "end": "3347920"
  },
  {
    "text": "about redeclaring or or the compiler yelling at me for redeclaring a variable so it's it's more out of laziness but it",
    "start": "3347920",
    "end": "3353520"
  },
  {
    "text": "also makes it easier to read like it's almost like a stanza in a poem you know you can very clearly understand okay",
    "start": "3353520",
    "end": "3359559"
  },
  {
    "text": "this is a very specific block of functionality versus you know just a several lines of non-con it doesn't get",
    "start": "3359559",
    "end": "3366720"
  },
  {
    "text": "used very often I forgot that that functionality even exists I've been doing go for like seven years literally",
    "start": "3366720",
    "end": "3373079"
  },
  {
    "text": "I'm getting like pings of like reading somewhere with this is a thing and now",
    "start": "3373079",
    "end": "3378680"
  },
  {
    "text": "now I know there is somebody they added this feature for you Steve just for me",
    "start": "3378680",
    "end": "3384240"
  },
  {
    "text": "just for me I've heard people talk about it in the past and every time I've like never really seen a good concrete",
    "start": "3384240",
    "end": "3389680"
  },
  {
    "text": "example of it so maybe I'll have to bug you later and ask for an example Steve that we can share with our audience cuz",
    "start": "3389680",
    "end": "3394880"
  },
  {
    "text": "yeah absolutely it's definitely something I'd love to see more examples of because I've seen enough people mention it that I'm like I'm curious how",
    "start": "3394880",
    "end": "3401039"
  },
  {
    "text": "it's helping them but I I for whatever reason my brain just hasn't quite made that mental leap to figure out where I",
    "start": "3401039",
    "end": "3406640"
  },
  {
    "text": "might use it I think on the eror thing as well I like reusing error like I",
    "start": "3406640",
    "end": "3412119"
  },
  {
    "text": "don't like having to come up with like new names for errors but I also feel like errors have become a sort of half",
    "start": "3412119",
    "end": "3417200"
  },
  {
    "text": "fulfilled promise in go cuz Rob Pike was really big on like errors are values they they are not something different",
    "start": "3417200",
    "end": "3423039"
  },
  {
    "text": "they're not something separate that is why we don't have exceptions or like this separate class of way of handling",
    "start": "3423039",
    "end": "3428079"
  },
  {
    "text": "errors there are values you should treat them as values and we as a community just never really followed all the way",
    "start": "3428079",
    "end": "3435280"
  },
  {
    "text": "through with that we're like okay yeah they're like their values they're like in there but we don't treat them like all of the other values who still have",
    "start": "3435280",
    "end": "3441720"
  },
  {
    "text": "this like it's a special value and I think that allows us to have this laziness around naming it cuz it's just",
    "start": "3441720",
    "end": "3447960"
  },
  {
    "text": "like oh it's a special thing it's fine if you just always call it ER you don't have to call it something something else but we we wouldn't do that with other",
    "start": "3447960",
    "end": "3455440"
  },
  {
    "text": "types of values and go because it it would wind up making our code harder to read so I think I like half agree with",
    "start": "3455440",
    "end": "3461920"
  },
  {
    "text": "you even though I'm like I don't see the problem with with errors I can see how that is a sort of annoying thing and",
    "start": "3461920",
    "end": "3467880"
  },
  {
    "text": "like an inconsistency in in the code that we wind up writing oh and I admittedly I",
    "start": "3467880",
    "end": "3474160"
  },
  {
    "text": "mean if I'm in a codebase where that's being done I just go with the flow so I I don't well most of the time I just go",
    "start": "3474160",
    "end": "3480720"
  },
  {
    "text": "with the flow because I don't want to be the one to you know push my preferences on other people even though uh it does",
    "start": "3480720",
    "end": "3486839"
  },
  {
    "text": "take me another hot second to figure out where that error started so another you know interestingly enough uh context is",
    "start": "3486839",
    "end": "3493640"
  },
  {
    "text": "is the opposite like to me context you know CTX everybody uses CTX for context",
    "start": "3493640",
    "end": "3498920"
  },
  {
    "text": "to me you should never use anything else because just by the design of context",
    "start": "3498920",
    "end": "3504280"
  },
  {
    "text": "it's just one wrapped context after another so if you're creating a logger context or a trace context that kind of",
    "start": "3504280",
    "end": "3510160"
  },
  {
    "text": "thing just keep it because then you know it'll it'll just propagate through your your code you don't have to worry about",
    "start": "3510160",
    "end": "3515440"
  },
  {
    "text": "oh is this a child context that doesn't belong to its parent to this parent over here kind of thing so the difference to",
    "start": "3515440",
    "end": "3522400"
  },
  {
    "text": "me is is Kind of Night and Day versus errors like context is something where I feel like there's one like there's only",
    "start": "3522400",
    "end": "3528359"
  },
  {
    "text": "one and you generally only get it from one place it's not like you're getting contacts from two different sources and like dealing with I've at least never",
    "start": "3528359",
    "end": "3533839"
  },
  {
    "text": "seen code where you get two contexts and somehow have to manage both of them whereas like the error does technically",
    "start": "3533839",
    "end": "3540760"
  },
  {
    "text": "come from multiple different places and Chris when you were talking about like naming them as variables I the one thing that popped in my head is I I wonder if",
    "start": "3540760",
    "end": "3548200"
  },
  {
    "text": "you would even be able to get code accepted that doesn't have ER r in it somewhere even if it was like you know",
    "start": "3548200",
    "end": "3553720"
  },
  {
    "text": "like thing err or something you know sort of describing what the erir was like people would probably be fine with that but if you just like named it",
    "start": "3553720",
    "end": "3560039"
  },
  {
    "text": "something else I don't know if people would let that fly whereas like if you have a map of people it's not like",
    "start": "3560039",
    "end": "3566039"
  },
  {
    "text": "people map it's you just call it people or something like it is a special case where people don't want to not have the",
    "start": "3566039",
    "end": "3571160"
  },
  {
    "text": "word air in it even if they are willing to just not use air yeah some of these idioms are just totally organic like",
    "start": "3571160",
    "end": "3577319"
  },
  {
    "text": "that's one of them you know that just it's what everybody does and we're stuck it's a it's a weird dichotomy too",
    "start": "3577319",
    "end": "3582880"
  },
  {
    "text": "because as uh a group I've noticed that most software Engineers don't actually like dealing with conflict and error",
    "start": "3582880",
    "end": "3589440"
  },
  {
    "text": "handling it's just like people would just rather ignore it so they're like oh I'm just going to like like relegate it",
    "start": "3589440",
    "end": "3595720"
  },
  {
    "text": "over here but I'm going to be mad if you like kind of build it into the actual flow of everything as if like if errors",
    "start": "3595720",
    "end": "3601520"
  },
  {
    "text": "weren't there people would be like where is all the problems that go wrong and it's like well there's a lot of different classes of ways that think",
    "start": "3601520",
    "end": "3607760"
  },
  {
    "text": "things can go wrong and you can Define different ways of expressing that it doesn't have to be an error so despite",
    "start": "3607760",
    "end": "3613000"
  },
  {
    "text": "people like not wanting to deal with errors most of the time they're very set on like having the errors be very",
    "start": "3613000",
    "end": "3618920"
  },
  {
    "text": "visible so they can very visibly ignore them if you just kind of buil them in in other ways they get very mad",
    "start": "3618920",
    "end": "3626119"
  },
  {
    "text": "I'm even thinking about like if you know that your function only returns like one specific type of error that's more",
    "start": "3626119",
    "end": "3632720"
  },
  {
    "text": "concrete than the you know built-in error I I still don't know if I've ever really seen functions that return that instead of just returning the built-in",
    "start": "3632720",
    "end": "3639319"
  },
  {
    "text": "error as the type when in reality returning a more specific error type would actually be way more useful yeah",
    "start": "3639319",
    "end": "3646799"
  },
  {
    "text": "but we don't ever do that yeah and then you get in the business like of like doing a type switch on the error itself",
    "start": "3646799",
    "end": "3652000"
  },
  {
    "text": "and then that's just that's a code smell to me too like I mean sometimes you kind of have to do that but it kind of",
    "start": "3652000",
    "end": "3658559"
  },
  {
    "text": "defeats the purpose that's a great idea that's exactly what I like to do type",
    "start": "3658559",
    "end": "3663799"
  },
  {
    "text": "switches on errors yeah in general to me unwrapping an interface into a a concrete type is a code smell pretty",
    "start": "3663799",
    "end": "3670359"
  },
  {
    "text": "much across the board that may be an unpopular opinion too that's kind of you've got me curious now though if like",
    "start": "3670359",
    "end": "3676079"
  },
  {
    "text": "if I went through a code base and actually factored it to be like I'm going to return the most specific error type I can in every case like if I have",
    "start": "3676079",
    "end": "3682359"
  },
  {
    "text": "like an interface that defines a more specific error or something something and just to see how that would end up I",
    "start": "3682359",
    "end": "3687880"
  },
  {
    "text": "I do imagine one of the issues would be that you couldn't reuse that error variable all the time because you'd have different types being returned and",
    "start": "3687880",
    "end": "3693960"
  },
  {
    "text": "that's probably one of the reasons why people dislike it is because they want to keep reusing that error variable yeah",
    "start": "3693960",
    "end": "3699359"
  },
  {
    "text": "I think that they are listen friends okay we're in a friend Circle here okay",
    "start": "3699359",
    "end": "3705720"
  },
  {
    "text": "there is not like not found as an error is a typical error that adheres to",
    "start": "3705720",
    "end": "3711480"
  },
  {
    "text": "everything right like it's basically the equivalent of a for 4 there is no reason why there couldn't be like an error that",
    "start": "3711480",
    "end": "3718920"
  },
  {
    "text": "is called not found ER and you could just return that and call it a day and that's it and it's always there and thus",
    "start": "3718920",
    "end": "3726279"
  },
  {
    "text": "you do not have to do oh if error error string like string contains this and this and it's not found then it's a not",
    "start": "3726279",
    "end": "3732599"
  },
  {
    "text": "found case because sometimes you do have to see what kind of an error it is right um so I'm just saying you don't",
    "start": "3732599",
    "end": "3739079"
  },
  {
    "text": "necessarily have to do switches maybe but you could probably be able to do an if you know on something just to emit",
    "start": "3739079",
    "end": "3744960"
  },
  {
    "text": "like a log line or something oh yeah errors. is is my best friend I I I use it all the time errors. is and errors.",
    "start": "3744960",
    "end": "3752240"
  },
  {
    "text": "as they are fundamental part of my workflow now so uh to take those away from me would be",
    "start": "3752240",
    "end": "3758960"
  },
  {
    "text": "terrible yeah definitely seems like this is an an area where it'd be nice if we could advance in some way away from uh I",
    "start": "3758960",
    "end": "3767559"
  },
  {
    "text": "it feels like a lot of our error handling and errors end up being simplistic like stuff people think about after the fat cuz it's like yeah your",
    "start": "3767559",
    "end": "3773039"
  },
  {
    "text": "errors should be rich they should give you lots of information about like what went wrong so you can like handle the",
    "start": "3773039",
    "end": "3778599"
  },
  {
    "text": "cases or retry or do whatever you need to do and most of the time it is just like here is an opaque string that you",
    "start": "3778599",
    "end": "3785119"
  },
  {
    "text": "can go parse and maybe I've implemented something internally but I just expose that out as a bunch of opaque strings",
    "start": "3785119",
    "end": "3791400"
  },
  {
    "text": "and if I change those strings then you're kind of screwed but once again you know T takes a lot of energy to",
    "start": "3791400",
    "end": "3796960"
  },
  {
    "text": "think about you know your error flows in your error cases I get a lot of flack for this but I love bit masks I love",
    "start": "3796960",
    "end": "3802960"
  },
  {
    "text": "using bit masks for that Purp Pur because you can stuff as well in a 64 bit on sign integer you can stuff 64",
    "start": "3802960",
    "end": "3809039"
  },
  {
    "text": "error cases into it and it could be any any of these or all of them and you could just check it using a bitwise",
    "start": "3809039",
    "end": "3815640"
  },
  {
    "text": "operator at the end and it's very fast very efficient and it's readable so but for whatever reason bit mask aren't as",
    "start": "3815640",
    "end": "3821839"
  },
  {
    "text": "popular as they should be I believe I've created or have worked with some sort of",
    "start": "3821839",
    "end": "3827079"
  },
  {
    "text": "higher level error Library like pretty much at every place there's somebody that comes in as an afterthought and",
    "start": "3827079",
    "end": "3833000"
  },
  {
    "text": "creates a higher level air lib right that's what you're CH just talking about that like you would want to have like",
    "start": "3833000",
    "end": "3838960"
  },
  {
    "text": "all kinds of stuff indicating where did it come from some sort of statuses how you should react is it fatal is it not",
    "start": "3838960",
    "end": "3845160"
  },
  {
    "text": "fatal all that sort of stuff and it almost always sucks like something is",
    "start": "3845160",
    "end": "3850680"
  },
  {
    "text": "busted with it like either it doesn't log at the right time when you want it to or it logs too much or it does double",
    "start": "3850680",
    "end": "3857000"
  },
  {
    "text": "logs or it doesn't send a span or a trace somewhere where how you need it to it's just I'm down to complain about it",
    "start": "3857000",
    "end": "3863400"
  },
  {
    "text": "I don't have a solution I just want to complain about it say it's not great but like and I wish it was better but I",
    "start": "3863400",
    "end": "3869319"
  },
  {
    "text": "don't know how for whatever reason it just seems like an area that's it's hard as a developer to justify spending too",
    "start": "3869319",
    "end": "3874359"
  },
  {
    "text": "much time there like cuz like you're you're getting paid to make things work and it sometimes doesn't feel like",
    "start": "3874359",
    "end": "3880079"
  },
  {
    "text": "you're getting paid to like make handling the errors easier and for whatever reason you know like the way",
    "start": "3880079",
    "end": "3885200"
  },
  {
    "text": "error is I mean like yes you have to handle the errors but but for whatever reason like I don't know upper",
    "start": "3885200",
    "end": "3891880"
  },
  {
    "text": "management cares about the working thing they don't really put as much thought into the oh did you also handle all",
    "start": "3891880",
    "end": "3897760"
  },
  {
    "text": "these error cases until something goes wrong then they care but prior to then they don't care so much I think that's like an ethos thing that we we probably",
    "start": "3897760",
    "end": "3905480"
  },
  {
    "text": "need to fix at some point and like I know I I always kind of relate it back to you know my my history as a writer",
    "start": "3905480",
    "end": "3911599"
  },
  {
    "text": "and I'm like nobody likes a story where there's no conflict and nothing goes wrong um so the fact we build our",
    "start": "3911599",
    "end": "3916960"
  },
  {
    "text": "software and people want us to build our software in this realm of like don't really think about the errors or the",
    "start": "3916960",
    "end": "3923720"
  },
  {
    "text": "conf or the problems things will mostly work all the time it'll be okay it's weird to me because like the I don't",
    "start": "3923720",
    "end": "3930200"
  },
  {
    "text": "know the important stuff in like a movie you go watch or a book you read is all of that conflict and the errors and how",
    "start": "3930200",
    "end": "3935559"
  },
  {
    "text": "you resolve them and I think properly handling that is what makes a difference between like really great software and",
    "start": "3935559",
    "end": "3941839"
  },
  {
    "text": "like mediocre software and you know right now people are okay with building a lot of mediocre software I think users",
    "start": "3941839",
    "end": "3947799"
  },
  {
    "text": "are getting increasingly annoyed at that cuz a lot of those like turn it off turn it on again bugs are because some",
    "start": "3947799",
    "end": "3954079"
  },
  {
    "text": "someone didn't handle some error case somewhere or didn't understand the semantics properly now everything's",
    "start": "3954079",
    "end": "3959839"
  },
  {
    "text": "busted and no one knows where the problem is so we just restart the whole world I was just going to say that I",
    "start": "3959839",
    "end": "3965119"
  },
  {
    "text": "will not approve a PR which doesn't check the error for a Json Marshall okay",
    "start": "3965119",
    "end": "3970880"
  },
  {
    "text": "like you should check all errors doesn't matter I understand that the only error case for Json Marshall is that if it's",
    "start": "3970880",
    "end": "3977880"
  },
  {
    "text": "like an infinite math number or something like that um I get it but I do",
    "start": "3977880",
    "end": "3983039"
  },
  {
    "text": "not know what's going to happen the next version of go and like Rob decides that like actually you know what if the host",
    "start": "3983039",
    "end": "3989039"
  },
  {
    "text": "name contains squirrels I'm going to actually air so check all the errors",
    "start": "3989039",
    "end": "3995079"
  },
  {
    "text": "check everything that was a convoluted you know error case but like you know you get what I'm saying yeah another",
    "start": "3995079",
    "end": "4000760"
  },
  {
    "text": "thing that is in Co bases that I've seen is generally inconsistent depending on",
    "start": "4000760",
    "end": "4005920"
  },
  {
    "text": "who who wrote the code is how errors are actually propagated and your typical restful uh service you have you know",
    "start": "4005920",
    "end": "4013160"
  },
  {
    "text": "this entry point you dig down into the service layer into your data layer and you know you may hit an error uh some",
    "start": "4013160",
    "end": "4019880"
  },
  {
    "text": "people like to log that error right where it happens some people like to propagate it the whole way back up the stack it's one of those things where you",
    "start": "4019880",
    "end": "4025720"
  },
  {
    "text": "have to pick one and stick with it because if you don't then your observability is going to be terrible everything is gonna suck you got to be",
    "start": "4025720",
    "end": "4033839"
  },
  {
    "text": "consistent and your price is going to Skyrocket for your logging platform as well right so thinking about the error",
    "start": "4033839",
    "end": "4040039"
  },
  {
    "text": "stuff and just how hard it is to handle them well like Chris you were saying that like how you resolve conflict is a big part of what differentiates great in",
    "start": "4040039",
    "end": "4047440"
  },
  {
    "text": "in mediocre software and one of the first things that comes to mind is like when you're submitting a form and some",
    "start": "4047440",
    "end": "4052839"
  },
  {
    "text": "forms will come back and like literally tell you every little thing that's wrong it's really easy to sort of figure out why your form didn't go through other",
    "start": "4052839",
    "end": "4058960"
  },
  {
    "text": "ones you get like a generic like this didn't work message and you're like well that sucks but like weirdly enough we've",
    "start": "4058960",
    "end": "4064119"
  },
  {
    "text": "set things up so that it's much much easier to do the first than the second like it's much much easier to have the generic something's wrong than to",
    "start": "4064119",
    "end": "4070720"
  },
  {
    "text": "actually show somebody like here the things that went wrong cuz I even went and did that at one point I sat down and I was like all right I want this form to",
    "start": "4070720",
    "end": "4076760"
  },
  {
    "text": "like literally highlight every field that goes wrong and the errors are coming back from a ghost server and like trying to figure out the right way to do",
    "start": "4076760",
    "end": "4082920"
  },
  {
    "text": "that was not the easiest thing in the world but I feel like sometimes people just try to like sweep that under like",
    "start": "4082920",
    "end": "4088119"
  },
  {
    "text": "the security rug like it's a it's a security vulnerability if you tell people what went wrong have you thought",
    "start": "4088119",
    "end": "4093599"
  },
  {
    "text": "this through though have you really thought this through cuz I don't think you have it's like the same times that",
    "start": "4093599",
    "end": "4099199"
  },
  {
    "text": "people will say when you go to the password reset and it can't tell you if that email address actually",
    "start": "4099199",
    "end": "4104480"
  },
  {
    "text": "exists in the accounts and they're like oh it's a security thing and I'm like I can go sign up with that email address and it'll tell me if it's there or not",
    "start": "4104480",
    "end": "4110960"
  },
  {
    "text": "so like I can figure this out already you're not helping anybody so just tell me and like those ones just seem like",
    "start": "4110960",
    "end": "4117880"
  },
  {
    "text": "the same type of thing where they're they're worried about a security thing that is completely vulnerable in some other way so it just does not matter",
    "start": "4117880",
    "end": "4124359"
  },
  {
    "text": "people like to do selective security thinking when it's like if it's convenient for me then I'll say that",
    "start": "4124359",
    "end": "4130400"
  },
  {
    "text": "it's a security problem but if it's like something I'll have to go think about some more go fix that I I don't know",
    "start": "4130400",
    "end": "4137400"
  },
  {
    "text": "then we we don't really need to care about that security case can do that later the password reset forms just",
    "start": "4137400",
    "end": "4143080"
  },
  {
    "text": "frustrate me when they're like if you have an account we sent you an email and I'm like that is not helping me at all",
    "start": "4143080",
    "end": "4148120"
  },
  {
    "text": "right now like you basically told me nothing I literally just went through the that flow that you're just describing just a few days ago of trying",
    "start": "4148120",
    "end": "4154798"
  },
  {
    "text": "to reset a password somewhere and I didn't know actually if I had an account there or not and I went through that whole thing cuz I don't know if like did",
    "start": "4154799",
    "end": "4161359"
  },
  {
    "text": "it was there a male server problem somewhere so I went and signed up with an account and I was like nope like",
    "start": "4161359",
    "end": "4167600"
  },
  {
    "text": "definitely not no account here so just you know created a brand new account so yeah I I agree 100% all right I think",
    "start": "4167600",
    "end": "4176000"
  },
  {
    "text": "that's about a wrap for this episode Daniel Steve thank you for joining us thank you for having us yeah thank",
    "start": "4176000",
    "end": "4182490"
  },
  {
    "text": "[Music] you thank you for listening to go time",
    "start": "4182490",
    "end": "4188120"
  },
  {
    "text": "if you enjoy the show please do share it with a friend personal recommendations are the number one way people find new",
    "start": "4188120",
    "end": "4194440"
  },
  {
    "text": "podcasts they love and of course subscribe if you haven't yet we're on Spotify we're on Apple podcast we're",
    "start": "4194440",
    "end": "4200640"
  },
  {
    "text": "pretty much everywhere you can also check out the back catalog of awesome episodes at go time. FM there you'll",
    "start": "4200640",
    "end": "4205840"
  },
  {
    "text": "find our recommended episodes plus listener favorites and you can even request your own guest or topic go time",
    "start": "4205840",
    "end": "4212280"
  },
  {
    "text": "is produced by Jared Santo with music by breakmaster cylinder thanks again to our awesome sponsors fastly LA starkley and",
    "start": "4212280",
    "end": "4218960"
  },
  {
    "text": "of course lenoe next time on go time Andre Erikson from The Encore project",
    "start": "4218960",
    "end": "4225159"
  },
  {
    "text": "joins Johnny Natalie and yours truly for an insightful discussion on developer",
    "start": "4225159",
    "end": "4230400"
  },
  {
    "text": "productivity Frameworks and tradeoffs we'll have that one ready for you next",
    "start": "4230400",
    "end": "4235600"
  },
  {
    "text": "[Music]",
    "start": "4235600",
    "end": "4252640"
  },
  {
    "text": "week [Music]",
    "start": "4252640",
    "end": "4260669"
  },
  {
    "text": "love",
    "start": "4263159",
    "end": "4266000"
  }
]