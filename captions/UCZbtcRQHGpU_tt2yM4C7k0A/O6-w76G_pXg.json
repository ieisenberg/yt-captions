[
  {
    "text": "fuzzy Wuzzy was a bear fuzzy Wuzzy had no hair fuzzy Wuzzy wasn't very fuzzy wuzzy that's oh M that's got to be the",
    "start": "0",
    "end": "5720"
  },
  {
    "text": "opening isn't it yeah it really does yeah deal",
    "start": "5720",
    "end": "12040"
  },
  {
    "text": "done B with for change log is provided by fastly learn more at fastly.com we",
    "start": "12040",
    "end": "18240"
  },
  {
    "text": "move fast and fix things here at change law because of rbar check them out at rar.com and we're hosted on linode cloud",
    "start": "18240",
    "end": "24880"
  },
  {
    "text": "servers head to lin.com changelog",
    "start": "24880",
    "end": "30880"
  },
  {
    "text": "this episode is brought to you by digital ocean droplets manage kubernetes manage databases spaces object storage",
    "start": "30880",
    "end": "38879"
  },
  {
    "text": "volume block storage Advanced networking like virtual private clouds and Cloud firewalls developer tooling like the",
    "start": "38879",
    "end": "45039"
  },
  {
    "text": "robust API and CLI to make sure you can interact with your infrastructure the way you want to digital ocean is",
    "start": "45039",
    "end": "51719"
  },
  {
    "text": "designed for developers and built for businesses join Over 150,000 businesses",
    "start": "51719",
    "end": "57600"
  },
  {
    "text": "that develop manage and scale their app applications with digital ocean head to do. changelog to get started with a $100",
    "start": "57600",
    "end": "64878"
  },
  {
    "text": "credit again do. [Music]",
    "start": "64879",
    "end": "71459"
  },
  {
    "text": "changelog let's do it it's go time welcome to go time your source for",
    "start": "79520",
    "end": "86040"
  },
  {
    "text": "diverse discussions from around the go Community we would like to thank each and every one of you who joined change",
    "start": "86040",
    "end": "92200"
  },
  {
    "text": "log Plus+ during our soft launch in August we truly appreciate you supporting the show if you have no idea",
    "start": "92200",
    "end": "99119"
  },
  {
    "text": "what I'm talking about check it out and learn more at changel log.com plusus plusus okay it's time to talk fuzzing",
    "start": "99119",
    "end": "107040"
  },
  {
    "text": "here we [Music]",
    "start": "107040",
    "end": "113090"
  },
  {
    "text": "go hello and welcome to go time I'm Matt ryer today we're talking about fuzzing",
    "start": "114040",
    "end": "121439"
  },
  {
    "text": "we're going to find out what it is and how we can use it to make our code better uh and we're going to take a a",
    "start": "121439",
    "end": "127880"
  },
  {
    "text": "close look at a new draft design that discusses bringing fuzzing as a first",
    "start": "127880",
    "end": "133520"
  },
  {
    "text": "class concern to go it's very excited and we're lucky to be joined by the author of that draft design Katie",
    "start": "133520",
    "end": "139879"
  },
  {
    "text": "Hawkman hello Katie hi Matt how's it going good welcome to the show thanks for coming thank you for having me we've",
    "start": "139879",
    "end": "146879"
  },
  {
    "text": "also joined by filipo Val sorta hello filipo hey Matt good to be back always a",
    "start": "146879",
    "end": "153160"
  },
  {
    "text": "pleasure to have you here sir same same same looking forward to it very formal",
    "start": "153160",
    "end": "158920"
  },
  {
    "text": "yeah thank you and we're also joined by Roberto clapis hello Roberto",
    "start": "158920",
    "end": "167080"
  },
  {
    "text": "748 okay is that a first response I wanted to see if you crashed wi an",
    "start": "167080",
    "end": "173480"
  },
  {
    "text": "integer I've not crashed though nor am I panicking I've continued uh in fact this",
    "start": "173480",
    "end": "179319"
  },
  {
    "text": "was that was did my unit test earlier so I've I was ready for it but thank you very much welcome to the show thanks can",
    "start": "179319",
    "end": "186440"
  },
  {
    "text": "we take a second to a knowledge how Matt rolled the RS for both of the Italian names yeah oh it's my pleasure that was",
    "start": "186440",
    "end": "194519"
  },
  {
    "text": "good it's a lovely accent so I always like to uh listen to it and have you on for that purpose really so if that's all",
    "start": "194519",
    "end": "201640"
  },
  {
    "text": "you contribute to this show then that's fine by me that's our",
    "start": "201640",
    "end": "207040"
  },
  {
    "text": "intention well so maybe we should start at the beginning for anybody not familiar what is fuzzing and what's it",
    "start": "207040",
    "end": "213840"
  },
  {
    "text": "for yeah I can give a a quick summary of that so basically fuzzing is is a form",
    "start": "213840",
    "end": "219120"
  },
  {
    "text": "of automated testing that can manipulate inputs uh in a way that can find bugs",
    "start": "219120",
    "end": "224519"
  },
  {
    "text": "that maybe wouldn't otherwise be able to find um on your own so in my mind it's kind of a supplement to some of the",
    "start": "224519",
    "end": "231239"
  },
  {
    "text": "existing testing that people already do um that's pretty common like unit testing or um integration testing but",
    "start": "231239",
    "end": "237720"
  },
  {
    "text": "what sets it apart is it actually does things on its own and and runs and",
    "start": "237720",
    "end": "243120"
  },
  {
    "text": "can run continuously so it's kind of smart in a way so if it has some interesting inputs it can actually use",
    "start": "243120",
    "end": "249760"
  },
  {
    "text": "some intelligence to go in and mutate those inputs in interesting and meaningful ways to find crashes and",
    "start": "249760",
    "end": "256400"
  },
  {
    "text": "panics that wouldn't easily be otherwise found if the developer had to try to identify them themsel so that's",
    "start": "256400",
    "end": "263120"
  },
  {
    "text": "interesting then you talk about this intelligence it isn't just random then there's something else going on",
    "start": "263120",
    "end": "270120"
  },
  {
    "text": "yeah and I think it's really tricky because there's no kind of industry standard on how these kinds of things",
    "start": "270120",
    "end": "276759"
  },
  {
    "text": "work I mean there are definitely tons of different ways that you can mutate things randomly and there's also a lot",
    "start": "276759",
    "end": "283120"
  },
  {
    "text": "of interesting discussion around how do you prioritize which Corpus entries um",
    "start": "283120",
    "end": "288680"
  },
  {
    "text": "and I'll talk a little bit more about what corpuses are later but basically which inputs to modify and how to modify",
    "start": "288680",
    "end": "295039"
  },
  {
    "text": "them and and how smart it should really be um and all those things are kind of up in the air and and a lot of different",
    "start": "295039",
    "end": "301720"
  },
  {
    "text": "fuzzers work differently um which is actually kind of cool in my mind yeah that's interesting so what situations is",
    "start": "301720",
    "end": "308680"
  },
  {
    "text": "it good for helping out in then so let's say the strings. split example from the",
    "start": "308680",
    "end": "314000"
  },
  {
    "text": "standard Library you pass in a string and you pass in a separator and it basically just splits that string",
    "start": "314000",
    "end": "320199"
  },
  {
    "text": "wherever it finds that separator and returns a slice of the the components the segments that it found would that be",
    "start": "320199",
    "end": "326440"
  },
  {
    "text": "a good candidate for fuzzing yeah I think it could be and I think it would also be I think filipo and Rob will have",
    "start": "326440",
    "end": "333160"
  },
  {
    "text": "a lot of really good things to add to in terms of who's used fuzzers in the past and how they've usually had a security",
    "start": "333160",
    "end": "339160"
  },
  {
    "text": "context around them and what this proposal has been trying to do is actually get fuzzing into the hands of",
    "start": "339160",
    "end": "345520"
  },
  {
    "text": "non-security experts and non-security developers and have other people use them so in the string split example you",
    "start": "345520",
    "end": "351720"
  },
  {
    "text": "know if there's an off by1 error somewhere or maybe some some issue that can cause a panic or some input that",
    "start": "351720",
    "end": "358000"
  },
  {
    "text": "doesn't meet some specific property it might be easy to find with fuzzing um and I think it would be a really good",
    "start": "358000",
    "end": "364000"
  },
  {
    "text": "package to test or a good function to test in that package yeah yeah because you hear a common use cases are things",
    "start": "364000",
    "end": "370280"
  },
  {
    "text": "like paes and things that are doing decoding because you know they are dealing with usually unknown in advanc",
    "start": "370280",
    "end": "377240"
  },
  {
    "text": "kind of structures that maybe they have to sort of infer along the way so there is a lot of room in that kind of",
    "start": "377240",
    "end": "383000"
  },
  {
    "text": "operation for things to go wrong or unexpected input just things that you would never imagine anyone would pass in",
    "start": "383000",
    "end": "390759"
  },
  {
    "text": "and so yeah that's what separates it out from unit tests I guess really because unit tests are very deliberate aren't",
    "start": "390759",
    "end": "396960"
  },
  {
    "text": "they yeah yeah they are I mean you give a set of out inputs and you run",
    "start": "396960",
    "end": "402599"
  },
  {
    "text": "something and then you look at the output um and it's very clear and you have to say these are the inputs that I",
    "start": "402599",
    "end": "408120"
  },
  {
    "text": "think are important that should test it well enough and then it should have this output and fuzzing I think can apply to",
    "start": "408120",
    "end": "414800"
  },
  {
    "text": "a lot of contexts Beyond parsers and things like that because there's a reason that we have unit tests",
    "start": "414800",
    "end": "420319"
  },
  {
    "text": "everywhere and there's a reason we don't just test parsers or difficult cryptography or things like that there's",
    "start": "420319",
    "end": "426280"
  },
  {
    "text": "a reason we test everything and it's because we don't always know where the bugs in our code are you know we have",
    "start": "426280",
    "end": "432039"
  },
  {
    "text": "default assumptions that our code works and so we just kind of test it kind of just in good faith sometimes just you",
    "start": "432039",
    "end": "438680"
  },
  {
    "text": "know to prove that it works and I think fuzzing Le a fuzzing engine should be pretty agnostic in the sense that it",
    "start": "438680",
    "end": "444960"
  },
  {
    "text": "doesn't assume that it's going to work and it's going to go in maybe find things that you didn't really realize",
    "start": "444960",
    "end": "450160"
  },
  {
    "text": "could actually break or something that you had overlooked that you didn't realize is a dependency somewhere else that might break right I would also at",
    "start": "450160",
    "end": "457759"
  },
  {
    "text": "that since when you write the fuz test Target kind of you want to expect on",
    "start": "457759",
    "end": "463879"
  },
  {
    "text": "properties of the stuff that you work on rather instead of when you work on unit tests you expect some output for example",
    "start": "463879",
    "end": "471479"
  },
  {
    "text": "in the string split case you can say I'm going to call string split with two parameters and I'm going to check that",
    "start": "471479",
    "end": "477000"
  },
  {
    "text": "the second one never appears in the um return slices because the separator",
    "start": "477000",
    "end": "482199"
  },
  {
    "text": "should never appear right and that is something you would generally not test in a unit test or like you're going to",
    "start": "482199",
    "end": "488360"
  },
  {
    "text": "check that The Returned slices are less than the chars of the string so like if",
    "start": "488360",
    "end": "494680"
  },
  {
    "text": "you return more than chars there are there must be a problem and this is stuff that normally doesn't get tested",
    "start": "494680",
    "end": "502319"
  },
  {
    "text": "I'm pretty bad at writing tests but when I write unit tests I don't test for this kind of condition yeah in another",
    "start": "502319",
    "end": "508599"
  },
  {
    "text": "example of something it would be good to check in a fuz test of the split uh function is that if you put it back",
    "start": "508599",
    "end": "515200"
  },
  {
    "text": "together putting the separators between the things you split do you get back the regional string if you do it probably",
    "start": "515200",
    "end": "522599"
  },
  {
    "text": "did its job right and that's the kind of stuff that fers are pretty good at finding because they can just go and",
    "start": "522599",
    "end": "528760"
  },
  {
    "text": "find some input where I don't know the separator is at the end and is missing one character or I don't know where the",
    "start": "528760",
    "end": "537279"
  },
  {
    "text": "thing doesn't round trip that gives you even more because then you now are testing for an additional property which",
    "start": "537279",
    "end": "543320"
  },
  {
    "text": "is if you string split and then you string join you must get the same thing out which is a normal expectation I mean",
    "start": "543320",
    "end": "549160"
  },
  {
    "text": "when I use the strings package I expect that to be true but I don't know if there is anyone that has been fuzzing",
    "start": "549160",
    "end": "554600"
  },
  {
    "text": "that to make sure that that is actually true especially on edge cases like nil slices or slices of empty strings what",
    "start": "554600",
    "end": "562920"
  },
  {
    "text": "happens would be interesting to see yeah so there is an element then of design here you have to think think of that",
    "start": "562920",
    "end": "570120"
  },
  {
    "text": "kind of thing that property to then model it in a fuzz test right it's not",
    "start": "570120",
    "end": "575360"
  },
  {
    "text": "just you you just point it to a method and it just fills the method up with nonsense I think yes and no I think it",
    "start": "575360",
    "end": "581760"
  },
  {
    "text": "can I think it depends on what you're using it for I mean you could just throw random input at a function and just see",
    "start": "581760",
    "end": "588200"
  },
  {
    "text": "if it panics like that is a property that can be tested and you don't have to know anything about it I think it can",
    "start": "588200",
    "end": "594079"
  },
  {
    "text": "also be used for things like differential testing or property testing or a lot of different things it can be a",
    "start": "594079",
    "end": "599320"
  },
  {
    "text": "supplement to your unit test but it can also just go find a crash and you could probably do that in a couple lines with a little thought differential testing is",
    "start": "599320",
    "end": "606440"
  },
  {
    "text": "something that's honestly Works a little too well the idea is that there are",
    "start": "606440",
    "end": "611560"
  },
  {
    "text": "multiple implementations of the same thing right for example big number uh implementations",
    "start": "611560",
    "end": "618360"
  },
  {
    "text": "doesn't matter what library you use if you multiply two arbitrary Precision uh decimals you should get the same",
    "start": "618360",
    "end": "624920"
  },
  {
    "text": "arbitrary Precision decimal out sounds right right oh my friend how many bugs",
    "start": "624920",
    "end": "631399"
  },
  {
    "text": "fers have found just by telling them yep so here's two functions they need to return the same thing cool go I get",
    "start": "631399",
    "end": "638399"
  },
  {
    "text": "emails because one of them the one that are tested is the go one and I get",
    "start": "638399",
    "end": "643560"
  },
  {
    "text": "emails when there's a mismatch between the go one and some other implementation",
    "start": "643560",
    "end": "648959"
  },
  {
    "text": "and oh boy uh yep multi prision is hard so yeah",
    "start": "648959",
    "end": "654560"
  },
  {
    "text": "that's an excellent example one thing that I did with differential testing was I one point in go was a bug was fixed",
    "start": "654560",
    "end": "662120"
  },
  {
    "text": "with a problem with header parsing and I thought this looks easy to",
    "start": "662120",
    "end": "667880"
  },
  {
    "text": "find with a fazer so I just imported fast HTTP and the standard HTTP",
    "start": "667880",
    "end": "673160"
  },
  {
    "text": "libraries both in go run go fuz for 25 minutes and I found the buag the buag",
    "start": "673160",
    "end": "678320"
  },
  {
    "text": "that was just fixed and has been there for 12 years so yeah if you want to search for a property and the case was I",
    "start": "678320",
    "end": "685240"
  },
  {
    "text": "want the head the header set to be identical it's quite easy to find problems and if I recall correctly when",
    "start": "685240",
    "end": "692839"
  },
  {
    "text": "at one point the Json package was optimized heavily optimized and there",
    "start": "692839",
    "end": "698120"
  },
  {
    "text": "was a differential fuzzer in place that checked that the old version and the new version version would pass Jason the",
    "start": "698120",
    "end": "703880"
  },
  {
    "text": "same way and it found a bug before it it hit a stable stable release which would",
    "start": "703880",
    "end": "709480"
  },
  {
    "text": "have been kind of bad so that was another kind of success story of uh",
    "start": "709480",
    "end": "716360"
  },
  {
    "text": "fuzzing not for security reasons that was just yet another test so how can you do fuzzing in go today then what are the",
    "start": "716360",
    "end": "723720"
  },
  {
    "text": "choices that we have there are a few I mean I can I can speak to um at least one or two I mean I think the common one",
    "start": "723720",
    "end": "730519"
  },
  {
    "text": "is go fuzz that's the one that everyone knows about that's go Dash fuzz and that",
    "start": "730519",
    "end": "736160"
  },
  {
    "text": "was written I think primarily by um Demitri vof and yeah I mean it's it's",
    "start": "736160",
    "end": "741600"
  },
  {
    "text": "it's really really amazing and it's um i' I've spoken to him about it and he's actually given a lot of really really",
    "start": "741600",
    "end": "747440"
  },
  {
    "text": "good feedback into to the proposal that's out there now so it's been nice to to partner with him a little bit on",
    "start": "747440",
    "end": "753279"
  },
  {
    "text": "that too and have him get some feedback on that and yeah I mean it's it's really neat and if you haven't used it you",
    "start": "753279",
    "end": "759320"
  },
  {
    "text": "should definitely check it out and then another tool that somebody wrote was um fuzo",
    "start": "759320",
    "end": "765160"
  },
  {
    "text": "fzg and I think that was kind of a proof of concept written by mostly by the PS it sounded like to try to integrate it a",
    "start": "765160",
    "end": "772079"
  },
  {
    "text": "little bit more kind of with the go command and making it look more like kind of an end to- end tool that",
    "start": "772079",
    "end": "778120"
  },
  {
    "text": "wouldn't have to have so many build steps like G fuzz has and add a little bit of like support for modules I think",
    "start": "778120",
    "end": "784360"
  },
  {
    "text": "was part of that or maybe that was a part of G fuzz but there's been different features that both of them have tried to basically model and see",
    "start": "784360",
    "end": "791000"
  },
  {
    "text": "how they would work um and I think fuzo was was meant to be kind of a prototype or an experiment of of what it might",
    "start": "791000",
    "end": "796680"
  },
  {
    "text": "look like as a Final Approach and you mentioned build steps there then so it isn't just something at",
    "start": "796680",
    "end": "803000"
  },
  {
    "text": "all that runs at runtime there's other things that happen is there some kind of introspection that happens or reflection",
    "start": "803000",
    "end": "809800"
  },
  {
    "text": "on the types and things is it kind of generic in some way uh well when I say build steps um I don't remember all the",
    "start": "809800",
    "end": "815760"
  },
  {
    "text": "exact details of how gof fuzz works but I do know that it has kind of like a g fuzz build and you have to kind of build",
    "start": "815760",
    "end": "822279"
  },
  {
    "text": "the binary that will be fuzzed and then you have to run it separately and kind of manage your own Corpus and so there's",
    "start": "822279",
    "end": "827760"
  },
  {
    "text": "a lot of different steps you can't just run one command with the go tool chain as it is today you kind of have to learn",
    "start": "827760",
    "end": "834600"
  },
  {
    "text": "a different workflow which was a bit of a um just just like an impediment for",
    "start": "834600",
    "end": "839720"
  },
  {
    "text": "some people to try to start it um because they didn't want to learn a new tool I would say that that is one of the",
    "start": "839720",
    "end": "845560"
  },
  {
    "text": "main reasons why people are not using it is because it's external kind and feels feels different also one thing that it",
    "start": "845560",
    "end": "851880"
  },
  {
    "text": "does it does a source to Source transformation so it takes your source code and implements some sort of",
    "start": "851880",
    "end": "857199"
  },
  {
    "text": "checkpoint so basically when your code runs it can check at which point it got",
    "start": "857199",
    "end": "862959"
  },
  {
    "text": "so basically while your code executes it can check how much of the code was covered more or less like the cover tool",
    "start": "862959",
    "end": "869360"
  },
  {
    "text": "uh but it needs to do it more heavily than the cover tool and in a more efficient way and this is one of the",
    "start": "869360",
    "end": "874680"
  },
  {
    "text": "reasons why it was quite hard to make it support modules because it it actually rewrites the sources yeah some context",
    "start": "874680",
    "end": "881920"
  },
  {
    "text": "here is that um part of what uh makes fazer magic is that well the recent",
    "start": "881920",
    "end": "888360"
  },
  {
    "text": "generation of fazer magic since I think AFL is that they use coverage to figure",
    "start": "888360",
    "end": "894360"
  },
  {
    "text": "out what mutations are the ones they're interesting to look at Katie was talking",
    "start": "894360",
    "end": "899759"
  },
  {
    "text": "about how there's different strategies for the for this but in general the current the common denominator is that",
    "start": "899759",
    "end": "906240"
  },
  {
    "text": "they all look at the cover of your code if you ever run Go test- cover profile",
    "start": "906240",
    "end": "913480"
  },
  {
    "text": "oh boy I don't remember the the flag but anyway if you ever generated a coverage report you know where with the green and",
    "start": "913480",
    "end": "919120"
  },
  {
    "text": "the red that's what fers do they run the input and check which parts light up and",
    "start": "919120",
    "end": "925480"
  },
  {
    "text": "if they change the input and some new code lights up the fer goes like aha okay this is useful I can keep changing",
    "start": "925480",
    "end": "932399"
  },
  {
    "text": "this and maybe I'll hit another path that takes from there or maybe I'll be able to combine two paths in a way that",
    "start": "932399",
    "end": "939199"
  },
  {
    "text": "were not tested together and that's what what makes them honestly kind of",
    "start": "939199",
    "end": "945240"
  },
  {
    "text": "freakishly affected there's this demo of AFL slowly building a valid jpg out of",
    "start": "945240",
    "end": "954519"
  },
  {
    "text": "nothing and it slowly makes a picture and it figures out the letters to put in",
    "start": "954519",
    "end": "961240"
  },
  {
    "text": "the tags and everything it's scary good one thing that really scared me was when I run goas against um the HP library and",
    "start": "961240",
    "end": "969759"
  },
  {
    "text": "after a while I saw that in the Corpus something that looked like random uh started appearing I was like oh cool the",
    "start": "969759",
    "end": "977079"
  },
  {
    "text": "go package the go standard package start started accepting something that is not HTTP because it was http2 basically",
    "start": "977079",
    "end": "984240"
  },
  {
    "text": "started constructing valid http2 requests from nothing and that was scary and also I was",
    "start": "984240",
    "end": "991600"
  },
  {
    "text": "ashamed because I didn't recognize it and I had to manually write to De compress it and see what was going on",
    "start": "991600",
    "end": "997279"
  },
  {
    "text": "Rob if you can ever read hdp2 add to the naked eye you need to tell",
    "start": "997279",
    "end": "1003319"
  },
  {
    "text": "me yeah cuz that is a strange superpower I don't know what has had to bite you",
    "start": "1003319",
    "end": "1008920"
  },
  {
    "text": "for that to be the power that then manifests there support groups we've all been there mine is TLS uh used to be DNS",
    "start": "1008920",
    "end": "1018560"
  },
  {
    "text": "it's okay there's help thanks thanks so keeping them in",
    "start": "1018560",
    "end": "1024000"
  },
  {
    "text": "mind so that is really interesting then that it's not just shifting the inputs",
    "start": "1024000",
    "end": "1029438"
  },
  {
    "text": "like by some external means it actually has an insight into the code that's",
    "start": "1029439",
    "end": "1035160"
  },
  {
    "text": "running inside in your own code where you you know in your own binary and it uses that information to also influence",
    "start": "1035160",
    "end": "1042720"
  },
  {
    "text": "what it's doing so that is kind of like spooky you I could definitely imagine it's a little bit like adversarial",
    "start": "1042720",
    "end": "1049559"
  },
  {
    "text": "training in machine learning where you have a model and you have another model and they sort of compete with each other",
    "start": "1049559",
    "end": "1055600"
  },
  {
    "text": "and then they both just keep getting better you know together and that's kind of a great way to it's almost like feels",
    "start": "1055600",
    "end": "1061280"
  },
  {
    "text": "like cheating in some way but you can end up with a mirror of something else you know by this technique so it is kind",
    "start": "1061280",
    "end": "1068600"
  },
  {
    "text": "of amazing and yeah to see it it really will start to feel intelligent and a few of you have said it's kind of spooky",
    "start": "1068600",
    "end": "1075080"
  },
  {
    "text": "this thing another uh just a note of another spooky thing is is it can also kind of like reverse engineer your code",
    "start": "1075080",
    "end": "1082480"
  },
  {
    "text": "such that it can figure out there are certain tools that can figure out what the input is actually supposed to be and",
    "start": "1082480",
    "end": "1088159"
  },
  {
    "text": "then kind of do that for you so it can actually basically tell the fuzzing engine like this is what input will make",
    "start": "1088159",
    "end": "1094520"
  },
  {
    "text": "this if statement pass and then it'll just do that to kind of get unstuck from wherever you're at with the fuzzing",
    "start": "1094520",
    "end": "1102039"
  },
  {
    "text": "engine um and that's something maybe you do like I think G fuz does this once every thousand mutations just to try of",
    "start": "1102039",
    "end": "1108400"
  },
  {
    "text": "unstick it but not every time because it's too expensive and so it's a lot of trade-offs of like how random do you want this to be how much do you want to",
    "start": "1108400",
    "end": "1116200"
  },
  {
    "text": "use prioritization of certain inputs how much coverage is coverage a metric in",
    "start": "1116200",
    "end": "1121799"
  },
  {
    "text": "terms of what is that in terms of feedback loop like how do you how much do you care about it in terms of other things and so it's kind of creepy and",
    "start": "1121799",
    "end": "1128120"
  },
  {
    "text": "it's a judgment call from the developer on how they want to design that too yeah it does sound like a kind of hackers",
    "start": "1128120",
    "end": "1133520"
  },
  {
    "text": "tool doesn't it and in fact did it have its origins in in the security world",
    "start": "1133520",
    "end": "1138640"
  },
  {
    "text": "yeah but I like what kitty just said that it's a trade-off that the developer has to make and I think she meant the",
    "start": "1138640",
    "end": "1145240"
  },
  {
    "text": "developer of the fen to correct me if I'm wrong yes yeah because that's the",
    "start": "1145240",
    "end": "1150520"
  },
  {
    "text": "thing the thing I like about the proposal is that it does not leave all these decisions and the necessity to",
    "start": "1150520",
    "end": "1158080"
  },
  {
    "text": "learn about all of this stuff to the end users to the go developers that are just trying to test their code yeah and also",
    "start": "1158080",
    "end": "1164760"
  },
  {
    "text": "if you look at the proposal uh it tries to make fuz test targets as close as possible to what a test looks like",
    "start": "1164760",
    "end": "1171360"
  },
  {
    "text": "nowadays so basically the friction to adopt fuzzing if you're used to WR unit",
    "start": "1171360",
    "end": "1176679"
  },
  {
    "text": "test and if you're not you should it's going to be very low because it's going to basically slightly change the pattern",
    "start": "1176679",
    "end": "1185159"
  },
  {
    "text": "but is going to be as close as possible yeah we should talk more about that uh",
    "start": "1185159",
    "end": "1190400"
  },
  {
    "text": "proposal but before we do I just want to get a few of the concepts kind of clear there's this concept of seeding the",
    "start": "1190400",
    "end": "1196440"
  },
  {
    "text": "Corpus there's this concept of kind of of giving the fuzzing tool some kind of Head Start a bit like with unit tests",
    "start": "1196440",
    "end": "1203679"
  },
  {
    "text": "where you say you know we know these are the inputs and these are the expected outputs you also kind of seed the the",
    "start": "1203679",
    "end": "1210159"
  },
  {
    "text": "fuzzing tool in a similar way don't you yes um and I think it's also um kind of",
    "start": "1210159",
    "end": "1216120"
  },
  {
    "text": "a goal of the proposal to try to make it such that the unit tests that people have now and the use cases that they've",
    "start": "1216120",
    "end": "1222919"
  },
  {
    "text": "already come up with can basically just be directly used as C Corpus um and so",
    "start": "1222919",
    "end": "1229360"
  },
  {
    "text": "the seed Corpus is kind of filling two needs um at least in terms of this go proposal um it's first of all seating",
    "start": "1229360",
    "end": "1237159"
  },
  {
    "text": "the mutation engine seating the the Corpus trying to tell it this is a good starting point for you build off of this",
    "start": "1237159",
    "end": "1243760"
  },
  {
    "text": "and then it can manage its own Corpus on its own as it wants to and and build it up as it finds new coverage and new",
    "start": "1243760",
    "end": "1250159"
  },
  {
    "text": "interesting things but it's also cons serve as a regression test of sorts the",
    "start": "1250159",
    "end": "1255440"
  },
  {
    "text": "seed Corpus is either checked in to basically your test data directory it's basically checked in directly into your",
    "start": "1255440",
    "end": "1261760"
  },
  {
    "text": "module or into your package or it's in there programmatically it's in your test in code um and so that's run every",
    "start": "1261760",
    "end": "1269400"
  },
  {
    "text": "single time go test is run um and so it's also meant to act as a regression test so you can use existing things you",
    "start": "1269400",
    "end": "1275880"
  },
  {
    "text": "can use new crashes uh and you can build out that seed Corpus um as you find as you find new regressions that you want",
    "start": "1275880",
    "end": "1281919"
  },
  {
    "text": "to make sure you're testing yeah so that's a really cool feature that if something fails that automat ially gets",
    "start": "1281919",
    "end": "1288679"
  },
  {
    "text": "contributed to the testing so that next time that will explicitly get tested is",
    "start": "1288679",
    "end": "1293840"
  },
  {
    "text": "that how it works yeah so that is very cool because of course the value of unit testing if",
    "start": "1293840",
    "end": "1300440"
  },
  {
    "text": "in the case where you find a bug and then you write a test to prove that bug which you do if you follow tdd tightly",
    "start": "1300440",
    "end": "1307200"
  },
  {
    "text": "and in some cases I find that to be a kind of great way to to work because you get a kind of to-do list for free from",
    "start": "1307200",
    "end": "1314120"
  },
  {
    "text": "the tool chain you know and as you write your test um if things aren't working",
    "start": "1314120",
    "end": "1319559"
  },
  {
    "text": "they fail you get you get kind of errors that you then have to unblock and you can it's a kind of nice nice way to",
    "start": "1319559",
    "end": "1325279"
  },
  {
    "text": "decide like what you have to do to get something to pass and yes it has that same kind of idea is if you find a bug",
    "start": "1325279",
    "end": "1331640"
  },
  {
    "text": "and you've written a test to prove it uh you then save that test and next time",
    "start": "1331640",
    "end": "1337159"
  },
  {
    "text": "you run all your test Suite it'll check for that bug again so this is what we mean by protecting from regression you",
    "start": "1337159",
    "end": "1342840"
  },
  {
    "text": "can never have that same bug again if you've fixed it and you've keep the unit test",
    "start": "1342840",
    "end": "1348760"
  },
  {
    "text": "what do we do with that Corpus though uh Dominic ruse on Twitter asked what are",
    "start": "1348760",
    "end": "1353840"
  },
  {
    "text": "the best practices for the Corpus should you put it into git should it go into some other repo do you share it amongst",
    "start": "1353840",
    "end": "1360159"
  },
  {
    "text": "the team is it just something you run on your own Dev machine where does this go in practice I think it's going to depend",
    "start": "1360159",
    "end": "1367279"
  },
  {
    "text": "I also think this is kind of a bit of an open question in terms of what kind of practices do we want like best practices",
    "start": "1367279",
    "end": "1373120"
  },
  {
    "text": "do we want to lay out for this but also it that that part is also kind of up to the developer too it could be",
    "start": "1373120",
    "end": "1379559"
  },
  {
    "text": "programmatic like let's say like I mentioned before you have existing unit tests and you just want to move it into",
    "start": "1379559",
    "end": "1385520"
  },
  {
    "text": "basically change your t. run into an f. fuzz something like that should be basically possible so if it's already",
    "start": "1385520",
    "end": "1391320"
  },
  {
    "text": "programmatic keep it programmatic and if it fails it fails and that's great if you have a bunch of test data like let's",
    "start": "1391320",
    "end": "1398799"
  },
  {
    "text": "say you have a bunch of big HTTP requests or binary files or something like that that you already have",
    "start": "1398799",
    "end": "1403840"
  },
  {
    "text": "somewhere you can just use those too and the the fuzzing engine will will look at that or not the fuzzing engine but go",
    "start": "1403840",
    "end": "1409679"
  },
  {
    "text": "test will look at test data as part of the seed Corpus too um and so I think it",
    "start": "1409679",
    "end": "1414720"
  },
  {
    "text": "also depends on what the seed Corpus is is it a huge binary is it a small thing",
    "start": "1414720",
    "end": "1421400"
  },
  {
    "text": "is it something that's best built programmatically and what the best practices for that will be I think are still kind of an open question at least",
    "start": "1421400",
    "end": "1427600"
  },
  {
    "text": "it is to me I think there's also an angle of maturity of the ecosystem in there of maturity of the technique",
    "start": "1427600",
    "end": "1433720"
  },
  {
    "text": "because uh when fuzzing is just this tool that some security your Searchers use to smash against a program once try",
    "start": "1433720",
    "end": "1442440"
  },
  {
    "text": "to get something out of it and then move on of course you know they just run the",
    "start": "1442440",
    "end": "1448000"
  },
  {
    "text": "Corpus wherever they're keeping it but I feel like just like with testing we set up continuous integration and we trust",
    "start": "1448000",
    "end": "1455159"
  },
  {
    "text": "machines to do the heavy lifting for us I expect that fuzzing also take that",
    "start": "1455159",
    "end": "1460679"
  },
  {
    "text": "path once it's buil into developer workflows so you would have a small Corpus locally on your machine and K is",
    "start": "1460679",
    "end": "1467880"
  },
  {
    "text": "proposal puts it automatically in a cache folder and that will you know do a",
    "start": "1467880",
    "end": "1473000"
  },
  {
    "text": "very quick pass but you're not going to run the fuzzer mostly on your laptop part of what makes fazer work is that",
    "start": "1473000",
    "end": "1479600"
  },
  {
    "text": "computers are fast but also you can keep throwing more cores at it and then you",
    "start": "1479600",
    "end": "1484919"
  },
  {
    "text": "upload it and some Ci or OSS fuz or some continuous interrogation system can just",
    "start": "1484919",
    "end": "1490880"
  },
  {
    "text": "run the fuzer and it should persist the the Corpus so it will keep running the",
    "start": "1490880",
    "end": "1496480"
  },
  {
    "text": "same Corpus uh again against it so that you make changes and the Corpus is already hot and large but is not checked",
    "start": "1496480",
    "end": "1503600"
  },
  {
    "text": "into your repository because most people don't want megabytes and megabytes of",
    "start": "1503600",
    "end": "1509000"
  },
  {
    "text": "Corpus checked in right one thing that I also like about Fus is that there is usually a way to tell them don't feed me",
    "start": "1509000",
    "end": "1515799"
  },
  {
    "text": "input that is bigger than this amount either directly or indirectly the indirect way is you take whatever the",
    "start": "1515799",
    "end": "1522000"
  },
  {
    "text": "fer passes you and if it is bigger than a certain size you just return no I don't want this and after a while the",
    "start": "1522000",
    "end": "1528480"
  },
  {
    "text": "fuzer will stop sitting the corpus with anything bigger than the size you want so if you're testing string split yes",
    "start": "1528480",
    "end": "1533679"
  },
  {
    "text": "you can get up to a megabyte but it doesn't make sense to split a gigabyte",
    "start": "1533679",
    "end": "1538799"
  },
  {
    "text": "of string because I mean you know the code that you're fuzzing and you shouldn't be too exaggerate on how",
    "start": "1538799",
    "end": "1545120"
  },
  {
    "text": "liberal you are in the input you fit it to it's like yes you're fuzzing but you know what you are fuzzing it's like if",
    "start": "1545120",
    "end": "1551320"
  },
  {
    "text": "you're fuzzing a JPEG parer yes feed it big stuff if you're fuzzing a string",
    "start": "1551320",
    "end": "1556360"
  },
  {
    "text": "splitter it's very very hard that there is a bag at the 3 GB Mark yeah that's a",
    "start": "1556360",
    "end": "1562000"
  },
  {
    "text": "good point though that that because you do get the sense that this is just you'd switch it on and it and it just points",
    "start": "1562000",
    "end": "1567640"
  },
  {
    "text": "to your methods and it's just going to go and do it that is interesting though that this is a continuous thing it's not",
    "start": "1567640",
    "end": "1574399"
  },
  {
    "text": "something that you would do like a benchmark where you just run that on your laptop um but there is in the",
    "start": "1574399",
    "end": "1580159"
  },
  {
    "text": "proposal there is like a new flag to run the fuz but is the expectation that that",
    "start": "1580159",
    "end": "1585399"
  },
  {
    "text": "would run in some kind of integration or some other place I think it probably",
    "start": "1585399",
    "end": "1591520"
  },
  {
    "text": "depends I think um yeah I think it kind of depends on how long someone wants to run a fuzzer if they are willing to just",
    "start": "1591520",
    "end": "1597640"
  },
  {
    "text": "let it run in their machine for a while maybe that's okay they want to just run it for the weekend like that's that's",
    "start": "1597640",
    "end": "1603399"
  },
  {
    "text": "totally fine if it's a company and they have a ton or just an individual and they have a ton of different things they want to try to fuzz at once I'm not",
    "start": "1603399",
    "end": "1610120"
  },
  {
    "text": "really sure if that's even going to be supported um to be able to run multiple fuzzers at once I don't know what would",
    "start": "1610120",
    "end": "1615880"
  },
  {
    "text": "happen like if there's a raise condition like how do you there's a lot of different things that I'm not totally sure would be supported if it crashes",
    "start": "1615880",
    "end": "1621399"
  },
  {
    "text": "something somewhere it's hard to know where it's coming from and so it may make more sense in situations like that to have it on some kind of continuous",
    "start": "1621399",
    "end": "1627600"
  },
  {
    "text": "integration I wonder if we're going to end up in a situation where like with Bitcoin miners we've just got all these",
    "start": "1627600",
    "end": "1633000"
  },
  {
    "text": "machines that are just spending all their time crunching through fuzzing stuff when we've got fuzz coin OS fuzz",
    "start": "1633000",
    "end": "1640440"
  },
  {
    "text": "already exist there's project by Google that basically provides what internally",
    "start": "1640440",
    "end": "1646399"
  },
  {
    "text": "we call cluster which I don't know if I was allowed to say but yep we're rolling um for open",
    "start": "1646399",
    "end": "1654200"
  },
  {
    "text": "source projects where any open source project can submit and I don't know",
    "start": "1654200",
    "end": "1659440"
  },
  {
    "text": "there are criterias of course I don't know what they are exactly but they will just run your fers for you and if we",
    "start": "1659440",
    "end": "1665240"
  },
  {
    "text": "make it standard how to do that with go it would be extremely easy to submit go projects yeah but gets very exciting",
    "start": "1665240",
    "end": "1673039"
  },
  {
    "text": "actually that's really cool I think cluster fuz is open source cool okay okay so no I'm not getting fired",
    "start": "1673039",
    "end": "1679880"
  },
  {
    "text": "today yeah don't get fired please but if you do want to get fired please do it this way come on the show and reveal",
    "start": "1679880",
    "end": "1686360"
  },
  {
    "text": "something that you shouldn't reveal so cool for us such a scoop I've got a history with that and let's leave it at",
    "start": "1686360",
    "end": "1693000"
  },
  {
    "text": "that and move on yeah don't encourage him yeah last time filipo was on the",
    "start": "1693000",
    "end": "1698240"
  },
  {
    "text": "show he stopped me from admitting to a crime before I said it which was brilliant really useful",
    "start": "1698240",
    "end": "1706440"
  },
  {
    "text": "service we can take a short break if anyone needs to uh and people at home can take",
    "start": "1706440",
    "end": "1713039"
  },
  {
    "text": "a break anytime they want to really probably just carrying us around on their portable devices so they can just",
    "start": "1713039",
    "end": "1719760"
  },
  {
    "text": "do what they like I don't know why I'm explaining that um I was just going to say some bits will get cut out if you",
    "start": "1719760",
    "end": "1725080"
  },
  {
    "text": "need anything cut out let us know um we'll do that oh mat I've listened to so",
    "start": "1725080",
    "end": "1730200"
  },
  {
    "text": "many episodes of these in which you say this will be cut out and that never happen I know they don't do it for me",
    "start": "1730200",
    "end": "1736600"
  },
  {
    "text": "but they will do it for for you three okay thank you they had bits for me from",
    "start": "1736600",
    "end": "1743640"
  },
  {
    "text": "other times I've embarrassed myself find in extra shows I didn't embarrass myself",
    "start": "1743640",
    "end": "1750279"
  },
  {
    "text": "then that was a different time when I embarrassed myself it's directly on the soundboard yeah exactly yeah yeah it's",
    "start": "1750279",
    "end": "1757399"
  },
  {
    "text": "just got me embarrassing myself this is one of them this is one of the",
    "start": "1757399",
    "end": "1762480"
  },
  {
    "text": "[Music] clips how much time does your team spend building a maintaining internal tooling",
    "start": "1762560",
    "end": "1769120"
  },
  {
    "text": "I'm talking about those behind the-scenes apps the ones no one else sees the S3 uploader you built last year",
    "start": "1769120",
    "end": "1774960"
  },
  {
    "text": "for the marketing team that quick Firebase admin panel that let you monitor key kpis maybe even the tool",
    "start": "1774960",
    "end": "1781159"
  },
  {
    "text": "your data science team haded together so they can provide custom ad spin analytics now these are tools you need",
    "start": "1781159",
    "end": "1786519"
  },
  {
    "text": "so you build them and that makes sense but the question is could you have built",
    "start": "1786519",
    "end": "1791559"
  },
  {
    "text": "them in less time with less effort and less overhead and maintenance required and the answer to that question is",
    "start": "1791559",
    "end": "1797880"
  },
  {
    "text": "yes that's where retool comes in Rohan Chopra engineering director at door Dash has this to say about retool quote the",
    "start": "1797880",
    "end": "1804720"
  },
  {
    "text": "tools we've been able to quickly build with retool have allowed us to empower and scale our local operators all while",
    "start": "1804720",
    "end": "1810840"
  },
  {
    "text": "reducing the dependency on engineering end quote now the internal tooling process at door Dash was bogged down",
    "start": "1810840",
    "end": "1816559"
  },
  {
    "text": "with manual data entry missed handoffs and long turnaround times and after integrating retool door Dash was able to",
    "start": "1816559",
    "end": "1822679"
  },
  {
    "text": "cut the engineering time required to build tools by a factor of 10x and eliminate the air prone manual processes",
    "start": "1822679",
    "end": "1828720"
  },
  {
    "text": "that play their workflows they were able to empower backend Engineers who wouldn't otherwise be able to build front ends from scratch and these",
    "start": "1828720",
    "end": "1834720"
  },
  {
    "text": "Engineers were able to build fully functional apps in reto in hours not days or weeks your next step is to try",
    "start": "1834720",
    "end": "1841039"
  },
  {
    "text": "it free at ret.com changelog again ret tool.com",
    "start": "1841039",
    "end": "1846280"
  },
  {
    "text": "[Music]",
    "start": "1846280",
    "end": "1856240"
  },
  {
    "text": "changelog [Music]",
    "start": "1856240",
    "end": "1864180"
  },
  {
    "text": "so the the new proposal which we'll post a link to in the show notes it kind of",
    "start": "1868320",
    "end": "1874559"
  },
  {
    "text": "has a very nice go feel to it like the design of it so in the same way that",
    "start": "1874559",
    "end": "1879840"
  },
  {
    "text": "we're used to test functions being how we describe unit tests there are fuzz",
    "start": "1879840",
    "end": "1884880"
  },
  {
    "text": "functions now which take a different argument the testing. F and is that like",
    "start": "1884880",
    "end": "1891360"
  },
  {
    "text": "an interface then what is that testing F type that testing F type is is very",
    "start": "1891360",
    "end": "1897200"
  },
  {
    "text": "similar to a testing t or testing B so it'll it'll implement the testing. TB",
    "start": "1897200",
    "end": "1902559"
  },
  {
    "text": "interface will there be a testing F interface then or is that a like a strong type it's a strong type right and",
    "start": "1902559",
    "end": "1909720"
  },
  {
    "text": "that has methods on it that lets you then interact with the the fuzzing stuff",
    "start": "1909720",
    "end": "1917200"
  },
  {
    "text": "but it's it's a relatively simple API isn't it it's just two methods is that",
    "start": "1917200",
    "end": "1922480"
  },
  {
    "text": "right well I didn't include uh in that proposal all the other methods that are in the testing. TV interface which it",
    "start": "1922480",
    "end": "1929240"
  },
  {
    "text": "will support like for example if you have some pre-work that you need to do and you want to fatal the test or",
    "start": "1929240",
    "end": "1934600"
  },
  {
    "text": "something like that because something failed you can do that things like that originally the some earlier designs had",
    "start": "1934600",
    "end": "1941360"
  },
  {
    "text": "the testing. F function except a testing. f or the the f. fuzz function",
    "start": "1941360",
    "end": "1947360"
  },
  {
    "text": "accepted testing. F and then it ended up kind of being not as clear I think uh",
    "start": "1947360",
    "end": "1952720"
  },
  {
    "text": "and it was going to complicate things quite a bit and that was some discussions that fipo and I had and we ended up basically keeping it as a",
    "start": "1952720",
    "end": "1959279"
  },
  {
    "text": "testing. t within that within that function so it basically should look almost exactly like a t. run and if you",
    "start": "1959279",
    "end": "1965480"
  },
  {
    "text": "have a t. run you can kind of like copy it over directly so it really it should look and feel exactly like a unit test",
    "start": "1965480",
    "end": "1972000"
  },
  {
    "text": "within that f. fuzz function which just runs kind of as a unit test and then anything you need to do before that like",
    "start": "1972000",
    "end": "1978399"
  },
  {
    "text": "set things up add to the Corpus whatever you need to do you can use the testing. F for that part unlike the the the Run",
    "start": "1978399",
    "end": "1987039"
  },
  {
    "text": "function where the only argument you can pass into that function is a testing T",
    "start": "1987039",
    "end": "1992080"
  },
  {
    "text": "you can have additional arguments in these functions and they seem somewhat",
    "start": "1992080",
    "end": "1997399"
  },
  {
    "text": "Dynamic can you explain how they work yeah so inside this this f. fuzz",
    "start": "1997399",
    "end": "2003240"
  },
  {
    "text": "function those first parameters what you're basically telling it is it's going to take a testing. t",
    "start": "2003240",
    "end": "2009960"
  },
  {
    "text": "basically it's scoped to this T and then you're just telling it what things you want the fuzzing engine to be generating",
    "start": "2009960",
    "end": "2018000"
  },
  {
    "text": "for you what is the structure basically of each input in your Corpus so in The",
    "start": "2018000",
    "end": "2023200"
  },
  {
    "text": "Proposal the example is takes a testing. t an a for this which is a string and",
    "start": "2023200",
    "end": "2028720"
  },
  {
    "text": "then a big int which is numb and what that's telling it is okay we have an f. fuzz function that's what's going to be",
    "start": "2028720",
    "end": "2035360"
  },
  {
    "text": "run with the fuzzing engine that function is going to be run for every",
    "start": "2035360",
    "end": "2040399"
  },
  {
    "text": "input it's bound by that t and then the Corpus is an a with a string and a and a",
    "start": "2040399",
    "end": "2046120"
  },
  {
    "text": "big n and those are those that's basically the the structure of the Corpus um and so every time it runs it",
    "start": "2046120",
    "end": "2051599"
  },
  {
    "text": "should be running with a new string and bigant does it dynamically look at the",
    "start": "2051599",
    "end": "2058839"
  },
  {
    "text": "arguments that you've passed there and change the code does it like respond to",
    "start": "2058839",
    "end": "2064118"
  },
  {
    "text": "the arguments or do you have to Define them somewhere or are patterns you have to follow I'm not sure exactly that I",
    "start": "2064119",
    "end": "2070118"
  },
  {
    "text": "want to make sure I'm explaining it right but basically that string and that big in like if you look up a little bit",
    "start": "2070119",
    "end": "2075919"
  },
  {
    "text": "higher in the proposal and you're looking at this f. add function what that's doing is it's adding to the",
    "start": "2075919",
    "end": "2082240"
  },
  {
    "text": "Corpus and it's adding a string and a big int which must look exactly the same",
    "start": "2082240",
    "end": "2088200"
  },
  {
    "text": "as the A and the the string and the big in in that order in that um FD fuzz",
    "start": "2088200",
    "end": "2094520"
  },
  {
    "text": "function so what's that basically defining is this is the definition of the Corpus entries that will be added",
    "start": "2094520",
    "end": "2101520"
  },
  {
    "text": "manually and that will be generated by the fuzzing engine and it works with a a slice of empty interface so it's kind of",
    "start": "2101520",
    "end": "2107960"
  },
  {
    "text": "generic code in a way yeah if go got generics would that change would that affect this design in any way or do you",
    "start": "2107960",
    "end": "2114800"
  },
  {
    "text": "think you'd still probably use it in this similar way I'm not actually sure that it would impact the design it might",
    "start": "2114800",
    "end": "2121960"
  },
  {
    "text": "impact the implementation a little bit but I haven't really thought too much about it but I also like just thinking about it now I'm not actually sure that",
    "start": "2121960",
    "end": "2128880"
  },
  {
    "text": "it would change much I think what this function is supposed to do this this f. fuzz is just kind of like a it's a",
    "start": "2128880",
    "end": "2135320"
  },
  {
    "text": "little bit",
    "start": "2135320",
    "end": "2137720"
  },
  {
    "text": "like if for example you added you didn't have to add with two ins or something like that exactly yeah I expect it would",
    "start": "2157200",
    "end": "2164280"
  },
  {
    "text": "probably Panic MH um because what you're doing is you're basically telling it here's two ins and is expecting a string",
    "start": "2164280",
    "end": "2172000"
  },
  {
    "text": "and a big in and maybe that can work with static check and things like that to find those things at build time for anybody who hasn't read The Proposal f.",
    "start": "2172000",
    "end": "2179920"
  },
  {
    "text": "add is the function used to seed the Corpus so is the function that used to",
    "start": "2179920",
    "end": "2185040"
  },
  {
    "text": "say here's the starting points which by the way is one of my favorite things of The Proposal because usual you have to",
    "start": "2185040",
    "end": "2192040"
  },
  {
    "text": "just create a bunch of files one for each input then put them in a full actually I'm going to do something else",
    "start": "2192040",
    "end": "2198760"
  },
  {
    "text": "and instead here you just write after add and here's my ecdsa certificate here's my RSA certificate these are",
    "start": "2198760",
    "end": "2204920"
  },
  {
    "text": "examples go for it well so f. add is the function that adds to the Corpus well f.",
    "start": "2204920",
    "end": "2211040"
  },
  {
    "text": "fuz is the function that actually runs the fuzzer and it runs a function that",
    "start": "2211040",
    "end": "2216240"
  },
  {
    "text": "takes the same types of arguments yeah thanks just mentioning it because in case people haven't read the proposal",
    "start": "2216240",
    "end": "2222800"
  },
  {
    "text": "yet thank you brilliant and I love the fact that it kind of still I mean it's designed to fit into what we already",
    "start": "2222800",
    "end": "2229680"
  },
  {
    "text": "have so it knows about go test and it kind of cooperates with go test as well doesn't it yeah and actually that was my",
    "start": "2229680",
    "end": "2236520"
  },
  {
    "text": "main goal with all of this I wasn't going to be okay with the design that didn't feel like testing that we have",
    "start": "2236520",
    "end": "2244240"
  },
  {
    "text": "now someone should be able to look at this and hopefully understand it pretty quickly and the goal is that if you know",
    "start": "2244240",
    "end": "2249280"
  },
  {
    "text": "how to write a unit test you know how to write a fuzz Target and it should be approximately as easy I wanted it to be",
    "start": "2249280",
    "end": "2255200"
  },
  {
    "text": "able to work with the go command as it is now and if people run go test it",
    "start": "2255200",
    "end": "2260520"
  },
  {
    "text": "should just run um the same way and it shouldn't have to use anything terribly special it shouldn't have to do anything",
    "start": "2260520",
    "end": "2267119"
  },
  {
    "text": "learn that much new I wanted kind of the barrier to entry to be as low as humanly",
    "start": "2267119",
    "end": "2272319"
  },
  {
    "text": "possible and so if it looks like go code that's the goal I'm glad to hear it I love that about the design because I've",
    "start": "2272319",
    "end": "2279119"
  },
  {
    "text": "done some research and I've seen people using creating F Targets in the wild for",
    "start": "2279119",
    "end": "2284599"
  },
  {
    "text": "parsers and what usually happens is that they take whatever the the fazer engine",
    "start": "2284599",
    "end": "2290440"
  },
  {
    "text": "passes them and put it in the parer and that's it so they just basically check",
    "start": "2290440",
    "end": "2295960"
  },
  {
    "text": "the only property they check for is it if it panics so that is kind of sad",
    "start": "2295960",
    "end": "2301359"
  },
  {
    "text": "because it's so much easier to like feed something into your poser and then maybe serialize it back and pass it again",
    "start": "2301359",
    "end": "2306640"
  },
  {
    "text": "check if it is the same so like it's kind of easier to write fuz targets than people assume but since fuz seems to be",
    "start": "2306640",
    "end": "2313520"
  },
  {
    "text": "such an alien concept I've seen most fast targets to to a certain nothing they just feed the input to the function",
    "start": "2313520",
    "end": "2320040"
  },
  {
    "text": "they want to test it's like if testing strings. join would just join that's it",
    "start": "2320040",
    "end": "2326560"
  },
  {
    "text": "and then you don't check if you even get the string back so there is a type system for that but that's what you get",
    "start": "2326560",
    "end": "2332800"
  },
  {
    "text": "so I'm really looking forward for this to be first class and to be so close to the original test",
    "start": "2332800",
    "end": "2340680"
  },
  {
    "text": "Target to see what people actually start asserting as a property because doesen Panic seems to be a little bit too weak",
    "start": "2340680",
    "end": "2347839"
  },
  {
    "text": "property yeah if people get one thing away from this conversation it should really be that fuzzing is going to be",
    "start": "2347839",
    "end": "2355359"
  },
  {
    "text": "built in go is not just about finding panics it's not just feed some input and",
    "start": "2355359",
    "end": "2361200"
  },
  {
    "text": "wait for it to crash it's about writing as many invariants as you can think of and as many access you can think of and",
    "start": "2361200",
    "end": "2368640"
  },
  {
    "text": "then letting the fuzzer find the inputs for which the thing doesn't do what you want it to do so would you say that",
    "start": "2368640",
    "end": "2375359"
  },
  {
    "text": "fuzzing makes a lot of sense if you if you're working with multiple methods I mean in the example that Roberto gave",
    "start": "2375359",
    "end": "2382040"
  },
  {
    "text": "where you encoding and decoding because you get to you can say something about those the way that those two things",
    "start": "2382040",
    "end": "2387800"
  },
  {
    "text": "should interoperate but how can you make assertions on something if if the input is completely random what kind of",
    "start": "2387800",
    "end": "2394480"
  },
  {
    "text": "assertion are you going to make one thing to I did I was fast testing a cache that I implemented caches are",
    "start": "2394480",
    "end": "2399680"
  },
  {
    "text": "harder than people would normally assume so I wanted to make sure that for example what I put in I got back so to",
    "start": "2399680",
    "end": "2406560"
  },
  {
    "text": "test my cash I did differential fing with a hashmap so a hashmap is a perfect cash",
    "start": "2406560",
    "end": "2413000"
  },
  {
    "text": "right I mean it grows indefinitely but that was not I don't I didn't care it was just fuz testing so I just fed stuff",
    "start": "2413000",
    "end": "2419040"
  },
  {
    "text": "to my cash and when I retrieved it if it wasn't there me it was evicted but if it was there it should be identical to",
    "start": "2419040",
    "end": "2424960"
  },
  {
    "text": "whatever was in that map so you can have simpler Dumber implementation of the algorithm you want",
    "start": "2424960",
    "end": "2431960"
  },
  {
    "text": "to implement or maybe a slower one like if you optimize your code you can keep the old code the slow one to test",
    "start": "2431960",
    "end": "2438079"
  },
  {
    "text": "against and usually slow code is easier to debug and is more reliable and it's easier to slower and you can you can see",
    "start": "2438079",
    "end": "2444319"
  },
  {
    "text": "what's happening yeah not that slower oh but yeah yeah that's kind of",
    "start": "2444319",
    "end": "2451200"
  },
  {
    "text": "the point mhm another example that I had written up for the CL for blog is that I",
    "start": "2451200",
    "end": "2457400"
  },
  {
    "text": "had this parser no sorry not this parser actually this serializer and you're like",
    "start": "2457400",
    "end": "2462680"
  },
  {
    "text": "how how do you test serializer like how do you know if the thing it generated is good well the thing I wanted to know was",
    "start": "2462680",
    "end": "2469480"
  },
  {
    "text": "whether it would work reusing buffers for performance reasons I didn't want to allocate a new buffer or zero the buffer",
    "start": "2469480",
    "end": "2476119"
  },
  {
    "text": "every time I just wanted to give it the old packet and say just zero over this one so what I did was write a fuzzer",
    "start": "2476119",
    "end": "2484119"
  },
  {
    "text": "that would parse a packet and then uh but in this case with the go proposal I",
    "start": "2484119",
    "end": "2489760"
  },
  {
    "text": "would not even maybe do the par step I would just tell it give me a random packet uh structure and then serialize",
    "start": "2489760",
    "end": "2497599"
  },
  {
    "text": "it on both empty buffer of old zeros and on a full buffers of all one bit and if",
    "start": "2497599",
    "end": "2505400"
  },
  {
    "text": "they come out different it means that it's not setting the zeros in some of",
    "start": "2505400",
    "end": "2510800"
  },
  {
    "text": "the fields and it did end that might or might not have been wise some stuff in",
    "start": "2510800",
    "end": "2516119"
  },
  {
    "text": "the the CL for DNS server wasn't working and that's the kind of stuff you can find with fers in general testing should",
    "start": "2516119",
    "end": "2523000"
  },
  {
    "text": "really be about defining expected behaviors and that's true of all kinds",
    "start": "2523000",
    "end": "2528599"
  },
  {
    "text": "of testing it's not just about defining expected inputs and outputs it's about locking in expectations any expectation",
    "start": "2528599",
    "end": "2536839"
  },
  {
    "text": "that you can Define not strictly in terms of this input needs to have this",
    "start": "2536839",
    "end": "2541960"
  },
  {
    "text": "output but just the output needs to be longer than the input the output needs to be shorter than the input anything",
    "start": "2541960",
    "end": "2548520"
  },
  {
    "text": "like that you can put in a FAS in a fast Target kind of like meta testing or some",
    "start": "2548520",
    "end": "2554960"
  },
  {
    "text": "kind of abstract testing in a in a sense you're not dealing with the specific values but you still deal with the ideas",
    "start": "2554960",
    "end": "2562040"
  },
  {
    "text": "the variables yes which is kind of takes away one big risk that there is when you write unit tests when you write unit",
    "start": "2562040",
    "end": "2568640"
  },
  {
    "text": "tests you have those assumptions in mind like what you're trying to test is like I want string split to actually split",
    "start": "2568640",
    "end": "2574680"
  },
  {
    "text": "the string and then then you go and test your stuff and you put the input and you put the output but you're just giving",
    "start": "2574680",
    "end": "2580920"
  },
  {
    "text": "examples you're not testing the actual property that you want so I think that writing a property assertion for a fuz",
    "start": "2580920",
    "end": "2587880"
  },
  {
    "text": "Target is actually closer to what you want to do usually in tests now unit tests are always going to be needed but",
    "start": "2587880",
    "end": "2595079"
  },
  {
    "text": "if you put on top something that asserts the actual property that you meant I think you're adding a lot of value one",
    "start": "2595079",
    "end": "2600599"
  },
  {
    "text": "opinion I heard that I'm not supporting you know retweets are not endorsement",
    "start": "2600599",
    "end": "2605960"
  },
  {
    "text": "but was that why would you write unit tests if you already know what your program is going to break on just don't",
    "start": "2605960",
    "end": "2613119"
  },
  {
    "text": "write the bug and I mean yes yes yes I know but there is a",
    "start": "2613119",
    "end": "2622680"
  },
  {
    "text": "degree of Truth to that the the things you can write unit tests unit tests are",
    "start": "2622680",
    "end": "2628160"
  },
  {
    "text": "actually kind of more useful for refactoring later and for regressions",
    "start": "2628160",
    "end": "2633720"
  },
  {
    "text": "but that's the thing it's unlikely you will think of inputs that break on the",
    "start": "2633720",
    "end": "2639559"
  },
  {
    "text": "program you just wrote because you told about those edge cases yeah and fuzzing",
    "start": "2639559",
    "end": "2645400"
  },
  {
    "text": "will just not care about what you T about fuzzing will find where it hurts",
    "start": "2645400",
    "end": "2651880"
  },
  {
    "text": "right and one thing that I like to say is that I write test targets for my future interaction with the code because",
    "start": "2651880",
    "end": "2659520"
  },
  {
    "text": "I use I I also used to do uh tdd most of the time so I write the tests and then I",
    "start": "2659520",
    "end": "2664559"
  },
  {
    "text": "write the codea implements what ever I I'm testing for and in the future when I refactor I want the tests to pass well",
    "start": "2664559",
    "end": "2670319"
  },
  {
    "text": "instead I write fuzzers for the test I wrote in the past for the coder wrote in the past so basically the fuzzer makes",
    "start": "2670319",
    "end": "2677440"
  },
  {
    "text": "sure that whatever is there is actually what it meant to do and what the tests are there so that the future code will",
    "start": "2677440",
    "end": "2683240"
  },
  {
    "text": "keep doing it and I really like what fipo fipo said about um kind of like the",
    "start": "2683240",
    "end": "2689160"
  },
  {
    "text": "fuzzing engine doesn't care what the developer thought about I mean that's I think that's kind of the the benefit of",
    "start": "2689160",
    "end": "2695200"
  },
  {
    "text": "having that that's why for example code reviews exist because you need another person who's kind of more objective to",
    "start": "2695200",
    "end": "2702000"
  },
  {
    "text": "look at it and I think that a fuzzing engine can kind of be this like third- party objective you know being that just",
    "start": "2702000",
    "end": "2709640"
  },
  {
    "text": "goes in and and does everything it can to try to break it and it has no idea what you thought about it it doesn't",
    "start": "2709640",
    "end": "2714920"
  },
  {
    "text": "care about that it just cares about trying to find as much coverage as it can and try to find bugs um that kind of",
    "start": "2714920",
    "end": "2721280"
  },
  {
    "text": "like third party entity is kind of a cool concept to me but ktie aren't you worried about the fuzzing thing becoming",
    "start": "2721280",
    "end": "2726720"
  },
  {
    "text": "self-aware and then just going around doing loads of random crime that's like actually my goal with this I'm I'm",
    "start": "2726720",
    "end": "2733040"
  },
  {
    "text": "actually trying to to build a yeah self-learning robot that'll just take over the language how do you know based",
    "start": "2733040",
    "end": "2739599"
  },
  {
    "text": "on fuzzing exactly exactly how do you know that's not already what happened and we're here pitching fuzzing to just",
    "start": "2739599",
    "end": "2746880"
  },
  {
    "text": "make our fuzzer overlords happy I'm actually a fuzzing engine all this time",
    "start": "2746880",
    "end": "2752359"
  },
  {
    "text": "it's been a simulation well it is a good one yeah you're right it doesn't a good job uh yeah but the thing is yeah oh I'd",
    "start": "2752359",
    "end": "2761000"
  },
  {
    "text": "love that though not really doesn't know how to interact with you now that he knows you're a robot",
    "start": "2761000",
    "end": "2769359"
  },
  {
    "text": "know I love it when the machines do kind of get this emergent intelligence I I",
    "start": "2769359",
    "end": "2774920"
  },
  {
    "text": "find that to be really quite amazing especially when there's so much chaos in in what's actually going on so yeah the",
    "start": "2774920",
    "end": "2781240"
  },
  {
    "text": "fact that I think the thing that I've learned and I'll take away is it's less",
    "start": "2781240",
    "end": "2786400"
  },
  {
    "text": "about random input and it's more about kind of variations of that the realistic",
    "start": "2786400",
    "end": "2792240"
  },
  {
    "text": "kind of input that you're going to pass in right or that that didn't resonate because I can tell on my screen that",
    "start": "2792240",
    "end": "2798599"
  },
  {
    "text": "there's no go on correct me if that's not no just I want to say that I was",
    "start": "2798599",
    "end": "2804280"
  },
  {
    "text": "putting stuff on top of this which is the fer doesn't care about what the code",
    "start": "2804280",
    "end": "2809440"
  },
  {
    "text": "does and that is important because if we had like machine learning algorithm fuzing our code just you know trying to",
    "start": "2809440",
    "end": "2815480"
  },
  {
    "text": "learn how the code behaves at one point they would do as humans would they would understand what the code is supposed to",
    "start": "2815480",
    "end": "2820960"
  },
  {
    "text": "do and kind of you know accept the code works and instead if you just use an",
    "start": "2820960",
    "end": "2827200"
  },
  {
    "text": "algorithm that just tries to bash with random stuff at one point you find like after two years you you have been",
    "start": "2827200",
    "end": "2833640"
  },
  {
    "text": "fuzzing a target a new Edge case that crashes and this is something that I love because a human or an intelligent",
    "start": "2833640",
    "end": "2840680"
  },
  {
    "text": "like kind of design in our way of defining intelligence would not find it",
    "start": "2840680",
    "end": "2845920"
  },
  {
    "text": "because why would you keep doing for two years the same thing expecting a different result isn't that the definition of",
    "start": "2845920",
    "end": "2851040"
  },
  {
    "text": "Madness yeah but we are going to end up with fuzzing Terminators literally just running around trying all kinds of",
    "start": "2851040",
    "end": "2856640"
  },
  {
    "text": "different things to get you and just like goes and hacks something smashes it kicks a puppy throws a baby in the sea",
    "start": "2856640",
    "end": "2862079"
  },
  {
    "text": "do you know what I mean just doing all kinds of just to see what works do what I mean it's not it's a risk we're willing to accept it's a risk okay you",
    "start": "2862079",
    "end": "2869599"
  },
  {
    "text": "are are you you really are Chocolate Factory buffins over there it's a sacrifice we're willing to make really",
    "start": "2869599",
    "end": "2877720"
  },
  {
    "text": "[Music]",
    "start": "2879450",
    "end": "2890510"
  },
  {
    "text": "what's up Gophers are you looking for a way to instantly debug and troubleshoot your applications and services running a",
    "start": "2890920",
    "end": "2896920"
  },
  {
    "text": "production on kubernetes that's a mouthful well pixie gives you a magical API to get instant debug data and the",
    "start": "2896920",
    "end": "2904400"
  },
  {
    "text": "best part is this doesn't involve changing code there are no manual uis and all this lives inside kubernetes",
    "start": "2904400",
    "end": "2911680"
  },
  {
    "text": "pixie is an API which lives inside your platform harvests all of your data that you need and exposes a bunch of",
    "start": "2911680",
    "end": "2918640"
  },
  {
    "text": "interfaces that you can ping to get data you need pixie is essentially like a decentralized Splunk it's a programmable",
    "start": "2918640",
    "end": "2925760"
  },
  {
    "text": "Edge intelligence platform which captures metrics traces logs and events without any code changes and the team",
    "start": "2925760",
    "end": "2932599"
  },
  {
    "text": "behind pixie is working hard to bring it to market for broad use by the end of 2020 but I'm here to tell you how you",
    "start": "2932599",
    "end": "2938720"
  },
  {
    "text": "can get your hands on the beta today links are in the show note so check them out so you can click through to the beta",
    "start": "2938720",
    "end": "2944040"
  },
  {
    "text": "in their slack Community once again links from the show notes check them out and look forward to pixie day coming",
    "start": "2944040",
    "end": "2950080"
  },
  {
    "text": "[Music]",
    "start": "2950080",
    "end": "2959969"
  },
  {
    "text": "[Music] soon un you I actually think should probably",
    "start": "2962190",
    "end": "2969910"
  },
  {
    "text": "[Music] leave",
    "start": "2969910",
    "end": "2975750"
  },
  {
    "text": "[Music] opinion so does anybody have an",
    "start": "2975750",
    "end": "2981920"
  },
  {
    "text": "unpopular opinion for us today it can be fuzzing related but it doesn't have to be it can be anything H yeah I've got",
    "start": "2981920",
    "end": "2989520"
  },
  {
    "text": "one I can throw in the ring throw it in so I think that it's kind of more like a",
    "start": "2989520",
    "end": "2996200"
  },
  {
    "text": "if it's an opinion so much as a personal experience but I actually got into computer science because math wasn't",
    "start": "2996200",
    "end": "3001480"
  },
  {
    "text": "social enough for me so like I think that like the thing that I like the most",
    "start": "3001480",
    "end": "3006520"
  },
  {
    "text": "I think is the best part about computer science is actually building things with other people and I think like having",
    "start": "3006520",
    "end": "3012240"
  },
  {
    "text": "social skills can take you a really long way um and is kind of undervalued in Tech so wa you're telling me that you",
    "start": "3012240",
    "end": "3019079"
  },
  {
    "text": "got into CS because of the social aspect exactly I didn't want to sit alone in a",
    "start": "3019079",
    "end": "3024839"
  },
  {
    "text": "corner all day and just solve math problems but I was like oh I can build stuff with people that sounds more fun",
    "start": "3024839",
    "end": "3030559"
  },
  {
    "text": "so I'm going to do that which I realize is the opposite of a lot of people and then you ended up inse security because",
    "start": "3030559",
    "end": "3036200"
  },
  {
    "text": "the infosec community is a you know shining example of excellent Community",
    "start": "3036200",
    "end": "3043640"
  },
  {
    "text": "that's a highly social SK though because you need to be able to talk to people and understand like if they disclose a",
    "start": "3043640",
    "end": "3050960"
  },
  {
    "text": "report you need to be able to communicate with them and understand them and be able to communicate back and you need to be able to communicate",
    "start": "3050960",
    "end": "3057240"
  },
  {
    "text": "really complicated things in a really simple way that other people can understand which is really hard and I",
    "start": "3057240",
    "end": "3062359"
  },
  {
    "text": "think this is that's a field where it's even more important that you have good social skills because it's so the the",
    "start": "3062359",
    "end": "3067480"
  },
  {
    "text": "stakes are so high you know yeah to to be fair I should point out that the go security Community is extremely nice the",
    "start": "3067480",
    "end": "3074599"
  },
  {
    "text": "kind of people that email as reports are usually a delight to to work with I was",
    "start": "3074599",
    "end": "3080040"
  },
  {
    "text": "just making a cheap shot at the right let's say",
    "start": "3080040",
    "end": "3086240"
  },
  {
    "text": "traditional security Community traditional what can they do to get you that's one way to put it you're safe",
    "start": "3086240",
    "end": "3092359"
  },
  {
    "text": "aren't you from that lot what can I ever do right yeah you know now that you say",
    "start": "3092359",
    "end": "3098599"
  },
  {
    "text": "that Katie I think that one of of the important things about the human aspect of software is like when you design an",
    "start": "3098599",
    "end": "3104319"
  },
  {
    "text": "API you have to design it in a way that people will understand like I hate when people say like users of this API are",
    "start": "3104319",
    "end": "3111160"
  },
  {
    "text": "stupid because they can't use it right no it's a when you're designing something you're communicating to the",
    "start": "3111160",
    "end": "3117480"
  },
  {
    "text": "user so people keep forgetting that Pro that issue yeah that is true actually",
    "start": "3117480",
    "end": "3123119"
  },
  {
    "text": "cuz you do think in the beginning I thought apis were for machines to talk to each other but they aren't they're",
    "start": "3123119",
    "end": "3129079"
  },
  {
    "text": "for humans to build the thing that allows the machines to talk to each other yeah so that's that is true but I",
    "start": "3129079",
    "end": "3135200"
  },
  {
    "text": "don't know Pythagoras could have been a laugh at a party might have been a great might have had a great time with him",
    "start": "3135200",
    "end": "3140760"
  },
  {
    "text": "you're probably measuring all the stuff and you're like Pythagoras just put your ruler down for 5 minutes mate have a",
    "start": "3140760",
    "end": "3146400"
  },
  {
    "text": "sandwich I've cut them into triangles while you like them you know that kind of thing okay any other unpops I have a",
    "start": "3146400",
    "end": "3153680"
  },
  {
    "text": "whole list of phography and popular opinions but the thing is I don't think",
    "start": "3153680",
    "end": "3159359"
  },
  {
    "text": "anybody actually has an opinion on these things and it's just these 10 people and we're all on the same slack and we just",
    "start": "3159359",
    "end": "3166599"
  },
  {
    "text": "you know discuss these things between us so I'm not going to go there um instead my unpopular opinion is that and KD will",
    "start": "3166599",
    "end": "3176160"
  },
  {
    "text": "I know she understands but dogs in the office are bad just bad dogs in the office like",
    "start": "3176160",
    "end": "3183760"
  },
  {
    "text": "there should be no dogs in the office yeah go and elaborate are you allergic to them filipo I'm allergic to them I",
    "start": "3183760",
    "end": "3189799"
  },
  {
    "text": "know a bunch of people who are allergic to them I know a bunch of people who are scared of them and don't feel like they",
    "start": "3189799",
    "end": "3195040"
  },
  {
    "text": "can say hey so beautiful dog I'm scared of it so you don't get to bring it uh to",
    "start": "3195040",
    "end": "3200520"
  },
  {
    "text": "the office anymore because I'm scared of dogs no one's no one wants to be that guy yeah I know you love it but to me",
    "start": "3200520",
    "end": "3206599"
  },
  {
    "text": "that's basically a little monster might have gotten bitten you",
    "start": "3206599",
    "end": "3211760"
  },
  {
    "text": "know and they're just like yep that makes me extremely uncomfortable but I just joined and I don't want to be that",
    "start": "3211760",
    "end": "3217839"
  },
  {
    "text": "guy so they're not going to tell you and they're just going to walk around be like yep yep cute cute cute walks along",
    "start": "3217839",
    "end": "3225319"
  },
  {
    "text": "the border of the off and to be clear I think fipo said that about me because I love dogs like more than anybody who's",
    "start": "3225319",
    "end": "3232240"
  },
  {
    "text": "ever talked to me for more than 5 minutes knows that I love dogs more than pretty much anything I would say whoa",
    "start": "3232240",
    "end": "3238960"
  },
  {
    "text": "yeah I mean I I do actually agree with you um that it makes things complicated",
    "start": "3238960",
    "end": "3244720"
  },
  {
    "text": "I mean like yeah it can breing a source of joy for people like me who AR allergic and that love them but also um",
    "start": "3244720",
    "end": "3251359"
  },
  {
    "text": "if it's a source of conflict and discomfort or worse for people that I work with or people around me then that",
    "start": "3251359",
    "end": "3258559"
  },
  {
    "text": "isn't ideal either and and and you know aside from the case of like a service dog which I know that fleo oh that's",
    "start": "3258559",
    "end": "3266040"
  },
  {
    "text": "totally fine honestly I I think it's a really reasonable opinion service dogs are well trained and in general you know",
    "start": "3266040",
    "end": "3273880"
  },
  {
    "text": "if accommodations have to be made you know one can work Case by case but",
    "start": "3273880",
    "end": "3280119"
  },
  {
    "text": "honestly I never had the problem of oh no I'm really allergic to the service dog that can I can't not be around but I",
    "start": "3280119",
    "end": "3287760"
  },
  {
    "text": "did have the problem with pets a bunch because there's just many more pets it's just a numbers problem but how will the",
    "start": "3287760",
    "end": "3294319"
  },
  {
    "text": "management show how cool they are if they don't allow dogs in the office right what are you going to ban next",
    "start": "3294319",
    "end": "3299680"
  },
  {
    "text": "filipo Foos ball tables ping pong tables have gotten old yeah there you",
    "start": "3299680",
    "end": "3305960"
  },
  {
    "text": "go yeah Roberto do what do you think how do you feel about dogs in the office I'm",
    "start": "3305960",
    "end": "3312760"
  },
  {
    "text": "I'm I'm kind of scared of big dogs so I'm on philipo's side but also I have friends that are allergic to dogs and so",
    "start": "3312760",
    "end": "3320559"
  },
  {
    "text": "yeah I I agree uh unless they're needed like they're service dogs I'm not in",
    "start": "3320559",
    "end": "3325920"
  },
  {
    "text": "favor of that oh folks your unpopular opinions have so much to discuss on my",
    "start": "3325920",
    "end": "3331160"
  },
  {
    "text": "unpopular opinion was going to be I like yellow so wow this is just important",
    "start": "3331160",
    "end": "3336559"
  },
  {
    "text": "topics that you brought to the conversation there mine was completely useless that's a terrible opinion Rob",
    "start": "3336559",
    "end": "3343400"
  },
  {
    "text": "take it back is it the color you like or you just love that Coldplay song No the color just the color and the effect it",
    "start": "3343400",
    "end": "3350760"
  },
  {
    "text": "has on people there are so many better colors right yeah yeah beautiful colors",
    "start": "3350760",
    "end": "3357400"
  },
  {
    "text": "yellow is one of them I mean your headphones are yellow that's true now I was looking for clues of yellow to",
    "start": "3357400",
    "end": "3362520"
  },
  {
    "text": "verify for some reason I'm skeptical when Roberta says he likes yellow I think what is this a trick well I have",
    "start": "3362520",
    "end": "3368520"
  },
  {
    "text": "something else to brew it oh yellow gopher we a picture of that it's a podcast this",
    "start": "3368520",
    "end": "3375760"
  },
  {
    "text": "is a podcast yeah so I already tweeted this picture today so people just need",
    "start": "3375760",
    "end": "3381119"
  },
  {
    "text": "to go back I'll tweet it again I'm scared of those Gophers by the way that's my unpopular opinion those little",
    "start": "3381119",
    "end": "3386760"
  },
  {
    "text": "things I have no ideas about them they do look a little weird huh that one in particular that yellow one well it's a",
    "start": "3386760",
    "end": "3393559"
  },
  {
    "text": "podcast so this podcast still a podcast right basically I'm getting the Goofer closer and closer to the webcam till",
    "start": "3393559",
    "end": "3399520"
  },
  {
    "text": "Matt screams he didn't scream you passed the test sorry now I wasn't I wasn't suggesting do an audio commentary of it",
    "start": "3399520",
    "end": "3405119"
  },
  {
    "text": "I was suggesting let's not do that in the first place and focus on the audio right okay well unfortunately that's all",
    "start": "3405119",
    "end": "3412880"
  },
  {
    "text": "the time we have today uh thank you so much for joining us KT filipo and",
    "start": "3412880",
    "end": "3418960"
  },
  {
    "text": "Roberto and we'll see you next",
    "start": "3418960",
    "end": "3422920"
  },
  {
    "text": "time if you're not following go time on Twitter let's fix that bug we tweet live",
    "start": "3424160",
    "end": "3429400"
  },
  {
    "text": "show notifications clips and highlights from past episodes we take polls about",
    "start": "3429400",
    "end": "3434599"
  },
  {
    "text": "unpopular opinions and have a lot of fun join the conversation we're at go time",
    "start": "3434599",
    "end": "3439680"
  },
  {
    "text": "FM this episode was hosted by Matt ryer with special guests ktie Hawkman Roberto",
    "start": "3439680",
    "end": "3445079"
  },
  {
    "text": "clais and fipo vorta it was produced by Jared Santo that's me and we get our",
    "start": "3445079",
    "end": "3450359"
  },
  {
    "text": "music from the beat freak break master cylinder thanks to this episode sponsors digital ocean rol and pixie and of",
    "start": "3450359",
    "end": "3457400"
  },
  {
    "text": "course our longtime partners fley lenoe and rbar that's all for now we'll talk",
    "start": "3457400",
    "end": "3462920"
  },
  {
    "text": "to you again next [Music]",
    "start": "3462920",
    "end": "3473799"
  },
  {
    "text": "week [Music]",
    "start": "3473799",
    "end": "3503720"
  },
  {
    "text": "one [Music]",
    "start": "3503720",
    "end": "3529810"
  },
  {
    "text": "TR",
    "start": "3531000",
    "end": "3534000"
  }
]