[
  {
    "text": "so when we call os. exit you can just assume that from that point on it's like somebody just walked away and whatever",
    "start": "0",
    "end": "5040"
  },
  {
    "text": "happens happens but it's all tumbling down at some point yes it's a very very hard exit that's actually the only way",
    "start": "5040",
    "end": "11480"
  },
  {
    "text": "you can return an exit code that's non zero isn't it right that's interesting then so you have to be careful with that",
    "start": "11480",
    "end": "16760"
  },
  {
    "text": "you may well want your program to exit with a specific status code but if you're doing that deep somewhere in your",
    "start": "16760",
    "end": "23320"
  },
  {
    "text": "program it's possible other things aren't happening so you probably would only want to use OS exit right at the",
    "start": "23320",
    "end": "29400"
  },
  {
    "text": "top in the main or near there wouldn't you based on probably the return from some other functions that you're",
    "start": "29400",
    "end": "34559"
  },
  {
    "text": "creating as part of your application bandwith for change log is provided by fastly learn more at",
    "start": "34559",
    "end": "41879"
  },
  {
    "text": "fastly.com our feature flags are powered by launch Darkly check them out at launchdarkly dcom and we're hosted on",
    "start": "41879",
    "end": "48520"
  },
  {
    "text": "Lino Cloud servers get $100 in hosting credit at lin.com changelog what's up Gophers our friends",
    "start": "48520",
    "end": "55840"
  },
  {
    "text": "over gravitational made a big transition at the end of 2020 to to Rebrand as",
    "start": "55840",
    "end": "61000"
  },
  {
    "text": "teleport and shared a new product announcement to showcase the direction they're taking teleport is operating",
    "start": "61000",
    "end": "66360"
  },
  {
    "text": "from a vision of being able to run and access software anywhere in a secure and compliant manner something they call",
    "start": "66360",
    "end": "73040"
  },
  {
    "text": "environment free Computing with teleport engineering teams can quickly access any resource anywhere using a unified access",
    "start": "73040",
    "end": "80799"
  },
  {
    "text": "plane that consolidates access controls and auditing across all environments infrastructure applications as well as",
    "start": "80799",
    "end": "87840"
  },
  {
    "text": "data teleport server access let you SSH securely into Linux servers and smart",
    "start": "87840",
    "end": "93079"
  },
  {
    "text": "devices with a complete audit Trail teleport kubert's access let you access kuber's cluster securely with complete",
    "start": "93079",
    "end": "99320"
  },
  {
    "text": "visibility to access and behavior and finally teleport application access let you access web apps running behind KN",
    "start": "99320",
    "end": "106079"
  },
  {
    "text": "and firewalls with security and compliance try teleport today in the cloud self-hosted or open source head to",
    "start": "106079",
    "end": "112880"
  },
  {
    "text": "go",
    "start": "112880",
    "end": "115078"
  },
  {
    "text": "teleport.to [Music]",
    "start": "118840",
    "end": "127089"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "137760",
    "end": "144319"
  },
  {
    "text": "from around the go Community remember that Raspberry Pi 400 that Mark Bates won on our go iic episode he ended up",
    "start": "144319",
    "end": "151519"
  },
  {
    "text": "declining the prize because quote I'm allergic to raspberries so we're going to give it away instead to one lucky",
    "start": "151519",
    "end": "158160"
  },
  {
    "text": "listener and we'll announce that giveaway soon on Twitter follow at gotime FM right now so you don't miss it",
    "start": "158160",
    "end": "164560"
  },
  {
    "text": "okay let's get this program started here we [Music]",
    "start": "164560",
    "end": "170680"
  },
  {
    "text": "go hello and welcome to go time I'm Matt ryer today we're talking about what",
    "start": "171440",
    "end": "177560"
  },
  {
    "text": "happens when go program end what happens when the funk main Returns what happens",
    "start": "177560",
    "end": "185400"
  },
  {
    "text": "to gou teens that might already still be running or remember those deferred statements where have they what's",
    "start": "185400",
    "end": "191599"
  },
  {
    "text": "happening with them are they going to go what about open files do they get closed for me or do I have to do that what",
    "start": "191599",
    "end": "198640"
  },
  {
    "text": "about those uh HTTP response bodies supposed to be closing them remember I hope everyone's been remembering to",
    "start": "198640",
    "end": "204480"
  },
  {
    "text": "close response bodies but what happens to those when you exit well there's loads of questions question s and we're",
    "start": "204480",
    "end": "211000"
  },
  {
    "text": "going to find out the answer to all of them on this deep dive forensic analysis",
    "start": "211000",
    "end": "216840"
  },
  {
    "text": "breakdown Edition super cool where we look at what happens when go programs",
    "start": "216840",
    "end": "222599"
  },
  {
    "text": "end so yeah a very dramatic intro for uh what could be a very mundane subject but",
    "start": "222599",
    "end": "228159"
  },
  {
    "text": "I don't think it's going to be joining me today to discuss this it's regular John Calhoun hello John hey Matt you",
    "start": "228159",
    "end": "235840"
  },
  {
    "text": "told me earlier you've never had a go program end so You' this I didn't say that I said most of my programs aren't",
    "start": "235840",
    "end": "243480"
  },
  {
    "text": "designed to end so when they end what happens is I'm trying to make sure my server gets it back up right so",
    "start": "243480",
    "end": "249280"
  },
  {
    "text": "interesting so okay well I'm sure we'll talk more about that we're also joined by a member of the go team who's been",
    "start": "249280",
    "end": "255680"
  },
  {
    "text": "working on the runtime for the last 2.3 years he told me um welcome to the show",
    "start": "255680",
    "end": "265000"
  },
  {
    "text": "Michael kusek hello hello welcome thank you",
    "start": "265000",
    "end": "270120"
  },
  {
    "text": "excited to be here okay good is that real or is he just being polite show biz",
    "start": "270120",
    "end": "275600"
  },
  {
    "text": "polite I am nervous but also excited okay same they're similar aren't they they're similar things okay well let's",
    "start": "275600",
    "end": "282320"
  },
  {
    "text": "start for maybe right at the beginning then for for someone new to go what",
    "start": "282320",
    "end": "287960"
  },
  {
    "text": "happens I mean ultimately a program at the end will stop running so what",
    "start": "287960",
    "end": "294560"
  },
  {
    "text": "happens there what's going on well I guess what basically the go itself is",
    "start": "294560",
    "end": "301880"
  },
  {
    "text": "just G to sort of this is going to come out the wrong way hopefully we'll dive deeper in and explain why and and what",
    "start": "301880",
    "end": "308800"
  },
  {
    "text": "but go kind of just leaves a mess like leaves a mess behind and calls directly",
    "start": "308800",
    "end": "313840"
  },
  {
    "text": "into the operating system just like we're done with everything and everything dies and gets cleaned up uh",
    "start": "313840",
    "end": "320400"
  },
  {
    "text": "and the operating system goes and cleans everything up and if if that you know running go program had a parent process",
    "start": "320400",
    "end": "327680"
  },
  {
    "text": "well I on Linux all process proces that parents then it returns a it gives that",
    "start": "327680",
    "end": "333240"
  },
  {
    "text": "processor that parent a return code on Linux it's I believe usually some value",
    "start": "333240",
    "end": "338360"
  },
  {
    "text": "between 0 and 255 for compatibility reasons go uh os.",
    "start": "338360",
    "end": "345440"
  },
  {
    "text": "well I won't get into os. exit yet but but uh basically go by default returns",
    "start": "345440",
    "end": "351319"
  },
  {
    "text": "zero which means all good returning anything nonzero effectively means",
    "start": "351319",
    "end": "356440"
  },
  {
    "text": "something went wrong some programs like to use a different number for different meanings of something went wrong but",
    "start": "356440",
    "end": "362759"
  },
  {
    "text": "generally that's that's the pattern just everything went fine and something went wrong okay great and are they like HTTP",
    "start": "362759",
    "end": "368520"
  },
  {
    "text": "status codes those exit codes are there any standards or is it just that zero means it was success everything else is",
    "start": "368520",
    "end": "375199"
  },
  {
    "text": "then defined by the program I think that's the only thing you can actually rely on if you're dealing with a",
    "start": "375199",
    "end": "380280"
  },
  {
    "text": "specific program like you're writing like a rapper script for it and you want to have like maybe another error message",
    "start": "380280",
    "end": "385720"
  },
  {
    "text": "come out or or log that somewhere then it can be useful I feel like I know a few programs that like Define in like a",
    "start": "385720",
    "end": "392759"
  },
  {
    "text": "big table like what all the different values mean but uh I think in general the only thing you can rely on is is",
    "start": "392759",
    "end": "398960"
  },
  {
    "text": "zero and non zero right so in go a a main function when that returns there",
    "start": "398960",
    "end": "405880"
  },
  {
    "text": "there's no return argument so it just returns by falling out the back of the block that will just by default return",
    "start": "405880",
    "end": "411599"
  },
  {
    "text": "as zero then would it that's correct yeah and then if you do want to return something non zero that's when we need",
    "start": "411599",
    "end": "417560"
  },
  {
    "text": "to look at OS exit yes yes precisely okay well we'll get into that later but",
    "start": "417560",
    "end": "423160"
  },
  {
    "text": "you you mentioned that uh everything gets cleaned up by the operating system and go kind of leaves a mess what things",
    "start": "423160",
    "end": "430400"
  },
  {
    "text": "get cleaned up specifically there basically you know go go ask the operating system for a bunch of memory",
    "start": "430400",
    "end": "436400"
  },
  {
    "text": "so the the most obvious thing is all that memory gets collected so basically all of the memory related resources that",
    "start": "436400",
    "end": "442960"
  },
  {
    "text": "the uh OS had given the application um get reclaimed um other things uh include",
    "start": "442960",
    "end": "450120"
  },
  {
    "text": "if there are any open file handles and so this extends quite broadly but in in",
    "start": "450120",
    "end": "455720"
  },
  {
    "text": "the simple case you just have like a file on your local hard disk or something like what you usually think of",
    "start": "455720",
    "end": "461199"
  },
  {
    "text": "as a file basically the OS will close that file handle for you it keeps track",
    "start": "461199",
    "end": "466879"
  },
  {
    "text": "of all of them and once your program exits it goes over all of them and just says okay this process is no longer",
    "start": "466879",
    "end": "473599"
  },
  {
    "text": "using this file so that's cool then so the memory reclaiming the memory is nice so then if if we've got some program",
    "start": "473599",
    "end": "479039"
  },
  {
    "text": "that has has a massive map of data before we return we don't have to go through and delete all that data do we",
    "start": "479039",
    "end": "486120"
  },
  {
    "text": "we don't have to go and do that sort of cleaning up releasing memory that will just happen automatically right yeah and",
    "start": "486120",
    "end": "493440"
  },
  {
    "text": "then the files one's an interesting one if you open a file in go and normally we defer the close of that file or you",
    "start": "493440",
    "end": "500000"
  },
  {
    "text": "might have some other mechanism for closing that if you don't close that file and the program exits does that",
    "start": "500000",
    "end": "506680"
  },
  {
    "text": "leak a file handle or does the does the operate system clean that up no the operating system cleans that up so files",
    "start": "506680",
    "end": "512959"
  },
  {
    "text": "on most systems are like pretty the the concept of a file goes pretty pretty deep into the OS so it actually does",
    "start": "512959",
    "end": "520120"
  },
  {
    "text": "keep track of these things and does say like okay this process exited and",
    "start": "520120",
    "end": "525399"
  },
  {
    "text": "usually keeps like a reference count for these files if I recall a little bit Rusty on this part and it goes and",
    "start": "525399",
    "end": "531959"
  },
  {
    "text": "decrements that reference count right but basically it it does the equivalent of closing any open files here mhm right",
    "start": "531959",
    "end": "539240"
  },
  {
    "text": "right of course so if if you've got that code in a loop or something then it's important to remember to close files as",
    "start": "539240",
    "end": "545320"
  },
  {
    "text": "you go you can't rely on that program ending uh thing yeah yeah very cool John",
    "start": "545320",
    "end": "551839"
  },
  {
    "text": "how do you normally exit and deal with cancellation and things in your programs if you write a command line tool how",
    "start": "551839",
    "end": "558160"
  },
  {
    "text": "would you do it I mean the most common way you see is you know WAP or using context and sort of handling it that way",
    "start": "558160",
    "end": "564399"
  },
  {
    "text": "but I I can definitely say I'm guilty of not doing that all the time especially when it's you know if I'm writing",
    "start": "564399",
    "end": "570079"
  },
  {
    "text": "something just a quick tool for myself or whatever and I don't expect it to take very long you know if it's only",
    "start": "570079",
    "end": "575560"
  },
  {
    "text": "going to grab three files parse them real quick do something and and be done usually if I wanted to cancel it the program would be done before it ended",
    "start": "575560",
    "end": "581279"
  },
  {
    "text": "anyway so it really doesn't make much of a difference now if I had something more long running then maybe it makes more",
    "start": "581279",
    "end": "586600"
  },
  {
    "text": "sense I guess it kind of depends on what you're doing and whether or not stopping in the middle of something is actually",
    "start": "586600",
    "end": "591680"
  },
  {
    "text": "really bad or not so that's kind of like the the determining factor for me is is does it actually matter if it just stops",
    "start": "591680",
    "end": "598959"
  },
  {
    "text": "yeah yeah so that's interesting does it matter if this program just stops and you can imagine programs and I've written one recently that was processing",
    "start": "598959",
    "end": "606480"
  },
  {
    "text": "files and it would open another file to generate some data basically from the",
    "start": "606480",
    "end": "612640"
  },
  {
    "text": "first file so it would create a new file for each file that it found and it was kind of because it was a small hacky",
    "start": "612640",
    "end": "619399"
  },
  {
    "text": "thing it was relying on the existence of that file for state to see whether it' been processed or not so in this case if",
    "start": "619399",
    "end": "626600"
  },
  {
    "text": "the program just ended half way in the middle of all that somewhere I could end",
    "start": "626600",
    "end": "631640"
  },
  {
    "text": "up in a state on dis that that wasn't desirable and didn't didn't reflect the",
    "start": "631640",
    "end": "637639"
  },
  {
    "text": "reality of it so that leads us kind of into the this sort of talking about a graceful shutdown as well where we",
    "start": "637639",
    "end": "645800"
  },
  {
    "text": "notice that a program wants to end or the operating system or somebody wants to end this program but we've got some",
    "start": "645800",
    "end": "653279"
  },
  {
    "text": "work to do before so what are our options for doing something like that",
    "start": "653279",
    "end": "658600"
  },
  {
    "text": "how do we know that the program's going to end and how can we then do some work before so programs can really end I mean",
    "start": "658600",
    "end": "667440"
  },
  {
    "text": "broadly speaking can end in two ways either something tells the program to end or it decides I'm done and closes",
    "start": "667440",
    "end": "673839"
  },
  {
    "text": "itself out right so in the context of something external you might see",
    "start": "673839",
    "end": "679639"
  },
  {
    "text": "something like control C so so if you if you type control C in your command line then what basically happens is is Linux",
    "start": "679639",
    "end": "687000"
  },
  {
    "text": "sends what's called a signal which are surprisingly difficult to work with",
    "start": "687000",
    "end": "692480"
  },
  {
    "text": "correctly outside of go go actually makes this quite nice to use because it it wraps the whole thing in a channel but you send once your program receives",
    "start": "692480",
    "end": "700720"
  },
  {
    "text": "a signal and needs to handle it in some way and so with go you can use the OS uh",
    "start": "700720",
    "end": "707399"
  },
  {
    "text": "signal package to get notified about when you get something like control C",
    "start": "707399",
    "end": "712680"
  },
  {
    "text": "something wants to end your program and so using the OS signal package lets you",
    "start": "712680",
    "end": "717880"
  },
  {
    "text": "capture that and say okay uh let me do the cleanup that I need to do so that I can get my graceful shut down internally",
    "start": "717880",
    "end": "724959"
  },
  {
    "text": "there's sort of more if the program wants to end internally there's sort of",
    "start": "724959",
    "end": "730000"
  },
  {
    "text": "more more of an assumption that the the program as a whole would know that and",
    "start": "730000",
    "end": "735079"
  },
  {
    "text": "if it wants to gracefully shut down then it has to provide its own mechanism for doing so right that makes sense so is",
    "start": "735079",
    "end": "742320"
  },
  {
    "text": "that code is that quite messy in in in the runtime code there because I imagine there's lots of edge cases that it's",
    "start": "742320",
    "end": "747920"
  },
  {
    "text": "dealing with and lots of different operating systems right well signal handling is notoriously difficult",
    "start": "747920",
    "end": "753959"
  },
  {
    "text": "because a signal Handler can run just about any time on any thread which means",
    "start": "753959",
    "end": "760360"
  },
  {
    "text": "that like you can a signal can land where you're right in the middle of like holding several locks and you're like",
    "start": "760360",
    "end": "766360"
  },
  {
    "text": "okay is it safe to do anything yeah that part of the runtime is actually quite tricky and and difficult to get right",
    "start": "766360",
    "end": "773680"
  },
  {
    "text": "and it's also a complicated part of the OS too like Austin on the go team found a bug in the Linux kernel related to",
    "start": "773680",
    "end": "781000"
  },
  {
    "text": "signals uh in the go4 release cycle so like you know it's tough yeah I mean it's quite old it's",
    "start": "781000",
    "end": "789000"
  },
  {
    "text": "old Tech really isn't it CU it's really core so it's like really deep somehow in",
    "start": "789000",
    "end": "794160"
  },
  {
    "text": "in in in amongst this yeah yeah but the signal package does really give you a",
    "start": "794160",
    "end": "800040"
  },
  {
    "text": "very nice wrapper around this uh it's very safe very much easier to use than a regular signal Handler so let's say I'm",
    "start": "800040",
    "end": "806800"
  },
  {
    "text": "I'm jumping into this and I want to figure out how to capture signals do I have to learn about a bunch of different",
    "start": "806800",
    "end": "812000"
  },
  {
    "text": "signals like if somebody's using like kill in the Linux terminal to to drop a process versus control C versus like a",
    "start": "812000",
    "end": "817800"
  },
  {
    "text": "bunch of different ways you can try to stop a program or is this kind of you pick one or two signals and go from them",
    "start": "817800",
    "end": "823120"
  },
  {
    "text": "you know where does somebody start if they want to get started with this I think the OS signal package documentation does uh describe the",
    "start": "823120",
    "end": "829959"
  },
  {
    "text": "different signals pretty well uh it's funny you mentioned kill because if I recall correctly kill is like one of",
    "start": "829959",
    "end": "835959"
  },
  {
    "text": "those signals that you just simply can't catch that's what's kind of dangerous about kill is that if you send kill to a",
    "start": "835959",
    "end": "842160"
  },
  {
    "text": "process it never gets the opportunity to clean up it's like a force force force",
    "start": "842160",
    "end": "847240"
  },
  {
    "text": "force quit right like there's no opportunity the other two that I'm aware",
    "start": "847240",
    "end": "852399"
  },
  {
    "text": "of are uh Sig in so that's interrupt that's that's the that's control C and",
    "start": "852399",
    "end": "858079"
  },
  {
    "text": "Sig abort is is kind of uh interesting because that will uh cause the the go",
    "start": "858079",
    "end": "864759"
  },
  {
    "text": "run time to actually dump a bunch of basically dump a bunch of gortin stats stack traces but sigapore is another one",
    "start": "864759",
    "end": "872480"
  },
  {
    "text": "that that is sometimes useful to handle explicitly but control C is like the big one I do think the OS signal package",
    "start": "872480",
    "end": "878639"
  },
  {
    "text": "provides some pretty good documentation on this because it's also wrapping around the fact that you have lots of",
    "start": "878639",
    "end": "884279"
  },
  {
    "text": "different like go supports lots of different platforms and of course this is going to work slightly differently on like Windows and stuff so I defer to the",
    "start": "884279",
    "end": "891440"
  },
  {
    "text": "OS signal documentation for like precise semantics fair enough and since go 116",
    "start": "891440",
    "end": "899279"
  },
  {
    "text": "we actually also have a notify context helper too in the signal package which",
    "start": "899279",
    "end": "904880"
  },
  {
    "text": "will cancel a context on a on a signal so that's kind of like nice so if you're",
    "start": "904880",
    "end": "912160"
  },
  {
    "text": "using context for cancellation across your program and this is essentially the pattern for anyone unfamiliar where you",
    "start": "912160",
    "end": "918000"
  },
  {
    "text": "pass in a context argument as the first argument through the chain of all your programs and then whenever you've got",
    "start": "918000",
    "end": "924440"
  },
  {
    "text": "Loops within that of work or maybe you're iterating over a set of data you can just periodically I.E at the",
    "start": "924440",
    "end": "931800"
  },
  {
    "text": "start of each Loop check to see if that context is is finished and there's either a channel that'll be closed or",
    "start": "931800",
    "end": "938319"
  },
  {
    "text": "you can check to see if there's an error being returned and then you can abort that operation so that's a nice way to",
    "start": "938319",
    "end": "943920"
  },
  {
    "text": "do kind of graceful shutdown or at least you'll finish your what I'm finish what I'm currently doing and then I'll stop",
    "start": "943920",
    "end": "950319"
  },
  {
    "text": "gives you that sort of graceful shutdown you can do that quite nicely with context but you had to you used to have",
    "start": "950319",
    "end": "956519"
  },
  {
    "text": "to write that signal code yourself and with the addition of notify context you",
    "start": "956519",
    "end": "962040"
  },
  {
    "text": "don't need to anymore you can just wire it up to a context and it will be cancelled for you when the program's",
    "start": "962040",
    "end": "969560"
  },
  {
    "text": "interrupted and I think it's good practice this is something I always do if you get a second interrupt signal",
    "start": "969560",
    "end": "976480"
  },
  {
    "text": "then it's worth doing a a more serious exit I mean sometimes I think operating",
    "start": "976480",
    "end": "982199"
  },
  {
    "text": "systems will send a kill as the second signal but if it's just a command line then you press contrl C and something's",
    "start": "982199",
    "end": "989440"
  },
  {
    "text": "wrong in your logic somewhere you can easily hang because you you've caught that signal so it can be good practice",
    "start": "989440",
    "end": "996839"
  },
  {
    "text": "to look for a second one and do an immediate OS exit and that way you never get caught having to go and try and",
    "start": "996839",
    "end": "1002880"
  },
  {
    "text": "force quit your own business yeah So Graceful that's kind of graceful shutdown I think is very cool another",
    "start": "1002880",
    "end": "1009319"
  },
  {
    "text": "way to get a a kind of form of graceful shutdown or at least of cleaning up after you is with the defer statement so",
    "start": "1009319",
    "end": "1016759"
  },
  {
    "text": "in in the funk Main function when you defer things in there they do get called",
    "start": "1016759",
    "end": "1022639"
  },
  {
    "text": "before the function exits and therefore before the program exits but that's not true for OS exit is it Michael no so uh",
    "start": "1022639",
    "end": "1031678"
  },
  {
    "text": "OS exit uh the is is a hard exit it it basically does the minimal amount of",
    "start": "1031679",
    "end": "1038839"
  },
  {
    "text": "cleanup necessary which basically in for for the go run time just means if you're",
    "start": "1038839",
    "end": "1044438"
  },
  {
    "text": "running with a race detector enabled it'll do some cleanup with the race detector so try to signal that like oh",
    "start": "1044439",
    "end": "1049520"
  },
  {
    "text": "if you have a racy program it's going to make sure its exit code it's non zero for for instance but otherwise yeah it",
    "start": "1049520",
    "end": "1056240"
  },
  {
    "text": "basically just as a hard exit it doesn't bother trying to run deferred functions",
    "start": "1056240",
    "end": "1061600"
  },
  {
    "text": "it also doesn't bother trying to run finalizers uh if you're aware of those kind of a dark dark corner but worth",
    "start": "1061600",
    "end": "1071320"
  },
  {
    "text": "mentioning yes okay so OS exit is a very immediate stop and you're not going to",
    "start": "1071320",
    "end": "1077159"
  },
  {
    "text": "have the nice things that go would give you uh so have you do have to bear that in mind another thing that's quite",
    "start": "1077159",
    "end": "1083640"
  },
  {
    "text": "interesting is what happens to the standard in andout streams and standard",
    "start": "1083640",
    "end": "1089159"
  },
  {
    "text": "error for example will does standard out receive an IO eof at the end of it does",
    "start": "1089159",
    "end": "1095919"
  },
  {
    "text": "it does it do something to close the pipe what's actually going on there is that operating system dependent too this",
    "start": "1095919",
    "end": "1102039"
  },
  {
    "text": "might be somewhat s independent I'm thinking more in terms of uh the like Linux Unix uh of philosophy where M",
    "start": "1102039",
    "end": "1110159"
  },
  {
    "text": "pipes are just files like to the operating system it's like the it uses the same sort of resource file handle",
    "start": "1110159",
    "end": "1117000"
  },
  {
    "text": "right and these standard out standard error standard in all get closed in",
    "start": "1117000",
    "end": "1123240"
  },
  {
    "text": "exactly the same way as any other file I will note that the moment you do this sort of exit call whether or not code",
    "start": "1123240",
    "end": "1131200"
  },
  {
    "text": "runs is sort of completely up in the air right some some go code may run in that you know you know few milliseconds",
    "start": "1131200",
    "end": "1137840"
  },
  {
    "text": "before the process gets taken down or or the the rather it's thread stops but you can't you can't rely on that right so",
    "start": "1137840",
    "end": "1144280"
  },
  {
    "text": "there's no eof propagated through because it it doesn't even like there's no code to even process that EO io. eof",
    "start": "1144280",
    "end": "1151320"
  },
  {
    "text": "if that makes sense like the the code is not guaranteed to run at all so when we call os. exit you can just assume that",
    "start": "1151320",
    "end": "1158320"
  },
  {
    "text": "from that point on it's like somebody just walked away and whatever happens happens but it's all tumbling down at",
    "start": "1158320",
    "end": "1163640"
  },
  {
    "text": "some point yes it's a very very hard exit and that's the one that's actually",
    "start": "1163640",
    "end": "1169159"
  },
  {
    "text": "the only way you can return an exit code that's non zero isn't it right so that's",
    "start": "1169159",
    "end": "1174480"
  },
  {
    "text": "that's interesting then so you have to be careful with that you may well want your program to exit with a specific",
    "start": "1174480",
    "end": "1180640"
  },
  {
    "text": "status code but if you're doing that deep somewhere in your program it's possible other things aren't happening",
    "start": "1180640",
    "end": "1187120"
  },
  {
    "text": "so you probably would only want to use OS exit right at the top in the main or",
    "start": "1187120",
    "end": "1192799"
  },
  {
    "text": "very near that near there wouldn't you uh based on probably the return from some other functions that that you're",
    "start": "1192799",
    "end": "1198400"
  },
  {
    "text": "creating as part of your application yeah that's generally good pattern basically what I see is is like you know",
    "start": "1198400",
    "end": "1204520"
  },
  {
    "text": "you have Main and if you just return cleanly from Main then that's your exit zero because actually interestingly",
    "start": "1204520",
    "end": "1210840"
  },
  {
    "text": "enough if you look under the hood when you return from Main all it does is do a very tiny bit of cleanup which is that",
    "start": "1210840",
    "end": "1217559"
  },
  {
    "text": "race detector stuff and then it calls the same exit system call it does",
    "start": "1217559",
    "end": "1223039"
  },
  {
    "text": "exactly the same thing that OS exit does so that's sort of also the just the right point to to put the exit because",
    "start": "1223039",
    "end": "1230480"
  },
  {
    "text": "it's it's basically like saying well if I return from Main it'll just call os. Exit Zero effectively so now is a good",
    "start": "1230480",
    "end": "1237360"
  },
  {
    "text": "point to run os. exit one uh that being said it depends on the program right like I could certainly imagine a program",
    "start": "1237360",
    "end": "1243919"
  },
  {
    "text": "where you get to a point you're like there is no way I can proceed even if other things are still running there's",
    "start": "1243919",
    "end": "1249840"
  },
  {
    "text": "absolutely no way I can proceed maybe it just makes sense to drop everything on this St yeah and I guess P we have",
    "start": "1249840",
    "end": "1255960"
  },
  {
    "text": "panics and go for situations sometimes like that yeah and that is interesting",
    "start": "1255960",
    "end": "1261280"
  },
  {
    "text": "panics themselves are quite an interesting case then here because they they can occur anywhere in the program",
    "start": "1261280",
    "end": "1267840"
  },
  {
    "text": "and if on CAU they have the effect of ending the program but defers do run",
    "start": "1267840",
    "end": "1273279"
  },
  {
    "text": "with panics don't they we know that because that's how you recover from panics is you run code in a defer",
    "start": "1273279",
    "end": "1279520"
  },
  {
    "text": "function precisely panics are going to run defers and that's actually not the only thing that's going to run defers if",
    "start": "1279520",
    "end": "1284960"
  },
  {
    "text": "you do run time.go exit like you exit like a girl uh calls Run time.go exit it will also",
    "start": "1284960",
    "end": "1291400"
  },
  {
    "text": "have its defers executed and this is you know totally safe to do because it's basically just the gortin itself is",
    "start": "1291400",
    "end": "1299120"
  },
  {
    "text": "synchronously we know we're stopping execution of the gortin at this point and we're sort of walking back and",
    "start": "1299120",
    "end": "1305159"
  },
  {
    "text": "running all of the [Music]",
    "start": "1305159",
    "end": "1317010"
  },
  {
    "text": "jeers hey Gophers this episode is brought to you by our friends at launch darkley",
    "start": "1317039",
    "end": "1322480"
  },
  {
    "text": "feature management for the modern Enterprise power experimentation in production here's how it works launch",
    "start": "1322480",
    "end": "1328600"
  },
  {
    "text": "Darkly enables development and operation teams to deploy code at any time even if",
    "start": "1328600",
    "end": "1333679"
  },
  {
    "text": "a feature isn't ready to be released to users wrapping code with feature Flags gives you the safety to test new",
    "start": "1333679",
    "end": "1339320"
  },
  {
    "text": "features and infrastructure in your production environments without impacting the wrong end users when",
    "start": "1339320",
    "end": "1344840"
  },
  {
    "text": "you're ready to release more Wy simply update the feature flag and the changes are made instantaneously by the",
    "start": "1344840",
    "end": "1351159"
  },
  {
    "text": "real-time streaming architecture eliminate risk deliver value get started for free today at launchd dark.com again",
    "start": "1351159",
    "end": "1358120"
  },
  {
    "text": "launchd dark.com",
    "start": "1358120",
    "end": "1361039"
  },
  {
    "text": "[Music]",
    "start": "1368370",
    "end": "1381299"
  },
  {
    "text": "so if you're doing like Run time.go exit for a go routine I assume that you don't have the same cleanup guarantees that",
    "start": "1382320",
    "end": "1388960"
  },
  {
    "text": "you would have with a os. exit call like how you set all the files and all the other stuff from the OS gets handled I'm",
    "start": "1388960",
    "end": "1394640"
  },
  {
    "text": "assuming that the go routines files aren't kept track of separately no no that's handled at a much lower level",
    "start": "1394640",
    "end": "1399960"
  },
  {
    "text": "right so yeah if if your go routine exits that says if one goroutine exits unless it's the last goroutine of course",
    "start": "1399960",
    "end": "1406919"
  },
  {
    "text": "then that says nothing about the rest of the resources that the program might be holding on to yeah that's interesting",
    "start": "1406919",
    "end": "1412240"
  },
  {
    "text": "when you think about things like HTTP response bodies it's very important you",
    "start": "1412240",
    "end": "1417760"
  },
  {
    "text": "know it's a you get a read closer when you get one of these you get it if you make a request using a HTTP client you",
    "start": "1417760",
    "end": "1425799"
  },
  {
    "text": "get back a response and and that response may or may not have a body and we're responsible for closing those",
    "start": "1425799",
    "end": "1431440"
  },
  {
    "text": "bodies to to clean up memory and things presumably that gets sorted out for us",
    "start": "1431440",
    "end": "1437440"
  },
  {
    "text": "if the program ends things like that because they sort of rely on the underlying operating system for managing",
    "start": "1437440",
    "end": "1444200"
  },
  {
    "text": "resources right right so again in the Unix philosophy of everything is a file",
    "start": "1444200",
    "end": "1449840"
  },
  {
    "text": "so is an internet connection so is a tcpip connection which sort of underlies all of HTTP right it's it's it's the",
    "start": "1449840",
    "end": "1457000"
  },
  {
    "text": "backbone to this on most operating systems built right into the operating system and it's usually exposed through",
    "start": "1457000",
    "end": "1463159"
  },
  {
    "text": "an interface that looks like a socket and the interface for this and go looks like a net con and that sort of",
    "start": "1463159",
    "end": "1469679"
  },
  {
    "text": "represents the underlying connection and so basically if you os. exit it's going to close that socket like it was any",
    "start": "1469679",
    "end": "1476799"
  },
  {
    "text": "other file so if you have a client on the other side listening on that connection then it's going to be the",
    "start": "1476799",
    "end": "1482720"
  },
  {
    "text": "same thing as if the connection was abruptly uh ended right so it's the same sort of failure mode the cool thing",
    "start": "1482720",
    "end": "1489320"
  },
  {
    "text": "about some of these is you can actually test them if you like go write a little program that just has a web server and",
    "start": "1489320",
    "end": "1494480"
  },
  {
    "text": "just sits there and sleeps for 10 seconds and you know you curl into into it or whatever just to make a connection and then close the server and see what",
    "start": "1494480",
    "end": "1500600"
  },
  {
    "text": "happens you can kind of see what's going on you mean as a client of that of a server just dying yeah like if you just",
    "start": "1500600",
    "end": "1507720"
  },
  {
    "text": "use Curl as the client to connect to your server that you just wrote like running on local host or whatever and your server is just like do like a sleep",
    "start": "1507720",
    "end": "1513799"
  },
  {
    "text": "for 10 seconds before it responds and you you know control SE it or kill it before it's actually done you can kind of see well did this close the body or",
    "start": "1513799",
    "end": "1520760"
  },
  {
    "text": "respond or anything quite a cool API that just sort of restful mindfulness not restful but mindfulness of of just",
    "start": "1520760",
    "end": "1528039"
  },
  {
    "text": "sleeping let OPI just sleep I think that's a great idea especially in this today's world of just you know",
    "start": "1528039",
    "end": "1534640"
  },
  {
    "text": "everything's fast going fast outside like in a film it's perfect people call it to see if a web request is timed out",
    "start": "1534640",
    "end": "1540200"
  },
  {
    "text": "yeah there you go it's nice Michael how did you get into computers in the first place mate uh that was like a long time",
    "start": "1540200",
    "end": "1547640"
  },
  {
    "text": "ago I actually started with what is now dead uh Flash no really flush that was",
    "start": "1547640",
    "end": "1553200"
  },
  {
    "text": "sort of my foray into it like a really long time ago uh and then just kind of spiraled from there I thought I wanted",
    "start": "1553200",
    "end": "1559520"
  },
  {
    "text": "to be an animator then it turned out I was terrible at drawing things and then I I kind of dug into the programming",
    "start": "1559520",
    "end": "1565480"
  },
  {
    "text": "aspect and action script wasn't it yeah yeah and then I dug more into it in in",
    "start": "1565480",
    "end": "1571520"
  },
  {
    "text": "um in high school in college and now I'm here well several years later and now",
    "start": "1571520",
    "end": "1577640"
  },
  {
    "text": "I'm here yeah oh that's cool yeah I used to do flash as well um action script got",
    "start": "1577640",
    "end": "1583799"
  },
  {
    "text": "quite good as a language didn't it it got really quite I couldn't believe all the things you could do with it yeah at",
    "start": "1583799",
    "end": "1589600"
  },
  {
    "text": "the end but I agree and I lik the fact too it was very visual cuz for the web you know you couldn't do that much with",
    "start": "1589600",
    "end": "1596039"
  },
  {
    "text": "CSS you know and and you were very limited with stuff flash was the way to get something bit more interesting in",
    "start": "1596039",
    "end": "1602679"
  },
  {
    "text": "the web back then nothing wrong with flash yeah yeah I have very fun memories",
    "start": "1602679",
    "end": "1608720"
  },
  {
    "text": "of using the um like the actual Flash software itself not like flash player",
    "start": "1608720",
    "end": "1614200"
  },
  {
    "text": "but like yeah just like being able to drag and drop things things and like you you you click a little little object and",
    "start": "1614200",
    "end": "1620600"
  },
  {
    "text": "you put code directly on it and like just feels like wow I can put code directly on this on this button to like",
    "start": "1620600",
    "end": "1627320"
  },
  {
    "text": "have it react to things yeah sense doesn't it yeah I like the fact in in",
    "start": "1627320",
    "end": "1633720"
  },
  {
    "text": "Flash and in action script you had objects that were like base classes so",
    "start": "1633720",
    "end": "1638919"
  },
  {
    "text": "you could have other objects that were versions of that in some way transformed so that was a very strange mindset to",
    "start": "1638919",
    "end": "1646520"
  },
  {
    "text": "get into but I suppose if you're used to oo programming it probably fits quite nicely I remember that being quite cool",
    "start": "1646520",
    "end": "1653200"
  },
  {
    "text": "where you could CH make changes to the base object and it would sort of cascade down the entire tree of them as well",
    "start": "1653200",
    "end": "1659799"
  },
  {
    "text": "yeah I don't know if that'll make it into the go podcast mate about go but so one of the questions that was",
    "start": "1659799",
    "end": "1667279"
  },
  {
    "text": "asked I believe on Twitter was why are deferred functions not run when os. exit",
    "start": "1667279",
    "end": "1672960"
  },
  {
    "text": "is called uh I think there's actually a pretty good explanation here so so if",
    "start": "1672960",
    "end": "1678159"
  },
  {
    "text": "you call go exit right then you have a go team that's saying I'm done right I'm",
    "start": "1678159",
    "end": "1685480"
  },
  {
    "text": "going to quit and so it is totally safe for it to run its own defers right but",
    "start": "1685480",
    "end": "1691399"
  },
  {
    "text": "now consider like you have a goroutine that decides oh I'm going to exit and",
    "start": "1691399",
    "end": "1697080"
  },
  {
    "text": "now let's consider this world where if you call. exit it runs all the defers in your application right so what ends up",
    "start": "1697080",
    "end": "1704720"
  },
  {
    "text": "happening is the gortin called os. exit and it stops everything else and it asks",
    "start": "1704720",
    "end": "1711640"
  },
  {
    "text": "it it asks all these gorin wherever they are to start running their defers the tricky part is it's not always going to",
    "start": "1711640",
    "end": "1718000"
  },
  {
    "text": "be safe to run those defers you don't know where those go routines actually stopped with a go exit at least you as",
    "start": "1718000",
    "end": "1724480"
  },
  {
    "text": "the programmer know okay I'm calling this at a point where I know the defers are going to run fine so let's say you",
    "start": "1724480",
    "end": "1731000"
  },
  {
    "text": "have a defer that relies on some variable uh that it captures like you",
    "start": "1731000",
    "end": "1736279"
  },
  {
    "text": "you know you have defer Funk open parentheses close parentheses and in there you do something with a variable",
    "start": "1736279",
    "end": "1742039"
  },
  {
    "text": "declared outside that's a pointer and it's nil at first but by the end of the function it is actually non-nil and it's",
    "start": "1742039",
    "end": "1747760"
  },
  {
    "text": "relying on that to not actually Panic inside of the defer well what happens if some other go routine calls go exit like",
    "start": "1747760",
    "end": "1755200"
  },
  {
    "text": "right in the middle of that function's execution now your exit is going to cause this other go routine somewhere",
    "start": "1755200",
    "end": "1761360"
  },
  {
    "text": "else to panic and that isn't what you intended at all right and it also brings this sort of global thinking into your",
    "start": "1761360",
    "end": "1768399"
  },
  {
    "text": "code where now you have to consider like oh no but maybe this can actually be nil because something else can call go os.",
    "start": "1768399",
    "end": "1776120"
  },
  {
    "text": "exit there is a valid question of whether maybe os. exit should you know",
    "start": "1776120",
    "end": "1781679"
  },
  {
    "text": "execute the defer of the calling G team the G team that actually called os. exit um but it just seems a little I guess",
    "start": "1781679",
    "end": "1789360"
  },
  {
    "text": "inconsistent to do that it seems a little weird to just have that one that one go but I I don't actually have a",
    "start": "1789360",
    "end": "1795840"
  },
  {
    "text": "good answer there that for me could go either way I would imagine that one would be weird in the sense that like if",
    "start": "1795840",
    "end": "1801760"
  },
  {
    "text": "your defer somehow has like an infinite Loop or something in it which I know sounds weird but if there was something weird like that you'd probably want some",
    "start": "1801760",
    "end": "1807960"
  },
  {
    "text": "other way to like finally terminate the program I guess programmatically and you know so like You' need some other API",
    "start": "1807960",
    "end": "1814880"
  },
  {
    "text": "that basically does what OS xit does but like not being OS xit and then it would just be weird and I think one thing",
    "start": "1814880",
    "end": "1821120"
  },
  {
    "text": "worth like clarifying which I don't know if we've actually touched on is when you call os. exit it terminates all go",
    "start": "1821120",
    "end": "1826760"
  },
  {
    "text": "routines correct yes going say I don't know if we'd actually touched that but that was like a big part of what you were saying there was like you know if",
    "start": "1826760",
    "end": "1832559"
  },
  {
    "text": "another go routine gets shut down randomly it's not the one in control of that yeah yeah well when I think about",
    "start": "1832559",
    "end": "1837840"
  },
  {
    "text": "exit I think of the go program as just like this one big black box and it's almost like you're just throwing that",
    "start": "1837840",
    "end": "1843640"
  },
  {
    "text": "whole box into the garbage right that's what I think of when I think of exit right and that includes all the gortin inside all of the resources that were",
    "start": "1843640",
    "end": "1850720"
  },
  {
    "text": "contained within that box mhm so it's interesting then do you think that's a sensible strategy if you've got a",
    "start": "1850720",
    "end": "1856880"
  },
  {
    "text": "program that maybe like John you never expect them to end cuz they're that good and",
    "start": "1856880",
    "end": "1862799"
  },
  {
    "text": "people rely on them that much they can never end or if you've got situation where youve got lots of go routines",
    "start": "1862799",
    "end": "1869679"
  },
  {
    "text": "maybe that are going to be running but once when you want something to stop you're just happy that they all just get aborted and it doesn't matter is that an",
    "start": "1869679",
    "end": "1876960"
  },
  {
    "text": "okay strategy if a junior developer did that would they receive scorn from senior developers I don't think so I",
    "start": "1876960",
    "end": "1884480"
  },
  {
    "text": "think generally speaking there AR that many cases where a truly graceful",
    "start": "1884480",
    "end": "1890559"
  },
  {
    "text": "shutdown is necessary and especially because in those cases things get really",
    "start": "1890559",
    "end": "1895760"
  },
  {
    "text": "messy right there are some resources that like you really do want to clean up",
    "start": "1895760",
    "end": "1901279"
  },
  {
    "text": "right uh if you have a child process and you say that you want to wait for that child process to end before you exit",
    "start": "1901279",
    "end": "1907720"
  },
  {
    "text": "right or let's say you know you use you're you're running as route and you create a new network interface because",
    "start": "1907720",
    "end": "1913200"
  },
  {
    "text": "you're Docker or something like that when you exit you might want to actually",
    "start": "1913200",
    "end": "1918480"
  },
  {
    "text": "clean that up and cleaning that up despite especially in a large application no matter what could",
    "start": "1918480",
    "end": "1924240"
  },
  {
    "text": "possibly happen is actually fairly complicated to do so my perspective on",
    "start": "1924240",
    "end": "1929320"
  },
  {
    "text": "this tends to be one way to look at it is have a graceful shutdown try to clean up everything before you exit another",
    "start": "1929320",
    "end": "1935799"
  },
  {
    "text": "way to look at it is just have your program be resilient to stuff being left on the ground so when it comes back up",
    "start": "1935799",
    "end": "1941760"
  },
  {
    "text": "and it sees that there's something with the same name already there then it just deals with it in some way it's it's",
    "start": "1941760",
    "end": "1948039"
  },
  {
    "text": "always going to be hard right this is always going to be a hard problem cleaning up or tear down or or shut down",
    "start": "1948039",
    "end": "1953559"
  },
  {
    "text": "termination whatever you want to call it is always a hard problem yeah but I think that's good advice though Michael even if your",
    "start": "1953559",
    "end": "1961120"
  },
  {
    "text": "program you're writing doesn't really need to do much graceful shutdown it's quite nice practice to build that into a",
    "start": "1961120",
    "end": "1967960"
  },
  {
    "text": "little command line tool for example where you interrupt the command C even if there's just some just printing a",
    "start": "1967960",
    "end": "1974679"
  },
  {
    "text": "statement to say that we're cleaning up or finishing whatever I think it is good practice building it in Dave Cheney",
    "start": "1974679",
    "end": "1980760"
  },
  {
    "text": "talks a lot about if when you start a go routine know how it's going to end you know if you think about long running",
    "start": "1980760",
    "end": "1987399"
  },
  {
    "text": "systems that have this long life then you do it matters it matters when things are going to get to torn down especially",
    "start": "1987399",
    "end": "1994279"
  },
  {
    "text": "if you're not relying on them to just be restarted all the time so I think it is quite nice it's nice to have that as a",
    "start": "1994279",
    "end": "2000480"
  },
  {
    "text": "mindset and also can help your design too like it might lead you to a slightly",
    "start": "2000480",
    "end": "2006080"
  },
  {
    "text": "more elegant design if if it's difficult to see how you're going to stop certain things from running um maybe there's there's a",
    "start": "2006080",
    "end": "2013559"
  },
  {
    "text": "simpler way to put it together but yeah I I absolutely agree yeah some processes",
    "start": "2013559",
    "end": "2019760"
  },
  {
    "text": "are interesting I learned by default when you run a subprocess it doesn't get",
    "start": "2019760",
    "end": "2025200"
  },
  {
    "text": "terminated when your program gets terminated at least on a Mac it didn't",
    "start": "2025200",
    "end": "2030360"
  },
  {
    "text": "um and and I had to set the program group I think I had to set some group ID",
    "start": "2030360",
    "end": "2036279"
  },
  {
    "text": "I think there was some work around it was a strange thing though do you know anything about what's going on there Michael yeah so the way this works is",
    "start": "2036279",
    "end": "2043120"
  },
  {
    "text": "that if a process has children and it exits basically every operating system I I know Windows has this exact same",
    "start": "2043120",
    "end": "2049520"
  },
  {
    "text": "behavior um and so so does Linux that if a parent process exits then the child is",
    "start": "2049520",
    "end": "2056760"
  },
  {
    "text": "orphaned instead of just being exited immediately which you know there like you said there are workarounds with this",
    "start": "2056760",
    "end": "2062280"
  },
  {
    "text": "you can treat the whole process uh you can make a process group and you know send a signal to everything in there but",
    "start": "2062280",
    "end": "2068200"
  },
  {
    "text": "if you don't do that then the child is orphaned and it has to have some kind of new parent to fit into the sort of",
    "start": "2068200",
    "end": "2075000"
  },
  {
    "text": "hierarchy of processes and on Linux that means getting inherited by the root",
    "start": "2075000",
    "end": "2080398"
  },
  {
    "text": "process which is just this process that sits there and waits for its children to",
    "start": "2080399",
    "end": "2085800"
  },
  {
    "text": "finish finish up so if you do exit and you still have a child process running it will continue to run you know until",
    "start": "2085800",
    "end": "2092720"
  },
  {
    "text": "it closes yeah so that is interesting that is worth watching out for because I don't think that's what you'd expect",
    "start": "2092720",
    "end": "2099040"
  },
  {
    "text": "to happen if I feel like if you think of starting up subprocesses you'd expect",
    "start": "2099040",
    "end": "2104160"
  },
  {
    "text": "them to terminate when the signal is received into the the program that started them but yeah there are",
    "start": "2104160",
    "end": "2110200"
  },
  {
    "text": "workarounds one of them is of course to use command context and use context again and that way um when you cancel",
    "start": "2110200",
    "end": "2117160"
  },
  {
    "text": "the context it has this cascading effect I think of killing basically the the sub",
    "start": "2117160",
    "end": "2122520"
  },
  {
    "text": "processes that's another way to do it which is quite cool when you do it that way if you just OS exit does it end up",
    "start": "2122520",
    "end": "2129040"
  },
  {
    "text": "propagating through all of those as well then no I think OS exit just kills everything gone then it so yeah if you",
    "start": "2129040",
    "end": "2134480"
  },
  {
    "text": "have go code that's supposed to run to clean up your subprocesses and you call go exit there's no guarantee that it's",
    "start": "2134480",
    "end": "2139680"
  },
  {
    "text": "going to run yeah you'd have to exit through some managed mechanism usually",
    "start": "2139680",
    "end": "2144880"
  },
  {
    "text": "returning an error or something can can be different ways to do it it's just part of the design I guess yeah and I",
    "start": "2144880",
    "end": "2152000"
  },
  {
    "text": "like just to make sure I'm on the same page when you're talking about subprocesses you mean if you're using like um I think it's command is the",
    "start": "2152000",
    "end": "2158160"
  },
  {
    "text": "function and go exec command yeah EXA command and then you like grab the output or whatever from it if you need",
    "start": "2158160",
    "end": "2164079"
  },
  {
    "text": "it well there's an exact command context as well that takes the context and kills the command if the context gets",
    "start": "2164079",
    "end": "2169839"
  },
  {
    "text": "cancelled so that's very cool it's I thought that's what you're referring to but it is interesting that that doesn't",
    "start": "2169839",
    "end": "2176920"
  },
  {
    "text": "exit CU I I don't know what I would have really expected without reading the docs or hearing you say that because I've definitely used it before but I've never",
    "start": "2176920",
    "end": "2183319"
  },
  {
    "text": "thought too much about it because most of the time I'm running really quick things but I could definitely see if you",
    "start": "2183319",
    "end": "2188560"
  },
  {
    "text": "were like starting up a server you know doing something external that that might uh lead to some weird Behavior yeah well",
    "start": "2188560",
    "end": "2194440"
  },
  {
    "text": "just keeps running the processes and you have to go and figure out why Al it should be I should say it would be a weird bug where like the next time you",
    "start": "2194440",
    "end": "2200560"
  },
  {
    "text": "run and it's like this port's taken you're like what why is it taken actually that is exactly almost I think",
    "start": "2200560",
    "end": "2206040"
  },
  {
    "text": "how it manifests for me it's always that case yeah yeah it's it's a OS exit is is",
    "start": "2206040",
    "end": "2213480"
  },
  {
    "text": "actually if you uh like putting into context it's really low level when you",
    "start": "2213480",
    "end": "2219480"
  },
  {
    "text": "think about it yeah it's not really it really does just drop everything on the floor if you want to sort of clean up a",
    "start": "2219480",
    "end": "2226040"
  },
  {
    "text": "child and actually I've run into this too where like yeah I'm trying to clean up a child process and now I have like all of these like uh complicated defers",
    "start": "2226040",
    "end": "2233400"
  },
  {
    "text": "statements and the and you know using the signal package to capture control C so that I can you know try to gracefully",
    "start": "2233400",
    "end": "2239640"
  },
  {
    "text": "clean up the sub process and stuff because again yeah it's a server sitting on a on a",
    "start": "2239640",
    "end": "2245599"
  },
  {
    "text": "port [Music]",
    "start": "2245599",
    "end": "2256889"
  },
  {
    "text": "this episode is brought to you by our friends at equinex metal globally interconnected fully automated bare",
    "start": "2258359",
    "end": "2263920"
  },
  {
    "text": "metal equinix metal gives you Hardware at your fingertips with physical infrastructure at software speed",
    "start": "2263920",
    "end": "2269560"
  },
  {
    "text": "accelerate your workloads with fully automated bare metal that's secure powerful and cost effective this is the",
    "start": "2269560",
    "end": "2276040"
  },
  {
    "text": "promise of the Cloud delivered on bare metal equinex metal makes it easier than ever to take advantage of the unmatched",
    "start": "2276040",
    "end": "2282440"
  },
  {
    "text": "Global reach and connectivity ecosystem made possible by equinex which includes more than 220 data centers across 63",
    "start": "2282440",
    "end": "2289200"
  },
  {
    "text": "metros making interconnection easy and they're obsessed with making bare metal even more awesome seriously check out",
    "start": "2289200",
    "end": "2295599"
  },
  {
    "text": "these features 60-second deploys hourly pricing a customer success team that",
    "start": "2295599",
    "end": "2300640"
  },
  {
    "text": "engages over slack x86 Intel AMD and arm single tenant mvme and SSD storage",
    "start": "2300640",
    "end": "2308119"
  },
  {
    "text": "restful API first class devops Integrations equinex fabric integration",
    "start": "2308119",
    "end": "2313520"
  },
  {
    "text": "support for Enterprise os's and open source Linux os's air gapped installs without a public IP no installed agent",
    "start": "2313520",
    "end": "2320520"
  },
  {
    "text": "or Keys extensive op Source love and support plus so much more visit info.",
    "start": "2320520",
    "end": "2326240"
  },
  {
    "text": "equinex metal.com changw get $500 in free credit to play with plus a rad t-shirt again info.in metal.com",
    "start": "2326240",
    "end": "2335520"
  },
  {
    "text": "changelog [Music]",
    "start": "2335520",
    "end": "2342199"
  },
  {
    "text": "[Music]",
    "start": "2347290",
    "end": "2361200"
  },
  {
    "text": "so you said that OSX hit pretty low level if I recall correctly in C++ don't you return this status code from Main",
    "start": "2361200",
    "end": "2368280"
  },
  {
    "text": "that's correct I guess what I was going to ask is like what are your thoughts I guess around that as to why like go",
    "start": "2368280",
    "end": "2373720"
  },
  {
    "text": "obviously doesn't do that so if you were doing that I assume defers it could do that it could assume Funk main could",
    "start": "2373720",
    "end": "2380839"
  },
  {
    "text": "return an in I don't think that's there's anything wrong with that no it doesn't like I'm I'm kind of curious",
    "start": "2380839",
    "end": "2386079"
  },
  {
    "text": "like my guess as to why it doesn't do that would just be that most people want to return zero anyway and it might be",
    "start": "2386079",
    "end": "2391440"
  },
  {
    "text": "confusing to somebody I know if you're first learning C++ you're like why am I returning a number here this like who's",
    "start": "2391440",
    "end": "2397000"
  },
  {
    "text": "using it yeah but I didn't know like when you want to actually have an error",
    "start": "2397000",
    "end": "2402480"
  },
  {
    "text": "status code the only way to really do it that I'm aware of at least as OS xit and and if you're calling that then things",
    "start": "2402480",
    "end": "2408760"
  },
  {
    "text": "might not behave the way you expected Yeah well yeah I was going to say so on that um specifically like I've",
    "start": "2408760",
    "end": "2415880"
  },
  {
    "text": "done it before where I have special error like Sentinel error types which is",
    "start": "2415880",
    "end": "2420960"
  },
  {
    "text": "another term coined I think by Dave Cheney these but you have a variable that is just an error type or some other",
    "start": "2420960",
    "end": "2427319"
  },
  {
    "text": "way of being able to figure out what the type of error is and then at the very top in main I always just call into a",
    "start": "2427319",
    "end": "2433680"
  },
  {
    "text": "run function and then I on the response of that check the error that returned",
    "start": "2433680",
    "end": "2439160"
  },
  {
    "text": "from this run function and check it against any specific values for the specific numbers otherwise I'll just",
    "start": "2439160",
    "end": "2446520"
  },
  {
    "text": "return with some generic one and that way you keep all of it in Funk main all the OS exits are in one place and you",
    "start": "2446520",
    "end": "2453680"
  },
  {
    "text": "can kind of logically see the entire flow uh when it gets starts to get Unwound",
    "start": "2453680",
    "end": "2459599"
  },
  {
    "text": "we've talked about that pattern a couple times and I think until you run into some of the issue like the bugs it's",
    "start": "2459599",
    "end": "2464960"
  },
  {
    "text": "it's hard to understand how many different small bugs it can kind of prevent like this where like if you're doing it that way all your defers in",
    "start": "2464960",
    "end": "2471240"
  },
  {
    "text": "your run functional run and everything else will run as you expect it to yeah but if you don't realize that I could",
    "start": "2471240",
    "end": "2476560"
  },
  {
    "text": "quickly see just putting everything in Main and calling os. exit and then being confused as to why something didn't",
    "start": "2476560",
    "end": "2481640"
  },
  {
    "text": "defer like some defer didn't run yeah I think that's a good point one of the nice things about not having an INT",
    "start": "2481640",
    "end": "2487680"
  },
  {
    "text": "return from Funk main is that it is kind of simpler so it is that expected thing",
    "start": "2487680",
    "end": "2493640"
  },
  {
    "text": "and it looks like other go code of course returning an intw as well but yeah it's those run I love those little",
    "start": "2493640",
    "end": "2499920"
  },
  {
    "text": "run function abstraction things uh I do it as well where I pass arguments in so",
    "start": "2499920",
    "end": "2505440"
  },
  {
    "text": "even if I'm going to PA Flags or something I do that inside the Run function pass in the OS args because I",
    "start": "2505440",
    "end": "2512319"
  },
  {
    "text": "can test that entire program in test code without any Shenanigans just by",
    "start": "2512319",
    "end": "2517599"
  },
  {
    "text": "calling that run function with different arguments and check the response you know so yeah that one turns out to be a",
    "start": "2517599",
    "end": "2524040"
  },
  {
    "text": "great and often I'll take a context into that run as well and that allows me to",
    "start": "2524040",
    "end": "2529440"
  },
  {
    "text": "even test cancellation and timeout and things I can make sure that when I if I",
    "start": "2529440",
    "end": "2535000"
  },
  {
    "text": "set a timer in a test for one second and I kick off the program I can check the",
    "start": "2535000",
    "end": "2540280"
  },
  {
    "text": "time difference after to make sure it wasn't too much longer and then I know that my program is respecting cancellation in cont context for example",
    "start": "2540280",
    "end": "2547800"
  },
  {
    "text": "so Matt you talked about graceful shutdown quite a bit can you give some examples of like like more concrete",
    "start": "2547800",
    "end": "2554319"
  },
  {
    "text": "examples I guess of when somebody should be thinking about it yeah well times where I've done it originally in a sort",
    "start": "2554319",
    "end": "2560920"
  },
  {
    "text": "of HTTP context we wanted to finish the any current requests before exiting",
    "start": "2560920",
    "end": "2567960"
  },
  {
    "text": "that's now built into uh the HTTP package I think you can use listen and serve in a specific way to get that I'll",
    "start": "2567960",
    "end": "2575240"
  },
  {
    "text": "check that and put it in the show notes I need to just write that down cuz I sometimes have promised show notes and",
    "start": "2575240",
    "end": "2581520"
  },
  {
    "text": "not delivered them and then I've received quite a Stern telling off sorry",
    "start": "2581520",
    "end": "2587040"
  },
  {
    "text": "about that and another time is if I'm processing files and I'm going to be",
    "start": "2587040",
    "end": "2592240"
  },
  {
    "text": "doing some kind of IO copy or some operation like that where I would rather not interrupt it and leave some weird",
    "start": "2592240",
    "end": "2598760"
  },
  {
    "text": "half file that I don't know what's going to happen with it it could become self-aware could uh probably not but you",
    "start": "2598760",
    "end": "2605800"
  },
  {
    "text": "don't take chances that's how things happen so yeah it's things like that it's I don't know if it's that big a",
    "start": "2605800",
    "end": "2612440"
  },
  {
    "text": "deal whether I would let it just be a corrupt file because maybe I'm deleting all the files when I run this program",
    "start": "2612440",
    "end": "2617800"
  },
  {
    "text": "anyway but I like the practice of making programs gracefully shut down and then",
    "start": "2617800",
    "end": "2624400"
  },
  {
    "text": "it's a tool I have in my tool belt that I can just use whenever I need to I definitely agree with the the practice",
    "start": "2624400",
    "end": "2630359"
  },
  {
    "text": "part is good to keep there so that you're doing things the right way when it actually matters cuz I know like I",
    "start": "2630359",
    "end": "2635760"
  },
  {
    "text": "said earlier I'm guilty of not always gracefully shutting down and one of them is where you said about cleaning up files if I were to just control c a",
    "start": "2635760",
    "end": "2642559"
  },
  {
    "text": "program that was doing something with files I would just assume all the files are probably not valid delete them all and just you know restart if it was",
    "start": "2642559",
    "end": "2648359"
  },
  {
    "text": "generating files that's another strategy isn't it yeah I mean for quick things it's like all right is deleting the files and read running the program going",
    "start": "2648359",
    "end": "2654480"
  },
  {
    "text": "to take more time than writing graceful shutdown code so you kind of have to like weigh which one makes more sense",
    "start": "2654480",
    "end": "2659800"
  },
  {
    "text": "but if it's like a onetime program then sure whatever but if it's something you're going to be using a ton in a company then maybe that doesn't make",
    "start": "2659800",
    "end": "2665800"
  },
  {
    "text": "sense yeah I think it also depends on the situation as well cuz I another time",
    "start": "2665800",
    "end": "2672040"
  },
  {
    "text": "I've used this is when we were going to run code in in like Docker and running",
    "start": "2672040",
    "end": "2677160"
  },
  {
    "text": "in some kind of cloud environment the interrupts are essentially the platform",
    "start": "2677160",
    "end": "2682440"
  },
  {
    "text": "telling you that this instance is going to be going away and you may well be in",
    "start": "2682440",
    "end": "2687480"
  },
  {
    "text": "the middle of handling some request you know where that could happen so yeah",
    "start": "2687480",
    "end": "2692920"
  },
  {
    "text": "that's another time where we've had to just take the signal and don't don't just deal with it don't just OS exit but",
    "start": "2692920",
    "end": "2700240"
  },
  {
    "text": "hold on to that signal usually in a buffer Channel with with space for one buffer at least so that you know you",
    "start": "2700240",
    "end": "2706680"
  },
  {
    "text": "don't block there and then yeah just wait for it finish the work and then",
    "start": "2706680",
    "end": "2713040"
  },
  {
    "text": "exit you know don't take on any new work that's the other thing you sort of flip some switch to say no we're in shutdown",
    "start": "2713040",
    "end": "2719359"
  },
  {
    "text": "mode now so we won't receive any more any more traffic a lot of these problems are probably solved but I think",
    "start": "2719359",
    "end": "2726119"
  },
  {
    "text": "depending on like if if you look at a 12 factor or uh 12th Factor application",
    "start": "2726119",
    "end": "2732119"
  },
  {
    "text": "kind of design you know using these fundamentals and being consistent like this it just has benefits because other",
    "start": "2732119",
    "end": "2738400"
  },
  {
    "text": "systems that are going to be running your code or interacting in some way will also expect this kind of behavior",
    "start": "2738400",
    "end": "2745559"
  },
  {
    "text": "so there's something to be said as well for being a kind of good citizen in the operating system I think as well I think",
    "start": "2745559",
    "end": "2752359"
  },
  {
    "text": "the 12 Factor stuff is something that definitely plays a big role because I mean for anybody unfamiliar it",
    "start": "2752359",
    "end": "2758000"
  },
  {
    "text": "basically means one of the big things of it is that your server can be shut down pretty much at any time and you'll lose anything was on the hard drive or",
    "start": "2758000",
    "end": "2764240"
  },
  {
    "text": "anything like that so like you can't really count on all of those local file systems to be there and usually there's",
    "start": "2764240",
    "end": "2770079"
  },
  {
    "text": "workarounds around this where you can directly upload files to wherever you want to get them but I've definitely seen Services where you upload a file",
    "start": "2770079",
    "end": "2775559"
  },
  {
    "text": "and then the server will take and process the file or something and upload it somewhere else like S3 or something like that or Google's you know image or",
    "start": "2775559",
    "end": "2782319"
  },
  {
    "text": "blob store and if you're doing something like that I could see graceful shut down and being something that's vital so that",
    "start": "2782319",
    "end": "2787960"
  },
  {
    "text": "you know that somebody didn't upload an image and then you don't actually push it where it needs to go cuz that would be frustrating for the user to be like",
    "start": "2787960",
    "end": "2794520"
  },
  {
    "text": "well the image was uploaded why isn't it still there yeah all right I think we are ready for unpopular opinion okay",
    "start": "2794520",
    "end": "2802480"
  },
  {
    "text": "it's that special time again so gather around children with your pints of beer",
    "start": "2802480",
    "end": "2809400"
  },
  {
    "text": "I don't really I've got nieces and nephews but I don't know what I'm doing it's time for unpopular opinions",
    "start": "2809400",
    "end": "2817799"
  },
  {
    "text": "unop",
    "start": "2818960",
    "end": "2821960"
  },
  {
    "text": "opinion popular",
    "start": "2825800",
    "end": "2829640"
  },
  {
    "text": "opinion Okay who wants to kick us off Michael do you perhaps have an unpopular",
    "start": "2831800",
    "end": "2838520"
  },
  {
    "text": "opinion I'm sure I have lots um and I want to preface this one with saying",
    "start": "2838520",
    "end": "2844000"
  },
  {
    "text": "that you know my my mind is at absolutely open to Alternatives in the future this is not a hard and set thing",
    "start": "2844000",
    "end": "2851400"
  },
  {
    "text": "um but my thinking right now is that uh and this is maybe going to go a little deep but I don't think the go garbage",
    "start": "2851400",
    "end": "2858480"
  },
  {
    "text": "collector needs to become a copying or a generational collector so if you're not",
    "start": "2858480",
    "end": "2864000"
  },
  {
    "text": "familiar with those terms don't worry about it but I think going forward there's enough room to grow here that we",
    "start": "2864000",
    "end": "2869440"
  },
  {
    "text": "can make a really really or I mean it's already first classing quite good there's been a lot of excellent work but",
    "start": "2869440",
    "end": "2875880"
  },
  {
    "text": "into it mhm but I think there's so much room to grow here that the common sort of there are lots of reasons why the",
    "start": "2875880",
    "end": "2883119"
  },
  {
    "text": "common thinking of like well of course generational uh garbage collection is going to make your programs run faster I",
    "start": "2883119",
    "end": "2889440"
  },
  {
    "text": "think there's a lot of reasons why that same sort of thing doesn't hold and go and I think that it you know there are",
    "start": "2889440",
    "end": "2896200"
  },
  {
    "text": "actually better paths forward uh going forward so that that's my own popular opinion and of course maybe I'll change",
    "start": "2896200",
    "end": "2902200"
  },
  {
    "text": "my mind in like a year or two but that's where I am right now that's where I've been for like a year now that's a great",
    "start": "2902200",
    "end": "2908240"
  },
  {
    "text": "one well we will be testing these on Twitter we do the poll and find out if they are popular or unpopular that's",
    "start": "2908240",
    "end": "2915079"
  },
  {
    "text": "going to be an interesting one John what do you think you probably I suppose you don't write you don't use garbage",
    "start": "2915079",
    "end": "2921119"
  },
  {
    "text": "collection cuz you none of your data is garbage or something no I use the garbage collector all the time Matt ah",
    "start": "2921119",
    "end": "2927119"
  },
  {
    "text": "okay what what do you think about that opinion I mean I am probably in",
    "start": "2927119",
    "end": "2932240"
  },
  {
    "text": "agreement I don't get worked up about the garbage collector like other people people do though like I don't have any",
    "start": "2932240",
    "end": "2937720"
  },
  {
    "text": "need for it to change or you know like like yes it's been improved and that's great but most of the time garbage",
    "start": "2937720",
    "end": "2944079"
  },
  {
    "text": "collection is not a limitation for me so I it's not something I think about as the best way to put it is it that",
    "start": "2944079",
    "end": "2950440"
  },
  {
    "text": "Michael that it could be in some situations one approach is better than others depending on the",
    "start": "2950440",
    "end": "2956040"
  },
  {
    "text": "situation uh absolutely yeah the the the design space for a garbage collection is quite large you have for general purpose",
    "start": "2956040",
    "end": "2962559"
  },
  {
    "text": "application it's it's it's almost sort of feels like a lot of uh different languages and run times have sort of",
    "start": "2962559",
    "end": "2967599"
  },
  {
    "text": "settled in in a particular place but there are a lot of Niche uh sort of collectors but I think I think maybe",
    "start": "2967599",
    "end": "2974640"
  },
  {
    "text": "it's worth exploring that design space in the uh for general purpose programs too and I think go has some special",
    "start": "2974640",
    "end": "2980720"
  },
  {
    "text": "properties that uh make it particularly worth looking into yeah I know somebody",
    "start": "2980720",
    "end": "2986079"
  },
  {
    "text": "who turned off the Garbage Collection because they had this program that just ran for a short amount of time and would",
    "start": "2986079",
    "end": "2993079"
  },
  {
    "text": "never need that much RAM and it just ran like kind of lightning",
    "start": "2993079",
    "end": "2998400"
  },
  {
    "text": "fast CU it didn't have the garbage collection happening at all which kind of how do you turn off the Garbage Collection it's a it's a flag isn't it",
    "start": "2998400",
    "end": "3005319"
  },
  {
    "text": "Michael uh yeah so there go garbage collector famously only",
    "start": "3005319",
    "end": "3010799"
  },
  {
    "text": "has one knob um and it's called go GC uh you set it via an environment variable",
    "start": "3010799",
    "end": "3015880"
  },
  {
    "text": "or you can use the debug. set GC perc API runtime debug. youc percent and what",
    "start": "3015880",
    "end": "3023079"
  },
  {
    "text": "it does is it lets you make a trade-off between CPU in memory but you can also just say off uh so you either pass it a",
    "start": "3023079",
    "end": "3031319"
  },
  {
    "text": "negative number in the in the runtime API or uh in the environment variable",
    "start": "3031319",
    "end": "3036359"
  },
  {
    "text": "you just write off go GC equals off it won't collect anything it will just keep allocating memory even if it even if",
    "start": "3036359",
    "end": "3042640"
  },
  {
    "text": "it's garbage it won't try to collect it so this is the perfect way to make sure my programs eventually shut down",
    "start": "3042640",
    "end": "3050440"
  },
  {
    "text": "yeah um it's funny when you look at memory profiles you're like sometimes",
    "start": "3050440",
    "end": "3055599"
  },
  {
    "text": "like you because you can look at a memory profile and see like the total amount of memory that your application",
    "start": "3055599",
    "end": "3060799"
  },
  {
    "text": "has allocated and for like a long running server you'll see like several terabytes or like pedabytes of",
    "start": "3060799",
    "end": "3067920"
  },
  {
    "text": "information depending on how long it was running going through there and it's like wow if I didn't have a garbage",
    "start": "3067920",
    "end": "3073599"
  },
  {
    "text": "collector I I this would have died a long time ago that's funny though but those",
    "start": "3073599",
    "end": "3079040"
  },
  {
    "text": "numbers are never you never have any frame of reference for those numbers really it's like when they see it on the",
    "start": "3079040",
    "end": "3084799"
  },
  {
    "text": "news they'll say in the UK they've people have drunk 50 billion Cups of Tea",
    "start": "3084799",
    "end": "3090079"
  },
  {
    "text": "you think well is that a lot I mean it sounds like a lot but maybe it's not",
    "start": "3090079",
    "end": "3095480"
  },
  {
    "text": "it's like I don't know how many people there are there I got to look that up first exactly you have to so it doesn't help does it knowing how much RAM you've",
    "start": "3095480",
    "end": "3102480"
  },
  {
    "text": "needed in the lifetime although I'd like to see it it's useful for finding like memory",
    "start": "3102480",
    "end": "3108440"
  },
  {
    "text": "leaks and stuff for sure yeah and and other things it's good for like infographics if you're going to build",
    "start": "3108440",
    "end": "3113599"
  },
  {
    "text": "one what about that idea though of not not of just don't don't worry about it turn off garbage collection rely on that",
    "start": "3113599",
    "end": "3120119"
  },
  {
    "text": "that sort of hacky sounds like a hacky thing but someone somebody made the case for doing that in a cloud environment",
    "start": "3120119",
    "end": "3126839"
  },
  {
    "text": "where you just have these little short running function like things that just spin up do their work and then disappear",
    "start": "3126839",
    "end": "3133359"
  },
  {
    "text": "kind of like a Meeks or some other I don't know I can't use that reference I don't think what about that as a",
    "start": "3133359",
    "end": "3139319"
  },
  {
    "text": "strategy is that just mad I don't think it's totally mad uh I don't know if you know about or if if the wider go",
    "start": "3139319",
    "end": "3145480"
  },
  {
    "text": "Community or Pro probably because but but the Plan 9 C compiler uh like I",
    "start": "3145480",
    "end": "3152920"
  },
  {
    "text": "somewhat famously didn't like it just allocated memory and it never freed it uh It Was Written In C and it just",
    "start": "3152920",
    "end": "3159280"
  },
  {
    "text": "allocate it just called Malo but it never called free because the Assumption was by the time you're done compiling",
    "start": "3159280",
    "end": "3164960"
  },
  {
    "text": "you know whatever just just uh the OS will clean it up it's fine so so for short programs there is",
    "start": "3164960",
    "end": "3171599"
  },
  {
    "text": "some wisdom here right and I've known other systems that have done uh something similar right because there",
    "start": "3171599",
    "end": "3177000"
  },
  {
    "text": "there are performance Gaines to be had if you know you're not going to run for a very long time then of course that you",
    "start": "3177000",
    "end": "3182480"
  },
  {
    "text": "know it works of course I will say that like in most cases probably doesn't make",
    "start": "3182480",
    "end": "3188200"
  },
  {
    "text": "sense right it could it could certainly be like a premature optimization especially if you have like a command line tool that's growing to do more",
    "start": "3188200",
    "end": "3194640"
  },
  {
    "text": "things one day it's just going to crash and you won't know why yeah but it can",
    "start": "3194640",
    "end": "3199880"
  },
  {
    "text": "be valid in some circumstances very cool well it's that time",
    "start": "3199880",
    "end": "3205880"
  },
  {
    "text": "where I'm canceling contact I'm inter I'm going around giving you signal",
    "start": "3205880",
    "end": "3212040"
  },
  {
    "text": "interrupts um not going to kill you but I am going to be calling OS exit on this",
    "start": "3212040",
    "end": "3217880"
  },
  {
    "text": "episode um thank you so much uh Michael for joining us and you'll have to come",
    "start": "3217880",
    "end": "3222960"
  },
  {
    "text": "back uh and talk about some other things in the future too if that's all right we'll test your unpopular opinion on",
    "start": "3222960",
    "end": "3228960"
  },
  {
    "text": "Twitter if it's not unpopular you do have to come back that that is legally binding got it John khh always a",
    "start": "3228960",
    "end": "3235799"
  },
  {
    "text": "pleasure thanks Matt don't to say something nice to me right now I'm the only person who actually has os. exit",
    "start": "3235799",
    "end": "3242680"
  },
  {
    "text": "for Zoom you guys can't end the meeting for everybody just for yourself oh You' got it yeah you got the power of the",
    "start": "3242680",
    "end": "3248559"
  },
  {
    "text": "exit yeah all we can do is end call runtime that runtime one for go routines",
    "start": "3248559",
    "end": "3254640"
  },
  {
    "text": "pathetic Zoom doesn't quite work the same way doesn't give everybody that permission fair enough okay well thanks",
    "start": "3254640",
    "end": "3260640"
  },
  {
    "text": "so much everyone for joining us see you next time",
    "start": "3260640",
    "end": "3267078"
  },
  {
    "text": "if this is your first time listening to go time subscribe now at go time. FM or",
    "start": "3268040",
    "end": "3273839"
  },
  {
    "text": "search for go time in your favorite podcast app and hit the Subscribe button there you'll find us and follow us on",
    "start": "3273839",
    "end": "3280559"
  },
  {
    "text": "Twitter if you want in on that free Raspberry Pi 400 we are at gotime FM",
    "start": "3280559",
    "end": "3286799"
  },
  {
    "text": "this episode was hosted by Matt ryer it was produced by Jared Santo with music by The Beat freak break master cylinder",
    "start": "3286799",
    "end": "3293480"
  },
  {
    "text": "go time is brought to you by our awesome sponsors special thanks to fley launch darkley and Leno on the next episode",
    "start": "3293480",
    "end": "3300720"
  },
  {
    "text": "Daniel Marti returns with some go language proposals that you've never heard of that one's hit in your podcast",
    "start": "3300720",
    "end": "3306960"
  },
  {
    "text": "feed next [Music]",
    "start": "3306960",
    "end": "3321749"
  },
  {
    "text": "week",
    "start": "3324000",
    "end": "3327000"
  },
  {
    "text": "[Music]",
    "start": "3329370",
    "end": "3354000"
  },
  {
    "text": "what [Music]",
    "start": "3354000",
    "end": "3372670"
  },
  {
    "text": "I'm like genuinely not sure how the Terminator would work given how much like internet of thing like all the",
    "start": "3377359",
    "end": "3382559"
  },
  {
    "text": "devices that go offline when a AWS goes down yeah if you go back in time where there is no AWS yeah I'm like this isn't",
    "start": "3382559",
    "end": "3388720"
  },
  {
    "text": "going to work yeah but do you think he runs on AWS I mean he's he's got to be using some sort of cloud stuff you'd",
    "start": "3388720",
    "end": "3395240"
  },
  {
    "text": "think it'd be abstract Cloud if if he needed that but if it's anything like our current timeline where we just make everything in the cloud yeah maybe",
    "start": "3395240",
    "end": "3402720"
  },
  {
    "text": "Terminator just got loads of raspberry pies running in kubernetes cluster in in his tummy I mean probably could be",
    "start": "3402720",
    "end": "3410079"
  },
  {
    "text": "RoboCop's got a gun in his leg you can just get that when he needs it I haven't seen those movies in so",
    "start": "3410079",
    "end": "3416079"
  },
  {
    "text": "long remember like I was young and my parents would be like you weren't allowed to watch this it's an R-rated movie but like it was still at the house",
    "start": "3416079",
    "end": "3422599"
  },
  {
    "text": "somehow it was like the movie they pulled out to test the surround sound system",
    "start": "3422599",
    "end": "3428520"
  },
  {
    "text": "really I think so because like all the shooting or I don't know it was just I remember new surround sound system I was",
    "start": "3428520",
    "end": "3434960"
  },
  {
    "text": "like really young at the time and like that was the movie I think they got out to test it and I wasn't allowed to watch it fair enough okay we should maybe",
    "start": "3434960",
    "end": "3441680"
  },
  {
    "text": "start the uh you you remember that podcast we're doing maybe what wait sorry what yeah we",
    "start": "3441680",
    "end": "3448760"
  },
  {
    "text": "should do that okay okay I guess I'm ready for",
    "start": "3448760",
    "end": "3454040"
  },
  {
    "text": "[Music] that",
    "start": "3454040",
    "end": "3461000"
  }
]