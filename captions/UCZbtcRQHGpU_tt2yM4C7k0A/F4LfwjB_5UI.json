[
  {
    "text": "if you're not using abort signals in your promises your code is probably",
    "start": "80",
    "end": "5319"
  },
  {
    "text": "incorrect okay for example if you do promise.all and you have one of those",
    "start": "5319",
    "end": "10800"
  },
  {
    "text": "things that throws an exception you probably want to cancel all the other promises in that promise.all unless you",
    "start": "10800",
    "end": "16520"
  },
  {
    "text": "wanted to actually catch that exception and then return an aggregate error or whatever usually if you have like a task",
    "start": "16520",
    "end": "22760"
  },
  {
    "text": "that fails you typically want to fail immediately with all these other tasks that are running and just clean them up",
    "start": "22760",
    "end": "28439"
  },
  {
    "text": "so the only way to really Implement that cancel all of my parallel promises and clean them up is for them to implement",
    "start": "28439",
    "end": "34760"
  },
  {
    "text": "abort signals and it has to be propagated all the way down so everything that can potentially do in a",
    "start": "34760",
    "end": "40559"
  },
  {
    "text": "wait should actually be waiting contingent on some abort signal if an abort signal happens in parallel while",
    "start": "40559",
    "end": "46680"
  },
  {
    "text": "you're awaiting you should stop awaiting and throw or cancel or bail",
    "start": "46680",
    "end": "51960"
  },
  {
    "text": "[Music] out this episode is brought to you by square millions of businesses depend on",
    "start": "52820",
    "end": "59559"
  },
  {
    "text": "Square Partners to build custom Solutions using Square products and apis when you become a square Solutions",
    "start": "59559",
    "end": "65360"
  },
  {
    "text": "partner you get to leverage the entire Square platform to build robust e-commerce websites smart payment",
    "start": "65360",
    "end": "70920"
  },
  {
    "text": "Integrations and custom solutions for square sellers you don't just get access to sdks and apis they get access to the",
    "start": "70920",
    "end": "78240"
  },
  {
    "text": "exact sdks and the exact apis that square uses to build the square platform and all their applications this is a",
    "start": "78240",
    "end": "86159"
  },
  {
    "text": "partnership that helps you grow square has partner managers that help you develop your strategy close deals and gain customers there are literally",
    "start": "86159",
    "end": "92840"
  },
  {
    "text": "millions of square sellers who need custom Solutions so they can innovate for their customers and build their",
    "start": "92840",
    "end": "98320"
  },
  {
    "text": "businesses you get incentives and profit sharing you can earn a 25% status Revenue share seller referrals product",
    "start": "98320",
    "end": "104920"
  },
  {
    "text": "bounties and more you get Alpha access to apis and new products you get product marketing Tech and sales support and",
    "start": "104920",
    "end": "110920"
  },
  {
    "text": "you're also able to get square certified you can get training on all things Square so you can deliver for square sellers the next step is to head to",
    "start": "110920",
    "end": "117360"
  },
  {
    "text": "change law.com square and click become a partner again change.com",
    "start": "117360",
    "end": "124079"
  },
  {
    "text": "[Music]",
    "start": "124080",
    "end": "131289"
  },
  {
    "text": "Square this is JS party your weekly celebration of JavaScript and the web if",
    "start": "133920",
    "end": "140760"
  },
  {
    "text": "you're new to the Pod don't forget to subscribe hit to JSP party. FM for all",
    "start": "140760",
    "end": "145959"
  },
  {
    "text": "the ways and if you're a longtime party animal thank you we appreciate you listen check out our membership program at",
    "start": "145959",
    "end": "152120"
  },
  {
    "text": "Chang log.com plusus plus drop the ads get bonuses like extended episodes and",
    "start": "152120",
    "end": "157599"
  },
  {
    "text": "directly support the show thanks to our friends at fastly for shipping JS party all around the world to wherever you",
    "start": "157599",
    "end": "163239"
  },
  {
    "text": "listen check them out at fastly.com okay you know what time it is it's party time",
    "start": "163239",
    "end": "170599"
  },
  {
    "text": "y'all what's up party people I'm your host this week I'm Nick ni Hoy Hoy and",
    "start": "171800",
    "end": "176879"
  },
  {
    "text": "I'm joined by Chris AKA bone skull how's it how's it going Chris howdy welcome welcome and welcoming back to the show",
    "start": "176879",
    "end": "184120"
  },
  {
    "text": "we have Brett comes hey Brett how's it going good welcome back and we also have Mick lysenko Mick how's it going pretty",
    "start": "184120",
    "end": "191040"
  },
  {
    "text": "good tell us a little bit about yourselves you guys were recently on uh when we were talking about socket and",
    "start": "191040",
    "end": "196680"
  },
  {
    "text": "kind of the supply chain security that you're solving with that product but we're going to talk about something different today but do you want to",
    "start": "196680",
    "end": "203200"
  },
  {
    "text": "refresh us with a an intro sure who should go first go ahead Brett okay I'm a JavaScript developer I've been working",
    "start": "203200",
    "end": "210720"
  },
  {
    "text": "mainly with node kind of out of the node ecosystem since about I don't know 2013",
    "start": "210720",
    "end": "217439"
  },
  {
    "text": "2014 and do a lot of side projects and little contributions on little things",
    "start": "217439",
    "end": "222560"
  },
  {
    "text": "that interest me around the ecosystem and also professionally as a JavaScript",
    "start": "222560",
    "end": "228080"
  },
  {
    "text": "developer for the most part and I work at socka now so check out the last episode we were on if you want to know",
    "start": "228080",
    "end": "234200"
  },
  {
    "text": "more about that we'll have a link in the show notes for that welcome back and Mick do you want to tell us a little bit about yourself yeah yeah so I also have",
    "start": "234200",
    "end": "241159"
  },
  {
    "text": "been working at socket for the last 6 months or so we've been building a bunch",
    "start": "241159",
    "end": "247040"
  },
  {
    "text": "of infrastructure around analyzing JavaScript and just scanning npm for",
    "start": "247040",
    "end": "253400"
  },
  {
    "text": "suspicious packages and weird things and trying to turn all of that data into something that people can use to detect",
    "start": "253400",
    "end": "261199"
  },
  {
    "text": "attacks on their open- Source projects or on their code that they're trying to ship to their users before that I worked",
    "start": "261199",
    "end": "269240"
  },
  {
    "text": "in China not developing any malware or fixing malware but on building a",
    "start": "269240",
    "end": "274560"
  },
  {
    "text": "multiplayer online like 3D metaverse web game which turned out to be exactly the",
    "start": "274560",
    "end": "280840"
  },
  {
    "text": "wrong thing to do after Chinese government regulations completely shut that entire sector down and then before",
    "start": "280840",
    "end": "286520"
  },
  {
    "text": "that I was traveling around a lot working on all kinds of different stuff I lived in Hawaii for a bit and I was in",
    "start": "286520",
    "end": "292080"
  },
  {
    "text": "California before that and then I was a grad student long long ago studying mathematics and computer stuff yeah it's",
    "start": "292080",
    "end": "299000"
  },
  {
    "text": "kind of like my story condensed into a nutall nice yeah that's uh very exciting",
    "start": "299000",
    "end": "304280"
  },
  {
    "text": "that's a lot of different exciting projects to work on now as we mentioned",
    "start": "304280",
    "end": "309759"
  },
  {
    "text": "you were here a few a few weeks ago at this point talking about socket and kind of supply chain security and the the",
    "start": "309759",
    "end": "316560"
  },
  {
    "text": "whole product around that well today uh we have you back to talk about a topic",
    "start": "316560",
    "end": "321800"
  },
  {
    "text": "that was brought to us by the community by tarp and Jon so thank you for the",
    "start": "321800",
    "end": "326840"
  },
  {
    "text": "recommendation on the show and we're going to be talking about logging and error handling so let's start off by",
    "start": "326840",
    "end": "333560"
  },
  {
    "text": "talking about logging and just kind of digging into that does someone want to give a definition for what logging would",
    "start": "333560",
    "end": "339199"
  },
  {
    "text": "be I'll give it a shot I wouldn't consider myself a huge expert on the matter but anytime you're running a",
    "start": "339199",
    "end": "345880"
  },
  {
    "text": "program and it encounters an error and it then presents that error in some",
    "start": "345880",
    "end": "351440"
  },
  {
    "text": "context so if it's like an unhandled exception you'll often you'll get the the well-known stack Trace coming out of",
    "start": "351440",
    "end": "357759"
  },
  {
    "text": "your process or for if it's it's like in the context of like a a handled air",
    "start": "357759",
    "end": "363039"
  },
  {
    "text": "maybe you would see this like in a UI in a web app or maybe the CLI you're running like prints it with a",
    "start": "363039",
    "end": "370560"
  },
  {
    "text": "contextualized St trace for a human or if it's just sort of for a backend",
    "start": "370560",
    "end": "375759"
  },
  {
    "text": "service and maybe it's a Json line in a structured log that you're ingesting into Sentry or data dog or something",
    "start": "375759",
    "end": "382479"
  },
  {
    "text": "like that did I get that right anyone else have any other context I think",
    "start": "382479",
    "end": "387919"
  },
  {
    "text": "logging is actually a pretty simple idea it's just a piece of code inside your",
    "start": "387919",
    "end": "393160"
  },
  {
    "text": "code that acts as like a kind of trace of a discrete event so it can be something that just is as simple as like",
    "start": "393160",
    "end": "399680"
  },
  {
    "text": "printing out a statement when you reach a particular line or it could be something more complicated that dumps",
    "start": "399680",
    "end": "405440"
  },
  {
    "text": "like lots of state or you know it could be very manual or it could be very automatic but it's sort of like a form",
    "start": "405440",
    "end": "412039"
  },
  {
    "text": "of tracing for your program so rather than checking like every single instruction and everything that happens",
    "start": "412039",
    "end": "417960"
  },
  {
    "text": "you pick specific events that you care about and then you throw in like a little uh bit of code or whatever to try",
    "start": "417960",
    "end": "425000"
  },
  {
    "text": "to like log that specific event out and then eventually you get a single linear list of events that have happened and",
    "start": "425000",
    "end": "431800"
  },
  {
    "text": "hopefully you can stare at that and figure out what your program was doing to figure out what just happened in your code right yeah so it's like a way that",
    "start": "431800",
    "end": "439240"
  },
  {
    "text": "you can kind of like checkpoint what's going on in your code mentally Insanity check that it's like doing what you",
    "start": "439240",
    "end": "444360"
  },
  {
    "text": "think it's doing yeah very well put both of you that's much more thorough than the definition for console.log that I",
    "start": "444360",
    "end": "450879"
  },
  {
    "text": "was going to look up on mdn real quick so like that tends to be like when I",
    "start": "450879",
    "end": "456840"
  },
  {
    "text": "think about logging when I hear the term logging that is what I immediately think of because that's what I do the most and I that's synonymous with debugging for",
    "start": "456840",
    "end": "463199"
  },
  {
    "text": "me at this point I recently was reminiscing about how I used to use the debugger so much more before typescript",
    "start": "463199",
    "end": "470360"
  },
  {
    "text": "kind of made that a little redundant for me because I used to just pause on things to figure out what the heck I was",
    "start": "470360",
    "end": "475479"
  },
  {
    "text": "actually typing or like what types of values I was actually passing around but I don't have that so much anymore so the",
    "start": "475479",
    "end": "482159"
  },
  {
    "text": "things that I do the most now are just console log things to kind of debug my code but then you know there's lots of",
    "start": "482159",
    "end": "489120"
  },
  {
    "text": "different ways that you can go with with just talking about logging and you know as you mentioned you can just have like simple statements printed out to the",
    "start": "489120",
    "end": "495479"
  },
  {
    "text": "console you could be sending those logs somewhere else you can provide different",
    "start": "495479",
    "end": "500879"
  },
  {
    "text": "levels for logs so that you can kind of filter on maybe not seeing everything",
    "start": "500879",
    "end": "506560"
  },
  {
    "text": "only seeing more important things or what you might deem to be more important and so on from there yeah Brett you also",
    "start": "506560",
    "end": "512800"
  },
  {
    "text": "mentioned the console or the command line like outputting logs and and so like since you right you invoked the",
    "start": "512800",
    "end": "518839"
  },
  {
    "text": "command line I'm going to invoke Chris to uh to talk about logging on the command line what's the same or",
    "start": "518839",
    "end": "524399"
  },
  {
    "text": "different if I could jump in with another another thing too I think the happy path is actually where you just",
    "start": "524399",
    "end": "529920"
  },
  {
    "text": "have like one process that's logging to the Shell but the actual like place",
    "start": "529920",
    "end": "535279"
  },
  {
    "text": "where logging gets really nasty is when you have multiple concurrent processes running at the same time like many",
    "start": "535279",
    "end": "542000"
  },
  {
    "text": "different services at once and like the easy case of logging is usually when you have just like one single process with",
    "start": "542000",
    "end": "548680"
  },
  {
    "text": "one thread that's handling events in a linear order and you can log everything and reconstruct it where it becomes",
    "start": "548680",
    "end": "554279"
  },
  {
    "text": "really chaotic is when the logs actually are like multiple processes that are running concurrently and then all kind",
    "start": "554279",
    "end": "560600"
  },
  {
    "text": "of inter mix together that's the fun logging right and that's usually where like when people talk about logging is",
    "start": "560600",
    "end": "566480"
  },
  {
    "text": "hard that's typically the case they're talking about happy path is usually not too bad right but I don't know I would",
    "start": "566480",
    "end": "573880"
  },
  {
    "text": "say it it gets complicated even before then because the logging is like a a crosscutting concern right you may have",
    "start": "573880",
    "end": "580600"
  },
  {
    "text": "a 100 modules and all 100 of those modules might need to log something and so you're not going to want to like",
    "start": "580600",
    "end": "587240"
  },
  {
    "text": "create a new logger for every module necessarily and so maybe that's there",
    "start": "587240",
    "end": "592279"
  },
  {
    "text": "are different ways people have attacked the problem like I think of something",
    "start": "592279",
    "end": "597440"
  },
  {
    "text": "like I think of something like aspect oriented programming which is not like a thing that anybody really recommends but",
    "start": "597440",
    "end": "605120"
  },
  {
    "text": "it's a way to do these sorts of cross cutting concerns and so just to give a definition of of that that's like aop is",
    "start": "605120",
    "end": "612880"
  },
  {
    "text": "like uh wrapping a function or wrapping a call and doing something before that call is happening is that kind of how",
    "start": "612880",
    "end": "619839"
  },
  {
    "text": "you describe it I don't even know the definition but I do know that it enables",
    "start": "619839",
    "end": "625519"
  },
  {
    "text": "you to like it's kind of like decorating things and yeah sprinkling decorators",
    "start": "625519",
    "end": "631480"
  },
  {
    "text": "around and but the problem I think from what I understand is is just that it makes your program really difficult to",
    "start": "631480",
    "end": "638160"
  },
  {
    "text": "reason about because you don't know what code is running mhm I think that's a good example of the incidental",
    "start": "638160",
    "end": "643720"
  },
  {
    "text": "complexity in logging and it's one of those things that happens because you do need to set up some kind of logging and",
    "start": "643720",
    "end": "650360"
  },
  {
    "text": "you do typically want to have some way to kind of control it and turn it off and like while JavaScript does have",
    "start": "650360",
    "end": "655959"
  },
  {
    "text": "built-in logging features they're usually not adequate for like larger program right cuz console log I mean at",
    "start": "655959",
    "end": "662160"
  },
  {
    "text": "least as it's interpreted by no just write something to standard out right and well ultimately most loggers just do",
    "start": "662160",
    "end": "668120"
  },
  {
    "text": "that right I mean now sometimes they have Network logging and other things there's still a lot of rules around how you turn things on and filter them or",
    "start": "668120",
    "end": "675079"
  },
  {
    "text": "you know like namespace different logging and stuff the thing that does suck is that it's not really like",
    "start": "675079",
    "end": "680240"
  },
  {
    "text": "interoperable right like you can't just like say ah I want to swap out all the logging here with a different thing you",
    "start": "680240",
    "end": "686040"
  },
  {
    "text": "end up kind of stuck with whatever logging your dependencies chosen as as your own loging service and this",
    "start": "686040",
    "end": "692440"
  },
  {
    "text": "actually creates a ton of risk for most of the people down stream because there's no interoperability in the",
    "start": "692440",
    "end": "697519"
  },
  {
    "text": "logging once you've committed to that logging system you can't back out like",
    "start": "697519",
    "end": "702680"
  },
  {
    "text": "you can't swap it to a different thing there's no General intermediate logging layer or whatever which is why things",
    "start": "702680",
    "end": "708440"
  },
  {
    "text": "like log 4J once they become inter like once they sort of infect themselves into the ecos system you can't just rip them",
    "start": "708440",
    "end": "714440"
  },
  {
    "text": "out right like it's just everyone's going to use that thing even though it's not doing anything that hard it's just it has like it's standardized on that",
    "start": "714440",
    "end": "721560"
  },
  {
    "text": "particular interface now right and so you have to keep going with that interface and you can't easily replace",
    "start": "721560",
    "end": "727120"
  },
  {
    "text": "it and so then if like log for J decides to want us to go pick up some new capability like I don't know just maybe",
    "start": "727120",
    "end": "733320"
  },
  {
    "text": "run random Java files that it downloads from the internet now all of a sudden everything using this goofy logging",
    "start": "733320",
    "end": "739720"
  },
  {
    "text": "system is vulnerable to some cool shell injection attack right it's an unfortunate thing right that logging is",
    "start": "739720",
    "end": "745800"
  },
  {
    "text": "not that interoperable but I think this is a common problem with a lot of soft sofware systems right what would be like",
    "start": "745800",
    "end": "751560"
  },
  {
    "text": "the the most like closely resembling analog to log 4J in the JavaScript",
    "start": "751560",
    "end": "758000"
  },
  {
    "text": "ecosystem would it be like something like the debug package or the debug logging package that a lot of things",
    "start": "758000",
    "end": "764399"
  },
  {
    "text": "used to use or used to use maybe debug I mean we use debug at socket right",
    "start": "764399",
    "end": "769800"
  },
  {
    "text": "because it's like next uses debug and next uses it because Express and npm use",
    "start": "769800",
    "end": "775120"
  },
  {
    "text": "it right and so it's like we've sort of been just kind of like debug became a standard because it was simply there",
    "start": "775120",
    "end": "780920"
  },
  {
    "text": "first right and not that it's like anything great right or that the codee's even that complicated like I guarantee",
    "start": "780920",
    "end": "787720"
  },
  {
    "text": "most programmers who are reasonably like even if you've just gone through like a boot camp you could probably write your",
    "start": "787720",
    "end": "793000"
  },
  {
    "text": "own logging system it's not that hard right the problem is that you have to like use that logging system everywhere",
    "start": "793000",
    "end": "799240"
  },
  {
    "text": "and you certainly don't want to have two logging systems in your code that's far too many logging systems you only need",
    "start": "799240",
    "end": "804440"
  },
  {
    "text": "one but you need it and you need to use it everywhere right and so you just have to standardize one of them so who gets",
    "start": "804440",
    "end": "810079"
  },
  {
    "text": "to write the logging system well it's like whoever got there first they wrote the logging system and now we're all using it are you doing any kind of more",
    "start": "810079",
    "end": "817480"
  },
  {
    "text": "specific logging like on you know different projects that you work on is there some kind of base level sets of",
    "start": "817480",
    "end": "823079"
  },
  {
    "text": "logging that you try and add and what kind of things are you logging out you know it's situational because logging is",
    "start": "823079",
    "end": "828600"
  },
  {
    "text": "like selective tracing like you could in the like the limit you could imagine an automatic Tracer that just completely",
    "start": "828600",
    "end": "834720"
  },
  {
    "text": "records the execution of every instruction and every statement in your program and then you wouldn't even need to log anything you could just replay",
    "start": "834720",
    "end": "841279"
  },
  {
    "text": "that but in practice that's just too much data so you usually like have a few things that you're looking at or that",
    "start": "841279",
    "end": "847120"
  },
  {
    "text": "you know about and you log those specific events like it might be you get a connection from a client or like a",
    "start": "847120",
    "end": "854279"
  },
  {
    "text": "specific event is fired or some databased transaction started or completed that kind of stuff is what",
    "start": "854279",
    "end": "859920"
  },
  {
    "text": "ends up getting logged and it's not like there's an All or Nothing thing with that it's just a bunch of different",
    "start": "859920",
    "end": "865639"
  },
  {
    "text": "stuff I mean but of course you know like we're talking about JavaScript and that ends up being like a web type thing so",
    "start": "865639",
    "end": "871480"
  },
  {
    "text": "the other thing is you often end up with like logging coming in from clients into your server because you also want to",
    "start": "871480",
    "end": "877320"
  },
  {
    "text": "like log events from like different users browsers but then you also need to record them on your back end in some way",
    "start": "877320",
    "end": "883360"
  },
  {
    "text": "and like try to correlate those events with what's going on in your server one thing that I've noticed is like a lot of client logging systems Place quite a bit",
    "start": "883360",
    "end": "891160"
  },
  {
    "text": "of trust in the browser to run their code correctly and so I've often wondered like why we don't see like sort",
    "start": "891160",
    "end": "897079"
  },
  {
    "text": "of attacks on these logging systems more often right it seems to me like a pretty common Vector for example like Sentry",
    "start": "897079",
    "end": "904560"
  },
  {
    "text": "you know there's like a a function where you can just embed it in a client and it can just like log random crap to the",
    "start": "904560",
    "end": "909959"
  },
  {
    "text": "server right why don't you know people just blow your Sentry quota by just putting like a for Loop in the JavaScript console and log it why don't",
    "start": "909959",
    "end": "916720"
  },
  {
    "text": "people do that you can just like send cute messages to the developers be like hello I know don't give them ideas I",
    "start": "916720",
    "end": "922880"
  },
  {
    "text": "know don't give people ideas but I mean like surely everyone's thought about this devious possibility right I mean",
    "start": "922880",
    "end": "928399"
  },
  {
    "text": "like seems like almost none of these logging systems do any kind of validation on the client side in other",
    "start": "928399",
    "end": "935199"
  },
  {
    "text": "systems not like JavaScript which are less Dynamic like I've seen C code bases do this the number of things you can log",
    "start": "935199",
    "end": "941959"
  },
  {
    "text": "on a client is explicitly enumerated right like you just have like a lookup table of different strings and then you",
    "start": "941959",
    "end": "947959"
  },
  {
    "text": "can just like log them it's kind of like an internationalization type of thing and so then you can't just like spam",
    "start": "947959",
    "end": "953600"
  },
  {
    "text": "them with a bunch of stuff and you could always like rate limit a client if they're sending too many things but as far as know a lot of the JavaScript",
    "start": "953600",
    "end": "960040"
  },
  {
    "text": "logging stuff does nothing of this sort to ensure the Integrity of untrusted code from the client it's just anyone",
    "start": "960040",
    "end": "965079"
  },
  {
    "text": "can log anything which is also why log for J and these kind of things end up being really bad because if you have a",
    "start": "965079",
    "end": "970240"
  },
  {
    "text": "Java back end and then like a JavaScript front end that's logging things that go to log forj eventually all of a sudden",
    "start": "970240",
    "end": "976199"
  },
  {
    "text": "your server is rooted now again oh no right what have we done why did we do this I can't imagine why you keep",
    "start": "976199",
    "end": "981680"
  },
  {
    "text": "bringing that up as an example right the worst thing to do if you're making like",
    "start": "981680",
    "end": "986720"
  },
  {
    "text": "a CLI app is somebody starts using like they type the command and then it says",
    "start": "986720",
    "end": "993160"
  },
  {
    "text": "okay running or or something like that or it just says nothing and it does nothing and you don't know what it's",
    "start": "993160",
    "end": "999560"
  },
  {
    "text": "doing so you're just kind of waiting you don't want to do that like you really",
    "start": "999560",
    "end": "1005040"
  },
  {
    "text": "want to say like all right I'm working on it now I mean if you're piping things",
    "start": "1005040",
    "end": "1010639"
  },
  {
    "text": "around obviously you don't need a progress bar but you're going to want something some feedback for the user if",
    "start": "1010639",
    "end": "1018279"
  },
  {
    "text": "you don't have that they might as well control C is it broken is it working I don't know yeah anything that's going to",
    "start": "1018279",
    "end": "1024959"
  },
  {
    "text": "take some time you want to tell the user what's going on so related to that and",
    "start": "1024959",
    "end": "1030160"
  },
  {
    "text": "specifically for the CLI like this interesting thing that I've been thinking about as I like dabble with",
    "start": "1030160",
    "end": "1036079"
  },
  {
    "text": "writing mostly I'm writing them in bash but you know they could be in JavaScript or something else but when you're",
    "start": "1036079",
    "end": "1042360"
  },
  {
    "text": "writing those out do you think about whether you're going to send it to standard out or standard err yes and how",
    "start": "1042360",
    "end": "1049760"
  },
  {
    "text": "do you delineate what you send where so basically if the output of your program",
    "start": "1049760",
    "end": "1056720"
  },
  {
    "text": "can be machine readable uhhuh so maybe you have like a Jason flag or something",
    "start": "1056720",
    "end": "1062600"
  },
  {
    "text": "that says output Jason like npm does right you could say d djason that should go to standard out all your progress",
    "start": "1062600",
    "end": "1069840"
  },
  {
    "text": "bars and all that nonsense should probably just go to standard a yeah do you think feel like including like just",
    "start": "1069840",
    "end": "1075880"
  },
  {
    "text": "general like working on it dot dot dot type message lot like log messages should it also go to Standard air I",
    "start": "1075880",
    "end": "1081840"
  },
  {
    "text": "would the way that I think about it is like if it's something that I might want to pipe in somewhere else then I want it to go to standard out but if it's just",
    "start": "1081840",
    "end": "1088520"
  },
  {
    "text": "like random like oh you know I created a directory or whatever that goes to standard error for me dang I've been",
    "start": "1088520",
    "end": "1094360"
  },
  {
    "text": "doing it wrong the whole time if the output of your program is a text file like I don't know prettier does this",
    "start": "1094360",
    "end": "1100840"
  },
  {
    "text": "right if you don't use d-r prettier just like dumps the prettified file to",
    "start": "1100840",
    "end": "1106640"
  },
  {
    "text": "standard out then it does I mean that's te standed out sure it doesn't have to",
    "start": "1106640",
    "end": "1112480"
  },
  {
    "text": "be like a Json or XML or what have you browser if I was another tool that did",
    "start": "1112480",
    "end": "1119120"
  },
  {
    "text": "that early on or in the node ecosystem was like yes that was like a big kind of one of the bigger differences between it",
    "start": "1119120",
    "end": "1124600"
  },
  {
    "text": "and like webpack at the time that was one of the best parts of browser five why don't the other build tools do that",
    "start": "1124600",
    "end": "1130840"
  },
  {
    "text": "it like it wouldn't even be hard for them to support it it's just they just suck kind of is really what I've come to",
    "start": "1130840",
    "end": "1136799"
  },
  {
    "text": "the conclusion some of the newer ones are but I know what you're talking about yeah es build is good but we know the",
    "start": "1136799",
    "end": "1142559"
  },
  {
    "text": "one we're talking about that's not good right that's very popular and it starts with a w and ends with the CK right part",
    "start": "1142559",
    "end": "1150039"
  },
  {
    "text": "of the reason is I mean yes you couldn't certainly add the feature but you probably don't want to actually use it",
    "start": "1150039",
    "end": "1156559"
  },
  {
    "text": "on like open source code because it's not portable if you're dumping this standard out and then piping the things",
    "start": "1156559",
    "end": "1163120"
  },
  {
    "text": "that's not going to work in like command. exe right that's fine I don't care about that",
    "start": "1163120",
    "end": "1170039"
  },
  {
    "text": "why do I care about command. exe it's command. exe is overrated no one runs anything in command. exe there was a",
    "start": "1170039",
    "end": "1176200"
  },
  {
    "text": "Twitter thread people were talking about like what's the state of like Windows support like what's the minimum like",
    "start": "1176200",
    "end": "1182039"
  },
  {
    "text": "thing you have to do to make sure they're happy some people including myself suggesting like why not just expect everyone to use Windows subsystem",
    "start": "1182039",
    "end": "1188760"
  },
  {
    "text": "for Linux and I guess there's still a number of like things that don't work exactly correct in the Linux",
    "start": "1188760",
    "end": "1194880"
  },
  {
    "text": "compatibility layer like around like file watching and stuff like that so we're so close to like exact",
    "start": "1194880",
    "end": "1200760"
  },
  {
    "text": "compatibility but but not quite there in some ways so yeah well and then there's also like the file path length limits",
    "start": "1200760",
    "end": "1207200"
  },
  {
    "text": "and then the weird Behavior with spaces and casing and stuff it just Windows is it doesn't work it just stop bothering",
    "start": "1207200",
    "end": "1214240"
  },
  {
    "text": "with it I feel like people should just give up right I mean it's been long enough nothing works on it really so",
    "start": "1214240",
    "end": "1219520"
  },
  {
    "text": "they have Windows subsystem for Linux it's just stop doing the windows thing it doesn't it's done yeah but I mean",
    "start": "1219520",
    "end": "1226440"
  },
  {
    "text": "most JavaScript developers are using windows so we kind of have to think about them if we're making open source",
    "start": "1226440",
    "end": "1232840"
  },
  {
    "text": "right hey and they can install Linux on their Windows using Microsoft TM Linux right like they can just go if they know",
    "start": "1232840",
    "end": "1239520"
  },
  {
    "text": "how to use bash we can teach them how right Microsoft there's probably like a little MSI installer you click or",
    "start": "1239520",
    "end": "1246280"
  },
  {
    "text": "something and then you get Linux and there you go right another like meta observation around like clis is that",
    "start": "1246280",
    "end": "1252640"
  },
  {
    "text": "this sort of style of CIS has changed a lot it seems like over the last five or",
    "start": "1252640",
    "end": "1258720"
  },
  {
    "text": "10 years when I like sort of was entering into this space like people were still very much about like Unix",
    "start": "1258720",
    "end": "1265240"
  },
  {
    "text": "philosophy be silent and less explicitly asked for output and make sure that",
    "start": "1265240",
    "end": "1271720"
  },
  {
    "text": "everything's pipeable by default blah blah blah blah and I think I don't know where it exactly changed but it seems",
    "start": "1271720",
    "end": "1278159"
  },
  {
    "text": "like after git where you people got used to this very interactive CLI experience",
    "start": "1278159",
    "end": "1283600"
  },
  {
    "text": "that's designed for less for you know machine piping like pip between like",
    "start": "1283600",
    "end": "1289039"
  },
  {
    "text": "Unix programs and more for just like General input for a human it seems like",
    "start": "1289039",
    "end": "1294279"
  },
  {
    "text": "you started seeing a lot more fancy CIS and Spinners and lots of text output and stuff like that too so it seems like the",
    "start": "1294279",
    "end": "1301480"
  },
  {
    "text": "some of the early best practices of in some sense have gone out of style in a",
    "start": "1301480",
    "end": "1306919"
  },
  {
    "text": "way as well so yeah I do still think that that's a good philosophy though just my own personal I mean it's good to",
    "start": "1306919",
    "end": "1313320"
  },
  {
    "text": "support everything and kind of make everyone happy as best as you can depending on the context of what you're doing so yeah it's like do you think of",
    "start": "1313320",
    "end": "1319640"
  },
  {
    "text": "your shell as like a programming language or is more like an interactive user interface right and this is kind of",
    "start": "1319640",
    "end": "1325480"
  },
  {
    "text": "a a thing a lot of reples I think sort of struggle with that I would sort of characterize like the unic style thing",
    "start": "1325480",
    "end": "1331919"
  },
  {
    "text": "is really just a functional approach where it's like these commands are actually functions that take data or",
    "start": "1331919",
    "end": "1339120"
  },
  {
    "text": "input and transform it from one state to another and they're fundamentally like immutable like they just observe things",
    "start": "1339120",
    "end": "1345799"
  },
  {
    "text": "and then they write something to standard out and then where it goes from there that's up to you the other side is more like a mutable type of interface",
    "start": "1345799",
    "end": "1353120"
  },
  {
    "text": "right where it's more like an imperative mode type of operation where you're changing the state of your computer by",
    "start": "1353120",
    "end": "1359120"
  },
  {
    "text": "sending commands to it and so it's sort of like a q basic type of interface and",
    "start": "1359120",
    "end": "1364400"
  },
  {
    "text": "get even though it is ironically based on immutable data structures Works more like the ladder it is basically a",
    "start": "1364400",
    "end": "1370880"
  },
  {
    "text": "mutable interface for your current git repository which is confusing because the git commands are just actually",
    "start": "1370880",
    "end": "1377600"
  },
  {
    "text": "Changing State right when you're running that you know even though the actual get repo is a functional data",
    "start": "1377600",
    "end": "1383260"
  },
  {
    "text": "[Music]",
    "start": "1383260",
    "end": "1394600"
  },
  {
    "text": "structure this episode is brought to you by our friends at ray gun they give software teams instant visibility into",
    "start": "1394600",
    "end": "1401480"
  },
  {
    "text": "the quality and the performance of their software and I'm here with John Daniel tras co-founder and CEO of ray gun JD t",
    "start": "1401480",
    "end": "1408600"
  },
  {
    "text": "me about the joy a team feels when they're able to find and resolve an issue even before a customer has a",
    "start": "1408600",
    "end": "1414840"
  },
  {
    "text": "chance to get upset or reach out to support about the issue talk about that",
    "start": "1414840",
    "end": "1420360"
  },
  {
    "text": "well I find it pretty exciting to be able to hit it off early so and being able to tell people you resolved",
    "start": "1420360",
    "end": "1425559"
  },
  {
    "text": "something so maybe they come through you know and they do report an issue and you can say cool we don't need to ask you",
    "start": "1425559",
    "end": "1431000"
  },
  {
    "text": "for any more context we've got all the details and we can have this fixed tomorrow it turns an atrisk customer into an absolute raving advocate so",
    "start": "1431000",
    "end": "1438120"
  },
  {
    "text": "that's a a huge win and then the other thing that was a little bit embarrassing we launched ray gun but we had these other products and we instrumented them",
    "start": "1438120",
    "end": "1445000"
  },
  {
    "text": "and that's when we realized this less than 1% of our users would ever actually report a problem and so you're sitting",
    "start": "1445000",
    "end": "1450520"
  },
  {
    "text": "there thinking your software is actually not bad and actually it's really really bad and that's hurting all of your",
    "start": "1450520",
    "end": "1456640"
  },
  {
    "text": "conversion rates business performance you know these aren't really Dev tools they're actually business tools all right if you want to see how this Dev",
    "start": "1456640",
    "end": "1462840"
  },
  {
    "text": "tool impacts the entire business head to run.com to learn more and start your 14-day free trial no credit card",
    "start": "1462840",
    "end": "1469679"
  },
  {
    "text": "required join thousands of customer Centric software teams who use ray gun every single day to deliver Flawless",
    "start": "1469679",
    "end": "1476440"
  },
  {
    "text": "experiences to their customers again Ray gun.com [Music]",
    "start": "1476440",
    "end": "1491950"
  },
  {
    "text": "during the break we were talking about how whether we were just I was sort of posing the idea is there a big",
    "start": "1494440",
    "end": "1500640"
  },
  {
    "text": "difference between like CLI logging where you're providing context to a user",
    "start": "1500640",
    "end": "1506480"
  },
  {
    "text": "versus logging for a backend service that's sort of shooting out structured",
    "start": "1506480",
    "end": "1511559"
  },
  {
    "text": "like log lines that's getting collected in some kind of log database like you know data dog or or logus or whatever",
    "start": "1511559",
    "end": "1518559"
  },
  {
    "text": "and I think Chris said there you could actually do it in both you do both at the same time in some context yeah so",
    "start": "1518559",
    "end": "1523960"
  },
  {
    "text": "these I don't know some of these newer tools right I suspect some of them do this I don't really build web apps but I",
    "start": "1523960",
    "end": "1531320"
  },
  {
    "text": "know there are fancy tools out there that will let you say run a development server right and they also like bundle",
    "start": "1531320",
    "end": "1539360"
  },
  {
    "text": "your code so maybe even webpack does that sort of thing right I don't know if",
    "start": "1539360",
    "end": "1544559"
  },
  {
    "text": "it does it out of the box so on the one hand you've got the serve mode where you've now you're like logging HTTP",
    "start": "1544559",
    "end": "1552159"
  },
  {
    "text": "calls but then you also have like the bundle mode where it shows you the files and the package size and all that",
    "start": "1552159",
    "end": "1558559"
  },
  {
    "text": "garbage so like you can have a tool that does both the project I'm working on now appm does both it has like a like a tool",
    "start": "1558559",
    "end": "1567440"
  },
  {
    "text": "CLI tool component to help you install and manage like plugins but then it also",
    "start": "1567440",
    "end": "1573720"
  },
  {
    "text": "is mainly just a server and so there's like two kinds of logging going on do",
    "start": "1573720",
    "end": "1579600"
  },
  {
    "text": "they end up using different like Ser like tools for both contacts or is there like a unified library that does kind of",
    "start": "1579600",
    "end": "1586159"
  },
  {
    "text": "both styles of logging no comment but okay that's a pain point at the moment",
    "start": "1586159",
    "end": "1592480"
  },
  {
    "text": "okay yeah this is one of those things where it's like the design of Unix is probably holding us back a little bit",
    "start": "1592480",
    "end": "1598600"
  },
  {
    "text": "right like uh I mean this type of thing happens all the time like for example next does this and pretty much every",
    "start": "1598600",
    "end": "1605039"
  },
  {
    "text": "large web project I've ever worked ends up in the same kind of situation where like again like you say your development",
    "start": "1605039",
    "end": "1610520"
  },
  {
    "text": "environment maybe you're running typescript and web pack and a bunch of these other things which have like a little watch mode and then the watch",
    "start": "1610520",
    "end": "1616440"
  },
  {
    "text": "mode has like one style formatting and then you also have your web server and then maybe any subservices for that web",
    "start": "1616440",
    "end": "1622799"
  },
  {
    "text": "server and then all those logs are just getting dumped into one big stream and you you know good luck sorting that mess",
    "start": "1622799",
    "end": "1628960"
  },
  {
    "text": "out here you go buddy right you can do stuff like okay you just open up",
    "start": "1628960",
    "end": "1634559"
  },
  {
    "text": "multiple shells and then you have to manually start every single one of these processes and each of its like little",
    "start": "1634559",
    "end": "1640240"
  },
  {
    "text": "shells and then you can switch between them but I mean like in a more perfect world wouldn't it be nice if it could",
    "start": "1640240",
    "end": "1646440"
  },
  {
    "text": "just like open multiple shells for you automatically and you could just have multiple output streams that could be",
    "start": "1646440",
    "end": "1651679"
  },
  {
    "text": "redirected in there I think there's probably like some Unix tool that sort of does that for you to like parallel",
    "start": "1651679",
    "end": "1658000"
  },
  {
    "text": "execute them but it's like it would be nice if there was something like a little more baked into the way like",
    "start": "1658000",
    "end": "1663039"
  },
  {
    "text": "shells worked that allowed you to like have more than two default output streams right you only have your",
    "start": "1663039",
    "end": "1669200"
  },
  {
    "text": "standard out and Standard air but why can't you have more I don't know well you only get two so deal with it right",
    "start": "1669200",
    "end": "1674640"
  },
  {
    "text": "you could script all of that with t-mo and then just have it open could yeah separate I say we need like a t-mo logger where you just page between the",
    "start": "1674640",
    "end": "1681640"
  },
  {
    "text": "different output streams yeah you can set it up right but it becomes like kind of awkward because then you have to make",
    "start": "1681640",
    "end": "1687760"
  },
  {
    "text": "sure that your tools sort of decompose in some way and like what if it is really like some more integrated thing where you know you're running like some",
    "start": "1687760",
    "end": "1694559"
  },
  {
    "text": "modified version of es build that knows something about your web server or whatever it's it would be nice if it was",
    "start": "1694559",
    "end": "1699919"
  },
  {
    "text": "sort of like uh like kind of built into the interface right cuz you can open up multiple shells there are multiple TTY",
    "start": "1699919",
    "end": "1706760"
  },
  {
    "text": "that exist you just have to open up different files or something it's always like kind of clumsy doing this I don't know I feel like there's probably a",
    "start": "1706760",
    "end": "1712919"
  },
  {
    "text": "potential for Innovation there someone can figure out a nicer way to handle that and it would be cool I could certainly try to make a piece of",
    "start": "1712919",
    "end": "1719640"
  },
  {
    "text": "JavaScript that did that but I'm not going to go hack on a shell that could be cool maybe I mean but the thing is",
    "start": "1719640",
    "end": "1725799"
  },
  {
    "text": "like then it has to kind of integrate with your actual terminal emulator in some way right I mean or maybe you could",
    "start": "1725799",
    "end": "1730880"
  },
  {
    "text": "just open up multiple TT wise or something so I don't know what the right solution would look like for that yeah I",
    "start": "1730880",
    "end": "1736360"
  },
  {
    "text": "don't I don't want to get in the Weeds on that but I am definitely like being nerd sniped like I want to go check that",
    "start": "1736360",
    "end": "1743240"
  },
  {
    "text": "out and see what what that would I don't know maybe it could be done what about other tools maybe that's what next",
    "start": "1743240",
    "end": "1748600"
  },
  {
    "text": "should next should do it whatever it is like their terminal thing should just have the ability to like not put it all",
    "start": "1748600",
    "end": "1754080"
  },
  {
    "text": "in one giant unreadable stream because the output is actually completely useless from like the next terminal",
    "start": "1754080",
    "end": "1759480"
  },
  {
    "text": "debug log it's just it's like everything is like smsh together right and it's like I I don't even know so I don't even",
    "start": "1759480",
    "end": "1765200"
  },
  {
    "text": "look at it it's useless to me yeah that is maybe where you make the decision to then just build a like some custom log",
    "start": "1765200",
    "end": "1772480"
  },
  {
    "text": "viewer in electron or something to to look at it all or maybe one of these newer shell or terminal emulators like",
    "start": "1772480",
    "end": "1779080"
  },
  {
    "text": "warp or something starts building it I was going to ask does anyone have any",
    "start": "1779080",
    "end": "1784120"
  },
  {
    "text": "experience with like more advanced logging I'm trying to think of like apps",
    "start": "1784120",
    "end": "1789840"
  },
  {
    "text": "or or logging utilities that I think it's a mistake to call more complicated",
    "start": "1789840",
    "end": "1795279"
  },
  {
    "text": "logging Advanced because that like implies that ah we should all be doing that and the answer is no don't do it if",
    "start": "1795279",
    "end": "1801640"
  },
  {
    "text": "you can avoid it right like keep your logging simple simple logging is Advanced logging complicated logging is",
    "start": "1801640",
    "end": "1808440"
  },
  {
    "text": "just complicated it's not Advanced it's bad if you have to do it right so like don't like try to bait people into",
    "start": "1808440",
    "end": "1814840"
  },
  {
    "text": "making it more advanced please like no more advanced logging Advanced logging is how we get log forj do we need",
    "start": "1814840",
    "end": "1821279"
  },
  {
    "text": "another log forj no don't make it more advanced make it simpler there's maybe",
    "start": "1821279",
    "end": "1826760"
  },
  {
    "text": "one Avenue that maybe would be considered more advanced which is like structured logging so yeah like rather",
    "start": "1826760",
    "end": "1833240"
  },
  {
    "text": "than just dumping random strings unformat strings to whatever standard out or it's standard you conso out group",
    "start": "1833240",
    "end": "1840480"
  },
  {
    "text": "them right no I mean like I'm thinking more like a penino library where you",
    "start": "1840480",
    "end": "1845720"
  },
  {
    "text": "know you it has like a little API and like you pipe data into like with objects and it like formats it",
    "start": "1845720",
    "end": "1853240"
  },
  {
    "text": "consistently and can enforce things like having a transaction ID like in a log",
    "start": "1853240",
    "end": "1858799"
  },
  {
    "text": "line and so in theory if you're disciplined about this you could like",
    "start": "1858799",
    "end": "1863840"
  },
  {
    "text": "search for a transaction idea in like a log P like a big stash of logs in a",
    "start": "1863840",
    "end": "1869399"
  },
  {
    "text": "logging service and see like a transaction move across different like services but again typically when you",
    "start": "1869399",
    "end": "1876600"
  },
  {
    "text": "have multiple services in a big or or project it means multiple people so",
    "start": "1876600",
    "end": "1881639"
  },
  {
    "text": "getting everyone to like follow that pattern consistently becomes the Challen it becomes a people problem at that",
    "start": "1881639",
    "end": "1887360"
  },
  {
    "text": "point so yeah and also if you want to do like analysis you know like at some point like if your system gets",
    "start": "1887360",
    "end": "1893279"
  },
  {
    "text": "complicated enough then your logs start picking up schemas right in order to make them parsible or whatever and then",
    "start": "1893279",
    "end": "1899080"
  },
  {
    "text": "it's just like I got a question for my do not want",
    "start": "1899080",
    "end": "1904799"
  },
  {
    "text": "for my socket buddies so what do you use for logging then how do you go about it you use debug you don't like consume",
    "start": "1904799",
    "end": "1912320"
  },
  {
    "text": "like a third party service or anything like that I could talk about a few things that we do I do think we need a",
    "start": "1912320",
    "end": "1918159"
  },
  {
    "text": "little bit more discipline in this area but debug is kind of like the basic tool that we use for like if we want to see",
    "start": "1918159",
    "end": "1924639"
  },
  {
    "text": "what a particular part of the code path is doing specifically in a log format like we'll use that some of the things",
    "start": "1924639",
    "end": "1931840"
  },
  {
    "text": "that the service does log to standard out and some of it actually like saves",
    "start": "1931840",
    "end": "1936919"
  },
  {
    "text": "things to a database in a transaction so we kind of have like a few different approaches to it I think it's it's",
    "start": "1936919",
    "end": "1944559"
  },
  {
    "text": "something that has seems like it's grown organically and probably it's some point in the future we probably need to visit",
    "start": "1944559",
    "end": "1950120"
  },
  {
    "text": "this and be a little more intentional about it but we're still pretty early on so yeah so for most like kind of",
    "start": "1950120",
    "end": "1957600"
  },
  {
    "text": "development we use debug for logging because it's the same thing that next uses and all of our other stuff in npm",
    "start": "1957600",
    "end": "1965279"
  },
  {
    "text": "uses so we're just kind of like stuck with that unless we want to create another debug equivalent which we don't",
    "start": "1965279",
    "end": "1970840"
  },
  {
    "text": "so we use that and I think if you're working in node and you're working and using a lot of projects built in npm you",
    "start": "1970840",
    "end": "1977159"
  },
  {
    "text": "pretty much end up having to use debug and that's just the way the world is right now besides that we do use like",
    "start": "1977159",
    "end": "1986679"
  },
  {
    "text": "some more sort of like structured logging for specific events we need to do analytics on or querying so these are",
    "start": "1986679",
    "end": "1992399"
  },
  {
    "text": "things where like they have some kind of like business impact or there's something we like need to measure later",
    "start": "1992399",
    "end": "1998039"
  },
  {
    "text": "on so for we like collect like certain profiling data in our SQL database that",
    "start": "1998039",
    "end": "2003279"
  },
  {
    "text": "we then can do like sort of aggre it's like okay like what analysis is taking too long or for things like GitHub",
    "start": "2003279",
    "end": "2010559"
  },
  {
    "text": "events like web Hooks and stuff we have to log those right but those are actually needed for correctness because we have to like sometimes replay a web",
    "start": "2010559",
    "end": "2017360"
  },
  {
    "text": "hook right if it like if something crashed in the middle or the GitHub API timed out or whatever right and then we",
    "start": "2017360",
    "end": "2022760"
  },
  {
    "text": "have to retry it when you do stuff like that do are you like putting queries in your code base and just firing them off",
    "start": "2022760",
    "end": "2030279"
  },
  {
    "text": "or yeah yeah we've been using um Json B fields for kind of catch all yeah",
    "start": "2030279",
    "end": "2038320"
  },
  {
    "text": "columns and some of those logs I mean I would say the main difference between the two approaches to is like one is",
    "start": "2038320",
    "end": "2043760"
  },
  {
    "text": "very intentional and like one is kind of more halfhazard so like logging with debug is like I'm just logging what's",
    "start": "2043760",
    "end": "2051040"
  },
  {
    "text": "happening right here at this line whereas when we are capturing things into our database it's like like I want",
    "start": "2051040",
    "end": "2057440"
  },
  {
    "text": "to collect this data very specifically and be able to like query it later and",
    "start": "2057440",
    "end": "2063358"
  },
  {
    "text": "this sort of structured logging idea that I threw out earlier is kind of a middle ground it's kind of like you know",
    "start": "2063359",
    "end": "2069118"
  },
  {
    "text": "debug just to catch anyone up who doesn't know about the debug package it's basically it's kind of like",
    "start": "2069119",
    "end": "2074440"
  },
  {
    "text": "console.log but you turn it on with an environment variable and each each file has to set up like a little name space",
    "start": "2074440",
    "end": "2081280"
  },
  {
    "text": "and you can filter which files are logging essentially it doesn't enforce anything about like what's in the log",
    "start": "2081280",
    "end": "2087000"
  },
  {
    "text": "structured logging like a structured logger like Pino or whatever like you kind of feed it data objects and then it",
    "start": "2087000",
    "end": "2093720"
  },
  {
    "text": "formats it in like very specific formats so there's like a development view so for humans and then Json for like a log",
    "start": "2093720",
    "end": "2101720"
  },
  {
    "text": "aggregate service like data dog or or elastic search and stuff like that so that would be kind of the middle ground",
    "start": "2101720",
    "end": "2107760"
  },
  {
    "text": "between the two I think yeah I mean also I could say one other thing too which is the last project I worked on used a",
    "start": "2107760",
    "end": "2114000"
  },
  {
    "text": "completely crazy like logging system that was not based on anything like debug or whatever right but that was",
    "start": "2114000",
    "end": "2119720"
  },
  {
    "text": "because we wrote our entire web stack from scratch right so it was like a JavaScript project but we had like a",
    "start": "2119720",
    "end": "2126160"
  },
  {
    "text": "schema based thing and it's also was like an online browser game so everything worked in a very different",
    "start": "2126160",
    "end": "2131520"
  },
  {
    "text": "way and the performance requirements were very different from a typical web app so we use like almost like no",
    "start": "2131520",
    "end": "2137599"
  },
  {
    "text": "existing npm packages all written from scratch so like there's many ways to do this you know practice just kind of",
    "start": "2137599",
    "end": "2144720"
  },
  {
    "text": "figure out what works yeah what of like metrics like things you you sh off and",
    "start": "2144720",
    "end": "2151040"
  },
  {
    "text": "look at in grafana or something like that right yeah for that kind of like you know performance measurement like",
    "start": "2151040",
    "end": "2157680"
  },
  {
    "text": "like for those kind of analytics things I think they kind of break into two categories we have ones which are sort of defined by like some business like",
    "start": "2157680",
    "end": "2165920"
  },
  {
    "text": "use case right like you know measuring the performance of some task or whatever where we do the logging ourselves in the",
    "start": "2165920",
    "end": "2172000"
  },
  {
    "text": "database and then we can query it our own way and then for other stuff which are like more standardized like Google",
    "start": "2172000",
    "end": "2177640"
  },
  {
    "text": "analytics type of stuff we just use like a off-the-shelf analytics package and then that does its own metrics",
    "start": "2177640",
    "end": "2183640"
  },
  {
    "text": "collection and it just has its own system for doing that and we don't even touch it have you ever used a tool that",
    "start": "2183640",
    "end": "2189839"
  },
  {
    "text": "like does like full I'm thinking back to web apps now but like full session recording where you can basically replay",
    "start": "2189839",
    "end": "2197000"
  },
  {
    "text": "everything that user's done and then debug it from there I mean I played around with like the data dog one and",
    "start": "2197000",
    "end": "2202520"
  },
  {
    "text": "like the real user monitors or real user monitoring tools the rum yeah yeah which",
    "start": "2202520",
    "end": "2207920"
  },
  {
    "text": "is really cool but I haven't ever had a sort of a chance to really like like",
    "start": "2207920",
    "end": "2213119"
  },
  {
    "text": "really fully I just kind of demoed it you know I haven't actually like used it to yeah I mean I know Heap has a a",
    "start": "2213119",
    "end": "2220800"
  },
  {
    "text": "product that does this as well there's a couple of there's a bunch of different options now for this I've used like",
    "start": "2220800",
    "end": "2226280"
  },
  {
    "text": "matomo extensively in the past but I find that like for the it depends on the application though like when we're",
    "start": "2226280",
    "end": "2233359"
  },
  {
    "text": "working on doing sort of like the game stuff you know that we're working on the sessions were very very long and there",
    "start": "2233359",
    "end": "2239240"
  },
  {
    "text": "were a lot of events so it wasn't really very feasible to do like a full replay",
    "start": "2239240",
    "end": "2244520"
  },
  {
    "text": "with all of the webgl stuff and everything across multiple browsers and make that work in any kind of like",
    "start": "2244520",
    "end": "2250839"
  },
  {
    "text": "reasonable way so we just did that we just collected more like aggregate statistics from users and that kind of",
    "start": "2250839",
    "end": "2256359"
  },
  {
    "text": "thing didn't try to like get detailed sessions because we had like millions of players right it wasn't really feasible",
    "start": "2256359",
    "end": "2261800"
  },
  {
    "text": "to collect all that data yeah and for like longer running things like that that's a good example of when you might",
    "start": "2261800",
    "end": "2267560"
  },
  {
    "text": "not want to do that and kind of be more selective in what you're grabbing but if you know that you have kind of more shortlived sessions that can be a",
    "start": "2267560",
    "end": "2274400"
  },
  {
    "text": "valuable way to kind of debug things later and you can I'm sure there's tools I've heard about them on you know in ads",
    "start": "2274400",
    "end": "2280000"
  },
  {
    "text": "and stuff about being able to when this error occurred send the state of the application along with it so that you",
    "start": "2280000",
    "end": "2286000"
  },
  {
    "text": "know exactly what happened and you can kind of build that in and reproduce it from there which is pretty cool so that",
    "start": "2286000",
    "end": "2292319"
  },
  {
    "text": "kind of touches into air handling so we're going to take a break and then we'll be back to talk more in depth about air",
    "start": "2292319",
    "end": "2298360"
  },
  {
    "text": "[Music]",
    "start": "2298360",
    "end": "2305730"
  },
  {
    "text": "handling we are go to ship in three 2 1 I'm gar",
    "start": "2306440",
    "end": "2314520"
  },
  {
    "text": "Lao host of ship it a show with weekly episodes about getting your best ideas into the world and seeing what happens",
    "start": "2314520",
    "end": "2321560"
  },
  {
    "text": "we talk about code Ops infrastructure and the people that make it happen like charity Majors from honeycomb we act",
    "start": "2321560",
    "end": "2328720"
  },
  {
    "text": "like great engineers make great teams and it's exactly the opposite in fact it is great teams that make great engineers",
    "start": "2328720",
    "end": "2336839"
  },
  {
    "text": "and they far when the founders of continuous delivery start off assuming that we're wrong rather than assuming",
    "start": "2336839",
    "end": "2342640"
  },
  {
    "text": "that we're right test our ideas try and falsify our ideas those are better ways of doing work and it doesn't really",
    "start": "2342640",
    "end": "2348920"
  },
  {
    "text": "matter what work it is that you're doing that stuff just works better we even experiment on our own open-source",
    "start": "2348920",
    "end": "2355800"
  },
  {
    "text": "podcasting platform so that you can see how we Implement specific tools and services within Chang log.com what works",
    "start": "2355800",
    "end": "2363160"
  },
  {
    "text": "and what fails it's like there's a brand new hammer and we grab hold of it and every gathers around we put our hand out",
    "start": "2363160",
    "end": "2369079"
  },
  {
    "text": "and we we strike it right on our thumb and then everybody knows that hammer",
    "start": "2369079",
    "end": "2374440"
  },
  {
    "text": "really hurts when you strike it on your thumb I'm glad those guys did it I've learned something instead yeah I think",
    "start": "2374440",
    "end": "2380079"
  },
  {
    "text": "that's a very interesting perspective but I don't see that way okay it's an amazing analogy but I'm not sure that",
    "start": "2380079",
    "end": "2387240"
  },
  {
    "text": "applies here listen to an episode that seems interesting or helpful and if you like it subscribe today we'd love to",
    "start": "2387240",
    "end": "2392920"
  },
  {
    "text": "have you with [Music] us",
    "start": "2392920",
    "end": "2398359"
  },
  {
    "text": "all right so in the last session we talked about logging and kind of started seguing into air handling and kind of",
    "start": "2398359",
    "end": "2404960"
  },
  {
    "text": "seeing that so let's kind of more formally talk about air handling and some of the best practices around that",
    "start": "2404960",
    "end": "2410680"
  },
  {
    "text": "and I know everyone on this panel has strong opinions about air handling so",
    "start": "2410680",
    "end": "2415839"
  },
  {
    "text": "let's start with a definition Mick do you want to give us a definition errors or like exceptions yeah airr handling I",
    "start": "2415839",
    "end": "2421400"
  },
  {
    "text": "I don't know it's kind of a vague yeah error is a weird thing right in JavaScript yeah it's a very special",
    "start": "2421400",
    "end": "2427040"
  },
  {
    "text": "object object right and it's the only way that I know of anyway at runtime that you can actually reflect over the",
    "start": "2427040",
    "end": "2433160"
  },
  {
    "text": "stack of a program but basically like exceptions which are the actual thing",
    "start": "2433160",
    "end": "2438319"
  },
  {
    "text": "that's kind of interesting in JavaScript they're just a kind of non-local control flow featur so if you throw an exception",
    "start": "2438319",
    "end": "2445280"
  },
  {
    "text": "you'll go up your call stack to the point where the exception was ultimately caught in a try catch block or it'll",
    "start": "2445280",
    "end": "2452319"
  },
  {
    "text": "just go right to the top of the event Loop and then crash and print something to your standard out or where ever and",
    "start": "2452319",
    "end": "2458680"
  },
  {
    "text": "you know handling these exceptions is of course something that everyone needs to know about if they're writing code in JavaScript you also have to think about",
    "start": "2458680",
    "end": "2465200"
  },
  {
    "text": "this when you're dealing with promises because that makes it a little bit more subtle where these exceptions ultimately bubble out and I'm sure everyone's seen",
    "start": "2465200",
    "end": "2471839"
  },
  {
    "text": "this uncaught promise rejection warning if you've ever done anything async but yeah it's just part of the language you",
    "start": "2471839",
    "end": "2478079"
  },
  {
    "text": "have to know how it works if you want to write code and it can be useful in a few places and we have a bunch of modern",
    "start": "2478079",
    "end": "2483640"
  },
  {
    "text": "goodies with our SS now yeah it's true it used to be simp it used to be there were just thrown exceptions and in fact",
    "start": "2483640",
    "end": "2490200"
  },
  {
    "text": "they did you don't even have to like throw in error you can throw anything in JavaScript and it'll go up your call stack to wherever you caught it right",
    "start": "2490200",
    "end": "2496680"
  },
  {
    "text": "you can throw a string you can throw a number you can even throw null it doesn't matter you can throw whatever you like you you can throw a promise",
    "start": "2496680",
    "end": "2503599"
  },
  {
    "text": "I've learned that you can throw promises you can throw whatever you want right and it doesn't care but the error object",
    "start": "2503599",
    "end": "2509839"
  },
  {
    "text": "is a special thing that you can throw right and you should usually use the error when you throw it because the error will give you a stack trace and",
    "start": "2509839",
    "end": "2517319"
  },
  {
    "text": "stack Trace tells you like what called the code that actually triggered that original exception or object or whatever",
    "start": "2517319",
    "end": "2524760"
  },
  {
    "text": "to be thrown up the stack and that is actually the useful part of Errors right is that they can capture Stacks Nick you",
    "start": "2524760",
    "end": "2532400"
  },
  {
    "text": "threw a promise what you catch it and then like resolve it you catch it check and see if it's",
    "start": "2532400",
    "end": "2539400"
  },
  {
    "text": "been resolved and then rethrow it and this is called suspense really that's how it works cool is that a good idea",
    "start": "2539400",
    "end": "2549119"
  },
  {
    "text": "sure anything's a good idea if it works yeah mocha abuses throw if you say",
    "start": "2550480",
    "end": "2558880"
  },
  {
    "text": "to skip in your function body of like a hook or a test if you say this. skip it",
    "start": "2558880",
    "end": "2565160"
  },
  {
    "text": "throws it will not run anything after that skip but it throws a special object",
    "start": "2565160",
    "end": "2571400"
  },
  {
    "text": "called a pending and we just catch the pending it's not an error but it just it",
    "start": "2571400",
    "end": "2576480"
  },
  {
    "text": "throws thing and of course it's uh hypocritical because if you try to throw",
    "start": "2576480",
    "end": "2583839"
  },
  {
    "text": "something that isn't an error in mocha in your tests it complains and says throw an error instead of whatever you",
    "start": "2583839",
    "end": "2590400"
  },
  {
    "text": "just threw but we don't follow our own advice right do as I say yeah I've seen",
    "start": "2590400",
    "end": "2596119"
  },
  {
    "text": "that in other packages too like when like I hook them up to like um some kind of like APM that you know logs out",
    "start": "2596119",
    "end": "2603920"
  },
  {
    "text": "errors and you start seeing like erors coming out of a module it's not crashing your service you're like what's going on",
    "start": "2603920",
    "end": "2609559"
  },
  {
    "text": "here like oh it's talking to itself through errors yeah many packages do this like this is a thing that we've",
    "start": "2609559",
    "end": "2615680"
  },
  {
    "text": "kind of realized uh by just doing a lot of static analysis so one thing is uh uh",
    "start": "2615680",
    "end": "2621160"
  },
  {
    "text": "throw make static analysis in Java script so so so much harder than it would be otherwise it's already a",
    "start": "2621160",
    "end": "2626280"
  },
  {
    "text": "dynamic language so like resolving into you know like a piece of code like trying to like figure out the points to",
    "start": "2626280",
    "end": "2632839"
  },
  {
    "text": "analysis and all of the symbol binding and everything that's not easy but then when you're trying to build like the",
    "start": "2632839",
    "end": "2638760"
  },
  {
    "text": "control flow graph taking into account that anything can throw pretty much and when it throws it doesn't just return to",
    "start": "2638760",
    "end": "2645559"
  },
  {
    "text": "where it through it can just go further up right if you were to actually put all of like the control flow links for every",
    "start": "2645559",
    "end": "2652520"
  },
  {
    "text": "piece of code it's like almost any piece of code can like just somehow non-locally jump to any other piece of",
    "start": "2652520",
    "end": "2658200"
  },
  {
    "text": "code when you take into account exceptions right so in practice most things that do static analysis or try to",
    "start": "2658200",
    "end": "2664319"
  },
  {
    "text": "optimize JavaScript just pretend that that case doesn't happen or don't worry about it and deal with it in a different",
    "start": "2664319",
    "end": "2669960"
  },
  {
    "text": "way and V8 is the same way about this too right like V8 would not be able to optimize your JavaScript code if it was",
    "start": "2669960",
    "end": "2676760"
  },
  {
    "text": "really doing crazy stuff like jumping around with throws all over the place and um this actually is like a",
    "start": "2676760",
    "end": "2683319"
  },
  {
    "text": "demonstrable thing where if you start putting a lot of TR catch blocks in your code and using throws you'll find that",
    "start": "2683319",
    "end": "2688599"
  },
  {
    "text": "you fall off a performance cliff in V8 where it's often way slower if you're",
    "start": "2688599",
    "end": "2694240"
  },
  {
    "text": "using exceptions than if you're not using exceptions because the happy path where you're not using exceptions you",
    "start": "2694240",
    "end": "2699720"
  },
  {
    "text": "have a very simple easily analyzable control flow graph that can be statically understood and optimized and",
    "start": "2699720",
    "end": "2707079"
  },
  {
    "text": "the moment you throw exceptions into this thing that graph just becomes shattered into a million tiny little",
    "start": "2707079",
    "end": "2712240"
  },
  {
    "text": "fragments of JavaScript everywhere right and it's like oh God nothing can be done anymore and then you're just sort of",
    "start": "2712240",
    "end": "2717960"
  },
  {
    "text": "stuck right with like doing Dynamic interpretation am I hurting myself by using suspense then probably but if it",
    "start": "2717960",
    "end": "2725720"
  },
  {
    "text": "works it's okay right I mean you know it's probably not that much slower right",
    "start": "2725720",
    "end": "2730920"
  },
  {
    "text": "or maybe it's not slow in a way that matters yeah have you ever like worked on or seen a code base that actually",
    "start": "2730920",
    "end": "2737720"
  },
  {
    "text": "just decided for performance reasons not to throw and instead like returns errors from functions you know yeah yeah I mean",
    "start": "2737720",
    "end": "2744839"
  },
  {
    "text": "at the on the last project I worked on before socket which was basically a game",
    "start": "2744839",
    "end": "2749920"
  },
  {
    "text": "that ran in a browser we sort of banned exceptions pretty much because they're just really too slow you shouldn't use",
    "start": "2749920",
    "end": "2755119"
  },
  {
    "text": "them ever I wonder if it's improved it all since then I mean last I really looked at this carefully which was a",
    "start": "2755119",
    "end": "2761160"
  },
  {
    "text": "couple years ago it was pretty bad right and I think it's not improved much because I was actually looking at a",
    "start": "2761160",
    "end": "2767160"
  },
  {
    "text": "performance issue in our analysis on socket and currently like about 5% of",
    "start": "2767160",
    "end": "2772559"
  },
  {
    "text": "all of our CPU time is spent in the node sver package just calling like the sver",
    "start": "2772559",
    "end": "2778319"
  },
  {
    "text": "test satisfies function or whatever and just looking at like well why is that slow well guess what sver does under the",
    "start": "2778319",
    "end": "2784280"
  },
  {
    "text": "hood lots of try catch lots of exception right so I haven't finished youing into",
    "start": "2784280",
    "end": "2790720"
  },
  {
    "text": "this particular issue but there's a part of me that's like maybe I need to Fork node sber and just remove all of those",
    "start": "2790720",
    "end": "2797920"
  },
  {
    "text": "exceptions this is like a surprising point for node style callback programming which did not use",
    "start": "2797920",
    "end": "2804079"
  },
  {
    "text": "exceptions yeah we're never going back though it's not going to happen no no no no no look I'm not going back to",
    "start": "2804079",
    "end": "2810000"
  },
  {
    "text": "callbacks promises are great you know but we have a new style call back for asyn away style programming which isre",
    "start": "2810000",
    "end": "2817119"
  },
  {
    "text": "yeah now callbacks do make exceptions a lot more interesting and the other thing that's also kind of profound about",
    "start": "2817119",
    "end": "2823400"
  },
  {
    "text": "callbacks or promises that I think people didn't fully understand when they created them at first is that exceptions",
    "start": "2823400",
    "end": "2830160"
  },
  {
    "text": "they sort of come from the bottom of your call stack and they go up but when you're working with promises sometimes",
    "start": "2830160",
    "end": "2836520"
  },
  {
    "text": "it's useful to send an exception in the opposite direction from the top of your call stack down and this is where abort",
    "start": "2836520",
    "end": "2843960"
  },
  {
    "text": "signals come in and unfortunately the first version of promises did not have abort signals built in and it's not an",
    "start": "2843960",
    "end": "2850200"
  },
  {
    "text": "automatic thing so you have to do a lot of plumbing and the way they end up working looks a lot like manually",
    "start": "2850200",
    "end": "2855480"
  },
  {
    "text": "returning error codes unfortunately but you kind of have to know about them and then fix them or else you're going to",
    "start": "2855480",
    "end": "2860920"
  },
  {
    "text": "have problems with your promise code right yeah so maybe let's define what a",
    "start": "2860920",
    "end": "2866200"
  },
  {
    "text": "boort signal is and start from there yeah boort signals are basically like a",
    "start": "2866200",
    "end": "2874079"
  },
  {
    "text": "duel of an exception they're a type of an event right which in the sort of concurrent programming parament is like",
    "start": "2874079",
    "end": "2880760"
  },
  {
    "text": "uh sort of like a synchronization primitive where you can signal it and",
    "start": "2880760",
    "end": "2885839"
  },
  {
    "text": "then it fires once and then you can there's sort of two apis right it has like a signal where you can fire the event and then there's like a weight",
    "start": "2885839",
    "end": "2892280"
  },
  {
    "text": "that basically Waits until the event has uh completed and you can use events to implement things like barriers or other",
    "start": "2892280",
    "end": "2898119"
  },
  {
    "text": "types of synchronization but basically it's sort of like a one-way Channel if you know about go where you can just put",
    "start": "2898119",
    "end": "2904839"
  },
  {
    "text": "one message into it and then it pops out the other side so it's a it's a sync primitive right and abort signals",
    "start": "2904839",
    "end": "2911760"
  },
  {
    "text": "there's actually two sides of an abort signal there's an abort signal and an abort controller so all you can do with",
    "start": "2911760",
    "end": "2917599"
  },
  {
    "text": "the abort signal is you can just wait until it was aborted right and then when it's aborted it'll fire an event that",
    "start": "2917599",
    "end": "2923480"
  },
  {
    "text": "you can then handle in your code or you can also just pull the abort signal to",
    "start": "2923480",
    "end": "2928760"
  },
  {
    "text": "check if it's already aborted basically and so where this would be useful is if you have like a long running promise or",
    "start": "2928760",
    "end": "2935319"
  },
  {
    "text": "some other task that needs to be cancelled and basically you want to stop that task from running right so the",
    "start": "2935319",
    "end": "2941400"
  },
  {
    "text": "abort controller you can fire a signal that cancels the abort signal that is",
    "start": "2941400",
    "end": "2946440"
  },
  {
    "text": "associated to that abort controller then everything that's waiting on that abort signal will get a little message saying hey stop what you're doing abort clean",
    "start": "2946440",
    "end": "2953440"
  },
  {
    "text": "up stop shows over pack up your stuff go home right and where this was initially created was in the fetch API right so",
    "start": "2953440",
    "end": "2960040"
  },
  {
    "text": "this was not actually a thing that shipped with promises in the beginning but it was basically in Fetch it used to",
    "start": "2960040",
    "end": "2966359"
  },
  {
    "text": "be there were like a million different ways that you could try to like abort it and this is partly because it tried to",
    "start": "2966359",
    "end": "2972599"
  },
  {
    "text": "copy the older XML HTTP request API so you could do stuff like set a timeout",
    "start": "2972599",
    "end": "2977799"
  },
  {
    "text": "set a retry you know set like there all these like different special conditions and there're just like different flags",
    "start": "2977799",
    "end": "2983400"
  },
  {
    "text": "and configuration parameters where you would try to like enumerate all of the cases where this thing should stop and",
    "start": "2983400",
    "end": "2989240"
  },
  {
    "text": "then in the case of the xhr there was also just like this sort of catchall method where you could call abort on the",
    "start": "2989240",
    "end": "2994799"
  },
  {
    "text": "xhr and it would stop and so fetch initially was trying to replace the xhr",
    "start": "2994799",
    "end": "2999880"
  },
  {
    "text": "API with something that's using promises that's and it's better right like you should use fetch but it took him a",
    "start": "2999880",
    "end": "3006119"
  },
  {
    "text": "couple of iterations to get this right because with promises initially there wasn't an easy way to just like abort",
    "start": "3006119",
    "end": "3012119"
  },
  {
    "text": "the fetch right after you've already fired one off so after like a bunch of discussion and maybe like a year back",
    "start": "3012119",
    "end": "3019359"
  },
  {
    "text": "and forth on news groups and you can look online I mean I was not involved in this process I'm merely a bystander just",
    "start": "3019359",
    "end": "3024760"
  },
  {
    "text": "eating popcorn watching this play out right eventually abort signal was uh sort of proposed as the solution for",
    "start": "3024760",
    "end": "3031160"
  },
  {
    "text": "this and the way you make a fetch abortable was you just pass an abort signal into the fetch object and then",
    "start": "3031160",
    "end": "3037680"
  },
  {
    "text": "it'll handle that abort signal and when it's done you know it'll cancel the",
    "start": "3037680",
    "end": "3042839"
  },
  {
    "text": "fetch right and that's much more flexible because you can cancel this you know if your fetch was initiated by some",
    "start": "3042839",
    "end": "3049200"
  },
  {
    "text": "other promise or whatever and you decide you want to cancel it then you can just kill all the fetches at once right so",
    "start": "3049200",
    "end": "3054880"
  },
  {
    "text": "it's it's a better API and it took a while to get it and it started in Fetch but it turns out that",
    "start": "3054880",
    "end": "3061520"
  },
  {
    "text": "this concept is not just useful for fetch but you should really be using",
    "start": "3061520",
    "end": "3067280"
  },
  {
    "text": "abort signals in every promise that you write almost guaranteed like if you're",
    "start": "3067280",
    "end": "3072319"
  },
  {
    "text": "not using abort signals in your promises your code is probably",
    "start": "3072319",
    "end": "3078480"
  },
  {
    "text": "incorrect okay like for example if you do promise.all and you have one of those",
    "start": "3078480",
    "end": "3084720"
  },
  {
    "text": "things that throws an exception you probably want to cancel all the other promises in that promise do unless you",
    "start": "3084720",
    "end": "3090440"
  },
  {
    "text": "wanted to actually catch that exception and then return an aggregate error or whatever but usually if you have like a",
    "start": "3090440",
    "end": "3096640"
  },
  {
    "text": "task that fails you typically want to fail immediately with all these other tasks that are running and just clean",
    "start": "3096640",
    "end": "3102040"
  },
  {
    "text": "them up right so the only way to really Implement that kind of cancel all of my",
    "start": "3102040",
    "end": "3107559"
  },
  {
    "text": "parallel promises and clean them up is for them to implement abort signals and",
    "start": "3107559",
    "end": "3112599"
  },
  {
    "text": "it has to be propagated all the way down so everything that can potentially do an await should actually be waiting",
    "start": "3112599",
    "end": "3119040"
  },
  {
    "text": "contingent on some abort signal if an abort signal happens in parallel while you're awaiting you should stop awaiting",
    "start": "3119040",
    "end": "3125319"
  },
  {
    "text": "and throw or cancel or bail out right you I mean so bold claims right so the",
    "start": "3125319",
    "end": "3131040"
  },
  {
    "text": "the yes if you're using promises what if I'm just doing something like an FS right file right then you can even just",
    "start": "3131040",
    "end": "3138520"
  },
  {
    "text": "do it sync you don't even need at that point like yeah sure you just don't care about the exception it's the same way like do you need to catch every",
    "start": "3138520",
    "end": "3144760"
  },
  {
    "text": "exception that's thrown well if you're writing Java yeah you do but yeah sometimes you can just let your program",
    "start": "3144760",
    "end": "3149880"
  },
  {
    "text": "die right but you know or sometimes like it's a command line tool if it goes in an infinite Loop which is actually the",
    "start": "3149880",
    "end": "3155040"
  },
  {
    "text": "Duel of dying right is basically it gets stuck in like a long running promise you can just control C it and kill the",
    "start": "3155040",
    "end": "3161040"
  },
  {
    "text": "process and restart everything right but that said sometimes abort signals are needed to even make control C work",
    "start": "3161040",
    "end": "3166680"
  },
  {
    "text": "because you might be stuck on something that can't even handle the control c signal right so to even handle a control",
    "start": "3166680",
    "end": "3172400"
  },
  {
    "text": "c signal correctly you might actually want to use an abort signal there so if you want to keep your processor around for a longer period of time it becomes",
    "start": "3172400",
    "end": "3178520"
  },
  {
    "text": "increasingly more important yeah like if you're writing like any kind of persistent service you need to be using",
    "start": "3178520",
    "end": "3183839"
  },
  {
    "text": "abort signals pretty much everywhere in a CLI your control C is kind of your",
    "start": "3183839",
    "end": "3189200"
  },
  {
    "text": "built-in abort signal right yeah but the thing is that well yeah but sometimes it",
    "start": "3189200",
    "end": "3194440"
  },
  {
    "text": "doesn't work then you have to control Z and then kill -9% one or whatever and nuke the thing that way right if it's",
    "start": "3194440",
    "end": "3200000"
  },
  {
    "text": "not really a boarding I have used a board signal with Fetch and I know that you just pass it in as like I think it's",
    "start": "3200000",
    "end": "3205640"
  },
  {
    "text": "like a signal property that you pass but you can just use it with normal promises I have an example",
    "start": "3205640",
    "end": "3211440"
  },
  {
    "text": "this was kind of like the moment that clicked with me with a board signals was um with promises and async O8",
    "start": "3211440",
    "end": "3219200"
  },
  {
    "text": "programming doing control flow sty and concurrency limiting code is a little",
    "start": "3219200",
    "end": "3225359"
  },
  {
    "text": "bit different than like with callbacks or just just plain promises where you",
    "start": "3225359",
    "end": "3230559"
  },
  {
    "text": "typically use like a little API rapper that does all the control flow stuff in in the middle like run all but limit to",
    "start": "3230559",
    "end": "3236839"
  },
  {
    "text": "five or whatever if you wanted to try to move towards a more I guess literal",
    "start": "3236839",
    "end": "3242559"
  },
  {
    "text": "programming Style with async awake and doing concurrency and control there's a great pattern that I turned on to",
    "start": "3242559",
    "end": "3249680"
  },
  {
    "text": "recently called semaphor which I guess I guess other language people like other",
    "start": "3249680",
    "end": "3254799"
  },
  {
    "text": "language ecosystems like you know had these for ages but they're kind of new to JS and because of async AWA so abort",
    "start": "3254799",
    "end": "3261480"
  },
  {
    "text": "controllers work really well with semaphor because you can pass the abort controller in or abort signal into the",
    "start": "3261480",
    "end": "3268319"
  },
  {
    "text": "semaphor creation and when your promise.all array or whatever is waiting",
    "start": "3268319",
    "end": "3273760"
  },
  {
    "text": "on like the different semaphor to like open up and let like the the new tasks",
    "start": "3273760",
    "end": "3278960"
  },
  {
    "text": "start they can actually be listening on this and like abort out of those before those other tasks or promises have even",
    "start": "3278960",
    "end": "3285400"
  },
  {
    "text": "started so it fits really well with that style of programming I don't know if that translates to a spoken podcast if",
    "start": "3285400",
    "end": "3292520"
  },
  {
    "text": "that makes any sense but look up semors and abortable seor for a good example of",
    "start": "3292520",
    "end": "3298559"
  },
  {
    "text": "like how this kind of like work into a more General asyn weight workflow so",
    "start": "3298559",
    "end": "3303760"
  },
  {
    "text": "yeah did that M did I get that right Mick I don't know um well yeah we it's",
    "start": "3303760",
    "end": "3309880"
  },
  {
    "text": "fine I'm kind of a SE for no myself so I'm still learning about like how to describe them correctly I've used them",
    "start": "3309880",
    "end": "3316119"
  },
  {
    "text": "once in like C back in college for like one one programming example or homework",
    "start": "3316119",
    "end": "3322599"
  },
  {
    "text": "file that I had to like do something with multiple threads I think and it was ensuring that only one thread was",
    "start": "3322599",
    "end": "3328000"
  },
  {
    "text": "writing to a file at a time I think and looking at this example I'll put in the show notes but it it's kind of like that",
    "start": "3328000",
    "end": "3334359"
  },
  {
    "text": "where you you use the you create a lock from the semaphore and then you can acquire the lock and then release the",
    "start": "3334359",
    "end": "3340640"
  },
  {
    "text": "lock so you can acquire it to do something and it ensures that nowhere else will be able to do that and then",
    "start": "3340640",
    "end": "3345760"
  },
  {
    "text": "release it later I'm not sure I'm following how in JS essentially you you await the lock okay and essentially",
    "start": "3345760",
    "end": "3353039"
  },
  {
    "text": "right you do that like in a promise.all style content",
    "start": "3353039",
    "end": "3358240"
  },
  {
    "text": "whatever control flow pattern that your semaphor is configured for so yeah so a semaphor is kind of like a",
    "start": "3363839",
    "end": "3369160"
  },
  {
    "text": "generalization of a lock it's instead of just one lock it's a counter so it can",
    "start": "3369160",
    "end": "3374359"
  },
  {
    "text": "actually be used to allow more than one thread to go into the critical section or share a resource or whatever so it's",
    "start": "3374359",
    "end": "3381920"
  },
  {
    "text": "basically like a synchronized counter and you can sort of wait until the C is greater than zero and then you can enter",
    "start": "3381920",
    "end": "3388280"
  },
  {
    "text": "a critical section but I think the general concept of having abortable synchronization Primitives is a bigger",
    "start": "3388280",
    "end": "3394839"
  },
  {
    "text": "deal than just semaphor it's just happens that in our code we use a lot of semaphor because whenever you have to do",
    "start": "3394839",
    "end": "3400760"
  },
  {
    "text": "any kind of concurrency control or synchronization in a long running process maybe this my own personal bias",
    "start": "3400760",
    "end": "3406079"
  },
  {
    "text": "I just end up reaching for semaphor most of the time because I find them to be the easiest to work with and understand but other people you know like things",
    "start": "3406079",
    "end": "3413079"
  },
  {
    "text": "like monitors or whatever you could do it if you like the general concept though is if you're waiting using",
    "start": "3413079",
    "end": "3418799"
  },
  {
    "text": "promises you need to allow for aborting when you do the waight to synchronize",
    "start": "3418799",
    "end": "3423920"
  },
  {
    "text": "because the aborting is what allows you to like not get stuck in a deadlock on that like weight and you just end up",
    "start": "3423920",
    "end": "3430160"
  },
  {
    "text": "with this kind of dangling promise or something sitting around right so like you need to have the abortable",
    "start": "3430160",
    "end": "3436559"
  },
  {
    "text": "concurrency Primitives right they could be promises or they could be locks they could be semaphor they could be whatever",
    "start": "3436559",
    "end": "3442200"
  },
  {
    "text": "right but yeah but semaphor are very useful if you do anything where want to like limit the number of threads running",
    "start": "3442200",
    "end": "3448640"
  },
  {
    "text": "and like you could use it for a critical section but you could also use it as just like a general throttle like say you have like a bunch of different tasks",
    "start": "3448640",
    "end": "3455480"
  },
  {
    "text": "that are all kind of running and you don't want to run more than like five of them at once or something you can just have everything wait on a semaphore",
    "start": "3455480",
    "end": "3461880"
  },
  {
    "text": "that's initialize to five and then when they're done with their critical section they signal and let the next thread go through right and you can have like a",
    "start": "3461880",
    "end": "3468000"
  },
  {
    "text": "global semaphore that you can use to dial up or down the amount of concurrency you want to allow those tasks to have for example like if you're",
    "start": "3468000",
    "end": "3475039"
  },
  {
    "text": "hitting the GitHub API right and GitHub is Right limiting you because you don't want to have too many threads hitting it",
    "start": "3475039",
    "end": "3480599"
  },
  {
    "text": "at once from the same worker so you put a semaphor on there to like throttle the number of threads hitting it at the same",
    "start": "3480599",
    "end": "3486880"
  },
  {
    "text": "time some real-time feedback I just GPT for abort controller and abort signal in my code base and I am apparently doing",
    "start": "3486880",
    "end": "3495319"
  },
  {
    "text": "promises very wrong because it's not in there once yeah probably yeah you might want to take a",
    "start": "3495319",
    "end": "3502920"
  },
  {
    "text": "look at that yeah for like a single threaded promise where it just kind of goes from top to bottom maybe it's",
    "start": "3502920",
    "end": "3509799"
  },
  {
    "text": "excusable but for example say you have like a here's another place where this would be useful if you have like a web server and you're handling your request",
    "start": "3509799",
    "end": "3518039"
  },
  {
    "text": "in a promise then say the incoming request like times out or the client",
    "start": "3518039",
    "end": "3524000"
  },
  {
    "text": "disconnects or whatever right then you might want to use the abort controller",
    "start": "3524000",
    "end": "3529160"
  },
  {
    "text": "to fire a signal down to all of the promises in that Handler to tell them",
    "start": "3529160",
    "end": "3534559"
  },
  {
    "text": "like hey stop whatever you're doing right don't waste any more resources handling this request let's get back to",
    "start": "3534559",
    "end": "3541200"
  },
  {
    "text": "business and just like stop that right so your server doesn't just end up kind of going into this Loop where it's like",
    "start": "3541200",
    "end": "3546400"
  },
  {
    "text": "oh you know I got to handle this request for a guy who's already like left to go get a sandwich or you know pieced out",
    "start": "3546400",
    "end": "3552160"
  },
  {
    "text": "from your page right so mhm that's one place where it's very useful another very concrete place too is not even in",
    "start": "3552160",
    "end": "3558760"
  },
  {
    "text": "the request Handler but going like a little more granularly down in a react component sometimes when a component",
    "start": "3558760",
    "end": "3565359"
  },
  {
    "text": "mounts it doesn't have all the state immediately so like when you mount a component like say you click to a tab",
    "start": "3565359",
    "end": "3570920"
  },
  {
    "text": "and it starts loading a bunch of stuff you might initiate a bunch of request to like download like different Media or",
    "start": "3570920",
    "end": "3577440"
  },
  {
    "text": "other things that is needed just by that component right but suppose like a user clicks open a tab right starts",
    "start": "3577440",
    "end": "3583640"
  },
  {
    "text": "downloading a bunch of data but then they're like ah I go to another tab right but now you have this like dangling kind of request or promise or",
    "start": "3583640",
    "end": "3590799"
  },
  {
    "text": "whatever that could be doing some heavy work in the background there so what you probably want to do is have a hook that",
    "start": "3590799",
    "end": "3597839"
  },
  {
    "text": "creates an abort signal right and then when the component unmounts the unmount",
    "start": "3597839",
    "end": "3603160"
  },
  {
    "text": "controller or the unmount hook will basically fire off the abort signal and kill all those promises that respond by",
    "start": "3603160",
    "end": "3609000"
  },
  {
    "text": "mounting that component which is another very common pattern that we have in our code right so like if you navigate to",
    "start": "3609000",
    "end": "3615359"
  },
  {
    "text": "some page or whatever it starts loading some stuff then you say h it's loading too slow click somewhere else right",
    "start": "3615359",
    "end": "3620400"
  },
  {
    "text": "because I have like the attention span of a goldfish thanks to YouTube and social media right and so like I go to",
    "start": "3620400",
    "end": "3626400"
  },
  {
    "text": "the next thing and then okay well my computer is still running all these stupid promises in the background from that so just kill them using the abort",
    "start": "3626400",
    "end": "3633640"
  },
  {
    "text": "controller right once you realize like oh yeah I should be doing that like it's all of a sudden very obvious that like",
    "start": "3633640",
    "end": "3639280"
  },
  {
    "text": "you really need to be using these things everywhere top to bottom right and it's unfortunate because you know like at",
    "start": "3639280",
    "end": "3645000"
  },
  {
    "text": "least with exceptions like there's kind of built-in like language stuff to try to help you propagate an exception up a",
    "start": "3645000",
    "end": "3651039"
  },
  {
    "text": "stack right so like one way of thinking about it if you like want to use scary functional stuff is like there's sort of",
    "start": "3651039",
    "end": "3657200"
  },
  {
    "text": "like a built-in monad for exceptions like a built-in maybe monad that it's like throws or whatever but what you",
    "start": "3657200",
    "end": "3662920"
  },
  {
    "text": "really want for abort controllers and Promises is actually like a Comon ad",
    "start": "3662920",
    "end": "3668319"
  },
  {
    "text": "that can actually stick abort controllers onto everything right that's probably how it should be you want to throw down like exactly we're throwing",
    "start": "3668319",
    "end": "3674359"
  },
  {
    "text": "down not up right so basically abort controllers are like exceptions that go down rather than up stop stop stop what",
    "start": "3674359",
    "end": "3681760"
  },
  {
    "text": "are you doing stop it you can't say that anymore cuz you can't say like shoot the",
    "start": "3681760",
    "end": "3687319"
  },
  {
    "text": "thing in the head but that's too violent right so you can't hit the promises anymore but you have to throw something down to them to tell them to stop that's",
    "start": "3687319",
    "end": "3694160"
  },
  {
    "text": "I don't know what's the more peaceful way to say this now I don't know what's the mick yeah when you abort and you end",
    "start": "3694160",
    "end": "3700000"
  },
  {
    "text": "up catching an abort signal uh throw is there a way to add additional context to",
    "start": "3700000",
    "end": "3706039"
  },
  {
    "text": "where it aborted ha thank you for asking that question and I think I know why because yeah it used to be one of the",
    "start": "3706039",
    "end": "3713760"
  },
  {
    "text": "worst Parts about abort signals is that it just says I aborted I don't know what",
    "start": "3713760",
    "end": "3718839"
  },
  {
    "text": "happened right and it doesn't actually tell you why it aborted and so this is you know like with an exception right an",
    "start": "3718839",
    "end": "3724319"
  },
  {
    "text": "exception can give you like some like little context or Reason about why you aborted or why it threw right and you",
    "start": "3724319",
    "end": "3730240"
  },
  {
    "text": "get a stack abort signals don't give you a stack Trace down which is kind of like annoying although we have some hacks to",
    "start": "3730240",
    "end": "3736079"
  },
  {
    "text": "sort of fix that in our own code base but the bigger issue is that it used to",
    "start": "3736079",
    "end": "3741680"
  },
  {
    "text": "be they would just say I aborted and don't tell you why now this has been fixed there's now a reason field for an",
    "start": "3741680",
    "end": "3747680"
  },
  {
    "text": "abort signal so in the newest version of node node 18 so you have to be running node 18 you can pass a little string or",
    "start": "3747680",
    "end": "3755720"
  },
  {
    "text": "something into the abort reason and then your abort controller will know like why",
    "start": "3755720",
    "end": "3761599"
  },
  {
    "text": "it aborted right and you can check that reason when you abort and then you'll actually get some context as to why it aborted which is very useful for",
    "start": "3761599",
    "end": "3768839"
  },
  {
    "text": "troubleshooting abort signals and you should absolutely use that however it only works in node 18 so if you're not",
    "start": "3768839",
    "end": "3774680"
  },
  {
    "text": "running node 18 good luck I don't know it does work in modern browsers now but",
    "start": "3774680",
    "end": "3780160"
  },
  {
    "text": "it does not work in older node so there's a good reason to upgrade the killer feature of note 18 is abort",
    "start": "3780160",
    "end": "3786680"
  },
  {
    "text": "controller reasons and built-in fetch yes built-in fetch too maybe that will be the thing that gets me off of node 14",
    "start": "3786680",
    "end": "3793880"
  },
  {
    "text": "yeah I think this if you start using them you'll probably find that like I wish it had that reason field another",
    "start": "3793880",
    "end": "3800000"
  },
  {
    "text": "thing we could talk about too similar to The Reason field and is it called reason yes reason okay air Construction now",
    "start": "3800000",
    "end": "3806119"
  },
  {
    "text": "have an optional cause field in their options object so you can like catch a",
    "start": "3806119",
    "end": "3811240"
  },
  {
    "text": "throw and then add more context by creating a new air with a cause of the",
    "start": "3811240",
    "end": "3816599"
  },
  {
    "text": "caught air which is like also very super helpful although maybe it goes against",
    "start": "3816599",
    "end": "3821920"
  },
  {
    "text": "this don't try catch everywhere if you're cared about critical performance but or maybe V8 can just fix that I",
    "start": "3821920",
    "end": "3827720"
  },
  {
    "text": "don't know yeah maybe V8 is better now I like cuz again all these performance things they're only kind of relative to",
    "start": "3827720",
    "end": "3833799"
  },
  {
    "text": "whatever V8 is doing at the time that I last looked at it which probably could have changed right I haven't checked it",
    "start": "3833799",
    "end": "3840319"
  },
  {
    "text": "before this thing yet so I maybe I should double check that I don't know so with CLI apps stop throwing Stacks okay",
    "start": "3840319",
    "end": "3850319"
  },
  {
    "text": "like G is written in what I don't know probably C probably C++ right I don't really care people don't they shouldn't",
    "start": "3850319",
    "end": "3858119"
  },
  {
    "text": "like care what language your CLI tool is written in you don't care necessarily",
    "start": "3858119",
    "end": "3864640"
  },
  {
    "text": "like what Lang language any of your desktop apps are written in nobody cares about that stuff if you're throwing",
    "start": "3864640",
    "end": "3872640"
  },
  {
    "text": "Stacks in they're there in front of the user they're not really actionable by the user other than maybe a nice one",
    "start": "3872640",
    "end": "3879359"
  },
  {
    "text": "will copy and paste that into a GitHub issue but if you know that there's like",
    "start": "3879359",
    "end": "3886760"
  },
  {
    "text": "an exception that's going to potentially happen you want to catch that and you want to explain to the user in nice",
    "start": "3886760",
    "end": "3893319"
  },
  {
    "text": "language like this is what why it broke like I couldn't write to this file I",
    "start": "3893319",
    "end": "3898960"
  },
  {
    "text": "don't have permissions you don't need to just throw and and dump a stack Trace because nobody should have to care about",
    "start": "3898960",
    "end": "3905799"
  },
  {
    "text": "that nobody should have to like in a perfect world nobody should care that your CLI app is written in node and",
    "start": "3905799",
    "end": "3911319"
  },
  {
    "text": "nobody should care that there's like a source file or something right so that's my Spiel I can agree with that generally",
    "start": "3911319",
    "end": "3918799"
  },
  {
    "text": "unless your app was written in Java then I do care I was going to say or elect because it's gonna have log for",
    "start": "3918799",
    "end": "3924640"
  },
  {
    "text": "J folks really care about whether it's written in electron or not I remember",
    "start": "3924640",
    "end": "3929760"
  },
  {
    "text": "having a really hard time reading python stack traces coming out of python CIS I'm not sure yeah they're backwards",
    "start": "3929760",
    "end": "3937119"
  },
  {
    "text": "they're backwards yeah I think that was the thing was like how do I read this it was um confusing they're backwards but I",
    "start": "3937119",
    "end": "3942720"
  },
  {
    "text": "have to imagine like if a python developer looks at a stack Trace from a node app they're probably like what is this what order is this",
    "start": "3942720",
    "end": "3949039"
  },
  {
    "text": "in but yeah I don't need to see python stack traces like if a python tool",
    "start": "3949039",
    "end": "3954640"
  },
  {
    "text": "breaks that sort of thing is probably like a language culture type of thing",
    "start": "3954640",
    "end": "3960079"
  },
  {
    "text": "but I don't know the only time I might want to see a stack Trace is if like the CLI is actually running JavaScript that",
    "start": "3960079",
    "end": "3966160"
  },
  {
    "text": "I wrote and like there's an error I kind of want to see the stack use debug like",
    "start": "3966160",
    "end": "3971680"
  },
  {
    "text": "in Dev mode for sure do use debug yeah okay yeah just like have a verbos or you know log levels and all that junk and",
    "start": "3971680",
    "end": "3979000"
  },
  {
    "text": "then you can see the stack gra what do you think is the real harm in having a stack right for users like is it just",
    "start": "3979000",
    "end": "3985279"
  },
  {
    "text": "kind of like an aesthetic thing like this looks ugly and therefore like we shouldn't have it or is it like",
    "start": "3985279",
    "end": "3991240"
  },
  {
    "text": "confusing to people in some way right that maybe we should try to give them an affordance it could be confusing it all",
    "start": "3991240",
    "end": "3999039"
  },
  {
    "text": "of these reasons it's just not unnecessary I think if debugging the not",
    "start": "3999039",
    "end": "4004480"
  },
  {
    "text": "the JavaScript code isn't the purpose of the error then it probably definitely shouldn't be there by default at least",
    "start": "4004480",
    "end": "4011160"
  },
  {
    "text": "yeah I mean as a developer I love getting good stack traces when code crashes right and it often crashes on",
    "start": "4011160",
    "end": "4018200"
  },
  {
    "text": "other people's computers so it's nice if they can send me the stack tray back right but at the same time I mean like",
    "start": "4018200",
    "end": "4025160"
  },
  {
    "text": "it would be better if my code just didn't crash but maybe they should find a better programmer to write it then is",
    "start": "4025160",
    "end": "4030319"
  },
  {
    "text": "sort of philosophically I come to all right if an exception is uncaught",
    "start": "4030319",
    "end": "4036920"
  },
  {
    "text": "and unexpected no does a thing with that so there will be a stack trace and you",
    "start": "4036920",
    "end": "4044000"
  },
  {
    "text": "should know with with throwing exceptions and tools you need to know who your audience is so if your audience",
    "start": "4044000",
    "end": "4049920"
  },
  {
    "text": "is just somebody using the tool you probably don't need to do it but if say you have a CLI tool and that CLI tool",
    "start": "4049920",
    "end": "4057160"
  },
  {
    "text": "accepts plugins or something that plug-in author might want to know and so",
    "start": "4057160",
    "end": "4062480"
  },
  {
    "text": "you know wherever this exception is going to get thrown you need to know like who it's for I think where these kind of like always do something weird",
    "start": "4062480",
    "end": "4069359"
  },
  {
    "text": "is when there's like a for like regular CLI tools where they just crash and then print an exception to standard error I",
    "start": "4069359",
    "end": "4075559"
  },
  {
    "text": "usually find that not too annoying but like if there's some kind of weird curses gooey thing or like some crazy X",
    "start": "4075559",
    "end": "4083760"
  },
  {
    "text": "thing then it's not so good the other thing too is also like a lot of libraries are really chatty right like",
    "start": "4083760",
    "end": "4089240"
  },
  {
    "text": "if you notice like 3js right like it loves to announce like hey I'm 3js and I'm running on this web page right it's",
    "start": "4089240",
    "end": "4095359"
  },
  {
    "text": "always got to get that in there right and a lot of other things do that too right which is kind of like hm like did",
    "start": "4095359",
    "end": "4100838"
  },
  {
    "text": "I sign up for this growth hack it's a good growth hack right it's a Content marketing tool I don't know I've always",
    "start": "4100839",
    "end": "4106278"
  },
  {
    "text": "found that to be kind of like an annoying Behavior right and like it sort of like when I see that kind of stuff I'm like hm this is probably not a very",
    "start": "4106279",
    "end": "4113679"
  },
  {
    "text": "carefully engineered web app right because it's like got a lot of like extraneous logging stuff going on right",
    "start": "4113679",
    "end": "4119480"
  },
  {
    "text": "like probably could spend more time fixing this stuff yeah I'm not sure like a library should use anything other than",
    "start": "4119480",
    "end": "4125199"
  },
  {
    "text": "debug yeah and you should opt in if you want any log output out of some Library",
    "start": "4125199",
    "end": "4131080"
  },
  {
    "text": "you picked up yeah but a lot of libraries like to announce that they're there and it seems to work cuz people",
    "start": "4131080",
    "end": "4136400"
  },
  {
    "text": "still use them right so like there's you know like obviously it's annoying but at the same time maybe somehow that is what",
    "start": "4136400",
    "end": "4142880"
  },
  {
    "text": "the market wants right and so cosmically it's justifiable I don't know we get what we deserve and on that note let's",
    "start": "4142880",
    "end": "4150679"
  },
  {
    "text": "go ahead and end there thank you so much Brett and Mick for coming on and chatting shocking that we had so much to",
    "start": "4150679",
    "end": "4156318"
  },
  {
    "text": "talk about on logging and air handling uh not really it was my pleasure yeah",
    "start": "4156319",
    "end": "4161480"
  },
  {
    "text": "definitely thanks for having me we'll definitely have you back thanks so much thank you Chris for for joining as well and we will see you next",
    "start": "4161480",
    "end": "4169239"
  },
  {
    "text": "week that is our show for this week thanks for tuning in here's something you may not be aware of we have a",
    "start": "4171359",
    "end": "4178120"
  },
  {
    "text": "podcast called ship it with Gard Lazo and in addition to the awesome guest interviews that he does every 10th",
    "start": "4178120",
    "end": "4183920"
  },
  {
    "text": "episode we turn the lens Inward and discuss our open source platform and the work we're doing to continuously improve",
    "start": "4183920",
    "end": "4190159"
  },
  {
    "text": "it these episodes get pretty raw we aren't afraid of making mistakes in public take a listen real time followup",
    "start": "4190159",
    "end": "4196600"
  },
  {
    "text": "I logged into our AWS console and I checked our current month's S3 costs and",
    "start": "4196600",
    "end": "4201880"
  },
  {
    "text": "I am currently setting up shielding as we speak because we need we need to get that sucker shielded",
    "start": "4201880",
    "end": "4209159"
  },
  {
    "text": "oh boy yeah let's hundreds let's give a a percentage or thousands our current",
    "start": "4209159",
    "end": "4216120"
  },
  {
    "text": "month billing is up 1,00% over previous months that's a lot well we normally have like a $20 bill so",
    "start": "4216120",
    "end": "4222360"
  },
  {
    "text": "I mean it's so maybe it's like 150 200 bucks here's where where kaisen gets real when did we set this up so we've",
    "start": "4222360",
    "end": "4228280"
  },
  {
    "text": "been on it for last Tuesday a week so one week and we got about $500 in costs",
    "start": "4228280",
    "end": "4234120"
  },
  {
    "text": "so per week so that's two grand a month really glad you looked into s3j during this whereas we were paying $28 a month",
    "start": "4234120",
    "end": "4241080"
  },
  {
    "text": "previously so roll it back roll the whole feature back this is not any Improvement is it",
    "start": "4241080",
    "end": "4247560"
  },
  {
    "text": "I'm literally rolling out the shielding for fast SE right now I'm hitting activate hopefully that'll that'll probably knock it down to a quarter",
    "start": "4247560",
    "end": "4253920"
  },
  {
    "text": "maybe a hopefully an eighth I don't know what you would even call this live fixing Live cost savings just",
    "start": "4253920",
    "end": "4260520"
  },
  {
    "text": "trying to save us money while you guys are talking welcome to ship it kais it does it work no it doesn't just go",
    "start": "4260520",
    "end": "4270840"
  },
  {
    "text": "back I think this was a terrible idea that was from episode 40 continue",
    "start": "4271159",
    "end": "4276679"
  },
  {
    "text": "listening and subscribe to ship it at Chang law.com shipit sl40 thanks again to fastly for",
    "start": "4276679",
    "end": "4284199"
  },
  {
    "text": "CDN for us to break master cylinder for keeping our beats fresh and banging and to you for listening we appreciate you",
    "start": "4284199",
    "end": "4290920"
  },
  {
    "text": "next up on the Pod Divia and Ali recorded a live show at remix comp with a bundle of awesome guests so stay tuned",
    "start": "4290920",
    "end": "4298719"
  },
  {
    "text": "we'll have that one ready for your enjoyment next [Music]",
    "start": "4298719",
    "end": "4313040"
  },
  {
    "text": "week",
    "start": "4313040",
    "end": "4316040"
  }
]