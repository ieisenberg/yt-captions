[
  {
    "text": "I'd love to see this proposal go through but I'd also love to see a Resurgence of interest in how can we make JavaScript more ergonomic whether that's making it",
    "start": "80",
    "end": "6600"
  },
  {
    "text": "so that translation is required in just fewer scenarios instead of no scenarios pasting into the dev console in your",
    "start": "6600",
    "end": "12360"
  },
  {
    "text": "browser should that strip type annotations I don't see a good case against it you know exactly how that",
    "start": "12360",
    "end": "17400"
  },
  {
    "text": "works is a technical detail and we can talk about that if node understands typescript in some capacity should I",
    "start": "17400",
    "end": "22480"
  },
  {
    "text": "have to run some tool before running a note on some file like once you kind of imagine this world it's hard to be like",
    "start": "22480",
    "end": "28000"
  },
  {
    "text": "well why don't we just have that world today just BAS B on the tooling that's on our Dev machines because ultimately this is a Dev tool it's a thing for the",
    "start": "28000",
    "end": "33840"
  },
  {
    "text": "developer experience this episode is brought to",
    "start": "33840",
    "end": "41120"
  },
  {
    "text": "you by our friends at ray gun they give software teams instant visibility into the quality and the performance of their",
    "start": "41120",
    "end": "47120"
  },
  {
    "text": "software and I am here with John Daniel tras co-founder and CEO of ray gun JD",
    "start": "47120",
    "end": "52840"
  },
  {
    "text": "from what I understand ray gun is founded by nerds so you at least accept the term nerds is that a good name to",
    "start": "52840",
    "end": "60000"
  },
  {
    "text": "describe you and the rest of the team who created ray gun oh absolutely even the folks that don't write software",
    "start": "60000",
    "end": "65478"
  },
  {
    "text": "they're nerds in their own own categories right they're passionate about it they love everything about it um yeah I mean I feel like I'm I'm a",
    "start": "65479",
    "end": "72479"
  },
  {
    "text": "mixture of a business and software nerd like those two domains love them to bits well it's that intersection too that",
    "start": "72479",
    "end": "78560"
  },
  {
    "text": "makes interesting what you've done at ray gun so why did you even create the business like how did you decide to make",
    "start": "78560",
    "end": "84079"
  },
  {
    "text": "this your thing so I started coding when I was about 9 years old and got my first proper job and into 2004 after",
    "start": "84079",
    "end": "91240"
  },
  {
    "text": "University and my business partner today and I we used to deliver software which frankly um was pretty high quality and",
    "start": "91240",
    "end": "97720"
  },
  {
    "text": "we looked back at what did we do to achieve that and one of the things we did was we would always email every single error to ourselves and that just",
    "start": "97720",
    "end": "104159"
  },
  {
    "text": "meant that we could fix things before the customer could even contact us and so we were like constantly impressing",
    "start": "104159",
    "end": "109719"
  },
  {
    "text": "people with the quality of what we were shipping fast forward a few years later we built the business and we decided to",
    "start": "109719",
    "end": "114759"
  },
  {
    "text": "build a product around that whole workflow that was a lot better than just juggling your inbox and it turns out that's a that a lot of developers and a",
    "start": "114759",
    "end": "121159"
  },
  {
    "text": "lot of businesses have found very very effective for increasing their their software quality without letting down the users very cool all right head to",
    "start": "121159",
    "end": "127600"
  },
  {
    "text": "Ray gun.com to learn more and start your free 14-day trial no credit card is required join thousands of customer",
    "start": "127600",
    "end": "133920"
  },
  {
    "text": "Centric software teams who use ray gun every day to deliver Flawless experiences to their customers again",
    "start": "133920",
    "end": "139440"
  },
  {
    "text": "run.com [Music]",
    "start": "139440",
    "end": "147030"
  },
  {
    "text": "there this is JS party your weekly celebration of JavaScript and the web",
    "start": "148840",
    "end": "155480"
  },
  {
    "text": "subscribe to the Pod at JSP party. FM and follow the show on Twitter we are at",
    "start": "155480",
    "end": "161200"
  },
  {
    "text": "JSP party FM big thanks to our partners at fastly for serving up our episodes",
    "start": "161200",
    "end": "167200"
  },
  {
    "text": "super fast wherever you listen check them out at fastly.com okay let's do",
    "start": "167200",
    "end": "173200"
  },
  {
    "text": "this it's party time [Applause]",
    "start": "173200",
    "end": "178840"
  },
  {
    "text": "y'all [Applause]",
    "start": "178840",
    "end": "186639"
  },
  {
    "text": "Hoy Hoy JS party oh ho Hoy welcome I'm Nick ni and I'm your host today and with",
    "start": "189000",
    "end": "195360"
  },
  {
    "text": "me today I have Chris Hiller AKA bone skull how's it going Chris super how you",
    "start": "195360",
    "end": "201519"
  },
  {
    "text": "what's up in the morning it's morning it's awesome every time I say bone skull",
    "start": "201519",
    "end": "206799"
  },
  {
    "text": "I always want to say like say it like bone saw from the Spider-Man one movie you know like bone saw is ready I don't",
    "start": "206799",
    "end": "213640"
  },
  {
    "text": "know Spider-Man I do know World of Warcraft where in Wrath of Lich King one",
    "start": "213640",
    "end": "220720"
  },
  {
    "text": "of the bosses would say bone storm and that made me happy every time it",
    "start": "220720",
    "end": "227799"
  },
  {
    "text": "happened awesome well there's lots of uh lore to explore with that all right and",
    "start": "227799",
    "end": "233760"
  },
  {
    "text": "we have two special guests with us today we have Daniel Rosen waser Daniel how's",
    "start": "233760",
    "end": "239079"
  },
  {
    "text": "it going hi not too bad yourself good good welcome and we also have Ryan",
    "start": "239079",
    "end": "244280"
  },
  {
    "text": "Kavanaugh Ryan how's it going good good happy to be here yeah we're excited to have you here as well and I didn't mention it but you both on the",
    "start": "244280",
    "end": "250599"
  },
  {
    "text": "typescript team and I'm always ready to talk about typescript on this podcast so I'm very excited to have you here it's",
    "start": "250599",
    "end": "257440"
  },
  {
    "text": "very exciting day but we're going to be talking about a little bit about typescript and also about sort of types",
    "start": "257440",
    "end": "263440"
  },
  {
    "text": "coming to JavaScript in a way and we we'll explore that more but uh first why don't you uh tell us a little bit about",
    "start": "263440",
    "end": "268840"
  },
  {
    "text": "yourselves sure my name is Dan rosener and uh basically been on the Ted team for about 8 years now which time really",
    "start": "268840",
    "end": "276360"
  },
  {
    "text": "flies I started off as an engineer and I've been the PM for the last six years or so because I just love working with",
    "start": "276360",
    "end": "283240"
  },
  {
    "text": "the community and just have a lot of fun with it as well yeah and in general I'm",
    "start": "283240",
    "end": "288759"
  },
  {
    "text": "just a big fan of programming languages type systems runtimes things like that it's all kind of tickles my brain I",
    "start": "288759",
    "end": "295800"
  },
  {
    "text": "guess I don't know it's a weird way to say it but yeah no it's definitely unique and um you know unique from like",
    "start": "295800",
    "end": "301960"
  },
  {
    "text": "you know typical like web app development or even application development like developing the language there is just takes it a different kind",
    "start": "301960",
    "end": "308160"
  },
  {
    "text": "of person to really dig into that and we're all benefiting from it a lot of people in the JZ Community are just",
    "start": "308160",
    "end": "314160"
  },
  {
    "text": "really geeking out on like the specific tools these days so I don't know we're seeing more and more of that but maybe",
    "start": "314160",
    "end": "319240"
  },
  {
    "text": "we're not such different creatures yeah I don't know absolutely and uh Ryan you want to introduce yourself yeah I'm Ryan",
    "start": "319240",
    "end": "325160"
  },
  {
    "text": "Kavanaugh I've been on typescript for um I think it's like 10 years now worn a bunch of different hats I started out",
    "start": "325160",
    "end": "331039"
  },
  {
    "text": "doing some testing on typescript and then I did some data stuff and uh for the past three and a half years now I've",
    "start": "331039",
    "end": "337400"
  },
  {
    "text": "been the the dev lead for the team and much like Daniel I love JavaScript I love types uh I love programming",
    "start": "337400",
    "end": "344680"
  },
  {
    "text": "languages and uh just have a ton of fun with it awesome well we're happy to have both of you here to talk about that and",
    "start": "344680",
    "end": "350600"
  },
  {
    "text": "so let's catch up with typescript since I mentioned we've never had Yan before tell us what's going on in typescript",
    "start": "350600",
    "end": "356120"
  },
  {
    "text": "right now what isn't going on in typescript right now I mean it's really hard to recount so many of the things",
    "start": "356120",
    "end": "362600"
  },
  {
    "text": "that kind of go into every release right like some languages go out every year every couple of years and like they have",
    "start": "362600",
    "end": "369039"
  },
  {
    "text": "some really high level great features and whatnot we go out like three times",
    "start": "369039",
    "end": "374639"
  },
  {
    "text": "or sorry four times a year every like 3 months or so and there's always new stuff to talk about and so I mean it it",
    "start": "374639",
    "end": "382039"
  },
  {
    "text": "always helps to kind of break it down into like the sort of buckets of what we focus on so like there's like the type",
    "start": "382039",
    "end": "388240"
  },
  {
    "text": "system innovation sort aspect of it and that's like do we make inference better do we make analyses better right things",
    "start": "388240",
    "end": "394840"
  },
  {
    "text": "like that there's the adding Whatever Gets added to JavaScript aspect of it",
    "start": "394840",
    "end": "400120"
  },
  {
    "text": "like so if something new comes in ecmascript then we add that there are editor features so like a lot of people",
    "start": "400120",
    "end": "407400"
  },
  {
    "text": "don't realize it but basically whenever like we're talking about the typescript team working on typescript we're talking",
    "start": "407400",
    "end": "414759"
  },
  {
    "text": "about not just like the types of compiler the the type Checker it's also the same EXP exp that powers your editor",
    "start": "414759",
    "end": "420960"
  },
  {
    "text": "experience which also means that like things like refactoring completions all",
    "start": "420960",
    "end": "426080"
  },
  {
    "text": "that stuff is powered by us yeah a language server and the cool thing about that is also that we also power up the",
    "start": "426080",
    "end": "432319"
  },
  {
    "text": "JavaScript experience too so like anything that we do there is going to benefit job users even if you don't care",
    "start": "432319",
    "end": "438479"
  },
  {
    "text": "about types remotely right so like from the editor side for example we've got",
    "start": "438479",
    "end": "444120"
  },
  {
    "text": "like two new quality of life improvements um I feel like maybe we should jump back back and forth so I'm",
    "start": "444120",
    "end": "450160"
  },
  {
    "text": "not just Hing up this one I don't know Ryan do you want to speak to a couple of these at all well what are they what are",
    "start": "450160",
    "end": "455400"
  },
  {
    "text": "they Daniel so there's the organized Imports improvements that I'm thinking of ah yes",
    "start": "455400",
    "end": "460680"
  },
  {
    "text": "which is like just a very nice anyway I'll let you do it uh and then also just like improved completions for for",
    "start": "460680",
    "end": "467479"
  },
  {
    "text": "objects they've got new functionality around keeping your Imports organized in the way that you sort of set them out so",
    "start": "467479",
    "end": "474879"
  },
  {
    "text": "the thing that people keep running into is they have like some import that like needs to go first cuz it modifies some",
    "start": "474879",
    "end": "480120"
  },
  {
    "text": "Global State and then they have some subsequent Imports which can go in whatever order and usually when it's",
    "start": "480120",
    "end": "485680"
  },
  {
    "text": "when it's arbitrary people like it to be sorted according to you know the file name or whatever so the the new cool",
    "start": "485680",
    "end": "490879"
  },
  {
    "text": "feature is um instead of having weird comments we're just going to say if you have an empty line between some block of",
    "start": "490879",
    "end": "497360"
  },
  {
    "text": "imports then we'll set those groups of imports independently so that makes it really natural to just s of keep your",
    "start": "497360",
    "end": "502960"
  },
  {
    "text": "Imports uh in the in the order that you need except sub ordered by the order",
    "start": "502960",
    "end": "508639"
  },
  {
    "text": "that you I guess don't care about so that's really cool the other thing we have coming in is uh when you're writing",
    "start": "508639",
    "end": "514120"
  },
  {
    "text": "an object literal uh and you complete a function name will fill in the parameter",
    "start": "514120",
    "end": "519518"
  },
  {
    "text": "names for you which is just a really nice quality of life feature and just save your fingers for the typing that you need to type yeah it's one of those",
    "start": "519519",
    "end": "526399"
  },
  {
    "text": "things where like if you see the before and after you really do feel the just the the differences right like there's",
    "start": "526399",
    "end": "532200"
  },
  {
    "text": "small things where like if you add a feature to an editor you might as well not have it if it does the wrong thing",
    "start": "532200",
    "end": "537720"
  },
  {
    "text": "every single time because it just pisses people off so like people just like having just saying like don't re regroup",
    "start": "537720",
    "end": "544760"
  },
  {
    "text": "the import don't collect them all into one squishy thing like keep them in groups is one thing then from the type",
    "start": "544760",
    "end": "550120"
  },
  {
    "text": "system analysis side there's a couple of things where like there's better inference within objects there's better",
    "start": "550120",
    "end": "557880"
  },
  {
    "text": "we have this new thing called variance annotations which is like pretty deep and Ryan and I both have strong opinions",
    "start": "557880",
    "end": "564279"
  },
  {
    "text": "about that too so we can dive into that oh man there's just too many things to like list off like offand right like we",
    "start": "564279",
    "end": "571000"
  },
  {
    "text": "I I literally have to consult the list yeah and it's why like the blog posts are always like massive so sorry about",
    "start": "571000",
    "end": "577240"
  },
  {
    "text": "that can I ask a question no that's much appreciated about the like the uh import",
    "start": "577240",
    "end": "582320"
  },
  {
    "text": "organizing or uh Auto completion stuff that stuff is like that's in the",
    "start": "582320",
    "end": "587480"
  },
  {
    "text": "language server is that right yeah mhm does the language server depend on the compiler or is that how it works I",
    "start": "587480",
    "end": "594279"
  },
  {
    "text": "haven't left yeah yeah so for people who are not um familiar with this concept basically in the last like 5 10 years or",
    "start": "594279",
    "end": "601040"
  },
  {
    "text": "so the way that a lot of editors have started like architecturally thinking about like how do you build an editor",
    "start": "601040",
    "end": "607640"
  },
  {
    "text": "and then also build the thing that powers up like the language experiences like you should decouple them typically",
    "start": "607640",
    "end": "614160"
  },
  {
    "text": "and so what will happen is you can think of your editor as like the front end where with your like the server at on",
    "start": "614160",
    "end": "620560"
  },
  {
    "text": "the back end communicating and telling the editor what it should what what should you do when you ask for completions at a specific position right",
    "start": "620560",
    "end": "627800"
  },
  {
    "text": "and so like what we learned also at least at Microsoft was like you shouldn't have two code bases to do",
    "start": "627800",
    "end": "634560"
  },
  {
    "text": "different things here right like if you built type checker for let's say typescript or C or whatever and then you",
    "start": "634560",
    "end": "642160"
  },
  {
    "text": "have to build a language server that knows how to report the exact same errors you're doing the same work twice",
    "start": "642160",
    "end": "649600"
  },
  {
    "text": "and in a way that is prone to have divergences which is great for the spec authors because they can say like one is",
    "start": "649600",
    "end": "655720"
  },
  {
    "text": "right pick the other one but it's really bad for like users where have a different experience between like the",
    "start": "655720",
    "end": "661040"
  },
  {
    "text": "compiler and what it actually gets surfaced so yeah it's all layered for us we build the compiler and the compiler",
    "start": "661040",
    "end": "667160"
  },
  {
    "text": "leverages is you leverage in the language service and then the server talks to the the editor there not to",
    "start": "667160",
    "end": "674160"
  },
  {
    "text": "keep going but the other big thing that landed which I really don't know how to slipped my mind was the the node esm",
    "start": "674160",
    "end": "681160"
  },
  {
    "text": "functionality that we're shipping on flagged in 47 beta right now so we can",
    "start": "681160",
    "end": "686279"
  },
  {
    "text": "talk to that a little bit too yeah I I'm interested in like it's been hard honestly to keep up with uh where yes",
    "start": "686279",
    "end": "693600"
  },
  {
    "text": "modules are at right now with I don't write node a lot dayto day but it's it's hard to keep up so do you want to",
    "start": "693600",
    "end": "699639"
  },
  {
    "text": "elaborate a little more on what is now being supported so this is the new big family of fields that you can put in",
    "start": "699639",
    "end": "704880"
  },
  {
    "text": "your package.json that say this is the entry point for my module under these",
    "start": "704880",
    "end": "710120"
  },
  {
    "text": "conditions and sort of all the associated like import paths that you can use to refer to those things it's",
    "start": "710120",
    "end": "716160"
  },
  {
    "text": "hard to kind of undersell it or oversell it I guess that it's support for the new node module resolution system and kind",
    "start": "716160",
    "end": "722760"
  },
  {
    "text": "of up and down the entire stack so this has effects on how like Auto Imports work effects on how we emit declaration",
    "start": "722760",
    "end": "730079"
  },
  {
    "text": "files that refer to these modules that you get into your program and just sort of general like go to definition has to",
    "start": "730079",
    "end": "736240"
  },
  {
    "text": "go to the right place so I don't want to just kind of enumerate all the features that node has added to this cuz um I",
    "start": "736240",
    "end": "742240"
  },
  {
    "text": "don't know all of them and it would be pretty boring but to our knowledge we've supported the whole stack the whole Suite of features there and you can now",
    "start": "742240",
    "end": "748760"
  },
  {
    "text": "um use them unflagged and force of beta yeah the thing you really have to think about is like there are going to be",
    "start": "748760",
    "end": "754639"
  },
  {
    "text": "libraries that ship as pure esm like ecmascript modules they might use a",
    "start": "754639",
    "end": "760800"
  },
  {
    "text": "bunch of specific features that have been added to node that are different from what you're used to if you've been",
    "start": "760800",
    "end": "766240"
  },
  {
    "text": "writing node maybe like let's say 5 to 10 years ago right so you might want to",
    "start": "766240",
    "end": "771399"
  },
  {
    "text": "be able to say like I want to scope which specific files you can you can import from a package I want to be able",
    "start": "771399",
    "end": "778560"
  },
  {
    "text": "to use MJS or M you know or CJs as your",
    "start": "778560",
    "end": "784440"
  },
  {
    "text": "file extension for JavaScript and then if you're in types user you want to be able to use MTS and and CTS right and so",
    "start": "784440",
    "end": "792040"
  },
  {
    "text": "like these are things that are maybe like a lot of conceptual overhead but whenever you need to actually use node",
    "start": "792040",
    "end": "799440"
  },
  {
    "text": "esm functionality like you're going to need to have these things handy and like available to you especially as a typ",
    "start": "799440",
    "end": "805680"
  },
  {
    "text": "strip user where like you just don't want want to Red squiggle telling you you can't do this whereas you like you",
    "start": "805680",
    "end": "810920"
  },
  {
    "text": "might know better so we need to like bridge that Gap and make sure it's not tough to use as much as we can at least",
    "start": "810920",
    "end": "817240"
  },
  {
    "text": "yeah that's really cool and awesome that going forward it's going to be much easier to support all of the different",
    "start": "817240",
    "end": "823600"
  },
  {
    "text": "module resolution types in in node with typescript can you finger uh typescript to Output uh dual modules we have talked",
    "start": "823600",
    "end": "831759"
  },
  {
    "text": "about that a little bit you're talking about like you want to have a compile that like takes your typescript files",
    "start": "831759",
    "end": "838279"
  },
  {
    "text": "and emits like one folder with like esm and one folder with CJs I mean I I",
    "start": "838279",
    "end": "843519"
  },
  {
    "text": "imagine that's just two separate builds right it is I don't remember the specific state of that right now to be",
    "start": "843519",
    "end": "849759"
  },
  {
    "text": "honest with you I think you can kind of control that by basically I'd have to just sort of look into that I mean we're",
    "start": "849759",
    "end": "856680"
  },
  {
    "text": "definitely not doing two outputs in one build it would it would be separate builds but I don't think anything right",
    "start": "856680",
    "end": "861800"
  },
  {
    "text": "now would prevent you from setting that up but it with all these things it depends so much on the specifics of",
    "start": "861800",
    "end": "867279"
  },
  {
    "text": "exactly what your input and desired output structure are yeah I think you could get away with it with like an",
    "start": "867279",
    "end": "872320"
  },
  {
    "text": "extra package Json which no one wants to do but it's possible yeah yeah because you said if it depends on all that that",
    "start": "872320",
    "end": "878639"
  },
  {
    "text": "junk like to make a a a dual module work you you still have to do some hacky",
    "start": "878639",
    "end": "883759"
  },
  {
    "text": "stuff right so yeah I was going to follow up on the optional variance",
    "start": "883759",
    "end": "888839"
  },
  {
    "text": "annotations that seems pretty interesting and like I guess I'm trying to understand does it help the compiler",
    "start": "888839",
    "end": "896079"
  },
  {
    "text": "and like why was it added I guess is what I'm trying to ask but I'm I'm trying to why are you doing these things and making my life harder did we even",
    "start": "896079",
    "end": "902440"
  },
  {
    "text": "explain oh no I don't think it's harder at all I think that it's interesting and I think that being able to like annotate you know this is specifically the return",
    "start": "902440",
    "end": "909320"
  },
  {
    "text": "type is very interesting and I'm just wondering if there's like a use beyond that that I'm not seeing right now did",
    "start": "909320",
    "end": "916199"
  },
  {
    "text": "we explain what these are not an idea actually no we didn't okay because I have no idea when you have a type that",
    "start": "916199",
    "end": "922560"
  },
  {
    "text": "is generic so if you have like a an array of strings or an array of numbers we call those instantiations so a",
    "start": "922560",
    "end": "929839"
  },
  {
    "text": "generic type will have some instantiations that are effectively themselves non-generic types right so if",
    "start": "929839",
    "end": "936240"
  },
  {
    "text": "you think about let's just say like a box like you can have a box and it can have a thing in it if I give you a box",
    "start": "936240",
    "end": "943480"
  },
  {
    "text": "of recyclables or whatever and there's a box of food well the way that those",
    "start": "943480",
    "end": "949639"
  },
  {
    "text": "boxes relate to each other relates the same way that the contents of those boxes relate to each other so like you",
    "start": "949639",
    "end": "955959"
  },
  {
    "text": "can't put food in the recycling bin or vice versa I have come up with an example that has a bit more clear real",
    "start": "955959",
    "end": "961560"
  },
  {
    "text": "world subtyping but anyway we talk about this as the measured variance of that",
    "start": "961560",
    "end": "967000"
  },
  {
    "text": "generic type so you could think about a function that accepts an argument well",
    "start": "967000",
    "end": "972560"
  },
  {
    "text": "this actually kind of flows the other way compared to a function that returns a value because if I take if I have a",
    "start": "972560",
    "end": "978360"
  },
  {
    "text": "function that can accept a string or a number that's more General than a function that only accepts strings",
    "start": "978360",
    "end": "983880"
  },
  {
    "text": "versus a function that produces a string or number and a function that produces a string relates to in in the other",
    "start": "983880",
    "end": "989639"
  },
  {
    "text": "direction so when you're relating generic types and you want to figure out if like a box of T is related to a box",
    "start": "989639",
    "end": "996759"
  },
  {
    "text": "of you to do things performant you need to have shortcuts that say instead of",
    "start": "996759",
    "end": "1002360"
  },
  {
    "text": "relating the entire structure of that generic type we'll just relate the type arguments so we'll relate T to U when",
    "start": "1002360",
    "end": "1008959"
  },
  {
    "text": "relating box of T to box of U but to do that correctly we have to know which direction we should do the relation in because if this is an input position",
    "start": "1008959",
    "end": "1016079"
  },
  {
    "text": "like a parameter we have to do the opposite check as if it was a return type so that's what we call the variance",
    "start": "1016079",
    "end": "1023000"
  },
  {
    "text": "and that emerges in a structural type system naturally from where the type",
    "start": "1023000",
    "end": "1028959"
  },
  {
    "text": "parameters appear in the type so we can go and measure it and we can get results called covariant contravariant invariant",
    "start": "1028959",
    "end": "1036240"
  },
  {
    "text": "and then some others that I'm definitely not going to talk about when that measurement takes time like in some code",
    "start": "1036240",
    "end": "1043760"
  },
  {
    "text": "bases it's like a non-trivial amount of time and also if that measurement is different than the one you expect it's",
    "start": "1043760",
    "end": "1050400"
  },
  {
    "text": "pretty hard to debug like why it's not the one you expected also if you have some type you might want to like",
    "start": "1050400",
    "end": "1056760"
  },
  {
    "text": "communicate to someone else like hey this type is covariant like don't mess that up for me please so anyway in 47",
    "start": "1056760",
    "end": "1063880"
  },
  {
    "text": "beta we let you write down an annotation on these type parameters that say this generic type is covariant contravariant",
    "start": "1063880",
    "end": "1069960"
  },
  {
    "text": "or invariant on this type parameter we'll do a quick check to make sure that you didn't get it completely wrong but",
    "start": "1069960",
    "end": "1076080"
  },
  {
    "text": "from that point forward we can use that annotated variance instead of having to measure it because when we measure it we",
    "start": "1076080",
    "end": "1082200"
  },
  {
    "text": "actually have to measure it I think up to four different ways just to see what the relation is and yeah I think my",
    "start": "1082200",
    "end": "1088720"
  },
  {
    "text": "guidance for people would be don't do this eagerly um if you're not sure what the variance annotation should be just",
    "start": "1088720",
    "end": "1095440"
  },
  {
    "text": "put this feature out of your mind it's fine um we're going to measure the right thing in like 99.9% of cases anyway it's",
    "start": "1095440",
    "end": "1102200"
  },
  {
    "text": "a total power user yeah feature right and for Library authors mainly I would say right absolutely yeah I guess the",
    "start": "1102200",
    "end": "1108320"
  },
  {
    "text": "other kind of motivating scenario is um our variance measurement algorithm is very very good but you can actually",
    "start": "1108320",
    "end": "1114720"
  },
  {
    "text": "break it under some very weird Corner cases basically someone found a bug in this in this algorithm that was present",
    "start": "1114720",
    "end": "1121280"
  },
  {
    "text": "for what like four years without being noticed maybe longer so that kind of",
    "start": "1121280",
    "end": "1126960"
  },
  {
    "text": "interesting just to observe that fact so this lets you kind of in the extremely rare cases where the measured Varian",
    "start": "1126960",
    "end": "1133520"
  },
  {
    "text": "isn't what you expect you can fix it this algorithm is like Ryan said like pretty good there are cases where like",
    "start": "1133520",
    "end": "1140679"
  },
  {
    "text": "you will end up going in a loop forever and you need to be able to have yourself",
    "start": "1140679",
    "end": "1145880"
  },
  {
    "text": "say like I need to stop at some point and if you say this is the variance then",
    "start": "1145880",
    "end": "1151320"
  },
  {
    "text": "when you come back into yourself you can basically say like oh I know what that is the user told me stop and keep going",
    "start": "1151320",
    "end": "1158400"
  },
  {
    "text": "for the rest of the thing and that's what like other languages do but typ has always tried to not make it so that you",
    "start": "1158400",
    "end": "1163720"
  },
  {
    "text": "have to do this thing so for a user now you don't really have to think about the concept of fair Varan per se like it'll",
    "start": "1163720",
    "end": "1171360"
  },
  {
    "text": "come up but the way that this feature works is you just say am I using the T like the type parameter in an input or",
    "start": "1171360",
    "end": "1178320"
  },
  {
    "text": "an output position or both right those are the keywords that we use to describe them right so if you if you use T in an",
    "start": "1178320",
    "end": "1184880"
  },
  {
    "text": "input position you would just write in of T in front of the T if it's used in an output position you write out T and",
    "start": "1184880",
    "end": "1192000"
  },
  {
    "text": "then if it's used in both you say in out T and so you don't have to think about",
    "start": "1192000",
    "end": "1197480"
  },
  {
    "text": "like what is the variance you just have to think about like how am I using this thing right that makes it a little bit",
    "start": "1197480",
    "end": "1203280"
  },
  {
    "text": "easier for people to author these things as well it's a bit of a deep dive",
    "start": "1203280",
    "end": "1208640"
  },
  {
    "text": "but necessary evil sometimes it seems to be a little easier to grock in the",
    "start": "1208640",
    "end": "1214799"
  },
  {
    "text": "announcement to have the code in front of you the code helps a lot it's very hard to talk about code in the abstract",
    "start": "1214799",
    "end": "1221799"
  },
  {
    "text": "but absolutely and we will definitely have a link to that in the show notes so check that there but I'm just excited",
    "start": "1221799",
    "end": "1228039"
  },
  {
    "text": "there's a lot of cool features coming in that and I checked this morning and I am I am locked at version 4.3.2 of",
    "start": "1228039",
    "end": "1234880"
  },
  {
    "text": "typescript right now because that's what I get with create react app at the current moment oh so uh I have a lot of",
    "start": "1234880",
    "end": "1241200"
  },
  {
    "text": "exciting features coming to me when I can get that",
    "start": "1241200",
    "end": "1245559"
  },
  {
    "text": "[Music]",
    "start": "1247860",
    "end": "1250900"
  },
  {
    "text": "upgraded [Music]",
    "start": "1257600",
    "end": "1265299"
  },
  {
    "text": "this episode is brought to you by our friends at square square is the platform that sellers trust there is a massive",
    "start": "1265679",
    "end": "1272799"
  },
  {
    "text": "opportunity for developers to support Square sellers by building apps for today's business needs and I'm here with",
    "start": "1272799",
    "end": "1278679"
  },
  {
    "text": "Shannon Skipper head of developer relations at Square Shannon can you share some details about the opportunity for developers on the Square platform",
    "start": "1278679",
    "end": "1285880"
  },
  {
    "text": "absolutely so we have millions of sellers who have unique needs and square has apps like our point of sale app like",
    "start": "1285880",
    "end": "1291640"
  },
  {
    "text": "our restaurants app but there are so many different sellers tuxedo shops florists who need specific solutions for",
    "start": "1291640",
    "end": "1298400"
  },
  {
    "text": "their domain and so we have a node SDK written in typescript that allows you to",
    "start": "1298400",
    "end": "1303640"
  },
  {
    "text": "access all of the backend apis and sdks that we use to power the billions of transactions that we do annually and so",
    "start": "1303640",
    "end": "1310720"
  },
  {
    "text": "there's this massive Market of sellers who need help from developers they either need a bespoke solution built for",
    "start": "1310720",
    "end": "1317960"
  },
  {
    "text": "themselves on own node stack where they are working with Square Dashboard working with square Hardware or with the",
    "start": "1317960",
    "end": "1324240"
  },
  {
    "text": "Ecom you know what you see is what you get Builder and they need one more thing they need an additional build and then",
    "start": "1324240",
    "end": "1329320"
  },
  {
    "text": "finally we have the app marketplace where you can make a node app and then distribute it so it can get in front of",
    "start": "1329320",
    "end": "1334480"
  },
  {
    "text": "millions of Sellers and be an option for them to adopt very cool all right if you want to learn more head to developer.",
    "start": "1334480",
    "end": "1340120"
  },
  {
    "text": "squareup.com to dive into the docs apis sdks and to create your Square developer",
    "start": "1340120",
    "end": "1345799"
  },
  {
    "text": "account start developing on the platform sellers Trust again that's developer. squareup.com",
    "start": "1345799",
    "end": "1352240"
  },
  {
    "text": "[Music]",
    "start": "1352240",
    "end": "1357640"
  },
  {
    "text": "[Laughter] [Music]",
    "start": "1357640",
    "end": "1362069"
  },
  {
    "text": "[Music]",
    "start": "1367290",
    "end": "1370319"
  },
  {
    "text": "[Music] all right so that's really exciting but",
    "start": "1373800",
    "end": "1379600"
  },
  {
    "text": "the main thing that we pitched you on on coming on the show to talk about is this new proposal to JavaScript or to tc39 to",
    "start": "1379600",
    "end": "1387960"
  },
  {
    "text": "uh add not necessarily types but add um a new way of exposing those types as",
    "start": "1387960",
    "end": "1395120"
  },
  {
    "text": "just comments that can be ignored by the JavaScript interpreter and I talk to you",
    "start": "1395120",
    "end": "1400480"
  },
  {
    "text": "guys every year at uh tsom and one of the recurring questions I think every single year is when is typescript just",
    "start": "1400480",
    "end": "1406799"
  },
  {
    "text": "going to build into the browser is this kind of the answer to that finally yeah I would say so okay there's a lot of",
    "start": "1406799",
    "end": "1414080"
  },
  {
    "text": "history with this one right and like we've always given a I still think a pretty good answer overall right M and",
    "start": "1414080",
    "end": "1420440"
  },
  {
    "text": "what is that answer typically Ryan because you usually put it really well but I don't remember what I say it's",
    "start": "1420440",
    "end": "1426279"
  },
  {
    "text": "like the what does it mean answer well I mean types in the browser means a lot of things to a lot of different people some",
    "start": "1426279",
    "end": "1432400"
  },
  {
    "text": "people think that means static type checking in the browser where before your code runs some sort of type",
    "start": "1432400",
    "end": "1437520"
  },
  {
    "text": "checking phase would occur Ur some people think types in the browser means Dynamic type checking so if you write a",
    "start": "1437520",
    "end": "1443520"
  },
  {
    "text": "function and say this parameter is a string then that nothing sort of happens until an actual call into that function",
    "start": "1443520",
    "end": "1451039"
  },
  {
    "text": "occurs for some people types in the browser just means the proposal that we're putting here which is types as",
    "start": "1451039",
    "end": "1456159"
  },
  {
    "text": "comments and then some people have even further out ideas I guess I think static",
    "start": "1456159",
    "end": "1462679"
  },
  {
    "text": "Dynamic and I guess comment only is sort of the three main classes of what I think of as uh what people mean when",
    "start": "1462679",
    "end": "1469159"
  },
  {
    "text": "they say types in the browser so I think it's a long side discussion to talk about why we think that the static types",
    "start": "1469159",
    "end": "1475320"
  },
  {
    "text": "and dynamic types in the browser aren't a good fit for JavaScript and that's sort of the attitude that we've seen from tc39 which I think we're all sort",
    "start": "1475320",
    "end": "1482559"
  },
  {
    "text": "of in pretty decent agreement with I think and then kind of what's left is types as comments and that's what we're",
    "start": "1482559",
    "end": "1487760"
  },
  {
    "text": "going with here I think of this as different programming languages have different ways to annotate your code",
    "start": "1487760",
    "end": "1494960"
  },
  {
    "text": "that aren't used by the runtime so you know python has significant white space and JavaScript doesn't so a good way to",
    "start": "1494960",
    "end": "1502320"
  },
  {
    "text": "trick yourself if you're writing a JavaScript program is to write a like a for Loop or an if or a while and put a",
    "start": "1502320",
    "end": "1509440"
  },
  {
    "text": "semicolon at the end of that closing parenthesis and then what follows is just like a statement block that runs",
    "start": "1509440",
    "end": "1514960"
  },
  {
    "text": "without control flow but like then dentation there makes it look like your code does one thing but your code",
    "start": "1514960",
    "end": "1520440"
  },
  {
    "text": "actually does something else because like indentation just isn't a part of JavaScript whereas in Python it is and",
    "start": "1520440",
    "end": "1525840"
  },
  {
    "text": "like you would get a syntax error similar L JS doc looks like kind of sort of something that there for a machine",
    "start": "1525840",
    "end": "1532679"
  },
  {
    "text": "it's actually just there for a human right it's it's or or a different machine like closure compiler or",
    "start": "1532679",
    "end": "1538120"
  },
  {
    "text": "typescript with uh with JavaScript checking on so I think of the types' comments as being a place where",
    "start": "1538120",
    "end": "1544360"
  },
  {
    "text": "JavaScript just didn't have a syntax to do the sort of thing that people what we've seen is they like to do people",
    "start": "1544360",
    "end": "1550640"
  },
  {
    "text": "like to indent their code people like to put nicely formatted comments in their code people like to put type annotations",
    "start": "1550640",
    "end": "1556039"
  },
  {
    "text": "in their code not just to communicate with the machine but to communicate with other humans and that's really what",
    "start": "1556039",
    "end": "1562480"
  },
  {
    "text": "types as comments is is a way to tell other humans how your code works and you",
    "start": "1562480",
    "end": "1567880"
  },
  {
    "text": "can have a computer check that for you or not the same way that a computer might check your indentation and say oh",
    "start": "1567880",
    "end": "1574440"
  },
  {
    "text": "you didn't there are tools that will tell you that your indentation is wrong according to whatever you've decided wrong means let me add on that just for",
    "start": "1574440",
    "end": "1580760"
  },
  {
    "text": "a bit like so with the whole proposal right like there's been just a question of like what is what does it mean to",
    "start": "1580760",
    "end": "1587480"
  },
  {
    "text": "have types in your job JavaScript and like we just saw like not much agreement",
    "start": "1587480",
    "end": "1592520"
  },
  {
    "text": "when the when the subject matter came up like 10 years ago oh does it do any of the things that Ryan just mentioned and",
    "start": "1592520",
    "end": "1599760"
  },
  {
    "text": "really what we saw is several convergences right like one there are at",
    "start": "1599760",
    "end": "1606799"
  },
  {
    "text": "least three major type Checkers that looked at types and basically admitted",
    "start": "1606799",
    "end": "1612640"
  },
  {
    "text": "no no runtime checks right so there's no Dynamic Behavior there right types script flow closure compiler they all",
    "start": "1612640",
    "end": "1619679"
  },
  {
    "text": "check like either type annotation syntax or comment Syntax for your JavaScript",
    "start": "1619679",
    "end": "1624720"
  },
  {
    "text": "and then it interprets it as a types and says you screwed up here and when you run it nothing changes about that it's",
    "start": "1624720",
    "end": "1631240"
  },
  {
    "text": "still runnable JavaScript right and so we saw convergence there I mean we knew",
    "start": "1631240",
    "end": "1636399"
  },
  {
    "text": "that engines would not really favor that runtime behavior of like checking your",
    "start": "1636399",
    "end": "1641840"
  },
  {
    "text": "types and then what we also kind of figured was like okay well even if we kind of are convinced of this we're not",
    "start": "1641840",
    "end": "1648440"
  },
  {
    "text": "sure that we have sufficient buy off from like the broader JS Community the",
    "start": "1648440",
    "end": "1653760"
  },
  {
    "text": "Java committee things like that and what we saw more of was like confidence in",
    "start": "1653760",
    "end": "1659559"
  },
  {
    "text": "like the existing approaches confidence in the type systems confidence in how this could work and prove itself out",
    "start": "1659559",
    "end": "1666159"
  },
  {
    "text": "this idea right with at least the types' comments proposal was like your types",
    "start": "1666159",
    "end": "1671279"
  },
  {
    "text": "are literally you can think of them as comments right you can imagine if they were all all raced away they don't have",
    "start": "1671279",
    "end": "1677679"
  },
  {
    "text": "any any impact on running your code they're purely a design time thing for type Checkers so they can like read your",
    "start": "1677679",
    "end": "1684600"
  },
  {
    "text": "code and do some type checking and Report some errors but you could just plug that right in like something like",
    "start": "1684600",
    "end": "1690640"
  },
  {
    "text": "your typescript syntax like your flow syntax like whatever into a browser and",
    "start": "1690640",
    "end": "1695760"
  },
  {
    "text": "then just have that run and the browser would not do any of those checks at all right in fact it it would be mandatory",
    "start": "1695760",
    "end": "1702320"
  },
  {
    "text": "not to do that in any way and so this is something where we were not like like",
    "start": "1702320",
    "end": "1709080"
  },
  {
    "text": "totally bought off on it ourselves in some way either because it's like okay well there is this sort of uncanny",
    "start": "1709080",
    "end": "1715120"
  },
  {
    "text": "valley of like I've written my code in such a way where like oh you've",
    "start": "1715120",
    "end": "1720320"
  },
  {
    "text": "said that this thing takes a string but you're passing in a number and my job is times just not going to do anything to",
    "start": "1720320",
    "end": "1726679"
  },
  {
    "text": "validate that at all feels really weird and that kind of goes back to like what Ryan was saying which is like you could",
    "start": "1726679",
    "end": "1732760"
  },
  {
    "text": "you could literally write your code in any way you could write a comment that says this thing takes a string and that",
    "start": "1732760",
    "end": "1738799"
  },
  {
    "text": "comment is totally out of date or like someone's using it wrong and so when you see that code you're like ah someone's",
    "start": "1738799",
    "end": "1745320"
  },
  {
    "text": "screwed up like how do they miss the comment here it's like well okay wouldn't it be great if something",
    "start": "1745320",
    "end": "1750880"
  },
  {
    "text": "checked that for you and so like your runtime your JavaScript runtime is not going to do that right that would be un",
    "start": "1750880",
    "end": "1757720"
  },
  {
    "text": "unreasonable no one would say like you should read the comments and and make sure you're doing the right thing every time it's the same thing with type",
    "start": "1757720",
    "end": "1763679"
  },
  {
    "text": "annotation so basically that's what we mean when we say types as comments right they just this comments and they don't",
    "start": "1763679",
    "end": "1770760"
  },
  {
    "text": "have any runtime effect now that said we presented this thing called types say",
    "start": "1770760",
    "end": "1776559"
  },
  {
    "text": "comments at tc39 which is the standards committee for JavaScript a couple weeks ago",
    "start": "1776559",
    "end": "1782679"
  },
  {
    "text": "actually and it moved to stage one with a caveat with a caveat that it get",
    "start": "1782679",
    "end": "1788919"
  },
  {
    "text": "renamed to type annotations interesting this is a thing where calling it types as comments it was a little catchy at",
    "start": "1788919",
    "end": "1796320"
  },
  {
    "text": "first but now it's it's probably better named as type annotations I like the name better it sounds a little bit more",
    "start": "1796320",
    "end": "1802519"
  },
  {
    "text": "like what we're actually trying to get like what we're actually thinking about and the caveat was well okay yes you",
    "start": "1802519",
    "end": "1809640"
  },
  {
    "text": "come into this discussion with a set of opinions about how this feature should work we should still discuss why those",
    "start": "1809640",
    "end": "1817799"
  },
  {
    "text": "have their merits right so like the idea of these types having no runtime impact at all whatsoever it's still something",
    "start": "1817799",
    "end": "1826080"
  },
  {
    "text": "that like probably should be discussed in committee instead of just being proposed as like yes we we're already",
    "start": "1826080",
    "end": "1833240"
  },
  {
    "text": "like dismissing that that was something that we got some feedback on as well so we will have that discussion we do feel",
    "start": "1833240",
    "end": "1839240"
  },
  {
    "text": "pretty strongly that that's not the right way to go about it but like you know nothing comes easy you have to talk",
    "start": "1839240",
    "end": "1844720"
  },
  {
    "text": "these things out and and understand like why one has benefits and the other might",
    "start": "1844720",
    "end": "1850039"
  },
  {
    "text": "or might not MH so that's where we're kind of at right now I mean there's there's a whole bunch of specifics and",
    "start": "1850039",
    "end": "1856080"
  },
  {
    "text": "caveats and nits I don't know if there's I don't know any aspect of it that like is worth diving deeper into or things",
    "start": "1856080",
    "end": "1863240"
  },
  {
    "text": "that are on your mind yeah I have a list of questions but maybe let's start with just exactly what it is so from my",
    "start": "1863240",
    "end": "1870679"
  },
  {
    "text": "understanding it's just like adding in this almost not necessarily white space but this space between a colon and",
    "start": "1870679",
    "end": "1878639"
  },
  {
    "text": "something else to add in whatever you want right is that correct or or what are the limitations of it right now it",
    "start": "1878639",
    "end": "1884360"
  },
  {
    "text": "is a carve out four type systems right so it's it's kind of like what you said say right so the idea is like take a",
    "start": "1884360",
    "end": "1890480"
  },
  {
    "text": "look at you know you take a look at what typ has done what flow has done and and try to basically find a space where",
    "start": "1890480",
    "end": "1897840"
  },
  {
    "text": "javascripts could say like I don't care about this type systems can take up",
    "start": "1897840",
    "end": "1903279"
  },
  {
    "text": "whatever syntax they want at these specific places right so like you could say lead X colon and that says now",
    "start": "1903279",
    "end": "1911159"
  },
  {
    "text": "you're going to start reading a type out and the whole thing is like because it's just supposed to get ignored an engine",
    "start": "1911159",
    "end": "1917360"
  },
  {
    "text": "can just go Chomp Chom Chom Chom Chom Chom Chomp until some end and then just like throw that away it doesn't have to",
    "start": "1917360",
    "end": "1923240"
  },
  {
    "text": "care about that at all right and then we we need some other stuff too right so like those are annotations we need",
    "start": "1923240",
    "end": "1929960"
  },
  {
    "text": "declarations too so like interfaces and type aliases so you say like the interface keyword some name some extra",
    "start": "1929960",
    "end": "1938440"
  },
  {
    "text": "stuff Chom Chom Chom CH Chom and so like the way that we're we're sort of thinking about this is I mean you need",
    "start": "1938440",
    "end": "1944440"
  },
  {
    "text": "to think about like where these things start and end right so there's going to be like some top level St set of things",
    "start": "1944440",
    "end": "1952639"
  },
  {
    "text": "that like an engine will have to know how to parse out and then throw away but",
    "start": "1952639",
    "end": "1957720"
  },
  {
    "text": "then there's places where we need to to be able to like grow out the type",
    "start": "1957720",
    "end": "1962840"
  },
  {
    "text": "systems that exist today or a new type system should be able to like Leverage the space if they want to so let's think",
    "start": "1962840",
    "end": "1970240"
  },
  {
    "text": "about like object types for example right let's say you want to add a new",
    "start": "1970240",
    "end": "1975279"
  },
  {
    "text": "modifier for properties on object types right we could take whatever type of inflow we have right now and kind of try",
    "start": "1975279",
    "end": "1982279"
  },
  {
    "text": "to figure out like this combined set of syntax in between the curries and say like okay whenever you say like type Fu",
    "start": "1982279",
    "end": "1990080"
  },
  {
    "text": "equals and then like some object type and then you say okay here's how you parse out every single member of the",
    "start": "1990080",
    "end": "1995679"
  },
  {
    "text": "object type you could do that you could say like oh you need to know about the readon modifier you need to know about",
    "start": "1995679",
    "end": "2001240"
  },
  {
    "text": "plus and minus for flow you need to know about like all these other things and instead what we've looking at is this",
    "start": "2001240",
    "end": "2007799"
  },
  {
    "text": "place where you say okay whenever you find braces or brackets or parentheses you just skip through that",
    "start": "2007799",
    "end": "2016000"
  },
  {
    "text": "until you find the closing brace right kind of like when you have slash star with a comment you just skip through",
    "start": "2016000",
    "end": "2022760"
  },
  {
    "text": "that and you get the star slash so like an engine doesn't care what's in between there it just looks for for the next",
    "start": "2022760",
    "end": "2028760"
  },
  {
    "text": "star slash at the very end of the comment and that's what we're leaning on to to make sure that this thing is extensible too right so so like there's",
    "start": "2028760",
    "end": "2037840"
  },
  {
    "text": "some top level syntax there's like top level types right so like you'd have",
    "start": "2037840",
    "end": "2042919"
  },
  {
    "text": "names of types like you know identifiers the same way that they look like a variables in JS maybe Union types right",
    "start": "2042919",
    "end": "2049158"
  },
  {
    "text": "so you can say string or number and then maybe in curly braces just whatever the",
    "start": "2049159",
    "end": "2054480"
  },
  {
    "text": "hell you want to put in there and that just works right and there's like caveats there too right because curly",
    "start": "2054480",
    "end": "2059878"
  },
  {
    "text": "braces can nest and so like if you have curries and then a curly and then curries like you can't just you can't",
    "start": "2059879",
    "end": "2065200"
  },
  {
    "text": "just stop and so you know this is was a pain point for for a lot of people is that comments can't nest in in JavaScript so like these comments nest",
    "start": "2065200",
    "end": "2073760"
  },
  {
    "text": "and we we will have to basically support them in whatever wacky way we do so that's one part of it and then there's",
    "start": "2073760",
    "end": "2079960"
  },
  {
    "text": "some other stuff we're looking at adding too right like being able to cat like do assertions like say like this thing is",
    "start": "2079960",
    "end": "2086079"
  },
  {
    "text": "actually a number I know you didn't realize that but like here's the truth of it typescript or type arguments and",
    "start": "2086079",
    "end": "2092000"
  },
  {
    "text": "things like that at the end of the day just remember though that these things all just get erased yeah or like you can treat them as they were just erasable or",
    "start": "2092000",
    "end": "2099320"
  },
  {
    "text": "or like just comments is the idea I want to dig into one thing that that you mentioned so did you say that the",
    "start": "2099320",
    "end": "2104880"
  },
  {
    "text": "ability to somehow support something like type aliases or interfaces would be supported by this in terms of like",
    "start": "2104880",
    "end": "2111079"
  },
  {
    "text": "treating them as comments yeah that's what we're hoping for right like you can think of them as just metadata of like",
    "start": "2111079",
    "end": "2117280"
  },
  {
    "text": "hey there's a thing called a foo a JavaScript engine doesn't have to think about that it doesn't have to think",
    "start": "2117280",
    "end": "2122480"
  },
  {
    "text": "about scoping or any of that stuff at all you can declare 30 types with the same name",
    "start": "2122480",
    "end": "2128240"
  },
  {
    "text": "an engine should not care about that whatsoever right is the ideal so that's what we're reming for there or I guess",
    "start": "2128240",
    "end": "2134920"
  },
  {
    "text": "would that reserve the interface keyword for things like that or probably yeah I",
    "start": "2134920",
    "end": "2139960"
  },
  {
    "text": "mean there is some discussion around whether or not interface should be reserved for a different purpose there's",
    "start": "2139960",
    "end": "2145560"
  },
  {
    "text": "another proposal called protocols we still think that interface is probably best suited for this a",
    "start": "2145560",
    "end": "2152520"
  },
  {
    "text": "proposal like this and to be honest with you like the type systems have had this",
    "start": "2152520",
    "end": "2157800"
  },
  {
    "text": "keyword for at least 10 years now I don't really think that it's appropriate I think given the number of people using",
    "start": "2157800",
    "end": "2164880"
  },
  {
    "text": "typescript in the Jazz Community these days would find it really confusing to like repurpose that at that point I hate",
    "start": "2164880",
    "end": "2172040"
  },
  {
    "text": "like the argument of like hey this thing's already been been done by like external forces and some weird like it",
    "start": "2172040",
    "end": "2178800"
  },
  {
    "text": "probably rubs people the wrong way and like that was never the intent but like it always definitely seemed to us like",
    "start": "2178800",
    "end": "2184000"
  },
  {
    "text": "the obvious sort of purpose of like the interface keyword is to an interface the way it's defined in like literally every",
    "start": "2184000",
    "end": "2190920"
  },
  {
    "text": "other language it seems like the most reasonable thing to me to be honest but yeah I hope that the committee kind of",
    "start": "2190920",
    "end": "2196839"
  },
  {
    "text": "follows where the I guess observed desire of the community is I think the other thing to think about is like if",
    "start": "2196839",
    "end": "2203119"
  },
  {
    "text": "this proposal gets sort of whittel Away by like okay we can't have interface we can't have type we can't have whatever",
    "start": "2203119",
    "end": "2209880"
  },
  {
    "text": "that's kind of fair but I think we don't want to make something that's like here's 60% of typescript or here's 65%",
    "start": "2209880",
    "end": "2216960"
  },
  {
    "text": "of flow or whatever I I don't think that's going to be super useful and we we'd probably think about other ways we could accomplish this at that point yeah",
    "start": "2216960",
    "end": "2223520"
  },
  {
    "text": "I mean it's this's a hang up a lot of people have which is like how much of my",
    "start": "2223520",
    "end": "2228800"
  },
  {
    "text": "existing type code can I use under this mode can I just take my typ file and can",
    "start": "2228800",
    "end": "2235640"
  },
  {
    "text": "I just convert it over to ajs file and have it work and some people take like a",
    "start": "2235640",
    "end": "2240880"
  },
  {
    "text": "very Absolut view of like if I can't do that then it's a useless proposal right and I think that that's a little too",
    "start": "2240880",
    "end": "2247160"
  },
  {
    "text": "extreme because there's just a lot of stuff that's just like out of scope for this proposal anyway like enums can be their",
    "start": "2247160",
    "end": "2254319"
  },
  {
    "text": "own proposal stuff like that and also people have like written code without enums and things like that for a while",
    "start": "2254319",
    "end": "2260839"
  },
  {
    "text": "so it's not impossible right but I get where they're coming from but there is like a decent amount where it will",
    "start": "2260839",
    "end": "2268800"
  },
  {
    "text": "benefit so many people to not so this is like so why are we doing this right like",
    "start": "2268800",
    "end": "2273880"
  },
  {
    "text": "that was going to be my next question so first right I a lot of people are really",
    "start": "2273880",
    "end": "2279520"
  },
  {
    "text": "growing distasteful of like needing a build step for everything just because they want like whatever syntax extension",
    "start": "2279520",
    "end": "2286119"
  },
  {
    "text": "right like for some people it's like jsx for other people it's like the type annotation syntax and stuff like that",
    "start": "2286119",
    "end": "2293240"
  },
  {
    "text": "and Ryan and I probably every so often have to write a new Javas script file",
    "start": "2293240",
    "end": "2298480"
  },
  {
    "text": "like like a something within 100 to 200 lines because like there's no end to",
    "start": "2298480",
    "end": "2304240"
  },
  {
    "text": "like offshoot script like ad hoc scripts that you're going to write your lifetime yeah and like you're not going to write",
    "start": "2304240",
    "end": "2310160"
  },
  {
    "text": "that in typescript because like you're not going to set up a whole build step for that because like it's a script that",
    "start": "2310160",
    "end": "2315200"
  },
  {
    "text": "is going to live in a repo that might or might not even have a package Json anyway so like don't waste anyone's time",
    "start": "2315200",
    "end": "2321480"
  },
  {
    "text": "and so we use the JS Dock type checking functionality that that typescript supports if you're ever interested in",
    "start": "2321480",
    "end": "2327640"
  },
  {
    "text": "this you should go read up about type checking in JavaScript files uh with typescript and it works pretty well but",
    "start": "2327640",
    "end": "2333680"
  },
  {
    "text": "it's really verbose right like writing out that comment and kn knowing the the correct Syntax for JS do and I don't do",
    "start": "2333680",
    "end": "2340560"
  },
  {
    "text": "it right like 90% of the time actually this is really funny when I wrote the blog post for the types' comments",
    "start": "2340560",
    "end": "2347880"
  },
  {
    "text": "announcement that we were actually going to be making a stage zero proposal for this thing I got the JS doc comment",
    "start": "2347880",
    "end": "2354720"
  },
  {
    "text": "wrong like the Syntax for that and like didn't matter because types just says",
    "start": "2354720",
    "end": "2360040"
  },
  {
    "text": "like yeah I'm going to do it anyway cuz I I know what you meant other syntax in JS is just like not intuitive at all and",
    "start": "2360040",
    "end": "2367119"
  },
  {
    "text": "we could we could keep doing this but it's it's just hard it doesn't feel natural and so like how do you balance",
    "start": "2367119",
    "end": "2373599"
  },
  {
    "text": "like the benefits of like I I am still able to run my code but also I can get type checking and I don't need a build",
    "start": "2373599",
    "end": "2379359"
  },
  {
    "text": "Step at all right and like complexity for newer JavaScript users is like awful",
    "start": "2379359",
    "end": "2384720"
  },
  {
    "text": "I've been thinking recently about how do you get started with Javas these days and like the easiest learning paths all",
    "start": "2384720",
    "end": "2391520"
  },
  {
    "text": "seem to involve like okay install vit or something like that is probably like the best bet right",
    "start": "2391520",
    "end": "2397839"
  },
  {
    "text": "it sounds nuts that's one aspect of it and then like if you go from like how do I get started with JavaScript to like",
    "start": "2397839",
    "end": "2403560"
  },
  {
    "text": "how do I get started with typescript that's another entire Hill that you have to climb so what we want to do is like",
    "start": "2403560",
    "end": "2410119"
  },
  {
    "text": "hey look you can still use typescript as like TS files you can still use a buildup you can do all this stuff but",
    "start": "2410119",
    "end": "2416599"
  },
  {
    "text": "like can we at least make the barrier to entry easier for people and make like a",
    "start": "2416599",
    "end": "2421760"
  },
  {
    "text": "simple script file easy to write with types can we make like small websites approachable to write again right like",
    "start": "2421760",
    "end": "2429640"
  },
  {
    "text": "things like that that that carry a lot of weight and like can make like accidental coding easier again that's",
    "start": "2429640",
    "end": "2435280"
  },
  {
    "text": "sort of thing I'm not trying to like go with like it's a call for simpler times",
    "start": "2435280",
    "end": "2440680"
  },
  {
    "text": "but also right it would be nice to make it easier for newcomers to like get into this stuff too I think that there's some",
    "start": "2440680",
    "end": "2447240"
  },
  {
    "text": "value in that and it would be really um inconsiderate if we didn't at least like",
    "start": "2447240",
    "end": "2453400"
  },
  {
    "text": "try to tackle the problem and see like how we could bring a solution there too [Music]",
    "start": "2453400",
    "end": "2465179"
  },
  {
    "text": "this episode is brought to you by our friends at source graft they recently launched a new feature called code",
    "start": "2465359",
    "end": "2470720"
  },
  {
    "text": "insights now you can track what really matters to you in your team in your codebase transform your code into a",
    "start": "2470720",
    "end": "2475880"
  },
  {
    "text": "quable database to create customizable visual dashboards in seconds here's how engineering teams are using Code",
    "start": "2475880",
    "end": "2481920"
  },
  {
    "text": "insights they can track migrations adoption and deprecation across the code base they can detect and track versions",
    "start": "2481920",
    "end": "2488720"
  },
  {
    "text": "of languages or packages they can ensure the removal of security vulnerabilities like log 4J can understand code by team",
    "start": "2488720",
    "end": "2496119"
  },
  {
    "text": "track code smells and health and visualize configurations and services here's what the engineering manager at",
    "start": "2496119",
    "end": "2502240"
  },
  {
    "text": "presy has to say about this new feature quote as we've grown so has a need to better track and communicate our",
    "start": "2502240",
    "end": "2508040"
  },
  {
    "text": "progress and our goals across the engineering team and the broader company with code insights our data and",
    "start": "2508040",
    "end": "2513680"
  },
  {
    "text": "migration tracking is accurate across our entire code base and our engineers and our managers can shift out of manual",
    "start": "2513680",
    "end": "2520960"
  },
  {
    "text": "spreadsheets and spend more time working on code end quote the next step is to",
    "start": "2520960",
    "end": "2526200"
  },
  {
    "text": "see how other teams are using this awesome feature head to about. source.com",
    "start": "2526200",
    "end": "2532319"
  },
  {
    "text": "slode D insights this link will be in the show notes again about. source.com",
    "start": "2532319",
    "end": "2539440"
  },
  {
    "text": "code-in [Music]",
    "start": "2539440",
    "end": "2546119"
  },
  {
    "text": "insights [Music]",
    "start": "2546119",
    "end": "2553300"
  },
  {
    "text": "so one thing that's not really clear to me is does this proposal actually",
    "start": "2556800",
    "end": "2562680"
  },
  {
    "text": "propose some type syntax or is it just really more of a a place a bucket where",
    "start": "2562680",
    "end": "2568640"
  },
  {
    "text": "where a type system can put in its own types or is a little bit of both it's closer to a little bit of both so the",
    "start": "2568640",
    "end": "2576240"
  },
  {
    "text": "the main thing there is there needs to be some set of like what we call like top level syntax right where you need to",
    "start": "2576240",
    "end": "2584240"
  },
  {
    "text": "be able to like let's say create an interface create a type ilas stuff like that and then you need to be able to",
    "start": "2584240",
    "end": "2590559"
  },
  {
    "text": "like have a concept of like Union types and and let those exist but then the",
    "start": "2590559",
    "end": "2596319"
  },
  {
    "text": "carve outs so to speak are like basically like the parenthesis right",
    "start": "2596319",
    "end": "2601960"
  },
  {
    "text": "like putting things in Brackets putting things in curries like that's like the biggest carve out and then there's like",
    "start": "2601960",
    "end": "2607720"
  },
  {
    "text": "some top level car voutes where like again it's recognized by the engine as how you should parse it but you",
    "start": "2607720",
    "end": "2613559"
  },
  {
    "text": "basically don't do anything with it so you just toss it away immediately so there's some top level stuff that like",
    "start": "2613559",
    "end": "2619559"
  },
  {
    "text": "at least both flow and typescripts have agreed upon that is like okay we both use these things definitely like use",
    "start": "2619559",
    "end": "2627319"
  },
  {
    "text": "those in this proposal but again it's kind of like this is stuff that's very",
    "start": "2627319",
    "end": "2632440"
  },
  {
    "text": "likely I mean I don't know how likely but it it can change at this point cuz still like a stage one proposal and all",
    "start": "2632440",
    "end": "2639839"
  },
  {
    "text": "that means is the committee wants to discuss the topic of The Proposal right",
    "start": "2639839",
    "end": "2646520"
  },
  {
    "text": "it doesn't mean that we've agreed on syntax doesn't agreed mean we've agreed on semantics means just like yeah we're",
    "start": "2646520",
    "end": "2653839"
  },
  {
    "text": "kind of interested in talking about this which is like probably a lot more",
    "start": "2653839",
    "end": "2659040"
  },
  {
    "text": "staying we're at stage one probably like sounds like it has more Fanfare than like you might think but it is actually",
    "start": "2659040",
    "end": "2665079"
  },
  {
    "text": "a big deal in my opinion just because like even within the committee it was it",
    "start": "2665079",
    "end": "2670960"
  },
  {
    "text": "was like a thing where we we basically boxed out like 90 minutes of discussion time and still needed to add another 45",
    "start": "2670960",
    "end": "2678359"
  },
  {
    "text": "minutes at the end of the me meeting this past this PL past plary so it was",
    "start": "2678359",
    "end": "2683839"
  },
  {
    "text": "discussed to like Helen Back basically well from our perspective on the outside",
    "start": "2683839",
    "end": "2689400"
  },
  {
    "text": "uh it was introduced as like a stage zero proposal and then it seemed like within a few weeks immediately went to",
    "start": "2689400",
    "end": "2694960"
  },
  {
    "text": "stage one so it seemed like quick progress you know there's still a long ways to go but uh quick exciting",
    "start": "2694960",
    "end": "2700920"
  },
  {
    "text": "progress on on the proposal yeah and this is like in a big part thanks to like so we have two co- Champions um on",
    "start": "2700920",
    "end": "2709079"
  },
  {
    "text": "the proposal uh Robert Palmer and Romo cindra from Bloomberg and aalia",
    "start": "2709079",
    "end": "2714599"
  },
  {
    "text": "respectively they've been extremely helpful on making sure that this thing like came together and like you know",
    "start": "2714599",
    "end": "2721440"
  },
  {
    "text": "they have a very good set of intuitions of like what do we need to have ready in",
    "start": "2721440",
    "end": "2726520"
  },
  {
    "text": "terms of materials in terms of like planning in terms of all this stuff they've been like extremely helpful for like making that come together because",
    "start": "2726520",
    "end": "2734520"
  },
  {
    "text": "if it was just all on us then we have so many things going on that it's just like we'd be stretched thin and they've like",
    "start": "2734520",
    "end": "2741480"
  },
  {
    "text": "they've just been I just have to like give them a huge shout out thank you so much for that and then also the other",
    "start": "2741480",
    "end": "2748280"
  },
  {
    "text": "like Community participants in the proposal too right like the original author Gil tar other people who have",
    "start": "2748280",
    "end": "2754240"
  },
  {
    "text": "worked on it as well like I mean can do full acknowledgements right now but like you can you can check out the repo too",
    "start": "2754240",
    "end": "2759800"
  },
  {
    "text": "on that but yeah like it wouldn't have come together like there's a lot of work happening way before the proposal went",
    "start": "2759800",
    "end": "2766839"
  },
  {
    "text": "public and then within that month it was just like crunch time for us making sure",
    "start": "2766839",
    "end": "2772720"
  },
  {
    "text": "it all came together and it was a lot but I'm really glad we even got to stage one yeah for sure one question that I",
    "start": "2772720",
    "end": "2780319"
  },
  {
    "text": "wanted to ask was about kind of the the perception by the community of this",
    "start": "2780319",
    "end": "2785880"
  },
  {
    "text": "proposal and I think I want to ask Chris because before this call we were talking about how I think you referred to me as",
    "start": "2785880",
    "end": "2791440"
  },
  {
    "text": "a typescript zealot and you are using types through JS do comments and so from",
    "start": "2791440",
    "end": "2797960"
  },
  {
    "text": "your perspective how what do you think about this proposal well I mean I I agree with what Daniel said like",
    "start": "2797960",
    "end": "2805040"
  },
  {
    "text": "essentially JS doc types it works pretty darn well I'm not missing a whole lot it",
    "start": "2805040",
    "end": "2812400"
  },
  {
    "text": "feels like but where it is difficult is it does does get",
    "start": "2812400",
    "end": "2818640"
  },
  {
    "text": "verbose and there are probably some ways that one could get around this and that",
    "start": "2818640",
    "end": "2826920"
  },
  {
    "text": "would be essentially just like adding more tags to make importing types from",
    "start": "2826920",
    "end": "2832880"
  },
  {
    "text": "somewhere else easier but the verbosity is a little a little hairy and so it's",
    "start": "2832880",
    "end": "2839119"
  },
  {
    "text": "something like what's proposing if we can make it less for both if we can make it so again I don't need to add a build",
    "start": "2839119",
    "end": "2847400"
  },
  {
    "text": "step I don't need to convert JavaScript to typescript if all I need to do is add",
    "start": "2847400",
    "end": "2854400"
  },
  {
    "text": "this that and the other thing at these certain points in the code and have the compiler understand that that's great",
    "start": "2854400",
    "end": "2860720"
  },
  {
    "text": "and so it sounds cool to me I was definitely like skeptical I was like why are you doing this this thing already",
    "start": "2860720",
    "end": "2866440"
  },
  {
    "text": "works and yeah it already works but again it's it could be better and it",
    "start": "2866440",
    "end": "2872800"
  },
  {
    "text": "sounds like this is a solution to that yeah yeah we've seen a lot of support",
    "start": "2872800",
    "end": "2879079"
  },
  {
    "text": "right a lot of excitement and so like we're really happy when people like tell us like this is great or like I've",
    "start": "2879079",
    "end": "2886119"
  },
  {
    "text": "thought about it and you know I've been thinking about it more and I I've come around just kind of like what Chris just said but um but you know we're also just",
    "start": "2886119",
    "end": "2893319"
  },
  {
    "text": "watching the sort of feedback that we get that is like hey I don't like this and we're trying to think about it very",
    "start": "2893319",
    "end": "2899079"
  },
  {
    "text": "thoughtfully too right like we're not coming at this from like a very absolutist view of like this is the",
    "start": "2899079",
    "end": "2904839"
  },
  {
    "text": "right way to do it we have some intuitions we hope that people agree with them in some ways and if not like",
    "start": "2904839",
    "end": "2912160"
  },
  {
    "text": "we're willing to think about what are some of the downsides here what are some of the places that this Falls over",
    "start": "2912160",
    "end": "2918160"
  },
  {
    "text": "whatever so like in these cases you know I hope that basically first of all like being on this call Chris is not just",
    "start": "2918160",
    "end": "2924640"
  },
  {
    "text": "like trying trying to be nice about the proposal at all I don't think he'd do that I'm sure you're being honest but I",
    "start": "2924640",
    "end": "2931359"
  },
  {
    "text": "just I think like from my perspective the best thing that we can make comes from like taking people's criticisms and",
    "start": "2931359",
    "end": "2938799"
  },
  {
    "text": "and taking them to heart and thinking about them a lot so like if you have legitimate criticism first of all if you",
    "start": "2938799",
    "end": "2945400"
  },
  {
    "text": "can make it constructive that makes our jobs always easier but also like I think",
    "start": "2945400",
    "end": "2950720"
  },
  {
    "text": "it's fair game right like if you have hunches if you have thoughts if you have feedback like proposal repo is a",
    "start": "2950720",
    "end": "2957680"
  },
  {
    "text": "reasonable place to put that too so I also think one thing you also touched on",
    "start": "2957680",
    "end": "2962880"
  },
  {
    "text": "was like it would be nice if the JS doc stuff had more way to do things that like kind of could do what types can do",
    "start": "2962880",
    "end": "2969599"
  },
  {
    "text": "in a lot of cases and that's also a difficult design space for us because",
    "start": "2969599",
    "end": "2975520"
  },
  {
    "text": "the JS do support was JavaScript users need a way to like Leverage all the",
    "start": "2975520",
    "end": "2980680"
  },
  {
    "text": "smarts that we put into the language service let's try to see what people are",
    "start": "2980680",
    "end": "2985960"
  },
  {
    "text": "already doing with their JavaScript code and model that and make it work so that",
    "start": "2985960",
    "end": "2991480"
  },
  {
    "text": "if you just decided to write comments and say that this thing is a string that just lights up and you get method complete and all that stuff at some",
    "start": "2991480",
    "end": "2999160"
  },
  {
    "text": "point there was this really weird I don't know inflection point where like most of the JS stock being written was",
    "start": "2999160",
    "end": "3006240"
  },
  {
    "text": "primarily for typescript or the language service in like VSS or vs code right",
    "start": "3006240",
    "end": "3013160"
  },
  {
    "text": "rather than like being something for the JS doc authoring tool right and so",
    "start": "3013160",
    "end": "3018240"
  },
  {
    "text": "whenever people would ask us like can you add this feature we're like well other JS doc tools don't really like",
    "start": "3018240",
    "end": "3024559"
  },
  {
    "text": "understand them and we and they'd be like well I don't care I don't use JS do for JS doc like I use the JS do comment",
    "start": "3024559",
    "end": "3031480"
  },
  {
    "text": "format for typescript and we were just like oh is this so like how much",
    "start": "3031480",
    "end": "3036839"
  },
  {
    "text": "investment do we put in there how much do we like add new constructs that other tools are not going to understand it's",
    "start": "3036839",
    "end": "3042119"
  },
  {
    "text": "like esl's not going to understand that like it's this whole coordination problem there I had hoped to be able to",
    "start": "3042119",
    "end": "3048760"
  },
  {
    "text": "pick up you know the eslint typescript project right and just run es lint and so I don't have to use TSC to do",
    "start": "3048760",
    "end": "3055400"
  },
  {
    "text": "anything right but they don't support JavaScript so it's like a whole another thing it's like oh okay he's like no you",
    "start": "3055400",
    "end": "3063200"
  },
  {
    "text": "should convert to typescript we will not support now I'm like okay bud sorry just asking but like yeah it sounds like a a",
    "start": "3063200",
    "end": "3071440"
  },
  {
    "text": "kind of line to walk there and certainly documentation is is once you start",
    "start": "3071440",
    "end": "3076839"
  },
  {
    "text": "talking about documentation that's a big can of worms too but I for one would",
    "start": "3076839",
    "end": "3082040"
  },
  {
    "text": "love to see like a yeah anyway go ahead next",
    "start": "3082040",
    "end": "3087200"
  },
  {
    "text": "next topic yeah I I was going to say that some of the the criticisms I've seen are",
    "start": "3087200",
    "end": "3093280"
  },
  {
    "text": "like well I think that out of the three ways that that Ryan proposed that this could happen like this seems like the",
    "start": "3093280",
    "end": "3099799"
  },
  {
    "text": "best way in terms of like compatibility and backwards compatibility and still being completely optional but if it does",
    "start": "3099799",
    "end": "3107839"
  },
  {
    "text": "become allowed then I can start writing everything that way and Publishing everything that way and you're going to",
    "start": "3107839",
    "end": "3113839"
  },
  {
    "text": "have to read that whether you like it or not because like if you're just perusing my code that's what it's going to be right and so it is kind of thrust upon",
    "start": "3113839",
    "end": "3120440"
  },
  {
    "text": "you in that sense but I still think that the the benefits outweigh the negative effects of that but that's my opinion I",
    "start": "3120440",
    "end": "3127200"
  },
  {
    "text": "did see a fair amount of criticism well if it doesn't do runtime checking it's pointless people have been writing like",
    "start": "3127200",
    "end": "3134200"
  },
  {
    "text": "type checked code for a decade now for their JavaScript at least I mean it goes further back if you go to but anyway",
    "start": "3134200",
    "end": "3142000"
  },
  {
    "text": "like a lot of a lot of these systems do that and and it's okay and actually actually I mean you know python is",
    "start": "3142000",
    "end": "3148720"
  },
  {
    "text": "another language that I know this is the JS party not the python party but um",
    "start": "3148720",
    "end": "3154200"
  },
  {
    "text": "they have had type annotations for like in the language like built into the",
    "start": "3154200",
    "end": "3160440"
  },
  {
    "text": "language for at least as long as I think I've been on typescript at this point I",
    "start": "3160440",
    "end": "3166240"
  },
  {
    "text": "think a lot of people were probably like either apprehensive or upset about that decision early on and like no one really",
    "start": "3166240",
    "end": "3173520"
  },
  {
    "text": "cares now like like it's a net good thing at least right and we have a",
    "start": "3173520",
    "end": "3178920"
  },
  {
    "text": "partner team that has like that we meet with and they're called pyant or pyite",
    "start": "3178920",
    "end": "3184240"
  },
  {
    "text": "depending on which part of the stack you're using but like it's a type Checker with a really good language service that is powered by types and",
    "start": "3184240",
    "end": "3191839"
  },
  {
    "text": "it's like I couldn't write python without that thing and it's so nice and",
    "start": "3191839",
    "end": "3197680"
  },
  {
    "text": "again python doesn't have any like runtime checks based on the things that you write by default they have some a",
    "start": "3197680",
    "end": "3203920"
  },
  {
    "text": "little bit of what they call reification like you can introspect things we're not really doing that in our proposal but",
    "start": "3203920",
    "end": "3211160"
  },
  {
    "text": "but it's ignored and it's fine as an authoring tool because people get the",
    "start": "3211160",
    "end": "3217040"
  },
  {
    "text": "value of that and there's like also seven type Checkers or something like that for python too so clearly like",
    "start": "3217040",
    "end": "3222760"
  },
  {
    "text": "there's demand for like taking these Dynamic languages and having some checking so that to make I mean that's",
    "start": "3222760",
    "end": "3228359"
  },
  {
    "text": "what a linter is Right making sure you're not making a mistake before you run your code so like this is not a",
    "start": "3228359",
    "end": "3234520"
  },
  {
    "text": "controversial topic I feel and so a little bit of extra Syntax for this thing that has like massive amounts of",
    "start": "3234520",
    "end": "3241920"
  },
  {
    "text": "Industry like investment and resources is like to me obvious but like we have",
    "start": "3241920",
    "end": "3249160"
  },
  {
    "text": "to kind of build up that consensus and and make sure that we're addressing people's concerns and that sort of thing",
    "start": "3249160",
    "end": "3254359"
  },
  {
    "text": "right so and I think the the diversification in the python ecosystem is really interesting to think about",
    "start": "3254359",
    "end": "3259400"
  },
  {
    "text": "because by way of analogy with linting I think it's interesting to think about like my code can interrupt with your",
    "start": "3259400",
    "end": "3265280"
  },
  {
    "text": "code even though we might have different lint settings like we don't have to agree on how our code is formatted for",
    "start": "3265280",
    "end": "3270880"
  },
  {
    "text": "our code to interoperate with each other and if we take type checking and push it to be a runtime feature we're all going",
    "start": "3270880",
    "end": "3276920"
  },
  {
    "text": "to have to agree and that's like really really a huge lift so I I kind of like",
    "start": "3276920",
    "end": "3282359"
  },
  {
    "text": "the idea that different projects can have different type checking that is configured according to their preferences and design goals I I take",
    "start": "3282359",
    "end": "3289960"
  },
  {
    "text": "the criticism seriously I think because it's I think the idea that you can write",
    "start": "3289960",
    "end": "3295640"
  },
  {
    "text": "something that won't have semantics it can be confusing and it's going to depend on user education and how editors",
    "start": "3295640",
    "end": "3302000"
  },
  {
    "text": "display these things and general just learning to so that people understand that like a type annotation is like we",
    "start": "3302000",
    "end": "3308119"
  },
  {
    "text": "called it originally in The Proposal a comment and serves the same role and is there for things that aren't the runtime",
    "start": "3308119",
    "end": "3314160"
  },
  {
    "text": "I'm just thinking about ways that this could be abused like we have minifiers now well people will write varx colon",
    "start": "3314160",
    "end": "3321520"
  },
  {
    "text": "meters per second like as three separate words maybe right and it's going to be like well okay yeah we saw some creative",
    "start": "3321520",
    "end": "3329839"
  },
  {
    "text": "trolling on Twitter for sure yeah I'm just thinking of like a you know how you",
    "start": "3329839",
    "end": "3335760"
  },
  {
    "text": "humidify the code and you can like rename variables and and things like that it makes it harder to read well you",
    "start": "3335760",
    "end": "3340880"
  },
  {
    "text": "can just have something that just like randomly generates fake types got I mean yeah but no one right",
    "start": "3340880",
    "end": "3347440"
  },
  {
    "text": "again like it it always comes back to the the original mental model the original title of the proposal gives a",
    "start": "3347440",
    "end": "3353520"
  },
  {
    "text": "good mental model there which it's like it's just common so like you have always done the the insane comment emit thing",
    "start": "3353520",
    "end": "3359680"
  },
  {
    "text": "as well but like it is it is really funny to think about like we've known what type syntax is for like as long as",
    "start": "3359680",
    "end": "3367799"
  },
  {
    "text": "we've been around but like seeing people just write total nonsense in a in when between curly braces like I think",
    "start": "3367799",
    "end": "3374359"
  },
  {
    "text": "someone from on the Chrome team was like joking around like in Curly's like one",
    "start": "3374359",
    "end": "3379559"
  },
  {
    "text": "fine summer day I you know the example I always give of like",
    "start": "3379559",
    "end": "3385319"
  },
  {
    "text": "nonsense types and how it like um and like does this feel good is like you can write in curly braces like kitty kitty",
    "start": "3385319",
    "end": "3391920"
  },
  {
    "text": "kitty kitty kitty kitty all on like the same line and like what does that mean like nothing right but like like to an",
    "start": "3391920",
    "end": "3397520"
  },
  {
    "text": "engine nothing but like how do you make sure that a type Checker like tells you that hey this doesn't really seem to",
    "start": "3397520",
    "end": "3404599"
  },
  {
    "text": "make any sense um I guess what I'm getting at is like it's going to be a challenge for like tooling like type",
    "start": "3404599",
    "end": "3411280"
  },
  {
    "text": "Checkers to bridge the gap between like the car out that engines make for the",
    "start": "3411280",
    "end": "3416680"
  },
  {
    "text": "type Checkers and whatever the type Checkers actually decide to understand",
    "start": "3416680",
    "end": "3422480"
  },
  {
    "text": "like you want your tools to under like truly understand what your job what JavaScript you're writing but you don't",
    "start": "3422480",
    "end": "3427960"
  },
  {
    "text": "want to allow total nonsense right it would kind of be like a diss surface like the purpose of the proposal and so",
    "start": "3427960",
    "end": "3434200"
  },
  {
    "text": "like there's going to be need to be a place where like yeah you're writing JavaScript but like this doesn't make",
    "start": "3434200",
    "end": "3439400"
  },
  {
    "text": "any sense I'm going to give you an error message right and so how do we bridge that Gap and and tell users right like",
    "start": "3439400",
    "end": "3445440"
  },
  {
    "text": "yeah if it's a type as a comment do we highlight it as a as green entirely or do you want to like actually get syntax",
    "start": "3445440",
    "end": "3452000"
  },
  {
    "text": "highlighting that looks like comments right it's kind of like this weird set of trade-offs that we were going to have",
    "start": "3452000",
    "end": "3457280"
  },
  {
    "text": "to you know that the onus is on us right we're volunteering ourselves for this challenge mhm speaking of tooling is",
    "start": "3457280",
    "end": "3464240"
  },
  {
    "text": "there a a do you have like a a are you maintaining a proof of concept that",
    "start": "3464240",
    "end": "3469319"
  },
  {
    "text": "understands the synthetics it's called types SC no I'm just kidding uh but we",
    "start": "3469319",
    "end": "3474599"
  },
  {
    "text": "don't have the the full proof of cont but because it's heavily inspired by",
    "start": "3474599",
    "end": "3479640"
  },
  {
    "text": "typescript and flow like I would say like look to these to like get a sense of what it's going to understand like at",
    "start": "3479640",
    "end": "3486240"
  },
  {
    "text": "the very least and then like once it gets to stage two or something like that",
    "start": "3486240",
    "end": "3491400"
  },
  {
    "text": "that's probably when we would experiment right because today if you try to write a type in a Javascript file like we're",
    "start": "3491400",
    "end": "3497160"
  },
  {
    "text": "not going to do that until it actually has more support from the committee",
    "start": "3497160",
    "end": "3502880"
  },
  {
    "text": "right so so today we say you can't use a type in a Javascript file right we're not going to try to like push the proposal by just building it into the",
    "start": "3502880",
    "end": "3509280"
  },
  {
    "text": "tooling and allowing it in JS files we kind of find that to be a distasteful way to goobat the proposal but can",
    "start": "3509280",
    "end": "3516920"
  },
  {
    "text": "totally imagine a babble preset of something of some sort right I'm sure somebody's already made one I think",
    "start": "3516920",
    "end": "3522280"
  },
  {
    "text": "someone is actually working on it right now which is always like a beautiful Testament to like just the Babel core",
    "start": "3522280",
    "end": "3528960"
  },
  {
    "text": "team and whatnot and the ecosystem around it so it's really cool to see that that really has me thinking though",
    "start": "3528960",
    "end": "3534640"
  },
  {
    "text": "like typescript always kind of supports JavaScript first and like leads the way on that so if this became a thing in",
    "start": "3534640",
    "end": "3542000"
  },
  {
    "text": "JavaScript and then like honestly I'm I'm not super familiar with flow but suppose that there was some kind of like",
    "start": "3542000",
    "end": "3549119"
  },
  {
    "text": "flow type that was incompatible with typescript and then I try and like bring",
    "start": "3549119",
    "end": "3554280"
  },
  {
    "text": "that in or use it like what does typescript do in that sense you know that's the same problem as like the person writing like gibberish in the",
    "start": "3554280",
    "end": "3561559"
  },
  {
    "text": "parenthesis right it's this it's kind of like languages with dialects with like a lot of overlap right at some point you",
    "start": "3561559",
    "end": "3567720"
  },
  {
    "text": "just say I don't know what that is right so like some of the time it'll work and then other times you'll be like sorry I",
    "start": "3567720",
    "end": "3573799"
  },
  {
    "text": "have no idea what that means and so basically we would give a hard stop on those in typescript probably right like",
    "start": "3573799",
    "end": "3580079"
  },
  {
    "text": "we would say hey don't know what this operator means and we would probably expect Flo to do something similar if",
    "start": "3580079",
    "end": "3585480"
  },
  {
    "text": "you used like a type specific construct and then like run into that what I would imagine is we would have a mode that",
    "start": "3585480",
    "end": "3591599"
  },
  {
    "text": "says like so like not in typescript files but in JavaScript files where you could say say allow the full set of",
    "start": "3591599",
    "end": "3598200"
  },
  {
    "text": "gibberish that I want to write in type positions that's your escape hatch right",
    "start": "3598200",
    "end": "3603559"
  },
  {
    "text": "like because otherwise you probably don't want to make a mistake right with JSO we can kind of give errors but then",
    "start": "3603559",
    "end": "3610400"
  },
  {
    "text": "we often have to just sort of fall back on whatever nonsense you might have written in the comments too so it's",
    "start": "3610400",
    "end": "3617559"
  },
  {
    "text": "tough yeah that does sound difficult like if yeah if you're trying to import so you have this JavaScript and one's",
    "start": "3617559",
    "end": "3624039"
  },
  {
    "text": "using this type system the other's using other type system well they can't really talk to each other right yeah and you",
    "start": "3624039",
    "end": "3632000"
  },
  {
    "text": "know the way we get around that nowadays is people don't ship types in JavaScript",
    "start": "3632000",
    "end": "3638480"
  },
  {
    "text": "right yeah they ship like declaration files or if you're using flow whatever they use I don't know right if you",
    "start": "3638480",
    "end": "3644559"
  },
  {
    "text": "wanted to support both you could like find the subset and emit from the subset for each of those things I mean today",
    "start": "3644559",
    "end": "3651200"
  },
  {
    "text": "they don't talk to each other either right so right but it's not an issue because you know what I'm saying it's",
    "start": "3651200",
    "end": "3657520"
  },
  {
    "text": "just like if if flits anything it's just like JavaScript with comments in it I",
    "start": "3657520",
    "end": "3662599"
  },
  {
    "text": "imagine yeah I don't remember exactly what they do anymore to be honest but yeah but the point being that the",
    "start": "3662599",
    "end": "3667920"
  },
  {
    "text": "JavaScript engine understands whatever flow emits likewise with typescript yeah exactly that's not going to change no",
    "start": "3667920",
    "end": "3674720"
  },
  {
    "text": "because the engine ignores it but your type Checker will mind yeah that's going",
    "start": "3674720",
    "end": "3682319"
  },
  {
    "text": "to be interesting to figure out be an interesting ecosystem discussion yeah",
    "start": "3682319",
    "end": "3687559"
  },
  {
    "text": "let's wrap up here but I did want to ask one more question before we go and that",
    "start": "3687559",
    "end": "3692760"
  },
  {
    "text": "is could you foresee any follow on to this proposal assuming it gets through that I don't know further this idea of",
    "start": "3692760",
    "end": "3700359"
  },
  {
    "text": "type annotations in JavaScript if this goes through I think you'll see probably a gradual expansion of the grammar as we",
    "start": "3700359",
    "end": "3707440"
  },
  {
    "text": "discover more things to sort of things that we want to have that wouldn't quite parse correctly so that's one Avenue I",
    "start": "3707440",
    "end": "3714400"
  },
  {
    "text": "think the the more interesting thing is if this doesn't go through depending on how this goes I think we might see uh I",
    "start": "3714400",
    "end": "3720079"
  },
  {
    "text": "hope to see a Revival of interest in like how to improve the dev Tooling in JavaScript because I'd love to see this",
    "start": "3720079",
    "end": "3725520"
  },
  {
    "text": "proposal go through but I'd also love to see a Resurgence of interest in how can we make JavaScript more ergonomic whether that's making it so that",
    "start": "3725520",
    "end": "3732279"
  },
  {
    "text": "translation is required in just fewer scenarios instead of no scenarios you know something Daniel and I talked about",
    "start": "3732279",
    "end": "3737400"
  },
  {
    "text": "is like you know pasting into the dev console in your browser like should that strip type annotations like I don't see",
    "start": "3737400",
    "end": "3743920"
  },
  {
    "text": "a good case against it you know exactly how that works is a technical detail and we can talk about that if node",
    "start": "3743920",
    "end": "3749960"
  },
  {
    "text": "understands typescript in some capacity should I have to run some tool before running note on some file like again I",
    "start": "3749960",
    "end": "3756000"
  },
  {
    "text": "don't see once you kind of imagine this world it's hard to be like well why don't we just have that world today just",
    "start": "3756000",
    "end": "3761559"
  },
  {
    "text": "based on the tooling that's on our Dev machines because ultimately this is this is a Dev tool right it's a thing for the",
    "start": "3761559",
    "end": "3766760"
  },
  {
    "text": "developer experience we don't need this to load your local newspaper.com that's",
    "start": "3766760",
    "end": "3771839"
  },
  {
    "text": "not what it's for it's for us and probably if this happened I think you would still see those types stripped",
    "start": "3771839",
    "end": "3777559"
  },
  {
    "text": "from your local newspaper.com assuming they've got good jsds minifying their",
    "start": "3777559",
    "end": "3782599"
  },
  {
    "text": "JavaScript so when we're thinking about the pre minifi JavaScript World which is where we all inhabit in this Dev space",
    "start": "3782599",
    "end": "3788240"
  },
  {
    "text": "like let's just make it better one way or another right that's what I want to see very well said so back to like more",
    "start": "3788240",
    "end": "3793760"
  },
  {
    "text": "of the original question of like would we see any new stuff getting added to JavaScript or getting proposed when I",
    "start": "3793760",
    "end": "3799960"
  },
  {
    "text": "look at the stuff that like has explicitly been dropped they're mostly runtime features right and so namespaces",
    "start": "3799960",
    "end": "3806880"
  },
  {
    "text": "is one we don't really think we're going to ever try to add that and I don't think anyone would want to try to add",
    "start": "3806880",
    "end": "3812400"
  },
  {
    "text": "that either there's a thing called a parameter property which is like when you write um when you write a class and",
    "start": "3812400",
    "end": "3818440"
  },
  {
    "text": "then in the Constructor for each of the arguments or the parameters for the Constructor you can say like public or",
    "start": "3818440",
    "end": "3824079"
  },
  {
    "text": "private or protected and this is like MH a construct that tasered at it early on",
    "start": "3824079",
    "end": "3829200"
  },
  {
    "text": "where you automatically make a property with the same name and it's super",
    "start": "3829200",
    "end": "3834760"
  },
  {
    "text": "convenient but it has runtime and then so like it's kind of fallen out of fashion for a lot of",
    "start": "3834760",
    "end": "3840880"
  },
  {
    "text": "developers but everyone loves them if you ever write a class so I could see some form of that getting added to",
    "start": "3840880",
    "end": "3847240"
  },
  {
    "text": "JavaScript and then another one is enums and enums actually got proposed two",
    "start": "3847240",
    "end": "3854359"
  },
  {
    "text": "sessions ago but the conclusion within tc39 was there's not enough motivation",
    "start": "3854359",
    "end": "3861240"
  },
  {
    "text": "for them in a sense and it's going to be really interesting to see how",
    "start": "3861240",
    "end": "3866520"
  },
  {
    "text": "if this proposal makes it to stage four then what does it mean for enums right",
    "start": "3866520",
    "end": "3872119"
  },
  {
    "text": "cuz like the whole motivation for enums is like you have a you have a set of values right cool I can have a set of",
    "start": "3872119",
    "end": "3877839"
  },
  {
    "text": "values in JavaScript too right so what are they used for it's like oh they're used for for static tooling and so the",
    "start": "3877839",
    "end": "3884079"
  },
  {
    "text": "response to that was okay static tooling should add their own thing like a a js.",
    "start": "3884079",
    "end": "3889520"
  },
  {
    "text": "comment or whatever to better understand objects with a bunch of properties on them and so like the motivation was not",
    "start": "3889520",
    "end": "3896760"
  },
  {
    "text": "there but once you say that type annotations are well motivated enough then it's not the craziest thing to talk",
    "start": "3896760",
    "end": "3903160"
  },
  {
    "text": "about like okay an enum has some extra semantic meaning or maybe like enums are",
    "start": "3903160",
    "end": "3909119"
  },
  {
    "text": "a little bit different from what type ship proposes and that's going to be an interesting world for us to bridge too",
    "start": "3909119",
    "end": "3914599"
  },
  {
    "text": "so I think that last one enums is the biggest question on a lot of people's minds both from the typescript and",
    "start": "3914599",
    "end": "3920960"
  },
  {
    "text": "JavaScript perspective on on future language Direction very cool well let's end it there Ryan Daniel thank you so",
    "start": "3920960",
    "end": "3927119"
  },
  {
    "text": "much for coming on and chatting with us today about this I really look forward to watching this proposal go through the stages hopefully all the way to four and",
    "start": "3927119",
    "end": "3934200"
  },
  {
    "text": "uh and then we can have a a nice Celebration Day absolutely in JavaScript thank you so much for having us thank",
    "start": "3934200",
    "end": "3939960"
  },
  {
    "text": "you and thanks Chris for joining thanks everybody thanks we will see you next",
    "start": "3939960",
    "end": "3946039"
  },
  {
    "text": "time so what do you think about the typescript teams proposal let us know in the comments just pop open your show",
    "start": "3946760",
    "end": "3953400"
  },
  {
    "text": "notes click the discuss on change log newslink and sound off we'd love to hear from you if this is your first time",
    "start": "3953400",
    "end": "3960000"
  },
  {
    "text": "listening subscribe now at JSP party. FM that's also where you'll find",
    "start": "3960000",
    "end": "3965160"
  },
  {
    "text": "collections of our most popular episodes recommended ones from us and a request form so you can let us know what you",
    "start": "3965160",
    "end": "3971520"
  },
  {
    "text": "want to hear about on the pot thanks again to our awesome Partners fastly for fronting everything we do with a super",
    "start": "3971520",
    "end": "3978200"
  },
  {
    "text": "fast CDN break master cylinder for keeping our beats fresh and glitching and thanks to you for listening We",
    "start": "3978200",
    "end": "3983760"
  },
  {
    "text": "Appreciate You Next Up on the Pod Nick did a big rewrite of our JS danger board",
    "start": "3983760",
    "end": "3989240"
  },
  {
    "text": "game appap from Dojo to react an xstate so faros kall and myself peppered questions at him while he told the tale",
    "start": "3989240",
    "end": "3996240"
  },
  {
    "text": "oh and we had an exceptionally good Pro tip time as well you don't want to miss it so stay tuned we'll drop it in your",
    "start": "3996240",
    "end": "4001720"
  },
  {
    "text": "podcast feed next [Music]",
    "start": "4001720",
    "end": "4009000"
  },
  {
    "text": "week",
    "start": "4009000",
    "end": "4012000"
  }
]