[
  {
    "text": "bandwith for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at Chang log because of rbar check them out at rar.com and we're hosted on linode cloud",
    "start": "5520",
    "end": "11840"
  },
  {
    "text": "servers head to lin.com changelog this episode is brought to you",
    "start": "11840",
    "end": "16960"
  },
  {
    "text": "by digital ocean digital ocean is the simplest Cloud platform for developers and teams with products like droplets",
    "start": "16960",
    "end": "24000"
  },
  {
    "text": "spaces kubernetes load balancers block storage and pre-built one-click apps you",
    "start": "24000",
    "end": "29199"
  },
  {
    "text": "can deploy manage and scale Cloud applications faster and more efficiently on digital ocean whether you're running",
    "start": "29199",
    "end": "35719"
  },
  {
    "text": "one virtual machine or 10,000 digital ocean makes managing your infrastructure way too easy head to do. changelog again",
    "start": "35719",
    "end": "44960"
  },
  {
    "text": "do. co/ change",
    "start": "44960",
    "end": "48760"
  },
  {
    "text": "log let's do it it's it's go time welcome to go time a podcast featuring a",
    "start": "57239",
    "end": "63600"
  },
  {
    "text": "diverse panel and special guests discussing Cloud infrastructure distributed systems microservices",
    "start": "63600",
    "end": "69479"
  },
  {
    "text": "kubernetes Docker oh and also go we record live every Tuesday at 300 p.m.",
    "start": "69479",
    "end": "74880"
  },
  {
    "text": "Eastern new Pacific join the community slack with us in real time during the show in the gotime FM channel in go for",
    "start": "74880",
    "end": "80920"
  },
  {
    "text": "slack follow us on Twitter we're at gotime FM listen live at Chang law.com or subscribe at Chang law.com gotime and",
    "start": "80920",
    "end": "89560"
  },
  {
    "text": "now on to the [Applause] show well hello and welcome to go time",
    "start": "89560",
    "end": "95759"
  },
  {
    "text": "I'm Matt ryer today we're talking about concurrency go was designed with",
    "start": "95759",
    "end": "101040"
  },
  {
    "text": "concurrency in mind and that's why we have language Primitives like go routines channels weight groups mutexes",
    "start": "101040",
    "end": "107280"
  },
  {
    "text": "these sorts of things um and they're very powerful when they're used correctly but they can be very",
    "start": "107280",
    "end": "112600"
  },
  {
    "text": "complicated if they're used unwisely so helping me pick the threads today I'm",
    "start": "112600",
    "end": "118719"
  },
  {
    "text": "joined by Johnny Boro Hello Johnny hello Matt how are you oh I'm here to pull",
    "start": "118719",
    "end": "125799"
  },
  {
    "text": "some threads good glad well you don't have to pull them on your own we're also joined",
    "start": "125799",
    "end": "132480"
  },
  {
    "text": "by Jana Bogen hello Jana hello hello how are you",
    "start": "132480",
    "end": "137519"
  },
  {
    "text": "doing um I'm just having my first coffee of the day congratulations B sluggish",
    "start": "137519",
    "end": "143040"
  },
  {
    "text": "here yeah enjoy and that's yeah there's another voice if you've heard it not",
    "start": "143040",
    "end": "149560"
  },
  {
    "text": "it's Roberto clais hello Rob how are you hello I'm fine and since today is going",
    "start": "149560",
    "end": "154640"
  },
  {
    "text": "to be a complicated subject I'm going to tread lightly oh oh that is nice very nice to nice off to a great start I'd",
    "start": "154640",
    "end": "162000"
  },
  {
    "text": "say off to a great start I'd say thanks okay well why don't we jump in",
    "start": "162000",
    "end": "169840"
  },
  {
    "text": "when C was designed in the 70s the computers had like a single core and",
    "start": "169840",
    "end": "175000"
  },
  {
    "text": "they were very they were much simpler than what we have now and more modern machine have multiple Cause And so",
    "start": "175000",
    "end": "181840"
  },
  {
    "text": "there's more potential for doing things at the same time whatever that means and so when go is designed of course they",
    "start": "181840",
    "end": "188159"
  },
  {
    "text": "knew this they knew this situation and so that's why we have go routines and we",
    "start": "188159",
    "end": "193720"
  },
  {
    "text": "have channels and uh we have those other Primitives and go is actually quite famous for concurrency actually they",
    "start": "193720",
    "end": "201200"
  },
  {
    "text": "become quite synonymous when you talk about languages out there and do you think it deserves that credit that it",
    "start": "201200",
    "end": "207760"
  },
  {
    "text": "gets I think it does actually before using go I had been using python for",
    "start": "207760",
    "end": "214159"
  },
  {
    "text": "years and at one point I needed to solve a problem using all the 36 cores that I",
    "start": "214159",
    "end": "220480"
  },
  {
    "text": "had available on a cluster on my University and the pain of doing that",
    "start": "220480",
    "end": "226560"
  },
  {
    "text": "with a language that wasn't designed with that in mind actually brought me to say okay what about learning a new",
    "start": "226560",
    "end": "232439"
  },
  {
    "text": "language and maybe makes this easier and with go it was I think 100 lines and I",
    "start": "232439",
    "end": "238280"
  },
  {
    "text": "was done well wow I'm coming from a jvm background and like every time we start",
    "start": "238280",
    "end": "243360"
  },
  {
    "text": "this like large you know process heavy type of stuff I was always complaining that it's taking all of my you know",
    "start": "243360",
    "end": "250959"
  },
  {
    "text": "processing power but it sounds like it's a good thing right like rather than doing this manually yeah so for people",
    "start": "250959",
    "end": "257519"
  },
  {
    "text": "that are new then to go I'll give a quick overview of some of the perimeters and some of the language that we're",
    "start": "257519",
    "end": "263040"
  },
  {
    "text": "probably going to use today just to make sure that we kind of you know what we're talking about so the a go routine you",
    "start": "263040",
    "end": "269280"
  },
  {
    "text": "can think think of like as another thread that's running it's actually not a thread but if you think of it as your",
    "start": "269280",
    "end": "276000"
  },
  {
    "text": "main application runs and that's one thread and if you want to do some work in the background then you can spin up a",
    "start": "276000",
    "end": "282080"
  },
  {
    "text": "go routine to go and do some work and actually you can spin up quite a few of these go routines to sort of go off and",
    "start": "282080",
    "end": "287639"
  },
  {
    "text": "do their work and they'll they'll in theory do it as as best they can with the hardware available to them and then",
    "start": "287639",
    "end": "294680"
  },
  {
    "text": "of course we have channels which are Communications allows Communications between the go routines um and so",
    "start": "294680",
    "end": "301680"
  },
  {
    "text": "they're quite cool for you can send and receive information in a in a safe way because if you have these go routines",
    "start": "301680",
    "end": "308440"
  },
  {
    "text": "trying to access the same memory at the same time you can run into problems so they're the sorts of I'd say the",
    "start": "308440",
    "end": "314560"
  },
  {
    "text": "generals of the two things there's also the go keyword which is what kicks off a",
    "start": "314560",
    "end": "319919"
  },
  {
    "text": "go routine so you can call a function and kick off a go routine that way so anyone that wants to learn more about",
    "start": "319919",
    "end": "326720"
  },
  {
    "text": "this stuff you can probably just search it in your favorite search engine du do go whichever one it is so that's the",
    "start": "326720",
    "end": "332319"
  },
  {
    "text": "overview done so it's I think it's important to also sort of uh talk about",
    "start": "332319",
    "end": "337800"
  },
  {
    "text": "the kinds of things that might be sort of un suitable for concurrency so not everything not every problem you're",
    "start": "337800",
    "end": "343960"
  },
  {
    "text": "going to have requires um can even leverage concurrency so usually we talk about uh when we talk about okay can",
    "start": "343960",
    "end": "350800"
  },
  {
    "text": "this if you write a program when you talk about okay can this program be made to run concurrently or parts of it be made to run concurrently you're usually",
    "start": "350800",
    "end": "357319"
  },
  {
    "text": "trying to identify what are the parts that are independent kind it can be worked on independently of each other",
    "start": "357319",
    "end": "362360"
  },
  {
    "text": "right so if you don't have any sort of dependency from one part of your your your task to the next then these often",
    "start": "362360",
    "end": "368319"
  },
  {
    "text": "are sort of a cases where concurrency perhaps could be useful to you um so the",
    "start": "368319",
    "end": "373440"
  },
  {
    "text": "go routines themselves uh you don't actually need the messaging mechanism um of channels you know to to actually",
    "start": "373440",
    "end": "379080"
  },
  {
    "text": "leverage concurrency and go just to you know just keyword go um will sort of get",
    "start": "379080",
    "end": "384280"
  },
  {
    "text": "you started the real kicker is especially when beginners sort of start to trying to unwrap understand okay how",
    "start": "384280",
    "end": "390520"
  },
  {
    "text": "does this stuff work and go they usually find out okay well it's a matter of basically your main program is itself a",
    "start": "390520",
    "end": "397599"
  },
  {
    "text": "gr routine and if I'm going to kick off other gr routines I need to they need to somehow wait on one another right your",
    "start": "397599",
    "end": "403479"
  },
  {
    "text": "main gr routin needs to be able to wait on on the work to be finished by the other gr routine or go routines before",
    "start": "403479",
    "end": "409000"
  },
  {
    "text": "your program can can finish right this is where sort of the the how do you string these things together right how",
    "start": "409000",
    "end": "415000"
  },
  {
    "text": "do you properly leverage right concurrency and go sort of becomes important that's and that's the part I",
    "start": "415000",
    "end": "420080"
  },
  {
    "text": "think we could spend more time sort of out in a community sort of doing more to educate beginners really on how to think",
    "start": "420080",
    "end": "426400"
  },
  {
    "text": "and reason about concurrency and go one thing I really really love about go is",
    "start": "426400",
    "end": "431440"
  },
  {
    "text": "that concurrency and parallelism are kind of separated and you don't have to think about them for example when you",
    "start": "431440",
    "end": "437080"
  },
  {
    "text": "use the HTTP package uh every time your Handler is going to be called it's going to be called inside inside its own go",
    "start": "437080",
    "end": "442879"
  },
  {
    "text": "routine but when you write the code feels synchronous you know it's going to be an independent thread of execution",
    "start": "442879",
    "end": "449080"
  },
  {
    "text": "but don't have to change your mindset to use it properly it's not like you have to use async things or some different",
    "start": "449080",
    "end": "457039"
  },
  {
    "text": "Primitives you just write your code for what you want to do and um it doesn't even have to run in parallel with other",
    "start": "457039",
    "end": "463120"
  },
  {
    "text": "things because if for example if you're running on a single core you probably W and you just write it and I mean yeah we",
    "start": "463120",
    "end": "472120"
  },
  {
    "text": "we probably should educate or put out some material to think about it and learn about it but what I really love is",
    "start": "472120",
    "end": "478599"
  },
  {
    "text": "that you can get started very easily and just write your synchronous code and you don't care yeah I think it's fairly also",
    "start": "478599",
    "end": "485520"
  },
  {
    "text": "easy to you know just migrate synchronous stuff uh to have more concurrence in it uh the magic of go is",
    "start": "485520",
    "end": "492159"
  },
  {
    "text": "I I think in select statement um and people have been complaining that it's actually not that easy to understand the",
    "start": "492159",
    "end": "498199"
  },
  {
    "text": "behavior of Select but otherwise it's just like looks really readable and you know really like there's no magic and",
    "start": "498199",
    "end": "504360"
  },
  {
    "text": "like it's this is one of the I think languages I feel more comfortable writing more concurrent code and like",
    "start": "504360",
    "end": "509440"
  },
  {
    "text": "people just going through and like understanding what I'm doing so go is definitely the my currently uh currently",
    "start": "509440",
    "end": "516719"
  },
  {
    "text": "my best tool prob for concurrency yeah I agree with you about the select statement when you really get that right",
    "start": "516719",
    "end": "523800"
  },
  {
    "text": "can be extremely powerful and the common way that I've used it recently a lot is checking for the context to be finished",
    "start": "523800",
    "end": "530880"
  },
  {
    "text": "so if I've got some work I'm doing in a loop I'll have a little check somewhere perhaps with a select block that will",
    "start": "530880",
    "end": "537600"
  },
  {
    "text": "just basically check if that context is has been canceled or not allowing me to interrupt the work and exit somewhat",
    "start": "537600",
    "end": "542880"
  },
  {
    "text": "gracefully if if it's cancelled and that's quite nice when you wire that up with the HTTP request context as well",
    "start": "542880",
    "end": "550040"
  },
  {
    "text": "because then you essentially if the user cancels the request in the browser in theory that is going to stop the little",
    "start": "550040",
    "end": "557279"
  },
  {
    "text": "the work that you were doing in order to prepare their request and whatever saving that gets you I don't know but it's just very satisfying to know that",
    "start": "557279",
    "end": "563880"
  },
  {
    "text": "that's what it's doing do you feel like um go can do more out of the box things with context like I feel like there's a",
    "start": "563880",
    "end": "570680"
  },
  {
    "text": "lot of boiler plate um you need to make sure that you know the context is not cancelled there's no timeout and",
    "start": "570680",
    "end": "576440"
  },
  {
    "text": "whatever uh do you feel like you know is there any any place that you know there can be some improvement maybe there",
    "start": "576440",
    "end": "582320"
  },
  {
    "text": "could be like certain features of Select that automatically handles some cases or whatever I'm just brainstorming right",
    "start": "582320",
    "end": "588040"
  },
  {
    "text": "now to be honest yeah I don't know that's actually a really interesting question I wondered whether having",
    "start": "588040",
    "end": "593880"
  },
  {
    "text": "context just part of the the language and this is kind of a non-go thing because go it likes to be very explicit",
    "start": "593880",
    "end": "600760"
  },
  {
    "text": "all the time but I could imagine there's always a context around and you can always cancel it and sub functions and",
    "start": "600760",
    "end": "607440"
  },
  {
    "text": "things will get canceled in the same way you could almost imagine that it's a bit like how exceptions probably work the",
    "start": "607440",
    "end": "612720"
  },
  {
    "text": "opposite way in other languages so I'm not sure it would get much support but sometimes I do find myself just passing",
    "start": "612720",
    "end": "619560"
  },
  {
    "text": "the context into every every method just everything because even potentially my",
    "start": "619560",
    "end": "625079"
  },
  {
    "text": "logging has needs for a context and so in that case so does it everything I'd like to not do that as much but again",
    "start": "625079",
    "end": "631920"
  },
  {
    "text": "it's explicit and you can't call that method without it I hope that just autom",
    "start": "631920",
    "end": "639399"
  },
  {
    "text": "magic context doesn't become a thing I like to know when I start a go routine",
    "start": "639399",
    "end": "645320"
  },
  {
    "text": "how and when it ends let's take an example I acquire mutex and I defer the",
    "start": "645320",
    "end": "650600"
  },
  {
    "text": "release of that mutex and that is fine and then I change a little bit of state",
    "start": "650600",
    "end": "655720"
  },
  {
    "text": "and then I do something else and if I encounter an error I want to be able to",
    "start": "655720",
    "end": "661200"
  },
  {
    "text": "for example roll back what I've done so far you can't always defer that so",
    "start": "661200",
    "end": "668240"
  },
  {
    "text": "sometimes when you write like transactional code you want to be sure that you will not be aborted unless the program panics but in",
    "start": "668240",
    "end": "675519"
  },
  {
    "text": "that case nothing will be committed you really want to know how you exit I would",
    "start": "675519",
    "end": "681120"
  },
  {
    "text": "really like to know when coded I'm writing gets interrupted and I want to be in control on when that happens and",
    "start": "681120",
    "end": "687519"
  },
  {
    "text": "how so if a context get cancellated I want to",
    "start": "687519",
    "end": "693240"
  },
  {
    "text": "have a chance to say okay then roll back what I started doing yeah that's a fair point one of",
    "start": "693240",
    "end": "699800"
  },
  {
    "text": "the nice things about the select block is that it is actually a block there's a case there then code that runs in",
    "start": "699800",
    "end": "706320"
  },
  {
    "text": "certain conditions so you do actually have that opportunity that that you described to be able to go and yeah do",
    "start": "706320",
    "end": "713920"
  },
  {
    "text": "some kind of Tidy Up or some clean up and it is explicit yeah yeah so it's",
    "start": "713920",
    "end": "719079"
  },
  {
    "text": "interesting you mention you want to know when it ends has anybody got any techniques of how you can find out when",
    "start": "719079",
    "end": "725279"
  },
  {
    "text": "a go routine has finished I think that it doesn't matter how but you should",
    "start": "725279",
    "end": "730600"
  },
  {
    "text": "always know I mean I've seen so many programs and so many projects just",
    "start": "730600",
    "end": "737120"
  },
  {
    "text": "become unmaintainable because they were just pinning up goroutines and let them run without handling their like shutdown",
    "start": "737120",
    "end": "745079"
  },
  {
    "text": "graceful shutdown has this been someone else's experience too well they all shut down when your program ends",
    "start": "745079",
    "end": "751720"
  },
  {
    "text": "right hopefully so you crash program otherwise you have a problem yeah you",
    "start": "751720",
    "end": "758120"
  },
  {
    "text": "know that there's a strategy of crashing programs once a while you know to kind of like release that type of like you",
    "start": "758120",
    "end": "763880"
  },
  {
    "text": "know resources that's a fair point yeah just reboot it I wonder even why do we have a garbage collector just run out of",
    "start": "763880",
    "end": "771440"
  },
  {
    "text": "memory just exit yeah restart that's what PHP",
    "start": "771440",
    "end": "776839"
  },
  {
    "text": "is so to kind of address your question of of do we know or can we know when the",
    "start": "776839",
    "end": "782720"
  },
  {
    "text": "G routine is done I don't think there's a any sort of a life cycle event or",
    "start": "782720",
    "end": "787839"
  },
  {
    "text": "anything like that you can attach to to know when a go routine ends what you typically do however is that you need",
    "start": "787839",
    "end": "794920"
  },
  {
    "text": "this is where sort of the communication aspect of of things start to emerge right so if you for example if you know you're in your main G routina you'd like",
    "start": "794920",
    "end": "800920"
  },
  {
    "text": "to know when the another grouting that you you spun off has done doing its work and you want to wait for it right you",
    "start": "800920",
    "end": "807279"
  },
  {
    "text": "know we have mechanisms in the language you know like a we group for example would be a great way to actually um basically block until the other gr is",
    "start": "807279",
    "end": "814040"
  },
  {
    "text": "done and then you're able to sort of move forward kind of thing and this is also where channels come into play right so if the gr you spin off to go do some",
    "start": "814040",
    "end": "821600"
  },
  {
    "text": "work and if you can you know when you initialize that if you can pass a some sort of channel to receive some sort of",
    "start": "821600",
    "end": "827399"
  },
  {
    "text": "communication back when that work is done you know either your main goutine or some other goutine that needs to know",
    "start": "827399",
    "end": "832519"
  },
  {
    "text": "about that event can actually be notified right so this is where the that Communication channel right the no pun",
    "start": "832519",
    "end": "838320"
  },
  {
    "text": "intended this is where that communication sort of channnel is is necessary for you to kind of know",
    "start": "838320",
    "end": "843600"
  },
  {
    "text": "basically the state at what point right of the work that you spun off and a gr routin what you know what's the state of",
    "start": "843600",
    "end": "848720"
  },
  {
    "text": "that is it done is it finished and there's lots of other different ways as well you can sort of enable that sort of",
    "start": "848720",
    "end": "853880"
  },
  {
    "text": "that communication but there's no direct way of saying hey did this go in finish right you kind of need some some",
    "start": "853880",
    "end": "859959"
  },
  {
    "text": "instrumentation around that you mentioned about uh the life cycle and like there's literally no apis for that",
    "start": "859959",
    "end": "867000"
  },
  {
    "text": "and you know it's by Design just keeping everything more Compact and like simple to the user but in the last couple of",
    "start": "867000",
    "end": "872959"
  },
  {
    "text": "years that I've personally came to a lot of like cases where I really wanted to you know execute the limitation in some",
    "start": "872959",
    "end": "880040"
  },
  {
    "text": "ways or like wanted to pin certain go routines or like underlying OS stress to",
    "start": "880040",
    "end": "885279"
  },
  {
    "text": "some you know processors and so on did you ever like had any you know troubles",
    "start": "885279",
    "end": "890560"
  },
  {
    "text": "in in the scope of this um what do you feel about like the go is very very",
    "start": "890560",
    "end": "895800"
  },
  {
    "text": "simple when it comes to like you know exec it just kind of handles it all and like encapsulates the problem from you",
    "start": "895800",
    "end": "902839"
  },
  {
    "text": "but you know it kind of limits the user in a way what is your take on that I think it does in kind of a good way so",
    "start": "902839",
    "end": "910519"
  },
  {
    "text": "for for some things the layer it gives you allows you to build better abstraction top for example ER Group",
    "start": "910519",
    "end": "916959"
  },
  {
    "text": "which is a thing that I use everywhere because when you cancel the context is immediate to know when everything is",
    "start": "916959",
    "end": "922639"
  },
  {
    "text": "ended and propagate the shut down but at the same time if you want to go lower as you say for example at one point you",
    "start": "922639",
    "end": "929519"
  },
  {
    "text": "want to drop your privileges so if you want one go routine to say okay uh this",
    "start": "929519",
    "end": "934600"
  },
  {
    "text": "program is running a route shall not route uh be root anymore dropping privileges is still broken and has been",
    "start": "934600",
    "end": "941319"
  },
  {
    "text": "broken for 9 years because it's racy has problems go doesn't give you that fine",
    "start": "941319",
    "end": "946800"
  },
  {
    "text": "grain control on the underlying threads or like pinning on a certain core for",
    "start": "946800",
    "end": "952120"
  },
  {
    "text": "example for graphics the only way to do that now is from the main function say",
    "start": "952120",
    "end": "958360"
  },
  {
    "text": "okay pin me on this OS thread forever and I'm going to be the one that draws",
    "start": "958360",
    "end": "964560"
  },
  {
    "text": "and that's clunky yeah true and like uh with Numa and all these like new uh ways",
    "start": "964560",
    "end": "970839"
  },
  {
    "text": "of like actually like you know controlling the scheduling you know LEL have this new capability called Numa you",
    "start": "970839",
    "end": "978279"
  },
  {
    "text": "can pin yourself to like certain processors or like certain group of processors and people do this like for",
    "start": "978279",
    "end": "984480"
  },
  {
    "text": "this like fine grained optimizations because you know more about like you know the task whatever you are running",
    "start": "984480",
    "end": "990680"
  },
  {
    "text": "and just grouping things together whatever it just makes sense and um I've been experimentally using go for this",
    "start": "990680",
    "end": "996519"
  },
  {
    "text": "purpose but it's been such a you know hard topic all you can do is just lock uh yourself to the OS thread and like",
    "start": "996519",
    "end": "1003440"
  },
  {
    "text": "you have some control over the O right through some CA libraries and that's kind of funny I think it was the restr",
    "start": "1003440",
    "end": "1011399"
  },
  {
    "text": "authors that said that they needed a thread local storage but go doesn't offer you that so they used syn pool",
    "start": "1011399",
    "end": "1018079"
  },
  {
    "text": "which is lossi and still decided they were good with that because lossi was better than trying to share stuff with",
    "start": "1018079",
    "end": "1024199"
  },
  {
    "text": "other threads I guess when you get the far you might be using something",
    "start": "1024199",
    "end": "1030438"
  },
  {
    "text": "wrong to be fair they did say that there was um actively use of some form of",
    "start": "1030439",
    "end": "1037079"
  },
  {
    "text": "thread local storage under the hood but it wasn't accessible to you as the user of the language yes yes that's why they",
    "start": "1037079",
    "end": "1043880"
  },
  {
    "text": "did that there are actually some people who are abusing that uh under liing look storage and I've seen some companies",
    "start": "1043880",
    "end": "1051240"
  },
  {
    "text": "doing like some automatical instrumentation based on that uh like some sort of like execution tracing type",
    "start": "1051240",
    "end": "1056840"
  },
  {
    "text": "of thing and it's very controversial and of course like not recommended but uh people are just you know reverse",
    "start": "1056840",
    "end": "1062919"
  },
  {
    "text": "engineering and like hijacking that which is [Music]",
    "start": "1062919",
    "end": "1074849"
  },
  {
    "text": "scary how often do you think about internal",
    "start": "1077400",
    "end": "1082559"
  },
  {
    "text": "tooling I'm talking about the back office apps the tool the customer service team uses to access your",
    "start": "1082559",
    "end": "1088240"
  },
  {
    "text": "databases the S3 upload you built last year for the marketing team that quick Firebase admin panel that let you",
    "start": "1088240",
    "end": "1094799"
  },
  {
    "text": "monitor key kpis and maybe even the tool that your data science team had together",
    "start": "1094799",
    "end": "1099880"
  },
  {
    "text": "so they can provide custom ad spend insights literally every line of business relies upon internal tooling",
    "start": "1099880",
    "end": "1106000"
  },
  {
    "text": "but if I'm being honest I don't know many Engineers out there who enjoy building internal tools let alone",
    "start": "1106000",
    "end": "1111760"
  },
  {
    "text": "getting them excited about maintaining or even supporting them and this is where retool comes in companies like",
    "start": "1111760",
    "end": "1118200"
  },
  {
    "text": "door Dash brex plaid and even Amazon they use retool to build internal",
    "start": "1118200",
    "end": "1123320"
  },
  {
    "text": "tooling super fast the idea is that almost all internal tools look the same they're made of tables drop downs",
    "start": "1123320",
    "end": "1129960"
  },
  {
    "text": "buttons text inputs and retool gives you a point click drag and drop interface that makes it super simple to build",
    "start": "1129960",
    "end": "1136280"
  },
  {
    "text": "these types of interfaces in hours not days retool connects to any database or",
    "start": "1136280",
    "end": "1141360"
  },
  {
    "text": "API for example to pull data from postgress just write a SQL query and drag and drop a table onto the canvas",
    "start": "1141360",
    "end": "1148799"
  },
  {
    "text": "and if you want to search across those fields add a search input bar and update your query save it share it it's too",
    "start": "1148799",
    "end": "1155919"
  },
  {
    "text": "easy reto is built by Engineers explicitly for engineers and for those",
    "start": "1155919",
    "end": "1160960"
  },
  {
    "text": "concerned about data security retool can even be set up on premise in about 15 minutes using Docker kubernetes or Hoku",
    "start": "1160960",
    "end": "1168320"
  },
  {
    "text": "learn more and try it free at ret.com changelog again ret.com",
    "start": "1168320",
    "end": "1175399"
  },
  {
    "text": "[Music]",
    "start": "1176530",
    "end": "1187760"
  },
  {
    "text": "changelog so what about some other packages then in in go that we have for when it comes to working in",
    "start": "1187760",
    "end": "1195120"
  },
  {
    "text": "concurrent ways uh thinking specifically about the sync package sync wants is a very",
    "start": "1195120",
    "end": "1203039"
  },
  {
    "text": "helpful little utility essentially you give it a function and it guarantees that that function will only be called",
    "start": "1203039",
    "end": "1209159"
  },
  {
    "text": "once and so it's very useful in a say a web context if you've got a Handler",
    "start": "1209159",
    "end": "1214200"
  },
  {
    "text": "that's going to do some initialization work up front and you might want to defer that until the first time it's called then put you put it inside the",
    "start": "1214200",
    "end": "1221320"
  },
  {
    "text": "Handler itself but of course since every request gets its own go routine and go it's possible that two requests could",
    "start": "1221320",
    "end": "1227520"
  },
  {
    "text": "come in at the exact same time spin up two go routines and they both try and do that initialization or they're checking",
    "start": "1227520",
    "end": "1234320"
  },
  {
    "text": "for nil or whatever they're doing to and they'll sort of step on each other's toes and you can use syn once to protect",
    "start": "1234320",
    "end": "1241200"
  },
  {
    "text": "against things like that what happens is the first one that gets there runs the function and all the rest will wait",
    "start": "1241200",
    "end": "1247200"
  },
  {
    "text": "until that function's completed and then they'll unblock and continue so really",
    "start": "1247200",
    "end": "1253120"
  },
  {
    "text": "useful very practical it's such a great utility but there are some other lower level ones too on there yeah like sync",
    "start": "1253120",
    "end": "1261520"
  },
  {
    "text": "map which I think is the most misused single structure in the entire ghosta",
    "start": "1261520",
    "end": "1268039"
  },
  {
    "text": "Library really yeah because people assume it's just um threat safe hashmap",
    "start": "1268039",
    "end": "1275080"
  },
  {
    "text": "it's not I think it's a a a thread safe hashmap is a map with a",
    "start": "1275080",
    "end": "1281400"
  },
  {
    "text": "motex that's about it the sync map is actually to reduce cash contention so",
    "start": "1281400",
    "end": "1287480"
  },
  {
    "text": "I've seen a lot of people pluming it everywhere they needed a sync map but",
    "start": "1287480",
    "end": "1292799"
  },
  {
    "text": "actually uh what they needed was just a map with some protection on top and syn map is useful if you start noticing that",
    "start": "1292799",
    "end": "1299559"
  },
  {
    "text": "you content caches too much and you have a lot more reads and writes but um I",
    "start": "1299559",
    "end": "1304720"
  },
  {
    "text": "think that's about it and it's even written don't use this or even syn",
    "start": "1304720",
    "end": "1311679"
  },
  {
    "text": "Atomic specifically written don't be smart yeah I think it's the name it's the name it's just like it says sync map",
    "start": "1311679",
    "end": "1318919"
  },
  {
    "text": "so I think it's just not very self descripted right like that's the main reason because in the go do it explicitly says Hey for most of the time",
    "start": "1318919",
    "end": "1326120"
  },
  {
    "text": "you actually need a plain you know go map instead but the name just doesn't suggest that it should have been called",
    "start": "1326120",
    "end": "1332000"
  },
  {
    "text": "maybe syn do like some whatever magic whatever map so for those listening the",
    "start": "1332000",
    "end": "1339520"
  },
  {
    "text": "the guidance there is to basically just use a mutex right to protect access to your Maps right is that what you're",
    "start": "1339520",
    "end": "1345039"
  },
  {
    "text": "saying rob yeah yeah basically that and Until you realize your mtic is the problem don't switch to something else",
    "start": "1345039",
    "end": "1353000"
  },
  {
    "text": "so that's an interesting thing then so Johnny could you just tell us what do you mean by a map and a mutex how does",
    "start": "1353000",
    "end": "1358320"
  },
  {
    "text": "that actually work right so by default your regular good old map right the stuff you created in your pling Jan go",
    "start": "1358320",
    "end": "1365360"
  },
  {
    "text": "code um is not safe for concurrent access so you could have sort of a multiple go routines trying to write to",
    "start": "1365360",
    "end": "1371400"
  },
  {
    "text": "the same um key at the same time that kind of thing for reads it potentially it's it's okay but typically when you",
    "start": "1371400",
    "end": "1377240"
  },
  {
    "text": "want to basically limit the number of gr routines that basically are either writing and or reading from from your",
    "start": "1377240",
    "end": "1383720"
  },
  {
    "text": "map um to just one at a time right so that's where your your mutex short for Mutual exclusion that's where that comes",
    "start": "1383720",
    "end": "1389400"
  },
  {
    "text": "in so basically it guarantees that only one of your G routines is going to be um accessing or mutating something about",
    "start": "1389400",
    "end": "1396120"
  },
  {
    "text": "your map at any one time so what we've been talking about is basically that okay does the sync package is map type",
    "start": "1396120",
    "end": "1402240"
  },
  {
    "text": "does it give this out of the box to basically to Echo Yana is basically that well it's named like it should",
    "start": "1402240",
    "end": "1408840"
  },
  {
    "text": "but it's not like you know you should really be using like a regular map but introduce a mutex to deal with the so",
    "start": "1408840",
    "end": "1415120"
  },
  {
    "text": "that the possibility of contention yeah thank you and so yeah if you want to",
    "start": "1415120",
    "end": "1420760"
  },
  {
    "text": "access this map that Johnny was talking about you lock the mutex then you do your accessing and then you unlock it",
    "start": "1420760",
    "end": "1426440"
  },
  {
    "text": "when you're finished and if other things try and lock that same mutex while",
    "start": "1426440",
    "end": "1431919"
  },
  {
    "text": "you've got it locked they'll then wait for you to unlock so that's they are synchronization points and they they do",
    "start": "1431919",
    "end": "1438760"
  },
  {
    "text": "create contention I mean we're saying that we have this concurrent program but not at these points at these points it's",
    "start": "1438760",
    "end": "1444679"
  },
  {
    "text": "not concurrent you have to all come here and wait for some reason and it can get tricky to think about I I want just to",
    "start": "1444679",
    "end": "1451840"
  },
  {
    "text": "annoy you you should lock the motex defer unlock and then access them map o",
    "start": "1451840",
    "end": "1457919"
  },
  {
    "text": "let's talk about defer Matt You' been wanting to talk about defer forever I love defer I I genuinely am",
    "start": "1457919",
    "end": "1465399"
  },
  {
    "text": "trying to get do an entire episode on defer but I think we just have to do it at the end of the season don't we we can't do",
    "start": "1465399",
    "end": "1472559"
  },
  {
    "text": "it before the end has to be the final episode So Def with defur the",
    "start": "1472559",
    "end": "1479200"
  },
  {
    "text": "interesting bit I think there have been a lot of U um performance improvements in defur um recently it used to be I",
    "start": "1479200",
    "end": "1485480"
  },
  {
    "text": "remember once upon a time using the fur and there was some benchmarks that were floating out there uh in the past",
    "start": "1485480",
    "end": "1490679"
  },
  {
    "text": "basically showing that the fur basically you incurred a penalty a performance penalty right with the with heavy use of the fur that is now less so I don't I",
    "start": "1490679",
    "end": "1498840"
  },
  {
    "text": "don't know if it's completely sort of a a non-issue anymore but the fur is much faster so Rob when you say that hey you",
    "start": "1498840",
    "end": "1505320"
  },
  {
    "text": "should just lock and defer the unlock I'm like yes now it's I would totally jump on that on that bandwagon yeah now",
    "start": "1505320",
    "end": "1512840"
  },
  {
    "text": "is almost impossible to measure the amount of time that it takes if you have a single deferred statement in a",
    "start": "1512840",
    "end": "1518080"
  },
  {
    "text": "function uh and you measure it you're going to get flakes in sometimes you're going to get the the is faster because",
    "start": "1518080",
    "end": "1525440"
  },
  {
    "text": "it's so impossible to measure nowadays isn't it just optimized out though in",
    "start": "1525440",
    "end": "1531279"
  },
  {
    "text": "that case because if it's just a defer in the body of a normal function and you know not in in some kind of loop if it's",
    "start": "1531279",
    "end": "1537919"
  },
  {
    "text": "in a for Loop then of course you'd have to wait for runtime before you can know what's going to be deferred but in a you",
    "start": "1537919",
    "end": "1544880"
  },
  {
    "text": "could look just by Static analysis you could probably look at a function and say well I can see the exit points so",
    "start": "1544880",
    "end": "1550320"
  },
  {
    "text": "I'll go and put all the call the methods whatever they are in those places I don't know if that's what it's doing or",
    "start": "1550320",
    "end": "1556679"
  },
  {
    "text": "if they've optimized the entire mechanism so it wasn't that easy because of panics so you might see the returns",
    "start": "1556679",
    "end": "1563919"
  },
  {
    "text": "but you would also need to check all the statements that can panic because you need to run the first statements on",
    "start": "1563919",
    "end": "1570039"
  },
  {
    "text": "panic and also Loops can be Unwound so you can actually start to deferring like five or six of the statements that",
    "start": "1570039",
    "end": "1576480"
  },
  {
    "text": "you're going to defer anyways so that that there is a lot of dark magic in the compiler and I think this is one of the",
    "start": "1576480",
    "end": "1582240"
  },
  {
    "text": "funniest one to read I just read that if you don't recover uh if you recover there's additional uh performance",
    "start": "1582240",
    "end": "1588640"
  },
  {
    "text": "penalty maybe it's because like they're doing some optimizations um but if you have to like recover then it becomes a",
    "start": "1588640",
    "end": "1595240"
  },
  {
    "text": "more of like a hairy issue maybe I don't know how it works but you",
    "start": "1595240",
    "end": "1601679"
  },
  {
    "text": "know but for readability of course defer wins hands down I mean when you've open",
    "start": "1601679",
    "end": "1606919"
  },
  {
    "text": "a file and you check the error and then you say okay defer file close you've got everything to do with opening and",
    "start": "1606919",
    "end": "1612679"
  },
  {
    "text": "closing files in the same place and it's quite obvious as well to to notice when you forgotten to close things because",
    "start": "1612679",
    "end": "1619120"
  },
  {
    "text": "you're looking in that same area it's right near where you've opened it so I",
    "start": "1619120",
    "end": "1624480"
  },
  {
    "text": "think for readability it just wins hands down doesn't it the typical sort of",
    "start": "1624480",
    "end": "1629880"
  },
  {
    "text": "guidance I hear from you know experienced developers like yourselves is basically hey use defer because",
    "start": "1629880",
    "end": "1636000"
  },
  {
    "text": "readability and because um um you don't want to forget right to leave like a file handle like open or something like",
    "start": "1636000",
    "end": "1642240"
  },
  {
    "text": "that right that's that's just resource you know misuse but I would say sometimes I've it both ways right and",
    "start": "1642240",
    "end": "1648720"
  },
  {
    "text": "yes I have a p towards defur but at the same time depending on the how big the function that I'm working with is the",
    "start": "1648720",
    "end": "1655440"
  },
  {
    "text": "how much I'm doing in there I may choose to if if I open a file I may choose to you know have the two or three extra",
    "start": "1655440",
    "end": "1661640"
  },
  {
    "text": "lines you know that I'm doing after you know I open the file and then explicitly close you know the the file like without",
    "start": "1661640",
    "end": "1667440"
  },
  {
    "text": "using the fur so I think you know it's it's a yes generally speaking you know you do want to use the FB but I I don't",
    "start": "1667440",
    "end": "1673200"
  },
  {
    "text": "think it should be interpreted as gospel that's true it really depends on the job like in some instrumentation libraries",
    "start": "1673200",
    "end": "1679399"
  },
  {
    "text": "we specifically didn't want to you know use defer but if I have like more than like 10 microsc of work to do or",
    "start": "1679399",
    "end": "1687080"
  },
  {
    "text": "whatever like I don't care I would just defer it yeah of course the other benefit is if you defer then it doesn't",
    "start": "1687080",
    "end": "1694320"
  },
  {
    "text": "matter where you exit in your function that's the only thing that's worth saying so if you're opening a few files",
    "start": "1694320",
    "end": "1699399"
  },
  {
    "text": "and you're going to do a few more things a bit more complicated then it definitely helps uh but yeah um I think",
    "start": "1699399",
    "end": "1706679"
  },
  {
    "text": "with everything it can depends probably on each individual case unfortunately but it depends that's our Patron seat",
    "start": "1706679",
    "end": "1713480"
  },
  {
    "text": "for everything yeah yeah it's true though so what about",
    "start": "1713480",
    "end": "1720320"
  },
  {
    "text": "concurrency oh yeah I told you we could do a whole episod of defer yeah no I'm",
    "start": "1720320",
    "end": "1726399"
  },
  {
    "text": "I'm I'm sure of that yeah actually when when you told me about the fur I said that together with",
    "start": "1726399",
    "end": "1733200"
  },
  {
    "text": "the fur we should talk about select H because it's",
    "start": "1733200",
    "end": "1738399"
  },
  {
    "text": "um I think beautiful because um most people uh say that go channels are great",
    "start": "1738399",
    "end": "1744000"
  },
  {
    "text": "but a channel after all is just a que with a mutex on top select on the other end is so hard to implement I think",
    "start": "1744000",
    "end": "1751679"
  },
  {
    "text": "select is the real Beauty there it's funny because it seems really simple",
    "start": "1751679",
    "end": "1756880"
  },
  {
    "text": "from the outside when you just think okay yeah there's a few events that can occur I'm going to put each one as a",
    "start": "1756880",
    "end": "1763120"
  },
  {
    "text": "case it really feels quite simple and it's it's really power ful as well yeah",
    "start": "1763120",
    "end": "1769360"
  },
  {
    "text": "but that's kind of the beauty of go yeah right yeah I think the main concurrency feature in go is the select statement",
    "start": "1769360",
    "end": "1776279"
  },
  {
    "text": "than anything else you know it's like where the magic happens and it looks really simple to you but like that's",
    "start": "1776279",
    "end": "1781880"
  },
  {
    "text": "literally just imposs so complicated to implement I want to dig into that a",
    "start": "1781880",
    "end": "1787760"
  },
  {
    "text": "little bit so the I've I've seen several codes um",
    "start": "1787760",
    "end": "1794519"
  },
  {
    "text": "where you have a select statement and you have a um a number of different cases sometimes you have default",
    "start": "1794519",
    "end": "1800880"
  },
  {
    "text": "sometimes you do not can can can somebody explain why that is and what",
    "start": "1800880",
    "end": "1806120"
  },
  {
    "text": "what is the impact of having a default case in your select statement as opposed to not having one so select is used to",
    "start": "1806120",
    "end": "1813840"
  },
  {
    "text": "receive and send from and to channels and select blocks until one of",
    "start": "1813840",
    "end": "1820640"
  },
  {
    "text": "the case becomes available if you have a default case most like a switch so",
    "start": "1820640",
    "end": "1827279"
  },
  {
    "text": "basically if nothing else is available select will just continue yeah it it takes a while to get used to because",
    "start": "1827279",
    "end": "1833279"
  },
  {
    "text": "I've seen people like doing stuff in a loop and having a default case in there and they were just spinning trying to",
    "start": "1833279",
    "end": "1839840"
  },
  {
    "text": "get some work and then well work is not available let's do another round um while instead should have just blocked",
    "start": "1839840",
    "end": "1846159"
  },
  {
    "text": "and in other cases people checking for context cancellation without a default case and that would just block",
    "start": "1846159",
    "end": "1852080"
  },
  {
    "text": "everything and that was hard to Deb to debug because I mean HTP handlers it doesn't detect the detect that there is",
    "start": "1852080",
    "end": "1858200"
  },
  {
    "text": "a deadlock and stuff like that so yeah default non-blocking no default",
    "start": "1858200",
    "end": "1865399"
  },
  {
    "text": "blocking the best way to block a program from continuing is having an empty",
    "start": "1865399",
    "end": "1871240"
  },
  {
    "text": "select yeah which is useful sometimes sometimes you do want to stop",
    "start": "1871240",
    "end": "1877919"
  },
  {
    "text": "have a program that just runs forever without consuming all the whatever it does in a for Loop because even a for",
    "start": "1877919",
    "end": "1884080"
  },
  {
    "text": "Loop's doing more work than just blocking at a select right yeah and",
    "start": "1884080",
    "end": "1889840"
  },
  {
    "text": "actually what I find beautiful is that if you look in the runtime sources the runtime builds a dependency graph so",
    "start": "1889840",
    "end": "1896399"
  },
  {
    "text": "like when a guou te becomes available to do some work the r time knows okay that's the next one to shutle if you",
    "start": "1896399",
    "end": "1902159"
  },
  {
    "text": "have an empty select that's one way to communicate to the runtime this is never going to be ready and so the runtime",
    "start": "1902159",
    "end": "1908279"
  },
  {
    "text": "doesn't just handle it anymore just and somewhere and it's going to stay",
    "start": "1908279",
    "end": "1914360"
  },
  {
    "text": "there so an empty select is is like a humane way of saying I'm with this",
    "start": "1914360",
    "end": "1920000"
  },
  {
    "text": "program to just stop but it's not really uh you know that my all my gtins have gone to sleep I I literally want",
    "start": "1920000",
    "end": "1926440"
  },
  {
    "text": "everything to just stop you no you just want the current go routine to just hang right like",
    "start": "1926440",
    "end": "1933000"
  },
  {
    "text": "everything else is going to work yeah if you've kicked if you have a main program and you've kicked off five threads and",
    "start": "1933000",
    "end": "1939200"
  },
  {
    "text": "and the threads are going to do all the work continuously in your program I could see a case then for having an",
    "start": "1939200",
    "end": "1944399"
  },
  {
    "text": "empty select on that main thread Maybe although if you think about context and",
    "start": "1944399",
    "end": "1950080"
  },
  {
    "text": "you can you know you can trap the signal from a control C and cancel a context from that and if you do that then you're",
    "start": "1950080",
    "end": "1957360"
  },
  {
    "text": "actually able to tear down gracefully from a command C and then you can also then there's a way to write it so that",
    "start": "1957360",
    "end": "1964120"
  },
  {
    "text": "the second hit the second signal that comes in actually kills the program and",
    "start": "1964120",
    "end": "1969519"
  },
  {
    "text": "so that's quite a nice little pattern things like that yeah just have a channel that is one big that is very",
    "start": "1969519",
    "end": "1976440"
  },
  {
    "text": "nice yeah one a buffer Channel with one space for one",
    "start": "1976440",
    "end": "1982559"
  },
  {
    "text": "[Music] thing this episode is brought to you by",
    "start": "1986920",
    "end": "1993159"
  },
  {
    "text": "ghost CD with Native Integrations for kubernetes and a Helm chart to quickly get started ghost CD is an easy choice",
    "start": "1993159",
    "end": "2000080"
  },
  {
    "text": "for cloud native teams with ghost CD running on kubernetes you define your build workflow and let ghost CD",
    "start": "2000080",
    "end": "2006039"
  },
  {
    "text": "provision and scale build infrastructure on the Fly for you ghost City installs as a kubernetes native application which",
    "start": "2006039",
    "end": "2013240"
  },
  {
    "text": "allows for ease of operations easily upgrade and maintain go C using Helm scale your build infrastructure",
    "start": "2013240",
    "end": "2019360"
  },
  {
    "text": "elastically with a new elastic agent that uses kubernetes conventions to dynamically scale go CD agents go CD",
    "start": "2019360",
    "end": "2026039"
  },
  {
    "text": "also has first class integration with Docker Registries easily composed track",
    "start": "2026039",
    "end": "2031399"
  },
  {
    "text": "and visualize deployments on kubernetes learn more and get started at ghost c.org kubernetes again go.org",
    "start": "2031399",
    "end": "2039400"
  },
  {
    "text": "[Music]",
    "start": "2039400",
    "end": "2042519"
  },
  {
    "text": "[Music] kubernetes you know when you do these",
    "start": "2045140",
    "end": "2051118"
  },
  {
    "text": "signal channels these channels where you don't plan on sending any information only really you want to send a signal of",
    "start": "2051119",
    "end": "2057599"
  },
  {
    "text": "some event like I've finished or something like that what type do you use",
    "start": "2057599",
    "end": "2063800"
  },
  {
    "text": "ooh do you have a favorite cuz I have a it's a loaded question I just want to tell you what my favorite is so we just",
    "start": "2063800",
    "end": "2070000"
  },
  {
    "text": "get through yours for a moment I thought you were going for buffer channels and I was like o that's a loaded question but",
    "start": "2070000",
    "end": "2076320"
  },
  {
    "text": "you you found a better one okay so one of the I guess the idiom",
    "start": "2076320",
    "end": "2081878"
  },
  {
    "text": "idioms I have sort of been floating around is use uh the the empty struck right as sort of the a messaging",
    "start": "2081879",
    "end": "2088200"
  },
  {
    "text": "mechanism because it really occupies no memory um nothing's been allocated basically just signaling right just a",
    "start": "2088200",
    "end": "2095118"
  },
  {
    "text": "pure signal beginners might also be tempted to use uh booleans I've seen um",
    "start": "2095119",
    "end": "2100560"
  },
  {
    "text": "integer types I've seen you know people passing over channels I've you seen errors being passed as a signaling",
    "start": "2100560",
    "end": "2107079"
  },
  {
    "text": "mechanism over channels I'm not going to say that these these mechanisms are wrong um you know sometimes the value",
    "start": "2107079",
    "end": "2112839"
  },
  {
    "text": "that you receive you know from that signal basically you should you treat it as both a signal and a valued for you to",
    "start": "2112839",
    "end": "2117920"
  },
  {
    "text": "do something with and it's going to depend on your case obviously but typically if you want a sort of a zero",
    "start": "2117920",
    "end": "2122960"
  },
  {
    "text": "allocation type of mechanism you're just sending a signal then the empty struct your friend it's also I think Worth to",
    "start": "2122960",
    "end": "2128560"
  },
  {
    "text": "mention that it really depends if this is going to be a public API for example like the signal package or where you",
    "start": "2128560",
    "end": "2133800"
  },
  {
    "text": "will have like different events and so on I think it makes sense to you know have your type um you can have like a",
    "start": "2133800",
    "end": "2139800"
  },
  {
    "text": "type for the you know the signals and you can have maybe more like predefined uh signals uh exported from that package",
    "start": "2139800",
    "end": "2146520"
  },
  {
    "text": "and so on but if it's more of like a self-contained thing it's totally just good to just have an empty",
    "start": "2146520",
    "end": "2153440"
  },
  {
    "text": "struct yeah the nice thing about the empty struct is you you can't put any information in there so it it really",
    "start": "2153440",
    "end": "2160800"
  },
  {
    "text": "just makes that very clear that what it's going to be used for I've seen you a bull used as well and I just never",
    "start": "2160800",
    "end": "2166520"
  },
  {
    "text": "know if it matters if I send true or false down there like if I feel like there's some API now whereas with an",
    "start": "2166520",
    "end": "2173960"
  },
  {
    "text": "empty stroke it can't be anything other than just a signal so I like to use it that it's kind of a signal to",
    "start": "2173960",
    "end": "2179520"
  },
  {
    "text": "programmers too helps with glance ability and sending fals I mean is it",
    "start": "2179520",
    "end": "2185720"
  },
  {
    "text": "the zero value but yeah bullying is dangerous yeah because if you get true",
    "start": "2185720",
    "end": "2192079"
  },
  {
    "text": "there was a signal but if you get false you don't know that's the geekiest bit we've ever",
    "start": "2192079",
    "end": "2199040"
  },
  {
    "text": "had on go time while I've been on I know right and I think we all smart at the same time when knew exactly where you",
    "start": "2199040",
    "end": "2204079"
  },
  {
    "text": "were going with that yeah that's it we need more bits like that I mean most of",
    "start": "2204079",
    "end": "2209960"
  },
  {
    "text": "what I do right now is code review I read way more code than I write and when I see people using like a map of",
    "start": "2209960",
    "end": "2217480"
  },
  {
    "text": "something to Bull I always ask what if you get false but the key is in there",
    "start": "2217480",
    "end": "2224079"
  },
  {
    "text": "same for channels what are you trying to tell your users or like buffer channels of size 50",
    "start": "2224079",
    "end": "2233200"
  },
  {
    "text": "well I mean I can send one or two but when it starts being like 100 I need a",
    "start": "2233200",
    "end": "2238839"
  },
  {
    "text": "comment to tell me why yeah shooting it like a queue probably there's some",
    "start": "2238839",
    "end": "2244839"
  },
  {
    "text": "Performance Tuning or something going on but you're right it just gets hidden and it looks strange and no one will touch",
    "start": "2244839",
    "end": "2251240"
  },
  {
    "text": "it like you'll be scared to go near it cuz you feel like well why is it 50 it's a bit like those numbers on lost when",
    "start": "2251240",
    "end": "2257920"
  },
  {
    "text": "they just didn't know why they were putting the numbers in you just can't stop doing it just in case so let's talk",
    "start": "2257920",
    "end": "2264160"
  },
  {
    "text": "about concurrency as they are used in things like libraries right so there's",
    "start": "2264160",
    "end": "2269319"
  },
  {
    "text": "an idiomatic way of actually um using concurrency in your library basically hiding that completely away from from",
    "start": "2269319",
    "end": "2275800"
  },
  {
    "text": "the user of of your library and there is also guidance that basically says allow the user of your package of your library",
    "start": "2275800",
    "end": "2282400"
  },
  {
    "text": "right to do things to orchestrate concurrency right using your package you can you can do things sort of",
    "start": "2282400",
    "end": "2288400"
  },
  {
    "text": "synchronously like or rather top down right without you know basically having sort of a Crossing that boundary so to",
    "start": "2288400",
    "end": "2294800"
  },
  {
    "text": "speak right so if you're going to do concurrency do it internally right neatly inside of your your package but",
    "start": "2294800",
    "end": "2300640"
  },
  {
    "text": "any other case you should let the user of your package orry concurrency around there and if there is a chance that",
    "start": "2300640",
    "end": "2306599"
  },
  {
    "text": "you're going to be doing things concurrently your library should accept right a channel upon which for it to",
    "start": "2306599",
    "end": "2313040"
  },
  {
    "text": "send back some you know a signal or some result right of having done the concurrent the concurrent work for you",
    "start": "2313040",
    "end": "2319400"
  },
  {
    "text": "so I've seen basically you know advice all across the the board there I'm interested in in your take on that I",
    "start": "2319400",
    "end": "2326560"
  },
  {
    "text": "don't like apis that are asynchronous by definition every time I see a library",
    "start": "2326560",
    "end": "2333839"
  },
  {
    "text": "that for example takes a channel and is going to send results over that channel mhm or even worse you call a function",
    "start": "2333839",
    "end": "2340520"
  },
  {
    "text": "and you get the channel back I am not a big fan of that because I always have to read the code for",
    "start": "2340520",
    "end": "2346880"
  },
  {
    "text": "example if I cancel the context if they take a context and are they going to",
    "start": "2346880",
    "end": "2351960"
  },
  {
    "text": "check for canellation at every sent or do I need to drain the channel will they",
    "start": "2351960",
    "end": "2357040"
  },
  {
    "text": "block if the channel fills up all these kind of questions I prefer when my",
    "start": "2357040",
    "end": "2362079"
  },
  {
    "text": "libraries stay synchronous I I don't like promises I completely agree with this I",
    "start": "2362079",
    "end": "2367560"
  },
  {
    "text": "think everything should be blocking as much as possible and um because it's so easy to orchestrate everything with go",
    "start": "2367560",
    "end": "2373359"
  },
  {
    "text": "um I totally see that like it's more valuable to give that also precise I think control to the user um and some",
    "start": "2373359",
    "end": "2380760"
  },
  {
    "text": "libraries end up actually like having two different apis in the same package they're kind of like you know replicating the same API and it's",
    "start": "2380760",
    "end": "2387920"
  },
  {
    "text": "completely I think just unnecessary because it's easy to you know orchestrate and put thing put things",
    "start": "2387920",
    "end": "2394440"
  },
  {
    "text": "together in go but one of the things that go is like doing not properly is uh there is no easy way to you know in on",
    "start": "2394440",
    "end": "2401119"
  },
  {
    "text": "the go do or everywhere anywhere to you know carefully label things that oh this is going to actually run in a different",
    "start": "2401119",
    "end": "2407640"
  },
  {
    "text": "go routine or whatever for example the HTTP package every Handler is running in a different go routine and you need to",
    "start": "2407640",
    "end": "2413440"
  },
  {
    "text": "maybe uh leave a comment on the godok but you know there's not like it's not really readable some people just kind of",
    "start": "2413440",
    "end": "2420079"
  },
  {
    "text": "miss it and like I think we need a better approach to maybe explain how the",
    "start": "2420079",
    "end": "2425560"
  },
  {
    "text": "underlying you know implementation kind of works from the perspective of",
    "start": "2425560",
    "end": "2430880"
  },
  {
    "text": "concurrency sorry I'm slightly changing the topic a bit no yeah I agree I mean",
    "start": "2430880",
    "end": "2436720"
  },
  {
    "text": "one thing is like when you call a function that might spawn go routines but as long as it collects them before",
    "start": "2436720",
    "end": "2442720"
  },
  {
    "text": "returning that is fine but if that stuff keeps running or it's going to run for example your closure that you pass in in",
    "start": "2442720",
    "end": "2450040"
  },
  {
    "text": "another go routine you might want to know for example the file path W function you might want to know if that",
    "start": "2450040",
    "end": "2456480"
  },
  {
    "text": "thing is going to be run concurrently uh because you might be closur over a variable that you don't want to be",
    "start": "2456480",
    "end": "2461760"
  },
  {
    "text": "touched across threads well it doesn't spoiler it's synchronous but uh yeah it",
    "start": "2461760",
    "end": "2467760"
  },
  {
    "text": "would be nice to have a way to say this is not going to require synchronization yeah in in the recent I",
    "start": "2467760",
    "end": "2474240"
  },
  {
    "text": "mean in the beginnings of go I've seen a lot of people actually like having mxes for some of the stuff that they were",
    "start": "2474240",
    "end": "2480880"
  },
  {
    "text": "trying to you know access from like several like closures with which was",
    "start": "2480880",
    "end": "2487119"
  },
  {
    "text": "actually never the case because you know the library was like given the guarantee that like one function will be you know",
    "start": "2487119",
    "end": "2493119"
  },
  {
    "text": "uh be executed at a time and so on but there's like literally no way to you know explain it other than just putting",
    "start": "2493119",
    "end": "2499200"
  },
  {
    "text": "this information in the go do and it's not very accessible yeah that's an interesting",
    "start": "2499200",
    "end": "2504319"
  },
  {
    "text": "thing it makes me think of something that always occurs to me which is that concurrency all anytime you writing",
    "start": "2504319",
    "end": "2510640"
  },
  {
    "text": "concurrent code it's best to keep it very local keep it very nearby all of it",
    "start": "2510640",
    "end": "2516960"
  },
  {
    "text": "and call out to functions to do other work don't try and do all the work so that the page kind of stretches down and",
    "start": "2516960",
    "end": "2523839"
  },
  {
    "text": "you're left with bits of concurrent code scattered throughout and also things like passing mutex is by pointers and",
    "start": "2523839",
    "end": "2530359"
  },
  {
    "text": "things like this if you can avoid that and just have a mutex in one place and",
    "start": "2530359",
    "end": "2535839"
  },
  {
    "text": "do all the concurrency in one function that's just so much easier to maintain and reason about later that's some",
    "start": "2535839",
    "end": "2542280"
  },
  {
    "text": "experience has kind of taught me that now and I'm I I tend to do that I tend to have all my concurrent code in one",
    "start": "2542280",
    "end": "2549800"
  },
  {
    "text": "place and if it's a weight group and it's doing some work I will call out to a function to go off and do the actual",
    "start": "2549800",
    "end": "2555319"
  },
  {
    "text": "work and you know allows all my concurrent code to be uncluttered from",
    "start": "2555319",
    "end": "2560520"
  },
  {
    "text": "that I couldn't agree more so we've been deliberate right with our you use of the",
    "start": "2560520",
    "end": "2565720"
  },
  {
    "text": "word you know concurrent right so one of the sort of the first things you learn",
    "start": "2565720",
    "end": "2572000"
  },
  {
    "text": "in working with go is that concurrency is not necessarily parallelism right so",
    "start": "2572000",
    "end": "2577040"
  },
  {
    "text": "you're by having concurrent code you allow right for the the system that's going to be running your code to have",
    "start": "2577040",
    "end": "2584400"
  },
  {
    "text": "your code run in parallel but that's not something you can actually control maybe think it was a talk by Rob Pike actually",
    "start": "2584400",
    "end": "2590119"
  },
  {
    "text": "titled as such right concurrency is not parallelism um that sort of shed light on on that whole mechanism so is is",
    "start": "2590119",
    "end": "2597359"
  },
  {
    "text": "there been any case that you've encountered where parallelism wasn't the right thing to do that you basically you",
    "start": "2597359",
    "end": "2603240"
  },
  {
    "text": "wish you you you hadn't you didn't have you know concurrent code uh that ended",
    "start": "2603240",
    "end": "2608480"
  },
  {
    "text": "up being run in parallel like any sort of races that you didn't anticipate or anything like that I had a big headache",
    "start": "2608480",
    "end": "2617079"
  },
  {
    "text": "trying to figure out how to properly do in it because the code that was using was",
    "start": "2617079",
    "end": "2622599"
  },
  {
    "text": "ping goroutines and was blocking until those gortin returned it but during in",
    "start": "2622599",
    "end": "2628119"
  },
  {
    "text": "it time you can't spawn gines I mean you can spawn them but they won't run so",
    "start": "2628119",
    "end": "2635559"
  },
  {
    "text": "that c was deadlocking on Startup wow that is a tough one never heard of that",
    "start": "2635559",
    "end": "2642520"
  },
  {
    "text": "one before that's that's wow that's amazing amazing is one word",
    "start": "2642520",
    "end": "2648960"
  },
  {
    "text": "yes but I mean don't use in it don't if we if we don't use in it we might actually avoid problems like that here",
    "start": "2649680",
    "end": "2656720"
  },
  {
    "text": "here I second yes do not do not use in it I",
    "start": "2656720",
    "end": "2665000"
  },
  {
    "text": "agree go ahead jbd one of the things that I actually um I sometimes need",
    "start": "2665000",
    "end": "2670280"
  },
  {
    "text": "parallelism but not like any concurrent stuff like such as I just want to be",
    "start": "2670280",
    "end": "2675760"
  },
  {
    "text": "able to lock a go routine to a processor and I want to be able to you know access everything without any locks or whatever",
    "start": "2675760",
    "end": "2683319"
  },
  {
    "text": "go doesn't give me that like precise like level of control so that's that's kind of funny like there's a lot of",
    "start": "2683319",
    "end": "2689359"
  },
  {
    "text": "concurrency related features but you know if I'm just like if I just want to distribute some workload or over some",
    "start": "2689359",
    "end": "2696599"
  },
  {
    "text": "processors and I know like the you know the data affinity and everything um I can't really do it because there's",
    "start": "2696599",
    "end": "2704640"
  },
  {
    "text": "absolutely no way to do it so um you know these are different problems parallelism and concurrency and it gives",
    "start": "2704640",
    "end": "2710000"
  },
  {
    "text": "you like different advantages um so there's what think that",
    "start": "2710000",
    "end": "2715119"
  },
  {
    "text": "there's like literally no way to tweak things which is a bit bothering sometimes but I think it doesn't really",
    "start": "2715119",
    "end": "2721640"
  },
  {
    "text": "really represent average user M but you know sometimes you kind of feel like like you're sort of blocked yeah I mean",
    "start": "2721640",
    "end": "2729520"
  },
  {
    "text": "my experience mostly I build a lot of web stuff a lot of web API that kind of",
    "start": "2729520",
    "end": "2734760"
  },
  {
    "text": "thing websites even blogs things like that so I don't need to I'm not going in",
    "start": "2734760",
    "end": "2741680"
  },
  {
    "text": "there saying O I want this go routine on this core and don't you move on to",
    "start": "2741680",
    "end": "2746720"
  },
  {
    "text": "another one you know I'm happy for them to get on with it do what they do what they need to do just to render some bits",
    "start": "2746720",
    "end": "2754000"
  },
  {
    "text": "but yeah so that is always the the case I guess is the those tradeoffs and",
    "start": "2754000",
    "end": "2759119"
  },
  {
    "text": "whether you think they're worth it or not that's really the Judgment call you get to make about the language I suppose if you consider like if we start adding",
    "start": "2759119",
    "end": "2766480"
  },
  {
    "text": "that type of like precise control I think it's going to get super complicated especially if Library",
    "start": "2766480",
    "end": "2772359"
  },
  {
    "text": "started like tweak those like you know arguments and so on so I think I totally can see that it's benefiting the entire",
    "start": "2772359",
    "end": "2778640"
  },
  {
    "text": "Community to maybe you know have more of like a simple uh API service which is",
    "start": "2778640",
    "end": "2784160"
  },
  {
    "text": "just the go routines and like you know some sort of like synchronization mechanisms and like providing nothing",
    "start": "2784160",
    "end": "2789400"
  },
  {
    "text": "else and you know it kind of like also carves the community and like the user base based on the you know functionality",
    "start": "2789400",
    "end": "2796480"
  },
  {
    "text": "you provide so you are not going to maybe pick go for some certain tasks because you know that like you know the",
    "start": "2796480",
    "end": "2802480"
  },
  {
    "text": "functionality is not there if it becomes critical in the future we can reconsider it but maybe that's how things work I",
    "start": "2802480",
    "end": "2809480"
  },
  {
    "text": "don't know I was following very long thread on guts last year I think and at",
    "start": "2809480",
    "end": "2815920"
  },
  {
    "text": "one point someone suggested and I think it was Ian Taylor suggested to use the Unix package to call set Affinity to",
    "start": "2815920",
    "end": "2824200"
  },
  {
    "text": "lock to a specific so I've seen code using that like Unix CS they're not",
    "start": "2824200",
    "end": "2831200"
  },
  {
    "text": "crossplatform as we love go but if you go that deep at a point you might as",
    "start": "2831200",
    "end": "2836720"
  },
  {
    "text": "well do your cull like as you wouldn't see yeah that's what I do o i I like my",
    "start": "2836720",
    "end": "2845880"
  },
  {
    "text": "OS thread and I you know call into either like that said definit or Numa type of stuff unfortunately oh we need",
    "start": "2845880",
    "end": "2853000"
  },
  {
    "text": "to that that needs to be a talk doesn't it we need to see that why on Earth are you doing that and how that's what we",
    "start": "2853000",
    "end": "2858800"
  },
  {
    "text": "want to know my current job requires it because of some benchmarks and so on so this is like literally for fun type of",
    "start": "2858800",
    "end": "2865640"
  },
  {
    "text": "projects like it's not like some Production Service you know or whatever but you know those are those tools are",
    "start": "2865640",
    "end": "2872720"
  },
  {
    "text": "available to you that's true interesting might as right in see I meant that as a",
    "start": "2872720",
    "end": "2881720"
  },
  {
    "text": "joke a joke this my life is a joke man",
    "start": "2881920",
    "end": "2888680"
  },
  {
    "text": "wow I like being on the edge bleeding and",
    "start": "2891720",
    "end": "2899200"
  },
  {
    "text": "all there's another trick that I do which I find really useful I'll try and describe it it probably isn't the",
    "start": "2899200",
    "end": "2904880"
  },
  {
    "text": "easiest thing to Des describe but essentially sometimes you want to do lots of work there's lots of work to get",
    "start": "2904880",
    "end": "2911880"
  },
  {
    "text": "through but you know that you can only or you should only really be doing say five at a time so you're happy for it to",
    "start": "2911880",
    "end": "2917599"
  },
  {
    "text": "run as fast as it can but only do five at a time and one simple way to achieve",
    "start": "2917599",
    "end": "2924000"
  },
  {
    "text": "that and go is to have a buffered Channel and the size of that buffer is the number of go routines you'll allow",
    "start": "2924000",
    "end": "2932200"
  },
  {
    "text": "concurrently and then each go routine tries to put some write something into that channnel and if it succeeds it then",
    "start": "2932200",
    "end": "2939440"
  },
  {
    "text": "unblocks it goes ahead and it does its magic and of course the first five would that that'll be no problem they'll all",
    "start": "2939440",
    "end": "2945520"
  },
  {
    "text": "be able to write into the channel the sixth one that comes along suddenly this Channel's full because they were all",
    "start": "2945520",
    "end": "2951799"
  },
  {
    "text": "filled up by the other go routines so this one then has to wait and he'll block until something is then released",
    "start": "2951799",
    "end": "2958200"
  },
  {
    "text": "from the channel and they get released when the task is finished so it's a bit like the mutex where you lock and then",
    "start": "2958200",
    "end": "2964000"
  },
  {
    "text": "defer the unlock you'd actually write into the channel and then in the defer you read something out of the channel",
    "start": "2964000",
    "end": "2970319"
  },
  {
    "text": "freeing a space for another go routine so that pattern is quite easy I think to",
    "start": "2970319",
    "end": "2976000"
  },
  {
    "text": "reason about if you know the basics of Channel semantics and how to code that in go but actually turns out to be quite",
    "start": "2976000",
    "end": "2982920"
  },
  {
    "text": "powerful and especially since that buffer can be configurable so you could actually even make it a flag to the",
    "start": "2982920",
    "end": "2988240"
  },
  {
    "text": "program to ask how many of these do you want to be able to run concurrently another way to do it of course is just",
    "start": "2988240",
    "end": "2994040"
  },
  {
    "text": "to spin up a certain number number of go routines and just have them drawing from a queue a different way but I find that",
    "start": "2994040",
    "end": "3001040"
  },
  {
    "text": "to be a little bit more confusing because you then have to have in another go routine you have to be then populating the work in some way and that",
    "start": "3001040",
    "end": "3007359"
  },
  {
    "text": "feels a little bit strange but that's one little pattern I've uh found that I quite like I really like that and I",
    "start": "3007359",
    "end": "3014799"
  },
  {
    "text": "really like how go is so simple that you can actually Implement a semaphor in three lines because what you described",
    "start": "3014799",
    "end": "3021440"
  },
  {
    "text": "is a is usually a semaphor and channels are such a higher level ative that they allow you to implement whatever you want",
    "start": "3021440",
    "end": "3028520"
  },
  {
    "text": "I mean even if you need a mutex with a trock method because you want to try",
    "start": "3028520",
    "end": "3033680"
  },
  {
    "text": "acquire and if you can't manage well just retry in a in a bit well you can do",
    "start": "3033680",
    "end": "3038760"
  },
  {
    "text": "that with a Channel with a select and um empty uh default block I mean channels",
    "start": "3038760",
    "end": "3044440"
  },
  {
    "text": "are so much more expressive than just motex is yeah and you remind me as well",
    "start": "3044440",
    "end": "3049720"
  },
  {
    "text": "of the the time do after uh that you can get in the time package which actually",
    "start": "3049720",
    "end": "3054960"
  },
  {
    "text": "returns a channel which sends the time on it after a certain duration so you",
    "start": "3054960",
    "end": "3061280"
  },
  {
    "text": "can use that in select blocks as well to say right we're going to wait for this maybe this go routine to finish if it",
    "start": "3061280",
    "end": "3067240"
  },
  {
    "text": "hasn't finished within one second we'll run a different case we might update the stats or something you know we might",
    "start": "3067240",
    "end": "3073720"
  },
  {
    "text": "present an update to the user so every second they get an update while we're waiting once the CH task then finishes",
    "start": "3073720",
    "end": "3079400"
  },
  {
    "text": "of course the other case will trigger and it'll run go do the other thing and there's also a ticker that you can do as",
    "start": "3079400",
    "end": "3084480"
  },
  {
    "text": "well but time after tends to be quite nice nice way to express timeouts in",
    "start": "3084480",
    "end": "3089640"
  },
  {
    "text": "test code as well if you're waiting for test code to complete it's nice to have their little timeouts in there as well",
    "start": "3089640",
    "end": "3095760"
  },
  {
    "text": "I've had bad experiences with a Time package in general yeah it sounds like a",
    "start": "3095760",
    "end": "3102200"
  },
  {
    "text": "oneman show on [Music] Broadway I've had trouble with time",
    "start": "3102200",
    "end": "3108359"
  },
  {
    "text": "page the time package monologue yeah exactly I I really found myself writing",
    "start": "3108359",
    "end": "3114880"
  },
  {
    "text": "a flow chart on paper to understand what functions what what methods I could call",
    "start": "3114880",
    "end": "3122000"
  },
  {
    "text": "on a timer sorry on a ticker and in which case because like stop or like do",
    "start": "3122000",
    "end": "3128280"
  },
  {
    "text": "do you have to drain after stop and if you do and all all that kind of stuff so it's a nice package but use it carefully",
    "start": "3128280",
    "end": "3136240"
  },
  {
    "text": "Sage advice Sage advice indeed and that leads us neatly to the end of our show",
    "start": "3136240",
    "end": "3143440"
  },
  {
    "text": "today thank you very much to our guests and co-panelists Johnny Boro janab Bogan",
    "start": "3143440",
    "end": "3151640"
  },
  {
    "text": "and Roberto clais nice to hang out with you thanks very much thank you we'll see",
    "start": "3151640",
    "end": "3156920"
  },
  {
    "text": "you next time oh it's not your time to talk now Roberto I'm doing the closing",
    "start": "3156920",
    "end": "3162119"
  },
  {
    "text": "bits we'll see you next time on go [Music]",
    "start": "3162119",
    "end": "3168319"
  },
  {
    "text": "time all right thank you for tuning in to this week's episode of go time if you're not yet hang with us and go for",
    "start": "3168319",
    "end": "3174440"
  },
  {
    "text": "slack we have a chance Channel called go time FM look it up you'll find us hang with us during the live shows connect",
    "start": "3174440",
    "end": "3180799"
  },
  {
    "text": "with other members of the community share stories share codes share coffee recipes whatever it's a lot of fun also",
    "start": "3180799",
    "end": "3187599"
  },
  {
    "text": "we have discussions at changel law.com on every episode head to Chang love.com gotime find this episode and discuss it",
    "start": "3187599",
    "end": "3195520"
  },
  {
    "text": "with the community also thanks to fast the our bandwidth partner RAR for helping us move fast and fix things and",
    "start": "3195520",
    "end": "3201839"
  },
  {
    "text": "Leno for hosting the change law platform our music is produced by the mysterious break master cylinder and if you want to",
    "start": "3201839",
    "end": "3208000"
  },
  {
    "text": "hear more awesome podcasts like this subscribe to our Master feed it's one feed to rule them all plus some extras",
    "start": "3208000",
    "end": "3214280"
  },
  {
    "text": "that only hit the master feed and to Chang law.com slm or search for Chang",
    "start": "3214280",
    "end": "3219359"
  },
  {
    "text": "law master in your podcast client you'll find us thanks for tuning in we'll see you next [Music]",
    "start": "3219359",
    "end": "3232050"
  },
  {
    "text": "week [Music]",
    "start": "3234160",
    "end": "3264079"
  },
  {
    "text": "TR [Music]",
    "start": "3264079",
    "end": "3273969"
  },
  {
    "text": "oh",
    "start": "3274400",
    "end": "3277400"
  }
]