[
  {
    "text": "there's a a very straightforward way of cutting down the latency like the tail",
    "start": "120",
    "end": "5879"
  },
  {
    "text": "latency in your requests so if you have a request let's say that you you have a request that you send into a server and",
    "start": "5879",
    "end": "11719"
  },
  {
    "text": "it takes five milliseconds 99% of the time but then there's 1% of the time",
    "start": "11719",
    "end": "17480"
  },
  {
    "text": "that it takes one minute which is not good so what you could do is make that",
    "start": "17480",
    "end": "22560"
  },
  {
    "text": "call multiple times and you're going to do it with with cancellation so you're going to do context with cancel of your",
    "start": "22560",
    "end": "28840"
  },
  {
    "text": "original context and then what you're going to do is you're going to use the same context for all of those calls and",
    "start": "28840",
    "end": "34200"
  },
  {
    "text": "have defer cancel at the top of your function and then as soon as any of",
    "start": "34200",
    "end": "39360"
  },
  {
    "text": "those values returns and you return from that function the rest will be cancelled and that's going to take down your 99th",
    "start": "39360",
    "end": "45800"
  },
  {
    "text": "per from like one minute down to five",
    "start": "45800",
    "end": "50559"
  },
  {
    "text": "milliseconds B with for change log is provided by fastly learn more at fastly.com we move fast and fix things",
    "start": "50879",
    "end": "58440"
  },
  {
    "text": "here at change law because of Rob bar check them out at roar.com and we're hosted on Leno Cloud servers at the",
    "start": "58440",
    "end": "64760"
  },
  {
    "text": "lin.com changelog what up friends you might not",
    "start": "64760",
    "end": "70759"
  },
  {
    "text": "be aware but we've been partnering with Leno since 2016 that's a long time ago way back when we first launched our open",
    "start": "70759",
    "end": "77960"
  },
  {
    "text": "source platform that you now see at changel law.com lenoe was there to help us and we are so grateful fast forward",
    "start": "77960",
    "end": "85960"
  },
  {
    "text": "several years now and lenoe is still in our corner behind the scenes helping us",
    "start": "85960",
    "end": "91200"
  },
  {
    "text": "to ensure we're running on the very best cloud infrastructure out there we trust linode they keep it fast and they keep",
    "start": "91200",
    "end": "97720"
  },
  {
    "text": "it simple check them out at lin.com [Music]",
    "start": "97720",
    "end": "105359"
  },
  {
    "text": "changelog let's do it it's go time what's up welcome to go time your source",
    "start": "113719",
    "end": "119399"
  },
  {
    "text": "for diversity discussions from around Theo Community today Matt ryer and janab doen are joined by Frances kooy and",
    "start": "119399",
    "end": "126000"
  },
  {
    "text": "Isabelle RM to discuss Go's context package all right here we",
    "start": "126000",
    "end": "132119"
  },
  {
    "text": "[Music]",
    "start": "132880",
    "end": "138380"
  },
  {
    "text": "go hello and welcome to go time I'm Matt Rya today we're talking about the",
    "start": "139000",
    "end": "145360"
  },
  {
    "text": "context package we're going to find out what it is how we should use it how we",
    "start": "145360",
    "end": "151120"
  },
  {
    "text": "shouldn't use it and on this journey today we're joined by Jana Bogen hello",
    "start": "151120",
    "end": "157280"
  },
  {
    "text": "Yana hey how are you good thanks welcome back have you had a good week so far",
    "start": "157280",
    "end": "162879"
  },
  {
    "text": "yeah it's kind of slow here I'm not sure what's going on there like it's just you know we're in the same cycle every day",
    "start": "162879",
    "end": "169280"
  },
  {
    "text": "so I'm not sure if it's good or bad yeah I know what you mean yeah it everything sort of starts to blend together doesn't",
    "start": "169280",
    "end": "176159"
  },
  {
    "text": "it yeah don't worry though this episode will uh one way or another change that",
    "start": "176159",
    "end": "182000"
  },
  {
    "text": "for you we're joined by one of our favorite Gophers it's Frances campoy",
    "start": "182000",
    "end": "188560"
  },
  {
    "text": "hello Frances welcome back hey how's it going good are you having a nice week",
    "start": "188560",
    "end": "194920"
  },
  {
    "text": "this this far yeah I mean you know what Jana was saying uh it's just all all day",
    "start": "194920",
    "end": "201640"
  },
  {
    "text": "the same day but excited to be talking to friends and stuff it changes my life a little bit excited that's it if we can",
    "start": "201640",
    "end": "208879"
  },
  {
    "text": "just change it little bit for for better or just so it's different just different",
    "start": "208879",
    "end": "215000"
  },
  {
    "text": "yeah well we're also joined by a very special guest Isabelle redelmeier hello Isabelle hello hello glad to be here",
    "start": "215000",
    "end": "222239"
  },
  {
    "text": "we're very pleased to have you how's how's your week so far I know it's only Tuesday but how is your week so far",
    "start": "222239",
    "end": "228159"
  },
  {
    "text": "going pretty well week three of new job so it's a different kind of Rhythm from",
    "start": "228159",
    "end": "235599"
  },
  {
    "text": "the job search one yeah that's cool or the Visa weight one one also oh no thank",
    "start": "235599",
    "end": "242000"
  },
  {
    "text": "you well we're going to talk today about context and I had a quick look in the docs for the context package it says",
    "start": "242000",
    "end": "249879"
  },
  {
    "text": "that package context defines the context type which carries deadlines cancellation signals and other request",
    "start": "249879",
    "end": "257359"
  },
  {
    "text": "scoped values across API boundaries and between processes emphasis mine who",
    "start": "257359",
    "end": "265440"
  },
  {
    "text": "wants to have a go explaining what that means I can talk a bit about how the latter part makes things exciting for",
    "start": "265440",
    "end": "272639"
  },
  {
    "text": "things like open Telemetry where you really have like a lot of use case for distributed context distributed as in",
    "start": "272639",
    "end": "279120"
  },
  {
    "text": "Cross process or over the wire or we can dig into that after yeah actually that",
    "start": "279120",
    "end": "284560"
  },
  {
    "text": "sound that does sound amazing I want to hear about that because it does mention API boundaries and between processes but",
    "start": "284560",
    "end": "290680"
  },
  {
    "text": "I've only really used context within a single program right do we want to start",
    "start": "290680",
    "end": "296880"
  },
  {
    "text": "with the within process one or cross process might we'll start with the",
    "start": "296880",
    "end": "302720"
  },
  {
    "text": "simpler yeah yeah I mean imagine yeah so if there's any beginners out there uh",
    "start": "302720",
    "end": "308880"
  },
  {
    "text": "that haven't perhaps maybe they've seen this and don't really know what to do maybe all they do is just pass context",
    "start": "308880",
    "end": "314840"
  },
  {
    "text": "to do every time you know good on them it works yeah it works yeah much",
    "start": "314840",
    "end": "321919"
  },
  {
    "text": "better than nil yes yes the docs actually say you should never pass nil we can talk about",
    "start": "321919",
    "end": "327199"
  },
  {
    "text": "why that would be too so it's really for it's a way to kind of cancel things",
    "start": "327199",
    "end": "333039"
  },
  {
    "text": "indicate this process is going to stop for some reason isn't it like in an HTTP world every request has a context and",
    "start": "333039",
    "end": "341360"
  },
  {
    "text": "since it runs in its own go routine and of course it can spin up other go routines to then go and do work if the",
    "start": "341360",
    "end": "347319"
  },
  {
    "text": "user cancels that request it might be nice in some cases to abort the work and",
    "start": "347319",
    "end": "352440"
  },
  {
    "text": "have a little bit of a saving and you can also use it to pass values around as well can't you request scoped value",
    "start": "352440",
    "end": "360440"
  },
  {
    "text": "what's that for that's a good question so I actually like the context package for cancellation stuff I think that's",
    "start": "360440",
    "end": "367639"
  },
  {
    "text": "the main usage that I would recommend for inside of your own process right like passing data inside of context I",
    "start": "367639",
    "end": "376280"
  },
  {
    "text": "would think very very very much before of starting doing it because otherwise",
    "start": "376280",
    "end": "381880"
  },
  {
    "text": "what you end up is just having a bag of stuff and uh it can be pretty bad pretty",
    "start": "381880",
    "end": "388880"
  },
  {
    "text": "bad idiom to follow but for cancellation yeah the cancellation uh the the way I normally explain why context makes sense",
    "start": "388880",
    "end": "396919"
  },
  {
    "text": "is that yeah like imagine that you have something very expensive to do and after",
    "start": "396919",
    "end": "402160"
  },
  {
    "text": "one second out of one hour of computation the user decides that they don't care about this anymore or they",
    "start": "402160",
    "end": "408080"
  },
  {
    "text": "just crash right that you don't want to do that whole hour of process for no reason that's why canellation makes",
    "start": "408080",
    "end": "414160"
  },
  {
    "text": "sense and the way you implement it is actually interesting because like the idea is that you could technically keep",
    "start": "414160",
    "end": "421560"
  },
  {
    "text": "this data somewhere else and many other languages do that so for instance for Java you have thread locals go doesn't",
    "start": "421560",
    "end": "428400"
  },
  {
    "text": "expose thread locals which means that you actually need to make that explicit",
    "start": "428400",
    "end": "434400"
  },
  {
    "text": "but making it explicit and passing this context around like all the data is not",
    "start": "434400",
    "end": "441120"
  },
  {
    "text": "an easy thing to do like you would need to keep on adding and adding more parameters to your functions as you go",
    "start": "441120",
    "end": "446280"
  },
  {
    "text": "so context kind of solves that and it also provides the the the the possibility of passing things that you",
    "start": "446280",
    "end": "452120"
  },
  {
    "text": "don't even know you're passing so as a function if I receive a context maybe in",
    "start": "452120",
    "end": "457199"
  },
  {
    "text": "that context there's some value that one of the functions I'm going to be calling will retrieve I don't even know to know",
    "start": "457199",
    "end": "463599"
  },
  {
    "text": "I don't even need to know about that so it's like those sides like cancellation and then kind of like generic way of",
    "start": "463599",
    "end": "471639"
  },
  {
    "text": "passing data that you don't care about can we can we say in a way that in",
    "start": "471639",
    "end": "477199"
  },
  {
    "text": "the critical path of a user requ Quest that you are going through a lot of different things right it could be a lot",
    "start": "477199",
    "end": "483120"
  },
  {
    "text": "of like microservices or in the same microservice you may be bouncing between",
    "start": "483120",
    "end": "488159"
  },
  {
    "text": "different go routines uh you know some work might be doing in getting done in one go routine and some of the other one",
    "start": "488159",
    "end": "494400"
  },
  {
    "text": "is just getting done so in order to coordinate all that work we sometimes need to pass some values and as well as",
    "start": "494400",
    "end": "502000"
  },
  {
    "text": "need to single some you know life cycle related events such as cancellation",
    "start": "502000",
    "end": "507919"
  },
  {
    "text": "because uh let's say that like you want to you know if the user cancelled some",
    "start": "507919",
    "end": "513000"
  },
  {
    "text": "task all the like you know lower end you know Services might have received some",
    "start": "513000",
    "end": "520080"
  },
  {
    "text": "incoming requests to like you know do some work about it but you know we already know at the higher level service",
    "start": "520080",
    "end": "528160"
  },
  {
    "text": "that it's just not required anymore so you know you may want to propagate that signal to cancel all the work it also",
    "start": "528160",
    "end": "534320"
  },
  {
    "text": "applies within the same process that like you know you're sharing some work between among on multiple goroutines for",
    "start": "534320",
    "end": "540640"
  },
  {
    "text": "example and then you want to just cancel all that work because we already received some additional signal that",
    "start": "540640",
    "end": "546680"
  },
  {
    "text": "like that work is not required anymore so it gives us this like good unified way of you know passing around some data",
    "start": "546680",
    "end": "553560"
  },
  {
    "text": "and passing around some like life cycle signals inside the same process and as well as like it gives us a foundation to",
    "start": "553560",
    "end": "560760"
  },
  {
    "text": "do this when we are going to you know other processes other services very much",
    "start": "560760",
    "end": "567000"
  },
  {
    "text": "so yeah I was able to sum nice your thoughts yeah I'm actually curious like",
    "start": "567000",
    "end": "572839"
  },
  {
    "text": "there there are the two things right like it's cancellation so making sure that like a necessary work is not done",
    "start": "572839",
    "end": "579640"
  },
  {
    "text": "and then the other thing is passing values and they're very different right",
    "start": "579640",
    "end": "584800"
  },
  {
    "text": "like and and for me the weird thing is that they are the same thing like they're the context and I feel like they",
    "start": "584800",
    "end": "591839"
  },
  {
    "text": "could have been completely different things right because the way we pass values like it's useful because for",
    "start": "591839",
    "end": "596920"
  },
  {
    "text": "instance like the the traditional example like well when you're logging you might want to log like a request ID",
    "start": "596920",
    "end": "602760"
  },
  {
    "text": "and no matter what function is logging it like that request ID should always be the same because that that's what makes sense right like that way you can see",
    "start": "602760",
    "end": "608800"
  },
  {
    "text": "all the lcks for these request but uh that is completely unrelated to the fact that maybe that code routine like that",
    "start": "608800",
    "end": "615720"
  },
  {
    "text": "request should be cancelled so I feel like we put them both together just because you know like once you have",
    "start": "615720",
    "end": "621839"
  },
  {
    "text": "cancellation and everything and you define an interface for it you could also put values in there so why not but",
    "start": "621839",
    "end": "629600"
  },
  {
    "text": "also it could have been completely different things and I think that it's it's important to to think about context in that way and the fact that it does",
    "start": "629600",
    "end": "636440"
  },
  {
    "text": "two things that are completely unrelated and that you can use one without even ever understanding or looking at the",
    "start": "636440",
    "end": "643279"
  },
  {
    "text": "other I find deadline on context should be kind of an interesting Bridge since on the one hand it has a lot of",
    "start": "643279",
    "end": "650000"
  },
  {
    "text": "functionality that is similar to more general purpose cancellation on the other hand it is kind of this special",
    "start": "650000",
    "end": "656320"
  },
  {
    "text": "value where you can check the the ACT deadline on a context last I checked",
    "start": "656320",
    "end": "662680"
  },
  {
    "text": "yeah true so it's kind of like metadata that you like it's it's data around the cancellation so it's technically you're",
    "start": "662680",
    "end": "669320"
  },
  {
    "text": "also passing values but that value you use it for cancellation so yeah that's kind of in between that's true and for",
    "start": "669320",
    "end": "676200"
  },
  {
    "text": "anyone listening who isn't familiar with how it works under the hood go will respect the deadline so if you have",
    "start": "676200",
    "end": "681560"
  },
  {
    "text": "something that goes over the deadline it'll get canceled automatically you don't need to manage that yourself well",
    "start": "681560",
    "end": "687880"
  },
  {
    "text": "assuming you're whatever code you're using handles it so for example SQL will do it for you yeah you're right so it's",
    "start": "687880",
    "end": "695560"
  },
  {
    "text": "interesting that this is uh something that's quite unusual in go because uh it",
    "start": "695560",
    "end": "700639"
  },
  {
    "text": "is serving multiple kind of purposes isn't it and you probably could actually",
    "start": "700639",
    "end": "706079"
  },
  {
    "text": "just by having values you could probably have a channel in there which you could close and stuff but having it as part of",
    "start": "706079",
    "end": "711920"
  },
  {
    "text": "the sort of official API does solve quite a nice broad range of problems for people and I always think like if if",
    "start": "711920",
    "end": "719079"
  },
  {
    "text": "you're not sure what to do with the context if you're working on some codebase you really just sort of pass it",
    "start": "719079",
    "end": "724920"
  },
  {
    "text": "around if there's anything you're going to call that takes a context give it the one that you got if you don't care",
    "start": "724920",
    "end": "731000"
  },
  {
    "text": "anything else if you don't want to manage the life cycle or in any way but sometimes it is useful to say you're",
    "start": "731000",
    "end": "738000"
  },
  {
    "text": "going to make a third-party API call you might decide I I'm only going to wait",
    "start": "738000",
    "end": "743160"
  },
  {
    "text": "one second and then if not I'm going to fall back and use some cached version or something like that and then you can",
    "start": "743160",
    "end": "748959"
  },
  {
    "text": "create a context from another context so does that create a kind of tree structure then yeah totally that's",
    "start": "748959",
    "end": "756079"
  },
  {
    "text": "that's kind of the idea right like if I if for instance like when I tell you to do something and then you go and ask",
    "start": "756079",
    "end": "762560"
  },
  {
    "text": "three other people to do something else because you need those things so you can do the thing I ask you to do once I say",
    "start": "762560",
    "end": "770199"
  },
  {
    "text": "oh I don't care about it anymore you should also let others know that it is not necessary to continue and like",
    "start": "770199",
    "end": "776320"
  },
  {
    "text": "cancellation like creating those context it it provides that the interesting",
    "start": "776320",
    "end": "781600"
  },
  {
    "text": "thing is that implementation wise that's also how it works right like what you're doing is that when you do with deadline",
    "start": "781600",
    "end": "787760"
  },
  {
    "text": "or with timeout or whatever what you're doing is literally creating a new context object that refers to its parent",
    "start": "787760",
    "end": "795079"
  },
  {
    "text": "context So you you're literally creating a tree yeah that goes for any value you",
    "start": "795079",
    "end": "800440"
  },
  {
    "text": "add to the context also so when you access values then and this kind of",
    "start": "800440",
    "end": "806360"
  },
  {
    "text": "points out I think one of the dangers of cont text when you access a value from",
    "start": "806360",
    "end": "811440"
  },
  {
    "text": "that you basically pass in a key which is of type interface so that means it",
    "start": "811440",
    "end": "817040"
  },
  {
    "text": "can be anything anything can be a a key and you get back an interface because of",
    "start": "817040",
    "end": "822560"
  },
  {
    "text": "course it is kind of generic in some way and this is this is what generics in go",
    "start": "822560",
    "end": "827600"
  },
  {
    "text": "kind of looks like for now and you get a second bulling don't you of the whether",
    "start": "827600",
    "end": "833440"
  },
  {
    "text": "the the value was there or not is that right and so what's the danger there what do we lose by having that way of",
    "start": "833440",
    "end": "841279"
  },
  {
    "text": "accessing and storing information you need to handle the type checks and",
    "start": "841279",
    "end": "846600"
  },
  {
    "text": "existence yourself um and you also need to make sure that you don't have key collisions so there's an idiom basically",
    "start": "846600",
    "end": "853839"
  },
  {
    "text": "around having dedicated structs for each of the keys that you care about so that you don't for example use a key called",
    "start": "853839",
    "end": "860880"
  },
  {
    "text": "like I don't know a string called key and then have collisions with everyone else for example yeah that's that's",
    "start": "860880",
    "end": "867680"
  },
  {
    "text": "actually a very good point it's something that not not that many people actually use but that's something that",
    "start": "867680",
    "end": "873040"
  },
  {
    "text": "like when you want so if you're creating a package and you're going to be storing data that you know that you're going to",
    "start": "873040",
    "end": "878880"
  },
  {
    "text": "be retrieving later instead of choosing a string or an integer no matter how complicated the string could be right",
    "start": "878880",
    "end": "885160"
  },
  {
    "text": "like you could find a like super fancy string that you know no one else will repeat or I guess you could also like",
    "start": "885160",
    "end": "891040"
  },
  {
    "text": "copyright it if you want to but uh the the important thing is that instead you could just use a even an empty struct",
    "start": "891040",
    "end": "899279"
  },
  {
    "text": "and an empty struct with a type that is not exported because when you're comparing two different interfaces the",
    "start": "899279",
    "end": "905560"
  },
  {
    "text": "first thing you do before you compare anything else is compare whether the type is exactly the same if it's not the same then it's different it's different",
    "start": "905560",
    "end": "912560"
  },
  {
    "text": "values so then you can just like have like normally what I do is I type key empty struct and key in lowercase that",
    "start": "912560",
    "end": "920160"
  },
  {
    "text": "way you you make sure you have ever any conflicts and there's an example of this",
    "start": "920160",
    "end": "925880"
  },
  {
    "text": "um in the god do by the way if you take a look like with value it's kind of like harder to explain this concept you know",
    "start": "925880",
    "end": "933000"
  },
  {
    "text": "on a podcast but there's an example and that's almost like you know how you use canonical how you create like canonical",
    "start": "933000",
    "end": "939720"
  },
  {
    "text": "key types so there's no collusion like you create your own key type and use that and do you would you recommend",
    "start": "939720",
    "end": "946160"
  },
  {
    "text": "exporting those keys so that people can access the values or is there a better way no",
    "start": "946160",
    "end": "952440"
  },
  {
    "text": "never because if you export it people will mess with it like the the whole",
    "start": "952440",
    "end": "958000"
  },
  {
    "text": "idea is like context can contain so much stuff that if you allow people to start",
    "start": "958000",
    "end": "965079"
  },
  {
    "text": "using it then you're gonna start getting really weird designs right like you could do something that uh it could say",
    "start": "965079",
    "end": "972839"
  },
  {
    "text": "oh you know like this random package is gonna start depending on an other package having introduced the value and",
    "start": "972839",
    "end": "979319"
  },
  {
    "text": "things like this and now you have like these weird dependencies across packages that is not code dependencies it's it's",
    "start": "979319",
    "end": "986000"
  },
  {
    "text": "not in the code there's not Imports or anything it just like it happens to",
    "start": "986000",
    "end": "991079"
  },
  {
    "text": "expect things and that that is just like you would end up being like dependency",
    "start": "991079",
    "end": "996160"
  },
  {
    "text": "held but in a slightly different way all inside of the context so I would say that instead of doing that like for",
    "start": "996160",
    "end": "1002920"
  },
  {
    "text": "logging for instance like I recently created this little login package and what it does is like it actually so for",
    "start": "1002920",
    "end": "1010279"
  },
  {
    "text": "an HTTP request it will get the context from the request and do uh something",
    "start": "1010279",
    "end": "1016120"
  },
  {
    "text": "like log logger do with I don't even know from Context or something like that",
    "start": "1016120",
    "end": "1021319"
  },
  {
    "text": "and it will put in the context the key that is private and no one else can find",
    "start": "1021319",
    "end": "1027918"
  },
  {
    "text": "with the value of my logger and then when you want to retrieve it somewhere else you do it from Context and you pass",
    "start": "1027919",
    "end": "1033959"
  },
  {
    "text": "the context and that will give you a context with the right type so that way you avoid collision and also you avoid",
    "start": "1033959",
    "end": "1040160"
  },
  {
    "text": "the having to do that conversion like the type uh conversion from mty",
    "start": "1040160",
    "end": "1045280"
  },
  {
    "text": "interface to whatever type you're actually using totally and then the from methods gener or functions generally",
    "start": "1045280",
    "end": "1052679"
  },
  {
    "text": "it's nice to either return the Boolean or return some sort of nil uh empty nil",
    "start": "1052679",
    "end": "1058600"
  },
  {
    "text": "type that still behaves the same way so at least users aren't going to have nil",
    "start": "1058600",
    "end": "1064120"
  },
  {
    "text": "errors uh from your value yeah so for the example of the logger right like when you do from",
    "start": "1064120",
    "end": "1070600"
  },
  {
    "text": "Context if the context that you pass didn't have any logger in it it just returned default logger that logs into",
    "start": "1070600",
    "end": "1076159"
  },
  {
    "text": "standard output right yeah and so if a question so in in this world Frances that you made earlier where I'm",
    "start": "1076159",
    "end": "1082960"
  },
  {
    "text": "somehow a medal manager in an organization where you're the boss and I've got people and you know the",
    "start": "1082960",
    "end": "1089039"
  },
  {
    "text": "contexts that have been created from mine if one of those that asked for a value and they don't know what it is",
    "start": "1089039",
    "end": "1095760"
  },
  {
    "text": "they don't recognize the key because it's private to something else what happens then how does the context work",
    "start": "1095760",
    "end": "1101679"
  },
  {
    "text": "oh so if you try to get a value from a context yeah if in child it's not in the",
    "start": "1101679",
    "end": "1107280"
  },
  {
    "text": "child context oh so yeah you you will go up the tree right like this goes for",
    "start": "1107280",
    "end": "1113240"
  },
  {
    "text": "basically every single feature of context like that lines and canellation and values what you're going to do is if",
    "start": "1113240",
    "end": "1120960"
  },
  {
    "text": "it has not been changed by your context if you have not kind of redefined it because you could redefine you could",
    "start": "1120960",
    "end": "1126960"
  },
  {
    "text": "hide the previous value for a key but if you have not done that what you're gonna do is you're going to check on the one",
    "start": "1126960",
    "end": "1134080"
  },
  {
    "text": "you have and then if that doesn't contain the value then you're going to go you're gonna basically call get value",
    "start": "1134080",
    "end": "1141080"
  },
  {
    "text": "like the value function on its parent and so on until you get to the empty",
    "start": "1141080",
    "end": "1146400"
  },
  {
    "text": "context which is the one you get from background or the to-do context and which do not have parents and then at",
    "start": "1146400",
    "end": "1152320"
  },
  {
    "text": "that point you stop and you say nope could not find it oh just that that happens seamlessly for you yeah you",
    "start": "1152320",
    "end": "1158159"
  },
  {
    "text": "don't need to think actively about the tree yeah so that's why like some people will think like it feels like you're",
    "start": "1158159",
    "end": "1163600"
  },
  {
    "text": "using a map when you get a value but you're not you're actually using a linked list H that is really cool when",
    "start": "1163600",
    "end": "1170080"
  },
  {
    "text": "you think about cancellation as well in this sort of tree you know you could because you could imagine kicking off a",
    "start": "1170080",
    "end": "1176520"
  },
  {
    "text": "few subtasks to go and do some work and you you might cancel just one of those",
    "start": "1176520",
    "end": "1182400"
  },
  {
    "text": "subtasks or it might have its own deadline if it then has created others they will also get cancelled so that",
    "start": "1182400",
    "end": "1189000"
  },
  {
    "text": "cancellation that's how it sort of propagates down isn't it exactly and similar thing with deadlines where if",
    "start": "1189000",
    "end": "1196520"
  },
  {
    "text": "you have let's say a job that has a bunch of Serial tasks so you want the whole thing to take 1 minute but you",
    "start": "1196520",
    "end": "1203600"
  },
  {
    "text": "want each task to take no longer than 5 seconds then you can say Okay each of",
    "start": "1203600",
    "end": "1209720"
  },
  {
    "text": "these gets its own deadline that is The Sooner of 5 seconds from now or the end",
    "start": "1209720",
    "end": "1216400"
  },
  {
    "text": "of that initial one minute deadline that's really cool and you do that by using those functions on the",
    "start": "1216400",
    "end": "1223480"
  },
  {
    "text": "context package don't you and you pass in the parent one every time that's very",
    "start": "1223480",
    "end": "1228559"
  },
  {
    "text": "cool yeah the cool thing about it is like so I actually gave a a talk long time ago I don't know if you remember",
    "start": "1228559",
    "end": "1234640"
  },
  {
    "text": "you were there Matt I do remember in Italy goab and I decided to do a Kino",
    "start": "1234640",
    "end": "1240880"
  },
  {
    "text": "with life coding which is a bad idea now now I know but so I decided to give a talk on",
    "start": "1240880",
    "end": "1248679"
  },
  {
    "text": "reimplementing the context package just because there's one thing that is really",
    "start": "1248679",
    "end": "1254240"
  },
  {
    "text": "really cool which is how when you cancel a context how all the children contexts",
    "start": "1254240",
    "end": "1259760"
  },
  {
    "text": "get also cancelled automatically and it's like this very cute way of like managing good routines and channels and",
    "start": "1259760",
    "end": "1266640"
  },
  {
    "text": "like the way it works is like very satisfying as a gopher like when you see it you're like oh yeah this is",
    "start": "1266640",
    "end": "1272360"
  },
  {
    "text": "definitely idiomatic go also not something that I can explain in a in a",
    "start": "1272360",
    "end": "1278240"
  },
  {
    "text": "podcast so you know go read the code I guess well we'll put a link to that talk",
    "start": "1278240",
    "end": "1285520"
  },
  {
    "text": "in the show notes because yeah you you basically implemented the context package just as a talk live it was very",
    "start": "1285520",
    "end": "1293400"
  },
  {
    "text": "uh very impressive no no it was bad it was a little bit of a failure but",
    "start": "1293400",
    "end": "1299760"
  },
  {
    "text": "I did then uh on just of funk I made a video on it that I actually like had the time to edit down to remove all the",
    "start": "1299760",
    "end": "1305720"
  },
  {
    "text": "things where I failed so it looks much better so if you add a link to that one instead okay fine yeah we'll do the good",
    "start": "1305720",
    "end": "1311559"
  },
  {
    "text": "one the original packages code also is quite readable well documented yeah yeah",
    "start": "1311559",
    "end": "1317559"
  },
  {
    "text": "and it's in the standard Library isn't it was that from go [Music] 115 it's been something 1.6 five or six",
    "start": "1317559",
    "end": "1325760"
  },
  {
    "text": "or something I think yeah five or six yeah yeah I think six the only reason that I can tell it was six because um we",
    "start": "1325760",
    "end": "1334000"
  },
  {
    "text": "had app engine runtime supporting 1.6 for years even after like 1.6 is just",
    "start": "1334000",
    "end": "1340159"
  },
  {
    "text": "went away because of this context package related stuff related to jrpc which is like another dependency hell",
    "start": "1340159",
    "end": "1346159"
  },
  {
    "text": "type of situation but I think it was 1.6 yeah before that it was in X context",
    "start": "1346159",
    "end": "1353880"
  },
  {
    "text": "for a while yeah and before that was internally a Google yeah for many years",
    "start": "1353880",
    "end": "1361120"
  },
  {
    "text": "it was actually part of like networking package or something I think it was like internal networking package and they",
    "start": "1361120",
    "end": "1368880"
  },
  {
    "text": "changed the implementation completely before open sourcing it but they left",
    "start": "1368880",
    "end": "1374080"
  },
  {
    "text": "the API exactly the same and and I think that is like a clear like proof of the",
    "start": "1374080",
    "end": "1380200"
  },
  {
    "text": "power of interfaces of the fact that we went from having one thing that does everything to having a bunch of",
    "start": "1380200",
    "end": "1386039"
  },
  {
    "text": "different context that are like they create this cool tree uh before it was not a tree but from the point of view of",
    "start": "1386039",
    "end": "1392720"
  },
  {
    "text": "the user you don't care so they were able to rewrite the whole thing make it much smaller and efficient without Ever",
    "start": "1392720",
    "end": "1399559"
  },
  {
    "text": "Changing any interface it's good Testament to the interface design itself as well isn't it yeah definitely so if",
    "start": "1399559",
    "end": "1406600"
  },
  {
    "text": "you're writing code that it's going to take a long time to do something let's say you're walking the file system so",
    "start": "1406600",
    "end": "1412559"
  },
  {
    "text": "you're using file path walk how would you be sensitive to that context either",
    "start": "1412559",
    "end": "1419159"
  },
  {
    "text": "passing a deadline or being canceled at some point the first thing is you should get",
    "start": "1419159",
    "end": "1425960"
  },
  {
    "text": "the context so like if you're getting it as you know like from a function call and you have the first parameter it",
    "start": "1425960",
    "end": "1432480"
  },
  {
    "text": "should always be the first barometer for no reason really other than that's how we do but yeah you should receive it and",
    "start": "1432480",
    "end": "1439039"
  },
  {
    "text": "do something with it right if you are not receiving it doesn't mean that there's no context it might be that you",
    "start": "1439039",
    "end": "1444640"
  },
  {
    "text": "are missing it out right and that's something that lots of people Miss is the fact that when you have an HTTP hler",
    "start": "1444640",
    "end": "1453679"
  },
  {
    "text": "there's a context in there you don't see it directly because it's actually hidden be behind the HTTP request so if you do",
    "start": "1453679",
    "end": "1461840"
  },
  {
    "text": "request. context then you get the context and that was actually done this way because if we had added the context",
    "start": "1461840",
    "end": "1469360"
  },
  {
    "text": "at the beginning of the Handler as an extra parameter then we would have broken every single interface of the HTP",
    "start": "1469360",
    "end": "1476080"
  },
  {
    "text": "package which would have been sad so that's how you do it so I would say like the first thing is like make sure you use it and that you get that context and",
    "start": "1476080",
    "end": "1483880"
  },
  {
    "text": "then the next is check that whether it's canceled or not and the good thing is",
    "start": "1483880",
    "end": "1490039"
  },
  {
    "text": "that basically the way you do it is just getting a it's it's just a channel so",
    "start": "1490039",
    "end": "1496399"
  },
  {
    "text": "you do a select statement and is like as you were doing from a channel like I might either receive a context",
    "start": "1496399",
    "end": "1502080"
  },
  {
    "text": "cancellation or something else might happen right so you need to change a little bit your code and if you've never",
    "start": "1502080",
    "end": "1507679"
  },
  {
    "text": "done that it's a little bit confusing but the idea is that you should have the path that does the thing that you",
    "start": "1507679",
    "end": "1513880"
  },
  {
    "text": "actually want to do and the path that handles the canellation and and if you if you just",
    "start": "1513880",
    "end": "1519880"
  },
  {
    "text": "do that like if literally just that on every single HTTP what is the word",
    "start": "1519880",
    "end": "1525200"
  },
  {
    "text": "Handler if you have in h every HTP be Handler you just do that of either like",
    "start": "1525200",
    "end": "1530480"
  },
  {
    "text": "I'm going to call this function but also if this happens just cancel it if the user just like sends a request and",
    "start": "1530480",
    "end": "1537919"
  },
  {
    "text": "cancels the request because the TCP connection goes down that context will be cancelled so even if the user that is",
    "start": "1537919",
    "end": "1545159"
  },
  {
    "text": "hitting your end your rest API doesn't know anything about context you're already getting a lot of benefit from it",
    "start": "1545159",
    "end": "1550799"
  },
  {
    "text": "you can also stick that uh that check into a wrapper Handler like basically",
    "start": "1550799",
    "end": "1555880"
  },
  {
    "text": "middleware so that you don't need to remember to add it to every endpoint I know that this is Audio Only but",
    "start": "1555880",
    "end": "1561720"
  },
  {
    "text": "basically raise your hand if you've ever had something that is uh that you're adding manually to each endpoint and",
    "start": "1561720",
    "end": "1566960"
  },
  {
    "text": "you've forgotten to add it to one I certainly have yeah copy pasting is the",
    "start": "1566960",
    "end": "1573919"
  },
  {
    "text": "best you mentioned something uh you know really significantly I think affecting",
    "start": "1573919",
    "end": "1579640"
  },
  {
    "text": "people which is the fact that you know context packages you know added to the standard library at a lighter time 1.6",
    "start": "1579640",
    "end": "1587080"
  },
  {
    "text": "and now like you know in terms of like apis sorry to interrupt but actually I just looked at it and we were wrong is",
    "start": "1587080",
    "end": "1592919"
  },
  {
    "text": "go 1.7 okay good s by one which was the drama because go 1.6 did not have",
    "start": "1592919",
    "end": "1599840"
  },
  {
    "text": "context and that's the one we were supporting and and everybody was mad at that that's I remember that yeah we were",
    "start": "1599840",
    "end": "1606039"
  },
  {
    "text": "right about there was like some drama related to 1.6 but it was because 1.6 didn't have the context not because it",
    "start": "1606039",
    "end": "1612559"
  },
  {
    "text": "had the context yes off by one eror again yes close enough programmers yeah",
    "start": "1612559",
    "end": "1620120"
  },
  {
    "text": "yeah it created this like uh sort of like you know different apis all around right the SQL package for example became",
    "start": "1620120",
    "end": "1627039"
  },
  {
    "text": "very complicated after context because they had to introduce the same set of",
    "start": "1627039",
    "end": "1632559"
  },
  {
    "text": "apis uh with the context so you know it's just kind of like hard to like you",
    "start": "1632559",
    "end": "1637720"
  },
  {
    "text": "figure out people like why all these you know apis are replicated and like which one is the best one to use and so on uh",
    "start": "1637720",
    "end": "1644520"
  },
  {
    "text": "it also seems to be I think like kind of giv a lot of trouble for some people um",
    "start": "1644520",
    "end": "1649720"
  },
  {
    "text": "just because they don't have this context I mean context is in they don't have the history how context came around",
    "start": "1649720",
    "end": "1656559"
  },
  {
    "text": "context is the most overloaded term probably in computer science also so I'm",
    "start": "1656559",
    "end": "1662799"
  },
  {
    "text": "glad that we are having a conversation about this topic but yeah what I wanted to say is um it is a challenge for",
    "start": "1662799",
    "end": "1669960"
  },
  {
    "text": "people because you know they don't know the history and it it's it was like more of like a later thought so I was saying",
    "start": "1669960",
    "end": "1675760"
  },
  {
    "text": "like you know if you're starting a new language uh think about like how you are",
    "start": "1675760",
    "end": "1681120"
  },
  {
    "text": "going to be handling context propagation at the very earlier day because it has a",
    "start": "1681120",
    "end": "1686640"
  },
  {
    "text": "real impact on the library ecosystem very much so and I think someone else mentioned earlier that for example Java",
    "start": "1686640",
    "end": "1692880"
  },
  {
    "text": "has thread local variables problem that you run into with any language that has thread local variables uh let alone only",
    "start": "1692880",
    "end": "1700120"
  },
  {
    "text": "Global variables um is that at some point likely someone is going to want something that is finer grained than",
    "start": "1700120",
    "end": "1706720"
  },
  {
    "text": "threads so go routines are one example of this that's probably familiar to most",
    "start": "1706720",
    "end": "1711960"
  },
  {
    "text": "of the audience here uh but then other languages like let's say python for",
    "start": "1711960",
    "end": "1718000"
  },
  {
    "text": "example have things like Futures which are again different from threads and so",
    "start": "1718000",
    "end": "1723279"
  },
  {
    "text": "python handled this by adding context local variables after the fact but then",
    "start": "1723279",
    "end": "1728919"
  },
  {
    "text": "if you're writing a library you still have to handle the case of something maybe having something not yet",
    "start": "1728919",
    "end": "1735720"
  },
  {
    "text": "supporting context local variable yeah and I actually have a follow-up",
    "start": "1735720",
    "end": "1741440"
  },
  {
    "text": "question on that like so we have explicit context propagation with the context objects um you know in many",
    "start": "1741440",
    "end": "1747960"
  },
  {
    "text": "languages you know actually context propagation is implicit and how does that like in your experience like um how",
    "start": "1747960",
    "end": "1755000"
  },
  {
    "text": "does it affect people's awareness around you know there is TLS or like context propagation there is maybe signals that",
    "start": "1755000",
    "end": "1762039"
  },
  {
    "text": "you you know you can kind of like you know use to S cancel or um you can",
    "start": "1762039",
    "end": "1768159"
  },
  {
    "text": "propagate some values like I think like in terms of awareness or in terms of like um usability like explicitness is",
    "start": "1768159",
    "end": "1776640"
  },
  {
    "text": "also a positive contribution do you agree I would say that it's one of those things where it's both good and bad it's",
    "start": "1776640",
    "end": "1783799"
  },
  {
    "text": "on the one hand nice that the implicit is kind of easier to use because you can access it anywhere you don't need to",
    "start": "1783799",
    "end": "1789600"
  },
  {
    "text": "worry about explicitly propagating and oh what if I'm using a library that doesn't offer propagation yet what if I",
    "start": "1789600",
    "end": "1795640"
  },
  {
    "text": "have a legacy code base that doesn't have context propagation yet do I need to play a bunch of Vim golf or redj",
    "start": "1795640",
    "end": "1801559"
  },
  {
    "text": "stuff in order to add add it everywhere so on the one hand it's nice that to",
    "start": "1801559",
    "end": "1806799"
  },
  {
    "text": "have it implicit so you can just really easily add it from any starting point on",
    "start": "1806799",
    "end": "1811880"
  },
  {
    "text": "the other hand making it easier means that it's also easier to abuse so you can overuse it more easily",
    "start": "1811880",
    "end": "1820159"
  },
  {
    "text": "seen this a lot with uh with languages that have like request local or I guess",
    "start": "1820159",
    "end": "1825679"
  },
  {
    "text": "libraries and Frameworks that have EST local um variables where people end up",
    "start": "1825679",
    "end": "1831360"
  },
  {
    "text": "using this one like request object in rails for example to propagate",
    "start": "1831360",
    "end": "1837760"
  },
  {
    "text": "everything their entire State and then you end up with these like tiny little",
    "start": "1837760",
    "end": "1843679"
  },
  {
    "text": "methods somewhere very deep in your code base that really shouldn't know about",
    "start": "1843679",
    "end": "1848919"
  },
  {
    "text": "this what is like almost Global state but is coupled to this massive object",
    "start": "1848919",
    "end": "1855559"
  },
  {
    "text": "that it just kind of conveniently has as so it's nice until Suddenly It's",
    "start": "1855559",
    "end": "1862159"
  },
  {
    "text": "not and when it isn't it gets bad yeah I've seen examples of like people can't",
    "start": "1862159",
    "end": "1867440"
  },
  {
    "text": "break the API so they actually have to like put things in they end up like putting things in context and like it",
    "start": "1867440",
    "end": "1872679"
  },
  {
    "text": "becomes this like I think it's called the god object like you just basically your API is represented on the context",
    "start": "1872679",
    "end": "1879039"
  },
  {
    "text": "propagation which is an anti- pattern but it happens way too often yeah and",
    "start": "1879039",
    "end": "1884600"
  },
  {
    "text": "there's no compiler safety is there in this world the compiler is not going to help you out at all with these because",
    "start": "1884600",
    "end": "1890320"
  },
  {
    "text": "you only find out at runtime if the values are there or not that is is true in most languages I think some will give",
    "start": "1890320",
    "end": "1898639"
  },
  {
    "text": "you some more safety yeah but even like you could somehow fake that in go right like you",
    "start": "1898639",
    "end": "1904480"
  },
  {
    "text": "could have a request object and then like add more and more Fields as you go and uh then each Handler kind of creates",
    "start": "1904480",
    "end": "1912279"
  },
  {
    "text": "a request object and then calls something and all of those are methods so you always keep that context you can",
    "start": "1912279",
    "end": "1918080"
  },
  {
    "text": "always access it but if you do that you're going to write a code that is so hard to test because you're gonna have",
    "start": "1918080",
    "end": "1924360"
  },
  {
    "text": "this object thing that goes on over and over and that's why I was like if you're",
    "start": "1924360",
    "end": "1929440"
  },
  {
    "text": "writing code that uses context most of the time you actually do not have access to anything in that context unless you",
    "start": "1929440",
    "end": "1936960"
  },
  {
    "text": "know what you want right so you cannot be broken by things that you don't have",
    "start": "1936960",
    "end": "1942760"
  },
  {
    "text": "access to so it makes it a little bit easier but making it more restrictive it actually makes it so it's harder to",
    "start": "1942760",
    "end": "1949159"
  },
  {
    "text": "misuse and I feel like that's something that go tries to do all of the time like to make things easy to Ed but even more",
    "start": "1949159",
    "end": "1956080"
  },
  {
    "text": "important hard to misused and this is an example of that God object is a pretty",
    "start": "1956080",
    "end": "1961120"
  },
  {
    "text": "searchable term these days I believe if you want more articles on",
    "start": "1961120",
    "end": "1966760"
  },
  {
    "text": "people talking about the woses they can cause what I wonder about and actually I don't know about this but uh is you",
    "start": "1966760",
    "end": "1973480"
  },
  {
    "text": "might know uh for all languages when uh context propagation is implicit uh if",
    "start": "1973480",
    "end": "1979000"
  },
  {
    "text": "you have something where you you have a for Loop and each iteration needs to do it in a different context can you even",
    "start": "1979000",
    "end": "1985679"
  },
  {
    "text": "do that or do you need to somehow go into like actual threads and stuff like that so that's a good question and it",
    "start": "1985679",
    "end": "1991799"
  },
  {
    "text": "varies by language so if you have something that has let's say kind of worst case scenario only has Global",
    "start": "1991799",
    "end": "1998799"
  },
  {
    "text": "variables of base case basically then you would need to do uh you would need",
    "start": "1998799",
    "end": "2004279"
  },
  {
    "text": "to add locks and stuff in order to ensure that if you're trying to parallelize that Loop let's say that",
    "start": "2004279",
    "end": "2009720"
  },
  {
    "text": "they don't uh clobber one another's state if you have something like context",
    "start": "2009720",
    "end": "2015559"
  },
  {
    "text": "local variables uh in Python then you have it per future I believe I don't",
    "start": "2015559",
    "end": "2021120"
  },
  {
    "text": "write much python I'm starting to write a lot more python right now and it is making me miso um so far um where was I",
    "start": "2021120",
    "end": "2030679"
  },
  {
    "text": "going with that so like if your parallelization is using something that Maps nicely to your your context Lo",
    "start": "2030679",
    "end": "2037960"
  },
  {
    "text": "local variable type like Futures that are aware of context local variables then you get it for free however if you",
    "start": "2037960",
    "end": "2044760"
  },
  {
    "text": "have something that if you're using let's say futures um and you only have thread local variables then again",
    "start": "2044760",
    "end": "2052079"
  },
  {
    "text": "there's this mis map and so you need to add a lock or something in order to ensure again that you're not clobbering",
    "start": "2052079",
    "end": "2058480"
  },
  {
    "text": "State across one another it's kind of that same classic Global variable",
    "start": "2058480",
    "end": "2064158"
  },
  {
    "text": "problem and sometimes it's better mitigated sometimes it's really",
    "start": "2064159",
    "end": "2069219"
  },
  {
    "text": "[Music]",
    "start": "2069219",
    "end": "2080949"
  },
  {
    "text": "not what's up Gophers are you looking for a way to instantly debug and troubleshoot your applications and",
    "start": "2081520",
    "end": "2087520"
  },
  {
    "text": "services running a production on kubernetes that's a mouthful well pixie gives you a magical API to get instant",
    "start": "2087520",
    "end": "2094599"
  },
  {
    "text": "debug data and the best part is is this doesn't involve changing code there are no manual uis and all this lives inside",
    "start": "2094599",
    "end": "2102320"
  },
  {
    "text": "kubernetes pixie is an API which lives inside your platform harvests all of",
    "start": "2102320",
    "end": "2107640"
  },
  {
    "text": "your data that you need and exposes a bunch of interfaces that you can ping to get data you need pixie is essentially",
    "start": "2107640",
    "end": "2114640"
  },
  {
    "text": "like a decentralized Splunk it's a programmable Edge intelligence platform which captures metrics traces logs and",
    "start": "2114640",
    "end": "2121520"
  },
  {
    "text": "events without any code changes and the team behind pixie is working hard to bring it to market for use by the end of",
    "start": "2121520",
    "end": "2128160"
  },
  {
    "text": "2020 but I'm here to tell you how you can get your hands on the beta today links are in the show note so check them",
    "start": "2128160",
    "end": "2133760"
  },
  {
    "text": "out so you can click through to the beta and their slack Community once again links from the show notes check them out",
    "start": "2133760",
    "end": "2139040"
  },
  {
    "text": "and look forward to pixie day coming [Music]",
    "start": "2139040",
    "end": "2155800"
  },
  {
    "text": "soon [Music]",
    "start": "2155800",
    "end": "2160149"
  },
  {
    "text": "so we've talked about context from uh in an HTTP context so we can access the",
    "start": "2160960",
    "end": "2168000"
  },
  {
    "text": "context method on the HTTP request and we can also use with context on that to",
    "start": "2168000",
    "end": "2174599"
  },
  {
    "text": "get a new request if we want to set the context in a request are there other",
    "start": "2174599",
    "end": "2180160"
  },
  {
    "text": "places one thing I'm thinking is I actually use context in my normal Tools",
    "start": "2180160",
    "end": "2186400"
  },
  {
    "text": "in in like command line tools and I have the signal the control c signal",
    "start": "2186400",
    "end": "2191640"
  },
  {
    "text": "interrupt to to actually cancel the context and that turns out to be quite a",
    "start": "2191640",
    "end": "2197839"
  },
  {
    "text": "nice pattern it does that break the rules a little bit some people think that you should only be using it in a",
    "start": "2197839",
    "end": "2203440"
  },
  {
    "text": "kind of request response world but then maybe CIS are kind of request response I",
    "start": "2203440",
    "end": "2209280"
  },
  {
    "text": "would consider them request response slight side note Dave Cheney has a",
    "start": "2209280",
    "end": "2214359"
  },
  {
    "text": "couple parallel articles one is called context is for cancellation the other is called context isn't for cancellation um",
    "start": "2214359",
    "end": "2222599"
  },
  {
    "text": "and it's been a while since I've looked at theodical but as I recall they kind of dip into this a bit Yeah that's the",
    "start": "2222599",
    "end": "2230400"
  },
  {
    "text": "series from Dr Cheney and Mr Dave there giving us two sides of the same",
    "start": "2230400",
    "end": "2237400"
  },
  {
    "text": "argument yeah well I saw a proposal and I think it's making good progress for",
    "start": "2237400",
    "end": "2242839"
  },
  {
    "text": "officially supporting that signal cancellation that I was talking about I think they were talking about adding",
    "start": "2242839",
    "end": "2248079"
  },
  {
    "text": "something either to the signal package I think so that you could you could trap yeah and get a context that will cancel",
    "start": "2248079",
    "end": "2254880"
  },
  {
    "text": "when it sees those signals that that can be very useful and one thing I just want to say for anyone that hasn't used this",
    "start": "2254880",
    "end": "2261599"
  },
  {
    "text": "to sort of implement the cancellation there's a really cool thing the done",
    "start": "2261599",
    "end": "2267119"
  },
  {
    "text": "method returns a channel and that channel gets closed when the context",
    "start": "2267119",
    "end": "2272319"
  },
  {
    "text": "should end so if you're doing like a select block or something one of the cases can just be the the a read",
    "start": "2272319",
    "end": "2279359"
  },
  {
    "text": "essentially on that done Channel and that's your little that's the little bit",
    "start": "2279359",
    "end": "2284440"
  },
  {
    "text": "of code that runs when there's a cancellation and then in that usually you can either return return the error",
    "start": "2284440",
    "end": "2290720"
  },
  {
    "text": "or exit or something maybe you need to do some tidy up but hopefully you've deferred that or something so it happens",
    "start": "2290720",
    "end": "2296200"
  },
  {
    "text": "kind of automatically are there any other little programming tips and tricks like that that we can use that you know",
    "start": "2296200",
    "end": "2302800"
  },
  {
    "text": "of there's one that it's uh pretty cool which is if you're going to have like",
    "start": "2302800",
    "end": "2308319"
  },
  {
    "text": "there's a a very straightforward way of cutting down the latency like the tail",
    "start": "2308319",
    "end": "2314560"
  },
  {
    "text": "latency in your requests so if you have a request let's say that you you have a request that you send into a server and",
    "start": "2314560",
    "end": "2320839"
  },
  {
    "text": "it takes five milliseconds 99% of the time but then there's 1% of the time",
    "start": "2320839",
    "end": "2326800"
  },
  {
    "text": "that it takes one minute which is not good so what you could do is make that",
    "start": "2326800",
    "end": "2332119"
  },
  {
    "text": "code multiple times and you're going to do it with with cancellation so you're going to do context with cancel of your",
    "start": "2332119",
    "end": "2338800"
  },
  {
    "text": "original context and then what you're going to do is you're going to use the same context for all of those calls and",
    "start": "2338800",
    "end": "2345000"
  },
  {
    "text": "have defer cancel at the top of your function and then as soon as any of",
    "start": "2345000",
    "end": "2350520"
  },
  {
    "text": "those values returns and you return from that function the rest will be canceled and that's going to take down your 99th",
    "start": "2350520",
    "end": "2357359"
  },
  {
    "text": "percentile from like one minute down to five minut seconds so that's like small",
    "start": "2357359",
    "end": "2362520"
  },
  {
    "text": "things that you can get a lot of performance especially when you're using a that is not something you manage so you",
    "start": "2362520",
    "end": "2370040"
  },
  {
    "text": "cannot go and complain complain to them about like hey you're 99% all latency is awful you can still fix it by doing this",
    "start": "2370040",
    "end": "2377319"
  },
  {
    "text": "little hack and for those unfamiliar with tail latency and its implications",
    "start": "2377319",
    "end": "2382960"
  },
  {
    "text": "what can happen is that uh you have what's called a long tail where some small percentage of your of your",
    "start": "2382960",
    "end": "2389920"
  },
  {
    "text": "requests take all of the time and often alongside all of the time a lot of the resources so if you rather than letting",
    "start": "2389920",
    "end": "2396960"
  },
  {
    "text": "them taking take all of the resources instead cancel them um it can actually",
    "start": "2396960",
    "end": "2402839"
  },
  {
    "text": "improve your throughput by freeing up those resources for the faster requests",
    "start": "2402839",
    "end": "2407920"
  },
  {
    "text": "that's brilliant why why is one of them taking a minute what's it doing it's only type. sleep 60 seconds databases",
    "start": "2407920",
    "end": "2416520"
  },
  {
    "text": "databas databases databases one service is down and something is try uh doing",
    "start": "2416520",
    "end": "2423359"
  },
  {
    "text": "infinite retries network issues always network issues somewhere DNS",
    "start": "2423359",
    "end": "2430400"
  },
  {
    "text": "there's a really good talk by uh what's his name the guy that does everything at",
    "start": "2430400",
    "end": "2436680"
  },
  {
    "text": "Google there's even a like Degrees of Separation from him yeah you need to",
    "start": "2436680",
    "end": "2441960"
  },
  {
    "text": "know who he is Jeff Dean who is that yes yes him Jeff Dean so that's impressive I",
    "start": "2441960",
    "end": "2448520"
  },
  {
    "text": "didn't assume that you can forget his name so sorry it's the guy that does everything in Basics like everything by",
    "start": "2448520",
    "end": "2456319"
  },
  {
    "text": "somehow uh he has a really good talk on like uh how to manage tail latency and",
    "start": "2456319",
    "end": "2462640"
  },
  {
    "text": "long tail latency it's really good and that's that's actually where it's like it's not for go but all of those things",
    "start": "2462640",
    "end": "2469119"
  },
  {
    "text": "that he proposes are actually things that you would Implement in go with the context package oh cool yeah yeah tail",
    "start": "2469119",
    "end": "2475839"
  },
  {
    "text": "latency is not unique to go oh yeah absolutely not yeah Al last if it were",
    "start": "2475839",
    "end": "2482800"
  },
  {
    "text": "isolated in one spot that would be nice that's one of the reasons that like context propagation deadlines and cancellations is a big part of our RPC",
    "start": "2482800",
    "end": "2489760"
  },
  {
    "text": "you know systems like you know RPC stack and it's you know the the context package the go package kind of like grew",
    "start": "2489760",
    "end": "2496200"
  },
  {
    "text": "up from there you know internally when we were talking about the internal context package it was actually in the context of like the you know RPC",
    "start": "2496200",
    "end": "2503200"
  },
  {
    "text": "framework that we were using uh it was back then stubby now it's grpc they are both using you know similar Concepts and",
    "start": "2503200",
    "end": "2509480"
  },
  {
    "text": "it's very important for grpc uh to have a you know context propagation you know",
    "start": "2509480",
    "end": "2514520"
  },
  {
    "text": "building block like that on on the note of grpc and more code examples a lot of",
    "start": "2514520",
    "end": "2520119"
  },
  {
    "text": "the grpc go code around context is also pretty readable like for example there's",
    "start": "2520119",
    "end": "2525720"
  },
  {
    "text": "a peer package which is almost only for context handling so it basically has I",
    "start": "2525720",
    "end": "2531880"
  },
  {
    "text": "think two functions one for adding Pier to a context one for retrieving Pier from a",
    "start": "2531880",
    "end": "2538079"
  },
  {
    "text": "context um so you can see how it works in the wild oh that's a great tip yeah",
    "start": "2538079",
    "end": "2544640"
  },
  {
    "text": "there's another thing that was quite interesting we had a problem where we were using iio copy to copy from some",
    "start": "2544640",
    "end": "2551640"
  },
  {
    "text": "Source data to some destination place and it's you takes the I reader I writer pair and we wanted to cancel that and",
    "start": "2551640",
    "end": "2561079"
  },
  {
    "text": "because you can't pass a context into copy the way we solved it was we made",
    "start": "2561079",
    "end": "2566119"
  },
  {
    "text": "our own reader that essentially wrapped the other reader and this reader was",
    "start": "2566119",
    "end": "2571720"
  },
  {
    "text": "context aware so that it would check to see on every each call to read which",
    "start": "2571720",
    "end": "2577880"
  },
  {
    "text": "happens multiple times as code is is as IO copy is reading through that Source data each time it would check to see if",
    "start": "2577880",
    "end": "2585119"
  },
  {
    "text": "the context has been canceled or if if it's going to return an error and then if it did it would return that error",
    "start": "2585119",
    "end": "2591359"
  },
  {
    "text": "from the read method which then would propagate through and get returned from iio copy so that was an interesting",
    "start": "2591359",
    "end": "2598800"
  },
  {
    "text": "solution to how we could actually add context support to places that don't yet",
    "start": "2598800",
    "end": "2604599"
  },
  {
    "text": "have it those kinds of things are crazy aren't they that's interesting because like I I I really like the solution it's",
    "start": "2604599",
    "end": "2611559"
  },
  {
    "text": "like when you mentioned the problem I was like oh yeah that's how would have done it too but also does that mean you",
    "start": "2611559",
    "end": "2617440"
  },
  {
    "text": "were storing a context in a struct how dare you that goes against what",
    "start": "2617440",
    "end": "2622720"
  },
  {
    "text": "everybody says you should do no we didn't because we used the closure I think oh maybe sure okay yeah I was",
    "start": "2622720",
    "end": "2630240"
  },
  {
    "text": "about to give that as an example lots of people are asking for example this particular thing like how can you you",
    "start": "2630240",
    "end": "2635599"
  },
  {
    "text": "know get rid of a go routine uh once you're done or whatever what is the like most canonical API uh one way to do this",
    "start": "2635599",
    "end": "2642920"
  },
  {
    "text": "is actually like using cancel like if you have this like infinite select for example you start a go routine there's an infinite select whatever you can just",
    "start": "2642920",
    "end": "2650240"
  },
  {
    "text": "basically rely on that like I I'm not sure if I was following your example Matt but was it like something like that",
    "start": "2650240",
    "end": "2655680"
  },
  {
    "text": "like you had some task and like just basically using cancellation uh so the",
    "start": "2655680",
    "end": "2660720"
  },
  {
    "text": "context is a is a way to signal that like cancellation and you know life ccle",
    "start": "2660720",
    "end": "2666559"
  },
  {
    "text": "events yeah it was it was it just because you can call the error method can't you the ER you can just call that",
    "start": "2666559",
    "end": "2672839"
  },
  {
    "text": "any time that and done it's nil while it hasn't been cancelled so I didn't even I",
    "start": "2672839",
    "end": "2678200"
  },
  {
    "text": "don't think we used the done channel in this case I think it was just checking that error and if that returned nail",
    "start": "2678200",
    "end": "2684920"
  },
  {
    "text": "then it went and allowed the parent to do the read and if not it would return and short soet early yeah that's pretty",
    "start": "2684920",
    "end": "2691920"
  },
  {
    "text": "cool yeah it worked yeah we wrote about it on the blog I'll put it in the show notes everyone yeah the io copy example",
    "start": "2691920",
    "end": "2698800"
  },
  {
    "text": "actually reminds me of of what grpc does for uh streaming so if you're doing by",
    "start": "2698800",
    "end": "2705160"
  },
  {
    "text": "directional streaming you don't know who's supposed to finish so you actually handle that by canceling the context so",
    "start": "2705160",
    "end": "2711200"
  },
  {
    "text": "it's kind of similar to iio copy yeah oh yeah that is cool Loops are a good place to have that repeated check so if you",
    "start": "2711200",
    "end": "2718440"
  },
  {
    "text": "have something expensive like maybe you're copying a really large file you can instead copy pieces at a time and",
    "start": "2718440",
    "end": "2725640"
  },
  {
    "text": "then do the check after copying those pieces right yeah actually when when you walk the file system in my from my",
    "start": "2725640",
    "end": "2732400"
  },
  {
    "text": "example from earlier each time you check I often check the incoming error to that",
    "start": "2732400",
    "end": "2737680"
  },
  {
    "text": "walk funk that you get and then if there's an error there I'll usually that'll be the end of it for me and then",
    "start": "2737680",
    "end": "2744319"
  },
  {
    "text": "after that I'll check the context error there and if there's an error there I just return that kind of in a similar",
    "start": "2744319",
    "end": "2750000"
  },
  {
    "text": "way and yeah so it is it can be very it's quite simple and very easy to read",
    "start": "2750000",
    "end": "2755040"
  },
  {
    "text": "and it's just normal go code which I quite like I mean I get how having it implicit might make for a kind of less",
    "start": "2755040",
    "end": "2761920"
  },
  {
    "text": "cluttered language but a little bit like the the way we the reason we like errors in go is you are explicit you can see",
    "start": "2761920",
    "end": "2770440"
  },
  {
    "text": "what's happening and you sort of are in control of it which is quite nice and actually that's a very good point about",
    "start": "2770440",
    "end": "2776000"
  },
  {
    "text": "errors because if uh the cancellation was implicit like if you didn't need to",
    "start": "2776000",
    "end": "2782160"
  },
  {
    "text": "do anything your code would just be cancelled then you would need an",
    "start": "2782160",
    "end": "2788119"
  },
  {
    "text": "exception which we do not have there should have to be like some extra weird thing in there or like a panic yeah",
    "start": "2788119",
    "end": "2795760"
  },
  {
    "text": "which would be pretty bad I think it' be pretty weird to do the only language I can think of that doesn't have",
    "start": "2795760",
    "end": "2801680"
  },
  {
    "text": "exceptions and has in some spots at least something like an implicit context",
    "start": "2801680",
    "end": "2807440"
  },
  {
    "text": "local is rust where some of your uh like future engines basically have have",
    "start": "2807440",
    "end": "2814200"
  },
  {
    "text": "context local variables but they don't know about cancellations it would be up to your HTTP library for example to add",
    "start": "2814200",
    "end": "2821839"
  },
  {
    "text": "that on top yeah and the problem is sometimes you actually do want to do some work in in the event of a",
    "start": "2821839",
    "end": "2827640"
  },
  {
    "text": "cancellation you know if you've got some temporary files or there may even be additional things maybe you have to put",
    "start": "2827640",
    "end": "2834079"
  },
  {
    "text": "a set update the state of some task somewhere in some database you know there may be actual active code that has",
    "start": "2834079",
    "end": "2841480"
  },
  {
    "text": "to run during that cancellation and having it explicit lets you just sell that out right there which is I think",
    "start": "2841480",
    "end": "2848240"
  },
  {
    "text": "pays dividends always for maintainability yeah also having it explicitly allows you to do something",
    "start": "2848240",
    "end": "2854599"
  },
  {
    "text": "which is kind of an OP optimization but like if you know that a task T takes",
    "start": "2854599",
    "end": "2859839"
  },
  {
    "text": "five seconds at the beginning before you start doing it you could actually look at the deadline and looks like oh I only",
    "start": "2859839",
    "end": "2866319"
  },
  {
    "text": "have half a second there's no way I'm gonna finish just return error H that's a great idea actually you need to even",
    "start": "2866319",
    "end": "2873559"
  },
  {
    "text": "do it yeah yeah huh that's another one I was thinking",
    "start": "2873559",
    "end": "2878720"
  },
  {
    "text": "there's a cool thing about oh is it about this topic or because I have another topic that I think it kind of interesting yeah no go go for it I've",
    "start": "2878720",
    "end": "2885880"
  },
  {
    "text": "forgotten so snooze you lose okay yeah so yeah it's like why is there context.",
    "start": "2885880",
    "end": "2893640"
  },
  {
    "text": "too great question yeah I don't know so context. too and context.",
    "start": "2893640",
    "end": "2902400"
  },
  {
    "text": "background do exactly the same thing they turn an empty context and an empty",
    "start": "2902400",
    "end": "2907760"
  },
  {
    "text": "context NE that doesn't have values doesn't have timeouts it doesn't it never get cancelled so it's like",
    "start": "2907760",
    "end": "2913920"
  },
  {
    "text": "literally an empty struct that's what it is so the interesting thing is that when you return uh background what you're",
    "start": "2913920",
    "end": "2921319"
  },
  {
    "text": "saying is that oh this is something that I'm starting from scratch so you're basically saying there's no previous",
    "start": "2921319",
    "end": "2927079"
  },
  {
    "text": "context this is something that I'm creating right so for instance in the example of the CLI you're running your",
    "start": "2927079",
    "end": "2932760"
  },
  {
    "text": "your CLI and at the beginning there's no previous context to anything like maybe at one point we'll have actually a",
    "start": "2932760",
    "end": "2938599"
  },
  {
    "text": "context coming from signal that would be an interesting thing but otherwise we don't have anything so so you you would",
    "start": "2938599",
    "end": "2944240"
  },
  {
    "text": "call background context. to do is actually was added just so as different",
    "start": "2944240",
    "end": "2951640"
  },
  {
    "text": "functions like you need to start like you're creating a tree of functions that are calling and passing context around",
    "start": "2951640",
    "end": "2958319"
  },
  {
    "text": "so how do you do it if you want to add it to all of them but little by little",
    "start": "2958319",
    "end": "2965599"
  },
  {
    "text": "if you start from the top it's going to be you cannot pass functions until they're accepted but if you do it the",
    "start": "2965599",
    "end": "2972280"
  },
  {
    "text": "other way around like you build a function that starts by saying oh I accept a context now and you can pass a",
    "start": "2972280",
    "end": "2979000"
  },
  {
    "text": "context to me then the caller could say oh okay so I should have a context but I",
    "start": "2979000",
    "end": "2984319"
  },
  {
    "text": "do not have it yet so instead of calling context. background which implicitly says I do not have a context and I will",
    "start": "2984319",
    "end": "2991359"
  },
  {
    "text": "never will to to do is just hey I do not have it yet but let's fix it later so",
    "start": "2991359",
    "end": "2996880"
  },
  {
    "text": "it's literally just so when you grab Tod do you can find where you need to still do more do more work and I think that's",
    "start": "2996880",
    "end": "3003359"
  },
  {
    "text": "kind of cool like the fact that they thought about these otherwise I mean you could have done the same calling",
    "start": "3003359",
    "end": "3009400"
  },
  {
    "text": "context. background and then having on top like a comment doing to do has a real context yeah but they did it this",
    "start": "3009400",
    "end": "3016000"
  },
  {
    "text": "way so it's more explicit and you actually could do code analysis and like like hey this is not done yet yeah",
    "start": "3016000",
    "end": "3022520"
  },
  {
    "text": "that's a very real use case I mean one example that I've encountered multiple times is trying to add",
    "start": "3022520",
    "end": "3028799"
  },
  {
    "text": "distributed tracing to existing code bases that don't use context yet so I kind of hinted at this before but most",
    "start": "3028799",
    "end": "3035680"
  },
  {
    "text": "open-source distributed tracing libraries at the very least use context to propagate what are called trace and",
    "start": "3035680",
    "end": "3041880"
  },
  {
    "text": "span IDs so basically your metadata keeping track of the trace and so if",
    "start": "3041880",
    "end": "3049119"
  },
  {
    "text": "you're adding it to an existing code base um you don't have those contexts yet then you don't want to be stting",
    "start": "3049119",
    "end": "3055920"
  },
  {
    "text": "spans from scratch you want to be able to connect those spans to one another at some point but not necessarily from Day",
    "start": "3055920",
    "end": "3063040"
  },
  {
    "text": "Zero if you have you know multi 100,000 line code base and you have a lot of context to read yeah that's a really",
    "start": "3063040",
    "end": "3070079"
  },
  {
    "text": "good point I mean you can tell that this came out of real engineering you know the fact that it has that to do and the",
    "start": "3070079",
    "end": "3076359"
  },
  {
    "text": "fact that it kind of as you said earlier Francis it is a kind of very elegant",
    "start": "3076359",
    "end": "3081880"
  },
  {
    "text": "design it's a very elegant solution and I think is worth looking at the there isn't much code as you say it's worth",
    "start": "3081880",
    "end": "3088079"
  },
  {
    "text": "taking a look and some interesting things in there too like there's a string method often on these contexts so",
    "start": "3088079",
    "end": "3093559"
  },
  {
    "text": "when you print them out they they tell you kind of meaningful information that was a surprise when I found that in the",
    "start": "3093559",
    "end": "3098920"
  },
  {
    "text": "code I actually didn't know yeah I didn't either yeah okay it could be wrong if it's if it's wrong it'll get",
    "start": "3098920",
    "end": "3105359"
  },
  {
    "text": "edited out so I don't look like a fool or do you make that up I certainly printed context before um you can do it",
    "start": "3105359",
    "end": "3112720"
  },
  {
    "text": "it hasn't been super pretty in my experience but when in doubt I have printed many context yeah if it's just",
    "start": "3112720",
    "end": "3119480"
  },
  {
    "text": "string like if it's just primitive stuff yes uh the print will tell you something",
    "start": "3119480",
    "end": "3124880"
  },
  {
    "text": "but like in most cases in my cases for example it's either another strug and it",
    "start": "3124880",
    "end": "3130520"
  },
  {
    "text": "doesn't provide you any you know nice string then yes yeah it's getting harder",
    "start": "3130520",
    "end": "3136839"
  },
  {
    "text": "to use it as a diagnostic uh tool yeah yeah you probably can't no but I've seen",
    "start": "3136839",
    "end": "3142079"
  },
  {
    "text": "it for at least telling you the type of that context and things because often you pass around the context. context",
    "start": "3142079",
    "end": "3148280"
  },
  {
    "text": "interface and sometimes that well hopefully not but yeah no I actually tried it and it's kind of cool the way",
    "start": "3148280",
    "end": "3155160"
  },
  {
    "text": "it prints it so it it like I did it I just wrote a little PR like context.",
    "start": "3155160",
    "end": "3160480"
  },
  {
    "text": "background and then I add I add a value was like key is one and value is two and then I print that and what it prints is",
    "start": "3160480",
    "end": "3167280"
  },
  {
    "text": "like context. background dot with value and then the value inside so it kind of",
    "start": "3167280",
    "end": "3172680"
  },
  {
    "text": "creates like this linked list of like what are the things that you obtain and and print it the the the key is Type in",
    "start": "3172680",
    "end": "3179480"
  },
  {
    "text": "so it doesn't tell me what key it is and the value is not a Stringer that's what",
    "start": "3179480",
    "end": "3185480"
  },
  {
    "text": "it says so yeah okay that's not useful not incredibly",
    "start": "3185480",
    "end": "3190640"
  },
  {
    "text": "useful could be useful I'm almost sure that they they don't print the the value",
    "start": "3190640",
    "end": "3196680"
  },
  {
    "text": "uh or the key just so people do not parse the result of printing the context and then use that to Valu CU that could",
    "start": "3196680",
    "end": "3203640"
  },
  {
    "text": "be dangerous couldn't it concern yeah that would open a gap yeah I think I've",
    "start": "3203640",
    "end": "3209480"
  },
  {
    "text": "been able to successfully use it to either see if a key has been added like basically oh I still have an empty",
    "start": "3209480",
    "end": "3217359"
  },
  {
    "text": "context. background when I expected to have some key on here or else to see if",
    "start": "3217359",
    "end": "3222599"
  },
  {
    "text": "a key has maybe been clobbered but I don't remember how I was able to see the",
    "start": "3222599",
    "end": "3227920"
  },
  {
    "text": "details there oh yeah I guess it tells you the type of the key so technically if you're",
    "start": "3227920",
    "end": "3233319"
  },
  {
    "text": "using only that private key as we were saying before and there's only one value per type then in that case you actually",
    "start": "3233319",
    "end": "3239200"
  },
  {
    "text": "know what value it is yeah yeah [Music]",
    "start": "3239200",
    "end": "3259599"
  },
  {
    "text": "yeah what's up Gophers do you have an app in production that's slower than you like of course you do I know but",
    "start": "3259599",
    "end": "3265319"
  },
  {
    "text": "seriously is the performance of your apps all over the place sometimes fast",
    "start": "3265319",
    "end": "3270640"
  },
  {
    "text": "sometimes slow do you even know why well with data dog you will you can troubleshoot your apps performance with",
    "start": "3270640",
    "end": "3276520"
  },
  {
    "text": "end to end tracing and in one click correlate those go traces with related logs and metrics you can also use data",
    "start": "3276520",
    "end": "3283119"
  },
  {
    "text": "dog's detailed flame graphs to identify bottlenecks and latency in your apps start tracking the performance of your",
    "start": "3283119",
    "end": "3289119"
  },
  {
    "text": "apps today with a free trial at datadog docomo time and here's a bonus if you sign up for a trial and and install the",
    "start": "3289119",
    "end": "3295640"
  },
  {
    "text": "agent data dog will send you a free t-shirt that's a nice bonus once again dat dog.com slgo",
    "start": "3295640",
    "end": "3303240"
  },
  {
    "text": "[Music]",
    "start": "3304770",
    "end": "3307840"
  },
  {
    "text": "[Music]",
    "start": "3311500",
    "end": "3314969"
  },
  {
    "text": "time well before we call cancel on the context of this episode it's time for",
    "start": "3321079",
    "end": "3328960"
  },
  {
    "text": "unpopular opinions so let's hear them does anybody have an unpopular opinion this week Json",
    "start": "3328960",
    "end": "3337599"
  },
  {
    "text": "isn't always as bad as people make it out to be tell me more who is he who is this",
    "start": "3337599",
    "end": "3344119"
  },
  {
    "text": "Jason you talk about yeah that that Jason who gets so much Flack why are you defending him all the time yeah well",
    "start": "3344119",
    "end": "3350839"
  },
  {
    "text": "I've seen a lot of people switch in my opinion prematurely to Proto Buffs in particular sometimes to Thrift where you",
    "start": "3350839",
    "end": "3359359"
  },
  {
    "text": "just change from one problem to another and especially I think for anything that is used externally to your company so",
    "start": "3359359",
    "end": "3366799"
  },
  {
    "text": "for example open source code Proto Buffs can get very complicated especially if you're exposing something that is going",
    "start": "3366799",
    "end": "3373200"
  },
  {
    "text": "to be used across multiple languages so nice to use in go not necessarily As",
    "start": "3373200",
    "end": "3379039"
  },
  {
    "text": "Nice to use in Ruby for example or in PHP yeah or indeed the web browser",
    "start": "3379039",
    "end": "3384280"
  },
  {
    "text": "actually yeah we we did we did an episode on this very recently we called",
    "start": "3384280",
    "end": "3389559"
  },
  {
    "text": "it encoding Json and we actually spelled the episode title using Json to see if",
    "start": "3389559",
    "end": "3395799"
  },
  {
    "text": "any podcasting technology is vulnerable to uh Json injection attacks so far",
    "start": "3395799",
    "end": "3401640"
  },
  {
    "text": "everything's just been fine which is a shame but yeah I I completely agree actually I think we tend to get as",
    "start": "3401640",
    "end": "3408520"
  },
  {
    "text": "programmers a bit obsessed with it's a very attractive proposition the binary protocol it's so tiny isn't it binary is",
    "start": "3408520",
    "end": "3415760"
  },
  {
    "text": "so tiny uh where text is this you know wasteful big thing so yeah I get I get",
    "start": "3415760",
    "end": "3422039"
  },
  {
    "text": "why people are drawn to that just from a sort of technical kind of pure engineering drivers yeah but yeah there",
    "start": "3422039",
    "end": "3429760"
  },
  {
    "text": "are also people who kind of associate grpc with http2 and don't seem to realize that you can use http2 without",
    "start": "3429760",
    "end": "3436680"
  },
  {
    "text": "grpc but not the other way around so they think in order to use http2 I must use grpc in order to use grpc I must use",
    "start": "3436680",
    "end": "3444079"
  },
  {
    "text": "Proto Buffs and it changes a ton of things where you could often get some part of the win",
    "start": "3444079",
    "end": "3451400"
  },
  {
    "text": "more cheaply just by switching to http to great or using message pack using",
    "start": "3451400",
    "end": "3456599"
  },
  {
    "text": "streaming various things like that without going wholesale brilliant one",
    "start": "3456599",
    "end": "3462079"
  },
  {
    "text": "can you use streaming in Json with or that's when you would say you should move to",
    "start": "3462079",
    "end": "3467520"
  },
  {
    "text": "JBC uh you can you can it's not always um as pleasant although I've also seen",
    "start": "3467520",
    "end": "3473559"
  },
  {
    "text": "enough issues with JPC streaming and uh to Matt's point like I think that you",
    "start": "3473559",
    "end": "3479039"
  },
  {
    "text": "still can't use GPC streaming in browsers for example so there is now grpc for the browser but I believe it's",
    "start": "3479039",
    "end": "3485760"
  },
  {
    "text": "unary only one day maybe I'll write write a blog post or something on like how to do basic streaming and when it",
    "start": "3485760",
    "end": "3492839"
  },
  {
    "text": "stops working yes please uh yeah I've done a Json streaming thing which was",
    "start": "3492839",
    "end": "3498000"
  },
  {
    "text": "just using the Line Feed um but we also found out in that episode that it's buggy if you just use the an encoder on",
    "start": "3498000",
    "end": "3505640"
  },
  {
    "text": "the on the body on the request body and just use encode or decode wouldn't it be",
    "start": "3505640",
    "end": "3511319"
  },
  {
    "text": "each time to read those lines apparently uh there's risks involved and if you want to know what they are you have to",
    "start": "3511319",
    "end": "3516599"
  },
  {
    "text": "go and listen to our Jason episode cross marketing of episodes",
    "start": "3516599",
    "end": "3522680"
  },
  {
    "text": "that's what's happening that's how good this podcast is getting any other unpopular opinions I like that one so I",
    "start": "3522680",
    "end": "3529079"
  },
  {
    "text": "don't know if that's that unpopular but maybe it is I don't know if it's popular or unpopular but",
    "start": "3529079",
    "end": "3535440"
  },
  {
    "text": "I think that generics and go are a good idea I would say that's unpopular with",
    "start": "3535440",
    "end": "3541440"
  },
  {
    "text": "many people that I know but I do think that like I gave",
    "start": "3541440",
    "end": "3547640"
  },
  {
    "text": "this talk long time ago around functional programming and go and and basically why not to do it",
    "start": "3547640",
    "end": "3555240"
  },
  {
    "text": "and one of the biggest reasons like there were two reasons the first one is because there's no tail percussion",
    "start": "3555240",
    "end": "3560720"
  },
  {
    "text": "optimization which means that your program is actually 10 times slower just because of it so that's you know like",
    "start": "3560720",
    "end": "3565920"
  },
  {
    "text": "that's a small thing that maybe we should fix but the biggest thing was the fact that if you want to do any kind of like interesting composition of types",
    "start": "3565920",
    "end": "3573079"
  },
  {
    "text": "without generics you're out of luck you cannot really do it you need to do empty interfaces everywhere right so generics",
    "start": "3573079",
    "end": "3580799"
  },
  {
    "text": "I'm very excited about seeing them like I've been trying them and and how they look and now that you know contracts are",
    "start": "3580799",
    "end": "3587200"
  },
  {
    "text": "kind of like gone or at least like they make much more sense they're not as complicated as they used to be I'm",
    "start": "3587200",
    "end": "3593599"
  },
  {
    "text": "pretty excited about getting to to use it so I don't know when it's going to be released for real but looking forward to",
    "start": "3593599",
    "end": "3598720"
  },
  {
    "text": "that yeah I think the design work is phenomenal and to yeah I like the fact",
    "start": "3598720",
    "end": "3603880"
  },
  {
    "text": "we've been able to see it evolving as well I think that in itself is quite an interesting study of language design and",
    "start": "3603880",
    "end": "3611839"
  },
  {
    "text": "again there's another episode of go time your favorite podcast where we actually",
    "start": "3611839",
    "end": "3617319"
  },
  {
    "text": "uh speak to the the designers Ian Lance Taylor and Robert gresner on the show",
    "start": "3617319",
    "end": "3623400"
  },
  {
    "text": "yeah so put that your ear Jana do you have an unpopular opinion I have a controversial one oh",
    "start": "3623400",
    "end": "3630920"
  },
  {
    "text": "let's do it let me just re-record the theme tune",
    "start": "3630920",
    "end": "3635240"
  },
  {
    "text": "then go it's your controversial opinion I do think that like I really like go as",
    "start": "3636760",
    "end": "3642760"
  },
  {
    "text": "a language you know like the Simplicity and you know verbos Wise it's just one",
    "start": "3642760",
    "end": "3648480"
  },
  {
    "text": "of the best options that you have but uh all the protogen artifacts is just",
    "start": "3648480",
    "end": "3654520"
  },
  {
    "text": "making everything just kind of like messed up like I each time I have to",
    "start": "3654520",
    "end": "3659640"
  },
  {
    "text": "touch you know some protog generated protos it just doesn't look like go",
    "start": "3659640",
    "end": "3665160"
  },
  {
    "text": "anymore it's like so cryptic like there's all these like Types on top of the standard Library I have to learn",
    "start": "3665160",
    "end": "3670920"
  },
  {
    "text": "about you know prote has its own like struck like all of the like you know mess and even like the time stamp for",
    "start": "3670920",
    "end": "3678839"
  },
  {
    "text": "example type is like a completely different representation so you basically have to adopt into that like",
    "start": "3678839",
    "end": "3687039"
  },
  {
    "text": "verbos um alternative universe and it's just like my main pain Point um and I've",
    "start": "3687039",
    "end": "3694240"
  },
  {
    "text": "been like trying to collect all these like gas and tips and everything about protos for a long time and I can tell",
    "start": "3694240",
    "end": "3700839"
  },
  {
    "text": "you there's like at least 20 pages of me putting some tips like here and there",
    "start": "3700839",
    "end": "3706440"
  },
  {
    "text": "and I still need to go back to that document and reference to be able to kind of like take a look like hey this",
    "start": "3706440",
    "end": "3712760"
  },
  {
    "text": "is what I'm supposed to do if I you know you know see a type like this put Proto generated type like this and that's just",
    "start": "3712760",
    "end": "3718760"
  },
  {
    "text": "like a big big struggle to me they've been trying to improve you know the",
    "start": "3718760",
    "end": "3723960"
  },
  {
    "text": "generated artifacts but it's just too late I think to make any significant and",
    "start": "3723960",
    "end": "3729760"
  },
  {
    "text": "to be honest like working for a company that is so Proto oriented that's you",
    "start": "3729760",
    "end": "3735160"
  },
  {
    "text": "know the prototypes are the types that I'm engaging with on a daily basis and",
    "start": "3735160",
    "end": "3741359"
  },
  {
    "text": "it's just like you know takes away all the fun I get from from go cuz in the end of the day I'm a Proto you know I'm",
    "start": "3741359",
    "end": "3748920"
  },
  {
    "text": "engaging with the protos more than everything else yeah so that's interesting because I found the same and",
    "start": "3748920",
    "end": "3754920"
  },
  {
    "text": "actually I've deliberately avoided grpc and protocol buffers for that reason uh",
    "start": "3754920",
    "end": "3761279"
  },
  {
    "text": "we actually made I've told you about this before for sure let me just do quickly tell you about this other alternative project that we've got which",
    "start": "3761279",
    "end": "3767920"
  },
  {
    "text": "is just a code gen thing but it it uses go interfaces to describe the RPC so you",
    "start": "3767920",
    "end": "3775200"
  },
  {
    "text": "have an interface for each service and then the methods in there and then you use go types and then it uses the",
    "start": "3775200",
    "end": "3780960"
  },
  {
    "text": "packages package and the as stuff to understand that go those go types and",
    "start": "3780960",
    "end": "3788160"
  },
  {
    "text": "then using templates to then generate service serice stubs client stubs um",
    "start": "3788160",
    "end": "3795160"
  },
  {
    "text": "typescript client things like this you know and it's Json over HTTP because as",
    "start": "3795160",
    "end": "3800839"
  },
  {
    "text": "was mentioned earlier by Isabel it's kind of uh you know it's good enough for most cases",
    "start": "3800839",
    "end": "3806799"
  },
  {
    "text": "and actually preferable in some cases because you know we can we can open up the web client and have a look at the",
    "start": "3806799",
    "end": "3812839"
  },
  {
    "text": "requests and the response going on in there and and look at the Json and it's even pretty printed by default and",
    "start": "3812839",
    "end": "3819559"
  },
  {
    "text": "things so it's like yeah there are tradeoffs that sometimes sometimes we focus too much on one thing over others",
    "start": "3819559",
    "end": "3826880"
  },
  {
    "text": "and uh I think maintainability and familiarity and just having a sort of Json hgp thing given that so many people",
    "start": "3826880",
    "end": "3835039"
  },
  {
    "text": "already understand that so well is kind does kind of have that appeal we'll put a link to that project called Oto in the",
    "start": "3835039",
    "end": "3842240"
  },
  {
    "text": "show notes I did a talk last year on grpc that was basically like grpc War",
    "start": "3842240",
    "end": "3851240"
  },
  {
    "text": "Stories nice don't think it was recorded though haven't found the recording oh",
    "start": "3852319",
    "end": "3857520"
  },
  {
    "text": "that's a shame you have topc yeah I'd like to see that there was",
    "start": "3857520",
    "end": "3863960"
  },
  {
    "text": "a camera so Google may have a recording somewhere but I don't have access to it",
    "start": "3863960",
    "end": "3869880"
  },
  {
    "text": "that's is intriguing okay I told the JPC team about this and like there was like",
    "start": "3869880",
    "end": "3875319"
  },
  {
    "text": "one of the leads were actually interested in reconsidering you know designing the the",
    "start": "3875319",
    "end": "3881839"
  },
  {
    "text": "generator the produ generator but then that that person left",
    "start": "3881839",
    "end": "3887200"
  },
  {
    "text": "Google and I have to like do some like Grassroots movement again to make this a",
    "start": "3887200",
    "end": "3892839"
  },
  {
    "text": "deal but it's just so so bizarre maybe it's because go is such a significantly simple like small language that you know",
    "start": "3892839",
    "end": "3901200"
  },
  {
    "text": "anything that just doesn't fit into that category just stands out too much um and",
    "start": "3901200",
    "end": "3906720"
  },
  {
    "text": "you feel frustrated maybe because you know like you're coming to this language because you want something very small",
    "start": "3906720",
    "end": "3911839"
  },
  {
    "text": "and simple and then you know the reality justes just doesn't match on the other",
    "start": "3911839",
    "end": "3917119"
  },
  {
    "text": "hand I mean there's no other way to do like you know multil language like if you want to use a you know Proto style",
    "start": "3917119",
    "end": "3923319"
  },
  {
    "text": "transport layer plus you need like multiple languages you know the there are a few other options but none of them",
    "start": "3923319",
    "end": "3929839"
  },
  {
    "text": "are like they all suffer from the same problem because this is an inherently hard problem you're talking about having",
    "start": "3929839",
    "end": "3935920"
  },
  {
    "text": "you know compatibility between different languages yeah so of course you introduce some of these like additional",
    "start": "3935920",
    "end": "3941839"
  },
  {
    "text": "Types on top of the you know the standard uh types but you know in the end I think as a user it's just making",
    "start": "3941839",
    "end": "3948920"
  },
  {
    "text": "me sometimes unhappy unfortunately yeah and there's there's another thing that I wish I wish it didn't do and when it generates the",
    "start": "3948920",
    "end": "3956359"
  },
  {
    "text": "interfaces it will somehow they've they made it so you don't get a compile error",
    "start": "3956359",
    "end": "3961760"
  },
  {
    "text": "if you don't Implement that interface like I think they embed a type that has all the methods automatically so it's",
    "start": "3961760",
    "end": "3968279"
  },
  {
    "text": "never a compile error and one of the nice things I would have thought is when",
    "start": "3968279",
    "end": "3973599"
  },
  {
    "text": "the definitions changed and you then regenerate your code you then will get compiler help to make sure that you've",
    "start": "3973599",
    "end": "3980839"
  },
  {
    "text": "implemented that interface that probably comes down to again another pragmatic",
    "start": "3980839",
    "end": "3986640"
  },
  {
    "text": "reason like context to do but in in Oto for example it's a compile error if you",
    "start": "3986640",
    "end": "3992680"
  },
  {
    "text": "haven't implemented the interface and that really helps us make sure that it's always correct yeah I I think that the",
    "start": "3992680",
    "end": "3999279"
  },
  {
    "text": "reasoning behind that might be something around like oh I can add new methods and",
    "start": "3999279",
    "end": "4004480"
  },
  {
    "text": "like on the definition and those servers that are not satisfying that method yet rather than not compiling they will",
    "start": "4004480",
    "end": "4011079"
  },
  {
    "text": "compile and they'll tell you oh this is not implemented so from that reasoning it kind of makes sense but also I got",
    "start": "4011079",
    "end": "4018400"
  },
  {
    "text": "bitten by it recently and I did not enjoy it I was like why are you compiling do not compile like you're",
    "start": "4018400",
    "end": "4024440"
  },
  {
    "text": "missing a method do not satisfy the interface yeah does it return an error or something or is it just a noop that",
    "start": "4024440",
    "end": "4030160"
  },
  {
    "text": "because you need a response there's an implementation that just returns not implemented so it I mean at least it",
    "start": "4030160",
    "end": "4036720"
  },
  {
    "text": "makes sense right like once you get the error it's like but if you got the error because you know like you have a proxy",
    "start": "4036720",
    "end": "4043279"
  },
  {
    "text": "somewhere that you forgot to update and now uh instead of getting the the whole",
    "start": "4043279",
    "end": "4049079"
  },
  {
    "text": "thing going all the way to your server now it the proxy is just saying no not implemented and you do not know because",
    "start": "4049079",
    "end": "4054760"
  },
  {
    "text": "it was not compile like it compiles so you know and go if it compiles it works",
    "start": "4054760",
    "end": "4060240"
  },
  {
    "text": "so you break that that's bad that's and if you don't have a pan I saw",
    "start": "4060240",
    "end": "4066520"
  },
  {
    "text": "a code like this recently where it had the knot implemented all over the place and then didn't have a panic Handler so",
    "start": "4066520",
    "end": "4075279"
  },
  {
    "text": "if you had your routing misconfigured or something suddenly you were basically accidentally self dsing interesting yeah",
    "start": "4075279",
    "end": "4083240"
  },
  {
    "text": "well I'm afraid that is all the time we have for today what a great conversation thank you so much I think we've learned",
    "start": "4083240",
    "end": "4090319"
  },
  {
    "text": "a lot about context there um don't forget to check the show note because there's lots of bits and pieces in there",
    "start": "4090319",
    "end": "4097359"
  },
  {
    "text": "uh that we've talked about today thank you very much to Frances Campo Frances",
    "start": "4097359",
    "end": "4103318"
  },
  {
    "text": "thank you thanks for coming thank you for having me yeah mate anytime come back again please another time will you",
    "start": "4103319",
    "end": "4111318"
  },
  {
    "text": "do you want to commit to that now while we're recording eventually yeah sure",
    "start": "4111319",
    "end": "4117440"
  },
  {
    "text": "eventually send me I might answer eventually we won't and uh Isabelle",
    "start": "4117440",
    "end": "4125080"
  },
  {
    "text": "thank you so much for coming you'll have to come back as well and of course yor always a pleasure thanks yeah thanks a",
    "start": "4125080",
    "end": "4131758"
  },
  {
    "text": "lot okay this is the longest long tail goodbye um weird cuz it's the longest",
    "start": "4131759",
    "end": "4137440"
  },
  {
    "text": "one we've ever done but thanks for listening and we'll see you next",
    "start": "4137440",
    "end": "4142520"
  },
  {
    "text": "time that's it for this episode of go time head to the show notes and click discuss on change law news if you want",
    "start": "4143880",
    "end": "4149359"
  },
  {
    "text": "to share some thoughts back to the show also change law Plus+ is now a thing it's the best way to directly support go",
    "start": "4149359",
    "end": "4156080"
  },
  {
    "text": "time and everything else we do if you're here at Chang log support our work make the ads disappear and get closer to the",
    "start": "4156080",
    "end": "4162278"
  },
  {
    "text": "metal at changelog /pl plusus the early adopter rate ends at the end of August",
    "start": "4162279",
    "end": "4168920"
  },
  {
    "text": "this episode was hosted by Matt ryer and yab dogen with special guests Francesa poy and Isabelle Redmire it was produced",
    "start": "4168920",
    "end": "4175238"
  },
  {
    "text": "by Adam stovak that's me and our music is produced by the one and only break master cylinder and we're also brought",
    "start": "4175239",
    "end": "4181600"
  },
  {
    "text": "to you by some awesome Partners who get it thanks to fastly Leno and robbar that's all for now next week's show is",
    "start": "4181600",
    "end": "4188080"
  },
  {
    "text": "all about building desktop apps with go and webtech so stay tuned for that",
    "start": "4188080",
    "end": "4195719"
  },
  {
    "text": "change Lo plus plus",
    "start": "4199199",
    "end": "4207000"
  },
  {
    "text": "ch [Music]",
    "start": "4209840",
    "end": "4219030"
  },
  {
    "text": "ch change log Plus+ [Music]",
    "start": "4219920",
    "end": "4231000"
  },
  {
    "text": "James L [Music]",
    "start": "4231000",
    "end": "4240080"
  },
  {
    "text": "Plus+ change log [Music]",
    "start": "4240080",
    "end": "4247970"
  },
  {
    "text": "Plus+",
    "start": "4252640",
    "end": "4255640"
  }
]