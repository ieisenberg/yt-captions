[
  {
    "text": "once again graphql is the bacon that's going to make everything better but if you're not careful you'll get a little",
    "start": "120",
    "end": "5920"
  },
  {
    "text": "bit bloated if you have too much bacon B with for change log is provided",
    "start": "5920",
    "end": "13440"
  },
  {
    "text": "by fastly learn more at fastly.com we move fast and fix things here at change",
    "start": "13440",
    "end": "18840"
  },
  {
    "text": "law because of rbar check them out at rar.com and we're hosted on linode cloud servers at the lin.com",
    "start": "18840",
    "end": "27080"
  },
  {
    "text": "changelog this episode is brought to you by bar move fast and fix things resolve",
    "start": "27080",
    "end": "33200"
  },
  {
    "text": "errors of minutes and deploy with confidence head to rar.com changelog requested demo get started today it's",
    "start": "33200",
    "end": "40160"
  },
  {
    "text": "loved by developers trusted by Enterprises and most of all we use it here at change log move fast and fix",
    "start": "40160",
    "end": "47079"
  },
  {
    "text": "things with rollbar once again rar.com [Music]",
    "start": "47079",
    "end": "58920"
  },
  {
    "text": "changelog [Music] welcome to JS party your weekly",
    "start": "58920",
    "end": "64478"
  },
  {
    "text": "celebration of JavaScript and the web we have some great shows coming down the pipeline next week we're discussing the",
    "start": "64479",
    "end": "71240"
  },
  {
    "text": "framework Wars with a focus on .js then Michael Rogers is back to share his journey migrating es modules after that",
    "start": "71240",
    "end": "78360"
  },
  {
    "text": "we're talking node best practices with Yoni Goldberg but right now it's time for a serving of graphql That's Heavy on",
    "start": "78360",
    "end": "84079"
  },
  {
    "text": "the metaphors hey it's party time",
    "start": "84079",
    "end": "91060"
  },
  {
    "text": "[Applause]",
    "start": "91060",
    "end": "99269"
  },
  {
    "text": "hello and welcome to JS party this is kall I'll be your MC this week I'm so",
    "start": "99680",
    "end": "106079"
  },
  {
    "text": "excited to be back on the show and these guys miss me so much they let me run things today um I am joined by the one",
    "start": "106079",
    "end": "113159"
  },
  {
    "text": "and only Jared Santo Jared how you doing what's up man good to have you back yeah",
    "start": "113159",
    "end": "120520"
  },
  {
    "text": "yeah and Nick nii Hoy Hoy welcome back ho Hoy I cannot tell you how much I've",
    "start": "120520",
    "end": "126119"
  },
  {
    "text": "missed that Hoy Hoy all right so today y'all are going to indulge me and talk about something that I have been digging",
    "start": "126119",
    "end": "133000"
  },
  {
    "text": "into quite a bit over the last 3 to six months both while I was gone but even some before that which is the subject of",
    "start": "133000",
    "end": "140879"
  },
  {
    "text": "graphql and I think from what I was hearing yall have different levels of experience so obviously I'm going to",
    "start": "140879",
    "end": "148080"
  },
  {
    "text": "pick on you a lot and make you explain things so that we get that played out in front of everybody but let's start with",
    "start": "148080",
    "end": "153720"
  },
  {
    "text": "just kind of describing what is graphql and I actually want to hear everybody's answer starting from the least",
    "start": "153720",
    "end": "159239"
  },
  {
    "text": "knowledgeable so Jared you said you had only played a tiny tiny bit how dare you from your perspective what is graphql",
    "start": "159239",
    "end": "165879"
  },
  {
    "text": "yeah so I've talked about it a lot but I haven't used it a lot most my experience with graphql is toing with it with the",
    "start": "165879",
    "end": "172519"
  },
  {
    "text": "GitHub API and so I can tell you what I think graphql is as a noob and that would be an API architecture wherein the",
    "start": "172519",
    "end": "182920"
  },
  {
    "text": "API clients are allowed to craft queries and",
    "start": "182920",
    "end": "188040"
  },
  {
    "text": "mutations according to what's been laid out by the API provider and can put",
    "start": "188040",
    "end": "193640"
  },
  {
    "text": "together the exact data they require to uh suck down into their little API",
    "start": "193640",
    "end": "198720"
  },
  {
    "text": "clients there's probably more to it than that but that's my Noob description how' I do not too bad Nick do you want to add",
    "start": "198720",
    "end": "206159"
  },
  {
    "text": "or amend anything on that yeah so previously I've used libraries like D3",
    "start": "206159",
    "end": "211640"
  },
  {
    "text": "and chartjs to make these graphs but this is the next iteration on that a full language to create awesome",
    "start": "211640",
    "end": "218879"
  },
  {
    "text": "graphing quick libraries yeah I I think that that kind",
    "start": "218879",
    "end": "224439"
  },
  {
    "text": "of goes to my understanding of it it's all schema driven and type safe so the",
    "start": "224439",
    "end": "229879"
  },
  {
    "text": "queries know exactly what they can pull and exactly what they will get back uh which is pretty cool and as opposed to",
    "start": "229879",
    "end": "236879"
  },
  {
    "text": "something like rest where you have like specific end points to fetch things from you kind of just have like a grab bag",
    "start": "236879",
    "end": "244480"
  },
  {
    "text": "endpoint where you can just say this is what I want and this is all of the properties that I specifically want on",
    "start": "244480",
    "end": "249840"
  },
  {
    "text": "that and then you can have relationships between that so like one example that I always think of is like pulling a tweet",
    "start": "249840",
    "end": "256160"
  },
  {
    "text": "you can grab the Tweet but then you can say I also want the number of likes that it has and then I also want the replies",
    "start": "256160",
    "end": "262120"
  },
  {
    "text": "to that which would be other tweets that are all related to that top tweet which",
    "start": "262120",
    "end": "267160"
  },
  {
    "text": "may or may not be correct but that's the way I at least think about it in my mind how does this metaphor apply kall so the",
    "start": "267160",
    "end": "273680"
  },
  {
    "text": "server metaphor you're at a restaurant right an API I think of it like serving up stuff you know so AR rest API where",
    "start": "273680",
    "end": "281080"
  },
  {
    "text": "you have end points that n just describe this would be like where your waiter comes and like here here's the menu right what would you like to order and",
    "start": "281080",
    "end": "287880"
  },
  {
    "text": "you say I'll take a hamburger and they say okay I'll go get you a hamburger they send it back whereas maybe a graphi",
    "start": "287880",
    "end": "293639"
  },
  {
    "text": "is more like an open Buffet where it's like here's all of our food you know what's in front of you pick and choose",
    "start": "293639",
    "end": "299039"
  },
  {
    "text": "what you want make your plate and take it back to your table no that doesn't sound good in these times at",
    "start": "299039",
    "end": "306120"
  },
  {
    "text": "least that would yeah make graphql very uh contagious dangerous sounds dangerous",
    "start": "306120",
    "end": "311199"
  },
  {
    "text": "dangerous yeah I mean I feel like you two have summed it up pretty well I'm not sure I dig the metaphor but one of",
    "start": "311199",
    "end": "317800"
  },
  {
    "text": "the the layers that I would put on top of that is if you think about a rest API everything is centered around resources",
    "start": "317800",
    "end": "325000"
  },
  {
    "text": "and each resource has its own place that you go and get it but if there are relationships between those resources",
    "start": "325000",
    "end": "330880"
  },
  {
    "text": "you have to on the client side understand those relationships and go and fetch the pieces that you want",
    "start": "330880",
    "end": "338880"
  },
  {
    "text": "graphql starts from also having a whole set of resources that's the schema that",
    "start": "338880",
    "end": "345039"
  },
  {
    "text": "you're talking about the schema driven nature of it but it Maps out the connections between those resources so",
    "start": "345039",
    "end": "351800"
  },
  {
    "text": "that anytime you are accessing one resource you can specify all the graph",
    "start": "351800",
    "end": "357400"
  },
  {
    "text": "of relationships you want to follow down and pull down data from then the other piece in terms of having the single",
    "start": "357400",
    "end": "364600"
  },
  {
    "text": "place to go it is one location one endpoint but",
    "start": "364600",
    "end": "369800"
  },
  {
    "text": "there's this set of top level queries that you can run where the API provider",
    "start": "369800",
    "end": "376880"
  },
  {
    "text": "still gets to Define like what are the ways into my Buffet so to speak so oh I",
    "start": "376880",
    "end": "382720"
  },
  {
    "text": "knew it was coming back around see you actually do like this metaphor the more you think about it keep going please oh",
    "start": "382720",
    "end": "388479"
  },
  {
    "text": "I'll play with anything you give me you know that but uh you can't necessarily",
    "start": "388479",
    "end": "393520"
  },
  {
    "text": "grab at the top level every resource that you might want to access some resources might only be accessible",
    "start": "393520",
    "end": "400039"
  },
  {
    "text": "within the context of another resource and the options that you have",
    "start": "400039",
    "end": "405160"
  },
  {
    "text": "available are those top level queries so you can think of everything within graphql that you're querying as a graph",
    "start": "405160",
    "end": "412800"
  },
  {
    "text": "that starts with a single node at the top which is a query so quer is the top",
    "start": "412800",
    "end": "418240"
  },
  {
    "text": "then it steps down a relationship to here's a set of queries that are available maybe let's use the GitHub API",
    "start": "418240",
    "end": "423960"
  },
  {
    "text": "as an example if we look at the GitHub API what are the queries or public",
    "start": "423960",
    "end": "430800"
  },
  {
    "text": "schema that's available graphql API queries like the first one that it lists",
    "start": "430800",
    "end": "436319"
  },
  {
    "text": "is Marketplace listings so that would be one hop down that's going to give you a set of",
    "start": "436319",
    "end": "441720"
  },
  {
    "text": "listings in the marketplace does that have any relationships that actually doesn't have",
    "start": "441720",
    "end": "447199"
  },
  {
    "text": "relationships but for from that you can kind of hop down and ask for the sets of",
    "start": "447199",
    "end": "453199"
  },
  {
    "text": "things that you would want from that query so say we were doing your Buffet query you might say that you can only",
    "start": "453199",
    "end": "460680"
  },
  {
    "text": "start with pancakes or eggs and those are the top",
    "start": "460680",
    "end": "467080"
  },
  {
    "text": "level things you can't just get bacon on its own it's a breakfast buffet but you could get eggs with a relationship to bacon or you could get pancakes in a",
    "start": "467080",
    "end": "473479"
  },
  {
    "text": "relationship to bacon right like you have this these sort of Entre into the API that you can start with and then you",
    "start": "473479",
    "end": "479599"
  },
  {
    "text": "can follow down the relationships as far as you go what kind of buffet doesn't have bacon as a top level entry come on",
    "start": "479599",
    "end": "486080"
  },
  {
    "text": "just start with the bacon and go from there well that's API design right like so one of the things I thought actually",
    "start": "486080",
    "end": "492879"
  },
  {
    "text": "before I started dealing with graphql is okay everything's there where's the API like do you still have to design your",
    "start": "492879",
    "end": "498400"
  },
  {
    "text": "API and that set of top level queries",
    "start": "498400",
    "end": "503680"
  },
  {
    "text": "actually makes a pretty big difference in terms of how do you think about exposing things in your API what are the",
    "start": "503680",
    "end": "510440"
  },
  {
    "text": "Core Concepts that are the ways that people can enter into this thing and maybe you want to expose everything at",
    "start": "510440",
    "end": "516360"
  },
  {
    "text": "the top there maybe every resource that you have has a top level query so you know I can always start with bacon and",
    "start": "516360",
    "end": "522360"
  },
  {
    "text": "then get the things related to bacon and I can always start with something else and get the things related to that but that may not be the right",
    "start": "522360",
    "end": "528760"
  },
  {
    "text": "answer isn't it like rest apis in that way I mean your endpoints are your top level menu items right in a restful API",
    "start": "528760",
    "end": "536200"
  },
  {
    "text": "in many ways yes it's like if you had a a rest API but at every point that you had a rest",
    "start": "536200",
    "end": "541839"
  },
  {
    "text": "API like say you have a relationship idea foreign key in a traditional rest",
    "start": "541839",
    "end": "547040"
  },
  {
    "text": "API you'd get that key and then you'd go fetch the resource for that key from another endpoint the resource for that",
    "start": "547040",
    "end": "552480"
  },
  {
    "text": "endpoint here you can just say I want to follow that relationship give me back all the data why is that better there's",
    "start": "552480",
    "end": "558880"
  },
  {
    "text": "a couple of reasons why it has advantages it also can have disadvantages I think it's really",
    "start": "558880",
    "end": "565360"
  },
  {
    "text": "interesting to look at what are some of the pros and cons of graphql because this is not a pan it's not a better for",
    "start": "565360",
    "end": "571959"
  },
  {
    "text": "everything um one of the ways in which it is better is it reduces the number of",
    "start": "571959",
    "end": "578519"
  },
  {
    "text": "network calls that you're going to have to make especially like on a mobile phone or something like that you want to",
    "start": "578519",
    "end": "584880"
  },
  {
    "text": "be making as few calls over the slow part of the network as possible the slow",
    "start": "584880",
    "end": "590079"
  },
  {
    "text": "part of the network is between the phone and the API server so if you can consolidate that all into a single",
    "start": "590079",
    "end": "595519"
  },
  {
    "text": "request and pull back only the data you need you can be much more Network efficient even if on the back end like",
    "start": "595519",
    "end": "601839"
  },
  {
    "text": "one way that you can Implement a graphql server is have a wrapper around a rest API that may still be valuable but then",
    "start": "601839",
    "end": "608760"
  },
  {
    "text": "all those independent API calls are happening in your data center Network which is super fast this might be a good",
    "start": "608760",
    "end": "614800"
  },
  {
    "text": "time to actually talk a little bit about some of those benefits and drawbacks I'd",
    "start": "614800",
    "end": "620440"
  },
  {
    "text": "be once again curious Nick it sounds like you've been playing with it a little bit what have you found to be good or bad in your first look yeah so I",
    "start": "620440",
    "end": "628600"
  },
  {
    "text": "guess I'll start with the B first it's another layer on top of things to learn this whole like language for like",
    "start": "628600",
    "end": "634560"
  },
  {
    "text": "defining a schema or defining your query that you have to learn so there's syntax involved around that it's got types to",
    "start": "634560",
    "end": "641320"
  },
  {
    "text": "it which are different from like the way you define typescript types so you have to learn that like you have to keep",
    "start": "641320",
    "end": "646760"
  },
  {
    "text": "those separate and then I could be wrong about this but don't you have to explicitly Define everything that you",
    "start": "646760",
    "end": "652600"
  },
  {
    "text": "want to get back whereas with like a rest in point you can just say like give me back all the bacon and it'll give you",
    "start": "652600",
    "end": "658519"
  },
  {
    "text": "back whatever it has on that all the bacon yeah yeah yeah it is much more for Bose yeah and sometimes I don't know",
    "start": "658519",
    "end": "665480"
  },
  {
    "text": "what I want and so that's bad yeah it's it's harder to programmatically explore",
    "start": "665480",
    "end": "671639"
  },
  {
    "text": "in that way though it does expose an endpoint that lets you programmatically explore what the schemas look like are",
    "start": "671639",
    "end": "677839"
  },
  {
    "text": "you talking about like the is it called graphic like graphic cool like that tool",
    "start": "677839",
    "end": "682880"
  },
  {
    "text": "area yeah or I mean so your graphql server actually I don't know necessarily",
    "start": "682880",
    "end": "687920"
  },
  {
    "text": "if that is I think that that is part of the spec I know it's a part of the graphql server we've been using it has a schema endpoint where you can just your",
    "start": "687920",
    "end": "694760"
  },
  {
    "text": "client can fetch back here's the schema for all of the things M and then you could programmatically explore what's in",
    "start": "694760",
    "end": "701040"
  },
  {
    "text": "there or not but if you're just poking around at it yeah it is definitely more painful then let me fetch this and",
    "start": "701040",
    "end": "708279"
  },
  {
    "text": "examine the data yeah right that is one thing that I was going to put in the Pro category is that that tool and",
    "start": "708279",
    "end": "714279"
  },
  {
    "text": "specifically like those calls that it's making to figure out what you can actually get those are introspection",
    "start": "714279",
    "end": "719360"
  },
  {
    "text": "queries that it is doing on its own and it's really cool that that's just kind of built into the spec to say like tell",
    "start": "719360",
    "end": "725040"
  },
  {
    "text": "me what I can do here and then bring that back and then you can build really powerful tools like that I think it's",
    "start": "725040",
    "end": "730079"
  },
  {
    "text": "called graphy cool it gives me a blank canvas to start writing a query and I can hit control space and it will tell",
    "start": "730079",
    "end": "735880"
  },
  {
    "text": "me what I can autocomplete here and what makes sense and it'll immediately like show a little red line on that line if",
    "start": "735880",
    "end": "740920"
  },
  {
    "text": "it's something that I can't actually fetch or if it's not formed correctly so it it really does help you as much as",
    "start": "740920",
    "end": "746120"
  },
  {
    "text": "possible uh when you're exploring like that which is what I've been doing a lot um so I do like that and I do like the",
    "start": "746120",
    "end": "753519"
  },
  {
    "text": "tooling so far that I've been playing around with is really powerful in that I basically give it like this is what our",
    "start": "753519",
    "end": "760880"
  },
  {
    "text": "our database model looks like and this is the type of queries that you can expect and it just figures out all the",
    "start": "760880",
    "end": "769000"
  },
  {
    "text": "plumbing for me and then gives me back exactly what I want which is really cool that is super cool and I feel like",
    "start": "769000",
    "end": "775519"
  },
  {
    "text": "I mean you mentioned the typing being different than in types script at least with the tooling that we're using you",
    "start": "775519",
    "end": "781880"
  },
  {
    "text": "can autogenerate typescript types based on the queries that you're running Ah that's cool Define a particular query",
    "start": "781880",
    "end": "789040"
  },
  {
    "text": "and have it generate an explicit typescript type that has only the fields that are coming back from your query",
    "start": "789040",
    "end": "794560"
  },
  {
    "text": "which lets you just kind of get really nice Ty end to end type safety is that",
    "start": "794560",
    "end": "800360"
  },
  {
    "text": "like Apollo Cod genen yeah yeah uh so I'm playing with that too and that is",
    "start": "800360",
    "end": "805920"
  },
  {
    "text": "cool but I'm annoyed with it right now because it doesn't if you change those it doesn't actually go and clean up the",
    "start": "805920",
    "end": "811720"
  },
  {
    "text": "types that it created previously so like my result right now is just blow away",
    "start": "811720",
    "end": "816800"
  },
  {
    "text": "that generated types directory and then let it regenerate everything which is kind of annoying but yeah I'm sure it's",
    "start": "816800",
    "end": "822959"
  },
  {
    "text": "something that can be fixed well so far I've gone the opposite way with I don't really touch schema generation on my own",
    "start": "822959",
    "end": "829600"
  },
  {
    "text": "so I don't think about the graphql schema I am using a library called Nest that has a",
    "start": "829600",
    "end": "835440"
  },
  {
    "text": "graphql plugin for it and so I Define all the types for like my what my",
    "start": "835440",
    "end": "841040"
  },
  {
    "text": "queries will look like in typescript with decorators and then it generates a schema for me from",
    "start": "841040",
    "end": "847160"
  },
  {
    "text": "that yeah I think one of the really cool things that you're touching on a little bit in the tooling is all the same type",
    "start": "847160",
    "end": "853480"
  },
  {
    "text": "of magic that you can get with an IDE when you go to a strongly typed language and all of the amazing different",
    "start": "853480",
    "end": "860279"
  },
  {
    "text": "guarantees and other things you can do this allows you to do end to endend with your API server well you were touching",
    "start": "860279",
    "end": "865800"
  },
  {
    "text": "on Discovery there Nick and I think it's it's worth pointing out maybe it's not",
    "start": "865800",
    "end": "871120"
  },
  {
    "text": "worth pointing out but I point it out anyways that restful apis",
    "start": "871120",
    "end": "876680"
  },
  {
    "text": "in idea are also discoverable because of the hyper media linking in the response",
    "start": "876680",
    "end": "883720"
  },
  {
    "text": "it's just that restful apis in practice don't usually Implement that part of restful apis the concept GitHub actually",
    "start": "883720",
    "end": "891040"
  },
  {
    "text": "had a really nice hypermedia API where you could say here is the repo and here are all of the issues the response could",
    "start": "891040",
    "end": "897600"
  },
  {
    "text": "say here's my repo object and and as a part of that object is a link to a URL wherein all of those issues for the repo",
    "start": "897600",
    "end": "905600"
  },
  {
    "text": "exist my point is you could also in concept programmatically crawl or",
    "start": "905600",
    "end": "911120"
  },
  {
    "text": "discover a restful API like you could with the schema what's it called schema endpoint where it will tell you your",
    "start": "911120",
    "end": "917759"
  },
  {
    "text": "graphql schema and so that would have been pretty cool if it took off unfortunately it's difficult to implement serers side and it's just",
    "start": "917759",
    "end": "923399"
  },
  {
    "text": "always one more thing and lots of times that's the part that gets dropped off of the rful apis which leaves developers",
    "start": "923399",
    "end": "928560"
  },
  {
    "text": "like us instead of letting our tooling discover what how it all works is basically just reading the docs and",
    "start": "928560",
    "end": "934319"
  },
  {
    "text": "saying where are the comments and then constructing the URL so in practice it didn't really pay off but in in concept",
    "start": "934319",
    "end": "940079"
  },
  {
    "text": "rful apis also were supposed to be discoverable and some of them are like the better ones the better implemented",
    "start": "940079",
    "end": "945839"
  },
  {
    "text": "ones I think part of what makes that hard to implement is because it requires",
    "start": "945839",
    "end": "951600"
  },
  {
    "text": "a sort of centralization of thought because every endpoint needs to know about every other endpoint or at least",
    "start": "951600",
    "end": "956759"
  },
  {
    "text": "all of their references and as you say a good API that's well and centrally",
    "start": "956759",
    "end": "962000"
  },
  {
    "text": "controlled and designed is going to have that but many are not and they're developed independently whereas graphql",
    "start": "962000",
    "end": "969360"
  },
  {
    "text": "by being more rigid it forces into everything is going through this graphql end point so we know about everything so",
    "start": "969360",
    "end": "975440"
  },
  {
    "text": "we can force that level of explicitness and that produces the tooling right the thing that happened around restful apis",
    "start": "975440",
    "end": "981600"
  },
  {
    "text": "is because it wasn't reliable to have those linking between resources the tooling wasn't built out in order to do",
    "start": "981600",
    "end": "988079"
  },
  {
    "text": "the Discover ability right the actual Discovery and so you couldn't rely on it so habitually we we didn't think about",
    "start": "988079",
    "end": "994839"
  },
  {
    "text": "it and so we always just go read the docs and find the end points and hardcode those into our clients and whatnot so I think a big win is that",
    "start": "994839",
    "end": "1002519"
  },
  {
    "text": "because it's there from the start by default on all graph apis now that you can build your tooling saying it's going",
    "start": "1002519",
    "end": "1008160"
  },
  {
    "text": "to be there and that makes a huge difference in [Music]",
    "start": "1008160",
    "end": "1017839"
  },
  {
    "text": "practice [Music]",
    "start": "1017839",
    "end": "1026520"
  },
  {
    "text": "this episode is brought to you by digital ocean droplets manage kubernetes managed databases spaces object storage",
    "start": "1026520",
    "end": "1034520"
  },
  {
    "text": "volume block storage Advanced networking like virtual private clouds and Cloud firewalls developer tooling like the",
    "start": "1034520",
    "end": "1040678"
  },
  {
    "text": "robust API and CLI to make sure you can interact with your infrastructure the way you want to digital ocean is",
    "start": "1040679",
    "end": "1047360"
  },
  {
    "text": "designed for developers and built for businesses join Over 150,000 businesses",
    "start": "1047360",
    "end": "1053240"
  },
  {
    "text": "that develop manage and scale their applications with digital ocean head to do. changelog to get started with a $100",
    "start": "1053240",
    "end": "1060520"
  },
  {
    "text": "credit again do. [Music]",
    "start": "1060520",
    "end": "1077840"
  },
  {
    "text": "changelog all right so we've talked some about graphql as a mental model what some of",
    "start": "1077840",
    "end": "1084679"
  },
  {
    "text": "the pros some of the cons things like that even some of the different tooling that it creates let's now dive into",
    "start": "1084679",
    "end": "1091039"
  },
  {
    "text": "something a little bit more concrete looking at what are different approaches to actually implementing graphql what",
    "start": "1091039",
    "end": "1097360"
  },
  {
    "text": "are the different pieces of it that you would need to implement and maybe some",
    "start": "1097360",
    "end": "1102400"
  },
  {
    "text": "specific examples and implementations Nick you want to lead us off since you've been working",
    "start": "1102400",
    "end": "1107880"
  },
  {
    "text": "particularly with one sure uh so like I said I've been using uh nestjs for this and its own plugin",
    "start": "1107880",
    "end": "1115600"
  },
  {
    "text": "called nestjs graphql that is actually just a wrapper on top of Apollo or",
    "start": "1115600",
    "end": "1122320"
  },
  {
    "text": "there's another one I think but Apollo is the one that I'm using fastify I think is another thing anyway it is",
    "start": "1122320",
    "end": "1129400"
  },
  {
    "text": "interesting because it lets me just like set up everything very Sim in a very similar way to the way that I was",
    "start": "1129400",
    "end": "1135400"
  },
  {
    "text": "setting up rest end points with Nest where I can create instead of a controller to control all of the the",
    "start": "1135400",
    "end": "1140480"
  },
  {
    "text": "restful endpoints I have I create a resolver and the resolver can have like a query method or specifically like the",
    "start": "1140480",
    "end": "1146600"
  },
  {
    "text": "pieces of the graphql model that I want to fetch and then it can pull that data",
    "start": "1146600",
    "end": "1151840"
  },
  {
    "text": "in do any kind of processing it needs to the query and then pass that along to a service that can go read from the",
    "start": "1151840",
    "end": "1157520"
  },
  {
    "text": "database and query exactly what I need and then deliver that or do any other",
    "start": "1157520",
    "end": "1162919"
  },
  {
    "text": "kind of processing so it's really nice and easy to set up it's a typescript first library and it's very decorator",
    "start": "1162919",
    "end": "1169799"
  },
  {
    "text": "heavy which is interesting but it does things kind of magically but it's pretty",
    "start": "1169799",
    "end": "1175840"
  },
  {
    "text": "easy to pick up on you used a keyword there that I don't think we actually dug",
    "start": "1175840",
    "end": "1181280"
  },
  {
    "text": "into defining yet but that is pretty core to implementing at least graphql servers the server side which is",
    "start": "1181280",
    "end": "1187400"
  },
  {
    "text": "resolver you want to describe a little bit what that is or I can take a stab at it or whatever you prefer as best I can",
    "start": "1187400",
    "end": "1195039"
  },
  {
    "text": "I'll try so a resolver would be something that like provides the instructions for taking like the graphql",
    "start": "1195039",
    "end": "1202640"
  },
  {
    "text": "string the the query that it receives and actually doing something with that",
    "start": "1202640",
    "end": "1208840"
  },
  {
    "text": "so passing that off to do whatever it needs to with that so that could be like",
    "start": "1208840",
    "end": "1213880"
  },
  {
    "text": "you know making sure that I don't know I'm falling apart here a little bit but maybe like type-checking arguments that",
    "start": "1213880",
    "end": "1219280"
  },
  {
    "text": "might be passed in to the query or things like that could happen there yeah I think that's good the resolvers take",
    "start": "1219280",
    "end": "1225200"
  },
  {
    "text": "responsibility for mapping from the query to the data and one of the interesting things that I've seen there",
    "start": "1225200",
    "end": "1231840"
  },
  {
    "text": "is like those can be more or less granular so you could have a single resolver that resolves all of an object",
    "start": "1231840",
    "end": "1238280"
  },
  {
    "text": "everything that it has there or you can actually break apart different resolvers",
    "start": "1238280",
    "end": "1243480"
  },
  {
    "text": "per field in that object depending on how your data is stored and so if for",
    "start": "1243480",
    "end": "1249400"
  },
  {
    "text": "example you're building up a graphql object out of several different objects in your database",
    "start": "1249400",
    "end": "1256120"
  },
  {
    "text": "those references to different objects could actually be in different resolvers or different parts of the object could",
    "start": "1256120",
    "end": "1261799"
  },
  {
    "text": "be in different resolvers and then if those fields aren't qued those resolvers aren't called you don't",
    "start": "1261799",
    "end": "1267960"
  },
  {
    "text": "have to take those database HS so it they can actually give you a mechanism for making your back end much more",
    "start": "1267960",
    "end": "1275799"
  },
  {
    "text": "efficient speaking of back ends and efficiency what happens on a back end when somebody crafts a graph UL API that",
    "start": "1275799",
    "end": "1283840"
  },
  {
    "text": "just spans like six of your tables and just causes all these joints cuz let's take a Blog SC right blog post has",
    "start": "1283840",
    "end": "1290760"
  },
  {
    "text": "comments comments have authors authors have blog posts so couldn't I just say blog. comments. authors. first. blog.",
    "start": "1290760",
    "end": "1300760"
  },
  {
    "text": "comments or post.com can I just drill down and just completely screw over your back",
    "start": "1300760",
    "end": "1307200"
  },
  {
    "text": "end yes okay cool and this is actually one",
    "start": "1307200",
    "end": "1313840"
  },
  {
    "text": "of the things that I saw coming into this is the first version of the",
    "start": "1313840",
    "end": "1319480"
  },
  {
    "text": "fql server that I've been working a lot on was written by somebody who had a front end background who did not",
    "start": "1319480",
    "end": "1327039"
  },
  {
    "text": "understand databases and schema right and it was ridiculously slow even in",
    "start": "1327039",
    "end": "1333840"
  },
  {
    "text": "good cases and so easy to write pathological queries that would just totally destroy the back end and take",
    "start": "1333840",
    "end": "1340960"
  },
  {
    "text": "minutes to resolve mhm there's a few different layers to this so one is",
    "start": "1340960",
    "end": "1346919"
  },
  {
    "text": "appropriately setting up your results if somebody's asking for a particular",
    "start": "1346919",
    "end": "1352679"
  },
  {
    "text": "what was your example post and their comment and they whatever and they're whatever and they're just going down one whole thing like your resolver should be",
    "start": "1352679",
    "end": "1358679"
  },
  {
    "text": "such that it just follows that one Trail and doesn't load everything at this level then everything at that level and then everything at that level and you",
    "start": "1358679",
    "end": "1366320"
  },
  {
    "text": "may want to set up your top level queries such that it's impossible to do",
    "start": "1366320",
    "end": "1371960"
  },
  {
    "text": "something that's going to span all of those different things but there are other techniques you can do you can",
    "start": "1371960",
    "end": "1377000"
  },
  {
    "text": "Implement checks on how complex is this query how much data is going to various",
    "start": "1377000",
    "end": "1382400"
  },
  {
    "text": "other things and just throw errors and say hey no you can't make that query it's too",
    "start": "1382400",
    "end": "1388559"
  },
  {
    "text": "much doesn't that break the promise of graphql I mean I'm supposed to be able to just go up to the buffet and grab what I want",
    "start": "1388559",
    "end": "1395200"
  },
  {
    "text": "yeah it's not safe it does but it is still your API I agree and one of the",
    "start": "1395200",
    "end": "1401640"
  },
  {
    "text": "tradeoffs that you get as you create this great flexibility and this great",
    "start": "1401640",
    "end": "1407120"
  },
  {
    "text": "power is there's now great responsibility that you need to put limits on it or you need to be confident",
    "start": "1407120",
    "end": "1413960"
  },
  {
    "text": "that your backend can handle every type of query that can be crafted it seems like it would map well on top of a",
    "start": "1413960",
    "end": "1419640"
  },
  {
    "text": "denormalized database or a a document-based database whereas if you were retrofitting a graphql API on top",
    "start": "1419640",
    "end": "1426640"
  },
  {
    "text": "of an established highly relational charted even like a very established relational database that you",
    "start": "1426640",
    "end": "1434120"
  },
  {
    "text": "could potentially expose more of the performance problems inless unless you take very precise and Extreme Measures",
    "start": "1434120",
    "end": "1440559"
  },
  {
    "text": "in order to stop that whereas maybe it's mapped on top of something that already is more document oriented you're not",
    "start": "1440559",
    "end": "1445919"
  },
  {
    "text": "going to be Crossing tables anyways because your data is right there stored in the same document is that a fair",
    "start": "1445919",
    "end": "1450960"
  },
  {
    "text": "assumption I think that's definitely fair I think it's really easy",
    "start": "1450960",
    "end": "1458400"
  },
  {
    "text": "to if you're not careful create the ability to do pathological",
    "start": "1458400",
    "end": "1464640"
  },
  {
    "text": "queries and implementing a graphql server on top of a any sort of complex",
    "start": "1464640",
    "end": "1471480"
  },
  {
    "text": "data situation is not a trivial task this is something that you know there",
    "start": "1471480",
    "end": "1476799"
  },
  {
    "text": "should be somebody who's an expert in that data system on there though one of the things you highlight that that is",
    "start": "1476799",
    "end": "1483120"
  },
  {
    "text": "kind of interesting to explore is you can also set up what is essentially a proxy",
    "start": "1483120",
    "end": "1489320"
  },
  {
    "text": "layer on top of an existing rest API so if you have a big established working",
    "start": "1489320",
    "end": "1495600"
  },
  {
    "text": "system and you have a rest API there you can set up a proxy that just is calling",
    "start": "1495600",
    "end": "1500919"
  },
  {
    "text": "out to your rest endpoints and rest is very good for cacheability so you can",
    "start": "1500919",
    "end": "1506399"
  },
  {
    "text": "have that proxy be caching things in all appropriate ways and managing the cash so that you can take advantage of those",
    "start": "1506399",
    "end": "1513440"
  },
  {
    "text": "individual end points not being pathological and with that you still get a lot of benefits in terms of you insert",
    "start": "1513440",
    "end": "1520279"
  },
  {
    "text": "typing such that you have all these tooling benefits exposed to the client developers and you get that advantage",
    "start": "1520279",
    "end": "1528440"
  },
  {
    "text": "that all of those individual API H uh requests are happening inside of your fast data center instead of over the",
    "start": "1528440",
    "end": "1534919"
  },
  {
    "text": "slow public network that's pretty cool coming back a little bit to",
    "start": "1534919",
    "end": "1541600"
  },
  {
    "text": "implementation options so I guess that piece of about being able to wrap a rest AP maybe you",
    "start": "1541600",
    "end": "1548159"
  },
  {
    "text": "could imagine the graphql proxy as your bacon that you're wrapping around everything you know it makes everything",
    "start": "1548159",
    "end": "1554279"
  },
  {
    "text": "taste better well played well before you get into specific ones that you might build I just want to mention that what I",
    "start": "1554279",
    "end": "1559640"
  },
  {
    "text": "see a lot of which seems like is cool to try out graphql from a server side",
    "start": "1559640",
    "end": "1565080"
  },
  {
    "text": "provider is probably not scalable and usable it's like so many of these things are like hey we'll just generate your",
    "start": "1565080",
    "end": "1570279"
  },
  {
    "text": "graph API for you I mean take your postgress database take your mongod DB take your existing rest API and just",
    "start": "1570279",
    "end": "1576200"
  },
  {
    "text": "like slap us in front of it and now you have a graphql API I see a lot of those tools and they are shiny and neat and I",
    "start": "1576200",
    "end": "1582760"
  },
  {
    "text": "would play with them but I wouldn't necessarily think to roll that out on my production system am I off base that on",
    "start": "1582760",
    "end": "1588600"
  },
  {
    "text": "that I don't think you're off base at all I think that those are I mean similar",
    "start": "1588600",
    "end": "1594399"
  },
  {
    "text": "to kind of vanilla active record that you might get in Ruby on Rails or",
    "start": "1594399",
    "end": "1600000"
  },
  {
    "text": "vanilla what have you they're great for fast prototyping they're great for early projects and as you develop scale and as",
    "start": "1600000",
    "end": "1608039"
  },
  {
    "text": "you have to deal with complex data you're going to have to deal with those problems as programming problems and",
    "start": "1608039",
    "end": "1614440"
  },
  {
    "text": "you're going to have to think about your schema design cool so so Nest Nick is a specific node library that does this for",
    "start": "1614440",
    "end": "1622159"
  },
  {
    "text": "you or that you use to build it yeah that you use to build it and so Nest",
    "start": "1622159",
    "end": "1628600"
  },
  {
    "text": "like default Nest would be for rest end points and then they have a plugin that lets you okay instead of creating",
    "start": "1628600",
    "end": "1634480"
  },
  {
    "text": "controllers for those create resolvers for and mutations for for graphql and N",
    "start": "1634480",
    "end": "1640159"
  },
  {
    "text": "is a tool like expressjs or like any sort of service like a it's an HTTP Library yeah so it's a a repper on top",
    "start": "1640159",
    "end": "1647480"
  },
  {
    "text": "of Express too oh it is just kind of an amalgamation of everything so it's not like Express it's just rapping Express",
    "start": "1647480",
    "end": "1653240"
  },
  {
    "text": "yeah old Russian doll we're at the level of meta Frameworks now everything's a",
    "start": "1653240",
    "end": "1658799"
  },
  {
    "text": "meta framework right this is true that's where the interesting stuff is happening I like to get close to the metal and use",
    "start": "1658799",
    "end": "1665919"
  },
  {
    "text": "expressjs that's kind of one of the downsides that I didn't mention is if you just wanted to like do a quick query",
    "start": "1665919",
    "end": "1671600"
  },
  {
    "text": "like there's a lot more ceremony around making a request whereas with a rest in point I can just you know from my Dev",
    "start": "1671600",
    "end": "1677200"
  },
  {
    "text": "tools console use Fetch and grab the data and I can still do that but I have to know exactly",
    "start": "1677200",
    "end": "1683399"
  },
  {
    "text": "how the query is formed like in that restful call and how arguments are",
    "start": "1683399",
    "end": "1688880"
  },
  {
    "text": "passed and things like that and send it along but then another thing that has always confused me when I look at rest",
    "start": "1688880",
    "end": "1695039"
  },
  {
    "text": "is or sorry a graphql is there seem to be well are there different flavors of",
    "start": "1695039",
    "end": "1700679"
  },
  {
    "text": "it Apollo seems like a flavor I don't know I might be referring to it",
    "start": "1700679",
    "end": "1705840"
  },
  {
    "text": "incorrectly but I always hear it referred to as like a flavor of graphql is that an accurate way of putting it",
    "start": "1705840",
    "end": "1712120"
  },
  {
    "text": "that's a great question that I don't have a super strong sense what is a flavor let me add a couple of a little",
    "start": "1712120",
    "end": "1718440"
  },
  {
    "text": "more detail on that so there have been evolutions of the spec so as in anything with an evolving spec you're going to",
    "start": "1718440",
    "end": "1724440"
  },
  {
    "text": "have different flavors where people have chosen to stick at one version of spec",
    "start": "1724440",
    "end": "1729799"
  },
  {
    "text": "and maybe haven't upgraded another thing that is interesting to look at and",
    "start": "1729799",
    "end": "1735279"
  },
  {
    "text": "explore is that graphql has this ESS enally like abstraction leaker or",
    "start": "1735279",
    "end": "1741039"
  },
  {
    "text": "whatever for the query language which is directives you can Define relatively",
    "start": "1741039",
    "end": "1746080"
  },
  {
    "text": "arbitrary and I haven't used this too much so I don't know the boundaries of that arbitrary but you can Define",
    "start": "1746080",
    "end": "1751559"
  },
  {
    "text": "relatively arbitrary new behavior in logic in your graphql API using directives and these can then function",
    "start": "1751559",
    "end": "1758000"
  },
  {
    "text": "essentially as decorators on your queries in different ways so that is",
    "start": "1758000",
    "end": "1763360"
  },
  {
    "text": "another way which different implementations of graphql can potentially create what feel like",
    "start": "1763360",
    "end": "1769679"
  },
  {
    "text": "different flavors because if they have built-in decorators that aren't user defined but are just part of when you",
    "start": "1769679",
    "end": "1775279"
  },
  {
    "text": "install Apollo you get this but that's mostly just me spitballing I don't have a a super good sense there's also",
    "start": "1775279",
    "end": "1783279"
  },
  {
    "text": "aspects of it that are not defined in the spec but are like determined by the implementation and people are starting",
    "start": "1783279",
    "end": "1788600"
  },
  {
    "text": "to figure out Norms such as like how do you handle pagination and whatnot where it's like that's not formalized but",
    "start": "1788600",
    "end": "1795120"
  },
  {
    "text": "Apollo does have a way that it does it and then like you can do it that way or maybe you can do it some other way yeah",
    "start": "1795120",
    "end": "1801159"
  },
  {
    "text": "I had to deal with pagination recently it did not feel natural and it was something where I essentially created a",
    "start": "1801159",
    "end": "1808240"
  },
  {
    "text": "different top level query and a different object that included pagination related things and then had",
    "start": "1808240",
    "end": "1813840"
  },
  {
    "text": "the repeating value cursor yeah yeah I use a library called sjs query where I",
    "start": "1813840",
    "end": "1820600"
  },
  {
    "text": "just give it a resolver and the dto or what the queries will look like and it",
    "start": "1820600",
    "end": "1826440"
  },
  {
    "text": "will automatically pinate everything that's one of the cool really cool libraries that we're using on top of all",
    "start": "1826440",
    "end": "1831919"
  },
  {
    "text": "of this interesting what's that called it's called nestjs query I feel like Nick probably doesn't ever actually",
    "start": "1831919",
    "end": "1837960"
  },
  {
    "text": "write code he just kind of like instructs things to do the coding for him like he's like this is what I use",
    "start": "1837960",
    "end": "1844799"
  },
  {
    "text": "they're called macros down underneath there inside my Vim macro it does all",
    "start": "1844799",
    "end": "1849960"
  },
  {
    "text": "the coding for me I think Nick is just operating at a higher level of abstraction than the rest of us that's",
    "start": "1849960",
    "end": "1856519"
  },
  {
    "text": "my point yeah if you abstract it enough then he's either a wizard or a fool I can't figure out which one I think he's",
    "start": "1856519",
    "end": "1862039"
  },
  {
    "text": "probably a wizard I think he's a wizard I'm really curious how that handles pagination so",
    "start": "1862039",
    "end": "1868720"
  },
  {
    "text": "what does it do to the underlying queries I'm looking at their docs right now oh interesting so they do kind of a",
    "start": "1868720",
    "end": "1875880"
  },
  {
    "text": "similar thing where they have a meta object that wraps the underlying objects",
    "start": "1875880",
    "end": "1881320"
  },
  {
    "text": "that includes a page info object and then an edges object which has all the different whatever the results were",
    "start": "1881320",
    "end": "1888519"
  },
  {
    "text": "that makes sense yeah so on the client side Nick are you doing the client and the server side in this project uh just",
    "start": "1888519",
    "end": "1894519"
  },
  {
    "text": "the server side right now like are you using the graph Q API or you're not even using it yourself right that is",
    "start": "1894519",
    "end": "1900279"
  },
  {
    "text": "something I wanted to bring up is if you had any experience with like I guess service to service graphql",
    "start": "1900279",
    "end": "1907799"
  },
  {
    "text": "calls like on the server side is that something that you you've handled before kable Oh interesting no it is not",
    "start": "1907799",
    "end": "1914799"
  },
  {
    "text": "because all of our service to service stuff on our back end right now is using grpc so we're not currently doing that",
    "start": "1914799",
    "end": "1923200"
  },
  {
    "text": "we only use graphql to communicate to the client interesting yeah so I I've only been working on a proof of concept",
    "start": "1923200",
    "end": "1929840"
  },
  {
    "text": "with this stuff for the last few weeks and it's um all server side I just wondered how a client would",
    "start": "1929840",
    "end": "1937039"
  },
  {
    "text": "then interact with the pagination like is maybe the there's an autogenerated client that knows that the way that Nest",
    "start": "1937039",
    "end": "1945159"
  },
  {
    "text": "does pagination there's like a nest client that knows that and so they already do the pagination for you or something that's why I asked",
    "start": "1945159",
    "end": "1951799"
  },
  {
    "text": "that so this NJ query you give it the objects that you're working with and it will Define the schema that includes",
    "start": "1951799",
    "end": "1958399"
  },
  {
    "text": "that page info and and edges as leaves in that in that gra the",
    "start": "1958399",
    "end": "1964200"
  },
  {
    "text": "client knows exactly what it can expect from that on any kind of pageable",
    "start": "1964200",
    "end": "1970039"
  },
  {
    "text": "resolver gotcha that's interesting I think that's actually pretty cool how it's dealing with pagination looking at",
    "start": "1970039",
    "end": "1976159"
  },
  {
    "text": "that now so is Nest only handles the server side or it's generating for you",
    "start": "1976159",
    "end": "1981240"
  },
  {
    "text": "all that client side work as well so that you plug that into whatever you're doing on the client what would be",
    "start": "1981240",
    "end": "1987480"
  },
  {
    "text": "required on the front end on the client I'd want to have access to all of",
    "start": "1987480",
    "end": "1996240"
  },
  {
    "text": "the types clearly I guess that's the main thing is the types and then whatever library is",
    "start": "1996240",
    "end": "2002360"
  },
  {
    "text": "handling how it runs queries and doing caching and things like that so it's I guess the question is is it exporting",
    "start": "2002360",
    "end": "2008480"
  },
  {
    "text": "all those types it has to all right I've answered my own question that's something that I I haven't really",
    "start": "2008480",
    "end": "2014279"
  },
  {
    "text": "touched on yet in my exploration and so I assume that somehow the client would",
    "start": "2014279",
    "end": "2019440"
  },
  {
    "text": "have access to the schema is that right maybe or or like at least like from a tooling level like it knows what it can",
    "start": "2019440",
    "end": "2026960"
  },
  {
    "text": "query based on that and then tools like like Apollo code gen will from what I've",
    "start": "2026960",
    "end": "2032000"
  },
  {
    "text": "gathered that will go through like an as Walker and just find all of the the places where you're making graph qoh",
    "start": "2032000",
    "end": "2038360"
  },
  {
    "text": "look at those queries and then Define interfaces in typescript that match exactly what you'd be getting back or",
    "start": "2038360",
    "end": "2044440"
  },
  {
    "text": "what you expect to get back yes that is correct and I guess",
    "start": "2044440",
    "end": "2050398"
  },
  {
    "text": "what I would want ideally since nestjs is also doing this all in JavaScript or",
    "start": "2050399",
    "end": "2056079"
  },
  {
    "text": "typescript I would love something that lets me have end to end because right now I'm doing graphql in Python and then",
    "start": "2056079",
    "end": "2062520"
  },
  {
    "text": "I'm on the server side and then I'm querying it with JavaScript and there's always this step of okay my client thinks it's doing this it sends this",
    "start": "2062520",
    "end": "2068599"
  },
  {
    "text": "query and then the back end says wait what are you talking about that's not a query right but presumably if you're",
    "start": "2068599",
    "end": "2073638"
  },
  {
    "text": "doing everything end to end in JavaScript or typescript you can deal with that and catch it at the tooling",
    "start": "2073639",
    "end": "2079040"
  },
  {
    "text": "level rather than at the testing runtime level yeah",
    "start": "2079040",
    "end": "2085118"
  },
  {
    "text": "presumably I mean I think Apollo Coden looks at the graphql schema so it does",
    "start": "2085520",
    "end": "2091240"
  },
  {
    "text": "some amount of that I don't know yeah we're getting outside of my six months experience here",
    "start": "2091240",
    "end": "2098480"
  },
  {
    "text": "what I've done in the past for for that kind of sharing is um and not with graphql but with like restful end points",
    "start": "2098480",
    "end": "2105000"
  },
  {
    "text": "is I've used uh so Nest has a plugin for Swagger so it'll gener autogenerate",
    "start": "2105000",
    "end": "2110920"
  },
  {
    "text": "Swagger documentation for all of your endpoints for restful calls and you can export that as a Json file and then I've",
    "start": "2110920",
    "end": "2117119"
  },
  {
    "text": "just written a parser that goes through the Json and creates interfaces out of",
    "start": "2117119",
    "end": "2122720"
  },
  {
    "text": "that that are then just automatically generated and placed into the project not the the most straightforward",
    "start": "2122720",
    "end": "2129320"
  },
  {
    "text": "way but it is a way to kind of not have to think about writing all of those interfaces I love it Nick you always",
    "start": "2129320",
    "end": "2135760"
  },
  {
    "text": "find a way to autogen man generate that stuff I need to suck some of that stuff into my head you're better than I am",
    "start": "2135760",
    "end": "2142359"
  },
  {
    "text": "know I feel like I toil away at my code and Nick just kind of like tells things to do things for him should hang out",
    "start": "2142359",
    "end": "2147560"
  },
  {
    "text": "with you more work",
    "start": "2147560",
    "end": "2150599"
  },
  {
    "text": "less [Music]",
    "start": "2156640",
    "end": "2161249"
  },
  {
    "text": "what up party animals here's some news that you may not have heard yet Gatsby now has a partnership program if you are",
    "start": "2163160",
    "end": "2169599"
  },
  {
    "text": "building Gatsby sites for clients or you're not yet but you wish you were you can now grow that with confidence by",
    "start": "2169599",
    "end": "2175520"
  },
  {
    "text": "getting support and resources directly from the Gatsby team become a Gatsby certified partner today to accelerate",
    "start": "2175520",
    "end": "2182000"
  },
  {
    "text": "your growth alongside their amazing ecosystem get exclusive access to Gatsby's product road map to test new",
    "start": "2182000",
    "end": "2188160"
  },
  {
    "text": "features access trading materials and connect with the Gatsby team there's a whole bundle of partnership benefits the",
    "start": "2188160",
    "end": "2194960"
  },
  {
    "text": "sky the limit so check out Gatsby's partnership program using the link in the show notes or Point your browser to",
    "start": "2194960",
    "end": "2201000"
  },
  {
    "text": "gasby js. changelog once again there's a link in your show notes or gatsbyjs",
    "start": "2201000",
    "end": "2209960"
  },
  {
    "text": "[Music] docomo [Music]",
    "start": "2214830",
    "end": "2231189"
  },
  {
    "text": "all right let's get back into it and talk about one subject that we have not",
    "start": "2232160",
    "end": "2237359"
  },
  {
    "text": "talked about much yet which is mutations how do you actually change data using a graphql API this is something that Jared",
    "start": "2237359",
    "end": "2244680"
  },
  {
    "text": "was talking about on the break he said well you know you have a readr API we've only talked about read how does write work this is a querying language not a",
    "start": "2244680",
    "end": "2253040"
  },
  {
    "text": "query language but if you're going to replace rest rest you've got to do some",
    "start": "2253040",
    "end": "2259359"
  },
  {
    "text": "amount of updating those things State transfer right or crud create read",
    "start": "2259359",
    "end": "2264760"
  },
  {
    "text": "update and delete how is that going to work so yeah who wants to lead us off here I'll go last also not at all yeah I",
    "start": "2264760",
    "end": "2274680"
  },
  {
    "text": "have not gotten that far in my PC yet so I haven't mutated anything Nick will get",
    "start": "2274680",
    "end": "2279720"
  },
  {
    "text": "back to us so it's you kall how do you mutate all right that's me so I think",
    "start": "2279720",
    "end": "2285839"
  },
  {
    "text": "the way to think about mutations is it's actually coming back to this question of",
    "start": "2285839",
    "end": "2291680"
  },
  {
    "text": "query design and API design it's much more explicit or at least has the",
    "start": "2291680",
    "end": "2297560"
  },
  {
    "text": "potential to be much more explicit so we talked about how all the queries are this kind of graph descending from the",
    "start": "2297560",
    "end": "2304280"
  },
  {
    "text": "top level query so you have query you define what the first level of things you're allowed to query is and then you",
    "start": "2304280",
    "end": "2310200"
  },
  {
    "text": "can follow relationships down through the different resources through the types on the mutation side it's similar",
    "start": "2310200",
    "end": "2319480"
  },
  {
    "text": "in that you have a top level mutation object where you're defining the mutations that are allowed to happen and",
    "start": "2319480",
    "end": "2328720"
  },
  {
    "text": "I have not used this a huge amount so I'm not an expert on this at all and I don't actually have a strong sense the",
    "start": "2328720",
    "end": "2335280"
  },
  {
    "text": "extent to which there is that same level of nesting and following relationships but if you look at the mutations part of",
    "start": "2335280",
    "end": "2342319"
  },
  {
    "text": "the graphql API what you'll see is they have a ton of mutations defined and",
    "start": "2342319",
    "end": "2350119"
  },
  {
    "text": "they're all very explicit so whereas in a rest API you might assume that you're",
    "start": "2350119",
    "end": "2355640"
  },
  {
    "text": "going to expose mostly crud functions so you just have an update endpoint that lets you update the fields on your",
    "start": "2355640",
    "end": "2361160"
  },
  {
    "text": "object and maybe there's some permissions around that or what have you in a graphql APS",
    "start": "2361160",
    "end": "2368200"
  },
  {
    "text": "you're going to have much more explicit mutations and some of those maybe just update this object and use pass in the",
    "start": "2368200",
    "end": "2374119"
  },
  {
    "text": "new object types or or things around that but if you look at for example the GitHub API there's a lot of things about",
    "start": "2374119",
    "end": "2380480"
  },
  {
    "text": "accept this suggestion clone this thing do this thing you have a mutation for each type of action that you're wanting",
    "start": "2380480",
    "end": "2386920"
  },
  {
    "text": "to enable and so it feels in some ways much more like defining an",
    "start": "2386920",
    "end": "2394119"
  },
  {
    "text": "internal API that you might call programmatic rather than this model that I think crud",
    "start": "2394119",
    "end": "2402119"
  },
  {
    "text": "particularly and the combo of crud and rest a lot of stuff got sort of plumbed",
    "start": "2402119",
    "end": "2407359"
  },
  {
    "text": "together where most rest apis are just implementing crud functionality this idea of I just have",
    "start": "2407359",
    "end": "2412760"
  },
  {
    "text": "an object and I'm going to give you new fields for it or new override certain fields for it it's more towards what",
    "start": "2412760",
    "end": "2420119"
  },
  {
    "text": "type of API would I extend inside of my project add this thing do this this",
    "start": "2420119",
    "end": "2427599"
  },
  {
    "text": "thing change this thing where I'm explicitly calling out the fields that I want from you and because everything is",
    "start": "2427599",
    "end": "2432920"
  },
  {
    "text": "strongly typed I can have those fields be objects with particular types but",
    "start": "2432920",
    "end": "2439160"
  },
  {
    "text": "that's kind of where it goes and I think you can specify you for an object which Fields",
    "start": "2439160",
    "end": "2445480"
  },
  {
    "text": "do you accept in that mutation as well so it may not be every field in that object but instead Say Hey I want you",
    "start": "2445480",
    "end": "2452480"
  },
  {
    "text": "can pass in this object but really only these fields from this object how would you do something like a delete then",
    "start": "2452480",
    "end": "2458000"
  },
  {
    "text": "would you say here's a mutation called delete post and you call that",
    "start": "2458000",
    "end": "2463079"
  },
  {
    "text": "mation yep if you look at the once again the the GitHub API is a great public",
    "start": "2463079",
    "end": "2469119"
  },
  {
    "text": "example and it's super well documented they have delete issue delete issue comment delete label delete package",
    "start": "2469119",
    "end": "2475160"
  },
  {
    "text": "version delete project delete project card all of these are top level mutations that they expose do each of",
    "start": "2475160",
    "end": "2481480"
  },
  {
    "text": "those then have you're now going to assume that you understand how github's backend works but each of those has then",
    "start": "2481480",
    "end": "2487920"
  },
  {
    "text": "a resolver that takes care of that functionality some sort of function that lives somewhere that says delete this",
    "start": "2487920",
    "end": "2493319"
  },
  {
    "text": "thing and then it goes and make sure you can do that and it has any sort of like background jobs that have to happen when",
    "start": "2493319",
    "end": "2499319"
  },
  {
    "text": "that happens and it resolves that and is that how that works on the API side yeah",
    "start": "2499319",
    "end": "2506200"
  },
  {
    "text": "I think so at a conceptual level I'm sure there's details missing there okay I'm sure there are and there may be",
    "start": "2506200",
    "end": "2511760"
  },
  {
    "text": "abstractions in there or whatever but yeah it's very very explicit in terms of what changes are enabled and allowed is",
    "start": "2511760",
    "end": "2519200"
  },
  {
    "text": "there a standard for like what gets returned from a mutation not that I'm",
    "start": "2519200",
    "end": "2524240"
  },
  {
    "text": "aware of so in the case of github's well there's ad",
    "start": "2524240",
    "end": "2531520"
  },
  {
    "text": "star delete team discussion the input is the delete team",
    "start": "2531520",
    "end": "2537160"
  },
  {
    "text": "discussion input and the return Fields is the client mutation idea unique identifier for the client performing the",
    "start": "2537160",
    "end": "2543960"
  },
  {
    "text": "mutation so probably a minimal response we seem like you'd have like a success or a",
    "start": "2543960",
    "end": "2549359"
  },
  {
    "text": "failure kind of a thing but in this case maybe if it's a success they just return the client",
    "start": "2549359",
    "end": "2555359"
  },
  {
    "text": "ID I was trying to find delete star I found ad star delete issue returns uh two Fields",
    "start": "2555359",
    "end": "2562680"
  },
  {
    "text": "the client mutation ID which is the same as the other one and the repository that the issue belonged to which I assume is",
    "start": "2562680",
    "end": "2570079"
  },
  {
    "text": "the entire object not just the repository ID so even amongst github's responses it seems they're consistent",
    "start": "2570079",
    "end": "2577319"
  },
  {
    "text": "but not like identical depending on the delete yeah I",
    "start": "2577319",
    "end": "2582880"
  },
  {
    "text": "asked that and I was going to kind of ask about like error handling too like if there's any kind of standard for that",
    "start": "2582880",
    "end": "2589240"
  },
  {
    "text": "and the reason I'm asking is like when you implement this like Apollo for example would Apollo handle errors like",
    "start": "2589240",
    "end": "2596839"
  },
  {
    "text": "on the client side different from like another library that you might be using to hit an Apollo back and is there some",
    "start": "2596839",
    "end": "2603160"
  },
  {
    "text": "kind of standard that that has followed or is it just abstractions all the way up all the way down that's a great",
    "start": "2603160",
    "end": "2608839"
  },
  {
    "text": "question and I don't have the answer for you there I feel like in Apollo what",
    "start": "2608839",
    "end": "2615119"
  },
  {
    "text": "happens is it sends back essentially a message saying there was an error go check your graphql server I don't",
    "start": "2615119",
    "end": "2622319"
  },
  {
    "text": "remember like I don't know the top of my head and that definitely feels like a",
    "start": "2622319",
    "end": "2627960"
  },
  {
    "text": "place where we have a little bit of a hole one thing that is kind of odd is",
    "start": "2627960",
    "end": "2634599"
  },
  {
    "text": "graphql will return a su ESS code with an error message rather than it being an",
    "start": "2634599",
    "end": "2640559"
  },
  {
    "text": "HTTP error interesting so that's kind of funky they're using HTTP as a transport",
    "start": "2640559",
    "end": "2647640"
  },
  {
    "text": "layer not really as exactly yeah in fact I think it may not even",
    "start": "2647640",
    "end": "2656838"
  },
  {
    "text": "necessarily I'm not sure that's part of the spec so much as that is just a common Choice it's going to say we have",
    "start": "2656880",
    "end": "2663200"
  },
  {
    "text": "a transport layer it's called TCP so like HTTP would be Superfluous in",
    "start": "2663200",
    "end": "2670400"
  },
  {
    "text": "that use yeah but it makes it easy to build client side it's pervasive interactions with it right like you want",
    "start": "2670400",
    "end": "2677520"
  },
  {
    "text": "to be able to hit this thing from a browser and it's way easier to hit an",
    "start": "2677520",
    "end": "2683079"
  },
  {
    "text": "hgp based API than a TCP based API right so realtime followup on the GitHub API",
    "start": "2683079",
    "end": "2689359"
  },
  {
    "text": "the reason I couldn't find delete star is there was not one it's called remove star yep and that's the delete function",
    "start": "2689359",
    "end": "2695720"
  },
  {
    "text": "is I remove that's fun so a little flexibility there because you know now they're they're more semantic like you",
    "start": "2695720",
    "end": "2702000"
  },
  {
    "text": "don't do you delete a star really well you just kind of remove the fact that you starred that repost so they're being",
    "start": "2702000",
    "end": "2707920"
  },
  {
    "text": "a little bit more descriptive but less discoverable because I'm everything else says delete and then it goes to start",
    "start": "2707920",
    "end": "2713800"
  },
  {
    "text": "and it says remove yep what you want to bet those were implemented by different teams than the ones doing delete these",
    "start": "2713800",
    "end": "2719640"
  },
  {
    "text": "things there's a whole set that are remove there's a whole set that are delete and maybe they have an internal",
    "start": "2719640",
    "end": "2725319"
  },
  {
    "text": "consistency for which things but yeah the fun of API design so there's a cool",
    "start": "2725319",
    "end": "2732079"
  },
  {
    "text": "question coming out of the chat room from Lars maybe one of you two can help him out and he",
    "start": "2732079",
    "end": "2740000"
  },
  {
    "text": "asks where do you learn the actual ql where do you learn the query language what's the best resource for learning",
    "start": "2740000",
    "end": "2745960"
  },
  {
    "text": "the query language that's a great question there's a website called how tograph ql.com",
    "start": "2745960",
    "end": "2755000"
  },
  {
    "text": "that has sort of intera acve tutorials and a bunch of stuff and I've heard folks talk about that as a good resource",
    "start": "2755000",
    "end": "2761359"
  },
  {
    "text": "I have not actually used it because I learned it all in the job so I just kind of learned it by looking at the code",
    "start": "2761359",
    "end": "2766839"
  },
  {
    "text": "that we had and then sitting developers down when I got stuck and being like what the heck is going on here can you",
    "start": "2766839",
    "end": "2773040"
  },
  {
    "text": "explain this to me but I've heard great things about how to graph q.com are you Nick I will definitely",
    "start": "2773040",
    "end": "2780200"
  },
  {
    "text": "check that out but mine has also been on the job learning and kind of looking at other queries but like I said this is a",
    "start": "2780200",
    "end": "2787240"
  },
  {
    "text": "proof of concept so we don't really have like established queries lying around anywhere so it's more just what have I",
    "start": "2787240",
    "end": "2793599"
  },
  {
    "text": "typed into the graphic cool interface and then I heavily rely on the control",
    "start": "2793599",
    "end": "2798800"
  },
  {
    "text": "space to tell me what I can and can't do in this and then it's like throwing spaghetti at the wall to see what sticks",
    "start": "2798800",
    "end": "2805839"
  },
  {
    "text": "eventually it'll work then you also got the up Arrow you know you can go back through your history what have I typed before up Arrow up Arrow up what's",
    "start": "2805839",
    "end": "2813200"
  },
  {
    "text": "what's an arrow key sorry uh L J K I don't know k k okay",
    "start": "2813200",
    "end": "2822640"
  },
  {
    "text": "H graph k.org itself is also pretty good it's got",
    "start": "2822640",
    "end": "2827800"
  },
  {
    "text": "reasonable learn resources though they also reference straight out to how how to graphql for doing tutorial related",
    "start": "2827800",
    "end": "2835960"
  },
  {
    "text": "stuff they've got a bunch of interesting things there I will say that the query",
    "start": "2835960",
    "end": "2841200"
  },
  {
    "text": "language itself is simple enough that everything I needed to know at the time that I was using it was basically just",
    "start": "2841200",
    "end": "2847040"
  },
  {
    "text": "like clicking and seeing in the graphical editor the query that it generated based on what I was trying to",
    "start": "2847040",
    "end": "2853400"
  },
  {
    "text": "do and it's pretty straightforward to just copy and paste that around and you",
    "start": "2853400",
    "end": "2858960"
  },
  {
    "text": "know tweak it so I didn't feel like there was all that much to learn on that side which is probably one of the reasons why it is so beloved by front",
    "start": "2858960",
    "end": "2866319"
  },
  {
    "text": "Enders and people who just want to get their data and get on with their day is that there's not too much to learn on the query side on the implementation",
    "start": "2866319",
    "end": "2872720"
  },
  {
    "text": "side and maybe on the mutation side as well not sure seems like there's a whole bunch there but just the language itself",
    "start": "2872720",
    "end": "2879240"
  },
  {
    "text": "is pretty basic absolutely well and I think that's one of the easy gotas in",
    "start": "2879240",
    "end": "2884599"
  },
  {
    "text": "graphql is folks will come in and particularly folks who are just on the front end side will come in and say hey",
    "start": "2884599",
    "end": "2890040"
  },
  {
    "text": "this makes my life so much easier we can just throw it in and it's going to make everything golden",
    "start": "2890040",
    "end": "2896200"
  },
  {
    "text": "and what I have seen having to do a lot of retrofitting work on the server side",
    "start": "2896200",
    "end": "2902400"
  },
  {
    "text": "here is that that approach leads to catastrophically slow graphql servers",
    "start": "2902400",
    "end": "2907960"
  },
  {
    "text": "and poorly designed schema and various other things so this is a real domain",
    "start": "2907960",
    "end": "2914319"
  },
  {
    "text": "there are real concerns and if you're creating that server side",
    "start": "2914319",
    "end": "2920480"
  },
  {
    "text": "implementation it's going to go a lot better if you have some understanding of your underlying Data Systems and how",
    "start": "2920480",
    "end": "2926960"
  },
  {
    "text": "they work one aspect of graphic we haven't brought up which I think is the coolest",
    "start": "2926960",
    "end": "2933160"
  },
  {
    "text": "use case of it so far is the way that Gatsby uses it to normalize all all these disparate data sources into a",
    "start": "2933160",
    "end": "2939040"
  },
  {
    "text": "single graphql usable thing and I know there's a lot of complexity and those",
    "start": "2939040",
    "end": "2944760"
  },
  {
    "text": "things and of course you could have especially if you're spanning multiple data sources and stuff it could get real hairy but conceptually I think that is",
    "start": "2944760",
    "end": "2952280"
  },
  {
    "text": "Super Rad I think it's the coolest thing about Gatsby it is super cool and it it lets them create a dissociation between",
    "start": "2952280",
    "end": "2959640"
  },
  {
    "text": "data source and accessing that data source so all that you have to do to incorporate a new data source with a new",
    "start": "2959640",
    "end": "2966240"
  },
  {
    "text": "way of interacting is you write something that knows how to translate from that to graphql and then your",
    "start": "2966240",
    "end": "2975480"
  },
  {
    "text": "client code just behaves in the same old way it's always behaved and I think that is a really neat way to do it and they",
    "start": "2975480",
    "end": "2982760"
  },
  {
    "text": "do it at build time but one could imagine doing that in real time too in",
    "start": "2982760",
    "end": "2988040"
  },
  {
    "text": "that wrapping approach that I mentioned where you wrap around all sorts of different",
    "start": "2988040",
    "end": "2993400"
  },
  {
    "text": "apis and provide a single consistent interface to them you're not going to have me disagree with wrapping once",
    "start": "2993400",
    "end": "2999880"
  },
  {
    "text": "again graphql is the bacon that's going to make everything better but if you're not careful you'll get a little bit",
    "start": "2999880",
    "end": "3006200"
  },
  {
    "text": "bloated if you have too much bacon Ching you don't know how much I've",
    "start": "3006200",
    "end": "3012200"
  },
  {
    "text": "missed playing with these puns and metaphors with you all oh one thing we didn't talk about was this concept of",
    "start": "3012200",
    "end": "3018880"
  },
  {
    "text": "fragments which I think is also quite interesting particularly on the client side so fragments allows you to",
    "start": "3018880",
    "end": "3027799"
  },
  {
    "text": "essentially take sub pieces of a graphql query and treat them as their own",
    "start": "3027799",
    "end": "3033680"
  },
  {
    "text": "individual queries but then kind of roll them up so that you only do that one big query at the top so in the code that I'm",
    "start": "3033680",
    "end": "3041440"
  },
  {
    "text": "working with right now each component thinks in its own set of data that it's",
    "start": "3041440",
    "end": "3047480"
  },
  {
    "text": "going to run or that it's going to query and it writes a fragment but then the top level page loads up all those",
    "start": "3047480",
    "end": "3054119"
  },
  {
    "text": "fragments composes them into a single query and Only Hits the API once so it lets you as a",
    "start": "3054119",
    "end": "3061400"
  },
  {
    "text": "developer think only about the data that you need for the piece that you're working on but",
    "start": "3061400",
    "end": "3067760"
  },
  {
    "text": "then from a performance standpoint you can normalize all that so you're doing a",
    "start": "3067760",
    "end": "3073280"
  },
  {
    "text": "single query that's going to generate the info that you need and send that all at once to the server and get it all",
    "start": "3073280",
    "end": "3078880"
  },
  {
    "text": "back right on page load another nice thing with fragments is that it will give you an interface name in typescript",
    "start": "3078880",
    "end": "3085400"
  },
  {
    "text": "with with like Apollo code gen for example that is the name of that fragment so if you need to reference",
    "start": "3085400",
    "end": "3091280"
  },
  {
    "text": "that type later you easily have access to it and can pull it from there because otherwise it gives it some really funky",
    "start": "3091280",
    "end": "3098079"
  },
  {
    "text": "name that's like the whatever the query name is underscore result a lot of underscores in there which looks ugly so",
    "start": "3098079",
    "end": "3105559"
  },
  {
    "text": "yeah fragments are super interesting area and there are tools like relay which will automatically roll up all",
    "start": "3105559",
    "end": "3111720"
  },
  {
    "text": "those fragments but it's also not super hard to kind of explicitly roll up and",
    "start": "3111720",
    "end": "3117040"
  },
  {
    "text": "import your fragments with that I think we've covered a heck of a lot about graphql thank you for indulging me this",
    "start": "3117040",
    "end": "3123160"
  },
  {
    "text": "has been fun we'll sign off till next week thank you Jared thank you thank you",
    "start": "3123160",
    "end": "3128359"
  },
  {
    "text": "Nick and the party will continue same time same channel next",
    "start": "3128359",
    "end": "3135280"
  },
  {
    "text": "week what's your take on graphql are you all in or still skeptical we love to",
    "start": "3136119",
    "end": "3141240"
  },
  {
    "text": "hear your thoughts you can comment on this and every episode on Chang law.com there's a link in your show notes for",
    "start": "3141240",
    "end": "3147079"
  },
  {
    "text": "easy clickings or just hit up cha.com in your browser toour and let your voice be heard oh and did you know we have an",
    "start": "3147079",
    "end": "3153880"
  },
  {
    "text": "awesome Weekly Newsletter over 15,000 devs just like yourself hit the easy button on keeping up with what's fresh",
    "start": "3153880",
    "end": "3159799"
  },
  {
    "text": "and new in software world we include the hottest repos the best articles and the biggest news with just enough commentary",
    "start": "3159799",
    "end": "3165960"
  },
  {
    "text": "to add context and nerdy jokes but not so much that you're overwhelmed check it out at change.com weekly I think you'll",
    "start": "3165960",
    "end": "3171960"
  },
  {
    "text": "dig it thanks to kall for mcing once again Nick niss for bringing his Wizardry BMC for the beats and our",
    "start": "3171960",
    "end": "3178000"
  },
  {
    "text": "sponsors for making it all possible shout out to fley lenoe and rbar that's",
    "start": "3178000",
    "end": "3183400"
  },
  {
    "text": "all for now framework Wars next [Music]",
    "start": "3183400",
    "end": "3195319"
  },
  {
    "text": "week clap your hands everybody If You Got What It Takes cuz I'm Curtis blow",
    "start": "3195319",
    "end": "3201280"
  },
  {
    "text": "and I want you to know that these are the bra well we're happy have you back and",
    "start": "3201280",
    "end": "3207200"
  },
  {
    "text": "in The Limited capacity that we have you will take whatever kall we can get mhm I did already drink quite a few cups this",
    "start": "3207200",
    "end": "3213200"
  },
  {
    "text": "morning so Nick actually tried to coat up an autogenerated kall but it didn't work",
    "start": "3213200",
    "end": "3219240"
  },
  {
    "text": "out like we thought it would and uh oh I want to hear more about that well you can't cuz I just made it up Nick tell",
    "start": "3219240",
    "end": "3226400"
  },
  {
    "text": "them more about the kall you tried to write well it's just layers of abstractions and",
    "start": "3226400",
    "end": "3233319"
  },
  {
    "text": "then if you abstract anything enough it you eventually just end up talking about them with me so yeah well you know now",
    "start": "3233319",
    "end": "3240079"
  },
  {
    "text": "we can hang out and talk typescript too cuz I've been in that world a lot anyway we should probably get back",
    "start": "3240079",
    "end": "3246920"
  },
  {
    "text": "to I'll see myself out slowly everyone's [Laughter] coming",
    "start": "3246920",
    "end": "3254520"
  }
]