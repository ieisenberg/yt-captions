[
  {
    "text": "bandwidth for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at change log because of rbar check them out at roar.com and we're hosted on linode",
    "start": "5520",
    "end": "11480"
  },
  {
    "text": "cloud servers head to lin.com changelog this episode is brought to you",
    "start": "11480",
    "end": "17199"
  },
  {
    "text": "by digital ocean digital ocean makes it super simple to launch a kubernetes cluster in minutes the digital ocean",
    "start": "17199",
    "end": "24039"
  },
  {
    "text": "kubernetes platform empowers developers to launch their containerized applications into a managed production",
    "start": "24039",
    "end": "30160"
  },
  {
    "text": "cluster without having to maintain or configure the underlying infrastructure they seamlessly integrate everything",
    "start": "30160",
    "end": "36520"
  },
  {
    "text": "with the rest of the digital ocean stack including low balancers firewalls object storage spaces and block storage volumes",
    "start": "36520",
    "end": "44200"
  },
  {
    "text": "they even have built-in support for public and private image Registries like dockerhub and qu. developers can now run",
    "start": "44200",
    "end": "51559"
  },
  {
    "text": "and scale container-based workloads with ease with the digital ocean platform learn more get started for free with a",
    "start": "51559",
    "end": "56600"
  },
  {
    "text": "$50 credit at do. co/ changelog again again do. co/",
    "start": "56600",
    "end": "62730"
  },
  {
    "text": "[Music]",
    "start": "62730",
    "end": "66409"
  },
  {
    "text": "changelog welcome to go time a podcast featuring a diverse panel and special guests discussing Cloud infrastructure",
    "start": "76200",
    "end": "83000"
  },
  {
    "text": "distributed systems microservices kubernetes Docker oh and also go we",
    "start": "83000",
    "end": "88479"
  },
  {
    "text": "record live every Tuesday at 3:00 p.m. Eastern new Pacific join the community slack with us in real time during the",
    "start": "88479",
    "end": "94320"
  },
  {
    "text": "show in the go time FM channel in go for slack follow us on Twitter we atg gotime FM listen live at change.com or",
    "start": "94320",
    "end": "102439"
  },
  {
    "text": "subscribe at changel law.com gotime and now on to the",
    "start": "102439",
    "end": "108159"
  },
  {
    "text": "show hello and welcome to go time today we're talking about compilers and",
    "start": "109320",
    "end": "116399"
  },
  {
    "text": "interpreters in go very interesting joining me is my co-host from another",
    "start": "116399",
    "end": "122000"
  },
  {
    "text": "mother Mark Bates hi Mark hey there Matthew how you doing today I'm good sir",
    "start": "122000",
    "end": "127200"
  },
  {
    "text": "and yourself a little freaked out by the idea that we might somehow be related okay well I said another mother so we've",
    "start": "127200",
    "end": "133400"
  },
  {
    "text": "not paid attention already it's not a great start there was still a relationship implied I don't know how",
    "start": "133400",
    "end": "138840"
  },
  {
    "text": "comfortable I feel thank you that's lovely we're also joined by Tim Raymond",
    "start": "138840",
    "end": "144440"
  },
  {
    "text": "hello Tim how's it going Matt good how are you I'm pretty good thanks today by",
    "start": "144440",
    "end": "150120"
  },
  {
    "text": "the way is Tim's birthday everybody as it is whenever I do anything so please uh if you're",
    "start": "150120",
    "end": "157120"
  },
  {
    "text": "listening reach out and uh wish Tim a very happy birthday this is a prank Mark Bates plays on Tim Raymond all the time",
    "start": "157120",
    "end": "164480"
  },
  {
    "text": "by the way I don't know what you're talking about Tim is 21 today every time we go to a",
    "start": "164480",
    "end": "171080"
  },
  {
    "text": "restaurant we're also joined by you won't believe this it's tooren ball",
    "start": "171120",
    "end": "176800"
  },
  {
    "text": "author of writing a compiler in go and writing and interpretting go hello",
    "start": "176800",
    "end": "182120"
  },
  {
    "text": "tooren hello how are you good thanks welcome to the show glad to be here good",
    "start": "182120",
    "end": "187720"
  },
  {
    "text": "well we'll see let's reserve a judgment for now and we'll let us know at the end how it's gone so let's jump in let's",
    "start": "187720",
    "end": "195599"
  },
  {
    "text": "talk about it we're going to talk about compilers and interpreters first of all for anybody that doesn't know what that",
    "start": "195599",
    "end": "202080"
  },
  {
    "text": "is maybe we could start off with you know what is a compiler what does it actually do and why is it useful does",
    "start": "202080",
    "end": "209840"
  },
  {
    "text": "anyone want to have a stab at that I think Torsten should because his books are absolutely amazing at explaining",
    "start": "209840",
    "end": "215599"
  },
  {
    "text": "just that theory thank you like the way I put you on the spot yeah I was going to say the answer",
    "start": "215599",
    "end": "222319"
  },
  {
    "text": "is not that easy as in you know it depends it's all blurry but I would say",
    "start": "222319",
    "end": "228040"
  },
  {
    "text": "the easiest explanation for what an interpreter and a compiler is is it's",
    "start": "228040",
    "end": "233519"
  },
  {
    "text": "the implementation of a programming language it's how you make it exist exist you can think of",
    "start": "233519",
    "end": "241319"
  },
  {
    "text": "a programing language uh you can Define it to the Last Detail but it still",
    "start": "241319",
    "end": "246680"
  },
  {
    "text": "doesn't exist It could only exists on paper or in theory and you need to implement it and you can implement it by",
    "start": "246680",
    "end": "254239"
  },
  {
    "text": "building an interpreter or a compiler that's my really concise attempt at",
    "start": "254239",
    "end": "260840"
  },
  {
    "text": "explaining it yeah that's great and so in goh's case then the go compiler of course takes the go code does all its",
    "start": "260840",
    "end": "267759"
  },
  {
    "text": "magic to it and turns it into a bind right yeah right yeah and a binary is",
    "start": "267759",
    "end": "273440"
  },
  {
    "text": "made up of what what is actually a binary another programming language is in a binary and that is then interpreted",
    "start": "273440",
    "end": "281199"
  },
  {
    "text": "by the computer by the CPU so it's uh as they say you know machine language is",
    "start": "281199",
    "end": "288039"
  },
  {
    "text": "all the way down I guess yeah but yeah the the end goal is you want to talk to the computer and",
    "start": "288039",
    "end": "294960"
  },
  {
    "text": "you want the computer to understand you and when you let let's say get the",
    "start": "294960",
    "end": "300320"
  },
  {
    "text": "computer from the factory it only speaks one language and that language is the machine language that you know differs",
    "start": "300320",
    "end": "306960"
  },
  {
    "text": "from computer to computer from CPU to CPU amds speak a different language than",
    "start": "306960",
    "end": "313039"
  },
  {
    "text": "arm CPUs for example and in order to not",
    "start": "313039",
    "end": "318840"
  },
  {
    "text": "have to talk to the computer in machine language all the time which is really detailed and really low level you",
    "start": "318840",
    "end": "326560"
  },
  {
    "text": "implement another language in this machine language so you say okay if I give you this five words in machine",
    "start": "326560",
    "end": "333560"
  },
  {
    "text": "language do this and then you kind of put together piece by piece another",
    "start": "333560",
    "end": "339360"
  },
  {
    "text": "language on top of that so you say in machine language I read another language",
    "start": "339360",
    "end": "344919"
  },
  {
    "text": "from this file on disk and turn it into this other version in machine language",
    "start": "344919",
    "end": "351600"
  },
  {
    "text": "and then the computer can understand that and you know then you build your way up and then you end up somewhere",
    "start": "351600",
    "end": "357319"
  },
  {
    "text": "with go or even higher JavaScript script in the browser or something The Interpreter book was the first one you",
    "start": "357319",
    "end": "362720"
  },
  {
    "text": "did right right yeah and in that you actually implement the monkey language",
    "start": "362720",
    "end": "369039"
  },
  {
    "text": "yeah yeah tell us about the monkey language the monkey language is called monkey language because the tiger",
    "start": "369039",
    "end": "375199"
  },
  {
    "text": "language already exists I had to come up with a name for a programming language",
    "start": "375199",
    "end": "381319"
  },
  {
    "text": "and the goal was to kind of have a language that has a bit more meat to it",
    "start": "381319",
    "end": "386800"
  },
  {
    "text": "than say most example languages use in tutorials blog posts whatever most of",
    "start": "386800",
    "end": "392800"
  },
  {
    "text": "the time they have a lisp parenthesis and like they lose 60% of all readers at",
    "start": "392800",
    "end": "399919"
  },
  {
    "text": "that point and then they lose another 20% of readers when they say you know",
    "start": "399919",
    "end": "406479"
  },
  {
    "text": "let's get parsing for now since we have a list we can just you know split the string on the parenthesis or something",
    "start": "406479",
    "end": "412520"
  },
  {
    "text": "and we don't need a parser and that kind of cuts short on a lot of the stuff that",
    "start": "412520",
    "end": "418759"
  },
  {
    "text": "I wanted to learn about when I wanted to learn about programming languages for example pares and how they work and the",
    "start": "418759",
    "end": "424919"
  },
  {
    "text": "language that I wanted to build and then you know dissect or teach in this book should have more details like Curly",
    "start": "424919",
    "end": "432000"
  },
  {
    "text": "braces you know back then I thought you know curly braces this is you know a real language I guess not a toy language",
    "start": "432000",
    "end": "440560"
  },
  {
    "text": "now I think differently but it should look like a real language like proper ination function like the keywords",
    "start": "440560",
    "end": "447879"
  },
  {
    "text": "ination braces parenthesis and so on and I kind of pieced this together and then",
    "start": "447879",
    "end": "455520"
  },
  {
    "text": "I put the name monkey on it and you know if I had to describe it it looks kind of",
    "start": "455520",
    "end": "461120"
  },
  {
    "text": "like JavaScript it also acts kind of like JavaScript because under the hood",
    "start": "461120",
    "end": "466639"
  },
  {
    "text": "it actually acts like a scheme or a lisp thing which is funnily enough also what",
    "start": "466639",
    "end": "472400"
  },
  {
    "text": "JavaScript was based on in the beginning it's a really small language that has basic data types like integers arrays",
    "start": "472400",
    "end": "480159"
  },
  {
    "text": "hashes strings it has functions first class functions higher order functions I",
    "start": "480159",
    "end": "486000"
  },
  {
    "text": "don't know what else off the top of my head has a macro system in a separate chapter yeah I named it monkey because I",
    "start": "486000",
    "end": "493400"
  },
  {
    "text": "do like monkeys I guess and so it's great for not just learning about",
    "start": "493400",
    "end": "499240"
  },
  {
    "text": "interpreters but the fact that you actually implement the real thing I think is a great way to learn but of",
    "start": "499240",
    "end": "506039"
  },
  {
    "text": "course the skills are transferable aren't they that's the point once you can do this once you can build",
    "start": "506039",
    "end": "512518"
  },
  {
    "text": "an interpreter then you can use that skill to solve other problems and Mark",
    "start": "512519",
    "end": "519760"
  },
  {
    "text": "you actually did that very thing from torsten's book didn't you uh yeah so I",
    "start": "519760",
    "end": "525680"
  },
  {
    "text": "think there's even a a quote on on the website the book I think the book is amazing you know I as I'm famous for",
    "start": "525680",
    "end": "532399"
  },
  {
    "text": "saying don't have a CS degree I'm not a computer scientist you know I have a degree in music so the idea of things",
    "start": "532399",
    "end": "538920"
  },
  {
    "text": "like parsers and lexers and tokens and interpreters and stuff that kind of",
    "start": "538920",
    "end": "544560"
  },
  {
    "text": "knowledge was far above my paygrade in terms of just even coming close to",
    "start": "544560",
    "end": "549959"
  },
  {
    "text": "understanding it so when I saw that book I was like okay let me kind of give it a whirl at the time we were having",
    "start": "549959",
    "end": "555040"
  },
  {
    "text": "problems with templating in Buffalo too so I was kind of getting at my tether with some of the other stuff that was",
    "start": "555040",
    "end": "560640"
  },
  {
    "text": "out there and so I was hoping to even just understand what they were doing so I can contribute back to some of these",
    "start": "560640",
    "end": "565800"
  },
  {
    "text": "other langu you know things like Raymond for example nope pun intended was like a",
    "start": "565800",
    "end": "570880"
  },
  {
    "text": "weird kind of mustaches handlebars kind of implementation wasn't it yeah no no relation to me they like to use panics",
    "start": "570880",
    "end": "578200"
  },
  {
    "text": "instead of Errors it was it was wonderful uh so I read it I'm like I have no hope of",
    "start": "578200",
    "end": "584440"
  },
  {
    "text": "actually kind of understanding this but let's see and what I loved about the book was it was like right from the",
    "start": "584440",
    "end": "589760"
  },
  {
    "text": "beginning very small chunks easily tested right every bit was tdd through",
    "start": "589760",
    "end": "595079"
  },
  {
    "text": "the entire book and by the end of the book I felt apparently overconfident because I went and built",
    "start": "595079",
    "end": "602399"
  },
  {
    "text": "plush right but I went from having no idea how these things worked or even",
    "start": "602399",
    "end": "608360"
  },
  {
    "text": "what they meant to having a basic fundamental idea at least of the theory and what was happening when we talk",
    "start": "608360",
    "end": "614440"
  },
  {
    "text": "about pegs and a little bit having this information from torsten's book and",
    "start": "614440",
    "end": "619600"
  },
  {
    "text": "understanding it that way and then kind of going to pegs which kind of make a high level abstraction around parsers",
    "start": "619600",
    "end": "625680"
  },
  {
    "text": "which we'll talk about a lot um at least I then understood so just understanding the theory I think is",
    "start": "625680",
    "end": "631440"
  },
  {
    "text": "an important part even if you're not going to use these tools like not everybody should or can build a",
    "start": "631440",
    "end": "637079"
  },
  {
    "text": "programming language like it's not for like we don't need a m they're like routers we don't need more of",
    "start": "637079",
    "end": "643040"
  },
  {
    "text": "them but we'll talk about the one I'm writing later",
    "start": "643040",
    "end": "648079"
  },
  {
    "text": "yeah well that's the thing isn't it you feel like I when I first saw this I thought this is the most specific book",
    "start": "648440",
    "end": "656399"
  },
  {
    "text": "that I could imagine and I thought isn't it too Niche but actually templating is a great example of a case there are a",
    "start": "656399",
    "end": "663680"
  },
  {
    "text": "few other times that I've come across where I would have liked to be able to do these and I I solved it just sort of",
    "start": "663680",
    "end": "671399"
  },
  {
    "text": "again not in the proper way just kind of minimal effort to try and just get something to work regular expression",
    "start": "671399",
    "end": "677920"
  },
  {
    "text": "type things yeah although even I mean yeah even that configuration files that people come up with yeah I've seen that",
    "start": "677920",
    "end": "684800"
  },
  {
    "text": "a lot right yeah and Matt Leia on the slack and by the way if you're listening",
    "start": "684800",
    "end": "690519"
  },
  {
    "text": "live you can join the conversation on slack go for slack in the #g gotime FM",
    "start": "690519",
    "end": "696720"
  },
  {
    "text": "channel uh Matt Leia there recommends this and he's what he was saying is",
    "start": "696720",
    "end": "701760"
  },
  {
    "text": "after he'd been through the book he then was able to go and sort of add new",
    "start": "701760",
    "end": "707560"
  },
  {
    "text": "features to it and play around with it and change things and break things and things like this and I think that for",
    "start": "707560",
    "end": "714560"
  },
  {
    "text": "the spirit of learning um that's a really appealing thing to do so I love the fact that you would actually have",
    "start": "714560",
    "end": "720360"
  },
  {
    "text": "your own implementation that you can then play around with yeah the book leaves you in a good place for that too it lets you kind of it gives you what",
    "start": "720360",
    "end": "727040"
  },
  {
    "text": "you need to go and break it further like Matt did or like I did I think there's a",
    "start": "727040",
    "end": "732279"
  },
  {
    "text": "layer that the book may not address or might need another book to address which is you've written a parser but don't",
    "start": "732279",
    "end": "739360"
  },
  {
    "text": "make this where your code actually gets executed and stuff like that uh which is",
    "start": "739360",
    "end": "745120"
  },
  {
    "text": "kind of what happened with plush it became parser executor tempting system in one big ball and that caused us too",
    "start": "745120",
    "end": "752519"
  },
  {
    "text": "many problems and we'll talk about how we're addressing those later yeah interesting I can listen to this for",
    "start": "752519",
    "end": "758880"
  },
  {
    "text": "hours people saying how nice it was to read the book don't worry I've also solicited a lot of hate I just told you",
    "start": "758880",
    "end": "764639"
  },
  {
    "text": "how terrible it was afterwards no no no you said how terrible it was what you did but I I didn't put this in the book",
    "start": "764639",
    "end": "772240"
  },
  {
    "text": "yes exactly the second one even you know introduces like a bite code so there's a need separation there guess who knows me",
    "start": "772240",
    "end": "779399"
  },
  {
    "text": "torson will tell you you explicitly have to say Mark don't abuse this technology because I will try not to release this",
    "start": "779399",
    "end": "786880"
  },
  {
    "text": "as a package that's going to end up as a dependency in lots of Matt ry's projects I wanted to go back to you know",
    "start": "786880",
    "end": "794560"
  },
  {
    "text": "the starting point here that was you start out thinking this is really specific how can I possibly reuse this",
    "start": "794560",
    "end": "801959"
  },
  {
    "text": "knowledge and for me at least and you know it sounds like you guys would confirm this what happened was after it",
    "start": "801959",
    "end": "809440"
  },
  {
    "text": "click for you and how after you understand how paring works for example then you suddenly see it everywhere then",
    "start": "809440",
    "end": "816279"
  },
  {
    "text": "you can go okay now oh now I know also you know how this is implemented oh I can see how this works I can see how",
    "start": "816279",
    "end": "823240"
  },
  {
    "text": "that works and I know it it helped me with my understanding of the go and working with that too I mean that is the",
    "start": "823240",
    "end": "830120"
  },
  {
    "text": "let's say implementation you can Peak under the hood of a language but you know like",
    "start": "830120",
    "end": "836000"
  },
  {
    "text": "configuration languages for example like once you you know I think after you went",
    "start": "836000",
    "end": "841079"
  },
  {
    "text": "through the book you can write a iner or a toml parer or something you know maybe not yaml because that seems to be like",
    "start": "841079",
    "end": "847880"
  },
  {
    "text": "the abyss of whatever people think up but it's the JavaScript of formatting JavaScript of configuration",
    "start": "847880",
    "end": "856000"
  },
  {
    "text": "files so you suddenly see all of these different things as problems that that",
    "start": "856000",
    "end": "862759"
  },
  {
    "text": "are now solvable like your reach gets much wider you know you can suddenly Implement stuff that you did even maybe",
    "start": "862759",
    "end": "869880"
  },
  {
    "text": "dare to think about implementing before just to give you another example you know configuration files was one",
    "start": "869880",
    "end": "875959"
  },
  {
    "text": "templating language is queries like if you're writing a sort of let's say",
    "start": "875959",
    "end": "881320"
  },
  {
    "text": "database not everybody does this but database for example has queries needs",
    "start": "881320",
    "end": "886560"
  },
  {
    "text": "to parse the queries needs to put them in some kind of structured form to interpret or compile or whatever do",
    "start": "886560",
    "end": "893079"
  },
  {
    "text": "something with them at work for example I work at source craft we have we build a search engine for code uh uh and you",
    "start": "893079",
    "end": "900040"
  },
  {
    "text": "can search for code and you put in queries right so these also need to get parsed and then you send them to a",
    "start": "900040",
    "end": "907120"
  },
  {
    "text": "database and that also parses the queries and I looked at the code of how",
    "start": "907120",
    "end": "912440"
  },
  {
    "text": "this database does it and it's surprisingly similar right it's in the end it's a bunch of functions that build",
    "start": "912440",
    "end": "919279"
  },
  {
    "text": "up a tree so to say and then it gets interpreted and before I got into",
    "start": "919279",
    "end": "925040"
  },
  {
    "text": "parsing and parsing programming languages I wouldn't even know where to begin with that and this is like another",
    "start": "925040",
    "end": "933399"
  },
  {
    "text": "tool in your toolbox that you can hopefully pull out when you need it so",
    "start": "933399",
    "end": "938519"
  },
  {
    "text": "that is the the first answer I wanted to give the second one was what you said Matt that it helps with learning that",
    "start": "938519",
    "end": "944240"
  },
  {
    "text": "after you have this programming language implemented you can add a bunch more stuff that Matt said in in slack and I",
    "start": "944240",
    "end": "951560"
  },
  {
    "text": "just want to add to that that it's so much fun to do that once you have a",
    "start": "951560",
    "end": "958199"
  },
  {
    "text": "language or an interpreter whatever running adding little bits and pieces you know",
    "start": "958199",
    "end": "964440"
  },
  {
    "text": "it sounds really like um exaggerating but it is nearly boundless creativity",
    "start": "964440",
    "end": "971399"
  },
  {
    "text": "like you can add a lot of different stuff to your language and the the nice thing or fun thing about developing a",
    "start": "971399",
    "end": "977839"
  },
  {
    "text": "language is you know compared to web applications which is my background you don't need a database you don't need an",
    "start": "977839",
    "end": "984240"
  },
  {
    "text": "internet connection you don't need a second database you don't need a huge build process it's really like making",
    "start": "984240",
    "end": "990600"
  },
  {
    "text": "stuff up in the air like you have a text file you write stuff in the text file and then on the other end you get",
    "start": "990600",
    "end": "995839"
  },
  {
    "text": "hopefully output or something but it's it's a really fun thing to work on and",
    "start": "995839",
    "end": "1001319"
  },
  {
    "text": "develop I found the same thing when I first wrote my first interpreter because",
    "start": "1001319",
    "end": "1007519"
  },
  {
    "text": "it it's such a good way to flex your like tdd muscles because they they have",
    "start": "1007519",
    "end": "1012639"
  },
  {
    "text": "no dependencies you're just writing a string of something you can try out new cases very very easily so you can really",
    "start": "1012639",
    "end": "1020079"
  },
  {
    "text": "learn not just how to write interpreters how to write compilers but how to write",
    "start": "1020079",
    "end": "1025160"
  },
  {
    "text": "really good tests that don't have dependencies on other things yeah and it's a great time to also Flex fuzzing",
    "start": "1025160",
    "end": "1032880"
  },
  {
    "text": "muscles too right because this is string input and you don't want things to crash and you want things to at least be able",
    "start": "1032880",
    "end": "1039400"
  },
  {
    "text": "to report an error if something's wrong and hopefully report where that error is as well hang on I'm I'm taking",
    "start": "1039400",
    "end": "1046120"
  },
  {
    "text": "notes error handling testing I was just going to say please",
    "start": "1046120",
    "end": "1051799"
  },
  {
    "text": "don't run a fuzzer over the code we write in the book like that that's not going to end in a good thing I'm sure it's going",
    "start": "1051799",
    "end": "1059799"
  },
  {
    "text": "to break on like the fourth try or something so the thing I really liked or the thing that I got the most out of",
    "start": "1059799",
    "end": "1066320"
  },
  {
    "text": "from the book and it's what we're gonna definitely want to hear from Tim about about too is just about parsers in",
    "start": "1066320",
    "end": "1071720"
  },
  {
    "text": "general you know whether you write an interpreter at the end or compiler or whatever just writing parsers can be",
    "start": "1071720",
    "end": "1077440"
  },
  {
    "text": "incredibly useful for all sorts of stuff so for example we've got um at gopher",
    "start": "1077440",
    "end": "1082960"
  },
  {
    "text": "guides we have a pars markdown parser we use that splits up our markdown so we can then do all sorts of things with it",
    "start": "1082960",
    "end": "1089120"
  },
  {
    "text": "we can rejigger it and make nicer slides or format it out in different ways um so that's not a language it's not something",
    "start": "1089120",
    "end": "1096480"
  },
  {
    "text": "we we really you know that that's that even that big it's not an interpreter it's not a compiler but we wrote a parser because we needed to to break",
    "start": "1096480",
    "end": "1103000"
  },
  {
    "text": "apart this file format and so just having that ability and knowledge of how that works to write something that's",
    "start": "1103000",
    "end": "1109000"
  },
  {
    "text": "simple is incredibly useful so it's the case you don't have to write a templating package you don't have to write a programming language you can",
    "start": "1109000",
    "end": "1116000"
  },
  {
    "text": "still make use of parsers for a ton of things well I think probably a lot of",
    "start": "1116000",
    "end": "1121280"
  },
  {
    "text": "people have written some version or some kind of parza before I know I have and",
    "start": "1121280",
    "end": "1126720"
  },
  {
    "text": "what happens is it works brilliantly for the specific case that I need it for and",
    "start": "1126720",
    "end": "1132159"
  },
  {
    "text": "then later I think oh that'd be great I'll add that and if you haven't structured it properly if you haven't",
    "start": "1132159",
    "end": "1138320"
  },
  {
    "text": "you know the book follows these patterns that are well tested the ones I did didn't I was just kind of trying to",
    "start": "1138320",
    "end": "1144679"
  },
  {
    "text": "figure it out myself and it became so frustrating I basically frisbe I wanted",
    "start": "1144679",
    "end": "1150240"
  },
  {
    "text": "to frisbee my laptop into the sea that's how bad it was so having the actual",
    "start": "1150240",
    "end": "1155960"
  },
  {
    "text": "structure properly you know paing properly like simple things like knowing",
    "start": "1155960",
    "end": "1161039"
  },
  {
    "text": "when you're in a string like because things change when you're in a string yeah you know so things like that which",
    "start": "1161039",
    "end": "1167360"
  },
  {
    "text": "if you're just splitting strings and doing some basic passing just sort of hand coding it that's the stuff that",
    "start": "1167360",
    "end": "1173480"
  },
  {
    "text": "gets really tricky so yeah I love the fact that these are tried and tested techniques and they're now available to",
    "start": "1173480",
    "end": "1180559"
  },
  {
    "text": "everyone uh in book for 1995 sto promoting could someone UNS slack if",
    "start": "1180559",
    "end": "1186559"
  },
  {
    "text": "anyone didn't like his books could you get in touch please because it's been a bit we want to make sure this is a nice",
    "start": "1186559",
    "end": "1192280"
  },
  {
    "text": "balanced show well you can throw shade at me if you want are we just are we trying to throw",
    "start": "1192280",
    "end": "1198039"
  },
  {
    "text": "shade with Torsten because I mean we could do that no we don't really have to oh",
    "start": "1198039",
    "end": "1205080"
  },
  {
    "text": "that's a drag can we talk about pegs what's pegs I think we should talk about pegs now I think that was a good we",
    "start": "1205080",
    "end": "1212080"
  },
  {
    "text": "talked about parsers I think that's a great introduction and I'd love to hear Ton's take on them as well Tim Tim",
    "start": "1212080",
    "end": "1218360"
  },
  {
    "text": "Raymond is with us uh Tim will be speaking next week at go for paloa by the way I'm doing Matt's NPR voice just",
    "start": "1218360",
    "end": "1225280"
  },
  {
    "text": "uh trying to fit right in there with him uh so will be presenting next week at gooa where it'll also be his birthday uh",
    "start": "1225280",
    "end": "1232520"
  },
  {
    "text": "and he will be talking about pegs which are parser expression grammar correct Tim yeah why don't you tell us what that",
    "start": "1232520",
    "end": "1238600"
  },
  {
    "text": "holiday treat's all about so pegs as Mark said are parsing expression grammars it's a language for",
    "start": "1238600",
    "end": "1246280"
  },
  {
    "text": "building parsers automatically it's a way of doing code generation if you've",
    "start": "1246280",
    "end": "1252280"
  },
  {
    "text": "read any other kind of like parsing stuff you might have heard of things like bison and these other kinds of",
    "start": "1252280",
    "end": "1257520"
  },
  {
    "text": "parser gener I find pegs are nice because they follow",
    "start": "1257520",
    "end": "1263480"
  },
  {
    "text": "closely to the kinds of parsers that you you would build by hand but I find that",
    "start": "1263480",
    "end": "1268760"
  },
  {
    "text": "once you've written that first parser by hand which which is what I recommend everyone do oh absolutely like just",
    "start": "1268760",
    "end": "1274520"
  },
  {
    "text": "before you even try pegs try writing one by hand so that way you can learn that",
    "start": "1274520",
    "end": "1279880"
  },
  {
    "text": "there's there's no magic going on here but a peg can help you make a lot of",
    "start": "1279880",
    "end": "1285559"
  },
  {
    "text": "ground very quickly when you're trying to build a new language or when you're",
    "start": "1285559",
    "end": "1290679"
  },
  {
    "text": "trying to interpret a language that that are just trying out new ideas for and is",
    "start": "1290679",
    "end": "1296000"
  },
  {
    "text": "it like a definition language then is it some kind of or is it like a configuration language how how does it",
    "start": "1296000",
    "end": "1301400"
  },
  {
    "text": "actually work in practice because presumably you have to sort of mention okay these are the keywords and I'm",
    "start": "1301400",
    "end": "1307640"
  },
  {
    "text": "going to have integers or I'm going to you know how does it look well so when you're writing out a parser by hand you",
    "start": "1307640",
    "end": "1315039"
  },
  {
    "text": "would ordinarily draw out the the grammar like okay we have a document and it's composed of like multiple different",
    "start": "1315039",
    "end": "1320840"
  },
  {
    "text": "statements or something like that pegs let you actually just write that string out like document produces a like",
    "start": "1320840",
    "end": "1329120"
  },
  {
    "text": "multiple statements and then when that rule actually matches then you can run",
    "start": "1329120",
    "end": "1334720"
  },
  {
    "text": "some custom go code for that section so it'll it allows you to have these little",
    "start": "1334720",
    "end": "1340600"
  },
  {
    "text": "hooks into different parts of where the grammar matches different things within",
    "start": "1340600",
    "end": "1346279"
  },
  {
    "text": "the text that it's processing right so maybe kind of give a visual thing so let's say mark it is a podcast please",
    "start": "1346279",
    "end": "1353279"
  },
  {
    "text": "remember that I know sorry okay well my doodles are apparently not going to help anybody in",
    "start": "1353279",
    "end": "1359320"
  },
  {
    "text": "the audience let's try to do a mental a mental also please put some clothes on we're gonna learn in a safe space here",
    "start": "1359320",
    "end": "1365600"
  },
  {
    "text": "Matt learning in a safe space okay I'll be quiet then close your eyes light a candle and picture mentally your mind an",
    "start": "1365600",
    "end": "1373159"
  },
  {
    "text": "empty. Peg file um no but what you would do is in there like so if you take say",
    "start": "1373159",
    "end": "1378279"
  },
  {
    "text": "the idea of declaring variable you know VAR a int right let's use something that we all kind of know right VAR a int you",
    "start": "1378279",
    "end": "1385039"
  },
  {
    "text": "know in that Peg file You' say okay well if I see this I'm GNA Define a keyw world code VAR and if I see that and",
    "start": "1385039",
    "end": "1391320"
  },
  {
    "text": "it's followed by this set of alpha numeric characters let's say right you",
    "start": "1391320",
    "end": "1396640"
  },
  {
    "text": "know a through z and zero through nine then that is you know what we can constitute as an identifier then you",
    "start": "1396640",
    "end": "1402760"
  },
  {
    "text": "have an INT right afterwards you know the type so you would write out a thing that says I'm going to create a V Rule",
    "start": "1402760",
    "end": "1409440"
  },
  {
    "text": "and it's going to look like this if it sees the word VAR followed by what I declare as an identifier match followed",
    "start": "1409440",
    "end": "1415080"
  },
  {
    "text": "by a type match followed by a new line right that rule is going to get matched",
    "start": "1415080",
    "end": "1420279"
  },
  {
    "text": "and in that rule you do something and go right you return something so you'd probably return like something that",
    "start": "1420279",
    "end": "1426760"
  },
  {
    "text": "handles variable declarations in your language yeah you could you could return a struct you could log something out so",
    "start": "1426760",
    "end": "1431919"
  },
  {
    "text": "if you were just building a a tool that could highlight things you could print out the thing that was even matched with",
    "start": "1431919",
    "end": "1438159"
  },
  {
    "text": "different highlighting you have access to what was actually matched by the the",
    "start": "1438159",
    "end": "1443520"
  },
  {
    "text": "peg so at that point you can do anything that you want really do they get difficult to follow though do do they",
    "start": "1443520",
    "end": "1450279"
  },
  {
    "text": "grow quite big quite quickly they can and we've actually been working on a a",
    "start": "1450279",
    "end": "1455480"
  },
  {
    "text": "newer version of plush um oh we have have we Tim so you're really just stealing my thunder uh yeah yeah I did I",
    "start": "1455480",
    "end": "1462600"
  },
  {
    "text": "I stole your thunder I'm sorry uh and in in so doing we found",
    "start": "1462600",
    "end": "1468080"
  },
  {
    "text": "that it actually Mark found that it's probably better to like try to move as",
    "start": "1468080",
    "end": "1473320"
  },
  {
    "text": "quickly as possible out of the peg into actual go code because it is generated",
    "start": "1473320",
    "end": "1479080"
  },
  {
    "text": "code so things like go Imports don't exactly work like at all so to have",
    "start": "1479080",
    "end": "1486120"
  },
  {
    "text": "certain facilities that we're used to write and go code we've just found that it's useful to have like certain support",
    "start": "1486120",
    "end": "1493559"
  },
  {
    "text": "go files along with it so unfortunately when you're writing these pegs you all you get is empty",
    "start": "1493559",
    "end": "1499559"
  },
  {
    "text": "interfaces right so the rule matches and what you're giving back is a bunch of empty interfaces that represent the",
    "start": "1499559",
    "end": "1507080"
  },
  {
    "text": "matches of that rule right and so since you write these things in a peg file it's not a g file and it's just poured",
    "start": "1507080",
    "end": "1513720"
  },
  {
    "text": "right so you kind of have to immediately take these mpty interfaces off and do something with them that's probably the biggest downside I found with them they",
    "start": "1513720",
    "end": "1520480"
  },
  {
    "text": "can get a bit hard to follow like you just sometimes get a bit lost in the",
    "start": "1520480",
    "end": "1525520"
  },
  {
    "text": "details but overall each rule itself if you break down and look at a rule they're very very simple and they're",
    "start": "1525520",
    "end": "1532320"
  },
  {
    "text": "very well defined right if you see if followed by parentheses followed by this",
    "start": "1532320",
    "end": "1538240"
  },
  {
    "text": "stuff in the middle it's these things right and do it handle it this way and it's remarkable how like Tim said how",
    "start": "1538240",
    "end": "1544080"
  },
  {
    "text": "quick you can make progress with it so it just outputs text then the peg doesn't know that it's go it's generator",
    "start": "1544080",
    "end": "1550399"
  },
  {
    "text": "the peg is text yeah and then you run a tool like pigeon over it and pigeon pars",
    "start": "1550399",
    "end": "1555840"
  },
  {
    "text": "ironically parses the peg and then it spits out a dogo",
    "start": "1555840",
    "end": "1561120"
  },
  {
    "text": "interpretation of that as a parser oh I mean it's Giant and it's huge and",
    "start": "1561120",
    "end": "1566559"
  },
  {
    "text": "whatever it's autogenerated code it's autogenerated code now I've heard that it's not as good as the one you would",
    "start": "1566559",
    "end": "1572399"
  },
  {
    "text": "handr write yourself but I know it's better than the one I would handr write myself yeah it depends whose hand it is",
    "start": "1572399",
    "end": "1578120"
  },
  {
    "text": "well that's exactly it I think you know I think tus and will agree you know understanding these things is great and",
    "start": "1578120",
    "end": "1584360"
  },
  {
    "text": "knowing them is very useful but we're not all language designers yeah and we're not all parser experts and you",
    "start": "1584360",
    "end": "1590320"
  },
  {
    "text": "know unless you want to be you're not going to be yeah right Tim said this uh",
    "start": "1590320",
    "end": "1597440"
  },
  {
    "text": "as your first parser he recommends you ride your own and I 100% agree as in",
    "start": "1597440",
    "end": "1605360"
  },
  {
    "text": "when I was looking for you know Googling how to write a par of for program language or something you will find",
    "start": "1605360",
    "end": "1612159"
  },
  {
    "text": "people saying don't worry about it just use a part of of generator M or something like yak byy",
    "start": "1612159",
    "end": "1618120"
  },
  {
    "text": "andler all of which I couldn't understand by the way exactly that's what I'm about to say that I understood",
    "start": "1618120",
    "end": "1624559"
  },
  {
    "text": "your book I did not understand those what these take as input is a",
    "start": "1624559",
    "end": "1629880"
  },
  {
    "text": "grammar like uh you know BNF uh back now form ebnf the extended version of that",
    "start": "1629880",
    "end": "1636600"
  },
  {
    "text": "and I found it really hard to just write a grammar like this or even understand",
    "start": "1636600",
    "end": "1642159"
  },
  {
    "text": "what it does or what it should do without having written a parser but once you wrote uh recurs if descent pauser",
    "start": "1642159",
    "end": "1648640"
  },
  {
    "text": "you look at these grammars and you go oh now I can see how you can create you",
    "start": "1648640",
    "end": "1653799"
  },
  {
    "text": "know the powers are from this and then you you kind of cherish what it",
    "start": "1653799",
    "end": "1659440"
  },
  {
    "text": "abstracts basically and then you can get into this whole you know like parsing the theory of parsing is a whole world",
    "start": "1659440",
    "end": "1665559"
  },
  {
    "text": "onto itself and I I dare not enter",
    "start": "1665559",
    "end": "1670600"
  },
  {
    "text": "it or speak about it yeah but you do a great job of explaining it in human",
    "start": "1670600",
    "end": "1676519"
  },
  {
    "text": "terms uh in the book though which is no it's like I said I just said unless you",
    "start": "1676519",
    "end": "1681799"
  },
  {
    "text": "want to be an expert you're not going to be there no good for dogs though you wouldn't recommend it if a dog my dog",
    "start": "1681799",
    "end": "1687279"
  },
  {
    "text": "well I've had dogs write me emails saying Ringo has written like four languages now like the dog can't can't",
    "start": "1687279",
    "end": "1693120"
  },
  {
    "text": "stop himself he's crazy with the book he's got the compiler book in his crate at night he's just flipping through",
    "start": "1693120",
    "end": "1698320"
  },
  {
    "text": "we'll pause most dogs like the second book much more yeah I would agree he went for the compiler book totally I",
    "start": "1698320",
    "end": "1704360"
  },
  {
    "text": "don't know why that is something about the bik code Maybe ooh he still a joke",
    "start": "1704360",
    "end": "1710080"
  },
  {
    "text": "thank you Dad jokes 101 everybody that's a good joke brilliant thank [Music]",
    "start": "1710080",
    "end": "1725159"
  },
  {
    "text": "you this episode is brought to you by strong DM manage and secure remote",
    "start": "1725159",
    "end": "1730440"
  },
  {
    "text": "access to any database any server on Prem or in the cloud and environments",
    "start": "1730440",
    "end": "1735640"
  },
  {
    "text": "they make it easy for devops teams to enforce the security and controls infos set teams require so if your engineers",
    "start": "1735640",
    "end": "1741919"
  },
  {
    "text": "need access you need strong DM so what can strong DM do for your team first off more control less hassle Grant or revoke",
    "start": "1741919",
    "end": "1749760"
  },
  {
    "text": "access to any database or server in one command use your SSO to manage access to",
    "start": "1749760",
    "end": "1754880"
  },
  {
    "text": "every database every server and environment second total visibility strong DM upgrades your audit logs log",
    "start": "1754880",
    "end": "1761600"
  },
  {
    "text": "every permission change every query every SSH and every RDP command and know",
    "start": "1761600",
    "end": "1766919"
  },
  {
    "text": "who is is those changes and of course faster stock 2 compliance easily enforce access controls and instantly answer",
    "start": "1766919",
    "end": "1774320"
  },
  {
    "text": "auditor questions head to strong dm.com gotime to learn more and request a free",
    "start": "1774320",
    "end": "1779480"
  },
  {
    "text": "demo again strong dm.com [Music]",
    "start": "1779480",
    "end": "1795960"
  },
  {
    "text": "gotime so does the compiler book follow on from The Interpreter book then yeah",
    "start": "1796320",
    "end": "1802720"
  },
  {
    "text": "yeah it's a it's a sequel which is kind of hard to explain to a technical audience as in yeah it's a sequel like",
    "start": "1802720",
    "end": "1809960"
  },
  {
    "text": "you end on the last page of the first book and then you open a second one and",
    "start": "1809960",
    "end": "1815039"
  },
  {
    "text": "admittedly the monkey language was taken hostage at the end of the first book so I can understand why people wanted the",
    "start": "1815039",
    "end": "1820200"
  },
  {
    "text": "sequel yeah I wanted to know what happened to Monkey Too why did people struggle to understand that toron cuz it",
    "start": "1820200",
    "end": "1825760"
  },
  {
    "text": "seem seems like an extremely simple concept it's a sequ I don't know I don't",
    "start": "1825760",
    "end": "1831600"
  },
  {
    "text": "know like I people ask me do I need to read the first one before I start the second one which is yeah if you think of",
    "start": "1831600",
    "end": "1837799"
  },
  {
    "text": "you know the titles do not maybe give it away that it they kind of build on each",
    "start": "1837799",
    "end": "1842919"
  },
  {
    "text": "other but they do they use the same code base and you know yeah you can read the",
    "start": "1842919",
    "end": "1848720"
  },
  {
    "text": "second one without having read the first one but what you then have to do is you have to treat the things we built in the",
    "start": "1848720",
    "end": "1855000"
  },
  {
    "text": "first book as black boxes mhm which is kind of not what the books are about you",
    "start": "1855000",
    "end": "1860480"
  },
  {
    "text": "can read the second one and say okay they apparently have a parer here they have an a package they have object model",
    "start": "1860480",
    "end": "1868200"
  },
  {
    "text": "or something I'm going to ignore this and just focus on the bite code and the VM you can do that but I haven't wrote",
    "start": "1868200",
    "end": "1875679"
  },
  {
    "text": "them this way so there might be stuff missing so I do not recommend it and when's the prequel come out can't wait",
    "start": "1875679",
    "end": "1883000"
  },
  {
    "text": "the prequel um like baby monkey I don't know I don't know I'm",
    "start": "1883000",
    "end": "1889279"
  },
  {
    "text": "looking forward to it there's a lot of stuff you could add to both books I",
    "start": "1889279",
    "end": "1895039"
  },
  {
    "text": "guess you know as we said you can extend a programming language in any Dimension you want and you know like add you know",
    "start": "1895039",
    "end": "1902399"
  },
  {
    "text": "more to the syntax add more to the functionality improve the implementation make it faster make it more efficient",
    "start": "1902399",
    "end": "1908519"
  },
  {
    "text": "whatever but the limitation here is how do you explain it in a book like when I",
    "start": "1908519",
    "end": "1916799"
  },
  {
    "text": "start started writing the first one I thought yeah I'm going to do interpreter",
    "start": "1916799",
    "end": "1922840"
  },
  {
    "text": "and then you know VM bite code in the same book and then I started writing and",
    "start": "1922840",
    "end": "1928200"
  },
  {
    "text": "then I realized I'm not going to make it to the end of this what are you the Stephen King of technical authors you",
    "start": "1928200",
    "end": "1933679"
  },
  {
    "text": "know turn a thousand piece Masterwork yeah yeah part one and at the end it's",
    "start": "1933679",
    "end": "1940480"
  },
  {
    "text": "just a giant spider yeah real let down so the compiler book",
    "start": "1940480",
    "end": "1946919"
  },
  {
    "text": "then it takes the the language the language can be interpreted from its text so there's input that is text gets",
    "start": "1946919",
    "end": "1953760"
  },
  {
    "text": "interpreted so then you understand what that says and so then what's the process",
    "start": "1953760",
    "end": "1960200"
  },
  {
    "text": "then for that to turn into something that can be executed and compiled or compiled and then executed so let's go",
    "start": "1960200",
    "end": "1968519"
  },
  {
    "text": "back to what I said earlier about computer only understands a single",
    "start": "1968519",
    "end": "1974399"
  },
  {
    "text": "language and the goal is to you know have the computer understand what you're saying and just as with",
    "start": "1974399",
    "end": "1982480"
  },
  {
    "text": "humans and I know I'm stretching this metaphor bit there's two ways to kind of",
    "start": "1982480",
    "end": "1988600"
  },
  {
    "text": "make someone understand the language they don't speak you could for example listen to what another person is saying",
    "start": "1988600",
    "end": "1995679"
  },
  {
    "text": "and write that down and translate it into the language your friend can understand and then pass that on to them",
    "start": "1995679",
    "end": "2001960"
  },
  {
    "text": "and then they can read it or you can you know translate on the Fly interpret so",
    "start": "2001960",
    "end": "2008080"
  },
  {
    "text": "to say and just listen what the other person is saying sentence by sentence and then you know speak it back to your",
    "start": "2008080",
    "end": "2013519"
  },
  {
    "text": "friend if we translate that on the computers interpreting means taking",
    "start": "2013519",
    "end": "2020120"
  },
  {
    "text": "another language the computer does not understand as input and depending on",
    "start": "2020120",
    "end": "2026840"
  },
  {
    "text": "what is being said you execute or you immediately run the things this language tells you",
    "start": "2026840",
    "end": "2034600"
  },
  {
    "text": "to do in a language that the computer can understand I don't know if that makes sense but it is it's kind of",
    "start": "2034600",
    "end": "2041080"
  },
  {
    "text": "what's happening and when you compile you actually translate you take the",
    "start": "2041080",
    "end": "2047320"
  },
  {
    "text": "input and translate into to another language and then pass that onto the computer if you compile a go code to a",
    "start": "2047320",
    "end": "2055040"
  },
  {
    "text": "binary that's exactly what happens you take the go code the compiler takes it in and produces machine code the",
    "start": "2055040",
    "end": "2060960"
  },
  {
    "text": "computer and the operating system can understand there's a bunch of different go rapples I think there are a bunch of",
    "start": "2060960",
    "end": "2067839"
  },
  {
    "text": "yeah and what they do is well I'm actually not sure how they implement it come to think of it but what they could",
    "start": "2067839",
    "end": "2073720"
  },
  {
    "text": "do I I can tell you how a lot of them work which is to compile and run on the back end they take the statement compile",
    "start": "2073720",
    "end": "2080200"
  },
  {
    "text": "it and run that's exactly what I didn't want to here to explain this because you could since go is a",
    "start": "2080200",
    "end": "2086679"
  },
  {
    "text": "compiled language you could some limitations aside you could just as well interpret it by reading it line by line",
    "start": "2086679",
    "end": "2093440"
  },
  {
    "text": "and then you know oh the next line says you know format print line or something",
    "start": "2093440",
    "end": "2099520"
  },
  {
    "text": "let's print a line instead of Translating that into another instruction that tells the computer to print a",
    "start": "2099520",
    "end": "2105160"
  },
  {
    "text": "line and you know uh you're going to ask me I bet when should you do what no we",
    "start": "2105160",
    "end": "2113359"
  },
  {
    "text": "weren't but I prepared notes fine if you prepared",
    "start": "2113359",
    "end": "2120480"
  },
  {
    "text": "notes well thank you for asking so when should you do one or the other",
    "start": "2120480",
    "end": "2127720"
  },
  {
    "text": "if you translate it into another language a computer can understand that means you can hand it off and then",
    "start": "2127720",
    "end": "2133800"
  },
  {
    "text": "there's no translation involved anymore when executing the program right you translate it once which means you kind",
    "start": "2133800",
    "end": "2141119"
  },
  {
    "text": "of frontload the cost of translation to a point in time where you're willing to",
    "start": "2141119",
    "end": "2146280"
  },
  {
    "text": "pay it if you're compiling go code on your machine you're happy to wait a few seconds because that makes the program",
    "start": "2146280",
    "end": "2153280"
  },
  {
    "text": "run faster later on when it needs to run on the server if for example you're not",
    "start": "2153280",
    "end": "2158599"
  },
  {
    "text": "willing to pay that cost you could just as well say no this needs to run I don't",
    "start": "2158599",
    "end": "2163640"
  },
  {
    "text": "want to wait for it you know let's say you have a scripting language or bash like a shell language where you want it",
    "start": "2163640",
    "end": "2170240"
  },
  {
    "text": "to run immediately then you don't compile it and you interpret it on the spot line by line",
    "start": "2170240",
    "end": "2176000"
  },
  {
    "text": "basically and you know answering your follow-up question do we need to be here",
    "start": "2176000",
    "end": "2182240"
  },
  {
    "text": "for this or can we just go while you interview yourself no no no no no I've got it all",
    "start": "2182240",
    "end": "2188319"
  },
  {
    "text": "figured out just uh mute your microphone so if you're willing to pay",
    "start": "2188319",
    "end": "2193760"
  },
  {
    "text": "the the cost up front then that means you can also do stuff that wouldn't be",
    "start": "2193760",
    "end": "2199079"
  },
  {
    "text": "feasible to do when you run it at the same time that you're interpreting it for example optimizations right if",
    "start": "2199079",
    "end": "2205319"
  },
  {
    "text": "you're compiling a huge program let's say 100,000 lines of code there's a bunch of optimizations you can do for",
    "start": "2205319",
    "end": "2211760"
  },
  {
    "text": "example removing duplicate code inlining functions and so on these optimiz ations",
    "start": "2211760",
    "end": "2218079"
  },
  {
    "text": "cost time they cost computation power and if you have to translate and do",
    "start": "2218079",
    "end": "2224280"
  },
  {
    "text": "those optimizations while running the program that costs you need to somehow",
    "start": "2224280",
    "end": "2229680"
  },
  {
    "text": "make that happen without you know paying the performance penalty that would be accured on the running program but if",
    "start": "2229680",
    "end": "2236400"
  },
  {
    "text": "you're you know willing to pay this cost up front you can do that and you know as a tying it back to go the go compiler",
    "start": "2236400",
    "end": "2245040"
  },
  {
    "text": "you know I might be wrong with this but I heard heard people on the go team say that they really care about the speed of",
    "start": "2245040",
    "end": "2251160"
  },
  {
    "text": "the compiler so that's why they don't add too many optimizations or something",
    "start": "2251160",
    "end": "2256240"
  },
  {
    "text": "it's a tradeoff right they they really conscious of that trade-off as in yeah we could put more optimizations into the",
    "start": "2256240",
    "end": "2262240"
  },
  {
    "text": "compiler that would mean you know they could spend more time on making the code run faster but that would also mean that",
    "start": "2262240",
    "end": "2269599"
  },
  {
    "text": "the compilation process get slower which would be you know a penalty we all have",
    "start": "2269599",
    "end": "2274680"
  },
  {
    "text": "to pay since we you know all of of us kind of cherished that how fast the the",
    "start": "2274680",
    "end": "2279880"
  },
  {
    "text": "compiler is yeah but you make it configurable couldn't you and just have a one that builds quickly for no",
    "start": "2279880",
    "end": "2287520"
  },
  {
    "text": "optimizations for Dev and then when you want to put it into production you do the slow one guess you could yeah you",
    "start": "2287520",
    "end": "2293119"
  },
  {
    "text": "could tweak your jvm settings and really yeah yeah all right that's a bur you",
    "start": "2293119",
    "end": "2301160"
  },
  {
    "text": "could right other compilers have this they have optimization levels there's even I learned about this last year",
    "start": "2301160",
    "end": "2306280"
  },
  {
    "text": "there's super compilers uh which is awesome name for I don't you know",
    "start": "2306280",
    "end": "2311440"
  },
  {
    "text": "doesn't matter what it is it's an awesome name yeah they they wear capes and have big letters on exactly exactly",
    "start": "2311440",
    "end": "2317079"
  },
  {
    "text": "so they they yeah they fly much faster than any other compiler but what super compilers do and again and this you know",
    "start": "2317079",
    "end": "2325000"
  },
  {
    "text": "is valid for everything I say I might be wrong here but what super compilers do",
    "start": "2325000",
    "end": "2330160"
  },
  {
    "text": "is they basically spend all of the time they run on trying different",
    "start": "2330160",
    "end": "2335520"
  },
  {
    "text": "optimizations it's a thing you kick off and have run like a CI process on",
    "start": "2335520",
    "end": "2341560"
  },
  {
    "text": "everything you push they just run for hours and hours and hours and try to find optimizations and test those",
    "start": "2341560",
    "end": "2347960"
  },
  {
    "text": "optimizations and then they come up with a a gold image and say this is the fastest possible we can make this and",
    "start": "2347960",
    "end": "2354760"
  },
  {
    "text": "and and games companies use this for they call it gold builds I think so when",
    "start": "2354760",
    "end": "2359920"
  },
  {
    "text": "the game is finished and it's ready to be shipped they take the binary or you know assambly language and put it into a",
    "start": "2359920",
    "end": "2367640"
  },
  {
    "text": "super compiler and that super compiler looks at this and tries to reorder the code remove duplicate code and different",
    "start": "2367640",
    "end": "2373599"
  },
  {
    "text": "combinations and it runs for weeks to come up with a faster version of the program that's awesome and also they can",
    "start": "2373599",
    "end": "2381079"
  },
  {
    "text": "shoot lasers out of their eyes I just give my code to Tim yeah",
    "start": "2381079",
    "end": "2387680"
  },
  {
    "text": "Tim's your super compiler he really is well Tim Tim is my go-to CS",
    "start": "2387680",
    "end": "2393400"
  },
  {
    "text": "expert he first introduced me to pegs for example earlier this year uh when we were heading down to Gotham go so that's",
    "start": "2393400",
    "end": "2400400"
  },
  {
    "text": "kind of you know I always love having Tim around for that because he really is my super",
    "start": "2400400",
    "end": "2405880"
  },
  {
    "text": "compiler so you know it's interesting I'm really excited hon just to be on the call with Torsten because I'm such a big",
    "start": "2405880",
    "end": "2412000"
  },
  {
    "text": "fan with plush no no I was about to say and not a",
    "start": "2412000",
    "end": "2419319"
  },
  {
    "text": "big pleasure to be on the call with Matthew as always okay that negative has confused me which by the way folks I am",
    "start": "2419319",
    "end": "2425440"
  },
  {
    "text": "the only person who who's allowed to call him Matthew yeah and even you that is definitely not allowed but yeah well",
    "start": "2425440",
    "end": "2432880"
  },
  {
    "text": "sorry mate it's a syntax error no it's a thing now sorry I'm GNA have to write a",
    "start": "2432880",
    "end": "2438079"
  },
  {
    "text": "peg to pass my name make sure it's acceptable come on that's it's a computer podcast those kinds of jokes",
    "start": "2438079",
    "end": "2444760"
  },
  {
    "text": "are fine are they though are they",
    "start": "2444760",
    "end": "2450200"
  },
  {
    "text": "really so I'm excited to be on the podcast with torson and Tim because as Tim kind of mentioned earlier we are",
    "start": "2450200",
    "end": "2456359"
  },
  {
    "text": "working on a replacement for plush thank you Matt what's it called um called Lush",
    "start": "2456359",
    "end": "2462480"
  },
  {
    "text": "clever is it smaller it it is well is I guess but we're using a peg for it does",
    "start": "2462480",
    "end": "2468319"
  },
  {
    "text": "it smell really strong when you walk past it in the High Street does that translate that is a very English joke I",
    "start": "2468319",
    "end": "2473800"
  },
  {
    "text": "got it I got it okay it is very English I's there's a soap shop called Lush and",
    "start": "2473800",
    "end": "2479040"
  },
  {
    "text": "it frankly stinks that was a joke it does yeah yeah they all do and so but",
    "start": "2479040",
    "end": "2485359"
  },
  {
    "text": "it's a super set of monkey act well you know of what we ended up using for plush so it supports all of plush plus more",
    "start": "2485359",
    "end": "2493240"
  },
  {
    "text": "it's kind of like a interpreted version of go without types right basically basically yeah but it's just been",
    "start": "2493240",
    "end": "2499040"
  },
  {
    "text": "interesting to approach the same problem from these two different angles as well because it's essentially the same thing",
    "start": "2499040",
    "end": "2504880"
  },
  {
    "text": "so Lush is going to be a scripting embeddable scripting language that also compiles to go so you can imagine as",
    "start": "2504880",
    "end": "2510640"
  },
  {
    "text": "like you know if you're using it in your application you write HTML files and then they get compiled to.go files which",
    "start": "2510640",
    "end": "2516520"
  },
  {
    "text": "is pretty nice does it do it in the same way the standard Library does where you actually at runtime you compile it or",
    "start": "2516520",
    "end": "2523240"
  },
  {
    "text": "would you pre-compile it in some way yes it is a pre-compilation step where we take a lush script and we can generate a",
    "start": "2523240",
    "end": "2529400"
  },
  {
    "text": "dogo file from it and kind of work through it but ex said just the ideas and looking at the problem from first",
    "start": "2529400",
    "end": "2536640"
  },
  {
    "text": "writing of the parser and lexer and as and and all of that and then writing something like a peg where if you go to",
    "start": "2536640",
    "end": "2543359"
  },
  {
    "text": "go Buffalo Lush you can even see the peg there um but way it's not ready for production Tim Needs to make Expressions",
    "start": "2543359",
    "end": "2549920"
  },
  {
    "text": "work well yes um but it's an interesting way to kind of look at it from these two",
    "start": "2549920",
    "end": "2555160"
  },
  {
    "text": "different perspectives of one of this kind of like I am going to minutely kind of churn through each bit of this file",
    "start": "2555160",
    "end": "2562920"
  },
  {
    "text": "and and understand and keep track of that and process that on my own so I know exactly what's happening and then",
    "start": "2562920",
    "end": "2569480"
  },
  {
    "text": "to another way is to to use a Peg and just kind of turn that over to somebody else or to a code generation tool and",
    "start": "2569480",
    "end": "2576160"
  },
  {
    "text": "and say let me try to abstractly Define what this looks like and what this is going to be um and hope that it",
    "start": "2576160",
    "end": "2582280"
  },
  {
    "text": "generates the right thing on the other side I don't think I could have done it without understanding parsers first I",
    "start": "2582280",
    "end": "2588880"
  },
  {
    "text": "really don't I've used pegs now for a bunch of things but I yeah if you don't",
    "start": "2588880",
    "end": "2594480"
  },
  {
    "text": "understand it I don't think it's I don't know Tim you s them it would be a much a",
    "start": "2594480",
    "end": "2600200"
  },
  {
    "text": "slower process just because just like ton was was saying earlier you can",
    "start": "2600200",
    "end": "2605880"
  },
  {
    "text": "really appreciate what the autogenerated code is doing for you because it's doing it in such a way that",
    "start": "2605880",
    "end": "2613520"
  },
  {
    "text": "you're basically generating your own recursive descent parser so you write these in like a recursive descent way",
    "start": "2613520",
    "end": "2620880"
  },
  {
    "text": "and yeah so without like the prior context of having written one you would",
    "start": "2620880",
    "end": "2626800"
  },
  {
    "text": "be reading a lot more documentation than you would otherwise have to but you also have the compilation step in it right as",
    "start": "2626800",
    "end": "2633960"
  },
  {
    "text": "in if you output go code oh that's a different thing that's just the benefit of this language that we're working on",
    "start": "2633960",
    "end": "2639839"
  },
  {
    "text": "the tool we're working on that's just one of its features but I mean you said I couldn't",
    "start": "2639839",
    "end": "2647760"
  },
  {
    "text": "have written this without understanding parses and my question would be do you think you've you could have written it",
    "start": "2647760",
    "end": "2655200"
  },
  {
    "text": "without knowing anything about compilation or kind of getting into this topic so I I know nothing about",
    "start": "2655200",
    "end": "2660920"
  },
  {
    "text": "compilation I see question answered yeah I haven't read your second book I'm not going to lie to you we I said that at",
    "start": "2660920",
    "end": "2666720"
  },
  {
    "text": "the very beginning of the show so I don't feel bad about that I didn't read the second book so again Lush is an",
    "start": "2666720",
    "end": "2671880"
  },
  {
    "text": "embeddable scripting language one of the things that it looks so much like go because monkey looks an awful lot like",
    "start": "2671880",
    "end": "2676920"
  },
  {
    "text": "go if you took away types in a lot of places um and certainly plush does and and Lush takes it even further so to",
    "start": "2676920",
    "end": "2684319"
  },
  {
    "text": "take that and to generate go from it is not all that difficult it's just a matter of kind of implementing the right",
    "start": "2684319",
    "end": "2689480"
  },
  {
    "text": "format or you know right print package to just say okay this is an if node how",
    "start": "2689480",
    "end": "2696000"
  },
  {
    "text": "do we print an if node and go right and some of the stuff is even easier than that so you take a lush map and all you",
    "start": "2696000",
    "end": "2701040"
  },
  {
    "text": "got to do to translate to go code is just take the underlying map and run it",
    "start": "2701040",
    "end": "2706160"
  },
  {
    "text": "through Sprint F and you get back the go get the act that correct go code on the other side right so that's one of the",
    "start": "2706160",
    "end": "2712760"
  },
  {
    "text": "features coming out of it but it's yeah it's not a proper compilation step because we're just it's another code generation step yeah and then that",
    "start": "2712760",
    "end": "2719800"
  },
  {
    "text": "obviously would get compiled I mean you could say most code generation does look a little bit like compilation",
    "start": "2719800",
    "end": "2726480"
  },
  {
    "text": "especially in this case because we're transpiling I think is probably the word you'd probably want to use isn't it it's you can transpile it to go is that right",
    "start": "2726480",
    "end": "2733640"
  },
  {
    "text": "it's all compilers to me yeah it's it's all compil way yeah I think I don't I",
    "start": "2733640",
    "end": "2739920"
  },
  {
    "text": "think the transpilation compilation distinction doesn't hold up for longer than two",
    "start": "2739920",
    "end": "2746640"
  },
  {
    "text": "minutes in any like you said everything eventually has to get compiled or transpiled down",
    "start": "2746640",
    "end": "2752960"
  },
  {
    "text": "to a language the computer can understand yeah so go eventually has to be transpiled down to that or compil",
    "start": "2752960",
    "end": "2759680"
  },
  {
    "text": "it's like yeah I agree I never understand which words to use you kind of touched upon what I was getting at",
    "start": "2759680",
    "end": "2767240"
  },
  {
    "text": "that you said you know it's just printing stuff it's just formatting stuff and I feel this is the same thing",
    "start": "2767240",
    "end": "2773960"
  },
  {
    "text": "that Matt mentioned earlier about parsing where you start out writing your custom thing specific to your problem",
    "start": "2773960",
    "end": "2781319"
  },
  {
    "text": "and then once you know kind of the the general or more abstract pattern behind",
    "start": "2781319",
    "end": "2787079"
  },
  {
    "text": "it you can enhance that and make it better and make it work for more use cases and I had the same experience with",
    "start": "2787079",
    "end": "2793839"
  },
  {
    "text": "compilation where you you start out oh wait I just have to walk along these noes and just print stuff and then you",
    "start": "2793839",
    "end": "2801960"
  },
  {
    "text": "know you you go from there and then you realize oh instead of printing stuff immediately I should probably turn it into another thing another data",
    "start": "2801960",
    "end": "2808920"
  },
  {
    "text": "structure that I can then reorder more easily or something and then I can turn this into something else and only then I",
    "start": "2808920",
    "end": "2816119"
  },
  {
    "text": "will you know output strings and then suddenly you have you know invented an",
    "start": "2816119",
    "end": "2821240"
  },
  {
    "text": "an Intermediate Language and proper compilation step or something there are all sorts of stuff yeah i' I came across",
    "start": "2821240",
    "end": "2828079"
  },
  {
    "text": "you know kind of working on this is working through the go step of all this and it's things like for example uh Lush",
    "start": "2828079",
    "end": "2834000"
  },
  {
    "text": "or plush whatever can have unused variables so can't monkey right uh and unused variables are fine they're not",
    "start": "2834000",
    "end": "2840640"
  },
  {
    "text": "fine in go so how do you output that into some go code if without knowing if",
    "start": "2840640",
    "end": "2846079"
  },
  {
    "text": "the variable is going to be used nice later on right so let me guess you you print the variable and then immediately",
    "start": "2846079",
    "end": "2852480"
  },
  {
    "text": "do underscore equals you're looking at the the site aren't you no no no is that it really see the reflection in your",
    "start": "2852480",
    "end": "2860040"
  },
  {
    "text": "glasses I hope not but that's that's exactly what we do",
    "start": "2860040",
    "end": "2866319"
  },
  {
    "text": "right you know we declare the variable and then immediately do underneath it underscore equals a right and then that",
    "start": "2866319",
    "end": "2873319"
  },
  {
    "text": "you know so you can't just say oh I'll run it through sprintf all the time because like I said there are these",
    "start": "2873319",
    "end": "2878680"
  },
  {
    "text": "moments where if you just printed it out it sure it's valid go code for that one",
    "start": "2878680",
    "end": "2883960"
  },
  {
    "text": "line but not valid in a bigger context yeah do you do that for every",
    "start": "2883960",
    "end": "2889680"
  },
  {
    "text": "variable you come across or just outputting the the go code right now yeah that's what I'm doing again that",
    "start": "2889680",
    "end": "2895480"
  },
  {
    "text": "that part of it's not not finished yet it's gonna be the end goal I think because I was goingon to say if you can",
    "start": "2895480",
    "end": "2900839"
  },
  {
    "text": "detect which one's not unused to Output the underscore equals that you can",
    "start": "2900839",
    "end": "2907160"
  },
  {
    "text": "then you're already there right you can already there we we almost could if we had like",
    "start": "2907160",
    "end": "2912920"
  },
  {
    "text": "another intermediate layer you could yeah there you go little data play",
    "start": "2912920",
    "end": "2918280"
  },
  {
    "text": "analysis and yeah Perfection is the enemy of progress though you know which book to read Mark right yeah I've heard",
    "start": "2918280",
    "end": "2925880"
  },
  {
    "text": "I've heard good things this this is the one problem of of knowing that you can compile is like oh well we could have",
    "start": "2925880",
    "end": "2932040"
  },
  {
    "text": "just another like intermediate layer and keep like oh we can do I thought you were going to say this one",
    "start": "2932040",
    "end": "2937680"
  },
  {
    "text": "of the problems of working with Mark oh yeah wouldn't even make the top 50 that",
    "start": "2937680",
    "end": "2942799"
  },
  {
    "text": "Mar not even close so far down the [Music]",
    "start": "2942799",
    "end": "2953580"
  },
  {
    "text": "list this episode is brought to you by ghost CD with Native Integrations for kubernetes and a Helm chart to quickly",
    "start": "2955440",
    "end": "2962559"
  },
  {
    "text": "get started gohost C is an easy choice for cloud native teams with GH CD running on kubernetes you define your",
    "start": "2962559",
    "end": "2968960"
  },
  {
    "text": "build workflow and let GH CD provision and scale build infrastructure on the Fly For You GH CD installs as a",
    "start": "2968960",
    "end": "2976160"
  },
  {
    "text": "kubernetes native application which allows for ease of operations easily upgrade and maintain goost C using Helm",
    "start": "2976160",
    "end": "2982960"
  },
  {
    "text": "scale your build infrastructure elastically with a new elastic agent that uses kubernetes conventions to",
    "start": "2982960",
    "end": "2988480"
  },
  {
    "text": "dynamically scale go C agents go CD also has first class integration with Docker Registries easily composed track and",
    "start": "2988480",
    "end": "2996680"
  },
  {
    "text": "visualize deployments on kubernetes learn more and get started at go.org kubernetes again go.org",
    "start": "2996680",
    "end": "3005440"
  },
  {
    "text": "[Music]",
    "start": "3008840",
    "end": "3014440"
  },
  {
    "text": "kubernetes but how exciting is it though when as you make progress through it when suddenly it starts to seem like",
    "start": "3016359",
    "end": "3023119"
  },
  {
    "text": "it's intelligent like you know when you start to uh like as soon as you have",
    "start": "3023119",
    "end": "3028400"
  },
  {
    "text": "something like recursion or something working when you can suddenly start to",
    "start": "3028400",
    "end": "3033480"
  },
  {
    "text": "see surprisingly clever Behavior happen that must be kind of thrilling to see",
    "start": "3033480",
    "end": "3038520"
  },
  {
    "text": "that that sort of progress does that you know what I mean amazing yeah speaking between us it's super exciting right it",
    "start": "3038520",
    "end": "3045680"
  },
  {
    "text": "really is yeah well Matt you know I I was working on plush earlier this year when I first started working I was tweeting I was sending the text message",
    "start": "3045680",
    "end": "3052079"
  },
  {
    "text": "all the time going oh my God look at this I can't believe at this like it has go routine support because it was so easy to add go",
    "start": "3052079",
    "end": "3059240"
  },
  {
    "text": "routine support to a scripting language right exactly amazing yeah the whole",
    "start": "3059240",
    "end": "3064359"
  },
  {
    "text": "script does a sync weight so when you do a go it automatically adds it and manages it and everything like that but",
    "start": "3064359",
    "end": "3070119"
  },
  {
    "text": "it was super easy to do especially with the peg it was just looking for that keyword and then saying if it's followed",
    "start": "3070119",
    "end": "3076280"
  },
  {
    "text": "by a function you know do something with it and yeah the stuff you can do when",
    "start": "3076280",
    "end": "3081480"
  },
  {
    "text": "you start learning parsers and pegs blw my mind for me that was uh when I had",
    "start": "3081480",
    "end": "3087720"
  },
  {
    "text": "closures working when you realize oh now you know it actually works like it's a step by",
    "start": "3087720",
    "end": "3095359"
  },
  {
    "text": "step you know approach to solution like you started with functions then you start out oh functions are values I can",
    "start": "3095359",
    "end": "3101400"
  },
  {
    "text": "pass them around and then you go oh closures are functions that are passed around but they carry the environment",
    "start": "3101400",
    "end": "3107640"
  },
  {
    "text": "with them that they closed over and once you have that working you go nice now I",
    "start": "3107640",
    "end": "3112680"
  },
  {
    "text": "can you know any any scheme or this person will tell you once you have closures you can build object",
    "start": "3112680",
    "end": "3118640"
  },
  {
    "text": "orientation or something then you can just you know build constructive functions that return a closure that",
    "start": "3118640",
    "end": "3124240"
  },
  {
    "text": "wraps around some State and you know returns other functions and all of that stuff and that's really really cool",
    "start": "3124240",
    "end": "3131559"
  },
  {
    "text": "that's cuz it sounds so hard it's kind of beautiful in how",
    "start": "3131559",
    "end": "3137000"
  },
  {
    "text": "little you need to bootstrap a system and I'm on the side of working on a",
    "start": "3137000",
    "end": "3143520"
  },
  {
    "text": "scheme compiler a scheme to x86 compiler and it's not nearly finished it's",
    "start": "3143520",
    "end": "3150079"
  },
  {
    "text": "endless basically but it can do a lot of stuff already and it's really nice to see that there's certain Milestones you",
    "start": "3150079",
    "end": "3158160"
  },
  {
    "text": "reach where you can Leverage What you built before so you put in a few",
    "start": "3158160",
    "end": "3163640"
  },
  {
    "text": "builtins or Primitives um you know equals comparing stuff type checks and",
    "start": "3163640",
    "end": "3170079"
  },
  {
    "text": "then you can build higher level constructs that leverage these things and now suddenly",
    "start": "3170079",
    "end": "3175760"
  },
  {
    "text": "you have much more functionality available and then you can use those higher level contracts and build more of",
    "start": "3175760",
    "end": "3180880"
  },
  {
    "text": "those yeah exactly and now I feel like I'm kind of close that if I put more",
    "start": "3180880",
    "end": "3186640"
  },
  {
    "text": "work you know slash time into it you could make it so that it can bootstrap",
    "start": "3186640",
    "end": "3193200"
  },
  {
    "text": "itself compile itself and that [Music] is now we're talking only this group of",
    "start": "3193200",
    "end": "3201079"
  },
  {
    "text": "people would have like a respect for oh yeah imagine imagine if the monkey",
    "start": "3201079",
    "end": "3206240"
  },
  {
    "text": "language ends up being Skynet that is literally all I dream about every night",
    "start": "3206240",
    "end": "3211720"
  },
  {
    "text": "when you're doing so the thing you know going back to pegs because that's what I've been working with a lot recently and we talk about closures one I found",
    "start": "3211720",
    "end": "3218200"
  },
  {
    "text": "that because of the recursive parts are builds the descend Parts you just it kind of falls out it's actually fairly",
    "start": "3218200",
    "end": "3223440"
  },
  {
    "text": "easy to do this and kind of pass around these contexts and you know for example",
    "start": "3223440",
    "end": "3228720"
  },
  {
    "text": "we Lush supports VAR a you know um let a",
    "start": "3228720",
    "end": "3233920"
  },
  {
    "text": "and a colon right and they all mean different things I don't know I don't think they",
    "start": "3233920",
    "end": "3239480"
  },
  {
    "text": "necessarily mean that in the monkey language but certainly un L they do so you know let let you write over an existing variable or declares a new one",
    "start": "3239480",
    "end": "3246599"
  },
  {
    "text": "in that scope VAR declares a new variable but if one exists already it errors right and then a Col and equal",
    "start": "3246599",
    "end": "3253520"
  },
  {
    "text": "does the same thing you'd expect to do as a go but carrying around the information around with those and and",
    "start": "3253520",
    "end": "3258839"
  },
  {
    "text": "and checking to see whether it's currently in scope or out of scope becomes so much easier and it doesn't",
    "start": "3258839",
    "end": "3264640"
  },
  {
    "text": "involve a whole lot of effort to start typing those sorts of things in how do",
    "start": "3264640",
    "end": "3270559"
  },
  {
    "text": "you decide about that feature then did that come that particular the two flavors of having VAR and let well let",
    "start": "3270559",
    "end": "3277760"
  },
  {
    "text": "was there to let people move from plush to Lush right so it's backwards",
    "start": "3277760",
    "end": "3285000"
  },
  {
    "text": "compatibility yeah it supports both like things like lat it also supports the monkey style four um which is like four",
    "start": "3285000",
    "end": "3291799"
  },
  {
    "text": "parentheses or brackets depending on which country you're in variable in whatever um it supports that but it also",
    "start": "3291799",
    "end": "3297319"
  },
  {
    "text": "supports range statements just like and go right so you know Lush is moving more",
    "start": "3297319",
    "end": "3302480"
  },
  {
    "text": "towards looking like an interpreted not you know dynamic Go versus a what monkey",
    "start": "3302480",
    "end": "3309920"
  },
  {
    "text": "necessarily was originally but I had I wanted to make sure I could support all of those plush templates as they get",
    "start": "3309920",
    "end": "3317040"
  },
  {
    "text": "moved forward so yeah understanding what those were obviously a colon equal and",
    "start": "3317040",
    "end": "3322319"
  },
  {
    "text": "VAR stole from the standard library right like that's easy but the let was a much",
    "start": "3322319",
    "end": "3327960"
  },
  {
    "text": "more difficult decision and had to kind of look around and see what other people use for something like a let I went with",
    "start": "3327960",
    "end": "3333599"
  },
  {
    "text": "I can overwrite or set that's what let would let you do because VAR doesn't let you do that no is colon",
    "start": "3333599",
    "end": "3338880"
  },
  {
    "text": "equal yeah right yeah so that that's how I ended up with that's what let would let you do and it fit best with what",
    "start": "3338880",
    "end": "3345680"
  },
  {
    "text": "plush or monkey would do which is pretty much let you do anything yeah and it's",
    "start": "3345680",
    "end": "3350839"
  },
  {
    "text": "funny right how seemingly tiny decisions such as these have wide reaching",
    "start": "3350839",
    "end": "3358000"
  },
  {
    "text": "consequences and then you suddenly uh you know um feel how much",
    "start": "3358000",
    "end": "3364520"
  },
  {
    "text": "pressure language designers are under when somebody opens a ticket and says why can't you add this or something and",
    "start": "3364520",
    "end": "3371079"
  },
  {
    "text": "you go but if I add this that would mean you know that you could also do this and",
    "start": "3371079",
    "end": "3377200"
  },
  {
    "text": "I'm sure you know people well versed in the theory of this can you know come up",
    "start": "3377200",
    "end": "3382400"
  },
  {
    "text": "with a formal thing and say if we add this it actually has these",
    "start": "3382400",
    "end": "3387559"
  },
  {
    "text": "ramifications but when you think it through manually it's really enlightening to see like okay if I add",
    "start": "3387559",
    "end": "3394240"
  },
  {
    "text": "the ability to you know Define two functions that call each other recursively or something then I can",
    "start": "3394240",
    "end": "3401280"
  },
  {
    "text": "suddenly Implement all of this and all of that or you know delayed binding like",
    "start": "3401280",
    "end": "3406960"
  },
  {
    "text": "uh you can call a function in your function that hasn't been declared before which is what this you know two",
    "start": "3406960",
    "end": "3413920"
  },
  {
    "text": "functions calling each other recursively is about then yeah you you can do loops",
    "start": "3413920",
    "end": "3419640"
  },
  {
    "text": "basically or something in another function or return a function that blah blah blah it's it's crazy it's also",
    "start": "3419640",
    "end": "3426640"
  },
  {
    "text": "interesting because we think about like the conversations we have in the community about generics and stuff and a",
    "start": "3426640",
    "end": "3432680"
  },
  {
    "text": "lot of people just think of it as whether they want that feature or not not really what what does it mean to",
    "start": "3432680",
    "end": "3439400"
  },
  {
    "text": "implement that feature and what's the what are the ramifications of that I got to say this is probably one of the few",
    "start": "3439400",
    "end": "3445559"
  },
  {
    "text": "templating is one of those places where I'd love down generics it's one of the few places where I really need it and",
    "start": "3445559",
    "end": "3451000"
  },
  {
    "text": "again if you look at plush like it's got this giant switch statement for how to handle the output um which was just I",
    "start": "3451000",
    "end": "3458440"
  },
  {
    "text": "did not like at all um and getting rid of that and L like a type switch is it or yeah basically like well if it's a f",
    "start": "3458440",
    "end": "3465400"
  },
  {
    "text": "Stringer do this if it's a text HTML or you HTML do you know do this right if",
    "start": "3465400",
    "end": "3471480"
  },
  {
    "text": "it's a slice do this you know just all of the a few places too where we have to deal",
    "start": "3471480",
    "end": "3477520"
  },
  {
    "text": "with like empty interface and then like a slice of empty interfaces which then have to like yeah whenever you're",
    "start": "3477520",
    "end": "3483000"
  },
  {
    "text": "dealing with parsers and yeah tors will tell you it's basically all empty inter yeah it's a real drag but would",
    "start": "3483000",
    "end": "3491520"
  },
  {
    "text": "generics help with the paes then would you be able to have have it strongly typed you know I don't know I don't know",
    "start": "3491520",
    "end": "3499000"
  },
  {
    "text": "yeah I'm not sure possibly I don't know it would make I would say the type",
    "start": "3499000",
    "end": "3505240"
  },
  {
    "text": "definitions of your a smaller like you need less boiler plate because then you",
    "start": "3505240",
    "end": "3511200"
  },
  {
    "text": "could just you know say here's an a expression or something",
    "start": "3511200",
    "end": "3517440"
  },
  {
    "text": "where the value is an integer here's an a expression where the value is a string or",
    "start": "3517440",
    "end": "3522720"
  },
  {
    "text": "something but if it would I don't know if it would make the parza itself",
    "start": "3522720",
    "end": "3528480"
  },
  {
    "text": "smaller certain other language constructs like pattern matching for example or destructuring that would make",
    "start": "3528480",
    "end": "3534240"
  },
  {
    "text": "the code really concise but in the end you know it all is if and",
    "start": "3534240",
    "end": "3541079"
  },
  {
    "text": "else everything's just a giant IFL statement at the end of the day isn't it yeah yeah it's all a goto right at the",
    "start": "3541079",
    "end": "3548079"
  },
  {
    "text": "end of the day it's all it'll be it'll be in goto we'll be fine what you said M",
    "start": "3548079",
    "end": "3553799"
  },
  {
    "text": "about uh generics that's actually the the thing that I thought of that I",
    "start": "3553799",
    "end": "3559839"
  },
  {
    "text": "sometimes feel people underestimate the consequences of adding a feature such as this this like of you",
    "start": "3559839",
    "end": "3566520"
  },
  {
    "text": "know yeah you can use it to only Implement map or reduce or fold whatever",
    "start": "3566520",
    "end": "3573039"
  },
  {
    "text": "um with generics but what will this enable in the future which patterns will",
    "start": "3573039",
    "end": "3580440"
  },
  {
    "text": "emerge how will people use the language what does it mean for all of the stuff that was already there like will the",
    "start": "3580440",
    "end": "3586680"
  },
  {
    "text": "stuff in the standard Library become obsolete because people won't use it anymore because they can build their own stuff how do you maintain that then and",
    "start": "3586680",
    "end": "3593799"
  },
  {
    "text": "all of that stuff it's not an easy addition and you know I",
    "start": "3593799",
    "end": "3600640"
  },
  {
    "text": "don't want to get too political on this really sensitive topic but um I kind of",
    "start": "3600640",
    "end": "3607359"
  },
  {
    "text": "like how everybody's at the Tweet button ready how do how the go team considers",
    "start": "3607359",
    "end": "3614280"
  },
  {
    "text": "these trade-offs yes yes I think so and they do talk about it as well they talk",
    "start": "3614280",
    "end": "3620559"
  },
  {
    "text": "about the cost really of of implementing these features I think a lot of us kind of don't really do that with our own",
    "start": "3620559",
    "end": "3627440"
  },
  {
    "text": "projects it's common for for companies and for teams to just think their job is",
    "start": "3627440",
    "end": "3633839"
  },
  {
    "text": "just adding features and there are consequences to everything you add into that but um I think if if someone's been",
    "start": "3633839",
    "end": "3641319"
  },
  {
    "text": "through your book that would give them that kind of uh appreciation really from",
    "start": "3641319",
    "end": "3647359"
  },
  {
    "text": "when it comes to things like in the go language too yeah but also I feel in in",
    "start": "3647359",
    "end": "3652520"
  },
  {
    "text": "your daily work most of us don't work on the parts of a system that are used by",
    "start": "3652520",
    "end": "3659119"
  },
  {
    "text": "other parts like you often add stuff to a system you don't necessarily work like",
    "start": "3659119",
    "end": "3664240"
  },
  {
    "text": "mark on a framework or the underlying thing but once you do once you build",
    "start": "3664240",
    "end": "3670680"
  },
  {
    "text": "those Primitives which are used by other parts of the system you start to feel",
    "start": "3670680",
    "end": "3675799"
  },
  {
    "text": "that any change you make to these Primitives has a force multiplier",
    "start": "3675799",
    "end": "3681559"
  },
  {
    "text": "attached so a templating language for example example like you have a bunch of built-in functions for example or you",
    "start": "3681559",
    "end": "3689160"
  },
  {
    "text": "know functionality that that comes with it if you change just a tiny bit of it you will see you know the changes",
    "start": "3689160",
    "end": "3697799"
  },
  {
    "text": "Amplified but if you just if you add features to a system and",
    "start": "3697799",
    "end": "3703599"
  },
  {
    "text": "use Primitives um you know you can easily do that which is the beauty of a",
    "start": "3703599",
    "end": "3708680"
  },
  {
    "text": "well-designed system that you know adding stuff does not have a lot of consequences for the rest of the syst",
    "start": "3708680",
    "end": "3714480"
  },
  {
    "text": "system but once you change the underlying layer you know there's the",
    "start": "3714480",
    "end": "3720119"
  },
  {
    "text": "consequences yes I think we do we do kind of build almost primitive whenever",
    "start": "3720119",
    "end": "3725960"
  },
  {
    "text": "we build an abstraction which is something that we all love doing it's programmer's best day when you implement",
    "start": "3725960",
    "end": "3733480"
  },
  {
    "text": "something and think oh I could do this in a slightly abstract way and unlock all this possibility uh and it's such a",
    "start": "3733480",
    "end": "3739440"
  },
  {
    "text": "great feeling that we're we're kind of I think hooked on that and then when the second time comes along it doesn't quite",
    "start": "3739440",
    "end": "3745039"
  },
  {
    "text": "fit but it's close enough we'll just add a few extra it's a it's a couple of little tweaks it's a little bit of",
    "start": "3745039",
    "end": "3751440"
  },
  {
    "text": "configuration don't worry about it and then the third time and that's not really doesn't really belong there",
    "start": "3751440",
    "end": "3757319"
  },
  {
    "text": "either and you end up with uh Frankenstein abstractions and stuff like that so yeah that sort of thinking I",
    "start": "3757319",
    "end": "3763359"
  },
  {
    "text": "think applies not just if you're writing paes I think it applies across the board",
    "start": "3763359",
    "end": "3769079"
  },
  {
    "text": "and also second best day deleting code right yes I love deleting code maybe the other way around I like deleting code",
    "start": "3769079",
    "end": "3775799"
  },
  {
    "text": "more than abstractions yeah I love deleting code one one thing I found writing parsers too is that sometimes",
    "start": "3775799",
    "end": "3782799"
  },
  {
    "text": "they enable you to delete code yes the first parser that I wrote was actually a",
    "start": "3782799",
    "end": "3788279"
  },
  {
    "text": "uh formalized version of a ad hoc informally specified language that was",
    "start": "3788279",
    "end": "3794319"
  },
  {
    "text": "parsed with Rex's and it was actually a templating language as he's talking that about one I wrote uh maybe maybe I was",
    "start": "3794319",
    "end": "3801440"
  },
  {
    "text": "going to say it sounds like that's an every code BAS around the world yeah he's talking about something I wrote",
    "start": "3801440",
    "end": "3807559"
  },
  {
    "text": "years ago you're talking about briy yeah I'm talking about Bry okay well it's okay you could talk",
    "start": "3807559",
    "end": "3814160"
  },
  {
    "text": "about my past mistakes I certainly do I'll talk about yours don't forget it's Tim's birthday so as as time went on",
    "start": "3814160",
    "end": "3822160"
  },
  {
    "text": "more features got added to it and the grammar of it changed slightly between",
    "start": "3822160",
    "end": "3828559"
  },
  {
    "text": "different like parts of this templating language and so by writing a more formal",
    "start": "3828559",
    "end": "3834480"
  },
  {
    "text": "IED grammar of it I could parse all of these things and then do almost something similar to gof fumed where I",
    "start": "3834480",
    "end": "3840920"
  },
  {
    "text": "actually removed a whole bunch of things and then I could just start deleting code from the official parser because",
    "start": "3840920",
    "end": "3846160"
  },
  {
    "text": "none of those rules would ever match ever again but I also had complete control over not only the parser the",
    "start": "3846160",
    "end": "3853000"
  },
  {
    "text": "language I also had control over all of its usage so in contrast to most",
    "start": "3853000",
    "end": "3858520"
  },
  {
    "text": "programming languages where you don't know how people might go to use it if you do have control over over",
    "start": "3858520",
    "end": "3864839"
  },
  {
    "text": "every usage of it you can have a great ability to change things yeah you know",
    "start": "3864839",
    "end": "3871400"
  },
  {
    "text": "the it's you talk about the formatting you're the one who actually even said said it to me that if I use the Peg and I lay things out in a certain way then",
    "start": "3871400",
    "end": "3877480"
  },
  {
    "text": "fuming just falls out of it and it kind of falls out of it automatically so there's a lush fump tool that will fum",
    "start": "3877480",
    "end": "3884440"
  },
  {
    "text": "your Lush scripts and it's super easy because these you know you've got this nice node you got this nice parser these",
    "start": "3884440",
    "end": "3890640"
  },
  {
    "text": "types know what they're supposed to look like and just like what the go does it allows you to just kind of print back a",
    "start": "3890640",
    "end": "3896240"
  },
  {
    "text": "much nicer formalized version of the thing you've already pared um clean up code you can delete code like like you",
    "start": "3896240",
    "end": "3902200"
  },
  {
    "text": "were saying yeah it's it's really really nice fun stuff to work with tosen if our",
    "start": "3902200",
    "end": "3909520"
  },
  {
    "text": "dear listeners wanted a copy of your one of your books where would they where",
    "start": "3909520",
    "end": "3914960"
  },
  {
    "text": "should they get it from interpreter book.com and compiler book.com or uh if",
    "start": "3914960",
    "end": "3921720"
  },
  {
    "text": "you want the paperback version uh Amazon right I now what's the address for",
    "start": "3921720",
    "end": "3927599"
  },
  {
    "text": "Amazon is it a website it's it's uh HTTP",
    "start": "3927599",
    "end": "3932680"
  },
  {
    "text": "call Tak notes slow down it's not secure it's not secure are they forward they",
    "start": "3932680",
    "end": "3937960"
  },
  {
    "text": "backward are they does everybody say backward and they're forward or forward and I'm confused may show notes there",
    "start": "3937960",
    "end": "3945839"
  },
  {
    "text": "you go link it in show notes amazon.com amazon.com online shop also.",
    "start": "3945839",
    "end": "3953079"
  },
  {
    "text": "co.uk oh they've got one there too they're expanding good for them good for them",
    "start": "3953079",
    "end": "3959760"
  },
  {
    "text": "I'd love to hear a startup success story that's fantastic yeah they are France",
    "start": "3959760",
    "end": "3965839"
  },
  {
    "text": "Italy Germany wow all over the place by now all over the place are they is it just in English though the book or",
    "start": "3965839",
    "end": "3972319"
  },
  {
    "text": "Amazon no it's just in English yeah okay I wouldn't dare to translate it to German I honestly when I talk about",
    "start": "3972319",
    "end": "3979880"
  },
  {
    "text": "programming in German it's you know 70% English words anyway so right right they're they're American English words",
    "start": "3979880",
    "end": "3986440"
  },
  {
    "text": "by the way it's us English is the language of computing I was careful to not settle on one or the other so I try",
    "start": "3986440",
    "end": "3994119"
  },
  {
    "text": "to switch it up I honestly forget while writing whether I used the British or the America and I I you know I knew that",
    "start": "3994119",
    "end": "4001279"
  },
  {
    "text": "I was going to R people up but I was happy to do it so yeah you're you're just a regular old",
    "start": "4001279",
    "end": "4007760"
  },
  {
    "text": "radical yeah I you are like you are a punk rocker if there ever was one yeah",
    "start": "4007760",
    "end": "4014160"
  },
  {
    "text": "sometimes I put a you in color sometimes I don't sometimes I use the Oxford comma",
    "start": "4014160",
    "end": "4019400"
  },
  {
    "text": "sometimes I just use no comma at all which for a book on interpreting and",
    "start": "4019400",
    "end": "4025640"
  },
  {
    "text": "pausing text is it's actually quite ironic yeah but it's also nice exercise for the reader",
    "start": "4025640",
    "end": "4031920"
  },
  {
    "text": "right couldn't you run monkey fumed on the book",
    "start": "4031920",
    "end": "4036760"
  },
  {
    "text": "and you actually you don't want to know what the my tool CH is it's crazy well",
    "start": "4037119",
    "end": "4044039"
  },
  {
    "text": "well on that bombshell where Mark Bates has legitimately just said monkey",
    "start": "4044039",
    "end": "4049839"
  },
  {
    "text": "fumed that is the end of the show I'm afraid toron Tim mark thank you very",
    "start": "4049839",
    "end": "4055880"
  },
  {
    "text": "much it's been excellent uh on the next show we're going to have Frances campoy",
    "start": "4055880",
    "end": "4060920"
  },
  {
    "text": "is going to join us to talk about graph databases that's going to be interesting isn't it so join us then uh we'll see",
    "start": "4060920",
    "end": "4067200"
  },
  {
    "text": "you then thank you all right thank you for tuning in",
    "start": "4067200",
    "end": "4073920"
  },
  {
    "text": "into this week's episode of go time if you're not yet hang with us in go for slack we have a channel called go time",
    "start": "4073920",
    "end": "4079839"
  },
  {
    "text": "FM look it up you'll find us hang with us during the live shows connect with other members of the community share",
    "start": "4079839",
    "end": "4086240"
  },
  {
    "text": "stories share code share coffee recipes whatever it's a lot of fun also we have",
    "start": "4086240",
    "end": "4091559"
  },
  {
    "text": "discussions at changel law.com on every episode head to changel law.com gotime",
    "start": "4091559",
    "end": "4097080"
  },
  {
    "text": "find this episode and discuss it with the community also thanks to fasty our bandwidth partner rbar for helping us",
    "start": "4097080",
    "end": "4103238"
  },
  {
    "text": "move fast and fix things and luno for hosting the change law platform our music is produced by the mysterious",
    "start": "4103239",
    "end": "4109520"
  },
  {
    "text": "breake master cylinder and if you want to hear more awesome podcasts like this subscribe to our Master feed it's one",
    "start": "4109520",
    "end": "4115520"
  },
  {
    "text": "feed to rule them all plus some extras that only hit the master feed and to Chang law.com slm or search for Chang",
    "start": "4115520",
    "end": "4122880"
  },
  {
    "text": "law master in your podcast client you'll find us thanks for tuning in we'll see you next",
    "start": "4122880",
    "end": "4129400"
  },
  {
    "text": "week [Music]",
    "start": "4132799",
    "end": "4162719"
  },
  {
    "text": "come [Music]",
    "start": "4162719",
    "end": "4177409"
  },
  {
    "text": "is",
    "start": "4180040",
    "end": "4183040"
  }
]