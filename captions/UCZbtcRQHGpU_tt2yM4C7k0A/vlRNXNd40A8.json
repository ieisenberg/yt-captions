[
  {
    "text": "this week I was working on another AP case and one of the malware implants that we found there was actually written",
    "start": "80",
    "end": "6040"
  },
  {
    "text": "in Pascal and so it was kind of a trip down the memory lane to one figure out what Pascal was again and also trying to",
    "start": "6040",
    "end": "13360"
  },
  {
    "text": "understand what kind of assembly was generated by this Pascal compiler it wasn't that bad actually way less bad",
    "start": "13360",
    "end": "18640"
  },
  {
    "text": "than having to discover the go",
    "start": "18640",
    "end": "22000"
  },
  {
    "text": "language what's up friends this episode is brought to you by Source graph with the release of source graph 4.0 and the",
    "start": "24240",
    "end": "32000"
  },
  {
    "text": "Starship event just a few weeks behind us is super clear that Source graph is becoming not just Cod search but a",
    "start": "32000",
    "end": "38079"
  },
  {
    "text": "full-on code intelligence platform and I'm here with Joel kler product manager of code insights for Source graph Joel",
    "start": "38079",
    "end": "44600"
  },
  {
    "text": "this move from code search to code intelligence is a really big deal how would you explain this feature code",
    "start": "44600",
    "end": "51440"
  },
  {
    "text": "insights if you're just talking to folks in the hallway track of your favorite conference um I would really start with",
    "start": "51440",
    "end": "57399"
  },
  {
    "text": "the technical because before I was a product manager I used to be an engineer as well and it's really cool and exciting just to be able to say we're",
    "start": "57399",
    "end": "63399"
  },
  {
    "text": "going to turn your codebase into a database and the structured language that you need interact is just the",
    "start": "63399",
    "end": "68840"
  },
  {
    "text": "ability to write a code search you know literal search that's totally fine regular expression you know that'll give",
    "start": "68840",
    "end": "74040"
  },
  {
    "text": "you a few more advanced options even a structural search but the number of longtail possibilities it unlocks truly",
    "start": "74040",
    "end": "80000"
  },
  {
    "text": "the Journey of building this product was just saying well we've just unlocked you know an infinite number of possibilities",
    "start": "80000",
    "end": "86400"
  },
  {
    "text": "we got to figure out some immediate use cases so we can start to you know invest in this product build it and sell it but",
    "start": "86400",
    "end": "92000"
  },
  {
    "text": "we're only getting started in terms of the number of uses that we're uncovering for it the story I told you about",
    "start": "92000",
    "end": "97479"
  },
  {
    "text": "discovering like version tracking turned out to be a really important use case that wasn't even on a road map 6 months prior to discovering that as we were",
    "start": "97479",
    "end": "103520"
  },
  {
    "text": "already planning to launch this product until we talked to enough folks realized this was a problem and then found well oh that's like a simple regular",
    "start": "103520",
    "end": "109399"
  },
  {
    "text": "expression capture group that you can just plug right in because we really built this system to not limit the power of what we built we don't want to give",
    "start": "109399",
    "end": "115520"
  },
  {
    "text": "you like three out of the box templates and you can only change like one character or something it's truly like the templates are there to hold your",
    "start": "115520",
    "end": "121280"
  },
  {
    "text": "hand and get you started but if you can come up with anything you want to track in your code base you can do that with code Insight I love it thank you Joel so",
    "start": "121280",
    "end": "128360"
  },
  {
    "text": "right now there is a treasure Trove of insights just waiting for you living inside your c-base your c-base is now a",
    "start": "128360",
    "end": "136160"
  },
  {
    "text": "quable database thanks to Source graph this opens up a world of possibilities for your code and the intelligence you",
    "start": "136160",
    "end": "142040"
  },
  {
    "text": "can gain from it a good next step is to go to about. source.com code-in insights the link will be in the",
    "start": "142040",
    "end": "149319"
  },
  {
    "text": "show notes see how the teams are using this awesome feature again about.",
    "start": "149319",
    "end": "154480"
  },
  {
    "text": "source.com code-in insights again this link is in",
    "start": "154480",
    "end": "159800"
  },
  {
    "text": "the show [Music]",
    "start": "159800",
    "end": "169199"
  },
  {
    "text": "notes let's do it it's go time welcome to go time time your source for diverse",
    "start": "174840",
    "end": "182519"
  },
  {
    "text": "discussions from all around the go Community change log has joined the fetty verse find our mastedon instance",
    "start": "182519",
    "end": "190360"
  },
  {
    "text": "at changel log. and connect with us at gotime at change. thanks to our partners",
    "start": "190360",
    "end": "196840"
  },
  {
    "text": "at fastly for delivering go time super fast all around the world check them out at fastly.com and to our friends at",
    "start": "196840",
    "end": "204440"
  },
  {
    "text": "fly.io deploy your app servers close to your users no Ops required learn more F",
    "start": "204440",
    "end": "210879"
  },
  {
    "text": "fly.io okay here we go today Ivan kovski you are joining us",
    "start": "210879",
    "end": "220280"
  },
  {
    "text": "again to talk more about hacking with go and cover all the things we did not",
    "start": "220280",
    "end": "225720"
  },
  {
    "text": "managed to cover in our last episode yes very happy to be back here so for those",
    "start": "225720",
    "end": "231760"
  },
  {
    "text": "who did not tune in to the previous episode could you shortly introduce yourself yes of course so my name is",
    "start": "231760",
    "end": "239040"
  },
  {
    "text": "Ivon k I I am a French cyers researcher and I work for kasperski specifically I",
    "start": "239040",
    "end": "245200"
  },
  {
    "text": "work in a threat intelligence team and my role in this team apart from writing",
    "start": "245200",
    "end": "250640"
  },
  {
    "text": "reports and that kind of stuff is really to proceed with the reverse engineering of the malware that is provided to me by",
    "start": "250640",
    "end": "257680"
  },
  {
    "text": "my co-workers so basically they do the threat hunting they find some interesting stuff to look at they",
    "start": "257680",
    "end": "264199"
  },
  {
    "text": "identify implants used by the techers and they give them to me and then my job from there is using",
    "start": "264199",
    "end": "270240"
  },
  {
    "text": "the Fantastic Tools of the reverse engineer which are I the pro basically I do read the assembly code of those",
    "start": "270240",
    "end": "276479"
  },
  {
    "text": "programs and try to figure out what they do as best as I can and that's my life and in the previous episode we talked a",
    "start": "276479",
    "end": "283919"
  },
  {
    "text": "little bit about how Ida is yes or no supporting go so that it got better over",
    "start": "283919",
    "end": "290919"
  },
  {
    "text": "time but still play to improve yeah absolutely so if you tried reverse",
    "start": "290919",
    "end": "297080"
  },
  {
    "text": "engineering go programs something like maybe two years ago maybe just one year ago then you would be in a lot of",
    "start": "297080",
    "end": "303759"
  },
  {
    "text": "trouble because du tools just weren't there so it involved using some third",
    "start": "303759",
    "end": "309440"
  },
  {
    "text": "party plugins some codes taken from I wouldn't say suspicious but uh GitHub",
    "start": "309440",
    "end": "315280"
  },
  {
    "text": "repositories that weren't that well maintained or that didn't have really clear instructions and so it was really",
    "start": "315280",
    "end": "321400"
  },
  {
    "text": "a difficult path for the reverse engineer that had to do it and thankfully over the years the developers",
    "start": "321400",
    "end": "329240"
  },
  {
    "text": "from from Ida this company in Belgium called hexr they've been listening to",
    "start": "329240",
    "end": "334400"
  },
  {
    "text": "the customer complaints I suppose and they have made a number of improvements",
    "start": "334400",
    "end": "340199"
  },
  {
    "text": "that allow us to support go programs a lot more easily and that entails having",
    "start": "340199",
    "end": "347240"
  },
  {
    "text": "some recognition for the various functions that come from the go standard library but support from the go",
    "start": "347240",
    "end": "354280"
  },
  {
    "text": "executables as a whole in the very latest versions if I recall correctly a number of the things that were actually",
    "start": "354280",
    "end": "360720"
  },
  {
    "text": "implemented in some of the third party plugins that ju andr from senel one as",
    "start": "360720",
    "end": "365880"
  },
  {
    "text": "well as myself had implemented manually in Python and those kind of features they included them into uh into Ida Pro",
    "start": "365880",
    "end": "373479"
  },
  {
    "text": "into the main line so I do expect that one year from now maybe this won't even",
    "start": "373479",
    "end": "378800"
  },
  {
    "text": "be a discussion anymore I mean sure go will still be a very kind of alien language for us to look at in terms of",
    "start": "378800",
    "end": "385360"
  },
  {
    "text": "like the assembly code that it generates but at the end of the day I do suspect that the tooling problems are going to",
    "start": "385360",
    "end": "391919"
  },
  {
    "text": "be over in the near future so that's a good thing as far as we're concerned so",
    "start": "391919",
    "end": "396960"
  },
  {
    "text": "is a go a better language for a security researcher to pick up or for a hacker",
    "start": "396960",
    "end": "403400"
  },
  {
    "text": "well when it comes to security researchers we don't actually have to write that many programs you know most",
    "start": "403400",
    "end": "411440"
  },
  {
    "text": "of the tools that we use are already provided to us by the community like I mentioned ID Pro nobody is ever going to",
    "start": "411440",
    "end": "417199"
  },
  {
    "text": "redevelop ID Pro I mean some guys did so it wouldn't be fair at saying that it wouldn't but most people are not going",
    "start": "417199",
    "end": "422680"
  },
  {
    "text": "to do this and if they were going to do this then I think that choosing either the go language or C++ wouldn't make",
    "start": "422680",
    "end": "430039"
  },
  {
    "text": "that big a difference considering the the scale of such a project when it comes to hacker I think that for them go",
    "start": "430039",
    "end": "437479"
  },
  {
    "text": "language is still probably a very good bet because as far as I can tell from a",
    "start": "437479",
    "end": "442720"
  },
  {
    "text": "very unscientific polling of my co-workers and other reverse engineers",
    "start": "442720",
    "end": "447960"
  },
  {
    "text": "in the field it feels like most people still really dislike having to work on go language like really really dislike",
    "start": "447960",
    "end": "453879"
  },
  {
    "text": "it in my opinion though I think if I were to write malicious programs I would",
    "start": "453879",
    "end": "459440"
  },
  {
    "text": "use rust because the code generated by rust is actually even way worse and uh at the moment I'm not exactly sure how",
    "start": "459440",
    "end": "465720"
  },
  {
    "text": "to approach that type of code I have to work on that but this would be my my intuition to use rust because I know",
    "start": "465720",
    "end": "472840"
  },
  {
    "text": "that I'm going to make someone's day miserable somewhere in the future and when you say worse you mean basically",
    "start": "472840",
    "end": "480039"
  },
  {
    "text": "because the steps that you need to do to reverse engineer and kind of figure out what's happening are actually more",
    "start": "480039",
    "end": "485879"
  },
  {
    "text": "painful exactly I say that in the sense that maybe it's just a personal thing right I have spent a bit of time trying",
    "start": "485879",
    "end": "492159"
  },
  {
    "text": "to figure out how go ticks like not at the language level but at least at the assembly level I would never pretend",
    "start": "492159",
    "end": "498479"
  },
  {
    "text": "that I am a go expert or that I have deep insights about the inner workings of the go language but if you give me a",
    "start": "498479",
    "end": "505639"
  },
  {
    "text": "binary return in go then I expect that eventually I will be able to tell you what it's supposed to be doing when it",
    "start": "505639",
    "end": "511440"
  },
  {
    "text": "comes to rust it's kind of Uncharted Territory as far as I'm concerned as far as I know again this is not something",
    "start": "511440",
    "end": "517399"
  },
  {
    "text": "that I've checked all that much although this is something that I probably will have to do very soon uh it feels like",
    "start": "517399",
    "end": "523479"
  },
  {
    "text": "the tooling like Ida for instance the disassembler that we use in the on the",
    "start": "523479",
    "end": "528519"
  },
  {
    "text": "job doesn't seem to support the rust language as well as it supports the go",
    "start": "528519",
    "end": "534000"
  },
  {
    "text": "language it doesn't recognize as many things and at the end of the day rust tends to generate construct that really",
    "start": "534000",
    "end": "540000"
  },
  {
    "text": "look like C++ and C++ is kind of a mess to begin with like it's a very powerful",
    "start": "540000",
    "end": "545320"
  },
  {
    "text": "language I really love C++ if I have to write some complex program I will write in C++ because this is the one I have",
    "start": "545320",
    "end": "551480"
  },
  {
    "text": "the most experience with but when it comes to reading assembly written in C++ oh my God it's just so convoluted and",
    "start": "551480",
    "end": "557959"
  },
  {
    "text": "there are so many levels of indirection added at every level so this is not something I would be happy with and",
    "start": "557959",
    "end": "563880"
  },
  {
    "text": "having rust being a new more complex or a new more alien C++ is really not",
    "start": "563880",
    "end": "568920"
  },
  {
    "text": "something I would be happy with how about the easy cross compilation of go",
    "start": "568920",
    "end": "574640"
  },
  {
    "text": "the fact that you write your code and then you create one binary and then you kind of ship it as is and on top of that",
    "start": "574640",
    "end": "580440"
  },
  {
    "text": "you just want write one more command and then you have it for any architecture does this make any difference for you it",
    "start": "580440",
    "end": "586640"
  },
  {
    "text": "does in the sense that I think as a developer it's pretty cool to have that I also have always felt that this uh",
    "start": "586640",
    "end": "594760"
  },
  {
    "text": "feature that is very often brought forward by Defenders of the goal language was was a bit like I don't",
    "start": "594760",
    "end": "601160"
  },
  {
    "text": "think it's that important right not that we don't want cross compilation or that we don't want programs that can run",
    "start": "601160",
    "end": "606880"
  },
  {
    "text": "anywhere but I don't feel like the go language is especially adding something",
    "start": "606880",
    "end": "612600"
  },
  {
    "text": "new there I mean when I write C++ code it can already run everywhere provided that I write it properly of course way",
    "start": "612600",
    "end": "618560"
  },
  {
    "text": "back when when I like probably 10 years ago when I was in school I was learning Java and I actually programmed a few",
    "start": "618560",
    "end": "624399"
  },
  {
    "text": "projects in Java code supposedly Java was supposed to be working on any platform as well right so it didn't work",
    "start": "624399",
    "end": "630600"
  },
  {
    "text": "as well as we expected due to many reasons but overall it doesn't seem to",
    "start": "630600",
    "end": "636160"
  },
  {
    "text": "me that this ability to run on any platform and to have a code that will compile everywhere is really something",
    "start": "636160",
    "end": "642920"
  },
  {
    "text": "that go is actually bringing to the table I think this is something that we already had and that maybe go is making",
    "start": "642920",
    "end": "650160"
  },
  {
    "text": "easier for a lot of developers but it's not something new and something that would make me switch languages by any",
    "start": "650160",
    "end": "656000"
  },
  {
    "text": "stretch by the way maybe this is a question for you right how about I have no idea about the support for go on",
    "start": "656000",
    "end": "661959"
  },
  {
    "text": "exotic platforms what about writing go code for solar or for the arm architecture is that something that",
    "start": "661959",
    "end": "668079"
  },
  {
    "text": "supported out of the box or isn't it because I know for a fact that when new CPUs come out the first thing that the",
    "start": "668079",
    "end": "675040"
  },
  {
    "text": "manufacturers release is going to be a c compiler or a C++ compiler so we know that eventually those languages are",
    "start": "675040",
    "end": "681200"
  },
  {
    "text": "always going to work but I have the notion and maybe I'm wrong about this that when it comes to go language that",
    "start": "681200",
    "end": "687240"
  },
  {
    "text": "if you have this new platform somewhere then you will have to wait for Google to release the corresponding compiler and",
    "start": "687240",
    "end": "692320"
  },
  {
    "text": "that may take some time is that correct so as you were asking I Googled the",
    "start": "692320",
    "end": "697399"
  },
  {
    "text": "command of go and go Arch which is what you run to do this and for Solaris it does come out of the box what was the",
    "start": "697399",
    "end": "704560"
  },
  {
    "text": "second one you ask for this is one is going to be supported I would imagine would be to compile for arm or you know",
    "start": "704560",
    "end": "710920"
  },
  {
    "text": "Mis such a probably less used architectures but I would imagine that at least arm is supported very well yes",
    "start": "710920",
    "end": "718600"
  },
  {
    "text": "arm is out of the box indeed yeah okay arm 64 and so on yeah right mips some of",
    "start": "718600",
    "end": "726079"
  },
  {
    "text": "the variations are not but most of them yes the ones that are not out of the box is myips 64 p32 and myips 64 p32 Le okay",
    "start": "726079",
    "end": "736199"
  },
  {
    "text": "so yeah overall these are probably architectures that most people don't care about so I don't think like this is",
    "start": "736199",
    "end": "742000"
  },
  {
    "text": "a big fault on the part of the go language what I will say though is that as far as I'm concerned C is already a",
    "start": "742000",
    "end": "749360"
  },
  {
    "text": "multiplatform language as it is and if other languages provide this as well then good for them but to me it's not",
    "start": "749360",
    "end": "755440"
  },
  {
    "text": "something groundbreaking yeah that's fair lots of develops people do do love that feature that uh you don't need to",
    "start": "755440",
    "end": "762320"
  },
  {
    "text": "do much to support to ship everything to everyone yeah in your favorite architecture that aspect is pretty",
    "start": "762320",
    "end": "768199"
  },
  {
    "text": "important and also very appreciated by malware authors it's the fact that yeah",
    "start": "768199",
    "end": "773360"
  },
  {
    "text": "when you write some program and C then you might have modules that are dis in the form of a DL file in Windows Oro",
    "start": "773360",
    "end": "780959"
  },
  {
    "text": "shared object on Linux and so on and then you end up with a program an executable file and then several object",
    "start": "780959",
    "end": "788519"
  },
  {
    "text": "libraries that come with it and then when you want to distribute it you have to send this big archive that contains many files I would agree that when it",
    "start": "788519",
    "end": "795480"
  },
  {
    "text": "comes to go language you end up with a single binary and that's pretty useful right especially in a context where like",
    "start": "795480",
    "end": "802279"
  },
  {
    "text": "you do not have control over the client quote unquote or victim's machine then",
    "start": "802279",
    "end": "807760"
  },
  {
    "text": "in that case then of course just having to send an executable and knowing that it is self-contained and going to work",
    "start": "807760",
    "end": "813440"
  },
  {
    "text": "everywhere all the time is going to be a big Advantage like there are ways to do this in C C++ and so on but it will",
    "start": "813440",
    "end": "821560"
  },
  {
    "text": "require some work which agreed is not required on when you are using go so",
    "start": "821560",
    "end": "827079"
  },
  {
    "text": "this is one point for go I would say another is the tell me what you think is the concept of modules where it it has",
    "start": "827079",
    "end": "833959"
  },
  {
    "text": "this file that says what are all the dependencies and what version specifically is used where in casee",
    "start": "833959",
    "end": "839800"
  },
  {
    "text": "you're using some package of an older version and what not so given that this",
    "start": "839800",
    "end": "845000"
  },
  {
    "text": "is all kind of compiled into a module and it's being sent out as one does this",
    "start": "845000",
    "end": "850959"
  },
  {
    "text": "provide any value for a hacker or for a security researcher well for security",
    "start": "850959",
    "end": "857880"
  },
  {
    "text": "researcher or hacker I'm not exactly sure I mean as far as developers go it prevents you from falling into this uh",
    "start": "857880",
    "end": "864519"
  },
  {
    "text": "pit hole of dependency hell where you know this is stuff I actually last week with while working on a python project I",
    "start": "864519",
    "end": "872600"
  },
  {
    "text": "updated all my packages and some of them were not compatible with each other and my whole project just broke down in",
    "start": "872600",
    "end": "878199"
  },
  {
    "text": "production which like is always fun so this is something I could have prevented",
    "start": "878199",
    "end": "883600"
  },
  {
    "text": "by just fixing the version numbers which is what you're supposed to be doing but overall like having this mechanism is",
    "start": "883600",
    "end": "890120"
  },
  {
    "text": "kind of a good thing when it comes to security making sure that hackers are able to compile their thing is really",
    "start": "890120",
    "end": "896160"
  },
  {
    "text": "not something we worry about too much what we do worry about is the fact that when you end up with a single binary",
    "start": "896160",
    "end": "902079"
  },
  {
    "text": "that contains everything it's kind of an issue for reverse Engineers like when you compare this to a uh C program or",
    "start": "902079",
    "end": "908839"
  },
  {
    "text": "C++ program that has some various DLS then the different files already represent some sort of separation",
    "start": "908839",
    "end": "915079"
  },
  {
    "text": "between the code right the DLS might or might not have a relevant name but at the end of the day you know that they're",
    "start": "915079",
    "end": "921440"
  },
  {
    "text": "going to be split According to some form of functionality right this type of code is going to go in this dll like the main",
    "start": "921440",
    "end": "928839"
  },
  {
    "text": "intelligence of the program will go in the main executables and so on so when you have those big malware platforms",
    "start": "928839",
    "end": "935680"
  },
  {
    "text": "that you have to work on then having several files is actually a pretty good thing for us when you have a big go",
    "start": "935680",
    "end": "941920"
  },
  {
    "text": "binary that is 5 to 10 megabytes big and then you have to just dive in there and try to find out where the interesting",
    "start": "941920",
    "end": "950480"
  },
  {
    "text": "code is located it's a good thing you know where the uninteresting code which is the library code is that's something",
    "start": "950480",
    "end": "956839"
  },
  {
    "text": "that the tools can recognize pretty well but still you just still have this big program that contains everything and",
    "start": "956839",
    "end": "963560"
  },
  {
    "text": "it's just much easier if you already have this kind of Separation where you can already focus on some specific",
    "start": "963560",
    "end": "969519"
  },
  {
    "text": "functionality even though you haven't been able to dig into like the whole project so in that sense I would say",
    "start": "969519",
    "end": "976240"
  },
  {
    "text": "that this feature is uh pretty useful for the like the offensive side I would",
    "start": "976240",
    "end": "981920"
  },
  {
    "text": "say I wonder if there's any particular feature that is good for the defensive side but I'll keep asking questions",
    "start": "981920",
    "end": "987920"
  },
  {
    "text": "until we find something or do you have one in mind I do have one in mind like the best and I think one of the",
    "start": "987920",
    "end": "993839"
  },
  {
    "text": "strongest selling points of go over C and C++ and all those uh unmanaged",
    "start": "993839",
    "end": "999399"
  },
  {
    "text": "languages is going to be that when you write programs in go as a developer I mean you know that you're never going to",
    "start": "999399",
    "end": "1005480"
  },
  {
    "text": "have any problems with memory corruption buffer overflows and those kinds of issues I would be very surprised if the",
    "start": "1005480",
    "end": "1011360"
  },
  {
    "text": "go language would allow you to read outside the bounds of an array and that kind of stuff so all this is already",
    "start": "1011360",
    "end": "1018079"
  },
  {
    "text": "taken into account for you and it's not going to make my personal daily job as a",
    "start": "1018079",
    "end": "1023199"
  },
  {
    "text": "reverse engineer easier but what is going to provide is that by default",
    "start": "1023199",
    "end": "1028760"
  },
  {
    "text": "people will have a much harder time shooting themselves in the foot and this is a good thing overall because it means",
    "start": "1028760",
    "end": "1034678"
  },
  {
    "text": "that if I download an application that was written by someone else in go language and I don't have to worry as",
    "start": "1034679",
    "end": "1040839"
  },
  {
    "text": "much about the code quality because I know that the language is going to",
    "start": "1040839",
    "end": "1047319"
  },
  {
    "text": "provide a number of guarantees and that will make sure that at least a number of vulnerabilities are not going to affect",
    "start": "1047319",
    "end": "1053160"
  },
  {
    "text": "me ever this is like true as a whole like for the whole industry even outside",
    "start": "1053160",
    "end": "1058720"
  },
  {
    "text": "security if programs are written in go language like FTP server or email server",
    "start": "1058720",
    "end": "1064240"
  },
  {
    "text": "or whatever if such programs are WR in go language then we know that at least we won't have to worry about buffer",
    "start": "1064240",
    "end": "1069799"
  },
  {
    "text": "overflows and this means less weekends spent you know in incident response engagements because some customer didn't",
    "start": "1069799",
    "end": "1076320"
  },
  {
    "text": "patch their program or because you know there was some vulnerability discovered as a zero day and that's being exploited",
    "start": "1076320",
    "end": "1082400"
  },
  {
    "text": "in the wild for an application that has some buffer overflow vulnerability and that is just available widely on the",
    "start": "1082400",
    "end": "1089400"
  },
  {
    "text": "internet so overall for Defenders less vulnerabilities and less ways for",
    "start": "1089400",
    "end": "1096120"
  },
  {
    "text": "developers to make tragic tragic mistakes is always going to be a good thing and I think this in fact",
    "start": "1096120",
    "end": "1102039"
  },
  {
    "text": "overshadows any advantage that the attackers are gaining over us like on the personal level with the reverse",
    "start": "1102039",
    "end": "1108559"
  },
  {
    "text": "years that is a very interesting point I guess it would be interesting to see if overall go code is more secure however",
    "start": "1108559",
    "end": "1116799"
  },
  {
    "text": "you would measure that like it's probably going to be interesting to think how to do that well having like",
    "start": "1116799",
    "end": "1122880"
  },
  {
    "text": "precise metrics is always going to be difficult but if you compare cve number",
    "start": "1122880",
    "end": "1128080"
  },
  {
    "text": "quantities for projects written go language and for projects written C then",
    "start": "1128080",
    "end": "1133919"
  },
  {
    "text": "I think it's very likely that you would find that programs written in memory unmanaged languages like cc++ and the",
    "start": "1133919",
    "end": "1141080"
  },
  {
    "text": "like are always going to have more bugs just because like by default there are",
    "start": "1141080",
    "end": "1147520"
  },
  {
    "text": "more opportunities to shoot yourselves in the foot so if you take this the",
    "start": "1147520",
    "end": "1152960"
  },
  {
    "text": "developers with equivalent skill and for one of them some bugs are just unavailable and for the other one then",
    "start": "1152960",
    "end": "1159320"
  },
  {
    "text": "you have twice as much mistakes that you can make it feel very obvious to me that like the no matter how like if the",
    "start": "1159320",
    "end": "1166320"
  },
  {
    "text": "developers have this same level of skill then the person using the unsafe",
    "start": "1166320",
    "end": "1171360"
  },
  {
    "text": "language is always going to make more [Music]",
    "start": "1171360",
    "end": "1176420"
  },
  {
    "text": "[Applause] [Music]",
    "start": "1176420",
    "end": "1187320"
  },
  {
    "text": "mistakes hey friends this episode is brought to you by my friends and",
    "start": "1187320",
    "end": "1192559"
  },
  {
    "text": "potentially your friends too at fire hydrant and I'm here with Robert Ross founder and CEO of Fire fire hydrant and",
    "start": "1192559",
    "end": "1199039"
  },
  {
    "text": "Robert there are several options out there for Incident Management but what is it that makes fire hydrant different",
    "start": "1199039",
    "end": "1205799"
  },
  {
    "text": "the reason that we think that fire hydron is is on to something is cuz we're meeting companies really where",
    "start": "1205799",
    "end": "1211159"
  },
  {
    "text": "they are we fac the same problems that every company in the industry that is",
    "start": "1211159",
    "end": "1216280"
  },
  {
    "text": "building and releasing software is also facing so where you want people to be able to sign up for fire hydrant and",
    "start": "1216280",
    "end": "1223200"
  },
  {
    "text": "immediately be able to kick off an incident using the best practices that we've bu and we've experienced and have",
    "start": "1223200",
    "end": "1230120"
  },
  {
    "text": "gathered through the other amazing customers that use our tool it really is a very quick time Dev value and we want",
    "start": "1230120",
    "end": "1235679"
  },
  {
    "text": "people to have a long jump from where they are to where they want to be in Incident Management I love it thank you",
    "start": "1235679",
    "end": "1242440"
  },
  {
    "text": "Robert small teams up to 10 people can get started for free with all fire hydrant features included there's no",
    "start": "1242440",
    "end": "1248520"
  },
  {
    "text": "credit card required to sign up they are making it too easy to get started so check them out at fireh hydrant decom",
    "start": "1248520",
    "end": "1255080"
  },
  {
    "text": "again fireh hydrant decom [Music]",
    "start": "1255080",
    "end": "1272630"
  },
  {
    "text": "have you ever seen malware in cobal I haven't actually I wonder how would you evaluate that on the more safe or on the",
    "start": "1278159",
    "end": "1285080"
  },
  {
    "text": "less safe side now that you say all that I actually have no idea like cobal is one of those languages that I know of I",
    "start": "1285080",
    "end": "1291840"
  },
  {
    "text": "know that if you want to work in Banks and be paid the big bucks then you should definitely learn Cobalt because",
    "start": "1291840",
    "end": "1297640"
  },
  {
    "text": "all the former Cobalt developers they died of old age by now so you know they are kind of hard to find Beyond this",
    "start": "1297640",
    "end": "1305520"
  },
  {
    "text": "never in my life have I heard about or like never in the maybe the last 10 years have I heard about malware return",
    "start": "1305520",
    "end": "1311200"
  },
  {
    "text": "in Cobalt if I were to find one then I it would be a pretty cool blog article but it would probably be a miserable",
    "start": "1311200",
    "end": "1317640"
  },
  {
    "text": "week for for me because then I would have to probably learn the language and figure out how it works although like to",
    "start": "1317640",
    "end": "1323039"
  },
  {
    "text": "be fair this week I actually had to reverse engineer program that was written in Pascal which is the spiritual",
    "start": "1323039",
    "end": "1329080"
  },
  {
    "text": "parent of go yeah I suppose and also a spiritual parent of many other languages because like it came from the 80s maybe",
    "start": "1329080",
    "end": "1335600"
  },
  {
    "text": "the 70s right I remember learning Pascal or at least the basics when I was in school something like it 15 years ago",
    "start": "1335600",
    "end": "1343240"
  },
  {
    "text": "now same it was the my high school graduation uh project had to be in",
    "start": "1343240",
    "end": "1348760"
  },
  {
    "text": "Pascal so there you go like I probably wrote a little bit of Pascal myself probably never actual projects that did",
    "start": "1348760",
    "end": "1354880"
  },
  {
    "text": "anything meaningful but I did have to look at some AP malware like real life AP what does AP stand for oh sorry it",
    "start": "1354880",
    "end": "1362279"
  },
  {
    "text": "means advanced persistent threat so APS are one of the categories of hackers",
    "start": "1362279",
    "end": "1368200"
  },
  {
    "text": "that we track in our daily work so you have on one end the attackers that are financially motivated or cyber crime",
    "start": "1368200",
    "end": "1374840"
  },
  {
    "text": "ransomware groups and all the like and on the other end of the spectrum you have what we call the aps which",
    "start": "1374840",
    "end": "1381520"
  },
  {
    "text": "basically are the state sponsored actors or the mercenary actors all the groups",
    "start": "1381520",
    "end": "1386760"
  },
  {
    "text": "that are focused on Cyber Espionage now initially the name AP was I think",
    "start": "1386760",
    "end": "1393360"
  },
  {
    "text": "proposed by ment it's probably around 2010 or something like this with their first report and back then I think it",
    "start": "1393360",
    "end": "1399520"
  },
  {
    "text": "made sense to say you know on one end we have the lows scale cyber criminals that are doing run-of- the male crime Weare",
    "start": "1399520",
    "end": "1406600"
  },
  {
    "text": "and on the other end of the spectrum you have those state sponsored attackers that are doing very sophisticated things",
    "start": "1406600",
    "end": "1411760"
  },
  {
    "text": "I think that today trying to separate attackers between levels of sophistication doesn't make that much",
    "start": "1411760",
    "end": "1417080"
  },
  {
    "text": "sense anymore we do have extremely skilled ransomware groups that use very Cutting Edge pen testing methodologies",
    "start": "1417080",
    "end": "1423760"
  },
  {
    "text": "and we do have APS that are extremely bad I would say they have a poor OBS they don't know how to use their tools",
    "start": "1423760",
    "end": "1429840"
  },
  {
    "text": "and so on so at this stage I think in 2022 when you hear AP you just have to",
    "start": "1429840",
    "end": "1435120"
  },
  {
    "text": "think about Espionage I think this is going to be a the way to understand this but in any case yeah this week I was",
    "start": "1435120",
    "end": "1441679"
  },
  {
    "text": "working on some another AP case taking place in some of the St countries in the",
    "start": "1441679",
    "end": "1448120"
  },
  {
    "text": "CIS Commonwealth independent states I think anyway and one of the malware implants that we found there was",
    "start": "1448120",
    "end": "1454360"
  },
  {
    "text": "actually written in Pascal and so it was kind of a trick a trip down the memory lane to one figure out what Pascal was",
    "start": "1454360",
    "end": "1461000"
  },
  {
    "text": "again and also trying to understand what kind of assembly was generated by this Pascal compiler it wasn't that bad",
    "start": "1461000",
    "end": "1467279"
  },
  {
    "text": "actually when less bad than having to discover the go language that's interesting to know because there is a",
    "start": "1467279",
    "end": "1472840"
  },
  {
    "text": "lot of similarity between go and Pascal but knowing that the translation of that is different oh yeah I can tell you even",
    "start": "1472840",
    "end": "1480159"
  },
  {
    "text": "though I'm not an expert in any of the language that even though you might have some similarities on the code level in",
    "start": "1480159",
    "end": "1486039"
  },
  {
    "text": "the maybe the constructs and the way that you declare things and so on when it comes to assembly like the languages",
    "start": "1486039",
    "end": "1491200"
  },
  {
    "text": "could not be more different from one another I thought that con if they're conceptually similar they might have a a",
    "start": "1491200",
    "end": "1497279"
  },
  {
    "text": "similar structure but I guess not no I think they I suppose they took inspiration when it comes to how to",
    "start": "1497279",
    "end": "1502880"
  },
  {
    "text": "write the code but then when it comes to what the compiler does then yeah the go compiler really does its own thing and",
    "start": "1502880",
    "end": "1509320"
  },
  {
    "text": "when you say that each language has their own different thing in the assembly representation or even when you",
    "start": "1509320",
    "end": "1515000"
  },
  {
    "text": "reverse engineer that into Like A visual representation yeah how many different ways can you have is it really can it be",
    "start": "1515000",
    "end": "1521360"
  },
  {
    "text": "like every time completely different It's Not always completely completely different but there are some meaningful",
    "start": "1521360",
    "end": "1527279"
  },
  {
    "text": "differen is I would say that c language maybe it's a a misconception I have",
    "start": "1527279",
    "end": "1532360"
  },
  {
    "text": "because C language is traditionally what you learn reverse engineering on so C language to me is going to be the",
    "start": "1532360",
    "end": "1538440"
  },
  {
    "text": "language that is closest to the CPU when you compile a c program then there's going to be a kind of direct translation",
    "start": "1538440",
    "end": "1545080"
  },
  {
    "text": "from your C code to the Assembly Language like the compiler isn't going",
    "start": "1545080",
    "end": "1550559"
  },
  {
    "text": "to be too smart about things when you do something in C then when you write it in code then it kind of shows in the in the",
    "start": "1550559",
    "end": "1557200"
  },
  {
    "text": "assembly language like of course you can have some compiler optimizations for speed for for space and so on but",
    "start": "1557200",
    "end": "1563559"
  },
  {
    "text": "overall the translation is going to be like pretty I wouldn't say it's easily",
    "start": "1563559",
    "end": "1568600"
  },
  {
    "text": "reversible but I think it's pretty direct like it's you really find your bearings from the C code to the Assembly Language and I think it's actually not",
    "start": "1568600",
    "end": "1575520"
  },
  {
    "text": "that much of a surprise that decompiler tools such as gidra or such as the one",
    "start": "1575520",
    "end": "1581760"
  },
  {
    "text": "sold with Ida Pro do take the assembly and convert back to C language because I",
    "start": "1581760",
    "end": "1587240"
  },
  {
    "text": "think this is the closest and then when you go to languages that have I would",
    "start": "1587240",
    "end": "1592559"
  },
  {
    "text": "say higher levels of conceptual complexity then this is where the compiler starts doing a lot of things on",
    "start": "1592559",
    "end": "1599480"
  },
  {
    "text": "its own and this is where the code that you write ends up being super different from the assembly that you read when it",
    "start": "1599480",
    "end": "1605799"
  },
  {
    "text": "comes to C++ and when you use an STD string it seems like a very simple thing right but under the hood the STD string",
    "start": "1605799",
    "end": "1613399"
  },
  {
    "text": "class is actually a template instantiation of like a very very very complex series of nested templates and",
    "start": "1613399",
    "end": "1620720"
  },
  {
    "text": "you end up with how can I explain this you end up with a weird structure that",
    "start": "1620720",
    "end": "1626039"
  },
  {
    "text": "has a first a table that contains pointer to methods and which is something you never wrote in C you end",
    "start": "1626039",
    "end": "1632880"
  },
  {
    "text": "up with methods calling each other nested methods that come from the template library from the C plus plus",
    "start": "1632880",
    "end": "1639000"
  },
  {
    "text": "standard library and so on and things just get crazy from here taking the example of Pascal and again I don't",
    "start": "1639000",
    "end": "1644880"
  },
  {
    "text": "write that much Pascal code but it's very obvious to me that when I look at the assembly code and I see reference",
    "start": "1644880",
    "end": "1650360"
  },
  {
    "text": "counters being incremented and decremented automatically and all that kind of stuff then this is something",
    "start": "1650360",
    "end": "1655399"
  },
  {
    "text": "that was automatically added by the compiler and it's I guess useful as far as the running the program goes but when",
    "start": "1655399",
    "end": "1662240"
  },
  {
    "text": "it comes to me understanding the program like making sure that you know reference counts are handled properly and that the",
    "start": "1662240",
    "end": "1667880"
  },
  {
    "text": "objects are going to be freed when there are no more references to them is something that I really don't care about and it's just cluttering my uh",
    "start": "1667880",
    "end": "1675200"
  },
  {
    "text": "cluttering my window really it's just code added by the compiler that has no meaning at least when it comes to what",
    "start": "1675200",
    "end": "1680880"
  },
  {
    "text": "the program is supposed to be doing it doesn't add any intelligence to the program it's just something that gets in the way and go is probably one of the",
    "start": "1680880",
    "end": "1689159"
  },
  {
    "text": "far extremes of this right there with C++ because the go compiler is really",
    "start": "1689159",
    "end": "1694640"
  },
  {
    "text": "doing a lot of stuff under the hood like it really how can I put this optimizations",
    "start": "1694640",
    "end": "1702200"
  },
  {
    "text": "yeah optimizations it inlines anything that is not uh worth a function call",
    "start": "1702200",
    "end": "1708000"
  },
  {
    "text": "the calling convention is its own thing it's really oh you also have the you",
    "start": "1708000",
    "end": "1713279"
  },
  {
    "text": "also have a garbage collection mechanism when you write a simple hello world program in go language it ends up being",
    "start": "1713279",
    "end": "1719240"
  },
  {
    "text": "a an executable that's something like one megabytes big or something like this like I get that today storage space",
    "start": "1719240",
    "end": "1725720"
  },
  {
    "text": "isn't that expensive like we don't care about one megabyte of code like what's the difference between this and 7even",
    "start": "1725720",
    "end": "1731039"
  },
  {
    "text": "kilobytes I think not that much when it comes to hard drives but when you are a reverse engineer and you have to look at",
    "start": "1731039",
    "end": "1736799"
  },
  {
    "text": "one megabyte code instead of seven kilobytes and it's actually a big deal right and this is the kind of the kind",
    "start": "1736799",
    "end": "1743120"
  },
  {
    "text": "of thing that the go compiler does to you along with the number of optimizations along with this very weird",
    "start": "1743120",
    "end": "1750360"
  },
  {
    "text": "calling convention that they have Etc another thing that I don't like about Go I mean it's a good thing right I don't",
    "start": "1750360",
    "end": "1755840"
  },
  {
    "text": "like as a reverse engineer is the go routines yes this would have been my next question yes please do elaborate",
    "start": "1755840",
    "end": "1763200"
  },
  {
    "text": "great so it seems like a very very easy way to create threat programs as far as",
    "start": "1763200",
    "end": "1768880"
  },
  {
    "text": "I understand which is great as far as developers go but it makes it a bit too easy for malware developers to create R",
    "start": "1768880",
    "end": "1775480"
  },
  {
    "text": "programs as well and when it comes to understanding what a program does we really like linear programs we want you",
    "start": "1775480",
    "end": "1781559"
  },
  {
    "text": "know instructions that we can look at one after the other we want programs that we can debug very easily and as",
    "start": "1781559",
    "end": "1787600"
  },
  {
    "text": "soon as many things start happening in many threads then oh my God following things around becomes extremely",
    "start": "1787600",
    "end": "1793440"
  },
  {
    "text": "extremely difficult so I would actually like for threaded programs to be more",
    "start": "1793440",
    "end": "1798679"
  },
  {
    "text": "difficult to write and to be less available for attackers if that were an option how do threads represent",
    "start": "1798679",
    "end": "1806679"
  },
  {
    "text": "themselves visually when you do reverse engineering well they don't really represent themselves because threads as",
    "start": "1806679",
    "end": "1812840"
  },
  {
    "text": "a concept they are a fundamentally runtime object right a thread is going",
    "start": "1812840",
    "end": "1817880"
  },
  {
    "text": "to be a unit of execution that is going to run some code and when you have a single thread which is the case for a",
    "start": "1817880",
    "end": "1824360"
  },
  {
    "text": "lot of programs then you can just follow what is going on the code linearly and then you figure out what is going on",
    "start": "1824360",
    "end": "1829840"
  },
  {
    "text": "when you have several threads then this is really an order of magnitude more of",
    "start": "1829840",
    "end": "1835440"
  },
  {
    "text": "complexity that you have to Wade through in the sense that as a reverse engineer you don't only have to think about what",
    "start": "1835440",
    "end": "1842200"
  },
  {
    "text": "is going on in the program or in the function that you are reading but at all times you have to think about the fact",
    "start": "1842200",
    "end": "1847360"
  },
  {
    "text": "that there might be another thread running somewhere that might be doing things that are affecting what you are",
    "start": "1847360",
    "end": "1852919"
  },
  {
    "text": "doing right now or what the the current function that you are reading is doing and so you do not have the luxury of",
    "start": "1852919",
    "end": "1859519"
  },
  {
    "text": "having all the information that you need in a single place the functionality the intelligence of the program ends up",
    "start": "1859519",
    "end": "1865279"
  },
  {
    "text": "being spread over different units of execution and you have to keep everything in your head to have any hope",
    "start": "1865279",
    "end": "1872200"
  },
  {
    "text": "of understanding what is going on so this is really a very heavy mental tax that is imposed on the reverse engineer",
    "start": "1872200",
    "end": "1878799"
  },
  {
    "text": "and of course the more threats there are then the more effort that you have to go through to try to keep track of",
    "start": "1878799",
    "end": "1884960"
  },
  {
    "text": "everything that is going on but one good good example of this is um a go program that I mentioned in the previous podcast",
    "start": "1884960",
    "end": "1891399"
  },
  {
    "text": "it's called stow away and this is a open source project that is used to do",
    "start": "1891399",
    "end": "1898200"
  },
  {
    "text": "various proxying operations like as a pen testing tool right you can create tunnels sock proxies Etc and probably",
    "start": "1898200",
    "end": "1905360"
  },
  {
    "text": "pipe them with each other I'm not exactly sure but what I'm sure of is that when I was reading the programs",
    "start": "1905360",
    "end": "1910440"
  },
  {
    "text": "assembly it felt very very measurable because it was obvious that many things were happening at the same time which of",
    "start": "1910440",
    "end": "1916760"
  },
  {
    "text": "course is going to be the case because when you have some Network program then packets can arrive from any end of the",
    "start": "1916760",
    "end": "1922480"
  },
  {
    "text": "various tunnels and you can also have many tunnels running at the same time so you have all these things taking place",
    "start": "1922480",
    "end": "1928159"
  },
  {
    "text": "at the same time and trying to figure out exactly what does what is extremely",
    "start": "1928159",
    "end": "1933600"
  },
  {
    "text": "difficult and if I hadn't been able to figure out that this was actually an open source project for which I was able",
    "start": "1933600",
    "end": "1939399"
  },
  {
    "text": "to go find the code then probably I might not have been able to figure out everything that the program was doing at",
    "start": "1939399",
    "end": "1945320"
  },
  {
    "text": "all because there was just too much to work through and too much to remember because my my memory is actually quite",
    "start": "1945320",
    "end": "1951720"
  },
  {
    "text": "limited as is the memory of any human being compared to a computer really until we start upgrading yeah I",
    "start": "1951720",
    "end": "1959279"
  },
  {
    "text": "wish all the interesting terms that you're mentioning like AP and also ST which you reminded now it will be in the",
    "start": "1959279",
    "end": "1967240"
  },
  {
    "text": "show notes for those who want to look back at that and see how can they handle",
    "start": "1967240",
    "end": "1973679"
  },
  {
    "text": "threads in reverse engineering yeah it will be interesting to see some example of how that actually looks because you",
    "start": "1973679",
    "end": "1980639"
  },
  {
    "text": "said that this kind of can tint the results and whatnot if you maybe like",
    "start": "1980639",
    "end": "1985799"
  },
  {
    "text": "there's data dependency between the two but I still try to visualize and understand so I'm referring back to the",
    "start": "1985799",
    "end": "1992039"
  },
  {
    "text": "video of that you have published on YouTube which I also link of you reverse engineering a go program and you kind of",
    "start": "1992039",
    "end": "1998279"
  },
  {
    "text": "build this block diagram of the different steps and you write what's happening there what you guess and so on",
    "start": "1998279",
    "end": "2003840"
  },
  {
    "text": "so affecting the results by sharing some data or do a calculation return and then on top of that that all makes sense do",
    "start": "2003840",
    "end": "2011600"
  },
  {
    "text": "commands just pop up randomly in what's happening now and you kind of try to",
    "start": "2011600",
    "end": "2017080"
  },
  {
    "text": "paint that in the relevant context once you're reverse engineering something with multi-threads actually I think the",
    "start": "2017080",
    "end": "2023399"
  },
  {
    "text": "best way to visualize it is not to try to think about a program as it is running but imagine that instead of",
    "start": "2023399",
    "end": "2029399"
  },
  {
    "text": "reading assembly code you are reading the source code of a go program I think",
    "start": "2029399",
    "end": "2034519"
  },
  {
    "text": "you are not going to dispute the fact that if you receive some go project from a friend or a coworker and you know",
    "start": "2034519",
    "end": "2041200"
  },
  {
    "text": "nothing about this project and you have to read this source code then the source code is going to be much easier to",
    "start": "2041200",
    "end": "2046919"
  },
  {
    "text": "understand if you know the program is just a single thread that is doing a single thing right if you receive this",
    "start": "2046919",
    "end": "2053280"
  },
  {
    "text": "program that as soon as it begins it launches three different threads that are supposed to do different things at",
    "start": "2053280",
    "end": "2058638"
  },
  {
    "text": "the same time and figuring out exactly what the program is going to be doing is",
    "start": "2058639",
    "end": "2063919"
  },
  {
    "text": "going to be I think much more difficult now imagine the same thing but instead of receiving proper go code then you",
    "start": "2063919",
    "end": "2071520"
  },
  {
    "text": "would receive go code where all the variable names have been wipes and all the variables are named a b and c Etc so",
    "start": "2071520",
    "end": "2077720"
  },
  {
    "text": "you cannot even use the function names or you cannot even use the variable names to try to understand what the",
    "start": "2077720",
    "end": "2083560"
  },
  {
    "text": "program is supposed to do imagine that you have no comment inside the code as well this is basically what reverse",
    "start": "2083560",
    "end": "2089079"
  },
  {
    "text": "Engineers have you don't always have to imagine that yeah of course yeah this might be real life for a lot of people",
    "start": "2089079",
    "end": "2095960"
  },
  {
    "text": "out there shout out to them I guess but this is exactly what reverse engineering",
    "start": "2095960",
    "end": "2101280"
  },
  {
    "text": "is right you receive some source code whether it is assembly or high level a high level code is that does a bit of",
    "start": "2101280",
    "end": "2107280"
  },
  {
    "text": "difference because assembly is hard to read but basically it's going to be the same thing that you have to go through right you receive some code you have to",
    "start": "2107280",
    "end": "2114160"
  },
  {
    "text": "understand what it does and the more complex this code is the more sophisticated its operations are then",
    "start": "2114160",
    "end": "2120240"
  },
  {
    "text": "the harder time you're going to have to understand exactly what is going on in there to this it brings me to the next",
    "start": "2120240",
    "end": "2126000"
  },
  {
    "text": "question that gener go best practice let's say or like uh",
    "start": "2126000",
    "end": "2131560"
  },
  {
    "text": "the right way to do go is to write simple readable code rather than sophisticated and like trary operations",
    "start": "2131560",
    "end": "2138599"
  },
  {
    "text": "and whatnot and uh complicated things does this in any way help or not or I",
    "start": "2138599",
    "end": "2145800"
  },
  {
    "text": "wish but it turns out that for the compiler whether you write the simple",
    "start": "2145800",
    "end": "2151079"
  },
  {
    "text": "way or the trinary operation if the compiler is smart enough then at the end of the day it's going to generate the",
    "start": "2151079",
    "end": "2156400"
  },
  {
    "text": "very same assembly construct hopefully the compiler if you do this if then else",
    "start": "2156400",
    "end": "2163359"
  },
  {
    "text": "or if you do use the trary operator it's going to be able to recognize that it's the same thing and in the end it's going",
    "start": "2163359",
    "end": "2168760"
  },
  {
    "text": "to generate assembly that does exactly the same so it's a good thing as far as development practices are concerned but",
    "start": "2168760",
    "end": "2176040"
  },
  {
    "text": "you know when you reach the assembly level then all those helpful things and all those precautions that you have",
    "start": "2176040",
    "end": "2182079"
  },
  {
    "text": "taken to make sure that other people will be able to understand what you are doing just get taken out by the compiler",
    "start": "2182079",
    "end": "2188720"
  },
  {
    "text": "because you know there are things for humans there are not things for CPUs and so they have no place in your compil program yeah that's a great Point",
    "start": "2188720",
    "end": "2195839"
  },
  {
    "text": "actually one callback from one question you asked earlier you asked how many different things can a compiler do when",
    "start": "2195839",
    "end": "2201839"
  },
  {
    "text": "it comes to different languages an additional example I can give for go is go programs go functions they can return",
    "start": "2201839",
    "end": "2208240"
  },
  {
    "text": "any number of return values right this is not something that most languages are",
    "start": "2208240",
    "end": "2213720"
  },
  {
    "text": "doing and so when you look at the Assembly Language then at the end of the day it it turns out to be translated in",
    "start": "2213720",
    "end": "2219520"
  },
  {
    "text": "CPU code in very different ways and you know normal functions are supposed to to",
    "start": "2219520",
    "end": "2224960"
  },
  {
    "text": "work right when you have a function that can only return single argument which is the case for a lot of languages out",
    "start": "2224960",
    "end": "2231119"
  },
  {
    "text": "there like cc++ Etc then you have a very simple convention the convention says oh the return value will be in register eax",
    "start": "2231119",
    "end": "2237839"
  },
  {
    "text": "in assembly this is like this is the rule it's very simple when it comes to go language then you know you don't have",
    "start": "2237839",
    "end": "2244319"
  },
  {
    "text": "a single place because you can have several arguments and so they are returned differently through the stack",
    "start": "2244319",
    "end": "2249480"
  },
  {
    "text": "and you have to go look for it there it's just much more complex and it's very different from a traditional",
    "start": "2249480",
    "end": "2254920"
  },
  {
    "text": "language and the difference between the languages are going to be small things like this when it comes to conventions",
    "start": "2254920",
    "end": "2261680"
  },
  {
    "text": "but actually some of all of them are going to result in having a source code or an assembly code in at the end of the",
    "start": "2261680",
    "end": "2267960"
  },
  {
    "text": "day that is really extremely different from one another would you say that the way from what you see the way that go",
    "start": "2267960",
    "end": "2275040"
  },
  {
    "text": "handles on the compiler level the return of multiple arguments is efficient",
    "start": "2275040",
    "end": "2280160"
  },
  {
    "text": "overall yeah it really feels like it as far as I recall like maybe this is me making a mistake but it feels like the",
    "start": "2280160",
    "end": "2287480"
  },
  {
    "text": "return values from one function call are placed exactly where they should be on the stack so that another function can",
    "start": "2287480",
    "end": "2293480"
  },
  {
    "text": "use them as arguments immediately and so change the calls between different functions when you have a function",
    "start": "2293480",
    "end": "2299520"
  },
  {
    "text": "calling when you call a function by passing an argument which is the result of another function call it feels like",
    "start": "2299520",
    "end": "2305920"
  },
  {
    "text": "in assem like these function calls are going to be very close to each other you won't have to like move back stuff from",
    "start": "2305920",
    "end": "2312800"
  },
  {
    "text": "the return values back on the stack Etc just already there and I think that on",
    "start": "2312800",
    "end": "2317839"
  },
  {
    "text": "that level they're going to like be pretty efficient and to go pretty fast",
    "start": "2317839",
    "end": "2323359"
  },
  {
    "text": "nice good to know it's always encouraging so go is kind of built in a",
    "start": "2323359",
    "end": "2330000"
  },
  {
    "text": "way that you don't debug this line by line with break points and so on as you do in many other languages but you do",
    "start": "2330000",
    "end": "2335839"
  },
  {
    "text": "something and you check check for errors all the time I will not ask you whether malware is generally written like this",
    "start": "2335839",
    "end": "2341960"
  },
  {
    "text": "or not or how good are they with their error catching unless you know and then please do share I do know actually",
    "start": "2341960",
    "end": "2348520"
  },
  {
    "text": "because I I end up reading the code right so yeah what I learned by about go",
    "start": "2348520",
    "end": "2354640"
  },
  {
    "text": "by reading assembly code is and also by trying it myself to understand what was going on is the fact that the go",
    "start": "2354640",
    "end": "2360720"
  },
  {
    "text": "language will not allow you to not catch the errors right if you have a function thats two return values and if you do",
    "start": "2360720",
    "end": "2368079"
  },
  {
    "text": "not catch them then you're going to be in trouble right the code is not going to compile so I think you can probably",
    "start": "2368079",
    "end": "2374319"
  },
  {
    "text": "create this underscore variable that means I don't care yes right but as far as I can tell malware developers at",
    "start": "2374319",
    "end": "2381040"
  },
  {
    "text": "least for the programs that I've seen they do catch the errors and they check for the errors and they handle them",
    "start": "2381040",
    "end": "2386400"
  },
  {
    "text": "properly which I think makes sense right because if the languages forces you to do it then you're going to do it like of",
    "start": "2386400",
    "end": "2392839"
  },
  {
    "text": "course you can circumvent this by you know using this special variable and not actually checking but if the mechanism",
    "start": "2392839",
    "end": "2399640"
  },
  {
    "text": "is there and if the language creates the framework where you kind of have to do it then it kind of feel foolish I think",
    "start": "2399640",
    "end": "2406319"
  },
  {
    "text": "to not do it even though you can because if you don't want to do those things and just you know go back to see and play without any safety belts and you know",
    "start": "2406319",
    "end": "2413720"
  },
  {
    "text": "just uh play with by your own rules but if you're going to use the go language I think it makes sense to use the language",
    "start": "2413720",
    "end": "2421119"
  },
  {
    "text": "as it was intended and this is in fact what I'm seeing when I look at malware code that is a little bit",
    "start": "2421119",
    "end": "2426920"
  },
  {
    "text": "sparking joy to know that even haers use the best practices but it's true that erors have a lot of information in them",
    "start": "2426920",
    "end": "2435200"
  },
  {
    "text": "is that something that uh you as a developer you you are not seeing like do you see a lot of co-workers and you know",
    "start": "2435200",
    "end": "2441599"
  },
  {
    "text": "code you receed that where the error checking is just bypassed and not use at all no usually those things will not",
    "start": "2441599",
    "end": "2447480"
  },
  {
    "text": "pass um peer review but I just don't know enough whether hackers do peer rreview you know so that's that is",
    "start": "2447480",
    "end": "2454200"
  },
  {
    "text": "interesting well you know this is what I've seen it's going to be anecdotal at Best of course you know there are always",
    "start": "2454200",
    "end": "2460880"
  },
  {
    "text": "going to be hackers out there that do things their own way their own bad way just like real world developers that",
    "start": "2460880",
    "end": "2467440"
  },
  {
    "text": "work on other legitimate projects and so I can only speak about you the few malware programs that I have seen and",
    "start": "2467440",
    "end": "2474079"
  },
  {
    "text": "for which I can say that they looked pretty welld developed as far as I was concerned but like there is bound to be",
    "start": "2474079",
    "end": "2480440"
  },
  {
    "text": "somewhere out there that is going to be writing the most despicable go- code you can think of",
    "start": "2480440",
    "end": "2487800"
  },
  {
    "text": "does of course make sense but still I'm happy to hear that generally good practices are followed everywhere",
    "start": "2487800",
    "end": "2493240"
  },
  {
    "text": "another thing that I wanted to ask about that is how does this represent in assembly given that this is generally",
    "start": "2493240",
    "end": "2498680"
  },
  {
    "text": "not a very common practice do you I guess because you don't see lots of Errors you basically don't see the",
    "start": "2498680",
    "end": "2505200"
  },
  {
    "text": "representation of this well the way I see it is that when I look at the",
    "start": "2505200",
    "end": "2512240"
  },
  {
    "text": "assembly code most of the times since I'm not a go developer I have to look up the functions that are being called",
    "start": "2512240",
    "end": "2518680"
  },
  {
    "text": "right sometimes the the names are self-explanatory but most of the times I have to go to the go documentation which",
    "start": "2518680",
    "end": "2525040"
  },
  {
    "text": "by the way I think is extremely well done like every time I look for a function documentation I find it which",
    "start": "2525040",
    "end": "2530200"
  },
  {
    "text": "is always a good thing there are languages where you know you try to find stuff and you just don't right even the",
    "start": "2530200",
    "end": "2535920"
  },
  {
    "text": "basic functions but anyway so I go look at the documentation and then I get information about what arguments this",
    "start": "2535920",
    "end": "2542760"
  },
  {
    "text": "function is supposed to receive and what uh return values it's supposed to provide and then when I do this uh this",
    "start": "2542760",
    "end": "2549760"
  },
  {
    "text": "looking up then I get the information about whether or not the error value is supposed to be returned whether a an",
    "start": "2549760",
    "end": "2557200"
  },
  {
    "text": "error value is supposed to be returned by the function and when that's the case then I cannot recall of an instance",
    "start": "2557200",
    "end": "2563160"
  },
  {
    "text": "where I I was supposed to see an error value returned from the program and that",
    "start": "2563160",
    "end": "2568280"
  },
  {
    "text": "was not checked so the way that you would see it in assembly would be like have this function call and then you see",
    "start": "2568280",
    "end": "2574400"
  },
  {
    "text": "some random variable being taken back from the stack and compared with value",
    "start": "2574400",
    "end": "2579440"
  },
  {
    "text": "zero so basically if air is equal to nil and then you have a block and whether or",
    "start": "2579440",
    "end": "2584920"
  },
  {
    "text": "not the error is or is not nail and you can go into that block and go into another one but that block is here which",
    "start": "2584920",
    "end": "2591640"
  },
  {
    "text": "means that the attacker or the malware author went through the trouble of actually making sure that the error like",
    "start": "2591640",
    "end": "2597920"
  },
  {
    "text": "there was no error returned by the function so this is the way that I observe it so earlier you mentioned",
    "start": "2597920",
    "end": "2604079"
  },
  {
    "text": "something that you you compare it kind of your work to getting a code from a",
    "start": "2604079",
    "end": "2609280"
  },
  {
    "text": "colleague but it's all kind of no parameter names no documentation no function names and so on and that",
    "start": "2609280",
    "end": "2615880"
  },
  {
    "text": "reminded me how sometimes you can use all sorts of AI tools like codex and and",
    "start": "2615880",
    "end": "2621359"
  },
  {
    "text": "co-pilot and what not to highlight that and says well explain what it does so did you ever have a chance to use one of",
    "start": "2621359",
    "end": "2627760"
  },
  {
    "text": "those I didn't I know that GitHub released this project I personally have",
    "start": "2627760",
    "end": "2633920"
  },
  {
    "text": "a very religious fear of such projects just because you know I know that the way it works is that the all the source",
    "start": "2633920",
    "end": "2640359"
  },
  {
    "text": "code I write gets uploaded into you know the cloud and analyzed and gets to fedit their machine learning algorithm and",
    "start": "2640359",
    "end": "2647000"
  },
  {
    "text": "like it's kind of stupid because all the code I've write ends up being open source anyway but I don't like that and",
    "start": "2647000",
    "end": "2652240"
  },
  {
    "text": "if it's on GitHub it goes to the same place exactly it also ends up there so overall like it's not really a good",
    "start": "2652240",
    "end": "2658640"
  },
  {
    "text": "reason for me not to do it but I didn't try it uh yet I've been told by some",
    "start": "2658640",
    "end": "2663880"
  },
  {
    "text": "co-workers I think they've used it for python I've been told that it's amazing it can pretty much guess what you are",
    "start": "2663880",
    "end": "2669040"
  },
  {
    "text": "thinking which is kind of scary but when you write code or when you reverse yeah exactly when you write code I am not",
    "start": "2669040",
    "end": "2676000"
  },
  {
    "text": "aware of a machine learning project that would help you reverse engineer programs",
    "start": "2676000",
    "end": "2682359"
  },
  {
    "text": "although I am 100% sure that this is possible like I've been playing a lot with the uh image generation AIS",
    "start": "2682359",
    "end": "2689040"
  },
  {
    "text": "especially mid journey I tried the the one that generates text which is called Lex all those AIS as far as I'm",
    "start": "2689040",
    "end": "2695599"
  },
  {
    "text": "concerned produce incredible results like if you had told me one year ago that I would be able to type some text",
    "start": "2695599",
    "end": "2701839"
  },
  {
    "text": "and I would get the corresponding image generated and that the image would actually look pretty amazing I would really not have believed you for real I",
    "start": "2701839",
    "end": "2708280"
  },
  {
    "text": "would have said that this is science fiction it's never going to happen in my lifetime or maybe when I'm old and don't",
    "start": "2708280",
    "end": "2713559"
  },
  {
    "text": "understand what's going on anymore but like we are there we are there for many complex applications such as you know",
    "start": "2713559",
    "end": "2720280"
  },
  {
    "text": "understanding human language and generating lots of contents and at this",
    "start": "2720280",
    "end": "2725440"
  },
  {
    "text": "stage I would be extremely shocked if you told me that the recognizing",
    "start": "2725440",
    "end": "2730520"
  },
  {
    "text": "functions that are actually generated by other computers is not something possible like this is 100% gonna happen",
    "start": "2730520",
    "end": "2737359"
  },
  {
    "text": "eventually I don't know who's going to do it maybe I should actually I don't know anything about but like this is an",
    "start": "2737359",
    "end": "2743800"
  },
  {
    "text": "extremely worthy project and I think that eventually this is going to help us win so much time when we work on some",
    "start": "2743800",
    "end": "2749839"
  },
  {
    "text": "unknown programs yeah probably we need have to have specialized AIS for different languages we will need one for",
    "start": "2749839",
    "end": "2755119"
  },
  {
    "text": "c one for C Plus+ one for go Etc but I cannot imagine that this is not in our",
    "start": "2755119",
    "end": "2761359"
  },
  {
    "text": "future and probably in our near future too hopefully they won't sell this too expensive because I want it so a",
    "start": "2761359",
    "end": "2768079"
  },
  {
    "text": "follow-up question to that for codes generation some languages are better than other for example go is performing",
    "start": "2768079",
    "end": "2776240"
  },
  {
    "text": "even better than Python and such just because go has this built-in linter and there's many things that it's not either",
    "start": "2776240",
    "end": "2782760"
  },
  {
    "text": "or but you know it's definitely tabs it's definitely curly bracket and a new line so the AI has a more consistent",
    "start": "2782760",
    "end": "2790839"
  },
  {
    "text": "data set to be trained on versus python that you or many other languages that you can write in whatever way so it just",
    "start": "2790839",
    "end": "2797440"
  },
  {
    "text": "sees lots of different examples and it might at best case generate inconsistent code of you know one file is different",
    "start": "2797440",
    "end": "2804480"
  },
  {
    "text": "from another but sometimes even just sometimes wrong following two different paradigms in one",
    "start": "2804480",
    "end": "2810839"
  },
  {
    "text": "file do you think that for the reverse part of it will this benefit kind of",
    "start": "2810839",
    "end": "2815880"
  },
  {
    "text": "keep rolling or not for the AI perspective of it yes and no so what you are referring to is the fact that the",
    "start": "2815880",
    "end": "2822480"
  },
  {
    "text": "more strict languages are then the easier for an AI it is to understand what is meant and to generate code and I",
    "start": "2822480",
    "end": "2828880"
  },
  {
    "text": "think it makes sense because python for instance as a language is extremely ambiguous right not as ambiguous as",
    "start": "2828880",
    "end": "2835480"
  },
  {
    "text": "JavaScript or maybe as PHP you know which are as far as I'm concerned they don't qualify as actual languages",
    "start": "2835480",
    "end": "2841440"
  },
  {
    "text": "because they're not rigorous at all but when you have stuff like Duck typing in a variable that you don't have to type",
    "start": "2841440",
    "end": "2848240"
  },
  {
    "text": "at all well of course for an AI to figure out what is going on is going to",
    "start": "2848240",
    "end": "2853359"
  },
  {
    "text": "require much more effort and it's going to probably not be possible all the time because I think that in many cases a lot",
    "start": "2853359",
    "end": "2859160"
  },
  {
    "text": "of stuff gets determined at runtime which is not something that an AI is probably going to be able to to do at",
    "start": "2859160",
    "end": "2865800"
  },
  {
    "text": "least not that soon on the other end when you have some assembly code then",
    "start": "2865800",
    "end": "2872240"
  },
  {
    "text": "assembly code is going to be this very strict unique language that probably all AIS will have to work on and I'm not",
    "start": "2872240",
    "end": "2879079"
  },
  {
    "text": "exactly sure how they are going to work their way back up to either recognizing a function or actually generating",
    "start": "2879079",
    "end": "2885880"
  },
  {
    "text": "corresponding high level code but the good thing that AIS will have going for them is that assembly is going to be",
    "start": "2885880",
    "end": "2892319"
  },
  {
    "text": "like the exact opposite of ambiguous right this is like you have ambiguous and then the exact other end of you know",
    "start": "2892319",
    "end": "2898640"
  },
  {
    "text": "what possible language you have you have assembly which is 100% precise as consistent as it gets yeah consistent",
    "start": "2898640",
    "end": "2904680"
  },
  {
    "text": "and actually in some ways but it's just very simple operations that can only do",
    "start": "2904680",
    "end": "2910240"
  },
  {
    "text": "a single thing in a very defined way so on that front I think that this is actually going to be a very very good",
    "start": "2910240",
    "end": "2915839"
  },
  {
    "text": "thing for the AIS whenever they are ready so there's already good tools out there that just take binary and",
    "start": "2915839",
    "end": "2921440"
  },
  {
    "text": "translate that into Assembly not 100% but a very good coverage and assembly is",
    "start": "2921440",
    "end": "2927920"
  },
  {
    "text": "consistent enough so that means that some Ida Pro plug-in that uses AI must",
    "start": "2927920",
    "end": "2933599"
  },
  {
    "text": "be developed as we speak to say like here's an assembly input please translate that to go code for me well",
    "start": "2933599",
    "end": "2940319"
  },
  {
    "text": "it's a good question because you would think that someone would be working on this but when you look at the market for",
    "start": "2940319",
    "end": "2946880"
  },
  {
    "text": "reverse engineering tool it's actually quite small you have hex-rays the creators of IA Pro and hex-rays are kind",
    "start": "2946880",
    "end": "2954240"
  },
  {
    "text": "of a old school company like they product is their product is amazing but",
    "start": "2954240",
    "end": "2959319"
  },
  {
    "text": "like they've been they haven't really tried to create any form of disruption",
    "start": "2959319",
    "end": "2964640"
  },
  {
    "text": "in the past 20 years now they have been doing lots of improvements to their products but I think part of it is only because they have been challenged by",
    "start": "2964640",
    "end": "2971400"
  },
  {
    "text": "gidra their open source competitor right it's kind of my opinion that well let's",
    "start": "2971400",
    "end": "2977280"
  },
  {
    "text": "make this my unpopular opinion if you want to but it's kind of my opinion that if gidra had never appeared then Ida Pro",
    "start": "2977280",
    "end": "2984160"
  },
  {
    "text": "would basically have stayed kind of the same like for the next decade or so because the developers had kind of no",
    "start": "2984160",
    "end": "2990160"
  },
  {
    "text": "incentive to make it significantly better because just they had no competition there the way that the",
    "start": "2990160",
    "end": "2996040"
  },
  {
    "text": "compiler is working at the moment as far as I understand is purely through algorithmic means and they do not use",
    "start": "2996040",
    "end": "3002559"
  },
  {
    "text": "any form of machine learning there is no AI applied to their you know",
    "start": "3002559",
    "end": "3008160"
  },
  {
    "text": "decompilation process maybe they have started working on this but as a company",
    "start": "3008160",
    "end": "3014720"
  },
  {
    "text": "and maybe I'm totally mistaken about this I don't work there but hexr doesn't strike me as a company that would be",
    "start": "3014720",
    "end": "3019799"
  },
  {
    "text": "doing groundbreaking R&D that would maybe prepare for the the next generation of de compilers I think they",
    "start": "3019799",
    "end": "3026520"
  },
  {
    "text": "would rather make incremental changes on their existing product to make it slightly better year after year I think",
    "start": "3026520",
    "end": "3032880"
  },
  {
    "text": "gidra which has a decompiler as well is open source and I think this decompiler",
    "start": "3032880",
    "end": "3037920"
  },
  {
    "text": "is doing pretty well too but I don't think it uses AI in any shape or form",
    "start": "3037920",
    "end": "3043599"
  },
  {
    "text": "either and I'm not aware of any plans to like to start working on this probably",
    "start": "3043599",
    "end": "3050079"
  },
  {
    "text": "developing some AI product focused on reverse engineering will require some very spefic specific AI knowledge and uh",
    "start": "3050079",
    "end": "3058359"
  },
  {
    "text": "my feeling is I don't know any everyone in the security field but I tend to like my perception of this is that we have",
    "start": "3058359",
    "end": "3064839"
  },
  {
    "text": "people that are extremely focused and extremely talented and skilled in the specific field of cyber security that",
    "start": "3064839",
    "end": "3070839"
  },
  {
    "text": "they are working on but I cannot recall anyone that I've met that was both a",
    "start": "3070839",
    "end": "3076559"
  },
  {
    "text": "great researcher or a great reverse engineer a great pentester and a very qualified data scientist as well or",
    "start": "3076559",
    "end": "3082960"
  },
  {
    "text": "someone that would be able to tune a machine learning algorithm that would like change our lives forever so maybe someone is",
    "start": "3082960",
    "end": "3090359"
  },
  {
    "text": "working on this somewhere but if it's the case then I'm not aware of it and like I think if it were public or if it",
    "start": "3090359",
    "end": "3098520"
  },
  {
    "text": "was out there I think I would know about it maybe maybe I don't but overall if there was this big project about to be",
    "start": "3098520",
    "end": "3105040"
  },
  {
    "text": "released I want to believe I would have heard about it but I do still hope that some company somewhere probably in",
    "start": "3105040",
    "end": "3110839"
  },
  {
    "text": "Israel is working on this in a secret lab and that eventually they're going to take the market by by storm and make uh",
    "start": "3110839",
    "end": "3117480"
  },
  {
    "text": "my job a lot easier yeah another idea for the followers who are tuning in so",
    "start": "3117480",
    "end": "3123680"
  },
  {
    "text": "in addition to an AI that translates from assembly to go it would be",
    "start": "3123680",
    "end": "3130559"
  },
  {
    "text": "personally interesting for me to have some AI that says this malware is written in the style of and what I mean",
    "start": "3130559",
    "end": "3137400"
  },
  {
    "text": "by that is that already now you can write if you go to codex and other tools like that you can say write a go program",
    "start": "3137400",
    "end": "3144160"
  },
  {
    "text": "that has this and that this and do it in the style of and if you mention a GitHub",
    "start": "3144160",
    "end": "3149240"
  },
  {
    "text": "handle of somebody who is a known developer has lots of stars or some other big presents and their type of",
    "start": "3149240",
    "end": "3157880"
  },
  {
    "text": "code has a flavor which is maybe less common in go because it's all structured you will get their style of code So",
    "start": "3157880",
    "end": "3165000"
  },
  {
    "text": "eventually a next step to this magical plugin would be in whose style is the",
    "start": "3165000",
    "end": "3170520"
  },
  {
    "text": "smile Weare written this will be also interesting and then all those language teachers out there will know oh well I",
    "start": "3170520",
    "end": "3177760"
  },
  {
    "text": "thought that hacker yeah that's a very very nice idea and actually there have",
    "start": "3177760",
    "end": "3183079"
  },
  {
    "text": "been maybe not rumors but um open research projects working exactly on",
    "start": "3183079",
    "end": "3188720"
  },
  {
    "text": "this for probably decades in the field I think I recall a CCC presentation from",
    "start": "3188720",
    "end": "3196440"
  },
  {
    "text": "maybe 2010 or 2012 one of those years and basically people were already",
    "start": "3196440",
    "end": "3202920"
  },
  {
    "text": "working on obtaining from open source repositories like basically downloading",
    "start": "3202920",
    "end": "3207960"
  },
  {
    "text": "GitHub and trying to extract maybe some penmanship characteristics from every",
    "start": "3207960",
    "end": "3213839"
  },
  {
    "text": "single developer and they were hoping that they would be able to take any program in the future and be able to",
    "start": "3213839",
    "end": "3221480"
  },
  {
    "text": "tell you that this might probably be the developer that uh created this",
    "start": "3221480",
    "end": "3226520"
  },
  {
    "text": "executable now it's been 10 years 15 years I'm not sure I haven't heard about",
    "start": "3226520",
    "end": "3233240"
  },
  {
    "text": "this for a while so maybe this this either didn't work as well as they expected or this was actually absorbed",
    "start": "3233240",
    "end": "3239200"
  },
  {
    "text": "into some intelligence service somewhere because there are obvious very obvious intelligence applications there that I",
    "start": "3239200",
    "end": "3245799"
  },
  {
    "text": "think would uh like those types of services they would be they would love to have such a capability because they",
    "start": "3245799",
    "end": "3251359"
  },
  {
    "text": "would be able to identify malware authors they wouldn't need really to have the burden of proof the way that",
    "start": "3251359",
    "end": "3257319"
  },
  {
    "text": "you know police forces have like they would just be able to know what kind of guy is uh like or what who the guy",
    "start": "3257319",
    "end": "3263119"
  },
  {
    "text": "behind some malware is and just do their usual parallel construction stuff so",
    "start": "3263119",
    "end": "3268480"
  },
  {
    "text": "this is something we know they want and this is something that we also know they spent money on and I remember that some",
    "start": "3268480",
    "end": "3273760"
  },
  {
    "text": "universities were actually working on those types of projects for research not for intelligence but you know kind it's",
    "start": "3273760",
    "end": "3279040"
  },
  {
    "text": "kind of those worlds they tend to communicate with each other anyway when there are applications if this came to fruition",
    "start": "3279040",
    "end": "3287400"
  },
  {
    "text": "then this did so in secret the way that they used to be working on this was",
    "start": "3287400",
    "end": "3292440"
  },
  {
    "text": "again algorithmic they were trying to extract their characteristics and they were not using those black AI",
    "start": "3292440",
    "end": "3298359"
  },
  {
    "text": "capabilities that we have now maybe this is a new Avenue of research for those applications maybe we'll know in the",
    "start": "3298359",
    "end": "3304880"
  },
  {
    "text": "future but as far as I know this is like this is an existing problem that people are trying to solve and I haven't seen",
    "start": "3304880",
    "end": "3312480"
  },
  {
    "text": "any signs that they have although it's not exactly sure that I would this episode took very interesting turns like",
    "start": "3312480",
    "end": "3318760"
  },
  {
    "text": "new ideas for tools and projects and whatnot and uh remember where you heard this first yeah I was not that yeah but",
    "start": "3318760",
    "end": "3326520"
  },
  {
    "text": "that's very cool that's really inspiring to speak with you Ian thank you for this hour of the conversation of course as",
    "start": "3326520",
    "end": "3332400"
  },
  {
    "text": "the previous episode it also ended with me having lots of open questions please consider joining me again next year for",
    "start": "3332400",
    "end": "3339000"
  },
  {
    "text": "one more episode or 10 more of course eventually and I think it will be",
    "start": "3339000",
    "end": "3344839"
  },
  {
    "text": "pretty soon we're going to expand like the whole knowledge that I have on go language right if I have to come back",
    "start": "3344839",
    "end": "3350240"
  },
  {
    "text": "then at this point I will really have to look into the language more and maybe try to come with actual research that I",
    "start": "3350240",
    "end": "3357000"
  },
  {
    "text": "can share with you because otherwise I don't want this conversation to be boring but I'll do my best well next time we'll talk about generics maybe",
    "start": "3357000",
    "end": "3363760"
  },
  {
    "text": "okay see how that go proposal goes and I'll work on that yeah and instead of",
    "start": "3363760",
    "end": "3368960"
  },
  {
    "text": "unpopular opinion we have provided two unicorn ideas so you welcome",
    "start": "3368960",
    "end": "3374400"
  },
  {
    "text": "everyone and actually I can pretty much give you my personal guarantee that if anyone in the audience actually",
    "start": "3374400",
    "end": "3379520"
  },
  {
    "text": "implements one of those two things that they're going to be extremely rich so there you go that's almost as good as",
    "start": "3379520",
    "end": "3385640"
  },
  {
    "text": "being on the rank of the most unpopular opinion yeah thanks everyone for joining thank",
    "start": "3385640",
    "end": "3391839"
  },
  {
    "text": "you very much Ian thank you and was happy being here happy like always a pleasure speaking to you and see you",
    "start": "3391839",
    "end": "3397880"
  },
  {
    "text": "next time that is our show for this week",
    "start": "3397880",
    "end": "3405359"
  },
  {
    "text": "thanks for listening did you know we've added a super brief Monday news Edition",
    "start": "3405359",
    "end": "3410760"
  },
  {
    "text": "to the change log to complement our awesome long form interviews that we publish each Friday give it a listen if",
    "start": "3410760",
    "end": "3417640"
  },
  {
    "text": "you haven't yet the software world moves fast keep up with Chang log news check",
    "start": "3417640",
    "end": "3423079"
  },
  {
    "text": "it out at changel log. FM thanks once again to our partners fastly and fly.io",
    "start": "3423079",
    "end": "3428760"
  },
  {
    "text": "for helping make go time possible to the mysterious brake master cylinder for keeping our beat Supply on swole and to",
    "start": "3428760",
    "end": "3434839"
  },
  {
    "text": "you for being part of the go time Community connect with us at gotime at Chang log. social next time on go time",
    "start": "3434839",
    "end": "3441799"
  },
  {
    "text": "Matt gathers an awesome panel to discuss how to make go code more efficient through Modern observability practices",
    "start": "3441799",
    "end": "3448640"
  },
  {
    "text": "stay tuned for that we'll have that episode all ready for you next",
    "start": "3448640",
    "end": "3453960"
  },
  {
    "text": "week",
    "start": "3463520",
    "end": "3466520"
  }
]