[
  {
    "text": "bandwith for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at change log because of rbar check them out at roar.com and we're hosted on linode",
    "start": "5520",
    "end": "11480"
  },
  {
    "text": "cloud servers head to lin.com changelog this episode is brought to you",
    "start": "11480",
    "end": "17320"
  },
  {
    "text": "by lenoe our Cloud Server of choice it is so easy to get started with lenoe servers start at just five bucks a month",
    "start": "17320",
    "end": "23599"
  },
  {
    "text": "we host change log on Lino Cloud servers and we love it we get great 24/7 support Zeus like Powers with",
    "start": "23599",
    "end": "30519"
  },
  {
    "text": "ssds a super fast 40 GB per second Network and Incredibly fast CPUs for",
    "start": "30519",
    "end": "36360"
  },
  {
    "text": "processing and we trust L because they keep it fast they keep it simple check them out at lin.com",
    "start": "36360",
    "end": "44160"
  },
  {
    "text": "[Music] changelog welcome to go time a podcast",
    "start": "53000",
    "end": "59480"
  },
  {
    "text": "featuring diverse panel and special guests discussing Cloud infrastructure distributed systems microservices",
    "start": "59480",
    "end": "65840"
  },
  {
    "text": "kubernetes Docker oh and also go we record live every Tuesday at 300 p.m.",
    "start": "65840",
    "end": "71240"
  },
  {
    "text": "Eastern no Pacific join the community like with us in real time during the show in the gotime FM channel in go for",
    "start": "71240",
    "end": "77280"
  },
  {
    "text": "slack follow us on Twitter we're at gotime FM listen live at change.com or",
    "start": "77280",
    "end": "82880"
  },
  {
    "text": "subscribe at ch.com gotime and now on to the",
    "start": "82880",
    "end": "88600"
  },
  {
    "text": "show hello and welcome to go Time the show where a diverse panel and special",
    "start": "88840",
    "end": "94240"
  },
  {
    "text": "guests discuss all things go is known for including Cloud infrastructure distributed systems microservices and",
    "start": "94240",
    "end": "100399"
  },
  {
    "text": "especially today serverless my name is Johnny Boro and joining me today is a",
    "start": "100399",
    "end": "105880"
  },
  {
    "text": "stellar cast of characters as Matt ryer usually puts it including Matt ryer himself say hello Matt",
    "start": "105880",
    "end": "111880"
  },
  {
    "text": "hello making her triumphant return to our panel is Jana B dogen AKA jbd have",
    "start": "111880",
    "end": "118159"
  },
  {
    "text": "you been Jana yeah good how are are you doing well doing well I hope you're ready for this because this is going to",
    "start": "118159",
    "end": "123399"
  },
  {
    "text": "be good last but certainly not least is our special guest in Serv coros Stevenson",
    "start": "123399",
    "end": "131120"
  },
  {
    "text": "jeanpierre Stevenson how are you good good good for those of you paying close",
    "start": "131120",
    "end": "136800"
  },
  {
    "text": "attention uh Stevenson and I are both originally from Haiti so that's that's a little you know Sak bule thing right",
    "start": "136800",
    "end": "143160"
  },
  {
    "text": "there yeah so today's show is a special one it's kind of near and dear to my heart um because I am a fan of uh using",
    "start": "143160",
    "end": "151879"
  },
  {
    "text": "um what has been has become known as serverless um Technologies we'll get into what really that means and uh why",
    "start": "151879",
    "end": "159920"
  },
  {
    "text": "we call it serverless although that's more of a marketing term but we're going to get into that um so let's start with",
    "start": "159920",
    "end": "165800"
  },
  {
    "text": "some ground setting right what is serverless technology what what is what",
    "start": "165800",
    "end": "171920"
  },
  {
    "text": "did that term come from what is what is it really trying to sort of relay we know it's a marketing term but what is",
    "start": "171920",
    "end": "178080"
  },
  {
    "text": "really sort of the the intent right when you using St Technologies why would you sort of reach off for it what is it like",
    "start": "178080",
    "end": "185000"
  },
  {
    "text": "that's that's with some ground setting here so from my point of view it's just about not having to worry about the",
    "start": "185000",
    "end": "191720"
  },
  {
    "text": "deployment too much so I use Google app engine a lot the standard environment",
    "start": "191720",
    "end": "197680"
  },
  {
    "text": "and I like that in fact that was the reason I first got into go in the first place because to use it you had to either write Java or you had to write",
    "start": "197680",
    "end": "204560"
  },
  {
    "text": "Python and I didn't know either of those and there was this other little language it just said go with little experimental",
    "start": "204560",
    "end": "210799"
  },
  {
    "text": "badge on it and I'm like you know like a magpie to that kind of stuff I was very interested and that's why I first",
    "start": "210799",
    "end": "217400"
  },
  {
    "text": "discovered go and the promise of app engine is you write your go code and you give that code to Google and then they",
    "start": "217400",
    "end": "224400"
  },
  {
    "text": "will make sure they can run it when when it's needed and that as a developer is",
    "start": "224400",
    "end": "230239"
  },
  {
    "text": "nice because it was never an area for me that I was particularly interested or particularly well skilled at so it was",
    "start": "230239",
    "end": "239000"
  },
  {
    "text": "nice at least the promise is nice for me from a developer's point of view for me",
    "start": "239000",
    "end": "244680"
  },
  {
    "text": "uh serverless is a I guess a combination of two things so for me it's a lot of event driven work so I consider it",
    "start": "244680",
    "end": "251400"
  },
  {
    "text": "serverless when it's driven by an action being taken as opposed to constantly just being up and waiting for some kind",
    "start": "251400",
    "end": "257479"
  },
  {
    "text": "of request to come in but then with um that's the compute side but then you have like even serverless Technologies",
    "start": "257479",
    "end": "262880"
  },
  {
    "text": "coming out on data storage right like things like um RDS server list or Aurora server list so you can have compute and",
    "start": "262880",
    "end": "269120"
  },
  {
    "text": "it goes a Matt's definition there where you don't have to worry about the underlying engine you don't have to worry about configuration you know it's",
    "start": "269120",
    "end": "275560"
  },
  {
    "text": "just there and ready to kind of scale when you need it to be for me it's kind of like you know I think it's similar to",
    "start": "275560",
    "end": "281440"
  },
  {
    "text": "what Matt is saying it's more of like I don't have to deal with infrastructure that much it's more of like an abstract",
    "start": "281440",
    "end": "286520"
  },
  {
    "text": "layer on top and like some of the things are considered just taken care you know",
    "start": "286520",
    "end": "291759"
  },
  {
    "text": "of on behalf of me and I think what is the other important aspect is like it's",
    "start": "291759",
    "end": "297000"
  },
  {
    "text": "more of like a pay as you go model so you don't don't use it scales down to zero you pay as you go that's what the",
    "start": "297000",
    "end": "304000"
  },
  {
    "text": "you know definition of cloud should be to be honest but you know this is a really tough topic because I think",
    "start": "304000",
    "end": "310160"
  },
  {
    "text": "serverless um became just kind of this like umbrella term and it I think means more abstracting but like everybody's",
    "start": "310160",
    "end": "317240"
  },
  {
    "text": "you know there are so many different layers of abstractions and everybody is s like each higher level is actually",
    "start": "317240",
    "end": "324360"
  },
  {
    "text": "more serverless than the you know the lower layer levels so that's why I think it's it's good to say that like the less",
    "start": "324360",
    "end": "330479"
  },
  {
    "text": "you care about infrastructure operating and maintaining the infrastructure and pay as you go and if it scales down to",
    "start": "330479",
    "end": "336440"
  },
  {
    "text": "zero that's so ress to me so the the Common Thread here is basically not",
    "start": "336440",
    "end": "341479"
  },
  {
    "text": "having to worry about managing the infrastructure that is running your",
    "start": "341479",
    "end": "346639"
  },
  {
    "text": "functionality right that's that's the be it you know compute be it uh a storage",
    "start": "346639",
    "end": "352199"
  },
  {
    "text": "be it sort of some sort of integration with with the basically the event sourcing thing for example like you know in the case of of um AWS where they have",
    "start": "352199",
    "end": "359280"
  },
  {
    "text": "different things that can trigger um functions and whatnot you don't have to you as the developer don't have to worry",
    "start": "359280",
    "end": "365319"
  },
  {
    "text": "about sort of the plumbing the underly infrastructure you don't have to provision instances you don't have to you know you don't have to do any of",
    "start": "365319",
    "end": "370880"
  },
  {
    "text": "that stuff yourself basically you kind of um really sort of stitching together or linking together like different Lego",
    "start": "370880",
    "end": "376840"
  },
  {
    "text": "blocks that do certain things that react to certain things whenever they happen with your environment yeah uh I think",
    "start": "376840",
    "end": "382440"
  },
  {
    "text": "like uh you know the promises just care about the business logic and we will take care of everything yourself and",
    "start": "382440",
    "end": "388280"
  },
  {
    "text": "these are like the fundamental blocks you can use so when I first started to get into into you know the quotequote",
    "start": "388280",
    "end": "393880"
  },
  {
    "text": "Serv list and that term means different things to different people there's even a framework called servess and and that's really not what we're talking",
    "start": "393880",
    "end": "399800"
  },
  {
    "text": "about here we're talking about sort of the the concept right no no one technology no one framework no one",
    "start": "399800",
    "end": "404960"
  },
  {
    "text": "product when I first started sort of exploring it the I kept seeing these um",
    "start": "404960",
    "end": "410280"
  },
  {
    "text": "use cases around upload an image to S3 and then something creates a thumbnail right and almost like trivial use cases",
    "start": "410280",
    "end": "418400"
  },
  {
    "text": "and I'm like ah this this stuff is like way easy like way super easy I mean when you get into it really we know it's",
    "start": "418400",
    "end": "424759"
  },
  {
    "text": "never that easy and we're going to get into sort of all all the things that you really need to be doing when you're doing servess U um kind of development",
    "start": "424759",
    "end": "431280"
  },
  {
    "text": "and that style of development but in terms of use cases right like what are some of some some of the cases where",
    "start": "431280",
    "end": "437599"
  },
  {
    "text": "you've used Serv and it was a good fit and perhaps some cases where you know you know what U maybe having a Long Live",
    "start": "437599",
    "end": "442759"
  },
  {
    "text": "service instead was a better approach what are what are some examples we can throw out there so um use cases for me",
    "start": "442759",
    "end": "447960"
  },
  {
    "text": "have always been like very small microservices things that aren't even worth spinning up infrastructure to run",
    "start": "447960",
    "end": "454080"
  },
  {
    "text": "um it could be maybe like a a 50 line kind of script that does some specific functionality also like I mentioned",
    "start": "454080",
    "end": "460520"
  },
  {
    "text": "earlier the event driven stuff things that are dependent on some event happening before it fires off another",
    "start": "460520",
    "end": "465560"
  },
  {
    "text": "great use case has been as a just general cron replacement you always had the issue with having highly available",
    "start": "465560",
    "end": "470879"
  },
  {
    "text": "Kon and having multiple servers with the same schedule not stomping over each other you would have to implement weird",
    "start": "470879",
    "end": "475960"
  },
  {
    "text": "kind of locking mechanisms but by having serverless functions you know you could depend on the higher level kind of timer",
    "start": "475960",
    "end": "481199"
  },
  {
    "text": "from the cloud provider and you could have a single kind of cron source and for not so good use cases are anywhere",
    "start": "481199",
    "end": "487319"
  },
  {
    "text": "that I've had to maintain state or maintain some kind of cash for Speed and things like that serverless is not",
    "start": "487319",
    "end": "492560"
  },
  {
    "text": "conducive to state is it actually forces you to be very stateless unless you want to go to some Network kind of storage um",
    "start": "492560",
    "end": "498840"
  },
  {
    "text": "so any of those use cases where long-term State on the app tier is important servus hasn't been good for me",
    "start": "498840",
    "end": "504680"
  },
  {
    "text": "yeah Stephen you mentioned a few times events and that really these these functions in response to events what",
    "start": "504680",
    "end": "511479"
  },
  {
    "text": "sorts of things are events what what kinds of things that can happen what what sort of examples are we talking",
    "start": "511479",
    "end": "517479"
  },
  {
    "text": "about so when serverless kind of first started a lot of the use cases were just pure HTTP request and response style",
    "start": "517479",
    "end": "524519"
  },
  {
    "text": "Cycles but then you had these Cloud providers kind of plugging in the ability to integrate with their other",
    "start": "524519",
    "end": "530040"
  },
  {
    "text": "services so for example for Johnny's use case around S3 upload and things like that now you have events coming directly",
    "start": "530040",
    "end": "536399"
  },
  {
    "text": "from S3 to tell you hey something has happened in this bucket an upload has happened and delete has happened you can now as secretly take action against it",
    "start": "536399",
    "end": "543480"
  },
  {
    "text": "you have the same thing against any other type of source where it's telling you it's pushing that kind of event to",
    "start": "543480",
    "end": "549040"
  },
  {
    "text": "you it's pushing that payload to you instead of you going out and polling and finding out when things happen you're getting a payload that's telling you",
    "start": "549040",
    "end": "554720"
  },
  {
    "text": "what's happened and it's in a it's in a schema it's in a shape that you understand from your function and you take action against that and it's it",
    "start": "554720",
    "end": "561560"
  },
  {
    "text": "makes it makes life a lot easier and it becomes that glue layer like Johnny described where these services are actively telling you what they're doing",
    "start": "561560",
    "end": "567600"
  },
  {
    "text": "and then you respond to that yeah if you think about from a cloud you know provider's perspective it's almost",
    "start": "567600",
    "end": "572959"
  },
  {
    "text": "impossible not to like you know figure out like server is is so fundamentally",
    "start": "572959",
    "end": "578160"
  },
  {
    "text": "important because there that's the only protocol that you can talk like you need to provide some arbitrary execution",
    "start": "578160",
    "end": "583680"
  },
  {
    "text": "environment for some events because there's no way you can talk to your cloud provider but they cannot talk to you so it's not surprising that it",
    "start": "583680",
    "end": "590920"
  },
  {
    "text": "became so fundamentally useful because that's how they talk to you back yeah so",
    "start": "590920",
    "end": "596040"
  },
  {
    "text": "when in in the app engine basically especially now now in the latest version of app engine for standard environment",
    "start": "596040",
    "end": "602959"
  },
  {
    "text": "you basically write your go program as a normal program it's actually package Main and you use the handlers use",
    "start": "602959",
    "end": "609519"
  },
  {
    "text": "whatever you're going to do and then you ship that to app engine and then I think",
    "start": "609519",
    "end": "615240"
  },
  {
    "text": "it scales to zero so there's nothing running and then the first HTTP request spins up the instance it spins up your",
    "start": "615240",
    "end": "622480"
  },
  {
    "text": "program and the in theory then you can start kind of replying to those requests",
    "start": "622480",
    "end": "628519"
  },
  {
    "text": "so I I've tended to use it in that way of really still just a web service um",
    "start": "628519",
    "end": "635800"
  },
  {
    "text": "that I'm putting up there and it might be serving a website and Associated services but usually it's all for me",
    "start": "635800",
    "end": "642040"
  },
  {
    "text": "been HTTP driven so a request comes in we spin up the instance and deal with it",
    "start": "642040",
    "end": "648000"
  },
  {
    "text": "and then that instance at some point will die and actually if that's how you think about it and you have to remember",
    "start": "648000",
    "end": "654560"
  },
  {
    "text": "that one instance you know requests from one user might go to one instance the",
    "start": "654560",
    "end": "660120"
  },
  {
    "text": "next request from the same user might go to a different instance so if you imagine this sort of load balanced",
    "start": "660120",
    "end": "665880"
  },
  {
    "text": "environment like that that has quite a big KnockOn effect to certain design decisions about what you build as you",
    "start": "665880",
    "end": "672760"
  },
  {
    "text": "mentioned Stephen which we can get on to later yeah but for me it's been really",
    "start": "672760",
    "end": "678240"
  },
  {
    "text": "useful to be able to build a website or a web service or something and just put",
    "start": "678240",
    "end": "684240"
  },
  {
    "text": "it into app engine and not worry about it and it sort of just keeps working if",
    "start": "684240",
    "end": "689519"
  },
  {
    "text": "nobody uses it it's fine it doesn't cost me anything I have one gopher eyes me",
    "start": "689519",
    "end": "695160"
  },
  {
    "text": "which which is the this that service where Gophers can create gopher ised versions of themselves using Ashley",
    "start": "695160",
    "end": "701000"
  },
  {
    "text": "McNamara's artwork that's an app engine thing and um that one does actually get",
    "start": "701000",
    "end": "707240"
  },
  {
    "text": "some sometimes gets quite a lot of activity and I'll pass over my free quota into having to pay for it I think",
    "start": "707240",
    "end": "714079"
  },
  {
    "text": "that's a very good point that you made around treating serverless functions like you would web services that you",
    "start": "714079",
    "end": "720360"
  },
  {
    "text": "usually write where you have stateless computes here where you don't know for sure where requests are going to get routed and you don't maintain State on",
    "start": "720360",
    "end": "727279"
  },
  {
    "text": "dis right you always externalize the state because you don't know what you're getting it's a very good mindset to keep with serverless because that's very much",
    "start": "727279",
    "end": "733600"
  },
  {
    "text": "the kind of use case you get and even when you're not doing something that's directly HTTP those events kind of come",
    "start": "733600",
    "end": "739240"
  },
  {
    "text": "in in that same style where you get an event you get a request and then you have to do some kind of response you have to take some sort of action against",
    "start": "739240",
    "end": "745519"
  },
  {
    "text": "it so it more closely aligns with that um use case right and my uses one of my favorite uses for using sort of the",
    "start": "745519",
    "end": "752680"
  },
  {
    "text": "servus model is being able to to sort of uh react to things coming off of a queue",
    "start": "752680",
    "end": "758480"
  },
  {
    "text": "right so so I've had I've had projects where um because some of the um",
    "start": "758480",
    "end": "764320"
  },
  {
    "text": "operations didn't need to be synchronous right they didn't need basically you know it's not like you had a user sitting there clicking something and",
    "start": "764320",
    "end": "770000"
  },
  {
    "text": "waiting for something some some sort of response to come back like the the sort of the traditional HTTP model you could",
    "start": "770000",
    "end": "775160"
  },
  {
    "text": "basically trigger something asynchronously right maybe a user performed some action um and then you",
    "start": "775160",
    "end": "781639"
  },
  {
    "text": "you drop some some sort of data onto some sort of payload onto a queue and something somewhere is going to respond",
    "start": "781639",
    "end": "787720"
  },
  {
    "text": "to it right so that that allowed some teams really um like frontend team that",
    "start": "787720",
    "end": "792800"
  },
  {
    "text": "was responsible for so for the user interface the back end that captures these events and then basically dropping",
    "start": "792800",
    "end": "798399"
  },
  {
    "text": "off him to a que that another team basically was responsible for writing functionality that basically picked up and processed it right and then they had",
    "start": "798399",
    "end": "804519"
  },
  {
    "text": "that that sort of asynchronous model worked very very well um both in terms of of sort of decoupling the concerns",
    "start": "804519",
    "end": "810560"
  },
  {
    "text": "right between between what what the the front end team needed to do and what the back end team needed to do but also in",
    "start": "810560",
    "end": "815839"
  },
  {
    "text": "terms of sort of um showing like a like a like a very good example of one of the types of event sources that you can have",
    "start": "815839",
    "end": "821920"
  },
  {
    "text": "right it it provides a lot of different ways that you can trigger business U functionality right when that is that",
    "start": "821920",
    "end": "829399"
  },
  {
    "text": "goes beyond just the the traditional HTP model right but one of the things that we ran into and and there's been other",
    "start": "829399",
    "end": "836000"
  },
  {
    "text": "folks who have come out um with through blog post and whatnot and sort of notice the same thing as well we talk about how",
    "start": "836000",
    "end": "841720"
  },
  {
    "text": "sort of the costing model for serverless you know be it Lambda or Cloud functions and whatnot because you're not paying",
    "start": "841720",
    "end": "847360"
  },
  {
    "text": "for Idol I think there's this sort of a misconception that because so much",
    "start": "847360",
    "end": "852600"
  },
  {
    "text": "around sort of the the marketing so much of it is focused on well you're going to have so much savings right because you",
    "start": "852600",
    "end": "858959"
  },
  {
    "text": "don't have something that's sitting there and just waiting for things whether it's being used or not you're going to have so much savings right that",
    "start": "858959",
    "end": "864320"
  },
  {
    "text": "you can just go Haywire go crazy with with with you know with the serverless functions and whatnot but one of the",
    "start": "864320",
    "end": "869519"
  },
  {
    "text": "things that we we quickly realized was that if you are going to sort of adopt the servess way which kind of forces you",
    "start": "869519",
    "end": "875920"
  },
  {
    "text": "to think a certain way right you no longer are dealing in you're no longer in the L of monolith right where you",
    "start": "875920",
    "end": "881880"
  },
  {
    "text": "have just one big code base where you can see everything happening uh if you start going down that pathway like well I have to sort of uh um make my",
    "start": "881880",
    "end": "888560"
  },
  {
    "text": "functions very very small to do one thing and one thing only and then now you you're firing off this one small",
    "start": "888560",
    "end": "895519"
  },
  {
    "text": "function that does you know that one thing and you're const conly right I'm firing that off that could end up",
    "start": "895519",
    "end": "901600"
  },
  {
    "text": "actually costing you more depending on what it is that you're trying to do so one there was one very good example",
    "start": "901600",
    "end": "907880"
  },
  {
    "text": "block post I remember that that came out a few months ago where the the the unit of work that was being fired off right",
    "start": "907880",
    "end": "915279"
  },
  {
    "text": "one per execution of a of a Lambda function I think they were they dealing with ads Lambda basically it ended up",
    "start": "915279",
    "end": "921600"
  },
  {
    "text": "costing them more rather than say leveraging Go's concurrency Primitives right basically using go routines for",
    "start": "921600",
    "end": "927959"
  },
  {
    "text": "example whereby in in one execution of the Lambda you could actually have",
    "start": "927959",
    "end": "933079"
  },
  {
    "text": "multiple go routines doing like a work in batch right that way you you still have one lmda execution right but you're",
    "start": "933079",
    "end": "940399"
  },
  {
    "text": "doing a lot more work in there be it all the work of was was of the same kind it's the same type of work that you",
    "start": "940399",
    "end": "946720"
  },
  {
    "text": "doing so you're not violating that that you know should do one thing one thing what kind of thing you're just batching the amount of stuff you're doing in one",
    "start": "946720",
    "end": "952839"
  },
  {
    "text": "execution so that end up costing him a lot more right this is one of the things where if you just drink the Kool-Aid if",
    "start": "952839",
    "end": "958720"
  },
  {
    "text": "you just buy it off the shelf just like that and you basically start making everything every time you want to use a piece of functionality you just execute",
    "start": "958720",
    "end": "964120"
  },
  {
    "text": "a Lambda you might find yourself in some hot water right so I'm I'm wondering like what are some of the gachas right",
    "start": "964120",
    "end": "969880"
  },
  {
    "text": "that you yourselves have experienced like along those terms I personally was thinking that like Lambda is like CGI",
    "start": "969880",
    "end": "976759"
  },
  {
    "text": "model you knowed you know in the century again it just said that like all the",
    "start": "976759",
    "end": "982959"
  },
  {
    "text": "optimizations is just basically like um the cold start and like the start up",
    "start": "982959",
    "end": "988880"
  },
  {
    "text": "time is actually like really fundamentally important if you are promising some you know cost advantages",
    "start": "988880",
    "end": "995720"
  },
  {
    "text": "and um one of the things that I really like about like Google Cloud run decided not to go uh deployment per uh function",
    "start": "995720",
    "end": "1003319"
  },
  {
    "text": "it's more of like this like you're handing off this server a long running process which still has a you know",
    "start": "1003319",
    "end": "1010199"
  },
  {
    "text": "limited execution environment and like they can kill you know the server in 15 minutes or whatever but at least like",
    "start": "1010199",
    "end": "1016319"
  },
  {
    "text": "you can bundle a bunch of things so when you you're bootstrapping uh the server uh for the first time um you know at a",
    "start": "1016319",
    "end": "1023240"
  },
  {
    "text": "cold start it actually like uh can serve like multiple you know end points at",
    "start": "1023240",
    "end": "1028839"
  },
  {
    "text": "least but then um if some of the endpoints are never going to be used is it in terms of like memory and like CP",
    "start": "1028839",
    "end": "1035640"
  },
  {
    "text": "usage is it some extra cost right like there's always this like pros and cons but I like the fact that like they're",
    "start": "1035640",
    "end": "1042199"
  },
  {
    "text": "giv you uh the option to bundle things together so if you believe that like some endpoints some functions or let's",
    "start": "1042199",
    "end": "1048799"
  },
  {
    "text": "say some functions are going to be called really frequently you can bundle them as like one server and you know",
    "start": "1048799",
    "end": "1054640"
  },
  {
    "text": "each time you bootstrap it's just going to be the one bootstrap serving three four end points yeah I think Johnny made",
    "start": "1054640",
    "end": "1060080"
  },
  {
    "text": "a very good point in terms of it's not just a kind of catchall Silver Bullet so I think in the same way that operators",
    "start": "1060080",
    "end": "1066640"
  },
  {
    "text": "would traditionally decide on like instant size they would use and things like that they have to consider their workload if your workload is 24/7",
    "start": "1066640",
    "end": "1073640"
  },
  {
    "text": "throughput always you know by the minute you're doing a lot of throughput then serverless may not be the right solution",
    "start": "1073640",
    "end": "1079120"
  },
  {
    "text": "because having a constantly on server of course will will help with that and even having like cash and amateu there you",
    "start": "1079120",
    "end": "1085880"
  },
  {
    "text": "get to you know trade that off but if you have very kind of spotty workload and you need you need a good amount of scale and ability to run things in",
    "start": "1085880",
    "end": "1092240"
  },
  {
    "text": "parallel then yeah serverless is beneficial but you need to kind of make sure that you're doing that math and",
    "start": "1092240",
    "end": "1098120"
  },
  {
    "text": "understanding how much through pit you're going to need from a system and even compare against you know just a regular compute instance and see if you",
    "start": "1098120",
    "end": "1104760"
  },
  {
    "text": "could determine what the best approach would be very good point very good point so along those lines let's talk about",
    "start": "1104760",
    "end": "1110480"
  },
  {
    "text": "sort of the the we've been talking about how how different uh Cloud providers have slightly different solutions um and",
    "start": "1110480",
    "end": "1116799"
  },
  {
    "text": "there's some commonality across all of them but you know you're starting to see some deviations with with uh Cloud run",
    "start": "1116799",
    "end": "1121919"
  },
  {
    "text": "for example from Google you're starting to see sort of a differentiation there in terms of like what the containerization model is and correct me",
    "start": "1121919",
    "end": "1129200"
  },
  {
    "text": "if I'm wrong y you this is your world so I'm wondering at at some point somebody's going to ask themselves well",
    "start": "1129200",
    "end": "1135400"
  },
  {
    "text": "okay every time I have to write a piece of code that is going to run you know as as this serverless function right it's",
    "start": "1135400",
    "end": "1141520"
  },
  {
    "text": "going to run somewhere is it possible for me to write this in a cloud agnostic way is it possible for me to basically",
    "start": "1141520",
    "end": "1148440"
  },
  {
    "text": "not have to import in some sort of third party whatever the cloud providers you know package is whatever the library is",
    "start": "1148440",
    "end": "1155240"
  },
  {
    "text": "is it is it possible for me to just write my my functions in a way that I can run them on AWS Lambda I can run",
    "start": "1155240",
    "end": "1161320"
  },
  {
    "text": "them on on cloud functions I can run them on Azure I can is there any way to have that right and I know there's open",
    "start": "1161320",
    "end": "1167400"
  },
  {
    "text": "fils as well which is you know I looked at that project the other day and it looked very promising so there's all",
    "start": "1167400",
    "end": "1172760"
  },
  {
    "text": "these different options is is it possible really to write all of your functions right in in a sort of a cloud",
    "start": "1172760",
    "end": "1179000"
  },
  {
    "text": "agnostic way and have them be deployed without doing Without Really having different Bill pipelines and different",
    "start": "1179000",
    "end": "1184080"
  },
  {
    "text": "ways you know actually having to import different libraries code libraries from different Cloud providers like how easy",
    "start": "1184080",
    "end": "1189120"
  },
  {
    "text": "is it and is the cost of creating abstractions right worth it can I ask a",
    "start": "1189120",
    "end": "1194559"
  },
  {
    "text": "question like um I was really skeptical about the portabil T spec of you know cervus in general but in the end what I",
    "start": "1194559",
    "end": "1201480"
  },
  {
    "text": "realized is just like I import a library whatever but it's really a small piece",
    "start": "1201480",
    "end": "1206799"
  },
  {
    "text": "right then the function block and whatever the reusable part is actually it's just there you just wrap it with uh",
    "start": "1206799",
    "end": "1214240"
  },
  {
    "text": "you just call maybe like two lines from a third party Library so it was not truly a big concern if you especially",
    "start": "1214240",
    "end": "1220679"
  },
  {
    "text": "organize things in a you know Cloud agnostic way plus doing like like glass glue at the endend again like this is my",
    "start": "1220679",
    "end": "1227760"
  },
  {
    "text": "personal opinion but we are trying to now reinvent all these like you know different abstraction models that make",
    "start": "1227760",
    "end": "1233280"
  },
  {
    "text": "you know server lists running everywhere including your own Prem but like I'm questioning is it really worth it to",
    "start": "1233280",
    "end": "1238559"
  },
  {
    "text": "have that like extraction model or is it just easy to just switch to those two lines and like import a new library and",
    "start": "1238559",
    "end": "1245559"
  },
  {
    "text": "you will be good to go I think also um reusability of your functions is one",
    "start": "1245559",
    "end": "1251240"
  },
  {
    "text": "thing but I think the you know the overall orchestration aspects and the configuration is another thing which is",
    "start": "1251240",
    "end": "1257760"
  },
  {
    "text": "definit Ely right now um propriety based and uh that's another you know I think",
    "start": "1257760",
    "end": "1263039"
  },
  {
    "text": "conversation to have I think it's easy to reuse your handlers but you know how can you just spin up the same",
    "start": "1263039",
    "end": "1268720"
  },
  {
    "text": "environment with similar naming and so on um you know similar scaling",
    "start": "1268720",
    "end": "1273919"
  },
  {
    "text": "properties and configuration on another cloud provider I think that's more difficult I like your question though of",
    "start": "1273919",
    "end": "1281000"
  },
  {
    "text": "questioning the premise of this and it's a little bit like how we we get very excited with the idea that we could",
    "start": "1281000",
    "end": "1287039"
  },
  {
    "text": "later we can swap in a different database you know when we've built these right abstractions but when why we why",
    "start": "1287039",
    "end": "1293960"
  },
  {
    "text": "would you do that and I've especially heard people try and say like this is a a mySQL database but because of this",
    "start": "1293960",
    "end": "1300960"
  },
  {
    "text": "abstraction we could put a database later if we wanted to just switch it and it's like well they they",
    "start": "1300960",
    "end": "1306320"
  },
  {
    "text": "do very different things you know so it seems like I feel like we get excited about the possibility of that without",
    "start": "1306320",
    "end": "1312799"
  },
  {
    "text": "really thinking about whether we're ever going to actually need to do it and that's the other thing about you you",
    "start": "1312799",
    "end": "1318320"
  },
  {
    "text": "made that point Jana the cloud you know these functionless services are kind of",
    "start": "1318320",
    "end": "1323640"
  },
  {
    "text": "uh meant to be sort of small and lightweight and so I think if you are going to be moving over to a different",
    "start": "1323640",
    "end": "1330440"
  },
  {
    "text": "provider it's a good opportunity to do do a rewrite of some pieces as well because that's something we should Pro",
    "start": "1330440",
    "end": "1337559"
  },
  {
    "text": "probably be doing anyway as good practice but yeah it's interesting to to",
    "start": "1337559",
    "end": "1342760"
  },
  {
    "text": "think of that I think I think as limitations change as the way that like um sorry as limitations change you know",
    "start": "1342760",
    "end": "1350559"
  },
  {
    "text": "just you need to consider some of that again like orm were a thing but you know",
    "start": "1350559",
    "end": "1356440"
  },
  {
    "text": "in reality Nobody Does that because each time you're changing your database you need to almost re architect you know at",
    "start": "1356440",
    "end": "1363559"
  },
  {
    "text": "least your data layer so you know I think it's natural to ask like is it really feasible uh to achieve",
    "start": "1363559",
    "end": "1370320"
  },
  {
    "text": "portability I think to those points though the Handler is rarely the interesting part of the serish function",
    "start": "1370320",
    "end": "1375440"
  },
  {
    "text": "right that's just how the information comes in but what you're actually doing with the function is the piece that",
    "start": "1375440",
    "end": "1381120"
  },
  {
    "text": "probably ties you to the cloud even more right so if you have a Handler for S3 events then you're properly tied to the",
    "start": "1381120",
    "end": "1386720"
  },
  {
    "text": "S3 API if you have a Handler for some kind of Google Cloud Storage event then you're reaching out and doing these",
    "start": "1386720",
    "end": "1392799"
  },
  {
    "text": "other things with the Google Cloud API so the Handler is probably the easiest part to swap out but all the other kind",
    "start": "1392799",
    "end": "1398720"
  },
  {
    "text": "of tentacles that are in your codebase related to the cloud specific apis and things like that that you're using to",
    "start": "1398720",
    "end": "1403960"
  },
  {
    "text": "handle the the event are the things that are going to be harder to switch out and I really find that kind of multicloud",
    "start": "1403960",
    "end": "1409520"
  },
  {
    "text": "argument to be worth it in the end I remember back in the you know 2012 2013 where everybody was talking about",
    "start": "1409520",
    "end": "1414840"
  },
  {
    "text": "multicloud and it's just a race to the lowest common denominator at that point because you have to kind of standardize",
    "start": "1414840",
    "end": "1420520"
  },
  {
    "text": "for whatever the lowest common functionality is and it's never kind of worth it so having small packages that",
    "start": "1420520",
    "end": "1425600"
  },
  {
    "text": "are easily rewritable to swap out you know the vendor what have you sounds like a better approach because the core",
    "start": "1425600",
    "end": "1430760"
  },
  {
    "text": "logic will remain the same it's just apis and how you're getting the data it might be",
    "start": "1430760",
    "end": "1436399"
  },
  {
    "text": "different [Music]",
    "start": "1436880",
    "end": "1447299"
  },
  {
    "text": "this episode is brought to you by data dog data dog is cloud monitoring as a service see inside any stack any time at",
    "start": "1448000",
    "end": "1455559"
  },
  {
    "text": "any scale anywhere so what's new with data dog coming off the heels of Dash 2019 data dog's annual conference about",
    "start": "1455559",
    "end": "1462440"
  },
  {
    "text": "building and Skilling the next generation of applications infrastructure and Technical teams we have a lot to cover serverless functions",
    "start": "1462440",
    "end": "1469520"
  },
  {
    "text": "data dog serverless view gives you complete visibility into your code running on AWS Lambda browser logs you",
    "start": "1469520",
    "end": "1475399"
  },
  {
    "text": "can now send logs directly to data dog from web browsers or other JavaScript clients for full stack visibility",
    "start": "1475399",
    "end": "1480720"
  },
  {
    "text": "Network performance monitoring this enables you to visualize the flow of network traffic in cloud-based or hybrid",
    "start": "1480720",
    "end": "1486200"
  },
  {
    "text": "environments mobile application data dog now has a mobile app to make it easier to triage issues when you're on call or",
    "start": "1486200",
    "end": "1493120"
  },
  {
    "text": "on the Go real user monitoring this enables you to visualize and analyze the performance of your front end",
    "start": "1493120",
    "end": "1498360"
  },
  {
    "text": "applications as seen by your users and a final list of what's new log rehydration",
    "start": "1498360",
    "end": "1503760"
  },
  {
    "text": "metrics from logs watch doog for infrastructure metrics metrics Without Limits tracing Without Limits Trace",
    "start": "1503760",
    "end": "1509480"
  },
  {
    "text": "outliers and so much more head to data do.com go time to learn more and get a",
    "start": "1509480",
    "end": "1514520"
  },
  {
    "text": "free t-shirt once again data dog.com",
    "start": "1514520",
    "end": "1519480"
  },
  {
    "text": "gotime [Music]",
    "start": "1526679",
    "end": "1532320"
  },
  {
    "text": "I think this leads us to to to the next sort of key topic here which is how do",
    "start": "1532320",
    "end": "1539000"
  },
  {
    "text": "you sort of uhu in in a PR practical way right if if I'm writing if I'm a go",
    "start": "1539000",
    "end": "1544480"
  },
  {
    "text": "developer right or or rather if I'm a developer who happens to be writing some of the functions in go right how do I",
    "start": "1544480",
    "end": "1550480"
  },
  {
    "text": "set up my or structure my go project right that way in a way that allows my",
    "start": "1550480",
    "end": "1555880"
  },
  {
    "text": "my business logic my behavior to be Cloud agnostic yet the entry point where I have to use say you know um I have to",
    "start": "1555880",
    "end": "1563159"
  },
  {
    "text": "import some sort of a a package from say from AWS for measure or whatnot like I personally I write my servess go",
    "start": "1563159",
    "end": "1570880"
  },
  {
    "text": "projects the exact same way I write every other go project and here's what I mean by that basically I try to in in a",
    "start": "1570880",
    "end": "1577440"
  },
  {
    "text": "regular sort of U um Long Live service I'll write my my main my package main function main my entry point I keep that",
    "start": "1577440",
    "end": "1584919"
  },
  {
    "text": "as light as possible right I don't have a ton of stuff going on in there maybe I'm reading some arguments from the environment maybe I'm reading some",
    "start": "1584919",
    "end": "1591399"
  },
  {
    "text": "something from configuration or from arguments being passed in whatever the case may be I don't do any anything",
    "start": "1591399",
    "end": "1596480"
  },
  {
    "text": "different when it comes to that with with regards to to servess Technologies right and pretty much everything else in",
    "start": "1596480",
    "end": "1603240"
  },
  {
    "text": "in in my business logic uh I'm not going to basically use I'm not going to bring",
    "start": "1603240",
    "end": "1608919"
  },
  {
    "text": "in those thirdparty dependencies say you know S3 for example I'm not going to bring that into my my business logic I'd",
    "start": "1608919",
    "end": "1615480"
  },
  {
    "text": "rather create some sort of local interface right for that behavior for the functionality that an S3 right um",
    "start": "1615480",
    "end": "1622799"
  },
  {
    "text": "implementation can satisfy I'd rather you know I'm not going to bring in like a Dynamo DB right package into my",
    "start": "1622799",
    "end": "1629120"
  },
  {
    "text": "business logic I'm going to write a local interface that whatever the implementation of Dynamo DB I'm passing in is going to satisfy so to me like I",
    "start": "1629120",
    "end": "1636039"
  },
  {
    "text": "don't do servess programming any differently than I do any other kind of go programming like like I'm I'm by",
    "start": "1636039",
    "end": "1641360"
  },
  {
    "text": "following which which I think is is sort of the biggest point that I'm I can seek to put forth here is that you don't have",
    "start": "1641360",
    "end": "1647880"
  },
  {
    "text": "to the best practices you know about go development don't go away the moment you start doing servess work right you",
    "start": "1647880",
    "end": "1653520"
  },
  {
    "text": "should strive to abide by those same exact principles and best practices that we talk about for every any other kind",
    "start": "1653520",
    "end": "1659840"
  },
  {
    "text": "of go project yeah Matt yeah I think that is a great lesson then for anyone that hasn't got much experience with",
    "start": "1659840",
    "end": "1665799"
  },
  {
    "text": "serverless I think that's actually quite a key point there what we're saying is",
    "start": "1665799",
    "end": "1670919"
  },
  {
    "text": "that yes there might be changes in behavior and you might do things differently in your code in the",
    "start": "1670919",
    "end": "1676799"
  },
  {
    "text": "serverless environment environment but those things are good things to do anyway for their own sake so that's",
    "start": "1676799",
    "end": "1682480"
  },
  {
    "text": "quite an encouraging because it's possible and actually with app engine until the recent release you did have to",
    "start": "1682480",
    "end": "1689039"
  },
  {
    "text": "do things slightly differently and so therefore you forced to create some abstractions that you might not be happy",
    "start": "1689039",
    "end": "1695200"
  },
  {
    "text": "with and things or do other changes to your project they changed that now so as",
    "start": "1695200",
    "end": "1700640"
  },
  {
    "text": "I say you just deploy its package main that's what you're deploying and there's a few things that fall on from that so",
    "start": "1700640",
    "end": "1706159"
  },
  {
    "text": "for example Young you mentioned the cold start thing so this is where there's no instances running the first request",
    "start": "1706159",
    "end": "1712440"
  },
  {
    "text": "comes in and there's it has to do some work to get the instance up and running and you want that to be quick you want",
    "start": "1712440",
    "end": "1718880"
  },
  {
    "text": "that to be as quick as possible so that might mean you would defer some setup",
    "start": "1718880",
    "end": "1724039"
  },
  {
    "text": "for certain handlers until later and things and I do these sorts of things as well even though in some environments it",
    "start": "1724039",
    "end": "1731440"
  },
  {
    "text": "might be that I deploy a server once and it's a long running server so I'm not really getting the benefit but still I",
    "start": "1731440",
    "end": "1738200"
  },
  {
    "text": "think it's good practice and so that's one example I use the sync once package with handlers and that allows me to make",
    "start": "1738200",
    "end": "1745519"
  },
  {
    "text": "sure that I only do the setup the first time a request is called and only do it once atomically so even if you are",
    "start": "1745519",
    "end": "1752880"
  },
  {
    "text": "receiving multiple requests every request gets its own go routine it's possible that you you might TR be trying",
    "start": "1752880",
    "end": "1759039"
  },
  {
    "text": "to do multiple setup on the same same thing but this would avoid that uh with",
    "start": "1759039",
    "end": "1764840"
  },
  {
    "text": "sync want that's just one example I definitely agree and I think serverless to a certain extent is just a deployment",
    "start": "1764840",
    "end": "1770840"
  },
  {
    "text": "detail um to the to the code that you're writing so even for me when I'm writing serverless functions I don't try to do",
    "start": "1770840",
    "end": "1777039"
  },
  {
    "text": "anything Lambda specific or what have you until the very end when it's almost time for me to deploy it because even",
    "start": "1777039",
    "end": "1782840"
  },
  {
    "text": "locally I treat my my go file as just a binary that I built I'm passing in a Json file from my local file system to",
    "start": "1782840",
    "end": "1789080"
  },
  {
    "text": "like to mimic the event that's coming in so I'll do my full testing cycle I'll do everything that I need to do on my local",
    "start": "1789080",
    "end": "1794679"
  },
  {
    "text": "machine and then when it comes time for me to get ready to deploy it I'll swap out that Handler that was reading in that file to be one that reads in an",
    "start": "1794679",
    "end": "1800880"
  },
  {
    "text": "event from AWS but the rest of the workflow is the same there's nothing specific to serverless that you have to",
    "start": "1800880",
    "end": "1806360"
  },
  {
    "text": "really do in your code base to get it to work and I feel like maybe people are intimidated by serus because they hear",
    "start": "1806360",
    "end": "1811679"
  },
  {
    "text": "these terms and they don't really understand what's you know what it actually means but there's nothing",
    "start": "1811679",
    "end": "1816760"
  },
  {
    "text": "really different like Johnny said to standard just go development or any development it's just about how you're",
    "start": "1816760",
    "end": "1821960"
  },
  {
    "text": "getting that event and how you're processing it and I think one of the main uh reasons why you know the cloud",
    "start": "1821960",
    "end": "1828279"
  },
  {
    "text": "providers want to you know provide an idiomatic experience in the end of the day because as you put like you know",
    "start": "1828279",
    "end": "1833720"
  },
  {
    "text": "more barriers in terms of like hey you got to learn new organizational tricks",
    "start": "1833720",
    "end": "1839279"
  },
  {
    "text": "tips uh whatever in order to push the server list that's kind of like against",
    "start": "1839279",
    "end": "1844320"
  },
  {
    "text": "of the Ser model the main idea is you should care about your business logic",
    "start": "1844320",
    "end": "1850440"
  },
  {
    "text": "you should be able to use your existing tools and you know deploy things easily and maintain things easily one of the",
    "start": "1850440",
    "end": "1856840"
  },
  {
    "text": "things that I've experienced myself is like usually I think coding organization wide tips apply to serverless but it",
    "start": "1856840",
    "end": "1864519"
  },
  {
    "text": "also depends on is stens says um serverless is about you know deployment",
    "start": "1864519",
    "end": "1870760"
  },
  {
    "text": "so it really changed the way I organized my modules I would bundle things like",
    "start": "1870760",
    "end": "1877360"
  },
  {
    "text": "together if I'm going to you know deploy them together in terms of like maintaining dependencies I want to make",
    "start": "1877360",
    "end": "1883120"
  },
  {
    "text": "sure that like you know they are represented by the same module file those are the you know the only",
    "start": "1883120",
    "end": "1888919"
  },
  {
    "text": "differences uh I've experienced myself otherwise I can apply everything else to",
    "start": "1888919",
    "end": "1894840"
  },
  {
    "text": "serverless programs another one is uh Global State we talked about these things should be stateless and Global",
    "start": "1894840",
    "end": "1901639"
  },
  {
    "text": "state is worth avoiding in go altogether I think in almost every case Global",
    "start": "1901639",
    "end": "1907480"
  },
  {
    "text": "state for anyone not sure it's essentially variables in the package space so if you do use those and there's",
    "start": "1907480",
    "end": "1914360"
  },
  {
    "text": "lots of examples in go where we see that by the way and there's plenty of examples throughout the standard Library",
    "start": "1914360",
    "end": "1920120"
  },
  {
    "text": "too but the tradeoffs um you know it's it can be simpler it can be simpler and",
    "start": "1920120",
    "end": "1925720"
  },
  {
    "text": "and you just have to write a main function and you've got some variables in global space for tiny little programs",
    "start": "1925720",
    "end": "1931279"
  },
  {
    "text": "or scripts essentially that that sort of use case I can see where people would use them but it really hurts testing it",
    "start": "1931279",
    "end": "1938080"
  },
  {
    "text": "does a few other things it introduces other bugs that might be difficult to find and solve and that's another one",
    "start": "1938080",
    "end": "1945080"
  },
  {
    "text": "that you can extend so it's not just don't use the local dis because the next instance might not have access to that",
    "start": "1945080",
    "end": "1950919"
  },
  {
    "text": "same dis but don't use the same memory don't use like Global memory and don't assume that an instance is going to have",
    "start": "1950919",
    "end": "1957240"
  },
  {
    "text": "that same memory over any length of time those kinds of things again are just",
    "start": "1957240",
    "end": "1962279"
  },
  {
    "text": "good practice generally too yeah you definitely shouldn't assume that and this might get into maybe some Advanced",
    "start": "1962279",
    "end": "1968039"
  },
  {
    "text": "topics but once you fully understand the trade-offs and things like that there are certain use cases where because",
    "start": "1968039",
    "end": "1974440"
  },
  {
    "text": "there is a possibility that you're reusing the same container and things like that that you could maybe optimize for checking if you are in an existing",
    "start": "1974440",
    "end": "1981440"
  },
  {
    "text": "container and things like that and optimize for that if you do have long startup times or startup times that are",
    "start": "1981440",
    "end": "1986480"
  },
  {
    "text": "going to increase your latency but that's like I said a more advanced topic once you understand what you're dealing",
    "start": "1986480",
    "end": "1991600"
  },
  {
    "text": "with and how these instances may live or die and may come and go that's a really interesting point actually um and I do",
    "start": "1991600",
    "end": "1999200"
  },
  {
    "text": "wonder whether the those sorts of optimizations usually involve some kind of complexity in the project in the code",
    "start": "1999200",
    "end": "2006679"
  },
  {
    "text": "of course and and of course they might make sense at one point of time but then over time they they might they may stop",
    "start": "2006679",
    "end": "2013120"
  },
  {
    "text": "making sense and things so that's a very interesting thing that you have to also bear in mind I think is then keep",
    "start": "2013120",
    "end": "2020360"
  },
  {
    "text": "checking the this the architecture that you've that you end up with and make sure it stays relevant and things yeah",
    "start": "2020360",
    "end": "2026639"
  },
  {
    "text": "and don't optimize too early that's the other thing something that you mentioned that actually bit me in the inverse you're saying don't do Global State and",
    "start": "2026639",
    "end": "2032679"
  },
  {
    "text": "things like that but just because it's servess doesn't mean that you got a fresh clean starting environment so I",
    "start": "2032679",
    "end": "2038399"
  },
  {
    "text": "had a project where I was pulling files from S3 and I was processing them and never cleaning up because it's serverless and it's just going to get",
    "start": "2038399",
    "end": "2044000"
  },
  {
    "text": "rid of the container and then I started getting failures after maybe 30 or so runs and it's because I filled up the",
    "start": "2044000",
    "end": "2049560"
  },
  {
    "text": "disc on the on the execution environment without thinking that hey maybe we're getting reuse if the the code is loaded",
    "start": "2049560",
    "end": "2056839"
  },
  {
    "text": "in a hot path and it's continuously using that same execution environment so clean up is still important and",
    "start": "2056839",
    "end": "2062800"
  },
  {
    "text": "unsetting Global state if it is problematic is still important because you might get that same exact container back and it might be problematic that's",
    "start": "2062800",
    "end": "2069960"
  },
  {
    "text": "interesting and I suppose there's also security implications there too if you're pulling data from one customer",
    "start": "2069960",
    "end": "2075760"
  },
  {
    "text": "you know and then you get the same instance you've not thought about it that's that is a very good point I'm so pleased you you agreed to do this",
    "start": "2075760",
    "end": "2082118"
  },
  {
    "text": "Stephen I think you might have just saved my life so the the see you mentioned",
    "start": "2082119",
    "end": "2089320"
  },
  {
    "text": "something uh interesting about testing and how you test like so perhaps this",
    "start": "2089320",
    "end": "2094599"
  },
  {
    "text": "might be a controversial statement on my part but all of that sort of a uh all the work going on right now and and the",
    "start": "2094599",
    "end": "2101000"
  },
  {
    "text": "sort of a the the testing the way you do testing with regards to Sur work honestly I don't think it's I don't think it's there yet like I can't I",
    "start": "2101000",
    "end": "2107400"
  },
  {
    "text": "can't the experience is still too too it's just too much right like I don't",
    "start": "2107400",
    "end": "2112720"
  },
  {
    "text": "have the confidence right to be able to to test pretty much you know the entire setup locally right which is why I very",
    "start": "2112720",
    "end": "2119680"
  },
  {
    "text": "very heavily depend on on on unit testing I very heavily depend on sort of a uh basically you know invoking or",
    "start": "2119680",
    "end": "2125680"
  },
  {
    "text": "simulating the invocation with with the racon payload uh basically I'm trying to I'm trying to code the way I code any",
    "start": "2125680",
    "end": "2132000"
  },
  {
    "text": "other kind of go Application as much as possible Right but then there there's there's something to be said for doing",
    "start": "2132000",
    "end": "2137200"
  },
  {
    "text": "some sort of uh integration level testing like like what what at what point do you sort of cross over into",
    "start": "2137200",
    "end": "2143400"
  },
  {
    "text": "saying you know what let me now assume that I'm going to have some real event right coming from some some Source other",
    "start": "2143400",
    "end": "2149359"
  },
  {
    "text": "than my local development environment right at what point do you cross that threshold and when do you do that sort of integration level testing so for me",
    "start": "2149359",
    "end": "2155599"
  },
  {
    "text": "even the case where you are getting events that are coming from some Source those events are very well defined and adhere to a certain schema right so you",
    "start": "2155599",
    "end": "2162400"
  },
  {
    "text": "can maybe test the variability of the different data that you can get back from from those events but like I said I",
    "start": "2162400",
    "end": "2168480"
  },
  {
    "text": "do straight up like Json files on my local file system and I test that the I",
    "start": "2168480",
    "end": "2173760"
  },
  {
    "text": "assert that the output is what I expect or I assert that the event takes place the way that I expect but I very much",
    "start": "2173760",
    "end": "2179599"
  },
  {
    "text": "come from that kind of hacky sis admin background where I'm writing bash scripts and I'm testing it right in line",
    "start": "2179599",
    "end": "2185079"
  },
  {
    "text": "and I'm making sure that the the desired output is the kind of true the true kind of proof that the code works and for go",
    "start": "2185079",
    "end": "2192880"
  },
  {
    "text": "at least I don't change my testing very much because I'm writing things local and because I can still run it just as a",
    "start": "2192880",
    "end": "2198440"
  },
  {
    "text": "straight up binary I'm doing the underscore you know test files and I'm testing the things that I'll normally test doing the function level test but",
    "start": "2198440",
    "end": "2205680"
  },
  {
    "text": "overall it's just kind of an integration style test where I just assert that I'm getting back what I expect to get back",
    "start": "2205680",
    "end": "2210800"
  },
  {
    "text": "before I go forward and try to deploy it and see what happens can I ask a question before talking about testing",
    "start": "2210800",
    "end": "2216720"
  },
  {
    "text": "how do we develop you know serverless apps you know giv like cloud is a thing",
    "start": "2216720",
    "end": "2222400"
  },
  {
    "text": "and it's just like impossible to emulate you know development stack is just becoming so frustratingly complex I find",
    "start": "2222400",
    "end": "2229839"
  },
  {
    "text": "it so hard to like keep the similar environment in my development environment I think serverless is just",
    "start": "2229839",
    "end": "2236280"
  },
  {
    "text": "like adding this like yet another big burden because it's just far too abstracted away uh the only way that you",
    "start": "2236280",
    "end": "2243119"
  },
  {
    "text": "can emulate it just like basically running the thing in the cloud provider so what what is your strategy when it",
    "start": "2243119",
    "end": "2249920"
  },
  {
    "text": "comes to development so I don't believe in like emulating like this full environment because like you said it is complex it's it's multivariant there's",
    "start": "2249920",
    "end": "2256720"
  },
  {
    "text": "so many things there so I literally run it in like a test account I'll reach out to a test S3 bucket I'll reach out to a",
    "start": "2256720",
    "end": "2263079"
  },
  {
    "text": "test Dynamo table and I'll do that full exercising because that's the only thing that's truly going to test that code",
    "start": "2263079",
    "end": "2268359"
  },
  {
    "text": "path that you've written for right you have to actually reach out to these apis to find out certain things and I think",
    "start": "2268359",
    "end": "2273760"
  },
  {
    "text": "that's the right level of testing given the amount of effort that you put into into these functions you're trying to keep them small you're trying to keep",
    "start": "2273760",
    "end": "2279359"
  },
  {
    "text": "things kind of pretty fast moving and setting up a full kind of mock environment just to do that seems like",
    "start": "2279359",
    "end": "2285000"
  },
  {
    "text": "Overkill in my opinion and unit tests are more useful and but the ones that you're describing",
    "start": "2285000",
    "end": "2291440"
  },
  {
    "text": "Stephen sound kind of like unit tests if the if the serverless function is the unit and you're passing something in and",
    "start": "2291440",
    "end": "2297319"
  },
  {
    "text": "making sure what you get out is what you expect that's kind of a unit test and that is for me they're the most useful",
    "start": "2297319",
    "end": "2304480"
  },
  {
    "text": "tests because they if something does go wrong they kind of Point like a laser",
    "start": "2304480",
    "end": "2309520"
  },
  {
    "text": "they point to what went wrong usually ideally only one test will fail if there's a new bug or something and then",
    "start": "2309520",
    "end": "2316079"
  },
  {
    "text": "you you're drawn straight to it but I know that monzo which is a bank that's written in go and you everyone should",
    "start": "2316079",
    "end": "2322359"
  },
  {
    "text": "check it out by the way I I think it's a great what they're doing is really cool not just because it's in go but I know",
    "start": "2322359",
    "end": "2328800"
  },
  {
    "text": "that they have impr production testing so kind of like Canary testing or whatever where they they will actually",
    "start": "2328800",
    "end": "2335319"
  },
  {
    "text": "simulate real behav behavior in their production environment and this these tests are just running",
    "start": "2335319",
    "end": "2340680"
  },
  {
    "text": "continuously um and I suppose they'd be capturing me metrics and things uh you know checking to see how the how the",
    "start": "2340680",
    "end": "2347040"
  },
  {
    "text": "systems performing and all kinds of things at the same time is it there um replicating some of the requests to a",
    "start": "2347040",
    "end": "2353240"
  },
  {
    "text": "testing environment and like just kind of like seeing is it kind of like a canary but before actually becomes a",
    "start": "2353240",
    "end": "2358880"
  },
  {
    "text": "canary no but I know that they probably I mean I think any mature project probably has a quite a big testing story",
    "start": "2358880",
    "end": "2367280"
  },
  {
    "text": "but in this particular case I heard Matt Heath talk about it it's one of the engineers at monzo um you can find him",
    "start": "2367280",
    "end": "2373760"
  },
  {
    "text": "online actually it speaks about this this subject very well uh they actually",
    "start": "2373760",
    "end": "2379640"
  },
  {
    "text": "literally simulate real users using their bank cards and transferring money to each other and and doing all these",
    "start": "2379640",
    "end": "2385319"
  },
  {
    "text": "things that people really do they probably do have a another environment that they put code in before and do this",
    "start": "2385319",
    "end": "2392359"
  },
  {
    "text": "run the same set of tests but yeah it's probably part of a wider testing Str strategy for sure and talking about",
    "start": "2392359",
    "end": "2398280"
  },
  {
    "text": "testing and production one thing that I found to be absolutely critical is getting the right logging level and",
    "start": "2398280",
    "end": "2403520"
  },
  {
    "text": "getting the right amount of information out of your function because you don't have a nice server to SSH into you don't",
    "start": "2403520",
    "end": "2409839"
  },
  {
    "text": "have all these kind of debugging tools that you would have in a traditional environment so making sure your code is",
    "start": "2409839",
    "end": "2415640"
  },
  {
    "text": "observable making sure that you're logging making sure you're understanding the execution path that your code decided to take is important in",
    "start": "2415640",
    "end": "2422000"
  },
  {
    "text": "debugging and quickly understanding you know where things might have gone wrong so along those lines Minds right so",
    "start": "2422000",
    "end": "2427720"
  },
  {
    "text": "there's two things I I want to touch on so Matt touched on a point that you have a function that is a unit representing some some some piece of work some piece",
    "start": "2427720",
    "end": "2433680"
  },
  {
    "text": "of business logic but there's there's obviously um systems that are built that rely on multiple invocations of multiple",
    "start": "2433680",
    "end": "2439839"
  },
  {
    "text": "different functions right there's this orchestration that you need to to sort of introduce into the sort of the your",
    "start": "2439839",
    "end": "2445800"
  },
  {
    "text": "your your environment in order to get the right things to happen in in right sequence right any any any non-trivial",
    "start": "2445800",
    "end": "2451599"
  },
  {
    "text": "you know one function sort of thing whenever you need to sort of have like more than two or three then you're going to you're going to need some level of",
    "start": "2451599",
    "end": "2458319"
  },
  {
    "text": "orchestration the current best practice is that you shouldn't have one invoke the other because of the of the basically if you have if you have this",
    "start": "2458319",
    "end": "2465000"
  },
  {
    "text": "chain on down basically you know especially if it's like synchronous invocations then the first one's kind of",
    "start": "2465000",
    "end": "2470640"
  },
  {
    "text": "waiting for all the other ones to finish right and then basically you run the risk of running a timeout and that that",
    "start": "2470640",
    "end": "2475760"
  },
  {
    "text": "basically your request is just gets dropped on the floor so there's lots of gachas and sort of do and don'ts over there on that side but and and and we're",
    "start": "2475760",
    "end": "2483000"
  },
  {
    "text": "going to swim back around to my other point which is really around the sort of the debugging story which in a serverless distributed highly",
    "start": "2483000",
    "end": "2489319"
  },
  {
    "text": "distributed environment like like serverless applications that that requires a lot of extra sort of",
    "start": "2489319",
    "end": "2495960"
  },
  {
    "text": "infrastructure around it logging metrics tracing all that stuff we're going to swim back around to that but I want to I want to know how how do you handle",
    "start": "2495960",
    "end": "2502400"
  },
  {
    "text": "orchestration of multiple functions when you need to get something done so shout",
    "start": "2502400",
    "end": "2507720"
  },
  {
    "text": "out to step functions in AWS I'm not sure if Google has something equivalent",
    "start": "2507720",
    "end": "2512839"
  },
  {
    "text": "in gcp but that really opened up a whole new world for me in with regards to chaining serverless things together to",
    "start": "2512839",
    "end": "2519400"
  },
  {
    "text": "make one big kind of cohesive unit um before step functions it would very much be that use case where you described",
    "start": "2519400",
    "end": "2525359"
  },
  {
    "text": "Johnny where you're calling other functions or passing things via a q or passing things via some other",
    "start": "2525359",
    "end": "2531520"
  },
  {
    "text": "traditional mechanism but with step functions you got the ability to have",
    "start": "2531520",
    "end": "2536599"
  },
  {
    "text": "one function input or the output of one function becomes the input of the next function and be able to chain it down",
    "start": "2536599",
    "end": "2542760"
  },
  {
    "text": "that way it's still decoupled still passing things but kind of in a way that you could look at the transition between",
    "start": "2542760",
    "end": "2549079"
  },
  {
    "text": "the states and see what the payload was and understand what that next function got to the point where you could have",
    "start": "2549079",
    "end": "2554319"
  },
  {
    "text": "two completely different functions and they're doing the things that you expect them to do because you're looking at the payload and you could test one each",
    "start": "2554319",
    "end": "2560119"
  },
  {
    "text": "independently with their own respective payload and as long as you make sure that the previous function output what",
    "start": "2560119",
    "end": "2565440"
  },
  {
    "text": "you desired then you're in that good place where you're getting that Best of Both Worlds where you're getting that kind of synchronous execution from the",
    "start": "2565440",
    "end": "2571960"
  },
  {
    "text": "outside but internally it's asynchronous and it's decoupled from one another it's interesting Chris James in the slack",
    "start": "2571960",
    "end": "2578160"
  },
  {
    "text": "Channel earlier mentioned the environmental cost I.E literally like",
    "start": "2578160",
    "end": "2583960"
  },
  {
    "text": "the green cost of serverless versus just having our own projects and things",
    "start": "2583960",
    "end": "2589160"
  },
  {
    "text": "that's the first time I've even really considered that I suppose I assumed that the idea is there's this shared resource",
    "start": "2589160",
    "end": "2595839"
  },
  {
    "text": "and it's that resource is there doing things it's ready to do things anyway and we're in theory all taking a piece",
    "start": "2595839",
    "end": "2602559"
  },
  {
    "text": "of that and then just paying for a little section of it so it feels like it ought to work from a green perspective",
    "start": "2602559",
    "end": "2608359"
  },
  {
    "text": "but actually I don't know I'm also assuming that AWS for example is running a lot of their compute for serverless on",
    "start": "2608359",
    "end": "2614920"
  },
  {
    "text": "their spot Fleet or the the fleet of systems that are unused at that time and it's just an optimization on their part",
    "start": "2614920",
    "end": "2621880"
  },
  {
    "text": "in order to make sure they're getting maximum utilization from the set of services that they already have running",
    "start": "2621880",
    "end": "2627280"
  },
  {
    "text": "I doubt they're spinning up you know brand new servers Hardware in order to run these these kind of serverless",
    "start": "2627280",
    "end": "2632640"
  },
  {
    "text": "functions I think they're very much making use of that additional capacity that they have to run to run those micrum on maybe initially that was the",
    "start": "2632640",
    "end": "2639880"
  },
  {
    "text": "case but I wonder now I mean it depends how big AWS is as a business to Amazon",
    "start": "2639880",
    "end": "2645160"
  },
  {
    "text": "because maybe they are now spinning up compute to sell I don't know I've ruined the conversation yeah I'm not sure I",
    "start": "2645160",
    "end": "2650680"
  },
  {
    "text": "would have to look into that but because I know how they do spot and things like that it'll be very unlikely that they're not making use of that spare capacity to",
    "start": "2650680",
    "end": "2657640"
  },
  {
    "text": "to kind of provision for these micro voms yeah well that's the promise I think or one of the promises at least of",
    "start": "2657640",
    "end": "2663599"
  },
  {
    "text": "just this the point of sharing this infrastructure [Music]",
    "start": "2663599",
    "end": "2674130"
  },
  {
    "text": "this episode is brought to you by xtm and here's Jason Silva most known as the host of the TV series brain games on the",
    "start": "2675079",
    "end": "2682000"
  },
  {
    "text": "National Geographic Channel he's talking about how you can become wired for adventure human beings are wired for",
    "start": "2682000",
    "end": "2689040"
  },
  {
    "text": "adventure we get off we get activated by novelty by the thrill of something new",
    "start": "2689040",
    "end": "2696640"
  },
  {
    "text": "so really if you want to activate the human Spirit go on an adventure take the journey heed the call so to speak and",
    "start": "2696640",
    "end": "2705520"
  },
  {
    "text": "the question then becomes how do we reconcile our desire for adventure to turn our lives into a dynamic active",
    "start": "2705520",
    "end": "2712520"
  },
  {
    "text": "work project while simultaneously being responsible while simultaneously paying the bills while simultaneously feeling",
    "start": "2712520",
    "end": "2719200"
  },
  {
    "text": "like we're making a contribution and we're being productive most people will tell us go to work go to work go to work save money and then go on a great",
    "start": "2719200",
    "end": "2726160"
  },
  {
    "text": "Adventure but what if there's a solution beyond that what if Wireless Technologies such as what we're seeing",
    "start": "2726160",
    "end": "2732119"
  },
  {
    "text": "increasingly today can allow us to become tethered while being disconnected to be close while being AAR to be",
    "start": "2732119",
    "end": "2738680"
  },
  {
    "text": "everywhere at once and so I recently heard about a company called X team and",
    "start": "2738680",
    "end": "2743760"
  },
  {
    "text": "these guys let me say it they really do embody these values they might as well be the the poster children for the rise",
    "start": "2743760",
    "end": "2750200"
  },
  {
    "text": "of digital nomadic tribes right people entrepreneurs free spirits around the",
    "start": "2750200",
    "end": "2755559"
  },
  {
    "text": "world that are gallivanting that are exploring that are truly living the adventure right yet at the same time",
    "start": "2755559",
    "end": "2761520"
  },
  {
    "text": "they are a community of software developers who are super productive who are creating amazing software Solutions",
    "start": "2761520",
    "end": "2766640"
  },
  {
    "text": "solving problems solving with companies while living a life in which they realize more than ever access is more",
    "start": "2766640",
    "end": "2771839"
  },
  {
    "text": "important that ownership so my friends at X team I celebrate you for what you embod I celebrate you for being",
    "start": "2771839",
    "end": "2778559"
  },
  {
    "text": "brilliant Innovative counterintuitive software developer stationed around the world and doing your thing and really",
    "start": "2778559",
    "end": "2784359"
  },
  {
    "text": "living up to the ideals of Life as a great adventure 21st century poster children for what's possible for human",
    "start": "2784359",
    "end": "2790599"
  },
  {
    "text": "beings free yourself from the constraints from the traditional from the tether rings of what used to be and",
    "start": "2790599",
    "end": "2796400"
  },
  {
    "text": "let go take the journey heed the call much love guys cheers if you think",
    "start": "2796400",
    "end": "2802280"
  },
  {
    "text": "you're wired for adventure you want to become wired for adventure learn more about our friends at X team head to X",
    "start": "2802280",
    "end": "2808040"
  },
  {
    "text": "team.com to learn more again X [Music]",
    "start": "2808040",
    "end": "2814800"
  },
  {
    "text": "team.com",
    "start": "2814800",
    "end": "2817800"
  },
  {
    "text": "so now we can swing back around to the other topic of of debugging servess applications like I mean honestly that",
    "start": "2820760",
    "end": "2827240"
  },
  {
    "text": "was that was sort of the biggest other sort of Revelation to me when I first started doing serverless work which is",
    "start": "2827240",
    "end": "2833880"
  },
  {
    "text": "basically like okay in a traditional monolith right like Stevenson was saying like if you had really had to right you",
    "start": "2833880",
    "end": "2839559"
  },
  {
    "text": "could s SS into a box and and get all your logging everything that that Bally",
    "start": "2839559",
    "end": "2844599"
  },
  {
    "text": "was was part of a request you get to see it all there right granted you know in in some places when you ass into a box I",
    "start": "2844599",
    "end": "2850720"
  },
  {
    "text": "think you should jettison that box I think that box should not go back into your Fleet but that's besides the point right but that old model of being able",
    "start": "2850720",
    "end": "2857160"
  },
  {
    "text": "to sort of go see everything in one place with servess that's gone that's out the window right and one could argue that even in a a highs scale sort of",
    "start": "2857160",
    "end": "2863640"
  },
  {
    "text": "distributed system you know when when you have like full long lived instances right you're not guaranteed that the",
    "start": "2863640",
    "end": "2870000"
  },
  {
    "text": "same the request is going to go to to one instance either so you kind of still have the same problem there but with the",
    "start": "2870000",
    "end": "2875119"
  },
  {
    "text": "service model model we kind of don't have a choice right if you if you need to know if you have a situation where",
    "start": "2875119",
    "end": "2880240"
  },
  {
    "text": "you're or orchestrating multiple serverless bits and pieces right you know something's writing the storage",
    "start": "2880240",
    "end": "2885359"
  },
  {
    "text": "something from a q something's you know sending in some some some communicate communicate with a third party service",
    "start": "2885359",
    "end": "2891079"
  },
  {
    "text": "whatever the case may be if something goes wrong end user makes a request right maybe you have an API goway that",
    "start": "2891079",
    "end": "2896680"
  },
  {
    "text": "fires off a Lambda as as a request of this invocation and then you you're touching on three or four other",
    "start": "2896680",
    "end": "2902760"
  },
  {
    "text": "different things right before before some sort of respon goes back to the user if something goes wrong somewhere",
    "start": "2902760",
    "end": "2908240"
  },
  {
    "text": "in there right how say the user gets a you know 500 error or something right how where do you start how do you even",
    "start": "2908240",
    "end": "2915480"
  },
  {
    "text": "reason about this highly distributed environment where nothing not nothing is in the same place it's all none of it is",
    "start": "2915480",
    "end": "2921440"
  },
  {
    "text": "all all in the same place how do you go about that so I have so many opinions on this topic but um I can say that like I",
    "start": "2921440",
    "end": "2928119"
  },
  {
    "text": "think the general over we usually start with the networking layer uh and you",
    "start": "2928119",
    "end": "2933200"
  },
  {
    "text": "know distributed tracing to sort out like like you know what is the specific Service uh the problem is coming from",
    "start": "2933200",
    "end": "2940119"
  },
  {
    "text": "and I think cloud providers are doing a good job but not you know perfect job when it comes to instrumenting things",
    "start": "2940119",
    "end": "2946079"
  },
  {
    "text": "and exposing similar data signals I think the the biggest uh problem is as a",
    "start": "2946079",
    "end": "2951960"
  },
  {
    "text": "user I won't be able to see end to end where is the trace and like a cloud provider need to you know contribute a",
    "start": "2951960",
    "end": "2958280"
  },
  {
    "text": "lot to that because some of the traces will come from Storage some of them will come from like load balancer and so on",
    "start": "2958280",
    "end": "2963880"
  },
  {
    "text": "and you are kind of like somewhere in between right like sometimes it's just the you know the cloud providers is",
    "start": "2963880",
    "end": "2969760"
  },
  {
    "text": "having an aage not you so we had this particular problem that like our customers were calling us hey like you",
    "start": "2969760",
    "end": "2976440"
  },
  {
    "text": "know your services are down or something we're having this like difficulty just you know keeping this SL SLA and um we",
    "start": "2976440",
    "end": "2984720"
  },
  {
    "text": "constantly have to like go back and like debug their services but we realize that like if we consistently you know output",
    "start": "2984720",
    "end": "2991799"
  },
  {
    "text": "a signal distributed Trace at least to kind of like represent and navigate the user as the initial thing uh is like the",
    "start": "2991799",
    "end": "2998799"
  },
  {
    "text": "initial step I think that will be the optimal thing and then uh I think once you figure out your service you can just",
    "start": "2998799",
    "end": "3004920"
  },
  {
    "text": "go dig and like look at other signals like logs and so on but I think as an industry we're just like we are having",
    "start": "3004920",
    "end": "3011480"
  },
  {
    "text": "baby steps at this point uh in terms of you know diagnosing or at least like navigating the user or the cloud",
    "start": "3011480",
    "end": "3018160"
  },
  {
    "text": "provider to where the problem is coming from so what I've also found with regards to like Lambda functions and",
    "start": "3018160",
    "end": "3024960"
  },
  {
    "text": "things like that typically I'm using my error blocks in go to make sure that I'm outp putting as much detail as possible as close to the",
    "start": "3024960",
    "end": "3031200"
  },
  {
    "text": "source of the error as possible but traditional things like correlation logging and things like that um with you",
    "start": "3031200",
    "end": "3037920"
  },
  {
    "text": "know with tracing making sure if you have multiple serverless functions that are you know tied together for a",
    "start": "3037920",
    "end": "3043079"
  },
  {
    "text": "specific workflow if you have the same correlation ID across that specific workflow at least you can paint a",
    "start": "3043079",
    "end": "3049559"
  },
  {
    "text": "holistic picture so what happened throughout that thing and even for like request response cycles for http P for",
    "start": "3049559",
    "end": "3056079"
  },
  {
    "text": "Lambda functions for example you'll have situations where you failed in a way where you can't necessarily provide a",
    "start": "3056079",
    "end": "3062920"
  },
  {
    "text": "response back to the collar and it's important that you dump out as kind of much detail as possible because they're",
    "start": "3062920",
    "end": "3067960"
  },
  {
    "text": "going to get a 500 but somewhere under the hood something went wrong that you could have logged so instead of just",
    "start": "3067960",
    "end": "3073119"
  },
  {
    "text": "kind of dumping out that function all together um logging that kind of detail makes it easier to get back to what",
    "start": "3073119",
    "end": "3078640"
  },
  {
    "text": "caused it one interesting thing is like um you know you have to have like some sort of instrumentation already in your",
    "start": "3078640",
    "end": "3086119"
  },
  {
    "text": "function or whatever and it's just like hard for people to determine what the instrument I think we are doing not",
    "start": "3086119",
    "end": "3091720"
  },
  {
    "text": "enough work in terms of like you know maybe investing in like postmortem debugging and that type of stuff so you",
    "start": "3091720",
    "end": "3097440"
  },
  {
    "text": "can just like at a later time go and like put a break point just get a snapshot of the you know existing",
    "start": "3097440",
    "end": "3102960"
  },
  {
    "text": "instance and like take a look at some of the variables or uh you know something like that but yeah I mean I think we're",
    "start": "3102960",
    "end": "3109799"
  },
  {
    "text": "baby stepping like absolutely no way to navigate to the problem absolutely you know no easy way to correlate with other",
    "start": "3109799",
    "end": "3117040"
  },
  {
    "text": "signals and uh it's an organizational problem also I work with like I when I was working on the instrumentation team",
    "start": "3117040",
    "end": "3122760"
  },
  {
    "text": "at Google it was you had to like collaborate with all these 50 different products and everybody has a different",
    "start": "3122760",
    "end": "3129599"
  },
  {
    "text": "you know mindset about what instrumentation should be and how it should be and uh there are very few",
    "start": "3129599",
    "end": "3135760"
  },
  {
    "text": "standards in this area which is also not really nice because Google is doing its own thing and then you're you know just",
    "start": "3135760",
    "end": "3142520"
  },
  {
    "text": "going to another cloud provider AWS is doing their own thing we don't really you know can participate into each",
    "start": "3142520",
    "end": "3148720"
  },
  {
    "text": "other's traces or we cannot correlate and from a user perspective this is ter",
    "start": "3148720",
    "end": "3154200"
  },
  {
    "text": "so even though there are not any standard approaches um would you say doing things common things like",
    "start": "3154200",
    "end": "3160200"
  },
  {
    "text": "correlation logging for example like if we go to the most fundamental level right you end up with a log somewhere whether that's cloudwatch logs whether",
    "start": "3160200",
    "end": "3166640"
  },
  {
    "text": "you end in Sumo or whatever provider you use there's some kind of fundamental things that people can do even if they",
    "start": "3166640",
    "end": "3172400"
  },
  {
    "text": "have to kind of roll their own solution in order to trace back can understand what happened with their execution yeah",
    "start": "3172400",
    "end": "3178319"
  },
  {
    "text": "when I mean standards I just specifically mean just a trace ID standard which is actually happening",
    "start": "3178319",
    "end": "3183440"
  },
  {
    "text": "right now so maybe in couple of years we will be able to understand each other's Trace ID and so fundamental because you",
    "start": "3183440",
    "end": "3189559"
  },
  {
    "text": "correlate everything with a trace ID so at least we're doing that yeah that'll be great when that happens when it's all",
    "start": "3189559",
    "end": "3195079"
  },
  {
    "text": "unified yeah it's just like distribut tracing is such an organically grown tool I think there was no discussion",
    "start": "3195079",
    "end": "3202599"
  },
  {
    "text": "between providers for a long time and then all of a sudden people realize that like it's actually against distributed",
    "start": "3202599",
    "end": "3208640"
  },
  {
    "text": "tracing not to have a standard because we are trying to compete with each other and uh we can't really go to the you",
    "start": "3208640",
    "end": "3214559"
  },
  {
    "text": "know infrastructure teams or like you know Cloud providers to go and like implement this you know propagation",
    "start": "3214559",
    "end": "3221960"
  },
  {
    "text": "format so the the lack of consensus is actually against the fact that distributed tracing is not becoming a",
    "start": "3221960",
    "end": "3228160"
  },
  {
    "text": "mainstream tool so everybody got together a couple two years ago almost uh to draft proposal and the prop",
    "start": "3228160",
    "end": "3235160"
  },
  {
    "text": "proposal is now becoming more mature it's going to be more of a standard under under w3c yeah so yeah it's going",
    "start": "3235160",
    "end": "3241079"
  },
  {
    "text": "to be a first class header that everybody recognizes and it's going to be super nice because you can just go to",
    "start": "3241079",
    "end": "3248599"
  },
  {
    "text": "myql and like hey just you know honor this header or something in in some way",
    "start": "3248599",
    "end": "3254640"
  },
  {
    "text": "you can basically you know just go to any infrastructure tool and ask them to do something about it right at least",
    "start": "3254640",
    "end": "3261799"
  },
  {
    "text": "pass it so the trace is not you know broken that sounds really awesome is there anywhere we could read about more",
    "start": "3261799",
    "end": "3268119"
  },
  {
    "text": "about that kind of thing is there proposal that's currently circulating yeah there's a repo um I can maybe share",
    "start": "3268119",
    "end": "3276160"
  },
  {
    "text": "the repo letter would you be would you be by chance talking about the uh open Telemetry yeah I can talk about that as",
    "start": "3276160",
    "end": "3283359"
  },
  {
    "text": "well uh this is this is a different initiative uh so open Telemetry is more of like an instrumentation Library",
    "start": "3283359",
    "end": "3290000"
  },
  {
    "text": "project so uh this standard is a wire like a header you know format standard",
    "start": "3290000",
    "end": "3295319"
  },
  {
    "text": "uh it's it's under um github.com w3c tr- context and you can read the",
    "start": "3295319",
    "end": "3302520"
  },
  {
    "text": "proposal and like there's already discussion in like you know um some implementations for some languages that",
    "start": "3302520",
    "end": "3309119"
  },
  {
    "text": "that's going to be the overall standard in a couple of years very cool that would be huge and you know like pretty",
    "start": "3309119",
    "end": "3315400"
  },
  {
    "text": "much every distributed tracing vendor including Cloud providers like you know AWS and Google is actually contributing",
    "start": "3315400",
    "end": "3321480"
  },
  {
    "text": "that's huge yeah awesome so we've been talking about so sort of the the technical pros and cons some of the",
    "start": "3321480",
    "end": "3328039"
  },
  {
    "text": "challenges some of the things that that sort of you need to sort of watch out for I feel like we've been more sort of",
    "start": "3328039",
    "end": "3334839"
  },
  {
    "text": "telling a cautionary tale than anything else I mean the the I think we all agree",
    "start": "3334839",
    "end": "3341039"
  },
  {
    "text": "on the panel here that servoless or yeah I I'll I'll I'll use",
    "start": "3341039",
    "end": "3346200"
  },
  {
    "text": "that term because there's I can't think of a better term it's a marketing ter but I can't think of a better one to Encompass all the things that that make",
    "start": "3346200",
    "end": "3352359"
  },
  {
    "text": "up servus but we know in general that it's it's a good thing it gives uh more",
    "start": "3352359",
    "end": "3357440"
  },
  {
    "text": "options right more more ways to sort of uh build the right abstraction into your infrastructure into your into your world",
    "start": "3357440",
    "end": "3364039"
  },
  {
    "text": "right whatever business problems you're solving but from an opportunity standpoint right for for go developers",
    "start": "3364039",
    "end": "3369319"
  },
  {
    "text": "like what is the draw why should I invest time right in learning how to do",
    "start": "3369319",
    "end": "3375599"
  },
  {
    "text": "servoless perhaps you you work somewhere where you know the only provider you allowed to use is a gcp maybe it's only",
    "start": "3375599",
    "end": "3381799"
  },
  {
    "text": "AWS or why why should you spend time learning any one vendors or even if you want to go AC cross vendor right why",
    "start": "3381799",
    "end": "3388160"
  },
  {
    "text": "would you want to invest time right and effort into learning the right way to do Serv list because it's not just about",
    "start": "3388160",
    "end": "3394160"
  },
  {
    "text": "the syntax not just about the code it it requires a different way of thinking it requires you to learn a bit more right",
    "start": "3394160",
    "end": "3399880"
  },
  {
    "text": "about building these kinds of distributed systems why as a good developer would I want to invest this time so I think a lot of modern",
    "start": "3399880",
    "end": "3406480"
  },
  {
    "text": "developers end up doing a lot more glue work and stitching work than like just",
    "start": "3406480",
    "end": "3412720"
  },
  {
    "text": "straight up development because traditionally there were systems that you would have to write yourself but because they're being abstracted and",
    "start": "3412720",
    "end": "3419480"
  },
  {
    "text": "they're being written for you and they become provider kind of driven you're doing more stitching work nowadays you're doing more glue work and running",
    "start": "3419480",
    "end": "3426119"
  },
  {
    "text": "infrastructure just to do glue work kind of is demoralizing and you kind of have to maintain these things but I really",
    "start": "3426119",
    "end": "3431880"
  },
  {
    "text": "found that's the sweet spot for me with serverless being able to write all these Integrations write all this glue work",
    "start": "3431880",
    "end": "3437480"
  },
  {
    "text": "but have that infrastructure also be that thing that's abstracted away so that these systems flow as if it's a",
    "start": "3437480",
    "end": "3444480"
  },
  {
    "text": "pure vendor solution without having to you know run your own underlying Hardware your own underlying instances",
    "start": "3444480",
    "end": "3449960"
  },
  {
    "text": "and things like that so I really think that's what makes it worth it and if I think you think about your own workload you'll find that you're writing a lot of",
    "start": "3449960",
    "end": "3455799"
  },
  {
    "text": "glue layers for things um integration layers and glue layers um so I think that's a definitely a good reason to",
    "start": "3455799",
    "end": "3461440"
  },
  {
    "text": "learn it but also I think it helps you practice just stateless kind of programming and making sure you're",
    "start": "3461440",
    "end": "3467720"
  },
  {
    "text": "you're kind of building these kind of distributed applications without having to purely get down into the nitty-gritty",
    "start": "3467720",
    "end": "3473920"
  },
  {
    "text": "of building distributed systems and things like that so it's a good I think entry point to understanding how these",
    "start": "3473920",
    "end": "3479440"
  },
  {
    "text": "things kind of start working together to form wider systems that are achieving a common goal yeah so I Echo that for me",
    "start": "3479440",
    "end": "3487559"
  },
  {
    "text": "it's about if I have to write that glue I don't really know if I'm doing it the right way it's an extra kind of",
    "start": "3487559",
    "end": "3494400"
  },
  {
    "text": "discipline or something like I could make some silly mistakes and that would kind of cost me a lot of time or",
    "start": "3494400",
    "end": "3500400"
  },
  {
    "text": "something else later so I feel like cous is a kind of empowering thing for a",
    "start": "3500400",
    "end": "3506000"
  },
  {
    "text": "developer so that you can focus on the bit that makes what you're doing special",
    "start": "3506000",
    "end": "3512000"
  },
  {
    "text": "and leave the plumbing to somebody else that's why I like it if it feels like",
    "start": "3512000",
    "end": "3517839"
  },
  {
    "text": "I'm empowered and I don't need to go and seek out help just to do things that are really secondary to what I'm actually",
    "start": "3517839",
    "end": "3526280"
  },
  {
    "text": "trying to do or what I'm focused on yeah for me it's more about productivity right like it's a limited maybe",
    "start": "3526280",
    "end": "3532200"
  },
  {
    "text": "environment but if it's it matches what I need and why would I even have to care about like all the you know lower level",
    "start": "3532200",
    "end": "3538720"
  },
  {
    "text": "infrastructure I would just push things and pay as I go I think that's what the you know the promise behind Cloud was",
    "start": "3538720",
    "end": "3545880"
  },
  {
    "text": "initially so I would start there and if I need less limitations then I can always fall back to the lower levels for",
    "start": "3545880",
    "end": "3553319"
  },
  {
    "text": "me a good starting point is just you know having a more upated maybe more limited environment and then like go you",
    "start": "3553319",
    "end": "3559039"
  },
  {
    "text": "know just delegate in some of the work to my cloud provider and then go beyond that and like uh to the lower levels if",
    "start": "3559039",
    "end": "3566440"
  },
  {
    "text": "I need to agreed I think um in in the channel I think let me let me see if I",
    "start": "3566440",
    "end": "3571640"
  },
  {
    "text": "get I don't want to I don't want to mispronounce his name um anti an cill he mentioned that in in in the go time um",
    "start": "3571640",
    "end": "3578799"
  },
  {
    "text": "channel on slack that basically learning how to do serous uh uh is actually a good way to actually learn how to build",
    "start": "3578799",
    "end": "3585400"
  },
  {
    "text": "you know non-serous systems better as well and and I think I totally agree with that because I've I've noticed a",
    "start": "3585400",
    "end": "3591640"
  },
  {
    "text": "certain level of sort of a uh um concern that I that I've started to have since I've begun sort of doing servess work",
    "start": "3591640",
    "end": "3598640"
  },
  {
    "text": "that I TR traditionally didn't didn't have things like oh you know this this thing if I can make this stateless right",
    "start": "3598640",
    "end": "3604079"
  },
  {
    "text": "then I have less issues with you know I don't have to have sticky sessions I don't have to have you know there's different a lot of different things a",
    "start": "3604079",
    "end": "3609480"
  },
  {
    "text": "lot of different concerns that I basically things I used to take for granted right you know back in the model model kind of days the deployment model",
    "start": "3609480",
    "end": "3615799"
  },
  {
    "text": "that now I'm more concerned about I'm I'm sort of making deliberate decisions about whether to have this or not have",
    "start": "3615799",
    "end": "3620880"
  },
  {
    "text": "that and again with the you know with microservices I guess you can call Serv Nano Services we didn't get into that",
    "start": "3620880",
    "end": "3626319"
  },
  {
    "text": "buzzword suit but you know like that that affects really how you sort of approach building these sort of backend",
    "start": "3626319",
    "end": "3632119"
  },
  {
    "text": "systems really for me that's the big sort of takeaway here is like you you you build you learn to solve these",
    "start": "3632119",
    "end": "3637319"
  },
  {
    "text": "problems not really worrying too much about which vendor is going to run as long as you solve the problem from a",
    "start": "3637319",
    "end": "3642599"
  },
  {
    "text": "from a business standpoint and let the sort of deployment model whichever vendor you use um let that be sort of a",
    "start": "3642599",
    "end": "3649200"
  },
  {
    "text": "perhaps not the very last concern um but don't let basically a vendor provide the Box in which you can sort of build these",
    "start": "3649200",
    "end": "3655079"
  },
  {
    "text": "things right you you develop your your wares and then you worry about okay how do I deploy this thing that actually",
    "start": "3655079",
    "end": "3660599"
  },
  {
    "text": "already accomplishes the business functionality that I need now how do I deploy it and these other things so",
    "start": "3660599",
    "end": "3666799"
  },
  {
    "text": "anything else we want to add to that before we uh before we wrap this up I think we we've we've uh gotten deep in",
    "start": "3666799",
    "end": "3672400"
  },
  {
    "text": "some areas and shared some light them some others I wanted to just shout out one more gotcha with serverless in",
    "start": "3672400",
    "end": "3678240"
  },
  {
    "text": "general the massive parallelism that you get from cist can also be something that gets that you know you get caught up",
    "start": "3678240",
    "end": "3685160"
  },
  {
    "text": "with so for example Lambda could scale out I think to a thousand executions at the same time and your poor databas is",
    "start": "3685160",
    "end": "3691160"
  },
  {
    "text": "on the back end trying to handle those requests and you you know you max out your connection so being mindful traditionally you have connection pools",
    "start": "3691160",
    "end": "3697640"
  },
  {
    "text": "and things like that where you limit those things but now because you're in this kind of multi-parallel execution",
    "start": "3697640",
    "end": "3703000"
  },
  {
    "text": "environment you may have a thousand connections all of a sudden stampeding against your database so just understand",
    "start": "3703000",
    "end": "3708039"
  },
  {
    "text": "those concurrency models and things like that and make sure that you're counting for them when you're reaching out to your resources and your and your",
    "start": "3708039",
    "end": "3714039"
  },
  {
    "text": "environment because they could come back and bite you awesome awesome well this has been a very enlightening show um",
    "start": "3714039",
    "end": "3720000"
  },
  {
    "text": "I've learned some things and I've been doing Serv for a little while so I hope this uh was great for you the listener",
    "start": "3720000",
    "end": "3725559"
  },
  {
    "text": "um big thank you for uh to Jana for for coming back and we miss you Jana he's glad to have you back on the show Matt",
    "start": "3725559",
    "end": "3732599"
  },
  {
    "text": "Mr Mr Matt ryer I borrowed your your accent a little bit I'm not sure if you no this but I'm trying to to sound you",
    "start": "3732599",
    "end": "3739279"
  },
  {
    "text": "know um um as as as cool as you it was actually the only bit of yours I could understand",
    "start": "3739279",
    "end": "3746359"
  },
  {
    "text": "nice nice and and a big thank you to our special guest today uh Stevens and Jean Pierre my fellow Haitian born thank you",
    "start": "3746640",
    "end": "3754400"
  },
  {
    "text": "for having me all right it's it's been great um and for those of you who are listening live um hopefully this was a",
    "start": "3754400",
    "end": "3760760"
  },
  {
    "text": "useful uh to you as well and and we we love the participation in the slack Channel um Keep It Coming um but yeah if",
    "start": "3760760",
    "end": "3766440"
  },
  {
    "text": "you have show ideas as well you can absolutely go on on on the slack Channel go time FM and recommend some shows and",
    "start": "3766440",
    "end": "3773240"
  },
  {
    "text": "and we'll we'll take it on and do our best with that but with that and also thank you to behind the scenes you haven't heard much from him but John",
    "start": "3773240",
    "end": "3779960"
  },
  {
    "text": "Calhoun has been sort of uh doing some of the technical work to make sure this podcast gets recorded properly and and",
    "start": "3779960",
    "end": "3786039"
  },
  {
    "text": "everybody sounds good so thank you John the reason we haven't heard from him by the way is because he says I don't know",
    "start": "3786039",
    "end": "3791480"
  },
  {
    "text": "anything about Ser serverless all I do is use digital ocean and Google Cloud platform and things it just he's he",
    "start": "3791480",
    "end": "3798319"
  },
  {
    "text": "really doesn't know about it because he's he does he's been doing it and didn't realize that's the point right",
    "start": "3798319",
    "end": "3803960"
  },
  {
    "text": "awesome awesome well thank you so much for listening and we'll catch you on the next go",
    "start": "3803960",
    "end": "3810160"
  },
  {
    "text": "time all right thank you for tuning in to this week's episode of go time if you're not yet hang with us in go for",
    "start": "3811640",
    "end": "3817799"
  },
  {
    "text": "slack we have a channel called go time FM look it up you'll find us hang with us during the live shows connect with",
    "start": "3817799",
    "end": "3824319"
  },
  {
    "text": "other members of the community share stories share code share copy recipes whatever it's a lot of fun also we have",
    "start": "3824319",
    "end": "3831359"
  },
  {
    "text": "discussions at Chang law.com on every episode head to changel love.com slgo",
    "start": "3831359",
    "end": "3836640"
  },
  {
    "text": "time find this episode and discuss it with the community also thanks to fast the our bandwidth partner rbar for",
    "start": "3836640",
    "end": "3842599"
  },
  {
    "text": "helping us move fast and fix things and Leno for hosting the change law platform our music is produced by the mysterious",
    "start": "3842599",
    "end": "3849359"
  },
  {
    "text": "break master cylinder and if you want to hear more awesome podcasts like this subscribe to our Master feed it's one",
    "start": "3849359",
    "end": "3855359"
  },
  {
    "text": "feed to rule them all plus some extras that only hit the master feed and to Chang law.com saster or search for Chang",
    "start": "3855359",
    "end": "3862720"
  },
  {
    "text": "law master in your podcast you'll find us thanks for tuning in we'll see you next",
    "start": "3862720",
    "end": "3868460"
  },
  {
    "text": "[Music]",
    "start": "3868460",
    "end": "3892320"
  },
  {
    "text": "week [Music]",
    "start": "3893160",
    "end": "3915699"
  },
  {
    "text": "TR",
    "start": "3918079",
    "end": "3921079"
  }
]