[
  {
    "text": "is that enough of a reason to decide to pass it by a pointer always just by default well I guess I'm trying to",
    "start": "160",
    "end": "6879"
  },
  {
    "text": "figure out how your example works so your example says you're holding a map that contains a big bite slice or",
    "start": "6879",
    "end": "12679"
  },
  {
    "text": "something like that I just mean a struct your own your own type but it's got a lot of you consider it big I see but",
    "start": "12679",
    "end": "19760"
  },
  {
    "text": "maybe it makes sense in your API that you know you don't have a pointed because you're not going to be modifying this so you want to pass it in but do",
    "start": "19760",
    "end": "27000"
  },
  {
    "text": "you get a performance penalty if it's copying all that data into that you definitely do and I think that there's a",
    "start": "27000",
    "end": "32680"
  },
  {
    "text": "judgment call about what's that threshold like when is it worth it to allocate and pass this thing by pointer",
    "start": "32680",
    "end": "38719"
  },
  {
    "text": "and we haven't even really talked about the performance costs of allocation really just yet I'm sure that will come up",
    "start": "38719",
    "end": "45559"
  },
  {
    "text": "soon big thanks to our partners Leno fastly and launch Darkly we love Leno",
    "start": "45559",
    "end": "50680"
  },
  {
    "text": "they keep it fast and simple get a $100 in credit at lin.com changelog our",
    "start": "50680",
    "end": "56199"
  },
  {
    "text": "bandwidth is provided by fastly learn more at fastly.com and get your feature Flags Power by",
    "start": "56199",
    "end": "62000"
  },
  {
    "text": "launch darkley get a demo at launch dark.com this episode is brought to you by Source",
    "start": "62000",
    "end": "69799"
  },
  {
    "text": "graph Source graph is universal code search that let you move fast even in big code bases here CTO and co-founder",
    "start": "69799",
    "end": "76400"
  },
  {
    "text": "bangl explaining the problems that Source graft solves for software teams yeah so at a high level the problems",
    "start": "76400",
    "end": "82400"
  },
  {
    "text": "that Source graft solves it's this problem of for any given developer there's kind of two types of code in the",
    "start": "82400",
    "end": "87840"
  },
  {
    "text": "world roughly speaking there's the the code that you wrote and understand like the back of your hand and then there's",
    "start": "87840",
    "end": "94240"
  },
  {
    "text": "the code that some idiot out there wrote or you know alternatively if you know",
    "start": "94240",
    "end": "99560"
  },
  {
    "text": "you don't like the term idiot it's the code that some inscrutable genius wrote and that you're trying to understand and often times that inscrutable genius is",
    "start": "99560",
    "end": "105719"
  },
  {
    "text": "like you from you know a year ago and and you're going back and and trying to make Haz or Tales of of what's going on",
    "start": "105719",
    "end": "112399"
  },
  {
    "text": "and really Source craft is about making that code that some idiot or inscribable",
    "start": "112399",
    "end": "118000"
  },
  {
    "text": "genius wrote feel more like the code that you wrote and understand kind of intuitively it's all about helping you",
    "start": "118000",
    "end": "124560"
  },
  {
    "text": "grock all the code that's out there all the code that's in your organization all the code that is relevant to you in open",
    "start": "124560",
    "end": "130239"
  },
  {
    "text": "source all the code that you need to understand in order to do your job which is to build the feature write the new",
    "start": "130239",
    "end": "136319"
  },
  {
    "text": "code fix the bug Etc all right learn how Source craft can help your team at info. source.com",
    "start": "136319",
    "end": "142440"
  },
  {
    "text": "changelog again info. source.com",
    "start": "142440",
    "end": "147120"
  },
  {
    "text": "changelog",
    "start": "148760",
    "end": "151760"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "158959",
    "end": "165480"
  },
  {
    "text": "from around the go Community if you like go time you might enjoy our new show Ship It featuring conversations focused",
    "start": "165480",
    "end": "172239"
  },
  {
    "text": "on Ops infra code real world experiments on our open source platform what's not",
    "start": "172239",
    "end": "177720"
  },
  {
    "text": "to love check it out at change / shiit or you'll find in your favorite podcast app okay here we",
    "start": "177720",
    "end": "183710"
  },
  {
    "text": "[Music]",
    "start": "183710",
    "end": "190899"
  },
  {
    "text": "go hello and welcome to go time I'm Matt Riya and today we're talking about",
    "start": "192519",
    "end": "199799"
  },
  {
    "text": "memory management we're joined by distinguished engineer Brian boram from",
    "start": "199799",
    "end": "206280"
  },
  {
    "text": "grafana Hello Brian hi there hi Matt well welcome to go time thank you for having me no it's our pleasure we're",
    "start": "206280",
    "end": "213319"
  },
  {
    "text": "also joined today by director of engineering at cockroach Labs it's Jordan Lewis hello Jordan hi everyone",
    "start": "213319",
    "end": "219560"
  },
  {
    "text": "nice to see you over this video yeah good thank you I like the way you said that in a very sort of natural and and",
    "start": "219560",
    "end": "226319"
  },
  {
    "text": "authentic way we also have my friend and yours John Calhoun hello John hey Matt",
    "start": "226319",
    "end": "232959"
  },
  {
    "text": "how are you I'm good mate welcome back it's been a while how are you doing it's been a while since we've done this together that's right yeah you were on",
    "start": "232959",
    "end": "238920"
  },
  {
    "text": "it last week wasn't you um it's welcome back to me if anything you want to say it or oh welcome back Matt sorry oh",
    "start": "238920",
    "end": "245360"
  },
  {
    "text": "thank you yeah no thanks good to be back I figure if you're hosting I'll just kind of let you pretend like you've been here yeah fair play okay well I also",
    "start": "245360",
    "end": "253040"
  },
  {
    "text": "like to do this little regular slot where I do a shout at or a shout out to",
    "start": "253040",
    "end": "258600"
  },
  {
    "text": "a go Meetup from the around the community today we are shouting at the",
    "start": "258600",
    "end": "264320"
  },
  {
    "text": "Utah go user group and women who go Utah great groups there Mariah Peterson",
    "start": "264320",
    "end": "270280"
  },
  {
    "text": "tweeted that one at me so you've been shouted at now and if you're in that area and when you can you know check",
    "start": "270280",
    "end": "278039"
  },
  {
    "text": "them out go and join them in okay I'm interested in this subject a lot because",
    "start": "278039",
    "end": "284400"
  },
  {
    "text": "it's kind of like one of those ones that I think has lots of interesting corners",
    "start": "284400",
    "end": "290720"
  },
  {
    "text": "but I think also there's a good like having a good understanding of what's really going on can only help us maybe",
    "start": "290720",
    "end": "296680"
  },
  {
    "text": "we could start with a little bit of History what was memory manager agement like in sort of programming languages",
    "start": "296680",
    "end": "302600"
  },
  {
    "text": "before go takes me back really because I I have programmed in C and C++ and a few",
    "start": "302600",
    "end": "309280"
  },
  {
    "text": "other things and uh basically in C you call Malo when you want some memory and",
    "start": "309280",
    "end": "314840"
  },
  {
    "text": "you call free when you want to give it back you can have things on the stack if you don't want to do that and those are",
    "start": "314840",
    "end": "320520"
  },
  {
    "text": "your options so memory leaks where you just forgot to free things were very common uh memory overwrites where you",
    "start": "320520",
    "end": "328520"
  },
  {
    "text": "realize that someone else wanted that memory also happen pretty hard to get it",
    "start": "328520",
    "end": "333759"
  },
  {
    "text": "absolutely perfect yeah it's funny isn't it like cuz you think in the simple case that's quite easy you're going to ask",
    "start": "333759",
    "end": "340000"
  },
  {
    "text": "for some memory and use it and then give it back but of course like as soon as you have anything a little bit more",
    "start": "340000",
    "end": "346479"
  },
  {
    "text": "complicated that that becomes a nightmare doesn't it I feel like anybody who's tried to teach with that style of",
    "start": "346479",
    "end": "352440"
  },
  {
    "text": "programming should pretty quickly realize that even the simple case is not simple to somebody who's not used to it",
    "start": "352440",
    "end": "358880"
  },
  {
    "text": "yeah I was going to say so you get into things like reference counting where you try and try and keep track of how many",
    "start": "358880",
    "end": "364400"
  },
  {
    "text": "different things in your program want the same piece of memory and when you count down to zero now you can free it I",
    "start": "364400",
    "end": "370039"
  },
  {
    "text": "used to do that by by hand on uh iOS programming it's got a little bit more automated since then yeah it's it's",
    "start": "370039",
    "end": "377039"
  },
  {
    "text": "always it's always a bit of a challenge yeah I had that same thing so I I kind of started in languages where memory was",
    "start": "377039",
    "end": "383840"
  },
  {
    "text": "managed actually like well scripting languages and uh C languages like that",
    "start": "383840",
    "end": "390440"
  },
  {
    "text": "and then I wanted to do something for iOS and so I learned Objective C and",
    "start": "390440",
    "end": "395479"
  },
  {
    "text": "this was before the arc The Arc automatic reference counting that you're talking about before that where you had",
    "start": "395479",
    "end": "401319"
  },
  {
    "text": "to do the allocations and and things yourself and it is like it is hard you",
    "start": "401319",
    "end": "407639"
  },
  {
    "text": "definitely end up relying a lot on the tooling to sort of you know you use the app in the simulator and watch the",
    "start": "407639",
    "end": "412680"
  },
  {
    "text": "memory for if it's leaking or it shouldn't and things like that but it was so nice when that Arc stuff came out",
    "start": "412680",
    "end": "418840"
  },
  {
    "text": "and suddenly you just didn't have to kind of worry about that now I think it was just the compiler wasn't it was just",
    "start": "418840",
    "end": "424599"
  },
  {
    "text": "would do it for you it was checking where things were used and where they could possibly be used and you know when they sort of fall out of scope then you",
    "start": "424599",
    "end": "431720"
  },
  {
    "text": "know maybe they could be cleaned up it's but yeah so we we kind of take it for granted go has always had this hasn't it",
    "start": "431720",
    "end": "437639"
  },
  {
    "text": "I was going to say I feel like I'm remaining quiet because my whole professional career I've only used",
    "start": "437639",
    "end": "443080"
  },
  {
    "text": "languages with garbage collection I did a little bit of manual memory management stuff in school and it was hard and it",
    "start": "443080",
    "end": "449120"
  },
  {
    "text": "didn't matter as much that was kind of the great thing about it you could get it a little bit wrong and since it was just an academic project didn't matter",
    "start": "449120",
    "end": "454879"
  },
  {
    "text": "too much I didn't want to be the first one to mention the word lifetime but for me whatever you do with memory",
    "start": "454879",
    "end": "461400"
  },
  {
    "text": "management whether it's a language that has a lifetime kind of thing in it or not it's all about thinking about those",
    "start": "461400",
    "end": "467400"
  },
  {
    "text": "object lifetimes that's what it comes down to memory managed or not right yeah so maybe you could elaborate a little",
    "start": "467400",
    "end": "472520"
  },
  {
    "text": "bit on that then in the context of go if we have like just the very simple case",
    "start": "472520",
    "end": "477919"
  },
  {
    "text": "we're going to have a function we're going to declare a variable inside that function we're going to assign that to Value going to give it a value and maybe",
    "start": "477919",
    "end": "485280"
  },
  {
    "text": "then we're going to print it out and then we're going to return we're not going to return it we're just going to",
    "start": "485280",
    "end": "490440"
  },
  {
    "text": "leave it what's going on in that what's being allocated there for us and when does that happen I think it kind of",
    "start": "490440",
    "end": "496280"
  },
  {
    "text": "depends on what the function you're calling is right I think in some cases depending on what that function needs to",
    "start": "496280",
    "end": "502120"
  },
  {
    "text": "do with the object that you're passing it you may or may not be able to Simply allocate It On The Stack you might be",
    "start": "502120",
    "end": "508560"
  },
  {
    "text": "able to not have to use any kind of malok at all and just let it live on the stack get",
    "start": "508560",
    "end": "514279"
  },
  {
    "text": "past to this thing and get freed by the stack magic freeness of the world if the",
    "start": "514279",
    "end": "519800"
  },
  {
    "text": "function is doing something more complicated if it has to store it somewhere or it is more if it's not even storing it anywhere but the the compiler",
    "start": "519800",
    "end": "526080"
  },
  {
    "text": "can't infer that it's not storing anywhere it might actually cause code that's generated for that function call",
    "start": "526080",
    "end": "533640"
  },
  {
    "text": "to require that the object that you've allocated gets promoted to the Heap which is kind of where the the The Story",
    "start": "533640",
    "end": "540040"
  },
  {
    "text": "begins it does very quickly get complicated doesn't it like for someone like me who's who spent decades trying",
    "start": "540040",
    "end": "545959"
  },
  {
    "text": "to both understand what's going on and make it go faster usually kind of understand all the ins and outs but if",
    "start": "545959",
    "end": "551720"
  },
  {
    "text": "you're as a beginner to all this it's you know just kind of looks like a variable what are we talking about so I",
    "start": "551720",
    "end": "558040"
  },
  {
    "text": "think the two things the stack and the Heap every go routine has a stack and mostly your your local variables things",
    "start": "558040",
    "end": "565880"
  },
  {
    "text": "that you do in the course of a function will live on the stack and it's very very fast because as you come into a",
    "start": "565880",
    "end": "572880"
  },
  {
    "text": "function we just kind of add you know we say the compiler figures it out compiler figures out this function is going to",
    "start": "572880",
    "end": "578240"
  },
  {
    "text": "need 70 bytes of variables so just add 70 to a a number which is the stack",
    "start": "578240",
    "end": "584760"
  },
  {
    "text": "pointer and then we use that we use that memory that 70 bytes we're using that for local storage local variables you",
    "start": "584760",
    "end": "591360"
  },
  {
    "text": "come out of the function you sub subtract 20 uh 70 I'm sorry so you're just adding and subtracting and as you",
    "start": "591360",
    "end": "597320"
  },
  {
    "text": "call more functions you add more and as you you return from functions you subtract and the stack is a really fast",
    "start": "597320",
    "end": "603839"
  },
  {
    "text": "and simple thing but that's all you can do and and that's why what Jordan talked about lifetime comes into it if you need",
    "start": "603839",
    "end": "610120"
  },
  {
    "text": "a piece of data to hang around while you go call a bunch of other things or you're going to keep that data and pass",
    "start": "610120",
    "end": "616760"
  },
  {
    "text": "it between different go routines or you're going to cash it for the entire life of your program that needs to live",
    "start": "616760",
    "end": "622240"
  },
  {
    "text": "somewhere else that can't live on the stack of one go routine so we put it in this this other place which which goes",
    "start": "622240",
    "end": "628320"
  },
  {
    "text": "by the name Heat Heap as in just a like a big old heap of stuff it doesn't mean anything particularly technical it's",
    "start": "628320",
    "end": "635480"
  },
  {
    "text": "just the word that we use for the way that those longer lived or or at least might be very shortlived but we don't",
    "start": "635480",
    "end": "641959"
  },
  {
    "text": "know for sure so we put it on the Heap and then it can live for a long time yeah so but do you need to know about",
    "start": "641959",
    "end": "648320"
  },
  {
    "text": "this in order to write go programs I would say not I would say that is part",
    "start": "648320",
    "end": "654839"
  },
  {
    "text": "of the magic of go you know that's the intention of the authors that you you",
    "start": "654839",
    "end": "659920"
  },
  {
    "text": "just write variables and you pass them around and you can do things that are a complete nightmare in C you know you can",
    "start": "659920",
    "end": "666240"
  },
  {
    "text": "return the address of a local variable from a function that's a pretty much an instant crash in C if it's not an",
    "start": "666240",
    "end": "673160"
  },
  {
    "text": "instant crash then it's a really weird bug but it's one of one of those ones",
    "start": "673160",
    "end": "678560"
  },
  {
    "text": "that will take weeks to find if it doesn't crash instantly but um so go uh",
    "start": "678560",
    "end": "683760"
  },
  {
    "text": "certainly makes it look easy I I would say I would agree with that to me it feels like it really is trying to be a",
    "start": "683760",
    "end": "690120"
  },
  {
    "text": "language where you can not have to think about any of these details if you don't want to but if you want to it also gives",
    "start": "690120",
    "end": "696720"
  },
  {
    "text": "you some of the predictability I would say that you would expect from a",
    "start": "696720",
    "end": "701800"
  },
  {
    "text": "language that is doing sane stuff using a stack and a heap kind of thing you can for the most part predict when something",
    "start": "701800",
    "end": "708279"
  },
  {
    "text": "is going to live on the stack versus something that's going to live on the Heap and that can really help you when working on problems that require",
    "start": "708279",
    "end": "714600"
  },
  {
    "text": "performance yeah one thing that's kind of interesting is uh what is the line between not having to know about the",
    "start": "714600",
    "end": "720839"
  },
  {
    "text": "stack and the Heap versus needing or not needing to know about say pointers",
    "start": "720839",
    "end": "726240"
  },
  {
    "text": "versus values that's something that I think trips up a lot of go newcomers especially ones that are coming from",
    "start": "726240",
    "end": "731760"
  },
  {
    "text": "languages like maybe python where you're really not thinking about this stuff at all but I I think that's a little bit of an interesting choice you know exposing",
    "start": "731760",
    "end": "738880"
  },
  {
    "text": "the detail about pointers versus values and not really thinking so much about stack versus Heap so how do you decide",
    "start": "738880",
    "end": "745800"
  },
  {
    "text": "then just for anyone listening how do you make the decision about whether you're going to use a pointer or use the",
    "start": "745800",
    "end": "751959"
  },
  {
    "text": "the value and I we should to say like for the difference like for example if you've got a function that takes a",
    "start": "751959",
    "end": "757160"
  },
  {
    "text": "pointer you're literally just passing in a a reference to something else which is",
    "start": "757160",
    "end": "762760"
  },
  {
    "text": "obviously a fixed size whereas you could be pointing to either big data or maybe you just don't know and so you want to",
    "start": "762760",
    "end": "769079"
  },
  {
    "text": "be safe or you pass it without it being a poter type and you then are copying the the entire value into the stack",
    "start": "769079",
    "end": "776399"
  },
  {
    "text": "right of the new thing so what's the consideration that you make when it comes to that feel like there's a lot of",
    "start": "776399",
    "end": "782480"
  },
  {
    "text": "them I think this is one of the most tough things that people struggle with right when they're switching to go it's like what is the algorithm that you're",
    "start": "782480",
    "end": "788560"
  },
  {
    "text": "supposed to use in your head for choosing one of these things there's certain things that are definitely constant I'll name one of them which is that if you have an object that has a",
    "start": "788560",
    "end": "797160"
  },
  {
    "text": "method on it or I guess we call receivers in go if that method is going to edit the object that cannot be a",
    "start": "797160",
    "end": "804720"
  },
  {
    "text": "value receiver of an object that has to be a pointer receiver or else you're going to become pretty sad you're going",
    "start": "804720",
    "end": "810079"
  },
  {
    "text": "to run this method and you're it's going to edit you know it's going to say you know object. attribute equals blah the",
    "start": "810079",
    "end": "815399"
  },
  {
    "text": "thing will return and then you'll be extremely confused because the attribute of some object that you pass will have never been edited since really you're",
    "start": "815399",
    "end": "822000"
  },
  {
    "text": "just examining and changing a copy of that of that value that's I'd say that's a number one Pitfall that I think even",
    "start": "822000",
    "end": "828959"
  },
  {
    "text": "I've made mistakes like that and I've been programming in go for about five years now yeah no absolutely I like that",
    "start": "828959",
    "end": "835320"
  },
  {
    "text": "one that is like if you're passing a pointer to an object then it's able to make changes to it this is basically",
    "start": "835320",
    "end": "841480"
  },
  {
    "text": "what you were saying the analogy of taking in an argument there and of course if it's a value it's a copy so you can't that also communicates",
    "start": "841480",
    "end": "849160"
  },
  {
    "text": "something to the user of your API doesn't it as well if you have an API and you can use it as an opportunity",
    "start": "849160",
    "end": "855920"
  },
  {
    "text": "where maybe you've got a mix of these methods or functions and some of them are going to modify and some aren't",
    "start": "855920",
    "end": "862079"
  },
  {
    "text": "would you use that pointer as a sort of signal to that if I recall correctly I think some of the go Style guidelines",
    "start": "862079",
    "end": "869320"
  },
  {
    "text": "kind of suggests that if you use pointers for some of your methods that generally you should use them for all just for consistency sake I mean I get",
    "start": "869320",
    "end": "876199"
  },
  {
    "text": "what you're saying but I think the other side of the argument is that if it's not all consistent it just could lead to some weird code to to manage and and",
    "start": "876199",
    "end": "883000"
  },
  {
    "text": "read they'd rather just keep it simple keep it all the same I believe that's what it was I'd have to go look again",
    "start": "883000",
    "end": "888360"
  },
  {
    "text": "because it's been a while since I've read wherever that was we've talked a lot about other languages and say C++",
    "start": "888360",
    "end": "895040"
  },
  {
    "text": "you have this const word you can put uh so you can explicitly say whether",
    "start": "895040",
    "end": "900959"
  },
  {
    "text": "whether the program is supposed to be able to to modify this thing or Not by by the absence or presence of the word",
    "start": "900959",
    "end": "907320"
  },
  {
    "text": "const you can do that on anything can you do that on any variable on any object type because in go we're sort of",
    "start": "907320",
    "end": "913120"
  },
  {
    "text": "more limited aren't we with our consts in go you a con is a um 3.14 you know",
    "start": "913120",
    "end": "919279"
  },
  {
    "text": "the value of pi could be a con it's a constant it's it's that kind of constant constant of the universe or constant of",
    "start": "919279",
    "end": "925079"
  },
  {
    "text": "your program but in in C++ the word const can appear as a modifier on anything anyway we're talking about go",
    "start": "925079",
    "end": "932079"
  },
  {
    "text": "here cuz it's the Go Time so yeah it's a little bit that certainly if there's no pointer on a variable then you get a",
    "start": "932079",
    "end": "939040"
  },
  {
    "text": "copy of it you do not get to modify the original well I say that but you know it's confusing because um something like",
    "start": "939040",
    "end": "945040"
  },
  {
    "text": "a map is inherently pointer like well that's that's what I the way I say it that um if someone hands you a map in go",
    "start": "945040",
    "end": "951920"
  },
  {
    "text": "and you make a change to it add something to the map you've added it to the original and it kind of makes sense because you you know the map might have",
    "start": "951920",
    "end": "957800"
  },
  {
    "text": "a thousand things in it you don't you don't want the the go runtime to go copying a thousand things every time you",
    "start": "957800",
    "end": "963519"
  },
  {
    "text": "pass a map to a function but it is I think you kind of build up this set of",
    "start": "963519",
    "end": "969000"
  },
  {
    "text": "rules you have to remember like an INT or a struct it's going to copy if I pass the thing by value a map is inherently",
    "start": "969000",
    "end": "976519"
  },
  {
    "text": "pointer like a slice is kind of in between because the I get given a value",
    "start": "976519",
    "end": "981920"
  },
  {
    "text": "of a slice I can write into the the elements of the slice but I can't uh change the length of the original",
    "start": "981920",
    "end": "989120"
  },
  {
    "text": "I can change the length of my copy yeah these are I think mildly confusing parts",
    "start": "989120",
    "end": "994360"
  },
  {
    "text": "of go they are but as you sort of iterated them out then I realized that it doesn't come up often like I suppose",
    "start": "994360",
    "end": "1002319"
  },
  {
    "text": "because now I sort of I'm just second nature I know if you're passing a map around it's a map pointer essentially",
    "start": "1002319",
    "end": "1008399"
  },
  {
    "text": "but yeah I'm sure there will be cases where they that matters but you know this comes back to kind of for me dead",
    "start": "1008399",
    "end": "1015399"
  },
  {
    "text": "simple designs really obvious not trying to do anything clever you know if you're taking slices and you're going to modify",
    "start": "1015399",
    "end": "1021519"
  },
  {
    "text": "them that sounds a little bit magic I'd rather get them through a return argument kind of thing so I don't know",
    "start": "1021519",
    "end": "1027438"
  },
  {
    "text": "if I avoid it through that reason but it is interesting these things and what",
    "start": "1027439",
    "end": "1033160"
  },
  {
    "text": "about the size thing you mentioned a map with a thousand items if you have a a struct and it's just this great big",
    "start": "1033160",
    "end": "1039959"
  },
  {
    "text": "object and it's got some image data in there maybe you know what I mean it feels like a big thing is that enough of",
    "start": "1039959",
    "end": "1046400"
  },
  {
    "text": "a reason to decide to pass it by a pointer always just by default well I",
    "start": "1046400",
    "end": "1051799"
  },
  {
    "text": "guess I'm trying to figure out how your example works so your example says you're holding a map that contains a big",
    "start": "1051799",
    "end": "1057360"
  },
  {
    "text": "bite slice or something like that I just mean a struct your own your own type but",
    "start": "1057360",
    "end": "1062640"
  },
  {
    "text": "it's got a lot of you consider it big I see but maybe it makes sense in your API",
    "start": "1062640",
    "end": "1067799"
  },
  {
    "text": "that you know you don't have a pointed because you're not going to be modifying this so you want to pass it in but do you get a performance penalty if it's",
    "start": "1067799",
    "end": "1074600"
  },
  {
    "text": "copying all that data into the you definitely do and I think that there's a judgment call about what's that",
    "start": "1074600",
    "end": "1079799"
  },
  {
    "text": "threshold like when is it worth it to allocate and pass this thing by pointer and we haven't even really talked about",
    "start": "1079799",
    "end": "1086039"
  },
  {
    "text": "the performance costs of allocation really just yet I'm sure that will come up soon but definitely there's depending",
    "start": "1086039",
    "end": "1091520"
  },
  {
    "text": "on your program to some extent and probably there's some rule of thumb that says maybe if it's I don't know more than what would your your thresholds be",
    "start": "1091520",
    "end": "1097880"
  },
  {
    "text": "like 64 bytes 32 bytes or something like that uh I don't really know well I I can guarantee it will change from one CPU to",
    "start": "1097880",
    "end": "1105280"
  },
  {
    "text": "another probably from one type of memory chip to another there's no one constant",
    "start": "1105280",
    "end": "1110880"
  },
  {
    "text": "number where it's going to you know pass that threshold of whether it's cheaper to copy or cheaper to pass the pointer",
    "start": "1110880",
    "end": "1117880"
  },
  {
    "text": "modern CPUs are amazingly fast at copying memory I bet that number is bigger than you might have guessed if",
    "start": "1117880",
    "end": "1124159"
  },
  {
    "text": "you haven't actively gone out and measured it that's an interesting point and you also mentioned measuring it and",
    "start": "1124159",
    "end": "1129440"
  },
  {
    "text": "I think that's another quite important piece is it's nice to write efficient code but it's you can worry about it too",
    "start": "1129440",
    "end": "1137240"
  },
  {
    "text": "much I think and sometimes it doesn't matter but I don't want to ever discourage people from learning more",
    "start": "1137240",
    "end": "1143720"
  },
  {
    "text": "about that because it is very [Music]",
    "start": "1143720",
    "end": "1154559"
  },
  {
    "text": "interesting what's going on Gophers this episode is brought to you by equinex metal if you want the choice and control",
    "start": "1154559",
    "end": "1161400"
  },
  {
    "text": "of Hardware with low overhead and the developer experience of the cloud you need to check out equinix metal deploy",
    "start": "1161400",
    "end": "1167640"
  },
  {
    "text": "in minutes across 18 global locations from Silicon Valley to Sydney visit metal.in x.com admetal and receive $100",
    "start": "1167640",
    "end": "1175919"
  },
  {
    "text": "in credit to play with again metal.in x.com slust",
    "start": "1175919",
    "end": "1181840"
  },
  {
    "text": "[Music]",
    "start": "1185660",
    "end": "1197240"
  },
  {
    "text": "admetal let's talk about the performance of allocating memory then of course there's",
    "start": "1197240",
    "end": "1202559"
  },
  {
    "text": "it's not a free thing to do but it's it sort of feels like we are just reserving",
    "start": "1202559",
    "end": "1209240"
  },
  {
    "text": "the memory not that there's there's like effort to to to reserve that memory what",
    "start": "1209240",
    "end": "1214720"
  },
  {
    "text": "is the cost yeah do do remember it's it's nearly free on the stack it's when we do this lifetime management and we we",
    "start": "1214720",
    "end": "1221880"
  },
  {
    "text": "want it to hang around for longer that's when the cost goes up one of the most interesting things to me about doing per",
    "start": "1221880",
    "end": "1228159"
  },
  {
    "text": "performance measurement of simple things because that's that's what we really love to do as programmers we're like well let's try to figure out like what's",
    "start": "1228159",
    "end": "1234120"
  },
  {
    "text": "the fastest possible way that we can write this like fairly simple algorithm that just does a couple of things right",
    "start": "1234120",
    "end": "1239840"
  },
  {
    "text": "so we love to do that we love to write a micro Benchmark go micro Benchmark support is excellent it it's got all",
    "start": "1239840",
    "end": "1245000"
  },
  {
    "text": "these different facilities and there's bench stat and you can like profile things up the wazu ETC one thing that I",
    "start": "1245000",
    "end": "1250320"
  },
  {
    "text": "find very interesting and that's kind of bitten me several times is that if you just take a look at a CPU profile of",
    "start": "1250320",
    "end": "1258159"
  },
  {
    "text": "little micro Benchmark that does a bunch of allocating it's going to seem really cheap those allocations are really fast",
    "start": "1258159",
    "end": "1264039"
  },
  {
    "text": "because the garbage collector is really good when the computer isn't underload and when there isn't GC pressure right",
    "start": "1264039",
    "end": "1270480"
  },
  {
    "text": "when the garbage collector isn't too taxed it's going to be very cheap to allocate and the garbage collection is going to happen in the background and",
    "start": "1270480",
    "end": "1276559"
  },
  {
    "text": "everybody's going to be pretty happy what I've seen over and over again is underestimating the effects of doing a",
    "start": "1276559",
    "end": "1282440"
  },
  {
    "text": "lot of allocations based on in a real program kind of micro Benchmark versus real program in a real program those",
    "start": "1282440",
    "end": "1288080"
  },
  {
    "text": "iations are almost always going to add up to be more than what it seems like in your micro Benchmark I think it it might",
    "start": "1288080",
    "end": "1294360"
  },
  {
    "text": "be useful to to try and motivate think for a bit about what what is hard about managing a this thing we call a heat so",
    "start": "1294360",
    "end": "1301279"
  },
  {
    "text": "first of all what is it right so you've got some random program it's allocated a bunch of of small blocks maybe 8 by it's",
    "start": "1301279",
    "end": "1308880"
  },
  {
    "text": "allocated some bigger blocks maybe some 64k blocks maybe one block of",
    "start": "1308880",
    "end": "1314880"
  },
  {
    "text": "103,4 two bytes and the the memory manager the heat manager will has to let",
    "start": "1314880",
    "end": "1320440"
  },
  {
    "text": "you do all of these things and do them in in any quantities in any order and uh",
    "start": "1320440",
    "end": "1325520"
  },
  {
    "text": "within some bounds right your your whole computer has got you know whatever 64",
    "start": "1325520",
    "end": "1331720"
  },
  {
    "text": "gigs of RAM 16 gigs of you know what there's some there's some limit that that you can't go above but uh the heat",
    "start": "1331720",
    "end": "1339039"
  },
  {
    "text": "manager will let you allocate any number of blocks of any size within that that",
    "start": "1339039",
    "end": "1344480"
  },
  {
    "text": "overall limit and then it will let you free them up stop using them in go you don't explicitly do that when you no",
    "start": "1344480",
    "end": "1350919"
  },
  {
    "text": "longer have any references to a particular piece of memory then that's considered garbage to begin with it's",
    "start": "1350919",
    "end": "1356679"
  },
  {
    "text": "still kind of hanging around we'll get to that in a second but assuming we've managed to to free up some memory now",
    "start": "1356679",
    "end": "1363840"
  },
  {
    "text": "the manager has next time you want to allocate some memory it's got the task of figuring out where there's a hole you",
    "start": "1363840",
    "end": "1370559"
  },
  {
    "text": "don't want to just get bigger and bigger and bigger the whole time you you know you've allocated 64k you freed 64k now",
    "start": "1370559",
    "end": "1375960"
  },
  {
    "text": "you want to allocate 64k you should probably use the one you just freed so the memory manager has a task of trying",
    "start": "1375960",
    "end": "1383240"
  },
  {
    "text": "to give you back the best block to keep things under control maybe not the best",
    "start": "1383240",
    "end": "1388480"
  },
  {
    "text": "but some kind of reasonable choice of block it's got a lot of options right if you freed up 64k and then you allocated",
    "start": "1388480",
    "end": "1396320"
  },
  {
    "text": "eight bytes well it could take the first eight bytes of that 64k I'm trying to I'm trying to kind of motivate this",
    "start": "1396320",
    "end": "1401760"
  },
  {
    "text": "picture that it's actually really complicated to uh keep track of all these potentially millions and millions",
    "start": "1401760",
    "end": "1407960"
  },
  {
    "text": "of blocks at all different sizes then we throw in some performance considerations that uh most computers these days have",
    "start": "1407960",
    "end": "1414440"
  },
  {
    "text": "multiple CPU cores and you you really want to keep the memory together on one",
    "start": "1414440",
    "end": "1420240"
  },
  {
    "text": "CPU core and not kind of have little bits of memory next to each other being used by different CPU cores so the the",
    "start": "1420240",
    "end": "1427120"
  },
  {
    "text": "memory manager is going to try and and help that along it's going to actually keep different typically called Arenas",
    "start": "1427120",
    "end": "1433720"
  },
  {
    "text": "of memory for different cores and we haven't even got to our garbage collection yet it's already really",
    "start": "1433720",
    "end": "1439440"
  },
  {
    "text": "complicated and any any memory manager in C in C++ in Objective C with your",
    "start": "1439440",
    "end": "1445320"
  },
  {
    "text": "automated reference counting they're they're all doing the stuff I I've talked about so far you know they're all kind of keeping track of of what's in",
    "start": "1445320",
    "end": "1451880"
  },
  {
    "text": "use what's not in use what could be reused they're all doing that yeah so I was going to say yeah the reason why you",
    "start": "1451880",
    "end": "1458640"
  },
  {
    "text": "can be relatively proficient at go and not worry too much about what's going on underneath although Brian you made a",
    "start": "1458640",
    "end": "1466080"
  },
  {
    "text": "good that was a good example of a case where when you do know what's going on you might make different design",
    "start": "1466080",
    "end": "1471320"
  },
  {
    "text": "decisions the reason is really because go has this garbage collector in there that's kind of freeing up the memory bit",
    "start": "1471320",
    "end": "1478240"
  },
  {
    "text": "in our wake as we just sort of plow through our program tell us about the go",
    "start": "1478240",
    "end": "1483919"
  },
  {
    "text": "garbage collector is is it good it's pretty good I think reasonable people can have vicious arguments about this",
    "start": "1483919",
    "end": "1491120"
  },
  {
    "text": "I'm sure they don't so garbage collection as a Computing technique has",
    "start": "1491120",
    "end": "1496799"
  },
  {
    "text": "has got to be 50 60 years old lot of work has gone into it since the early",
    "start": "1496799",
    "end": "1502760"
  },
  {
    "text": "lisp and so the the go garbage collector is not state-ofthe-art it's kind of a",
    "start": "1502760",
    "end": "1508279"
  },
  {
    "text": "couple of steps back from that but it it is very very effective I'm pretty U",
    "start": "1508279",
    "end": "1513399"
  },
  {
    "text": "pretty sure I could go there the exact nuances of which techniques it uses and doesn't use there's a great paper we",
    "start": "1513399",
    "end": "1519919"
  },
  {
    "text": "should put a link in the um in the show notes there was I think a keynote speech at a conference where where somebody",
    "start": "1519919",
    "end": "1526120"
  },
  {
    "text": "went through the um entire history of the gold garbage collector and and and",
    "start": "1526120",
    "end": "1531399"
  },
  {
    "text": "spoke about that they had actually tried out a lot of these more cuttingedge techniques and the difficulties they had",
    "start": "1531399",
    "end": "1537440"
  },
  {
    "text": "fitting them into to the kind of world of go we kind of skipped ahead slightly haven't we I mean what is garbage",
    "start": "1537440",
    "end": "1543600"
  },
  {
    "text": "collection we talked about it in in vague terms this idea that once you no longer have any reference to a piece of",
    "start": "1543600",
    "end": "1550120"
  },
  {
    "text": "memory that that it's it's considered garbage and and so what you want to do is identify all the garbage and then",
    "start": "1550120",
    "end": "1555760"
  },
  {
    "text": "make it available for reuse as your program carries on trying to allocate more memory and these days in in go it's",
    "start": "1555760",
    "end": "1564520"
  },
  {
    "text": "running go routines in the background kind of walking across the Heap and doing this process of figuring out",
    "start": "1564520",
    "end": "1570919"
  },
  {
    "text": "what's in use what's not in use it needs to figure this out starting from all the places you can start in your program so",
    "start": "1570919",
    "end": "1577320"
  },
  {
    "text": "that's you can start from a global variable that could be a pointer to some memory could be a a local variable on",
    "start": "1577320",
    "end": "1584600"
  },
  {
    "text": "the stack of a g routine and anything that they point to anything that those things point to all of that there's some",
    "start": "1584600",
    "end": "1590919"
  },
  {
    "text": "way to reach a lot of memory and that's the not garbage and it has to work out what is garbage which is everything else",
    "start": "1590919",
    "end": "1597720"
  },
  {
    "text": "so yeah it runs along in the background so it doesn't stop the world this used to be a big thing in go it used to kind",
    "start": "1597720",
    "end": "1603320"
  },
  {
    "text": "of halt everything and then figure out where the garbage is and then carry on and that's a bit annoying if you're trying to have a very interactive",
    "start": "1603320",
    "end": "1610440"
  },
  {
    "text": "program you know something that's serving serving requests very very quickly it it would stop for 100",
    "start": "1610440",
    "end": "1616039"
  },
  {
    "text": "milliseconds or something like that and and that's jarring if you're trying to interact with it so it does most of the",
    "start": "1616039",
    "end": "1622640"
  },
  {
    "text": "work in the background figuring out what the what the garbage is and then there's a very very brief pause where it does",
    "start": "1622640",
    "end": "1629399"
  },
  {
    "text": "still stop the world but it stops it for I don't know tenth of a millisecond or",
    "start": "1629399",
    "end": "1634440"
  },
  {
    "text": "something like that and resets a few pointers and and then carry on now you can allocating memory running your",
    "start": "1634440",
    "end": "1640919"
  },
  {
    "text": "program and so on so that's basically how the go garbage collector works it it",
    "start": "1640919",
    "end": "1646320"
  },
  {
    "text": "does all of this in one Heap so so it doesn't have what's called a generational design it doesn't try and",
    "start": "1646320",
    "end": "1652440"
  },
  {
    "text": "separate out younger lived things and old longer lived things it's not a copying garbage collector which can be",
    "start": "1652440",
    "end": "1659080"
  },
  {
    "text": "nice if you if you sort of take all the non-garbage and kind of copy it all the way down into one end of memory that's",
    "start": "1659080",
    "end": "1664720"
  },
  {
    "text": "all together and the cache works better that way then you start fresh in the in the kind of the big expanse that you've",
    "start": "1664720",
    "end": "1670559"
  },
  {
    "text": "just moved everything a lot of garbage collectors work that way the go go garbage collector leaves everything",
    "start": "1670559",
    "end": "1676000"
  },
  {
    "text": "where it is never moves memory on your behalf so that has pros and cons I think that's that's kind of the up to a",
    "start": "1676000",
    "end": "1682399"
  },
  {
    "text": "certain level exactly how the go garbage collector works these days I like how you describe it in terms of what it's",
    "start": "1682399",
    "end": "1687840"
  },
  {
    "text": "not I think that's a very effective way it's hard to describe something in terms of what it is especially something that's so complicated as a garbage",
    "start": "1687840",
    "end": "1694039"
  },
  {
    "text": "collector yeah it's it's viciously complicated and you know really hard to get right and I I certainly um take my",
    "start": "1694039",
    "end": "1702360"
  },
  {
    "text": "hat off figuratively to the to the authors of the gold garbage collector absolutely my colleagues like to remind",
    "start": "1702360",
    "end": "1708039"
  },
  {
    "text": "me that even though the go garbage collector is not a moving collector I think the spec for go allows it to be a",
    "start": "1708039",
    "end": "1715559"
  },
  {
    "text": "moving collector which is kind of interesting no doubt despite the fact that the spec allows this uh it would",
    "start": "1715559",
    "end": "1720720"
  },
  {
    "text": "break Untold numbers of programs that use unsafe pointer and things like that but I I always thought that was kind of a neat loophole for the future that the",
    "start": "1720720",
    "end": "1727440"
  },
  {
    "text": "go team left yeah well it's funny we talk about this idea that this our garbage is going to be collected for us",
    "start": "1727440",
    "end": "1733880"
  },
  {
    "text": "and Brian you mentioned a scenario earlier where you have a block of 64k and you you free it and then you get",
    "start": "1733880",
    "end": "1741799"
  },
  {
    "text": "another one immediately and you free that and then you get another one why not just hold on to the one that you",
    "start": "1741799",
    "end": "1747279"
  },
  {
    "text": "already had and this is the concept of kind of using pools which you can use",
    "start": "1747279",
    "end": "1752640"
  },
  {
    "text": "there's a pool in the standard Library the syn pool which sounds cool yeah well I like to appeal to the um the song that",
    "start": "1752640",
    "end": "1760320"
  },
  {
    "text": "goes reduce reuse recycle yeah at this point that um well",
    "start": "1760320",
    "end": "1765679"
  },
  {
    "text": "first of all if you reduce the amount of memory you're using then there going to be less work for the garbage collector but if you can reuse memory like like",
    "start": "1765679",
    "end": "1772559"
  },
  {
    "text": "you were just saying with a pool then again the garbage collector has less work to do and then finally I I I guess",
    "start": "1772559",
    "end": "1778799"
  },
  {
    "text": "recycle is what the garbage collector does I like that that's a great analogy we've also seen cases where people try",
    "start": "1778799",
    "end": "1785240"
  },
  {
    "text": "to do that on their own I thought we had one episode with somebody who talked about channels and passing I think bite",
    "start": "1785240",
    "end": "1791080"
  },
  {
    "text": "slic into the channels do you remember that Matt I don't remember which episode it was yeah I don't remember that but",
    "start": "1791080",
    "end": "1797559"
  },
  {
    "text": "Yes actually well let's talk about just quickly what the a pool is cuz it sounds really like cool and clever it's",
    "start": "1797559",
    "end": "1804679"
  },
  {
    "text": "actually quite simple isn't it well I can tell you a little bit about what a pool is I don't know so much about how it works under the hood to be perfectly",
    "start": "1804679",
    "end": "1811000"
  },
  {
    "text": "honest but the general idea of an of an object pool is that it it allows you to",
    "start": "1811000",
    "end": "1816080"
  },
  {
    "text": "reuse big and complicated and expensive to create objects you know you ask for",
    "start": "1816080",
    "end": "1821640"
  },
  {
    "text": "one of these big and complicated and difficult to create objects you fill it out you use it for a little while and then when when you're done with it",
    "start": "1821640",
    "end": "1827679"
  },
  {
    "text": "instead of just giving it back to the garbage collector to you know chop apart and throw back into the Heap you have a",
    "start": "1827679",
    "end": "1833519"
  },
  {
    "text": "little moment in which well I guess you don't have to have this but you can have a little moment in which you can clear it out and get rid of any other",
    "start": "1833519",
    "end": "1839519"
  },
  {
    "text": "references in there or do whatever you want with it and then stick it back into the pool for later use and that the",
    "start": "1839519",
    "end": "1845120"
  },
  {
    "text": "purpose of this is really just to amortize the amount of work that you have to do to to make one of these big",
    "start": "1845120",
    "end": "1850440"
  },
  {
    "text": "big things in the first place and this this can come into play in a lot of different scenarios I think in people",
    "start": "1850440",
    "end": "1855519"
  },
  {
    "text": "love to use go for like micro services so for maybe a web service or some like RPC service or something like that and a",
    "start": "1855519",
    "end": "1861880"
  },
  {
    "text": "lot of the time you can imagine you know an RPC service is sitting around idle maybe or it's doing a bunch of work and",
    "start": "1861880",
    "end": "1866919"
  },
  {
    "text": "then it's doing very little um and every time that it gets one of some request it has to do some complicated thing and",
    "start": "1866919",
    "end": "1872039"
  },
  {
    "text": "make a big object and do a bunch of like initialization work and with an object pool you know if you don't mind using",
    "start": "1872039",
    "end": "1877279"
  },
  {
    "text": "some memory for you know a big cache of these objects basically you know you can skip a bunch of that initialization work",
    "start": "1877279",
    "end": "1883000"
  },
  {
    "text": "and that can that can really be nice you can you can see improvements in your overall program's performance uh",
    "start": "1883000",
    "end": "1888440"
  },
  {
    "text": "depending on you know how expensive that initialization really is yeah I think that's basically the summary of of an",
    "start": "1888440",
    "end": "1893639"
  },
  {
    "text": "object pool it's probably worth noting that sometimes it's not even big objects it's just things that are slow to set up",
    "start": "1893639",
    "end": "1899320"
  },
  {
    "text": "so like a database connection pool is pretty common where you don't want to connect to the database every single",
    "start": "1899320",
    "end": "1904679"
  },
  {
    "text": "time you're talking to it but if you have like one pro you know a pool of connections that you can just take and use then every single request isn't",
    "start": "1904679",
    "end": "1911360"
  },
  {
    "text": "going to have that delay of connecting to the database and making sure it's all good I would add one thing to that which",
    "start": "1911360",
    "end": "1916880"
  },
  {
    "text": "is we didn't particularly talk about the performance angle but the garbage collection does take a lot of work it's",
    "start": "1916880",
    "end": "1922600"
  },
  {
    "text": "it's work that mostly happens in the background but it's it's undeniable it takes a lot of work to to kind of walk",
    "start": "1922600",
    "end": "1929039"
  },
  {
    "text": "through all the blocks of memory that have been allocated and freed and figure out which is garbage and so takes takes",
    "start": "1929039",
    "end": "1934960"
  },
  {
    "text": "a lot of work so the thing about the thing about big objects is that go has a",
    "start": "1934960",
    "end": "1941080"
  },
  {
    "text": "um a level a number which is the limit that it's going to let the Heap grow up",
    "start": "1941080",
    "end": "1946159"
  },
  {
    "text": "to this a Dynamic number go tries to sort of figure out what's the best number for your program but let's say",
    "start": "1946159",
    "end": "1951840"
  },
  {
    "text": "it's a gigabyte you know your your program is running along it's doing a lot of stuff and you're using memory",
    "start": "1951840",
    "end": "1957200"
  },
  {
    "text": "you're discarding memory and the the total amount of memory that that is in play if you like will grow up to 1",
    "start": "1957200",
    "end": "1965320"
  },
  {
    "text": "Gigabyte because that's what I decided the limit was for this example and when it hits 1 Gigabyte now go has to",
    "start": "1965320",
    "end": "1972159"
  },
  {
    "text": "definitely figure out what's what what's garbage what's not garbage because that's the sort of Target it set itself",
    "start": "1972159",
    "end": "1977840"
  },
  {
    "text": "that's we call that a full garbage C full GC it's there stuff going on the background it can kind of reclaim stuff",
    "start": "1977840",
    "end": "1984360"
  },
  {
    "text": "as it goes but when you hit that limit it has to do a full sweep and kind of know exactly where everything is and one",
    "start": "1984360",
    "end": "1991440"
  },
  {
    "text": "reason for that is it's going to make a decision if it genuinely can't get any more free garbage it's going to go to",
    "start": "1991440",
    "end": "1998279"
  },
  {
    "text": "the operating system and ask for more memory at this point it's probably going to go to 2 gb and going to the operating",
    "start": "1998279",
    "end": "2004120"
  },
  {
    "text": "system for memory is a relatively very expensive thing to do so uh goal is trying to keep to that limit that it",
    "start": "2004120",
    "end": "2010600"
  },
  {
    "text": "previously chose so back at the question of of large objects simply by allocating",
    "start": "2010600",
    "end": "2017600"
  },
  {
    "text": "like let's say you allocate uh 10 megabytes you can only do that 100 times before you hit the gigabyte right just",
    "start": "2017600",
    "end": "2024039"
  },
  {
    "text": "in simple terms so every hundred times you go through that that bit of code that that allocates 10 megabytes and",
    "start": "2024039",
    "end": "2029200"
  },
  {
    "text": "then discards it turns it into garbage you're going to hit a full garbage collect every time you hit that",
    "start": "2029200",
    "end": "2034320"
  },
  {
    "text": "threshold and full garbage collects are in simple terms you know I'm simplifying because it's horrendously complicated",
    "start": "2034320",
    "end": "2040679"
  },
  {
    "text": "under the hood in simple terms you you want to cut down the number of times you do a full garbage collect and the rate",
    "start": "2040679",
    "end": "2047120"
  },
  {
    "text": "at which you do a full garbage collect so just for that reason any kind of relatively large buffers blocks of",
    "start": "2047120",
    "end": "2053398"
  },
  {
    "text": "memory you may want to pull not because they actually cost a lot to set up but",
    "start": "2053399",
    "end": "2058599"
  },
  {
    "text": "because they drive that number so that's kind of a subtle piece of knowledge that",
    "start": "2058599",
    "end": "2063638"
  },
  {
    "text": "you might not pick up and how do you know if you're in that situ ation then is this back to you measure things and",
    "start": "2063639",
    "end": "2070440"
  },
  {
    "text": "so how do we do that like what's the best way to measure this stuff it's",
    "start": "2070440",
    "end": "2076358"
  },
  {
    "text": "about setting up application metrics and paying attention to the sort of things that you have access to as a go program",
    "start": "2076359",
    "end": "2083560"
  },
  {
    "text": "I think you can get um some pretty detailed information about what the garbage collector and the Heap is up to",
    "start": "2083560",
    "end": "2089679"
  },
  {
    "text": "as a go program by sort of asking the runtime there's a special function that you can call and it gives you back a bunch of information so you know you can",
    "start": "2089679",
    "end": "2096079"
  },
  {
    "text": "kind of do this at a low level but there's a lot of libraries out there that kind of have figured out how to",
    "start": "2096079",
    "end": "2101560"
  },
  {
    "text": "piece this stuff apart and expose it as as metrics maybe as Prometheus or as a little web service or something like",
    "start": "2101560",
    "end": "2107320"
  },
  {
    "text": "that so you don't have to go through the pain of figuring out you know what of these there's a lot of metrics in there to be honest there's like 50 something",
    "start": "2107320",
    "end": "2114480"
  },
  {
    "text": "like that 50 little different struct members that all have subtle different meanings that are important but uh I",
    "start": "2114480",
    "end": "2120079"
  },
  {
    "text": "think as just a basic idea of what's going on in the Heap I really like this program called stats biz somebody named",
    "start": "2120079",
    "end": "2127800"
  },
  {
    "text": "ARL made that just exposes this little HTTP server that has a little kind of",
    "start": "2127800",
    "end": "2133680"
  },
  {
    "text": "real time drawn graph of the different lines like that threshold that Brian mentioned is is represented very clearly",
    "start": "2133680",
    "end": "2139520"
  },
  {
    "text": "and you can kind of see it's really neat if you're running it on an active web server you can see the actual amount of",
    "start": "2139520",
    "end": "2145119"
  },
  {
    "text": "Heap kind of trending towards that that threshold and as soon as it comes above then you can see there's a line for the full GC the thing drops back down again",
    "start": "2145119",
    "end": "2152000"
  },
  {
    "text": "the idle changes it's it's actually very fascinating especially both for just learning about how garb garage collection Works in general as well as",
    "start": "2152000",
    "end": "2159720"
  },
  {
    "text": "understanding the behavior of your program great yeah that tool looks great we'll put a link to it in the show notes",
    "start": "2159720",
    "end": "2165000"
  },
  {
    "text": "for sure so I I work a lot with Prometheus a lot of the Prometheus maintainers work at graan Labs so that",
    "start": "2165000",
    "end": "2171880"
  },
  {
    "text": "tends to be my my go-to technique for for looking at at what's going on",
    "start": "2171880",
    "end": "2177680"
  },
  {
    "text": "particularly at scale you know if you've got a 100 programs running and you want to keep an eye on what the bulk of them",
    "start": "2177680",
    "end": "2184520"
  },
  {
    "text": "are doing it's basically the same data coming out the go run time but the uh they show up as as things named things",
    "start": "2184520",
    "end": "2192960"
  },
  {
    "text": "like uh goore memsor Heap _ alicore bites that's like one of the Coreal ones",
    "start": "2192960",
    "end": "2200440"
  },
  {
    "text": "that's um that's how much memory has been allocated and that's the if it's going reasonably slowly you can you can",
    "start": "2200440",
    "end": "2206359"
  },
  {
    "text": "see that number Rising it typically looks like a Sawtooth right it it rises quite slowly then it drops very sharply",
    "start": "2206359",
    "end": "2213280"
  },
  {
    "text": "when we free everything up in that full garbage collect and then it it rises again and um what might be happening in",
    "start": "2213280",
    "end": "2221040"
  },
  {
    "text": "your program might be garbage collecting like 10 times a second in which case the metrics are not going to pick that up",
    "start": "2221040",
    "end": "2227119"
  },
  {
    "text": "it's just like a blur and unless it's a really really small program you do not want the garbage collector to be running",
    "start": "2227119",
    "end": "2232640"
  },
  {
    "text": "10 times a second like once a second is more moderate or once every 30 seconds or something like that is it's a",
    "start": "2232640",
    "end": "2239319"
  },
  {
    "text": "trade-off right they trading off how much memory you've got against uh how much work you want the garbage collector",
    "start": "2239319",
    "end": "2245960"
  },
  {
    "text": "to do against how big is your program there's no kind of hard and fast rule",
    "start": "2245960",
    "end": "2251400"
  },
  {
    "text": "well there's one hard rule if if you're doing garbage collection go will run it the full garbage collect every 2 minutes",
    "start": "2251400",
    "end": "2256680"
  },
  {
    "text": "that's the slowest it will go if that's hardcoded into the runtime but if you um",
    "start": "2256680",
    "end": "2262400"
  },
  {
    "text": "watch the rate at which garbage collections are happening which is a different Prometheus metric if you're doing it that way I've forgotten the",
    "start": "2262400",
    "end": "2268480"
  },
  {
    "text": "name but if you watch the rate at which is happening I think a lot faster than one a second is is probably too fast and",
    "start": "2268480",
    "end": "2275640"
  },
  {
    "text": "you can't really go too slow slow because it it you know you either run out of memory or you hit that two-minute",
    "start": "2275640",
    "end": "2280960"
  },
  {
    "text": "point I didn't know about that two-minute Point that's actually pretty interesting that's like a that's a trivia question right",
    "start": "2280960",
    "end": "2287440"
  },
  {
    "text": "there yeah one thing I wanted to actually quickly mention just to tie this back into the object pool question",
    "start": "2287440",
    "end": "2294079"
  },
  {
    "text": "I think that there's something neat that happens isn't there when there's pressure on the go Heap doesn't",
    "start": "2294079",
    "end": "2299560"
  },
  {
    "text": "something special happen to the object pools don't don't they notice and uh maybe drop unused objects or something",
    "start": "2299560",
    "end": "2305079"
  },
  {
    "text": "like that I've never exactly sure how that works but I bet one of you know so the pool we're talking about is is in",
    "start": "2305079",
    "end": "2311000"
  },
  {
    "text": "the sync package in the go standard runtime uh standard Library so sync.",
    "start": "2311000",
    "end": "2317000"
  },
  {
    "text": "poool the way it kind of looks like it works is you get things out and you put things back but sort of under the hood",
    "start": "2317000",
    "end": "2322280"
  },
  {
    "text": "it's got a secret tie in with a garbage collector just as you say and depending on how things are going the pool might",
    "start": "2322280",
    "end": "2328640"
  },
  {
    "text": "might shrink a bit uh in order to free up memory for the garbage collector I didn't know that yeah",
    "start": "2328640",
    "end": "2335079"
  },
  {
    "text": "another secret another good trivia a question yeah yeah you have to go to a very specific kind of Pub where these",
    "start": "2335079",
    "end": "2342280"
  },
  {
    "text": "are the sorts of questions but when they come up you're GNA look I mean you're G to look great aren't you I just thought",
    "start": "2342280",
    "end": "2348040"
  },
  {
    "text": "it was every Pub in San Francisco yeah could be",
    "start": "2348040",
    "end": "2353360"
  },
  {
    "text": "[Music]",
    "start": "2353360",
    "end": "2362619"
  },
  {
    "text": "yeah this episode is brought to you by our friends at launch dark feature management for the modern Enterprise",
    "start": "2362800",
    "end": "2369040"
  },
  {
    "text": "power testing in production at any scale here's how it works launch Darkly enables development teams and operation",
    "start": "2369040",
    "end": "2375000"
  },
  {
    "text": "teams to deploy code at any time even if a feature isn't ready to be release to users wrapping code with feature Flags",
    "start": "2375000",
    "end": "2381720"
  },
  {
    "text": "gives you the safety to test new features and infrastructure in your production environments without impacting the wrong end users when",
    "start": "2381720",
    "end": "2388480"
  },
  {
    "text": "you're ready to release more widly update the flag status and the changes are made instantaneously by the real-time streaming architecture",
    "start": "2388480",
    "end": "2395160"
  },
  {
    "text": "eliminate risk deliver value get started for free today at launchd dark.com again",
    "start": "2395160",
    "end": "2400520"
  },
  {
    "text": "launchd dark.com [Music]",
    "start": "2400520",
    "end": "2410830"
  },
  {
    "text": "so with this garbage collector cleaning up after us all the way that means we can't have a memory leak doesn't it haha",
    "start": "2413680",
    "end": "2421920"
  },
  {
    "text": "ha we all laugh somberly sad face emoji what do you mean well there's a lot of",
    "start": "2421920",
    "end": "2428560"
  },
  {
    "text": "different ways in which you can have a memory leak even in a garbage collected language I think the one of my favorite",
    "start": "2428560",
    "end": "2435319"
  },
  {
    "text": "memory leak stories or types I guess is it also has to do with these SN pools so",
    "start": "2435319",
    "end": "2440560"
  },
  {
    "text": "not to not to hammer the sink pool to death but imagine what happens if you have one of these objects that's a",
    "start": "2440560",
    "end": "2446960"
  },
  {
    "text": "little bit complicated right maybe it's big maybe it's small but maybe it's a struct and it's got some slice pointers maybe you're actually like slicing the",
    "start": "2446960",
    "end": "2453599"
  },
  {
    "text": "front off of those slice pointers little by little because you're maybe you're implementing a queue or something whatever it is that we do when we slice",
    "start": "2453599",
    "end": "2459880"
  },
  {
    "text": "off the heads of our our our slice pointers is it as it turns out the garbage collector cannot free the front",
    "start": "2459880",
    "end": "2466599"
  },
  {
    "text": "half of slices if you take off the first five elements of a slice and then you don't change what that slice is pointing",
    "start": "2466599",
    "end": "2472760"
  },
  {
    "text": "to that that array never changes let's say those first five elements will stay on the Heap forever and let's say that",
    "start": "2472760",
    "end": "2478640"
  },
  {
    "text": "they actually are Pointers to some other giant objects and those those objects are basically lost and you'll never really know you can get into really",
    "start": "2478640",
    "end": "2485160"
  },
  {
    "text": "really bad territory with stuff like that and that's happened to me several times working on cockroach DB which is",
    "start": "2485160",
    "end": "2491119"
  },
  {
    "text": "this big go program that has a lot of tricky stuff to deal with memory yeah that's one that uh I've seen myself",
    "start": "2491119",
    "end": "2497839"
  },
  {
    "text": "because I was trying to teach people how to use a q or how to write a Q and go like the simple implementation you want",
    "start": "2497839",
    "end": "2502920"
  },
  {
    "text": "to do that but then you also have to like have the caveat of like if this goes long enough it's eventually going",
    "start": "2502920",
    "end": "2508160"
  },
  {
    "text": "to break because you know just going to definitely keep using memory so it's like hard because you're like I want to",
    "start": "2508160",
    "end": "2513480"
  },
  {
    "text": "show you the simple version but I also don't want you to have something in your code that potentially is going to be problematic but there's also like",
    "start": "2513480",
    "end": "2520000"
  },
  {
    "text": "another case where that happens is when you have um like go routines that just don't end for some reason and like time.",
    "start": "2520000",
    "end": "2526000"
  },
  {
    "text": "tick is is an example of that where it's a function you call in the time package that when you call it it gives you a",
    "start": "2526000",
    "end": "2531520"
  },
  {
    "text": "channel that will send a message every so often so it's supposed to tick every second or whatever time you want like it",
    "start": "2531520",
    "end": "2537200"
  },
  {
    "text": "actually actually has explicit documentation that this won't be garbage collected and there's there's ways to do",
    "start": "2537200",
    "end": "2542640"
  },
  {
    "text": "it with that with garbage collection but that specific helper there's just not way to clean it up that's so strange so",
    "start": "2542640",
    "end": "2548839"
  },
  {
    "text": "what why is that thing why is that slicing the heads off thing by the way I like how you described that it sound",
    "start": "2548839",
    "end": "2554079"
  },
  {
    "text": "like a murderer but why does it do that the first five that seems such a random thing and is it not fixable basically",
    "start": "2554079",
    "end": "2561040"
  },
  {
    "text": "the the reason for that is that a slice right as we know it's got a little bit of information about the length that's",
    "start": "2561040",
    "end": "2568319"
  },
  {
    "text": "the slice header and it's a it's got an array pointer that's what makes up the data inside of the slice and as I",
    "start": "2568319",
    "end": "2574760"
  },
  {
    "text": "understand once you've like cre created the array that has the data in it you can't exactly say to the garbage",
    "start": "2574760",
    "end": "2580559"
  },
  {
    "text": "collector that this array of a particular size is like half collectible or you're just not allowed to do that",
    "start": "2580559",
    "end": "2586160"
  },
  {
    "text": "that's based on how the the implementation of the garbage collector kind of works it probably gets into things like size classes right when",
    "start": "2586160",
    "end": "2592599"
  },
  {
    "text": "you're allocating objects of a certain size I think the allocator likes to give you chunks off of a particular area",
    "start": "2592599",
    "end": "2598839"
  },
  {
    "text": "that's all doing chunks of a certain size so if you were to maybe edit the size of an object that's already been",
    "start": "2598839",
    "end": "2604359"
  },
  {
    "text": "allocated probably something would get confused Etc I bet this is fixable I don't think that it's something that's hard and fast",
    "start": "2604359",
    "end": "2611160"
  },
  {
    "text": "impossible to fix but I doubt that it would be fixed soon just because I don't",
    "start": "2611160",
    "end": "2616240"
  },
  {
    "text": "think it's the most important thing to to improve in the go language right now you can have pointers into the middle of",
    "start": "2616240",
    "end": "2622319"
  },
  {
    "text": "of an object whether it's a slice or a struct or or whatever and that's kind of",
    "start": "2622319",
    "end": "2627440"
  },
  {
    "text": "part of the picture the the way things are any number of pointers whether they're at the beginning or into the middle of a single object keeps it alive",
    "start": "2627440",
    "end": "2635119"
  },
  {
    "text": "keeps it from being turned into into garbage that makes sense I guess doesn't it you you'd be surprised if it wasn't",
    "start": "2635119",
    "end": "2640960"
  },
  {
    "text": "the case would you I think Jordan's example you could construct a kind of",
    "start": "2640960",
    "end": "2646040"
  },
  {
    "text": "you know proof acceptable by humans that that nobody could ever get to the beginning of this slice but as he was",
    "start": "2646040",
    "end": "2651880"
  },
  {
    "text": "saying the garbage collector doesn't have sufficient information about what's inside objects that uh would allow it to",
    "start": "2651880",
    "end": "2658839"
  },
  {
    "text": "break it in half or whatever so I was I was going to say you know the the word leak when I first programmed in C we a",
    "start": "2658839",
    "end": "2665240"
  },
  {
    "text": "memory leak was was when you had lost all reference to a block of memory you know you would do that quite a lot so it",
    "start": "2665240",
    "end": "2671599"
  },
  {
    "text": "was just leak the memory you know you could never get back to it you could never free it and it just it just kind of hung around because there was no",
    "start": "2671599",
    "end": "2677319"
  },
  {
    "text": "garbage collector in C in garbage collected environments we used the same word a leak but we we mean memory which",
    "start": "2677319",
    "end": "2685280"
  },
  {
    "text": "we do still have a reference to something is still keeping it alive but we didn't mean to it's hanging around we",
    "start": "2685280",
    "end": "2691680"
  },
  {
    "text": "don't actually have a purpose for it it's hanging around because we've got a reference to it but we didn't mean to have a reference to it so that's you",
    "start": "2691680",
    "end": "2698000"
  },
  {
    "text": "know it's kind of different use of the same term but but you know it amounts to the same thing this thing called a leak what it means is your program's going to",
    "start": "2698000",
    "end": "2704240"
  },
  {
    "text": "get bigger and bigger and bigger and eventually go bang because you you ran out yeah that is weird that they're both",
    "start": "2704240",
    "end": "2710000"
  },
  {
    "text": "leaks it's like having a leak where water is staying inside where it belongs",
    "start": "2710000",
    "end": "2716240"
  },
  {
    "text": "or something I I can't right can't remember I think you can even use a leak for something I would say even more",
    "start": "2716240",
    "end": "2722839"
  },
  {
    "text": "mundane which is that let's say your program maybe it's tracing itself maybe it's working on distributed tracing and",
    "start": "2722839",
    "end": "2729839"
  },
  {
    "text": "it's got some big long-lived request and maybe the request is working perfectly well but maybe you've the way that",
    "start": "2729839",
    "end": "2735319"
  },
  {
    "text": "you've implemented your tracing machine is that it just keeps adding little entries to a list and eventually it's going to want to publish that list",
    "start": "2735319",
    "end": "2741200"
  },
  {
    "text": "somewhere but what if that list never really ends like I mean it's not exactly a leak because you know we have a reference to this big list of events or",
    "start": "2741200",
    "end": "2747960"
  },
  {
    "text": "something like that but um we just haven't thought about changing our program to stop allocating when",
    "start": "2747960",
    "end": "2754599"
  },
  {
    "text": "something happens in a little bit of a longer lived fashion than we were expecting I would categorize that as a",
    "start": "2754599",
    "end": "2759680"
  },
  {
    "text": "leak even though it's not really lost memory unbounded unexpected growth seems like a leak to me yeah right it could be",
    "start": "2759680",
    "end": "2766440"
  },
  {
    "text": "completely valid code you know all your tests pass and everything's okay but just because of the particular situation",
    "start": "2766440",
    "end": "2772640"
  },
  {
    "text": "it keeps growing forever yeah I could see that I just wanted to add one more thing about the leaking situation that",
    "start": "2772640",
    "end": "2778240"
  },
  {
    "text": "how do you figure out where your leaks are coming from is a big question and uh go has a memory profiler which is really",
    "start": "2778240",
    "end": "2785160"
  },
  {
    "text": "nice good and you know bring it up in your web browser and so on read up on that but what the profiler will tell you",
    "start": "2785160",
    "end": "2791480"
  },
  {
    "text": "is where the memory was allocated what you really need to know is where is this pointer that's keeping it alive and uh I",
    "start": "2791480",
    "end": "2797760"
  },
  {
    "text": "know Jordan's been doing some work on tooling to try and figure that out yeah so it certainly wasn't just me um there",
    "start": "2797760",
    "end": "2804319"
  },
  {
    "text": "was a a program called vew cor that's existed for quite some time that lives inside of a kind of X debug package or",
    "start": "2804319",
    "end": "2812000"
  },
  {
    "text": "something like that in the go Library World maintained by and cre by somebody at Google it's kind of rotted several",
    "start": "2812000",
    "end": "2818559"
  },
  {
    "text": "times because it it has this weird property which is that it's got to precisely mimic all of the internal",
    "start": "2818559",
    "end": "2824359"
  },
  {
    "text": "structures of the go garbage collector and if it gets anything even subtly wrong it just won't work and it'll be",
    "start": "2824359",
    "end": "2830760"
  },
  {
    "text": "just completely broken in ways that are impossible to understand for example something that I looked at fixing and",
    "start": "2830760",
    "end": "2836559"
  },
  {
    "text": "and I have a patch for haven't merged it yet but there is a patch on on uh my Fork on GitHub is um they Chang the",
    "start": "2836559",
    "end": "2843079"
  },
  {
    "text": "meaning of this bit map like there's some bit map somewhere inside of the go allocator garbage collector world that",
    "start": "2843079",
    "end": "2848839"
  },
  {
    "text": "says you know which object is alive in this chunk of objects basically and they they switched it so that instead of",
    "start": "2848839",
    "end": "2855280"
  },
  {
    "text": "having I might be getting the details wrong but it's something like instead of just having one bit per object they switched it so that every other bit was",
    "start": "2855280",
    "end": "2861400"
  },
  {
    "text": "an object and then view cor was not updated to have that change so of course like you know maybe you could run it and",
    "start": "2861400",
    "end": "2867119"
  },
  {
    "text": "it would like kind of work but the the results would be complete nonsense so it's a little bit unmaintained I have",
    "start": "2867119",
    "end": "2872280"
  },
  {
    "text": "some patches that I think do get it back to a maintained State and what does it it do by the way I've been sort of just blathering about stuff without",
    "start": "2872280",
    "end": "2878280"
  },
  {
    "text": "explaining what this thing does it's a really cool tool if you take a core dump of your go program so that's what",
    "start": "2878280",
    "end": "2884359"
  },
  {
    "text": "happens if you know if you send a killing signal to this program Linux will dump a big file that contains all",
    "start": "2884359",
    "end": "2890920"
  },
  {
    "text": "of the programs memory all of it you know just exactly how it was in memory and so you can theoretically be the go",
    "start": "2890920",
    "end": "2896599"
  },
  {
    "text": "garbage collector you can do that algorithm that Brian mentioned where you find all the roots of the program all the vars all the finalizers and all the",
    "start": "2896599",
    "end": "2903720"
  },
  {
    "text": "the stack variables and follow all the pointers down to figure out which are the objects that are alive which the",
    "start": "2903720",
    "end": "2909280"
  },
  {
    "text": "objects that are dead and crucially since you know the layout of those objects based on dwarf information which",
    "start": "2909280",
    "end": "2915960"
  },
  {
    "text": "is this whole other thing right inside of a a binary it's going to tell you what the layout of objects are since you",
    "start": "2915960",
    "end": "2921520"
  },
  {
    "text": "know all that information you can actually figure out all of the pointers from an object to its children to the",
    "start": "2921520",
    "end": "2926800"
  },
  {
    "text": "things that it's referencing as well as by doing a whole other graph algorithm you can figure out the things that are",
    "start": "2926800",
    "end": "2932240"
  },
  {
    "text": "pointing to an object which is that's like the Holy Grail information right so it's like let's say you have some big object that you can't collect for",
    "start": "2932240",
    "end": "2939079"
  },
  {
    "text": "whatever reason you want to know what is that object and what are the things pointing at it and so this is what you can kind of do with with a tool like vew",
    "start": "2939079",
    "end": "2945480"
  },
  {
    "text": "cor there's all sorts of neat things like it's got a couple of different commands you can run on and stuff like that I probably don't want to go through",
    "start": "2945480",
    "end": "2951160"
  },
  {
    "text": "all of them but it's it's really neat and uh you should check it out I will mention one one last thing here on on",
    "start": "2951160",
    "end": "2956480"
  },
  {
    "text": "VOR which is that if you're feeling really ambitious and you want to like really blow everybody's Minds in the go community in the Java world you can",
    "start": "2956480",
    "end": "2963280"
  },
  {
    "text": "actually you don't have to run this algorithm on a I guess a dead core file you can actually run it on a live",
    "start": "2963280",
    "end": "2969319"
  },
  {
    "text": "program using this like completely insane technology that this company called yourkit made you sort of attach",
    "start": "2969319",
    "end": "2974400"
  },
  {
    "text": "this little agent to your Java program and it can figure out the the like reachability map and all of those things",
    "start": "2974400",
    "end": "2979640"
  },
  {
    "text": "that I just described on a live Java program and that that really saved my butt several times at the last company",
    "start": "2979640",
    "end": "2984720"
  },
  {
    "text": "that I worked at that Ed used Java and gosh if if something like that existed for go it would absolutely like change",
    "start": "2984720",
    "end": "2991400"
  },
  {
    "text": "the game completely for any go program that uses significant or complex uh memory",
    "start": "2991400",
    "end": "2996680"
  },
  {
    "text": "models that sounds awesome um we should put a link to the project in the show",
    "start": "2996680",
    "end": "3003640"
  },
  {
    "text": "note so check them out there well I'm afraid it's that time again it's time",
    "start": "3003640",
    "end": "3009119"
  },
  {
    "text": "for unpopular [Music]",
    "start": "3009119",
    "end": "3014609"
  },
  {
    "text": "opinions opion you what I actually think should probably",
    "start": "3015000",
    "end": "3021000"
  },
  {
    "text": "leave unop opinion",
    "start": "3021559",
    "end": "3027440"
  },
  {
    "text": "who's going to tell us our first unpopular opinion today I brought one let's have it Brian and it's not about",
    "start": "3027880",
    "end": "3034400"
  },
  {
    "text": "go I think all the all the ones about go have been taken yeah on",
    "start": "3034400",
    "end": "3041680"
  },
  {
    "text": "Reddit un Hacker News yeah my unpopular opinion is I want in a chat program like",
    "start": "3041680",
    "end": "3048040"
  },
  {
    "text": "like slack say they added threads so you can take a message and and sort of start",
    "start": "3048040",
    "end": "3053680"
  },
  {
    "text": "a thread of conversation from that message message yeah so I I want to be able to take something that's um on a",
    "start": "3053680",
    "end": "3060280"
  },
  {
    "text": "thread and make another thread I want threads of threads that is unpopular to be honest",
    "start": "3060280",
    "end": "3068000"
  },
  {
    "text": "that's an unpopular one oh yeah I think that's going to be really unpopular because there's already some people that they discourage the use of threads",
    "start": "3068000",
    "end": "3074480"
  },
  {
    "text": "because they're not very accessible that's that's like meta isn't it they should call them goru te It's So Meta",
    "start": "3074480",
    "end": "3080680"
  },
  {
    "text": "though that idea so you mean like on a tangent you go off on a tangent and then you go off on another tangent exactly I",
    "start": "3080680",
    "end": "3088160"
  },
  {
    "text": "I feel like this is basically Twitter threads where they can do that kind of and it's awful sometimes they have that",
    "start": "3088160",
    "end": "3093920"
  },
  {
    "text": "on Reddit too right you can have the whole tree of threads I like this for the for the record I I think that this is a great idea and I will subscribe to",
    "start": "3093920",
    "end": "3101119"
  },
  {
    "text": "it the UI needs to be different though doesn't it like if you have a different UI that model of conversation I think",
    "start": "3101119",
    "end": "3108240"
  },
  {
    "text": "could exist but probably needs to be a VR world where you can sort of navigate",
    "start": "3108240",
    "end": "3113280"
  },
  {
    "text": "through 3D space and time fourth fourth dimension that's a",
    "start": "3113280",
    "end": "3118720"
  },
  {
    "text": "good one though we haven't had an unpopular one about slack before we've had people say they don't like slack yeah but that's probably the extent",
    "start": "3118720",
    "end": "3124799"
  },
  {
    "text": "that's not unpopular is it I feel like that's a 5050 one it's just about half of the people like slack and half the",
    "start": "3124799",
    "end": "3130640"
  },
  {
    "text": "people don't like slack I kind of Brian I think your idea it's also kind of like it sounds like a work of complex",
    "start": "3130640",
    "end": "3135960"
  },
  {
    "text": "literary fiction you know sometimes you get one of those books where there's a big footnote and inside of that footnote",
    "start": "3135960",
    "end": "3141359"
  },
  {
    "text": "there's actually several other footnotes it's kind of like yeah the James Joyce of tech or something like that yeah",
    "start": "3141359",
    "end": "3148359"
  },
  {
    "text": "amazing well I don't like it to vote for it we're going to put these on Twitter of course follow us on at gotime FM I",
    "start": "3148359",
    "end": "3155160"
  },
  {
    "text": "think the at is optional I don't know try both okay do you have any other",
    "start": "3155160",
    "end": "3160359"
  },
  {
    "text": "unpopular opinions yeah I've got one I don't know exactly how unpopular this is these days but I switch to using Windows",
    "start": "3160359",
    "end": "3169240"
  },
  {
    "text": "okay for my stuff and I know that's crazy to some extent but uh it's also",
    "start": "3169240",
    "end": "3174400"
  },
  {
    "text": "kind of great because they got this thing called wsl2 now which is like the windows subsystem for Linux and it's",
    "start": "3174400",
    "end": "3181079"
  },
  {
    "text": "actually awesome it's like you can do all the Linux stuff that you want to be doing you know run your compilers and",
    "start": "3181079",
    "end": "3186400"
  },
  {
    "text": "your top and your whatever it is that you like to use Linux for but then you don't have to have the pain of dealing",
    "start": "3186400",
    "end": "3192440"
  },
  {
    "text": "with the year of the Linux guey which I hear is still this year right maybe maybe next year I'm not sure and I don't",
    "start": "3192440",
    "end": "3198960"
  },
  {
    "text": "know I actually kind of like Windows that's my unpopular opinion yeah wow okay um is is that like some kind of VM",
    "start": "3198960",
    "end": "3205960"
  },
  {
    "text": "thing does it run natively in some way I think that wsl2 the magic of it is that it is sort of native to some extent it's",
    "start": "3205960",
    "end": "3213040"
  },
  {
    "text": "like it's more of a hypervisor kind of Technology I'm probably using all the wrong words than a than a VM but I don't",
    "start": "3213040",
    "end": "3220280"
  },
  {
    "text": "really know all I know is that it's it's it's uh it's quite fast yeah okay you don't notice any problems with it",
    "start": "3220280",
    "end": "3225799"
  },
  {
    "text": "exactly I really like the technology they're doing for that because I feel like there's a ton of people that just use Windows from gaming or other stuff",
    "start": "3225799",
    "end": "3232359"
  },
  {
    "text": "and it's great to make programming more accessible but it's so hard for me to switch back when I'm like used to",
    "start": "3232359",
    "end": "3238079"
  },
  {
    "text": "certain keyboard shortcuts and things like that that just aren't there like in Mac I can hit control a and go like the",
    "start": "3238079",
    "end": "3243319"
  },
  {
    "text": "start of a line and like that doesn't work in Windows and it drives me insane every time yeah I had to contend with",
    "start": "3243319",
    "end": "3249640"
  },
  {
    "text": "that one too but I I what I ended up doing is using what is that program called Auto hotkey that lets you just go",
    "start": "3249640",
    "end": "3255960"
  },
  {
    "text": "completely Buck Wild and do all sorts of insane things with the keyboard shortcuts so I spent like a solid couple",
    "start": "3255960",
    "end": "3261720"
  },
  {
    "text": "of weeks just tweaking Auto hotkey and now I have like sort of customized machine of my dreams nice it only took",
    "start": "3261720",
    "end": "3268440"
  },
  {
    "text": "two weeks and he's going to go to his like somebody else's computer and they're like show me how you do that and he's",
    "start": "3268440",
    "end": "3274440"
  },
  {
    "text": "going to be like I can't use this computer right now I can't use any other computer now and it's been so long I've",
    "start": "3274440",
    "end": "3280680"
  },
  {
    "text": "now forgotten how to use it yeah that's the danger isn't it I got recently one of those ergonomic keyboards that's kind",
    "start": "3280680",
    "end": "3287040"
  },
  {
    "text": "of split into two um and it is quite weird to use because I'm not used to it",
    "start": "3287040",
    "end": "3292160"
  },
  {
    "text": "but I started to get kind of familiar with with it and then I went to a laptop and I was just like I really need to cut",
    "start": "3292160",
    "end": "3299160"
  },
  {
    "text": "this laptop in two ideally and see see if I can get away with that just stretch it out to the same shape you try that",
    "start": "3299160",
    "end": "3305280"
  },
  {
    "text": "and let us know how it goes yeah okay have you got a laptop I could borrow I mean it kind of reminds me of people who",
    "start": "3305280",
    "end": "3311079"
  },
  {
    "text": "use those different keyboard layouts like um what's the other one aside from Cy dvorac dvorac yeah like I had a",
    "start": "3311079",
    "end": "3317079"
  },
  {
    "text": "friend in college who used that and every time he'd like try to do something on somebody else's computer it was always fun to watch him type yeah cuz it",
    "start": "3317079",
    "end": "3322760"
  },
  {
    "text": "would take him like a minute to be like I I can't do this is so hard yeah there's a French keyboard layout as well",
    "start": "3322760",
    "end": "3328640"
  },
  {
    "text": "where it's basically quiry except the m is just in a different place it's just like you know that's that's trolling at",
    "start": "3328640",
    "end": "3336039"
  },
  {
    "text": "that point surely I used to sit next to a guy called Adam who um had no writing",
    "start": "3336039",
    "end": "3341319"
  },
  {
    "text": "on the key caps very minimalist very cool what about you John have you got any specific Tech that you wouldn't do",
    "start": "3341319",
    "end": "3348920"
  },
  {
    "text": "without that I couldn't do without yeah or wouldn't I I'm sure I have some but it's hard to say it's kind of like like",
    "start": "3348920",
    "end": "3355160"
  },
  {
    "text": "when you like reset your phone and like install it fresh and you don't know exactly what apps you had until you go",
    "start": "3355160",
    "end": "3361119"
  },
  {
    "text": "to like click and you're like it's not there okay I know what app I'm missing yeah I know on I always think that when",
    "start": "3361119",
    "end": "3367240"
  },
  {
    "text": "on Star Trek they go to an alien ship and they're like oh I think this is the navigation control can you make it work",
    "start": "3367240",
    "end": "3373880"
  },
  {
    "text": "yeah okay yeah I think so what do you mean I can't even use Android you can't get an alien's ship",
    "start": "3373880",
    "end": "3380720"
  },
  {
    "text": "and just be like yeah no problems beep you know what I mean I mean they're optimistic yeah well they're just",
    "start": "3380720",
    "end": "3387359"
  },
  {
    "text": "especially because phones are a lot less fatal if you mess them up depends what you're doing don't it I I've never done",
    "start": "3387359",
    "end": "3393559"
  },
  {
    "text": "anything on my phone that was fatal I'll say that congratulations okay um any other",
    "start": "3393559",
    "end": "3400079"
  },
  {
    "text": "unpopular opinions I'm sure this is going to be a popular one but I love that this show is has like this game",
    "start": "3400079",
    "end": "3406760"
  },
  {
    "text": "show component it's amazing it's really fun having a blast we did actually do an actual game show once as part of one of",
    "start": "3406760",
    "end": "3414480"
  },
  {
    "text": "the go for cons and it was great we got actual contestants and we had questions and they had points oh it was the oh",
    "start": "3414480",
    "end": "3421880"
  },
  {
    "text": "yeah we'll definitely do that again maybe we save it for some special event like the 200th go Time episode which I",
    "start": "3421880",
    "end": "3429079"
  },
  {
    "text": "guess will be happening this year maybe so that'll be cool and I think that's like very soon like it'sin an episode or",
    "start": "3429079",
    "end": "3436359"
  },
  {
    "text": "two oh we do we should do a special show on the 200 200th this is 194 so anybody",
    "start": "3436359",
    "end": "3441880"
  },
  {
    "text": "who's listening 194 you got six more episodes or and I guess five more than the sixth one will be the",
    "start": "3441880",
    "end": "3448680"
  },
  {
    "text": "200 well that's all the time we have for today unfortunately I feel like there's so much more we could talk about on this",
    "start": "3448680",
    "end": "3455440"
  },
  {
    "text": "subject maybe we'll do a follow-up episode sometime Brian thank you so much",
    "start": "3455440",
    "end": "3461000"
  },
  {
    "text": "Jordan a pleasure and of course John Calhoun thanks everyone for listening and we'll see you next",
    "start": "3461000",
    "end": "3468680"
  },
  {
    "text": "time that's it for good time thanks for tuning in we have a bunch of podcast for you to check out at change.com if you",
    "start": "3471119",
    "end": "3477400"
  },
  {
    "text": "need somewhere to start check out Founders talk 79 where I talk with John nunamaker about the time GitHub acquired his company speaker deck you remember",
    "start": "3477400",
    "end": "3484240"
  },
  {
    "text": "speaker deck right of course the easier move would be to subscribe to our Master feed at change.com and get all our",
    "start": "3484240",
    "end": "3491599"
  },
  {
    "text": "podcasts in a single feed also want to give a shout out to our partners lenoe fastly and lunch darkle and thanks to",
    "start": "3491599",
    "end": "3497799"
  },
  {
    "text": "break master cylinder for all of our awesome beats that's it for this episode of go time we'll see you next",
    "start": "3497799",
    "end": "3503720"
  },
  {
    "text": "week [Music]",
    "start": "3503720",
    "end": "3533720"
  },
  {
    "text": "w k",
    "start": "3533720",
    "end": "3539839"
  }
]