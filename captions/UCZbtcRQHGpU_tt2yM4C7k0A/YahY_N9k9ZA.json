[
  {
    "text": "[Music] this week on the change law we're talking about the principles of data",
    "start": "3030",
    "end": "9800"
  },
  {
    "text": "oriented programming johathan shvet author of data oriented programming joined Jared to talk about the virtues",
    "start": "9800",
    "end": "16320"
  },
  {
    "text": "of treating data as a first class citizen in our applications and the four principles that make it possible a",
    "start": "16320",
    "end": "23640"
  },
  {
    "text": "massive thank you to our friends and partners at fastly and fly our pods are fast to download globally because fast",
    "start": "23640",
    "end": "30199"
  },
  {
    "text": "is fast globally check them out at fastly.com and our friends at fly let you put your app and your database close",
    "start": "30199",
    "end": "36079"
  },
  {
    "text": "your users all over the world zero devops learn more at",
    "start": "36079",
    "end": "42200"
  },
  {
    "text": "[Music] fly.io this episode is brought to you by our friends at Square develop on the",
    "start": "45690",
    "end": "51879"
  },
  {
    "text": "platform that sellers trust here's what you can do with square you can Bridge more experiences you can build online",
    "start": "51879",
    "end": "57079"
  },
  {
    "text": "mobile and in-person commerce experiences that connect more customers and sellers you can build custom booking",
    "start": "57079",
    "end": "63440"
  },
  {
    "text": "Solutions you can create and track orders you can accept payments you can manage and curate inventory you can",
    "start": "63440",
    "end": "68799"
  },
  {
    "text": "organize customers you can manage employees you can extend Square gift cards to your app you can use afterpay",
    "start": "68799",
    "end": "75320"
  },
  {
    "text": "and all this is powered by the world class square apis and sdks that enable",
    "start": "75320",
    "end": "80640"
  },
  {
    "text": "you to build full feature business apps for yourself or millions of square sellers so much is available as a square",
    "start": "80640",
    "end": "87040"
  },
  {
    "text": "Solutions partner learn more and get started at change /s Square again changel log.com",
    "start": "87040",
    "end": "93660"
  },
  {
    "text": "[Music]",
    "start": "93660",
    "end": "118840"
  },
  {
    "text": "Square all right I'm here with yhonatan shvet author of data oriented",
    "start": "118840",
    "end": "124799"
  },
  {
    "text": "programming published by our friends at Manning in July of 2022 welcome to the",
    "start": "124799",
    "end": "130280"
  },
  {
    "text": "show welcome I'm very happy to be here with you happy to have you so data",
    "start": "130280",
    "end": "135599"
  },
  {
    "text": "oriented programming or data oriented programming depending on your affectation a concept that I hadn't",
    "start": "135599",
    "end": "142519"
  },
  {
    "text": "really heard about I feel like I've heard about lots of different things and so maybe like a niche area that you're",
    "start": "142519",
    "end": "147840"
  },
  {
    "text": "trying to expose tell us about why you decided to spend it look like 18 months in Early Access and finally published",
    "start": "147840",
    "end": "154959"
  },
  {
    "text": "you have a real hardbound book that physically is in your hands right there which is really cool why did you decide",
    "start": "154959",
    "end": "161680"
  },
  {
    "text": "to write this book uh all right but before that let me ask you a question back okay even if you don't know what is",
    "start": "161680",
    "end": "169920"
  },
  {
    "text": "data programming do you agree that it sounds sexy or cool I do I think it does sound",
    "start": "169920",
    "end": "176879"
  },
  {
    "text": "intriguing I was that's why I was like yeah we'll have you on the show it sounds cool yeah so that was my uh feeling when I",
    "start": "176879",
    "end": "183040"
  },
  {
    "text": "started to to write a book that nobody really knows what it is but everybody",
    "start": "183040",
    "end": "188599"
  },
  {
    "text": "thinks they know what it is and if you would ask a developer in the street what do you think about data onet programming",
    "start": "188599",
    "end": "194680"
  },
  {
    "text": "is it a good a good Paradigm or a bad Paradigm they say for sure it's a good Paradigm and when I uh started to write",
    "start": "194680",
    "end": "202080"
  },
  {
    "text": "the book two and a half years ago I did a research on Google and I was thrilled",
    "start": "202080",
    "end": "208360"
  },
  {
    "text": "to discover that there were no hit on Google for dated programming zero",
    "start": "208360",
    "end": "214200"
  },
  {
    "text": "nothing then I say wow that's amazing I can be the the reference the guru of data ored",
    "start": "214200",
    "end": "222200"
  },
  {
    "text": "programming you can be the one yeah exactly and then I looked on Wikipedia of course there were no article about",
    "start": "222200",
    "end": "228760"
  },
  {
    "text": "data onent programming so I wrote an article on Wikipedia about data onent programming and I say wow I'm going to",
    "start": "228760",
    "end": "234560"
  },
  {
    "text": "be famous but can you guess what happened no Wikipedia refused My article",
    "start": "234560",
    "end": "242439"
  },
  {
    "text": "oh they took it down they said it wasn't good enough yeah they said no it wasn't good enough they said in order for topic",
    "start": "242439",
    "end": "247959"
  },
  {
    "text": "to be worse having a page on Wikipedia you need to prove secondary sources",
    "start": "247959",
    "end": "254200"
  },
  {
    "text": "meaning you need to find books or articles that are not about data out programming that mention data out",
    "start": "254200",
    "end": "261280"
  },
  {
    "text": "programming okay and uh it was obviously not the case and I cannot use my book as",
    "start": "261280",
    "end": "267560"
  },
  {
    "text": "a reference for my topic so right now my article on Wikipedia is not there now",
    "start": "267560",
    "end": "275759"
  },
  {
    "text": "seriously I am a member of the closure Community I've joined the closure Community 11 years ago in",
    "start": "275759",
    "end": "285880"
  },
  {
    "text": "2011 no 2012 and closure is a data oriented",
    "start": "285880",
    "end": "291840"
  },
  {
    "text": "programming language is a data oriented programming language and it was marketed as so so when I write closure code even",
    "start": "291840",
    "end": "298720"
  },
  {
    "text": "if I don't know what is data ored programming in fact I do data oriented programming and my first attempt with",
    "start": "298720",
    "end": "305560"
  },
  {
    "text": "Manning right was to write a book about closure and it was a total failure",
    "start": "305560",
    "end": "312360"
  },
  {
    "text": "nobody purchased the book I mean maybe we sold 200 copies but the folks at Manning were intrigued by this the",
    "start": "312360",
    "end": "319479"
  },
  {
    "text": "closure Paradigm and they say you know what we like working with you the book",
    "start": "319479",
    "end": "324639"
  },
  {
    "text": "didn't go well so you know they how they were they stop before the book is published they do like early release of",
    "start": "324639",
    "end": "330720"
  },
  {
    "text": "the book and if it doesn't work they stop they we don't go into full",
    "start": "330720",
    "end": "336280"
  },
  {
    "text": "production it was just a couple of chapters but they said we want to work with you can you suggest another topic",
    "start": "336280",
    "end": "343280"
  },
  {
    "text": "and then I did a trick I said okay I cannot convince people to get interested in closure I'm going to give them",
    "start": "343280",
    "end": "350440"
  },
  {
    "text": "closure without closure closure Spirit without the syntax and that's that's",
    "start": "350440",
    "end": "358199"
  },
  {
    "text": "exactly thata out programming it's the the principles behind closure philosophy",
    "start": "358199",
    "end": "364400"
  },
  {
    "text": "I see so you've also tricked me we're doing a closure episode we I didn't realize it but here we are we're doing",
    "start": "364400",
    "end": "371400"
  },
  {
    "text": "closure too late too late yeah we're here now yeah and it seems that people",
    "start": "371400",
    "end": "378599"
  },
  {
    "text": "are are interested and intrigued by by this topic I got lot of responses and",
    "start": "378599",
    "end": "384039"
  },
  {
    "text": "questions from readers all around the world and it's and you know it's not a",
    "start": "384039",
    "end": "389560"
  },
  {
    "text": "really knew I didn't invent anything and closure also didn't invent anything it",
    "start": "389560",
    "end": "396440"
  },
  {
    "text": "just pulled some best practices for many many languages and make them into a",
    "start": "396440",
    "end": "402080"
  },
  {
    "text": "coherent uh hole right so if we take something we don't understand data",
    "start": "402080",
    "end": "408639"
  },
  {
    "text": "oriented programming and compare it to some things that we may already understand many of us understand",
    "start": "408639",
    "end": "414639"
  },
  {
    "text": "objectoriented programming uh others of us also understand functional programming and we",
    "start": "414639",
    "end": "420520"
  },
  {
    "text": "try to fit this in somewhere amongst things that we already kind of understand is it set against object",
    "start": "420520",
    "end": "427360"
  },
  {
    "text": "oriented is it set against functional is it set inside these things somewhere how does it relate to these paradigms that",
    "start": "427360",
    "end": "433039"
  },
  {
    "text": "we're familiar with okay great question it's uh both both against both fit with",
    "start": "433039",
    "end": "441400"
  },
  {
    "text": "and you know in in 2022 it's very hard to to put a clear distinction between",
    "start": "441400",
    "end": "448199"
  },
  {
    "text": "paradigms and languages for example Java which is the objectoriented programming language supports functional programming",
    "start": "448199",
    "end": "456639"
  },
  {
    "text": "and even closure which is totally functional programing supports kind of",
    "start": "456639",
    "end": "462120"
  },
  {
    "text": "objectoriented and JavaScript you have you can do both so it's not about languages I think nowadays most modern",
    "start": "462120",
    "end": "470000"
  },
  {
    "text": "languages support many many paradigms but some languages guides you into in",
    "start": "470000",
    "end": "478360"
  },
  {
    "text": "some languages it's more natural to use this or this Paradigm so what is data",
    "start": "478360",
    "end": "484039"
  },
  {
    "text": "oriented programming data oriented programming is a set of principles that",
    "start": "484039",
    "end": "490440"
  },
  {
    "text": "makes it Pleasant and effective for developers to write",
    "start": "490440",
    "end": "496479"
  },
  {
    "text": "programs that manipulate data programs that what we call information",
    "start": "496479",
    "end": "503120"
  },
  {
    "text": "systems programs that manipulate data but where the data does not belong to",
    "start": "503120",
    "end": "508759"
  },
  {
    "text": "the program program that manipulates data that they have not created programs where the life",
    "start": "508759",
    "end": "514479"
  },
  {
    "text": "cycle of the data goes beyond the program for example programs that",
    "start": "514479",
    "end": "519560"
  },
  {
    "text": "manipulate data that come from a database let's say web server the web",
    "start": "519560",
    "end": "524600"
  },
  {
    "text": "server does not does not own the data it processes the data and with this thing",
    "start": "524600",
    "end": "534120"
  },
  {
    "text": "according to data oriented programming you need a program that treats data as a first class Citizen and allows you to",
    "start": "534120",
    "end": "541360"
  },
  {
    "text": "manipulate data in a flexible way and for that it starts from a big big thing",
    "start": "541360",
    "end": "548360"
  },
  {
    "text": "against objectoriented programming because in object in objectoriented programming data and behavior data and",
    "start": "548360",
    "end": "554399"
  },
  {
    "text": "code are in capsulated together into objects right so the first thing that we",
    "start": "554399",
    "end": "559640"
  },
  {
    "text": "do we separate data can live on its own and code can live on its own like in",
    "start": "559640",
    "end": "566880"
  },
  {
    "text": "functional programming okay so the first step of data is exactly the same functional programming the second step",
    "start": "566880",
    "end": "574519"
  },
  {
    "text": "is that instead of using specific structure to represent our data we",
    "start": "574519",
    "end": "582040"
  },
  {
    "text": "prefer to use generic data structures like hashmaps like we have in Ruby and",
    "start": "582040",
    "end": "588240"
  },
  {
    "text": "in JavaScript or dictionaries in Python that's the our main ingredient for",
    "start": "588240",
    "end": "595680"
  },
  {
    "text": "representing data that we have fetched from the database and that's where there is a little split versus standard",
    "start": "595680",
    "end": "603839"
  },
  {
    "text": "functional programming languages like hascal and all the ml families where there you are you use strongly typed",
    "start": "603839",
    "end": "611600"
  },
  {
    "text": "things to model your your data here we prefer to use generic data structures mainly hashmaps and lists and the number",
    "start": "611600",
    "end": "620920"
  },
  {
    "text": "three which is similar to functional programming is that we never mutate data",
    "start": "620920",
    "end": "627320"
  },
  {
    "text": "we use immutable that structures and there are very very",
    "start": "627320",
    "end": "632480"
  },
  {
    "text": "Advanced or very performant sorry immutable data structures for generic data structures so we have in all",
    "start": "632480",
    "end": "640600"
  },
  {
    "text": "languages we have super efficient immutable hashmaps where instead of modifying the",
    "start": "640600",
    "end": "648279"
  },
  {
    "text": "data in place you create kind of a new version of the data but without having to clone the original data we can talk",
    "start": "648279",
    "end": "656240"
  },
  {
    "text": "about that later if you are interested that was principle number three and",
    "start": "656240",
    "end": "661959"
  },
  {
    "text": "principle number four is okay if you don't have types for your data how do you prevent how do you avoid the big",
    "start": "661959",
    "end": "668800"
  },
  {
    "text": "mess that you will be into if all the the pieces of data that you manipulating in your program are hashmaps how do you",
    "start": "668800",
    "end": "675120"
  },
  {
    "text": "know if in the ash Maps you expect a field that is called email and user and ID and how do you know how to spell it",
    "start": "675120",
    "end": "683160"
  },
  {
    "text": "how do you know as a programmer and how does the program know to fail fast and",
    "start": "683160",
    "end": "688240"
  },
  {
    "text": "not pass forward inv valid data and that's the way we do data validation in",
    "start": "688240",
    "end": "694720"
  },
  {
    "text": "data oriented programming is by having the schema the data schema separated",
    "start": "694720",
    "end": "700079"
  },
  {
    "text": "from the data itself and data is Val validated at runtime not at compile time",
    "start": "700079",
    "end": "706680"
  },
  {
    "text": "so these four principles of data oriented programming the first one separating the code from the data the",
    "start": "706680",
    "end": "713760"
  },
  {
    "text": "second one representing data with generic data structures like maps and lists",
    "start": "713760",
    "end": "719760"
  },
  {
    "text": "the third one treating data as immutable and the fourth one separating the schema from the data representation let's step",
    "start": "719760",
    "end": "726920"
  },
  {
    "text": "through these and let's just focus in on each one for a moment so this first one separating code from data as you said",
    "start": "726920",
    "end": "733040"
  },
  {
    "text": "this is kind of like against traditional objectoriented programming which is kind of defined objects as code Plus data",
    "start": "733040",
    "end": "741160"
  },
  {
    "text": "coexisting in the same entity data oriented programming says separate those two and so the question",
    "start": "741160",
    "end": "748040"
  },
  {
    "text": "to that which comes to my mind is like why why is it better to separate them versus to have them together because",
    "start": "748040",
    "end": "755040"
  },
  {
    "text": "every almost every developer that has worked in a production ready object",
    "start": "755040",
    "end": "760880"
  },
  {
    "text": "oriented system has suffered from huge class hierarchies and you inherit from",
    "start": "760880",
    "end": "768199"
  },
  {
    "text": "something that inherit from something and when you want to make a little change you influence so many things that",
    "start": "768199",
    "end": "773440"
  },
  {
    "text": "it's a a nightmare of of complexity and also for COD reuse if you have a a",
    "start": "773440",
    "end": "780360"
  },
  {
    "text": "method of a class that does I don't know calculates the the full name of a user",
    "start": "780360",
    "end": "787560"
  },
  {
    "text": "by concatenating first name and last name if you want to exact to use this piece of code for calculating the name",
    "start": "787560",
    "end": "794560"
  },
  {
    "text": "of of an author which happens to also have a first name and a last name you need to do to have author and user",
    "start": "794560",
    "end": "803199"
  },
  {
    "text": "inherit from a common object that you call person or that you call the human being or you don't know how to call",
    "start": "803199",
    "end": "809839"
  },
  {
    "text": "exactly and sometimes you can do it and sometime you you need multiple inheritance while the only thing that",
    "start": "809839",
    "end": "816000"
  },
  {
    "text": "you you need is the ability to call a piece of code and you cannot really do",
    "start": "816000",
    "end": "821160"
  },
  {
    "text": "that in oop in a simple ways there are tricks and the design patterns and but",
    "start": "821160",
    "end": "827880"
  },
  {
    "text": "in the most straightforward way code is kind of in jail inside the the objects",
    "start": "827880",
    "end": "834480"
  },
  {
    "text": "that wrap it and we want to Freedom we are we have a politic agenda we want to free",
    "start": "834480",
    "end": "841639"
  },
  {
    "text": "the world and we don't want code to be in jail I see so if I have an object",
    "start": "841639",
    "end": "848079"
  },
  {
    "text": "which is a person and inside of that object there's the data of the person's",
    "start": "848079",
    "end": "853720"
  },
  {
    "text": "first name and last name and there's a code that says here's how I represent that as their full name I've implemented",
    "start": "853720",
    "end": "861079"
  },
  {
    "text": "that inside of this this little object and it's stuck inside of there and I",
    "start": "861079",
    "end": "867160"
  },
  {
    "text": "have to do a bunch of tricks whether it's inheritance or includes or Imports",
    "start": "867160",
    "end": "872360"
  },
  {
    "text": "or whatever it is in order to free that logic from the person and give it to",
    "start": "872360",
    "end": "879000"
  },
  {
    "text": "other areas of my application that may also need the exact same logic so the problem is is the data and the code are",
    "start": "879000",
    "end": "886320"
  },
  {
    "text": "wrapped up together and that's that's trapping the functionality and we want to make it",
    "start": "886320",
    "end": "892040"
  },
  {
    "text": "free is that what you're saying yeah and I think okay object is fine where the",
    "start": "892040",
    "end": "899360"
  },
  {
    "text": "data that you wrap in the that you encapsulate in the object is not information data is we have different",
    "start": "899360",
    "end": "906639"
  },
  {
    "text": "kinds of data sometimes we have data for example the internals of the data",
    "start": "906639",
    "end": "911800"
  },
  {
    "text": "structures the left uh child and the right child and the number of children",
    "start": "911800",
    "end": "918000"
  },
  {
    "text": "and is visited and stuff like that this is not what I call data this is not information that comes from the outside",
    "start": "918000",
    "end": "925240"
  },
  {
    "text": "this is not something about the real world it's something about your program for things about your program that's",
    "start": "925240",
    "end": "931720"
  },
  {
    "text": "fine to use objects but for facts about the world that come from the from",
    "start": "931720",
    "end": "938519"
  },
  {
    "text": "outside I think it's better they deserve to be to live on their own not to be",
    "start": "938519",
    "end": "945560"
  },
  {
    "text": "stuck into our mental systems okay so there's kind of like internal data and",
    "start": "945560",
    "end": "951759"
  },
  {
    "text": "external data is kind of what you're saying but you're you're saying one's information and one's not and it's okay to encapsulate intern things because",
    "start": "951759",
    "end": "959480"
  },
  {
    "text": "they're uninteresting to the outside world but if you encapsulate things that are eventually interesting the outside",
    "start": "959480",
    "end": "964800"
  },
  {
    "text": "world now you've backed yourself into a corner I see what you're saying okay so there's the why so for",
    "start": "964800",
    "end": "971720"
  },
  {
    "text": "principle one what about principle two representing data with generic data structures why use a map or a list those",
    "start": "971720",
    "end": "980440"
  },
  {
    "text": "are kind of the two main ones right list of things and then like dictionaries of things or Maps or hashes or whatever your language calls them when you could",
    "start": "980440",
    "end": "988040"
  },
  {
    "text": "more represent them as what as what the world wants to see them as necessarily",
    "start": "988040",
    "end": "993120"
  },
  {
    "text": "why is it beneficial to just pass around generic things if we have the capability of building specific things okay that's",
    "start": "993120",
    "end": "1001600"
  },
  {
    "text": "that's the toughest question and that's the question that comes again and again",
    "start": "1001600",
    "end": "1006680"
  },
  {
    "text": "that's the the strongest critique against closure and data programming but",
    "start": "1006680",
    "end": "1012360"
  },
  {
    "text": "also that's the the most interesting one so let's let's say that we have a way to",
    "start": "1012360",
    "end": "1019680"
  },
  {
    "text": "do data validation and that will we will talk about it when we talk about principle number four so let's say we",
    "start": "1019680",
    "end": "1025959"
  },
  {
    "text": "are not scared about having to manipulate invalid data let's put this",
    "start": "1025959",
    "end": "1031199"
  },
  {
    "text": "fear aside for a moment and let's just see what we lose with a static typing",
    "start": "1031199",
    "end": "1036558"
  },
  {
    "text": "when I force data to be let's say I manipulate books and I have a structure",
    "start": "1036559",
    "end": "1045360"
  },
  {
    "text": "struct static types for a book let's see what kind of problem we have when we",
    "start": "1045360",
    "end": "1051240"
  },
  {
    "text": "force this this thing about the real world which is information about the books the title the number of pages",
    "start": "1051240",
    "end": "1058200"
  },
  {
    "text": "that's something in the real world but when I force it to to be wrapped into my",
    "start": "1058200",
    "end": "1064640"
  },
  {
    "text": "algebraic data type or my struct let's see what what do we lose first of all we",
    "start": "1064640",
    "end": "1070960"
  },
  {
    "text": "lose the ability to refer to Fields by their name at runtime because a stract",
    "start": "1070960",
    "end": "1079880"
  },
  {
    "text": "is when it's compiled it becomes just an array and the field names become offsets",
    "start": "1079880",
    "end": "1085600"
  },
  {
    "text": "inside the array meaning that for example it's very hard to be dynamic and",
    "start": "1085600",
    "end": "1091960"
  },
  {
    "text": "to receive let's say from the user the name of the field they want to retrieve because the name of the field is a",
    "start": "1091960",
    "end": "1098880"
  },
  {
    "text": "dynamic string and there is no easy way to fetch dynamically the value of a",
    "start": "1098880",
    "end": "1104600"
  },
  {
    "text": "field inside a stract without using reflection while if it's just a map you",
    "start": "1104600",
    "end": "1110760"
  },
  {
    "text": "can access any field in a map by its name it's the essence of the map does it make sense I think so but you said",
    "start": "1110760",
    "end": "1117919"
  },
  {
    "text": "absent reflection and lots of languages have reflection abilities so you can get",
    "start": "1117919",
    "end": "1123120"
  },
  {
    "text": "at the names of things pretty reliably right yeah but I think that if you write",
    "start": "1123120",
    "end": "1129320"
  },
  {
    "text": "a program and you rely too much on reflection you will be rejected by a code reviewer they would say hey what",
    "start": "1129320",
    "end": "1134640"
  },
  {
    "text": "are you doing here and you know in a sense if you use reflection and in anyway when you use reflection",
    "start": "1134640",
    "end": "1141720"
  },
  {
    "text": "you bypass the type Checker so you do thata written programming in a sense if",
    "start": "1141720",
    "end": "1147640"
  },
  {
    "text": "you use stct and access field with Reflections it's the same as using Maps",
    "start": "1147640",
    "end": "1155640"
  },
  {
    "text": "so just use maps if that's what you want what you want to do let me give you an example let's say you fetch from the",
    "start": "1155640",
    "end": "1162039"
  },
  {
    "text": "database information about a book with a title and number of pages and you want",
    "start": "1162039",
    "end": "1167679"
  },
  {
    "text": "to rename the field because in your API title should be called the title and",
    "start": "1167679",
    "end": "1173080"
  },
  {
    "text": "number of pages should be called pages in object ored programming what you need to do is to create another stct or if",
    "start": "1173080",
    "end": "1180159"
  },
  {
    "text": "you do static typing you need to have two strs one that holds the data as it is stored in the database and you need",
    "start": "1180159",
    "end": "1187440"
  },
  {
    "text": "another stct with the names that as they need to be seen by the",
    "start": "1187440",
    "end": "1193400"
  },
  {
    "text": "API while in if it's just a map you can in a map you can rename Fields it's just",
    "start": "1193400",
    "end": "1198440"
  },
  {
    "text": "a you know two line functions to rename a field in a map and if you want the user to decide how to rename the fields",
    "start": "1198440",
    "end": "1206400"
  },
  {
    "text": "also you have a big problem you cannot create a prior uh data types for every possible",
    "start": "1206400",
    "end": "1213240"
  },
  {
    "text": "combination if you want flexibility with your data and your field names you need a flexible data structure like a map",
    "start": "1213240",
    "end": "1221679"
  },
  {
    "text": "okay so from the static typing side though aren't you throwing away a lot of",
    "start": "1221679",
    "end": "1226880"
  },
  {
    "text": "upside you're throwing away a lot lot of tooling inference you're throwing away a lot of refactoring",
    "start": "1226880",
    "end": "1233039"
  },
  {
    "text": "abilities I know you said set validations aside for this part of it but obviously that does play a role in",
    "start": "1233039",
    "end": "1239720"
  },
  {
    "text": "in decision- making processes I'm sh my true colors I'm more of a dynamic guy myself so I'm not going to be the I'm",
    "start": "1239720",
    "end": "1246200"
  },
  {
    "text": "going to be an easier cell than probably a lot of our listeners when it comes to that side of yeah but I can hear in the",
    "start": "1246200",
    "end": "1251600"
  },
  {
    "text": "way you had the question you just pretend that you ask the question well I'm representing what a lot of people",
    "start": "1251600",
    "end": "1257720"
  },
  {
    "text": "think uh I work in small team small code bases I don't have a lot of the problems that static type solves personally I've seen",
    "start": "1257720",
    "end": "1265760"
  },
  {
    "text": "them and I've heard them from a lot of people and so I represent them but yes I am not going to be the hardest cell on",
    "start": "1265760",
    "end": "1273279"
  },
  {
    "text": "this but I don't want to be a pushover either so yeah I feel that most most of the concern of static type people is",
    "start": "1273279",
    "end": "1281520"
  },
  {
    "text": "based on fear like oh I need to know what I have it's like you are free",
    "start": "1281520",
    "end": "1286559"
  },
  {
    "text": "control and to yes tooling is the big one but if you",
    "start": "1286559",
    "end": "1292320"
  },
  {
    "text": "put those two aside and you are interested about what really happens",
    "start": "1292320",
    "end": "1298799"
  },
  {
    "text": "when the program runs after you have written it let's say you want to debug a program in production so there your",
    "start": "1298799",
    "end": "1306000"
  },
  {
    "text": "tooling will not really help you and you want something that is when it runs you want the even it's not the artifact you",
    "start": "1306000",
    "end": "1312480"
  },
  {
    "text": "want the run time to be simple and the less complex data structure",
    "start": "1312480",
    "end": "1318600"
  },
  {
    "text": "you use the simpler your your program moreover it's very easy to carry Maps",
    "start": "1318600",
    "end": "1324600"
  },
  {
    "text": "around for example the API for Google Docs right you want to modify the title",
    "start": "1324600",
    "end": "1331960"
  },
  {
    "text": "of a Google Document if you are using generic data structure it's you pass a",
    "start": "1331960",
    "end": "1338720"
  },
  {
    "text": "Json you know with a title and document and body and author name and first",
    "start": "1338720",
    "end": "1344480"
  },
  {
    "text": "paragraph and that's that's what what goes on the wire anyway but if you are a",
    "start": "1344480",
    "end": "1350880"
  },
  {
    "text": "static and you could have this map from many many functions right you can write",
    "start": "1350880",
    "end": "1356360"
  },
  {
    "text": "functions that enrich the map that remove stuff that rename Fields Etc",
    "start": "1356360",
    "end": "1362320"
  },
  {
    "text": "while if you if you use a static type API like the Java API you cannot really do that everything needs to be",
    "start": "1362320",
    "end": "1369440"
  },
  {
    "text": "statically known and Java Al with setter set title set author set this set that",
    "start": "1369440",
    "end": "1375880"
  },
  {
    "text": "and writing unit test also if you think I think one way to to measure",
    "start": "1375880",
    "end": "1380960"
  },
  {
    "text": "the readability or the goodness of the code is to see how easy it is to write test for it and when you use generic",
    "start": "1380960",
    "end": "1388279"
  },
  {
    "text": "data structures it's very easy to write test for your code you just create a map with the fields that your function",
    "start": "1388279",
    "end": "1394400"
  },
  {
    "text": "expect and you run you call the function and it could be that a function that in production receives a map with 10 Fields",
    "start": "1394400",
    "end": "1401039"
  },
  {
    "text": "but only looks at two in order to test it you don't need to create a whole map with the all the 10 Fields you can just",
    "start": "1401039",
    "end": "1407159"
  },
  {
    "text": "create a small map two field that you know the function care about and this kind of flexibility is really valuable",
    "start": "1407159",
    "end": "1414400"
  },
  {
    "text": "really valuable but does that flexibility scale so one of the things that I found over time as written many",
    "start": "1414400",
    "end": "1420159"
  },
  {
    "text": "Ruby programs and done it in such a way that it's flexible and I I could just",
    "start": "1420159",
    "end": "1427039"
  },
  {
    "text": "pass Maps around I could just test the parts of the maps that I'm interested in is that",
    "start": "1427039",
    "end": "1433000"
  },
  {
    "text": "I end up writing a lot of tests a lot of tests that are",
    "start": "1433000",
    "end": "1438960"
  },
  {
    "text": "merely typee checking like I'm merely saying did I get what I expect right and so I know you said we get if we can set",
    "start": "1438960",
    "end": "1445240"
  },
  {
    "text": "validations aside but we really can't because a lot of our programs are the interface between a",
    "start": "1445240",
    "end": "1451360"
  },
  {
    "text": "human and a database right and like in between there is like did I get what I expect from the human like a lot of what",
    "start": "1451360",
    "end": "1458320"
  },
  {
    "text": "we do is that and I can see the type the the static type argument that if you can",
    "start": "1458320",
    "end": "1465799"
  },
  {
    "text": "enforce that constraint formalized in a way then you can guarantee it and not",
    "start": "1465799",
    "end": "1471640"
  },
  {
    "text": "have to write a unit test that says well what if they pass me nil now what do I do how do you respond to that in data",
    "start": "1471640",
    "end": "1478000"
  },
  {
    "text": "oriented programming yeah so let's let's let's skip to principle number four and then we we'll go back to principle",
    "start": "1478000",
    "end": "1483600"
  },
  {
    "text": "number three okay so all right let's set that one aside uh let's go yeah straight to principal four and we'll go back to",
    "start": "1483600",
    "end": "1489799"
  },
  {
    "text": "three separating data scheme from data representation go ahead so how do we do data validation in a dynamic dynamically",
    "start": "1489799",
    "end": "1496520"
  },
  {
    "text": "typed world right so I'm writing a HTTP",
    "start": "1496520",
    "end": "1501640"
  },
  {
    "text": "server an API with lots of endpoints and each endpoints receive a payload and",
    "start": "1501640",
    "end": "1507640"
  },
  {
    "text": "each payload has an expected shape for the data so until I think four years the",
    "start": "1507640",
    "end": "1515159"
  },
  {
    "text": "way I I would validate that the data is valid is most of the time I just won't",
    "start": "1515159",
    "end": "1521360"
  },
  {
    "text": "validate and be optimistic and then fail in production fail with and clear errors",
    "start": "1521360",
    "end": "1529360"
  },
  {
    "text": "because instead of having a failure that say Hey you pass invalid data I would have F was called with a nil and it was",
    "start": "1529360",
    "end": "1538279"
  },
  {
    "text": "it would be it was very hard to read right you can't call this method on this nil thing so that works well when you",
    "start": "1538279",
    "end": "1544440"
  },
  {
    "text": "are startup and you don't really care about safety and you need to move fast",
    "start": "1544440",
    "end": "1550240"
  },
  {
    "text": "and that's what I did until four years ago but four years ago I discovered that",
    "start": "1550240",
    "end": "1556559"
  },
  {
    "text": "there was there there is a way to express programmatically data expected data sh",
    "start": "1556559",
    "end": "1565440"
  },
  {
    "text": "shape it started from something called inclosure closure spec and then something called Mali and something",
    "start": "1565440",
    "end": "1572559"
  },
  {
    "text": "called Json schema so let's talk about Json schema because it's Universal it",
    "start": "1572559",
    "end": "1577960"
  },
  {
    "text": "fits in in every programming language so in Json schema you have a map that",
    "start": "1577960",
    "end": "1586240"
  },
  {
    "text": "describes what you expect the expected field in your map for example you you could say the schema for a book I have a",
    "start": "1586240",
    "end": "1593720"
  },
  {
    "text": "field called title a field called Pages title should be a string pages should be",
    "start": "1593720",
    "end": "1598919"
  },
  {
    "text": "a number and there are functions for validating and say okay here is a piece of data that I got from the user here is",
    "start": "1598919",
    "end": "1606000"
  },
  {
    "text": "my schema please validate and if it's not valid tell me why and then you can",
    "start": "1606000",
    "end": "1613120"
  },
  {
    "text": "with no code just by writing the schema you can automatically with middleware generate you don't need to write codee",
    "start": "1613120",
    "end": "1619760"
  },
  {
    "text": "you just use a middleware that when your endpoint receives an invalid piece of data returns to the user the 404 402 or",
    "start": "1619760",
    "end": "1628559"
  },
  {
    "text": "I don't know 405 er error code automatically with explanation about hey the Field title was not provided oh you",
    "start": "1628559",
    "end": "1636320"
  },
  {
    "text": "provide title and it was not a string or even better you provide pages",
    "start": "1636320",
    "end": "1641960"
  },
  {
    "text": "with a number that is negative or with a number that is higher than a million or",
    "start": "1641960",
    "end": "1647640"
  },
  {
    "text": "or you can do lots of advanced things that you cannot really do with static typing you can do because do you do",
    "start": "1647640",
    "end": "1654559"
  },
  {
    "text": "runtime check in anyway the kind of check that you want to do are at runtime",
    "start": "1654559",
    "end": "1659640"
  },
  {
    "text": "you cannot validate at compile time user input right you agree with me sure so instead of writing a class that say Hey",
    "start": "1659640",
    "end": "1665799"
  },
  {
    "text": "That's the class of a book and let me try to Json pass this string into my book I'm create I I have a schema which",
    "start": "1665799",
    "end": "1673440"
  },
  {
    "text": "is super flexible I can express many many conditions there is no limit I can",
    "start": "1673440",
    "end": "1678840"
  },
  {
    "text": "even pass function as predicate or numbers in in a range or stuff like that",
    "start": "1678840",
    "end": "1685120"
  },
  {
    "text": "and everything is it just code that middleware for HTTP server that automatically generates the proper error",
    "start": "1685120",
    "end": "1692880"
  },
  {
    "text": "response when there is a failure so for I think for that for API for validating user",
    "start": "1692880",
    "end": "1698640"
  },
  {
    "text": "input dynamic programming is even better than static programming it's not only as",
    "start": "1698640",
    "end": "1704760"
  },
  {
    "text": "good as I claim it's better for this kind of data validation there is another kind where it's worse but this first",
    "start": "1704760",
    "end": "1712480"
  },
  {
    "text": "kind it's better okay it's better because say why it's better again why is",
    "start": "1712480",
    "end": "1718360"
  },
  {
    "text": "it better okay first of all because you can express conditions that are not expressible as static types like number",
    "start": "1718360",
    "end": "1724880"
  },
  {
    "text": "in a Range number of pages should be between zero and 10,000 you cannot",
    "start": "1724880",
    "end": "1730320"
  },
  {
    "text": "express that static types that's number one and number two because you can for",
    "start": "1730320",
    "end": "1737360"
  },
  {
    "text": "for example very easily generate the Swagger Json from the schema and in fact",
    "start": "1737360",
    "end": "1744919"
  },
  {
    "text": "the the language for for Swagger is based on Json schema and generating Json",
    "start": "1744919",
    "end": "1750760"
  },
  {
    "text": "schema for from a class is doable but it involves tricks Reflections and stuff",
    "start": "1750760",
    "end": "1756640"
  },
  {
    "text": "like that while generating Swagger data from Json schema is straightforward and you",
    "start": "1756640",
    "end": "1763640"
  },
  {
    "text": "can you can programmatically also manipul okay I I will do more later but",
    "start": "1763640",
    "end": "1769080"
  },
  {
    "text": "until now so it's more it's richer than static typing because you can express",
    "start": "1769080",
    "end": "1774960"
  },
  {
    "text": "any condition and it's a perfect match with swagger let's say and there is no downside so conceptually what you're",
    "start": "1774960",
    "end": "1781440"
  },
  {
    "text": "saying is you get to defer the typing or",
    "start": "1781440",
    "end": "1786640"
  },
  {
    "text": "you get to you're basically saying well you're going to have a schema you're going to have types or what you're going to have validations and like",
    "start": "1786640",
    "end": "1793320"
  },
  {
    "text": "requirements of their data but it's going to be separated out from your",
    "start": "1793320",
    "end": "1798600"
  },
  {
    "text": "application code and as long as it is enforced at the last at the last minute",
    "start": "1798600",
    "end": "1804080"
  },
  {
    "text": "or at the end of the chain of operations and as long as that the result of that",
    "start": "1804080",
    "end": "1809799"
  },
  {
    "text": "failure is matriculated back up to a place where it's displayed to an end user right it's not like an explosion or",
    "start": "1809799",
    "end": "1817159"
  },
  {
    "text": "or or crash it's a displayed error that's somehow built into the system",
    "start": "1817159",
    "end": "1822960"
  },
  {
    "text": "then it's better of doing it kind of at the edge nodes of your code at the at",
    "start": "1822960",
    "end": "1828679"
  },
  {
    "text": "the entrance Point are you convinced or half convinced or uh I'm interested it seems like I I",
    "start": "1828679",
    "end": "1837360"
  },
  {
    "text": "understand why you use Json schema as an example because it's broad sweeping versus a specific implementation or tool",
    "start": "1837360",
    "end": "1844360"
  },
  {
    "text": "chain inside of closure but I wonder how accessible this",
    "start": "1844360",
    "end": "1850559"
  },
  {
    "text": "setup is to different developers in different circumstances oftentimes what we find is",
    "start": "1850559",
    "end": "1857360"
  },
  {
    "text": "inside of a application framework you end up with even if you have a strong",
    "start": "1857360",
    "end": "1863279"
  },
  {
    "text": "schema at your database layer for example you end up with undefine is not",
    "start": "1863279",
    "end": "1869039"
  },
  {
    "text": "a function calls as people send input and I wonder how practically people",
    "start": "1869039",
    "end": "1874960"
  },
  {
    "text": "would get this going for themselves yeah so here you need a little bit of discipline because no nobody is going to",
    "start": "1874960",
    "end": "1881519"
  },
  {
    "text": "force you to write a schema for your endpoint for the payload and for the",
    "start": "1881519",
    "end": "1886679"
  },
  {
    "text": "response while in statically typed languages you are forced to type so yes that's that's",
    "start": "1886679",
    "end": "1894399"
  },
  {
    "text": "maybe little downside but once you get to it you do code review and you won't",
    "start": "1894399",
    "end": "1900200"
  },
  {
    "text": "accept code you won't accept a new endpoint without a schema where it's more challenging",
    "start": "1900200",
    "end": "1907039"
  },
  {
    "text": "is when we talk about another kind of validation which is okay I've passed my",
    "start": "1907039",
    "end": "1913360"
  },
  {
    "text": "endpoint and the endpoint calls a function that calls a function that calls a function that that calls the function so I'm going down the stack and",
    "start": "1913360",
    "end": "1920600"
  },
  {
    "text": "now I call the function f that receives a book but inside the code of Fu what I",
    "start": "1920600",
    "end": "1927799"
  },
  {
    "text": "see is that the parameter is called book but the type is just a map or it's just",
    "start": "1927799",
    "end": "1933600"
  },
  {
    "text": "a V and I and as a developer I have no way to know that the book parameter",
    "start": "1933600",
    "end": "1941440"
  },
  {
    "text": "received by fu is a map with those fields and I can use Json schema again",
    "start": "1941440",
    "end": "1948440"
  },
  {
    "text": "here but it is overkill to use Json schema everywhere so in closure we have",
    "start": "1948440",
    "end": "1954200"
  },
  {
    "text": "different tools for that and when they wired properly they give you kind of IDE",
    "start": "1954200",
    "end": "1961600"
  },
  {
    "text": "functionalities so when I wire it properly in my closure code I have the function f and I can say here it's a",
    "start": "1961600",
    "end": "1969080"
  },
  {
    "text": "it's a map but here is the schema of this map and if I call through from somewhere else and I mistype the field",
    "start": "1969080",
    "end": "1976159"
  },
  {
    "text": "name the IDE will tell me hey you have passed an invalid input to Fu like in a",
    "start": "1976159",
    "end": "1982720"
  },
  {
    "text": "staticly type language I don't know maybe you have seen in vs code which",
    "start": "1982720",
    "end": "1988480"
  },
  {
    "text": "relies on Json schema when you want to edit some conation files vs code knows",
    "start": "1988480",
    "end": "1995480"
  },
  {
    "text": "the Json schema of the file and if you mistype the name of a field inside your",
    "start": "1995480",
    "end": "2002080"
  },
  {
    "text": "configuration on the Fly vs code will tell you hey you have you have an error because actually there is repository of",
    "start": "2002080",
    "end": "2007880"
  },
  {
    "text": "Json schemas that vs code read from there so we can have something similar",
    "start": "2007880",
    "end": "2013720"
  },
  {
    "text": "in our code not only for configuration data but also for function arguments so",
    "start": "2013720",
    "end": "2019880"
  },
  {
    "text": "here we are not in power with static typing in terms of tooling and internal",
    "start": "2019880",
    "end": "2025279"
  },
  {
    "text": "functions when the information when the data flows it's it's it's not as good as in functional as in static typing I I",
    "start": "2025279",
    "end": "2032880"
  },
  {
    "text": "admit but what what we have what we do have is when you decide to type the",
    "start": "2032880",
    "end": "2040120"
  },
  {
    "text": "function arguments you are not forced to but when you decide to do so one benefit that you have is youit test for free let",
    "start": "2040120",
    "end": "2049079"
  },
  {
    "text": "me tell you again let's take the function f that receive a book and it's supposed to return I know whether",
    "start": "2049079",
    "end": "2055200"
  },
  {
    "text": "whether it is a good book or not yeah thumbs up or thumbs down yeah thumbs up or thumbs down let's say thumbs up is",
    "start": "2055200",
    "end": "2060919"
  },
  {
    "text": "more than three stars something like that and less than a thousand Pages if you have a schema for your book what you",
    "start": "2060919",
    "end": "2068320"
  },
  {
    "text": "can do is use Json schema library that so the first library that we discussed would validate data against schema but",
    "start": "2068320",
    "end": "2075679"
  },
  {
    "text": "there are libraries that generate data out of a schema so once you have your schema you can say hey generate me a th",
    "start": "2075679",
    "end": "2083040"
  },
  {
    "text": "samples of books call the function and make sure that the result is I expected it's called generative testing and it's",
    "start": "2083040",
    "end": "2089720"
  },
  {
    "text": "very easy to do to do that and I in my book I'm showing I show a couple of",
    "start": "2089720",
    "end": "2095960"
  },
  {
    "text": "examples how to leverage these capabilities for in addition to unit test where you",
    "start": "2095960",
    "end": "2101880"
  },
  {
    "text": "cover I know five 10 cases you can cover all the cases you can say generate all possible input or thousand or million of",
    "start": "2101880",
    "end": "2109079"
  },
  {
    "text": "possible input and validate that my code behaves properly and every time I run I",
    "start": "2109079",
    "end": "2114440"
  },
  {
    "text": "use that I find bugs you know some edge cases with regular expressions with special characters with negative things",
    "start": "2114440",
    "end": "2121040"
  },
  {
    "text": "positive things and doing so with the static types is much much more challenging to Generate random data out",
    "start": "2121040",
    "end": "2129680"
  },
  {
    "text": "of an algebraic data types is more challenging I'm not saying it's impossible but it's more challenging",
    "start": "2129680",
    "end": "2135720"
  },
  {
    "text": "while with Json schema and Maps it's very very natural yeah so have you ever",
    "start": "2135720",
    "end": "2140960"
  },
  {
    "text": "tried using your database schema as the schema or do you need like an internal",
    "start": "2140960",
    "end": "2147240"
  },
  {
    "text": "representation and an external representation uh usually it's it's different because in the usually in the",
    "start": "2147240",
    "end": "2154000"
  },
  {
    "text": "application you don't treat your data as tables you have Maps instead of tables and",
    "start": "2154000",
    "end": "2159440"
  },
  {
    "text": "those maps are denormalized instead of normalized so I don't think it's a but",
    "start": "2159440",
    "end": "2166200"
  },
  {
    "text": "I'm sure that there are tools that takes SQL schema and translate it into a Json",
    "start": "2166200",
    "end": "2172160"
  },
  {
    "text": "schema yeah there is an npm package SQL ddl to Json",
    "start": "2172160",
    "end": "2177560"
  },
  {
    "text": "schema how does graphql fit into this story don't talk with me about graphql I",
    "start": "2177560",
    "end": "2183920"
  },
  {
    "text": "I tried graphql and I was so upset so upset why because it's too rigid it's",
    "start": "2183920",
    "end": "2190480"
  },
  {
    "text": "too rigid too rigid too rigid and I really tried hard but so like many",
    "start": "2190480",
    "end": "2197680"
  },
  {
    "text": "things when you start it's great for hello world or the MVP it's great but",
    "start": "2197680",
    "end": "2203280"
  },
  {
    "text": "when the complexity of your requirements grow it becomes unmanageable and we had",
    "start": "2203280",
    "end": "2208400"
  },
  {
    "text": "to do so many tricks to please the graphql type Checker and it added too",
    "start": "2208400",
    "end": "2215119"
  },
  {
    "text": "much complexity to our business problem so Json schema in relation to graphql is",
    "start": "2215119",
    "end": "2221560"
  },
  {
    "text": "much less rigid Json schema is much more it's much more flexible I prefer to have rest plus Json schema than graphql",
    "start": "2221560",
    "end": "2229160"
  },
  {
    "text": "because in graphql also they have these things that let me just give you an example if I remember correctly you",
    "start": "2229160",
    "end": "2235240"
  },
  {
    "text": "cannot have un types for input data something like that they decided it's it",
    "start": "2235240",
    "end": "2241319"
  },
  {
    "text": "should not be done and it's there is debate on it in in G issues so probably",
    "start": "2241319",
    "end": "2248079"
  },
  {
    "text": "they will add it in a few years M but sometime you need it and so you end up",
    "start": "2248079",
    "end": "2254319"
  },
  {
    "text": "having what we did in at the end was to pass a string as part of the data to",
    "start": "2254319",
    "end": "2259920"
  },
  {
    "text": "graphql and to pass it as Json in order to get back the the flexibility that we",
    "start": "2259920",
    "end": "2265800"
  },
  {
    "text": "we [Music]",
    "start": "2265800",
    "end": "2272839"
  },
  {
    "text": "wanted",
    "start": "2275599",
    "end": "2278599"
  },
  {
    "text": "this episode is brought to you by Sentry build better software faster diagnose",
    "start": "2282400",
    "end": "2287680"
  },
  {
    "text": "fix and optimize the performance of your code more than a million developers in",
    "start": "2287680",
    "end": "2293680"
  },
  {
    "text": "68,000 organizations already use Sentry and that includes us here's the easiest way to try Sentry at the sentry.io slemo",
    "start": "2293680",
    "end": "2302640"
  },
  {
    "text": "sandbox that is a fully functional version of Sentry that you can poke at and best of all our listeners get the",
    "start": "2302640",
    "end": "2308920"
  },
  {
    "text": "team plan for free for 3 months head to sentry.io and use the code change law when you sign up again sentry.io and use",
    "start": "2308920",
    "end": "2316160"
  },
  {
    "text": "the code change [Music]",
    "start": "2316160",
    "end": "2325050"
  },
  {
    "text": "log let's loop back to principal number three because we skipped over it treating data as immutable this one is",
    "start": "2332480",
    "end": "2339200"
  },
  {
    "text": "an easy cell for people who have been doing FP for a while but it's a hard cell for a lot of oop proponents so I",
    "start": "2339200",
    "end": "2346960"
  },
  {
    "text": "think it's a hard cell just because we we got used to mutation and I think that",
    "start": "2346960",
    "end": "2354520"
  },
  {
    "text": "a while ago in Java strings were mutable and then they fixed it to be immutable",
    "start": "2354520",
    "end": "2360920"
  },
  {
    "text": "and it's much much much much better and I don't think that anybody likes",
    "start": "2360920",
    "end": "2368079"
  },
  {
    "text": "mutation it's just they think that if you go to IM mutability you will pay a",
    "start": "2368079",
    "end": "2374200"
  },
  {
    "text": "huge performance price cost right because you're copying data right so I think the interesting question is how",
    "start": "2374200",
    "end": "2380520"
  },
  {
    "text": "can you manipulate data in an immutable way without a performance hit that's the",
    "start": "2380520",
    "end": "2388680"
  },
  {
    "text": "interesting question what's the interesting answer is git git yeah git",
    "start": "2388680",
    "end": "2395640"
  },
  {
    "text": "is an immutable Source control tool and every time you do a commit you don't do",
    "start": "2395640",
    "end": "2402480"
  },
  {
    "text": "a modification you create a new node in the tree and you just move the pointer of the branch that say Hey Now You're",
    "start": "2402480",
    "end": "2408800"
  },
  {
    "text": "Going to point to this commit but the previous commit is not modified so the",
    "start": "2408800",
    "end": "2414319"
  },
  {
    "text": "git tree is immutable now the question how do they do the magic how do they how do they",
    "start": "2414319",
    "end": "2422240"
  },
  {
    "text": "allow us to create a new commit with let's say 10 changes in 10 files",
    "start": "2422240",
    "end": "2427359"
  },
  {
    "text": "without having to and they create the illusion that you have a new tree without creating a new tree and in G you",
    "start": "2427359",
    "end": "2433800"
  },
  {
    "text": "can go back in time 10,000 commit ago and in a millisecond you have the new",
    "start": "2433800",
    "end": "2439560"
  },
  {
    "text": "folder hierarchy so there is no performance hit and they don't replicate the whole Tree on each commit so what is",
    "start": "2439560",
    "end": "2447119"
  },
  {
    "text": "the secret behind it it's called structural sharing are you familiar with",
    "start": "2447119",
    "end": "2453160"
  },
  {
    "text": "this term no okay so let let let's start with Git and then we will see how it",
    "start": "2453160",
    "end": "2458520"
  },
  {
    "text": "applies with data so git you have folders and in each folders you have folders and folders and folders and then",
    "start": "2458520",
    "end": "2464920"
  },
  {
    "text": "files so imagine that you have a hierarchy of 10 folders and you want to change a file at",
    "start": "2464920",
    "end": "2472160"
  },
  {
    "text": "the bottom of the hierarchy so what you can do is to create a new tree and let's",
    "start": "2472160",
    "end": "2478680"
  },
  {
    "text": "say at the first level you have five folders and you modify only and the file",
    "start": "2478680",
    "end": "2483839"
  },
  {
    "text": "that you want to change is belongs to folder number five so the four other",
    "start": "2483839",
    "end": "2489280"
  },
  {
    "text": "folders can be copied by reference safely because you don't change them",
    "start": "2489280",
    "end": "2495079"
  },
  {
    "text": "folder number five you cannot copy by reference because you have a change below folder number five so what you do",
    "start": "2495079",
    "end": "2501760"
  },
  {
    "text": "you create a new folder five tag but all the children of folder five except the one that you are changing you can copy",
    "start": "2501760",
    "end": "2507599"
  },
  {
    "text": "them by reference and you do that recursively until you reach the leaf and",
    "start": "2507599",
    "end": "2513079"
  },
  {
    "text": "that's what GID does so at each level it copies by reference all the children and",
    "start": "2513079",
    "end": "2518839"
  },
  {
    "text": "it creates a new node for the modified node and that's structural sharing and",
    "start": "2518839",
    "end": "2523920"
  },
  {
    "text": "we can and we can do the same trick with maps so let's say you have a map with 10",
    "start": "2523920",
    "end": "2529319"
  },
  {
    "text": "fields and you want to modify and field number 10 is also a map and you want to modify a field inside field number 10 so",
    "start": "2529319",
    "end": "2537359"
  },
  {
    "text": "you copy by reference the nine maps and no matter how big they are it's just a",
    "start": "2537359",
    "end": "2543400"
  },
  {
    "text": "pointer copy and for the node number number 10 the map you create a new node and you copy all the children of node",
    "start": "2543400",
    "end": "2549839"
  },
  {
    "text": "number 10 beside the one that you want to change gotcha so you're only copying",
    "start": "2549839",
    "end": "2556000"
  },
  {
    "text": "the diffs like you're only actually the the the the new stuff is the only thing that's actually getting",
    "start": "2556000",
    "end": "2562440"
  },
  {
    "text": "new memory allocated everything else is just referencing existing and so that's why it's better than it used to be",
    "start": "2562440",
    "end": "2570000"
  },
  {
    "text": "yeah okay so imagine for S of conversation that you've you've",
    "start": "2570000",
    "end": "2575559"
  },
  {
    "text": "completely convinced me I bought in I'm now a data oriented programmer okay so I",
    "start": "2575559",
    "end": "2582640"
  },
  {
    "text": "separate my code from my data I use only generic data structures in my in my",
    "start": "2582640",
    "end": "2587680"
  },
  {
    "text": "application my data everything's immutable I'm not doing any mutations and I have this separate data schema",
    "start": "2587680",
    "end": "2594880"
  },
  {
    "text": "from my data and I'm living the life and I'm going about my Merry way what does",
    "start": "2594880",
    "end": "2601079"
  },
  {
    "text": "my life look like what what have I gained what am I experiencing you know",
    "start": "2601079",
    "end": "2606200"
  },
  {
    "text": "where how many Rainbows are there and unicorns like give us the the best case scenario of like adopting this is it",
    "start": "2606200",
    "end": "2614440"
  },
  {
    "text": "better in every way or there trade-offs go ahead and paint that picture yeah so first of all you are you belong to the",
    "start": "2614440",
    "end": "2621000"
  },
  {
    "text": "population that is enlightened and you are grateful for that and now you look at all your former colleagues and you",
    "start": "2621000",
    "end": "2627880"
  },
  {
    "text": "see how much they suffer and you pray for them okay and you pray for their for",
    "start": "2627880",
    "end": "2634640"
  },
  {
    "text": "and you buy them books that programming you buy with money and you give them",
    "start": "2634640",
    "end": "2640559"
  },
  {
    "text": "away to your friends hoping that they will also make the move enlightened",
    "start": "2640559",
    "end": "2645720"
  },
  {
    "text": "there you go uh seriously let me just mention I don't know if if it was clear but those",
    "start": "2645720",
    "end": "2652280"
  },
  {
    "text": "paradigms those principles are applicable in any programming language it's not applicable only in closure you",
    "start": "2652280",
    "end": "2658359"
  },
  {
    "text": "can apply them in Java in JavaScript in Ruby in Python in any virtually in any",
    "start": "2658359",
    "end": "2664640"
  },
  {
    "text": "programming language more over you are not forced to embrace them as a whole",
    "start": "2664640",
    "end": "2670280"
  },
  {
    "text": "you can decide okay in some places of my code I will just separate code from data but I will keep static typing and in",
    "start": "2670280",
    "end": "2677240"
  },
  {
    "text": "other places I will use generic data structures and in some places I will",
    "start": "2677240",
    "end": "2682599"
  },
  {
    "text": "allow mutability if I want so it's uh Cherry pickable okay now let's say you decided",
    "start": "2682599",
    "end": "2690319"
  },
  {
    "text": "to write your HTTP server in the data oriented programming way what how does your life look like so your life look",
    "start": "2690319",
    "end": "2697280"
  },
  {
    "text": "like that you deal only with the business logic you don't deal with pleasing the compiler or pleasing the",
    "start": "2697280",
    "end": "2703400"
  },
  {
    "text": "language in data oriented programming you have so many goodies in terms of data",
    "start": "2703400",
    "end": "2709240"
  },
  {
    "text": "manipulation as part of the language or as third party libraries like f Tools in",
    "start": "2709240",
    "end": "2714880"
  },
  {
    "text": "Python low Dash in JavaScript Etc that it's very very easy to manipulate data",
    "start": "2714880",
    "end": "2721480"
  },
  {
    "text": "to do massage to your data to read it like this to manipulate like that to job and to pass it Forward which is what",
    "start": "2721480",
    "end": "2728520"
  },
  {
    "text": "most of our apis do they read data from one place from another place they match",
    "start": "2728520",
    "end": "2734800"
  },
  {
    "text": "together and they pass it forward you don't deal with serialization because serializing a map is a problem that is",
    "start": "2734800",
    "end": "2741440"
  },
  {
    "text": "completely solve you use a library you don't deal with specifying the creating",
    "start": "2741440",
    "end": "2747920"
  },
  {
    "text": "the swager from your uh endpoint you just have your schema and middleware create the schema you don't do",
    "start": "2747920",
    "end": "2755079"
  },
  {
    "text": "validation it does it is done by middleware so you only do business logic you generate unit",
    "start": "2755079",
    "end": "2762960"
  },
  {
    "text": "test by randomly generated data you pass data around you pass map around you use",
    "start": "2762960",
    "end": "2769880"
  },
  {
    "text": "maps and you live happily and from time to time someone say hey what is the",
    "start": "2769880",
    "end": "2776440"
  },
  {
    "text": "field that this map expect why didn't you document it and then you say oh I should have written a schema here to",
    "start": "2776440",
    "end": "2783240"
  },
  {
    "text": "make it clearer that's I think that's the problem that is not solved so you got to have those schemas that's the",
    "start": "2783240",
    "end": "2788760"
  },
  {
    "text": "discipline yeah I think that's the problem that is not yet solved it's a tooling problem we don't yet in 2022",
    "start": "2788760",
    "end": "2796040"
  },
  {
    "text": "have a common way to combine to express that this argument is expected to be of",
    "start": "2796040",
    "end": "2803760"
  },
  {
    "text": "this schema we can do that as I mentioned but it's it feels a bit awkward it's a problem that is not yet",
    "start": "2803760",
    "end": "2810559"
  },
  {
    "text": "solved and let me tell you something interesting that happened to me when uh the beginning of last year I was",
    "start": "2810559",
    "end": "2817760"
  },
  {
    "text": "contacted by the main engineer of an very interesting language called",
    "start": "2817760",
    "end": "2823720"
  },
  {
    "text": "ballerina have you heard of ballerina yeah I think we did a show on ballerina it's like designed specifically for apis",
    "start": "2823720",
    "end": "2829800"
  },
  {
    "text": "right exactly so you did a show or for the cloud I can't remember how they pitch it yeah we did a show like two or",
    "start": "2829800",
    "end": "2835640"
  },
  {
    "text": "three years ago on ballerina I haven't heard of it since honestly okay so it has a continued its Evolution and the B",
    "start": "2835640",
    "end": "2843839"
  },
  {
    "text": "the ballerina of 2022 one of the it is marketized as a data oriented language",
    "start": "2843839",
    "end": "2850839"
  },
  {
    "text": "so those guys came to me you know it's a an army of developers it's I know 100",
    "start": "2850839",
    "end": "2856760"
  },
  {
    "text": "developers working for five years and the the manager of all this Army came to",
    "start": "2856760",
    "end": "2861960"
  },
  {
    "text": "me and say oh I your books look very interesting do you mind writing an",
    "start": "2861960",
    "end": "2867359"
  },
  {
    "text": "article about how balarina fits with the paradigms of your book and I was",
    "start": "2867359",
    "end": "2873640"
  },
  {
    "text": "wow so I did a little research about ballerina and I wrote a couple of",
    "start": "2873640",
    "end": "2879040"
  },
  {
    "text": "articles in infoq about ballerina and one of the very interesting things that",
    "start": "2879040",
    "end": "2884319"
  },
  {
    "text": "ballerina Fosters is they have something which is called the flexible type system which is",
    "start": "2884319",
    "end": "2891440"
  },
  {
    "text": "neither static nor Dynamic it's in the middle and it's super interesting",
    "start": "2891440",
    "end": "2897040"
  },
  {
    "text": "because it gives you all the goodies of statically typed language with all the flexibility of a dynamically type",
    "start": "2897040",
    "end": "2903160"
  },
  {
    "text": "language Let me give you an example to illustrate what it looks like so the",
    "start": "2903160",
    "end": "2908440"
  },
  {
    "text": "Syntax for maps is very similar to Java to JavaScript you know curly braces and",
    "start": "2908440",
    "end": "2913920"
  },
  {
    "text": "Json but for accessing a member you have two different syntax you have the dot",
    "start": "2913920",
    "end": "2919040"
  },
  {
    "text": "notation and the square bracket notation in JavaScript both notation are",
    "start": "2919040",
    "end": "2924160"
  },
  {
    "text": "equivalent but in ballerina the dot notation is for fields that are at",
    "start": "2924160",
    "end": "2931160"
  },
  {
    "text": "compile time part part of your data and the square bracket notation for dynamic types if for some reason you want to say",
    "start": "2931160",
    "end": "2937839"
  },
  {
    "text": "here I want to add a new member to my data which is not part of the schema dear compiler let me do so so most of",
    "start": "2937839",
    "end": "2945319"
  },
  {
    "text": "the time you will use the the field that you know at compile time and from time to time you will allow yourself to to",
    "start": "2945319",
    "end": "2951799"
  },
  {
    "text": "add new new Fields you can Splurge a little you know you can go out for the evening yeah exactly treat yourself nice",
    "start": "2951799",
    "end": "2958799"
  },
  {
    "text": "yeah and I think it's for me I think it's is the future I don't know if it's ballerina it's going to nail it down or",
    "start": "2958799",
    "end": "2964319"
  },
  {
    "text": "maybe another language but I don't think that everything is perfect in the dynamically type",
    "start": "2964319",
    "end": "2969760"
  },
  {
    "text": "languages even with Json schema like I mentioned we have the tooling problem with static typing we have rigidity",
    "start": "2969760",
    "end": "2976040"
  },
  {
    "text": "problem and maybe we need a new language that will combine the best of both",
    "start": "2976040",
    "end": "2981720"
  },
  {
    "text": "words yeah or maybe that language is not ballerina specifically but this this",
    "start": "2981720",
    "end": "2988720"
  },
  {
    "text": "Panacea maybe it's too good to be true maybe there is no such middle ground that we can actually stake out cuz of",
    "start": "2988720",
    "end": "2994960"
  },
  {
    "text": "the required of discipline you know if you provide me the ability to shoot myself in the foot I may just do it over",
    "start": "2994960",
    "end": "3001720"
  },
  {
    "text": "and over again until my code base is unmaintainable I don't know I mean that's what you have in Dynamic and we",
    "start": "3001720",
    "end": "3007319"
  },
  {
    "text": "we do okay but I do think tooling is definitely the downfall at this time but",
    "start": "3007319",
    "end": "3013480"
  },
  {
    "text": "of the dynamic world we see all the cool new tools coming out and we're like wow",
    "start": "3013480",
    "end": "3018599"
  },
  {
    "text": "we can't this is why we can't have nice things but we do have freedom yes and and the tooling also uh gets better and",
    "start": "3018599",
    "end": "3026640"
  },
  {
    "text": "better like I said in closure we have CJ condo with Mali and there is decent",
    "start": "3026640",
    "end": "3031760"
  },
  {
    "text": "integration it's not like you know Java ID is but it's getting closer MH uh but",
    "start": "3031760",
    "end": "3038720"
  },
  {
    "text": "future will will tell very cool well anything I'm sure there's areas that we",
    "start": "3038720",
    "end": "3044119"
  },
  {
    "text": "didn't touch the one thing that you mentioned you might return to was the circumstance in",
    "start": "3044119",
    "end": "3049359"
  },
  {
    "text": "which the schema representation is worse",
    "start": "3049359",
    "end": "3055160"
  },
  {
    "text": "than static type and you mentioned in the case of API end points with Json schema it's better for the two reasons",
    "start": "3055160",
    "end": "3061000"
  },
  {
    "text": "that you stated but what's the what kind of program in which it's actually worse",
    "start": "3061000",
    "end": "3066079"
  },
  {
    "text": "yeah so it's not the kind of program like where in the program okay where so we we have two kind of data validation",
    "start": "3066079",
    "end": "3073359"
  },
  {
    "text": "one at the boundaries of our programs and it's there the the validation is",
    "start": "3073359",
    "end": "3079079"
  },
  {
    "text": "inherently dynamic because you get output from the outside so the",
    "start": "3079079",
    "end": "3084799"
  },
  {
    "text": "validation by definition cannot happen at compile time it cannot be static has to be dynamic so that's where dynamic",
    "start": "3084799",
    "end": "3092000"
  },
  {
    "text": "programming has an edge but when you are inside your code when a function calls a function that calls a function here",
    "start": "3092000",
    "end": "3099720"
  },
  {
    "text": "statically type languages have an edge and we have the tooling problem all",
    "start": "3099720",
    "end": "3106200"
  },
  {
    "text": "right well what about Community is there a place where data oriented programmers hang out discuss tell War Stories is it",
    "start": "3106200",
    "end": "3114160"
  },
  {
    "text": "the closure Community are these just the same communities unfortunately not yet not yet okay well as the author of data",
    "start": "3114160",
    "end": "3121680"
  },
  {
    "text": "oriented programming and the guy who the ballerina folk come to for their you",
    "start": "3121680",
    "end": "3127359"
  },
  {
    "text": "know for their punditry maybe uh maybe you could be the one to get something started around this group of people who",
    "start": "3127359",
    "end": "3134400"
  },
  {
    "text": "it seems like at least enclosure land enclosure seems to make this accessible this style what are other",
    "start": "3134400",
    "end": "3141760"
  },
  {
    "text": "languages or or areas where it's pretty easy to do data Ori the programming I",
    "start": "3141760",
    "end": "3146799"
  },
  {
    "text": "think JavaScript is really it's really a good fit that our program fits natural",
    "start": "3146799",
    "end": "3152839"
  },
  {
    "text": "and in a sense typescript is kind of data oriented because at run times the",
    "start": "3152839",
    "end": "3160119"
  },
  {
    "text": "types are not there at run times typescripts is Javascript so it's",
    "start": "3160119",
    "end": "3165359"
  },
  {
    "text": "typescript is like a lter it's not really a statically type language it's like a linter a static type linter yeah",
    "start": "3165359",
    "end": "3172920"
  },
  {
    "text": "so in a sense types script is kind of and you you know in you can say here",
    "start": "3172920",
    "end": "3178400"
  },
  {
    "text": "leave me alone it's anything or any or whatever right that's kind of your your",
    "start": "3178400",
    "end": "3183559"
  },
  {
    "text": "eject button from typescript is the any type right yeah but even without the any type what I wanted to say is that in",
    "start": "3183559",
    "end": "3189680"
  },
  {
    "text": "typescript the types are not part of the data you still have the freedom to",
    "start": "3189680",
    "end": "3195160"
  },
  {
    "text": "create types decoupled from from the from the data the types are like glasses",
    "start": "3195160",
    "end": "3200680"
  },
  {
    "text": "and at which you want to look at the data and you could have the same data and look at look at it in in a function",
    "start": "3200680",
    "end": "3207839"
  },
  {
    "text": "as being this type and in another function it's another type for one function it's just a person and for",
    "start": "3207839",
    "end": "3213480"
  },
  {
    "text": "another function it's an author and for another function it's just a map so what I like in TT is the decoupling between",
    "start": "3213480",
    "end": "3220960"
  },
  {
    "text": "types and and schema so that's why I'm saying it's maybe it can be considered",
    "start": "3220960",
    "end": "3226160"
  },
  {
    "text": "as a data oriented programming language gotcha well there are more and more people writing typescript each and every",
    "start": "3226160",
    "end": "3233880"
  },
  {
    "text": "day so maybe we have more people with access to this style if it is",
    "start": "3233880",
    "end": "3239480"
  },
  {
    "text": "interesting to you check out yanan's blog there's lots of extracts from the",
    "start": "3239480",
    "end": "3245559"
  },
  {
    "text": "book and blog posts out there covering the principles and some of the history of this style of course there is the",
    "start": "3245559",
    "end": "3252520"
  },
  {
    "text": "book data oriented programming out there published by Manning check that out we'll have links to all the things in",
    "start": "3252520",
    "end": "3259160"
  },
  {
    "text": "the show notes so people can connect with you connect with the book and hopefully you know I like that Cherry",
    "start": "3259160",
    "end": "3265599"
  },
  {
    "text": "pickable people can start to integrate some of these Styles these principles into their",
    "start": "3265599",
    "end": "3271640"
  },
  {
    "text": "code you don't have to go all in you can say I'm going to start writing my",
    "start": "3271640",
    "end": "3276720"
  },
  {
    "text": "programs uh immutably from here on out and you can just kind of adopt that as you go so all four things uh you can",
    "start": "3276720",
    "end": "3283480"
  },
  {
    "text": "build towards that towards that perfect world where you're completely enlightened and living the good life as",
    "start": "3283480",
    "end": "3289920"
  },
  {
    "text": "yonan is thanks so much for coming on the show really appreciate it yeah my pleasure",
    "start": "3289920",
    "end": "3297040"
  },
  {
    "text": "okay that's it the show's done thank you for tuning in a big thank you to yonathan for joining us on today's show",
    "start": "3297040",
    "end": "3303640"
  },
  {
    "text": "and hey we have some books to give away of his but join us in slack that's where you get them change.com Community you",
    "start": "3303640",
    "end": "3309640"
  },
  {
    "text": "can join for free you might get some free books that's a good deal and once again a big thank you to our friends and",
    "start": "3309640",
    "end": "3316079"
  },
  {
    "text": "partners that fastly and fly and thank you also to Our Mysterious friend BMC",
    "start": "3316079",
    "end": "3321319"
  },
  {
    "text": "break master cylinder for making sure we're bumping the best beats in the Biz yes we love those beats and I hope you",
    "start": "3321319",
    "end": "3328559"
  },
  {
    "text": "love them too and FYI if you didn't know this we share video clips of all of our",
    "start": "3328559",
    "end": "3333680"
  },
  {
    "text": "podcasts on YouTube subscribe at youtube.com/ changelog but hey that's it",
    "start": "3333680",
    "end": "3339359"
  },
  {
    "text": "this Show's done thank you again for tuning in we'll see you on",
    "start": "3339359",
    "end": "3344460"
  },
  {
    "text": "[Music]",
    "start": "3344460",
    "end": "3354000"
  },
  {
    "text": "Monday",
    "start": "3354000",
    "end": "3357000"
  },
  {
    "text": "[Music]",
    "start": "3359170",
    "end": "3362989"
  },
  {
    "text": "[Music]",
    "start": "3366550",
    "end": "3382920"
  },
  {
    "text": "n",
    "start": "3383920",
    "end": "3386920"
  },
  {
    "text": "[Music] k",
    "start": "3394300",
    "end": "3400000"
  }
]