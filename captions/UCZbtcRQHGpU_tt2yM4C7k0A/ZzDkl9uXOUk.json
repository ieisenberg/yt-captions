[
  {
    "text": "let's do it it's go time welcome to go time your source for wide ranging",
    "start": "9080",
    "end": "15440"
  },
  {
    "text": "discussions from all around the go Community find us on the web at go time. FM on the fediverse at gotime at Chang",
    "start": "15440",
    "end": "23599"
  },
  {
    "text": "log. social and on X at gotime FM thanks to our partners at fly.io the home of",
    "start": "23599",
    "end": "29080"
  },
  {
    "text": "Chang log.com launch your app as close to your users as possible find out how at",
    "start": "29080",
    "end": "35559"
  },
  {
    "text": "fly.io okay here we [Music]",
    "start": "35559",
    "end": "41600"
  },
  {
    "text": "go I am Natalie panovic and I am joined today by two people with equally",
    "start": "43200",
    "end": "49280"
  },
  {
    "text": "complicated last names Felix Ganda and Michael kusek Felix you are a senior",
    "start": "49280",
    "end": "57320"
  },
  {
    "text": "staff engineer at data dog where you work on profiling as a product and you contribute to the go runtime and Michael",
    "start": "57320",
    "end": "64559"
  },
  {
    "text": "you are a software engineer at Google on the go compiler and runtime team how are",
    "start": "64559",
    "end": "69720"
  },
  {
    "text": "you both doing good yeah doing well nice Felix you came here with something to",
    "start": "69720",
    "end": "74799"
  },
  {
    "text": "say about something that was told on this podcast in the past yes so um a",
    "start": "74799",
    "end": "80159"
  },
  {
    "text": "while ago specifically December 2022 I was listening to an episode of uh go",
    "start": "80159",
    "end": "86280"
  },
  {
    "text": "time and at that time I was just looking into the execution Tracer as a potential",
    "start": "86280",
    "end": "92000"
  },
  {
    "text": "solution to problem I was trying to solve at data Doc and what we were trying to do was to simplify the process",
    "start": "92000",
    "end": "97680"
  },
  {
    "text": "of debugging slow requests especially without adding additional Telemetry to identify maybe forgotten things like",
    "start": "97680",
    "end": "105280"
  },
  {
    "text": "outgoing network holds that weren't instrumented and that might explain the latency but also to deal with um sources",
    "start": "105280",
    "end": "111960"
  },
  {
    "text": "of latencies that are very difficult or impossible to instrument such as mutex contention or inefficient go routine",
    "start": "111960",
    "end": "118920"
  },
  {
    "text": "communication patterns and stuff like this anyway so the the episode I was referring to 260 making go more",
    "start": "118920",
    "end": "126159"
  },
  {
    "text": "efficient yes making go more efficient uh during this episode Christian Simon said uh at some point I've always",
    "start": "126159",
    "end": "133599"
  },
  {
    "text": "started execution tracing when I was desperate but I've never found the problem with it and while I was",
    "start": "133599",
    "end": "140440"
  },
  {
    "text": "listening to this I was thinking like yeah I totally get it this a difficult tool to use uh because I was using it at",
    "start": "140440",
    "end": "146840"
  },
  {
    "text": "the time and just like uh getting to know it but the the other hand I was also becoming really en armored with the",
    "start": "146840",
    "end": "153280"
  },
  {
    "text": "possibilities of that tool and how it can really give answers to questions that no other tool in the go tool system",
    "start": "153280",
    "end": "160280"
  },
  {
    "text": "can can answer and so yeah I was hoping that one day I would come back to the or",
    "start": "160280",
    "end": "165680"
  },
  {
    "text": "not come back come to the go Time Podcast to kind of challenge this assumption that this tool is only for",
    "start": "165680",
    "end": "170720"
  },
  {
    "text": "the desperate and will not even help them and uh also a lot has happened",
    "start": "170720",
    "end": "175959"
  },
  {
    "text": "since then um Michael has recently pled about improvements to the exec ution tracer on his more powerful go execution",
    "start": "175959",
    "end": "182840"
  },
  {
    "text": "tracers blog post where he summarized a lot of cool stuff that has happened in go21 and 122 and so hopefully today we",
    "start": "182840",
    "end": "190599"
  },
  {
    "text": "can kind of dispel some myths about execution Tracer and tell people about how to use it efficiently so you didn't",
    "start": "190599",
    "end": "197000"
  },
  {
    "text": "just come alone to this episode to talk about this sentence you really brought Michael to resonate with this um Michael",
    "start": "197000",
    "end": "204760"
  },
  {
    "text": "could you tell us about that blog post yeah sure so the blog post was um all",
    "start": "204760",
    "end": "210040"
  },
  {
    "text": "about the stuff that has happened with execution tracing in the last year uh which is a lot um all of that sort of",
    "start": "210040",
    "end": "216280"
  },
  {
    "text": "started with Felix and uh his colleague Nick reaching out to me after shared",
    "start": "216280",
    "end": "221799"
  },
  {
    "text": "some document about possible directions I don't remember through which channel and uh we were we were thinking and",
    "start": "221799",
    "end": "227920"
  },
  {
    "text": "excited about tracing you were trying to figure out what other teams that other companies and in the go community in",
    "start": "227920",
    "end": "233200"
  },
  {
    "text": "general would be uh interested in seeing and I remember getting this this email from Felix and Nick that's like like yes",
    "start": "233200",
    "end": "240560"
  },
  {
    "text": "we want to do this we're willing to help and I was like great we're doing it right and uh and then that's that's sort",
    "start": "240560",
    "end": "246959"
  },
  {
    "text": "of started this whole St I think this was like December 2022 or something like that but uh the history of execution",
    "start": "246959",
    "end": "253720"
  },
  {
    "text": "traces goes back way further to go 1.5 where it was initially introduced",
    "start": "253720",
    "end": "260400"
  },
  {
    "text": "and that came with a pair of apis one in the runtime to generate the traces and a",
    "start": "260400",
    "end": "266240"
  },
  {
    "text": "tool that came with a gotool trace which would let you actually uh visualize and",
    "start": "266240",
    "end": "271840"
  },
  {
    "text": "look at the different things that that your program is doing and that's what sort of unique about execution traces is",
    "start": "271840",
    "end": "277360"
  },
  {
    "text": "they they're the only tool that offers a view of what your goroutines are doing",
    "start": "277360",
    "end": "283000"
  },
  {
    "text": "at any given point in time and you know for different things that gortin do you",
    "start": "283000",
    "end": "288320"
  },
  {
    "text": "can see stack traces and this is sort of getting into the use cases a little bit but the sort of like killer feature of",
    "start": "288320",
    "end": "295320"
  },
  {
    "text": "this is that it get you get to see things that aren't happening and",
    "start": "295320",
    "end": "300560"
  },
  {
    "text": "I think that there's a sort of magic with that there's a lot of assumptions we make about what our programs are",
    "start": "300560",
    "end": "305919"
  },
  {
    "text": "doing and how we and there's a lot of assumptions we make about how our programs will behave when we write them",
    "start": "305919",
    "end": "311960"
  },
  {
    "text": "but the reality is often different and whenever I find myself using execution",
    "start": "311960",
    "end": "317120"
  },
  {
    "text": "traces to try to solve a problem from my perspective that's usually something with the GC uh some kind of latency",
    "start": "317120",
    "end": "323919"
  },
  {
    "text": "issue that uh is you know maybe the runtime is the culprit it is really good",
    "start": "323919",
    "end": "329919"
  },
  {
    "text": "challenging my assumptions about what the runtime is doing and um how does it",
    "start": "329919",
    "end": "335280"
  },
  {
    "text": "fit the ecosystem like it's a it's one of the tools that come with go and uh",
    "start": "335280",
    "end": "340919"
  },
  {
    "text": "any information you have like on the usage how often people use or any any interesting like bits of information",
    "start": "340919",
    "end": "348080"
  },
  {
    "text": "about this at all if you have sure sure uh well so yeah the tool comes with uh",
    "start": "348080",
    "end": "353319"
  },
  {
    "text": "every standard Go distribution so you know there's the go command like go build go test and if you type go tool",
    "start": "353319",
    "end": "359800"
  },
  {
    "text": "Trace then that will give you the the command to actually look and analyze at traces if you want to get a trace of",
    "start": "359800",
    "end": "367840"
  },
  {
    "text": "your tests you can use go test- trce there's the runtime trce package for",
    "start": "367840",
    "end": "373800"
  },
  {
    "text": "actually generating the traces there's uh that HTTP PPR for uh basically",
    "start": "373800",
    "end": "381440"
  },
  {
    "text": "setting up your HTTP server with nend points that let you grab an execution",
    "start": "381440",
    "end": "386520"
  },
  {
    "text": "trace on demand from production or something and there's now a whole bunch",
    "start": "386520",
    "end": "391960"
  },
  {
    "text": "of new experimental features that I can talk about uh sort of later as we move more into the future about execution",
    "start": "391960",
    "end": "398120"
  },
  {
    "text": "traces and talk about the work that has happened in the last year which I'm very excited to share but I feel like I gotta",
    "start": "398120",
    "end": "404400"
  },
  {
    "text": "I gotta motivate first well do motivate us okay very well",
    "start": "404400",
    "end": "410039"
  },
  {
    "text": "so the execution traces are great when they work but the problem is as Felix",
    "start": "410039",
    "end": "417240"
  },
  {
    "text": "alluded to earlier is that they can be kind of hard to use so in that blog post the main problems were that traces had",
    "start": "417240",
    "end": "423440"
  },
  {
    "text": "high overheads so for example if you wanted to start tracing you probably",
    "start": "423440",
    "end": "428520"
  },
  {
    "text": "couldn't do so and for more reasons than just that and I'll get to you couldn't",
    "start": "428520",
    "end": "433639"
  },
  {
    "text": "really trace for more than a few seconds or maybe as like an ad hoc tool because",
    "start": "433639",
    "end": "439039"
  },
  {
    "text": "uh traces tended to have very high overheads when they were first released they had I think it was something was it was quite significant it was like 450%",
    "start": "439039",
    "end": "446560"
  },
  {
    "text": "or something like that and then over time that kind of of was able to get down to 10 to 20% Which is roundabout",
    "start": "446560",
    "end": "453960"
  },
  {
    "text": "now with 121 well with actually with 121 it's down to 1 to 2% thanks to work that",
    "start": "453960",
    "end": "459400"
  },
  {
    "text": "Felix and Nick did in the 121 release so um I thought it's the 122 one okay yeah",
    "start": "459400",
    "end": "465599"
  },
  {
    "text": "go 121 is I believe where the low overhead tracing came in go 122 had a",
    "start": "465599",
    "end": "471800"
  },
  {
    "text": "whole bunch of other features that uh but yeah yeah so tracing is now we'll also talk about them yes uh tracing is",
    "start": "471800",
    "end": "478240"
  },
  {
    "text": "now substantially lower over head so that was sort of the first problem is like people didn't really want to use it you couldn't really use it at scale or",
    "start": "478240",
    "end": "484479"
  },
  {
    "text": "collect a lot of traces because or in production much yes yes I mean you could use it in production for like oneoff",
    "start": "484479",
    "end": "490159"
  },
  {
    "text": "things right but no more than like maybe a few seconds or a minute at a time or something like that so the second big",
    "start": "490159",
    "end": "496800"
  },
  {
    "text": "problem was that traces didn't scale well like if you Tred to collect a really long trace and you Tred to",
    "start": "496800",
    "end": "502960"
  },
  {
    "text": "analyze it there was a high likelihood that it would fall over the gotool trace command would actually uh probably crash",
    "start": "502960",
    "end": "510720"
  },
  {
    "text": "your system by running out of memory or something like that because it' have to load the entire Trace into memory in its",
    "start": "510720",
    "end": "516680"
  },
  {
    "text": "expanded form and it would have to keep it all in memory while you were analyzing it and that was just way too",
    "start": "516680",
    "end": "522159"
  },
  {
    "text": "much so in go 122 what happened is now uh traces are are the underlying format",
    "start": "522159",
    "end": "528360"
  },
  {
    "text": "I won't go too deep into the details there's a design doc if you want to go into it but the format is now scalable so unfortunately go tool Trace doesn't",
    "start": "528360",
    "end": "535320"
  },
  {
    "text": "actually take advantage of that yet um it still re in the whole thing into memory but we can now fix that finally",
    "start": "535320",
    "end": "541800"
  },
  {
    "text": "and it this new behavior is still useful and I'll get to why in just a moment the",
    "start": "541800",
    "end": "547640"
  },
  {
    "text": "next thing which I was uh kind of alluding to the next big problem was um and I imagine this is really the core",
    "start": "547640",
    "end": "553440"
  },
  {
    "text": "reason why people say that they can't find the problem with traces is that when you take a trace what you really",
    "start": "553440",
    "end": "560160"
  },
  {
    "text": "want to have a trace of is the bad behavior that you're seeing right like",
    "start": "560160",
    "end": "565640"
  },
  {
    "text": "you know something you're reaching to tracing because something's wrong with your program and you want to capture the thing that's wrong with your program the",
    "start": "565640",
    "end": "571920"
  },
  {
    "text": "problem is there's often no way to identify you can you can identify when a bad thing has happened in the past but",
    "start": "571920",
    "end": "577720"
  },
  {
    "text": "if you start tracing at that point you don't really get anything out of it the trace is going to have contain good",
    "start": "577720",
    "end": "583200"
  },
  {
    "text": "behavior most of the time and so either you just Trace everything which as we",
    "start": "583200",
    "end": "589040"
  },
  {
    "text": "said before was not really feasible or you know you just take a whole lot of traces and hope that one of them a whole",
    "start": "589040",
    "end": "595680"
  },
  {
    "text": "lot of small traces and hope that one of them actually catch the issue and there there are people that definitely",
    "start": "595680",
    "end": "601320"
  },
  {
    "text": "used this technique and used it well but it didn't really help with catching specific issues it more helped with",
    "start": "601320",
    "end": "607880"
  },
  {
    "text": "catching some issue that was happening in production so to remedy that now that",
    "start": "607880",
    "end": "613640"
  },
  {
    "text": "the trace format is sort of scalable and Trace overhead is low we had this idea",
    "start": "613640",
    "end": "619519"
  },
  {
    "text": "for uh what's called flight recording so people in the sort of java ecosystem might be familiar with this idea but",
    "start": "619519",
    "end": "627160"
  },
  {
    "text": "basically you have tracing on all the time and you're not writing out this like",
    "start": "627160",
    "end": "632800"
  },
  {
    "text": "massive Trace containing all of the information about what your program is doing instead uh the runtime or maybe in",
    "start": "632800",
    "end": "640639"
  },
  {
    "text": "this case an external package just keeps uh the most recent Trace information",
    "start": "640639",
    "end": "646399"
  },
  {
    "text": "always just like the last five seconds right and every every second or so it",
    "start": "646399",
    "end": "652440"
  },
  {
    "text": "you know throws away one second and stores the the last second of information something like that and then",
    "start": "652440",
    "end": "658120"
  },
  {
    "text": "at any point you can ask it please give me what you have so that means you can do uh really interesting things like say",
    "start": "658120",
    "end": "665480"
  },
  {
    "text": "you're debugging a really really low a really really high latency RPC or",
    "start": "665480",
    "end": "670920"
  },
  {
    "text": "request to your web service you can just put an if statement you can start this flight recorder you can put an if",
    "start": "670920",
    "end": "677200"
  },
  {
    "text": "statement in your program that says did this RPC take more than 500 milliseconds",
    "start": "677200",
    "end": "682320"
  },
  {
    "text": "or something like that if so dump the trace and what you get out of that Trace is exactly what you wanted to know what",
    "start": "682320",
    "end": "689440"
  },
  {
    "text": "happened during those 500 milliseconds that made this particular request slow",
    "start": "689440",
    "end": "694959"
  },
  {
    "text": "and so we're kind of hoping that um this is sort of entering a new era of tracing",
    "start": "694959",
    "end": "700399"
  },
  {
    "text": "where you can actually really use it to Target problems in a way that you couldn't before and sort of the last big",
    "start": "700399",
    "end": "707200"
  },
  {
    "text": "problem with tracing was that um traces are great and all but uh gotool trace",
    "start": "707200",
    "end": "712240"
  },
  {
    "text": "and go uh Trace UI which I have to shout out uh to Dominic on that who who",
    "start": "712240",
    "end": "717720"
  },
  {
    "text": "maintains this uh go Trace UI tool which is um an alternative to go tool trace",
    "start": "717720",
    "end": "723480"
  },
  {
    "text": "and uh maintaining it has been hard because there's no public API to actually parse traces and the format for",
    "start": "723480",
    "end": "730399"
  },
  {
    "text": "various reasons mostly efficiency is quite complicated and so it's not for the faint apart to just uh to just Dive",
    "start": "730399",
    "end": "737079"
  },
  {
    "text": "Right into to them as some people have done but now in addition to this experimental flight recording we also uh",
    "start": "737079",
    "end": "743600"
  },
  {
    "text": "released an experimental API so that anyone can CSE traces and get something out of them we hoping that this will let",
    "start": "743600",
    "end": "751079"
  },
  {
    "text": "people sort of use um and it's a streaming based API so it no longer requires holding the entire Trace in",
    "start": "751079",
    "end": "756959"
  },
  {
    "text": "memory and uh and you know people can write their own ad hoc analysis and learn analyses and learn what they want",
    "start": "756959",
    "end": "763880"
  },
  {
    "text": "to about uh their applications so that's pretty much a summary of everything",
    "start": "763880",
    "end": "769160"
  },
  {
    "text": "there's anything you'd like me to uh to clarify or or di deeper on or anything",
    "start": "769160",
    "end": "774600"
  },
  {
    "text": "be out",
    "start": "774600",
    "end": "781120"
  },
  {
    "text": "[Applause] what's up go time listeners I want to",
    "start": "782050",
    "end": "788160"
  },
  {
    "text": "tell you about the smartest way to learn backend development today this is the",
    "start": "788160",
    "end": "793199"
  },
  {
    "text": "most captivating finger flying addictive way to learn code yes I'm talking about",
    "start": "793199",
    "end": "798959"
  },
  {
    "text": "boot. Dev spoiler use our code go time to get 25% off postgress GitHub Docker",
    "start": "798959",
    "end": "806959"
  },
  {
    "text": "go python terminal J JavaScript and yes kubernetes learn it all you can learn",
    "start": "806959",
    "end": "813240"
  },
  {
    "text": "backend web development from start to finish in Python and go programming languages and the folks behind boot.",
    "start": "813240",
    "end": "819040"
  },
  {
    "text": "deev believe the smartest way to learn a code is to make sure you're never bored that is the worst for learning don't be",
    "start": "819040",
    "end": "825160"
  },
  {
    "text": "bored too easy right boot dodev is online self-paced and feels like a",
    "start": "825160",
    "end": "830800"
  },
  {
    "text": "captivating RPG game the cool thing is is this entire platform is built around",
    "start": "830800",
    "end": "836399"
  },
  {
    "text": "tactics learned from Modern game design and it's designed to get you to write a ton of code because getting your hands",
    "start": "836399",
    "end": "843240"
  },
  {
    "text": "on the keyboard and shipping projects is really the only way to learn learn by",
    "start": "843240",
    "end": "848480"
  },
  {
    "text": "doing right they also never want a student to feel like they've spent their money on something that isn't actually",
    "start": "848480",
    "end": "853519"
  },
  {
    "text": "helping them so they offer a 30-day no questions asked refund policy and also a",
    "start": "853519",
    "end": "859320"
  },
  {
    "text": "free demo of every course and its interactive features also if you're ever",
    "start": "859320",
    "end": "864360"
  },
  {
    "text": "completely stuck or you just want to see how the instructor wrote the code there are solutions available for every Challenge on the site and on that note",
    "start": "864360",
    "end": "871480"
  },
  {
    "text": "not everyone has the means to pay for a membership so all of the content is free to read and watch in guest mode however",
    "start": "871480",
    "end": "879160"
  },
  {
    "text": "a paid membership unlocks interactivity and the game that goes with it so cool the next step is to go to",
    "start": "879160",
    "end": "886120"
  },
  {
    "text": "boot. and use the code go time get 25% off your first payment to boot dodev",
    "start": "886120",
    "end": "891920"
  },
  {
    "text": "that's 25% off your first month or your first year and that all depends on the",
    "start": "891920",
    "end": "897680"
  },
  {
    "text": "subscription you choose once again Boot dodev and use the code go",
    "start": "897680",
    "end": "903690"
  },
  {
    "text": "[Music]",
    "start": "903690",
    "end": "910229"
  },
  {
    "text": "time there are some changes in the behavior and some in the almost like in",
    "start": "911959",
    "end": "917120"
  },
  {
    "text": "the core way that one should be using this so um I guess there were some best",
    "start": "917120",
    "end": "923600"
  },
  {
    "text": "practices in the past and I guess with all the these changes some of the best practices are like most efficient ways",
    "start": "923600",
    "end": "929920"
  },
  {
    "text": "of using this have changed and what would be some of them so I wouldn't even necessarily say that there were best",
    "start": "929920",
    "end": "936079"
  },
  {
    "text": "practices in the past because we I think a lot of people didn't really know how to use them and we didn't really like as",
    "start": "936079",
    "end": "941600"
  },
  {
    "text": "the go team and we can say anti patterns yeah sure sure there're anti patterns you could avoid but there weren't really",
    "start": "941600",
    "end": "947240"
  },
  {
    "text": "patterns for you to follow whereas I I agree now now the landscape is very different now if someone said they",
    "start": "947240",
    "end": "953279"
  },
  {
    "text": "wanted to debug a latency issue I would say try flight recording turn it on and instrument you know write that little",
    "start": "953279",
    "end": "959959"
  },
  {
    "text": "bit of instrumentation code to try to catch it in the act right that was likely to hold some insights right as to",
    "start": "959959",
    "end": "966199"
  },
  {
    "text": "why your request took a long time the other thing I'd say is uh you know is there something that go tool Trace",
    "start": "966199",
    "end": "972519"
  },
  {
    "text": "doesn't support for you right because it's it's just one tool right and and it can't possibly support every single use",
    "start": "972519",
    "end": "978399"
  },
  {
    "text": "case then maybe dive into the maybe dive into the API and write your own analysis",
    "start": "978399",
    "end": "983560"
  },
  {
    "text": "and publish it in the go Community right it feels like there's a lot there's a much bigger opportunity for traces now",
    "start": "983560",
    "end": "989600"
  },
  {
    "text": "than there used to be and I think the the you're totally right I think now there are best practices where as",
    "start": "989600",
    "end": "996079"
  },
  {
    "text": "previously there were it are there some best practices you can recommend or is this like more let's see how everybody",
    "start": "996079",
    "end": "1001639"
  },
  {
    "text": "uses this and kind of based on feedback from everyone will be releasing that",
    "start": "1001639",
    "end": "1007160"
  },
  {
    "text": "well one thing I want to say is that a lot of this stuff is a lot of the new stuff is experimental so the act the core implementation I'd say is like",
    "start": "1007160",
    "end": "1013839"
  },
  {
    "text": "pretty solid and ready um there are of course things we're still fixing because nothing's perfect but uh for the most",
    "start": "1013839",
    "end": "1020800"
  },
  {
    "text": "part the core implementation is solid the flight recorder and the trace API for parsing it and doing your own",
    "start": "1020800",
    "end": "1027160"
  },
  {
    "text": "analyses that's definitely still experimental it has not gone through the like Proposal review process it's not in",
    "start": "1027160",
    "end": "1032959"
  },
  {
    "text": "the standard Library it's in the experimental it's under the X yes yes uh",
    "start": "1032959",
    "end": "1038240"
  },
  {
    "text": "XEX for now and to some extent we're looking to see how people use these",
    "start": "1038240",
    "end": "1043558"
  },
  {
    "text": "things and getting feedback and understanding and on the other hand we do definitely have some directions in",
    "start": "1043559",
    "end": "1049039"
  },
  {
    "text": "mind right like so I think flight recording is one of those things that just really it's kind of structured to",
    "start": "1049039",
    "end": "1055240"
  },
  {
    "text": "tell you how to use it right which is that you have a problem you turn on flight recording and you make a little",
    "start": "1055240",
    "end": "1061799"
  },
  {
    "text": "change to your source code to figure out when you want to get a trace of that",
    "start": "1061799",
    "end": "1067200"
  },
  {
    "text": "problem and uh best practice is there I mean there's the web service example I mentioned before and I guess we I guess",
    "start": "1067200",
    "end": "1076039"
  },
  {
    "text": "I don't actually have another example off the top of my head so but yeah we are looking to see how people will use it we'll make the part two episode of",
    "start": "1076039",
    "end": "1083360"
  },
  {
    "text": "this with sharing some of the insights in like couple of months I hope so yeah",
    "start": "1083360",
    "end": "1089000"
  },
  {
    "text": "I I have a few thoughts on this as well um when I go back to what maybe uh was",
    "start": "1089000",
    "end": "1094640"
  },
  {
    "text": "talked about in episode 260 I think the problem with execution",
    "start": "1094640",
    "end": "1100559"
  },
  {
    "text": "traces before all this improvements that Michael just went over was twofold one was the sort of user experience and how",
    "start": "1100559",
    "end": "1108320"
  },
  {
    "text": "the data was visualized and I'll go into how good trace UI has significantly improved the situation there and the",
    "start": "1108320",
    "end": "1114120"
  },
  {
    "text": "other one was the the best practices for collecting the data as Michael said like previously it was you used it locally or",
    "start": "1114120",
    "end": "1120919"
  },
  {
    "text": "maybe oneof in production but then it was really hard to get it uh catching it in the right moment now you can",
    "start": "1120919",
    "end": "1126720"
  },
  {
    "text": "basically use it continuously which is a game changer for getting the data that you actually want but let's talk about",
    "start": "1126720",
    "end": "1132280"
  },
  {
    "text": "the experience you get when you get some data from this tool by default what you see when you type in go tool trace and",
    "start": "1132280",
    "end": "1138480"
  },
  {
    "text": "you open the trace there little web interface and you have to click a link and then it takes you to the actual",
    "start": "1138480",
    "end": "1143840"
  },
  {
    "text": "visualization that you want and that visualization I think to a lot of people doesn't come natural because it kind of",
    "start": "1143840",
    "end": "1150000"
  },
  {
    "text": "shows the world from the perspective of ghost scheder not from the perspective of a go developer so what you see is a",
    "start": "1150000",
    "end": "1157600"
  },
  {
    "text": "list of procs which Michael's gonna hate me for this but they're like CPU course",
    "start": "1157600",
    "end": "1162799"
  },
  {
    "text": "um and what what what what's a run was holding his hands in the head yes we we",
    "start": "1162799",
    "end": "1169200"
  },
  {
    "text": "we get we'll can get into P's P's and M's and G's in a second here but for I",
    "start": "1169200",
    "end": "1174320"
  },
  {
    "text": "think the first time you look at this you just just think that each lane that you see you see like several Lanes is a CPU core and each of the little",
    "start": "1174320",
    "end": "1181120"
  },
  {
    "text": "rectangles or spans that you see rendered is when the schedulers is actually taking a go routine and executing it on a CPU core and so that",
    "start": "1181120",
    "end": "1189799"
  },
  {
    "text": "is maybe surprising to a lot of people because they think of their goroutines existence as something continuous and",
    "start": "1189799",
    "end": "1195720"
  },
  {
    "text": "like they think of like the lifetime of a goutine over time including the time it's on CPU or off CPU but I think most",
    "start": "1195720",
    "end": "1201799"
  },
  {
    "text": "users don't really have a strong sense of when go routines actually switching but they also don't have a strong sense",
    "start": "1201799",
    "end": "1206880"
  },
  {
    "text": "is as the go routine switches between on and off CPU the time scales can be crazy like we're often like developing web",
    "start": "1206880",
    "end": "1213919"
  },
  {
    "text": "servers syncing in tens or hundreds of milliseconds but then you go into scheduling in the runtime and you're",
    "start": "1213919",
    "end": "1219000"
  },
  {
    "text": "talking micros seconds maybe sometimes nanocs and so like some things can be really really short and Tiny and also",
    "start": "1219000",
    "end": "1226120"
  },
  {
    "text": "yeah the go routines can migrate between CPU cores or rocks as as they really called in the runtime and so it's not",
    "start": "1226120",
    "end": "1232520"
  },
  {
    "text": "what you would expect what you would expect is one lane per go routine and then seeing what's that go routine does over time including when it's waiting",
    "start": "1232520",
    "end": "1238520"
  },
  {
    "text": "for something for a long time which is honestly where most go routines spend most of their time they're waiting on networking or on channel operations or",
    "start": "1238520",
    "end": "1245320"
  },
  {
    "text": "on timers or on mutex contention hopefully not but that's exactly the kind of problem you can find and so I",
    "start": "1245320",
    "end": "1252000"
  },
  {
    "text": "think the the big change for the user experience was like Michael was hinting",
    "start": "1252000",
    "end": "1257280"
  },
  {
    "text": "at go Trace you as a new sort party tool that's trying to change this user experience by showing you still that",
    "start": "1257280",
    "end": "1263440"
  },
  {
    "text": "traditional few that is useful and we we can talk later on where that few is actually really really good but also a",
    "start": "1263440",
    "end": "1268880"
  },
  {
    "text": "few where you see each go routine and a timeline what it's doing and you can even when you record um CPU samples at",
    "start": "1268880",
    "end": "1276400"
  },
  {
    "text": "the same time as your execution tracing you can press uh on your keyboard you can press S I hope it's still the",
    "start": "1276400",
    "end": "1281720"
  },
  {
    "text": "shortcut I haven't tried for a while uh which shows you the stack traces so it's basically becomes a flame chart where",
    "start": "1281720",
    "end": "1287799"
  },
  {
    "text": "each lane of each go routine sort of becomes into a changing stack Trace over time and you can really see what the go",
    "start": "1287799",
    "end": "1293120"
  },
  {
    "text": "routine is doing both on CPU and off CPU and that's a really neat way to understand what's what's really",
    "start": "1293120",
    "end": "1298520"
  },
  {
    "text": "happening and um all of this at the end of the day I think go tracei was already started before the rewm execution Tracer",
    "start": "1298520",
    "end": "1305720"
  },
  {
    "text": "work and the parsel that's now available but that sort of user experience is I think what's what was needed back in uh",
    "start": "1305720",
    "end": "1313440"
  },
  {
    "text": "late 2022 to actually make the execution Tracer more approachable for people who might then Al go back to the traditional",
    "start": "1313440",
    "end": "1319880"
  },
  {
    "text": "view of seeing the the proc lanes and and doing useful things with it but it might just not be the best way to",
    "start": "1319880",
    "end": "1325559"
  },
  {
    "text": "introduce people to it who are not that into the runtime internals yeah yeah I",
    "start": "1325559",
    "end": "1330919"
  },
  {
    "text": "totally agree the you know working mostly on the go team I I I'm embarrassed to say I don't have very",
    "start": "1330919",
    "end": "1336400"
  },
  {
    "text": "much experience with go Trace UI um everything I've heard about it has been uniformly positive one thing I",
    "start": "1336400",
    "end": "1344120"
  },
  {
    "text": "definitely agree with uh like Dominic was wrote go tracei is that the go tool Trace is pretty dated and it",
    "start": "1344120",
    "end": "1352480"
  },
  {
    "text": "could be better there's a lot of useful information in there but I will say it is not the most userfriendly interface",
    "start": "1352480",
    "end": "1359480"
  },
  {
    "text": "um someone on the go team not long ago added a whole bunch of documentation",
    "start": "1359480",
    "end": "1365279"
  },
  {
    "text": "into that little web UI that it gives you which has made it substantially more",
    "start": "1365279",
    "end": "1370440"
  },
  {
    "text": "approachable but it's basically just like a teeny tiny guide that it pops",
    "start": "1370440",
    "end": "1375799"
  },
  {
    "text": "open for you before you start looking at it and it definitely doesn't cover the full range of feature features but it",
    "start": "1375799",
    "end": "1381760"
  },
  {
    "text": "was certainly an improvement so I definitely appreciate Dominic's efforts in this in this uh Direction we'd like",
    "start": "1381760",
    "end": "1388840"
  },
  {
    "text": "to improve the default experience for sure but it's not something that has been that prioritized so far can you",
    "start": "1388840",
    "end": "1395120"
  },
  {
    "text": "talk about some common use cases for or scenarios where Trace is really what you",
    "start": "1395120",
    "end": "1401720"
  },
  {
    "text": "need and it's really useful maybe interesting things you saw or maybe like the the the go-tos both are interesting",
    "start": "1401720",
    "end": "1408720"
  },
  {
    "text": "I think Felix is going to have uh the most interesting stories probably um I",
    "start": "1408720",
    "end": "1414080"
  },
  {
    "text": "spend a lot of time working on the go run time and like the go GC and stuff",
    "start": "1414080",
    "end": "1419159"
  },
  {
    "text": "and so the things that I'm usually looking for inside traces tend to be different and I think are going to be",
    "start": "1419159",
    "end": "1424679"
  },
  {
    "text": "less applicable to sort of a general go using audience but I will say like our",
    "start": "1424679",
    "end": "1430039"
  },
  {
    "text": "team has been using traces for a long time to prove and disprove theories about latency issues and to learn more",
    "start": "1430039",
    "end": "1437120"
  },
  {
    "text": "about how the the garbage so sorry I've been saying GC I meant the go garbage collector how the go garbage collector",
    "start": "1437120",
    "end": "1443440"
  },
  {
    "text": "has like executes because it is very much you know it has its own gor team that are doing things and how those how",
    "start": "1443440",
    "end": "1450559"
  },
  {
    "text": "that interacts and perturbs the uh user program and stuff and we've discovered",
    "start": "1450559",
    "end": "1455960"
  },
  {
    "text": "so many uh so many issues like some things become clear as day if anybody",
    "start": "1455960",
    "end": "1461080"
  },
  {
    "text": "recalls the uh in go 114 there was a pretty big change in the go scheduler",
    "start": "1461080",
    "end": "1467640"
  },
  {
    "text": "which was that um gines could now I'm trying not to get too technical here but",
    "start": "1467640",
    "end": "1473039"
  },
  {
    "text": "basically gines could get it's the right podcast to do this no worries okay fair enough but gortin can basically be",
    "start": "1473039",
    "end": "1479200"
  },
  {
    "text": "before go14 uh could only stop executing or like be asked to stop executing by like",
    "start": "1479200",
    "end": "1485159"
  },
  {
    "text": "the garbage collector at the start of a function like when a gorg injured a function and when it blocked on a",
    "start": "1485159",
    "end": "1491520"
  },
  {
    "text": "Channel or there was like a whole bunch of situations where where it would yield its time and this would cause latency",
    "start": "1491520",
    "end": "1497840"
  },
  {
    "text": "issues and lot of applications if like say one goroutine didn't call a function for a runtime like let's say it was just",
    "start": "1497840",
    "end": "1504120"
  },
  {
    "text": "like encoding or decoding some really big thing um and it would just be in this tight Loop doing like arithmetic",
    "start": "1504120",
    "end": "1509960"
  },
  {
    "text": "and nothing nothing could stop it so that the work to make make it possible",
    "start": "1509960",
    "end": "1515159"
  },
  {
    "text": "to stop a gartine basically at any time was largely the problems that it was solving was very much visible in an",
    "start": "1515159",
    "end": "1522080"
  },
  {
    "text": "execution trace and I think at the time Austin was the the TL of the go compil",
    "start": "1522080",
    "end": "1529480"
  },
  {
    "text": "they uh they used the execution Trace view to sort of visualize that hey this",
    "start": "1529480",
    "end": "1534679"
  },
  {
    "text": "isn't actually just a latency problem this is a throughput problem that you could see that this one gortin was",
    "start": "1534679",
    "end": "1540919"
  },
  {
    "text": "executing the garbage collector was trying to stop all goroutines and it stopped all of them except one and so",
    "start": "1540919",
    "end": "1548080"
  },
  {
    "text": "what that basically meant was that if you had like if your application was normally going along happily at SI 16",
    "start": "1548080",
    "end": "1555679"
  },
  {
    "text": "cores there was a period of time maybe even milliseconds where only one or was",
    "start": "1555679",
    "end": "1561080"
  },
  {
    "text": "actually doing any useful work and that's not just a latency problem adding you know millisecs of latency to",
    "start": "1561080",
    "end": "1567440"
  },
  {
    "text": "basically everything that's happening at that point but it's also a throughput problem because nothing else is executing and that was super I think the",
    "start": "1567440",
    "end": "1574799"
  },
  {
    "text": "the visualization in the execution Trace uh was incredibly powerful to like display that particular problem and to",
    "start": "1574799",
    "end": "1580760"
  },
  {
    "text": "motivate fixing it super interesting things yeah so I I think for me the most",
    "start": "1580760",
    "end": "1585960"
  },
  {
    "text": "common case why we build it like into data doc was uh you have distributed tracing already which is now pretty",
    "start": "1585960",
    "end": "1592039"
  },
  {
    "text": "common way for people to look at their request latency and at some point you get to a span in your distributed Trace",
    "start": "1592039",
    "end": "1598559"
  },
  {
    "text": "where there's a slow request but it's a last Leaf span it's slow it's in your application and you don't know what's",
    "start": "1598559",
    "end": "1604000"
  },
  {
    "text": "going on and so basically breaking that down was one of the big motivations for us and what we're doing is showing a few",
    "start": "1604000",
    "end": "1610640"
  },
  {
    "text": "similar to um go tracei where we show one go routine or one lane Pro go routine but we filter all the go",
    "start": "1610640",
    "end": "1616640"
  },
  {
    "text": "routines to just show the ones related to the the request so that was use case number one the second one that I actually didn't expect so much was also",
    "start": "1616640",
    "end": "1623480"
  },
  {
    "text": "scut related but um it's actually pretty common for people to have um systems",
    "start": "1623480",
    "end": "1629000"
  },
  {
    "text": "that read stuff from cues like a Kafka q and they observes that they see a lack",
    "start": "1629000",
    "end": "1634360"
  },
  {
    "text": "of throughput so there's a big lack building up like messages in the queue not getting processed and and the",
    "start": "1634360",
    "end": "1640120"
  },
  {
    "text": "backlogs that they need to Crunch through but then they look at the resource utilization metrics of their application and what they see is that",
    "start": "1640120",
    "end": "1647559"
  },
  {
    "text": "the CPU utilization actually low as well so they're not making progress on the workload but their applications not",
    "start": "1647559",
    "end": "1653320"
  },
  {
    "text": "working hard and they're like well I pay the cloud provider for all this Hardware why is it not doing the thing I I wanted",
    "start": "1653320",
    "end": "1659520"
  },
  {
    "text": "to do and this is where execution tracing can really shine because you look at actually the classical few of",
    "start": "1659520",
    "end": "1664600"
  },
  {
    "text": "execution tracing which is the one that's scheduling oriented and what you're looking for is all the gaps",
    "start": "1664600",
    "end": "1669960"
  },
  {
    "text": "because you want this few to be like packed you want each lane to be full of go routine execution and if you see",
    "start": "1669960",
    "end": "1676279"
  },
  {
    "text": "patterns of gaps sometimes a pattern can tell a lot sometimes you see execution everything is busy super and then you",
    "start": "1676279",
    "end": "1681840"
  },
  {
    "text": "see like a big vertical empty space of nothing happening which means everything got piled up probably on the same thing",
    "start": "1681840",
    "end": "1687799"
  },
  {
    "text": "and now you can sort of Click around and figure out what that thing was and and solve that throughput issue so that is",
    "start": "1687799",
    "end": "1693799"
  },
  {
    "text": "definitely another use case that I've seen quite a lot and uh last but not least uh sometimes again the the go",
    "start": "1693799",
    "end": "1701120"
  },
  {
    "text": "routine few can bring things home that you could already see through other signals for example if you have a go",
    "start": "1701120",
    "end": "1706960"
  },
  {
    "text": "routine pool that's not size correctly so you have a go routin pool that's maybe making some outbound Network",
    "start": "1706960",
    "end": "1712559"
  },
  {
    "text": "requests but that becomes a bottleneck for your application especially in scenario what I just mentioned you can",
    "start": "1712559",
    "end": "1718799"
  },
  {
    "text": "look at the plock profile but honestly it's not a recommended or wasn't a recommended profile type because of the overhead which actually still a problem",
    "start": "1718799",
    "end": "1725720"
  },
  {
    "text": "because we haven't ported the fix for the execution tracers faster stack tracers to the block profiler yet but",
    "start": "1725720",
    "end": "1732120"
  },
  {
    "text": "basically what you're looking for is you're trying to figure out which go routin pool if you have multiple of them",
    "start": "1732120",
    "end": "1737200"
  },
  {
    "text": "is sort of the Bott neck and the way you can see it is the bottleneck goutine pool on the other side like the goutine",
    "start": "1737200",
    "end": "1744360"
  },
  {
    "text": "sending to that will be pled on send so you'll see a lot of contention on send operations on the channels and on the",
    "start": "1744360",
    "end": "1750120"
  },
  {
    "text": "other side on the outgoing side you'll see starvation on receive and that's something you can kind of see in the",
    "start": "1750120",
    "end": "1756240"
  },
  {
    "text": "block profile but it's really a difficult profile to read because it often gets also kind of dominated by",
    "start": "1756240",
    "end": "1763399"
  },
  {
    "text": "benign receive weights so you have like maybe another goutine pool that's completely over Irrelevant for the",
    "start": "1763399",
    "end": "1769159"
  },
  {
    "text": "problem you're trying to debug it has more go routines than everything else and now it's just going to trown out that that profile type with the receive",
    "start": "1769159",
    "end": "1775279"
  },
  {
    "text": "operations and so it's really something else to then look at that data with execution traces where you can really",
    "start": "1775279",
    "end": "1780640"
  },
  {
    "text": "see each go routine and what it's doing over time and you realize hey I have a pool of 50 go routines here but they're",
    "start": "1780640",
    "end": "1786559"
  },
  {
    "text": "spending 95% of their time waiting on networking uh and 5% executing no wonder",
    "start": "1786559",
    "end": "1792080"
  },
  {
    "text": "why I'm not making use of my CPU resources I need to significantly increase this pool so not only that pool",
    "start": "1792080",
    "end": "1797399"
  },
  {
    "text": "can do more work but all the other pools on the left and the right side of it can can as well so I think that's yeah",
    "start": "1797399",
    "end": "1802600"
  },
  {
    "text": "another pretty common thing and when you are looking at results and you want to go and interpret them how do you go",
    "start": "1802600",
    "end": "1808840"
  },
  {
    "text": "about this are you like looking for patterns of how you know it looks right and you're looking for what pops up as",
    "start": "1808840",
    "end": "1814480"
  },
  {
    "text": "an anomaly or is there another way that you're going about that yeah so the patterns definitely like both like in a",
    "start": "1814480",
    "end": "1820919"
  },
  {
    "text": "go routine view as well as in the in the scheduling view another thing that's actually kind of neat that we haven't mentioned yet is there's at least two",
    "start": "1820919",
    "end": "1827360"
  },
  {
    "text": "very interesting time series on top of go tool Trace when you look at the um execution traces the first one shows you",
    "start": "1827360",
    "end": "1835039"
  },
  {
    "text": "the number of go routines and the number of unscheduled go routines so actually",
    "start": "1835039",
    "end": "1841200"
  },
  {
    "text": "when that craft like ticks up with the color of unscheduled go routines you know that something is a lot of go",
    "start": "1841200",
    "end": "1846919"
  },
  {
    "text": "routines want to run because they're runnable but they're not getting scheduled so you can kind of look at what's going on there usually means you",
    "start": "1846919",
    "end": "1853120"
  },
  {
    "text": "actually don't have enough CPU resources the question is why sometimes you can actually see another pattern where Garbage Collection comes in takes some",
    "start": "1853120",
    "end": "1859799"
  },
  {
    "text": "of the lanes over where go routines want to execute and suddenly you get all these unscheduled go routines on top the",
    "start": "1859799",
    "end": "1865320"
  },
  {
    "text": "other thing is garbage collection where you get an interesting Lane showing you what the current Heap in use uh metric",
    "start": "1865320",
    "end": "1871480"
  },
  {
    "text": "is and what the target is and then you see the two approaching and garbage collection Cycles kicking off and to",
    "start": "1871480",
    "end": "1877000"
  },
  {
    "text": "some degree you can see this with metrics but metrics are often captured at a lower resolution like tens of seconds or something and so sometimes",
    "start": "1877000",
    "end": "1883760"
  },
  {
    "text": "you don't see those violent patterns of of GC Cycles happening and disturbing application I mean you can still measure",
    "start": "1883760",
    "end": "1889960"
  },
  {
    "text": "it and put it on a craft like gc's per second but I don't know something doesn't quite drive that point home to",
    "start": "1889960",
    "end": "1895840"
  },
  {
    "text": "me as in actually seeing it in the application and seeing the Havoc that it causes so um yeah I think part of why uh",
    "start": "1895840",
    "end": "1902279"
  },
  {
    "text": "you don't get to see that with metrics is I don't think we I don't think there is a metric that exposes the the classic",
    "start": "1902279",
    "end": "1907600"
  },
  {
    "text": "GC saw too where like you allocate up and then the GC happens and then it drops again I don't think there even is",
    "start": "1907600",
    "end": "1913120"
  },
  {
    "text": "a metric that fully that fully captures that so that might be why but the the uh the execution tra is definitely do and I",
    "start": "1913120",
    "end": "1920760"
  },
  {
    "text": "I wanted to stress your point that you made earlier in terms of patterns is looking at gaps often is much more",
    "start": "1920760",
    "end": "1927279"
  },
  {
    "text": "important in execution traces than looking at the actual things executing I mean we put a lot of effort into like",
    "start": "1927279",
    "end": "1934039"
  },
  {
    "text": "having all these different kinds of events and capturing them and putting them up on display but uh and and",
    "start": "1934039",
    "end": "1939960"
  },
  {
    "text": "they're incredibly useful because when you're look at the gaps you usually want to look at the edge of the gaps to see why the gaps are happening but the gaps",
    "start": "1939960",
    "end": "1947279"
  },
  {
    "text": "end up being the most important right like if if you have if you have a web service and you think it's running well",
    "start": "1947279",
    "end": "1953039"
  },
  {
    "text": "then all of the lanes in the sort of classic scheduler view that fix was talking about it like really should be",
    "start": "1953039",
    "end": "1958799"
  },
  {
    "text": "packed full that's how you know things are going well it's it's when they're not packed full and things are that",
    "start": "1958799",
    "end": "1964639"
  },
  {
    "text": "something is wrong and so looking for those gaps is sort of maybe like the most important thing that traces can",
    "start": "1964639",
    "end": "1970799"
  },
  {
    "text": "provide you what are some other things you will be looking for or kind of what we I mean personally I'm I I always look",
    "start": "1970799",
    "end": "1977840"
  },
  {
    "text": "look at the sort of like GC metrics um because sometimes it can point at",
    "start": "1977840",
    "end": "1983440"
  },
  {
    "text": "something unexpected right like I mean I'm sure many are familiar with optimizing your applica well not",
    "start": "1983440",
    "end": "1991000"
  },
  {
    "text": "everybody but many many people are uh familiar with uh optimizing your application by trying to reduce the",
    "start": "1991000",
    "end": "1997200"
  },
  {
    "text": "number of Heap allocations basically the amount of M that counts toward uh garbage collection to try to reduce the",
    "start": "1997200",
    "end": "2003080"
  },
  {
    "text": "overhead of garbage collection and uh the latency impact of garbage collection is is often hard to see uh or hard to",
    "start": "2003080",
    "end": "2010240"
  },
  {
    "text": "understand I suppose but in an execution Trace it's much more visible like I won't go into the details but there's",
    "start": "2010240",
    "end": "2016240"
  },
  {
    "text": "like mechanisms where goroutines might go off and do some garbage collection work for a little bit and that is",
    "start": "2016240",
    "end": "2022840"
  },
  {
    "text": "plainly visible in in the in the trace so you can see like okay actually my",
    "start": "2022840",
    "end": "2029120"
  },
  {
    "text": "latency issue seems to actually stem from a garbage collection issue maybe I",
    "start": "2029120",
    "end": "2034320"
  },
  {
    "text": "should spend some time working on reducing the amount of memory that my program allocates and and stuff like",
    "start": "2034320",
    "end": "2041080"
  },
  {
    "text": "that or perhaps I should it suggest I should uh look at go GC or go limit uh",
    "start": "2041080",
    "end": "2047080"
  },
  {
    "text": "the the two GC knobs and see what I can do there or perhaps it suggests I need to resize my my instances like like",
    "start": "2047080",
    "end": "2053878"
  },
  {
    "text": "Felix was saying with sort of like if you see a lot of gores that are able to run but are not running it sort of",
    "start": "2053879",
    "end": "2059638"
  },
  {
    "text": "suggests that the server is overload Felix do you have anything to add or we kind of covered all the ones that are",
    "start": "2059639",
    "end": "2065280"
  },
  {
    "text": "your go-tos I don't know if it was mentioned already like system call Behavior Uh is something that is pretty",
    "start": "2065280",
    "end": "2070919"
  },
  {
    "text": "interesting um because well first of all system calls are implemented in interesting way in the runtime so it is",
    "start": "2070919",
    "end": "2077599"
  },
  {
    "text": "definitely something to watch out for but yeah in the execution traces you can see uh any CIS call that's being made",
    "start": "2077599",
    "end": "2083480"
  },
  {
    "text": "that has already been true historically but since the work that Michael's been doing they now also show the duration of",
    "start": "2083480",
    "end": "2090280"
  },
  {
    "text": "the system calls previously you just got a tiny faint little line that shows CIS calls happening but you have no idea is that a slow one is that a fast one and",
    "start": "2090280",
    "end": "2098000"
  },
  {
    "text": "it it matters to the runtime quite a bit because if a system call is long then eventually sysmon a background go",
    "start": "2098000",
    "end": "2104320"
  },
  {
    "text": "routine will come along and uh decide that this uh operating system threat is",
    "start": "2104320",
    "end": "2109599"
  },
  {
    "text": "now blocked in a system call and that the runtime should detach that from the sketch LA and let the sketch La create a",
    "start": "2109599",
    "end": "2115560"
  },
  {
    "text": "new threat to run go routines on Michael can correct me if I got this wrong so far but the very interesting things are",
    "start": "2115560",
    "end": "2121800"
  },
  {
    "text": "happening around CIS calls in the runtime that are worth studying and the new execution Tracer can show these much",
    "start": "2121800",
    "end": "2127000"
  },
  {
    "text": "better than than before yeah totally agree um like as someone that works on the runtime being able to see that is",
    "start": "2127000",
    "end": "2133520"
  },
  {
    "text": "super important because um there's I don't want to call it a heuristic but it it's like I will say the handling of",
    "start": "2133520",
    "end": "2140119"
  },
  {
    "text": "system calls efficiently is not an exact science and we're kind of always thinking about ways that that could be",
    "start": "2140119",
    "end": "2145839"
  },
  {
    "text": "improved and being able to observe that from a runtime perspective is incredibly useful but coming back to the thing I",
    "start": "2145839",
    "end": "2152400"
  },
  {
    "text": "said before about challenging your assumptions about how your programs run the being able to see how much time time",
    "start": "2152400",
    "end": "2157760"
  },
  {
    "text": "is being spent in CIS calls is incredibly useful you'll see that you'll see that a little bit in CPU profiles",
    "start": "2157760",
    "end": "2163599"
  },
  {
    "text": "and stuff but here you get kind of a latency oriented VI of the typ St since this calls which which is incredibly",
    "start": "2163599",
    "end": "2170280"
  },
  {
    "text": "useful what's also kind of fun is that the runtime treats uh SEO calls like CIS",
    "start": "2170280",
    "end": "2175760"
  },
  {
    "text": "calls so you also get a lot of visibility in the S kind of accidentally but it is can be very interesting as",
    "start": "2175760",
    "end": "2181760"
  },
  {
    "text": "well because SEO can often be involved in very interesting performance issues uh because it's not noty to use SEO",
    "start": "2181760",
    "end": "2188680"
  },
  {
    "text": "correctly from from go yeah and that's that's one that's one thing actually that uh I think Dominic has filed an",
    "start": "2188680",
    "end": "2195640"
  },
  {
    "text": "issue against us to not count SEO calls as CIS calls because there's you know there's obviously some overhead to to",
    "start": "2195640",
    "end": "2202319"
  },
  {
    "text": "tracing and uh SEO performance is one of those things that is always nice to have",
    "start": "2202319",
    "end": "2207520"
  },
  {
    "text": "faster right like you want the bridge between go and c and go in other languages in general to be uh as fast as",
    "start": "2207520",
    "end": "2214200"
  },
  {
    "text": "possible and sort of doing like today it's okay because it's not that fast to",
    "start": "2214200",
    "end": "2219760"
  },
  {
    "text": "begin with but you could imagine that if one day it gets faster than tracing could could actually be a significant",
    "start": "2219760",
    "end": "2225560"
  },
  {
    "text": "pedon and we might want a different way to represent that in traces but for today yeah it's great yeah but don't",
    "start": "2225560",
    "end": "2231599"
  },
  {
    "text": "rely on that use case h Felix you have an upcoming talk",
    "start": "2231599",
    "end": "2236880"
  },
  {
    "text": "about this at goer Con Europe in June and you will be talking about all those things and also about a little bit about",
    "start": "2236880",
    "end": "2243720"
  },
  {
    "text": "a frame pointer unwinding do you have some spoilers oh oh yeah so um the talk",
    "start": "2243720",
    "end": "2249599"
  },
  {
    "text": "is called how to win frames and influence pointers and it is partially the story that we're telling today of",
    "start": "2249599",
    "end": "2255200"
  },
  {
    "text": "sort of the collaboration on making the execution Tracer better but it's also very specifically about uh making uh",
    "start": "2255200",
    "end": "2261920"
  },
  {
    "text": "stack traces faster also called stack unwinding because that was actually one of the things that was previously",
    "start": "2261920",
    "end": "2268440"
  },
  {
    "text": "causing the 10 to 20% of overhead in the execution Tracer 90% of that overhead was essentially taking stack traces",
    "start": "2268440",
    "end": "2274880"
  },
  {
    "text": "every time an interesting event happens in the scheder and the the way that was optimized was by implementing frame",
    "start": "2274880",
    "end": "2281280"
  },
  {
    "text": "pointer unwinding which is actually the simplest way to unwind it relies on the compiler to put some instructions inside",
    "start": "2281280",
    "end": "2287319"
  },
  {
    "text": "of each function so that every time a function is called you essentially create a linked list that lets you Traverse your stack and uh along this",
    "start": "2287319",
    "end": "2294119"
  },
  {
    "text": "linked list you find the return addresses which are the program counters you need for your stack trace and it's",
    "start": "2294119",
    "end": "2299680"
  },
  {
    "text": "it's the go runtime head supported this for a long time so my initial idea was like oh it's going to be great it's",
    "start": "2299680",
    "end": "2305440"
  },
  {
    "text": "going to be so easy I just have to essentially write like a for Loop that traverses a linked list and it was",
    "start": "2305440",
    "end": "2310960"
  },
  {
    "text": "really actually that part was really simple but it turned out that there were some uh subtle issues on on Intel and",
    "start": "2310960",
    "end": "2317760"
  },
  {
    "text": "some not so subtle issues on on arm that prevented this from working correctly um",
    "start": "2317760",
    "end": "2322839"
  },
  {
    "text": "some of them had to do with literally the influencing of pointers when Stacks",
    "start": "2322839",
    "end": "2328040"
  },
  {
    "text": "get copied when the go runtime has to grow stacks and has to adjust the pointers on the stack because some",
    "start": "2328040",
    "end": "2333760"
  },
  {
    "text": "pointers can be self well not self-referential but they can point back to the same Stacks that they are sitting",
    "start": "2333760",
    "end": "2339160"
  },
  {
    "text": "on and then when you copy those pointers to new stack they actually have to be adjusted and so that is kind of what the",
    "start": "2339160",
    "end": "2345720"
  },
  {
    "text": "second part of the title is hinting at the work that was done to to correct those issues and make frame Point",
    "start": "2345720",
    "end": "2350839"
  },
  {
    "text": "unwinding actually work well in the runtime generally for the pointer and winding are isn't go everything is",
    "start": "2350839",
    "end": "2357079"
  },
  {
    "text": "stored in registers like the return address or is this with offsets um oh now we're getting into the Wheats um so",
    "start": "2357079",
    "end": "2365319"
  },
  {
    "text": "just just a short question okay the the short answer is generally speaking most of what you would call a stack Trace is",
    "start": "2365319",
    "end": "2371400"
  },
  {
    "text": "called On The Stack the return addresses should mostly be on the stack but uh your first entry point is usually in a",
    "start": "2371400",
    "end": "2377280"
  },
  {
    "text": "register and depending on the architecture if it's Intel or link register architecture like arm then",
    "start": "2377280",
    "end": "2383480"
  },
  {
    "text": "maybe a little bit more sits in the in another register but yeah that's a little architecture dependent for the",
    "start": "2383480",
    "end": "2389359"
  },
  {
    "text": "most part it's just on the stack um right at the entry side of the of the frame or actually I think for armor sits",
    "start": "2389359",
    "end": "2395599"
  },
  {
    "text": "at the bottom of the frame depending on how you look at this this brings a cross question in my mind because we have a future episode",
    "start": "2395599",
    "end": "2401520"
  },
  {
    "text": "planned about how go is great and easy for cross compilations to different architectures and now like you're saying",
    "start": "2401520",
    "end": "2406599"
  },
  {
    "text": "depending on the architecture and I really want to ask about that but we're also like 45 minutes into the episodes",
    "start": "2406599",
    "end": "2411920"
  },
  {
    "text": "definitely adding this on the list of questions for part two right after what are the patterns you have",
    "start": "2411920",
    "end": "2418160"
  },
  {
    "text": "recognized but another short question and uh probably the last question for this episode before we hope to the",
    "start": "2418160",
    "end": "2424119"
  },
  {
    "text": "unpopular opinion the previous question was what do you do when you look at traces when you said you're looking for",
    "start": "2424119",
    "end": "2430400"
  },
  {
    "text": "specific patterns you're looking for gaps you're looking for specific fields and specific values so I cannot help but",
    "start": "2430400",
    "end": "2437000"
  },
  {
    "text": "ask out of personal interest are you doing anything with a like throwing",
    "start": "2437000",
    "end": "2442119"
  },
  {
    "text": "pictures of the trace output to AI whatever your favorite llm is that does",
    "start": "2442119",
    "end": "2447480"
  },
  {
    "text": "vision and say what would you do different what is the problem and so on any experiment",
    "start": "2447480",
    "end": "2453440"
  },
  {
    "text": "like this any thought like this W not yet is a good",
    "start": "2453440",
    "end": "2458599"
  },
  {
    "text": "answer I would say not yet I don't I don't even know where I would begin on that I don't know how one would come up",
    "start": "2458599",
    "end": "2464720"
  },
  {
    "text": "with a corpus of data for this uh I feel like every problem I've resolved with",
    "start": "2464720",
    "end": "2469760"
  },
  {
    "text": "traces has been so different and I don't even know how I would begin with an AI",
    "start": "2469760",
    "end": "2475839"
  },
  {
    "text": "trying to like with the training set for an AI trying to tell me or trying to",
    "start": "2475839",
    "end": "2480960"
  },
  {
    "text": "tell the AI like this was the pattern that caused this problem uh and this was",
    "start": "2480960",
    "end": "2486839"
  },
  {
    "text": "the fit I well maybe maybe I just told myself exactly how to do it right",
    "start": "2486839",
    "end": "2492040"
  },
  {
    "text": "there yeah know you don't need to do the training data like throw it on an existing llm see how it behaves maybe it",
    "start": "2492040",
    "end": "2498599"
  },
  {
    "text": "knows already something I don't know elix you got anything after the after episode conversation is going to be",
    "start": "2498599",
    "end": "2503680"
  },
  {
    "text": "interesting yeah so Felix any anything to add I I've not thrown execution traces at at an AI",
    "start": "2503680",
    "end": "2511599"
  },
  {
    "text": "yet because I generally my experience has been that things I'm very familiar with the AI performance disappoints me",
    "start": "2511599",
    "end": "2517079"
  },
  {
    "text": "uh especially around performance but I have actually taken pictures of data",
    "start": "2517079",
    "end": "2522119"
  },
  {
    "text": "analysis things I've done recently actually related to profiling where was testing something with sample rates and",
    "start": "2522119",
    "end": "2527480"
  },
  {
    "text": "what a profiler could detect in terms of how often a function could be called like it's impossible but it produced a",
    "start": "2527480",
    "end": "2532680"
  },
  {
    "text": "very interesting craft like was doing a simulation it was producing an oscillating curve that was kind of the oscillations were getting further apart",
    "start": "2532680",
    "end": "2539440"
  },
  {
    "text": "and then eventually trended down and I uploaded that to CET gbt and it was like have you seen this pattern before and it",
    "start": "2539440",
    "end": "2545920"
  },
  {
    "text": "correctly described the pattern like that I was seeing it did not figure out where it had seen it before but uh Hey",
    "start": "2545920",
    "end": "2553280"
  },
  {
    "text": "like 50% of the way there like it already recognizes what's in the picture and eventually it will be able to",
    "start": "2553280",
    "end": "2558800"
  },
  {
    "text": "connect the dots and give me the right connections because yeah sometimes that's all you need like connecting sort",
    "start": "2558800",
    "end": "2564319"
  },
  {
    "text": "of one area of knowledge with another one and then you jump that link and and you off you go so I I think the future",
    "start": "2564319",
    "end": "2570760"
  },
  {
    "text": "is interesting was it the free version no no I paid and I got nothing so okay I",
    "start": "2570760",
    "end": "2576559"
  },
  {
    "text": "got I got I got a preview of the future I got a preview for the future yeah yeah that's fair yeah",
    "start": "2576559",
    "end": "2583440"
  },
  {
    "text": "interesting okay cool also something to talk about part two of this episode see how how they are developed since our",
    "start": "2583440",
    "end": "2590720"
  },
  {
    "text": "conversation today but until [Music]",
    "start": "2590720",
    "end": "2596250"
  },
  {
    "text": "then opion I actually think you should probably [Music]",
    "start": "2596680",
    "end": "2603899"
  },
  {
    "text": "leave opinion",
    "start": "2604359",
    "end": "2609119"
  },
  {
    "text": "okay so unpopular opinion is where you say your unpopular opinion doesn't have to be about tech it can be about",
    "start": "2612720",
    "end": "2618160"
  },
  {
    "text": "anything and then we will make this into a Twitter poll an X poll and if many",
    "start": "2618160",
    "end": "2623520"
  },
  {
    "text": "people disagree with you then you reach the Hall of Fame who would like to start with their unpopular opinion uh sure",
    "start": "2623520",
    "end": "2629480"
  },
  {
    "text": "I'll go first um I uh I was actually I mentioned Austin's name earlier and I",
    "start": "2629480",
    "end": "2635559"
  },
  {
    "text": "actually asked Austin uh I'm struggling to go with an unpopular opinion and I",
    "start": "2635559",
    "end": "2640680"
  },
  {
    "text": "stole this from them my unpopular opinion is let's deprecate the entire",
    "start": "2640680",
    "end": "2645800"
  },
  {
    "text": "runtime package and I'm not talking about like the garbage collector or the scheduler I'm talking about the public",
    "start": "2645800",
    "end": "2651599"
  },
  {
    "text": "API of the runtime package it has so many warts so many ways to use it",
    "start": "2651599",
    "end": "2659559"
  },
  {
    "text": "incorrectly uh all the apis a lot of them have Replacements in other packages",
    "start": "2659559",
    "end": "2665000"
  },
  {
    "text": "already um a lot of them should have better should have Replacements I have",
    "start": "2665000",
    "end": "2671599"
  },
  {
    "text": "the list open here and I could just I could just go off I could just start",
    "start": "2671599",
    "end": "2676760"
  },
  {
    "text": "talking about it's it maybe some of the functionality wouldn't come back maybe that's the unpopular part of this",
    "start": "2676760",
    "end": "2683079"
  },
  {
    "text": "unpopular opinion that that some of it some of it should just not come back though uh some of it is also a necessary",
    "start": "2683079",
    "end": "2690119"
  },
  {
    "text": "evil like uh runtime. GC runtime. loock OS thread uh anyone's familiar with that",
    "start": "2690119",
    "end": "2697599"
  },
  {
    "text": "I think you would agree that uh they are necessary evils so that's several unpopular",
    "start": "2697599",
    "end": "2703760"
  },
  {
    "text": "opinions if we are to tweet one of them which one do you choose is it just the first one that you said that this should",
    "start": "2703760",
    "end": "2709280"
  },
  {
    "text": "be deprecated altogether yes let's go with that all right registered on the",
    "start": "2709280",
    "end": "2716599"
  },
  {
    "text": "register Felix you're what is your unpopular opinion yeah in today's seam of referencing previous episodes met Bo",
    "start": "2716599",
    "end": "2724040"
  },
  {
    "text": "recently shared his opinion that Twitter is still a good place for for go developers uh to hang out and if you're",
    "start": "2724040",
    "end": "2730559"
  },
  {
    "text": "going to have unpopular opinions on Twitter saying that Twitter is great like you're not trying hard enough so my",
    "start": "2730559",
    "end": "2735960"
  },
  {
    "text": "unpopular opinion is that while this might be true today I think that LinkedIn is actually going to eat Tech Twitter over the next few years and that",
    "start": "2735960",
    "end": "2742720"
  },
  {
    "text": "everything is going to move over there I am not happy about it but this is what I see happening interesting why do you",
    "start": "2742720",
    "end": "2748240"
  },
  {
    "text": "think that I I noticed that engagement on on Twitter has been trending down I am not entirely en armored with the",
    "start": "2748240",
    "end": "2754839"
  },
  {
    "text": "current ownership of Twitter and and I see linked interest just on a crow trajectory that is solid and they've",
    "start": "2754839",
    "end": "2761240"
  },
  {
    "text": "been growing tremendously over the past decade I think they will continue to do though it's a weird place to hang out",
    "start": "2761240",
    "end": "2767280"
  },
  {
    "text": "but I've just seen more and more conversations happening there I have much less people following me there than",
    "start": "2767280",
    "end": "2772400"
  },
  {
    "text": "on Twitter but when I post stuff there I get at least a similar amount of Engagement so I I I just observe the",
    "start": "2772400",
    "end": "2778640"
  },
  {
    "text": "trend I'm not happy about that Trend because I think LinkedIn is weird but I think it's happening yeah can I interest",
    "start": "2778640",
    "end": "2785359"
  },
  {
    "text": "you in a Java job some embedded role you you'll you'll do",
    "start": "2785359",
    "end": "2791680"
  },
  {
    "text": "create on on LinkedIn te Twitter some some of the weird messages",
    "start": "2791680",
    "end": "2797480"
  },
  {
    "text": "people get weekly there yeah interesting let's see how that acts um my unpopular",
    "start": "2797480",
    "end": "2803359"
  },
  {
    "text": "opinion that I already happened to tweet and check so I think uh I think it's",
    "start": "2803359",
    "end": "2808880"
  },
  {
    "text": "unpopular because most people thought otherwise when you are working from home and you are alone music makes sense to",
    "start": "2808880",
    "end": "2815680"
  },
  {
    "text": "listen to it through your earphones not through your computer speakers why why do you think it makes",
    "start": "2815680",
    "end": "2821680"
  },
  {
    "text": "sense to listen to to it through your headphones I think it's because I had German neighbors for long",
    "start": "2821680",
    "end": "2827800"
  },
  {
    "text": "enough I'm now bothered by the thought of bothering other people you know I kind of agree I used to I used to listen",
    "start": "2827800",
    "end": "2834200"
  },
  {
    "text": "to music and like play stuff through the TV just out loud for pretty much all my",
    "start": "2834200",
    "end": "2840640"
  },
  {
    "text": "life but recently I've started to really enjoy like playing games and watching TV and headphones because I get a St",
    "start": "2840640",
    "end": "2847280"
  },
  {
    "text": "experience that I don't see that I don't get to hear otherwise yeah so the",
    "start": "2847280",
    "end": "2852319"
  },
  {
    "text": "quality ends up actually being a lot better so I'm with you on that one actually yeah I I do the same actually",
    "start": "2852319",
    "end": "2858000"
  },
  {
    "text": "so I'm not sure how unpopular this is going to be at the end of the day my small sample group of Twitter followers",
    "start": "2858000",
    "end": "2865000"
  },
  {
    "text": "said that it makes more sense on on the speakers but let's see what this says um cool thank you very much for joining and",
    "start": "2865000",
    "end": "2871800"
  },
  {
    "text": "talking about the tracing tool that's that was interesting all the updates are interesting I hope I hope the flight",
    "start": "2871800",
    "end": "2878119"
  },
  {
    "text": "tracing goes well and leaves the experimental and we will speak about it",
    "start": "2878119",
    "end": "2883480"
  },
  {
    "text": "joining like the standard library next time yeah until then enjoy your traces",
    "start": "2883480",
    "end": "2890440"
  },
  {
    "text": "may you have less anomalies thanks for joining thanks for",
    "start": "2890440",
    "end": "2896240"
  },
  {
    "text": "hosting all right that's our show thanks for hanging with us subscribe now if you",
    "start": "2896240",
    "end": "2901720"
  },
  {
    "text": "haven't yet head to go time. FM for all the ways or search for go time wherever",
    "start": "2901720",
    "end": "2908040"
  },
  {
    "text": "you get your podcasts you'll find us if you're a fan of go time and get value from the Pod share the show with your",
    "start": "2908040",
    "end": "2914000"
  },
  {
    "text": "friends and colleagues and if you really dig it hook us up with a five-star review we appreciate it thanks once",
    "start": "2914000",
    "end": "2920839"
  },
  {
    "text": "again to our partners at fly.io to our beat freaking residence break master cylinder and to our friends at Sentry",
    "start": "2920839",
    "end": "2927599"
  },
  {
    "text": "save 100 bucks off their team plan when you use code change log during sign up that's all for now but we'll talk to you",
    "start": "2927599",
    "end": "2934359"
  },
  {
    "text": "again next time on go time",
    "start": "2934359",
    "end": "2938720"
  },
  {
    "text": "[Music]",
    "start": "2939420",
    "end": "2944939"
  },
  {
    "text": "[Music]",
    "start": "2947230",
    "end": "2950320"
  },
  {
    "text": "k",
    "start": "2956359",
    "end": "2959359"
  }
]