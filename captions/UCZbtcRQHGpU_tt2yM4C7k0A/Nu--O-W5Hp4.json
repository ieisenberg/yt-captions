[
  {
    "text": "[Music] let's do it it's go time welcome to go",
    "start": "7390",
    "end": "12880"
  },
  {
    "text": "time your source for wide ranging discussions from all around the go",
    "start": "12880",
    "end": "18119"
  },
  {
    "text": "Community have you heard our shipit podcast is back Justin Garrison and",
    "start": "18119",
    "end": "24000"
  },
  {
    "text": "Autumn Nash cover everything that happens after get push give it a listen at ship it. show big thanks to our",
    "start": "24000",
    "end": "31679"
  },
  {
    "text": "partners at fly.io the home of changel log.com easily launch your app close to",
    "start": "31679",
    "end": "37879"
  },
  {
    "text": "your users all around the world find out how at fly.io okay here we",
    "start": "37879",
    "end": "45600"
  },
  {
    "text": "[Music]",
    "start": "45600",
    "end": "56359"
  },
  {
    "text": "go well hello hello hello welcome to the episode of go time I have a very special",
    "start": "56359",
    "end": "63359"
  },
  {
    "text": "show for you today and uh before I dive into what we're going to be talking about so lot of good stuff I uh wanted",
    "start": "63359",
    "end": "70240"
  },
  {
    "text": "to introduce you to my co-host Ian Lopshire Ian why don't you tell the people hi",
    "start": "70240",
    "end": "76520"
  },
  {
    "text": "hello that's good enough joining me following directions",
    "start": "76520",
    "end": "81560"
  },
  {
    "text": "following directions oh it's about to be good all right so the I brought on a couple of guests today um with me to",
    "start": "81560",
    "end": "88520"
  },
  {
    "text": "talk about performance oh by the way I'm Johnny I always forget like I forget to introduce myself you know my voice you",
    "start": "88520",
    "end": "95040"
  },
  {
    "text": "know exactly why anyways uh I brought on a couple guests on on the show today to talk about um performance more",
    "start": "95040",
    "end": "100840"
  },
  {
    "text": "specifically foundations of Go performance so before I introduce those folks I let them introduce themselves",
    "start": "100840",
    "end": "106759"
  },
  {
    "text": "the idea for this show which I'm hoping is one of multiple in a series around go",
    "start": "106759",
    "end": "112759"
  },
  {
    "text": "in performance matters is to take you from Zero to Hero right to basically um",
    "start": "112759",
    "end": "119360"
  },
  {
    "text": "provide guidance for you perhaps the beginner intermediate or even in some cases Advanced go programmer who is",
    "start": "119360",
    "end": "127079"
  },
  {
    "text": "curious about what is available to you from a tooling standpoint from a sort of",
    "start": "127079",
    "end": "132319"
  },
  {
    "text": "a idiomatic standpoint what is available to you when it comes to go and performance in of your programs and uh",
    "start": "132319",
    "end": "138680"
  },
  {
    "text": "also what you should what should you be thinking about and looking at when it comes to writing efficient go programs",
    "start": "138680",
    "end": "144280"
  },
  {
    "text": "so to help me with that discussion I have my first guest um Mariah Peterson Mar wanted introduce yourself to the",
    "start": "144280",
    "end": "150959"
  },
  {
    "text": "people well hello I am Mariah Peterson if I could say two words about myself I",
    "start": "150959",
    "end": "156840"
  },
  {
    "text": "would say don't trust my title as a data Ops engineer because data people don't use go and I do so we will get into that",
    "start": "156840",
    "end": "165560"
  },
  {
    "text": "later for sure also joining us today is um Brian",
    "start": "165560",
    "end": "171519"
  },
  {
    "text": "boram hopefully I pronounce your name correctly introduce yourself to the people Brian yeah hi there I'm Brian",
    "start": "171519",
    "end": "176599"
  },
  {
    "text": "boram I do a lot of performance optimization in go been working in go",
    "start": "176599",
    "end": "182440"
  },
  {
    "text": "for nearly 10 years now and right now I work at grafana Labs I'm a Prometheus",
    "start": "182440",
    "end": "188519"
  },
  {
    "text": "maintainer as well nice nice so see I told you this was going to be an interesting show I brought on people who",
    "start": "188519",
    "end": "194760"
  },
  {
    "text": "know what they're doing and know what they're talking about so let us sort of dive in here before I do let's level set",
    "start": "194760",
    "end": "202000"
  },
  {
    "text": "a little bit so let me let me set the stage right for to help you know sort of dve the discussion imagine you're a",
    "start": "202000",
    "end": "208920"
  },
  {
    "text": "you're a developer on a team and uh you maintain one of several",
    "start": "208920",
    "end": "214080"
  },
  {
    "text": "components several services or several executables however they're deployed right you know whether they run on a CLI",
    "start": "214080",
    "end": "220720"
  },
  {
    "text": "maybe you're building developer tooling or whether they run out on a cluster somewhere right you are in charge of",
    "start": "220720",
    "end": "226519"
  },
  {
    "text": "some services and uh your team lead comes to and says hey this particular uh",
    "start": "226519",
    "end": "233280"
  },
  {
    "text": "component depending on how much data we feed into it right behaves more slowly more unpredictably than some of other",
    "start": "233280",
    "end": "240120"
  },
  {
    "text": "services and uh we think we might have either a performance issue a bottleneck maybe it's CPU maybe it's memory we",
    "start": "240120",
    "end": "247120"
  },
  {
    "text": "don't know so I'm tasking you to identify right whatever the problem",
    "start": "247120",
    "end": "253640"
  },
  {
    "text": "might be and and fix it right so that is g I'm GNA play that role right I'm GNA",
    "start": "253640",
    "end": "259320"
  },
  {
    "text": "be asking questions right assume that I don't know a whole lot about go and go performance optimization or anything",
    "start": "259320",
    "end": "264680"
  },
  {
    "text": "like that I'm going to be putting myself in in those shoes right and and I'm going to start asking not dumb questions",
    "start": "264680",
    "end": "271600"
  },
  {
    "text": "but question naive questions perhaps I'm going to play the role of somebody who doesn't know right and wants to know all",
    "start": "271600",
    "end": "277280"
  },
  {
    "text": "right how does that sound to everybody okay that sounds that sounds good I'm seeing thumbs up I'm seeing head knots",
    "start": "277280",
    "end": "284160"
  },
  {
    "text": "all right so tell me from the get-go the I know go is about go design principles",
    "start": "284160",
    "end": "289800"
  },
  {
    "text": "is all about you know um Simplicity and efficiency right you know I know it's a garbage collected language right like",
    "start": "289800",
    "end": "296800"
  },
  {
    "text": "first of all I might need some comparison as to what that even me means for me like G garbage collection versus",
    "start": "296800",
    "end": "302840"
  },
  {
    "text": "what right like can we set the ground floor here as to how I should be thinking about go when it comes to",
    "start": "302840",
    "end": "308800"
  },
  {
    "text": "design principles with regards to Performance can you provide some starting point for me to reason about",
    "start": "308800",
    "end": "315039"
  },
  {
    "text": "Go's philosophy with regards to Performance why don't we start with you Brian can you get us get us started I was going to say before you before you",
    "start": "315039",
    "end": "321280"
  },
  {
    "text": "get into the go details if the first thing we know is the thing is this component is slow the next thing we want",
    "start": "321280",
    "end": "327720"
  },
  {
    "text": "to know is is what is it doing you you know is it slow because it's chewing up a lot of CPU or is it slow because it's",
    "start": "327720",
    "end": "333720"
  },
  {
    "text": "waiting for something else so usually the something else is is something on the network or or disk or something like",
    "start": "333720",
    "end": "340160"
  },
  {
    "text": "that so that's that's kind of step one before you actually get into the goal code or the the details of of the code",
    "start": "340160",
    "end": "347000"
  },
  {
    "text": "is is what is it doing I sit here shouting that at the screen most days but uh I mean for the purpose you know",
    "start": "347000",
    "end": "353520"
  },
  {
    "text": "because it's go time and it's not Network time or disk time we could assume that we we went through that step",
    "start": "353520",
    "end": "359000"
  },
  {
    "text": "and we decided that the thing is slow because it's it's sitting in in your go code it's chewing up a lot of",
    "start": "359000",
    "end": "365599"
  },
  {
    "text": "CPU now what do we do and I'm going to say the the step after when you get to",
    "start": "365599",
    "end": "371280"
  },
  {
    "text": "there it's profiling is is the good step so once I know that okay I've ruled out",
    "start": "371280",
    "end": "377800"
  },
  {
    "text": "you know I know my program is if it's a let's assume it's some sort of a service that listens on a board and gets some",
    "start": "377800",
    "end": "383319"
  },
  {
    "text": "traffic and whatnot how should I even be thinking about Go's design and and sort",
    "start": "383319",
    "end": "389080"
  },
  {
    "text": "of philosophy how should I even how should I approach this problem when it comes to go performance like what what",
    "start": "389080",
    "end": "395560"
  },
  {
    "text": "is the first rule of thumb I should be thinking about uh for sure I don't think I think we should underscore a little",
    "start": "395560",
    "end": "401639"
  },
  {
    "text": "bit about what Brian said though something I go back to quite often so I I've been doing software for only six",
    "start": "401639",
    "end": "408479"
  },
  {
    "text": "years and when I started I have only ever worked on cloud services so there's a lot of things I think background",
    "start": "408479",
    "end": "415599"
  },
  {
    "text": "skills and understanding profiling that comes from oh I've uh done things in",
    "start": "415599",
    "end": "421360"
  },
  {
    "text": "Linux or oh I've uh had uh experience on",
    "start": "421360",
    "end": "426479"
  },
  {
    "text": "different kernels in different constrained environments that is honestly a foundational skill that is",
    "start": "426479",
    "end": "433000"
  },
  {
    "text": "how we begin a lot of these understanding the problems because I",
    "start": "433000",
    "end": "438440"
  },
  {
    "text": "think we obious skate it and go to oh Cloud resources are cheap so we can just",
    "start": "438440",
    "end": "443680"
  },
  {
    "text": "you know do the cheap stuff so there is a lot of background things we need to do",
    "start": "443680",
    "end": "449039"
  },
  {
    "text": "before we dive into the go and then yeah once we say because go is faster than a",
    "start": "449039",
    "end": "455440"
  },
  {
    "text": "lot of programming language like I've worked with python I know my day job we do a lot of Ruby and go is just always",
    "start": "455440",
    "end": "461800"
  },
  {
    "text": "going to be faster than those two and so is go the problem should always be the first question which is what Brian was",
    "start": "461800",
    "end": "468479"
  },
  {
    "text": "saying and then the next question is okay it is something with the the code that I've written what tools are out",
    "start": "468479",
    "end": "475159"
  },
  {
    "text": "there and luckily we did choose go and a lot of the tools are shipped with the standard Library so that's uh you know",
    "start": "475159",
    "end": "482960"
  },
  {
    "text": "where we start I do like that initial approach you know and I too did a uh you",
    "start": "482960",
    "end": "488479"
  },
  {
    "text": "know a lot of uh uh in my case Ruby prior to sort of switching to go and and",
    "start": "488479",
    "end": "494360"
  },
  {
    "text": "I found that as I made that transition and Ian I'm not sure if you had a similar situation but you know as I made",
    "start": "494360",
    "end": "499759"
  },
  {
    "text": "my transition I found that even my naive go programs were faster than my most",
    "start": "499759",
    "end": "506879"
  },
  {
    "text": "optimized you know Ruby programs right and this is no you know knock on on Ruby",
    "start": "506879",
    "end": "512800"
  },
  {
    "text": "right there's just a different sort of performance profile right for you know a compiled static language like like go",
    "start": "512800",
    "end": "519000"
  },
  {
    "text": "then you will get from an you know sort of a you know a language like Ruby or Python and these kinds of things in most",
    "start": "519000",
    "end": "525120"
  },
  {
    "text": "situations right I don't want to make sort of a blanket statement but but yeah in my case the kinds of problems I was solving right I could get a whole lot",
    "start": "525120",
    "end": "530959"
  },
  {
    "text": "more bang for the butt which is why you know as a programmer who's sort of switching to go and you're like okay I",
    "start": "530959",
    "end": "536440"
  },
  {
    "text": "just wrote this program and it is Miles Ahead of whatever I was doing before right you can go far and for a long time",
    "start": "536440",
    "end": "543440"
  },
  {
    "text": "without ever having to worry about performance optimization or anything like that right unless you find yourself",
    "start": "543440",
    "end": "549240"
  },
  {
    "text": "in a situation where especially depending on the scale of problems you're working with where there is the",
    "start": "549240",
    "end": "555320"
  },
  {
    "text": "need like our sort of hypothetical situation here where your boss comes to and says hey we noticed like through",
    "start": "555320",
    "end": "560720"
  },
  {
    "text": "some uh analytics that we're we're tracking you know at the cluster level right that this particular service is a",
    "start": "560720",
    "end": "566880"
  },
  {
    "text": "bottleneck right so with that in mind Ian I'd be interested to know sort of what what the next step you'd take right",
    "start": "566880",
    "end": "574160"
  },
  {
    "text": "knowing what Mariah and and Brian just put forth yeah I think I'd start to ask",
    "start": "574160",
    "end": "579320"
  },
  {
    "text": "questions about why is this the bottleneck is it dropping requests is it responding slowly is it crawling to a",
    "start": "579320",
    "end": "586040"
  },
  {
    "text": "halt and just stopping every once in a while right I think a lot of people have this idea that performance means going",
    "start": "586040",
    "end": "591959"
  },
  {
    "text": "fast right but really it's am I falling within constraints that I need to fall",
    "start": "591959",
    "end": "597600"
  },
  {
    "text": "within right so I I think my first step is like figuring out what those constraints are and then we can start",
    "start": "597600",
    "end": "603040"
  },
  {
    "text": "doing the optimization to get there mhm yeah you might want to characterize you",
    "start": "603040",
    "end": "608200"
  },
  {
    "text": "know is it is it every request that's slow or is it a particular kind of request or is it is it those ones coming",
    "start": "608200",
    "end": "615399"
  },
  {
    "text": "in from a particular kind of user you know maybe maybe you can characterize this maybe you can't but it certainly",
    "start": "615399",
    "end": "621320"
  },
  {
    "text": "helps uh it helps even more if it's repeatable the worst kind of problems are the ones that that happen once in a",
    "start": "621320",
    "end": "628040"
  },
  {
    "text": "while and you you don't know why why and you can't trigger it yourself so being able to figure out what causes it and",
    "start": "628040",
    "end": "634079"
  },
  {
    "text": "and how to repeat it can be really important I definitely want to touch on sort of I think I'm going to paraphrase",
    "start": "634079",
    "end": "641639"
  },
  {
    "text": "what you just said Ian in terms of sort of expectations right what is the expectation from a performance",
    "start": "641639",
    "end": "647040"
  },
  {
    "text": "standpoint of this particular service right because I think those expectations are sometimes and often right in",
    "start": "647040",
    "end": "652959"
  },
  {
    "text": "production environments translated into from a resource standpoint translated into a certain um CPU allocation or",
    "start": "652959",
    "end": "659760"
  },
  {
    "text": "certain memory allocation right like I had a sort of a nasty surprise when I first started working you know with you",
    "start": "659760",
    "end": "666120"
  },
  {
    "text": "know orchestration uh tooling you know like for the Dockers and and these kinds of things and realizing that oh my",
    "start": "666120",
    "end": "672639"
  },
  {
    "text": "program the way I experien the output of my program is that it'd be working and and doing things and it would res",
    "start": "672639",
    "end": "678920"
  },
  {
    "text": "certain particular threshold and all of a sudden it's almost like it was just like stop dead in the middle of trying to perform some sort of action it would",
    "start": "678920",
    "end": "685639"
  },
  {
    "text": "just stop and I'd be trying to debug like why why is it that this thing was running and all of a sudden it just",
    "start": "685639",
    "end": "691399"
  },
  {
    "text": "stopped no no stack Trace no no error it just it just got killed off right and I",
    "start": "691399",
    "end": "698120"
  },
  {
    "text": "realized that oh crap the orchestrator right the whatever what whether you doing using ECS or kubernetes or",
    "start": "698120",
    "end": "705839"
  },
  {
    "text": "whatever it is right that environment allocated a certain CPU and memory right",
    "start": "705839",
    "end": "710920"
  },
  {
    "text": "resources for that particular service and whenever I would go above that",
    "start": "710920",
    "end": "716040"
  },
  {
    "text": "threshold for a certain amount of time my processor would get killed I didn't realize my services were just",
    "start": "716040",
    "end": "722200"
  },
  {
    "text": "being killed off right by that environment and you know when the moment I realized that I'm like whole snap",
    "start": "722200",
    "end": "728760"
  },
  {
    "text": "right to to Ian's Point like you kind of have to know ahead of time right and work out with you know whether whether",
    "start": "728760",
    "end": "734519"
  },
  {
    "text": "it's you know working with the with the Ops Team or maybe you are the Ops team if if you're doing SRE stuff I'm trying",
    "start": "734519",
    "end": "740120"
  },
  {
    "text": "to understand what is it that I'm I need to accomplish ahead of time which I think feeds into sort of knowing what",
    "start": "740120",
    "end": "746880"
  },
  {
    "text": "your application or Services is supposed to be doing with whatever data is supposed to be doing it which kind of",
    "start": "746880",
    "end": "753399"
  },
  {
    "text": "leads to if you know you're going to have to deal with a certain volume of data right and you think you have a",
    "start": "753399",
    "end": "759639"
  },
  {
    "text": "problem with how you're handling it how do we go what's the next step how do you go about trying to figure out right",
    "start": "759639",
    "end": "765519"
  },
  {
    "text": "where your problem is well I I already said profiling I'm going to come back to that all right is is there another",
    "start": "765519",
    "end": "772440"
  },
  {
    "text": "answer besides profiling like that's what I'm I'm trying to find out here uh",
    "start": "772440",
    "end": "777560"
  },
  {
    "text": "I guess Jody made it point something I never do that I have known people to do",
    "start": "777560",
    "end": "783480"
  },
  {
    "text": "is like sit down and do a calculation I expect to have a throughput of this many bites to take up this much space I kind",
    "start": "783480",
    "end": "789839"
  },
  {
    "text": "of have always been the Brute Force type run as much sanity testing as possible",
    "start": "789839",
    "end": "795680"
  },
  {
    "text": "and see when it breaks but that leads to the other problem of like it makes it so",
    "start": "795680",
    "end": "802040"
  },
  {
    "text": "that the conceptual knowledge isn't always there and I think you don't want CPU and memory issues well they tend to",
    "start": "802040",
    "end": "808959"
  },
  {
    "text": "be the you don't need to worry about them until you are locked out of your machine and you have to worry about them",
    "start": "808959",
    "end": "815839"
  },
  {
    "text": "like that's how they end up being and that's when you're like okay great now what do I do well I guess I should set",
    "start": "815839",
    "end": "821040"
  },
  {
    "text": "up a profiler but it's you've already hit the wall you've already ran into that threshold you've already crashed",
    "start": "821040",
    "end": "827560"
  },
  {
    "text": "now it's a little bit late to be thinking about the oh crap the stuff that I never have to worry about now is",
    "start": "827560",
    "end": "833279"
  },
  {
    "text": "the only thing I care about so you're right Brian I agree yeah it is it is really difficult to kind of formulate in",
    "start": "833279",
    "end": "840440"
  },
  {
    "text": "advance what what the resource usage should be but um I mean I I think it's",
    "start": "840440",
    "end": "846880"
  },
  {
    "text": "something that comes with experience and also there's a concept called mechanical sympathy have you have you heard of that",
    "start": "846880",
    "end": "853000"
  },
  {
    "text": "oh that was that was on my list for bringing up on this podcast so let's get into it yeah yeah I mean I think it came",
    "start": "853000",
    "end": "859079"
  },
  {
    "text": "from um Formula 1 racing driver uh talking about like if you understand how the car Works inside then you can drive",
    "start": "859079",
    "end": "865959"
  },
  {
    "text": "it better and computers are a little bit like that so there there are certain things like like uh like your your CPU",
    "start": "865959",
    "end": "873399"
  },
  {
    "text": "can do like a billion things in a second where each one of those things is something like adding adding two numbers",
    "start": "873399",
    "end": "880160"
  },
  {
    "text": "or or something like that and without needing to know any great details and even that number of a billion is is off",
    "start": "880160",
    "end": "887160"
  },
  {
    "text": "by a bit right I'm I'm just just saying just like gross gross simplification if",
    "start": "887160",
    "end": "892880"
  },
  {
    "text": "you're sitting there waiting for the computer to come back to you then that means it took like half a second or",
    "start": "892880",
    "end": "898680"
  },
  {
    "text": "something like like that so the so the computer the the CPU at the the real core of your computer could do half a",
    "start": "898680",
    "end": "905480"
  },
  {
    "text": "billion things so what the heck did you write in your code that made it do half",
    "start": "905480",
    "end": "911199"
  },
  {
    "text": "a billion things you know that's that's one of my starting points like you know what is it doing what how an earth did",
    "start": "911199",
    "end": "918120"
  },
  {
    "text": "it take that long for what I asked it to do if you have to process a billion",
    "start": "918120",
    "end": "924160"
  },
  {
    "text": "things which if you do I'm sorry for you that's that's a that's kind of a hard",
    "start": "924160",
    "end": "929440"
  },
  {
    "text": "problem welcome to my life if you have to and and actually Mar",
    "start": "929440",
    "end": "935959"
  },
  {
    "text": "I know I know as a data person I know the kinds of volume and the ways you're",
    "start": "935959",
    "end": "941399"
  },
  {
    "text": "dealing with them of data right that you deal with is going to be perhaps different from somebody who's writing",
    "start": "941399",
    "end": "948800"
  },
  {
    "text": "sort of you know networked uh applications right not to say that you're not working with some Network stuff as well but I think if you're if",
    "start": "948800",
    "end": "954440"
  },
  {
    "text": "you're doing things in and if you have unpredictable workload I should I should maybe put it that way if you have",
    "start": "954440",
    "end": "960160"
  },
  {
    "text": "unpredictable workloads right it's going to be different than if you have a predictable set of data you know you",
    "start": "960160",
    "end": "965720"
  },
  {
    "text": "have to deal with you have to you know you have to deal with you know five gigabytes worth of text processing right",
    "start": "965720",
    "end": "971160"
  },
  {
    "text": "perhaps your approach to writing your code is going to be a little different than if you have to write a a network",
    "start": "971160",
    "end": "976480"
  },
  {
    "text": "service that is supposed to deal with streaming data right you know that it's it's going to be different that any any",
    "start": "976480",
    "end": "983000"
  },
  {
    "text": "one time you're working with a subset right of a larger sort of pool of data",
    "start": "983000",
    "end": "988560"
  },
  {
    "text": "right so I think this is a very interesting topic to bring back to",
    "start": "988560",
    "end": "993759"
  },
  {
    "text": "go so yeah I I uh was doing research for a course I've been workshopping trying",
    "start": "993759",
    "end": "1000920"
  },
  {
    "text": "to do more anyway the topic is go and data engineering and going into it kind",
    "start": "1000920",
    "end": "1006759"
  },
  {
    "text": "of with this idea I've been doing a lot of stuff with peov which is the Prof which is Ghost profiling tool which we",
    "start": "1006759",
    "end": "1012199"
  },
  {
    "text": "should Circle back to I've been doing a lot of stuff with pepr trying to understand go routines like basically at",
    "start": "1012199",
    "end": "1019360"
  },
  {
    "text": "the orchestration layer is it better to use a go routine and have it in one program or to scale out your programs",
    "start": "1019360",
    "end": "1024760"
  },
  {
    "text": "right like can the IDE should you do horizontal Auto scaling and kubernetes or should you try doing workers internally those kinds of things and",
    "start": "1024760",
    "end": "1031640"
  },
  {
    "text": "part of the problem with that comes to essentially basic API calls is how I'll",
    "start": "1031640",
    "end": "1037880"
  },
  {
    "text": "put it so it doesn't matter what program You're Building go uses the io reader",
    "start": "1037880",
    "end": "1044720"
  },
  {
    "text": "and IO writer for basically for most of its is like that is the interface behind",
    "start": "1044720",
    "end": "1050440"
  },
  {
    "text": "all of its orchestration whether you're connecting to a database whether you're connecting to a streaming service whether you're connecting to an API it",
    "start": "1050440",
    "end": "1056120"
  },
  {
    "text": "all goes back to that layer so it doesn't matter the like the Vol if you're writing a service that's going to",
    "start": "1056120",
    "end": "1062160"
  },
  {
    "text": "be handling hundreds of thousands of API calls it's the same system as if you're",
    "start": "1062160",
    "end": "1067360"
  },
  {
    "text": "handling hundreds of thousands of database rights right or if you're processing hundreds of thousands of of",
    "start": "1067360",
    "end": "1073640"
  },
  {
    "text": "data points the latency in go doesn't tend to unless you have built your",
    "start": "1073640",
    "end": "1080360"
  },
  {
    "text": "program incorrectly the latency and the slowness doesn't tend to come from the actual data munging or the manipulation",
    "start": "1080360",
    "end": "1087159"
  },
  {
    "text": "of the data point it comes from those connections to and from file systems or to and from API points so when you're",
    "start": "1087159",
    "end": "1093559"
  },
  {
    "text": "designing your service and you're trying to optimize things and go that is the point where you tend to have memory",
    "start": "1093559",
    "end": "1100080"
  },
  {
    "text": "issues the memory issues often come from those connection points or those API points those the points where you're",
    "start": "1100080",
    "end": "1105280"
  },
  {
    "text": "sending data from one function to another or one system to another it doesn't come from the actual the",
    "start": "1105280",
    "end": "1111080"
  },
  {
    "text": "horizontal scaling of the service it is from those design choices at the io read write level like the oh crap I forgot to",
    "start": "1111080",
    "end": "1118760"
  },
  {
    "text": "close my writer oh crap I forgot to you know I have 15 connections open when I",
    "start": "1118760",
    "end": "1123840"
  },
  {
    "text": "really only need one like those are the different things and I I feel like that's the same no matter what program",
    "start": "1123840",
    "end": "1129280"
  },
  {
    "text": "You're Building cuz all of us are manipulating bites at the end of the day and those are the kinds of things that I",
    "start": "1129280",
    "end": "1135919"
  },
  {
    "text": "find people tend to turn to kubernetes logs or other kinds of things and not",
    "start": "1135919",
    "end": "1142480"
  },
  {
    "text": "use some of the stuff that go has built in to help us track that kind of of stuff I would argue there are some silly",
    "start": "1142480",
    "end": "1149480"
  },
  {
    "text": "mistakes you can make in the code as well right which which again tying in the reading right the io like for",
    "start": "1149480",
    "end": "1156720"
  },
  {
    "text": "example one of when I'm teaching go one of the first things I I tell folks is that if you have to work with files on",
    "start": "1156720",
    "end": "1163720"
  },
  {
    "text": "disk right even if it's a predictable you know size file know that if you use",
    "start": "1163720",
    "end": "1170799"
  },
  {
    "text": "say IO readall you're putting every single bite of that file into your",
    "start": "1170799",
    "end": "1177480"
  },
  {
    "text": "program's memory so that's an easy mistake to make right and thinking that oh I'm just going to read all the lines",
    "start": "1177480",
    "end": "1184280"
  },
  {
    "text": "in into memory and maybe I'm iterating and doing some sort of transformation or counting whatever it is right on on every line I'm I'm reading the entire",
    "start": "1184280",
    "end": "1191080"
  },
  {
    "text": "file in memory right whereby like the moment I explained that well you want to take more of a streaming approach not",
    "start": "1191080",
    "end": "1197120"
  },
  {
    "text": "get everything in memory approach right then they're like oh I can do that right I can I can read one line at a time or I",
    "start": "1197120",
    "end": "1203159"
  },
  {
    "text": "can process things one line at a time kind of like you know it's it's that whole it's the difference between oh let me just get everything in memory and",
    "start": "1203159",
    "end": "1209000"
  },
  {
    "text": "work on it right versus let me work on pieces or chunks at a time kind of thing the moment folks realize oh you can do",
    "start": "1209000",
    "end": "1215159"
  },
  {
    "text": "that right then there's like the as you said there the mind blown kind of kind of thing that goes on but if I don't",
    "start": "1215159",
    "end": "1221120"
  },
  {
    "text": "know about these libraries or if I if I don't know about this easy way of shooting myself in the foot these things",
    "start": "1221120",
    "end": "1226360"
  },
  {
    "text": "tend to happen very very often so when you are faced with the situ situations I",
    "start": "1226360",
    "end": "1231679"
  },
  {
    "text": "think this is where I think we s to introduce more of the the tooling aspect of things you know PE has been dropped a",
    "start": "1231679",
    "end": "1237720"
  },
  {
    "text": "couple times here let's talk about peov like like what is it why is it so the",
    "start": "1237720",
    "end": "1243440"
  },
  {
    "text": "basic idea a tool like prpr is you're going to run your program you're going",
    "start": "1243440",
    "end": "1248679"
  },
  {
    "text": "to have it doing its thing and the profiler is going to interrupt like 100 times a second and every time it",
    "start": "1248679",
    "end": "1255840"
  },
  {
    "text": "interrupts it's going to take a note of what was executing and then",
    "start": "1255840",
    "end": "1261080"
  },
  {
    "text": "statistically over a few seconds or however long you leave it running for you can that's why we call it a profile",
    "start": "1261080",
    "end": "1267240"
  },
  {
    "text": "you build up the numbers you say Well it ran for 10 seconds I I interrupted 100",
    "start": "1267240",
    "end": "1273120"
  },
  {
    "text": "times a second so I have a th000 counts in total of my thousand counts half of them were in this one function and you",
    "start": "1273120",
    "end": "1280919"
  },
  {
    "text": "know 10% was in this other function 10% was in this other function so that's that's the profile right the mechanical",
    "start": "1280919",
    "end": "1286919"
  },
  {
    "text": "step of of interrupting 100 times a second and making a note and then adding up all those counts and then you draw it",
    "start": "1286919",
    "end": "1293440"
  },
  {
    "text": "on the screen and I I like a particular Vis visualization called a flame graph where you get uh you get it just like",
    "start": "1293440",
    "end": "1300480"
  },
  {
    "text": "it's not very good for a podcast I'm waving my hands around but it's uh it's not helping honestly go go find uh go",
    "start": "1300480",
    "end": "1307080"
  },
  {
    "text": "find videos where people show these things off if you've never seen it before but basically you get rectangular bars and the uh the bigger the bar the",
    "start": "1307080",
    "end": "1315200"
  },
  {
    "text": "more time it's spent in that function and so you just you bring this up you look for the big bars you know that's it",
    "start": "1315200",
    "end": "1321320"
  },
  {
    "text": "so that's the first place the first place you look certainly there are obvious markers that doesn't necessarily",
    "start": "1321320",
    "end": "1327919"
  },
  {
    "text": "mean it's it's where you're going to get the most bank for the but maybe you are you are doing a function that is already",
    "start": "1327919",
    "end": "1333080"
  },
  {
    "text": "highly optimized and perhaps it's not the function itself that you need to optimize perhaps it's how much data you",
    "start": "1333080",
    "end": "1338799"
  },
  {
    "text": "sending it right that you need to to streamline somewhere else right so it's an it gives you an obvious place to",
    "start": "1338799",
    "end": "1345400"
  },
  {
    "text": "start and look right yeah you I mean where might you go after you've I mean the basic process is to um come up with",
    "start": "1345400",
    "end": "1352559"
  },
  {
    "text": "some idea about about how it could go faster and and what what are you going to do you you're going to you're going",
    "start": "1352559",
    "end": "1359039"
  },
  {
    "text": "to spot that you're calculating so or doing some operation you don't really need to do just skip it or you're going",
    "start": "1359039",
    "end": "1364120"
  },
  {
    "text": "to find a cleverer way to do that thing or you're going to realize you do the",
    "start": "1364120",
    "end": "1370400"
  },
  {
    "text": "same thing multiple times and save it for later like caching you know you you're going to come up with one of those techniques so you have to sort of",
    "start": "1370400",
    "end": "1378159"
  },
  {
    "text": "plot your way that that's kind of what you're looking for like uh and and what you said if it's already highly",
    "start": "1378159",
    "end": "1383799"
  },
  {
    "text": "optimized then that's if someone's been in there and applied all the techniques you might still be able to do more",
    "start": "1383799",
    "end": "1389840"
  },
  {
    "text": "things in parallel you know go go is a great language for that if you if you have the CPUs available you you could",
    "start": "1389840",
    "end": "1396279"
  },
  {
    "text": "split things up run them in run them on different go routines concurrently I never remember what parallel versus",
    "start": "1396279",
    "end": "1402320"
  },
  {
    "text": "concurrency there's I play it safe I say concurrent I'll play it safe man that's a different different podcast I believe",
    "start": "1402320",
    "end": "1411360"
  },
  {
    "text": "uh okay okay so the the uh PR tool gives you different knobs and boy are there",
    "start": "1411360",
    "end": "1418720"
  },
  {
    "text": "many but the ones I usually find interesting are sort of a CPU profiling",
    "start": "1418720",
    "end": "1424279"
  },
  {
    "text": "right which is a you know different from memory profiling there's a there's also",
    "start": "1424279",
    "end": "1429880"
  },
  {
    "text": "a trace that you can you can apply to kind of see basically that more readily",
    "start": "1429880",
    "end": "1436520"
  },
  {
    "text": "shows you what's happening across grow routines and and things of that nature right I think Brian to your point is you",
    "start": "1436520",
    "end": "1443000"
  },
  {
    "text": "have a starting point right your function now you fig you're trying to figure out what are my options what can I do right like you know identifying the",
    "start": "1443000",
    "end": "1449720"
  },
  {
    "text": "embarrassingly parallel problems right the opportunities right for concurrency",
    "start": "1449720",
    "end": "1454840"
  },
  {
    "text": "that perhaps you're not taking advantage of right I mean it could simply be that right if there's no dependency between",
    "start": "1454840",
    "end": "1459960"
  },
  {
    "text": "you know running the function one time and then the next time you're run it again if there's no dependency between that data perhaps that is a great",
    "start": "1459960",
    "end": "1465080"
  },
  {
    "text": "opportunity for concurrency right just launch some go routines if you know how many you need ahead of time maybe use a",
    "start": "1465080",
    "end": "1470520"
  },
  {
    "text": "we group if you don't maybe use some channels for some communication right then you start basically peeling back",
    "start": "1470520",
    "end": "1475840"
  },
  {
    "text": "the layers to figure out where to now where to from there right but is that",
    "start": "1475840",
    "end": "1481480"
  },
  {
    "text": "like I want to sort of uh go back to the whole notion of the function perhaps",
    "start": "1481480",
    "end": "1486559"
  },
  {
    "text": "being already optimized how do we know it's been optimized right like what other tool could we use to bring it into",
    "start": "1486559",
    "end": "1492200"
  },
  {
    "text": "play here to know that okay this thing right is going to perform consistently Based on data I provided you're being",
    "start": "1492200",
    "end": "1499120"
  },
  {
    "text": "really really um pointed towards um the benchmarking tool I think but before we",
    "start": "1499120",
    "end": "1505039"
  },
  {
    "text": "go to the benchmarking tool I do want to say I I run the local well I don't run I used to run the local Meetup here but I",
    "start": "1505039",
    "end": "1511360"
  },
  {
    "text": "prepared a talk on pepr for it and I made some videos and me personally I can never remember what the PPR tools do I",
    "start": "1511360",
    "end": "1518200"
  },
  {
    "text": "cannot for the life of me remember what all of the things mean what all the graphs mean go makes their own flame",
    "start": "1518200",
    "end": "1524399"
  },
  {
    "text": "graph in PR so they have the traditional flame graph and then they have What's called the new flame graph one of the things that that tells you is",
    "start": "1524399",
    "end": "1531200"
  },
  {
    "text": "is Ghost compiler optimizing for you did it inline functions for you so you can tell right off the bat did the compiler",
    "start": "1531200",
    "end": "1538640"
  },
  {
    "text": "optimize for me by looking at this flame graph so step one put PR in your program",
    "start": "1538640",
    "end": "1544760"
  },
  {
    "text": "step two look at the flame graph and see are anything already inline for me is",
    "start": "1544760",
    "end": "1550440"
  },
  {
    "text": "the compiler already optimizing things for me and then I would say great now I notice that I have this function you",
    "start": "1550440",
    "end": "1558520"
  },
  {
    "text": "know you're looking at the the web graph which is their their other thing again if you want to know what it means I have",
    "start": "1558520",
    "end": "1564320"
  },
  {
    "text": "a video on YouTube go look for it I go through it in detail it's visual that's",
    "start": "1564320",
    "end": "1569559"
  },
  {
    "text": "why and you can see oh this is an expensive function it's taking a lot of CPU it's taking a lot of memory great I",
    "start": "1569559",
    "end": "1576000"
  },
  {
    "text": "want to see if I can try and optimize this let me write a set of benchmarking tests turn on that memory flag and see",
    "start": "1576000",
    "end": "1584039"
  },
  {
    "text": "if you can start dialing knobs to go fix that High problem function so you have",
    "start": "1584039",
    "end": "1590880"
  },
  {
    "text": "to I don't think it's one or the other I do think the tools have to go in tandem I would again I always find benchmarking",
    "start": "1590880",
    "end": "1597919"
  },
  {
    "text": "to be that last step that last great I've got a program I've got it working I'm trying to get it optimized to you",
    "start": "1597919",
    "end": "1605200"
  },
  {
    "text": "know maybe it's not the most optimized it can be but I'm trying to get 80% of the way there I've identified some some",
    "start": "1605200",
    "end": "1611480"
  },
  {
    "text": "heavy CPU functions or some heavy memory functions which you can identify with P",
    "start": "1611480",
    "end": "1617399"
  },
  {
    "text": "very easily now let me pick these functions turn on the right flags and start writing Benchmark tests and see if I can do that",
    "start": "1617399",
    "end": "1624799"
  },
  {
    "text": "and the way benchmarking works is instead of just running it once it by default runs it as many times as",
    "start": "1624799",
    "end": "1631159"
  },
  {
    "text": "possible within that window and it's giving you that basic average",
    "start": "1631159",
    "end": "1636720"
  },
  {
    "text": "performance over that so many times of runs and so you can see great on average",
    "start": "1636720",
    "end": "1642240"
  },
  {
    "text": "I'm allocating 3,000 bytes to this one function that would be exceedingly a",
    "start": "1642240",
    "end": "1648679"
  },
  {
    "text": "huge problem and you should fix that as opposed to you know can I get that to be",
    "start": "1648679",
    "end": "1654240"
  },
  {
    "text": "lower can I get it to not be maybe this you know can I and then oh it's taking",
    "start": "1654240",
    "end": "1660399"
  },
  {
    "text": "300 milliseconds per run but the function next to it executing in 20 nond per run maybe I can trade off things so",
    "start": "1660399",
    "end": "1668240"
  },
  {
    "text": "that this function is not as much of a bottleneck for that whole system so those are when I teach on benchmarking",
    "start": "1668240",
    "end": "1675720"
  },
  {
    "text": "those are the two things I always say look at how long it takes to run your function look at and then look at how",
    "start": "1675720",
    "end": "1681320"
  },
  {
    "text": "many btes you're allocating per system and that's what you should those are the first knobs to start tweaking in my opinion I don't do it that much",
    "start": "1681320",
    "end": "1689159"
  },
  {
    "text": "professionally I very rarely get to the point where I am like needing to prove",
    "start": "1689159",
    "end": "1695600"
  },
  {
    "text": "optimization at The Benchmark I think I've never worked at a company big enough where they start losing money based on the speed of my things I always",
    "start": "1695600",
    "end": "1703200"
  },
  {
    "text": "am at the company that's like we need to move our infrastructure from here to here and so I'm and always got the free",
    "start": "1703200",
    "end": "1709640"
  },
  {
    "text": "budget to build new things anyway but that's still where I point people aren't",
    "start": "1709640",
    "end": "1715320"
  },
  {
    "text": "you lucky I know I just and then when they tell me when they tell me to start fixing things I'm like new job let's go",
    "start": "1715320",
    "end": "1722200"
  },
  {
    "text": "find a green field project but again but that's why I I was so interested maybe I didn't use it",
    "start": "1722200",
    "end": "1728480"
  },
  {
    "text": "professionally but now I need to learn it well enough to teach it because it is that I do think it is that important so",
    "start": "1728480",
    "end": "1734559"
  },
  {
    "text": "there's your benchmarking plug Johnny all right nice nice nice nice Ian anything to add to the whole Benchmark",
    "start": "1734559",
    "end": "1741519"
  },
  {
    "text": "discussion sorry I've kind of lost my train of thought not really I me I like",
    "start": "1741519",
    "end": "1747080"
  },
  {
    "text": "definitely I like the idea that they go hand in hand right so you you found your problem you've used prpr you found this",
    "start": "1747080",
    "end": "1753080"
  },
  {
    "text": "is allocating a lot this is using a lot of CPU cycles and like the next up is writing that Benchmark so you can tell",
    "start": "1753080",
    "end": "1759960"
  },
  {
    "text": "if you've actually made a difference I like the idea of those going hand in hand like they have to right yeah makes",
    "start": "1759960",
    "end": "1765399"
  },
  {
    "text": "it makes it repeatable you know we we kind of started our our fictitious",
    "start": "1765399",
    "end": "1770600"
  },
  {
    "text": "example of measuring something in in production right measuring something that really happened but you you may not",
    "start": "1770600",
    "end": "1777919"
  },
  {
    "text": "be able to recreate that so easily and you you don't really want to mess around in production too much so recreating",
    "start": "1777919",
    "end": "1783519"
  },
  {
    "text": "that particular thing as a little Standalone program that's a benchmark",
    "start": "1783519",
    "end": "1788919"
  },
  {
    "text": "and then being able to run the thing as as Mariah said again again and again so we can get a a kind of average timing",
    "start": "1788919",
    "end": "1796159"
  },
  {
    "text": "out of it uh and the the goal the go testing framework does that for you I found I've done a little bit of of",
    "start": "1796159",
    "end": "1802240"
  },
  {
    "text": "teaching this stuff as well and I think it's kind of half and half some people have seen benchmarks love them do them",
    "start": "1802240",
    "end": "1808320"
  },
  {
    "text": "all the time and like like half the world has has basically never touched them in in Goat they maybe they' seen",
    "start": "1808320",
    "end": "1814840"
  },
  {
    "text": "scroll past them in a file once or twice but but never really looked at it so I I would certainly encourage it's a really",
    "start": "1814840",
    "end": "1820760"
  },
  {
    "text": "simple pattern you know you just basically write a loop that will will run the thing you're interested in over",
    "start": "1820760",
    "end": "1826840"
  },
  {
    "text": "and over again and and the more complicated part is is setting up the test conditions but that that's the same for any any unit test it's just a unit",
    "start": "1826840",
    "end": "1834519"
  },
  {
    "text": "test where you can run the same thing over and over again and now and now you can you can really iterate right you can",
    "start": "1834519",
    "end": "1840320"
  },
  {
    "text": "start playing you can try something out run the Benchmark to go faster did it not you know try something else out",
    "start": "1840320",
    "end": "1846240"
  },
  {
    "text": "change one thing at a time that's another big uh big tip when you're uh",
    "start": "1846240",
    "end": "1851279"
  },
  {
    "text": "when you're excited you know you have all the ideas I'm going to code them all up it's going to go way faster but what do one at a time change",
    "start": "1851279",
    "end": "1859399"
  },
  {
    "text": "one thing measure again change one thing measure again that's the way to actually",
    "start": "1859399",
    "end": "1864559"
  },
  {
    "text": "figure out what's going on and sometimes changing that one thing May mean taking",
    "start": "1864559",
    "end": "1870039"
  },
  {
    "text": "it all the way into production to now to try and get a different hopefully",
    "start": "1870039",
    "end": "1875279"
  },
  {
    "text": "different outcome right yeah it could be I mean depends how good your benchmark is or or in some cases really really",
    "start": "1875279",
    "end": "1882240"
  },
  {
    "text": "hard to emulate the true production conditions there's also there's a bunch of things to watch out for like like you",
    "start": "1882240",
    "end": "1888200"
  },
  {
    "text": "know I was saying your your processor can do a billion things in a second so that's as long as you don't use more",
    "start": "1888200",
    "end": "1894120"
  },
  {
    "text": "than like a few tens of kilobytes of ram of memory of the minute you go up past",
    "start": "1894120",
    "end": "1899559"
  },
  {
    "text": "your L1 cache the whole thing is going to slow down by a factor of 10 and uh",
    "start": "1899559",
    "end": "1905679"
  },
  {
    "text": "you go past your L2 cache is going to slow down another factor of 10 so you need to be careful when you when you try",
    "start": "1905679",
    "end": "1911480"
  },
  {
    "text": "and recreate the problem in your benchmark that you don't make it too small you make it so small that it's",
    "start": "1911480",
    "end": "1916840"
  },
  {
    "text": "unnaturally fitting in the the really really tight cachee of the processor and um this is one of these",
    "start": "1916840",
    "end": "1923919"
  },
  {
    "text": "mechanical sympathy things right it's it's a huge amount of knowledge to to kind of learn about processor",
    "start": "1923919",
    "end": "1929600"
  },
  {
    "text": "architectures and and different layers of caching and so on I don't think everyone has to learn that but a little",
    "start": "1929600",
    "end": "1936120"
  },
  {
    "text": "bit of uh certainly just the the fact that you don't want your men you want your benchmark to be the realistic size",
    "start": "1936120",
    "end": "1943039"
  },
  {
    "text": "you don't want it to be so big it takes a day to run and you you don't want it to be so small that it's uh",
    "start": "1943039",
    "end": "1949399"
  },
  {
    "text": "unrealistically fast so speaking of of caching and memory right the the whole",
    "start": "1949399",
    "end": "1955880"
  },
  {
    "text": "notion sort of of optimizing for memory usage right that whole thing has its own",
    "start": "1955880",
    "end": "1961600"
  },
  {
    "text": "sort of a um lingo right you know the when I started first learning about you know heaps and stack and allocation and",
    "start": "1961600",
    "end": "1969000"
  },
  {
    "text": "these things and I was like okay how much of this do I have to worry about if I'm just going about writing my programs",
    "start": "1969000",
    "end": "1975200"
  },
  {
    "text": "and and like do I have to worry about declaring variables keeping them around go is garbage collected isn't it going",
    "start": "1975200",
    "end": "1981480"
  },
  {
    "text": "to just do like its magical thing like like what what are some of the Primitives right for having this",
    "start": "1981480",
    "end": "1988039"
  },
  {
    "text": "discussion around memory optimization can we have some definitions",
    "start": "1988039",
    "end": "1995440"
  },
  {
    "text": "no no in go docks it literally says you",
    "start": "1995440",
    "end": "2000559"
  },
  {
    "text": "don't need to know what's written to the stack versus the Heap like that's straight out of go like off of Go's",
    "start": "2000559",
    "end": "2006159"
  },
  {
    "text": "website that go.d and I've literally pulled that out and used it in slides and I'm like it",
    "start": "2006159",
    "end": "2012480"
  },
  {
    "text": "doesn't matter technically but I do think it does matter conceptually",
    "start": "2012480",
    "end": "2018120"
  },
  {
    "text": "because it helps you choose things like oh maybe I should use a pointer here",
    "start": "2018120",
    "end": "2024279"
  },
  {
    "text": "maybe I shouldn't use a pointer here it's good to know what types go is using a pointer behind the scenes for strings",
    "start": "2024279",
    "end": "2032519"
  },
  {
    "text": "for example always are using pointers behind the scenes so it's a lot easier",
    "start": "2032519",
    "end": "2037760"
  },
  {
    "text": "easier to share strings around than it might be to share you know a slice of bites or some weird things but most of",
    "start": "2037760",
    "end": "2045120"
  },
  {
    "text": "the time it won't matter if the garbage collector is going to clean it up but",
    "start": "2045120",
    "end": "2050560"
  },
  {
    "text": "when I do think it does matter again is when you do something stupid to stop the",
    "start": "2050560",
    "end": "2056839"
  },
  {
    "text": "garbage collector which people do all the time and then the other time it does",
    "start": "2056839",
    "end": "2062480"
  },
  {
    "text": "matter is when I think you see people starting to bring in patterns from other",
    "start": "2062480",
    "end": "2068200"
  },
  {
    "text": "languages we joke about the Java go developers all the time and there are things that they bring in that may make",
    "start": "2068200",
    "end": "2075200"
  },
  {
    "text": "the code work better on the jvm but it doesn't work with Go's compiler or Go's",
    "start": "2075200",
    "end": "2080878"
  },
  {
    "text": "typing system right a bill Kennedy's I I bought his notebook a long time the the ultimate go notebook and it's like my",
    "start": "2080879",
    "end": "2087040"
  },
  {
    "text": "favorite go book because it has all the weird tips I don't want but one of the things he like has and Bal is don't use",
    "start": "2087040",
    "end": "2093480"
  },
  {
    "text": "Getters and Setters and every time I say that everybody who's ever worked a job is like why I'm like why why we need",
    "start": "2093480",
    "end": "2099960"
  },
  {
    "text": "this I'm like there are times when you want to use them right like if you have something that is a private meth you",
    "start": "2099960",
    "end": "2105960"
  },
  {
    "text": "know you have a method to access a private type yeah that's a good use case for a getter and Setter but you have to",
    "start": "2105960",
    "end": "2112160"
  },
  {
    "text": "if it's public the go compiler can inline any call you make to that and",
    "start": "2112160",
    "end": "2117640"
  },
  {
    "text": "optimize it for you as opposed to if you had made a function that is then adding more btes to your stack that is doing",
    "start": "2117640",
    "end": "2124880"
  },
  {
    "text": "this that and the other like every function's going to take more memory onto your stack and it's going to require another call through the",
    "start": "2124880",
    "end": "2131160"
  },
  {
    "text": "interface to do all of these things and go can only in the compiler is supposed",
    "start": "2131160",
    "end": "2136599"
  },
  {
    "text": "to be fast so it's only inlining so much before it's like this is breaking the threshold of speed and compilation so",
    "start": "2136599",
    "end": "2143680"
  },
  {
    "text": "we're supposed to be build and go in a certain way according to these idioms that help the compiler make it faster",
    "start": "2143680",
    "end": "2150280"
  },
  {
    "text": "and so those are the kinds of things that I think yeah it doesn't matter but if we know those things then we start to",
    "start": "2150280",
    "end": "2156480"
  },
  {
    "text": "understand why the idioms are the way they are and why this is good code versus what we say is bad code or Java",
    "start": "2156480",
    "end": "2163280"
  },
  {
    "text": "code not that Java is bad it's just that writing Java like code in go might make",
    "start": "2163280",
    "end": "2169560"
  },
  {
    "text": "or in my does make a less efficient system because it's a different compiler it's a different system different typing",
    "start": "2169560",
    "end": "2176119"
  },
  {
    "text": "s signature so it's like so that's again it doesn't matter but it can help us",
    "start": "2176119",
    "end": "2182440"
  },
  {
    "text": "make better code I feel like we should call that like compiler sympathy or something like that yeah",
    "start": "2182440",
    "end": "2188680"
  },
  {
    "text": "I think um it's worth trying to understand uh those two things that the",
    "start": "2188680",
    "end": "2193760"
  },
  {
    "text": "the stack and the Heap are fundamentally about about lifetime so when if you",
    "start": "2193760",
    "end": "2199040"
  },
  {
    "text": "enter a piece of code a function and you have some data the data only lives as",
    "start": "2199040",
    "end": "2204839"
  },
  {
    "text": "long as that function then the the go system as a whole it's it's really the",
    "start": "2204839",
    "end": "2210440"
  },
  {
    "text": "the compiler and runtime work together for for memory management so if if the lifetime of your data is is within a",
    "start": "2210440",
    "end": "2218319"
  },
  {
    "text": "function uh the compiler can clean it up really quickly uh and that's the idea of a stack we just every time we call a",
    "start": "2218319",
    "end": "2225240"
  },
  {
    "text": "function where just its data kind of piles on top of whatever we were using before piles up in a stack and when we",
    "start": "2225240",
    "end": "2232200"
  },
  {
    "text": "leave that function we can clear it all out it's just basically subtracting a a",
    "start": "2232200",
    "end": "2237440"
  },
  {
    "text": "number the Heap on the other hand is where anything goes where we don't know",
    "start": "2237440",
    "end": "2242599"
  },
  {
    "text": "the lifetime so what happens then is the things that you're still using and the",
    "start": "2242599",
    "end": "2248520"
  },
  {
    "text": "things that you don't need are all on the Heap and the things you don't need anymore the things you you actually no",
    "start": "2248520",
    "end": "2254480"
  },
  {
    "text": "longer have a reference to that's the garbage but it just piles you know the way the system works it just lets it all",
    "start": "2254480",
    "end": "2260960"
  },
  {
    "text": "pile up until a certain point when it does garbage collection and that that is",
    "start": "2260960",
    "end": "2267240"
  },
  {
    "text": "the performance thing really that that so what is garbage collection when the",
    "start": "2267240",
    "end": "2273000"
  },
  {
    "text": "go run time starts garbage collection it starts from the places in your program",
    "start": "2273000",
    "end": "2278880"
  },
  {
    "text": "that can access data so that's that's all your Global variables all the",
    "start": "2278880",
    "end": "2284240"
  },
  {
    "text": "pointers on your local variables things like that it makes a list of those and",
    "start": "2284240",
    "end": "2289680"
  },
  {
    "text": "it says okay what is what does this pointer visit what do it what do it okay that thing's you that thing's needed I",
    "start": "2289680",
    "end": "2295599"
  },
  {
    "text": "can still access that does it have any pointers okay I'm going to visit every one of them and that that data is needed",
    "start": "2295599",
    "end": "2302960"
  },
  {
    "text": "and when I got there does it have any pointers it's an enormously you know in a in a big program well any size of",
    "start": "2302960",
    "end": "2310160"
  },
  {
    "text": "program really but it's a lot of work it's a lot of work to follow all of those pointers and that's the thing",
    "start": "2310160",
    "end": "2316560"
  },
  {
    "text": "that's going to slow you down and I mean that's why we talk about memory being important in go for performance what",
    "start": "2316560",
    "end": "2323280"
  },
  {
    "text": "drives the cost of garbage collection is two things first of all how many pointers have you got and that's",
    "start": "2323280",
    "end": "2328560"
  },
  {
    "text": "basically a function of how big is your the heat the memory you actually need so if you if your whole program runs in 16k",
    "start": "2328560",
    "end": "2335960"
  },
  {
    "text": "then that's not very many pointers my programs tend to run in a couple of gigabytes you know so there's there's",
    "start": "2335960",
    "end": "2342280"
  },
  {
    "text": "hundreds of thousands millions of pointers and they take a they take an appreciable amount of time to follow all",
    "start": "2342280",
    "end": "2348280"
  },
  {
    "text": "the pointers so the the number of pointers which is basically a function of of how big your HEAP is is one factor",
    "start": "2348280",
    "end": "2355119"
  },
  {
    "text": "and then how fast are you leaving stuff lying around how fast are you generating new garbage those two things multipli",
    "start": "2355119",
    "end": "2361960"
  },
  {
    "text": "together give you give you the cost of garbage collection so those and both of those things are driven by how much",
    "start": "2361960",
    "end": "2367040"
  },
  {
    "text": "memory you're using the first one is how much memory do you need are you actually using and the second one is how much",
    "start": "2367040",
    "end": "2373040"
  },
  {
    "text": "garbage do you create and throw away and every time that cleanup runs right the",
    "start": "2373040",
    "end": "2379000"
  },
  {
    "text": "your program effectively stopped garbage garbage collection is a Stop The World",
    "start": "2379000",
    "end": "2384800"
  },
  {
    "text": "operation yes but I've never had it be noticeable it doesn't stop the runtime",
    "start": "2384800",
    "end": "2390119"
  },
  {
    "text": "right not since go 1.5 uh there there are two phases to garbage collection the",
    "start": "2390119",
    "end": "2395880"
  },
  {
    "text": "the mark uh operation it's called Mark and sweep the Mark is the one I was",
    "start": "2395880",
    "end": "2400960"
  },
  {
    "text": "going on about where we follow all the pointers that can carry on concurrently",
    "start": "2400960",
    "end": "2406400"
  },
  {
    "text": "let's use that word again in parallel with I don't know which one is which hopefully we'll get people tweeting at",
    "start": "2406400",
    "end": "2412599"
  },
  {
    "text": "us about this probably concurrently cuz it would get mad if it hits a lot so I agree concurrently so the the the mark",
    "start": "2412599",
    "end": "2420119"
  },
  {
    "text": "phase can and will proceed in at the same time as all the rest of your",
    "start": "2420119",
    "end": "2425599"
  },
  {
    "text": "program when we're done mark when we know which memory we need and which memory we don't need is the sweep phase",
    "start": "2425599",
    "end": "2432319"
  },
  {
    "text": "where we basically take all the garbage and turn it into free memory that's a Stop The World operation but it's really",
    "start": "2432319",
    "end": "2438680"
  },
  {
    "text": "really short that's that's micros seconds whereas for for a gigabite Heap",
    "start": "2438680",
    "end": "2444480"
  },
  {
    "text": "the the mark operation can run into seconds I'm going to steal that explanation now I've always explained",
    "start": "2444480",
    "end": "2450800"
  },
  {
    "text": "garbage collection as only that sweep phase I always I always say it's the",
    "start": "2450800",
    "end": "2456480"
  },
  {
    "text": "marking for garbage collection which happens in parallel and then garbage collection I'm now going to change the terms whether that's more or less",
    "start": "2456480",
    "end": "2463280"
  },
  {
    "text": "confusing I don't know but it is more correct and that's what matters yeah so",
    "start": "2463280",
    "end": "2469000"
  },
  {
    "text": "thank you Brian for teaching me today yeah my pleasure so before roundabout go 1.5 the whole thing was",
    "start": "2469000",
    "end": "2476160"
  },
  {
    "text": "stop the world and and people were quite upset about that but it's now runs in",
    "start": "2476160",
    "end": "2481920"
  },
  {
    "text": "parallel and you can actually see it on your profile on your CPU profile you will see",
    "start": "2481920",
    "end": "2487839"
  },
  {
    "text": "the garbage collector running it's got uh kind of funky names it doesn't just sort of say garbage collector in in big",
    "start": "2487839",
    "end": "2493720"
  },
  {
    "text": "letters but um their functions like um what is it Malo GC usually they have GC",
    "start": "2493720",
    "end": "2501040"
  },
  {
    "text": "in the in the name somewhere that that you can look for in your CPU profile but",
    "start": "2501040",
    "end": "2506280"
  },
  {
    "text": "I I at the risk of getting really complicated it's not just the time to do",
    "start": "2506280",
    "end": "2511680"
  },
  {
    "text": "the marking and sweeping that you need to worry about because this whole process of trolling through all of",
    "start": "2511680",
    "end": "2518400"
  },
  {
    "text": "memory is going to kick things out of your CPU cache you know I was saying the",
    "start": "2518400",
    "end": "2523520"
  },
  {
    "text": "the little bit in the right in the middle of your CPU that is the only bit that goes at top speed the process of of",
    "start": "2523520",
    "end": "2529599"
  },
  {
    "text": "marking of scanning all of your data to figure out which bits you're needing and which bits you don't that kicks things",
    "start": "2529599",
    "end": "2535240"
  },
  {
    "text": "out of the cache because it it kind of goes and visits everything so garbage collection is slowing down all of the",
    "start": "2535240",
    "end": "2541720"
  },
  {
    "text": "rest of your program beyond what shows up as garbage collection in the in the profile I mean I put it another way if",
    "start": "2541720",
    "end": "2548800"
  },
  {
    "text": "if you if you measure if you look at your profile and you decide garbage collection is like 20% of your your",
    "start": "2548800",
    "end": "2554880"
  },
  {
    "text": "whole CPU and then you half the amount of garbage collection I would expect your program to go 40% faster because",
    "start": "2554880",
    "end": "2562440"
  },
  {
    "text": "you know it's it's like a multiple of what it what you can see in the measurement take that and double it that",
    "start": "2562440",
    "end": "2568040"
  },
  {
    "text": "kind of factor so as a programmer so the I could take Mariah's approach and",
    "start": "2568040",
    "end": "2574559"
  },
  {
    "text": "basically say you know what it doesn't matter if I'm using well I'm not sure if what I'm going to paraphrase correct me if I'm wrong Mar",
    "start": "2574559",
    "end": "2580839"
  },
  {
    "text": "you can call me out if if if I if I get it wrong but you're saying don't worry so much about you know whether you're",
    "start": "2580839",
    "end": "2585880"
  },
  {
    "text": "using a pointer here or or value there or something you know like let the let the GC worry about those things or",
    "start": "2585880",
    "end": "2592079"
  },
  {
    "text": "perhaps write your program get it working and then worry about whether you know you've get you've got some some",
    "start": "2592079",
    "end": "2598160"
  },
  {
    "text": "escaping you know memory from calling functions or anything like that like how much should I should you be paying",
    "start": "2598160",
    "end": "2604520"
  },
  {
    "text": "attention to the lifetime as Brian put said the lifetime of your allocations",
    "start": "2604520",
    "end": "2610640"
  },
  {
    "text": "right like what what is the impact of that how should you be going about it right so I still get people say Well",
    "start": "2610640",
    "end": "2615760"
  },
  {
    "text": "when should I use a pointer or when should I pass by value right like like when when what do I do when does it",
    "start": "2615760",
    "end": "2621720"
  },
  {
    "text": "matter from a performance standpoint is it about the semantics do should I do I",
    "start": "2621720",
    "end": "2627040"
  },
  {
    "text": "want to return nil instead of returning a zero value for something like what's the what how should I go about this I",
    "start": "2627040",
    "end": "2633040"
  },
  {
    "text": "always say my my I guess what I like best practices I'm is like default to",
    "start": "2633040",
    "end": "2638559"
  },
  {
    "text": "not using a pointer and these are the cases where it's just the exception to that rule one of them is like oh you're",
    "start": "2638559",
    "end": "2644760"
  },
  {
    "text": "using an interface that you have to you know so you have to have a type that implements that interface those are the",
    "start": "2644760",
    "end": "2652119"
  },
  {
    "text": "kinds of things like I don't know I start to get really picky about writing good software versus writing good go if",
    "start": "2652119",
    "end": "2659280"
  },
  {
    "text": "it starts to matter so much if you get to the point where the types you use",
    "start": "2659280",
    "end": "2664319"
  },
  {
    "text": "matter to the point that it's affecting your garbage collections speed maybe go isn't the right choice of language for",
    "start": "2664319",
    "end": "2670119"
  },
  {
    "text": "you go use rust that doesn't have a garbage collector and makes you think about that I don't want to run into that",
    "start": "2670119",
    "end": "2676200"
  },
  {
    "text": "problem I use go and I say garbage collector help me I'm going to default I'm going to not use pointers until the",
    "start": "2676200",
    "end": "2682960"
  },
  {
    "text": "point where the point like until I hit that point where the pointer makes sense I'm going to use slices until the point",
    "start": "2682960",
    "end": "2688400"
  },
  {
    "text": "where the array makes sense I'm going you know those are just the kinds of things go I don't know I feel like go",
    "start": "2688400",
    "end": "2695480"
  },
  {
    "text": "was built to abstract a lot of that lowl stuff away on purpose and when we hit",
    "start": "2695480",
    "end": "2701240"
  },
  {
    "text": "the point where we need that knowledge I don't know if goes I'm probably being",
    "start": "2701240",
    "end": "2706480"
  },
  {
    "text": "like you know a little bit contrarian here but I just like use go for what it's good at and go is good at being a",
    "start": "2706480",
    "end": "2713079"
  },
  {
    "text": "very simple language that does a lot for you I'm not you should still know how it",
    "start": "2713079",
    "end": "2718119"
  },
  {
    "text": "works still use peov still do your benchmarking still know how things work and write good go good performant go but",
    "start": "2718119",
    "end": "2725920"
  },
  {
    "text": "once you get past that that point maybe you should look at a rust I don't know",
    "start": "2725920",
    "end": "2731400"
  },
  {
    "text": "like I again I've never hit that point I still am living in goand so that's just",
    "start": "2731400",
    "end": "2737240"
  },
  {
    "text": "my thought but we we went through that whole era I'm sure you all remember the era we went through in the go Community",
    "start": "2737240",
    "end": "2742440"
  },
  {
    "text": "where we were sort of a um we were all anti- allocation I can't tell you how many benchmarks I saw around HTTP",
    "start": "2742440",
    "end": "2750119"
  },
  {
    "text": "routers alone right about oh this one is zero allocation this this one has no I",
    "start": "2750119",
    "end": "2756200"
  },
  {
    "text": "mean we went that phase but then why do we have a garbage collector that's I don't know I just write good go and good",
    "start": "2756200",
    "end": "2764040"
  },
  {
    "text": "go uses the tools provided in the go i' I've got a I've got an example go ahead",
    "start": "2764040",
    "end": "2769359"
  },
  {
    "text": "Brian you done more than me hopefully hopefully more hopefully neutral on this",
    "start": "2769359",
    "end": "2774640"
  },
  {
    "text": "if it's it's a pattern a lot of people will I'm not trying to draw lines in the sand I'm just saying that's you know",
    "start": "2774640",
    "end": "2781480"
  },
  {
    "text": "just my experience go ahead Brian but so imagine you've decided in your program you're going to make a slice and you're",
    "start": "2781480",
    "end": "2787760"
  },
  {
    "text": "going to put some things in it and it's very nice in in go you you can say aend",
    "start": "2787760",
    "end": "2794160"
  },
  {
    "text": "right so there's basically two ways to do this one one is to start with a completely empty slice and just a pen to",
    "start": "2794160",
    "end": "2800800"
  },
  {
    "text": "it let's say you're going to add put a 100 things in a slice so you you go pend aend aend aend aend and um under the",
    "start": "2800800",
    "end": "2808559"
  },
  {
    "text": "covers what's going to happen is the it starts up with no memory allocated if there's nothing in the slice there's",
    "start": "2808559",
    "end": "2813720"
  },
  {
    "text": "there's nothing allocated and you you put something in so allocates one one spot and then you put another one in it",
    "start": "2813720",
    "end": "2819680"
  },
  {
    "text": "says okay not enough room this time I'm going to make some more and I I don't want to get into the specifics but let's say next time it it makes room for three",
    "start": "2819680",
    "end": "2826480"
  },
  {
    "text": "and then you fill those up and it's going to make room for eight don't worry about the numbers the point is all of",
    "start": "2826480",
    "end": "2833480"
  },
  {
    "text": "those smaller slices that we don't want anymore are garbage and if we knew we we",
    "start": "2833480",
    "end": "2840359"
  },
  {
    "text": "were going to put 100 in the slice we can make one call at the beginning say make the slice with room for 100 and",
    "start": "2840359",
    "end": "2848480"
  },
  {
    "text": "there's going to be zero garbage in just in in terms of this append operation so I think that's that's that's hopefully",
    "start": "2848480",
    "end": "2854960"
  },
  {
    "text": "easy enough to understand on a on an audio only medium but there there are some really simple patterns like",
    "start": "2854960",
    "end": "2861720"
  },
  {
    "text": "pre-allocate your data structures to a decent size so if you if you know there's going to be 100 things in it",
    "start": "2861720",
    "end": "2867079"
  },
  {
    "text": "make it 100 if you know it's roughly 100 make it 120 something like that because",
    "start": "2867079",
    "end": "2872400"
  },
  {
    "text": "the the cost of even one throwaway memory allocation is is going to be more",
    "start": "2872400",
    "end": "2879000"
  },
  {
    "text": "than than you know 10 or 20% of extra Surplus space if you don't know whether",
    "start": "2879000",
    "end": "2884559"
  },
  {
    "text": "it's a 100 or a million then then sure you you know you have to go through some amount of wastage but try and get close",
    "start": "2884559",
    "end": "2890760"
  },
  {
    "text": "to the right size and error on the on the high side and and you know that that's G to that's going to save you",
    "start": "2890760",
    "end": "2896880"
  },
  {
    "text": "some performance there's there's a bunch of things like that I agree I think and that's an example of writing good go I",
    "start": "2896880",
    "end": "2903319"
  },
  {
    "text": "think that that's exactly how you should handle you know if you can predict if you're going to say I know this I know",
    "start": "2903319",
    "end": "2909640"
  },
  {
    "text": "how this is supposed to behave you should always be say yeah I want this to be this many allocated spaces because",
    "start": "2909640",
    "end": "2916720"
  },
  {
    "text": "yeah I agree it's a slices are are fun under the hood so yeah they they come",
    "start": "2916720",
    "end": "2922920"
  },
  {
    "text": "they come at a small cost generally small but uh there is a yeah it's it's a great piece of advice um and along those",
    "start": "2922920",
    "end": "2929480"
  },
  {
    "text": "lines as we start to wrap up like is there any other sort of obvious things",
    "start": "2929480",
    "end": "2934720"
  },
  {
    "text": "that as a go programmer who's not NE trying to do some premature optimization but sort of your day-to-day the",
    "start": "2934720",
    "end": "2940680"
  },
  {
    "text": "pre-allocation if you know the size of an array of a slice you're going to need ahead of time make it that the",
    "start": "2940680",
    "end": "2945880"
  },
  {
    "text": "allocation of that size right that seems like an obvious thing that I you know not necessarily in the spirit of optimization but of writing good go as",
    "start": "2945880",
    "end": "2951640"
  },
  {
    "text": "you're say Mariah other things other obvious things like that we we can uh we can sort of recommend as a best practice",
    "start": "2951640",
    "end": "2958079"
  },
  {
    "text": "well Maps work the same way slice slices and maps you can make them with a size",
    "start": "2958079",
    "end": "2963359"
  },
  {
    "text": "and uh maps are a lot more complicated but same basic Bic principle if you know there's going to be a thousand things in",
    "start": "2963359",
    "end": "2969319"
  },
  {
    "text": "there tell the runtime when you make it to leave room for a thousand and it's all going to work a lot better A lot of",
    "start": "2969319",
    "end": "2975799"
  },
  {
    "text": "the tricks for saving memory allocation are are obscure unfortunately the once",
    "start": "2975799",
    "end": "2982119"
  },
  {
    "text": "you get by Beyond ones like that that you know calling make at the top of your Loop designing interfaces don't you know",
    "start": "2982119",
    "end": "2989960"
  },
  {
    "text": "when you when you call into something that's going to give you back a slice it can be nice if you if you can pass the",
    "start": "2989960",
    "end": "2996839"
  },
  {
    "text": "destination in because you might you know you might have one you might have a slice the right size to pass in and",
    "start": "2996839",
    "end": "3002599"
  },
  {
    "text": "there's a few apis like that in in the go standard library but it it does complicate things I was going to say uh",
    "start": "3002599",
    "end": "3010400"
  },
  {
    "text": "you know make it make it elegant if you can before you start making it fast and",
    "start": "3010400",
    "end": "3016240"
  },
  {
    "text": "and really only only break that rule of make it elegant when you really really",
    "start": "3016240",
    "end": "3021400"
  },
  {
    "text": "need to usually elegant code does go fast anyway but um I really don't want",
    "start": "3021400",
    "end": "3026760"
  },
  {
    "text": "want people to to kind of start bending their programs out of shape just because they think it's going to save a few bites or save a few",
    "start": "3026760",
    "end": "3033760"
  },
  {
    "text": "nanocs look for the 8020 rule right most usually most of the time is in one place",
    "start": "3033760",
    "end": "3040200"
  },
  {
    "text": "or a few places and yeah you may you may need to get a little Trixie in those places I would say most of my tips are",
    "start": "3040200",
    "end": "3049559"
  },
  {
    "text": "pretty self-explanatory follow the idioms be careful with your pointers I agree don't I say don't use them until",
    "start": "3049559",
    "end": "3056040"
  },
  {
    "text": "you need them places you need them are obv I think Brian gave a great point if you're going to be populating something",
    "start": "3056040",
    "end": "3063280"
  },
  {
    "text": "and you basically you need to manipulate the data in something and change it it's much better to pass in the pointer and",
    "start": "3063280",
    "end": "3070119"
  },
  {
    "text": "manipulate the data inside that object than it is to pass something in and return something else so you know those",
    "start": "3070119",
    "end": "3076119"
  },
  {
    "text": "are the kinds of things that I think are good go but I would say especially if you're new I would get a really good",
    "start": "3076119",
    "end": "3082960"
  },
  {
    "text": "linter and all of good linters have things like did you you close the SQL connection did you close your HTTP",
    "start": "3082960",
    "end": "3089680"
  },
  {
    "text": "connection did you close your file connection cuz those are the things that I forget that lead to memory problems",
    "start": "3089680",
    "end": "3097280"
  },
  {
    "text": "and so like and they're pretty simple it's it they don't always get caught in code reviews either so uh linters",
    "start": "3097280",
    "end": "3105319"
  },
  {
    "text": "especially if you get really strict on them can help you make that nice code",
    "start": "3105319",
    "end": "3111000"
  },
  {
    "text": "good go code that will prevent I think a lot of stupid memory stuff or stupid CPU",
    "start": "3111000",
    "end": "3117240"
  },
  {
    "text": "stuff and then when it matters it's a real problem and not just somebody",
    "start": "3117240",
    "end": "3122960"
  },
  {
    "text": "forgetting to close their file you know that those are the kinds of things that I think everybody should start with and",
    "start": "3122960",
    "end": "3129839"
  },
  {
    "text": "then move on from there anyway it saves my bottom a couple times nice anything to addan before we go to unpop I I think",
    "start": "3129839",
    "end": "3138200"
  },
  {
    "text": "the way I think about optimization at least early on is just do less work",
    "start": "3138200",
    "end": "3143640"
  },
  {
    "text": "right so the idea there is like if you're going to use a regular expression right compile that once reuse it right",
    "start": "3143640",
    "end": "3150720"
  },
  {
    "text": "if you're going to use a template compile that once reuse it I see it all the time where like a regular expression is defined in a Handler and they it gets",
    "start": "3150720",
    "end": "3158880"
  },
  {
    "text": "compiled every single time so like even before you profile or Benchmark if you",
    "start": "3158880",
    "end": "3164920"
  },
  {
    "text": "see things where you're doing a lot of work you don't need that's the very bottom of the fruit right do less",
    "start": "3164920",
    "end": "3172230"
  },
  {
    "text": "[Music] work",
    "start": "3172230",
    "end": "3178440"
  },
  {
    "text": "I actually think she probably [Music]",
    "start": "3178520",
    "end": "3191240"
  },
  {
    "text": "leave all right let me hear it lay it on me who's got an on pop I'll go first",
    "start": "3191240",
    "end": "3197799"
  },
  {
    "text": "please I have two the first one is oh chocolate is gross because I don't like",
    "start": "3197799",
    "end": "3203440"
  },
  {
    "text": "chocolate um okay the second one I I may have hinted at",
    "start": "3203440",
    "end": "3209280"
  },
  {
    "text": "this earlier I think python is a bad language for data engineering I think it's a great language for data analyst",
    "start": "3209280",
    "end": "3215920"
  },
  {
    "text": "like data analysis or data science but for data engineering itself python is a",
    "start": "3215920",
    "end": "3222160"
  },
  {
    "text": "slow bloated language that just wraps other languages so why are we using Python and not the languages underneath",
    "start": "3222160",
    "end": "3228880"
  },
  {
    "text": "and people have already fought me on this so I know it's unpopular no in a",
    "start": "3228880",
    "end": "3235440"
  },
  {
    "text": "way wow spicy I like want that to be true",
    "start": "3235440",
    "end": "3240520"
  },
  {
    "text": "want it is true we we this was an unpopular facts",
    "start": "3240520",
    "end": "3246200"
  },
  {
    "text": "sorry like I I work and go all day every day right and then for the data stuff I",
    "start": "3246200",
    "end": "3251400"
  },
  {
    "text": "have to pop into Python and remember how all that works and like so I would love",
    "start": "3251400",
    "end": "3256440"
  },
  {
    "text": "to not do that but like the infrastructure all of that it's just so much work to do it anywhere else and",
    "start": "3256440",
    "end": "3261640"
  },
  {
    "text": "then the other thing where you see python a lot is python sometimes the python SD isn't actually doing code it's",
    "start": "3261640",
    "end": "3268240"
  },
  {
    "text": "just setting up a different service and I'm like we've already solved this config thing isn't that why we do",
    "start": "3268240",
    "end": "3273960"
  },
  {
    "text": "everything in yaml in in your devops world is because that's much better for configs than python like so anyway I",
    "start": "3273960",
    "end": "3282200"
  },
  {
    "text": "just don't python just doesn't make sense in data Engineering in my opinion well we shall see how much um Flack you",
    "start": "3282200",
    "end": "3289000"
  },
  {
    "text": "get for that one when we pull out the we'll see how many data Engineers listen to this podcast that's what we'll see oh",
    "start": "3289000",
    "end": "3294640"
  },
  {
    "text": "we might we yeah might actually get a your audience from this unpopular",
    "start": "3294640",
    "end": "3300559"
  },
  {
    "text": "opinion how about you Brian you got something for me yeah it's a lot more Niche than chocolate so my my unpopular",
    "start": "3300559",
    "end": "3308280"
  },
  {
    "text": "opinion is in within the Prometheus query language promql so I don't know",
    "start": "3308280",
    "end": "3314440"
  },
  {
    "text": "whether whether any of you are familiar with that oh I am there's there's a couple of similar functions rate and I",
    "start": "3314440",
    "end": "3321319"
  },
  {
    "text": "rate and so my opinion is never use IR rate tell tell us why well so the",
    "start": "3321319",
    "end": "3329079"
  },
  {
    "text": "difference is rate you give it you give it a window right how long are you looking over and basically as you zoom",
    "start": "3329079",
    "end": "3335359"
  },
  {
    "text": "out you're going to look over a bigger window so you're you're zoomed in you're you're looking at the rate over one",
    "start": "3335359",
    "end": "3341400"
  },
  {
    "text": "minute say uh and then you zoom out it's five minutes and you zoom out a lot it's an hour maybe iate only considers the",
    "start": "3341400",
    "end": "3350559"
  },
  {
    "text": "last two points in the window so that's why you should never use it because as",
    "start": "3350559",
    "end": "3355720"
  },
  {
    "text": "as you zoom out it's discarding more and more and more of your data it gives the",
    "start": "3355720",
    "end": "3361079"
  },
  {
    "text": "strong possibility you're going to get artifacts you know suppose suppose you're looking at five minute window",
    "start": "3361079",
    "end": "3367760"
  },
  {
    "text": "you're only looking at the last two points in every five minutes suppose you've got a big spike that happens every five minutes it's going to look",
    "start": "3367760",
    "end": "3373599"
  },
  {
    "text": "like the thing is just solid right so yeah it's I mean it's it's has its uses",
    "start": "3373599",
    "end": "3379839"
  },
  {
    "text": "but there are so few and far between you have to be so much of an expert in",
    "start": "3379839",
    "end": "3385799"
  },
  {
    "text": "exactly what's going on that I just say never never use irate actually kind of",
    "start": "3385799",
    "end": "3390880"
  },
  {
    "text": "makes sense to me so I'm not sure how unpopular that will be but you know I'm sure there are a couple out there uh who",
    "start": "3390880",
    "end": "3396039"
  },
  {
    "text": "think it it will be unpopular yeah it gets used such a lot i' comes I come across it in all kinds of other people's",
    "start": "3396039",
    "end": "3402559"
  },
  {
    "text": "dashboards and so on so I'm what does the I stand for uh I think it's instantaneous that sounds like it's a",
    "start": "3402559",
    "end": "3408559"
  },
  {
    "text": "very specific use case kind of tool yeah I think people like it because it it makes your charts cuz the rate because",
    "start": "3408559",
    "end": "3415400"
  },
  {
    "text": "you the rate kind of Smooths things out as you zoom out and Ira is leaves spikes",
    "start": "3415400",
    "end": "3421359"
  },
  {
    "text": "in the data it's more kind of energetic and it's more going on if you use IR so",
    "start": "3421359",
    "end": "3426520"
  },
  {
    "text": "I think this might be purely a result of how you consume and visualize the data",
    "start": "3426520",
    "end": "3432039"
  },
  {
    "text": "yeah interesting cool um I have one to take us home so not sure if y'all know but",
    "start": "3432039",
    "end": "3439319"
  },
  {
    "text": "recently Apple came out with a interesting piece of Open Source which",
    "start": "3439319",
    "end": "3444520"
  },
  {
    "text": "that's not something I say very often Apple open source like that's not something you hear very often but they recently came out with a you know with a",
    "start": "3444520",
    "end": "3450400"
  },
  {
    "text": "piece of Open Source uh um um software that that I actually am finding to be",
    "start": "3450400",
    "end": "3456079"
  },
  {
    "text": "interesting so they came out with this uh configuration programming language",
    "start": "3456079",
    "end": "3461319"
  },
  {
    "text": "thing called pickle pkl and there I say pickle is better than Json and yaml put",
    "start": "3461319",
    "end": "3469280"
  },
  {
    "text": "together whoa mhm how's they compareed to q that was going to be my question",
    "start": "3469280",
    "end": "3474880"
  },
  {
    "text": "you know that's the first that's the that's the first comparison I made in my mind I'm like h q Lang so I I'm going to",
    "start": "3474880",
    "end": "3482640"
  },
  {
    "text": "compare those two and report back um matter of fact I'm actually trying to put the episode together with the um",
    "start": "3482640",
    "end": "3489720"
  },
  {
    "text": "core contributors from from Q maybe I'll also ask them when they come on the show I say hey you know now you've got uh uh",
    "start": "3489720",
    "end": "3496920"
  },
  {
    "text": "uh seemingly some some competition um if you know I think they're trying to solve",
    "start": "3496920",
    "end": "3502520"
  },
  {
    "text": "um maybe there's some more Nuance to to Kang but they seemed they could potentially be solving they could have",
    "start": "3502520",
    "end": "3509400"
  },
  {
    "text": "an overlap in the kind of problems they're solving um so yeah I need to dive a little deeper but I watched a video on it I read some of the",
    "start": "3509400",
    "end": "3516280"
  },
  {
    "text": "documentation I'm like you know what this is this actually makes sense this actually makes sense in the same way I'm like when I was looking at Q I'm like",
    "start": "3516280",
    "end": "3521839"
  },
  {
    "text": "you know what this actually makes sense so so we shall see where we land on that but uh yeah that's that's my un pop",
    "start": "3521839",
    "end": "3528079"
  },
  {
    "text": "we'll see how well that goes awesome so Ian do you have something no no",
    "start": "3528079",
    "end": "3537680"
  },
  {
    "text": "he's just mailing it in today fine fine fine all right well let me take us",
    "start": "3537680",
    "end": "3542720"
  },
  {
    "text": "home all right that is go time for this week thanks for listening don't forget",
    "start": "3542720",
    "end": "3548520"
  },
  {
    "text": "to check out our reboot of the much beloved shipit podcast new hosts same",
    "start": "3548520",
    "end": "3554359"
  },
  {
    "text": "change loggy goodness give it a listen at ship it. show or search for ship it",
    "start": "3554359",
    "end": "3559520"
  },
  {
    "text": "wherever you get your podcasts thanks once again to our friends at fly.io to",
    "start": "3559520",
    "end": "3564960"
  },
  {
    "text": "breakmaster cylinder for beat freaking for us and to sentry.io save a 100 bucks",
    "start": "3564960",
    "end": "3570200"
  },
  {
    "text": "off their team plan by using Code Chang log when you sign up that's all for now",
    "start": "3570200",
    "end": "3575599"
  },
  {
    "text": "but we'll talk to you again next time on go [Music]",
    "start": "3575599",
    "end": "3587159"
  },
  {
    "text": "time k",
    "start": "3595039",
    "end": "3601799"
  }
]