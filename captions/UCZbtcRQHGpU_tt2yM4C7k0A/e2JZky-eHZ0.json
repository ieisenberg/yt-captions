[
  {
    "text": "okay right so okay that is quite unpopular to not give an opinion and in the spirit of Q that's",
    "start": "359",
    "end": "7080"
  },
  {
    "text": "quite meta as well you sort of you know I trimmed my unpopular opinion",
    "start": "7080",
    "end": "12839"
  },
  {
    "text": "yeah that's a q joke isn't it it is yeah yeah yeah I don't get it yet but I'm going to learn q and then I'm going to",
    "start": "12839",
    "end": "18720"
  },
  {
    "text": "come back and listen I'm going to be I'm going to be loving that b with for change log is provided",
    "start": "18720",
    "end": "25080"
  },
  {
    "text": "by fastly learn more at fastly.com our feature flags are powered by launch",
    "start": "25080",
    "end": "30240"
  },
  {
    "text": "Darkly check them out at launch dark.com and we're hosted on Leno Cloud servers get $100 in hosting credit at lin.com",
    "start": "30240",
    "end": "37559"
  },
  {
    "text": "change log what's up Gophers this episode is brought to you by kodish a podcast from the team at Heroku",
    "start": "37559",
    "end": "44320"
  },
  {
    "text": "exploring code technology tools tips and develop your life there's a ton of great episodes on the cish podcast so I'd",
    "start": "44320",
    "end": "50360"
  },
  {
    "text": "encourage you to check it out and subscribe but in particular I want to bring to your attention the recent episode featuring Cornelia Davis the C2",
    "start": "50360",
    "end": "56640"
  },
  {
    "text": "of we Works talking about Cloud native Cloud native patterns and what what it really means to be a cloud native",
    "start": "56640",
    "end": "61920"
  },
  {
    "text": "application here's a sneak peek can you define get Ops maybe give a formal definition and and talk about what some",
    "start": "61920",
    "end": "68159"
  },
  {
    "text": "of the implications are I think that the simplest formal definition actually doesn't involve the word get at all it",
    "start": "68159",
    "end": "75880"
  },
  {
    "text": "is cloud native operations is the way that I think of it now let me draw an an",
    "start": "75880",
    "end": "81079"
  },
  {
    "text": "analog there in that um one of the things I didn't mention in my intros that I'm also the author of a book",
    "start": "81079",
    "end": "86360"
  },
  {
    "text": "called Cloud native patterns and that book is targeted at developers software developers and architects who are",
    "start": "86360",
    "end": "93520"
  },
  {
    "text": "building these you know highly distributed applications these microservice based applications and",
    "start": "93520",
    "end": "99040"
  },
  {
    "text": "helping them understand all the patterns that you have to put in place to be able to make these microservices based apps",
    "start": "99040",
    "end": "106200"
  },
  {
    "text": "work in this everchanging environment that they run in all right links are in the show notes or head to Heroku comom",
    "start": "106200",
    "end": "113560"
  },
  {
    "text": "podcast to listen to subscribe again check the show up for links or Heroku",
    "start": "113560",
    "end": "118880"
  },
  {
    "text": "podcasts [Music]",
    "start": "118880",
    "end": "125540"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "137120",
    "end": "143800"
  },
  {
    "text": "from around the go Community we record the show live on Tuesdays at 300 p.m. us",
    "start": "143800",
    "end": "149280"
  },
  {
    "text": "Eastern watch along with your eyeballs at youtube.com/ changelog and participate in the live chat by joining",
    "start": "149280",
    "end": "156200"
  },
  {
    "text": "the go time FM channel of go slack okay let's cue this one up see what I did there here we",
    "start": "156200",
    "end": "162480"
  },
  {
    "text": "[Music]",
    "start": "162480",
    "end": "169110"
  },
  {
    "text": "go hello and welcome to go time welcome to a very special dzian festive episode",
    "start": "170599",
    "end": "179360"
  },
  {
    "text": "today I'm ebena Ria and today dear reader I reader you're going to be",
    "start": "179360",
    "end": "185640"
  },
  {
    "text": "visited by three Spirits the ghosts of configuration past present and",
    "start": "185640",
    "end": "191480"
  },
  {
    "text": "configuration yet to come today we're talking about Q which is a a new",
    "start": "191480",
    "end": "197599"
  },
  {
    "text": "language that lets us Define validate and generate text-based data uh like",
    "start": "197599",
    "end": "203720"
  },
  {
    "text": "config files apis database schemas and even code which sounds crazy but don't",
    "start": "203720",
    "end": "209959"
  },
  {
    "text": "worry we're going to unpick it today with this expert panel we're joined by",
    "start": "209959",
    "end": "215599"
  },
  {
    "text": "the creator of Q uh longtime googler um founded member of the Bor",
    "start": "215599",
    "end": "222200"
  },
  {
    "text": "team which is what inspired kubernetes if you didn't know a go team member um",
    "start": "222200",
    "end": "227680"
  },
  {
    "text": "it's only Marcel Von leisen hello Marcel hey there not on the go team anymore by",
    "start": "227680",
    "end": "233400"
  },
  {
    "text": "the way I'm sorry oh yeah that's okay did you get fired don't answer that I didn't it's okay we've also joined by",
    "start": "233400",
    "end": "241680"
  },
  {
    "text": "Paul Jolly Paul created uh play withg go dodev um he's a go contributor and",
    "start": "241680",
    "end": "248280"
  },
  {
    "text": "organizer of the goang tools working group hi Paul hi Matt how are you good",
    "start": "248280",
    "end": "254159"
  },
  {
    "text": "mate welcome back thank you very much indeed you're always welcome we're also",
    "start": "254159",
    "end": "259280"
  },
  {
    "text": "joined by Roger Pepe who's a current influx longtime go contributor and this",
    "start": "259280",
    "end": "264919"
  },
  {
    "text": "blew my mind Roger suggested the error type so we're going to have to to talk about that at some point um the also",
    "start": "264919",
    "end": "272919"
  },
  {
    "text": "organizer of the uh goang Northeast Meetup since 2015 hello Roger welcome to",
    "start": "272919",
    "end": "278800"
  },
  {
    "text": "go time hey how's it going happy to be here yeah not bad yes thanks for coming",
    "start": "278800",
    "end": "284080"
  },
  {
    "text": "it's um it's an honor to have you all here and I'm very excited about Q um",
    "start": "284080",
    "end": "289600"
  },
  {
    "text": "especially because it feels to me like something that I haven't really seen before so maybe Marcel you could um give",
    "start": "289600",
    "end": "296960"
  },
  {
    "text": "us a bit of an overview of what Q is and why it exists yeah so uh like 15 years",
    "start": "296960",
    "end": "304880"
  },
  {
    "text": "ago I uh as part of being on the Borg team I created this configuration language because we needed something to",
    "start": "304880",
    "end": "310160"
  },
  {
    "text": "control Borg and I wanted to do something completely different originally uh but",
    "start": "310160",
    "end": "317000"
  },
  {
    "text": "then we wanted to keep it simple and we created uh GCL which in the end grew quite complex um so I did that together",
    "start": "317000",
    "end": "325199"
  },
  {
    "text": "with Robert grieser by the way so that's also little preo",
    "start": "325199",
    "end": "330400"
  },
  {
    "text": "history there and then Rob Pike was an advisor on that team also and he he kept",
    "start": "330400",
    "end": "336440"
  },
  {
    "text": "saying like you have to do composition right and what I originally wanted to do was this composition model but after",
    "start": "336440",
    "end": "343840"
  },
  {
    "text": "eliminating that already we sort of forgot about it and you know an was right in our face right there but we",
    "start": "343840",
    "end": "349520"
  },
  {
    "text": "never you know never got back to it and basically um you know then GCL started",
    "start": "349520",
    "end": "355680"
  },
  {
    "text": "having inheritance big mistake didn't have typing big mistake and so Q is now",
    "start": "355680",
    "end": "361639"
  },
  {
    "text": "a way to fix all that great and what problem does it solve like what's its",
    "start": "361639",
    "end": "367440"
  },
  {
    "text": "core Mission I mean it promises a lot doesn't it mhm so the original problem",
    "start": "367440",
    "end": "372560"
  },
  {
    "text": "that I wanted to solve with it is basically a configuration right so if you look at uh so at my previous job uh",
    "start": "372560",
    "end": "380840"
  },
  {
    "text": "I worked with natural language right and and basically natural language grammars and if you think about it these are very",
    "start": "380840",
    "end": "387199"
  },
  {
    "text": "large configurations so if you see in Cloud right people that have like 100k lines",
    "start": "387199",
    "end": "393160"
  },
  {
    "text": "configurations or more it's it's a struggle right and it's really hard to keep keep these whereas if I looked at",
    "start": "393160",
    "end": "398720"
  },
  {
    "text": "these grammars uh it works fine right like you had distributed teams many people working on it um not a problem",
    "start": "398720",
    "end": "405680"
  },
  {
    "text": "right I mean it was daunting but it was not a problem and uh essentially if you",
    "start": "405680",
    "end": "411400"
  },
  {
    "text": "look at it in cloud computing it's not solved right like configuration languages tend to be way too complex",
    "start": "411400",
    "end": "416479"
  },
  {
    "text": "right it's uh and if you keep it simple it also gets complex you know it's it's always feels a little bit out of control",
    "start": "416479",
    "end": "422759"
  },
  {
    "text": "right and this Q is designed to get control back of configuration and manage it at skill yet keep it simple",
    "start": "422759",
    "end": "430639"
  },
  {
    "text": "H yeah so uh I don't know like maybe we could just dig into some of the things",
    "start": "430639",
    "end": "436479"
  },
  {
    "text": "it does I mean are there example use cases that we'll all recognize because",
    "start": "436479",
    "end": "442520"
  },
  {
    "text": "like you say with something that's so flexible like this that you could almost use it to do all kinds of things that",
    "start": "442520",
    "end": "449840"
  },
  {
    "text": "and I suppose you're going to get a lot of people doing things that you wouldn't even have imagined yourself right yeah",
    "start": "449840",
    "end": "456800"
  },
  {
    "text": "yeah one of them is uh testing for example so I've um written one of my own",
    "start": "456800",
    "end": "462520"
  },
  {
    "text": "first q-based table driven test recently and it's a it's really a breeze it's so easy to write and actually I think Raj",
    "start": "462520",
    "end": "470319"
  },
  {
    "text": "was the first who pointed that out it's a it's a very good use case for Q uh and there was recently a block um uh from",
    "start": "470319",
    "end": "477879"
  },
  {
    "text": "yex who is using it also for cross language uh test generation that's a unexpected use case",
    "start": "477879",
    "end": "485039"
  },
  {
    "text": "where it really came in handy I guess m one of the good use cases is actually the tutorial that's uh for kubernetes",
    "start": "485039",
    "end": "492280"
  },
  {
    "text": "that's on the the Q website itself is it worth you're just chatting through that one that's a that's a good example of",
    "start": "492280",
    "end": "498479"
  },
  {
    "text": "where Q sort of is truly a configuration language yeah so so one of the the",
    "start": "498479",
    "end": "504120"
  },
  {
    "text": "things that that example shows when I created GCL I had this uh this other use case in mind right like with these",
    "start": "504120",
    "end": "510159"
  },
  {
    "text": "grammars and there's lots of really like deepo automation you can do if you have a really declarative configuration",
    "start": "510159",
    "end": "516479"
  },
  {
    "text": "language so this was a little bit of promise with GCL as well right um and",
    "start": "516479",
    "end": "521839"
  },
  {
    "text": "because it's you know also declarative uh you do have some automation around it but the real automation never",
    "start": "521839",
    "end": "528200"
  },
  {
    "text": "materialized right you see that also with successors of GCL they also promised the automation also never",
    "start": "528200",
    "end": "535080"
  },
  {
    "text": "really materialized or maybe people didn't know what I meant with you can automate right and one of the things in",
    "start": "535080",
    "end": "541839"
  },
  {
    "text": "this kubernetes demos is also where I show it like a tiny little bit of what you can do with Q right if you if you",
    "start": "541839",
    "end": "548959"
  },
  {
    "text": "have a model like Q uh in terms of automation so for example uh one of one of the key things",
    "start": "548959",
    "end": "555800"
  },
  {
    "text": "which sets it apart from other configuration uh languages so it's type",
    "start": "555800",
    "end": "561040"
  },
  {
    "text": "system right it doesn't really separate types from values so values are types and basically so you can use Q as a",
    "start": "561040",
    "end": "568160"
  },
  {
    "text": "validation language right like you can specify you know like constraints or or like what do you expect your",
    "start": "568160",
    "end": "573720"
  },
  {
    "text": "configuration to look like and this in itself is already very useful right so very often if you try to put structure",
    "start": "573720",
    "end": "580240"
  },
  {
    "text": "on something you start with the validation rules right and you you sort of narrow down like what is it what I",
    "start": "580240",
    "end": "585480"
  },
  {
    "text": "think it means right and you find errors right so this is very different I you don't even focus on templatized at first",
    "start": "585480",
    "end": "593120"
  },
  {
    "text": "right you try to focus the errors like you validate what you have until you get it right right until you get it as many",
    "start": "593120",
    "end": "599680"
  },
  {
    "text": "details as many errors to catch and then there is a this is the first uh in a you",
    "start": "599680",
    "end": "605160"
  },
  {
    "text": "know possible long series of automations so the first one is is called Q trim it's like once I have this validation I",
    "start": "605160",
    "end": "611440"
  },
  {
    "text": "can say well you know now start rewriting my configurations and eliminate all the fields that I can",
    "start": "611440",
    "end": "617560"
  },
  {
    "text": "already derive from my validation right so the validation rules that I write is",
    "start": "617560",
    "end": "622640"
  },
  {
    "text": "at the same time also the templating right so there's no inheritance in que",
    "start": "622640",
    "end": "627680"
  },
  {
    "text": "it works uh very differently right but uh this is a very different way of eliminating boiler plate if you will",
    "start": "627680",
    "end": "634640"
  },
  {
    "text": "yeah so if I had a Json object then and I needed this you know because of course in Json there is no there aren't really",
    "start": "634640",
    "end": "641360"
  },
  {
    "text": "any rules you can just I could have a field with any type you know it's not constrained and there is that Jason",
    "start": "641360",
    "end": "647440"
  },
  {
    "text": "schema project and there's a few other projects that aim to sort of address that but so if I have adjacent object",
    "start": "647440",
    "end": "653880"
  },
  {
    "text": "and it has a particular shape that just has to be I can use Q to describe that",
    "start": "653880",
    "end": "659399"
  },
  {
    "text": "shape and then validate it programmatically maybe I could mention so what what one of the things that I",
    "start": "659399",
    "end": "665320"
  },
  {
    "text": "tend to do like one of the really nice uses for Q in a very kind of lightweight way is like I like I recently joined",
    "start": "665320",
    "end": "672240"
  },
  {
    "text": "influx for example um there's lots of configuration uh there's there's lots of",
    "start": "672240",
    "end": "677440"
  },
  {
    "text": "configuration around and which you you're like oh I'm unfamiliar with this I don't know what this is and there's no",
    "start": "677440",
    "end": "683639"
  },
  {
    "text": "documentation or little documentation and maybe there's some documentation but it's pretty poor you don't what this is",
    "start": "683639",
    "end": "690079"
  },
  {
    "text": "and you could just take that Json file or that yaml file and just write some Q alongside it and so sort of start to",
    "start": "690079",
    "end": "696480"
  },
  {
    "text": "refine your idea of what it is and Q will tell you oh no this is wrong yeah oh okay I got that rule wrong and you",
    "start": "696480",
    "end": "702519"
  },
  {
    "text": "could just gradually refine it because of the nature and it's for me the syntax",
    "start": "702519",
    "end": "707639"
  },
  {
    "text": "is really natural you're like if you compared to something like Jason schema",
    "start": "707639",
    "end": "713040"
  },
  {
    "text": "which is you know written in I'm not sure anyone would say that Jason schema is a natural way to specify",
    "start": "713040",
    "end": "719519"
  },
  {
    "text": "schema for yop right but if you write some Q you can show it to someone that doesn't know q and they'll be like oh",
    "start": "719519",
    "end": "725480"
  },
  {
    "text": "yeah I understand that it's it's kind of like a like a almost a suda code except it's real",
    "start": "725480",
    "end": "731680"
  },
  {
    "text": "code so that's nice then you talk about being able to build the validation for some Json but presumably you can do that",
    "start": "731680",
    "end": "739040"
  },
  {
    "text": "at scale as well so if you've got lots of Json data you may be looking at just one document and you describe a rule you",
    "start": "739040",
    "end": "746600"
  },
  {
    "text": "could run it against all of it and it will tell you whether they all actually match that or if actually in some cases",
    "start": "746600",
    "end": "751639"
  },
  {
    "text": "this is a number and not a string for some reason if these things have been manually edited you tend to find places",
    "start": "751639",
    "end": "758079"
  },
  {
    "text": "where there are inconsistencies which people have never realized you know so I you know you have a big open API spec or",
    "start": "758079",
    "end": "764120"
  },
  {
    "text": "something you're like okay I write a rule against that and it look like oh here's an inconsistency okay right um",
    "start": "764120",
    "end": "769720"
  },
  {
    "text": "here you know game on yeah bug raise that of issue one of Q's strengths to my",
    "start": "769720",
    "end": "775800"
  },
  {
    "text": "mind is that there's Q the language there's the Q command much like there is the go command that complements the go",
    "start": "775800",
    "end": "782240"
  },
  {
    "text": "language as well and much like go has got a standard Library Q has a standard",
    "start": "782240",
    "end": "787680"
  },
  {
    "text": "Library as well which enables you to write Tools in that use q and one of the",
    "start": "787680",
    "end": "792720"
  },
  {
    "text": "great powers of the Q command itself which is the sort of the parallel of the the go command and the qapi is that you",
    "start": "792720",
    "end": "800680"
  },
  {
    "text": "can almost seamlessly translate between these data formats as well whether it be Json yaml Json schema and so so this is",
    "start": "800680",
    "end": "810959"
  },
  {
    "text": "again a strength that I like is that as kind of Roger was saying you can find yourself in a situation where you're",
    "start": "810959",
    "end": "816320"
  },
  {
    "text": "working with some Json or working with some yaml or working with some protobuf",
    "start": "816320",
    "end": "821399"
  },
  {
    "text": "with just any different formats of either data or schema and Q enables you to actually translate between those and",
    "start": "821399",
    "end": "829440"
  },
  {
    "text": "effectively Define conveniently as sort of a source of Truth for okay here is my schema I want this to be defined in",
    "start": "829440",
    "end": "836079"
  },
  {
    "text": "Jason's schema for example um because actually there's a pre-existing schema there so let me work with that but",
    "start": "836079",
    "end": "842360"
  },
  {
    "text": "instead let me I want to write some extra validation in Q over here and the ability to combine those things is super",
    "start": "842360",
    "end": "849560"
  },
  {
    "text": "powerful so I end up just doing a lot of hacking using the Q command itself to as Roger suggested just validate data um in",
    "start": "849560",
    "end": "856519"
  },
  {
    "text": "the first instance against various sort of schema sources yeah one other use",
    "start": "856519",
    "end": "862000"
  },
  {
    "text": "case that has going quite big actually is so ISO they're using a q to generate",
    "start": "862000",
    "end": "867320"
  },
  {
    "text": "their open API from their Proto Buffs right so they're reading the Proto Buffs converted to q and so there's a few",
    "start": "867320",
    "end": "873920"
  },
  {
    "text": "reasons why you want to do this extra step from going from Proto to Q to open API so first of all the mappings are not",
    "start": "873920",
    "end": "880800"
  },
  {
    "text": "that trivial right I sometimes get a bug report for Q's like oh this mapping is really weird right and it's like",
    "start": "880800",
    "end": "886560"
  },
  {
    "text": "completely blew up from what Proto buff is to to open API but that's actually because uh the meaning is slightly",
    "start": "886560",
    "end": "893360"
  },
  {
    "text": "different between the two right and and Q captures that correctly um so sometimes you just do get weird outputs",
    "start": "893360",
    "end": "899839"
  },
  {
    "text": "right but that's basically because it's correct the other thing is so this is where the composability comes in so",
    "start": "899839",
    "end": "905959"
  },
  {
    "text": "protuff isn't very expressive right you just have basic types and you know there are some extensions to protops where you",
    "start": "905959",
    "end": "912160"
  },
  {
    "text": "can have Expressions that validate the field right like very much like Json schema but if you want to have like",
    "start": "912160",
    "end": "918199"
  },
  {
    "text": "cross type validation or more complicated validation right like you it's it's hard to do so even if you have",
    "start": "918199",
    "end": "924759"
  },
  {
    "text": "such a pipeline because Q is composable you can throw in any additional kind of schema on top of it and it will just",
    "start": "924759",
    "end": "931279"
  },
  {
    "text": "combine it in the end result so unlike we with inheritance where you have to sort of specify the layering right and",
    "start": "931279",
    "end": "937800"
  },
  {
    "text": "specify in which order you you would apply um and where also the semantics is",
    "start": "937800",
    "end": "942880"
  },
  {
    "text": "always kind of little bit Shady right like okay you you've applied the order but is that really what you mean right",
    "start": "942880",
    "end": "948759"
  },
  {
    "text": "and every different ordering means something different and which one is the correct one so that issue is completely",
    "start": "948759",
    "end": "953880"
  },
  {
    "text": "gone in Q right because there's no uh the order doesn't matter basically H",
    "start": "953880",
    "end": "959880"
  },
  {
    "text": "which is amazing for for a programming language that where you can put things two things together in either order any",
    "start": "959880",
    "end": "966040"
  },
  {
    "text": "order you know it doesn't make a difference it leads to a real sense of kind of it feels reliable it feels like",
    "start": "966040",
    "end": "972480"
  },
  {
    "text": "you know this says this and it's true you know no one can take this away from me yeah so it's interesting then this",
    "start": "972480",
    "end": "978519"
  },
  {
    "text": "idea that it has a standard library because in my head a validation thing I",
    "start": "978519",
    "end": "984160"
  },
  {
    "text": "I mean Rex strings make sense for sure even number ranges to say this this has",
    "start": "984160",
    "end": "989639"
  },
  {
    "text": "to be a number between these values but what else I mean if it has a standard library for things like um changing",
    "start": "989639",
    "end": "997240"
  },
  {
    "text": "strings or modifying things what does it look like how do you actually tell it",
    "start": "997240",
    "end": "1003759"
  },
  {
    "text": "that well I think what Paul was referring to is more the the libraries that you can uh use to use queue and",
    "start": "1003759",
    "end": "1009319"
  },
  {
    "text": "other applications so for example there is a a loader very much like in go right but there's also a workflow package",
    "start": "1009319",
    "end": "1016880"
  },
  {
    "text": "which allows you to basically have a a task graph defined in Q and then it automatically analyzes dependencies and",
    "start": "1016880",
    "end": "1023680"
  },
  {
    "text": "you can use that for datadriven uh workflow definitions for example so so",
    "start": "1023680",
    "end": "1029160"
  },
  {
    "text": "it's it's a there are kind of a set of framework packages that you can use to build on top of Q and create whatever",
    "start": "1029160",
    "end": "1035918"
  },
  {
    "text": "you want right in a sort of standardized way but there is a standard uh library but of course that's very constrained by",
    "start": "1035919",
    "end": "1042798"
  },
  {
    "text": "it having to be hermetic right like we don't want things to be modified or but yeah there there are useful things like",
    "start": "1042799",
    "end": "1049280"
  },
  {
    "text": "you want to be able to operate with time types and you know other kinds of things some some Network IP addresses and stuff",
    "start": "1049280",
    "end": "1056039"
  },
  {
    "text": "like that so in a little bit more convenient way than having to code that in Q itself it's just a nice way of",
    "start": "1056039",
    "end": "1062360"
  },
  {
    "text": "being able to sort of more in a more expressive way describe what constraints",
    "start": "1062360",
    "end": "1067840"
  },
  {
    "text": "exist on the data that you're expecting or transforming that data that you have",
    "start": "1067840",
    "end": "1072960"
  },
  {
    "text": "received in some way shape or form but as M suggested in a hermetic way so there's your regular strings package for",
    "start": "1072960",
    "end": "1080280"
  },
  {
    "text": "example byes package and others that allow you to not only manipulate or",
    "start": "1080280",
    "end": "1085799"
  },
  {
    "text": "transform the data excuse me but Express constraints in a slightly more expressive way so what for example you",
    "start": "1085799",
    "end": "1093200"
  },
  {
    "text": "might insist that something is lowercase is that s is that an a real example",
    "start": "1093200",
    "end": "1098559"
  },
  {
    "text": "example yeah yeah yeah ah I see that makes sense yeah it's funny I mean you talk about the strings and the btes",
    "start": "1098559",
    "end": "1104280"
  },
  {
    "text": "packages and stuff this sounds very like go was this project inspired much by go",
    "start": "1104280",
    "end": "1111080"
  },
  {
    "text": "yeah for various reasons one of it was a bootstrapping reason right so the standard library for example was just uh",
    "start": "1111080",
    "end": "1117440"
  },
  {
    "text": "me analyzing the ghost standard Library what is hermetic what can I translate directly and then just generate most of",
    "start": "1117440",
    "end": "1123880"
  },
  {
    "text": "it automatically right that's how that started so it was written in a few hours basically uh of course then there's a",
    "start": "1123880",
    "end": "1130799"
  },
  {
    "text": "lot of tweaking afterwards but yeah I mean clearly having been I think it's almost 10 years I was on a go team right",
    "start": "1130799",
    "end": "1137760"
  },
  {
    "text": "so clearly there's a go inspiration but not not exclusively right like the string model is much more based on Swift",
    "start": "1137760",
    "end": "1144520"
  },
  {
    "text": "for example H so what's that look like what do you mean it's based on Swift",
    "start": "1144520",
    "end": "1149679"
  },
  {
    "text": "well so there's a lot of things where go wouldn't work well for configuration language like if it comes to so in",
    "start": "1149679",
    "end": "1156159"
  },
  {
    "text": "configuration you often have this this meta thing going on with strings where you have to substitute things in strings",
    "start": "1156159",
    "end": "1162600"
  },
  {
    "text": "but then you have to Define strings where you have to substitute things in right so you have to you have multiple layers of escaping",
    "start": "1162600",
    "end": "1168960"
  },
  {
    "text": "if you will and and and go doesn't it just doesn't work very well right with the back tick uh so it's actually a very",
    "start": "1168960",
    "end": "1175480"
  },
  {
    "text": "hard problem and I think Swift is the first language that got that right and so I copied that model into go and",
    "start": "1175480",
    "end": "1181600"
  },
  {
    "text": "there's some other you know string-- like things that they did really well like multi-line strings very simple",
    "start": "1181600",
    "end": "1187200"
  },
  {
    "text": "straightforward way of doing it very clear only one way to do it right uh I'm",
    "start": "1187200",
    "end": "1192720"
  },
  {
    "text": "looking at another configuration language here but Roger knows yes it's",
    "start": "1192720",
    "end": "1198360"
  },
  {
    "text": "really a syntactic thing rather than a data model thing I'd say and like it contrasts so nicely with yaml it's one",
    "start": "1198360",
    "end": "1205039"
  },
  {
    "text": "of the main reasons why if I reading yaml file I'm finding it hard to read I'll convert it to q and then I can",
    "start": "1205039",
    "end": "1211280"
  },
  {
    "text": "actually read it because there aren't like eight different types of strings or with slightly different rules which yeah",
    "start": "1211280",
    "end": "1217640"
  },
  {
    "text": "or maybe 16 I don't know it's got a ridiculous number of ways of quoting strings and no one knows",
    "start": "1217640",
    "end": "1224120"
  },
  {
    "text": "them yeah that's definitely that thing of having one way to do something really helps with readability doesn't it",
    "start": "1224120",
    "end": "1230280"
  },
  {
    "text": "because of course yeah when you come to look at someone else's Q code it's familiar already and that's a that's a",
    "start": "1230280",
    "end": "1236640"
  },
  {
    "text": "kind of go principle yeah this so this is a very good point like um so for",
    "start": "1236640",
    "end": "1241960"
  },
  {
    "text": "scripting language is not so important right like if you write a script and you do a one-off you want to do something quickly like being able to write things",
    "start": "1241960",
    "end": "1249039"
  },
  {
    "text": "quickly right is more important than being able to read it back later and hopefully you'll throw it away um so",
    "start": "1249039",
    "end": "1255559"
  },
  {
    "text": "with a programming language you don't want that but with a configuration ation language these requirements should be even stricter right because very often",
    "start": "1255559",
    "end": "1262000"
  },
  {
    "text": "it's not only not somebody else from your team but it's a different team like an s that has to look at it and often in",
    "start": "1262000",
    "end": "1268480"
  },
  {
    "text": "there not so good con circumstances right where there's some emergency where you have to fix things so readability is",
    "start": "1268480",
    "end": "1274919"
  },
  {
    "text": "even more important and it's even more important to have uh no complexity right or less complexity and this is exactly",
    "start": "1274919",
    "end": "1281600"
  },
  {
    "text": "what is the problem with for example GCL right like guilty myself and many of the other configuration languages right they",
    "start": "1281600",
    "end": "1288159"
  },
  {
    "text": "you kind of need the complexity that's why you go to DSL in the first place but then they you know you do want the",
    "start": "1288159",
    "end": "1294360"
  },
  {
    "text": "readability so you shouldn't have these complex uh constructs right like that they really uh it goes too far right and",
    "start": "1294360",
    "end": "1301679"
  },
  {
    "text": "it really hurts reability too much one other thing i' I'd kind of mention",
    "start": "1301679",
    "end": "1307200"
  },
  {
    "text": "related to its relation its uh connection with go is that it does really well is is that you've got cuum",
    "start": "1307200",
    "end": "1314440"
  },
  {
    "text": "in the same way that you've got gofund going to ask that and that's something that that that you know like something",
    "start": "1314440",
    "end": "1319720"
  },
  {
    "text": "like yaml basically you can't do right you can't read it in process it like an EST and write it out again because",
    "start": "1319720",
    "end": "1326320"
  },
  {
    "text": "basically almost no does that so that means it's amable to tuling in the same way that go is amable to tuling and",
    "start": "1326320",
    "end": "1332320"
  },
  {
    "text": "that's a huge deal I think so for anyone not familiar and there probably aren't many of our listeners Slaters that um",
    "start": "1332320",
    "end": "1339799"
  },
  {
    "text": "aren't familiar with gofm what what does that do then for the Q code so it means",
    "start": "1339799",
    "end": "1345600"
  },
  {
    "text": "that you can for example if the language evolves and we want to change things in",
    "start": "1345600",
    "end": "1350919"
  },
  {
    "text": "a Bly compatible way we can do that by reading in the code and automatically transforming it and uh like Marcel has",
    "start": "1350919",
    "end": "1357960"
  },
  {
    "text": "been fantastic like in the early days of the go project like I've been involved in go since basically day one and and in",
    "start": "1357960",
    "end": "1364120"
  },
  {
    "text": "the early days the language was changing quite fast but people kept on continuing to use the language because the core",
    "start": "1364120",
    "end": "1370799"
  },
  {
    "text": "team was very good about maintaining backward compatibility or rather when they didn't maintain backward",
    "start": "1370799",
    "end": "1376640"
  },
  {
    "text": "compatibility they introduced a tool called goof fix which would actually automatically change your go programs to",
    "start": "1376640",
    "end": "1383720"
  },
  {
    "text": "use the new features and that was a huge deal and still is actually for go so and",
    "start": "1383720",
    "end": "1389400"
  },
  {
    "text": "I think that that's that's a really big deal for for Q and for configuration languages because it's not just the",
    "start": "1389400",
    "end": "1394600"
  },
  {
    "text": "language itself is if you change your configuration language yourself you want",
    "start": "1394600",
    "end": "1399840"
  },
  {
    "text": "to transform it well then you can do that and you can still keep comments for example comments are really really",
    "start": "1399840",
    "end": "1405360"
  },
  {
    "text": "important they're crucial but you know if you got Jason for example you can't",
    "start": "1405360",
    "end": "1410520"
  },
  {
    "text": "have comments if you got yl well if you transform your data you lose the comments but having the the sort of like",
    "start": "1410520",
    "end": "1417039"
  },
  {
    "text": "the gof fum equivalent one formatting style is critical um from a readability",
    "start": "1417039",
    "end": "1423360"
  },
  {
    "text": "perspective as well so that's really the principal purpose to my mind at least of qm is the the formatting side of things",
    "start": "1423360",
    "end": "1430799"
  },
  {
    "text": "I think Roger just describe the where Q goes to sort of like another level providing those additional translation",
    "start": "1430799",
    "end": "1438720"
  },
  {
    "text": "or we've deprecated this feature in the next version so it will automatically",
    "start": "1438720",
    "end": "1444360"
  },
  {
    "text": "rewrite your queue and that has I think Marcel would agree that has been one of",
    "start": "1444360",
    "end": "1449679"
  },
  {
    "text": "the strongest bits of feedback that people have given is that there have been breaking changes because Q is not",
    "start": "1449679",
    "end": "1455320"
  },
  {
    "text": "at V1 yet and so in order to help people along that path Q F has been a lifesaver",
    "start": "1455320",
    "end": "1462960"
  },
  {
    "text": "you just literally run it like you were to goof across a number of files or directories or packages as the case may",
    "start": "1462960",
    "end": "1469240"
  },
  {
    "text": "be and you end up having migrated for one of a better phrase to the new version of Q with with zero pain yeah",
    "start": "1469240",
    "end": "1477200"
  },
  {
    "text": "it's funny I heard somebody talking about gum and their view of it was it's",
    "start": "1477200",
    "end": "1482960"
  },
  {
    "text": "just a kind of nice feature to have almost like you have a format document in an IDE or something but it is",
    "start": "1482960",
    "end": "1490039"
  },
  {
    "text": "different to that it's the readability thing isn't it again everyone having the same layout and taking out any of that",
    "start": "1490039",
    "end": "1496200"
  },
  {
    "text": "discussion around White space or where do we put braces or whatever and the the",
    "start": "1496200",
    "end": "1501600"
  },
  {
    "text": "stuff that Roger was talking about the the the fix that sort of retrospective that you're almost like it again sounds",
    "start": "1501600",
    "end": "1508960"
  },
  {
    "text": "just like a nice to have but that's really how you build trust isn't it like",
    "start": "1508960",
    "end": "1514120"
  },
  {
    "text": "and if if you could that's the thing about go I think that made it so successful was you could kind of rely on",
    "start": "1514120",
    "end": "1520320"
  },
  {
    "text": "it especially once it hit version one you could really rely on that so so that you knew your code was it was pretty",
    "start": "1520320",
    "end": "1526520"
  },
  {
    "text": "safe it's not going to they not going to just keep releasing new major versions and you have to go back and rewrite things or or you get stuck on a previous",
    "start": "1526520",
    "end": "1533720"
  },
  {
    "text": "version so yeah I think that turns out to be way more important really than people might realize so that the cue the",
    "start": "1533720",
    "end": "1541080"
  },
  {
    "text": "language itself being a meable to tooling IE writing tools that can work with Q the language is again critical",
    "start": "1541080",
    "end": "1548960"
  },
  {
    "text": "for for all the reasons that you just described and it's kind of one of the the main reasons that I really like Q is",
    "start": "1548960",
    "end": "1555360"
  },
  {
    "text": "that I can imagine myself writing tool tools that work with q in the same way",
    "start": "1555360",
    "end": "1561000"
  },
  {
    "text": "that I write tools that work with Go the language as well and just to pick up on your point Matt about how this how",
    "start": "1561000",
    "end": "1567840"
  },
  {
    "text": "powerful this can get I think Russ Cox has actually just written um a new refactoring tool for the go language",
    "start": "1567840",
    "end": "1574840"
  },
  {
    "text": "itself which is kind of like taking go to the next level of where people are making API changes for example and they",
    "start": "1574840",
    "end": "1582360"
  },
  {
    "text": "need to help people migrate because they've made a breaking change or somewhat or for example then that's the",
    "start": "1582360",
    "end": "1589240"
  },
  {
    "text": "kind of thing that you want to be doing with go and that's absolutely the kind of thing that we want to be doing with Q as well and that's as Roger describe",
    "start": "1589240",
    "end": "1596399"
  },
  {
    "text": "what qm has been fantastic with since day one yeah and basically automation that was also a big motivator so in a",
    "start": "1596399",
    "end": "1603480"
  },
  {
    "text": "larger setting like a lot of the code and also configuration right it's very often generated and or machine",
    "start": "1603480",
    "end": "1610120"
  },
  {
    "text": "manipulated it's just a part of life right so this is it's not only a nice to",
    "start": "1610120",
    "end": "1615399"
  },
  {
    "text": "have I would say it's critical right to have these [Music]",
    "start": "1615399",
    "end": "1630630"
  },
  {
    "text": "this episode is brought to you by our friends at equinex metal globally interconnected fully automated bare",
    "start": "1632120",
    "end": "1637679"
  },
  {
    "text": "metal equinix metal gives you Hardware at your fingertips with physical infrastructure at software speed",
    "start": "1637679",
    "end": "1643279"
  },
  {
    "text": "accelerate your workloads with fully automated bare metal that's secure powerful and cost effective this is the",
    "start": "1643279",
    "end": "1649840"
  },
  {
    "text": "promise of the cloud delivered on bare metal equinex metal makes it easier than ever to take advantage of the unmatched",
    "start": "1649840",
    "end": "1656200"
  },
  {
    "text": "Global reach and connectivity ecosystem made possible by equinex which includes more than 220 data centers across 63",
    "start": "1656200",
    "end": "1662960"
  },
  {
    "text": "metros making interconnection easy and they're obsessed with making bare metal even more awesome seriously check out",
    "start": "1662960",
    "end": "1669360"
  },
  {
    "text": "these features 60c deploys hourly pricing a customer success team that",
    "start": "1669360",
    "end": "1674399"
  },
  {
    "text": "engages over slack x86 Intel am MD and arm single tenant mvme and SSD storage",
    "start": "1674399",
    "end": "1681840"
  },
  {
    "text": "restful API first class devops Integrations equinex fabric integration",
    "start": "1681840",
    "end": "1687279"
  },
  {
    "text": "support for Enterprise OSS and open source Linux os's air gapped installs without a public IP no installed agent",
    "start": "1687279",
    "end": "1694279"
  },
  {
    "text": "or Keys extensive open source love and support plus so much more visit info.",
    "start": "1694279",
    "end": "1700000"
  },
  {
    "text": "equinex metal.com change loog get $500 in free credit to play with plus a rad t-shirt again info. equinix metal /",
    "start": "1700000",
    "end": "1709990"
  },
  {
    "text": "[Music]",
    "start": "1709990",
    "end": "1715939"
  },
  {
    "text": "[Music]",
    "start": "1721030",
    "end": "1733430"
  },
  {
    "text": "changelog Roger I do have to ask you very quickly about you suggesting the",
    "start": "1733720",
    "end": "1739000"
  },
  {
    "text": "error type in go what's that about cuz it used to be OS error didn't it was restruct that's right it used to be os.",
    "start": "1739000",
    "end": "1745679"
  },
  {
    "text": "error and of course like importing the OS package you know with all its baggage",
    "start": "1745679",
    "end": "1751120"
  },
  {
    "text": "every time you wanted an error it's not not not just not not great so there was a bit there was a discussion uh and they",
    "start": "1751120",
    "end": "1758000"
  },
  {
    "text": "were thinking about different options and there was quite a long thread in the goang nuts mailing list they had",
    "start": "1758000",
    "end": "1764120"
  },
  {
    "text": "actually decided that that what they were going to do they were going to make a new package perhaps called errors and",
    "start": "1764120",
    "end": "1770240"
  },
  {
    "text": "it would be an error type and every time you wanted the error type you would import that package and I was like no no",
    "start": "1770240",
    "end": "1775880"
  },
  {
    "text": "I I like that just doesn't seem right it's such a low-level part you you shouldn't have to import something every",
    "start": "1775880",
    "end": "1781360"
  },
  {
    "text": "time and I just made a little suggestion in the thread saying look how about just predefining the error as an interface in",
    "start": "1781360",
    "end": "1789600"
  },
  {
    "text": "fact at the T I suggested it as because at the time the error the standard the o. error had had had a string method not",
    "start": "1789600",
    "end": "1796799"
  },
  {
    "text": "an error method right um so I suggested that it would be type error with a",
    "start": "1796799",
    "end": "1802360"
  },
  {
    "text": "string and and they they changed that but but basically that was that was my suggestion and it's funny how a little",
    "start": "1802360",
    "end": "1808519"
  },
  {
    "text": "thing I probably didn't think about it very long but that you know made it and actually that was one of the really",
    "start": "1808519",
    "end": "1814240"
  },
  {
    "text": "fantastic demonstrations of gofund and go fix because there were hundreds of",
    "start": "1814240",
    "end": "1819360"
  },
  {
    "text": "thousands of lines of go in the wild that was using os. error you know importing OS whether they needed or not",
    "start": "1819360",
    "end": "1826120"
  },
  {
    "text": "and you could just run go and it would just change it just like that and it was it was like a kind of magic that's a",
    "start": "1826120",
    "end": "1832640"
  },
  {
    "text": "kind of that's a great discovery it feels like that's a discovery doesn't it that rather than just a choice you could",
    "start": "1832640",
    "end": "1838960"
  },
  {
    "text": "make because interfaces in go because they're duct typed or structural typing",
    "start": "1838960",
    "end": "1844039"
  },
  {
    "text": "then you don't need any uh you don't need to import anything to work with errors so that's brilliant mate so",
    "start": "1844039",
    "end": "1849200"
  },
  {
    "text": "thanks for that cuz we that's really helped as that um there was a little bit",
    "start": "1849200",
    "end": "1854399"
  },
  {
    "text": "of a discussion earlier today on twit Twitter which is a website with it's a microblogging website and it was um Jana",
    "start": "1854399",
    "end": "1863000"
  },
  {
    "text": "dogen and Carman uh Ando and uh they were kind of discussing whether you say",
    "start": "1863000",
    "end": "1870320"
  },
  {
    "text": "Q Lang or Q I'm getting the sense that we say Q so what's the what are the rules when do we when do we use Q Lang",
    "start": "1870320",
    "end": "1878120"
  },
  {
    "text": "and could you write could you describe this in Q I don't think so yeah no it's not sure",
    "start": "1878120",
    "end": "1884880"
  },
  {
    "text": "in complete for one but uh no any so um I think it's very similar to to go",
    "start": "1884880",
    "end": "1891360"
  },
  {
    "text": "right it's really q but if I search for it I search Q Lang because you know I just get better results so there you go",
    "start": "1891360",
    "end": "1899320"
  },
  {
    "text": "okay no pun intend it that's great so Marcel something you",
    "start": "1899320",
    "end": "1904399"
  },
  {
    "text": "mentioned earlier uh which is baffled baffling me still you said values are",
    "start": "1904399",
    "end": "1909760"
  },
  {
    "text": "types yeah so could you elaborate a little bit on what that means and the implications of it um yes so if you look",
    "start": "1909760",
    "end": "1917000"
  },
  {
    "text": "at Q I try to visualize it now with my words I guess so but if you look at Json",
    "start": "1917000",
    "end": "1922639"
  },
  {
    "text": "you just have this string for the field colon value which can be a string integer or another object so when Q it",
    "start": "1922639",
    "end": "1930159"
  },
  {
    "text": "looks very similar you can drop the quotes here and there uh not on the right hand side but left hand side of the colon and then on the right instead",
    "start": "1930159",
    "end": "1936919"
  },
  {
    "text": "of saying for example a string you can say it is a string right so you can say",
    "start": "1936919",
    "end": "1942159"
  },
  {
    "text": "instead of the value you can specify it's a type and syntactically it looks the same",
    "start": "1942159",
    "end": "1947880"
  },
  {
    "text": "right but it's not only syntactic it's also semantic everything is ordered in a hierarchy so a concrete string like mat",
    "start": "1947880",
    "end": "1955639"
  },
  {
    "text": "is an instance of the type string right but they're ordered in the same",
    "start": "1955639",
    "end": "1960799"
  },
  {
    "text": "hierarchy so I can say it must be greater or equal than M right which then",
    "start": "1960799",
    "end": "1966080"
  },
  {
    "text": "met is an instance of that too so you have constraints and they're all ordered and you can carry that forward and",
    "start": "1966080",
    "end": "1971600"
  },
  {
    "text": "basically say all configurations are ordered like that right so you can define an ordering for all of them um",
    "start": "1971600",
    "end": "1978840"
  },
  {
    "text": "and more specifically for the mathematically inclined it's a lettuce so that means that for every two values",
    "start": "1978840",
    "end": "1984240"
  },
  {
    "text": "or configurations if you combine them there's always a unique um instance",
    "start": "1984240",
    "end": "1990279"
  },
  {
    "text": "that's the greatest uh like instance of both of them that's where commuity comes",
    "start": "1990279",
    "end": "1995600"
  },
  {
    "text": "from right so that basically means you can combine in any order it's um yeah mathematical construct basically uh in",
    "start": "1995600",
    "end": "2003200"
  },
  {
    "text": "which all these values and types are defined so it sounds a little bit complicated it's really very simple and one way to view Q for example is if you",
    "start": "2003200",
    "end": "2009480"
  },
  {
    "text": "have two forms right like uh you can see Q as a form like data as a you know is a",
    "start": "2009480",
    "end": "2015519"
  },
  {
    "text": "form if you will and there's gaps in there so you might still have to fill out some Fields some of them might",
    "start": "2015519",
    "end": "2021039"
  },
  {
    "text": "already be filled out and let's say like two people have uh partially filled out",
    "start": "2021039",
    "end": "2026440"
  },
  {
    "text": "a form and you now need want to combine it but it's a form about the same person one person filled out the address the",
    "start": "2026440",
    "end": "2032000"
  },
  {
    "text": "other person filled out the dependence or whatever now you're combining this form but you're giving that to a third",
    "start": "2032000",
    "end": "2038120"
  },
  {
    "text": "person and it's just a matter of filling out wherever the gaps were by left by the other but now you see that the last",
    "start": "2038120",
    "end": "2044600"
  },
  {
    "text": "name is different for example in both forms now you know it's about the same person so one of them must be wrong",
    "start": "2044600",
    "end": "2052358"
  },
  {
    "text": "right um so what you do at inheritance you say like well we'll pick the last one and that will be the name right what",
    "start": "2052359",
    "end": "2059398"
  },
  {
    "text": "Q will say is like well no like one of them is wrong there's no way for me to tell just based on this form which one",
    "start": "2059399",
    "end": "2065839"
  },
  {
    "text": "is wrong right so I'm going to build here you're going to fix this right you're going to tell me what's the right name right and and this is basically how",
    "start": "2065839",
    "end": "2074200"
  },
  {
    "text": "Q operates and this is because you have this restriction I can actually order",
    "start": "2074200",
    "end": "2079358"
  },
  {
    "text": "everything nicely and that's what it means that types are values does that make any sense yeah it does make some",
    "start": "2079359",
    "end": "2086079"
  },
  {
    "text": "sense there's a really good tutorial on the Q website which is q.org and that's",
    "start": "2086079",
    "end": "2092878"
  },
  {
    "text": "cu.org that walk through the the the basics of q that introduce this concept",
    "start": "2092879",
    "end": "2099320"
  },
  {
    "text": "of types being values really well um and they also show and explain how the",
    "start": "2099320",
    "end": "2104640"
  },
  {
    "text": "syntax is very Json like which is unsurprising because it's a a superet of Json and so that will help people to",
    "start": "2104640",
    "end": "2113400"
  },
  {
    "text": "orient themselves around how the the schema part of Q if you like fits in",
    "start": "2113400",
    "end": "2118880"
  },
  {
    "text": "with the Json with with the data part and how the two of them combine matters you were saying earlier on in the way",
    "start": "2118880",
    "end": "2125599"
  },
  {
    "text": "that Jason doesn't way got Jason schema being a different thing altogether really to to Jason the data itself in Q",
    "start": "2125599",
    "end": "2132760"
  },
  {
    "text": "you've got this concept of that the schema for want of a better word and the data sitting alongside each other um in",
    "start": "2132760",
    "end": "2139480"
  },
  {
    "text": "the same file potentially um where you're the data is as Marcel was saying is effectively just a more",
    "start": "2139480",
    "end": "2146640"
  },
  {
    "text": "specific and concrete version of a field than the schema which could just be the",
    "start": "2146640",
    "end": "2151880"
  },
  {
    "text": "type for example so that is quite strange isn't it that is that a New Concept are there",
    "start": "2151880",
    "end": "2159200"
  },
  {
    "text": "other examples of things that behave like that uh well so these um so really this comes from logic programming um so",
    "start": "2159200",
    "end": "2166720"
  },
  {
    "text": "if you really think about like like data log prolog you really have this um you",
    "start": "2166720",
    "end": "2172880"
  },
  {
    "text": "know it's all about reasoning with with insufficient or partial data right where you have gaps that you try to fill in by",
    "start": "2172880",
    "end": "2178960"
  },
  {
    "text": "by trying to walk over this so in in natural language processing this this Q",
    "start": "2178960",
    "end": "2184280"
  },
  {
    "text": "like thing right so it's it works very much same like that you also have this letters this organization and it was",
    "start": "2184280",
    "end": "2191079"
  },
  {
    "text": "basically invented because it was um so prologue didn't really scale to address",
    "start": "2191079",
    "end": "2197640"
  },
  {
    "text": "uh dealing with grammars right like not because it it couldn't but because it was too hard to understand and like",
    "start": "2197640",
    "end": "2203240"
  },
  {
    "text": "order sort of still it kind of matter right and it was like complicated rules and this was basically a a pure data way",
    "start": "2203240",
    "end": "2211119"
  },
  {
    "text": "of describing what need to be matched right what needed to be matched but it's",
    "start": "2211119",
    "end": "2216160"
  },
  {
    "text": "uh so you you don't really have integers and strings right it was more abstract in a way than that but you you did have",
    "start": "2216160",
    "end": "2222000"
  },
  {
    "text": "this idea that the structure is at the same time the type right so that this it",
    "start": "2222000",
    "end": "2227319"
  },
  {
    "text": "really comes from there that you have that it's the same thing do people get",
    "start": "2227319",
    "end": "2232400"
  },
  {
    "text": "that intuitively or does that take some learning I think for computer scientists might take some learning I think for a",
    "start": "2232400",
    "end": "2239119"
  },
  {
    "text": "normal person let's say it's it's easier actually so one way to think about it if",
    "start": "2239119",
    "end": "2245119"
  },
  {
    "text": "you think about inheritance right and you have a for example a cat and now I",
    "start": "2245119",
    "end": "2250280"
  },
  {
    "text": "want to make it a dog right I say like well okay so I I'm going to take the nose and make it wet and it doesn't meow",
    "start": "2250280",
    "end": "2256640"
  },
  {
    "text": "but it barks right but I'm going to modify this cat and create a subass that's a dog right so to a computer",
    "start": "2256640",
    "end": "2263760"
  },
  {
    "text": "scientist is a completely normal thing to do right and nobody would would even blink at it to a normal person this is",
    "start": "2263760",
    "end": "2269760"
  },
  {
    "text": "insane right like you say like well you don't organize it like this you have an animal right or a memal and then you",
    "start": "2269760",
    "end": "2274839"
  },
  {
    "text": "create that's cuz they think they think you're really going to do this in the lab yeah that's why that's why yeah and",
    "start": "2274839",
    "end": "2281400"
  },
  {
    "text": "and this is like this right like the way I would say actually the way inheritance with inheritance you can organize things",
    "start": "2281400",
    "end": "2287160"
  },
  {
    "text": "is very unnatural often right and and so Q still has a hierarchy but it's an",
    "start": "2287160",
    "end": "2292280"
  },
  {
    "text": "hierarchy like normal people think about it right basically it definitely took me some",
    "start": "2292280",
    "end": "2298839"
  },
  {
    "text": "time to wrap my head around the way in which um you need to sort of think in um",
    "start": "2298839",
    "end": "2305119"
  },
  {
    "text": "q but I think one of the things is that I I found is that once I sort of started",
    "start": "2305119",
    "end": "2311119"
  },
  {
    "text": "getting if you like the concepts involve with Q um and how to think in that slightly different way as Mar was saying",
    "start": "2311119",
    "end": "2317640"
  },
  {
    "text": "it actually just becomes a much more natural way to express okay this is the structure of the data that I'm expecting",
    "start": "2317640",
    "end": "2323839"
  },
  {
    "text": "here or these are the constraints on it um and then the the tooling that you",
    "start": "2323839",
    "end": "2329240"
  },
  {
    "text": "have with Q as well just it ends up becoming it's for me it's a critical part of my workflow using Q now whatever",
    "start": "2329240",
    "end": "2336319"
  },
  {
    "text": "project project I'm working on it's not that I'm trying to use Q I just find myself naturally using it because it's a",
    "start": "2336319",
    "end": "2342160"
  },
  {
    "text": "very natural way of describing data or constraining data that's a very good sign isn't it when when you actually",
    "start": "2342160",
    "end": "2348880"
  },
  {
    "text": "just use it because it's working for you you're not using it for the sake of it I often end up just using it as like",
    "start": "2348880",
    "end": "2354720"
  },
  {
    "text": "pseudo code almost you know I'm like oh what is this thing oh I'll just I'll just write it out as CU because it's it",
    "start": "2354720",
    "end": "2361160"
  },
  {
    "text": "just feels totally natural and it doesn't feel like it gets into way at all it just enables h",
    "start": "2361160",
    "end": "2367240"
  },
  {
    "text": "that's great we mentioned earlier that you can drop the quotes in the keys or in the field names or something but so",
    "start": "2367240",
    "end": "2373680"
  },
  {
    "text": "what what happens if you cumed that what's cump's opinion on quotes and",
    "start": "2373680",
    "end": "2379240"
  },
  {
    "text": "things that's fine so labels are uh because it's more restricted so left of the colon if you're uh doing a member",
    "start": "2379240",
    "end": "2387200"
  },
  {
    "text": "name or whatever it's just uh because it's so annoying to write the quotes there it's just this little you know",
    "start": "2387200",
    "end": "2393240"
  },
  {
    "text": "syntactic trick so that I don't need the quotes there except it's actually different in Q because if you don't put",
    "start": "2393240",
    "end": "2399359"
  },
  {
    "text": "the quotes around the keys It's actually an identifier you can actually refer to it as a variable and this is like a you",
    "start": "2399359",
    "end": "2406640"
  },
  {
    "text": "know so you can say you know X col 5 and without the quotes around the X and it",
    "start": "2406640",
    "end": "2412240"
  },
  {
    "text": "just like Jason except later you can say y col X and then they're both X and Y",
    "start": "2412240",
    "end": "2417400"
  },
  {
    "text": "are going to be exactly the same value always so that's that that's a",
    "start": "2417400",
    "end": "2422599"
  },
  {
    "text": "difference that kind of reminds me of symbols in Ruby cu you could build maps with symbols and strings as keys in Ruby",
    "start": "2422599",
    "end": "2431920"
  },
  {
    "text": "while you think about that mat I'll just um say that I think that's the two things that you talked about there the",
    "start": "2431920",
    "end": "2437359"
  },
  {
    "text": "dropping of the quotes and as Roger was saying this ability to reference different values yeah this is again one",
    "start": "2437359",
    "end": "2445359"
  },
  {
    "text": "of the things from as a user of q i somebody who's writing Q one of the things that I I really appreciate",
    "start": "2445359",
    "end": "2452359"
  },
  {
    "text": "because you've got the the tool authors and the system authors who are going to use Q because they want people to provide Q to",
    "start": "2452359",
    "end": "2458960"
  },
  {
    "text": "configure their system or as input but as a user of Q someone who's writing Q there are so many of these just amazing",
    "start": "2458960",
    "end": "2466520"
  },
  {
    "text": "things that I have as part of the language so Marcel was talking about um string literals and the way they work",
    "start": "2466520",
    "end": "2473680"
  },
  {
    "text": "string interpolation the ability to drop quotes comments this ability to do",
    "start": "2473680",
    "end": "2479760"
  },
  {
    "text": "references for example the Q from all of these things as a user of q that they're",
    "start": "2479760",
    "end": "2485119"
  },
  {
    "text": "just they're things I've become so used to in things like go I kind of need",
    "start": "2485119",
    "end": "2490319"
  },
  {
    "text": "these things in my configuration language and that's where Q from a user perspective is is so much more powerful",
    "start": "2490319",
    "end": "2496680"
  },
  {
    "text": "I think than things like Jason and yaml not to replace them but just as a compliment often to those things I I",
    "start": "2496680",
    "end": "2503000"
  },
  {
    "text": "sometimes need that flexibility so I'll write it in Q and then I'll export it to yamal for example H so the Q tools",
    "start": "2503000",
    "end": "2511400"
  },
  {
    "text": "themselves then what are they written in go mostly H and will that always be the the case well it's it's kind of a lot of",
    "start": "2511400",
    "end": "2519440"
  },
  {
    "text": "work to you know like write all these tools again and in something else right so I can imagine that at least the core",
    "start": "2519440",
    "end": "2525560"
  },
  {
    "text": "language would be uh either cross-compiled or potentially even Rewritten right in another uh other",
    "start": "2525560",
    "end": "2532240"
  },
  {
    "text": "language uh but but to rewrite the tools is uh so especially if you're like with",
    "start": "2532240",
    "end": "2537839"
  },
  {
    "text": "go right like you're all the loading and like the modules all of this is very finicky right like it's a uh it's one",
    "start": "2537839",
    "end": "2544440"
  },
  {
    "text": "way one thing to have a language specification the tooling around it is quite tedious to to",
    "start": "2544440",
    "end": "2551319"
  },
  {
    "text": "rewrite I have to say I would hope that the cor language was ported to other the",
    "start": "2551319",
    "end": "2556800"
  },
  {
    "text": "core Q language was ported to other languages because I think that it would have make a lot of sense for example to",
    "start": "2556800",
    "end": "2562240"
  },
  {
    "text": "be able to use it on the browser you know the client side browser for example um or or or from other languages because",
    "start": "2562240",
    "end": "2569079"
  },
  {
    "text": "I think it can add a lot as something as part of some running system as well as",
    "start": "2569079",
    "end": "2575200"
  },
  {
    "text": "used as a tool there is an initial version of the um Q playground that needs to be updated to",
    "start": "2575200",
    "end": "2581920"
  },
  {
    "text": "the latest Alpha version which is sort of now the kind of like the latest version uh that Q playground is compiled",
    "start": "2581920",
    "end": "2590440"
  },
  {
    "text": "to web assembly in much the same way that some of the go playgrounds are the actual go playground itself has got a a",
    "start": "2590440",
    "end": "2597359"
  },
  {
    "text": "real back end to it but some of the the go playgrounds are compiled to web assembly and there is a q version of",
    "start": "2597359",
    "end": "2604400"
  },
  {
    "text": "that um which at least demonstrates for now not in the most efficient way that you can have browser based um",
    "start": "2604400",
    "end": "2612599"
  },
  {
    "text": "interpretation of Q uh as well as exporting to yaml Jason Etc yeah the real value is in its design",
    "start": "2612599",
    "end": "2620200"
  },
  {
    "text": "isn't it so it almost doesn't really matter but yeah of course this is a go podcast and we all love go as well so",
    "start": "2620200",
    "end": "2626800"
  },
  {
    "text": "that makes [Music]",
    "start": "2626800",
    "end": "2635079"
  },
  {
    "text": "sense how often do you think about internal",
    "start": "2635079",
    "end": "2640680"
  },
  {
    "text": "tooling I'm talking about the back office apps the tool the customer service team uses to access your",
    "start": "2640680",
    "end": "2646359"
  },
  {
    "text": "databases the S3 upload you built last year for the marketing team that quick Firebase admin panel that let you",
    "start": "2646359",
    "end": "2652920"
  },
  {
    "text": "monitor key kpis and maybe even the tool that your data science team had together",
    "start": "2652920",
    "end": "2658040"
  },
  {
    "text": "so they can provide custom ad spend insights literally every line of business relies upon internal tooling",
    "start": "2658040",
    "end": "2664160"
  },
  {
    "text": "but if I'm being honest I don't know many Engineers out there who enjoy building internal tools let alone",
    "start": "2664160",
    "end": "2669839"
  },
  {
    "text": "getting them excited about maintaining or even supporting them and this is where retool comes in companies like",
    "start": "2669839",
    "end": "2676280"
  },
  {
    "text": "door Dash brex plat and even Amazon they use retool to build internal tooling",
    "start": "2676280",
    "end": "2681839"
  },
  {
    "text": "super fast retool gives you a point click drag and drop interface that makes it super simple to build these types of",
    "start": "2681839",
    "end": "2688200"
  },
  {
    "text": "interfaces in hours not days retool connects to any database or API for",
    "start": "2688200",
    "end": "2693599"
  },
  {
    "text": "example to pull data from postgress just just write a SQL query and drag and drop a table onto the canvas and if you want",
    "start": "2693599",
    "end": "2700599"
  },
  {
    "text": "to search across those fields add a search input bar and update your query save it share it it's too easy learn",
    "start": "2700599",
    "end": "2708160"
  },
  {
    "text": "more and try it free at ret tool.com changelog again ret.com",
    "start": "2708160",
    "end": "2714790"
  },
  {
    "text": "[Music]",
    "start": "2714790",
    "end": "2722500"
  },
  {
    "text": "changelog [Music]",
    "start": "2724880",
    "end": "2737850"
  },
  {
    "text": "when do we think Q will be version one and you know is there are there big gaps",
    "start": "2739200",
    "end": "2745880"
  },
  {
    "text": "are there still big kind of philosophical or conceptual problems to solve when it comes to to narrowing down",
    "start": "2745880",
    "end": "2752319"
  },
  {
    "text": "the language uh it's it's really talking about details right now like like really fine details right so I don't think uh",
    "start": "2752319",
    "end": "2758960"
  },
  {
    "text": "so there's a change probably coming up in the number model uh where we're going to say an integer is a subclass of a",
    "start": "2758960",
    "end": "2766400"
  },
  {
    "text": "general number whereas now there is a distinction between float and integer and that doesn't always work out quite",
    "start": "2766400",
    "end": "2773400"
  },
  {
    "text": "well so the end result will be somewhere smack in the middle of go ins versus",
    "start": "2773400",
    "end": "2778880"
  },
  {
    "text": "floats and go constants let's say you will hardly know the difference because",
    "start": "2778880",
    "end": "2784040"
  },
  {
    "text": "people there is already a number type right pred declared identifier which",
    "start": "2784040",
    "end": "2789359"
  },
  {
    "text": "people typically use float is discourage and if you use those there's really you won't know the difference between these two two models but uh they they're you",
    "start": "2789359",
    "end": "2797240"
  },
  {
    "text": "know it's it's a little bit if you use the the standard Library you might get some will be a little bit more",
    "start": "2797240",
    "end": "2802640"
  },
  {
    "text": "convenient um so there's there's some changes there can I be the first to suggest the error type please well there",
    "start": "2802640",
    "end": "2809240"
  },
  {
    "text": "is a it's it's critical to any letters so there isn't there is an error type Al although right now people have uh said",
    "start": "2809240",
    "end": "2815839"
  },
  {
    "text": "that the way it's written that right now it's a symbol and it looks kind of offensive to some people so we're we're",
    "start": "2815839",
    "end": "2821160"
  },
  {
    "text": "we're probably going to change it to a prede identifier named error is it the poop emoji it is not the poop",
    "start": "2821160",
    "end": "2828440"
  },
  {
    "text": "emoji okay that's there you go maybe I could suggest the poop emoji for error type yeah that can be the Roger Pepe of",
    "start": "2828440",
    "end": "2835160"
  },
  {
    "text": "Q yeah and and um but yeah so there are some um so performance is Is Not Great",
    "start": "2835160",
    "end": "2842480"
  },
  {
    "text": "yet and this is partly deliberate it's been designed to be or n right like o n",
    "start": "2842480",
    "end": "2848280"
  },
  {
    "text": "uh but it's definitely not been implemented this way so that's something that needs to be uh done and the",
    "start": "2848280",
    "end": "2853760"
  },
  {
    "text": "basically the idea was to try out it's written so that I can try out a lot of things fast uh so deliberately sometimes",
    "start": "2853760",
    "end": "2860920"
  },
  {
    "text": "I add it um you know made it easier and and made it slower essentially but uh",
    "start": "2860920",
    "end": "2866240"
  },
  {
    "text": "that would be one of the big next things to do and um yeah so so it's you know",
    "start": "2866240",
    "end": "2872000"
  },
  {
    "text": "eror the errors messages should they have become better already this last iteration but they need to become a lot",
    "start": "2872000",
    "end": "2878839"
  },
  {
    "text": "better and there are some uh probably also a different model where an error message is not just a message but really",
    "start": "2878839",
    "end": "2884880"
  },
  {
    "text": "contains like um a lot of context of where the error occurred so that you can do further analysis on it which is",
    "start": "2884880",
    "end": "2891000"
  },
  {
    "text": "important for a configuration language so oh it's really cool modules might be",
    "start": "2891000",
    "end": "2897040"
  },
  {
    "text": "worth mentioning as well yeah that's not so much standing in the way for 1.0 of the language but uh we are um you know",
    "start": "2897040",
    "end": "2904599"
  },
  {
    "text": "wanted to adopt the the the mvs right of go um which is actually perfect for",
    "start": "2904599",
    "end": "2910720"
  },
  {
    "text": "dealing with configuration hermetically right so go has this uh sorry Q has this concept of a a module very similar to go",
    "start": "2910720",
    "end": "2918440"
  },
  {
    "text": "so for example this is for for go users this might be interesting to know so there's this uh thing called Q get go so",
    "start": "2918440",
    "end": "2924800"
  },
  {
    "text": "you can point to any go package and it will then um look at the Go types of",
    "start": "2924800",
    "end": "2930920"
  },
  {
    "text": "this package and create Q definitions uh for it which you then can use in your Q codes right so you don't have to like",
    "start": "2930920",
    "end": "2937720"
  },
  {
    "text": "manually rewrite go to would also be a great way to learn Q I guess if you're familiar",
    "start": "2937720",
    "end": "2943160"
  },
  {
    "text": "with go you could do that and that'd be a great way to learn it's quite straightforward to do actually it works with kubernetes as well so you can just",
    "start": "2943160",
    "end": "2949400"
  },
  {
    "text": "take the whole kubernetes code base extract all the types and so you immediately have a typed kubernetes",
    "start": "2949400",
    "end": "2955720"
  },
  {
    "text": "thing right um so another thing uh so I in the burlin uh goer con I gave a talk",
    "start": "2955720",
    "end": "2962079"
  },
  {
    "text": "there I gave a little bit of a demo there where and it's just still in my client but just to show you what's",
    "start": "2962079",
    "end": "2967520"
  },
  {
    "text": "possible so there I go basically from a go binary or go codes basically directly",
    "start": "2967520",
    "end": "2973520"
  },
  {
    "text": "just go code directly to an open API specification so basically what it does I use Q get go to get the go types and",
    "start": "2973520",
    "end": "2981280"
  },
  {
    "text": "then I separately I gener uh use SSA to analyze the go code identify the",
    "start": "2981280",
    "end": "2987000"
  },
  {
    "text": "validation code and extract uh the constraints that these represent uh and",
    "start": "2987000",
    "end": "2992799"
  },
  {
    "text": "this is some you know barfed out que that looks really ugly uh but I can then run Q definition Q def",
    "start": "2992799",
    "end": "2999480"
  },
  {
    "text": "to combine the nicely documented um you know simple structs I just extracted",
    "start": "2999480",
    "end": "3004720"
  },
  {
    "text": "before with this bar q and it spits out a very nicely documented open API definition without any further you know",
    "start": "3004720",
    "end": "3012559"
  },
  {
    "text": "human input so this is the kind of things you you could do with automation",
    "start": "3012559",
    "end": "3018319"
  },
  {
    "text": "yeah yeah it's really cool this is really exciting it feels like um I think everyone's going to sort of just go and",
    "start": "3018319",
    "end": "3024760"
  },
  {
    "text": "start playing now with this because it really like the possibilities seem and you know the fact that it's solving",
    "start": "3024760",
    "end": "3030640"
  },
  {
    "text": "those real problems that we all face every day probably I think is great um and of course isn't it open source as",
    "start": "3030640",
    "end": "3037720"
  },
  {
    "text": "well it is yes so if people want to contribute what should they",
    "start": "3037720",
    "end": "3043280"
  },
  {
    "text": "do well there's a a bunch of issues in q.org so we have the the one issue uh",
    "start": "3043280",
    "end": "3050040"
  },
  {
    "text": "repo for for it's basically big mono repo right so most of the development is there and pick out an issue and see if",
    "start": "3050040",
    "end": "3058240"
  },
  {
    "text": "you can can fix it some of them are t uh tagged with a good first issue uh I'm",
    "start": "3058240",
    "end": "3064000"
  },
  {
    "text": "I'm not sure if they really are but uh you know actually using using Q itself",
    "start": "3064000",
    "end": "3069119"
  },
  {
    "text": "and trying to come up with different ways that you think you might want to",
    "start": "3069119",
    "end": "3074200"
  },
  {
    "text": "use q and trying is actually a really good way um sort of especially in these",
    "start": "3074200",
    "end": "3080799"
  },
  {
    "text": "prev1 days of providing feedback so yes of course is the contribution to the to",
    "start": "3080799",
    "end": "3087319"
  },
  {
    "text": "the Q code base itself but actually using Q that's where was sort of if",
    "start": "3087319",
    "end": "3092920"
  },
  {
    "text": "there are any rough edges just finding those now has been great and so those people who are using Q for lots of",
    "start": "3092920",
    "end": "3098920"
  },
  {
    "text": "different things so one of my favorite use cases for example is actually using Q to configure my GitHub actions so",
    "start": "3098920",
    "end": "3106839"
  },
  {
    "text": "instead of writing yaml I actually write my GitHub actions definitions in Q and",
    "start": "3106839",
    "end": "3113640"
  },
  {
    "text": "in almost all of my now and that validates against the the schema that",
    "start": "3113640",
    "end": "3120000"
  },
  {
    "text": "GitHub published which is published in Jason schema as it happens but that helped you know I think it was about six",
    "start": "3120000",
    "end": "3126359"
  },
  {
    "text": "months ago actually going through that process helped uncover a few issues with the Json schemer interpretation in the Q",
    "start": "3126359",
    "end": "3133280"
  },
  {
    "text": "project so trying out all these different ways in which Q can be used is a massive massive help so any sort of",
    "start": "3133280",
    "end": "3140520"
  },
  {
    "text": "feedback or bugs or problems that people find or suggestions that people have along those way is is going to be",
    "start": "3140520",
    "end": "3146400"
  },
  {
    "text": "fantastically helpful too great what a great way to contribute if you don't feel like you can get in and start",
    "start": "3146400",
    "end": "3152400"
  },
  {
    "text": "working on the code base using it and Reporting back is is great well it's",
    "start": "3152400",
    "end": "3157760"
  },
  {
    "text": "that time that great time for uh unpopular [Music]",
    "start": "3157760",
    "end": "3167240"
  },
  {
    "text": "opinions I actually think should probably [Music]",
    "start": "3167240",
    "end": "3174240"
  },
  {
    "text": "leave [Music]",
    "start": "3174240",
    "end": "3180599"
  },
  {
    "text": "so who wants to kick us off who has an unpopular opinion well um let me start with one I",
    "start": "3180599",
    "end": "3188440"
  },
  {
    "text": "think I've alluded to it before already but um so to me basically uh inheritance",
    "start": "3188440",
    "end": "3195400"
  },
  {
    "text": "is the biggest source of complexity in configuration languages and a great evil that should be inv voided you know which",
    "start": "3195400",
    "end": "3202480"
  },
  {
    "text": "might sound sound sensible after everything explained to today but it does mean it eliminates most configuration languages as a useful tool",
    "start": "3202480",
    "end": "3211319"
  },
  {
    "text": "so that might be unpopular well I don't know if it's going to be unpopular to go people because one of the nice things",
    "start": "3211319",
    "end": "3216799"
  },
  {
    "text": "about go is you can't build these complex type hierarchies and I I used to",
    "start": "3216799",
    "end": "3222119"
  },
  {
    "text": "do c and honestly I would build like Cathedrals out of T honestly beautiful",
    "start": "3222119",
    "end": "3230559"
  },
  {
    "text": "things generics generics with various conditions oh and then like the next day",
    "start": "3230559",
    "end": "3236640"
  },
  {
    "text": "when I'd go to try and look at it I was no no I start again and go sort of",
    "start": "3236640",
    "end": "3242280"
  },
  {
    "text": "doesn't have them um and so you can't tie yourself in knots in that same way",
    "start": "3242280",
    "end": "3248680"
  },
  {
    "text": "but we'll see we do test these unpopular opinions Marcel and if you don't manage to we we actually poll them on Twitter",
    "start": "3248680",
    "end": "3254559"
  },
  {
    "text": "to find out if they are indeed unpopular and if they're not you have to come back on and and think of another one that's",
    "start": "3254559",
    "end": "3261680"
  },
  {
    "text": "the rule okay I think that's a great one any others well um this isn't directly related to q",
    "start": "3261680",
    "end": "3269160"
  },
  {
    "text": "but I just say that I think that um tests can be more of a liability than an",
    "start": "3269160",
    "end": "3275319"
  },
  {
    "text": "asset oh interesting they can be in what way can they be so I think a lot of",
    "start": "3275319",
    "end": "3283400"
  },
  {
    "text": "people write tests that are aren't very useful you know they you know they're",
    "start": "3283400",
    "end": "3289119"
  },
  {
    "text": "not telling you very much about how how how well the code works and when your code changes you have to change all the",
    "start": "3289119",
    "end": "3294359"
  },
  {
    "text": "tests cuz maybe they're relying they're using mocks they're relying on internals and actually the tests are worse than",
    "start": "3294359",
    "end": "3299520"
  },
  {
    "text": "useless because they they're not they're not really telling you that the code works and you have to make you know",
    "start": "3299520",
    "end": "3306680"
  },
  {
    "text": "change maybe twice as much code or three times as much code as you would if you didn't have any tests at all so and I",
    "start": "3306680",
    "end": "3313559"
  },
  {
    "text": "think this is you know I I'm a great believer in trying to do more end to endend test as much as you can and and",
    "start": "3313559",
    "end": "3320559"
  },
  {
    "text": "I've been doing this with Q quite a lot in terms of building up libraries of you know corpuses and and you can you can do",
    "start": "3320559",
    "end": "3327520"
  },
  {
    "text": "that really nicely and Q it's a great format for putting you know if you got a test data directory you have a load of",
    "start": "3327520",
    "end": "3333839"
  },
  {
    "text": "stuff in Q and you can maintain that really well and the go cod just reads it as Jason doesn't care what that it's all",
    "start": "3333839",
    "end": "3339680"
  },
  {
    "text": "specified in Q um and that's maybe that's a a tenous connection but but",
    "start": "3339680",
    "end": "3345520"
  },
  {
    "text": "really uh you know I've seen I spent too much time dealing with",
    "start": "3345520",
    "end": "3351000"
  },
  {
    "text": "tests right yes um I I'm with actually with you on this one Roger entirely I",
    "start": "3351000",
    "end": "3358359"
  },
  {
    "text": "used to build Cathedrals out of tests really complicated things beautiful",
    "start": "3358359",
    "end": "3364520"
  },
  {
    "text": "structures yeah I I've learned kind of the hard way over time of of just tests",
    "start": "3364520",
    "end": "3370799"
  },
  {
    "text": "being um and a bit of an albatross around your neck versus you know compared to like it when when you get",
    "start": "3370799",
    "end": "3377359"
  },
  {
    "text": "them right you definitely feel better about it and um and you're right when",
    "start": "3377359",
    "end": "3383000"
  },
  {
    "text": "they're too brittle when they're too bound to your code you almost end up",
    "start": "3383000",
    "end": "3388280"
  },
  {
    "text": "just saying the same thing twice which doesn't really have any value at all does it um so yeah again we're going to",
    "start": "3388280",
    "end": "3394839"
  },
  {
    "text": "test this one but I have a feeling that one's not going to be unpopular but we'll see good one Mr Jolly I don't have",
    "start": "3394839",
    "end": "3402280"
  },
  {
    "text": "one unfortunately my mine was going to be a controversial one that it should we should be all referring to this as Q as",
    "start": "3402280",
    "end": "3408400"
  },
  {
    "text": "opposed to Q Lang but we somewhat hijacked that earlier on unfortunately ah sorry mate but but I an unpopular",
    "start": "3408400",
    "end": "3416000"
  },
  {
    "text": "opinion a couple of weeks ago so I I'm happy to sit out okay right so okay",
    "start": "3416000",
    "end": "3421559"
  },
  {
    "text": "that's quite that is quite unpopular to not give an opinion and in the spirit of Q that's",
    "start": "3421559",
    "end": "3427240"
  },
  {
    "text": "quite meta as well you sort of you know I trimmed my un popular opinion",
    "start": "3427240",
    "end": "3433400"
  },
  {
    "text": "yeah that's a q joke isn't it it is yeah yeah yeah I don't get it yet but I'm going to learn q and then I'm going to",
    "start": "3433400",
    "end": "3439480"
  },
  {
    "text": "come back and listen I'm going to be I'm going to be loving that okay well uh that is all the time we have for today",
    "start": "3439480",
    "end": "3447280"
  },
  {
    "text": "but thank you uh gentlemen so much for um Coming on and telling us about this it's definitely got me excited about Q I",
    "start": "3447280",
    "end": "3454359"
  },
  {
    "text": "can already think of a few different use cases where it really I think is perfect so I'll be one of those contributors",
    "start": "3454359",
    "end": "3461799"
  },
  {
    "text": "trying things out all that leaves me now is to say you boy down there listen is",
    "start": "3461799",
    "end": "3468280"
  },
  {
    "text": "that prize turkey still in the window right go and get it then and I'll give",
    "start": "3468280",
    "end": "3474000"
  },
  {
    "text": "you a top tell you these Victorian orphans what are we going to do with them Roger pop",
    "start": "3474000",
    "end": "3480079"
  },
  {
    "text": "them in the workhouse is what you were saying earlier is it basically don't worry this get edited",
    "start": "3480079",
    "end": "3488160"
  },
  {
    "text": "out so thank you so much for joining us Marcel Paul Roger it's a pleasure and",
    "start": "3488160",
    "end": "3495400"
  },
  {
    "text": "thanks for listening see you next time thank you Matt thanks Matt",
    "start": "3495400",
    "end": "3501160"
  },
  {
    "text": "cheers if this is your first time listening to go time subscribe now at go",
    "start": "3502760",
    "end": "3507839"
  },
  {
    "text": "time. FM or search for go time in your favorite podcast app and hit the Subscribe button there you'll find us",
    "start": "3507839",
    "end": "3515039"
  },
  {
    "text": "and hey while you're there leave it's a festar review we'd appreciate that this episode was hosted by Matt ryer it was",
    "start": "3515039",
    "end": "3521960"
  },
  {
    "text": "produced by Jared Santo with music by The Beat freak break master cylinder go time is brought to you by our awesome",
    "start": "3521960",
    "end": "3527960"
  },
  {
    "text": "sponsors special thanks to fastly launch darkley and linode on the next episode",
    "start": "3527960",
    "end": "3533599"
  },
  {
    "text": "panelists Angelica Chris John and Johnny discuss why riding is an important discipline for software developers stay",
    "start": "3533599",
    "end": "3539720"
  },
  {
    "text": "tuned for that one it's hitting your podcast feed next [Music]",
    "start": "3539720",
    "end": "3561828"
  },
  {
    "text": "week [Music]",
    "start": "3563640",
    "end": "3593640"
  },
  {
    "text": "come",
    "start": "3593640",
    "end": "3596640"
  },
  {
    "text": "[Music]",
    "start": "3605100",
    "end": "3608409"
  },
  {
    "text": "[Music]",
    "start": "3610770",
    "end": "3614349"
  }
]