[
  {
    "text": "bandwidth for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at change log because of rbar check them out at roar.com and we're hosted on linode",
    "start": "5520",
    "end": "11480"
  },
  {
    "text": "cloud servers head to lin.com changelog this episode is brought to you",
    "start": "11480",
    "end": "16960"
  },
  {
    "text": "by digital ocean digital ocean is the simplest Cloud platform for developers and teams with products like droplets",
    "start": "16960",
    "end": "24000"
  },
  {
    "text": "spaces kubernetes load balancers block storage and pre-built one-click apps you",
    "start": "24000",
    "end": "29199"
  },
  {
    "text": "can deploy manage and scale Cloud applications faster and more efficiently on digital ocean whether you're running",
    "start": "29199",
    "end": "35719"
  },
  {
    "text": "one virtual machine or 10,000 digital ocean makes managing your infrastructure way too easy head to do. co/ changelog",
    "start": "35719",
    "end": "44320"
  },
  {
    "text": "again do. change",
    "start": "44320",
    "end": "48760"
  },
  {
    "text": "[Music] log let's do it it's it's go time",
    "start": "54060",
    "end": "61320"
  },
  {
    "text": "welcome to go time a podcast featuring a diverse panel and special guests discussing Cloud infrastructure",
    "start": "61320",
    "end": "67119"
  },
  {
    "text": "distributed systems microservices kubernetes Docker oh and also go we",
    "start": "67119",
    "end": "72560"
  },
  {
    "text": "record live every Tuesday at 300 p.m. Eastern new Pacific join the community slack with us in real time during the",
    "start": "72560",
    "end": "78400"
  },
  {
    "text": "show in the gotime FM channel in go for slack follow us on Twitter we're at gotime FM listen live at Chang law.com",
    "start": "78400",
    "end": "85600"
  },
  {
    "text": "or subscribe at Chang law.com gotime and now on to the",
    "start": "85600",
    "end": "90810"
  },
  {
    "text": "[Applause] show hey everybody Welcome To Go time today we are bringing on a guest Dan",
    "start": "90810",
    "end": "97920"
  },
  {
    "text": "scales uh you want to say hi Dan hello and then we have our normal panelists or",
    "start": "97920",
    "end": "104079"
  },
  {
    "text": "some of them uh Matt ryer hello and Carmen Ando hello and myself John",
    "start": "104079",
    "end": "111079"
  },
  {
    "text": "Calhoun So today we're going to be talking about Matt's favorite subject defer so uh Matt I'll let you go ahead",
    "start": "111079",
    "end": "118640"
  },
  {
    "text": "and kick it off what do you want to know about defer today well first of all it genuinely is",
    "start": "118640",
    "end": "125079"
  },
  {
    "text": "my favorite feature of the language nice yeah it's it stands out because it it",
    "start": "125079",
    "end": "131400"
  },
  {
    "text": "just has this kind of readability aspect to it apart from it the functional kind",
    "start": "131400",
    "end": "136760"
  },
  {
    "text": "of use of it it makes it so clear what you intend and anything that does that I",
    "start": "136760",
    "end": "142160"
  },
  {
    "text": "always think is great and so defer is a great example for anybody that might be",
    "start": "142160",
    "end": "147239"
  },
  {
    "text": "new to go uh who doesn't know what defer is um I'm happy to give a little overview",
    "start": "147239",
    "end": "152840"
  },
  {
    "text": "from my perspective and then we're going to definitely dig into it deeper with Dan which I'm looking forward to yeah so",
    "start": "152840",
    "end": "159959"
  },
  {
    "text": "essentially you tell it to call a function when another function exits so when you leave whichever function you're",
    "start": "159959",
    "end": "166519"
  },
  {
    "text": "in anything you've deferred will then get called so it's a bit like saying",
    "start": "166519",
    "end": "172680"
  },
  {
    "text": "yeah defer this function and however you exit from this exactly then yeah we want",
    "start": "172680",
    "end": "178840"
  },
  {
    "text": "the defers to R run and that's nice because well we'll talk about I suppose use cases yeah so the use cases actually",
    "start": "178840",
    "end": "186120"
  },
  {
    "text": "then of of this simple it's it's quite a simple little thing I think but has kind",
    "start": "186120",
    "end": "192120"
  },
  {
    "text": "of amazing uh utility yeah definitely I think it solves a problem that you kind",
    "start": "192120",
    "end": "198000"
  },
  {
    "text": "of run into if you don't have it which is you you want to take care of some things at the end of the function you want to make sure they get done and you",
    "start": "198000",
    "end": "204799"
  },
  {
    "text": "want to make sure they get done even as the code changes and evolves right so it helps with mt you want to put right near",
    "start": "204799",
    "end": "212000"
  },
  {
    "text": "you know you're opening a file you want to put right near that statement where you open the file you want to put something says I need to close the file",
    "start": "212000",
    "end": "218599"
  },
  {
    "text": "at the end of the function and um you know the classic way in say C or something is to you know at every single",
    "start": "218599",
    "end": "225439"
  },
  {
    "text": "exit point you got to put a close there and you know the defer is just a really nice way to express it and it's right",
    "start": "225439",
    "end": "231319"
  },
  {
    "text": "near the open so so it's very well expressed and um you can contrast it with other languages just like a triin",
    "start": "231319",
    "end": "238439"
  },
  {
    "text": "in Java or JavaScript script which is doing something similar TR finally is another contract which says you know do",
    "start": "238439",
    "end": "244920"
  },
  {
    "text": "some code and at the end of it make sure you do something in the finally Clause but that finally that stuff in the",
    "start": "244920",
    "end": "250959"
  },
  {
    "text": "finally Clause is pretty far away from where you did the open so just as you said one of your nice things is right",
    "start": "250959",
    "end": "257400"
  },
  {
    "text": "there and I I agree with that it really makes it obvious I want to get this done and it needs to be done and with triy",
    "start": "257400",
    "end": "263639"
  },
  {
    "text": "finally you could easily end up nesting things quite a lot if you trying to open a few files and then you want to make",
    "start": "263639",
    "end": "270280"
  },
  {
    "text": "sure they're all closed and maybe just make making some API calls as well and doing a few other things you can end up",
    "start": "270280",
    "end": "277280"
  },
  {
    "text": "with really sort of deeply nested TR catch blocks all over the place and one of the things defer gives you is that it",
    "start": "277280",
    "end": "284759"
  },
  {
    "text": "doesn't do that does it no exactly it's it's not nested in that way and you know I think uh because of the nesting you",
    "start": "284759",
    "end": "291800"
  },
  {
    "text": "can either do that nesting or because people don't really want to do the nesting in the trifin usually they put a",
    "start": "291800",
    "end": "297240"
  },
  {
    "text": "lot of conditionals in the fely block so what they'll do is they'll have one try",
    "start": "297240",
    "end": "302520"
  },
  {
    "text": "and they'll usually say you know if this file hand is not equal to nil which means I didn't open earlier then I'm",
    "start": "302520",
    "end": "309400"
  },
  {
    "text": "going to close does that make sense and so they'll hold a whole bunch of conditionals and so the nice thing about defer is you don't have those",
    "start": "309400",
    "end": "316160"
  },
  {
    "text": "conditionals you just at the point where you actually open the file and you definitely did it then you put the defer and then the the go will take care of",
    "start": "316160",
    "end": "323600"
  },
  {
    "text": "running it exactly when you you actually did the defer I used to think that defer was a",
    "start": "323600",
    "end": "329720"
  },
  {
    "text": "compil Time operation where it literally just copied the code at the exit points",
    "start": "329720",
    "end": "335560"
  },
  {
    "text": "but of course when you consider that you can schedule defer statements inside loops and all sorts of things and",
    "start": "335560",
    "end": "342400"
  },
  {
    "text": "conditionally so yeah it isn't that is it no exactly yeah so it's it's definitely much more Dynamic construct",
    "start": "342400",
    "end": "349800"
  },
  {
    "text": "than the TR finally or we can talk about the kind of the equivalent in C++ in a little bit but uh those are kind of more",
    "start": "349800",
    "end": "356639"
  },
  {
    "text": "static constructs and therefore the compiler knows everything and when and where you run that fining Clause is is",
    "start": "356639",
    "end": "362800"
  },
  {
    "text": "of course determined but the defer you don't it's the compiler doesn't know if you're actually going to run the defer",
    "start": "362800",
    "end": "368479"
  },
  {
    "text": "need to run the defer if it's in a conditional or a loop and so yes so the implementation and go has to account for",
    "start": "368479",
    "end": "376400"
  },
  {
    "text": "the fact that it can be dynamic and so you have to have kind of a general implementation that depends somewhat on",
    "start": "376400",
    "end": "382880"
  },
  {
    "text": "the runtime in order to deal with those Dynamic cases and then the optimization that we've been doing over time is to",
    "start": "382880",
    "end": "389080"
  },
  {
    "text": "kind of deal with those simpler cases more statically so that's of course the the",
    "start": "389080",
    "end": "394199"
  },
  {
    "text": "oper we'll talk about later that I did does kind of what you said which is in the simpler cases actually run that code",
    "start": "394199",
    "end": "400440"
  },
  {
    "text": "right at the exit as you would might expect in the non- move cases I see but where it's more",
    "start": "400440",
    "end": "407039"
  },
  {
    "text": "complicated and it can't do that it falls back to the previous mechanism exactly exactly yes oh yes that's very",
    "start": "407039",
    "end": "414440"
  },
  {
    "text": "cool so you mentioned what you did maybe you could just tell us a little bit about where you work and what you're",
    "start": "414440",
    "end": "419960"
  },
  {
    "text": "doing a bit about what you've been doing as well it' be quite interesting to hear about in the past as well as in the",
    "start": "419960",
    "end": "425400"
  },
  {
    "text": "current go group or yeah sure yeah so I I've always been interested in uh kind",
    "start": "425400",
    "end": "430599"
  },
  {
    "text": "of lowlevel uh systemy stuff both parallel and distributed processing",
    "start": "430599",
    "end": "435800"
  },
  {
    "text": "operating systems but also compilers and languages so I've kind of been doing a little bit of the circuit and some kind",
    "start": "435800",
    "end": "442120"
  },
  {
    "text": "of parall and distributed work in PhD thesis and and work after that and then",
    "start": "442120",
    "end": "447199"
  },
  {
    "text": "I was at bware for a fair bit of time did a lot of operating system stuff but that kind of involves distributive",
    "start": "447199",
    "end": "452560"
  },
  {
    "text": "systems as well because we do a lot with high availability and keeping version machines highly available and restarting",
    "start": "452560",
    "end": "458000"
  },
  {
    "text": "them and so forth and also being where I focused Fair bit on high performance storage and virtualizing storage so uh",
    "start": "458000",
    "end": "465720"
  },
  {
    "text": "did quite a variety of stuff and then you know I wanted to get back to kind of lower level stuff like uh compilers and",
    "start": "465720",
    "end": "472159"
  },
  {
    "text": "system stuff after doing other things for a while and so I transferred to the go team about a year ago within Google",
    "start": "472159",
    "end": "478159"
  },
  {
    "text": "and um just was interested in doing languages and compilers and I have done compiler work in the past so I've worked",
    "start": "478159",
    "end": "484400"
  },
  {
    "text": "a little bit uh a fair bit of time on some stuff to help optimize go usage in Google Google itself and then in the",
    "start": "484400",
    "end": "491080"
  },
  {
    "text": "last six months or so I've been you know working with the compiler and runtime people and kind of a new you know newer",
    "start": "491080",
    "end": "496680"
  },
  {
    "text": "person compared to a lot of the more senior people here you know got this very interesting project to optimize defers further yes well it that sounds",
    "start": "496680",
    "end": "505080"
  },
  {
    "text": "great and this project to optimize defer is kind of a great one because one of the things I love about the way that the",
    "start": "505080",
    "end": "512919"
  },
  {
    "text": "situation is at the moment with go is that we can use these language features",
    "start": "512919",
    "end": "518560"
  },
  {
    "text": "somewhat liberally and I tend to use them somewhat liberally and sometimes",
    "start": "518560",
    "end": "524360"
  },
  {
    "text": "there's per there's a performance there like a tradeoff between the performance and the readability and so you know",
    "start": "524360",
    "end": "530680"
  },
  {
    "text": "occasionally it's worth having very difficult to read code if in your particular case it's valuable that it is",
    "start": "530680",
    "end": "538880"
  },
  {
    "text": "very performant and so I I get that for sure and there are sometimes in my code",
    "start": "538880",
    "end": "544399"
  },
  {
    "text": "where I've eventually optimized way some defers but mostly not but what were the",
    "start": "544399",
    "end": "551880"
  },
  {
    "text": "performance issues like what what's the actual problem yeah so it's um you know",
    "start": "551880",
    "end": "557160"
  },
  {
    "text": "defers in general are not amazingly expensive uh uh or you know and they've",
    "start": "557160",
    "end": "563240"
  },
  {
    "text": "been optimized quite a bit over the last couple years there have been a number of steps of optimization um so you know in",
    "start": "563240",
    "end": "568839"
  },
  {
    "text": "most cases um you don't see the overhead but there are some very common cases uh",
    "start": "568839",
    "end": "574000"
  },
  {
    "text": "where you might you do see the overhead and that's when you defer a function that's fairly inexpensive and that you",
    "start": "574000",
    "end": "579320"
  },
  {
    "text": "know one of the most common cases um is lock unlock and that's you know so a a a",
    "start": "579320",
    "end": "585160"
  },
  {
    "text": "lock an unlock operation is very inexpensive in the common case when you hold the lock of course because you're",
    "start": "585160",
    "end": "591120"
  },
  {
    "text": "basically just sort of setting a lock to zero um and so but we don't want to discourage people from doing that",
    "start": "591120",
    "end": "597279"
  },
  {
    "text": "because that's a perfect use of to First so so we want to optimize the first so",
    "start": "597279",
    "end": "602399"
  },
  {
    "text": "in in the common case in the cases where it's it's not so Dynamic and you can analyze everything we want to make it",
    "start": "602399",
    "end": "608200"
  },
  {
    "text": "very inexpensive so that you don't even see overhead or much overhead for you know deferring an unlock or say",
    "start": "608200",
    "end": "614600"
  },
  {
    "text": "deferring an atomic operation or you know often I see you know maybe you have a parser and you know you kind of bump",
    "start": "614600",
    "end": "621320"
  },
  {
    "text": "up a nesting level at the beginning of a function or something and you defer the the bumping of the nesting level down so",
    "start": "621320",
    "end": "626920"
  },
  {
    "text": "all those functions can be very inexpensive and so you want to make sure the defer overhead doesn't dominate those functions of course you can use",
    "start": "626920",
    "end": "633800"
  },
  {
    "text": "defer in other cases for open and close the files that doesn't matter as much because an open of a file is probably",
    "start": "633800",
    "end": "638920"
  },
  {
    "text": "somewhat expensive and you know another way to think of it is also we also want to be closer to what C++ say is and C++",
    "start": "638920",
    "end": "646279"
  },
  {
    "text": "has a kind of an equivalent feature which is basically it guarantees to run destructors of um of variables when you",
    "start": "646279",
    "end": "654360"
  },
  {
    "text": "leave the scope of the variable so is that where it's a it's a class that has a a D structor yes exactly so you may",
    "start": "654360",
    "end": "661920"
  },
  {
    "text": "allocate um just a normal object for instance and it has a Constructor and",
    "start": "661920",
    "end": "667120"
  },
  {
    "text": "you you declare the variable the being a block and if that class of that variable has a Constructor you run the",
    "start": "667120",
    "end": "672880"
  },
  {
    "text": "Constructor at the time that you kind of enter the block and then C++ guarantees that you will run the Destructor at the",
    "start": "672880",
    "end": "679079"
  },
  {
    "text": "end of the block and that may kind of deallocate subobjects or whatnot and the",
    "start": "679079",
    "end": "684959"
  },
  {
    "text": "main thing is it guarantees it no matter what whether you return early from the function out of the block or also again",
    "start": "684959",
    "end": "691079"
  },
  {
    "text": "like defer if you're panicking and that's especially important just like defer if you're kind of holding on to a",
    "start": "691079",
    "end": "697040"
  },
  {
    "text": "resource you know which is a common case for whether it's a lock or a file and so C++ uh that one of the acronyms that's",
    "start": "697040",
    "end": "704680"
  },
  {
    "text": "used that came from I think bar JN trop is resource acquisition is",
    "start": "704680",
    "end": "710680"
  },
  {
    "text": "initialization which it's called ra but any case he's basically just saying that",
    "start": "710680",
    "end": "716200"
  },
  {
    "text": "you can express kind of acquiring resource and then guaranteeing that you're going to release at the end the",
    "start": "716200",
    "end": "721240"
  },
  {
    "text": "block by initializing a variable uh and so what people do is for instance they might have a class which is basically",
    "start": "721240",
    "end": "726800"
  },
  {
    "text": "lock and they acquire it at the beginning of the block and then just by exiting the block the lock is UN is",
    "start": "726800",
    "end": "733000"
  },
  {
    "text": "released so all that was kind of a description to say well C++ especially GCC has made that overhead basically uh",
    "start": "733000",
    "end": "740240"
  },
  {
    "text": "zero they do the right thing they generate code at the end of the block um that just calls the unlock call and so",
    "start": "740240",
    "end": "747480"
  },
  {
    "text": "um you know it's very low overhead for that and then they do the extra work to make sure it happens at Panic time and",
    "start": "747480",
    "end": "752800"
  },
  {
    "text": "so you know if we can get closer to that um just all the time then people don't have to think about it for defer as well",
    "start": "752800",
    "end": "760120"
  },
  {
    "text": "that's very interesting it's funny you mentioned a little nugget there which is something that surprises a lot of people I found which is that of course well not",
    "start": "760120",
    "end": "767519"
  },
  {
    "text": "of course at all actually and and this surprised me in the beginning but when code panics the defers still run and",
    "start": "767519",
    "end": "774720"
  },
  {
    "text": "that's actually good to know but I suppose also speaks a little bit to defer history doesn't it yeah so if you",
    "start": "774720",
    "end": "781360"
  },
  {
    "text": "want to get a little bit into the history I think and I don't I'm not the Super expert on this but I've been",
    "start": "781360",
    "end": "786600"
  },
  {
    "text": "asking around I think you know most errors are handled using error returns",
    "start": "786600",
    "end": "791920"
  },
  {
    "text": "as people know but there is always a need for a panic because there's always a case where you run into a bug or say",
    "start": "791920",
    "end": "798320"
  },
  {
    "text": "divide by zero or something and you're going to have to do a panic because there's no kind of logical way to continue immediately so the creators of",
    "start": "798320",
    "end": "806399"
  },
  {
    "text": "go knew they had a panic and they knew they kind of had to have mechanisms to deal with it in particular sometimes you",
    "start": "806399",
    "end": "812279"
  },
  {
    "text": "actually even want to recover from a a runtime panic and one case for that you",
    "start": "812279",
    "end": "817399"
  },
  {
    "text": "might say well yeah this is a bug you know why do you want to deal with this you know most time you don't but you",
    "start": "817399",
    "end": "822800"
  },
  {
    "text": "want to just let the program crash but suppose you have a say a web server that has multiple threads and they're",
    "start": "822800",
    "end": "827880"
  },
  {
    "text": "handling requests and you know you want that web server to be kind of reliable and up even if there's maybe a bug",
    "start": "827880",
    "end": "834320"
  },
  {
    "text": "somewhere and so you have multiple grow routines serving requests and one of the grow team may run into a bug and panic",
    "start": "834320",
    "end": "841199"
  },
  {
    "text": "you may still want to do what's called recover you may want to kind of catch that Panic on the way out and you know",
    "start": "841199",
    "end": "848000"
  },
  {
    "text": "just say okay I'm just going to kill this go team but I need to continue the web server so the creators of go and",
    "start": "848000",
    "end": "854480"
  },
  {
    "text": "inic Ken Thompson said knew he kind of wanted to deal with kind of maybe deal",
    "start": "854480",
    "end": "859680"
  },
  {
    "text": "with panics and maybe have some way of recovering them or modifying them and so uh the defer was a way to do that and so",
    "start": "859680",
    "end": "867440"
  },
  {
    "text": "one context for defer it's a way to run code as you're doing a panic either to release resources which are important",
    "start": "867440",
    "end": "874839"
  },
  {
    "text": "and it's especially important if you're going to do a recover which means you want to release resources um that might be otherwise",
    "start": "874839",
    "end": "881680"
  },
  {
    "text": "held by the web server that's continuing and then also you may want to do this recover step after you release resources",
    "start": "881680",
    "end": "888440"
  },
  {
    "text": "which says Okay I want to keep running I don't want to kill the entire program I want to kind of recover out kill my go",
    "start": "888440",
    "end": "894920"
  },
  {
    "text": "routine and then you know maybe spawn another go routine or what whatnot yeah well the default behavior is that if a",
    "start": "894920",
    "end": "902720"
  },
  {
    "text": "panic happens inside an hdtb Handler it just prints the Panic out into to the",
    "start": "902720",
    "end": "907800"
  },
  {
    "text": "terminal doesn't it and Carries On It doesn't crash the program I think because there's a recover there uh right",
    "start": "907800",
    "end": "914880"
  },
  {
    "text": "so they've recovered it in the standard Library yes exactly yeah I know like one",
    "start": "914880",
    "end": "919959"
  },
  {
    "text": "of the things I found Panic recovery useful for is if you're using another library that like you don't have control",
    "start": "919959",
    "end": "925199"
  },
  {
    "text": "of and you can't change for some reason and they happen to panic at some instance where you don't fully agree with MH I know I found that really",
    "start": "925199",
    "end": "931800"
  },
  {
    "text": "useful as like okay I can actually capture this in my code and and handle it in some better way or do something",
    "start": "931800",
    "end": "936920"
  },
  {
    "text": "better about it so I think another maybe it wasn't what they were thinking about but one useful side effect of that is",
    "start": "936920",
    "end": "942160"
  },
  {
    "text": "that you can use code that you don't necessarily agree with how they handled their errors and you can still make use",
    "start": "942160",
    "end": "947279"
  },
  {
    "text": "of it and you not have to recreate that entire library or whatever it is cuz that would be a massive pain if that's",
    "start": "947279",
    "end": "952519"
  },
  {
    "text": "how it worked all the time yes that totally makes sense definitely you the code that you don't have control over",
    "start": "952519",
    "end": "958199"
  },
  {
    "text": "has a in it say and so for certain things you want to make sure your program doesn't crash if they have a bug",
    "start": "958199",
    "end": "963319"
  },
  {
    "text": "in their program or as you said you don't agree with the error that they are indicating so at a high level does",
    "start": "963319",
    "end": "970440"
  },
  {
    "text": "somebody want to go over just like what that recovery looks like like why we need to use defer how you would use defer cuz I know we've talked about it",
    "start": "970440",
    "end": "977040"
  },
  {
    "text": "I'm guessing most listeners have seen this but just at a high level yeah well you tend to use an anonymous function",
    "start": "977040",
    "end": "982759"
  },
  {
    "text": "don't you so you defer the function and do it in line and then there's a block",
    "start": "982759",
    "end": "989120"
  },
  {
    "text": "so you have a kind of at the top of the function a block of code that is in a defer so you know that this is going to",
    "start": "989120",
    "end": "994519"
  },
  {
    "text": "run at the end and then you you call is a built-in function is it I suppose yeah",
    "start": "994519",
    "end": "1000360"
  },
  {
    "text": "it's a function called recover and and what does that return that returns so it there's a bunch of",
    "start": "1000360",
    "end": "1007639"
  },
  {
    "text": "specifications on when that actually can successfully recover for instance it needs to be running in a top level defer",
    "start": "1007639",
    "end": "1014959"
  },
  {
    "text": "during the Panic sequence so as you said if you have a defer in a fun function that you maybe deferred this inline",
    "start": "1014959",
    "end": "1020920"
  },
  {
    "text": "function at the top of function and now you had a panic say the current function called a bunch of functions and had a",
    "start": "1020920",
    "end": "1027240"
  },
  {
    "text": "panic as you're doing what's called stack unwinding and running your defers if you run into a particular defer that",
    "start": "1027240",
    "end": "1034240"
  },
  {
    "text": "directly calls recover then you can successfully run recover that panic and",
    "start": "1034240",
    "end": "1039640"
  },
  {
    "text": "with that successful Panic the recover function will return the value of the panic what you supplied to the panic and",
    "start": "1039640",
    "end": "1047160"
  },
  {
    "text": "it could be you know an error object or string or whatever and that defer function finishes and as long as it",
    "start": "1047160",
    "end": "1053919"
  },
  {
    "text": "finishes successfully then now you're kind of out of panic mode and you'll finish any other defers in the function",
    "start": "1053919",
    "end": "1061280"
  },
  {
    "text": "and then you'll return to the CER so um you basically the Panic has kind of ended kind of all your functions up to",
    "start": "1061280",
    "end": "1068400"
  },
  {
    "text": "the point of the recover but the recover allows you to then return to the the collar of the one that did the recover",
    "start": "1068400",
    "end": "1075360"
  },
  {
    "text": "and so you know at that point web Ser whatever you can continue on yeah I think one of the cases I've seen",
    "start": "1075360",
    "end": "1081080"
  },
  {
    "text": "that this combos really well with is using named return variables gives you the option to actually set a return",
    "start": "1081080",
    "end": "1086559"
  },
  {
    "text": "value yourself then so like a lot of people I know look at named return variables and you know you have",
    "start": "1086559",
    "end": "1091720"
  },
  {
    "text": "different opinions about whether or not you should use them but one of the most obvious and like most common probably",
    "start": "1091720",
    "end": "1096880"
  },
  {
    "text": "used cases is when you need to recover from a panic and then you need to actually return some sort of error to say like there was an error and like I",
    "start": "1096880",
    "end": "1104000"
  },
  {
    "text": "actually want this to turn into an error rather than a panic exactly yeah so you can translate kind of the panic error or",
    "start": "1104000",
    "end": "1110360"
  },
  {
    "text": "whatever to a a return value error exactly",
    "start": "1110360",
    "end": "1116080"
  },
  {
    "text": "[Music]",
    "start": "1116490",
    "end": "1122280"
  },
  {
    "text": "yes this episode is brought to you by ghost CD with Native Integrations for kubernetes and a Helm chart to quickly",
    "start": "1122280",
    "end": "1129440"
  },
  {
    "text": "get started ghost CD is an easy choice for cloud native teams with GH CD running on kubernetes you define your",
    "start": "1129440",
    "end": "1135799"
  },
  {
    "text": "build workflow and let go CD provision and scale build infrastructure on the Fly for you g CD installs as a",
    "start": "1135799",
    "end": "1143000"
  },
  {
    "text": "kubernetes native application which allows for ease of operations easily upgrade and maintain go C using Helm",
    "start": "1143000",
    "end": "1149799"
  },
  {
    "text": "scale your build infrastructure elastically with a new elastic agent that uses kubernetes conventions to",
    "start": "1149799",
    "end": "1155320"
  },
  {
    "text": "dynamically scale go CD agents go CD also has first class integration with Docker Registries easily composed track",
    "start": "1155320",
    "end": "1163280"
  },
  {
    "text": "and visualize deployments on kubernetes learn more and get started at ghost c.org",
    "start": "1163280",
    "end": "1168440"
  },
  {
    "text": "netes again go c.org [Music]",
    "start": "1168440",
    "end": "1174369"
  },
  {
    "text": "[Music] kubernetes as a general rule I try and",
    "start": "1177010",
    "end": "1183559"
  },
  {
    "text": "exclusively use errors and I try not to use panics at all so it was interesting",
    "start": "1183559",
    "end": "1189000"
  },
  {
    "text": "that that was where defer kind of came from wasn't it it was in order to be able to recover from panics that they",
    "start": "1189000",
    "end": "1195640"
  },
  {
    "text": "needed the this feature mhm is that right Dan and then and so that's where defer came from in for that case it's",
    "start": "1195640",
    "end": "1202080"
  },
  {
    "text": "just funny in my particular case I never Ed the panic but I used the defer all the time yeah it was kind of a good",
    "start": "1202080",
    "end": "1208720"
  },
  {
    "text": "combination that defer can be used for both recover and for the just kind of more standard ways of of releasing",
    "start": "1208720",
    "end": "1215440"
  },
  {
    "text": "resources and I don't we don't want to overemphasize the recover or the Panic case because that's certainly not the go",
    "start": "1215440",
    "end": "1222039"
  },
  {
    "text": "methodology the go method of having normal errors that you expect or whatever is obviously returned values",
    "start": "1222039",
    "end": "1229120"
  },
  {
    "text": "and so you don't want to depend on recover Panic recover as a way to return errors very often they have to be very",
    "start": "1229120",
    "end": "1234679"
  },
  {
    "text": "unusual because that that path is not optimized right and so the normal case",
    "start": "1234679",
    "end": "1239720"
  },
  {
    "text": "of turning erors by return value it's definitely you can do it and definitely is a good way of as you said of of",
    "start": "1239720",
    "end": "1244840"
  },
  {
    "text": "dealing with kind of packages you don't control and errors you don't expect and so forth but yes I think it's very nice",
    "start": "1244840",
    "end": "1250679"
  },
  {
    "text": "that defer is use both for dealing with Rec cover but I would say even more importantly at this point doing that the",
    "start": "1250679",
    "end": "1257120"
  },
  {
    "text": "resource relasing of resources and the guaranteeing of the function that part is the one that is a really nice feature",
    "start": "1257120",
    "end": "1263159"
  },
  {
    "text": "that helps you maintain your code and lets you do these interesting stuff for me it's kind of like note taking as I write code like it's like oh I open this",
    "start": "1263159",
    "end": "1269880"
  },
  {
    "text": "file here's a little note to close it and like I found you know just in everyday life stuff I'm better if I take notes like that so it's like interesting",
    "start": "1269880",
    "end": "1276320"
  },
  {
    "text": "that in code we can now Express that and you know very clearly say okay this is something I need to do but I mean you've",
    "start": "1276320",
    "end": "1282080"
  },
  {
    "text": "already done it by doing that which is really nice m and I I know people have their favorite constructs in different",
    "start": "1282080",
    "end": "1287760"
  },
  {
    "text": "Lang try finally whatever but I do think defer fits well with the go language you know it's very explicit go tends to not",
    "start": "1287760",
    "end": "1294600"
  },
  {
    "text": "have too many hidden functions or anything or or you know functions off and other things so it it it's very nice",
    "start": "1294600",
    "end": "1300000"
  },
  {
    "text": "to just have that you know explicit this is what I need to do and it's right near the open it's so expressive that I will",
    "start": "1300000",
    "end": "1306440"
  },
  {
    "text": "go as far sometimes as to structure my code so that I can use defers for",
    "start": "1306440",
    "end": "1311600"
  },
  {
    "text": "example if I do have a for Loop and it's going to go and process a a slice of",
    "start": "1311600",
    "end": "1317520"
  },
  {
    "text": "things I could just do the work in there and defer things but of course if you're in",
    "start": "1317520",
    "end": "1323200"
  },
  {
    "text": "a loop and you're going to open a file you probably you might want that file to be closed before you open the next one",
    "start": "1323200",
    "end": "1330480"
  },
  {
    "text": "and so having a just another inline function that's just of called immediately and then using defers within",
    "start": "1330480",
    "end": "1338000"
  },
  {
    "text": "that function it is an extra level of nesting but the readability of that code that you get the fact you can just use",
    "start": "1338000",
    "end": "1344880"
  },
  {
    "text": "defers in that sort of very liberal way is is so nice when it comes to maintainability and we've talked about",
    "start": "1344880",
    "end": "1351880"
  },
  {
    "text": "in the past about glan ability too and just conceptual overheads and that's I",
    "start": "1351880",
    "end": "1357840"
  },
  {
    "text": "know that trif finally might work for other people's ways of thinking but I do",
    "start": "1357840",
    "end": "1363080"
  },
  {
    "text": "think that defer is more of the human way of thinking we just have a natural inclination to think about what what",
    "start": "1363080",
    "end": "1369320"
  },
  {
    "text": "done looks like when you start the thing and we often lose in a trif finally Paradigm at least when I did I would",
    "start": "1369320",
    "end": "1376159"
  },
  {
    "text": "forget if I didn't make that or structure that or put that in now it would you know you would forget and also",
    "start": "1376159",
    "end": "1382120"
  },
  {
    "text": "the ability that this your nesting mat doesn't have um you can safely defer uh",
    "start": "1382120",
    "end": "1388840"
  },
  {
    "text": "Nest defer in a way that you can't do that with trif finally yeah that's true it's also interesting how like I feel",
    "start": "1388840",
    "end": "1395320"
  },
  {
    "text": "like the go Community has embraced the way defer Works to the point that you see people writing code where you'll",
    "start": "1395320",
    "end": "1401200"
  },
  {
    "text": "call a function to set something up and it returns a pterodon function so you'll very commonly see people like okay I",
    "start": "1401200",
    "end": "1407279"
  },
  {
    "text": "called this and it returns tear down and then I immediately called defer tear down and like the fact that people have",
    "start": "1407279",
    "end": "1412840"
  },
  {
    "text": "noticed like this makes such a big impact on readability and I don't want to think about how to tear this down like the function that sets it up should",
    "start": "1412840",
    "end": "1418919"
  },
  {
    "text": "have to deal with that not me yeah that's the nice thing about that when the function it is about keeping the",
    "start": "1418919",
    "end": "1425159"
  },
  {
    "text": "Tidy Up close to where you're allocating the resources it's it's just it's easy",
    "start": "1425159",
    "end": "1430480"
  },
  {
    "text": "it's literally easier it's harder to forget to do it essentially but I do love that pattern where you return the",
    "start": "1430480",
    "end": "1436520"
  },
  {
    "text": "cleanup function I do it a lot in uh if I have test helpers that are starting servers or anything and you can hide a",
    "start": "1436520",
    "end": "1443320"
  },
  {
    "text": "lot of stuff inside a function then and change it later without touching the API you know that you've asked the user to",
    "start": "1443320",
    "end": "1450880"
  },
  {
    "text": "defer this function so you know that it's going to get called kind of tear down time so you can use that and add",
    "start": "1450880",
    "end": "1457559"
  },
  {
    "text": "features to existing things just by having that as a pattern it's a great one context does it too when you do with",
    "start": "1457559",
    "end": "1464640"
  },
  {
    "text": "cancel cancel yeah and they ask you actually to prer that immediately regardless I think don't they because",
    "start": "1464640",
    "end": "1471159"
  },
  {
    "text": "there's uh with the timeout one there's resources that are created that need cleaning up exactly yeah I like that",
    "start": "1471159",
    "end": "1478480"
  },
  {
    "text": "pattern as well yes yeah another one that I use is uh if I want to like do",
    "start": "1478480",
    "end": "1483880"
  },
  {
    "text": "some simple sort of debugging sometimes there's one where I actually did a I",
    "start": "1483880",
    "end": "1489520"
  },
  {
    "text": "mentioned this in one of my talks and I heard later some feedback someone just said that they thought I was an idiot",
    "start": "1489520",
    "end": "1496399"
  },
  {
    "text": "for this for this thing that I'm about to repeat now for some reason um but it",
    "start": "1496399",
    "end": "1501960"
  },
  {
    "text": "was essentially um if I had lots of log statements and I was trying to debug",
    "start": "1501960",
    "end": "1507080"
  },
  {
    "text": "something by kind of generating the logs and having a a look at what's actually happened and sort of tracing really",
    "start": "1507080",
    "end": "1513240"
  },
  {
    "text": "unofficially and sometimes you have log just log calls peppered throughout your",
    "start": "1513240",
    "end": "1518880"
  },
  {
    "text": "code and it's very useful to just log something like either a string that's just a line of hyphens or something and",
    "start": "1518880",
    "end": "1526640"
  },
  {
    "text": "then defer the same thing so that you print out a line of hyphens and then when that function defers when when it",
    "start": "1526640",
    "end": "1533640"
  },
  {
    "text": "exits it prints out the other line so you can kind of then capture a little snapshot and and it's a really practical",
    "start": "1533640",
    "end": "1541000"
  },
  {
    "text": "way of just having a look given a potentially a lot of output just to have a look at specific functions and if you",
    "start": "1541000",
    "end": "1547720"
  },
  {
    "text": "mix that with the time then it's quite easy to create get a little time stamp at the beginning and defer printing or",
    "start": "1547720",
    "end": "1555480"
  },
  {
    "text": "capturing in some other place the now sub that time and see the duration then of how long that function took to run",
    "start": "1555480",
    "end": "1562120"
  },
  {
    "text": "things like that absurdly useful and very very easy to express with defer",
    "start": "1562120",
    "end": "1568640"
  },
  {
    "text": "yeah and especially uh nice to use with uh closures with with inline functions you know you you know you don't have to",
    "start": "1568640",
    "end": "1574159"
  },
  {
    "text": "have a separate function you're deferring you just have code right there yes yeah so that's a really interesting",
    "start": "1574159",
    "end": "1579520"
  },
  {
    "text": "point there's some interesting things around that aren't there so maybe you could just tell us a little bit about",
    "start": "1579520",
    "end": "1586000"
  },
  {
    "text": "what literally is going on when we defer something cuz when does the function get",
    "start": "1586000",
    "end": "1591159"
  },
  {
    "text": "called and if we pass what happens if we pass an argument into that function yeah",
    "start": "1591159",
    "end": "1596840"
  },
  {
    "text": "yeah I like the design of defer also because it it um deals with a little issue that you sometimes run to run into",
    "start": "1596840",
    "end": "1603000"
  },
  {
    "text": "when you use these closures these inline functions which is do you want to use the value of the variable when you ran",
    "start": "1603000",
    "end": "1609240"
  },
  {
    "text": "when you sort of declared the function or do you want to use the value when you ran it and so okay so defer statement is",
    "start": "1609240",
    "end": "1615720"
  },
  {
    "text": "a a defer keyword Plus plus a function or a closure an inline function and then",
    "start": "1615720",
    "end": "1620840"
  },
  {
    "text": "a set of arguments and the semantics is you evaluate the function or the function pointer you know not run the",
    "start": "1620840",
    "end": "1627080"
  },
  {
    "text": "function but you evaluate if it's like a method call or something and then you evaluate the arguments and you save the",
    "start": "1627080",
    "end": "1632919"
  },
  {
    "text": "arguments and kind of what the function is and you store them away so that they can run and exit and so you eval the",
    "start": "1632919",
    "end": "1639640"
  },
  {
    "text": "important thing is you evaluate the arguments at the time of the defer statement however if you have a closure",
    "start": "1639640",
    "end": "1645000"
  },
  {
    "text": "a function with the funk keyword not aous function then you can also look at variables at the time that you run the",
    "start": "1645000",
    "end": "1650399"
  },
  {
    "text": "defer right because that can look at functions local variables in the function so you get kind of the",
    "start": "1650399",
    "end": "1655640"
  },
  {
    "text": "combination of both worlds if you want to make sure you evaluate a value right at the defer statement and that's what",
    "start": "1655640",
    "end": "1661000"
  },
  {
    "text": "you're going to use you know the file to be closed or whatever then you can use it as an argument and then you're sure",
    "start": "1661000",
    "end": "1667799"
  },
  {
    "text": "that that that value evaluate is what you're going to use at the end of the function but on the other hand if you want to look at local variables at the",
    "start": "1667799",
    "end": "1674880"
  },
  {
    "text": "exit and how they've changed then you you can use the the closure part and look at the local variable and so that's",
    "start": "1674880",
    "end": "1680919"
  },
  {
    "text": "exactly how you can do some of the timing tricks or whatever or various things you can look at you can change a values and so forth so the last part you",
    "start": "1680919",
    "end": "1687360"
  },
  {
    "text": "were talking about that is what they're doing like with all the error wrapping stuff you see a lot of code that comes",
    "start": "1687360",
    "end": "1692760"
  },
  {
    "text": "out now where they defer a function that will check to see if an error is nil and if it is they'll go ahead and wrap it at that point ex that's using that latter",
    "start": "1692760",
    "end": "1699480"
  },
  {
    "text": "part where you're saying it's looking at what the actual error was you know at that time and that makes that possible because you know you're waiting to",
    "start": "1699480",
    "end": "1705080"
  },
  {
    "text": "actually look and see what the error was but if wanted to actually look at a value directly then it would be the last",
    "start": "1705080",
    "end": "1710480"
  },
  {
    "text": "set of parentheses whenever they call defer they would pass something in there correct exactly yeah and you often have",
    "start": "1710480",
    "end": "1716399"
  },
  {
    "text": "bugs when people use closures these an anonymous functions you often have bugs",
    "start": "1716399",
    "end": "1721760"
  },
  {
    "text": "where they you know they think they're using the value at the time kind of uh that they created the function uh but",
    "start": "1721760",
    "end": "1728559"
  },
  {
    "text": "they're really using it at the end and so you get bugs when you running them in loops and so forth so it's nice that it",
    "start": "1728559",
    "end": "1734640"
  },
  {
    "text": "separates out the arguments that you evaluate at defer time with the other stuff you can look at if you want using",
    "start": "1734640",
    "end": "1739760"
  },
  {
    "text": "the closure but alternatively you could just have a normal function in which case you you know you don't get to look",
    "start": "1739760",
    "end": "1745039"
  },
  {
    "text": "at the local variables but it might be more useful in other cases um so that gets into the implementation which is",
    "start": "1745039",
    "end": "1751320"
  },
  {
    "text": "that we you know um however you're going to implement the defer you have to run the arguments and evaluate the arguments",
    "start": "1751320",
    "end": "1757440"
  },
  {
    "text": "and what kind of function you're going to be running at defer time and store it away and then so we can get and then at",
    "start": "1757440",
    "end": "1764120"
  },
  {
    "text": "Exit time you have to run that so we can get more into the detail of the whenever I've got one other question",
    "start": "1764120",
    "end": "1770480"
  },
  {
    "text": "though M so panics don't stop defers is there anything that will stop a differ",
    "start": "1770480",
    "end": "1776080"
  },
  {
    "text": "from running apart from I mean obviously you know frisbe near your laptop across the room would might stop stop differs",
    "start": "1776080",
    "end": "1782240"
  },
  {
    "text": "as well but are there any other things you can do in code to that will prevent defers from running no uh stack",
    "start": "1782240",
    "end": "1788519"
  },
  {
    "text": "unwinding is guaranteed I think there might be an you know some kind of runtime abort that will you know",
    "start": "1788519",
    "end": "1795039"
  },
  {
    "text": "completely terminate the uh process with no clean up at all but",
    "start": "1795039",
    "end": "1800440"
  },
  {
    "text": "otherwise you know the guarantee is that you unwind the stack during a panic and",
    "start": "1800440",
    "end": "1806000"
  },
  {
    "text": "do these defers do they run on OS exit I think that terminates it they run on go",
    "start": "1806000",
    "end": "1811360"
  },
  {
    "text": "exit which is to exit a thread and I'm pretty sure they run on o exit as well so I think it's a B I have to check on",
    "start": "1811360",
    "end": "1818279"
  },
  {
    "text": "that stop yeah we can't stop them then that's the thing so we've got to be careful how many we start yes there",
    "start": "1818279",
    "end": "1823640"
  },
  {
    "text": "might be other aborts I mean obviously they don't happen if you kill the process and and then there may be another kind of an aort that you can do",
    "start": "1823640",
    "end": "1829559"
  },
  {
    "text": "which is just end the you know but I think on OS exit they do and they definitely do on a thing called go exit",
    "start": "1829559",
    "end": "1835200"
  },
  {
    "text": "which is to terminate a go routine you could probably open Slack",
    "start": "1835200",
    "end": "1840600"
  },
  {
    "text": "that'll probably do it as well that kills my computer I see I get it yes or yeah P plug don't worry we'll don't",
    "start": "1840600",
    "end": "1847240"
  },
  {
    "text": "worry we'll edit in after later right right I see yeah don't worry Dan so here's here's another one that's",
    "start": "1847240",
    "end": "1854159"
  },
  {
    "text": "a very practical thing when you close a file that function can return an error",
    "start": "1854159",
    "end": "1861440"
  },
  {
    "text": "so if you just defer calling close we aren't catching that error at all",
    "start": "1861440",
    "end": "1866919"
  },
  {
    "text": "sometimes what's the right thing to do there yeah I think that's just a tradeoff I think go tends to want to",
    "start": "1866919",
    "end": "1873840"
  },
  {
    "text": "catch all errors but but close a close error is kind of uh you know maybe slightly less interesting so we want to",
    "start": "1873840",
    "end": "1880440"
  },
  {
    "text": "catch the main errors but you know I think defer but defer does give you the mechanism to to deal with it because",
    "start": "1880440",
    "end": "1886399"
  },
  {
    "text": "instead of saying defer os. close or you know file. close or whatever you can use",
    "start": "1886399",
    "end": "1892200"
  },
  {
    "text": "a a closure or an inline function and actually run it and get the error value and then merge it into the error Return",
    "start": "1892200",
    "end": "1898279"
  },
  {
    "text": "of the function so you can if you really want to find out that you know the close",
    "start": "1898279",
    "end": "1903480"
  },
  {
    "text": "failed um you can kind of you can merge it in and make it part of the error Return of the function I don't know if",
    "start": "1903480",
    "end": "1909120"
  },
  {
    "text": "you guys have ever done that or I particularly try to do anything I certainly have you know merged errors",
    "start": "1909120",
    "end": "1914760"
  },
  {
    "text": "into function but not close you're not supposed to to say the last bit you're supposed to say Matt we can't help it you're writing bad code yeah I see yeah",
    "start": "1914760",
    "end": "1922039"
  },
  {
    "text": "it could have made me feel bad yeah I think I've I've done that and logged it just because I want to see what could",
    "start": "1922039",
    "end": "1927679"
  },
  {
    "text": "happen but um nothing's happened yet right so I'm still waiting yeah",
    "start": "1927679",
    "end": "1933120"
  },
  {
    "text": "uh I thought I wondered whether it it was that signature just to satisfy IO",
    "start": "1933120",
    "end": "1938799"
  },
  {
    "text": "closer or something like there was some early decision to have a a closer type",
    "start": "1938799",
    "end": "1943840"
  },
  {
    "text": "is it iio closer yeah I think so a close interface closer interface with a close",
    "start": "1943840",
    "end": "1949480"
  },
  {
    "text": "method and and sometimes closing things you know there can be an error especially if it's writing and and and",
    "start": "1949480",
    "end": "1955679"
  },
  {
    "text": "it's going to finish writing some things or something yeah um I wondered if it was just left over from that because but",
    "start": "1955679",
    "end": "1962039"
  },
  {
    "text": "what what can happen if you close a file it just doesn't close then what it's",
    "start": "1962039",
    "end": "1967080"
  },
  {
    "text": "like if we're not in control of the computers then do you know what I mean you know if you're doing a database you",
    "start": "1967080",
    "end": "1972279"
  },
  {
    "text": "probably do want to check the cloth and probably in other situations you know probably is checked because you know during a close you may you may not have",
    "start": "1972279",
    "end": "1979240"
  },
  {
    "text": "written out the whole file and so you you know part of the close is writing out the final buffer length of the file",
    "start": "1979240",
    "end": "1985120"
  },
  {
    "text": "buffer amount of the file and so you know it is actually you know to be really safe you probably should be",
    "start": "1985120",
    "end": "1990960"
  },
  {
    "text": "checking the error code of the close and therefore you know Express the defer in way so you can modify the error code",
    "start": "1990960",
    "end": "1997960"
  },
  {
    "text": "maybe you just open the file for read in which case it doesn't matter so much but fortunately like unlock has no",
    "start": "1997960",
    "end": "2004039"
  },
  {
    "text": "return value you know unlock basically always succeeds so um you know defer unlock makes sense and lots of other",
    "start": "2004039",
    "end": "2009080"
  },
  {
    "text": "things of course Matt your code's going to get pretty boring if you uh just cut out everything you don't want to deal",
    "start": "2009080",
    "end": "2015120"
  },
  {
    "text": "with yep and it won won't be very functional either he's already like banned else",
    "start": "2015120",
    "end": "2022080"
  },
  {
    "text": "statements and a bunch of other things so well no I mean please please help",
    "start": "2022080",
    "end": "2027880"
  },
  {
    "text": "yourselves but um actually the there's there that trick of if you flip the if",
    "start": "2027880",
    "end": "2033639"
  },
  {
    "text": "statement you can sometimes it's about dealing with the errors early and exiting early and keeping the line of",
    "start": "2033639",
    "end": "2040200"
  },
  {
    "text": "sight down one Edge really clear that was the thinking behind it yeah but",
    "start": "2040200",
    "end": "2045679"
  },
  {
    "text": "actually yeah it's not I mean defer I think is just sort of stands out and I think I saw it after a few years after I",
    "start": "2045679",
    "end": "2054000"
  },
  {
    "text": "was started with go I saw it turn up in the Swift language as well um it works slightly differently I think it does it",
    "start": "2054000",
    "end": "2060358"
  },
  {
    "text": "on the Block is that right it is on the Block Level yes I haven't used it all",
    "start": "2060359",
    "end": "2065599"
  },
  {
    "text": "it's kind of a little more integrated with the language in the sense that it actually is a defer and than a block not",
    "start": "2065599",
    "end": "2071760"
  },
  {
    "text": "a function but it's a block of code so you know you can kind of think of it as a a closure or an inline function but",
    "start": "2071760",
    "end": "2077800"
  },
  {
    "text": "but it doesn't allow you to call a function call except if you put it in that block yeah so it's interesting they",
    "start": "2077800",
    "end": "2083599"
  },
  {
    "text": "they definitely adopted it from go as far as we guess went with the block level um and that I I think you could",
    "start": "2083599",
    "end": "2091839"
  },
  {
    "text": "see it either way one thing to note is you can't do conditional defers with a with that kind of a defer because you",
    "start": "2091839",
    "end": "2098680"
  },
  {
    "text": "know you do an if and you have a block and then you do a defer you're going to you know you're going to immediately do",
    "start": "2098680",
    "end": "2104680"
  },
  {
    "text": "theer operation at the end of the F which is not what you want so the go defer runs at the function level is a",
    "start": "2104680",
    "end": "2110800"
  },
  {
    "text": "little different I can see running at Block Level too but it definitely is U more useful for kind of these",
    "start": "2110800",
    "end": "2115839"
  },
  {
    "text": "conditional cases well I kind of simulate that block behavior when I just have these little fun inline functions",
    "start": "2115839",
    "end": "2122200"
  },
  {
    "text": "that's kind of what I'm doing really cuz it's I am defining the block that I want the defers to run after and so exactly I",
    "start": "2122200",
    "end": "2128359"
  },
  {
    "text": "think it is yes so go 114 has uh some little traits in it for",
    "start": "2128359",
    "end": "2135320"
  },
  {
    "text": "us doesn't it d uh yeah so there are several performance optimizations of",
    "start": "2135320",
    "end": "2140359"
  },
  {
    "text": "which one relates to defer and um this is work that I did and it was um from",
    "start": "2140359",
    "end": "2148599"
  },
  {
    "text": "some ideas from a bunch of people in the group and the idea was as we started talking about is kind of make the",
    "start": "2148599",
    "end": "2155079"
  },
  {
    "text": "overhead lower in the more common cases and and that's what's been going on in the last few releases the jefer has been",
    "start": "2155079",
    "end": "2161160"
  },
  {
    "text": "steadily getting faster in some of the common cases and so in this release we want to make it even faster and",
    "start": "2161160",
    "end": "2167480"
  },
  {
    "text": "basically you can think of it as we're running the function calls directly at the exit so it's kind of direct the",
    "start": "2167480",
    "end": "2173119"
  },
  {
    "text": "compiler is directly generating those those function calls at the exit and kind of just as I think you were saying",
    "start": "2173119",
    "end": "2178160"
  },
  {
    "text": "that's how you think of it and in the com case where we can do it but we also do deal so we deal we can do that in in",
    "start": "2178160",
    "end": "2185760"
  },
  {
    "text": "most of the frequen cases of defer the only so this optimization is not turned on if any defer in the function is in a",
    "start": "2185760",
    "end": "2192359"
  },
  {
    "text": "loop however we do do it if they're in conditionals so uh if all the defers in",
    "start": "2192359",
    "end": "2198640"
  },
  {
    "text": "your function are either just straight defers no conditional or they're in a conditional then we will do the",
    "start": "2198640",
    "end": "2203680"
  },
  {
    "text": "optimization that I'll describe if any defers in a loop then we will not do",
    "start": "2203680",
    "end": "2208720"
  },
  {
    "text": "that optimization yet and we'll do kind of the standard runtime thing but do do you have to copy the conditional then",
    "start": "2208720",
    "end": "2215119"
  },
  {
    "text": "you want me to get into the details here um oh yes please because this is way too interesting yeah yeah exactly so the",
    "start": "2215119",
    "end": "2221119"
  },
  {
    "text": "notion is that at any defer statement let me see let me let me describe the",
    "start": "2221119",
    "end": "2226520"
  },
  {
    "text": "the current way before the optimization current way is at any def first statement what you do is you kind of",
    "start": "2226520",
    "end": "2232160"
  },
  {
    "text": "create a record a defer record and in that record you put you evaluate all the arguments and the function pointer that",
    "start": "2232160",
    "end": "2238560"
  },
  {
    "text": "you need to defer and you put that those that information in the record and you kind of add it to a a a chain and a",
    "start": "2238560",
    "end": "2245240"
  },
  {
    "text": "chain in the runtime that's kind of a defer that you're going to have to run later and then at all exits you call",
    "start": "2245240",
    "end": "2250880"
  },
  {
    "text": "into the runtime and you run the appropriate defers so it's definitely runtime overhead as you're kind of",
    "start": "2250880",
    "end": "2256720"
  },
  {
    "text": "adding to the chain in the runtime and then at the exit you're jumping in the runtime saying run all the defers that are on that that link list so the",
    "start": "2256720",
    "end": "2263640"
  },
  {
    "text": "optimization is again in this case where there no differs and Loops is that we're going to generate inline code at at each",
    "start": "2263640",
    "end": "2270319"
  },
  {
    "text": "defer and at that defer we're going to do as we did before was going to evaluate the arguments and the function pointer but now we're just going to",
    "start": "2270319",
    "end": "2276640"
  },
  {
    "text": "store it in some stack slots so basically in some some local variable space and we're going to you know the",
    "start": "2276640",
    "end": "2282880"
  },
  {
    "text": "compiler is going to of course keep track of you know where those that data is stored uh and the other thing we're",
    "start": "2282880",
    "end": "2288240"
  },
  {
    "text": "going to do is we're going to store a bit in a bit maskk that says this defer was activated okay so uh this the first",
    "start": "2288240",
    "end": "2295839"
  },
  {
    "text": "statement was run so that that's the way we deal with conditionals and so as you're running through the function",
    "start": "2295839",
    "end": "2302000"
  },
  {
    "text": "you're storing the defer arguments and the function pointers and you're storing in that bit mask what defers have run",
    "start": "2302000",
    "end": "2308200"
  },
  {
    "text": "and then at any exit we generate again inline code that says um you know if",
    "start": "2308200",
    "end": "2314040"
  },
  {
    "text": "this bit is set in the defer bit mask grab these arguments and this function pointer from the stack slots and run it",
    "start": "2314040",
    "end": "2321960"
  },
  {
    "text": "and we go through and kind of last and first out order as defers defined to run those uh any of the active defers and",
    "start": "2321960",
    "end": "2329480"
  },
  {
    "text": "one thing to quickly say though is that this is all at the compiler level that we put in those checks for the defer bits and stuff so actually if there are",
    "start": "2329480",
    "end": "2336400"
  },
  {
    "text": "no no conditionals all the defer bit checks go away because the compiler",
    "start": "2336400",
    "end": "2341599"
  },
  {
    "text": "knows you set a one and then you checked for one and you set a second bit and check for a second bit so they go away",
    "start": "2341599",
    "end": "2347920"
  },
  {
    "text": "you do have to still set the defer bits because we're going to need to know about that stuff for panic and so forth",
    "start": "2347920",
    "end": "2353920"
  },
  {
    "text": "I can get into more details on that but in the normal case you'll kind of store all those arguments set the defer bits",
    "start": "2353920",
    "end": "2360280"
  },
  {
    "text": "and then on the exit you'll run those it was great it was it's really clever so",
    "start": "2360280",
    "end": "2366440"
  },
  {
    "text": "making it work with conditionals is I think a bit of a genius move I think that is a bit of a genius stroke because",
    "start": "2366440",
    "end": "2372720"
  },
  {
    "text": "I think it's quite clear that if you think about how could you optimize defers then yeah just statically have a",
    "start": "2372720",
    "end": "2379000"
  },
  {
    "text": "look see what gets called and just put them in in the exit points it sort of",
    "start": "2379000",
    "end": "2384280"
  },
  {
    "text": "seems quite simple but but yeah to make that work with conditionals and then with loops it's got to be impossible",
    "start": "2384280",
    "end": "2390560"
  },
  {
    "text": "isn't it that kind of approach yeah you need some kind of runtime thing because of course you're going to have to save",
    "start": "2390560",
    "end": "2396640"
  },
  {
    "text": "an arbitrary amount of information right so you need some kind of Link list which is what we already have in the kind of",
    "start": "2396640",
    "end": "2402720"
  },
  {
    "text": "previous implementation the more General implementation so if you have a loop you could call defer 100 times and and where",
    "start": "2402720",
    "end": "2408920"
  },
  {
    "text": "you going to put all that information you're going to have to do some Heap allocation and so forth so when you were",
    "start": "2408920",
    "end": "2414920"
  },
  {
    "text": "deciding to support if statements did you do any sort of like code analysis or anything to kind of say like this is",
    "start": "2414920",
    "end": "2420240"
  },
  {
    "text": "something we absolutely need to cover or was it more just you know we should probably just do it so we did it yeah because I would have definitely said",
    "start": "2420240",
    "end": "2426680"
  },
  {
    "text": "right well you can forget about conditional I would have been the same thing I would have been like too much work up front yeah I see you know we had",
    "start": "2426680",
    "end": "2433520"
  },
  {
    "text": "the notion on the conditional first and then a little bit along the way we realized that for the case where there",
    "start": "2433520",
    "end": "2440240"
  },
  {
    "text": "are no conditionals all that code would kind of go away and so we realized okay",
    "start": "2440240",
    "end": "2445520"
  },
  {
    "text": "it's not that much cost and then the other thing is um you need the defer bits anyways because you need to um in",
    "start": "2445520",
    "end": "2453560"
  },
  {
    "text": "the case of a panic you need to know you know how far in the function you got",
    "start": "2453560",
    "end": "2458800"
  },
  {
    "text": "how many defers you ran and so forth and so you're either going to have to look at some stack thing or you're going to",
    "start": "2458800",
    "end": "2464599"
  },
  {
    "text": "have to look at the defer bits to know um we can get more into that about how what we do for the panic but in the",
    "start": "2464599",
    "end": "2469880"
  },
  {
    "text": "Panic case you know you're kind of you're many frames up and you're doing this panic and you're going through the",
    "start": "2469880",
    "end": "2475720"
  },
  {
    "text": "stack and you need an easy way to know which defers are actually active so the defer bits made sense for a number of",
    "start": "2475720",
    "end": "2482119"
  },
  {
    "text": "cases and the overhead uh especially panic and then you know overhead some of",
    "start": "2482119",
    "end": "2487880"
  },
  {
    "text": "the overhead a bit of the overhead goes away anyways for in the non-conditional case so we do have a mix I did not do it",
    "start": "2487880",
    "end": "2494680"
  },
  {
    "text": "percentage wise of of um in the go library of how many have conditionals but there certainly are a fair number so",
    "start": "2494680",
    "end": "2500200"
  },
  {
    "text": "when you were like considering conditionals do you consider Panic a conditional then in a sense that I mean",
    "start": "2500200",
    "end": "2506040"
  },
  {
    "text": "I guess technically you'd have to have an if statement for that Panic to become conditional so that would kind of or I",
    "start": "2506040",
    "end": "2511119"
  },
  {
    "text": "don't know if like a runtime technically you could like access an array index that's not there or something so I don't know does that make sense yes you cannot",
    "start": "2511119",
    "end": "2517599"
  },
  {
    "text": "know you cannot know statically that a panic's going to happen because there might be some reference past an array",
    "start": "2517599",
    "end": "2524200"
  },
  {
    "text": "bound or something I would say Panic is conditional in the sense that that's kind of why also we need the diver bits",
    "start": "2524200",
    "end": "2530359"
  },
  {
    "text": "which is or some mechanism to figure out how far you've gotten into the function there are other ways to do that but the",
    "start": "2530359",
    "end": "2535960"
  },
  {
    "text": "defer bits works out well for both that in either in a normal exit or in a panic",
    "start": "2535960",
    "end": "2541079"
  },
  {
    "text": "exit you can look at the defer bits and it'll tell you how many defers you run into and how far down you got so is it",
    "start": "2541079",
    "end": "2547880"
  },
  {
    "text": "one thing that runs at the end at any exit Point does it you know what I mean or do you literally copy like the",
    "start": "2547880",
    "end": "2555800"
  },
  {
    "text": "instructions uh you literally call each of the functions so it it is not just one big function and then that function",
    "start": "2555800",
    "end": "2562760"
  },
  {
    "text": "calls um you know a bunch of functions um currently and and there are many choices we could change this in the",
    "start": "2562760",
    "end": "2568680"
  },
  {
    "text": "future uh with the che to the compiler but right now we're literally calling the functions in the last last in first",
    "start": "2568680",
    "end": "2574800"
  },
  {
    "text": "out order and depending whether it's conditional L it may be depending on the diver bits or not but so you're basically saying you know if",
    "start": "2574800",
    "end": "2581400"
  },
  {
    "text": "this bit is set run this you know your second deferred function and if this bit is set run your first deferred function",
    "start": "2581400",
    "end": "2587720"
  },
  {
    "text": "and then if if if there are no conditionals then it would just be call for second deferred function call First defer function um so in the simplest",
    "start": "2587720",
    "end": "2594960"
  },
  {
    "text": "case it's very optimized in that sense and kind of what you might imagine and there's always certain choices more more",
    "start": "2594960",
    "end": "2601440"
  },
  {
    "text": "optimization that we could do or there other ways of doing it and so we can certainly analyze further to see what's",
    "start": "2601440",
    "end": "2607359"
  },
  {
    "text": "best but it's working out reasonably well it's funny because I wrote myself a little tool which took my go code and",
    "start": "2607359",
    "end": "2615800"
  },
  {
    "text": "did the the first optimization that you talked about where it it just and it just would comment out the defer line",
    "start": "2615800",
    "end": "2622800"
  },
  {
    "text": "and then put the copy the you know it was very rudimentary it was just kind of an experiment no that's actually a good",
    "start": "2622800",
    "end": "2628599"
  },
  {
    "text": "point that's exactly what people do a lot of times is is of course you know the defer overhead is showing up um in",
    "start": "2628599",
    "end": "2634960"
  },
  {
    "text": "their profile so so then they do exactly what you said was is they take the the first statements comment them out and",
    "start": "2634960",
    "end": "2640640"
  },
  {
    "text": "put the functions at the end and so you know this is good that we're doing this compiler optimization they do it",
    "start": "2640640",
    "end": "2646440"
  },
  {
    "text": "manually though do no exactly I had a tool that did it for me no but genuinely so my source code would stay looking",
    "start": "2646440",
    "end": "2653400"
  },
  {
    "text": "with defers so it was readable it was just it was an automatic part of the build process a post processor kind of",
    "start": "2653400",
    "end": "2660200"
  },
  {
    "text": "yeah yeah that's why I didn't tell anyone about it yeah yeah yeah okay well hopefully you can not do that as much",
    "start": "2660200",
    "end": "2666440"
  },
  {
    "text": "with the optimization yeah because the other important thing of course is you might not put it in all of the exits",
    "start": "2666440",
    "end": "2672720"
  },
  {
    "text": "well you will because you're doing automatically and you're also not dealing with panic uh as well so you",
    "start": "2672720",
    "end": "2678359"
  },
  {
    "text": "know we'd rather especially if you're deferring a an unlock and you want your web server to continue on you really",
    "start": "2678359",
    "end": "2685079"
  },
  {
    "text": "want to make sure that unlock happens cuz you might that uh thread that's about to die but you're going to",
    "start": "2685079",
    "end": "2690480"
  },
  {
    "text": "continue the web server might hold on to a lock that's important for all the other threads",
    "start": "2690480",
    "end": "2697180"
  },
  {
    "text": "[Music]",
    "start": "2697180",
    "end": "2708399"
  },
  {
    "text": "yeah if you like this show I bet you'd enjoy listening to brain science join",
    "start": "2709119",
    "end": "2714160"
  },
  {
    "text": "clinical psychologists Muriel Reese and Adam stovak as they explore the inner workings of the human brain to",
    "start": "2714160",
    "end": "2720160"
  },
  {
    "text": "understand Behavior change habit formation mental health and being human here's a quick taste of what you can",
    "start": "2720160",
    "end": "2725599"
  },
  {
    "text": "expect is from episode 4 about coping skills and strategies take a listen I often use This Acronym with",
    "start": "2725599",
    "end": "2734200"
  },
  {
    "text": "people when they're trying to catc and it's halt h a l t halt because if we are",
    "start": "2734200",
    "end": "2741680"
  },
  {
    "text": "hungry angry lonely or tired your coping",
    "start": "2741680",
    "end": "2746960"
  },
  {
    "text": "will invariably look different I don't care if you're 3 3373 right if you are hungry or hry",
    "start": "2746960",
    "end": "2754880"
  },
  {
    "text": "angry lonely or tired you just have less",
    "start": "2754880",
    "end": "2759920"
  },
  {
    "text": "to be able to navigate it brain science is a great podcast check it out at",
    "start": "2759920",
    "end": "2765240"
  },
  {
    "text": "changel law.com brain science or just search brain science in apple podcast",
    "start": "2765240",
    "end": "2770319"
  },
  {
    "text": "Spotify or your favorite podcast directory you'll find it while you're added upgrade to our Master feed at",
    "start": "2770319",
    "end": "2775400"
  },
  {
    "text": "chain.com slm and let your podcast app download all the shows we produce then you can pick and choose the ones you're",
    "start": "2775400",
    "end": "2781119"
  },
  {
    "text": "interested in the most and skip the rest what have you got to lose all right back to the show [Music]",
    "start": "2781119",
    "end": "2796530"
  },
  {
    "text": "when you guys were deciding to actually make these optimizations was it because you were seeing people do what you're",
    "start": "2797839",
    "end": "2804079"
  },
  {
    "text": "saying like they were they were commenting these things out and doing that and like was it because you wanted to make sure code was more correct or",
    "start": "2804079",
    "end": "2810599"
  },
  {
    "text": "was it because like you thought we want code to stay readable so like we need to improve on it like what was the",
    "start": "2810599",
    "end": "2815839"
  },
  {
    "text": "motivation I guess behind improving this when arguably somebody could do like what Matt said and get rid of it",
    "start": "2815839",
    "end": "2821960"
  },
  {
    "text": "themselves if they really wanted to um yeah I think uh pretty much everything you said I I think the main",
    "start": "2821960",
    "end": "2828520"
  },
  {
    "text": "reason is we don't want people to remove a defer for performance reasons when",
    "start": "2828520",
    "end": "2833880"
  },
  {
    "text": "it's going to make worse reability and it could make it incorrect uh in that",
    "start": "2833880",
    "end": "2839880"
  },
  {
    "text": "web server case at least and and other cases right so you know the main thing I would say is readability I I you know",
    "start": "2839880",
    "end": "2845920"
  },
  {
    "text": "you'd rather you know this this feature is great and we'd rather people you know are using it and you get that",
    "start": "2845920",
    "end": "2851240"
  },
  {
    "text": "readability of the lock and unlock and not just readability maintainability right you know once you move it the the",
    "start": "2851240",
    "end": "2857400"
  },
  {
    "text": "unlock to the exits what if someone adds a new exit a new early return and they forget to do the unlock right so",
    "start": "2857400",
    "end": "2864640"
  },
  {
    "text": "maintain readability maintainability and then well and the maintainability that that's a correctness problem too and",
    "start": "2864640",
    "end": "2870160"
  },
  {
    "text": "it's especially a correctness problem that's really hidden if it's a panic right and you know maybe this is a library and you know they figure oh we",
    "start": "2870160",
    "end": "2877839"
  },
  {
    "text": "don't need to deal with the panic but then you put that library in a web server and you want that web server to keep running even after one of the",
    "start": "2877839",
    "end": "2884119"
  },
  {
    "text": "threads is had a problem so all those reasons we have a question from a live listener uh is there a way to call defer",
    "start": "2884119",
    "end": "2891040"
  },
  {
    "text": "only in the case of a panic so you only pay the penalty when it's needed uh that's a good question uh no",
    "start": "2891040",
    "end": "2899960"
  },
  {
    "text": "we don't currently there's nothing in the language that was kind of a little bit what Matt was saying any way to stop",
    "start": "2899960",
    "end": "2905640"
  },
  {
    "text": "defers there's no way to stop defers yeah so you you have to run that",
    "start": "2905640",
    "end": "2912119"
  },
  {
    "text": "code and and the the thing is you just do a quick check of course but you do have to run the Deferred function how",
    "start": "2912119",
    "end": "2918079"
  },
  {
    "text": "expensive is it and obviously I don't mean cash although I'll be clear I'm I will still pay for it it's that good M",
    "start": "2918079",
    "end": "2925079"
  },
  {
    "text": "but what how expensive is it like before your optimization uh yeah I can give you",
    "start": "2925079",
    "end": "2930640"
  },
  {
    "text": "some numbers just on a Linux amd64 machine pretty fast so the rough number",
    "start": "2930640",
    "end": "2935839"
  },
  {
    "text": "are that a function call might take one nanc so obviously you know we have very fast processor gigahertz processors you",
    "start": "2935839",
    "end": "2941520"
  },
  {
    "text": "know function call might take one two three nanocs if you then uh a defer call",
    "start": "2941520",
    "end": "2946960"
  },
  {
    "text": "has been getting faster and faster over the past time but even with stack allocated defer records which is 113 um",
    "start": "2946960",
    "end": "2954119"
  },
  {
    "text": "the defer overhead plus the function call is about 35 NS okay instead of two",
    "start": "2954119",
    "end": "2960359"
  },
  {
    "text": "or three NCS so if that call is a call to unlock which takes another NC or two",
    "start": "2960359",
    "end": "2966480"
  },
  {
    "text": "then you have the unlock call and the function call take a couple three or four NCS and the defer itself is taking",
    "start": "2966480",
    "end": "2973640"
  },
  {
    "text": "35 nond um so and then with with the optimization that we've made in 114 the",
    "start": "2973640",
    "end": "2979520"
  },
  {
    "text": "extra overhead is just about a nanc so now you know the the call plus the",
    "start": "2979520",
    "end": "2984640"
  },
  {
    "text": "unlock maybe three NCS and another nond is doing the defer bits and storing it",
    "start": "2984640",
    "end": "2989920"
  },
  {
    "text": "to the stack and checking the defer bits and and all that wow that is amazing",
    "start": "2989920",
    "end": "2995559"
  },
  {
    "text": "it's a really good optimization it it doesn't you know if the function call is much more expensive it doesn't matter",
    "start": "2995559",
    "end": "3000839"
  },
  {
    "text": "these are nanc but if the function call is uh very inexpensive like a lock or unlock it does matter yeah so that's a",
    "start": "3000839",
    "end": "3007440"
  },
  {
    "text": "good point for uh any people that are new to go that might be listening because you you hear these numbers and",
    "start": "3007440",
    "end": "3012680"
  },
  {
    "text": "think well these Nanos set what doesn't make it's not going to matter at all but of course if you think about that at",
    "start": "3012680",
    "end": "3019480"
  },
  {
    "text": "scale imagine you've got either loads of users or you're doing loads of work um of course it just sort adds up but yeah",
    "start": "3019480",
    "end": "3028160"
  },
  {
    "text": "from that down to just one nond for defers that genuinely exciting yeah the",
    "start": "3028160",
    "end": "3034280"
  },
  {
    "text": "interesting thing about performance numbers like that is like most of the time those performance numbers or even",
    "start": "3034280",
    "end": "3039920"
  },
  {
    "text": "like memory allocations that sort of thing doesn't matter until when it does matter it really really matters like so",
    "start": "3039920",
    "end": "3046079"
  },
  {
    "text": "that's the hard part is it's when it does matter it's a big deal I see oh and also I think the original part of the",
    "start": "3046079",
    "end": "3051559"
  },
  {
    "text": "question was have we seen this and yes there even in the just the go GitHub the",
    "start": "3051559",
    "end": "3056839"
  },
  {
    "text": "repo the go language itself you see this um bothin the libraries people have removed def first for performance",
    "start": "3056839",
    "end": "3062760"
  },
  {
    "text": "reasons and you know definitely you see it in other of course other go projects people will do it and you know sometimes",
    "start": "3062760",
    "end": "3069040"
  },
  {
    "text": "it's not totally necessary they see defer overhead but it's like 1% or half a percent but they still feel like you",
    "start": "3069040",
    "end": "3075559"
  },
  {
    "text": "know in the profiler they still feel like okay I want to change this defer so we we'd rather not have people remove",
    "start": "3075559",
    "end": "3081640"
  },
  {
    "text": "the defer to eliminate that 1% or 2% or whatever overhead that they see so",
    "start": "3081640",
    "end": "3087760"
  },
  {
    "text": "hopefully now you know they will not see that overhead and there'll be no motivation to proove the defer will we",
    "start": "3087760",
    "end": "3093839"
  },
  {
    "text": "see people putting defers back into the standard Library do you think yeah I",
    "start": "3093839",
    "end": "3099000"
  },
  {
    "text": "right I think we should so that will be next release yes yeah do you think with this optimization we can start to say",
    "start": "3099000",
    "end": "3106520"
  },
  {
    "text": "that we're reaching raai performance on par with C++ or we are on the way to",
    "start": "3106520",
    "end": "3112599"
  },
  {
    "text": "doing that uh yes I think so um I I think yeah it's much more of the",
    "start": "3112599",
    "end": "3118599"
  },
  {
    "text": "overhead that you would expect kind of from the normal semantics um and just like C++ and so forth so I think there",
    "start": "3118599",
    "end": "3125359"
  },
  {
    "text": "are more optimizations to do and the GCC compiler which does C++ of course is",
    "start": "3125359",
    "end": "3130760"
  },
  {
    "text": "many you know has been evolving for years and years and years and all that and there's also a trade-off of like how much information you store on the side",
    "start": "3130760",
    "end": "3137520"
  },
  {
    "text": "and so forth to make acceptions and zero overhead in GCC took a number of years",
    "start": "3137520",
    "end": "3143440"
  },
  {
    "text": "and it requires you know on the side which we have as well but they have a lot of information and STS and so forth",
    "start": "3143440",
    "end": "3149599"
  },
  {
    "text": "so yes I would say we're we're pretty close and you know we're quite close as you can see from those numbers and U you",
    "start": "3149599",
    "end": "3156480"
  },
  {
    "text": "know there's maybe little optimizations we can do further great so when you're making",
    "start": "3156480",
    "end": "3162640"
  },
  {
    "text": "changes like this how do you go about testing it to make sure like you know what I mean cuz obviously if there was a",
    "start": "3162640",
    "end": "3168799"
  },
  {
    "text": "bug in this it could be a really big deal so how do you go about making sure that that's actually like reliable and",
    "start": "3168799",
    "end": "3174599"
  },
  {
    "text": "that you're not breaking anything yeah I think you know the go Builders are an awesome resource obviously all the tests",
    "start": "3174599",
    "end": "3182119"
  },
  {
    "text": "already in the go Source tree and then I added a whole bunch a bunch more of defer tests and you know being in Google",
    "start": "3182119",
    "end": "3188839"
  },
  {
    "text": "there's also an advantage you have the co hold entire go source code to kind of test so um that's an advantage you get",
    "start": "3188839",
    "end": "3195599"
  },
  {
    "text": "inside Google not that you don't have outside and that's kind of a little more packaged up you can kind of run tests on",
    "start": "3195599",
    "end": "3201079"
  },
  {
    "text": "that in a kind of methodical way so you really just have to kind of go through cases and write test cases for them and",
    "start": "3201079",
    "end": "3207400"
  },
  {
    "text": "then run through a really large amount of code and then you know running on all the architectures the go Builders really",
    "start": "3207400",
    "end": "3212440"
  },
  {
    "text": "helps as well because you get a variety of timings um the go Builders have tests",
    "start": "3212440",
    "end": "3217760"
  },
  {
    "text": "for you know running on different kind of distributions and the long tests and the short tests and um you can run with",
    "start": "3217760",
    "end": "3224440"
  },
  {
    "text": "debug mode you know sort of all the debug Flags enabled and disabled and so forth so I don't I wouldn't say there's",
    "start": "3224440",
    "end": "3230799"
  },
  {
    "text": "a magic magic bullet but it's it's running a whole variety of tests and a whole variet of situations and it must",
    "start": "3230799",
    "end": "3237119"
  },
  {
    "text": "be rewarding to know that if you can make any difference there that given how widespread go is it the impact that has",
    "start": "3237119",
    "end": "3245200"
  },
  {
    "text": "is massive it is nice yes definitely it's nice to um have an effect on a you",
    "start": "3245200",
    "end": "3250359"
  },
  {
    "text": "know whole large ecosystem yeah and and what's nice from our side from the users's point of view",
    "start": "3250359",
    "end": "3257280"
  },
  {
    "text": "is we get to just use these language features and the nice people in the go",
    "start": "3257280",
    "end": "3263280"
  },
  {
    "text": "team are going to keep swirling away making it better for us making it faster",
    "start": "3263280",
    "end": "3269480"
  },
  {
    "text": "and and it's nice to you know you realize also uh you know anything you can do so that a new person to go",
    "start": "3269480",
    "end": "3274880"
  },
  {
    "text": "doesn't run into the a problem right you know a mistake or what you you make something that doesn't uh they don't",
    "start": "3274880",
    "end": "3280720"
  },
  {
    "text": "have to learn that defers slow or something they they defers absolutely what you want to use so it's nice to",
    "start": "3280720",
    "end": "3286720"
  },
  {
    "text": "attack those problems so I assume this means that like with the Beta release it's going to be very important for people to test it",
    "start": "3286720",
    "end": "3293119"
  },
  {
    "text": "too just to you know sort of double check that whole thing um is that out yet or is that later it's just about",
    "start": "3293119",
    "end": "3301280"
  },
  {
    "text": "Alpha let's see I'm double cheing John you're you've turned into like a a new",
    "start": "3301280",
    "end": "3306599"
  },
  {
    "text": "tech manager you're like have you checked it for bugs when's it going to be ready that's no I mean like this is",
    "start": "3306599",
    "end": "3311839"
  },
  {
    "text": "one of those things where it's fun to grab and try it out and make sure it's still working and I welcome feedback",
    "start": "3311839",
    "end": "3316960"
  },
  {
    "text": "absolutely because there might be some AB obscure case yeah I need to double check we were targeting for the beta 1",
    "start": "3316960",
    "end": "3323920"
  },
  {
    "text": "this week um um so I think maybe in the next couple days beta 1 12 114 will be",
    "start": "3323920",
    "end": "3330960"
  },
  {
    "text": "out okay I also think like having more people run the beta versions is very useful and since we have people",
    "start": "3330960",
    "end": "3338720"
  },
  {
    "text": "listening it's nice to tell them go grab it use it try it just cuz the more people that use it the more likely we",
    "start": "3338720",
    "end": "3343760"
  },
  {
    "text": "are to prevent bugs and things like that from being slipped in exactly we want to see all hear about all bugs right and",
    "start": "3343760",
    "end": "3350319"
  },
  {
    "text": "this is one of many runtime uh changes that are being made for 114 so yes there",
    "start": "3350319",
    "end": "3355760"
  },
  {
    "text": "memory optimizations and uh some other optimizations check to uh delays um in",
    "start": "3355760",
    "end": "3362559"
  },
  {
    "text": "it's called asynchronous preemption but delays in and running the garbage collector and so forth yeah for theuer",
    "start": "3362559",
    "end": "3369160"
  },
  {
    "text": "yeah I want to see Tom sleep optimized cuz it can really take a lot of time that can no I mean",
    "start": "3369160",
    "end": "3377240"
  },
  {
    "text": "it yeah sorry it's been stupid just I wanted to say thank you for the all the",
    "start": "3377240",
    "end": "3382559"
  },
  {
    "text": "effort that goes into these things because genuinely like it it makes a big difference um and it's nice to know that",
    "start": "3382559",
    "end": "3389319"
  },
  {
    "text": "there's good smart people working on these hard problems for us so I mean that Don thank you very much oh thank",
    "start": "3389319",
    "end": "3395280"
  },
  {
    "text": "you yeah the team is pretty amazing I mean both inside Google and outside Google and obviously over many years it's just been optimizing continually so",
    "start": "3395280",
    "end": "3403520"
  },
  {
    "text": "uh yeah it's very nice to help out and and um you know hopefully improve someone's program and so forth that's",
    "start": "3403520",
    "end": "3409680"
  },
  {
    "text": "great I'm going to ask live listeners if they have any questions to please put them in um go time that M Channel now",
    "start": "3409680",
    "end": "3415799"
  },
  {
    "text": "ask now or forever hold your peace we have a especially performance Channel we have a very live and active down I'm not",
    "start": "3415799",
    "end": "3422400"
  },
  {
    "text": "sure if you're in go for slack at all but the performance channel is quite Lively giving them a little shout out",
    "start": "3422400",
    "end": "3428720"
  },
  {
    "text": "okay um and they they were quite excited to have you on as well I don't think as excited as Matt but almost as excited",
    "start": "3428720",
    "end": "3437799"
  },
  {
    "text": "yeah I mean I've I've had um I've had strong words with people on this subject",
    "start": "3437799",
    "end": "3443319"
  },
  {
    "text": "I actually advocate for a lot and sometimes people would be upset by the performance thing naturally I dig into",
    "start": "3443319",
    "end": "3450559"
  },
  {
    "text": "their use case and it won't in that particular case won't make the slightest bit of difference to them but it does",
    "start": "3450559",
    "end": "3456880"
  },
  {
    "text": "make a difference to people and so now it's that I mean that is a massive uh optimization so I really feel like that",
    "start": "3456880",
    "end": "3463400"
  },
  {
    "text": "has now gone we can now there is no reason to not use defers so yeah getting",
    "start": "3463400",
    "end": "3469280"
  },
  {
    "text": "rid of that especially if any of those people happen to teach or anything like like you don't want them to to teach that and then somebody be like oh I",
    "start": "3469280",
    "end": "3475720"
  },
  {
    "text": "shouldn't use that and not really understand why they shouldn't be using it or you know like we mentioned like if you're opening a file it doesn't really",
    "start": "3475720",
    "end": "3481720"
  },
  {
    "text": "matter um but there's a lot of people that probably don't even realize that cuz somebody else got bit with a lock or",
    "start": "3481720",
    "end": "3487240"
  },
  {
    "text": "something else and and told them don't do it there and especially Junior developers we talk about that a lot where they just don't understand",
    "start": "3487240",
    "end": "3493680"
  },
  {
    "text": "necessarily why they shouldn't use it so they're just like oh I don't use that now you don't want them to have this vague idea that you know oh defers are",
    "start": "3493680",
    "end": "3499920"
  },
  {
    "text": "bad or something yeah because once they get that bague idea it's very hard to change that perception in that mind",
    "start": "3499920",
    "end": "3505559"
  },
  {
    "text": "right it is there it's in it's already here that's the thing that there is now there is now a challenge going to be I",
    "start": "3505559",
    "end": "3511680"
  },
  {
    "text": "think because I've seen it already I've seen this there's there's already this now uh religion against defer um so",
    "start": "3511680",
    "end": "3519359"
  },
  {
    "text": "we're going to have to go and find those churches and you know we're going toze we're going to have to proze yeah I",
    "start": "3519359",
    "end": "3525359"
  },
  {
    "text": "think the first stop is performance Channel and go first slack I think that that is going to be where the message",
    "start": "3525359",
    "end": "3530799"
  },
  {
    "text": "will be sent like please test beta 1 go at 114 um yeah yeah use def use defers",
    "start": "3530799",
    "end": "3541760"
  },
  {
    "text": "to your heart's content just like Matt Ry yes and I already was and then profile your program and and see that",
    "start": "3541760",
    "end": "3548559"
  },
  {
    "text": "you know or you know measure and and uh see that there's the defered is is not showing up so yeah this means the GH",
    "start": "3548559",
    "end": "3556000"
  },
  {
    "text": "standard Library could have a lot of first-time contributor changes that are all just putting the defer back in and getting rid of everything else oh yeah",
    "start": "3556000",
    "end": "3563559"
  },
  {
    "text": "okay yes I I I uh I sense a hackathon coming on or some kind of fun yeah",
    "start": "3563559",
    "end": "3570839"
  },
  {
    "text": "giving ideas John yeah the defer events tend never to",
    "start": "3570839",
    "end": "3577520"
  },
  {
    "text": "happen I don't know why that is oh that was dryly and perfectly",
    "start": "3577520",
    "end": "3583319"
  },
  {
    "text": "delivered Matt but actually is that why you like defer so much are you a procrastinator I'll tell you",
    "start": "3583319",
    "end": "3591720"
  },
  {
    "text": "later wow wow I think I really think that Matt missed his calling as a stand-up",
    "start": "3592520",
    "end": "3599559"
  },
  {
    "text": "comedian totally yeah funny I mean he can still be one he just has to choose his audience very wisely it's got to be",
    "start": "3599559",
    "end": "3606280"
  },
  {
    "text": "a tech audience well he he has go time FM I think the funniest lowkey podcast",
    "start": "3606280",
    "end": "3614280"
  },
  {
    "text": "out there thing is no one in Tech no one likes a stand-up comedian you just want them to get on tell us what you did",
    "start": "3614280",
    "end": "3619960"
  },
  {
    "text": "yesterday tell us what you're doing today and if you've got any blockers and get off you know what I mean no one",
    "start": "3619960",
    "end": "3625920"
  },
  {
    "text": "wants the uh yeah there you go see that's why I didn't I'll stick to programming I mean there's only three",
    "start": "3625920",
    "end": "3633039"
  },
  {
    "text": "people here you might have a whole audience that's live listeners that's laughing right now oh yeah let's assume",
    "start": "3633039",
    "end": "3640119"
  },
  {
    "text": "that I'm pretty sure this could be edited to make me not sound like an idiot I think you know what we need we",
    "start": "3642240",
    "end": "3649520"
  },
  {
    "text": "need 1990 sitcom uh audios right like the 1990",
    "start": "3649520",
    "end": "3654799"
  },
  {
    "text": "with the laughter said earlier I'm going to have to like I'm going to have to buy a",
    "start": "3654799",
    "end": "3660280"
  },
  {
    "text": "bigger monitor if I'm going to put a soundboard on here as well yeah maybe we can ask for post production for our our",
    "start": "3660280",
    "end": "3667880"
  },
  {
    "text": "lovely show producers to to do a nod to like some fun '90s sitcom with a laugh",
    "start": "3667880",
    "end": "3673760"
  },
  {
    "text": "track it would be fun that's a great idea okay so I'm not seeing any questions so I'm just going to go ahead",
    "start": "3673760",
    "end": "3679599"
  },
  {
    "text": "and wrap this one up um thank you everybody for joining us on go time uh we hope you come back next week and come",
    "start": "3679599",
    "end": "3686680"
  },
  {
    "text": "join us live sometime in the go time FM slack Channel on the go for [Music]",
    "start": "3686680",
    "end": "3693559"
  },
  {
    "text": "slack all right thank you for tuning in to this week's episode of go time if you're not yet hang with us and go for",
    "start": "3693559",
    "end": "3699680"
  },
  {
    "text": "slack we have a channel called go time FM look it up you'll find us hang with us during the live shows connect with",
    "start": "3699680",
    "end": "3706200"
  },
  {
    "text": "other members of the community share stories share codes share coffee recipes whatever it's a lot of fun also we have",
    "start": "3706200",
    "end": "3713240"
  },
  {
    "text": "discussions at Chang law.com on every episode head to Chang law.com gotime",
    "start": "3713240",
    "end": "3718760"
  },
  {
    "text": "find this episode and discuss it with the community also thanks to fast the our bandwidth partner robbar for helping",
    "start": "3718760",
    "end": "3724760"
  },
  {
    "text": "us move fast and fix things and luno for hosting the change law platform our music is produced by the mysterious",
    "start": "3724760",
    "end": "3731240"
  },
  {
    "text": "break master cylinder and if you want to hear more awesome podcasts like this subscribe to our Master feed it's one",
    "start": "3731240",
    "end": "3737240"
  },
  {
    "text": "feed to rule them all plus some extras that only hit the master feed and to Chang law.com slm or search for change",
    "start": "3737240",
    "end": "3744640"
  },
  {
    "text": "law master in your podcast client you'll find us thanks for tuning in we'll see you next [Music]",
    "start": "3744640",
    "end": "3772310"
  },
  {
    "text": "week [Music]",
    "start": "3773359",
    "end": "3797540"
  },
  {
    "text": "and then I think there's music there or something I don't close this thing out very often so I don't know yeah I think",
    "start": "3802039",
    "end": "3807799"
  },
  {
    "text": "yeah okay I mean hopefully the yeah we rely a lot Dan we rely a lot on",
    "start": "3807799",
    "end": "3813200"
  },
  {
    "text": "postproduction yeah yeah you haven't done laugh tracks",
    "start": "3813200",
    "end": "3818599"
  },
  {
    "text": "yet but not not yet this might be the one I think I think we've deferred the",
    "start": "3818599",
    "end": "3824000"
  },
  {
    "text": "laugh tracks to this episode that's going in that's going in the show oh yeah I'm TR we should have like go at",
    "start": "3824000",
    "end": "3832039"
  },
  {
    "text": "gopher con we should have like a comedy thing where people can write jokes about go oh my gosh I'd love that I think so",
    "start": "3832039",
    "end": "3838760"
  },
  {
    "text": "too instead of the lightning talks have like a small section for like lightning comedy lightning jokes yes that would be",
    "start": "3838760",
    "end": "3845440"
  },
  {
    "text": "great you can try and change the trend where all the jokes are about go and going and all that and now you have",
    "start": "3845440",
    "end": "3850920"
  },
  {
    "text": "jokes about defer as well yes exactly keyword yeah we could totally",
    "start": "3850920",
    "end": "3856880"
  },
  {
    "text": "move Beyond we like go puns or so 2019 we're totally meaning 2020 yeah we need",
    "start": "3856880",
    "end": "3863039"
  },
  {
    "text": "new comedy yeah absolutely like uh yeah I can't think of anything that's why we",
    "start": "3863039",
    "end": "3869279"
  },
  {
    "text": "need it",
    "start": "3869279",
    "end": "3872000"
  }
]