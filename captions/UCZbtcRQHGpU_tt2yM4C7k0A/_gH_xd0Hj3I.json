[
  {
    "text": "this is not about like replacing JavaScript it's about how can we bring JavaScript to places where you don't",
    "start": "80",
    "end": "6879"
  },
  {
    "text": "really have access to JavaScript normally so one example is like serverless environments that just run",
    "start": "6879",
    "end": "12679"
  },
  {
    "text": "web assembly how do you run JavaScript in this environment or there's you know different environments or os's that you",
    "start": "12679",
    "end": "19960"
  },
  {
    "text": "don't have a jit compiler and so all you have are the options of like running an interpreter and so we have kind of like",
    "start": "19960",
    "end": "26960"
  },
  {
    "text": "a wacky setup that you know surprisingly works pretty well where yes we're taking spider monkey which is firefox's",
    "start": "26960",
    "end": "33760"
  },
  {
    "text": "Javascript engine and we're compiling that to web assembly so we have you know a JavaScript engine running inside of",
    "start": "33760",
    "end": "39640"
  },
  {
    "text": "web assembly big thanks to our partners Leno",
    "start": "39640",
    "end": "44719"
  },
  {
    "text": "fastly and launch Darkly we love Leno they keep it fast and simple check them out at lin.com changelog our bandwidth",
    "start": "44719",
    "end": "51680"
  },
  {
    "text": "is provided by fastly learn more at fastly.com and get your feature Flags powered by launch Darkly get a demo at",
    "start": "51680",
    "end": "57840"
  },
  {
    "text": "launch dark.com this episode is brought to you by rol retool is the lowco platform for",
    "start": "57840",
    "end": "64640"
  },
  {
    "text": "developers to build internal tools super fast and super easy they have a ton of Integrations and templates to start with",
    "start": "64640",
    "end": "71520"
  },
  {
    "text": "with a click of a button in seconds you can start with a new postgress admin panel application kick off an admin",
    "start": "71520",
    "end": "77159"
  },
  {
    "text": "panel for reading from and writing to your database built on postgress this app let you look through edit and add",
    "start": "77159",
    "end": "83280"
  },
  {
    "text": "users orders and products it's too easy to get start with retool head to ret.com changelog to learn more and try for free",
    "start": "83280",
    "end": "89920"
  },
  {
    "text": "free again that's ret.com [Music]",
    "start": "89920",
    "end": "97589"
  },
  {
    "text": "changelog this is JS party your weekly celebration of JavaScript and the web a",
    "start": "100720",
    "end": "107399"
  },
  {
    "text": "quick note about this episode the day of recording Nick was dog sitting for a friend who was in the hospital the dog",
    "start": "107399",
    "end": "113920"
  },
  {
    "text": "was agitated due to the new environment and there weren't many options or workarounds for us so you will hear some",
    "start": "113920",
    "end": "119320"
  },
  {
    "text": "barking scattered throughout especially in the first 5 minutes the conversation is a good one and it's definitely worth",
    "start": "119320",
    "end": "124600"
  },
  {
    "text": "your while despite the distractions thanks for understanding and I hope you enjoy it okay let's do this hey it's",
    "start": "124600",
    "end": "130640"
  },
  {
    "text": "party time",
    "start": "130640",
    "end": "133160"
  },
  {
    "text": "going hello JS party people and welcome to another wonderful episode of your",
    "start": "136319",
    "end": "142400"
  },
  {
    "text": "favorite party about the web on the web we are live streaming right now I have our one and only Nick ni joining me",
    "start": "142400",
    "end": "148920"
  },
  {
    "text": "today ho hey hey Mr Burns we may be calling him Mr Burns through this episode because our special guest today",
    "start": "148920",
    "end": "156280"
  },
  {
    "text": "is Mr Nick fitgerald who is a staff engineer at fastly hey Nick hey how's it",
    "start": "156280",
    "end": "164200"
  },
  {
    "text": "going hello hello and I of course I'm your MC this week I'm kall coming at you",
    "start": "164200",
    "end": "169400"
  },
  {
    "text": "we are super excited to talk with you Nick thank you for joining us today the",
    "start": "169400",
    "end": "174640"
  },
  {
    "text": "impetus for this was I saw a really cool article talking about making JavaScript",
    "start": "174640",
    "end": "181280"
  },
  {
    "text": "run directly on web assembly but before we get into that can you tell us a little bit about yourself your background and what kind of stuff you do",
    "start": "181280",
    "end": "187680"
  },
  {
    "text": "yeah so I used to be at Mozilla where I started on the developer tools team and",
    "start": "187680",
    "end": "195400"
  },
  {
    "text": "I did that for a bunch of time and then kind of one Christmas break I was",
    "start": "195400",
    "end": "201560"
  },
  {
    "text": "thinking so so let me back up a bit I was the author and maintainer of the",
    "start": "201560",
    "end": "206760"
  },
  {
    "text": "source map library and it was something that we always had trouble with for like larger programs right we' get really big",
    "start": "206760",
    "end": "213519"
  },
  {
    "text": "Source Maps you know 15 megabytes 50 megabytes whatever and starting up the",
    "start": "213519",
    "end": "218959"
  },
  {
    "text": "dev tools would take a long time because we just sit there parsing these large Source maps and the parser was all",
    "start": "218959",
    "end": "225319"
  },
  {
    "text": "written in JavaScript and we were writing this like really you know contorted JavaScript like we were",
    "start": "225319",
    "end": "231680"
  },
  {
    "text": "avoiding exceptions we were avoiding allocating objects so we would like use",
    "start": "231680",
    "end": "237200"
  },
  {
    "text": "the same single object as an out parameter every time we called functions and like write to those properties",
    "start": "237200",
    "end": "243599"
  },
  {
    "text": "because you know allocation was too slow and then we get GC pauses and so one Christmas break I kind of got annoyed",
    "start": "243599",
    "end": "250599"
  },
  {
    "text": "and fed up with this and I decided to rewrite it in Rust and Target that to web assembly and ended up making it a",
    "start": "250599",
    "end": "258959"
  },
  {
    "text": "bunch faster I forget what the exact numbers were this is quite a while now but that was kind of like my intro to",
    "start": "258959",
    "end": "265160"
  },
  {
    "text": "web assembly and how I got kind of involved there and then as it turned out Mozilla was spinning up a team to work",
    "start": "265160",
    "end": "271000"
  },
  {
    "text": "on web assembly stuff different from the people who are working on web assembly like the engine directly that's inside",
    "start": "271000",
    "end": "276759"
  },
  {
    "text": "spider monkey and so I joined that and then uh",
    "start": "276759",
    "end": "282160"
  },
  {
    "text": "stayed with Milla for you know a while and then ended up moving fastly with a",
    "start": "282160",
    "end": "287919"
  },
  {
    "text": "bunch of the rest of my team and so that's kind of how I got here I remember when that first came out with the source",
    "start": "287919",
    "end": "294199"
  },
  {
    "text": "Maps I somehow I hadn't made the connection that was you but it's like it was 10 or 11 times faster than the",
    "start": "294199",
    "end": "300120"
  },
  {
    "text": "original implementation yeah and then M rif or Mr a I'm not sure exactly you",
    "start": "300120",
    "end": "305639"
  },
  {
    "text": "know what he goes by you know he kind of took it as a challenge and took the original JavaScript and made that a",
    "start": "305639",
    "end": "311680"
  },
  {
    "text": "bunch faster and kind of got it close in the neighborhood of where the web assembly was but what was cool is that",
    "start": "311680",
    "end": "318440"
  },
  {
    "text": "all of his techniques for speeding up the JavaScript were algorithmic and so I",
    "start": "318440",
    "end": "324600"
  },
  {
    "text": "just took all those algorithmic speed ups and applied them to the Rustin web assembly and that got like another five",
    "start": "324600",
    "end": "330560"
  },
  {
    "text": "times faster from what it was or something like that so I don't know that was really fun a good little back and",
    "start": "330560",
    "end": "337360"
  },
  {
    "text": "forth blog post series that's awesome and then the latest thing that I saw and",
    "start": "337360",
    "end": "344240"
  },
  {
    "text": "what kind of led to this was now you're working on a project that involves not just replacing JavaScript with web",
    "start": "344240",
    "end": "350600"
  },
  {
    "text": "assembly but actually running JavaScript using web assembly I think compiling the",
    "start": "350600",
    "end": "356520"
  },
  {
    "text": "the entire JavaScript engine down to web assembly or something like that can you talk a little bit about this project yeah so you know I I don't really like",
    "start": "356520",
    "end": "364479"
  },
  {
    "text": "the term replacing JavaScript right so I guess something I I left out in my intro is I also was the the lead of the rust",
    "start": "364479",
    "end": "372319"
  },
  {
    "text": "projects web assembly working group and so it was kind of trying to make rust and web assembly play nice with",
    "start": "372319",
    "end": "379080"
  },
  {
    "text": "JavaScript so like our whole thing was that like you know you shouldn't replace your JavaScript like they should you",
    "start": "379080",
    "end": "384720"
  },
  {
    "text": "know live together and and be friendly and so you can like reach for just those like",
    "start": "384720",
    "end": "390080"
  },
  {
    "text": "those kernels of really hot code and replace them with some Rust and web assembly but then that should fit into your larger program and so like again",
    "start": "390080",
    "end": "397360"
  },
  {
    "text": "this is not about like replacing JavaScript it's about how can we bring JavaScript to places where you don't",
    "start": "397360",
    "end": "404759"
  },
  {
    "text": "really have access to JavaScript normally so one example is like serverless environments that just run",
    "start": "404759",
    "end": "410599"
  },
  {
    "text": "web assembly how do you run JavaScript in this environment or there's you know",
    "start": "410599",
    "end": "416000"
  },
  {
    "text": "different environments or os's that you don't have a compiler and so all you",
    "start": "416000",
    "end": "421520"
  },
  {
    "text": "have are the options of like running an interpreter and so we have kind of like a wacky setup that you know surprisingly",
    "start": "421520",
    "end": "428319"
  },
  {
    "text": "works pretty well where yes we're taking spider monkey um which is firefox's Javascript engine and we're compiling",
    "start": "428319",
    "end": "435479"
  },
  {
    "text": "that to web assembly so we have you know a JavaScript engine running inside of web assembly and then we run the",
    "start": "435479",
    "end": "441520"
  },
  {
    "text": "JavaScript on top of that and you might be thinking like wow that's got to be way slower than you know running",
    "start": "441520",
    "end": "448960"
  },
  {
    "text": "JavaScript how you would normally run it and yeah that's true for throughput but",
    "start": "448960",
    "end": "454680"
  },
  {
    "text": "not for latency so latency is like how fast can we start up the engine and and respond to something and throughput is",
    "start": "454680",
    "end": "460759"
  },
  {
    "text": "like how much work can we do um Extended or like how long does it take to finish all of the work at a time and so we have",
    "start": "460759",
    "end": "469000"
  },
  {
    "text": "this tool that I developed called wiser which takes snapshots of web assembly",
    "start": "469000",
    "end": "474440"
  },
  {
    "text": "and allows you to just basically you know initialize a program take a snapshot at that point in time and then",
    "start": "474440",
    "end": "480479"
  },
  {
    "text": "the result of that snapshot is actually itself a web assembly module and when you instantiate that web assembly module",
    "start": "480479",
    "end": "487319"
  },
  {
    "text": "everything's already initialized and so you don't need to do any of that startup again and so what we can do is we can",
    "start": "487319",
    "end": "493680"
  },
  {
    "text": "actually like run all the JavaScript initialization we can start up the JavaScript engine we can parse the",
    "start": "493680",
    "end": "500280"
  },
  {
    "text": "JavaScript turn it into an as turn it into bite code evaluate the top level so",
    "start": "500280",
    "end": "506080"
  },
  {
    "text": "that all the like event listeners are registered and everything like that and like you know if the JavaScript needs to",
    "start": "506080",
    "end": "511440"
  },
  {
    "text": "build like a global lookup table that it does kind of in the top level all that stuff happens and then we take a",
    "start": "511440",
    "end": "517518"
  },
  {
    "text": "snapshot and then so that stuff's already done when we start up again there's basically nothing that needs to",
    "start": "517519",
    "end": "523518"
  },
  {
    "text": "happen like we're just immediately ready to start running JavaScript and if you kind of compare this to starting up like",
    "start": "523519",
    "end": "530600"
  },
  {
    "text": "a V8 isolate I think it takes around 5 milliseconds to to actually start the",
    "start": "530600",
    "end": "535640"
  },
  {
    "text": "isolate and that's you know you haven't even started processing the actual JavaScript source code at that point yet",
    "start": "535640",
    "end": "541920"
  },
  {
    "text": "right so you would still need to then parse the JavaScript emit bite code Etc",
    "start": "541920",
    "end": "547040"
  },
  {
    "text": "and so with our snapshot all that stuff is already done and I think the kind of metaphor that Lynn made in her blog post",
    "start": "547040",
    "end": "554040"
  },
  {
    "text": "was you know if you have a contractor you know you have to first negotiate with the contractor hire them that's",
    "start": "554040",
    "end": "559680"
  },
  {
    "text": "kind of like getting the JavaScript engine set up and you know getting office space and stuff and then there's",
    "start": "559680",
    "end": "565240"
  },
  {
    "text": "kind of like you know making the you know the Trello board or or whatever right and getting all those items ready",
    "start": "565240",
    "end": "571640"
  },
  {
    "text": "and that's kind of like parsing the JavaScript and then there's like the actual work that needs to be done and and so we're kind of like you know",
    "start": "571640",
    "end": "578240"
  },
  {
    "text": "making an office in a box here where you know you just open the suitcase and the office is all ready and everything is",
    "start": "578240",
    "end": "585079"
  },
  {
    "text": "ready to go and you don't have to do any of that kind of like initial setup time that's super interesting so can we",
    "start": "585079",
    "end": "591720"
  },
  {
    "text": "actually step back for a second because I think you're way Deep In The Weeds on this in a way that I think not everybody",
    "start": "591720",
    "end": "597480"
  },
  {
    "text": "has the context so you mentioned a couple things there that I'd love to dig into so first can you just sort of explain what is a a V8 isolate because",
    "start": "597480",
    "end": "604640"
  },
  {
    "text": "that was the comparison you're drawing yeah so a V8 isolate is basically like a",
    "start": "604640",
    "end": "610200"
  },
  {
    "text": "little world of JavaScript in V8 so I'm actually much less familiar with V8 than I am with spider monkey because I worked",
    "start": "610200",
    "end": "616720"
  },
  {
    "text": "at Mozilla and I you know hacked on spider monkey a bit but basically it's the idea is that like any of the",
    "start": "616720",
    "end": "622640"
  },
  {
    "text": "JavaScript within an isolate is kind of isolated from any JavaScript that you have in any other isolate so like if you",
    "start": "622640",
    "end": "630480"
  },
  {
    "text": "were developing a serverless platform and using V8 for that you wouldn't want",
    "start": "630480",
    "end": "636040"
  },
  {
    "text": "two customers code to run in the same isolate because you really don't want them to be able to poke at each other's",
    "start": "636040",
    "end": "641440"
  },
  {
    "text": "stuff right like that's a huge security vulnerability and so and isolate is kind of like the unit of like it's kind of",
    "start": "641440",
    "end": "647440"
  },
  {
    "text": "like a process in an OS or like you know a different window in a browser a different tab got it so it's like a",
    "start": "647440",
    "end": "654600"
  },
  {
    "text": "self-contained JavaScript execution environment exactly yeah cool and so",
    "start": "654600",
    "end": "660200"
  },
  {
    "text": "then you were talking a little bit about the different phases involved with running code in an isolate right there's",
    "start": "660200",
    "end": "665720"
  },
  {
    "text": "like U instantiation parsing all these different things so can you maybe break",
    "start": "665720",
    "end": "671800"
  },
  {
    "text": "down a little bit like what was the motivation for this because I think we jumped right into also what does it do",
    "start": "671800",
    "end": "677680"
  },
  {
    "text": "but like maybe we can talk a little bit about the wise behind it yeah so the idea is just basically how can we bring",
    "start": "677680",
    "end": "685040"
  },
  {
    "text": "JavaScript to environments where it otherwise wouldn't",
    "start": "685040",
    "end": "690240"
  },
  {
    "text": "and you know so for us the big motivating thing us at fastly is our",
    "start": "690240",
    "end": "696360"
  },
  {
    "text": "computer Edge platform where we just support web assembly and we would also",
    "start": "696360",
    "end": "701720"
  },
  {
    "text": "like to have some JavaScript there but there's you know similar there's environments where you don't have access",
    "start": "701720",
    "end": "707399"
  },
  {
    "text": "to jits and so maybe you would prefer to have this approach uh to get like really",
    "start": "707399",
    "end": "713440"
  },
  {
    "text": "fast startups that was something that was new to me this is not really my Realm by any means but but the idea of a",
    "start": "713440",
    "end": "721079"
  },
  {
    "text": "serverless environment for wasum like what are the practical uses of that yeah",
    "start": "721079",
    "end": "726560"
  },
  {
    "text": "so we just talked about isolates right and a wasm instance is kind of similarly",
    "start": "726560",
    "end": "732320"
  },
  {
    "text": "sandboxed right like so like there's a few different kinds of state that a wasm instance has but kind of the one that",
    "start": "732320",
    "end": "737720"
  },
  {
    "text": "everyone knows about is the linear memory right you just have basically this big array of bytes and that's kind",
    "start": "737720",
    "end": "743279"
  },
  {
    "text": "of your sandbox to play in as as a wasm instance and so it gives you kind of",
    "start": "743279",
    "end": "748880"
  },
  {
    "text": "simp similar guarantees but it's a lot simpler because we just that's it right there's just this array we're not",
    "start": "748880",
    "end": "755519"
  },
  {
    "text": "talking about like objects in a GC Heap or anything like that and so because it's so much simpler we can you know",
    "start": "755519",
    "end": "763000"
  },
  {
    "text": "start it up a lot faster creating a new one takes depending on the module you",
    "start": "763000",
    "end": "768760"
  },
  {
    "text": "know a handful of microseconds rather than you know milliseconds so like a whole order of magnitude faster and web",
    "start": "768760",
    "end": "776240"
  },
  {
    "text": "assembly has this nice property where it can only do stuff that it Imports so by",
    "start": "776240",
    "end": "783079"
  },
  {
    "text": "default web assembly can't really do anything at most it can kind of spin the CPU and cause some heat and maybe you",
    "start": "783079",
    "end": "790440"
  },
  {
    "text": "have to like interrupt it and say stop doing that but like if it wants to you know talk to the network or write to",
    "start": "790440",
    "end": "797480"
  },
  {
    "text": "disk or anything like that you need to kind of give it functions that allow it to do that and so it's kind of like a",
    "start": "797480",
    "end": "804639"
  },
  {
    "text": "capability based security if you're familiar with that which is basically like you don't have the capability to",
    "start": "804639",
    "end": "811519"
  },
  {
    "text": "write to the network or communicate on the network unless I give that to you okay and so you get these really nice",
    "start": "811519",
    "end": "817920"
  },
  {
    "text": "you know security and sandbox properties and so that's kind of why we're interested in that in servus because we",
    "start": "817920",
    "end": "824519"
  },
  {
    "text": "can do it you know create more instances faster than kind of you know alternative",
    "start": "824519",
    "end": "830279"
  },
  {
    "text": "approaches and we can pack more of them together in one got machine that's cool",
    "start": "830279",
    "end": "835720"
  },
  {
    "text": "that's a good reason for that that I I hadn't consider Ed um so if like without",
    "start": "835720",
    "end": "841440"
  },
  {
    "text": "getting on too big of a tangent if JavaScript isn't typically available there like what is the primary language",
    "start": "841440",
    "end": "848120"
  },
  {
    "text": "that is typically targeted with a wasum serverless environment yeah so rust is a big one okay and also some people use C",
    "start": "848120",
    "end": "856519"
  },
  {
    "text": "and C++ there's assembly script which is probably more familiar feeling to people",
    "start": "856519",
    "end": "862639"
  },
  {
    "text": "who are familiar with JavaScript kind of the idea is that it's kind of JavaScript syntax that Maps pretty much directly to",
    "start": "862639",
    "end": "869800"
  },
  {
    "text": "web assembly gotcha and so it'll look familiar but might feel a little bit different kind of based on the",
    "start": "869800",
    "end": "876160"
  },
  {
    "text": "restrictions of of targeting web",
    "start": "876160",
    "end": "879920"
  },
  {
    "text": "[Music] simply what's up party people this episode is brought to you by micro micro",
    "start": "884770",
    "end": "892120"
  },
  {
    "text": "AKA M3 is a new Cloud platform built for developers by developers our good friend",
    "start": "892120",
    "end": "898519"
  },
  {
    "text": "Asam as is leading this and if you're tired of AWS and feeling overwhelmed by the cloud infinite billing and an",
    "start": "898519",
    "end": "904199"
  },
  {
    "text": "Endless Sea of docks it is time for a change the micro team is reimagining the cloud for the next generation m30 is a",
    "start": "904199",
    "end": "911440"
  },
  {
    "text": "new developer friendly platform to explore search and use simpler apis for",
    "start": "911440",
    "end": "916480"
  },
  {
    "text": "everyday consumption all in one place get access to the apis you need in one click and test them right there on the",
    "start": "916480",
    "end": "922480"
  },
  {
    "text": "web before using them simple fast and affordable you won't get burned by bottomless billing you top up your",
    "start": "922480",
    "end": "928720"
  },
  {
    "text": "account and pays you go and right now they're in early development and building up the first set of apis and",
    "start": "928720",
    "end": "934279"
  },
  {
    "text": "they're looking for feedback from developers sign up and get $5 in free credits kick the tires give them your",
    "start": "934279",
    "end": "939720"
  },
  {
    "text": "input so they can build the best apis you want to use every single day learn more at m3.com again m3.com",
    "start": "939720",
    "end": "947550"
  },
  {
    "text": "[Music]",
    "start": "947550",
    "end": "959940"
  },
  {
    "text": "awesome so Nick you were sharing some about the motivations and some of the",
    "start": "960440",
    "end": "965480"
  },
  {
    "text": "pieces there around running in places where you wouldn't otherwise be able to run this but you've also alluded a lot",
    "start": "965480",
    "end": "970920"
  },
  {
    "text": "to Performance benefits and trade-offs and I'd love to dig in a little bit more than on what you accomplished cuz you",
    "start": "970920",
    "end": "977680"
  },
  {
    "text": "started this based on okay we want to be able to run this in our wasm environments but the blog post that Lynn",
    "start": "977680",
    "end": "983480"
  },
  {
    "text": "put together you also highlighted some really intriguing performance improvements and you sort of allude to",
    "start": "983480",
    "end": "989360"
  },
  {
    "text": "that in your startup times but yeah can you walk us through like what did you find out how does this thing run",
    "start": "989360",
    "end": "994839"
  },
  {
    "text": "relative to those isolates or relative to a native JavaScript environment yeah",
    "start": "994839",
    "end": "1000040"
  },
  {
    "text": "so starting up the JavaScript engine you know and creating an IIT or kind of",
    "start": "1000040",
    "end": "1005560"
  },
  {
    "text": "spider monkey equivalent you know takes around 5 milliseconds and then actually",
    "start": "1005560",
    "end": "1011600"
  },
  {
    "text": "you know par then once the JavaScript engine is created you have to give it the source code for your application and",
    "start": "1011600",
    "end": "1018279"
  },
  {
    "text": "so then involves parsing and all this stuff and so it can take quite a while",
    "start": "1018279",
    "end": "1023399"
  },
  {
    "text": "you know maybe up to like 50 milliseconds or something before your application is ready to respond and like",
    "start": "1023399",
    "end": "1030360"
  },
  {
    "text": "you know people have shown all over the place that like the faster you can have your pages load you know the more",
    "start": "1030360",
    "end": "1037520"
  },
  {
    "text": "customers will you know click check out and you know generally the happier they are or whatever right and so kind of",
    "start": "1037520",
    "end": "1044839"
  },
  {
    "text": "having you know the speed of light the fastest that you could potentially go be like on the order of like 5050",
    "start": "1044839",
    "end": "1051200"
  },
  {
    "text": "milliseconds or you know even if we got it down to like 6 milliseconds right that's like it's not great um you know",
    "start": "1051200",
    "end": "1058600"
  },
  {
    "text": "people fight hard to get better times than that because it's worth it so that",
    "start": "1058600",
    "end": "1064880"
  },
  {
    "text": "was kind of a no-go for us and so what we wanted to figure out was how could we",
    "start": "1064880",
    "end": "1070280"
  },
  {
    "text": "have basically instantaneous startup and that's kind of where my whole snapshotting work comes in and does it",
    "start": "1070280",
    "end": "1077720"
  },
  {
    "text": "achieve that then it's ESS yeah unmeasurably fast uh I mean yeah",
    "start": "1077720",
    "end": "1083280"
  },
  {
    "text": "we're talking microsc so you know I think for the JavaScript engines it's",
    "start": "1083280",
    "end": "1088440"
  },
  {
    "text": "around 300 microc for a r program you know you're looking at maybe 30 40",
    "start": "1088440",
    "end": "1094200"
  },
  {
    "text": "microc that's you know pretty dang near instantaneous that's wicked fast yeah",
    "start": "1094200",
    "end": "1099919"
  },
  {
    "text": "okay and you mentioned that there are some trade-offs in terms of throughput if you end up then executing a fair",
    "start": "1099919",
    "end": "1105039"
  },
  {
    "text": "amount have you kind of measured those curves over time like how long running of a function does this need to be",
    "start": "1105039",
    "end": "1110520"
  },
  {
    "text": "before it starts to kind of swap over to being less efficient yeah so there's",
    "start": "1110520",
    "end": "1116640"
  },
  {
    "text": "some subtlety there which is like if if you look at you know say my program takes 1 second end to end right it's",
    "start": "1116640",
    "end": "1123880"
  },
  {
    "text": "like well how much of that 1 second is actually bottlenecked in JavaScript execution right are you doing IO reading",
    "start": "1123880",
    "end": "1132080"
  },
  {
    "text": "from disk or you know communicating with the network or whatever and not every",
    "start": "1132080",
    "end": "1137159"
  },
  {
    "text": "program but many programs are basically just kind of gluing together IO and so in these cases like",
    "start": "1137159",
    "end": "1144640"
  },
  {
    "text": "even if you had the most advanced you know jit you know va8 or spider monkey or JSC you still wouldn't ever actually",
    "start": "1144640",
    "end": "1152200"
  },
  {
    "text": "get to those top tier jit levels right like you maybe you would break out of The Interpreter into kind of a baseline",
    "start": "1152200",
    "end": "1159200"
  },
  {
    "text": "compiler but you probably wouldn't break out of the Baseline compiler into the top level compiler and so like",
    "start": "1159200",
    "end": "1165240"
  },
  {
    "text": "JavaScript throughput for many programs not all programs just it doesn't really matter and so that's kind of like the",
    "start": "1165240",
    "end": "1172039"
  },
  {
    "text": "area that we're trying to do well in right now because the truth is if you",
    "start": "1172039",
    "end": "1177320"
  },
  {
    "text": "have something that is bottlenecked on JavaScript execution this is going to",
    "start": "1177320",
    "end": "1182720"
  },
  {
    "text": "not work super well right because we are using just an interpreter there's no um",
    "start": "1182720",
    "end": "1189080"
  },
  {
    "text": "jit compilation happening here and it's running in web assembly rather than native so there is like a little bit of",
    "start": "1189080",
    "end": "1195320"
  },
  {
    "text": "overhead it's kind of stuck on there but if you're gluing together IO then you'll",
    "start": "1195320",
    "end": "1200840"
  },
  {
    "text": "have a great time and the other option here is there's a proposal for web",
    "start": "1200840",
    "end": "1205960"
  },
  {
    "text": "assembly called module linking that we're kind of driving forward and we're in the process of",
    "start": "1205960",
    "end": "1211400"
  },
  {
    "text": "implementing and so what module linking does is it allows you to kind of create similar to like a webpack bundle where",
    "start": "1211400",
    "end": "1217360"
  },
  {
    "text": "you are bringing together a bunch of different JavaScript modules it's kind of similar but for web assembly and so",
    "start": "1217360",
    "end": "1222919"
  },
  {
    "text": "it's the same kind of vision that we were pushing on the web for Rus and web assembly working group where you're",
    "start": "1222919",
    "end": "1229120"
  },
  {
    "text": "saying you know take your core compute that's actually bottlenecked on the CPU and write that in Rust because it's just",
    "start": "1229120",
    "end": "1234720"
  },
  {
    "text": "easier to write that kind of code in Rust than it is in JavaScript and then just make it fit into the rest of your",
    "start": "1234720",
    "end": "1240159"
  },
  {
    "text": "JavaScript and so with module linking what we can do is you can say Hey you know take that core compute that's",
    "start": "1240159",
    "end": "1245720"
  },
  {
    "text": "actually bottleneck on CPU compile it to web assembly with rust and then link that in to your JavaScript program",
    "start": "1245720",
    "end": "1251679"
  },
  {
    "text": "that's running you know on the stuff that we've been talking about and you can actually import that as a JavaScript module and then you know any of the the",
    "start": "1251679",
    "end": "1259440"
  },
  {
    "text": "stuff that actually needs to be fast you can kind of just push onto the other side of that boundary that makes a lot",
    "start": "1259440",
    "end": "1264640"
  },
  {
    "text": "of sense interesting so this type of",
    "start": "1264640",
    "end": "1270000"
  },
  {
    "text": "moving Dynamic run in time environments and sort of Jus in time or interpreted",
    "start": "1270000",
    "end": "1275679"
  },
  {
    "text": "languages into running within a compiled context linking in compiled modules when",
    "start": "1275679",
    "end": "1281159"
  },
  {
    "text": "fast I feel like we've done that a lot on server side but doing web assembly",
    "start": "1281159",
    "end": "1286279"
  },
  {
    "text": "lets us do it anywhere we might want do you see a similar approach being applied to other languages besides",
    "start": "1286279",
    "end": "1292200"
  },
  {
    "text": "JavaScript yeah so what's cool about this approach of getting fast startup with snapshots is that it's not specific",
    "start": "1292200",
    "end": "1299600"
  },
  {
    "text": "to JavaScript at all right like if you happen to Love Ruby more than JavaScript",
    "start": "1299600",
    "end": "1304760"
  },
  {
    "text": "like you could do the same thing with Ruby and its interpreter or python or Lua you know it's just as long as it can",
    "start": "1304760",
    "end": "1312559"
  },
  {
    "text": "Target web assembly it's kind of just it's a feature of how simple web assembly is that we can take these",
    "start": "1312559",
    "end": "1317760"
  },
  {
    "text": "snapshots and make start up really fast so basically anything that can go to web assembly we can do this same technique",
    "start": "1317760",
    "end": "1323919"
  },
  {
    "text": "on that's super cool does fastly support that today so it's an open source tool so this isn't something that we're like",
    "start": "1323919",
    "end": "1331600"
  },
  {
    "text": "kind of hoarding the magic and you know doing it out as we please like you can download the tool it's on GitHub bite",
    "start": "1331600",
    "end": "1338919"
  },
  {
    "text": "code Alliance sweis w i z r because it's the WM initializer wiser and then",
    "start": "1338919",
    "end": "1347600"
  },
  {
    "text": "someone suggested that we call these modules after you know the snapshots is",
    "start": "1347600",
    "end": "1352960"
  },
  {
    "text": "wisened modules CU now they're they already know everything that they need to start up yeah how did you spell that",
    "start": "1352960",
    "end": "1360799"
  },
  {
    "text": "w i z okay we will include a link in our show notes for all who are interested in",
    "start": "1360799",
    "end": "1368600"
  },
  {
    "text": "in that yeah and if people are really interested in the snapshot side of things I gave a talk at this year's web",
    "start": "1368600",
    "end": "1375520"
  },
  {
    "text": "assembly Summit specifically about wiser and how it works so I can share a link",
    "start": "1375520",
    "end": "1380840"
  },
  {
    "text": "with that after the show yeah that would be super cool so where do you see this",
    "start": "1380840",
    "end": "1387600"
  },
  {
    "text": "going you know I think we're right now at the cusp with tools like this and you",
    "start": "1387600",
    "end": "1392760"
  },
  {
    "text": "know we had an episode a few weeks back where we were talking with the team behind stack containers or something",
    "start": "1392760",
    "end": "1398919"
  },
  {
    "text": "where you know they're basically running stack Blitz stack Blitz yes and web containers where they're talking about",
    "start": "1398919",
    "end": "1404600"
  },
  {
    "text": "running node.js and other serers side environments in the browser and things like that so we're kind of reaching this",
    "start": "1404600",
    "end": "1410760"
  },
  {
    "text": "place where web assembly is letting us open all these new possibilities what do you see is the",
    "start": "1410760",
    "end": "1416720"
  },
  {
    "text": "next Frontier here yeah so specifically for this JavaScript on WM work we are",
    "start": "1416720",
    "end": "1424880"
  },
  {
    "text": "looking to take kind of the classic optimizations that JavaScript engines",
    "start": "1424880",
    "end": "1430600"
  },
  {
    "text": "have used for improving throughput and applying them in kind of an ahead of time context rather than AJ in time",
    "start": "1430600",
    "end": "1436880"
  },
  {
    "text": "context so what JavaScript engines do is they'll look at you know this function is only ever called with two integers as",
    "start": "1436880",
    "end": "1444919"
  },
  {
    "text": "arguments and so I can optimize based on that and you know this you know plus",
    "start": "1444919",
    "end": "1450360"
  },
  {
    "text": "operation it always gets these two integers so I can turn that into you know an addition rather than you know",
    "start": "1450360",
    "end": "1456000"
  },
  {
    "text": "string concatenation or having to check whether I'm doing addition or string concatenation every time and kind of the",
    "start": "1456000",
    "end": "1461919"
  },
  {
    "text": "way that that happens are something called inline caches which kind of are like you know is it this type then do",
    "start": "1461919",
    "end": "1467679"
  },
  {
    "text": "this if it is it that type then do this and each of those do thises is is a little stub an inline cache stub and so",
    "start": "1467679",
    "end": "1474760"
  },
  {
    "text": "traditionally the way that inline caches have been done in kind of a jit environment is say we're reading a field",
    "start": "1474760",
    "end": "1481679"
  },
  {
    "text": "of an object it'll say you know is this every object has a shape or a hidden",
    "start": "1481679",
    "end": "1487320"
  },
  {
    "text": "class which is basically saying what are the order of properties that I have and kind of what what is my prototype chain",
    "start": "1487320",
    "end": "1494000"
  },
  {
    "text": "and that kind of thing normally if you don't have any idea what the shape is you have to kind like look up in a hash",
    "start": "1494000",
    "end": "1499720"
  },
  {
    "text": "table to see okay where does this field exist and then let me get that value and that's kind of an expensive operation",
    "start": "1499720",
    "end": "1506039"
  },
  {
    "text": "for something that happens so often but if you have an inline cache you can say is this object this shape that I've seen",
    "start": "1506039",
    "end": "1512960"
  },
  {
    "text": "before right like this function happens to always be called with objects that have the same shape and then you can just say if it is then I know already",
    "start": "1512960",
    "end": "1519960"
  },
  {
    "text": "I've kind of baked in that the field that I want to read is at offset 8 or something like that right and that's",
    "start": "1519960",
    "end": "1526279"
  },
  {
    "text": "just way faster it's like a check and then an offset read um and and so",
    "start": "1526279",
    "end": "1531360"
  },
  {
    "text": "normally the inline cache would kind of bake in the pointer to that shape and it",
    "start": "1531360",
    "end": "1536520"
  },
  {
    "text": "would also bake in that offset and those would kind of be generated in the machine code just in time but what we",
    "start": "1536520",
    "end": "1543559"
  },
  {
    "text": "can do is actually we can make the pointer and the offset parameters and make this inline cache like a little",
    "start": "1543559",
    "end": "1549679"
  },
  {
    "text": "function that takes these things and so now this doesn't actually depend on anything at runtime right because you",
    "start": "1549679",
    "end": "1556039"
  },
  {
    "text": "know where the shape is in memory that's something that's at runtime but we've kind of pulled all the stuff that",
    "start": "1556039",
    "end": "1562000"
  },
  {
    "text": "happens at runtime out and we have something that we can use ahead of time and so if you're baking in pointers and",
    "start": "1562000",
    "end": "1568000"
  },
  {
    "text": "stuff there's kind of an infinite number of inline caches that you could generate right but there's only like so many like",
    "start": "1568000",
    "end": "1574520"
  },
  {
    "text": "types of inline caches right where if you pull all these Dynamic things that are that rely on what's happening at",
    "start": "1574520",
    "end": "1581039"
  },
  {
    "text": "runtime out and you make them parameters then you're left with just n different kinds of inline caches and we can",
    "start": "1581039",
    "end": "1587240"
  },
  {
    "text": "actually compile all of those ahead of time and then kind of like wire them up during execution but without any kind of",
    "start": "1587240",
    "end": "1593880"
  },
  {
    "text": "just in time compilation this should get us our throughput around where",
    "start": "1593880",
    "end": "1599600"
  },
  {
    "text": "JavaScript was at kind of the start of the browser Wars when Chrome was like first coming out and it was like so much",
    "start": "1599600",
    "end": "1605559"
  },
  {
    "text": "faster than Firefox or whatever right and so that's good first step and then kind of the way that JavaScript engines",
    "start": "1605559",
    "end": "1611880"
  },
  {
    "text": "get even faster from there is they start doing more aggressive optimizations than",
    "start": "1611880",
    "end": "1618279"
  },
  {
    "text": "just like optimizing just the ad right they kind of say Okay assume that you know this whole function we only see",
    "start": "1618279",
    "end": "1624159"
  },
  {
    "text": "integers don't optimize each individual operation kind of optimize the whole function based on this and do lots of",
    "start": "1624159",
    "end": "1630360"
  },
  {
    "text": "inlining and stuff like that and we can't do any of that at runtime because",
    "start": "1630360",
    "end": "1636080"
  },
  {
    "text": "all of this depends on watching what's going on at runtime and then compiling at runtime but if you have kind of",
    "start": "1636080",
    "end": "1642520"
  },
  {
    "text": "profile data like if you run the program over some benchmarks and then you kind of record what happened you know what",
    "start": "1642520",
    "end": "1649520"
  },
  {
    "text": "types flowed where and which functions were called a bunch of times or not you can basically gather that same data and",
    "start": "1649520",
    "end": "1656520"
  },
  {
    "text": "then compile the JavaScript ahead of time and so that's kind of like the next step on the horizon after that is",
    "start": "1656520",
    "end": "1663720"
  },
  {
    "text": "basically do what jits do but ahead of time via some profiling maybe and that",
    "start": "1663720",
    "end": "1669679"
  },
  {
    "text": "should get us in principle you know it's kind of tricky because you have to have a good Benchmark set right which is kind",
    "start": "1669679",
    "end": "1675320"
  },
  {
    "text": "of the the big hurdle here but in principle should get our throughput basically to where JavaScript engines",
    "start": "1675320",
    "end": "1682200"
  },
  {
    "text": "are in the browser today this is really interesting so we're essentially talking about moving JavaScript to being more",
    "start": "1682200",
    "end": "1688159"
  },
  {
    "text": "and more of a compiled language in a lot of ways rather than an interpreted language with a jit compiler and as you",
    "start": "1688159",
    "end": "1695480"
  },
  {
    "text": "talked about profiling it made me wonder you're already doing pre-compilation you're already putting these things in",
    "start": "1695480",
    "end": "1701480"
  },
  {
    "text": "an environment where they're going to run against the most realistic data there is actual production data how",
    "start": "1701480",
    "end": "1707159"
  },
  {
    "text": "expensive would it be to put profiling information or you know profiling Gathering there and over time recompile",
    "start": "1707159",
    "end": "1714240"
  },
  {
    "text": "these same workers that you're deploying based on profiling data of their live",
    "start": "1714240",
    "end": "1719799"
  },
  {
    "text": "application yeah that's kind of like the the long long long long term right we",
    "start": "1719799",
    "end": "1725480"
  },
  {
    "text": "have a lot of stuff to build out before we can start thinking about that stuff but yeah you know you can do stuff like",
    "start": "1725480",
    "end": "1732279"
  },
  {
    "text": "you don't need to profile every single you know execution you can sample so it's exciting but we have a lot of work",
    "start": "1732279",
    "end": "1739240"
  },
  {
    "text": "to do before we can start doing that kind of thing yeah yeah that is super",
    "start": "1739240",
    "end": "1744399"
  },
  {
    "text": "cool yeah so we were also talking about like where are things going that's one dimension for where JavaScript on wasm",
    "start": "1744399",
    "end": "1750919"
  },
  {
    "text": "is going and then there's kind of this other dimension of of where wasm is going and you know wasm is similar to",
    "start": "1750919",
    "end": "1758159"
  },
  {
    "text": "JavaScript that has many people who are invested who are kind of doing different things right so there's not like One",
    "start": "1758159",
    "end": "1763559"
  },
  {
    "text": "Direction that it's going there's a bunch of directions that different people are taking it but one of the",
    "start": "1763559",
    "end": "1768600"
  },
  {
    "text": "directions that I'm really excited about and kind of alluded to is that module linking stuff and so kind of it's one",
    "start": "1768600",
    "end": "1775320"
  },
  {
    "text": "thing to be able to like stuff web assembly modules together but you know we talked about how simple web assem",
    "start": "1775320",
    "end": "1780840"
  },
  {
    "text": "modules are and that means that there's not really a good way to communicate Advanced structures because so web",
    "start": "1780840",
    "end": "1787960"
  },
  {
    "text": "assembly has you know MVP web assembly kind of Base web assembly has you know",
    "start": "1787960",
    "end": "1793039"
  },
  {
    "text": "32-bit floats 64-bit floats 32-bit integers 64-bit integers and so that's",
    "start": "1793039",
    "end": "1800000"
  },
  {
    "text": "not a lot of ways to communicate each other that's it right and and so like",
    "start": "1800000",
    "end": "1805320"
  },
  {
    "text": "you know what compilers do is within the memory they'll lay out where structures are and stuff and you know the same way",
    "start": "1805320",
    "end": "1810720"
  },
  {
    "text": "they would lay it out in Native memory but like if I'm a rust program and I want to talk to a c program like you",
    "start": "1810720",
    "end": "1818159"
  },
  {
    "text": "know C doesn't really understand rust data structures you know rust can kind of talk at the ca level but it's a",
    "start": "1818159",
    "end": "1823440"
  },
  {
    "text": "little bit painful and like now we're talking about like interacting with JavaScript but not even just JavaScript",
    "start": "1823440",
    "end": "1828840"
  },
  {
    "text": "directly but like JavaScript running inside spider monkey you know a JavaScript engine that's on WM and so",
    "start": "1828840",
    "end": "1835000"
  },
  {
    "text": "like the structures are just like totally foreign and communicating is really difficult but this is where",
    "start": "1835000",
    "end": "1840279"
  },
  {
    "text": "another web Su proposal comes in called interface types and so interface types",
    "start": "1840279",
    "end": "1846039"
  },
  {
    "text": "are basically a type grammar sort of similar to like web IDL where web IDL",
    "start": "1846039",
    "end": "1851120"
  },
  {
    "text": "defines you know here's records here's you know different string types etc etc",
    "start": "1851120",
    "end": "1856240"
  },
  {
    "text": "interface types defines a similar type grammar and then the idea is you'll be able to communicate like this and",
    "start": "1856240",
    "end": "1863600"
  },
  {
    "text": "interface types isn't quite an ideal in that the plan is eventually you'll be",
    "start": "1863600",
    "end": "1869679"
  },
  {
    "text": "able to kind of have Dynamic adapter functions that allow you so say you're receiving a string over this interface",
    "start": "1869679",
    "end": "1876679"
  },
  {
    "text": "types boundary that lets modules communicate and rust's strings are represented as uh utf8 and so it'll you",
    "start": "1876679",
    "end": "1884000"
  },
  {
    "text": "know want to just lower that into a flat utf8 array but but JavaScript strings",
    "start": "1884000",
    "end": "1889440"
  },
  {
    "text": "are much more complicated so in spider monkey I think there are I forget if it's 79 or 13 but it was one of those",
    "start": "1889440",
    "end": "1896760"
  },
  {
    "text": "kind of odd numbers like that different representations of a string and so maybe",
    "start": "1896760",
    "end": "1902120"
  },
  {
    "text": "the coolest one is called a rope and so what a rope is is basically a tree of",
    "start": "1902120",
    "end": "1908320"
  },
  {
    "text": "little strings and so the idea is like if you concatenate two strings and your string representation is just a buffer",
    "start": "1908320",
    "end": "1914399"
  },
  {
    "text": "you kind of have to you know potentially grow a new buffer that's the size of both of them and then you have to like",
    "start": "1914399",
    "end": "1919919"
  },
  {
    "text": "copy the strings in and it's like really expensive like that's an order and operation but if you have a rope what",
    "start": "1919919",
    "end": "1926679"
  },
  {
    "text": "you can do is you can just say you know it's kind of a tree and so you have a node that's just I'm the concatenation",
    "start": "1926679",
    "end": "1932799"
  },
  {
    "text": "of this one string and this other string and creating that is you know order one",
    "start": "1932799",
    "end": "1938279"
  },
  {
    "text": "and so it's it's very cool but it's very complicated but interface types kind of will eventually allow you to Define your",
    "start": "1938279",
    "end": "1945840"
  },
  {
    "text": "own ways to kind of lower you know kind of the platonic ideal of a string down",
    "start": "1945840",
    "end": "1951600"
  },
  {
    "text": "into a rope or something like that right kind of like arbitrary computation for translating these types on either side",
    "start": "1951600",
    "end": "1958679"
  },
  {
    "text": "so that's that's kind of like the furthest Vision but right now we're defining just kind of what's called a",
    "start": "1958679",
    "end": "1964240"
  },
  {
    "text": "canonical ABI which fixes the representation you you have to use you know a string buffer or something like",
    "start": "1964240",
    "end": "1970600"
  },
  {
    "text": "that there's one representation for each type and so with just the canonical ABI it is kind of just like an ideal but",
    "start": "1970600",
    "end": "1976760"
  },
  {
    "text": "this is It's open to that next step once we you know ship the first phase and so",
    "start": "1976760",
    "end": "1982159"
  },
  {
    "text": "this is going to allow all these modules to talk to each other and each of these modules what's what's really key about",
    "start": "1982159",
    "end": "1987919"
  },
  {
    "text": "interface types is that they're kind of shared nothing so if you think about like npm modules when you use an npm",
    "start": "1987919",
    "end": "1995240"
  },
  {
    "text": "module it gets all the same permissions and capabilities that your application",
    "start": "1995240",
    "end": "2000399"
  },
  {
    "text": "has right and this is a problem we've seen this you know supply chain attacks right where you know some generic",
    "start": "2000399",
    "end": "2008399"
  },
  {
    "text": "you know I'm a markdown you know library or something I don't think it's actually happened with a markdown library but you",
    "start": "2008399",
    "end": "2014760"
  },
  {
    "text": "know I just do something very innocent and then actually I'm you know reading your SSH keys from disk and I'm sending",
    "start": "2014760",
    "end": "2021720"
  },
  {
    "text": "them off to some server or I'm you know mining bitcoins or whatever right and so",
    "start": "2021720",
    "end": "2028039"
  },
  {
    "text": "it's not great and so we talked a bit earlier in the podcast about capabilities and how a web assembly module can't do anything unless you",
    "start": "2028039",
    "end": "2034200"
  },
  {
    "text": "explicitly give it something to do and so interface types kind of preserves that ability between different web",
    "start": "2034200",
    "end": "2041360"
  },
  {
    "text": "assembly modules so it says just because I can read to the dis and I'm talking with you and I'm using your markdown",
    "start": "2041360",
    "end": "2047399"
  },
  {
    "text": "Library doesn't mean you can talk to the dis all you can do is you know take this markdown me to talk to the disc yeah",
    "start": "2047399",
    "end": "2054000"
  },
  {
    "text": "exactly and so it kind of like it limits the blast radius of where things can go wrong when you have a supply chain",
    "start": "2054000",
    "end": "2060000"
  },
  {
    "text": "attack like that they can't escape their sandbox even if they're talking to you you know because the only way you can communicate is with this type grammar",
    "start": "2060000",
    "end": "2066960"
  },
  {
    "text": "and you don't don't automatically get any access to resources unless I explicitly give them to you so yeah so",
    "start": "2066960",
    "end": "2072919"
  },
  {
    "text": "this is like the other Horizon just kind of for web assembly in general and and we want you know the JavaScript to be able to participate in this ecosystem",
    "start": "2072919",
    "end": "2079800"
  },
  {
    "text": "like having this ecosystem of modules that that share nothing that don't implicitly give security capabilities",
    "start": "2079800",
    "end": "2087280"
  },
  {
    "text": "and they're all kind of sandboxed from each other even while they're working together that's kind of the direction we're",
    "start": "2087280",
    "end": "2092610"
  },
  {
    "text": "[Music] going",
    "start": "2092610",
    "end": "2099640"
  },
  {
    "text": "[Music]",
    "start": "2100840",
    "end": "2108310"
  },
  {
    "text": "what up party people if you want to know what's happening with your code track errors and monitor your app performance with Sentry build better software faster",
    "start": "2108520",
    "end": "2115880"
  },
  {
    "text": "with Sentry's application monitoring platform diagnose fix and optimize the",
    "start": "2115880",
    "end": "2121160"
  },
  {
    "text": "performance of your code cut your time on error resolution from hours to minutes it works with any language and",
    "start": "2121160",
    "end": "2127280"
  },
  {
    "text": "integrate with dozens of services over 1 million developers and 68,000 organizations already use Sentry and",
    "start": "2127280",
    "end": "2133920"
  },
  {
    "text": "best of all GP of listeners new to Sentry get the team plan for free for 3 months head to sentry.io to get started",
    "start": "2133920",
    "end": "2139440"
  },
  {
    "text": "and use the code party time when you sign up again sentry.io and use the code party time because hey it's party time",
    "start": "2139440",
    "end": "2147960"
  },
  {
    "text": "[Music]",
    "start": "2147960",
    "end": "2151089"
  },
  {
    "text": "y'all [Music]",
    "start": "2156640",
    "end": "2172180"
  },
  {
    "text": "all right let me jump in with a quick and potentially dumb question or series of questions I suppose but it's really",
    "start": "2174680",
    "end": "2180760"
  },
  {
    "text": "cool and I know that this is an oversimplification but it's kind of interesting to see like you know out of JavaScript was born this web assembly",
    "start": "2180760",
    "end": "2187640"
  },
  {
    "text": "not really but you know in a way and now we're figuring out how to get JavaScript back into web assembly and I just like",
    "start": "2187640",
    "end": "2194079"
  },
  {
    "text": "naively think that's hilarious but is there a interoperability path between",
    "start": "2194079",
    "end": "2199520"
  },
  {
    "text": "the two like if I'm writing JavaScript for wasum do I have to think about writing that differently than writing",
    "start": "2199520",
    "end": "2206040"
  },
  {
    "text": "JavaScript for like a browser environment or node yeah definitely that's actually that's a really great",
    "start": "2206040",
    "end": "2211480"
  },
  {
    "text": "question so it is it's spider monkey and it's not no",
    "start": "2211480",
    "end": "2218560"
  },
  {
    "text": "it's not a web browser it's just spider monkey so it's a much more paired down JavaScript environment than you would",
    "start": "2218560",
    "end": "2225200"
  },
  {
    "text": "have on the web or on node so I can't have like node modules obviously or anything like that and I don't have like",
    "start": "2225200",
    "end": "2231040"
  },
  {
    "text": "any of the you know browser environments like like fetcher things like that that are more supplied by the environment it",
    "start": "2231040",
    "end": "2237040"
  },
  {
    "text": "would just be the core language there's no Dom nodes for example and there's no",
    "start": "2237040",
    "end": "2242960"
  },
  {
    "text": "like require FS that you would have on node yep but kind of the placement for",
    "start": "2242960",
    "end": "2248119"
  },
  {
    "text": "that is the ecosystem that I was just talking about of these kind of shared nothing modules that communicate with",
    "start": "2248119",
    "end": "2254040"
  },
  {
    "text": "interface types we hope to kind of build you know a whole ecosystem that is doing this stuff and so if you want file",
    "start": "2254040",
    "end": "2260720"
  },
  {
    "text": "access you know you'd be able to import something that would give that to you potentially you know limiting what you",
    "start": "2260720",
    "end": "2267560"
  },
  {
    "text": "can access only to a certain directory right so you can access this scratch directory but you can't access my ssh in",
    "start": "2267560",
    "end": "2275079"
  },
  {
    "text": "my home directory M when we talk about about that communication does interface types does it define an ownership model",
    "start": "2275079",
    "end": "2281800"
  },
  {
    "text": "of some sort or like are we copying memory as we go between these or if not how do you deal with like borders",
    "start": "2281800",
    "end": "2288200"
  },
  {
    "text": "between garbage collected languages and not garbage collected languages and things like that yeah so there is a copy",
    "start": "2288200",
    "end": "2294160"
  },
  {
    "text": "implied between each side and yeah that's basically there to to make sure",
    "start": "2294160",
    "end": "2299839"
  },
  {
    "text": "that you're not sharing the memory because that's kind of the vector into",
    "start": "2299839",
    "end": "2305079"
  },
  {
    "text": "you know corruption Heap corruption and you know getting rid of the the sandbox properties that we care so much about",
    "start": "2305079",
    "end": "2313040"
  },
  {
    "text": "but what's nice is you know with the eventual full interface types that kind of allow programmatic lifting into an",
    "start": "2313040",
    "end": "2320680"
  },
  {
    "text": "interface type and then lowering into a concrete type on the other side that will be like only one copy and it will",
    "start": "2320680",
    "end": "2327880"
  },
  {
    "text": "be kind of like directly into and from the representations that each module",
    "start": "2327880",
    "end": "2332960"
  },
  {
    "text": "would kind of like natively want it's basically you know as good as you can",
    "start": "2332960",
    "end": "2338040"
  },
  {
    "text": "get implying that you do have to have one copy right got it so thinking then",
    "start": "2338040",
    "end": "2344839"
  },
  {
    "text": "about the implications for application architecture as we talk about these things we're going to want to have",
    "start": "2344839",
    "end": "2349960"
  },
  {
    "text": "modules that essentially are self-contained relative to data where you know a module is going to own a set",
    "start": "2349960",
    "end": "2355640"
  },
  {
    "text": "of data and you want to keep the communication between them relatively minimal in terms of data size ideally",
    "start": "2355640",
    "end": "2361720"
  },
  {
    "text": "yeah ideally I think it depends on the component right like copying a string is pretty fast you know like M Copy is",
    "start": "2361720",
    "end": "2369720"
  },
  {
    "text": "quite fast but like it also depends like how nested is the loop in which you're calling it right and so I don't know",
    "start": "2369720",
    "end": "2377000"
  },
  {
    "text": "there there are architectural things that you can do you can kind of like make one module own the data and then",
    "start": "2377000",
    "end": "2383640"
  },
  {
    "text": "kind of hand out like identifiers saying like you know this is essentially a pointer to this data and whenever you",
    "start": "2383640",
    "end": "2390280"
  },
  {
    "text": "want to ask something about that data you know give that back to me and you know you could almost imagine it as like",
    "start": "2390280",
    "end": "2396359"
  },
  {
    "text": "an object and that like the little self and then you call each method to get little bits of data but you don't ever",
    "start": "2396359",
    "end": "2401640"
  },
  {
    "text": "get the whole thing this is kind of actually what I did with the source map Library which is like yeah okay we have",
    "start": "2401640",
    "end": "2407200"
  },
  {
    "text": "to parse the whole Source map which it's a debug info format I guess we didn't talk about that it's a debug info format",
    "start": "2407200",
    "end": "2412720"
  },
  {
    "text": "that Maps you know essentially like minified JavaScript to unminified JavaScript back and forth or say you",
    "start": "2412720",
    "end": "2419680"
  },
  {
    "text": "know JavaScript to the original coffee script or closure script or whatever",
    "start": "2419680",
    "end": "2424800"
  },
  {
    "text": "that it compiled down to and so we have to kind of parse that and get the full mappings so we know this line",
    "start": "2424800",
    "end": "2431079"
  },
  {
    "text": "corresponds to that line and this file corresponds to that file but like whenever the debugger for example stops",
    "start": "2431079",
    "end": "2438040"
  },
  {
    "text": "in a location it doesn't need the full mappings right it doesn't need everything it just needs to know right",
    "start": "2438040",
    "end": "2443680"
  },
  {
    "text": "now I'm paused at this location what's the like real Source location for where I'm currently paused at and that's a",
    "start": "2443680",
    "end": "2449400"
  },
  {
    "text": "tiny amount of data compared to the huge map right and so you just kind of expose",
    "start": "2449400",
    "end": "2454440"
  },
  {
    "text": "an API that allows you to keep the full data set kind of in the original",
    "start": "2454440",
    "end": "2459760"
  },
  {
    "text": "component and then just make little queries where you get the little bits of data out on the other side yeah that's",
    "start": "2459760",
    "end": "2466560"
  },
  {
    "text": "really interesting how much overhead is there in terms of calling between modules is this like roughly equivalent",
    "start": "2466560",
    "end": "2471960"
  },
  {
    "text": "to a function call even within a module or is it higher cost it's a little bit higher cost than function calls within a",
    "start": "2471960",
    "end": "2478319"
  },
  {
    "text": "module but not too much basically maybe we're getting a little bit too bogged down into details but like there's a",
    "start": "2478319",
    "end": "2485440"
  },
  {
    "text": "register for the VM context that kind of keeps track of like what is my current wasm instance and what are the bounds of",
    "start": "2485440",
    "end": "2492400"
  },
  {
    "text": "its memories and things like that and that stays in a register and when you",
    "start": "2492400",
    "end": "2497520"
  },
  {
    "text": "call across instances you know to a new module you have to kind of like swap out that register with the new instances",
    "start": "2497520",
    "end": "2504520"
  },
  {
    "text": "register but like you know so if you're doing a micro Benchmark you'll see it show up but if you're doing any sort of",
    "start": "2504520",
    "end": "2510839"
  },
  {
    "text": "like actual work anywhere else it's G to be lost in the noise yeah well and that",
    "start": "2510839",
    "end": "2516240"
  },
  {
    "text": "means that it's extremely viable to treat these things as essentially objects in a lot of ways yeah you can",
    "start": "2516240",
    "end": "2522119"
  },
  {
    "text": "say you know this module owns this data and you can call methods that are essentially accessors on it when you",
    "start": "2522119",
    "end": "2527720"
  },
  {
    "text": "need the data yep exactly really minimize the amount of copying you do that's super cool so as we move towards",
    "start": "2527720",
    "end": "2534680"
  },
  {
    "text": "this world what do you think the implications are for how we develop applications and are there particular",
    "start": "2534680",
    "end": "2541520"
  },
  {
    "text": "domains of applications that are likely to benefit or sort of be driven to adopting this sooner yeah so with any",
    "start": "2541520",
    "end": "2549200"
  },
  {
    "text": "kind of like new ecosystem the more different it is the harder it is to Port existing",
    "start": "2549200",
    "end": "2555520"
  },
  {
    "text": "applications to it right and so this is pretty different right like JavaScript",
    "start": "2555520",
    "end": "2562720"
  },
  {
    "text": "environments today don't have capability based security and kind of allow you know ambient access to the network or to",
    "start": "2562720",
    "end": "2569319"
  },
  {
    "text": "dis or or what have you Unix generally allows the same there are ways to lock",
    "start": "2569319",
    "end": "2575160"
  },
  {
    "text": "it down but like by default you know it kind of allows ambient Authority most popular platforms aren't",
    "start": "2575160",
    "end": "2583160"
  },
  {
    "text": "like this and so porting existing applications depending on how large the",
    "start": "2583160",
    "end": "2588240"
  },
  {
    "text": "application is and how many things it's using and stuff like it could be hard right similar to like you know porting a",
    "start": "2588240",
    "end": "2594760"
  },
  {
    "text": "desktop application to the web can be pretty hard right especially the larger it is but that tells me that we'll see",
    "start": "2594760",
    "end": "2603160"
  },
  {
    "text": "more like new applications being developed kind of you know Green field applications and then where are we you",
    "start": "2603160",
    "end": "2611000"
  },
  {
    "text": "know deploying this stuff first well us fastly are doing it kind of in servess",
    "start": "2611000",
    "end": "2616160"
  },
  {
    "text": "environments where in general you already have kind of like smaller you",
    "start": "2616160",
    "end": "2622359"
  },
  {
    "text": "know micro applications so I think that's relatively easy to to kind of",
    "start": "2622359",
    "end": "2628920"
  },
  {
    "text": "bring over to this new paradigm and another kind of domain where we've seen a lot of excitement for web assembly and",
    "start": "2628920",
    "end": "2636559"
  },
  {
    "text": "I think we will work well for this this kind of ecosystem is games that want to",
    "start": "2636559",
    "end": "2642640"
  },
  {
    "text": "have like plugins or mods where you know say hey you want to you know change X Y",
    "start": "2642640",
    "end": "2648559"
  },
  {
    "text": "or Z about the game uh here give us a web assembly module and you know that's",
    "start": "2648559",
    "end": "2653599"
  },
  {
    "text": "kind of like what you'll write it in and then it's sandboxed from the rest of the code and you can't kind of break out you can only use the game apis that we give",
    "start": "2653599",
    "end": "2660480"
  },
  {
    "text": "you or you know basically any kind of like plug-in architecture maybe for uh a",
    "start": "2660480",
    "end": "2665720"
  },
  {
    "text": "digital audio Workstation you know something like I don't know what are popular digital audio workstations I guess like Ableton and",
    "start": "2665720",
    "end": "2673680"
  },
  {
    "text": "Reaper and these sort of things you know they're taking these You Know audio signals or you know midi or whatever uh",
    "start": "2673680",
    "end": "2681680"
  },
  {
    "text": "and then that goes into one plugin that you know provides a filter and then there's another one that's a compressor",
    "start": "2681680",
    "end": "2687160"
  },
  {
    "text": "or another one that adds you know A Chorus effect and each of these could be",
    "start": "2687160",
    "end": "2692280"
  },
  {
    "text": "their own little web assembly module communicating with interface types to kind of apply by their transformation on",
    "start": "2692280",
    "end": "2698680"
  },
  {
    "text": "that signal along the way and then you just you know that it's not going to break out of the sandbox again and it's",
    "start": "2698680",
    "end": "2704280"
  },
  {
    "text": "not going to mess with your desktop or whatever it's just going to work on the",
    "start": "2704280",
    "end": "2709440"
  },
  {
    "text": "audio like it said it would so like that's kind of another area which this would be really a really good fit",
    "start": "2709440",
    "end": "2715599"
  },
  {
    "text": "awesome Nick n did you have any more things you wanted to dig into I think",
    "start": "2715599",
    "end": "2720640"
  },
  {
    "text": "you covered the other question that I had maybe you already answered this but",
    "start": "2720640",
    "end": "2726760"
  },
  {
    "text": "did did so like this makes sense to me from like having a like a serverless",
    "start": "2726760",
    "end": "2733240"
  },
  {
    "text": "wasum environment like this does it also make sense to run JavaScript in a browser through wasm yeah if I were to",
    "start": "2733240",
    "end": "2740720"
  },
  {
    "text": "imagine use cases where that made sense it would be very contorted I think",
    "start": "2740720",
    "end": "2745960"
  },
  {
    "text": "really you know you have really top quality JavaScript implementations in the browser and you know you don't need",
    "start": "2745960",
    "end": "2754040"
  },
  {
    "text": "to do these kind of tricks in order to bring javascri R to your environment cuz you already have it right and you know",
    "start": "2754040",
    "end": "2760400"
  },
  {
    "text": "if you have CPU bound JavaScript it will get jit compiled and you know you'll",
    "start": "2760400",
    "end": "2766880"
  },
  {
    "text": "have state-of-the-art implementations making your code fast uh as far as throughput c yeah it just if you're on",
    "start": "2766880",
    "end": "2773520"
  },
  {
    "text": "the web use use your web browsers JavaScript implementation cool and then another",
    "start": "2773520",
    "end": "2779280"
  },
  {
    "text": "question is can you think of any like triggers or things that developers should be on the lookout for for using",
    "start": "2779280",
    "end": "2786319"
  },
  {
    "text": "this as a potential poal solution to a problem that they have like is there something that would identify this as a",
    "start": "2786319",
    "end": "2791800"
  },
  {
    "text": "problem yeah or as a solution I would say whenever you're looking to have like",
    "start": "2791800",
    "end": "2797880"
  },
  {
    "text": "your users be able to run custom code and you don't trust them and you kind of",
    "start": "2797880",
    "end": "2805880"
  },
  {
    "text": "want to have you but you still want to have them be able to kind of like plug into your architecture and customize things that's",
    "start": "2805880",
    "end": "2813359"
  },
  {
    "text": "basically what this is designed for nice okay so we develop wasm time wasm engine",
    "start": "2813359",
    "end": "2819280"
  },
  {
    "text": "which we kind of focus a lot of work on making it easy to embed into other applications but there's a bunch of",
    "start": "2819280",
    "end": "2825960"
  },
  {
    "text": "different choices out there if you find one that works better than WM time yeah",
    "start": "2825960",
    "end": "2831319"
  },
  {
    "text": "nice yeah this is I feel like uh the web's security model was by necessity",
    "start": "2831319",
    "end": "2839240"
  },
  {
    "text": "pushed to a place where you know things had to be sandbox they had to be secure because suddenly you've got all this",
    "start": "2839240",
    "end": "2845480"
  },
  {
    "text": "untrusted code that's going to be running mhm and now web assembly is basically allowing us to say hey that's",
    "start": "2845480",
    "end": "2851200"
  },
  {
    "text": "a good idea for any type of code we might want to run let's pull that in yeah and we can rather than have one",
    "start": "2851200",
    "end": "2857400"
  },
  {
    "text": "sandbox for you know the whole tab or something right we can have you know",
    "start": "2857400",
    "end": "2862640"
  },
  {
    "text": "sandboxes for each different component which is really nice in general like you",
    "start": "2862640",
    "end": "2868920"
  },
  {
    "text": "know trust things less if you if you don't have to trust it then don't right even if you do trust it don't trust it I",
    "start": "2868920",
    "end": "2875720"
  },
  {
    "text": "feel like that's a good show t trust things less I'm not paranoid I [Laughter]",
    "start": "2875720",
    "end": "2883359"
  },
  {
    "text": "swear I feel like if you're running code that you didn't write paranoia is a very",
    "start": "2883359",
    "end": "2889760"
  },
  {
    "text": "healthy attitude yep awesome um well I think that is we've covered a lot of",
    "start": "2889760",
    "end": "2897520"
  },
  {
    "text": "ground I think I'm still like sitting here kind of in shock absorbing all of",
    "start": "2897520",
    "end": "2902680"
  },
  {
    "text": "it uh yeah uh Nick do you have any other things want to leave us with or let us",
    "start": "2902680",
    "end": "2907880"
  },
  {
    "text": "know about before we wrap up uh well I really liked your intro",
    "start": "2907880",
    "end": "2913520"
  },
  {
    "text": "music and I was wondering if if one of you produced that or you know who did the music ah yes uh all of the JS party",
    "start": "2913520",
    "end": "2922400"
  },
  {
    "text": "and change log generally all of the changelog family of podcasts their music is produced by breakmaster",
    "start": "2922400",
    "end": "2927839"
  },
  {
    "text": "cylinder so he has some he I think they have some great stuff yeah look them up",
    "start": "2927839",
    "end": "2935599"
  },
  {
    "text": "you'll get another taste cuz we're going to close with an outro um shortly but awesome well if there's nothing else",
    "start": "2935599",
    "end": "2941640"
  },
  {
    "text": "then uh thank you so much for joining us today Nick I think this is a really interesting topic and I'm super excited",
    "start": "2941640",
    "end": "2947640"
  },
  {
    "text": "to see where it continues to go yeah thanks so much for having me this was a blast thank you all right and if you're",
    "start": "2947640",
    "end": "2954240"
  },
  {
    "text": "listening to this not live you're listening to this on your podcast and you want to join in you want to be a part of the party live when we do it we",
    "start": "2954240",
    "end": "2961559"
  },
  {
    "text": "do record live and publish to YouTube at the same time we do it every week Thursdays 10:00 Pacific 12 Central 1",
    "start": "2961559",
    "end": "2969079"
  },
  {
    "text": "Eastern check out",
    "start": "2969079",
    "end": "2972440"
  },
  {
    "text": "[Music]",
    "start": "2981800",
    "end": "2987689"
  },
  {
    "text": "changelog.md JS party t-shirt once again that's JSP party. fmff like frontend Feud JS party is",
    "start": "2994000",
    "end": "3001839"
  },
  {
    "text": "produced by Jared Santo with music by The Beat freak break master cylinder next up on the Pod Chris AML and myself",
    "start": "3001839",
    "end": "3009079"
  },
  {
    "text": "discuss all the things that go on before you write a lior code and we also analyze Dan abber mom's post is npm",
    "start": "3009079",
    "end": "3016359"
  },
  {
    "text": "audit broken by Design stay tuned for that episode we'll have it ready for you next",
    "start": "3016359",
    "end": "3021390"
  },
  {
    "text": "[Music] week",
    "start": "3021390",
    "end": "3028640"
  },
  {
    "text": "l",
    "start": "3031160",
    "end": "3034039"
  }
]