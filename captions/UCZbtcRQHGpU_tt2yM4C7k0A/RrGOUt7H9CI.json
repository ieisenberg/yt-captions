[
  {
    "text": "bandwith for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at change log because of rbar check them out at roar.com and we're hosted on linode",
    "start": "5520",
    "end": "11480"
  },
  {
    "text": "cloud servers at the lin.com changelog what's up Gophers it's not too",
    "start": "11480",
    "end": "17320"
  },
  {
    "text": "late if you're planning to attend ccon Cloud native con here in North America later this November know that we have",
    "start": "17320",
    "end": "23720"
  },
  {
    "text": "just entered late registration pricing but you can still save 10% off your registration when you use our code KC na",
    "start": "23720",
    "end": "31439"
  },
  {
    "text": "changelog 19 again that's KY na changelog 19 check the CH for links to",
    "start": "31439",
    "end": "37040"
  },
  {
    "text": "learn more and [Music]",
    "start": "37040",
    "end": "42400"
  },
  {
    "text": "[Music] register welcome to go time a podcast",
    "start": "49150",
    "end": "55760"
  },
  {
    "text": "featuring a diverse panel and special guests discussing Cloud infrastructure just distributed systems microservices",
    "start": "55760",
    "end": "62079"
  },
  {
    "text": "kubernetes Docker oh and also go we record live every Tuesday at 300 p.m.",
    "start": "62079",
    "end": "67439"
  },
  {
    "text": "Eastern new Pacific join the community slack with us in real time during the show in the go time FM channel in go for",
    "start": "67439",
    "end": "73520"
  },
  {
    "text": "slack follow us on Twitter we're at gotime FM listen live at Chang law.com or subscribe at changel law.com gotime",
    "start": "73520",
    "end": "82000"
  },
  {
    "text": "and now on to the show hello there and welcome to go time",
    "start": "82000",
    "end": "89320"
  },
  {
    "text": "I'm Matt and this episode is all about application design I'm joined by a",
    "start": "89320",
    "end": "97240"
  },
  {
    "text": "concurrence of gophers which you may already have read about and met maybe",
    "start": "97240",
    "end": "104079"
  },
  {
    "text": "and seen videos of and all sorts so I'll introduce them now the first one welcome",
    "start": "104079",
    "end": "110560"
  },
  {
    "text": "back Peter Borgen hello Peter hello I'm speaking to you from my Berlin dungeon",
    "start": "110560",
    "end": "116000"
  },
  {
    "text": "this time in a slightly less echoey chamber of it love nice to have you again uh we're also",
    "start": "116000",
    "end": "123200"
  },
  {
    "text": "joined it's uh it's Kat Jing hello Cat hello wow how are you you actually",
    "start": "123200",
    "end": "128319"
  },
  {
    "text": "pronounced my name right this time yeah have you been practicing I have been practicing yeah because the letters in",
    "start": "128319",
    "end": "135080"
  },
  {
    "text": "your name don't help so I had to practice they don't help me hello",
    "start": "135080",
    "end": "140440"
  },
  {
    "text": "everyone um I'm joining from my flat in London awesome welcome I also want to go",
    "start": "140440",
    "end": "146080"
  },
  {
    "text": "around and get everyone's Twitter names as well after in case anybody wants to you know send love or or hate on",
    "start": "146080",
    "end": "152360"
  },
  {
    "text": "anything you've said um my final guest last but no least it's only Ben Johnson hello Ben hey glad to be on here I'm",
    "start": "152360",
    "end": "159959"
  },
  {
    "text": "representing uh Denver out here lovely and how's the weather over there in Denver today that's great sunny as",
    "start": "159959",
    "end": "166000"
  },
  {
    "text": "always y I lived there actually believe it or not for a while yeah well welcome",
    "start": "166000",
    "end": "171680"
  },
  {
    "text": "we're going to be talking about we're going to be talking about application design uh we're going to be covering I",
    "start": "171680",
    "end": "177480"
  },
  {
    "text": "think I'm interested in what Prin principles that there are that we can apply I know that a lot of decision",
    "start": "177480",
    "end": "185560"
  },
  {
    "text": "making when it comes to the design of applications is is really more tradeoffs than their being strict right and Wrongs",
    "start": "185560",
    "end": "192760"
  },
  {
    "text": "so I'd love to dig into some of that too would also be great to hear about some um common mistakes that we see and that",
    "start": "192760",
    "end": "200480"
  },
  {
    "text": "we've made ourselves in the past as well as any sort of specific patterns which people can apply today to their work",
    "start": "200480",
    "end": "208000"
  },
  {
    "text": "that would be excellent so no pressure but let's kick things off principles are",
    "start": "208000",
    "end": "213360"
  },
  {
    "text": "there any that stand out to anyone things that you think are probably the most important things to consider when",
    "start": "213360",
    "end": "219000"
  },
  {
    "text": "it comes to application design so I'd like to uh back up half a step actually",
    "start": "219000",
    "end": "224200"
  },
  {
    "text": "and uh observe the things that you observed what it was like principles set",
    "start": "224200",
    "end": "229599"
  },
  {
    "text": "and setting this sort of thing another thing that I am increasingly aware of when I talk about you know how you",
    "start": "229599",
    "end": "235239"
  },
  {
    "text": "should design your application is the context in which you program so like if you're writing by yourself and just kind",
    "start": "235239",
    "end": "241519"
  },
  {
    "text": "of like exploring a problem space the rules are completely different than if you're on a team of like 20 people",
    "start": "241519",
    "end": "246799"
  },
  {
    "text": "working for 14500 and they're completely different if you're uh working on an open source project with you know a 100",
    "start": "246799",
    "end": "254040"
  },
  {
    "text": "maintainers that drift in and out and I think we kind of often fail to bring up",
    "start": "254040",
    "end": "259040"
  },
  {
    "text": "our contexts when we talk about what's good and what's bad and I think that more than anything is like uh behind a",
    "start": "259040",
    "end": "265759"
  },
  {
    "text": "lot of our opinions so I try to do that I often fail maybe that's something that's worth talking about I think so",
    "start": "265759",
    "end": "272160"
  },
  {
    "text": "and I would extend that also to the the life cycle of the of the project itself",
    "start": "272160",
    "end": "277440"
  },
  {
    "text": "as well even if you are in a big company at the beginning of a project you",
    "start": "277440",
    "end": "282759"
  },
  {
    "text": "probably would do things differently and they will change over time and hopefully",
    "start": "282759",
    "end": "287880"
  },
  {
    "text": "they change in response to real feedback from the code and things so yeah I think",
    "start": "287880",
    "end": "293240"
  },
  {
    "text": "that's a great point the context matters and I think when the context is removed that's when we end up having a kind of",
    "start": "293240",
    "end": "300039"
  },
  {
    "text": "arguments and disagreements about things publicly on Twitter or in person and",
    "start": "300039",
    "end": "305759"
  },
  {
    "text": "often it's because we're just looking at it from a different context and so that's what I mean it's not really right",
    "start": "305759",
    "end": "311160"
  },
  {
    "text": "or wrong it's sort of tradeoff yeah I I very much agree yeah I think that also",
    "start": "311160",
    "end": "316320"
  },
  {
    "text": "explains why there is very rarely like a right or wrong answer like the answer is almost always it depends on what you're",
    "start": "316320",
    "end": "322240"
  },
  {
    "text": "building who you're building this with like all those things that Peter mentioned and I think that's kind of why",
    "start": "322240",
    "end": "328160"
  },
  {
    "text": "I'm never a fan of the always or never rules like if somebody tells me oh you should never do this you should always",
    "start": "328160",
    "end": "333720"
  },
  {
    "text": "do this I always reply with well if it fits your use case then if you have a good argument for it then you should do",
    "start": "333720",
    "end": "339039"
  },
  {
    "text": "it or you shouldn't do it so yeah totally except globals you should never never use this a news going to say that",
    "start": "339039",
    "end": "347120"
  },
  {
    "text": "yeah globals yeah actually that's an interesting we should maybe start there because I think pza you you did a tweet",
    "start": "347120",
    "end": "353960"
  },
  {
    "text": "once and I always I always have this now in every one of the talks that I've done since then and you were essentially yeah",
    "start": "353960",
    "end": "361880"
  },
  {
    "text": "saying uh if you avoid Global State you kind of can cut out a whole class of issues that otherwise you might",
    "start": "361880",
    "end": "369039"
  },
  {
    "text": "encounter it helps with testability it helps with reasoning it does kind of",
    "start": "369039",
    "end": "374400"
  },
  {
    "text": "make things sometimes a little bit more of a Bose but it's probably worth it so does anyone disagree do we all agree",
    "start": "374400",
    "end": "380800"
  },
  {
    "text": "that Global state is a bit of a painful thing yeah I can't think of many times when you need it I mean there's some",
    "start": "380800",
    "end": "387520"
  },
  {
    "text": "some stuff with like you know database where you register drivers but I mean that's another issue we can discuss as",
    "start": "387520",
    "end": "392840"
  },
  {
    "text": "well about whether that's the right way to do it yeah so that's a good point I mean for me anytime you like import a",
    "start": "392840",
    "end": "399520"
  },
  {
    "text": "package and there's side effects to that that's the sort of magic that I I like that in go we don't have that sort of",
    "start": "399520",
    "end": "406280"
  },
  {
    "text": "magic you know I know it's a bit more painful but I don't think there's anything wrong and they do this in the",
    "start": "406280",
    "end": "411440"
  },
  {
    "text": "image packages too to if you want to support jpegs and pngs you just import those packages with an underscore I",
    "start": "411440",
    "end": "417599"
  },
  {
    "text": "wouldn't mind if you had to import the package and then call a method to register something I feel like that",
    "start": "417599",
    "end": "424919"
  },
  {
    "text": "would be more explicit and and better this kind of like boils down to the like",
    "start": "424919",
    "end": "430639"
  },
  {
    "text": "thesis of application design that I've kind of wound up at after a lot of years writing programs in essentially like",
    "start": "430639",
    "end": "437680"
  },
  {
    "text": "corporate environments on small teams which is packages are or should store",
    "start": "437680",
    "end": "442960"
  },
  {
    "text": "declarations like type definitions and functions and only like in your funk main should you store state and if you",
    "start": "442960",
    "end": "449800"
  },
  {
    "text": "keep to that role it it kind of like like you said U Matt a lot of valuable things kind of fall out testing becomes",
    "start": "449800",
    "end": "456840"
  },
  {
    "text": "easier uh it's a lot easier to read a program top to bottom and understand what's going on blah blah blah blah blah",
    "start": "456840",
    "end": "462680"
  },
  {
    "text": "I can go on a great length about this and a lot of people think well if I just quickly throw a a logger in the global",
    "start": "462680",
    "end": "468280"
  },
  {
    "text": "State it's very easy for me to use but I've written a lot of programs where there's no Global State at all and like",
    "start": "468280",
    "end": "474240"
  },
  {
    "text": "the the cost of typing the keys just never enters into the the cost equation for me especially if the program is",
    "start": "474240",
    "end": "479879"
  },
  {
    "text": "going to be running uh in production or something for a year or two or six it's",
    "start": "479879",
    "end": "485039"
  },
  {
    "text": "just like the cost of typing just never enters into the cost equation for me but again this is my context right and a lot",
    "start": "485039",
    "end": "490840"
  },
  {
    "text": "of other people who are writing shorter Liv programs or whatever have different context yeah I used to always start you",
    "start": "490840",
    "end": "497280"
  },
  {
    "text": "know applications where I had like a main struct that I kind of almost held things in or you know i' even inject",
    "start": "497280",
    "end": "502440"
  },
  {
    "text": "like standard and standard out just to be able to test those and do loggers and like I've kind of backed off that like I'll use I'll get to that when I need it",
    "start": "502440",
    "end": "508800"
  },
  {
    "text": "like when it's grown big enough but I try not to start you know going crazy at first that's interesting so talk a bit",
    "start": "508800",
    "end": "514919"
  },
  {
    "text": "more about that idea of injecting standard in standard out how would you literally do that yeah so I mean one",
    "start": "514919",
    "end": "521080"
  },
  {
    "text": "option what you can do is you can so if you wrap you know you can make a main struck this is one option where your main struck basically has your standard",
    "start": "521080",
    "end": "527440"
  },
  {
    "text": "in your standard out kind of contains that State uh so that if you wanted to run tests against your main package um",
    "start": "527440",
    "end": "532959"
  },
  {
    "text": "you can actually instantiate that and then assign the actual you know buffers into that readers into that and then be",
    "start": "532959",
    "end": "538920"
  },
  {
    "text": "able to check for for log messages you know all kinds of little little tidbits like that so you're taking an IO reader",
    "start": "538920",
    "end": "544920"
  },
  {
    "text": "for standard in and an IO writer for standard out and standard error and then you can use any types that Implement",
    "start": "544920",
    "end": "551079"
  },
  {
    "text": "those interfaces yeah yeah that's pretty handy yeah um you see I do this thing",
    "start": "551079",
    "end": "556399"
  },
  {
    "text": "where I still do this regardless of the size of the project I like returning an",
    "start": "556399",
    "end": "561720"
  },
  {
    "text": "error so I immediately in my main call out to a run function that can return an error and then all my code in that run",
    "start": "561720",
    "end": "570240"
  },
  {
    "text": "function just returns errors in a normal way in the main sometimes I like to write the error to standard out and",
    "start": "570240",
    "end": "575800"
  },
  {
    "text": "maybe I'm going to exit with a non zero exit code and I only have to do that once then and sometimes I'll take",
    "start": "575800",
    "end": "582920"
  },
  {
    "text": "arguments into that run function like Arguments for example if it's a command line and and I'm going to be pausing",
    "start": "582920",
    "end": "588880"
  },
  {
    "text": "flags and things passing them in and that allows you in tests just to call that run function like a normal function",
    "start": "588880",
    "end": "594880"
  },
  {
    "text": "it's nothing special about it yeah I do the the exact same thing I think it's just I saw a tweet from you and I have",
    "start": "594880",
    "end": "600800"
  },
  {
    "text": "my codee looks almost exactly the same when I set up a a main.go so I'm wondering about a slightly different use",
    "start": "600800",
    "end": "606040"
  },
  {
    "text": "case so because obviously the the Run returning an error it works for a simple application that can just return an",
    "start": "606040",
    "end": "611920"
  },
  {
    "text": "error but let's say you're writing something that processes uh requests and",
    "start": "611920",
    "end": "617880"
  },
  {
    "text": "then you take in a request to return the response then it kind of becomes a little bit more complicated because just",
    "start": "617880",
    "end": "623560"
  },
  {
    "text": "returning an error doesn't really solve your problem or use case um so what I've seen done is basically just similar",
    "start": "623560",
    "end": "629399"
  },
  {
    "text": "principle but instead of having like a clean one error returned at the end uh you just return the error response so",
    "start": "629399",
    "end": "635440"
  },
  {
    "text": "you kind of rupt the error in the expected HTP response same principle but you can adapt it to your the particular",
    "start": "635440",
    "end": "642079"
  },
  {
    "text": "thing that you're working on yeah so it's like a tiny abstraction not going too far but yeah and it probably would",
    "start": "642079",
    "end": "648959"
  },
  {
    "text": "be different uh and is actually in cases where I'm not going to read anything from standard in I wouldn't have that as",
    "start": "648959",
    "end": "656279"
  },
  {
    "text": "an argument and that's a storytelling opportunity too it's clear then what this program needs what it's going to",
    "start": "656279",
    "end": "662480"
  },
  {
    "text": "use yeah I do wonder if we could just sort of maybe get rid of global state if",
    "start": "662480",
    "end": "667560"
  },
  {
    "text": "we did another if we ever did a major release of go where we could make big breaking changes what about just getting",
    "start": "667560",
    "end": "674839"
  },
  {
    "text": "rid of global State just don't allow it what do you think about that yeah I'd be okay with that I have no problem with",
    "start": "674839",
    "end": "681079"
  },
  {
    "text": "that there's a use case for like Global const right and the current semantics of the language require to use uh VAR for",
    "start": "681079",
    "end": "688399"
  },
  {
    "text": "um like Maps right you can't say const map but if we could somehow magically fix that stuff I'm all on board and of",
    "start": "688399",
    "end": "694680"
  },
  {
    "text": "course this also means eliminating the init function which is the source of great suffering yeah we've kind of jumped",
    "start": "694680",
    "end": "701360"
  },
  {
    "text": "straight into sort of common mistakes maybe we should keep going with uh with this little thread because it's quite",
    "start": "701360",
    "end": "707279"
  },
  {
    "text": "interesting and I think again it's worth saying that if you do part of my",
    "start": "707279",
    "end": "713360"
  },
  {
    "text": "Approach with the team is always it's okay to make mistakes we'll start simple",
    "start": "713360",
    "end": "718680"
  },
  {
    "text": "and if if we do make a mistake we just have to be ready at that time to you know once you feel that pain then it's",
    "start": "718680",
    "end": "725120"
  },
  {
    "text": "worth fixing and that also that approach also helps you avoid going too far in",
    "start": "725120",
    "end": "731480"
  },
  {
    "text": "the beginning as well like you're not spending all this time building out this big complicated architecture thing that",
    "start": "731480",
    "end": "738480"
  },
  {
    "text": "you're never actually really going to need one of the first talks um I think about girl was by Andrew Durand early on",
    "start": "738480",
    "end": "745320"
  },
  {
    "text": "it was called uh code that grows with Grace and um he kind of laid out the",
    "start": "745320",
    "end": "751000"
  },
  {
    "text": "like evolution of a program um from something extremely simple to something that was moderately complex and the",
    "start": "751000",
    "end": "756360"
  },
  {
    "text": "point was at every step of the way don't write more program than you need at that step and um yeah I think there's Great",
    "start": "756360",
    "end": "762320"
  },
  {
    "text": "Value in that yeah it's not a failing like people try I think what happens is",
    "start": "762320",
    "end": "768160"
  },
  {
    "text": "we look at successful projects and we can because it's a lot of a lot of go is in the open source world you go and have",
    "start": "768160",
    "end": "774000"
  },
  {
    "text": "a look and you see all this structure and stuff but hopefully that's there for a reason and it's been it's sort of",
    "start": "774000",
    "end": "781079"
  },
  {
    "text": "organically grown into that rather than it being designed that way from the very beginning so and you're probably not in",
    "start": "781079",
    "end": "788519"
  },
  {
    "text": "that situation yet so you don't have to do those things so I think that's the same kind of principle yeah I think it",
    "start": "788519",
    "end": "793760"
  },
  {
    "text": "really applies yeah I've been doing these these office hours recently with uh just go folks just talking to them uh",
    "start": "793760",
    "end": "799680"
  },
  {
    "text": "it's been interesting to see some of that that approach where it's like they'll see the world as it's going to be in you know a year or two and they",
    "start": "799680",
    "end": "805639"
  },
  {
    "text": "want to plan for that and they've broken out into 20 microser and all that stuff and it's just I mean",
    "start": "805639",
    "end": "811920"
  },
  {
    "text": "I find it hard to break out microservices as it is but like without having the context of what things really interact in your application really",
    "start": "811920",
    "end": "818279"
  },
  {
    "text": "understanding as a whole like I feel like you need to grow into that for sure yeah I think it also applies to what the",
    "start": "818279",
    "end": "823959"
  },
  {
    "text": "programs or what the projects are doing as well like start on that core the",
    "start": "823959",
    "end": "829240"
  },
  {
    "text": "thing that's the most valuable and don't try and solve every problem Under the Sun but again let that stuff evolve and",
    "start": "829240",
    "end": "837600"
  },
  {
    "text": "organically grow as well well there will be times when you have to go and correct things like you've made bad assumptions",
    "start": "837600",
    "end": "843880"
  },
  {
    "text": "or whatever but that's just totally normal that's the thing I think when that happens to people especially if",
    "start": "843880",
    "end": "849480"
  },
  {
    "text": "they're new to uh building projects like that they feel like they've failed",
    "start": "849480",
    "end": "855120"
  },
  {
    "text": "somewhere and they haven't and I think that's that quite an important uh lesson",
    "start": "855120",
    "end": "860279"
  },
  {
    "text": "There's A really lovely blog Post article or something by a programmer in London by the name of te I don't know",
    "start": "860279",
    "end": "866519"
  },
  {
    "text": "his real name off hand and uh it's write code that's easy to delete not easy to modify or something like this",
    "start": "866519",
    "end": "873880"
  },
  {
    "text": "and he goes into quite some detail about this and I'm I'm totally on board with this idea like the program as it exists",
    "start": "873880",
    "end": "880040"
  },
  {
    "text": "in any given moment is like the best approximation of what should exist for the understanding of the domain model",
    "start": "880040",
    "end": "886160"
  },
  {
    "text": "and when you have new requirements that arrive you should be very eager and it should be very easy to delete and",
    "start": "886160",
    "end": "891800"
  },
  {
    "text": "refactor all the attractions that you've done so far and rebuild them um with",
    "start": "891800",
    "end": "897199"
  },
  {
    "text": "your new knowledge you shouldn't feel like trapped in the structure that you created Without Really knowing what you were doing so I highly recommend that",
    "start": "897199",
    "end": "903839"
  },
  {
    "text": "article not for go but just in general yes which I think is probably",
    "start": "903839",
    "end": "909560"
  },
  {
    "text": "one of the most valuable things you get from microservices is that that in theory they're micro they're small and",
    "start": "909560",
    "end": "917279"
  },
  {
    "text": "if it's not doing what you need it to do you can delete it and rebuild it rewrite it if I'm writing a package that's going",
    "start": "917279",
    "end": "924160"
  },
  {
    "text": "to be an open source package genuinely I will write it once and then I kind of",
    "start": "924160",
    "end": "930600"
  },
  {
    "text": "know what it's going to what it needs to look like I know what it is and I'll actually write it again the second time",
    "start": "930600",
    "end": "936720"
  },
  {
    "text": "usually trying to cut the fat trim the fat down trying to make sure it's just",
    "start": "936720",
    "end": "942519"
  },
  {
    "text": "the essence of the package and shrink it as much as possible and things like that if you try and do that from the very",
    "start": "942519",
    "end": "949079"
  },
  {
    "text": "beginning sometimes you can and sometimes you see little shortcuts to make but it can get in the way of that sort of process where you're exploring",
    "start": "949079",
    "end": "955959"
  },
  {
    "text": "so you should definitely be free to just explore explore and get that problem solved and then afterwards you can go",
    "start": "955959",
    "end": "962600"
  },
  {
    "text": "and I rewrite it literally I mean there's a quote from Hemingway I think which he said the art of writing is",
    "start": "962600",
    "end": "968920"
  },
  {
    "text": "rewriting and I think that applies to software as well you can't always do it uh because you know in the real world",
    "start": "968920",
    "end": "975959"
  },
  {
    "text": "with teams we don't always have the luxury of time but it's so worth it that it's actually I always encourage teams",
    "start": "975959",
    "end": "982680"
  },
  {
    "text": "to build deliberately build in time for it um just because the results are so much better yeah I completely agree that",
    "start": "982680",
    "end": "989759"
  },
  {
    "text": "coding for the future is the number one problem that especially I think Junior developers have like they try to anticipate everything and and then I",
    "start": "989759",
    "end": "996720"
  },
  {
    "text": "really try and encourage them to just think about the problem at hand and worry about other things later and I think that what you said is right is",
    "start": "996720",
    "end": "1003279"
  },
  {
    "text": "that you shouldn't really expect to get it right from the start because especially the bigger the problem the",
    "start": "1003279",
    "end": "1008880"
  },
  {
    "text": "bigger the application You're Building like it's very hard to just get it right from the start and predict absolutely everything and how it's going to look",
    "start": "1008880",
    "end": "1014839"
  },
  {
    "text": "like in a year a lot of the things come out in the wash but I think just just applying some good principles from the",
    "start": "1014839",
    "end": "1020639"
  },
  {
    "text": "start will let you then change that code much better and I think it's very very important to just try and draw from your",
    "start": "1020639",
    "end": "1028079"
  },
  {
    "text": "from your own experience like if you've already encountered that problem before you probably have some experiences with",
    "start": "1028079",
    "end": "1033600"
  },
  {
    "text": "that and like you've hid those pain points before so it's I think it's fair to then say Oh I'm going to do this",
    "start": "1033600",
    "end": "1038918"
  },
  {
    "text": "right away because I know that this will let me solve that problem later on or avoid these kind of problems and that's",
    "start": "1038919",
    "end": "1045240"
  },
  {
    "text": "fine and then if you sort of recognize the problem that you've had before it's it's easier to do that but if you",
    "start": "1045240",
    "end": "1051320"
  },
  {
    "text": "haven't actually done anything like that before then yeah the the easiest way to start is just keep writing and then at",
    "start": "1051320",
    "end": "1056720"
  },
  {
    "text": "some point you stop you take a step back and then you think okay maybe like now we have enough to now to now think about",
    "start": "1056720",
    "end": "1062400"
  },
  {
    "text": "the design a bit more and and structure it a little bit better yeah cat you had a great talk basically going through an",
    "start": "1062400",
    "end": "1069120"
  },
  {
    "text": "evolution of was it like not design patterns but like architectural patterns I guess pretty much yeah yeah um do what",
    "start": "1069120",
    "end": "1075840"
  },
  {
    "text": "was it called again uh it was um um how do you structure your go UPS basically",
    "start": "1075840",
    "end": "1081080"
  },
  {
    "text": "different like there were four different layouts so I think layouts is the right term uh so it was a flat structure uh it",
    "start": "1081080",
    "end": "1086640"
  },
  {
    "text": "was grouping by functionality grouping by context and then the hex architecture like sort of talking about DDD and hex",
    "start": "1086640",
    "end": "1093760"
  },
  {
    "text": "architecture as like the final like my personal favorite in Holly Grail but that's not to say that the flat",
    "start": "1093760",
    "end": "1099120"
  },
  {
    "text": "structure isn't valid or good it's equally valid and it's equally good just depends on the problem right right right",
    "start": "1099120",
    "end": "1106159"
  },
  {
    "text": "uh in in gokid which is like a project I maintain a lot of people jump into it when they're like just getting started",
    "start": "1106159",
    "end": "1112159"
  },
  {
    "text": "with their like domain idea and like it's not for that right it is the final stage when you totally understand things",
    "start": "1112159",
    "end": "1119280"
  },
  {
    "text": "and so it's totally fine to I think to yeah start very small and don't have a complicated structure before you know",
    "start": "1119280",
    "end": "1125679"
  },
  {
    "text": "what you're doing yeah I I I had this experience recently where I knew there was going to be some structure I knew",
    "start": "1125679",
    "end": "1132200"
  },
  {
    "text": "that there was going to be some complexity but I couldn't quite imagine it so what we did is we just had",
    "start": "1132200",
    "end": "1138799"
  },
  {
    "text": "everything just in one folder that was it and once we'd got down the line",
    "start": "1138799",
    "end": "1145360"
  },
  {
    "text": "enough that we had the thing working some Concepts which were quite surprising they they sort of presented",
    "start": "1145360",
    "end": "1152520"
  },
  {
    "text": "themselves and it was then quite easy to see how it should be structured I wasn't",
    "start": "1152520",
    "end": "1157799"
  },
  {
    "text": "able to do that before so yeah and if it listeners take away anything it's that",
    "start": "1157799",
    "end": "1163200"
  },
  {
    "text": "it's that we shouldn't be imagining stuff too much we might get it right",
    "start": "1163200",
    "end": "1168760"
  },
  {
    "text": "but we might not uh one of my favorite ways to refactor like I'll start with a flat structure and I'll just put way too",
    "start": "1168760",
    "end": "1174120"
  },
  {
    "text": "much code in there and then eventually at one point just open go docs and a lot of times you can just look at the names",
    "start": "1174120",
    "end": "1179280"
  },
  {
    "text": "and it's like oh I have a you know MySQL something or other MySQL something and it's like oh all these things are prefix",
    "start": "1179280",
    "end": "1184520"
  },
  {
    "text": "with the same name they probably are kind of related maybe that can be a structure and just try to to figure out where that kind of falls out I think",
    "start": "1184520",
    "end": "1190919"
  },
  {
    "text": "we're kind of talking about in a sense like abstractions like where do we Define the abstraction boundaries in our",
    "start": "1190919",
    "end": "1196960"
  },
  {
    "text": "program and like one thing that took me a long time to learn but I think is really true is that abstractions have to emerge from the program you can't like",
    "start": "1196960",
    "end": "1203840"
  },
  {
    "text": "apply them from day one you have to like uh they have to be revealed from what you build so like premature abstraction",
    "start": "1203840",
    "end": "1210520"
  },
  {
    "text": "is the root of all evil yeah I think it's also really important to like really take your time to make sure that",
    "start": "1210520",
    "end": "1217039"
  },
  {
    "text": "you understand that the the problem and the domain that you're dealing with and like I've had it so so often in the in",
    "start": "1217039",
    "end": "1222240"
  },
  {
    "text": "the last few months where I'd be given a task to do or like I need to get something done and then I would immediately jump into the things that I",
    "start": "1222240",
    "end": "1228720"
  },
  {
    "text": "think I know and like I would do it this way and then you just take a step back and you ask the question of like but does it actually address the original",
    "start": "1228720",
    "end": "1235080"
  },
  {
    "text": "problem that we're trying to solve and then surprisingly most of the time you're like oh yeah maybe we don't",
    "start": "1235080",
    "end": "1240600"
  },
  {
    "text": "actually need to do this or we can just do that so I think it's it's it's also important to not get too tied to like your usual ways of doing things or like",
    "start": "1240600",
    "end": "1247760"
  },
  {
    "text": "because you always do things that way then because sometimes you might surprise yourself when if you take a step back and actually like zoom out of",
    "start": "1247760",
    "end": "1254480"
  },
  {
    "text": "the code a little bit and then you kind of see new patterns emerge or you know maybe a new grouping that would make",
    "start": "1254480",
    "end": "1260240"
  },
  {
    "text": "your life easier in some way and also like just thinking about you know does this actually address the problem that",
    "start": "1260240",
    "end": "1265280"
  },
  {
    "text": "we're trying to solve with this particular [Music]",
    "start": "1265280",
    "end": "1278960"
  },
  {
    "text": "application this episode is brought to you by team City team city is a continuous integration and delivery",
    "start": "1278960",
    "end": "1285400"
  },
  {
    "text": "server developed by jet brains that helps software teams release their software faster get fast feedback on",
    "start": "1285400",
    "end": "1290720"
  },
  {
    "text": "every commit quickly investigate build failures and so much more in this segment I asked build engineer ol gavage",
    "start": "1290720",
    "end": "1296679"
  },
  {
    "text": "from wargaming who's been using team City for seven years about what he loves about team City so I love how it's easy",
    "start": "1296679",
    "end": "1303279"
  },
  {
    "text": "it is to manage team City on a daily basis um I don't have to hack any mysterious XML to configurate or make",
    "start": "1303279",
    "end": "1309960"
  },
  {
    "text": "changes uh though there is an ability to do that uh I choose not to uh I do most",
    "start": "1309960",
    "end": "1315640"
  },
  {
    "text": "of my work through the UI I also like the fact that I can customize a lot of Its Behavior either through the UI or",
    "start": "1315640",
    "end": "1322559"
  },
  {
    "text": "through custom programs that I wrote or through uh plugins uh with their open",
    "start": "1322559",
    "end": "1327760"
  },
  {
    "text": "API I don't think I could do my job without the support that team City development team provides uh and I use",
    "start": "1327760",
    "end": "1334679"
  },
  {
    "text": "that support at least weekly whether it's for new features that I'm interested in or for bugs that we find",
    "start": "1334679",
    "end": "1340320"
  },
  {
    "text": "uh they're very collaborative and you know honestly over the past 10 years uh they've made my job so much easier you",
    "start": "1340320",
    "end": "1346520"
  },
  {
    "text": "know I really owe them all right to get started with Team City head to team city.com slgo time to learn more the",
    "start": "1346520",
    "end": "1352080"
  },
  {
    "text": "professional version of Team city is free even for commercial use for large orgs you want to check out the team City",
    "start": "1352080",
    "end": "1357720"
  },
  {
    "text": "Enterprise Edition and right now there's a 50% discount for our listeners on team",
    "start": "1357720",
    "end": "1363360"
  },
  {
    "text": "City Enterprise and as a bonus if you want a personal intro to our friends at Team City they'll help you through your",
    "start": "1363360",
    "end": "1369919"
  },
  {
    "text": "cicd path email me Addam change.com head to team.com go tundle Le more and give",
    "start": "1369919",
    "end": "1376000"
  },
  {
    "text": "it a try",
    "start": "1376000",
    "end": "1379960"
  },
  {
    "text": "[Music]",
    "start": "1382180",
    "end": "1393309"
  },
  {
    "text": "if you already have lots of say whether they're microservices or whatever they are you already have things that you're",
    "start": "1394640",
    "end": "1401240"
  },
  {
    "text": "working on and you're adding more of those do you think it's best to just follow the patterns that are already",
    "start": "1401240",
    "end": "1407960"
  },
  {
    "text": "established just sort of for the sake of consistency or do you think it's worth",
    "start": "1407960",
    "end": "1413360"
  },
  {
    "text": "using new learning and New Concepts to improve things gradually what how do you",
    "start": "1413360",
    "end": "1418919"
  },
  {
    "text": "feel about that uh I mean I would say I mean personally I feel like if you have a lot of microservices you're not really",
    "start": "1418919",
    "end": "1424760"
  },
  {
    "text": "quite sure about your structure or a lot of packages for that matter I feel like unless you kind of get the package",
    "start": "1424760",
    "end": "1430120"
  },
  {
    "text": "structure Right Packages kind of beguet packages like you have because of the cir like you can't do circular",
    "start": "1430120",
    "end": "1435240"
  },
  {
    "text": "dependencies so a lot of times you end up having these kind of third package to interface these two packages because",
    "start": "1435240",
    "end": "1440880"
  },
  {
    "text": "they can't reference each other and you just like get this massive onslaught of packages so honestly uh sometimes I",
    "start": "1440880",
    "end": "1447919"
  },
  {
    "text": "recommend people just actually consolidate when they get you know to where it explodes too far and then kind of come back and revisit yeah that's a",
    "start": "1447919",
    "end": "1455279"
  },
  {
    "text": "great point I don't like it when you have a package that's there really just to make the compiler happy cuz we're not",
    "start": "1455279",
    "end": "1461320"
  },
  {
    "text": "really writing the code for the compiler are we we're writing code for our fellow humans I think my number one advice to",
    "start": "1461320",
    "end": "1468960"
  },
  {
    "text": "somebody who has microservices is to keep them I think the official term is homogeneous uh which means exactly the",
    "start": "1468960",
    "end": "1475200"
  },
  {
    "text": "same they're just a carbon copy and I think a step for forward from that is just use code generation to just spin up",
    "start": "1475200",
    "end": "1480760"
  },
  {
    "text": "a brand new service that has exactly the same structure for a bunch of reasons so one of them is uh familiarity so if you",
    "start": "1480760",
    "end": "1488120"
  },
  {
    "text": "have 10 microservices maybe you can memorize you know how each one is structured if you have a thousand microservices it makes your life a lot",
    "start": "1488120",
    "end": "1494880"
  },
  {
    "text": "easier if you can just open any service and you can work navigate around uh without getting too lost because you",
    "start": "1494880",
    "end": "1500559"
  },
  {
    "text": "already know where to expect everything the other reason being um over time you'll probably find the pattern that",
    "start": "1500559",
    "end": "1506600"
  },
  {
    "text": "works for yourself and and your use case so even though it might not be like a textbook correct pattern or whatever it",
    "start": "1506600",
    "end": "1512399"
  },
  {
    "text": "works for your company for your team you find your own best practices over time and then the third one is because those",
    "start": "1512399",
    "end": "1518720"
  },
  {
    "text": "Serv like you just reduce snowflakes like those services are if you're going to keep them to a single responsibility",
    "start": "1518720",
    "end": "1524559"
  },
  {
    "text": "and they can be structured in the same way maintenance is a easier like understandability is a lot easier",
    "start": "1524559",
    "end": "1529720"
  },
  {
    "text": "there's no sow snowflakes you can deploy them in the same way so that would be my number one advice is to try and keep",
    "start": "1529720",
    "end": "1534960"
  },
  {
    "text": "them as as simple as similar as possible oh I'm excited because my advice is",
    "start": "1534960",
    "end": "1540440"
  },
  {
    "text": "precisely the opposite we have conflict and all good stories involve",
    "start": "1540440",
    "end": "1545919"
  },
  {
    "text": "conflict so now this is another question of context right and I'm sure cat you've worked in environments where that advice",
    "start": "1545919",
    "end": "1552720"
  },
  {
    "text": "makes perfect sense and I'm sure I would agree with you in those environments but in my experience uh mic services are a",
    "start": "1552720",
    "end": "1559039"
  },
  {
    "text": "solution to not a technical problem but an organizational problem they help you deal with Conway's law essentially and",
    "start": "1559039",
    "end": "1566240"
  },
  {
    "text": "the whole point is that you define these like very uh strict schemas boundaries between them like how they communicate",
    "start": "1566240",
    "end": "1572000"
  },
  {
    "text": "with each other which allow you to implement them however you want and so",
    "start": "1572000",
    "end": "1577240"
  },
  {
    "text": "like one developer in a given organization shouldn't be working on more than one micros service a team should own a microservice right if you",
    "start": "1577240",
    "end": "1583760"
  },
  {
    "text": "find that like one developer is contributing to multiple microservices then there's like in my experience like",
    "start": "1583760",
    "end": "1590880"
  },
  {
    "text": "something's gone wrong so like in this world of microservices the implementation should be like completely",
    "start": "1590880",
    "end": "1597840"
  },
  {
    "text": "up to the team so Scola go hcal whatever yeah I mean I would largely agree with",
    "start": "1597840",
    "end": "1604200"
  },
  {
    "text": "Peter I would say there are some exceptions that are actually technical so if you have uh systems where certain",
    "start": "1604200",
    "end": "1609840"
  },
  {
    "text": "Services need to scale differently uh than others uh you know that could be a certain example where you you might need to split off an application so you can",
    "start": "1609840",
    "end": "1616120"
  },
  {
    "text": "have one have eight nodes and one have two nodes but maybe your team's not large enough to you know split across",
    "start": "1616120",
    "end": "1621520"
  },
  {
    "text": "two another example is if you have a release schedule where you might have an API that's public you might need to have",
    "start": "1621520",
    "end": "1626600"
  },
  {
    "text": "some kind of versioning that is more restricted on certain services not others that kind of thing but overall I",
    "start": "1626600",
    "end": "1631919"
  },
  {
    "text": "agree it's it's largely an organizational uh benefit yeah I think",
    "start": "1631919",
    "end": "1637039"
  },
  {
    "text": "so again to introduce the context first like if we're talking different languages then yeah of course like don't sh try and shoehorn one language into",
    "start": "1637039",
    "end": "1643480"
  },
  {
    "text": "following another language's structure and best practices because every single language is going to it should be written slightly differently right like",
    "start": "1643480",
    "end": "1649799"
  },
  {
    "text": "the way it's intended to be written in so I was thinking of a case where your codebase uses one language it's sort of",
    "start": "1649799",
    "end": "1657320"
  },
  {
    "text": "the same application like the same system that just consists of a bunch of microservices and then with regards to",
    "start": "1657320",
    "end": "1663919"
  },
  {
    "text": "team owning microservices like the way my company is structured is that teams own microservices and say a team owns",
    "start": "1663919",
    "end": "1670919"
  },
  {
    "text": "like five or 10 different microservices but then you've got you know 10 five people in a team and they can each touch",
    "start": "1670919",
    "end": "1677679"
  },
  {
    "text": "that service every day so to keep one person tied to a microservice is obviously like not future proof and not",
    "start": "1677679",
    "end": "1683120"
  },
  {
    "text": "scalable and then because we've got new developers joining the team we've got people moving between teams every every",
    "start": "1683120",
    "end": "1688360"
  },
  {
    "text": "now and then you just reduce that bar barrier to entry if if they can come in on and on day one just recognize the",
    "start": "1688360",
    "end": "1694159"
  },
  {
    "text": "same structure and the same patterns um Uber gave a talk recently that um went into some detail about uh the patterns",
    "start": "1694159",
    "end": "1700200"
  },
  {
    "text": "they use I think it was at good foron San Diego was that correct yeah yeah they talked about uh their dependency",
    "start": "1700200",
    "end": "1706399"
  },
  {
    "text": "injection framew rate and so on yeah and so that makes a lot of sense in that environment I think yeah I was talking more about a team of a few hundred",
    "start": "1706399",
    "end": "1713080"
  },
  {
    "text": "engineers and like over a thousand microservices so at that scale I think if we had just a bunch of monolist then",
    "start": "1713080",
    "end": "1719360"
  },
  {
    "text": "that would not be scalable so yeah I agree that it's it's mostly to address just how to organize your company in the",
    "start": "1719360",
    "end": "1724799"
  },
  {
    "text": "most efficient way if you're just a single developer working on your application I think microservices might be a bit of an Overkill unless you",
    "start": "1724799",
    "end": "1731559"
  },
  {
    "text": "really really want to explore that pattern I I am curious though cat so you guys have multiple microservices per",
    "start": "1731559",
    "end": "1737559"
  },
  {
    "text": "team I've seen that too um I'm curious what what you guys what's the benefit of doing multiple Services versus one",
    "start": "1737559",
    "end": "1743640"
  },
  {
    "text": "single one for the team we have micros our microservices are actually single responsibility and like they are very",
    "start": "1743640",
    "end": "1749440"
  },
  {
    "text": "very tiny so it's not a service that does a bunch of things it's a service that does one thing and one thing only",
    "start": "1749440",
    "end": "1755039"
  },
  {
    "text": "and usually it's just the aspects of the team that the team is responsible for so uh like I work at a bank so let's take",
    "start": "1755039",
    "end": "1761399"
  },
  {
    "text": "lending as an example like there could be a service that makes the decision whether to lend somebody money or not",
    "start": "1761399",
    "end": "1766799"
  },
  {
    "text": "there could be service that does credit checks so it's a single responsibility and then the whole team is kind of",
    "start": "1766799",
    "end": "1771880"
  },
  {
    "text": "working on that aspect of the of the of the application of the product so it's",
    "start": "1771880",
    "end": "1777080"
  },
  {
    "text": "kind of it's very hard to find the onetoone mapping between a specific aspect of a team and that service like usually you need to touch a bunch of",
    "start": "1777080",
    "end": "1783279"
  },
  {
    "text": "them because they're so small uh like one service is responsible for just one little thing and usually you take them",
    "start": "1783279",
    "end": "1788440"
  },
  {
    "text": "as puzzles and you join them to build something bigger yeah and you work at monzo right I do yeah yeah yeah I joined",
    "start": "1788440",
    "end": "1795679"
  },
  {
    "text": "them because I was really really curious to to find uh to basically learn how to do microservices well because previously",
    "start": "1795679",
    "end": "1802320"
  },
  {
    "text": "my experience was very much like oh I don't think that quite works like it's very hard to find what should be microservices where do the boundaries",
    "start": "1802320",
    "end": "1808799"
  },
  {
    "text": "lie and then I wanted to join Monza because I wanted to do to see from the Insight like how to make that happen in",
    "start": "1808799",
    "end": "1815559"
  },
  {
    "text": "in a good way and like you know monzo is a bank so you can build a bank using microservices and that's obviously a",
    "start": "1815559",
    "end": "1821360"
  },
  {
    "text": "huge responsibility so I I kind of saw this from the outside I'm like okay they're doing something that works and now after a few months there I can see",
    "start": "1821360",
    "end": "1828440"
  },
  {
    "text": "that probably the having the homogeneous Services single responsibility services",
    "start": "1828440",
    "end": "1833760"
  },
  {
    "text": "having every service being owned by a team so that there's no unowned services that nobody knows about like that those",
    "start": "1833760",
    "end": "1840000"
  },
  {
    "text": "are some like key building Stones I think to the success so in in the case of monzo then so you mentioned a service",
    "start": "1840000",
    "end": "1846919"
  },
  {
    "text": "that's doing it's making decisions about lending that's going to internally I mean the work is going to be very",
    "start": "1846919",
    "end": "1853080"
  },
  {
    "text": "different to say the service that handles when you freeze your card if you lose your card you can freeze it so",
    "start": "1853080",
    "end": "1858440"
  },
  {
    "text": "what's similar it's going to be the messaging the interfacing what what actually is similar and then is it okay",
    "start": "1858440",
    "end": "1865240"
  },
  {
    "text": "that and probably it has to be that then other things inside that service could",
    "start": "1865240",
    "end": "1870880"
  },
  {
    "text": "end up looking very different yeah so pretty much the the only difference between those Services is the handlers",
    "start": "1870880",
    "end": "1876200"
  },
  {
    "text": "the database schema for the particular service so if each service has some schema that that will be different and",
    "start": "1876200",
    "end": "1883159"
  },
  {
    "text": "then the handlers or like the the actual business logic will be different that's that's obvious everything else is the",
    "start": "1883159",
    "end": "1888440"
  },
  {
    "text": "same and like by everything I mean literally everything rooting authentication authorization logging",
    "start": "1888440",
    "end": "1894440"
  },
  {
    "text": "metrics all of that stuff like we use uh we use libraries quite a lot so we've basically extracted all the common",
    "start": "1894440",
    "end": "1900240"
  },
  {
    "text": "functionality into libraries that you pull into each service and that way every single service is the same it does",
    "start": "1900240",
    "end": "1906320"
  },
  {
    "text": "the same it works in the same way like if you deploy a new service it instantly pops up in it pops up a grafana",
    "start": "1906320",
    "end": "1912480"
  },
  {
    "text": "dashboard for you because it's spun up in the same way so there's very little friction to actually add a new service",
    "start": "1912480",
    "end": "1917880"
  },
  {
    "text": "and again it use code generation quite heavily for that so if you just want to start a new service it's just one command and boom you have it and all you",
    "start": "1917880",
    "end": "1924240"
  },
  {
    "text": "have to do is just fill in the business logic everything else is taken care of because there's no point Reinventing the",
    "start": "1924240",
    "end": "1929279"
  },
  {
    "text": "logic the same you know a thousand times yeah it's not the it's not the interesting thing about that service is",
    "start": "1929279",
    "end": "1934559"
  },
  {
    "text": "it yeah it's just something that you have to have yeah and the great thing is that as we add more people they don't",
    "start": "1934559",
    "end": "1939600"
  },
  {
    "text": "need to know the details about you know how does routing work or whatever they can just assume that they are black boxes that work and then if they want to",
    "start": "1939600",
    "end": "1945799"
  },
  {
    "text": "do something on it one day then they can explore more and dive in more but it just reduces that like barrier of entry",
    "start": "1945799",
    "end": "1951480"
  },
  {
    "text": "for for new Engineers so here's a question and maybe we're getting a bit far field here but um let's say the",
    "start": "1951480",
    "end": "1957159"
  },
  {
    "text": "common like logging library has a bug fix or a new feature or something how do you roll that out across the fleet uh",
    "start": "1957159",
    "end": "1964360"
  },
  {
    "text": "you pretty much must deploy everything um like our deployments are super easy it's just again one command on the",
    "start": "1964360",
    "end": "1969760"
  },
  {
    "text": "command line so we can deploy instantly and we've had cases where we needed to",
    "start": "1969760",
    "end": "1974960"
  },
  {
    "text": "um roll something like mostly infrastructure config for example we we would slowly roll it out across the",
    "start": "1974960",
    "end": "1980679"
  },
  {
    "text": "whole Fleet of services and then you just ask the owning teams to deploy it so like you prep the fixes you'll merge",
    "start": "1980679",
    "end": "1986480"
  },
  {
    "text": "it and then you ask the teams to own services to just do the upgrade or do the bug pH or whatever and deploy their",
    "start": "1986480",
    "end": "1992039"
  },
  {
    "text": "services and then we just have a spreadsheet of you know what's been done what's still waiting to do and you chase the teams until they do it and like",
    "start": "1992039",
    "end": "1998880"
  },
  {
    "text": "luckily all the teams are pretty responsive and reactive so usually we don't take too much time to get it done",
    "start": "1998880",
    "end": "2003960"
  },
  {
    "text": "to rebuild and deploy yeah so cat earlier you mentioned mentioned the hex",
    "start": "2003960",
    "end": "2009000"
  },
  {
    "text": "layout I think you called it that's really for dealing with dependencies right and which dependencies you're",
    "start": "2009000",
    "end": "2014919"
  },
  {
    "text": "allowed to import from where and things could you tell us a bit about that so I think hex architecture at least the way",
    "start": "2014919",
    "end": "2020720"
  },
  {
    "text": "I understand it it's it's more about separating the different things that make up your application so some of the",
    "start": "2020720",
    "end": "2027240"
  },
  {
    "text": "some of the application code will be your pure domain logic it will Define your business logic and your processes",
    "start": "2027240",
    "end": "2032799"
  },
  {
    "text": "some of it will be framework codes some of it will be third party codes some of it will be the glue between the logic",
    "start": "2032799",
    "end": "2038960"
  },
  {
    "text": "and the third parties some of it will be sort of the glue between the framework and your application so I think it it",
    "start": "2038960",
    "end": "2044399"
  },
  {
    "text": "lets you organize your application so that you build boundaries between the domain Logic the application code and",
    "start": "2044399",
    "end": "2050800"
  },
  {
    "text": "the third party and framework code and that in turn allows you to make changes",
    "start": "2050800",
    "end": "2055960"
  },
  {
    "text": "without having to change a lot of things just to make one small change because if you isolate the business Logic the",
    "start": "2055960",
    "end": "2061800"
  },
  {
    "text": "chances are it doesn't change very often so it can stay the same it's well protected by test sort of isolated from",
    "start": "2061800",
    "end": "2067200"
  },
  {
    "text": "trivial changes to like Frameworks or whatever and then in the same way if you wanted to swap the type of database that",
    "start": "2067200",
    "end": "2072679"
  },
  {
    "text": "you use you just sort of swap that swap in interface to it but then you don't touch the logic so it kind of just",
    "start": "2072679",
    "end": "2078040"
  },
  {
    "text": "prevents you from having spaghetti coat where different like interests are mixed together like business logic with like",
    "start": "2078040",
    "end": "2084040"
  },
  {
    "text": "suddenly a call to a database right away and and that sort of thing so that's that's how I understand it I like to",
    "start": "2084040",
    "end": "2089638"
  },
  {
    "text": "describe it as like layers of an onion your business logic is in the core and then everything else is kind of like",
    "start": "2089639",
    "end": "2095358"
  },
  {
    "text": "getting further and further away from the business logic and at the very outside is you know grpc or whatever and",
    "start": "2095359",
    "end": "2100880"
  },
  {
    "text": "just like defining those boundaries and being very explicit when you cross them do you end up turning one struct type",
    "start": "2100880",
    "end": "2107280"
  },
  {
    "text": "into another a lot and copying Fields across and things because that's something in you can actually if two",
    "start": "2107280",
    "end": "2112640"
  },
  {
    "text": "structs are the same exactly the same structure you can just cast it immediately can't you and go um but that",
    "start": "2112640",
    "end": "2119839"
  },
  {
    "text": "really doesn't feel like a it feels a bit fragile are there any other techniques we've used other than just",
    "start": "2119839",
    "end": "2126400"
  },
  {
    "text": "having a method on the struct to turn into another type and then how does that work with the avoiding circular",
    "start": "2126400",
    "end": "2133359"
  },
  {
    "text": "dependencies and stuff so the way we solve the problem and that's just one of the possible ways so instead of having a",
    "start": "2133359",
    "end": "2139240"
  },
  {
    "text": "method on a or a function on a struct to turn it into a different struct because that then means that that struct has to",
    "start": "2139240",
    "end": "2145000"
  },
  {
    "text": "have knowledge of how does the third party representation look like for example if you want to translate like a domain logic a business logic struct to",
    "start": "2145000",
    "end": "2152079"
  },
  {
    "text": "like a database struct and it shouldn't it shouldn't care what the database expects uh and then equally like you",
    "start": "2152079",
    "end": "2157560"
  },
  {
    "text": "could have the that function done on the database track so it takes a domain one and turns it into its its own form but",
    "start": "2157560",
    "end": "2164720"
  },
  {
    "text": "again like it's kind of where how do you how do you decide so the way we solved it is we just have marshalling packages it's just a really dumb marshalling kind",
    "start": "2164720",
    "end": "2172079"
  },
  {
    "text": "of like utils package which just takes a struct of this kind and outputs a struct of a different kind and then we just",
    "start": "2172079",
    "end": "2177520"
  },
  {
    "text": "have them like available across the the service so it just calls it on the way in and on the way out this is a topic of",
    "start": "2177520",
    "end": "2184319"
  },
  {
    "text": "frequent conversation in the like gokit world I think to tie it back to an earlier conversation we were having",
    "start": "2184319",
    "end": "2189440"
  },
  {
    "text": "about like evolving a code base as your requirements grow I think it's just like a question of complexity and like how",
    "start": "2189440",
    "end": "2196240"
  },
  {
    "text": "strict how philosophically strict you want to be in your application because plenty of people will take their grpc",
    "start": "2196240",
    "end": "2202280"
  },
  {
    "text": "types and like use them as database models right and like you can do that",
    "start": "2202280",
    "end": "2208400"
  },
  {
    "text": "you can use the same type through all the layers of the hexagonal architecture you like it violates the layering",
    "start": "2208400",
    "end": "2215040"
  },
  {
    "text": "principle right in theory but and then like there are consequences to that but maybe it's worth it rather than writing",
    "start": "2215040",
    "end": "2221000"
  },
  {
    "text": "you know the marshalling and and unmarshalling code maybe that's like too laborious if you want to be like really strict you're going to have a new data",
    "start": "2221000",
    "end": "2227720"
  },
  {
    "text": "type at each layer of the architecture and you're going to write the code to translate and maybe that code is just a cast maybe that's fine so like it's it's",
    "start": "2227720",
    "end": "2235480"
  },
  {
    "text": "just a question of how rigid and strict you want your application to be if the application is only going to live for a",
    "start": "2235480",
    "end": "2240920"
  },
  {
    "text": "year because you only have 6 months of Runway and you're don't have product Market fit it probably makes no sense to",
    "start": "2240920",
    "end": "2246400"
  },
  {
    "text": "go through all the struggle but if you're a Fortune 500 and this code is going to live uh past your lifetime then",
    "start": "2246400",
    "end": "2252960"
  },
  {
    "text": "yeah maybe take the time because that you know extra 20 minutes of typing is nothing in the grand scheme of things",
    "start": "2252960",
    "end": "2258960"
  },
  {
    "text": "yeah I usually put my structs into wherever I always put it in the package the dependency to convert from the",
    "start": "2258960",
    "end": "2264599"
  },
  {
    "text": "domain personally so I'm usually pretty strict about that uh I do have a question though kind of on this topic",
    "start": "2264599",
    "end": "2270040"
  },
  {
    "text": "when we were talking about controllers and uh separating the model and all that so I've there's a whole this is just",
    "start": "2270040",
    "end": "2276160"
  },
  {
    "text": "kind of my thought recently of I've seen a lot of people where they will try to make like almost dumb models and sorry uh and",
    "start": "2276160",
    "end": "2283800"
  },
  {
    "text": "they'll have these kind of dumb models which just like oh store this thing get this thing and whatnot and they try to put all their business logic back up",
    "start": "2283800",
    "end": "2290480"
  },
  {
    "text": "higher up but I feel like you lose out a lot on like transactions unless you want to model transactions at your domain",
    "start": "2290480",
    "end": "2296319"
  },
  {
    "text": "layer and you have just a lot of these little performance improvements and benefits you can get from the underlying",
    "start": "2296319",
    "end": "2302800"
  },
  {
    "text": "dependency the technology that you're using that you can't get if you move it up to the controller so I don't know about struggle but I mean I tend to move",
    "start": "2302800",
    "end": "2309200"
  },
  {
    "text": "away from actually like big controllers and actually start putting business logic into the implementations which I",
    "start": "2309200",
    "end": "2315119"
  },
  {
    "text": "know it's supposed to be like a no no but like I find from a performance standpoint it's just kind of it almost makes sense a lot of times and",
    "start": "2315119",
    "end": "2321760"
  },
  {
    "text": "transactional integrity that kind of thing I'm curious what other people think about that well it's it brings up",
    "start": "2321760",
    "end": "2326920"
  },
  {
    "text": "a good question when you talk about those sorts of performance enhancements I mean I tend to go for just kind of",
    "start": "2326920",
    "end": "2335200"
  },
  {
    "text": "Simplicity and ease of Main maintainability in things over performance but of course sometimes",
    "start": "2335200",
    "end": "2342119"
  },
  {
    "text": "performance really does matter and it's probably a trade-off then you have to sort of decide whether you're happy with",
    "start": "2342119",
    "end": "2350000"
  },
  {
    "text": "the this slightly more complicated thing but performs brilliantly versus it's",
    "start": "2350000",
    "end": "2356119"
  },
  {
    "text": "very easy to read and maintain but it's a bit slow um I was very pleased to hear that defers got a a turbo boost uh in",
    "start": "2356119",
    "end": "2364079"
  },
  {
    "text": "the recent uh release of go cuz that was that was one example where for for",
    "start": "2364079",
    "end": "2369319"
  },
  {
    "text": "readability defers I actually love defer I might have to we should do an episode just on defer I think it's such a",
    "start": "2369319",
    "end": "2376520"
  },
  {
    "text": "brilliant thing you know the arguments against defer were it didn't perform",
    "start": "2376520",
    "end": "2382079"
  },
  {
    "text": "great originally um and it is it's a kind of runtime thing it's not something the compiler can just do because I was",
    "start": "2382079",
    "end": "2387960"
  },
  {
    "text": "thinking maybe the compiler could just look at the where the defers are and just kind of copy the code essentially",
    "start": "2387960",
    "end": "2394400"
  },
  {
    "text": "to all the exit points but of course you could queue up a lot of defers in a four Loop for example at runtime and so",
    "start": "2394400",
    "end": "2401280"
  },
  {
    "text": "there's no possible way well sometimes it's possible but not not always I always preferred the readability of",
    "start": "2401280",
    "end": "2406680"
  },
  {
    "text": "defer over the performance but what you described makes sense and actually if",
    "start": "2406680",
    "end": "2413400"
  },
  {
    "text": "you're squashing things down and just keeping things simple and not breaking all these things into layers early then",
    "start": "2413400",
    "end": "2420000"
  },
  {
    "text": "you can do that and I think when it comes time to break that out you'll know",
    "start": "2420000",
    "end": "2425160"
  },
  {
    "text": "I think in that point it make a decision about where that stuff will live it probably be quite clear I just want to",
    "start": "2425160",
    "end": "2430200"
  },
  {
    "text": "say I think the defer episode should be the last episode of go time should have been the",
    "start": "2430200",
    "end": "2436480"
  },
  {
    "text": "first that was a good idea though so how do you feel about that performance over readability yeah this is a great seg",
    "start": "2436640",
    "end": "2442960"
  },
  {
    "text": "like I I think what Ben mentions like he he exists on a point on the Spectrum where like performance is important but",
    "start": "2442960",
    "end": "2448800"
  },
  {
    "text": "there are the Spectrum extends in the other direction where like maybe you don't need that performance and so it's",
    "start": "2448800",
    "end": "2454240"
  },
  {
    "text": "another issue of context but I think it's a great seg to maybe like start talking about performance optimization and profiling and that kind of stuff",
    "start": "2454240",
    "end": "2460800"
  },
  {
    "text": "which I think is also maybe a topic worth discussing actually real quick on the uh still on the topic of performance",
    "start": "2460800",
    "end": "2466680"
  },
  {
    "text": "I guess when I think of performance like I I use defers just you know with Reckless abandon like I never think",
    "start": "2466680",
    "end": "2472079"
  },
  {
    "text": "about the performance generally but as far as something like say you have like a SQL database where you could you know",
    "start": "2472079",
    "end": "2477920"
  },
  {
    "text": "Implement some some business logic up in the controller where it would call down and make a bunch of calls over a bunch of transactions within your database or",
    "start": "2477920",
    "end": "2485319"
  },
  {
    "text": "you could write some crazy you know update with the lateral join something that you know executes a thousand times",
    "start": "2485319",
    "end": "2491400"
  },
  {
    "text": "faster like that can have a real impact on you know latency and not noticeable performance and that's kind of the the pieces I'm thinking of and it has a",
    "start": "2491400",
    "end": "2498160"
  },
  {
    "text": "transactional Integrity so for me the the question is always like in the language of your business domain what is",
    "start": "2498160",
    "end": "2503240"
  },
  {
    "text": "the action you're performing is it that entire transaction or is it all the specific things and if it's the entire",
    "start": "2503240",
    "end": "2509079"
  },
  {
    "text": "transaction that makes total sense to do all that work in a single like call right but if you know the way you've",
    "start": "2509079",
    "end": "2515839"
  },
  {
    "text": "chopped up the abstraction boundaries at one layer at the database layer at the storage layer it's all these individual",
    "start": "2515839",
    "end": "2521359"
  },
  {
    "text": "things which your business logic is responsible for stitching together then",
    "start": "2521359",
    "end": "2526720"
  },
  {
    "text": "you know you can do it the other way so it's a it's a design question I think first and then a performance question second yeah I completely agree with that",
    "start": "2526720",
    "end": "2533760"
  },
  {
    "text": "because um there is micro optimizations and there is the proper optimizations and I think a lot of people especially",
    "start": "2533760",
    "end": "2539599"
  },
  {
    "text": "uh sort of new to to optimizing performance or or coding or something they just tend to focus on micro",
    "start": "2539599",
    "end": "2544720"
  },
  {
    "text": "optimizations because they would for example here that the furs are bad because they're slow and they will just go out of their way not to use them and",
    "start": "2544720",
    "end": "2551400"
  },
  {
    "text": "that's really dangerous because you're most of the time you're not really tackling the real problem you're just masking it so I would I would leave",
    "start": "2551400",
    "end": "2557400"
  },
  {
    "text": "those till the end because very often they will just have a such a negligible impact overall that you would just never notice the difference between using the",
    "start": "2557400",
    "end": "2563520"
  },
  {
    "text": "first and not using the first unless you're unless you're doing like live trading or something where like every",
    "start": "2563520",
    "end": "2568960"
  },
  {
    "text": "single millisecond is crucial and I think that Peter touched on a really important point which is how you structure your applications and and",
    "start": "2568960",
    "end": "2575240"
  },
  {
    "text": "exactly that it's the sequential execution of of a business process or can you actually break it down into some",
    "start": "2575240",
    "end": "2581559"
  },
  {
    "text": "a bunch of asynchronous calls that you can make and also does everything have to happen in order to achieve point x or",
    "start": "2581559",
    "end": "2588200"
  },
  {
    "text": "can you maybe defer some stuff later and just get to the point to point x quickly and then do other things so to give a",
    "start": "2588200",
    "end": "2594200"
  },
  {
    "text": "real life uh example of that is um and we actually have one of the monzo guys mat he has a really good talk explaining",
    "start": "2594200",
    "end": "2600240"
  },
  {
    "text": "how we've structured our processes so for example when you pay with a card in your shop all you care about as a",
    "start": "2600240",
    "end": "2605839"
  },
  {
    "text": "customer customer is that the transaction goes through and gets approved by us as fast as possible and the customer doesn't care at that point",
    "start": "2605839",
    "end": "2612319"
  },
  {
    "text": "about you know enriching it with the merchants logo in for the app or getting",
    "start": "2612319",
    "end": "2617359"
  },
  {
    "text": "the actual Merchant name or anything any of the nice to haves but not Mission critical so what we've done is is",
    "start": "2617359",
    "end": "2622720"
  },
  {
    "text": "instead of going okay first approve the transaction then I go on fetch the logo and then maybe update this or that or",
    "start": "2622720",
    "end": "2628440"
  },
  {
    "text": "send the user the feed item we just approve the transaction and return right away because that's the most important thing and then afterwards that kicks off",
    "start": "2628440",
    "end": "2635240"
  },
  {
    "text": "a bunch of events and then those events are consumed by by all the services one of them is going to send the feed item",
    "start": "2635240",
    "end": "2640359"
  },
  {
    "text": "one of them is going to fetch the logo for the merchant and so on and so forth but the actual Miss Mission critical path is just approving the transaction",
    "start": "2640359",
    "end": "2647400"
  },
  {
    "text": "and if everything else fails afterwards we don't really care we can deal with that we can replay it or we can do",
    "start": "2647400",
    "end": "2652559"
  },
  {
    "text": "whatever it's just that offl that is that is the critical point so I think it's it's thinking about systems in this",
    "start": "2652559",
    "end": "2658079"
  },
  {
    "text": "way that is the really really powerful skill so that's a great example as well of something where the user experience",
    "start": "2658079",
    "end": "2665160"
  },
  {
    "text": "directly impacts the design of that system and I think that is something that we should do more of and it's vital",
    "start": "2665160",
    "end": "2672319"
  },
  {
    "text": "that we know the why of what we're building for that exact reason I love in that particular case cat I do love it",
    "start": "2672319",
    "end": "2679480"
  },
  {
    "text": "when I pay with my card and the merchant is that what they're called the person",
    "start": "2679480",
    "end": "2684559"
  },
  {
    "text": "in the shop is still waiting to get approved and my watch has already said",
    "start": "2684559",
    "end": "2689680"
  },
  {
    "text": "yeah it's fine it's going to be fine uh and and they and they sort of often sometimes they have to wait quite a",
    "start": "2689680",
    "end": "2695640"
  },
  {
    "text": "while after and I suppose that's their bits that are being slow um but they",
    "start": "2695640",
    "end": "2700720"
  },
  {
    "text": "don't trust me I just say I just show them my watch and say yeah it's done bye that doesn't work unfortunately not yet",
    "start": "2700720",
    "end": "2707280"
  },
  {
    "text": "yeah I do exactly the same yeah and also sometimes there is like there is a third party restrictions so for example the",
    "start": "2707280",
    "end": "2713319"
  },
  {
    "text": "the need for actually approved transactions really quickly comes directly from MasterCard they give you a few hundred milliseconds to respond and",
    "start": "2713319",
    "end": "2718800"
  },
  {
    "text": "if you don't they will just cut you off so it's in your best",
    "start": "2718800",
    "end": "2723480"
  },
  {
    "text": "interest",
    "start": "2724880",
    "end": "2727880"
  },
  {
    "text": "this episode is brought to you by cucon Cloud native conon and you were invited to attend this Flagship conference from",
    "start": "2732480",
    "end": "2738119"
  },
  {
    "text": "the cloud native Computing Foundation cucon Cloud native conon North America 2019 that is a mouthful and an awesome",
    "start": "2738119",
    "end": "2744839"
  },
  {
    "text": "conference to attend it's happening November 18th to the 21st in San Diego California this conference gathers",
    "start": "2744839",
    "end": "2750520"
  },
  {
    "text": "adopters and technologist from leading up source and Cloud native communities use the code KC na change log 19 once",
    "start": "2750520",
    "end": "2758200"
  },
  {
    "text": "again casy na change log 19 to get 10% off registration or check the CH for a",
    "start": "2758200",
    "end": "2764200"
  },
  {
    "text": "special link to register and also a link to the convin your boss letter again check the sh for links to learn more and",
    "start": "2764200",
    "end": "2769880"
  },
  {
    "text": "register and by lenoe our Cloud Server of choice it's so easy to get started with lenoe server started just five",
    "start": "2769880",
    "end": "2776119"
  },
  {
    "text": "bucks a month for your big Ideas head to lin.com changelog choose your flavor of Linux that works for you then pick a",
    "start": "2776119",
    "end": "2782240"
  },
  {
    "text": "location that's right for you London Tokyo Dallas and many other places in the world they've got you covered go",
    "start": "2782240",
    "end": "2788680"
  },
  {
    "text": "from having that amazing shower idea to a hosted website in just minutes start small expand your idea blossoms into a",
    "start": "2788680",
    "end": "2795280"
  },
  {
    "text": "huge hit and we trust Leno because they keep it fast they keep it simple check them out at lin.com",
    "start": "2795280",
    "end": "2802558"
  },
  {
    "text": "[Music]",
    "start": "2805250",
    "end": "2814000"
  },
  {
    "text": "changelog I can ask a related question like a sort of new question but an interesting one that I've I've actually",
    "start": "2814000",
    "end": "2819319"
  },
  {
    "text": "been thinking about as well which is personally how often do you actually end up writing the really concurrent code",
    "start": "2819319",
    "end": "2826440"
  },
  {
    "text": "using concurrent patterns in your day-to-day job and that leads to like a different question which is should you",
    "start": "2826440",
    "end": "2832480"
  },
  {
    "text": "design your applications with concurrency to start with when should you introduce it like should you over complicate it well over complicated in",
    "start": "2832480",
    "end": "2838800"
  },
  {
    "text": "that sense to start with or do you just start sequentially and then Branch out what's your take on it yeah I mean",
    "start": "2838800",
    "end": "2844800"
  },
  {
    "text": "usually when I design stuff uh I'll make the sequential piece that actually executes I'll usually kind of make that",
    "start": "2844800",
    "end": "2850400"
  },
  {
    "text": "part of the export API of whatever the thing is and then I'll try to make the fancy you know concurrent version of it",
    "start": "2850400",
    "end": "2857680"
  },
  {
    "text": "just call into that and kind of um just it just makes it so much easier to test to be able to uh see the sequential",
    "start": "2857680",
    "end": "2863640"
  },
  {
    "text": "stuff and separate it out from the actual concurrency pieces but usually I'll start with sequential stuff until",
    "start": "2863640",
    "end": "2868800"
  },
  {
    "text": "it's just too slow if I'm writing a package I will try and avoid concurrency altogether and let the users do the",
    "start": "2868800",
    "end": "2875400"
  },
  {
    "text": "concr currency you know how easy it is to just sort of say go do this thing you",
    "start": "2875400",
    "end": "2880559"
  },
  {
    "text": "can't always do it but I that's my goal is if I can just not have any concurrency in this package and let that",
    "start": "2880559",
    "end": "2887400"
  },
  {
    "text": "a bit like where the state lives as Peter mentioned let that be just in one place then I'll do that for sure",
    "start": "2887400",
    "end": "2893839"
  },
  {
    "text": "otherwise I tend to have the all the concurrency bits in one little function",
    "start": "2893839",
    "end": "2900319"
  },
  {
    "text": "and it calls out to other things so that there is still one place I've did it before when I first started with go I",
    "start": "2900319",
    "end": "2906040"
  },
  {
    "text": "was so excited about channels I just used them all over the place and I",
    "start": "2906040",
    "end": "2911440"
  },
  {
    "text": "definitely overused them and actually now I end up using mutexes and go",
    "start": "2911440",
    "end": "2917040"
  },
  {
    "text": "routines essentially most of the time but sometimes channels are a lovely interface and they just fit perfectly",
    "start": "2917040",
    "end": "2924599"
  },
  {
    "text": "don't they and they are very exciting times cuz I do love using channels that actually reminds me of a talk I think at",
    "start": "2924599",
    "end": "2930359"
  },
  {
    "text": "goon 2018 in Denver and there was a talk from somebody from the go team team I can't",
    "start": "2930359",
    "end": "2935960"
  },
  {
    "text": "remember now and he was talking about Advanced concurrency patterns and he actually mentioned this as one of the important things which is if you're",
    "start": "2935960",
    "end": "2941520"
  },
  {
    "text": "writing a package or a module that is to be used by other people don't build the concurrency into it write functions that",
    "start": "2941520",
    "end": "2947599"
  },
  {
    "text": "can be run concurrently by the consuming code and that that was like a great mind mind shift for me as well so it's yeah",
    "start": "2947599",
    "end": "2954079"
  },
  {
    "text": "instead of like putting concurrency in just write a function that can be safely run in a concurrent way and then the consumer will decide whether they want",
    "start": "2954079",
    "end": "2960400"
  },
  {
    "text": "to do it concurrently or not yeah for me it's about the fact that the user then knows exactly what's happening they cuz",
    "start": "2960400",
    "end": "2966799"
  },
  {
    "text": "they did it you know I'm very anti-magic despite having the appearance of a",
    "start": "2966799",
    "end": "2972280"
  },
  {
    "text": "magician which I'm well aware of do you do that deliberately or is it just emergent no it's but it is tough being",
    "start": "2972280",
    "end": "2978920"
  },
  {
    "text": "uh I you know I had to come out to my parents I was like Mom Dad sit down pick a card it's very difficult I to come out",
    "start": "2978920",
    "end": "2985839"
  },
  {
    "text": "as a magician I thought you were going to say Mom Dad sit down I'm going to",
    "start": "2985839",
    "end": "2991680"
  },
  {
    "text": "Hogwarts that's a hate crime no I didn't get in it's a tough School uh who was it",
    "start": "2991920",
    "end": "2997799"
  },
  {
    "text": "that mentioned Hemingway earlier I forget I think it was me who was it I'm going to be a little bit gross here now",
    "start": "2997799",
    "end": "3004480"
  },
  {
    "text": "and say like I think Hemingway is a great like model for writing code because I think the best code is always",
    "start": "3004480",
    "end": "3010799"
  },
  {
    "text": "that which is like so like plain and simply stated that there can be no",
    "start": "3010799",
    "end": "3015839"
  },
  {
    "text": "ambiguity about what's going on and I think that's actually a target for me when I write packages and code is like",
    "start": "3015839",
    "end": "3022720"
  },
  {
    "text": "it's little things like how many levels of indent are there like one perfect can I read it like it's a short story you",
    "start": "3022720",
    "end": "3028400"
  },
  {
    "text": "know like do this or that then this then that and designing concurrency into the api's part of that as well like I should",
    "start": "3028400",
    "end": "3035000"
  },
  {
    "text": "be able to say like my package exported functions are usually verbs like do this",
    "start": "3035000",
    "end": "3041119"
  },
  {
    "text": "my package exported types are usually noun this thing and combining this two should be a very like orthogonal sort of",
    "start": "3041119",
    "end": "3047480"
  },
  {
    "text": "process and if my package doesn't look like that because I haven't like quite mastered my expression of it then I need",
    "start": "3047480",
    "end": "3055160"
  },
  {
    "text": "to rewrite it right and so concurrency is something that I almost always leave out of everything I write the only time",
    "start": "3055160",
    "end": "3060920"
  },
  {
    "text": "I write go the keyword go in most of my programs is in Funk M there are some exceptions like if I need to like I",
    "start": "3060920",
    "end": "3067920"
  },
  {
    "text": "wrote something recently that did a lot of scraping of third party apis and there's no reason to like do that",
    "start": "3067920",
    "end": "3074240"
  },
  {
    "text": "sequentially so I wrote kind of like a little future thing and it goed a bunch of get HTP GS and then like recombine",
    "start": "3074240",
    "end": "3082000"
  },
  {
    "text": "them and that kind of thing but that's the exception not the rule yeah kind of found out a similar thing that in my",
    "start": "3082000",
    "end": "3087640"
  },
  {
    "text": "like coding CS or like little side you know fun projects like 24 days in December or whatever then like you you",
    "start": "3087640",
    "end": "3094079"
  },
  {
    "text": "experiment with those cool concurrency patterns and like fan in and fan out and the channels and and all of that but",
    "start": "3094079",
    "end": "3099119"
  },
  {
    "text": "like actually in the day-to-day job the concurrency is built more into the system itself rather than the code like",
    "start": "3099119",
    "end": "3104960"
  },
  {
    "text": "the code is most of the time is sequential and like because we have tiny Services usually there's just not enough even like things to do concurrently like",
    "start": "3104960",
    "end": "3111400"
  },
  {
    "text": "it's just a one simple thing and then I to like quickly touch on the previous subject of like do you have controllers",
    "start": "3111400",
    "end": "3117359"
  },
  {
    "text": "models and everything else or do you just have the logic in the implementation or like the the implementation in like the in the model",
    "start": "3117359",
    "end": "3123799"
  },
  {
    "text": "itself or do you skip the model entirely I think it also depends on the size of your of your service of your application",
    "start": "3123799",
    "end": "3129559"
  },
  {
    "text": "because if it's a big one you might even need like crazy sub models like I've worked on projects which had crazy",
    "start": "3129559",
    "end": "3134839"
  },
  {
    "text": "models of models because they were monoliths essentially whereas in the smaller the service I find the less",
    "start": "3134839",
    "end": "3140520"
  },
  {
    "text": "layers you need so sometimes it's completely fine to just go have like a a thing that is both a controller and a",
    "start": "3140520",
    "end": "3146400"
  },
  {
    "text": "model that just goes to the domain like if you don't need those two then just don't force them because it's just",
    "start": "3146400",
    "end": "3151520"
  },
  {
    "text": "unnecessarily complicating things so yeah that that was kind of to the thought to the previous question that is",
    "start": "3151520",
    "end": "3158079"
  },
  {
    "text": "great though I think I'm so pleased you said that because I know for a fact that people they feel like that's a failure",
    "start": "3158079",
    "end": "3165079"
  },
  {
    "text": "if that happens they feel like they haven't solved structure they haven't architected it properly because they",
    "start": "3165079",
    "end": "3170920"
  },
  {
    "text": "don't they don't know what they're doing that's how they people feel about this and it really is isn't the case yeah I",
    "start": "3170920",
    "end": "3176119"
  },
  {
    "text": "agree I genuinely will start nowadays with just a single folder everything's in main I don't even break it out into",
    "start": "3176119",
    "end": "3182720"
  },
  {
    "text": "packages in the beginning even when I know for sure it's going to be it's going to have to happen it's a sort of",
    "start": "3182720",
    "end": "3189559"
  },
  {
    "text": "Journey that's the thing it is a journey it's not that we're building the final State we're never really building the",
    "start": "3189559",
    "end": "3195680"
  },
  {
    "text": "final state of anything in software so I I really pleased you gave that uh example yeah and like whenever I talk",
    "start": "3195680",
    "end": "3202559"
  },
  {
    "text": "about DDD and and you talk about the different components in DDD like the repositories and the services and the",
    "start": "3202559",
    "end": "3208079"
  },
  {
    "text": "value objects and whatever and like some people will try and desperately find every single one of those in their application and sometimes you just don't",
    "start": "3208079",
    "end": "3213839"
  },
  {
    "text": "have them and that's completely fine like it doesn't make you a worst programmer if you don't have those things sometimes you just don't and I",
    "start": "3213839",
    "end": "3220200"
  },
  {
    "text": "think the DDD is like the final form of the uh structure of a program is also like it depends on you having a really",
    "start": "3220200",
    "end": "3226760"
  },
  {
    "text": "strong command of your domain like if you're at an early stage startup you don't even know what you're building you",
    "start": "3226760",
    "end": "3232040"
  },
  {
    "text": "don't know what the people want you don't know the models you need and so there's no reason to like go all in on",
    "start": "3232040",
    "end": "3237079"
  },
  {
    "text": "all this structure right it's only in the final stages when you know you're presumably making profit and and you",
    "start": "3237079",
    "end": "3242680"
  },
  {
    "text": "have like customers to tell you what you want then you can like Harden all of your models of the the thing you're actually building and until then it's",
    "start": "3242680",
    "end": "3249680"
  },
  {
    "text": "it's like nonsense and a waste of time to to go that deep I hope that gives a level of comfort to our new go",
    "start": "3249680",
    "end": "3256680"
  },
  {
    "text": "programmers that that listen I really do I love that this has been basically the theme of the show actually yeah and to",
    "start": "3256680",
    "end": "3263760"
  },
  {
    "text": "repeat once more just don't expect to get it right from the start you'll almost definitely get it wrong you'll almost definitely have to go back and",
    "start": "3263760",
    "end": "3269359"
  },
  {
    "text": "change some things so yeah I think it goes back to what Peter said at the start which is just make your code write your code in a way that is easy to",
    "start": "3269359",
    "end": "3275319"
  },
  {
    "text": "change and then just don't be afraid to change it the code just lives in morphs all the time like your business logic",
    "start": "3275319",
    "end": "3280839"
  },
  {
    "text": "will change over time as well like if you're building a product like a software as a service type of thing like you'll probably add some features over",
    "start": "3280839",
    "end": "3287000"
  },
  {
    "text": "time and remove some features over time so your actual you know business domain will also change and that's that's fine",
    "start": "3287000",
    "end": "3292440"
  },
  {
    "text": "and then you have to adapt there's another article I I don't know if giving all these call outs is good or bad but I",
    "start": "3292440",
    "end": "3298599"
  },
  {
    "text": "think my favorite article ever written on the theory of like software engineering and programming I don't remember the exact title I'll share a",
    "start": "3298599",
    "end": "3304680"
  },
  {
    "text": "link maybe for the show notes but the number one point in it is that like business requirements never like settle",
    "start": "3304680",
    "end": "3311280"
  },
  {
    "text": "down and become Static they always change that's the nature of business right so you can't like program in the",
    "start": "3311280",
    "end": "3316760"
  },
  {
    "text": "hope that ASM totically will'll approach the truth all that's going to happen is the business people are going to throw more changes at you right so like",
    "start": "3316760",
    "end": "3323599"
  },
  {
    "text": "understand this is true and and program to that truth I love that one thing we",
    "start": "3323599",
    "end": "3328799"
  },
  {
    "text": "haven't talked about much which is a big thing in go is interfaces and again this",
    "start": "3328799",
    "end": "3335119"
  },
  {
    "text": "is an area where in the past I've definitely made mistakes where I just made everything an interface everything",
    "start": "3335119",
    "end": "3341359"
  },
  {
    "text": "I did was an interface in fact my packages even if I had if I say I had a greeter struct that was going to do the",
    "start": "3341359",
    "end": "3348480"
  },
  {
    "text": "greeting I would have a greeter interface in there as well and then anyone else could use that interface you",
    "start": "3348480",
    "end": "3354400"
  },
  {
    "text": "know um that was kind of confusing and people would I mean I didn't actually build greeters I did build real examples",
    "start": "3354400",
    "end": "3361599"
  },
  {
    "text": "of this and people would often ask when do I use the interface when do I use this concrete type so it added a kind of",
    "start": "3361599",
    "end": "3368520"
  },
  {
    "text": "bit of noise and I must have picked up from somewhere possibly one of you three",
    "start": "3368520",
    "end": "3374480"
  },
  {
    "text": "or Dave Cheney or somebody saying yeah don't bother with the interface just have the concrete type if the user needs",
    "start": "3374480",
    "end": "3381599"
  },
  {
    "text": "the interface they can write their own that a really interesting property I",
    "start": "3381599",
    "end": "3387119"
  },
  {
    "text": "think of the way goes interfaces work they are kind of duck typing although",
    "start": "3387119",
    "end": "3392280"
  },
  {
    "text": "apparently it's called structural typing because it's a compile time thing it doesn't happen at runtime as long as",
    "start": "3392280",
    "end": "3398400"
  },
  {
    "text": "your the concrete type or the type implements the same methods with the same signatures as what's in your",
    "start": "3398400",
    "end": "3404680"
  },
  {
    "text": "interface then you can use it in place and that as a property I think um really",
    "start": "3404680",
    "end": "3410640"
  },
  {
    "text": "helps but what about uh dependencies and dependency injection and things like",
    "start": "3410640",
    "end": "3415839"
  },
  {
    "text": "that how do we feel about interfaces there I I like interfaces a lot for that I think that I I think a few things are",
    "start": "3415839",
    "end": "3422640"
  },
  {
    "text": "interfaces like uh I think one thing that people tend to get wrong early on is that they Define interfaces by the",
    "start": "3422640",
    "end": "3430200"
  },
  {
    "text": "you know like the library defines the interface versus the callar and uh I think that's probably one of the biggest",
    "start": "3430200",
    "end": "3435799"
  },
  {
    "text": "things that people usually need to overcome to really kind of get that to snap and understand it so I mean I think",
    "start": "3435799",
    "end": "3441920"
  },
  {
    "text": "for interfaces generally I don't use interfaces unless I need two of thing two of something you know two",
    "start": "3441920",
    "end": "3447640"
  },
  {
    "text": "implementations of it and a lot of times it can be like hey I'm running postgress and I have that but I also want a mock",
    "start": "3447640",
    "end": "3453200"
  },
  {
    "text": "version of that so you know you can interchange both of those and not to get",
    "start": "3453200",
    "end": "3458400"
  },
  {
    "text": "too far but on the topic of dependency injection since we're talking about that I know Uber has their own dependency",
    "start": "3458400",
    "end": "3463799"
  },
  {
    "text": "injection framework I haven't I looked at a little bit but honestly I found that just like just writing code and",
    "start": "3463799",
    "end": "3469920"
  },
  {
    "text": "just like instantiating things and just passing them in uh inside of main tends to be the best most straightforward",
    "start": "3469920",
    "end": "3475319"
  },
  {
    "text": "dependency injection I've seen that's what I do yeah it's another question of context right like I when I heard about",
    "start": "3475319",
    "end": "3480720"
  },
  {
    "text": "Uber's talk I was like are we really going to go down this road again but hearing it and understanding like the",
    "start": "3480720",
    "end": "3486039"
  },
  {
    "text": "context of their organization I think it makes sense there actually in the same way like cat you have a lot of",
    "start": "3486039",
    "end": "3491440"
  },
  {
    "text": "microservices it doesn't make sense to rebuild the world for each of them it's kind of their environment on the subject",
    "start": "3491440",
    "end": "3497119"
  },
  {
    "text": "of interfaces I use them extensively uh but as consumer contracts not as producer Declarations of intent so what",
    "start": "3497119",
    "end": "3503799"
  },
  {
    "text": "is the a like return strs and accept interfaces I'm probably on the far end",
    "start": "3503799",
    "end": "3509760"
  },
  {
    "text": "of the spectrum but yeah I I do that all the time and Ben you mentioned like you",
    "start": "3509760",
    "end": "3514799"
  },
  {
    "text": "only need an interface when you have two of something for me when I take dependencies into a Constructor or a",
    "start": "3514799",
    "end": "3520440"
  },
  {
    "text": "function I always need two of them because I have the real thing that I use in prod and then the the the mock or the",
    "start": "3520440",
    "end": "3526079"
  },
  {
    "text": "fixed whatever test thing in every dependency of mine there's always two of them so I always use an interface and I",
    "start": "3526079",
    "end": "3532839"
  },
  {
    "text": "Define it next to the function or Constructor or type that uh uses it yeah",
    "start": "3532839",
    "end": "3538240"
  },
  {
    "text": "I've done that before where I had the interface was in the test files it didn't even get into the main package",
    "start": "3538240",
    "end": "3544079"
  },
  {
    "text": "because in this particular case I think it made sense I like also the fact that you you can Define interfaces inside the",
    "start": "3544079",
    "end": "3551880"
  },
  {
    "text": "functions as well like Anonymous interfaces yeah kind of and there a storytelling opportunities what I was",
    "start": "3551880",
    "end": "3557599"
  },
  {
    "text": "going to say it's clear then looking at the test what's kind of expected and so you know I like those sorts of little",
    "start": "3557599",
    "end": "3564240"
  },
  {
    "text": "things which go enables sometimes I've done it and I've thought this is clever",
    "start": "3564240",
    "end": "3569680"
  },
  {
    "text": "really clever and I feel really good about myself but actually no one's going to expect this to be the way it is and I",
    "start": "3569680",
    "end": "3575599"
  },
  {
    "text": "just pulled it out and did it the boring way but for a while I was happy and those sorts of patterns I think are",
    "start": "3575599",
    "end": "3581400"
  },
  {
    "text": "really kind of uh really kind of cool happiness is fleeting grab it where you can yeah exactly that's true actually I",
    "start": "3581400",
    "end": "3588480"
  },
  {
    "text": "I think even like we talk about premature abstraction and premature",
    "start": "3588480",
    "end": "3593680"
  },
  {
    "text": "optimization and things like this sometimes I would be quite forgiving if",
    "start": "3593680",
    "end": "3599359"
  },
  {
    "text": "somebody's just really into an idea and they want to just make this thing perform brilliantly and it's not a",
    "start": "3599359",
    "end": "3606400"
  },
  {
    "text": "business requirement but I think happy developers should be a business requirement and so I I I'm quite",
    "start": "3606400",
    "end": "3613319"
  },
  {
    "text": "forgiving when it if someone's got a little interest in something or an idea about something they want to explore it I'm very uh into that idea and I always",
    "start": "3613319",
    "end": "3619920"
  },
  {
    "text": "trying to encourage them to then talk about it and share that experience as well if they can so we could all hear",
    "start": "3619920",
    "end": "3625240"
  },
  {
    "text": "about it too yeah I think it's the right thing to do to encourage people to profile their applications because you",
    "start": "3625240",
    "end": "3630720"
  },
  {
    "text": "might just find out that there's nothing to optimize but just knowing that that there's nothing to optimize uh is very",
    "start": "3630720",
    "end": "3635960"
  },
  {
    "text": "valuable so I think you should definitely profile your application and then find the real bottlenecks and then focus on those because if it's a tiny",
    "start": "3635960",
    "end": "3642839"
  },
  {
    "text": "project your s projects you might be able to optimize whatever you want I think that in in in your full-time job",
    "start": "3642839",
    "end": "3649480"
  },
  {
    "text": "the business will always say like focus on the most important thing because we don't have time to fix everything and then you just really have to pick the",
    "start": "3649480",
    "end": "3655319"
  },
  {
    "text": "most impactful fix to make I'd actually love to see a talk this is a challenge to any of our listeners I'd love to see",
    "start": "3655319",
    "end": "3662240"
  },
  {
    "text": "a talk where we show some code and ask the audience like where's the performance problem in here like you",
    "start": "3662240",
    "end": "3669039"
  },
  {
    "text": "know manufacture some issue and then actually use the tooling to look at it",
    "start": "3669039",
    "end": "3674440"
  },
  {
    "text": "and sometimes often you'd be very surprised by where the actual problems",
    "start": "3674440",
    "end": "3680000"
  },
  {
    "text": "are I'd love to see that as a talk it could be really really fun to watch yeah I always think that it's it's very",
    "start": "3680000",
    "end": "3685799"
  },
  {
    "text": "important to just have proof for your guesses as well because some you might think that this is causing problems but actually you'll find that not really",
    "start": "3685799",
    "end": "3692880"
  },
  {
    "text": "sometimes we had a really interesting talk at the last London goers actually about uh visualizing the performance of your tests it was about running tests in",
    "start": "3692880",
    "end": "3699760"
  },
  {
    "text": "parallel with the with the T do parallel eleny showed a really really cool visualization of how the tests are",
    "start": "3699760",
    "end": "3705319"
  },
  {
    "text": "executed like on the timelines and you could actually see in which case they were truly executed in parallel and if",
    "start": "3705319",
    "end": "3710359"
  },
  {
    "text": "you had subtests they actually were executed in a sequential way which was a bit a little bit of a surprise and you",
    "start": "3710359",
    "end": "3715760"
  },
  {
    "text": "might you might be thinking that oh if I just put a t do parallel in my test they will magically be faster it very much",
    "start": "3715760",
    "end": "3721160"
  },
  {
    "text": "depends on what your tests are actually doing and how they are structured so that was really cool to see I agree with the the premature optimization piece but",
    "start": "3721160",
    "end": "3728720"
  },
  {
    "text": "uh I think one thing that I found to be really helpful over the years is there's uh you can Google it but just type in uh",
    "start": "3728720",
    "end": "3734279"
  },
  {
    "text": "latency numbers every programmer should know uh and there's a couple different versions of it you can even get like historical ones but it basically shows",
    "start": "3734279",
    "end": "3740680"
  },
  {
    "text": "you like you know everything from the time of like an L1 cash hit to like reading disc from a you know a spinning",
    "start": "3740680",
    "end": "3746799"
  },
  {
    "text": "disc to going over Network and just to see the scale of like how the you know",
    "start": "3746799",
    "end": "3751880"
  },
  {
    "text": "it could be like a a nanc to do like an L1 cache hit and it can be you know milliseconds or mic you know",
    "start": "3751880",
    "end": "3757160"
  },
  {
    "text": "microseconds or whatnot to do these other things and just the places people try to optimize where it's like oh I",
    "start": "3757160",
    "end": "3762440"
  },
  {
    "text": "want I don't want to check this variable or this error statement it's like that will take you three NCS or something",
    "start": "3762440",
    "end": "3767880"
  },
  {
    "text": "like just just do it uh so just it gives you a little context about where all this stuff really matters yeah or",
    "start": "3767880",
    "end": "3773960"
  },
  {
    "text": "worrying about stack versus Heap allocations well this has been uh very",
    "start": "3773960",
    "end": "3779200"
  },
  {
    "text": "insightful I've definitely learned a lot I hope lots of our listeners have too um",
    "start": "3779200",
    "end": "3784640"
  },
  {
    "text": "specifically I like this thing about don't abstract too early keep everything as simple as possible and let the",
    "start": "3784640",
    "end": "3791319"
  },
  {
    "text": "patterns emerge let the architecture emerge and make decisions later defer",
    "start": "3791319",
    "end": "3796839"
  },
  {
    "text": "and use defer so if anyone wants to reach out to any of our guests um",
    "start": "3796839",
    "end": "3803119"
  },
  {
    "text": "Twitter is a good way to do it sometimes uh it's a free website cat what's your Twitter name I'm going to",
    "start": "3803119",
    "end": "3808720"
  },
  {
    "text": "have to spell it out very slowly uh so it's @ k a s i a z i e n which is my",
    "start": "3808720",
    "end": "3816760"
  },
  {
    "text": "polish name brilliant very high scorer on Scrabble as well Ben what's your uh",
    "start": "3816760",
    "end": "3822480"
  },
  {
    "text": "Twitter name uh yeah uh on Twitter and pretty much everywhere on the internet I'm Ben B Johnson so just Ben be and boy",
    "start": "3822480",
    "end": "3829640"
  },
  {
    "text": "J and S great pizza uh so I actually have two Twitter accounts uh my",
    "start": "3829640",
    "end": "3835079"
  },
  {
    "text": "programming and uh bad Millennial jokes account is Peter Bon just my full name",
    "start": "3835079",
    "end": "3840960"
  },
  {
    "text": "and for my acting career and weightlifting you can find me at the Rock really",
    "start": "3840960",
    "end": "3848559"
  },
  {
    "text": "great I will I hope you three will join me again in the future that's all the",
    "start": "3848559",
    "end": "3854240"
  },
  {
    "text": "time we've got for today we'll see you next",
    "start": "3854240",
    "end": "3859279"
  },
  {
    "text": "time all right thank you for tuning in to this week's episode of go time if you're not yet hang with us in go for",
    "start": "3860799",
    "end": "3866920"
  },
  {
    "text": "slack we have a channel called go time FM look it up you'll find us hang with us during the live shows connect with",
    "start": "3866920",
    "end": "3873440"
  },
  {
    "text": "other members of the community share stories share codes share coffee recipes whatever it's a lot of fun also we have",
    "start": "3873440",
    "end": "3880480"
  },
  {
    "text": "discussions at changel love.com on every episode head to changel love.com gotime",
    "start": "3880480",
    "end": "3886000"
  },
  {
    "text": "find this episode and discuss it with the community also thanks to fast the our bandwidth partner rbar for helping",
    "start": "3886000",
    "end": "3891960"
  },
  {
    "text": "us move fast and fix things and Leno for hosting the change law platform our music is produced by the mysterious",
    "start": "3891960",
    "end": "3898480"
  },
  {
    "text": "break master cylinder and if you want to hear more awesome podcasts like this subscribe to our Master feed it's one",
    "start": "3898480",
    "end": "3904480"
  },
  {
    "text": "feed to rule them all plus some extras that only hit the master feed and to Chang law.com or search for change law",
    "start": "3904480",
    "end": "3912039"
  },
  {
    "text": "master in your podcast client you'll find us thanks for tuning in we'll see you next",
    "start": "3912039",
    "end": "3917900"
  },
  {
    "text": "[Music]",
    "start": "3917900",
    "end": "3923079"
  },
  {
    "text": "week [Music]",
    "start": "3923079",
    "end": "3944359"
  },
  {
    "text": "so [Music]",
    "start": "3944359",
    "end": "3950549"
  },
  {
    "text": "TR [Music]",
    "start": "3953079",
    "end": "3966429"
  }
]