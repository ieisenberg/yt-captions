[
  {
    "text": "welcome back everyone this is the change log and I'm your host Adam stovak this is episode",
    "start": "10400",
    "end": "15720"
  },
  {
    "text": "151 and on today's show we're talking to Steve kabnick and Yuda cats finally",
    "start": "15720",
    "end": "20760"
  },
  {
    "text": "having a conversation about rust on this podcast lots of deep conversation around",
    "start": "20760",
    "end": "27000"
  },
  {
    "text": "the underpinnings of this awesome new system language from oilla research we have four awesome sponsors for",
    "start": "27000",
    "end": "32960"
  },
  {
    "text": "today's show CIP app quality bundle top tow and digital ocean we'll tell you a",
    "start": "32960",
    "end": "39120"
  },
  {
    "text": "bit more about app quality bundle and top tow as well as digital ocean later in the show but our friends at COD ship",
    "start": "39120",
    "end": "45039"
  },
  {
    "text": "released a brand new feature called parallel CI and they want to give it to you today absolutely for free a 14-day",
    "start": "45039",
    "end": "52559"
  },
  {
    "text": "free trial to test out 20 test pipelines with parallel CI it's a brand new",
    "start": "52559",
    "end": "58960"
  },
  {
    "text": "feature you can split your test commands into up to 10 test pipelines this let you run your test Suite in parallel and",
    "start": "58960",
    "end": "65720"
  },
  {
    "text": "drastically reduce the time it takes to run your builds but with this special offer you're getting 20 test pipelines",
    "start": "65720",
    "end": "71920"
  },
  {
    "text": "that's 20 times faster than you could have ever built your test Suite before the integrate with GitHub and bit bucket",
    "start": "71920",
    "end": "77960"
  },
  {
    "text": "of course you can deploy to cloud service like Heroku AWS and many more",
    "start": "77960",
    "end": "83320"
  },
  {
    "text": "again get start today for free absolutely for free or if you're upgrading use our offer code when you",
    "start": "83320",
    "end": "88720"
  },
  {
    "text": "upgrade to a pain plan the change law podcast is that code use it to get 20%",
    "start": "88720",
    "end": "94040"
  },
  {
    "text": "off any plan you choose for 3 months head to Cod ship.com thechange law to get started and now on to the",
    "start": "94040",
    "end": "102520"
  },
  {
    "text": "show all right we're back we got Steve clck on the call Yehuda Cs on the call and the awesome Infamous Jared Santo",
    "start": "103600",
    "end": "110680"
  },
  {
    "text": "what's up guys excited to be here excited to talk some Rust did you know you were Infamous Jared I just got",
    "start": "110680",
    "end": "116600"
  },
  {
    "text": "Infamous you just made me so so guys we've been wanting to talk about rust for so long Steve I think we",
    "start": "116600",
    "end": "123439"
  },
  {
    "text": "you were helping kind of coordinate the call way back maybe uh I want to say late last year sometime but it just",
    "start": "123439",
    "end": "129840"
  },
  {
    "text": "wasn't good timing so today is sort of perfect timing because we're recording this on April 3rd 2015 and today is the",
    "start": "129840",
    "end": "137640"
  },
  {
    "text": "day that you guys released 1.0 beta for for Russ so it's a it's a big day it's a good day right yeah it's it's been great",
    "start": "137640",
    "end": "143480"
  },
  {
    "text": "so far not only has it been a long time in terms of getting a show about rust but I used to actually post new rust",
    "start": "143480",
    "end": "148800"
  },
  {
    "text": "projects to the change like two years ago so it's very very long time and I've just been so overwhelmed I haven't been",
    "start": "148800",
    "end": "154879"
  },
  {
    "text": "doing that lately but we've picked up your slack a little bit we got a weekly email we ship out now called change law",
    "start": "154879",
    "end": "161000"
  },
  {
    "text": "weekly so we've we've been sprinkling rust in there as we can as we get a chance to",
    "start": "161000",
    "end": "166159"
  },
  {
    "text": "so um Yuda how about you man how how are you today I'm good I'm also uh sprinting",
    "start": "166159",
    "end": "172000"
  },
  {
    "text": "head first with uh Ember 2.0 so I'm sort of doing Ember 2.0 and Russ 1.0 at the",
    "start": "172000",
    "end": "177560"
  },
  {
    "text": "same time which gives me less time than I would like for either and I'm really eager for both of those to be done so I can get back to a sane open source Pace",
    "start": "177560",
    "end": "184640"
  },
  {
    "text": "again yeah and I have Jon API 1.0 which is Rel 1.0 it's just a lot of stuff for",
    "start": "184640",
    "end": "190920"
  },
  {
    "text": "us yeah yeah that kind of leads right into the opening for us which is that you're both core team members on many",
    "start": "190920",
    "end": "198319"
  },
  {
    "text": "projects and I guess we can take it one at time sort of introduce uh yourselves",
    "start": "198319",
    "end": "203480"
  },
  {
    "text": "to to those who may not know you but also sort of what role you play in the rust project and then how that",
    "start": "203480",
    "end": "208560"
  },
  {
    "text": "correlates to other projects working on so I guess uh you know pick who wants to go first I guess Stevie can go first all",
    "start": "208560",
    "end": "214360"
  },
  {
    "text": "right so I am tremendously bad at bios but hello I'm Steve if you don't know uh what's up with me I used to do a lot of",
    "start": "214360",
    "end": "221159"
  },
  {
    "text": "Ruby work uh but then I found rust and have sort of transitioned into doing rust uh first of all full-time for Milla",
    "start": "221159",
    "end": "229040"
  },
  {
    "text": "uh but also I did it as a hobby for like two years before that started um I'm in charge of documentation on the rust",
    "start": "229040",
    "end": "235120"
  },
  {
    "text": "project and yeah was made a part of the core team uh not only from having a large amount of contributions but also",
    "start": "235120",
    "end": "241120"
  },
  {
    "text": "to like acknowledge that documentation is a really really important thing and we should like have someone involved in making decisions that affect",
    "start": "241120",
    "end": "247159"
  },
  {
    "text": "documentation so yeah I've been doing open source for a while uh also like",
    "start": "247159",
    "end": "252760"
  },
  {
    "text": "Steve mostly in the Ruby but also JavaScript space um I got involved in Russ actually because a couple years ago",
    "start": "252760",
    "end": "259000"
  },
  {
    "text": "uh the product that I work on at work needed something that was significantly more performant but also edable and I",
    "start": "259000",
    "end": "264759"
  },
  {
    "text": "got involved in Rust pretty much at the perfect time right after it stopped having identity crisis the identity",
    "start": "264759",
    "end": "270880"
  },
  {
    "text": "crisis was over but before much of the work had gotten done uh to make it the awesome language that it is now and so",
    "start": "270880",
    "end": "277880"
  },
  {
    "text": "Mo uh mostly I got involved because I was a really big early user and um I'm glad rust uh involved me as a user it's",
    "start": "277880",
    "end": "284800"
  },
  {
    "text": "something that I care a lot about in my my open source projects is having people involved in the in the project that are",
    "start": "284800",
    "end": "290039"
  },
  {
    "text": "part of the decision-making process that are just there because they're heavy users um so I contribute a little bit",
    "start": "290039",
    "end": "295360"
  },
  {
    "text": "but I'm more the voice of the practitioner um and and definitely the kind of usage",
    "start": "295360",
    "end": "302160"
  },
  {
    "text": "that I use Russ for is a little bit different than the kind of usage that is involved in like writing the standard",
    "start": "302160",
    "end": "307400"
  },
  {
    "text": "library or the compiler or whatever one of the dangers of a bootstrap compiler is you make a programming language",
    "start": "307400",
    "end": "312759"
  },
  {
    "text": "that's really good at making compilers so we wanted to make sure that we had a broader set of use cases than just",
    "start": "312759",
    "end": "318120"
  },
  {
    "text": "building the rust compiler itself which is why Servo is important but also the stuff that you is doing is very",
    "start": "318120",
    "end": "323639"
  },
  {
    "text": "important Steve I'm interested I think I I first came across rust back when you",
    "start": "323639",
    "end": "328880"
  },
  {
    "text": "first published rust for rubyists MH um which I went back in time and checked that your I think your first commit on",
    "start": "328880",
    "end": "334560"
  },
  {
    "text": "that was December 22nd 2012 so yep uh talk about an early",
    "start": "334560",
    "end": "340360"
  },
  {
    "text": "adopter what was it about rust way back in the day that initially got you excited so in college most of my friends",
    "start": "340360",
    "end": "348039"
  },
  {
    "text": "actually did operating systems phds eventually and uh we had started to work",
    "start": "348039",
    "end": "353280"
  },
  {
    "text": "on an operating system and at that time we knew that CN C++ had some problems and D was a really big thing so we",
    "start": "353280",
    "end": "358680"
  },
  {
    "text": "actually worked on building operating system back in D1 back in the college days and uh I sort of found the web and",
    "start": "358680",
    "end": "365120"
  },
  {
    "text": "went into Ruby and sort of left the system space but they kind of continued doing that and I'd always remembered that for later and I've always sort of",
    "start": "365120",
    "end": "371360"
  },
  {
    "text": "had a love for low-l programming even though it's not what I've done in my work in the last couple years so I was",
    "start": "371360",
    "end": "376560"
  },
  {
    "text": "at home visiting my parents for Christmas and uh there's not a lot to do in the middle of nowhere where I'm from",
    "start": "376560",
    "end": "381880"
  },
  {
    "text": "and so I was like cruising the internet and found this announcement about rust uh 0.5 being released and uh I was like",
    "start": "381880",
    "end": "389639"
  },
  {
    "text": "oh this is systems programming language I haven't done that in forever like I would love to get into this let me check it out and I found that the tutorial",
    "start": "389639",
    "end": "397240"
  },
  {
    "text": "while it explains what to do like after I read it I didn't know how to write a rust program like I read it all I sat",
    "start": "397240",
    "end": "403120"
  },
  {
    "text": "down at an editor I was like I what do I do from here so I just got in the IRC",
    "start": "403120",
    "end": "408520"
  },
  {
    "text": "room and I started asking dumb questions like literally like how do you hello world and like things like that and then",
    "start": "408520",
    "end": "413639"
  },
  {
    "text": "wrote them all out into what became rust for rubyist so that was sort of that Christmas break um and I found the",
    "start": "413639",
    "end": "419919"
  },
  {
    "text": "language really Charming I found all the people that were involved really fantastic and so I just kind of stuck with it from there so rust is a Mozilla",
    "start": "419919",
    "end": "428360"
  },
  {
    "text": "project Mozilla research um and you work now at Mozilla on it can you maybe speak on their",
    "start": "428360",
    "end": "434400"
  },
  {
    "text": "behalf of like why rust what was the point what's the win for Mozilla and what's the thrust of the project do you",
    "start": "434400",
    "end": "440960"
  },
  {
    "text": "know about the pwn to own browser competition that happens yeah they don't last very long yeah they don't last very",
    "start": "440960",
    "end": "446759"
  },
  {
    "text": "long but what's interesting is if you look at what the vulnerab are so uh this I'm not as familiar with",
    "start": "446759",
    "end": "452599"
  },
  {
    "text": "this most recent one because I've been studying the last one a lot more but in the in the not the one that just ended",
    "start": "452599",
    "end": "458000"
  },
  {
    "text": "but the one before that uh Firefox had four remote code execution vulnerabilities and all of those were",
    "start": "458000",
    "end": "464120"
  },
  {
    "text": "due to um eras like iterator invalidation and use after free and this kind of memory unsafety situation so",
    "start": "464120",
    "end": "471520"
  },
  {
    "text": "Milla with Firefox and other projects writes a lot of C++ and they feel the",
    "start": "471520",
    "end": "476560"
  },
  {
    "text": "pain of C++ in many ways and so part of the uh the reason to fund rust",
    "start": "476560",
    "end": "482360"
  },
  {
    "text": "development was to like figure out if they could write a good programming language that would make them be able to",
    "start": "482360",
    "end": "488680"
  },
  {
    "text": "write web browsers that are safer while not sacrificing performance so historically programming languages have",
    "start": "488680",
    "end": "494919"
  },
  {
    "text": "sort of given you this tradeoff of we give you maximum control but then you have to double check everything versus",
    "start": "494919",
    "end": "501680"
  },
  {
    "text": "we don't give you much control but everything is safe by default uh and so rust is trying to break that dichotomy",
    "start": "501680",
    "end": "507680"
  },
  {
    "text": "down and give you a language that gives you both both things yeah so so I don't",
    "start": "507680",
    "end": "512919"
  },
  {
    "text": "work for Mozilla um you said Russ is a Mozilla project one thing I really like about the Milla research team is how",
    "start": "512919",
    "end": "520000"
  },
  {
    "text": "much they care about making projects they they work on at Milla be real Community projects and obviously that's",
    "start": "520000",
    "end": "525959"
  },
  {
    "text": "pretty rough because uh if you have five full-time people working on something and then you have a community there's a",
    "start": "525959",
    "end": "532440"
  },
  {
    "text": "natural tension between those things but uh I've I've really enjoyed how much the team there has has looked to diversify",
    "start": "532440",
    "end": "540240"
  },
  {
    "text": "the group uh and increase the number of people involved who are not just people",
    "start": "540240",
    "end": "545480"
  },
  {
    "text": "working at Mozilla um obviously Russ has a bunch of phds working on it um and",
    "start": "545480",
    "end": "551000"
  },
  {
    "text": "that that ends up being important to solve the kinds of problems that Steve was just talking about before rust",
    "start": "551000",
    "end": "556279"
  },
  {
    "text": "existed the the whole story of what rust is was just an academic concept and rust",
    "start": "556279",
    "end": "561640"
  },
  {
    "text": "is really the first time that's that it became put into use as a production language um so that that's important and",
    "start": "561640",
    "end": "567560"
  },
  {
    "text": "does involve hiring some PhD to do some research work uh but I've also really enjoyed how much the Mozilla team and",
    "start": "567560",
    "end": "574079"
  },
  {
    "text": "and the Mozilla research organization has how much time they spent getting people who are not at mozzilla being",
    "start": "574079",
    "end": "580480"
  },
  {
    "text": "important members of the decision-making process of governance and all that so you H when did you first come across it",
    "start": "580480",
    "end": "587000"
  },
  {
    "text": "and how long did it take you between finding it you know hit your radar and being like wow I'm going to build",
    "start": "587000",
    "end": "592399"
  },
  {
    "text": "something with this yeah so I I knew Dave Herman from moua research he was a",
    "start": "592399",
    "end": "597800"
  },
  {
    "text": "friend of mine and so I knew that the rust project existed conceptually um and like a lot of other people I was looking",
    "start": "597800",
    "end": "603880"
  },
  {
    "text": "for an excuse to use rust but I never really had any good ones uh and the product that I was working on at work is",
    "start": "603880",
    "end": "610040"
  },
  {
    "text": "called Skylight it's a production manage it's a performance monitoring app for rails apps and so uh one of the things",
    "start": "610040",
    "end": "617200"
  },
  {
    "text": "that we do is we just have a thing that runs inside your rails app collects data and sends it to our servers so that's",
    "start": "617200",
    "end": "622240"
  },
  {
    "text": "just something that that we had to write and so the first version of that like you would expect was written in Ruby and",
    "start": "622240",
    "end": "627440"
  },
  {
    "text": "that version would basically go it would monkey patch your stuff or use act to support notifications or whatever and",
    "start": "627440",
    "end": "633680"
  },
  {
    "text": "then it would uh get the information sent to the server and pretty early on we discovered that we had some bad",
    "start": "633680",
    "end": "640279"
  },
  {
    "text": "memory usage problems um this is something that a lot of our users reported we could inth especially",
    "start": "640279",
    "end": "645440"
  },
  {
    "text": "pathological cases we could end up using 100 or 200 megabytes of memory but even you know 20 30 40 50 megabytes of memory",
    "start": "645440",
    "end": "652959"
  },
  {
    "text": "is a lot of memory to ask someone to give out to monitor their application um so I was basically tasked with getting",
    "start": "652959",
    "end": "658920"
  },
  {
    "text": "the memory management story under control so I went in there and I uh looked at the r Ruby application really",
    "start": "658920",
    "end": "665680"
  },
  {
    "text": "evaluated it and I was able I made some good progress I was able to get the memory usage down I was able to fix some",
    "start": "665680",
    "end": "670959"
  },
  {
    "text": "of the pathological cases but the process of doing that made me realize that I simply didn't have the control over the memory usage that I would need",
    "start": "670959",
    "end": "677360"
  },
  {
    "text": "to keep this maintained and that every anytime anybody ever touched the rails app or sorry the Ruby app there was a",
    "start": "677360",
    "end": "683519"
  },
  {
    "text": "good chance that they would have significant regressions because I had to do really black magic stuff to even get",
    "start": "683519",
    "end": "688760"
  },
  {
    "text": "some modest improvements so uh Carl at the time one of our co-founders had started to do an",
    "start": "688760",
    "end": "694920"
  },
  {
    "text": "experiment to write the agent at C++ and he actually made some good progress but",
    "start": "694920",
    "end": "700200"
  },
  {
    "text": "uh I personally don't trust my C++ code and I was extremely nervous about having us as a team maintain code that could in",
    "start": "700200",
    "end": "706480"
  },
  {
    "text": "theory seg fa in production right so it was fairly important to us if we're asking people to run code that that code",
    "start": "706480",
    "end": "711880"
  },
  {
    "text": "not be able to explode um so I started uh poking around at Russ and I basically I said you know",
    "start": "711880",
    "end": "718040"
  },
  {
    "text": "Russ is still pretty new but I I'm pretty sure I can get a you know prototype of a small piece an MVP which",
    "start": "718040",
    "end": "723480"
  },
  {
    "text": "is just the part that serialized and deserialized the data structures into protox and sent them to our server I",
    "start": "723480",
    "end": "728760"
  },
  {
    "text": "think I can get that part done in you know a week or two and so I I said if I can get it done then we should make",
    "start": "728760",
    "end": "734160"
  },
  {
    "text": "further progress so I spent a week or two and I was successful at doing that part um and actually that the reason I",
    "start": "734160",
    "end": "739199"
  },
  {
    "text": "did that part was that that part in Ruby was one of the worst parts of the system it was the one that was most bad at memory and so pretty quickly we were",
    "start": "739199",
    "end": "745800"
  },
  {
    "text": "able to take this uh fairly memory heavy thing in Ruby rewrited rust and shipped",
    "start": "745800",
    "end": "751720"
  },
  {
    "text": "the native binary to our users um the reason we that I was really interested in Rust and the reason why Carl was interested in C++ was that I had a lot",
    "start": "751720",
    "end": "758720"
  },
  {
    "text": "of experience embedding JavaScript run times in Ruby um both spider monkey and then later on V8 uh I worked on those",
    "start": "758720",
    "end": "765600"
  },
  {
    "text": "projects and embedding a GC inside of another GC is just asking for NeverEnding pain so having a a a",
    "start": "765600",
    "end": "772560"
  },
  {
    "text": "language that we could use without any GC whatsoever and have it do quote unquote manual memory management was",
    "start": "772560",
    "end": "777720"
  },
  {
    "text": "very attractive so uh the tldr is I had a really big problem which was write this agent uh",
    "start": "777720",
    "end": "785000"
  },
  {
    "text": "and have it use less memory and I was able even at that point to get up and running with something that worked and gave us value in a pretty short amount",
    "start": "785000",
    "end": "790920"
  },
  {
    "text": "of time and and so something that was very very memory uh had good memory usage didn't have a GC was very fast and",
    "start": "790920",
    "end": "798199"
  },
  {
    "text": "also that I could ship with very low risk of seg vaals in a short period of time awesome so Steve was excited yud",
    "start": "798199",
    "end": "805360"
  },
  {
    "text": "was excited anytime you guys are excited the rest of us tend to get a little bit excited",
    "start": "805360",
    "end": "810519"
  },
  {
    "text": "uh maybe maybe a bit let's talk about the language um it's defining features",
    "start": "810519",
    "end": "817880"
  },
  {
    "text": "and I'm GNA kind of turn to Steve since it's your job to like write the docs and to to explain it to us noobs and then",
    "start": "817880",
    "end": "823959"
  },
  {
    "text": "you you can just kind of hop in and help out uh wherever you think he needs it so rest defining feature is memory safety",
    "start": "823959",
    "end": "831240"
  },
  {
    "text": "without garbage collection Steve can can you unpack that for us sure so uh in the",
    "start": "831240",
    "end": "837639"
  },
  {
    "text": "beginning there were programming languages that sort of let you do whatever you want right like assembly code will start from that level of",
    "start": "837639",
    "end": "843399"
  },
  {
    "text": "abstraction obviously you know this started even before that with machine code y y don't want to get in there but",
    "start": "843399",
    "end": "848920"
  },
  {
    "text": "uh things like assembly uh and the languages that came right after it uh gave you this low-level access to memory",
    "start": "848920",
    "end": "856000"
  },
  {
    "text": "and the problem with giving you that lowl access is that you can do bad things uh and this is because naturally",
    "start": "856000",
    "end": "861320"
  },
  {
    "text": "a processor just does bad things right like when you teach a person programming one of the first things you learn is that computers are not smart they're",
    "start": "861320",
    "end": "867240"
  },
  {
    "text": "actually stupid and they do exactly what you tell them to even if what you tell them to do is just terribly wrong one of",
    "start": "867240",
    "end": "872600"
  },
  {
    "text": "the innovations that came along actually uh in originally in the list paper uh by John McCarthy was this idea of a garbage",
    "start": "872600",
    "end": "878959"
  },
  {
    "text": "collector and uh so instead of you managing memory manually through pointers you would ask garbage collector",
    "start": "878959",
    "end": "885000"
  },
  {
    "text": "for memory and it would give it to you and then you're done with it it would automatically figure out how to get rid of that memory so fast forward you know",
    "start": "885000",
    "end": "891720"
  },
  {
    "text": "50 years this is a very common thing most of us work in languages that are garbage collected but garbage collectors",
    "start": "891720",
    "end": "898240"
  },
  {
    "text": "uh like all things in engineering have upsides and downsides and there are certain domains in which a garbage",
    "start": "898240",
    "end": "903560"
  },
  {
    "text": "collector's downside is completely unacceptable and there's other domains in which a garbage collector's downsides",
    "start": "903560",
    "end": "908880"
  },
  {
    "text": "might not be as good as their upsides even if it's still possibly usable so in those domains where it's absolutely",
    "start": "908880",
    "end": "914920"
  },
  {
    "text": "impossible you pretty much need a language like Mo in modern day C or C++ that do not have one built into the",
    "start": "914920",
    "end": "920480"
  },
  {
    "text": "language um and so rust is trying to tackle that sort of space because when you're building a web browser you need a",
    "start": "920480",
    "end": "926480"
  },
  {
    "text": "ton of performance um people expect their see SS transitions to be really Snappy and like JavaScript to operate",
    "start": "926480",
    "end": "932040"
  },
  {
    "text": "very quickly and so performance you know really really matters a lot and so in that context a GC is not really an",
    "start": "932040",
    "end": "938040"
  },
  {
    "text": "acceptable amount of latency there's other ones too like for example uh if you're implementing a programming language and you want to write a garbage",
    "start": "938040",
    "end": "944319"
  },
  {
    "text": "collector uh it's much nicer if you're not fighting with a host language as garbage collector so you may want to use",
    "start": "944319",
    "end": "949720"
  },
  {
    "text": "one or if you're writing a AAA game uh you know when you need to have 60 frames a seconds uh a GC pause is unacceptable",
    "start": "949720",
    "end": "957759"
  },
  {
    "text": "there's all sorts of domains where this kind of thing happens I mean I think uda's case is actually really interesting so maybe he wants to talk",
    "start": "957759",
    "end": "962800"
  },
  {
    "text": "about that for a moment yeah so our domain is just we're already we're embedding into a language that already",
    "start": "962800",
    "end": "968399"
  },
  {
    "text": "has a garbage collector and Cycles between two languages with a garbage collector uh pretty much cause leaks no",
    "start": "968399",
    "end": "975240"
  },
  {
    "text": "matter how careful you are um especially if both languages have closures so if you're writing in uh trying to embed",
    "start": "975240",
    "end": "981480"
  },
  {
    "text": "JavaScript in Ruby or go and Ruby or interoperating between like Java 8 and",
    "start": "981480",
    "end": "986800"
  },
  {
    "text": "Ruby the only way that that ends up working correctly is if both parts of the system are talking to the same",
    "start": "986800",
    "end": "992639"
  },
  {
    "text": "memory management system um so if you're for example J Ruby the correct solution is that jruby doesn't come with its own",
    "start": "992639",
    "end": "998240"
  },
  {
    "text": "garbage collector J Ruby uses the host garbage collector that's one strategy that you can use and that works fine if",
    "start": "998240",
    "end": "1003680"
  },
  {
    "text": "you're embedding your language inside of another language right but in this case we're uh Ruby is the host language which",
    "start": "1003680",
    "end": "1009720"
  },
  {
    "text": "means that we don't and we we probably don't want the thing that we're embedding to use Ruby's garbage collector right we're writing low lower",
    "start": "1009720",
    "end": "1015360"
  },
  {
    "text": "level code so the only real solution is to have the thing that we're embedding use the systems memory management the",
    "start": "1015360",
    "end": "1021600"
  },
  {
    "text": "systems memory management is Malo right so that's the way to avoid causing uh",
    "start": "1021600",
    "end": "1027438"
  },
  {
    "text": "conflicts but of course now if the only option that you have is Malo now you're writing extremely low-l code that has",
    "start": "1027439",
    "end": "1033438"
  },
  {
    "text": "the possibility of taking down the entire process with you so uh in my in my case we could have written in a",
    "start": "1033439",
    "end": "1040079"
  },
  {
    "text": "modern dialect of C++ which does a certain amount of work to make this",
    "start": "1040079",
    "end": "1045160"
  },
  {
    "text": "plausible but I as a programmer I just don't trust myself to write code that never crashes and so I wasn't willing to",
    "start": "1045160",
    "end": "1052440"
  },
  {
    "text": "write I wasn't willing to basically go to naso levels of engineering just to write a thing that collected information from your rails app and I really wanted",
    "start": "1052440",
    "end": "1059799"
  },
  {
    "text": "some uh to use a language that would that would give us guarantees about that stuff so we if Russ didn't exist I think",
    "start": "1059799",
    "end": "1065880"
  },
  {
    "text": "we would have had a deep struggle inside of the company because I think there was a a strong pressure to use C++ because",
    "start": "1065880",
    "end": "1072360"
  },
  {
    "text": "that would give us the guarantees that we needed in terms of performance but a bunch of the rest of us were like you",
    "start": "1072360",
    "end": "1077480"
  },
  {
    "text": "know who's going to maintain that that how are we going to make sure we don't crash who's going to take the support tickets from the guy that's complaining that we're seuling their process um and",
    "start": "1077480",
    "end": "1084760"
  },
  {
    "text": "so Russ was really came in came just at the right time for us because it allowed us to say we're going to be able to have lowle control we're going to be able to",
    "start": "1084760",
    "end": "1091200"
  },
  {
    "text": "use the systems memory management but we're also going to have a absolute confidence that the program we write",
    "start": "1091200",
    "end": "1096880"
  },
  {
    "text": "doesn't take down the host with it and and we're not the only people that are writing programs with this problem pretty much any c extension in Ruby has",
    "start": "1096880",
    "end": "1103600"
  },
  {
    "text": "this kind of problem and I would imagine that over time more and more cases where people are using C effectively as a glue",
    "start": "1103600",
    "end": "1110159"
  },
  {
    "text": "layer or as an embedding language uh more and more people will move to Rus just as a strictly better c yeah and so",
    "start": "1110159",
    "end": "1116480"
  },
  {
    "text": "that's like that's like the drawbacks of the GC angles it sort of leads right into that so memory safety without",
    "start": "1116480",
    "end": "1121679"
  },
  {
    "text": "garbage collection means that we give you this degree of safety that you're not going to screw things up without",
    "start": "1121679",
    "end": "1127679"
  },
  {
    "text": "needing to use the GC to do it so yeah I think that's probably a good spot for us to pause and hear from a sponsor when we",
    "start": "1127679",
    "end": "1134000"
  },
  {
    "text": "come back I want to hear exactly how it gives us this memory safety without garbage collection so let's uh let's",
    "start": "1134000",
    "end": "1140159"
  },
  {
    "text": "pause we be back in a sec I want to share a more personal note today with you about our awesome sponsor",
    "start": "1140159",
    "end": "1147240"
  },
  {
    "text": "toptw you've heard us talk about toptw several times for longtime listeners you know that toptw has been supporting the",
    "start": "1147240",
    "end": "1153200"
  },
  {
    "text": "show for the better part of a year to a year and a half now uh if you want to go to their website while I'm talking here",
    "start": "1153200",
    "end": "1158600"
  },
  {
    "text": "it's t o.com it's one of the best places to work as a freelance software developer",
    "start": "1158600",
    "end": "1165400"
  },
  {
    "text": "uh we've been working with topt like I said for about a year year and a half now and over this year and a half I've",
    "start": "1165400",
    "end": "1170480"
  },
  {
    "text": "gotten to know their co-founder Brendan very very well I love what they're doing for the software development Community",
    "start": "1170480",
    "end": "1176799"
  },
  {
    "text": "they care deeply about software developers having awesome engagements to work on and they also care about awesome",
    "start": "1176799",
    "end": "1182880"
  },
  {
    "text": "engagements having really awesome software Engineers to work with them uh so they really make the marriage between",
    "start": "1182880",
    "end": "1188520"
  },
  {
    "text": "a business with great opportunities and an engineer needing great opportunities to work on they make that marriage",
    "start": "1188520",
    "end": "1195039"
  },
  {
    "text": "possible well we took our relationship to the next level and when they're ourselves we're building something very",
    "start": "1195039",
    "end": "1200720"
  },
  {
    "text": "cool behind the scenes here at the change log to power the future of what we're becoming you're going to love what we're doing we hired a software engineer",
    "start": "1200720",
    "end": "1208000"
  },
  {
    "text": "through topt name is hael so if you're a member and you're in the members Le slack room say hi to hael he's in there",
    "start": "1208000",
    "end": "1214200"
  },
  {
    "text": "uh but I wanted to tell you just How Deeply we care about our relationship with totel and how much we trust who",
    "start": "1214200",
    "end": "1220039"
  },
  {
    "text": "they are and if you're freelancing right now as a software developer and you're looking for a way to work with top",
    "start": "1220039",
    "end": "1225640"
  },
  {
    "text": "clients maybe even us on projects that are interesting to you challenging uh and using the technology you want to use",
    "start": "1225640",
    "end": "1232480"
  },
  {
    "text": "I will go as far to say that topt is the place for you head to t o t.com",
    "start": "1232480",
    "end": "1239840"
  },
  {
    "text": "developers that's tot.com developers learn more and tell them the change Lo sent",
    "start": "1239840",
    "end": "1245360"
  },
  {
    "text": "you all right Steve and Yuda we're talking memory safety without garbage collection sounds like rust has that as",
    "start": "1245360",
    "end": "1251880"
  },
  {
    "text": "a defining feature um you said it has it but like how does it actually work can I",
    "start": "1251880",
    "end": "1257039"
  },
  {
    "text": "I'll just jump in and say one thing and then let Steve answer it in more detail which is I wrote a blog post about this",
    "start": "1257039",
    "end": "1262200"
  },
  {
    "text": "called rust means never having to close a socket which I would recommend people read to get more details about this",
    "start": "1262200",
    "end": "1267960"
  },
  {
    "text": "stuff beyond what we'll talk about here but one thing that was pretty uh like a pretty big aha for me when I started",
    "start": "1267960",
    "end": "1274120"
  },
  {
    "text": "writing rust is that garbage collection is actually pretty awesome at managing the resource called memory so garbage",
    "start": "1274120",
    "end": "1280480"
  },
  {
    "text": "collection is able to say when I create a new you know if I create 5K of memory and I no longer need it it will get",
    "start": "1280480",
    "end": "1286159"
  },
  {
    "text": "cleaned up but garbage collection is actually very bad at closing resources like files locks and things like this",
    "start": "1286159",
    "end": "1293640"
  },
  {
    "text": "and uh if you if you ever wrote C++ which it turns out most people who wrote write Ruby didn't there's actually a",
    "start": "1293640",
    "end": "1299919"
  },
  {
    "text": "pretty nice system in in C++ and other Lang and a bunch of other languages which basically will uh automatically",
    "start": "1299919",
    "end": "1307000"
  },
  {
    "text": "manage resources in the same way that memory is managed uh unfortunately in C++ that comes at the cost of of a lack",
    "start": "1307000",
    "end": "1313279"
  },
  {
    "text": "of safety which basically makes it a non-starter for uh for people who are trying write safe Lang writing safe",
    "start": "1313279",
    "end": "1319400"
  },
  {
    "text": "language but the it didn't really occur to me before that while I had this awesome strategy for dealing with memory",
    "start": "1319400",
    "end": "1325000"
  },
  {
    "text": "management basically I just you know I just did something that new I got a new thing and when I was done with it got cleaned up but if I started to use a",
    "start": "1325000",
    "end": "1331400"
  },
  {
    "text": "file or if I started to use a lock I suddenly had to do all this manual work to make sure it got cleaned up and if I",
    "start": "1331400",
    "end": "1336760"
  },
  {
    "text": "if I use a socket outside of the area where I was allowed to use it just like if I tried to use memory outside the",
    "start": "1336760",
    "end": "1342360"
  },
  {
    "text": "area I'm allowed to use it in C or C++ I would get weird errors and it just didn't occur to me that one of the trade-offs for you a garbage collector",
    "start": "1342360",
    "end": "1348880"
  },
  {
    "text": "which is very good at managing memory is that suddenly I have to do all this manual work to manage sockets and and",
    "start": "1348880",
    "end": "1354840"
  },
  {
    "text": "other kinds of resources files and things like that so uh Steve can answer the original question uh yeah that was a",
    "start": "1354840",
    "end": "1361159"
  },
  {
    "text": "good detour though so it's it's important while we're sort of characterizing C++ is this like",
    "start": "1361159",
    "end": "1366840"
  },
  {
    "text": "completely no holds bar oh my God what's going to happen Zone obviously these are problems that C++ programmers have to",
    "start": "1366840",
    "end": "1372520"
  },
  {
    "text": "deal with right so they have this solution and some terminology they've come up with um that we sort of have",
    "start": "1372520",
    "end": "1378600"
  },
  {
    "text": "gone back and forth on the actual usefulness of but I guess what I will I'll approach the problem in this way so",
    "start": "1378600",
    "end": "1384720"
  },
  {
    "text": "when you in when you make a new variable uh and again we'll stick to memory even though as you would have mentioned this is applicable to everything not just",
    "start": "1384720",
    "end": "1391000"
  },
  {
    "text": "memory um in some ways the non-memory stuff is cooler but whatever you got to start somewhere when you say like I want",
    "start": "1391000",
    "end": "1396400"
  },
  {
    "text": "a variable uh that variable lives for a certain amount of scope right so it's valid from where you declare the",
    "start": "1396400",
    "end": "1402400"
  },
  {
    "text": "variable until that variable goes out of scope and at that point is when you either if if you're ual situation you",
    "start": "1402400",
    "end": "1408679"
  },
  {
    "text": "have to clean it up yourself or if you're in a garbage collector it will detect that like it's dropped out of scope and then uh clean up the memory um",
    "start": "1408679",
    "end": "1415760"
  },
  {
    "text": "and so this is called by C++ programmers um a lifetime so the the amount of time",
    "start": "1415760",
    "end": "1421159"
  },
  {
    "text": "which is sort of weird because it's really based on lexical scoping generally speaking that a variable is like valid so a lot of the most",
    "start": "1421159",
    "end": "1428039"
  },
  {
    "text": "pernicious problems happen in C and C++ where you have a pointer to some sort of thing and then the thing you're pointing",
    "start": "1428039",
    "end": "1434120"
  },
  {
    "text": "to goes out of scope and therefore the memory is freed and now you have point a pointer to invalid memory so what rust",
    "start": "1434120",
    "end": "1441480"
  },
  {
    "text": "actually does is it basically understands both the scope that variables go into and out of and what",
    "start": "1441480",
    "end": "1447360"
  },
  {
    "text": "things are Pointers to those things and it's able to at compile time tell you oh",
    "start": "1447360",
    "end": "1452520"
  },
  {
    "text": "hey that variable is going to go a scope and therefore this pointer would be invalid so this is going to be an error",
    "start": "1452520",
    "end": "1458640"
  },
  {
    "text": "um and we call that this system of ownership and borrowing which is sort of formalizes these semantics but that's",
    "start": "1458640",
    "end": "1464320"
  },
  {
    "text": "sort of the basic idea is that rust is able to statically determine uh how what stuff is in scope and what stuff is out",
    "start": "1464320",
    "end": "1470679"
  },
  {
    "text": "of scope it's doing all it's doing it all at compile time correct yes so there",
    "start": "1470679",
    "end": "1476720"
  },
  {
    "text": "there are some things uh there are some more advanced things you can do to like make those checks be at runtime but the",
    "start": "1476720",
    "end": "1481840"
  },
  {
    "text": "core of the system is an entirely compile time check that has no runtime overhead whatsoever so you get the exact",
    "start": "1481840",
    "end": "1488039"
  },
  {
    "text": "same assembly code as if you had written correct C but you don't you the compiler checks to make sure that you're doing",
    "start": "1488039",
    "end": "1494240"
  },
  {
    "text": "the right thing and one thing that was pretty mind-blowing to me uh well one thing that was pretty mind-blowing to me",
    "start": "1494240",
    "end": "1499760"
  },
  {
    "text": "so I you know I write Ruby code and JavaScript code and I'm used to like closures all over the place and pointers",
    "start": "1499760",
    "end": "1505360"
  },
  {
    "text": "all over place and however many references that you could possibly want pointing to the same thing and aliasing and all this stuff I was used to all",
    "start": "1505360",
    "end": "1511360"
  },
  {
    "text": "that stuff so I when I first started writing rust and I learned that the basic model of Russ is that some some",
    "start": "1511360",
    "end": "1517799"
  },
  {
    "text": "pointer only has one owner at a time and if I want to give it to somebody else I have to give it to someone else and stop",
    "start": "1517799",
    "end": "1523320"
  },
  {
    "text": "using it or I can lend it to somebody else for a fixed period of time and then they can't hold on afterwards I thought",
    "start": "1523320",
    "end": "1528520"
  },
  {
    "text": "that this would be extremely restrictive I thought that it would be very very difficult to program in this way and in fact that's effectively what the",
    "start": "1528520",
    "end": "1534520"
  },
  {
    "text": "academics who came up with this idea thought they thought uh this is like a cool idea but it's extremely restrictive",
    "start": "1534520",
    "end": "1540440"
  },
  {
    "text": "it' be very hard to program in it um and one of the things that I I have found as I've written a lot of rust code now is",
    "start": "1540440",
    "end": "1547320"
  },
  {
    "text": "that a shocking amount of the code that you already write including code with closures including code with you know",
    "start": "1547320",
    "end": "1552880"
  },
  {
    "text": "pointer structures that you put stuff stuff into and all this stuff actually can be described in terms of ownership",
    "start": "1552880",
    "end": "1559159"
  },
  {
    "text": "and borrowing and that when you start thinking about things in terms of ownership and borrowing the structure of",
    "start": "1559159",
    "end": "1564240"
  },
  {
    "text": "your code becomes a lot clearer right so um one thing that you may have been able to sus out from what we said is that",
    "start": "1564240",
    "end": "1570279"
  },
  {
    "text": "it's almost impossible and rust it is impossible in Rust effectively to cause a traditional kind of memory leak",
    "start": "1570279",
    "end": "1576760"
  },
  {
    "text": "because traditional kinds of memory leaks are caused by let's say I have a reference to something and you have a reference to it I don't know when I'm I",
    "start": "1576760",
    "end": "1584080"
  },
  {
    "text": "can clean it up and you don't know when you can clean it up so at from a local perspective nobody knows when the right",
    "start": "1584080",
    "end": "1589840"
  },
  {
    "text": "time to clean something up is and and you can get into situations where nobody nobody is correctly freeing the memory",
    "start": "1589840",
    "end": "1595799"
  },
  {
    "text": "and so you just get a leak and this can happen even in a garbage collected language with complicated enough situations but in Russ there's never a",
    "start": "1595799",
    "end": "1602240"
  },
  {
    "text": "situation where two of us think that we own the pointer right I either I own the pointer and I let you borrow it or you",
    "start": "1602240",
    "end": "1608120"
  },
  {
    "text": "own the pointer and you let me borrow it but only one of us is responsible for cleaning it up and in Russ neither of us",
    "start": "1608120",
    "end": "1614440"
  },
  {
    "text": "actually has to do the manual cleaning up it's just an automatic uh it's an automatic reflection of these rules",
    "start": "1614440",
    "end": "1620840"
  },
  {
    "text": "right so whoever owns the pointer is responsible for cleaning it up and and the compiler will do that cleaning up automatically for you so I was just I",
    "start": "1620840",
    "end": "1627720"
  },
  {
    "text": "was just amazed after I I wrote you know 10 or 20,000 lines of rust code including the big complicated program",
    "start": "1627720",
    "end": "1634200"
  },
  {
    "text": "which is Cargo and the pretty complicated program which is Skylight at how infrequently it turned out that I",
    "start": "1634200",
    "end": "1640399"
  },
  {
    "text": "wanted to go use something that let me get more Dynamic rules like how often the static set of rules work perfectly",
    "start": "1640399",
    "end": "1647000"
  },
  {
    "text": "for what I need so you have ownership and only the thing",
    "start": "1647000",
    "end": "1653000"
  },
  {
    "text": "that owns a piece of memory can write to it or read to it or both uh so that",
    "start": "1653000",
    "end": "1658399"
  },
  {
    "text": "that's actually so Steve you can go ahead so the the it's actually a little bit different than that the owner is the",
    "start": "1658399",
    "end": "1664799"
  },
  {
    "text": "person who is responsible for deallocating that resource so like",
    "start": "1664799",
    "end": "1670159"
  },
  {
    "text": "whenever they're finished with it they get rid of it uh they have like they have like seven seven seven permissions",
    "start": "1670159",
    "end": "1675840"
  },
  {
    "text": "on it right like the they have Ro permissions for that for that object they can do whatever thing they want to",
    "start": "1675840",
    "end": "1681720"
  },
  {
    "text": "do to it and once they're finished they're responsible for doing the cleanup and in this case rust inserts",
    "start": "1681720",
    "end": "1687399"
  },
  {
    "text": "that cleanup code for you um but that's when you say the when you say the person do you mean like the variable or the",
    "start": "1687399",
    "end": "1693000"
  },
  {
    "text": "thread or the variable sorry yeah this is a discussion that's hard to have over words it's like makes it a lot yeah it",
    "start": "1693000",
    "end": "1700120"
  },
  {
    "text": "is the way I think about is that the scope that created it so when you make a variable you you by definition have to create it inside of some scope in code",
    "start": "1700120",
    "end": "1707279"
  },
  {
    "text": "right that scope in code is the thing that's responsible for cleaning it up so if you make a variable and then don't do",
    "start": "1707279",
    "end": "1713880"
  },
  {
    "text": "anything else with that variable and then the scope of code that you created in uh is finished that variable will get",
    "start": "1713880",
    "end": "1719919"
  },
  {
    "text": "cleaned up um but you are allowed since you created it to give it to somebody else and if you give it to someone else",
    "start": "1719919",
    "end": "1725760"
  },
  {
    "text": "the same rule applies right it will uh it gets cleaned up when their scope of code is left and this turns it's a",
    "start": "1725760",
    "end": "1731480"
  },
  {
    "text": "recursive concept so it's sort of hard to see uh how effective it is but basically what that ends up meaning is",
    "start": "1731480",
    "end": "1737240"
  },
  {
    "text": "that if you look at any piece of code you can tell by looking at it whether or not",
    "start": "1737240",
    "end": "1742760"
  },
  {
    "text": "exactly which things that came into it will be uh cleaned up when you leave it because either you didn't give it to",
    "start": "1742760",
    "end": "1748760"
  },
  {
    "text": "somebody else or you did right those are the only options either you gave it you transferred ownership to somebody else or you didn't transfer ownership to somebody else and that's true at every",
    "start": "1748760",
    "end": "1755240"
  },
  {
    "text": "local point every local scope in the program so what's the process of transferring ownership like what's the",
    "start": "1755240",
    "end": "1761080"
  },
  {
    "text": "semantics around that so transferring ownership actually is is pretty cool um it's just the default way that you give",
    "start": "1761080",
    "end": "1766600"
  },
  {
    "text": "something to some else in Russ so if I write a function that says this is a function that takes like a string let's",
    "start": "1766600",
    "end": "1772159"
  },
  {
    "text": "say and I call that function with a string that is me transferring ownership and there's also the end operator in",
    "start": "1772159",
    "end": "1780120"
  },
  {
    "text": "Rust which is uh the reference how references are referred to in C or C++",
    "start": "1780120",
    "end": "1785320"
  },
  {
    "text": "if you use that then you're lending it so uh effectively the story The",
    "start": "1785320",
    "end": "1790360"
  },
  {
    "text": "transferring ownership is not like like a complicated API like a Channel or something like that transferring ownership is just done by Call calling a",
    "start": "1790360",
    "end": "1797640"
  },
  {
    "text": "function that tries to take ownership and the way you take ownership is that you take a you take a value without the",
    "start": "1797640",
    "end": "1803960"
  },
  {
    "text": "end and if you take a value with the m% then you uh you're basically just promising that you won't hang on to it",
    "start": "1803960",
    "end": "1810399"
  },
  {
    "text": "after the point at which you return right so so uh borrowing is kind of like borrowing with real things right so if I",
    "start": "1810399",
    "end": "1817360"
  },
  {
    "text": "transfer ownership I'm saying hey you have access to it now and you can do whatever you want and I don't care anymore lending is saying hey you I'm",
    "start": "1817360",
    "end": "1823399"
  },
  {
    "text": "lending you this thing but you got to give it back to me when you return you can't hang on to it later like in a closure or something like that there are",
    "start": "1823399",
    "end": "1829360"
  },
  {
    "text": "also mutability and immutability rules to make sure that there's no concurrency issues there too um just to like mention",
    "start": "1829360",
    "end": "1835760"
  },
  {
    "text": "that that's part of it as well yeah so m mutability is actually interesting because mutability and Ross is actually",
    "start": "1835760",
    "end": "1842279"
  },
  {
    "text": "a different concept of this and the whole mutability question is just the concept of uniqueness which is that only",
    "start": "1842279",
    "end": "1848039"
  },
  {
    "text": "one thing can mutate something at a time so uh if if I give you access to",
    "start": "1848039",
    "end": "1853279"
  },
  {
    "text": "something to mutate and I also give Steve access to something to mutate that's bad that means that you guys can write on top of each other and can't",
    "start": "1853279",
    "end": "1859519"
  },
  {
    "text": "have any expectations about what could happen you could crash right but I can give you access to something to mutate",
    "start": "1859519",
    "end": "1864639"
  },
  {
    "text": "and then later on give it to Steve to read or I can give all of you a copy of a thing to read and that's fine right I",
    "start": "1864639",
    "end": "1870799"
  },
  {
    "text": "just can't give I can't give somebody access to something to write and anybody else access to write or read at the same",
    "start": "1870799",
    "end": "1876240"
  },
  {
    "text": "time and that's also totally static the uh compiler figures out whether you're doing that or not and yells at you if",
    "start": "1876240",
    "end": "1883039"
  },
  {
    "text": "you're doing the wrong thing so this probably this probably lends itself pretty well into the concurrency story",
    "start": "1883039",
    "end": "1888440"
  },
  {
    "text": "Steve could you talk about that yeah so uh rust actually has a bunch of really interesting and unique concurrency uh",
    "start": "1888440",
    "end": "1895519"
  },
  {
    "text": "things just about it in general so the first one is that um the the question",
    "start": "1895519",
    "end": "1901120"
  },
  {
    "text": "that's on everybody's mind with regards to concurrency today is like what's your threading story do you have channels and",
    "start": "1901120",
    "end": "1906320"
  },
  {
    "text": "that kind of thing so what I mention is that uh originally well I shouldn't I'll",
    "start": "1906320",
    "end": "1911760"
  },
  {
    "text": "do it that way fine it's like you can always pick way to tell the story right so I'll give you a little bit of History",
    "start": "1911760",
    "end": "1917279"
  },
  {
    "text": "rust used to have both one to one and MTM threading built in and the problem",
    "start": "1917279",
    "end": "1922919"
  },
  {
    "text": "with that is that the abstraction layer that let you choose like you could basically say in your rust program this",
    "start": "1922919",
    "end": "1928279"
  },
  {
    "text": "rust program will use one to one threading or this one will use NM threading and it was an abstraction so you just you just pick so then that",
    "start": "1928279",
    "end": "1934600"
  },
  {
    "text": "overhead meant that green threads were not actually like significantly more lightweight than regular threads and",
    "start": "1934600",
    "end": "1940120"
  },
  {
    "text": "since rust is a systems programming language you need to have access to systems threads but like NTM threading",
    "start": "1940120",
    "end": "1945240"
  },
  {
    "text": "is a runtime kind of issue so we made the decision to switch to just one to one threading so by in Russ right as of",
    "start": "1945240",
    "end": "1952760"
  },
  {
    "text": "right now by default it's just got one to one threading built in now there's a whole bunch of like discussion you get",
    "start": "1952760",
    "end": "1958720"
  },
  {
    "text": "into around that for example like on Linux threads spawn a lot faster than you may have expected in the past and so",
    "start": "1958720",
    "end": "1964000"
  },
  {
    "text": "like it's not that NM is inherently Superior or inferior to one: one but we just got one: one right now you can",
    "start": "1964000",
    "end": "1969399"
  },
  {
    "text": "actually write NM threading as a library because rust is a low enough level programming language that IO is a library concern not really a language",
    "start": "1969399",
    "end": "1975960"
  },
  {
    "text": "concern so so um there's several people including uh one of people at um Tilda",
    "start": "1975960",
    "end": "1981919"
  },
  {
    "text": "who's like writing alternate IO libraries that give you other concurrency models Etc um but what's",
    "start": "1981919",
    "end": "1988760"
  },
  {
    "text": "important about rust concurrency is is that we have certain types built into the type system that have certain",
    "start": "1988760",
    "end": "1994159"
  },
  {
    "text": "concurrency properties and the standard Library uses those to ensure correctness which means that if you write an",
    "start": "1994159",
    "end": "2000159"
  },
  {
    "text": "alternate IO Library you can also gain the same level of safety with your concurrency that we do built into the",
    "start": "2000159",
    "end": "2006480"
  },
  {
    "text": "language so for example rust has a channel abstraction that's entirely written in library code and you can use channels if you'd like those channels",
    "start": "2006480",
    "end": "2012559"
  },
  {
    "text": "are great but if for some reason you don't like the way that we implemented channels so like our channels are uh",
    "start": "2012559",
    "end": "2018320"
  },
  {
    "text": "multi-rod single consumer channels if you wanted multi- producer multi-c consumer channels you would need to",
    "start": "2018320",
    "end": "2023840"
  },
  {
    "text": "write your own but because the channel is a library type and not built into the language you could get the same safety",
    "start": "2023840",
    "end": "2029120"
  },
  {
    "text": "guarantees around them uh that we have which is really really cool and the latest example of something that we did",
    "start": "2029120",
    "end": "2036120"
  },
  {
    "text": "uh is you you can actually I've been meaning to write a blog post about this don't have a good link for more explanation but at some point I'll have",
    "start": "2036120",
    "end": "2041919"
  },
  {
    "text": "something for you you can actually uh do mutable concurrency over stack allocated data and prove that it's safe and not",
    "start": "2041919",
    "end": "2049000"
  },
  {
    "text": "have uh race conditions in it which is well data races which Super impressive and really hard to explain without code",
    "start": "2049000",
    "end": "2055560"
  },
  {
    "text": "so I'll just like drop that as a thing uh like we have very strong very good safety guarantees around concurrency",
    "start": "2055560",
    "end": "2061960"
  },
  {
    "text": "that are really fantastic I'm sure you more to say yeah ultimately the the ownership story is basically exactly",
    "start": "2061960",
    "end": "2067800"
  },
  {
    "text": "what you want for for data right so typically I mean everyone knows that shared mutable state is the root of all",
    "start": "2067800",
    "end": "2073599"
  },
  {
    "text": "evil when it comes to concurrency and a lot of languages try to solve that by restricting your ability to have shared",
    "start": "2073599",
    "end": "2081200"
  },
  {
    "text": "state or mutable State and Ross basally says shared mutable state is indeed bad but shared state is fast and also often",
    "start": "2081200",
    "end": "2089520"
  },
  {
    "text": "very intuitive so what we're going to do is we're going to prevent we're going to use the ownership system to stop you from sharing and mutating at the same",
    "start": "2089520",
    "end": "2095878"
  },
  {
    "text": "time right so the ownership system with the same ownership system that you already learned for doing single-threaded programs is also perfect",
    "start": "2095879",
    "end": "2103480"
  },
  {
    "text": "for multi-threaded programs uh so if as long you can as Steve sort of alluded to",
    "start": "2103480",
    "end": "2109400"
  },
  {
    "text": "you can write a program that uh you know does a fork join model and as long as",
    "start": "2109400",
    "end": "2114839"
  },
  {
    "text": "all 10 of those things that are uh all all 10 of the things that are Fork that are forking uh only read the data that's",
    "start": "2114839",
    "end": "2121680"
  },
  {
    "text": "totally safe and the rust ownership system knows how to uh think about that um and if you want to",
    "start": "2121680",
    "end": "2127359"
  },
  {
    "text": "have a fork joint system where you have 10 things that are each mutating something as long as you don't give them",
    "start": "2127359",
    "end": "2132599"
  },
  {
    "text": "the same thing to mutate that's also fine right and so basically what rust said what rust s sort of the innovation",
    "start": "2132599",
    "end": "2138960"
  },
  {
    "text": "of rust is that rust has this really uh robust ownership story um ownership and",
    "start": "2138960",
    "end": "2144440"
  },
  {
    "text": "borrowing and ownership and borrowing is pretty awesome for reasoning about things it's awesome for performance it's awesome for letting you allocate things",
    "start": "2144440",
    "end": "2150920"
  },
  {
    "text": "in in the right place either the Heap or the stack whatever is appropriate but it's also really awesome for letting you do things on a lot of different threads",
    "start": "2150920",
    "end": "2157560"
  },
  {
    "text": "and not have to worry that those that those different threads are going to be stomping all over each other because things have things only own the things",
    "start": "2157560",
    "end": "2163880"
  },
  {
    "text": "that they they should own right and Ross already guarantees that you only have a unique owner one unique owner per thing",
    "start": "2163880",
    "end": "2169520"
  },
  {
    "text": "so that's that's basically perfect and the awesome thing is that this ownership system is not um it's not a dynamic",
    "start": "2169520",
    "end": "2176280"
  },
  {
    "text": "thing so like in JavaScript for example there is also an ownership system and you can pass things to another thread uh",
    "start": "2176280",
    "end": "2182160"
  },
  {
    "text": "and the other thread can do something with it and pass it back um but in JavaScript every single time you pass something around you have to do all",
    "start": "2182160",
    "end": "2188480"
  },
  {
    "text": "these Dynamic checks and that means that there's a lot of a lot of extra overhead to enforcing a pretty good a pretty good",
    "start": "2188480",
    "end": "2194960"
  },
  {
    "text": "rule right um and Russ because of the fact that the ownership system is entirely static the actual cost is no",
    "start": "2194960",
    "end": "2201720"
  },
  {
    "text": "different than doing shared memory concurrency in C or C++ but you have guarantees about what can happen because",
    "start": "2201720",
    "end": "2208040"
  },
  {
    "text": "of because of the underlying model so I think the tldr is just when you start learning Rus like the ownership system",
    "start": "2208040",
    "end": "2214040"
  },
  {
    "text": "feels pretty daunting but it turns out that it's effectively one concept that you have to learn and then it unlocks all these superpowers that let you write",
    "start": "2214040",
    "end": "2220760"
  },
  {
    "text": "really fast and complicated code safely it's also really just generally like you know everyone's terrified of writing",
    "start": "2220760",
    "end": "2227000"
  },
  {
    "text": "concurrent code because it's very difficult uh and rust makes many concurrency errors be compile time",
    "start": "2227000",
    "end": "2233560"
  },
  {
    "text": "errors which is just mind-blowing the first couple times that you see it for sure well let's take a break here we'll",
    "start": "2233560",
    "end": "2240640"
  },
  {
    "text": "hear from from another sponsor and then we get back I'm going to give you guys a chance to think during the sponsor break",
    "start": "2240640",
    "end": "2245720"
  },
  {
    "text": "uh what's your feature besides ownership and all that it implies We'll have each of you a chance to answer that question",
    "start": "2245720",
    "end": "2251599"
  },
  {
    "text": "when we get back over 400,000 developers have deployed to digital Ocean's Cloud",
    "start": "2251599",
    "end": "2258079"
  },
  {
    "text": "digital ocean is simple Cloud hosting built for developers in 55 seconds you have full route access to a Cloud Server",
    "start": "2258079",
    "end": "2264880"
  },
  {
    "text": "and it just doesn't get any ease than that pricing plans start out affordably at $5 a month for half gig of RAM 20",
    "start": "2264880",
    "end": "2272000"
  },
  {
    "text": "gigs of SSD drive space one CPU and 1 terab of transfer all All Digital ocean",
    "start": "2272000",
    "end": "2277359"
  },
  {
    "text": "servers run on blazing fast ssds with tier one bandwidth and come with private",
    "start": "2277359",
    "end": "2283000"
  },
  {
    "text": "networking use the promo code change log April to get a $10 hosting credit when",
    "start": "2283000",
    "end": "2288119"
  },
  {
    "text": "you sign up again change log April 10 bucks when you sign up new accounts only",
    "start": "2288119",
    "end": "2294359"
  },
  {
    "text": "head to digital ocean.com to get started and now back to the show all right we are back",
    "start": "2294359",
    "end": "2301760"
  },
  {
    "text": "Steve we've talked about ownership we've talked about how that kind of spreads its way through the whole system and get you lots of wins um the memory safety",
    "start": "2301760",
    "end": "2309440"
  },
  {
    "text": "stuff the security stuff surely there's other facets to rust what's another feature that is exciting to you yeah",
    "start": "2309440",
    "end": "2315720"
  },
  {
    "text": "there's tons of cool stuff that's the most unique ones that tends to be the one we talk about most often my personal",
    "start": "2315720",
    "end": "2320920"
  },
  {
    "text": "favorite pet feature that is other languages but the rust has a really interesting take on is closures so youa",
    "start": "2320920",
    "end": "2326839"
  },
  {
    "text": "alerted this a little bit earlier but uh rust actually has because the like ownership is still involved in closures",
    "start": "2326839",
    "end": "2332839"
  },
  {
    "text": "but like the point is is that because of that system rust closure implementation feels just like Ruby's closures so for",
    "start": "2332839",
    "end": "2339599"
  },
  {
    "text": "example like let's just talk about a classic example and see you have a for loop with an array and you want to add one thing to every element of the array",
    "start": "2339599",
    "end": "2345920"
  },
  {
    "text": "right so normally you're doing this like lowlevel like I equals zero i++ you know",
    "start": "2345920",
    "end": "2351880"
  },
  {
    "text": "all that kind of shenanigans to deal with this Loop managing overhead because you don't want to pay the cost of a full",
    "start": "2351880",
    "end": "2357520"
  },
  {
    "text": "closure and a function call and all that kind of stuff that's indirect um but due to lm's optimizations and the way that",
    "start": "2357520",
    "end": "2363440"
  },
  {
    "text": "you've implemented closures in Rust you wouldn't write a Loop like you would in C you write a for Loop like you would",
    "start": "2363440",
    "end": "2369400"
  },
  {
    "text": "well not a for Loop but you could write a for Loop in Ruby but you could also use an iterator as the most important part so the closure as an iterator",
    "start": "2369400",
    "end": "2376119"
  },
  {
    "text": "system ends up giving it a super high level feel but thanks to the implementation details we're actually",
    "start": "2376119",
    "end": "2381839"
  },
  {
    "text": "able to and an optimized build compiled to the same Assembly Language that you would get out of a for Loop um if you",
    "start": "2381839",
    "end": "2388520"
  },
  {
    "text": "were doing the low lever stuff so it like it gives you this really high level feel while still giving you lowle performance and so yeah to me closures",
    "start": "2388520",
    "end": "2395400"
  },
  {
    "text": "are like a super cool way and the way that they're implemented is is amazing and without it does that without having",
    "start": "2395400",
    "end": "2402400"
  },
  {
    "text": "the problem of like well I guess there there's a few different kinds of closures in Russ the is the short",
    "start": "2402400",
    "end": "2408119"
  },
  {
    "text": "version of what I'm saying but the the effect of that is that you can have a closure that basically does represent synchronous stuff and that does that",
    "start": "2408119",
    "end": "2415079"
  },
  {
    "text": "handles the ownership story it handles the borrowing story basically automatically you don't really have to think about what's exactly happening",
    "start": "2415079",
    "end": "2421280"
  },
  {
    "text": "with a closure like you might like you might expect from a lowlevel memory manag language could do things like oh",
    "start": "2421280",
    "end": "2427440"
  },
  {
    "text": "you didn't capture any variables in this closure so I'm just going to implement it as a regular function with no environment overhead and like stuff like",
    "start": "2427440",
    "end": "2433839"
  },
  {
    "text": "that which is really impressive I I think the point is that in like JavaScript the point I was trying to make is that in JavaScript a closure is",
    "start": "2433839",
    "end": "2440680"
  },
  {
    "text": "sometimes used for like a loop which can inline everything and just run it right now and sometimes it's used for like a",
    "start": "2440680",
    "end": "2446520"
  },
  {
    "text": "call back and those are basically the same thing in JavaScript so you can't it's hard to figure out what exactly is",
    "start": "2446520",
    "end": "2451720"
  },
  {
    "text": "going on in Rust you can tell you can tell ahead of time like this is a closure that's going going to be used",
    "start": "2451720",
    "end": "2456800"
  },
  {
    "text": "later it's going to be used on a thread later so the rules about ownership are more restrictive versus this is a this",
    "start": "2456800",
    "end": "2461920"
  },
  {
    "text": "is a closure that's running right now because it's a you know mapping over an array and that the rules about that are",
    "start": "2461920",
    "end": "2467040"
  },
  {
    "text": "much less restrictive you can basically do whatever you want in there so how do you know the difference do they just look different or context uh so sometime",
    "start": "2467040",
    "end": "2475319"
  },
  {
    "text": "a lot of it's inferred um some of it is that when you take a closure you can say like for example this is a closure that",
    "start": "2475319",
    "end": "2481240"
  },
  {
    "text": "will only run one time and if it's something's a closure that can only run one time that means you can transfer ownership into the closure now the",
    "start": "2481240",
    "end": "2487480"
  },
  {
    "text": "person who wrote the closure doesn't have to think about that the person who takes the closure has to say I'm only going to use this one time right so",
    "start": "2487480",
    "end": "2493680"
  },
  {
    "text": "there there's a few different uh kind flavors of closure um and they're mostly described at the at the person who's",
    "start": "2493680",
    "end": "2499920"
  },
  {
    "text": "taking them the person who's calling them just writes a regular closure like you would in Ruby and you get exactly the right set of ownership rules that",
    "start": "2499920",
    "end": "2506800"
  },
  {
    "text": "you would want awesome so uh we're going to move on to talk about some security stuff but",
    "start": "2506800",
    "end": "2512280"
  },
  {
    "text": "I'll just open the open the floor here anything else feature-wise that you guys are super EXC I one thing we didn't talk",
    "start": "2512280",
    "end": "2518280"
  },
  {
    "text": "about at all which is kind of mindblowing to me is the type system so",
    "start": "2518280",
    "end": "2523680"
  },
  {
    "text": "I I wrote a lot of Ruby and JavaScript for a long time I pretty much didn't write considerable amount of code with",
    "start": "2523680",
    "end": "2530079"
  },
  {
    "text": "types forever um I don't really like Javas type system at all the first few times I had to write Java it felt like",
    "start": "2530079",
    "end": "2536000"
  },
  {
    "text": "there was a lot of ceremony that's not to say Russ doesn't have ceremony of course of course any language of the",
    "start": "2536000",
    "end": "2541440"
  },
  {
    "text": "type system does but one thing that I really like about Russ type system is that it takes from a lot of sort of what",
    "start": "2541440",
    "end": "2547680"
  },
  {
    "text": "is well known about expressiveness to get to a point where and and this is still sort of a someday thing but you",
    "start": "2547680",
    "end": "2554480"
  },
  {
    "text": "can see a world where the expressiveness of what you can do with the rust type system is pretty close to the",
    "start": "2554480",
    "end": "2559880"
  },
  {
    "text": "expressiveness of what you can do with a dynamic language um while being totally uh safe and fast and my favorite example",
    "start": "2559880",
    "end": "2566800"
  },
  {
    "text": "of this is in a dynamic language when you write code that's polymorphic in other words let's say you take a",
    "start": "2566800",
    "end": "2572280"
  },
  {
    "text": "function you take something and you call two string on it that two string is just looked up at run time and it calls the",
    "start": "2572280",
    "end": "2578119"
  },
  {
    "text": "right to string that's what polymorphism is all about right um in Rust what you would do is you would say something like",
    "start": "2578119",
    "end": "2583880"
  },
  {
    "text": "I take a function that implements two string and so far that's not that interesting Java has that uh you know go",
    "start": "2583880",
    "end": "2589319"
  },
  {
    "text": "has interfaces but in Rust the normal way that you say I take a function that implements two string uh what that does",
    "start": "2589319",
    "end": "2595160"
  },
  {
    "text": "is every single time you call it it creates an optimized function that is optimized for the exact uh for the exact",
    "start": "2595160",
    "end": "2601319"
  },
  {
    "text": "type that you've called it with and so instead of it going and looking up at runtime and trying to find that two string function which has some cost and",
    "start": "2601319",
    "end": "2607760"
  },
  {
    "text": "also eliminates inlining right if you have to look something up at runtime you of course can't inline it uh in Rust you",
    "start": "2607760",
    "end": "2613680"
  },
  {
    "text": "you're getting a specialized version of that function for exactly the the thing that you called it with this called monomorph isation and what that means is",
    "start": "2613680",
    "end": "2620920"
  },
  {
    "text": "that not just that you avoid the overhead of going and finding the function but that you can inline and that's actually how uh Steve's trick",
    "start": "2620920",
    "end": "2627160"
  },
  {
    "text": "with calling map on an iterator and having that inline all the way to to to the right kind of assembler the way that",
    "start": "2627160",
    "end": "2632839"
  },
  {
    "text": "that works is that every step of the way you're actually calling Fun functions that are that are generic and they're",
    "start": "2632839",
    "end": "2638760"
  },
  {
    "text": "implemented in a way that's very easy to to write specialized versions so you write the specialized version but that now that you have a specialized version",
    "start": "2638760",
    "end": "2644800"
  },
  {
    "text": "you can apply other optimizations and by the time you're done writing running all the optimizations you have something that's as fast as writing it by hand",
    "start": "2644800",
    "end": "2651760"
  },
  {
    "text": "which is pretty okay one more point on security I know you know the whole point is safety plus speed I want to ask one",
    "start": "2651760",
    "end": "2658760"
  },
  {
    "text": "question about security and then we'll move on to some other stuff because we're uh we're cruising right along here",
    "start": "2658760",
    "end": "2664400"
  },
  {
    "text": "the whole point is that we can't shoot our in the foot with memory management is it a Panacea using rust can you just",
    "start": "2664400",
    "end": "2671599"
  },
  {
    "text": "feel 100% safe or can you still possibly you know write some code that's going to",
    "start": "2671599",
    "end": "2676880"
  },
  {
    "text": "be exploitable so not every error is a memory safety error right so R",
    "start": "2676880",
    "end": "2682440"
  },
  {
    "text": "definition of unsafe is very careful to talk about memory safety only and that means that like rust applications will",
    "start": "2682440",
    "end": "2688520"
  },
  {
    "text": "definitely invariably have security issues it's not perfect that said it does address the vast majority of",
    "start": "2688520",
    "end": "2694480"
  },
  {
    "text": "significant like terrif in secured errors because the biggest ones are usually memory safety related or that",
    "start": "2694480",
    "end": "2701040"
  },
  {
    "text": "means that means sefall right so like if you can seall then you are talking about a memory safety error right so that's a",
    "start": "2701040",
    "end": "2706800"
  },
  {
    "text": "very common way to get remote code execution is to have a seg fault and then you know or stack Overflow and like I kind of shenanigans and like it's just",
    "start": "2706800",
    "end": "2712800"
  },
  {
    "text": "you know that's not going to happen in R code um but there are other kinds of errors that can cause problems and you",
    "start": "2712800",
    "end": "2719200"
  },
  {
    "text": "know we don't we don't necessarily although we do try to help with that you know no nobody's",
    "start": "2719200",
    "end": "2724319"
  },
  {
    "text": "perfect right I mean think it's it's worth I think what Steve said is basically correct which is that rust",
    "start": "2724319",
    "end": "2730440"
  },
  {
    "text": "eliminates memory safety issues but I think it's easy to forget how important",
    "start": "2730440",
    "end": "2735559"
  },
  {
    "text": "that ends up being um so most people are used to writing in Ruby or JavaScript that in Ruby and JavaScript you simply",
    "start": "2735559",
    "end": "2741640"
  },
  {
    "text": "cannot SE fa unless there's a terrifying bug in your program and in Russ that is also true except that in Russ you're",
    "start": "2741640",
    "end": "2747880"
  },
  {
    "text": "stack allocating things and have direct control over memory and you don't have a GC and it's honestly like the first in",
    "start": "2747880",
    "end": "2755920"
  },
  {
    "text": "Until you realize like I just wrote a really complicated thing and it's impossible for the Segal and really think about that it's really hard to to",
    "start": "2755920",
    "end": "2763160"
  },
  {
    "text": "get it but I but I think it's it's it's saying something it's saying something that you can write something that is as",
    "start": "2763160",
    "end": "2769160"
  },
  {
    "text": "complicated as the program you wrote in Ruby you didn't have to write any Malik or free code and it get as F it's",
    "start": "2769160",
    "end": "2775800"
  },
  {
    "text": "basically as fast as well-written C++ code but can't can't second fall can't",
    "start": "2775800",
    "end": "2781319"
  },
  {
    "text": "crash can't have memory vulnerabilities can't add bounds error right this is",
    "start": "2781319",
    "end": "2787000"
  },
  {
    "text": "you have to like meditate on it to really get it but but just because it feels just because it feels so natural",
    "start": "2787000",
    "end": "2794800"
  },
  {
    "text": "when you're doing it it's like oh I'm used to writing Ruby code and I'm writing a closure of course I can like it doesn't feel weird except that the",
    "start": "2794800",
    "end": "2801200"
  },
  {
    "text": "thing that you're doing is actually quite weird like the effect is quite strange so you earlier in the call you'd",
    "start": "2801200",
    "end": "2808839"
  },
  {
    "text": "mentioned and I I know I've been silent for here for a bit I just know that a lot of this stuff is much deeper than I can go so I kind of been playing uh back",
    "start": "2808839",
    "end": "2816040"
  },
  {
    "text": "filter uh support but one thing you talked about which uh was pretty important you to mention was the the",
    "start": "2816040",
    "end": "2822440"
  },
  {
    "text": "idea of cargo what role that plays in to crates so you've got crates.io couple",
    "start": "2822440",
    "end": "2828559"
  },
  {
    "text": "different terms here for new users of rust what do crates what are crates and",
    "start": "2828559",
    "end": "2833839"
  },
  {
    "text": "what role does cargo play in that sure so um as people probably know I worked on the bundler package manager for Ruby",
    "start": "2833839",
    "end": "2840640"
  },
  {
    "text": "and the cargo package manager for rust and I think and I obviously use notes so",
    "start": "2840640",
    "end": "2846520"
  },
  {
    "text": "I'm familiar pretty familiar with npm and one thing that I think people may have under May underestimate if they're",
    "start": "2846520",
    "end": "2852000"
  },
  {
    "text": "not deeply involved in one of these ecosystems is how important getting a good package management story that makes",
    "start": "2852000",
    "end": "2857680"
  },
  {
    "text": "it easy to add dependencies has been I think bundler helped a lot if people",
    "start": "2857680",
    "end": "2862920"
  },
  {
    "text": "people who didn't use Ruby before bundler might forget how few dependencies there were relative to how",
    "start": "2862920",
    "end": "2868319"
  },
  {
    "text": "many many there are now and I mpm also sort of opened the door if you use any mpm project you probably have hundreds",
    "start": "2868319",
    "end": "2874400"
  },
  {
    "text": "and hundreds of dependencies I think in Ruby it's usually like 50 to 100 dependencies and that that's actually",
    "start": "2874400",
    "end": "2879720"
  },
  {
    "text": "somewhat extraordinary and so when I went to work on Rust one of the first things that I wanted was to make sure",
    "start": "2879720",
    "end": "2885400"
  },
  {
    "text": "that the ideas that came out of bundler and npm basically ideas that would make it easy to have a large a large",
    "start": "2885400",
    "end": "2891559"
  },
  {
    "text": "ecosystem of packages um and also to allow a lot of the Innovation to happen outside of the standard Library um",
    "start": "2891559",
    "end": "2898440"
  },
  {
    "text": "that's something that I cared a lot about and there's this is actually a thing that not everyone agrees with right there are programming languages I think Python and go are good examples of",
    "start": "2898440",
    "end": "2905079"
  },
  {
    "text": "this where they think it's really really important to have a rich batteries included standard library and most of the uh most of the core Innovation",
    "start": "2905079",
    "end": "2911640"
  },
  {
    "text": "happens in the standard library and one of the things I liked about rust when I got involved early on was even at that",
    "start": "2911640",
    "end": "2917480"
  },
  {
    "text": "point there was a there was a lot of interest in taking things that were hardcoded like the garbage collection type or um exactly how uh smart pointers",
    "start": "2917480",
    "end": "2925680"
  },
  {
    "text": "work and make them things that you could experiment with in in in the ecosystem right as libraries um so first that was",
    "start": "2925680",
    "end": "2932319"
  },
  {
    "text": "just making them libraries in Rust itself but by by having cargo and creates. a lot of the things that used",
    "start": "2932319",
    "end": "2938319"
  },
  {
    "text": "to be in the standard Library are still maintained by the core team but are now cargo packages and this is this is sort",
    "start": "2938319",
    "end": "2944119"
  },
  {
    "text": "of an idea that I think got in got explored by both bundler and npm and a",
    "start": "2944119",
    "end": "2950359"
  },
  {
    "text": "lot of other package managers that came out around that time and what was really awesome about working on cargo for me was that I got to say okay let's take a",
    "start": "2950359",
    "end": "2956760"
  },
  {
    "text": "look at sort of the effect of that like how did sver play to that sver turns out to be pretty important npm like adds the",
    "start": "2956760",
    "end": "2963559"
  },
  {
    "text": "idea of having duplication allowing you to have version 1.x of underscore and 2.x of underscore and having them both",
    "start": "2963559",
    "end": "2970240"
  },
  {
    "text": "work in the same program and rust allows you to do that so how can we how can we do that how can we do it without having",
    "start": "2970240",
    "end": "2975880"
  },
  {
    "text": "massive binary sizes where you have like 57 copies of the glob package in in your mpm projects right people who write uh",
    "start": "2975880",
    "end": "2983440"
  },
  {
    "text": "who write rust programs probably care about binary size you don't want Servo to be four gigabytes large right so um",
    "start": "2983440",
    "end": "2990240"
  },
  {
    "text": "what what's awesome for me about cargo is that it it was at least for me the first opportunity to really go start",
    "start": "2990240",
    "end": "2995359"
  },
  {
    "text": "from from scratch in building a package ecosystem that would take advantage of the fact that Russ itself is very good",
    "start": "2995359",
    "end": "3000839"
  },
  {
    "text": "at letting people do things in user space but also look at like how Russ how",
    "start": "3000839",
    "end": "3006079"
  },
  {
    "text": "sorry how bundler and npm uh made Community a thing uh also GitHub of",
    "start": "3006079",
    "end": "3011599"
  },
  {
    "text": "course right so like npm and bundler both came out around the time that GitHub was becoming popular but I got to",
    "start": "3011599",
    "end": "3017599"
  },
  {
    "text": "work on cargo after that was over after GitHub is already popular people know how GitHub Works um and and so I I think",
    "start": "3017599",
    "end": "3024599"
  },
  {
    "text": "people the way people should think about cargo um is that cargo is is basically",
    "start": "3024599",
    "end": "3029839"
  },
  {
    "text": "building on what we learned from the first generation after get up so it's like attempting to be a second generation after GitHub package manager",
    "start": "3029839",
    "end": "3037119"
  },
  {
    "text": "that is awesome and I think this is like for me this is like the big news about open source is that this works like you",
    "start": "3037119",
    "end": "3043319"
  },
  {
    "text": "can have a packet ecosystem you can have user land experimentation um and you can make you can make that work in the",
    "start": "3043319",
    "end": "3049040"
  },
  {
    "text": "context of a big a big ecosystem you know one thing that uh something you said there Yuda reminds me",
    "start": "3049040",
    "end": "3055839"
  },
  {
    "text": "back to 131 we had you and Tom on to talk about the road to Ember 2.0 was this that how you've learned from and I",
    "start": "3055839",
    "end": "3061880"
  },
  {
    "text": "think it just seems like common knowledge but you've learned from things that happened elsewhere in other communities that were done well and",
    "start": "3061880",
    "end": "3068839"
  },
  {
    "text": "implemented them in the current community that you're doing your working so in this case learning from GitHub learning from mpm in terms of a pack",
    "start": "3068839",
    "end": "3076240"
  },
  {
    "text": "package man the community the importance here in Rust um I just sort of made me",
    "start": "3076240",
    "end": "3081440"
  },
  {
    "text": "reference back to to that I'm just also wondering if we could expect the cargo ink uh no definitely no cargo Inc um but I",
    "start": "3081440",
    "end": "3090520"
  },
  {
    "text": "think I think it's interesting that so dhh A long time ago had a blog post that said why there is no rails Inc and",
    "start": "3090520",
    "end": "3096359"
  },
  {
    "text": "that's still like I never actually printed it out and put it on my wall but I kind of want to print it out and put on my wall um about open source we do",
    "start": "3096359",
    "end": "3103319"
  },
  {
    "text": "too yeah we go back to that one so that's like really like really important to me but when rails was first coming",
    "start": "3103319",
    "end": "3109880"
  },
  {
    "text": "out it actually wasn't entirely clear how collaboration across the ecosystem was supposed to work like it's one thing",
    "start": "3109880",
    "end": "3116000"
  },
  {
    "text": "to have like GitHub is awesome GitHub lets people collaborate but dependencies are a real thing right if you can't have",
    "start": "3116000",
    "end": "3122079"
  },
  {
    "text": "uh if you can't have a thing that depends on something that depends on something else that depend on something else you can't actually build that high",
    "start": "3122079",
    "end": "3127760"
  },
  {
    "text": "and so uh between all the things that happened over the past five years we've gone from",
    "start": "3127760",
    "end": "3133599"
  },
  {
    "text": "when I started doing open source where it was like a huge project to add a dependency so certainly adding a",
    "start": "3133599",
    "end": "3138839"
  },
  {
    "text": "dependency of a dependency was was almost intractable and then a dependency of a dependency of a dependency was",
    "start": "3138839",
    "end": "3144280"
  },
  {
    "text": "basically like no literally nobody ever did that in the in the open source communities that I was part of to now",
    "start": "3144280",
    "end": "3149920"
  },
  {
    "text": "where it's sort of it's the way it works right you expect to be able to build large stacks of us line distractions you",
    "start": "3149920",
    "end": "3155319"
  },
  {
    "text": "expect to not need batteries included in the core you expect the core to stay small and Nimble and focus on",
    "start": "3155319",
    "end": "3160760"
  },
  {
    "text": "capabilities um this is also like the extensive web Manifesto is trying to make that the way the web works and this",
    "start": "3160760",
    "end": "3166920"
  },
  {
    "text": "is like I think it's kind of like to me the singularity right it's like figuring out that you can totally change the",
    "start": "3166920",
    "end": "3172839"
  },
  {
    "text": "shape of iteration iteration is not just uh like you can change the speed of iteration by making people work faster",
    "start": "3172839",
    "end": "3178480"
  },
  {
    "text": "but you can only change the shape of iteration if the actual process of iteration changes and in in our case",
    "start": "3178480",
    "end": "3184839"
  },
  {
    "text": "having dependencies of dependencies of dependencies making it so that anybody can work collaboratively work together",
    "start": "3184839",
    "end": "3190599"
  },
  {
    "text": "like the shape of iteration has changed significantly and it's making things go much faster that's awesome so I was",
    "start": "3190599",
    "end": "3195680"
  },
  {
    "text": "happy to be able to make that a part of Russ because I think R like for me like the mind the most mind-blowing thing",
    "start": "3195680",
    "end": "3201200"
  },
  {
    "text": "about Russ which we didn't talk about it at all is the fact that you can have a browser like web browser Servo that is",
    "start": "3201200",
    "end": "3207040"
  },
  {
    "text": "built using a the library package manager like the languages package manager you the way you build servos is",
    "start": "3207040",
    "end": "3212400"
  },
  {
    "text": "you download you get Clon and then you run cargo build and that's like the way you build anything else and like what",
    "start": "3212400",
    "end": "3218680"
  },
  {
    "text": "does that mean it means that they extract all kinds of stuff from inside of Servo their en coding Library their image processing these are all just off",
    "start": "3218680",
    "end": "3225240"
  },
  {
    "text": "the shelf libraries that anyone can use for their own projects and they're all built together put together using the same approach and that like that's new",
    "start": "3225240",
    "end": "3232079"
  },
  {
    "text": "like C++ doesn't have that c doesn't have that it's like a totally new thing so I guess fast forwarding a little bit",
    "start": "3232079",
    "end": "3237920"
  },
  {
    "text": "to today a great day today April 3rd this is from the court team the whole entire R Court team so there is no by",
    "start": "3237920",
    "end": "3244200"
  },
  {
    "text": "line that says Steve wrote this Yehuda wrote this or someone else wrote this a",
    "start": "3244200",
    "end": "3249440"
  },
  {
    "text": "great announcement today Russ 1.0 beta um what does it mean I guess you got 172",
    "start": "3249440",
    "end": "3254559"
  },
  {
    "text": "contributors for this release what does it mean for the community to have 1.0 here what does it mean to when you put",
    "start": "3254559",
    "end": "3260920"
  },
  {
    "text": "the label beta on there in terms of what's out there now and how it can be used so the big step here is that",
    "start": "3260920",
    "end": "3266760"
  },
  {
    "text": "historically speaking we've only had one release of the compiler and that's nightly every night a new compiler comes",
    "start": "3266760",
    "end": "3272200"
  },
  {
    "text": "out um with today's release beta there's now two versions of the compiler the nightly version which continues to be",
    "start": "3272200",
    "end": "3278520"
  },
  {
    "text": "put out every night and then the beta version which was released today tomorrow there will be a new nightly but",
    "start": "3278520",
    "end": "3283799"
  },
  {
    "text": "there will probably not be a new beta um and so the way that this works is uh six",
    "start": "3283799",
    "end": "3289760"
  },
  {
    "text": "weeks from now probably probably there's some there's some I want to handwave slightly you know if we find something catastrophic we fixed it immediately or",
    "start": "3289760",
    "end": "3296200"
  },
  {
    "text": "whatever but the idea is that six weeks from today there will be a release of one R 1.0 final and so what happens at",
    "start": "3296200",
    "end": "3304040"
  },
  {
    "text": "that point is the beta becomes the final and the nightly on that night becomes the new beta so so like nightly turns",
    "start": "3304040",
    "end": "3311280"
  },
  {
    "text": "along every single night and then every six weeks we have a a new release of the like pre- testing branch and then the",
    "start": "3311280",
    "end": "3317200"
  },
  {
    "text": "actual release branch and so uh that's the first thing is this is the first step towards those kind of like train",
    "start": "3317200",
    "end": "3322559"
  },
  {
    "text": "model which was originally pioneered by you know Chrome and Firefox and is also used an ember um but the other thing",
    "start": "3322559",
    "end": "3329440"
  },
  {
    "text": "that's a side effect of that is the beta Channel comes with stability guarantees which we have never ever guaranteed",
    "start": "3329440",
    "end": "3336520"
  },
  {
    "text": "basically any kind of stability whatsoever over the eight years of rust's development and so that's like",
    "start": "3336520",
    "end": "3342480"
  },
  {
    "text": "the big major change is is that we're saying we still may change some small things but basically this is",
    "start": "3342480",
    "end": "3350079"
  },
  {
    "text": "representative of the actual 1.0 final release which will have total backwards well total may be a little strong but",
    "start": "3350079",
    "end": "3356359"
  },
  {
    "text": "like Drop in replacement like 1.1 should be a drop in replacement for 1.0 so we're offering very strong backwards",
    "start": "3356359",
    "end": "3362720"
  },
  {
    "text": "compatiability guarantees in the future I I think one way to think about it is that 1.0 beta is actually not different",
    "start": "3362720",
    "end": "3368160"
  },
  {
    "text": "from 1.1 beta or 1.2 beta or 1.3 beta and that for people who are not familiar Steve talked about this but this is",
    "start": "3368160",
    "end": "3374839"
  },
  {
    "text": "basically how browsers work and in my view this is the future like Ember does it now Russ does it in my view this is",
    "start": "3374839",
    "end": "3380440"
  },
  {
    "text": "this is how you should do it how you should I'll doing it for all my projects in the future it's awesome so but the",
    "start": "3380440",
    "end": "3385880"
  },
  {
    "text": "the basic idea that there's uh you ship every six weeks but you also ship a staggered Beta release and that Beta",
    "start": "3385880",
    "end": "3392280"
  },
  {
    "text": "release is extremely stable it's only the features that have been approved that are actually ready to go and you're just getting some feedback you have",
    "start": "3392280",
    "end": "3398680"
  },
  {
    "text": "these you have nightly that people can subscribe to and and the really awesome thing for me about all this stuff is",
    "start": "3398680",
    "end": "3403880"
  },
  {
    "text": "that it lets people subscribe to a channel that is appropriate for their level of stability uh Reliance right so",
    "start": "3403880",
    "end": "3410799"
  },
  {
    "text": "some people might be unwilling to ever have instability they need to just keep rolling and those most people should just use the the release channel right",
    "start": "3410799",
    "end": "3417920"
  },
  {
    "text": "but some people want the new features as soon as they're basically ready maybe there's not they're not stability guaranteed yet but they're basically",
    "start": "3417920",
    "end": "3423760"
  },
  {
    "text": "ready those people should use the beta Channel and some people really want to be bleeding edge those people to use the nightly Channel and the thing that's",
    "start": "3423760",
    "end": "3429520"
  },
  {
    "text": "awesome about this is that it doesn't you can the the core team itself just does all their work on Master right so",
    "start": "3429520",
    "end": "3434760"
  },
  {
    "text": "this we it used to be that this sort of trade-off between how stable unstable you need to be was the decision that you",
    "start": "3434760",
    "end": "3440880"
  },
  {
    "text": "have to finally tune you have to finally hone as a coure team to figure out what exactly to do and the Real Genius of the",
    "start": "3440880",
    "end": "3447599"
  },
  {
    "text": "Chrome uh model which is what started this all is that it lets people self- select into a stability set that they",
    "start": "3447599",
    "end": "3454319"
  },
  {
    "text": "want if someone uses nightly they can't complain if things broke that's what they signed up for right but if someone uses stable you know that they really",
    "start": "3454319",
    "end": "3461039"
  },
  {
    "text": "care about stability um and that's something that as a person worked who's worked on a lot of Open Source like being able to know that people have",
    "start": "3461039",
    "end": "3467799"
  },
  {
    "text": "signed up for the thing that they're getting is pretty mindblowing it's pretty awesome on uh on that note on the six",
    "start": "3467799",
    "end": "3474599"
  },
  {
    "text": "week release cycle I think it's been only couple weeks about 3 weeks it seems maybe two weeks since you tweeted about",
    "start": "3474599",
    "end": "3480760"
  },
  {
    "text": "it and then to your discourse for Ember uh a question was posed is the six week",
    "start": "3480760",
    "end": "3485880"
  },
  {
    "text": "six weeks release cycle to frequent what's been some of the feedback from the community and I guess some of the",
    "start": "3485880",
    "end": "3491839"
  },
  {
    "text": "core contributors to Ember and how I guess it might play here to rust and then as Steve said every project he'll",
    "start": "3491839",
    "end": "3497720"
  },
  {
    "text": "ever do yeah so it's actually really interesting because the thing that's kind of funny about the six we release",
    "start": "3497720",
    "end": "3502760"
  },
  {
    "text": "cycle so six weeks is not very long the idea behind six we the six we",
    "start": "3502760",
    "end": "3507839"
  },
  {
    "text": "release cycle is that unless you've done something catastrophically wrong uh people can just keep upgrading every",
    "start": "3507839",
    "end": "3514160"
  },
  {
    "text": "release so every you know every six weeks people can spend a few hours at most an upgrade I say a few hours",
    "start": "3514160",
    "end": "3520280"
  },
  {
    "text": "because in JavaScript the D dynamism means that people accidentally rely on private apis all the time but in general",
    "start": "3520280",
    "end": "3526559"
  },
  {
    "text": "that's like a short quick update people can just like schedule as part of their Sprint and be happy and that's that's",
    "start": "3526559",
    "end": "3532960"
  },
  {
    "text": "something that has actually worked out pretty well for Ember I would say even on that thread most people said it's awesome I basically just upgrade it's",
    "start": "3532960",
    "end": "3539119"
  },
  {
    "text": "fine yeah um the thing that's kind of unfortunate about it is that that does",
    "start": "3539119",
    "end": "3544520"
  },
  {
    "text": "mean that if you're a person who can't upgrade every release there isn't really any good guidance for you about what",
    "start": "3544520",
    "end": "3550119"
  },
  {
    "text": "else might be a good process right so if you don't if you can't schedule every six weeks of do an upgrade or if you",
    "start": "3550119",
    "end": "3555440"
  },
  {
    "text": "have very very extreme stability requirements or if you're using unstable features you know you're doing private stuff or you're building an add-on that",
    "start": "3555440",
    "end": "3561880"
  },
  {
    "text": "does private stuff right it may not be so obvious to you what the right story is so I I think probably what we're",
    "start": "3561880",
    "end": "3567359"
  },
  {
    "text": "going to do and this is something we just talked about in the court team meeting today um I think probably what we're going to do is we're going to",
    "start": "3567359",
    "end": "3573760"
  },
  {
    "text": "create a release every four releases or so so that would be like twice a year and that release is a release that we",
    "start": "3573760",
    "end": "3580359"
  },
  {
    "text": "say is going to be stable now it's a little funny because all of our releases are stable we follow sver right so all",
    "start": "3580359",
    "end": "3585760"
  },
  {
    "text": "our releases are stable so really all we're saying is if you're like this is a good release for you to stick on we'll",
    "start": "3585760",
    "end": "3591960"
  },
  {
    "text": "maintain backwards compatibility well we'll continue to do security patches to that release uh for a while and um",
    "start": "3591960",
    "end": "3599160"
  },
  {
    "text": "perhaps the most interesting one and this may or may not end up being important in Rust is we have a policy in Ember that any private API that's",
    "start": "3599160",
    "end": "3606000"
  },
  {
    "text": "heavily used if it turns out that we have to change it we don't just change it off the bat we do a two-step deprecation right so we do deprecation",
    "start": "3606000",
    "end": "3612400"
  },
  {
    "text": "in One release and then in the next release we'll remove it just so that people know that we're going to do that and so maybe one thing that we'll do",
    "start": "3612400",
    "end": "3618440"
  },
  {
    "text": "with the with this uh more long-term release process is we'll say we won't remove something until the has crossed",
    "start": "3618440",
    "end": "3625359"
  },
  {
    "text": "over one of these kind of Cycles but sort of the funny thing is and this is the conversation we had in the cour te",
    "start": "3625359",
    "end": "3630680"
  },
  {
    "text": "meeting today was everyone was like I don't really see how this is significantly different from what we're doing right now and my point to them was",
    "start": "3630680",
    "end": "3637359"
  },
  {
    "text": "it's not significantly different it's just a way of telling people it's a way of being clear to people that what we're",
    "start": "3637359",
    "end": "3642799"
  },
  {
    "text": "doing right now enables this style of of updating whatever you want people are so used to the idea that an upgrade is who",
    "start": "3642799",
    "end": "3649000"
  },
  {
    "text": "knows how long it's who knows how complicated who knows how messy that the idea of upgrading every six weeks seems",
    "start": "3649000",
    "end": "3654200"
  },
  {
    "text": "crazy so all we're really going to probably be saying with this process is you know we'll give you a rolled up change log which is pretty easy and we",
    "start": "3654200",
    "end": "3662319"
  },
  {
    "text": "we it is actually safe to do this which was it was already true but we weren't saying it right it's foring the the",
    "start": "3662319",
    "end": "3669039"
  },
  {
    "text": "existing processes to make them more foundational and explanatory to the",
    "start": "3669039",
    "end": "3674119"
  },
  {
    "text": "community trying to prop themselves up around Ember and then how's it as this same six week release cycle plays into",
    "start": "3674119",
    "end": "3680480"
  },
  {
    "text": "rust and and any other uh project that sort of picks this up I can see that definitely how that's you know just",
    "start": "3680480",
    "end": "3686880"
  },
  {
    "text": "formalizing what's already in place what's pretty awesome about Russ I think Russ may have less trouble because Russ",
    "start": "3686880",
    "end": "3692480"
  },
  {
    "text": "is has such strong typing I suspect that some of the kinds of issues that we've",
    "start": "3692480",
    "end": "3697680"
  },
  {
    "text": "seen with Ember where people end up using private apis and we end up getting stuck I suspect those will happen less",
    "start": "3697680",
    "end": "3703079"
  },
  {
    "text": "where just because if you break something things don't compile so you find out very fast like the canary build",
    "start": "3703079",
    "end": "3708920"
  },
  {
    "text": "will it won't be like people will limp along it will fail to compile and then it's not easy to go in and you know poke",
    "start": "3708920",
    "end": "3714559"
  },
  {
    "text": "in at the internals of something somebody doesn't want you to poke in at so I my hypothesis is that the kinds of",
    "start": "3714559",
    "end": "3721119"
  },
  {
    "text": "deprecations that we have to do in Ember of private features will be fewer and more far between in Rust than they were",
    "start": "3721119",
    "end": "3726599"
  },
  {
    "text": "in Ember well if I if you're listening now stay excited because we're going to take",
    "start": "3726599",
    "end": "3731640"
  },
  {
    "text": "a quick break uh we're going to rewind a little bit and kind of go maybe to newb",
    "start": "3731640",
    "end": "3736799"
  },
  {
    "text": "level talk about getting started those who are just picking up rust and then we're going to hypothesize a little bit",
    "start": "3736799",
    "end": "3742160"
  },
  {
    "text": "about the future Steve's got uh something particular wants to talk about um let's take a quick break to listen do a sponsor we'll come right",
    "start": "3742160",
    "end": "3748880"
  },
  {
    "text": "back Today's Show is sponsored by app quality bundle if you haven't heard of this yet you got to check it out it's a",
    "start": "3748880",
    "end": "3755400"
  },
  {
    "text": "Time limited deeply discounted bundle of web services for building better mobile",
    "start": "3755400",
    "end": "3760720"
  },
  {
    "text": "and desktop apps this offer for this expires on April 15th 2015 so if it's",
    "start": "3760720",
    "end": "3767760"
  },
  {
    "text": "after that date and you're listening to this it's too late there's a time limit to buy but not a time limit to use use",
    "start": "3767760",
    "end": "3775119"
  },
  {
    "text": "what do you get well first off you're going to save 89% on a year of Sentry",
    "start": "3775119",
    "end": "3780359"
  },
  {
    "text": "run scope code climate Circle CI and ghost inspector when combined together",
    "start": "3780359",
    "end": "3787000"
  },
  {
    "text": "each of those Services give you complete app quality coverage from Mobile to web and here's the best part what would",
    "start": "3787000",
    "end": "3792839"
  },
  {
    "text": "normally cost you well over $9,000 you're going to get for",
    "start": "3792839",
    "end": "3797960"
  },
  {
    "text": "$999 that's an 89% huge savings beyond the deeply discounted price once you",
    "start": "3797960",
    "end": "3803839"
  },
  {
    "text": "purchase it won't expire this is perfect for new projects projects that are",
    "start": "3803839",
    "end": "3809359"
  },
  {
    "text": "growing up and need end to end quality coverage from mobile web or for development shops taking care of clients",
    "start": "3809359",
    "end": "3815440"
  },
  {
    "text": "and their services so there's only really one cave yet to mention and this that is strictly for new accounts only",
    "start": "3815440",
    "end": "3821359"
  },
  {
    "text": "there might be some exceptions to this rule but you'll have to check the fine print or get in touch with them if you",
    "start": "3821359",
    "end": "3827160"
  },
  {
    "text": "got a specific question check it out at build better. software that's right",
    "start": "3827160",
    "end": "3832359"
  },
  {
    "text": "build better. software now back back to the show all right we're back uh getting",
    "start": "3832359",
    "end": "3838880"
  },
  {
    "text": "started um I've got some ideas on where people might get started cuz you know I can Google right but Steve where where",
    "start": "3838880",
    "end": "3844760"
  },
  {
    "text": "should we pick this up at you got pretty neat idea on maybe this could be where this can begin yeah so this is sort of a",
    "start": "3844760",
    "end": "3850400"
  },
  {
    "text": "segue from the last uh chunk that we were talking about and then I will give you an exact link but uh one of the",
    "start": "3850400",
    "end": "3855520"
  },
  {
    "text": "things that Russ is doing and that I think you and I are both trying to do with rust is to bring a lot of the concepts that web programmers are used",
    "start": "3855520",
    "end": "3862359"
  },
  {
    "text": "to doing into this space systems programming that no one has done before and Yuda gave this talk at goo which I",
    "start": "3862359",
    "end": "3868960"
  },
  {
    "text": "really thought was really fantastic and has something that matters for this getting started aspect so I know a lot of the people that listen to change log",
    "start": "3868960",
    "end": "3874680"
  },
  {
    "text": "and a lot of the people that like follow me on Twitter are Dynamic language programmers that have never done compiled statically typed languages",
    "start": "3874680",
    "end": "3880760"
  },
  {
    "text": "before they've never done low-level programming before and so there's this really interesting comparison between",
    "start": "3880760",
    "end": "3886079"
  },
  {
    "text": "what node did and what I hope rust does for systems so one of the things that node enabled was an entire generation of",
    "start": "3886079",
    "end": "3892680"
  },
  {
    "text": "programmers who had only ever been front-end devs quote unquote they' only done a little bit of jQuery and it",
    "start": "3892680",
    "end": "3898160"
  },
  {
    "text": "enabled them to write backend code and that was like a new superpower for them like this whole group of people now have",
    "start": "3898160",
    "end": "3904520"
  },
  {
    "text": "this ability to do this brand new thing in Computing and we've seen a ton of really fantastic things sort of fall out of that um with these new people getting",
    "start": "3904520",
    "end": "3911440"
  },
  {
    "text": "excited and so what I'm hoping is that if you've never done systems programming before that rust will be able to help",
    "start": "3911440",
    "end": "3918279"
  },
  {
    "text": "ease you into doing this kind of low-l programming and so I don't have all these resources in place yet but one of",
    "start": "3918279",
    "end": "3923960"
  },
  {
    "text": "the things that's going to be important for the future of rust and that I hope to get done in the next six weeks is to actually have documentation specifically",
    "start": "3923960",
    "end": "3931319"
  },
  {
    "text": "around uh you've never been a systems programmer before let's teach you systems programming as well as rust and",
    "start": "3931319",
    "end": "3937799"
  },
  {
    "text": "then you know not just oh you already are a super hard core C++ hacker here is what you need to know about how rust",
    "start": "3937799",
    "end": "3943079"
  },
  {
    "text": "works and so I think that's a really important thing one thing that you can bet will happen is the exact same thing",
    "start": "3943079",
    "end": "3948200"
  },
  {
    "text": "that happened with node which is that there's all these people out there who are already systems programmers just like there were all these people who are",
    "start": "3948200",
    "end": "3953559"
  },
  {
    "text": "already back in programmers and they didn't get the enabling power of node and so people you'll hear people say I",
    "start": "3953559",
    "end": "3959680"
  },
  {
    "text": "don't understand why Russ is so important I could do all this stuff with C++ like look at my C++ code I'm already doing all the things Russ already does",
    "start": "3959680",
    "end": "3966039"
  },
  {
    "text": "and those people will be missing the point they'll be missing the point that Russ is enabling people who previously Couldn't Write C++ to write C++ it's not",
    "start": "3966039",
    "end": "3973039"
  },
  {
    "text": "I mean it will help people who uh who want to as you did before right and it",
    "start": "3973039",
    "end": "3978079"
  },
  {
    "text": "will help people who unlike node I think it actually is genuinely uh an",
    "start": "3978079",
    "end": "3983279"
  },
  {
    "text": "improvement for plus plus writers pretty much strictly a strict Improvement but I",
    "start": "3983279",
    "end": "3988760"
  },
  {
    "text": "but I think people will miss the point you will you can expect that people will miss the point because this is the story of enabling Technologies anytime there's",
    "start": "3988760",
    "end": "3994279"
  },
  {
    "text": "a technology that enables a group of people who weren't good at something to do something other people are already doing the people who are already doing",
    "start": "3994279",
    "end": "4000359"
  },
  {
    "text": "it say I don't see the point of this this seems pointless and something like do you really want all these people coming in and for me the answer is",
    "start": "4000359",
    "end": "4006599"
  },
  {
    "text": "always yes I always want all these people who felt intimidated by technology to go in and actually have",
    "start": "4006599",
    "end": "4011720"
  },
  {
    "text": "the power to do the right thing or have the power to do things with it and that's something that I've already seen",
    "start": "4011720",
    "end": "4017240"
  },
  {
    "text": "happen for myself with Russ and I expect to see it with a a bigger group so on that on that angle the getting started",
    "start": "4017240",
    "end": "4023119"
  },
  {
    "text": "thing so the what's uh the best place to get started and of course I have slight amount of bias in this is uh we actually",
    "start": "4023119",
    "end": "4030000"
  },
  {
    "text": "have a large amount of documentation on the r website uh that I call the book or the rust programming language and so",
    "start": "4030000",
    "end": "4036440"
  },
  {
    "text": "this is what my baby uh that's what I work on the most of the time so you wrote this this is yours I mean other",
    "start": "4036440",
    "end": "4042000"
  },
  {
    "text": "people else I have the vast majority of the work I was trying to figure it out cuz that was one of the first on my list",
    "start": "4042000",
    "end": "4047599"
  },
  {
    "text": "of getting started like I found this and I found a few other things but I was very impressed by the organization uh",
    "start": "4047599",
    "end": "4053880"
  },
  {
    "text": "and also the writing behind this so thank you uh so one of the things that uh is it's still you know maybe by the",
    "start": "4053880",
    "end": "4059359"
  },
  {
    "text": "time the show gets actually published I'll have a little bit of these things in place but uh I want you to be able to start reading this and they'll give you",
    "start": "4059359",
    "end": "4065480"
  },
  {
    "text": "a little project that you'll build together um so right now it sort of takes a syntactical approach of like",
    "start": "4065480",
    "end": "4071079"
  },
  {
    "text": "explaining the syntax of rust and it'll get you started with those basics um but due to some Shenanigans um I pulled the",
    "start": "4071079",
    "end": "4076920"
  },
  {
    "text": "project that used to be there and I have a better one um that's going to be a tutorial that's coming out and so that will uh hopefully be a nice way to get",
    "start": "4076920",
    "end": "4083160"
  },
  {
    "text": "started if you don't know what you want to write in Rust um so yeah the book is the most up-to-date and comprehensive",
    "start": "4083160",
    "end": "4088680"
  },
  {
    "text": "documentation that we have part of the reason why it's up to date is that the documentation tools we have actually run",
    "start": "4088680",
    "end": "4094319"
  },
  {
    "text": "the code in the documentation as a test so if something in the compiler changes",
    "start": "4094319",
    "end": "4099679"
  },
  {
    "text": "uh it will actually break the documentation um and so it's been kept up to date Sheely because commits don't",
    "start": "4099679",
    "end": "4105640"
  },
  {
    "text": "pass unless it is also up to dat uh so um there's of course one or two areas",
    "start": "4105640",
    "end": "4110920"
  },
  {
    "text": "where that's not true it's that a hand wve yada y but it's generally speaking the most correct and upto-date documentation there's also another",
    "start": "4110920",
    "end": "4117520"
  },
  {
    "text": "project that we uh have it's rust by example.com this is originally written by a Community member and then it was",
    "start": "4117520",
    "end": "4123199"
  },
  {
    "text": "sort of donated to the r core team when he decided he didn't want to work on it anymore and it's more of a like small",
    "start": "4123199",
    "end": "4128679"
  },
  {
    "text": "Snippets of code like a top us kind of like approach um and I frankly need to",
    "start": "4128679",
    "end": "4134400"
  },
  {
    "text": "give it a little more love but it's still pretty good and I make sure every night I have a build that tested against nightly and I make sure that it's been",
    "start": "4134400",
    "end": "4140880"
  },
  {
    "text": "up to date so those two resources are the big primary ones uh and the ones that are most accurate unfortunately",
    "start": "4140880",
    "end": "4146640"
  },
  {
    "text": "when you're trying to go towards a release there's always those last minute changes you're sort of sneaking in the",
    "start": "4146640",
    "end": "4151838"
  },
  {
    "text": "last two weeks I've seen a bunch of breaking changes that means that and also over the alpha period there were a",
    "start": "4151839",
    "end": "4156960"
  },
  {
    "text": "bunch of changes that have made a lot of the other documentation that exists on the web kind of obsolete you'll need a",
    "start": "4156960",
    "end": "4162480"
  },
  {
    "text": "little bit of handholding to go with those um but another great resource for Learners is the IRC channel that we have",
    "start": "4162480",
    "end": "4168318"
  },
  {
    "text": "in uh hashtag rust pound rust I guess in the in the old old terms oh man wow I",
    "start": "4168319",
    "end": "4173880"
  },
  {
    "text": "just betrayed Myself by saying hasht um using too much Twitter but the point is is that uh the the rust chat",
    "start": "4173880",
    "end": "4181560"
  },
  {
    "text": "room is a wonderful welcoming friendly place for people to ask even the most basic questions about rust um if people",
    "start": "4181560",
    "end": "4188560"
  },
  {
    "text": "are jerks I will kick them um basically we're encouraging people like I I want",
    "start": "4188560",
    "end": "4193798"
  },
  {
    "text": "people to feel comfortable absolutely asking any question whatsoever and we have a ton of really great people that are around that will help um if you get",
    "start": "4193799",
    "end": "4200480"
  },
  {
    "text": "stuck so if you do use a bit of documentation or like a blog post that's a little out of date oftentimes jumping",
    "start": "4200480",
    "end": "4206440"
  },
  {
    "text": "on IRC someone can tell you oh yeah you just need to tweak the name of that function or like oh this changed that",
    "start": "4206440",
    "end": "4211480"
  },
  {
    "text": "type or something like that and so those um that's also a really fantastic resource for like up to theate uh things",
    "start": "4211480",
    "end": "4218719"
  },
  {
    "text": "hopefully now that beta is released we'll start having more broad Community initiatives that are actually uh you",
    "start": "4218719",
    "end": "4223840"
  },
  {
    "text": "know accurate um but a lot of people understandably have been sort of holding off on their projects until this stable",
    "start": "4223840",
    "end": "4229239"
  },
  {
    "text": "thing actually happen so aside from aside from RC uh do you have a discourse",
    "start": "4229239",
    "end": "4235520"
  },
  {
    "text": "I know that something else that surface was the subreddit on uh for R Us it seemed like that was at least a place",
    "start": "4235520",
    "end": "4240640"
  },
  {
    "text": "where there's a lot of interaction and maybe even where new announcements are happening the for example the beta is mentioned there which was submitted by",
    "start": "4240640",
    "end": "4246960"
  },
  {
    "text": "you Steve yeah yeah so uh we have two official forums uh they're both discourse instances uh one is at users.",
    "start": "4246960",
    "end": "4253640"
  },
  {
    "text": "rust l.org and that's intended for just general discussion about people who are using rust and then there's internals",
    "start": "4253640",
    "end": "4259520"
  },
  {
    "text": "r.org which is used to develop the language itself so we have those two things split out just so that you know",
    "start": "4259520",
    "end": "4265520"
  },
  {
    "text": "hello world questions don't interfere with like deep type Theory questions and you know you can pay attention to however much uh of those two things we",
    "start": "4265520",
    "end": "4272560"
  },
  {
    "text": "have some people that only read the internals discussion and some people that only read users obviously uh Reddit does exist although I'm a Reddit hater",
    "start": "4272560",
    "end": "4279760"
  },
  {
    "text": "so I try not to talk about it as much as possible um but the Reddit the r subreddit is a shining example of all",
    "start": "4279760",
    "end": "4285679"
  },
  {
    "text": "the things that Reddit is not um it is also a nice wonderful friendly welcoming Place uh as opposed to the rest of",
    "start": "4285679",
    "end": "4292120"
  },
  {
    "text": "Reddit it seemed nice I was surprised I was like this is kind of cozy in here I like the rust subreddit a lot I think",
    "start": "4292120",
    "end": "4299000"
  },
  {
    "text": "people should also realize that there's a bit of a clash of cultures in the Russ Community which is there's a bunch of",
    "start": "4299000",
    "end": "4304080"
  },
  {
    "text": "people who are writing rust because they were C++ hackers and they really want Russ to be a better C++ and then there's",
    "start": "4304080",
    "end": "4310600"
  },
  {
    "text": "a bunch of people that came in because they're being enabled to be systems programmers for the first time and so if",
    "start": "4310600",
    "end": "4315960"
  },
  {
    "text": "you come in uh if you come into a conversation and you say something from the perspective of being a higher level",
    "start": "4315960",
    "end": "4321239"
  },
  {
    "text": "programmer and you get a bunch of stuff thrown at you from the perspective of being a C++ hacker don't let don't let",
    "start": "4321239",
    "end": "4327639"
  },
  {
    "text": "that discour you I I've definitely seen it happen occasionally maybe more than occasionally in some cases I would say",
    "start": "4327639",
    "end": "4334960"
  },
  {
    "text": "assume that the person who is talking to you is saying that because they feel passionately about wanting Russ to be a",
    "start": "4334960",
    "end": "4340400"
  },
  {
    "text": "replacement for C++ but also assume that you don't need to understand necessarily right away everything that they're",
    "start": "4340400",
    "end": "4345560"
  },
  {
    "text": "saying in order to be a effective rust programmer and and importantly you might have some insights on the ergonomics of",
    "start": "4345560",
    "end": "4351320"
  },
  {
    "text": "the the thing that's being discussed that a person who is who is so used to the pain and suffering of C++ might not",
    "start": "4351320",
    "end": "4357239"
  },
  {
    "text": "be able to see when we originally pitched cargo none of the hardcore C++ crowd believed that they would be using",
    "start": "4357239",
    "end": "4363000"
  },
  {
    "text": "it and by now they're all basically using it right they're depending upon it yeah yeah so both of these sort of",
    "start": "4363000",
    "end": "4368760"
  },
  {
    "text": "groups we sort of have three camps in the rest world there's the like functional people the dynamic programming people and the C++ people",
    "start": "4368760",
    "end": "4375520"
  },
  {
    "text": "and all three of them have different like pros and cons to offer each other in terms of their perspective and experience so it's been pretty cool to",
    "start": "4375520",
    "end": "4381639"
  },
  {
    "text": "see those three groups sort of coales um yeah so last week we had Zach saala on",
    "start": "4381639",
    "end": "4387360"
  },
  {
    "text": "the show he's the CEO of spark. it's an Open Source Hardware company doing Dev",
    "start": "4387360",
    "end": "4392960"
  },
  {
    "text": "devkits for Wi-Fi and cellular um that's episode 150 if you're interested but in the postow we told him we're talking",
    "start": "4392960",
    "end": "4398840"
  },
  {
    "text": "with you guys this week and he was quite excited about rust and he was kind of",
    "start": "4398840",
    "end": "4405080"
  },
  {
    "text": "hypothesizing on uh embedded rust and and getting excited about that in fact he pointed us to a a project called zinc",
    "start": "4405080",
    "end": "4412400"
  },
  {
    "text": "yep which is an experimental attempt to write an arm stack according to them um",
    "start": "4412400",
    "end": "4417560"
  },
  {
    "text": "we'll link that up in the show notes as well we want to kind of look at the future right now you know there a we're at 1.0 beta and we've talked about what",
    "start": "4417560",
    "end": "4424400"
  },
  {
    "text": "all that means but I'd like to take a chance to let you guys kind of prognosticate what you see rust doing",
    "start": "4424400",
    "end": "4431400"
  },
  {
    "text": "going forward what you know little niches will it um disrupt and where will it play well and where won't it so maybe",
    "start": "4431400",
    "end": "4438600"
  },
  {
    "text": "start with Yuda and then Stephen could take a shot as well so I can give my my wistful hopes for the future uh which is",
    "start": "4438600",
    "end": "4446520"
  },
  {
    "text": "I the think Russ is pretty awesome because the ownership system means that most code that you write actually only",
    "start": "4446520",
    "end": "4453159"
  },
  {
    "text": "cares about the abstract notion of reference and not exactly how it was allocated that's like a core concept of",
    "start": "4453159",
    "end": "4459520"
  },
  {
    "text": "rust so I could definitely imagine in the future having a world where people are able to right application layer code",
    "start": "4459520",
    "end": "4464960"
  },
  {
    "text": "that's either reference CED or GC even um but it talks to a lower like a framework layer that's extremely",
    "start": "4464960",
    "end": "4472320"
  },
  {
    "text": "performant that so I sort of think about rails right rails because the application layer is written in Ruby the",
    "start": "4472320",
    "end": "4478960"
  },
  {
    "text": "framework layers written Ruby but Ruby has Real Performance limitations and if you started to write rails in C++ or C",
    "start": "4478960",
    "end": "4485880"
  },
  {
    "text": "and someone jumped into understand they'd be like oh my God I have no idea what's going on please write this in Ruby but because rust is sort has sort",
    "start": "4485880",
    "end": "4492320"
  },
  {
    "text": "of this natural layer where uh it it separates allocation the cost of",
    "start": "4492320",
    "end": "4497600"
  },
  {
    "text": "allocation from the details of how you actually work with the objects I can easily imagine someone writing a rails",
    "start": "4497600",
    "end": "4502719"
  },
  {
    "text": "that was very fast very efficient very lowlevel and worked with um the ownership system but then the the glue",
    "start": "4502719",
    "end": "4508719"
  },
  {
    "text": "code on top the application layer code was very was much more loose was GC or or reference counted based and that sort",
    "start": "4508719",
    "end": "4515840"
  },
  {
    "text": "of thing is exciting there's a lot of work that's left to be done um that's not something someone could start doing today there's language features that are",
    "start": "4515840",
    "end": "4522679"
  },
  {
    "text": "still left but I I think I'm I say this and I'm sure that gonna get a bunch of rust people that say that's impossible",
    "start": "4522679",
    "end": "4528719"
  },
  {
    "text": "you shouldn't get people's hopes up but I I could imagine happening and I want I want to see something like that",
    "start": "4528719",
    "end": "4535199"
  },
  {
    "text": "happening I I've been sort of thinking about the the release of 1.0 is like an event horizon like all of my",
    "start": "4535199",
    "end": "4543320"
  },
  {
    "text": "hypothesizing about what may happen post relase are sort of like not important",
    "start": "4543320",
    "end": "4549040"
  },
  {
    "text": "the most important thing is I on the prize heads down like ship the best possible 1. know that I can possibly",
    "start": "4549040",
    "end": "4554239"
  },
  {
    "text": "ship because you only get one chance at a first impression I've been joking that I can't wait for the six we release",
    "start": "4554239",
    "end": "4559360"
  },
  {
    "text": "cycle to start kicking in for real because like this is the only stressful releases that we'll have is today and",
    "start": "4559360",
    "end": "4565000"
  },
  {
    "text": "six weeks from today and then every release after that is just like oh yeah this is just a Friday like no big deal",
    "start": "4565000",
    "end": "4570480"
  },
  {
    "text": "um so I've admitt been thinking a little bit less about the future because I've been so focused on you know the",
    "start": "4570480",
    "end": "4575679"
  },
  {
    "text": "immediate present um I think that if I had to say overall it would definitely be much more social kind of aims than it",
    "start": "4575679",
    "end": "4581199"
  },
  {
    "text": "is like specific technical aims I would love to see rust start to be used to teach operating systems classes and",
    "start": "4581199",
    "end": "4587280"
  },
  {
    "text": "colleges we've already had one instance of that happen um and I would love to",
    "start": "4587280",
    "end": "4592679"
  },
  {
    "text": "see rust make a lot of more people uh understand that low-l programming is not",
    "start": "4592679",
    "end": "4597920"
  },
  {
    "text": "inherently harder than high level programming uh this could be a whole another show so I W get into that a whole lot more but I think that",
    "start": "4597920",
    "end": "4603480"
  },
  {
    "text": "different people have different aptitudes and some people think that low-level programming is easier than web programming because web programming is",
    "start": "4603480",
    "end": "4608679"
  },
  {
    "text": "actually very complicated so um I would like to see like a new gener of people get interested in doing sort of system Z",
    "start": "4608679",
    "end": "4615719"
  },
  {
    "text": "stuff and I think that we'll be able to like help them out with that um so that's sort of my big focus more than a",
    "start": "4615719",
    "end": "4622280"
  },
  {
    "text": "specific technical thing um I'm interested in the social good that we can do uh and also like you know",
    "start": "4622280",
    "end": "4628400"
  },
  {
    "text": "rewriting libraries that need to be safe in a safer language will do a lot of good in the world too hopefully",
    "start": "4628400",
    "end": "4635679"
  },
  {
    "text": "so awesome man sounds like really cool stuff unfortunately we're running low on time here so we're going to do a few of",
    "start": "4635679",
    "end": "4642040"
  },
  {
    "text": "our closing questions we probably split them up give Yehuda one I'll give Steve one um one question we ask maybe I'll P",
    "start": "4642040",
    "end": "4649040"
  },
  {
    "text": "this one to Steve is wa if you had a call to Arms to the open source Community with regard to rust and you",
    "start": "4649040",
    "end": "4656239"
  },
  {
    "text": "wanted them to do something to help out to get involved what would you say What's the best way what should people be doing I would say give it a try uh",
    "start": "4656239",
    "end": "4665159"
  },
  {
    "text": "write down what you think whether or not it's positive or negative although uh you know try to be constructive please",
    "start": "4665159",
    "end": "4670320"
  },
  {
    "text": "for my ego and Sanity uh and uh leave a like a post in our users Forum um which",
    "start": "4670320",
    "end": "4676840"
  },
  {
    "text": "you know since it's a discourse you can sign in with GitHub or Twitter you don't even need to make like a real account or anything and just let us know what you",
    "start": "4676840",
    "end": "4683000"
  },
  {
    "text": "think um this next six weeks is going to be largely about polish and so we can only polish off the sharp edges that you",
    "start": "4683000",
    "end": "4689239"
  },
  {
    "text": "help us find so there are undoubtedly a lot of them um I've already submitted two PO requests today to fix tiny things",
    "start": "4689239",
    "end": "4695840"
  },
  {
    "text": "um but yeah like just just straight up honest feedback and giving a good shot would be",
    "start": "4695840",
    "end": "4701120"
  },
  {
    "text": "wonderful awesome uh next question this one's for youa you guys are kind of uh leaders and",
    "start": "4701120",
    "end": "4707440"
  },
  {
    "text": "finding new things and kind of Steve found rust before I had any idea what",
    "start": "4707440",
    "end": "4712679"
  },
  {
    "text": "what the heck it was um and so we're always interested with our guests like what's on your radar of course you've",
    "start": "4712679",
    "end": "4718120"
  },
  {
    "text": "been deeply embedded into Ember and into R the rust ecosystems but do you have anything else that's kind of tanal liing",
    "start": "4718120",
    "end": "4724920"
  },
  {
    "text": "you a project that you're interested in or you have a free weekend that you'd want to hack on that perhaps folks haven't heard of so mostly I do web",
    "start": "4724920",
    "end": "4732239"
  },
  {
    "text": "stuff okay and I think I think uh maybe I'll just answer this generically with",
    "start": "4732239",
    "end": "4737800"
  },
  {
    "text": "platitudes because I don't I don't actually have any specific project okay but but uh I think people underestimate",
    "start": "4737800",
    "end": "4743880"
  },
  {
    "text": "the web over and over and over again um and I think we're in the middle of another wave I think something like 2011",
    "start": "4743880",
    "end": "4749520"
  },
  {
    "text": "was the last big wave of features that really fundamentally shifted how people use the web um so things like web",
    "start": "4749520",
    "end": "4755800"
  },
  {
    "text": "workers uh typed arrays index DB Flex boox these are all things that I think",
    "start": "4755800",
    "end": "4762080"
  },
  {
    "text": "if you go look back you can see that those are fundamental game changers some of them made asms possible um but of",
    "start": "4762080",
    "end": "4768199"
  },
  {
    "text": "course when they happen people say oh those guys they're taking a document format and cramming on random blah blah",
    "start": "4768199",
    "end": "4773239"
  },
  {
    "text": "blah blah blah whatever whatever people say um and I think we're in the middle of another wave um so there's things",
    "start": "4773239",
    "end": "4779360"
  },
  {
    "text": "like uh more work on asm.js um service worker the Houdini project which is",
    "start": "4779360",
    "end": "4785719"
  },
  {
    "text": "doing some work to expose more of CSS uh directly to users um a bunch of things",
    "start": "4785719",
    "end": "4790960"
  },
  {
    "text": "like that that I think are going to end up being important um and it's I find it interesting that it's not when I look",
    "start": "4790960",
    "end": "4798120"
  },
  {
    "text": "back it's not like there's any one it's it's people are kind of expected to either be totally stagnant or changing",
    "start": "4798120",
    "end": "4803320"
  },
  {
    "text": "all the time and I kind of see waves so uh I guess keep an eye out for like",
    "start": "4803320",
    "end": "4808520"
  },
  {
    "text": "what's going to happen over the next year or two on the web and if you want to think about what's coming next on the",
    "start": "4808520",
    "end": "4813960"
  },
  {
    "text": "web you should think about how to take advantage of the things that are coming and not be so cynical about",
    "start": "4813960",
    "end": "4819400"
  },
  {
    "text": "them very good answer um well it's definitely been having uh definitely",
    "start": "4819400",
    "end": "4824560"
  },
  {
    "text": "been fun having you guys here on the show today I know this has gone a little longer than maybe our Norm is but for",
    "start": "4824560",
    "end": "4829719"
  },
  {
    "text": "those long shows this is about right in the good range where we kind of camp out in so um definitely want to thank you",
    "start": "4829719",
    "end": "4835480"
  },
  {
    "text": "guys for taking the time to come on and talk about Russ definitely excited about where it's going keep in touch with us",
    "start": "4835480",
    "end": "4840520"
  },
  {
    "text": "we definitely want to help however we can to uh encourage those who haven't yet tried rust to try rust and give",
    "start": "4840520",
    "end": "4847679"
  },
  {
    "text": "constructive polite graceful feedback um cuz that's what's that's what the world needs needs right you can't be mean you",
    "start": "4847679",
    "end": "4854440"
  },
  {
    "text": "got to got to be nice there's too many people being jerks on GI up issues in all directions and I would like if that",
    "start": "4854440",
    "end": "4860159"
  },
  {
    "text": "not happened anymore yes totally agree totally agree with and we Echo that and we ask the entire Community for the same",
    "start": "4860159",
    "end": "4866560"
  },
  {
    "text": "thing we do have a couple shows coming up I'm going to tease the next one so I guess to to yehuda's mention back to the",
    "start": "4866560",
    "end": "4873960"
  },
  {
    "text": "web this is going to the platform I think that's pretty strong out there it's called WordPress we're talking to",
    "start": "4873960",
    "end": "4881120"
  },
  {
    "text": "roots. Sage a very cool starter theme and Bedrock which is a modern WordPress",
    "start": "4881120",
    "end": "4886440"
  },
  {
    "text": "stack we're talking to Ben word and uh Scott uh walkinshaw about that we had",
    "start": "4886440",
    "end": "4891760"
  },
  {
    "text": "some awesome sponsors for this show cach ship app quality bundle which is a Tim",
    "start": "4891760",
    "end": "4897560"
  },
  {
    "text": "limited super awesome bundle it expires on April 15th so take a listen to that",
    "start": "4897560",
    "end": "4902679"
  },
  {
    "text": "uh toptw in digital ocean whom absolutely love what we do here but thanks to Steve and Yehuda and Jared and",
    "start": "4902679",
    "end": "4909760"
  },
  {
    "text": "all the awesome listeners members and for now let's say goodbye everybody",
    "start": "4909760",
    "end": "4915280"
  },
  {
    "text": "goodbye thanks",
    "start": "4915280",
    "end": "4918000"
  },
  {
    "text": "[Music] [Applause] [Music] [Applause]",
    "start": "4920310",
    "end": "4926690"
  },
  {
    "text": "[Music]",
    "start": "4926690",
    "end": "4930800"
  },
  {
    "text": "guys",
    "start": "4941560",
    "end": "4944560"
  }
]