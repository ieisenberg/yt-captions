[
  {
    "text": "let's do it it's go time welcome to go time your source for wide ranging",
    "start": "9080",
    "end": "15320"
  },
  {
    "text": "discussions from all around the go Community find us on the web at go time. FM on the fediverse at gotime at Chang",
    "start": "15320",
    "end": "23519"
  },
  {
    "text": "log. social and on X at gotime FM thanks to our partners at fly.io the home of",
    "start": "23519",
    "end": "28960"
  },
  {
    "text": "changel log.com launch your app as close to your users as possible find out how",
    "start": "28960",
    "end": "34280"
  },
  {
    "text": "at fly.io okay here we",
    "start": "34280",
    "end": "39239"
  },
  {
    "text": "go what's up Gophers I'm here with Kyle Carberry CTO coder.com so Kyle I've",
    "start": "40559",
    "end": "46800"
  },
  {
    "text": "known coder as the IDE in the cloud and over time you've iterated to become a",
    "start": "46800",
    "end": "52600"
  },
  {
    "text": "fully open- Source Cloud development environment a CDE how do you explain what coder is and what it does coder is",
    "start": "52600",
    "end": "59760"
  },
  {
    "text": "a platform to provision you a development environment on any Cloud infrastructure that might be in a VM",
    "start": "59760",
    "end": "65360"
  },
  {
    "text": "that might be inside of a container but coder is kind of a developers route to provision infrastructure for them to",
    "start": "65360",
    "end": "70680"
  },
  {
    "text": "write software inside of we started with the IDE which is kind of like putting VSS code in the browser which is what",
    "start": "70680",
    "end": "76600"
  },
  {
    "text": "most people are certainly familiar with us for and we kind of funneled that into more of a platform where people",
    "start": "76600",
    "end": "81799"
  },
  {
    "text": "provision the infrastructure and a lot of people do use a web ID with coder a lot of people use a local IDE and just",
    "start": "81799",
    "end": "86840"
  },
  {
    "text": "connect in okay so what are teams coming to you for who's coming to you what people really come to us for",
    "start": "86840",
    "end": "92240"
  },
  {
    "text": "particularly this problem is is really exacerbated if you're a large Enterprise is when you have like 500 Engineers that",
    "start": "92240",
    "end": "98680"
  },
  {
    "text": "are trying to update like a version of python and instead we allow one engineer to go through that tedious work of",
    "start": "98680",
    "end": "104479"
  },
  {
    "text": "updating some scripts or some Docker container and then you can actually just deploy that in one click to say like 500",
    "start": "104479",
    "end": "109920"
  },
  {
    "text": "engineers and make it really really simple let's laser focus in on the",
    "start": "109920",
    "end": "115479"
  },
  {
    "text": "platform engineer it is that team's job to provide the best infrastructure the best platform for their given",
    "start": "115479",
    "end": "122759"
  },
  {
    "text": "applications for their teams what are some signs or signals for platform",
    "start": "122759",
    "end": "127799"
  },
  {
    "text": "Engineers to think about when it might be time to consider a cloud development environment like cod.com so as a",
    "start": "127799",
    "end": "133879"
  },
  {
    "text": "platform engineer developers might constantly be opening like it tickets that their computer isn't working",
    "start": "133879",
    "end": "139640"
  },
  {
    "text": "properly they might constantly want to update dependencies but that's a big mess you constantly have to email people",
    "start": "139640",
    "end": "146440"
  },
  {
    "text": "across your team to say hey Adam could we update from java 7 to Java 18 those are the kinds of problems that people",
    "start": "146440",
    "end": "152560"
  },
  {
    "text": "typically have that's the status quo you ship people more powerful laptops to improve the build times of your projects",
    "start": "152560",
    "end": "158920"
  },
  {
    "text": "you try to reduce the complexity of your products instead of Simply you know leveraging better Hardware we believe",
    "start": "158920",
    "end": "164840"
  },
  {
    "text": "that the future is leveraging the cloud for a lot of these things you can get more powerful instances in gcp or AWS",
    "start": "164840",
    "end": "171040"
  },
  {
    "text": "that can make the build times faster instantly you can let one developer create a standardized environment and",
    "start": "171040",
    "end": "176120"
  },
  {
    "text": "then distribute it to a th so that when you're updating from java 17 to 18 it's just a simple pull request you can",
    "start": "176120",
    "end": "182440"
  },
  {
    "text": "collocate your servers right next to something like S3 or a database that you're using in development so that you",
    "start": "182440",
    "end": "187959"
  },
  {
    "text": "get immediate data transfers and it's not slow many of our customers which is a crazy thing to say but they use",
    "start": "187959",
    "end": "193239"
  },
  {
    "text": "absolutely massive monor repos and they get clones that go from like 10 minutes or 20 minutes or an hour to Simply like",
    "start": "193239",
    "end": "199000"
  },
  {
    "text": "a minute or 30 seconds it's just a lot simpler when all of your engineers are standardized on one centralized piece of",
    "start": "199000",
    "end": "205959"
  },
  {
    "text": "infrastructure and then one person can can impact the lives of hundreds of engineers and with that we don't believe",
    "start": "205959",
    "end": "211680"
  },
  {
    "text": "that everything belongs in the cloud we think that some workloads are really amazing for it and some are absolutely",
    "start": "211680",
    "end": "216799"
  },
  {
    "text": "terrible coder should be a self- serve offering to your engineers it should not be prescriptive where you migrate all",
    "start": "216799",
    "end": "222840"
  },
  {
    "text": "pieces of software development into the cloud only the things that really get a lot better by running them In This Cloud",
    "start": "222840",
    "end": "228439"
  },
  {
    "text": "native way do we really promote moving well it might be time to consider a",
    "start": "228439",
    "end": "233760"
  },
  {
    "text": "cloud development environment and open source is awesome encoder is fully open source you can go to coder.com get a",
    "start": "233760",
    "end": "242040"
  },
  {
    "text": "demo or try it right now or even start a 30-day trial of coder Enterprise once",
    "start": "242040",
    "end": "248200"
  },
  {
    "text": "again coder.com that's c o d.com coder.com",
    "start": "248200",
    "end": "254730"
  },
  {
    "text": "[Music]",
    "start": "254730",
    "end": "267149"
  },
  {
    "text": "well hello there listener I joined today by myself Johnny Boro I'm your host I'm",
    "start": "270360",
    "end": "279120"
  },
  {
    "text": "join I'm joining this podcast as the host but most importantly I am joined by",
    "start": "279120",
    "end": "284280"
  },
  {
    "text": "Carina Johnson hi who is here to help us",
    "start": "284280",
    "end": "289680"
  },
  {
    "text": "how should I put this unpack right some of the new features coming out in go 123",
    "start": "289680",
    "end": "296800"
  },
  {
    "text": "next month so uh August 2024 and there's there's a lot of new stuff",
    "start": "296800",
    "end": "302240"
  },
  {
    "text": "coming but I think there's going to be this is probably going to one to be one those releases where uh um not everybody",
    "start": "302240",
    "end": "309280"
  },
  {
    "text": "I suspect is gonna be super happy with with some of some of the things that are",
    "start": "309280",
    "end": "315320"
  },
  {
    "text": "being added to the language the and and we'll get to that but before we jump in Carina how have you been uh I've been",
    "start": "315320",
    "end": "321840"
  },
  {
    "text": "good yeah I think so once again it's it has been 6 months uh and so just like",
    "start": "321840",
    "end": "327199"
  },
  {
    "text": "the go release schedule um i' I'm returning and yeah I think last time I",
    "start": "327199",
    "end": "332800"
  },
  {
    "text": "was on the show I promised to talk about iterators uh and now I'm here to do that that is awesome thank you for coming",
    "start": "332800",
    "end": "339680"
  },
  {
    "text": "back yeah so so let's let's Dive Right In so yep every six months we get a new",
    "start": "339680",
    "end": "345080"
  },
  {
    "text": "release of go obviously in between that we get patches and things but this is a feature uh release new new things coming",
    "start": "345080",
    "end": "352400"
  },
  {
    "text": "in hot and obviously the the feature in everybody's mind is iterators uh before",
    "start": "352400",
    "end": "358600"
  },
  {
    "text": "we jump in um we will not assume that every audience member knows what an",
    "start": "358600",
    "end": "364039"
  },
  {
    "text": "iterator function is so so let me let me hopefully try to do a good job of of establishing what iterators are and then",
    "start": "364039",
    "end": "370400"
  },
  {
    "text": "please go a jump and if I say anything that's that doesn't sound quite right so an iterator right is basically a",
    "start": "370400",
    "end": "377039"
  },
  {
    "text": "construct that allows you to Traverse like collection types you know like slices arrays maps that kind of thing",
    "start": "377039",
    "end": "383319"
  },
  {
    "text": "and they typically Implement a mechanism for getting to the next item in the collection and also so checking if there",
    "start": "383319",
    "end": "390560"
  },
  {
    "text": "is anything like else right in the connection if there is the next item otherwise basically you can sort of you",
    "start": "390560",
    "end": "396360"
  },
  {
    "text": "need a web mechanism of short circuiting or or stopping in the iteration because there's nothing else to iterate over so",
    "start": "396360",
    "end": "401599"
  },
  {
    "text": "so fundamentally that's what that's what that that construct is and you can find it in a number of languages right you",
    "start": "401599",
    "end": "408680"
  },
  {
    "text": "know be python Java etc etc so itat are are not sort of you know go thing",
    "start": "408680",
    "end": "414120"
  },
  {
    "text": "they're just a programming language concept all right so what what are good uses for iterators generally speaking",
    "start": "414120",
    "end": "421840"
  },
  {
    "text": "Yeah so that's a great uh summary so if you're familiar with other languages",
    "start": "421840",
    "end": "427039"
  },
  {
    "text": "like python or or JavaScript um and I'm sure I know C++ has like a thing for",
    "start": "427039",
    "end": "432759"
  },
  {
    "text": "iterators and I'm sure I'm sure basically every language does uh nowadays so yeah an iterator is just the",
    "start": "432759",
    "end": "439560"
  },
  {
    "text": "idea of you have some sort of list or container or it could even be an open-ended sequence it could be like um",
    "start": "439560",
    "end": "446240"
  },
  {
    "text": "just a counter that counts up forever and you want to have one value yielded from it at a time so you're just looking",
    "start": "446240",
    "end": "452560"
  },
  {
    "text": "at a single value out of a stream of either some finite set of values like",
    "start": "452560",
    "end": "457960"
  },
  {
    "text": "all the items in a list or uh an infinite set of values like a counter or",
    "start": "457960",
    "end": "463280"
  },
  {
    "text": "um you know reading from a file or whatever it is yeah so iterators are a really important concept uh in general",
    "start": "463280",
    "end": "471159"
  },
  {
    "text": "and up until go 1.23 the go language did not have special support for making a custom",
    "start": "471159",
    "end": "479479"
  },
  {
    "text": "iterator type so if you wanted to iterate over a slice or an array or a",
    "start": "479479",
    "end": "486159"
  },
  {
    "text": "map or a channel we've all done this I think even if you're a beginner and you're listening to this podcast you've",
    "start": "486159",
    "end": "491680"
  },
  {
    "text": "probably written you know for I comma V colon equals range and then your slice",
    "start": "491680",
    "end": "499360"
  },
  {
    "text": "or your map or whatever it is and so that gives you each individual value in",
    "start": "499360",
    "end": "504479"
  },
  {
    "text": "in the map but up until go 1.23 there wasn't support for for making your own",
    "start": "504479",
    "end": "511560"
  },
  {
    "text": "iterators so let's say that you like the go standard library but you have an idea",
    "start": "511560",
    "end": "517839"
  },
  {
    "text": "for how your map type could be faster and you want to implement it yourself or you have like a presorted map or you",
    "start": "517839",
    "end": "525240"
  },
  {
    "text": "have you know some sort of linked list instead of a slice or an array and you",
    "start": "525240",
    "end": "530560"
  },
  {
    "text": "want to have some way of like letting users go through all the values in your in your collection well up until now the",
    "start": "530560",
    "end": "537160"
  },
  {
    "text": "thing that you've had to do is to build an iterator yourself where you return let's say an object with like a next",
    "start": "537160",
    "end": "543519"
  },
  {
    "text": "method and the next could say like you know okay true or okay false and you say",
    "start": "543519",
    "end": "549720"
  },
  {
    "text": "for item. next and then maybe do like item. value um and that gives you each",
    "start": "549720",
    "end": "555680"
  },
  {
    "text": "of the items in the in the collection um so that's something you could do but it's always sort of been kind of a pain",
    "start": "555680",
    "end": "562480"
  },
  {
    "text": "to write so like as somebody who tries to write one of those methods you a little bit have to think backward words",
    "start": "562480",
    "end": "569760"
  },
  {
    "text": "or or you have to like figure out okay how do I keep track of where I am in the iteration um because from call to next",
    "start": "569760",
    "end": "575880"
  },
  {
    "text": "to call to next you lose your state um and so you have to like pack up everything you need to know when you",
    "start": "575880",
    "end": "581959"
  },
  {
    "text": "call next and then unpack it again on the next call to next and make sure you don't lose it and so it's not too bad",
    "start": "581959",
    "end": "587519"
  },
  {
    "text": "for things that are just like a straight line but for things that are a tree it gets a little bit tricky like an issue",
    "start": "587519",
    "end": "594200"
  },
  {
    "text": "that I've had before is uh I've wanted to iterate through Dom nodes of an HTM",
    "start": "594200",
    "end": "600240"
  },
  {
    "text": "tree um so there's a really nice uh package it's not in the standard library but it's in the extended standard",
    "start": "600240",
    "end": "606640"
  },
  {
    "text": "Library the golang.org xnet HTML package and that's a really",
    "start": "606640",
    "end": "613160"
  },
  {
    "text": "nice HTML parser so you can give it a document you get off the web you get back this you know beautiful tree of you",
    "start": "613160",
    "end": "619200"
  },
  {
    "text": "know the HTML elements and all of the things um but now that you have the document how do you actually like go",
    "start": "619200",
    "end": "625480"
  },
  {
    "text": "through it and like find the nodes that match and change them to be what you want to be so you can emit them again",
    "start": "625480",
    "end": "631640"
  },
  {
    "text": "and so up until now what you've had to do is to like write a recursive function",
    "start": "631640",
    "end": "636760"
  },
  {
    "text": "like that's the example that's in the the docs right now for the net HTML package um it shows like a little",
    "start": "636760",
    "end": "643720"
  },
  {
    "text": "function that calls itself and that one doesn't even have a way of stopping it's just got to go through the whole tree",
    "start": "643720",
    "end": "650200"
  },
  {
    "text": "whole thing right because like it's a little bit tricky how do you tell it like okay you found the item that I want",
    "start": "650200",
    "end": "656519"
  },
  {
    "text": "just just stop like I don't need you to go through the whole tree like I just needed to get to the first link and I",
    "start": "656519",
    "end": "662480"
  },
  {
    "text": "want to print out the value of that link but I don't want like the rest of the tree if there once I get there so yeah",
    "start": "662480",
    "end": "668519"
  },
  {
    "text": "it's it's a little bit cumbersome to work with so up until now up until go",
    "start": "668519",
    "end": "673959"
  },
  {
    "text": "1.18 go didn't have generics and so if you wanted to make a collection or if",
    "start": "673959",
    "end": "679600"
  },
  {
    "text": "you wanted to to do something where you could contain different types there wasn't a way to do it so that you could",
    "start": "679600",
    "end": "685600"
  },
  {
    "text": "like just contain any type and then get the value back out again safely without",
    "start": "685600",
    "end": "691519"
  },
  {
    "text": "like a lot of you know casting and you know turning interfaces back into",
    "start": "691519",
    "end": "696600"
  },
  {
    "text": "concrete types it there were ways of doing it you could use um like code generation you could use reflection you",
    "start": "696600",
    "end": "703839"
  },
  {
    "text": "could do different things to work around it but there wasn't ever like a great way before generics were added to go and",
    "start": "703839",
    "end": "710160"
  },
  {
    "text": "go 1.18 but then once go 1.18 added generics suddenly you had this way of",
    "start": "710160",
    "end": "716079"
  },
  {
    "text": "building container types uh and once you have a way of building container types people want to be able to read through",
    "start": "716079",
    "end": "722160"
  },
  {
    "text": "the container types right they want some way naturally yeah of using them in this like structured way and so there's been",
    "start": "722160",
    "end": "729360"
  },
  {
    "text": "a demand to add iterators to to go for you know the last couple of what what",
    "start": "729360",
    "end": "734880"
  },
  {
    "text": "year did go 1.18 come out I guess if it's if we're on 24",
    "start": "734880",
    "end": "740000"
  },
  {
    "text": "now three years ago it must have been three years because it's every six months every six months right yeah um so",
    "start": "740000",
    "end": "746000"
  },
  {
    "text": "yeah so for the last three years people have been saying like generics are great but what when are we going to get",
    "start": "746000",
    "end": "751079"
  },
  {
    "text": "iterators and so the way that you might think about doing iterators is well",
    "start": "751079",
    "end": "756639"
  },
  {
    "text": "let's just Define that things should have a next method and then the next method returns a bu or maybe the next",
    "start": "756639",
    "end": "763199"
  },
  {
    "text": "method returns a and the value and that would be like one way of doing iterators",
    "start": "763199",
    "end": "768360"
  },
  {
    "text": "um and that is definitely an approach a lot of people have thought of I thought of it I like opened a proposal on the go",
    "start": "768360",
    "end": "775279"
  },
  {
    "text": "issue tracker saying like hey let's do iterators uh here's how it could look and an issue that came up with that",
    "start": "775279",
    "end": "782680"
  },
  {
    "text": "proposal and the other ones that were like it there were also like more detailed proposals by people who are actually like on the go team and know",
    "start": "782680",
    "end": "789040"
  },
  {
    "text": "how to like write the compiler not just people who contribute for line functions every six months um so the the issue",
    "start": "789040",
    "end": "797120"
  },
  {
    "text": "with that um way is that let's say that in go 1.21 you were like oh I'll make a",
    "start": "797120",
    "end": "805320"
  },
  {
    "text": "new type and I'm going to Define it against a slice or I'm going to Define it against a map because the thing that",
    "start": "805320",
    "end": "811560"
  },
  {
    "text": "you can do in go is you can Define your your types just based on another type so if you define it like um let's say the",
    "start": "811560",
    "end": "819560"
  },
  {
    "text": "the headers type in um the net HTTP package that is defined as just being",
    "start": "819560",
    "end": "824959"
  },
  {
    "text": "like a map with a string for a key and a slice of strings for the value so if",
    "start": "824959",
    "end": "830920"
  },
  {
    "text": "somebody on the map type added a next method and they put that in a Range",
    "start": "830920",
    "end": "836320"
  },
  {
    "text": "statement then between when you added the next method and then when the next iterators get added to go it would",
    "start": "836320",
    "end": "843040"
  },
  {
    "text": "change the meaning because in the old one it would just Loop through it like it was a map but in the new one it would",
    "start": "843040",
    "end": "848720"
  },
  {
    "text": "start calling that interface method so it was like a little subtle kind of incompatibility between the two versions",
    "start": "848720",
    "end": "854880"
  },
  {
    "text": "of go um and so that wasn't maybe like the most definitive reason why they shouldn't use iterators for or use",
    "start": "854880",
    "end": "863000"
  },
  {
    "text": "interfaces for iterators but it was definitely one thing that was against it it's that go has this really really",
    "start": "863000",
    "end": "868680"
  },
  {
    "text": "really strong backwards compatibility guarantee and doing this it would have",
    "start": "868680",
    "end": "873959"
  },
  {
    "text": "been like something subtle it would have been something that like it's very unlikely that you had just happened to",
    "start": "873959",
    "end": "879399"
  },
  {
    "text": "Define an iterator method but it would have probably yeah it would have been an issue or like if you tried to use I",
    "start": "879399",
    "end": "886920"
  },
  {
    "text": "think the more likely issue is that you your company is stuck on an old version",
    "start": "886920",
    "end": "891959"
  },
  {
    "text": "of go for like security reasons or whatever you need to get government approval or regulatory approval to move",
    "start": "891959",
    "end": "897839"
  },
  {
    "text": "to a new version of go and then you import this package and it's using an iterator defined in the new style and",
    "start": "897839",
    "end": "905240"
  },
  {
    "text": "you just go to use it in a loop and you don't even notice that you're getting the wrong kind of iterator back right so",
    "start": "905240",
    "end": "910639"
  },
  {
    "text": "something like that could happen so again it's not maybe the most definitive reason for why they couldn't add",
    "start": "910639",
    "end": "916959"
  },
  {
    "text": "iterators as interfaces to to go but it was definitely one strike against it that like hey if we're going to do this",
    "start": "916959",
    "end": "922279"
  },
  {
    "text": "we're going to be breaking our own standards for backwards compatibility and that's that's not great so that was",
    "start": "922279",
    "end": "928399"
  },
  {
    "text": "that was the situation for a while that people had these proposals for how to do it um but there wasn't like one",
    "start": "928399",
    "end": "933839"
  },
  {
    "text": "definitive way I guess another issue that is maybe more definitively against it is a lot of times when you're doing",
    "start": "933839",
    "end": "940519"
  },
  {
    "text": "an iteration you create some sort of state right like I was saying every time you call next you have to pick up that",
    "start": "940519",
    "end": "945720"
  },
  {
    "text": "state and like pick up where you left off and so you a lot of times need a close method as well to say like okay",
    "start": "945720",
    "end": "952160"
  },
  {
    "text": "you've been iterating through this file now close it because we're done iterating through it and so again if you",
    "start": "952160",
    "end": "958199"
  },
  {
    "text": "do it that that interface-based way you're gonna have to have something to do with the close methods and knowing",
    "start": "958199",
    "end": "963519"
  },
  {
    "text": "exactly when they're called and that one I think was a little bit stronger of an issue of just like do we always call the",
    "start": "963519",
    "end": "969680"
  },
  {
    "text": "close method at the end do we require people to like defer a call to close before they start how do we know exactly",
    "start": "969680",
    "end": "976560"
  },
  {
    "text": "when things get closed so Russ Cox looked at the situation um and he had like a really clever idea it's like one",
    "start": "976560",
    "end": "983079"
  },
  {
    "text": "of those classic right uh Russ Cox's ideas of like sort of just looking at the problem a little bit orthogonally um",
    "start": "983079",
    "end": "989160"
  },
  {
    "text": "and he said look right now the range operator it behaves differently depend",
    "start": "989160",
    "end": "994560"
  },
  {
    "text": "on what the type of the value is so if the type is a channel then it pulls",
    "start": "994560",
    "end": "1000600"
  },
  {
    "text": "values out of the channel if the type is a slice it gets one element at a time if it's a map go through in a random order",
    "start": "1000600",
    "end": "1006360"
  },
  {
    "text": "so what if the type of the thing at the end of the range statement is a function",
    "start": "1006360",
    "end": "1012480"
  },
  {
    "text": "so yeah it's a little bit of a weird idea why would you put a function there MH but that was like sort of the the",
    "start": "1012480",
    "end": "1017920"
  },
  {
    "text": "idea that unlocked of like oh if we make it a function then what we can do is we",
    "start": "1017920",
    "end": "1022959"
  },
  {
    "text": "can call that function and then the function can keep track of the state and then when the function is over the",
    "start": "1022959",
    "end": "1030000"
  },
  {
    "text": "function can automatically close you know through just a regular defer statement whatever is going on inside of",
    "start": "1030000",
    "end": "1036038"
  },
  {
    "text": "it and so you end up with the type signature of interfaces in go 1.23 it's",
    "start": "1036039",
    "end": "1042160"
  },
  {
    "text": "a little bit mindbending it's definitely something where the first time you see it you're like what going a there is a",
    "start": "1042160",
    "end": "1049840"
  },
  {
    "text": "lot of funks going on in there I mean there's a lot of funks it's a funky funky hey dog we heard you like",
    "start": "1049840",
    "end": "1055720"
  },
  {
    "text": "functions so we put a function in your function exactly exactly and there's",
    "start": "1055720",
    "end": "1060919"
  },
  {
    "text": "like there's like there in three different U Styles right of these range Expressions right there's a simple Funk",
    "start": "1060919",
    "end": "1068240"
  },
  {
    "text": "that returns a bull a funk that accepts a k right returns a bull in a another",
    "start": "1068240",
    "end": "1073440"
  },
  {
    "text": "one that accepts a k and a V and returns a bull like these are like the",
    "start": "1073440",
    "end": "1079360"
  },
  {
    "text": "initial set or or is there I mean does it even make sense to think of this well",
    "start": "1079360",
    "end": "1084919"
  },
  {
    "text": "what if I needed three things is it even the right way of thinking about this or is this sort of the the canonical set",
    "start": "1084919",
    "end": "1091320"
  },
  {
    "text": "and that can basically is flexible enough to support all the use cases for range Expressions yeah that's a good",
    "start": "1091320",
    "end": "1096799"
  },
  {
    "text": "question um so I am not like somebody who understands compiler internals really well but the explanation I read",
    "start": "1096799",
    "end": "1104360"
  },
  {
    "text": "was that the way that the language grammar is right now it accepts either 0",
    "start": "1104360",
    "end": "1111039"
  },
  {
    "text": "one or two values in front of the word range so like you know I colon equals range or you know K comma V colon equals",
    "start": "1111039",
    "end": "1119520"
  },
  {
    "text": "range so in terms of the way that the grammar already worked it only accepted either zero one or two values in front",
    "start": "1119520",
    "end": "1127480"
  },
  {
    "text": "of range and so then they were like H that's enough uh we don't want to extend it so",
    "start": "1127480",
    "end": "1132640"
  },
  {
    "text": "that you could do three or four or you know a thousand or whatever we'll just say that it's enough just to to let you",
    "start": "1132640",
    "end": "1139039"
  },
  {
    "text": "do you know zero one or two and then like if you do need something where it's like oh I need to unpack you know five",
    "start": "1139039",
    "end": "1146480"
  },
  {
    "text": "values or something like that then just return like a closure and then inside the loop say you know value a b c d e",
    "start": "1146480",
    "end": "1153360"
  },
  {
    "text": "are equal to you know calling the closure or whatever it is and yeah",
    "start": "1153360",
    "end": "1158760"
  },
  {
    "text": "that's one of those ones where it's a little bit inelegant too that so because of this if you want to accept a sequence",
    "start": "1158760",
    "end": "1166280"
  },
  {
    "text": "um there's different kinds of sequences you can accept you can accept a sequence that just has one value or you can",
    "start": "1166280",
    "end": "1172200"
  },
  {
    "text": "accept a sequence that's um a pair of values seek and seek to in the new iter",
    "start": "1172200",
    "end": "1177480"
  },
  {
    "text": "package right yeah so there's a new package called iter and it all it really has in it is just like a defined type so",
    "start": "1177480",
    "end": "1183919"
  },
  {
    "text": "we were saying that the signature for iterator functions is a little bit weird because it's a function with a function",
    "start": "1183919",
    "end": "1189039"
  },
  {
    "text": "in it so if you don't feel like typing that whole crazy thing out you can just say it. seq it. sequence right and that",
    "start": "1189039",
    "end": "1196559"
  },
  {
    "text": "is a function that takes a fun function which has an argument that is one type",
    "start": "1196559",
    "end": "1202760"
  },
  {
    "text": "and then returns a and then there's it. seek 2 which is a function that takes a",
    "start": "1202760",
    "end": "1208880"
  },
  {
    "text": "function and then it has two arguments the key argument and the value argument and returns a bull and then there's the",
    "start": "1208880",
    "end": "1215440"
  },
  {
    "text": "it. seek zero which is just a function that takes a function that returns a bull and so the way that all of these",
    "start": "1215440",
    "end": "1222280"
  },
  {
    "text": "work is that um if you're somebody who's a producer what you're doing so if you're writing an iterator what you is",
    "start": "1222280",
    "end": "1229120"
  },
  {
    "text": "you um every time you want to emit a value you call that inner function and you say here's another value for you to",
    "start": "1229120",
    "end": "1235440"
  },
  {
    "text": "consume and then what you get back is um a bull you know a true or false and the",
    "start": "1235440",
    "end": "1241080"
  },
  {
    "text": "true or false either says true give me another value or false um I'm done",
    "start": "1241080",
    "end": "1246120"
  },
  {
    "text": "looking for values do whatever cleanup you co code you need to do and just return after that um so again it's a",
    "start": "1246120",
    "end": "1253360"
  },
  {
    "text": "little bit mind-bending to like learn it but then once you've written like one or two it gets pretty easy to use like as",
    "start": "1253360",
    "end": "1261280"
  },
  {
    "text": "somebody who's writing it and then as a consumer you don't really have to think about any of this just say like okay I",
    "start": "1261280",
    "end": "1266320"
  },
  {
    "text": "know that this returns an it. seek so that means it's returning a stream of a single value or this is returning an it.",
    "start": "1266320",
    "end": "1272039"
  },
  {
    "text": "seek 2 so it's returning a stream of two values and I haven't even seen any places that that do an IT seek zero yet",
    "start": "1272039",
    "end": "1279720"
  },
  {
    "text": "but yeah so like as a consumer it's pretty easy to use you just like put the thing in the range statement and you get",
    "start": "1279720",
    "end": "1286200"
  },
  {
    "text": "back values but yeah as a producer I think you have to write maybe two or",
    "start": "1286200",
    "end": "1291320"
  },
  {
    "text": "three of them and then you'll um then you'll get it and it'll click and you'll be like oh okay I know how to do this now but yeah the first time you see it",
    "start": "1291320",
    "end": "1297799"
  },
  {
    "text": "you're definitely like why are there functions inside of functions for for those who've ever used a database SQL",
    "start": "1297799",
    "end": "1304159"
  },
  {
    "text": "package for example like you you are using sort of this whole notion of an",
    "start": "1304159",
    "end": "1309240"
  },
  {
    "text": "iterator already right even outside of the you know 123 features and whatever it is because you think about sort of",
    "start": "1309240",
    "end": "1315400"
  },
  {
    "text": "when you make a um and you call a query method right on a database value right",
    "start": "1315400",
    "end": "1321000"
  },
  {
    "text": "what what happens is basically you get a sort of a pointer that's sort of moving back or moving forward through um",
    "start": "1321000",
    "end": "1327240"
  },
  {
    "text": "records right from from a table from a SQL query you don't not the entire table",
    "start": "1327240",
    "end": "1332799"
  },
  {
    "text": "is not loaded up in memory right you have to literally call next right to sort of go on to the next record move",
    "start": "1332799",
    "end": "1338960"
  },
  {
    "text": "the points to the next record and then you you can process you know the results to whatever you need there and then in",
    "start": "1338960",
    "end": "1344600"
  },
  {
    "text": "the end right it's up to you to actually call it a close right to say okay I'm done with this query like B so you've",
    "start": "1344600",
    "end": "1349840"
  },
  {
    "text": "been using if you've ever used a database SQL package directly not through an RM or something like that then then you are already familiar with",
    "start": "1349840",
    "end": "1356120"
  },
  {
    "text": "using things in an iterator like fashion now the the range mechanism sort of puts",
    "start": "1356120",
    "end": "1363840"
  },
  {
    "text": "based on your however you want to create your iterator puts the sort of the the the handling and the closing the state",
    "start": "1363840",
    "end": "1369480"
  },
  {
    "text": "track and all that stuff it puts that in your hands by asking you to basically okay provide an iterator function",
    "start": "1369480",
    "end": "1375799"
  },
  {
    "text": "whatever you do in there however you manage your state however you clean up whatever it is that's all up to you right and just give give the range",
    "start": "1375799",
    "end": "1382559"
  },
  {
    "text": "function right something that satisfies the the seek and seek to interfaces or",
    "start": "1382559",
    "end": "1387640"
  },
  {
    "text": "types rather yeah so one thing that that's a little bit funny is that the sync. map type um which has been in go",
    "start": "1387640",
    "end": "1395960"
  },
  {
    "text": "for what does it say here since go 1.9 so it's been in there for years and years and years um and it's just like a",
    "start": "1395960",
    "end": "1402799"
  },
  {
    "text": "big map but it's um it's in sync right because uh the way that it works is that even if you have multiple go routines",
    "start": "1402799",
    "end": "1409159"
  },
  {
    "text": "accessing it it's still going to be Memory safe and it's not going to like overwrite itself the way that if you",
    "start": "1409159",
    "end": "1414240"
  },
  {
    "text": "tried to use a regular map and two go routines you would get like a a race condition so it has a method that's",
    "start": "1414240",
    "end": "1420679"
  },
  {
    "text": "called range and range has that same signature it takes um a function that",
    "start": "1420679",
    "end": "1426080"
  },
  {
    "text": "takes a key and a value and it returns a bull so you can actually use the sync.",
    "start": "1426080",
    "end": "1432320"
  },
  {
    "text": "map. rrange method in a Range statement in in go 1.23 even though they didn't",
    "start": "1432320",
    "end": "1438960"
  },
  {
    "text": "make any change to the existing range method they didn't change it to return the special it. sequence to type it",
    "start": "1438960",
    "end": "1446640"
  },
  {
    "text": "still is returning the same type it always returned but just like the fact that it had this pattern in it means",
    "start": "1446640",
    "end": "1452080"
  },
  {
    "text": "that it can be used as an iterator in go 1.23 seeing the standard Library sort of",
    "start": "1452080",
    "end": "1458760"
  },
  {
    "text": "starting to change to take more and more advantage of of these new Concepts that they as they get introduced has kind of",
    "start": "1458760",
    "end": "1464520"
  },
  {
    "text": "been interesting interesting to watch as well obviously I'm sure the it package is going to sort of play a continued",
    "start": "1464520",
    "end": "1470559"
  },
  {
    "text": "role in all of that and you can already see some functions or some some constructs in the language you know",
    "start": "1470559",
    "end": "1476279"
  },
  {
    "text": "taking more advantage of of generics and whatnot so it's been it's going to be interesting to see how the the rest of",
    "start": "1476279",
    "end": "1483080"
  },
  {
    "text": "the standard Library starts picking up on this pattern uh but like beyond beyond the some some of the I guess",
    "start": "1483080",
    "end": "1489159"
  },
  {
    "text": "finer technical details that we've been talking about here what what is the sentiment that you are hearing on the",
    "start": "1489159",
    "end": "1495559"
  },
  {
    "text": "street the sentiment I definitely have read like one or I mean I I almost like I don't even know if it's fair to say I",
    "start": "1495559",
    "end": "1501640"
  },
  {
    "text": "read them I saw like the titles of blog post saying like this is too much complexity and go um and I just sort of",
    "start": "1501640",
    "end": "1507799"
  },
  {
    "text": "like tuned it out because it's like look once you accept generics uh it was kind of inevitable that iterators would come",
    "start": "1507799",
    "end": "1515399"
  },
  {
    "text": "right like I think it you know before generics came it was really controversial and I think it's true that",
    "start": "1515399",
    "end": "1521440"
  },
  {
    "text": "like once you add generics you're you're letting the camel in the tent right and so like now the camel is in the tent and",
    "start": "1521440",
    "end": "1527039"
  },
  {
    "text": "it's lying down for the night and it's like got its you know big nose under the thing so you know that the camel is in",
    "start": "1527039",
    "end": "1533480"
  },
  {
    "text": "the tent so if if you were thinking that go was getting a little bit too complex this is definitely fuel for your fire I",
    "start": "1533480",
    "end": "1539720"
  },
  {
    "text": "definitely though I read another blog post I wish I had remembered who this was by but I read one last week where it was someone saying I thought that",
    "start": "1539720",
    "end": "1546399"
  },
  {
    "text": "iterators were too complex but then I gave it a shot I tried it out the signature was really mindbending at",
    "start": "1546399",
    "end": "1552880"
  },
  {
    "text": "first but then I wrote an iterator that like you know adapted some existing code",
    "start": "1552880",
    "end": "1558440"
  },
  {
    "text": "had to work with the new pattern and it was fine like you know once you get used to it it's not so bad right right yeah I",
    "start": "1558440",
    "end": "1565520"
  },
  {
    "text": "think that's that's the sense I'm getting as well there's there's initial sort of gut reaction to the syntax I",
    "start": "1565520",
    "end": "1573480"
  },
  {
    "text": "mean looking at I think I've seen um an example of somebody creating a backwards",
    "start": "1573480",
    "end": "1578960"
  },
  {
    "text": "um function like a iterator right and then trying to use that in a Range",
    "start": "1578960",
    "end": "1584279"
  },
  {
    "text": "expression like basically you know you have the funk followed by another Funk with another Funk inside of it it's like",
    "start": "1584279",
    "end": "1590679"
  },
  {
    "text": "you know it's like Funk Inception you know it's it's like reading it at first you're like whoa like what is going it's",
    "start": "1590679",
    "end": "1596200"
  },
  {
    "text": "it's for people who have been looking at go for for a long time and you see that you're like Go's going in the wrong",
    "start": "1596200",
    "end": "1602399"
  },
  {
    "text": "direction why are we doing all this stuff why are we making this thing into a functional style language you know you",
    "start": "1602399",
    "end": "1608520"
  },
  {
    "text": "see all kinds of sort of a you know sort of a gut reaction to to that whole thing I think the backwards iterator thing is",
    "start": "1608520",
    "end": "1615159"
  },
  {
    "text": "actually a pretty good example like somebody was trying to say like oh look at this backwards iterator it's it's too",
    "start": "1615159",
    "end": "1620520"
  },
  {
    "text": "complicated but if you think about what does it take to write a backwards iterator with a next method the way that",
    "start": "1620520",
    "end": "1626480"
  },
  {
    "text": "you would have to write it is you would have to like on every try you would have to keep track of where you are in the",
    "start": "1626480",
    "end": "1633200"
  },
  {
    "text": "loop and then on every try you're going to see well first you have to decide you",
    "start": "1633200",
    "end": "1638480"
  },
  {
    "text": "increment before or after but then like decrement it either before or after the",
    "start": "1638480",
    "end": "1643720"
  },
  {
    "text": "call to next like either at the beginning of the call or the beginning of the end of the last call and then compare it to zero and then like I don't",
    "start": "1643720",
    "end": "1651039"
  },
  {
    "text": "know it's just a little bit tricky versus the way that you do it with the go 1.23 iterators is you just like write",
    "start": "1651039",
    "end": "1658159"
  },
  {
    "text": "a normal four statement so you write the four statement the way you would always write it and then on the inside of it",
    "start": "1658159",
    "end": "1664480"
  },
  {
    "text": "you call that inner function and then if the inner function returns false that means okay I don't want any more values",
    "start": "1664480",
    "end": "1671360"
  },
  {
    "text": "so return stop giving values and if it returns true then you go through the loop again so from a writer side again",
    "start": "1671360",
    "end": "1677919"
  },
  {
    "text": "like once you wrap your head around the weird functions calling functions part the weird signature the actual like code",
    "start": "1677919",
    "end": "1684279"
  },
  {
    "text": "on the inside is much easier to write versus because again you're just writing it in a normal for Loop way of like I've",
    "start": "1684279",
    "end": "1690960"
  },
  {
    "text": "got a for Loop I'm going to start with a value that's one less than the length I'm going to break the loop when I get",
    "start": "1690960",
    "end": "1696640"
  },
  {
    "text": "down to negative one and on every you know I minus minus right so like the",
    "start": "1696640",
    "end": "1701720"
  },
  {
    "text": "normal three part four Loop and the only hard part is yeah the yield statement",
    "start": "1701720",
    "end": "1706880"
  },
  {
    "text": "you have to do like if if not yield value instead of just saying like",
    "start": "1706880",
    "end": "1712440"
  },
  {
    "text": "something I don't know it's it's a little I'm not going to lie it's a little jarring at first like only",
    "start": "1712440",
    "end": "1718799"
  },
  {
    "text": "because you're in the world of go and there's such an emphasis on Simplicity and everything else personally when the",
    "start": "1718799",
    "end": "1725840"
  },
  {
    "text": "use for iterators come comes up and I think that's going to be that's for me that's going to be the sort of the",
    "start": "1725840",
    "end": "1731399"
  },
  {
    "text": "determining Factor right like I'm am am I going to look at code and start identifying hey you know what this is a",
    "start": "1731399",
    "end": "1737159"
  },
  {
    "text": "good place for an iterator right like basic once you understand how they work and obviously you're going need to play around with it get comfortable with it",
    "start": "1737159",
    "end": "1743720"
  },
  {
    "text": "and learn to recognize when you have an opportunity for using them the same way you you know look at any piece of code",
    "start": "1743720",
    "end": "1749320"
  },
  {
    "text": "say hey is there an opportunity for using generics here for example right um there is going to be some situ situations where you know you you need",
    "start": "1749320",
    "end": "1755799"
  },
  {
    "text": "to recognize right is this a good U place for the iterator pattern and then you know you spend the time you go look",
    "start": "1755799",
    "end": "1762320"
  },
  {
    "text": "at the docs again get a refresher and you write the thing and then you move you move you move on with your life right so it's not going to be something",
    "start": "1762320",
    "end": "1768360"
  },
  {
    "text": "that I reach for sort of automatically because I'm trying to sprinkle it on everything but it is going to be",
    "start": "1768360",
    "end": "1773440"
  },
  {
    "text": "something that I need to be aware of so that when I do come across an area of my code that could benefit from it then I",
    "start": "1773440",
    "end": "1778960"
  },
  {
    "text": "know that the feature exists I I you know I may look up I may have to find out hey I forgotten how to write these",
    "start": "1778960",
    "end": "1784679"
  },
  {
    "text": "darn things what signature do I need to do I need to satisfy like what am I doing I may have to read a documentation",
    "start": "1784679",
    "end": "1790720"
  },
  {
    "text": "but you know I do it and then I move on yeah I mentioned the xnet HTML",
    "start": "1790720",
    "end": "1796720"
  },
  {
    "text": "package before so I've been writing actually just for my job lately a lot of code that that deals with that and the",
    "start": "1796720",
    "end": "1802559"
  },
  {
    "text": "iterators have been really useful just because you know I have this tree of",
    "start": "1802559",
    "end": "1807799"
  },
  {
    "text": "HTML nodes and I want to like go through and see if you know any of them match a",
    "start": "1807799",
    "end": "1812880"
  },
  {
    "text": "particular pattern and then if they do I'm going to transform it in one way or the other and just like writing all",
    "start": "1812880",
    "end": "1818000"
  },
  {
    "text": "those helpers and things having the iterator method exist just makes that a lot easier and so yeah I've been using",
    "start": "1818000",
    "end": "1824559"
  },
  {
    "text": "it in work and it's been it's been really good yeah I think I think we'll we'll we'll be okay I mean yeah the language",
    "start": "1824559",
    "end": "1831720"
  },
  {
    "text": "is changing and it's evolving and and again once we let generics uh in the door this was a natural a little bit",
    "start": "1831720",
    "end": "1839080"
  },
  {
    "text": "inevitable yeah so yeah I mean if you go back to when I was on the show a year",
    "start": "1839080",
    "end": "1844640"
  },
  {
    "text": "ago um one of the thing I think it was a year ago one of the things mentioned was the maps meth the maps package came into",
    "start": "1844640",
    "end": "1851080"
  },
  {
    "text": "the standard library but it didn't have a keys function or a values function um",
    "start": "1851080",
    "end": "1858360"
  },
  {
    "text": "and that was a little bit disappointing because it's like oh that's something you need a lot is you want to do map.",
    "start": "1858360",
    "end": "1865320"
  },
  {
    "text": "Keys you get back a slice uh and then you want to sort that slice so that you can Loop through the values in the map",
    "start": "1865320",
    "end": "1873000"
  },
  {
    "text": "keys in order so that's a pretty common need but the reason that they held it back from the maps package at that time",
    "start": "1873000",
    "end": "1880240"
  },
  {
    "text": "uh because it had been in the um the experimental version of the maps package was because they could see that like we",
    "start": "1880240",
    "end": "1886480"
  },
  {
    "text": "think we're probably going to release it erators in the next year or something so we don't want to release a slic version of it now and then release an iterator",
    "start": "1886480",
    "end": "1894039"
  },
  {
    "text": "version of it like a year later because that would be a little bit silly so that is like a nice thing with go",
    "start": "1894039",
    "end": "1899360"
  },
  {
    "text": "1.23 if you if you have a map and you want to like go through the keys in a particular order you can just call you",
    "start": "1899360",
    "end": "1906720"
  },
  {
    "text": "know AR range statement with slices. sorted parentheses maps. Keys M or",
    "start": "1906720",
    "end": "1913559"
  },
  {
    "text": "whatever the name of your map is so it's it's a pretty simple thing it's just to you know two function calls nested and",
    "start": "1913559",
    "end": "1920760"
  },
  {
    "text": "they're pretty straightforward what they're doing it's like okay the keys call is giving me an iterator of keys",
    "start": "1920760",
    "end": "1926159"
  },
  {
    "text": "and the sorted function is sorting those keys once they get out right so yeah that's something that's it's helpful",
    "start": "1926159",
    "end": "1932880"
  },
  {
    "text": "because I've definitely I mean I know you probably have too I've written that code a lot of times of like I've got a",
    "start": "1932880",
    "end": "1938080"
  },
  {
    "text": "map I need to go through the keys in this particular order for some reason and right here's all the steps I have to",
    "start": "1938080",
    "end": "1943120"
  },
  {
    "text": "do to make that happen I'll tell you this this whole iterative business but hey",
    "start": "1943120",
    "end": "1948399"
  },
  {
    "text": "again we'll be okay so obviously that's not all there is to to this release well",
    "start": "1948399",
    "end": "1954799"
  },
  {
    "text": "maybe just before we move on I want to mention something that's not in the standard library because like that's always it's like jazz it's like what are",
    "start": "1954799",
    "end": "1960639"
  },
  {
    "text": "the packages they leave out um and so yeah right now the the",
    "start": "1960639",
    "end": "1965679"
  },
  {
    "text": "itter package is really simple like it's just basically defining those sequence",
    "start": "1965679",
    "end": "1970960"
  },
  {
    "text": "types and so somebody who's coming to this from like a functional language what you're going to look at this and",
    "start": "1970960",
    "end": "1976360"
  },
  {
    "text": "say is like okay where is my reduce my fold you know the filter um I'm going to",
    "start": "1976360",
    "end": "1984399"
  },
  {
    "text": "use the word map but map not meaning like a value pair but like the function map where you're mapping from inputs to",
    "start": "1984399",
    "end": "1991279"
  },
  {
    "text": "outputs so yeah people are going to look at that and say where are those and so the answer is that there is a proposal",
    "start": "1991279",
    "end": "1996960"
  },
  {
    "text": "for a package called X itter um which is going to be an experimental package that'll have those but I think really",
    "start": "1996960",
    "end": "2003639"
  },
  {
    "text": "the answer is that for now these are things that we want people to write on their own you know write it for your",
    "start": "2003639",
    "end": "2010039"
  },
  {
    "text": "internal company use write it and put it on GitHub and see if other people use it but I think for now the idea is to like",
    "start": "2010039",
    "end": "2016240"
  },
  {
    "text": "just let people write these for themselves and then after you know another six months another year of",
    "start": "2016240",
    "end": "2022039"
  },
  {
    "text": "people using it come back and say oh you know people use map all the time like",
    "start": "2022039",
    "end": "2027279"
  },
  {
    "text": "it's it's we're not going to get by without having it do map in the standard library or you know people use filter",
    "start": "2027279",
    "end": "2033279"
  },
  {
    "text": "all the time like it's sort of ridiculous that we don't have it or do filter and those two I think are probably someday G to make it into the",
    "start": "2033279",
    "end": "2040080"
  },
  {
    "text": "standard library but then again maybe not maybe people will say look if you want a map uh you can just put in a",
    "start": "2040080",
    "end": "2046399"
  },
  {
    "text": "Range statement and you know have slices. aend and you'll get the values out that you want and it's not a big",
    "start": "2046399",
    "end": "2051960"
  },
  {
    "text": "deal right so it could be that maybe those don't get added because the language doesn't become more of a a",
    "start": "2051960",
    "end": "2057679"
  },
  {
    "text": "functional language kind of thing um so we'll see we'll see it's that slow and steady approach that is really what's",
    "start": "2057679",
    "end": "2064638"
  },
  {
    "text": "impressive about the go standard library and the go Community as it evolves it's like",
    "start": "2064639",
    "end": "2070398"
  },
  {
    "text": "there's definitely a lot of thought put into things of not just like you know we came up with generics and here are",
    "start": "2070399",
    "end": "2075679"
  },
  {
    "text": "iterators in the same release or you know whatever we came up with iterators and here our 50 new iterator functions",
    "start": "2075679",
    "end": "2082480"
  },
  {
    "text": "it's like there are iterator functions in go 1.23 but they're ones where it's like okay you're definitely going to",
    "start": "2082480",
    "end": "2088118"
  },
  {
    "text": "want iterate over a slice you're definitely want to be able to collect a iterator into a slice and you know get",
    "start": "2088119",
    "end": "2094800"
  },
  {
    "text": "the keys out of a map insert values into a map but that's really about it like they're they're really just covering",
    "start": "2094800",
    "end": "2100599"
  },
  {
    "text": "things that are absolute fundamentals that there's like there's no way that we can release this and not have those in",
    "start": "2100599",
    "end": "2106119"
  },
  {
    "text": "it right versus things that are a little even slightly higher level like filter where it's like do we need to have",
    "start": "2106119",
    "end": "2112160"
  },
  {
    "text": "filter we'll see probably eventually we'll see yeah yeah yeah yeah so like",
    "start": "2112160",
    "end": "2117960"
  },
  {
    "text": "for my like I I keep going back to like that where I'm using it in production it's like what do I need I definitely",
    "start": "2117960",
    "end": "2123079"
  },
  {
    "text": "use the sorted thing and I need something to collect to collect all the items in a slice but I also need",
    "start": "2123079",
    "end": "2129359"
  },
  {
    "text": "something that is just getting the first value because you know like when you're doing Dom manipulation a lot of times",
    "start": "2129359",
    "end": "2135240"
  },
  {
    "text": "what you do is like if there's a value at all then return it you know if there's like one value and if if you don't find anything then just return nil",
    "start": "2135240",
    "end": "2142640"
  },
  {
    "text": "and so I actually use that a fair amount but you know I don't even think that's proposed for the standard Library so",
    "start": "2142640",
    "end": "2148839"
  },
  {
    "text": "yeah the slow deliberate approach um yeah and you know if you need something just write your own package you know",
    "start": "2148839",
    "end": "2154480"
  },
  {
    "text": "like you said put it put on GitHub you know see and I think all that's too is basically gives the go team signals",
    "start": "2154480",
    "end": "2161040"
  },
  {
    "text": "right for for the things that the the community cares about you know the most right and then saying okay does this",
    "start": "2161040",
    "end": "2166560"
  },
  {
    "text": "make sense to actually live in a stand Library proper um and I I think that's been that approach has worked well for",
    "start": "2166560",
    "end": "2173200"
  },
  {
    "text": "for go for many many years now so I think continuing to to to take the same approach here is is is",
    "start": "2173200",
    "end": "2179599"
  },
  {
    "text": "wise all right so let's let's do a quick fire through some of the some of the",
    "start": "2179599",
    "end": "2185720"
  },
  {
    "text": "less contentious additions to the link so this is oh mhm yeah okay well I'm",
    "start": "2185720",
    "end": "2191640"
  },
  {
    "text": "looking at our show notes and the show notes is not less contentious we'll see we shall see so um this this um let's",
    "start": "2191640",
    "end": "2199200"
  },
  {
    "text": "talk about Telemetry that's something that's been in go for quite some time um basically how the go tool chain is used",
    "start": "2199200",
    "end": "2206839"
  },
  {
    "text": "and that's kind of been that's an optin feature in in some of the Telemetry some Telemetry signals have been you can you",
    "start": "2206839",
    "end": "2213839"
  },
  {
    "text": "can capture them that capability has been in the language for at least two or three versions though um so what's",
    "start": "2213839",
    "end": "2219040"
  },
  {
    "text": "what's new I might be misunderstanding this so if if we're wrong somebody just like at me on Mastadon but I I think",
    "start": "2219040",
    "end": "2225680"
  },
  {
    "text": "that what the Telemetry has been around for a while maybe like a year or",
    "start": "2225680",
    "end": "2231119"
  },
  {
    "text": "something but it hasn't been in the actual go tool itself I think it's just been in go please go PLS so I think this",
    "start": "2231119",
    "end": "2238720"
  },
  {
    "text": "is maybe the first time where it's in the actual go tool itself yeah I think",
    "start": "2238720",
    "end": "2245680"
  },
  {
    "text": "so that I could be wrong so the Telemetry is actually a very common feature in like a lot of projects",
    "start": "2245680",
    "end": "2251800"
  },
  {
    "text": "whether they're open source or closed Source just like something so that you as as the person who's maintaining the",
    "start": "2251800",
    "end": "2257079"
  },
  {
    "text": "tool you know how people are using it you know what the popular features are and what the unpopular features are and",
    "start": "2257079",
    "end": "2262520"
  },
  {
    "text": "when this was proposed there was one of those big internet outcries of people saying like you can't just turn on",
    "start": "2262520",
    "end": "2268680"
  },
  {
    "text": "Telemetry like even with the ability to turn it off which it was always designed that like okay here's the button you can",
    "start": "2268680",
    "end": "2274160"
  },
  {
    "text": "press to turn it off there was a worry that like hey what about my my CI server",
    "start": "2274160",
    "end": "2279880"
  },
  {
    "text": "where I'm like building secret binaries that are not for public consumption I don't want Google to know about all the",
    "start": "2279880",
    "end": "2285200"
  },
  {
    "text": "binaries that I build just because I accidentally forgot to turn off the the thing um and so even I think the",
    "start": "2285200",
    "end": "2292560"
  },
  {
    "text": "proposed information that they were sending was like it was supposed to be very deliberately you know minimized and",
    "start": "2292560",
    "end": "2298720"
  },
  {
    "text": "minimal and they wouldn't like you know ship your source code off to some random server it was just like you know what",
    "start": "2298720",
    "end": "2304680"
  },
  {
    "text": "operating system are you on like really kind of basic stuff like that but even",
    "start": "2304680",
    "end": "2310280"
  },
  {
    "text": "with that there was sort of an Internet outcry and so then the decision was okay we're going to add Telemetry but it will",
    "start": "2310280",
    "end": "2316200"
  },
  {
    "text": "be turned off by default so with the Telemetry feature I would encourage",
    "start": "2316200",
    "end": "2321319"
  },
  {
    "text": "people if you're if you're just working on go and you're not you know worried about it if you're not like working in a",
    "start": "2321319",
    "end": "2327560"
  },
  {
    "text": "highly secure kind of situation yeah I would say just turn it on because it can't hurt one of the the issues that um",
    "start": "2327560",
    "end": "2335200"
  },
  {
    "text": "they reported that they said made them want to add Telemetry in the first place is they found that on Mac OS a lot of",
    "start": "2335200",
    "end": "2342359"
  },
  {
    "text": "computers were like just not caching builds due to like some environmental",
    "start": "2342359",
    "end": "2348760"
  },
  {
    "text": "mistake it was basically just a bug but go compiles so fast that nobody noticed nobody noticed that they weren't",
    "start": "2348760",
    "end": "2355040"
  },
  {
    "text": "caching the builds just because it builds so fast and so if they had the Telemetry they would have gotten like a",
    "start": "2355040",
    "end": "2360319"
  },
  {
    "text": "thing back saying like oh that's weird on on Mac OS like the percent of builds using the cash is only like 1% when it",
    "start": "2360319",
    "end": "2367760"
  },
  {
    "text": "should be you know 90% so something like that would have like revealed the bug sooner but since they didn't have",
    "start": "2367760",
    "end": "2374040"
  },
  {
    "text": "Telemetry it it took until somebody was like huh that's weird this is taking 100 milliseconds but it should only take",
    "start": "2374040",
    "end": "2380040"
  },
  {
    "text": "five milliseconds right yeah it's so it's so small yeah it's so fast that you probably didn't even notice yeah yeah so",
    "start": "2380040",
    "end": "2386800"
  },
  {
    "text": "a little bit controversial the Telemetry but I I think that you know hopefully since it's opt out people are going to",
    "start": "2386800",
    "end": "2392520"
  },
  {
    "text": "be able to say like if you don't like it just don't turn it on just don't turn it on with for the new stuff obviously the",
    "start": "2392520",
    "end": "2399079"
  },
  {
    "text": "the new Telemetry uh sort of a sub command for the gotool chain uh you can",
    "start": "2399079",
    "end": "2405040"
  },
  {
    "text": "and yeah and I'd encourage people to just you know go when go 2023 comes out you can simply do go Telemetry on and",
    "start": "2405040",
    "end": "2411520"
  },
  {
    "text": "that will sort of opt you in to sort of submitting some of those signals you know um and again I think folks should",
    "start": "2411520",
    "end": "2418280"
  },
  {
    "text": "definitely look at the documentation um for the Telemetry stuff and figure out exactly what is is being sent but I",
    "start": "2418280",
    "end": "2424760"
  },
  {
    "text": "think we all should definitely consider you know um turning it on and sending those signals to the go team because that that's going to help with the",
    "start": "2424760",
    "end": "2431079"
  },
  {
    "text": "decisions on on features and and changes good stuff so that's that doesn't seem",
    "start": "2431079",
    "end": "2436960"
  },
  {
    "text": "as contentious as the other it's not as contentious as it was when they proposed it I guess when they proposed it because",
    "start": "2436960",
    "end": "2442359"
  },
  {
    "text": "they proposed having it on by default that definitely was contentious yeah yeah yeah let me see what else we got",
    "start": "2442359",
    "end": "2448079"
  },
  {
    "text": "here we've got the um link name what is that I don't I can't even see I can remember seeing this so link name um",
    "start": "2448079",
    "end": "2454440"
  },
  {
    "text": "this is another one where I don't know if this one is cont but it is something that you if it affects you it affects",
    "start": "2454440",
    "end": "2461400"
  },
  {
    "text": "you so Ino there's the concept of a package variable being exported or not",
    "start": "2461400",
    "end": "2466960"
  },
  {
    "text": "exported right and so we're all I think if you're if you're past like the beginner stage familiar with this that",
    "start": "2466960",
    "end": "2472160"
  },
  {
    "text": "you use a capital letter to say hey this is a public variable anybody can import it or you use a lowercase letter and",
    "start": "2472160",
    "end": "2479319"
  },
  {
    "text": "then it's like hey this is internal don't you can't import it but there's actually a secret way to import it",
    "start": "2479319",
    "end": "2485640"
  },
  {
    "text": "anyway which is the L name um so link name is just this idea of you know",
    "start": "2485640",
    "end": "2491040"
  },
  {
    "text": "sometimes when you have like a complicated binary you need to just like hook in some bit of pre-compiled code",
    "start": "2491040",
    "end": "2498680"
  },
  {
    "text": "and you know maybe it's it's from something from C or something from rust or something from some other language or",
    "start": "2498680",
    "end": "2504640"
  },
  {
    "text": "you know you have a dll that you got from a vendor and you have no idea how they built it um whatever it is so",
    "start": "2504640",
    "end": "2510240"
  },
  {
    "text": "there's different times when you need to be able to use the Linker to like just insert some binary code here from",
    "start": "2510240",
    "end": "2516000"
  },
  {
    "text": "wherever and so link name is a it's a magic comment that you can put into your",
    "start": "2516000",
    "end": "2521040"
  },
  {
    "text": "code that will let you you know link into different things and people have been being a little bit naughty they've",
    "start": "2521040",
    "end": "2526720"
  },
  {
    "text": "been using it to link into the standard library and to access unexported",
    "start": "2526720",
    "end": "2531760"
  },
  {
    "text": "variables naughty functions yeah it's a little bit naughty so they've been using that to say like oh you know you guys",
    "start": "2531760",
    "end": "2538599"
  },
  {
    "text": "don't export the runtime. whatever but I need to know that or I feel like I need to know that and so I'm just going to",
    "start": "2538599",
    "end": "2544800"
  },
  {
    "text": "link into it and so what they're doing and go 123 is they're basically putting",
    "start": "2544800",
    "end": "2550000"
  },
  {
    "text": "like a list of like these are the things that you're still allowed to use Link name on because again we have this really really really strong backwards",
    "start": "2550000",
    "end": "2557000"
  },
  {
    "text": "compatibility guarantee and even though people are doing something that's naughty and you shouldn't be doing it um",
    "start": "2557000",
    "end": "2563800"
  },
  {
    "text": "even though people are are doing this uh bad behavior we're going to let them keep doing it but we're going to say no",
    "start": "2563800",
    "end": "2569240"
  },
  {
    "text": "new link names um so you can linkname your o own code you can linkname your own objects but you're not allowed to",
    "start": "2569240",
    "end": "2576040"
  },
  {
    "text": "use Link name to go into the standard library for any new functions that they",
    "start": "2576040",
    "end": "2581079"
  },
  {
    "text": "add to it from now on and yeah for old ones it's like there's like a a list",
    "start": "2581079",
    "end": "2586880"
  },
  {
    "text": "that's in the standard LI or in the gotool you know project of like here's the list of things you're allowed to",
    "start": "2586880",
    "end": "2592559"
  },
  {
    "text": "link name and when you're allowed to link name them uh and if you want to be accessing these secret variables you",
    "start": "2592559",
    "end": "2599160"
  },
  {
    "text": "shouldn't be accessing you should either open a proposal to make it public or beg to get onto the link name list because",
    "start": "2599160",
    "end": "2606160"
  },
  {
    "text": "uh there's no more free link names just uh making making it official",
    "start": "2606160",
    "end": "2613319"
  },
  {
    "text": "these are the things that you you're safe to to look for anything else you're",
    "start": "2613319",
    "end": "2618400"
  },
  {
    "text": "you're asking for trouble I mean people can always like there you know it's like it's a computer right so it's all in",
    "start": "2618400",
    "end": "2623480"
  },
  {
    "text": "there somewhere so you know if you're really crafty you can like use unsafe and like okay I'm going to load up the",
    "start": "2623480",
    "end": "2629480"
  },
  {
    "text": "binary I'm going to use unsafe I'm going to inspect each bite until I get to the bite in memory that controls this thing",
    "start": "2629480",
    "end": "2636880"
  },
  {
    "text": "wow it must be in there somewhere but uh hopefully people will not get to that level of desperation although you never",
    "start": "2636880",
    "end": "2642920"
  },
  {
    "text": "know yeah I mean unless unless that is your job right unless you're like maybe you don't know red team or something and",
    "start": "2642920",
    "end": "2648480"
  },
  {
    "text": "and that's part of your job who knows right in any case in any case so we have what seem to be what seems to be some",
    "start": "2648480",
    "end": "2656280"
  },
  {
    "text": "efficiency changes to the timer the ticker and timer types in the time",
    "start": "2656280",
    "end": "2661800"
  },
  {
    "text": "package yeah these are just like some nice little quality of life Improvement things um so with the the time. ticker",
    "start": "2661800",
    "end": "2668960"
  },
  {
    "text": "and time. timer functions there's always been like a few little things where you have to like read the docs and it says",
    "start": "2668960",
    "end": "2674920"
  },
  {
    "text": "hey just so you know if you're in a loop and you're going through these timers",
    "start": "2674920",
    "end": "2681520"
  },
  {
    "text": "really quickly a problem that you can have is let's say you have something where it's like okay I want to have a timeout and if this takes more than 500",
    "start": "2681520",
    "end": "2689160"
  },
  {
    "text": "milliseconds then just abort so what would end up happening if you wrote your code wrong is most of the time it goes",
    "start": "2689160",
    "end": "2695240"
  },
  {
    "text": "through the happy path but then meanwhile there's a whole go routine out there waiting you know for that 500",
    "start": "2695240",
    "end": "2701400"
  },
  {
    "text": "milliseconds to pass and then it finally gets to 500 milliseconds and it says okay oh nobody wanted me all right bye",
    "start": "2701400",
    "end": "2708880"
  },
  {
    "text": "and so you just end up with like all these unexpired timers just sort of waiting for their expiration to happen",
    "start": "2708880",
    "end": "2715520"
  },
  {
    "text": "before they finally are free to clean up the garbage um and there was a way you could work around that you could like",
    "start": "2715520",
    "end": "2721359"
  },
  {
    "text": "defer a call to stop or whatever just different ways of working around it but now just quality of life don't even",
    "start": "2721359",
    "end": "2727240"
  },
  {
    "text": "think about this ignore this whole thing if you have any code in your project to like make sure that the timers get",
    "start": "2727240",
    "end": "2732520"
  },
  {
    "text": "cleaned up it doesn't matter anymore it'll just automatically clean itself up at the right time right right yeah which",
    "start": "2732520",
    "end": "2739559"
  },
  {
    "text": "until I read the the release notes I didn't even know it was doing this um I was like completely surprised me well",
    "start": "2739559",
    "end": "2746160"
  },
  {
    "text": "the thing is it was like if you don't defer the stop it will get cleaned up it just it won't get cleaned up until after",
    "start": "2746160",
    "end": "2752920"
  },
  {
    "text": "the time has expired so now it's like as soon as it detects that nobody is waiting on the time it's like okay",
    "start": "2752920",
    "end": "2758359"
  },
  {
    "text": "nobody's waiting for me I'm just quitting right right which makes sense it's the Friday the Friday edition of of",
    "start": "2758359",
    "end": "2764640"
  },
  {
    "text": "go. timer all right so there's a unique",
    "start": "2764640",
    "end": "2770000"
  },
  {
    "text": "package what is that about yeah a very unique package so there are two new packages in this version of ghost so",
    "start": "2770000",
    "end": "2775920"
  },
  {
    "text": "like the iterators thing is pretty big but there's also two new packages so the unique package is something that um",
    "start": "2775920",
    "end": "2782160"
  },
  {
    "text": "basically uh allows for interning if you are familiar with that that's something that comes up a lot in Java I think that",
    "start": "2782160",
    "end": "2789079"
  },
  {
    "text": "the strings either were interned before or maybe they still are um but interning",
    "start": "2789079",
    "end": "2794240"
  },
  {
    "text": "is just the idea that a lot of times let's say you're you're parsing through a text file and you want to read each",
    "start": "2794240",
    "end": "2799800"
  },
  {
    "text": "word in the text file and so each word is a little string right but an issue that you'll get is let's say the the",
    "start": "2799800",
    "end": "2805400"
  },
  {
    "text": "text file contains the word the 7,000 times Well now you're getting 7,000 copies of the same string but you don't",
    "start": "2805400",
    "end": "2811599"
  },
  {
    "text": "need 7,000 copies of the same string because they're all identical right and so interning is this idea of like going",
    "start": "2811599",
    "end": "2817880"
  },
  {
    "text": "through and D duplicating and like if the value is the same then you only want one pointer to memory for it um so the",
    "start": "2817880",
    "end": "2825040"
  },
  {
    "text": "unique package is just a new package that lets you do this interning efficiently with the garbage collector",
    "start": "2825040",
    "end": "2831240"
  },
  {
    "text": "an issue you could get is like let's say you're like well all right I'll just make a map and it'll map from whatever",
    "start": "2831240",
    "end": "2837440"
  },
  {
    "text": "my key type is let's say a string to like a an empty struct or something like that and so every time I get the string",
    "start": "2837440",
    "end": "2843760"
  },
  {
    "text": "in I'll just um put it into the map and I'll use that as my my one memory",
    "start": "2843760",
    "end": "2849079"
  },
  {
    "text": "location for it and so I can D duplicate things that way uh and that works fine but the problem is the garbage collector",
    "start": "2849079",
    "end": "2855520"
  },
  {
    "text": "as long as the values are in the map can never you know never clean up that memory so the only way to do a memory",
    "start": "2855520",
    "end": "2861839"
  },
  {
    "text": "clean is just to delete the whole map and start over because as far as the garbage collector knows everything in",
    "start": "2861839",
    "end": "2867440"
  },
  {
    "text": "that map is something you're going to get back to later being used right yeah and so the unique package lets the",
    "start": "2867440",
    "end": "2872640"
  },
  {
    "text": "garbage collector work together with the package and make sure that if there are",
    "start": "2872640",
    "end": "2877960"
  },
  {
    "text": "duplicate values or duplicated values that you don't need anymore then it can go ahead and clean those up so it's one",
    "start": "2877960",
    "end": "2884200"
  },
  {
    "text": "of those ones it's pretty subtle like it's definitely something like following the the issue for it like that there's a",
    "start": "2884200",
    "end": "2891119"
  },
  {
    "text": "lot of back and forth about well weak pointers are another similar idea of like a pointer to something where it's",
    "start": "2891119",
    "end": "2896440"
  },
  {
    "text": "like the garbage collector is still allowed to collect this and take it away so this sort of overlaps with the idea",
    "start": "2896440",
    "end": "2901559"
  },
  {
    "text": "of a weak pointer it's just like it's like a little pointer to something but if you don't need it anymore we can get rid of it",
    "start": "2901559",
    "end": "2907319"
  },
  {
    "text": "right feel free to GC it okay the Str package the other unique package yeah",
    "start": "2907319",
    "end": "2913319"
  },
  {
    "text": "this one is interesting um we were talking off mic about how this package doesn't do anything right yeah I was",
    "start": "2913319",
    "end": "2919800"
  },
  {
    "text": "looking at I'm like uh what exactly is the use for this so the Str package is interesting it's it's almost like it's",
    "start": "2919800",
    "end": "2926400"
  },
  {
    "text": "like a future work sign it's like it's letting you know that like Hey we're not doing anything right now but we might",
    "start": "2926400",
    "end": "2932559"
  },
  {
    "text": "want to do something in the future so the Str package only has one type and",
    "start": "2932559",
    "end": "2937839"
  },
  {
    "text": "that type is um host layout and that is just a zero byte struct and the idea of",
    "start": "2937839",
    "end": "2945799"
  },
  {
    "text": "the strs package is if you want to let the compiler know that hey it's important for this particular struct to",
    "start": "2945799",
    "end": "2951880"
  },
  {
    "text": "be laid out in the way that my host operating system or host whatever expects it to be laid out put this at",
    "start": "2951880",
    "end": "2958440"
  },
  {
    "text": "the front and so pretty much that's what go does already and so I think the idea",
    "start": "2958440",
    "end": "2964720"
  },
  {
    "text": "is that in a future version of go they would would really like it if they could lay out strs more efficiently like look",
    "start": "2964720",
    "end": "2970359"
  },
  {
    "text": "at the struct and be like you know what it would be more efficient if we put all the bols together in the front and if we put the slices over here and you know",
    "start": "2970359",
    "end": "2978040"
  },
  {
    "text": "get rid of it the empty space because one of the things with strs is if you have strs the fields are different sizes",
    "start": "2978040",
    "end": "2983960"
  },
  {
    "text": "you sometime have to put empty space in between them so that the memory can all be accessed quickly and efficiently so",
    "start": "2983960",
    "end": "2991240"
  },
  {
    "text": "you know it would be nice if you could do automatic um struck field re reordering but you can't do that now",
    "start": "2991240",
    "end": "2996799"
  },
  {
    "text": "because if you do that then anybody who's relying on the Str being laid out in a certain order is going to be messed",
    "start": "2996799",
    "end": "3002960"
  },
  {
    "text": "up and so this is basically like a warning sign like Hey we're not rearranging strs right now but uh if you",
    "start": "3002960",
    "end": "3009880"
  },
  {
    "text": "don't want to get rearranged in the future just go ahead and put this in your struct but right right this yeah",
    "start": "3009880",
    "end": "3015319"
  },
  {
    "text": "this whole struck packing business I remember that one like there was a time maybe like five six years ago where they",
    "start": "3015319",
    "end": "3020680"
  },
  {
    "text": "like a bunch of blog post saying hey if you lay out your struck in this particular way you're going to get more efficiency whatever it is I'm like well",
    "start": "3020680",
    "end": "3026799"
  },
  {
    "text": "doesn't go do this out out of the box right like um and then and I started thinking well if we started messing",
    "start": "3026799",
    "end": "3033400"
  },
  {
    "text": "around with the order of fields and things of that nature anybody who's initializing structs not in a key value",
    "start": "3033400",
    "end": "3039280"
  },
  {
    "text": "style you're asking for trouble right because you know if you're if you're relying on positional um initialization",
    "start": "3039280",
    "end": "3045359"
  },
  {
    "text": "for for fields in a struct which is why I always teach against doing that if you're G to use a struct always use key",
    "start": "3045359",
    "end": "3050960"
  },
  {
    "text": "value pairs because you never know somebody could change two bulls right Fields right and oh yeah they switch it",
    "start": "3050960",
    "end": "3057200"
  },
  {
    "text": "around and they you know what it makes more sense to have like blow up the planet first and then have like you know",
    "start": "3057200",
    "end": "3063760"
  },
  {
    "text": "whatever puppies or something yeah save the puppies yeah the planet gets blown up but the puppies are saved exactly",
    "start": "3063760",
    "end": "3070400"
  },
  {
    "text": "exactly yeah so yeah things of that nature like you know it was it was I'm like okay so if if it sounds like the",
    "start": "3070400",
    "end": "3078119"
  },
  {
    "text": "stru package is inching towards um sort of more efficient or or some some",
    "start": "3078119",
    "end": "3085119"
  },
  {
    "text": "different way of lining up and and doing some stru packing I would imagine right so yeah so I was reading through the",
    "start": "3085119",
    "end": "3091839"
  },
  {
    "text": "proposal notes for this I think the one area where this will make an effect in um current versions of go is if you're",
    "start": "3091839",
    "end": "3098720"
  },
  {
    "text": "making a web assembly binary for that I think there's something just like web",
    "start": "3098720",
    "end": "3103839"
  },
  {
    "text": "assembly is weird compared to other platforms like it doesn't have registers it has stack values and I don't know I",
    "start": "3103839",
    "end": "3111480"
  },
  {
    "text": "haven't looked into the details deeply but it it's it's weird so for web assembly just because web assembly is so",
    "start": "3111480",
    "end": "3116680"
  },
  {
    "text": "weird if you want it laid out the way web assembly expects you can use this struct to make sure that it is in that",
    "start": "3116680",
    "end": "3122079"
  },
  {
    "text": "that weirdo web assembly way you heard to hear first web assembly",
    "start": "3122079",
    "end": "3128359"
  },
  {
    "text": "considered a weirdo we assembly weird the last piece here before we get",
    "start": "3128359",
    "end": "3134240"
  },
  {
    "text": "into some unpops oh actually you might have a couple more things oh yeah I have you have some thoughts you have some",
    "start": "3134240",
    "end": "3139640"
  },
  {
    "text": "thoughts on on oh no no yeah oh well I have one contribution to this version of go which again it's like the feline",
    "start": "3139640",
    "end": "3146160"
  },
  {
    "text": "contrib bution that's the Carana special yeah let's talk about that before we before we move on to the OS package yeah",
    "start": "3146160",
    "end": "3151880"
  },
  {
    "text": "okay yeah so um so we said that with the iterators um not to go back to iterators",
    "start": "3151880",
    "end": "3157720"
  },
  {
    "text": "we can't escape them we're returning returning over and over again so the iterators uh in go 1.23 there are some",
    "start": "3157720",
    "end": "3164960"
  },
  {
    "text": "basic like just helpers for using iterators um but there's not actually a lot of like use of iterators per se like",
    "start": "3164960",
    "end": "3172839"
  },
  {
    "text": "you might expect like oh can we get a new version of the IO scanner that returns an iterator maybe it'll come in",
    "start": "3172839",
    "end": "3179200"
  },
  {
    "text": "the future it's not there yet or the one that I really want is a file Walker because the file Walker right now takes",
    "start": "3179200",
    "end": "3185200"
  },
  {
    "text": "this weird function call back and it's like I don't know I just hate writing it every time I write the file Walker call",
    "start": "3185200",
    "end": "3191359"
  },
  {
    "text": "back I hate it I would love that to be an iterator but those don't exist yet um but what did make it into go 1.23 is",
    "start": "3191359",
    "end": "3198119"
  },
  {
    "text": "something in the reflect package and so this I just opened the proposal because I saw that there was like a need for it",
    "start": "3198119",
    "end": "3205160"
  },
  {
    "text": "and basically What it lets you do is if you have a reflect value um so the reflect package in general lets you look",
    "start": "3205160",
    "end": "3210960"
  },
  {
    "text": "at go values of any type and then figure out what the type is and what you're allowed to do to the type and you know",
    "start": "3210960",
    "end": "3217200"
  },
  {
    "text": "act on the type in different ways so if the type is an iterator now you have an easy and convenient way to call it um",
    "start": "3217200",
    "end": "3224359"
  },
  {
    "text": "using reflect value. seek or if it's a a seek 2 an it. seek 2 you can use it",
    "start": "3224359",
    "end": "3230880"
  },
  {
    "text": "reflect value. seek 2 U and then the reflect type now has like a can seek and a canseek to method um so that you know",
    "start": "3230880",
    "end": "3237799"
  },
  {
    "text": "whether you can call the seek methods on it or not so yeah it's just like a little convenient way of getting an",
    "start": "3237799",
    "end": "3244559"
  },
  {
    "text": "iterator back from this value so you're inspecting it you're like um I think this like really probably the the tricky",
    "start": "3244559",
    "end": "3251319"
  },
  {
    "text": "part is going to be you have this function and you don't know quite what the types are for the function so that's",
    "start": "3251319",
    "end": "3257040"
  },
  {
    "text": "why you're using reflect and you're like I know this is going to be an iterator or I think it's supposed to be an iterator they're supposed to pass me an",
    "start": "3257040",
    "end": "3262799"
  },
  {
    "text": "iterator but I don't know what the types are and so this is just like a nice convenient way of saying like okay whatever the type is first I'm going to",
    "start": "3262799",
    "end": "3269559"
  },
  {
    "text": "see if it can seek by calling can seek and then I'm going to get the sequence back by calling value. seek and then",
    "start": "3269559",
    "end": "3275960"
  },
  {
    "text": "just go through each of the values that way right yeah that seems very useful yeah yeah and so this was actually",
    "start": "3275960",
    "end": "3282400"
  },
  {
    "text": "implemented I think now because they want to add it so for the template package the template package is also",
    "start": "3282400",
    "end": "3288200"
  },
  {
    "text": "going to I don't think it made it into 123 but it's also going to get the ability to go through you know iterators",
    "start": "3288200",
    "end": "3295040"
  },
  {
    "text": "in your templates that makes sense and so it needed to have this in already so that you could add that to the",
    "start": "3295040",
    "end": "3300160"
  },
  {
    "text": "template package as well that makes sense that makes sense so the last the last uh um one we're looking at here is",
    "start": "3300160",
    "end": "3306480"
  },
  {
    "text": "from the OS package what is this copy FS um so FS is that was like I think that",
    "start": "3306480",
    "end": "3311720"
  },
  {
    "text": "was was that what I originally came on go time was to talk about the the file system embed I think that was it",
    "start": "3311720",
    "end": "3317680"
  },
  {
    "text": "probably who knows um but uh so the the file system package",
    "start": "3317680",
    "end": "3323920"
  },
  {
    "text": "so IO FS um so you can think of the io package as being like sort of virtual",
    "start": "3323920",
    "end": "3329160"
  },
  {
    "text": "files there's a virtual readable file which is the io reader and there's a virtual writable file which is IO writer",
    "start": "3329160",
    "end": "3336119"
  },
  {
    "text": "and then iio FS takes like collections of virtual files and turns them into a virtual file system and so os. copy FS",
    "start": "3336119",
    "end": "3344880"
  },
  {
    "text": "What it lets you do is to input a file system and then just copy all of the files out into wherever they need to be",
    "start": "3344880",
    "end": "3351880"
  },
  {
    "text": "um so this is convenient it also solves a problem of if you wanted to copy um a bunch of you know not even virtual",
    "start": "3351880",
    "end": "3358880"
  },
  {
    "text": "files but like regular files that are on disk up until now and go you've had to like either write the utility yourself",
    "start": "3358880",
    "end": "3364760"
  },
  {
    "text": "or find something find somebody else's package and import it to copy a directory um but now what you could do",
    "start": "3364760",
    "end": "3370559"
  },
  {
    "text": "is you can just take the system directory turn it into an FS using like",
    "start": "3370559",
    "end": "3375640"
  },
  {
    "text": "os. FS I think that's the the function that does it um but you turn it into an",
    "start": "3375640",
    "end": "3380720"
  },
  {
    "text": "fs and then use the copy FS to to copy the whole directory where you want it to be um so yeah it's nice um convenience",
    "start": "3380720",
    "end": "3387799"
  },
  {
    "text": "right MH yeah okay okay all right so this was this was packed with with some",
    "start": "3387799",
    "end": "3393280"
  },
  {
    "text": "new some goodies than iteration a lot yeah I was surprised when I was going through the notes I was like well this",
    "start": "3393280",
    "end": "3398760"
  },
  {
    "text": "is the big iterators release they don't have time to do other stuff and they're like no we're going to put in two whole new packages nice nice nice all right so",
    "start": "3398760",
    "end": "3406839"
  },
  {
    "text": "I think I think it's time to talk unpopular opinions here so let me let me get this jingle going",
    "start": "3406839",
    "end": "3415599"
  },
  {
    "text": "un opinion you what I actually think you should probably [Music]",
    "start": "3416640",
    "end": "3423889"
  },
  {
    "text": "leave [Music]",
    "start": "3424400",
    "end": "3429790"
  },
  {
    "text": "opinion all right all right all right what what what you got for us so I have",
    "start": "3429960",
    "end": "3435200"
  },
  {
    "text": "to say this is not my unpopular opinion but maybe it should be is uh you know if you're a regular on go time you need to",
    "start": "3435200",
    "end": "3442640"
  },
  {
    "text": "have an Apple notes or you know Android notes whatever it is file on your phone called unpopular opinions and anytime",
    "start": "3442640",
    "end": "3449680"
  },
  {
    "text": "you think of one you write it down in there that's what I do and so I've got I've got you know I don't come on the",
    "start": "3449680",
    "end": "3455039"
  },
  {
    "text": "show quite as often you know so I don't have to like have quite as many but I do have like a couple of spares at all",
    "start": "3455039",
    "end": "3460799"
  },
  {
    "text": "times nice nice let's let's pull out one of those spares all right so this is one",
    "start": "3460799",
    "end": "3465880"
  },
  {
    "text": "of my spares here um this is a I have it's it's two opinions about pencils um",
    "start": "3465880",
    "end": "3470960"
  },
  {
    "text": "so my fir so I'm holding up this pencil for for Johnny to see so this is a pencil I was given by my Japanese",
    "start": "3470960",
    "end": "3477799"
  },
  {
    "text": "hostother after I returned to America you know we were corresponding and she was saying like well is there anything",
    "start": "3477799",
    "end": "3483559"
  },
  {
    "text": "from Japan you really want anything you you miss and I say can you send me some pencils pens really are they that good",
    "start": "3483559",
    "end": "3491200"
  },
  {
    "text": "well they're nice and what's really nice in Japan is that they don't use the number two pencil they use the number",
    "start": "3491200",
    "end": "3499079"
  },
  {
    "text": "one pencil and so my unpopular opinion is number two pencils are not as good as",
    "start": "3499079",
    "end": "3504359"
  },
  {
    "text": "number one pencils you should use a number one pencil that's why it's called number one",
    "start": "3504359",
    "end": "3510079"
  },
  {
    "text": "pencil okay what's the actual what's the actual difference like when you using them yeah so basically the the scale is",
    "start": "3510079",
    "end": "3518039"
  },
  {
    "text": "about how hard the the lead the graphite is and so a number one is just it's",
    "start": "3518039",
    "end": "3523160"
  },
  {
    "text": "softer and it writes so easily and the downside is that the the marks um",
    "start": "3523160",
    "end": "3528480"
  },
  {
    "text": "they're a little bit blurrier it's easier to like blur the writing to smudge it and you go through a pencil",
    "start": "3528480",
    "end": "3535400"
  },
  {
    "text": "faster it's just melting off your your pencil instead um but I love it it's darker it writes smoothly it writes",
    "start": "3535400",
    "end": "3542880"
  },
  {
    "text": "easily everybody should always use number one pencil number two pencils they're crap they're terrible every time",
    "start": "3542880",
    "end": "3548079"
  },
  {
    "text": "I have to use one I'm like this is so awful and then even the standardized tests they all say number two pencil or",
    "start": "3548079",
    "end": "3553440"
  },
  {
    "text": "number one is good too and it's like oh my God there's no reason to use number one or number two just always use number",
    "start": "3553440",
    "end": "3558520"
  },
  {
    "text": "one um so that's my unpopular pencil opinion part A A and then Part B is that",
    "start": "3558520",
    "end": "3565640"
  },
  {
    "text": "you you shouldn't put an eraser on the end of the pencils because what happens every single time you use it you use up",
    "start": "3565640",
    "end": "3572960"
  },
  {
    "text": "the Eraser before you use up the pencil and so you've got this whole huge pencil and then like the little itty grossy bit",
    "start": "3572960",
    "end": "3580559"
  },
  {
    "text": "of eraser on the end and that's that's awful you end up having to have a",
    "start": "3580559",
    "end": "3585599"
  },
  {
    "text": "separate eraser anyway yeah you end up having to have a separate eraser anyways yeah so my my solution is you know use",
    "start": "3585599",
    "end": "3591839"
  },
  {
    "text": "the Eraser caps get a number one pencil with no eraser put either a rubber eraser cap on the end or just have like",
    "start": "3591839",
    "end": "3598880"
  },
  {
    "text": "a a separate you know Square eraser next to it that's the way you should do it",
    "start": "3598880",
    "end": "3604359"
  },
  {
    "text": "you shouldn't you shouldn't buy a number two pencil with an eraser on the end that's just it's barbaric double yeah",
    "start": "3604359",
    "end": "3610640"
  },
  {
    "text": "like Japanese know about caligraphy they know they know the right way to do this",
    "start": "3610640",
    "end": "3615799"
  },
  {
    "text": "awesome you know there's a lot of little strokes in those characters so yeah you have to you have to be able to write it",
    "start": "3615799",
    "end": "3620960"
  },
  {
    "text": "with a really nice pencil when you do it indeed that makes sense I'm not sure if my opinion is unpopular I think that's",
    "start": "3620960",
    "end": "3628119"
  },
  {
    "text": "the everybody says that right I think even me like I'm going to have an opinion but how much it's going to be popular or not so I'm notic I'm starting",
    "start": "3628119",
    "end": "3635079"
  },
  {
    "text": "to notice this trend with uh um companies that have Legacy software in",
    "start": "3635079",
    "end": "3640520"
  },
  {
    "text": "this age of AI that we're living in they are starting to they've caught on to a",
    "start": "3640520",
    "end": "3645880"
  },
  {
    "text": "I'd say I don't want I don't know if it's a trick or if it's a business strategy you know depending on who's",
    "start": "3645880",
    "end": "3651640"
  },
  {
    "text": "who's depending on who's looking at it they if they sprinkle right a little bit of AI maybe add a little bit of chat a",
    "start": "3651640",
    "end": "3657880"
  },
  {
    "text": "little bit of summarization or something right um um something AI on in the app",
    "start": "3657880",
    "end": "3663119"
  },
  {
    "text": "somewhere in there whether it's a useful feature or not who knows maybe it doesn't even matter and then slap the",
    "start": "3663119",
    "end": "3668920"
  },
  {
    "text": "term AI native on on that Legacy piece of software then then all of a sudden",
    "start": "3668920",
    "end": "3675160"
  },
  {
    "text": "Revenue starts you know shooting up again you know you start you you've you've added a new shine right to your",
    "start": "3675160",
    "end": "3681000"
  },
  {
    "text": "legacy product still does the same thing you you now you've got some llm",
    "start": "3681000",
    "end": "3686039"
  },
  {
    "text": "somewhere you know generating tax but now you can charge more because you're now ai native yeah I don't know I I feel",
    "start": "3686039",
    "end": "3693720"
  },
  {
    "text": "like I'm like an AI moderate like there are some people who are like real AI die",
    "start": "3693720",
    "end": "3699039"
  },
  {
    "text": "hards and like then the extreme die hards are like AI is going to destroy the world but we have to keep going and it's like no if you think it's going to",
    "start": "3699039",
    "end": "3705559"
  },
  {
    "text": "destroy the world we should probably stop right yeah no no but then there's like the other side or people who are just like it's pure spicy autocomplete",
    "start": "3705559",
    "end": "3712359"
  },
  {
    "text": "there's nothing to it and it's like well it's a little bit better than spicy Auto complete the thing I've been using AI",
    "start": "3712359",
    "end": "3717640"
  },
  {
    "text": "for a lot lately is just like really extremely boring mom core cooking of",
    "start": "3717640",
    "end": "3723279"
  },
  {
    "text": "like you know it's just like how do I make this casserole and it's like I could just search for it right but the",
    "start": "3723279",
    "end": "3729279"
  },
  {
    "text": "problem is all the recipe websites have now been junked up by AI right right they're all just like these terrible",
    "start": "3729279",
    "end": "3735440"
  },
  {
    "text": "like they're filled with ads there's a million ads and all this stuff you have to Wade through to get to the actual recipe which probably wasn't even",
    "start": "3735440",
    "end": "3741480"
  },
  {
    "text": "written by a person it was just written by AI right it's like okay I'm just gonna ask Claude Claude how do you make",
    "start": "3741480",
    "end": "3746960"
  },
  {
    "text": "this casserole and then it's like should I substitute something in here and you know it'll just tell me and it's fine so",
    "start": "3746960",
    "end": "3753119"
  },
  {
    "text": "I've been doing a lot of that with AI lately it's just like Claude my ice cream came out too hard did I",
    "start": "3753119",
    "end": "3759039"
  },
  {
    "text": "over and they're like yeah you probably just put it in the the mixer for too long it's like okay next time I'll only",
    "start": "3759039",
    "end": "3764839"
  },
  {
    "text": "do it for 15 minutes see how it does you just gave me an unpopular opinion I think um um recipe websites are trash",
    "start": "3764839",
    "end": "3772160"
  },
  {
    "text": "like oh I don't know that that's unpopular I don't know that anybody likes them they're so bad now they're awful it's so bad you have to read",
    "start": "3772160",
    "end": "3778319"
  },
  {
    "text": "through like like and and the thing is people like complain about this all the time so you would think that Google would be like you know what we really",
    "start": "3778319",
    "end": "3784760"
  },
  {
    "text": "like people going to Long web pages with ads but for recipes in particular so many people are complaining about how",
    "start": "3784760",
    "end": "3790920"
  },
  {
    "text": "bad recipe websites are we're going to send the SEO to like the small websites that don't have many ads so that people",
    "start": "3790920",
    "end": "3796920"
  },
  {
    "text": "will keep using Google but it's like no they're not going to do it so those recipe websites are so like",
    "start": "3796920",
    "end": "3803599"
  },
  {
    "text": "my I can't like look at them on my phone I have this old so maybe part of it's my fault that I have a four-year-old phone no no even a new phon is terrible",
    "start": "3803599",
    "end": "3810359"
  },
  {
    "text": "terrible but it's like my phone like grinds to a halt and it's like yeah it's so bad so it's like yeah I'm always",
    "start": "3810359",
    "end": "3817160"
  },
  {
    "text": "using gen AI for the thing yeah but I think that's so going back to your unpopular opinion I think it's true a",
    "start": "3817160",
    "end": "3823279"
  },
  {
    "text": "lot of people are adding AI features where it's like it's not clear that it's",
    "start": "3823279",
    "end": "3828839"
  },
  {
    "text": "better to have ai in your app versus just like I have a second browser tab",
    "start": "3828839",
    "end": "3834079"
  },
  {
    "text": "open to Claud or to chat GPT or I'm running mistol or one of the local",
    "start": "3834079",
    "end": "3839640"
  },
  {
    "text": "models like I I don't know that it's better per se to like have it integrated",
    "start": "3839640",
    "end": "3845240"
  },
  {
    "text": "at least the way that so far I've seen people integrating it because a lot of them they just feel like they're just",
    "start": "3845240",
    "end": "3851240"
  },
  {
    "text": "slapping it on there like yeah I don't know I think that in the long run it'll",
    "start": "3851240",
    "end": "3856319"
  },
  {
    "text": "be good like as people figure out what works and what doesn't work and like where it's helpful and not helpful but",
    "start": "3856319",
    "end": "3863440"
  },
  {
    "text": "yeah we're we're I think we're still in like the pets.com era of generative AI",
    "start": "3863440",
    "end": "3870079"
  },
  {
    "text": "where they're like we're gonna ship 10 pounds of dog food to people and it's like that's really expensive to ship",
    "start": "3870079",
    "end": "3877640"
  },
  {
    "text": "something that heavy from a small number of warehouses you're you should start",
    "start": "3877640",
    "end": "3882680"
  },
  {
    "text": "with something small and light Like A Book Like No go hard or go home go go yeah go big or go home it's like you",
    "start": "3882680",
    "end": "3889000"
  },
  {
    "text": "know nowadays in the 21st you know in the 2024 you can get 10 pounds of dog",
    "start": "3889000",
    "end": "3894160"
  },
  {
    "text": "food shipped to you and it's not a big deal but that's because now Amazon has a warehouse on every like street corner",
    "start": "3894160",
    "end": "3899880"
  },
  {
    "text": "right right and so the economics are different versus like we're going to start with 10 pounds of dog",
    "start": "3899880",
    "end": "3905000"
  },
  {
    "text": "food yes indeed indeed well that seems like a good a good place to uh to wrap",
    "start": "3905000",
    "end": "3911279"
  },
  {
    "text": "up the episode Colina always a pleasure having you uh to review yeah thank you for having me back again it's always fun",
    "start": "3911279",
    "end": "3917200"
  },
  {
    "text": "to come on and talk about what's new and go and it's like this slow and steady Improvement thing is it's really what's",
    "start": "3917200",
    "end": "3923640"
  },
  {
    "text": "fun about go is like watching how they like set down markers of like we're not",
    "start": "3923640",
    "end": "3928799"
  },
  {
    "text": "adding maps. keys we're going to add iterators we think probably maybe and then then it happens so it's always",
    "start": "3928799",
    "end": "3936440"
  },
  {
    "text": "exciting slow and steady I like it that is go time for this week thanks",
    "start": "3936440",
    "end": "3943559"
  },
  {
    "text": "for listening along subscribe now if you haven't already head to go time. FM for",
    "start": "3943559",
    "end": "3949720"
  },
  {
    "text": "all the ways or simply search for go time wherever you get your podcasts",
    "start": "3949720",
    "end": "3954760"
  },
  {
    "text": "you'll find us hey do you receive our change log newsletter each Monday if not let's fix",
    "start": "3954760",
    "end": "3960920"
  },
  {
    "text": "that bug one reader calls it so good he considers it a competitive Advantage",
    "start": "3960920",
    "end": "3966559"
  },
  {
    "text": "Sign up for $0 at Chang log.com newws thanks once again to our partners",
    "start": "3966559",
    "end": "3973200"
  },
  {
    "text": "at fly.io to Our Mysterious beat freak break master cylinder and to our friends at Sentry we love Sentry you might too",
    "start": "3973200",
    "end": "3981240"
  },
  {
    "text": "use code change log when you're signing up for a team plan and save a 100 bucks why not right that is all for now but",
    "start": "3981240",
    "end": "3988880"
  },
  {
    "text": "we'll talk to you again next time on go time",
    "start": "3988880",
    "end": "3994520"
  },
  {
    "text": "[Music]",
    "start": "3997820",
    "end": "4000929"
  },
  {
    "text": "[Music]",
    "start": "4006010",
    "end": "4009129"
  }
]