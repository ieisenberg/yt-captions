[
  {
    "text": "I was probably sitting in design mode for like 6 months it was a long time and not necessarily like 100% focused on",
    "start": "80",
    "end": "6279"
  },
  {
    "text": "that at every moment of that time but it went from like okay what is fuzzing what are other people doing what does go fuzz",
    "start": "6279",
    "end": "12559"
  },
  {
    "text": "and how does that look and how do people like it and what do we care about and a lot of it was laying out what are the things that are important to us for this",
    "start": "12559",
    "end": "19480"
  },
  {
    "text": "feature and what's not and making decisions about do we want to make our own fuzzing engine or do we want to use",
    "start": "19480",
    "end": "25320"
  },
  {
    "text": "lib fuzzer or you know existing fuzzing engines and that was a big decision and those things take a lot of time because",
    "start": "25320",
    "end": "30480"
  },
  {
    "text": "once you make that decision that's a decision you can't necessarily change it big thanks to our partners Leno fley",
    "start": "30480",
    "end": "38040"
  },
  {
    "text": "and launch Darkly we love Leno they keep it fast and simple check them out at lin.com changelog our bandwidth is",
    "start": "38040",
    "end": "44800"
  },
  {
    "text": "provided by fastly learn more at fastly.com and get your feature Flags powered by launch Darkly get a demo at",
    "start": "44800",
    "end": "50760"
  },
  {
    "text": "launchd dark.com this episode is brought to you by our friends at cockroach La the makers of",
    "start": "50760",
    "end": "57600"
  },
  {
    "text": "cockroach DB the most highly evolved database on the planet with cockroach DB",
    "start": "57600",
    "end": "63000"
  },
  {
    "text": "you can scale fast survive anything and Thrive everywhere it's open source",
    "start": "63000",
    "end": "68600"
  },
  {
    "text": "postgress wire compatible and kubernetes friendly which means you can launch and run it anywhere for those who need more",
    "start": "68600",
    "end": "74759"
  },
  {
    "text": "you can build and scale fast with cockroach Cloud which is cockroach DB hosted as a service it's the simplest",
    "start": "74759",
    "end": "80439"
  },
  {
    "text": "way to deploy cockro DB and is available instantly on AWS and Google cloud with",
    "start": "80439",
    "end": "85600"
  },
  {
    "text": "cockroach Cloud a team of worldclass sres maintains and man is your database infrastructure so you can focus Less on",
    "start": "85600",
    "end": "92200"
  },
  {
    "text": "Ops and more on code get started for free with a 30-day free trial or try the new forever free tier that's super",
    "start": "92200",
    "end": "98079"
  },
  {
    "text": "generous head to cockroach labs.com changelog to learn more again cockroach labs.com",
    "start": "98079",
    "end": "105000"
  },
  {
    "text": "[Music]",
    "start": "105680",
    "end": "108819"
  },
  {
    "text": "changelog let's do it it's go time welcome to a go time your source for",
    "start": "115200",
    "end": "121719"
  },
  {
    "text": "information on AWS infin Das we record live each and every Tuesday at 3 pm. us",
    "start": "121719",
    "end": "128720"
  },
  {
    "text": "Eastern subscribe now at youtube.com/ changelog so you're notified of when we go live and don't",
    "start": "128720",
    "end": "135160"
  },
  {
    "text": "forget to hop into the Gophers slack and the gotime FM channel that's where all the chatter happens if this is your",
    "start": "135160",
    "end": "141080"
  },
  {
    "text": "first time listening subscribe now at go time. FM hey let's get right into it shall we here we",
    "start": "141080",
    "end": "148760"
  },
  {
    "text": "go hello there welcome to go time I'm Matt",
    "start": "148760",
    "end": "154160"
  },
  {
    "text": "ryer and today as promised we're revisiting fuzzing in go",
    "start": "154160",
    "end": "161760"
  },
  {
    "text": "[Music]",
    "start": "163280",
    "end": "169760"
  },
  {
    "text": "since the beater has [Music] landed hopefully in the edit they'll",
    "start": "169760",
    "end": "177319"
  },
  {
    "text": "make that bit sound cool popping an effect on it or something like maybe something fluent that would be quite",
    "start": "177319",
    "end": "183319"
  },
  {
    "text": "nice we're joined today by two of the people who made fuzzing happen before we",
    "start": "183319",
    "end": "188519"
  },
  {
    "text": "meet them I just want to do a quick shout out a Meetup shout out this may become a regular part of the show since",
    "start": "188519",
    "end": "194040"
  },
  {
    "text": "we're going to be meeting up again in in person maybe soon it be nice to meet",
    "start": "194040",
    "end": "199879"
  },
  {
    "text": "local Gophers in your local area that sounds like a dating app it's not but if it was you'd be swiping right on goang",
    "start": "199879",
    "end": "207159"
  },
  {
    "text": "Northeast a lovely bunch of people in the northeast of England in the UK If",
    "start": "207159",
    "end": "212560"
  },
  {
    "text": "you don't know the difference between England and the UK you know read a book there's a whole world outside of",
    "start": "212560",
    "end": "219280"
  },
  {
    "text": "Wisconsin the Northeast UK this is my favorite thing goang Northeast is called that because go northeast was taken by a",
    "start": "219280",
    "end": "227840"
  },
  {
    "text": "local bus company so a shout out to that great Meetup there and if you want your meet",
    "start": "227840",
    "end": "233920"
  },
  {
    "text": "up shout outing or shouted out or shout outed I don't know the past tense of shout out or just Shout",
    "start": "233920",
    "end": "240560"
  },
  {
    "text": "shout shouted at yeah that's what we'll do we'll shout at your Meetup um for a",
    "start": "240560",
    "end": "246000"
  },
  {
    "text": "small fee okay if you want that though do Twitter gotime FM and we'll uh we'll",
    "start": "246000",
    "end": "252159"
  },
  {
    "text": "shout them out okay let's meet our guests we're welcoming back Katie",
    "start": "252159",
    "end": "257320"
  },
  {
    "text": "Hawkman Katie is a software engineer on the GH security team focusing on fuzzing",
    "start": "257320",
    "end": "262720"
  },
  {
    "text": "and was previously the tech lead for the module mirror and check some database welcome back Katie thanks for having me",
    "start": "262720",
    "end": "269199"
  },
  {
    "text": "back always a pleasure we're also joined by Jay Conrad now while Jay's name",
    "start": "269199",
    "end": "274400"
  },
  {
    "text": "sounds like a JavaScript project in fact Jay is a software engineer on the go command line tools team mainly working",
    "start": "274400",
    "end": "281479"
  },
  {
    "text": "on fuzzing and module support in the go command hey Jay welcome to go time hey thanks for having me on absolutely it's",
    "start": "281479",
    "end": "288320"
  },
  {
    "text": "a pleasure to have you here we're also joined by my co-host and good friend",
    "start": "288320",
    "end": "294400"
  },
  {
    "text": "Johnny Boro Hello Johnny hello hello I love that welcome back back Johnny the",
    "start": "294400",
    "end": "300240"
  },
  {
    "text": "other day I wanted to make sure I spelled your name correctly so I just Googled it and your face came up so I",
    "start": "300240",
    "end": "306039"
  },
  {
    "text": "thought what's going on here so I went into incognito mode which is the first time I've used that feature I did it again and same thing your face actually",
    "start": "306039",
    "end": "313479"
  },
  {
    "text": "comes up when you search for Boro yeah I'm very SE friendly yeah very yeah",
    "start": "313479",
    "end": "320319"
  },
  {
    "text": "amazing okay well let's get into it I think you know we spoke about fuzzing",
    "start": "320319",
    "end": "326160"
  },
  {
    "text": "last time in in August actually last year 2020 episode 145 if you want to go",
    "start": "326160",
    "end": "331400"
  },
  {
    "text": "and listen to that but now the beta is here right it's exciting and for those",
    "start": "331400",
    "end": "336919"
  },
  {
    "text": "who don't speak you know Matt by beater he means the beta oh thank you very much",
    "start": "336919",
    "end": "342560"
  },
  {
    "text": "yes like beater who's the who's the beater like why we beating people up",
    "start": "342560",
    "end": "348680"
  },
  {
    "text": "beating I appreciate thanks for the translation if you want to correct my English into incorrect English more",
    "start": "348680",
    "end": "354880"
  },
  {
    "text": "pleas call me in yeah yeah it'll be great yeah",
    "start": "354880",
    "end": "360840"
  },
  {
    "text": "yeah apparently though Shakespeare would have sounded more American if you heard him now like I don't know if you've",
    "start": "360840",
    "end": "366240"
  },
  {
    "text": "heard that before yeah it's like it's not as simple as that it'd be like wherefore at thou you know that kind of",
    "start": "366240",
    "end": "372680"
  },
  {
    "text": "thing is what I imagine is that your American accent I really like that it's Brooklyn Shakespeare from Brooklyn yo yo",
    "start": "372680",
    "end": "378759"
  },
  {
    "text": "Romeo that would have been great yo Romeo where are",
    "start": "378759",
    "end": "384479"
  },
  {
    "text": "you know where Romeo is fair enough okay well at the risk of this episode",
    "start": "384479",
    "end": "390120"
  },
  {
    "text": "descending into basically fuzzing maybe we could just have a quick recap what",
    "start": "390120",
    "end": "395440"
  },
  {
    "text": "fuzzing is and what's it used for I'll take the first part maybe Jake second",
    "start": "395440",
    "end": "400960"
  },
  {
    "text": "part so in kind of simple terms fuzzing is a form of automated testing that",
    "start": "400960",
    "end": "406319"
  },
  {
    "text": "rather than you tell it what to test it generates inputs for you and can find things like security vulnerabilities",
    "start": "406319",
    "end": "412199"
  },
  {
    "text": "that maybe you might have missed or crashes or edge cases that might not be covered by your typical unit test yeah",
    "start": "412199",
    "end": "420240"
  },
  {
    "text": "very cool and so that's interesting because you work on the security team so fuzzing is that the primary kind of",
    "start": "420240",
    "end": "427400"
  },
  {
    "text": "focus is it's around making sure that your programs are secure yeah I mean we have lots of focuses on the security",
    "start": "427400",
    "end": "434599"
  },
  {
    "text": "team and lots of projects going on but yeah I mean that's one of the main benefits of fuzzing is that you know",
    "start": "434599",
    "end": "440680"
  },
  {
    "text": "unit tests are really great and are important but they're still relying on you know the people developing it are",
    "start": "440680",
    "end": "447039"
  },
  {
    "text": "the ones writing the test a lot of the time and there's a lot assumptions that you make about how your code works and",
    "start": "447039",
    "end": "452759"
  },
  {
    "text": "so we often write tests with those assumptions too and so fuzzing is a",
    "start": "452759",
    "end": "458120"
  },
  {
    "text": "third-party objective Observer of your code um that can basically check",
    "start": "458120",
    "end": "464479"
  },
  {
    "text": "everything and find security issues and you know if you might have them or you know bugs that maybe you wouldn't have",
    "start": "464479",
    "end": "471319"
  },
  {
    "text": "even thought about because you assumed your code worked yeah which is fair enough isn't it so Jay what's the aim of",
    "start": "471319",
    "end": "478000"
  },
  {
    "text": "the fuzzer then is it trying to make a panic in your go code or is it trying to like are there assertions about the",
    "start": "478000",
    "end": "484479"
  },
  {
    "text": "output of things what's it actually trying to do yeah Panic if it finds one is definitely a great indication of a",
    "start": "484479",
    "end": "490960"
  },
  {
    "text": "problem um in general though it's it's a lot like a unit test where if it fails",
    "start": "490960",
    "end": "496360"
  },
  {
    "text": "then you have a problem and if it passes well it doesn't really pass it just kind of keeps generating random stuff until it finds a failure or you get bored and",
    "start": "496360",
    "end": "502960"
  },
  {
    "text": "give up but yeah it's it's great about finding things that you don't expect like things that you wouldn't have",
    "start": "502960",
    "end": "508960"
  },
  {
    "text": "written test for because you know you wrote a parser we were just talking about this today you wrote a parser that",
    "start": "508960",
    "end": "514159"
  },
  {
    "text": "only expects like valid uni code you didn't even think to write a test case",
    "start": "514159",
    "end": "519200"
  },
  {
    "text": "for random garbage that someone might feed you over the network so it's great at finding things you don't expect does",
    "start": "519200",
    "end": "526360"
  },
  {
    "text": "this go beyond sort of having a contract right so for example the use case you just gave is that if I've documented my",
    "start": "526360",
    "end": "532360"
  },
  {
    "text": "code this says well if you don't send valid you know in code then that's what I would expect right but we're going",
    "start": "532360",
    "end": "538399"
  },
  {
    "text": "beyond the cont beyond the way you're supposed to be using the software and basically saying well just in case let's",
    "start": "538399",
    "end": "544680"
  },
  {
    "text": "add in some resiliency in case we don't get what we're expecting is that the land where we are right now yeah I think",
    "start": "544680",
    "end": "549839"
  },
  {
    "text": "that's very much it I think you have some room to say like this is not really",
    "start": "549839",
    "end": "555519"
  },
  {
    "text": "a kind of input that I'm interested in looking at so you could have your like we'll get into how this is used in a",
    "start": "555519",
    "end": "561440"
  },
  {
    "text": "minute but for example if you have an input that you don't care about at all your fuzzing function could just return",
    "start": "561440",
    "end": "567720"
  },
  {
    "text": "without doing anything and the fuzzer will say like okay that wasn't interesting I'll try something else and you know to add to that it's not",
    "start": "567720",
    "end": "573920"
  },
  {
    "text": "necessarily only things that are invalid like let's say it's valid you have a parser that takes parentheses open and",
    "start": "573920",
    "end": "580040"
  },
  {
    "text": "close parenthesis but you didn't think what if you Nest 500 open and then 500 close and then you just put them all",
    "start": "580040",
    "end": "586600"
  },
  {
    "text": "together and like what's that going to do and so sometimes it is perfectly valid but it's not something that you",
    "start": "586600",
    "end": "592959"
  },
  {
    "text": "thought about or that your tests covered what would you say is a result then what would you say is the expected",
    "start": "592959",
    "end": "599640"
  },
  {
    "text": "sort of behavior how am I supposed to treat right a failure for a fuzz test",
    "start": "599640",
    "end": "604800"
  },
  {
    "text": "right so typically if I'm testing behavior and functionality I say oh okay this Behavior didn't Behavior behave you",
    "start": "604800",
    "end": "610640"
  },
  {
    "text": "know you get what I mean speaking is hard sometimes so you go and fix the code that's supposed to perform a",
    "start": "610640",
    "end": "616640"
  },
  {
    "text": "certain thing a certain way is the result of having discovered right",
    "start": "616640",
    "end": "621760"
  },
  {
    "text": "through fuz testing that given a certain input my code breaks is the resulting",
    "start": "621760",
    "end": "627440"
  },
  {
    "text": "Behavior then to go add more guard for my inputs and the kind of things I'm willing to accept and not accept like",
    "start": "627440",
    "end": "633240"
  },
  {
    "text": "what is the expected behavior following a failure I think it totally depends",
    "start": "633240",
    "end": "639920"
  },
  {
    "text": "failure and also what your code is doing you know is it client side or is it server side you know is it documented",
    "start": "639920",
    "end": "646120"
  },
  {
    "text": "behavior that maybe you can just add or is it a guard you should check is it something you should say hey if you do this this is what's going to happen",
    "start": "646120",
    "end": "652720"
  },
  {
    "text": "sometimes it's a bug sometimes it's not yeah and what do you think Jay Johnny you mentioned contracts earlier and I",
    "start": "652720",
    "end": "658480"
  },
  {
    "text": "think that's a really good way to think about it if the mutator is generating inputs that are outside of the contract for the function for example like let's",
    "start": "658480",
    "end": "665480"
  },
  {
    "text": "say you actually want your function to panic when it gets invalid Unicode characters you'll wrap around that in",
    "start": "665480",
    "end": "672560"
  },
  {
    "text": "the fuzz function and you can say like this is invalid input I don't even want to test it or you could even verify like",
    "start": "672560",
    "end": "678839"
  },
  {
    "text": "this actually does panic when I pass invalid characters to it so you can recover from that Panic okay makes sense",
    "start": "678839",
    "end": "685360"
  },
  {
    "text": "yeah yeah that's quite interesting I quite like writing code that voids panics where possible and rely on errors",
    "start": "685360",
    "end": "692920"
  },
  {
    "text": "and I suppose in that situation an error is an acceptable response as far as the",
    "start": "692920",
    "end": "698000"
  },
  {
    "text": "fuzz is concerned right yeah you can check erors and panicking is only one way to indicate a crash like you can",
    "start": "698000",
    "end": "704320"
  },
  {
    "text": "also say like this was an error like just like you do with the testing package you can say like t. error t.",
    "start": "704320",
    "end": "710160"
  },
  {
    "text": "fatal something like that MH yeah that's something that's a bit unique with this design where other fuzzers and go and",
    "start": "710160",
    "end": "717399"
  },
  {
    "text": "other languages don't necessarily do is that like we're not just looking for panics or you know ooms or stack",
    "start": "717399",
    "end": "723680"
  },
  {
    "text": "overflows and things like that it's also basically you can virtually copy the text that you have in an existing unit",
    "start": "723680",
    "end": "729880"
  },
  {
    "text": "test with all the t. errors and t. fatals that you have and just put it into the f. fuzz function which is what",
    "start": "729880",
    "end": "735440"
  },
  {
    "text": "is running in a loop under the hood and it can act like a test and it's not just about panics it's also in many ways",
    "start": "735440",
    "end": "742760"
  },
  {
    "text": "property based testing similar in that regard you know you can set properties and see is this doing what I want and if",
    "start": "742760",
    "end": "748120"
  },
  {
    "text": "not then t for example what was interesting when I first saw the design proposals was you get this new testing F",
    "start": "748120",
    "end": "756320"
  },
  {
    "text": "Type and it just has these two methods right ad and fuzz and the ad lets you",
    "start": "756320",
    "end": "762800"
  },
  {
    "text": "add some realistic looking data and then you pass a function don't you into the",
    "start": "762800",
    "end": "769079"
  },
  {
    "text": "fuzz method I guess and that then does the mutation does the work to create",
    "start": "769079",
    "end": "776199"
  },
  {
    "text": "it's not just random data is it it's kind of realistic data in some way like you mentioned the mutator how does that",
    "start": "776199",
    "end": "783279"
  },
  {
    "text": "actually work how does it decide what data to pick next it kind of has several components",
    "start": "783279",
    "end": "790000"
  },
  {
    "text": "to it a lot of the underlying code uh as far as like the mutations themselves like let's say takes a chunk from one",
    "start": "790000",
    "end": "796000"
  },
  {
    "text": "part of the bite slice and puts it in another part or it flips a bit or it adds an interesting value or whatever",
    "start": "796000",
    "end": "801440"
  },
  {
    "text": "that might be L that could actually came from the go fuzz project that was a collaborative work by the go community",
    "start": "801440",
    "end": "808000"
  },
  {
    "text": "over a lot of years led by Demetri viov and so that's part of it part of it's random but also kind",
    "start": "808000",
    "end": "814519"
  },
  {
    "text": "of smart about what it's doing it has different kinds of mutations that it's doing depending on the type but also",
    "start": "814519",
    "end": "819880"
  },
  {
    "text": "some of it is using coverage guidance too so it's using as it's running it's",
    "start": "819880",
    "end": "825079"
  },
  {
    "text": "seeing is it finding new edges that haven't been hit yet you know is it an interesting value and if it is then now",
    "start": "825079",
    "end": "830959"
  },
  {
    "text": "it's part of the Corpus and now it's you know it's learning as it's going and then the mutator then takes these new",
    "start": "830959",
    "end": "836120"
  },
  {
    "text": "things and works with it so um it's not necessarily the mutator itself that is doing the smart things but it's the",
    "start": "836120",
    "end": "841480"
  },
  {
    "text": "fuzzing engine around it that's finding what's interesting and what's not and making decisions about what should",
    "start": "841480",
    "end": "847360"
  },
  {
    "text": "continue to be mutated and what shouldn't yeah it's a step down a level we're using compiler instrumentation to",
    "start": "847360",
    "end": "853279"
  },
  {
    "text": "actually add a counter at the the basic block level so every time your program calls a function or returns or or goes",
    "start": "853279",
    "end": "861440"
  },
  {
    "text": "One Direction or another and a if statement it increments a counter and the the mutator can read all of those",
    "start": "861440",
    "end": "867839"
  },
  {
    "text": "counters and say like oh I just passed in an input that triggers something new we've gone down a path that we haven't",
    "start": "867839",
    "end": "873800"
  },
  {
    "text": "seen before so this is interesting we're going to derive a bunch of new inputs based from that what constraints do you",
    "start": "873800",
    "end": "881519"
  },
  {
    "text": "have in reading the design doc I saw there was some mention of sort of a resource utilization CPU memory that",
    "start": "881519",
    "end": "887399"
  },
  {
    "text": "kind of thing what what constraints do you first of all why the sort of the increase in compute resource realization",
    "start": "887399",
    "end": "894360"
  },
  {
    "text": "and second is this like a knob right one can sort of tweak and turn on want to do this much or you know this much fuzz",
    "start": "894360",
    "end": "901600"
  },
  {
    "text": "testing is good for me or I want to let you know things go wild in CI and spend $1,000 per test run like how do you want",
    "start": "901600",
    "end": "907240"
  },
  {
    "text": "to what controls do you have I think that's an area that we need to flesh out a bit and if people have feedback on",
    "start": "907240",
    "end": "913399"
  },
  {
    "text": "that during the beta that would be really helpful for us what we have at the moment is there's a fuzz time flag I",
    "start": "913399",
    "end": "919519"
  },
  {
    "text": "think it's like bench time bench time is the same thing mhm but it it's a timeout so it'll run for say 30 seconds or",
    "start": "919519",
    "end": "925959"
  },
  {
    "text": "whatever you set it to or you can give it a fixed number of iterations and so it'll run for like a th000 calls of your",
    "start": "925959",
    "end": "931959"
  },
  {
    "text": "function or 100,000 or something like that as far as like CPU and memory go we",
    "start": "931959",
    "end": "937160"
  },
  {
    "text": "don't really have controls for those yet by default it'll run the same number of worker processes as uh goax procs which",
    "start": "937160",
    "end": "946560"
  },
  {
    "text": "may be way too many it may be way too few depending on what you're doing but that's also configurable using the dash",
    "start": "946560",
    "end": "952240"
  },
  {
    "text": "parallel flag that goest already accepts what do you recommend then that",
    "start": "952240",
    "end": "957639"
  },
  {
    "text": "people how often should you run this you mentioned earlier like you run it until you get bored is it something that you",
    "start": "957639",
    "end": "963440"
  },
  {
    "text": "might run every time you save a file you just do a bit of fuzzing and just do a",
    "start": "963440",
    "end": "969040"
  },
  {
    "text": "bit as you go keep going or is this something that you imagine there's going to be fuzz servers that are running on",
    "start": "969040",
    "end": "975000"
  },
  {
    "text": "code to kind of keep watching and trying different things I think we can answer that a lot based on what's already",
    "start": "975000",
    "end": "981600"
  },
  {
    "text": "happening with fuzzers in the go community and otherwise um I think a goal eventually would be to integrate to",
    "start": "981600",
    "end": "988680"
  },
  {
    "text": "something like OSS fuzz that can run fuzzers continuously and report on",
    "start": "988680",
    "end": "994199"
  },
  {
    "text": "issues when they happen there's already fuzz targets that use goas that do this and we want to have something similar",
    "start": "994199",
    "end": "1000199"
  },
  {
    "text": "for the native support too so that's one way you know maybe you just you write it you check it in and then you just want",
    "start": "1000199",
    "end": "1005759"
  },
  {
    "text": "it to be running continuously so maybe that's really good for code that's not changing a whole lot you just want it to",
    "start": "1005759",
    "end": "1011199"
  },
  {
    "text": "test something that's been around for a while and really run for a long time but also maybe you do want to run it for an",
    "start": "1011199",
    "end": "1018519"
  },
  {
    "text": "hour or you know it just kind of depends on the code and and how well it's tested",
    "start": "1018519",
    "end": "1023720"
  },
  {
    "text": "and what you think you are looking for when you're doing it um but it's also",
    "start": "1023720",
    "end": "1028839"
  },
  {
    "text": "expensive right now so if you're you know if you're running the default of eight let's say you're running eight all",
    "start": "1028839",
    "end": "1034199"
  },
  {
    "text": "of your computer is just like running this thing and it can make everything else unusable so maybe you only want it",
    "start": "1034199",
    "end": "1039558"
  },
  {
    "text": "Das parallel equals 1 or two or something like that but then you can only run one at a time and so in the future we want to make it so that you",
    "start": "1039559",
    "end": "1045798"
  },
  {
    "text": "can run multiple targets kind of in a loop but right now you can only run one at a time and so there's still some",
    "start": "1045799",
    "end": "1051160"
  },
  {
    "text": "limitations and there's also that kind of feedback we want to hear like how do people want to run it what do people find useful like that's really useful",
    "start": "1051160",
    "end": "1057720"
  },
  {
    "text": "feedback for us to have and you mentioned that it uses like compiler instructions and it sort of interferes",
    "start": "1057720",
    "end": "1063760"
  },
  {
    "text": "with things when you run these fuzz tests is that something that only the go",
    "start": "1063760",
    "end": "1069200"
  },
  {
    "text": "team or by contributing and building kind of modifying the go tools is that really the only way you could have done",
    "start": "1069200",
    "end": "1075600"
  },
  {
    "text": "this kind of implementation you I mean like because I know that Damen grisy had",
    "start": "1075600",
    "end": "1080919"
  },
  {
    "text": "like a project that the other people have contributed to as well that worked in a slightly different way the design",
    "start": "1080919",
    "end": "1087520"
  },
  {
    "text": "for this particular one it fits so nicely into like it feels very familiar",
    "start": "1087520",
    "end": "1093840"
  },
  {
    "text": "already if you're used to writing unit tests in go you know you have a function that starts with fuzz something instead",
    "start": "1093840",
    "end": "1100960"
  },
  {
    "text": "of test it takes a testing F instead of a testing T it's very familiar so was",
    "start": "1100960",
    "end": "1106280"
  },
  {
    "text": "that kind of like key that you could poke around and modify the Tooling in that way I think the compiler instrumentation",
    "start": "1106280",
    "end": "1113840"
  },
  {
    "text": "we were actually lucky because we could reuse instrumentation that was already intended for lib fuzzer so there's like",
    "start": "1113840",
    "end": "1120480"
  },
  {
    "text": "a completely different fuzzer that is using the exact same instrumentation and",
    "start": "1120480",
    "end": "1125919"
  },
  {
    "text": "it was fantastic we just needed a tweak in the runtime to be able to use that data I don't think like our Innovation",
    "start": "1125919",
    "end": "1132159"
  },
  {
    "text": "is there if but what's really neat about this is that we're exposing it through go test and through the testing package",
    "start": "1132159",
    "end": "1139480"
  },
  {
    "text": "that makes it really accessible to a lot more people without having to install an external tool like it's just right there",
    "start": "1139480",
    "end": "1146400"
  },
  {
    "text": "and it just looks like very similar to unit test or Benchmark and people already know like I can call like t.",
    "start": "1146400",
    "end": "1153400"
  },
  {
    "text": "fail t. error t log it just seems like so familiar it's easy to get going yeah",
    "start": "1153400",
    "end": "1159440"
  },
  {
    "text": "it is quite an unusual testing technique I think and that familiarity is going to only help people actually start to use",
    "start": "1159440",
    "end": "1167120"
  },
  {
    "text": "it so that's quite exciting if you don't mind me asking how did you each get involved in fuzzing specifically so I",
    "start": "1167120",
    "end": "1173520"
  },
  {
    "text": "guess I can start in the jail jump in so I basically I joined the go security",
    "start": "1173520",
    "end": "1178880"
  },
  {
    "text": "team in 2019 like six months before the Unspeakable times that I won't mention",
    "start": "1178880",
    "end": "1185480"
  },
  {
    "text": "um of 2020 and then we basically just wanted to find you know some new",
    "start": "1185480",
    "end": "1191280"
  },
  {
    "text": "projects to work on now that we had the allocation of new people to work on it and we've seen that the go Community has",
    "start": "1191280",
    "end": "1196559"
  },
  {
    "text": "wanted this for a long time there there already been a lot of work that's happened for it and a lot of that work",
    "start": "1196559",
    "end": "1202080"
  },
  {
    "text": "happened in order to kind of demonstrate to the go community that this is useful",
    "start": "1202080",
    "end": "1207120"
  },
  {
    "text": "and this is helpful and that people will benefit from having it around there's been a proposal that's been around for",
    "start": "1207120",
    "end": "1212559"
  },
  {
    "text": "years that's gotten so many up votes and you know we and the go team also see that too and so a lot of it was that",
    "start": "1212559",
    "end": "1219440"
  },
  {
    "text": "this has been something we've wanted for a long time and the go Community has wanted for a long time and we just kind",
    "start": "1219440",
    "end": "1224480"
  },
  {
    "text": "of have the time to do it and it seemed like the right time as the know security team is trying to focus on this end to",
    "start": "1224480",
    "end": "1230960"
  },
  {
    "text": "end you know security that of your code from the time you write it till you know",
    "start": "1230960",
    "end": "1236280"
  },
  {
    "text": "it's running a production and this is just a part of that and that's been really important for our team so I basically started on it like from the",
    "start": "1236280",
    "end": "1242600"
  },
  {
    "text": "beginning um where I was given this task to start thinking about what about you Jay I'll say Katie wrote me into this",
    "start": "1242600",
    "end": "1249520"
  },
  {
    "text": "project oh yeah I did yeah she's definitely come up with a proposal and a",
    "start": "1249520",
    "end": "1255000"
  },
  {
    "text": "lot of the API design I've Been Working On The Go command for the last couple years mostly on module support in a past",
    "start": "1255000",
    "end": "1261799"
  },
  {
    "text": "life I did more compiler runtime stuff on another language so getting back to that kind of like low-level",
    "start": "1261799",
    "end": "1268200"
  },
  {
    "text": "instrumentation and like managing a bunch of processes that are like communicating at high speed like that",
    "start": "1268200",
    "end": "1273679"
  },
  {
    "text": "kind of just like at a technical level feels exciting to me but I'm also really excited about the security aspect of",
    "start": "1273679",
    "end": "1279320"
  },
  {
    "text": "this like Katie said we're doing End to End security and go we really want to position go as a secure programming",
    "start": "1279320",
    "end": "1287039"
  },
  {
    "text": "language have that be one of Go's real strengths and there are a lot of aspects to that but fuzzing I I think is really",
    "start": "1287039",
    "end": "1293640"
  },
  {
    "text": "an exciting new thing that we're doing this year almost everything the go team is doing in some shape or form is uh",
    "start": "1293640",
    "end": "1300880"
  },
  {
    "text": "touched by security now it's very much top of mind for all of us was it nice to get a break from all the go module",
    "start": "1300880",
    "end": "1307520"
  },
  {
    "text": "work yeah I won't lie it's nice to be doing uh something a little different that was a loaded question",
    "start": "1307520",
    "end": "1315159"
  },
  {
    "text": "Matt and it was definitely funny because I knew that Jay was a very busy person and he just I'm just going to I was like",
    "start": "1315159",
    "end": "1321640"
  },
  {
    "text": "I want to work with Jay on this I don't know if he has time and uh someone just said oh you can just ask it's like okay",
    "start": "1321640",
    "end": "1326840"
  },
  {
    "text": "so I just called him I was like Hey I want you to work with this like on this you know with me I think you have all these skills that I don't have and I",
    "start": "1326840",
    "end": "1333640"
  },
  {
    "text": "think that you'd be great for this and so was like whatever it is yes roped him in and guilted him in and it was great",
    "start": "1333640",
    "end": "1340679"
  },
  {
    "text": "it's like random chaos craziness I'll leave that behind and I'll go and do",
    "start": "1340679",
    "end": "1346600"
  },
  {
    "text": "fuzzing basically yeah [Music]",
    "start": "1346600",
    "end": "1353869"
  },
  {
    "text": "nice this episode is brought to you by our friends at launch darkley feature management for the modern Enterprise",
    "start": "1356400",
    "end": "1362640"
  },
  {
    "text": "power testing in production at any scale here's how it works launch Darkly enables development teams and operation",
    "start": "1362640",
    "end": "1368640"
  },
  {
    "text": "teams to deploy code at any time even if a feature isn't ready to release to users wrapping code with feature Flags",
    "start": "1368640",
    "end": "1375360"
  },
  {
    "text": "gives you the safety to test new features and infrastructure in your production environments without impacting the wrong end users when",
    "start": "1375360",
    "end": "1382080"
  },
  {
    "text": "you're ready to release more widely update the flag status and the changes are made instantaneously by the real-time streaming architecture",
    "start": "1382080",
    "end": "1388760"
  },
  {
    "text": "eliminate risk deliver value get started for free today at launch dark.com again",
    "start": "1388760",
    "end": "1394080"
  },
  {
    "text": "launch dark.com [Music]",
    "start": "1394080",
    "end": "1400299"
  },
  {
    "text": "[Music]",
    "start": "1403690",
    "end": "1406799"
  },
  {
    "text": "so yeah it's interesting the design process what was that like and and how did it change was it kind of always like",
    "start": "1409120",
    "end": "1417279"
  },
  {
    "text": "it is now or did it take a while for that design to kind of happen it",
    "start": "1417279",
    "end": "1424159"
  },
  {
    "text": "definitely took a while I was probably sitting in design mode for like six months it was a long time and not",
    "start": "1424159",
    "end": "1430600"
  },
  {
    "text": "necessarily like 100% focused on that at every moment of that time but it went from like okay what is fuzzing what are",
    "start": "1430600",
    "end": "1437080"
  },
  {
    "text": "other people doing what does go fuzz and how does that look and how do people like it and what do we care about and a",
    "start": "1437080",
    "end": "1442760"
  },
  {
    "text": "lot of it was laying out what are the things that are important to us for this feature and what's not and making",
    "start": "1442760",
    "end": "1448840"
  },
  {
    "text": "decisions about like do we want to make our own fuzzing engine or do we want to use lib fuzzer or you know existing",
    "start": "1448840",
    "end": "1455120"
  },
  {
    "text": "fuzzing engines and that was a big decision and those things take a lot of time because once you make that decision you know it's that's a decision you",
    "start": "1455120",
    "end": "1461600"
  },
  {
    "text": "can't necessarily change it so you really need to think about those things really deeply and so it did change a bit",
    "start": "1461600",
    "end": "1467320"
  },
  {
    "text": "over time and there was some resistance to having this you know f. fuzz layout",
    "start": "1467320",
    "end": "1473279"
  },
  {
    "text": "because it's different you know than a testing. t from a from a unit test and so people were like well maybe what if",
    "start": "1473279",
    "end": "1479440"
  },
  {
    "text": "we just have a fuzz that just you know runs a lot more similar to G fuzz and if you look at that design it's a little",
    "start": "1479440",
    "end": "1485360"
  },
  {
    "text": "bit different that's what people are used to and so there's a little bit of resistance like is that what we want is this what people are used to does this",
    "start": "1485360",
    "end": "1492279"
  },
  {
    "text": "look right is this going to provide us the flexibility that we need in the future and yeah so it was a lot of",
    "start": "1492279",
    "end": "1498919"
  },
  {
    "text": "integration like little things that were fixed over time from an Ever growing group of people so maybe at first it was",
    "start": "1498919",
    "end": "1504559"
  },
  {
    "text": "like I'll talk to filipo vort and a few other people you know and talk to Demetri viov and others and maybe I'll",
    "start": "1504559",
    "end": "1511080"
  },
  {
    "text": "bring in a few others and then a few others and then the wi go community and then you know so on and so it took a",
    "start": "1511080",
    "end": "1516960"
  },
  {
    "text": "while and a lot of like small iterations of um getting it to a good place it's all been really really useful yeah it's",
    "start": "1516960",
    "end": "1524720"
  },
  {
    "text": "interesting that sort of that Journey sounds like you sort of gone through to get to really quite an elegant and",
    "start": "1524720",
    "end": "1531200"
  },
  {
    "text": "simple and familiar as m is saying sort of API for this you look at it you like",
    "start": "1531200",
    "end": "1536240"
  },
  {
    "text": "of course you know testing that F yeah that fits right in but I'm sure like it took some time to sort of refine and and",
    "start": "1536240",
    "end": "1543279"
  },
  {
    "text": "go through that process and I'm going to say I'm sort of really pleased at the Simplicity of it right it's something that you know is very familiar that you",
    "start": "1543279",
    "end": "1549080"
  },
  {
    "text": "can sort of jump into and you already have the familiar mechanics and and things and as a go developer you kind of",
    "start": "1549080",
    "end": "1554399"
  },
  {
    "text": "know like okay yeah I can easily integrate this into my test right so I think you know it's it's you mentioned",
    "start": "1554399",
    "end": "1560760"
  },
  {
    "text": "this but I think it's worth sort of shedding some light on that because you know making something simple right is",
    "start": "1560760",
    "end": "1567240"
  },
  {
    "text": "not a simple task and I think uh youall have done a great job of actually creating something very familiar for",
    "start": "1567240",
    "end": "1572679"
  },
  {
    "text": "developers to sort of embrace right because one you know putting in making it part of s library is is the first",
    "start": "1572679",
    "end": "1577960"
  },
  {
    "text": "step having people like use it and and give you feedback and things like that is is another is a second step alog",
    "start": "1577960",
    "end": "1584600"
  },
  {
    "text": "together so I think this is a good start I'm looking forward to playing more with this yeah thanks and I just want to",
    "start": "1584600",
    "end": "1590000"
  },
  {
    "text": "reiterate you know it takes a village it really has been a lot of people have um come in and gave you know given really",
    "start": "1590000",
    "end": "1596320"
  },
  {
    "text": "really useful feedback along the way and everybody who has contributed filed issues commented on the proposal you",
    "start": "1596320",
    "end": "1602799"
  },
  {
    "text": "know inside of Google and outside of Google everybody has been a really big help and it really has taken a lot of",
    "start": "1602799",
    "end": "1608440"
  },
  {
    "text": "people's involvement it's definitely not a one person or even a five person or 10 person effort yeah it's always the thing",
    "start": "1608440",
    "end": "1615120"
  },
  {
    "text": "whenever you see good ux it seems obvious which makes it feel easy and that's the thing it really isn't and",
    "start": "1615120",
    "end": "1622399"
  },
  {
    "text": "yeah I agree it I think the learning curve that familiarity is what's really",
    "start": "1622399",
    "end": "1627440"
  },
  {
    "text": "going to be kind of vital for people to start using it because you know if you've already been writing unit tests",
    "start": "1627440",
    "end": "1633760"
  },
  {
    "text": "you can sort of get started very easily and I think that's often undervalued as well did you have to say no to lots of",
    "start": "1633760",
    "end": "1641399"
  },
  {
    "text": "ideas and lots of things too yeah that's been difficult and I mean it's still",
    "start": "1641399",
    "end": "1646880"
  },
  {
    "text": "something we have to push back on because you know at the end of the day like we want to do everything and we always have to make decisions around",
    "start": "1646880",
    "end": "1653799"
  },
  {
    "text": "what's a no what's a not now and what's a yes and then everything in between and",
    "start": "1653799",
    "end": "1658919"
  },
  {
    "text": "so there are a lot of things that we're like yeah that sounds cool not yet right for example like dictionary support",
    "start": "1658919",
    "end": "1665519"
  },
  {
    "text": "that's something that some people do I'm not even like super familiar with it but I know that a lot of other fuzzers do",
    "start": "1665519",
    "end": "1670880"
  },
  {
    "text": "those things and try to improve their mutator and their fuzzing engine it's like that's going to have to be later you know the improvements on making this",
    "start": "1670880",
    "end": "1677279"
  },
  {
    "text": "the best fuzzing engine that has to be later we have to make the ux work first or even supporting structured fuzzing",
    "start": "1677279",
    "end": "1683039"
  },
  {
    "text": "how do we support structs or other complex types that can come later you know we can add it but each of those",
    "start": "1683039",
    "end": "1688799"
  },
  {
    "text": "things we have to make decisions on what's important to get out now for the feedback part and then what can we add later and make it better over time so",
    "start": "1688799",
    "end": "1696000"
  },
  {
    "text": "you can totally see this as a sort of with future versions of go my code my",
    "start": "1696000",
    "end": "1701679"
  },
  {
    "text": "fuzzing tests are not going to break they'll simply get better and faster more performant yes okay yep",
    "start": "1701679",
    "end": "1708240"
  },
  {
    "text": "yeah and we do have a ways to go in in the beta period as well we're definitely hoping to get feedback from people about",
    "start": "1708240",
    "end": "1714480"
  },
  {
    "text": "what can change because at the moment like all ofar code is living on a branch",
    "start": "1714480",
    "end": "1719519"
  },
  {
    "text": "it's not on the main like go rout the main branch yet so we're at a period",
    "start": "1719519",
    "end": "1725120"
  },
  {
    "text": "where things still can change like we don't have a strong compatibility guarantee yet but we we have like a few",
    "start": "1725120",
    "end": "1731679"
  },
  {
    "text": "more months where we can really get that feedback and say you know if anyone has something to say like this should work",
    "start": "1731679",
    "end": "1737399"
  },
  {
    "text": "work completely differently and here's why I mean I hope we don't find that we've made a complete design blender",
    "start": "1737399",
    "end": "1744000"
  },
  {
    "text": "right now but um we do have some time left so please let us know what works and what doesn't yeah I think that's a",
    "start": "1744000",
    "end": "1751159"
  },
  {
    "text": "good point if you take anything away from this episode it's please try it on your code and see what you find and do",
    "start": "1751159",
    "end": "1758679"
  },
  {
    "text": "let us know as well if you manag to find some interesting crashes because that's the point and actually I know that",
    "start": "1758679",
    "end": "1765080"
  },
  {
    "text": "throughout the standard Library there's fuzzing ha found lots of things that then y so that's very encouraging yeah",
    "start": "1765080",
    "end": "1772519"
  },
  {
    "text": "definitely please tell us I'm keeping track of them internally just in a little document right now but I I'm",
    "start": "1772519",
    "end": "1778919"
  },
  {
    "text": "going to eventually have something more public that I'd like to share but in the meantime you know you can post those things in the fuzzing slack on the",
    "start": "1778919",
    "end": "1785480"
  },
  {
    "text": "gopher's channel or um you can you know even DM me on Twitter or email you know",
    "start": "1785480",
    "end": "1793279"
  },
  {
    "text": "yeah great email me or or Jay or you know things like that so I wonder if we could just dig in a bit I'm very curious",
    "start": "1793279",
    "end": "1799679"
  },
  {
    "text": "and I'm sure our listeners Slaters are also interested in how it actually works",
    "start": "1799679",
    "end": "1806600"
  },
  {
    "text": "so like I know that there are there's the binary marshala and the binary on",
    "start": "1806600",
    "end": "1811679"
  },
  {
    "text": "marshala types the interfaces right and text marshala and text on marshala interfaces these are new types aren't",
    "start": "1811679",
    "end": "1818799"
  },
  {
    "text": "they for for fuzzing it maybe a slight Mis understanding so that's not implemented yet mostly what we're talking about when we're talking about",
    "start": "1818799",
    "end": "1824960"
  },
  {
    "text": "that in the design draft is how do we support structs I see how do we support",
    "start": "1824960",
    "end": "1830320"
  },
  {
    "text": "complex types and you know one way that we can do that is by saying if you implement the text marshalling you know",
    "start": "1830320",
    "end": "1836799"
  },
  {
    "text": "that interface in the C library or if you implement binary marshalling we can do something like un Marshall them into",
    "start": "1836799",
    "end": "1843440"
  },
  {
    "text": "some bites mutate the bites try to Marshall them back run it in your code but there's no other way of doing that",
    "start": "1843440",
    "end": "1849679"
  },
  {
    "text": "easily you know that might be one way that we support strs to start with is we say we'll support your struct fuzzing it",
    "start": "1849679",
    "end": "1854840"
  },
  {
    "text": "only if it implements these interfaces and then maybe we can make it better in the future right I see so what types can",
    "start": "1854840",
    "end": "1861080"
  },
  {
    "text": "you use it for today if we want to try out in the beta at the moment it's just primitive types so integers I guess",
    "start": "1861080",
    "end": "1868039"
  },
  {
    "text": "booleans although fuzzing is not great for booleans you know yeah yeah integers bite slices strings things of that",
    "start": "1868039",
    "end": "1874480"
  },
  {
    "text": "nature you can have multiple arguments to a function but we're looking at in",
    "start": "1874480",
    "end": "1879799"
  },
  {
    "text": "the future supporting structs have had some talk about interfaces like different implementations of an",
    "start": "1879799",
    "end": "1886080"
  },
  {
    "text": "interface I mean not during the beta period just initially the most useful thing you can do is primitive string",
    "start": "1886080",
    "end": "1892399"
  },
  {
    "text": "spice slices and I suppose you could always if you have structs you can always still just use strings in the",
    "start": "1892399",
    "end": "1898000"
  },
  {
    "text": "fuzzing and then create a struct inside that little fuzz function can you absolutely yeah you can always just",
    "start": "1898000",
    "end": "1903080"
  },
  {
    "text": "generate it on the fly every time and and that actually may be a good thing to do anyway you know even when we do",
    "start": "1903080",
    "end": "1909120"
  },
  {
    "text": "support strs if you have something that can create them in a way that's more",
    "start": "1909120",
    "end": "1914840"
  },
  {
    "text": "guaranteed to pass any kind of validation and actually do something useful that may be the best way to do it in the future anyway yeah one of the",
    "start": "1914840",
    "end": "1921559"
  },
  {
    "text": "nice things about the design is that you are writing go code so again it's familiar and you can write go code you",
    "start": "1921559",
    "end": "1928679"
  },
  {
    "text": "can do whatever you need to do to support that fuzzing process and I think that as a design principle is also very",
    "start": "1928679",
    "end": "1936159"
  },
  {
    "text": "clever and I think I imagine we're going to end up having talks at conferences of",
    "start": "1936159",
    "end": "1942200"
  },
  {
    "text": "like interesting ways of using the fuzzing capabilities so excited yeah I",
    "start": "1942200",
    "end": "1947880"
  },
  {
    "text": "bet there's a lot of stuff that people innovate on you know solving their own problems in their own domains and stuff",
    "start": "1947880",
    "end": "1953159"
  },
  {
    "text": "like that I think that's a good lesson for anybody that's designing an API sometimes you might want to maybe",
    "start": "1953159",
    "end": "1960720"
  },
  {
    "text": "write a DSL or do something very specific for your case where a function",
    "start": "1960720",
    "end": "1966320"
  },
  {
    "text": "is sometimes a great way to let people control and contribute to like some",
    "start": "1966320",
    "end": "1972120"
  },
  {
    "text": "package whatever that process is I find that you know just sort of little anonymous functions to be very useful as",
    "start": "1972120",
    "end": "1978639"
  },
  {
    "text": "a design pattern because you end up unlocking a lot of things for other people it's not so strict to that one",
    "start": "1978639",
    "end": "1985200"
  },
  {
    "text": "way that you thought of when you designed it yeah I really do like that and the fact that they it's just like",
    "start": "1985200",
    "end": "1991120"
  },
  {
    "text": "like test code I think is kind of really good I want to get people into differential fuzzing like that's kind of",
    "start": "1991120",
    "end": "1997240"
  },
  {
    "text": "my goal because it's not just for panics you know like we were talking about before like you can use it for example",
    "start": "1997240",
    "end": "2002559"
  },
  {
    "text": "to see do two different functions behave the same way do they have the same input and the same output and things like that",
    "start": "2002559",
    "end": "2008120"
  },
  {
    "text": "like you can use it in really unique ways and that's just one I had this like dream that it'd be awesome if there' be",
    "start": "2008120",
    "end": "2014000"
  },
  {
    "text": "a way to use this infrastructure to test whether or not the code on your local",
    "start": "2014000",
    "end": "2019200"
  },
  {
    "text": "development Branch behaves the same way that it does at master or our different branch or things like that like that",
    "start": "2019200",
    "end": "2024320"
  },
  {
    "text": "kind of differential fuzzing would be amazing too I don't have ideas for how to do that yet but there's all these things that we could do and things that",
    "start": "2024320",
    "end": "2030880"
  },
  {
    "text": "the infrastructure already supports like it already supports differential fuzzing for you know two different strs given",
    "start": "2030880",
    "end": "2036320"
  },
  {
    "text": "the same value for for example or two different functions given the same value things like that yeah I mean that that would be great for if you're if you want",
    "start": "2036320",
    "end": "2042240"
  },
  {
    "text": "to deliver a new API that's backwards compatible um and or or you're going to",
    "start": "2042240",
    "end": "2047519"
  },
  {
    "text": "do a complete rewrite or something and one of the interesting elements of fuzzing in this implementation is that",
    "start": "2047519",
    "end": "2053200"
  },
  {
    "text": "it remembers as it goes doesn't it where does it store that memory so we have a concept of",
    "start": "2053200",
    "end": "2060398"
  },
  {
    "text": "interesting values which maybe isn't the best term for this sounds quite good but an interesting value is something that",
    "start": "2060399",
    "end": "2067839"
  },
  {
    "text": "like expands code coverage or like for whatever reason the fuzzer wants to derive more inputs from that so we're",
    "start": "2067839",
    "end": "2075079"
  },
  {
    "text": "storing that in a subdirectory within the build cache right now actually so if",
    "start": "2075079",
    "end": "2081118"
  },
  {
    "text": "you run go in go cache um you'll get a directory where all of your build artifacts are stored so these are all",
    "start": "2081119",
    "end": "2087800"
  },
  {
    "text": "Thea files that used to live in uh goath package you know long long time ago",
    "start": "2087800",
    "end": "2092960"
  },
  {
    "text": "before go 1110 so we're storing it there and at the moment it's the simplest",
    "start": "2092960",
    "end": "2098839"
  },
  {
    "text": "possible implementation that kind of works it's one of many things that we intend to refine during the beta and",
    "start": "2098839",
    "end": "2104680"
  },
  {
    "text": "there's a directory there that has all these little files you can clear that with the go clean- fuzz cach command",
    "start": "2104680",
    "end": "2111440"
  },
  {
    "text": "because it can grow pretty big yeah and then how does it use that if it does grow big and you then run a fuzzing",
    "start": "2111440",
    "end": "2118920"
  },
  {
    "text": "operation how does it use that information is it it just uses it to",
    "start": "2118920",
    "end": "2124960"
  },
  {
    "text": "keep a history of what it's done or or does it use that to then decide new",
    "start": "2124960",
    "end": "2130000"
  },
  {
    "text": "values basically we'll take all the values in that cache and we'll throw",
    "start": "2130000",
    "end": "2135400"
  },
  {
    "text": "each value out to each one of the worker processes so we have this kind of coordinator worker pattern where the",
    "start": "2135400",
    "end": "2141040"
  },
  {
    "text": "test binary like the binary actually run by goest sends work to all of these worker processes which are are running",
    "start": "2141040",
    "end": "2147720"
  },
  {
    "text": "the same binary so we'll throw each one of those values out to each one of the workers and the workers will run the",
    "start": "2147720",
    "end": "2154000"
  },
  {
    "text": "mutator to derive new values from them so those kind of act like a starting point for fuzzing and if we find a new",
    "start": "2154000",
    "end": "2160720"
  },
  {
    "text": "crash or a new value that expands coverage even more then we will minimize",
    "start": "2160720",
    "end": "2167319"
  },
  {
    "text": "it which means we're we're trying to find a smaller value that does the same thing and after the minimization is",
    "start": "2167319",
    "end": "2172520"
  },
  {
    "text": "finished then we'll write that new value into the cache and to clarify also just",
    "start": "2172520",
    "end": "2177800"
  },
  {
    "text": "to add on to that we also have kind of two ways of storing Corpus entries we have the cach that he mentioned and we",
    "start": "2177800",
    "end": "2183880"
  },
  {
    "text": "also have test data and so that test data Direct that's within your package",
    "start": "2183880",
    "end": "2189400"
  },
  {
    "text": "is actually where things like new crashes are stored so if there's a panic or if there's a you know a hit from a t.",
    "start": "2189400",
    "end": "2195079"
  },
  {
    "text": "error or t. fatal things like that those are then written to test data and how the fuzzing engine runs and what it does",
    "start": "2195079",
    "end": "2203040"
  },
  {
    "text": "and how it interprets those two directories is a little different because they serve a different",
    "start": "2203040",
    "end": "2208520"
  },
  {
    "text": "purpose yeah that's very interesting actually so the crashes in test data",
    "start": "2208520",
    "end": "2213920"
  },
  {
    "text": "basically serve as a regression test so once you found found a crash you've gone and fixed it hopefully go test even when",
    "start": "2213920",
    "end": "2221079"
  },
  {
    "text": "it's not fuzzing will run all of those inputs and make sure that your programs still succeed so your fuzz targets will",
    "start": "2221079",
    "end": "2227480"
  },
  {
    "text": "still run just with the previous crashes make sure they're still fixed that's really good that's a really good",
    "start": "2227480",
    "end": "2235440"
  },
  {
    "text": "idea yeah actually just want to go and try this",
    "start": "2235440",
    "end": "2240640"
  },
  {
    "text": "now yeah that's the thing about like having a kind of official implementation",
    "start": "2240640",
    "end": "2246000"
  },
  {
    "text": "of that sort of integration I think is where it's going to really shine as well",
    "start": "2246000",
    "end": "2251599"
  },
  {
    "text": "because that makes perfect sense like and one of the things with like unit",
    "start": "2251599",
    "end": "2257240"
  },
  {
    "text": "testing is and if you practice something like test driven development you you kind of end up with a nice Suite of",
    "start": "2257240",
    "end": "2264920"
  },
  {
    "text": "tests that you can use to kind of rely upon when you're doing like changes like",
    "start": "2264920",
    "end": "2271520"
  },
  {
    "text": "refactorings and stuff and so this is the regression protections you talked about like I think one of the nice",
    "start": "2271520",
    "end": "2278319"
  },
  {
    "text": "benefits of having good test coverage is that it gives you that confidence to do",
    "start": "2278319",
    "end": "2284319"
  },
  {
    "text": "big bold refactors and changes and things and as a developer that's such a valuable thing to be able to do because",
    "start": "2284319",
    "end": "2291000"
  },
  {
    "text": "you learn so much as the project is underway don't you you can't really know everything up front and so having good",
    "start": "2291000",
    "end": "2298640"
  },
  {
    "text": "tests like that is kind of vital for that process so that you aren't just constantly breaking things or",
    "start": "2298640",
    "end": "2304359"
  },
  {
    "text": "introducing you know reint producing previous failing that's really cool yeah",
    "start": "2304359",
    "end": "2310319"
  },
  {
    "text": "having a good set of regression tests really reduces the amount of fear and anxiety and software development it's",
    "start": "2310319",
    "end": "2317880"
  },
  {
    "text": "been a good set of tests on projects that I've had it I've felt much more comfortable working in yeah that's it",
    "start": "2317880",
    "end": "2324160"
  },
  {
    "text": "yeah because I think that's it gives you that confidence you know the other thing is like I try and get to the point in my",
    "start": "2324160",
    "end": "2329640"
  },
  {
    "text": "code where if my tests pass I can push to production that's the only sort of",
    "start": "2329640",
    "end": "2335119"
  },
  {
    "text": "thing that I have to meet so in a way the only promises I'm making about the software are in the tests and that some",
    "start": "2335119",
    "end": "2343680"
  },
  {
    "text": "people when I explain that it's sort of like you know they don't really see the value of that but that property of",
    "start": "2343680",
    "end": "2350599"
  },
  {
    "text": "knowing with confidence that yeah this is it it's doing all the things it promises to do you can deploy you know",
    "start": "2350599",
    "end": "2357839"
  },
  {
    "text": "obviously it's not perfect but you know it's a good property to have if you can so yeah I completely agree mhm does the",
    "start": "2357839",
    "end": "2364599"
  },
  {
    "text": "fuzzing stuff interface in any way with current unit tests that you've written",
    "start": "2364599",
    "end": "2370920"
  },
  {
    "text": "or is this kind of like new uh completely new sort of uh values you",
    "start": "2370920",
    "end": "2376880"
  },
  {
    "text": "have to start at the beginning um well if you have existing unit tests um the nice thing about the f. fuzz function is",
    "start": "2376880",
    "end": "2383400"
  },
  {
    "text": "that it doesn't take a testing. f it takes a testing. t so your fuzz Target",
    "start": "2383400",
    "end": "2388599"
  },
  {
    "text": "that fuzz Fu which is the same as like a test F your top level function takes the",
    "start": "2388599",
    "end": "2394680"
  },
  {
    "text": "testing F and then you can call things like f. add to add a new Corpus entry or maybe f. cleanup if you need some",
    "start": "2394680",
    "end": "2401160"
  },
  {
    "text": "cleanup to run at the end but when you run that f. fuzz function it takes a testing. t and the inputs that you would",
    "start": "2401160",
    "end": "2407560"
  },
  {
    "text": "need so maybe similar to a t. run where it takes a t and it takes some of the values that are going in or something",
    "start": "2407560",
    "end": "2413680"
  },
  {
    "text": "like that basically if you have existing unit tests you can copy those into a",
    "start": "2413680",
    "end": "2420160"
  },
  {
    "text": "neop fuzz function wrap it around a little you know fuzz Target you have a",
    "start": "2420160",
    "end": "2425760"
  },
  {
    "text": "fuzz Target and you know a dream would be in the future that people just write their unit tests like that a lot of the",
    "start": "2425760",
    "end": "2432240"
  },
  {
    "text": "time anytime there's value in writing that in fuzzing something you just write the unit test as a fuzz Target you know",
    "start": "2432240",
    "end": "2438640"
  },
  {
    "text": "with an extra line basically of an f. fuzz and then you have everything instead of having you know your TBL",
    "start": "2438640",
    "end": "2444319"
  },
  {
    "text": "driven tests where you you know have your struct your test cases and you put them all above and then you do CH that",
    "start": "2444319",
    "end": "2449839"
  },
  {
    "text": "run you can do things like f. add and you can do each of those in that way as part of this quote C Corpus the",
    "start": "2449839",
    "end": "2455960"
  },
  {
    "text": "beginning Corpus that's running and then all of your code that would have been to.run just goes into f. fuz and that",
    "start": "2455960",
    "end": "2463880"
  },
  {
    "text": "works because the things you add always get tested as well yep by go test just",
    "start": "2463880",
    "end": "2469760"
  },
  {
    "text": "by default just like every other unit test does yes see as well as everything in",
    "start": "2469760",
    "end": "2475000"
  },
  {
    "text": "test data for that fuzz Target it's all all part of just a typical unit test the",
    "start": "2475000",
    "end": "2480440"
  },
  {
    "text": "default Behavior do you expect this to kind of slow down testing like if you were to do that for example when I hit",
    "start": "2480440",
    "end": "2487520"
  },
  {
    "text": "save I'll run the tests for that package you know go builds and runs very quickly",
    "start": "2487520",
    "end": "2492720"
  },
  {
    "text": "so you almost don't even notice that it's doing anything but maybe this will introduce some latency do you expect",
    "start": "2492720",
    "end": "2499839"
  },
  {
    "text": "that well it's not fuzzing by default and that's the important part it's only running them as a unit test by default",
    "start": "2499839",
    "end": "2506800"
  },
  {
    "text": "so it shouldn't behave much different it shouldn't do anything much different when you're running go test let's say",
    "start": "2506800",
    "end": "2512599"
  },
  {
    "text": "you do go test all with or without it being wrapped in a fuzz Target it's going to behave much the same and so it",
    "start": "2512599",
    "end": "2519040"
  },
  {
    "text": "shouldn't slow down the only thing that would be slower is if you choose to run it with Dash fuz right yeah this is all",
    "start": "2519040",
    "end": "2525760"
  },
  {
    "text": "in the testing package so it'll be basically just like writing another unit",
    "start": "2525760",
    "end": "2530839"
  },
  {
    "text": "test it's the same infastructure and when you're not fuzzing we won't build packages with compiler instrumentation",
    "start": "2530839",
    "end": "2537520"
  },
  {
    "text": "so that won't have any overhead either basically like it's free if you're not using it it's really good isn't it it's",
    "start": "2537520",
    "end": "2544040"
  },
  {
    "text": "actually is really good it's like those kinds of properties I think I can see that then this becomes kind of the new",
    "start": "2544040",
    "end": "2549880"
  },
  {
    "text": "way that you not probably in every case but in cases where it makes sense I could see that becoming a kind of",
    "start": "2549880",
    "end": "2555839"
  },
  {
    "text": "default way that you do WR tests very",
    "start": "2555839",
    "end": "2560839"
  },
  {
    "text": "[Music]",
    "start": "2566270",
    "end": "2569369"
  },
  {
    "text": "[Music] interesting this episode is brought to you by our",
    "start": "2572970",
    "end": "2578760"
  },
  {
    "text": "friends at gitlab gitlab is inviting you to attend gitlab commit 2021 their",
    "start": "2578760",
    "end": "2584040"
  },
  {
    "text": "upcoming user Community event August 3rd and 4th it's free it's virtual and",
    "start": "2584040",
    "end": "2589640"
  },
  {
    "text": "everyone can attend learn more about modern devops and how it transforms companies of all sizes and pushes teams",
    "start": "2589640",
    "end": "2595599"
  },
  {
    "text": "to drive Innovation to market during this two-day conference attendees across all time zones will learn how they can",
    "start": "2595599",
    "end": "2601280"
  },
  {
    "text": "instill modern devops practices at their organizations through in-depth trainings and work shops hear firsthand stories",
    "start": "2601280",
    "end": "2607640"
  },
  {
    "text": "from some of the most well-known companies and gain insight into Cutting Edge cicd and security technologies that",
    "start": "2607640",
    "end": "2614520"
  },
  {
    "text": "bring companies to the next level get ready to innovate together during this free event designed to help you to commit to better devops register and",
    "start": "2614520",
    "end": "2621680"
  },
  {
    "text": "learn more at gitlab commit virtual 2021.com once again that's gitlab commit",
    "start": "2621680",
    "end": "2627880"
  },
  {
    "text": "virtual 2021.com or check for links in the show",
    "start": "2627880",
    "end": "2633520"
  },
  {
    "text": "notes",
    "start": "2635079",
    "end": "2638079"
  },
  {
    "text": "what was like a difficult thing you remember from the design process is there anything that stands out as tricky",
    "start": "2650200",
    "end": "2657480"
  },
  {
    "text": "or contentious or something that really took time to get to grips with you don't",
    "start": "2657480",
    "end": "2663839"
  },
  {
    "text": "have the name names I think that f. fuzz function took a lot",
    "start": "2663839",
    "end": "2672119"
  },
  {
    "text": "of thought just like the basic structure of it you know deciding whether or not",
    "start": "2672119",
    "end": "2677319"
  },
  {
    "text": "it was going to be you know cuz the original design like the original original like when I was first writing this out and like talking about it with",
    "start": "2677319",
    "end": "2683040"
  },
  {
    "text": "fleo and some other people who have been you know thinking about fuzzing for a while it looked very similar to what go",
    "start": "2683040",
    "end": "2688559"
  },
  {
    "text": "fuzz looks like I don't think there's anything wrong with gof fuzz but that was what it looked like it had a fuzz Fu with a testing on F and then it would",
    "start": "2688559",
    "end": "2694400"
  },
  {
    "text": "just run what was in there and it was kind of just a continuation of their work and then you know we were just",
    "start": "2694400",
    "end": "2700440"
  },
  {
    "text": "thinking like but what about all these other things we want to do like is this going to work and I was like okay well maybe we can do something a little bit",
    "start": "2700440",
    "end": "2707839"
  },
  {
    "text": "you know different maybe we can you know have it be more clear that this is what is running the fuzzing and then having",
    "start": "2707839",
    "end": "2714040"
  },
  {
    "text": "people allow them to do some pre-work above it as needed and then that's when we were like well maybe maybe this f.",
    "start": "2714040",
    "end": "2720400"
  },
  {
    "text": "fuzz and then maybe rather than have f. fuzz take a testing. f we just have it take a testing. t and that was kind of a",
    "start": "2720400",
    "end": "2725960"
  },
  {
    "text": "later decision at first the f. fuz took a testing. f and they were like well it's doing everything that a unit test",
    "start": "2725960",
    "end": "2732280"
  },
  {
    "text": "does so why can't it just take a testing. t and it's like oh that's better and then it started to kind of come together in that way but that that",
    "start": "2732280",
    "end": "2739280"
  },
  {
    "text": "took a lot of time and a lot of thought on how to work through that yeah that's very interesting and it's it's also",
    "start": "2739280",
    "end": "2745119"
  },
  {
    "text": "quite interesting that the fuzz method no it's a function isn't it no it's a",
    "start": "2745119",
    "end": "2750520"
  },
  {
    "text": "method isn't it on the testing F method it's a method on testing that got it yeah I just want to be correct for our",
    "start": "2750520",
    "end": "2756280"
  },
  {
    "text": "pedantic listeners we do have a few pedantics that we write in I say the wrong one often yeah okay so it's a",
    "start": "2756280",
    "end": "2763839"
  },
  {
    "text": "function uh I've done it wrong again it's a method I call it the fdas function because I just think it's",
    "start": "2763839",
    "end": "2769040"
  },
  {
    "text": "useful that way I don't I don't go developers often don't use the word method they kind of our functions as well aren't they that's the thing they",
    "start": "2769040",
    "end": "2774880"
  },
  {
    "text": "just have a receiver so in a way the pedants can do one so but that fuzz",
    "start": "2774880",
    "end": "2781599"
  },
  {
    "text": "thing uh it takes it takes an empty interface but expects a function so this",
    "start": "2781599",
    "end": "2787839"
  },
  {
    "text": "is quite interesting and this is kind of like I think something that is a little bit unusual and the why is that why does",
    "start": "2787839",
    "end": "2794280"
  },
  {
    "text": "it take an interface instead of a typed function so if it takes an interface it lets you pass in any kind of function",
    "start": "2794280",
    "end": "2801680"
  },
  {
    "text": "you want and we have this restriction now that whatever you pass to f. add has",
    "start": "2801680",
    "end": "2807960"
  },
  {
    "text": "to match the type of the fuzz function so if you f. add a bunch of strings then your fuzz function must take a string",
    "start": "2807960",
    "end": "2814160"
  },
  {
    "text": "and and we verify that at runtime with reflection and like if it takes a string in an integer then it needs to be a",
    "start": "2814160",
    "end": "2820200"
  },
  {
    "text": "string in the integer and so and we also like we can't do it entirely statically either we talked a while ago about like",
    "start": "2820200",
    "end": "2828280"
  },
  {
    "text": "this is going to land hopefully about the same time as generic so like could we do something with generics but we",
    "start": "2828280",
    "end": "2834240"
  },
  {
    "text": "need to verify like everything in the test data directory and everything in the cache so we're doing like 90% of",
    "start": "2834240",
    "end": "2841040"
  },
  {
    "text": "this at runtime anyway so it seemed like we would need to do that but yeah it",
    "start": "2841040",
    "end": "2846480"
  },
  {
    "text": "takes an interface so that it can accept any kind of function so your function can match whatever kind of data that you want to test yeah so that's cool then so",
    "start": "2846480",
    "end": "2854480"
  },
  {
    "text": "the add method very adct isn't it so it takes any number of arguments in and",
    "start": "2854480",
    "end": "2860040"
  },
  {
    "text": "then your function has to match that but it also has the T at the beginning and so that's quite a simple enough pattern",
    "start": "2860040",
    "end": "2866480"
  },
  {
    "text": "to follow and and it makes sense because you know you've you've got the seed data and that's sort of like the contract",
    "start": "2866480",
    "end": "2872000"
  },
  {
    "text": "that you're writing there and I noticed in the example on the website that that you have a pause query you have the URL",
    "start": "2872000",
    "end": "2879119"
  },
  {
    "text": "paer kind of function that's been tested there and if it errors if the query",
    "start": "2879119",
    "end": "2884359"
  },
  {
    "text": "string it gets given errors you just call T do Skip and so that's interesting",
    "start": "2884359",
    "end": "2890400"
  },
  {
    "text": "the user kind of becomes responsible for verifying maybe sometimes in test code",
    "start": "2890400",
    "end": "2895599"
  },
  {
    "text": "that the input does actually make sense right yeah so like in that case if",
    "start": "2895599",
    "end": "2901319"
  },
  {
    "text": "it doesn't pass the basic check like let's say you want to do something like decode it then encode it and then decode",
    "start": "2901319",
    "end": "2906760"
  },
  {
    "text": "it again but the first time it fails you're like okay well what was given is not valid so I'm just going to skip it",
    "start": "2906760",
    "end": "2913599"
  },
  {
    "text": "yeah there's no error that makes sense for that but if it passed the first time like let's say it successfully decoded",
    "start": "2913599",
    "end": "2918960"
  },
  {
    "text": "it and then I re-encoded it and then I try to decode it again and then that second time it fails well that's a problem something happen somewhere in",
    "start": "2918960",
    "end": "2925240"
  },
  {
    "text": "there and so you have to kind of make those decisions in that moment yeah it makes sense because in that sense you're",
    "start": "2925240",
    "end": "2930760"
  },
  {
    "text": "not testing you have to also care about what you're testing and be aware of that but I think that also the fact that this",
    "start": "2930760",
    "end": "2937079"
  },
  {
    "text": "is a go function that you're writing really helps there CU you're just writing go code and we know how to write",
    "start": "2937079",
    "end": "2943319"
  },
  {
    "text": "go code so we get to kind of transfer all that knowledge straight over yeah I",
    "start": "2943319",
    "end": "2948680"
  },
  {
    "text": "also just added something a little bit different we're going to see how it goes I definitely want feedback on it where previously you know if you do f. add",
    "start": "2948680",
    "end": "2955359"
  },
  {
    "text": "zero that default so I believe it in 64 but let's say that your input to the f. fuzz is an INT it would fail because",
    "start": "2955359",
    "end": "2962079"
  },
  {
    "text": "it's like an N64 as an INT like but I did f. add or maybe you gave it a string instead of",
    "start": "2962079",
    "end": "2968280"
  },
  {
    "text": "a bite slice or something like that so what we just added was basically in the cases where it can be converted heavy",
    "start": "2968280",
    "end": "2975920"
  },
  {
    "text": "quotes can or make sense to convert it we do and I want to see if that makes people more confused or if it makes her",
    "start": "2975920",
    "end": "2982040"
  },
  {
    "text": "a better user experience so if you notice that when you're writing code and you're like why did this happen let us",
    "start": "2982040",
    "end": "2988000"
  },
  {
    "text": "know so I want to know if that is going to make sense for people I can already so I'm going give you some live feedback",
    "start": "2988000",
    "end": "2993160"
  },
  {
    "text": "if that's okay I can new segment of our show Johnny's live",
    "start": "2993160",
    "end": "2999480"
  },
  {
    "text": "feedback constructive hopefully not annoying feedback so even if the",
    "start": "3000079",
    "end": "3006880"
  },
  {
    "text": "conversion was possible I'd still want to see that error because I've come to expect a a certain level of",
    "start": "3006880",
    "end": "3014440"
  },
  {
    "text": "explicitness right in in in my code and and if there's some UND Hood conversion",
    "start": "3014440",
    "end": "3019920"
  },
  {
    "text": "happening for me it makes for a better in this case arguably a developer experience",
    "start": "3019920",
    "end": "3026200"
  },
  {
    "text": "but I expect sort of a a slap on the wrist a little bit you know if I'm passing in the wrong type but in a way",
    "start": "3026200",
    "end": "3032400"
  },
  {
    "text": "you're not you are passing in an in MH right when you when you add it that's",
    "start": "3032400",
    "end": "3037720"
  },
  {
    "text": "interesting like do you think people are going to explicitly put like use the types to kind of specify what the type",
    "start": "3037720",
    "end": "3044079"
  },
  {
    "text": "is in that ad like you could do add int bracket zero yeah I don't know that's",
    "start": "3044079",
    "end": "3049799"
  },
  {
    "text": "the question you know there are situations where maybe a function takes an INT and if you pass in zero it's going to pass you don't have to wrap",
    "start": "3049799",
    "end": "3056319"
  },
  {
    "text": "that today even though if you do a zero typically would a default Hood in 64 I think so there are certain things where",
    "start": "3056319",
    "end": "3062280"
  },
  {
    "text": "we actually it does convert it under the hood in ways that you don't notice or that I don't notice it to you like you're like actually that did do it and",
    "start": "3062280",
    "end": "3068760"
  },
  {
    "text": "so I don't know maybe maybe not maybe it doesn't make sense that's where like I want to see people like actually run into it there are definitely cases where",
    "start": "3068760",
    "end": "3074880"
  },
  {
    "text": "we shouldn't like if you do f. add negative one and then it goes to a uint it's going to make it the max value of a",
    "start": "3074880",
    "end": "3080119"
  },
  {
    "text": "u went we don't really want to do that um but we're figuring out how to how to make that decision and or Draw that line",
    "start": "3080119",
    "end": "3085720"
  },
  {
    "text": "or if we just say a hard line you have to you know do it yourself because we got some feedback that it was annoying on the other side so I'm curious how",
    "start": "3085720",
    "end": "3093640"
  },
  {
    "text": "this is going to play out over time because like let's say you change your function signature from int to N64 like",
    "start": "3093640",
    "end": "3100119"
  },
  {
    "text": "you want to be more uh explicit about that so you have all these values in the cache that took like a lot of CPA power",
    "start": "3100119",
    "end": "3106079"
  },
  {
    "text": "to find and they're all ins we want to continue using those and continue",
    "start": "3106079",
    "end": "3111359"
  },
  {
    "text": "converting them to n64s where it makes sense that may potentially like preserve test coverage like fuzzing test",
    "start": "3111359",
    "end": "3118520"
  },
  {
    "text": "coverage yeah that's interesting It's Tricky there's an issue about it I can find a way to maybe I'll post it on the",
    "start": "3118520",
    "end": "3124559"
  },
  {
    "text": "slack or something or on Twitter but there is an issue discussing it so if you have feedback please respond to that",
    "start": "3124559",
    "end": "3130720"
  },
  {
    "text": "issue in the gopher's package on the repo there is a trophies section where",
    "start": "3130720",
    "end": "3136119"
  },
  {
    "text": "it lists out quite a big list of things that it's helped find and bugs that it's",
    "start": "3136119",
    "end": "3141920"
  },
  {
    "text": "fixed do you see this having a similar kind of thing yes so I that's that's where I was mentioning at this like Doc",
    "start": "3141920",
    "end": "3148000"
  },
  {
    "text": "internally where people have like dm' me on Twitter or people have emailed me and been like I found a bug I'm like great",
    "start": "3148000",
    "end": "3153440"
  },
  {
    "text": "and I put it in the dock at some point I want to make that public too and still kind of collecting it so that's where",
    "start": "3153440",
    "end": "3158599"
  },
  {
    "text": "it's like for now tell one of us and we'll put in the dock um but in the future I want to find a way to have",
    "start": "3158599",
    "end": "3164760"
  },
  {
    "text": "people you know add to the trophy list or or at least um report them in a more",
    "start": "3164760",
    "end": "3170240"
  },
  {
    "text": "official way um but we do want to know about them so if you find one please tell us if you're interested and telling",
    "start": "3170240",
    "end": "3175680"
  },
  {
    "text": "us are there security implications for some of those discoveries sometimes",
    "start": "3175680",
    "end": "3180760"
  },
  {
    "text": "right so they they have to they have to make a decision like we're not if you find a crash it's not reporting anything back there's no way of us knowing it's",
    "start": "3180760",
    "end": "3187480"
  },
  {
    "text": "obviously it's running locally we don't we don't know I don't get a notification when it when a crash happens from a fuzzer and locally which is good but",
    "start": "3187480",
    "end": "3195599"
  },
  {
    "text": "yeah like if it found a SC vulnerability like don't tell me unless you want the public to know basically but you know if it's a bug that's filed publicly already",
    "start": "3195599",
    "end": "3203200"
  },
  {
    "text": "you know great so you can't keep secrets basically okay well um speaking of unpopular it's",
    "start": "3203200",
    "end": "3209559"
  },
  {
    "text": "time for unpopular opinions unpopular",
    "start": "3209559",
    "end": "3216000"
  },
  {
    "text": "[Music]",
    "start": "3216000",
    "end": "3219969"
  },
  {
    "text": "opinion popular opinion okay who's got a delicious and",
    "start": "3221280",
    "end": "3228760"
  },
  {
    "text": "popular opinion for us today or bitter or bitter yep I've got one I'm not sure",
    "start": "3228760",
    "end": "3235799"
  },
  {
    "text": "if you'll consider this a personal attack or not oh it's not going to be about hairlines is it go I want to hear",
    "start": "3235799",
    "end": "3241920"
  },
  {
    "text": "it my un popular opinion is that control V or command V for the mech users out",
    "start": "3241920",
    "end": "3247720"
  },
  {
    "text": "there should paste with formatting by default that is outrageous that one",
    "start": "3247720",
    "end": "3252920"
  },
  {
    "text": "genuinely I know I know right and the reason is if you're pasting within the same dock like you're moving a paragraph",
    "start": "3252920",
    "end": "3259319"
  },
  {
    "text": "or something you definitely want to keep that formatting right if you're copying from you know different in the same app",
    "start": "3259319",
    "end": "3266000"
  },
  {
    "text": "you probably still do yeah I know it's weird when you paste from the web browser and it has formatting you don't",
    "start": "3266000",
    "end": "3271599"
  },
  {
    "text": "want but I think it's better for control V to do the same thing wherever you are",
    "start": "3271599",
    "end": "3276760"
  },
  {
    "text": "every time I like software that's simple and not too magical or at least you know",
    "start": "3276760",
    "end": "3282520"
  },
  {
    "text": "simple to understand and explain even if it's doing something complicated yeah that's why you working",
    "start": "3282520",
    "end": "3287599"
  },
  {
    "text": "fuzzing yeah I know right that's why I work on modules too go is a language I think I mean",
    "start": "3287599",
    "end": "3294599"
  },
  {
    "text": "there're definitely only parts of it that are a little too magical for my taste but go as a language I think values Simplicity and explicitness and",
    "start": "3294599",
    "end": "3303040"
  },
  {
    "text": "that's why I have bad opinions about pasting yeah wow yeah that one really I",
    "start": "3303040",
    "end": "3308799"
  },
  {
    "text": "mean I've never been angry before on this I mean yeah that's you make quite a",
    "start": "3308799",
    "end": "3314520"
  },
  {
    "text": "compelling case and we will test this on Twitter but I've told you about I've mentioned before I shouldn't have to",
    "start": "3314520",
    "end": "3321200"
  },
  {
    "text": "engage some kind of copy and paste claw in order to to get some content over",
    "start": "3321200",
    "end": "3328480"
  },
  {
    "text": "just the text I don't think I've ever wanted the formatting to come across and",
    "start": "3328480",
    "end": "3334200"
  },
  {
    "text": "I use formatting in in Word documents and things for example or in Google Docs",
    "start": "3334200",
    "end": "3339240"
  },
  {
    "text": "I use the formatting kind of properly like you know I I'll use the correct",
    "start": "3339240",
    "end": "3344480"
  },
  {
    "text": "Styles and a bit like a style sheet I'll format them properly and stuff and if you do that then uh I just you know I",
    "start": "3344480",
    "end": "3351520"
  },
  {
    "text": "don't see why you would ever want that formatting to come across I think I think fine keep the information there",
    "start": "3351520",
    "end": "3357599"
  },
  {
    "text": "but Force the people like you that want that background color to be slightly different just on that little bit and",
    "start": "3357599",
    "end": "3363119"
  },
  {
    "text": "the font tiny you you're the one that should Engage The Claw that's that's what I",
    "start": "3363119",
    "end": "3368599"
  },
  {
    "text": "think I have a less angering and popular",
    "start": "3368599",
    "end": "3373359"
  },
  {
    "text": "opinion okay it it make you feel better um mine is that I don't know if it's",
    "start": "3374640",
    "end": "3379799"
  },
  {
    "text": "that unpopular but I think we need like a million more Tech writers in the world",
    "start": "3379799",
    "end": "3384960"
  },
  {
    "text": "I don't think that software Engineers are very good at writing documentation on average on average there are plenty",
    "start": "3384960",
    "end": "3391799"
  },
  {
    "text": "that are good at it but I think there's a lot of documentation in the world and services that people can use that they",
    "start": "3391799",
    "end": "3397680"
  },
  {
    "text": "don't because the documentation is unreadable and difficult and it's written by the people who have their",
    "start": "3397680",
    "end": "3404359"
  },
  {
    "text": "head in the weeds too much I think if we had T writers more often then the world",
    "start": "3404359",
    "end": "3409720"
  },
  {
    "text": "would just be a happier brighter more easily understood Place very interesting I see you've been read reading the open",
    "start": "3409720",
    "end": "3415559"
  },
  {
    "text": "Telemetry documentation their names I thought you said oh okay sorry I just think they're",
    "start": "3415559",
    "end": "3421920"
  },
  {
    "text": "undervalued basically yeah completely agree I like to like Swap and write the docs for something else because like not",
    "start": "3421920",
    "end": "3429640"
  },
  {
    "text": "understanding it kind of in that point is a virtue so that is an interesting one yeah I mean I definitely value it",
    "start": "3429640",
    "end": "3435839"
  },
  {
    "text": "too good documentation makes all the difference uh so yeah I I think you are",
    "start": "3435839",
    "end": "3441559"
  },
  {
    "text": "a a real engineer if you are contributing documentation absolutely well that is all the time we",
    "start": "3441559",
    "end": "3448839"
  },
  {
    "text": "have what a great episode thank you so much for joining us and thanks for taking us on that deep dive tour of the",
    "start": "3448839",
    "end": "3455720"
  },
  {
    "text": "crazy world of fuzzing please try it at home and wherever you are probably at home still so do try it and let us know",
    "start": "3455720",
    "end": "3462880"
  },
  {
    "text": "what you think of it thank you so much to our guests Katy Hawkman Jay comrad",
    "start": "3462880",
    "end": "3468240"
  },
  {
    "text": "and of course Johnny boso has been here haven't you Johnny yes I've been here yeah you saw me right yeah exactly okay",
    "start": "3468240",
    "end": "3475520"
  },
  {
    "text": "sounded like a lie when you said that thanks so much thanks thanks for having us on it's been a pleasure oh no it's",
    "start": "3475520",
    "end": "3480799"
  },
  {
    "text": "been great you'll have to come back another time and we'll see you next time on go",
    "start": "3480799",
    "end": "3487440"
  },
  {
    "text": "time we'll put these unpopular opinions to the test on Twitter follow gotime FM",
    "start": "3488559",
    "end": "3494960"
  },
  {
    "text": "and let your opinion be heard when we take the poll and of course if you dig the show spread the love and let other",
    "start": "3494960",
    "end": "3501319"
  },
  {
    "text": "gophers or even go curious folks know about go time we do appreciate it Go",
    "start": "3501319",
    "end": "3506599"
  },
  {
    "text": "time is produced by Jared Santo with music by break master cylinder we're brought to you by fley launch darkley",
    "start": "3506599",
    "end": "3512760"
  },
  {
    "text": "and Leno next time on go time John and Chris are joined by Peter Bon and Tim",
    "start": "3512760",
    "end": "3518240"
  },
  {
    "text": "Heckman to discuss Go's controversial V2 plus problem we'll have that episode ready for you next",
    "start": "3518240",
    "end": "3525960"
  },
  {
    "text": "week [Music]",
    "start": "3533720",
    "end": "3563640"
  },
  {
    "text": "he I can't get over the copy and paste",
    "start": "3563640",
    "end": "3570079"
  },
  {
    "text": "thing I can't believe can't believe I've genuinely you're the first person I've ever met this had that opinion I'm",
    "start": "3570079",
    "end": "3577640"
  },
  {
    "text": "amazed I wanted to find something that would actually be unpopular I think you may have done it I",
    "start": "3577640",
    "end": "3583200"
  },
  {
    "text": "I think you hit it yeah as in a former life I worked on Google Docs and visualizing a copy and paste claw that",
    "start": "3583200",
    "end": "3589839"
  },
  {
    "text": "that just brings me such pleasure yeah yeah yeah especially on a Mac it's",
    "start": "3589839",
    "end": "3596480"
  },
  {
    "text": "just awful yeah it is weird I mean you're asking for trible sometimes it locks in that and you have to go around",
    "start": "3596480",
    "end": "3602280"
  },
  {
    "text": "to explaining to your friends and family why you've got hand like that oh but you know you made quite a good case for it",
    "start": "3602280",
    "end": "3609079"
  },
  {
    "text": "and often when we put them out on Twitter people listen to the case that's made and they it does convince people",
    "start": "3609079",
    "end": "3615400"
  },
  {
    "text": "that's why most of the time the unpopular opinions are voted popular so we'll see not this one not",
    "start": "3615400",
    "end": "3622960"
  },
  {
    "text": "this one I think not I hope not but we'll see but I'll just you know I'll I'm I'm G to get one of those like notices under my Twitter account like",
    "start": "3622960",
    "end": "3629799"
  },
  {
    "text": "this account has been propagating bad opinions and has been suspended for S years need to stop",
    "start": "3629799",
    "end": "3636240"
  },
  {
    "text": "it you need to apologize J yeah that would be great and it will be the message would be in a slightly wrong",
    "start": "3636240",
    "end": "3642680"
  },
  {
    "text": "format as well and that serves you right cuz carb too Bal and has like a a",
    "start": "3642680",
    "end": "3649799"
  },
  {
    "text": "yellow background or something yeah yeah just exactly yeah the background you",
    "start": "3649799",
    "end": "3655000"
  },
  {
    "text": "surely surely you never want the background come",
    "start": "3655000",
    "end": "3663000"
  }
]