[
  {
    "text": "so the first thing that we do we",
    "start": "420",
    "end": "3300"
  },
  {
    "text": "separate",
    "start": "3300",
    "end": "4860"
  },
  {
    "text": "data can live on its own and code can",
    "start": "4860",
    "end": "7560"
  },
  {
    "text": "even on its own",
    "start": "7560",
    "end": "9300"
  },
  {
    "text": "like in functional programming",
    "start": "9300",
    "end": "11580"
  },
  {
    "text": "so the first step of data is exactly the",
    "start": "11580",
    "end": "14099"
  },
  {
    "text": "same functional programming",
    "start": "14099",
    "end": "16198"
  },
  {
    "text": "the second step is that",
    "start": "16199",
    "end": "19440"
  },
  {
    "text": "instead of using a specific structure to",
    "start": "19440",
    "end": "24180"
  },
  {
    "text": "represent our data we prefer to use",
    "start": "24180",
    "end": "27240"
  },
  {
    "text": "generic data structures",
    "start": "27240",
    "end": "29640"
  },
  {
    "text": "like hashmaps",
    "start": "29640",
    "end": "31500"
  },
  {
    "text": "like we have in Ruby and in JavaScript",
    "start": "31500",
    "end": "33899"
  },
  {
    "text": "or dictionaries in Python that's the our",
    "start": "33899",
    "end": "38340"
  },
  {
    "text": "main ingredient for",
    "start": "38340",
    "end": "40100"
  },
  {
    "text": "representing data that we have fetched",
    "start": "40100",
    "end": "42899"
  },
  {
    "text": "from the database",
    "start": "42899",
    "end": "44280"
  },
  {
    "text": "and that's where there is a little split",
    "start": "44280",
    "end": "46860"
  },
  {
    "text": "versus",
    "start": "46860",
    "end": "48600"
  },
  {
    "text": "standard functional programming",
    "start": "48600",
    "end": "50039"
  },
  {
    "text": "languages like Haskell and all the ml",
    "start": "50039",
    "end": "52260"
  },
  {
    "text": "families where there you use strongly",
    "start": "52260",
    "end": "55620"
  },
  {
    "text": "typed things to model your your data",
    "start": "55620",
    "end": "59100"
  },
  {
    "text": "here we prefer to use generic data",
    "start": "59100",
    "end": "61379"
  },
  {
    "text": "structures mainly hash maps and lists",
    "start": "61379",
    "end": "65280"
  },
  {
    "text": "and the number three",
    "start": "65280",
    "end": "68340"
  },
  {
    "text": "which is similar to functional",
    "start": "68340",
    "end": "70799"
  },
  {
    "text": "programming is that we never mutate data",
    "start": "70799",
    "end": "74220"
  },
  {
    "text": "we use immutable data structures",
    "start": "74220",
    "end": "77820"
  },
  {
    "text": "and there are very very advanced",
    "start": "77820",
    "end": "81180"
  },
  {
    "text": "or very performant sorry immutable data",
    "start": "81180",
    "end": "84060"
  },
  {
    "text": "structures for generic data structures",
    "start": "84060",
    "end": "86640"
  },
  {
    "text": "so we have in all languages we have",
    "start": "86640",
    "end": "89880"
  },
  {
    "text": "super efficient immutable hashmaps",
    "start": "89880",
    "end": "93000"
  },
  {
    "text": "where",
    "start": "93000",
    "end": "95159"
  },
  {
    "text": "instead of modifying the data in place",
    "start": "95159",
    "end": "97799"
  },
  {
    "text": "you create kind of a new version of the",
    "start": "97799",
    "end": "99960"
  },
  {
    "text": "data but without having to clone",
    "start": "99960",
    "end": "102900"
  },
  {
    "text": "the original data we can talk about that",
    "start": "102900",
    "end": "105600"
  },
  {
    "text": "later if you are interested",
    "start": "105600",
    "end": "108259"
  },
  {
    "text": "that was principle number three",
    "start": "108259",
    "end": "111299"
  },
  {
    "text": "and principle number four is okay if you",
    "start": "111299",
    "end": "113700"
  },
  {
    "text": "don't have types for your data how do",
    "start": "113700",
    "end": "116340"
  },
  {
    "text": "you prevent how do you avoid the big",
    "start": "116340",
    "end": "118500"
  },
  {
    "text": "mess that you will be into if all the",
    "start": "118500",
    "end": "120659"
  },
  {
    "text": "pieces of data that you manipulate in",
    "start": "120659",
    "end": "122340"
  },
  {
    "text": "your program are hash Maps how do you",
    "start": "122340",
    "end": "124860"
  },
  {
    "text": "know if in the ash Maps",
    "start": "124860",
    "end": "126719"
  },
  {
    "text": "you expect a field that it's called",
    "start": "126719",
    "end": "128340"
  },
  {
    "text": "email and user and ID and how do you",
    "start": "128340",
    "end": "130860"
  },
  {
    "text": "know how to spell it",
    "start": "130860",
    "end": "132720"
  },
  {
    "text": "how do you know as a programmer and how",
    "start": "132720",
    "end": "134879"
  },
  {
    "text": "does the program know to fail fast and",
    "start": "134879",
    "end": "137940"
  },
  {
    "text": "not pass forward invalid data",
    "start": "137940",
    "end": "140940"
  },
  {
    "text": "and that's the way we do data validation",
    "start": "140940",
    "end": "144540"
  },
  {
    "text": "in data Outlet programming is by having",
    "start": "144540",
    "end": "147180"
  },
  {
    "text": "the schema the data schema separated",
    "start": "147180",
    "end": "150300"
  },
  {
    "text": "from the data itself",
    "start": "150300",
    "end": "152520"
  },
  {
    "text": "is validated at runtime not at compile",
    "start": "152520",
    "end": "155819"
  },
  {
    "text": "time",
    "start": "155819",
    "end": "158000"
  },
  {
    "text": "[Music]",
    "start": "159020",
    "end": "162639"
  }
]