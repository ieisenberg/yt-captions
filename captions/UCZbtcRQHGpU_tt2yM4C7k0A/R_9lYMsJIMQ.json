[
  {
    "text": "you also recently spoke at goer con EU about what was the subject postgress",
    "start": "40",
    "end": "5560"
  },
  {
    "text": "yeah postgress what a great link not like an href I mean like a proper one",
    "start": "5560",
    "end": "10679"
  },
  {
    "text": "radio link like a foreign key oh oh nice here we go oh this is going to be a fun",
    "start": "10679",
    "end": "16560"
  },
  {
    "text": "show it's going to be either fun or chaotic let's find out being with for",
    "start": "16560",
    "end": "21840"
  },
  {
    "text": "change log is provided by fastly learn more fastly.com we move fast and fix",
    "start": "21840",
    "end": "27679"
  },
  {
    "text": "things here at change law because of rollar check them out at roar.com and we're hosted on Leno Cloud servers head",
    "start": "27679",
    "end": "34040"
  },
  {
    "text": "to lin.com changelog lenoe is our Cloud Sero Choice",
    "start": "34040",
    "end": "41280"
  },
  {
    "text": "grab the nanode plan for just $5 a month just five bucks that gets you a gig of RAM a blazing fast 25 gig SSD and 1 tab",
    "start": "41280",
    "end": "49399"
  },
  {
    "text": "of transfer let's be honest you can go a long ways on that five bucks when you do need to scale up their prices are",
    "start": "49399",
    "end": "55680"
  },
  {
    "text": "predictable so you can put your calculator down you won't need it we've been running change.com on l L for years",
    "start": "55680",
    "end": "60879"
  },
  {
    "text": "and we've always impressed by their award-winning support team check them out at lin.com",
    "start": "60879",
    "end": "66280"
  },
  {
    "text": "changelog once again that's lin.com",
    "start": "66280",
    "end": "71000"
  },
  {
    "text": "changelog let's do it it's go time welcome to go time your source for",
    "start": "81200",
    "end": "87720"
  },
  {
    "text": "diverse discussions from around the go community on next week's episode Jackie grindrod",
    "start": "87720",
    "end": "93200"
  },
  {
    "text": "and deshun Carter join John Calhoun to tell the stories of their first week with go subscribe if you haven't at",
    "start": "93200",
    "end": "102159"
  },
  {
    "text": "chang.org here we",
    "start": "104640",
    "end": "110710"
  },
  {
    "text": "[Music]",
    "start": "110710",
    "end": "116700"
  },
  {
    "text": "[Applause] go",
    "start": "116700",
    "end": "121840"
  },
  {
    "text": "hello and welcome to go time I'm Matt ryer today we're talking about postgress",
    "start": "123079",
    "end": "129720"
  },
  {
    "text": "I'm joined by regulars John Calhoun and Johnny Boro hello gentlemen hello hey",
    "start": "129720",
    "end": "136480"
  },
  {
    "text": "Matt and we're also joined by a special guest it's Johan brandor hello Johan",
    "start": "136480",
    "end": "142400"
  },
  {
    "text": "hello Matt welcome to the show I should say welcome back to the show I notice",
    "start": "142400",
    "end": "147760"
  },
  {
    "text": "your Twitter bio says that you actually a maintainer of quite a few grpc projects yeah that's right yeah so",
    "start": "147760",
    "end": "155680"
  },
  {
    "text": "you'll have to uh come back and do a different show about grpc sometime oh I'd love that yeah we should do that",
    "start": "155680",
    "end": "162640"
  },
  {
    "text": "aren't you working on grpc or something you've just started somewhere yeah so I just started a new job at a company",
    "start": "162640",
    "end": "168319"
  },
  {
    "text": "called buff where we're working on stuff related to grpc but more specifically around API management and uh making",
    "start": "168319",
    "end": "175560"
  },
  {
    "text": "produ easier to use basically very cool a lot of the grpc",
    "start": "175560",
    "end": "180640"
  },
  {
    "text": "repos you have are about making grpc easier to use like on the web and things aren't they yeah exactly so there's a",
    "start": "180640",
    "end": "187879"
  },
  {
    "text": "especially at the start of the kind of JC um when it first came out it just it was kind of dropped out of Google and",
    "start": "187879",
    "end": "193360"
  },
  {
    "text": "then obviously you're expected to know as much about it as anyone at Google uh so there was a lot of space for blogging",
    "start": "193360",
    "end": "199440"
  },
  {
    "text": "and creating example Ros for users who weren't so familiar with the the packages yes great well and you also",
    "start": "199440",
    "end": "207159"
  },
  {
    "text": "recently spoke at go foron EU about what was the subject postgress yeah postgress",
    "start": "207159",
    "end": "214319"
  },
  {
    "text": "what a great link yeah a link not like an href I mean like a proper one radio",
    "start": "214319",
    "end": "220120"
  },
  {
    "text": "link like a foreign key yeah oh oh nice here we go oh this is going to be a fun",
    "start": "220120",
    "end": "226360"
  },
  {
    "text": "show it's going to be either fun or chaotic let's find out we should maybe start just at the very beginning for",
    "start": "226360",
    "end": "233720"
  },
  {
    "text": "anyone really new to programming what is postgress and why would you ever use it",
    "start": "233720",
    "end": "241159"
  },
  {
    "text": "I guess sto them stop so if we've stumped him there we",
    "start": "241159",
    "end": "246760"
  },
  {
    "text": "are going to have a have a Troublesome show I kind of gave a whole introduction",
    "start": "246760",
    "end": "251959"
  },
  {
    "text": "about this at the presentation so I should know basically what I said then was whenever you want to store some data",
    "start": "251959",
    "end": "258000"
  },
  {
    "text": "that needs to live beyond the lifetime of your application you probably want to use a data store and you can write a",
    "start": "258000",
    "end": "264840"
  },
  {
    "text": "disk for example you can create a file or whatever but as soon as you want to do things like filter on the result sets",
    "start": "264840",
    "end": "271120"
  },
  {
    "text": "or read concurrently or things like that everything becomes much easier with a purpose-built application and post is one such",
    "start": "271120",
    "end": "278440"
  },
  {
    "text": "application yeah that's great so yeah saving data not just dumb saving like",
    "start": "278440",
    "end": "283680"
  },
  {
    "text": "let you say uh sticking Json into a text file or something but slightly more sophisticated things than that and of",
    "start": "283680",
    "end": "290320"
  },
  {
    "text": "course postgress has been around a while as well hasn't it yeah so it's over 20 years old now actually it came out of",
    "start": "290320",
    "end": "297800"
  },
  {
    "text": "Berkeley I think it was a project that they were working on internally and then they created an open source project out",
    "start": "297800",
    "end": "303320"
  },
  {
    "text": "of it that's why it's called postgress it's a post to something called I can't remember now that that was a poor lead",
    "start": "303320",
    "end": "310520"
  },
  {
    "text": "on it's the post to something called Gress exactly that's kind of where the name comes from actually yeah right no",
    "start": "310520",
    "end": "316280"
  },
  {
    "text": "it makes sense so Gres maybe was like a database before it",
    "start": "316280",
    "end": "322080"
  },
  {
    "text": "yeah yeah I mean we can guess uh next week we're going to be guessing the origins of the name rust ooh",
    "start": "322080",
    "end": "330319"
  },
  {
    "text": "yeah okay so postgress then it's been an option for a while as you say it's been around a while what makes it a",
    "start": "330319",
    "end": "337520"
  },
  {
    "text": "particular favorite of yours compared to Alternatives because there are lots of Alternatives and my SQL light for",
    "start": "337520",
    "end": "344319"
  },
  {
    "text": "example is quite an interesting SQ litis is also another popular database like post cool thing about STIs that it all",
    "start": "344319",
    "end": "350720"
  },
  {
    "text": "works in a single file but post is a little bit more complicated than that but the big thing that a post has over",
    "start": "350720",
    "end": "357360"
  },
  {
    "text": "seite in go specifically is really good Library support so unfortunately the SQL",
    "start": "357360",
    "end": "362520"
  },
  {
    "text": "light driver that everyone uses is a SEO driver and as most of you probably know",
    "start": "362520",
    "end": "368280"
  },
  {
    "text": "SEO means building with C it means longer build times it means less portable binaries and stuff like that so",
    "start": "368280",
    "end": "375199"
  },
  {
    "text": "in go with postour we actually have several different pure go libraries to speak with postour which is really great",
    "start": "375199",
    "end": "380759"
  },
  {
    "text": "so that's just one reason to use postour but other things are such as the",
    "start": "380759",
    "end": "385880"
  },
  {
    "text": "stability of the software for example as you say it's over 20 years old it's been used by thousands of companies worldwide",
    "start": "385880",
    "end": "391919"
  },
  {
    "text": "you know it's not going to just you know corrupt your files because those bugs have been ironed out",
    "start": "391919",
    "end": "398199"
  },
  {
    "text": "by now so within databases I think you often say you don't want to use something that's less than 10 years old",
    "start": "398199",
    "end": "404840"
  },
  {
    "text": "because like this data needs to live for a long time H you want to make sure it doesn't you know corrupt on the dis or",
    "start": "404840",
    "end": "411120"
  },
  {
    "text": "whatever and posters is one such stable mature solution it's also very fast",
    "start": "411120",
    "end": "417120"
  },
  {
    "text": "because it's written in C and C is fast um it's easy to run you can provide",
    "start": "417120",
    "end": "423080"
  },
  {
    "text": "containers for running in the cloud or running it locally you can also install it locally you'll be able to install it on basically any operating system that",
    "start": "423080",
    "end": "430000"
  },
  {
    "text": "you're running and many Cloud providers have specially built databases like RDS",
    "start": "430000",
    "end": "435520"
  },
  {
    "text": "and gcp clouds SQL for running postris compatible servers so you can just talk",
    "start": "435520",
    "end": "442599"
  },
  {
    "text": "to post anywhere basically yeah so because it has a SQL interface doesn't",
    "start": "442599",
    "end": "447680"
  },
  {
    "text": "it at its roote yeah well The Wire interface is a little bit different from uh other things so",
    "start": "447680",
    "end": "454000"
  },
  {
    "text": "when I say on the wire it means like the the interface that you're really talking over the network obviously to the user it",
    "start": "454000",
    "end": "460960"
  },
  {
    "text": "provides a SQL the structured query language interface so you can do things",
    "start": "460960",
    "end": "466159"
  },
  {
    "text": "like selects and updates and inserts like that so as a user it provides a similar interface to other SQL databases",
    "start": "466159",
    "end": "473120"
  },
  {
    "text": "that you may have used but and on the wire so to speak it's a little bit different from for example MySQL but",
    "start": "473120",
    "end": "479400"
  },
  {
    "text": "actually posters has kind of uh spawned its own little sub genre of databases",
    "start": "479400",
    "end": "485879"
  },
  {
    "text": "because because posters is so popular a lot of other databases Implement their wire format in the format of postr so",
    "start": "485879",
    "end": "492720"
  },
  {
    "text": "for example cockroach DB which is a large popular well funded startup that's",
    "start": "492720",
    "end": "498319"
  },
  {
    "text": "basically taken postris and made it more easy to deploy at a very large scale with the clustering and Go distribution",
    "start": "498319",
    "end": "506319"
  },
  {
    "text": "for example that implements the post wire into face so that you can basically",
    "start": "506319",
    "end": "511639"
  },
  {
    "text": "pretend that your cockroach DB database is actually a postur server and you can use the normal postur that go post",
    "start": "511639",
    "end": "518518"
  },
  {
    "text": "drivers to to work with cockroach DB H so as a programmer what's it like to use",
    "start": "518519",
    "end": "525440"
  },
  {
    "text": "presumably you you know you create tables at some point and you know a table has columns and there's data types",
    "start": "525440",
    "end": "532240"
  },
  {
    "text": "and things is it that familiar the the sort of spreadsheet kind of mindset you",
    "start": "532240",
    "end": "538200"
  },
  {
    "text": "could if you imagine a spread spreadsheet is kind of that sort of thing isn't it is it the same for postest yeah so it's it you could say",
    "start": "538200",
    "end": "545200"
  },
  {
    "text": "that it has rows and Columns of course so you can imagine like a a matrix where",
    "start": "545200",
    "end": "550360"
  },
  {
    "text": "each row is a new entry of data and each column is a different data type or field",
    "start": "550360",
    "end": "556079"
  },
  {
    "text": "in the your schema so it's built on this SQL SQL I actually prefer to say SQL",
    "start": "556079",
    "end": "562120"
  },
  {
    "text": "that means that you have to Define your tables in the SQL language before you start working with the data so in",
    "start": "562120",
    "end": "568279"
  },
  {
    "text": "contrast to something like a document database where you can just take a blob of Json and insert it and again read it",
    "start": "568279",
    "end": "574480"
  },
  {
    "text": "out when postgress and other SQL databases like it you have to predefine",
    "start": "574480",
    "end": "580200"
  },
  {
    "text": "the structure of your data so you will say I want the table of users and I want the users to have exactly these fields",
    "start": "580200",
    "end": "586560"
  },
  {
    "text": "and you can only uh insert data with that structure and you can know that when you're reading data out of it it",
    "start": "586560",
    "end": "592200"
  },
  {
    "text": "will have that structure so it's much I kind of prefer saying that it's like going from using python to using go in",
    "start": "592200",
    "end": "599800"
  },
  {
    "text": "that you get that typing included in your data structures yeah absolutely there is a",
    "start": "599800",
    "end": "605519"
  },
  {
    "text": "kind of nice Freedom you get with document stores because it feels like you can just throw anything in and it",
    "start": "605519",
    "end": "611120"
  },
  {
    "text": "and query it and it works and of course if there's different shapes of data that's sort of no problem in practice it",
    "start": "611120",
    "end": "617880"
  },
  {
    "text": "turns out to be a little bit of a poisoned chalice because often you've just moved the problem you still need a",
    "start": "617880",
    "end": "624600"
  },
  {
    "text": "schema you still need data structures they exist you you you may not have",
    "start": "624600",
    "end": "629720"
  },
  {
    "text": "discovered them up front but with the technology like postest you do you have to sort of plan a bit ahead and so for",
    "start": "629720",
    "end": "636440"
  },
  {
    "text": "example a table then if we were modeling a Blog and we had blogs and we had posts and then comments",
    "start": "636440",
    "end": "644360"
  },
  {
    "text": "we might have a table for blogs a table for posts and a table for comments and",
    "start": "644360",
    "end": "650680"
  },
  {
    "text": "that's because each of those data types looks different you know comment might have an author and a Tim stamp as",
    "start": "650680",
    "end": "658120"
  },
  {
    "text": "actually they all might you know but there's other fields might be different couldn't think of another example yeah so that gives you this sort of idea and",
    "start": "658120",
    "end": "665279"
  },
  {
    "text": "then they link together by referring to the primary keys in those other tables I",
    "start": "665279",
    "end": "670760"
  },
  {
    "text": "just want to give a very basic kind of overview for anyone that really hasn't had chance yet to play with databases",
    "start": "670760",
    "end": "677880"
  },
  {
    "text": "properly I think your your spreadsheet analogy is a pretty good one for anybody who's never used postrest or any SQL you",
    "start": "677880",
    "end": "685160"
  },
  {
    "text": "know database where you're essentially you just have to predefine the columns up top and then you can have multiple",
    "start": "685160",
    "end": "691800"
  },
  {
    "text": "sheets that are connected so like when Matt's talking about you know having IDs that link to other tables it's almost",
    "start": "691800",
    "end": "697920"
  },
  {
    "text": "like you have your user spreadsheet and in there it might say like okay if you want to find this users's purchases or",
    "start": "697920",
    "end": "703240"
  },
  {
    "text": "something you have to go to the purchases spreadsheet and find all the ones where the user ID column has that user ID so I think that's probably one",
    "start": "703240",
    "end": "710680"
  },
  {
    "text": "of the biggest differences between a lot of other types of databases is that in a SQL database you're generally running",
    "start": "710680",
    "end": "715720"
  },
  {
    "text": "queries to join that data um you know to connect them all whereas in a lot of nosql databases you do a lot of that",
    "start": "715720",
    "end": "722920"
  },
  {
    "text": "work up front to you sort of get whatever format you need it in and that",
    "start": "722920",
    "end": "728880"
  },
  {
    "text": "can be good or bad depending on your situation yeah I've heard from people",
    "start": "728880",
    "end": "734320"
  },
  {
    "text": "who deal with very large scale that at some point the relational model you know be with you know MySQL postgress",
    "start": "734320",
    "end": "742320"
  },
  {
    "text": "Microsoft Access I don't care whatever you want to you want to",
    "start": "742320",
    "end": "747639"
  },
  {
    "text": "use H Microsoft Access I have nightmares about that stuff yeah so at some point the",
    "start": "747880",
    "end": "755079"
  },
  {
    "text": "relational model they say that it starts to break down right I'm curious if one",
    "start": "755079",
    "end": "761040"
  },
  {
    "text": "has any of us on the show here sort of ever reach that sort of theoretical boundary where having a relational model",
    "start": "761040",
    "end": "768160"
  },
  {
    "text": "um really starts to break down in terms of uh speed of access or really like",
    "start": "768160",
    "end": "773480"
  },
  {
    "text": "once you start having such complicated business logic that you have the number of tables you're joining starts to",
    "start": "773480",
    "end": "778920"
  },
  {
    "text": "create a performance barrier right and basically how you sort of go around that I can say for me like I've had cases",
    "start": "778920",
    "end": "786320"
  },
  {
    "text": "where very complex queries joining a bunch of different tables caused us to have really slow queries but almost",
    "start": "786320",
    "end": "793360"
  },
  {
    "text": "every time it wasn't that the database couldn't handle it it's that we were doing something else wrong or like we",
    "start": "793360",
    "end": "799120"
  },
  {
    "text": "had to optimize something else and like the simplest example of this is if you set up a database and you don't have any",
    "start": "799120",
    "end": "804720"
  },
  {
    "text": "indexes so there's like no sorting of your Fields there and you're looking up us by email address well that'll work",
    "start": "804720",
    "end": "811560"
  },
  {
    "text": "pretty fine you know that'll work well until you have a certain number of users and then at that point eventually it's just going to take two long to scan the",
    "start": "811560",
    "end": "817560"
  },
  {
    "text": "entire database for all those users but the way you fix that is you add an index and all of a sudden that",
    "start": "817560",
    "end": "822760"
  },
  {
    "text": "query becomes quick again and basically my experience for now granted I think",
    "start": "822760",
    "end": "828480"
  },
  {
    "text": "there is some upper threshold but all of my experiences have been that we basically just got into one of those",
    "start": "828480",
    "end": "833639"
  },
  {
    "text": "situations where we need to understand the problem better and Define indexes or something to to simplify it in some way",
    "start": "833639",
    "end": "841320"
  },
  {
    "text": "yeah denormalization is something that comes up when I think about this kind of thing because often that's a decision",
    "start": "841320",
    "end": "847160"
  },
  {
    "text": "that you make really for performance reasons and with relational databases",
    "start": "847160",
    "end": "852320"
  },
  {
    "text": "they're nice because you can kind of query them in different ways later you",
    "start": "852320",
    "end": "857480"
  },
  {
    "text": "can join in the query itself make different joins on the data can't you to mix data in different and new ways so",
    "start": "857480",
    "end": "865320"
  },
  {
    "text": "that's very nice if if you're exploring possibilities with an existing application if you contrast that to",
    "start": "865320",
    "end": "871800"
  },
  {
    "text": "document stores where you're just storing basically Json blobs you have to pre-prepare everything in that Json blob",
    "start": "871800",
    "end": "879040"
  },
  {
    "text": "really or have some tech around it to kind of simulate that maybe there's a",
    "start": "879040",
    "end": "884839"
  },
  {
    "text": "way when a user changes their profile picture maybe there's a task that goes back in a document store and updates all",
    "start": "884839",
    "end": "892000"
  },
  {
    "text": "the previous exact times that that was copied and you wouldn't need to do that in a relational database because of",
    "start": "892000",
    "end": "898920"
  },
  {
    "text": "course you're joining it at the sort of run time and that's another time when at least when I think about this at massive",
    "start": "898920",
    "end": "905519"
  },
  {
    "text": "scale that's why document stores exist isn't it it's because at massive scale that data is probably distributed",
    "start": "905519",
    "end": "912639"
  },
  {
    "text": "geographically and just joining it is not as simple as just reading from one",
    "start": "912639",
    "end": "917920"
  },
  {
    "text": "place that's one of the problems we have with it I think what that's one of the problems that cockroach is trying to",
    "start": "917920",
    "end": "923600"
  },
  {
    "text": "solve as well so they use the raft algorithm to have a um leader follower",
    "start": "923600",
    "end": "929959"
  },
  {
    "text": "relationship between nodes so that the data is replicated across different uh",
    "start": "929959",
    "end": "935519"
  },
  {
    "text": "um geographical nodes that that's how they try to solve that sort of thing but yeah that's definitely one of the",
    "start": "935519",
    "end": "941519"
  },
  {
    "text": "problems with post specifically as well like how do you do that sort of data replication otherwise I want to pull on",
    "start": "941519",
    "end": "947399"
  },
  {
    "text": "that thread a little bit because depending on on how much data right you're dealing with it's usually sort of",
    "start": "947399",
    "end": "954839"
  },
  {
    "text": "unclear right so if you read enough blog post read enough content out out there you'll eventually run across advises as",
    "start": "954839",
    "end": "961000"
  },
  {
    "text": "well once you reach a certain scale right you know the number of say read replicas you're going to have uh you",
    "start": "961000",
    "end": "967279"
  },
  {
    "text": "know stops being sort of good enough right and then you know there's various metrics you can use for that it's I",
    "start": "967279",
    "end": "972600"
  },
  {
    "text": "think it's going to vary from Team to team from domain to domain then you're going to see some advice around well yes",
    "start": "972600",
    "end": "978240"
  },
  {
    "text": "it's good to store your your quote unquote transactional data right in a relational store but if you want to do",
    "start": "978240",
    "end": "984480"
  },
  {
    "text": "things like reporting for example these kinds of things should live in a separate database right whereby you have",
    "start": "984480",
    "end": "989880"
  },
  {
    "text": "a lot more denormalization going on maybe you're using a data warehouse maybe using a different approach to alog",
    "start": "989880",
    "end": "995519"
  },
  {
    "text": "together maybe using star schemas hybrids whatever the case may be but you're really moving away from sort of",
    "start": "995519",
    "end": "1001959"
  },
  {
    "text": "uh the use cases you're splitting the use case whereby you might have an application which is you know this is",
    "start": "1001959",
    "end": "1007000"
  },
  {
    "text": "where your your users are sort of uh using your application and pumping a lot of data in there and uh maybe you might",
    "start": "1007000",
    "end": "1012519"
  },
  {
    "text": "have a read replica for the read heavy actions but you know for your business internal business users or even for a",
    "start": "1012519",
    "end": "1018759"
  },
  {
    "text": "separate product that's relies quite heavily on computation in reads and sort of a reporting right creating dashboards",
    "start": "1018759",
    "end": "1025160"
  },
  {
    "text": "and things like that maybe you want to move that data right to a different database system alog together and I've",
    "start": "1025160",
    "end": "1030240"
  },
  {
    "text": "seen postp use in both of those cases right you can create your schema right to use a common terminology from my data",
    "start": "1030240",
    "end": "1037240"
  },
  {
    "text": "warehousing days you can create a star schema you know also in your relational database right you know it could be a separate user comp be separate database",
    "start": "1037240",
    "end": "1044280"
  },
  {
    "text": "you know but you can use the same sort of traditional relational databases to actually create those so I'm curious",
    "start": "1044280",
    "end": "1050240"
  },
  {
    "text": "what sort of our Collective experiences have been with regards to how soon do",
    "start": "1050240",
    "end": "1055280"
  },
  {
    "text": "you sort of make that split in your applications or do you go for as long as you can right saying hey you know what",
    "start": "1055280",
    "end": "1061400"
  },
  {
    "text": "you know using postgress is just fine I don't need to bring in new tech to do reporting I can just uh create another",
    "start": "1061400",
    "end": "1067200"
  },
  {
    "text": "schema inside of my existing server and I'm good right so what is the advice",
    "start": "1067200",
    "end": "1072919"
  },
  {
    "text": "first of all with regards to transactional versus pure reporting sort of olap data vers versus you know do you",
    "start": "1072919",
    "end": "1079440"
  },
  {
    "text": "keep everything in one system what are the things are you considering right before you make that decision W that's a",
    "start": "1079440",
    "end": "1085000"
  },
  {
    "text": "big question do we ask B questions on this show like I'm very much a if it isn't",
    "start": "1085000",
    "end": "1091280"
  },
  {
    "text": "broke don't fix it type person but that's only because it's bitten me so many times to do",
    "start": "1091280",
    "end": "1097400"
  },
  {
    "text": "that so I very much will stick with postgress until like I'm absolutely certain I cannot do the or solve this",
    "start": "1097400",
    "end": "1104000"
  },
  {
    "text": "problem without it and when is that for you what is that it just depends is the problem like I've talked to people like",
    "start": "1104000",
    "end": "1109760"
  },
  {
    "text": "in multiple cases I've heard hundreds of millions of rows Works in in SQL databases fine mhm but I I also know",
    "start": "1109760",
    "end": "1117679"
  },
  {
    "text": "there's some tables where that probably doesn't work because of how much data you're storing or whatever else it is",
    "start": "1117679",
    "end": "1122720"
  },
  {
    "text": "you know there could be something weird there I think it just really depends you know on the specific problem what you're",
    "start": "1122720",
    "end": "1128640"
  },
  {
    "text": "working on but for me it basically just came down to like if I'm actually seeing you know bad performance then I start",
    "start": "1128640",
    "end": "1135480"
  },
  {
    "text": "looking at is there a way to fix this Within postgress or is it going to be a better long-term solution is sometimes",
    "start": "1135480",
    "end": "1141039"
  },
  {
    "text": "also the thing you look at to switch to something else so it's really hard to tell somebody when they should do it",
    "start": "1141039",
    "end": "1146280"
  },
  {
    "text": "because it just really depends it sounds like you've narrowed it down to just performance though right for me that's",
    "start": "1146280",
    "end": "1152039"
  },
  {
    "text": "what it's mostly been but it's kind of hard to say because like if I could put put a little bit of effort into this and",
    "start": "1152039",
    "end": "1158240"
  },
  {
    "text": "and get the postgress to work I you know like that's one option but if I know it's going to continuously cause more",
    "start": "1158240",
    "end": "1163799"
  },
  {
    "text": "issues down the road for us developers to maintain then at some point even if we get the performance there in",
    "start": "1163799",
    "end": "1169200"
  },
  {
    "text": "postgress it might not make sense to stay there if you know it's going to cause a lot bigger developer headache over the lifetime of it you could always",
    "start": "1169200",
    "end": "1175880"
  },
  {
    "text": "just stick a cache in front of it and then it doesn't really matter how fast it is at",
    "start": "1175880",
    "end": "1181400"
  },
  {
    "text": "all you can relax a bit then Matt is your cash also on your database server",
    "start": "1181400",
    "end": "1187679"
  },
  {
    "text": "actually that's a good point because sometimes you want to have data ready in a different format and so sometimes you",
    "start": "1187679",
    "end": "1194679"
  },
  {
    "text": "know these queries might be slow running so you wouldn't do them while a user",
    "start": "1194679",
    "end": "1199960"
  },
  {
    "text": "waiting in the browser for the answer but maybe you do it on a schedule I don't know and save the results each",
    "start": "1199960",
    "end": "1206840"
  },
  {
    "text": "time and then they're easier to read and then I potentially would do that in the same database they're the sorts of",
    "start": "1206840",
    "end": "1213120"
  },
  {
    "text": "things you do to address Performance problems I think we get a little bit obsessed don't we with the performance",
    "start": "1213120",
    "end": "1219840"
  },
  {
    "text": "of individual components and sometimes when you step back and look at the whole system it might end up being",
    "start": "1219840",
    "end": "1226039"
  },
  {
    "text": "insignificant compared to other things we should do an entire episode on caching because that is its own world of",
    "start": "1226039",
    "end": "1234000"
  },
  {
    "text": "uh pain but you know very powerful but kind of uh not something you have to",
    "start": "1234000",
    "end": "1239760"
  },
  {
    "text": "worry about too much unless you get the sort of big scale and I think that's the other thing most projects stay quite",
    "start": "1239760",
    "end": "1245600"
  },
  {
    "text": "small and that's why you don't have to worry too much about performance MH so along those lines so when we do have",
    "start": "1245600",
    "end": "1251679"
  },
  {
    "text": "that show and I'm going to hold you that when we do have that show on or on cashing and I think we do need to have one um I I do want us talk about views",
    "start": "1251679",
    "end": "1259240"
  },
  {
    "text": "specifically materialized views and database technology cuz what I've noticed it shouldn't be no surprise on",
    "start": "1259240",
    "end": "1264360"
  },
  {
    "text": "on folks listen to the show I for Roku and we we probably have the largest Fleet of postr databases right for cloud",
    "start": "1264360",
    "end": "1270440"
  },
  {
    "text": "platform that's our bread and butter and we see all kinds of different patterns and of usage you know for postgress",
    "start": "1270440",
    "end": "1277200"
  },
  {
    "text": "right and my single biggest takeaway right from my experience there has been that folks underestimate how much power",
    "start": "1277200",
    "end": "1284159"
  },
  {
    "text": "postgress has right they're quick to bring in other Technologies right to",
    "start": "1284159",
    "end": "1289640"
  },
  {
    "text": "solve certain kinds of problems right that they don't necessarily need to right so maybe that's being driven by",
    "start": "1289640",
    "end": "1295799"
  },
  {
    "text": "hype oh let me go try cockroach well why right well I want to use no SQL well",
    "start": "1295799",
    "end": "1301279"
  },
  {
    "text": "have you tried to model your domain right have you tried to model your business problem like what kind of data are you dealing with is it graph like is",
    "start": "1301279",
    "end": "1307440"
  },
  {
    "text": "it relational in nature like there's a lot of work that that is missing right some pre-work that is missing before you",
    "start": "1307440",
    "end": "1313720"
  },
  {
    "text": "make that database technology choice and if you don't know enough now right to make the quotequote appropriate",
    "start": "1313720",
    "end": "1320320"
  },
  {
    "text": "choice for your domain start with the relational Model start with postgress you don't have to use you can use my SQL",
    "start": "1320320",
    "end": "1326039"
  },
  {
    "text": "if you want but you know start with the relational model because the tooling that exists for relational databases I mean relational databas have been around",
    "start": "1326039",
    "end": "1331840"
  },
  {
    "text": "for many many many years right a lot of hard problems have already been solved right so the tooling and the domain",
    "start": "1331840",
    "end": "1338120"
  },
  {
    "text": "knowledge the the developer mind share all that stuff is there right the the nosql stuff is still I mean there's wi",
    "start": "1338120",
    "end": "1345279"
  },
  {
    "text": "adoption for it but there's not nearly as much right content on how to solve different kinds of problems performance",
    "start": "1345279",
    "end": "1352039"
  },
  {
    "text": "problems right um operational problems right as it is in the relational world right so you can start out with just",
    "start": "1352039",
    "end": "1358679"
  },
  {
    "text": "start out with POG graphs it's fine right like you know and then just like John's saying you address your your",
    "start": "1358679",
    "end": "1364240"
  },
  {
    "text": "performance or scale problem once you reached right that point where you can sort of U actually pinpoint right you",
    "start": "1364240",
    "end": "1370679"
  },
  {
    "text": "can actually see based on on on metrics based on uh your your utilization",
    "start": "1370679",
    "end": "1376120"
  },
  {
    "text": "hopefully you have monitoring going on you can kind of see see what your performance looks like from from day to day week to week month to month right",
    "start": "1376120",
    "end": "1381360"
  },
  {
    "text": "then you you're making decisions on Based on data right not on a hunch not on the latest hype not on who's you know",
    "start": "1381360",
    "end": "1388279"
  },
  {
    "text": "what big famous you know tech company is you know just publish a BL blog post about using something else instead of",
    "start": "1388279",
    "end": "1393559"
  },
  {
    "text": "postgress or something like that right base your decision on like what your actual needs are and I'm curious to hear",
    "start": "1393559",
    "end": "1399600"
  },
  {
    "text": "what Yan has to say about that because he's been quiet I don't want you to be quiet yeah no I I was sitting here noing",
    "start": "1399600",
    "end": "1405240"
  },
  {
    "text": "along to what you were saying there that start with post because because I think a lot of users come into the space",
    "start": "1405240",
    "end": "1410360"
  },
  {
    "text": "knowing what to use and that was kind of a hope with my talk just giving you an introduction to something you can use",
    "start": "1410360",
    "end": "1416480"
  },
  {
    "text": "some opinionated tips on what libraries to use and so on giving you like a head start just getting started with actually",
    "start": "1416480",
    "end": "1423360"
  },
  {
    "text": "like moving away from the problem of choosing a technology and actually using the technology to solve your problems I",
    "start": "1423360",
    "end": "1429559"
  },
  {
    "text": "really agree with that sentiment that a lot of people will try and and you know Google what should I use to store my",
    "start": "1429559",
    "end": "1435520"
  },
  {
    "text": "data or even like read some popular programmers blog where theyve tested out the latest technology and found it to be",
    "start": "1435520",
    "end": "1441799"
  },
  {
    "text": "really good for their very specialized use case and then apply that to like all of their problems because that's all",
    "start": "1441799",
    "end": "1447080"
  },
  {
    "text": "they know and you know starting with something well tested well established like you say good to developing mind",
    "start": "1447080",
    "end": "1453480"
  },
  {
    "text": "share like post course will will take you very far before you need to",
    "start": "1453480",
    "end": "1458600"
  },
  {
    "text": "[Music]",
    "start": "1459770",
    "end": "1466799"
  },
  {
    "text": "change change log news is the best way to keep",
    "start": "1466799",
    "end": "1471880"
  },
  {
    "text": "up with the Ever Changing world of software we Track blog and contextualize",
    "start": "1471880",
    "end": "1477840"
  },
  {
    "text": "the coolest projects the best practices and the biggest stories each and every week make Chang law.com your daily",
    "start": "1477840",
    "end": "1485360"
  },
  {
    "text": "destination or hit this snooze button and subscribe to our Weekly Newsletter that hits inboxes on Sunday mornings",
    "start": "1485360",
    "end": "1491840"
  },
  {
    "text": "join more than 15,000 enthusiastic readers it'll cost you exactly $0 and",
    "start": "1491840",
    "end": "1497480"
  },
  {
    "text": "you can And subscribe right now at chain.com",
    "start": "1497480",
    "end": "1501919"
  },
  {
    "text": "[Music]",
    "start": "1506630",
    "end": "1514759"
  },
  {
    "text": "weekly I think there's also probably the issue that mongod DB is so easy just to",
    "start": "1515960",
    "end": "1521240"
  },
  {
    "text": "throw data at like Johnny said without even thinking about what your schema is going to be or what data you're going to",
    "start": "1521240",
    "end": "1526320"
  },
  {
    "text": "have that I think when people people are First Learning sometimes it's easier just to have something you can throw",
    "start": "1526320",
    "end": "1531480"
  },
  {
    "text": "stuff at and not care about and I think that just sort of sticks because at some",
    "start": "1531480",
    "end": "1536520"
  },
  {
    "text": "point like if you want to use postgress or really any SQL database you have to learn SQL to some degree and then as you",
    "start": "1536520",
    "end": "1543919"
  },
  {
    "text": "get to more and more complex you know queries and you get more and more data you have to learn it even further and I",
    "start": "1543919",
    "end": "1549039"
  },
  {
    "text": "think some people just don't like that learning curve like they just don't like to have to invest into that but I do",
    "start": "1549039",
    "end": "1555559"
  },
  {
    "text": "think that's often a mistake because is like we've talked about all these different uses for SQL and i' I've seen",
    "start": "1555559",
    "end": "1561640"
  },
  {
    "text": "so many great cases where you get so much by using a SQL database um one",
    "start": "1561640",
    "end": "1567240"
  },
  {
    "text": "example is like for one company I worked for our entire metrics dashboard was just a couple SQL queries that you fed",
    "start": "1567240",
    "end": "1573919"
  },
  {
    "text": "into like the graphing software and it just spit the whole thing out so like we didn't have to do any work and we could",
    "start": "1573919",
    "end": "1579039"
  },
  {
    "text": "get pretty much any metric we wanted graphed and you know anybody who own was on the sales team or wherever could track these things really easily and",
    "start": "1579039",
    "end": "1586240"
  },
  {
    "text": "that was really powerful because it wasn't like massive developer effort to get them these things they needed it was okay just tell me what you need and I'll",
    "start": "1586240",
    "end": "1592559"
  },
  {
    "text": "write the query for it and you're good and I think people get worried that like Johnny said they think that it's going to cap them somewhere and I think that",
    "start": "1592559",
    "end": "1600679"
  },
  {
    "text": "they don't realize that more than likely if it actually caps you you're at a",
    "start": "1600679",
    "end": "1605840"
  },
  {
    "text": "stage where you can invest in experts like database you know people who are specifically this is what they focus on",
    "start": "1605840",
    "end": "1611559"
  },
  {
    "text": "for their entire career and they can help you figure out good Solutions and you're going to need somebody like that at that point but if you're not at that",
    "start": "1611559",
    "end": "1617679"
  },
  {
    "text": "that point you can almost just bring somebody into consult for like one day who could probably come in there and get",
    "start": "1617679",
    "end": "1623039"
  },
  {
    "text": "your database running a 100 times faster than it was just by looking at obvious issues and teaching you how to fix them",
    "start": "1623039",
    "end": "1629440"
  },
  {
    "text": "and like that sounds like a lot but it's really not in comparison to like investing in a technology that might not",
    "start": "1629440",
    "end": "1635159"
  },
  {
    "text": "solve your problems and might lead to way worse issues yeah I think that's great advice it's the same thing like in",
    "start": "1635159",
    "end": "1641760"
  },
  {
    "text": "JavaScript and and go you know go is has that type safety so if it asks for a string you can only give it a string and",
    "start": "1641760",
    "end": "1648919"
  },
  {
    "text": "it's enforced by the compiler a bit like how the table schema kind of enforcing",
    "start": "1648919",
    "end": "1654760"
  },
  {
    "text": "enforcing that schema for the data and any exceptions to that will be an error probably and of course in JavaScript if",
    "start": "1654760",
    "end": "1662200"
  },
  {
    "text": "something's asking for a string you can say no here's a photograph of a cat and",
    "start": "1662200",
    "end": "1667559"
  },
  {
    "text": "that's it JavaScript will say okay cool thanks and just carries on hey that",
    "start": "1667559",
    "end": "1672640"
  },
  {
    "text": "happens yeah it's a good point you don't solve any problems you're just moving them that's the thing so it feels good",
    "start": "1672640",
    "end": "1678679"
  },
  {
    "text": "just throwing stuff in a data store but at some point you have to read it and use it and then if it's not in the same",
    "start": "1678679",
    "end": "1685919"
  },
  {
    "text": "schema you've got even more work to do to figure that mess out you know but one",
    "start": "1685919",
    "end": "1691279"
  },
  {
    "text": "of the approaches that I remember when I used to do relational database work in",
    "start": "1691279",
    "end": "1696440"
  },
  {
    "text": "Ruby days were migrations and I wonder if you can do migrations with postgress",
    "start": "1696440",
    "end": "1702120"
  },
  {
    "text": "migrations are for anyone that doesn't know essentially in order to describe",
    "start": "1702120",
    "end": "1707480"
  },
  {
    "text": "the schema you run SQL commands like you might say create this table and add",
    "start": "1707480",
    "end": "1712640"
  },
  {
    "text": "these columns and this you know add this column that's a string and things like this and of course you can use the same",
    "start": "1712640",
    "end": "1719240"
  },
  {
    "text": "kinds of commands to remove things as well and so migrations are essentially a little script that makes a little change",
    "start": "1719240",
    "end": "1725120"
  },
  {
    "text": "to the database accompanied by another little script to undo that change and",
    "start": "1725120",
    "end": "1730640"
  },
  {
    "text": "that allows you to kind of move forwards and backwards through your database",
    "start": "1730640",
    "end": "1735880"
  },
  {
    "text": "schema quite easy easily do migrations exist in postgress is it just something",
    "start": "1735880",
    "end": "1741519"
  },
  {
    "text": "you would build yourself or are there other tools already that help you do it in postgress obviously as you were",
    "start": "1741519",
    "end": "1748000"
  },
  {
    "text": "saying already uh postgress uses SQL so any migrations that you want to do will have to be done with SQL and I have a",
    "start": "1748000",
    "end": "1757200"
  },
  {
    "text": "library that I quite like to use which is called goang migrate funly enough it's probably the first thing that shows",
    "start": "1757200",
    "end": "1762279"
  },
  {
    "text": "up if you try to Google search for it and basically what that that's good o",
    "start": "1762279",
    "end": "1767760"
  },
  {
    "text": "right there that is that is excellent SEO right there basically it just has this",
    "start": "1767760",
    "end": "1773519"
  },
  {
    "text": "structure of files where you uh order your migrations by a Lex graphically sorted file names so basically",
    "start": "1773519",
    "end": "1781039"
  },
  {
    "text": "001 initial schema. up. SQL is your the first kind of snippet of SQL commands",
    "start": "1781039",
    "end": "1787960"
  },
  {
    "text": "that you want to run and when you first start working with the database which will normally be the thing that creates the tables and sets up any relationships",
    "start": "1787960",
    "end": "1794600"
  },
  {
    "text": "between the tables and then nothing else so the more interesting kind of use case for pressions is later on when you",
    "start": "1794600",
    "end": "1800640"
  },
  {
    "text": "decide that hey we actually need to add some more information to this table here but we already have a lot of customers",
    "start": "1800640",
    "end": "1806519"
  },
  {
    "text": "in the table like we would' have to man go through and like add the email to all of them or whatever so migration script",
    "start": "1806519",
    "end": "1813799"
  },
  {
    "text": "looks at the existing data you you write some SQL to do this of course you write some SQL to look at the existing data",
    "start": "1813799",
    "end": "1820519"
  },
  {
    "text": "and then adapt the existing data for the new table details whatever that you've added with your changes so that's really",
    "start": "1820519",
    "end": "1827799"
  },
  {
    "text": "the the key reason why you need migrations really so if you're like a",
    "start": "1827799",
    "end": "1833000"
  },
  {
    "text": "novice user and you find yourself never making any changes to the database you could probably get away with not using",
    "start": "1833000",
    "end": "1838720"
  },
  {
    "text": "migrations but I quite like doing it from the start because it means you can very easily pick it up again when you",
    "start": "1838720",
    "end": "1844840"
  },
  {
    "text": "actually need to make those changes and I often find that you do need to make those changes eventually uh and it's",
    "start": "1844840",
    "end": "1850039"
  },
  {
    "text": "also a really nice separation between uh querying which is something that you can there's few different libraries and go",
    "start": "1850039",
    "end": "1856519"
  },
  {
    "text": "for querying that data that don't actually do anything about creating data or creating tables and the migration",
    "start": "1856519",
    "end": "1862960"
  },
  {
    "text": "script which is responsible for setting up and also tearing down the schema itself so it's it's kind of a nice",
    "start": "1862960",
    "end": "1870000"
  },
  {
    "text": "separation between the two yeah and so when you instantiate a new database it essentially just runs through those",
    "start": "1870000",
    "end": "1876200"
  },
  {
    "text": "migrations in order right applying them one by one and you know that you'll end up in the same state as your latest yeah",
    "start": "1876200",
    "end": "1882440"
  },
  {
    "text": "release so you have to be a little bit careful because uh often when you have a database you want it to used by several",
    "start": "1882440",
    "end": "1887880"
  },
  {
    "text": "different clients and if you do something like an upgrade of the system where you shut down one server and you",
    "start": "1887880",
    "end": "1894080"
  },
  {
    "text": "start up a new server that has like a new feature so you have both an old server and the new server speaking to the database at the same time you'll",
    "start": "1894080",
    "end": "1900440"
  },
  {
    "text": "need to make sure that the migrations are being applied in a backwards compatible fashion so that both of those clients can continue to operate at the",
    "start": "1900440",
    "end": "1907399"
  },
  {
    "text": "same time but if you have a single server and a single database then it's very easy because you can just apply all",
    "start": "1907399",
    "end": "1913600"
  },
  {
    "text": "the migrations when you start up because you know no one else is talking to the database that's really the simplest case",
    "start": "1913600",
    "end": "1919080"
  },
  {
    "text": "yeah it's nice also because you used to be able to try things out and undo them essentially I mean often it's difficult",
    "start": "1919080",
    "end": "1926080"
  },
  {
    "text": "to do sometimes you might be making destructive changes like if one of your migrations deletes a column then you're",
    "start": "1926080",
    "end": "1932480"
  },
  {
    "text": "going to lose data you can't in the down script you can't put that data back but",
    "start": "1932480",
    "end": "1938000"
  },
  {
    "text": "assuming you've kind of thought about it properly yeah you could be a bit more experimental with different data schemas",
    "start": "1938000",
    "end": "1943840"
  },
  {
    "text": "and then you either just don't commit the migrations or you can roll back to a previous version delete the future ones",
    "start": "1943840",
    "end": "1950120"
  },
  {
    "text": "and try something else yeah it is really cool as a tech well you mentioned uh the",
    "start": "1950120",
    "end": "1956279"
  },
  {
    "text": "clients in go I'm interested from a go perspective how do you actually use",
    "start": "1956279",
    "end": "1963440"
  },
  {
    "text": "postgress and I'm even thinking like in the context of say a website that is",
    "start": "1963440",
    "end": "1968639"
  },
  {
    "text": "hosting a Blog at what point would you make a connection to postgress do you",
    "start": "1968639",
    "end": "1974120"
  },
  {
    "text": "tend to make one connection per instance of your code running and then create",
    "start": "1974120",
    "end": "1980799"
  },
  {
    "text": "sessions off that or does each Handler would each Handler make its own connection how does it actually work you",
    "start": "1980799",
    "end": "1987799"
  },
  {
    "text": "know from a go developer point of view yeah so if we take a step back and look at the uh standard Library database SQL",
    "start": "1987799",
    "end": "1995320"
  },
  {
    "text": "package that actually has a connection pool built in so if you come from another language like python or Ruby you",
    "start": "1995320",
    "end": "2001679"
  },
  {
    "text": "might be familiar with uh putting something I think there's a post bouncer or something like that which do",
    "start": "2001679",
    "end": "2007000"
  },
  {
    "text": "connection pooling between your database and your client in go you don't need to",
    "start": "2007000",
    "end": "2012080"
  },
  {
    "text": "do that sort of thing because it's already built into the standard Library so what you would normally do when you connect to the database is just create a",
    "start": "2012080",
    "end": "2017960"
  },
  {
    "text": "single SQL DB handle and then that's safe for concurrent use so you can use",
    "start": "2017960",
    "end": "2023760"
  },
  {
    "text": "that in all of your handlers even though they're being called from different gues from different clients and you can also",
    "start": "2023760",
    "end": "2029039"
  },
  {
    "text": "configure things such as Max connections on the uh SQL connection uh but normally",
    "start": "2029039",
    "end": "2035960"
  },
  {
    "text": "that's all handled by the ghost standard librar you don't really have to worry about it which is really nice H so you",
    "start": "2035960",
    "end": "2041639"
  },
  {
    "text": "do use the go standard library then or do you use others third party libraries",
    "start": "2041639",
    "end": "2047519"
  },
  {
    "text": "this is not very common actually but my PR driver of choice jaxi PGX PGX uh it",
    "start": "2047519",
    "end": "2054320"
  },
  {
    "text": "actually has its own little uh interface as well for interacting with postc crust which is a little bit faster because it",
    "start": "2054320",
    "end": "2060320"
  },
  {
    "text": "doesn't have to go through that uh compatibility layer so it can uh structure things a little bit",
    "start": "2060320",
    "end": "2065560"
  },
  {
    "text": "differently it has a inary encoding that it uses when it talks to post whereas the database SQL uses a slightly",
    "start": "2065560",
    "end": "2072800"
  },
  {
    "text": "different encoding as far as I understand however I still try to use the standard Library just because it's",
    "start": "2072800",
    "end": "2077960"
  },
  {
    "text": "compatible with all of the other the rest of the go ecosystem really for example if you have a a query Builder or",
    "start": "2077960",
    "end": "2084118"
  },
  {
    "text": "some sort of generator to make calls to the database on the SQL DB handle that's",
    "start": "2084119",
    "end": "2091800"
  },
  {
    "text": "what they expect and if you're using PGX then you have the choice of of choosing",
    "start": "2091800",
    "end": "2097040"
  },
  {
    "text": "between the two uh so for example I would use the SQL DB interface as much as possible because most of the time",
    "start": "2097040",
    "end": "2103720"
  },
  {
    "text": "that performance is going to be absolutely fine for you but if you do have a specific use case where you find",
    "start": "2103720",
    "end": "2109800"
  },
  {
    "text": "that actually we're being bottlenecked by the standard Library here you can switch to the more efficient binary",
    "start": "2109800",
    "end": "2116560"
  },
  {
    "text": "interface I would only really consider it if you have to insert thousands of rows or something like that and you want",
    "start": "2116560",
    "end": "2122000"
  },
  {
    "text": "to do it very quickly then that's something that you can do with the jaxi PGX can switch to the binary encoding",
    "start": "2122000",
    "end": "2128640"
  },
  {
    "text": "interface and do that within a a single connection and then switch back to the standard Library one for normal",
    "start": "2128640",
    "end": "2134920"
  },
  {
    "text": "interface handling so one of our listeners had actually asked how hard is a switch from libpq to to Jax C PGX",
    "start": "2134920",
    "end": "2142119"
  },
  {
    "text": "because I think historically libpq was like recommended as a as a library but I think that one uses SEO doesn't it I",
    "start": "2142119",
    "end": "2149560"
  },
  {
    "text": "don't think so I think it's pure as well but I used to use lipq as well when back when I started using go it hasn't really",
    "start": "2149560",
    "end": "2156040"
  },
  {
    "text": "kept up with the the advances that Jack C PGX has I think jaxi was later to the",
    "start": "2156040",
    "end": "2162319"
  },
  {
    "text": "stage but it's really picked up because it has this really rich type package which implements a lot of the postcourse",
    "start": "2162319",
    "end": "2168160"
  },
  {
    "text": "types so you can inter you can work in a go type safe way with the post types",
    "start": "2168160",
    "end": "2173960"
  },
  {
    "text": "like money and date and things like that postc has really a lot of interesting",
    "start": "2173960",
    "end": "2179040"
  },
  {
    "text": "types that you can take advantage of with Jacki and then it also has this",
    "start": "2179040",
    "end": "2184520"
  },
  {
    "text": "second interface which is a optimized for Speed it has a really cool way of",
    "start": "2184520",
    "end": "2189720"
  },
  {
    "text": "copying from an interface so you can give it an interface and then it will kind of call a function on that until it's done it's like you give it an inter",
    "start": "2189720",
    "end": "2196119"
  },
  {
    "text": "iterator so I think Jack cpxx has innovated a lot in the space in the last three or four years which is why it's",
    "start": "2196119",
    "end": "2202319"
  },
  {
    "text": "kind of taking over the crown from Li PQ so I have to conf first I like using the",
    "start": "2202319",
    "end": "2208119"
  },
  {
    "text": "standard library and some of the things that bother folks like having to you know map fields to different different",
    "start": "2208119",
    "end": "2215079"
  },
  {
    "text": "fields from the database over to your to your go typs and like I don't find these things um annoying as much uh but when I",
    "start": "2215079",
    "end": "2222000"
  },
  {
    "text": "do right I do like to use um SQL X which is uh probably one of the early um sort",
    "start": "2222000",
    "end": "2228160"
  },
  {
    "text": "of nice little abstraction nice little wrapper around the uh standard Library database SQL package that sort of made",
    "start": "2228160",
    "end": "2234359"
  },
  {
    "text": "it easy to sort of um ingest say all your Fields into a type all at once right as opposed to doing the sort of",
    "start": "2234359",
    "end": "2240000"
  },
  {
    "text": "the the scanning and you know for for different things so it was for the vast majority of the projects where I'm",
    "start": "2240000",
    "end": "2245880"
  },
  {
    "text": "actually using where I need a relational data store that I do rely on a combination of you",
    "start": "2245880",
    "end": "2252119"
  },
  {
    "text": "know the standard library and just a SQL X rapper I have no doubt that you know libpq which is in I think probably still",
    "start": "2252119",
    "end": "2260680"
  },
  {
    "text": "is by far the most widely used postgress um library with an ecosystem but you",
    "start": "2260680",
    "end": "2266560"
  },
  {
    "text": "know I have no doubt that it works quite well and I've used it as well the new kid in the block I'm not sure if it's",
    "start": "2266560",
    "end": "2271760"
  },
  {
    "text": "new at this point like 3 or four years old but I haven't tried it done myself but uh from what I've read from the document ation has some very nice um",
    "start": "2271760",
    "end": "2278680"
  },
  {
    "text": "sort of efficiency and performance gains that it has added doesn't use a sort of the standard database SQL sort of",
    "start": "2278680",
    "end": "2284200"
  },
  {
    "text": "approach I guess I don't want to be a wet blanket right that basically always comes as well don't jump to the new",
    "start": "2284200",
    "end": "2290160"
  },
  {
    "text": "fangle thing right away kind of thing so understand sort of your needs first kind of thing if you're going to pick a you",
    "start": "2290160",
    "end": "2296240"
  },
  {
    "text": "know a driver you know that's fine I'm not saying you know use all the different drivers and have different",
    "start": "2296240",
    "end": "2301599"
  },
  {
    "text": "drivers do different things in your application but again perhaps that's the right approach right perhaps you know",
    "start": "2301599",
    "end": "2307560"
  },
  {
    "text": "just using a standard library in SQL X for the vast majority of your application is good enough and then the",
    "start": "2307560",
    "end": "2313079"
  },
  {
    "text": "area where you actually need performance maybe you're doing you know heavy batch processing maybe you need to you know do",
    "start": "2313079",
    "end": "2318599"
  },
  {
    "text": "lots and lots of inserts and you don't want the index get in your way for your reads you know maybe you you do use you",
    "start": "2318599",
    "end": "2323920"
  },
  {
    "text": "know something specialized like that right so to me all of this comes back to Prett much optimization right if you",
    "start": "2323920",
    "end": "2329920"
  },
  {
    "text": "pick something just because you hear it's fast right and you're making that decision well I'm going to go with that one right not knowing why you're going",
    "start": "2329920",
    "end": "2337119"
  },
  {
    "text": "with a particular library then that's where I'm usually okay let's slow down a little bit let's understand why using a",
    "start": "2337119",
    "end": "2342839"
  },
  {
    "text": "standard library or like a thin rapper right around the standard library is not good enough for your use case I have no",
    "start": "2342839",
    "end": "2348960"
  },
  {
    "text": "problem with using the latest and greatest you know if you can justify why you know you want to use that at this",
    "start": "2348960",
    "end": "2354880"
  },
  {
    "text": "point in my career I'm kind of boring I don't like the exciting stuff especially as an SRE I don't want",
    "start": "2354880",
    "end": "2359960"
  },
  {
    "text": "exciting with the things that I'm responsible for is really beyond the standard Library like what else do you",
    "start": "2359960",
    "end": "2365520"
  },
  {
    "text": "need right and can you get away with you know using a standard library or something very thin wrapper around that",
    "start": "2365520",
    "end": "2370960"
  },
  {
    "text": "a question for you Johnny you like using the standard library for it but I feel like in my experience postgress is the",
    "start": "2370960",
    "end": "2377480"
  },
  {
    "text": "one that interacts like the most poorly with the standard library and more specifically I'm referring to like last",
    "start": "2377480",
    "end": "2384200"
  },
  {
    "text": "insert ID doesn't work and then like I think I don't",
    "start": "2384200",
    "end": "2389680"
  },
  {
    "text": "remember which ones use which but like the characters you use for like variables you're putting in dollars yeah",
    "start": "2389680",
    "end": "2395520"
  },
  {
    "text": "I know post uses what the dollar sign and then the numbers and I think all the others use question marks so like one of",
    "start": "2395520",
    "end": "2402319"
  },
  {
    "text": "the benefits in my mind of using the standard library is you know I can run my test with SQL light and have it in",
    "start": "2402319",
    "end": "2408079"
  },
  {
    "text": "memory and that's real nice because I can just throw the whole thing out afterwards but that's really hard to actually achieve with a standard Library",
    "start": "2408079",
    "end": "2414560"
  },
  {
    "text": "unless you put in a like extra work that I generally don't want to put in because I'm like you know it's just not fun to",
    "start": "2414560",
    "end": "2420160"
  },
  {
    "text": "do so like I guess what are the benefits you see from the standard library from that perspective and like for for",
    "start": "2420160",
    "end": "2426480"
  },
  {
    "text": "somebody who is just getting started with it do you have any like advice for that you know those gotches let me throw",
    "start": "2426480",
    "end": "2432640"
  },
  {
    "text": "that back at you right when was the last time you switch databases when was the last time you said you know what I'm",
    "start": "2432640",
    "end": "2437680"
  },
  {
    "text": "going to start with progress but I might end up with my SQL so I've never switched them like in that you know in",
    "start": "2437680",
    "end": "2443119"
  },
  {
    "text": "that sense the only reason that it matters to me is that I like running sqlite for a lot of tests because that",
    "start": "2443119",
    "end": "2448839"
  },
  {
    "text": "means that actually setting things up is a lot simpler it's not oh you need to install postgress and you need to make",
    "start": "2448839",
    "end": "2454480"
  },
  {
    "text": "sure your database is up and running and you need to you know do all this stuff it's literally just okay I'm just going to throw this thing in memory and start",
    "start": "2454480",
    "end": "2460480"
  },
  {
    "text": "you know I can run all the migrations from that point and have the test go so it's it's more of a Simplicity type thing there but I often find that it's",
    "start": "2460480",
    "end": "2467520"
  },
  {
    "text": "hard to actually make work because you know all the differences that exist well I would say that while I see",
    "start": "2467520",
    "end": "2476560"
  },
  {
    "text": "your point if I knew that uh um I needed to do some integration testing I need",
    "start": "2476560",
    "end": "2482560"
  },
  {
    "text": "actually hit if I don't have enough abstractions around my testing right that I actually need to use a data store",
    "start": "2482560",
    "end": "2488200"
  },
  {
    "text": "and communicate over the wire to data store I'll would just you're on a a Docker version of postgress heck I have",
    "start": "2488200",
    "end": "2494079"
  },
  {
    "text": "postgress installed locally on my machine right no no abstraction layer needed right so I think it's just a",
    "start": "2494079",
    "end": "2499760"
  },
  {
    "text": "choice right um and I think Yan's going to have some flavor to add to that U but personally like I wouldn't want to use",
    "start": "2499760",
    "end": "2505760"
  },
  {
    "text": "two different databases for my testing however similar they might be right and",
    "start": "2505760",
    "end": "2512119"
  },
  {
    "text": "and I know you have slightly different view on that but yeah I'm interested in seeing what yon is say about that too",
    "start": "2512119",
    "end": "2517680"
  },
  {
    "text": "yeah so great that you brought up testing because that's one of the things I want to talk about today and I agree with Johnny that if you have to make",
    "start": "2517680",
    "end": "2524720"
  },
  {
    "text": "your test so that you have to use one flavor of SQL to test and another flavor to run then well to start with your",
    "start": "2524720",
    "end": "2531480"
  },
  {
    "text": "tests might not be giving you the confidence you want but also there is a better solution today which is that you can use automated Docker testing to uh",
    "start": "2531480",
    "end": "2539599"
  },
  {
    "text": "create a Docker container during the lifetime of your test and talk to that",
    "start": "2539599",
    "end": "2544720"
  },
  {
    "text": "as if it's a a real posters it's a real posters container so you can talk to it like a real posters server and then it",
    "start": "2544720",
    "end": "2550200"
  },
  {
    "text": "just shut it down after the test finishes this was something I I demoed during my talk and I think maybe like",
    "start": "2550200",
    "end": "2556079"
  },
  {
    "text": "the most revelatory thing that I'm really brought on to the whole talk because people afterwards were like whoa",
    "start": "2556079",
    "end": "2561200"
  },
  {
    "text": "this is so cool and yeah I agree it is so cool it like completely revolutionizes the way that you do database testing you don't really have",
    "start": "2561200",
    "end": "2568280"
  },
  {
    "text": "to like have a Docker post script or whatever where you spin up a database then you run your integration tests with",
    "start": "2568280",
    "end": "2574319"
  },
  {
    "text": "like a build tag on them or something like that because you don't want to run them if you run go test because someone needs to have a database running and you",
    "start": "2574319",
    "end": "2581160"
  },
  {
    "text": "also don't need to annotate your CI testing with uh like extra containers",
    "start": "2581160",
    "end": "2586440"
  },
  {
    "text": "whatever everything just works you just spin up a database this is during the runtime of your test it uses a Docker",
    "start": "2586440",
    "end": "2592599"
  },
  {
    "text": "socket API to just spin up a database take the IP and Port of that database",
    "start": "2592599",
    "end": "2598240"
  },
  {
    "text": "talk to it during the test and then shut it down immediately afterwards and it runs in like 3 seconds total it's",
    "start": "2598240",
    "end": "2605000"
  },
  {
    "text": "mind-blowing when you see it for the first time and I highly recommend you try and check it out I'll have to check",
    "start": "2605000",
    "end": "2610280"
  },
  {
    "text": "it out cuz I know one of the reasons I like sqlite stuff is that if I'm running a bunch of tests concurrently I can have",
    "start": "2610280",
    "end": "2616599"
  },
  {
    "text": "a bunch of them loading up in separate instances of memory and and and do stuff like that but I do fully agree that you",
    "start": "2616599",
    "end": "2622119"
  },
  {
    "text": "still need to test against postgress which is why generally speaking i' I'd more consider that my like something I'd",
    "start": "2622119",
    "end": "2628359"
  },
  {
    "text": "run in my CI tool so like you know it happens there before it actually goes anywhere but but like I don't have to do",
    "start": "2628359",
    "end": "2634480"
  },
  {
    "text": "it locally as much and it depends from company to company I think some of this stems from you know coming from a rails",
    "start": "2634480",
    "end": "2640520"
  },
  {
    "text": "background I think it was pretty common in rails to run one flavor of database locally and another one you know",
    "start": "2640520",
    "end": "2646240"
  },
  {
    "text": "depending there were definitely times where that would bit you but you know it handled a lot of stuff for you sometimes",
    "start": "2646240",
    "end": "2651400"
  },
  {
    "text": "so you could do it so actually another thing that's kind of related to this is one of my hopes for generics in go is",
    "start": "2651400",
    "end": "2658319"
  },
  {
    "text": "that the database interface in the standard library is going to get a bit of an overhaul because I think it's",
    "start": "2658319",
    "end": "2663520"
  },
  {
    "text": "probably one of the weakest typed interfaces in the entire standard library right because you have to you",
    "start": "2663520",
    "end": "2668839"
  },
  {
    "text": "know a query and then you have to give it like a a slice of a varic slice of interface which is as bad as it gets",
    "start": "2668839",
    "end": "2675240"
  },
  {
    "text": "right I can't wait to see what we can come up with to make that easier to use",
    "start": "2675240",
    "end": "2680400"
  },
  {
    "text": "and I think that would also help maybe in this case where we have different sort of placeholders I guess the dream",
    "start": "2680400",
    "end": "2685480"
  },
  {
    "text": "of the database SQL standard Library package is that you should be able to",
    "start": "2685480",
    "end": "2690520"
  },
  {
    "text": "use it with any SQL database right you should just be able to maybe even like at initialization time say I want",
    "start": "2690520",
    "end": "2697640"
  },
  {
    "text": "placeholders to be marks and then everything else should just work right as long as you're using you know the SQL",
    "start": "2697640",
    "end": "2703720"
  },
  {
    "text": "standard and that's the dream and I think practically that's probably doesn't work at all I think if you were",
    "start": "2703720",
    "end": "2709720"
  },
  {
    "text": "trying to write a package that is supposed to be agnostic between different flavors of SQL and different",
    "start": "2709720",
    "end": "2715880"
  },
  {
    "text": "databases you're going to end up making a lot of compromises that will compromise your type safety compromise",
    "start": "2715880",
    "end": "2721680"
  },
  {
    "text": "performance and it's not really there but I hope that generics could help in [Laughter]",
    "start": "2721680",
    "end": "2730369"
  },
  {
    "text": "area we deserve a better internet and the brave team has the recipe for bringing it to us start with Google",
    "start": "2737040",
    "end": "2743640"
  },
  {
    "text": "Chrome keep the extension the dev tools and the rendering engine that make Chrome great rip out the Google bits we",
    "start": "2743640",
    "end": "2749240"
  },
  {
    "text": "don't need them mix in ad and tracker blocking by default quick access to the tour Network for True private browsing",
    "start": "2749240",
    "end": "2755960"
  },
  {
    "text": "and an opt-in reward system so you can get paid to view privacy respecting ads then turn around and use those rewards",
    "start": "2755960",
    "end": "2762119"
  },
  {
    "text": "to support your favorite web creators like us Download Brave today using the link in the show notes and give tipping",
    "start": "2762119",
    "end": "2767599"
  },
  {
    "text": "a try on change.com [Music]",
    "start": "2767599",
    "end": "2775449"
  },
  {
    "text": "[Music] yeah I've definitely found like when",
    "start": "2777640",
    "end": "2783240"
  },
  {
    "text": "you're talking about the performance stuff Johnny you mentioned actually just you using the standard library and",
    "start": "2783240",
    "end": "2788920"
  },
  {
    "text": "writing your queries and actually inserting it into whatever field you need to I've used orm and I've find them",
    "start": "2788920",
    "end": "2794319"
  },
  {
    "text": "useful in certain scenarios especially when people don't know SQL that well you know as a way to sort of get them a",
    "start": "2794319",
    "end": "2800160"
  },
  {
    "text": "taste for it but I've also found that when you're even if you're using SQL X which is really not that much you tend",
    "start": "2800160",
    "end": "2806720"
  },
  {
    "text": "to write queries that allow you to use their tools to pull the data and you like to basically take all the data that",
    "start": "2806720",
    "end": "2812480"
  },
  {
    "text": "you're pulling and putting into a g struct rather than writing like the cor query that might require you to do more",
    "start": "2812480",
    "end": "2818480"
  },
  {
    "text": "work but you're like I don't want to do that so I'll run two queries instead or something and like I've noticed that just weird queries like that tend to",
    "start": "2818480",
    "end": "2824480"
  },
  {
    "text": "happen where you almost write bad code because you're trying to leverage a tool a little bit more than just putting in",
    "start": "2824480",
    "end": "2830119"
  },
  {
    "text": "the work to get it done the right way the first time that's in my world at least in in",
    "start": "2830119",
    "end": "2835760"
  },
  {
    "text": "my in my mind orm is a dirty word I don't know I'm generalizing here",
    "start": "2835760",
    "end": "2842880"
  },
  {
    "text": "obviously um it has its uses but I've been part of so many teams where we rely",
    "start": "2842880",
    "end": "2849000"
  },
  {
    "text": "so heavily on Norms and they are great for the 80% right use case and then",
    "start": "2849000",
    "end": "2855240"
  },
  {
    "text": "there's that extra 20 where you have sort of trying to twist the urm so much",
    "start": "2855240",
    "end": "2860359"
  },
  {
    "text": "and it's not the fault of the urm right it's more like a basically we're abusing it or maybe we're using um we're nesting",
    "start": "2860359",
    "end": "2866800"
  },
  {
    "text": "some things or maybe we're using it in the way it wasn't intended or it's too easy to to make certain common mistakes",
    "start": "2866800",
    "end": "2872040"
  },
  {
    "text": "we end up creating way too much sort of a a thrashing right uh with with the database and you're doing n plus1 type",
    "start": "2872040",
    "end": "2879400"
  },
  {
    "text": "queries and and it becomes kind of like a performance issue and then you know often you don't find out about these",
    "start": "2879400",
    "end": "2885040"
  },
  {
    "text": "kinds of problems during testing um you know you go find out about them in production because locally typically you",
    "start": "2885040",
    "end": "2890760"
  },
  {
    "text": "have a smaller size data set you're not querying as much data or maybe you know",
    "start": "2890760",
    "end": "2895960"
  },
  {
    "text": "things are tend to be hyper sort of optimized from a performance perspective when you're testing locally because",
    "start": "2895960",
    "end": "2901079"
  },
  {
    "text": "because you don't want sort of a you know data or your quering to impact your speed of your test and things like that",
    "start": "2901079",
    "end": "2907119"
  },
  {
    "text": "so you want that quick feedback but out in you know staging or in production where the data volume is much higher",
    "start": "2907119",
    "end": "2913880"
  },
  {
    "text": "right you go find out about these kinds of things right in that environment that's that's never a good look right",
    "start": "2913880",
    "end": "2919520"
  },
  {
    "text": "and and I always somehow the armm end up being sort of the culprit when I when I start to dive deep into okay well let's",
    "start": "2919520",
    "end": "2926200"
  },
  {
    "text": "let's troubleshoot this problem let's figure out what's causing this problem and it's because the RM was allowed sort",
    "start": "2926200",
    "end": "2933319"
  },
  {
    "text": "of the the developer to make that those kinds of mistakes AK so basically when I talk about sort of using a standard",
    "start": "2933319",
    "end": "2938880"
  },
  {
    "text": "database SQL package it's not because I believe it's it's Superior to all other approaches is because my uh pendulum has",
    "start": "2938880",
    "end": "2945799"
  },
  {
    "text": "swung from really liking the abstractions of of the RM to basically seeing being bitten by it so many times",
    "start": "2945799",
    "end": "2952559"
  },
  {
    "text": "you basically say you know I want to write the actual SQL queries I'm so I want to know everything I'm going to be writing in there what the interaction is",
    "start": "2952559",
    "end": "2958799"
  },
  {
    "text": "going to be to with the database and I can do an explain plan on it and I can see exactly what the cost is going to be",
    "start": "2958799",
    "end": "2964000"
  },
  {
    "text": "in the database server I actually see it right the same sort of values we hold dear in the go Community where that",
    "start": "2964000",
    "end": "2969400"
  },
  {
    "text": "explicitness right you might be a little verbos fine right I'm willing to pay that sort of that that cognitive cost in",
    "start": "2969400",
    "end": "2975440"
  },
  {
    "text": "order to get that Clarity I know exactly what what the quer is going to look like on the other side so yes orms are great",
    "start": "2975440",
    "end": "2982240"
  },
  {
    "text": "you know and I think they're great for prototyping but uh it's for certain parts of your codebase where you really",
    "start": "2982240",
    "end": "2988319"
  },
  {
    "text": "need to sort of uh keep an eye on performance maybe you have a really complex query lots of things you're joining and you if you can't prove",
    "start": "2988319",
    "end": "2996160"
  },
  {
    "text": "exactly what how that's going to perform in production maybe you write the sequel yourself right for anyone that doesn't know what",
    "start": "2996160",
    "end": "3003079"
  },
  {
    "text": "your actually talking about OMS can we just illuminate that a little bit what does it literally stand for it's like",
    "start": "3003079",
    "end": "3009559"
  },
  {
    "text": "object relationship relational mapping or model yeah object relational model or something I don't know mapping I don't",
    "start": "3009559",
    "end": "3015160"
  },
  {
    "text": "know okay yeah something like that so but what is it so there's a couple different ways you can think about",
    "start": "3015160",
    "end": "3020640"
  },
  {
    "text": "interacting with your database so OMS are you essentially write code and whatever programming language you're in",
    "start": "3020640",
    "end": "3026520"
  },
  {
    "text": "so let's go for us and your database generally speaking gets mapped to",
    "start": "3026520",
    "end": "3032240"
  },
  {
    "text": "whatever that code is and then you write queries in go code and that go code gets mapped to some sort of query in the",
    "start": "3032240",
    "end": "3037559"
  },
  {
    "text": "database I think at a high level that's kind of the easiest way to put it right so you don't really have to learn SQL",
    "start": "3037559",
    "end": "3044240"
  },
  {
    "text": "you just write go code using this library and it handles all of that for you now the next step that you'll",
    "start": "3044240",
    "end": "3050520"
  },
  {
    "text": "occasionally see is generators which um I think SQL boiler is one that's popular",
    "start": "3050520",
    "end": "3056200"
  },
  {
    "text": "in go uh basically they'll look at your database and they'll try to generate go code from the database so they look very",
    "start": "3056200",
    "end": "3062599"
  },
  {
    "text": "similar to omm but they still use the database as sort of the source of Truth and they don't try to translate the",
    "start": "3062599",
    "end": "3067680"
  },
  {
    "text": "other way and then there's the you know the kind of pure use SQL and like",
    "start": "3067680",
    "end": "3072920"
  },
  {
    "text": "translate back and forth yourself approach which is you have a lot more control that way so you can fine-tune",
    "start": "3072920",
    "end": "3079280"
  },
  {
    "text": "everything um and I should say Johnny when you're talking about performance and stuff I generally View rm's as a",
    "start": "3079280",
    "end": "3086160"
  },
  {
    "text": "stop Gap like you can use them but you should have the mindset of you might have to replace them at some point and",
    "start": "3086160",
    "end": "3091920"
  },
  {
    "text": "you should be aware of that potentially being a risk actually Matt you may be able to shed some light on this because",
    "start": "3091920",
    "end": "3098319"
  },
  {
    "text": "there are ways right you to to actually write your data access layer right and",
    "start": "3098319",
    "end": "3103799"
  },
  {
    "text": "go otherwise but we're spe specifically talking about go here that would allow you to do what John's talking about",
    "start": "3103799",
    "end": "3109319"
  },
  {
    "text": "right to be able to sort of swap out right that data access layer right um with you know maybe another data access",
    "start": "3109319",
    "end": "3115319"
  },
  {
    "text": "access layer that doesn't use an RM but uses raw SQL instead right like what is the approach what is the recommended",
    "start": "3115319",
    "end": "3120799"
  },
  {
    "text": "approach here what is the best practice at least within the go Community for writing right for not spreading sprinkling your SQL all over your code",
    "start": "3120799",
    "end": "3128240"
  },
  {
    "text": "base that's a good question that's probably my biggest issue with lrms is",
    "start": "3128240",
    "end": "3135200"
  },
  {
    "text": "anybody who's come from rails has seen a view that has a SQL query in it and",
    "start": "3135200",
    "end": "3141240"
  },
  {
    "text": "somebody doesn't realize it's a SQL query because they're just writing Ruby code but you see that and you're like",
    "start": "3141240",
    "end": "3147200"
  },
  {
    "text": "why are you running queries inside of a view like that makes no sense and I think that that's one of the biggest",
    "start": "3147200",
    "end": "3152680"
  },
  {
    "text": "issues you run into with RM is that you get what should be database access layer code scattered throughout the rest of",
    "start": "3152680",
    "end": "3159000"
  },
  {
    "text": "your application so I don't know what your approach is Matt but mine is generally to sort of Define the few queries I need",
    "start": "3159000",
    "end": "3167359"
  },
  {
    "text": "or however many there are and to basically make little services that are like okay if I need to let's say for",
    "start": "3167359",
    "end": "3173319"
  },
  {
    "text": "users like authenticating creating accounts that sort of stuff I'll sort of Define a little struct that has all the",
    "start": "3173319",
    "end": "3179240"
  },
  {
    "text": "methods for that and then the rest of my code just expects an interface that has those methods and I pass in depending on",
    "start": "3179240",
    "end": "3185760"
  },
  {
    "text": "the application what I pass in will kind of change but I'll often try to pass in something that's unspecific to the",
    "start": "3185760",
    "end": "3191240"
  },
  {
    "text": "databases I can make it now there are exceptions like IDs and databases often",
    "start": "3191240",
    "end": "3196359"
  },
  {
    "text": "tend to be integers of some sort so like that ends up you know getting into your code in some sense but but there are",
    "start": "3196359",
    "end": "3203200"
  },
  {
    "text": "other things you can or maybe not integers Maybe you're using like uu IDs or something but still you get some of that in there but but you can still pull",
    "start": "3203200",
    "end": "3210160"
  },
  {
    "text": "a lot of it out don't use Auto increment second side note just use your IDs",
    "start": "3210160",
    "end": "3215200"
  },
  {
    "text": "Johnny trust me let me use Auto incit I don't so Johan do you use an omm",
    "start": "3215200",
    "end": "3220720"
  },
  {
    "text": "actually I have never had the pleasure of using an RM so what am I doing on this show talking about databases I I",
    "start": "3220720",
    "end": "3227359"
  },
  {
    "text": "would very early on in my career I was kind of persuaded against using an RM because naturally as a beginner",
    "start": "3227359",
    "end": "3232480"
  },
  {
    "text": "programmer I was like o this looks cool but I never really had to use it because I was told by someone who knew better",
    "start": "3232480",
    "end": "3238079"
  },
  {
    "text": "than me that that was a bad idea so here I am saying to other beginners like",
    "start": "3238079",
    "end": "3243839"
  },
  {
    "text": "myself once was that you should try not to use the orm even though it looks really appealing at first you should",
    "start": "3243839",
    "end": "3251040"
  },
  {
    "text": "probably just learn to use SQL and it's really not that bad and you'll learn to love it I think like I do I would agree",
    "start": "3251040",
    "end": "3258960"
  },
  {
    "text": "with that having come from the other side cuz everything specific to rails that I learned is useless to me now",
    "start": "3258960",
    "end": "3265640"
  },
  {
    "text": "and everything I learned about SQL along the way when I couldn't get that to work is much more useful to me and it'll",
    "start": "3265640",
    "end": "3270920"
  },
  {
    "text": "carry over to any language that's right well that that would have been an unpopular opinion section but everyone",
    "start": "3270920",
    "end": "3278720"
  },
  {
    "text": "agrees it's not that unpopular I guess it's not happened before where we all agree all right so I have a question for",
    "start": "3278720",
    "end": "3285559"
  },
  {
    "text": "the rest of you Johnny earlier you had mentioned that I forget what you you were saying",
    "start": "3285559",
    "end": "3291000"
  },
  {
    "text": "that when you go to production you sometimes don't notice performance issues and that sort of thing mhm so and earlier we talked about migrations and",
    "start": "3291000",
    "end": "3296960"
  },
  {
    "text": "that sort of stuff so my question is how do you guys handle testing for things like migrations or things like",
    "start": "3296960",
    "end": "3304040"
  },
  {
    "text": "performance when generally speaking you don't have a data set the same as production do you have like a a nightly",
    "start": "3304040",
    "end": "3311160"
  },
  {
    "text": "type environment or a test environment that clones the database or do you take other approaches we've taken several",
    "start": "3311160",
    "end": "3318040"
  },
  {
    "text": "approaches the one I've liked the most and I like it because it was",
    "start": "3318040",
    "end": "3324000"
  },
  {
    "text": "sufficiently complex that we had sort of an elegant way of of solving it and and because we were",
    "start": "3324000",
    "end": "3329280"
  },
  {
    "text": "dealing with data some Pi data right some personally identifiable information in in the system we had to find a way to",
    "start": "3329280",
    "end": "3336480"
  },
  {
    "text": "effectively sort of not expose not copy that data right into multiple environments we kind of created a",
    "start": "3336480",
    "end": "3342799"
  },
  {
    "text": "compliance sort of a risk right so what we did but basically is to basically",
    "start": "3342799",
    "end": "3348640"
  },
  {
    "text": "watch the data um when you have a a primary and and other sort of replicas",
    "start": "3348640",
    "end": "3354359"
  },
  {
    "text": "the primary typ typically needs to sort of communicate right changes right to those readon right replicas right so if",
    "start": "3354359",
    "end": "3360640"
  },
  {
    "text": "you tap into that stream going back and forth or rather typically going one way right from from the primary for the",
    "start": "3360640",
    "end": "3366599"
  },
  {
    "text": "where actually where you're writing your data to the the readon if you tap into that stream right you you will see",
    "start": "3366599",
    "end": "3372480"
  },
  {
    "text": "exactly what the changes are right so now we can sort of inject sort of a um",
    "start": "3372480",
    "end": "3379119"
  },
  {
    "text": "ourselves as a basically you can think of it as a listener right whereby we can actually see the data right and actually",
    "start": "3379119",
    "end": "3385920"
  },
  {
    "text": "keep our separate sort of test environment up to date with that stream of information right and then during",
    "start": "3385920",
    "end": "3392119"
  },
  {
    "text": "that sort of uh copying over we actually apply a transformation to that data to remove right to anonymize rather the",
    "start": "3392119",
    "end": "3398240"
  },
  {
    "text": "data before it actually gets stored on disk with with the the test environment that's a elaborated and a more",
    "start": "3398240",
    "end": "3404359"
  },
  {
    "text": "complicated way of doing it but that's one where it was the most fun for me because you know one I that's when I",
    "start": "3404359",
    "end": "3409520"
  },
  {
    "text": "figured out basically how the sort of the replication in myself was working between the primary and then secondary nodes and Missy being able to sort of",
    "start": "3409520",
    "end": "3416480"
  },
  {
    "text": "transform the data sort of in flight and before you write it to dis I mean that was like a really fun technical",
    "start": "3416480",
    "end": "3421559"
  },
  {
    "text": "challenge um but that's definitely one of the more complicated ways uh to do it to make sure I understand so you have",
    "start": "3421559",
    "end": "3428880"
  },
  {
    "text": "like the the ma or the the lead database I'm so used to bad terms sorry and then",
    "start": "3428880",
    "end": "3434359"
  },
  {
    "text": "you have like the follower did you spin up a new follower that you intended to use for test and then you you then when that was popping all the data over to",
    "start": "3434359",
    "end": "3440599"
  },
  {
    "text": "that new follower that's when you did all the Transformations well it wasn't sort of in a sort of pool right",
    "start": "3440599",
    "end": "3446599"
  },
  {
    "text": "basically the primary wasn't aware of that sort of separate it's not really a follower it's just a separate instance",
    "start": "3446599",
    "end": "3451839"
  },
  {
    "text": "somewhere else okay uh and then basically we be would be writing sort of that data to it obviously it was a little slower than but you know it was a",
    "start": "3451839",
    "end": "3458760"
  },
  {
    "text": "test environment it didn't need to be you know like a two to millisecond up to date right so we could apply our",
    "start": "3458760",
    "end": "3463880"
  },
  {
    "text": "transforms before the data got written it was a way of actually sort of um interjecting ourselves in that process",
    "start": "3463880",
    "end": "3470039"
  },
  {
    "text": "oh so you kept this going all the time then oh yeah okay so it wasn't like a one time thing thing you just like kept",
    "start": "3470039",
    "end": "3475440"
  },
  {
    "text": "it up to date and then you could use it in the future yeah just yeah kept it up to date as the system changed and we just you know kept our staging",
    "start": "3475440",
    "end": "3481400"
  },
  {
    "text": "environment up to date it's really clever because if you just read it normally that would have course would have been activity on the database",
    "start": "3481400",
    "end": "3488480"
  },
  {
    "text": "potentially MH exactly there would have been another client yeah yeah it's funny because we we're kind of looking at this",
    "start": "3488480",
    "end": "3494359"
  },
  {
    "text": "exact thing and it's basically as Johnny described what we're going to do is read from one place I do the anonymizing",
    "start": "3494359",
    "end": "3502480"
  },
  {
    "text": "thing and what we really want is like the shape of the data you know we're not going to read it we're not going to sit",
    "start": "3502480",
    "end": "3507960"
  },
  {
    "text": "and read through things so we'll probably scramble everything we'll probably mix all the words up and",
    "start": "3507960",
    "end": "3513280"
  },
  {
    "text": "everything just so that you don't get you know because customer data you know if you really care about that then it's",
    "start": "3513280",
    "end": "3519960"
  },
  {
    "text": "not acceptable to just copy your production database to test to work on",
    "start": "3519960",
    "end": "3525319"
  },
  {
    "text": "yeah it doesn't matter really what the data is but that's really clever though I love the way that it was like just",
    "start": "3525319",
    "end": "3530920"
  },
  {
    "text": "must have been some API of a listener API so it could receive the changes that's a really smart solution so",
    "start": "3530920",
    "end": "3537960"
  },
  {
    "text": "another way you can also test migrations specifically is actually kind of write the test where if if you have a access",
    "start": "3537960",
    "end": "3544400"
  },
  {
    "text": "to the migration files you can kind of migrate to the first step you can insert some data obviously it won't be like",
    "start": "3544400",
    "end": "3550440"
  },
  {
    "text": "entirely representative of your production database where you may have hundreds of thousands of customers or whatever but you insert some data and",
    "start": "3550440",
    "end": "3556480"
  },
  {
    "text": "then you do uh the migration to the next step and you check that that data was updated correctly and you can do that for all of your migrations as well and",
    "start": "3556480",
    "end": "3562559"
  },
  {
    "text": "then run that as a normal test especially if you spin up a database uh with the the docker test container so",
    "start": "3562559",
    "end": "3569799"
  },
  {
    "text": "that's what I've been doing for some of my projects in any three minutes you're like",
    "start": "3569799",
    "end": "3576680"
  },
  {
    "text": "yeah to be fair I saw that demo that you did and it didn't look real the it was",
    "start": "3577119",
    "end": "3583000"
  },
  {
    "text": "so quick yeah I want to say as well the first time I ran that I had just",
    "start": "3583000",
    "end": "3588240"
  },
  {
    "text": "formatted my PC the first time I ran it I had to pull down the docker image as well and it still took 12 seconds in",
    "start": "3588240",
    "end": "3593839"
  },
  {
    "text": "total about the second time around it it took three",
    "start": "3593839",
    "end": "3598078"
  },
  {
    "text": "seconds we'll post a link to Docker test in the show notes dear listener y I need",
    "start": "3598960",
    "end": "3605200"
  },
  {
    "text": "to look at that myself so yeah it's good it's a good point because you want to test as close to that production",
    "start": "3605200",
    "end": "3611359"
  },
  {
    "text": "environment as possible so especially with like migrations and that sort of stuff if you're doing anything complex",
    "start": "3611359",
    "end": "3617640"
  },
  {
    "text": "can be really hard because you might have data that you just don't expect to be like in the format it is or something",
    "start": "3617640",
    "end": "3623520"
  },
  {
    "text": "I know I've definitely had one or two cases where we're running rails migrations during a deploy and all of a",
    "start": "3623520",
    "end": "3629520"
  },
  {
    "text": "sudden something breaks and like everybody just loses it cuz you're like I don't know what's happening right now",
    "start": "3629520",
    "end": "3634960"
  },
  {
    "text": "and it's it's just hard if you somehow missed it in a test or something so you have to find good solutions for that",
    "start": "3634960",
    "end": "3641000"
  },
  {
    "text": "yeah like even that the solution that Johnny was proposing may suffer from that issue right because you anonymize the data and all of a sudden you took",
    "start": "3641000",
    "end": "3647480"
  },
  {
    "text": "out all of the like Unicode names or something I don't know like you can never really be sure unless you're doing",
    "start": "3647480",
    "end": "3653799"
  },
  {
    "text": "it straight up up against your your postc database right and",
    "start": "3653799",
    "end": "3659760"
  },
  {
    "text": "production that's terrifying though that can't be our advice at the",
    "start": "3659760",
    "end": "3665480"
  },
  {
    "text": "end of the show test in production test your data change in production so one",
    "start": "3665480",
    "end": "3672119"
  },
  {
    "text": "last question then uh one of the people who was or somebody on Twitter I think had asked why do we import the underscore for SQL packages I think this",
    "start": "3672119",
    "end": "3680680"
  },
  {
    "text": "is left over from um not a great design decision in the early days I don't think",
    "start": "3680680",
    "end": "3687960"
  },
  {
    "text": "anyone would design packages today that used this underscore import thing isn't",
    "start": "3687960",
    "end": "3693359"
  },
  {
    "text": "it where there's an init function and it is it obviously when when it's imported",
    "start": "3693359",
    "end": "3699520"
  },
  {
    "text": "the the inits in a package will run and they can sometimes then interfere they",
    "start": "3699520",
    "end": "3704760"
  },
  {
    "text": "can import other packages they can set variables they can do these kind of magical things in global space you side",
    "start": "3704760",
    "end": "3712240"
  },
  {
    "text": "effect yeah use side effect yeah yeah yeah and so yeah the worst part is I think all they do is they call like SQL",
    "start": "3712240",
    "end": "3719319"
  },
  {
    "text": "do register and they pass in like a name and then they pass in a driver I think that's literally the line you hope well",
    "start": "3719319",
    "end": "3724720"
  },
  {
    "text": "you hope yeah you hope yeah you hope that's all they're doing but like the worst part is I look",
    "start": "3724720",
    "end": "3730480"
  },
  {
    "text": "at it and I'm like if I had to import this package I could have just written that line myself and been done with it",
    "start": "3730480",
    "end": "3736960"
  },
  {
    "text": "that's right and I think that was it that they wanted it was before we had a lot of experience with go I think and it",
    "start": "3736960",
    "end": "3743279"
  },
  {
    "text": "was early days where that just wasn't obvious it seems really quite obvious now in retrospect um and",
    "start": "3743279",
    "end": "3749760"
  },
  {
    "text": "you wouldn't Des exactly all probably what you're doing it's the same with the image packages if you want to support",
    "start": "3749760",
    "end": "3755200"
  },
  {
    "text": "GIF and jpegs and things you just have to make sure the packages are imported you don't use them it's so weird and I",
    "start": "3755200",
    "end": "3763079"
  },
  {
    "text": "really don't like it it's no harm to just say like you say SQL do register",
    "start": "3763079",
    "end": "3768599"
  },
  {
    "text": "and pass the thing in it's a bit more Vose uh so if you're designing packages then please do just make kit for both",
    "start": "3768599",
    "end": "3775520"
  },
  {
    "text": "it's so tempting to want to be very sort of nice and you know make it easy out",
    "start": "3775520",
    "end": "3781680"
  },
  {
    "text": "make our users lives very easy and do everything for them but yeah I think",
    "start": "3781680",
    "end": "3786799"
  },
  {
    "text": "that's one example where you shouldn't try don't try and be too clever just let them import a package and then use it",
    "start": "3786799",
    "end": "3792640"
  },
  {
    "text": "and if they don't use it don't import it don't have any side effects to importing a package this is one of the cases where",
    "start": "3792640",
    "end": "3797920"
  },
  {
    "text": "ignorance is not Bliss yeah once you understand how it",
    "start": "3797920",
    "end": "3803520"
  },
  {
    "text": "works it it's still not ideal but it's not as terrifying but I completely understand the first time anybody sees",
    "start": "3803520",
    "end": "3808640"
  },
  {
    "text": "it they're like look there's magic and go and I'm like not really but just requires you like it forces you",
    "start": "3808640",
    "end": "3815119"
  },
  {
    "text": "to learn about in it which in some ways I'm like we don't really want to teach people about this stay away from globals generally",
    "start": "3815119",
    "end": "3823400"
  },
  {
    "text": "speaking stay away from in it yeah is it time for unpopular opinion though I mean",
    "start": "3823400",
    "end": "3829680"
  },
  {
    "text": "I want an unpopular opinion from Johan ah I can do that actually okay well then",
    "start": "3829680",
    "end": "3835440"
  },
  {
    "text": "let's do it I can do a in popular opinion okay Bo boom",
    "start": "3835440",
    "end": "3842039"
  },
  {
    "text": "nice you I actually think should probably",
    "start": "3843839",
    "end": "3849000"
  },
  {
    "text": "[Music]",
    "start": "3849270",
    "end": "3852809"
  },
  {
    "text": "leave I have this library that I like to use which is called a squirrel and it's a query Builder and it uses the Builder",
    "start": "3855839",
    "end": "3864920"
  },
  {
    "text": "pattern ha everyone everyone hates the Builder pattern and go right and for good reason because the Builder pattern",
    "start": "3864920",
    "end": "3870240"
  },
  {
    "text": "doesn't work well with with the static um typing that go provides because we don't have generics and squirel suffers",
    "start": "3870240",
    "end": "3877319"
  },
  {
    "text": "from this problem as well but it's also provides a lot of power at the same time",
    "start": "3877319",
    "end": "3882480"
  },
  {
    "text": "so it's like the one exception to the rule of don't use Builder the Builder pattern anywhere is for query building",
    "start": "3882480",
    "end": "3888880"
  },
  {
    "text": "use the squirrel package because it's really easy to use and constructing uh",
    "start": "3888880",
    "end": "3894160"
  },
  {
    "text": "queries with so the Builder package then just just for anyone not familiar this is where you get these fluent apis where",
    "start": "3894160",
    "end": "3901400"
  },
  {
    "text": "every method Returns the main object itself and then CH yeah right and I",
    "start": "3901400",
    "end": "3908240"
  },
  {
    "text": "should say I hate these because you can't Define interfaces that work with them like at all it's just a nightmare",
    "start": "3908240",
    "end": "3914799"
  },
  {
    "text": "so I I do have one question Johan could you reconstruct the swirl package using like functional options uh potentially",
    "start": "3914799",
    "end": "3923119"
  },
  {
    "text": "cuz I'm pretty like I've looked at uh gorm which is a big om for you know go",
    "start": "3923119",
    "end": "3928240"
  },
  {
    "text": "and I'm pretty sure you could rewrite a vast majority of it using that I just don't think that was as popular when those libraries are written you're right",
    "start": "3928240",
    "end": "3934920"
  },
  {
    "text": "that it's uh it's annoying to use because the like you can't construct an interface that works with it in the",
    "start": "3934920",
    "end": "3940319"
  },
  {
    "text": "cases where I have been using it it's usually just like in a single API layer you're just using it through that",
    "start": "3940319",
    "end": "3945480"
  },
  {
    "text": "package and you don't really have to pass it around in any kind of generic way and also actually squirrel does provide a few interfaces for working",
    "start": "3945480",
    "end": "3951359"
  },
  {
    "text": "with the standard Library so it has like a base runner or whatever an interface that describes how SQL row behaves so",
    "start": "3951359",
    "end": "3959240"
  },
  {
    "text": "that you can operate on that and pass that through functions if you want to I find that the kind of one exception to",
    "start": "3959240",
    "end": "3965200"
  },
  {
    "text": "this rule but generally the Builder pattern and like Matt described it fluent interfaces like that just don't",
    "start": "3965200",
    "end": "3970720"
  },
  {
    "text": "work very well and go that's my unpopular opinion it is a bit unpopular because I I don't know that I would",
    "start": "3970720",
    "end": "3976000"
  },
  {
    "text": "agree I'm just looking at the the syntax you're sort of writing strongly typed",
    "start": "3976000",
    "end": "3981279"
  },
  {
    "text": "code so there's that right because obviously if the AL ative is just a SQL string I assume but you lose that uh",
    "start": "3981279",
    "end": "3988720"
  },
  {
    "text": "that selness don't you it doesn't say select star from table you lose that a little bit but you do get type safety",
    "start": "3988720",
    "end": "3996839"
  },
  {
    "text": "the reason I ask about the functional options one is that if everything Returns the same object that means that",
    "start": "3996839",
    "end": "4003119"
  },
  {
    "text": "every option function is essentially just going to be a function that accepts that one argument and then you can just",
    "start": "4003119",
    "end": "4008559"
  },
  {
    "text": "list a bunch of them as things you're passing into like you know squirrel. query and then you pass in all your options for it I think that's the type",
    "start": "4008559",
    "end": "4015359"
  },
  {
    "text": "of library that probably could be Rewritten like that and it might work a little bit easier in some ways I'm not",
    "start": "4015359",
    "end": "4020960"
  },
  {
    "text": "positive me too be a good exercise I'd like to see you try that John yeah live",
    "start": "4020960",
    "end": "4027599"
  },
  {
    "text": "on Twitch well like I've done it with uh gorm a little bit like not the whole",
    "start": "4027599",
    "end": "4032760"
  },
  {
    "text": "thing because that would just take forever but I've I've definitely toyed with doing some of it so I know there's I just the hard part is there might be",
    "start": "4032760",
    "end": "4039240"
  },
  {
    "text": "some weird Edge case I don't know about and that's like you almost have to do the entire thing exhaustively see if it",
    "start": "4039240",
    "end": "4044799"
  },
  {
    "text": "works yeah we're talking about these abstractions and things we have in Pace",
    "start": "4044799",
    "end": "4050000"
  },
  {
    "text": "a very light abstraction over the data store and it's it uses the it's a schema",
    "start": "4050000",
    "end": "4055279"
  },
  {
    "text": "document store so the get and the put operations are abstracted in this kind",
    "start": "4055279",
    "end": "4061400"
  },
  {
    "text": "of a really light way but what it allows us to do is check because it's obviously",
    "start": "4061400",
    "end": "4066480"
  },
  {
    "text": "it's a remote service sometimes that can fail with temporary errors so what we can do in that abstraction is check if",
    "start": "4066480",
    "end": "4072680"
  },
  {
    "text": "there was like just a network error just try again and then you get a kind of",
    "start": "4072680",
    "end": "4078000"
  },
  {
    "text": "robustness for free and again a bit like the example earlier of using SQL most of",
    "start": "4078000",
    "end": "4083520"
  },
  {
    "text": "the time and then you can break that rule and use different ones I think that is quite a nice way to do it use the",
    "start": "4083520",
    "end": "4090440"
  },
  {
    "text": "abstraction it's not going to be 100% but use it for the 80% of the cases and then you can do something perhaps more",
    "start": "4090440",
    "end": "4097120"
  },
  {
    "text": "in depth after you know in those cases when you really need it so yeah I like",
    "start": "4097120",
    "end": "4102920"
  },
  {
    "text": "that I've definitely got a to think about for this just one last question then Johan one of the nice things about",
    "start": "4102920",
    "end": "4109520"
  },
  {
    "text": "these kinds of Builder tools and packages is that you protect against",
    "start": "4109520",
    "end": "4115359"
  },
  {
    "text": "some security considerations like SQL injection or SQL injection is one this",
    "start": "4115359",
    "end": "4120679"
  },
  {
    "text": "is what you're talking about using question marks and and dollar symbols for parameters it's instead of just",
    "start": "4120679",
    "end": "4125838"
  },
  {
    "text": "building strings up yourself isn't it why is that important the danger of SQL",
    "start": "4125839",
    "end": "4131359"
  },
  {
    "text": "injection is that you provide some sort of user input that maybe prematurely",
    "start": "4131359",
    "end": "4137440"
  },
  {
    "text": "interrupt your SQL statement and then construct its own SQL statement and in such a way could make changes in the",
    "start": "4137440",
    "end": "4144520"
  },
  {
    "text": "database or extract data from the database in a very dangerous way and the way that you protect against that sort",
    "start": "4144520",
    "end": "4150080"
  },
  {
    "text": "of thing is by using these placeholders or extrapolated variables what they have many different names anyway the way that",
    "start": "4150080",
    "end": "4157080"
  },
  {
    "text": "squirrel makes this easier is by like when you normally use uh the go standard",
    "start": "4157080",
    "end": "4162920"
  },
  {
    "text": "Library database SL SQL interface you may be tempted to just use a fmt sprintf",
    "start": "4162920",
    "end": "4168679"
  },
  {
    "text": "to construct your queries this is kind of the major danger where you might end up causing an SQL injection without",
    "start": "4168679",
    "end": "4175238"
  },
  {
    "text": "thinking about it if you've ever found yourself oh like I don't really want to write out this very long SQL query I don't want to",
    "start": "4175239",
    "end": "4182880"
  },
  {
    "text": "have to map the names myself I'll just use a a format sprintf uh in in a like a",
    "start": "4182880",
    "end": "4188640"
  },
  {
    "text": "helper package somewhere and then accidentally you may have like gotten the argument wrong or something like",
    "start": "4188640",
    "end": "4193838"
  },
  {
    "text": "that and you ended up with something that the user can manipulate inside of your query then that's super dangerous",
    "start": "4193839",
    "end": "4199880"
  },
  {
    "text": "and a sure way to just avoid that sort of thing altogether is to use squirrel because all of the variables that you",
    "start": "4199880",
    "end": "4206800"
  },
  {
    "text": "get put into the Builder automatically become escaped in extrapolated",
    "start": "4206800",
    "end": "4213360"
  },
  {
    "text": "variables no interpolated I need to ask have you met Bobby tables I have met Bobby tables",
    "start": "4213360",
    "end": "4220080"
  },
  {
    "text": "this is a great one actually uh so the reference that uh Johnny's making there is to an XKCD comic which has a very",
    "start": "4220080",
    "end": "4227800"
  },
  {
    "text": "illustrative way of showing just exactly what SQL injection means where there's a",
    "start": "4227800",
    "end": "4232880"
  },
  {
    "text": "school principal who's making a call to a concerned parent I suppose asking",
    "start": "4232880",
    "end": "4238640"
  },
  {
    "text": "about their son Bobby tables dash dash drop table students or something like",
    "start": "4238640",
    "end": "4243760"
  },
  {
    "text": "that the parent says yes we call him Bobby tables and then the principal says well I hope you're happy we've lost this",
    "start": "4243760",
    "end": "4250120"
  },
  {
    "text": "year's Student Records which really funny because obviously the implication there is that they had to enter their um",
    "start": "4250120",
    "end": "4257280"
  },
  {
    "text": "kids name somewhere in some sort of form or something and they thought hey it will be fun to see if this is vulnerable",
    "start": "4257280",
    "end": "4262360"
  },
  {
    "text": "to SQL injection and then they put in a command that would if it was vulnerable to SQL injection drop the table called",
    "start": "4262360",
    "end": "4268800"
  },
  {
    "text": "students and of course the joke then is that it actually did and the principal is furious about it and uh the kind of",
    "start": "4268800",
    "end": "4276000"
  },
  {
    "text": "lesson I guess is that you shouldn't have been vulnerable to SQL injection now he's got no job though so",
    "start": "4276000",
    "end": "4283320"
  },
  {
    "text": "that's no good telling him that is there his life's devastated by that but yeah I did",
    "start": "4283320",
    "end": "4289120"
  },
  {
    "text": "start telling a story once and we had filipo security engineer On The Go Team",
    "start": "4289120",
    "end": "4294880"
  },
  {
    "text": "actually just stopped me halfway and said just don't don't tell that story it was a similar kind of story about SQL",
    "start": "4294880",
    "end": "4301239"
  },
  {
    "text": "injection and good lesson for all yeah he stopped me telling it which is a good",
    "start": "4301239",
    "end": "4306600"
  },
  {
    "text": "but if you see me in the real world I'll tell you it my little story about SQL",
    "start": "4306600",
    "end": "4311639"
  },
  {
    "text": "injection yes so but don't worry uh kids you won't be seally injected I don't",
    "start": "4311639",
    "end": "4317480"
  },
  {
    "text": "know what that means um what I was going to say yeah don't don't worry that bit",
    "start": "4317480",
    "end": "4322960"
  },
  {
    "text": "will be that didn't that didn't come out right no no uh what was going to say is like don't worry if you use uh if you if you",
    "start": "4322960",
    "end": "4329800"
  },
  {
    "text": "use it the right way it's not something to be scared of if you use squirrel and things we going to have to change the",
    "start": "4329800",
    "end": "4334880"
  },
  {
    "text": "rating for the podcast Now Matt I'm just going to make a quick note of the time stamp that I said that at",
    "start": "4334880",
    "end": "4341639"
  },
  {
    "text": "for editing purposes it's like PG up until 58 minute Mark and",
    "start": "4341639",
    "end": "4347760"
  },
  {
    "text": "then nope yep that's actually how we should do the podcast it should be an hour and then there's an alarm goes off",
    "start": "4347760",
    "end": "4354800"
  },
  {
    "text": "and then it's like The Purge we can just you can say whatever we want water shut",
    "start": "4354800",
    "end": "4359960"
  },
  {
    "text": "in the UK if your kids are in the car you need to close their ears",
    "start": "4359960",
    "end": "4365840"
  },
  {
    "text": "yeah awesome yeah well this was a a great show thank you so much it was uh",
    "start": "4365840",
    "end": "4371159"
  },
  {
    "text": "great to learn so much about postgress I think it's nice for junior people to know as well that it's a perfectly",
    "start": "4371159",
    "end": "4377679"
  },
  {
    "text": "reasonable choice pick it up get going with it learn it uh see what you can do with it see what you can build thank you",
    "start": "4377679",
    "end": "4384880"
  },
  {
    "text": "so much to our special guest Johan brost and Johnny Boro and John Calhoun were",
    "start": "4384880",
    "end": "4390800"
  },
  {
    "text": "here also we will see you next time on go time",
    "start": "4390800",
    "end": "4396960"
  },
  {
    "text": "[Music] goodbye if you like go time odds are",
    "start": "4396960",
    "end": "4402560"
  },
  {
    "text": "you'll enjoy Pratt iCal AI brain science and even dare I say it JS party good",
    "start": "4402560",
    "end": "4408719"
  },
  {
    "text": "news everyone you do not have to subscribe to each of those shows individually just point your favorite",
    "start": "4408719",
    "end": "4414080"
  },
  {
    "text": "podcast app to our Master feed of all changelog podcasts it's your One-Stop shop for everything we produce check it",
    "start": "4414080",
    "end": "4419719"
  },
  {
    "text": "out at Chang log.com slm or by searching Chang logmaster in apple podcast Spotify",
    "start": "4419719",
    "end": "4425840"
  },
  {
    "text": "Etc you'll find it thanks again to Johan bran horse for joining the gang on this episode to Matt John and Johnny for",
    "start": "4425840",
    "end": "4432320"
  },
  {
    "text": "hosting and to you you for listening we appreciate you change logs music is produced by the mysterious breakmaster",
    "start": "4432320",
    "end": "4438880"
  },
  {
    "text": "cylinder and we are supported by awesome people at companies who get it thanks again to fast Le lenoe and rbar for",
    "start": "4438880",
    "end": "4445560"
  },
  {
    "text": "supporting go time that's all for now we'll talk to you again next [Music]",
    "start": "4445560",
    "end": "4462280"
  },
  {
    "text": "week [Music]",
    "start": "4462280",
    "end": "4489550"
  },
  {
    "text": "come [Music]",
    "start": "4492280",
    "end": "4505439"
  },
  {
    "text": "and it's youran not youran your it depends where you are to be honest I I",
    "start": "4509800",
    "end": "4515880"
  },
  {
    "text": "Yan works you Johan say no Johan Johan I think you",
    "start": "4515880",
    "end": "4523719"
  },
  {
    "text": "yeah you don't know D you don't really say your own name when do you need to say your own name",
    "start": "4523719",
    "end": "4530199"
  },
  {
    "text": "when your mom is mad at you what does she yell that's a different question because my mom's Swedish and in Sweden",
    "start": "4530199",
    "end": "4535960"
  },
  {
    "text": "we would say you won you won but in English no one gets that like no one with an English background will get that",
    "start": "4535960",
    "end": "4542280"
  },
  {
    "text": "right unfortunately and it sounds butchered no matter how much they try SS like you won",
    "start": "4542280",
    "end": "4547880"
  },
  {
    "text": "something yeah yeah it's well it's like the Irish Yuan like Yuan McGregor right",
    "start": "4547880",
    "end": "4553880"
  },
  {
    "text": "right right right so if we want to properly introduce you we have to call your mom up record her saying it you",
    "start": "4553880",
    "end": "4559840"
  },
  {
    "text": "slip that in there hold on why is your name different when you're in trouble yeah your names change in Sweden if you",
    "start": "4559840",
    "end": "4567080"
  },
  {
    "text": "get in trouble it's like it's like a goodie and a it's like good cop bad cop kind of thing I don't know it's I want",
    "start": "4567080",
    "end": "4574360"
  },
  {
    "text": "to learn we should we should have another episode about that why why not both we can do both",
    "start": "4574360",
    "end": "4580840"
  },
  {
    "text": "right now yeah oh well okay okay hint",
    "start": "4580840",
    "end": "4588159"
  },
  {
    "text": "taken drop it don't mention it okay fair play I'll Take a Hint and",
    "start": "4588159",
    "end": "4596480"
  },
  {
    "text": "then I won't mention it again that's that's me you can rely on me for that I feel like Matt's making me lie today I'm",
    "start": "4596480",
    "end": "4602280"
  },
  {
    "text": "like we're talking about postgress and go on the and it's like no we're not we're not talking about that at all right now you should though that would",
    "start": "4602280",
    "end": "4607920"
  },
  {
    "text": "be good if we could all right is everybody recording locally",
    "start": "4607920",
    "end": "4613600"
  },
  {
    "text": "[Music]",
    "start": "4613600",
    "end": "4617049"
  }
]