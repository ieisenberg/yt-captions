[
  {
    "text": "shall we talk about inss who uses ins I only use Flo 64 you only no matter what",
    "start": "40",
    "end": "7640"
  },
  {
    "text": "it is yeah cuz you're always on point or something nice be done something",
    "start": "7640",
    "end": "15839"
  },
  {
    "text": "first good joke you've made today [Laughter] Matt just",
    "start": "15839",
    "end": "21920"
  },
  {
    "text": "today B with for change log is provided by fastly learn more at fastly.com our",
    "start": "21920",
    "end": "28000"
  },
  {
    "text": "feature flags are powered by launch dark check them out at launch dark.com and we're hosted on Lino Cloud servers get",
    "start": "28000",
    "end": "34719"
  },
  {
    "text": "$100 in hosting credit at lin.com changelog what's up Gophers our friends",
    "start": "34719",
    "end": "40559"
  },
  {
    "text": "over gravitational made a big transition at the end of 2020 to Rebrand as",
    "start": "40559",
    "end": "45680"
  },
  {
    "text": "teleport and shared a new product announcement to showcase the direction they're taking teleport is operating",
    "start": "45680",
    "end": "51079"
  },
  {
    "text": "from a vision of being able to run and access software anywhere in a secure and compliant manner something they call",
    "start": "51079",
    "end": "57760"
  },
  {
    "text": "environment free Computing with teleport engineering teams can quickly access any resource anywhere using a unified access",
    "start": "57760",
    "end": "65518"
  },
  {
    "text": "plane that consolidates access controls and auditing across all environments infrastructure applications as well as",
    "start": "65519",
    "end": "72560"
  },
  {
    "text": "data teleport server access let you SS securely into Linux servers and smart",
    "start": "72560",
    "end": "77759"
  },
  {
    "text": "devices with a complete audit Trail teleport kubernetes access let you access kubernetes cluster securely with",
    "start": "77759",
    "end": "83600"
  },
  {
    "text": "complete visibility to access and behavior and finally teleport application access let you access web",
    "start": "83600",
    "end": "89600"
  },
  {
    "text": "apps running behind natat and firewalls with security and compliance try teleport today in the cloud self-hosted",
    "start": "89600",
    "end": "95880"
  },
  {
    "text": "or open source head to go teleport.to learn more and get started again",
    "start": "95880",
    "end": "101000"
  },
  {
    "text": "goport.com",
    "start": "101000",
    "end": "104000"
  },
  {
    "text": "[Music]",
    "start": "106290",
    "end": "111829"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "122479",
    "end": "129039"
  },
  {
    "text": "from around the go Community if you're following gotime FM on Twitter then you already know that your chance to win",
    "start": "129039",
    "end": "135440"
  },
  {
    "text": "mark baates Raspberry Pi 400 is on and popping there are three ways to enter",
    "start": "135440",
    "end": "141080"
  },
  {
    "text": "check the link in your show notes to read all about it okay let's do this",
    "start": "141080",
    "end": "146879"
  },
  {
    "text": "here we go [Music]",
    "start": "146879",
    "end": "154449"
  },
  {
    "text": "hello and welcome to go time I'm Matt ryer and today we're talking about go",
    "start": "156959",
    "end": "162360"
  },
  {
    "text": "language proposals go is open source uh so you can open issues and make",
    "start": "162360",
    "end": "168680"
  },
  {
    "text": "proposals and sometimes people do that and then sometimes they end up in the language itself so we're going to learn",
    "start": "168680",
    "end": "175159"
  },
  {
    "text": "a bit about that process and take a look at some of our favorite proposals",
    "start": "175159",
    "end": "180560"
  },
  {
    "text": "joining me today Johnny boro's back Hello Johnny hello welcome back sir it's",
    "start": "180560",
    "end": "186319"
  },
  {
    "text": "been a while yeah it's been a while although I was in last week's episode you weren't around but you know for you",
    "start": "186319",
    "end": "193200"
  },
  {
    "text": "I'm I'm back yes I'm yes you're new to me I'm new to you the listener is",
    "start": "193200",
    "end": "198239"
  },
  {
    "text": "probably sick of you but to me I'm not I'm yeah fixture in the wall kind of no",
    "start": "198239",
    "end": "203799"
  },
  {
    "text": "not really it doesn't happen that quickly two or three episodes uh we're also joined by Chris Brando hello Chris",
    "start": "203799",
    "end": "209760"
  },
  {
    "text": "CH welcome back hello glad to be back how have you been been well you know",
    "start": "209760",
    "end": "215760"
  },
  {
    "text": "getting the new year started almost done with January mhm yeah same same for us actually um",
    "start": "215760",
    "end": "224080"
  },
  {
    "text": "and same for Daniel who's joined us also Daniel Marty Welcome Back Sir hi happy",
    "start": "224080",
    "end": "229879"
  },
  {
    "text": "to be back thanks for coming back thanks for accepting our invitation maybe you could just start off by telling us",
    "start": "229879",
    "end": "236360"
  },
  {
    "text": "what's the process behind a proposal what's the usual sort of flow how do they come about and what happens to them",
    "start": "236360",
    "end": "243120"
  },
  {
    "text": "so it's been a process that has iterated quite a lot in the past few years so initially it was as you can imagine with",
    "start": "243120",
    "end": "248720"
  },
  {
    "text": "any open source project people would open issues and be like hey please do X or Y uh with language features it was",
    "start": "248720",
    "end": "255319"
  },
  {
    "text": "kind of messy because sometimes you would get two lines of somebody saying hey add generics that kind of thing so",
    "start": "255319",
    "end": "261759"
  },
  {
    "text": "over time it became more formal so for really fancy changes like generics or error checking there's a like a formal",
    "start": "261759",
    "end": "269080"
  },
  {
    "text": "process where have to like write a document and sort of write an experimental implementation of your",
    "start": "269080",
    "end": "274680"
  },
  {
    "text": "language change but most changes that get proposed are smaller so instead there's like a small template that you",
    "start": "274680",
    "end": "280560"
  },
  {
    "text": "have to fill and I think that's what most people end up doing right and then",
    "start": "280560",
    "end": "285720"
  },
  {
    "text": "what happens once they're out we're talking open source aren't we so this is available for everyone to look at right",
    "start": "285720",
    "end": "292120"
  },
  {
    "text": "so it's a bit tricky because it's hard for the team to prioritize because something they could do is for example",
    "start": "292120",
    "end": "298560"
  },
  {
    "text": "go from oldest to new newest but there's such a large backlog and some proposals are much more complex and large than",
    "start": "298560",
    "end": "305199"
  },
  {
    "text": "others so if you do them exclusively by creation time I don't think it would get",
    "start": "305199",
    "end": "310320"
  },
  {
    "text": "very far you would get stuck pretty quickly so they do a mix of like easy ones and ones that they agree with sort",
    "start": "310320",
    "end": "316520"
  },
  {
    "text": "of and then over time they tend to get to most of them and I I think they meet about once a week and they sort of",
    "start": "316520",
    "end": "323120"
  },
  {
    "text": "consider about a dozen proposals per week right yeah so that's it's amazing really and to think of like",
    "start": "323120",
    "end": "330039"
  },
  {
    "text": "all the different possible things you could change in go of course there were going to be a lot of those proposals",
    "start": "330039",
    "end": "335600"
  },
  {
    "text": "because you know sometimes it comes down to Personal Taste sometimes people think of things that perhaps in there in this",
    "start": "335600",
    "end": "343120"
  },
  {
    "text": "one specific case it would be a great feature but maybe it doesn't fit in other situations so it is kind of a",
    "start": "343120",
    "end": "350720"
  },
  {
    "text": "difficult thing to do I think isn't it to balance that and like you say some easy ones as well and so of course yeah",
    "start": "350720",
    "end": "357000"
  },
  {
    "text": "the difficulty of of of implementing and maintaining features as well becomes the thing you must have to kind of consider",
    "start": "357000",
    "end": "363880"
  },
  {
    "text": "all that stuff yeah and I I think the template is sort of the first filter nowadays which I think is pretty welld",
    "start": "363880",
    "end": "369199"
  },
  {
    "text": "designed it's pretty long so I'm not going to read the whole thing but some bits are pretty interesting there's stuff like how long I've you've been",
    "start": "369199",
    "end": "375960"
  },
  {
    "text": "using go for or who would this change help such as only researchers or maybe",
    "start": "375960",
    "end": "381360"
  },
  {
    "text": "people who do 3D games and other questions like has this been proposed before and if so how is this different",
    "start": "381360",
    "end": "388400"
  },
  {
    "text": "or things like is this backwards compatible with existing go programs because sometimes if the answer to a lot",
    "start": "388400",
    "end": "395160"
  },
  {
    "text": "of these questions is not what you're after the change is most likely not a good idea and you can sense that they're",
    "start": "395160",
    "end": "401280"
  },
  {
    "text": "encoding in those questions a way to find make sure you've checked to see if there's already a proposal that's been",
    "start": "401280",
    "end": "407919"
  },
  {
    "text": "made for this because actually GitHub issues isn't the probably the best way to solve this problem so I imagine",
    "start": "407919",
    "end": "414479"
  },
  {
    "text": "there's a lot of duplication and things like that yeah and I actually find GitHub search not very good it's almost",
    "start": "414479",
    "end": "419520"
  },
  {
    "text": "like a keyword substring search um so I actually use Google to search for goang issues because there's like what 50,000",
    "start": "419520",
    "end": "426599"
  },
  {
    "text": "of them so it's the only way really that's a good tip how do you do it any",
    "start": "426599",
    "end": "431919"
  },
  {
    "text": "special way um so you can filter by site so I filter by github.com",
    "start": "431919",
    "end": "437960"
  },
  {
    "text": "goang goisses and then whatever keywords and it mostly Works uh but it's",
    "start": "437960",
    "end": "444280"
  },
  {
    "text": "especially better than GitHub search in terms of relevance because you know if you didn't get exactly the right keyword",
    "start": "444280",
    "end": "450720"
  },
  {
    "text": "GitHub might not even show the issue at all that kind of thing okay so maybe we could have a look at some of the",
    "start": "450720",
    "end": "456680"
  },
  {
    "text": "proposals that are out there some really interesting ones and we're not going to",
    "start": "456680",
    "end": "462240"
  },
  {
    "text": "pick any that are currently underway is that is that what we said although I think we've added a few extras since",
    "start": "462240",
    "end": "468000"
  },
  {
    "text": "then haven't we maybe yeah yeah at least what I try to do when picking these is avoid the big issues like generics and",
    "start": "468000",
    "end": "475080"
  },
  {
    "text": "handling because I feel like those are too controversial and already you know there's a lot of material on them and we",
    "start": "475080",
    "end": "482159"
  },
  {
    "text": "also picked proposals that are still being considered but that haven't been accepted yet so it's still stuff that's",
    "start": "482159",
    "end": "487720"
  },
  {
    "text": "a bit up in the airh by the way though Daniel nothing's too controversial for this show um will",
    "start": "487720",
    "end": "494599"
  },
  {
    "text": "go anywhere that's a promise fair enough yeah so one of the first ones on the",
    "start": "494599",
    "end": "501039"
  },
  {
    "text": "list we have is this this is a really interesting one it's issue",
    "start": "501039",
    "end": "506960"
  },
  {
    "text": "21670 which makes me feel like come in Star Trek by saying that it is uh have",
    "start": "507440",
    "end": "514360"
  },
  {
    "text": "functions Auto Implement interfaces with only a single method of that same signature so this is essentially how we",
    "start": "514360",
    "end": "521360"
  },
  {
    "text": "have handle Funk which is a function type that implements the Handler",
    "start": "521360",
    "end": "526519"
  },
  {
    "text": "interface and you have to explicitly say that in the code at the moment um it's quite a short amount of code usually",
    "start": "526519",
    "end": "533120"
  },
  {
    "text": "because all you're doing is creating a method that then calls itself so it's not too difficult to do but this",
    "start": "533120",
    "end": "539959"
  },
  {
    "text": "proposal is about making it automatic so given a Handler interface that has a",
    "start": "539959",
    "end": "545440"
  },
  {
    "text": "serve HTTP method you wouldn't ever have to have a Handler Funk type you could always just make a funk that matches",
    "start": "545440",
    "end": "552680"
  },
  {
    "text": "that single method it would only work for single method interfaces of course",
    "start": "552680",
    "end": "557800"
  },
  {
    "text": "what do we think about it Daniel what do you think about that one somebody made a comment in this proposal which I think",
    "start": "557800",
    "end": "563000"
  },
  {
    "text": "was a good point which is that in go you can go from a method to a function by using a method value so we've got",
    "start": "563000",
    "end": "569240"
  },
  {
    "text": "variable of type bytes. buffer and you name it buff you can do buff. write and",
    "start": "569240",
    "end": "575079"
  },
  {
    "text": "that is a function so you can go from the method to the function but you cannot go back if that makes sense you can if you have a function you cannot",
    "start": "575079",
    "end": "581480"
  },
  {
    "text": "easily say okay now use it as a method you have to statically define a new type to use that",
    "start": "581480",
    "end": "587320"
  },
  {
    "text": "function so in a way this would make the language more consistent but then the question is how often does this come up",
    "start": "587320",
    "end": "593680"
  },
  {
    "text": "net HTP is a good example but I struggle to think of more than like four examples",
    "start": "593680",
    "end": "598920"
  },
  {
    "text": "well from the standard Library maybe but I love that pattern from that I copied it from the Handler Funk so whenever I",
    "start": "598920",
    "end": "604880"
  },
  {
    "text": "see opportunities to use that I do and there are often opportunities you know there are lots of times when especially",
    "start": "604880",
    "end": "612839"
  },
  {
    "text": "when you're building something new there's like a there is a new abstraction somewhere but you're not sure about it or all you really need is",
    "start": "612839",
    "end": "619600"
  },
  {
    "text": "just one thing from it so inevitably ends up being a single method so I do a lot of homegrown single method",
    "start": "619600",
    "end": "626120"
  },
  {
    "text": "interfaces if you like and usually have a a funk version of them in fact",
    "start": "626120",
    "end": "631440"
  },
  {
    "text": "sometimes I only just have the funk thing too I think maybe the the main argument against this proposal is that",
    "start": "631440",
    "end": "637519"
  },
  {
    "text": "you could argue that an interface is not defined only by the signature of its methods or in this case single method",
    "start": "637519",
    "end": "643680"
  },
  {
    "text": "but also the name of the method so for example is any function that looks like a read really a read it could do",
    "start": "643680",
    "end": "650720"
  },
  {
    "text": "something entirely different and it might match the reader interface by accident I'm not sure that this would be",
    "start": "650720",
    "end": "656600"
  },
  {
    "text": "a problem that happens often in practice but it does sort of of break Go's explicitness a little bit that's true",
    "start": "656600",
    "end": "662639"
  },
  {
    "text": "yeah because you're no longer dealing with that interface type or so yeah and",
    "start": "662639",
    "end": "667920"
  },
  {
    "text": "it's not explicit that's a good point Chris what are your thoughts I guess I have a clarifying question here so this",
    "start": "667920",
    "end": "673079"
  },
  {
    "text": "is like when you pass it into like pass a function into something that takes the interface it would just be like oh this",
    "start": "673079",
    "end": "679839"
  },
  {
    "text": "satisfies this interface I think in that case like I generally like this cuz I",
    "start": "679839",
    "end": "685320"
  },
  {
    "text": "feel like when you do have a function you just want to pass it in it's kind of annoying to have to wrap it in that like",
    "start": "685320",
    "end": "690360"
  },
  {
    "text": "oh H that Handler Funk here's my function just like adds a bit of verbosity when it's already kind of",
    "start": "690360",
    "end": "696519"
  },
  {
    "text": "obvious what it is I'm sure there's other use cases where it would would be used but from from that perspective it",
    "start": "696519",
    "end": "702360"
  },
  {
    "text": "feels like that is something good about the language it would cut down on verbosity because I feel like go is",
    "start": "702360",
    "end": "708440"
  },
  {
    "text": "often a lot about just cutting down on verbosity overall yeah well that's interesting",
    "start": "708440",
    "end": "715000"
  },
  {
    "text": "because to Daniel's Point makes quite an interesting point if somebody made an interface that was just a simp just",
    "start": "715000",
    "end": "721440"
  },
  {
    "text": "returned a string say that it was called I identifier and it had an ID string",
    "start": "721440",
    "end": "726880"
  },
  {
    "text": "method you could easily have um a function that returned a string and",
    "start": "726880",
    "end": "733440"
  },
  {
    "text": "passing that in I was just wondering about that case about accidentally implementing an interface but you're",
    "start": "733440",
    "end": "739440"
  },
  {
    "text": "passing a function into a thing so would you you really aware of what you're doing at that point aren't you in fact",
    "start": "739440",
    "end": "746199"
  },
  {
    "text": "you're probably making the function anonymously aren you so that you're doing it in line right",
    "start": "746199",
    "end": "751680"
  },
  {
    "text": "there so I feel like that you probably I can't imagine that becoming a problem I think in some cases but I think you",
    "start": "751680",
    "end": "757720"
  },
  {
    "text": "could also just have package level functions that you you want to use as an interface and I think as far as like",
    "start": "757720",
    "end": "764120"
  },
  {
    "text": "confusing interfaces or like accidentally implementing them I think the only one that I've consistently accidentally implemented is Stringer",
    "start": "764120",
    "end": "770560"
  },
  {
    "text": "which I just think is a is an issue with Stringer overall that we're probably never going to get away from of just",
    "start": "770560",
    "end": "775839"
  },
  {
    "text": "like oh yeah like this thing will always print out whatever this method puts out",
    "start": "775839",
    "end": "781639"
  },
  {
    "text": "if you like pass it into fumed any of the fumed functions because it implements Stringer but I've never",
    "start": "781639",
    "end": "787720"
  },
  {
    "text": "really had that issue with like any other interface of like just accidentally implementing it yeah I",
    "start": "787720",
    "end": "793399"
  },
  {
    "text": "think I'm probably the same I think yeah Johnny Boro what do you think about this",
    "start": "793399",
    "end": "799360"
  },
  {
    "text": "idea of having functions automatically kind of magically Implement an expected",
    "start": "799360",
    "end": "804720"
  },
  {
    "text": "interface I have a somewhat of an allergic reaction to Magic so yeah I",
    "start": "804720",
    "end": "809839"
  },
  {
    "text": "tend to prefer it's all the glitter gets in your nose do it I know yeah it just gets everywhere I start sneezing and",
    "start": "809839",
    "end": "815839"
  },
  {
    "text": "coughing and beautiful sneezes though fireworks yeah exactly exactly",
    "start": "815839",
    "end": "823000"
  },
  {
    "text": "but I mean I kind of see the intent behind it and it's one of those things",
    "start": "823000",
    "end": "828160"
  },
  {
    "text": "where it's sort of uh adding a layer that I'm not super like",
    "start": "828160",
    "end": "835040"
  },
  {
    "text": "well I don't want to say I'm uncomfortable with it I'm just it solves a problem I don't find myself having",
    "start": "835040",
    "end": "840120"
  },
  {
    "text": "very often I don't mind sort of that that explicitness so I don't know it's this one's I'm on offense about this one",
    "start": "840120",
    "end": "846839"
  },
  {
    "text": "I don't I don't think I'd be like pushing for it very hard that's just mine right no thumbs up on the GitHub",
    "start": "846839",
    "end": "853839"
  },
  {
    "text": "issue from you no no okay uh let's move on see if there any of these we can get",
    "start": "853839",
    "end": "859880"
  },
  {
    "text": "some love for um have you seen this one it's number it's issue",
    "start": "859880",
    "end": "866160"
  },
  {
    "text": "43557 and this is about function values as iterators so this is a way to let you",
    "start": "866160",
    "end": "873000"
  },
  {
    "text": "implement a type that will work with the range for Loop and it does it by having an inter method which returns a function",
    "start": "873000",
    "end": "881440"
  },
  {
    "text": "which will get the next item so you kind of relies on closures to to it keeps",
    "start": "881440",
    "end": "886519"
  },
  {
    "text": "keep the state and then you know obviously if it's on if it's a method that which it would be from a a type it",
    "start": "886519",
    "end": "892480"
  },
  {
    "text": "can use data from that type when kind of it's called so it can return like the",
    "start": "892480",
    "end": "898279"
  },
  {
    "text": "next item in the list or whatever it's doing how do you feel about this one I",
    "start": "898279",
    "end": "903440"
  },
  {
    "text": "feel like it's that's a carryover from other languages I've used this sort of pattern in in you know Java and stuff",
    "start": "903440",
    "end": "908839"
  },
  {
    "text": "like that um and it's fine again it's I I tend to be at fir my default STS with",
    "start": "908839",
    "end": "917120"
  },
  {
    "text": "sort of an improvements like this language tends to be sort of what is it that the language does now that this",
    "start": "917120",
    "end": "922560"
  },
  {
    "text": "could improve so this adds another way a different way of of sort of doing that your iteration and I don't have a need",
    "start": "922560",
    "end": "929560"
  },
  {
    "text": "for that again I don't want to be the kudin in the corner saying no to everything right but like to me like if",
    "start": "929560",
    "end": "934800"
  },
  {
    "text": "you're going to improve the language in some way like I don't want like half a dozen ways to do the same thing right",
    "start": "934800",
    "end": "940000"
  },
  {
    "text": "and go like the fact that go only has four for looping I mean to me that was like At first I was like wow really like",
    "start": "940000",
    "end": "946279"
  },
  {
    "text": "are aren't you gonna be missing some things and keywords some constructs whatever it is and then you sit down and",
    "start": "946279",
    "end": "951399"
  },
  {
    "text": "you start using it like oh okay I guess yeah I don't need much else I can do all",
    "start": "951399",
    "end": "956519"
  },
  {
    "text": "the things that I need um so to me this is another one of those well this doesn't add a new way to Loop over it",
    "start": "956519",
    "end": "963639"
  },
  {
    "text": "just means you can write types that work with the current four range thing right",
    "start": "963639",
    "end": "968959"
  },
  {
    "text": "I mean the way you have to do it at the moment is either you build your own API you write you have your own methods and",
    "start": "968959",
    "end": "975120"
  },
  {
    "text": "you just Implement your own iterator or you do something if it's small enough data you'll just like maybe create a SL",
    "start": "975120",
    "end": "981959"
  },
  {
    "text": "you have a method that creates a slice and then that slice can be easily ranged over by by the four block thing that's",
    "start": "981959",
    "end": "990440"
  },
  {
    "text": "right isn't it Daniel yeah thought I saw shaking your head in the in my periphery I was thinking that I've actually seen",
    "start": "990440",
    "end": "996279"
  },
  {
    "text": "some people use channels for this use case and that is avoiding the boiler played with next done and so on that",
    "start": "996279",
    "end": "1003040"
  },
  {
    "text": "kind of method interface and it kind of works but channels are also like the biggest foot gun in the entire go",
    "start": "1003040",
    "end": "1009759"
  },
  {
    "text": "language so I really don't like when people use channels for that and they also have their own inherent overhead",
    "start": "1009759",
    "end": "1015440"
  },
  {
    "text": "right so a channel is an allocation and it also means that there there has to be a different go routine on the other side",
    "start": "1015440",
    "end": "1020800"
  },
  {
    "text": "sending you stuff and how do you signal that you're done and that kind of thing so I'm kind of with Johnny on this that",
    "start": "1020800",
    "end": "1027079"
  },
  {
    "text": "I don't think this is a big enough problem to require a language feature but at the same time out of all the",
    "start": "1027079",
    "end": "1033280"
  },
  {
    "text": "solutions that I've seen to like Implement custom ranging I feel like this is the simplest and nicest I",
    "start": "1033280",
    "end": "1039678"
  },
  {
    "text": "wouldn't oppose it but yeah so you wouldn't thumbs down on the GitHub repo on the GitHub issue you see I'm with you",
    "start": "1039679",
    "end": "1046079"
  },
  {
    "text": "on that this of the Solutions this is probably my favorite because I like the I mean is a little",
    "start": "1046079",
    "end": "1053000"
  },
  {
    "text": "bit complicated because it's a it's a method that returns a function um and then you have to know about closures in",
    "start": "1053000",
    "end": "1059160"
  },
  {
    "text": "order to make that work properly but it is very neat to have all your iteration code in just one method and then the",
    "start": "1059160",
    "end": "1066120"
  },
  {
    "text": "fact that you're able to use it as a normal type is kind of quite nice the",
    "start": "1066120",
    "end": "1072480"
  },
  {
    "text": "only thing is is that hurts readability potentially because at the moment when you see a range block you know that that",
    "start": "1072480",
    "end": "1078480"
  },
  {
    "text": "is a a map or a slice or an array you know that isn't anything more and it's",
    "start": "1078480",
    "end": "1084200"
  },
  {
    "text": "not doing much more work is it whereas if you've got your own iterator implemented that could be doing",
    "start": "1084200",
    "end": "1090559"
  },
  {
    "text": "expensive things and that wouldn't be very clear straight from just looking at that code and you're also relying at that",
    "start": "1090559",
    "end": "1097320"
  },
  {
    "text": "point on sort of the convention right of of the the naming and and basically whenever you see that you're like oh",
    "start": "1097320",
    "end": "1102480"
  },
  {
    "text": "yeah the iterator pattern you're like okay it's like you have to kind of trust right obviously you can always go go take a look at the code hopefully um but",
    "start": "1102480",
    "end": "1109600"
  },
  {
    "text": "to me again the explicitness of of my iteration matters to me I guess um but I",
    "start": "1109600",
    "end": "1115840"
  },
  {
    "text": "mean this is nice I mean as as presented it is a nice idea I'm not going to you know be beat down on it um is it worth",
    "start": "1115840",
    "end": "1123960"
  },
  {
    "text": "the trade off for me uh this is another one where I'm like no I can't see it I think I I want to like this like I like",
    "start": "1123960",
    "end": "1130960"
  },
  {
    "text": "the idea but I think the big thing for me about it is that like slices and maps are like known quantities right we can",
    "start": "1130960",
    "end": "1137280"
  },
  {
    "text": "get the length we know how long they are with most other types of iterators you usually have some error that might",
    "start": "1137280",
    "end": "1143120"
  },
  {
    "text": "happen right if you're getting something from a database or you're getting something from somewhere else and there's not really anything in here",
    "start": "1143120",
    "end": "1150200"
  },
  {
    "text": "about how you would do error handling that's like one of the things I like about kind of the the iterator pattern",
    "start": "1150200",
    "end": "1156440"
  },
  {
    "text": "that I've fallen into a lot which looks a lot like I think like db. rose does this where you just have like a oh next",
    "start": "1156440",
    "end": "1162320"
  },
  {
    "text": "that returns a bull and then inside of it you can actually get the value and then you have an error afterward if the",
    "start": "1162320",
    "end": "1167919"
  },
  {
    "text": "bull returns false and then it it kind of has this like neatly packaged way of handling",
    "start": "1167919",
    "end": "1173600"
  },
  {
    "text": "iteration um cuz yeah I I just think like this would definitely I think get abused in some ways and lead to people",
    "start": "1173600",
    "end": "1179880"
  },
  {
    "text": "just not recognizing that they need to handle errors um or like call another method to get the error when they get",
    "start": "1179880",
    "end": "1186280"
  },
  {
    "text": "false back so I think this is like it adds a little bit of nicity but I think it would become like a giant foot gun",
    "start": "1186280",
    "end": "1192559"
  },
  {
    "text": "for API uh designers very interesting cool one thing I want to come back to to Daniel",
    "start": "1192559",
    "end": "1199000"
  },
  {
    "text": "is that you said that um channels are a foot gun I'm I'm considering that an unpopular opinion but we'll swing back",
    "start": "1199000",
    "end": "1205520"
  },
  {
    "text": "to that one later just making a mental note a verbal mental note sounded like a",
    "start": "1205520",
    "end": "1212039"
  },
  {
    "text": "a verbal mental threat just a note and I was about to",
    "start": "1212039",
    "end": "1217240"
  },
  {
    "text": "also bring up something about you know ranges being simple nowadays because they're not really you can range over a",
    "start": "1217240",
    "end": "1223400"
  },
  {
    "text": "channel and that could block forever basically or you could range over for example a SCE where each element takes a",
    "start": "1223400",
    "end": "1229840"
  },
  {
    "text": "gigabyte in memory and then you have to copy that in every iteration and that could take a long time right so I think",
    "start": "1229840",
    "end": "1235159"
  },
  {
    "text": "range is already kind of confusing this would maybe make them more confusing but it's not binary like suddenly they",
    "start": "1235159",
    "end": "1240919"
  },
  {
    "text": "become [Music]",
    "start": "1240919",
    "end": "1247249"
  },
  {
    "text": "bad hey Gophers this episode is brought to you by our friends at launch Darkly feature management for the modern",
    "start": "1248039",
    "end": "1254400"
  },
  {
    "text": "Enterprise power experimentation in production here's how it works Works launch Darkly enables development and",
    "start": "1254400",
    "end": "1260600"
  },
  {
    "text": "operation teams to deploy code at any time even if a feature isn't ready to be released to users wrapping code with",
    "start": "1260600",
    "end": "1267080"
  },
  {
    "text": "feature Flags gives you the safety to test new features and infrastructure in your production environments without",
    "start": "1267080",
    "end": "1273240"
  },
  {
    "text": "impacting the wrong and users when you're ready to release more Wy simply update the feature flag and the changes",
    "start": "1273240",
    "end": "1279799"
  },
  {
    "text": "are made instantaneously by the real-time streaming architecture eliminate risk deliver value get started",
    "start": "1279799",
    "end": "1285520"
  },
  {
    "text": "for free today at launch dark.com again again launch dark.com",
    "start": "1285520",
    "end": "1291320"
  },
  {
    "text": "[Music]",
    "start": "1293310",
    "end": "1296339"
  },
  {
    "text": "[Music]",
    "start": "1299190",
    "end": "1305960"
  },
  {
    "text": "it's time to move on to the next proposal Daniel do you want to tell us about this next one yeah so this next",
    "start": "1305960",
    "end": "1312279"
  },
  {
    "text": "one is pretty easy to understand I think it's essentially type inference for when you use make a new so so you can use",
    "start": "1312279",
    "end": "1319240"
  },
  {
    "text": "make or new to for example make to create a new map with some capacity or",
    "start": "1319240",
    "end": "1324400"
  },
  {
    "text": "new to allocate a pointer to an INT um or a Boolean or whatever you want and",
    "start": "1324400",
    "end": "1330080"
  },
  {
    "text": "that is fine but quite a lot of the times when you use make or new you're assigning that to something that already",
    "start": "1330080",
    "end": "1335360"
  },
  {
    "text": "has a type like a field like a struct field so in those cases you have to repeat the type or even worse you have",
    "start": "1335360",
    "end": "1341320"
  },
  {
    "text": "to like remember what the type was to then copy and paste it or write it again manually so this is a small language",
    "start": "1341320",
    "end": "1346880"
  },
  {
    "text": "change to say only with within those two built-in functions infer the type if for",
    "start": "1346880",
    "end": "1352600"
  },
  {
    "text": "example it's missing that that would be like NE syntax and this is number",
    "start": "1352600",
    "end": "1357880"
  },
  {
    "text": "34515 in the GitHub issues in the the go repo if you want to follow along at home",
    "start": "1357880",
    "end": "1363559"
  },
  {
    "text": "okay what do we think about this one then Chris have we got any thoughts I like it um I'm kind of thinking about",
    "start": "1363559",
    "end": "1369520"
  },
  {
    "text": "like when I write uh like test code I sometimes like to have like lots of anonymous structs and Anonymous things",
    "start": "1369520",
    "end": "1377440"
  },
  {
    "text": "and and it' be a little bit easier to make a map if it already has the type there and it cut down on the code a little bit I don't know how I feel about",
    "start": "1377440",
    "end": "1384080"
  },
  {
    "text": "the kind of empty or how whatever the syntax we come up with like just having something be like make I think I'd take",
    "start": "1384080",
    "end": "1390559"
  },
  {
    "text": "a while for me to get used to that since I'm so used to like seeing a type in there but I think overall it could be a",
    "start": "1390559",
    "end": "1396679"
  },
  {
    "text": "benefit to the language and make things a little bit less verbose and obvious situations so overall I think I'm like a",
    "start": "1396679",
    "end": "1403120"
  },
  {
    "text": "general thumbs up uh but cautious yeah General thumbs up Lance Taylor actually",
    "start": "1403120",
    "end": "1409760"
  },
  {
    "text": "recommended using the three dots again inside the make to indicate like infer the type because it's the same that's",
    "start": "1409760",
    "end": "1416120"
  },
  {
    "text": "what we mean in inside well for like lengths of arrays and also if we're",
    "start": "1416120",
    "end": "1421240"
  },
  {
    "text": "doing other times I can't remember so yeah I'm with you actually I quite like this one too I feel like you don't get",
    "start": "1421240",
    "end": "1428640"
  },
  {
    "text": "really any benefit from repeating it I suppose and so maybe that's the argument",
    "start": "1428640",
    "end": "1435039"
  },
  {
    "text": "though would there be a benefit if they're SE separated those two types would you lose something would you have",
    "start": "1435039",
    "end": "1441760"
  },
  {
    "text": "to then go back to the type I like that one of the one so far this was probably my favorite one I could see using it uh",
    "start": "1441760",
    "end": "1448880"
  },
  {
    "text": "the what we settle on in terms of how do to indicate like hey go you know we've already specified the type go figure it",
    "start": "1448880",
    "end": "1454279"
  },
  {
    "text": "out whether it's a three dot or the original post was uh proposing a type of",
    "start": "1454279",
    "end": "1459360"
  },
  {
    "text": "keyword which would definitely get abused everywhere um but um um but uh",
    "start": "1459360",
    "end": "1465159"
  },
  {
    "text": "yeah I can definitely see that because you you've already specified the information I mean the language can infer the type um so it's it's like",
    "start": "1465159",
    "end": "1471919"
  },
  {
    "text": "saving a few key strokes I mean of of the bunch withing so far this is probably the one I could",
    "start": "1471919",
    "end": "1477640"
  },
  {
    "text": "see using um you know like to borrow Chris's opinion they would take me a",
    "start": "1477640",
    "end": "1482679"
  },
  {
    "text": "little bit of getting used to um because I'm not used to I'm always used to specifying my types but I don't know I",
    "start": "1482679",
    "end": "1488080"
  },
  {
    "text": "could see myself like you know getting used to it yeah I think like is said in the proposal making new more kind of",
    "start": "1488080",
    "end": "1493960"
  },
  {
    "text": "weird functions anyway since they take like a type name whereas most other things in the language don't take type",
    "start": "1493960",
    "end": "1500120"
  },
  {
    "text": "name so they're already a bit like different and weird yeah why are they different why couldn't that be one",
    "start": "1500120",
    "end": "1505760"
  },
  {
    "text": "keyword yeah and I was actually going to go in that direction I find make new to",
    "start": "1505760",
    "end": "1510799"
  },
  {
    "text": "be too special and this would make them further special um like for example if",
    "start": "1510799",
    "end": "1516360"
  },
  {
    "text": "people wouldn't currently have composite literals for like Maps or something else they might switch them over to use make",
    "start": "1516360",
    "end": "1522720"
  },
  {
    "text": "just so that they could get type inference and I find that kind of weird so I would rather",
    "start": "1522720",
    "end": "1528480"
  },
  {
    "text": "almost see make a new gone and well make wouldn't be gone for good because it it",
    "start": "1528480",
    "end": "1535120"
  },
  {
    "text": "can still useful to for example specify the capacity and that kind of thing but in most cases you don't need to specify you just want to create a new thing um",
    "start": "1535120",
    "end": "1543000"
  },
  {
    "text": "so I would rather see Compass of literals become more powerful are Auto kind of instantiating maps such a big",
    "start": "1543000",
    "end": "1550600"
  },
  {
    "text": "problem I mean I love how the append key built-in function will make make the",
    "start": "1550600",
    "end": "1558399"
  },
  {
    "text": "slice if it's not already there if it's nil or if it's you know you've just declared it then it will make it when",
    "start": "1558399",
    "end": "1564520"
  },
  {
    "text": "you put the first item in it will set things up could we not also have maps that behave that way or is it just that",
    "start": "1564520",
    "end": "1571200"
  },
  {
    "text": "way because it's sort of would be magic would be too magic if you had that though anytime you want to assign to a",
    "start": "1571200",
    "end": "1576799"
  },
  {
    "text": "map you'd have to like call a built-in function and reassign to the map which would be I I guess it would be worse I",
    "start": "1576799",
    "end": "1582600"
  },
  {
    "text": "don't know well I mean it could be yes but I was thinking it the the the language would stay the same but it",
    "start": "1582600",
    "end": "1589240"
  },
  {
    "text": "would work you'd be able to just like I mean that as a core principle not as a change I suppose also like the compiler",
    "start": "1589240",
    "end": "1595760"
  },
  {
    "text": "would be like oh this is a nail map I'm going to instantiate it for you and then add this value or or whatever yeah",
    "start": "1595760",
    "end": "1603840"
  },
  {
    "text": "because that's really the experience we get with a pend um but that's not this",
    "start": "1603840",
    "end": "1608919"
  },
  {
    "text": "proposal by the way um but I was just saying I always thought would have been all right I definitely agree with Daniel",
    "start": "1608919",
    "end": "1616240"
  },
  {
    "text": "though on like how make a new are kind of weird um especially when you're first learning the language and you're like oh",
    "start": "1616240",
    "end": "1622320"
  },
  {
    "text": "I want to make a map or I want to make a a slice and you think like oh I use new I'm going to make new other things so I",
    "start": "1622320",
    "end": "1629000"
  },
  {
    "text": "should make new here and it's like no new is not what you want at all when you make a map or a slice and I think that's",
    "start": "1629000",
    "end": "1636000"
  },
  {
    "text": "like something that trips people up a lot and you just like kind of got to get used to it so yeah I think like uh if",
    "start": "1636000",
    "end": "1641279"
  },
  {
    "text": "there was a way to like reduce down what you used make a new forh I think that",
    "start": "1641279",
    "end": "1646880"
  },
  {
    "text": "would be good yeah a lot of the time it's just better to just like man like do the kind of instantiation without",
    "start": "1646880",
    "end": "1653360"
  },
  {
    "text": "using the the builtins unless unless you really do want to have that that capacity uh or",
    "start": "1653360",
    "end": "1659039"
  },
  {
    "text": "you want to specify the the length and don't want to type a bunch of empty values in a slice or something like that",
    "start": "1659039",
    "end": "1665000"
  },
  {
    "text": "it is awkward explaining you to a go beginner when to use it when not to use it um you know also like usually the",
    "start": "1665000",
    "end": "1672000"
  },
  {
    "text": "conversation well is that like a con Constructor kind of thing like can I can I use it to like initialize a new thing",
    "start": "1672000",
    "end": "1679159"
  },
  {
    "text": "and and how does that work and I can only use make in certain cases like with channels and other it's it becomes very",
    "start": "1679159",
    "end": "1686360"
  },
  {
    "text": "sort of confusing but I don't think that's a bad thing honestly I think that's just go you once you learn how go",
    "start": "1686360",
    "end": "1693000"
  },
  {
    "text": "works you kind of get over those minor issues I call them minor but again I'm",
    "start": "1693000",
    "end": "1698559"
  },
  {
    "text": "speaking for somebody who's been doing this for a little while so my opinion is going to be very different from somebody who's approaching and I'll admit that",
    "start": "1698559",
    "end": "1704320"
  },
  {
    "text": "you know like it's it's the curse of those who are experienced right you know see the problems beginners have and and I totally you know own up to",
    "start": "1704320",
    "end": "1712080"
  },
  {
    "text": "that yeah I think that's fine I like the curly brace to create new things because",
    "start": "1712080",
    "end": "1717600"
  },
  {
    "text": "it's the same for maps and slices and structs and stuff so you get to be you can yourself choose to just do it one",
    "start": "1717600",
    "end": "1724919"
  },
  {
    "text": "way and so I actually be happy with just that way I think we should just only have that except basic",
    "start": "1724919",
    "end": "1731760"
  },
  {
    "text": "types right yes for well also zero value types I think are also quite nice so the",
    "start": "1731760",
    "end": "1738559"
  },
  {
    "text": "fact that that works I think is you know it's kind of good you you can call methods on nil types and it isn't always",
    "start": "1738559",
    "end": "1746480"
  },
  {
    "text": "a disaster anything else on this then we shall move forward sorry if that was too",
    "start": "1746480",
    "end": "1754000"
  },
  {
    "text": "loud J's gonna have words with you yeah someone's got a mouse wheel because I've",
    "start": "1754000",
    "end": "1759440"
  },
  {
    "text": "been listening you've done about six miles so far calling anyone out someone's got a mouse wheel is what I'm",
    "start": "1759440",
    "end": "1765720"
  },
  {
    "text": "saying you wheel it's a wheel on a mouse it doesn't matter I'm just saying I can hear a",
    "start": "1765720",
    "end": "1771320"
  },
  {
    "text": "mouse wheel going it's been about six miles been keeping track of my Apple watch so okay the next proposal then is",
    "start": "1771320",
    "end": "1781640"
  },
  {
    "text": "called lazy values T what's this one so this is proposal",
    "start": "1781640",
    "end": "1788080"
  },
  {
    "text": "number 37739 if anybody wants to check it out and it's essentially trying to solve the",
    "start": "1788080",
    "end": "1795120"
  },
  {
    "text": "problem that for example if you've got some for both logging lines and you are",
    "start": "1795120",
    "end": "1801080"
  },
  {
    "text": "logging some things that might be expensive to calculate to evaluate such as you know I give me the string of",
    "start": "1801080",
    "end": "1807960"
  },
  {
    "text": "something or give me the length of some very large decentralized data structure",
    "start": "1807960",
    "end": "1813240"
  },
  {
    "text": "or something like that and the thing is yes the log verbose function can do",
    "start": "1813240",
    "end": "1818679"
  },
  {
    "text": "nothing if the verbose blogging is not enabled but those parameters those arguments have to be calculated anyway",
    "start": "1818679",
    "end": "1825320"
  },
  {
    "text": "because it's still a function call and you can wrap the whole function call in an if statement but that's very verbose",
    "start": "1825320",
    "end": "1832559"
  },
  {
    "text": "in itself so what this proposal says is essentially what if we have a sort of",
    "start": "1832559",
    "end": "1837640"
  },
  {
    "text": "generic interface that has a method called evl to evaluate into some type T",
    "start": "1837640",
    "end": "1844279"
  },
  {
    "text": "and then when you pass that onto a function which is designed to take lazy",
    "start": "1844279",
    "end": "1849600"
  },
  {
    "text": "values then it's going to evaluate that lazy value as it needs it but not otherwise yeah so essentially then you",
    "start": "1849600",
    "end": "1856799"
  },
  {
    "text": "can pass functions into other functions and and and other types and only be called when they're used inside that",
    "start": "1856799",
    "end": "1863799"
  },
  {
    "text": "function body is that right yeah pretty much and you could do this today with like interface types or functions",
    "start": "1863799",
    "end": "1870159"
  },
  {
    "text": "passing functions uh but I think this is more about making it more of a proper",
    "start": "1870159",
    "end": "1875279"
  },
  {
    "text": "language feature that people should be using for this kind of thing yes well often lazy loading is a",
    "start": "1875279",
    "end": "1883880"
  },
  {
    "text": "good thing to do in code for for various reasons Chris how do you feel about it being an actual language feature I guess",
    "start": "1883880",
    "end": "1890679"
  },
  {
    "text": "I'm kind of on the fence with it I I can see where and how it would be useful I think my only concern would be like",
    "start": "1890679",
    "end": "1897360"
  },
  {
    "text": "getting the API right and then also or I guess I have two concerns on I think also how it can be abused and helping to",
    "start": "1897360",
    "end": "1905200"
  },
  {
    "text": "make sure that it's not abused to like kind of make egregious go code I think",
    "start": "1905200",
    "end": "1911039"
  },
  {
    "text": "like channels always come to my mind when I think about that of how people just like really abuse channels in bad",
    "start": "1911039",
    "end": "1916399"
  },
  {
    "text": "ways just because they're there and channels are a feature of the language I could see people perhaps being like Oh",
    "start": "1916399",
    "end": "1922159"
  },
  {
    "text": "we have this like lazy evaluation I know how lazy evaluation Works in language X so I'm just going to do what I do in",
    "start": "1922159",
    "end": "1927880"
  },
  {
    "text": "language X even if there's like a more idiomatic goway to do it that has either better performance or more clarity or",
    "start": "1927880",
    "end": "1934559"
  },
  {
    "text": "whatnot but I think if we can as a community figure out how to like convey this is the kind of things you should be",
    "start": "1934559",
    "end": "1940760"
  },
  {
    "text": "using lazy for um and lazy valuation for then I I think it could be a very useful feature and why range of software yeah",
    "start": "1940760",
    "end": "1948960"
  },
  {
    "text": "you see I I've implemented almost this but by using functions so the idea is",
    "start": "1948960",
    "end": "1954519"
  },
  {
    "text": "you've got some kind of loader and you just pass in the function and it it works because it can also be the method",
    "start": "1954519",
    "end": "1961279"
  },
  {
    "text": "of a type as well you know so you can even have it in as kind of services or",
    "start": "1961279",
    "end": "1966320"
  },
  {
    "text": "other higher level kind of object um design situations as well and so it's",
    "start": "1966320",
    "end": "1972519"
  },
  {
    "text": "nice you pass the function in and internally depending on when you call it if if you even do you know it only gets",
    "start": "1972519",
    "end": "1979159"
  },
  {
    "text": "called at that point the nice thing about doing it explicitly is uh you get to choose like uh arguments and things",
    "start": "1979159",
    "end": "1986399"
  },
  {
    "text": "like this whereas this proposal where it seems like almost it looks a bit like",
    "start": "1986399",
    "end": "1992080"
  },
  {
    "text": "defer how you're calling that method immediately but I guess it again it's",
    "start": "1992080",
    "end": "1997159"
  },
  {
    "text": "kind of tradeoffs and things Johnny did you have a chance to look at this one this is the uh functions lazy values",
    "start": "1997159",
    "end": "2005679"
  },
  {
    "text": "yeah I didn't have enough time to sort of a form an opinion of it on its face it looks like an interesting idea I just",
    "start": "2005679",
    "end": "2011840"
  },
  {
    "text": "don't have an opinion on it fair enough somebody also left a contra proposal in somewhere in the comments essentially",
    "start": "2011840",
    "end": "2018399"
  },
  {
    "text": "saying if we made Anonymous functions less for Bose to write and use then",
    "start": "2018399",
    "end": "2023799"
  },
  {
    "text": "people would do what Matt said of using function parameters more often and I I think I agree with",
    "start": "2023799",
    "end": "2030159"
  },
  {
    "text": "that yeah those function parameters are definitely worth a look I would say okay",
    "start": "2030159",
    "end": "2036120"
  },
  {
    "text": "that's an interesting one it's funny you know seeing these proposals they're sort of um a lot of",
    "start": "2036120",
    "end": "2041720"
  },
  {
    "text": "them so far are solving real code problems that we've lived with for a while so it's interesting to see the",
    "start": "2041720",
    "end": "2048679"
  },
  {
    "text": "different kind of points the life in a language because of course there've been language proposals all along but these",
    "start": "2048679",
    "end": "2055520"
  },
  {
    "text": "are interesting to see some of the level of these shall we talk about inss does",
    "start": "2055520",
    "end": "2061480"
  },
  {
    "text": "anyone who uses inss in your programming",
    "start": "2061480",
    "end": "2066599"
  },
  {
    "text": "life SL 64 you only no matter what it is yeah",
    "start": "2066599",
    "end": "2072320"
  },
  {
    "text": "cuz you're always on point or something nicely done something the",
    "start": "2072320",
    "end": "2078919"
  },
  {
    "text": "first good joke you've made today [Laughter] Matt just",
    "start": "2078919",
    "end": "2085320"
  },
  {
    "text": "today yeah that's a compliment oh it's a pylon Daniel it's your turn oh no I was going to say a joke",
    "start": "2085320",
    "end": "2092638"
  },
  {
    "text": "about badman and you know not a number oh yeah thank you for taking the heat",
    "start": "2092639",
    "end": "2099240"
  },
  {
    "text": "off me and placing it rightly onto Batman and and that not a number thing",
    "start": "2099240",
    "end": "2104480"
  },
  {
    "text": "in Java they both deserve our they both deserve our our okay let's talk about",
    "start": "2104480",
    "end": "2111280"
  },
  {
    "text": "inss um there's a proposal to change an INT to be arbitrary Precision which when",
    "start": "2111280",
    "end": "2117640"
  },
  {
    "text": "when you think about that this is number 19623 that as a headline doesn't make",
    "start": "2117640",
    "end": "2123200"
  },
  {
    "text": "much sense but Daniel perhaps you could explain this one to yeah so to recap uh go has for example",
    "start": "2123200",
    "end": "2130119"
  },
  {
    "text": "in32 and in 64 which are fix size so for example in in 32 you've got 32 bits when",
    "start": "2130119",
    "end": "2136280"
  },
  {
    "text": "you get to the maximum value which is 2 to the^ of 31 or whatever it is uh if",
    "start": "2136280",
    "end": "2142800"
  },
  {
    "text": "you go past that then it overflows and it goes to this lowest negative value right so it wraps around yeah yeah like",
    "start": "2142800",
    "end": "2151200"
  },
  {
    "text": "Pac-Man I think it's called that if not it should be go on I'm just make trying",
    "start": "2151200",
    "end": "2156240"
  },
  {
    "text": "to make it clear for all levels all abilities yeah so essentially you don't",
    "start": "2156240",
    "end": "2162160"
  },
  {
    "text": "have protection against that kind of error where essential loops around it goes back to the bottom and then there's",
    "start": "2162160",
    "end": "2167920"
  },
  {
    "text": "int which doesn't have a fixed size so when 64-bit computers like most laptops and desktops these days it's 64 bits but",
    "start": "2167920",
    "end": "2175800"
  },
  {
    "text": "on for example small routers which might still be 32 bits uh it's going to be 32 bits and this causes some bugs in real",
    "start": "2175800",
    "end": "2183319"
  },
  {
    "text": "programs because for example people might only test on 64-bit machines and then their code might actually break on",
    "start": "2183319",
    "end": "2189000"
  },
  {
    "text": "32- bit machines with like regular workloads so this proposal is essentially to say no the int type",
    "start": "2189000",
    "end": "2195440"
  },
  {
    "text": "without a size never wraps around it's essentially infinitely sized and then it's up to the compiler to generate good",
    "start": "2195440",
    "end": "2202119"
  },
  {
    "text": "code to implement that so would you be able to go beyond in 64 with this",
    "start": "2202119",
    "end": "2207280"
  },
  {
    "text": "proposal as well yeah getting more interesting although I've never needed",
    "start": "2207280",
    "end": "2213920"
  },
  {
    "text": "numbers that big but still I want them it would be kind of like I'm not I'm not",
    "start": "2213920",
    "end": "2219200"
  },
  {
    "text": "sure if many of you have seen the package math SLB but it has a big do INT in there and that is arbitrary size uh",
    "start": "2219200",
    "end": "2225160"
  },
  {
    "text": "so you can store whatever number you want in there so this is kind of like that but in the language that is a big",
    "start": "2225160",
    "end": "2230680"
  },
  {
    "text": "in you can get some really big in in that type I keep try trying to squeeze that",
    "start": "2230680",
    "end": "2237800"
  },
  {
    "text": "one in it's massive you can't it's a big int",
    "start": "2237800",
    "end": "2243520"
  },
  {
    "text": "um what's the biggest int you've ever used Chris be",
    "start": "2243520",
    "end": "2248680"
  },
  {
    "text": "honest have you ever gone beyond int 32 I have written things that that use",
    "start": "2248680",
    "end": "2254240"
  },
  {
    "text": "in 64 need to use N64 for various reasons I do really like I like this",
    "start": "2254240",
    "end": "2259960"
  },
  {
    "text": "proposal like I'd like it if we did have more arbitrary Precision things in the language itself like the the math. big",
    "start": "2259960",
    "end": "2266760"
  },
  {
    "text": "package is is a little difficult to use um and I think there's some interesting opportunities for having kind of good",
    "start": "2266760",
    "end": "2273240"
  },
  {
    "text": "arbitrary arithmetic built into the language right like adding arbitrarily big integers together which I assume",
    "start": "2273240",
    "end": "2280319"
  },
  {
    "text": "that would come with this if this proposal was accepted I think the only maybe strange thing about this is if you",
    "start": "2280319",
    "end": "2287359"
  },
  {
    "text": "were doing any bit shifting or using like an INT as a bit mask but you probably shouldn't have been doing that",
    "start": "2287359",
    "end": "2293800"
  },
  {
    "text": "so that's that's probably not an issue but in general I like I like this uh I feel like the int type right now is kind",
    "start": "2293800",
    "end": "2301359"
  },
  {
    "text": "of in this like useless space cuz it's like you can't really guarantee how",
    "start": "2301359",
    "end": "2306839"
  },
  {
    "text": "large it's going to be if you're writing code that is crossplatform so I think that kind of forces you to to default to",
    "start": "2306839",
    "end": "2314200"
  },
  {
    "text": "using like an int64 and in32 or a u64 and a u32 but I also think that it's",
    "start": "2314200",
    "end": "2320400"
  },
  {
    "text": "good for the kind of like if you trying to specify length or like kind of what Rob lays out in in this proposal I think",
    "start": "2320400",
    "end": "2327000"
  },
  {
    "text": "that's good to know that like you you won't overflow or you won't have that type of issue when it comes to",
    "start": "2327000",
    "end": "2332880"
  },
  {
    "text": "specifying something or you won't you know have the issue of it being only 32 bits and you have a really large thing",
    "start": "2332880",
    "end": "2339800"
  },
  {
    "text": "and now You' run into this problem where your code just like isn't working and failing in a weird way yeah but what",
    "start": "2339800",
    "end": "2345319"
  },
  {
    "text": "about the implications at runtime of this does this mean ins would be slower",
    "start": "2345319",
    "end": "2350480"
  },
  {
    "text": "because there surely has to be some runtime element checking to see the size before you cross the threshold into",
    "start": "2350480",
    "end": "2356040"
  },
  {
    "text": "needing bigger and bigger inss yeah and I think that's where people sort of hand",
    "start": "2356040",
    "end": "2361960"
  },
  {
    "text": "wave their hands a little bit and say that modern computers are good enough at this stuff on one hand the compiler can",
    "start": "2361960",
    "end": "2367720"
  },
  {
    "text": "be smart enough to in some cases realize that it doesn't need to check if something will will overflow for example",
    "start": "2367720",
    "end": "2373599"
  },
  {
    "text": "if you use an integer to range over a slice uh a slice is never going to be",
    "start": "2373599",
    "end": "2378680"
  },
  {
    "text": "too big to not fit in memory so that's fine and another case is um if you",
    "start": "2378680",
    "end": "2384280"
  },
  {
    "text": "cannot statically know that for sure you can also say that modern CPUs are good enough at predicting branches and say oh",
    "start": "2384280",
    "end": "2391680"
  },
  {
    "text": "you know this is basically never going to happen in practice so the CPU is essentially not going to be any slower at executing this code but those are the",
    "start": "2391680",
    "end": "2398359"
  },
  {
    "text": "kind of things where you would have to like actually experiment with this implementation and see yeah good points",
    "start": "2398359",
    "end": "2404599"
  },
  {
    "text": "anyone else want to say anything else about this one I like the idea of just massive",
    "start": "2404599",
    "end": "2410640"
  },
  {
    "text": "ins just generally yeah like I don't you need it I don't need it but it's like",
    "start": "2410640",
    "end": "2416280"
  },
  {
    "text": "when I whenever I buy a laptop I always get the most Ram I can get and honestly",
    "start": "2416280",
    "end": "2422200"
  },
  {
    "text": "I I just I've try and find reasons now to use up Ram like if if you've got any data you want me to store for you just",
    "start": "2422200",
    "end": "2428680"
  },
  {
    "text": "let me know send it over I've got loads of ram going to waste I I do Wonder as",
    "start": "2428680",
    "end": "2434000"
  },
  {
    "text": "well if there's like maybe a a corollary proposal and probably already exists to have like a float type in the language",
    "start": "2434000",
    "end": "2440520"
  },
  {
    "text": "that is arbitrary Precision so I feel like that could be useful for like perhaps Financial applications where you",
    "start": "2440520",
    "end": "2446319"
  },
  {
    "text": "really need that arbitrary position like you or arbitrary prision you can't like use a float 64 for money like please",
    "start": "2446319",
    "end": "2452079"
  },
  {
    "text": "don't use a float 64 for money that's a bad idea um and it's it's one of those things where",
    "start": "2452079",
    "end": "2457920"
  },
  {
    "text": "I always like when I go to use a float I'm always like oh yeah float and I'm like oh no it has to be float 32 or 64",
    "start": "2457920",
    "end": "2463480"
  },
  {
    "text": "like I have to specify it um so I feel like adding that type there could also be useful if we're already going to add",
    "start": "2463480",
    "end": "2470760"
  },
  {
    "text": "like or change how int works and how U Works does everybody know why we don't have that I mean we have it for ants why",
    "start": "2470760",
    "end": "2477079"
  },
  {
    "text": "don't we have a just a float I don't know I think it's a carryover from c h",
    "start": "2477079",
    "end": "2483000"
  },
  {
    "text": "okay because C does have an end type uh which is essentially just the machine",
    "start": "2483000",
    "end": "2488240"
  },
  {
    "text": "size int but it doesn't have the same for float it only has you know single and double Precision let go yeah cuz it",
    "start": "2488240",
    "end": "2494160"
  },
  {
    "text": "in just a bit of memory in it it's just like one bit of memory not a",
    "start": "2494160",
    "end": "2499480"
  },
  {
    "text": "bit but the machine's 32bit so that's what it can move around fastest for",
    "start": "2499480",
    "end": "2505520"
  },
  {
    "text": "those who going going to be listening to the show we're all making a face at Matt right now shaking our heads you know",
    "start": "2505520",
    "end": "2512400"
  },
  {
    "text": "yeah but they've already paid for my computer science course so shut up uh but no well I'm just saying like yeah",
    "start": "2512400",
    "end": "2518760"
  },
  {
    "text": "it's that reason what Daniel said and I feel like my overall stance on this is that I like the next proposal better",
    "start": "2518760",
    "end": "2524400"
  },
  {
    "text": "which kind of aims at the same problem so maybe we should talk about that",
    "start": "2524400",
    "end": "2529760"
  },
  {
    "text": "one this episode is brought to you by our friends at equinex metal globally interconnected fully automated bare",
    "start": "2537240",
    "end": "2543800"
  },
  {
    "text": "metal equinex metal gives you Hardware your fingertips with physical infrastructure at software speed",
    "start": "2543800",
    "end": "2549480"
  },
  {
    "text": "accelerate your workloads with fully automated bare metal that's secure powerful and cost effective this is the",
    "start": "2549480",
    "end": "2555960"
  },
  {
    "text": "promise of the cloud delivered on bare metal equinex metal makes it easier than ever to take advantage of the unmatched",
    "start": "2555960",
    "end": "2562359"
  },
  {
    "text": "Global reach and connectivity ecosystem made possible by equinex which includes more than 220 data centers across 63",
    "start": "2562359",
    "end": "2569119"
  },
  {
    "text": "metros making interconnection easy and they're obsessed with making bare metal even more awesome seriously check out",
    "start": "2569119",
    "end": "2575520"
  },
  {
    "text": "these features 60-second deploys hourly pricing a customer success team that",
    "start": "2575520",
    "end": "2580559"
  },
  {
    "text": "engages over slack x86 Intel AMD and arm single tenant mvme and ssse storage",
    "start": "2580559",
    "end": "2588000"
  },
  {
    "text": "restful API first class devops Integrations equinex fabric integration",
    "start": "2588000",
    "end": "2593440"
  },
  {
    "text": "support for Enterprise os's and open source Linux os's air gapped installs without a public IP no installed agent",
    "start": "2593440",
    "end": "2600440"
  },
  {
    "text": "or Keys extensive open- Source love and support plus so much more visit info.",
    "start": "2600440",
    "end": "2606160"
  },
  {
    "text": "equinex metal.com changw get $500 in free credit to play with plus a rad t-shirt again info.in xm.com change",
    "start": "2606160",
    "end": "2616160"
  },
  {
    "text": "[Music]",
    "start": "2616160",
    "end": "2622099"
  },
  {
    "text": "[Music] log",
    "start": "2632320",
    "end": "2638079"
  },
  {
    "text": "so the next one is talks about having new types that are stricter right so that you have as as well as like an INT",
    "start": "2638720",
    "end": "2645760"
  },
  {
    "text": "you'd have an o in which is a kind of overflow int or overflow protected I",
    "start": "2645760",
    "end": "2651119"
  },
  {
    "text": "guess or and it would Panic if it over if it was to overflow right so instead of just wrapping around like Pac-Man it",
    "start": "2651119",
    "end": "2658640"
  },
  {
    "text": "would be like if Pac-Man went off the screen and never came back right pretty",
    "start": "2658640",
    "end": "2664599"
  },
  {
    "text": "much and this's is issue 30613 if anybody wants to check it out yes so are",
    "start": "2664599",
    "end": "2670119"
  },
  {
    "text": "there people that struggle with numbers and them overflowing a lot are there",
    "start": "2670119",
    "end": "2675720"
  },
  {
    "text": "particular people that kind of programmers that struggle with this cuz I've never come across it so I'm going",
    "start": "2675720",
    "end": "2682880"
  },
  {
    "text": "to bring up one case that's quite common with this kind of issue overflows and underflows that is and it's when you",
    "start": "2682880",
    "end": "2688440"
  },
  {
    "text": "implement codecs or things that have to encode or decode images video audio that",
    "start": "2688440",
    "end": "2693559"
  },
  {
    "text": "kind of thing because you can quite easily like if you just write the code and you're not thinking about overflows",
    "start": "2693559",
    "end": "2698960"
  },
  {
    "text": "and underflows you're thinking about you know inputs that might be like 1 kiloby in size but what if somebody feeds you",
    "start": "2698960",
    "end": "2705079"
  },
  {
    "text": "like really really large data or something that you didn't expect and then suddenly one little Loop that",
    "start": "2705079",
    "end": "2711160"
  },
  {
    "text": "looked very honest and fine it turn of Loops forever but because it's overflowing and it's just looping and",
    "start": "2711160",
    "end": "2716319"
  },
  {
    "text": "looping forever and then suddenly your CPU is stuck yeah why don't you just put it all",
    "start": "2716319",
    "end": "2722079"
  },
  {
    "text": "into a big in um okay don't do that in idea um I",
    "start": "2722079",
    "end": "2727800"
  },
  {
    "text": "won't teach computer science don't worry um how do we feel about this then I mean I feel like you know adding a new type",
    "start": "2727800",
    "end": "2735040"
  },
  {
    "text": "like this definitely makes sense because completely backwards compatible um anyone else have any",
    "start": "2735040",
    "end": "2741680"
  },
  {
    "text": "strong feelings either way I I feel like this is uh like this would be a good addition especially for like the smaller",
    "start": "2741680",
    "end": "2748040"
  },
  {
    "text": "ones like I know I've sometimes written code that needs to check for overflows",
    "start": "2748040",
    "end": "2754000"
  },
  {
    "text": "uh and it's it's a bit annoying uh it has a bit of verbosity and it'd be nice to just kind of like catch a panic",
    "start": "2754000",
    "end": "2760800"
  },
  {
    "text": "instead as kind of bad as that is but I I I think it's like pretty tricky to",
    "start": "2760800",
    "end": "2766240"
  },
  {
    "text": "like kind of detect when over of those are happening especially if you're like just adding things to numbers and and",
    "start": "2766240",
    "end": "2772520"
  },
  {
    "text": "just kind of like trying to be efficient and have like clean code but I I also don't like see a downside to adding",
    "start": "2772520",
    "end": "2779200"
  },
  {
    "text": "these like I don't know how they would be abused in some way that's like oh no",
    "start": "2779200",
    "end": "2784359"
  },
  {
    "text": "that's like going to be such a and I think if it does make writing code in some of these you know for like encoders",
    "start": "2784359",
    "end": "2790720"
  },
  {
    "text": "or decoders or or whatever other circumstances people have it makes it easier to write that code and write that",
    "start": "2790720",
    "end": "2796040"
  },
  {
    "text": "code safer which I think is important then I think that's worth adding to the language for right I think like go is",
    "start": "2796040",
    "end": "2802760"
  },
  {
    "text": "one of those language that's like okay well we're we're safer than C and this could be one of those things that's like",
    "start": "2802760",
    "end": "2807800"
  },
  {
    "text": "this is a way in which we are safer than C right yeah because when it overflows it does so silently doesn't it I mean",
    "start": "2807800",
    "end": "2815079"
  },
  {
    "text": "it's essentially if there's no error and it just wraps around you wouldn't know it's happened",
    "start": "2815079",
    "end": "2820640"
  },
  {
    "text": "and of course that yeah is a problem that is a problem yeah yeah I would even say that so I like this idea I like both",
    "start": "2820640",
    "end": "2828599"
  },
  {
    "text": "of these proposals in that they handle overflows in some way because go doesn't have a good way to deal with those you",
    "start": "2828599",
    "end": "2833960"
  },
  {
    "text": "can't have them both though can you well right yeah you have to pick one right so what I'm thinking is so for example with",
    "start": "2833960",
    "end": "2840359"
  },
  {
    "text": "this proposal you would still have to check for overflows because if you don't your code would panic and that might not be the best idea but the thing is it",
    "start": "2840359",
    "end": "2846920"
  },
  {
    "text": "would be a safety net of sorts it's kind of like in go there are no buffer overflows because yes you can check",
    "start": "2846920",
    "end": "2853280"
  },
  {
    "text": "against them but if you forget to check them you get a panic it's not like you execute arbitrary code or you hang forever or that kind of thing so to me",
    "start": "2853280",
    "end": "2861079"
  },
  {
    "text": "this this proposal feels quite golike but at the same time what I don't like is that they're separate types so the",
    "start": "2861079",
    "end": "2867319"
  },
  {
    "text": "user has to choose every single time which one to use and I think the default should be the safe version it shouldn't",
    "start": "2867319",
    "end": "2872760"
  },
  {
    "text": "be the weird funky version that wraps around that would be a backwards incompatible change though I suppose",
    "start": "2872760",
    "end": "2878440"
  },
  {
    "text": "wouldn't it maybe maybe not cuz is is overflowing kind of unspecified Behavior",
    "start": "2878440",
    "end": "2884720"
  },
  {
    "text": "or would there be people that rely on it it is specified to wrap around in in the",
    "start": "2884720",
    "end": "2890559"
  },
  {
    "text": "ghost but the thing is does much code actually depend on that and if they do",
    "start": "2890559",
    "end": "2895880"
  },
  {
    "text": "this could be triggered by like a new go language version so if your go mod says go7 or later then suddenly in Sun youins",
    "start": "2895880",
    "end": "2903680"
  },
  {
    "text": "they're all you know safe against over flow and then if you do that upgrade and you won the Overflow you use the other",
    "start": "2903680",
    "end": "2909200"
  },
  {
    "text": "type that explicitly allows you to overflow without panicking okay so you you you would have",
    "start": "2909200",
    "end": "2915119"
  },
  {
    "text": "another type but you'd flip it so that the the new type had the old Behavior and the default Behavior was panicking",
    "start": "2915119",
    "end": "2922359"
  },
  {
    "text": "overflows because otherwise you have to like trust that people will use this safer type and I don't think that's a",
    "start": "2922359",
    "end": "2927880"
  },
  {
    "text": "good idea especially with the amount of existing code yeah that was a fair point was it Johnny that last Point Daniel",
    "start": "2927880",
    "end": "2932920"
  },
  {
    "text": "made what do you think I think it's fair to say it was yeah yeah oh I've made a",
    "start": "2932920",
    "end": "2938000"
  },
  {
    "text": "fair point too I wondered because I'm trying to see if it's actually time for",
    "start": "2938000",
    "end": "2943960"
  },
  {
    "text": "our regular slot unpopular [Music]",
    "start": "2943960",
    "end": "2950240"
  },
  {
    "text": "opinions unop opinion you what I actually think should probably",
    "start": "2950240",
    "end": "2955440"
  },
  {
    "text": "[Music] leave",
    "start": "2955440",
    "end": "2962079"
  },
  {
    "text": "opinion okay who's going to kick us off does anyone have an unpopular opinion well now that",
    "start": "2964160",
    "end": "2971359"
  },
  {
    "text": "you bring it up mhm Daniel you don't like him you see like usually when when",
    "start": "2971359",
    "end": "2978400"
  },
  {
    "text": "when we have you on a show you have one of those faces one of those voices that that is soothing to me right you know",
    "start": "2978400",
    "end": "2984799"
  },
  {
    "text": "like it's it's it's a good thing right um but you said something earlier that I want you to explain a little bit more",
    "start": "2984799",
    "end": "2991960"
  },
  {
    "text": "about why channels are foot gun and go what what did he say he said channels",
    "start": "2991960",
    "end": "2998440"
  },
  {
    "text": "are a food gun yeah we're talking about ranging and I said that you know people use channels um for ranges as a sort of",
    "start": "2998440",
    "end": "3005040"
  },
  {
    "text": "iterator and I said I think channels are probably the biggest foot gun in go and I think that's what probably triggered",
    "start": "3005040",
    "end": "3011359"
  },
  {
    "text": "every action he certainly did that he's livid What's the phrase you're using as",
    "start": "3011359",
    "end": "3017880"
  },
  {
    "text": "my own popular opinion you mean no no the food gun you're saying right foot gun yeah tell what's that what's that",
    "start": "3017880",
    "end": "3025160"
  },
  {
    "text": "about can someone explain that for anyone who's never heard it before oh uh it's basically like if you have you know",
    "start": "3025160",
    "end": "3031200"
  },
  {
    "text": "a gun it's you know usually trying to shoot other things with it but instead you know it's going to hit you in the",
    "start": "3031200",
    "end": "3037240"
  },
  {
    "text": "foot and that's back oh foot gun I thought you were say what did you think we were saying food gun I thought you",
    "start": "3037240",
    "end": "3043839"
  },
  {
    "text": "were saying food gun like I'm going to launch a burger straight out your mouth or something I couldn't figure out if it",
    "start": "3043839",
    "end": "3049520"
  },
  {
    "text": "shot food out or if you used it for shooting food um shoot up some",
    "start": "3049520",
    "end": "3056839"
  },
  {
    "text": "food range today oh man yeah this is yeah I",
    "start": "3056839",
    "end": "3062400"
  },
  {
    "text": "mean you want a language proposal I propose that my our American cousins",
    "start": "3062400",
    "end": "3068280"
  },
  {
    "text": "pronounce their te's a little more and then would get in this mess that's a language proposal for me I'm going to",
    "start": "3068280",
    "end": "3076079"
  },
  {
    "text": "actually open that can can you open PRS for [Laughter]",
    "start": "3076079",
    "end": "3082079"
  },
  {
    "text": "America oh man okay Daniel do you have a real unpopular opinion uh yeah I guess",
    "start": "3082079",
    "end": "3088079"
  },
  {
    "text": "so my unpopular opinion is that go as a language should be frozen again at some",
    "start": "3088079",
    "end": "3093400"
  },
  {
    "text": "point over the next few years you know we've we've had a couple of years where new features have been added in",
    "start": "3093400",
    "end": "3099440"
  },
  {
    "text": "especially big ones are being considered like generics I want to see that slow down again like it was for like six or",
    "start": "3099440",
    "end": "3105920"
  },
  {
    "text": "seven years after go 1.0 came out you're like yeah you've had your fun you've",
    "start": "3105920",
    "end": "3111400"
  },
  {
    "text": "gone too far it's time to take a step back why it's a mix of reasons uh on one hand I",
    "start": "3111400",
    "end": "3118680"
  },
  {
    "text": "feel like go succeeded the most when he was stable you know a lot of the amazing",
    "start": "3118680",
    "end": "3123839"
  },
  {
    "text": "software that came out in go was conceived while go is essentially Frozen as a language MH and I feel like if go",
    "start": "3123839",
    "end": "3130480"
  },
  {
    "text": "keeps growing and growing it's not like it's growing very fast at the moment but if it keeps the upward Pace like that I",
    "start": "3130480",
    "end": "3136640"
  },
  {
    "text": "feel like it might lose this good quality of just you know being chill and letting other languages experiment and",
    "start": "3136640",
    "end": "3143119"
  },
  {
    "text": "then just taking the good bits and being a small language interesting well what do you",
    "start": "3143119",
    "end": "3149960"
  },
  {
    "text": "think of that Chris I think that's popular I think that's a a something I would like to see I feel like especially",
    "start": "3149960",
    "end": "3155920"
  },
  {
    "text": "over the last couple years we've had some I don't think they're missteps but I feel as like we've been we've been",
    "start": "3155920",
    "end": "3160960"
  },
  {
    "text": "moving a little bit too fast with like the sense of urgency I think modules is",
    "start": "3160960",
    "end": "3166200"
  },
  {
    "text": "a pretty decent example of that I feel like the end result has been good um I think there was a need but I feel like",
    "start": "3166200",
    "end": "3172520"
  },
  {
    "text": "there was a lot of stuff with mables that was like oh how are we actually",
    "start": "3172520",
    "end": "3177640"
  },
  {
    "text": "going to make this work how are we going to get the tooling to be there for modules I mean we're now I think the",
    "start": "3177640",
    "end": "3183480"
  },
  {
    "text": "tooling is pretty solid but there were a few really rough years of like what does my editor install look like how do I",
    "start": "3183480",
    "end": "3190440"
  },
  {
    "text": "operate in both modules and with gopath how do I kind of make both of these two",
    "start": "3190440",
    "end": "3196319"
  },
  {
    "text": "worlds that need to exist for various reasons actually work I think that yeah slowing down some letting other people",
    "start": "3196319",
    "end": "3204079"
  },
  {
    "text": "experiment for a bit and and really stabilizing the language would be a good idea I think the main reason why this",
    "start": "3204079",
    "end": "3211319"
  },
  {
    "text": "opinion might be unpopular is because it means that a lot of the proposals that people have filed for the language might",
    "start": "3211319",
    "end": "3217280"
  },
  {
    "text": "not make it because if we stop at some point for another five years or so that",
    "start": "3217280",
    "end": "3222359"
  },
  {
    "text": "means the proposals are going to keep coming in but they're either going to be rejected or you know put on hold which",
    "start": "3222359",
    "end": "3228359"
  },
  {
    "text": "might be frustrating for some right well good strong point then we'll",
    "start": "3228359",
    "end": "3234559"
  },
  {
    "text": "certainly be testing that unpopular opinion on our Twitter feed at gotime FM",
    "start": "3234559",
    "end": "3240319"
  },
  {
    "text": "and we actually do a poll and find out if it is indeed unpopular or not does anybody else have an unpopular",
    "start": "3240319",
    "end": "3247359"
  },
  {
    "text": "opinion I have I guess an a somewhat related one to to what Daniel said um is",
    "start": "3247359",
    "end": "3252599"
  },
  {
    "text": "it unpopular cuz that's all I care about I think so right well then proceed I don't think we're ever going",
    "start": "3252599",
    "end": "3260319"
  },
  {
    "text": "to fix the v2+ module problem in the language like I think stuck with that",
    "start": "3260319",
    "end": "3266079"
  },
  {
    "text": "get over it cuz I think like you know I think anyone that's experienced like a package",
    "start": "3266079",
    "end": "3272839"
  },
  {
    "text": "or or module that has like a V5 version but also at one point had like one point was like a go path or like incompatible",
    "start": "3272839",
    "end": "3280200"
  },
  {
    "text": "and now they're like just trying to import it and like the tooling is just like oh of course you meant like V1 not",
    "start": "3280200",
    "end": "3286079"
  },
  {
    "text": "V5 which is the latest I think we might find ways to like make that a little bit",
    "start": "3286079",
    "end": "3291440"
  },
  {
    "text": "less rough but I think that's a inherent design flaw in how that whole how semantic import",
    "start": "3291440",
    "end": "3298760"
  },
  {
    "text": "versioning was constructed and I think we're just more or less stuck with it at this point I saw a very popular project",
    "start": "3298760",
    "end": "3305640"
  },
  {
    "text": "on omm actually gorm their approach was to basically say you know what the old C",
    "start": "3305640",
    "end": "3310760"
  },
  {
    "text": "base the supposed version one of this thing we're going to move that into a separate Branch Al together like",
    "start": "3310760",
    "end": "3317000"
  },
  {
    "text": "basically they just sced the issue all together by basically saying hey when you pull right rv1 now so whatever the",
    "start": "3317000",
    "end": "3323559"
  },
  {
    "text": "rv2 on new features and everything else that was supposed to be V2 we're not going to put that behind a v slv2 you",
    "start": "3323559",
    "end": "3329559"
  },
  {
    "text": "know module path right that now when you pull it down that's what you're getting right so they basically scried the whole",
    "start": "3329559",
    "end": "3335400"
  },
  {
    "text": "issue by basically saying the latest stuff is the V1 now and then they just say if you want the other stuff then",
    "start": "3335400",
    "end": "3340599"
  },
  {
    "text": "lock to a commit hash or something find another way to do it right so honestly I",
    "start": "3340599",
    "end": "3346480"
  },
  {
    "text": "think that's a nice way right to actually get around the problem although",
    "start": "3346480",
    "end": "3351640"
  },
  {
    "text": "it may it may rub some people the wrong way but I think that was a nice way of actually getting around the problem rather than introducing a V2 in in the",
    "start": "3351640",
    "end": "3358760"
  },
  {
    "text": "path it's a bit of work for maintainers cuz suddenly they might build their code",
    "start": "3358760",
    "end": "3363799"
  },
  {
    "text": "one day and it doesn't build because they've made breaking changes but with the relatively simple fix which is just",
    "start": "3363799",
    "end": "3370680"
  },
  {
    "text": "change your Imports or or fix your go mod or whatever H interesting approach",
    "start": "3370680",
    "end": "3376880"
  },
  {
    "text": "does anyone got any views on that I think semantic import versioning had to happen because otherwise it would be",
    "start": "3376880",
    "end": "3383359"
  },
  {
    "text": "impossible to have semantic vering work at at Large Scale because for example with the gorm case if I depend on one",
    "start": "3383359",
    "end": "3391000"
  },
  {
    "text": "library that wants an old version and I depend on another library that wants a newer version if both are the same",
    "start": "3391000",
    "end": "3397720"
  },
  {
    "text": "version one module there's a clash there's like a the diamond dependency problem I can't build with both versions",
    "start": "3397720",
    "end": "3403559"
  },
  {
    "text": "at the same time because they're at the same module so that's what version 2 plus is meant to fix you can build with",
    "start": "3403559",
    "end": "3409000"
  },
  {
    "text": "version one and two at the same time but I I kind of see Chris's point we are kind of stuck with this you know version",
    "start": "3409000",
    "end": "3415319"
  },
  {
    "text": "zero and one or special problem but I think it's mostly going to get better with better tooling like package site so",
    "start": "3415319",
    "end": "3422000"
  },
  {
    "text": "package site for example now if you look at a at the doxer version one and version three is the latest table it",
    "start": "3422000",
    "end": "3427920"
  },
  {
    "text": "tells you hey did you notice that you're not on the latest version and that's kind of the hint that users should be",
    "start": "3427920",
    "end": "3433799"
  },
  {
    "text": "getting moving forward nice and by the way for anyone who doesn't know a diamond dependency",
    "start": "3433799",
    "end": "3439280"
  },
  {
    "text": "thing it's not good sounds good it's not shiny and expensive sounds like",
    "start": "3439280",
    "end": "3444520"
  },
  {
    "text": "you've unlocked an achievement yeah it's likeing congratulations achievement unlocked you've got a diamond dependency",
    "start": "3444520",
    "end": "3452039"
  },
  {
    "text": "problem that would be cool if it was like that I also feel like for the next couple of years it's going to be rough",
    "start": "3452039",
    "end": "3457319"
  },
  {
    "text": "on people that were already on V2 when it was like kind of like using dep or using some other system and now they're",
    "start": "3457319",
    "end": "3463599"
  },
  {
    "text": "like I want to upgrade to modules and like you have to go rewrite your entire like you can do it automatically be able",
    "start": "3463599",
    "end": "3469400"
  },
  {
    "text": "to go to every single import path in your entire code base and update them",
    "start": "3469400",
    "end": "3475119"
  },
  {
    "text": "and that can be a lift for some people for sure that's like a big change especially if you have like a monolith",
    "start": "3475119",
    "end": "3480799"
  },
  {
    "text": "of some sort like it can be difficult I have a friend that has this like exact problem at work and he's just like I'm",
    "start": "3480799",
    "end": "3486119"
  },
  {
    "text": "just hanging on to go paath for dear life until it is very very dead and gone",
    "start": "3486119",
    "end": "3491599"
  },
  {
    "text": "and we have to deal with moduals and that's going to be uh a lift cuz they've",
    "start": "3491599",
    "end": "3497160"
  },
  {
    "text": "they've tried and they've tried to do the upgrade and it just like didn't work out well for them so and maybe there's",
    "start": "3497160",
    "end": "3502680"
  },
  {
    "text": "something we can do to alleviate that but I think that's also going to be like a struggle for some people brilliant",
    "start": "3502680",
    "end": "3509760"
  },
  {
    "text": "anyone want to say anything else so I'm just going to wind up I don't know why I say that hopefully that gets cut out",
    "start": "3509760",
    "end": "3515039"
  },
  {
    "text": "it's this silly thing for me to announce on it plus this is live so um sometimes",
    "start": "3515039",
    "end": "3520200"
  },
  {
    "text": "we go meta don't we and we talk about what we're talking about instead of just talking about the thing we're meant to",
    "start": "3520200",
    "end": "3525359"
  },
  {
    "text": "be talking about I do anyway this is one of those times it's time to say goodbye",
    "start": "3525359",
    "end": "3530440"
  },
  {
    "text": "I'm afraid I really hope you enjoyed uh going through these proposals with with us and there's actually so many more",
    "start": "3530440",
    "end": "3538280"
  },
  {
    "text": "Daniel you'll have to come back very soon and we'll do a part two of this episode and talk about some more",
    "start": "3538280",
    "end": "3545559"
  },
  {
    "text": "proposals to the go language I'd also love if we could find some kind of Bonkers ones I don't want to be mean to",
    "start": "3545559",
    "end": "3552000"
  },
  {
    "text": "anyone definitely not but um I'd love to see some that are like really out there",
    "start": "3552000",
    "end": "3557160"
  },
  {
    "text": "as well if we could find some of those if anyone knows of any please send them in on a stamped address envelope or",
    "start": "3557160",
    "end": "3563559"
  },
  {
    "text": "postcard or what for these to do in the old bunkers you mean like generics",
    "start": "3563559",
    "end": "3570359"
  },
  {
    "text": "sorry sorry I'm just yanking your chain that was great now that's going in there",
    "start": "3570359",
    "end": "3575480"
  },
  {
    "text": "that one's definitely going to be made into a wrap or into put into some sample somewhere",
    "start": "3575480",
    "end": "3582760"
  },
  {
    "text": "hopefully thank you so much to our guests uh Johnny Boro goodbye Johnny",
    "start": "3582760",
    "end": "3588680"
  },
  {
    "text": "have a lovely time live long and prosper I can't do yeah can't do it",
    "start": "3588680",
    "end": "3595480"
  },
  {
    "text": "are there kid are there like Vulcan kids that can't do that and they're like oh and it's like there's like a stigma",
    "start": "3595480",
    "end": "3601200"
  },
  {
    "text": "about it and stuff and they're like oh live long and prosper do you know what I mean Daniel",
    "start": "3601200",
    "end": "3606920"
  },
  {
    "text": "can you do that apparently you never tried you got on the first truck man that skills got two",
    "start": "3606920",
    "end": "3615200"
  },
  {
    "text": "I'm just not using my hands for I guess not using it for that",
    "start": "3615200",
    "end": "3621200"
  },
  {
    "text": "enough right there to be fair though that isn't very useful in any other like that's not you can't even use it for",
    "start": "3621200",
    "end": "3627440"
  },
  {
    "text": "digging you know what I mean it's there nothing so it's only for for that um",
    "start": "3627440",
    "end": "3634000"
  },
  {
    "text": "showing enough that you like Star Trek or at least are aware of it Chris thanks so much again it was lovely to have you",
    "start": "3634000",
    "end": "3640720"
  },
  {
    "text": "as usual of course see you soon um and Daniel Marty Daniel see you next time",
    "start": "3640720",
    "end": "3647240"
  },
  {
    "text": "thank you it was fun thanks everyone uh see you next time said it twice ridiculous it's really hard at just",
    "start": "3647240",
    "end": "3653280"
  },
  {
    "text": "basic things sometimes do is just say goodbye in a way that I haven't just said those words now it's",
    "start": "3653280",
    "end": "3659960"
  },
  {
    "text": "time to say goodbye goodbye everyone see you next",
    "start": "3659960",
    "end": "3664960"
  },
  {
    "text": "time you can support our work and help ensure that go time continues into the",
    "start": "3667200",
    "end": "3672720"
  },
  {
    "text": "future with a change log Plus+ membership ditch the ads get closer to the metal and directly contribute to all",
    "start": "3672720",
    "end": "3679240"
  },
  {
    "text": "changelog podcasts at changel log.com pluspl once again that's change blog.com",
    "start": "3679240",
    "end": "3685319"
  },
  {
    "text": "/pl plusus check it out this episode was hosted by Matt ryer it was produced by",
    "start": "3685319",
    "end": "3691000"
  },
  {
    "text": "Jared Santo with music by The Beat freak break master cylinder go time is brought to you by our awesome sponsors special",
    "start": "3691000",
    "end": "3697559"
  },
  {
    "text": "thanks to fley launch darkley and linode on the next episode Johnny and Chris are",
    "start": "3697559",
    "end": "3703920"
  },
  {
    "text": "joined by Ian Lopshire and yours truly to discuss reading the docks stay tuned",
    "start": "3703920",
    "end": "3709880"
  },
  {
    "text": "for that one it'll be hit in your podcast feed next week",
    "start": "3709880",
    "end": "3715710"
  },
  {
    "text": "[Music]",
    "start": "3715710",
    "end": "3741639"
  },
  {
    "text": "w [Music]",
    "start": "3743359",
    "end": "3772900"
  },
  {
    "text": "w we're doing a SE Shany today",
    "start": "3773359",
    "end": "3779920"
  },
  {
    "text": "right no I thought we're doing have you not all prepared The seash Shanty",
    "start": "3779920",
    "end": "3786440"
  },
  {
    "text": "bits we won't do it then those in the show notes you're like Anchor Man you only do",
    "start": "3786440",
    "end": "3792960"
  },
  {
    "text": "what's in the show [Music]",
    "start": "3792960",
    "end": "3798070"
  },
  {
    "text": "notes",
    "start": "3799000",
    "end": "3802000"
  }
]