[
  {
    "text": "[Music] you're listening to JS party a weekly",
    "start": "3400",
    "end": "9639"
  },
  {
    "text": "celebration of JavaScript and the web connect with us on the socials we're on",
    "start": "9639",
    "end": "14679"
  },
  {
    "text": "Twitter at JS party FM and Mastadon at JS party at Chang log. social thank you",
    "start": "14679",
    "end": "20880"
  },
  {
    "text": "to our friends at fastly JS party ships fast globally because fastly is fast globally it's as simple as that check",
    "start": "20880",
    "end": "27320"
  },
  {
    "text": "them out at fastly.com and to fly .io deploy your app servers and database",
    "start": "27320",
    "end": "33239"
  },
  {
    "text": "close to your users no Ops required learn more at",
    "start": "33239",
    "end": "38520"
  },
  {
    "text": "fly.io okay it's party time [Music]",
    "start": "38520",
    "end": "54640"
  },
  {
    "text": "y'all hello JS Party People welcome back to Js party your celebration of",
    "start": "54640",
    "end": "61879"
  },
  {
    "text": "JavaScript and the web I'm kall I'm your host today I am joined by very special",
    "start": "61879",
    "end": "67000"
  },
  {
    "text": "guest mishko hey mishko welcome to the show thanks for having me again yes I",
    "start": "67000",
    "end": "72320"
  },
  {
    "text": "should say welcome back so we spoke about your exciting new project that we're going to talk a lot about today",
    "start": "72320",
    "end": "78720"
  },
  {
    "text": "what was it 6 months ago or something like that and we talked about quick and that was really introducing quick to JS",
    "start": "78720",
    "end": "86280"
  },
  {
    "text": "party and the JS party audience and at that time we had so many things we wanted to dive into that we said okay we",
    "start": "86280",
    "end": "91439"
  },
  {
    "text": "got to do another episode we got to dig back in so I'm excited to do that I don't want to do another intro to Quick",
    "start": "91439",
    "end": "97159"
  },
  {
    "text": "episode so if folks are listening they missed that episode you want to go back find out what quick is in kind of the",
    "start": "97159",
    "end": "103280"
  },
  {
    "text": "high level go back listen to to JS party 237 there'll be a link but I guess before we jump into really nitty gitty",
    "start": "103280",
    "end": "110119"
  },
  {
    "text": "it might be good to do a highlevel review of what quick is so do you want to give us just sort of the the bullet",
    "start": "110119",
    "end": "116159"
  },
  {
    "text": "point level what quick is how it fits into the front end ecosystem um and what",
    "start": "116159",
    "end": "122119"
  },
  {
    "text": "what makes it different yeah so I think the best way to think about it is quick",
    "start": "122119",
    "end": "127520"
  },
  {
    "text": "is like react or any other web framework not just react and then react has this thing called nextjs and so quick has",
    "start": "127520",
    "end": "134519"
  },
  {
    "text": "this thing called quick City so quick city is The Meta framework quick is the actual framework for rendering the UI",
    "start": "134519",
    "end": "140840"
  },
  {
    "text": "and together you know they kind of solve the same exact problem as the existing meta Frameworks whether it's nextjs or",
    "start": "140840",
    "end": "147840"
  },
  {
    "text": "remix or SW kit or n and so on so that's",
    "start": "147840",
    "end": "153120"
  },
  {
    "text": "kind of the the category where it kind of falls into and so now you might ask yourself like well there's so many",
    "start": "153120",
    "end": "158480"
  },
  {
    "text": "choices out there why would I want to look at quick and so quick is kind of unique in that it is very SSR first",
    "start": "158480",
    "end": "165280"
  },
  {
    "text": "meaning we think about server side rendering and delivering to the browser just pure",
    "start": "165280",
    "end": "171000"
  },
  {
    "text": "HTML and then downloading just the necessary JavaScript to perform the",
    "start": "171000",
    "end": "176280"
  },
  {
    "text": "operation you want and I cannot stress enough just how surgical we are about",
    "start": "176280",
    "end": "181879"
  },
  {
    "text": "delivering just the necessary JavaScript yes there are other systems that can delay the download of JavaScript or",
    "start": "181879",
    "end": "187720"
  },
  {
    "text": "delay the hydration or something like that but they're all actually in kind of big chunks and in the real world",
    "start": "187720",
    "end": "192879"
  },
  {
    "text": "application there's very limited amount of delay that can actually happen quick is extremely surgical where like if you",
    "start": "192879",
    "end": "198840"
  },
  {
    "text": "say push this button to add item to shopping cart it will only download the",
    "start": "198840",
    "end": "204440"
  },
  {
    "text": "Handler associated with the button and then only download the component associated with the shopping cart and",
    "start": "204440",
    "end": "209959"
  },
  {
    "text": "then refresh the component without downloading anything else that's on a page so it's extremely surgical in its",
    "start": "209959",
    "end": "215360"
  },
  {
    "text": "sense and the reason we do all of this is because we want to have an amazing ux",
    "start": "215360",
    "end": "221360"
  },
  {
    "text": "experience for the end user right so end users on a mobile device on a slow",
    "start": "221360",
    "end": "226519"
  },
  {
    "text": "Network or something like that they want to interact come to a website and they want to interact with it and so if we",
    "start": "226519",
    "end": "232400"
  },
  {
    "text": "force all of the JavaScript to download up ahead of time then the user can take many many seconds before the application",
    "start": "232400",
    "end": "239000"
  },
  {
    "text": "is kind of ready for the user input and the nice thing about quick is the application is ready immediately so it kind of produces instant apps uh so",
    "start": "239000",
    "end": "246319"
  },
  {
    "text": "that's what the differentiator is for quick this is a trend that I think is is picking up a lot in the last year or so",
    "start": "246319",
    "end": "253360"
  },
  {
    "text": "we just were speaking with Fred kshot from Astro and they have sort of a",
    "start": "253360",
    "end": "258720"
  },
  {
    "text": "similar approach of HTML first sent do everything on the server though part of",
    "start": "258720",
    "end": "263759"
  },
  {
    "text": "how they do it is they focus very deeply on content first and they make the assumption that most of what you're",
    "start": "263759",
    "end": "268880"
  },
  {
    "text": "shipping is going to be be static and then you can ship these kind of islands of interactivity from what I understand",
    "start": "268880",
    "end": "275039"
  },
  {
    "text": "quick still feels like an application framework rather than a Content framework is that fair yeah that's very",
    "start": "275039",
    "end": "280120"
  },
  {
    "text": "fair so if you think about Astro first of all a lot of Fred love Astro what",
    "start": "280120",
    "end": "285360"
  },
  {
    "text": "they're doing and I think they're totally heading in the in the right direction but I kind of want to paint the picture in terms of the differences",
    "start": "285360",
    "end": "291600"
  },
  {
    "text": "right so in Astro you really have two different things you have the content and then you have the behavior and",
    "start": "291600",
    "end": "298000"
  },
  {
    "text": "they're written in different languages they're WR in different locations and mentally you kind of have to keep track of like what am I doing like am I doing",
    "start": "298000",
    "end": "305000"
  },
  {
    "text": "content or am I doing the behavior and so you have to kind of switch back and forth and I think this mental switching",
    "start": "305000",
    "end": "311479"
  },
  {
    "text": "is not the thing that we want as developers right as developers we just want to build an app and not think about",
    "start": "311479",
    "end": "317360"
  },
  {
    "text": "it so the big difference with quick is that in quick you don't have to do the mental gymnastics of like so does this",
    "start": "317360",
    "end": "323560"
  },
  {
    "text": "run on the server does it run on the client does it pre-rendered like where do I put this stuff and then like oh I'm",
    "start": "323560",
    "end": "328680"
  },
  {
    "text": "inside of the interactivity so like I'm now in the react World or whatever the framework you chose oh now I'm in the",
    "start": "328680",
    "end": "335360"
  },
  {
    "text": "content side so I'm in the MDX world right and so you have to do all these mental gymnastics and you know there's a",
    "start": "335360",
    "end": "341319"
  },
  {
    "text": "cost to it and also if you talk to Fred he'll tell you like Astro isn't the solution for everything there are",
    "start": "341319",
    "end": "347800"
  },
  {
    "text": "certain sites that are really good for Astro and certain use cases that are not whereas quick wants to be more general",
    "start": "347800",
    "end": "354280"
  },
  {
    "text": "purpose thing and say like look if you can build it using any existing technology whether it's react angular",
    "start": "354280",
    "end": "360720"
  },
  {
    "text": "Etc then you can also build it in quick so that use case is is the same but you",
    "start": "360720",
    "end": "366199"
  },
  {
    "text": "don't have to think about what is the static what is dynamic what has to be laty loaded Etc quick will figure all",
    "start": "366199",
    "end": "372039"
  },
  {
    "text": "the stuff for you and you just focus on the application and out of the box quick will break up your application into",
    "start": "372039",
    "end": "378080"
  },
  {
    "text": "pieces lazy load the pieces install a service worker which will prefetch all the stuff so even if you the connection",
    "start": "378080",
    "end": "384319"
  },
  {
    "text": "internet connection is dropped you'll have a correct behavior and figure out how to do service side rendering how to",
    "start": "384319",
    "end": "389720"
  },
  {
    "text": "serialize the data how to send it to the client and back forth and so all of those things that you need in order to",
    "start": "389720",
    "end": "396000"
  },
  {
    "text": "get kind of the application in the ideal World running are just something that's available to you out of the box without",
    "start": "396000",
    "end": "401520"
  },
  {
    "text": "any kind of effort for the developer site and that's kind of the value ad that we're providing here right so you're kind of creating that same",
    "start": "401520",
    "end": "407960"
  },
  {
    "text": "unified all-in-one DX without content switching that has made react so popular correct but instead of shipping 40",
    "start": "407960",
    "end": "414800"
  },
  {
    "text": "kilobytes of react over and having to boot up the entire runtime ahead of time you're doing all this sort of magic to",
    "start": "414800",
    "end": "423039"
  },
  {
    "text": "make it feel like it's just little Snippets of progressive enhancement and I I don't really want to kind of point",
    "start": "423039",
    "end": "428440"
  },
  {
    "text": "out here is that the problem isn't that react is 40 kilobytes that's not the issue like 40 kilobytes is small enough",
    "start": "428440",
    "end": "433960"
  },
  {
    "text": "that it's really not a problem the problem is that if you build any significantly large application in the",
    "start": "433960",
    "end": "440120"
  },
  {
    "text": "react the application itself will be hundreds of kilobytes right so the issue",
    "start": "440120",
    "end": "445720"
  },
  {
    "text": "isn't that the react is 40 kilobytes the issue is that the applications built in can react are often time hundreds of",
    "start": "445720",
    "end": "452120"
  },
  {
    "text": "kilobytes and the way react in other Frameworks are structured they have",
    "start": "452120",
    "end": "458199"
  },
  {
    "text": "something called hydration and hydration requires that all of the components kind of be present when hydration runs and",
    "start": "458199",
    "end": "465800"
  },
  {
    "text": "that's where the problem is right that the moment you navigate to a page the more complicated your page becomes the",
    "start": "465800",
    "end": "471159"
  },
  {
    "text": "more stuff you see on the page for the user the more JavaScript has to be",
    "start": "471159",
    "end": "476280"
  },
  {
    "text": "present and more JavaScript has to execute whereas if you the quick world you can make the page as big as you want",
    "start": "476280",
    "end": "482800"
  },
  {
    "text": "and only the necessary bits are downloaded so the first thing is quick doesn't have hydration and so that in",
    "start": "482800",
    "end": "489120"
  },
  {
    "text": "itself removes huge swats of JavaScript that never has to be downloaded to the client and then quick has this really",
    "start": "489120",
    "end": "495759"
  },
  {
    "text": "good lazy loading stor so that when you imagine an Amazon website an Amazon page",
    "start": "495759",
    "end": "501159"
  },
  {
    "text": "right if you go to the Amazon page no JavaScript gets downloaded and if you click a button that says add to the shopping cart then we only download the",
    "start": "501159",
    "end": "508240"
  },
  {
    "text": "Handler for the shoing card and we only download the shopping cart itself cuz that has to rerender and nothing else on",
    "start": "508240",
    "end": "514200"
  },
  {
    "text": "the UI has to get downloaded right so we don't download the menus we don't download the product details we don't",
    "start": "514200",
    "end": "519440"
  },
  {
    "text": "download the comment section or the review section unless the user starts interacting with it right and that's",
    "start": "519440",
    "end": "526480"
  },
  {
    "text": "kind of the value add here is that you can navigate to a page no JavaScript once the user interacts we get the",
    "start": "526480",
    "end": "533480"
  },
  {
    "text": "correcting and I really want to stress that number one question we get is like well isn't that slow like if you download when the user interacts and the",
    "start": "533480",
    "end": "539519"
  },
  {
    "text": "answer is no because there's a service worker that starts prefetching all of the code available not not and uh make",
    "start": "539519",
    "end": "546320"
  },
  {
    "text": "it make sure that when you click you don't have to wait so even if the connection drops or you're in a tunnel",
    "start": "546320",
    "end": "551720"
  },
  {
    "text": "and you don't have the data right you can start interacting with the page just fine and the service worker has a full",
    "start": "551720",
    "end": "557920"
  },
  {
    "text": "view of the application and so the service worker knows that like oh all these components that you have here they",
    "start": "557920",
    "end": "563760"
  },
  {
    "text": "have no interactivity so don't even bother prefetching them because there's no code path that the user can possibly",
    "start": "563760",
    "end": "570240"
  },
  {
    "text": "take that will update this thing right whereas oh this menu there has interactivity so go prefetch it but like",
    "start": "570240",
    "end": "577600"
  },
  {
    "text": "don't do it as fast as prefetching may be out of the shopping cart because we know statistically that's more likely",
    "start": "577600",
    "end": "583440"
  },
  {
    "text": "scenario so make sure you get that code first and then get the menu code afterwards and so there's all these",
    "start": "583440",
    "end": "588600"
  },
  {
    "text": "tricks that we can be done where first of all we don't download huge amounts of code that is not necessary and then when",
    "start": "588600",
    "end": "594200"
  },
  {
    "text": "we do download the code we make sure we do it in correct order and all of that just kind of happens without having to",
    "start": "594200",
    "end": "599800"
  },
  {
    "text": "do anything as a developer something you mentioned there that I'm really curious about is so you said okay we can make",
    "start": "599800",
    "end": "605320"
  },
  {
    "text": "predictions about which of this code is likely to be needed first and optimized based on that is that done statically is",
    "start": "605320",
    "end": "612640"
  },
  {
    "text": "there a way to sort of feedback from usage data like how does that work yeah no it's done dynamically actually so",
    "start": "612640",
    "end": "619399"
  },
  {
    "text": "when you interact with the page you know at the end of the day what does interaction mean it means that there's a like a click listener or a mouse over",
    "start": "619399",
    "end": "626160"
  },
  {
    "text": "listener or hover or whatever right so there's listeners inside out of the HTML and so we know what these listeners",
    "start": "626160",
    "end": "633200"
  },
  {
    "text": "point to and we can also query the Dom and say what are all the listeners and we can see all the possible things right",
    "start": "633200",
    "end": "638839"
  },
  {
    "text": "so given a particular state of the application it's easy for the system to kind of look at the HTML and say what",
    "start": "638839",
    "end": "644200"
  },
  {
    "text": "are the all possible things that the user can do right and so that gives you a list of items that you can go and",
    "start": "644200",
    "end": "649399"
  },
  {
    "text": "fetch list of chunks that you can go start pre-etching and then when the user actually clicks on one of these chunks",
    "start": "649399",
    "end": "655800"
  },
  {
    "text": "then we fire an event saying like oh user clicked on chunk one to 3 4 5 right and so now we know this and it's",
    "start": "655800",
    "end": "662000"
  },
  {
    "text": "relatively easy to then ship this information to the back end and the back end can collect the statistical stuff",
    "start": "662000",
    "end": "668040"
  },
  {
    "text": "and then you can basically know like oh most of the users that you have are interacting with the app to the shopping",
    "start": "668040",
    "end": "675360"
  },
  {
    "text": "card button or view details button right very few people interact with the menu and nobody ever interacts with the log",
    "start": "675360",
    "end": "681880"
  },
  {
    "text": "out button right so giving that information we can then feed that information to both the bundler so that",
    "start": "681880",
    "end": "688320"
  },
  {
    "text": "the bundler says Ah if you click the shopping cart you are also very likely to go update this other thing so make",
    "start": "688320",
    "end": "694880"
  },
  {
    "text": "sure you put it in the same bundle together and we also know that like almost nobody clicks on the log out",
    "start": "694880",
    "end": "701160"
  },
  {
    "text": "button so like do put it in a bundle like in a separate one but then tell the service worker to kind of load it at the",
    "start": "701160",
    "end": "707320"
  },
  {
    "text": "end so you use that information in two ways one is you use it to kind of figure out what are the ideal chunk sizes and",
    "start": "707320",
    "end": "714760"
  },
  {
    "text": "what the indidual chunks should contain but you also use it to kind of prioritize in which order these Junction be loaded and I need to clarify that as",
    "start": "714760",
    "end": "722360"
  },
  {
    "text": "of right now this isn't available to you out of the box so you have to do a little bit of work but we are planning to have such a feature as well that is",
    "start": "722360",
    "end": "729440"
  },
  {
    "text": "super interesting so and I can imagine that analytics that has use for a variety of purposes that has business",
    "start": "729440",
    "end": "735880"
  },
  {
    "text": "case use as well so do you expose it via an API that folks can use yeah as of right now we just fire a custom event",
    "start": "735880",
    "end": "742839"
  },
  {
    "text": "that you have to kind of grab and the hard part isn't really doing all these things so we have a bundling system that",
    "start": "742839",
    "end": "747880"
  },
  {
    "text": "can do these bundles we have you know how to preet in the correct order all the stuff is up and ready what isn't ready is that when you collect this",
    "start": "747880",
    "end": "754560"
  },
  {
    "text": "stuff you have to send it to the server somewhere and that server has to have provision database to kind of keep track of it or something like that right so",
    "start": "754560",
    "end": "760440"
  },
  {
    "text": "that is still on to you as a developer to kind of integrate this into your website but once you collect this",
    "start": "760440",
    "end": "766360"
  },
  {
    "text": "information you can feed it to the bundler and the bundler then knows how to bundle it together for it that's",
    "start": "766360",
    "end": "773720"
  },
  {
    "text": "super interesting well and it it gives you the potential a very quick easy to build first party analy",
    "start": "773720",
    "end": "779839"
  },
  {
    "text": "as well so that you don't have to worry about oh am I integrating you know some slow I know you have party town to speed",
    "start": "779839",
    "end": "786120"
  },
  {
    "text": "up third party analytics scripts and things like that but you you don't even necessarily have to worry about that you can bundle in your first party analytics",
    "start": "786120",
    "end": "792839"
  },
  {
    "text": "correct correct that's super cool I want to dive deep on the concept of resum",
    "start": "792839",
    "end": "799120"
  },
  {
    "text": "ability which is something we talked about a lot in our first episode but before I do uh you mentioned a little bit about quick City and we didn't cover",
    "start": "799120",
    "end": "806519"
  },
  {
    "text": "that much when we talked before I want to understand is quick City a pretty much straight standard equivalent to",
    "start": "806519",
    "end": "813560"
  },
  {
    "text": "other metap Fame works like next or spel kit or are there unique things about quick City similar to how there are",
    "start": "813560",
    "end": "818880"
  },
  {
    "text": "unique things about quick yeah there a couple of unique things in there so first of all what you get out of the box",
    "start": "818880",
    "end": "824199"
  },
  {
    "text": "with quick city is you get a router right and that's kind of the standard thing that you can imagine it's a file",
    "start": "824199",
    "end": "830120"
  },
  {
    "text": "based router directory based router so that's pretty straightforward but the other thing you need to get is you need",
    "start": "830120",
    "end": "835160"
  },
  {
    "text": "a way of loading the data and then doing behav Behavior or actions when you",
    "start": "835160",
    "end": "841399"
  },
  {
    "text": "interact with the user interacts you want to update some data in the back end so you need to kind of if you think about it you need to a way of",
    "start": "841399",
    "end": "847440"
  },
  {
    "text": "transferring data from the server to the client then you need a way of transferring a data from the client to",
    "start": "847440",
    "end": "852920"
  },
  {
    "text": "the server and so we call those loaders and actions and other meta Frameworks",
    "start": "852920",
    "end": "858560"
  },
  {
    "text": "kind of have it too like remix sort of has it but I think we've we were able to",
    "start": "858560",
    "end": "863920"
  },
  {
    "text": "go a step further than everybody else and the reason for that is you can",
    "start": "863920",
    "end": "869199"
  },
  {
    "text": "cannot refer to a like let's say you have a server action or server loader",
    "start": "869199",
    "end": "874639"
  },
  {
    "text": "you can't refer to it directly because if you refer to it directly then the bundler will include it and that's a",
    "start": "874639",
    "end": "881560"
  },
  {
    "text": "problem because you can't include serers side code in the client right even if we could somehow download it the issue is",
    "start": "881560",
    "end": "888360"
  },
  {
    "text": "going to be like well the serverside code like has npm dependencies and import dependencies and it becomes basically this huge amount of code so",
    "start": "888360",
    "end": "894120"
  },
  {
    "text": "like first of all you don't want to ship all that stuff but even if you would ship it you don't want to accidentally exit execute it because it will just",
    "start": "894120",
    "end": "899920"
  },
  {
    "text": "blow up on a client right so the way most systems get around this is they basically say right this is where you",
    "start": "899920",
    "end": "906759"
  },
  {
    "text": "put the code for the server and this is where you put the code for the client and oh by the way we got to make sure",
    "start": "906759",
    "end": "913399"
  },
  {
    "text": "that if type information wants to be passed from the server to the client it has to be passed in a type only way you",
    "start": "913399",
    "end": "921839"
  },
  {
    "text": "can't refer to the function because if you uh you know let type only thing types get erased by the typescript and",
    "start": "921839",
    "end": "928199"
  },
  {
    "text": "so they they kind of appear but if you refer to a symbol that that doesn't get erased and that that confuses the",
    "start": "928199",
    "end": "934160"
  },
  {
    "text": "bundler right so most systems have this but they have this separation of like",
    "start": "934160",
    "end": "941079"
  },
  {
    "text": "this is client code and this is server code and the two should never meet and as a result you can't just refer to functions directly but quick has this",
    "start": "941079",
    "end": "949079"
  },
  {
    "text": "amazing ability to take code and break it up into pieces and so for us you can",
    "start": "949079",
    "end": "954120"
  },
  {
    "text": "actually refer directly to the server function and then when the bundler gets",
    "start": "954120",
    "end": "959800"
  },
  {
    "text": "done with it the bundler is smart enough to be like oh yeah yeah but this is a server only code and I know not to bundle it in there and can kind of",
    "start": "959800",
    "end": "966519"
  },
  {
    "text": "exclude it and the nice thing about that is that the DX is way nicer you just",
    "start": "966519",
    "end": "972079"
  },
  {
    "text": "have a single file in this single file you say this is a component this is a loader inside of the loader I put I",
    "start": "972079",
    "end": "979519"
  },
  {
    "text": "directly talk to my mango DB or whatever nodejs only import I do on there in the",
    "start": "979519",
    "end": "985319"
  },
  {
    "text": "component I do my stuff and then they when they are bu which is the optimizer runs through it the optimizer is like oh",
    "start": "985319",
    "end": "992839"
  },
  {
    "text": "I see a dollar sign I'm going to Lazy load this thing and then I see like oh right but that's referred from the component so like I'm just going to",
    "start": "992839",
    "end": "998959"
  },
  {
    "text": "exclude it separately because the optimizer has to create separate bundles for the client and separate bundles for",
    "start": "998959",
    "end": "1005240"
  },
  {
    "text": "the server and so because of that it knows like oh this code can only go be on a server and this code can only be on",
    "start": "1005240",
    "end": "1011440"
  },
  {
    "text": "a client and so the right stuff just kind of happens automatically and that results in a much nicer developer",
    "start": "1011440",
    "end": "1017880"
  },
  {
    "text": "experience and it's not a developer experience that can be easily copied because other systems don't have ability",
    "start": "1017880",
    "end": "1025678"
  },
  {
    "text": "to kind of break the code base like that up right that's a quick specialty and basically wherever you see a dollar",
    "start": "1025679",
    "end": "1031360"
  },
  {
    "text": "signed you know that there's some breaking up happening underneath the hood and that allows us not just to do",
    "start": "1031360",
    "end": "1036880"
  },
  {
    "text": "lazy loading but to also do what I just described basically where you can have direct relationships between a client",
    "start": "1036880",
    "end": "1042438"
  },
  {
    "text": "and the server but then the right stuff happens at WR",
    "start": "1042439",
    "end": "1047079"
  },
  {
    "text": "time [Music]",
    "start": "1047840",
    "end": "1061359"
  },
  {
    "text": "Hello friends this is Jared here to tell you about change log Plus+ over the",
    "start": "1062280",
    "end": "1068039"
  },
  {
    "text": "years many of our most DieHard listeners have asked us for ways they can support",
    "start": "1068039",
    "end": "1073320"
  },
  {
    "text": "our work here at Chang log we didn't have an answer for them for a long time but finally we created Chang log Plus+ a",
    "start": "1073320",
    "end": "1081520"
  },
  {
    "text": "membership you can join to directly support our work as a thank you we save",
    "start": "1081520",
    "end": "1086799"
  },
  {
    "text": "you some time with an adree feed sprinkle in bonuses like extended episodes and give you first access to",
    "start": "1086799",
    "end": "1094400"
  },
  {
    "text": "the new stuff we dream up learn all about it at changel log.com pluspl you'll also find the link in your",
    "start": "1094400",
    "end": "1101760"
  },
  {
    "text": "chapter data and show notes once again that's Chang log.com plusus plus check",
    "start": "1101760",
    "end": "1107360"
  },
  {
    "text": "it out we'd love to have you with",
    "start": "1107360",
    "end": "1110760"
  },
  {
    "text": "us I love that you're talking about this sort of Auto Magic and how you're breaking things apart and how that does",
    "start": "1113679",
    "end": "1120120"
  },
  {
    "text": "it and when we spoke before you mentioned that this process of how quick",
    "start": "1120120",
    "end": "1125520"
  },
  {
    "text": "automatically breaks up the application is the blackest magic of how quick works so can you peel back the hood for us and",
    "start": "1125520",
    "end": "1133280"
  },
  {
    "text": "take us through that black magic and I mean I personally believe software is",
    "start": "1133280",
    "end": "1138400"
  },
  {
    "text": "Magic that's what we we our job we're magicians is what we do right like that's what we do so take us through the",
    "start": "1138400",
    "end": "1143880"
  },
  {
    "text": "Spells you cast here to make quick quick before I do that I really want to point",
    "start": "1143880",
    "end": "1149320"
  },
  {
    "text": "out that a lot of people consider magic bad and I think the way I look at it is",
    "start": "1149320",
    "end": "1154360"
  },
  {
    "text": "Magic has cost in terms of understanding right and the thing you want to make",
    "start": "1154360",
    "end": "1159919"
  },
  {
    "text": "sure is that the cost or the benefit of the magic way outweighs the cost that it",
    "start": "1159919",
    "end": "1166200"
  },
  {
    "text": "provides right and I think a lot of lot of people have been burned in the past where the magic is so complicated that",
    "start": "1166200",
    "end": "1171840"
  },
  {
    "text": "you're like I have no idea what's going on in here this is not worth it I hate magic right and I just really want to",
    "start": "1171840",
    "end": "1177159"
  },
  {
    "text": "point out that like we are well aware of this problem and we think that our magic",
    "start": "1177159",
    "end": "1182280"
  },
  {
    "text": "is very easy to explain and as a result it's easy to understand and then people",
    "start": "1182280",
    "end": "1187520"
  },
  {
    "text": "don't get surprised right and so we think our benefit we get out of it way",
    "start": "1187520",
    "end": "1194120"
  },
  {
    "text": "outweigh the cost of mental model that's required to understand what's going on and you know not be surprised so I just",
    "start": "1194120",
    "end": "1200760"
  },
  {
    "text": "want to kind of put that out there because I think a lot of people when they hear the word magic they just kind of freak out and say like this is bad so",
    "start": "1200760",
    "end": "1207520"
  },
  {
    "text": "I think it depends on the situation all right so let's jump in What kind of magic we have so we have a a a compile",
    "start": "1207520",
    "end": "1215000"
  },
  {
    "text": "step and this compile step is called the optimizer and this Optimizer in my opinion I feel very strongly that the",
    "start": "1215000",
    "end": "1221960"
  },
  {
    "text": "amount of magic you put in to the optimizer should be the absolute bare minimum necessary to get the job done",
    "start": "1221960",
    "end": "1228720"
  },
  {
    "text": "and nothing else and if you look at systems that are purely runtime they're much easier to understand because",
    "start": "1228720",
    "end": "1234559"
  },
  {
    "text": "there's there isn't a lot of magic going on and as the system become more and more compiler dependent they kind of",
    "start": "1234559",
    "end": "1240480"
  },
  {
    "text": "become complicated in terms of understanding and this is where people might jump the gun and be like oh this is too much so what exactly does",
    "start": "1240480",
    "end": "1246880"
  },
  {
    "text": "Optimizer do okay the problem we need to solve is that writing lazy code or",
    "start": "1246880",
    "end": "1253480"
  },
  {
    "text": "rather lazy loading code is complicated well let me back up a second we have two",
    "start": "1253480",
    "end": "1259640"
  },
  {
    "text": "problems and that is that if we want to minimize the amount of JavaScript we ship to the client we need to have a way",
    "start": "1259640",
    "end": "1268360"
  },
  {
    "text": "of somehow breaking up the code base right and if you think about it irregular systems don't have an easy way",
    "start": "1268360",
    "end": "1274360"
  },
  {
    "text": "to break these things up because what they do is they say well here's a root component this is the entry point to my application so this is your root",
    "start": "1274360",
    "end": "1280240"
  },
  {
    "text": "component and once you have the root component the root component has references to child components and those",
    "start": "1280240",
    "end": "1285480"
  },
  {
    "text": "have references to child components and so on and so forth so when you grab the root component of the application you",
    "start": "1285480",
    "end": "1290720"
  },
  {
    "text": "pretty much have grabbed the whole application and so most systems have some kind of lazy loading either in the",
    "start": "1290720",
    "end": "1297320"
  },
  {
    "text": "form of a router or explicit you know like lazy function inside of react that",
    "start": "1297320",
    "end": "1304039"
  },
  {
    "text": "creates a suspense but there's a lot of ceremony associated with it it's not just something you can just do right",
    "start": "1304039",
    "end": "1310760"
  },
  {
    "text": "there's ceremony both in terms of the developer all the stuff they have to do and also in terms of runtime because",
    "start": "1310760",
    "end": "1317960"
  },
  {
    "text": "there is you know the way this works in most systems is that you you execute until you hit the suspense boundary and",
    "start": "1317960",
    "end": "1323520"
  },
  {
    "text": "then you kind of give up and then you wait until the suspense results and then you reexecute from the beginning hoping",
    "start": "1323520",
    "end": "1328840"
  },
  {
    "text": "that you're going to get further and then you find another suspense Peri boundary and you kind of give up and then you wait until it resolves and then",
    "start": "1328840",
    "end": "1334120"
  },
  {
    "text": "kind of repeat the process right so it's a very expensive both in terms of the what the developer has to do because",
    "start": "1334120",
    "end": "1340080"
  },
  {
    "text": "developer has to wrap the component inside of a dynamic import take the component put it in separate file put a",
    "start": "1340080",
    "end": "1346080"
  },
  {
    "text": "reference to it wrap the whole thing inside of a closure put put it inside of a lazy and then the lazy gets fed into the suspense like a lot of ceremony that",
    "start": "1346080",
    "end": "1352720"
  },
  {
    "text": "has to happen in order to get this thing going and so most systems have really hard time with breaking your application",
    "start": "1352720",
    "end": "1360360"
  },
  {
    "text": "into chunks most bundlers right typically if you don't put any Dynamic Imports in your source code then the",
    "start": "1360360",
    "end": "1366640"
  },
  {
    "text": "answer is you will get exactly one bundle and for every Dynamic import you put in your source code you can get a",
    "start": "1366640",
    "end": "1373200"
  },
  {
    "text": "small chunk that kind of is cleaved off from the system so the thing that quick needs to solve",
    "start": "1373200",
    "end": "1378960"
  },
  {
    "text": "is we need to have this be automatic and not just for components but also for",
    "start": "1378960",
    "end": "1385679"
  },
  {
    "text": "things like listeners callbacks use client effect tasks and so on so",
    "start": "1385679",
    "end": "1391720"
  },
  {
    "text": "basically we want to take your application and have an easy way without any sort of ceremony on a developer side",
    "start": "1391720",
    "end": "1399159"
  },
  {
    "text": "to break everything up because the ceremony goes against the DX right so we want to have a nice DX and so we just",
    "start": "1399159",
    "end": "1404840"
  },
  {
    "text": "want you to write your code as you would normally write and then we do the breaking up the thing is we don't know",
    "start": "1404840",
    "end": "1412039"
  },
  {
    "text": "where to break it up so we need some kind of a marker and so in our case the marker is a function call that ends in a",
    "start": "1412039",
    "end": "1418919"
  },
  {
    "text": "dollar sign so anywhere there is a function name that ends with a dollar sign that's a message to both the",
    "start": "1418919",
    "end": "1426919"
  },
  {
    "text": "developer and to the optimizer that magic happens here and the magic that happens is pretty straightforward it is",
    "start": "1426919",
    "end": "1434080"
  },
  {
    "text": "take that first argument of the function which usually is a closure move move it into a separate file and leave behind a",
    "start": "1434080",
    "end": "1441919"
  },
  {
    "text": "dynamic import that's all that it does and it's both it's a hint to the",
    "start": "1441919",
    "end": "1447960"
  },
  {
    "text": "optimizer to the compiler but it's also a hint to the developer saying like look certain assumptions you might have about",
    "start": "1447960",
    "end": "1454080"
  },
  {
    "text": "what's in here cannot necessarily apply so for example by moving this function to the separate file you can't be",
    "start": "1454080",
    "end": "1461679"
  },
  {
    "text": "closing over variables that are not importable because when you move it over you can't see those variables right so",
    "start": "1461679",
    "end": "1469120"
  },
  {
    "text": "there are certain constraints that you have to follow and so you need to learn as a developer like what does this magical dollar sign mean but at the same",
    "start": "1469120",
    "end": "1475960"
  },
  {
    "text": "time it's a relatively easy to explain because there isn't some complicated things that are going on we're literally",
    "start": "1475960",
    "end": "1481159"
  },
  {
    "text": "just taking that that closure and moving into a separate file we're giving it a name we giving the file name you don't",
    "start": "1481159",
    "end": "1486399"
  },
  {
    "text": "have to think about any of that stuff the file name is autogenerated the symbol is autogenerated you just have to",
    "start": "1486399",
    "end": "1491760"
  },
  {
    "text": "make sure that you don't close over certain variables that are not going to be visible from the other file and so",
    "start": "1491760",
    "end": "1497799"
  },
  {
    "text": "for that we we have linters to kind of help you along so it's pretty straightforward but what you get out of",
    "start": "1497799",
    "end": "1504240"
  },
  {
    "text": "this piece of magic is you get lots and lots of entry points and that's the",
    "start": "1504240",
    "end": "1510000"
  },
  {
    "text": "secret right once you have lots and lots of entry points then your bundler Can Do",
    "start": "1510000",
    "end": "1516240"
  },
  {
    "text": "Magic the bundler can decide to put these entry points together or separate or whatever the bundler decides is a",
    "start": "1516240",
    "end": "1521600"
  },
  {
    "text": "good idea you can feed runtime information into it and the bundler has more information but unless you start",
    "start": "1521600",
    "end": "1528080"
  },
  {
    "text": "with with a world where you have lots and lots of entry points bundlers can't do anything and that's the the challenge",
    "start": "1528080",
    "end": "1534880"
  },
  {
    "text": "that existing Frameworks have is that they don't have an easy way of breaking the code base up right so this is",
    "start": "1534880",
    "end": "1541159"
  },
  {
    "text": "reminding me of how everybody was excited about tree shaking and then it turns out the majority of the tree is always included and you can shake a few",
    "start": "1541159",
    "end": "1547559"
  },
  {
    "text": "things but what you're do is you're basically inserting these like cleavage lines yes where suddenly the bundler has",
    "start": "1547559",
    "end": "1554559"
  },
  {
    "text": "so much more power because it has many more choices available to it correct so it's all about making those choices and",
    "start": "1554559",
    "end": "1562039"
  },
  {
    "text": "it's all about making those choices in a way that isn't expensive for the developer right like you don't want to",
    "start": "1562039",
    "end": "1567799"
  },
  {
    "text": "put that cost the burden on a developer and the simplest thing we could come up",
    "start": "1567799",
    "end": "1573520"
  },
  {
    "text": "with is basically a function call that ends in a dollar sign that's the the magic right that's the thing that says",
    "start": "1573520",
    "end": "1579559"
  },
  {
    "text": "lazy load this thing now just because it's lazy loaded doesn't mean actually will cause lazy loading in runtime it",
    "start": "1579559",
    "end": "1585760"
  },
  {
    "text": "just means it's a potential place where lazy loading can happen and that has a lot of implications mainly because it",
    "start": "1585760",
    "end": "1593159"
  },
  {
    "text": "means that every time you see a dollar sign you understand that that closure",
    "start": "1593159",
    "end": "1598399"
  },
  {
    "text": "that follows is going to be invoked asynchronously right I was going to say this pushes you to an asynchronous first",
    "start": "1598399",
    "end": "1604360"
  },
  {
    "text": "based model yes and the beauty of that is if your code is asynchronous it can actually run synchronously or",
    "start": "1604360",
    "end": "1610360"
  },
  {
    "text": "asynchronously it doesn't care it can just go that's right you got that right so that's the magic that we sold with",
    "start": "1610360",
    "end": "1617039"
  },
  {
    "text": "the optimizer and also I need to make sure my kind of point out is that there is a collaboration going on between the",
    "start": "1617039",
    "end": "1624440"
  },
  {
    "text": "optimizer and the runtime the thing is you can't just leave behind a dynamic",
    "start": "1624440",
    "end": "1630279"
  },
  {
    "text": "import that breaks the semantics of what the code originally said so it's not",
    "start": "1630279",
    "end": "1635440"
  },
  {
    "text": "like existing Frameworks can easily add this feature in because it breaks the semantics right and so in the quick",
    "start": "1635440",
    "end": "1642919"
  },
  {
    "text": "world the optimizer breaks the semantics in a way which the runtime knows how to",
    "start": "1642919",
    "end": "1648720"
  },
  {
    "text": "deal with right so there's an agreement going on over there like I know what I'm doing is not 100% legal here but as a",
    "start": "1648720",
    "end": "1655640"
  },
  {
    "text": "runtime you will understand this and so we have this agreement going on and therefore we can do things that others",
    "start": "1655640",
    "end": "1660919"
  },
  {
    "text": "cannot right it's similar to what spelt does in the sense of you're sort of extending the language a little bit",
    "start": "1660919",
    "end": "1666600"
  },
  {
    "text": "changing semantics a little bit to support DX but because you control both sides of the process it's fine that's",
    "start": "1666600",
    "end": "1672760"
  },
  {
    "text": "right that's the magical piece we control both sides of the process right and if you look at other Frameworks you kind of realize like",
    "start": "1672760",
    "end": "1678760"
  },
  {
    "text": "they don't care about bundling it's not their problem right it's somebody else's problem but the implication of that is",
    "start": "1678760",
    "end": "1684240"
  },
  {
    "text": "that if it's somebody else's problem that means that somebody else can only do things a Transformations that are",
    "start": "1684240",
    "end": "1689960"
  },
  {
    "text": "semantically equivalent and that's the problem because any kind of",
    "start": "1689960",
    "end": "1695480"
  },
  {
    "text": "transformation that's semantically equivalent cannot be used for lazy loading because it's asynchronous right",
    "start": "1695480",
    "end": "1701600"
  },
  {
    "text": "it changes asynchronous thing to asynchronous things and that's not allowed whereas in quick World The Run",
    "start": "1701600",
    "end": "1708240"
  },
  {
    "text": "time understands that there's this asynchronicity that's being introduced over here and therefore it can deal with it so you're doing this in this example",
    "start": "1708240",
    "end": "1716399"
  },
  {
    "text": "for how your loading code and components MH can you do you expose it in a way",
    "start": "1716399",
    "end": "1721720"
  },
  {
    "text": "that people could use it for example for data loading and things like that because absolutely that's another area where often times people are thinking",
    "start": "1721720",
    "end": "1729080"
  },
  {
    "text": "about things in a synchronous way because it's easier but it kills your performance like thinking about data",
    "start": "1729080",
    "end": "1735320"
  },
  {
    "text": "loading as an asynchronous problem is so much more powerful yeah so this is where loader and actions",
    "start": "1735320",
    "end": "1741880"
  },
  {
    "text": "come in this is kind of the extra magic that quick city does that allows you to",
    "start": "1741880",
    "end": "1748240"
  },
  {
    "text": "expose data like whether or not user is logged in you know the session characteristics the the the list of",
    "start": "1748240",
    "end": "1755159"
  },
  {
    "text": "contacts or whatever you want and then the runtime can kind of consume it so in",
    "start": "1755159",
    "end": "1760720"
  },
  {
    "text": "many ways loader and action can do what trpc does for you right or graph C does",
    "start": "1760720",
    "end": "1768279"
  },
  {
    "text": "for you it's not that we want to replace the trpc or graphql is it like 95% of the time this is just simpler and you",
    "start": "1768279",
    "end": "1774760"
  },
  {
    "text": "just do that right and so out of the box you get this powerful solution that for",
    "start": "1774760",
    "end": "1781640"
  },
  {
    "text": "the most people and for most cases it just works just as fine without any sort of extra integration or getting other",
    "start": "1781640",
    "end": "1788480"
  },
  {
    "text": "things in there now if you want to do graph C you certainly can but that's really more complicated thing for you",
    "start": "1788480",
    "end": "1793760"
  },
  {
    "text": "well and once again you have visibility into this right so it's reminding me a little bit of what Like Remix was doing",
    "start": "1793760",
    "end": "1800399"
  },
  {
    "text": "where they forced you to Define for any particular route what is the set of data that needs to be loaded and then they",
    "start": "1800399",
    "end": "1806159"
  },
  {
    "text": "can aggregate that and run things in parallel yeah so you can think about quick city is in many ways kind of like",
    "start": "1806159",
    "end": "1813200"
  },
  {
    "text": "remix but we add a whole bunch of things on top of it and specifically we can do",
    "start": "1813200",
    "end": "1819200"
  },
  {
    "text": "this because we have these magical dollar functions that end in dollar sign right and that gives us all kinds of",
    "start": "1819200",
    "end": "1826960"
  },
  {
    "text": "possibilities it just isn't possible with you know if you're going to use react underneath or you know not to pick",
    "start": "1826960",
    "end": "1833880"
  },
  {
    "text": "on react like the same thing is true for any other framework whether use react angular spalt solid Etc because they",
    "start": "1833880",
    "end": "1840519"
  },
  {
    "text": "can't they don't have a way to break up they breaking up the code is not a fundamental low-level primitive of the",
    "start": "1840519",
    "end": "1847039"
  },
  {
    "text": "framework they cannot do all of these magical things and so they have to do things like oh this is a serveron code",
    "start": "1847039",
    "end": "1853519"
  },
  {
    "text": "clearly I have to put it in a separate file that ends in server. TS or something like that right and this is a",
    "start": "1853519",
    "end": "1858559"
  },
  {
    "text": "client code so I can put it in a separate file containing and I can't directly refer to this thing over there",
    "start": "1858559",
    "end": "1865440"
  },
  {
    "text": "because if I do it will get pulled in and so I have to create a a name that is a string and then the string then gets",
    "start": "1865440",
    "end": "1871880"
  },
  {
    "text": "passed between the two things and as long as the string is the same then the the two sides know how to talk to each other right and all of this is just like",
    "start": "1871880",
    "end": "1878600"
  },
  {
    "text": "extra ceremony that can all be avoided if I could just like directly refer to you right but I can't because that would",
    "start": "1878600",
    "end": "1885799"
  },
  {
    "text": "mess up the bundler so we come up with all this other workarounds for it but you have a bundling thaty of this",
    "start": "1885799",
    "end": "1892000"
  },
  {
    "text": "Optimizer that knows how to break things up and the optimizer understands the intent of these things understands what",
    "start": "1892000",
    "end": "1897679"
  },
  {
    "text": "the runtime is trying to do then the optimizer can just do the breaking up for you without you even trying now you",
    "start": "1897679",
    "end": "1903960"
  },
  {
    "text": "mentioned this as a primitive and it made me got me thinking do you expose this in any way for like plug-in authors",
    "start": "1903960",
    "end": "1909840"
  },
  {
    "text": "or something like that no no it's totally exposed to you it needs to be exposed so that you can do composability",
    "start": "1909840",
    "end": "1916399"
  },
  {
    "text": "right so we have for example use client effect dollar sign or use Styles dollar sign if you wanted to make your own use",
    "start": "1916399",
    "end": "1924320"
  },
  {
    "text": "method you can compose other use methods right and in that case you might have to take a closure or some kind of a",
    "start": "1924320",
    "end": "1930960"
  },
  {
    "text": "callback that you want to Lazy load and so this is something that that is",
    "start": "1930960",
    "end": "1936080"
  },
  {
    "text": "totally exposed and as a end user or developer of the libraries you can take advantage of notice what I'm keep saying",
    "start": "1936080",
    "end": "1942240"
  },
  {
    "text": "is that the only thing we care about is that it's a function call ending in dollar sign right as long as we make a",
    "start": "1942240",
    "end": "1948639"
  },
  {
    "text": "function call that has a name that ends in a dollar sign this magic will be applied and so it is not specific to us",
    "start": "1948639",
    "end": "1956080"
  },
  {
    "text": "it is totally exposed and anybody can do this I was just pondering like extending the level of Transformations that you're",
    "start": "1956080",
    "end": "1962960"
  },
  {
    "text": "making or should we say flavoring the types of transformation so thinking",
    "start": "1962960",
    "end": "1968240"
  },
  {
    "text": "again of the data example if you know that loaders are referencing databases with particular characteristics or",
    "start": "1968240",
    "end": "1974399"
  },
  {
    "text": "something like that you might want to transform them in slightly different ways or give hints to the bundler to say",
    "start": "1974399",
    "end": "1980039"
  },
  {
    "text": "hey these things should actually be run together because we'll be able to do something yeah so this is where I think",
    "start": "1980039",
    "end": "1986440"
  },
  {
    "text": "we get to the dangerous territory of like you're creating too much magic fair enough and so we tried very hard to make",
    "start": "1986440",
    "end": "1993559"
  },
  {
    "text": "sure that any magic we do is well understood has well defined properties and we don't deviate from it My",
    "start": "1993559",
    "end": "2000399"
  },
  {
    "text": "Philosophy is that if it can be done in runtime you should always do it in runtime because there are two kinds of",
    "start": "2000399",
    "end": "2006000"
  },
  {
    "text": "cost to the compiler first of all it's magic right like weird stuff happens that you need to understand but the",
    "start": "2006000",
    "end": "2011240"
  },
  {
    "text": "second problem is because it runs at compile time there's always these weird edge cases we like you think it's doing",
    "start": "2011240",
    "end": "2017480"
  },
  {
    "text": "this thing but no because it's statically run ahead of time it didn't have the correct information and so it",
    "start": "2017480",
    "end": "2023320"
  },
  {
    "text": "has to do this generic thing not the specific thing you think you're doing right and so there are costs to",
    "start": "2023320",
    "end": "2030320"
  },
  {
    "text": "compilers and so they I have great amount of respect for compilers right and if there is a solution that cannot",
    "start": "2030320",
    "end": "2037279"
  },
  {
    "text": "be solved any other way then compilers are great but throwing compilers just because like it's cool like it's",
    "start": "2037279",
    "end": "2043320"
  },
  {
    "text": "dangerous and so we just want to make sure that like we are very well defined in terms of what the optimizer does and",
    "start": "2043320",
    "end": "2050240"
  },
  {
    "text": "it's very strictly defined in a way that's easy to explain and for EAS other people to Gro and we want to not kind of",
    "start": "2050240",
    "end": "2057480"
  },
  {
    "text": "deviate from that because we think then you get into this black magic that's dangerous okay so one more thing that I",
    "start": "2057480",
    "end": "2065079"
  },
  {
    "text": "want to talk about is one of the pieces that goes into this ability to pull",
    "start": "2065079",
    "end": "2072118"
  },
  {
    "text": "things out and compil it was being able to serialize framework State and you talked about that a lot actually can we",
    "start": "2072119",
    "end": "2078800"
  },
  {
    "text": "revisit a little bit like what is the distinction we made between serializing framework State versus application State",
    "start": "2078800",
    "end": "2084560"
  },
  {
    "text": "yeah so application stat is many Frameworks know how to serialize application state so for example if you look at nextjs your application state",
    "start": "2084560",
    "end": "2091398"
  },
  {
    "text": "gets serialized into a a special script tag that I think has a type uncore uncore nextore state if I memory serves",
    "start": "2091399",
    "end": "2098920"
  },
  {
    "text": "me right and it's just a Json basically of the state of the application so that when the application wakes up it doesn't",
    "start": "2098920",
    "end": "2105160"
  },
  {
    "text": "have to go fetch the data from the server it has the data available immediately and it can do whatever it wants to do the problem is that there is",
    "start": "2105160",
    "end": "2113440"
  },
  {
    "text": "additional state to the system which is the framework State and normally you",
    "start": "2113440",
    "end": "2119240"
  },
  {
    "text": "understand your application State because you as a developer wrote it but it's kind of hazy like what exactly does",
    "start": "2119240",
    "end": "2125359"
  },
  {
    "text": "the framework state is right and so the framework state is what",
    "start": "2125359",
    "end": "2130599"
  },
  {
    "text": "framework needs and so what is an example of that so component boundaries are a example of uh component",
    "start": "2130599",
    "end": "2137880"
  },
  {
    "text": "State locations of all the listeners is an example of state and because we are",
    "start": "2137880",
    "end": "2144280"
  },
  {
    "text": "doing things with reactivity the reactivity graph is an example of the",
    "start": "2144280",
    "end": "2150160"
  },
  {
    "text": "framework state right so let's have an example imagine an Amazon page and now",
    "start": "2150160",
    "end": "2155960"
  },
  {
    "text": "you click on a button that says add to the shopping cart how is the framework supposed to know that it has to go wake",
    "start": "2155960",
    "end": "2163040"
  },
  {
    "text": "up the shopping cart and rerender it and then even if he knows that like how is he supposed to know where in the world",
    "start": "2163040",
    "end": "2168720"
  },
  {
    "text": "is the shopping cart in the Dom you know where's the boundary like where exactly is it and then shopping cart might have",
    "start": "2168720",
    "end": "2174720"
  },
  {
    "text": "child components and so the framework wants to be like oh yeah I want to rerender the shopping cart but not its children those are not necessary right",
    "start": "2174720",
    "end": "2181920"
  },
  {
    "text": "and so it needs to know all of this information and all that information is lost on a server and so the way quick is",
    "start": "2181920",
    "end": "2190200"
  },
  {
    "text": "unique is that it serializes all of this information and the question you might",
    "start": "2190200",
    "end": "2195839"
  },
  {
    "text": "ask is like well if all that information is lost on a server how do the Frameworks of today recover this",
    "start": "2195839",
    "end": "2200880"
  },
  {
    "text": "information and the answer is they have this thing called hydration and hydration just basically means just run",
    "start": "2200880",
    "end": "2207920"
  },
  {
    "text": "the whole application from the beginning to the end and as you're running the application as you're running the",
    "start": "2207920",
    "end": "2213000"
  },
  {
    "text": "templates the framework learns about the application it learns where the component boundaries are it learns where",
    "start": "2213000",
    "end": "2218280"
  },
  {
    "text": "the listeners are it learns what the components are and in the Frameworks that are fine grain reactive like solid",
    "start": "2218280",
    "end": "2224599"
  },
  {
    "text": "JS and swelt the framework also learns about the relationships between oh this",
    "start": "2224599",
    "end": "2230599"
  },
  {
    "text": "variable is bound to this D element so if I change this variable I have to go update this Dom element right and in all",
    "start": "2230599",
    "end": "2238599"
  },
  {
    "text": "of that information is recovered during hydration but what it means is that the",
    "start": "2238599",
    "end": "2244119"
  },
  {
    "text": "hydration requires the application to be present right and so if you want to have",
    "start": "2244119",
    "end": "2249200"
  },
  {
    "text": "a strong lazy loaded world then you just kind of ruined it for yourself right",
    "start": "2249200",
    "end": "2254640"
  },
  {
    "text": "like oh I I broke up the application to million pieces I can do all this lazy loading Guess what at the beginning we",
    "start": "2254640",
    "end": "2260640"
  },
  {
    "text": "have to download everything and execute everything like that completely ruins your day right so you need some other strategy of recovering this information",
    "start": "2260640",
    "end": "2268200"
  },
  {
    "text": "and so what quick the unique thing about quick is that quick serializes all this information into the HTML in such a way",
    "start": "2268200",
    "end": "2274839"
  },
  {
    "text": "that the framework can recover it later so again using the example of Amazon",
    "start": "2274839",
    "end": "2280680"
  },
  {
    "text": "shopping page if you click on a button that says you know add to the shopping cart the framework knows that there's a",
    "start": "2280680",
    "end": "2287880"
  },
  {
    "text": "listener there and therefore it knows it has to execute something about it you know without executing anything in your",
    "start": "2287880",
    "end": "2293280"
  },
  {
    "text": "application space the framework knows that there's a listener there and it knows how to recover the you know load",
    "start": "2293280",
    "end": "2300440"
  },
  {
    "text": "the listener and execute the listener and then as The Listener is running it's probably mutating some state of the",
    "start": "2300440",
    "end": "2306160"
  },
  {
    "text": "system and so framework knew how to recover that state and it also know like",
    "start": "2306160",
    "end": "2311280"
  },
  {
    "text": "oh you modified a count property in this shopping cart object right now I know",
    "start": "2311280",
    "end": "2317520"
  },
  {
    "text": "like oh yeah that this count property is actually bound to this Dom element over there so now I have to know to go and",
    "start": "2317520",
    "end": "2324079"
  },
  {
    "text": "update that thing and so it can do all of this stuff without any of the",
    "start": "2324079",
    "end": "2329680"
  },
  {
    "text": "existing applications being present right so if you look at systems like solid JS or swel which are fine grain",
    "start": "2329680",
    "end": "2337000"
  },
  {
    "text": "reactors or view is also F reactive they have a particular challenge which is",
    "start": "2337000",
    "end": "2342760"
  },
  {
    "text": "like how do I get that information back their answer in every single case is like just rerun the application so the",
    "start": "2342760",
    "end": "2348720"
  },
  {
    "text": "interesting thing about fine grain reactivity is that once you have the reactivity graph you can be extremely",
    "start": "2348720",
    "end": "2354560"
  },
  {
    "text": "surgical about what you need to run and update but in order to have the reactivity graph you have to execute the",
    "start": "2354560",
    "end": "2360480"
  },
  {
    "text": "whole world right and that kind of where where you kind of like ah I was so close and I lost it right and so the inovation",
    "start": "2360480",
    "end": "2367760"
  },
  {
    "text": "for quick is we know how to serialize all that stuff so that we can reason",
    "start": "2367760",
    "end": "2374200"
  },
  {
    "text": "about the application the same way that that bu and solid and swelt reason about",
    "start": "2374200",
    "end": "2379359"
  },
  {
    "text": "the application but we can do it without executing the application at the beginning right and that's where the",
    "start": "2379359",
    "end": "2384800"
  },
  {
    "text": "magic comes from this is where opens up many things because by not executing the application at the beginning our",
    "start": "2384800",
    "end": "2391400"
  },
  {
    "text": "reability is instant and it means that we can be very surgical about like oh yeah but we only need to download The",
    "start": "2391400",
    "end": "2397520"
  },
  {
    "text": "Click listener and the component representing the shopping cart we don't need to download anything else on this",
    "start": "2397520",
    "end": "2403240"
  },
  {
    "text": "page does that ability to serialize have any implications for for example being",
    "start": "2403240",
    "end": "2410400"
  },
  {
    "text": "able to I'm just imagining like sharing game state or something like that right",
    "start": "2410400",
    "end": "2415440"
  },
  {
    "text": "if I build a game in in quick and I don't want to have a server behind it but I let somebody play around and maybe",
    "start": "2415440",
    "end": "2421160"
  },
  {
    "text": "I give them a way to export both application and framework State into local storage or into a URL even mhm is",
    "start": "2421160",
    "end": "2429400"
  },
  {
    "text": "that something that helps there or you really just need the application state for that I have a demo where I kind of showcase this where I open up a uh to-do",
    "start": "2429400",
    "end": "2437680"
  },
  {
    "text": "list and I interact with it add new to-do list hide some items and then I tell the system to serialize itself back",
    "start": "2437680",
    "end": "2444000"
  },
  {
    "text": "into HTML and I grab the inner HTML of the application and then I open up a",
    "start": "2444000",
    "end": "2449440"
  },
  {
    "text": "completely different browser and just paste it into you know the tab and the",
    "start": "2449440",
    "end": "2455920"
  },
  {
    "text": "application just continues running with the correct State and even the hidden stuff is available when you unhide it",
    "start": "2455920",
    "end": "2463119"
  },
  {
    "text": "and like it just runs right that's the kind of the example we're talking about the implication there is that when",
    "start": "2463119",
    "end": "2469240"
  },
  {
    "text": "you're talking about state it has to be serializable right so we have a strong guarantee that like if you're going to",
    "start": "2469240",
    "end": "2475079"
  },
  {
    "text": "have a state we need to be able to serialize it and so we'll eagerly throw errors at you saying like hey you're",
    "start": "2475079",
    "end": "2480880"
  },
  {
    "text": "trying to store something that we know later on we won't be able to serialize so like don't do that right because you",
    "start": "2480880",
    "end": "2487960"
  },
  {
    "text": "know you're storing it now but the civilization might happen later and so once the civilization is happening and",
    "start": "2487960",
    "end": "2493800"
  },
  {
    "text": "then we like throw an error then we're going to be like like oh well yeah but where do it come from right like kind of you want to do it eagerly so there are",
    "start": "2493800",
    "end": "2500520"
  },
  {
    "text": "constraints that you have to learn as a developer they're not particularly strong ones because if you think about",
    "start": "2500520",
    "end": "2506480"
  },
  {
    "text": "it nextjs is already civilizing the state of the application for you right",
    "start": "2506480",
    "end": "2511880"
  },
  {
    "text": "so the same constraints already exist in other Frameworks and nobody's screaming that this is horrible thing you know",
    "start": "2511880",
    "end": "2518400"
  },
  {
    "text": "they just learn it and they they just know like oh yeah I can't put certain things inside of of things but having",
    "start": "2518400",
    "end": "2523880"
  },
  {
    "text": "said that we can cize surprisingly many things obviously we can serialize everything Json serializes but we can also serialize promises dates and we're",
    "start": "2523880",
    "end": "2532760"
  },
  {
    "text": "even talking about serializing functions provided that they are pure mhm so like",
    "start": "2532760",
    "end": "2538800"
  },
  {
    "text": "it's a pretty rich set of things so yes there are constraints I don't think",
    "start": "2538800",
    "end": "2544119"
  },
  {
    "text": "they're a big deal specifically when I go to thiso and talk to people that are trying to build applications with Quake",
    "start": "2544119",
    "end": "2551359"
  },
  {
    "text": "It rarely comes up it's not a thing that people worry about they know know there's there's challenges with the new",
    "start": "2551359",
    "end": "2557200"
  },
  {
    "text": "new technology that people have need to get WRA their head about but this is not one of them that comes up almost ever",
    "start": "2557200",
    "end": "2563920"
  },
  {
    "text": "well that leads to kind of an interesting question what are the big challenges that people run into when they start trying to adopt quick what",
    "start": "2563920",
    "end": "2570240"
  },
  {
    "text": "feels hard to folks still yeah so people very much think in kind of classical",
    "start": "2570240",
    "end": "2576880"
  },
  {
    "text": "ways a typical example is like suppose I want to have a mouse move I want to track the",
    "start": "2576880",
    "end": "2582240"
  },
  {
    "text": "position of the mouse right the way you would do it in classical framework you'd say ah okay so I'm going to create a use",
    "start": "2582240",
    "end": "2588200"
  },
  {
    "text": "effect and inside of the use effect I'm going to say document. addent listener Mouse move and you can do that in quick",
    "start": "2588200",
    "end": "2595480"
  },
  {
    "text": "that totally works but if you think about it that's not what you want because now you're like eagerly executing code on application startup",
    "start": "2595480",
    "end": "2602960"
  },
  {
    "text": "instead what you want to do in quick is you want to say you want to run the registration of event listener on a",
    "start": "2602960",
    "end": "2609200"
  },
  {
    "text": "server and to most people that's like what are you talking about like you can't do that that's on the server there",
    "start": "2609200",
    "end": "2614599"
  },
  {
    "text": "is no Dom we're doing SSR like that can't possibly be done but the framework knows how to serialize these things and",
    "start": "2614599",
    "end": "2621040"
  },
  {
    "text": "actually it can be done on a server and so people end up writing code that is",
    "start": "2621040",
    "end": "2626880"
  },
  {
    "text": "idiomatic for other Frameworks and it just happens to work inside of quick but",
    "start": "2626880",
    "end": "2632400"
  },
  {
    "text": "it's not performant because like they'll end up eagerly registering all this listen or whatever right and pulling all",
    "start": "2632400",
    "end": "2638559"
  },
  {
    "text": "the code it's unnecessary and so a lot of issues is like you got to think like quick which means can they offload many",
    "start": "2638559",
    "end": "2645079"
  },
  {
    "text": "of these things to the server side the other thing that people are kind of uh",
    "start": "2645079",
    "end": "2650720"
  },
  {
    "text": "surprised with is that all the other Frameworks have this expectation is that this is a server code and this is a",
    "start": "2650720",
    "end": "2657400"
  },
  {
    "text": "client code and the two should never meet and so you have to separate in separate files Etc and so because people",
    "start": "2657400",
    "end": "2663760"
  },
  {
    "text": "are already pre-trained with this mental model when they come to Quick they're kind of confused it's like wait where do",
    "start": "2663760",
    "end": "2669119"
  },
  {
    "text": "I put the server code where do I put the client it's like well just put it in the same place and the right thing will happen and then they're like really that",
    "start": "2669119",
    "end": "2675760"
  },
  {
    "text": "seems strange I don't expect that right so some of this is just behavior that",
    "start": "2675760",
    "end": "2681200"
  },
  {
    "text": "they're just preconditioned with from other technologies that they have to kind of unlearn so to speak right to",
    "start": "2681200",
    "end": "2688680"
  },
  {
    "text": "kind of understand like oh the mental model is different it is not my application running in a server and then",
    "start": "2688680",
    "end": "2693880"
  },
  {
    "text": "the separate thing running in the client it's the application starts on a server and then it gets moved over and so a lot",
    "start": "2693880",
    "end": "2700280"
  },
  {
    "text": "of times people will try to do things like say you run this code on the init",
    "start": "2700280",
    "end": "2706359"
  },
  {
    "text": "phase of the component and they're surprised by it's not running inside of the client because like well the",
    "start": "2706359",
    "end": "2711599"
  },
  {
    "text": "component inited on a server right not on the client so the Constructor no longer runs on a on the client and",
    "start": "2711599",
    "end": "2717680"
  },
  {
    "text": "because they're used to the hydration world where all of the components reconstruct themselves on the client",
    "start": "2717680",
    "end": "2722920"
  },
  {
    "text": "they kind of like why isn't this working it's like well because reasonability right we are we instantiated on the server and",
    "start": "2722920",
    "end": "2730200"
  },
  {
    "text": "we continue running on the client without re instantiating everything on the client again and so there is a",
    "start": "2730200",
    "end": "2735319"
  },
  {
    "text": "little bit of learning that has to happen but once you kind of get that mental model it kind of makes totally",
    "start": "2735319",
    "end": "2740720"
  },
  {
    "text": "makes sense like yeah of course like yeah we started on the server then we move to the client but like the server",
    "start": "2740720",
    "end": "2745760"
  },
  {
    "text": "one was the one that instantiated the component the server one is the one that registered The Listener for the mouse",
    "start": "2745760",
    "end": "2751200"
  },
  {
    "text": "move and so the client only downloads the mouse move code if you actually move",
    "start": "2751200",
    "end": "2756559"
  },
  {
    "text": "the mouse right if you don't move the mouse then no code gets downloaded all right that's blowing my mind a little bit yeah it's",
    "start": "2756559",
    "end": "2762599"
  },
  {
    "text": "crazy right particularly the mouse example like and so the the correlat of",
    "start": "2762599",
    "end": "2768000"
  },
  {
    "text": "that is that a registering of a listener is adding an attribute to the Dom which",
    "start": "2768000",
    "end": "2773400"
  },
  {
    "text": "the framework does for you the coral area of that is you don't ever have to deregister The Listener because",
    "start": "2773400",
    "end": "2779720"
  },
  {
    "text": "deregistration is just removing the attribute and when the component gets destroyed with it we destroy all the",
    "start": "2779720",
    "end": "2786119"
  },
  {
    "text": "attributes right that's just the natural thing of the D it just remove takes everything out and the moment the attributes are not there the listeners",
    "start": "2786119",
    "end": "2791880"
  },
  {
    "text": "don't work and so the memory can get released that's fascinating so do you",
    "start": "2791880",
    "end": "2797839"
  },
  {
    "text": "then find that writing things in quick you tend to have fewer memory leak",
    "start": "2797839",
    "end": "2803200"
  },
  {
    "text": "problems because that has been one of the wonderful challenges that has come with the spa world as we have these Mega",
    "start": "2803200",
    "end": "2809160"
  },
  {
    "text": "JavaScript apps that just you keep opening a tab for days and the memory usage just keeps climbing yeah I think",
    "start": "2809160",
    "end": "2815839"
  },
  {
    "text": "many memory us issues are around registering listener events and then not",
    "start": "2815839",
    "end": "2822640"
  },
  {
    "text": "properly cleaning them up and so that whole category of issues kind of disappears that is not to say that you",
    "start": "2822640",
    "end": "2828200"
  },
  {
    "text": "cannot have a memory leak in quick certainly can it's just the nature of of any language not just JavaScript you can",
    "start": "2828200",
    "end": "2833280"
  },
  {
    "text": "have a memory leak but we have kind of taken out one huge category of issues",
    "start": "2833280",
    "end": "2839119"
  },
  {
    "text": "now obviously if you keep calling at event listener on your own and not following the quick way of doing things",
    "start": "2839119",
    "end": "2845280"
  },
  {
    "text": "yeah you will have memory issues but that's why we have the equivalent one that's why you have to kind of",
    "start": "2845280",
    "end": "2850920"
  },
  {
    "text": "reprogram your behavior a little bit to be like oh yeah I want to have a listener don't do the classical way use",
    "start": "2850920",
    "end": "2857240"
  },
  {
    "text": "the quick way because then all these other benefits just come out of the box I can run the listener I can register",
    "start": "2857240",
    "end": "2862520"
  },
  {
    "text": "The Listener on a server versus on a client because if you think about it registering a listener is just adding an",
    "start": "2862520",
    "end": "2868400"
  },
  {
    "text": "attribute to a Dom element and that can certainly be done on a server even if you don't have D even if you're doing",
    "start": "2868400",
    "end": "2874319"
  },
  {
    "text": "SSR even if you're streaming the HTML you can certainly insert these extra attributes on a Dom that result in you",
    "start": "2874319",
    "end": "2881240"
  },
  {
    "text": "know Mouse move or whatever okay so if somebody is listening to this and they're like wow I got to check this out",
    "start": "2881240",
    "end": "2888240"
  },
  {
    "text": "I got to learn what are the best places to go to start with quick well quick.",
    "start": "2888240",
    "end": "2893359"
  },
  {
    "text": "build.io that's the the homepage for our project from there you can find the",
    "start": "2893359",
    "end": "2899000"
  },
  {
    "text": "Discord the Discord Community is very Lively a lot of passionate people are in",
    "start": "2899000",
    "end": "2904680"
  },
  {
    "text": "there and they're helping each other so those are the two best places our quick. build.io also has good tutorials we have",
    "start": "2904680",
    "end": "2912280"
  },
  {
    "text": "a repple that's in the browser so you can try these things out without going through trouble with installing it if",
    "start": "2912280",
    "end": "2918079"
  },
  {
    "text": "you outgrow the Ripple you can go to stack blits if you type quick. new in",
    "start": "2918079",
    "end": "2924720"
  },
  {
    "text": "your browser then that URL will take you to a stack blits where you can kind of have a more richer experience and you",
    "start": "2924720",
    "end": "2931119"
  },
  {
    "text": "can build your apps and then if you're ready to do the full thing you can always type npm create quick app latest",
    "start": "2931119",
    "end": "2937760"
  },
  {
    "text": "awesome well this has been super fun to get to go a little bit deeper are there",
    "start": "2937760",
    "end": "2942920"
  },
  {
    "text": "any things that we didn't cover today but that you think people should know about quick uh I think we covered most",
    "start": "2942920",
    "end": "2948839"
  },
  {
    "text": "of it I really want to stress that quick was intentionally made to look like",
    "start": "2948839",
    "end": "2955799"
  },
  {
    "text": "other popular Technologies and so the part of the trouble we're having is that people look at it they go like oh it's",
    "start": "2955799",
    "end": "2961960"
  },
  {
    "text": "just like this other thing I know and they immediately dismiss it not understanding that the value of quick is",
    "start": "2961960",
    "end": "2968160"
  },
  {
    "text": "not that there is a different developer experience the value of quick is that there's a different user experience and",
    "start": "2968160",
    "end": "2975799"
  },
  {
    "text": "this user experience becomes evident not when you build a Hello World app it's",
    "start": "2975799",
    "end": "2982079"
  },
  {
    "text": "when you build large scale applications that's when it really starts shining right because every Hello World app can",
    "start": "2982079",
    "end": "2988200"
  },
  {
    "text": "get 100 out of 100 that page spe score every hello world I could be fast and instantaneous and yeah yeah yeah yeah",
    "start": "2988200",
    "end": "2994119"
  },
  {
    "text": "sure it's when you have a large app where things break down and so one of the things we like to talk about when it",
    "start": "2994119",
    "end": "3001079"
  },
  {
    "text": "comes to Quick is that this kind of just happened recently is that we compare different movie examples and we wrote a",
    "start": "3001079",
    "end": "3009640"
  },
  {
    "text": "blog post and then a lot of Frameworks came out and said like oh this is unfair because this particular person who wrote",
    "start": "3009640",
    "end": "3016040"
  },
  {
    "text": "the demo app didn't do these optimization they didn't do laser loading they didn't do this part they",
    "start": "3016040",
    "end": "3021520"
  },
  {
    "text": "didn't do that part no no no and what I think what it shows is that most Frameworks have the easy path and the",
    "start": "3021520",
    "end": "3028640"
  },
  {
    "text": "Performing path and those are two separate things and the problem is that when you're building things you're",
    "start": "3028640",
    "end": "3034520"
  },
  {
    "text": "always under time pressure and so you always take the easy path you never take the Performing path until you are forced",
    "start": "3034520",
    "end": "3041720"
  },
  {
    "text": "to do so and vast majority of people never do and so one thing that I think is unique about quick is that the easy",
    "start": "3041720",
    "end": "3049440"
  },
  {
    "text": "path and the performance path are one and the same inside of the quick but unfortunately that's not something you",
    "start": "3049440",
    "end": "3055799"
  },
  {
    "text": "can discover by looking at a simple example and playing for it for 5 minutes right that is something that you only",
    "start": "3055799",
    "end": "3061760"
  },
  {
    "text": "realize after you deeply build a complex app in the system and you realize hey I",
    "start": "3061760",
    "end": "3068680"
  },
  {
    "text": "have this complicated application but still minimal amount of JavaScript is getting shipped still SSR just works",
    "start": "3068680",
    "end": "3075960"
  },
  {
    "text": "beautifully because even if I turn off JavaScript most of the pages still work you know you get all these secondary",
    "start": "3075960",
    "end": "3081160"
  },
  {
    "text": "benefits that don't become obvious until you have a huge application",
    "start": "3081160",
    "end": "3087119"
  },
  {
    "text": "and so this is kind of what's been difficult kind of to explain because you have to go through a lot of things",
    "start": "3087119",
    "end": "3092599"
  },
  {
    "text": "before you get to there and before you realize you kind of stuck because you took the easy paths where there the",
    "start": "3092599",
    "end": "3098319"
  },
  {
    "text": "Performing paths awesome all right well thank you again for joining me today",
    "start": "3098319",
    "end": "3103760"
  },
  {
    "text": "mishko this has been fun I definitely am intrigued by quick and I feel like we're",
    "start": "3103760",
    "end": "3109040"
  },
  {
    "text": "seeing a trend now where people are starting to realize how the easy path of react of VI of next of whatever is is",
    "start": "3109040",
    "end": "3116760"
  },
  {
    "text": "resulting in these massive bloated applications that are slow and are",
    "start": "3116760",
    "end": "3122960"
  },
  {
    "text": "costing us time energy and money that's right and so I'm excited to see where",
    "start": "3122960",
    "end": "3129000"
  },
  {
    "text": "quick goes in helping us uh solve this by default where the easy path is the",
    "start": "3129000",
    "end": "3134359"
  },
  {
    "text": "performance path all right so that's it for today's episode thank you and this",
    "start": "3134359",
    "end": "3140079"
  },
  {
    "text": "is kall signing",
    "start": "3140079",
    "end": "3142960"
  },
  {
    "text": "up",
    "start": "3145520",
    "end": "3148520"
  },
  {
    "text": "all right that is JS party for this week thanks for listening you can get more podcasts like this one by subscribing to",
    "start": "3151240",
    "end": "3158640"
  },
  {
    "text": "our Master feed it's all Chang Log podcasts in one easy feed find it by",
    "start": "3158640",
    "end": "3164000"
  },
  {
    "text": "searching for changelog Master feed in your podcast app or on the web at changel log.com",
    "start": "3164000",
    "end": "3169480"
  },
  {
    "text": "thanks once again to fastly for CD ending for us to fly for hosting our app",
    "start": "3169480",
    "end": "3175040"
  },
  {
    "text": "servers and database and a brake master cylinder for hooking us up with the best beats in the business next up on the Pod",
    "start": "3175040",
    "end": "3182640"
  },
  {
    "text": "kall Nick AEL and ailia have been experimenting with chat GPT stable diffusion and the other generative AIS",
    "start": "3182640",
    "end": "3189880"
  },
  {
    "text": "that are taking the World by storm so they're getting together to discuss how we devs can best use them to level up",
    "start": "3189880",
    "end": "3196400"
  },
  {
    "text": "our game stay tuned for that we'll drop it into your podcast feed next",
    "start": "3196400",
    "end": "3201670"
  },
  {
    "text": "[Music] week",
    "start": "3201670",
    "end": "3208440"
  },
  {
    "text": "k",
    "start": "3210040",
    "end": "3213040"
  }
]