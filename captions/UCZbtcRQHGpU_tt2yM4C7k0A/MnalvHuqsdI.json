[
  {
    "text": "and it also does feel a little bit magic and one of the things particularly for me and I hear this a lot one of the",
    "start": "40",
    "end": "6000"
  },
  {
    "text": "things that attracted me to go was that it didn't have much magic in it it was a very clear and simple language so I now",
    "start": "6000",
    "end": "13320"
  },
  {
    "text": "I'm might even be too far the other way of allergic to Magic despite having the appearance some have told me of a",
    "start": "13320",
    "end": "20640"
  },
  {
    "text": "magician being with for change log is provided by fastly learn more at fastly.com we move fast and fix things",
    "start": "20640",
    "end": "28240"
  },
  {
    "text": "here at Chang law because of rollar check them out at roar.com and we're hosted on Leno Cloud servers at the",
    "start": "28240",
    "end": "34520"
  },
  {
    "text": "lin.com changelog this episode is brought to you",
    "start": "34520",
    "end": "40760"
  },
  {
    "text": "by digital ocean digital Ocean's developer cloud makes it simple to launch in the cloud and scale up as you",
    "start": "40760",
    "end": "46440"
  },
  {
    "text": "grow they have an intuitive control panel predictable pricing team accounts worldwide availability with a 99.99",
    "start": "46440",
    "end": "53559"
  },
  {
    "text": "uptime SLA and 24/7 365 worldclass support to back that up digital ocean",
    "start": "53559",
    "end": "59280"
  },
  {
    "text": "makes it easy easy to deploy scale store secure and monitor your Cloud environments head to do. change law to",
    "start": "59280",
    "end": "66439"
  },
  {
    "text": "get started with a $100 credit again do.",
    "start": "66439",
    "end": "71960"
  },
  {
    "text": "changelog let's do it it's go time welcome to go time your source for",
    "start": "81520",
    "end": "88040"
  },
  {
    "text": "diverse discussions from around the go Community next week on go time find out",
    "start": "88040",
    "end": "93399"
  },
  {
    "text": "what happens when a new hire an intern and a high school programmer walk into a podcast right now it's a listener",
    "start": "93399",
    "end": "100360"
  },
  {
    "text": "requested episode on reflection and metaprogramming here we [Music]",
    "start": "100360",
    "end": "115099"
  },
  {
    "text": "go hello and welcome to go time today we're talking about reflection and what",
    "start": "116719",
    "end": "123520"
  },
  {
    "text": "that means in go we'll talk about the reflect package what you can do with it",
    "start": "123520",
    "end": "129520"
  },
  {
    "text": "and some really interesting use cases for it some examples around the standard Library even and then we'll get",
    "start": "129520",
    "end": "137040"
  },
  {
    "text": "opinionated about it no doubt so joining me today it's Jana Bogen hello Jana",
    "start": "137040",
    "end": "144400"
  },
  {
    "text": "hello welcome back how are you doing good how are you yeah not bad thanks",
    "start": "144400",
    "end": "151519"
  },
  {
    "text": "we're also joined by cuz you y if you don't mind me saying you don't sound that happy to be here uh so but don't",
    "start": "151519",
    "end": "159480"
  },
  {
    "text": "worry this will cheer you up John Calhoun's also here hello John hey Matt",
    "start": "159480",
    "end": "164959"
  },
  {
    "text": "she looks like she's deep in thought about nobody else can see the video that we can but she looks like she's deep in thought about something yes well it's",
    "start": "164959",
    "end": "172519"
  },
  {
    "text": "probably she she's reflecting she's refle reflecting I'll reveal what I'm doing exactly okay yeah",
    "start": "172519",
    "end": "180000"
  },
  {
    "text": "yeah okay so maybe we should just start at the beginning at high level for anybody not familiar what is reflection",
    "start": "180000",
    "end": "187560"
  },
  {
    "text": "and what does the reflect package give us at a high level I it's kind of just a",
    "start": "187560",
    "end": "195480"
  },
  {
    "text": "way of almost metaprogramming or like interacting with code at runtime is a way i' view it I don't know what the",
    "start": "195480",
    "end": "202519"
  },
  {
    "text": "Like official definition is but everything I've ever seen that's using it is while your code is running you want to examine other pieces of code or",
    "start": "202519",
    "end": "209360"
  },
  {
    "text": "look at other things and see you know find some information about them or maybe try to modify different aspects of",
    "start": "209360",
    "end": "215200"
  },
  {
    "text": "them um so it's these things where rather than doing it as a developer at you know coding time you're doing it you",
    "start": "215200",
    "end": "220799"
  },
  {
    "text": "know later when the program is running yeah so Dynamic languages do",
    "start": "220799",
    "end": "226200"
  },
  {
    "text": "that all the time don't they like um Ruby and I think even JavaScript because in JavaScript you can like you can take",
    "start": "226200",
    "end": "232760"
  },
  {
    "text": "a string and add methods to it at runtime and you can kind of do anything you want it's a really flexible language",
    "start": "232760",
    "end": "239680"
  },
  {
    "text": "language and one of the things about go is it is a strongly typed language and",
    "start": "239680",
    "end": "245280"
  },
  {
    "text": "so sort of deliberately doesn't do that but of course the reflect package is is an exception to that rule I'd say that",
    "start": "245280",
    "end": "253319"
  },
  {
    "text": "like in in like you said the dynamic languages it's almost like it's not even thought of as something separate like",
    "start": "253319",
    "end": "259160"
  },
  {
    "text": "it's just part of the language it's just something people naturally do and if you've ever coded in like Ruby or one of",
    "start": "259160",
    "end": "264800"
  },
  {
    "text": "those languages it seems so natural because you see everybody doing it it's not you know it's not something that",
    "start": "264800",
    "end": "270280"
  },
  {
    "text": "would stick out in any code base but when you get into go it's not only is it",
    "start": "270280",
    "end": "275520"
  },
  {
    "text": "specific like you have to import this reflect package but it's also very very limited in what it can do and I think",
    "start": "275520",
    "end": "280880"
  },
  {
    "text": "that's intentional and it doesn't sort of go with the story of what go is trying to",
    "start": "280880",
    "end": "286080"
  },
  {
    "text": "achieve coming from a strongly typed uh background I was about to say that like reflection is everything that your type",
    "start": "286080",
    "end": "293120"
  },
  {
    "text": "system cannot provide as a first class you know capability but then I was",
    "start": "293120",
    "end": "298199"
  },
  {
    "text": "looking at the Wikipedia page and that's why I was so confused about the definition and like I was like you know",
    "start": "298199",
    "end": "303240"
  },
  {
    "text": "in the thoughts and Matt was thinking that I was being sad it says reflection is the ability of a process to examine",
    "start": "303240",
    "end": "311199"
  },
  {
    "text": "introspect and modify its own structure and behavior so just like basically it's everything um and then you know that",
    "start": "311199",
    "end": "318039"
  },
  {
    "text": "kind of actually makes sense if you think about the meaning of what reflection means in you know Daily",
    "start": "318039",
    "end": "324680"
  },
  {
    "text": "Language U so I think it's not even bounded to to that like little I mean I",
    "start": "324680",
    "end": "331720"
  },
  {
    "text": "I try to I think overs specify in my mental model it's just more of like everything everything about",
    "start": "331720",
    "end": "338319"
  },
  {
    "text": "introspecting and modifying the structure and behavior yeah I mean when you do type",
    "start": "338319",
    "end": "344440"
  },
  {
    "text": "assertions in go in a way that's a kind of version of this isn't it you're saying at runtime you're saying here's a",
    "start": "344440",
    "end": "351199"
  },
  {
    "text": "type and we don't know what this is but I'm going to assert it to a particular",
    "start": "351199",
    "end": "356360"
  },
  {
    "text": "type and if that's successful I can then kind of bran brch off and do something",
    "start": "356360",
    "end": "361520"
  },
  {
    "text": "uh so in a way that's kind of reflecting isn't it a little bit but that's that's still happening at compile time isn't it",
    "start": "361520",
    "end": "369680"
  },
  {
    "text": "yeah you can definitely put more checks there from compile time um but like the actual checking I'd assume some of that",
    "start": "369680",
    "end": "376080"
  },
  {
    "text": "has to happen at runtime because you don't know no I mean yeah the checking is assertion is happening in the runtime",
    "start": "376080",
    "end": "381759"
  },
  {
    "text": "so you can say that like I mean it's prospection piece and it's actual reflection but the type system is",
    "start": "381759",
    "end": "387080"
  },
  {
    "text": "providing a very nice like feature for us to do it in a nice way rather than like depending on a reflection package",
    "start": "387080",
    "end": "393520"
  },
  {
    "text": "or something so you can say that like yeah that's a reflection Behavior Uh that's a reflection feature that you",
    "start": "393520",
    "end": "400080"
  },
  {
    "text": "know represented in the language with more synthetic sugar right yeah yeah and it does it",
    "start": "400080",
    "end": "407880"
  },
  {
    "text": "does help as well it does some checks you can't do invalid kind of type assertions and things the compiler will",
    "start": "407880",
    "end": "413520"
  },
  {
    "text": "help you at some point but you're right of course it has to be at runtime that's kind of the point of it yeah yeah it's",
    "start": "413520",
    "end": "418960"
  },
  {
    "text": "definitely interesting in that sense so I guess like the type assertion",
    "start": "418960",
    "end": "424280"
  },
  {
    "text": "one is one of the ones that I think everybody's probably seen I'd say that the second most common one people have",
    "start": "424280",
    "end": "429560"
  },
  {
    "text": "probably seen is struck tags and while they might not be using them like directly themselves to read them I'd say",
    "start": "429560",
    "end": "436000"
  },
  {
    "text": "that most people who write go have at least seen struck tags and wondered like what is this thing so I I think that",
    "start": "436000",
    "end": "442599"
  },
  {
    "text": "might be another one to jump into with go because that's I definitely think that's the second most popular use case",
    "start": "442599",
    "end": "448240"
  },
  {
    "text": "yeah so anybody that's not familiar and you see this particularly if you're working with Json data you can actually",
    "start": "448240",
    "end": "454720"
  },
  {
    "text": "put a string after a field name in a struct and that string can be paused at",
    "start": "454720",
    "end": "461680"
  },
  {
    "text": "runtime and then of course it can take metadata out of it and the Json example",
    "start": "461680",
    "end": "467520"
  },
  {
    "text": "you allows you to specify the field name so you can have a different field name",
    "start": "467520",
    "end": "472680"
  },
  {
    "text": "to the one that you're using in the struct and you can also optionally choose for it to not include that field",
    "start": "472680",
    "end": "479479"
  },
  {
    "text": "at all and you can also there's like a syntax with a string and then a comma",
    "start": "479479",
    "end": "484720"
  },
  {
    "text": "which is it's a quite a strange part of go actually it's quite unusual isn't it there's not much else like it uh and you",
    "start": "484720",
    "end": "491360"
  },
  {
    "text": "can also tell it to emit the field if it's empty so if it's it's default value then it won't be included in the Json",
    "start": "491360",
    "end": "498520"
  },
  {
    "text": "object and that is kind of I remember when I first saw that it really felt",
    "start": "498520",
    "end": "505039"
  },
  {
    "text": "like almost a temporary thing but it it has proven to be very useful and pretty",
    "start": "505039",
    "end": "510479"
  },
  {
    "text": "effective for that in particular that use case but John you you wrote something that used stru tags as well",
    "start": "510479",
    "end": "517680"
  },
  {
    "text": "right that form project what what was that so I've done a couple different things like historically I've used",
    "start": "517680",
    "end": "524159"
  },
  {
    "text": "reflection in a lot of different projects so I come from a rails background and like rails is essentially",
    "start": "524159",
    "end": "529680"
  },
  {
    "text": "a large exercise in using reflection like that's kind of how I view that whole framework so it was nothing as",
    "start": "529680",
    "end": "535959"
  },
  {
    "text": "crazy as that because in go I just don't think that makes as much sense but I wanted to write some code that",
    "start": "535959",
    "end": "542360"
  },
  {
    "text": "essentially I wanted to take a struct and I wanted to generate an HTML form out of that and then I wanted to later",
    "start": "542360",
    "end": "547720"
  },
  {
    "text": "be able to parse that form whenever a User submitted it and to you know basically take all the values they submitted and put it back into that",
    "start": "547720",
    "end": "553959"
  },
  {
    "text": "struct just to make my life a little bit easier so I could reshare that across a couple different handlers and just make",
    "start": "553959",
    "end": "559240"
  },
  {
    "text": "that sort of thing simpler so I created this form package that used struct tags and there's other ways to approach this",
    "start": "559240",
    "end": "565320"
  },
  {
    "text": "which I think we should talk about but it was kind of me just looking at the problem being like is there a way to",
    "start": "565320",
    "end": "570760"
  },
  {
    "text": "handle this and the stru tags were used for things like if you needed to change the name like if the name in your field",
    "start": "570760",
    "end": "577760"
  },
  {
    "text": "had you know say you had a name and your or you had a struct and one of the fields was named email but you wanted it",
    "start": "577760",
    "end": "584200"
  },
  {
    "text": "to display eore mail in the actual form like as the name in the HTML you could",
    "start": "584200",
    "end": "589279"
  },
  {
    "text": "use struct tags to kind of change things like that and that's where I was using it but it also was like an interesting",
    "start": "589279",
    "end": "595800"
  },
  {
    "text": "exercise in the sense that it showed how confusing ref can be and go to write like to to use so I think that's",
    "start": "595800",
    "end": "603079"
  },
  {
    "text": "something that a lot of people struggle with when they get there and I don't part of me feels like that's intentional",
    "start": "603079",
    "end": "608360"
  },
  {
    "text": "like something that they did not not like they wanted it to be worse but they didn't like want it to be so easy that people just jumped in there and used it",
    "start": "608360",
    "end": "614640"
  },
  {
    "text": "for everything and when they shouldn't be yeah yeah because there's so much benefit to the type safety that's makes",
    "start": "614640",
    "end": "622480"
  },
  {
    "text": "sense doesn't it yeah and I also even found like when I was doing this I probably use truck tags more than I",
    "start": "622480",
    "end": "627839"
  },
  {
    "text": "should have in that some examples of that were like if you had helper text or default values or anything like that for",
    "start": "627839",
    "end": "634399"
  },
  {
    "text": "input Fields I actually had so you could just put struct tags in there that provided those values and as a result it",
    "start": "634399",
    "end": "641800"
  },
  {
    "text": "you could have a pretty crazy long struck tag that was thrown on on something and it looked kind of wonky because you're like you know this isn't",
    "start": "641800",
    "end": "648440"
  },
  {
    "text": "really code it's like this metadata but it's providing a lot more than what it seems like at first glance Matt you said something very",
    "start": "648440",
    "end": "655399"
  },
  {
    "text": "interesting that like when you first saw it it looked almost temporary that was like like exactly how I felt because you",
    "start": "655399",
    "end": "661320"
  },
  {
    "text": "know I have this like concerns as well like hey this is sort of like you know go is a very strongly type the simple",
    "start": "661320",
    "end": "667200"
  },
  {
    "text": "language but you know sometimes I feel like I'm over abusing struck tags and I was expecting something like an",
    "start": "667200",
    "end": "673600"
  },
  {
    "text": "annotation right like in other languages we have annotations and you can have like typed annotations and you know",
    "start": "673600",
    "end": "679639"
  },
  {
    "text": "annotations can handle more complex situations without sacrificing Too Much from the type safy and I was expecting",
    "start": "679639",
    "end": "686800"
  },
  {
    "text": "something like that uh and this was like you know one of the earlier like couple",
    "start": "686800",
    "end": "691880"
  },
  {
    "text": "of a very long time ago in the early beginnings of the language but they you know they wanted to keep everything",
    "start": "691880",
    "end": "697880"
  },
  {
    "text": "small the language didn't really grow to have annotations and one thing that I realize that I don't see a lot of big",
    "start": "697880",
    "end": "704000"
  },
  {
    "text": "mess when it comes to stke tags like I think people you know use one stke tag at a time for very like specific things",
    "start": "704000",
    "end": "711200"
  },
  {
    "text": "like you know Jason for example keys and that sort of things what's your opinion",
    "start": "711200",
    "end": "717040"
  },
  {
    "text": "on you know do you think that like like you know it's at a level that we don't actually need anything like an",
    "start": "717040",
    "end": "722920"
  },
  {
    "text": "annotation or do you think that like it's a missed opportunity just because because strike tags are hard to maintain",
    "start": "722920",
    "end": "728800"
  },
  {
    "text": "and so on like we are not like doing a good work or like we're missing some opportunities to annotate fields in a",
    "start": "728800",
    "end": "735639"
  },
  {
    "text": "more richer way yeah it's a really interesting one because there's definitely value in",
    "start": "735639",
    "end": "741480"
  },
  {
    "text": "being able to add a bit of extra metadata for particular use case to",
    "start": "741480",
    "end": "747079"
  },
  {
    "text": "structs the alternative has to just be you would describe the same thing just",
    "start": "747079",
    "end": "752360"
  },
  {
    "text": "using strong types so John in your case instead of having like a an address",
    "start": "752360",
    "end": "757639"
  },
  {
    "text": "struct with different fields and then use the U struct tags to add labels and",
    "start": "757639",
    "end": "763480"
  },
  {
    "text": "placeholders and help text and things you'd have a form type and then a field",
    "start": "763480",
    "end": "769560"
  },
  {
    "text": "type probably and it's quite verbose but it's very clear so I guess that's the",
    "start": "769560",
    "end": "775519"
  },
  {
    "text": "benefit but I always was told and I'm not I don't know about this but I I was",
    "start": "775519",
    "end": "781040"
  },
  {
    "text": "always told that it's slow that like struct tags are slow to PA and is that",
    "start": "781040",
    "end": "787880"
  },
  {
    "text": "the case still have there has there been any work optimizing that or is it actually pretty quick I don't know but",
    "start": "787880",
    "end": "795040"
  },
  {
    "text": "I've never worked on a project where that type of speed has mattered like if I'm rendering HTML and sending it back",
    "start": "795040",
    "end": "800120"
  },
  {
    "text": "to the user chances are sending that HTML back to the user is going to take significantly more time than whatever",
    "start": "800120",
    "end": "805880"
  },
  {
    "text": "the reflect struct tag parsing is going to take so just wasn't a major concern and I will say when you talked about the",
    "start": "805880",
    "end": "811800"
  },
  {
    "text": "form like having a form type I need to get this into gists and share it with the episode like maybe I'll put it in",
    "start": "811800",
    "end": "817279"
  },
  {
    "text": "the show notes but I actually have two versions where one I actually did with a form package that takes something like",
    "start": "817279",
    "end": "822760"
  },
  {
    "text": "that and takes a struct and just generates some HTML if you provide like an HTML template and then the other one",
    "start": "822760",
    "end": "828079"
  },
  {
    "text": "is more of a like you describe a form type I'd have another struck that would be like this is my signup form struct",
    "start": "828079",
    "end": "834000"
  },
  {
    "text": "but I would write a method on that that used my generic form type and basically spit out like what that should look like",
    "start": "834000",
    "end": "839320"
  },
  {
    "text": "and I knew how to render that in HTML with my templates so I didn't use reflect at all in that version and you're right it is a lot more verbose",
    "start": "839320",
    "end": "846199"
  },
  {
    "text": "but I think that in some ways it's definitely better CU it's much clearer what's happening and then in other ways",
    "start": "846199",
    "end": "853240"
  },
  {
    "text": "it's it's kind of just depends on the type of project I think is what it comes down to because for some quick project where you want to throw a form up it's",
    "start": "853240",
    "end": "858920"
  },
  {
    "text": "nice to have that you know this package just does it um in other cases where you're going for like this is going to be a you know a much large or much",
    "start": "858920",
    "end": "865839"
  },
  {
    "text": "longer lived project um we might need way more optimization of stuff like sometimes it makes sense to go with",
    "start": "865839",
    "end": "871399"
  },
  {
    "text": "something a little bit easier to change and a little bit more verbose but you know it as a result it's still um get",
    "start": "871399",
    "end": "877279"
  },
  {
    "text": "you the same results yeah I know that the old data store in app engine used to use them",
    "start": "877279",
    "end": "884199"
  },
  {
    "text": "usually it was around field names but you could also specify like that you didn't want an index to be built on a",
    "start": "884199",
    "end": "890199"
  },
  {
    "text": "particular field that you were then going to put in the data store so I mean it's extremely powerful to just be able",
    "start": "890199",
    "end": "895959"
  },
  {
    "text": "to annotate your structs in that way and it makes sense because you really are",
    "start": "895959",
    "end": "901600"
  },
  {
    "text": "talking about properties of that field in a very real way so yeah and you know",
    "start": "901600",
    "end": "908000"
  },
  {
    "text": "typed annotations which is I remember that from C I think Java has it too and",
    "start": "908000",
    "end": "913120"
  },
  {
    "text": "so the idea there is that you have actual types in your code and you can",
    "start": "913120",
    "end": "919399"
  },
  {
    "text": "use those to annotate fields and then I suppose you can check to see the for the",
    "start": "919399",
    "end": "925880"
  },
  {
    "text": "existence of those and you can probably interrogate them and and programmatically process them that's a",
    "start": "925880",
    "end": "931399"
  },
  {
    "text": "kind of cool meta programming approach and you still probably get a lot of type",
    "start": "931399",
    "end": "936720"
  },
  {
    "text": "safety with that too yeah also maintainable is higher um you can also easily run queries like I mean you can",
    "start": "936720",
    "end": "942920"
  },
  {
    "text": "ask your Editor to like hey show me all the uses of this annotation or you want to you know let's assume that um you",
    "start": "942920",
    "end": "949199"
  },
  {
    "text": "want to modify a value in an annotation you can easily you know like search for that and like just kind of like go and",
    "start": "949199",
    "end": "955920"
  },
  {
    "text": "like refactor everything all around so um having some type safet this kind of like allows you to do that but again as",
    "start": "955920",
    "end": "962800"
  },
  {
    "text": "I said like I I don't think that like we're over abusing stru tags Ino maybe it's because like they're not like typed",
    "start": "962800",
    "end": "969319"
  },
  {
    "text": "or whatever so everybody's kind of like cautious about not over you know using them so I think we we still kind of like",
    "start": "969319",
    "end": "975360"
  },
  {
    "text": "have a nice balance like they're very small but yeah you know I think the the the biggest problem is uh people are",
    "start": "975360",
    "end": "981639"
  },
  {
    "text": "afraid of since they they're unstructured and you need to parse them people are thinking like kind of like",
    "start": "981639",
    "end": "987800"
  },
  {
    "text": "scared of like maintainability as well as like some of the performance implications if I if there's",
    "start": "987800",
    "end": "993079"
  },
  {
    "text": "any like I agree entirely with what Jana said with the sense that it might be because that they're a little bit harder",
    "start": "993079",
    "end": "999360"
  },
  {
    "text": "to maintain that people don't use them as much whereas if you put those annotated tags in there I almost wonder",
    "start": "999360",
    "end": "1005120"
  },
  {
    "text": "if people would use them more than they do now and use them in cases where they don't make a lot of sense CU I've even",
    "start": "1005120",
    "end": "1010920"
  },
  {
    "text": "seen that with struck tags where like I think there's a class of problems that make sense for stru tags like encoding",
    "start": "1010920",
    "end": "1017160"
  },
  {
    "text": "with Json or really encoding with almost anything that's similar to that encoding is a great example where your struct",
    "start": "1017160",
    "end": "1023560"
  },
  {
    "text": "might not match exactly how it needs to encode so you need to like have some way of defining how it should encode and decode and ORS are kind of the same they",
    "start": "1023560",
    "end": "1031319"
  },
  {
    "text": "kind of fall into that same class where if you're building an RM where you just want to quickly say put this into the",
    "start": "1031319",
    "end": "1036600"
  },
  {
    "text": "SQL database and you know here's what the names of the fields are in the SQL database like that makes sense but then there's other libraries out there like",
    "start": "1036600",
    "end": "1043720"
  },
  {
    "text": "validation libraries where you throw things like this field is required and",
    "start": "1043720",
    "end": "1049039"
  },
  {
    "text": "I'm not trying to say people should never use those but I do see those as potentially being problematic long term",
    "start": "1049039",
    "end": "1056039"
  },
  {
    "text": "you know they could lead to code that has a bunch of different struct tags all littered in this you know type and it's",
    "start": "1056039",
    "end": "1061480"
  },
  {
    "text": "really hard to understand what each stru tag is actually doing um how they all interact together and there's no",
    "start": "1061480",
    "end": "1067000"
  },
  {
    "text": "compiler safety and if we put annotated tags in there I wonder if people would just be more willing to do that rather",
    "start": "1067000",
    "end": "1072200"
  },
  {
    "text": "than look at other approaches yeah I've seen linters that",
    "start": "1072200",
    "end": "1077840"
  },
  {
    "text": "check the Jason tags so if you miss a quote or if it's malformed in some way",
    "start": "1077840",
    "end": "1083480"
  },
  {
    "text": "um then some I had it once some linter will say oh this this is malformed it's",
    "start": "1083480",
    "end": "1090000"
  },
  {
    "text": "not done by the compiler so it's not quite the same safety but I wonder if it is a sort of benefit of it not being a",
    "start": "1090000",
    "end": "1096600"
  },
  {
    "text": "very attractive API that people tend to avoid it for that reason and it also does feel a little bit magic and one of",
    "start": "1096600",
    "end": "1103799"
  },
  {
    "text": "the things particularly for me and I hear this a lot one of the things that attracted me to go was that it didn't",
    "start": "1103799",
    "end": "1109799"
  },
  {
    "text": "have much magic in it it was a very kind of clear and simple language so I now",
    "start": "1109799",
    "end": "1115679"
  },
  {
    "text": "I'm might even be too far the other way of kind of allergic to Magic despite",
    "start": "1115679",
    "end": "1120720"
  },
  {
    "text": "having the appearance some have told me of a magician yeah the magic part is it's",
    "start": "1120720",
    "end": "1126080"
  },
  {
    "text": "it's hard because I remember the first time I use struck tags when I was first learning go I think I was doing something with mongod DB and you use I",
    "start": "1126080",
    "end": "1134799"
  },
  {
    "text": "think it's Bon to you know Define sort of the The Struck tags and I remember when I was doing that I'm setting up",
    "start": "1134799",
    "end": "1140520"
  },
  {
    "text": "these struck tags and in my head I'm sitting there thinking do I need to import something for this to work like why is my code okay with this being here",
    "start": "1140520",
    "end": "1147480"
  },
  {
    "text": "without me importing that and it really confused me for a while cuz I'm just like I don't understand how this is",
    "start": "1147480",
    "end": "1153840"
  },
  {
    "text": "compiling and it wasn't until later when I dove into stuff and sort of understood it but at the time it really did feel like magic and that was slightly",
    "start": "1153840",
    "end": "1160559"
  },
  {
    "text": "frustrating when I was first you know learning about it cuz I'm like I don't know what's going on I mean it's",
    "start": "1160559",
    "end": "1165840"
  },
  {
    "text": "literally a string isn't it yeah but you still you're like surely the compiler is doing something with this like it leads",
    "start": "1165840",
    "end": "1171120"
  },
  {
    "text": "to things being written somewhere so you're like how does that work and it was just confusing for a while and then",
    "start": "1171120",
    "end": "1177080"
  },
  {
    "text": "later when you realize oh they're just parsing this string and you know the Bon package later when it's being used is",
    "start": "1177080",
    "end": "1182480"
  },
  {
    "text": "doing it then yeah that makes more sense but at the time I was just very confused as to what was going",
    "start": "1182480",
    "end": "1188480"
  },
  {
    "text": "on yeah they reflect API to interrogate those stru tags actually is quite good",
    "start": "1188480",
    "end": "1194640"
  },
  {
    "text": "it's quite a simple API cuz some of the reflect package is is It's So Meta isn't",
    "start": "1194640",
    "end": "1201200"
  },
  {
    "text": "it and some of it makes sense like you get the you can get the value of something and the value is a struct it's",
    "start": "1201200",
    "end": "1207159"
  },
  {
    "text": "a strong type in the reflect package and that describes the value and then but",
    "start": "1207159",
    "end": "1212320"
  },
  {
    "text": "values of course because they can be lots of different types of things you end up with loads of methods that most",
    "start": "1212320",
    "end": "1220120"
  },
  {
    "text": "of the time are illegal to call like if you try and get the length of an integer",
    "start": "1220120",
    "end": "1225760"
  },
  {
    "text": "you know of course the methods are there in the reflect package P AG to do that so at compile time you could do it and",
    "start": "1225760",
    "end": "1231600"
  },
  {
    "text": "it's only then at runtime you're going to find out you can't get the length of an integer there's lots of examples of",
    "start": "1231600",
    "end": "1237640"
  },
  {
    "text": "that so you do end up checking everything you'd be very verbose when it comes to kind of writing defensive code",
    "start": "1237640",
    "end": "1244840"
  },
  {
    "text": "to make sure that you're not going to have any of these runtime weird things and obviously testing and things helps",
    "start": "1244840",
    "end": "1250400"
  },
  {
    "text": "but yeah you mentioned testing but it's hard to test as well there's no like you know EC canonical set of tests that you",
    "start": "1250400",
    "end": "1257200"
  },
  {
    "text": "want to run I worked on um some of the like you know database packages and there was all this like since go doesn't",
    "start": "1257200",
    "end": "1263240"
  },
  {
    "text": "have generics which is something that maybe we can discuss in the context of this talk we rely a lot of on like",
    "start": "1263240",
    "end": "1269520"
  },
  {
    "text": "interfaces and like type inversion and you know if you have like a slice of interfaces you know it could be either a",
    "start": "1269520",
    "end": "1276760"
  },
  {
    "text": "value or a pointer or a pointer of pointer then you have to like do all that like Magic by using the reflect",
    "start": "1276760",
    "end": "1281880"
  },
  {
    "text": "package and reflect package is already a very variable thing so wrapping and unwrapping like all of those types is",
    "start": "1281880",
    "end": "1287720"
  },
  {
    "text": "very hard and there I I couldn't figure out an easy way to test because there was like no set of like canonical things",
    "start": "1287720",
    "end": "1294960"
  },
  {
    "text": "like hey uh if the standard library was providing maybe some sort of like hey please consider testing this or like",
    "start": "1294960",
    "end": "1301279"
  },
  {
    "text": "providing a list of things to to test that would be so much easier yeah yeah because you have to",
    "start": "1301279",
    "end": "1308600"
  },
  {
    "text": "probably test for all the different possible types and things like that and",
    "start": "1308600",
    "end": "1313799"
  },
  {
    "text": "and then of course arrays and slices exactly yeah it's interesting",
    "start": "1313799",
    "end": "1319880"
  },
  {
    "text": "that Matt your example of one of the easier use cases was the value of like getting the value of something and the",
    "start": "1319880",
    "end": "1326159"
  },
  {
    "text": "funny part was that was one of the first ones I had issues with when I first used the reflect library because when somebody passes something in you like",
    "start": "1326159",
    "end": "1332679"
  },
  {
    "text": "they pass in a string you're like okay I'm going to get the value of this and that makes sense your code works and everything seems great and like yeah",
    "start": "1332679",
    "end": "1338400"
  },
  {
    "text": "there are things like length and stuff like that that might not work but you know that that isn't always going to",
    "start": "1338400",
    "end": "1343480"
  },
  {
    "text": "work but then somebody passes in like a nil pointer that has a type but it's a nil po",
    "start": "1343480",
    "end": "1348760"
  },
  {
    "text": "and all of a sudden your code breaks and you're like what just happened and you end up with these weird cases where if",
    "start": "1348760",
    "end": "1354279"
  },
  {
    "text": "the type kind is a pointer and if it's nil then you need to like use reflect.",
    "start": "1354279",
    "end": "1360559"
  },
  {
    "text": "new to instantiate a new element and then like if it's an interface you need to like get the underlying element type",
    "start": "1360559",
    "end": "1367520"
  },
  {
    "text": "that it's pointing to because the interface doesn't really help you much like there's all these weird cases that you get to where it seems really simple",
    "start": "1367520",
    "end": "1374679"
  },
  {
    "text": "like I just want the value of this but that's really not what's happening so you end up with like all of these edge cases and even once you get it working",
    "start": "1374679",
    "end": "1381039"
  },
  {
    "text": "and you have some tests where like okay we pass in an empty pointer that has a type we pass in an empty interface uh we",
    "start": "1381039",
    "end": "1386640"
  },
  {
    "text": "pass in an you know like an actual value set to that interface you have tests for all these at the very end of it you're",
    "start": "1386640",
    "end": "1392440"
  },
  {
    "text": "still thinking I don't know what edge cases I'm missing because there's going to be one like there's almost no way",
    "start": "1392440",
    "end": "1397559"
  },
  {
    "text": "that there's not yeah I mean in a way it's it's leaking the internals of how",
    "start": "1397559",
    "end": "1402640"
  },
  {
    "text": "go actually works you do tend to learn quite a lot about the type system if you do have to use it but frankly I often",
    "start": "1402640",
    "end": "1409919"
  },
  {
    "text": "end up in a kind of trial and error situation relying on a tdd process to",
    "start": "1409919",
    "end": "1415039"
  },
  {
    "text": "tell me if I got it right or not I've often written if I've used the reflect package I often will have code where I",
    "start": "1415039",
    "end": "1421679"
  },
  {
    "text": "call the LM to get the element and then for some reason I'm not sure why I have",
    "start": "1421679",
    "end": "1427080"
  },
  {
    "text": "to call it again and it's like there would be a great reason for that but I don't know what it is and I don't really",
    "start": "1427080",
    "end": "1432760"
  },
  {
    "text": "have time and I know that if I just call lm. LM then I get the thing I need in this case cuz the test passes so I end",
    "start": "1432760",
    "end": "1438480"
  },
  {
    "text": "up being very sort of Brute Force when it comes to reflection coding which which doesn't feel great you know I",
    "start": "1438480",
    "end": "1444440"
  },
  {
    "text": "don't use tddd that often but like using reflect is one of the cases where I most definitely use it because I'm like here",
    "start": "1444440",
    "end": "1450640"
  },
  {
    "text": "are all the different things I know I'm going to put into this and they all need to work and it's just so much easier to start with that because you're just",
    "start": "1450640",
    "end": "1456919"
  },
  {
    "text": "otherwise you're just like yeah this works and then you go to run it and nothing works and you're like I don't know what's going on and I'm like looking at some code",
    "start": "1456919",
    "end": "1464080"
  },
  {
    "text": "that I've written ref reflect and I'm seeing like the same thing where it's like you know type. Elm and then like",
    "start": "1464080",
    "end": "1471039"
  },
  {
    "text": "once you create that reflect. new using that you're like LM for that and you're like I don't looking at this code I'm",
    "start": "1471039",
    "end": "1476240"
  },
  {
    "text": "like I have no idea why I did these things I just know they work which is really weird one thing that I realized",
    "start": "1476240",
    "end": "1482559"
  },
  {
    "text": "that also I think the current type system of go is like contributing to some of these problems because you know",
    "start": "1482559",
    "end": "1488120"
  },
  {
    "text": "we kind of like fall back to this like interface as an argument or like slice of interfaces as an argument and then",
    "start": "1488120",
    "end": "1494520"
  },
  {
    "text": "you know like all that like type inv version just because you can't limit what the use user want to do or what the user want to pass like you have to",
    "start": "1494520",
    "end": "1500039"
  },
  {
    "text": "handle all of those cases you know for your library to work uh one typical example uh from the spinner go packages",
    "start": "1500039",
    "end": "1507200"
  },
  {
    "text": "we have is it has to do type Inversion from the argument that user is passing",
    "start": "1507200",
    "end": "1512440"
  },
  {
    "text": "which is like some interface and it could be anything it could be a strug or it could be like a pointer to a stru or",
    "start": "1512440",
    "end": "1518919"
  },
  {
    "text": "array or whatever but it has to know about the type by doing type inversion so you shouldn't be passing a regular",
    "start": "1518919",
    "end": "1525000"
  },
  {
    "text": "Neil and you should be passing a typed Neil so go has all this like weird stuff as well as like doesn't have any",
    "start": "1525000",
    "end": "1531399"
  },
  {
    "text": "anything like you know for generics or whatever so it like invites all this like complex stuff to be handled by the",
    "start": "1531399",
    "end": "1537440"
  },
  {
    "text": "libraries by using the FL package and I think it contributes to the problem and we're all experiencing by like doing all",
    "start": "1537440",
    "end": "1543440"
  },
  {
    "text": "this like lm. LMS and don't necessarily understand why but it's just you know we're the the entire language is",
    "start": "1543440",
    "end": "1549960"
  },
  {
    "text": "somewhat uh contributing to the problem that's another good point you made is that if you're working with reflect",
    "start": "1549960",
    "end": "1556240"
  },
  {
    "text": "you're almost always accepting the empty interface like that's almost always what your argument is and that's usually a",
    "start": "1556240",
    "end": "1563279"
  },
  {
    "text": "bad sign for code when that's what you're accepting yeah but like you say in some cases it's unavoidable and one of the",
    "start": "1563279",
    "end": "1569880"
  },
  {
    "text": "things that a lot of us use every day is the Json marshalling and unmarshaling and that with that thing you pass in you",
    "start": "1569880",
    "end": "1577200"
  },
  {
    "text": "can pass in any type because of course it can unmarshal into a struct type that",
    "start": "1577200",
    "end": "1582240"
  },
  {
    "text": "you've written or a map actually map string interface it can do that no problem and it actually the reflect",
    "start": "1582240",
    "end": "1588640"
  },
  {
    "text": "package can instantiate things too can't it it can if you pass in a map it will",
    "start": "1588640",
    "end": "1594919"
  },
  {
    "text": "create the map for you right and things like that so it does get quite strange",
    "start": "1594919",
    "end": "1601399"
  },
  {
    "text": "and I I remember in the early days I wanted to I was writing a mocking thing",
    "start": "1601399",
    "end": "1606679"
  },
  {
    "text": "for testify and I really wanted at runtime to create the mocked struct from",
    "start": "1606679",
    "end": "1613360"
  },
  {
    "text": "an interface or from another struct and at the time you couldn't do it but since then I've actually seen I don't know if",
    "start": "1613360",
    "end": "1619600"
  },
  {
    "text": "it's possible but I've seen functions and methods that seem like you can",
    "start": "1619600",
    "end": "1624799"
  },
  {
    "text": "actually now instantiate structs and things I'd have to check but that is quite powerful and if you feel like you",
    "start": "1624799",
    "end": "1629960"
  },
  {
    "text": "know you think about we don't have generics it is quite tempting to have a look there and see if you could do do",
    "start": "1629960",
    "end": "1637600"
  },
  {
    "text": "the work the hard work and get it done and and then have this extremely intelligent Dynamic kind of",
    "start": "1637600",
    "end": "1643760"
  },
  {
    "text": "functionality which would be very interesting um and in test code maybe",
    "start": "1643760",
    "end": "1649520"
  },
  {
    "text": "maybe you're okay with that not be you know it's not going to be in a tight Loop you don't want test code to ever be slow but it's not going to be in a low",
    "start": "1649520",
    "end": "1656480"
  },
  {
    "text": "latency situation running tests all the time um of course we still want test code to be very fast yeah it's like Yan",
    "start": "1656480",
    "end": "1664519"
  },
  {
    "text": "said about how the the typing system is limited and then you mentioned like the Json encoding and I'm sitting here",
    "start": "1664519",
    "end": "1670240"
  },
  {
    "text": "thinking like even cases where you know you have to pass in a pointer like you know if you can't just",
    "start": "1670240",
    "end": "1675919"
  },
  {
    "text": "pass in the the shuck you have to pass in and a pointer to the struct to you know get the values back and like even",
    "start": "1675919",
    "end": "1681360"
  },
  {
    "text": "having a typing system that sort of allowed you allowed you to restrict that would have helped but because of the way",
    "start": "1681360",
    "end": "1687039"
  },
  {
    "text": "things are set up it can't do that instead you have to rely on maybe an error or something this is not meant to",
    "start": "1687039",
    "end": "1692320"
  },
  {
    "text": "be like you know bash and go or something it's just it's a struggle sometimes when you see that because it's I'm sure confusing for some",
    "start": "1692320",
    "end": "1698760"
  },
  {
    "text": "people yeah well what what would the Jason package what would that look like if it didn't use reflect I mean you",
    "start": "1698760",
    "end": "1704880"
  },
  {
    "text": "almost certainly would have some kind of call back where you but you'd still have interfaces because you don't know the",
    "start": "1704880",
    "end": "1710480"
  },
  {
    "text": "value type yeah it would almost have to be something like encode this and then like instead of saying pass an interface",
    "start": "1710480",
    "end": "1716640"
  },
  {
    "text": "it would almost have to say like it has to be a pointer or you know it would almost have to be something along those lines but even then that's confusing cuz",
    "start": "1716640",
    "end": "1723440"
  },
  {
    "text": "Maps don't always work that way if I recall correctly like I think you can just pass a map in there and it doesn't",
    "start": "1723440",
    "end": "1729399"
  },
  {
    "text": "have to be a pointer but I don't remember does that have to be a pointer to one it's I haven't passed map into",
    "start": "1729399",
    "end": "1734880"
  },
  {
    "text": "that in so long that I I should go check what we've been passing in strs oh yeah",
    "start": "1734880",
    "end": "1740799"
  },
  {
    "text": "I decode into strs most of the time well if you're writing anything where you don't know the data structure you know",
    "start": "1740799",
    "end": "1747480"
  },
  {
    "text": "some apis do do that I mean it is kind of dangerous territory but if ever you don't know the actual types I mean I I",
    "start": "1747480",
    "end": "1755360"
  },
  {
    "text": "wrote a little it's not finished it's kind of works but it's it's not by any means ready but it's basically a fake",
    "start": "1755360",
    "end": "1763000"
  },
  {
    "text": "Json data generator so you pass in any data I mean you can pass in a struct in fact",
    "start": "1763000",
    "end": "1770279"
  },
  {
    "text": "and it will generate lots of examples of that struct and it uses Jason to do it because actually just marshalling to and",
    "start": "1770279",
    "end": "1776559"
  },
  {
    "text": "from Json at least in the API is is a very easy thing to do and so in that sort of case yeah you know if if that",
    "start": "1776559",
    "end": "1783080"
  },
  {
    "text": "was an API hosted on a website you would want people to be able to pass in any kind of Json including an array of",
    "start": "1783080",
    "end": "1790760"
  },
  {
    "text": "objects as well as a single object and then it could maybe then generate some Test example data from that that was the",
    "start": "1790760",
    "end": "1797679"
  },
  {
    "text": "idea and that was very meta so those those use cases aren't as common I",
    "start": "1797679",
    "end": "1804120"
  },
  {
    "text": "suppose but the Json API I think is great for when it comes to just you know",
    "start": "1804120",
    "end": "1810720"
  },
  {
    "text": "as a user of it yeah it would be strange You' probably end up if if you didn't have reflect you would end up with some",
    "start": "1810720",
    "end": "1817120"
  },
  {
    "text": "function where you get given the key as a string and maybe the value as some bites and then it's up to you based on",
    "start": "1817120",
    "end": "1823640"
  },
  {
    "text": "your knowledge of your particular situation to then kind of unmarshal",
    "start": "1823640",
    "end": "1829279"
  },
  {
    "text": "those bites and so it is nice that the standard Library does that for us for sure and by the way if it didn't have",
    "start": "1829279",
    "end": "1836559"
  },
  {
    "text": "that I think that would hurt Go's reputation I can't I can't you know imagine the hacka news article on this",
    "start": "1836559",
    "end": "1842480"
  },
  {
    "text": "of how you have to do Jason marshalling you know yeah I mean go wouldn't be",
    "start": "1842480",
    "end": "1847760"
  },
  {
    "text": "adopted this you know widely if that was not thing that's right absolutely even",
    "start": "1847760",
    "end": "1853159"
  },
  {
    "text": "with it as is there's already a couple cases with Json that are challenging like uh like you said you have strs but",
    "start": "1853159",
    "end": "1859760"
  },
  {
    "text": "like I think stripe's an example of this where like payment sources can be a card or like a bank account so like you have",
    "start": "1859760",
    "end": "1866279"
  },
  {
    "text": "this array of things that can be different and you kind of need to like write your own type to you know unmarshal it correctly so you end up",
    "start": "1866279",
    "end": "1872799"
  },
  {
    "text": "having to write some custom stuff for that and I imagine if you just didn't have the Json package at all that it",
    "start": "1872799",
    "end": "1877840"
  },
  {
    "text": "would just be a nightmare of people complaining and saying this is awful CU I even on cases like that where you have",
    "start": "1877840",
    "end": "1883960"
  },
  {
    "text": "to write custom I still leverage as much of the Json package as POS possible like make a struct with just that one field I",
    "start": "1883960",
    "end": "1890039"
  },
  {
    "text": "want you know unmarshal it figure out what it is and then pass in the struct for whichever type I care about and that",
    "start": "1890039",
    "end": "1895639"
  },
  {
    "text": "just saves me the work of doing any of the actual overhead of how do I unmarshal [Music]",
    "start": "1895639",
    "end": "1905960"
  },
  {
    "text": "this hi everyone panelist John coun here as many of you know when I'm not",
    "start": "1905960",
    "end": "1911200"
  },
  {
    "text": "recording go Time episodes I create programming courses some of these are paid and that keeps the lights on at my",
    "start": "1911200",
    "end": "1916360"
  },
  {
    "text": "house so thank thank you to anyone who has purchased one of those but I also offer free courses one of those free",
    "start": "1916360",
    "end": "1921840"
  },
  {
    "text": "courses is go for sizes it's a series of 20 go programming exercises and in each",
    "start": "1921840",
    "end": "1927159"
  },
  {
    "text": "exercise we build something new or improve upon something we built in a previous exercise each exercise is",
    "start": "1927159",
    "end": "1933360"
  },
  {
    "text": "designed to teach you something unique about go and they're also a lot of fun so if you want to check it out you can do that at go for sizes.com",
    "start": "1933360",
    "end": "1940559"
  },
  {
    "text": "gotime that's g o p h e r c i",
    "start": "1940559",
    "end": "1945799"
  },
  {
    "text": "ses.com slgo time or you can think of it as gopher plus exercises mashed together",
    "start": "1945799",
    "end": "1951679"
  },
  {
    "text": "into one word because that's where it came",
    "start": "1951679",
    "end": "1955440"
  },
  {
    "text": "[Music]",
    "start": "1957650",
    "end": "1962099"
  },
  {
    "text": "from so earlier Matt you were talking about struck tags and one of the things Jan and I had uh sort of talked about a",
    "start": "1963600",
    "end": "1970200"
  },
  {
    "text": "little bit before the show started was in some ways I kind of feel like struck tags would benefit being its own",
    "start": "1970200",
    "end": "1976000"
  },
  {
    "text": "separate Library like would benefit from that because then you can kind of separate this I feel like struck tags",
    "start": "1976000",
    "end": "1981919"
  },
  {
    "text": "are the safest version of reflection out there or you know like where you import the reflect package and then everything",
    "start": "1981919",
    "end": "1988320"
  },
  {
    "text": "else is kind of the maybe not worse but it's definitely a little bit scarier so like having that you know",
    "start": "1988320",
    "end": "1995480"
  },
  {
    "text": "Edge case where you could just pull out struck tags might be useful to actually have as a separate like okay I'm just looking at struck tags here yeah I see",
    "start": "1995480",
    "end": "2002519"
  },
  {
    "text": "what you mean so that you don't have to have all the all the the entire refle package imported into your code and I",
    "start": "2002519",
    "end": "2009279"
  },
  {
    "text": "think the reflect package also has unsafe in there although I think there's a lot of very normal packages also do",
    "start": "2009279",
    "end": "2015760"
  },
  {
    "text": "have unsafe um but but yeah I see what you mean so that you would you would in",
    "start": "2015760",
    "end": "2021039"
  },
  {
    "text": "order to pause the struct tags you would have import a different like a reflect SL struct tags package or something H",
    "start": "2021039",
    "end": "2028399"
  },
  {
    "text": "quite like that M you should um you should tell someone about that I I remember in the earlier days of",
    "start": "2028399",
    "end": "2035039"
  },
  {
    "text": "go like they were saying like hey if you're important reflect package that's like a no no like it was almost like",
    "start": "2035039",
    "end": "2040159"
  },
  {
    "text": "considered as an unsafe because you know you also are dependent on unsafe for a lot of reasons and so on but you know it",
    "start": "2040159",
    "end": "2046000"
  },
  {
    "text": "was one of those like import lines that you should never see or you should be very careful if you have ever seen it",
    "start": "2046000",
    "end": "2052440"
  },
  {
    "text": "and you should be very controlled about your usage and so on but you know all of a sudden everybody starts to you know",
    "start": "2052440",
    "end": "2057760"
  },
  {
    "text": "import reflect because you know it does a lot of like fundamental things like the strug tags so I think it just kind",
    "start": "2057760",
    "end": "2063480"
  },
  {
    "text": "of also gives a lot of like mental separation to the user if it was a separate package so you can write linter",
    "start": "2063480",
    "end": "2069878"
  },
  {
    "text": "tools and whatever to catch for import reflect but you know like at Le like some of the basics or some of the like",
    "start": "2069879",
    "end": "2075679"
  },
  {
    "text": "more easier concerns can be Liv in different packages and uh one of the things that I've seen related to this",
    "start": "2075679",
    "end": "2082158"
  },
  {
    "text": "was people if they want to uh rely on reflect package they don't necessarily",
    "start": "2082159",
    "end": "2087200"
  },
  {
    "text": "import it all around they just kind of like go and like encapsulate like all the reflect usage in a different package",
    "start": "2087200",
    "end": "2093440"
  },
  {
    "text": "and then they provide some utilities from that package uh have you seen anything like this or have you done anything like that no but that makes",
    "start": "2093440",
    "end": "2100640"
  },
  {
    "text": "sense to me at least then you've got all of that weirdness in one place um but I",
    "start": "2100640",
    "end": "2106280"
  },
  {
    "text": "don't know that if that's a healthy approach you know cuz that's just you know that's kind of like kitchen sink or",
    "start": "2106280",
    "end": "2112800"
  },
  {
    "text": "utils S I've definitely done the have one file like source file where like",
    "start": "2112800",
    "end": "2118320"
  },
  {
    "text": "this is where all my reflect stuff got put and but like I've never done anything big enough with Go's reflection",
    "start": "2118320",
    "end": "2124119"
  },
  {
    "text": "that I've had to go that far um now I I can say that I'm definitely guilty of and like Ruby going crazy with",
    "start": "2124119",
    "end": "2132000"
  },
  {
    "text": "some of the metaprogramming stuff but I kind of feel like when I went to go it just didn't feel like writing go code it",
    "start": "2132000",
    "end": "2137400"
  },
  {
    "text": "didn't seem like the right approach so I I I kind of veered away from it where I",
    "start": "2137400",
    "end": "2142760"
  },
  {
    "text": "could yeah I saw an example where somebody wanted to be a very good",
    "start": "2142760",
    "end": "2149280"
  },
  {
    "text": "citizen and they were going to put some data in a map and if the map was nil it",
    "start": "2149280",
    "end": "2154560"
  },
  {
    "text": "was panicking of course so they were actually using I think the Json on",
    "start": "2154560",
    "end": "2160560"
  },
  {
    "text": "marshala if in the case that the map was nil it would just Marshall and they put the string in line like the little two",
    "start": "2160560",
    "end": "2166400"
  },
  {
    "text": "little curly braces to you know to denote an empty object and it would",
    "start": "2166400",
    "end": "2171520"
  },
  {
    "text": "actually create a map using that technique you know which means as a",
    "start": "2171520",
    "end": "2177040"
  },
  {
    "text": "programmer you then could pass in a nil map and it would still work but again it's it's a bit too magic and also just",
    "start": "2177040",
    "end": "2184599"
  },
  {
    "text": "kind of letting it Panic or since it was a library even sometimes I don't mind",
    "start": "2184599",
    "end": "2190000"
  },
  {
    "text": "catching situations that would panic and then panicking with a better error message like you have to pass you know",
    "start": "2190000",
    "end": "2195880"
  },
  {
    "text": "you have to create the map before you pass it in or something like that but yeah I've seen a few cases where it's",
    "start": "2195880",
    "end": "2201160"
  },
  {
    "text": "been used where you don't really need it but people have tried to kind of go the",
    "start": "2201160",
    "end": "2208000"
  },
  {
    "text": "extra mile for their users so yeah those kinds of things are quite interesting another form of",
    "start": "2208000",
    "end": "2214119"
  },
  {
    "text": "reflection is with the as St package in go and some of the um actual kind of",
    "start": "2214119",
    "end": "2221440"
  },
  {
    "text": "code reflection code analysis packages and they they kept getting better as",
    "start": "2221440",
    "end": "2227480"
  },
  {
    "text": "well they started they were very difficult to use and there were a few higher level packages now that makes it",
    "start": "2227480",
    "end": "2234800"
  },
  {
    "text": "a lot easier uh we have a project where we actually describe our API in go",
    "start": "2234800",
    "end": "2241119"
  },
  {
    "text": "interfaces and we use that sort of as there's a packages package which lets",
    "start": "2241119",
    "end": "2247640"
  },
  {
    "text": "you actually open a package and then you can walk through interfaces and things like this and then inspect the fields",
    "start": "2247640",
    "end": "2255000"
  },
  {
    "text": "inside the interface and things so it does that kind of reflection to then it represents that data in its own",
    "start": "2255000",
    "end": "2263000"
  },
  {
    "text": "structure and then uses that to generate code from a template so it's nice",
    "start": "2263000",
    "end": "2268839"
  },
  {
    "text": "because we have all of our apis are described as go interfaces which as since we're go developers that's very",
    "start": "2268839",
    "end": "2276040"
  },
  {
    "text": "easy for us to understand and reason about and also it's a real go package so",
    "start": "2276040",
    "end": "2281200"
  },
  {
    "text": "it's type safe too you can't use invalid types you know so it's a great way to describe an API you know it's going to",
    "start": "2281200",
    "end": "2286960"
  },
  {
    "text": "work and then we can generate the client from that we generate the server code you know the htgp stuff the stubs all",
    "start": "2286960",
    "end": "2293839"
  },
  {
    "text": "that stuff anything boilerplate can get generated and we even generate another",
    "start": "2293839",
    "end": "2298880"
  },
  {
    "text": "interface which is actually slightly different from the original one because it takes a context and returns an error",
    "start": "2298880",
    "end": "2306079"
  },
  {
    "text": "um and we emitted that from the definitions and so we then have to we can write our definition interface we",
    "start": "2306079",
    "end": "2312560"
  },
  {
    "text": "run the code gen and then we implement the interface and that's it we've then got a new service that's then exposed in",
    "start": "2312560",
    "end": "2319400"
  },
  {
    "text": "our project when are you open sourcing this I think you already did it's open",
    "start": "2319400",
    "end": "2324680"
  },
  {
    "text": "source yeah it's called it's called Oto yes look at this it's good for J like",
    "start": "2324680",
    "end": "2330319"
  },
  {
    "text": "it's basically Json it's a Json API at the moment but actually since it's just",
    "start": "2330319",
    "end": "2335359"
  },
  {
    "text": "code gen and they're just template you could easily write a a binary um protocol for it or any other type",
    "start": "2335359",
    "end": "2342119"
  },
  {
    "text": "actually yeah so it's nice somebody's written a rust a server rust template for it too so that's quite weird but",
    "start": "2342119",
    "end": "2350680"
  },
  {
    "text": "kind of awesome also we'll put it in the show notes it's past it's github.com P.D",
    "start": "2350680",
    "end": "2357560"
  },
  {
    "text": "sloto but I'll put it in the show notes for anyone that's interested and we're using it in production and it's just it",
    "start": "2357560",
    "end": "2363920"
  },
  {
    "text": "just works great I mean our use case is is somewhat simple but it's it's a",
    "start": "2363920",
    "end": "2368960"
  },
  {
    "text": "really nice kind of and it is it's reflection really because we have to",
    "start": "2368960",
    "end": "2374440"
  },
  {
    "text": "programmatically inspect those interfaces and then do some work with them you know so Matt I'm assuming that",
    "start": "2374440",
    "end": "2380760"
  },
  {
    "text": "you're generating code with auto yes that's that's basically what it is it takes go interfaces mixes them with an",
    "start": "2380760",
    "end": "2386720"
  },
  {
    "text": "inter with a template and generates new code I was going to say I do think we talk about how reflection is bad or you",
    "start": "2386720",
    "end": "2393839"
  },
  {
    "text": "you should try to avoid it cuz it's confusing it's hard to to reason about and it's just hard to maintain but I think sometimes that's hard CU we don't",
    "start": "2393839",
    "end": "2400200"
  },
  {
    "text": "tell people alternative approaches and I I do think code generation is one of the big ones out there that can be very",
    "start": "2400200",
    "end": "2406520"
  },
  {
    "text": "useful like you said you're kind of doing that like reflection thing where you you're actually analyzing the code and then you generate code from it and",
    "start": "2406520",
    "end": "2413280"
  },
  {
    "text": "you end up with something that's much much easier to manage about and I've even seen some omms that go with that approach where I think SQL boiler was",
    "start": "2413280",
    "end": "2420599"
  },
  {
    "text": "one of them uh where basically they would they would scan your database your your SQL database and then they would",
    "start": "2420599",
    "end": "2426920"
  },
  {
    "text": "generate go structs from that so like rather than using reflection they're like okay we're just going to spit out",
    "start": "2426920",
    "end": "2432599"
  },
  {
    "text": "things that match your database perfectly and you can just use these and it it's a very different approach but I",
    "start": "2432599",
    "end": "2437960"
  },
  {
    "text": "think it having reflection being kind of limited forces people to look at these other approaches and and decide is this",
    "start": "2437960",
    "end": "2444520"
  },
  {
    "text": "better is this easier to maintain yeah I mean the there's also",
    "start": "2444520",
    "end": "2450440"
  },
  {
    "text": "the go generate feature the command and the you can put a comment in special",
    "start": "2450440",
    "end": "2456040"
  },
  {
    "text": "comment which again is a little bit magic but it's like two slashes go colon",
    "start": "2456040",
    "end": "2461240"
  },
  {
    "text": "generate and then a command and then if you type go generate in your project it will run those commands and they they're",
    "start": "2461240",
    "end": "2467720"
  },
  {
    "text": "they're useful for exactly that kind of thing where you're then going to you're going to do a sort of pre-build Step",
    "start": "2467720",
    "end": "2473160"
  },
  {
    "text": "where you generate the code and that is a nice approach because you get the type safety you get the compiler helping you",
    "start": "2473160",
    "end": "2479160"
  },
  {
    "text": "not not maybe initially but once it's generated that code then uh is part of",
    "start": "2479160",
    "end": "2485119"
  },
  {
    "text": "your project usually it's going to be built and if it's wrong you'll you'll find out soon enough that's exactly what",
    "start": "2485119",
    "end": "2492200"
  },
  {
    "text": "I was about to tell um I think the difference between you know the as package or and the the reflect package",
    "start": "2492200",
    "end": "2499160"
  },
  {
    "text": "is like the ASD package is a static thing like like it's not doing things in the runtime so you generate you still",
    "start": "2499160",
    "end": "2506400"
  },
  {
    "text": "like have the like the similar level of like uh maintainability as well as like type safety you just generate some stuff",
    "start": "2506400",
    "end": "2513560"
  },
  {
    "text": "for the compiler so if you can hand off some of the problems to code Generations",
    "start": "2513560",
    "end": "2519800"
  },
  {
    "text": "that's definitely something to do yeah that's a great point we talked about generics earlier and I've I would",
    "start": "2519800",
    "end": "2526960"
  },
  {
    "text": "actually love to see an implementation of generics that essentially just runs a go generate at the start like you write",
    "start": "2526960",
    "end": "2533280"
  },
  {
    "text": "your code as if generics are there like using a proposal and then it essentially just compiles it using you know some",
    "start": "2533280",
    "end": "2539280"
  },
  {
    "text": "step beforehand into go code and generates whatever it needs to generate and then goes from there because I think",
    "start": "2539280",
    "end": "2544839"
  },
  {
    "text": "it would be possible it would just take some tricky work I wrote exactly that project with a friend of mine um and",
    "start": "2544839",
    "end": "2551920"
  },
  {
    "text": "it's called Jenny and it's used people use it it uses a special type which is",
    "start": "2551920",
    "end": "2557079"
  },
  {
    "text": "just an interface type in a different package and then it I think it's the stuff again it goes and finds those",
    "start": "2557079",
    "end": "2564640"
  },
  {
    "text": "instances and looks for where you've actually you list it in the command you",
    "start": "2564640",
    "end": "2570200"
  },
  {
    "text": "run a command and you list the types you want to support and then it is just a kind of copy and paste and it replaces",
    "start": "2570200",
    "end": "2576240"
  },
  {
    "text": "is that type wherever it's mentioned it's not perfect because like you can't do type assertions on it it stops making",
    "start": "2576240",
    "end": "2583079"
  },
  {
    "text": "sense because well it just gets quite weird but for simple cases it work I",
    "start": "2583079",
    "end": "2588640"
  },
  {
    "text": "think that's what you're talking about I've used something like that I guess what I'm thinking is it would almost be nice to take that idea and expand it",
    "start": "2588640",
    "end": "2595480"
  },
  {
    "text": "further to be like like the current generics proposal to make it so you can write code exactly like that and as far",
    "start": "2595480",
    "end": "2602240"
  },
  {
    "text": "cuz like one of the issues with generics is the fact that it ends up making some of the different steps with compilation",
    "start": "2602240",
    "end": "2607720"
  },
  {
    "text": "and everything else more complicated so rather than baking that in the compiler if you could just have a pre-compile",
    "start": "2607720",
    "end": "2613079"
  },
  {
    "text": "step where you know like it seems kind of like it's already built into the language but it really isn't it's like",
    "start": "2613079",
    "end": "2618800"
  },
  {
    "text": "translating it at that point right um now I it might end up being so annoying to do that that it doesn't make sense to",
    "start": "2618800",
    "end": "2624960"
  },
  {
    "text": "me you know generics has always been like hey there is this template and you generate things and the compiler is",
    "start": "2624960",
    "end": "2631440"
  },
  {
    "text": "handling all of that stuff because you know the generated code is too complicated to take a look and and you",
    "start": "2631440",
    "end": "2636480"
  },
  {
    "text": "know that's why the language needs to provide some synthetic sugar to be able to you know like engage with those types",
    "start": "2636480",
    "end": "2642280"
  },
  {
    "text": "and so on so I I wonder like I think if it expose what is generated that would",
    "start": "2642280",
    "end": "2647640"
  },
  {
    "text": "be super scary to the user uh you will have all these like you know dash dash types and like all this like you know",
    "start": "2647640",
    "end": "2653119"
  },
  {
    "text": "different cases and whatever so I think that like it's not going to look really good for a large number of cases and",
    "start": "2653119",
    "end": "2661000"
  },
  {
    "text": "that might kind of like discourage people to take a look at generics to begin with that's why I'm like waiting",
    "start": "2661000",
    "end": "2666480"
  },
  {
    "text": "for the you know the actual generics proposal and the implementation because you know I want to see that synthetic",
    "start": "2666480",
    "end": "2671800"
  },
  {
    "text": "sugar how it's going to look even though the hard work is not visible to me at least like you know I just actually I'm",
    "start": "2671800",
    "end": "2678920"
  },
  {
    "text": "not really interested in the you know what is generated underhood because I know that it's going to be complicated for a lot of times and I think one of",
    "start": "2678920",
    "end": "2685440"
  },
  {
    "text": "the reasons that like generated this generators or um stuff uh generic you",
    "start": "2685440",
    "end": "2691599"
  },
  {
    "text": "know the the temporary generic proposals didn't really catch up it's because um you know you need to have like some sort",
    "start": "2691599",
    "end": "2697640"
  },
  {
    "text": "of like an officially blessed generics solution right like as a library I can't",
    "start": "2697640",
    "end": "2704400"
  },
  {
    "text": "really like randomly pick one tool versus the other there's not a lot of",
    "start": "2704400",
    "end": "2710040"
  },
  {
    "text": "like experimentation actually like you can't really expose what's underneath I just want something that works for",
    "start": "2710040",
    "end": "2715119"
  },
  {
    "text": "everyone um so we can agree on it all the library systems space kind of like",
    "start": "2715119",
    "end": "2720400"
  },
  {
    "text": "switched to it I don't really care what's like you know generated underhood and they can always optimize it whatever",
    "start": "2720400",
    "end": "2726359"
  },
  {
    "text": "like there's like so much like work have been done in in this field so we're not like trying to do this for the first",
    "start": "2726359",
    "end": "2732680"
  },
  {
    "text": "time so I I I assume that like we should find a solution to generics it should be",
    "start": "2732680",
    "end": "2737760"
  },
  {
    "text": "in the you know the official language and I don't think that like we need that",
    "start": "2737760",
    "end": "2742800"
  },
  {
    "text": "much of experimentation but it will be hard for people because you know it's going to definitely complicate the",
    "start": "2742800",
    "end": "2748359"
  },
  {
    "text": "language yeah but you know a lot of JavaScript libraries do they have like this approach where they have a shim",
    "start": "2748359",
    "end": "2754160"
  },
  {
    "text": "essentially or they do like I think the typescript originally was or dot actually Google's dot was originally",
    "start": "2754160",
    "end": "2760640"
  },
  {
    "text": "just transpiling to JavaScript and it did look ugly y you just have to not look at it mate just call the file don't",
    "start": "2760640",
    "end": "2767200"
  },
  {
    "text": "look at this.o something I think you just have to train people that like it's almost like you build a compiler on top",
    "start": "2767200",
    "end": "2772760"
  },
  {
    "text": "of a compiler and like that's the one that gives you errors and you you interact with and then like the compiled you whatever it compiles into then",
    "start": "2772760",
    "end": "2778760"
  },
  {
    "text": "eventually compiles into you kind of have to hide that away somewhere in like a a bundle folder or something yeah but",
    "start": "2778760",
    "end": "2785119"
  },
  {
    "text": "you you know think about the Ides and everything everything breaks when suddenly you've got syntax that's not",
    "start": "2785119",
    "end": "2790800"
  },
  {
    "text": "valid none of the tools would work it'd be much harder now but with the changes they're doing to um how the different",
    "start": "2790800",
    "end": "2798240"
  },
  {
    "text": "idees use the language server hopefully that sort of experimentation yeah so like basically",
    "start": "2798240",
    "end": "2804559"
  },
  {
    "text": "the fact that they're all using kind of like a common what I forget what it's called but basically like the language server like there's a common spec for",
    "start": "2804559",
    "end": "2810800"
  },
  {
    "text": "all the different languages to implement so hopefully that type of work will lead to more potential experimentation on top",
    "start": "2810800",
    "end": "2816880"
  },
  {
    "text": "of existing languages so that could be interesting to see do you want to just give a quick overview for anyone that",
    "start": "2816880",
    "end": "2822599"
  },
  {
    "text": "doesn't know what is the Lang what is a language server I think it's LSP isn't it language server protocol that sounds",
    "start": "2822599",
    "end": "2827839"
  },
  {
    "text": "right so the general idea is that rather than every IDE or editor out there implementing their own like uh you know",
    "start": "2827839",
    "end": "2834599"
  },
  {
    "text": "implementation of how Go's autocomplete should work and how javascripts auto complete should work I think vs code was",
    "start": "2834599",
    "end": "2841359"
  },
  {
    "text": "the first one to standardize it but I'm not I think others are using it now yeah I think it's came from Microsoft I'm not",
    "start": "2841359",
    "end": "2847240"
  },
  {
    "text": "sure yeah it did it came from Microsoft's Visual Studio code so the idea is that they come up with sort of",
    "start": "2847240",
    "end": "2853760"
  },
  {
    "text": "like in go terms an interface or like a you this is what an LSP should spit out for a language like if you're typing you",
    "start": "2853760",
    "end": "2861240"
  },
  {
    "text": "know whatever and it like basically it it should have some methods there that you implement and it can give",
    "start": "2861240",
    "end": "2866880"
  },
  {
    "text": "autocomplete suggestions depending on where the user is and the idea was that you could then Implement that for any",
    "start": "2866880",
    "end": "2872720"
  },
  {
    "text": "language and then any IDE or editor could use it to implement autocomplete inside of the editor yeah which is",
    "start": "2872720",
    "end": "2879680"
  },
  {
    "text": "amazing and honestly I can't actually believe that works because of how",
    "start": "2879680",
    "end": "2885119"
  },
  {
    "text": "different all the languages are how on Earth have we found a protocol where you can just describe any of it I find that",
    "start": "2885119",
    "end": "2891160"
  },
  {
    "text": "to be quite amazing actually and no doubt it's it's non-trivial as a protocol it's probably one of those",
    "start": "2891160",
    "end": "2897400"
  },
  {
    "text": "there's there's probably like 1% of edge cases where it's not that great with but for most developers that just doesn't",
    "start": "2897400",
    "end": "2903000"
  },
  {
    "text": "matter enough to outweigh the benefits of having the LSP yeah but then there's still the the",
    "start": "2903000",
    "end": "2910000"
  },
  {
    "text": "problem not problem necessarily but different editors use their own approach to this like I think goand is one of the",
    "start": "2910000",
    "end": "2915720"
  },
  {
    "text": "ones that doesn't use language servers they use something completely inhouse and in some ways that's beneficial",
    "start": "2915720",
    "end": "2921280"
  },
  {
    "text": "because when go pleas first came out it was pretty brittle but you know then theirs I think was better at the time",
    "start": "2921280",
    "end": "2927400"
  },
  {
    "text": "with go modules but but now I don't know if that's necessarily true I've heard very good things that's that's usually",
    "start": "2927400",
    "end": "2933400"
  },
  {
    "text": "what jet brains do right uh they build everything in house um that's their like",
    "start": "2933400",
    "end": "2938960"
  },
  {
    "text": "Niche yeah yeah my only thing is a few times that I've had to touch Java I've",
    "start": "2938960",
    "end": "2944200"
  },
  {
    "text": "had that kind of Eclipse IDE and it really it's an aesthetic thing actually",
    "start": "2944200",
    "end": "2949799"
  },
  {
    "text": "you know I use Visual Studio code because it's it kind of looks so much nicer and it's you spend so much",
    "start": "2949799",
    "end": "2956559"
  },
  {
    "text": "time in there I feel like it does matter I feel like it you want it to be a beautiful experience but I've heard some",
    "start": "2956559",
    "end": "2963480"
  },
  {
    "text": "amazing things about how that goand editor the the features it has the things it can do I haven't yet played",
    "start": "2963480",
    "end": "2970880"
  },
  {
    "text": "with it but um yeah I would be interested if anyone would like to tweet at me and tell me about their experience",
    "start": "2970880",
    "end": "2976920"
  },
  {
    "text": "I'll probably read it [Music]",
    "start": "2976920",
    "end": "2986579"
  },
  {
    "text": "probably the change log is deep discussions in and around the world of software and it's been going for over a",
    "start": "2989920",
    "end": "2996200"
  },
  {
    "text": "decade we interview hackers like Chris Anderson from 3D robotics at the time",
    "start": "2996200",
    "end": "3001240"
  },
  {
    "text": "drones were like predators and Global Hawks and military-industrial they were classified and super you know 10 billion",
    "start": "3001240",
    "end": "3008520"
  },
  {
    "text": "doll things and we had just built a drone with Lego pieces around the dining room table programmed by a 9-year-old",
    "start": "3008520",
    "end": "3015400"
  },
  {
    "text": "and it's like okay that should not be possible you know it it when when a 9-year-old can do something that is",
    "start": "3015400",
    "end": "3021960"
  },
  {
    "text": "classified that literally export controlled as munition with go with toy pieces you know something important in",
    "start": "3021960",
    "end": "3028079"
  },
  {
    "text": "this world has changed leaders like Devon zugal from GitHub in the like 10",
    "start": "3028079",
    "end": "3034000"
  },
  {
    "text": "to 15 year range or 20 year range what I would really like is for if you have like three 12-year-olds hanging out and",
    "start": "3034000",
    "end": "3041000"
  },
  {
    "text": "one of them's like I want to be a firefighter another one's like I want to be a lawyer I want one of them to say I want to be an open source developer and",
    "start": "3041000",
    "end": "3047760"
  },
  {
    "text": "innovators like Amal Hussein I've yet to kind of see applications at scale that don't use multiple languages that don't",
    "start": "3047760",
    "end": "3053760"
  },
  {
    "text": "have just Arcane store stories behind why this weirdo thing exists you know",
    "start": "3053760",
    "end": "3059119"
  },
  {
    "text": "like all right when you open this file you're going to have to turn around three times and tap your nose",
    "start": "3059119",
    "end": "3065799"
  },
  {
    "text": "once like it's just the most hilarious stories you know but applications are",
    "start": "3065799",
    "end": "3071160"
  },
  {
    "text": "living breathing they have craft that's normal so I want to normalize weirdness",
    "start": "3071160",
    "end": "3078040"
  },
  {
    "text": "because that's just the how applications evolve over time welcome to the change",
    "start": "3078040",
    "end": "3083559"
  },
  {
    "text": "log please listen to an episode from our catalog that interests you and subscribe today we'd love to have you with",
    "start": "3083559",
    "end": "3091150"
  },
  {
    "text": "[Music]",
    "start": "3091150",
    "end": "3099730"
  },
  {
    "text": "us guess what time it is guess I think we know it's probably",
    "start": "3101480",
    "end": "3106799"
  },
  {
    "text": "unpopular opinion time it's unpopular opinion [Music]",
    "start": "3106799",
    "end": "3111960"
  },
  {
    "text": "time unpopular opinion I actually think you should probably",
    "start": "3111960",
    "end": "3119078"
  },
  {
    "text": "lean [Music]",
    "start": "3120839",
    "end": "3126880"
  },
  {
    "text": "opinion so does anyone have an unpopular opinion then I mean some of these things we've already said probably are a little",
    "start": "3126880",
    "end": "3133280"
  },
  {
    "text": "bit unpopular but they got any anything in particular I have one oh go ahead Jana I'm going to let her take the stage",
    "start": "3133280",
    "end": "3140440"
  },
  {
    "text": "we need generics I think this is not a very unpopular opinion but I've been",
    "start": "3140440",
    "end": "3145480"
  },
  {
    "text": "saying this since the beginning of the language and everybody has been hating me but I think generics see I agree",
    "start": "3145480",
    "end": "3151319"
  },
  {
    "text": "entirely but that's because I've done enough like I I think one example is for",
    "start": "3151319",
    "end": "3157240"
  },
  {
    "text": "go to do well in an educational space like for people to pick it up in college they're going to be dealing with data structures and it's really hard to do",
    "start": "3157240",
    "end": "3163799"
  },
  {
    "text": "data structures without generics and I just I think that's one of the reasons why Java is like taught so much in",
    "start": "3163799",
    "end": "3170400"
  },
  {
    "text": "schools is because it does well with that yeah what do you think about the recent generics",
    "start": "3170400",
    "end": "3177680"
  },
  {
    "text": "proposals the ones I've seen or the most recent one I've seen I liked I haven't yeah you know gone too deep into it but",
    "start": "3177680",
    "end": "3184280"
  },
  {
    "text": "it seems fine to me I'm not too particular my needs are fairly limited I",
    "start": "3184280",
    "end": "3189640"
  },
  {
    "text": "think they're making great progress on the the design of it and of course you hear a lot that the the real concern is",
    "start": "3189640",
    "end": "3197880"
  },
  {
    "text": "implementing it what that does to the type system in go and how easy that's then going to be to maintain and things",
    "start": "3197880",
    "end": "3204480"
  },
  {
    "text": "like this which is great to hear that there are people on the go team and and other contributors that that really",
    "start": "3204480",
    "end": "3211160"
  },
  {
    "text": "prioritize that because it is kind of vital really I mean it would hate it would hate to get to the point where we",
    "start": "3211160",
    "end": "3217599"
  },
  {
    "text": "can't add any more features to go because it's just too complicated now so I'm with you on that one Yana actually",
    "start": "3217599",
    "end": "3224520"
  },
  {
    "text": "actually I'm super burned out from this topic that I sto following the the proposals like a year ago W were you're",
    "start": "3224520",
    "end": "3231839"
  },
  {
    "text": "just getting really emotional about it it's it's not being emotional but you know there are like at least you know 50",
    "start": "3231839",
    "end": "3238960"
  },
  {
    "text": "concerns I had about every proposal and there are no easy answers yeah I mean",
    "start": "3238960",
    "end": "3244720"
  },
  {
    "text": "like high level ones you're making other people emotional exactly and um I think I'm not",
    "start": "3244720",
    "end": "3251440"
  },
  {
    "text": "I was not really contributing to the discussion and uh lots of like the points that you know that was in my mind",
    "start": "3251440",
    "end": "3258079"
  },
  {
    "text": "and I was like feeling anxious about is like you can't truly anticipate what the",
    "start": "3258079",
    "end": "3263359"
  },
  {
    "text": "reality will be like because it really depends on the people who are going to take the generics and like use it and",
    "start": "3263359",
    "end": "3269799"
  },
  {
    "text": "you know we'll see it over time like how it's actually going to impact the entire Library space so I was like feeling like",
    "start": "3269799",
    "end": "3276240"
  },
  {
    "text": "hey I'm not really you know contributing to this discussion and um I I'm excited that it's happening and I you know the",
    "start": "3276240",
    "end": "3283480"
  },
  {
    "text": "people I am almost certain that they care a lot like they care more than me",
    "start": "3283480",
    "end": "3290040"
  },
  {
    "text": "so you know what's the point of trying to contribute to that",
    "start": "3290040",
    "end": "3295680"
  },
  {
    "text": "like one of the things this reminds me of is the type Alias and how much push back that got and like how it was going",
    "start": "3295680",
    "end": "3302079"
  },
  {
    "text": "to ruin the language and ever since it's come out I don't feel like I've seen it any like occasionally you'll see it and",
    "start": "3302079",
    "end": "3308960"
  },
  {
    "text": "I've done some weird things with it just kind of messing around to see what was possible but I don't feel like I've run",
    "start": "3308960",
    "end": "3314079"
  },
  {
    "text": "into libraries that have abused it or anything which is kind of it's funny cuz you just saw all that push back and then",
    "start": "3314079",
    "end": "3319839"
  },
  {
    "text": "I get their concerns I'm not trying to say people shouldn't Express their concerns I'm but it's just funny how like that did actually come to fruition",
    "start": "3319839",
    "end": "3325960"
  },
  {
    "text": "at all yeah but it is in there I was just about to give that as as an example",
    "start": "3325960",
    "end": "3331599"
  },
  {
    "text": "because like that was like the moment that I actually started to burn out like started to feel burned out from the",
    "start": "3331599",
    "end": "3336760"
  },
  {
    "text": "project and I wanted to go and like do something else and everything like kind of was becoming this like infinite Loop",
    "start": "3336760",
    "end": "3343200"
  },
  {
    "text": "of discussions about what what the possibilities and so on so with generics I didn't want to you know contribute to",
    "start": "3343200",
    "end": "3349720"
  },
  {
    "text": "that uh because there's already too many voices and like you know there's it's it's hard it's hard job to figure out",
    "start": "3349720",
    "end": "3357119"
  },
  {
    "text": "because you know you can't predict the future also I also trust go developers",
    "start": "3357119",
    "end": "3362200"
  },
  {
    "text": "because a lot of people care a lot about like simplicity so they never take a feature and abuse it like I think go",
    "start": "3362200",
    "end": "3368480"
  },
  {
    "text": "users are pretty informed about the core subset of the language they want to use",
    "start": "3368480",
    "end": "3374200"
  },
  {
    "text": "and the language is not huge but I also trust the larger ecosystem so I'm not",
    "start": "3374200",
    "end": "3379520"
  },
  {
    "text": "that concerned anymore yeah I mean you can always not use it and to be honest I didn't quite real realiz I realized very",
    "start": "3379520",
    "end": "3386680"
  },
  {
    "text": "late that typ aliases got into the language I remember the proposal and the",
    "start": "3386680",
    "end": "3391839"
  },
  {
    "text": "big debate but another one was The triy Proposal that one with the errors kind",
    "start": "3391839",
    "end": "3397480"
  },
  {
    "text": "of for me I was allergic to that because you know it felt too magic and yeah I",
    "start": "3397480",
    "end": "3403640"
  },
  {
    "text": "feel like uh that didn't fit in with kind of the philosophy of go we have to",
    "start": "3403640",
    "end": "3409480"
  },
  {
    "text": "watch out I think that we aren't just we don't just like the go as it is and we're not and we're too rigid not to",
    "start": "3409480",
    "end": "3416000"
  },
  {
    "text": "allow any Evolution but I do think you're right Yana we kind of are aware",
    "start": "3416000",
    "end": "3421920"
  },
  {
    "text": "aren't we of the Simplicity and and things not being too magic and things that we are as a community quite aware",
    "start": "3421920",
    "end": "3428400"
  },
  {
    "text": "of that and yeah I suppose the you can always just not use it if you don't if you don't like it I think this is",
    "start": "3428400",
    "end": "3434599"
  },
  {
    "text": "probably why reflect is such a weird topic because people come from other languages where it's completely normal to use it like I I think I said it",
    "start": "3434599",
    "end": "3441480"
  },
  {
    "text": "before we started recording but I don't think Ruby would be popular if reflect wasn't such a in meta programming wasn't",
    "start": "3441480",
    "end": "3447480"
  },
  {
    "text": "such a big thing in that language like rails and all the crazy things you can do with it are all a byproduct of being",
    "start": "3447480",
    "end": "3453319"
  },
  {
    "text": "able to do metaprogramming in in many ways it makes that language more productive but none of that would make",
    "start": "3453319",
    "end": "3458880"
  },
  {
    "text": "any sense in go whatsoever so like when people come from a language like that to go and they're like why does this",
    "start": "3458880",
    "end": "3464160"
  },
  {
    "text": "reflect Library so hard to use and why does everybody tell me not to use it it's a hard mental shift and I think",
    "start": "3464160",
    "end": "3470119"
  },
  {
    "text": "it's because you know it's a different sort of approach to solving problems and a different set of priorities",
    "start": "3470119",
    "end": "3476280"
  },
  {
    "text": "yeah I think that's right I've sometimes just instead of maintaining some there's",
    "start": "3476280",
    "end": "3481400"
  },
  {
    "text": "a bit of code that's got reflection in it instead of maintaining it I'll rewrite it because in a way that you",
    "start": "3481400",
    "end": "3488720"
  },
  {
    "text": "know that process of doing it is how I figure out what's going on that's the",
    "start": "3488720",
    "end": "3493920"
  },
  {
    "text": "thing for for me it is actually hard to maintain where I sort of give up and instead will just prefer to rewrite it",
    "start": "3493920",
    "end": "3500160"
  },
  {
    "text": "which I I tend to do that if I can anyway frankly because I always find rewriting is",
    "start": "3500160",
    "end": "3505599"
  },
  {
    "text": "is a way to get a better version of what you have you know you learn so much doing it that the second time you write",
    "start": "3505599",
    "end": "3511119"
  },
  {
    "text": "it it is always a lot better but yeah yeah I don't know it's an interest it is an interesting",
    "start": "3511119",
    "end": "3517400"
  },
  {
    "text": "one well I think that's all the time we have today uh next week we've got a very",
    "start": "3517400",
    "end": "3522960"
  },
  {
    "text": "interesting show we're going to invite on somebody who just got their first job",
    "start": "3522960",
    "end": "3529200"
  },
  {
    "text": "doing go and we're also going to invite on somebody who's learning go and programming in go who's still at high",
    "start": "3529200",
    "end": "3535720"
  },
  {
    "text": "school so looking at the very beginnings of uh people getting into this crazy",
    "start": "3535720",
    "end": "3542079"
  },
  {
    "text": "world that we call just programming in that so John thank you very much Jana",
    "start": "3542079",
    "end": "3547640"
  },
  {
    "text": "always a pleasure we'll see you next",
    "start": "3547640",
    "end": "3551640"
  },
  {
    "text": "time thanks to listener rod for requesting this episode did you know he",
    "start": "3553119",
    "end": "3558680"
  },
  {
    "text": "take requests head to change.com request pick go time in the drop down and let us know what you you would like",
    "start": "3558680",
    "end": "3565039"
  },
  {
    "text": "to hear about on the podcast we also have a master feed it's everything we produce in one easy Feed plus some",
    "start": "3565039",
    "end": "3571760"
  },
  {
    "text": "exclusive backstage content that only hits the master feed subscribe at Chang log.com saster or search for changelog",
    "start": "3571760",
    "end": "3578119"
  },
  {
    "text": "Master feed in your favorite podcast app you'll find us thanks to Matt ryer John Calhoun and Jana dogen for an awesome",
    "start": "3578119",
    "end": "3585480"
  },
  {
    "text": "conversation to break master cylinder for producing all of our music to our sponsors for supporting our work fastly",
    "start": "3585480",
    "end": "3592480"
  },
  {
    "text": "lenoe and robbar are longtime partners go time and thanks to you for listening and sharing go time with other curious",
    "start": "3592480",
    "end": "3598839"
  },
  {
    "text": "devs like yourself that's all for now we'll talk to you again next",
    "start": "3598839",
    "end": "3604390"
  },
  {
    "text": "[Music]",
    "start": "3604390",
    "end": "3623559"
  },
  {
    "text": "week [Music]",
    "start": "3623559",
    "end": "3648960"
  },
  {
    "text": "Tru [Music]",
    "start": "3653520",
    "end": "3658780"
  },
  {
    "text": "that's it got to play guitar I got to do air guitar yeah you got like guitars in the background but you're like nope yeah",
    "start": "3663280",
    "end": "3670119"
  },
  {
    "text": "yeah I'm not going to play I'm not going to play them though am I on the thing you know what I mean Yana you",
    "start": "3670119",
    "end": "3676240"
  },
  {
    "text": "agreed once that that I do look like a magician do you remember yeah you look like a magician yeah you know how hard",
    "start": "3676240",
    "end": "3683319"
  },
  {
    "text": "it is you take it for Grant but I had to like come out to my parents I'm like Mom Dad sit down pick a",
    "start": "3683319",
    "end": "3691480"
  },
  {
    "text": "card but you know it's like it's it's like this like facial hair like style",
    "start": "3691480",
    "end": "3696599"
  },
  {
    "text": "it's very magician it does look like a magician it's ridiculous I should change it",
    "start": "3696599",
    "end": "3702000"
  },
  {
    "text": "but I can just imagine it you come out to your parents as a magician they're like we got to get him a computer or something get them into programming yeah",
    "start": "3702000",
    "end": "3709200"
  },
  {
    "text": "get him get him to be a go programmer cuz there's no magic there I don't know why your family would be against magic",
    "start": "3709200",
    "end": "3716319"
  },
  {
    "text": "but maybe there's some hit back story maybe your parents are like he's got to move out that doesn't pay very",
    "start": "3716319",
    "end": "3722920"
  },
  {
    "text": "well I actually have no idea how much M magic pays but I assume it'd be hard to get into yeah yeah I think it's",
    "start": "3722920",
    "end": "3730160"
  },
  {
    "text": "difficult uh yeah I can't think of a joke oh it's a shame because there must be loads of",
    "start": "3730160",
    "end": "3736119"
  },
  {
    "text": "jokes just waiting there to be plucked out of thin air that'll do that's close enough I",
    "start": "3736119",
    "end": "3743559"
  },
  {
    "text": "like the awkward sign after a joke that's my favorite",
    "start": "3743559",
    "end": "3748119"
  },
  {
    "text": "bit",
    "start": "3749000",
    "end": "3752000"
  }
]