[
  {
    "text": "[Music] let's do it it's go time welcome to go",
    "start": "7460",
    "end": "12960"
  },
  {
    "text": "time your source for diverse discussions from all around the go Community thanks",
    "start": "12960",
    "end": "18600"
  },
  {
    "text": "to our partners for helping us bring you awesome pods each and every week check",
    "start": "18600",
    "end": "23680"
  },
  {
    "text": "them out at fastly.com fly.io and typ sense.org",
    "start": "23680",
    "end": "30119"
  },
  {
    "text": "okay here we [Music]",
    "start": "30119",
    "end": "41060"
  },
  {
    "text": "go hello there welcome to go time I'm Matt Riya and I have a cold so I'm sorry",
    "start": "43920",
    "end": "51800"
  },
  {
    "text": "about that don't worry we've got good editors you probably won't notice anything but I just wanted to let you",
    "start": "51800",
    "end": "57920"
  },
  {
    "text": "know I'm not a hero I'm just just uh you know doing my bit for the go Community",
    "start": "57920",
    "end": "63840"
  },
  {
    "text": "um so please feel free to celebrate that on Twitter today we're talking about generics we're asking so do we like",
    "start": "63840",
    "end": "69759"
  },
  {
    "text": "generics or not some people feared that they'd be the end of the language you know that people would abuse it and use",
    "start": "69759",
    "end": "75960"
  },
  {
    "text": "them in all the wrong places others were a bit more hopeful they had clear use cases and were kind of thrilled that",
    "start": "75960",
    "end": "82479"
  },
  {
    "text": "they were getting this feature but it was also often touted as the reason a lot of people didn't adopt go so we have",
    "start": "82479",
    "end": "89680"
  },
  {
    "text": "it now we have generics our flavor of generics what do we think of it joining me to discuss this it's my co-host Chris",
    "start": "89680",
    "end": "97000"
  },
  {
    "text": "Brando hello Chris hello Matt how are you doing I'm not too bad you know got a bit of a cold but getting through it",
    "start": "97000",
    "end": "103360"
  },
  {
    "text": "been just being soldering on really just being brilliant yeah how about you I'm doing great it's a it's a beautiful",
    "start": "103360",
    "end": "108920"
  },
  {
    "text": "morning good yes and I appreciate this is quite early for you we're doing this at a different time yeah uh so thanks",
    "start": "108920",
    "end": "114479"
  },
  {
    "text": "for getting up so early no problem we're also joined by Roger Pepe Roger's been a go Enthusiast since since the day it was",
    "start": "114479",
    "end": "120719"
  },
  {
    "text": "released and has been contri contributing loads of things to the standard library and the ecosystem",
    "start": "120719",
    "end": "126079"
  },
  {
    "text": "currently working on implementing modules in the Q language q.org welcome",
    "start": "126079",
    "end": "131080"
  },
  {
    "text": "back Roger hi how's it going good not bad pleasure to have you back of course like your hoodie for those that don't",
    "start": "131080",
    "end": "138160"
  },
  {
    "text": "know he's wearing a q hoodie it's my favorite hoodie yeah we're also joined by Brian Boren Brian's a distinguished",
    "start": "138160",
    "end": "144519"
  },
  {
    "text": "engineer at grafana Labs working on highly scalable storage for metrics logs and traces Brian's used go since 2014 so",
    "start": "144519",
    "end": "151879"
  },
  {
    "text": "again a long time there and contributes to many open source projects including you may have heard of Prometheus perhaps",
    "start": "151879",
    "end": "157360"
  },
  {
    "text": "you've used grpc and I know a lot of you have used go itself welcome Brian",
    "start": "157360",
    "end": "163000"
  },
  {
    "text": "welcome back hi thanks for having me pleasure cool so I'm very excited about",
    "start": "163000",
    "end": "168159"
  },
  {
    "text": "this episode because I was one of those people that was i' had used generics in previous languages and I kind of was",
    "start": "168159",
    "end": "175560"
  },
  {
    "text": "excited that we were getting it how do we feel like maybe we could just give someone a quick over overview of what",
    "start": "175560",
    "end": "180640"
  },
  {
    "text": "generics are and when they came to go just so everyone's caught up any volunteers Roger you you",
    "start": "180640",
    "end": "187760"
  },
  {
    "text": "go okay uh yeah I mean generics they're um they basically mean you can pass",
    "start": "187760",
    "end": "193720"
  },
  {
    "text": "types to functions and uh methods and you can have types that are themselves",
    "start": "193720",
    "end": "198840"
  },
  {
    "text": "associated with types so you can it's all it's all a compile time in a sense you don't need generics but it means",
    "start": "198840",
    "end": "205959"
  },
  {
    "text": "that you can you can have these things which where before might pass a dynamic interface value and maybe do a type",
    "start": "205959",
    "end": "213680"
  },
  {
    "text": "coercion like the classic case of course is with containers so I you know I've made this nice Advanced data structure",
    "start": "213680",
    "end": "221920"
  },
  {
    "text": "that holds holds all my values and I put a value in like and I know that I'm only going to help put integers in there and",
    "start": "221920",
    "end": "228840"
  },
  {
    "text": "I get this thing out and oh it's not an integer anymore it's the empty interface and I you know so I have to assert that",
    "start": "228840",
    "end": "234439"
  },
  {
    "text": "it's an interface that it's an INT but maybe I didn't actually put an INT in there and and so my program panics at",
    "start": "234439",
    "end": "240640"
  },
  {
    "text": "runtime and also there are a bunch of performance improvements associated with",
    "start": "240640",
    "end": "245959"
  },
  {
    "text": "that because you know in that example hold it putting an integer in a interface if it's you know greater than",
    "start": "245959",
    "end": "253360"
  },
  {
    "text": "256 or something like that then it's actually going to have an allocation to put that in an interface so you're",
    "start": "253360",
    "end": "258639"
  },
  {
    "text": "actually paying the price of storing that data where in fact you just you actually only need to one little integer",
    "start": "258639",
    "end": "265680"
  },
  {
    "text": "sized slot for it and that can really Mount up in terms particularly when you",
    "start": "265680",
    "end": "271039"
  },
  {
    "text": "have larger data structures which incorporate uh which incorporate types",
    "start": "271039",
    "end": "276320"
  },
  {
    "text": "you know the safety and the performance aspects both both can add up a lot in larger systems I think I think I I might",
    "start": "276320",
    "end": "283120"
  },
  {
    "text": "want to note that we had some generic types before since since the beginning",
    "start": "283120",
    "end": "288680"
  },
  {
    "text": "pretty much like a map for instance where whenever you used a map you had to put in in square brackets what the key",
    "start": "288680",
    "end": "295120"
  },
  {
    "text": "type was and then right after that what the value type was so map string of string M into of string whatever and so",
    "start": "295120",
    "end": "302759"
  },
  {
    "text": "what changed uh was it Go 1.8 they put them in what changed is is the kind of",
    "start": "302759",
    "end": "308120"
  },
  {
    "text": "Avail availability of the programmer to Define their own things their own types and functions which still had those",
    "start": "308120",
    "end": "314320"
  },
  {
    "text": "those little square brackets bit with a type in the middle so the power was kind of reserved to the go compiler",
    "start": "314320",
    "end": "321360"
  },
  {
    "text": "beforehand and uh and now now we have the power yeah and have we been wielding",
    "start": "321360",
    "end": "327759"
  },
  {
    "text": "that power responsibly well I I I was a C++ programmer for a long time 20 years",
    "start": "327759",
    "end": "334440"
  },
  {
    "text": "and actually oh during the from the time before C++ had generics oh wow and I I",
    "start": "334440",
    "end": "339960"
  },
  {
    "text": "think a lot of people feared that go would suffer the way C++ did because people started writing programs that",
    "start": "339960",
    "end": "346319"
  },
  {
    "text": "frankly no one could understand yeah using uh templates in you know which is",
    "start": "346319",
    "end": "352120"
  },
  {
    "text": "the same thing basically in in C++ I feel go has largely escaped that I",
    "start": "352120",
    "end": "358039"
  },
  {
    "text": "I personally have not really come across people overusing generics I think it's",
    "start": "358039",
    "end": "363280"
  },
  {
    "text": "kind of too early to say honestly I think you know we we we've just past the point where people are generally using",
    "start": "363280",
    "end": "369759"
  },
  {
    "text": "it where people can assume go 118 that everyone all they uses using go go18 and",
    "start": "369759",
    "end": "375520"
  },
  {
    "text": "I think you know give it give it a couple of years two or three years and we'll see I think whether things are",
    "start": "375520",
    "end": "381919"
  },
  {
    "text": "moving in a dubious direction or not yeah what do you think about the choice of square brackets uh somebody that was",
    "start": "381919",
    "end": "390000"
  },
  {
    "text": "quite new to the language was kind of surprised that it was it was just using the square brackets and not something",
    "start": "390000",
    "end": "396639"
  },
  {
    "text": "different because it was such a different concept Brian you make a good point about maps and slices being kind",
    "start": "396639",
    "end": "402639"
  },
  {
    "text": "of maps well yeah slices the the type was before outside the square brackets",
    "start": "402639",
    "end": "407919"
  },
  {
    "text": "it's it's not a great pattern well in maps too right well yeah Maps you have one type inside the square brackets and",
    "start": "407919",
    "end": "413280"
  },
  {
    "text": "one outside it it's I I don't know if we can read too much into that C++ it's uh it's angle brackets less than great",
    "start": "413280",
    "end": "419400"
  },
  {
    "text": "greater than so I guess they wanted to distinguish themselves from that well",
    "start": "419400",
    "end": "424599"
  },
  {
    "text": "angle brackets are problematic right deeply problematic because you can't because you're syntactically ambiguous",
    "start": "424599",
    "end": "430120"
  },
  {
    "text": "because you can't tell if you got a less than b then you know you can't oh is that the start of a of of a tie",
    "start": "430120",
    "end": "436280"
  },
  {
    "text": "parameter or is it not and and I think there's lots of good reasons not to use angle brackets for that reason I think",
    "start": "436280",
    "end": "442440"
  },
  {
    "text": "that's the same reason we didn't use parentheses as well cuz there was some syntactic am ambiguity actually the the",
    "start": "442440",
    "end": "448800"
  },
  {
    "text": "first generics proposal in go or the first serious generics proposal in go did use parenthesis so you you really",
    "start": "448800",
    "end": "454919"
  },
  {
    "text": "you really can use parenthesis but I think I think in that case they were considered not sufficiently",
    "start": "454919",
    "end": "460879"
  },
  {
    "text": "distinguished you know the square brackets it's somewhat distinguished right but not yeah there's still some",
    "start": "460879",
    "end": "467479"
  },
  {
    "text": "ambiguity there right so I guess that would be semantic ambiguity on The Human Side of like what is this thing saying",
    "start": "467479",
    "end": "473680"
  },
  {
    "text": "if you'd use you know regular parentheses instead of brackets yeah I think that would look quite weird just trying to imagine what it would look",
    "start": "473680",
    "end": "479919"
  },
  {
    "text": "like with parentheses like yeah that would be yeah it did it was there were just loads of parentheses and it's like",
    "start": "479919",
    "end": "486000"
  },
  {
    "text": "are we list yeah take me back to the 50s so have you used generics yourself like",
    "start": "486000",
    "end": "492800"
  },
  {
    "text": "Roger you mentioned that you you're currently working on implementing modules in the Q language does that work",
    "start": "492800",
    "end": "499879"
  },
  {
    "text": "call for the use of generics much uh no so I do use generics and I use them",
    "start": "499879",
    "end": "505520"
  },
  {
    "text": "quite often use them in a kind of in a in a in a local way that isn't part of the API you know often you want to like",
    "start": "505520",
    "end": "513039"
  },
  {
    "text": "there was there was a nice example I came across recently where I had like an interface type and an implementation",
    "start": "513039",
    "end": "520440"
  },
  {
    "text": "that basically join two of those together and you want to do that in parallel right so for every method call",
    "start": "520440",
    "end": "526519"
  },
  {
    "text": "there were quite like maybe 10 12 15 method calls you wanted to make a parallel call to both the underlying",
    "start": "526519",
    "end": "533560"
  },
  {
    "text": "values and gather the results together and without generics he'd have really",
    "start": "533560",
    "end": "539240"
  },
  {
    "text": "written a load of boilerplate code right and with generics I could write a little wrapper and and it just the code was",
    "start": "539240",
    "end": "545200"
  },
  {
    "text": "really super clean and you could just do it in in couple of lines same thing for every function regardless of the",
    "start": "545200",
    "end": "550640"
  },
  {
    "text": "signature of the function and that was worked out really nicely actually and and not only that you could oh well okay",
    "start": "550640",
    "end": "556920"
  },
  {
    "text": "we've got the boiler P well maybe we don't want to make that maybe we want to be sequential and",
    "start": "556920",
    "end": "562000"
  },
  {
    "text": "configurable that yeah super easy right so how would you have solved that problem if you hadn't had generics I'd",
    "start": "562000",
    "end": "568519"
  },
  {
    "text": "have probably just written out all the code would you just by hand probably yeah might might maybe code generation",
    "start": "568519",
    "end": "575360"
  },
  {
    "text": "but it wouldn't have been too bad I or maybe some Dynamic type conversion that that also but you'd have had to I'd have",
    "start": "575360",
    "end": "581959"
  },
  {
    "text": "had to implement a bunch of um a bunch of helper types probably yeah so that's it and I think like there are those user",
    "start": "581959",
    "end": "589160"
  },
  {
    "text": "cases where it's just perfect and that's why I think that was quite pleased that they came to the language we'll talk a",
    "start": "589160",
    "end": "595720"
  },
  {
    "text": "bit more about what's in changes in go 121 but I do really like the the slices",
    "start": "595720",
    "end": "601920"
  },
  {
    "text": "package yeah so for anyone that doesn't know this is like just you know there's",
    "start": "601920",
    "end": "607320"
  },
  {
    "text": "a common things you do a lot with slices and of course I've had the case where I wanted to search through a slice and",
    "start": "607320",
    "end": "614680"
  },
  {
    "text": "find something based on some function something like this and had to just write that manually for the particular",
    "start": "614680",
    "end": "620800"
  },
  {
    "text": "type that I was supporting I tried doing things with interfaces and things before but you end up adding a lot of",
    "start": "620800",
    "end": "626800"
  },
  {
    "text": "complexity in order to just solve that problem so I feel like the slices package is going to help us there um are",
    "start": "626800",
    "end": "632120"
  },
  {
    "text": "there any other good use cases we've seen me I feel on the slices package this thing too maybe it won't have to",
    "start": "632120",
    "end": "637440"
  },
  {
    "text": "Google the slice tricks document as much CU there's some things that it covers which I'm very happy about cuz it was",
    "start": "637440",
    "end": "644040"
  },
  {
    "text": "always annoying finding that thing even though it was like pretty easy to find I was like oh got go Google this thing it's not in like Dash or anything so",
    "start": "644040",
    "end": "650800"
  },
  {
    "text": "yeah but they also those slice you almost when you're reading the code it's not always obvious what's happening yeah",
    "start": "650800",
    "end": "657399"
  },
  {
    "text": "so it's almost like you need the slice up the slices thing when you're reading the code as well whereas if it's just like I don't know one of the examples",
    "start": "657399",
    "end": "664320"
  },
  {
    "text": "it's much easier to read isn't it so I I was still in the slices package I was really pleased that the Sorting function",
    "start": "664320",
    "end": "671000"
  },
  {
    "text": "there was faster I I always want to make programs faster and uh and we should say",
    "start": "671000",
    "end": "677519"
  },
  {
    "text": "so that slices will become part of the standard library in go 1.21 but it's",
    "start": "677519",
    "end": "683040"
  },
  {
    "text": "it's available right now as part of the the experimental directory from Google so you can you and I have been using it",
    "start": "683040",
    "end": "690040"
  },
  {
    "text": "for like a year so that change went into Prometheus using so where you would previously use sort. slice uh you can",
    "start": "690040",
    "end": "698000"
  },
  {
    "text": "change that to slices. sort that's much better isn't it but much more of an improvement now I much prefer that it is",
    "start": "698000",
    "end": "703800"
  },
  {
    "text": "you can easily see what's going on the other it really you you don't see it unless you look at a profile the um sort",
    "start": "703800",
    "end": "710720"
  },
  {
    "text": "one works in terms of interfaces so every single time it needs to compare two elements or to move things around or",
    "start": "710720",
    "end": "717320"
  },
  {
    "text": "whatever it's going through a dynamic dispatch through through the interface mechanism so it's doing extra lookups so",
    "start": "717320",
    "end": "724079"
  },
  {
    "text": "like oh what is this thing and and in particular when you're sorting like integers which which happens a couple of",
    "start": "724079",
    "end": "730639"
  },
  {
    "text": "times in Prometheus for instance the generic one just compiles all the way",
    "start": "730639",
    "end": "736959"
  },
  {
    "text": "down to like the machine instructions for less than so there's no no Dynamic lookup no function call Overhead no",
    "start": "736959",
    "end": "744519"
  },
  {
    "text": "nothing and it's like way way faster in Nar you know Niche case but it it was um",
    "start": "744519",
    "end": "752519"
  },
  {
    "text": "night and day that's pretty cool so is that does that actually happen when you're passing like a a function that",
    "start": "752519",
    "end": "758120"
  },
  {
    "text": "does the comparison of two integers so it kind of Dev virtualizes the whole thing yeah so there's two variants uh",
    "start": "758120",
    "end": "763720"
  },
  {
    "text": "slices. sort works for things like inss and strings that you can compare with less than and then there's a variant",
    "start": "763720",
    "end": "770839"
  },
  {
    "text": "which is called slices. sort Funk where you supply a less function and that one",
    "start": "770839",
    "end": "775959"
  },
  {
    "text": "that one's pretty good as well I mean it's not as much faster but as you just said it it Dev",
    "start": "775959",
    "end": "781320"
  },
  {
    "text": "virtualized it's calling through uh reference to a function which is much",
    "start": "781320",
    "end": "786440"
  },
  {
    "text": "faster than doing Dynamic dispatch on the uh on the elements of the slice yeah",
    "start": "786440",
    "end": "792079"
  },
  {
    "text": "I mean one one of the things that I was interested in like is a kind of a bit of a conflict for performance optimization",
    "start": "792079",
    "end": "798839"
  },
  {
    "text": "because in many languages like well C++ particularly but also languages like rust uh you know when you have a generic",
    "start": "798839",
    "end": "805480"
  },
  {
    "text": "type it's all de virtualized it's all inlined it's all you know like everything everything is basically",
    "start": "805480",
    "end": "811199"
  },
  {
    "text": "expanded out so what I one thing I worry about in go in the future is that people",
    "start": "811199",
    "end": "816959"
  },
  {
    "text": "make think something generic because of that performance specifically when",
    "start": "816959",
    "end": "822720"
  },
  {
    "text": "actually it would be kind of uh like a nicer easier to understand and and",
    "start": "822720",
    "end": "828760"
  },
  {
    "text": "simpler to use if it was using interfaces because if you what the",
    "start": "828760",
    "end": "834040"
  },
  {
    "text": "moment you're using generics you have to pass around that type parameter you know all those the actual type isn't hidden",
    "start": "834040",
    "end": "839279"
  },
  {
    "text": "under the hood as it were and Things become I I think in quite often harder to use so there's a kind of tension",
    "start": "839279",
    "end": "846040"
  },
  {
    "text": "there because if people make generics truly efficient like they can be then",
    "start": "846040",
    "end": "851079"
  },
  {
    "text": "you have this pressure to use generic types and then you start going down the the route of oh Things become harder to",
    "start": "851079",
    "end": "857800"
  },
  {
    "text": "use and go maybe starts to get that reputation so I I'm interested what you think about that Brian actually yeah",
    "start": "857800",
    "end": "864120"
  },
  {
    "text": "it's definitely complicated right now and and there's basically two cases is",
    "start": "864120",
    "end": "869240"
  },
  {
    "text": "the the case where you have some kind of method in your generic basically if your generic type parameter has an interface",
    "start": "869240",
    "end": "876120"
  },
  {
    "text": "which has some methods on it that's one case and then the the case where it doesn't have any methods but you do want",
    "start": "876120",
    "end": "882560"
  },
  {
    "text": "to use things like less than and greater than and it it basically has to be one of the underlying types that the",
    "start": "882560",
    "end": "888600"
  },
  {
    "text": "compiler handles so right now the the first case when it's it basically boils",
    "start": "888600",
    "end": "894120"
  },
  {
    "text": "down to an interface and it's it's slightly worse than an interface because the compiler is passing a little bit of extra information for the generic",
    "start": "894120",
    "end": "901880"
  },
  {
    "text": "mechanism so generic functions with parameters which our interface type are",
    "start": "901880",
    "end": "909639"
  },
  {
    "text": "not that fast little bit slower than than interfaces pre generic whereas",
    "start": "909639",
    "end": "915560"
  },
  {
    "text": "generic functions taking things which don't have methods can be blindingly fast certainly don't have any Dynamic",
    "start": "915560",
    "end": "922320"
  },
  {
    "text": "dispatch might enable you to inline things you couldn't do before so I mean",
    "start": "922320",
    "end": "927480"
  },
  {
    "text": "I think that's already too complicated for you know your typical go programmer to really grasp that's really down in",
    "start": "927480",
    "end": "934480"
  },
  {
    "text": "the weeds that's um sorry I don't want to insult anyone I just mean there's too much to grock to get your head around to",
    "start": "934480",
    "end": "942440"
  },
  {
    "text": "um read through the details of how this is implemented and that's just where we are today where it's what they call",
    "start": "942440",
    "end": "948800"
  },
  {
    "text": "monomorph isation it's everything is kind of coerced to look like an interface I think in the future if they",
    "start": "948800",
    "end": "955519"
  },
  {
    "text": "do start stamping out multiple copies of the code for different types for performance reasons then it'll just",
    "start": "955519",
    "end": "961639"
  },
  {
    "text": "it'll get much harder to understand the tradeoffs and yeah I I I certainly worry",
    "start": "961639",
    "end": "968319"
  },
  {
    "text": "a little bit about that I I guess where we are there's an uncomfortable thing that happens where where you you get advice to pass around",
    "start": "968319",
    "end": "974759"
  },
  {
    "text": "a function parameter and that's exactly why sort Funk sis. sort Funk has this extra parameter that we kind of don't",
    "start": "974759",
    "end": "981720"
  },
  {
    "text": "want to exist and it's a value parameter not a type parameter I that's C+ in C++",
    "start": "981720",
    "end": "986839"
  },
  {
    "text": "that would be a type parameter that would be a parameterization on the type of the function rather than a value that",
    "start": "986839",
    "end": "992279"
  },
  {
    "text": "you pass into the function so yeah we've got something that's a little bit ugly I would say and I guess what Mo most",
    "start": "992279",
    "end": "999880"
  },
  {
    "text": "people are just you know perfectly happy to to get the power the expressive power you know we we should be we should be",
    "start": "999880",
    "end": "1005519"
  },
  {
    "text": "trying to express programs nicely elegantly that should be our first concern and and then make it work make",
    "start": "1005519",
    "end": "1012279"
  },
  {
    "text": "it right make it fast only the last thing you do is performance yeah I I think my my ideal scenario would would",
    "start": "1012279",
    "end": "1018639"
  },
  {
    "text": "be where you could use either approach so you could use you could pass an interface in or you could pass function",
    "start": "1018639",
    "end": "1024600"
  },
  {
    "text": "parameter in the compiler is clever enough to know that that's static to know that that's you're always passing",
    "start": "1024600",
    "end": "1030918"
  },
  {
    "text": "the same function and do the same thing regardless of whether you're using generics or not right and it proba I",
    "start": "1030919",
    "end": "1037280"
  },
  {
    "text": "think does devirtualization in a bunch of cases apparently the profile guided optimization is clever enough to do that",
    "start": "1037280",
    "end": "1043720"
  },
  {
    "text": "sort of thing now in certain cases which is interesting so you know that's that's",
    "start": "1043720",
    "end": "1049080"
  },
  {
    "text": "pretty cool yeah but I like that message this thing of focus on making the code easy to read easy to maintain there are",
    "start": "1049080",
    "end": "1056160"
  },
  {
    "text": "times I think when and if you're lucky you'll reach the point where it really performance really matters you know",
    "start": "1056160",
    "end": "1062400"
  },
  {
    "text": "where you've got either massive scale or just you've got things that are being used depends on the problem really and",
    "start": "1062400",
    "end": "1068000"
  },
  {
    "text": "then it's worth that kind of digging in to the details and and maybe even worth",
    "start": "1068000",
    "end": "1073440"
  },
  {
    "text": "a bit of complexity and a little bit of sort of ugliness just to for that purpose then then you're making a",
    "start": "1073440",
    "end": "1079679"
  },
  {
    "text": "tradeoff for quite a good reason but I guess Brian you'd recommend you you",
    "start": "1079679",
    "end": "1084720"
  },
  {
    "text": "profile first you gather data you wait until you have one of those situations",
    "start": "1084720",
    "end": "1089919"
  },
  {
    "text": "yeah I mean you almost always find that your performance problems are in a few small places and and so maybe it's okay",
    "start": "1089919",
    "end": "1097120"
  },
  {
    "text": "to make something that was was five lines of code into 30 lines because",
    "start": "1097120",
    "end": "1102360"
  },
  {
    "text": "that's the bulk of your performance problem but don't do that all over the place yeah and that is tempting I",
    "start": "1102360",
    "end": "1107960"
  },
  {
    "text": "remember I just wanted to just have the fastest possible thing like it was almost like",
    "start": "1107960",
    "end": "1113320"
  },
  {
    "text": "gamified it for myself of just like I want the best performance of course I do and I would I would sometimes trade off",
    "start": "1113320",
    "end": "1119720"
  },
  {
    "text": "the you know I felt like I'm being clever here I'm doing this and yeah it might be complicated you takes a bit you",
    "start": "1119720",
    "end": "1126240"
  },
  {
    "text": "have to be smart to understand it I wouldn't go as far as insulting the half the community like you did Brian yeah",
    "start": "1126240",
    "end": "1131760"
  },
  {
    "text": "but but and then and then maintaining that code over time and where I would forget I'd be like what on Earth Earth",
    "start": "1131760",
    "end": "1138600"
  },
  {
    "text": "is this and then I was like you know what I'll just rather it was dead simple thanks yeah was there someone like Brian",
    "start": "1138600",
    "end": "1145600"
  },
  {
    "text": "kigan said um you need to be smarter to debug a piece of code than you do to write it and therefore if if you write",
    "start": "1145600",
    "end": "1152480"
  },
  {
    "text": "the code to the limit of your ability then you're actually not able to debug it right I like that that sort that",
    "start": "1152480",
    "end": "1158919"
  },
  {
    "text": "slices do sort does that work with anything can you pass any type into that function only ones that support less",
    "start": "1158919",
    "end": "1165840"
  },
  {
    "text": "than so so ins and floats and strings but that's there's a sort of funk where",
    "start": "1165840",
    "end": "1171039"
  },
  {
    "text": "you you supply a function that implements less if you have a a more interesting type yeah so this is where",
    "start": "1171039",
    "end": "1177320"
  },
  {
    "text": "constraints comes in uh this is the sort of part of our generics is we have these",
    "start": "1177320",
    "end": "1182880"
  },
  {
    "text": "quite interesting looking ways of expressing like these are this is a constraint of the types that you can",
    "start": "1182880",
    "end": "1188720"
  },
  {
    "text": "pass into this thing um and there are a few built-in ones aren't there no in fact they've gone the other way they",
    "start": "1188720",
    "end": "1194440"
  },
  {
    "text": "they' in 1.21 there's a new package called K and I think the main purpose of that is to Define an ordered type which",
    "start": "1194440",
    "end": "1201960"
  },
  {
    "text": "is these things that that support less than so it's in it's in the library it's not in the language I think there's a",
    "start": "1201960",
    "end": "1207679"
  },
  {
    "text": "difference so there's kind of two kinds of you can constrain something in various ways you can constrain it it's",
    "start": "1207679",
    "end": "1214120"
  },
  {
    "text": "it looks like an interface type constraint is actually an interface type and it can have methods like any",
    "start": "1214120",
    "end": "1220320"
  },
  {
    "text": "interface type so that means that your constrained that that type is constrained to have those methods but also you can name a number of other",
    "start": "1220320",
    "end": "1227159"
  },
  {
    "text": "types and say this interface must be one of these and you just say that like int",
    "start": "1227159",
    "end": "1232320"
  },
  {
    "text": "or like as in the bar Side bar symbol pipe symbol or string or and that that",
    "start": "1232320",
    "end": "1237559"
  },
  {
    "text": "basically means that that value must be any one of those and because and if some",
    "start": "1237559",
    "end": "1243120"
  },
  {
    "text": "operation is supported by all of those then you're able to use it in your gener function um and that's how for example",
    "start": "1243120",
    "end": "1251039"
  },
  {
    "text": "that sort function can work with less than because it's got a constraint that says that mentions all the possible",
    "start": "1251039",
    "end": "1257640"
  },
  {
    "text": "underlying types in the language of which there aren't that many like 10 or 15 or something you know like we've got",
    "start": "1257640",
    "end": "1263520"
  },
  {
    "text": "all the U types all the in types A few others and because we've mentioned all of those it means we can use less than",
    "start": "1263520",
    "end": "1270760"
  },
  {
    "text": "and we can pass any of our existing types that we can compare less that which is you know that's pretty cool I",
    "start": "1270760",
    "end": "1277400"
  },
  {
    "text": "gave a talk at goon last year goon UK last year where I talked about using",
    "start": "1277400",
    "end": "1283159"
  },
  {
    "text": "unconstrained tipes and and how they were kind of strictly more powerful I didn't talk about performance at all",
    "start": "1283159",
    "end": "1289400"
  },
  {
    "text": "there and and yes definitely less powerful but I thought the salort versus salort Funk example is an interesting",
    "start": "1289400",
    "end": "1295400"
  },
  {
    "text": "example of that because you can you can write one in terms of the other so you can write sort in terms of sort Funk but",
    "start": "1295400",
    "end": "1303000"
  },
  {
    "text": "you can't do the other way around right which is kind of interesting to me well particularly as sort is more performant",
    "start": "1303000",
    "end": "1309640"
  },
  {
    "text": "as well which is like bit of a shame right because we'd like to be able to write the the more generic the more",
    "start": "1309640",
    "end": "1315240"
  },
  {
    "text": "powerful version rather than the other one if I ideally I think but that that actually made me think of so there's one",
    "start": "1315240",
    "end": "1321919"
  },
  {
    "text": "thing we haven't talked about here which I think is like it just kind of fell out from the design and I think it's",
    "start": "1321919",
    "end": "1327600"
  },
  {
    "text": "amazingly powerful and quite interesting is that of generic interface types right",
    "start": "1327600",
    "end": "1332760"
  },
  {
    "text": "which people don't I'm not sure people are aware of quite how useful powerful",
    "start": "1332760",
    "end": "1338400"
  },
  {
    "text": "they are so you can have an like an interface type that actually itself has a type parameter so for example you",
    "start": "1338400",
    "end": "1344320"
  },
  {
    "text": "could imagine I don't know sort you know compare interface type that has a method uh that takes two parameters both of",
    "start": "1344320",
    "end": "1351559"
  },
  {
    "text": "type t for any type and returns Bo so that's kind of equivalent to a function that takes to type Fe but you can have",
    "start": "1351559",
    "end": "1357960"
  },
  {
    "text": "multiple methods right so and that's actually a really powerful really powerful Paradigm essentially you can",
    "start": "1357960",
    "end": "1364240"
  },
  {
    "text": "you can define a kind of algebra between your methods in terms of this abstract type in terms of this type that we",
    "start": "1364240",
    "end": "1370279"
  },
  {
    "text": "haven't defined yet which is quite cool and and because it's an interface you've actually got an underlying value you're",
    "start": "1370279",
    "end": "1376159"
  },
  {
    "text": "passing this thing of type T into this interface but you've actually got a value under there too so for example it",
    "start": "1376159",
    "end": "1382320"
  },
  {
    "text": "could know how to sort right or it could know and and I've used that few times and I've found it yes quite interesting",
    "start": "1382320",
    "end": "1389120"
  },
  {
    "text": "but I don't know the performance implications of it I have no idea what you know Brian you might know what is it",
    "start": "1389120",
    "end": "1395240"
  },
  {
    "text": "efficient to call a method on a generic interface or is about the same as a as",
    "start": "1395240",
    "end": "1400440"
  },
  {
    "text": "calling it on a normal interface or methods are slightly worse uh with generics than they were before methods",
    "start": "1400440",
    "end": "1406480"
  },
  {
    "text": "on interfaces so it's a little bit disappointing so I I guess an example",
    "start": "1406480",
    "end": "1411880"
  },
  {
    "text": "which is a little bit like what you're talking about is is the Heap not the Heap that you allocate memory on but the",
    "start": "1411880",
    "end": "1416960"
  },
  {
    "text": "the one which sort of keeps the smallest element at the front so that's expressed in the go standard Library as as an",
    "start": "1416960",
    "end": "1423600"
  },
  {
    "text": "interface that has a less method but also has a a swap method and and a pop",
    "start": "1423600",
    "end": "1429480"
  },
  {
    "text": "or push me I forget exactly what it has anyway I noticed that there wasn't one of those in the slices package and I",
    "start": "1429480",
    "end": "1436600"
  },
  {
    "text": "round about Christmas time I was work I thought oh you know I I'll be able to fix that in a couple of hours and this",
    "start": "1436600",
    "end": "1443120"
  },
  {
    "text": "ballooned into something that that took weeks because it's just not that nice to try and express a thing which is a",
    "start": "1443120",
    "end": "1450279"
  },
  {
    "text": "container and has operations on the objects being contained in terms of go",
    "start": "1450279",
    "end": "1455720"
  },
  {
    "text": "generics and um I've got a talk at uh goer Con in San Diego coming up where I",
    "start": "1455720",
    "end": "1462240"
  },
  {
    "text": "sort of explain where all this landed uh which is with a with a completely different data structure called a loser",
    "start": "1462240",
    "end": "1467480"
  },
  {
    "text": "tree so I won't I won't go into the whole explanation of that right now but anyway uh short version is that that it's kind",
    "start": "1467480",
    "end": "1475000"
  },
  {
    "text": "of yeah leaves a lot to be desired right now trying to express a a kind of a generic thing which operates as a",
    "start": "1475000",
    "end": "1482279"
  },
  {
    "text": "container on other things interesting so do you think that's a fundamental limitation of the current generics",
    "start": "1482279",
    "end": "1488360"
  },
  {
    "text": "design or something that could be addressed with a language change or maybe it's just because it's performance not performance no well it's a little",
    "start": "1488360",
    "end": "1494880"
  },
  {
    "text": "bit of everything I I mean the the um kind of borrow dra from something we thought we were going to talk about later that there's there's a function",
    "start": "1494880",
    "end": "1501360"
  },
  {
    "text": "couple of functions Max and Min have been put into go 1.21 and I think they they form a sort of similar example so",
    "start": "1501360",
    "end": "1508279"
  },
  {
    "text": "you can write a generic in goal you can write a function using generics which takes a a type T and just basically says",
    "start": "1508279",
    "end": "1517360"
  },
  {
    "text": "if if a less than b then the minimum is is a otherwise it's B you can write that",
    "start": "1517360",
    "end": "1524039"
  },
  {
    "text": "but it's not the function that you want in the case of floating point numbers because in the case of floating Point",
    "start": "1524039",
    "end": "1530000"
  },
  {
    "text": "numbers they have this exception which is a nan not a number and nans are never less than or greater than and you know",
    "start": "1530000",
    "end": "1537240"
  },
  {
    "text": "this is sort of annoying anomaly and where that story ended in 1.21 is these",
    "start": "1537240",
    "end": "1543240"
  },
  {
    "text": "things became built-ins in the language so they they sort of cheated the kobashi Maru of feature development well well",
    "start": "1543240",
    "end": "1550360"
  },
  {
    "text": "it's it's ironic because Max and men were one of in L Taylor's kind of red lines like if we can't express Max and",
    "start": "1550360",
    "end": "1557480"
  },
  {
    "text": "Men with generics then you know then the generics design isn't good enough right but now oh damn it we still can't",
    "start": "1557480",
    "end": "1564840"
  },
  {
    "text": "express Maxim with generic so I'm putting them in the language yeah yeah so harping back to C++ in that language",
    "start": "1564840",
    "end": "1571960"
  },
  {
    "text": "you can you can write what are called partial template specializations you you can basically say well if it's a float",
    "start": "1571960",
    "end": "1578240"
  },
  {
    "text": "you say this to the compiler I want you to use this version of the code and then if I don't say anything just use this",
    "start": "1578240",
    "end": "1583840"
  },
  {
    "text": "other version and that technique that language feature would I think get us out of this problem so basically I do",
    "start": "1583840",
    "end": "1591840"
  },
  {
    "text": "think that's the thing that would help the ability to put special cases into my",
    "start": "1591840",
    "end": "1597159"
  },
  {
    "text": "generics and say you know if it's this kind of a thing I want you to use this kind of code and if it's this other kind",
    "start": "1597159",
    "end": "1603440"
  },
  {
    "text": "of a thing then do it totally differently do you think so there's a proposal that I made a little while ago",
    "start": "1603440",
    "end": "1609840"
  },
  {
    "text": "for type switching on generic types type switching on par it's issue",
    "start": "1609840",
    "end": "1615360"
  },
  {
    "text": "45380 oh how could I forget ah but with that with that would that give you what",
    "start": "1615360",
    "end": "1620520"
  },
  {
    "text": "you want I have to confess I haven't read it but it I mean maybe yeah it sounds so basically what you what you",
    "start": "1620520",
    "end": "1627039"
  },
  {
    "text": "don't want is is for the uh runtime to be executing these type you don't you don't want to be executing these these",
    "start": "1627039",
    "end": "1633200"
  },
  {
    "text": "types at checks at runtime which is kind of where you you might try and do it today it would work but it would just be",
    "start": "1633200",
    "end": "1640320"
  },
  {
    "text": "horrible in performance for for anything lowlevel like aort or something like that uh yes if if they're comp is doing",
    "start": "1640320",
    "end": "1648080"
  },
  {
    "text": "it a compile time that would be better I guess a type I mean is it literally a switch like with case statements is that",
    "start": "1648080",
    "end": "1654559"
  },
  {
    "text": "what you proposed y pretty much except the target of the switch is the type itself rather than the value yeah it' be",
    "start": "1654559",
    "end": "1660640"
  },
  {
    "text": "interesting to try it out I mean all the other things that I'm familiar with in that space tend to do more of a pattern",
    "start": "1660640",
    "end": "1666039"
  },
  {
    "text": "matching approach I guess rust does that doesn't it I'm not a I'm not a big rust",
    "start": "1666039",
    "end": "1671559"
  },
  {
    "text": "user but um I think it it borrowed the idea from hasco which sort of borrowed it from ml which I did learn yeah so so",
    "start": "1671559",
    "end": "1679120"
  },
  {
    "text": "I I think conceptually it's a little bit nicer to sort of write out the the patterns of things that you're trying to",
    "start": "1679120",
    "end": "1684279"
  },
  {
    "text": "match and and the code that goes with those yeah I mean this wouldn't allow you to do something like oh a slice of",
    "start": "1684279",
    "end": "1690760"
  },
  {
    "text": "anything right you you'd have to type switch on specific types because",
    "start": "1690760",
    "end": "1696320"
  },
  {
    "text": "otherwise I think it might be otherwise basically you're in reflection territory right which not great yeah performance",
    "start": "1696320",
    "end": "1703480"
  },
  {
    "text": "interesting future anyway yeah that definitely seems doable I just kind that proposal Roger and I feel like that",
    "start": "1703480",
    "end": "1710720"
  },
  {
    "text": "could be done at compile time right I mean yeah it could definitely be done at compile time yes that's because you know",
    "start": "1710720",
    "end": "1716640"
  },
  {
    "text": "the types one of the things about generics is it's fundamentally it's all exp or logically it's all expanded out",
    "start": "1716640",
    "end": "1723440"
  },
  {
    "text": "compile time even though it might not actually be fully expanded out of compile time you you you have all the",
    "start": "1723440",
    "end": "1729039"
  },
  {
    "text": "information you need you can't dynamically generate Dynamic generic tipes although theoretically you can",
    "start": "1729039",
    "end": "1736760"
  },
  {
    "text": "like except the compiler finds it finds it out and say no no you can't do that we've got to because you can have a",
    "start": "1736760",
    "end": "1742279"
  },
  {
    "text": "recursive type you could have a recursive type that has a type definition there in there which you know",
    "start": "1742279",
    "end": "1748159"
  },
  {
    "text": "involves two of the original and then calls itself and then you get this blow up of infinite number of generic types",
    "start": "1748159",
    "end": "1755200"
  },
  {
    "text": "it's like the compiler no no not today uh how would people show support for that proposal",
    "start": "1755200",
    "end": "1762320"
  },
  {
    "text": "how does it work like I noticed that there's like thumbs up and things do people pay attention to that I I believe",
    "start": "1762320",
    "end": "1768440"
  },
  {
    "text": "so I mean no one's come up I haven't seen any any anyone no one's come up with a good C proposal I think I think",
    "start": "1768440",
    "end": "1775720"
  },
  {
    "text": "they just need to have the energy the go team need to sort of say yeah this is this is worth working on now you know",
    "start": "1775720",
    "end": "1781919"
  },
  {
    "text": "this is because I think last I heard Russ is like yeah for later you know it's a proposal hold is what it what it",
    "start": "1781919",
    "end": "1789799"
  },
  {
    "text": "is too much for now and you can kind of do it at the moment with a dynamic type switch I'm surprised you yourself",
    "start": "1789799",
    "end": "1795799"
  },
  {
    "text": "haven't been put on proposal holds Roger I am pretty much on hold Al together say",
    "start": "1795799",
    "end": "1801600"
  },
  {
    "text": "yeah because Roger I don't yeah aren't you responsible for the error interface I did I did suggest the error interface",
    "start": "1801600",
    "end": "1808240"
  },
  {
    "text": "and they saw they saw it and said ah yes this is what we're looking for because they were about to propose like a you",
    "start": "1808240",
    "end": "1813840"
  },
  {
    "text": "know that the error thing that just be a package that you imported everywhere everywhere would have to import errors",
    "start": "1813840",
    "end": "1820320"
  },
  {
    "text": "and and say erors not error it's like no come on this is well then it'd be more popular than testify at least until then",
    "start": "1820320",
    "end": "1827360"
  },
  {
    "text": "oh by the way I found out at go foron we did a we did a panel with the go team I found out that testify my package is",
    "start": "1827360",
    "end": "1834799"
  },
  {
    "text": "banned in Google so it's like good that's going on my uh that's going on my",
    "start": "1834799",
    "end": "1840039"
  },
  {
    "text": "resume what do you mean good Brian don't you don't you don't you use it well I like uh you know I think conflict is",
    "start": "1840039",
    "end": "1846880"
  },
  {
    "text": "good for um bit of tension bit of drama CDD well I could use that I could use",
    "start": "1846880",
    "end": "1852600"
  },
  {
    "text": "that as a as a moment to shout out QT oh yeah which is my generics based uh",
    "start": "1852600",
    "end": "1858279"
  },
  {
    "text": "testing testing package which I quite like it was kind of has fake Heritage from uh gustavo's uh check package",
    "start": "1858279",
    "end": "1867919"
  },
  {
    "text": "originally was but but anyway yes it used generics and I quite like it because it's small which I don't think",
    "start": "1867919",
    "end": "1873440"
  },
  {
    "text": "you can accuse testify things more no I I also had the same feeling and and I actually have another package which is",
    "start": "1873440",
    "end": "1880360"
  },
  {
    "text": "on GitHub Matt r/ is and that is like I call it testify off steroids it's like",
    "start": "1880360",
    "end": "1886919"
  },
  {
    "text": "the minimalist version for the same kind of Reason uh but it's not generic so that's quite interesting I wonder how",
    "start": "1886919",
    "end": "1892919"
  },
  {
    "text": "yeah so this is quite nice because cuz if you want to compare two things you know for equality or particularly for",
    "start": "1892919",
    "end": "1898799"
  },
  {
    "text": "not equality you want to make sure that they're actually the same type and generics can can do that quite nicely",
    "start": "1898799",
    "end": "1904720"
  },
  {
    "text": "and and I quite like so the other thing the other nice thing I think like about is composable so you can you know you",
    "start": "1904720",
    "end": "1910600"
  },
  {
    "text": "can put these things together and you can make new Checkers which all fit into the same framework so I I've been using",
    "start": "1910600",
    "end": "1916679"
  },
  {
    "text": "it recently and I've been quite I've been quite happy with it I shall post a link to it yeah let's put we'll put a",
    "start": "1916679",
    "end": "1922960"
  },
  {
    "text": "link into the show notes for that very cool I was going to ask I was literally",
    "start": "1922960",
    "end": "1928639"
  },
  {
    "text": "QT the letters it's it it saves importing dot it's QT dot is a fairly",
    "start": "1928639",
    "end": "1933720"
  },
  {
    "text": "small small prefix cool good thing we have a link cuz I think people Googling qt are going to find not that yeah this",
    "start": "1933720",
    "end": "1941559"
  },
  {
    "text": "is true this is true actually I should shout to Franchesco bankone who who wrote the original Quick Test from which",
    "start": "1941559",
    "end": "1947559"
  },
  {
    "text": "this is pretty much he was a previous colleague of mine so we we uh we we",
    "start": "1947559",
    "end": "1952960"
  },
  {
    "text": "wrote it together basically nice so when it comes to like people choosing to pick",
    "start": "1952960",
    "end": "1958279"
  },
  {
    "text": "up generics or not is there sort of advice like we we sometimes say if you're going to do an abstraction like",
    "start": "1958279",
    "end": "1964320"
  },
  {
    "text": "solve the problem a couple of times before and that really helps figure out what the right kind of abstraction is or",
    "start": "1964320",
    "end": "1970519"
  },
  {
    "text": "if indeed there is one that's suitable do we have the same kind of advice for generics is this a case where you think",
    "start": "1970519",
    "end": "1977120"
  },
  {
    "text": "there's a clear case for generics to just use it or should you just Implement solve your problems with the specific",
    "start": "1977120",
    "end": "1982519"
  },
  {
    "text": "type if you only need to solve it for one type first and add make them generic later what would be your thoughts on",
    "start": "1982519",
    "end": "1989080"
  },
  {
    "text": "that yeah I I think I would agree with that I mean thought you like conflict Brian well yeah I I I just like uh you",
    "start": "1989080",
    "end": "1997120"
  },
  {
    "text": "know writing programs keep it simple most of the time so if you just implemented one thing then then yeah",
    "start": "1997120",
    "end": "2003279"
  },
  {
    "text": "don't muck around making it generic it's only if you find yourself imple ing it two or three times or you want to reuse",
    "start": "2003279",
    "end": "2011200"
  },
  {
    "text": "the same thing in somebody else's program and it and it it really benefits from being made generic in that way one",
    "start": "2011200",
    "end": "2016840"
  },
  {
    "text": "of the things that I really like actually in ter for using that pattern in go and it applies for both interfaces",
    "start": "2016840",
    "end": "2022880"
  },
  {
    "text": "and generics actually is that you can do that you can do it for one type and actually the changes to make it generic",
    "start": "2022880",
    "end": "2028760"
  },
  {
    "text": "the changes to make it using the interface tend to be pretty small right you can take that generic code and just",
    "start": "2028760",
    "end": "2033799"
  },
  {
    "text": "like do a global substitution of the type by the type parameter and oh done",
    "start": "2033799",
    "end": "2039559"
  },
  {
    "text": "you know just add a few square brackets here and there that's you know just just works so I I would say that's a you good",
    "start": "2039559",
    "end": "2046200"
  },
  {
    "text": "approach and and and helped by Go's syntax and semantics I found it",
    "start": "2046200",
    "end": "2052118"
  },
  {
    "text": "sometimes takes a bit of thought to figure out what is the thing that I should be parameter you know if if I've sort of fundamentally got a slice of",
    "start": "2052119",
    "end": "2058878"
  },
  {
    "text": "thing do I parameterize on the thing that it is the slice or do I parameterize on the thing inside the",
    "start": "2058879",
    "end": "2064158"
  },
  {
    "text": "slice I'm not sure yet what if there's a rule there but those those kind of",
    "start": "2064159",
    "end": "2069280"
  },
  {
    "text": "questions take a bit of time sometimes you got you got to maybe try it two different ways and see what happens we",
    "start": "2069280",
    "end": "2075398"
  },
  {
    "text": "find you know start out and see where you get blocked yeah I actually found an interesting case for that recently where",
    "start": "2075399",
    "end": "2082520"
  },
  {
    "text": "it was changing an API and I wanted to change it in a backwardly compatible way and there were basically two types both",
    "start": "2082520",
    "end": "2089878"
  },
  {
    "text": "of which were kind of one was Type X Y you know so it was like a new type but",
    "start": "2089879",
    "end": "2095000"
  },
  {
    "text": "had the same underlying type and I wanted to the old one was deprecated the new one was you know was new but we had",
    "start": "2095000",
    "end": "2102560"
  },
  {
    "text": "this function that took the old type so of course oh well you know we want to make it Che the new type and it was",
    "start": "2102560",
    "end": "2107880"
  },
  {
    "text": "taking a pointer type so I said uh you know the type parameter is Foo and it's taking star Fu and then we'll we'll",
    "start": "2107880",
    "end": "2114000"
  },
  {
    "text": "actually do a type conversion inside the function to the new type which technically should have worked with saying we're allowing just this old type",
    "start": "2114000",
    "end": "2121000"
  },
  {
    "text": "and just this new type we could type convert between them but doesn't all you can't do that but can do that if you",
    "start": "2121000",
    "end": "2128240"
  },
  {
    "text": "type if you move the pointer out so you're like you type prator it's it's either star old type or Star new type",
    "start": "2128240",
    "end": "2135480"
  },
  {
    "text": "then you can do the type conversion so there little little yeah little niggles like that which is like oh that's",
    "start": "2135480",
    "end": "2141280"
  },
  {
    "text": "interesting where that kind of decision can make a difference so generally Brian then would you say that you are unhappy",
    "start": "2141280",
    "end": "2148560"
  },
  {
    "text": "with the performance of generics or do you feel like in most cases I think I would go as far as disappointed because",
    "start": "2148560",
    "end": "2155119"
  },
  {
    "text": "I personally but with my background in C++ I I sort of expected there would be",
    "start": "2155119",
    "end": "2161359"
  },
  {
    "text": "more stamping out of the different versions of the code specialized to each type and more opportunities for inlining",
    "start": "2161359",
    "end": "2168319"
  },
  {
    "text": "and and so on and so forth and and basically the opposite is true unless your type is a a built-in like an INT or",
    "start": "2168319",
    "end": "2175800"
  },
  {
    "text": "or a float performance gets a little bit worse when when using generics and methods on generics so I was I was",
    "start": "2175800",
    "end": "2183760"
  },
  {
    "text": "disappointed by that I mean you know I first war prob right it's uh having generics at all is",
    "start": "2183760",
    "end": "2190240"
  },
  {
    "text": "vastly better than where we were before but there there are still these well it's kind of corner cases that I tend to",
    "start": "2190240",
    "end": "2196800"
  },
  {
    "text": "inhabit where you still reaching for other techniques but do and like this",
    "start": "2196800",
    "end": "2201880"
  },
  {
    "text": "this we talked about this a bit before but is this like that's forever because of the design or is this sort of like",
    "start": "2201880",
    "end": "2208240"
  },
  {
    "text": "over time these things will improve under the hood and we can just wait yeah I I expect it to improve over time and",
    "start": "2208240",
    "end": "2214599"
  },
  {
    "text": "particularly profile guided optimization I think so without trying to not get too deep into the weeds the current",
    "start": "2214599",
    "end": "2221280"
  },
  {
    "text": "implementation says that anything where the layout in memory looks the same I.E",
    "start": "2221280",
    "end": "2227400"
  },
  {
    "text": "you know this is this is always uh 8 by fundamental type or this is always a 48",
    "start": "2227400",
    "end": "2234400"
  },
  {
    "text": "byte struct with four things in it or something like that anything that looks like that will run the same code and",
    "start": "2234400",
    "end": "2241319"
  },
  {
    "text": "anything that looks the same in memory will run the same code is is the current implementation and so they could",
    "start": "2241319",
    "end": "2247000"
  },
  {
    "text": "generalize that a little bit to say well we ran the profile the profile guided Optimizer says there are these two cases",
    "start": "2247000",
    "end": "2253800"
  },
  {
    "text": "that we should kind of flatten out into the most performant code and then every other case is going to still run the",
    "start": "2253800",
    "end": "2260079"
  },
  {
    "text": "same code I think that's eminently doable it's you know I'm hand waving a lot of work onto whoever actually has to",
    "start": "2260079",
    "end": "2267200"
  },
  {
    "text": "implement it but um I expect something like that will happen it kind of reminds",
    "start": "2267200",
    "end": "2272480"
  },
  {
    "text": "me I got to get uh profile guided optimization plumbed into our our CI pipelines cuz it's it's been available",
    "start": "2272480",
    "end": "2280079"
  },
  {
    "text": "since uh 1.20 and I think it's turned on by default in 1.21 so really should get",
    "start": "2280079",
    "end": "2285800"
  },
  {
    "text": "going on that what will that do for people oh good question well so first of all the the mechanism is basically that",
    "start": "2285800",
    "end": "2291839"
  },
  {
    "text": "you supply the compiler with a a profile like a in the PPR format the that is a",
    "start": "2291839",
    "end": "2299800"
  },
  {
    "text": "record of what the program was doing when you ran it doing its normal thing so the compiler can then look at that",
    "start": "2299800",
    "end": "2306000"
  },
  {
    "text": "and say well I see that 80% of the time in this program was in this one function so I'm",
    "start": "2306000",
    "end": "2311880"
  },
  {
    "text": "going to change the rules that I apply so there are certain rules inside the compiler like like for instance how when",
    "start": "2311880",
    "end": "2318040"
  },
  {
    "text": "am I going to inline other functions and it normally only inlines really small",
    "start": "2318040",
    "end": "2323119"
  },
  {
    "text": "functions but if it sees that uh this one thing is 80% of the whole program in",
    "start": "2323119",
    "end": "2329480"
  },
  {
    "text": "at runtime then it can say I'm going to inline a bunch more things I'm going to",
    "start": "2329480",
    "end": "2334839"
  },
  {
    "text": "really change the rules on this one I'm going to go all out for performance just in this one place so the the go team",
    "start": "2334839",
    "end": "2342800"
  },
  {
    "text": "themselves said that the pgo profile guided optimization gave them a 6%",
    "start": "2342800",
    "end": "2348560"
  },
  {
    "text": "performance Improvement on the compiler in their benchmarks on the go compiler",
    "start": "2348560",
    "end": "2353800"
  },
  {
    "text": "so you know it's it's obviously Case by case but uh it's a little bit more work",
    "start": "2353800",
    "end": "2359520"
  },
  {
    "text": "because you have to come up with some kind of Representative profile you know maybe maybe that's if you only work in",
    "start": "2359520",
    "end": "2365560"
  },
  {
    "text": "one environment that's pulled from your production environment if you if you have a a wide range of use cases you",
    "start": "2365560",
    "end": "2371680"
  },
  {
    "text": "maybe use benchmarks and profile that so can you combine different profiles a bunch of different profiles uh that's a",
    "start": "2371680",
    "end": "2378040"
  },
  {
    "text": "good question I I mean in in general there are tools that do that you know like fleetwide continuous profiling is a",
    "start": "2378040",
    "end": "2385160"
  },
  {
    "text": "is a very general case of what you just said and there's several companies sell that kind of a product so I don't know",
    "start": "2385160",
    "end": "2392359"
  },
  {
    "text": "whether you can just sort of give six files to the compiler and it figures out what to do but I mean a profile is essentially a",
    "start": "2392359",
    "end": "2399400"
  },
  {
    "text": "list of of Stack traces in the code and counts sampling counts of those the number of times that stack Trace showed",
    "start": "2399400",
    "end": "2406160"
  },
  {
    "text": "up so you you can essentially aggregate different profiles just just by finding",
    "start": "2406160",
    "end": "2411520"
  },
  {
    "text": "the common stack traces and adding all the counts up I mean to be clear this is applying to one main program right one",
    "start": "2411520",
    "end": "2418040"
  },
  {
    "text": "binary so you can't sort of say oh we've got profiles of a bunch of things for this particular Library you know that",
    "start": "2418040",
    "end": "2425480"
  },
  {
    "text": "that doesn't apply or is it just that's a good question I I think it's it's matching on the um the kind of module",
    "start": "2425480",
    "end": "2431359"
  },
  {
    "text": "name function name how often that shows up so it it ought to be applicable to",
    "start": "2431359",
    "end": "2436520"
  },
  {
    "text": "libraries and it it ought to be fairly generally generally applicable I guess",
    "start": "2436520",
    "end": "2442000"
  },
  {
    "text": "the the thing maybe that you don't want to do is supply a profile that's kind of wildly unrepresentative because then the",
    "start": "2442000",
    "end": "2448040"
  },
  {
    "text": "compiler will do the wrong thing make your program at least bigger which might make it a little bit slower so if I'm",
    "start": "2448040",
    "end": "2455000"
  },
  {
    "text": "providing if I'm if I'm supplying a module that other people are using I I'd still be it would still be worth doing",
    "start": "2455000",
    "end": "2461480"
  },
  {
    "text": "some pgl on on on that that's oh well that's a good question because generally people don't use pre-compiled code in go",
    "start": "2461480",
    "end": "2469680"
  },
  {
    "text": "generally they're they're compiling it all on their target so it wouldn't see",
    "start": "2469680",
    "end": "2474880"
  },
  {
    "text": "that if you import a module for example yeah so it is something in that sense it applies more to the main program and",
    "start": "2474880",
    "end": "2481760"
  },
  {
    "text": "would you keep updating the profile so that you sort of as things change you keep right yeah that that would be a",
    "start": "2481760",
    "end": "2487480"
  },
  {
    "text": "good idea I don't think that's vital I think like I say the the worst thing that can happen is the compiler kind of",
    "start": "2487480",
    "end": "2493160"
  },
  {
    "text": "optimizes the wrong thing that has the potential to be interesting because the profile guarded program itself will have",
    "start": "2493160",
    "end": "2499960"
  },
  {
    "text": "different profile right so you kind of need to iterate that's a good point yeah I I think that it's it's at the margins",
    "start": "2499960",
    "end": "2505960"
  },
  {
    "text": "it's things like certainly right now inlining I think is the main thing that gets affected but it might in future do",
    "start": "2505960",
    "end": "2512280"
  },
  {
    "text": "Loop un rolling for instance based on uh on how intensive this function is used",
    "start": "2512280",
    "end": "2519079"
  },
  {
    "text": "yeah until we have an AI That's just doing this all for us and then we can stop worrying about it and we don't have to talk to Brian",
    "start": "2519079",
    "end": "2524960"
  },
  {
    "text": "anymore on the performance point I know like we it wasn't planned this way but I kind of feel like having generics have",
    "start": "2524960",
    "end": "2531480"
  },
  {
    "text": "slightly worse performance for that kind of interface case might actually be good for us in the long term cuz I feel like",
    "start": "2531480",
    "end": "2537280"
  },
  {
    "text": "it will make it so people don't right now jump into just using generics they",
    "start": "2537280",
    "end": "2542359"
  },
  {
    "text": "like oh well this is so much faster than interfaces so I'm going to use this thing instead of what's been there before so I feel like maybe that in the",
    "start": "2542359",
    "end": "2548920"
  },
  {
    "text": "long term will help us escape the kind of just using this thing because it's faster just using this thing CU it's",
    "start": "2548920",
    "end": "2554920"
  },
  {
    "text": "shiny and will like keep us solidly rooted in using the interfaces where interfaces are appropriate and then oh",
    "start": "2554920",
    "end": "2561240"
  },
  {
    "text": "well I really do have this use case for generic so I will use it in this in this place even though I know I'm playing a",
    "start": "2561240",
    "end": "2567040"
  },
  {
    "text": "performance penalty now even if it might not be true in the future like I assume we're going to get better with generics and then they might be faster than",
    "start": "2567040",
    "end": "2573680"
  },
  {
    "text": "interfaces in the future or maybe we'll also make inter fa is faster in some way yeah that that was precisely yeah what I",
    "start": "2573680",
    "end": "2580319"
  },
  {
    "text": "was trying to get out before actually like I do think that there the pressure",
    "start": "2580319",
    "end": "2585559"
  },
  {
    "text": "if it's much faster to use generics where it might not be appropriate you know and that's I think that's the worry",
    "start": "2585559",
    "end": "2591319"
  },
  {
    "text": "about everyone has or Prett you know many people had about generics just polluting code because you know oh",
    "start": "2591319",
    "end": "2598400"
  },
  {
    "text": "generics are faster therefore everything must use generics you know you change i.",
    "start": "2598400",
    "end": "2603440"
  },
  {
    "text": "copy so instead of taking a reader and write a value yeah you make it parameterized on the types which could",
    "start": "2603440",
    "end": "2609880"
  },
  {
    "text": "be faster right and probably would be faster so you know why why wouldn't you do that but that means you have to",
    "start": "2609880",
    "end": "2615400"
  },
  {
    "text": "you've got it's actually more complex to use I'm I'm hoping that the years of people using far too many go routines",
    "start": "2615400",
    "end": "2621680"
  },
  {
    "text": "and far too many channels has like taught us as a community to like not overdo the nice things we do kind of",
    "start": "2621680",
    "end": "2627520"
  },
  {
    "text": "ruin them yeah we do we do hear that a lot we do say it a lot and we talk about that a lot and I do think that's",
    "start": "2627520",
    "end": "2634559"
  },
  {
    "text": "important so yeah that's great well before we move on to unpopular opinions are there any other things coming in go",
    "start": "2634559",
    "end": "2640680"
  },
  {
    "text": "one21 that we're excited about it gets released next month in August",
    "start": "2640680",
    "end": "2646440"
  },
  {
    "text": "2023 Min and max they're cool that clear function's a bit weird isn't it like",
    "start": "2646440",
    "end": "2651920"
  },
  {
    "text": "yeah I was going to bring that up I think the clear I'm happy the clear function it's like I know it only saves like a little bit of code but having to",
    "start": "2651920",
    "end": "2658880"
  },
  {
    "text": "rate those Loops over a map to clear everything out was always kind of annoying like I just want this to be empty now yeah it's weird how it does it",
    "start": "2658880",
    "end": "2665400"
  },
  {
    "text": "with slices yeah it does it does something that you sometimes want to do with a slice it fills it full of the zero value but it's so different to what",
    "start": "2665400",
    "end": "2673079"
  },
  {
    "text": "it does with maps so if you have a slice that has 100 elements in it and you call clear on it then you still have a slice",
    "start": "2673079",
    "end": "2679400"
  },
  {
    "text": "with 100 elements in it but they're all zero which I I think is a very very Niche case what like what most people",
    "start": "2679400",
    "end": "2685040"
  },
  {
    "text": "would expect is they they have a zero length slice when they finish so I don't I don't really know I didn't read",
    "start": "2685040",
    "end": "2691240"
  },
  {
    "text": "through all the thinking that arrived at that I guess it's equivalent to me zero in C right right so yeah it's very",
    "start": "2691240",
    "end": "2697680"
  },
  {
    "text": "efficient because you can use essentially an underlying machine instruction probably one to to just zero",
    "start": "2697680",
    "end": "2703480"
  },
  {
    "text": "it out just like in in one thing really efficiently and that might not be easy if you're using a loop I feel like if",
    "start": "2703480",
    "end": "2709920"
  },
  {
    "text": "you had a slice of pointers as well and you just want to be like I'd like all of these things to be garbage collected but I still want to use this slice again",
    "start": "2709920",
    "end": "2717559"
  },
  {
    "text": "could be useful for that just clearing them all out yeah it's it's very occasionally useful it's just that that",
    "start": "2717559",
    "end": "2722960"
  },
  {
    "text": "the same name does something so different with maps and slices I guess it's the same with most of those right",
    "start": "2722960",
    "end": "2729319"
  },
  {
    "text": "like make and and new and all of that they I guess new doesn't but make definitely does like different things",
    "start": "2729319",
    "end": "2734720"
  },
  {
    "text": "with maps and slices sort of sort of yeah one thing that I I'm looking forward to in go 121 is some",
    "start": "2734720",
    "end": "2741800"
  },
  {
    "text": "improvements to generic type inference actually in that so there's one",
    "start": "2741800",
    "end": "2747079"
  },
  {
    "text": "particular you know in go you know standard idiom is to like return",
    "start": "2747079",
    "end": "2752480"
  },
  {
    "text": "concrete types but use interfaces right so you know you have you're returning concrete type but you're actually going",
    "start": "2752480",
    "end": "2759280"
  },
  {
    "text": "to be uh maybe using you're you're accepting an interface but this didn't work for generic interfaces so you could",
    "start": "2759280",
    "end": "2765599"
  },
  {
    "text": "have like an implementation a concrete implementation and you pass it to this generic interface and you say uhuh you",
    "start": "2765599",
    "end": "2772079"
  },
  {
    "text": "can't do that you have to explicitly mention your this type parameter even though you can clearly see that one implements the other and now you don't",
    "start": "2772079",
    "end": "2778599"
  },
  {
    "text": "anymore so that's that's pretty cool actually yeah that's an interesting point though about you can clearly see",
    "start": "2778599",
    "end": "2785000"
  },
  {
    "text": "because there's more type inference that can happen where you actually would lose",
    "start": "2785000",
    "end": "2790319"
  },
  {
    "text": "when you're reading it you would kind of lose information and that's probably a line that you wouldn't want to cross",
    "start": "2790319",
    "end": "2795520"
  },
  {
    "text": "it's a tricky line to choose and they said they were conservative initially now they're a little bit less conservative I think I think that's",
    "start": "2795520",
    "end": "2802000"
  },
  {
    "text": "that's really and also you can if you got a generic function you don't necess you can it will infer the type of that",
    "start": "2802000",
    "end": "2807400"
  },
  {
    "text": "generic function from where you're assigning it to so if you've got a function a Le a generic less function",
    "start": "2807400",
    "end": "2813400"
  },
  {
    "text": "that automatically knows how to compare to comparable types for example and you pass that to something that expects",
    "start": "2813400",
    "end": "2820480"
  },
  {
    "text": "another generic function then you don't have to mention you don't have to instantiate it it's it'll infer from",
    "start": "2820480",
    "end": "2826839"
  },
  {
    "text": "where you're assigning it to the type parameter for the function which is uh also quite cool actually particularly in",
    "start": "2826839",
    "end": "2833280"
  },
  {
    "text": "the context of things like slices. sort Funk and that sort of thing so we've",
    "start": "2833280",
    "end": "2838559"
  },
  {
    "text": "talked about the slices package quite a lot there's there's also a Maps package that sort of matches it has two or three",
    "start": "2838559",
    "end": "2844160"
  },
  {
    "text": "functions like uh keys gets you all the keys out of a map values gets you all the values out of a",
    "start": "2844160",
    "end": "2849640"
  },
  {
    "text": "map those are things you could do before you just write the loop but those are a little generic functions now that are",
    "start": "2849640",
    "end": "2855880"
  },
  {
    "text": "going into the standard library and go 1.21 I want sorted keys well you can do slice slices do sort of maps. keys",
    "start": "2855880",
    "end": "2865800"
  },
  {
    "text": "doesn't quite work because it doesn't return the slice I it's the it's probably the",
    "start": "2865800",
    "end": "2871960"
  },
  {
    "text": "generic function I've copied and pasted the most because it's quite often you want to you know like as a test result",
    "start": "2871960",
    "end": "2877599"
  },
  {
    "text": "or you're printing something in a deterministic way I just want all the all the keys sorted please like oh damn",
    "start": "2877599",
    "end": "2883800"
  },
  {
    "text": "so you just copy and paste sorted keys and usually they're strings right but not always I am pretty happy about the",
    "start": "2883800",
    "end": "2890000"
  },
  {
    "text": "equal function because that's another thing that was kind of annoying to do with the loop right yeah well you you",
    "start": "2890000",
    "end": "2895200"
  },
  {
    "text": "did have to sort them then uh given two maps you you had to get all the keys out and then sort them and then check if",
    "start": "2895200",
    "end": "2901880"
  },
  {
    "text": "things were equal yeah I mean that the sorted keys if if someone's you know perhaps they haven't contributed to go",
    "start": "2901880",
    "end": "2908960"
  },
  {
    "text": "maybe they could start a proposal the there may really be a proposal that Roger's written but if not you could",
    "start": "2908960",
    "end": "2914000"
  },
  {
    "text": "write one get involved and see what that process is like it's quite a nice opportunity there's also a clear as well",
    "start": "2914000",
    "end": "2919760"
  },
  {
    "text": "for like a in that Maps package there's a clear function what's the difference between those two maybe it was there",
    "start": "2919760",
    "end": "2926119"
  },
  {
    "text": "before the clear builtin looking at the the pack the docs package it doesn't",
    "start": "2926119",
    "end": "2931839"
  },
  {
    "text": "look like or the docs for the package doesn't look that there's a clear funk in here oh it doesn't well there was there was in the experimental one and it",
    "start": "2931839",
    "end": "2938520"
  },
  {
    "text": "It suffers I mean it the whole reason why map the clear built-in for maps was justified was was that you can't uh",
    "start": "2938520",
    "end": "2945240"
  },
  {
    "text": "again float Nan not a number of values break the obvious implementation of of",
    "start": "2945240",
    "end": "2952319"
  },
  {
    "text": "clearing things from a map because a nan is never equal to anything not even",
    "start": "2952319",
    "end": "2958160"
  },
  {
    "text": "itself yeah it must be right no it's not it's not equal to itself yeah so if you try and delete the Nan value from a map",
    "start": "2958160",
    "end": "2965599"
  },
  {
    "text": "it's like NOP you can't delete that cuz it doesn't exist in the map yeah wow who's putting their nans in the",
    "start": "2965599",
    "end": "2972000"
  },
  {
    "text": "map who put n in the LA in in in floats right well speaking of that it's time",
    "start": "2972000",
    "end": "2978760"
  },
  {
    "text": "for our unpopular [Music]",
    "start": "2978760",
    "end": "2984609"
  },
  {
    "text": "opinions opion you I actually think you should probably [Music]",
    "start": "2985000",
    "end": "2991559"
  },
  {
    "text": "leave un opinion",
    "start": "2991559",
    "end": "2997520"
  },
  {
    "text": "okay I'll go first somebody told me that jingle is too long apparently this has been said a few times like people are",
    "start": "3001160",
    "end": "3008040"
  },
  {
    "text": "like no that's way too long that little jingle it's nothing the singing is great",
    "start": "3008040",
    "end": "3013160"
  },
  {
    "text": "thanks Brian that's really sweet you've accidentally been nice to me actually it was uh very well put together by the",
    "start": "3013160",
    "end": "3020599"
  },
  {
    "text": "mysterious break master cylinder who um edited that and made it sound good 5",
    "start": "3020599",
    "end": "3025760"
  },
  {
    "text": "Seconds long a little jingle is that too long feel like it's the exact amount yeah what's going on I like it I like",
    "start": "3025760",
    "end": "3033000"
  },
  {
    "text": "that you should probably leave but yeah yeah thank you yeah I actually think you should probably leave you've you've gone",
    "start": "3033000",
    "end": "3038880"
  },
  {
    "text": "it's gone too far just wait uh does anyone else have an unpopular opinion I have an unpopular",
    "start": "3038880",
    "end": "3046079"
  },
  {
    "text": "opinion it's definitely non- techy I yeah my my unpopular opinion is that a shower is no good unless it goes",
    "start": "3046079",
    "end": "3052720"
  },
  {
    "text": "properly cold what do you mean you turn it cold or you just stay in there until all the water's gone yeah I always",
    "start": "3052720",
    "end": "3058799"
  },
  {
    "text": "finish I always finish by alternating on hot and cold and it has to finish on cold and if it doesn't it's deeply",
    "start": "3058799",
    "end": "3064559"
  },
  {
    "text": "disappointing I think I was it was recommended by a physiotherapist once to like you know stop inflamation and",
    "start": "3064559",
    "end": "3070079"
  },
  {
    "text": "things and I started doing it and now I go you know I go to someone's house and it turned it down to cold and it's like",
    "start": "3070079",
    "end": "3076119"
  },
  {
    "text": "still lukewarm and it's like oh no no I just feel bad I feel right I feel",
    "start": "3076119",
    "end": "3081559"
  },
  {
    "text": "unfinished it's just not it's just not right do you gradually make it go cold like sort of the opposite of boiling a",
    "start": "3081559",
    "end": "3088000"
  },
  {
    "text": "frog or do you just blast it straight immediately cold no no absolutely blast cold blast hot blast cold yeah",
    "start": "3088000",
    "end": "3095760"
  },
  {
    "text": "absolutely I heard that's good for your immune system as well like you it's good for all",
    "start": "3095760",
    "end": "3101200"
  },
  {
    "text": "things and lack of it is bad for you know bad for my by start of the day so they go wow I",
    "start": "3101200",
    "end": "3109040"
  },
  {
    "text": "do like the ice pool thing Brian have you ever had a freezing cold shower well yeah when when things are broken",
    "start": "3109040",
    "end": "3116119"
  },
  {
    "text": "yeah when or it's it's a good example of a bad bad user interface right where you",
    "start": "3116119",
    "end": "3122079"
  },
  {
    "text": "you it's a little bit too hot and you turn it sort of a tiny tiny amount and it's freezing cold that's my experience",
    "start": "3122079",
    "end": "3130040"
  },
  {
    "text": "I do it by accident I think I have if I had the choice between a hot shower that couldn't go cold or just a shower that",
    "start": "3130040",
    "end": "3136640"
  },
  {
    "text": "was cold I'd probably go for the cold one I'm tempted to get into cold showers cuz I hear a lot about it and I used to",
    "start": "3136640",
    "end": "3143799"
  },
  {
    "text": "love the plunge pulls you sometimes in places where there's just ice cold water you just throw you just basically throw",
    "start": "3143799",
    "end": "3150160"
  },
  {
    "text": "your body in it and uh I I find that to be really refreshing um people do all",
    "start": "3150160",
    "end": "3155960"
  },
  {
    "text": "sorts of ice swimming and things like that maybe my opinion will become popular with Matt in the future I'm",
    "start": "3155960",
    "end": "3162079"
  },
  {
    "text": "going to give it a go that's for sure Chris what do you reckon I feel like when it's hot outside I I kind of want",
    "start": "3162079",
    "end": "3168839"
  },
  {
    "text": "to do more of a cold show or like if I get back from a run when it's been like 90 something degrees outside I'm like I",
    "start": "3168839",
    "end": "3174880"
  },
  {
    "text": "just really would like to be a lot cooler than I am right now so I feel like that can sometimes be good I know I",
    "start": "3174880",
    "end": "3181319"
  },
  {
    "text": "feel like our alternate sometimes I'm like okay like doing a little bit of cold at the end sounds good but most of",
    "start": "3181319",
    "end": "3186400"
  },
  {
    "text": "the time I'm like I just just want to do a nice hot shower also I keep my apartment very cold so I think sometimes",
    "start": "3186400",
    "end": "3192640"
  },
  {
    "text": "I get that cold by like stepping out of the shower and it's like oh okay now it's just like very cold all at once I",
    "start": "3192640",
    "end": "3198319"
  },
  {
    "text": "find it weird if I've had the cold at the end I actually feel warmer when I come out of the shower if I've had a hot",
    "start": "3198319",
    "end": "3203520"
  },
  {
    "text": "shower I feel colder it's there I think there's something about my body saying oh it's cold I want to you know I want",
    "start": "3203520",
    "end": "3209280"
  },
  {
    "text": "to keep warm and then you turn it off it's like oh warm but you yeah cuz you feel different right you feel the",
    "start": "3209280",
    "end": "3214760"
  },
  {
    "text": "difference your skin temperature is warmer it's colder I guess but you feel warmer yeah because the outside air is",
    "start": "3214760",
    "end": "3220319"
  },
  {
    "text": "warmer that's cool do you any weird other weird stuff in the shower that's such a personal",
    "start": "3220319",
    "end": "3225640"
  },
  {
    "text": "question no I'm not I'm not one I had an idea and this doesn't",
    "start": "3225640",
    "end": "3231599"
  },
  {
    "text": "exist I don't think but this should exist and the idea was little device you could put on your tap and it has a blue",
    "start": "3231599",
    "end": "3238280"
  },
  {
    "text": "and a red LED and then depending on the temperature of the water it changes and sort of like shines down so the water",
    "start": "3238280",
    "end": "3245280"
  },
  {
    "text": "glows it's glowing red if it's hot and cold if it's blue I don't know if in",
    "start": "3245280",
    "end": "3251599"
  },
  {
    "text": "every country that they're the two colors that people use for hot and cold should be I feel like like feels like",
    "start": "3251599",
    "end": "3259200"
  },
  {
    "text": "quite Universal but I wouldn't be surprised what do you think of that idea are you in do you want to invest what's",
    "start": "3259200",
    "end": "3265680"
  },
  {
    "text": "Halfway what's lukewarm it it puts both it's kind of purple yeah per purple it",
    "start": "3265680",
    "end": "3271240"
  },
  {
    "text": "would have to be it's it literally like would just be a very simple I could get Ron Evans to build this probably with",
    "start": "3271240",
    "end": "3276680"
  },
  {
    "text": "tiny go and probably wouldn't even need that tricky uh electricity and water is is I disagree they go they love each",
    "start": "3276680",
    "end": "3283480"
  },
  {
    "text": "other they get very excited they're too friendly I think if anything your product liability people",
    "start": "3283480",
    "end": "3290200"
  },
  {
    "text": "might have something to say about this well that's why I don't hire those people I mean I do I do feel feel like",
    "start": "3290200",
    "end": "3295400"
  },
  {
    "text": "there's sometimes electricity in that cuz you know you have those obnoxious like handsfree faucets that have to have",
    "start": "3295400",
    "end": "3301280"
  },
  {
    "text": "some amount of electricity for the sensor whatever so it's kind of like that it's just adding some LEDs instead",
    "start": "3301280",
    "end": "3307119"
  },
  {
    "text": "of some sensors yeah I've got one of those Taps that does immediate boiling water which turns out eventually good",
    "start": "3307119",
    "end": "3313960"
  },
  {
    "text": "cuz you're not not boiling a full Kettle if you want a cup of tea you can just do it straight from the tap but then I",
    "start": "3313960",
    "end": "3319599"
  },
  {
    "text": "think I want that tap in my bath as well so I can just scold yourself Yeah well",
    "start": "3319599",
    "end": "3327799"
  },
  {
    "text": "yeah yeah product liability so don't want to invest Brian that's what I'm",
    "start": "3327799",
    "end": "3333480"
  },
  {
    "text": "hearing fair enough hopefully it does really well then and you'll be like I was the guy that missed out on the LED",
    "start": "3333480",
    "end": "3340599"
  },
  {
    "text": "Taps well I've I have often thought that that a hedge fund which the investment",
    "start": "3340599",
    "end": "3346160"
  },
  {
    "text": "strategy was just exactly what whatever the opposite is whatever I invested in that would that would be a a great",
    "start": "3346160",
    "end": "3353079"
  },
  {
    "text": "product yeah there's another idea I had when we we redid our kitchen and I wanted to instead of cupboards just have",
    "start": "3353079",
    "end": "3359920"
  },
  {
    "text": "dishwashers just every cupboard was a dishwasher then you just put your dishes away it just cleans them they stay there",
    "start": "3359920",
    "end": "3367520"
  },
  {
    "text": "they already you don't have to pack them away imagine how much time and I pitched it to the guy that was designing the",
    "start": "3367520",
    "end": "3373280"
  },
  {
    "text": "kitchen like I pitched it as a as though I was dead serious and uh he he was sort",
    "start": "3373280",
    "end": "3379079"
  },
  {
    "text": "of thinking of contemplating it and then they just said like it'd be really expensive and wasteful to run you know",
    "start": "3379079",
    "end": "3384640"
  },
  {
    "text": "how you probably don't want to wash your cereal boxes right oh yeah that's true you want other there's other things well",
    "start": "3384640",
    "end": "3390079"
  },
  {
    "text": "you could just not turn it on yeah that's a good point you can uh you can cook salmon",
    "start": "3390079",
    "end": "3397520"
  },
  {
    "text": "that is that what you do just don't put the soap tablet in don't put detergent in yeah well put like a dressing in",
    "start": "3397520",
    "end": "3402880"
  },
  {
    "text": "instead wrap it in foil two layers have you ever done that have you ever done it Brian I've heard this too I'm not going",
    "start": "3402880",
    "end": "3410480"
  },
  {
    "text": "to try it either I if you got a huge salmon it's quite difficult to you know it's not",
    "start": "3410480",
    "end": "3417520"
  },
  {
    "text": "it's not going to fit in your oven right it's I could I could see why people might want to do this you could there",
    "start": "3417520",
    "end": "3423039"
  },
  {
    "text": "take the drawers out I bet you could cook loads of stuff like that what are we doing we're wasting our",
    "start": "3423039",
    "end": "3428840"
  },
  {
    "text": "[Music] time no not having that Chris how do you cook",
    "start": "3428840",
    "end": "3435960"
  },
  {
    "text": "how do you cook salmon Chris I don't I don't actually I don't eat seafood so I don't cook s at all that's what I mean",
    "start": "3435960",
    "end": "3442440"
  },
  {
    "text": "I'm sure you could cook other stuff easy answer yeah also I I don't know if my dishwasher is that much bigger than my",
    "start": "3442440",
    "end": "3448839"
  },
  {
    "text": "oven oh really like have you got a small dishwasher or a big",
    "start": "3448839",
    "end": "3453960"
  },
  {
    "text": "oven they they do tend to be smaller don't they and you you might not necessarily be able to pull all of the",
    "start": "3453960",
    "end": "3460119"
  },
  {
    "text": "rags out of a dishwasher depending on what type of dishwasher it is like it'll mad at you they're very intricate",
    "start": "3460119",
    "end": "3466319"
  },
  {
    "text": "machines very magical yeah they're clever they're good I've got one which at the end of its cycle it opens the",
    "start": "3466319",
    "end": "3472640"
  },
  {
    "text": "door does that too it's weird when you're in the room and you forgot that it's on you",
    "start": "3472640",
    "end": "3478640"
  },
  {
    "text": "hear what's going on over there yeah I love that if anybody wants a good",
    "start": "3478640",
    "end": "3484280"
  },
  {
    "text": "watch there's a guy on YouTube that has not one but two whole videos on",
    "start": "3484280",
    "end": "3490599"
  },
  {
    "text": "dishwashers and how they work and it's not just like a f minute video these are two like hourong videos on how",
    "start": "3490599",
    "end": "3496839"
  },
  {
    "text": "dishwashers work and the channel is called technology connections and it's one of those things where you're like",
    "start": "3496839",
    "end": "3502000"
  },
  {
    "text": "there's no way I'm going to watch this whole thing and yet you watch the whole thing does he cover cooking of salmon",
    "start": "3502000",
    "end": "3507240"
  },
  {
    "text": "and other fish or no but he does scold people for pre-washing their",
    "start": "3507240",
    "end": "3512640"
  },
  {
    "text": "dishes yeah we need that in the we need that in the Show links please yeah let's do that we'll put that in the show notes",
    "start": "3512640",
    "end": "3519000"
  },
  {
    "text": "yeah it's good it's a good you learn to not pre-wash your dishes and not use pods you should just use like the",
    "start": "3519000",
    "end": "3524079"
  },
  {
    "text": "cheapest detergent you can get cuz just soup it's all the same oh this is good",
    "start": "3524079",
    "end": "3529520"
  },
  {
    "text": "the pods are actually worse unless you use multiple of them cuz there's a nice little pre-wash cycle and yeah it's it's",
    "start": "3529520",
    "end": "3534960"
  },
  {
    "text": "a good video just go watch what about rin a and by the way when he scolds people does he use one of those Taps that does the water boiling water",
    "start": "3534960",
    "end": "3541520"
  },
  {
    "text": "quickly no he just looks at you as if he's a disapproving father just kind of",
    "start": "3541520",
    "end": "3547559"
  },
  {
    "text": "like yeah which which might be the same it it might it might burn you in various ways that's how Brian looks at me Brian",
    "start": "3547559",
    "end": "3553799"
  },
  {
    "text": "did you think of an unpopular opinion you mean Beyond cooking salmon and a dishwasher you express no opinion on",
    "start": "3553799",
    "end": "3559359"
  },
  {
    "text": "that though they haven't done it though I um I did I wanted to uh rant",
    "start": "3559359",
    "end": "3567200"
  },
  {
    "text": "about just a little short rant about people who who seem to want to put the entire program in one line of code like",
    "start": "3567200",
    "end": "3575079"
  },
  {
    "text": "they want to like they get they get the data and then they filter it and then they decorate it and then they map it",
    "start": "3575079",
    "end": "3580799"
  },
  {
    "text": "into something else and then they maybe a little bit more in the uh JavaScript",
    "start": "3580799",
    "end": "3586280"
  },
  {
    "text": "world or the python world it's a little bit more pop but I see it try people trying to get that into go just write",
    "start": "3586280",
    "end": "3592559"
  },
  {
    "text": "the write the loop please just write the thing that does the thing don't try and",
    "start": "3592559",
    "end": "3597880"
  },
  {
    "text": "put it inside of it doesn't make it any better if it's in a function in a different file I just have to go read that is this another reason why slices.",
    "start": "3597880",
    "end": "3604559"
  },
  {
    "text": "sort should not return the slice that's sorted oh because that enables you to",
    "start": "3604559",
    "end": "3610319"
  },
  {
    "text": "kind of wrap you know you got I've got this thing returns of slice sort it I can have them all in the same expression",
    "start": "3610319",
    "end": "3616839"
  },
  {
    "text": "deeply nested sort filter blah blah blah blah blah yeah well so I I guess the implication would be that it should",
    "start": "3616839",
    "end": "3623240"
  },
  {
    "text": "return a different slice whereas the the one where it doesn't return the implication is it mutates the one you",
    "start": "3623240",
    "end": "3629680"
  },
  {
    "text": "gave it I'd say don't be scared of vertical white space right people people like want to put it all on one line",
    "start": "3629680",
    "end": "3635640"
  },
  {
    "text": "because you know it looks looks simpler because it's all in one line but actually just have a few different lines",
    "start": "3635640",
    "end": "3642400"
  },
  {
    "text": "you can have a comment yeah you see that that pattern you see happening with I've seen it now in I did a bit of spelt JS",
    "start": "3642400",
    "end": "3649440"
  },
  {
    "text": "which is the JavaScript front end framework thing and the way that they are now the way that they recommend you",
    "start": "3649440",
    "end": "3656280"
  },
  {
    "text": "format your code attribute having attributes inside an HTML tag on",
    "start": "3656280",
    "end": "3661400"
  },
  {
    "text": "different lines and it really when you first see it you think that's really un unexpected you you know it's very common",
    "start": "3661400",
    "end": "3667640"
  },
  {
    "text": "to just have them going horizontally but it's so much more readable so yeah it's",
    "start": "3667640",
    "end": "3673079"
  },
  {
    "text": "like that's what I now do and actually a lot of the formatters do that as well I do that with uh go function parameters",
    "start": "3673079",
    "end": "3679319"
  },
  {
    "text": "actually a lot actually if it's just starting to get a bit long I just put every parameter on its own line Open",
    "start": "3679319",
    "end": "3684839"
  },
  {
    "text": "brackets on its own line each parameter separately Clos brackets right at the end on its own line too and it works",
    "start": "3684839",
    "end": "3692280"
  },
  {
    "text": "quite nicely much more readable uh it's also nice cuz they line up all the the",
    "start": "3692280",
    "end": "3697319"
  },
  {
    "text": "all the variable names are line in a little stack which is great and again yeah yeah it's great all right there not",
    "start": "3697319",
    "end": "3702760"
  },
  {
    "text": "popular opinions this section I feel like with a code Golf",
    "start": "3702760",
    "end": "3707960"
  },
  {
    "text": "Community it will be unpopular you they're trying to minimize on lines and characters and all that so yeah I'm I'm",
    "start": "3707960",
    "end": "3715240"
  },
  {
    "text": "yeah I'm I'm relying on there being a lot of people who like the idea that they can write the whole thing in one",
    "start": "3715240",
    "end": "3721279"
  },
  {
    "text": "line I guess that the the sort of idiom that you're ranting against really is maybe epitomized by the sort of fluid",
    "start": "3721279",
    "end": "3727880"
  },
  {
    "text": "programming style or fluent sorry fluent yeah fluent where where you you know you",
    "start": "3727880",
    "end": "3733160"
  },
  {
    "text": "have one thing Returns the same thing Returns the same thing and you're just kind of operating on that thing flowing",
    "start": "3733160",
    "end": "3739119"
  },
  {
    "text": "through so you don't yeah yeah people do that to create little dsls and things",
    "start": "3739119",
    "end": "3744480"
  },
  {
    "text": "and I understand the appeal of it but it's almost in every case I find it to",
    "start": "3744480",
    "end": "3749760"
  },
  {
    "text": "be I would rather it was just just spelled out in the boring way it's just very easy to it's much easier to debug",
    "start": "3749760",
    "end": "3756720"
  },
  {
    "text": "things like you can put log statements in between and things like this as well rather than it being yeah and I think",
    "start": "3756720",
    "end": "3763279"
  },
  {
    "text": "sometimes sometimes package developers they want to really help the people that are going to consume the package so they",
    "start": "3763279",
    "end": "3769480"
  },
  {
    "text": "do a lot of things like a lot of extra help and a lot of work for them when actually you aren't necessarily helping",
    "start": "3769480",
    "end": "3776359"
  },
  {
    "text": "you might as well just let them you know they they're not idiots let them do do",
    "start": "3776359",
    "end": "3781839"
  },
  {
    "text": "their thing you don't have to solve every problem yeah hard to argue against that when you're when you're in the design phase and they're like oh but",
    "start": "3781839",
    "end": "3788079"
  },
  {
    "text": "this will make it easy for the for the people are like I don't think so but it's yeah it's a tricky conversation to",
    "start": "3788079",
    "end": "3795160"
  },
  {
    "text": "have I think sometimes yeah yeah I think so I have an unpopular opinion oo I feel",
    "start": "3795160",
    "end": "3801480"
  },
  {
    "text": "like it might actually be maybe this time I'll actually get unpopular one humble BR humble humble I do have I",
    "start": "3801480",
    "end": "3807960"
  },
  {
    "text": "think the second most unpopular opinion ever what was that one something I'm like I don't I think it might have been",
    "start": "3807960",
    "end": "3813279"
  },
  {
    "text": "the one where I said uh calling go goang is like uh dead naming somebody all",
    "start": "3813279",
    "end": "3819720"
  },
  {
    "text": "right uh that one was very unpopular people are very mad at me uh about that one I I think that's I that's popular",
    "start": "3819720",
    "end": "3826520"
  },
  {
    "text": "with me I think it's popular with a certain subset of people but I'm with you so",
    "start": "3826520",
    "end": "3832160"
  },
  {
    "text": "yeah my my unpopular opinion it's about anal IES I think that the tech debt",
    "start": "3832160",
    "end": "3837680"
  },
  {
    "text": "analogy we should get rid of it because I don't think the thing that we're talking about we're talking about tech debt is debt I think it's more akin to",
    "start": "3837680",
    "end": "3845480"
  },
  {
    "text": "malpractice and people are being irresponsible because I think most of the time when te gets brought up it's",
    "start": "3845480",
    "end": "3851359"
  },
  {
    "text": "like oh we're just going to skip writing the test or skip writing documentation so that we can get this thing out the",
    "start": "3851359",
    "end": "3856480"
  },
  {
    "text": "door faster or we're just like going to code This and like a really messy way so it gets out the door faster and I'm like that's not that's not debt that's you",
    "start": "3856480",
    "end": "3863119"
  },
  {
    "text": "not doing your job properly like please just just write the comments and the docs and the tests it's like it's it's",
    "start": "3863119",
    "end": "3868319"
  },
  {
    "text": "part of the job like you can't cut out vital things or if you do then you're",
    "start": "3868319",
    "end": "3873359"
  },
  {
    "text": "committing malpractice and like we should we should call it that and that's why I think it's going to be unpopular so it's not Tech de it's malpractice do",
    "start": "3873359",
    "end": "3881119"
  },
  {
    "text": "you ever though make like technical decisions that are pragmatic like there are ways that not I don't mean skipping",
    "start": "3881119",
    "end": "3887920"
  },
  {
    "text": "tests I mean I do tdd so I rarely skip tests and docs I think that's all very",
    "start": "3887920",
    "end": "3893640"
  },
  {
    "text": "important but do you not sometimes think well this thing could be better but we're going to just it's it's good",
    "start": "3893640",
    "end": "3899599"
  },
  {
    "text": "enough for now and we're going to ship it but then may maybe there at some point we know we have to come back and",
    "start": "3899599",
    "end": "3905039"
  },
  {
    "text": "and fix this up I think if you you have a good understanding of the trade-offs and it's not like a like I guess it's",
    "start": "3905039",
    "end": "3911799"
  },
  {
    "text": "about like how much future harm are you going to do in this and how and also like how much is it of a best practice",
    "start": "3911799",
    "end": "3918240"
  },
  {
    "text": "thing like if you're skipping best practices then obviously you shouldn't be doing that so it's not really debt",
    "start": "3918240",
    "end": "3923880"
  },
  {
    "text": "but I think like the a thing that might be akin to technical debt is like choosing to use a library framework",
    "start": "3923880",
    "end": "3930200"
  },
  {
    "text": "instead of building yourself right so it's like oh I've assessed how long it would take us for us to build it I've",
    "start": "3930200",
    "end": "3935760"
  },
  {
    "text": "assessed the risk of taking on this dependency and actually using this framework and all of the knowledge",
    "start": "3935760",
    "end": "3942279"
  },
  {
    "text": "that's needed for both options and we've decided that taking on this framework makes more sense even though it's more",
    "start": "3942279",
    "end": "3947359"
  },
  {
    "text": "risky right like I think that's closer to like especially the Way businesses use debt right businesses aren't just",
    "start": "3947359",
    "end": "3952720"
  },
  {
    "text": "going out being like I'm going to go get a big old loan just for that you know for the hell of it it's like no you're going to you're going to sit down and",
    "start": "3952720",
    "end": "3958319"
  },
  {
    "text": "assess what are you actually going to use the money for how are you going to use it how are you going to repay it all of this stuff so if you're doing all of",
    "start": "3958319",
    "end": "3964559"
  },
  {
    "text": "that math and risk assessment then I think then it what you are doing is likely a debt Focus thing but that's",
    "start": "3964559",
    "end": "3971640"
  },
  {
    "text": "rarely if ever at least in my experience what people are doing they're just kind of not doing the things they should be",
    "start": "3971640",
    "end": "3977799"
  },
  {
    "text": "doing and then being like oh we'll just fix it later and then later literally never comes and then they just throw out",
    "start": "3977799",
    "end": "3983880"
  },
  {
    "text": "the whole thing and they're like okay we're going to do it right this time and they do the same thing again and it's like it's I guess the thing I think it's",
    "start": "3983880",
    "end": "3990359"
  },
  {
    "text": "more akin to is like using single entry accounting for your like multi-million dollar company and then having no notes",
    "start": "3990359",
    "end": "3997760"
  },
  {
    "text": "in your single entry account it's it's like money is going places where is it going we don't know like it's like it's",
    "start": "3997760",
    "end": "4004319"
  },
  {
    "text": "it's that level of thing and it's like how do you clean up a single entry accounting system and turn it into a double accounting system Double Entry",
    "start": "4004319",
    "end": "4010599"
  },
  {
    "text": "accounting system down the road it's like that's going to be awful for you like you should never do that like if",
    "start": "4010599",
    "end": "4016599"
  },
  {
    "text": "you know you're going to build a big enough business where you're going to need double in accounting just start with it and it's the same thing with this like if you're not building",
    "start": "4016599",
    "end": "4022880"
  },
  {
    "text": "something you're going to throw away in 6 months then just write the docs just",
    "start": "4022880",
    "end": "4028599"
  },
  {
    "text": "write the test code think about what you're doing it's going to make you go faster in the long run you're not going",
    "start": "4028599",
    "end": "4033960"
  },
  {
    "text": "to get that much speed if you're like oh I'm going to do this cuz it's going to save me like a few hours here it's like it's going to save you a few hours here",
    "start": "4033960",
    "end": "4040319"
  },
  {
    "text": "it's going to make you spend four weeks trying to unwind it in like 6 months or less how do I feel about that I agree no",
    "start": "4040319",
    "end": "4048480"
  },
  {
    "text": "I I I for me a lot of the tech debt I so the biggest Tech debt things that I've seen in the past have usually it's often",
    "start": "4048480",
    "end": "4055000"
  },
  {
    "text": "been because you've upgrade you've made a new API for example right you've made the new API you can't remove the old API",
    "start": "4055000",
    "end": "4062279"
  },
  {
    "text": "because people are using it so you end up with two versions of the API and at some point in the future you realize",
    "start": "4062279",
    "end": "4067960"
  },
  {
    "text": "that no one is using the old API anymore and but removing it maybe maybe you've written it such a way that it's really",
    "start": "4067960",
    "end": "4074279"
  },
  {
    "text": "hard to remove the old one but you kind of want to because it's holding you back because it's using loads of stuff that",
    "start": "4074279",
    "end": "4080319"
  },
  {
    "text": "you want to be able to get rid of so that's Tech debt to me I you know you're in this situation of being indebted to",
    "start": "4080319",
    "end": "4086960"
  },
  {
    "text": "this thing at the past which you kind of had to take on this debt and you kind of have to pay it",
    "start": "4086960",
    "end": "4092880"
  },
  {
    "text": "sometime you know that that's often the case like not not just skipping tests you know that's an easy like we we yeah",
    "start": "4092880",
    "end": "4100120"
  },
  {
    "text": "we we're taking on this we're we're committing malpractice by by taking on deliberately taking on this debt I",
    "start": "4100120",
    "end": "4105920"
  },
  {
    "text": "suppose but there's loads of other cases I think where you it just arises because",
    "start": "4105920",
    "end": "4111359"
  },
  {
    "text": "for out of yes Matt says pragmatism because you have to do this this way otherwise you won't make progress yeah",
    "start": "4111359",
    "end": "4118400"
  },
  {
    "text": "and I think once again if you've like done a lot of measured analysis of things when you go into it you're like okay this is why we've taken this on I",
    "start": "4118400",
    "end": "4124798"
  },
  {
    "text": "think it it can be described as as a debt but I think a lot of the times when people are doing it they're not they're",
    "start": "4124799",
    "end": "4131159"
  },
  {
    "text": "not winding up in those situations because of I feel like a lot of times at least when I've walked into places it's",
    "start": "4131159",
    "end": "4136238"
  },
  {
    "text": "like we've wound up at those places not because people have like thought things through but because they just rushed to",
    "start": "4136239",
    "end": "4141758"
  },
  {
    "text": "do something so it's like oh well this thing is hard to maintain so we're just going to Green Field it and it's like",
    "start": "4141759",
    "end": "4147640"
  },
  {
    "text": "okay but what's your plan to actually deprecate and dismantle the old thing",
    "start": "4147640",
    "end": "4152758"
  },
  {
    "text": "and it's like well we didn't think about that I'm like well okay well that's not once again we're back in the realm of like just because you have it like you",
    "start": "4152759",
    "end": "4160040"
  },
  {
    "text": "have it now and you don't like that you have it well you have it because you didn't plan to actually get rid of the thing but you knew you had to get rid of",
    "start": "4160040",
    "end": "4166159"
  },
  {
    "text": "the thing that doesn't feel as much like responsible debt usage to me that once again feels like no you should have",
    "start": "4166159",
    "end": "4173080"
  },
  {
    "text": "planned for how you're going to get rid of it if you knew you're were going to get rid of it obviously if like you need to build this new API for some reason",
    "start": "4173080",
    "end": "4179238"
  },
  {
    "text": "and you're like we don't know how we're going to get rid of the old one and we're marking that down as a debt and we know we're going to have to deal with it was no going to be painful different",
    "start": "4179239",
    "end": "4185278"
  },
  {
    "text": "situation right like but we know how to get rid of it it's just going to take two man LS to work and we don't have",
    "start": "4185279",
    "end": "4191159"
  },
  {
    "text": "that time you know that's usually yeah yeah we well we know how to do it we know exactly what what we want to do but",
    "start": "4191159",
    "end": "4197440"
  },
  {
    "text": "we just yeah have to pay that debt Chris I bet your finances are in",
    "start": "4197440",
    "end": "4203159"
  },
  {
    "text": "great shape aren't they yes I yeah I thought so I'm I'm the person",
    "start": "4203159",
    "end": "4209080"
  },
  {
    "text": "that was like you know to my friends I'm like yes you know I like balance my checkbook every month my friends are like what do you mean balance your",
    "start": "4209080",
    "end": "4215600"
  },
  {
    "text": "checkbook I'm like I reconcile my finances like what do you mean what do you what do I mean I I was also the",
    "start": "4215600",
    "end": "4220760"
  },
  {
    "text": "first time I was 21 at the bar just like keeping diligent track of my drinks and how much I had spent so I would know how",
    "start": "4220760",
    "end": "4226520"
  },
  {
    "text": "much money I had spent like oh okay oh wow even while very drunk I would do this I'd be like okay I'm just",
    "start": "4226520",
    "end": "4232520"
  },
  {
    "text": "documenting I'll wake up the next morning be like okay well I I guess that's exactly how much I drink okay and",
    "start": "4232520",
    "end": "4238080"
  },
  {
    "text": "you look at the credit it's like oh yeah yeah so yes I keep very good track of my finances yes you mean you actually count",
    "start": "4238080",
    "end": "4243760"
  },
  {
    "text": "your change I mean I don't spend cash anymore so not not really or I rarely spend cash I don't even look in my bank",
    "start": "4243760",
    "end": "4250880"
  },
  {
    "text": "account I'm the I'm basically the opposite of that that it's all it's all gone M yeah",
    "start": "4250880",
    "end": "4256520"
  },
  {
    "text": "yeah basically um well yeah okay I have another I have an unpopular opinion",
    "start": "4256520",
    "end": "4262679"
  },
  {
    "text": "another one quick quick one I get this we obviously want to be nice and kind to everyone but actually in the right",
    "start": "4262679",
    "end": "4271640"
  },
  {
    "text": "places banter being mean poking fun is the way I've built the my strongest",
    "start": "4271640",
    "end": "4278080"
  },
  {
    "text": "friendships with people so I actually think that it's not as simple as just always become kind and nice to everyone",
    "start": "4278080",
    "end": "4285199"
  },
  {
    "text": "I think it's an intellectual exercise sometimes to especially if if you do it",
    "start": "4285199",
    "end": "4291159"
  },
  {
    "text": "in a way that's funny um and somewhat uplifting it can be so I I just don't",
    "start": "4291159",
    "end": "4296679"
  },
  {
    "text": "think my own public opinion is don't always be nice to everyone because you miss",
    "start": "4296679",
    "end": "4302719"
  },
  {
    "text": "out be mean to your friends is that what you're say I mean no basically am kind",
    "start": "4303040",
    "end": "4309280"
  },
  {
    "text": "of I would hate I hate the idea of upsetting anyone like if it it and I do do that because that's a risky take like",
    "start": "4309280",
    "end": "4316320"
  },
  {
    "text": "sometimes one time this is quite embarrassing but I'll tell this quick story I was introduced to this guy and",
    "start": "4316320",
    "end": "4323000"
  },
  {
    "text": "he he he had a very cool like the way he was dressed was very cool but it was like deliberately almost like dystopian",
    "start": "4323000",
    "end": "4330000"
  },
  {
    "text": "like he looked dystopian in his whole vibe which I really appreciated I thought he looked great so he had like",
    "start": "4330000",
    "end": "4336080"
  },
  {
    "text": "low really sort of Tatty clothes and and like scruffy hair and stuff it looked great and then someone introduced him",
    "start": "4336080",
    "end": "4342520"
  },
  {
    "text": "and said oh this is is this is John and I just said uh didn't I give you a pound earlier like outside I was just like",
    "start": "4342520",
    "end": "4350239"
  },
  {
    "text": "obviously and and I and I don't think he liked it so it's that that that's one of those things where I'm drifting off to",
    "start": "4350239",
    "end": "4356600"
  },
  {
    "text": "sleep and I'm like suddenly woken again where I've said this horrible thing to",
    "start": "4356600",
    "end": "4362360"
  },
  {
    "text": "somebody take a risk sometimes it doesn't pay off but but in to the right",
    "start": "4362360",
    "end": "4367840"
  },
  {
    "text": "person like if someone said something like that to me I'd be thrilled and I get I do get it I because of like at the",
    "start": "4367840",
    "end": "4374679"
  },
  {
    "text": "conferences I was at goer con EU recently and people someone said to me last year someone said oh cuz I talk",
    "start": "4374679",
    "end": "4381480"
  },
  {
    "text": "about my hairline a lot they said your hair doesn't look that bad from a distance from a distance it's like you",
    "start": "4381480",
    "end": "4388320"
  },
  {
    "text": "you're quite good-looking in Lowes it would be gorgeous if I was a Minecraft character and then this year",
    "start": "4388320",
    "end": "4395560"
  },
  {
    "text": "this year someone said uh cuz they're joking they feel like they know me and it's a complete stranger but they just",
    "start": "4395560",
    "end": "4400920"
  },
  {
    "text": "said is that a wig why would choose",
    "start": "4400920",
    "end": "4406040"
  },
  {
    "text": "this imagine going to a a wig shop and saying oh yeah how much is that one very",
    "start": "4406719",
    "end": "4413679"
  },
  {
    "text": "AF very affordable I thought it would be because it's tiny they clearly think your hair looks thought your hair looks",
    "start": "4413679",
    "end": "4419639"
  },
  {
    "text": "good I cannot think why yeah yeah exactly it doesn't look it's not great it's not great but so yeah banter and",
    "start": "4419639",
    "end": "4427320"
  },
  {
    "text": "what do you think the thing you said about the low res reminds me of that uh cute from far but far from cute line",
    "start": "4427320",
    "end": "4434480"
  },
  {
    "text": "right which is always like fun but I I don't think I I don't know how much I disagree with you cuz I think in some",
    "start": "4434480",
    "end": "4440400"
  },
  {
    "text": "spaces there is this like very large sense I think especially with in t companies now there's very large sense",
    "start": "4440400",
    "end": "4445880"
  },
  {
    "text": "of like yes be nice to everybody be kind be civil all of that and then I think of",
    "start": "4445880",
    "end": "4451760"
  },
  {
    "text": "like the like black or queer spaces that I'm in and like people are not like that's not how things work there right",
    "start": "4451760",
    "end": "4457679"
  },
  {
    "text": "you know it's like we're we're mean to each other all of the time um this isn't like all people in this community but a",
    "start": "4457679",
    "end": "4464280"
  },
  {
    "text": "lot of people you know that's where the whole like throwing shade comes from reading people all the that it's just like this yeah you know you kind of you",
    "start": "4464280",
    "end": "4470840"
  },
  {
    "text": "know read people for Filth sometimes you're just like yeah this is my friend but like what you did I just got to I got to rip you apart for that and I",
    "start": "4470840",
    "end": "4477480"
  },
  {
    "text": "think there's also this like slight level for me where I like I don't particularly like when environments try",
    "start": "4477480",
    "end": "4483080"
  },
  {
    "text": "to be like be kind to everybody be nice to everybody we're welcoming to everybody because that's like a little",
    "start": "4483080",
    "end": "4488520"
  },
  {
    "text": "bit of a dog whistle for me that it's like I'm probably not in a safe space like this is",
    "start": "4488520",
    "end": "4493800"
  },
  {
    "text": "like I I guess to be blunt it's like this is some white people nonsense when I when that happens I'm just like that",
    "start": "4493800",
    "end": "4499560"
  },
  {
    "text": "we have to recognize that sometimes people are going to not be nice and what are you going to do that you're just going to tell them to be nice like that's not that's not how this works",
    "start": "4499560",
    "end": "4506560"
  },
  {
    "text": "like who determines what is nice is it you that determines what's nice cuz what might be nice for you might not be nice",
    "start": "4506560",
    "end": "4512080"
  },
  {
    "text": "for me so I think it's there's a lot of complexity in there but I think overall Matt I agree with you slightly yeah I",
    "start": "4512080",
    "end": "4518320"
  },
  {
    "text": "mean those roasts when they do like the comedy roasts of people you know I'd love to be doing like maybe we could",
    "start": "4518320",
    "end": "4524040"
  },
  {
    "text": "have that as a regular segment like today's the roast of Brian boram just like go through to the whole",
    "start": "4524040",
    "end": "4530320"
  },
  {
    "text": "episode yeah it' be it' be a new series that one but I I I was listening back to",
    "start": "4530320",
    "end": "4536760"
  },
  {
    "text": "one of the episodes I think it was a go for say's episode where you were hosting Matt and like all of us were just",
    "start": "4536760",
    "end": "4542360"
  },
  {
    "text": "roasting you for like the entire episode and that was that was fun yeah exactly yeah it's fun but I think you miss like",
    "start": "4542360",
    "end": "4550080"
  },
  {
    "text": "if you have this very sterile environment and I understand why this",
    "start": "4550080",
    "end": "4555159"
  },
  {
    "text": "happens in in tech companies of course we want to make sure that people aren't like you don't want to upset people but",
    "start": "4555159",
    "end": "4561760"
  },
  {
    "text": "you miss there's a missed opportunity there to to build some stronger it's a little bit like a cut will where you get",
    "start": "4561760",
    "end": "4569159"
  },
  {
    "text": "Scar Tissue on a cut and it's stronger that scar tissue is stronger than the tissue was before so these little Cuts",
    "start": "4569159",
    "end": "4576080"
  },
  {
    "text": "these little jibes that seem seems I think it's I think we need it the more the more you explain this the more I'm",
    "start": "4576080",
    "end": "4582320"
  },
  {
    "text": "like I maybe I think I think are through cuz I think too like part of the part of the issue I have with the like just be nice to everybody is it's like is that",
    "start": "4582320",
    "end": "4589520"
  },
  {
    "text": "really the biggest problem you think we need to solve right now it's just like people are saying mean things and I'm",
    "start": "4589520",
    "end": "4594880"
  },
  {
    "text": "like that's not the biggest problem that I've certainly had in a lot of these Tex spaces I'm just like hey I just I would",
    "start": "4594880",
    "end": "4601280"
  },
  {
    "text": "just really like it if people weren't doing racist things all the time can we like self and it's not them saying things it's like other things so I think",
    "start": "4601280",
    "end": "4608360"
  },
  {
    "text": "sometimes we focus a little bit too much on the like oh just just say kind things to each other please right yeah some",
    "start": "4608360",
    "end": "4614800"
  },
  {
    "text": "almost worse by just now at least we've solved this problem because we're all saying these right things it it reminds",
    "start": "4614800",
    "end": "4621520"
  },
  {
    "text": "me a bit of like a few years ago when there was a really big push to like get",
    "start": "4621520",
    "end": "4626639"
  },
  {
    "text": "rid of certain words that we use in Tech like wh list and Blacklist and master and all of this and people are like well",
    "start": "4626639",
    "end": "4633600"
  },
  {
    "text": "it's really painful for like people of color to have to see these words and all the this and I'm like people a color",
    "start": "4633600",
    "end": "4639520"
  },
  {
    "text": "like black people were just like what do you mean like I see being the word slave is not having like throwing me into an",
    "start": "4639520",
    "end": "4645719"
  },
  {
    "text": "existential existential crisis or anything it's a thing that happened but also like this usage of Master is not",
    "start": "4645719",
    "end": "4652080"
  },
  {
    "text": "different white list and Black List have different edit like words can mean multiple things so it's like this feels",
    "start": "4652080",
    "end": "4658199"
  },
  {
    "text": "really weird as a thing for us to be focusing on right now especially when it's like there are much bigger problems",
    "start": "4658199",
    "end": "4663800"
  },
  {
    "text": "that we should probably be looking at and there was like a non insignificant amount of effort that went into like",
    "start": "4663800",
    "end": "4669880"
  },
  {
    "text": "let's get let's go through all the code bases and remove Master let's go through all the code bases remove Blacklist and",
    "start": "4669880",
    "end": "4675760"
  },
  {
    "text": "white list and all of this and I feel like after that people were kind of like kind of like after the election of brck",
    "start": "4675760",
    "end": "4680960"
  },
  {
    "text": "Obama like oh no more racism like we got we got rid of all the stuff but it was like that that's not the stuff that's",
    "start": "4680960",
    "end": "4686480"
  },
  {
    "text": "not the that's not the thing I think it's kind of the same with this like oh everybody's being nice and Cil and kind to each other right now so there's",
    "start": "4686480",
    "end": "4692560"
  },
  {
    "text": "there's clearly no problems with with other stuff that's not that's not how that works tokenism right yeah on a",
    "start": "4692560",
    "end": "4699880"
  },
  {
    "text": "level yeah but Roger you're you're quite nice guy are you you ever mean to people",
    "start": "4699880",
    "end": "4707480"
  },
  {
    "text": "never only my friends exactly your best like yeah your closest friends we definitely have some good banter yeah",
    "start": "4707480",
    "end": "4714120"
  },
  {
    "text": "yeah but it's you mentioned this Chris like sometime I mean I think it's really",
    "start": "4714120",
    "end": "4719239"
  },
  {
    "text": "valuable a joke that's a job can be a really kind of good way of actually",
    "start": "4719239",
    "end": "4725560"
  },
  {
    "text": "people like getting some feedback like of actually like you know that's how we",
    "start": "4725560",
    "end": "4730679"
  },
  {
    "text": "do it like if if someone they're like being bigheaded or something you the way",
    "start": "4730679",
    "end": "4735920"
  },
  {
    "text": "that the punishment the social kind of reaction to that is uh is often a joke",
    "start": "4735920",
    "end": "4741760"
  },
  {
    "text": "or you poke fun at it or something like that and it's a kind of a nicest way or a very nice way some ways to deliver",
    "start": "4741760",
    "end": "4749080"
  },
  {
    "text": "that bit of feedback and and it's kind of light-hearted and it's nonserious and many true word is Spen said and jest",
    "start": "4749080",
    "end": "4756080"
  },
  {
    "text": "right yeah yeah so so you mean you're just yeah it might might sound like",
    "start": "4756080",
    "end": "4761159"
  },
  {
    "text": "banter but actually actually being mean well I think it's sometimes a good it's",
    "start": "4761159",
    "end": "4767520"
  },
  {
    "text": "a good signal it's a it's a sign and it gets you thinking but it's a safe way to do it like humor is often it's a safe a",
    "start": "4767520",
    "end": "4775280"
  },
  {
    "text": "safer way Brian you called a lot of people idiots today on this podcast so I",
    "start": "4775280",
    "end": "4781120"
  },
  {
    "text": "assume you're I assume you're on board with this by individually by name yeah",
    "start": "4781120",
    "end": "4786320"
  },
  {
    "text": "yeah we'll putut it out we'll cut out all the names that brutal I",
    "start": "4786320",
    "end": "4791840"
  },
  {
    "text": "uh I'm just thinking sitting here thinking that there are a lot of cultural differences and that really in",
    "start": "4791840",
    "end": "4798480"
  },
  {
    "text": "in a bigger company tends to be a thing that you need to watch out for and and",
    "start": "4798480",
    "end": "4804400"
  },
  {
    "text": "and in a broadcast medium you have to to go to the lowest common denominator that",
    "start": "4804400",
    "end": "4809520"
  },
  {
    "text": "that that's makes it harder right they but I do I do love you know the the sort of well for me and I'm going to insult",
    "start": "4809520",
    "end": "4816480"
  },
  {
    "text": "more people so so like the sort of American thing of Everything Is Awesome right the uh all of the time fantastic",
    "start": "4816480",
    "end": "4823320"
  },
  {
    "text": "right if it's not fantastic then you you you must hate it right you know hey I fixed that bug fantastic right and um",
    "start": "4823320",
    "end": "4831719"
  },
  {
    "text": "and the the British thing is more yeah it's all right could do better yeah it's fair fair yeah and I I really love many",
    "start": "4831719",
    "end": "4839600"
  },
  {
    "text": "of our Eastern European colleagues who just say this Cod is they just absolutely straight out",
    "start": "4839600",
    "end": "4846920"
  },
  {
    "text": "with um for the same code to be clear in each case yeah I feel Eastern Europeans",
    "start": "4846920",
    "end": "4853239"
  },
  {
    "text": "the highest compliment they can give is like good it's it's good and like okay that's once every five years it's a this",
    "start": "4853239",
    "end": "4862920"
  },
  {
    "text": "is but the other thing of going around the conferences and stuff I've noticed is that because in a way we are we all",
    "start": "4862920",
    "end": "4870400"
  },
  {
    "text": "selected around this language so we're all kind of in software a lot of like building things like so I think there's",
    "start": "4870400",
    "end": "4877440"
  },
  {
    "text": "a certain level of I don't know what it is there's a certain level of intelligence you can kind of assume with",
    "start": "4877440",
    "end": "4883960"
  },
  {
    "text": "technical people or it's whatever the go Community does that attracts people to",
    "start": "4883960",
    "end": "4889320"
  },
  {
    "text": "it I don't know but I find that wherever I go there is just some some jokes just",
    "start": "4889320",
    "end": "4896320"
  },
  {
    "text": "work everywhere and that that was a big surprise to me because I was very conscious of different kind of cultures",
    "start": "4896320",
    "end": "4902760"
  },
  {
    "text": "and different approaches to things but um I do find that you can kind of have",
    "start": "4902760",
    "end": "4909080"
  },
  {
    "text": "we just have a lot of fun with people anytime I've interacted with groups in",
    "start": "4909080",
    "end": "4914280"
  },
  {
    "text": "the go Community and Tech communities is tends to be like really high level of kind of really good quality sort of",
    "start": "4914280",
    "end": "4921080"
  },
  {
    "text": "interacting only sometimes well like like I said like the people make fun of my hair because I make fun of it on",
    "start": "4921080",
    "end": "4927360"
  },
  {
    "text": "stage and stuff but it's it's it's fun it's like it's nice so what kind of jokes do go down well universally I'm",
    "start": "4927360",
    "end": "4934800"
  },
  {
    "text": "interested given I'm giving a talk at some point like in Italy yeah well I",
    "start": "4934800",
    "end": "4940600"
  },
  {
    "text": "find because a lot of in the conference audiences a lot of them listen to go time so that's different because they",
    "start": "4940600",
    "end": "4948040"
  },
  {
    "text": "sort of expect it now one of the big things I noticed is you have to let",
    "start": "4948040",
    "end": "4953199"
  },
  {
    "text": "people know that it's a joke you can't just say something that's hilarious we might think it's hilarious",
    "start": "4953199",
    "end": "4960040"
  },
  {
    "text": "arguably hilarious yeah that's but if they don't know it's a joke they're probably not going to just sit and laugh",
    "start": "4960040",
    "end": "4965600"
  },
  {
    "text": "at you cuz that they might consider that to be quite rude so conference like standard office humor work s at",
    "start": "4965600",
    "end": "4972920"
  },
  {
    "text": "conferences I don't do it but things like oh forgive this code I wrote it on a Monday you know that will that will",
    "start": "4972920",
    "end": "4979520"
  },
  {
    "text": "get a laugh or if you say oh I probably did this before I'd had any coffee like",
    "start": "4979520",
    "end": "4984760"
  },
  {
    "text": "these sort of things work cuz they're safe they're a bit like we have these Christmas",
    "start": "4984760",
    "end": "4990199"
  },
  {
    "text": "crackers in the UK and they always come with a little joke that is just terrible",
    "start": "4990199",
    "end": "4995320"
  },
  {
    "text": "like they're terrible jokes and it's almost like you're United in the ey",
    "start": "4995320",
    "end": "5000639"
  },
  {
    "text": "rolling against these jokes you know but it's safe they know it's a joke I told I said once at a conference",
    "start": "5000639",
    "end": "5008280"
  },
  {
    "text": "that my dad had said oh he said something I can't remember what it was and I just said get out dad right that",
    "start": "5008280",
    "end": "5014800"
  },
  {
    "text": "was my thing which to me that was really funny and it was just silent everyone just thought I was telling my dad to get",
    "start": "5014800",
    "end": "5019880"
  },
  {
    "text": "out so it's like sometimes doesn't work yeah I feel I feel like the broader thing is like it's just you got to have",
    "start": "5019880",
    "end": "5026880"
  },
  {
    "text": "a lot of nuance with this right I think sometimes in these types of spaces or in communities I guess in the World in",
    "start": "5026880",
    "end": "5032760"
  },
  {
    "text": "general it's like people want to have like one easy way that's like universally true objectively like",
    "start": "5032760",
    "end": "5038080"
  },
  {
    "text": "everybody should be nice to each other or like everybody should be you know once again like everybody should be nice or kind or these other like very",
    "start": "5038080",
    "end": "5044440"
  },
  {
    "text": "positive words and it's like well I mean that's not possible like there's going to be some people who are like going to",
    "start": "5044440",
    "end": "5050760"
  },
  {
    "text": "be like not nice or that kind but it's also just like infeasible since like what is nice from one person's",
    "start": "5050760",
    "end": "5056000"
  },
  {
    "text": "perspective is not nice from another person's perspective like you know there's the whole thing about like with southern people where if they say like",
    "start": "5056000",
    "end": "5062560"
  },
  {
    "text": "bless your heart it's like is that are you saying that in a nice way or are you saying that in like the quote nice way",
    "start": "5062560",
    "end": "5069040"
  },
  {
    "text": "right so it's like the very same words said in the very same way could mean two completely different things so I think",
    "start": "5069040",
    "end": "5075520"
  },
  {
    "text": "it's more like we got to be like how how let's navigate these situations better and just like have ways of like you know",
    "start": "5075520",
    "end": "5082560"
  },
  {
    "text": "if there is harm that's done repairing that harm and F focus on that and making sure that's like okay that's a that's a",
    "start": "5082560",
    "end": "5087880"
  },
  {
    "text": "line we've crossed let's make sure we don't cross that line again but I think when people start getting into the dogmatic like universality of like don't",
    "start": "5087880",
    "end": "5094480"
  },
  {
    "text": "tell jokes about things or don't do this or don't do that it's kind of like yeah I don't know like that's that's a little",
    "start": "5094480",
    "end": "5100159"
  },
  {
    "text": "too much on the and the Pendulum has swung a buil to much to the other side yeah and and so we have to we should",
    "start": "5100159",
    "end": "5105960"
  },
  {
    "text": "forgive people as well if they do cross those lines cuz usually especially if it's a joke like usually it depends but",
    "start": "5105960",
    "end": "5112639"
  },
  {
    "text": "if it's coming from a good place and it's too far or whatever I do think we need to be a bit more forgiving rather",
    "start": "5112639",
    "end": "5119080"
  },
  {
    "text": "than I sometimes get DMS and it just it'll just say no it just say like a dog",
    "start": "5119080",
    "end": "5124760"
  },
  {
    "text": "like you might say to a dog yeah so I get that and I'm just like oh come on I",
    "start": "5124760",
    "end": "5130800"
  },
  {
    "text": "I don't like the concept of like throwing away humans or like being like you did something bad you're gone",
    "start": "5130800",
    "end": "5136719"
  },
  {
    "text": "forever like I just that's always irked me a bit even with things where I'm just like I don't like you as a person at all",
    "start": "5136719",
    "end": "5144400"
  },
  {
    "text": "but like still like we yeah you still do a podcast with me I'm not saying you specifically you in the general this",
    "start": "5144400",
    "end": "5149920"
  },
  {
    "text": "time yeah yeah I mean I find ways to poke fun at you right I made a whole whole little Tik Tok about you that",
    "start": "5149920",
    "end": "5157159"
  },
  {
    "text": "maybe one day we'll get posted cuz I think it's hilarious tomorrow the show notes I'll still Tik",
    "start": "5157159",
    "end": "5164199"
  },
  {
    "text": "Tok for that oh a plug we do actually have a Tik",
    "start": "5164199",
    "end": "5169880"
  },
  {
    "text": "Tok I found out I'm on the Tik Tok I didn't know I thought I was just like never had anything posted about me on Tik Tok that's a lie there's lots of",
    "start": "5169880",
    "end": "5176000"
  },
  {
    "text": "videos on the that Tik Tok SP oh wow I didn't know that either go check out Chang log.com it's like",
    "start": "5176000",
    "end": "5182719"
  },
  {
    "text": "and Tik Tok ni whole Tik Tok page oh wow nice okay well on that bombshell it's",
    "start": "5182719",
    "end": "5190040"
  },
  {
    "text": "time for us to wrap this up we've gone way over but this was great I hope they keep they'll keep this in thank you so",
    "start": "5190040",
    "end": "5196719"
  },
  {
    "text": "much for joining us to talk about generics Roger Pepe always a pleasure hopefully you'll come back again soon",
    "start": "5196719",
    "end": "5203520"
  },
  {
    "text": "Brian boram again we should maybe do some more performance specific episodes it would be really great to talk to you",
    "start": "5203520",
    "end": "5210679"
  },
  {
    "text": "pick your brains on that a little bit more so as well and of course Chris Brando thank you very much see you next",
    "start": "5210679",
    "end": "5216199"
  },
  {
    "text": "time on go",
    "start": "5216199",
    "end": "5219600"
  },
  {
    "text": "time all right that is go time for this week thanks for hanging with us if you a",
    "start": "5222119",
    "end": "5228440"
  },
  {
    "text": "first time listener subscribe now at go time. FM there you'll also find our",
    "start": "5228440",
    "end": "5233840"
  },
  {
    "text": "recommended episodes listener favorites and a request form so you can let us know what you want to hear about on the",
    "start": "5233840",
    "end": "5240440"
  },
  {
    "text": "Pod check it out once again that's go time. FM and if you're a longtime listener help us help more people on",
    "start": "5240440",
    "end": "5246880"
  },
  {
    "text": "their gopher path by sharing go time with your friends and colleagues word of mouth is the number one way people find",
    "start": "5246880",
    "end": "5252960"
  },
  {
    "text": "us thanks once again to our partners fastly.com fly.io and types sense.org and thank you",
    "start": "5252960",
    "end": "5260119"
  },
  {
    "text": "also to breakmaster cylinder for keeping our beat supply all topped up that's all for now but we'll talk to you again next",
    "start": "5260119",
    "end": "5266760"
  },
  {
    "text": "time on go time",
    "start": "5266760",
    "end": "5274119"
  },
  {
    "text": "[Music]",
    "start": "5276000",
    "end": "5281539"
  },
  {
    "text": "k",
    "start": "5293000",
    "end": "5296000"
  }
]