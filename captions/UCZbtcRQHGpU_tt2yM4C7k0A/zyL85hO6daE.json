[
  {
    "text": "there are some bugs for example there's one that I would say affects most code bases out there which is the standard",
    "start": "40",
    "end": "7160"
  },
  {
    "text": "you know you have it an HTP end point and the body is Json so you want to decode it so what you do is you take the",
    "start": "7160",
    "end": "13559"
  },
  {
    "text": "rbody and you do json. new decoder decode with the body and then into some",
    "start": "13559",
    "end": "19279"
  },
  {
    "text": "structure and if you do that it's buggy if you just do that I've just got to go what do you mean it's boogy tell me",
    "start": "19279",
    "end": "26560"
  },
  {
    "text": "why please being with her log is provided by fastly learn more at fastly.com we move",
    "start": "26560",
    "end": "34879"
  },
  {
    "text": "fast and fix things here at change log because of rollbar check them out at roar.com and we're hosted on linode",
    "start": "34879",
    "end": "40800"
  },
  {
    "text": "cloud servers head to lin.com",
    "start": "40800",
    "end": "44878"
  },
  {
    "text": "changelog Leno makes cloud computing simple affordable and accessible whether you're working on a personal project or",
    "start": "45920",
    "end": "52000"
  },
  {
    "text": "managing your Enterprises infrastructure lenoe has the pricing support and skill you need to take your ideas to the next",
    "start": "52000",
    "end": "58039"
  },
  {
    "text": "level We Trust Leno because they keep it fast and they keep it simple check them out at lin.com",
    "start": "58039",
    "end": "65120"
  },
  {
    "text": "changelog let's do it it's go time welcome to go time your source for",
    "start": "73759",
    "end": "80280"
  },
  {
    "text": "diverse discussions from around the go Community this episode is like a two for the price of one you get a fascinating",
    "start": "80280",
    "end": "87680"
  },
  {
    "text": "conversation about Go's encoding Json package plus a murder mystery as a sneaky little bug was determined to kill",
    "start": "87680",
    "end": "94600"
  },
  {
    "text": "Daniel's laptop don't miss the postow because Daniel put on his sleuthing hat and cracked the case just in the nick of",
    "start": "94600",
    "end": "100560"
  },
  {
    "text": "time okay here we [Music]",
    "start": "100560",
    "end": "106700"
  },
  {
    "text": "go hello and welcome to go time I'm Matt Rya today we're talking about Jon you'd",
    "start": "108439",
    "end": "115560"
  },
  {
    "text": "be forgiven for thinking this is going to be the most boring episode but I guarantee T you it will not be uh",
    "start": "115560",
    "end": "122439"
  },
  {
    "text": "joining me today Johnny Boro Hello Johnny hello Matt have you had a good",
    "start": "122439",
    "end": "127600"
  },
  {
    "text": "week so far yes but we're about to talk about Json so I don't know we'll see",
    "start": "127600",
    "end": "132920"
  },
  {
    "text": "let's see uh well don't worry though uh we do have a great guest today a very",
    "start": "132920",
    "end": "138120"
  },
  {
    "text": "prolific contributor to go you've probably seen his name around uh Daniel Marty hello Daniel hi happy to be here",
    "start": "138120",
    "end": "145879"
  },
  {
    "text": "welcome to the show great to have you have you had a good week so far yeah we almost got to 20 degrees in the UK so",
    "start": "145879",
    "end": "152200"
  },
  {
    "text": "that was nice but summer was over a few weeks ago it only lasted for a weekend yes we do have some more heat coming",
    "start": "152200",
    "end": "158760"
  },
  {
    "text": "later this week so stay tuned for that I don't know why I sound like a news",
    "start": "158760",
    "end": "163840"
  },
  {
    "text": "anchor I'm just trying to be a normal human but I find that difficult sometimes okay so let's start then just",
    "start": "163840",
    "end": "170480"
  },
  {
    "text": "quickly for beginners in case there's somebody that's really brand new what is",
    "start": "170480",
    "end": "176000"
  },
  {
    "text": "Json do you say it like that do you say Json or do you pronounce it some other way so I I just say Json and I think if",
    "start": "176000",
    "end": "184400"
  },
  {
    "text": "I had to explain this to a little kid I would say it's kind of like a way to",
    "start": "184400",
    "end": "189440"
  },
  {
    "text": "represent data and I have already that's already gone out the window that plan to explain this to a little kid now kids",
    "start": "189440",
    "end": "195400"
  },
  {
    "text": "get that yeah let's assume it's a really smart kid yeah so it's it's like a very",
    "start": "195400",
    "end": "201400"
  },
  {
    "text": "generic way to represent data so it doesn't matter who the other reader is who's on the other side they most likely",
    "start": "201400",
    "end": "208439"
  },
  {
    "text": "will be able to read that data yeah and it's JavaScript object notation so it comes out of uh JavaScript uh but",
    "start": "208439",
    "end": "216120"
  },
  {
    "text": "it turns out to be really kind of useful across lot any every language really has now some kind of Json support H it's",
    "start": "216120",
    "end": "223920"
  },
  {
    "text": "it's practically everywhere practically every language out there that's modern today has to have Json support because",
    "start": "223920",
    "end": "229360"
  },
  {
    "text": "you just do and your computer you might not see it but it definitely is running Json at some level yeah and so there's",
    "start": "229360",
    "end": "236319"
  },
  {
    "text": "like it's an object and it has fields and those fields have some types and it's the types that we're used to as",
    "start": "236319",
    "end": "242640"
  },
  {
    "text": "well in go like strings and numbers and booleans any others other objects arrays",
    "start": "242640",
    "end": "249319"
  },
  {
    "text": "those kinds of things I think that's that might be the whole list and why did it get such popular use on the web I",
    "start": "249319",
    "end": "255879"
  },
  {
    "text": "mean it kind of is Kind of Perfect Isn't it for web Technologies I I would say it",
    "start": "255879",
    "end": "261320"
  },
  {
    "text": "came from the from all the success that browsers had you know the modern web had and you know suddenly HTTP HTML CSS and",
    "start": "261320",
    "end": "269280"
  },
  {
    "text": "Javas script and Json all these Technologies kind of took everybody by surprise initially everybody thought",
    "start": "269280",
    "end": "274840"
  },
  {
    "text": "they were just toys but now suddenly people are building real companies on top of them and Json is just you know",
    "start": "274840",
    "end": "282240"
  },
  {
    "text": "has too much momentum I don't think anything is ever going to replac it at this point honestly that's really interesting well",
    "start": "282240",
    "end": "290039"
  },
  {
    "text": "hang on I'd like to add something here I like what you said um Daniel there's",
    "start": "290039",
    "end": "295919"
  },
  {
    "text": "another reason I think my personal reasons as well why I think Jason some sort of took off because uh primarily",
    "start": "295919",
    "end": "302479"
  },
  {
    "text": "for me it was because it was not XML which is prior to that prior to Json",
    "start": "302479",
    "end": "309800"
  },
  {
    "text": "taking over um if you wanted sort of an interchangeable format with other systems and things like that you know",
    "start": "309800",
    "end": "315600"
  },
  {
    "text": "sort of Json or rather XML was the sort of the default go-to right and then we",
    "start": "315600",
    "end": "321960"
  },
  {
    "text": "created a whole like ecosystem around XML like parsing xslt and and templates",
    "start": "321960",
    "end": "328199"
  },
  {
    "text": "Styles sheets and all kinds of really um looking back kind of brilliant",
    "start": "328199",
    "end": "333319"
  },
  {
    "text": "technology for the times but just really really hard to sort of work with you really had to depend on sort of a",
    "start": "333319",
    "end": "339280"
  },
  {
    "text": "machine generated XML cuz sitting down and sort of a editing XML by hand",
    "start": "339280",
    "end": "344600"
  },
  {
    "text": "especially like huge large like documents like dealing with that I mean that was maddening so here comes Json",
    "start": "344600",
    "end": "351400"
  },
  {
    "text": "making it very simple very human readable right and it was like a breath of fresh air so absolutely to",
    "start": "351400",
    "end": "358199"
  },
  {
    "text": "corroborate sort of the idea that basically it sort of became very very popular with with with the rise of HTML",
    "start": "358199",
    "end": "364759"
  },
  {
    "text": "JavaScript CSS like building applications right on the web um they from a systems and and data interchange",
    "start": "364759",
    "end": "370880"
  },
  {
    "text": "standpoint it was revolutionary just as much yeah and it's simpler also than XML",
    "start": "370880",
    "end": "376280"
  },
  {
    "text": "too because in XML you can do weird things with the structure like you can just have siblings next to each other",
    "start": "376280",
    "end": "383280"
  },
  {
    "text": "that gets very complicated to work with you can't do that with Json can you you",
    "start": "383280",
    "end": "388680"
  },
  {
    "text": "know there is a tighter structure to it and I think that kind of helps as well what about any gotchas with working with",
    "start": "388680",
    "end": "395680"
  },
  {
    "text": "Json is there anything that beginners ought to watch out for one thing that occurred to me is uh in go if you have a",
    "start": "395680",
    "end": "404880"
  },
  {
    "text": "time.time type so you're gon to represent a time as Json it turns that into a string doesn't it yeah I I'm",
    "start": "404880",
    "end": "412039"
  },
  {
    "text": "actually not sure exactly what happens because I usually just write custom code to handle times in",
    "start": "412039",
    "end": "417599"
  },
  {
    "text": "Json most of the time people will want times or rather timestamps in a very",
    "start": "417599",
    "end": "423000"
  },
  {
    "text": "specific format so they will write the code to handle that so I actually don't remember what the default behavior is",
    "start": "423000",
    "end": "430280"
  },
  {
    "text": "but yes Json doesn't have a time stamp type so it it will just end up as a string yeah is fine as long as the thing",
    "start": "430280",
    "end": "437919"
  },
  {
    "text": "that's interpreting it also understands that format and can then work with it but that's quite an interesting point is",
    "start": "437919",
    "end": "444280"
  },
  {
    "text": "that there are some rudimentary types in Json and sometimes you have to do a bit",
    "start": "444280",
    "end": "450080"
  },
  {
    "text": "of magic to turn your particular data into something that's going to work in that text based kind of format and",
    "start": "450080",
    "end": "456199"
  },
  {
    "text": "another thing that's quite weird is that by default I think the numbers are all",
    "start": "456199",
    "end": "461280"
  },
  {
    "text": "float 64 type if you're working with generic data you can use the map string",
    "start": "461280",
    "end": "467280"
  },
  {
    "text": "interface type in go to un Marshall Json into and it will work you know it will",
    "start": "467280",
    "end": "472840"
  },
  {
    "text": "fill that map up as like like it's the object but of course if there's their numbers in there it's not sure whether",
    "start": "472840",
    "end": "479400"
  },
  {
    "text": "it's a a floating Point number or an integer or whatever and so it just uses the the most kind of useful type or the",
    "start": "479400",
    "end": "486080"
  },
  {
    "text": "most versatile type the float 64 I found that to be quite strange when I first",
    "start": "486080",
    "end": "491159"
  },
  {
    "text": "started working with Jason and go and I actually think numbers are are a really interesting point because I think Jason",
    "start": "491159",
    "end": "499080"
  },
  {
    "text": "could have gone one of two ways one of them would have been you know we've got integers on one side and you've got floats on the other and then you define",
    "start": "499080",
    "end": "505440"
  },
  {
    "text": "what the sizes and bits of those are so for example if this was go we could have said in 64 and Float",
    "start": "505440",
    "end": "510840"
  },
  {
    "text": "64 uh and that has some advantages it's stricter so if you want to use one or the other you're it's guaranteed that",
    "start": "510840",
    "end": "517959"
  },
  {
    "text": "it's going to stay that way and you're not going to lose any Precision or anything like that but on the other hand if you just say it's going to be a",
    "start": "517959",
    "end": "523560"
  },
  {
    "text": "number then that opens the door to for example supporting um arbitrary",
    "start": "523560",
    "end": "528920"
  },
  {
    "text": "Precision numbers uh aka Big Numbers which go also supports with a different",
    "start": "528920",
    "end": "535080"
  },
  {
    "text": "package so the encoding Json package which by the way Daniel you actually co-",
    "start": "535080",
    "end": "541000"
  },
  {
    "text": "maintain the encoding Json package in the standard library right yeah that's right and I should mention before we go",
    "start": "541000",
    "end": "547000"
  },
  {
    "text": "on I've noticed something weird in my laptop which is that my memory usage has has been rising steadily for the past 15",
    "start": "547000",
    "end": "554040"
  },
  {
    "text": "minutes I don't know if that debug in Zoom or in my recording program but I think my laptop is going to crash in",
    "start": "554040",
    "end": "560240"
  },
  {
    "text": "about 10 minutes so if that happens just FYI oh it's it's exciting though it's like",
    "start": "560240",
    "end": "567160"
  },
  {
    "text": "there's a a bomb that's going to go off and uh you know we're just sort of waiting it started at 30% I'm currently",
    "start": "567160",
    "end": "573200"
  },
  {
    "text": "at 92% so yeah about five minutes left maybe I don't know what's going on okay",
    "start": "573200",
    "end": "578880"
  },
  {
    "text": "well if you just disappear we'll assume it's that um and just hope it doesn't happen after like Johnny says something",
    "start": "578880",
    "end": "585480"
  },
  {
    "text": "and then you just cut off because he's definitely going to take that personally apologies you asked about co-",
    "start": "585480",
    "end": "590839"
  },
  {
    "text": "maintaining and coding Json and yes that is correct I've been helping for I guess",
    "start": "590839",
    "end": "596079"
  },
  {
    "text": "about three or four years now and Jason does have active maintainers I believe they are Ross Joe and Brad so I I",
    "start": "596079",
    "end": "605279"
  },
  {
    "text": "started helping mainly with just little bugs and little optimizations but over time these are all busy people uh so",
    "start": "605279",
    "end": "611600"
  },
  {
    "text": "it's gotten to a point that I do almost as much work as they as they do and on",
    "start": "611600",
    "end": "617000"
  },
  {
    "text": "one hand it's very rewarding work because it's a very useful package used by tons of people but on the other hand",
    "start": "617000",
    "end": "623800"
  },
  {
    "text": "it's kind of stressful is it why well on one hand because I'm nearly at 100 uh",
    "start": "623800",
    "end": "629600"
  },
  {
    "text": "memories run out there you go yeah L quite literally yeah",
    "start": "629600",
    "end": "634700"
  },
  {
    "text": "[Music] Linux a how much time does your team",
    "start": "634700",
    "end": "641240"
  },
  {
    "text": "spend building and maintaining internal tooling I'm talking about those behind the scenes apps the ones no one else",
    "start": "641240",
    "end": "647200"
  },
  {
    "text": "sees the S3 uploader you built last year for the marketing team that quick Firebase admin panel that let you",
    "start": "647200",
    "end": "652880"
  },
  {
    "text": "monitor key kpis maybe even the tool your data science team haded together so they can provide custom ad spend",
    "start": "652880",
    "end": "659160"
  },
  {
    "text": "analytics now these are tools you need so you build them and that makes sense but the question is could you have built",
    "start": "659160",
    "end": "666240"
  },
  {
    "text": "them in less time with less effort and less overhead and maintenance required and the answer to that question is yes",
    "start": "666240",
    "end": "673360"
  },
  {
    "text": "that's where retail comes in Rohan Chopra engineering director at door Dash has this to say about retool quote the",
    "start": "673360",
    "end": "679399"
  },
  {
    "text": "tools we've been able to quickly build with retool have allowed us to empower and scale our local operators all while",
    "start": "679399",
    "end": "685519"
  },
  {
    "text": "reducing the dependency on engineering end quote now the internal tooling process at door Dash was bogged down",
    "start": "685519",
    "end": "691240"
  },
  {
    "text": "with manual data entry missed handoffs and long turnaround times and after integrating retool door Dash was able to",
    "start": "691240",
    "end": "697360"
  },
  {
    "text": "cut the engineering time required to build tools by a factor of 10x and eliminate the a prone manual processes",
    "start": "697360",
    "end": "703399"
  },
  {
    "text": "that play their workflows they were able to empower backend Engineers who wouldn't otherwise be able to build front ends from scratch and these",
    "start": "703399",
    "end": "709399"
  },
  {
    "text": "Engineers were able to build fully functional apps in retool in hours not days or weeks your next step is to try",
    "start": "709399",
    "end": "715760"
  },
  {
    "text": "it free at ret.com changelog again ret tool.com",
    "start": "715760",
    "end": "720940"
  },
  {
    "text": "[Music]",
    "start": "720940",
    "end": "732269"
  },
  {
    "text": "[Music]",
    "start": "734520",
    "end": "738480"
  },
  {
    "text": "changelog Daniel what are the challenge why is it stressful maintaining the encoding Jason packet so I think it's",
    "start": "741519",
    "end": "748040"
  },
  {
    "text": "very rewarding because the moment you fix any bug uh suddenly there's tons of people that are happy about it and clear",
    "start": "748040",
    "end": "753560"
  },
  {
    "text": "clearly there are tons of people that care deeply about how fast the Json package goes but on the flip side",
    "start": "753560",
    "end": "760600"
  },
  {
    "text": "because it has so many users if you mess anything up you're in big trouble because you know people are going to be",
    "start": "760600",
    "end": "766040"
  },
  {
    "text": "very angry and you know there's also something called the go one compatibility guarantee and that",
    "start": "766040",
    "end": "772240"
  },
  {
    "text": "essentially says if your program works with go 1.0 it should also work with Go 1.2 and go 1.3 and so on one interesting",
    "start": "772240",
    "end": "780880"
  },
  {
    "text": "does that include mistakes in if there was like a bug or something in that original Json version does does that",
    "start": "780880",
    "end": "787959"
  },
  {
    "text": "still have to be supported that is a very good question so I think there's multiple ways to interpret that because",
    "start": "787959",
    "end": "794279"
  },
  {
    "text": "I think the most aggressive way to interpret it would be you know only the things that are documented to work will",
    "start": "794279",
    "end": "800399"
  },
  {
    "text": "remain to work that way so if you write some code that just happens to depend on some implementation detail that is",
    "start": "800399",
    "end": "807959"
  },
  {
    "text": "allowed to break at some point in the future and that is generally how I read it but the more conservative way to read",
    "start": "807959",
    "end": "813959"
  },
  {
    "text": "it and understand it is no like pretty much anything you do if it's reasonable",
    "start": "813959",
    "end": "819440"
  },
  {
    "text": "even if it's not documented it should keep working because we don't want to break the users and in between those two",
    "start": "819440",
    "end": "825079"
  },
  {
    "text": "ends there's some middle ground that the team has to choose W it's a fine line to",
    "start": "825079",
    "end": "831279"
  },
  {
    "text": "walk isn't it but it's so important that V1 promise because that's really how we're able to rely on the fact that we",
    "start": "831279",
    "end": "837959"
  },
  {
    "text": "can we can build build systems and we know that they're going to keep working with future versions of go that turns out to be one of the big selling points",
    "start": "837959",
    "end": "845120"
  },
  {
    "text": "for me of go itself so I really do appreciate the effort because I know that isn't an easy thing to do I would",
    "start": "845120",
    "end": "851759"
  },
  {
    "text": "have thought that the the Json package after it was first written it's kind of done it's sort of working so what",
    "start": "851759",
    "end": "859600"
  },
  {
    "text": "maintenance is there to do on it that is also a good question and I think it kind of goes back to how flexible Json is",
    "start": "859600",
    "end": "867240"
  },
  {
    "text": "because Json doesn't have a it's just data in some structure you can do lots",
    "start": "867240",
    "end": "873000"
  },
  {
    "text": "of things with it and people do do lots of weird things with it so then they come to the encoding Json package in the",
    "start": "873000",
    "end": "879880"
  },
  {
    "text": "in the standard library and they expect all those things to fit their workflow with this library right so they might",
    "start": "879880",
    "end": "886800"
  },
  {
    "text": "want oh decode some Fields depending on what this field is or they might say I",
    "start": "886800",
    "end": "892279"
  },
  {
    "text": "want to stream a really really big object even if it doesn't fit in memory and all those sort of um use case that",
    "start": "892279",
    "end": "899000"
  },
  {
    "text": "you might not think to use Json with initially but people do use Json with so",
    "start": "899000",
    "end": "904199"
  },
  {
    "text": "there's a constant stream of feature requests but there's also a constant stream of optimizations and buck fixes",
    "start": "904199",
    "end": "910959"
  },
  {
    "text": "caused by previous changes if that makes sense yeah I see so just sort of I suppose like any other bit of software",
    "start": "910959",
    "end": "917839"
  },
  {
    "text": "it's you know you you you can improve it you can work on it and as you do that you create some other problems you know",
    "start": "917839",
    "end": "924639"
  },
  {
    "text": "but it's well tested isn't it the tests are decent in the encoding Json package",
    "start": "924639",
    "end": "930160"
  },
  {
    "text": "yeah for the most part I would agree yeah yeah and which which is important that's sort of what allows you to act",
    "start": "930160",
    "end": "936319"
  },
  {
    "text": "with confidence you know you talk about you don't want to break the backwards compatibility promise unit tests are",
    "start": "936319",
    "end": "942639"
  },
  {
    "text": "really the way to ensure that aren't they actually checking that your package is well tested is is kind of an art I",
    "start": "942639",
    "end": "948639"
  },
  {
    "text": "would say because you can obviously look at the code coverage from the gotool but that doesn't cover everything because",
    "start": "948639",
    "end": "956040"
  },
  {
    "text": "you might be covering a line but you might not be covering all the the logic that's encoded within that line of code",
    "start": "956040",
    "end": "961600"
  },
  {
    "text": "right or you might not be hitting one of the edge cases that might Panic or something like that yeah see I always",
    "start": "961600",
    "end": "966680"
  },
  {
    "text": "tell people not to shoot for like 100% code coverage in their application code",
    "start": "966680",
    "end": "972759"
  },
  {
    "text": "just because the the you kind of can tightly couple really your tests to your",
    "start": "972759",
    "end": "978240"
  },
  {
    "text": "implementation is this an exception to that does it make sense in this package to have 100% code coverage H I would say",
    "start": "978240",
    "end": "986000"
  },
  {
    "text": "for the most part it does make sense to try to go as high as possible because for the most part the package is just if",
    "start": "986000",
    "end": "992639"
  },
  {
    "text": "else's with logic but there are also some places with like panics of things",
    "start": "992639",
    "end": "997800"
  },
  {
    "text": "that should never happen or also things like I'm trying to think of another Edge case well there there are certain edge",
    "start": "997800",
    "end": "1004199"
  },
  {
    "text": "cases that you would you say this really should never happen it's going to panic so you could write tests that catch",
    "start": "1004199",
    "end": "1009880"
  },
  {
    "text": "those and recover and I guess you could say even that you shoot but I don't think they do at the moment interesting",
    "start": "1009880",
    "end": "1015759"
  },
  {
    "text": "yeah yeah because there's some weirdness around it's quite unusual actually as a",
    "start": "1015759",
    "end": "1020800"
  },
  {
    "text": "as an API because you pass in a pointer when you want to unmarshal it you pass in a pointer to the destination",
    "start": "1020800",
    "end": "1027600"
  },
  {
    "text": "essentially where you want that Json to be on Marshall into and there's some kind of interesting tricky rules around",
    "start": "1027600",
    "end": "1035839"
  },
  {
    "text": "what you can pass into that thing aren't there yep so you can you can essentially pass a pointer to any valid data so it",
    "start": "1035839",
    "end": "1044280"
  },
  {
    "text": "can't be a pointer pointing to nil to zero because then you know can't actually store any data there so",
    "start": "1044280",
    "end": "1051679"
  },
  {
    "text": "essentially it just expects the pointer to a structure that it can actually store decode the the incoming Json into",
    "start": "1051679",
    "end": "1059400"
  },
  {
    "text": "and there are various rules around there for example if you pass it an empty interface it's going to sort of make a",
    "start": "1059400",
    "end": "1065600"
  },
  {
    "text": "guess as to what it should do so if it sees a number it's going to assume float 64 and if it sees an object it's going",
    "start": "1065600",
    "end": "1071640"
  },
  {
    "text": "to use a map but if you give it a for example a struct with very specific field types then it is going to follow",
    "start": "1071640",
    "end": "1077679"
  },
  {
    "text": "your lead and if any of the types don't match it's just going to error there's some intelligence that's sort of built",
    "start": "1077679",
    "end": "1082760"
  },
  {
    "text": "into the package as well which I usually appreciate very recently I was sort of doing a PR review and we had a developer",
    "start": "1082760",
    "end": "1089440"
  },
  {
    "text": "who was s of creating a struct right and and providing The annotation adjacent annotation next to the fields but the",
    "start": "1089440",
    "end": "1095559"
  },
  {
    "text": "data wasn't really sort of there was no inbound incoming sort of a data right to to Marshall into so in that case I'm",
    "start": "1095559",
    "end": "1102159"
  },
  {
    "text": "like well unless you really anticipate that sort of uh the data that you're pushing out that basically the the field",
    "start": "1102159",
    "end": "1108400"
  },
  {
    "text": "names are going to be different from what they they are named in the struct itself you don't really need to annotate your your your your Fields For Your strs",
    "start": "1108400",
    "end": "1115360"
  },
  {
    "text": "Right the so the Jon package is going to sort of you know follow your lead as you say Daniel he going to basically look at",
    "start": "1115360",
    "end": "1120919"
  },
  {
    "text": "the name you've given your fields and actually use those names in the Json output right so you don't have to add",
    "start": "1120919",
    "end": "1126799"
  },
  {
    "text": "that annotation there so there's there's a lot of smart that that can certainly appreciate um that's built into into",
    "start": "1126799",
    "end": "1132960"
  },
  {
    "text": "into the package and this is something that we're going to get more more into as well I I like to standard Library I",
    "start": "1132960",
    "end": "1139000"
  },
  {
    "text": "like using the standard library because maybe it's the nature of my work but I tend to not sort of look for third party",
    "start": "1139000",
    "end": "1145360"
  },
  {
    "text": "packages right um to do certain things if I can find something in the stand Library even if it's a little harder to",
    "start": "1145360",
    "end": "1152159"
  },
  {
    "text": "deal with or a little less performing or whatever the case may be we're seeing sort of a um if if you've been in that",
    "start": "1152159",
    "end": "1159039"
  },
  {
    "text": "Community for for any length of time you probably come across other third party uh packages Community buil third party",
    "start": "1159039",
    "end": "1165440"
  },
  {
    "text": "packages that have made their own trade-offs right um with regards to implementation for for Json parsing and",
    "start": "1165440",
    "end": "1171799"
  },
  {
    "text": "marshing and non marshing all that stuff and a lot of them seem to be focused around um Speed and Performance right",
    "start": "1171799",
    "end": "1177520"
  },
  {
    "text": "again Dave Chen's own sort of experimentation which is published and and hopefully you know wish he was here",
    "start": "1177520",
    "end": "1183520"
  },
  {
    "text": "to discuss it but there's that sort of a um I'm curious to understand sort of um",
    "start": "1183520",
    "end": "1188559"
  },
  {
    "text": "when is a good reason to deviate from SATA standard libraries approach right",
    "start": "1188559",
    "end": "1194360"
  },
  {
    "text": "um to everybody wants fast right it's fast oh it's faster I should use that",
    "start": "1194360",
    "end": "1199400"
  },
  {
    "text": "right well there are trade-offs there too right you don't you don't pick it just because it's faster right but I'm curious to it's sort of on your take",
    "start": "1199400",
    "end": "1206000"
  },
  {
    "text": "right as to why pick one over the other what sort of trade-offs you're making along those lines I think that topic is",
    "start": "1206000",
    "end": "1212240"
  },
  {
    "text": "at the heart of of this whole discussion because it is true that a lot of people want the fastest Json decoder out there",
    "start": "1212240",
    "end": "1218480"
  },
  {
    "text": "and some of them might not realize the tradeoffs are play and I have mixed opinions and feelings about all the",
    "start": "1218480",
    "end": "1225000"
  },
  {
    "text": "third party Json re implementations out there I think some of them do make sense for example one use case is you do",
    "start": "1225000",
    "end": "1232120"
  },
  {
    "text": "absolutely want the most performance you can get because maybe this is a bottleneck for you and you don't mind uh",
    "start": "1232120",
    "end": "1239440"
  },
  {
    "text": "go generating some code uh to then you know write generate automatically a",
    "start": "1239440",
    "end": "1245240"
  },
  {
    "text": "decoder for you for Json so you can use packages like easy Json for that which is pretty popular and the tradeoff there",
    "start": "1245240",
    "end": "1251039"
  },
  {
    "text": "is you have to run go generate and your binary is going to weigh quite a little bit more because it has quite a lot of extra code but that extra code it just",
    "start": "1251039",
    "end": "1257880"
  },
  {
    "text": "think en codes all the logic directly in binary code in machine code so there's no reflect there's no references there's",
    "start": "1257880",
    "end": "1265000"
  },
  {
    "text": "no extra work involved so I think that's clearly one of the cases where it might make sense for you use case I like how",
    "start": "1265000",
    "end": "1271720"
  },
  {
    "text": "you framed that as well you're saying maybe it's a bottleneck in your case and that's the thing it's like once you've",
    "start": "1271720",
    "end": "1277480"
  },
  {
    "text": "seen that this is a place where an improvement is going to make a difference for you then it's worth",
    "start": "1277480",
    "end": "1282960"
  },
  {
    "text": "taking on the extra pain whether it's complexity or learning a new API or whatever it is I like that approach",
    "start": "1282960",
    "end": "1289480"
  },
  {
    "text": "because well I think it's what we should always be doing you know as you alluded to Johnny we kind of can get a bit",
    "start": "1289480",
    "end": "1296120"
  },
  {
    "text": "obsessed with why wouldn't we want the fastest possible thing and the answer is it might be good enough just using the",
    "start": "1296120",
    "end": "1302440"
  },
  {
    "text": "standard Library what are some of the packages and how are they different so another package that I saw fairly",
    "start": "1302440",
    "end": "1308919"
  },
  {
    "text": "recently which is interesting I forget what it's called it was named after a company but essentially what they did",
    "start": "1308919",
    "end": "1314120"
  },
  {
    "text": "was they tried to keep the same API as the standard Library so they said this is a drop in replacement but under the",
    "start": "1314120",
    "end": "1321480"
  },
  {
    "text": "hood they did something which was interesting which is instead of using the reflect package and reflect is one",
    "start": "1321480",
    "end": "1327440"
  },
  {
    "text": "of the major contributors to why encoding Json is slow they used unsafe directly and the trade-off there is if",
    "start": "1327440",
    "end": "1334720"
  },
  {
    "text": "you is unsafe you can do a lot of magic uh and it's very fast but it's also",
    "start": "1334720",
    "end": "1339799"
  },
  {
    "text": "unsafe so I kind of have mixed feelings about telling people that it's a drop in replacement because that sort of just",
    "start": "1339799",
    "end": "1345840"
  },
  {
    "text": "tells them oh I just changed the import and suddenly it's twice as fast but they're not realizing what a big",
    "start": "1345840",
    "end": "1351360"
  },
  {
    "text": "security hold they just they've just opened because it is true that reflect itself does use uh unsafe underneath but",
    "start": "1351360",
    "end": "1358960"
  },
  {
    "text": "reflect is very well scrutinized and reviewed and it follows the go rules for",
    "start": "1358960",
    "end": "1364440"
  },
  {
    "text": "you know what What fields you can set and so on and if you use un save directly you just skip all of that and",
    "start": "1364440",
    "end": "1369720"
  },
  {
    "text": "you're on your own and the standard libr uses reflect because in a sense there's",
    "start": "1369720",
    "end": "1375039"
  },
  {
    "text": "some kind of it's Dynamic isn't it in a way it's dynamic data you don't necessarily know uh especially if you're",
    "start": "1375039",
    "end": "1381640"
  },
  {
    "text": "unmarshalling into a map string interface you don't know the necessarily the structure of that Json and that by",
    "start": "1381640",
    "end": "1388720"
  },
  {
    "text": "the way is can be an extremely powerful thing but it can also be quite easy to",
    "start": "1388720",
    "end": "1394960"
  },
  {
    "text": "abuse yeah that is an interesting point you make about the using unsafe in that way I can I can see why they did that",
    "start": "1394960",
    "end": "1401640"
  },
  {
    "text": "but yeah that's funny one use case that I've used Json for before in quite a",
    "start": "1401640",
    "end": "1406960"
  },
  {
    "text": "strange or maybe not way was just a command line tools which returned they",
    "start": "1406960",
    "end": "1413480"
  },
  {
    "text": "took in through standard input lines of Json and then their output were lines of",
    "start": "1413480",
    "end": "1418799"
  },
  {
    "text": "Json and just that we had a series of different tools that we could change",
    "start": "1418799",
    "end": "1424039"
  },
  {
    "text": "together in different ways just kind of passing around you know different objects just different Json objects each",
    "start": "1424039",
    "end": "1430520"
  },
  {
    "text": "one on its own line and the Json uh when you create the marshala uh you create",
    "start": "1430520",
    "end": "1436760"
  },
  {
    "text": "the decoder or the the encoder those types take a reader an IO reader don't",
    "start": "1436760",
    "end": "1442440"
  },
  {
    "text": "they so that they can unmarshal an object they break at the at the Line Feed and then you can reuse it and keep",
    "start": "1442440",
    "end": "1450120"
  },
  {
    "text": "unmarshaling objects in that way so that as a design was perfect for this situation because these tools basically",
    "start": "1450120",
    "end": "1457080"
  },
  {
    "text": "didn't do anything until a line of Json came in through standard in they'd then process it and then you get the line",
    "start": "1457080",
    "end": "1462880"
  },
  {
    "text": "printed out but there's also the directly using the Marshall and unmarshal functions too what's the key",
    "start": "1462880",
    "end": "1469600"
  },
  {
    "text": "difference between those so I think most people would say that the difference is the streaming so if you use Marshall or",
    "start": "1469600",
    "end": "1476279"
  },
  {
    "text": "on Marshall you can look at the function types and you can see that they take and give a slice of bite so it's pretty easy",
    "start": "1476279",
    "end": "1483440"
  },
  {
    "text": "to tell that you know if you're marshalling a chunk of Json you have to have that chunk of Json in memory and if",
    "start": "1483440",
    "end": "1489000"
  },
  {
    "text": "you look at at the decoder it takes a reader you might then suspect that oh this is going to stream the Json in so I",
    "start": "1489000",
    "end": "1496200"
  },
  {
    "text": "don't have to load it all into memory but it that's actually not the case and I think it's it's one of my main gripes",
    "start": "1496200",
    "end": "1501399"
  },
  {
    "text": "with the current API I'm not going to say it's wrong but it's misleading to a certain degree because what it will do",
    "start": "1501399",
    "end": "1507640"
  },
  {
    "text": "is it will buffer an entire Json value such as an object and then once it",
    "start": "1507640",
    "end": "1513240"
  },
  {
    "text": "buffered the whole thing then it's going to decode it and there's a good reason for that and the reason is because the",
    "start": "1513240",
    "end": "1520080"
  },
  {
    "text": "encoding Json package essentially prefers correctness over everything else",
    "start": "1520080",
    "end": "1525640"
  },
  {
    "text": "and it has some semantics for when you decode into a value it's going to merge the decoded data into that value so for",
    "start": "1525640",
    "end": "1532880"
  },
  {
    "text": "example if you decode into a map and that map had the key Fu and then you decode a new key bar you end up with",
    "start": "1532880",
    "end": "1539159"
  },
  {
    "text": "both keys Fu and bar it doesn't just replace the previous map with a new map and that is useful for some things but",
    "start": "1539159",
    "end": "1545960"
  },
  {
    "text": "most people they just decode into an empty uh value they don't care about what was there before so for most people",
    "start": "1545960",
    "end": "1552799"
  },
  {
    "text": "this is surprising because they don't care about this property and the way the encoding Json package implements this",
    "start": "1552799",
    "end": "1558360"
  },
  {
    "text": "property is tokenizing all of the input so if there's any syntax mistake in the",
    "start": "1558360",
    "end": "1565039"
  },
  {
    "text": "input or if it's invalid Json then it's not going to decode anything because it's going to do a second pass and in",
    "start": "1565039",
    "end": "1570640"
  },
  {
    "text": "that second pass it is actually going to write to the destination yeah that makes sense I saw",
    "start": "1570640",
    "end": "1576799"
  },
  {
    "text": "another Json implementation which essentially it didn't unmarshal it didn't try and turn the Json into",
    "start": "1576799",
    "end": "1584399"
  },
  {
    "text": "structured data but you could use it to just find specific key paths so you",
    "start": "1584399",
    "end": "1589880"
  },
  {
    "text": "might say here's the Json stream or the Json string and I'm looking for like you",
    "start": "1589880",
    "end": "1595159"
  },
  {
    "text": "know um author. first name and so just by sort of reading it skimming it really",
    "start": "1595159",
    "end": "1601640"
  },
  {
    "text": "not trying to understand and extract all the fields and figure out data types and all that but just looking for that",
    "start": "1601640",
    "end": "1608159"
  },
  {
    "text": "particular key path and that's a kind of that's another approach in if if in a particular case all you care about is a",
    "start": "1608159",
    "end": "1614600"
  },
  {
    "text": "single field that's a very fast way to get that field I'm having x paath uh",
    "start": "1614600",
    "end": "1621240"
  },
  {
    "text": "flashbacks yeah kind of yeah and yeah that's actually a very good point I forgot about that extra use",
    "start": "1621240",
    "end": "1628159"
  },
  {
    "text": "case and I think I think that library is called at least the most famous one ton iterator or something like that or Json",
    "start": "1628159",
    "end": "1634360"
  },
  {
    "text": "eer right and I think it's useful for two use cases one of them you mentioned it's getting just one field or one value",
    "start": "1634360",
    "end": "1641080"
  },
  {
    "text": "and if the Json is very big you can save a lot of work by just skipping to that a little bit and I think the other one is",
    "start": "1641080",
    "end": "1647000"
  },
  {
    "text": "what have you do know what the data looks like because Json at least the encoding Json package forces you to know",
    "start": "1647000",
    "end": "1653600"
  },
  {
    "text": "up front what all of the data is going to look like and you can use something called json. raw message to sort of",
    "start": "1653600",
    "end": "1660080"
  },
  {
    "text": "delay uh parsing chunks of the Json decoding chunks of the Json but that's",
    "start": "1660080",
    "end": "1665640"
  },
  {
    "text": "kind of like just forcing you to do multiple decodes to do it in multiple stages if you want to quickly look at",
    "start": "1665640",
    "end": "1672039"
  },
  {
    "text": "this and then if it's X then do that otherwise do something else if you want to encode that logic into your code",
    "start": "1672039",
    "end": "1678279"
  },
  {
    "text": "using something like uh that package might be a little bit easier for you but I would say that for most people they do",
    "start": "1678279",
    "end": "1684039"
  },
  {
    "text": "know what their Jason is going to look like yeah in my experience it's better if you do know what the Json is going to",
    "start": "1684039",
    "end": "1690200"
  },
  {
    "text": "look like don't be tempted by this idea that your app can just support any data structure",
    "start": "1690200",
    "end": "1696799"
  },
  {
    "text": "because that that will come back to bite you is my experience what does that raw message actually do then is it just like",
    "start": "1696799",
    "end": "1703039"
  },
  {
    "text": "a string type or a slice of bites or or something what is it it is exactly a",
    "start": "1703039",
    "end": "1708200"
  },
  {
    "text": "named slice of bite and it implements on Marshall Json and all it does is it just takes the Json and stores it that that's",
    "start": "1708200",
    "end": "1714760"
  },
  {
    "text": "it it's really powerful because it essentially lets you do whatever you want and I was going to say before we go",
    "start": "1714760",
    "end": "1722000"
  },
  {
    "text": "on I'm close to getting full so I'm going to stop the recording save it and start so give me two minutes sure take a",
    "start": "1722000",
    "end": "1728799"
  },
  {
    "text": "break yeah stop the [Music]",
    "start": "1728799",
    "end": "1736039"
  },
  {
    "text": "world [Music]",
    "start": "1736399",
    "end": "1741840"
  },
  {
    "text": "what up Gophers Jared Santo here your humble producer I'd like to tell you about something new we are beta testing",
    "start": "1741840",
    "end": "1748760"
  },
  {
    "text": "around go time it's a membership program which we think could be really valuable for the whole Community we call it Chang",
    "start": "1748760",
    "end": "1755799"
  },
  {
    "text": "log Plus+ and it's the best way to directly support go time and all of the podcasts videos and other stuff we",
    "start": "1755799",
    "end": "1762480"
  },
  {
    "text": "create here at Chang log we have big plans and Ambitions for this but we are experimenting for now to make sure",
    "start": "1762480",
    "end": "1768440"
  },
  {
    "text": "there's interest so when you sign up today you make the ads disappear you get go time and all the shows you love just",
    "start": "1768440",
    "end": "1775120"
  },
  {
    "text": "no ads I guess that means this part you're listening to right now it'll be gone we also have some extended episodes",
    "start": "1775120",
    "end": "1782080"
  },
  {
    "text": "planned bonus content merch store discounts and a lot of ideas but since it's such early days we are offering",
    "start": "1782080",
    "end": "1787880"
  },
  {
    "text": "memberships at a 40% discount for early adopters that deals going on for the month of August so head to Chang log.com",
    "start": "1787880",
    "end": "1794880"
  },
  {
    "text": "plusplus to join today lock in that discount get closer to the metal and make the ads disappear once again that's",
    "start": "1794880",
    "end": "1802360"
  },
  {
    "text": "changel log.com plusus plus we'd love to have you supporting us as a",
    "start": "1802360",
    "end": "1808760"
  },
  {
    "text": "[Music]",
    "start": "1813960",
    "end": "1820039"
  },
  {
    "text": "member so that's an interesting bug that I have with this program so it seems to just keep using more and more memories",
    "start": "1820039",
    "end": "1825960"
  },
  {
    "text": "as long as I record and then I have to close it completely after saving the file and then just start a new yeah it",
    "start": "1825960",
    "end": "1833240"
  },
  {
    "text": "is just as though it's put in that audio into the ram isn't it I guess so but I don't have time to fix that right now",
    "start": "1833240",
    "end": "1839519"
  },
  {
    "text": "obviously it is the amount of ram it uses the same as the file when you save it same size I stored the wav it was",
    "start": "1839519",
    "end": "1847000"
  },
  {
    "text": "like 160 Megs but uh it used all of my 15 gigabytes of RAM so I don't know what",
    "start": "1847000",
    "end": "1853440"
  },
  {
    "text": "it's doing yeah well so I'm ready again apologies yeah so one question that we were picking up from the channel um this",
    "start": "1853440",
    "end": "1859320"
  },
  {
    "text": "one coming from our very own John calone you mentioned the go 10 compatibility promise um which I think we all go",
    "start": "1859320",
    "end": "1866480"
  },
  {
    "text": "developers who have anything in production really really value Vis A the",
    "start": "1866480",
    "end": "1871799"
  },
  {
    "text": "the Json package of the Center Library are there things that you wish you could put in there right now but that you're",
    "start": "1871799",
    "end": "1878159"
  },
  {
    "text": "sort of prevented from doing that because of that compatibility promise and and perhaps maybe could find their",
    "start": "1878159",
    "end": "1884000"
  },
  {
    "text": "way into a subsequent version of go that is allowed to Break um that backwards compatibility yeah that is that is a",
    "start": "1884000",
    "end": "1890440"
  },
  {
    "text": "good question I think there's two kind of things that I would fix one of them are sort of high level API changes so",
    "start": "1890440",
    "end": "1896840"
  },
  {
    "text": "what we talked about earlier about the the readers and writers making it seem like it's streaming but it's not",
    "start": "1896840",
    "end": "1902039"
  },
  {
    "text": "actually streaming it's buffering but changing those would break practically every program using Json so it's not",
    "start": "1902039",
    "end": "1908519"
  },
  {
    "text": "something that I would ever change in V1 it's just you know out of the question the other kind is subtle bugs and",
    "start": "1908519",
    "end": "1915600"
  },
  {
    "text": "historical problems that that have kind of become the de facto behavior that",
    "start": "1915600",
    "end": "1921200"
  },
  {
    "text": "everybody has ended up some people have ended up depending upon and one example",
    "start": "1921200",
    "end": "1926320"
  },
  {
    "text": "was there's a type called json. number and json. number it essentially lets you",
    "start": "1926320",
    "end": "1932559"
  },
  {
    "text": "easily support big numbers and it's just a string type so when you use it to decode a number so such as you know like",
    "start": "1932559",
    "end": "1939080"
  },
  {
    "text": "a 50 digigit number it doesn't matter if that wouldn't fit in an INT 32 or an int64 because it's going to keep the",
    "start": "1939080",
    "end": "1945799"
  },
  {
    "text": "string exactly as it so that would be like the simplest way to implement big numbers right and the",
    "start": "1945799",
    "end": "1953360"
  },
  {
    "text": "way Json number is implemented uh if the input Json is actually a string containing the digits",
    "start": "1953360",
    "end": "1960159"
  },
  {
    "text": "it's going to accept that even though it's not a Json number that is not documented Behavior the do the",
    "start": "1960159",
    "end": "1965559"
  },
  {
    "text": "documented Behavior it says this decodes a number it doesn't say anything about strings so I tried to fix that or I",
    "start": "1965559",
    "end": "1972360"
  },
  {
    "text": "think it was somebody else and then I reviewed I can't remember and then as you would expect a bunch of people people said this broke my code and I I",
    "start": "1972360",
    "end": "1979360"
  },
  {
    "text": "showed look with three lines of code you can fix it it's really simple and I'm giving them to you and here's a",
    "start": "1979360",
    "end": "1984399"
  },
  {
    "text": "playground link but they said no no no no like this is breaking production this is breaking the the guarantee so oh yeah",
    "start": "1984399",
    "end": "1992320"
  },
  {
    "text": "that does fall into that gray area doesn't it because you shouldn't use it like that but because it worked then",
    "start": "1992320",
    "end": "1998240"
  },
  {
    "text": "what do you do it is a tough one and it is difficult because you have to gge am",
    "start": "1998240",
    "end": "2003399"
  },
  {
    "text": "I breaking too many users like what is too many users right I don't know how people use the Json package I could",
    "start": "2003399",
    "end": "2009320"
  },
  {
    "text": "maybe look at the open source out there and see what the code looks like with static analysis but that would only",
    "start": "2009320",
    "end": "2015360"
  },
  {
    "text": "scratch the surface I would say you know the go code out there that handles the most Json is not open source most likely",
    "start": "2015360",
    "end": "2023159"
  },
  {
    "text": "so it's very very hard to tell if something could fly or not yeah so you",
    "start": "2023159",
    "end": "2028320"
  },
  {
    "text": "have a a version to draft don't you of encoding Json what's that for is this",
    "start": "2028320",
    "end": "2035559"
  },
  {
    "text": "just sort of your Perfect Design of of this is what you would have if if you could so for the time being this has",
    "start": "2035559",
    "end": "2042720"
  },
  {
    "text": "just been a document for me to collect my own thoughts uh because I've been",
    "start": "2042720",
    "end": "2048119"
  },
  {
    "text": "co-maintainer such as you know I can't fix this and if I try to fix that people are going to get upset and I can't touch",
    "start": "2049399",
    "end": "2056158"
  },
  {
    "text": "this because it's you know it's restricted by the API so I've I've collected all of my thoughts or at least",
    "start": "2056159",
    "end": "2061800"
  },
  {
    "text": "the ones I can remember and I haven't gotten to the point where I I've designed anyway API",
    "start": "2061800",
    "end": "2068520"
  },
  {
    "text": "because to a certain level that feels futile at this point because if I design a new Json API it's not going to replace",
    "start": "2068520",
    "end": "2075320"
  },
  {
    "text": "the existing API and as far as I know there's no current plan to do a version",
    "start": "2075320",
    "end": "2080560"
  },
  {
    "text": "two of standard Library packages and I could potentially write something",
    "start": "2080560",
    "end": "2085800"
  },
  {
    "text": "externally but in a way I don't want to add to all the complexity that that is you know 50 packages that dojason and",
    "start": "2085800",
    "end": "2093158"
  },
  {
    "text": "go I wonder what a sensible approach would be whether you could just add some",
    "start": "2093159",
    "end": "2098359"
  },
  {
    "text": "new methods to the to the Json package yeah and that is a good point um and for",
    "start": "2098359",
    "end": "2105000"
  },
  {
    "text": "there are some bugs for example um there's one that I would say affects most code bases out there which is the",
    "start": "2105000",
    "end": "2112560"
  },
  {
    "text": "standard you know you have an HTP end point and the body is Json so you want to decode it so what you do is you take",
    "start": "2112560",
    "end": "2119480"
  },
  {
    "text": "the rbody and you do json. new decod new decoder decode with the body and then",
    "start": "2119480",
    "end": "2126040"
  },
  {
    "text": "into some structure and if you do that it's buggy if you just do that I've just got to",
    "start": "2126040",
    "end": "2131839"
  },
  {
    "text": "go what do you mean it's buggy tell me why please so this was found by Joe uh",
    "start": "2131839",
    "end": "2137680"
  },
  {
    "text": "one of the maintainers I I want to say about a year ago and the bug is the decoder is meant to be useful for",
    "start": "2137680",
    "end": "2146079"
  },
  {
    "text": "streams of Json values and that is for example when you do go test with a Json flag it's going to give you a new line",
    "start": "2146079",
    "end": "2153280"
  },
  {
    "text": "separated uh stream of Json of Json values of Json object yeah that's kind of how I was using in those tools I was",
    "start": "2153280",
    "end": "2159640"
  },
  {
    "text": "talking about yeah exactly in a way it is kind of streaming in a in a way like takes the reader for each object it",
    "start": "2159640",
    "end": "2167560"
  },
  {
    "text": "buffers it I guess but it discards that previous object doesn't it yeah yeah next time right so in a sense it's",
    "start": "2167560",
    "end": "2174280"
  },
  {
    "text": "streaming it appears to you as if it's streaming but internally that's not it's doing well it's still doing it only one",
    "start": "2174280",
    "end": "2180319"
  },
  {
    "text": "object at a time which you could say as a stream it's just if it's a great big fat object then exactly in",
    "start": "2180319",
    "end": "2187240"
  },
  {
    "text": "yeah maybe yeah so I I would say it just assumes that your values are going to be small right so it doesn't imagine that",
    "start": "2187240",
    "end": "2194000"
  },
  {
    "text": "you would ever have a Jason object weighing to 100 megabytes and if you do that it just goes like whoops I'm just gonna buffer that",
    "start": "2194000",
    "end": "2200920"
  },
  {
    "text": "essentially you couldn't do that on your machine today for example you don't have the",
    "start": "2200920",
    "end": "2206119"
  },
  {
    "text": "ram if you want me to leave you can just say that please don't you'll have you'll",
    "start": "2206119",
    "end": "2213040"
  },
  {
    "text": "have to in about eight minutes anyway yeah I'm currently at 30% I've",
    "start": "2213040",
    "end": "2218359"
  },
  {
    "text": "still got yeah like seven or eight minutes I wonder if it's based on how much you say as well surely when you when you talk it must use more RAM okay",
    "start": "2218359",
    "end": "2226119"
  },
  {
    "text": "let me yell into the microphone and then just watch the ram go up I don't know how it yeah I don't know how it structures",
    "start": "2226119",
    "end": "2231720"
  },
  {
    "text": "it maybe it's I know what it's doing it's storing it in Json isn't it yeah",
    "start": "2231720",
    "end": "2237000"
  },
  {
    "text": "yeah maybe yeah maybe every wave is a Json object yeah exactly being streamed",
    "start": "2237000",
    "end": "2242119"
  },
  {
    "text": "somewhere it's not perfect Jason for every type of data is it some binary",
    "start": "2242119",
    "end": "2247480"
  },
  {
    "text": "data is better which actually leads us to a good segue here because yes Json is",
    "start": "2247480",
    "end": "2253359"
  },
  {
    "text": "is awesome it's human readable you know but most of the time you know we have machines talking to each other so are",
    "start": "2253359",
    "end": "2260119"
  },
  {
    "text": "there cases where for efficiency right of Transport um and storage perhaps it",
    "start": "2260119",
    "end": "2266040"
  },
  {
    "text": "just makes more sense uh to just pick a binary format instead of the text based",
    "start": "2266040",
    "end": "2271880"
  },
  {
    "text": "Json passing back and for back and forth especially if it's a stream of of data or you know if you're ingesting a ton of",
    "start": "2271880",
    "end": "2278319"
  },
  {
    "text": "information unless you're debugging really as a developer um perhaps locally I mean there's no way you're going to be",
    "start": "2278319",
    "end": "2284000"
  },
  {
    "text": "waiting through vast amounts of Json trying to read that and take advantage of the human readability aspect of it",
    "start": "2284000",
    "end": "2290000"
  },
  {
    "text": "right so when should you give yourself a pass right and and sort of not necessarily use Json for the sake of",
    "start": "2290000",
    "end": "2295880"
  },
  {
    "text": "using Json because everybody else is using Json right like what is a good sort of a set of a criteria for making",
    "start": "2295880",
    "end": "2301119"
  },
  {
    "text": "the decision against using Json that's a good question before I answer that uh I just want to briefly",
    "start": "2301119",
    "end": "2307040"
  },
  {
    "text": "what the bug was in the previous point in we didn't guess sorry that's my fault for being stupid don't worry it's just",
    "start": "2307040",
    "end": "2314000"
  },
  {
    "text": "more work for the editors clap okay you just clap and it fixes it has this ever",
    "start": "2314000",
    "end": "2319839"
  },
  {
    "text": "happened to you presenting The Clapper clap on the music it's easy clap on clap",
    "start": "2319839",
    "end": "2329040"
  },
  {
    "text": "off The Clapper So Daniel tell us what's the bug with rbody and reading it",
    "start": "2329040",
    "end": "2336520"
  },
  {
    "text": "through the decoder so the bug is that you're only decoding one object but what if the body contained multiple values in",
    "start": "2336520",
    "end": "2344000"
  },
  {
    "text": "multiple you know separated by new lines or something you're not going to notice you're just going to close the body straight after so if the client even if",
    "start": "2344000",
    "end": "2350359"
  },
  {
    "text": "you don't support that if the client was trying to send you three objects separated by new lines you're going to",
    "start": "2350359",
    "end": "2356480"
  },
  {
    "text": "use the first one and ignore the other two which is most likely not what you want to do you would either want to",
    "start": "2356480",
    "end": "2362040"
  },
  {
    "text": "error or use all the data yeah that's quite interesting if you reach the end of the stream what happens when you try",
    "start": "2362040",
    "end": "2368800"
  },
  {
    "text": "and decode using the decoder well I imagine it's going to wrap eof and give",
    "start": "2368800",
    "end": "2374680"
  },
  {
    "text": "you that error or something getf yeah huh so you could support it by having a loop and just keep looping and keep",
    "start": "2374680",
    "end": "2381240"
  },
  {
    "text": "decoding but yeah but again that's kind of yeah I don't know it's quite strange I think when you think about an array in",
    "start": "2381240",
    "end": "2388359"
  },
  {
    "text": "Json an array can be well is often uh many objects you know inside an array",
    "start": "2388359",
    "end": "2395560"
  },
  {
    "text": "that could be the pay Lo and that would actually still work wouldn't it in this wouldn't hit that bug it's just for if",
    "start": "2395560",
    "end": "2401119"
  },
  {
    "text": "if you're using new line separated Json object yeah and in that case you can fix the the code pretty easily you can just",
    "start": "2401119",
    "end": "2407760"
  },
  {
    "text": "add a a check at the end that says if the decoder has more um tokens to be",
    "start": "2407760",
    "end": "2413319"
  },
  {
    "text": "decoded then give some error you can do that but the thing is that obviously people have to remember to do that and",
    "start": "2413319",
    "end": "2419920"
  },
  {
    "text": "to begin with nobody knew to do that so it's just I I would say it's a",
    "start": "2419920",
    "end": "2425359"
  },
  {
    "text": "complicated API design because it's very easy to misuse yeah but to be honest mate I don't know of any API where you",
    "start": "2425359",
    "end": "2431640"
  },
  {
    "text": "send multiple lines of Json like that I could be wrong but I don't think I've",
    "start": "2431640",
    "end": "2436839"
  },
  {
    "text": "seen that yeah if an API was like that you would probably implement it properly and I I agree this is probably not a",
    "start": "2436839",
    "end": "2444160"
  },
  {
    "text": "problem in real life but it's still an edge case that exists and kind of very",
    "start": "2444160",
    "end": "2449760"
  },
  {
    "text": "few people have thought about and is technically a bug this is what I love about people that maintain these",
    "start": "2449760",
    "end": "2455359"
  },
  {
    "text": "packages for us you know it's really hard and you you have to kind of care about everything but that's nice because",
    "start": "2455359",
    "end": "2462319"
  },
  {
    "text": "it means the rest of us don't have to and going to Johnny's question he was",
    "start": "2462319",
    "end": "2467440"
  },
  {
    "text": "asking about when do you choose between Json or something that's plain text some format that's plain text versus",
    "start": "2467440",
    "end": "2473680"
  },
  {
    "text": "something that's binary and I think there are multiple schools of thought there but I I think the the consensus",
    "start": "2473680",
    "end": "2480280"
  },
  {
    "text": "between most programmers is that if it's something that a human is going to deal with such as a human is going to debug",
    "start": "2480280",
    "end": "2486359"
  },
  {
    "text": "it or a human is going to look at it or a human is going to use it or write it you most likely want it to be plain text",
    "start": "2486359",
    "end": "2492079"
  },
  {
    "text": "if you can afford it something like Json or yaml and so on but if it's something that has to be efficient maybe because",
    "start": "2492079",
    "end": "2498200"
  },
  {
    "text": "you have tons of it or maybe because it's only machines talking to each other then it might be of interest to you to",
    "start": "2498200",
    "end": "2503680"
  },
  {
    "text": "consider a binary format that's more efficient that uses less space and so on yeah and I think that argument also",
    "start": "2503680",
    "end": "2510560"
  },
  {
    "text": "applies to the whole debate around grpc versus Json apis it's kind of the same",
    "start": "2510560",
    "end": "2516760"
  },
  {
    "text": "thing you know there might be good reasons why you need this really low-level binary you want want it to be",
    "start": "2516760",
    "end": "2522240"
  },
  {
    "text": "most efficient it possibly can be but yeah it hurt developer friendliness for sure it's nice when you use a or even",
    "start": "2522240",
    "end": "2531200"
  },
  {
    "text": "when you're building it but even using it if you want to explore what what's happening you can sometimes poke around",
    "start": "2531200",
    "end": "2536720"
  },
  {
    "text": "in the browser inside the little Network Tab and see the see the HTTP requests and have a look at the Json bodies and I",
    "start": "2536720",
    "end": "2543559"
  },
  {
    "text": "find that to be very useful particularly if I'm developing so yeah which of course I think you'd need extra Tooling",
    "start": "2543559",
    "end": "2549960"
  },
  {
    "text": "in order to do that if you were going to use some kind of grpc thing I think I definitely agree I would say by default",
    "start": "2549960",
    "end": "2556000"
  },
  {
    "text": "choose Blain text and only carefully consider binary or even better support both many people that build grpc",
    "start": "2556000",
    "end": "2563079"
  },
  {
    "text": "Services they add something on top like a rest Gateway and then you can the client can choose which one to use maybe",
    "start": "2563079",
    "end": "2570319"
  },
  {
    "text": "they use drpc for a machine but maybe a human that's debugging is going to use rest with Json yeah absolutely I think",
    "start": "2570319",
    "end": "2577079"
  },
  {
    "text": "that's a sound approach but I would agree start with the Json one because in the beginning that's the most easy to",
    "start": "2577079",
    "end": "2583400"
  },
  {
    "text": "work with and maybe it's all you're ever going to need are you saying it's a it's a yagy situation yag what is yag oh you",
    "start": "2583400",
    "end": "2593160"
  },
  {
    "text": "haven't been indoctrinated into the uh the Ruby ecosystem yagy is something that was popularized by a very popular",
    "start": "2593160",
    "end": "2600119"
  },
  {
    "text": "framework author in the Ruby ecosystem yagy stands for you ain't going to need it so",
    "start": "2600119",
    "end": "2606880"
  },
  {
    "text": "I'm copying that yeah it's it's good isn't it yes indeed I still pull that",
    "start": "2606880",
    "end": "2613079"
  },
  {
    "text": "out every now every once in a while but I I do think there's one point that we might have missed here which is defining",
    "start": "2613079",
    "end": "2619079"
  },
  {
    "text": "your data model and I think that's probably the place where Json falls short the most and where it bites people",
    "start": "2619079",
    "end": "2624800"
  },
  {
    "text": "the most um and that's where things like Json schema come in but they're I wouldn't say they're very good solutions",
    "start": "2624800",
    "end": "2631359"
  },
  {
    "text": "they mostly tried to Port the XML solutions from you know 20 years ago to Json I don't think they're a very good",
    "start": "2631359",
    "end": "2638200"
  },
  {
    "text": "approach I think a proper schema language um like protuff and JPC are",
    "start": "2638200",
    "end": "2644440"
  },
  {
    "text": "better so you have to choose sort of the trade-off between you know do I use something simple like Json and then just",
    "start": "2644440",
    "end": "2651440"
  },
  {
    "text": "get going or do I choose a schema language that's going to let me Define my types properly and so on yeah and",
    "start": "2651440",
    "end": "2657640"
  },
  {
    "text": "that's probably use case driven as well isn't it it's in some situations if you are working with generic data that and",
    "start": "2657640",
    "end": "2664680"
  },
  {
    "text": "you don't know the shape of that data and that does happen sometimes I've worked on projects for sure where it's",
    "start": "2664680",
    "end": "2671280"
  },
  {
    "text": "it's a kind of platform and you don't know what the data is ahead of time um",
    "start": "2671280",
    "end": "2677440"
  },
  {
    "text": "then that does kind of lead you one way or the other the nice thing about Jason though is that you can always add fields",
    "start": "2677440",
    "end": "2684599"
  },
  {
    "text": "to it can't you you can always add fields and previous code will just continue to work because in a in a",
    "start": "2684599",
    "end": "2691280"
  },
  {
    "text": "struct in go if there's a field missing in the struct but it's present in the Json by default it just gets ignored",
    "start": "2691280",
    "end": "2698119"
  },
  {
    "text": "doesn't it yep that's a very good point Json does allow backwards compatibility",
    "start": "2698119",
    "end": "2703400"
  },
  {
    "text": "pretty easily if you are okay with maintaining the previous fields and so on and I I think most formats are like",
    "start": "2703400",
    "end": "2709400"
  },
  {
    "text": "that for example PR buff if you just add things at the end with new IDs that's also fine but it is less intuitive it it",
    "start": "2709400",
    "end": "2717920"
  },
  {
    "text": "it is a little bit of extra complexity to think about that I agree but it keeps",
    "start": "2717920",
    "end": "2723000"
  },
  {
    "text": "my old stuff working so I don't know um I it's a tradeoff I'm willing to make",
    "start": "2723000",
    "end": "2728079"
  },
  {
    "text": "and are there other kinds of efficiencies to be had in the current implementation then would it be possible",
    "start": "2728079",
    "end": "2734079"
  },
  {
    "text": "to make changes and say reduce allocations in the process of decoding",
    "start": "2734079",
    "end": "2739160"
  },
  {
    "text": "Jason Y and and that is kind of where most of my work has gone uh because I",
    "start": "2739160",
    "end": "2744599"
  },
  {
    "text": "didn't like I said before I didn't want to just write a new package and just add to the fire that is making new go",
    "start": "2744599",
    "end": "2751440"
  },
  {
    "text": "developers choose between 20 packages so I did do some changes to the internals",
    "start": "2751440",
    "end": "2756880"
  },
  {
    "text": "such as don't do work twice or cash some stuff or remove a bounce check here and",
    "start": "2756880",
    "end": "2762880"
  },
  {
    "text": "there and stuff like that and I think it was between go 110 and go 113 that the",
    "start": "2762880",
    "end": "2768079"
  },
  {
    "text": "decoder if you mostly use structs so no Maps um it got about 30 to 50% faster",
    "start": "2768079",
    "end": "2775319"
  },
  {
    "text": "which was pretty nice but you you have to understand that the base Point uh was pretty low so initially don't have to",
    "start": "2775319",
    "end": "2782760"
  },
  {
    "text": "say that just focus on the Improvement yeah exactly 30% faster but I will also say that the",
    "start": "2782760",
    "end": "2789839"
  },
  {
    "text": "packages that claim to be 10 times faster than encoding Json they probably ran their benchmarks a long time ago and",
    "start": "2789839",
    "end": "2796839"
  },
  {
    "text": "that is probably more like four times faster by now interesting yeah huh and I",
    "start": "2796839",
    "end": "2802079"
  },
  {
    "text": "I definitely think that there's more work to be done but all the low hanging fruit has been picked uh mostly by me",
    "start": "2802079",
    "end": "2808160"
  },
  {
    "text": "and some others but there are some things that can still be done and without changing the API or breaking the",
    "start": "2808160",
    "end": "2814119"
  },
  {
    "text": "users and I think the biggest one and that ties into what uh the work that Dave has been doing is essentially",
    "start": "2814119",
    "end": "2821559"
  },
  {
    "text": "rewriting the tokenizer so what takes in the bite and says oh this is a string and then this",
    "start": "2821559",
    "end": "2827240"
  },
  {
    "text": "is an open brace and then there is a comma and so on yeah and so that process",
    "start": "2827240",
    "end": "2832480"
  },
  {
    "text": "then I mean does it build the data structures as it goes when it's pausing",
    "start": "2832480",
    "end": "2838319"
  },
  {
    "text": "or does it describe somehow that structure in some other intermediate data structure if that makes sense so",
    "start": "2838319",
    "end": "2845880"
  },
  {
    "text": "one way to go about it would be indeed to build some sort of tree such as like when you parse a go file and you get a",
    "start": "2845880",
    "end": "2851599"
  },
  {
    "text": "syntax tree of the of the go code yeah uh it doesn't do that what it does is it",
    "start": "2851599",
    "end": "2857599"
  },
  {
    "text": "tokenizes a value for example adjacent object once so you know it it starts",
    "start": "2857599",
    "end": "2862880"
  },
  {
    "text": "going through the reader through the bytes and goes token token token but it forgets them because there's the first",
    "start": "2862880",
    "end": "2868200"
  },
  {
    "text": "pass it just wants to check if the Json is valid and once it reaches the end for example the closing brace for the",
    "start": "2868200",
    "end": "2874359"
  },
  {
    "text": "initial brace uh then it goes all the way back to the beginning of the of the buffer and then it it tokenizes again",
    "start": "2874359",
    "end": "2881760"
  },
  {
    "text": "but this time when when it encounters for example open object then it actually goes and um starts an object in the",
    "start": "2881760",
    "end": "2890440"
  },
  {
    "text": "destination um value and if it sees a string then it tries to decode that into whatever the destination the current",
    "start": "2890440",
    "end": "2896720"
  },
  {
    "text": "destination is and so on that's interesting I'm surprised it does that um because you'd think it would just do",
    "start": "2896720",
    "end": "2903520"
  },
  {
    "text": "it once wouldn't you why does it do it like that so the reason it does it twice",
    "start": "2903520",
    "end": "2909000"
  },
  {
    "text": "is to prevent partial decodes so if I give you for example a an array of 9,000",
    "start": "2909000",
    "end": "2915079"
  },
  {
    "text": "elements and there's no closing token that is inv valid Json so what are you going to do are you going to spend all",
    "start": "2915079",
    "end": "2920559"
  },
  {
    "text": "the time uh to decode all those 9,000 elements into your destination and",
    "start": "2920559",
    "end": "2926040"
  },
  {
    "text": "probably mess with your destination data if you had anything there before which for an array doesn't make sense but",
    "start": "2926040",
    "end": "2931440"
  },
  {
    "text": "imagine a map for example yeah so you don't want to do that at least not in the the Json package it it values",
    "start": "2931440",
    "end": "2937359"
  },
  {
    "text": "correctness so it says no I'm first going to make sure that the Json is valid and only after I'm going to decode",
    "start": "2937359",
    "end": "2944319"
  },
  {
    "text": "yeah very interesting H and I think you could say it should keep a tree instead of keeping the bites that might be a",
    "start": "2944319",
    "end": "2951200"
  },
  {
    "text": "little bit more efficient in terms of not redoing work but I would say you probably are going to end up costing",
    "start": "2951200",
    "end": "2957480"
  },
  {
    "text": "more in terms of allocating objects and so on I mean i' I'd just go through it",
    "start": "2957480",
    "end": "2963079"
  },
  {
    "text": "once don't worry about correctness and yes all the work and then if at the end it's wrong then you get the error but",
    "start": "2963079",
    "end": "2969400"
  },
  {
    "text": "you have to wait for it maybe I feel like that's more of an optimistic thing is do you think that's that would be a",
    "start": "2969400",
    "end": "2975280"
  },
  {
    "text": "bad design I'm not sure I'm I'm about 50/50 I I think both use cases are valid",
    "start": "2975280",
    "end": "2980920"
  },
  {
    "text": "I think the current API tries to be as simple as possible it essentially only has one entry point uh which is you know",
    "start": "2980920",
    "end": "2987440"
  },
  {
    "text": "decoder decode and on Marshall is just a wrapper for it because if you look at on Marshall it just does the thing for you",
    "start": "2987440",
    "end": "2993640"
  },
  {
    "text": "underneath oh it's not the other way around I thought the decoder would use you thought decoder used Marshall yeah",
    "start": "2993640",
    "end": "2999839"
  },
  {
    "text": "or Marshall yeah so the nice thing about the decoder is that it keeps stuff to be reused later if it was the decoder using",
    "start": "2999839",
    "end": "3006720"
  },
  {
    "text": "Marshall then Marshall doesn't have the decoder object to then reuse all that stuff right yeah I see huh oh yeah",
    "start": "3006720",
    "end": "3014799"
  },
  {
    "text": "that's okay very cool very cool and of course this is all open source so if we want to really see how this works we can",
    "start": "3014799",
    "end": "3020680"
  },
  {
    "text": "go and read the code yeah but I would say probably don't look at that code and that API and assume that it's zom medic",
    "start": "3020680",
    "end": "3027040"
  },
  {
    "text": "go because a lot of this was written you know over a decade ago and it's been you",
    "start": "3027040",
    "end": "3032400"
  },
  {
    "text": "know my Dirty Fingers have been on it as well as many other people's fingers so it's it's kind of like a zombie at this",
    "start": "3032400",
    "end": "3037760"
  },
  {
    "text": "point that's actually a very good point you raised because a lot of times you know I think many of us in the in the",
    "start": "3037760",
    "end": "3044000"
  },
  {
    "text": "good Community who have been around for a while basically tell tell new folks hey just go read the stand library and that's that's an excellent example you",
    "start": "3044000",
    "end": "3050640"
  },
  {
    "text": "know of how to write go code right but that is not always true you know we've",
    "start": "3050640",
    "end": "3055880"
  },
  {
    "text": "learned a lot since then you know some dos and don'ts and some best practices and you know as you as we say some idiomatic ways of doing things um and",
    "start": "3055880",
    "end": "3063000"
  },
  {
    "text": "yeah encoding Json package is perhaps not the best representation of of how far we've gone yeah the other thing is",
    "start": "3063000",
    "end": "3069200"
  },
  {
    "text": "it contains lots of optimizations and it should and that can that can come at a",
    "start": "3069200",
    "end": "3074359"
  },
  {
    "text": "cost of code complexity and kind of ugliness but you you don't mind it because it's such an important place to",
    "start": "3074359",
    "end": "3081440"
  },
  {
    "text": "have that but yes a junior developer could go and look and see some in there and think well this is how you do this",
    "start": "3081440",
    "end": "3087640"
  },
  {
    "text": "and probably you wouldn't want to do it like that yeah I completely agree we",
    "start": "3087640",
    "end": "3092799"
  },
  {
    "text": "definitely should not run out of time to tweeze in some unpopular",
    "start": "3092799",
    "end": "3098070"
  },
  {
    "text": "[Music] opinions opion you I actually think you",
    "start": "3098070",
    "end": "3105079"
  },
  {
    "text": "should probably [Music] leave",
    "start": "3105079",
    "end": "3112359"
  },
  {
    "text": "opinion so my unpopular opinion is that encoding",
    "start": "3114359",
    "end": "3120440"
  },
  {
    "text": "Json is fast enough oh come on wow this is the guy",
    "start": "3120440",
    "end": "3126799"
  },
  {
    "text": "responsible for making it faster well I'm going to say generally",
    "start": "3126799",
    "end": "3133160"
  },
  {
    "text": "where generally means it most it most likely applies to you but it might not apply to the one person that's doing",
    "start": "3133160",
    "end": "3138920"
  },
  {
    "text": "something completely esoteric such as handling 20 Gigabytes of Json but most",
    "start": "3138920",
    "end": "3144319"
  },
  {
    "text": "people don't do that and kind of my point goes back to the trade-offs right yes if you pick another",
    "start": "3144319",
    "end": "3150280"
  },
  {
    "text": "package you can get maybe a 2X 3x maybe even Forex Improvement but is it really",
    "start": "3150280",
    "end": "3156760"
  },
  {
    "text": "worth sticking with Json at that point the overlap between the people that are stuck with Json because they are and the",
    "start": "3156760",
    "end": "3163280"
  },
  {
    "text": "people that have to deal with a lot of data is very small because the people that have to deal with a lot of data",
    "start": "3163280",
    "end": "3168799"
  },
  {
    "text": "they generally pick better formats that that are faster to decode I think that is a pretty solid argument actually",
    "start": "3168799",
    "end": "3175920"
  },
  {
    "text": "yeah that's not unpopular with me that one I think you've nailed that yeah uh yeah well you would think that the",
    "start": "3175920",
    "end": "3181400"
  },
  {
    "text": "amount of people yelling about encoding Jason being too slow with disagree sure well but that's because we",
    "start": "3181400",
    "end": "3188240"
  },
  {
    "text": "gave them the tools to Benchmark things I don't know what you expect of course G be moaning should take them",
    "start": "3188240",
    "end": "3195680"
  },
  {
    "text": "back well Daniel thank you so much for coming on the show and spending some",
    "start": "3195680",
    "end": "3201000"
  },
  {
    "text": "time with us it's been great you must come back at some point it was a pleasure yeah um thank you very much",
    "start": "3201000",
    "end": "3206599"
  },
  {
    "text": "thanks to everyone for listening and we'll see you next",
    "start": "3206599",
    "end": "3211319"
  },
  {
    "text": "time hey have you followed us on Twitter yet you should we Post Live recording",
    "start": "3213119",
    "end": "3218799"
  },
  {
    "text": "notifications clips and highlights from past episodes links and repos from around the go community and more follow",
    "start": "3218799",
    "end": "3226440"
  },
  {
    "text": "along and join the conversation we are at gotime FM this episode was hosted by Matt ryer",
    "start": "3226440",
    "end": "3233359"
  },
  {
    "text": "with help from Johnny borico it was produced by Jared Santo that's me and the music as always was provided by the",
    "start": "3233359",
    "end": "3240480"
  },
  {
    "text": "mysterious brakemaster cylinder we are brought to you by the amazing Folks at fastly lenoe and",
    "start": "3240480",
    "end": "3247240"
  },
  {
    "text": "rollbar that's our show come back next week we're talking",
    "start": "3247240",
    "end": "3252838"
  },
  {
    "text": "infrastructure CH BL plus [Music]",
    "start": "3258760",
    "end": "3264079"
  },
  {
    "text": "plus [Music]",
    "start": "3264079",
    "end": "3277129"
  },
  {
    "text": "sh [Music]",
    "start": "3280160",
    "end": "3287310"
  },
  {
    "text": "BL change log",
    "start": "3289000",
    "end": "3292680"
  },
  {
    "text": "Plus+ [Music]",
    "start": "3294079",
    "end": "3300040"
  },
  {
    "text": "change log plus [Music]",
    "start": "3300040",
    "end": "3304930"
  },
  {
    "text": "plus change log plus [Music]",
    "start": "3309160",
    "end": "3317040"
  },
  {
    "text": "plus by the way I found what the bug was oh you did yeah so if I look at my",
    "start": "3322280",
    "end": "3328440"
  },
  {
    "text": "recording program it keeps using more memory but if I switch to a different window it doesn't it's like Quantum it",
    "start": "3328440",
    "end": "3335319"
  },
  {
    "text": "stops climbing yeah no so I think it's the UI so the UI keeps showing the wavelength of my voice oh and it's",
    "start": "3335319",
    "end": "3341160"
  },
  {
    "text": "probably like keeping the entire UI in memory and then if I look away it stops rendering it and then it stops using",
    "start": "3341160",
    "end": "3347559"
  },
  {
    "text": "more memory so it only does it when you're looking at it so don't look at it at I'm looking at it now and it's climbing to 31 32 and looking at it it",
    "start": "3347559",
    "end": "3356480"
  },
  {
    "text": "stuff Heisenberg principal it's like Shing",
    "start": "3356480",
    "end": "3361319"
  },
  {
    "text": "yeah Shing as cat files oh man it is it's like what this",
    "start": "3363160",
    "end": "3370520"
  },
  {
    "text": "subserve as long yeah changes its Behavior oh it's so weird you'd never think to check that would you that's",
    "start": "3370520",
    "end": "3376920"
  },
  {
    "text": "such a classic computer bug what happen obviously when I did the",
    "start": "3376920",
    "end": "3382960"
  },
  {
    "text": "5sec recording I didn't you know it wasn't time to notice if the memory so you literally if you minimize",
    "start": "3382960",
    "end": "3389400"
  },
  {
    "text": "the window or have it on a different screen or something when it's not doing it does does the ram jump back to where",
    "start": "3389400",
    "end": "3395680"
  },
  {
    "text": "it was no it just stays so so in this uh in this second section I it claimed all",
    "start": "3395680",
    "end": "3401079"
  },
  {
    "text": "the way up to 30% so I just minimized the window and then it just stayed there right and you just thought I just don't",
    "start": "3401079",
    "end": "3406200"
  },
  {
    "text": "want to stress about this I don't want to look at it and then it works and you found it that's if you if you saw me",
    "start": "3406200",
    "end": "3412720"
  },
  {
    "text": "looking up this was me checking the memory usage and praying that it wasn't about to crash but again I apologize for",
    "start": "3412720",
    "end": "3420760"
  },
  {
    "text": "that Daniel you must come back and debug more of our Tech Gremlins please oh my",
    "start": "3420760",
    "end": "3426480"
  },
  {
    "text": "God oh my God no no please this was very",
    "start": "3426480",
    "end": "3432240"
  },
  {
    "text": "stressful",
    "start": "3433000",
    "end": "3436000"
  }
]