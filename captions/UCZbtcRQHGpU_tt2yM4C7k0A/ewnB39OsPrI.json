[
  {
    "text": "bandwith for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5560"
  },
  {
    "text": "fast and fix things here at change log because of robbar check them out at rar.com and we're hosted on Leno Cloud",
    "start": "5560",
    "end": "11840"
  },
  {
    "text": "servers at the lin.com changelog this episode is brought to you",
    "start": "11840",
    "end": "17320"
  },
  {
    "text": "by robbar robbar is realtime error monitoring alerting and analytics that",
    "start": "17320",
    "end": "22680"
  },
  {
    "text": "helps you resolve production errors of minutes and I talk with Paul biger the founder of Circle C a trusted customer",
    "start": "22680",
    "end": "28160"
  },
  {
    "text": "rbar and Paul says they don't deploy a service without installing rollar first",
    "start": "28160",
    "end": "33320"
  },
  {
    "text": "it's that crucial to them we operate at serious scale and literally the first",
    "start": "33320",
    "end": "38760"
  },
  {
    "text": "thing we do when we create a new service is is we install rollar in it like we we need to have that visibility uh and",
    "start": "38760",
    "end": "46280"
  },
  {
    "text": "without that visibility it would be impossible to run at the scale we do and certainly with the number of people that",
    "start": "46280",
    "end": "52120"
  },
  {
    "text": "we have like we're relatively small team operating a major service and without",
    "start": "52120",
    "end": "57199"
  },
  {
    "text": "the visibility that robot gives us into our exceptions it just it just wouldn't be possible all right if you want to",
    "start": "57199",
    "end": "62280"
  },
  {
    "text": "follow Paul's footsteps and start deploying with confidence today head to rar.com changelog once again rar.com",
    "start": "62280",
    "end": "71280"
  },
  {
    "text": "changelog welcome to JS party a weekly celebration of JavaScript and the web tune in live on Thursdays at 1:00 p.m.",
    "start": "76840",
    "end": "84680"
  },
  {
    "text": "Eastern 10:00 a.m. Pacific at change ball.com Live join the community and slack with us Us in real time during the",
    "start": "84680",
    "end": "91320"
  },
  {
    "text": "show at changel law.com Community follow us on Twitter we're at JSP party FM and",
    "start": "91320",
    "end": "96799"
  },
  {
    "text": "now on to the [Applause] show hello and welcome to another",
    "start": "96799",
    "end": "103119"
  },
  {
    "text": "exciting JS party I'm your host today Nick ni and I am joined today by K ball I'm going to play",
    "start": "103119",
    "end": "109799"
  },
  {
    "text": "you excellent excellent and we have a very special guest today and that is mat Kina Mato say hello hi hi everyone",
    "start": "109799",
    "end": "118719"
  },
  {
    "text": "welcome to the show to tell a little bit about yourself you are a technical director at near form and you're also on",
    "start": "118719",
    "end": "124759"
  },
  {
    "text": "the node.js technical steering committee where you worked on things such as uh node.js streams is that right yes",
    "start": "124759",
    "end": "132000"
  },
  {
    "text": "absolutely absolutely I am one of the few people that maintains not streams or",
    "start": "132000",
    "end": "137080"
  },
  {
    "text": "end up ended up maintaining node streams essentially but that's you know we can have a little bit of history there in",
    "start": "137080",
    "end": "142480"
  },
  {
    "text": "the future in the during the party absolutely I'm also part of the openjs",
    "start": "142480",
    "end": "148720"
  },
  {
    "text": "foundation cross projects Council representing the nodejs project so you know there is the nodejs project join",
    "start": "148720",
    "end": "154519"
  },
  {
    "text": "the openjs foundation last year so essentially there is a new entity",
    "start": "154519",
    "end": "160159"
  },
  {
    "text": "whatever whatever that means I'm also speaking at non interactive in Montreal in some weeks yeah yeah uh you're",
    "start": "160159",
    "end": "166760"
  },
  {
    "text": "speaking on December 11th in Montreal at node plus JS interactive yay we will be",
    "start": "166760",
    "end": "172720"
  },
  {
    "text": "there as well so we're really excited to see you there in person and uh see uh",
    "start": "172720",
    "end": "178200"
  },
  {
    "text": "some listeners out there as well yes Nick you're going to be doing a ton of stuff out there right you you're like on a couple panels and other stuff yeah",
    "start": "178200",
    "end": "185120"
  },
  {
    "text": "panels a live show over lunch on the second day so that'll be really exciting and then we'll also just be hanging",
    "start": "185120",
    "end": "191200"
  },
  {
    "text": "around and and chatting with people so that'll be a lot of fun come say hi fantastic I will I will",
    "start": "191200",
    "end": "197280"
  },
  {
    "text": "absolutely awesome so tell us a little bit more about yourself what got you into being on the the node TSC or or",
    "start": "197280",
    "end": "204640"
  },
  {
    "text": "getting into streams okay so well I got into streams because",
    "start": "204640",
    "end": "210360"
  },
  {
    "text": "you know they are they underpins most of the things not JS really you know at the beginning I got into node by working on",
    "start": "210360",
    "end": "217360"
  },
  {
    "text": "top of level DB the level up Community this goes long time ago we're talking",
    "start": "217360",
    "end": "222480"
  },
  {
    "text": "about 2013 type of things and at that point in time I did I was doing a lot of",
    "start": "222480",
    "end": "228599"
  },
  {
    "text": "work on streams and you know thinking about streaming apis and so on and so forth when the NOS Foundation was born",
    "start": "228599",
    "end": "235720"
  },
  {
    "text": "and there was more loose contribution rules on the project I just started Ed you know chiming in on streams and I",
    "start": "235720",
    "end": "242480"
  },
  {
    "text": "started contributing back to node.js and I started you know fixing some of the long-term bugs that we had in there I",
    "start": "242480",
    "end": "248519"
  },
  {
    "text": "would call I would say that the not streams are probably the most Legacy piece of software in OJs to some extent",
    "start": "248519",
    "end": "254360"
  },
  {
    "text": "so at that point in time I you know start keep kept working on it essentially I almost inherited that code",
    "start": "254360",
    "end": "259840"
  },
  {
    "text": "base and because of that they invited me to join the njs technical steering committee I am also you know as part of",
    "start": "259840",
    "end": "266520"
  },
  {
    "text": "my work at the noing committee I'm also part of the team that organized the collaborator Summit which is happen",
    "start": "266520",
    "end": "272680"
  },
  {
    "text": "right after not plus JS interactive so where all not collaborators and all openjs Foundation collaborators can meet",
    "start": "272680",
    "end": "278840"
  },
  {
    "text": "together and have some sessions and discussions and meetting and meet face to face which is pretty great and it's a",
    "start": "278840",
    "end": "284199"
  },
  {
    "text": "good it's a very nice experience so as part of my daily job",
    "start": "284199",
    "end": "289639"
  },
  {
    "text": "I'm managing teams of people using of developers designers devops uh building things with nodejs and other",
    "start": "289639",
    "end": "295960"
  },
  {
    "text": "Technologies also a lot of react and so on and so forth so near for is uh we vested a lot on",
    "start": "295960",
    "end": "303560"
  },
  {
    "text": "node.js and you know we have several people on the TSC as well James Nell for example or an aning again you know the",
    "start": "303560",
    "end": "309680"
  },
  {
    "text": "open source philosophy and know a key part of what we do and what we are very",
    "start": "309680",
    "end": "314720"
  },
  {
    "text": "cool I'm curious to dig in a little more on one of the the things you highlighted there so you said streams are one of the most Legacy parts of node yeah what do",
    "start": "314720",
    "end": "322800"
  },
  {
    "text": "you think has led to them sticking around so long oh node",
    "start": "322800",
    "end": "327960"
  },
  {
    "text": "exploding you know it's node become so big so fast and we couldn't change them",
    "start": "327960",
    "end": "334759"
  },
  {
    "text": "anymore like changing streams now will be meaning to basically every web",
    "start": "334759",
    "end": "341360"
  },
  {
    "text": "application built with Express will need to be Rewritten well every web application will need to be written or",
    "start": "341360",
    "end": "346759"
  },
  {
    "text": "will be a significant amount of fixes and then every single applica and and",
    "start": "346759",
    "end": "352080"
  },
  {
    "text": "then every everything that does some you know file manipulation will probably need to be Rewritten so summing all all",
    "start": "352080",
    "end": "359120"
  },
  {
    "text": "those things up this means probably all use cases of node so we cannot really do a breaking change on streams a big",
    "start": "359120",
    "end": "366000"
  },
  {
    "text": "breaking change wow and that's the problem so if I'm telling if you know",
    "start": "366000",
    "end": "371560"
  },
  {
    "text": "the question mark is should we do a new version new version of node that breaks Express yeah probably not",
    "start": "371560",
    "end": "379759"
  },
  {
    "text": "right or breaks web pack or roll up or whatever and you know probably not right",
    "start": "379759",
    "end": "387919"
  },
  {
    "text": "would you probably not though we we did have uh it's reminding me like okay we could",
    "start": "387919",
    "end": "394479"
  },
  {
    "text": "break this because it'll break every use case um reminds me of the argument we had last week about whether we should",
    "start": "394479",
    "end": "399560"
  },
  {
    "text": "Rebrand JavaScript right like once it's wide enough distributed you really can't fix your mistakes no you can't that's",
    "start": "399560",
    "end": "408080"
  },
  {
    "text": "the problem and uh that's that's the problem of well we are slowly fixing",
    "start": "408080",
    "end": "414000"
  },
  {
    "text": "them in the sense that we are slowly slowly slowly fixing some of the bugs in",
    "start": "414000",
    "end": "420360"
  },
  {
    "text": "in streams some of the most problematic piece to some extent like doing some",
    "start": "420360",
    "end": "425840"
  },
  {
    "text": "surgical changes and you know remove some of the inconsistencies some of the",
    "start": "425840",
    "end": "430919"
  },
  {
    "text": "problems and so on and so forth yeah yeah if you could probably if you can keep the API",
    "start": "430919",
    "end": "438160"
  },
  {
    "text": "consistent you can replace a heck of a lot of the internals yeah the problem is",
    "start": "438160",
    "end": "443240"
  },
  {
    "text": "that you know the it's not really the API that is the problem the the key challenge there is the event flow and",
    "start": "443240",
    "end": "450879"
  },
  {
    "text": "the signaling messaging between two streams so you know if the event undering changes you know you can break",
    "start": "450879",
    "end": "457080"
  },
  {
    "text": "somebody that expect certain events to happen in a certain order oh interesting so people are depending on",
    "start": "457080",
    "end": "463360"
  },
  {
    "text": "implementation details rather than the API essentially yes it's a very streams",
    "start": "463360",
    "end": "468639"
  },
  {
    "text": "are a very leaky abstraction in nodejs it's that's one of the key part that I",
    "start": "468639",
    "end": "474039"
  },
  {
    "text": "don't like for example is not they're not well encapsulated to some extent they suppose a hell of a lot of internal",
    "start": "474039",
    "end": "480000"
  },
  {
    "text": "workings of them which is one of the greatest things so that people can do whatever they want with them and is great on the other side it also means",
    "start": "480000",
    "end": "487240"
  },
  {
    "text": "that a lot of people are relying on internal implementations details that probably they shouldn't have right so",
    "start": "487240",
    "end": "493720"
  },
  {
    "text": "let's step back actually and clarify in case you know we've got a lot of different folks with different backgrounds in the audience so maybe",
    "start": "493720",
    "end": "499720"
  },
  {
    "text": "let's can we start by defining what streams are and and how they work okay so streams are like an array but in time",
    "start": "499720",
    "end": "507440"
  },
  {
    "text": "a key thing on streams is that instead of of you know loading up a big file in memory or a big array of data you are uh",
    "start": "507440",
    "end": "514959"
  },
  {
    "text": "you know consuming them as this data is loaded or produc it so by processing it",
    "start": "514959",
    "end": "520200"
  },
  {
    "text": "chunk by chunk or item by item you can actually process a huge amount of data",
    "start": "520200",
    "end": "525320"
  },
  {
    "text": "with constant memory which is great for example to you know ingest a gigabyte a",
    "start": "525320",
    "end": "532480"
  },
  {
    "text": "file of that is a side of a gigabyte or 10 gigabyte or a terabyte even whatever",
    "start": "532480",
    "end": "538360"
  },
  {
    "text": "because we can just process test them chunk by chunk and not you know allocating all this memory that we cannot fit on our current machine so",
    "start": "538360",
    "end": "545440"
  },
  {
    "text": "they're great and uh uh there are a lot more detail details in how streams work",
    "start": "545440",
    "end": "550839"
  },
  {
    "text": "and how node streams work and how streams work in general so do you want to go in those details right now or I'd",
    "start": "550839",
    "end": "556839"
  },
  {
    "text": "love to but you mentioned that it's a very Legacy part of node and touching",
    "start": "556839",
    "end": "562640"
  },
  {
    "text": "them or or breaking them in any way would break a heck of a lot of code so that means that they are used in quite a",
    "start": "562640",
    "end": "568120"
  },
  {
    "text": "few different places could you give us uh some examples of where streams might be used where we may not actually",
    "start": "568120",
    "end": "573240"
  },
  {
    "text": "realize we're using streams okay um HTTP server is using streams so your request",
    "start": "573240",
    "end": "580760"
  },
  {
    "text": "and response object are two streams which means then whenever you're using Express or whatever web framework you're",
    "start": "580760",
    "end": "587320"
  },
  {
    "text": "having talking through you're using streams and to uh interact with your",
    "start": "587320",
    "end": "593000"
  },
  {
    "text": "clients they are being used in every single database connection driver that you can work with because our con ction",
    "start": "593000",
    "end": "599680"
  },
  {
    "text": "our TCP sockets our TLS stack is all based on node streams essentially even",
    "start": "599680",
    "end": "605800"
  },
  {
    "text": "if you don't realize that under they underpins it all even if you don't use them directly because you might just say",
    "start": "605800",
    "end": "611360"
  },
  {
    "text": "to your database driver oh please do me an SQL query or you're using a high",
    "start": "611360",
    "end": "616920"
  },
  {
    "text": "level HTTP client and you just say fetch a URL internally it's using a node",
    "start": "616920",
    "end": "622800"
  },
  {
    "text": "streams to do all the work and you know you can combine them for example if you are for if you're doing an HTTP code",
    "start": "622800",
    "end": "630000"
  },
  {
    "text": "you can use this that will return for example a compressed format with broadly",
    "start": "630000",
    "end": "636200"
  },
  {
    "text": "gzip or deflate or whatever you want you can then internally your high level HTTP",
    "start": "636200",
    "end": "641600"
  },
  {
    "text": "client will probably take spin up a stream to decompress them those are",
    "start": "641600",
    "end": "646959"
  },
  {
    "text": "still shipped within OJs in the that lib Library so this means that you can",
    "start": "646959",
    "end": "652240"
  },
  {
    "text": "decompress your file and you know all of these will happen you will still get a",
    "start": "652240",
    "end": "658040"
  },
  {
    "text": "stream in the end which then you can process the way you want so for the most part would you say that a lot of the use",
    "start": "658040",
    "end": "664440"
  },
  {
    "text": "cases end up uh you mentioned it being kind of like an array over time uh from from an end user perspective would you",
    "start": "664440",
    "end": "671600"
  },
  {
    "text": "typically be using that array at the end when it's complete uh and the streams are just kind of happening transparently",
    "start": "671600",
    "end": "677560"
  },
  {
    "text": "under the hood for you it depends okay because you might want to still processing the data chunk by chunk so",
    "start": "677560",
    "end": "685000"
  },
  {
    "text": "for example once upon a time I wrote If you need to do for example if you want to process a big file for example you",
    "start": "685000",
    "end": "692000"
  },
  {
    "text": "can pass all the events that GitHub is producing hour by hour using the GitHub",
    "start": "692000",
    "end": "698600"
  },
  {
    "text": "archive this is a new line delimited Json file so each line is a Json and you",
    "start": "698600",
    "end": "703959"
  },
  {
    "text": "can use a stream to process those big files that are currently two one between",
    "start": "703959",
    "end": "709760"
  },
  {
    "text": "maybe 300 mags and zip which is big files and you can read them line by line",
    "start": "709760",
    "end": "715959"
  },
  {
    "text": "so you don't have to allocate 300 megabyte of ram in your system because",
    "start": "715959",
    "end": "722120"
  },
  {
    "text": "this will probably make the probably your not process to be very slow or crash if the file is too big okay so you",
    "start": "722120",
    "end": "730079"
  },
  {
    "text": "can instead just be alerted when a new line comes in and deal with them one by one essentially yes that's it so",
    "start": "730079",
    "end": "737240"
  },
  {
    "text": "basically you tell the Sim start and then you can use a module like split two",
    "start": "737240",
    "end": "742360"
  },
  {
    "text": "um that will actually load the file line by line and will you basically take you can",
    "start": "742360",
    "end": "749800"
  },
  {
    "text": "pipe it to a stream for example to read a file use fs. creat read stream and",
    "start": "749800",
    "end": "755639"
  },
  {
    "text": "then you pipe it to split two which will split it to line by line and then at the",
    "start": "755639",
    "end": "761040"
  },
  {
    "text": "end of it you will have a line so you can then consume this line in any way",
    "start": "761040",
    "end": "766079"
  },
  {
    "text": "you want you can use some other stream to write it to another file or you can",
    "start": "766079",
    "end": "772399"
  },
  {
    "text": "process Le that one to one to store it in a database or whatever does it make sense yeah so essentially what I'm",
    "start": "772399",
    "end": "779480"
  },
  {
    "text": "hearing is pretty much anything that's going to be dealing with data is likely",
    "start": "779480",
    "end": "785120"
  },
  {
    "text": "going to use the stream because it wants to allow for the fact that you might have a lot more data than you want to",
    "start": "785120",
    "end": "790680"
  },
  {
    "text": "deal with in memory essentially yes uh also for example if you already building",
    "start": "790680",
    "end": "796000"
  },
  {
    "text": "a web app and you're receiving a file from an end user using a multi-art request so you know a file upload MH if",
    "start": "796000",
    "end": "804360"
  },
  {
    "text": "you're doing that then if you want to support that then you're receiving a stream on the other side because you a",
    "start": "804360",
    "end": "812360"
  },
  {
    "text": "user can upload 10 megabyte of data or 100 megabyte of data and you don't want your application to be stop waiting for",
    "start": "812360",
    "end": "819440"
  },
  {
    "text": "that data to receive all those data and to be in memory before starting to process them because you might want to",
    "start": "819440",
    "end": "824480"
  },
  {
    "text": "store it to disc immediately otherwise you might end up filling up your memory",
    "start": "824480",
    "end": "829800"
  },
  {
    "text": "and you now have a nice security vulnerability yeah so I'm curious to",
    "start": "829800",
    "end": "835519"
  },
  {
    "text": "explore so you you said you got into node because you were interested in streaming data what were some of the",
    "start": "835519",
    "end": "841600"
  },
  {
    "text": "prior art pieces that inspired node streams what was done before that then",
    "start": "841600",
    "end": "847759"
  },
  {
    "text": "influenced how node streams came to be you know I don't have that answer for you I admit my ignorance here I don't",
    "start": "847759",
    "end": "854560"
  },
  {
    "text": "know yeah no worries so you know the key prior art I think is UNIX pipes and a",
    "start": "854560",
    "end": "860000"
  },
  {
    "text": "lot of what node streams are are our Unix pipe are designed at a very high",
    "start": "860000",
    "end": "865399"
  },
  {
    "text": "level that's actually a really interesting metaphor so if you're familiar with piping things around Unix",
    "start": "865399",
    "end": "871399"
  },
  {
    "text": "and thinking about things in that way translating to a stream architecture within node should be relatively",
    "start": "871399",
    "end": "878720"
  },
  {
    "text": "straightforward yes exactly so maybe now we can dive in a little bit because I think you know you mentioned that some",
    "start": "878720",
    "end": "885360"
  },
  {
    "text": "things are getting changed and I know there is recently a new standard what WG put out a stream standard I also",
    "start": "885360",
    "end": "892959"
  },
  {
    "text": "remember hearing James Snell talk about doing some sort of lower level type",
    "start": "892959",
    "end": "898320"
  },
  {
    "text": "streams implement ation as a part of his work when he was working on htb2 in node so kind of what's going on in terms of",
    "start": "898320",
    "end": "905079"
  },
  {
    "text": "evolving this concept and standard within node so there are two things here",
    "start": "905079",
    "end": "910120"
  },
  {
    "text": "you talked a lot of different things so the first one that you mention is the relationship between node and node",
    "start": "910120",
    "end": "918600"
  },
  {
    "text": "streams and what WG streams the result is that node become big and the node",
    "start": "918600",
    "end": "924279"
  },
  {
    "text": "streams happen to exist um before uh what wouldi streams",
    "start": "924279",
    "end": "930079"
  },
  {
    "text": "so not streams are prior art of what w streams and what wouldi streams learn",
    "start": "930079",
    "end": "935800"
  },
  {
    "text": "from a lot of our mistakes to some extent which is a good thing yeah but",
    "start": "935800",
    "end": "940959"
  },
  {
    "text": "this also mean they not become very big and everybody started using those and it means that we cannot change them we",
    "start": "940959",
    "end": "946480"
  },
  {
    "text": "cannot drop them so you cannot say that people can use what WG streams",
    "start": "946480",
    "end": "952319"
  },
  {
    "text": "essentially because that will not be possible there is this will be a lot of work anyway and you know building a",
    "start": "952319",
    "end": "958959"
  },
  {
    "text": "completely different new set of apis for all the things that I mentioned that you know are not currently part of the node",
    "start": "958959",
    "end": "965120"
  },
  {
    "text": "community so it will be a Gant to an effort and if somebody wants to be involved in helping out in delivering",
    "start": "965120",
    "end": "972079"
  },
  {
    "text": "some form of what G streams compatibility I will be very happy to help them develop this for no. JS but at",
    "start": "972079",
    "end": "979040"
  },
  {
    "text": "this point in time is a little bit too much work for for the community to take on are what WG streams right now there",
    "start": "979040",
    "end": "987120"
  },
  {
    "text": "as a spec or as a stand are they actually implemented anywhere",
    "start": "987120",
    "end": "993519"
  },
  {
    "text": "either within or outside of node like does somebody have a library for this or are they uh implemented in browsers",
    "start": "993519",
    "end": "999959"
  },
  {
    "text": "there is a library for it they're implemented in browsers there is a library for it to integrate it with no.",
    "start": "999959",
    "end": "1005319"
  },
  {
    "text": "JS essentially but you know there is not much compatibility overall is it true",
    "start": "1005319",
    "end": "1011600"
  },
  {
    "text": "that the browsers fetch is based on whatwg streams true that's the main usage of whatwg streams yes got it so",
    "start": "1011600",
    "end": "1019480"
  },
  {
    "text": "just to reiterate to make sure I understood so what WG streams are a new standard that learned a lot from node",
    "start": "1019480",
    "end": "1026438"
  },
  {
    "text": "streams fix some of the mistakes but are not API compatible they are implemented in browsers so we have essentially",
    "start": "1026439",
    "end": "1033678"
  },
  {
    "text": "bifurcated how to deal with streams because I don't think node streams are implemented in browsers anywhere you can",
    "start": "1033679",
    "end": "1039438"
  },
  {
    "text": "use them in browsers if you want to but there is no HTTP API to call for example",
    "start": "1039439",
    "end": "1045280"
  },
  {
    "text": "is not an equivalent for fetch for because that's native in the browser s right in the environment that the",
    "start": "1045280",
    "end": "1051240"
  },
  {
    "text": "browser gives you got it do you see over time those Recon converging in some way",
    "start": "1051240",
    "end": "1058240"
  },
  {
    "text": "like it's impossible no okay so what what do we do here oh so what we can do",
    "start": "1058240",
    "end": "1064640"
  },
  {
    "text": "we can develop some sort of compatibility layers so that you know if somebody wanted to write isomorphic code",
    "start": "1064640",
    "end": "1070880"
  },
  {
    "text": "could potentially convert one to the other but my take is in fact that both",
    "start": "1070880",
    "end": "1076559"
  },
  {
    "text": "streams API are extremely too complex for end users and developers in",
    "start": "1076559",
    "end": "1083360"
  },
  {
    "text": "general so essentially it's a an abstraction that is too complex and",
    "start": "1083360",
    "end": "1089480"
  },
  {
    "text": "application developers don't want to C for most of those cases and in fact whenever they they have the chance they",
    "start": "1089480",
    "end": "1095120"
  },
  {
    "text": "will make mistakes and they've seen so many mistakes using streams because it's a very complex API but theyve also seen",
    "start": "1095120",
    "end": "1100600"
  },
  {
    "text": "mistakes using what G streams as well so it's very complex it's a very complex",
    "start": "1100600",
    "end": "1106559"
  },
  {
    "text": "way of dealing with data mhm truth is my personal opinion is that we should in",
    "start": "1106559",
    "end": "1113240"
  },
  {
    "text": "fact not aim to be compatible between each other but directly but instead use",
    "start": "1113240",
    "end": "1118480"
  },
  {
    "text": "a common lingua franka which would tend to be in my opinion as syn iterators as syn iterators are great and node stream",
    "start": "1118480",
    "end": "1126000"
  },
  {
    "text": "supports them and there was some changes to what streams last year to have them",
    "start": "1126000",
    "end": "1132280"
  },
  {
    "text": "as well in that spec I don't know if that is shipped in the browser or not this maybe I'm just completely",
    "start": "1132280",
    "end": "1137760"
  },
  {
    "text": "misremembering but I've vaguely recall watching a a talk by James uh Snell about where he started talking about oh",
    "start": "1137760",
    "end": "1144559"
  },
  {
    "text": "yeah we're doing another sort of lower level implementation as a part of doing htb2 that might then get moved into node",
    "start": "1144559",
    "end": "1151880"
  },
  {
    "text": "streams or something do am I just imagining this or do you know what I'm talking about Mato um so yes I know very",
    "start": "1151880",
    "end": "1157480"
  },
  {
    "text": "well because I was involved in some of the designs of http2 um however what James was talking",
    "start": "1157480",
    "end": "1163480"
  },
  {
    "text": "about was talking about something that is one level down our public API of",
    "start": "1163480",
    "end": "1168919"
  },
  {
    "text": "streams essentially one of the key challenge for node streams is that abstraction some part of that",
    "start": "1168919",
    "end": "1174600"
  },
  {
    "text": "abstraction is also implemented in C+ plus and c and because of that you know",
    "start": "1174600",
    "end": "1180039"
  },
  {
    "text": "there is a lot of it's too complex and it does too much and it's um hard to",
    "start": "1180039",
    "end": "1185760"
  },
  {
    "text": "work with and maintain and on top of that also performance is a problem so",
    "start": "1185760",
    "end": "1192080"
  },
  {
    "text": "James wanted to do something more lean that could actually flow data faster from C++ to JavaScript and",
    "start": "1192080",
    "end": "1199190"
  },
  {
    "text": "[Music]",
    "start": "1199190",
    "end": "1205240"
  },
  {
    "text": "ver this episode is brought to you by lenoe our Cloud Server of choice it is so easy to get started with lenoe",
    "start": "1205240",
    "end": "1211559"
  },
  {
    "text": "servers start at just five bucks a month we host change log on Lino Cloud servers and we love it we get great 24/7 support",
    "start": "1211559",
    "end": "1218760"
  },
  {
    "text": "Zeus like Powers with Native ssds a super fast 40 GB per second Network and",
    "start": "1218760",
    "end": "1225039"
  },
  {
    "text": "Incredibly fast CPUs for processing and we trust L because they keep it fast they keep it simple check them out at",
    "start": "1225039",
    "end": "1231679"
  },
  {
    "text": "lin.com",
    "start": "1231679",
    "end": "1234320"
  },
  {
    "text": "[Laughter] [Music]",
    "start": "1236720",
    "end": "1240210"
  },
  {
    "text": "[Music] changelog so digging back in you mentioned the word async uh before we",
    "start": "1242270",
    "end": "1248120"
  },
  {
    "text": "move on to async generators uh and iterators but you also mentioned that",
    "start": "1248120",
    "end": "1253240"
  },
  {
    "text": "the fetch API is based on what WG streams and so I'm I'm curious if any is the relation ship between streams and",
    "start": "1253240",
    "end": "1260039"
  },
  {
    "text": "promises and does it differ between what WG streams and node streams okay this is",
    "start": "1260039",
    "end": "1266159"
  },
  {
    "text": "a very interesting question and I have a nice answer for you so node streams are",
    "start": "1266159",
    "end": "1271760"
  },
  {
    "text": "based on aventer and what streams are based on promises and mixing eventer and",
    "start": "1271760",
    "end": "1278760"
  },
  {
    "text": "promises you make some very nice pop card you know don't try it at home",
    "start": "1278760",
    "end": "1284960"
  },
  {
    "text": "interesting essentially that's the key part or at least that's a little bit true the answer was before node 10 if",
    "start": "1284960",
    "end": "1293440"
  },
  {
    "text": "you try it at home you will have a very bad experience because I not 10 we had the support from ASN iterators then you",
    "start": "1293440",
    "end": "1300559"
  },
  {
    "text": "might have a way better experience right now okay than before so historically if",
    "start": "1300559",
    "end": "1305760"
  },
  {
    "text": "you search for an historical guide on not streams that use doesn't use the new stuff that we added in the last um year",
    "start": "1305760",
    "end": "1313520"
  },
  {
    "text": "and year and a half or something like that it's uh you would have a very very bad experience",
    "start": "1313520",
    "end": "1319120"
  },
  {
    "text": "and with resulting on memory leaks uh with like going to the memory leak",
    "start": "1319120",
    "end": "1324240"
  },
  {
    "text": "territory in a matter of minutes interesting so let me think through that",
    "start": "1324240",
    "end": "1329520"
  },
  {
    "text": "because I'm I'm trying to make sure I understand so node streams you said are based on event emitters yep then the way",
    "start": "1329520",
    "end": "1337480"
  },
  {
    "text": "that's working is you're you're essentially conceptually you're registering a listener that gets called",
    "start": "1337480",
    "end": "1342960"
  },
  {
    "text": "multiple times yes and then what WG streams which I have not looked into in",
    "start": "1342960",
    "end": "1348320"
  },
  {
    "text": "great detail you said are are based on promises how does that end up does that mean that you're basically you're doing",
    "start": "1348320",
    "end": "1353960"
  },
  {
    "text": "do then on them in some way yes you're you done then you're using a board controller to cancel it and control the",
    "start": "1353960",
    "end": "1360440"
  },
  {
    "text": "stuff and it has a very complex API more or less to deal with you know processing",
    "start": "1360440",
    "end": "1366520"
  },
  {
    "text": "chunks and so on and so forth so the key problem between one and the other is how you structure your application so wither",
    "start": "1366520",
    "end": "1374279"
  },
  {
    "text": "is the system that calls you okay when you need to use a promise you call the promise to get the value okay oh",
    "start": "1374279",
    "end": "1381720"
  },
  {
    "text": "interesting so do you have to keep recalling to get new promises then so because your promise is going to be",
    "start": "1381720",
    "end": "1387440"
  },
  {
    "text": "resolved it's a little bit more complicated but yes essentially yes so you it's a very basic level of you know",
    "start": "1387440",
    "end": "1394279"
  },
  {
    "text": "on emits multiple events at the same time but a promise only gives you one",
    "start": "1394279",
    "end": "1399360"
  },
  {
    "text": "and this is the core difference between promises and event meter okay so",
    "start": "1399360",
    "end": "1405000"
  },
  {
    "text": "essentially the fact that they're based on very different building blocks yeah means you know this percolates in a",
    "start": "1405000",
    "end": "1412440"
  },
  {
    "text": "huge amount of fashion so the protocol is very different it's the same concept and the same logic most of the time is",
    "start": "1412440",
    "end": "1420000"
  },
  {
    "text": "just very different yeah because of one is based on eventers one is based on",
    "start": "1420000",
    "end": "1426840"
  },
  {
    "text": "eventers and the other one is built upon promises so in one sense we could emit an event to get some data processed",
    "start": "1426840",
    "end": "1434799"
  },
  {
    "text": "while on the other side they will probably call a method that returns a promise so the flow is completely",
    "start": "1434799",
    "end": "1441240"
  },
  {
    "text": "different so in one case in order to get a function called I register a function called in the other side the function",
    "start": "1441240",
    "end": "1446279"
  },
  {
    "text": "gets I pass an object and that gets C it's completely different it's a different approach to the same topic so",
    "start": "1446279",
    "end": "1453120"
  },
  {
    "text": "it's essentially mixing the promises and EV meter you end up with some really bad",
    "start": "1453120",
    "end": "1461159"
  },
  {
    "text": "things in there yeah yeah I'm trying to think about you you would so in the event emitter approach like the system",
    "start": "1461159",
    "end": "1467720"
  },
  {
    "text": "is handed l what is essentially an event Loop right it's calling over and over again in the promises approach the if you have an",
    "start": "1467720",
    "end": "1474320"
  },
  {
    "text": "event loop it's in user space where you're coming back and you're calling that promise over and over again yeah",
    "start": "1474320",
    "end": "1479679"
  },
  {
    "text": "yeah huh interesting and also there is one more thing that event emitter in",
    "start": "1479679",
    "end": "1485720"
  },
  {
    "text": "event emiter when you know somebody emits an event that event is emitted synchronously while promises are always",
    "start": "1485720",
    "end": "1492399"
  },
  {
    "text": "delayed with the microtask Q so just confuse things a little bit more because we was not we were not confused enough",
    "start": "1492399",
    "end": "1499360"
  },
  {
    "text": "and essentially trying to reconcile those two words and provide a better API",
    "start": "1499360",
    "end": "1505000"
  },
  {
    "text": "it's has been a very tough Challenge and this is where for me as synchronous",
    "start": "1505000",
    "end": "1510760"
  },
  {
    "text": "iterators come in and more or less solves most of the problems I guess digging into how async iterators helps",
    "start": "1510760",
    "end": "1518159"
  },
  {
    "text": "to make working with event based streams easier and kind of tying off of what cable had said is it with that it's just",
    "start": "1518159",
    "end": "1525039"
  },
  {
    "text": "a cleaner syntax being able to like 408 and run that Loop still in user space is",
    "start": "1525039",
    "end": "1530440"
  },
  {
    "text": "that what makes it easier or can you dig into how async iterators help to so",
    "start": "1530440",
    "end": "1536080"
  },
  {
    "text": "aerator is essentially a specification for an object uh so this object has some",
    "start": "1536080",
    "end": "1542720"
  },
  {
    "text": "very key methods one of this is next and next return a promise that we return the",
    "start": "1542720",
    "end": "1549480"
  },
  {
    "text": "next data that will be read by the stream now there is a catch in here",
    "start": "1549480",
    "end": "1555080"
  },
  {
    "text": "because it all it will also error it needs to throw and it need to that promise needs to reject if we are if the",
    "start": "1555080",
    "end": "1562679"
  },
  {
    "text": "streams is as an eror on itself or something like that does it make sense I think so okay so at that point in time",
    "start": "1562679",
    "end": "1570880"
  },
  {
    "text": "how do we reconcile this so typically people in node.js can consume stream using the on data event or using the",
    "start": "1570880",
    "end": "1577600"
  },
  {
    "text": "readable event are you familiar with the readable event let's cover it just in case because while we may be not",
    "start": "1577600",
    "end": "1583559"
  },
  {
    "text": "everybody listening will be not everybody listening yeah that's true so unreadable what readable does the",
    "start": "1583559",
    "end": "1589760"
  },
  {
    "text": "developer oh there is some data available to be read and then the developer needs to call do read to",
    "start": "1589760",
    "end": "1595960"
  },
  {
    "text": "consume that data now there is also the on error event where an error might pop",
    "start": "1595960",
    "end": "1602000"
  },
  {
    "text": "up and this is where the problem of mixing those between promise between you know event meter and Promises comes back",
    "start": "1602000",
    "end": "1609440"
  },
  {
    "text": "bites back because you have in in in eventer with the eventer you have the",
    "start": "1609440",
    "end": "1614640"
  },
  {
    "text": "error and data being moved in between in on two different channels while on",
    "start": "1614640",
    "end": "1621120"
  },
  {
    "text": "promises they come on the same promise oh and this is why it makes popcorn yeah",
    "start": "1621120",
    "end": "1627520"
  },
  {
    "text": "yeah okay and uh uh and trying to reconcile this and making sure that it",
    "start": "1627520",
    "end": "1636399"
  },
  {
    "text": "has uh enough that you know providing a cohesive API is very hard and if you",
    "start": "1636399",
    "end": "1641960"
  },
  {
    "text": "look at our implementation you will probably scream because it's you know it's it's really intense let me use an",
    "start": "1641960",
    "end": "1649159"
  },
  {
    "text": "nice term it's intense and it's very hard to get right and you know we had bugs we had some",
    "start": "1649159",
    "end": "1654720"
  },
  {
    "text": "bugs and so on and so forth before you know marking it stable and safe to use so it was marked stable I think at the",
    "start": "1654720",
    "end": "1661240"
  },
  {
    "text": "beginning of this year or something like that so is now stable on both Note 10 and note 12 and note 13 of course so you",
    "start": "1661240",
    "end": "1668159"
  },
  {
    "text": "can use that safely and essentially what we do is we use the readable event so",
    "start": "1668159",
    "end": "1673919"
  },
  {
    "text": "the readable event comes up it say signal that there is some data available and then we call the read method on node",
    "start": "1673919",
    "end": "1679640"
  },
  {
    "text": "streams to read all the values that are available and cue them up to be consumed",
    "start": "1679640",
    "end": "1686279"
  },
  {
    "text": "by the next when you call next so essentially it will consume all the data that comes from next that you call in",
    "start": "1686279",
    "end": "1693159"
  },
  {
    "text": "next and that will be it and it works and you can now instead of doing that so",
    "start": "1693159",
    "end": "1699519"
  },
  {
    "text": "instead of using complex on readable or on data H that's very hard and eror prone in a promise based word what you",
    "start": "1699519",
    "end": "1707000"
  },
  {
    "text": "can do you can just do a for a weight Loop because with for a weight the JavaScript syntax would automatically",
    "start": "1707000",
    "end": "1713000"
  },
  {
    "text": "call next for us so we don't have to call it manually and it provides a nice syntax on top of this protocol and you",
    "start": "1713000",
    "end": "1720960"
  },
  {
    "text": "can then just iterate over your stream just using JavaScript syntax so you don't have to think about you know",
    "start": "1720960",
    "end": "1728000"
  },
  {
    "text": "complex apis and anything you can just use JavaScript which is",
    "start": "1728000",
    "end": "1735518"
  },
  {
    "text": "fantastic [Music]",
    "start": "1737039",
    "end": "1752579"
  },
  {
    "text": "how often do you think about internal tooling I'm talking about the back office apps the tool the customer",
    "start": "1752720",
    "end": "1758360"
  },
  {
    "text": "service team uses to access your databases the S3 uploader you built last year for the marketing team that quick",
    "start": "1758360",
    "end": "1765039"
  },
  {
    "text": "Firebase admin panel that lets you monitor key kpi and maybe even the tool that your data",
    "start": "1765039",
    "end": "1770720"
  },
  {
    "text": "science team had together so they can provide custom ad spend insights literally every line of business relies",
    "start": "1770720",
    "end": "1776840"
  },
  {
    "text": "upon internal tooling but if I'm being honest I don't know many Engineers out there who enjoy building internal tools",
    "start": "1776840",
    "end": "1783320"
  },
  {
    "text": "let alone getting them excited about maintaining or even supporting them and this is where reto comes in companies",
    "start": "1783320",
    "end": "1790080"
  },
  {
    "text": "like door Dash brex plat and even Amazon they use retool to build internal",
    "start": "1790080",
    "end": "1795440"
  },
  {
    "text": "tooling super fast the idea is that almost all internal tools look the same they're made of tables drop downs",
    "start": "1795440",
    "end": "1802039"
  },
  {
    "text": "buttons text inputs and retool gives you a point click drag and drop interface that makes it super simple to build",
    "start": "1802039",
    "end": "1808360"
  },
  {
    "text": "these types of interfaces in hours not days retool connects to any database or",
    "start": "1808360",
    "end": "1813440"
  },
  {
    "text": "API for example to pull data from postgress just write a SQL query and drag and drop a table onto the canvas",
    "start": "1813440",
    "end": "1820880"
  },
  {
    "text": "and if you want to search across those fields add a search input bar and update your query save it share it it's too",
    "start": "1820880",
    "end": "1828039"
  },
  {
    "text": "easy retool is built by Engineers explicitly for engineers and for those concerned about data security retool can",
    "start": "1828039",
    "end": "1834880"
  },
  {
    "text": "even be set up on premise in about 15 minutes using Docker kubernetes or Hoku",
    "start": "1834880",
    "end": "1840240"
  },
  {
    "text": "learn more and try it free at retool docomo again ret.com",
    "start": "1840240",
    "end": "1847440"
  },
  {
    "text": "[Music]",
    "start": "1848600",
    "end": "1851669"
  },
  {
    "text": "[Music] changelog",
    "start": "1854530",
    "end": "1859919"
  },
  {
    "text": "so this reminds me a little bit of a concept when we first started dealing a lot with promises and this concept of",
    "start": "1860080",
    "end": "1866679"
  },
  {
    "text": "asynchronicity one of the things that came up was you can wrap a synchronous API in a promise to create a consistent",
    "start": "1866679",
    "end": "1874279"
  },
  {
    "text": "asynchronous API right the the asynchronous consumer doesn't actually care if it's getting something that was",
    "start": "1874279",
    "end": "1880080"
  },
  {
    "text": "really synchronous under the hood whereas going the other way is really hard so in some ways this strikes me as",
    "start": "1880080",
    "end": "1886000"
  },
  {
    "text": "you're doing kind of the same thing but in this case for batched streamed data right you're wrapping this uh sort of",
    "start": "1886000",
    "end": "1892279"
  },
  {
    "text": "batched synchronicity that you get from the streams API into an asynchronous",
    "start": "1892279",
    "end": "1898480"
  },
  {
    "text": "iterator well it's slightly different than this so it's there is a stream is",
    "start": "1898480",
    "end": "1904760"
  },
  {
    "text": "by nature it's a synchronous and I'm just transforming this from being event",
    "start": "1904760",
    "end": "1910120"
  },
  {
    "text": "based on one side to be promise based on the other and in order to do this",
    "start": "1910120",
    "end": "1918440"
  },
  {
    "text": "we need to use the pool based API which is this readable event to get to read the data from the stream that's",
    "start": "1918440",
    "end": "1925399"
  },
  {
    "text": "fantastic but on the other side we need also to you know batch those data that",
    "start": "1925399",
    "end": "1930480"
  },
  {
    "text": "we read in promises because you know when we are doing a for a weight Loop there are two basic situation that can",
    "start": "1930480",
    "end": "1937120"
  },
  {
    "text": "happen either there is some data on the stream to be read or there is not and if",
    "start": "1937120",
    "end": "1943440"
  },
  {
    "text": "there is we can just return a promise that automatically resolve with that data or if there is not we need to",
    "start": "1943440",
    "end": "1949440"
  },
  {
    "text": "return a promise and then you know when that data will become available put into the promise and deliver it to to the",
    "start": "1949440",
    "end": "1956159"
  },
  {
    "text": "code and you know essentially we pull we pull data and we WRA it in promises now",
    "start": "1956159",
    "end": "1962720"
  },
  {
    "text": "there's the third case is that the third case is the stream has error and error",
    "start": "1962720",
    "end": "1967799"
  },
  {
    "text": "in streams are syn happens they are emitted immediately when they happen",
    "start": "1967799",
    "end": "1974279"
  },
  {
    "text": "while in this mode we will need to wait until the next call the next round of",
    "start": "1974279",
    "end": "1980000"
  },
  {
    "text": "the loop to forward that event to the user which is a significant change in",
    "start": "1980000",
    "end": "1985519"
  },
  {
    "text": "our you know the system the in in the order of events and the flow and the",
    "start": "1985519",
    "end": "1991440"
  },
  {
    "text": "developer API essentially I have a couple questions on that can a stream recover from an error like can it issue",
    "start": "1991440",
    "end": "1997440"
  },
  {
    "text": "an error and then have subsequent data or no once there's an error we're done well no it's a little bit more",
    "start": "1997440",
    "end": "2003360"
  },
  {
    "text": "complicated than that so it's down to how the stream is implemented so this is true for not Co streams but it's not",
    "start": "2003360",
    "end": "2010639"
  },
  {
    "text": "necessarily true for everybody everything else okay because it's a leak abstraction you see so you know we are",
    "start": "2010639",
    "end": "2017039"
  },
  {
    "text": "trying to fix those slowly but it's taking a significant amount of time so okay so you while for node core streams",
    "start": "2017039",
    "end": "2024320"
  },
  {
    "text": "and error means you're done that is not necessarily true of all streams and then",
    "start": "2024320",
    "end": "2030120"
  },
  {
    "text": "is there an ordering different so imagine from a stream I'm getting five",
    "start": "2030120",
    "end": "2035279"
  },
  {
    "text": "promises and in the streaming world I would get those five data and then there's an error and I would process",
    "start": "2035279",
    "end": "2040960"
  },
  {
    "text": "that in order so I'd process the five pieces of data and then I would process the error now when we wrap this up as an",
    "start": "2040960",
    "end": "2046399"
  },
  {
    "text": "async generator we may not have consumed all that data do we still have the same order like if we have put those five",
    "start": "2046399",
    "end": "2053200"
  },
  {
    "text": "pieces of data in but we've only consumed one and now we get an error is",
    "start": "2053200",
    "end": "2058960"
  },
  {
    "text": "the next thing we consume going to be another piece of data or is it going to be the error it's going to be the error",
    "start": "2058960",
    "end": "2064240"
  },
  {
    "text": "interesting so we changed the ordering a little bit it Chang changes the ordering a little bit yes because at that point",
    "start": "2064240",
    "end": "2070040"
  },
  {
    "text": "in time the stream has been errored and uh essentially if you're not consuming",
    "start": "2070040",
    "end": "2075679"
  },
  {
    "text": "the data so the the point is the data is there and if you're not consuming it if",
    "start": "2075679",
    "end": "2081480"
  },
  {
    "text": "this if the socket gets down the error will be presented to you on the next read in order to keep the",
    "start": "2081480",
    "end": "2087679"
  },
  {
    "text": "memory the consumed memory in constant essentially and as little as possible",
    "start": "2087679",
    "end": "2094079"
  },
  {
    "text": "the syn aerator is not pulling data from the string for you and queueing and queuing it for you it's essentially",
    "start": "2094079",
    "end": "2100960"
  },
  {
    "text": "reading only as much data that you are asking to read so essentially there are",
    "start": "2100960",
    "end": "2108000"
  },
  {
    "text": "situation where the amount of two different implementation will have different ordering yeah yeah but in",
    "start": "2108000",
    "end": "2114520"
  },
  {
    "text": "other terms it's just that you with a syn aerator the a syn aerator model fits",
    "start": "2114520",
    "end": "2123400"
  },
  {
    "text": "it's way more ergonomic and from my point of view if your application is relying on the fact that you know you",
    "start": "2123400",
    "end": "2130880"
  },
  {
    "text": "are relying on this you probably some bugs in your code essentially in your",
    "start": "2130880",
    "end": "2136359"
  },
  {
    "text": "error handling because if a socket errors you know it doesn't shouldn't",
    "start": "2136359",
    "end": "2141800"
  },
  {
    "text": "really matter these type of things so you shouldn't really want to process those meth those data that is lingering",
    "start": "2141800",
    "end": "2147560"
  },
  {
    "text": "and because otherwise you will be you know you probably might have C problems anyway if you're sending a file that",
    "start": "2147560",
    "end": "2153920"
  },
  {
    "text": "will be truncated so what what the heck you're doing if you're sending some messages you definitely have an error",
    "start": "2153920",
    "end": "2160119"
  },
  {
    "text": "situation you know it's not end okay it's not the stream has ended right yeah",
    "start": "2160119",
    "end": "2165319"
  },
  {
    "text": "it's not the same as end so yeah that is interesting though because it it creates a leaky abstraction where if someone had",
    "start": "2165319",
    "end": "2171839"
  },
  {
    "text": "been assuming that that was ordered and said okay I'm going to pretend that certain types of errors are kind of just",
    "start": "2171839",
    "end": "2178079"
  },
  {
    "text": "ways of communicating data along with an end that suddenly breaks because that's",
    "start": "2178079",
    "end": "2183319"
  },
  {
    "text": "not a valid assumption no absolutely not essentially not errors in node.js are",
    "start": "2183319",
    "end": "2189000"
  },
  {
    "text": "really bad things you know nodejs has this assumption and you can see that in the old error back model where errors",
    "start": "2189000",
    "end": "2196520"
  },
  {
    "text": "are really really important things it's not you know application is missing some",
    "start": "2196520",
    "end": "2202760"
  },
  {
    "text": "data an error is this is big you know a socket has been destroyed there you know",
    "start": "2202760",
    "end": "2208680"
  },
  {
    "text": "a so the other party destroyed the socket right or you know there's been there's no network card anymore that",
    "start": "2208680",
    "end": "2214800"
  },
  {
    "text": "burned a file that was supposed to be there does not exist yeah it's an interesting example of that I mean",
    "start": "2214800",
    "end": "2221200"
  },
  {
    "text": "that's something that is not uh essentially convention right how the conventions of the project carry through",
    "start": "2221200",
    "end": "2226800"
  },
  {
    "text": "into what you can expect to remain consistent versus not yes essentially yes it's a fascinating world isn't it",
    "start": "2226800",
    "end": "2234319"
  },
  {
    "text": "yeah yeah yeah definitely and it it seems very useful even in places I didn't realize I was using streams it's",
    "start": "2234319",
    "end": "2240480"
  },
  {
    "text": "really cool cool to see that and it's cool to see how much care is put into not breaking that very dependent",
    "start": "2240480",
    "end": "2247680"
  },
  {
    "text": "dependent upon API yeah that's the problem right not breaking it where do you see it going in the future do you",
    "start": "2247680",
    "end": "2253599"
  },
  {
    "text": "see like if there were to be new stream based apis generated do you would they be based on the node.js streams or do",
    "start": "2253599",
    "end": "2260880"
  },
  {
    "text": "you think uh in node specifically do you think they'd be based on this API or do you think that they would try and",
    "start": "2260880",
    "end": "2266880"
  },
  {
    "text": "Implement something else like the wwg streams My overall take is doing a",
    "start": "2266880",
    "end": "2271960"
  },
  {
    "text": "stream based API is extremely hard and extremely very hard to use because you know people of fetch nobody very few",
    "start": "2271960",
    "end": "2279280"
  },
  {
    "text": "people use streams in Fetch most people use Fetch with do Json yeah in fact you",
    "start": "2279280",
    "end": "2285200"
  },
  {
    "text": "know if you use node fetch as everybody building isomorphic application is doing",
    "start": "2285200",
    "end": "2290720"
  },
  {
    "text": "it's not no fetch doesn't use what we G streams and nobody very few people",
    "start": "2290720",
    "end": "2296040"
  },
  {
    "text": "notice yeah so it's an interesting point of you know most folks are not interacting down at the level of the",
    "start": "2296040",
    "end": "2301839"
  },
  {
    "text": "streams API um so for dealing with all these sort of existing situations where",
    "start": "2301839",
    "end": "2309319"
  },
  {
    "text": "streams are deeply embedded do you see folks building a kind of layer on top",
    "start": "2309319",
    "end": "2315319"
  },
  {
    "text": "using async iterators we already have one okay which is for me is a sync",
    "start": "2315319",
    "end": "2321880"
  },
  {
    "text": "iterator yeah essentially it's a basic compatibility layer for that problem",
    "start": "2321880",
    "end": "2327839"
  },
  {
    "text": "that is simple enough essentially to be you know implemented on both side with",
    "start": "2327839",
    "end": "2334520"
  },
  {
    "text": "the same semantic in fact we work when when we were working on our implementation we",
    "start": "2334520",
    "end": "2339680"
  },
  {
    "text": "have been working with uh tc39 and folks what would you to be sure that they had",
    "start": "2339680",
    "end": "2347560"
  },
  {
    "text": "similar behaviors and or similar Dash consistent behaviors between the two so",
    "start": "2347560",
    "end": "2353240"
  },
  {
    "text": "that if you have processing some code from Fetch or from HTTP Gat http.get in",
    "start": "2353240",
    "end": "2359839"
  },
  {
    "text": "node you might you know have similar code to handle the the data or something like that are there any pieces of",
    "start": "2359839",
    "end": "2367400"
  },
  {
    "text": "functionality or capabilities that are not handled by",
    "start": "2367400",
    "end": "2372680"
  },
  {
    "text": "that compatibility layer so yes there are and there are not we are working on",
    "start": "2372680",
    "end": "2378040"
  },
  {
    "text": "them so essentially the key challenge here is uh you might want I use these",
    "start": "2378040",
    "end": "2384640"
  },
  {
    "text": "type of things to move from one side to the other to some extent so essentially",
    "start": "2384640",
    "end": "2390079"
  },
  {
    "text": "you want you might want to combine right use a sync iterators and a sync generators to be able to to build and be",
    "start": "2390079",
    "end": "2398760"
  },
  {
    "text": "able to combine them with streams as much as you want and right now we have implemented you know uh that you can a",
    "start": "2398760",
    "end": "2405560"
  },
  {
    "text": "syn iterate a stream on one side but we cannot a syn",
    "start": "2405560",
    "end": "2410599"
  },
  {
    "text": "iterate like there is uh we can as sync itate a stream but we don't have",
    "start": "2410599",
    "end": "2416520"
  },
  {
    "text": "currently a model an automated model at least to convert that into a duplex for",
    "start": "2416520",
    "end": "2422520"
  },
  {
    "text": "example okay we have missing a little bit the duplex instrution and so on and so forth and we currently working on",
    "start": "2422520",
    "end": "2428280"
  },
  {
    "text": "some of those topics for example we have recently added readable. from which is an API that given an iterator or an A",
    "start": "2428280",
    "end": "2436280"
  },
  {
    "text": "sync iterator it will just use those API to write the data to to convert those",
    "start": "2436280",
    "end": "2442800"
  },
  {
    "text": "data and put those in a stream so in a node stream so that you can use you know pipe or the pipeline operator which is",
    "start": "2442800",
    "end": "2450560"
  },
  {
    "text": "not it's not this the pipeline API which is a different it's a higher level API",
    "start": "2450560",
    "end": "2455680"
  },
  {
    "text": "compared to pipe to combine those without having to do much work now this",
    "start": "2455680",
    "end": "2461880"
  },
  {
    "text": "is very powerful we are missing some equivalent for example for transform for the transform API there is a PR open",
    "start": "2461880",
    "end": "2467880"
  },
  {
    "text": "that needs to be refined a little bit and boxed off and finished got it so reading from screams",
    "start": "2467880",
    "end": "2473800"
  },
  {
    "text": "right now is well supported and what's still under development is essentially pushing things back from acing",
    "start": "2473800",
    "end": "2480400"
  },
  {
    "text": "generators into streams so that we can you know use piping and transferring and and all the sort of utilities that have",
    "start": "2480400",
    "end": "2486920"
  },
  {
    "text": "built up around that got it yes we are working on it right now so if you're interested I can put some PR links into",
    "start": "2486920",
    "end": "2493880"
  },
  {
    "text": "somewhere I think this would be great to to drop into the document so we can put them into our show notes yeah yes I'll",
    "start": "2493880",
    "end": "2500119"
  },
  {
    "text": "just find those for you great Nick I saw I think you put a question in here as",
    "start": "2500119",
    "end": "2505280"
  },
  {
    "text": "well about observables yeah I'm curious Mato if you if you know or is there a",
    "start": "2505280",
    "end": "2511839"
  },
  {
    "text": "relationship between the problems that streams try and solve and problems that observables try and solve and are they",
    "start": "2511839",
    "end": "2518079"
  },
  {
    "text": "related so In fairness observables are not really common in the node word or at",
    "start": "2518079",
    "end": "2524240"
  },
  {
    "text": "least not in what I use so they are relate but I'm not so familiar with them",
    "start": "2524240",
    "end": "2530599"
  },
  {
    "text": "to be able to say you know it's a very similar problem observables only C with the readable side of things to some",
    "start": "2530599",
    "end": "2537480"
  },
  {
    "text": "extent to the data meeting not also the writable side of things which is",
    "start": "2537480",
    "end": "2543119"
  },
  {
    "text": "important to some extent so that will be my main difference but it's a similar",
    "start": "2543119",
    "end": "2549160"
  },
  {
    "text": "problem to some extent gotcha so it's it's more that you with observables you",
    "start": "2549160",
    "end": "2554520"
  },
  {
    "text": "have to still ask for the values whereas streams would be calling you back",
    "start": "2554520",
    "end": "2559920"
  },
  {
    "text": "essentially yes very cool that was a fascinating Deep dive into the streams API the differences between the browser",
    "start": "2559920",
    "end": "2566440"
  },
  {
    "text": "implementation and the node implementation which has been around forever thank you for that as I learned",
    "start": "2566440",
    "end": "2572440"
  },
  {
    "text": "I use it a lot without realizing it and so that's really awesome Mato was is there anything else that you want to say",
    "start": "2572440",
    "end": "2579040"
  },
  {
    "text": "about streams there is one thing okay and it is a recommendation to everybody okay one of the greatest mistake when",
    "start": "2579040",
    "end": "2585839"
  },
  {
    "text": "using streams with uh a syn A8 and a synch and Promises is to uh use pass a",
    "start": "2585839",
    "end": "2594079"
  },
  {
    "text": "sync function into an event handler like for example on data and",
    "start": "2594079",
    "end": "2601160"
  },
  {
    "text": "then you do a sync function something in order to use a wait inside MH don't do",
    "start": "2601160",
    "end": "2606640"
  },
  {
    "text": "that don't at least right now the key challenge there is that it's Error",
    "start": "2606640",
    "end": "2612960"
  },
  {
    "text": "endling so the problem is that you know in the node in a stream word in order to",
    "start": "2612960",
    "end": "2618960"
  },
  {
    "text": "destroy to clean up that resource you need to call destroy on the stream and",
    "start": "2618960",
    "end": "2625280"
  },
  {
    "text": "in then a sync function can throw and the promise will reject but the problem",
    "start": "2625280",
    "end": "2630640"
  },
  {
    "text": "is that nobody right now is catching that rejection for you or doing something with it so itially what you",
    "start": "2630640",
    "end": "2637800"
  },
  {
    "text": "will end up will end up with likely a memory leak without not without you thinking this is the most normal thing",
    "start": "2637800",
    "end": "2644119"
  },
  {
    "text": "to do I'm currently working on a PR that actually does this that fix this problem",
    "start": "2644119",
    "end": "2650480"
  },
  {
    "text": "by automatically Landing a catch hander for you on event meter which is pretty cool and I would love to do that and",
    "start": "2650480",
    "end": "2657440"
  },
  {
    "text": "this is going to probably land in the next few weeks and but it will be you know optin and experimental for the",
    "start": "2657440",
    "end": "2663880"
  },
  {
    "text": "beginning very cool that is something that I wouldn't have thought about uh is that that error could nothing would be",
    "start": "2663880",
    "end": "2670040"
  },
  {
    "text": "handling it that's yeah so essentially that will create a memory leak yeah in",
    "start": "2670040",
    "end": "2677400"
  },
  {
    "text": "just a matter of in case of error it's very common you know if you're part receiving a a multi-art file on on a",
    "start": "2677400",
    "end": "2686359"
  },
  {
    "text": "HTTP API but with multiple key values and so on and so forth in one of those",
    "start": "2686359",
    "end": "2691680"
  },
  {
    "text": "cases it was using uh there was a there was some code that I found that at a memory leak because handling one of",
    "start": "2691680",
    "end": "2698200"
  },
  {
    "text": "those keys had uh had an await in it and it was throwing and nobody was catching it and then that data then was you know",
    "start": "2698200",
    "end": "2705200"
  },
  {
    "text": "the stre was not being progressed anymore so the request was stuck there and you were basically keeping an HTP",
    "start": "2705200",
    "end": "2710920"
  },
  {
    "text": "request without any response at all up until the time the timeout existed and that was you know exhausting the sockets",
    "start": "2710920",
    "end": "2717960"
  },
  {
    "text": "in the server and then you nobody could access your website",
    "start": "2717960",
    "end": "2723559"
  },
  {
    "text": "anymore yeah important things to think about I I know maybe it was really deep",
    "start": "2723559",
    "end": "2729079"
  },
  {
    "text": "okay so you know I typically do this with a lot of explanation with a lot of code examples because with code example",
    "start": "2729079",
    "end": "2736160"
  },
  {
    "text": "is very clear to understand what I'm talking about come to my talk there will be a lot of examples in code yeah it is",
    "start": "2736160",
    "end": "2743400"
  },
  {
    "text": "it I feel like um error handling with asynchronous code is something like",
    "start": "2743400",
    "end": "2750160"
  },
  {
    "text": "we've made asynchronous code feel so much easier now because we have all this sugar around it and",
    "start": "2750160",
    "end": "2757440"
  },
  {
    "text": "yet we're often not handling a lot of the additional or like a lot of the things that you would traditionally have",
    "start": "2757440",
    "end": "2763240"
  },
  {
    "text": "to worry about there essentially yes and there is also the fact that there's also",
    "start": "2763240",
    "end": "2769839"
  },
  {
    "text": "May a substantial difference between nodejs and the browser the browser has",
    "start": "2769839",
    "end": "2775400"
  },
  {
    "text": "one human in front and the server has you know hopefully many humans connected",
    "start": "2775400",
    "end": "2781480"
  },
  {
    "text": "to it through a browser or through a mobile app or whatever for and and this",
    "start": "2781480",
    "end": "2787440"
  },
  {
    "text": "changes things dramatically in how tight it needs to manage resources",
    "start": "2787440",
    "end": "2794680"
  },
  {
    "text": "because most of the web apps done leaks memory in one form or another and it",
    "start": "2794680",
    "end": "2800079"
  },
  {
    "text": "doesn't really matter because there is only one user using them and will maybe just if it crash if the tab crashes or",
    "start": "2800079",
    "end": "2807000"
  },
  {
    "text": "you know they need to restart Chrome from time to time is not such a big of a problem and they would this very few",
    "start": "2807000",
    "end": "2813839"
  },
  {
    "text": "application like Gmail that needs to run for days and you know that's one one case and on OJs instead you are not if",
    "start": "2813839",
    "end": "2822400"
  },
  {
    "text": "you leak memory you are in big trouble because then you can affect other users as well it's a big big big difference",
    "start": "2822400",
    "end": "2828800"
  },
  {
    "text": "there in the way the error out tight the error ending needs to be in one case versus another yeah well and I think",
    "start": "2828800",
    "end": "2835559"
  },
  {
    "text": "even in the browser world it's become much more important because increasingly you know it you know back",
    "start": "2835559",
    "end": "2843200"
  },
  {
    "text": "pre- single page app days you throw everything away and restart every new page yeah but now you have an",
    "start": "2843200",
    "end": "2849319"
  },
  {
    "text": "application that does all that navigation in JavaScript and you're keeping stuff around for much much",
    "start": "2849319",
    "end": "2856640"
  },
  {
    "text": "longer so you know memory usage is one of the big areas of of where I think we",
    "start": "2856640",
    "end": "2863119"
  },
  {
    "text": "need to both increase awareness and also increase our our sort of layers of tools",
    "start": "2863119",
    "end": "2868160"
  },
  {
    "text": "to make it easier to do right yes absolutely and the the one of the",
    "start": "2868160",
    "end": "2874280"
  },
  {
    "text": "problems in that that that I find conceptually that can be a problem is",
    "start": "2874280",
    "end": "2881079"
  },
  {
    "text": "how promises are specified and the how they work MH the beauty of a promise if",
    "start": "2881079",
    "end": "2888599"
  },
  {
    "text": "you call it that if you can see that way because it's also very fascinating it's like it's like shoting his cat and you",
    "start": "2888599",
    "end": "2895760"
  },
  {
    "text": "know you don't know if the cat is alive or dead until you open the box and you know and that that's a promise right",
    "start": "2895760",
    "end": "2903640"
  },
  {
    "text": "yeah that's funny and uh the problem is the the the the key thing is that given",
    "start": "2903640",
    "end": "2909680"
  },
  {
    "text": "a promise you don't know if it will ever resolve right or if anybody will ever",
    "start": "2909680",
    "end": "2916520"
  },
  {
    "text": "open that box and that is a key challenge for me because I don't know if",
    "start": "2916520",
    "end": "2922800"
  },
  {
    "text": "that promise will ever open a box then how can we handle error",
    "start": "2922800",
    "end": "2928240"
  },
  {
    "text": "properly yeah it assumes that the runtime will manage you know errors for",
    "start": "2928240",
    "end": "2934799"
  },
  {
    "text": "you in a way that doesn't leak memory you know that it's true for a browser",
    "start": "2934799",
    "end": "2940200"
  },
  {
    "text": "where the environment is very limited but for node where you can do essentially do anything that an application can do on your server that's",
    "start": "2940200",
    "end": "2947920"
  },
  {
    "text": "very complicated so that is kind of the source of a",
    "start": "2947920",
    "end": "2953040"
  },
  {
    "text": "problem probably and uh the fact that on the web is very useful to do F and",
    "start": "2953040",
    "end": "2958280"
  },
  {
    "text": "forget promises or a lot of developer do so a lot of developer do call fetch",
    "start": "2958280",
    "end": "2963480"
  },
  {
    "text": "without putting a TR catch out of it or a catch Handler on out of it and if it",
    "start": "2963480",
    "end": "2969160"
  },
  {
    "text": "just errors oh well it just errors and it goes into the console right not big of a deal and in",
    "start": "2969160",
    "end": "2977319"
  },
  {
    "text": "OJs if you start doing this uh yeah nobody will get a response from your HTTP call from from your server so you",
    "start": "2977319",
    "end": "2985760"
  },
  {
    "text": "know you need to manage all those error properly and make sure that the right thing is done and applied everywhere and",
    "start": "2985760",
    "end": "2993040"
  },
  {
    "text": "thir and fire and forget behaviors are not really acceptable you know while they are in on the browser makes",
    "start": "2993040",
    "end": "3001680"
  },
  {
    "text": "sense thank you I know this was there is is a lot of very deep topics so I hope",
    "start": "3001680",
    "end": "3008880"
  },
  {
    "text": "my my explanation shed some lights at least on my thinking and on the stages of things very fascinating uh especially",
    "start": "3008880",
    "end": "3015680"
  },
  {
    "text": "to hear the the history of it and just where it's used how it's used and how",
    "start": "3015680",
    "end": "3021599"
  },
  {
    "text": "the new newer pieces of the language like asent generators are making working",
    "start": "3021599",
    "end": "3026720"
  },
  {
    "text": "with this better so really great to hear from you on that and yeah we really look forward to to seeing you at nodejs",
    "start": "3026720",
    "end": "3033960"
  },
  {
    "text": "interactive uh next month and uh catching your talk your talk will be on this right I believe the name of it is",
    "start": "3033960",
    "end": "3040319"
  },
  {
    "text": "stream into the future yay yes yeah definitely more of a talk format for that to uh get a better",
    "start": "3040319",
    "end": "3048160"
  },
  {
    "text": "understanding and yeah definitely check that out when it comes out thank you so much for uh chatting with us today Mato",
    "start": "3048160",
    "end": "3054520"
  },
  {
    "text": "thank you for having me all right thank you for tuning in to JS party this week tun in live on Thursdays",
    "start": "3054520",
    "end": "3061839"
  },
  {
    "text": "at 1 p.m. us Eastern at ch.com join the community and slack with us in real time",
    "start": "3061839",
    "end": "3068119"
  },
  {
    "text": "during the shows head to change.com community and do us a favor share this show with a friend we just have a",
    "start": "3068119",
    "end": "3074240"
  },
  {
    "text": "podcast going to overcast and favored it and thank you to fastly our bandwidth partner head to fastly.com to learn more",
    "start": "3074240",
    "end": "3081520"
  },
  {
    "text": "and we move fast to fix things around here at change law because of rollbar check them out at rar.com or hosted on",
    "start": "3081520",
    "end": "3087200"
  },
  {
    "text": "Lino Cloud servers at the lin.com changelog check them out and support this show our music is produced by break",
    "start": "3087200",
    "end": "3093599"
  },
  {
    "text": "master cylinder and you can find more shows just like this at changel love.com thanks for tuning in we'll see you next",
    "start": "3093599",
    "end": "3100370"
  },
  {
    "text": "[Music]",
    "start": "3100370",
    "end": "3109010"
  },
  {
    "text": "week",
    "start": "3109040",
    "end": "3112040"
  }
]