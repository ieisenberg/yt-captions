[
  {
    "text": "bandwidth for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at change log because of rbar check them out at rar.com and we're hosted on linode cloud",
    "start": "5520",
    "end": "11840"
  },
  {
    "text": "servers head to lin.com changelog this episode is brought to you",
    "start": "11840",
    "end": "17359"
  },
  {
    "text": "by digital ocean digital ocean makes it super simple to launch a kuber denes cluster in minutes the digital ocean",
    "start": "17359",
    "end": "24199"
  },
  {
    "text": "kubernetes platform empowers developers to launch their containerized applications into a managed production",
    "start": "24199",
    "end": "30119"
  },
  {
    "text": "ready cluster without having to maintain or configure the underlying infrastructure they seamlessly integrate",
    "start": "30119",
    "end": "36239"
  },
  {
    "text": "everything with the rest of the digital ocean stack including low balancers firewalls object storage spaces and",
    "start": "36239",
    "end": "42680"
  },
  {
    "text": "block storage volumes they even have built-in support for public and private image Registries like dockerhub and qu.",
    "start": "42680",
    "end": "50480"
  },
  {
    "text": "developers can now run and scale container based workloads with ease with the digital ocean platform learn more",
    "start": "50480",
    "end": "55960"
  },
  {
    "text": "get started for free with a $50 credit at do. changelog again do. co/",
    "start": "55960",
    "end": "63460"
  },
  {
    "text": "[Music]",
    "start": "63460",
    "end": "70619"
  },
  {
    "text": "[Music] changelog welcome to go time a podcast",
    "start": "73710",
    "end": "80240"
  },
  {
    "text": "featuring a diverse panel and special guests discussing Cloud infrastructure distributed systems microservices",
    "start": "80240",
    "end": "86600"
  },
  {
    "text": "kubernetes Docker oh and also go we live every Tuesday at 300 p.m. Eastern new",
    "start": "86600",
    "end": "92720"
  },
  {
    "text": "Pacific join the community like with us in real time during the show in the go time FM channel and go for slack follow",
    "start": "92720",
    "end": "98799"
  },
  {
    "text": "us on Twitter we're atg gotime FM listen live at changel law.com or subscribe at",
    "start": "98799",
    "end": "104520"
  },
  {
    "text": "changel law.com gotime and now on to the",
    "start": "104520",
    "end": "109320"
  },
  {
    "text": "show hello and welcome to another exciting episode of go time I'm your",
    "start": "109600",
    "end": "116799"
  },
  {
    "text": "friendly neighborhood Matt ryer and today we're talking about functional programming yes a go podcast talking",
    "start": "116799",
    "end": "123719"
  },
  {
    "text": "about functional programming that's right I think it's going to be a great show there's only one way to find out",
    "start": "123719",
    "end": "129160"
  },
  {
    "text": "and that's to do it and then listen to it and see if it was good or not and joining me to make it good is I'm joined",
    "start": "129160",
    "end": "135720"
  },
  {
    "text": "by two of my favorite Gophers it's Johnny Boro and Erin Schlesinger and uh",
    "start": "135720",
    "end": "142400"
  },
  {
    "text": "welcome gentlemen how are you very well hey very good Johnny it's been a while since uh we hung out on go time what",
    "start": "142400",
    "end": "149560"
  },
  {
    "text": "have you been up to yeah yeah it's been uh it's been a couple weeks at least uh yeah I did uh I've been doing some some",
    "start": "149560",
    "end": "155720"
  },
  {
    "text": "teaching some go training um but what I really enjoyed um since I've uh since I've been off air so to speak uh was a a",
    "start": "155720",
    "end": "162840"
  },
  {
    "text": "gbridge workshop uh that I taught in in New York last weekend um it was uh Co",
    "start": "162840",
    "end": "168040"
  },
  {
    "text": "organized by some folks of the goldbridge community and and but really the heav LIF thing was done by the the",
    "start": "168040",
    "end": "173440"
  },
  {
    "text": "by the women who go chapter in NYC so uh shout out to to the organizers there um",
    "start": "173440",
    "end": "178879"
  },
  {
    "text": "um Joon us his is definitely one of them will can definitely help with that as well so shout out to those folks and those Tas um this was a really really",
    "start": "178879",
    "end": "186360"
  },
  {
    "text": "well put together the spot was great everything was well organized and and the only thing I did was to show up and teach which I think was basically just",
    "start": "186360",
    "end": "193040"
  },
  {
    "text": "half half really the battle there um but uh yeah it went really well folks learned a ton um and I had a a blast",
    "start": "193040",
    "end": "199840"
  },
  {
    "text": "teaching it brilliant who is gbridge 4 and you know so if any listeners are",
    "start": "199840",
    "end": "205239"
  },
  {
    "text": "interested in in getting involved how can they either contribute or just take part in it its core mission is diversity",
    "start": "205239",
    "end": "211519"
  },
  {
    "text": "and inclusion within within the go community and particular specifically so basically you know we we're open to all",
    "start": "211519",
    "end": "217439"
  },
  {
    "text": "under represented groups within within the community so the one of the ways we do that is by basically having those free workshops um um basically that",
    "start": "217439",
    "end": "224439"
  },
  {
    "text": "Target those individuals and and basically they come in for the day or if it's a two-day workshop they come in for",
    "start": "224439",
    "end": "229680"
  },
  {
    "text": "Saturday and Sunday typically and uh and we usually have Tas community members that that give up their give up some",
    "start": "229680",
    "end": "235400"
  },
  {
    "text": "time and we have people teaching and and really it's a community effort um to sort of uh help address the lack of",
    "start": "235400",
    "end": "243159"
  },
  {
    "text": "diversity and inclusion in the community I think either organize a workshop yourself or or or teach or ta you can",
    "start": "243159",
    "end": "249400"
  },
  {
    "text": "always donate money um to the bridge Foundry organization and that money will find its way to us and uh yeah it helps",
    "start": "249400",
    "end": "254760"
  },
  {
    "text": "us with offering diversity scholarships to to some of the conferences that you know in love um goeran included um and",
    "start": "254760",
    "end": "261320"
  },
  {
    "text": "yeah there's lots of ways to help uh really if you have any questions about it at all feel free to reach out to me directly on on on Twitter or or reach",
    "start": "261320",
    "end": "268040"
  },
  {
    "text": "out on support at go gob .org brilliant what's your Twitter name my Twitter handle is J Boro so j b o u r s i quo T",
    "start": "268040",
    "end": "278199"
  },
  {
    "text": "awesome yeah that's great I love what I love about this of course is diversity on teams makes the teams better in my",
    "start": "278199",
    "end": "285840"
  },
  {
    "text": "experience so whatever that diversity looks like and actually the more diverse the better because you just never know",
    "start": "285840",
    "end": "292919"
  },
  {
    "text": "what uh different experiences are going to influence things and so a nice broad",
    "start": "292919",
    "end": "298400"
  },
  {
    "text": "range that's why I think gbridge is doing such an important thing for the community um and for our teams yeah I",
    "start": "298400",
    "end": "305160"
  },
  {
    "text": "totally agree and I think there's there's been uh tons of uh sort of um articles and and research and things",
    "start": "305160",
    "end": "310800"
  },
  {
    "text": "that have come out basically have they shown have proven uh that it makes business sense right to have diverse",
    "start": "310800",
    "end": "315880"
  },
  {
    "text": "teams within your organization at your company and within the community overall so I think it's a win-win for everybody",
    "start": "315880",
    "end": "321680"
  },
  {
    "text": "yeah it's brilliant oh also joining us today joining us again from last week Aaron Aaron is it Aaron or Aaron when I",
    "start": "321680",
    "end": "329160"
  },
  {
    "text": "pronounce your name or is there no difference to you no no difference to me not really the last name though but",
    "start": "329160",
    "end": "335319"
  },
  {
    "text": "schlinger yeah let's talk about the last name let's talk about it you put you put another l in there again oh",
    "start": "335319",
    "end": "342759"
  },
  {
    "text": "schinger yeah there you go schinger yeah oh that's okay you uh M you said it no",
    "start": "342759",
    "end": "350000"
  },
  {
    "text": "worries you said it just fine the first time I'm used to it well edit it out um so that in the podcast I sound like I",
    "start": "350000",
    "end": "356440"
  },
  {
    "text": "got it correct no worries so what have you been up to since last",
    "start": "356440",
    "end": "361919"
  },
  {
    "text": "week so yeah I've been I've been doing a bunch of Athens stuff um been teaching a",
    "start": "361919",
    "end": "368120"
  },
  {
    "text": "bit to the topic of Athens and yeah and I've been writing some typescript stuff",
    "start": "368120",
    "end": "373400"
  },
  {
    "text": "too which has been kind of a refreshing pause from go because it's totally",
    "start": "373400",
    "end": "380280"
  },
  {
    "text": "different it has classes and objects and and generics and all the things that uh",
    "start": "380280",
    "end": "388440"
  },
  {
    "text": "go doesn't and it takes a completely different approach from go so it's been",
    "start": "388440",
    "end": "393560"
  },
  {
    "text": "kind of cool to kind of compare it in my mind interactively H very interesting and",
    "start": "393560",
    "end": "400199"
  },
  {
    "text": "maybe maybe we'll get to talk a bit more about typescript as we discuss functional programming so just complete",
    "start": "400199",
    "end": "406440"
  },
  {
    "text": "disclaimer I don't know much about functional programming at all it's not something that I've really had the time",
    "start": "406440",
    "end": "413479"
  },
  {
    "text": "to properly dig into I've got a sort of General enough idea about it but I'm going to act like the noob the audience",
    "start": "413479",
    "end": "421000"
  },
  {
    "text": "member who doesn't really know what it's for and there's a lot of tech Wars all",
    "start": "421000",
    "end": "426440"
  },
  {
    "text": "the time on Twitter it's very common you're right to say oh you know which do you prefer go or rust it's a very common",
    "start": "426440",
    "end": "432720"
  },
  {
    "text": "thing you hear a lot and really the question's kind of flawed because it's more about well there's lots of other",
    "start": "432720",
    "end": "438280"
  },
  {
    "text": "things that I think would lead you to choose a language um what the sort of problem space you're dealing with is one",
    "start": "438280",
    "end": "444319"
  },
  {
    "text": "of them but actually even just sort of developer happiness I think if a developer's going to work on something",
    "start": "444319",
    "end": "450440"
  },
  {
    "text": "they should pick the language that they're going to be most productive in you know the development team I think",
    "start": "450440",
    "end": "455720"
  },
  {
    "text": "that's also an important thing but so functional programming is going to be somewhat new to me and uh I'm Keen to",
    "start": "455720",
    "end": "462440"
  },
  {
    "text": "learn as much as I can about it and so yeah why don't we kick off then Erin you could perhaps give us a little bit of an",
    "start": "462440",
    "end": "468720"
  },
  {
    "text": "intro so for somebody who's never even heard of functional programming how would you describe what it is yeah",
    "start": "468720",
    "end": "476360"
  },
  {
    "text": "usually there's like a really simple frustrating answer to that and then a crazy complicated also frustrating",
    "start": "476360",
    "end": "484000"
  },
  {
    "text": "answer so I'll try to kind of Hit the middle ground there um so that it's not",
    "start": "484000",
    "end": "490720"
  },
  {
    "text": "frustrating so yeah I mean first and foremost functional programming can be",
    "start": "490720",
    "end": "496080"
  },
  {
    "text": "anywhere doesn't just have to be in some of those hardcore languages and it's as the name kind of",
    "start": "496080",
    "end": "502759"
  },
  {
    "text": "implies it's all about functions you know obviously you write functions but also you use function in new ways you",
    "start": "502759",
    "end": "511240"
  },
  {
    "text": "can uh pass functions into other functions um you can Nest functions",
    "start": "511240",
    "end": "517039"
  },
  {
    "text": "inside of other functions uh you can do this thing called composing functions you can",
    "start": "517039",
    "end": "523800"
  },
  {
    "text": "return functions um and this is all kind of familiar to go because functions are",
    "start": "523800",
    "end": "530200"
  },
  {
    "text": "first class citizens there um so really in the go context functional programming",
    "start": "530200",
    "end": "538240"
  },
  {
    "text": "is just another kind of strategy to pick up and use it appropriately it's really",
    "start": "538240",
    "end": "544000"
  },
  {
    "text": "interesting to hear you say that the first point you made was that you can do functional functional programming",
    "start": "544000",
    "end": "549839"
  },
  {
    "text": "anywhere even in go yeah I mean I won't say everywhere but you know 99% of the",
    "start": "549839",
    "end": "556320"
  },
  {
    "text": "places you write code you could do it yeah including go don't let anyone tell",
    "start": "556320",
    "end": "561560"
  },
  {
    "text": "you otherwise right is it more like a set of rules then yeah it's kind of half",
    "start": "561560",
    "end": "567920"
  },
  {
    "text": "set of rules and Str iies and and maybe the other half you could say design",
    "start": "567920",
    "end": "572959"
  },
  {
    "text": "pattern I know that's a loaded word but sort of design pattern so what are some",
    "start": "572959",
    "end": "578040"
  },
  {
    "text": "of the rules then CU I know that for example I know that if this you should get the same output when when you put",
    "start": "578040",
    "end": "585240"
  },
  {
    "text": "the same input in yeah that's a rule you can take and sort of apply um to some",
    "start": "585240",
    "end": "591600"
  },
  {
    "text": "parts of your code and go uh that's called Pure Purity so a pure function",
    "start": "591600",
    "end": "597720"
  },
  {
    "text": "would be a function that always returns like you said the same thing for the same input and um that",
    "start": "597720",
    "end": "605800"
  },
  {
    "text": "means usually that you know it can't do IO so that's super super limiting",
    "start": "605800",
    "end": "611640"
  },
  {
    "text": "obviously but it's also really powerful if you put it into parts of your code",
    "start": "611640",
    "end": "617600"
  },
  {
    "text": "because you can kind of Reason about it super easily and you can write tests super easily for it too it it sounds",
    "start": "617600",
    "end": "624279"
  },
  {
    "text": "like from from what we're saying it's a it's it's a set of principles and and strategies that you employ but also one",
    "start": "624279",
    "end": "631880"
  },
  {
    "text": "could argue that basically the underlying technology right the the the programming language does a lot to sort",
    "start": "631880",
    "end": "637480"
  },
  {
    "text": "of help or facilitate that right so I would imagine that writing functional in",
    "start": "637480",
    "end": "642959"
  },
  {
    "text": "something like Scola or has schol is going to feel vastly different than than",
    "start": "642959",
    "end": "648000"
  },
  {
    "text": "basically doing it in go which wasn't really designed for that like would you would you agree is there what what what don't we know there I would agree there",
    "start": "648000",
    "end": "654720"
  },
  {
    "text": "are languages like you said you know hll is probably the prime example",
    "start": "654720",
    "end": "659839"
  },
  {
    "text": "those languages are designed for functional programming and they just don't let you do the so-called like",
    "start": "659839",
    "end": "667959"
  },
  {
    "text": "imperative programming the the opposite of functional programming um so learning",
    "start": "667959",
    "end": "673200"
  },
  {
    "text": "something like that you just have to completely relearn programming almost",
    "start": "673200",
    "end": "678320"
  },
  {
    "text": "but then on the other side of coin you know if you're going into go there are limitations there and in Go's case one",
    "start": "678320",
    "end": "685000"
  },
  {
    "text": "of the big limitations is lack of generics um there are some things you",
    "start": "685000",
    "end": "690320"
  },
  {
    "text": "can't do in the functional programming world with go so there's a there's a middle ground to strike kind of",
    "start": "690320",
    "end": "696920"
  },
  {
    "text": "everywhere because go has its strengths and if you were to take like 100% of the",
    "start": "696920",
    "end": "703519"
  },
  {
    "text": "functional Concepts and build them into go you would lose a lot of the sort of",
    "start": "703519",
    "end": "709040"
  },
  {
    "text": "go strengths that we're all we all know and love so you're definitely not advocating",
    "start": "709040",
    "end": "714720"
  },
  {
    "text": "that if the things that you can do and go that are functional that b this they",
    "start": "714720",
    "end": "719959"
  },
  {
    "text": "should sort of replace the way you do go right the the idiomatic go that we the imperative style right of of doing go",
    "start": "719959",
    "end": "726519"
  },
  {
    "text": "you're not going to get the most bang for the buck there so if if you really want functional you should use a",
    "start": "726519",
    "end": "732320"
  },
  {
    "text": "functional language right yeah I'm certainly not advocating in the go case to just dump everything you know in some",
    "start": "732320",
    "end": "738880"
  },
  {
    "text": "cases that would be impossible anyway but for go for the go world it's all",
    "start": "738880",
    "end": "743920"
  },
  {
    "text": "about kind of just identifying when a functional pattern would help and in most cases would like reduce the amount",
    "start": "743920",
    "end": "750680"
  },
  {
    "text": "of code you have to write um and then doing it and if you do like you said if you want to go hardcore then you know go",
    "start": "750680",
    "end": "757920"
  },
  {
    "text": "pick up hascal or Scala or even rust um those are the kind of languages where",
    "start": "757920",
    "end": "764240"
  },
  {
    "text": "you really can dive in and go like super super hardcore and like you know rack",
    "start": "764240",
    "end": "770440"
  },
  {
    "text": "your brain and relearn everything and and that's cool um but if you're a gopher and you want to stick with go",
    "start": "770440",
    "end": "777600"
  },
  {
    "text": "that's really what it's about is just identifying when the pattern would help uh and then going going forward and",
    "start": "777600",
    "end": "784120"
  },
  {
    "text": "implementing it just in that one part of the code that's brilliant oh now remember you uh people listening live",
    "start": "784120",
    "end": "790720"
  },
  {
    "text": "can join in on go for slack we're in the hasg gotime FM channel and there's some",
    "start": "790720",
    "end": "796360"
  },
  {
    "text": "Gophers in there already asking some questions and uh what are some domains or problems where functional programming",
    "start": "796360",
    "end": "802639"
  },
  {
    "text": "where programming is a good choice and a good strategy and uh barab B Salter asks",
    "start": "802639",
    "end": "808199"
  },
  {
    "text": "is the only for mathematical or scientific disciplines so Erin could you tell us a bit about what sorts of",
    "start": "808199",
    "end": "814399"
  },
  {
    "text": "problems functional programming is good at and perfectly targeted for yeah I mean in the go space it's definitely not",
    "start": "814399",
    "end": "821199"
  },
  {
    "text": "just for Math and Science you know that being said if you go on Wikipedia and you look up some mathematical strategy a",
    "start": "821199",
    "end": "827440"
  },
  {
    "text": "lot of times you know you can literally translate one of the proofs into go and it'll look functional but domain problem",
    "start": "827440",
    "end": "834600"
  },
  {
    "text": "wise you know in addition to math and science if you look at something like like config parsing let's take that as",
    "start": "834600",
    "end": "841839"
  },
  {
    "text": "an example it'll almost all the time like you're going to get back out the",
    "start": "841839",
    "end": "847240"
  },
  {
    "text": "same thing if you give it the same exact config file and I know like before I",
    "start": "847240",
    "end": "852519"
  },
  {
    "text": "said you shouldn't do IO um but if you think about config parsing you can give it a string that represents you know",
    "start": "852519",
    "end": "859079"
  },
  {
    "text": "yaml or toml or or whatever it might be and it'll give you back the exact same",
    "start": "859079",
    "end": "864279"
  },
  {
    "text": "struct and that's really powerful right because you can always rely on your",
    "start": "864279",
    "end": "869759"
  },
  {
    "text": "config parsing code to give you back the same config and right there that's super",
    "start": "869759",
    "end": "876440"
  },
  {
    "text": "simple in in terms of like what we already know and go um but that actually is a functional principle U and that's",
    "start": "876440",
    "end": "883720"
  },
  {
    "text": "you know that's starting simple but goes on from there it would be weird if it",
    "start": "883720",
    "end": "889000"
  },
  {
    "text": "wasn't the case where you put the same input in you know what I mean like if you got different output with the same",
    "start": "889000",
    "end": "894920"
  },
  {
    "text": "input you'd probably consider that a bug but what about things like if if the config was if there was a time in there",
    "start": "894920",
    "end": "901959"
  },
  {
    "text": "and it was setting a default value to the current time or actually the current time at all how is the current time even",
    "start": "901959",
    "end": "908880"
  },
  {
    "text": "thought about in functional programming yep and that's that's of course yeah that's an exception and that's sort of",
    "start": "908880",
    "end": "915120"
  },
  {
    "text": "touches on you know when do you depart from functional when do you know like this is too hardcore and we shouldn't",
    "start": "915120",
    "end": "923079"
  },
  {
    "text": "deal with the Purity example but there is a way to get around that",
    "start": "923079",
    "end": "929480"
  },
  {
    "text": "uh and there's a way to parse a config file so that it instead of returning or",
    "start": "929480",
    "end": "934839"
  },
  {
    "text": "setting the current time in one of the struct fields it puts a function instead",
    "start": "934839",
    "end": "940079"
  },
  {
    "text": "in that stru field so you always get back a function and then you can decide",
    "start": "940079",
    "end": "945279"
  },
  {
    "text": "when to go ahead and call that function later on and then that specific function",
    "start": "945279",
    "end": "950759"
  },
  {
    "text": "becomes an impure function of course because it always gives back something different but overall when you're",
    "start": "950759",
    "end": "957079"
  },
  {
    "text": "managing that config struct you always have the same thing that you're looking at and dealing with when you pass it all",
    "start": "957079",
    "end": "963240"
  },
  {
    "text": "around your code soort of one of the the major benefits that like I immediately",
    "start": "963240",
    "end": "970000"
  },
  {
    "text": "picked up when when I started looking at sort of functional programming go was was the the judicious use of basically",
    "start": "970000",
    "end": "977959"
  },
  {
    "text": "passing around and and receiving or returning functions you could tell right away that basically there's a heavy",
    "start": "977959",
    "end": "984399"
  },
  {
    "text": "emphasis right on on obviously it's it's functional for a reason right so basically passing functions just like",
    "start": "984399",
    "end": "989839"
  },
  {
    "text": "you're saying like basically being able to return functions that you can then call on so the the the Go's treatment of",
    "start": "989839",
    "end": "997160"
  },
  {
    "text": "functions as sort of a first God citizens absolutely makes that possible um but I actually watched the talk by",
    "start": "997160",
    "end": "1003240"
  },
  {
    "text": "you actually at at the U um Gotham go might have been this year last year probably last year um on on sort of",
    "start": "1003240",
    "end": "1009720"
  },
  {
    "text": "functional programming go and one of the things that you talked about was basically the use of of of how higher",
    "start": "1009720",
    "end": "1016120"
  },
  {
    "text": "order functions make that whole sort of notion possible like is that so if if",
    "start": "1016120",
    "end": "1021440"
  },
  {
    "text": "there's one thing right a gopher could take away from from from thinking about",
    "start": "1021440",
    "end": "1027000"
  },
  {
    "text": "functional programming would you say sort of U um using higher order functions um basically the taking in or",
    "start": "1027000",
    "end": "1033600"
  },
  {
    "text": "returning of functions to do things would that be sort of a a major takeaway because is that's I'll be honest that's",
    "start": "1033600",
    "end": "1039438"
  },
  {
    "text": "something I don't see a ton of um usually in the more sort of a um comp",
    "start": "1039439",
    "end": "1045360"
  },
  {
    "text": "complex um cases um where you know people who really know go who really know what they're doing you can you can",
    "start": "1045360",
    "end": "1051520"
  },
  {
    "text": "see a bit more of that but I don't see that every in everyday go code like but when I you know saw your talk I was like",
    "start": "1051520",
    "end": "1057760"
  },
  {
    "text": "wow this is this is like a this is this is a natural way of thinking you can do more of that so is that is that a good",
    "start": "1057760",
    "end": "1063919"
  },
  {
    "text": "way of thinking about it if you're you know go programmer who's not used to doing that is that was that the first big take over you could have 100% yeah",
    "start": "1063919",
    "end": "1072360"
  },
  {
    "text": "and and I'll even give like a super super common example um if you're writing an HTTP server you've got a",
    "start": "1072360",
    "end": "1079400"
  },
  {
    "text": "global database variable that's super I mean that's fine because that database variable is going to be sitting there",
    "start": "1079400",
    "end": "1085440"
  },
  {
    "text": "probably for the whole life of your program but on the other hand you could pass a database variable as a parameter",
    "start": "1085440",
    "end": "1093559"
  },
  {
    "text": "to a function that then returns an HTTP Handler and then testability gets a",
    "start": "1093559",
    "end": "1100400"
  },
  {
    "text": "little bit simpler because you can test each Handler with a different database",
    "start": "1100400",
    "end": "1105799"
  },
  {
    "text": "driver or an inmemory driver or something along those lines so you're passing in something to a function",
    "start": "1105799",
    "end": "1112559"
  },
  {
    "text": "receiving a function and that function itself is the HTP Handler that you can",
    "start": "1112559",
    "end": "1118080"
  },
  {
    "text": "then plug into whatever router you're interested in using and and that right there is you know you're passing in a",
    "start": "1118080",
    "end": "1124360"
  },
  {
    "text": "thing you're getting back a function and right there that's that's a functional",
    "start": "1124360",
    "end": "1129520"
  },
  {
    "text": "pattern because you know it's like you said it's a higher order function and it talks a bit about not having side",
    "start": "1129520",
    "end": "1135640"
  },
  {
    "text": "effects as well to calling a function um and Johnny you touched on this a little bit and there's some principles there",
    "start": "1135640",
    "end": "1142600"
  },
  {
    "text": "that I think we we already have started to talk about in go for example when you",
    "start": "1142600",
    "end": "1148400"
  },
  {
    "text": "I like the idea of no no unexpected side effects because it's it's magic so for",
    "start": "1148400",
    "end": "1153720"
  },
  {
    "text": "example currently in the images package in the standard Library if you import",
    "start": "1153720",
    "end": "1159080"
  },
  {
    "text": "the jpeg package and you just do like an underscore import you're not going to use them but just by importing them they",
    "start": "1159080",
    "end": "1166039"
  },
  {
    "text": "then register themselves and you then can add support for jpegs or pgs or",
    "start": "1166039",
    "end": "1171320"
  },
  {
    "text": "whatever you import now I assume that was a early in the standard libraries",
    "start": "1171320",
    "end": "1176559"
  },
  {
    "text": "kind of history that that they were playing around with ideas like that generally speaking I personally don't",
    "start": "1176559",
    "end": "1182440"
  },
  {
    "text": "think that's great because it's it's too magic when you import something I want to import it and then use it explicitly",
    "start": "1182440",
    "end": "1189559"
  },
  {
    "text": "I don't want it to be implicit so there's probably some of the thinking as well that you could apply in Parts",
    "start": "1189559",
    "end": "1195720"
  },
  {
    "text": "outside even just the functions within go yeah you you hit it on the head I I",
    "start": "1195720",
    "end": "1201280"
  },
  {
    "text": "think the data a lot of the standard Library database stuff do does that too kind of just like you got to remember to",
    "start": "1201280",
    "end": "1207520"
  },
  {
    "text": "do it and if you don't you'll crash at runtime uh you'll you know Panic that",
    "start": "1207520",
    "end": "1213520"
  },
  {
    "text": "the MySQL driver isn't registered and you know that that's like you said it's shared State and another option then to",
    "start": "1213520",
    "end": "1220720"
  },
  {
    "text": "go and and replace that is I think we all kind of know and love the Builder",
    "start": "1220720",
    "end": "1226120"
  },
  {
    "text": "pattern and that is is also a functional concept because if you were to go and",
    "start": "1226120",
    "end": "1232159"
  },
  {
    "text": "say like db. with driver my SQL maybe you pass in a string my SQL or something",
    "start": "1232159",
    "end": "1239280"
  },
  {
    "text": "like that and db. with driver returned itself a database driver that",
    "start": "1239280",
    "end": "1245000"
  },
  {
    "text": "implemented my SQL right there that's that's also a pure side effect free",
    "start": "1245000",
    "end": "1250280"
  },
  {
    "text": "function and it returns kind of itself so that you can chain those things together and you can say you know with",
    "start": "1250280",
    "end": "1257480"
  },
  {
    "text": "driver connect maybe you pass in the host string and then query or query",
    "start": "1257480",
    "end": "1264120"
  },
  {
    "text": "Builder or whatever whatever that might be when you start seeing sort of those",
    "start": "1264120",
    "end": "1270159"
  },
  {
    "text": "registration patterns happen explicitly in a function then you start seeing those functions chaining together",
    "start": "1270159",
    "end": "1277200"
  },
  {
    "text": "basically you're doing the Builder pattern but you're taking advantage of those pure functions um and you start to",
    "start": "1277200",
    "end": "1283760"
  },
  {
    "text": "do things that start to look like uh some other functional patterns that we kind of haven't gotten to but they're",
    "start": "1283760",
    "end": "1291120"
  },
  {
    "text": "like maybe functional programming 102 style patterns um which start to get you",
    "start": "1291120",
    "end": "1296360"
  },
  {
    "text": "some really really powerful code yeah append Springs to mind as one that you",
    "start": "1296360",
    "end": "1302640"
  },
  {
    "text": "might consider pure in the sense of like you know we always assign back to the",
    "start": "1302640",
    "end": "1308159"
  },
  {
    "text": "slice or to a new slice essentially it returns a new slice um although of",
    "start": "1308159",
    "end": "1313360"
  },
  {
    "text": "course it can affect the underlying array so I guess there are times when it's not pure is that right yeah yeah so",
    "start": "1313360",
    "end": "1320880"
  },
  {
    "text": "um there's kind of this concept of observable Purity and interface Purity",
    "start": "1320880",
    "end": "1327559"
  },
  {
    "text": "and when you talk about a language like go you probably want to be pure in that",
    "start": "1327559",
    "end": "1332760"
  },
  {
    "text": "you don't modify the underlying slice the underlying array because there might be another go routine touching it but a",
    "start": "1332760",
    "end": "1339400"
  },
  {
    "text": "pen is always interface pure because it'll always return the new array",
    "start": "1339400",
    "end": "1344720"
  },
  {
    "text": "instead of from your perspective and your go routin you know just modifying the underlying",
    "start": "1344720",
    "end": "1350720"
  },
  {
    "text": "thing and then you know making you just start using that same variable it's a",
    "start": "1350720",
    "end": "1356400"
  },
  {
    "text": "really cool pattern in terms of you using a pen because you always know that",
    "start": "1356400",
    "end": "1361480"
  },
  {
    "text": "the thing that a pen returns is the new one that you have the new value on yeah",
    "start": "1361480",
    "end": "1367279"
  },
  {
    "text": "I quite like it because also it makes it very easy to Branch things off to sort",
    "start": "1367279",
    "end": "1372880"
  },
  {
    "text": "of set up some commonality and then right you'd be able to then whether it's",
    "start": "1372880",
    "end": "1378640"
  },
  {
    "text": "literally branching it or at least logically you'd be able to think of you could pass that thing whatever the new",
    "start": "1378640",
    "end": "1384120"
  },
  {
    "text": "thing is into somewhere other place and keep a reference to one of the ancestors almost in order to sort of keep it I've",
    "start": "1384120",
    "end": "1390880"
  },
  {
    "text": "not explained that very well um but don't worry they'll fix it in post I'll",
    "start": "1390880",
    "end": "1396039"
  },
  {
    "text": "just say loads of words and then they can put them together in the right order yeah yeah that was that was you know 95%",
    "start": "1396039",
    "end": "1402799"
  },
  {
    "text": "in the right order I think yeah 95% I'll take it yeah well it interesting word",
    "start": "1402799",
    "end": "1408480"
  },
  {
    "text": "that you said there is branch and you can actually make trees binary trees uh",
    "start": "1408480",
    "end": "1414600"
  },
  {
    "text": "that are almost purely functional uh based on a pen so if you're really into",
    "start": "1414600",
    "end": "1420200"
  },
  {
    "text": "something like that you know you can basically create a new tree a copy of the old tree using a pen so you know you",
    "start": "1420200",
    "end": "1428600"
  },
  {
    "text": "can have tree one and you can add a new child node or a new Leaf note or I",
    "start": "1428600",
    "end": "1433840"
  },
  {
    "text": "forgot almost everything about trees but I know there's a way to represent this in slices and if you do in a pen you can",
    "start": "1433840",
    "end": "1440679"
  },
  {
    "text": "just create a copy of your tree number one and get a tree number two out of it",
    "start": "1440679",
    "end": "1446480"
  },
  {
    "text": "and it's kind of like the non-pure part of the append function actually helps",
    "start": "1446480",
    "end": "1452640"
  },
  {
    "text": "there because it's a really fast operation than to create a new [Music]",
    "start": "1452640",
    "end": "1465069"
  },
  {
    "text": "tree this episode has brought to by strong DM strong DM makes it easy for devops to enforce the controls infos",
    "start": "1465880",
    "end": "1473200"
  },
  {
    "text": "teams require manage access to any database server and any environment and in this segment we're talking to Jim",
    "start": "1473200",
    "end": "1479279"
  },
  {
    "text": "morco VP of engineering at Hurst he's sharing how they're using strong DM within their team of 90 plus Engineers",
    "start": "1479279",
    "end": "1486559"
  },
  {
    "text": "it now takes them just 60 seconds to offboard a team member from a data source we have an engineering team of",
    "start": "1486559",
    "end": "1492919"
  },
  {
    "text": "somewhere in the area of 80 or 90 Engineers because we've got so many services and many databases um and so",
    "start": "1492919",
    "end": "1499360"
  },
  {
    "text": "many developers we need a reasonable way to manage access to them uh it was it was somewhat painful and you know labor",
    "start": "1499360",
    "end": "1505520"
  },
  {
    "text": "intensive process uh our devops team uh would literally have to manage every one",
    "start": "1505520",
    "end": "1510679"
  },
  {
    "text": "of the permissions for everybody who wanted access um so strong DM has been a real godsend in that area for us",
    "start": "1510679",
    "end": "1516799"
  },
  {
    "text": "requests for access to specific databases were pretty much manual now we've adopted strong DM it's something",
    "start": "1516799",
    "end": "1522760"
  },
  {
    "text": "that you don't even know is there once it's installed it just works it's very simple um we've set up a mult multitude",
    "start": "1522760",
    "end": "1528039"
  },
  {
    "text": "of data sources so that when somebody's on boarded we just give them access to strong DM was pretty simple um our",
    "start": "1528039",
    "end": "1534240"
  },
  {
    "text": "devops team um they have a very minimal effort required to enable each data source to be connected to strong DM and",
    "start": "1534240",
    "end": "1540840"
  },
  {
    "text": "then installing the client software is uh it's very very simple and straightforward can use whatever client you want to to talk to the database so",
    "start": "1540840",
    "end": "1547240"
  },
  {
    "text": "there's really no training necessary all right if your team can benefit from nearly instant onboarding and",
    "start": "1547240",
    "end": "1552320"
  },
  {
    "text": "offboarding that's fully sck to compliant head to strong dm.com to learn more and request a free demo again",
    "start": "1552320",
    "end": "1560039"
  },
  {
    "text": "strong dm.com [Music]",
    "start": "1560039",
    "end": "1565759"
  },
  {
    "text": "I had this impression of functional like my my like in my early years you know as",
    "start": "1570000",
    "end": "1576080"
  },
  {
    "text": "an engineer like I'd always hear of functional programming and it and it",
    "start": "1576080",
    "end": "1582039"
  },
  {
    "text": "always had this air of sort of superiority around it like like you know like only those who were had mastered",
    "start": "1582039",
    "end": "1589000"
  },
  {
    "text": "you know the the unknowns went to the Mountaintop and came back with a tablet you know kind of thing like had had sort",
    "start": "1589000",
    "end": "1594840"
  },
  {
    "text": "of could understand even approach functional it's almost like you had to be sort of a it was like the next level",
    "start": "1594840",
    "end": "1600480"
  },
  {
    "text": "it was the evolution of of the coder right you you know once you once you've evolved beyond the the the mere mortal",
    "start": "1600480",
    "end": "1607440"
  },
  {
    "text": "imperative style then you could do functional right so like my function experience is limited to a little bit of",
    "start": "1607440",
    "end": "1613520"
  },
  {
    "text": "Elixir um that I that I started learning because I used to do Ruby and and that became very popular in that Community",
    "start": "1613520",
    "end": "1619360"
  },
  {
    "text": "but it to me like I'm always wondering like okay it always feels like we're",
    "start": "1619360",
    "end": "1624399"
  },
  {
    "text": "always trying to sort of sort of bring functional Concepts into the imperative",
    "start": "1624399",
    "end": "1629919"
  },
  {
    "text": "style basically saying hey you can make your imperative programming sort of more stable more resilient you know by sort",
    "start": "1629919",
    "end": "1636279"
  },
  {
    "text": "of adopting some of the principles of functional programming but I'm curious like given your background have you come",
    "start": "1636279",
    "end": "1643279"
  },
  {
    "text": "across situations in the functional Community where you're kind of doing the reverse right you're bringing some of",
    "start": "1643279",
    "end": "1649600"
  },
  {
    "text": "the the good ideas right that exist in the imperative world you're bringing those to the functional world and and",
    "start": "1649600",
    "end": "1655000"
  },
  {
    "text": "I'm asking because I really have no idea what those would be oh yeah totally I mean like to address the first thing you",
    "start": "1655000",
    "end": "1661159"
  },
  {
    "text": "said there is totally a religious War I think Matt you you said it kind of at",
    "start": "1661159",
    "end": "1666440"
  },
  {
    "text": "the beginning too and the functional purists are you know kind of at the mountain top and and a lot of times it's",
    "start": "1666440",
    "end": "1673960"
  },
  {
    "text": "tough to break in even if you go on Wikipedia there's all this math and it's",
    "start": "1673960",
    "end": "1679760"
  },
  {
    "text": "crazy like if you're looking at a math proof and you're like how does this relate to programming but some of the",
    "start": "1679760",
    "end": "1685480"
  },
  {
    "text": "stuff like uh for example there's this concept of mapping over an array and",
    "start": "1685480",
    "end": "1691600"
  },
  {
    "text": "mapping over an array I think someone even said in here yeah Barnaby said just",
    "start": "1691600",
    "end": "1696640"
  },
  {
    "text": "remove four in the channel mapping over an array actually just lets you do a for",
    "start": "1696640",
    "end": "1702279"
  },
  {
    "text": "Loop without having to write all the four stuff you know you don't have to write for I in range or anything like",
    "start": "1702279",
    "end": "1710080"
  },
  {
    "text": "that instead you can just do my array. map and then pass in basically a",
    "start": "1710080",
    "end": "1715919"
  },
  {
    "text": "callback function that the the map function will just run for you on every",
    "start": "1715919",
    "end": "1721279"
  },
  {
    "text": "element of the array I was thinking is that a funk door oh yeah but but when you use that word people start walking",
    "start": "1721279",
    "end": "1728279"
  },
  {
    "text": "away in my experience no no the only reason I can say that is that because I watch your talk oh yeah I I'll mention",
    "start": "1728279",
    "end": "1735399"
  },
  {
    "text": "that word and I'll make me sound like I know what I'm talking about yes that was that was my oh yeah so you're at the",
    "start": "1735399",
    "end": "1740640"
  },
  {
    "text": "Mountaintop then already yeah I I gleaned and and it was shining way too bright for me it almost burned my eyes",
    "start": "1740640",
    "end": "1746799"
  },
  {
    "text": "out so I had to come back down I was just gonna say I mean I I learned that world from the Scala Days and there were",
    "start": "1746799",
    "end": "1754240"
  },
  {
    "text": "like a bunch of functional crazy functional libraries in there and I like racked my brain trying to figure those",
    "start": "1754240",
    "end": "1760120"
  },
  {
    "text": "out and I picked up like funter and like two other words and then when I came",
    "start": "1760120",
    "end": "1766039"
  },
  {
    "text": "over to go I kind of realized like hey like this isn't really crazy like you",
    "start": "1766039",
    "end": "1772440"
  },
  {
    "text": "don't have to call it something crazy you just see it in the wild and and people just say you know this is a call",
    "start": "1772440",
    "end": "1778720"
  },
  {
    "text": "back and that's it well we like to use big words for simple things Funk to Funk",
    "start": "1778720",
    "end": "1784320"
  },
  {
    "text": "T sounds to me like a kind of go super villain would be called Funk",
    "start": "1784320",
    "end": "1789960"
  },
  {
    "text": "T it's like super Funk and Funk to can we get some action figures for",
    "start": "1789960",
    "end": "1797000"
  },
  {
    "text": "those too yes I'm sure Ashley can design some",
    "start": "1797000",
    "end": "1802360"
  },
  {
    "text": "for us Ashley if you're listening fun go yeah so whenever I hear anyone",
    "start": "1802360",
    "end": "1811159"
  },
  {
    "text": "whe whenever there's this um kind of snobbery around something usually ends",
    "start": "1811159",
    "end": "1817039"
  },
  {
    "text": "up being it's either inaccessible for some reason and I don't usually believe",
    "start": "1817039",
    "end": "1823039"
  },
  {
    "text": "that the reasons are usually that valid but one question this leads me to is how",
    "start": "1823039",
    "end": "1828360"
  },
  {
    "text": "about readability is one of the reasons why functional programming has this elevated status is it because when you",
    "start": "1828360",
    "end": "1835799"
  },
  {
    "text": "read it it's difficult to read because I've read I've read some functional code and it certainly doesn't spring out to",
    "start": "1835799",
    "end": "1843039"
  },
  {
    "text": "me like go code does go code has a very good glance ability because you know it",
    "start": "1843039",
    "end": "1850440"
  },
  {
    "text": "doesn't have much magic in there technically functional programming should be even less magic I would assume",
    "start": "1850440",
    "end": "1856240"
  },
  {
    "text": "but when I've seen some bits put together it's a little bit like you know used to get these programmers that were",
    "start": "1856240",
    "end": "1861600"
  },
  {
    "text": "very happy when they could cram all this program onto a single line they get very proud of that whereas I always tell",
    "start": "1861600",
    "end": "1868159"
  },
  {
    "text": "people in go just be more Vose break it out onto many lines because it's just so",
    "start": "1868159",
    "end": "1873960"
  },
  {
    "text": "much easier to read how's the readability of functional programming code yeah I mean it really depends on",
    "start": "1873960",
    "end": "1880559"
  },
  {
    "text": "the language and in go go has this kind of asset that it really is so simple",
    "start": "1880559",
    "end": "1887320"
  },
  {
    "text": "that if you wanted to make some crazy functional concept or construct you",
    "start": "1887320",
    "end": "1893880"
  },
  {
    "text": "really would be forced to break it out onto separate lines and even like naming the variables makes a difference there",
    "start": "1893880",
    "end": "1900679"
  },
  {
    "text": "too so if you I would bet that the chances of you creating meaningful",
    "start": "1900679",
    "end": "1906600"
  },
  {
    "text": "variable names would go up if you're going to end up having to break stuff out onto new lines and even even that",
    "start": "1906600",
    "end": "1914720"
  },
  {
    "text": "makes a difference right it's just like now I can tell what's going on because instead of I it's like you know my new",
    "start": "1914720",
    "end": "1922200"
  },
  {
    "text": "array with added integers whatever it whatever it might be but you can kind of",
    "start": "1922200",
    "end": "1928960"
  },
  {
    "text": "go on the other side of that coin and like even in go if you've got a query",
    "start": "1928960",
    "end": "1936159"
  },
  {
    "text": "builder for SQL queries and you like I said before I mean that technically is a functional concept but you can build up",
    "start": "1936159",
    "end": "1943360"
  },
  {
    "text": "some super crazy queries and have like 10 function call chained together in a",
    "start": "1943360",
    "end": "1948399"
  },
  {
    "text": "row and that can get kind of confusing because you can go and say you know okay",
    "start": "1948399",
    "end": "1954399"
  },
  {
    "text": "I'm doing I'm starting off with this select and then like somehow I'm doing a join and a filter and like after a",
    "start": "1954399",
    "end": "1962559"
  },
  {
    "text": "couple function calls at least to me like I can't really imagine what the actual query is going to be that runs",
    "start": "1962559",
    "end": "1969919"
  },
  {
    "text": "against the database it's like there's an inflection point where at some point",
    "start": "1969919",
    "end": "1976200"
  },
  {
    "text": "you're going to be calling like five or six chain functions and at that point you're like wait what like what what am",
    "start": "1976200",
    "end": "1982760"
  },
  {
    "text": "I trying to do again and that's probably where you know you start breaking it out those variable names and maybe some",
    "start": "1982760",
    "end": "1989480"
  },
  {
    "text": "docks are going to start making like your your future self and all your all",
    "start": "1989480",
    "end": "1996559"
  },
  {
    "text": "the people on your team uh making their lives easier and you know making them not want to come hunt you down and you",
    "start": "1996559",
    "end": "2004000"
  },
  {
    "text": "know do something to you that's how Funk T actually that's his origin story yep exactly did some",
    "start": "2004000",
    "end": "2011559"
  },
  {
    "text": "bad code and the rest of the team hunted him down and I don't I don't want to spoil it I don't know how far we can",
    "start": "2011559",
    "end": "2018240"
  },
  {
    "text": "take this one um yeah well I think all the way to Netflix yeah yeah Netflix original yeah",
    "start": "2018240",
    "end": "2025120"
  },
  {
    "text": "let's make it happen let's do it uh yeah so what about testing then so",
    "start": "2025120",
    "end": "2030519"
  },
  {
    "text": "in I imagine if if if you have these pure functions where the input whatever",
    "start": "2030519",
    "end": "2036080"
  },
  {
    "text": "the input is the output is always the same as one of the rules I imagine writing tests does get easier and can",
    "start": "2036080",
    "end": "2043480"
  },
  {
    "text": "you do a lot more TBL driven tests and things like that does that just completely make sense now in that in",
    "start": "2043480",
    "end": "2049240"
  },
  {
    "text": "that world yeah for sure take for example the the whole pass in the",
    "start": "2049240",
    "end": "2055320"
  },
  {
    "text": "database pram and get back a HTTP Handler example you know let's say you",
    "start": "2055320",
    "end": "2060560"
  },
  {
    "text": "did a table driven test that had you know a bunch of tests against a specific",
    "start": "2060560",
    "end": "2065760"
  },
  {
    "text": "route you could in theory take out the HTTP server uh like you know HTTP test.",
    "start": "2065760",
    "end": "2072800"
  },
  {
    "text": "test server I think that's what it's called you could save that for kind of an integration test and you could",
    "start": "2072800",
    "end": "2079800"
  },
  {
    "text": "actually go and start passing in inmemory databases and then just calling",
    "start": "2079800",
    "end": "2085320"
  },
  {
    "text": "the Handler directly and you get these super super fast and efficient unit",
    "start": "2085320",
    "end": "2090440"
  },
  {
    "text": "tests out of that that really really Target your every single HTTP handle",
    "start": "2090440",
    "end": "2096839"
  },
  {
    "text": "Handler that you write and then like you can even build on top of that and start writing your table driven tests against",
    "start": "2096839",
    "end": "2104359"
  },
  {
    "text": "different types of databases too so you know an example there that I've seen a bunch is you've got your quick tests",
    "start": "2104359",
    "end": "2111440"
  },
  {
    "text": "that run against memory databases and then you've got a little bit slower",
    "start": "2111440",
    "end": "2116920"
  },
  {
    "text": "tests that run against SQL light and they will actually literally test your",
    "start": "2116920",
    "end": "2122320"
  },
  {
    "text": "SQL queries out and then you can start testing like query injection and all that crazy awesome stuff too so the",
    "start": "2122320",
    "end": "2129640"
  },
  {
    "text": "imperative go for in me I guess is is basically saying what would be the advantage of using functional here",
    "start": "2129640",
    "end": "2137160"
  },
  {
    "text": "instead of basically like a good using interfaces right to to mock out some of this some of this behavior is it does",
    "start": "2137160",
    "end": "2143400"
  },
  {
    "text": "one offer a much greater advantage over the other or it really you can pick whichever one makes you uh makes you",
    "start": "2143400",
    "end": "2149880"
  },
  {
    "text": "more productive kind of thing like what what's the what's the decision where's the threshold to making that decision to go to functional Style versus basically",
    "start": "2149880",
    "end": "2156359"
  },
  {
    "text": "just using your your your interface yeah I think that's a good question and I think it comes down to that sort of",
    "start": "2156359",
    "end": "2162280"
  },
  {
    "text": "inflection point if you're finding like you're going to write some crazy do map function that's going to abstract away",
    "start": "2162280",
    "end": "2168839"
  },
  {
    "text": "your loops and you and or your team are just like really struggling with it it's probably when you just go back and you",
    "start": "2168839",
    "end": "2175240"
  },
  {
    "text": "write your interface and you write your for Loop and that's totally I mean we know that's idiomatic awesome go code",
    "start": "2175240",
    "end": "2182359"
  },
  {
    "text": "but I think really where it matters is if you find yourself writing like a bunch of for loops and your interfaces",
    "start": "2182359",
    "end": "2188839"
  },
  {
    "text": "start getting bigger and bigger that is probably a good place to start prototyping something in a PR uh and",
    "start": "2188839",
    "end": "2195640"
  },
  {
    "text": "figuring out like hey could I break apart this interface and replacing like a couple of those methods with maybe a",
    "start": "2195640",
    "end": "2203200"
  },
  {
    "text": "couple functions outside of the interface that modify some stuff inside",
    "start": "2203200",
    "end": "2208839"
  },
  {
    "text": "of one of the implementations and I think a lot of folks will find like just doing that assuming you write some",
    "start": "2208839",
    "end": "2215119"
  },
  {
    "text": "decent docs on that function just doing that can really simplify things a lot and I would call it writing",
    "start": "2215119",
    "end": "2222599"
  },
  {
    "text": "in the functional style because that specific function you're writing can start getting pretty interesting but",
    "start": "2222599",
    "end": "2230240"
  },
  {
    "text": "really like when it comes down to it you're just taking a method out of a struct or out of an interface and just",
    "start": "2230240",
    "end": "2236319"
  },
  {
    "text": "breaking it out into a function and really a lot of times just that can really simplify stuff in your",
    "start": "2236319",
    "end": "2242520"
  },
  {
    "text": "implementations for the interface okay someone questions in a channel are are sort of a hovering around sort of",
    "start": "2242520",
    "end": "2249520"
  },
  {
    "text": "performance impact what kind of impact does that have on on your code being able to run in parallel if any at all um",
    "start": "2249520",
    "end": "2256640"
  },
  {
    "text": "along those lines is there is there a performance penalty right or or gain um to actually having all these function",
    "start": "2256640",
    "end": "2263720"
  },
  {
    "text": "all these functions calling these other functions although one could argue you're kind of doing the same thing in the imperative style although in a more",
    "start": "2263720",
    "end": "2271200"
  },
  {
    "text": "um ready the apparent way versus the functional style but I guess yeah those those question are are kind of digging",
    "start": "2271200",
    "end": "2277680"
  },
  {
    "text": "into okay what is the performance penalty if any right for using the function of sty over the imperative yeah",
    "start": "2277680",
    "end": "2283079"
  },
  {
    "text": "yeah I mean if you go crazy there's going to be a penalty for sure because you're going to start copying memory all over the place in the Heap um but if",
    "start": "2283079",
    "end": "2290359"
  },
  {
    "text": "we're talking about like let's take the map in that functor uh a map is",
    "start": "2290359",
    "end": "2295480"
  },
  {
    "text": "basically an abstraction over a for Loop so you're going to have your same array",
    "start": "2295480",
    "end": "2301400"
  },
  {
    "text": "you'll wrap it in a struct so there is some memory penalty there uh you'll wrap it in a struct and then you'll call your",
    "start": "2301400",
    "end": "2307520"
  },
  {
    "text": "do map and the do map is going to take in a function so there's some memory penalty there but inside of that dot map",
    "start": "2307520",
    "end": "2315599"
  },
  {
    "text": "function there's you implement that again with just a for Loop so you don't get the the actual runtime performance",
    "start": "2315599",
    "end": "2323000"
  },
  {
    "text": "penalty there because you're really just building a convenience function on top",
    "start": "2323000",
    "end": "2328280"
  },
  {
    "text": "of a for Loop in that case mhm in this example the map is like the in",
    "start": "2328280",
    "end": "2334079"
  },
  {
    "text": "JavaScript for each isn't it exactly yeah there is one difference in that the",
    "start": "2334079",
    "end": "2340560"
  },
  {
    "text": "four each doesn't return anything but the map will return the new thing",
    "start": "2340560",
    "end": "2346560"
  },
  {
    "text": "basically the new thing that you've transformed using that function you passed into to map right if you have a",
    "start": "2346560",
    "end": "2354000"
  },
  {
    "text": "an array or a slice of inss and you just want to increase them all by one you could call map and have a function and",
    "start": "2354000",
    "end": "2360200"
  },
  {
    "text": "that function will just take in an INT add one and return the new return the int with that plus okay exactly yeah and",
    "start": "2360200",
    "end": "2366760"
  },
  {
    "text": "that doesn't uh necessarily need to return a completely new copy of the",
    "start": "2366760",
    "end": "2372079"
  },
  {
    "text": "slice so the function won't be strictly pure U but it'll be it'll have all the",
    "start": "2372079",
    "end": "2377680"
  },
  {
    "text": "conveniences of functional maps and it'll also be like I saying before you",
    "start": "2377680",
    "end": "2383119"
  },
  {
    "text": "know there's the observable pure and the interface pure interface pure basically",
    "start": "2383119",
    "end": "2388319"
  },
  {
    "text": "means hey I can write this in the style of a functional programming um and that",
    "start": "2388319",
    "end": "2393480"
  },
  {
    "text": "that's what you get with maps and then the trade-off is is you still have the same performance so you mentioned",
    "start": "2393480",
    "end": "2399560"
  },
  {
    "text": "earlier the HTTP Handler Funk and I wonder does the way that we talk about",
    "start": "2399560",
    "end": "2405359"
  },
  {
    "text": "middleware because in middleware it's quite easy in go to have a function and you pass in an existing",
    "start": "2405359",
    "end": "2412000"
  },
  {
    "text": "Handler and you can pass in additional arguments too and it returns a new Handler U but in some way Modified by",
    "start": "2412000",
    "end": "2419240"
  },
  {
    "text": "whatever the middleware is going to do you know you could imagine it's very easy to run code before then calling the original Handler and things does that",
    "start": "2419240",
    "end": "2425800"
  },
  {
    "text": "kind of thing happen in functional programming too yeah absolutely middleware uh someone just said it in",
    "start": "2425800",
    "end": "2432760"
  },
  {
    "text": "yeah Barnaby just said middleware is just a builder pattern pretty much I mean that you take in this next function",
    "start": "2432760",
    "end": "2439319"
  },
  {
    "text": "basically and you wrap it all around a new Handler and that is called functional composition so you're",
    "start": "2439319",
    "end": "2445800"
  },
  {
    "text": "basically when you return so you take in a function and then you return a new",
    "start": "2445800",
    "end": "2451000"
  },
  {
    "text": "function and then inside of that new function you return you're calling the",
    "start": "2451000",
    "end": "2456400"
  },
  {
    "text": "next function and then middle as you build up middle Wares you keep composing",
    "start": "2456400",
    "end": "2461800"
  },
  {
    "text": "those functions deeper and deeper and deeper inside of each other So eventually let's say you add five middle",
    "start": "2461800",
    "end": "2468119"
  },
  {
    "text": "Wares you've got a top level function that nests five other functions beneath",
    "start": "2468119",
    "end": "2474119"
  },
  {
    "text": "it and then all the way at the bottom of that you've got your next function that's being called and assuming the",
    "start": "2474119",
    "end": "2480079"
  },
  {
    "text": "middlewares do stuff then there's a bunch of you know modifying the request and the response and checking stuff and",
    "start": "2480079",
    "end": "2486720"
  },
  {
    "text": "you know all that good stuff too it's very cool I think I've written this kind of thing well I've definitely written it",
    "start": "2486720",
    "end": "2492560"
  },
  {
    "text": "like this before without realizing it was functional programming I think yeah that's always fun a for Loop would be a",
    "start": "2492560",
    "end": "2499760"
  },
  {
    "text": "way of flattening all that out um because that's you basically have a tree of functions that goes down the chain",
    "start": "2499760",
    "end": "2507440"
  },
  {
    "text": "and then if you were to take a for Loop you would basically go through and execute a bunch of different functions",
    "start": "2507440",
    "end": "2514119"
  },
  {
    "text": "one after the other to check you know the request and the response and all the cool stuff that middleware does and then",
    "start": "2514119",
    "end": "2521000"
  },
  {
    "text": "at the very end of the for Loop then you would actually call the route are there any examples of this from the standard",
    "start": "2521000",
    "end": "2527160"
  },
  {
    "text": "library that we could point to yeah so uh if you look at sorts sorts do this",
    "start": "2527160",
    "end": "2533480"
  },
  {
    "text": "you can pass in a call back sorts and you don't really know what two uh",
    "start": "2533480",
    "end": "2540760"
  },
  {
    "text": "elements of the list you're going to get um but you take a function that just",
    "start": "2540760",
    "end": "2546240"
  },
  {
    "text": "takes two elements and returns whether or not the first one I think is bigger than the second or vice versa and",
    "start": "2546240",
    "end": "2553559"
  },
  {
    "text": "actually someone mentioned uh parallel programming bar yeah barnab you're on",
    "start": "2553559",
    "end": "2559440"
  },
  {
    "text": "fire in the channel um you mentioned parallel programming I swear I didn't",
    "start": "2559440",
    "end": "2564520"
  },
  {
    "text": "pay him to ask that question but it's a really awesome question because if you",
    "start": "2564520",
    "end": "2569800"
  },
  {
    "text": "think about that if you wanted to you could go and write a sorting library or a map function or for that matter a ton",
    "start": "2569800",
    "end": "2577280"
  },
  {
    "text": "of other functionality and if you're talking about passing in a call back to",
    "start": "2577280",
    "end": "2582839"
  },
  {
    "text": "a function you get this great abstraction that the function can then go ahead and start doing cool parallel",
    "start": "2582839",
    "end": "2589079"
  },
  {
    "text": "stuff just by calling that function in different go routines no it's interesting so is that because it",
    "start": "2589079",
    "end": "2596079"
  },
  {
    "text": "doesn't matter which order these things happen in because it's all deterministic in theory so that iterate over a slice",
    "start": "2596079",
    "end": "2603760"
  },
  {
    "text": "but run them all at the same time if you like the the end result should be the same yeah this is one of the benefits of",
    "start": "2603760",
    "end": "2610280"
  },
  {
    "text": "a pure function right if your call back is pure and you're running internally",
    "start": "2610280",
    "end": "2615920"
  },
  {
    "text": "you're running all those same callbacks in parallel then it's all good because the call back isn't going to rely on",
    "start": "2615920",
    "end": "2622280"
  },
  {
    "text": "some Global State that's going to be race conditioning um and it's not going to be calling some outside network",
    "start": "2622280",
    "end": "2629559"
  },
  {
    "text": "service and all that cool stuff and you can just like spin up a ton of go routines and then pipe the Val values",
    "start": "2629559",
    "end": "2636480"
  },
  {
    "text": "back in after each of those functions is done running yeah it reminds me it's not",
    "start": "2636480",
    "end": "2641920"
  },
  {
    "text": "quite the same but it reminds me in kind of microservice architecture world and message cues and things it reminds me of",
    "start": "2641920",
    "end": "2648680"
  },
  {
    "text": "kind of idempotent or idempotent um messages where if if the inputs are the",
    "start": "2648680",
    "end": "2655000"
  },
  {
    "text": "same then doesn't matter really how many times you do it the end results the same I'm guessing that sense we're trying to",
    "start": "2655000",
    "end": "2660760"
  },
  {
    "text": "get the component to be pure in some way it's not quite the same but the principle Act I've I've definitely seen",
    "start": "2660760",
    "end": "2667400"
  },
  {
    "text": "that benefit pay dividends that design pattern in the past yeah really the item",
    "start": "2667400",
    "end": "2673680"
  },
  {
    "text": "potency is um a subset of Purity in the you know hardcore functional Theory",
    "start": "2673680",
    "end": "2680480"
  },
  {
    "text": "world and really yeah item potency is usually enough for these sort of fan out",
    "start": "2680480",
    "end": "2685720"
  },
  {
    "text": "patterns uh and I actually read about another uh pattern in the microservices",
    "start": "2685720",
    "end": "2691280"
  },
  {
    "text": "world that applies here basically when if you're building a search end engine and you've got like you know a news feed",
    "start": "2691280",
    "end": "2698880"
  },
  {
    "text": "and a weather feed and of course the search results and you know whatever",
    "start": "2698880",
    "end": "2703920"
  },
  {
    "text": "images and all that stuff you can actually do a fan out and do multiple",
    "start": "2703920",
    "end": "2709160"
  },
  {
    "text": "requests to each of those image service and search service and weather and all that and you can just take the one that",
    "start": "2709160",
    "end": "2715800"
  },
  {
    "text": "comes back the fastest and dump the other ones on the ground that works because it's it's a get request and it's",
    "start": "2715800",
    "end": "2721960"
  },
  {
    "text": "item potent and it's not going to make any sort of side effects or other words it's just all reads and when you're",
    "start": "2721960",
    "end": "2728520"
  },
  {
    "text": "operating a scale that that can really give you some good speedups and sort of that long tail of request",
    "start": "2728520",
    "end": "2735440"
  },
  {
    "text": "latencies yeah I remember uh this pattern was actually um one of the examples that I believe Rob Pike gave in",
    "start": "2735440",
    "end": "2742160"
  },
  {
    "text": "uh one of uh one of his earlier talks where yeah he was uh basically talking",
    "start": "2742160",
    "end": "2747839"
  },
  {
    "text": "about sort of the exact same example you give gave whereby you could you could have multiple go routines go perform",
    "start": "2747839",
    "end": "2754280"
  },
  {
    "text": "that same exact operation right so you know because it's IDM poent it doesn't matter which one comes back first it",
    "start": "2754280",
    "end": "2760119"
  },
  {
    "text": "would have been the same result right in theory for all for all the for all the go routines so whichever one comes back",
    "start": "2760119",
    "end": "2765880"
  },
  {
    "text": "first um that's the one you go with so yeah that's a that's something I actually wish I I saw um more often",
    "start": "2765880",
    "end": "2772480"
  },
  {
    "text": "maybe I don't work on on things that work at that scale but that is a that is a very interesting and very useful",
    "start": "2772480",
    "end": "2778240"
  },
  {
    "text": "pattern actually I think I may have stolen this from him I saw a talk on this a while",
    "start": "2778240",
    "end": "2784240"
  },
  {
    "text": "ago too in the Ling world that this is sort of a pattern there too but to",
    "start": "2784240",
    "end": "2790000"
  },
  {
    "text": "implement it I think the code Rob showed was it was you know good amount of lines of code and it's the a functional",
    "start": "2790000",
    "end": "2798000"
  },
  {
    "text": "pattern would be to wrap that code in something like a map function or something like a you know do n or",
    "start": "2798000",
    "end": "2805200"
  },
  {
    "text": "something along those lines where you just pass a bunch of functions to another function and then under the",
    "start": "2805200",
    "end": "2811880"
  },
  {
    "text": "covers that thing is going to take care of you know spinning up all the go routines and running multiple of the",
    "start": "2811880",
    "end": "2818960"
  },
  {
    "text": "same function over and over and you know all the cool stuff about getting the result back that Returns the fastest but",
    "start": "2818960",
    "end": "2825920"
  },
  {
    "text": "to the caller really you're just writing one function per major functionality you",
    "start": "2825920",
    "end": "2832280"
  },
  {
    "text": "want and then the underlying thing does all this awesome magic to do the cool",
    "start": "2832280",
    "end": "2837359"
  },
  {
    "text": "background fast whatever awesome other stuff that you want your library to",
    "start": "2837359",
    "end": "2844720"
  },
  {
    "text": "do",
    "start": "2844720",
    "end": "2847720"
  },
  {
    "text": "this episode is brought to you by our friends at rollar move fast and fix things like we do here at Chang log",
    "start": "2850400",
    "end": "2856240"
  },
  {
    "text": "check them out at roar.com changelog resolve your errors of minutes and deploy with confidence catch your errors",
    "start": "2856240",
    "end": "2862240"
  },
  {
    "text": "in your software before your users do and if you're not using rollbar yet or you haven't tried it yet they want to",
    "start": "2862240",
    "end": "2868000"
  },
  {
    "text": "give you $100 to donate to open source via open Collective and all you got to do is go to roar.com changelog sign up",
    "start": "2868000",
    "end": "2874920"
  },
  {
    "text": "integrate robar into your app and once you do that they'll give you $100 to donate to open source once again",
    "start": "2874920",
    "end": "2881960"
  },
  {
    "text": "robert.com",
    "start": "2881960",
    "end": "2884640"
  },
  {
    "text": "[Music] changelog so I'm I'm kind of wondering",
    "start": "2891990",
    "end": "2898920"
  },
  {
    "text": "what the impact for for testing is right so in my on one layer of my mind I'm",
    "start": "2898920",
    "end": "2905760"
  },
  {
    "text": "thinking okay well if it's just a function um you can write you know at basically at the unit level you can",
    "start": "2905760",
    "end": "2911000"
  },
  {
    "text": "write a test to you know maybe test every nested function you could possibly",
    "start": "2911000",
    "end": "2916160"
  },
  {
    "text": "call for a given operation but at the same at the same time I'm thinking well is it enough to just test at the API",
    "start": "2916160",
    "end": "2922200"
  },
  {
    "text": "level and because the calls you're going to make you know is going to is going to sort of go through every single layer of",
    "start": "2922200",
    "end": "2928960"
  },
  {
    "text": "of functions that you're calling right every nested function anyway like how how do you approach sort of testing uh",
    "start": "2928960",
    "end": "2936240"
  },
  {
    "text": "differently if at all right in the functional style yeah I mean this is kind of where the the whole test the",
    "start": "2936240",
    "end": "2942559"
  },
  {
    "text": "interface not the implementation thing comes in I've heard that said a bunch in the go community and I've heard it",
    "start": "2942559",
    "end": "2949520"
  },
  {
    "text": "implemented a lot too I've seen it implemented and it it's awesome because",
    "start": "2949520",
    "end": "2954799"
  },
  {
    "text": "in go we can pull in all these insanely cool libraries that just make our life simpler and those are obviously tested",
    "start": "2954799",
    "end": "2963280"
  },
  {
    "text": "if it's a solid Library it's going to be tested really well and in the functional world you can kind of do the same thing",
    "start": "2963280",
    "end": "2969839"
  },
  {
    "text": "cuz if you're going to take you know five functions that each does a slightly different thing uh and you're going to",
    "start": "2969839",
    "end": "2976160"
  },
  {
    "text": "pass them into a package or Library that's going to take care of making them",
    "start": "2976160",
    "end": "2981280"
  },
  {
    "text": "all concurrent and cool and stuff really you just have to test each of those functions to make sure that it does the",
    "start": "2981280",
    "end": "2988720"
  },
  {
    "text": "right thing obviously and and also to make sure that it's doesn't have those side effects and it's item potent and",
    "start": "2988720",
    "end": "2995200"
  },
  {
    "text": "then beyond that you're going to just lean on that library or another person",
    "start": "2995200",
    "end": "3001359"
  },
  {
    "text": "that may have written the parallel stuff or maybe even yourself in a different",
    "start": "3001359",
    "end": "3006680"
  },
  {
    "text": "mindset that wrote that parallel stuff and you can split up the testing then you can test your business logic and",
    "start": "3006680",
    "end": "3013920"
  },
  {
    "text": "then in a whole different package in a whole different test Suite you can test the awesome parallel stuff uh completely",
    "start": "3013920",
    "end": "3021559"
  },
  {
    "text": "separately and it really makes it a lot easier then because you can just focus on your one thing in each different",
    "start": "3021559",
    "end": "3027359"
  },
  {
    "text": "context MH makes sense that's a piece that I really love about about you know",
    "start": "3027359",
    "end": "3032559"
  },
  {
    "text": "generally functional programming is since you've got these new higher level abstractions in general the testing just",
    "start": "3032559",
    "end": "3038839"
  },
  {
    "text": "becomes that much easier because you can think about stuff separately a lot more",
    "start": "3038839",
    "end": "3044200"
  },
  {
    "text": "would it be strange if you if you hadn't had much experience with functional programming you just a go programmer and",
    "start": "3044200",
    "end": "3050359"
  },
  {
    "text": "you've stumbled upon a repo that was written in the functional style would it make make sense at a glance and would",
    "start": "3050359",
    "end": "3057359"
  },
  {
    "text": "the code that you end up writing with it make sense or would it be different and would it feel different to the",
    "start": "3057359",
    "end": "3062920"
  },
  {
    "text": "programmers well so a lot of times uh when I first started in go I would see",
    "start": "3062920",
    "end": "3068960"
  },
  {
    "text": "code that would take callbacks and I would say to myself you",
    "start": "3068960",
    "end": "3074760"
  },
  {
    "text": "know what that's not really the ghost style like I didn't really think callbacks were a thing that you did in",
    "start": "3074760",
    "end": "3080880"
  },
  {
    "text": "go and I imagine that might be the same feeling that's someone new to the",
    "start": "3080880",
    "end": "3086319"
  },
  {
    "text": "functional style would say you know why why should I pass a function in what is",
    "start": "3086319",
    "end": "3091400"
  },
  {
    "text": "this Library going to do with my function I think yes it it would probably be kind of confusing because",
    "start": "3091400",
    "end": "3097799"
  },
  {
    "text": "it's this new thing that's not really idiomatic to go necessarily so I think docs are huge if someone is writing a",
    "start": "3097799",
    "end": "3105480"
  },
  {
    "text": "library in the functional style you know if you've got an exported function that takes a call back and does some insane",
    "start": "3105480",
    "end": "3112000"
  },
  {
    "text": "cool stuff with it you know writing those docs that that are going to be visible in God do.org and really",
    "start": "3112000",
    "end": "3120079"
  },
  {
    "text": "explicitly saying this is how we're going to use your function this is what you need to make sure your function does",
    "start": "3120079",
    "end": "3126520"
  },
  {
    "text": "you know if you don't do it this way we're going to return an error or you know your database is going to blow up",
    "start": "3126520",
    "end": "3132280"
  },
  {
    "text": "or whatever it might be like that is massive like that's going to be the most",
    "start": "3132280",
    "end": "3138440"
  },
  {
    "text": "important thing that you can do in your new functional style library for sure so",
    "start": "3138440",
    "end": "3144000"
  },
  {
    "text": "file path walk is is an example where it takes a function and it calls that",
    "start": "3144000",
    "end": "3149079"
  },
  {
    "text": "function for every file and directory that that it finds as it's walking that's a real kind of um the real",
    "start": "3149079",
    "end": "3155720"
  },
  {
    "text": "standard Library example of it and what they do is even though you actually don't have to do this they create a type",
    "start": "3155720",
    "end": "3162839"
  },
  {
    "text": "for that function and I think that's there for documentation purposes there's",
    "start": "3162839",
    "end": "3168079"
  },
  {
    "text": "like a walk funk it's called and it has its own type you could just describe the",
    "start": "3168079",
    "end": "3173280"
  },
  {
    "text": "function in the in the signature although that could get ugly but I suspect it's really there for as to your",
    "start": "3173280",
    "end": "3179559"
  },
  {
    "text": "point it's more of a documentation thing but at the end of the day you're just calling functions and methods and things",
    "start": "3179559",
    "end": "3185839"
  },
  {
    "text": "so at least the go code will will be able to understand it won't we if we if we read it we'd at least know that this",
    "start": "3185839",
    "end": "3192280"
  },
  {
    "text": "is calling a function and you know we have to sort of or does it does it get to the point where it really starts to",
    "start": "3192280",
    "end": "3198720"
  },
  {
    "text": "look weird where you do lots of nesting on one line and things like that yeah",
    "start": "3198720",
    "end": "3204000"
  },
  {
    "text": "it's like you said you know if you were to just copy that function signature into the file path. walk that would be",
    "start": "3204000",
    "end": "3212119"
  },
  {
    "text": "crazy you know if you start looking at that function signature it would end with like 10 closed parentheses or",
    "start": "3212119",
    "end": "3220319"
  },
  {
    "text": "something and at least for me when I see that my eyes just start glazing over",
    "start": "3220319",
    "end": "3225520"
  },
  {
    "text": "because you know I've got to like start counting them and it's it's crazy crazy business one thing that I love that they",
    "start": "3225520",
    "end": "3231760"
  },
  {
    "text": "did in that case is they created that file a walker but they also documented",
    "start": "3231760",
    "end": "3238079"
  },
  {
    "text": "that type super well and they said you might get an error in this case passed into the function and if you don't get",
    "start": "3238079",
    "end": "3245040"
  },
  {
    "text": "an error you're going to get the path if it's a file and you're going to get the",
    "start": "3245040",
    "end": "3250440"
  },
  {
    "text": "directory name if it's not a file and there's like tons of stuff in there that",
    "start": "3250440",
    "end": "3256280"
  },
  {
    "text": "I can look up without having to look up the documentation for the actual file",
    "start": "3256280",
    "end": "3261680"
  },
  {
    "text": "path. walk function and that lets me do that separation of context really well",
    "start": "3261680",
    "end": "3267880"
  },
  {
    "text": "because I don't have to think about how file path. walk is working I can just go look at that type and figure out how",
    "start": "3267880",
    "end": "3274640"
  },
  {
    "text": "does my function need to work and how do I need to like take into account all the possible errors that it might get and",
    "start": "3274640",
    "end": "3281400"
  },
  {
    "text": "all that cool stuff so that might actually be a good example of of if you are going to create a library a package",
    "start": "3281400",
    "end": "3289280"
  },
  {
    "text": "uh in the functional style the walk funk sort of documentation might be a good example to sort of emulate right so that",
    "start": "3289280",
    "end": "3295760"
  },
  {
    "text": "folks who are actually using your package know exactly how the the the function will be called and what to",
    "start": "3295760",
    "end": "3301839"
  },
  {
    "text": "expect uh um with sort of uh with every call of the function the different edge cases you need to sort of uh be prepared",
    "start": "3301839",
    "end": "3307680"
  },
  {
    "text": "to to receive right yeah for sure uh and another example that's front and center",
    "start": "3307680",
    "end": "3313160"
  },
  {
    "text": "is the HTTP do Handler and HTTP Handler Funk because those those don't really",
    "start": "3313160",
    "end": "3320760"
  },
  {
    "text": "deal with errors but those are a great way to say this is the function that's",
    "start": "3320760",
    "end": "3326079"
  },
  {
    "text": "going to basically be the call back when your server gets hit at this path and this is what you need to do in order to",
    "start": "3326079",
    "end": "3332799"
  },
  {
    "text": "write this function properly and that's another way just like the walk funk it's another way for you to focus on your",
    "start": "3332799",
    "end": "3339480"
  },
  {
    "text": "business logic and not have to think about you know how does this HTTP server work and I for me that's been huge like",
    "start": "3339480",
    "end": "3347839"
  },
  {
    "text": "many many times when I've been writing servers So speaking of Errors do errors work the same way do you think or do you",
    "start": "3347839",
    "end": "3354799"
  },
  {
    "text": "think of them as different how does the fact that go code actually returns an",
    "start": "3354799",
    "end": "3360119"
  },
  {
    "text": "error value and that's how it kind of does errors how does that fit into this actually feels like it might fit quite",
    "start": "3360119",
    "end": "3366319"
  },
  {
    "text": "well yeah yeah it does um so the pattern that we have now of doing if error not",
    "start": "3366319",
    "end": "3373000"
  },
  {
    "text": "equal to nil and then returning that is actually kind of the most basic rawest",
    "start": "3373000",
    "end": "3379000"
  },
  {
    "text": "form of this construct in functional programming uh usually called a maybe or",
    "start": "3379000",
    "end": "3384599"
  },
  {
    "text": "sometimes called option and uh I will try to explain this super quickly and as",
    "start": "3384599",
    "end": "3390119"
  },
  {
    "text": "clearly as possible an option is basically just the success value or an",
    "start": "3390119",
    "end": "3396480"
  },
  {
    "text": "error but never both and the option then you can check it to see hey did did this",
    "start": "3396480",
    "end": "3403319"
  },
  {
    "text": "thing error out and if it errored out then deal with the error and in the other case you know did this thing s did",
    "start": "3403319",
    "end": "3409760"
  },
  {
    "text": "this thing succeed then get the success value but the key thing about option and",
    "start": "3409760",
    "end": "3415400"
  },
  {
    "text": "the Annoying Thing to a lot of people about option is that you can't just get the success value it literally the type",
    "start": "3415400",
    "end": "3423039"
  },
  {
    "text": "just prevents you from getting the success value so it's kind of similar to go where you know you you get back that",
    "start": "3423039",
    "end": "3429880"
  },
  {
    "text": "error and and you've got to deal with it first class option is a slightly more",
    "start": "3429880",
    "end": "3436280"
  },
  {
    "text": "annoying and in-your-face way of telling you hey this thing might error out and",
    "start": "3436280",
    "end": "3442640"
  },
  {
    "text": "you've got to deal with that error before we're going to give you access to",
    "start": "3442640",
    "end": "3447799"
  },
  {
    "text": "that success value in your code wow more annoying and in your face so take that",
    "start": "3447799",
    "end": "3453240"
  },
  {
    "text": "any critics of go we might start to hit the inflection point there because now that you've got",
    "start": "3453240",
    "end": "3458880"
  },
  {
    "text": "this thing now you're talking about how do I get access to that that success and",
    "start": "3458880",
    "end": "3465559"
  },
  {
    "text": "then you start talking about like okay maybe I need to write a call back to get",
    "start": "3465559",
    "end": "3470880"
  },
  {
    "text": "access to it or maybe I need to do like do some kind of dot get function that",
    "start": "3470880",
    "end": "3476839"
  },
  {
    "text": "might Panic or something like that so this one is a really good one to know",
    "start": "3476839",
    "end": "3483200"
  },
  {
    "text": "about and I think it's more useful to know that the if error not equal to nil",
    "start": "3483200",
    "end": "3489359"
  },
  {
    "text": "is kind of a raw form of this type called option and also to know that it",
    "start": "3489359",
    "end": "3496680"
  },
  {
    "text": "could be worse basically if You' got this option type you got to deal with this thing a little bit more yes if",
    "start": "3496680",
    "end": "3503760"
  },
  {
    "text": "you've written about the functional programming in go haven't you on your blog I remember reading it yeah where",
    "start": "3503760",
    "end": "3509400"
  },
  {
    "text": "where's your blog how could how can our listeners find that uh my blog is AR ares.com uh I think SL blog I want to",
    "start": "3509400",
    "end": "3518880"
  },
  {
    "text": "say SL blog Arles and should we should that's a r c",
    "start": "3518880",
    "end": "3526559"
  },
  {
    "text": "l.com blog okay good and yeah there's one on there about uh decode which was a",
    "start": "3526559",
    "end": "3531760"
  },
  {
    "text": "a package it's it like a a Json paraa decoder package yeah this one was like a",
    "start": "3531760",
    "end": "3539559"
  },
  {
    "text": "an idea that I took from another functional language called Elm e LM and",
    "start": "3539559",
    "end": "3544960"
  },
  {
    "text": "Elm is a front-end language that aims to like basically just cut out JavaScript",
    "start": "3544960",
    "end": "3550559"
  },
  {
    "text": "completely why well I guess the Creator didn't like",
    "start": "3550559",
    "end": "3557559"
  },
  {
    "text": "JavaScript for some reason who knows why they say it's good to have an enemy if",
    "start": "3557559",
    "end": "3563000"
  },
  {
    "text": "you're doing something it's good to have an enemy sometimes but fair enough yeah it's like uh that necessity is the",
    "start": "3563000",
    "end": "3568640"
  },
  {
    "text": "mother of invention type of thing so they um the creator of elm and a lot of",
    "start": "3568640",
    "end": "3574039"
  },
  {
    "text": "the hardcore followers they really love that it's a purely functional language",
    "start": "3574039",
    "end": "3580760"
  },
  {
    "text": "technically not quite pure but for the for the most part it's completely pure",
    "start": "3580760",
    "end": "3585799"
  },
  {
    "text": "and um you just write all of your front-end code in this way that it deals",
    "start": "3585799",
    "end": "3592559"
  },
  {
    "text": "it forces you to deal with all the possible errors that can happen and then the elm compiler compiles it down to",
    "start": "3592559",
    "end": "3598520"
  },
  {
    "text": "this you know crazy looking compressed JavaScript at the end of the day um but one of the cool things about Elm is",
    "start": "3598520",
    "end": "3604880"
  },
  {
    "text": "their Json support their especially their decoding support so their",
    "start": "3604880",
    "end": "3610160"
  },
  {
    "text": "decoding basically looks like a builder pattern so you'll you would say",
    "start": "3610160",
    "end": "3615559"
  },
  {
    "text": "something like when I get back this bucket of bites I expect an array and",
    "start": "3615559",
    "end": "3621799"
  },
  {
    "text": "then inside of that array I expect the first element to be a number and in 32",
    "start": "3621799",
    "end": "3627680"
  },
  {
    "text": "the second element to be a string and maybe the third element to be an object",
    "start": "3627680",
    "end": "3632720"
  },
  {
    "text": "but you also have to define the shape exactly what that object should look like and this is kind of starting to",
    "start": "3632720",
    "end": "3639640"
  },
  {
    "text": "sound like the built-in en coding. Json but the only difference is that you get",
    "start": "3639640",
    "end": "3645760"
  },
  {
    "text": "to Define exactly what should come in you can't do things like optional or",
    "start": "3645760",
    "end": "3652000"
  },
  {
    "text": "non-optional you actually have to call those out out in the decoder",
    "start": "3652000",
    "end": "3657039"
  },
  {
    "text": "functionally um so it's a crazy idea it's sort of a little bit hard to explain I tried to write some decent",
    "start": "3657039",
    "end": "3664039"
  },
  {
    "text": "docs in there but it's sort of a different take on Json decoding and it doesn't have performance",
    "start": "3664039",
    "end": "3671880"
  },
  {
    "text": "that's too horrible it's definitely not faster than encoding Json but it's sort",
    "start": "3671880",
    "end": "3678599"
  },
  {
    "text": "of another take where you could actually use this thing and not expect your uh your rest API to blow up awesome and are",
    "start": "3678599",
    "end": "3686240"
  },
  {
    "text": "there any other projects that you've seen that use this kind of Builder pattern I think the um do remember the",
    "start": "3686240",
    "end": "3692240"
  },
  {
    "text": " there's a mongod DB it's called mango it's MGO that's the name of the package that was the driver for mongod",
    "start": "3692240",
    "end": "3699160"
  },
  {
    "text": "DB and that used to have this kind of fluent API which feels a bit like that this Builder pattern um didn't you also",
    "start": "3699160",
    "end": "3706079"
  },
  {
    "text": "mention that Buffalo has uh this style too yeah a lot of the query Builders out",
    "start": "3706079",
    "end": "3712279"
  },
  {
    "text": "there uh do and buffalo has pop pop is their SQL query Builder um and that's",
    "start": "3712279",
    "end": "3720160"
  },
  {
    "text": "got the whole thing where you would do new query do select do filter I think",
    "start": "3720160",
    "end": "3726920"
  },
  {
    "text": "they have one called filter. order and it's kind of like SQL sort of translated",
    "start": "3726920",
    "end": "3732960"
  },
  {
    "text": "into a go API and each time you do one of those filter do select all that stuff",
    "start": "3732960",
    "end": "3740359"
  },
  {
    "text": "you get a new struct back a new query struct back um and and then you can call",
    "start": "3740359",
    "end": "3747720"
  },
  {
    "text": "the next function on that struck so that's that's the Builder pattern but it's also pure because each time when",
    "start": "3747720",
    "end": "3754359"
  },
  {
    "text": "you pass in select you know star from dogs from your dog database you're going",
    "start": "3754359",
    "end": "3760799"
  },
  {
    "text": "to get back a new struct that has inside of it that you're the the information that you're about to select everything",
    "start": "3760799",
    "end": "3767319"
  },
  {
    "text": "from the dog's database it's super useful that's where you could do the branching thing right you could have a function then that's going to go and get",
    "start": "3767319",
    "end": "3773799"
  },
  {
    "text": "the latest dogs and you could have a function that goes and gets the hairiest dogs exactly",
    "start": "3773799",
    "end": "3779880"
  },
  {
    "text": "but you could base them off that original thing my uh improvising use cases Is Not Great by the way just to",
    "start": "3779880",
    "end": "3786559"
  },
  {
    "text": "let you know I started with dog so you just you just going off of my face yeah",
    "start": "3786559",
    "end": "3792799"
  },
  {
    "text": "no one would blame you given sort of a your experience and go and functional",
    "start": "3792799",
    "end": "3799000"
  },
  {
    "text": "like what would you say like a gopher who is sort of interesting uh interested",
    "start": "3799000",
    "end": "3804880"
  },
  {
    "text": "rather uh um in sort of knowing how to I'm asking this really for myself",
    "start": "3804880",
    "end": "3810559"
  },
  {
    "text": "it's like okay it all sounds interesting there's there's some benefits to be gained there but I don't necessarily",
    "start": "3810559",
    "end": "3815839"
  },
  {
    "text": "want to sort of dive in head first into the functional world to try and",
    "start": "3815839",
    "end": "3821000"
  },
  {
    "text": "basically claw my way back out to figure out what of that I can actually use right in my day-to-day go right so what",
    "start": "3821000",
    "end": "3827400"
  },
  {
    "text": "what would you say is a good resource other than your than your blog where you have some some some articles in in in",
    "start": "3827400",
    "end": "3834039"
  },
  {
    "text": "the go functional uh um um GitHub repository where you have some examples there as well what would you say is a",
    "start": "3834039",
    "end": "3839839"
  },
  {
    "text": "good sort of a primer right for that is just just approachable enough for a goer",
    "start": "3839839",
    "end": "3845160"
  },
  {
    "text": "to to sort of glean some things and sort of bring back to to to their go yeah there's so there's not a ton about",
    "start": "3845160",
    "end": "3851720"
  },
  {
    "text": "functional programming specifically with go um but there is a ton of functional",
    "start": "3851720",
    "end": "3857760"
  },
  {
    "text": "programming resources out there that are in non-o languages um so if it's with so",
    "start": "3857760",
    "end": "3864960"
  },
  {
    "text": "I would say look in your own code and see if you've got Global variables and",
    "start": "3864960",
    "end": "3870799"
  },
  {
    "text": "you know open up a new branch and see if you can start passing Global variables into your functions instead and and that",
    "start": "3870799",
    "end": "3877839"
  },
  {
    "text": "might push you down this path of starting to return functions instead of returning values other values um and",
    "start": "3877839",
    "end": "3886319"
  },
  {
    "text": "that kind of thing and it's it's kind of simple it might feel like you know why am I doing this um but it'll push you",
    "start": "3886319",
    "end": "3892279"
  },
  {
    "text": "down the path a little bit but then then if you step outside of go um there's",
    "start": "3892279",
    "end": "3897720"
  },
  {
    "text": "tons of stuff there's one that I love called learn you and erlang for great good um it's in llang the llang language",
    "start": "3897720",
    "end": "3906440"
  },
  {
    "text": "we'll mix those words up as well to form a correct sentence yeah learn you and",
    "start": "3906440",
    "end": "3912880"
  },
  {
    "text": "llang um there's the same the same thing for hll hang on sorry could you say that",
    "start": "3912880",
    "end": "3919039"
  },
  {
    "text": "sentence again I ju I just really didn't pause it one more time please learn you",
    "start": "3919039",
    "end": "3924359"
  },
  {
    "text": "and earling for great good it sounds like you've had a stroke yeah yeah I",
    "start": "3924359",
    "end": "3929680"
  },
  {
    "text": "promise I haven't okay good but uh you know these these resources are you know",
    "start": "3929680",
    "end": "3935960"
  },
  {
    "text": "I guess they're probably 90% about functional programming and they don't really assume any familiarity with the",
    "start": "3935960",
    "end": "3943279"
  },
  {
    "text": "language itself but they do try to really dive into these sort of functional",
    "start": "3943279",
    "end": "3950319"
  },
  {
    "text": "programming 102 Concepts um which would be things like that map function and",
    "start": "3950319",
    "end": "3957359"
  },
  {
    "text": "some stuff about parallel programming and and then you know when you go to page two it's like you're going to read",
    "start": "3957359",
    "end": "3963920"
  },
  {
    "text": "page two like 10 times because then you start doing these like higher level things that take in functions that take",
    "start": "3963920",
    "end": "3970599"
  },
  {
    "text": "in functions and your head will explode but page one even page one alone will",
    "start": "3970599",
    "end": "3977880"
  },
  {
    "text": "bring you back to go with some really interesting sort of frame of mind I",
    "start": "3977880",
    "end": "3984400"
  },
  {
    "text": "actually I promise that you can go into your code base and you can start at least seeing like hey this this might be",
    "start": "3984400",
    "end": "3990920"
  },
  {
    "text": "an interesting place to do a map instead of a for Loop and here's the reasons why",
    "start": "3990920",
    "end": "3996920"
  },
  {
    "text": "and that kind of stuff that's great actually Erin I would love to see a talk on that very subject which is just",
    "start": "3996920",
    "end": "4003520"
  },
  {
    "text": "functional programming um patterns and philosophies applied in go very useful",
    "start": "4003520",
    "end": "4009880"
  },
  {
    "text": "ways that would be a great talk because we we've talked about a few of them on this show but it would be cool to",
    "start": "4009880",
    "end": "4015240"
  },
  {
    "text": "actually look at some real world examples of where these principles if not exactly uh functional programming",
    "start": "4015240",
    "end": "4022760"
  },
  {
    "text": "but some of the principles um some of the shared principles which which might also help and make our code better too",
    "start": "4022760",
    "end": "4028440"
  },
  {
    "text": "be a great talk was that a hand yeah the thing that is sort of missing",
    "start": "4028440",
    "end": "4035720"
  },
  {
    "text": "is like at least for me like if I was going to give that talk I would go",
    "start": "4035720",
    "end": "4041599"
  },
  {
    "text": "through like the kubernetes codebase let's say that's an extreme codebase",
    "start": "4041599",
    "end": "4047240"
  },
  {
    "text": "it's massive right uh and there's tons of opportunity in there to like you know",
    "start": "4047240",
    "end": "4052760"
  },
  {
    "text": "refactor a little bit there's not this isn't like go and replace 10,000 lines",
    "start": "4052760",
    "end": "4058119"
  },
  {
    "text": "of code it's like uh I know like the client Builder library in kubernetes so",
    "start": "4058119",
    "end": "4064119"
  },
  {
    "text": "the code that sets up the kubernetes client and does all the cool stuff there's a few places where you could",
    "start": "4064119",
    "end": "4070200"
  },
  {
    "text": "replace like 20 lines of code with with six or something like that and and",
    "start": "4070200",
    "end": "4076839"
  },
  {
    "text": "that's the kind of thing that like I would go for Not only would I talk about it but if I was you know maintaining the",
    "start": "4076839",
    "end": "4084799"
  },
  {
    "text": "client creation code in the kubernetes code base that's the kind of stuff I would go for is to even just in the",
    "start": "4084799",
    "end": "4092599"
  },
  {
    "text": "implementation and not in the interface just go in and you know replace a couple lines with a few fewer lines uh and",
    "start": "4092599",
    "end": "4100798"
  },
  {
    "text": "start there and you can kind of build up from there as you gain team in the functional World amazing eron thank you",
    "start": "4100799",
    "end": "4108000"
  },
  {
    "text": "so much for joining us today and educating us on functional programming who knew well thank you for having me no",
    "start": "4108000",
    "end": "4114838"
  },
  {
    "text": "it's been great well uh this channel is the some of the comments in here are really awesome and uh marby did it again",
    "start": "4114839",
    "end": "4123560"
  },
  {
    "text": "he said what's missing from go to make go a real competitor in the space I think um without adding any new features",
    "start": "4123560",
    "end": "4131960"
  },
  {
    "text": "like cough cough generics bless you thank you I really think that what is missing are some more like real",
    "start": "4131960",
    "end": "4139159"
  },
  {
    "text": "production codebase examples of some functional Concepts M so you know I I",
    "start": "4139159",
    "end": "4145920"
  },
  {
    "text": "would say you know if if generics came it would be a Cambrian explosion of",
    "start": "4145920",
    "end": "4151159"
  },
  {
    "text": "functional Concepts and really good functional libraries general purpose libraries in Ino but that's not to say",
    "start": "4151159",
    "end": "4159080"
  },
  {
    "text": "that there's a ton of opportunity even right now to build functional Rel awesome stuff in the standard Library",
    "start": "4159080",
    "end": "4167480"
  },
  {
    "text": "sorry in libraries and like I'll shamelessly plug this decode library but",
    "start": "4167480",
    "end": "4173080"
  },
  {
    "text": "not because I want people to use it you're welcome to if you do but it's really more that like I would love to",
    "start": "4173080",
    "end": "4179080"
  },
  {
    "text": "just have this start a conversation you you people go in try it out submit an",
    "start": "4179080",
    "end": "4184238"
  },
  {
    "text": "issue tell me I'm dumb whatever it may be it would just be really cool to expand sort of mindsets in the go",
    "start": "4184239",
    "end": "4191400"
  },
  {
    "text": "Community using sort of functional programming brilliant I agree so check it out that one is github.com",
    "start": "4191400",
    "end": "4198080"
  },
  {
    "text": "goyen functional decode and it's go functional are there other repos in that",
    "start": "4198080",
    "end": "4204400"
  },
  {
    "text": "organization there are um most of them are just like I put a repo up and wrote",
    "start": "4204400",
    "end": "4211040"
  },
  {
    "text": "a main.go and then said be cool if I did this and that's been",
    "start": "4211040",
    "end": "4216239"
  },
  {
    "text": "completely so that's really the only one with some meat in it the rest are uh",
    "start": "4216239",
    "end": "4221400"
  },
  {
    "text": "rest are just defunct okay but you seem to be the person to get in touch with if anyone's interested in contributing yeah",
    "start": "4221400",
    "end": "4229120"
  },
  {
    "text": "DM me on slack or submit an issue or whatever it may be okay",
    "start": "4229120",
    "end": "4234280"
  },
  {
    "text": "brilliant well thank you so much we have come to the end of our um podcast today",
    "start": "4234280",
    "end": "4241800"
  },
  {
    "text": "uh it's been emotional not emotional but functional if anything um thank you to",
    "start": "4241800",
    "end": "4248040"
  },
  {
    "text": "Erin again for educating us here we've learned a lot for sure about this um the",
    "start": "4248040",
    "end": "4253840"
  },
  {
    "text": "most surprising thing for me is actually that there's there's a lot of these ideas can be applied today to your go",
    "start": "4253840",
    "end": "4260480"
  },
  {
    "text": "code and you can start to see the benefits and I think learning about the the advantages and the reasons why these",
    "start": "4260480",
    "end": "4267520"
  },
  {
    "text": "other things exist wherever you can do that you might find there's always um",
    "start": "4267520",
    "end": "4272719"
  },
  {
    "text": "little bits and pieces that you can apply in go to your own projects as well so absolutely check it out what can you",
    "start": "4272719",
    "end": "4279520"
  },
  {
    "text": "build with it let us know and that's it that's our show for this week we'll see you next",
    "start": "4279520",
    "end": "4287000"
  },
  {
    "text": "week all right go time is back it's been so much work behind the scenes but it's definitely paying off now and it's so",
    "start": "4288679",
    "end": "4295400"
  },
  {
    "text": "much fun producing this show we have so many people listening live thank you so much for that we love you and if you're",
    "start": "4295400",
    "end": "4301239"
  },
  {
    "text": "not yet hang with us in go for slack we have a channel called go time FM look it up you'll find us chat with the",
    "start": "4301239",
    "end": "4306480"
  },
  {
    "text": "community share stories share coffee recipes whatever it's a lot of fun also we have discussions on every single",
    "start": "4306480",
    "end": "4313000"
  },
  {
    "text": "episode at Chang law.com so head to cha.com slgo time find this episode and",
    "start": "4313000",
    "end": "4318639"
  },
  {
    "text": "discuss it with the community and of course thank you to our sponsors digital ocean strong DM and also go CD huge",
    "start": "4318639",
    "end": "4325800"
  },
  {
    "text": "thanks to fastly for being our bandwidth partner hit the fast.com to learn more and we move fast and fix things around",
    "start": "4325800",
    "end": "4331520"
  },
  {
    "text": "here changelog because of robbar check them out at rar.com changelog and we're hosted on Lino Cloud servers at alo.com",
    "start": "4331520",
    "end": "4338400"
  },
  {
    "text": "changelog our music is by the one and only brake master cylinder and if you want to hear more episodes like this",
    "start": "4338400",
    "end": "4344800"
  },
  {
    "text": "subscribe to our Master feed at Chang law.com or go to your podcast app and search for Chang law Master you'll find",
    "start": "4344800",
    "end": "4351560"
  },
  {
    "text": "it subscribe get all of our shows in one single feed as well as some extras that only hit the master feed thanks for",
    "start": "4351560",
    "end": "4358239"
  },
  {
    "text": "listening we'll see you [Music]",
    "start": "4358239",
    "end": "4372440"
  },
  {
    "text": "soon [Music]",
    "start": "4372440",
    "end": "4392729"
  },
  {
    "text": "oh",
    "start": "4394719",
    "end": "4397719"
  }
]