[
  {
    "text": "it's just striving to be lazy it's less code for me to write or maintain and if I need to change something it's just the",
    "start": "120",
    "end": "5759"
  },
  {
    "text": "dto yeah I really like that that's kind of the big promising feature that I see of all of this and it really makes",
    "start": "5759",
    "end": "11000"
  },
  {
    "text": "approaching graphql on the back end quite easy I think I mean that's what it's all about how do you not have to do",
    "start": "11000",
    "end": "16560"
  },
  {
    "text": "anything and just get up and running quickly so you can get back to reing Rack or whatever you want to be doing",
    "start": "16560",
    "end": "21720"
  },
  {
    "text": "that actually interest you that's the important part yeah",
    "start": "21720",
    "end": "26240"
  },
  {
    "text": "absolutely big thanks to our partners Leno fastly and launch Darkly we love Lindo they keep it fast and simple get",
    "start": "26840",
    "end": "34040"
  },
  {
    "text": "$100 in credit at l.com changelog our bandwidth is provided by fastly learn",
    "start": "34040",
    "end": "39719"
  },
  {
    "text": "more at fastly.com and get your feature Flags Power by launch Darkly get a demo",
    "start": "39719",
    "end": "44800"
  },
  {
    "text": "at launch dark.com what's up party people this episode is",
    "start": "44800",
    "end": "50480"
  },
  {
    "text": "brought to you by alzero alzero is a for developers bu developers identity platform built for the cloud era they",
    "start": "50480",
    "end": "57559"
  },
  {
    "text": "secure billions of logins every year identity is the front door of every user interaction and the login experience can",
    "start": "57559",
    "end": "64198"
  },
  {
    "text": "make or break a user's first impression identity and authentication is never a set it and forget it thing that means",
    "start": "64199",
    "end": "70280"
  },
  {
    "text": "when teams decide to roll their own they are taking on the full burden of constantly evolving industry standards",
    "start": "70280",
    "end": "75400"
  },
  {
    "text": "customer expectations and data breach tactics and they often don't have the time expertise or resources to meet",
    "start": "75400",
    "end": "81479"
  },
  {
    "text": "those needs this takes away from critical time needed to innovate and to improve their core product off zero has",
    "start": "81479",
    "end": "87119"
  },
  {
    "text": "solved this problem for every developer to give teams their time back and to make applications more secure with off",
    "start": "87119",
    "end": "93399"
  },
  {
    "text": "zero security compliance and Industry standards they're always up to dat developers are free to provide the login",
    "start": "93399",
    "end": "100360"
  },
  {
    "text": "options their users want with the security their application demands make login off Zer problem not yours learn",
    "start": "100360",
    "end": "107600"
  },
  {
    "text": "more at off zero.com again off zero.com [Music]",
    "start": "107600",
    "end": "114720"
  },
  {
    "text": "this is JS party your weekly celebration of JavaScript and the web our next",
    "start": "117880",
    "end": "125360"
  },
  {
    "text": "front-end Feud takes place at the react Advanced Afterparty on October 22nd",
    "start": "125360",
    "end": "130800"
  },
  {
    "text": "it'll be a lot of fun you don't want to miss it find out more at react advanced.com all right let's do it hey",
    "start": "130800",
    "end": "137440"
  },
  {
    "text": "it's party time",
    "start": "137440",
    "end": "140160"
  },
  {
    "text": "y'all",
    "start": "148840",
    "end": "151840"
  },
  {
    "text": "hello JS party welcome to another fantastic episode of your favorite show about JavaScript that's a party as well",
    "start": "154200",
    "end": "161360"
  },
  {
    "text": "it's JS party and I'm your host today Nick nii Hoy Hoy and uh with me today I",
    "start": "161360",
    "end": "166800"
  },
  {
    "text": "have a very special guest this is Doug Martin Doug say hello hi everyone welcome to the show so tell us a little",
    "start": "166800",
    "end": "172959"
  },
  {
    "text": "bit about yourself Doug well let's see I'm Doug I'm the VP of engineering at a company called cofo we're a fintech",
    "start": "172959",
    "end": "179599"
  },
  {
    "text": "company based out of Kansas City I've been doing open source software for about 10 years had a few projects that",
    "start": "179599",
    "end": "186080"
  },
  {
    "text": "have had a little bit of traction but I've always been interested in building tools to make other Engineers more",
    "start": "186080",
    "end": "191640"
  },
  {
    "text": "productive it's just always kind of been mymo I've been working with JavaScript since 2008 starting with Dojo so Dojo",
    "start": "191640",
    "end": "198720"
  },
  {
    "text": "Nick knows all about that one yeah that's right so Dojo already did it but yeah I'm excited to be here yeah",
    "start": "198720",
    "end": "206080"
  },
  {
    "text": "yeah and um we actually work at the same company uh c2fo so that's awesome we've known each other for for several years",
    "start": "206080",
    "end": "212799"
  },
  {
    "text": "and I've used a lot of the JavaScript uh that you've written the projects that make my life better in a lot of ways so",
    "start": "212799",
    "end": "219640"
  },
  {
    "text": "uh yeah we're we're here to talk about one of them specifically and that is nestjs query but first I don't think",
    "start": "219640",
    "end": "226239"
  },
  {
    "text": "that we've really talked about nestjs on this podcast before so Doug I think that",
    "start": "226239",
    "end": "231920"
  },
  {
    "text": "you'd be a good person to kind of give us an introduction to what that actually is yeah so Nest is a server side",
    "start": "231920",
    "end": "238879"
  },
  {
    "text": "framework that's really typescript first you can always drop back to JavaScript if you want to but why would you want to",
    "start": "238879",
    "end": "244079"
  },
  {
    "text": "I don't know I honestly can't I can't think of a reason why you'd want to um",
    "start": "244079",
    "end": "249480"
  },
  {
    "text": "but um Nest is it's an interesting framework it's one of the first ones I found that really guides you into a nice",
    "start": "249480",
    "end": "256840"
  },
  {
    "text": "architecture some of the things that initially drew me to it were that had dependency injection like built-in first",
    "start": "256840",
    "end": "262280"
  },
  {
    "text": "class and the way it really has you organize your modules so you can expose your services to other modules but",
    "start": "262280",
    "end": "269080"
  },
  {
    "text": "you're you can be picky about what you want to actually expose out um which is cool it's built on top of Express or",
    "start": "269080",
    "end": "274720"
  },
  {
    "text": "fastify you get to choose and it kind of abstracts some of that away from you going back to the architecture point one",
    "start": "274720",
    "end": "280039"
  },
  {
    "text": "of the things that it does well is it provides you a place to kind of put everything so before I'd oftentimes find",
    "start": "280039",
    "end": "286919"
  },
  {
    "text": "myself putting a lot of stuff into middleware and wasn't really sure okay where does this belong so create another middleware but sjs it really gives you",
    "start": "286919",
    "end": "294479"
  },
  {
    "text": "pipes to transform the data that's coming in you can do validation in there you can do guard for authorization and",
    "start": "294479",
    "end": "301440"
  },
  {
    "text": "then interceptors to find like logic before and after a request or method so for like logging timing where before you",
    "start": "301440",
    "end": "309000"
  },
  {
    "text": "would all be shoving that into one place so I really like that it it focuses on single responsibility which is pretty",
    "start": "309000",
    "end": "316560"
  },
  {
    "text": "neat when looking at it it felt like one of the it was still relatively new but it felt pretty mature in some of the",
    "start": "316560",
    "end": "323319"
  },
  {
    "text": "design decisions it makes and it gets me to doing business logic and the interesting stuff a lot quicker which is",
    "start": "323319",
    "end": "329960"
  },
  {
    "text": "something I appreciate yeah definitely there's a couple of points that you touched on in there that I thought were important and um the first one being",
    "start": "329960",
    "end": "336520"
  },
  {
    "text": "kind of built on top of either fastify or Express I think I've only ever really used it with Express so far but we do",
    "start": "336520",
    "end": "343360"
  },
  {
    "text": "have a show upcoming on fastify so I'm excited to to learn more about that but",
    "start": "343360",
    "end": "349160"
  },
  {
    "text": "when you get into like an Express app like it it does feel like there's not a lot of guided structure to it right you",
    "start": "349160",
    "end": "356039"
  },
  {
    "text": "can really just kind of create your routes and then they're just doing whatever they need to do and returning",
    "start": "356039",
    "end": "361680"
  },
  {
    "text": "things yep and so you end up with a lot of structure built like custom structure and it's like one of those things where",
    "start": "361680",
    "end": "367599"
  },
  {
    "text": "no no Express app is the same in a lot of ways but Nest kind of takes a",
    "start": "367599",
    "end": "373240"
  },
  {
    "text": "different approach and everything is very structured it has like a much more handh holdy kind of approach I would say",
    "start": "373240",
    "end": "379199"
  },
  {
    "text": "with like you know there's generators to generate the exact files that you need Y",
    "start": "379199",
    "end": "384639"
  },
  {
    "text": "and then you did mention that it is built around dependency injection and so the first real experience that I ever",
    "start": "384639",
    "end": "390120"
  },
  {
    "text": "had with that uh not really considering myself like a Java developer was with angular and when I saw it I was like",
    "start": "390120",
    "end": "397039"
  },
  {
    "text": "this kind of looks a lot like modern angular code did they kind of take I think they did take a lot of cues from",
    "start": "397039",
    "end": "402360"
  },
  {
    "text": "angular yeah sometimes you'll see them reference angular in the docs and I think on the back end it makes a little bit more sense yeah when you're creating",
    "start": "402360",
    "end": "408680"
  },
  {
    "text": "some of these apis on the front end it felt awkward to me sometimes when doing that in the front end but it definitely",
    "start": "408680",
    "end": "414720"
  },
  {
    "text": "led to more testable code which is one of the things I love about dependency injection is that you're not tying",
    "start": "414720",
    "end": "420080"
  },
  {
    "text": "yourself to an implementation as long as you're conforming to interfaces and stuff like that you can mock that stuff",
    "start": "420080",
    "end": "425599"
  },
  {
    "text": "out a lot easier which is something that's really cool so it definitely is composition over inheritance yeah",
    "start": "425599",
    "end": "431360"
  },
  {
    "text": "usually yeah I like that a lot and I I think that you're right it does feel more at home on the server on the back",
    "start": "431360",
    "end": "437400"
  },
  {
    "text": "end side as opposed to like the front end with like you know the front end you don't really even touch like classes or",
    "start": "437400",
    "end": "443680"
  },
  {
    "text": "class-based approaches anymore but this is like everything is a class even things that you might just have a",
    "start": "443680",
    "end": "449280"
  },
  {
    "text": "complet completely empty class but your decorator has to attach to a class somewhere yep so it's it's definitely",
    "start": "449280",
    "end": "455800"
  },
  {
    "text": "you know going the complete opposite way of of tools like react and other modern front-end Frameworks which is cool I do",
    "start": "455800",
    "end": "462160"
  },
  {
    "text": "think that it fits well because it does give you a lot of structure and maybe we could break down a little bit of that",
    "start": "462160",
    "end": "467599"
  },
  {
    "text": "structure so you mentioned like being able to use what was it there was pipes and yeah so there's pipes guards",
    "start": "467599",
    "end": "474479"
  },
  {
    "text": "interceptors I think one thing that's important to touch on is that it's kind of transport agnostics so as long as you",
    "start": "474479",
    "end": "479960"
  },
  {
    "text": "have your structure in place you can have rest you can do microservices you can do graphql and you'll fill at home",
    "start": "479960",
    "end": "485520"
  },
  {
    "text": "in probably each one of those because you can reuse your services um and then",
    "start": "485520",
    "end": "490800"
  },
  {
    "text": "for each one of the end points that you're exposing you can throw a guard on there to make sure that only certain",
    "start": "490800",
    "end": "496039"
  },
  {
    "text": "people can access that or you can do the pipes to convert a request parameter coming into an INT or validate that it",
    "start": "496039",
    "end": "502840"
  },
  {
    "text": "matches some format which is pretty interesting especially when so when I started with Nest I was looking at rest",
    "start": "502840",
    "end": "509560"
  },
  {
    "text": "at first but I definitely wanted to start getting into graphql more and so I created basically a rest endpoint a",
    "start": "509560",
    "end": "515320"
  },
  {
    "text": "graphql endpoint and they they were both really similar one's a controller and one's a resolver that's the big",
    "start": "515320",
    "end": "521279"
  },
  {
    "text": "difference but then I could reuse the same services in the that back them so I didn't have to really worry about",
    "start": "521279",
    "end": "526959"
  },
  {
    "text": "changing any business logic or how I'm accessing the database I'm just purely",
    "start": "526959",
    "end": "532200"
  },
  {
    "text": "flipping that out and the same I think applies for a lot of the microservices stuff so yeah you can have requests",
    "start": "532200",
    "end": "537560"
  },
  {
    "text": "coming you can connect to Rabbit and Q or or whatever and really plug into that pretty seamlessly and I think that's one",
    "start": "537560",
    "end": "544680"
  },
  {
    "text": "thing I really appreciate about how they Design This framework is that they they really encourage you to have those separate layers so you have your",
    "start": "544680",
    "end": "551480"
  },
  {
    "text": "controller or resolver you have your service you have your entities and dto it feels like a lot of files at first",
    "start": "551480",
    "end": "557680"
  },
  {
    "text": "but then once you start going your files become pretty short and they're very pointed in what they're trying to address which is MH like we talked about",
    "start": "557680",
    "end": "564760"
  },
  {
    "text": "with Express that sometimes got muddied up and they definitely encourage you down a certain PA yeah definitely so",
    "start": "564760",
    "end": "570480"
  },
  {
    "text": "breaking that down maybe a little bit more you have like everything kind of starts with a module right the module is kind of the main file that will dictate",
    "start": "570480",
    "end": "578600"
  },
  {
    "text": "yeah it kind of sets up how the dependency injection will work and like what can be injected and things like",
    "start": "578600",
    "end": "583839"
  },
  {
    "text": "that yep and then from there you mentioned like controllers and services can you kind of give a brief explanation",
    "start": "583839",
    "end": "589839"
  },
  {
    "text": "of each of those so everything within there is kind of a provider I mean so njs will expose in the module you can",
    "start": "589839",
    "end": "596640"
  },
  {
    "text": "set up what your controllers are and then everything else is a provider it's something that can be injected into",
    "start": "596640",
    "end": "601800"
  },
  {
    "text": "something else through the Constructor that was one of the most confusing pieces when I got started was like what the heck is a provider cuz everything's",
    "start": "601800",
    "end": "607360"
  },
  {
    "text": "a provider all the things are providers yeah it that was something that was confusing to me at first too until I",
    "start": "607360",
    "end": "613839"
  },
  {
    "text": "started play with it it took probably 30 minutes or so and then I'm like oh I'm starting to get it it's when you start",
    "start": "613839",
    "end": "619240"
  },
  {
    "text": "exporting stuff that it gets a little confusing or when it doesn't work quite as you expected but it's pretty good",
    "start": "619240",
    "end": "625160"
  },
  {
    "text": "about telling you what you did wrong so you you create your controller and then you can have your services in there which we say it's",
    "start": "625160",
    "end": "633399"
  },
  {
    "text": "pretty uh structured the way it does it but honestly your services can be anything that's injectable and I don't",
    "start": "633399",
    "end": "638800"
  },
  {
    "text": "think they necessarily always call it a service um but it's usually just a provider so you could have like your",
    "start": "638800",
    "end": "644440"
  },
  {
    "text": "cat's controller and then you can have your cat service that then interacts with the database to fetch your data for",
    "start": "644440",
    "end": "650880"
  },
  {
    "text": "your controller and then if you want to throw a graphql resolver you just reuse that same cat service and then expose",
    "start": "650880",
    "end": "656920"
  },
  {
    "text": "your graphql end points nice so you can really capsulate like more of the the business logic of actually like pulling",
    "start": "656920",
    "end": "663360"
  },
  {
    "text": "and maybe manipulating the the data from the database within the service and then",
    "start": "663360",
    "end": "668480"
  },
  {
    "text": "expose it through either a resolver or a controller based on what you want to actually expose yeah and then in your",
    "start": "668480",
    "end": "675920"
  },
  {
    "text": "cat's module say you had I don't know an animals module that's separate from it",
    "start": "675920",
    "end": "681079"
  },
  {
    "text": "and you wanted to export or import or reuse the cat service for some reason you could just by exporting that from",
    "start": "681079",
    "end": "686680"
  },
  {
    "text": "your module but they can't import your control so you can be really specific on what you want to expose that other modules",
    "start": "686680",
    "end": "693839"
  },
  {
    "text": "can use so then you can really keep stuff decoupled and prevent them from like dipping into your database instead",
    "start": "693839",
    "end": "700079"
  },
  {
    "text": "they go through your service which I think is a pretty powerful concept because it's so easy to create spaghetti",
    "start": "700079",
    "end": "706079"
  },
  {
    "text": "code uh when you're just reusing everything instead you have to be explicit about that which is something I",
    "start": "706079",
    "end": "711839"
  },
  {
    "text": "do appreciate definitely and so then you also mentioned like touching the service",
    "start": "711839",
    "end": "717040"
  },
  {
    "text": "can access stuff from the the database base and it's doing that through like models let's talk about that a little",
    "start": "717040",
    "end": "722839"
  },
  {
    "text": "bit are the models I guess this is where I'm a little hazy on it is it like specifically tied to type orm as its orm",
    "start": "722839",
    "end": "729200"
  },
  {
    "text": "solution no it's not so your service is really just an area to put your data",
    "start": "729200",
    "end": "735560"
  },
  {
    "text": "access layer you can you can do that in there and then typm Nest just kind of",
    "start": "735560",
    "end": "740959"
  },
  {
    "text": "wraps this so you do have a couple things um but often times you call it an entity and this is what's stored in your",
    "start": "740959",
    "end": "746440"
  },
  {
    "text": "database and that could be that could be you can be using typ Goose squize typm Prisma you can really use",
    "start": "746440",
    "end": "754240"
  },
  {
    "text": "anything you want and then you just create your entity and then you can throw your different decorators on there",
    "start": "754240",
    "end": "759680"
  },
  {
    "text": "or whatever is required by your persistence framework so it doesn't tie you to those it definitely currently",
    "start": "759680",
    "end": "765199"
  },
  {
    "text": "guides you down the typ orm path I have some complaints about typm but overall",
    "start": "765199",
    "end": "770279"
  },
  {
    "text": "it's suited my needs pretty well yeah yeah I think I mean OMS are tough right they're does that make sense yeah",
    "start": "770279",
    "end": "776519"
  },
  {
    "text": "they're complex things and oh yeah I don't think I've met one that I really love but typer Rim does seem to to get",
    "start": "776519",
    "end": "783120"
  },
  {
    "text": "the job done in a lot of ways and I appreciate that me personally I've always been a fan of query Builders",
    "start": "783120",
    "end": "789519"
  },
  {
    "text": "instead of going full typ of rams then you can create your business objects but then you can generate your SQL i' never",
    "start": "789519",
    "end": "795839"
  },
  {
    "text": "have been a fan of writing raw SQL because then you don't get some of the type safety uh when compiling or doing whatever but if you have your query",
    "start": "795839",
    "end": "801639"
  },
  {
    "text": "Builder which is I mean I have a goang project that's fairly popular that is",
    "start": "801639",
    "end": "807360"
  },
  {
    "text": "just a query Builder and it doesn't introduce a lot of that omm stuff which I think just gets confusing and is",
    "start": "807360",
    "end": "812839"
  },
  {
    "text": "errorr it is so I agree with you on that yeah it's a very like leaky abstraction that can be tough to get right but it is",
    "start": "812839",
    "end": "820279"
  },
  {
    "text": "pretty cool like in the most basic cases like you're you're able to create these classes to act as your entities and like",
    "start": "820279",
    "end": "827519"
  },
  {
    "text": "that will represent the data that's in the database and you can have fairly complex relations between like other",
    "start": "827519",
    "end": "832839"
  },
  {
    "text": "entities and um pull all of that data back which is just really cool the other",
    "start": "832839",
    "end": "838079"
  },
  {
    "text": "thing it pushes you to is a dto or a data transfer object which allows you to",
    "start": "838079",
    "end": "843600"
  },
  {
    "text": "decouple what you're exposing in your API from what how it's actually persisted in the database which is",
    "start": "843600",
    "end": "850240"
  },
  {
    "text": "something they talk about a lot so I think the best way that I think about it's like you have your normal dto and",
    "start": "850240",
    "end": "855839"
  },
  {
    "text": "you might have some fields in the database you don't want to expose to the end user for reads but then you can also do a create dto that only has your your",
    "start": "855839",
    "end": "863079"
  },
  {
    "text": "input fields and then you have your update and each one of those might be slightly different and DTS weren't",
    "start": "863079",
    "end": "868639"
  },
  {
    "text": "something that used a whole lot until I really started to dive into nest and some of um I guess domain driven design",
    "start": "868639",
    "end": "874519"
  },
  {
    "text": "and thinking about how you actually do some of these communication patterns and looking at the dto I have to question",
    "start": "874519",
    "end": "882839"
  },
  {
    "text": "why I didn't do it sooner having the create an update separated from your model and then",
    "start": "882839",
    "end": "888720"
  },
  {
    "text": "having the entity or the dto itself for reads we can have a single dto that's actually backed by more than one table",
    "start": "888720",
    "end": "895480"
  },
  {
    "text": "or you might want to store everything snake case in the database and then cam case exposing it out and there was never",
    "start": "895480",
    "end": "901920"
  },
  {
    "text": "a good way to think about that without just putting that logic in your omm layer or mapping the columns yeah so",
    "start": "901920",
    "end": "908399"
  },
  {
    "text": "they're really meant to be translated between the entity and what you actually want to expose yes or if something's",
    "start": "908399",
    "end": "915279"
  },
  {
    "text": "coming in from an end user on the create and you want to expose it as a single field or a Json object you can flatten",
    "start": "915279",
    "end": "921360"
  },
  {
    "text": "that out in the entity and make that a lot simpler for the end user and then store it however you want in the back",
    "start": "921360",
    "end": "926880"
  },
  {
    "text": "end so that's one thing that nest calls out quite a bit they're not super explicit about it but all their examples",
    "start": "926880",
    "end": "932600"
  },
  {
    "text": "have it yeah something I I really appreciate about that yeah that's really nice being able to to kind of have that",
    "start": "932600",
    "end": "938240"
  },
  {
    "text": "separation and kind of speaking of that I wanted to also touch up on graphql a little bit more in detail because that",
    "start": "938240",
    "end": "944600"
  },
  {
    "text": "is something that you mentioned that uh Nest supports out of the box and you do that through the the resolvers rather",
    "start": "944600",
    "end": "950839"
  },
  {
    "text": "than a controller and that like do you want to kind of briefly talk about how you set that up yeah so so like in a",
    "start": "950839",
    "end": "958120"
  },
  {
    "text": "restful API you create a controller and you do your get put post delete patch endpoints and within graphql you have",
    "start": "958120",
    "end": "965199"
  },
  {
    "text": "your queries so your query endpoints and your mutation end points and so you create a resolver and then you just mark",
    "start": "965199",
    "end": "970519"
  },
  {
    "text": "it you can decorate it with an act query decorator and say expose this method uh in my graphql API and then Nest will",
    "start": "970519",
    "end": "979440"
  },
  {
    "text": "then use all the metadata collected from those decorators to then generate your schema for you at runtime this is of",
    "start": "979440",
    "end": "985560"
  },
  {
    "text": "course if you're going code first so you can create those different end points and what's really nice about graphql is",
    "start": "985560",
    "end": "991279"
  },
  {
    "text": "that it takes away a lot of the the boilerplate of like okay ensuring that",
    "start": "991279",
    "end": "996319"
  },
  {
    "text": "you document everything with swagger it gives you a lot of that documentation and explorability out of the box you can",
    "start": "996319",
    "end": "1001720"
  },
  {
    "text": "build a lot of that validation in and graph cuu will just make sure that you aren't requesting things that aren't there the query language that graph",
    "start": "1001720",
    "end": "1008360"
  },
  {
    "text": "provides is awesome really fell in love with that with the GitHub API when they started transitioning stuff over yeah",
    "start": "1008360",
    "end": "1013480"
  },
  {
    "text": "and playing with that more that was really eye opening to see how explorable it was and I could just and only fetch",
    "start": "1013480",
    "end": "1019959"
  },
  {
    "text": "the data that I needed and NES makes that really easy with the resolvers nice yeah yeah I agree and you mentioned kind",
    "start": "1019959",
    "end": "1026120"
  },
  {
    "text": "of code first versus um what would you call the other way schema first schema",
    "start": "1026120",
    "end": "1031199"
  },
  {
    "text": "first yeah if you were doing schema first would that be like where you're manually creating a graphql schema and",
    "start": "1031199",
    "end": "1037199"
  },
  {
    "text": "then ingesting that with Nest yeah so you'd be I'm not an expert in this one",
    "start": "1037199",
    "end": "1042240"
  },
  {
    "text": "with nest because I've always gone I did schema first at first and then I didn't like it so I went Code first immediately",
    "start": "1042240",
    "end": "1048400"
  },
  {
    "text": "um but you would write out your gql file with your different input types your",
    "start": "1048400",
    "end": "1053840"
  },
  {
    "text": "object types and uh your different endpoints and you'd write all those out by hand and then you could generate some",
    "start": "1053840",
    "end": "1060320"
  },
  {
    "text": "of your dto from that and you would also have to write your resolver and then Nest will tie those together but like I",
    "start": "1060320",
    "end": "1066080"
  },
  {
    "text": "said I'm not an expert in in that realm because what I appreciate about code first is that I'm not double defining",
    "start": "1066080",
    "end": "1071600"
  },
  {
    "text": "things I'm going to need the DT's anyway so I write the dto and I let it do the",
    "start": "1071600",
    "end": "1077120"
  },
  {
    "text": "hard work uh I don't yeah I don't enjoy writing out gql files personally agreed",
    "start": "1077120",
    "end": "1082679"
  },
  {
    "text": "yes and that's why I was asking because that's really the only way that I've done it is the code first way but that also leaves me more time in the",
    "start": "1082679",
    "end": "1090159"
  },
  {
    "text": "typescript world rather than writing graphql specifically and it it really lets the the typescript dto in this case",
    "start": "1090159",
    "end": "1097360"
  },
  {
    "text": "become like the source of Truth for what you can query or mutate within your",
    "start": "1097360",
    "end": "1102520"
  },
  {
    "text": "API well I find that I'm iterating so quickly and like typescript and I'm",
    "start": "1102520",
    "end": "1108159"
  },
  {
    "text": "changing stuff the detail especially if I'm like doing a PC or something or an example for nj's query like I'll be",
    "start": "1108159",
    "end": "1114679"
  },
  {
    "text": "iterating all those details I don't want to think about the gql file I just want to be in my typescript adding Fields",
    "start": "1114679",
    "end": "1120720"
  },
  {
    "text": "putting validators on those and then let Nest do the heavy lifting exactly so",
    "start": "1120720",
    "end": "1125919"
  },
  {
    "text": "instead of starting with schema first and having to generate my dtss every time that would just annoy me I think it'd slow me down yeah definitely but no",
    "start": "1125919",
    "end": "1133840"
  },
  {
    "text": "I like kind of really circling back to that having the dto be the source of Truth and then",
    "start": "1133840",
    "end": "1139400"
  },
  {
    "text": "another really cool thing that is kind of outside of all of this but then when you're actually like exposing this on",
    "start": "1139400",
    "end": "1145080"
  },
  {
    "text": "the front end and you're you're consuming it on the front end you can use tools like graphql code generator that can then generate the types that",
    "start": "1145080",
    "end": "1151400"
  },
  {
    "text": "you need on the front end based on the queries that you're making to your back end and those are all tied to that yes",
    "start": "1151400",
    "end": "1156880"
  },
  {
    "text": "so then you're not even generating Types on the front end everything front end to back end is the dto as the source of",
    "start": "1156880",
    "end": "1162400"
  },
  {
    "text": "Truth which is just super cool yeah I'm so glad to see a lot of the new Cen tools coming out to make life easier I",
    "start": "1162400",
    "end": "1169280"
  },
  {
    "text": "mean they've been in the Java space for a long time always felt kind of clunky what's that what Java I I don't know",
    "start": "1169280",
    "end": "1175520"
  },
  {
    "text": "don't worry about it you don't need it what is weird about the front end to",
    "start": "1175520",
    "end": "1180600"
  },
  {
    "text": "me for graphql so you have your DT on the back end and then the front end everything is essentially a partial right you don't know what will be",
    "start": "1180600",
    "end": "1186280"
  },
  {
    "text": "fetched until you write your query so then Coen can look at your actual queries and create the correct types for you which is pretty cool I've been",
    "start": "1186280",
    "end": "1193240"
  },
  {
    "text": "excited to see a lot of the teams that where we work starting to use that and embrace it more really exciting for me",
    "start": "1193240",
    "end": "1200080"
  },
  {
    "text": "yeah agreed it's just striving to be lazy it's less code for me to write or maintain and if I need to change",
    "start": "1200080",
    "end": "1205679"
  },
  {
    "text": "something it's just the dto in most cases that I need to change it yeah and then regenerate files from there but I",
    "start": "1205679",
    "end": "1211559"
  },
  {
    "text": "really like that that's kind of the big promising feature that I see of all of this and it really makes approaching",
    "start": "1211559",
    "end": "1216679"
  },
  {
    "text": "graphql on the back end quite easy I think because you're really thinking about it in terms of entities and dto",
    "start": "1216679",
    "end": "1222080"
  },
  {
    "text": "and the Translating between them and then exposing them I mean that's what it's all about for me especially with a",
    "start": "1222080",
    "end": "1227600"
  },
  {
    "text": "lot of these projects is like how do you not have to do anything and just get up and running quickly so you can get back",
    "start": "1227600",
    "end": "1233559"
  },
  {
    "text": "to reing Rack or whatever you want to be doing that actually interests you absolutely that's the important part yeah absolutely and uh to make that a",
    "start": "1233559",
    "end": "1240799"
  },
  {
    "text": "little bit easier you also have um a project that you created called nestjs query uh and we're going to uh introduce",
    "start": "1240799",
    "end": "1247679"
  },
  {
    "text": "and talk about that here after the [Music]",
    "start": "1247679",
    "end": "1254440"
  },
  {
    "text": "break this episode is brought to you by Sentry build better software faster",
    "start": "1254440",
    "end": "1259640"
  },
  {
    "text": "diagnose fix and optimize the performance of your code over 1 million developers and 68,000 organizations",
    "start": "1259640",
    "end": "1267159"
  },
  {
    "text": "already used Sentry including us Sentry also recently shipped a new SDK for",
    "start": "1267159",
    "end": "1272440"
  },
  {
    "text": "nextjs applications check this sh for links to more details best of all our",
    "start": "1272440",
    "end": "1277960"
  },
  {
    "text": "listeners get the team plan for free for 3 months head to sentry.io and use the code the change log when you sign up",
    "start": "1277960",
    "end": "1284039"
  },
  {
    "text": "again sentry.io and use the code the change log",
    "start": "1284039",
    "end": "1290040"
  },
  {
    "text": "[Music]",
    "start": "1290040",
    "end": "1294589"
  },
  {
    "text": "[Music]",
    "start": "1296910",
    "end": "1313880"
  },
  {
    "text": "so in the last segment we talked about uh nestjs and kind of what it does and we really only Branch the surface",
    "start": "1313880",
    "end": "1319279"
  },
  {
    "text": "because there's a a big surface area as you you mentioned in the break of what Nest can actually do but those are the",
    "start": "1319279",
    "end": "1325039"
  },
  {
    "text": "pieces that that we're kind of excited about with it and like really leveraging it to empower us to quickly work on the",
    "start": "1325039",
    "end": "1331960"
  },
  {
    "text": "things that we want to do and expose it so that we can go back to working on uh more fun things like the front end you",
    "start": "1331960",
    "end": "1338600"
  },
  {
    "text": "also have a project called uh nestjs query so I wanted to touch on that and it's something that we use at c2fo like",
    "start": "1338600",
    "end": "1345240"
  },
  {
    "text": "in our day job and it really makes uh helps help to simplify using graphql in",
    "start": "1345240",
    "end": "1350480"
  },
  {
    "text": "a number of different ways with nestjs so uh why don't you tell us do a better introduction to that project than I just",
    "start": "1350480",
    "end": "1356120"
  },
  {
    "text": "did and kind of tell us what what it does yeah so n query it tries to make",
    "start": "1356120",
    "end": "1362159"
  },
  {
    "text": "crud and graphql super simple to the point where you define an entity in a dto and you're done so where this really",
    "start": "1362159",
    "end": "1370240"
  },
  {
    "text": "came from I was starting a side project and I found myself creating all these",
    "start": "1370240",
    "end": "1375679"
  },
  {
    "text": "different entities and dto and then writing every service and how do I filter this and making it consistent and",
    "start": "1375679",
    "end": "1382320"
  },
  {
    "text": "MH it was a pain at least for me uh because it felt like I was retyping the same thing over and over again and just",
    "start": "1382320",
    "end": "1388279"
  },
  {
    "text": "switching out the types or modifying it slightly and where a lot of the inspiration for nj's query because I",
    "start": "1388279",
    "end": "1394600"
  },
  {
    "text": "think the most powerful feature it has is the query generator so it generates",
    "start": "1394600",
    "end": "1399760"
  },
  {
    "text": "these query endpoints for you so you can look up like the main example in the repo is a simple to-do item with",
    "start": "1399760",
    "end": "1405559"
  },
  {
    "text": "subtasks and tags and things like that so you define your dto but in your entities and then Expos these endpoints",
    "start": "1405559",
    "end": "1412440"
  },
  {
    "text": "so you can look up all your tasks and you can do these complex filters on them where a lot of that came from is for the",
    "start": "1412440",
    "end": "1418919"
  },
  {
    "text": "past like five years we've been doing something similar internally at c2fo where we had this what we called a",
    "start": "1418919",
    "end": "1424480"
  },
  {
    "text": "domain query and so it gave you a lot of the basic operators like equal not equal",
    "start": "1424480",
    "end": "1429799"
  },
  {
    "text": "like not like greater than less than all the standard ones which is what you need",
    "start": "1429799",
    "end": "1435200"
  },
  {
    "text": "99% of the time without exposing all these database details and all these",
    "start": "1435200",
    "end": "1440440"
  },
  {
    "text": "database specific operators so we really abstracted that out and that's the goal of njs quer is to make that really",
    "start": "1440440",
    "end": "1446400"
  },
  {
    "text": "simple so you don't have to think about a lot of that and you just get back to writing your front end and you can query all the data you need it is a little",
    "start": "1446400",
    "end": "1453080"
  },
  {
    "text": "opinionated it's become less so as more people have adopted it and there's more features but it's cursor-based uh",
    "start": "1453080",
    "end": "1459400"
  },
  {
    "text": "pagination at first which if you haven't used it before it feels a little awkward I think but once you start diving into",
    "start": "1459400",
    "end": "1465520"
  },
  {
    "text": "it you don't have to maintain state of like where you're at with the previous off offset or uh limit all that stuff",
    "start": "1465520",
    "end": "1472320"
  },
  {
    "text": "you you really get away from that and you can just use the whatever object you're currently at take its cursor and then you can start paging from there so",
    "start": "1472320",
    "end": "1478840"
  },
  {
    "text": "it's really good for continuous pagination Facebook I think is the one that originally pioneered it and then",
    "start": "1478840",
    "end": "1485080"
  },
  {
    "text": "we've kind of expanded on that we allow you to do offset paging and things like that getting total counts uh you can",
    "start": "1485080",
    "end": "1491360"
  },
  {
    "text": "aggregate a lot of stuff so you can Group by and sum and all those standard things and then on top of that you get a",
    "start": "1491360",
    "end": "1497200"
  },
  {
    "text": "lot of your create endpoints and it standardizes between all your mutations it standardizes and makes sure that",
    "start": "1497200",
    "end": "1503120"
  },
  {
    "text": "everything uses like the term input so developers aren't trying to think okay what do they call this parameter it's",
    "start": "1503120",
    "end": "1508159"
  },
  {
    "text": "the same every time yeah which I know I personally enjoy because it's so easy for teams to diverge when they're",
    "start": "1508159",
    "end": "1514080"
  },
  {
    "text": "writing their different endpoints and you have one that names it the name of the type the other one calls it input",
    "start": "1514080",
    "end": "1519360"
  },
  {
    "text": "who knows what they'll they'll name it next um and so it really focuses on standardizing a lot of that but the real",
    "start": "1519360",
    "end": "1526279"
  },
  {
    "text": "magic here is that once you write your dto and entity you just register it with an sjs graphql and everything is done",
    "start": "1526279",
    "end": "1532320"
  },
  {
    "text": "for you and you get this giant schema file and it breaks it all out but you didn't have to do any of it and so going",
    "start": "1532320",
    "end": "1538080"
  },
  {
    "text": "back to the previous theme it makes us lazy and that's perfect I love it so let me break that down a little bit to kind",
    "start": "1538080",
    "end": "1544039"
  },
  {
    "text": "of highlight some of the things that it's really doing you mentioned that you just have to create what the the dto for",
    "start": "1544039",
    "end": "1550200"
  },
  {
    "text": "it and you use a couple of different decorators for those dto right I'm",
    "start": "1550200",
    "end": "1555480"
  },
  {
    "text": "thinking specifically like the filterable or uh a filterable field yeah so on your dto one of the initial",
    "start": "1555480",
    "end": "1561880"
  },
  {
    "text": "decisions that we ma or that I made when designing it is that on your D you might",
    "start": "1561880",
    "end": "1567039"
  },
  {
    "text": "want some fields that are filterable and then others that you don't want to allow users to do uh filters on yeah and so we",
    "start": "1567039",
    "end": "1574919"
  },
  {
    "text": "introduced a new decorator that really just wraps the njs field with a new",
    "start": "1574919",
    "end": "1580000"
  },
  {
    "text": "decorator called filterable field and that basically exposes that in the generated output as something that you",
    "start": "1580000",
    "end": "1585760"
  },
  {
    "text": "can do your your equal or greater than or less than comparisons on and actually query with so I think that's the main",
    "start": "1585760",
    "end": "1594559"
  },
  {
    "text": "change from the core stuff and then we've added a few other decorators for",
    "start": "1594559",
    "end": "1599799"
  },
  {
    "text": "your dto like you can do authorizers so as requests come in you can provide an",
    "start": "1599799",
    "end": "1606240"
  },
  {
    "text": "additional filter that the user may not specify to ensure that hey only the current logged in user fetch only their",
    "start": "1606240",
    "end": "1611919"
  },
  {
    "text": "data or uh you can reject request and throw an error immediately graph will wrap that for you you can do relations",
    "start": "1611919",
    "end": "1619640"
  },
  {
    "text": "so that's one thing that's different about NJ query and one thing I don't care about in a lot of the orms is that",
    "start": "1619640",
    "end": "1625880"
  },
  {
    "text": "you have these stub relations on your on your entity that may or may not be populated you're not sure if they'll be",
    "start": "1625880",
    "end": "1631559"
  },
  {
    "text": "there NJ query kind of removes those from the dto and you do it through a decorator and you say hey uh my to-do",
    "start": "1631559",
    "end": "1637480"
  },
  {
    "text": "item is related to subtasks and so instead of having the subtask field on",
    "start": "1637480",
    "end": "1642600"
  },
  {
    "text": "your dto because it it won't be there when you're actually using it until you fetch it and that makes it really lazy",
    "start": "1642600",
    "end": "1648480"
  },
  {
    "text": "so and I think it pairs well with the generated schema because with graphql you're only fetching what you need and",
    "start": "1648480",
    "end": "1655080"
  },
  {
    "text": "so we can expose those things you can do synthetic relations that you may not have in your entity but you can throw",
    "start": "1655080",
    "end": "1660559"
  },
  {
    "text": "them on there and throw an additional filter with it and say only give me completed subtasks or give me",
    "start": "1660559",
    "end": "1666200"
  },
  {
    "text": "uncompleted subtasks and you can create these two different uh relationships on there really decoupling your dto from",
    "start": "1666200",
    "end": "1672159"
  },
  {
    "text": "your entity and how it's stored yeah I like that a lot and kind of breaking it down a little bit more so you like you",
    "start": "1672159",
    "end": "1677440"
  },
  {
    "text": "create those DT and the entities and for like if you just accept all of the opinions and for like a lot of the the",
    "start": "1677440",
    "end": "1685720"
  },
  {
    "text": "basic examples you know the basic crud examples that would really be it right you just then put those assemble those",
    "start": "1685720",
    "end": "1692240"
  },
  {
    "text": "with your um nestjs query module and it will generate basically the resolver for you and the service for you because it",
    "start": "1692240",
    "end": "1698840"
  },
  {
    "text": "will know how to take that entity and what it can grab from it and it will know how to take the stuff that you're",
    "start": "1698840",
    "end": "1704240"
  },
  {
    "text": "requesting through like a resolver and pipe that to the service to give you back the data and then also you know",
    "start": "1704240",
    "end": "1710360"
  },
  {
    "text": "we're talking about graphql here you know you only selected a partial subset of the actual data that's available it's",
    "start": "1710360",
    "end": "1716360"
  },
  {
    "text": "also going to automatically just filter out the fields that you don't need so you're not sending back everything it's",
    "start": "1716360",
    "end": "1721640"
  },
  {
    "text": "just giving you exactly what you asked for right and so when you went and wrote that code like if it was just like a you",
    "start": "1721640",
    "end": "1727039"
  },
  {
    "text": "know a basic crud to-do example if I had my entity and my dto for like what I",
    "start": "1727039",
    "end": "1732480"
  },
  {
    "text": "want to accept for creating reading updating and deleting that's it there's no more code to write right M that's it",
    "start": "1732480",
    "end": "1739919"
  },
  {
    "text": "yeah one thing to point out is you talked about generating Services um this is another design decision that I made",
    "start": "1739919",
    "end": "1745679"
  },
  {
    "text": "pretty early on it was separating the service generation from the graphql AER so the graph qer only does the resolver",
    "start": "1745679",
    "end": "1752799"
  },
  {
    "text": "and then you get to choose your backend persistence so we have adapters for typ goose Mongoose sqy and typm so you can",
    "start": "1752799",
    "end": "1760600"
  },
  {
    "text": "flip those out and we just Define a simple query service interface that as long as you implement that you can",
    "start": "1760600",
    "end": "1767760"
  },
  {
    "text": "really do whatever you want so you can write your own custom service if you want I think we do quite a bit of that at CFO",
    "start": "1767760",
    "end": "1774399"
  },
  {
    "text": "with some of the things that we do internally but everything else can still be autogenerated for you and you pick",
    "start": "1774399",
    "end": "1779559"
  },
  {
    "text": "and choose when you need to to write something custom so by",
    "start": "1779559",
    "end": "1784679"
  },
  {
    "text": "decoupling that from the the graphql piece I think has really made it pretty powerful in what it can do because when",
    "start": "1784679",
    "end": "1790679"
  },
  {
    "text": "I've seen some other Frameworks they they just bind it to typer Ram or they bind it to whatever that is um and while",
    "start": "1790679",
    "end": "1796080"
  },
  {
    "text": "that might give you some more seamless stuff I think it makes it less flexible to pick and choose when you're going to",
    "start": "1796080",
    "end": "1801279"
  },
  {
    "text": "do certain operations I agree that that makes it way more flexible and like you said you can also kind of break out of",
    "start": "1801279",
    "end": "1808039"
  },
  {
    "text": "that if you need to do something a little bit more complex than just you know take the data and throw it into a database or read from a database that",
    "start": "1808039",
    "end": "1814760"
  },
  {
    "text": "you could Implement your own service and just have the autogenerated resolver call that or you could there's other",
    "start": "1814760",
    "end": "1821519"
  },
  {
    "text": "things like um ways to inject yourself in is that right so you can do the your",
    "start": "1821519",
    "end": "1827000"
  },
  {
    "text": "own service you can do own resolver mhm we make it simple through the module that you can write you you can have",
    "start": "1827000",
    "end": "1833039"
  },
  {
    "text": "everything autogenerated but like for example the resolver you just extend our crud resolver and then you can start",
    "start": "1833039",
    "end": "1838840"
  },
  {
    "text": "writing your own stuff and you can override end points and things like that so you can then start to inject other",
    "start": "1838840",
    "end": "1843960"
  },
  {
    "text": "services that may not be there so you can really kind of step back whenever",
    "start": "1843960",
    "end": "1849159"
  },
  {
    "text": "you need to does that answer your question yeah I think so and like another thing that I was thinking about was like sometimes you might need to do",
    "start": "1849159",
    "end": "1856120"
  },
  {
    "text": "a more complex like translation between like a dto and an entity oh yeah uh so",
    "start": "1856120",
    "end": "1861320"
  },
  {
    "text": "we introduced a there's a concept we call an assembler so this is the translation layer between the the dto",
    "start": "1861320",
    "end": "1868840"
  },
  {
    "text": "and the entity and we create a default one for you where we just use class Transformer and validator we transform",
    "start": "1868840",
    "end": "1874200"
  },
  {
    "text": "them between the two classes but you can also write your own so a common use case is converting uh like from snake case to",
    "start": "1874200",
    "end": "1882159"
  },
  {
    "text": "camel case or you might have a composite ID that comes in you want to split that into two pieces and turn that into into",
    "start": "1882159",
    "end": "1888080"
  },
  {
    "text": "two Fields I honestly I've seen a lot of different use cases for it but those have been the most common ones or like",
    "start": "1888080",
    "end": "1893880"
  },
  {
    "text": "with squiz we had to create a different assembler to turn it into the correct SQL lied model you couldn't just use",
    "start": "1893880",
    "end": "1899320"
  },
  {
    "text": "Clash Transformer to do it so it provided this a nice simple place to do that and that's one thing that's always",
    "start": "1899320",
    "end": "1906159"
  },
  {
    "text": "bothered me when writing apis before is like okay where do I put this translation logic and you just shove it in your route but that doesn't make it",
    "start": "1906159",
    "end": "1912480"
  },
  {
    "text": "super testable so by creating these assemblers to do that translation you're testing just that piece with the input",
    "start": "1912480",
    "end": "1919240"
  },
  {
    "text": "and output and there's no question of like really where does it exist or where should it exist yeah that's really cool",
    "start": "1919240",
    "end": "1925240"
  },
  {
    "text": "the actual code that you're writing becomes super testable because you can just test those like that assembler",
    "start": "1925240",
    "end": "1930320"
  },
  {
    "text": "class in isolation for example without having to run everything and then like a lot of the code is just autogenerated",
    "start": "1930320",
    "end": "1936240"
  },
  {
    "text": "for you the schema's autogenerated for you and is there a way to use this with the schema first approach or do you have",
    "start": "1936240",
    "end": "1943519"
  },
  {
    "text": "to kind of go with the code first you have to go code first currently and I've kind of done that on purpose um mainly",
    "start": "1943519",
    "end": "1949720"
  },
  {
    "text": "because I was doing code first but I suppose you could create your classes from there but then you're because it's generating your schema for you entirely",
    "start": "1949720",
    "end": "1956799"
  },
  {
    "text": "you'd have to figure out how to merge the two and I think it's more error prone um if you just let the system",
    "start": "1956799",
    "end": "1962159"
  },
  {
    "text": "generate it for you the way less likely to mess it up yeah so no schema first",
    "start": "1962159",
    "end": "1967720"
  },
  {
    "text": "yeah that's okay it's another opinion and as long as you're willing to tolerate that which I think is personally the way to go just because",
    "start": "1967720",
    "end": "1974080"
  },
  {
    "text": "I'd rather write classes in graph in typescript than Gra fql schemas directly",
    "start": "1974080",
    "end": "1979600"
  },
  {
    "text": "yeah so yeah I think that that's a more approachable way especially as you're first getting started into all of these new technologies like the code first",
    "start": "1979600",
    "end": "1986679"
  },
  {
    "text": "approach does is a little bit more friendly in my opinion than you know just setting you loose writing a graphql",
    "start": "1986679",
    "end": "1993120"
  },
  {
    "text": "schema yeah I agree yeah another thing that you touched on uh but I really want",
    "start": "1993120",
    "end": "1998760"
  },
  {
    "text": "to like dive into a little bit more is kind of that pagination piece because I think that that is super powerful like",
    "start": "1998760",
    "end": "2005440"
  },
  {
    "text": "not having to write that yourself or like manage that yourself so like what",
    "start": "2005440",
    "end": "2011000"
  },
  {
    "text": "got you into thinking that that was like a key feature that this Library needed",
    "start": "2011000",
    "end": "2016279"
  },
  {
    "text": "at the time when I was writing it back in 2019 cursor based page ination was kind of what they always pushed you down",
    "start": "2016279",
    "end": "2022399"
  },
  {
    "text": "but there wasn't an easy way to just Implement that out of the box and so one of the initial tasks I had was okay",
    "start": "2022399",
    "end": "2028760"
  },
  {
    "text": "let's figure out how to make this as simple as possible and so I started to",
    "start": "2028760",
    "end": "2033799"
  },
  {
    "text": "write a lot of those the cursor based page in nation and then that was the only option at first you couldn't do",
    "start": "2033799",
    "end": "2039519"
  },
  {
    "text": "offset um or just disable pagination entirely so then as more features came",
    "start": "2039519",
    "end": "2045039"
  },
  {
    "text": "in from other users we started to implement these other ways of doing it and over time the cursor based",
    "start": "2045039",
    "end": "2051398"
  },
  {
    "text": "pagination has gotten a lot smarter so out of the box you can do an offset based cursor which is like the simplest",
    "start": "2051399",
    "end": "2059118"
  },
  {
    "text": "way of doing it and implementing it and you just basically take your Cur give me the first 10 rows and then yeah give me",
    "start": "2059119",
    "end": "2064440"
  },
  {
    "text": "you know 11 through 20 or whatever yep and the way that works is that we just take that limit and offset and we base",
    "start": "2064440",
    "end": "2069638"
  },
  {
    "text": "64 encode it and throw it into a cursor and so we'll take that for every entity that comes back and assign a unique",
    "start": "2069639",
    "end": "2075240"
  },
  {
    "text": "cursor based off its position in the list the problem with offset based pagination is if you have a large table",
    "start": "2075240",
    "end": "2080839"
  },
  {
    "text": "it gets slower the more you page into it because the database has to go through more pages it's not as efficient yep so",
    "start": "2080839",
    "end": "2087000"
  },
  {
    "text": "then we implemented key set based pagination where you get to Define here's the unique identifiers for this",
    "start": "2087000",
    "end": "2094679"
  },
  {
    "text": "table that I want to actually page on so usually be like an ID and so the real benefit of this is that we can then",
    "start": "2094679",
    "end": "2101760"
  },
  {
    "text": "quickly create an additional filter that we just throw on there and say okay we're looking if you're paging forward",
    "start": "2101760",
    "end": "2107480"
  },
  {
    "text": "we're looking for all records that are passed or have an ID greater than the one passed in and so the database is",
    "start": "2107480",
    "end": "2113160"
  },
  {
    "text": "going to have indexes on those typically and so it's very quick lookups um and you get consistent response times and",
    "start": "2113160",
    "end": "2120920"
  },
  {
    "text": "then with the offset so if you don't want to use cursor based pagination at all you can always drop back to offset",
    "start": "2120920",
    "end": "2126680"
  },
  {
    "text": "where you just pass in a limit and offset and go about your day and then you can have the option like I said",
    "start": "2126680",
    "end": "2132400"
  },
  {
    "text": "earlier to turn off pagination entirely sometimes you have a really small result set and you don't want to deal with that",
    "start": "2132400",
    "end": "2137760"
  },
  {
    "text": "so you just want to get everything back at once and you're able to do that with each one of these strategies offset and",
    "start": "2137760",
    "end": "2144040"
  },
  {
    "text": "cursor we also automatically include a page info so you can get total page count uh you can find out if you have",
    "start": "2144040",
    "end": "2150640"
  },
  {
    "text": "next page previous page with cursor you also get the start cursor and the end cursor so you don't need to look at",
    "start": "2150640",
    "end": "2156000"
  },
  {
    "text": "every node in the response m or every Edge in the response so you can quickly just create a p a table and just plug it",
    "start": "2156000",
    "end": "2162119"
  },
  {
    "text": "in especially with a lot of relay support for these cursor based pagination it's plug-and playay for the",
    "start": "2162119",
    "end": "2167720"
  },
  {
    "text": "most part yeah that's really cool and kind of speaking to that too like when you're developing your your dto you",
    "start": "2167720",
    "end": "2173880"
  },
  {
    "text": "don't have to worry about like those what you call edges and nodes yeah pieces those will be automatically",
    "start": "2173880",
    "end": "2178920"
  },
  {
    "text": "generated and put in and then also like the the more I don't know I'd call it metadata about where you're at like the",
    "start": "2178920",
    "end": "2185240"
  },
  {
    "text": "current cursor and how many records you have left things like that are just automatically provided to you do you",
    "start": "2185240",
    "end": "2190680"
  },
  {
    "text": "have to like um from the front end or like from a a client requesting that do you have to ask for that as part of your",
    "start": "2190680",
    "end": "2197440"
  },
  {
    "text": "query and it's just like part of the schema yeah so you get to choose at the detail level you can do there's a",
    "start": "2197440",
    "end": "2203119"
  },
  {
    "text": "decorator called query options where you can say okay here's a paging strategy I have in fact you could do multiple",
    "start": "2203119",
    "end": "2209400"
  },
  {
    "text": "paging strategies especially for Rel you could do one that's offset and one that's cursor so you could call it subtask connection and just subtasks and",
    "start": "2209400",
    "end": "2216720"
  },
  {
    "text": "then on the client you can you can explore the API and you can see and you can request that data back implicitly or",
    "start": "2216720",
    "end": "2223359"
  },
  {
    "text": "explicitly based off whatever strategy you're using and so sometimes a team may",
    "start": "2223359",
    "end": "2228640"
  },
  {
    "text": "start out with offset base page ination and then they can transition to cursor pretty simply by just changing something",
    "start": "2228640",
    "end": "2234079"
  },
  {
    "text": "in the back end and they don't have to really worry about a lot of those details very cool yeah that's kind of a",
    "start": "2234079",
    "end": "2239960"
  },
  {
    "text": "lot that it does for you and it really Builds on top of the you know just the",
    "start": "2239960",
    "end": "2245040"
  },
  {
    "text": "basic graphql support that that Nest gives you if you had to say when would you",
    "start": "2245040",
    "end": "2250400"
  },
  {
    "text": "recommend someone reach for this as an extension of Nest rather than trying to go just like plain nest in graphql is",
    "start": "2250400",
    "end": "2258200"
  },
  {
    "text": "there like a a key feature or something that you would need to have before you'd recommend it or for me personally I'd",
    "start": "2258200",
    "end": "2265359"
  },
  {
    "text": "probably just start with this and then I would drop down to Nest when I need some more complex things so this is going to",
    "start": "2265359",
    "end": "2271480"
  },
  {
    "text": "provide a lot of your stuff a lot of the things that you'll need out of the box and then what I find myself doing is",
    "start": "2271480",
    "end": "2277520"
  },
  {
    "text": "then I'll write an additional resolver and Nest will merge those two you don't have to extend or anything you can just write your own customer resolver and",
    "start": "2277520",
    "end": "2283040"
  },
  {
    "text": "your own custom Services when you need to do the more complex operations but if",
    "start": "2283040",
    "end": "2288160"
  },
  {
    "text": "you're just trying to get up and running with a simple app and want to get started on that front end real fast I would think this is the way to go",
    "start": "2288160",
    "end": "2293720"
  },
  {
    "text": "because you're not having to write all your resolver endpoints your database integration your service like you don't",
    "start": "2293720",
    "end": "2298800"
  },
  {
    "text": "have to do any of that you focus on what your data looks like how you want to expose it and you're ready to go as long",
    "start": "2298800",
    "end": "2304119"
  },
  {
    "text": "as you accept a lot of the opinions that are built in which yeah I'd rather not",
    "start": "2304119",
    "end": "2309680"
  },
  {
    "text": "have to make a lot of those decisions so yeah just go with it yeah I agree uh like based on my usage of it like it",
    "start": "2309680",
    "end": "2316240"
  },
  {
    "text": "does seem like it is the way to go for just like getting started getting going",
    "start": "2316240",
    "end": "2322000"
  },
  {
    "text": "and then if you have to get more complex with things like if you really need to break out of an opinion or do something",
    "start": "2322000",
    "end": "2327440"
  },
  {
    "text": "that's that's super complex then it can get out of your way quite easily which is really nice that's like what I really",
    "start": "2327440",
    "end": "2334240"
  },
  {
    "text": "like the most about it is like it's there for the basic things but it's not locking me in and like making me regret",
    "start": "2334240",
    "end": "2341800"
  },
  {
    "text": "picking it if there's something that it doesn't support out of the box like it just gets out of the way right yeah it's built to be simply an additional tool",
    "start": "2341800",
    "end": "2350599"
  },
  {
    "text": "built on top of the njs graphql and it doesn't really replace anything that it does it builds on that that solid",
    "start": "2350599",
    "end": "2356200"
  },
  {
    "text": "foundation that it provides and like you said you can drop out of it anytime you want and you can still keep around NS",
    "start": "2356200",
    "end": "2362319"
  },
  {
    "text": "query and then write your own custom stuff that's I think that's the really cool thing about some of the code first approach and the way NS does a lot of",
    "start": "2362319",
    "end": "2369800"
  },
  {
    "text": "that that merging between the resolvers is the fact that you can have them live side by side with your own custom query",
    "start": "2369800",
    "end": "2375640"
  },
  {
    "text": "end points which is something at first it I was like oh how's that going to work am I going to have to extend the cred resolver and then I just wrote a",
    "start": "2375640",
    "end": "2381839"
  },
  {
    "text": "separate one with the things that I needed I'm like oh that actually works that's really cool super excited to see",
    "start": "2381839",
    "end": "2387880"
  },
  {
    "text": "that that just just worked yeah [Music]",
    "start": "2387880",
    "end": "2396319"
  },
  {
    "text": "definitely this episode is brought to you by our friends at square square is the platform that sellers trust there is",
    "start": "2396319",
    "end": "2403480"
  },
  {
    "text": "a massive opportunity for developers to support Square sellers by building apps for today's business needs and I'm here",
    "start": "2403480",
    "end": "2410400"
  },
  {
    "text": "with Shannon Skipper head of developer relations at Square Shanny can you share some details about the opportunity for",
    "start": "2410400",
    "end": "2415520"
  },
  {
    "text": "developers on the Square platform absolutely so we have millions of sellers who have unique needs and square",
    "start": "2415520",
    "end": "2421920"
  },
  {
    "text": "has apps like our PR of sale app like our restaurants app but there are so many different sellers tuxedo shops",
    "start": "2421920",
    "end": "2427359"
  },
  {
    "text": "florists who need specific solutions for their domain and so we have a node SDK",
    "start": "2427359",
    "end": "2433440"
  },
  {
    "text": "written in typescript that allows you to access all of the backend apis and sdks that we use to power the billions of",
    "start": "2433440",
    "end": "2440200"
  },
  {
    "text": "transactions that we do annually and so there's this massive Market of sellers who need help from developers they",
    "start": "2440200",
    "end": "2447319"
  },
  {
    "text": "either need a bespoke solution built for themselves on their own node stat where they are working with Square Dashboard",
    "start": "2447319",
    "end": "2453599"
  },
  {
    "text": "working with square Hardware or with the Ecom you know what you see what you get Builder and they need one more thing",
    "start": "2453599",
    "end": "2459280"
  },
  {
    "text": "they need an additional build and then finally we have the app marketplace where you can make a node app and then distribute it so it can get in front of",
    "start": "2459280",
    "end": "2466240"
  },
  {
    "text": "millions of Sellers and be an option for them to adopt very cool all right if you want to learn more head to developer.",
    "start": "2466240",
    "end": "2472160"
  },
  {
    "text": "up.com to dive into the docs apis sdks and to create your Square developer",
    "start": "2472160",
    "end": "2477599"
  },
  {
    "text": "account start developing on the platform sellers trust again that's developer. squareup.com",
    "start": "2477599",
    "end": "2483710"
  },
  {
    "text": "[Music]",
    "start": "2483710",
    "end": "2489309"
  },
  {
    "text": "[Music]",
    "start": "2491420",
    "end": "2498449"
  },
  {
    "text": "so Doug specific to nestjs query is there anything else that you want to highlight or touch on before we talk",
    "start": "2507880",
    "end": "2513960"
  },
  {
    "text": "about more meta things in general I think the biggest thing that I and it's",
    "start": "2513960",
    "end": "2519160"
  },
  {
    "text": "not necessarily nj's query thing it's the nest Community this has been the first open source project that I've worked on where everybody has been super",
    "start": "2519160",
    "end": "2525280"
  },
  {
    "text": "friendly when they're submitting an issue like pretty much every single one of them is like thanks for the project",
    "start": "2525280",
    "end": "2530680"
  },
  {
    "text": "this is amazing you're like yeah they're not coming in and demanding something of you which is so refreshing and to see",
    "start": "2530680",
    "end": "2538280"
  },
  {
    "text": "the chats gone in the Discord community and the way people have just jumped in to help has been amazing I'm not always",
    "start": "2538280",
    "end": "2546680"
  },
  {
    "text": "around all the time to answer questions and to then come back and find somebody else posting your project as a solution",
    "start": "2546680",
    "end": "2553280"
  },
  {
    "text": "and then really hyping it up or answering questions on GitHub um and trying to contribute back is just really",
    "start": "2553280",
    "end": "2559680"
  },
  {
    "text": "nice like yeah I can't stress enough how great the community is in the njs ecosystem yeah so that's got to be a",
    "start": "2559680",
    "end": "2566079"
  },
  {
    "text": "good feeling like coming into a chat and seeing your solution posted as like without you prompting it right it's just",
    "start": "2566079",
    "end": "2572200"
  },
  {
    "text": "pretty cool yeah this one uh developer his name is Scott and he's been an",
    "start": "2572200",
    "end": "2577440"
  },
  {
    "text": "amazing Advocate and he's also contributed back a lot of stuff and he talks about being uh coding just kind of",
    "start": "2577440",
    "end": "2583880"
  },
  {
    "text": "being a hobby for him but to see how involved he is with the community and everything he does to help push it",
    "start": "2583880",
    "end": "2589280"
  },
  {
    "text": "Forward is super cool the other thing that has been interesting working Nest is how many um amazing Engineers outside",
    "start": "2589280",
    "end": "2598240"
  },
  {
    "text": "of the US that I get to interact with from Europe Russia like all of Asia like",
    "start": "2598240",
    "end": "2603960"
  },
  {
    "text": "it's people from all over the world and it's not just so us uh which has been really nice and to know that I'm helping",
    "start": "2603960",
    "end": "2610839"
  },
  {
    "text": "my project is helping a company halfway across the world uh deliver Solutions is is really cool yeah that's awesome and",
    "start": "2610839",
    "end": "2616920"
  },
  {
    "text": "that kind of gets into another thing I wanted to talk about which is like you know developing tools and applications",
    "start": "2616920",
    "end": "2623079"
  },
  {
    "text": "for developers how do you feel about that as like it is it quite different is it more fun than like you know",
    "start": "2623079",
    "end": "2630040"
  },
  {
    "text": "traditional like you know client work or or daily work that that you you end up working on is it a different feeling in",
    "start": "2630040",
    "end": "2636680"
  },
  {
    "text": "general I think it's a different feeling in general for me building tools for other",
    "start": "2636680",
    "end": "2642480"
  },
  {
    "text": "Engineers that aren't always the flashiest things but it's like query Builders parsing csvs things like that",
    "start": "2642480",
    "end": "2649000"
  },
  {
    "text": "it gives me that nice feeling of knowing that I'm helping another engineer out yeah without having to be there like",
    "start": "2649000",
    "end": "2654960"
  },
  {
    "text": "when you're writing something for an end user or a business application you're trying to think of the ways that could break it when you're writing something",
    "start": "2654960",
    "end": "2660680"
  },
  {
    "text": "for an engineer you're trying to think of all the ways that they could use it or would want to use it so it's kind of a different frame of mind especially",
    "start": "2660680",
    "end": "2666839"
  },
  {
    "text": "when in something like NJ query or Goku or fast CV there's all these different",
    "start": "2666839",
    "end": "2672160"
  },
  {
    "text": "use cases and then when you get an issue come in you're like wow I never thought",
    "start": "2672160",
    "end": "2677200"
  },
  {
    "text": "about that before like I can't it's really you have to take a lot more time to dive in and figure out okay what are you trying to accomplish here and how",
    "start": "2677200",
    "end": "2684839"
  },
  {
    "text": "can I help you yeah it's just a different frame of mind I I love that piece of it I wish I had more time to",
    "start": "2684839",
    "end": "2692240"
  },
  {
    "text": "stay on top of everything all the time but it's purely like a a side project to get my coding fix but doing that is it's",
    "start": "2692240",
    "end": "2701040"
  },
  {
    "text": "enjoyable I I just like doing it definitely because it is like you're kind of scratching your own itch in a",
    "start": "2701040",
    "end": "2706280"
  },
  {
    "text": "lot of ways right you're building a tool that you would want to use but it just turns out that others would also really",
    "start": "2706280",
    "end": "2711640"
  },
  {
    "text": "like to use it which is really nice and coming from like a developer mindset like you know your developer working on",
    "start": "2711640",
    "end": "2717800"
  },
  {
    "text": "tools for other developer or for yourself that other developers find very helpful well it's a way to put yourself",
    "start": "2717800",
    "end": "2723640"
  },
  {
    "text": "in another developer shoes right and kind of get a glimpse of their job and like what they're trying to do that's a",
    "start": "2723640",
    "end": "2729520"
  },
  {
    "text": "cool thing because you can become so so siloed in your own work and what you're focusing on and how you do it at your",
    "start": "2729520",
    "end": "2735760"
  },
  {
    "text": "shop that when you get to see the way somebody else does it and what their problems are it's I don't know it's like",
    "start": "2735760",
    "end": "2741359"
  },
  {
    "text": "living another life for a brief moment yeah definitely there's also something that you said you mentioned like um you",
    "start": "2741359",
    "end": "2748200"
  },
  {
    "text": "know end users like you're thinking about how they might break the code I got to imagine that you would think that",
    "start": "2748200",
    "end": "2753960"
  },
  {
    "text": "about developers too how can I manipulate this code to do what yeah you definitely do have to think",
    "start": "2753960",
    "end": "2759200"
  },
  {
    "text": "about that but it's always the use cases and I found with developer tools I spend",
    "start": "2759200",
    "end": "2765559"
  },
  {
    "text": "a lot more time and every engineer should be doing this right spending a lot of time testing but I spend a lot of time trying to cover all the edge cases",
    "start": "2765559",
    "end": "2772440"
  },
  {
    "text": "and stuff like that because this is the foundation of somebody else's application and so it has to have good",
    "start": "2772440",
    "end": "2777839"
  },
  {
    "text": "test coverage it has to throw errors in the correct place or handle certain scenarios and so I'm always keeping that",
    "start": "2777839",
    "end": "2785640"
  },
  {
    "text": "in mind when I'm releasing a new piece of software that if it doesn't work or or breaks and I release",
    "start": "2785640",
    "end": "2792480"
  },
  {
    "text": "it I do a bad release I could break thousands of applications like I think fast CSV is nearing a million downloads",
    "start": "2792480",
    "end": "2799960"
  },
  {
    "text": "a day or week or whatever like you look at that and you're like okay the impact",
    "start": "2799960",
    "end": "2805000"
  },
  {
    "text": "that you could have if you break it is a little bit scarier but also exciting and so definitely thinking about how they",
    "start": "2805000",
    "end": "2811520"
  },
  {
    "text": "could break it and making sure that you have test coverage for all that um has always been super important to me especially in these types of tools yeah",
    "start": "2811520",
    "end": "2818200"
  },
  {
    "text": "definitely and f f CSV being another open source project that you've created right yeah that was I think you were",
    "start": "2818200",
    "end": "2825240"
  },
  {
    "text": "around when I created that one it was yeah it was the CSV parts we were using at the time wasn't quite quick enough to do 10 million lines and so we had to",
    "start": "2825240",
    "end": "2834280"
  },
  {
    "text": "figure that one out and then it's kind of continued to just be adopted which is pretty cool without having to do I've",
    "start": "2834280",
    "end": "2840280"
  },
  {
    "text": "never been a marketer or somebody that's good at marketing what I the work that I've done to see something like that",
    "start": "2840280",
    "end": "2846119"
  },
  {
    "text": "just continually to be used and to grow in the community is pretty neat no it's I mean it goes back to scratching your",
    "start": "2846119",
    "end": "2852559"
  },
  {
    "text": "own itch and it just turns out that other people have that itch too yep it's really cool M taking another step back I",
    "start": "2852559",
    "end": "2858319"
  },
  {
    "text": "wanted to ask you about when we first started working together almost a decade ago or maybe more than a decade ago now",
    "start": "2858319",
    "end": "2864240"
  },
  {
    "text": "you know we were writing a lot of JavaScript Dojo things like that what got you over to typescript was it like",
    "start": "2864240",
    "end": "2871640"
  },
  {
    "text": "you went there as a result of Nest was it Nest like you found nest after",
    "start": "2871640",
    "end": "2877319"
  },
  {
    "text": "falling for typescript or let's see I remember when they announced typescript at jsom and I think there were mixed",
    "start": "2877319",
    "end": "2884720"
  },
  {
    "text": "reactions uh at the time and at the time I loved JavaScript I did probably some",
    "start": "2884720",
    "end": "2891920"
  },
  {
    "text": "I've probably created some projects that I shouldn't have like a rules engine written in types in JavaScript I think you remember NES Y and I was a huge",
    "start": "2891920",
    "end": "2899839"
  },
  {
    "text": "JavaScript developer um up until I think about 2015 then I started doing go and",
    "start": "2899839",
    "end": "2905319"
  },
  {
    "text": "then moved on to and doing a lot of that and then I wanted to come back to my roots I guess and start doing more",
    "start": "2905319",
    "end": "2912040"
  },
  {
    "text": "JavaScript and uplifting some of the old projects that I had like Fast CSV was written in JavaScript initially and so I",
    "start": "2912040",
    "end": "2919440"
  },
  {
    "text": "wanted to look at what the latest Technologies were and typescript was really starting to take off and I had",
    "start": "2919440",
    "end": "2925160"
  },
  {
    "text": "been doing type languages a lot recently and I fell in love with how much safety",
    "start": "2925160",
    "end": "2930359"
  },
  {
    "text": "it provides you I mean it's kind of like that warm blanket at night right like you feel a little bit safer and so I",
    "start": "2930359",
    "end": "2936880"
  },
  {
    "text": "through and tried to started upgrading fast CSV and what I quickly found is like starting JavaScript first and then porting over how many things that you",
    "start": "2936880",
    "end": "2944040"
  },
  {
    "text": "just ignore that could break your code or whatever and then typescript is like nope you shouldn't be doing that and so",
    "start": "2944040",
    "end": "2950319"
  },
  {
    "text": "that's when I really started to fall in love with it and see the power of it I mean it's not giving you as many checks as a a fully typed language would but it",
    "start": "2950319",
    "end": "2958680"
  },
  {
    "text": "makes JavaScript just a little bit better and so it was really that coming back from type languages to JavaScript",
    "start": "2958680",
    "end": "2966200"
  },
  {
    "text": "and the other thing that typescript helped me do when coming back to an old JavaScript project you have to build up",
    "start": "2966200",
    "end": "2973160"
  },
  {
    "text": "this huge mental oh yeah the full context of the project to know how everything ties together make sure",
    "start": "2973160",
    "end": "2978319"
  },
  {
    "text": "you're thinking about all the edge cases and if you haven't looked at a piece of code in a couple years especially JavaScript code that's hard so you're",
    "start": "2978319",
    "end": "2985079"
  },
  {
    "text": "like oh how is this called again and then you right click and find usages and nothing pops up and you're like oh",
    "start": "2985079",
    "end": "2990720"
  },
  {
    "text": "that's because I did a dynamic look up or something on it and it's not actually referenced anymore so typescript gives",
    "start": "2990720",
    "end": "2996960"
  },
  {
    "text": "me the ability to come back and support projects even though I'm not actively working on them dayto day and so once I",
    "start": "2996960",
    "end": "3003240"
  },
  {
    "text": "really embraced the power of that I'm Not Looking Back yeah that's just a",
    "start": "3003240",
    "end": "3008280"
  },
  {
    "text": "hilarious observation that I've had too like I used to to pride myself on all of the ridiculous like World building that",
    "start": "3008280",
    "end": "3014760"
  },
  {
    "text": "I could do in my head to keep it all like going and you know I just yeah type it and I I knew you know exactly what it",
    "start": "3014760",
    "end": "3021040"
  },
  {
    "text": "was and I type it very few errors and everything and now I'm just like if I go back to a project that doesn't have",
    "start": "3021040",
    "end": "3026799"
  },
  {
    "text": "typescript I'm just like was it just that I was younger then and I just can't do that anymore or am I just so spoiled",
    "start": "3026799",
    "end": "3033240"
  },
  {
    "text": "now by the tools yeah yeah either way I don't want to find out I'll just keep it we're",
    "start": "3033240",
    "end": "3038480"
  },
  {
    "text": "getting old Nick we can't do it right oh man I think you and I were",
    "start": "3038480",
    "end": "3044520"
  },
  {
    "text": "sitting next to each other when they announced typescript and like if I want a typescript I'd be using Java or I'd go",
    "start": "3044520",
    "end": "3049680"
  },
  {
    "text": "to a type language how wrong we were well I think we we had the same reaction",
    "start": "3049680",
    "end": "3055280"
  },
  {
    "text": "cuz we were also sitting next to each other when uh when probably on Hacker News or something coffee script was",
    "start": "3055280",
    "end": "3060920"
  },
  {
    "text": "announced or came out or got popular or something it was just like why you know",
    "start": "3060920",
    "end": "3066400"
  },
  {
    "text": "that looks cool but why would I want that I think we were sitting next to each other when react came out at jsom too or when they really started to talk",
    "start": "3066400",
    "end": "3072520"
  },
  {
    "text": "about it and that was another one like hm that's interesting and like but then I I automatically went back to well I",
    "start": "3072520",
    "end": "3079240"
  },
  {
    "text": "could kind of do that in Dojo with widgets and The Binding stuff in there and like Doge already did it but then",
    "start": "3079240",
    "end": "3084960"
  },
  {
    "text": "once I started to actually use reactor this is amazing like this is the easiest way to get an application up and running",
    "start": "3084960",
    "end": "3090720"
  },
  {
    "text": "and create a cool front end like I think that's the thing that over the years you're like how many times I've been",
    "start": "3090720",
    "end": "3097040"
  },
  {
    "text": "wrong and it teaches you to not have strong opinions yeah you know what though that's that's a great thing fail",
    "start": "3097040",
    "end": "3102920"
  },
  {
    "text": "fast and learn to fail fast learn to grow from those failures and that's how you will grow I guess yeah but yes I I",
    "start": "3102920",
    "end": "3109520"
  },
  {
    "text": "do remember that at jsum that was a a lot of fun we were we were writing a backbone application at the time and we",
    "start": "3109520",
    "end": "3115799"
  },
  {
    "text": "were actually writing a almost a dojo like declarative syntax right remember",
    "start": "3115799",
    "end": "3121240"
  },
  {
    "text": "thumbs thumbs and uh yeah we're like nah we'll stick with backbone and here we",
    "start": "3121240",
    "end": "3127040"
  },
  {
    "text": "are a decade later a little less than a decade later uh fawning over react and",
    "start": "3127040",
    "end": "3132720"
  },
  {
    "text": "in types script now so yep yep yep yeah well Doug thanks so much for",
    "start": "3132720",
    "end": "3139400"
  },
  {
    "text": "coming on is there anything else before I let you go that you want to to say about nestjs nestjs query typescript gql",
    "start": "3139400",
    "end": "3147880"
  },
  {
    "text": "I'm always looking for contributors um if you have any interest in in helping to move this project along or you heard",
    "start": "3147880",
    "end": "3154480"
  },
  {
    "text": "something you might have liked feel free to put an issue out there or just start going through an issue in PRS like",
    "start": "3154480",
    "end": "3160559"
  },
  {
    "text": "there's not a better feeling than as a the maintainer of an open source project to get this random amazing PR that just",
    "start": "3160559",
    "end": "3166720"
  },
  {
    "text": "drops in your lap you're like wow like that's amazing you should become part of the core contributors yeah so if you're",
    "start": "3166720",
    "end": "3172000"
  },
  {
    "text": "at all interested in helping to contribute or move this project along I'd love that that'd be amazing would it",
    "start": "3172000",
    "end": "3177119"
  },
  {
    "text": "be best to reach out in an issue GitHub discussion Discord Twitter honestly just",
    "start": "3177119",
    "end": "3182480"
  },
  {
    "text": "start participating in the issues and you can also reach out to me directly",
    "start": "3182480",
    "end": "3187680"
  },
  {
    "text": "that's fine as well awesome yeah and we'll have links in the show notes for all of that so Doug thanks so much for",
    "start": "3187680",
    "end": "3192720"
  },
  {
    "text": "coming on and um chatting with us about react or sorry not react about nestjs",
    "start": "3192720",
    "end": "3198400"
  },
  {
    "text": "njs query and uh typescript and graphql yeah I really appreciate it no thank you for having me yeah thanks so",
    "start": "3198400",
    "end": "3205440"
  },
  {
    "text": "much thanks for listening to JS party we",
    "start": "3205440",
    "end": "3211960"
  },
  {
    "text": "appreciate you spending your time with us if you haven't joined the community yet fix that bug at JSP party. fm/",
    "start": "3211960",
    "end": "3219760"
  },
  {
    "text": "Community get yourself some comfy threads at JSP party. fm/ merch and take",
    "start": "3219760",
    "end": "3225599"
  },
  {
    "text": "it to the next level by joining Chang log Plus+ that gets you all of our shows and free occasional bonus content plus",
    "start": "3225599",
    "end": "3233079"
  },
  {
    "text": "that warm fuzzy feeling you get by supporting people who make cool stuff for you learn more at change.com plusus",
    "start": "3233079",
    "end": "3239839"
  },
  {
    "text": "plusus JS party is produced by Jared Santo with music by breakmaster cylinder",
    "start": "3239839",
    "end": "3244880"
  },
  {
    "text": "we are brought to you by fastly laun darkley and lenoe next up on the Pod we",
    "start": "3244880",
    "end": "3250079"
  },
  {
    "text": "have no technical steering committee member Mato Kina talking penino and fastify subscribe now and stay tuned for",
    "start": "3250079",
    "end": "3257760"
  },
  {
    "text": "that it'll hit your podcast feed next",
    "start": "3257760",
    "end": "3262040"
  },
  {
    "text": "[Music] week [Music]",
    "start": "3263570",
    "end": "3269359"
  },
  {
    "text": "is Javascript the language suffering",
    "start": "3269359",
    "end": "3277000"
  }
]