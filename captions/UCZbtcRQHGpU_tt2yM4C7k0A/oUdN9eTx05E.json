[
  {
    "text": "bandwidth for change log is provided by fastly learn more at fastly.com I'm",
    "start": "80",
    "end": "6240"
  },
  {
    "text": "Keith Randall and it's go [Music]",
    "start": "6240",
    "end": "15480"
  },
  {
    "text": "[Applause] [Music]",
    "start": "15480",
    "end": "22020"
  },
  {
    "text": "time it's go time a weekly podcast where we discuss interesting topics around the go programming language the community",
    "start": "22400",
    "end": "29160"
  },
  {
    "text": "and everything in between Queen if you currently write go or aspire to this is the show for",
    "start": "29160",
    "end": "35040"
  },
  {
    "text": "you it is episode number 27 of go time today on the show we have myself Eric St",
    "start": "35040",
    "end": "41840"
  },
  {
    "text": "Martin uh we have caria Pinto hi there and then Brian ketton is out today and",
    "start": "41840",
    "end": "48640"
  },
  {
    "text": "filling in for him today is Bill Kennedy say hello Bill hey hi everybody and our",
    "start": "48640",
    "end": "54320"
  },
  {
    "text": "special guest today uh actually taught us all how to make a lot of profit using maps at go for con I'm still waiting for",
    "start": "54320",
    "end": "61280"
  },
  {
    "text": "my check but uh on the show today is Keith Randall from the go team hello",
    "start": "61280",
    "end": "66439"
  },
  {
    "text": "everybody so you want to give everybody kind of like a a rundown uh uh who you are what you do uh specifically On The",
    "start": "66439",
    "end": "72680"
  },
  {
    "text": "Go Team sure uh I work on go runtime internals and compilers so I work on",
    "start": "72680",
    "end": "78799"
  },
  {
    "text": "making go faster uh all behind the scenes you don't sort of see anything I do in apis or anything like that but um",
    "start": "78799",
    "end": "85880"
  },
  {
    "text": "every Le release we make things a little bit faster and a little bit less memory and all around better that's awesome so you you specifically",
    "start": "85880",
    "end": "92159"
  },
  {
    "text": "work on the compiler and runtime correct so I sort of started out working on go",
    "start": "92159",
    "end": "97280"
  },
  {
    "text": "working on runtime things like Maps scheduler some of the type conversion stuff and so on um more recently I've",
    "start": "97280",
    "end": "104520"
  },
  {
    "text": "been working on compiler internals so making generated code better uh smaller",
    "start": "104520",
    "end": "110680"
  },
  {
    "text": "that sort of thing now that's awesome so um so have you played a a big role in the SSA stuff that's happened over the",
    "start": "110680",
    "end": "117320"
  },
  {
    "text": "last couple of releases uh yeah so I started the SSA backend project proposed",
    "start": "117320",
    "end": "123399"
  },
  {
    "text": "it got people on board with it um and sort of was the tech lead for it I wrote",
    "start": "123399",
    "end": "128520"
  },
  {
    "text": "the first prototype and then got a bunch of other people both from inside Google and outside to help work on it um and it",
    "start": "128520",
    "end": "135800"
  },
  {
    "text": "was released in 17 for amd64 uh and then for this upcoming",
    "start": "135800",
    "end": "141879"
  },
  {
    "text": "release 18 it's going to be available on all the other architectures so arm and",
    "start": "141879",
    "end": "147560"
  },
  {
    "text": "myips and power PC so on I think maybe even there's a sparkk one coming I'm not sure whether it's going to make one",
    "start": "147560",
    "end": "153319"
  },
  {
    "text": "eight oh nice yeah and the performance we get it's on x86 it was something like",
    "start": "153319",
    "end": "158760"
  },
  {
    "text": "20% better um sort it very much depends on your application but we're getting up",
    "start": "158760",
    "end": "164560"
  },
  {
    "text": "you know on average about 20% better mostly because the x86 chips are really good at executing bad code so it really",
    "start": "164560",
    "end": "172360"
  },
  {
    "text": "you really have to do a good job of making better code before you can see the performance improvements we're getting something more like 40% better",
    "start": "172360",
    "end": "179200"
  },
  {
    "text": "on arm chips which are not as good as hiding the old bad code so I think it",
    "start": "179200",
    "end": "184799"
  },
  {
    "text": "turned out pretty pretty well overall yeah an arm needs the love even more right because arm typically doesn't have",
    "start": "184799",
    "end": "191720"
  },
  {
    "text": "the the clock rate that you know NX 86 chip does so right absolutely those",
    "start": "191720",
    "end": "197000"
  },
  {
    "text": "performance improvements help a lot and those performance improvements help save power too so that's also a big thing",
    "start": "197000",
    "end": "203599"
  },
  {
    "text": "yeah that's true as well so what we should really we should probably Circle back a little bit too when we talk about",
    "start": "203599",
    "end": "209239"
  },
  {
    "text": "SSA um and just kind of like maybe give a brief explanation of what SSA is and",
    "start": "209239",
    "end": "215720"
  },
  {
    "text": "kind of you know why that benefits us to have the compiler uh leverage SSA okay",
    "start": "215720",
    "end": "222239"
  },
  {
    "text": "so I guess at first it would be helped to describe what the old compiler was like and so the old compiler used to",
    "start": "222239",
    "end": "228040"
  },
  {
    "text": "take the ab abstract syntax tree of a go program and would generate code sort of",
    "start": "228040",
    "end": "234760"
  },
  {
    "text": "node by node on that syntax tree so if there was a plus it would generate a it would load both arguments into registers",
    "start": "234760",
    "end": "240640"
  },
  {
    "text": "do the plus and then store the result somewhere and it would sort of do that one at a time on the nodes of the syntax",
    "start": "240640",
    "end": "247360"
  },
  {
    "text": "tree with no look ahead no very very little look behind so sort of the coda",
    "start": "247360",
    "end": "253840"
  },
  {
    "text": "generated wasn't very good because there a lot of moves you didn't need there were a lot of operations that if you did the same ad twice it would execute that",
    "start": "253840",
    "end": "260079"
  },
  {
    "text": "ad twice instead of reusing the result and so SSA instead what it does is it",
    "start": "260079",
    "end": "265199"
  },
  {
    "text": "takes the Absa syx tree and builds a control flow graph and a value graph and",
    "start": "265199",
    "end": "271000"
  },
  {
    "text": "then we can do all sorts of optimizations on that graph like common sub expression elimination we can do",
    "start": "271000",
    "end": "276400"
  },
  {
    "text": "balance check elimination we can do um better scheduling all that sort of stuff",
    "start": "276400",
    "end": "282360"
  },
  {
    "text": "dead code elimination all of which benefit the generated code and make it better than what was generated",
    "start": "282360",
    "end": "289000"
  },
  {
    "text": "previously straight from the abst abstract syntax tree and SSA compilers",
    "start": "289000",
    "end": "294280"
  },
  {
    "text": "have been around for a while I know I worked on one like 15 years ago so they're it's pretty mature compiler",
    "start": "294280",
    "end": "300120"
  },
  {
    "text": "technology GCC uses it llvm uses it it's pretty common compiler technology and",
    "start": "300120",
    "end": "305880"
  },
  {
    "text": "this is sort of this is not sort of a researchy thing SSA is is known to be a",
    "start": "305880",
    "end": "311720"
  },
  {
    "text": "good way to generate code for compilers just you know we need to get go up to speed so that we can compete with the",
    "start": "311720",
    "end": "317120"
  },
  {
    "text": "other languages I got a a quick question because I'm always trying to visualize these things that are going on so this",
    "start": "317120",
    "end": "323840"
  },
  {
    "text": "piece is happening inside of the compiler and then is this helping to generate that intermediate assembly is",
    "start": "323840",
    "end": "330479"
  },
  {
    "text": "that kind of where this is or is it like where in the tool chain between the compiler the assembler and the Linker is",
    "start": "330479",
    "end": "336560"
  },
  {
    "text": "all this sitting fair enough so that when you start with go code there's a parsa that basically takes that go code",
    "start": "336560",
    "end": "343000"
  },
  {
    "text": "and makes an internal in memory representation called the abstract syntax tree from there SSA takes that",
    "start": "343000",
    "end": "349199"
  },
  {
    "text": "abstract syntax tree and generates assembly code it's actually sort of an inmemory representation of the assembly",
    "start": "349199",
    "end": "354960"
  },
  {
    "text": "code um it's sort of semi already assembled and then that gets passed to",
    "start": "354960",
    "end": "360280"
  },
  {
    "text": "the Linker uh and code generator from there so it's basically the input is an abstract syntax tree and the output is",
    "start": "360280",
    "end": "367800"
  },
  {
    "text": "an inmemory representation of assembly okay so this would actually be an IR bill and I were actually kind of having",
    "start": "367800",
    "end": "373319"
  },
  {
    "text": "this debate before the the show uh the difference between an an intermediate",
    "start": "373319",
    "end": "378720"
  },
  {
    "text": "representation and an Intermediate Language and the best I could come up with is that uh an intermediate language",
    "start": "378720",
    "end": "385880"
  },
  {
    "text": "is actually produce code whereas IR is typically uh in memory data structure",
    "start": "385880",
    "end": "391120"
  },
  {
    "text": "but I could be completely wrong there too yeah I don't think I've ever heard the term intermediate code or intermed",
    "start": "391120",
    "end": "397599"
  },
  {
    "text": "Intermediate Language I think yeah Intermediate Language I don't know it's a good question so lvm has something",
    "start": "397599",
    "end": "404360"
  },
  {
    "text": "which maybe I would call an Intermediate Language it's an actual textual representation of the IR that was my my",
    "start": "404360",
    "end": "411280"
  },
  {
    "text": "interpretation of the difference between the two I've always heard ir and then Bill said iil this morning and I was",
    "start": "411280",
    "end": "417759"
  },
  {
    "text": "like hm I think I got that from theet side of things over there when they they",
    "start": "417759",
    "end": "424000"
  },
  {
    "text": "have a whole Intermediate Language over there between what the C compilers producing if I remember yeah I believe",
    "start": "424000",
    "end": "430000"
  },
  {
    "text": "they have it's like Java they have some sort of bite code thing right yeah so I was the SSA is really interesting I was",
    "start": "430000",
    "end": "436160"
  },
  {
    "text": "just always curious if it came before or after the assembler there or somewhere in between so okay yeah so that there's",
    "start": "436160",
    "end": "443520"
  },
  {
    "text": "no assembler when the go compiler runs there's no assembler used ah okay okay",
    "start": "443520",
    "end": "450440"
  },
  {
    "text": "the thing that's generated from the compiler is already essentially equivalent to what the assembler produces when it parses assembly oh",
    "start": "450440",
    "end": "457879"
  },
  {
    "text": "interesting yeah so then basically there's only a Linker after that right there's no there's no intermediate",
    "start": "457879",
    "end": "463560"
  },
  {
    "text": "assembly stage correct yeah I think um Rob Pike did a talk about that at",
    "start": "463560",
    "end": "469159"
  },
  {
    "text": "gophercon where he's talking about there's like a a shared layer that there is an assembler and there is the",
    "start": "469159",
    "end": "475720"
  },
  {
    "text": "compiler but there's like an object or some kind of Library that's used between the two",
    "start": "475720",
    "end": "483080"
  },
  {
    "text": "right it was a while ago that I saw the the video I didn't get to watch the talk while I was there but I remember vaguely",
    "start": "483080",
    "end": "488520"
  },
  {
    "text": "that there's no there was no assembly stage in the compile process right we go",
    "start": "488520",
    "end": "493759"
  },
  {
    "text": "directly from the compiler output it generates something called the OBS library and so it generates basically",
    "start": "493759",
    "end": "499960"
  },
  {
    "text": "one structure for every assembly instruction it's you know it tells you what the register inputs and the register outputs are and then actual",
    "start": "499960",
    "end": "506599"
  },
  {
    "text": "instruction selection like encoding the bytes of the inst instuction is done by that object Library so the compiler",
    "start": "506599",
    "end": "513159"
  },
  {
    "text": "itself doesn't emit bytes it emits these data structures one per assembly",
    "start": "513159",
    "end": "518479"
  },
  {
    "text": "instruction oh wow yes so so it doesn't so in a typical approach the compiler",
    "start": "518479",
    "end": "524000"
  },
  {
    "text": "would emit assembly instructions and then those would then get turned into the actual machine code by the assembler",
    "start": "524000",
    "end": "531360"
  },
  {
    "text": "so you're saying that that OB Library converts the IR directly into the",
    "start": "531360",
    "end": "537000"
  },
  {
    "text": "machine instructions by using kind of intern internal data structures exactly",
    "start": "537000",
    "end": "542279"
  },
  {
    "text": "yeah and so that our assembler is really just a parser it doesn't assemble in that sense",
    "start": "542279",
    "end": "551120"
  },
  {
    "text": "the the OB Library which is part of the Linker well sort of is the thing that actually does instruction selection from",
    "start": "551120",
    "end": "557040"
  },
  {
    "text": "the sort of internal representation yeah oh interesting now I need to to start",
    "start": "557040",
    "end": "562640"
  },
  {
    "text": "playing with compiler internals it's a little below where I usually work but it's it's really",
    "start": "562640",
    "end": "569519"
  },
  {
    "text": "interesting so looking at kind of the the changes and stuff and I know that a",
    "start": "569519",
    "end": "574760"
  },
  {
    "text": "lot of this um the work that you guys have been doing has been making it easier to port to new architectures um",
    "start": "574760",
    "end": "581240"
  },
  {
    "text": "on the back end uh as far as like the assembly and stuff goes now what about the compiler back end itself is it is it",
    "start": "581240",
    "end": "589240"
  },
  {
    "text": "in theory is it reusable kind of like you know J Ruby and Scala are built kind of on top of java B code um so the the",
    "start": "589240",
    "end": "598040"
  },
  {
    "text": "new SSA backend is very easy to Port so it takes there's just a machine description file that has all the op",
    "start": "598040",
    "end": "604760"
  },
  {
    "text": "codes you want to use and a bunch of rewrite rules that tell you how to get from a sort of machine independent IR",
    "start": "604760",
    "end": "610880"
  },
  {
    "text": "down to a machine dependent IR as far as the compiler itself whether you can like embed a compiler in some other program",
    "start": "610880",
    "end": "617760"
  },
  {
    "text": "it's not sort of directly reusable although it's certainly more reusable than the old compiler and that's the",
    "start": "617760",
    "end": "623800"
  },
  {
    "text": "direction we're heading is to get to the point where we could if we wanted to make the compiler Library I don't think",
    "start": "623800",
    "end": "630560"
  },
  {
    "text": "I have a direct use case for that but it's just interesting to kind of see these these different languages and",
    "start": "630560",
    "end": "635639"
  },
  {
    "text": "stuff build on top of things that other languages have done and kind of Leverage",
    "start": "635639",
    "end": "640800"
  },
  {
    "text": "that stuff where there's shared resources so if somebody wanted to make you know their own spin-off of go that",
    "start": "640800",
    "end": "646760"
  },
  {
    "text": "has you know some some wanted uh feature that uh we not necessarily is",
    "start": "646760",
    "end": "653440"
  },
  {
    "text": "going to be brought into go proper just yet because of the go1 compatibility guarantee or something maybe they do",
    "start": "653440",
    "end": "659320"
  },
  {
    "text": "like a spin-off that has it in there but leverage all the same compiler logic right yeah that would be nice yeah I I",
    "start": "659320",
    "end": "666760"
  },
  {
    "text": "was curious we we constantly talk about how fast the compiler is and I we trying to bring it back down to that um when it",
    "start": "666760",
    "end": "674120"
  },
  {
    "text": "was written in C right but optimization also really important so how do you guys",
    "start": "674120",
    "end": "679440"
  },
  {
    "text": "strike a balance about how much optimization the compilers will do as opposed to how much time that would take",
    "start": "679440",
    "end": "686440"
  },
  {
    "text": "that's a good question it's sort of hard to there's a there is a trade-off there and at some point we're going to have to",
    "start": "686440",
    "end": "692120"
  },
  {
    "text": "say no and we we have said no to optimizations that just would take too long otherwise like alas analysis um we",
    "start": "692120",
    "end": "698440"
  },
  {
    "text": "haven't done any yet and um we're sort of scared to go down that route because it can be very expensive the original",
    "start": "698440",
    "end": "704920"
  },
  {
    "text": "goal of the SSA compiler was we want to make the compiler generate code that's better enough that the compiler gets no",
    "start": "704920",
    "end": "712240"
  },
  {
    "text": "slower because we compile the compiler with the compiler so we sort of want to buy back all the extra time we're",
    "start": "712240",
    "end": "718360"
  },
  {
    "text": "spending by making the compiler faster and we didn't quite get there for x86",
    "start": "718360",
    "end": "723800"
  },
  {
    "text": "SSA added like something like 30 or 40% to the running time of the compiler what",
    "start": "723800",
    "end": "730480"
  },
  {
    "text": "made the compiler 20% faster so we sort of lost out in 10 to 20% but on arm it",
    "start": "730480",
    "end": "736920"
  },
  {
    "text": "totally works out that we get 40% back by compiling the compiler with the SSA backend and then",
    "start": "736920",
    "end": "744320"
  },
  {
    "text": "we spend 40% extra time so the compiler is actually no slower with SSA backend",
    "start": "744320",
    "end": "749399"
  },
  {
    "text": "um than it used to be on arm I always love how meta that is it is very meta",
    "start": "749399",
    "end": "755360"
  },
  {
    "text": "it's hard it's hard to describe are there optimizations that I guess once all this SSA stuff is done optimizations",
    "start": "755360",
    "end": "762279"
  },
  {
    "text": "you'd like to see maybe going forward sure and we got some of the major ones like common sub expression which are",
    "start": "762279",
    "end": "768959"
  },
  {
    "text": "very important there are ones that we could do that sort of are more domain specific so we could certainly improve",
    "start": "768959",
    "end": "776320"
  },
  {
    "text": "our generation of floating Point code for example we could do a better job of balance check elimination we could do um",
    "start": "776320",
    "end": "783240"
  },
  {
    "text": "some simple Alias analysis that would get rid of uh some variables that would otherwise have to be stored on the stack",
    "start": "783240",
    "end": "789160"
  },
  {
    "text": "we could put them in registers so there's things like that but at at some point we're going to reach diminishing",
    "start": "789160",
    "end": "795600"
  },
  {
    "text": "returns right it's not worth the extra effort of coding it's not worth the extra runtime with compiler um to do",
    "start": "795600",
    "end": "801600"
  },
  {
    "text": "those sorts of things and then at some point we're going to have to sort of declare that we're done or at least",
    "start": "801600",
    "end": "806760"
  },
  {
    "text": "we're done unless someone comes up with new ideas there's always more better that's true yeah well by the time",
    "start": "806760",
    "end": "815079"
  },
  {
    "text": "it I think there's the fear that there's an end right but it's just like any goal in life by the time you get anywhere",
    "start": "815079",
    "end": "820959"
  },
  {
    "text": "close you've drawn the line out further right there'll be something else that comes out and you're like we need to do",
    "start": "820959",
    "end": "826160"
  },
  {
    "text": "that yeah that's true and and there's always people filing bugs saying hey my program is not as fast as I think it",
    "start": "826160",
    "end": "831560"
  },
  {
    "text": "should be you guys should fix this um you know there's I have a stack of them now that I have to look at so yeah there",
    "start": "831560",
    "end": "837279"
  },
  {
    "text": "will always be complaints there's just a question of you know there's limited Manpower and there's limited compiler running time so you have to be judicious",
    "start": "837279",
    "end": "843720"
  },
  {
    "text": "about what you attack yeah that's I guess that's the trade-off too it's the same thing with the language right",
    "start": "843720",
    "end": "849440"
  },
  {
    "text": "they've the whole thought process behind the language is you know how do how do we provide everybody what they need",
    "start": "849440",
    "end": "855839"
  },
  {
    "text": "without providing them too much and it's same thing with the compiler you know how do you do everything you need to do",
    "start": "855839",
    "end": "861360"
  },
  {
    "text": "but without having uh slow build times right every time I have to compile a c",
    "start": "861360",
    "end": "866560"
  },
  {
    "text": "or C++ app I I like want to email all of you and thank",
    "start": "866560",
    "end": "872000"
  },
  {
    "text": "you like uh you forget and then there's one day you have to work on something",
    "start": "872000",
    "end": "877040"
  },
  {
    "text": "and build it and you're like oh this is so bad yeah I had to download lvm at one point and build it and it took like two",
    "start": "877040",
    "end": "883600"
  },
  {
    "text": "hours oh like how is this possible I mean sure there's some incremental thing",
    "start": "883600",
    "end": "888639"
  },
  {
    "text": "which you can do better if you're a developer but from scratch it took like two hours to build remember doing this",
    "start": "888639",
    "end": "894000"
  },
  {
    "text": "on processors less than a gigahertz like I remember upgrading like gnome or",
    "start": "894000",
    "end": "900959"
  },
  {
    "text": "or KDE back in the day and that was like a you left you let it run overnight yeah I don't want to go back to those days",
    "start": "900959",
    "end": "907920"
  },
  {
    "text": "same thing 56k modems I don't want to go back our house at home just got upgraded",
    "start": "907920",
    "end": "914920"
  },
  {
    "text": "from a 2 megabit connection to a six megabit connection because we live in",
    "start": "914920",
    "end": "920079"
  },
  {
    "text": "the boonies and we're too far from the central office for anything good but just the jump from 2 megabits to six",
    "start": "920079",
    "end": "925120"
  },
  {
    "text": "megabits has been awesome it's like lifechanging is like now like more than",
    "start": "925120",
    "end": "930920"
  },
  {
    "text": "one person can watch a video at a time in our house so we're not hitting each other over the head whenever anyone else",
    "start": "930920",
    "end": "936399"
  },
  {
    "text": "is doing anything that's ruining our videos it's not fighting over who can use the bathroom to brush their teeth",
    "start": "936399",
    "end": "942720"
  },
  {
    "text": "first it's who gets to watch their movie yeah exactly like you watch cable I get Netflix",
    "start": "942720",
    "end": "949839"
  },
  {
    "text": "today so um what's next for the compiler like what's what's exciting what what do",
    "start": "949839",
    "end": "955079"
  },
  {
    "text": "you have planned for kind of the next uh couple of releases let's see um one of",
    "start": "955079",
    "end": "960560"
  },
  {
    "text": "the big things that's coming or or will if it works out is uh we're going to change the calling convention so right",
    "start": "960560",
    "end": "967399"
  },
  {
    "text": "now when you call a function everything gets passed on the stack in memory and everything gets returned on the stack",
    "start": "967399",
    "end": "973079"
  },
  {
    "text": "and that's pretty inefficient but it makes things like walking the stack and finding all the GC routes and things like that very easy so we're looking at",
    "start": "973079",
    "end": "979959"
  },
  {
    "text": "passing values and registers and returning values and registers instead and it's sort of a big project it's not",
    "start": "979959",
    "end": "986079"
  },
  {
    "text": "terribly hard coding wise to get the comp ER to generate that code but it has a lot of implications for the runtime",
    "start": "986079",
    "end": "992399"
  },
  {
    "text": "and it has a lot of implications for like everyone who's ever written assembly would have to change their",
    "start": "992399",
    "end": "997720"
  },
  {
    "text": "assembly so we're sort of looking at How We Roll such a thing out to make it so that everyone doesn't have to rewrite",
    "start": "997720",
    "end": "1003519"
  },
  {
    "text": "all their stuff all at once but we think it could buy another 10 or 20% in runtime so that's one big thing how much",
    "start": "1003519",
    "end": "1010600"
  },
  {
    "text": "assembly would you say exists in the go standard library and and runtime oh the",
    "start": "1010600",
    "end": "1016880"
  },
  {
    "text": "standard Library may have I don't know 10,000 lines of assembly wow it's not huge but there's a lot of",
    "start": "1016880",
    "end": "1023319"
  },
  {
    "text": "like stuff for all the U big in stuff has a lot of assembly all the crypto",
    "start": "1023319",
    "end": "1029319"
  },
  {
    "text": "stuff there's a lot of assembly um and then you know you can put assembly in your go project so",
    "start": "1029319",
    "end": "1034520"
  },
  {
    "text": "there's probably all kinds of stuff on GitHub that we don't even know about that has assembly and and that's the stuff I'm worried about like we can fix",
    "start": "1034520",
    "end": "1040400"
  },
  {
    "text": "the runtime and the math and whatever else um ourselves but the problem is",
    "start": "1040400",
    "end": "1045558"
  },
  {
    "text": "someone out there has random assembly that they're using in their project and we don't have control over when they change that assembly and so on so we're",
    "start": "1045559",
    "end": "1054039"
  },
  {
    "text": "currently thinking about how we might roll such a thing out if it ends up working out yeah that that almost feels",
    "start": "1054039",
    "end": "1059360"
  },
  {
    "text": "like it's going to have to be some sort of phased approach right where there's like a you know at least a release or",
    "start": "1059360",
    "end": "1065000"
  },
  {
    "text": "two to kind of give people time to convert yeah and we were thinking about you know the the current assembly when",
    "start": "1065000",
    "end": "1071919"
  },
  {
    "text": "we switch to a new call-in convention we can then generate stubs for all the old call-in convention things and then you",
    "start": "1071919",
    "end": "1078080"
  },
  {
    "text": "can sort sort of opt in to get the new calling convention and we'll remove the stub as as you change your code so",
    "start": "1078080",
    "end": "1083440"
  },
  {
    "text": "something like that may have to happen right do you work on um any of the Escape analysis stuff with the compiler",
    "start": "1083440",
    "end": "1090200"
  },
  {
    "text": "too I've touched Escape analysis yeah uh I am not a major contributor to it though um David Chase did a lot of most",
    "start": "1090200",
    "end": "1096919"
  },
  {
    "text": "recent stuff oh okay yeah there's there was a document that Demitri put out a little over a year ago on some of the",
    "start": "1096919",
    "end": "1103280"
  },
  {
    "text": "esape analysis flaws and I was kind of curious if how much of this has been worked on over that year and there's any",
    "start": "1103280",
    "end": "1109520"
  },
  {
    "text": "update to kind of what's left I I don't know that's a good question I know that it's another one of those end never-",
    "start": "1109520",
    "end": "1115880"
  },
  {
    "text": "ending rat holes you can go down trying to get every last case that people care about I don't think anyone's been",
    "start": "1115880",
    "end": "1121240"
  },
  {
    "text": "working on it seriously for the past year so you know maybe fixing obvious bugs and things but there's been no",
    "start": "1121240",
    "end": "1126440"
  },
  {
    "text": "concerted effort uh to cover the remaining gchas and so on so I have a question for you so uh we actually have",
    "start": "1126440",
    "end": "1134080"
  },
  {
    "text": "a C++ app that requires real-time thread support and uh over this past week we were kind of",
    "start": "1134080",
    "end": "1140520"
  },
  {
    "text": "joking about uh would that be something we could ever rewrite and go and",
    "start": "1140520",
    "end": "1145799"
  },
  {
    "text": "basically it takes uh mpts streams basically multiplexes multiple MPEG",
    "start": "1145799",
    "end": "1151799"
  },
  {
    "text": "video streams together and to keep the timeline because it's a linear video it requires uh real-time threading so this",
    "start": "1151799",
    "end": "1159480"
  },
  {
    "text": "was actually kind of like a thought experiment and I was thinking to myself like you could in theory use CIS calls",
    "start": "1159480",
    "end": "1164960"
  },
  {
    "text": "to set the thread to real time priority in lock OS thread to keep the go routine",
    "start": "1164960",
    "end": "1172080"
  },
  {
    "text": "running in that thread but I'm wondering what other implications might need to be",
    "start": "1172080",
    "end": "1178360"
  },
  {
    "text": "accounted for inside the runtime in order to kind of get like actual rad",
    "start": "1178360",
    "end": "1183760"
  },
  {
    "text": "priority support uh yeah that's a good question I think it should just work",
    "start": "1183760",
    "end": "1188919"
  },
  {
    "text": "that if you take a go routine yeah lock it to a thread and tell the OS give that thread high priority that should just",
    "start": "1188919",
    "end": "1196440"
  },
  {
    "text": "work you'll get um you know pauses when GC starts and stops but those have been getting quite low recently and I can't",
    "start": "1196440",
    "end": "1203159"
  },
  {
    "text": "think of any other reason why you wouldn't get all the cycle time that the OS is going to give you yeah so that",
    "start": "1203159",
    "end": "1208559"
  },
  {
    "text": "should work you know as long as your program is single threaded once you sort of try to use multiple go routines to do",
    "start": "1208559",
    "end": "1215400"
  },
  {
    "text": "that I'm sort of less confident it would work out of the box yeah this would be multiple this would be multiple threads",
    "start": "1215400",
    "end": "1222120"
  },
  {
    "text": "with different priority because you basically have some threads going out to fetch new segments of of video and audio",
    "start": "1222120",
    "end": "1230799"
  },
  {
    "text": "and then you kind of have your real-time threads that are responsible for keeping your timeline and multiplexing the",
    "start": "1230799",
    "end": "1236600"
  },
  {
    "text": "packets together and dropping them and accounting for Network Jitter and stuff like that so yeah it would definitely be",
    "start": "1236600",
    "end": "1242280"
  },
  {
    "text": "multi-threaded so I might have to whip up like a a silly example of something",
    "start": "1242280",
    "end": "1247880"
  },
  {
    "text": "like that to see whether I could get it to work and whether it falls flat before it wasn't even a consideration because",
    "start": "1247880",
    "end": "1253039"
  },
  {
    "text": "of the the garbage collection time but now it's nice to see that we're kind of in a point where where that's not the",
    "start": "1253039",
    "end": "1259679"
  },
  {
    "text": "most complex part of it right it's really the fact that go routines by Nature aren't really their own threads",
    "start": "1259679",
    "end": "1267000"
  },
  {
    "text": "which is is to most people's advantage but in this case it's it's much harder right yeah there's no goines don't exist",
    "start": "1267000",
    "end": "1273919"
  },
  {
    "text": "as objects to the user so you can't set priorities and things like that on go routines and that's sort of a deliberate",
    "start": "1273919",
    "end": "1279840"
  },
  {
    "text": "design decision that you know they're Anonymous and so you can't do things like wait for goines to die and things",
    "start": "1279840",
    "end": "1286559"
  },
  {
    "text": "like that right it makes the run time a whole lot simpler but yeah it makes things like real time a little bit more",
    "start": "1286559",
    "end": "1292520"
  },
  {
    "text": "difficult but I mean in those use cases I mean I'll take it right like you can use go for almost anything except for a",
    "start": "1292520",
    "end": "1299080"
  },
  {
    "text": "couple of these odd use cases that not many people have to worry about yeah exactly all right so we're going to take",
    "start": "1299080",
    "end": "1305760"
  },
  {
    "text": "a quick sponsor break and then we will jump back on with Keith software teams use back Trace to",
    "start": "1305760",
    "end": "1313159"
  },
  {
    "text": "take the headache and guesswork out of debugging across their environments back Trace jumps into action when you're going go Application fails by capturing",
    "start": "1313159",
    "end": "1319679"
  },
  {
    "text": "detailed application State information including the complete set of go routines channels and their weight",
    "start": "1319679",
    "end": "1325000"
  },
  {
    "text": "durations and my favorite scheduler information back trce analyzes this state and archives it in a centralized",
    "start": "1325000",
    "end": "1331799"
  },
  {
    "text": "Object Store allowing you to explore interesting patterns across your errors and plug Rich error data into your",
    "start": "1331799",
    "end": "1337240"
  },
  {
    "text": "resolution workflows back Trace is used by companies like fastly which is change logs bandwidth partner Limelight",
    "start": "1337240",
    "end": "1343400"
  },
  {
    "text": "Networks message systems app Nexus and more head to back trace. /g go time to",
    "start": "1343400",
    "end": "1349080"
  },
  {
    "text": "learn more and start your free [Music]",
    "start": "1349080",
    "end": "1355520"
  },
  {
    "text": "trial all right we are back car I know you had some questions for Keith yeah I",
    "start": "1355520",
    "end": "1361960"
  },
  {
    "text": "was curious to know if you do any site project when you're not working on",
    "start": "1361960",
    "end": "1367279"
  },
  {
    "text": "compilers or if you do different sort of compiler work when you're don't at work",
    "start": "1367279",
    "end": "1373720"
  },
  {
    "text": "like when I'm home hacking by myself yeah yeah I I sort of hack on random",
    "start": "1373720",
    "end": "1379000"
  },
  {
    "text": "stuff I wrote a pretty good um integer factorization Library which you can grab",
    "start": "1379000",
    "end": "1385080"
  },
  {
    "text": "on my GitHub account uh you know it can Factor 50- digigit integers so I sort of",
    "start": "1385080",
    "end": "1390480"
  },
  {
    "text": "have I'm a math geek and a performance geek so I like to sort of hack on stuff like that very cool go check it out are",
    "start": "1390480",
    "end": "1398400"
  },
  {
    "text": "there other languages that um you work in to say other than see like have you looked at rust at all and what do you",
    "start": "1398400",
    "end": "1404640"
  },
  {
    "text": "think about their philosophies around integrity and without the Run time there yeah I like I like the idea of rust that",
    "start": "1404640",
    "end": "1412000"
  },
  {
    "text": "you know you keep track of exactly what pointers mean and what they're allowed to do and when they disappear and things",
    "start": "1412000",
    "end": "1417320"
  },
  {
    "text": "like that um I'm not a big fan of the fact that there's you know eight different kinds of pointers or whatever",
    "start": "1417320",
    "end": "1422360"
  },
  {
    "text": "the number is nowadays because that adds a lot of cognitive load to the user to figure out which ones he's supposed to use where I haven't actually written",
    "start": "1422360",
    "end": "1429400"
  },
  {
    "text": "anything in Rust so take my comments with a grain of salt maybe it's easier than I think it is but I I like the fact",
    "start": "1429400",
    "end": "1436520"
  },
  {
    "text": "in go you can just sort of everything's natural it's it's you're",
    "start": "1436520",
    "end": "1441600"
  },
  {
    "text": "used to it coming from C or from Java or whatever uh there's nothing sort of fancy new semantics to learn you know",
    "start": "1441600",
    "end": "1448240"
  },
  {
    "text": "one of the questions that seems to come up more and more and I think it's because I'm seeing more programmers that",
    "start": "1448240",
    "end": "1454000"
  },
  {
    "text": "are coming from functional programming languages is um they get like afraid",
    "start": "1454000",
    "end": "1459520"
  },
  {
    "text": "about pointers and and they start asking me what is the advantage of having the pointers over what they're you know not",
    "start": "1459520",
    "end": "1466440"
  },
  {
    "text": "having to deal with them what kind of answers can I give them like do you have any opinions around around that it's",
    "start": "1466440",
    "end": "1473679"
  },
  {
    "text": "fundamentally a question of efficiency uh and to the extent that a",
    "start": "1473679",
    "end": "1478760"
  },
  {
    "text": "compiler can realize that you're doing something functional and can pass pointers around under the hood so you",
    "start": "1478760",
    "end": "1483799"
  },
  {
    "text": "don't have to do big copies you know that's great but if I'm like the SSA thing would totally be impossible to",
    "start": "1483799",
    "end": "1489360"
  },
  {
    "text": "write in a functional language because everything's linked to everything else via pointers and you the side effects",
    "start": "1489360",
    "end": "1495720"
  },
  {
    "text": "matter like if I want to delete an instruction from an instruction stream",
    "start": "1495720",
    "end": "1500799"
  },
  {
    "text": "um I need to sort of update all the people who use that instruction I need to update all the people who um are the",
    "start": "1500799",
    "end": "1507559"
  },
  {
    "text": "arguments of that instruction and so there's a lot of side effect things that have to go on in order to make the",
    "start": "1507559",
    "end": "1512880"
  },
  {
    "text": "compiler work and work efficiently that I don't have to sort of iterate through all the instructions to find a a single",
    "start": "1512880",
    "end": "1518559"
  },
  {
    "text": "use of an instruction for example yeah so I agree that the semantics of functional languages are much easier to",
    "start": "1518559",
    "end": "1525039"
  },
  {
    "text": "understand and make for a nicer programming language in languages at scale it's hard to make functional",
    "start": "1525039",
    "end": "1531159"
  },
  {
    "text": "programs efficient in all cases whereas given a pointer it's much easier to sort",
    "start": "1531159",
    "end": "1536760"
  },
  {
    "text": "of design your thing to make whatever algorithm you're doing efficient all right that's that's cool I'm also",
    "start": "1536760",
    "end": "1543320"
  },
  {
    "text": "curious if you played with Del it alls and what kind of support are you seeing maybe in the future to help help the",
    "start": "1543320",
    "end": "1549720"
  },
  {
    "text": "development of of that tool yeah I love delve uh we are in contact with Derek",
    "start": "1549720",
    "end": "1555520"
  },
  {
    "text": "all the time about you know we're Mak making this change the compiler it's going to change the layout of registers",
    "start": "1555520",
    "end": "1561600"
  },
  {
    "text": "or layout of memory locations does Del still work if would if we do this and so",
    "start": "1561600",
    "end": "1567039"
  },
  {
    "text": "we had a good contact with him and and I love dove it's I use it not all that",
    "start": "1567039",
    "end": "1572320"
  },
  {
    "text": "much when I'm developing go but when I'm doing sort of hobby projects I use Dove all the time that's awesome so you",
    "start": "1572320",
    "end": "1577960"
  },
  {
    "text": "actually collaborate and reach out kind of proactively and and let them know that there's going to be these",
    "start": "1577960",
    "end": "1583760"
  },
  {
    "text": "potentially breaking changes to kind of give him a head start yeah exactly oh that's great yeah we've had go had a",
    "start": "1583760",
    "end": "1590799"
  },
  {
    "text": "very bad story for debuggers for a long time and it was slowly bubbling up our list of you know this is something we",
    "start": "1590799",
    "end": "1596640"
  },
  {
    "text": "have to tackle this is something we have to tackle and then Dereck tackled it for us it was great one of those see a need",
    "start": "1596640",
    "end": "1601799"
  },
  {
    "text": "fill a need ex type of things I was actually really surprised when it came out like I thought kind of to to your",
    "start": "1601799",
    "end": "1608520"
  },
  {
    "text": "point you know I kind of thought that that was a ways down the road as far as the the go team um you know there was",
    "start": "1608520",
    "end": "1613960"
  },
  {
    "text": "still a lot of work to be done on the language and compilers themselves and they recognized that there needed to be",
    "start": "1613960",
    "end": "1619080"
  },
  {
    "text": "a debugger it just wasn't the the priority now and then Derek pretty much came out and was like I got one yeah",
    "start": "1619080",
    "end": "1625279"
  },
  {
    "text": "exactly it's pretty sweet yeah so speaking of kind of cool projects you guys want to get into uh interesting",
    "start": "1625279",
    "end": "1631720"
  },
  {
    "text": "projects and news and we'll just kind of talk about stuff that's going on right now yeah let's do that okay so the",
    "start": "1631720",
    "end": "1638279"
  },
  {
    "text": "biggest of which is the go18 beta which was recently released and for anybody",
    "start": "1638279",
    "end": "1643760"
  },
  {
    "text": "who hasn't tested their code against it they should because it drops in February if I recall uh yeah February 1st or",
    "start": "1643760",
    "end": "1651320"
  },
  {
    "text": "January 31st something like that yeah and uh Brad Fitzpatrick gave everybody a",
    "start": "1651320",
    "end": "1656399"
  },
  {
    "text": "warning that uh he's got time to fix bugs now but uh later not so much so",
    "start": "1656399",
    "end": "1662279"
  },
  {
    "text": "file the bug reports now so is there anything kind of you're you're particularly excited about that in this",
    "start": "1662279",
    "end": "1668760"
  },
  {
    "text": "release well I mean the big thing is the SSA stuff for all the other architectures besides x86 so that's sort",
    "start": "1668760",
    "end": "1674960"
  },
  {
    "text": "of been my focus what else is cool in this release it's a good question I know everybody was raving about the the um",
    "start": "1674960",
    "end": "1681480"
  },
  {
    "text": "you know 10 to 100 microsecond GC pauses right I think it was guaranteed to be",
    "start": "1681480",
    "end": "1686880"
  },
  {
    "text": "under a 100 microseconds but they were seeing 10ish most of the time if I recall what that that was yeah so the",
    "start": "1686880",
    "end": "1693840"
  },
  {
    "text": "pauses we got rid of so there's a bunch of stuff that you have to do when you stop the world so when you do GC you",
    "start": "1693840",
    "end": "1699799"
  },
  {
    "text": "stop the world you sort of set some bits then you have to do some stuff and then you have to start the world up again and",
    "start": "1699799",
    "end": "1705640"
  },
  {
    "text": "the the stuff you need to do we've been shrinking and shrinking and shrinking and now it's down to you know just set",
    "start": "1705640",
    "end": "1711240"
  },
  {
    "text": "some bits in various places and start again you don't even need to scan a single go routine stack before you have",
    "start": "1711240",
    "end": "1717200"
  },
  {
    "text": "to before you can start the world again and so it's getting quite a bit better sub microsc for almost everybody and and",
    "start": "1717200",
    "end": "1722799"
  },
  {
    "text": "it's well saw microsc for lots of people and then I know this release also saw some improvements with the overhead in",
    "start": "1722799",
    "end": "1729840"
  },
  {
    "text": "calling out to seeo right I don't remember what they were I want to say it was like cut in half or something like",
    "start": "1729840",
    "end": "1735880"
  },
  {
    "text": "that which was a big concern for people using SEO was the expense of calling out to C so most of the time the code got",
    "start": "1735880",
    "end": "1743120"
  },
  {
    "text": "written in C and then there were just kind of these logical break points where flow of execution kind of got handed",
    "start": "1743120",
    "end": "1749840"
  },
  {
    "text": "over to see it did its thing and came back rather than kind of more iterative you know tight Loop type calls into C",
    "start": "1749840",
    "end": "1757159"
  },
  {
    "text": "right yeah and a lot of people sort of are stuck with Legacy stuff and c and you got to use it and yeah so I think",
    "start": "1757159",
    "end": "1763840"
  },
  {
    "text": "with the big improvements were in defer we put defer Records On The Stack",
    "start": "1763840",
    "end": "1769159"
  },
  {
    "text": "instead of allocating them from the Heap and that sort of helps a lot when you have to do you basically have to do a defer every time you go into to see uh",
    "start": "1769159",
    "end": "1776080"
  },
  {
    "text": "in case something panics you need it defer there to recover yeah so that's that was I think the big thing but in",
    "start": "1776080",
    "end": "1781840"
  },
  {
    "text": "general it got a lot a lot of love in this release um Ian looked at it quite a bit to get the overheads down as much as",
    "start": "1781840",
    "end": "1789519"
  },
  {
    "text": "we can so and and speaking of which defer itself was improved was that kind",
    "start": "1789519",
    "end": "1794919"
  },
  {
    "text": "of where this was gained the overhead was kind of save there because it leverages defer and then defer itself",
    "start": "1794919",
    "end": "1800720"
  },
  {
    "text": "was was had performance improvements yeah so that was the main reason behind the optimization to defer was for the",
    "start": "1800720",
    "end": "1807120"
  },
  {
    "text": "the C path so we actually have a listener in the go time FM channel Chris",
    "start": "1807120",
    "end": "1812480"
  },
  {
    "text": "hins who's asking a question for you he's asking what the status of inline uh non-leaf functions is is currently you",
    "start": "1812480",
    "end": "1819679"
  },
  {
    "text": "can only inline functions if all the functions they call can also be inlined right yeah so actually we have an intern",
    "start": "1819679",
    "end": "1826320"
  },
  {
    "text": "who's going to be working on that he's started already I believe although I haven't seen a CL from him yet but",
    "start": "1826320",
    "end": "1832279"
  },
  {
    "text": "it's actively being worked on and the the tricky part is getting all the stack stack traces right when you start doing",
    "start": "1832279",
    "end": "1838720"
  },
  {
    "text": "that and so that's what he's working on yeah and that's actually what he's mentioning here he said part of the problem is that we want to preserve",
    "start": "1838720",
    "end": "1844440"
  },
  {
    "text": "stack traces and inline functions will not show up in stack traces right so we're working on it so inline functions",
    "start": "1844440",
    "end": "1850720"
  },
  {
    "text": "will show up in stack traces and so there will no longer be a one toone",
    "start": "1850720",
    "end": "1856240"
  },
  {
    "text": "mapping between the PC you have and the function that",
    "start": "1856240",
    "end": "1861399"
  },
  {
    "text": "you were in because some PCS will be in two or three functions nested and so we have sort of have to record all that",
    "start": "1861399",
    "end": "1867080"
  },
  {
    "text": "information to be able to have runtime callers return that to you in a sensible way cool so um some other stuff uh I saw",
    "start": "1867080",
    "end": "1874480"
  },
  {
    "text": "the race detector detects concurrent map use and I I actually didn't realize that",
    "start": "1874480",
    "end": "1879679"
  },
  {
    "text": "that wasn't detected before right so actually the race detector always detected that however we implemented",
    "start": "1879679",
    "end": "1886279"
  },
  {
    "text": "something additional in six which is that the runtime itself even when the race detector is not being used the",
    "start": "1886279",
    "end": "1892120"
  },
  {
    "text": "runtime itself would detect concurrent map use and give you and panic or not",
    "start": "1892120",
    "end": "1897240"
  },
  {
    "text": "panic it would actually just crash the program but it wasn't complete it",
    "start": "1897240",
    "end": "1902320"
  },
  {
    "text": "handled some cases and not others and we improved that in this release to make sure that we handled as many cases as we",
    "start": "1902320",
    "end": "1907440"
  },
  {
    "text": "could possibly handle so basically it detects if you have a reader and a writer at the same time for a map and it",
    "start": "1907440",
    "end": "1915200"
  },
  {
    "text": "will crash the program because in that situation programs would non-deterministically occasionally crash",
    "start": "1915200",
    "end": "1921159"
  },
  {
    "text": "anyway and then you'd have no idea why they crash because they crash some later time in some unrelated code and it was a",
    "start": "1921159",
    "end": "1927760"
  },
  {
    "text": "very sort of confusing situation to be in whereas now the map detects that you're doing that kind of thing and",
    "start": "1927760",
    "end": "1932880"
  },
  {
    "text": "crashes immediately so you can hopefully find and fix the problem uh before you",
    "start": "1932880",
    "end": "1937919"
  },
  {
    "text": "release some code to production and and I think the other stuff that I saw was around",
    "start": "1937919",
    "end": "1943440"
  },
  {
    "text": "plugins um some stuff for the HTTP server uh some more context stuff",
    "start": "1943440",
    "end": "1949399"
  },
  {
    "text": "plugins seem cool I mean as far as like readability I I think there's some concern there because you have to do",
    "start": "1949399",
    "end": "1956200"
  },
  {
    "text": "some uh type assertion when you when you read from it so it starts to look a little a little",
    "start": "1956200",
    "end": "1963159"
  },
  {
    "text": "crazy but I mean the fact that we have plugins is kind of cool and I'm not really sure how else to do that without",
    "start": "1963159",
    "end": "1969440"
  },
  {
    "text": "doing the the type assertions yeah it's a difficult problem and it you know it",
    "start": "1969440",
    "end": "1974639"
  },
  {
    "text": "RAR all the problems you have with you know Java distribution is that now you have to distribute your plugin somehow",
    "start": "1974639",
    "end": "1980600"
  },
  {
    "text": "along with your binary but for use cases where you need it it's really useful and you can sort of wrap all that typ case",
    "start": "1980600",
    "end": "1987519"
  },
  {
    "text": "stuff into a library on the client side so you don't have to see it you know except for the person who's actually",
    "start": "1987519",
    "end": "1993720"
  },
  {
    "text": "doing the wrapping oh that's interesting yeah just kind of like a wrapper library that does the type assertions right so",
    "start": "1993720",
    "end": "2000080"
  },
  {
    "text": "that's that's sort of how we expect it would be used like you have a plugin for I don't know some photoshop",
    "start": "2000080",
    "end": "2005960"
  },
  {
    "text": "transformation and it takes a image and returns an image or something right and you just have a wrapper on the client",
    "start": "2005960",
    "end": "2012039"
  },
  {
    "text": "side of that library that you know casts the argument to a empty interface to pass it and cast the thing back to an",
    "start": "2012039",
    "end": "2018360"
  },
  {
    "text": "image when you get it returned and that way the client doesn't need to to deal with that the plugins I haven't even",
    "start": "2018360",
    "end": "2024960"
  },
  {
    "text": "looked at it yet are you able to reload plugins at runtime or is it when the app comes up those are the plugins and you'd",
    "start": "2024960",
    "end": "2031720"
  },
  {
    "text": "have to restart um you can load plugins at runtime whenever you want you just call whatever the routine is I don't",
    "start": "2031720",
    "end": "2037840"
  },
  {
    "text": "even remember its name um I don't know about reloading I think once something's loaded you're stuck with it yeah I'm a",
    "start": "2037840",
    "end": "2044120"
  },
  {
    "text": "little concerned that people are going to start abusing well I guess you can abuse anything right but start breaking",
    "start": "2044120",
    "end": "2051040"
  },
  {
    "text": "that out but I the one area I guess always comes up with the static binary",
    "start": "2051040",
    "end": "2057079"
  },
  {
    "text": "as opposed to to having this is security right like oh my God we just found a security flaw and we want to we want to",
    "start": "2057079",
    "end": "2063480"
  },
  {
    "text": "fix that and now I got to rebuild every binary I have to do that as opposed to just deploying maybe the new plug-in and",
    "start": "2063480",
    "end": "2071118"
  },
  {
    "text": "these are the this is like the classic argument I'm constantly hearing about maybe the negative side of go always",
    "start": "2071119",
    "end": "2077760"
  },
  {
    "text": "just building that single binary for deployment yeah it's tough for distributions like yuntu or whatever",
    "start": "2077760",
    "end": "2085118"
  },
  {
    "text": "they really want to have shared librar so that when there's a bug in the crypto Library they can just push the crypto",
    "start": "2085119",
    "end": "2090599"
  },
  {
    "text": "library and not every binary every go binary in the world that uses crypto",
    "start": "2090599",
    "end": "2095960"
  },
  {
    "text": "yeah so I I certainly understand the argument so I think it's about time for our second sponsor break and then we can",
    "start": "2095960",
    "end": "2102800"
  },
  {
    "text": "kind of get into some other cool stuff that's going on and interesting projects we've we've run across this past",
    "start": "2102800",
    "end": "2109920"
  },
  {
    "text": "week when it comes to profiling and monitoring the performance of your go applications stack impact is a great",
    "start": "2110200",
    "end": "2115920"
  },
  {
    "text": "service to help you and your team laser focus on Hotspot profiling bottleneck tracing Health monitoring and more stack",
    "start": "2115920",
    "end": "2122160"
  },
  {
    "text": "impact gives you the necessary historical Deep dive performance visibility into your go application",
    "start": "2122160",
    "end": "2127240"
  },
  {
    "text": "execution so you can discover and resolve performance bottlenecks with line of code Precision technically stack",
    "start": "2127240",
    "end": "2132800"
  },
  {
    "text": "impact makes Go's built-in profil and capabilities usable in a production environment stack impact does everything",
    "start": "2132800",
    "end": "2139040"
  },
  {
    "text": "automatically there's no need to run commands or waste time specifying what to monitor they've even put their go agent on GitHub under the BSD license so",
    "start": "2139040",
    "end": "2146520"
  },
  {
    "text": "if you need to focus on the performance of your go applications check out stack impact head over to stack impact.com",
    "start": "2146520",
    "end": "2152760"
  },
  {
    "text": "gotime to learn more and tell them Brian from go time sent you",
    "start": "2152760",
    "end": "2158799"
  },
  {
    "text": "[Music] all right so carisia want to talk to us about some stuff you've seen yeah I",
    "start": "2158990",
    "end": "2165880"
  },
  {
    "text": "wanted to mention that goam Go videos started to pop up on YouTube there are three now uh Bros Cox Cassandra Salsbury",
    "start": "2165880",
    "end": "2175440"
  },
  {
    "text": "and aditia mury and hopefully the rest will be",
    "start": "2175440",
    "end": "2181160"
  },
  {
    "text": "coming soon that one um what was that was like reimplementing get and go or",
    "start": "2181160",
    "end": "2186359"
  },
  {
    "text": "something that I haven't watched it yet but I saw I saw it listed yeah were you at goso Keith no I wasn't I was there um",
    "start": "2186359",
    "end": "2195520"
  },
  {
    "text": "yeah they built an entire basically packaging go to we so you wouldn't have to use the sea libraries anymore it",
    "start": "2195520",
    "end": "2202079"
  },
  {
    "text": "looks really interesting what were the other two caria you said the other two was uh dissection of go first by",
    "start": "2202079",
    "end": "2209800"
  },
  {
    "text": "Cassandra Salsbury and codebase refactoring with Russ Cox and the cloning GS one one was",
    "start": "2209800",
    "end": "2217280"
  },
  {
    "text": "the one by adtia muker maybe I pronounced his name correctly uh we also started having the",
    "start": "2217280",
    "end": "2224720"
  },
  {
    "text": "Advent series uh the blog post series on the goer Academy blog those are really",
    "start": "2224720",
    "end": "2231079"
  },
  {
    "text": "cool we have one that's about timers and a really good one about contributing to",
    "start": "2231079",
    "end": "2238480"
  },
  {
    "text": "the to go and that got the blessing from Brad",
    "start": "2238480",
    "end": "2244720"
  },
  {
    "text": "um and there bunch of really good ones it's a long list and every day so for",
    "start": "2244720",
    "end": "2251440"
  },
  {
    "text": "people who don't know every December goer Academy does this and every day a new blog post will go out and anybody",
    "start": "2251440",
    "end": "2258720"
  },
  {
    "text": "actually can subscribe can uh can volunteer to submit a post so next year people stay tuned and just uh pop in and",
    "start": "2258720",
    "end": "2266119"
  },
  {
    "text": "ask around where you can put your name down for a post there might be space left too um Damien grisy is is kind of",
    "start": "2266119",
    "end": "2273839"
  },
  {
    "text": "maintaining the the list of uh who's on what day there may actually still be openings yet this year that is a good",
    "start": "2273839",
    "end": "2281040"
  },
  {
    "text": "point I know for sure there are openings for for backups oh yes yes yeah and um",
    "start": "2281040",
    "end": "2287400"
  },
  {
    "text": "there was a talk at gophercon this year to Michael Mato I think it was that did a talk about contributing too which was",
    "start": "2287400",
    "end": "2293079"
  },
  {
    "text": "really awesome that is true contributing to go you mean yes so speaking of which",
    "start": "2293079",
    "end": "2298760"
  },
  {
    "text": "do you do you get a lot of contributions for the compiler itself Keith or is it mostly people contributing to the",
    "start": "2298760",
    "end": "2305319"
  },
  {
    "text": "standard Library um we get a lot of people contributing to the compiler certainly it's sort of one of the most",
    "start": "2305319",
    "end": "2310960"
  },
  {
    "text": "active portions of the development that's currently happening at on go at",
    "start": "2310960",
    "end": "2316240"
  },
  {
    "text": "least in you know the standard library and the runtime and so on uh we get a lot of outside contributions which is",
    "start": "2316240",
    "end": "2321480"
  },
  {
    "text": "kind of nice because you know we only have so many people inside of Google who have time to work on this stuff and to",
    "start": "2321480",
    "end": "2326720"
  },
  {
    "text": "the extent that we can get outside contributions it's great we had a lot of help from uh Josh Snider and and various",
    "start": "2326720",
    "end": "2332160"
  },
  {
    "text": "other folks early on in SSA development which really sort of kept us on track and kept us us uh on schedule otherwise",
    "start": "2332160",
    "end": "2338599"
  },
  {
    "text": "you know I only work halftime so you know we only had one and a half people working on it inside of Google oh so you",
    "start": "2338599",
    "end": "2344400"
  },
  {
    "text": "were the only one for most most of it working on the compiler uh myself and and David Chase worked on it in the",
    "start": "2344400",
    "end": "2351119"
  },
  {
    "text": "early days from inside of Google and then there were a bunch of people from outside who worked on it as well so",
    "start": "2351119",
    "end": "2356160"
  },
  {
    "text": "here's a question for somebody who who may have minimal or no compiler knowledge how approachable is it for",
    "start": "2356160",
    "end": "2363040"
  },
  {
    "text": "somebody to jump in and start trying to learn and contribute to the compiler is",
    "start": "2363040",
    "end": "2368599"
  },
  {
    "text": "something really you kind of need a lot of knowledge about before or is it fairly approachable for people to kind",
    "start": "2368599",
    "end": "2373800"
  },
  {
    "text": "of get in and fix bugs it it needs some domain expertise it's not the easiest thing to jump in and touch we made",
    "start": "2373800",
    "end": "2380760"
  },
  {
    "text": "porting as easy as possible so you don't actually need to write any go code to Port the compiler to a new architecture",
    "start": "2380760",
    "end": "2387839"
  },
  {
    "text": "or at least it's all tables and stuff it's not stuff that executes all the time but if you wanted to add say a new",
    "start": "2387839",
    "end": "2394480"
  },
  {
    "text": "compiler optimization phase or something um it requires a fair amount of knowledge of you know what SSA is what",
    "start": "2394480",
    "end": "2400680"
  },
  {
    "text": "Transformations you could do on it what you can't um so it's not the easiest thing to jump in and do but the the",
    "start": "2400680",
    "end": "2406800"
  },
  {
    "text": "people who jumped in and worked on stuff on the compiler I think they all had some compiler knowledge but they were by",
    "start": "2406800",
    "end": "2412119"
  },
  {
    "text": "no means experts so I would say it's sort of a middle- of the road thing if you want to jump in and you should probably have taken compiler 101 in",
    "start": "2412119",
    "end": "2419200"
  },
  {
    "text": "college but you probably don't need anything higher than that do you have like a recommended book or something",
    "start": "2419200",
    "end": "2425720"
  },
  {
    "text": "that somebody interested not necessarily like designing your own compiler but just for anybody who might want a better",
    "start": "2425720",
    "end": "2431560"
  },
  {
    "text": "understanding of how compilers work uh well there's always the Dragon book which is I forget who wrote it but it's",
    "start": "2431560",
    "end": "2438560"
  },
  {
    "text": "a standard compiler book my adviser Charles lerson has a great book on graph algorithms which a compiler is basically",
    "start": "2438560",
    "end": "2445400"
  },
  {
    "text": "a big bag of graph algorithms it's all depth first first traversal breadth first search diversal um connected",
    "start": "2445400",
    "end": "2453040"
  },
  {
    "text": "components all that kind of stuff so yeah any good algorithms book would also be a good starting point excellent so",
    "start": "2453040",
    "end": "2459720"
  },
  {
    "text": "caria what else do we have we have oh by the way I wanted to give a shout out to Damian gki because he's been running the",
    "start": "2459720",
    "end": "2468119"
  },
  {
    "text": "December series of block post for goer Academy and he's doing a great job and it's so much work he has to get after",
    "start": "2468119",
    "end": "2476000"
  },
  {
    "text": "people who promised to deliver a post and and don't show up on time I don't",
    "start": "2476000",
    "end": "2481400"
  },
  {
    "text": "know how would I know that but it's a lot of work and if it wasn't for him",
    "start": "2481400",
    "end": "2487040"
  },
  {
    "text": "maybe we wouldn't have it and those are really excellent posts and also he is on",
    "start": "2487040",
    "end": "2492560"
  },
  {
    "text": "and he said that there are no openings right now but there are Backup backup openings and whoever submits a backup",
    "start": "2492560",
    "end": "2499680"
  },
  {
    "text": "and doesn't get published as backup in December it will get published in January for sure so please ping him or",
    "start": "2499680",
    "end": "2506240"
  },
  {
    "text": "or us and we'll direct you if you're interested for this is this December other things there is go laab conference",
    "start": "2506240",
    "end": "2513880"
  },
  {
    "text": "in Italy somewhere near Florence i' love to go but I can't so if you can",
    "start": "2513880",
    "end": "2520319"
  },
  {
    "text": "go it's January 20 and 21st there's still time to book it what else I ran",
    "start": "2520319",
    "end": "2526920"
  },
  {
    "text": "into this because I was doing some research this week another thing that I wanted to mention is Dominic H hona",
    "start": "2526920",
    "end": "2533640"
  },
  {
    "text": "don't know if that's how his last name is pronounced he has a blog post listing all the not all the tools but at least",
    "start": "2533640",
    "end": "2540800"
  },
  {
    "text": "most of the tools in the goto chain and it's very neat uh also explains and give",
    "start": "2540800",
    "end": "2548079"
  },
  {
    "text": "give examples of how to use some of the tools some of the most uh maybe complex or not as popular that was really cool",
    "start": "2548079",
    "end": "2556079"
  },
  {
    "text": "to run into oh cool yeah it looks like it shows not just the things that are part of like the go tool itself but also",
    "start": "2556079",
    "end": "2563280"
  },
  {
    "text": "you know some of the other tools that have kind of come out around it like bench compare and then the the bench V",
    "start": "2563280",
    "end": "2570280"
  },
  {
    "text": "visualization where it creates the kind of SVG output of the uh comparing to",
    "start": "2570280",
    "end": "2577319"
  },
  {
    "text": "benchmarks and things like that that's cool yeah and the last thing on the list",
    "start": "2577319",
    "end": "2582520"
  },
  {
    "text": "here is that there is a proposal for the",
    "start": "2582520",
    "end": "2587760"
  },
  {
    "text": "top mod on the goink Reddit to be Damian grisy and I personally think it's is",
    "start": "2587760",
    "end": "2595480"
  },
  {
    "text": "great so basically what's happening is there so there is the goink channel",
    "start": "2595480",
    "end": "2601359"
  },
  {
    "text": "which hasn't been very well moderated by everybody's account",
    "start": "2601359",
    "end": "2606720"
  },
  {
    "text": "and because of the Google presence there people started thinking it was an official channel from the goang team and",
    "start": "2606720",
    "end": "2613960"
  },
  {
    "text": "it never was meant to be so now people are saying well let's just whoever is",
    "start": "2613960",
    "end": "2620480"
  },
  {
    "text": "the current mods uh that person will step out and choose somebody new who can really moderate and choose new",
    "start": "2620480",
    "end": "2626480"
  },
  {
    "text": "moderators and the proposal I think uh who was the person who did the proposal",
    "start": "2626480",
    "end": "2632640"
  },
  {
    "text": "was it R I think it was Russ yeah Russ yes uh he's proposing that Daman grisy is",
    "start": "2632640",
    "end": "2639119"
  },
  {
    "text": "the person so if you have an opinion hop on there and speak up because that's",
    "start": "2639119",
    "end": "2644599"
  },
  {
    "text": "probably going to change very quickly is there a way to vote or is it just you know unless there's no down votes like",
    "start": "2644599",
    "end": "2651599"
  },
  {
    "text": "how's how's that work yeah I don't think anybody has um downvoted that at all so",
    "start": "2651599",
    "end": "2656839"
  },
  {
    "text": "I'm sure it's just going to happen and it should it should quickly yeah and",
    "start": "2656839",
    "end": "2661920"
  },
  {
    "text": "it's going to be better for the community to have a real and consistent the moderation up there yeah I walked",
    "start": "2661920",
    "end": "2668359"
  },
  {
    "text": "away earlier this year I walked away from Reddit it was such poison to me that I didn't even if I've looked at it",
    "start": "2668359",
    "end": "2674760"
  },
  {
    "text": "even five times this year it that's a lot so knowing Daman is going to be um",
    "start": "2674760",
    "end": "2679880"
  },
  {
    "text": "the top moderator I I'll definitely come back and and start looking at it again",
    "start": "2679880",
    "end": "2685640"
  },
  {
    "text": "yeah it's it's good because Reddit is actually very good there are some interesting post I mean the post there",
    "start": "2685640",
    "end": "2691839"
  },
  {
    "text": "Popp in there we see them every everywhere but there are some interesting discussion so every once in a while it just it runs",
    "start": "2691839",
    "end": "2698480"
  },
  {
    "text": "a mark but it's Prett good otherwise so Keith how do you keep up with kind of",
    "start": "2698480",
    "end": "2703520"
  },
  {
    "text": "like what what's going on in the community do are you mostly heads down or or do you kind of watch for projects",
    "start": "2703520",
    "end": "2709240"
  },
  {
    "text": "that are kind of coming out that interest you I basically read go nuts and that's about as much Community",
    "start": "2709240",
    "end": "2715160"
  },
  {
    "text": "involvement as I can take um but yeah I I sort of watch the",
    "start": "2715160",
    "end": "2721040"
  },
  {
    "text": "project closely and I watch go nuts and that's sort of where I get my information about what's going on in the Community from I think I I'm like in too",
    "start": "2721040",
    "end": "2728599"
  },
  {
    "text": "many of them and then I end up not keeping up with any of them but it works out because I think everybody else",
    "start": "2728599",
    "end": "2734200"
  },
  {
    "text": "curates it so I only I only hear about the good stuff Keith what office do you work out of where are you based out of",
    "start": "2734200",
    "end": "2741520"
  },
  {
    "text": "I'm in Mountain View at the main Google campus gotcha yeah it seems like there's a couple different places I know I I",
    "start": "2741520",
    "end": "2748480"
  },
  {
    "text": "heard I think that the New York office actually has more people working on the go team than Mountain View de",
    "start": "2748480",
    "end": "2756720"
  },
  {
    "text": "that may be true now yeah it's it's about equal I think we have what 12 or 13 people here and there's a similar",
    "start": "2756720",
    "end": "2763599"
  },
  {
    "text": "number in New York and then a couple people in Boston and Brad's in Seattle now right yeah Brad's in Seattle and we",
    "start": "2763599",
    "end": "2770920"
  },
  {
    "text": "have one guy in Switzerland and one guy in Pittsburgh there's a couple other scattered people and these are these are",
    "start": "2770920",
    "end": "2777119"
  },
  {
    "text": "the people who are actually Google employees that are you know full-time That's not including all the people who",
    "start": "2777119",
    "end": "2782559"
  },
  {
    "text": "work for other companies who are basically being paid to work on go exactly yeah that's only the Google",
    "start": "2782559",
    "end": "2789079"
  },
  {
    "text": "employees I love that that that's a thing now too right that like you can",
    "start": "2789079",
    "end": "2794160"
  },
  {
    "text": "work for a company that basically just sponsors you to work on a project that means something to them right yeah and",
    "start": "2794160",
    "end": "2800599"
  },
  {
    "text": "that's open source that you know it's not something that they're sort of directly competitive Advantage thing",
    "start": "2800599",
    "end": "2806119"
  },
  {
    "text": "with they just they want to make the ecosystem better and that's great yeah we're seeing it a lot with kubernetes",
    "start": "2806119",
    "end": "2811240"
  },
  {
    "text": "now too there's a lot of big companies that just basically have engineer years on their staff that are full-time",
    "start": "2811240",
    "end": "2817440"
  },
  {
    "text": "working on kubernetes and being paid by you know Intel or red hat or you know various other uh companies that are",
    "start": "2817440",
    "end": "2824960"
  },
  {
    "text": "contributing back Eric you got paid basically to fix a bug in kubernetes 2o",
    "start": "2824960",
    "end": "2830359"
  },
  {
    "text": "right because Comcast needed it so and Docker yeah oh in Docker in doer and Docker so I wouldn't necessarily call it",
    "start": "2830359",
    "end": "2836640"
  },
  {
    "text": "a bug um just kind of a point as similar",
    "start": "2836640",
    "end": "2841880"
  },
  {
    "text": "um so Keith that basically the realtime thread support we kind of had an issue with running a real-time priority",
    "start": "2841880",
    "end": "2848800"
  },
  {
    "text": "process in Docker and that was really just kind of um the way group scheduling works basically Docker creates a new",
    "start": "2848800",
    "end": "2855119"
  },
  {
    "text": "cgroup cgroup gets zero real-time runtime process inside container cannot",
    "start": "2855119",
    "end": "2861000"
  },
  {
    "text": "upgrade its priority so basically it was just kind of patching Docker to allow",
    "start": "2861000",
    "end": "2866200"
  },
  {
    "text": "people to supply a real-time runtime at container creation right but yeah kind of to Bill's point you know it's it's",
    "start": "2866200",
    "end": "2872800"
  },
  {
    "text": "kind of cool that they're like you know why don't you fix it like well that works yeah exactly it's",
    "start": "2872800",
    "end": "2878480"
  },
  {
    "text": "the great thing about open source stuff is that the things that people care about they can fix themselves that they don't have to wait for someone on high",
    "start": "2878480",
    "end": "2884200"
  },
  {
    "text": "to fix it for them yeah I I prefer PRS over over bug reports too and like I try",
    "start": "2884200",
    "end": "2891599"
  },
  {
    "text": "to encourage that too because I think people should all try to approach the solution because sometimes a solution is",
    "start": "2891599",
    "end": "2897160"
  },
  {
    "text": "better than no solution so you know a lot of people will refrain from contributing and this kind of goes back",
    "start": "2897160",
    "end": "2903319"
  },
  {
    "text": "to you know the posts uh Michael's talk and the post on the Advent series you",
    "start": "2903319",
    "end": "2908599"
  },
  {
    "text": "know with the contributing a lot of people won't contribute out of fear that it's not a good enough solution to be",
    "start": "2908599",
    "end": "2913880"
  },
  {
    "text": "taken in by some bigname project and they won't contribute at all and then",
    "start": "2913880",
    "end": "2919599"
  },
  {
    "text": "these types of things will just kind of linger forever because it's not a huge priority to the people actually working",
    "start": "2919599",
    "end": "2925680"
  },
  {
    "text": "on that but it may be a big priority to you and sometimes a good enough solution",
    "start": "2925680",
    "end": "2931040"
  },
  {
    "text": "is good enough to be brought in just to solve the problem for people and it can be refactored later into something that",
    "start": "2931040",
    "end": "2937760"
  },
  {
    "text": "you know is uh more performant or things like that I'm sure there's specific",
    "start": "2937760",
    "end": "2942799"
  },
  {
    "text": "language features that nobody's going to you know pull in some some gnarly code for but you know for most people's bug",
    "start": "2942799",
    "end": "2949079"
  },
  {
    "text": "fixes they're they're usually fairly trivial and they're not going to introduce a lot of problems for the rest",
    "start": "2949079",
    "end": "2954680"
  },
  {
    "text": "of the code base yeah and even if they're not perfect patches and you know they have problems or whatever they",
    "start": "2954680",
    "end": "2959760"
  },
  {
    "text": "often sort of spur dialogue or spur someone to think harder about the problem and and end up you know pointing",
    "start": "2959760",
    "end": "2965200"
  },
  {
    "text": "the way to a solution if not being in the solution themselves did anybody have any other interesting news or projects",
    "start": "2965200",
    "end": "2971680"
  },
  {
    "text": "they want to talk about or do we want to move into free software Friday I don't I've been traveling a lot this week so",
    "start": "2971680",
    "end": "2977680"
  },
  {
    "text": "I've been kind of mostly detached how about you Bill I um on my Twitter feed I",
    "start": "2977680",
    "end": "2983640"
  },
  {
    "text": "think Daniel whack who gave that talk on data science at goer con he at least two",
    "start": "2983640",
    "end": "2990200"
  },
  {
    "text": "or three packages a week around data science that he's kind of publishing I",
    "start": "2990200",
    "end": "2995599"
  },
  {
    "text": "mean gonum is the big one right now that repo get up.com num's got a ton of stuff",
    "start": "2995599",
    "end": "3001720"
  },
  {
    "text": "in it but Daniel is week shared another repo called go Dash",
    "start": "3001720",
    "end": "3007040"
  },
  {
    "text": "he which is high energy physics Community stuff like it's amazing to see",
    "start": "3007040",
    "end": "3013079"
  },
  {
    "text": "the communities that are coming in that I guess were kind of exclusively python at some point now going full throttle",
    "start": "3013079",
    "end": "3020880"
  },
  {
    "text": "and to go so that's really exciting so allow me to correct to be just a little",
    "start": "3020880",
    "end": "3025920"
  },
  {
    "text": "bit it's not a repo is a whole organization it's got a bunch of projects right very interesting yeah",
    "start": "3025920",
    "end": "3032680"
  },
  {
    "text": "that's what I meant thank you that is a whole industry I know nothing about",
    "start": "3032680",
    "end": "3037799"
  },
  {
    "text": "physics but yeah that's so awesome to see all of this stuff come in you know there's a lot more data science stuff",
    "start": "3037799",
    "end": "3044280"
  },
  {
    "text": "there's a lot more uh math stuff being done and go and that's awesome and infos",
    "start": "3044280",
    "end": "3049720"
  },
  {
    "text": "seex stuff too I've been seeing a lot more of that too start being written and go another thing that was interesting is",
    "start": "3049720",
    "end": "3055960"
  },
  {
    "text": "um my business partner um Ed Gonzalez he got stuck this week on the floating",
    "start": "3055960",
    "end": "3061559"
  },
  {
    "text": "Point stuff trying to compare two floating points that were should have been identical but were different",
    "start": "3061559",
    "end": "3066799"
  },
  {
    "text": "because of binary decimals and he found a p a package from shopspring called",
    "start": "3066799",
    "end": "3072040"
  },
  {
    "text": "decimal which he's starting to look at to help fix all the floating Point decimal numbers and go for the for the",
    "start": "3072040",
    "end": "3077760"
  },
  {
    "text": "work he's doing so that was really interesting too oh interesting and then how about you caria I ran into",
    "start": "3077760",
    "end": "3086119"
  },
  {
    "text": "a project I have not used it before but it looks really cool and I saw it on it",
    "start": "3086119",
    "end": "3094000"
  },
  {
    "text": "was here on this document but it was also on this newslet this braidan newsletter about go called that the week",
    "start": "3094000",
    "end": "3100280"
  },
  {
    "text": "in go and it is the Jon incremental",
    "start": "3100280",
    "end": "3105680"
  },
  {
    "text": "Digger it's called jid and basically you you install it with with Homebrew and",
    "start": "3105680",
    "end": "3112880"
  },
  {
    "text": "you you can parse a Jon file you can navigate a Json file on the command line",
    "start": "3112880",
    "end": "3119680"
  },
  {
    "text": "so you can say for example node zero and you get just that one node",
    "start": "3119680",
    "end": "3126559"
  },
  {
    "text": "and there a bunch of things you can do I thought it was really interesting yeah it's really cool because like have you",
    "start": "3126559",
    "end": "3131880"
  },
  {
    "text": "seen this Keith you you basically can give it Jason and then you can kind of use you know JavaScript notation to kind",
    "start": "3131880",
    "end": "3138480"
  },
  {
    "text": "of Traverse and dig down into the Json file so you can kind of and it has like",
    "start": "3138480",
    "end": "3143559"
  },
  {
    "text": "auto complete of the the properties too oh interesting I I haven't seen yeah I",
    "start": "3143559",
    "end": "3149680"
  },
  {
    "text": "dropped the link in the um slack Channel too for anybody who's in there it's it's super cool to be able to do that yeah",
    "start": "3149680",
    "end": "3156960"
  },
  {
    "text": "especially when your Json gets large it's really hard to they tend to format as giant blobs that are hard to parse",
    "start": "3156960",
    "end": "3164440"
  },
  {
    "text": "because they're all nested and so on it'd be nice to yeah to have a way to sort of see the parts just the parts you care about yeah that's exactly what I",
    "start": "3164440",
    "end": "3171119"
  },
  {
    "text": "thought if you have a very long Jon you can start up like count give me the count and for whatever place in the tree",
    "start": "3171119",
    "end": "3177720"
  },
  {
    "text": "you're at and just get an idea of how many items there are yeah and I mean like some of the Jason gets like really",
    "start": "3177720",
    "end": "3184440"
  },
  {
    "text": "repetitive and then like you're trying to write these crazy Regular Expressions just so you can find the thing that you",
    "start": "3184440",
    "end": "3190000"
  },
  {
    "text": "need and this giant Jason output so did you have a project you wanted to to give",
    "start": "3190000",
    "end": "3195760"
  },
  {
    "text": "a shout out to Keith uh yeah we already talked about it actually uh delve it's my favorite debugger now I use it all",
    "start": "3195760",
    "end": "3201880"
  },
  {
    "text": "the time on my personal projects it's it's hard to use when I'm developing the compiler because often it crashes before",
    "start": "3201880",
    "end": "3208720"
  },
  {
    "text": "like you've got something that you can put into a debugger um but I use it all the time on uh on third party stuff yeah",
    "start": "3208720",
    "end": "3215839"
  },
  {
    "text": "it's great it's it's better than GDB is for C which is not great praise but you",
    "start": "3215839",
    "end": "3221440"
  },
  {
    "text": "know that's that's all I care about people have been using GDB for c for for ages now so i' consider that",
    "start": "3221440",
    "end": "3231119"
  },
  {
    "text": "praise I'm just saying I'm just saying that it's it's a low bar to be better than GDB is for",
    "start": "3231119",
    "end": "3237799"
  },
  {
    "text": "see so I've I've spent a lot of time this uh past week in meetings and on",
    "start": "3237799",
    "end": "3242880"
  },
  {
    "text": "planes and stuff so I haven't been writing a lot of code standard Linux stuff but last weekend um I'm kind of",
    "start": "3242880",
    "end": "3248839"
  },
  {
    "text": "working on like a home meat probe thing for my smoker because the wireless ones",
    "start": "3248839",
    "end": "3254000"
  },
  {
    "text": "I have stink so I'm G to give a shout out to like the whole kind of like Arduino and maker Community because it's",
    "start": "3254000",
    "end": "3260920"
  },
  {
    "text": "just ridiculously easy to just go on to some of these sites like ad fruit or Ada",
    "start": "3260920",
    "end": "3266280"
  },
  {
    "text": "of fruit or spark fun and order parts and somebody else has already written like drivers for sensors and things like",
    "start": "3266280",
    "end": "3274280"
  },
  {
    "text": "that and I don't have to write any of them I was able to kind of whip together something and in like just a few hours rather than having to spend a ton of",
    "start": "3274280",
    "end": "3281240"
  },
  {
    "text": "time writing you know i2c protocols and stuff like that or I squared C these are",
    "start": "3281240",
    "end": "3286520"
  },
  {
    "text": "this naming is hard every time I think I know how people pronounce stuff I'm totally wrong like forever I thought it",
    "start": "3286520",
    "end": "3292440"
  },
  {
    "text": "was i2c and then it turns out it's actually I squar I always called it i2c see and then like",
    "start": "3292440",
    "end": "3299720"
  },
  {
    "text": "in uh Rob Pike it like commonly throws off like goose and gorch like it's like",
    "start": "3299720",
    "end": "3307200"
  },
  {
    "text": "every year I hear him do a talk or something and there's like a new way to pronounce something I was like huh I",
    "start": "3307200",
    "end": "3312480"
  },
  {
    "text": "didn't know that's how you were supposed to pronounce it and now that you mentioned that I feel compelled to",
    "start": "3312480",
    "end": "3317920"
  },
  {
    "text": "mention that this week Brian Kon uh dropped a blog post on the December series of the Gopher Academy post Po and",
    "start": "3317920",
    "end": "3326160"
  },
  {
    "text": "it talks about the barbecue thingy that you guys did yeah so um initially um",
    "start": "3326160",
    "end": "3332760"
  },
  {
    "text": "this that's running on a Raspberry Pi so they're kind of two separate parts that are going to be merged so that's",
    "start": "3332760",
    "end": "3338760"
  },
  {
    "text": "actually go running on a Raspberry Pi that's the PID controller and I always forget the actual acronym it's like",
    "start": "3338760",
    "end": "3346440"
  },
  {
    "text": "proportional integral derivation or something and it basically takes a set a",
    "start": "3346440",
    "end": "3351920"
  },
  {
    "text": "set temperature and the current temperature and calculates an eror value and determines whether or not the blower",
    "start": "3351920",
    "end": "3357319"
  },
  {
    "text": "needs to turn on to provide oxygen to the fire to make it heat up and it's to keep a stable temp in the Firebox of the",
    "start": "3357319",
    "end": "3365680"
  },
  {
    "text": "smoker um for long cooks and that's all done in go and I'm currently working on",
    "start": "3365680",
    "end": "3371319"
  },
  {
    "text": "the meat probe side of things and then we're going to try to merge the two into like the ultimate go and see and custom",
    "start": "3371319",
    "end": "3379520"
  },
  {
    "text": "Hardware little uh Grill device so that we can plot out on Prometheus and all",
    "start": "3379520",
    "end": "3387440"
  },
  {
    "text": "this stuff you know temperatures and the grill and things like that who knows what we're going to do with the data but",
    "start": "3387440",
    "end": "3393079"
  },
  {
    "text": "it'll serve our purpose and it'll do better than the stuff we bought so and that's provided time that's the",
    "start": "3393079",
    "end": "3399400"
  },
  {
    "text": "hardest thing is having time for these little side projects so did anybody else have anything they want to talk about or",
    "start": "3399400",
    "end": "3404640"
  },
  {
    "text": "do we want to wrap this thing up yeah I think we're ready to wrap it up yep all",
    "start": "3404640",
    "end": "3409839"
  },
  {
    "text": "right so I want to thank everybody uh on the show especially thank you to keth",
    "start": "3409839",
    "end": "3415160"
  },
  {
    "text": "for taking time to come speak with us and huge thank you for all the work that you do on the compiler for the language",
    "start": "3415160",
    "end": "3421240"
  },
  {
    "text": "we love huge shout out to our sponsors uh for this episode who are stack impact",
    "start": "3421240",
    "end": "3427440"
  },
  {
    "text": "and back Trace without them we wouldn't be able to do the show huge shout out to all the listeners both listening live",
    "start": "3427440",
    "end": "3433400"
  },
  {
    "text": "and who will listen to the recorded version of this uh definitely share the show with fellow go programmers um you",
    "start": "3433400",
    "end": "3439799"
  },
  {
    "text": "can subscribe we're going to go time. FM we're also at gotime FM on Twitter",
    "start": "3439799",
    "end": "3445559"
  },
  {
    "text": "if you want to be on the show or have questions for upcoming guests uh hit us up on github.com",
    "start": "3445559",
    "end": "3452319"
  },
  {
    "text": "fm/ King and I think that's it I always I",
    "start": "3452319",
    "end": "3458000"
  },
  {
    "text": "always feel like I'm forgetting something because there's always so much to go through so uh uh with that uh next",
    "start": "3458000",
    "end": "3463760"
  },
  {
    "text": "episode we'll be with uh thoron ball who's we're going to be talking about building an interpreter and go which is",
    "start": "3463760",
    "end": "3469760"
  },
  {
    "text": "highly related to this and then we're going to do basically a twoe break uh over the holiday and we will be back uh",
    "start": "3469760",
    "end": "3476319"
  },
  {
    "text": "in January so with that goodbye everybody bye bye and thank you",
    "start": "3476319",
    "end": "3482600"
  },
  {
    "text": "[Music]",
    "start": "3482600",
    "end": "3503720"
  },
  {
    "text": "bye",
    "start": "3503720",
    "end": "3506720"
  }
]