[
  {
    "text": "as someone who has written a library to do a bunch of FP things not only did it",
    "start": "120",
    "end": "5440"
  },
  {
    "text": "make the implementation easier in the form of less code and more guarantees at compile time about types it extends",
    "start": "5440",
    "end": "13719"
  },
  {
    "text": "those guarantees to the caller so I no longer have to take in an interface or a",
    "start": "13719",
    "end": "19880"
  },
  {
    "text": "list of any types and return a list of any types from map and since now I can",
    "start": "19880",
    "end": "25199"
  },
  {
    "text": "return the type parameter T and then a new type parameter for the return type Tye of the list well now those",
    "start": "25199",
    "end": "32599"
  },
  {
    "text": "guarantees are extended to the user of the library and now they can also say oh",
    "start": "32600",
    "end": "38840"
  },
  {
    "text": "well my program compiles therefore my types are right too so this is like a domino effect of benefits that if a user",
    "start": "38840",
    "end": "47440"
  },
  {
    "text": "is using someone's FP library or even rolled their own now they know that well",
    "start": "47440",
    "end": "53239"
  },
  {
    "text": "my types are [Music] right this episode is is brought to you",
    "start": "53239",
    "end": "60640"
  },
  {
    "text": "by Source graph Source graph is universal code search that let you move fast even in big code bases here's CTO",
    "start": "60640",
    "end": "67560"
  },
  {
    "text": "and co-founder bang luu explaining how Source graph helps you to get into that ideal state of flow and coding the ideal",
    "start": "67560",
    "end": "74560"
  },
  {
    "text": "state of software development is really being in that state of flow it's that state where all the relevant context and",
    "start": "74560",
    "end": "81520"
  },
  {
    "text": "information that you need to build whatever feature or bug that you're focused on uh building or fixing at the",
    "start": "81520",
    "end": "87439"
  },
  {
    "text": "moment that's all readily available now the question is is how do you get into that state where you know you don't know anything about the code necessarily that",
    "start": "87439",
    "end": "93920"
  },
  {
    "text": "you're going to modify that's where Source graph comes in and so what you do with Source graph is you you jump into",
    "start": "93920",
    "end": "100240"
  },
  {
    "text": "Source graph it provides a single uh cordal into that universal code you search for the string literal the",
    "start": "100240",
    "end": "106200"
  },
  {
    "text": "pattern whatever it is you're looking for you dive right into the the specific part of code that you want to understand",
    "start": "106200",
    "end": "111360"
  },
  {
    "text": "and then you have all these code navigation capabilities jumping definition find references that work across repository boundaries that work",
    "start": "111360",
    "end": "117880"
  },
  {
    "text": "without having to clone the code your local machine and set up and mess around with editor config and and all that",
    "start": "117880",
    "end": "124280"
  },
  {
    "text": "everything is just designed to be seamless and to Aid in that task of you know code spelunking or or Source diving",
    "start": "124280",
    "end": "129800"
  },
  {
    "text": "and once you've acquired that understanding then you can hop back in your editor dive right back into that flow state of hey all the information I",
    "start": "129800",
    "end": "136680"
  },
  {
    "text": "need is readily accessible let me just focus on writing the code that influence the feature or fixes the bug that I'm",
    "start": "136680",
    "end": "142000"
  },
  {
    "text": "working on all right learn more at sourcc gra.com and also check out their bonly virtual series called Dev Tool",
    "start": "142000",
    "end": "148080"
  },
  {
    "text": "Time covering all things Dev tools at source.com deev tool [Music]",
    "start": "148080",
    "end": "161990"
  },
  {
    "text": "time let's do it it's go time welcome to go time your source for diverse",
    "start": "167800",
    "end": "174680"
  },
  {
    "text": "discussions from all around the go Community check out our back catalog at go time. FM there you'll find the most",
    "start": "174680",
    "end": "180920"
  },
  {
    "text": "popular episodes our favorites and a request form so you can let us know what you want to hear about on the Pod",
    "start": "180920",
    "end": "187120"
  },
  {
    "text": "special thanks to our partners at fastly for shipping our shows super fast to wherever you listen check them out at",
    "start": "187120",
    "end": "192799"
  },
  {
    "text": "fastly.com and to our friends at fly.io Host your app servers close to your users no Ops required learn more at",
    "start": "192799",
    "end": "200640"
  },
  {
    "text": "fly.io okay here we go welcome welcome",
    "start": "200640",
    "end": "206400"
  },
  {
    "text": "friends and uh those who want to be friends you want to be friends with me right Aaron of course why you think I'm",
    "start": "206400",
    "end": "213000"
  },
  {
    "text": "here awesome awesome so today we're going to talk about functional",
    "start": "213000",
    "end": "218599"
  },
  {
    "text": "programming with generics so I am your host Johnny Boro if you hav heard from",
    "start": "218599",
    "end": "224360"
  },
  {
    "text": "me for a while that's because I've been heads down trying to ship some stuff that's coming out later this year and",
    "start": "224360",
    "end": "231239"
  },
  {
    "text": "I'm pretty excited about it but I can't spill the beans on that yet you're just going to have to stay tuned and uh if",
    "start": "231239",
    "end": "236480"
  },
  {
    "text": "you want you can go to goang jny.com since since I own that I made sure to to",
    "start": "236480",
    "end": "243519"
  },
  {
    "text": "to snap snap that up last time John C mentioned it on a show so joining me",
    "start": "243519",
    "end": "249519"
  },
  {
    "text": "today is uh you know him he's been on the show before um and you see his name everywhere and especially as it relates",
    "start": "249519",
    "end": "255159"
  },
  {
    "text": "to things like gopher con and getting us ready for the big show coming up next month actually coming up yeah yeah",
    "start": "255159",
    "end": "261160"
  },
  {
    "text": "please uh join me and welcoming Aaron singer hi everybody thanks for having me",
    "start": "261160",
    "end": "266360"
  },
  {
    "text": "Johnny it's wonderful to be here again yes yes and it's great great to have you so we did a show on functional",
    "start": "266360",
    "end": "274360"
  },
  {
    "text": "programming a little while back this was episodes 87 right this was a while back",
    "start": "274360",
    "end": "279919"
  },
  {
    "text": "this was like May something of uh let me see let me double check real quick uh 2019 back in",
    "start": "279919",
    "end": "286720"
  },
  {
    "text": "2019 before days so A lot's happened in the go world since then right most",
    "start": "286720",
    "end": "292199"
  },
  {
    "text": "notably the introduction of generics in 118 right so it was suggested actually",
    "start": "292199",
    "end": "299160"
  },
  {
    "text": "there was a a listener who basically went back and listened to the old um show and basically said hey I found an",
    "start": "299160",
    "end": "304960"
  },
  {
    "text": "episode on functional programming from back in 2019 however it was a time before generics appeared and go it'd be",
    "start": "304960",
    "end": "310840"
  },
  {
    "text": "nice to hear what can be done with functional programming and go with generics so this one from the Steve Nicholas so Steve shout out to you we",
    "start": "310840",
    "end": "317800"
  },
  {
    "text": "indeed got this show put together on your suggestion so others you can follow in and Steve's footsteps if you want to",
    "start": "317800",
    "end": "325360"
  },
  {
    "text": "ask for um for certain shows and you can basically suggest them and often look through the list and see what's",
    "start": "325360",
    "end": "331360"
  },
  {
    "text": "interesting and you tell us what you want to hear and we put on shows like this as a result of that so you and I",
    "start": "331360",
    "end": "337720"
  },
  {
    "text": "along with Matt were basically we did that episode and we learned a lot during that time we learned how to use what we",
    "start": "337720",
    "end": "344319"
  },
  {
    "text": "had back then mly things like the empty interface and things like even generators right and things like that",
    "start": "344319",
    "end": "350560"
  },
  {
    "text": "and even sort of using reflection right because where those were some of the things that really sort of enabled or",
    "start": "350560",
    "end": "356720"
  },
  {
    "text": "facilitated the creation of a functional programming sort of style libraries and",
    "start": "356720",
    "end": "362000"
  },
  {
    "text": "things like that or approaches to go but those were also some of the gripes right",
    "start": "362000",
    "end": "367080"
  },
  {
    "text": "with trying to do functional programming and go right too much use of the empty interface too much use of you know sort",
    "start": "367080",
    "end": "372880"
  },
  {
    "text": "of a reflection on and on right and even even the thinking that well go is really",
    "start": "372880",
    "end": "378280"
  },
  {
    "text": "for imperative programming right the verbo style right not really suitable for functional programming but I think",
    "start": "378280",
    "end": "384400"
  },
  {
    "text": "we made a pretty good case for it right and listening back to the show but now that we have",
    "start": "384400",
    "end": "390120"
  },
  {
    "text": "generics right I wanted to bring you back so we can talk about what's easier now to do with go like what was hard to",
    "start": "390120",
    "end": "396560"
  },
  {
    "text": "do then that is easier to do now yeah I think maybe we can do like a little bit",
    "start": "396560",
    "end": "401840"
  },
  {
    "text": "of a recap of what FP is that's actually a really good introduction into or I",
    "start": "401840",
    "end": "409720"
  },
  {
    "text": "should maybe say segue into why generics can help and kind of answer your",
    "start": "409720",
    "end": "415240"
  },
  {
    "text": "question too where did generics unlock new areas of functional programming",
    "start": "415240",
    "end": "421440"
  },
  {
    "text": "awesomeness Ino if you will that's a technical term awesomeness just for all",
    "start": "421440",
    "end": "427039"
  },
  {
    "text": "the listeners so I'll give it a crack to start off you know the recap of",
    "start": "427039",
    "end": "432599"
  },
  {
    "text": "functional programming really you can go from a math perspective and say you know",
    "start": "432599",
    "end": "438160"
  },
  {
    "text": "everything in FP is based on the function and from a theoretical perspective a function takes inputs and",
    "start": "438160",
    "end": "445520"
  },
  {
    "text": "returns outputs from a math perspective right you can chart a graph from a",
    "start": "445520",
    "end": "450720"
  },
  {
    "text": "function for example just to map the inputs to the outputs that's what it is it's a mapping in real life of course",
    "start": "450720",
    "end": "457800"
  },
  {
    "text": "our functions don't just spit something back out they also do some IO or maybe",
    "start": "457800",
    "end": "463720"
  },
  {
    "text": "talk to a file or use a timer or send on a Channel or whatever else and so that's",
    "start": "463720",
    "end": "469720"
  },
  {
    "text": "really important actually to remember that all of this stuff that we're going",
    "start": "469720",
    "end": "474759"
  },
  {
    "text": "to talk about in functional programming comes from the theoretical but when we apply it it looks like a design pattern",
    "start": "474759",
    "end": "482560"
  },
  {
    "text": "it's not like adopting a framework or if you're in school like doing an assignment there's not just a right",
    "start": "482560",
    "end": "489000"
  },
  {
    "text": "answer and a bunch of wrong answers or a right answer and then everything else is just wrong there's some gradients here",
    "start": "489000",
    "end": "496479"
  },
  {
    "text": "and we kind of saw that with the there have been talks on FP before including",
    "start": "496479",
    "end": "502000"
  },
  {
    "text": "one that I did way back in 2017 there's been talks at goer con UK",
    "start": "502000",
    "end": "507680"
  },
  {
    "text": "there's another talk from goer in 2020 and obviously like you said",
    "start": "507680",
    "end": "512839"
  },
  {
    "text": "Johnny there's there's been previous go times there's been blog posts they all",
    "start": "512839",
    "end": "518800"
  },
  {
    "text": "attack FP from a different perspective right and it was all possible to do some",
    "start": "518800",
    "end": "526120"
  },
  {
    "text": "FP things before generics right so we were able to take some of the theory and apply it even before generics obviously",
    "start": "526120",
    "end": "532920"
  },
  {
    "text": "now generics has unlocked more stuff and now we can unlock more things so FP the",
    "start": "532920",
    "end": "539680"
  },
  {
    "text": "theory is things are based on the function we can transform functions by putting two together right so if the",
    "start": "539680",
    "end": "546160"
  },
  {
    "text": "output of one gets passed into the input of a second one now you essentially have a transitive property where you can",
    "start": "546160",
    "end": "552880"
  },
  {
    "text": "input to the first one and get an output from the second one and it all looks like one function composition right you",
    "start": "552880",
    "end": "560079"
  },
  {
    "text": "can Curry functions so you can think of it as partially applying a function",
    "start": "560079",
    "end": "565720"
  },
  {
    "text": "meaning if a function takes in three parameters pass one of the parameters",
    "start": "565720",
    "end": "570880"
  },
  {
    "text": "and now you have a function that takes two parameters and that first parameter",
    "start": "570880",
    "end": "575920"
  },
  {
    "text": "that you already passed in is already baked into it right then you can take those tools and go to what I kind of",
    "start": "575920",
    "end": "584120"
  },
  {
    "text": "think of as the next higher level right so moving into the programming world not",
    "start": "584120",
    "end": "589640"
  },
  {
    "text": "just the math world because all that stuff I just mentioned is basically just the math world in the programming world",
    "start": "589640",
    "end": "596320"
  },
  {
    "text": "you could have sequences of things like a list or an array or and go a slice so",
    "start": "596320",
    "end": "603079"
  },
  {
    "text": "what if you could apply a function on every item in the slice without any",
    "start": "603079",
    "end": "608240"
  },
  {
    "text": "write a for Loop and that's called in go and a lot of other languages it's called a map right you just apply the function",
    "start": "608240",
    "end": "616240"
  },
  {
    "text": "on each element in the list and then you get a new list out the other end that has the outputs of that function in the",
    "start": "616240",
    "end": "623519"
  },
  {
    "text": "same indices as the respective inputs so now starting to bend the mind a little",
    "start": "623519",
    "end": "629880"
  },
  {
    "text": "bit what if you had a function that took in an element of a list but then output",
    "start": "629880",
    "end": "634959"
  },
  {
    "text": "a list itself right now you can do something called a flat map where you",
    "start": "634959",
    "end": "640360"
  },
  {
    "text": "take in an element so you apply the function on each element the output is a list right so now you're taking a bunch",
    "start": "640360",
    "end": "648040"
  },
  {
    "text": "of lists and combining them together to make a much bigger list right so whereas before you were just dealing with input",
    "start": "648040",
    "end": "654639"
  },
  {
    "text": "one element output another element now you're inputting one element outputting n elements for each element in the",
    "start": "654639",
    "end": "660920"
  },
  {
    "text": "original list and you end up with a much bigger list now you can go even further",
    "start": "660920",
    "end": "666720"
  },
  {
    "text": "here and you can start doing things like filtering so if you have a function that takes in an element in the list and",
    "start": "666720",
    "end": "672760"
  },
  {
    "text": "returns a Boolean you can use that to decide can I make a new list and can I",
    "start": "672760",
    "end": "677880"
  },
  {
    "text": "decide which elements from the original list are going to end up in the new list you can also do things like zipping",
    "start": "677880",
    "end": "683959"
  },
  {
    "text": "which is using a function to determine the ordering of a finalist given in two",
    "start": "683959",
    "end": "690519"
  },
  {
    "text": "or three or four or five or six or 10 initial lists right so you can determine how they're interspersed together and",
    "start": "690519",
    "end": "697720"
  },
  {
    "text": "I'm going to stop there but there are a lot of other ways that we can sort of apply this very basic but powerful",
    "start": "697720",
    "end": "705079"
  },
  {
    "text": "concept of a pure function just takes in an input returns an output doesn't do IO",
    "start": "705079",
    "end": "710399"
  },
  {
    "text": "or anything else so this concept of a pure function and applying that into the programming World Of Maps and lists and",
    "start": "710399",
    "end": "719279"
  },
  {
    "text": "other things other data structures like trees and so forth forgive the overloading of the term list but this",
    "start": "719279",
    "end": "726120"
  },
  {
    "text": "list of things we can do you know it goes on and I could spend another hour and a half talking about it of course",
    "start": "726120",
    "end": "732160"
  },
  {
    "text": "I'm not going to do that but the reason that I went into all that is is to kind",
    "start": "732160",
    "end": "737480"
  },
  {
    "text": "of start to talk about what could we do before and and what can we do now with generics with the addition of generics",
    "start": "737480",
    "end": "744600"
  },
  {
    "text": "and really thinking about generics this is another branch of math right we're talking about types here statically",
    "start": "744600",
    "end": "751279"
  },
  {
    "text": "defined types and not only that but now we're able to vary the type of the input",
    "start": "751279",
    "end": "759480"
  },
  {
    "text": "of a function or the output of a function we're able to vary that type based on a parameter it's called type",
    "start": "759480",
    "end": "766320"
  },
  {
    "text": "parameterization so if we can do that now we can write one function in go but we can have an infinite number of actual",
    "start": "766320",
    "end": "774760"
  },
  {
    "text": "implementations of it because the type can change so if you've got a function that takes in a type parameter or a",
    "start": "774760",
    "end": "781639"
  },
  {
    "text": "parameter of type T where T is a type parameter well I can invent Infinity",
    "start": "781639",
    "end": "787839"
  },
  {
    "text": "types right so if I can invent Infinity types then that function can take in",
    "start": "787839",
    "end": "792880"
  },
  {
    "text": "Infinity different types of parameters which means there are Infinity different implementations of that function and you",
    "start": "792880",
    "end": "800399"
  },
  {
    "text": "know the go compiler is going to figure out how to define actual implementations that take in those actual types I don't",
    "start": "800399",
    "end": "806440"
  },
  {
    "text": "have to worry about that anymore which means I don't have to generate code or anything like that but now that we have",
    "start": "806440",
    "end": "812600"
  },
  {
    "text": "this power and this is immense amount of power now we can start to have things",
    "start": "812600",
    "end": "819199"
  },
  {
    "text": "like say take the map example we can start to have things like a single",
    "start": "819199",
    "end": "825160"
  },
  {
    "text": "function called map that can operate on a list of any type instead of before we",
    "start": "825160",
    "end": "832839"
  },
  {
    "text": "had to have a function called map that only could operate on a list of one type and we had to repeat the implement",
    "start": "832839",
    "end": "838720"
  },
  {
    "text": "mentation of map over and over and over again for all our different lists now the compiler just does that for us like",
    "start": "838720",
    "end": "845199"
  },
  {
    "text": "magic thank you go team you all gave us this opportunity to save tons of generated code and that's amazing so",
    "start": "845199",
    "end": "852440"
  },
  {
    "text": "that's kind of where we're at now the implications of this go beyond map but fundamentally now we're at a point where",
    "start": "852440",
    "end": "860360"
  },
  {
    "text": "instead of using interface raw interfaces or you know the any type now instead of doing reflection now we can",
    "start": "860360",
    "end": "868399"
  },
  {
    "text": "add compile time prove that certain functions will work for some definition",
    "start": "868399",
    "end": "874279"
  },
  {
    "text": "of work right we can prove via the type system that certain types of functions",
    "start": "874279",
    "end": "879680"
  },
  {
    "text": "will work like map for example we don't have to wonder whether our reflection",
    "start": "879680",
    "end": "885720"
  },
  {
    "text": "code or our type assertion on an empty interface does the right thing and figures out the right type of the list",
    "start": "885720",
    "end": "892240"
  },
  {
    "text": "and then applies that to the function now we know that if our code compiles",
    "start": "892240",
    "end": "897800"
  },
  {
    "text": "that you've passed in the right function that takes in the right type for the type of elements in the list and you",
    "start": "897800",
    "end": "904199"
  },
  {
    "text": "will get back another list with the output type of that function in it so if",
    "start": "904199",
    "end": "909959"
  },
  {
    "text": "I'm hearing you correctly it seems like now the so we're no longer arguing about sort of the the benefits of FP right so",
    "start": "909959",
    "end": "916880"
  },
  {
    "text": "you know you done a pretty good recap of why you want to introduce FP or at least",
    "start": "916880",
    "end": "922000"
  },
  {
    "text": "know of its usefulness right in certain contexts it's about now how easy is it",
    "start": "922000",
    "end": "928160"
  },
  {
    "text": "to actually Implement in an elegant way and go and that's what generic gives us right because like you said there were",
    "start": "928160",
    "end": "934959"
  },
  {
    "text": "FP libraries and and talks and blog post and everything it was possible before we",
    "start": "934959",
    "end": "940160"
  },
  {
    "text": "just either had to write a lot of boil Pate ourselves or use you know go generate to produce you know a pile a",
    "start": "940160",
    "end": "947120"
  },
  {
    "text": "variance of of a particular function to support the different types as many typ as we wanted to support right or we had",
    "start": "947120",
    "end": "952720"
  },
  {
    "text": "to do you know some Voodoo with reflection to get to the some top information right so now now it's about",
    "start": "952720",
    "end": "959399"
  },
  {
    "text": "sort of the Elegance right that we get to leverage right with type parameterization let's say that three",
    "start": "959399",
    "end": "966199"
  },
  {
    "text": "times F okay so if I'm understanding correctly",
    "start": "966199",
    "end": "971399"
  },
  {
    "text": "then some of the libraries pre generics is it fair to say that we're going to see a lot of uh or at least for those",
    "start": "971399",
    "end": "977759"
  },
  {
    "text": "who practice FP and are interested in practicing FP and doing FP and go which is something we'll touch on as a",
    "start": "977759",
    "end": "983079"
  },
  {
    "text": "separate sort of a thread right in our conversation so we can expect that a lot of those SP Li are going to start",
    "start": "983079",
    "end": "989160"
  },
  {
    "text": "adopting generics because it just makes the implementation that much easier yeah I I think as someone who is who has",
    "start": "989160",
    "end": "997079"
  },
  {
    "text": "written a library to do a bunch of FP things yeah I saw not only did it make",
    "start": "997079",
    "end": "1002959"
  },
  {
    "text": "the implementation easier in the form of less code and more guarantees at compile time about types but also it extends",
    "start": "1002959",
    "end": "1012160"
  },
  {
    "text": "those guarantees to the caller so the user of the library too so you know like",
    "start": "1012160",
    "end": "1017480"
  },
  {
    "text": "I said I I no longer have to take in an interface or any type and return an any",
    "start": "1017480",
    "end": "1023240"
  },
  {
    "text": "type from or a list of any types and a return a list of any types from map and",
    "start": "1023240",
    "end": "1028959"
  },
  {
    "text": "since now I can return the type parameter T and then a new type parameter for the return type of the",
    "start": "1028959",
    "end": "1036079"
  },
  {
    "text": "list well now those guarantees are extended to my user the user of the",
    "start": "1036079",
    "end": "1042438"
  },
  {
    "text": "library and now they can also say oh well my my program compiles therefore my",
    "start": "1042439",
    "end": "1047760"
  },
  {
    "text": "types are right too so this is like a a domino effect of benefits that if a user",
    "start": "1047760",
    "end": "1054559"
  },
  {
    "text": "is using someone's FP library or even rolled their own now they know that well",
    "start": "1054559",
    "end": "1060760"
  },
  {
    "text": "my types are right they don't have to remember it's it's one less thing they have to keep in their head right that oh",
    "start": "1060760",
    "end": "1066919"
  },
  {
    "text": "well the input should be a slice of ins and return should be a slice of strings",
    "start": "1066919",
    "end": "1072760"
  },
  {
    "text": "but all the compiler knew about in the past was it's just an empty interface or maybe a little better a slice of empty",
    "start": "1072760",
    "end": "1079520"
  },
  {
    "text": "interfaces or something like that it is Simplicity but it is benefit too so I",
    "start": "1079520",
    "end": "1084799"
  },
  {
    "text": "was looking at sort of the how go sort of provides this or how go talks about",
    "start": "1084799",
    "end": "1090320"
  },
  {
    "text": "sort of this insentient right of a generic function so for those who haven't sort of U um gotten into generic",
    "start": "1090320",
    "end": "1096159"
  },
  {
    "text": "setting go pretty much when you create a generic function what you're basically saying is that you're going to support a",
    "start": "1096159",
    "end": "1101520"
  },
  {
    "text": "number of types right based on the types that information you provide and basically your what happens behind the scenes when you compile your code is",
    "start": "1101520",
    "end": "1107600"
  },
  {
    "text": "that go You generate an instance right of your function for each of the types you say you support right so it's kind",
    "start": "1107600",
    "end": "1113679"
  },
  {
    "text": "of like an actual code generation that Bally that we have that provides the type safety the type checks right that",
    "start": "1113679",
    "end": "1120200"
  },
  {
    "text": "the compiler is able to provide we now the the language itself is actually producing that for you behind the scenes",
    "start": "1120200",
    "end": "1125919"
  },
  {
    "text": "and you don't have to actually write your own generators right so effectively you're doing the exact same thing you were doing before except now it's",
    "start": "1125919",
    "end": "1131600"
  },
  {
    "text": "basically Big T support into the language right so this is an efficiency gain right in terms of you the program",
    "start": "1131600",
    "end": "1138559"
  },
  {
    "text": "being able to write these libraries being able to support multiple types of given functions and things this is an efficiency gain really not really a game",
    "start": "1138559",
    "end": "1145200"
  },
  {
    "text": "changer for functional programming and go per se just a a more efficient way of",
    "start": "1145200",
    "end": "1150640"
  },
  {
    "text": "writing the functions basically yeah that is a really great point is that",
    "start": "1150640",
    "end": "1155760"
  },
  {
    "text": "everything we can do now technically you could do before because we had the empty",
    "start": "1155760",
    "end": "1161159"
  },
  {
    "text": "interface right the empty interface is the set of all types all possible types in in this context so you could have a",
    "start": "1161159",
    "end": "1168679"
  },
  {
    "text": "function that take in an empty interface and that is a function that can take in anything you can come up with right same",
    "start": "1168679",
    "end": "1174919"
  },
  {
    "text": "thing it can return if you have the MD interface returned and it can be the the set of anything so your task before was",
    "start": "1174919",
    "end": "1182400"
  },
  {
    "text": "write the code to define a subset of all things that your function wants to deal",
    "start": "1182400",
    "end": "1188039"
  },
  {
    "text": "with now there is a massive efficiency gain right because now you can constrain",
    "start": "1188039",
    "end": "1193880"
  },
  {
    "text": "a type parameter and have the compiler compute for you",
    "start": "1193880",
    "end": "1198960"
  },
  {
    "text": "whether a given type for a type parameter that has constraints on it is legal so do you want it to be integral",
    "start": "1198960",
    "end": "1205480"
  },
  {
    "text": "or do you want it to be comparable or do you want it to be string or or any other",
    "start": "1205480",
    "end": "1210840"
  },
  {
    "text": "anything else Under the Sun that we can come up with you write less than a line",
    "start": "1210840",
    "end": "1216200"
  },
  {
    "text": "of code right and maybe you write a new constraint somewhere and and then you apply it on your type parameter and the",
    "start": "1216200",
    "end": "1223120"
  },
  {
    "text": "compiler does what I consider a very Advanced and very useful computation for",
    "start": "1223120",
    "end": "1230039"
  },
  {
    "text": "you across your entire code base and if you're writing a library across everyone's entire code base that uses it",
    "start": "1230039",
    "end": "1236840"
  },
  {
    "text": "which is pretty amazing it's awful yeah that is [Music]",
    "start": "1236840",
    "end": "1257120"
  },
  {
    "text": "amazing this episode is brought to you by honeycomb find your most perplexing",
    "start": "1257120",
    "end": "1262799"
  },
  {
    "text": "application issues honeycomb is a fast analysis tool that reveals the truth",
    "start": "1262799",
    "end": "1267880"
  },
  {
    "text": "about every aspect of your application in production find out how users experience your code in complex and",
    "start": "1267880",
    "end": "1274200"
  },
  {
    "text": "unpredictable environments find patterns and outliers across billions of rows of data and definitely solve your problems",
    "start": "1274200",
    "end": "1281080"
  },
  {
    "text": "and we use honeycomb here at changel that's why we welcome the opportunity to add them as one of our infrastructure",
    "start": "1281080",
    "end": "1286159"
  },
  {
    "text": "Partners in particular we use honecomb to track down CED issues recently which we talked about at length on the Kaizen",
    "start": "1286159",
    "end": "1292840"
  },
  {
    "text": "edition of the shipet podcast so check that out here's the thing teams who don't use honeycomb are forced to find",
    "start": "1292840",
    "end": "1298520"
  },
  {
    "text": "the need on the Hast stack they scroll through endless dashboards playing whack-a-mole they deal with alert floods",
    "start": "1298520",
    "end": "1304320"
  },
  {
    "text": "trying to guess which one matters and they go from tool to tool to Tool playing sleuth trying to figure out how",
    "start": "1304320",
    "end": "1310120"
  },
  {
    "text": "all the puzzle pieces fit together it's this context switching and Tool sprawl that is slowly killing teams",
    "start": "1310120",
    "end": "1315840"
  },
  {
    "text": "Effectiveness and ultimately hindering their business business with honeycomb you get a fast unified and clear",
    "start": "1315840",
    "end": "1322679"
  },
  {
    "text": "understanding of the one thing driving your business production with honeycomb you guess less and you know more join",
    "start": "1322679",
    "end": "1329679"
  },
  {
    "text": "the Swarm and try honeycomb free today at honeycomb.io Chang log again",
    "start": "1329679",
    "end": "1336760"
  },
  {
    "text": "honeycomb.io [Music]",
    "start": "1336760",
    "end": "1346960"
  },
  {
    "text": "changelog [Music]",
    "start": "1346960",
    "end": "1358840"
  },
  {
    "text": "so the go team has been very vocal and deliberate about sort of advising pretty",
    "start": "1358840",
    "end": "1364880"
  },
  {
    "text": "much everybody to not go Gang Busters with generics on all the things right not use it as a hammer you know with",
    "start": "1364880",
    "end": "1371200"
  },
  {
    "text": "everything being a nail right just don't don't spread it everywhere you know it it's a very sort of cautious approach",
    "start": "1371200",
    "end": "1377000"
  },
  {
    "text": "right until some of the best best practices start to emerge until we can see the sort of the best use cases for",
    "start": "1377000",
    "end": "1382640"
  },
  {
    "text": "for generics and go do you think that applies like even more so for those who",
    "start": "1382640",
    "end": "1388320"
  },
  {
    "text": "want to practice functional programming and go or do you think uh actually it makes our lives a little easier let just",
    "start": "1388320",
    "end": "1395159"
  },
  {
    "text": "go full throtel well that is good advice for all software I think so yes the",
    "start": "1395159",
    "end": "1400799"
  },
  {
    "text": "answer to your question is yes right there is no telling right now whether",
    "start": "1400799",
    "end": "1408600"
  },
  {
    "text": "map is enough right or no one wants to use it and if people do want to use Map",
    "start": "1408600",
    "end": "1415039"
  },
  {
    "text": "There's no telling whether the parallel version of that is better or complimentary to the regular serial",
    "start": "1415039",
    "end": "1421640"
  },
  {
    "text": "version of map for example right so the parallel version for listeners would be",
    "start": "1421640",
    "end": "1427159"
  },
  {
    "text": "instead of applying the function on every element of the list one after the other it's applying them in parallel",
    "start": "1427159",
    "end": "1433120"
  },
  {
    "text": "with X number of go routines or at least concurrently with X number of go routines then R return the result right",
    "start": "1433120",
    "end": "1439799"
  },
  {
    "text": "there's no telling right now you can say this is correct you can say this is possible you",
    "start": "1439799",
    "end": "1447400"
  },
  {
    "text": "can guess this might be useful for this case or this case or this type of",
    "start": "1447400",
    "end": "1452440"
  },
  {
    "text": "software or that type of software but there's no substitute for usage in the in the wild in the community if you will",
    "start": "1452440",
    "end": "1459720"
  },
  {
    "text": "there's just no no substitute so these things should be tried maybe you know we",
    "start": "1459720",
    "end": "1465600"
  },
  {
    "text": "should go a little crazy as they say as a Goa said a little overboard to see",
    "start": "1465600",
    "end": "1472000"
  },
  {
    "text": "what is possible but we should not say that this is the the result this is the",
    "start": "1472000",
    "end": "1479080"
  },
  {
    "text": "solution to all problems in FP we should get these things out there play around with them experiment with them see what",
    "start": "1479080",
    "end": "1485880"
  },
  {
    "text": "works at a larger scale and then say that is the solution to problems XY and",
    "start": "1485880",
    "end": "1492399"
  },
  {
    "text": "Z you know this is why we all say we test in production right because there's no substitute for real world real world",
    "start": "1492399",
    "end": "1500279"
  },
  {
    "text": "use cases yeah yeah in that case it's data and in our case it's programmers",
    "start": "1500279",
    "end": "1505799"
  },
  {
    "text": "experimenting with things and and seeing what actually works in real world code bases but it's the same effect mhh so",
    "start": "1505799",
    "end": "1513080"
  },
  {
    "text": "picking back off of that the thread that we paused and now I want us to resume you see what I did there I do I do I",
    "start": "1513080",
    "end": "1521039"
  },
  {
    "text": "love it um the idea of basically the when to use generic right and in our",
    "start": "1521039",
    "end": "1528840"
  },
  {
    "text": "case here when to use functional programming I think that's a fair question to ask whether or not you know",
    "start": "1528840",
    "end": "1533919"
  },
  {
    "text": "regardless of generics right so one of the sort of the the strong gripes that I",
    "start": "1533919",
    "end": "1539159"
  },
  {
    "text": "found out there right that I've heard even in talking to some folks is that look go is imperative right through and",
    "start": "1539159",
    "end": "1545960"
  },
  {
    "text": "through right we're kind of side bending and and kind of pushing in a direction",
    "start": "1545960",
    "end": "1551760"
  },
  {
    "text": "it wasn't meant to right even though some of its features some its capabilities like are well suited right",
    "start": "1551760",
    "end": "1557679"
  },
  {
    "text": "for functional programming you know functions being first class citizens and and and etc etc all a lot of the sort of",
    "start": "1557679",
    "end": "1563919"
  },
  {
    "text": "the things you look for in functional programming you can do and go but just because you can doesn't mean you should right that all addage right so is",
    "start": "1563919",
    "end": "1571360"
  },
  {
    "text": "functional programming still in the realm of sort of experimentation and just people who are curious and and they",
    "start": "1571360",
    "end": "1578399"
  },
  {
    "text": "can play around with it but really like at work or whatever right you know you",
    "start": "1578399",
    "end": "1583640"
  },
  {
    "text": "don't they don't really use it right like like where are we in terms of really I guess this is an adoption",
    "start": "1583640",
    "end": "1588880"
  },
  {
    "text": "question right like are people interested or increasingly more so interested in using FP now even with the",
    "start": "1588880",
    "end": "1594880"
  },
  {
    "text": "bells and whistles that are enabled right through generics are is FP attractive enough for people who are",
    "start": "1594880",
    "end": "1601640"
  },
  {
    "text": "traditionally doing this imperative style especially in the world of go should they be looking or or really",
    "start": "1601640",
    "end": "1607799"
  },
  {
    "text": "should we try to bring FP into our production code well it's already here anyone who uses context m is using a",
    "start": "1607799",
    "end": "1617120"
  },
  {
    "text": "part of FP right because context has a with cancel and with timeout those",
    "start": "1617120",
    "end": "1623559"
  },
  {
    "text": "return a function right this is how pervasive FP is that is technically a",
    "start": "1623559",
    "end": "1629640"
  },
  {
    "text": "higher order function because it's a function returning with cancel is a function and that's returning a function",
    "start": "1629640",
    "end": "1636159"
  },
  {
    "text": "that you call to close to free the resources there's an internal go routine running right with a timer and you know",
    "start": "1636159",
    "end": "1642520"
  },
  {
    "text": "it frees that resource right that is FP and I think like all technologies that",
    "start": "1642520",
    "end": "1648679"
  },
  {
    "text": "are used by more than a trivial number of people in in the world a corner of",
    "start": "1648679",
    "end": "1655679"
  },
  {
    "text": "this technology is used a lot right SQL is is another good example here you can",
    "start": "1655679",
    "end": "1662600"
  },
  {
    "text": "do many many things with SQL you can turn postgress SQL or postgressql is",
    "start": "1662600",
    "end": "1668039"
  },
  {
    "text": "that I think that's how you say it right yeah yeah I'll allow it okay yeah okay",
    "start": "1668039",
    "end": "1673080"
  },
  {
    "text": "it's got the Johnny stamp of approval you can turn post gql into a time series database if you want to for example",
    "start": "1673080",
    "end": "1680360"
  },
  {
    "text": "right by using very Advanced features of SQL but not many people do that because",
    "start": "1680360",
    "end": "1686399"
  },
  {
    "text": "obviously it's not the a lot of times it's not the best tool for the job but also most people prefer including myself",
    "start": "1686399",
    "end": "1693640"
  },
  {
    "text": "to stick with a smaller set of foundational features of the technology",
    "start": "1693640",
    "end": "1700679"
  },
  {
    "text": "and same thing with FP right there is a smaller set than even all the stuff that",
    "start": "1700679",
    "end": "1706080"
  },
  {
    "text": "I said today there's a smaller set of functionality that most people prefer to",
    "start": "1706080",
    "end": "1712120"
  },
  {
    "text": "use and my hypothesis for why that is is because it makes more sense and it fits",
    "start": "1712120",
    "end": "1719320"
  },
  {
    "text": "into more workloads right so if you need to capture some state of a function and",
    "start": "1719320",
    "end": "1727679"
  },
  {
    "text": "expose one operation on that state to the caller using a higher order function",
    "start": "1727679",
    "end": "1733480"
  },
  {
    "text": "makes a lot of sense it's a lot easier than doing a bunch of boiler plate and building a whole struct and storing the",
    "start": "1733480",
    "end": "1739360"
  },
  {
    "text": "state in the struct and having a bunch of methods on it and that it just fits",
    "start": "1739360",
    "end": "1744600"
  },
  {
    "text": "right into that use case and it applies that use case is applicable and exists",
    "start": "1744600",
    "end": "1749880"
  },
  {
    "text": "on a ton of workloads and so we use it right so FP strictly speaking is is",
    "start": "1749880",
    "end": "1756039"
  },
  {
    "text": "everywhere now I'm going to modify your second question a little bit accordingly",
    "start": "1756039",
    "end": "1761159"
  },
  {
    "text": "you said should we be trying to get FP into more workflows well given that it's already a lot of places I'm going to",
    "start": "1761159",
    "end": "1767760"
  },
  {
    "text": "modify it and say should we get more features of FP into more workloads M",
    "start": "1767760",
    "end": "1774519"
  },
  {
    "text": "will you allow that yeah yeah let's do it yeah tell me more all right so now we' got the seal",
    "start": "1774519",
    "end": "1781279"
  },
  {
    "text": "on that all right and so the way that I think about it I try to model it as the imperative declarative difference I",
    "start": "1781279",
    "end": "1788960"
  },
  {
    "text": "guess there's a fundamental difference between imperative and declarative you can see it with SQL versus go right cuz",
    "start": "1788960",
    "end": "1796120"
  },
  {
    "text": "SQL you say dear database this is the result that I want and then the database has a ton of",
    "start": "1796120",
    "end": "1803919"
  },
  {
    "text": "usually very clever implementation to figure out how to get whatever the way",
    "start": "1803919",
    "end": "1808960"
  },
  {
    "text": "that it represents the data on disk into the result that you want right so you",
    "start": "1808960",
    "end": "1814200"
  },
  {
    "text": "can filter you can join you can group you can order etc etc etc now in the FP",
    "start": "1814200",
    "end": "1820600"
  },
  {
    "text": "world let's just take this map example I keep using right so with map the",
    "start": "1820600",
    "end": "1827320"
  },
  {
    "text": "intention is to take a function apply it onto every element of the list the slice",
    "start": "1827320",
    "end": "1833760"
  },
  {
    "text": "and then return a new slice with the results you might return the same slice with the new results that's also",
    "start": "1833760",
    "end": "1840519"
  },
  {
    "text": "sometimes legal as well but let's just say for sake of logic we're returning a new slice with new results well we're",
    "start": "1840519",
    "end": "1848399"
  },
  {
    "text": "iterating through a list so that's a for Loop that's just what it is right we can write a for Loop and that's the",
    "start": "1848399",
    "end": "1854480"
  },
  {
    "text": "imperative way it's telling the machine to go through the list one by one call",
    "start": "1854480",
    "end": "1859760"
  },
  {
    "text": "this function every time put the result into a new list or the other way is someone else did that for you and you",
    "start": "1859760",
    "end": "1867000"
  },
  {
    "text": "just call map and that's the kind of declarative way because when you call map you're effectively saying like with",
    "start": "1867000",
    "end": "1874799"
  },
  {
    "text": "SQL you're saying this is the data that I want back with map you're saying I want a new list back with the results of",
    "start": "1874799",
    "end": "1881440"
  },
  {
    "text": "the old list applied on the function that I gave to map right and that's pretty much it all right so when we",
    "start": "1881440",
    "end": "1888120"
  },
  {
    "text": "think about this question of should we get more features of FP into language",
    "start": "1888120",
    "end": "1894679"
  },
  {
    "text": "into code bases that that are mainly go code bases the way that I think about it",
    "start": "1894679",
    "end": "1900080"
  },
  {
    "text": "is would this codebase or this part of a code base would it benefit in some way",
    "start": "1900080",
    "end": "1906559"
  },
  {
    "text": "from more declarativa I think I may have made up that word [Music]",
    "start": "1906559",
    "end": "1913440"
  },
  {
    "text": "declaratives you know yeah I think people know what I mean would it would it benefit in some way and there are a",
    "start": "1913440",
    "end": "1919360"
  },
  {
    "text": "lot of possible ways that declaratives of code it can add",
    "start": "1919360",
    "end": "1926960"
  },
  {
    "text": "structure it can add readability it can also reduce readability if you're not careful so that's a trade of it can fix",
    "start": "1926960",
    "end": "1934919"
  },
  {
    "text": "bugs like if you have an error in one of your for Loops this happens a lot with",
    "start": "1934919",
    "end": "1941120"
  },
  {
    "text": "parallel and concurrent code and thus also code that that deals with Channel s",
    "start": "1941120",
    "end": "1947360"
  },
  {
    "text": "a lot too I've seen that a lot as well so it can reduce bugs because you're just getting someone else's code that",
    "start": "1947360",
    "end": "1953240"
  },
  {
    "text": "did it the right way right so if you think about it in this way and this is",
    "start": "1953240",
    "end": "1958519"
  },
  {
    "text": "where I start with any code base I always start okay well is there code in",
    "start": "1958519",
    "end": "1964200"
  },
  {
    "text": "here that we can reduce by using the declarative features of FP whether it's",
    "start": "1964200",
    "end": "1971279"
  },
  {
    "text": "Maps or reduces or filters or Zips and so on and so forth and as a quick anecdote to to close that thought out I",
    "start": "1971279",
    "end": "1979399"
  },
  {
    "text": "have seen filter as one of the most valuable tools",
    "start": "1979399",
    "end": "1985360"
  },
  {
    "text": "to next tools to take and put into code bases because tons and tons of code has",
    "start": "1985360",
    "end": "1992360"
  },
  {
    "text": "four Loops that reduce down into selectively taking things out of a list and putting them somewhere else right",
    "start": "1992360",
    "end": "1998039"
  },
  {
    "text": "and that's filter right awesome awesome yeah I can definitely see that I think at least for me it's a it's a mindset",
    "start": "1998039",
    "end": "2005159"
  },
  {
    "text": "shift right so like I don't have I don't have a reason not to use FP right or not to bring some of the ideas or not really",
    "start": "2005159",
    "end": "2012480"
  },
  {
    "text": "or I should say not to think FP first right in terms of how do I approach how",
    "start": "2012480",
    "end": "2017679"
  },
  {
    "text": "do I solve this problem right like I'm so used to the the way I'm used to doing",
    "start": "2017679",
    "end": "2023399"
  },
  {
    "text": "it right so it's more of a sort of a um I think maybe education and maybe sort",
    "start": "2023399",
    "end": "2028639"
  },
  {
    "text": "of a seeing more people talk about it present about it and having you know shows like this where people",
    "start": "2028639",
    "end": "2034039"
  },
  {
    "text": "knowledgeable like yourself come on and sort of advocate for it I think it's more of a sort of a education issue more",
    "start": "2034039",
    "end": "2041000"
  },
  {
    "text": "than the merits of it cuz all these things you're talking about here these are things that make my program safer",
    "start": "2041000",
    "end": "2047159"
  },
  {
    "text": "they make you know my programs easier to understand right and obviously like as",
    "start": "2047159",
    "end": "2052358"
  },
  {
    "text": "with everything in programming we we sprinkle things where they make sense and if your team at work is not",
    "start": "2052359",
    "end": "2059800"
  },
  {
    "text": "using sort of FP style for things um and perhaps they want to or don't want to so",
    "start": "2059800",
    "end": "2065560"
  },
  {
    "text": "Don't Force It kind of thing but you know I think every once in a while you know even you know using your example like filter for example that I see the",
    "start": "2065560",
    "end": "2072919"
  },
  {
    "text": "use case for it not that you mention it I see that everywhere like it could definitely be used in a lot more places",
    "start": "2072919",
    "end": "2079760"
  },
  {
    "text": "and maybe who knows maybe that sort of triggers somebody to say hey what's that like I've never seen this particular approach right and then boom that's a",
    "start": "2079760",
    "end": "2086000"
  },
  {
    "text": "brown bag launch right there you can educate some co-workers around you the sort of the merits of FP so for me I",
    "start": "2086000",
    "end": "2091480"
  },
  {
    "text": "think it's an education thing more so than capabilities or features which kind",
    "start": "2091480",
    "end": "2097000"
  },
  {
    "text": "of leads me to my next question is that is there anything missing in go to nudge",
    "start": "2097000",
    "end": "2102560"
  },
  {
    "text": "us even more towards sort of a the I don't want to say traditional FP because",
    "start": "2102560",
    "end": "2107680"
  },
  {
    "text": "I don't think we want to make go FP language per se but is there a missing features in go that would allow us to",
    "start": "2107680",
    "end": "2114040"
  },
  {
    "text": "even take even more advantage of FP Concepts well it's so generics are young",
    "start": "2114040",
    "end": "2120359"
  },
  {
    "text": "and FP using generics is even younger so really the best I can answer that is",
    "start": "2120359",
    "end": "2126480"
  },
  {
    "text": "hypoth theze based on very very unscientific things like gut feel and",
    "start": "2126480",
    "end": "2132320"
  },
  {
    "text": "things I've seen and anecdotal evidence right I think the the biggest thing that",
    "start": "2132320",
    "end": "2137920"
  },
  {
    "text": "could unlock just making the building these things a little easier would be",
    "start": "2137920",
    "end": "2143400"
  },
  {
    "text": "type parameters on methods of a struct right M or a type right so you can't do",
    "start": "2143400",
    "end": "2149560"
  },
  {
    "text": "that now so you can't have let's say you have a custom list type that's a list of",
    "start": "2149560",
    "end": "2155920"
  },
  {
    "text": "type t you can't have a method called map on that list that takes a type parameter U",
    "start": "2155920",
    "end": "2163599"
  },
  {
    "text": "and then returns a new list of Type U you can still build map I've done it and",
    "start": "2163599",
    "end": "2168839"
  },
  {
    "text": "I know others who have done it I've seen it all over the place you can still build it it has the same effect and it",
    "start": "2168839",
    "end": "2174560"
  },
  {
    "text": "works the same MH the reason that I'm hypothesizing that type parameters on",
    "start": "2174560",
    "end": "2180359"
  },
  {
    "text": "methods would make things easier is because for many folks who are trained",
    "start": "2180359",
    "end": "2186480"
  },
  {
    "text": "you using Java or C++ or other pure what I'll call Pure objectoriented languages",
    "start": "2186480",
    "end": "2192359"
  },
  {
    "text": "although whether they're Pure or not is another podcast pure in air quotes for",
    "start": "2192359",
    "end": "2197599"
  },
  {
    "text": "those not watching air quotes I yeah thank you for that call definitely in air quotes So other folks who are",
    "start": "2197599",
    "end": "2203760"
  },
  {
    "text": "trained with the classical oop type of programming the opop design patterns and",
    "start": "2203760",
    "end": "2210520"
  },
  {
    "text": "methodology you know having a method on a struct feels a lot like a method on a",
    "start": "2210520",
    "end": "2216240"
  },
  {
    "text": "class in Java it's not strictly the same but for folks who are used to thinking",
    "start": "2216240",
    "end": "2222839"
  },
  {
    "text": "of methods if you have a method quote unquote you know again air quotes if you have a method air quotes on your list",
    "start": "2222839",
    "end": "2230560"
  },
  {
    "text": "struct and go well it makes more sense to do it that way rather than to do it",
    "start": "2230560",
    "end": "2236839"
  },
  {
    "text": "the more kind of pure again air quotes pure FP way which would be a totally",
    "start": "2236839",
    "end": "2243119"
  },
  {
    "text": "separate function that takes in a certain type and return turns a new type and so again that's not going to for",
    "start": "2243119",
    "end": "2250680"
  },
  {
    "text": "some of the things that I've talked about today that's not going to limit or reduce or eliminate correctness at all",
    "start": "2250680",
    "end": "2257319"
  },
  {
    "text": "MH but there are some more advanced things that could be",
    "start": "2257319",
    "end": "2262800"
  },
  {
    "text": "unlocked by having something called Hier kinded types Ino maybe this is my",
    "start": "2262800",
    "end": "2268560"
  },
  {
    "text": "unpopular opinion right now right is just to say um Hier kind of types make",
    "start": "2268560",
    "end": "2275359"
  },
  {
    "text": "the and I was just talking about my manager about this not two hours ago you know higher kinded types add a ton of",
    "start": "2275359",
    "end": "2282520"
  },
  {
    "text": "complexity to a compiler and a type Checker inside of the compiler but you know they do offer basically something",
    "start": "2282520",
    "end": "2290760"
  },
  {
    "text": "called a type Constructor which is a type that depends on another type right and if you can do that I'll leave it as",
    "start": "2290760",
    "end": "2296960"
  },
  {
    "text": "an exercise to the reader or listener or Watcher what kinds of things could you",
    "start": "2296960",
    "end": "2302200"
  },
  {
    "text": "do with that take me a while to get into it so I'm not going to go there now but if you had that right now assuming it",
    "start": "2302200",
    "end": "2310920"
  },
  {
    "text": "was correct in the compiler you can start to do some very Advanced things",
    "start": "2310920",
    "end": "2317079"
  },
  {
    "text": "but the only thing that I'll say is whenever I've seen that feature in a language or not in a language then",
    "start": "2317079",
    "end": "2324000"
  },
  {
    "text": "introduced into the language at that point it starts to become what you called sort of a functional language",
    "start": "2324000",
    "end": "2331079"
  },
  {
    "text": "right because getting to that level of sophistication in the type system",
    "start": "2331079",
    "end": "2337400"
  },
  {
    "text": "often means that there are a bunch of people already there who have been demanding it and those people are the",
    "start": "2337400",
    "end": "2344400"
  },
  {
    "text": "majority and those people write very heavily function oriented code so really",
    "start": "2344400",
    "end": "2350079"
  },
  {
    "text": "I'm going to just limit it to the type parameters on methods thing because that thing is not very controversial but",
    "start": "2350079",
    "end": "2356119"
  },
  {
    "text": "higher kinded types or higher order types are a very interesting and cool",
    "start": "2356119",
    "end": "2361280"
  },
  {
    "text": "thing that I really do wish was in go cuz it would enable some very slick FP",
    "start": "2361280",
    "end": "2366760"
  },
  {
    "text": "things yeah that doesn't sound controversial to me I I could see that okay some might maybe some people will",
    "start": "2366760",
    "end": "2374000"
  },
  {
    "text": "[Music]",
    "start": "2375520",
    "end": "2382440"
  },
  {
    "text": "think we are go to ship in three 2 1 I'm",
    "start": "2382440",
    "end": "2387760"
  },
  {
    "text": "Garo host of shipit a show with a weekly episodes about getting your best ideas",
    "start": "2387760",
    "end": "2392800"
  },
  {
    "text": "into the world and seeing what happens we talk about code Ops infrastructure and the people that make it happen like",
    "start": "2392800",
    "end": "2399800"
  },
  {
    "text": "charity Majors from honeycomb we act like great engineers make great teams when it's exactly the opposite in fact",
    "start": "2399800",
    "end": "2406880"
  },
  {
    "text": "it is great teams that make great engineers and they Farley when the founders of continuous delivery start",
    "start": "2406880",
    "end": "2414440"
  },
  {
    "text": "off assuming that we're wrong rather than assuming that we're right test our ideas try and falsify our ideas those",
    "start": "2414440",
    "end": "2420079"
  },
  {
    "text": "are better ways of doing work and it doesn't really matter what work it is that you're doing that stuff just works",
    "start": "2420079",
    "end": "2425720"
  },
  {
    "text": "better we even experiment on our own open- source podcasting platform so that",
    "start": "2425720",
    "end": "2431040"
  },
  {
    "text": "you can see how we Implement specific tools and services within change.com what works and what fails it's like",
    "start": "2431040",
    "end": "2438319"
  },
  {
    "text": "there's a brand new hammer and we grab hold of it and everyone gathers around we put our hand out and we we strike it",
    "start": "2438319",
    "end": "2444880"
  },
  {
    "text": "right on our thumb and then everybody knows that hammer really hurts when you strike it on your thumb I'm glad those",
    "start": "2444880",
    "end": "2450839"
  },
  {
    "text": "guys did it I've learned something instead yeah I think that's a very interesting perspective but I I don't",
    "start": "2450839",
    "end": "2457079"
  },
  {
    "text": "see that way okay it's an amazing analogy but I'm not sure that applies here listen to an episode that seems",
    "start": "2457079",
    "end": "2463160"
  },
  {
    "text": "interesting or helpful and if you like it subscribe today we'd love to have you with [Music]",
    "start": "2463160",
    "end": "2470960"
  },
  {
    "text": "us okay so before we transition into unpopular opinions maybe I want one of those controversial",
    "start": "2470960",
    "end": "2477800"
  },
  {
    "text": "ideas okay all right let's get it going I'm not going to give one that talks",
    "start": "2477800",
    "end": "2483640"
  },
  {
    "text": "about higher kind of types cuz it's been a while first of all so I don't think I would do it justice or maybe even get",
    "start": "2483640",
    "end": "2490040"
  },
  {
    "text": "some parts incorrect but also it would take me a while but I I want to mention",
    "start": "2490040",
    "end": "2495599"
  },
  {
    "text": "one pattern from FP that I think is really great and it's not that hard to",
    "start": "2495599",
    "end": "2501400"
  },
  {
    "text": "do yourself in your code I also don't think it's too hard to imagine how it would work in a code base it's called",
    "start": "2501400",
    "end": "2508520"
  },
  {
    "text": "the lens so it's a maybe sounds like an intimidating thing to some people it",
    "start": "2508520",
    "end": "2513800"
  },
  {
    "text": "certainly did to me the lens is Essen entially a tuple of two functions one",
    "start": "2513800",
    "end": "2519240"
  },
  {
    "text": "function is a getter for some data and then the other function is the setter for some probably the same type of data",
    "start": "2519240",
    "end": "2526760"
  },
  {
    "text": "but you can have separate things too you can have a getter for one piece of data and a Setter for another piece of data",
    "start": "2526760",
    "end": "2532440"
  },
  {
    "text": "in the same tupple so usually it's the getter first in the tupple and then the setter second in the tupple now the the",
    "start": "2532440",
    "end": "2539000"
  },
  {
    "text": "first function takes no parameters and Returns the result the data it might",
    "start": "2539000",
    "end": "2544359"
  },
  {
    "text": "take one parameter if the data is multi-dimensional like a map and you know you want it to specify a key and",
    "start": "2544359",
    "end": "2551240"
  },
  {
    "text": "that's up to you that's part of the design pattern and then the setter potentially takes in the dimension of",
    "start": "2551240",
    "end": "2557280"
  },
  {
    "text": "the data again like the key of the map and then it also takes in the data that you want to set into that place right so",
    "start": "2557280",
    "end": "2565079"
  },
  {
    "text": "it might be the value of a map if we're going to use the um the map like the example of a map right and then it",
    "start": "2565079",
    "end": "2572319"
  },
  {
    "text": "returns nothing these things can alter alternatively return an error if this is like doing something over the network or",
    "start": "2572319",
    "end": "2578599"
  },
  {
    "text": "something that might fail but traditionally they're not right so if you could kind of imagine how these",
    "start": "2578599",
    "end": "2585760"
  },
  {
    "text": "functions would be created they would probably be closures they would close",
    "start": "2585760",
    "end": "2591359"
  },
  {
    "text": "over your data they would take some parameter in the get let's take the get case for example they would take the",
    "start": "2591359",
    "end": "2598000"
  },
  {
    "text": "parameter for the thing to get and then they would return the value of it same thing with the set it would close over",
    "start": "2598000",
    "end": "2603920"
  },
  {
    "text": "the data and then do its thing it's a fancy term called a lens but it's a",
    "start": "2603920",
    "end": "2609440"
  },
  {
    "text": "fairly basic foundational thing right and that is a common theme in FP",
    "start": "2609440",
    "end": "2618040"
  },
  {
    "text": "actually right so I called this the lens and it is in Wikipedia and it's in the textbook and everything but it just",
    "start": "2618040",
    "end": "2624599"
  },
  {
    "text": "boils down to functions like most things in FP do they just boil down to one or",
    "start": "2624599",
    "end": "2630280"
  },
  {
    "text": "more functions maybe combined together in some creative way or maybe one function you know applied across a data",
    "start": "2630280",
    "end": "2636800"
  },
  {
    "text": "structure in some other way so you know I would challenge everyone listening to",
    "start": "2636800",
    "end": "2642359"
  },
  {
    "text": "just give it some thought can that reduce code somewhere in your code base",
    "start": "2642359",
    "end": "2647960"
  },
  {
    "text": "you know if you have a bunch of Getters can you get rid of those Getters and",
    "start": "2647960",
    "end": "2653000"
  },
  {
    "text": "just replace them with a you know a closure the lens that's a very interesting one to me because it is",
    "start": "2653000",
    "end": "2660440"
  },
  {
    "text": "exceptionally simple I'll put it a different way the return on investment is very high right it's very simple but",
    "start": "2660440",
    "end": "2667599"
  },
  {
    "text": "it tends to be applicable and useful in a lot of places in a code base very cool I'd love to see that in action like in",
    "start": "2667599",
    "end": "2674359"
  },
  {
    "text": "Practical use the way you explain it it sounds great I'm like yeah that that sounds like something i' be up for there",
    "start": "2674359",
    "end": "2680079"
  },
  {
    "text": "you go yeah yeah perhaps we need sort of a a blog post from you when you're done with school or something yeah yeah so",
    "start": "2680079",
    "end": "2688079"
  },
  {
    "text": "like feel mind me asking like what did you go back to school for it well I went back to school for computer science I",
    "start": "2688079",
    "end": "2693680"
  },
  {
    "text": "got an undergraduate computer science degree in 2008 you know I'm not that old",
    "start": "2693680",
    "end": "2699599"
  },
  {
    "text": "but I feel older than I am I guess you can do the math at home see it figure out how old I'm likely to be and so then",
    "start": "2699599",
    "end": "2706440"
  },
  {
    "text": "I've been in Industry ever since focused on industry things right and they all",
    "start": "2706440",
    "end": "2711920"
  },
  {
    "text": "tend to be very practical they all tend to be you know single goal oriented and",
    "start": "2711920",
    "end": "2718520"
  },
  {
    "text": "all of the learning that I've done has been very focused on a goal rather than",
    "start": "2718520",
    "end": "2723599"
  },
  {
    "text": "broader so I went back to get a masters to get that breadth again because I've",
    "start": "2723599",
    "end": "2730119"
  },
  {
    "text": "kind of missed that right now I kept using the squl and the database examples because right now I'm taking a course in",
    "start": "2730119",
    "end": "2736680"
  },
  {
    "text": "databases so that there you go easy extension there",
    "start": "2736680",
    "end": "2742359"
  },
  {
    "text": "but the thing that I'm planning to specialize in now is formal methods because I love this stuff like",
    "start": "2742359",
    "end": "2748760"
  },
  {
    "text": "programming language Theory and things like that I really do enjoy it a lot and",
    "start": "2748760",
    "end": "2754559"
  },
  {
    "text": "the formal method special ization happens to have quite a bit of language Theory stuff in it so look forward to",
    "start": "2754559",
    "end": "2761920"
  },
  {
    "text": "that yeah sounds like you you're in your bread and butter kind of space right now that's nice nice nice yeah yeah and not",
    "start": "2761920",
    "end": "2768559"
  },
  {
    "text": "that you mentioned it interesting enough like I think we tend to go to school to get a specialization to narrow down on a",
    "start": "2768559",
    "end": "2774920"
  },
  {
    "text": "very particular set of skills even though when we're going we might not know that's what we're doing but we're going to learn how to do X right and",
    "start": "2774920",
    "end": "2781920"
  },
  {
    "text": "then we come out and we get a job to do X right it's very rarely do you go back",
    "start": "2781920",
    "end": "2787079"
  },
  {
    "text": "just for the sake of breath right just to get basically to to go find out what you don't know about right and sort of",
    "start": "2787079",
    "end": "2793839"
  },
  {
    "text": "see how you can sort of apply it to your already existing right set of knowledge that you required in Industry so yeah I",
    "start": "2793839",
    "end": "2799760"
  },
  {
    "text": "commend you for that that's uh that's very cool well I'm very very lucky and privileged to be able to do that at this",
    "start": "2799760",
    "end": "2805599"
  },
  {
    "text": "point right cuz I think probably all of us remember in undergrad we probably",
    "start": "2805599",
    "end": "2812000"
  },
  {
    "text": "just went so we could get to whatever our next step was most of us probably was a job right maybe some of us was",
    "start": "2812000",
    "end": "2818559"
  },
  {
    "text": "grad school but most of us was a job it certainly was me right I was laser focused on getting done so I could get",
    "start": "2818559",
    "end": "2827040"
  },
  {
    "text": "paid yeah but these days it's different right I have a job and you know I'm able",
    "start": "2827040",
    "end": "2832119"
  },
  {
    "text": "to continue working in this job while I do this part-time program and so I'm I",
    "start": "2832119",
    "end": "2838200"
  },
  {
    "text": "fully acknowledge and I try to remind myself daily that I'm very lucky to be",
    "start": "2838200",
    "end": "2843400"
  },
  {
    "text": "able to do something like this just because I want to rather than having to",
    "start": "2843400",
    "end": "2848760"
  },
  {
    "text": "do something pretty cool pretty cool well Aaron unless you have another like",
    "start": "2848760",
    "end": "2854319"
  },
  {
    "text": "more like unpopular opinion for me although I don't think anything you said here is unpopular man I think maybe it's just the way you talk and put it but I",
    "start": "2854319",
    "end": "2861559"
  },
  {
    "text": "don't think any of it was unpopular diplomacy yeah yeah yeah well I do have an unpopular opinion okay this one will",
    "start": "2861559",
    "end": "2868920"
  },
  {
    "text": "be unpopular okay wait then I got to play the song if that's the case okay okay let's do",
    "start": "2868920",
    "end": "2874720"
  },
  {
    "text": "it [Music] un I actually think you should probably",
    "start": "2874720",
    "end": "2883280"
  },
  {
    "text": "leave popular [Music]",
    "start": "2884200",
    "end": "2891240"
  },
  {
    "text": "opinion boom lay it on us all right well I've been doing a bunch of rust lately",
    "start": "2891240",
    "end": "2897319"
  },
  {
    "text": "some like very lowlevel stuff dealing with virtual machines and I believe now that I've",
    "start": "2897319",
    "end": "2904119"
  },
  {
    "text": "used rust long enough I believe the type system in Rust is",
    "start": "2904119",
    "end": "2909280"
  },
  {
    "text": "more complete and leads to more concise",
    "start": "2909280",
    "end": "2914359"
  },
  {
    "text": "uh and easier to write and read programs than go okay then yeah so the go type",
    "start": "2914359",
    "end": "2920680"
  },
  {
    "text": "system has uh has some work to do okay okay I don't mean to Fan the Flames of",
    "start": "2920680",
    "end": "2927520"
  },
  {
    "text": "the go rust thing but I'm sure I just oh too late buddy I'm just",
    "start": "2927520",
    "end": "2932799"
  },
  {
    "text": "done the flame War it's been zero days now since the flame",
    "start": "2932799",
    "end": "2939440"
  },
  {
    "text": "Wars I know I know I talked a lot about type system",
    "start": "2939440",
    "end": "2945400"
  },
  {
    "text": "things today right and it's not that Russ lets you do all those things it certainly doesn't but the type system in",
    "start": "2945400",
    "end": "2953760"
  },
  {
    "text": "Rust is it has more features than the type system in go it certainly allows",
    "start": "2953760",
    "end": "2960240"
  },
  {
    "text": "for some programs that take forever to compile and are hard to read so that's the pro and cons thing here but from my",
    "start": "2960240",
    "end": "2968000"
  },
  {
    "text": "experiences so far it lets you write more expressive code with fewer lines",
    "start": "2968000",
    "end": "2975040"
  },
  {
    "text": "than the go equivalent okay well we shall put that to the test yeah the",
    "start": "2975040",
    "end": "2981200"
  },
  {
    "text": "audience they will tell us whether they agree with you or disagree with you and come find you in the night or something",
    "start": "2981200",
    "end": "2987240"
  },
  {
    "text": "yeah yeah you all know my uh Twitter so you can send me hate mail I still love",
    "start": "2987240",
    "end": "2993720"
  },
  {
    "text": "go don't go me wrong I can I've been R and go for what something like 10 years or something and uh there's no language",
    "start": "2993720",
    "end": "3001119"
  },
  {
    "text": "I can build something more quickly in and I'm just getting started with Russ so this is my initial opinion though mhm",
    "start": "3001119",
    "end": "3007480"
  },
  {
    "text": "mhm hey you can love more than one language that's cool oh yeah as long as it's going go that's",
    "start": "3007480",
    "end": "3013760"
  },
  {
    "text": "cool love anything you want as long as it's go I love that yeah awesome awesome so",
    "start": "3013760",
    "end": "3021680"
  },
  {
    "text": "thank you so much Aaron for coming back on the show and talking about you know functional program ining hopefully we",
    "start": "3021680",
    "end": "3027119"
  },
  {
    "text": "hit the few Nails on the head for folks that have been curious about functional programming and how it's done how it's",
    "start": "3027119",
    "end": "3033240"
  },
  {
    "text": "been done and what generics enabled for us moving forward this was a fun",
    "start": "3033240",
    "end": "3038440"
  },
  {
    "text": "discussion thanks again Aaron for coming on the show thank you so much for having me",
    "start": "3038440",
    "end": "3043960"
  },
  {
    "text": "joy all right that is go time for this week thanks for listening if you're FP",
    "start": "3046480",
    "end": "3051680"
  },
  {
    "text": "curious and want some more like this we had Eric Norman on JS party Wild back talking about it Eric is one of the best",
    "start": "3051680",
    "end": "3057480"
  },
  {
    "text": "people I've heard explain FP principles and why they are worth putting to use in your code base take a listen have you",
    "start": "3057480",
    "end": "3063079"
  },
  {
    "text": "ever seen the original show the get smart like the intro where he has like 30 different doors he walks through and",
    "start": "3063079",
    "end": "3070160"
  },
  {
    "text": "they yeah and then he holds up his his shoe to his to his ear and talks into yeah he has a phone he has a cell phone",
    "start": "3070160",
    "end": "3076119"
  },
  {
    "text": "in his shoe yeah but he uh you go through all these doors right and it get deeper and deeper into the sanctum of",
    "start": "3076119",
    "end": "3083119"
  },
  {
    "text": "functional programming well that first door is just recognizing the difference",
    "start": "3083119",
    "end": "3088520"
  },
  {
    "text": "between what I call actions calculations and data okay calculations are often",
    "start": "3088520",
    "end": "3094920"
  },
  {
    "text": "known as pure functions there the stuff you can do in your language that always gives you the same answer no matter how",
    "start": "3094920",
    "end": "3102000"
  },
  {
    "text": "many times you run them or when you run them okay so this is like addition right",
    "start": "3102000",
    "end": "3108119"
  },
  {
    "text": "addition it's always going to 2 plus 2 is always four doesn't matter how many times you run that but then there's",
    "start": "3108119",
    "end": "3114119"
  },
  {
    "text": "actions that do depend on when you run them or how many times you run them so",
    "start": "3114119",
    "end": "3119440"
  },
  {
    "text": "reading from a mutable variable if you read after someone has written to it",
    "start": "3119440",
    "end": "3125280"
  },
  {
    "text": "you're going to get a different answer than reading before the other you know other part of the code writes to it",
    "start": "3125280",
    "end": "3132119"
  },
  {
    "text": "likewise sending an email or writing something to disk these are all actions",
    "start": "3132119",
    "end": "3137280"
  },
  {
    "text": "because you know sending the email zero times is different from sending it one time or 10 times and so making this",
    "start": "3137280",
    "end": "3144680"
  },
  {
    "text": "distinction between actions that depend on time cuz they're hard to deal with and",
    "start": "3144680",
    "end": "3152440"
  },
  {
    "text": "calculations is like the first gateway into functional programming oh and data",
    "start": "3152440",
    "end": "3158480"
  },
  {
    "text": "is easy data is just you know the stuff that doesn't do anything it's just inert",
    "start": "3158480",
    "end": "3163680"
  },
  {
    "text": "you know the strings and numbers and and hashmaps and lists and stuff like that",
    "start": "3163680",
    "end": "3169960"
  },
  {
    "text": "that's episode 163 of JS party if you want to hear more find it at JSP party.",
    "start": "3169960",
    "end": "3175920"
  },
  {
    "text": "m163 or search for it in your podcast app the title of the episode is JS is an",
    "start": "3175920",
    "end": "3181040"
  },
  {
    "text": "occasionally functional language thanks once again to fastly and fly for partnering with us please check out what",
    "start": "3181040",
    "end": "3186839"
  },
  {
    "text": "they're up to they support everything we do and of course thank you to our beat freaking residents break master cylinder",
    "start": "3186839",
    "end": "3192200"
  },
  {
    "text": "our beats are dope because BMC makes dope beats it's as simple as that that's all I have for you but we'll talk to you",
    "start": "3192200",
    "end": "3198839"
  },
  {
    "text": "next time on go",
    "start": "3198839",
    "end": "3202040"
  },
  {
    "text": "time",
    "start": "3204160",
    "end": "3207160"
  },
  {
    "text": "k",
    "start": "3210079",
    "end": "3213079"
  }
]