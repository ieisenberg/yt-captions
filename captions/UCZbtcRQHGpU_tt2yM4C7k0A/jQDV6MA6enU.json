[
  {
    "text": "[Music] let's do it it's go time welcome to go",
    "start": "7460",
    "end": "13040"
  },
  {
    "text": "time your source for diverse discussions from all around the go Community big",
    "start": "13040",
    "end": "18880"
  },
  {
    "text": "thanks to our partners for helping us bring you awesome pods each and every week fast.com fly.io and types sense.org",
    "start": "18880",
    "end": "28960"
  },
  {
    "text": "okay here we [Music]",
    "start": "28960",
    "end": "36520"
  },
  {
    "text": "go what's up friends I'm here with Jeremy Tanner Devo at tail scale and I've been using tail scale for the past",
    "start": "36520",
    "end": "43079"
  },
  {
    "text": "I want to say the last year and I consider critical home lab infrastructure for me as you may know",
    "start": "43079",
    "end": "49039"
  },
  {
    "text": "I'm a home labber so that means I take pride in a solid home network Wi-Fi services that make the home run home",
    "start": "49039",
    "end": "55440"
  },
  {
    "text": "assistant for automation lighting and of course I run py hole to block ads at the",
    "start": "55440",
    "end": "60640"
  },
  {
    "text": "network level and to protect my family from ad tracking and pyul has this web",
    "start": "60640",
    "end": "65760"
  },
  {
    "text": "UI that you can access from the land but for a while there I just didn't have access to this service or other services",
    "start": "65760",
    "end": "72119"
  },
  {
    "text": "like painer or just anything else that had a web UI or something I would access via IP on the local area network but",
    "start": "72119",
    "end": "79360"
  },
  {
    "text": "Jeremy tell me about a world where via tail scale you can access py hole painer or any of these other services you might",
    "start": "79360",
    "end": "86159"
  },
  {
    "text": "run in your home lab and access it externally from the local area network",
    "start": "86159",
    "end": "91280"
  },
  {
    "text": "yeah you hit it when you said anything anything and from anywhere and so py hole being a a DNS blackhole um if you",
    "start": "91280",
    "end": "99399"
  },
  {
    "text": "notice the difference between the comfy experience that you had at home and when you were uh out of your house whether it",
    "start": "99399",
    "end": "106119"
  },
  {
    "text": "was uh for work a coffee shop or even on your mobile devices the um being able to",
    "start": "106119",
    "end": "112920"
  },
  {
    "text": "uh set up um tail scale on your mobile device and uh have access to the um same",
    "start": "112920",
    "end": "119479"
  },
  {
    "text": "uh P hole and filtering rules that you do at home uh wherever you have a wherever you have an internet connection",
    "start": "119479",
    "end": "125680"
  },
  {
    "text": "is a thing same thing when talking about streaming instead of exposing your um exposing your network storage to the",
    "start": "125680",
    "end": "131760"
  },
  {
    "text": "internet and getting that Ransom weed keeping that on your private network but extending the private Network to any",
    "start": "131760",
    "end": "137280"
  },
  {
    "text": "device that can run the client and so having um anything that can run the client includes your steam deck that's",
    "start": "137280",
    "end": "142680"
  },
  {
    "text": "just a Linux box with uh the controllers grafted onto the sides of it and so if you're somewhere that has an internet",
    "start": "142680",
    "end": "148560"
  },
  {
    "text": "connection and wants to watch some of your video plug it up to a large TV and if you're in a hotel room use that as",
    "start": "148560",
    "end": "154239"
  },
  {
    "text": "your uh as your media center that's playing the uh the shows that you're trying to catch up on from home instead",
    "start": "154239",
    "end": "159640"
  },
  {
    "text": "of whatever Hotel TV has on it instead of um buying a service or paying a you",
    "start": "159640",
    "end": "165560"
  },
  {
    "text": "know small monthly subscription you're like you have you have Computing storage at home it's just an easy way to get",
    "start": "165560",
    "end": "171640"
  },
  {
    "text": "back to those instead of um usually inventing a bunch of things that you'd love to do but those sorts of things",
    "start": "171640",
    "end": "177760"
  },
  {
    "text": "become accessible to you on your phone while you're outside the house instead of something that's neat to use but then",
    "start": "177760",
    "end": "184280"
  },
  {
    "text": "you miss while you're away yeah for sure you know I run Plex so I'm uh in big agreement with that of course but just",
    "start": "184280",
    "end": "190519"
  },
  {
    "text": "being able to do what you can do with tail scale is so cool without having to learn all the VPN things it's just such",
    "start": "190519",
    "end": "196640"
  },
  {
    "text": "an easy tool to use Easy tool to install on anything really Linux Windows Mac so",
    "start": "196640",
    "end": "202519"
  },
  {
    "text": "easy to use big big fan of tail scale and for my home lab users out there you",
    "start": "202519",
    "end": "207720"
  },
  {
    "text": "can totally use tail scale 100% for free you get three users up to 100 devices",
    "start": "207720",
    "end": "213879"
  },
  {
    "text": "which is like way more devices than I think I would ever need to use Tails go on the free forever tier is amazing and",
    "start": "213879",
    "end": "221080"
  },
  {
    "text": "a great place to start and especially to use it for your home lab needs alone check them out at changel law.com",
    "start": "221080",
    "end": "227560"
  },
  {
    "text": "tailscale the free forever tier is waiting for you to try it out again changel law.com slil scale and make sure",
    "start": "227560",
    "end": "235599"
  },
  {
    "text": "you tell them your friends at change lenu",
    "start": "235599",
    "end": "241160"
  },
  {
    "text": "[Music]",
    "start": "241160",
    "end": "248949"
  },
  {
    "text": "[Music] [Applause] Hello friends and uh guests co-hosts",
    "start": "251100",
    "end": "258720"
  },
  {
    "text": "yeah this is your friendly neighborhood go developer and uh co-host Johnny it's",
    "start": "258720",
    "end": "264520"
  },
  {
    "text": "been a while I've been missing an action for a little bit but you know with the the release of go one 1 I thought it was",
    "start": "264520",
    "end": "270880"
  },
  {
    "text": "a good time to sort of swing back you know um by the old farm and see how everybody's doing and uh yeah and and",
    "start": "270880",
    "end": "278479"
  },
  {
    "text": "invite our good old correspondent You Know Carl Johnson to come back and uh",
    "start": "278479",
    "end": "283680"
  },
  {
    "text": "talk to us about what's new as he usually does for virtually heavy release of go since I don't know the last four",
    "start": "283680",
    "end": "289080"
  },
  {
    "text": "or five or something I think this is a habit now girl you're now forever the the corespondent the the the new go",
    "start": "289080",
    "end": "295280"
  },
  {
    "text": "release um correspondent so welcome Carl thank you I'm here with the break news",
    "start": "295280",
    "end": "300320"
  },
  {
    "text": "about the new releases and I get to come back once every six",
    "start": "300320",
    "end": "305919"
  },
  {
    "text": "months nice nice also joining me for this um exclusive you know recording is",
    "start": "305919",
    "end": "313840"
  },
  {
    "text": "uh Chris Brenda how you doing Chris I'm doing all right nice day to record slightly overcast but still pretty nice",
    "start": "313840",
    "end": "320000"
  },
  {
    "text": "out here too here too um yeah the whole Forest burning whatever you call it you",
    "start": "320000",
    "end": "325520"
  },
  {
    "text": "know that whole smoke thing coming from everywhere seems like the world's on fire honestly um say there was something",
    "start": "325520",
    "end": "331600"
  },
  {
    "text": "going on these days yeah literally on fire these days quite literally um but",
    "start": "331600",
    "end": "337400"
  },
  {
    "text": "we're not here to talk about sad things we're here to talk about happy things you know go has a new release you know",
    "start": "337400",
    "end": "344720"
  },
  {
    "text": "as we do every six months in the go Community here and uh yeah we here to talk about go1 121 which honestly seems",
    "start": "344720",
    "end": "352280"
  },
  {
    "text": "like a pretty big deal to me like I went through and read the release notes and I was like wow they're like using generics",
    "start": "352280",
    "end": "358600"
  },
  {
    "text": "for real for real now now in the standard Library there's like uh tool improvements there's language changes",
    "start": "358600",
    "end": "365199"
  },
  {
    "text": "there's new built-ins there's a whole lot of stuff um so where to start where to start Carl what is the most important",
    "start": "365199",
    "end": "373039"
  },
  {
    "text": "part of this release for you for me I would say this is a very generic release um here we",
    "start": "373039",
    "end": "379240"
  },
  {
    "text": "go probably in the long term actually there'll be other things that are more important in a way because the generic",
    "start": "379240",
    "end": "385880"
  },
  {
    "text": "stuff kind of could have been done anytime but on the other and sort of day-to-day it does it does make a",
    "start": "385880",
    "end": "391680"
  },
  {
    "text": "difference that the generic stuff has come in so for people who have been paying attention right uh go generics",
    "start": "391680",
    "end": "398720"
  },
  {
    "text": "were added in go 1.18 which is now about a year and a half behind us so it's been",
    "start": "398720",
    "end": "405680"
  },
  {
    "text": "in there for a little while when they were working on adding generics to go at",
    "start": "405680",
    "end": "411039"
  },
  {
    "text": "one point it was sort of planned that they would just release all these generic packages alongside generics so",
    "start": "411039",
    "end": "417000"
  },
  {
    "text": "that you know all at once it would come out and you could could do all these things to your slices and maps and stuff",
    "start": "417000",
    "end": "422400"
  },
  {
    "text": "like that but shortly before the release there was a decision that like whoa wait a minute let's try to get some real",
    "start": "422400",
    "end": "428440"
  },
  {
    "text": "world experience before we just release some packages to the standard library because once we add it to the standard",
    "start": "428440",
    "end": "434840"
  },
  {
    "text": "Library we're really stuck with it and we can't change it anymore because of the go1 guarantee you know you can add",
    "start": "434840",
    "end": "441120"
  },
  {
    "text": "new functions but you can't take the old ones out pretty much there permanently so what they did instead was they",
    "start": "441120",
    "end": "447000"
  },
  {
    "text": "released an experimental package it was a golang.org",
    "start": "447000",
    "end": "452440"
  },
  {
    "text": "xexex and so you could go there and download these generic packages for maps",
    "start": "452440",
    "end": "457639"
  },
  {
    "text": "and slices uh but finally with go 1.21 it's been added to the language",
    "start": "457639",
    "end": "463199"
  },
  {
    "text": "officially um so you don't have to go import any you know third party packages",
    "start": "463199",
    "end": "468280"
  },
  {
    "text": "or download anything it just comes along with the language automatically and I find it's very convenient you know",
    "start": "468280",
    "end": "475280"
  },
  {
    "text": "before generics uh definitely like day-to-day it wasn't like too much",
    "start": "475280",
    "end": "480599"
  },
  {
    "text": "trouble like you didn't run into it very often but now that it is there uh it",
    "start": "480599",
    "end": "486120"
  },
  {
    "text": "does sort of come up where it's like oh yeah it would be really convenient to just look at this slice and see if anything in the slice matches whatever",
    "start": "486120",
    "end": "492879"
  },
  {
    "text": "it is I'm searching for real quick and not have to write a whole for Loop just for this or like have a utility folder",
    "start": "492879",
    "end": "501039"
  },
  {
    "text": "that just has this defined for whatever my type is you know so yeah it just it",
    "start": "501039",
    "end": "506919"
  },
  {
    "text": "makes life a little bit more convenient just to have this stuff built into the language now so that's definitely something I'm pretty happy about I was",
    "start": "506919",
    "end": "513919"
  },
  {
    "text": "very happy especially about the slices um package now leveraging the generic",
    "start": "513919",
    "end": "519560"
  },
  {
    "text": "stuff as we all kind of knew it would eventually right um but the implementation is smooth I mean you're",
    "start": "519560",
    "end": "525760"
  },
  {
    "text": "going to be using the functionality and not even realize you're using generics which I think for me is the biggest value right it's like the language",
    "start": "525760",
    "end": "532600"
  },
  {
    "text": "itself how you write goes not changing you're just simply calling a function and it does what's expected and it l the",
    "start": "532600",
    "end": "539480"
  },
  {
    "text": "capability under the hood right so to me the addition like slices now is akin to",
    "start": "539480",
    "end": "545240"
  },
  {
    "text": "the package now is akin to sort of the slicing and dicing I do with the strengths package right I'm always",
    "start": "545240",
    "end": "550320"
  },
  {
    "text": "reaching out for it to do you know some slicing and dicing finding things at certain positions and this and that whatever it is now I don't I have fewer",
    "start": "550320",
    "end": "557560"
  },
  {
    "text": "Loops to write you know um if I'm trying to find something in a in a in a slice or if I'm trying to compact a slice",
    "start": "557560",
    "end": "563519"
  },
  {
    "text": "which actually you know as pleas surpris it was it a method added to the slices package you can yeah this of compact",
    "start": "563519",
    "end": "569440"
  },
  {
    "text": "sort of removing duplicate um items in there um I think there's some specifics around that but it it's got a lot of",
    "start": "569440",
    "end": "576480"
  },
  {
    "text": "utility sort of U um functions that that are in there that are like yes this is",
    "start": "576480",
    "end": "582040"
  },
  {
    "text": "exactly what I was waiting on right could have they written these things with our generics you know back in the",
    "start": "582040",
    "end": "587279"
  },
  {
    "text": "day or whatever it is yes you know people just wrote you know their own sort of utility packages and things to",
    "start": "587279",
    "end": "592920"
  },
  {
    "text": "do that and there were plenty before before this but now I think you're going to see a reduction um for with these",
    "start": "592920",
    "end": "599440"
  },
  {
    "text": "kinds of utility packages out there which I think is a good thing um I think one of the things that we're definitely",
    "start": "599440",
    "end": "604480"
  },
  {
    "text": "going to be talking about is uh the the also part of the the Cent libraries the",
    "start": "604480",
    "end": "609760"
  },
  {
    "text": "the slog the S log however you want to pronounce it um sort of a expansion of",
    "start": "609760",
    "end": "615120"
  },
  {
    "text": "the log package personally I think like I'm happy that it's in there but uh my",
    "start": "615120",
    "end": "620240"
  },
  {
    "text": "immediate reaction is like I have to give up log R Us like like what am I going to miss",
    "start": "620240",
    "end": "625880"
  },
  {
    "text": "what am I going like you know I had that this sort of immediate reaction cuz I've using Lars for for quite a while and other people have their own sort of",
    "start": "625880",
    "end": "631959"
  },
  {
    "text": "favorite packages too there zap there's there's a few there's a few out there that people have gotten used to but now",
    "start": "631959",
    "end": "637600"
  },
  {
    "text": "that is want to understand a library proper right it's like okay now like I I",
    "start": "637600",
    "end": "643240"
  },
  {
    "text": "like the fact that I have to bring a third party package into my world now right Baron like I I absolutely love",
    "start": "643240",
    "end": "649560"
  },
  {
    "text": "that right but it's that means it's going to take you know getting to know a new a new API a new sort of way of doing",
    "start": "649560",
    "end": "655800"
  },
  {
    "text": "things a little bit the output may not change but it's a you're you're going to get to learn how",
    "start": "655800",
    "end": "661279"
  },
  {
    "text": "to use some some new tooling that perhaps you know you you've sort of been accustomed to using different things",
    "start": "661279",
    "end": "667240"
  },
  {
    "text": "what do you think about the obviously we didn't touch on on some of the built-ins we're going to come back to the built-ins like the min max clear we're",
    "start": "667240",
    "end": "672920"
  },
  {
    "text": "going to come back to those but I I want your opinion on the new logging capability okay you want to go to",
    "start": "672920",
    "end": "678800"
  },
  {
    "text": "logging yes let's go to logging and then we we can always come back to logging I mean logging do you always eat your",
    "start": "678800",
    "end": "685320"
  },
  {
    "text": "dessert before you eat your uh dinner you know I'm I'm one of those people when I was growing up as a kid if my mom",
    "start": "685320",
    "end": "692519"
  },
  {
    "text": "put like food on a plate and said you're not allowed to eat your meat until you've had your vegetables and",
    "start": "692519",
    "end": "699040"
  },
  {
    "text": "things I've been trying to you know now that I'm a grown man I don't have to do that anymore I eat my meat first so this",
    "start": "699040",
    "end": "706200"
  },
  {
    "text": "is what we're doing we're going to eat this meat first let's talk about the logging and then we're going to come back to the other stuff okay we could we",
    "start": "706200",
    "end": "711600"
  },
  {
    "text": "could switch over to to slog so SLO is a new package so go maybe just for",
    "start": "711600",
    "end": "717519"
  },
  {
    "text": "background has always had a package called log right uh and it's just a very simple logger it really I think all it",
    "start": "717519",
    "end": "724320"
  },
  {
    "text": "does is like add the timestamp to your logs I guess it can also add the file",
    "start": "724320",
    "end": "730399"
  },
  {
    "text": "like the file and the line number of where the log was produced it can optionally add that but yeah it's just",
    "start": "730399",
    "end": "735839"
  },
  {
    "text": "super basic it didn't have any like levels like the only level was fatal uh",
    "start": "735839",
    "end": "741120"
  },
  {
    "text": "so if you if you needed to just um make a quick CLI where when something goes wrong you just want to print out an",
    "start": "741120",
    "end": "747199"
  },
  {
    "text": "error message you could do log fatal and that would you know kill your process and print out a little unhappy message",
    "start": "747199",
    "end": "754839"
  },
  {
    "text": "but that's been it you know that's been the basic go logger and it's definitely it's been simple and usable but I think",
    "start": "754839",
    "end": "761360"
  },
  {
    "text": "a lot of people have more complicated needs and so there have been a lot of third-party logging packages over the",
    "start": "761360",
    "end": "767360"
  },
  {
    "text": "years so you were saying loger us or log our us is that how you pronounce it um",
    "start": "767360",
    "end": "772639"
  },
  {
    "text": "zap I don't now let's just make up some fake log names for people to to Google",
    "start": "772639",
    "end": "777720"
  },
  {
    "text": "and not find like uh you know there there's old woody woody the logger I mean there's the classic log 15 can't",
    "start": "777720",
    "end": "784720"
  },
  {
    "text": "forget that I think that one's real isn't it log 15 I think that's real but now oh yeah it's real it's real wait",
    "start": "784720",
    "end": "792000"
  },
  {
    "text": "didn't we P didn't we also P like a a famous like Java logging Library uh log",
    "start": "792000",
    "end": "798160"
  },
  {
    "text": "forj there's log for G log for G so the basic logging has been in there forever",
    "start": "798160",
    "end": "804120"
  },
  {
    "text": "and um so recently uh I think his name is Jonathan Amsterdam he goes by jba on",
    "start": "804120",
    "end": "810800"
  },
  {
    "text": "GitHub uh he made a proposal to add a new logging package to go um that would",
    "start": "810800",
    "end": "816480"
  },
  {
    "text": "be structured logging so a lot of these very popular logging packages the way that they work is it's not just like you",
    "start": "816480",
    "end": "822920"
  },
  {
    "text": "log and it dumps out a string but you log and it structures the information into basically keys and values so like",
    "start": "822920",
    "end": "830320"
  },
  {
    "text": "one of the very basic Keys is time and it's you know time equals whatever and there's your time stamp another is level",
    "start": "830320",
    "end": "837399"
  },
  {
    "text": "level equals warning or level equals info or level equals you know error the",
    "start": "837399",
    "end": "842759"
  },
  {
    "text": "message um so message equals whatever but you can also have uh more complicated logs where you're logging",
    "start": "842759",
    "end": "848720"
  },
  {
    "text": "particular things like let's say you uh made a request um to some server you",
    "start": "848720",
    "end": "854040"
  },
  {
    "text": "could say uh you know server hostname equals you know host name equals example.com and then you could say",
    "start": "854040",
    "end": "860639"
  },
  {
    "text": "duration of the request is you know 37 milliseconds and you can say this and that and when you have that structured",
    "start": "860639",
    "end": "867199"
  },
  {
    "text": "logging you know as an operator who's just like looking at things scroll by in your window it's you know it's okay it's",
    "start": "867199",
    "end": "872839"
  },
  {
    "text": "not a big difference but it's nice to have but I think when you have like a larger Corporation or you know",
    "start": "872839",
    "end": "879240"
  },
  {
    "text": "Enterprise and you're putting all these logs into some sort of a store like data dog or you know somebody else kibana",
    "start": "879240",
    "end": "886920"
  },
  {
    "text": "once you have all these logs in a in a centralized place if it's structured then you can search it out and you can",
    "start": "886920",
    "end": "892240"
  },
  {
    "text": "say okay show me every request to example.com get the duration for every",
    "start": "892240",
    "end": "897360"
  },
  {
    "text": "request to example.com give me a histogram of that show me what the P99 is you know let me know when it's going",
    "start": "897360",
    "end": "903680"
  },
  {
    "text": "too long and when it's going too short and it gives you a lot of capabilities that um otherwise you wouldn't have so",
    "start": "903680",
    "end": "910399"
  },
  {
    "text": "you know people have been using third party packages for this for a long time uh so now that it's come into the",
    "start": "910399",
    "end": "915959"
  },
  {
    "text": "standard Library I think it's gonna you know I think a lot of people are going to stop using third-party packages",
    "start": "915959",
    "end": "921519"
  },
  {
    "text": "because they can get their job done with just the go standard Library one thing",
    "start": "921519",
    "end": "926600"
  },
  {
    "text": "that's nice about the design of of the way that this has been added is um it's not totally encapsulated um so it comes",
    "start": "926600",
    "end": "934199"
  },
  {
    "text": "with a a log formatter that will format your log lines as as Json so like you know curly brackets and colons and",
    "start": "934199",
    "end": "941639"
  },
  {
    "text": "quotation marks and all that normal Json stuff but you can also log it as a a",
    "start": "941639",
    "end": "947440"
  },
  {
    "text": "text format um it's called The Log fmt format or something but the it uses um",
    "start": "947440",
    "end": "953000"
  },
  {
    "text": "equal signs and you know it's relatively easy to read just like with your own eye",
    "start": "953000",
    "end": "958399"
  },
  {
    "text": "but it's pluggable so you can plug in whatever you want so if you you know if you're using a particular logging host",
    "start": "958399",
    "end": "964880"
  },
  {
    "text": "provider you can build a sync and say all right well my log provider they accept logs in this binary format and so",
    "start": "964880",
    "end": "972519"
  },
  {
    "text": "we're going to like automatically you know build that binary and we're going to upload it to whatever server it is",
    "start": "972519",
    "end": "978959"
  },
  {
    "text": "we're going to post it as you know a protocol buffer or you know whatever so",
    "start": "978959",
    "end": "984480"
  },
  {
    "text": "it's very C powerful very capable it's like you know it's the best of where you have these interfaces that you can",
    "start": "984480",
    "end": "991680"
  },
  {
    "text": "extend them pretty easily uh and as long as you just Implement these you know core handful of methods then you know",
    "start": "991680",
    "end": "997720"
  },
  {
    "text": "anybody can build on top of it so yeah I think um if you're in the devops world like this is definitely something that I",
    "start": "997720",
    "end": "1005279"
  },
  {
    "text": "think is going to change how a lot of people do things just in the sense of like now you can you can plug into this",
    "start": "1005279",
    "end": "1012800"
  },
  {
    "text": "and and people can build adapters so that you know if you're still into using logari or whatever you can build a layer",
    "start": "1012800",
    "end": "1019360"
  },
  {
    "text": "where okay you call logus and then it calls into the the slog package the",
    "start": "1019360",
    "end": "1024720"
  },
  {
    "text": "structured log package and then that sends it off to whatever your final destination for your logs is so it's",
    "start": "1024720",
    "end": "1032120"
  },
  {
    "text": "very powerful it's very interesting it kind of feels like this might become kind of uh like what the database SQL",
    "start": "1032120",
    "end": "1038000"
  },
  {
    "text": "package is where it's like oh there's this core you know we have things like sqlx or sqlc and then you also have all",
    "start": "1038000",
    "end": "1045160"
  },
  {
    "text": "your drivers and all of that so it feels like it's building that sort of ecos system but for logging yeah definitely",
    "start": "1045160",
    "end": "1050880"
  },
  {
    "text": "so now that we've had my dessert let's continue let's continue on with more",
    "start": "1050880",
    "end": "1057440"
  },
  {
    "text": "standard Library stuff and then we're going to come back to the core language stuff so we touched on we mentioned like",
    "start": "1057440",
    "end": "1062559"
  },
  {
    "text": "the slice of stuff but the maps also saw some additions right for some common operations also leveraging the new",
    "start": "1062559",
    "end": "1068440"
  },
  {
    "text": "generics capabilities like what what are some some of your favorite uh new things in the maps package well to be honest my",
    "start": "1068440",
    "end": "1074039"
  },
  {
    "text": "favorite thing got cut at the last second uh so if you go to the",
    "start": "1074039",
    "end": "1079400"
  },
  {
    "text": "experimental um Maps package that they had up online before they added it to the standard Library like one of the",
    "start": "1079400",
    "end": "1086640"
  },
  {
    "text": "functions was called maps. keys and it was just you know real stupid simple you call map. keys and it gives you a slice",
    "start": "1086640",
    "end": "1093640"
  },
  {
    "text": "with all of the keys in the map and right you know it was definitely something that you could have done before it wasn't like going to kill you",
    "start": "1093640",
    "end": "1100559"
  },
  {
    "text": "but you know it took it from being three lines down to one and you know just like one little command uh just so much",
    "start": "1100559",
    "end": "1107679"
  },
  {
    "text": "faster and EAS easier to type you know map. Keys versus like have and",
    "start": "1107679",
    "end": "1113120"
  },
  {
    "text": "especially if you have go Imports turned on and it's automatically adding the Imports and stuff for you that's like so",
    "start": "1113120",
    "end": "1118400"
  },
  {
    "text": "much easier to type than just like okay 4K colon equals range M K Keys equals",
    "start": "1118400",
    "end": "1126919"
  },
  {
    "text": "append keys k it's like okay yeah you can do that like you know you can rattle",
    "start": "1126919",
    "end": "1131960"
  },
  {
    "text": "it off pretty quick but I'm a very slow typer so I don't you don't you don't you don't get to have that yeah you get you",
    "start": "1131960",
    "end": "1138080"
  },
  {
    "text": "get five functions now clone copy delete Funk equal and equal funk that's it",
    "start": "1138080",
    "end": "1143520"
  },
  {
    "text": "right so Keys was dropped at the very last minute because right now they're working on um a proposal for the next",
    "start": "1143520",
    "end": "1149520"
  },
  {
    "text": "version of go to add iterators so if you're familiar with that uh from other languages like Python and JavaScript and",
    "start": "1149520",
    "end": "1157600"
  },
  {
    "text": "c and I'm sure C++ and every other language in the world uh it's just the idea that you have like uh something",
    "start": "1157600",
    "end": "1164200"
  },
  {
    "text": "that returns elements in a list one at a time or elements in a potentially sequence one at a time and so instead of",
    "start": "1164200",
    "end": "1171320"
  },
  {
    "text": "map. keys returning the slice of all of the elements all the keys at once it would like return one key at a time",
    "start": "1171320",
    "end": "1177840"
  },
  {
    "text": "which is an optimization right that you can think of it as an optimization Yeah so basically like at the last minute they were like well wait a minute we",
    "start": "1177840",
    "end": "1184360"
  },
  {
    "text": "might add iterators in the next version so we don't want it to be that map. Keys",
    "start": "1184360",
    "end": "1189400"
  },
  {
    "text": "is like the slow version and you have to call map. Quick keys or something or like key zitter or something yeah so",
    "start": "1189400",
    "end": "1197880"
  },
  {
    "text": "right forward to that I'm I'm sure I'll be back in six months to tell you that Keys is back and I'm celebrating with",
    "start": "1197880",
    "end": "1204000"
  },
  {
    "text": "all my friends out in the street nice nice so the last one I want",
    "start": "1204000",
    "end": "1209799"
  },
  {
    "text": "to touch on the C library was the CMP or comp or however you want to call that that package like I've I've seen that",
    "start": "1209799",
    "end": "1216760"
  },
  {
    "text": "package before from I think I've imported there's a Google go package called CMP I've used that before to in",
    "start": "1216760",
    "end": "1223440"
  },
  {
    "text": "my test actually to do comparison of of different things and but there's a CMP",
    "start": "1223440",
    "end": "1228840"
  },
  {
    "text": "package proper in the standard library now like where where am I going to use this you know obviously based on a name",
    "start": "1228840",
    "end": "1234799"
  },
  {
    "text": "it's has to do with comparison tell me about it so the new CMP package yeah I think um it's definitely related to the",
    "start": "1234799",
    "end": "1241240"
  },
  {
    "text": "Google um CMP package in the sense that they're like both doing comparisons that one was really focusing on like test",
    "start": "1241240",
    "end": "1247480"
  },
  {
    "text": "comparisons where you're trying to say like when I run this um test is the value that I get out the same as what I",
    "start": "1247480",
    "end": "1254000"
  },
  {
    "text": "expected or is it close enough or is it off in some little ways and I think it would even like print out like the fine",
    "start": "1254000",
    "end": "1260679"
  },
  {
    "text": "difference of like okay on line 37 of this huge object two characters are different and they would show you",
    "start": "1260679",
    "end": "1266640"
  },
  {
    "text": "exactly what it is so the new standard Library CMP is much much much simpler",
    "start": "1266640",
    "end": "1271840"
  },
  {
    "text": "it's basically is it two or three functions I need to like look it up but one of the things is cm. ordered which",
    "start": "1271840",
    "end": "1278880"
  },
  {
    "text": "is a generic constraint so generic constraints are just the idea that um when you're writing a generic function",
    "start": "1278880",
    "end": "1285320"
  },
  {
    "text": "you can tell it what kinds of things it can take uh so cm. order just means all",
    "start": "1285320",
    "end": "1290640"
  },
  {
    "text": "right I can take anything that you can use with a less than operator right so",
    "start": "1290640",
    "end": "1296279"
  },
  {
    "text": "strings numbers floating Point numbers that's about it right but there's a lot",
    "start": "1296279",
    "end": "1301320"
  },
  {
    "text": "of different kinds of numbers so ins U ins in32 and 64 so all of those now",
    "start": "1301320",
    "end": "1307159"
  },
  {
    "text": "conform to the CMP ordered generic constraint uh and then you can do cm.",
    "start": "1307159",
    "end": "1312960"
  },
  {
    "text": "compare and that will compare two ordered things to say which of the two is bigger so so there's I guess and",
    "start": "1312960",
    "end": "1319120"
  },
  {
    "text": "there's also cm. L okay so it is three things Al together it's interesting that the type ordered like I've seen that",
    "start": "1319120",
    "end": "1325600"
  },
  {
    "text": "before right in the now hopefully defunct constraints package I know you",
    "start": "1325600",
    "end": "1332279"
  },
  {
    "text": "have some a pet peeve about that I have a pet peeve about that so yeah I so again going back to the idea that when",
    "start": "1332279",
    "end": "1338840"
  },
  {
    "text": "generics were being worked on you know there was one school of thought of like okay we're doing generics let's just add",
    "start": "1338840",
    "end": "1344120"
  },
  {
    "text": "all this stuff to the standard library and let's go and that definitely is appealing but the go team held off",
    "start": "1344120",
    "end": "1350760"
  },
  {
    "text": "they're like okay let's see how it is in practice uh and one of the the packages that they worked on experimentally was",
    "start": "1350760",
    "end": "1356640"
  },
  {
    "text": "called constraints and it just had like a bunch of different generic constraints so constraints. ordered is the same as",
    "start": "1356640",
    "end": "1362919"
  },
  {
    "text": "the new cm. ordered but they also had constraints for other stuff uh they were",
    "start": "1362919",
    "end": "1368919"
  },
  {
    "text": "like integer constraints and Float constraints and this and that but after",
    "start": "1368919",
    "end": "1374159"
  },
  {
    "text": "generics came out I opened an issue on the go issue tracker and I said let's just drop the whole idea of constraints",
    "start": "1374159",
    "end": "1380480"
  },
  {
    "text": "of the constraints package because basically the only constraint that you end up using is the ordered constraint",
    "start": "1380480",
    "end": "1387159"
  },
  {
    "text": "and other than that you don't really use it so do we need like a whole package just for this and so that that was",
    "start": "1387159",
    "end": "1393520"
  },
  {
    "text": "basically the issue I opened in the end um they basically they didn't quite do",
    "start": "1393520",
    "end": "1399000"
  },
  {
    "text": "what I said in the issue because I said to add it to sort like so it would be sort. ordered uh and instead they made a",
    "start": "1399000",
    "end": "1405279"
  },
  {
    "text": "whole new package but I still feel Vindicated because the constraints package didn't make it in so my",
    "start": "1405279",
    "end": "1411159"
  },
  {
    "text": "contribution to go 1.21 was that they didn't add a new package a non- aition",
    "start": "1411159",
    "end": "1417039"
  },
  {
    "text": "all right a non- addition Edition so yeah I saved go from you know another I don't know how many lines of code that",
    "start": "1417039",
    "end": "1423120"
  },
  {
    "text": "would have been 20 20 lines of code that they didn't need right right so let's let's swing back around to some of the",
    "start": "1423120",
    "end": "1429760"
  },
  {
    "text": "built-in stuff Chris have you ever wanted a Min and a Max built-in I think",
    "start": "1429760",
    "end": "1437080"
  },
  {
    "text": "so I think there's been number of times that I've wanted to be able to just be like give me give me the smallest thing",
    "start": "1437080",
    "end": "1442480"
  },
  {
    "text": "without having to sort or iterate through uh a no slice myself or a map",
    "start": "1442480",
    "end": "1448200"
  },
  {
    "text": "but I am personally much more excited for the clear function because I have had to clear lots of maps before and",
    "start": "1448200",
    "end": "1455720"
  },
  {
    "text": "it's just kind of annoying to have to go through and be like let me just r a little Loop to take care of this so I'm very excited about that but I am excited",
    "start": "1455720",
    "end": "1462120"
  },
  {
    "text": "about these Min and Max functions I think they they will come in handy maybe not all of the time but at least some of",
    "start": "1462120",
    "end": "1468799"
  },
  {
    "text": "the time which is how I feel about generics in general and about this like I'm very happy with this package in",
    "start": "1468799",
    "end": "1473919"
  },
  {
    "text": "general because I feel like you know my worry when generics were first being talked about was they'll be sprayed",
    "start": "1473919",
    "end": "1479559"
  },
  {
    "text": "everywhere and it seems like we've been very good at being reserved with this and being very judicious with our usage",
    "start": "1479559",
    "end": "1486200"
  },
  {
    "text": "of generics and putting in the right place and being very careful with with how we add them especially the standard",
    "start": "1486200",
    "end": "1491559"
  },
  {
    "text": "Library so I think it's like little stuff like this just feels very elegant little small little you know quality of",
    "start": "1491559",
    "end": "1498760"
  },
  {
    "text": "life improvements you know you're not getting rid of a ton of Code by getting rid of Min or Max or whatever but you get you make go a little bit more",
    "start": "1498760",
    "end": "1505279"
  },
  {
    "text": "concise that way and I I like that quite a bit yeah with min max and clear for all three of them part of the motivation",
    "start": "1505279",
    "end": "1511880"
  },
  {
    "text": "is that floating Point numbers are the devil's numbers and uh they will try to eat you whenever you aren't looking at",
    "start": "1511880",
    "end": "1519000"
  },
  {
    "text": "them so with the a map uh you can have a map and normally your Maps most of the",
    "start": "1519000",
    "end": "1525840"
  },
  {
    "text": "time the key will be like a string or something string like and then you know you have the values in the map uh but",
    "start": "1525840",
    "end": "1532320"
  },
  {
    "text": "you're allowed to have a map from numbers to other things so you could have a map from ins to whatever and that",
    "start": "1532320",
    "end": "1538080"
  },
  {
    "text": "makes sense that's fine too but the problem comes when you have a map from floats to something else so that's",
    "start": "1538080",
    "end": "1544520"
  },
  {
    "text": "totally legal in the language there's nothing stopping you from doing it but with floating Point numbers there's such",
    "start": "1544520",
    "end": "1549799"
  },
  {
    "text": "a thing as not a number or Nan so if you do certain operations in floating point",
    "start": "1549799",
    "end": "1556080"
  },
  {
    "text": "it just like it gives up and instead of returning a number it returns not a number I don't think it's if you divide",
    "start": "1556080",
    "end": "1561760"
  },
  {
    "text": "by zero because I think that returns Infinity but anyway just if you do the wrong thing with floating Point suddenly",
    "start": "1561760",
    "end": "1568320"
  },
  {
    "text": "it gets mad at you it returns not a number and then not a number basically like glues up everything else that it",
    "start": "1568320",
    "end": "1574520"
  },
  {
    "text": "touches so if you have um a slice and you want to say okay what's the biggest thing in this slice well if you have a",
    "start": "1574520",
    "end": "1580520"
  },
  {
    "text": "nan in there suddenly like the whole thing just becomes moot because the biggest thing is not a number and then",
    "start": "1580520",
    "end": "1586880"
  },
  {
    "text": "if you have a app you can have the Nan become a key but then when you go to",
    "start": "1586880",
    "end": "1592399"
  },
  {
    "text": "delete the key you can't delete it because the Nan is not equal to itself",
    "start": "1592399",
    "end": "1599360"
  },
  {
    "text": "and so then you try to delete it and it gets like stuck and your map is just filling up with more and more not a",
    "start": "1599360",
    "end": "1606399"
  },
  {
    "text": "number numbers yeah so it's like so basically clear is the only way if for some reason you are using a map from",
    "start": "1606399",
    "end": "1614240"
  },
  {
    "text": "float to something else you probably shouldn't be doing that or you should examine Your Life Choices if you're",
    "start": "1614240",
    "end": "1619880"
  },
  {
    "text": "doing that but if you are doing that it's possible that these nans will get like stuck in there and the only way to",
    "start": "1619880",
    "end": "1626080"
  },
  {
    "text": "get them out is with the Nu clear builtin you're making me hungry with all this non talk I'm like n let's go pares",
    "start": "1626080",
    "end": "1633840"
  },
  {
    "text": "after this so okay the last thing I want to",
    "start": "1633840",
    "end": "1641000"
  },
  {
    "text": "touch on on the built-ins well we had a whole episode recently on go 121",
    "start": "1641000",
    "end": "1648000"
  },
  {
    "text": "generics in particular but the maybe we can briefly touch on sort of the the uh",
    "start": "1648000",
    "end": "1653760"
  },
  {
    "text": "changes that have been clarified with the type inference in a spec for as far as",
    "start": "1653760",
    "end": "1659360"
  },
  {
    "text": "uh the whole generics thing is concerned right with the type inference like is there like how can we like Briefly",
    "start": "1659360",
    "end": "1664799"
  },
  {
    "text": "summarize that I think for the most part if you're using it you won't really notice the difference because it should",
    "start": "1664799",
    "end": "1671200"
  },
  {
    "text": "just work so for the most part when you use um generics and go it will do some",
    "start": "1671200",
    "end": "1676880"
  },
  {
    "text": "very light very mild type inference of like okay you've got this input and that",
    "start": "1676880",
    "end": "1683120"
  },
  {
    "text": "and so I can tell from Context that you must want you know this to be an INT or to be this particular struct or whatever",
    "start": "1683120",
    "end": "1690440"
  },
  {
    "text": "and so they've just slightly improved it now where uh it also works for when you have like one generic function is",
    "start": "1690440",
    "end": "1696960"
  },
  {
    "text": "calling another generic function and so specifically if you're doing like the slices package with the CMP package and",
    "start": "1696960",
    "end": "1703600"
  },
  {
    "text": "you're like okay I want you to sort this according to this CMP call you know it",
    "start": "1703600",
    "end": "1709720"
  },
  {
    "text": "should all just like work automatically and you don't even notice that it's different or better uh but if you like",
    "start": "1709720",
    "end": "1715320"
  },
  {
    "text": "took that same code and you brought it back to go 1.20 it would say I can't tell what type you mean here please add",
    "start": "1715320",
    "end": "1721640"
  },
  {
    "text": "a type annotation and you'd be like oh okay whatever so it just saves you a little bit of typing and you know",
    "start": "1721640",
    "end": "1727360"
  },
  {
    "text": "physical typing and as well as uh how do you call the other kind of typing also",
    "start": "1727360",
    "end": "1732480"
  },
  {
    "text": "mathematical typing uh it saves you both kind of typing but uh for the most part you shouldn't notice it it should just",
    "start": "1732480",
    "end": "1739519"
  },
  {
    "text": "like work and you don't have to think about it right right when I saw this in",
    "start": "1739519",
    "end": "1745159"
  },
  {
    "text": "the release notes I was like H it's about time right the so what I'm",
    "start": "1745159",
    "end": "1750559"
  },
  {
    "text": "referring to specifically is uh if you've ever been if you've ever sort of uh uh um sort of work with the go",
    "start": "1750559",
    "end": "1756919"
  },
  {
    "text": "routines inside of Loops you you you probably run you especially as a newbie",
    "start": "1756919",
    "end": "1761960"
  },
  {
    "text": "you probably run into the whole uh um L variable closure bug and you're wondering what the heck is going on but",
    "start": "1761960",
    "end": "1769080"
  },
  {
    "text": "yeah seems like there's a there's some initial work around sort of uh preventing that from being a gacha for",
    "start": "1769080",
    "end": "1776159"
  },
  {
    "text": "people who don't know how to handle that particular uh uh case um like I think there's a flag now you can sort of turn",
    "start": "1776159",
    "end": "1783480"
  },
  {
    "text": "on or something so the background for this is that um yeah this definitely bites everybody at least once and like I",
    "start": "1783480",
    "end": "1791000"
  },
  {
    "text": "think with some things you get bitten once and then it just never happens again but with this one it's still like every six months or so you get get",
    "start": "1791000",
    "end": "1797440"
  },
  {
    "text": "bitten by it again you forgot but uh so the way that for loops work and go is",
    "start": "1797440",
    "end": "1803440"
  },
  {
    "text": "that when you um you say you know 4 I colon equals range whatever that I is a",
    "start": "1803440",
    "end": "1810320"
  },
  {
    "text": "new variable and it exists inside of the loop but not outside the loop and it's like okay that part is fine that makes",
    "start": "1810320",
    "end": "1816000"
  },
  {
    "text": "sense but the problem is it only gets created once per Loop so the whole Loop",
    "start": "1816000",
    "end": "1821919"
  },
  {
    "text": "is just reusing the same ey every time uh and it turns out that this causes bug",
    "start": "1821919",
    "end": "1827559"
  },
  {
    "text": "when you're like building um a closure or if you take um a pointer inside of",
    "start": "1827559",
    "end": "1833440"
  },
  {
    "text": "the loop you end up taking a pointer to the same thing or or closing over the same variable every time and so you'll",
    "start": "1833440",
    "end": "1840240"
  },
  {
    "text": "do this thing well you'll be like okay I'm going to write these functions and I want them all to like let's say take one",
    "start": "1840240",
    "end": "1845919"
  },
  {
    "text": "element in a slice and then do something to it and then you go through and it's like oh actually they all took the last",
    "start": "1845919",
    "end": "1851440"
  },
  {
    "text": "element in the slice and you're like why are they all taking the last element in the slice this is crazy and it's like oh",
    "start": "1851440",
    "end": "1857399"
  },
  {
    "text": "because of this bug so go has this really strong emphasis on backward compatibility and like not changing",
    "start": "1857399",
    "end": "1863559"
  },
  {
    "text": "things and make it so that like if you're writing code today it'll keep working tomorrow and you don't have to",
    "start": "1863559",
    "end": "1869360"
  },
  {
    "text": "worry about the language changing under your feet so in general they haven't wanted to change the meaning of existing",
    "start": "1869360",
    "end": "1876120"
  },
  {
    "text": "things in the code but for this example Rus Cox like actually went through you know however many millions of lines of",
    "start": "1876120",
    "end": "1883440"
  },
  {
    "text": "code that Google has inside of their internal private repos he looked at a",
    "start": "1883440",
    "end": "1888559"
  },
  {
    "text": "bunch of public repos he just like he got his hands on as much code as he could and he was like if I made it so",
    "start": "1888559",
    "end": "1894799"
  },
  {
    "text": "that by default it just creates a new variable every time you go through the loop instead of just once at the top",
    "start": "1894799",
    "end": "1901679"
  },
  {
    "text": "would that break code and he couldn't find any examples of like code that wasn't already buggy that would have a",
    "start": "1901679",
    "end": "1909279"
  },
  {
    "text": "new bug because of it and he's like okay I haven't found any examples of this creating a bug and I know from",
    "start": "1909279",
    "end": "1916000"
  },
  {
    "text": "experience that not having this you know routinely creates bugs so let's just go ahead and uh and try it out so in go",
    "start": "1916000",
    "end": "1923720"
  },
  {
    "text": "1.21 it's not the default yet it's still a go experiment so if you set the go",
    "start": "1923720",
    "end": "1929679"
  },
  {
    "text": "experiment equals Loop VAR setting then your program can try it out and if you",
    "start": "1929679",
    "end": "1934919"
  },
  {
    "text": "run that and you run your test and you're like oh my God my test was passing before but now it's not then",
    "start": "1934919",
    "end": "1940720"
  },
  {
    "text": "that means that you must have been like the one person in the world who had a bug with this being the other way around",
    "start": "1940720",
    "end": "1946159"
  },
  {
    "text": "but for everybody else it should just save you the next time you accidentally run into this particular issue and when",
    "start": "1946159",
    "end": "1953279"
  },
  {
    "text": "this finally mix it into to whatever version it makes it into even the existing codes that",
    "start": "1953279",
    "end": "1959960"
  },
  {
    "text": "redeclared the loop won't break um it'll just continue to work as is until you're",
    "start": "1959960",
    "end": "1965320"
  },
  {
    "text": "ready to just remove the the new Loop variable yeah it's one of these um features where it's gated behind the go",
    "start": "1965320",
    "end": "1971600"
  },
  {
    "text": "dood file um so you have to say in your go. file that you want to use the new",
    "start": "1971600",
    "end": "1977159"
  },
  {
    "text": "features of go and so if you have an old program that you know it's relying on the bug to work somehow it it won't just",
    "start": "1977159",
    "end": "1984639"
  },
  {
    "text": "silently upgrade itself right and probably goet will probably tell you like if you're using a version that does",
    "start": "1984639",
    "end": "1991240"
  },
  {
    "text": "support the automatic Lo variable declaration um goet will probably tell you like hey you don't need to have this",
    "start": "1991240",
    "end": "1996880"
  },
  {
    "text": "extra declaration um in your code which is nice yeah there's some way you can run your tests where it will the test",
    "start": "1996880",
    "end": "2003240"
  },
  {
    "text": "itself will like print out something where it's like hey this result Chang es based on whether or not um I have the go",
    "start": "2003240",
    "end": "2009960"
  },
  {
    "text": "Loop variable experiment on and so you can run that now and it'll print out all the spots where it's like something",
    "start": "2009960",
    "end": "2016240"
  },
  {
    "text": "looks a little bit different with it turned on versus not turned on I was going to say that if uh if you if you",
    "start": "2016240",
    "end": "2021320"
  },
  {
    "text": "turn on the loop bar thing and it and your test fail it's probably because you were using it within your test you had",
    "start": "2021320",
    "end": "2027559"
  },
  {
    "text": "some nice little Loop for table test and uh you just weren't running all the other test because you didn't know because you weren't passing in the right",
    "start": "2027559",
    "end": "2033399"
  },
  {
    "text": "things feel like that's probably more likely than you know you are actually using this really weird component of go",
    "start": "2033399",
    "end": "2041440"
  },
  {
    "text": "for something useful so let's switch gears to some tooling the it seems like",
    "start": "2041440",
    "end": "2048599"
  },
  {
    "text": "there's a well there's a couple things I want to touch on um the pggo is which",
    "start": "2048599",
    "end": "2054280"
  },
  {
    "text": "was introduced in a preview State the previous version I go now is has gone GA um I I must admit I haven't had a chance",
    "start": "2054280",
    "end": "2061280"
  },
  {
    "text": "to dive deeper into profile guided optimization like what's the 15-second",
    "start": "2061280",
    "end": "2066520"
  },
  {
    "text": "value prop here for for PG so I also haven't used this in production yet the basic idea is that um when you run the",
    "start": "2066520",
    "end": "2073878"
  },
  {
    "text": "go compiler it's it's very fast um but part of How It's very fast is it's not",
    "start": "2073879",
    "end": "2078919"
  },
  {
    "text": "doing super optimization it's just sort of giving like everything a quick once over and then you know basically that's",
    "start": "2078919",
    "end": "2085878"
  },
  {
    "text": "good enough uh but with profile guided optimization what you do is you build your binary uh and then you run it in",
    "start": "2085879",
    "end": "2092440"
  },
  {
    "text": "production for a little while and then while it's running in production it writes out a little things saying oh",
    "start": "2092440",
    "end": "2097480"
  },
  {
    "text": "this loop I did it a bunch it would be better if this was inlined and this Loop uh over here it be better if I did it",
    "start": "2097480",
    "end": "2104079"
  },
  {
    "text": "this way or that way or if I move this variable so that it's closer to this other one and so it'll it'll just save",
    "start": "2104079",
    "end": "2110800"
  },
  {
    "text": "all of that stuff into a thing and then you take that file and you run the compiler again with the profile guided",
    "start": "2110800",
    "end": "2118160"
  },
  {
    "text": "optimization file uh and then the second binary it produces will be you know",
    "start": "2118160",
    "end": "2123560"
  },
  {
    "text": "better optimized and um I forget what they said the document but I think they saw like 10% or so better performance",
    "start": "2123560",
    "end": "2130760"
  },
  {
    "text": "when you did it this way so for some people that could be a big difference yeah that's sounds like a sort of a low",
    "start": "2130760",
    "end": "2137040"
  },
  {
    "text": "effort way of identifying sort of hot paths and things of that nature and sort of uh basically yeah just not having to",
    "start": "2137040",
    "end": "2145320"
  },
  {
    "text": "sort of do you know dive into a profiler and sort of uh do the typical thing we",
    "start": "2145320",
    "end": "2150680"
  },
  {
    "text": "do with you know uh with pepr and everything else and trying to figure out where you have too too many allocations",
    "start": "2150680",
    "end": "2156319"
  },
  {
    "text": "ET said Etc so this is more of a passive way of of generating you know some insight for you and you can then at your",
    "start": "2156319",
    "end": "2162800"
  },
  {
    "text": "leisure go and sort of uh refactor and optimize would that would that be a a",
    "start": "2162800",
    "end": "2167880"
  },
  {
    "text": "proper understanding this is more of a passive approach yeah I think the main challenge here is just that it needs",
    "start": "2167880",
    "end": "2173599"
  },
  {
    "text": "some real world data to build its profile optimization against uh and so this is basically why I've been too lazy",
    "start": "2173599",
    "end": "2179880"
  },
  {
    "text": "to do it is that probably what you need to do is in your testing environment or your Dev environment or something uh or",
    "start": "2179880",
    "end": "2186520"
  },
  {
    "text": "if you have like a sophisticated environment where you have like Canary rollouts you might say okay we're going to run our canaries on 10% of machines",
    "start": "2186520",
    "end": "2194359"
  },
  {
    "text": "and then they will collect the profile guided optimization files and then we'll build a new release where we use those",
    "start": "2194359",
    "end": "2200440"
  },
  {
    "text": "or something so it's a little bit tricky in that regard but uh I think if if you",
    "start": "2200440",
    "end": "2206119"
  },
  {
    "text": "have the infrastructure to get this going it's basically free money you know it's like okay here's here's this way",
    "start": "2206119",
    "end": "2212480"
  },
  {
    "text": "that we can run this and then all of our stuff is just going to be faster in perpetuity like once you set up the",
    "start": "2212480",
    "end": "2218040"
  },
  {
    "text": "devops pipeline to make this happen automatically then it's like okay and now the company just saves you know",
    "start": "2218040",
    "end": "2223880"
  },
  {
    "text": "whatever percentage on CPU for the rest of time which I imagine if you're running very high scale operations then",
    "start": "2223880",
    "end": "2232520"
  },
  {
    "text": "any sort of you know 2 to 7% reduction in in resource utilization means many",
    "start": "2232520",
    "end": "2238960"
  },
  {
    "text": "many dollars or whatever your formal currency is that means a lot of uh savings there I like that it can like",
    "start": "2238960",
    "end": "2245079"
  },
  {
    "text": "just get better over time if it's like if you do integrate it with your whole workflow just like future releases of go",
    "start": "2245079",
    "end": "2251119"
  },
  {
    "text": "that get better and better at this it's like you don't have to do anything extra it's like oh it's already built into my",
    "start": "2251119",
    "end": "2256359"
  },
  {
    "text": "whole workflow and my whole ecosystem and all of that so if I upgrade to a new version of go and there's more better",
    "start": "2256359",
    "end": "2262960"
  },
  {
    "text": "optimizations and I don't I literally don't have to do anything to get to benefit from those things which is",
    "start": "2262960",
    "end": "2268200"
  },
  {
    "text": "really cool indeed indeed so next up we have in the whole tooling thing and",
    "start": "2268200",
    "end": "2275280"
  },
  {
    "text": "something I haven't yet played around with with there's forward and backwards compatibility with the go tool chain",
    "start": "2275280",
    "end": "2281280"
  },
  {
    "text": "like what is that about so the go.mod file for some time now has had a line in",
    "start": "2281280",
    "end": "2287200"
  },
  {
    "text": "it which is the Go version and if you set the Go version up until now it hasn't really done a whole lot it",
    "start": "2287200",
    "end": "2293760"
  },
  {
    "text": "basically just it tells other modules you know this is the the version of go",
    "start": "2293760",
    "end": "2299119"
  },
  {
    "text": "that I was built with and that I expect and if you try to use a go module that has like a future version versus what",
    "start": "2299119",
    "end": "2305800"
  },
  {
    "text": "you're building your um application with it'll basically just print out a little warning and say hey just so you know",
    "start": "2305800",
    "end": "2312000"
  },
  {
    "text": "this one module expects me to be on you know go 1.20 but I'm actually only on go",
    "start": "2312000",
    "end": "2317319"
  },
  {
    "text": "1.19 but you know it was just a warning it wasn't like a big deal but now uh",
    "start": "2317319",
    "end": "2322720"
  },
  {
    "text": "there's new built-in optimization where it can automatically fetch the version of go that you expect to be built with",
    "start": "2322720",
    "end": "2330359"
  },
  {
    "text": "so you can specify I expect to be built with go uh",
    "start": "2330359",
    "end": "2335520"
  },
  {
    "text": "1.21 two and right now that won't work because 1. 21.2 isn't out uh but once it",
    "start": "2335520",
    "end": "2341520"
  },
  {
    "text": "is out it will automatically you're living in the future Carl maybe this is the version of go that's like so",
    "start": "2341520",
    "end": "2346680"
  },
  {
    "text": "bulletproof that they never have bug releases for it it's like no we just got it perfect on point",
    "start": "2346680",
    "end": "2351760"
  },
  {
    "text": "zero uh but yeah so you know it will automatically go online get that version",
    "start": "2351760",
    "end": "2357920"
  },
  {
    "text": "You Know download it into a cach spot and then run that compiler all for you",
    "start": "2357920",
    "end": "2363319"
  },
  {
    "text": "now you can turn it off I definitely I think there are people who are going to be in high security environments where it's like no we're not we're not going",
    "start": "2363319",
    "end": "2369920"
  },
  {
    "text": "to let something automatically download the newest version of go everything that we run has to be like inspected with a",
    "start": "2369920",
    "end": "2375880"
  },
  {
    "text": "fine Toth comb and blah blah blah but I think for a lot of people this is just",
    "start": "2375880",
    "end": "2380920"
  },
  {
    "text": "going to be very convenient it's like oh you know if uh I have one person on the",
    "start": "2380920",
    "end": "2386000"
  },
  {
    "text": "team and they like release something and on their machine they already ran you know home brew upgrade or apt upgrade or",
    "start": "2386000",
    "end": "2392880"
  },
  {
    "text": "whatever it's not going to break on my machine my machine will just sign ently update itself to match theirs so that's",
    "start": "2392880",
    "end": "2399640"
  },
  {
    "text": "pretty [Music]",
    "start": "2399640",
    "end": "2405079"
  },
  {
    "text": "cool this is a change log news break you can add meta's code llama to the ever",
    "start": "2405079",
    "end": "2411839"
  },
  {
    "text": "expanding list of code generating llms based on llama 2 code llama comes in",
    "start": "2411839",
    "end": "2417960"
  },
  {
    "text": "three sizes 7 billion parameters 13 billion and 34 billion and it comes in",
    "start": "2417960",
    "end": "2423960"
  },
  {
    "text": "three different varieties a general model one tuned for NLP instructions and",
    "start": "2423960",
    "end": "2430400"
  },
  {
    "text": "one fine-tuned for python how does it stack up well meta claims it outperforms",
    "start": "2430400",
    "end": "2436000"
  },
  {
    "text": "other publicly available llms and it shares the same open-ish license as llama itself which is free for research",
    "start": "2436000",
    "end": "2443160"
  },
  {
    "text": "and commercial use unless you compete with meta you just heard one of our five",
    "start": "2443160",
    "end": "2448359"
  },
  {
    "text": "top stories from Monday's Chang log news subscribe to the podcast to get all of the week's top stories and pop your",
    "start": "2448359",
    "end": "2455200"
  },
  {
    "text": "email address in at at",
    "start": "2455200",
    "end": "2458440"
  },
  {
    "text": "changelog.md per news worth your attention once again that's",
    "start": "2460720",
    "end": "2467240"
  },
  {
    "text": "[Music]",
    "start": "2468830",
    "end": "2473260"
  },
  {
    "text": "changelog.txt like into into gona that you can specify you know your goose and gorch environment variables to get",
    "start": "2485240",
    "end": "2491960"
  },
  {
    "text": "access to the to that wasam stuff like how's how interesting is that for for either of you that's pretty exciting um",
    "start": "2491960",
    "end": "2499440"
  },
  {
    "text": "I've used wasm before just like to play around with it in the browser but in the",
    "start": "2499440",
    "end": "2505000"
  },
  {
    "text": "browser it's always a little bit of a awkward fit because you want everything",
    "start": "2505000",
    "end": "2510079"
  },
  {
    "text": "to be as small as possible and so as soon as you're you're compiling the whole go run time it's like you start",
    "start": "2510079",
    "end": "2516720"
  },
  {
    "text": "off with like a three megabyte binary or something like that and for a system",
    "start": "2516720",
    "end": "2521760"
  },
  {
    "text": "where you're just like you know you have a CLI tool or something it's like oh three megabytes is not a big deal but if",
    "start": "2521760",
    "end": "2527280"
  },
  {
    "text": "you're running a website and you want you know users to come to the site and you're like oh they've got to download",
    "start": "2527280",
    "end": "2532760"
  },
  {
    "text": "three megabytes before they can load my little you know image that that's kind of not great always so I think that's",
    "start": "2532760",
    "end": "2539760"
  },
  {
    "text": "always sort of limited the adoption of go in web assembly on the front end but",
    "start": "2539760",
    "end": "2544960"
  },
  {
    "text": "on the back end you know it's like who cares like the final binary is probably going to be like a 100 Megs but nobody",
    "start": "2544960",
    "end": "2551200"
  },
  {
    "text": "cares it's like it's trivial on the back end so I think this could be really exciting for serverless functions for",
    "start": "2551200",
    "end": "2557319"
  },
  {
    "text": "compute at Edge for things like that where it's like okay now we can deliver our go binaries out to the edge super",
    "start": "2557319",
    "end": "2564359"
  },
  {
    "text": "fast you know have them run on every request and you know deliver results you know close to users in milliseconds or",
    "start": "2564359",
    "end": "2572520"
  },
  {
    "text": "microseconds uh I think this could be really really exciting yeah I think the the back end is definitely the more",
    "start": "2572520",
    "end": "2579079"
  },
  {
    "text": "compelling part of this uh I also think like this could be used to make like you know interesting plugin systems and",
    "start": "2579079",
    "end": "2585760"
  },
  {
    "text": "whatnot because web assembly like there's so many different runtimes uh you can easily embed them into your",
    "start": "2585760",
    "end": "2591280"
  },
  {
    "text": "language so making it so that go has this kind of extra layer of access now where it's not just kind of like oh I I",
    "start": "2591280",
    "end": "2598200"
  },
  {
    "text": "can't really talk to a file system I have to depend on the the runtime giving me this stuff now there's a standard",
    "start": "2598200",
    "end": "2603319"
  },
  {
    "text": "interface that you know anybody can use it's it's really nice and I'm glad to see that go is also pushing to get into",
    "start": "2603319",
    "end": "2609079"
  },
  {
    "text": "the web assembly space because I think right now it's a lot of C C++ rust uh",
    "start": "2609079",
    "end": "2615040"
  },
  {
    "text": "and there's like you know some other languages floating around but I've always been like no no go should be in there as well like go should be like",
    "start": "2615040",
    "end": "2620800"
  },
  {
    "text": "right up with rust and C as languages you can use you know for these Edge computes and for all this other stuff",
    "start": "2620800",
    "end": "2626680"
  },
  {
    "text": "there was a really interesting talk at goer con I want to say 2022 by the creator of SQL C whose Name",
    "start": "2626680",
    "end": "2634079"
  },
  {
    "text": "Escapes me but he was talking about using web assembly for plugins and go and basically yeah it was like he wanted",
    "start": "2634079",
    "end": "2640400"
  },
  {
    "text": "to add a plugin system to SQL C his um go you know SQL compiler whatever you",
    "start": "2640400",
    "end": "2646520"
  },
  {
    "text": "want to call it he wanted a plugin system for that and so he ended up doing it with web assembly because that was",
    "start": "2646520",
    "end": "2653119"
  },
  {
    "text": "something where it's like okay if it's in web assembly I know that the plugin can't just like Scribble all over my",
    "start": "2653119",
    "end": "2658640"
  },
  {
    "text": "user's hard drives I can put it into a nice little sandbox and it can be allowed to you know modify the SQL files",
    "start": "2658640",
    "end": "2664960"
  },
  {
    "text": "but not you know do things that it's not supposed to do and so I can protect my users that way with the plugins um so it",
    "start": "2664960",
    "end": "2671480"
  },
  {
    "text": "could be really interesting to see if you know maybe caddy or you know some other things could pick this up uh as a",
    "start": "2671480",
    "end": "2677839"
  },
  {
    "text": "way of of having plugins but not necessarily letting the plugins just run",
    "start": "2677839",
    "end": "2683200"
  },
  {
    "text": "any arbitrary code but you can trust that they're only going to run code that you approve of yeah I think that's Kyle",
    "start": "2683200",
    "end": "2689319"
  },
  {
    "text": "Conroy on on GitHub that sounds right yes the sqlc package yeah there's a some",
    "start": "2689319",
    "end": "2696000"
  },
  {
    "text": "minor changes I think you're you're excited about Carl you want to touch on those oh minor changes uh so I have to",
    "start": "2696000",
    "end": "2703960"
  },
  {
    "text": "promote it because nobody else will promote it since I I was the one who implemented it uh so I'm the one who",
    "start": "2703960",
    "end": "2710040"
  },
  {
    "text": "brought Funk to go uh I want everybody to know this uh so uh a couple versions",
    "start": "2710040",
    "end": "2715800"
  },
  {
    "text": "back there's flags. Funk so Flags is the go command line Flags parsing package I",
    "start": "2715800",
    "end": "2722400"
  },
  {
    "text": "know a lot of people use other packages you know like Cobra or Viper or whatever but if you want to stick to the standard",
    "start": "2722400",
    "end": "2728280"
  },
  {
    "text": "Library which I recommend but not everybody does uh then you can use the flag package and uh the flag package has",
    "start": "2728280",
    "end": "2735920"
  },
  {
    "text": "a little um helper called Funk uh and flags. Funk what it'll do is it'll just take whatever you set in your command",
    "start": "2735920",
    "end": "2743040"
  },
  {
    "text": "line argument and just pass it to a little function uh as a string and in",
    "start": "2743040",
    "end": "2748599"
  },
  {
    "text": "your function you can return an error it's just a very uh simple and convenient way of uh quickly writing a",
    "start": "2748599",
    "end": "2754880"
  },
  {
    "text": "command line uh flag parsing thing ofama  uh so in go 1.21 someone in the",
    "start": "2754880",
    "end": "2761280"
  },
  {
    "text": "issues tracker said hey we should have a flags. bu Funk which is basically the",
    "start": "2761280",
    "end": "2766960"
  },
  {
    "text": "same as flags. Funk except for it works for um flags that don't necessarily have an argument so let's say you had a flag",
    "start": "2766960",
    "end": "2773720"
  },
  {
    "text": "called um you know Dash verbose or something like that and you didn't need to have a setting for it you could just",
    "start": "2773720",
    "end": "2779839"
  },
  {
    "text": "say you know Dash verose now uh with go 1.21 you can have that just sent off to",
    "start": "2779839",
    "end": "2785640"
  },
  {
    "text": "your function in the same way that you could uh for something else where it's taking an argument so I don't know it",
    "start": "2785640",
    "end": "2791559"
  },
  {
    "text": "was simple it was like it's one of those things where there's a lot of stuff if you want to get into open source there's",
    "start": "2791559",
    "end": "2797559"
  },
  {
    "text": "a lot of stuff in the go issue tracker where it's like we need somebody to write something and it's only you know",
    "start": "2797559",
    "end": "2802839"
  },
  {
    "text": "three lines five lines 20 lines it's not that much and then you end up writing tests and the tests are longer than the",
    "start": "2802839",
    "end": "2809559"
  },
  {
    "text": "thing that you write so I don't know I see this all the time like on Reddit and",
    "start": "2809559",
    "end": "2814760"
  },
  {
    "text": "different places of like oh I want to do open source where do I go how do I start an open source and my answer is always",
    "start": "2814760",
    "end": "2820640"
  },
  {
    "text": "like you'd be surprised there's some like really lwh hanging fruit in the go project uh and it can be pretty fun to",
    "start": "2820640",
    "end": "2827040"
  },
  {
    "text": "you know just implement it and you know send it out there and the team are really understanding I know for like one",
    "start": "2827040",
    "end": "2832960"
  },
  {
    "text": "of the first things I sent in I was like I can't figure out how to test this like I know what change to make but I don't",
    "start": "2832960",
    "end": "2839000"
  },
  {
    "text": "know how to test my change and they were like okay not a big deal we'll write the test for you and you know they helped me",
    "start": "2839000",
    "end": "2844880"
  },
  {
    "text": "through that and it was great so definitely if you're looking for something to contribute to check out the",
    "start": "2844880",
    "end": "2850160"
  },
  {
    "text": "go project sweet I think it's time to switch to some would say their favorite",
    "start": "2850160",
    "end": "2856280"
  },
  {
    "text": "part of the show which is unpopular opinions by some do you mean you Johnny what what me little old me I",
    "start": "2856280",
    "end": "2864640"
  },
  {
    "text": "don't know let's let's let's get the jingle going shall [Music]",
    "start": "2864640",
    "end": "2872839"
  },
  {
    "text": "weion I actually think you should probably leave [Music]",
    "start": "2872839",
    "end": "2885680"
  },
  {
    "text": "opinion all right Carl I know you brought something spicy all right lay it on us here's my spicy take my spicy take",
    "start": "2885680",
    "end": "2893079"
  },
  {
    "text": "is that XML is better than yaml because",
    "start": "2893079",
    "end": "2898119"
  },
  {
    "text": "there are situations where XML is appropriate but there is no situation",
    "start": "2898119",
    "end": "2903200"
  },
  {
    "text": "where yaml is appropriate Dam shots fired uh so now to defend my position",
    "start": "2903200",
    "end": "2910520"
  },
  {
    "text": "and therefore make it so that it becomes a popular opinion uh although maybe not",
    "start": "2910520",
    "end": "2915720"
  },
  {
    "text": "this one might be spicy enough that I don't even I can't defend it and well enough let's talk about XML first so XML",
    "start": "2915720",
    "end": "2922640"
  },
  {
    "text": "got a really bad reputation uh and the reason it got a really bad reputation is because people were using it for things",
    "start": "2922640",
    "end": "2928520"
  },
  {
    "text": "that should never have been used for so XML it stands for extensible markup",
    "start": "2928520",
    "end": "2933640"
  },
  {
    "text": "language and if you're using it as an extensible markup language it's actually really great so like let's say you're",
    "start": "2933640",
    "end": "2940000"
  },
  {
    "text": "working on something and you're like I'm making a new kind of book and I need to you know annotate all of the verses in",
    "start": "2940000",
    "end": "2947040"
  },
  {
    "text": "the Bible and have the chapter headings and stuff it's like it's great for that you know it's really good for when you",
    "start": "2947040",
    "end": "2953160"
  },
  {
    "text": "have a document and you need to have you know some things are italicized and some things are in a foreign language and",
    "start": "2953160",
    "end": "2959960"
  },
  {
    "text": "subtitles and you know all that stuff it's really good for that it's not good if it's like okay I need to configure",
    "start": "2959960",
    "end": "2966799"
  },
  {
    "text": "This Server and the server needs to know if this value is true or false it's like no that's bad don't do that uh that's",
    "start": "2966799",
    "end": "2974160"
  },
  {
    "text": "not a good use for XML but XML does have some uses for which it's appropriate and I think the fact that now everybody is",
    "start": "2974160",
    "end": "2980680"
  },
  {
    "text": "writing react and they're writing it with jsx and jsx is basically just",
    "start": "2980680",
    "end": "2986079"
  },
  {
    "text": "inline XML I think that shows that there are cases where actually XML is pretty",
    "start": "2986079",
    "end": "2991520"
  },
  {
    "text": "good now yaml on the other hand I think is never good there's always something",
    "start": "2991520",
    "end": "2997640"
  },
  {
    "text": "better than yaml and so we finally made it to go 1.21 and I'm very happy about",
    "start": "2997640",
    "end": "3003559"
  },
  {
    "text": "this and you know why because yaml repeatedly bit me in the behind on go",
    "start": "3003559",
    "end": "3009119"
  },
  {
    "text": "1.20 ask me why why well when you say in",
    "start": "3009119",
    "end": "3014359"
  },
  {
    "text": "your test file test this against go 1.20 it interprets that as Go",
    "start": "3014359",
    "end": "3022280"
  },
  {
    "text": "1.2 and so it was like two or three different times I had a repo where I'm like these tests",
    "start": "3022280",
    "end": "3028880"
  },
  {
    "text": "aren't passing why are my tests not passing I'm just upgrading it to go 120 and it was like oh no I've decided",
    "start": "3028880",
    "end": "3036520"
  },
  {
    "text": "that this is Go 1.2 uh and so yaml is always going to do",
    "start": "3036520",
    "end": "3041880"
  },
  {
    "text": "that to you oh snap you just reminded me I think I had that issue in a GitHub",
    "start": "3041880",
    "end": "3048119"
  },
  {
    "text": "action uh when I UPG change a version of a build to 120 I think I had that exact",
    "start": "3048119",
    "end": "3054520"
  },
  {
    "text": "issue just cuz that cuz it's the yaml the yaml for the GitHub",
    "start": "3054520",
    "end": "3061000"
  },
  {
    "text": "workflows I ran into that issue oh my God so yeah my take is that yaml I mean",
    "start": "3061000",
    "end": "3066680"
  },
  {
    "text": "I understand why people do yaml but there are better choices you should use you know toml you can use Q the thing um",
    "start": "3066680",
    "end": "3075240"
  },
  {
    "text": "from Raj Pepe you can use or I guess it's from a lot of people but he's he's the guest on the show who is most",
    "start": "3075240",
    "end": "3082079"
  },
  {
    "text": "associated with it uh you could use you know lots of things I like how caddy does it where with caddy the canonical",
    "start": "3082079",
    "end": "3089680"
  },
  {
    "text": "language that caddy understands is Json but they have adapters right and so if",
    "start": "3089680",
    "end": "3095040"
  },
  {
    "text": "you want to write yaml you can but it'll just take that yaml and turn it into Json behind the scenes and then they",
    "start": "3095040",
    "end": "3101000"
  },
  {
    "text": "also have like a specific caddy language and so you can give it the caddy language and then it turns that into",
    "start": "3101000",
    "end": "3106559"
  },
  {
    "text": "Json behind the scenes and you can give it an engine X config and it'll turn that into Json behind the scenes I think",
    "start": "3106559",
    "end": "3112119"
  },
  {
    "text": "that's like that is probably like if you have the cycles and time to spare that's probably the best solution for most",
    "start": "3112119",
    "end": "3118720"
  },
  {
    "text": "people but when the only way to do it is yaml it's like no it's just too arrone",
    "start": "3118720",
    "end": "3125799"
  },
  {
    "text": "there's too many things you just have to always quote everything you just have to quote properly quote properly don't for",
    "start": "3125799",
    "end": "3134160"
  },
  {
    "text": "you know quote everything you make sure you have the right number of tabs and the right number of spaces you know just",
    "start": "3134160",
    "end": "3139960"
  },
  {
    "text": "don't you know indentations you know like if you ever done python you know you know the life of of have any",
    "start": "3139960",
    "end": "3145640"
  },
  {
    "text": "appropriate spacing and things so yeah it well just the yel specification has all these features that nobody ever uses",
    "start": "3145640",
    "end": "3152760"
  },
  {
    "text": "which because they're like really confusing and hard and it's like you can include documents inside of other",
    "start": "3152760",
    "end": "3159440"
  },
  {
    "text": "documents with references and stuff and it's like oh man I don't want to have to understand any of this stuff and then if",
    "start": "3159440",
    "end": "3165599"
  },
  {
    "text": "you're not careful it'll be like oh yeah the first three things I fed it to understood that but then the third one was just like using some parser that",
    "start": "3165599",
    "end": "3172520"
  },
  {
    "text": "they found on the back of a truck and it doesn't understand it and it's like oh man yaml never appropriate XML sometimes",
    "start": "3172520",
    "end": "3180559"
  },
  {
    "text": "appropriate I have equal dislike for for yaml like there's been a few too many times I'm trying to like configure something in kubernetes and I'm like why",
    "start": "3180559",
    "end": "3186599"
  },
  {
    "text": "isn't this working it's like oh you didn't tab this over or enough or You tab this thing over too much or and I'm",
    "start": "3186599",
    "end": "3191680"
  },
  {
    "text": "like this is this is obnoxious for XML though I I do I'm a big fan of XML",
    "start": "3191680",
    "end": "3197400"
  },
  {
    "text": "mostly because you have like name spaces and things in XML which allows you to actually compose things better like if",
    "start": "3197400",
    "end": "3204520"
  },
  {
    "text": "you want that with like Jason you have to use like Jason LD or something like that um which makes it a lot more",
    "start": "3204520",
    "end": "3210079"
  },
  {
    "text": "interoperable than other things I think the the main problem with XML is that like it's not quote unquote readable or",
    "start": "3210079",
    "end": "3215839"
  },
  {
    "text": "people don't like to read it but I don't think people like to read any of these formats like human readability probably shouldn't be the same thing we're trying",
    "start": "3215839",
    "end": "3222960"
  },
  {
    "text": "to achieve with like an efficient machine format because machines like lots of very detailed information and",
    "start": "3222960",
    "end": "3228839"
  },
  {
    "text": "humans don't like looking at lots of detailed information we want like syntax and colors and pretty things to help us",
    "start": "3228839",
    "end": "3235280"
  },
  {
    "text": "parse out information yeah I I think as far as your opinion goes yes like just",
    "start": "3235280",
    "end": "3241319"
  },
  {
    "text": "dumpster all of Y yl use but I'm like use XML for more things I'm like I you know if you want",
    "start": "3241319",
    "end": "3247200"
  },
  {
    "text": "to configure a Ser with XML that's fine but like provide some useful tools to like present the configuration to humans",
    "start": "3247200",
    "end": "3253599"
  },
  {
    "text": "or or things like that because yeah trying to read XML like just a Big Blob",
    "start": "3253599",
    "end": "3259839"
  },
  {
    "text": "of it is just unfun well it's just tricky right like Jon got lucky that they found the primitive types that",
    "start": "3259839",
    "end": "3266040"
  },
  {
    "text": "solve a lot of people's uses of like okay if you have numbers you have strings arrays objects bu that's all you",
    "start": "3266040",
    "end": "3274480"
  },
  {
    "text": "need usually I would say the big problem with Json is there's nothing for um uh time stamps or date times uh so that's",
    "start": "3274480",
    "end": "3282760"
  },
  {
    "text": "like something you run into a whole lot of like uh you know Json is almost right except for it doesn't have the date time",
    "start": "3282760",
    "end": "3289760"
  },
  {
    "text": "XML I think the issue is that it's like it's all strings and it's like and then you have to add the other layer on on",
    "start": "3289760",
    "end": "3295359"
  },
  {
    "text": "top and so if you're somebody and you're like oh I'm going to use XML for this thing and I need it to be true or false",
    "start": "3295359",
    "end": "3301760"
  },
  {
    "text": "it's like okay in this one is it that there's an attribute called true or is it called yes or is it called on or is",
    "start": "3301760",
    "end": "3309880"
  },
  {
    "text": "there like a tag and there's a subtag called on and stuff like that I mean it's all things that you can work out",
    "start": "3309880",
    "end": "3315680"
  },
  {
    "text": "and if you have you know if you have the schema if you have the convention of like okay in this application we always",
    "start": "3315680",
    "end": "3322440"
  },
  {
    "text": "do booleans this way then it's not a big deal but I think for something where it's like you're just trying to generically",
    "start": "3322440",
    "end": "3329440"
  },
  {
    "text": "communicate it from one thing to another it can be a little bit tricky and that's where I I think XML got a bad reputation",
    "start": "3329440",
    "end": "3336079"
  },
  {
    "text": "yeah I feel the problem with Jason is that you you have to do everything based on conventions right there's no way to say that like you can't change the name",
    "start": "3336079",
    "end": "3342160"
  },
  {
    "text": "from like first name to name or like everything will break which is like that but again but there's Jason LD to help",
    "start": "3342160",
    "end": "3348240"
  },
  {
    "text": "with that the thing I really don't like about Jason as well is that everything is like a 53 bit floating Point number",
    "start": "3348240",
    "end": "3353760"
  },
  {
    "text": "don't use that 54th bit B that's not for you it's like some numbers you can't represent or",
    "start": "3353760",
    "end": "3361079"
  },
  {
    "text": "like you know the the I want this to be go 1.20 but you're you're taking this as a number so you think it's 1.2 and like",
    "start": "3361079",
    "end": "3368680"
  },
  {
    "text": "I really meant that to be a strength and I have to like quote this and whatnot so it's it's all a lot of like edges and",
    "start": "3368680",
    "end": "3374839"
  },
  {
    "text": "trade-offs and all of that but yeah I don't I don't think anybody has time for yaml like that it gots to go like I mean",
    "start": "3374839",
    "end": "3381680"
  },
  {
    "text": "the Json spec definitely has like flaws it lets you have the same key twice and like officially that's allowed but like",
    "start": "3381680",
    "end": "3390480"
  },
  {
    "text": "discouraged or something but like in practice it's like no you're just going to break everything don't do that that's a bug yeah that's a bug I mean the go",
    "start": "3390480",
    "end": "3397319"
  },
  {
    "text": "parser not that's a bug I think it it like it puts up with it uh the go Json",
    "start": "3397319",
    "end": "3403480"
  },
  {
    "text": "encoder decoder will put up with the same key being in there twice but you know don't do it it's it's just going to",
    "start": "3403480",
    "end": "3410039"
  },
  {
    "text": "break stuff and make problems oh yeah oh yeah yeah wait joh are you a fan of yaml",
    "start": "3410039",
    "end": "3416200"
  },
  {
    "text": "do you do you like yaml you know at at this point I've written so much damn",
    "start": "3416200",
    "end": "3421559"
  },
  {
    "text": "cloud formation in yaml that it's like SI nature to me now I don't mind it I",
    "start": "3421559",
    "end": "3426720"
  },
  {
    "text": "I've come across all the weird ways yaml can break because I write all my cloud",
    "start": "3426720",
    "end": "3432720"
  },
  {
    "text": "formation yo by hand so yeah I I am I would not trade that in for XML though",
    "start": "3432720",
    "end": "3439920"
  },
  {
    "text": "or even Json for that matter um do you um do you run it through something like prettier or something that like config",
    "start": "3439920",
    "end": "3446039"
  },
  {
    "text": "checks it and like makes sure that you didn't like put the spaces in the wrong place or something I used to and then they started behaving weirdly at times",
    "start": "3446039",
    "end": "3452880"
  },
  {
    "text": "and I don't have that I don't have any of those",
    "start": "3452880",
    "end": "3457400"
  },
  {
    "text": "things I don't have any of those things I'm like I not I'm the computer I'm like you know I'm the computer now um yeah",
    "start": "3458000",
    "end": "3464480"
  },
  {
    "text": "I'm like seriously like the think I'm I'm I'm like literally like I'm touching yo every day I'm touching clamation",
    "start": "3464480",
    "end": "3470440"
  },
  {
    "text": "every day so now I know all the all the where all the bodies are buried so yeah I mean like I think that you know none",
    "start": "3470440",
    "end": "3476119"
  },
  {
    "text": "of these are fun to write by hand or like Jay and XML are definitely not fun to write by hand yaml is like okayish if",
    "start": "3476119",
    "end": "3481960"
  },
  {
    "text": "you do it every day like you do Johnny but I think that's why we have things like Q as well that are up and coming and people being like okay let's let's",
    "start": "3481960",
    "end": "3488640"
  },
  {
    "text": "try and solve like the writing human writable and readable configuration and then turn that into other stuff so",
    "start": "3488640",
    "end": "3495799"
  },
  {
    "text": "perhaps one day in the future we can replace yaml with something like Q or some other like slightly nicer to use",
    "start": "3495799",
    "end": "3502720"
  },
  {
    "text": "format for the people that that want it and the kind of yaml Warriors like yourself Johnny can uh keep on keeping",
    "start": "3502720",
    "end": "3508799"
  },
  {
    "text": "on I it's like you know people write python all the time and it's fine so it's like yeah yeah white space eliminated things are not know unusable",
    "start": "3508799",
    "end": "3516559"
  },
  {
    "text": "it's just you know people that don't write it that often might stumble upon stuff and we should yeah and there are",
    "start": "3516559",
    "end": "3521760"
  },
  {
    "text": "tools for these people like you know like in my case in my ecosystem because I'm doing Cloud stuff all the time in",
    "start": "3521760",
    "end": "3527000"
  },
  {
    "text": "AWS you know if you want to you can use the cdk which will generate yo for you and it'll be you know perfectly syntax",
    "start": "3527000",
    "end": "3534240"
  },
  {
    "text": "you know yaml and again you can have tools that generate the yaml for you if that's not your cup of tea right I'm",
    "start": "3534240",
    "end": "3539920"
  },
  {
    "text": "just so used to working with it every day that it doesn't bother me at this point but yeah I can totally I just don't the XML bit though Carl you",
    "start": "3539920",
    "end": "3549480"
  },
  {
    "text": "got I have scar tissue from XML man Johnny you've been working a little longer than I have so you probably saw",
    "start": "3549599",
    "end": "3555839"
  },
  {
    "text": "like when XML was like really abusing people I think I came in late enough that like I had like heard all the tales",
    "start": "3555839",
    "end": "3562960"
  },
  {
    "text": "of people being hurt by XML but like everybody had switched to Json when I started yeah it yeah there's a whole o",
    "start": "3562960",
    "end": "3570160"
  },
  {
    "text": "yeah some some of us have uh battle scars from from the good old xslt days",
    "start": "3570160",
    "end": "3576559"
  },
  {
    "text": "the old you know XML and and all like variant upon variants of like H yeah I",
    "start": "3576559",
    "end": "3583039"
  },
  {
    "text": "don't want to relive those days like I'll take y am all over that nonsense any day but I mean I you know granted",
    "start": "3583039",
    "end": "3589039"
  },
  {
    "text": "there's a lots of Legacy systems that run and operate on that stuff today so I can't knock it it's just not in a modern",
    "start": "3589039",
    "end": "3596480"
  },
  {
    "text": "day if you're going to pick you know a markup or any sort of configuration language ex unless you like somebody",
    "start": "3596480",
    "end": "3602680"
  },
  {
    "text": "from on high says you can't use any modern techniques or languages you know then yeah stay away from XML please I",
    "start": "3602680",
    "end": "3608280"
  },
  {
    "text": "mean maybe this is an unpopular opinion I just I think Engineers probably shouldn't have to touch these things in their day-to-day anyway like I think",
    "start": "3608280",
    "end": "3615119"
  },
  {
    "text": "part of the the problem we have is H especially when it comes to apis and trying to evolve things is that like you",
    "start": "3615119",
    "end": "3620480"
  },
  {
    "text": "know HP is this wonderful protocol that you can do all this nice content negot iation for and no one can do it because",
    "start": "3620480",
    "end": "3628160"
  },
  {
    "text": "like I don't know you're like hey API send me back this other thing it's like how about Jason that's all I'm going to",
    "start": "3628160",
    "end": "3633400"
  },
  {
    "text": "send to you because like everybody you know you choose one and then it's like I'm just going to use this one thing and",
    "start": "3633400",
    "end": "3639119"
  },
  {
    "text": "I feel like maybe we should just like not like have better abstraction layers on top like kind of like what Hugh does",
    "start": "3639119",
    "end": "3644280"
  },
  {
    "text": "where it's just like developers and engineers get to touch the nicer things and then the computers that are talking",
    "start": "3644280",
    "end": "3650000"
  },
  {
    "text": "to each other decide like oh I'll send this to you and Jason or I'll send this to you in XML or I'll send this to you in yaml and then people don't have to to",
    "start": "3650000",
    "end": "3656640"
  },
  {
    "text": "deal with that NY or prot or Proto buff or or whatever so I think like I wasn't around I wasn't heavily doing software",
    "start": "3656640",
    "end": "3663160"
  },
  {
    "text": "development during the good old XML days but it feels like perhaps part of the problem was that we were operating a",
    "start": "3663160",
    "end": "3668559"
  },
  {
    "text": "little too low in the stack and we're trying to do a too trying to do too many Advanced things without explaining to",
    "start": "3668559",
    "end": "3674160"
  },
  {
    "text": "people what what it is we were trying to do which is you know Growing Pains of an industry so so a number of episodes ago",
    "start": "3674160",
    "end": "3682280"
  },
  {
    "text": "uh I had this unpopular opinion that Johnny you you you heard something and I",
    "start": "3682280",
    "end": "3688160"
  },
  {
    "text": "said oh no no that's what you heard that's not what I said and it was about waterfall and the waterfall paper and I",
    "start": "3688160",
    "end": "3695319"
  },
  {
    "text": "said that the waterfall paper uh the the development process explained in the waterfall paper is far superior to what",
    "start": "3695319",
    "end": "3702400"
  },
  {
    "text": "to any of the practices we have today any of the development process we have today that was in fact an unpopular",
    "start": "3702400",
    "end": "3707880"
  },
  {
    "text": "opinion with our with our listeners but I don't think it should be so I have",
    "start": "3707880",
    "end": "3712920"
  },
  {
    "text": "written a blog post disagree and that blog post is now up live on the change",
    "start": "3712920",
    "end": "3718559"
  },
  {
    "text": "log website so nice if you want to uh go read why I think uh waterfall the",
    "start": "3718559",
    "end": "3724480"
  },
  {
    "text": "waterfall paper contains a very good software development process uh and also",
    "start": "3724480",
    "end": "3730079"
  },
  {
    "text": "perhaps improve your own process where the blog post is about things you can take from that paper and a few other",
    "start": "3730079",
    "end": "3735279"
  },
  {
    "text": "papers to make your software development process better no matter what your process is go check out that blog post",
    "start": "3735279",
    "end": "3741839"
  },
  {
    "text": "uh I think we can put that in the in the show notes as well all right F the folks who disagreed with Chris now you have",
    "start": "3741839",
    "end": "3747599"
  },
  {
    "text": "his written rebuttal to your disagreement he disagrees with your disagreement don't get a writer angry at",
    "start": "3747599",
    "end": "3753440"
  },
  {
    "text": "you yeah I know right yeah you will get you will get back",
    "start": "3753440",
    "end": "3758599"
  },
  {
    "text": "Words awesome that is that's been a great show thanks again Carl for coming on the show we'll see you in another six",
    "start": "3759279",
    "end": "3765599"
  },
  {
    "text": "months with the next release all right see you in six months with 1.22 I've got some good stuff cing in there I've",
    "start": "3765599",
    "end": "3771880"
  },
  {
    "text": "already nice I've already merged at least one thing into the oh no two I've already got two things into the 1.22 for",
    "start": "3771880",
    "end": "3779359"
  },
  {
    "text": "me to brag about when that comes out look I'll keep you guys on the edge of your seats for the next six months on",
    "start": "3779359",
    "end": "3784480"
  },
  {
    "text": "what they are nice nice oh we can go read the notes uh you know read the the the oh just like scan through the yeah",
    "start": "3784480",
    "end": "3791640"
  },
  {
    "text": "GitHub isso tracker you could do that too that fun the the commits the messages all that activity that's like",
    "start": "3791640",
    "end": "3796799"
  },
  {
    "text": "people who read the book before they watch the movie like no don't don't read the book First Watch the movie first",
    "start": "3796799",
    "end": "3802319"
  },
  {
    "text": "right they're like yeah oh that's a high went in the book awesome all right y'all and thanks Chris",
    "start": "3802319",
    "end": "3808640"
  },
  {
    "text": "for being my co-host and uh that is all we have for you",
    "start": "3808640",
    "end": "3814319"
  },
  {
    "text": "folks all right that is go time for this week what are your favorite new features",
    "start": "3816240",
    "end": "3821839"
  },
  {
    "text": "in go one21 anything in there you don't like let us know in the comments there's",
    "start": "3821839",
    "end": "3827680"
  },
  {
    "text": "a link in your show notes we'd love to hear from you oh and don't forget to check out change log news if you haven't",
    "start": "3827680",
    "end": "3833920"
  },
  {
    "text": "yet the software world moves fast keep up the easy way with our free podcast",
    "start": "3833920",
    "end": "3839079"
  },
  {
    "text": "plus email newsletter that drops on Mondays subscribe today at Chang log.com",
    "start": "3839079",
    "end": "3845200"
  },
  {
    "text": "newws thanks once again to our partners bass.com fly.io and types sense.org and to our",
    "start": "3845200",
    "end": "3852960"
  },
  {
    "text": "beat freak and residence breakmaster cylinder coming up next Natalie Johnny",
    "start": "3852960",
    "end": "3858520"
  },
  {
    "text": "and Chris welcome back V corvis to discuss prototyping with go stay tuned",
    "start": "3858520",
    "end": "3864279"
  },
  {
    "text": "right here we'll talk to you again next time on go",
    "start": "3864279",
    "end": "3869359"
  },
  {
    "text": "[Music]",
    "start": "3870110",
    "end": "3875639"
  },
  {
    "text": "[Music] time",
    "start": "3883370",
    "end": "3889839"
  }
]