[
  {
    "text": "the ability to re",
    "start": "240",
    "end": "2280"
  },
  {
    "text": "disable or remove the global interpreter",
    "start": "2280",
    "end": "6520"
  },
  {
    "text": "lock or the Gill as it so lovingly",
    "start": "6520",
    "end": "9519"
  },
  {
    "text": "referred to let's start at base",
    "start": "9519",
    "end": "11639"
  },
  {
    "text": "principles what is the Gill and then",
    "start": "11639",
    "end": "14280"
  },
  {
    "text": "after that why would you want to remove",
    "start": "14280",
    "end": "16440"
  },
  {
    "text": "it right so the the Gil is basically a",
    "start": "16440",
    "end": "19279"
  },
  {
    "text": "ginormous lock all around python so when",
    "start": "19279",
    "end": "22439"
  },
  {
    "text": "like python is really you know the",
    "start": "22439",
    "end": "24560"
  },
  {
    "text": "language but it's really doesn't exist",
    "start": "24560",
    "end": "26760"
  },
  {
    "text": "right like it's an abstraction and",
    "start": "26760",
    "end": "27960"
  },
  {
    "text": "really normally there is a second",
    "start": "27960",
    "end": "29199"
  },
  {
    "text": "language behind in C python is C which",
    "start": "29199",
    "end": "31400"
  },
  {
    "text": "is um C python is the the fall",
    "start": "31400",
    "end": "33040"
  },
  {
    "text": "implementation of python that normally",
    "start": "33040",
    "end": "34480"
  },
  {
    "text": "people use there there are others um but",
    "start": "34480",
    "end": "36960"
  },
  {
    "text": "then um the like the when when the when",
    "start": "36960",
    "end": "39840"
  },
  {
    "text": "the this program that is the python",
    "start": "39840",
    "end": "41360"
  },
  {
    "text": "interpreter is executing python code um",
    "start": "41360",
    "end": "43840"
  },
  {
    "text": "you know it can have multiple threats at",
    "start": "43840",
    "end": "45520"
  },
  {
    "text": "the same time and all these like little",
    "start": "45520",
    "end": "47960"
  },
  {
    "text": "objects that python exposes um could be",
    "start": "47960",
    "end": "50320"
  },
  {
    "text": "mutated at the same time which is a",
    "start": "50320",
    "end": "51920"
  },
  {
    "text": "problem uh and python in particular see",
    "start": "51920",
    "end": "53800"
  },
  {
    "text": "python as well and most of the",
    "start": "53800",
    "end": "55320"
  },
  {
    "text": "implementations is reference counted",
    "start": "55320",
    "end": "57359"
  },
  {
    "text": "this means that to decide if an object",
    "start": "57359",
    "end": "59239"
  },
  {
    "text": "is still alive or you can The",
    "start": "59239",
    "end": "60800"
  },
  {
    "text": "Interpreter can actually get rid of it",
    "start": "60800",
    "end": "62519"
  },
  {
    "text": "we have this little number inside every",
    "start": "62519",
    "end": "64439"
  },
  {
    "text": "object that tells how many um different",
    "start": "64439",
    "end": "66960"
  },
  {
    "text": "structors or fields are using it right",
    "start": "66960",
    "end": "69880"
  },
  {
    "text": "and when this number reaches zero we",
    "start": "69880",
    "end": "71439"
  },
  {
    "text": "know that we can remove it right but as",
    "start": "71439",
    "end": "73640"
  },
  {
    "text": "any person who has done some multi-",
    "start": "73640",
    "end": "75720"
  },
  {
    "text": "thread and multi threading uh in",
    "start": "75720",
    "end": "77759"
  },
  {
    "text": "computer science knows uh having a",
    "start": "77759",
    "end": "79799"
  },
  {
    "text": "little number being mutated by multiple",
    "start": "79799",
    "end": "81680"
  },
  {
    "text": "threats at the same time is not one um",
    "start": "81680",
    "end": "84479"
  },
  {
    "text": "so the solution is basically to add a g",
    "start": "84479",
    "end": "87720"
  },
  {
    "text": "normous lock All Around The Interpreter",
    "start": "87720",
    "end": "89920"
  },
  {
    "text": "so because we don't know what the",
    "start": "89920",
    "end": "92159"
  },
  {
    "text": "threats are doing we need to just",
    "start": "92159",
    "end": "93439"
  },
  {
    "text": "basically lock the entire thing so this",
    "start": "93439",
    "end": "95280"
  },
  {
    "text": "means that only one threat at a time can",
    "start": "95280",
    "end": "97880"
  },
  {
    "text": "be accessing python code and executing",
    "start": "97880",
    "end": "99880"
  },
  {
    "text": "python code which means that you you can",
    "start": "99880",
    "end": "102720"
  },
  {
    "text": "still use threads because those threads",
    "start": "102720",
    "end": "104399"
  },
  {
    "text": "can switch from one to the other which",
    "start": "104399",
    "end": "106159"
  },
  {
    "text": "is what we call concurrency like you",
    "start": "106159",
    "end": "108079"
  },
  {
    "text": "don't need to wait until one thre",
    "start": "108079",
    "end": "110000"
  },
  {
    "text": "finishes to start the other so they",
    "start": "110000",
    "end": "111719"
  },
  {
    "text": "inter leave but there's no parallelism",
    "start": "111719",
    "end": "114000"
  },
  {
    "text": "really because like um only one thread",
    "start": "114000",
    "end": "115960"
  },
  {
    "text": "at a time can be executing uh python",
    "start": "115960",
    "end": "118079"
  },
  {
    "text": "code which which is a big problem in",
    "start": "118079",
    "end": "120280"
  },
  {
    "text": "these days when we have you know",
    "start": "120280",
    "end": "122000"
  },
  {
    "text": "machines with the 120 something cores in",
    "start": "122000",
    "end": "125479"
  },
  {
    "text": "if you have thre Reaper or or or servers",
    "start": "125479",
    "end": "127640"
  },
  {
    "text": "right or even your phone right like your",
    "start": "127640",
    "end": "129440"
  },
  {
    "text": "phone have plenty of cores and right now",
    "start": "129440",
    "end": "133080"
  },
  {
    "text": "you are running python on iOS which is",
    "start": "133080",
    "end": "135599"
  },
  {
    "text": "now a think by the way so what you're",
    "start": "135599",
    "end": "137519"
  },
  {
    "text": "saying is when running python you can",
    "start": "137519",
    "end": "141239"
  },
  {
    "text": "switch quickly between cores but you",
    "start": "141239",
    "end": "144120"
  },
  {
    "text": "can't actually run the same code on",
    "start": "144120",
    "end": "146800"
  },
  {
    "text": "multiple cores at the exact same time so",
    "start": "146800",
    "end": "148640"
  },
  {
    "text": "you're saying it's concurrent but it's",
    "start": "148640",
    "end": "150239"
  },
  {
    "text": "not parallel because of that lock one at",
    "start": "150239",
    "end": "153959"
  },
  {
    "text": "a time and it can switch the at the",
    "start": "153959",
    "end": "155879"
  },
  {
    "text": "speed of light but no true parallelism",
    "start": "155879",
    "end": "159239"
  },
  {
    "text": "until now right so um there were a few",
    "start": "159239",
    "end": "163760"
  },
  {
    "text": "ways in which we worked around this",
    "start": "163760",
    "end": "165879"
  },
  {
    "text": "obviously huge design limitation um so",
    "start": "165879",
    "end": "169519"
  },
  {
    "text": "there are plenty of cases in which we're",
    "start": "169519",
    "end": "171560"
  },
  {
    "text": "confident we can drop the global",
    "start": "171560",
    "end": "173519"
  },
  {
    "text": "interpretor lock for what is happening",
    "start": "173519",
    "end": "175239"
  },
  {
    "text": "on a particular thread so if your",
    "start": "175239",
    "end": "177840"
  },
  {
    "text": "particular thread is uh do doing some",
    "start": "177840",
    "end": "180360"
  },
  {
    "text": "big numpy computation that is only on",
    "start": "180360",
    "end": "183040"
  },
  {
    "text": "the sides of numbers that are not shared",
    "start": "183040",
    "end": "185159"
  },
  {
    "text": "as python objects like you can drop the",
    "start": "185159",
    "end": "187599"
  },
  {
    "text": "glob lock in the time that this",
    "start": "187599",
    "end": "189720"
  },
  {
    "text": "computation happens so you can let other",
    "start": "189720",
    "end": "192280"
  },
  {
    "text": "threads execute python in the time if",
    "start": "192280",
    "end": "194640"
  },
  {
    "text": "your thread is waiting on a blocking",
    "start": "194640",
    "end": "196400"
  },
  {
    "text": "network connection uh it also does not",
    "start": "196400",
    "end": "199120"
  },
  {
    "text": "need to hold the lock because um that",
    "start": "199120",
    "end": "201519"
  },
  {
    "text": "particular moment in time there is not",
    "start": "201519",
    "end": "203920"
  },
  {
    "text": "going to be any python code executing so",
    "start": "203920",
    "end": "205959"
  },
  {
    "text": "you can give that Gil right to somebody",
    "start": "205959",
    "end": "208959"
  },
  {
    "text": "else so there are um special cases in",
    "start": "208959",
    "end": "212400"
  },
  {
    "text": "which we were already um sort of",
    "start": "212400",
    "end": "215599"
  },
  {
    "text": "parallel more than not but it is very",
    "start": "215599",
    "end": "219080"
  },
  {
    "text": "implicit um it depends on us carefully",
    "start": "219080",
    "end": "222319"
  },
  {
    "text": "finding all those special cases and",
    "start": "222319",
    "end": "224159"
  },
  {
    "text": "enabling them um and in the end it does",
    "start": "224159",
    "end": "227760"
  },
  {
    "text": "not scale for regular user application",
    "start": "227760",
    "end": "230080"
  },
  {
    "text": "so if you just write python code that",
    "start": "230080",
    "end": "232560"
  },
  {
    "text": "Loops over things and you know just",
    "start": "232560",
    "end": "235079"
  },
  {
    "text": "execute some string concatenations",
    "start": "235079",
    "end": "237000"
  },
  {
    "text": "that's like all these regular things",
    "start": "237000",
    "end": "239079"
  },
  {
    "text": "that you expect from a Python program",
    "start": "239079",
    "end": "241480"
  },
  {
    "text": "most of the time you're not going to be",
    "start": "241480",
    "end": "242959"
  },
  {
    "text": "seeing any parallelism there well and",
    "start": "242959",
    "end": "246159"
  },
  {
    "text": "what is worse um one important thing",
    "start": "246159",
    "end": "248159"
  },
  {
    "text": "here is that is is um technically Gil is",
    "start": "248159",
    "end": "250480"
  },
  {
    "text": "more than just a lock it's a condition",
    "start": "250480",
    "end": "252400"
  },
  {
    "text": "variable which is a very specific kind",
    "start": "252400",
    "end": "254200"
  },
  {
    "text": "of synchronization primitive it's a",
    "start": "254200",
    "end": "255959"
  },
  {
    "text": "Boolean that tells you you have it or",
    "start": "255959",
    "end": "257440"
  },
  {
    "text": "not uh and an actual lock and uh the",
    "start": "257440",
    "end": "260720"
  },
  {
    "text": "thing is that you cannot you cannot",
    "start": "260720",
    "end": "262560"
  },
  {
    "text": "select which like when when one thread",
    "start": "262560",
    "end": "264840"
  },
  {
    "text": "says I don't need the Gil like someone",
    "start": "264840",
    "end": "266400"
  },
  {
    "text": "else you know pick it up you cannot",
    "start": "266400",
    "end": "268680"
  },
  {
    "text": "select which one is going to to do it",
    "start": "268680",
    "end": "270240"
  },
  {
    "text": "like this is up to the OS like you're",
    "start": "270240",
    "end": "272520"
  },
  {
    "text": "using Linux so the Linux can decid who",
    "start": "272520",
    "end": "274360"
  },
  {
    "text": "is the next one and this can be not",
    "start": "274360",
    "end": "276720"
  },
  {
    "text": "great because like the Linux girl may",
    "start": "276720",
    "end": "278039"
  },
  {
    "text": "not know what you're doing so you can",
    "start": "278039",
    "end": "279800"
  },
  {
    "text": "have one",
    "start": "279800",
    "end": "283000"
  }
]