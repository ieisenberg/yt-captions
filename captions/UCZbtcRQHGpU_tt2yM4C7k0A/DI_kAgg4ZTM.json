[
  {
    "text": "bandwith for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at change log because of rbar check them out at rar.com and we're hosted on linode cloud",
    "start": "5520",
    "end": "11840"
  },
  {
    "text": "servers at the lin.com changelog what's up Gophers it's not too",
    "start": "11840",
    "end": "17320"
  },
  {
    "text": "late if you're planning to attend ccon Cloud native con here in North America later this November know that we have",
    "start": "17320",
    "end": "23720"
  },
  {
    "text": "just entered late registration pricing but you can still save 10% off your registration when you use our code KC na",
    "start": "23720",
    "end": "31439"
  },
  {
    "text": "changelog 19 again that's KY na changelog 19 check the CH for links to",
    "start": "31439",
    "end": "37040"
  },
  {
    "text": "learn more and [Music]",
    "start": "37040",
    "end": "42380"
  },
  {
    "text": "register welcome to go time a podcast featuring a diverse panel and special guests discussing Cloud infrastructure",
    "start": "52960",
    "end": "59600"
  },
  {
    "text": "just distributed systems microservices kubernetes Docker oh and also go we",
    "start": "59600",
    "end": "65158"
  },
  {
    "text": "record live every Tuesday at 300 p.m. Eastern new Pacific join the community and slack with us in real time during",
    "start": "65159",
    "end": "70840"
  },
  {
    "text": "the show in the go time FM channel in go for slack follow us on Twitter we're at gotime FM listen live at Chang law.com",
    "start": "70840",
    "end": "78159"
  },
  {
    "text": "or subscribe at changel law.com gotime and now on to the",
    "start": "78159",
    "end": "84799"
  },
  {
    "text": "show hello everybody Welcome To Go time I'm here with Manish Shane or Jean",
    "start": "85840",
    "end": "91799"
  },
  {
    "text": "Manish Jen Jen sorry and then I'm also here with Carl Maguire Carl you want to say hi hey everyone and Johnny Boro",
    "start": "91799",
    "end": "99640"
  },
  {
    "text": "hello there good to be back and I am John Calhoun today we're going to be talking about cashing so we just want to",
    "start": "99640",
    "end": "106079"
  },
  {
    "text": "talk a little bit about what it is to start um why it's useful that sort of thing and then Manish and Carl are both",
    "start": "106079",
    "end": "112600"
  },
  {
    "text": "from uh degraph and they recently released a caching Library I believe is it a library yes yes it is a library",
    "start": "112600",
    "end": "120640"
  },
  {
    "text": "yes so they released a caching library that we want to talk about a little bit so you guys can uh you know learn a little bit about what they learned",
    "start": "120640",
    "end": "126719"
  },
  {
    "text": "building it um why they built it what problems it solves that sort of thing okay so to get started do you guys",
    "start": "126719",
    "end": "133959"
  },
  {
    "text": "want to tell us you know just or anybody I guess talk about what caching is and",
    "start": "133959",
    "end": "139120"
  },
  {
    "text": "you know why it's useful so computer systems these days are limited by uh the",
    "start": "139120",
    "end": "145319"
  },
  {
    "text": "speed of the internal components and and the fastest component that any computer system has uh tends to be the ram right",
    "start": "145319",
    "end": "153160"
  },
  {
    "text": "uh after that the faster one would be uh lower than Ram would be ssds and then",
    "start": "153160",
    "end": "158680"
  },
  {
    "text": "comes hard disks and um systems in general have a have a problem of trying",
    "start": "158680",
    "end": "164319"
  },
  {
    "text": "to store the data in the in a cheap possible way while also trying to make the request as fast as possible so you",
    "start": "164319",
    "end": "172120"
  },
  {
    "text": "are doing this this juggling between keeping data in a ram which is more expensive uh quite limited versus",
    "start": "172120",
    "end": "179159"
  },
  {
    "text": "keeping data dis which is cheaper and you can fit a lot of data in there so",
    "start": "179159",
    "end": "184200"
  },
  {
    "text": "the job of a good cache is to is to try to um keep the data in Ram so that any",
    "start": "184200",
    "end": "192159"
  },
  {
    "text": "future requests can be served faster than having to read it back again from from any disk um and so caches are",
    "start": "192159",
    "end": "200599"
  },
  {
    "text": "typically judged by you know U the terms used are hit ratios or mis ratios um and",
    "start": "200599",
    "end": "207720"
  },
  {
    "text": "a typical hit to miss ratio would would show how effective a cash was in serving",
    "start": "207720",
    "end": "213640"
  },
  {
    "text": "the request from the ram instead of going back to the dis uh or any other system outside so one of the things that",
    "start": "213640",
    "end": "222519"
  },
  {
    "text": "um I think it's worth also um um level setting here is that we're we're talking about a caching sort of Library not a",
    "start": "222519",
    "end": "229519"
  },
  {
    "text": "caching server right so a lot of developers are typically in the mindset of thinking that well maybe I'll use",
    "start": "229519",
    "end": "235120"
  },
  {
    "text": "redis or something which is a popular caching um server or maybe I'll use some other thing you know along those lines",
    "start": "235120",
    "end": "240799"
  },
  {
    "text": "but what we're talking about here is not something that's going to going to go over the network this is something that's that's on host correct that is",
    "start": "240799",
    "end": "247200"
  },
  {
    "text": "correct the idea of R stradle was to be used within our other systems uh like",
    "start": "247200",
    "end": "254040"
  },
  {
    "text": "Badger which is the embedded key value database uh and more importantly in degraph which is a server which which",
    "start": "254040",
    "end": "261479"
  },
  {
    "text": "you kind of like go over the network with um but uh again we want to make sure that we are being effective in in",
    "start": "261479",
    "end": "268240"
  },
  {
    "text": "our request resolution now as you mentioned there is Reddit there is M cached which are essentially",
    "start": "268240",
    "end": "274600"
  },
  {
    "text": "caches but over a network interface so you can dedicate an entire system just",
    "start": "274600",
    "end": "279720"
  },
  {
    "text": "for the cach itself and funny enough Google's web search index the the top",
    "start": "279720",
    "end": "284880"
  },
  {
    "text": "tier of the index is running in this thing called Mustang which is completely in Ram as well um so I would say a good",
    "start": "284880",
    "end": "292600"
  },
  {
    "text": "cach like RR could be make could be made to work as a network network system um",
    "start": "292600",
    "end": "299320"
  },
  {
    "text": "but that's not what it does out of the book we talk about like you know using an in-memory cache I I it's not",
    "start": "299320",
    "end": "306479"
  },
  {
    "text": "necessarily new but I feel like more recently people are starting to use them",
    "start": "306479",
    "end": "311560"
  },
  {
    "text": "for much much larger data sets do you think that just has to do with the fact that Ram is getting cheaper and it's possible to stick much larger data sets",
    "start": "311560",
    "end": "318479"
  },
  {
    "text": "into a cache or are there other reasons for that I would say Ram is definitely",
    "start": "318479",
    "end": "323840"
  },
  {
    "text": "has got on a lot cheaper than before um at the same time I feel uh um people are",
    "start": "323840",
    "end": "331039"
  },
  {
    "text": "just more willing to dumb the data into cash these days because of how do I want",
    "start": "331039",
    "end": "337280"
  },
  {
    "text": "to say Advanced these systems have become radis can do quite a lot of things it can literally become your data",
    "start": "337280",
    "end": "342919"
  },
  {
    "text": "structure it can add to list it can do maps and sets and not that I have personally used redit at all but um um I",
    "start": "342919",
    "end": "351280"
  },
  {
    "text": "I think a lot of it probably also comes from how effectively Facebook put U used",
    "start": "351280",
    "end": "357919"
  },
  {
    "text": "mcash and us it in front of their all of their SQL queries um so I think just by",
    "start": "357919",
    "end": "366080"
  },
  {
    "text": "how willing the big companies have been and how generous they have been in using their caches people are more willing to",
    "start": "366080",
    "end": "371400"
  },
  {
    "text": "use the caches use the cash as well you talked about having the cash in front of like a SQL database um in this day and",
    "start": "371400",
    "end": "379400"
  },
  {
    "text": "age where a lot of people talk about like no SQL and things like that that scale more is that as much of a concern",
    "start": "379400",
    "end": "385639"
  },
  {
    "text": "now that you can realistically use C like use a cash of some sort rather than jumping straight to like a nosql",
    "start": "385639",
    "end": "391199"
  },
  {
    "text": "database I guess what I'm saying is is the database decision like trying to get something that's highly scalable as",
    "start": "391199",
    "end": "396720"
  },
  {
    "text": "important now that you know you probably could realistically get pretty large just using a SQL database and throwing",
    "start": "396720",
    "end": "402960"
  },
  {
    "text": "caches in front of that uh caching would only take you so far the the actually any good multiple version concurrency",
    "start": "402960",
    "end": "409680"
  },
  {
    "text": "control system um it's it becomes very hard to use cach in systems like those",
    "start": "409680",
    "end": "415479"
  },
  {
    "text": "which includes dgraph uh because every transaction could return slightly different results based upon what",
    "start": "415479",
    "end": "421840"
  },
  {
    "text": "happened just before um so I would say at least dcra and I think any good",
    "start": "421840",
    "end": "428800"
  },
  {
    "text": "database would try to avoid doing a query level caching um they would only do some data level caching uh and even",
    "start": "428800",
    "end": "435599"
  },
  {
    "text": "then would have to be sophisticated about it now I think the argument about",
    "start": "435599",
    "end": "440639"
  },
  {
    "text": "hey why don't I just use a cach in front of SQL instead of like having to use",
    "start": "440639",
    "end": "446120"
  },
  {
    "text": "let's say no SQL or having to use a graph system they they provide different things the functionality of a graph",
    "start": "446120",
    "end": "451919"
  },
  {
    "text": "database for example can be quite um I would say evolved uh you know and I'm",
    "start": "451919",
    "end": "458960"
  },
  {
    "text": "obviously biased I don't want to upset any SQL people uh but it just gives you a lot more functionality uh and it's",
    "start": "458960",
    "end": "465919"
  },
  {
    "text": "hard to achieve that like caching would not get you there um on on the on top of",
    "start": "465919",
    "end": "472919"
  },
  {
    "text": "that caching across multiple systems is also is also a hard thing because of just the race conditions involved um and",
    "start": "472919",
    "end": "480000"
  },
  {
    "text": "so and so forth so mcash for example gives you a a cast um compare and set u",
    "start": "480000",
    "end": "486159"
  },
  {
    "text": "counter so you know that if two different systems and try to update the same key they would one of them would",
    "start": "486159",
    "end": "492159"
  },
  {
    "text": "fail that almost becomes like a transaction but at a lot more Atomic level at a key level um so then if",
    "start": "492159",
    "end": "499639"
  },
  {
    "text": "you're put in your cach across systems you have to deal with those kind of issues and the more you deal with these things the the more complex your code",
    "start": "499639",
    "end": "506400"
  },
  {
    "text": "becomes and so on and so forth so so I think caching helps but it is not",
    "start": "506400",
    "end": "511440"
  },
  {
    "text": "replacement for the different functionality offered by different databases and the scale of these",
    "start": "511440",
    "end": "516919"
  },
  {
    "text": "databases and so on and so forth say I need to interact with um say I have an application that's basically you know",
    "start": "516919",
    "end": "522959"
  },
  {
    "text": "say it's a service right and it's using on my host it's using the caching library to cach something so if I if if",
    "start": "522959",
    "end": "529480"
  },
  {
    "text": "I have a multiple services that each have their own cache like is it is it",
    "start": "529480",
    "end": "534760"
  },
  {
    "text": "possible that I'm I'm depending on how you use it I would imagine but is it possible that if I hit one service is going to have data that another service",
    "start": "534760",
    "end": "541279"
  },
  {
    "text": "might not have right but because you don't you can't control which host you're going to hit therefore you can't control which data you're going to get",
    "start": "541279",
    "end": "546640"
  },
  {
    "text": "you're going to retrieve from which cash so like if if you need is there is there rather how how do you ensure that the",
    "start": "546640",
    "end": "552880"
  },
  {
    "text": "same data is on every node right when you're dealing with u um sort of the",
    "start": "552880",
    "end": "558200"
  },
  {
    "text": "cash on the host itself so I think I think a good Cash Cash Plus database",
    "start": "558200",
    "end": "563560"
  },
  {
    "text": "system let's say running on a single server uh would should appear seamless",
    "start": "563560",
    "end": "568720"
  },
  {
    "text": "to the caller so even if they're calling multiple different servers for let's say multiple different sets of data um the",
    "start": "568720",
    "end": "576640"
  },
  {
    "text": "cash should be smart enough to make sure that you are getting the latest version of the data um without the systems",
    "start": "576640",
    "end": "584640"
  },
  {
    "text": "having to know about the cache right so the systems themselves should be completely unaware that the other system",
    "start": "584640",
    "end": "590760"
  },
  {
    "text": "might be using a cach I think that's how I think a good cach should work like now obviously if you're running like cach",
    "start": "590760",
    "end": "597320"
  },
  {
    "text": "servers which are running outside of these systems Things become a bit more complicated with the RIS conditions and",
    "start": "597320",
    "end": "602800"
  },
  {
    "text": "so and so forth but if you're actually putting cash on the host itself you as a",
    "start": "602800",
    "end": "609079"
  },
  {
    "text": "as as an outside entity outside client or another server you would just made",
    "start": "609079",
    "end": "615320"
  },
  {
    "text": "the call as you would as if there was no cash and you should expect the same",
    "start": "615320",
    "end": "620880"
  },
  {
    "text": "results okay so from a from an application developer sort of perspective um I should expect that it's",
    "start": "620880",
    "end": "627079"
  },
  {
    "text": "quite possible that if a particular like client happens to hit you know a service that's in a host that hasn't perhaps",
    "start": "627079",
    "end": "633240"
  },
  {
    "text": "cashed a particular piece of data yet that there's going to be a little bit of latency what while while the the data is retrieved and and put into memory and",
    "start": "633240",
    "end": "640480"
  },
  {
    "text": "then return and then subsequent hits right um from the client could hit a server that either already has or",
    "start": "640480",
    "end": "646480"
  },
  {
    "text": "doesn't have the data right so that should be part of the how I should think about this as a developer that's right",
    "start": "646480",
    "end": "651560"
  },
  {
    "text": "yeah I think and and uh you know sometimes if you if you play with the let's say post Crest and you will shoot",
    "start": "651560",
    "end": "657480"
  },
  {
    "text": "a query to postest you can see the the first query tends to be relatively slow but then the the queries after that",
    "start": "657480",
    "end": "663760"
  },
  {
    "text": "become extremely fast and that is just the magic of the cach so I think some",
    "start": "663760",
    "end": "669800"
  },
  {
    "text": "some I mean I've seen in certain systems people people would have people would build this cash warmup um mechanism when",
    "start": "669800",
    "end": "679440"
  },
  {
    "text": "they run their servers so that it would pick up what they think would be a a decent initial set of data and then over",
    "start": "679440",
    "end": "687440"
  },
  {
    "text": "time it would just improve to to hopefully increase the hit ratios essentially that's what I think that's",
    "start": "687440",
    "end": "692480"
  },
  {
    "text": "what any cash is going for is to be utilized as frequently as possible to be",
    "start": "692480",
    "end": "697720"
  },
  {
    "text": "clear things like hit ratios and stuff like that only truly come into play when you don't have enough RAM to store",
    "start": "697720",
    "end": "703519"
  },
  {
    "text": "everything correct that is correct okay so like for anybody who's not familiar",
    "start": "703519",
    "end": "708720"
  },
  {
    "text": "with caching sometimes you can be lucky early on where you can query an API and get some sort of data or whatever it is",
    "start": "708720",
    "end": "714839"
  },
  {
    "text": "that happens to be pretty static and if you can store it all in memory your cash implementation almost doesn't matter",
    "start": "714839",
    "end": "720399"
  },
  {
    "text": "that much at that point because it's literally just throw it in memory and keep it there um I've actually done this",
    "start": "720399",
    "end": "725639"
  },
  {
    "text": "myself where you know I'm I'm hitting a couple things and and like pulling the data and then I'm basically rendering",
    "start": "725639",
    "end": "730720"
  },
  {
    "text": "markdown that's rendered into HTML from that point on so I can just store the HTML and I never have to hit that API",
    "start": "730720",
    "end": "736040"
  },
  {
    "text": "again so the first query is kind of like Johnny was saying it's slower like hitting a SQL database but after that",
    "start": "736040",
    "end": "742480"
  },
  {
    "text": "point it's very very fast so when Minish starts talking about uh you know having",
    "start": "742480",
    "end": "748040"
  },
  {
    "text": "hit rate you know good hit ratios and stuff like that what he's referring to is the fact that when you get to a point that not everything fits you have to",
    "start": "748040",
    "end": "754320"
  },
  {
    "text": "decide what do I throw out and what do I keep and that becomes a really complicated problem because you never",
    "start": "754320",
    "end": "760920"
  },
  {
    "text": "truly know what people are going to need next yeah along those lines I'm hoping you're going to get into sort of U the",
    "start": "760920",
    "end": "766760"
  },
  {
    "text": "cash and validation strategies that you use as well uh um you know to do that sort of a um um performant sort of a",
    "start": "766760",
    "end": "774279"
  },
  {
    "text": "jettison um that John's talking about that I think I think there could be that there there's some stories there you you",
    "start": "774279",
    "end": "780320"
  },
  {
    "text": "can probably tell um with regards to sort of um sort of the latency that's involved in there um Joel I must say",
    "start": "780320",
    "end": "787320"
  },
  {
    "text": "that I envy you when you say that your cash did not hit capacity and you could",
    "start": "787320",
    "end": "792880"
  },
  {
    "text": "just store everything in there that would be a great world to live in where",
    "start": "792880",
    "end": "798000"
  },
  {
    "text": "you can just put everything into RAM and never have to worry about it all your ques are super fast everything everybody's happy um but yes",
    "start": "798000",
    "end": "806839"
  },
  {
    "text": "unfortunately uh that's not the case now give you an example I think in decra we",
    "start": "806839",
    "end": "811920"
  },
  {
    "text": "we deal with terabytes of data and uh and the Rams even the most generous Rams",
    "start": "811920",
    "end": "818360"
  },
  {
    "text": "would be let's say 64 GB and some of thems I've heard about 128 GB there's a",
    "start": "818360",
    "end": "823560"
  },
  {
    "text": "RAM available in the system now that's actually pretty generous right uh I wouldn't expect every person to to give",
    "start": "823560",
    "end": "829320"
  },
  {
    "text": "us a system with 64 GB of RAM in any case it is still limited um",
    "start": "829320",
    "end": "835000"
  },
  {
    "text": "and that's when we run into the capacity of the cache uh and that's when we have to figure out clever ways to uh to",
    "start": "835000",
    "end": "842399"
  },
  {
    "text": "determine what we keep and what we uh kick out uh predicting the future is",
    "start": "842399",
    "end": "848320"
  },
  {
    "text": "extremely hard um but you basically just learn from the past and try to see what",
    "start": "848320",
    "end": "853720"
  },
  {
    "text": "is what would be valuable and that's what we have tried to do with this Strat",
    "start": "853720",
    "end": "860040"
  },
  {
    "text": "um in our in our implementation could we start with some history like what are",
    "start": "860040",
    "end": "865680"
  },
  {
    "text": "can we talk about I guess some of the like more basic C that people have started trying and started you started",
    "start": "865680",
    "end": "871040"
  },
  {
    "text": "out with to sort of figure this stuff out like I think one that most people have probably heard of is just a a least",
    "start": "871040",
    "end": "876360"
  },
  {
    "text": "recently used cache which is you know a relatively simple idea of something in",
    "start": "876360",
    "end": "881440"
  },
  {
    "text": "memory that you know what other object has been used least recently that's what you evict whenever you you know need to",
    "start": "881440",
    "end": "887480"
  },
  {
    "text": "replace it with something um I think that one's even common enough that I've seen it pop up in interview questions",
    "start": "887480",
    "end": "893360"
  },
  {
    "text": "which is slightly crazy but it it does pop up in interview questions and I think Java even has a Linked hashmap In",
    "start": "893360",
    "end": "901720"
  },
  {
    "text": "The Standard Library which is essentially at least recently used cach um it might not be the most efficient",
    "start": "901720",
    "end": "907000"
  },
  {
    "text": "one in the world I'm not sure but it you know it essentially serves that purpose so obviously that's a model people can",
    "start": "907000",
    "end": "913519"
  },
  {
    "text": "use why does that not work at scale you know why is that something that you know it it's relatively simple to understand",
    "start": "913519",
    "end": "920120"
  },
  {
    "text": "I think where you're you're just keeping track of what items were used most recently but why does that not end up",
    "start": "920120",
    "end": "925440"
  },
  {
    "text": "working at at scale when you're getting in large data sets uh I I think before we begin the discussion I should",
    "start": "925440",
    "end": "930720"
  },
  {
    "text": "probably like kind of explain the scale in this case uh by scale um at the at",
    "start": "930720",
    "end": "937319"
  },
  {
    "text": "the internal system uh memory level we're talking about scale in terms of the number of course the number of go",
    "start": "937319",
    "end": "943160"
  },
  {
    "text": "routines the number of concurrent lookups that could be happening uh as opposed to when we talk about database",
    "start": "943160",
    "end": "948680"
  },
  {
    "text": "scales we talk about different machines and and how much terabytes of data you can you can keep right so now scale in",
    "start": "948680",
    "end": "954839"
  },
  {
    "text": "this case is the number of concurrent excesses that could happen and uh so we",
    "start": "954839",
    "end": "960040"
  },
  {
    "text": "tried in degraph a bunch of different techniques right uh the the simplest thing that anybody could do is take a",
    "start": "960040",
    "end": "968199"
  },
  {
    "text": "take a u map Ino put a mutex Lo around it um and then for every get you just do",
    "start": "968199",
    "end": "975800"
  },
  {
    "text": "acquire the Lo and you do the retrieval now that would work and that works very",
    "start": "975800",
    "end": "981199"
  },
  {
    "text": "nicely uh for some basic use cases with with low concurrency but uh it becomes a",
    "start": "981199",
    "end": "986920"
  },
  {
    "text": "hard Challenge on what to evict and when um if you do it badly you would directly",
    "start": "986920",
    "end": "992839"
  },
  {
    "text": "affect your hit ratios which means that um things would actually slow down because note that a cash can also slow",
    "start": "992839",
    "end": "1000319"
  },
  {
    "text": "things down right uh cash is an extra step that you have to do you not only",
    "start": "1000319",
    "end": "1006240"
  },
  {
    "text": "you have to retrieve the data from the underlying uh hard disk or system Etc",
    "start": "1006240",
    "end": "1011519"
  },
  {
    "text": "you also have to first check in the cache if the data exists and then later on um put it into the into the cash uh",
    "start": "1011519",
    "end": "1019920"
  },
  {
    "text": "and that Lo acquisition and release can can uh become a source of contention as",
    "start": "1019920",
    "end": "1026079"
  },
  {
    "text": "we found in dgraph so in dgraph what we had done was we took the lru",
    "start": "1026079",
    "end": "1031720"
  },
  {
    "text": "implementation uh by group cache written by uh Brad Fitzpatrick of mcash Fame and",
    "start": "1031720",
    "end": "1037798"
  },
  {
    "text": "obviously the go team uh it was obviously a very nice nice implementation of L cach that we picked",
    "start": "1037799",
    "end": "1043520"
  },
  {
    "text": "up um we put a lock around it and we started using it and we knew that that",
    "start": "1043520",
    "end": "1048760"
  },
  {
    "text": "we had to optimize it at some point but um we did not realize how bad it",
    "start": "1048760",
    "end": "1054880"
  },
  {
    "text": "was uh at some point we looking at a particular query this is one year after",
    "start": "1054880",
    "end": "1060320"
  },
  {
    "text": "after implementing the system uh and we realize that if you were to remove the cash our queries would would would",
    "start": "1060320",
    "end": "1068400"
  },
  {
    "text": "improve by 5 to 10 times even like a 30% query Improvement",
    "start": "1068400",
    "end": "1074280"
  },
  {
    "text": "is a is a good day for an engineer but when you increase it 10 times that's uh",
    "start": "1074280",
    "end": "1079760"
  },
  {
    "text": "that's just incredible right so we immediately removed the cache and we started look around to see what we could",
    "start": "1079760",
    "end": "1085919"
  },
  {
    "text": "use and that's when the whole idea for RTO um started obviously you built this",
    "start": "1085919",
    "end": "1091760"
  },
  {
    "text": "for your specific needs but I'm assuming that you also sort of thought of this as like a more general purpose Library as",
    "start": "1091760",
    "end": "1098880"
  },
  {
    "text": "well like how did you go about deciding like how are we going to test this what what metrics matter the most for us",
    "start": "1098880",
    "end": "1105280"
  },
  {
    "text": "because I'm assuming it's like most software where there are some trade-offs it's really hard to like have the best",
    "start": "1105280",
    "end": "1110320"
  },
  {
    "text": "of everything so you know when you were trying to design that was it just mostly focused on your specific needs of a lot",
    "start": "1110320",
    "end": "1116600"
  },
  {
    "text": "of concurrency and a lot of uh you know queries like that or or do you just did you just sit down and come up with a",
    "start": "1116600",
    "end": "1122360"
  },
  {
    "text": "generic set of requirements um we felt like if we were to solve this problem we should do it in a in a generic enough",
    "start": "1122360",
    "end": "1129240"
  },
  {
    "text": "way that it would be generally useful to the co Community um and uh a lot of",
    "start": "1129240",
    "end": "1135720"
  },
  {
    "text": "times I I tell my Engineers that we stand on the the shoulders of giants there are people who have already solved",
    "start": "1135720",
    "end": "1142320"
  },
  {
    "text": "a lot of these problems and our job is to learn from them and then decide how",
    "start": "1142320",
    "end": "1148039"
  },
  {
    "text": "much of that we should be using and if if if we should be introducing new things of our own um so we've done that",
    "start": "1148039",
    "end": "1155919"
  },
  {
    "text": "for for example distributed transactions in drra we picked up from multiple different papers uh from spanner from",
    "start": "1155919",
    "end": "1161840"
  },
  {
    "text": "hpas from um uh big table uh transactions and so and so forth um and",
    "start": "1161840",
    "end": "1168880"
  },
  {
    "text": "then we ended up devising something which is a mixed strategy of all of these and in caching it was no different",
    "start": "1168880",
    "end": "1174280"
  },
  {
    "text": "We Came Upon um uh caffeine which is uh extremely efficient uh fast concurrent",
    "start": "1174280",
    "end": "1182240"
  },
  {
    "text": "cache in Java and it's being used by multiple databases in Java including I think Cassandra",
    "start": "1182240",
    "end": "1188200"
  },
  {
    "text": "neo4j and any big Java system um we reached out to the author of of that uh",
    "start": "1188200",
    "end": "1196760"
  },
  {
    "text": "cash uh Ben mains and Ben has been extremely helpful in helping us",
    "start": "1196760",
    "end": "1201919"
  },
  {
    "text": "understand his implementations he's written multiple papers about it and also like to to help us write um uh our",
    "start": "1201919",
    "end": "1210480"
  },
  {
    "text": "version of caffeine which is what we calling RR uh now we did not pick up",
    "start": "1210480",
    "end": "1216280"
  },
  {
    "text": "everything from caffeine because caffeine has been around for a while and they were uh they are more sophisticated",
    "start": "1216280",
    "end": "1222440"
  },
  {
    "text": "I would say than RR is uh but we came up with the initial good set for the Str",
    "start": "1222440",
    "end": "1229039"
  },
  {
    "text": "and I think some of the benchmarks that caffine had already WR",
    "start": "1229039",
    "end": "1234080"
  },
  {
    "text": "around concurrency around hit ratios Etc we learned from that now we wrote a blog",
    "start": "1234080",
    "end": "1241559"
  },
  {
    "text": "post about this before before we started talking to Ben uh about the state of caching in go and for that we just",
    "start": "1241559",
    "end": "1249520"
  },
  {
    "text": "showcased all the different caches that are available in the go ecosystem and just compared them and we wrote some",
    "start": "1249520",
    "end": "1255080"
  },
  {
    "text": "benchmarks for that which were around throughput of the cache Etc so we sort of like improved those",
    "start": "1255080",
    "end": "1262120"
  },
  {
    "text": "benchmarks we picked up more benchmarks from uh from Ben wrote them in go uh and",
    "start": "1262120",
    "end": "1267919"
  },
  {
    "text": "that became our our guiding sort of like light um so so I would say RR is",
    "start": "1267919",
    "end": "1275000"
  },
  {
    "text": "designed in a way where it is generally useful uh for the entire go ecosystem um",
    "start": "1275000",
    "end": "1282919"
  },
  {
    "text": "and that's when K uh sort of came into the picture he uh was recommended by Ben",
    "start": "1282919",
    "end": "1289000"
  },
  {
    "text": "uh and he came in and just started started uh [Music]",
    "start": "1289000",
    "end": "1304640"
  },
  {
    "text": "executing this episode is brought to you by team City team city is a continuous",
    "start": "1304640",
    "end": "1309679"
  },
  {
    "text": "integration and delivery server developed by Jeet brains that help software teams release their software faster get fast feedback on every commit",
    "start": "1309679",
    "end": "1317279"
  },
  {
    "text": "quickly invest instigate build failures and so much more in this segment I asked build engineer ol gavage from wargaming",
    "start": "1317279",
    "end": "1323200"
  },
  {
    "text": "who's been using team City for seven years about what he loves about team City so I love how easy it is to manage",
    "start": "1323200",
    "end": "1329720"
  },
  {
    "text": "team City on a daily basis um I don't have to hack any mysterious XML to configurate or make changes uh though",
    "start": "1329720",
    "end": "1337080"
  },
  {
    "text": "there is an ability to do that uh I choose not to uh I do most of my work through the UI I also like the fact that",
    "start": "1337080",
    "end": "1344000"
  },
  {
    "text": "I can customize a lot of Its Behavior either through the UI or or through custom programs that I wrote or through",
    "start": "1344000",
    "end": "1351039"
  },
  {
    "text": "uh plugins uh with their open API I don't think I could do my job without",
    "start": "1351039",
    "end": "1356440"
  },
  {
    "text": "the support that team City development team provides uh and I use that support at least weekly whether it's for new",
    "start": "1356440",
    "end": "1362880"
  },
  {
    "text": "features that I'm interested in or for bugs that we find uh they're very collaborative and you know honestly over",
    "start": "1362880",
    "end": "1368640"
  },
  {
    "text": "the past 10 years uh they've made my job so much easier you know I really owe them all right to get started with Team",
    "start": "1368640",
    "end": "1374320"
  },
  {
    "text": "City head to team city.com go time to learn more the Prof professional version of Team city is free even for commercial",
    "start": "1374320",
    "end": "1380679"
  },
  {
    "text": "use for large orgs you want to check out the team City Enterprise Edition and right now there's a 50% discount for our",
    "start": "1380679",
    "end": "1387919"
  },
  {
    "text": "listeners on team City Enterprise and as a bonus if you want a personal intro to",
    "start": "1387919",
    "end": "1393200"
  },
  {
    "text": "our friends at Team City they'll help you through your cicd path email me Adam cha.com head to team city.com go time to",
    "start": "1393200",
    "end": "1401000"
  },
  {
    "text": "learn more and give it a",
    "start": "1401000",
    "end": "1403840"
  },
  {
    "text": "try [Music]",
    "start": "1406880",
    "end": "1418979"
  },
  {
    "text": "so Carl how exactly did you start executing what were you working on um well actually Ben found me on GitHub and",
    "start": "1420120",
    "end": "1428840"
  },
  {
    "text": "uh one of the papers that Ben co-authored with a few other people was called uh tiny lfu so we're talking",
    "start": "1428840",
    "end": "1435840"
  },
  {
    "text": "about like the cash uh metadata as far as determining item value like what you",
    "start": "1435840",
    "end": "1442080"
  },
  {
    "text": "should what you should evict what you should uh let in um tiny lfu is a I",
    "start": "1442080",
    "end": "1448240"
  },
  {
    "text": "think it was yeah it was published um late 2015 and it's actually an it's called an",
    "start": "1448240",
    "end": "1455039"
  },
  {
    "text": "admission policy which I haven't really seen much of as far as in the literature and so we all heard the the lru eviction",
    "start": "1455039",
    "end": "1463440"
  },
  {
    "text": "uh policies and then the tiny lfu paper was basically a new way of of deciding",
    "start": "1463440",
    "end": "1469919"
  },
  {
    "text": "what you let into the cash with a small memory footprint and uh the eviction policy it wouldn't even matter it would",
    "start": "1469919",
    "end": "1476600"
  },
  {
    "text": "just increase the hit ratio um so I was writing my own implementation uh of course Ben was sort",
    "start": "1476600",
    "end": "1482760"
  },
  {
    "text": "of looking around on GitHub and uh I got linked up with dgraph and since then",
    "start": "1482760",
    "end": "1488559"
  },
  {
    "text": "we've we've kept uh the tiny lfu uh admission policy and we're actually",
    "start": "1488559",
    "end": "1493600"
  },
  {
    "text": "using the same counters uh for admission and EV eviction so rather than doing",
    "start": "1493600",
    "end": "1500320"
  },
  {
    "text": "like just standard lru eviction we're doing the sampled uh lfu eviction which",
    "start": "1500320",
    "end": "1506919"
  },
  {
    "text": "of uh we've seen like some some work done in reddis uh along those lines and",
    "start": "1506919",
    "end": "1511960"
  },
  {
    "text": "I think it's performing pretty well so far talk a little bit more about sort of the the admission decision the policy",
    "start": "1511960",
    "end": "1518799"
  },
  {
    "text": "that that sounds I must admit that sounds very unusual from what I'm used to in in caching systems like is is it",
    "start": "1518799",
    "end": "1526360"
  },
  {
    "text": "based on what like Lo what is it based on is it like the the frequency or the likelihood that something's going to be",
    "start": "1526360",
    "end": "1531880"
  },
  {
    "text": "asked for like what is that uh yeah you it's it's based on on the the access",
    "start": "1531880",
    "end": "1537120"
  },
  {
    "text": "counters so you can think of it each item when you try to set a new item it could either be accepted or rejected so",
    "start": "1537120",
    "end": "1544480"
  },
  {
    "text": "the tiny lfu admission policy will reject the items that it doesn't deem valuable and to do that we keep access",
    "start": "1544480",
    "end": "1552039"
  },
  {
    "text": "counters for uh probably I guess you call it like a",
    "start": "1552039",
    "end": "1557279"
  },
  {
    "text": "ghost cash so like sort of some metadata for items that aren't necessarily in the cach so if we see an item that gets try",
    "start": "1557279",
    "end": "1562760"
  },
  {
    "text": "to uh people some someone tries to add it multiple times and we see that it's valuable enough eventually we'll let it",
    "start": "1562760",
    "end": "1569080"
  },
  {
    "text": "in and the idea the idea is that uh the",
    "start": "1569080",
    "end": "1575120"
  },
  {
    "text": "the eviction policy would be ar like it doesn't exactly matter as long as the eviction policy is good enough the tiny",
    "start": "1575120",
    "end": "1581200"
  },
  {
    "text": "lfu admission will give us a 10% hit or a 10% boost on the on the hit ratio to",
    "start": "1581200",
    "end": "1587120"
  },
  {
    "text": "make sure I understand this right that would generally mean that if you have some sort of new data um that was just",
    "start": "1587120",
    "end": "1592240"
  },
  {
    "text": "introduced in some way that likely the admission policy is going to rejected the first couple times so you won't see",
    "start": "1592240",
    "end": "1598039"
  },
  {
    "text": "any performance gains up until but at some point if people keep trying to hit that um so I guess a good example be",
    "start": "1598039",
    "end": "1603840"
  },
  {
    "text": "like if you had a new top story on Hacker News and everybody's trying to hit it the first few times it might not be but at some point it's going to end",
    "start": "1603840",
    "end": "1610240"
  },
  {
    "text": "up getting cashed and then you know because it's kind of learning oh this is important this is something I need to",
    "start": "1610240",
    "end": "1615279"
  },
  {
    "text": "cash that's that's how it would work yeah and the tiny L paper um they also have this it's a freshness mechanism so",
    "start": "1615279",
    "end": "1622679"
  },
  {
    "text": "if you if you think of an item that well if you just think of like the the longtail distributions the the really",
    "start": "1622679",
    "end": "1629799"
  },
  {
    "text": "popular items like new items wouldn't really be able to compete with them so the freshness mechanism essentially",
    "start": "1629799",
    "end": "1636559"
  },
  {
    "text": "halves all the access counters for each period which is it doesn't really matter",
    "start": "1636559",
    "end": "1642039"
  },
  {
    "text": "but so we have the counters and eventually new items do get the chance to go in and um yeah I mean it's about",
    "start": "1642039",
    "end": "1649760"
  },
  {
    "text": "12 bits of overhead for uh the the amount of counters we have and for each",
    "start": "1649760",
    "end": "1655760"
  },
  {
    "text": "counter and Ben Ben Mains has done a lot of uh a lot of documentation and",
    "start": "1655760",
    "end": "1662200"
  },
  {
    "text": "research on it and I think I think the benefits are uh pretty interesting",
    "start": "1662200",
    "end": "1667279"
  },
  {
    "text": "because like you said the admission policy isn't really anything that I've seen um and I think it's a from Modern",
    "start": "1667279",
    "end": "1674440"
  },
  {
    "text": "cache it's a pretty much a no-brainer I find the con pretty interesting because like we see it with Reddit with with",
    "start": "1674440",
    "end": "1680679"
  },
  {
    "text": "Hacker News like with websites like that they're essentially doing the same thing but it's more of like a you know a",
    "start": "1680679",
    "end": "1686440"
  },
  {
    "text": "visual level like for people like to make it sure it's something that they actually care about um but it's I guess",
    "start": "1686440",
    "end": "1692960"
  },
  {
    "text": "it's Unique to see that applied somewhere else like in caching where you might not see it but realistically it",
    "start": "1692960",
    "end": "1698399"
  },
  {
    "text": "does sound like something that would make a lot of sense because what the data people care about today is not necessarily the data they'll care about",
    "start": "1698399",
    "end": "1704360"
  },
  {
    "text": "in two weeks especially for some websites um um as far as like that stuff",
    "start": "1704360",
    "end": "1709559"
  },
  {
    "text": "goes do you allow users who are using like if I'm you using a caching library is that the type of thing that I could",
    "start": "1709559",
    "end": "1714880"
  },
  {
    "text": "customize like that refresh period that sort of thing or is this something it's kind of like you fine-tune at once and",
    "start": "1714880",
    "end": "1720200"
  },
  {
    "text": "just work with it um we obviously have like a configuration for stretto so you",
    "start": "1720200",
    "end": "1725519"
  },
  {
    "text": "can conf you can configure the number of counters which since we do keep we keep",
    "start": "1725519",
    "end": "1730559"
  },
  {
    "text": "metadata for items that aren't in the cache so you could have so much ghost",
    "start": "1730559",
    "end": "1736080"
  },
  {
    "text": "counters I guess that it might increase your hit ratio I guess you can sort of fine-tune it uh the like right now we",
    "start": "1736080",
    "end": "1743080"
  },
  {
    "text": "have we found that the amount of items you expect to be in the cach if you multiply that by 10 um so 12 bits for",
    "start": "1743080",
    "end": "1751240"
  },
  {
    "text": "each item uh you find a pretty good boost on the hit ratio okay uh but I",
    "start": "1751240",
    "end": "1757039"
  },
  {
    "text": "think just to just to answer that question um yes I think we do allow a bunch of different options in in how you",
    "start": "1757039",
    "end": "1764200"
  },
  {
    "text": "can configure your cash in fact including uh we have this concept of lossy buffers um because again I think",
    "start": "1764200",
    "end": "1772039"
  },
  {
    "text": "the the big thing about about RR is that it scales really well which means that if you're doing a lot of concurrent",
    "start": "1772039",
    "end": "1778519"
  },
  {
    "text": "excesses the cash should not slow down your system which is the biggest issue we were seeing with dgraph is that when",
    "start": "1778519",
    "end": "1785399"
  },
  {
    "text": "there were lot of concurrent concurrent excesses and dgraph is a highly concurrent system um and graph queries",
    "start": "1785399",
    "end": "1791880"
  },
  {
    "text": "can can return millions of results in the intermediate steps so you're trying to access millions of keys",
    "start": "1791880",
    "end": "1798840"
  },
  {
    "text": "concurrently your cash the loing on the cash becomes a bottleneck and one of the big things that you wanted to avoid with",
    "start": "1798840",
    "end": "1805519"
  },
  {
    "text": "the Str was to was to even in the case of high contention and high concurrency",
    "start": "1805519",
    "end": "1812840"
  },
  {
    "text": "the cash should deteriorate in terms of hit ratios but not in terms of the speed",
    "start": "1812840",
    "end": "1819640"
  },
  {
    "text": "of the cash um and so we allow options of how many things that you need to",
    "start": "1819640",
    "end": "1826799"
  },
  {
    "text": "batch up before they get applied uh so for example the GS uh when you're doing",
    "start": "1826799",
    "end": "1832559"
  },
  {
    "text": "when you're doing tracking of the excess counters for the for the gets uh in the",
    "start": "1832559",
    "end": "1838640"
  },
  {
    "text": "cache you need to for every get you need to update a counter now if you were to do it in the simplest possible way you",
    "start": "1838640",
    "end": "1845200"
  },
  {
    "text": "would acquire a lock you would update the counter you would release a lock obviously that's not going to scale if",
    "start": "1845200",
    "end": "1851159"
  },
  {
    "text": "you have a lot of concurrent gets so some one thing that car did there which was really interesting was that that he",
    "start": "1851159",
    "end": "1857639"
  },
  {
    "text": "used sing. poool to build up a sort of like a a stripe system for a buffer of",
    "start": "1857639",
    "end": "1865240"
  },
  {
    "text": "GS and uh one of the options is that that is present in R is that you can",
    "start": "1865240",
    "end": "1870799"
  },
  {
    "text": "buffer up 64 gets before the strip gets applied internally by acquiring a Lo um",
    "start": "1870799",
    "end": "1877919"
  },
  {
    "text": "and and and uh I think uh the the throughput of that call was was pretty",
    "start": "1877919",
    "end": "1883279"
  },
  {
    "text": "high compared to some other things right yeah I mean I saw compared to just like a naive uh Channel",
    "start": "1883279",
    "end": "1890600"
  },
  {
    "text": "implementation uh the syn pool is probably five or 10 times the the throughput just because of the uh well",
    "start": "1890600",
    "end": "1898120"
  },
  {
    "text": "we have a pretty unique use case but the syn pool it use internally it uses um",
    "start": "1898120",
    "end": "1903840"
  },
  {
    "text": "thread local storage so and per processor so uh we don't really have",
    "start": "1903840",
    "end": "1909919"
  },
  {
    "text": "access to that outside of the the standard Library so the SN pool for our",
    "start": "1909919",
    "end": "1915559"
  },
  {
    "text": "use case which is basically we get a buffer we get a stripe of the gets and then eventually we drain it so draining",
    "start": "1915559",
    "end": "1922679"
  },
  {
    "text": "is essentially acquiring the lock and incrementing the counters um the sing Pool Works uh very well for that um and",
    "start": "1922679",
    "end": "1930760"
  },
  {
    "text": "actually there there were some GitHub issues that uh that we pointed to in our blog post where people are asking for",
    "start": "1930760",
    "end": "1936960"
  },
  {
    "text": "that thread local storage and of course they can't have it uh so hey the next best thing is to use what go people have",
    "start": "1936960",
    "end": "1944360"
  },
  {
    "text": "written uh which is sing dopo um so Resto actually is is is is an",
    "start": "1944360",
    "end": "1950880"
  },
  {
    "text": "interesting collection of a bunch of these do I want to say hacks they're not",
    "start": "1950880",
    "end": "1956720"
  },
  {
    "text": "really hacks but they are just like interesting ways to use um to get around",
    "start": "1956720",
    "end": "1962720"
  },
  {
    "text": "some of the limitations of the go language to increase performance I would say when you have to do these things",
    "start": "1962720",
    "end": "1968480"
  },
  {
    "text": "like when performance is absolutely necessary and you're trying to make all of this work as well as possible one of",
    "start": "1968480",
    "end": "1974279"
  },
  {
    "text": "the things I think I mean you guys aren't on the show but like Johnny and I talk about a lot is like making your code readable and easy to maintain would",
    "start": "1974279",
    "end": "1981200"
  },
  {
    "text": "you guys say that your code suffers from that a little bit as a result no uh and I can say that very confidently because",
    "start": "1981200",
    "end": "1988279"
  },
  {
    "text": "I am actually a big I I hate technical debt in fact uh the way we run things in",
    "start": "1988279",
    "end": "1994519"
  },
  {
    "text": "dgraph and all of our projects is that we consider user feedback to be the top",
    "start": "1994519",
    "end": "1999639"
  },
  {
    "text": "priority then comes bugs then comes refactoring and then comes features so",
    "start": "1999639",
    "end": "2005080"
  },
  {
    "text": "if we have a choice between factoring a code versus adding a new feature we will go refactor the code first and if your",
    "start": "2005080",
    "end": "2012320"
  },
  {
    "text": "code is clean features just I would they just fit in they just fit in like a",
    "start": "2012320",
    "end": "2017399"
  },
  {
    "text": "block um and so we spend a lot of effort on doing code reviews I personally do a",
    "start": "2017399",
    "end": "2022600"
  },
  {
    "text": "lot of code reviews for for the growing team of degraph um and we always try to find the simplest possible way so even",
    "start": "2022600",
    "end": "2029840"
  },
  {
    "text": "these these interesting Nifty Things that we've done in this TR if you look at the code the code is extremely simple",
    "start": "2029840",
    "end": "2035760"
  },
  {
    "text": "to understand and and uh um in fact I think that other Engineers could",
    "start": "2035760",
    "end": "2041600"
  },
  {
    "text": "potentially pick up some of these techniques in their own code and learn from our our our sort of little um",
    "start": "2041600",
    "end": "2049358"
  },
  {
    "text": "design things and implement it in their own code bases you've talked about like some of the things you've learned like",
    "start": "2049359",
    "end": "2054839"
  },
  {
    "text": "reading the tiny lfu papers and talking with Ben you've learned some stuff I I suspect you've also learned things on",
    "start": "2054839",
    "end": "2061040"
  },
  {
    "text": "the other end of the spectrum like things that you shouldn't do or you probably tried some things and then realize that was you that didn't work",
    "start": "2061040",
    "end": "2067919"
  },
  {
    "text": "the way we expected um do any you know stories or experiences stick out you know in your memory anything that you'd",
    "start": "2067919",
    "end": "2074040"
  },
  {
    "text": "like to share um I think I think one thing uh that he mentioned was uh Hacker",
    "start": "2074040",
    "end": "2079440"
  },
  {
    "text": "News before right and he said the new new entry comes in Hacker News you obviously want it to be serviced quickly now I think if you were to look at the",
    "start": "2079440",
    "end": "2086118"
  },
  {
    "text": "distribution of keys in that case or distribution of excesses in that case you would realize that uh the the top 10",
    "start": "2086119",
    "end": "2093679"
  },
  {
    "text": "or the front page of Hacker News has exponent potentially more clicks than",
    "start": "2093679",
    "end": "2100240"
  },
  {
    "text": "the second page of hacker new the third page of Hacker News and one of the big things that we learned uh while even",
    "start": "2100240",
    "end": "2106079"
  },
  {
    "text": "before we started building RR is that uh there is a zip F distribution a zip fan",
    "start": "2106079",
    "end": "2111800"
  },
  {
    "text": "distribution of keys which means that the most frequent keys are exponentially times",
    "start": "2111800",
    "end": "2117640"
  },
  {
    "text": "exponentially are accessed exponentially more than the less frequent keys and and",
    "start": "2117640",
    "end": "2123280"
  },
  {
    "text": "there in lies most of the the downsides of current caches is that they would uh",
    "start": "2123280",
    "end": "2132359"
  },
  {
    "text": "end up hitting even if you were to Shard your data let's say right you Shard it you put like 2 two like let's say 32 32",
    "start": "2132359",
    "end": "2140720"
  },
  {
    "text": "shards and you have a Lo around it you will end up hitting the same Shard over and over again because the few Keys",
    "start": "2140720",
    "end": "2147839"
  },
  {
    "text": "which are being accessed exponentially more times would actually end up on that chart right so some of the typical",
    "start": "2147839",
    "end": "2153359"
  },
  {
    "text": "strategies of hey okay we have lru cach why don't we just split it up into 32 L caches and we going to like you know use",
    "start": "2153359",
    "end": "2161040"
  },
  {
    "text": "that you end up going to the same Shard which means you end up having the same contention and so one of the things that",
    "start": "2161040",
    "end": "2167160"
  },
  {
    "text": "you wanted to avoid was for for zip Fe and distribution of keys um we do not we",
    "start": "2167160",
    "end": "2175000"
  },
  {
    "text": "are able to spread that around nicely right so some of the things that we did with sing. pool um even if you are",
    "start": "2175000",
    "end": "2182319"
  },
  {
    "text": "hitting the same key over and over again you don't end up in the same shard or the same buffer on sing do poool because",
    "start": "2182319",
    "end": "2189480"
  },
  {
    "text": "sing do poool is going to give you something randomly right it's going to just pick up from one of the items that it has it's going to give it back and uh",
    "start": "2189480",
    "end": "2195720"
  },
  {
    "text": "and so we avoid that contention at that level um um so these are some of things",
    "start": "2195720",
    "end": "2201720"
  },
  {
    "text": "that we learned and the the other things that we that we learned was again going back to the go uh go runtime is such a",
    "start": "2201720",
    "end": "2208520"
  },
  {
    "text": "beautiful marvelous thing right uh we wanted a fast way to get a hash so",
    "start": "2208520",
    "end": "2213640"
  },
  {
    "text": "instead of using or uh I think we were using uh Farm fingerprint which is a great hash by",
    "start": "2213640",
    "end": "2219960"
  },
  {
    "text": "Damian grisy and we using it in many places in decra we realized that if you were to like hook into the mem hash that",
    "start": "2219960",
    "end": "2227160"
  },
  {
    "text": "go users internally um things are a lot faster and once we had that hash we are now",
    "start": "2227160",
    "end": "2234079"
  },
  {
    "text": "using it for many different things by just doing a modulo of that um so so",
    "start": "2234079",
    "end": "2240640"
  },
  {
    "text": "there just like Nifty Things that we that we um sort of applied to solve",
    "start": "2240640",
    "end": "2246960"
  },
  {
    "text": "these common problems given a scenario where you are lucky enough to know ahead",
    "start": "2246960",
    "end": "2253280"
  },
  {
    "text": "of time that you're about to get a a massive spike in traffic right and you'd like to absorb that um um as gracefully",
    "start": "2253280",
    "end": "2260079"
  },
  {
    "text": "as possible um is it uh um is it fair to want to be able to to prepopulate your",
    "start": "2260079",
    "end": "2267319"
  },
  {
    "text": "cash and actually get the the benefits that we've been talking about uh um using your Str you could if you knew yes",
    "start": "2267319",
    "end": "2274520"
  },
  {
    "text": "you would absolutely go ahead and and do the sets up front um so that you will just get the excesses but I might argue",
    "start": "2274520",
    "end": "2281800"
  },
  {
    "text": "that you probably would get them pretty quickly because again of the zipan distribution of the keys so I think you",
    "start": "2281800",
    "end": "2288560"
  },
  {
    "text": "know when the first time let's said the St sees a key it's counter is is zero",
    "start": "2288560",
    "end": "2293760"
  },
  {
    "text": "right it has never seen this key before it doesn't know about this so the chances of this getting admitted would",
    "start": "2293760",
    "end": "2299440"
  },
  {
    "text": "be zero right but if it comes million times over pretty soon it's going to",
    "start": "2299440",
    "end": "2306119"
  },
  {
    "text": "exceed anything else that the cash has and that would happen pretty quickly uh so so there's a you know it would it",
    "start": "2306119",
    "end": "2313440"
  },
  {
    "text": "would come into the cash quick enough that I think that you would um you wouldn't have to do anything specific at",
    "start": "2313440",
    "end": "2319319"
  },
  {
    "text": "your end it should happen naturally um as a system sees this load that's pretty",
    "start": "2319319",
    "end": "2325640"
  },
  {
    "text": "cool it's pretty cool especially because I've seen even at companies like Google I've seen some weird practices around",
    "start": "2325640",
    "end": "2332640"
  },
  {
    "text": "like when you know a website's about to get a massive surge of Traffic Engineers will do some weird weird things at times um the one example I can remember is",
    "start": "2332640",
    "end": "2339839"
  },
  {
    "text": "Google code Jam I helped one year like sort of organize things and run it a little bit and right before it was about",
    "start": "2339839",
    "end": "2346520"
  },
  {
    "text": "to go live with one of the competitions they actually like ran a little script that just basically hit this I'm pretty sure it was just hitting the server to",
    "start": "2346520",
    "end": "2351920"
  },
  {
    "text": "sort of like get it ready for that influx of requests and I think that was just a quick like hacky like this will",
    "start": "2351920",
    "end": "2358319"
  },
  {
    "text": "you know get it ready it's fine we don't have to do anything else but you know I could definitely see that not being scalable all the time like in that one",
    "start": "2358319",
    "end": "2365560"
  },
  {
    "text": "specific case where it's like once a year or something it's not too bad but the other ones would be much much trickier so it's nice to have options",
    "start": "2365560",
    "end": "2371839"
  },
  {
    "text": "available um and talking about predicting future right I think one of the good ways of figuring out how well a",
    "start": "2371839",
    "end": "2378000"
  },
  {
    "text": "cach is doing is we talk about hit ratios right uh so Carl so Ben had",
    "start": "2378000",
    "end": "2383839"
  },
  {
    "text": "written uh uh this this particular um future predicting system",
    "start": "2383839",
    "end": "2390440"
  },
  {
    "text": "which is not not which cannot be built practically but for test it's a great thing and car actually replicated did",
    "start": "2390440",
    "end": "2396640"
  },
  {
    "text": "that and called it CVO um KL you might want to talk about that yeah so there's I think there's a Wikipedia article on",
    "start": "2396640",
    "end": "2402960"
  },
  {
    "text": "it but it's called Uh bady's theoretical Optimum so basically the idea is you a",
    "start": "2402960",
    "end": "2411000"
  },
  {
    "text": "trace you you you would play a trace over this um implementation and then you would run it back and figure out use the",
    "start": "2411000",
    "end": "2419119"
  },
  {
    "text": "future knowledge you can use the future knowledge to essentially calculate the absolute optimal eviction C itss so we",
    "start": "2419119",
    "end": "2427960"
  },
  {
    "text": "don't have the luxury of that information in the real world but with the badies uh algorithm you can when you",
    "start": "2427960",
    "end": "2433800"
  },
  {
    "text": "run it back you essentially figure out the optimal hit ratio so when we're graphing all of these different cache",
    "start": "2433800",
    "end": "2439119"
  },
  {
    "text": "implementations and rros uh hit ratio performance uh we can use that that",
    "start": "2439119",
    "end": "2445240"
  },
  {
    "text": "ideal hit ratio to see how we're doing and how close we are to the optimal yeah and and it's been really useful Ben",
    "start": "2445240",
    "end": "2451960"
  },
  {
    "text": "pointed to that and caffeine has been really close to it and we're trying to catch up so one of the features that",
    "start": "2451960",
    "end": "2459119"
  },
  {
    "text": "that um I happen to to really like with you know systems like redis is is that",
    "start": "2459119",
    "end": "2464640"
  },
  {
    "text": "automatic expiry of data right like um um that basically that is not frequently accessed it sounds like you've you've",
    "start": "2464640",
    "end": "2471720"
  },
  {
    "text": "got something a bit different going on here because of the of the abiss policy and and and some the ways you're",
    "start": "2471720",
    "end": "2477359"
  },
  {
    "text": "choosing to sort of uh eject data out of the system can you talk a little bit about that how do you handle whether you",
    "start": "2477359",
    "end": "2482640"
  },
  {
    "text": "even handle expiry at all yeah um so I think I think at a very at a very high",
    "start": "2482640",
    "end": "2489079"
  },
  {
    "text": "level right what you want to do is you want to evict if you if you're running",
    "start": "2489079",
    "end": "2494839"
  },
  {
    "text": "at capacity you want to evict something which has lower value than what is",
    "start": "2494839",
    "end": "2500160"
  },
  {
    "text": "coming in right because you're always trying to optimize the value of your cash now what is value that could mean",
    "start": "2500160",
    "end": "2507000"
  },
  {
    "text": "different things for different people and for for rrle the value means the chances that we will see this key come",
    "start": "2507000",
    "end": "2513720"
  },
  {
    "text": "again right uh and L you cache you say that you know the one which was the the",
    "start": "2513720",
    "end": "2519760"
  },
  {
    "text": "least recently used we would not see it again in in the lfu which is the least",
    "start": "2519760",
    "end": "2525160"
  },
  {
    "text": "frequently used cache we say that you know if if this this wasn't seen as frequently you know we have less chance",
    "start": "2525160",
    "end": "2531040"
  },
  {
    "text": "of seeing it so we set the value to be the estimate of the counter right and",
    "start": "2531040",
    "end": "2538599"
  },
  {
    "text": "the tiny LF counter the biggest thing a tin Fu counter gives you is an ability",
    "start": "2538599",
    "end": "2543960"
  },
  {
    "text": "to store millions of keys with very little with very little RAM usage so I",
    "start": "2543960",
    "end": "2550280"
  },
  {
    "text": "think it it uses like if I'm not wrong four bits per counter right and uh so if",
    "start": "2550280",
    "end": "2556079"
  },
  {
    "text": "you if you let's say think about 200 million Keys you can store their counters in 100 megabyte uh RAM which is",
    "start": "2556079",
    "end": "2564720"
  },
  {
    "text": "quite a lot so the more you know about the universal set of keys the better you can you can uh estimate their value",
    "start": "2564720",
    "end": "2571400"
  },
  {
    "text": "right so run cash running at capacity everything that comes in should have a",
    "start": "2571400",
    "end": "2576480"
  },
  {
    "text": "higher value than everything which gets out so the the juggling thing that RR is doing is that for every incoming we",
    "start": "2576480",
    "end": "2582480"
  },
  {
    "text": "figure out what the estimate is if we are at capacity we try to create a",
    "start": "2582480",
    "end": "2587559"
  },
  {
    "text": "sample set of what could be evicted and try to find the the one with the minimum",
    "start": "2587559",
    "end": "2593440"
  },
  {
    "text": "value and if the entry has a higher value than the one with the minimum value will emit it will admit the",
    "start": "2593440",
    "end": "2601079"
  },
  {
    "text": "incoming and evi the one otherwise if this one has a lower value then the one",
    "start": "2601079",
    "end": "2606800"
  },
  {
    "text": "which is going to get evicted we will reject the incoming and I think that's the noble concept that is not present in",
    "start": "2606800",
    "end": "2613480"
  },
  {
    "text": "typical cashes including lru that because in lru at the moment uh some something",
    "start": "2613480",
    "end": "2620119"
  },
  {
    "text": "comes in it's admitted because it's the most recently accessed and then it would",
    "start": "2620119",
    "end": "2625280"
  },
  {
    "text": "evict something out um but to actually get better hit ratios you really want to",
    "start": "2625280",
    "end": "2630520"
  },
  {
    "text": "be judicious about who you let in",
    "start": "2630520",
    "end": "2638079"
  },
  {
    "text": "this episode is brought to you by cucon Cloud native conon and you were invited to attend this Flagship conference from",
    "start": "2642760",
    "end": "2648400"
  },
  {
    "text": "the cloud native Computing Foundation cucon Cloud native conon North America 2019 that is a mouthful and an awesome",
    "start": "2648400",
    "end": "2655119"
  },
  {
    "text": "conference to attend it's happening November 18th to the 21st in San Diego California this conference gathers",
    "start": "2655119",
    "end": "2660800"
  },
  {
    "text": "adopters and technologist from leading up source and Cloud native communities use the code KC na change log 19 once",
    "start": "2660800",
    "end": "2668440"
  },
  {
    "text": "again KY na change log 19 to get 10% off registration or check the chanels for a",
    "start": "2668440",
    "end": "2674480"
  },
  {
    "text": "special link to register and also a link to the convent your boss letter again check the sh for links to learn more and",
    "start": "2674480",
    "end": "2680119"
  },
  {
    "text": "register and by Leno our Cloud Server of choice it's so easy to get started with lenoe serers started just five bucks a",
    "start": "2680119",
    "end": "2686680"
  },
  {
    "text": "month for your big Ideas head to lin.com changelog choose your flavor of Linux that works for you then pick a location",
    "start": "2686680",
    "end": "2692839"
  },
  {
    "text": "that's right for you London Tokyo Dallas and many other places in the world they've got you covered go from having",
    "start": "2692839",
    "end": "2699359"
  },
  {
    "text": "that amazing shower idea to a hosted website in just minutes start small expand as your idea blossoms into a huge",
    "start": "2699359",
    "end": "2705839"
  },
  {
    "text": "hit and we trust Leno because they keep it fast they keep it simple check them out at lin.com",
    "start": "2705839",
    "end": "2712800"
  },
  {
    "text": "[Music]",
    "start": "2716690",
    "end": "2722300"
  },
  {
    "text": "changelog if I'm understanding this correctly when you say you get a sample is that you're not like you're not",
    "start": "2724200",
    "end": "2729720"
  },
  {
    "text": "looking at all the data you're just getting like a small subset of it and looking at that so I assume that what that essentially means is even if you",
    "start": "2729720",
    "end": "2735720"
  },
  {
    "text": "don't admit something right then if it keeps getting hit a couple more times you know cuz if it is actually popular",
    "start": "2735720",
    "end": "2742040"
  },
  {
    "text": "that's going to happen at some point that sample will actually show you something where it can get let in so while it might not be the absolute",
    "start": "2742040",
    "end": "2749160"
  },
  {
    "text": "Optimal Performance it's going to be pretty good especially considering that checking everything in your cash is not",
    "start": "2749160",
    "end": "2755520"
  },
  {
    "text": "feas ible at all that would take up way too much time so the idea here is to kind of play the statistical like it you",
    "start": "2755520",
    "end": "2762400"
  },
  {
    "text": "know we're trying to like be as 90% or something like that without wasting a lot of time getting it is that correct",
    "start": "2762400",
    "end": "2768280"
  },
  {
    "text": "that that is correct and I think so there's two different things happening here right one is uh the incoming one",
    "start": "2768280",
    "end": "2774319"
  },
  {
    "text": "thing that we do is that irrespective of whether we admit a in a key which is",
    "start": "2774319",
    "end": "2780000"
  },
  {
    "text": "incoming or not whether we reject it or admit it we would always update its counter right so we can keep track of",
    "start": "2780000",
    "end": "2786880"
  },
  {
    "text": "how often we have seen this thing uh so that it would keep on building its you know its its value within our system and",
    "start": "2786880",
    "end": "2794480"
  },
  {
    "text": "so at some point once the value of this this thing of this key is higher than the eviction candidate it can be emitted",
    "start": "2794480",
    "end": "2802040"
  },
  {
    "text": "right so everything just keeps on building value the second thing is that and that comes back to the idea of hey",
    "start": "2802040",
    "end": "2808440"
  },
  {
    "text": "how complex is our code now one way to do uh to figure out the eviction candidate is to keep track of all the",
    "start": "2808440",
    "end": "2816359"
  },
  {
    "text": "values of every of every key and do maybe a priority key or something and uh",
    "start": "2816359",
    "end": "2821599"
  },
  {
    "text": "find the minim find the key with the minimum right um obviously more code",
    "start": "2821599",
    "end": "2827559"
  },
  {
    "text": "might be slower might might have issues because the values are constantly changing so we all we did was we said",
    "start": "2827559",
    "end": "2834440"
  },
  {
    "text": "you know go Maps gives you a pseudo random access to the Keys we already",
    "start": "2834440",
    "end": "2840200"
  },
  {
    "text": "know that right it's not completely random this if you go if you go people have done some some uh some tests and it",
    "start": "2840200",
    "end": "2846319"
  },
  {
    "text": "shows that it prefer certain Keys over others but it is still random in some level so we were like hey why don't we",
    "start": "2846319",
    "end": "2852800"
  },
  {
    "text": "pick let's say five of these keys that that are coming to us at random and use",
    "start": "2852800",
    "end": "2858200"
  },
  {
    "text": "that to find the the candidate which would have the eviction candidate with the minimum",
    "start": "2858200",
    "end": "2865000"
  },
  {
    "text": "value um and and so if you can imagine the code is really simple to find five things from from a map right we just",
    "start": "2865000",
    "end": "2871520"
  },
  {
    "text": "Loop over it five times um but that gives us a pretty good good hit ratio as",
    "start": "2871520",
    "end": "2877160"
  },
  {
    "text": "Carl's benchmarks uh showed so we were within 1% of what would be the a",
    "start": "2877160",
    "end": "2884480"
  },
  {
    "text": "priority Q approach to finding the the eviction candidate see this is I find that's like",
    "start": "2884480",
    "end": "2892040"
  },
  {
    "text": "aspect of it really interesting because like when you're if you're studying like algorithms or any of that stuff you",
    "start": "2892040",
    "end": "2897319"
  },
  {
    "text": "learn about things like the traveling salesman problem and these things that realistically solving them perfectly are",
    "start": "2897319",
    "end": "2903240"
  },
  {
    "text": "not possible it takes way too much time and it's way too hard to do but as you know Engineers we've kind of realized",
    "start": "2903240",
    "end": "2909559"
  },
  {
    "text": "that if you can get within like 10% of the best solution usually the difference is so minimal that it just does not",
    "start": "2909559",
    "end": "2915040"
  },
  {
    "text": "matter um and it sounds like you guys are taking the same type of approach where for caching yeah it might not be",
    "start": "2915040",
    "end": "2920880"
  },
  {
    "text": "optimal but optimal is going to take so much time to verify and to make sure it's always there that being optimal is",
    "start": "2920880",
    "end": "2927040"
  },
  {
    "text": "not actually faster because of all that extra work so it it sounds like that's like a really unique approach and it's",
    "start": "2927040",
    "end": "2934160"
  },
  {
    "text": "sounds like it's working really well which is cool right and I think that I think that's the one thing that we keep on doing is",
    "start": "2934160",
    "end": "2939960"
  },
  {
    "text": "we like to go for good design um but at the same time we also like to be",
    "start": "2939960",
    "end": "2945200"
  },
  {
    "text": "judicious about if is this is this extra design worth the extra Cod complexity so",
    "start": "2945200",
    "end": "2951760"
  },
  {
    "text": "the the the juggling Act of of of maintaining Simplicity of the code with the performance of the design that's",
    "start": "2951760",
    "end": "2958520"
  },
  {
    "text": "very crucial for us at degraph and that you'll see it across all the different things um including dgraph the database",
    "start": "2958520",
    "end": "2965040"
  },
  {
    "text": "badger and and as well as RTO today rreo is is a library it's something that you",
    "start": "2965040",
    "end": "2972319"
  },
  {
    "text": "import and use into your code um but in my mind's eye I could definitely see a",
    "start": "2972319",
    "end": "2977640"
  },
  {
    "text": "server implementation of this even with the network hop um I think it would",
    "start": "2977640",
    "end": "2983280"
  },
  {
    "text": "still be efficient in given certain circumstances is there plan around",
    "start": "2983280",
    "end": "2988400"
  },
  {
    "text": "having sort of a server model for this we have been asked about this um I",
    "start": "2988400",
    "end": "2996119"
  },
  {
    "text": "if it's useful to to to go Community uh or in general to the wial uh wider Dev",
    "start": "2996119",
    "end": "3001760"
  },
  {
    "text": "Community we would be open to writing something like that should be relatively straightforward because all you have to",
    "start": "3001760",
    "end": "3007440"
  },
  {
    "text": "do is put a network thing on top of it um but then I wonder hey we already have",
    "start": "3007440",
    "end": "3013599"
  },
  {
    "text": "redis we already have me cached people are pretty happy with that is it worth it um we just don't know we could be",
    "start": "3013599",
    "end": "3021319"
  },
  {
    "text": "convinced you might be underestimating developers desire for",
    "start": "3021319",
    "end": "3027440"
  },
  {
    "text": "novelty yeah if there's enough demand for it uh you know we would we would love to build something so when we talk",
    "start": "3028640",
    "end": "3034839"
  },
  {
    "text": "about this type of caching where we're getting into slightly more complicated I know that you had mentioned that from",
    "start": "3034839",
    "end": "3040240"
  },
  {
    "text": "the developer perspective it should be you kind of like it to be almost like",
    "start": "3040240",
    "end": "3045920"
  },
  {
    "text": "they don't know a lot of the details so they don't have to worry about them is that true that's the idea I think uh we",
    "start": "3045920",
    "end": "3053079"
  },
  {
    "text": "we keep the options to just like what they really can understand and and nothing more yeah so that would mean",
    "start": "3053079",
    "end": "3058559"
  },
  {
    "text": "that realistically there's no harm in using this over say you know some other least recent use cash or some other",
    "start": "3058559",
    "end": "3064359"
  },
  {
    "text": "naive approach that they could Implement themselves but I I mean if that's what they want to do I guess the implementing",
    "start": "3064359",
    "end": "3069799"
  },
  {
    "text": "it themselves is has some Merit but if they're going to pull in a library at that point it doesn't really make a difference which Library they pull in",
    "start": "3069799",
    "end": "3076599"
  },
  {
    "text": "because they all should realistically be making it easy so it's just a matter of the most performant one absolutely and",
    "start": "3076599",
    "end": "3082000"
  },
  {
    "text": "and I I feel like the problems that we ran into are General enough problems",
    "start": "3082000",
    "end": "3087640"
  },
  {
    "text": "that um that that other developers could could could learn from or could could",
    "start": "3087640",
    "end": "3094000"
  },
  {
    "text": "benefit from and uh again we are not the only ones because caffeine already",
    "start": "3094000",
    "end": "3100000"
  },
  {
    "text": "exists there's M multiple papers about caffeine it's already being used and so I think one of the things about about",
    "start": "3100000",
    "end": "3107440"
  },
  {
    "text": "when we were starting this project was you know we are a small company with limited engineering resources and like",
    "start": "3107440",
    "end": "3113920"
  },
  {
    "text": "what we should be prioritizing is is is extremely is it's a hardly debated thing right um but one thing that kept us",
    "start": "3113920",
    "end": "3121680"
  },
  {
    "text": "going about building this cash is that we felt like you know Java has a lot of interesting things that go does not have",
    "start": "3121680",
    "end": "3129520"
  },
  {
    "text": "for example a Loess map um which runs at Atomic level now the kind of throughput",
    "start": "3129520",
    "end": "3135680"
  },
  {
    "text": "that you can get from a Java's Loess map implementation is I don't think it can be matched Ino um but at the same time",
    "start": "3135680",
    "end": "3144720"
  },
  {
    "text": "we all love go go is an amazing language it is so simple it is so easy to use the code is so readable you know it's you",
    "start": "3144720",
    "end": "3152720"
  },
  {
    "text": "know what else what you use you won't use Java and so so part of our effort was",
    "start": "3152720",
    "end": "3158839"
  },
  {
    "text": "let's bring the go ecosystem closer to Javas um and I I always joke in in the company that you know go is like the",
    "start": "3158839",
    "end": "3165240"
  },
  {
    "text": "wild west it has a lot of opportunities at the same time if you want something",
    "start": "3165240",
    "end": "3170520"
  },
  {
    "text": "you have to go build it right and so this was an attempt by us to to get the",
    "start": "3170520",
    "end": "3176280"
  },
  {
    "text": "go ecosystem to be at the same level as as where Java is so would you say today",
    "start": "3176280",
    "end": "3182680"
  },
  {
    "text": "that if if I'm I'm sort of a your your average gr developer and I'm building an",
    "start": "3182680",
    "end": "3188400"
  },
  {
    "text": "application or service or something um that could benefit from cash that I should definitely uh um basically",
    "start": "3188400",
    "end": "3195280"
  },
  {
    "text": "consider a stretto um where I would typically rely on other on other libraries that are perhaps you know have",
    "start": "3195280",
    "end": "3200880"
  },
  {
    "text": "been used for for a while so there's no what's what's the requirement or rather how should I be thinking about um when",
    "start": "3200880",
    "end": "3207480"
  },
  {
    "text": "to use RR use it use it if you have one gold routine use it if you have 20 gold",
    "start": "3207480",
    "end": "3212680"
  },
  {
    "text": "routines or 100 go routines um I think u r is uh is uh ready to be used I would",
    "start": "3212680",
    "end": "3220760"
  },
  {
    "text": "say right I think we have some bugs uh in the system that we already know about that we already working upon um but uh I",
    "start": "3220760",
    "end": "3229040"
  },
  {
    "text": "think the idea for was to unite the coomunity around a cache which is designed for skill ability designed for",
    "start": "3229040",
    "end": "3236280"
  },
  {
    "text": "performance designed for for better hit ratios all the things that a cash should aim for R is going for that um and over",
    "start": "3236280",
    "end": "3245040"
  },
  {
    "text": "time I have no doubt that rest would become the default choice for for for go ecosystem like more generally speaking I",
    "start": "3245040",
    "end": "3253160"
  },
  {
    "text": "I don't think a cache is always the best choice for like let's say I'm throwing together web application realistically",
    "start": "3253160",
    "end": "3258880"
  },
  {
    "text": "there's some point where you need to start thinking about caching and I think you even said that for you guys you weren't using a cash necessarily the",
    "start": "3258880",
    "end": "3264799"
  },
  {
    "text": "whole time time or like you had one and it was slowing you down more than it was helping you so if you are talking to",
    "start": "3264799",
    "end": "3270280"
  },
  {
    "text": "somebody who's sort of starting up something new and trying to pick and choose where to spend their time around",
    "start": "3270280",
    "end": "3275559"
  },
  {
    "text": "when do you recommend they start looking into caching options and that sort of stuff I think ideally ideally the system",
    "start": "3275559",
    "end": "3281319"
  },
  {
    "text": "has been built in a way with a good design that the latency of the request to the system are fast enough um that",
    "start": "3281319",
    "end": "3289760"
  },
  {
    "text": "you do not need a cash for a while right so degraph currently does not have a",
    "start": "3289760",
    "end": "3295200"
  },
  {
    "text": "cache and we are we released version 1.0 we are at version 1.1 and so and so forth we still don't have a cache uh and",
    "start": "3295200",
    "end": "3302319"
  },
  {
    "text": "it's performing really well actually it's it's outperforming a lot of other databases so ideally you build a system",
    "start": "3302319",
    "end": "3307760"
  },
  {
    "text": "in a way where you can go without a cash for a while because introduction of cash",
    "start": "3307760",
    "end": "3314880"
  },
  {
    "text": "caching is a hard problem you introduce correctness issues you introduce contention issues you introduce 20 other",
    "start": "3314880",
    "end": "3322200"
  },
  {
    "text": "things that you don't even know about right um but it it's more like a double edge sword right it can really get you",
    "start": "3322200",
    "end": "3329280"
  },
  {
    "text": "going uh really fast it can really improve the latency that you have at the same time you could end up uh returning",
    "start": "3329280",
    "end": "3337160"
  },
  {
    "text": "the wrong results right um so in general I say just be careful around using cach",
    "start": "3337160",
    "end": "3345839"
  },
  {
    "text": "uh but once you know that caching can really improve your latency go ahead and",
    "start": "3345839",
    "end": "3351079"
  },
  {
    "text": "use it but do a lot of correctness testing and as I mentioned earlier in this in this",
    "start": "3351079",
    "end": "3357760"
  },
  {
    "text": "talk uh you know um in a multiple version concurrency control system",
    "start": "3357760",
    "end": "3363240"
  },
  {
    "text": "caching becomes particularly hard because each version has a different state for the same",
    "start": "3363240",
    "end": "3368960"
  },
  {
    "text": "key um then you need to be even more careful so uh one of the things that",
    "start": "3368960",
    "end": "3374280"
  },
  {
    "text": "we're going to do with degraph is as we introduce rest decra we're going to be running Jepson tests on it to make sure",
    "start": "3374280",
    "end": "3380039"
  },
  {
    "text": "that we haven't introduced any new uh correctness issues to the database",
    "start": "3380039",
    "end": "3385680"
  },
  {
    "text": "um however the some of the initial benchmarks that we are doing do show a",
    "start": "3385680",
    "end": "3392359"
  },
  {
    "text": "very positive impact on the latency numbers like the latency actually is improving because of the cash so when",
    "start": "3392359",
    "end": "3399240"
  },
  {
    "text": "you talk about running a test this way it's it's not like your standard unit test where you can just test one thing",
    "start": "3399240",
    "end": "3404680"
  },
  {
    "text": "in isolation I assume I assume this is something where you have to orchestrate a whole lot of things working at the same time um I I guess we have a tiny",
    "start": "3404680",
    "end": "3413960"
  },
  {
    "text": "bit of time left if you guys guys have a couple more minutes um can you talk a little bit about like how you went about",
    "start": "3413960",
    "end": "3420079"
  },
  {
    "text": "that testing and how you made it you know reproducible how you made it useful because I know from my experience the",
    "start": "3420079",
    "end": "3425480"
  },
  {
    "text": "more pieces you get involved in a system like in a system test the harder it is to reproduce it to actually figure out",
    "start": "3425480",
    "end": "3431119"
  },
  {
    "text": "what went wrong and like they become way less useful in some ways because it's just hard to actually figure out what",
    "start": "3431119",
    "end": "3436640"
  },
  {
    "text": "broke so have you guys learned anything from that process or is that anything new coming from that I guess so we have",
    "start": "3436640",
    "end": "3444280"
  },
  {
    "text": "multiple LEL of tests we have tests within RR for rr's own correctness and",
    "start": "3444280",
    "end": "3450119"
  },
  {
    "text": "then we have uh tests within degraph written by us which are around dph's",
    "start": "3450119",
    "end": "3456520"
  },
  {
    "text": "correctness and then we have Jepson test which is the third party uh uh distribute systems test for the for the",
    "start": "3456520",
    "end": "3462960"
  },
  {
    "text": "database which kind of like test correctness while introducing a whole bunch of edge case scenarios like",
    "start": "3462960",
    "end": "3469760"
  },
  {
    "text": "Network partitions and machines getting lost and processes crashing and so and so forth I think you need all of those",
    "start": "3469760",
    "end": "3476480"
  },
  {
    "text": "really you you you need to test for correctness as multiple different levels and the thing about correctness testing",
    "start": "3476480",
    "end": "3483599"
  },
  {
    "text": "is that you a lot of times you don't know what you're looking for you're just throwing things at it expecting them to",
    "start": "3483599",
    "end": "3488799"
  },
  {
    "text": "run for example Badger has a bank test and we run it for8 hours every night to",
    "start": "3488799",
    "end": "3493880"
  },
  {
    "text": "like move money around between accounts and make sure that the total amount in the bank has not changed right um so",
    "start": "3493880",
    "end": "3502240"
  },
  {
    "text": "some of these things you can do it Direct on the component itself but I",
    "start": "3502240",
    "end": "3508480"
  },
  {
    "text": "think uh there's a there's a lot of value in having a higher level test which does not care about any any",
    "start": "3508480",
    "end": "3514760"
  },
  {
    "text": "particular component but just lets you know if something is broken in terms of",
    "start": "3514760",
    "end": "3520359"
  },
  {
    "text": "correctness so this is kind of like I think it was a couple weeks ago U Matt talked about security and in there they",
    "start": "3520359",
    "end": "3526680"
  },
  {
    "text": "talked about fuzzing and sort of just sending random data so the idea is to come up with something that you can be",
    "start": "3526680",
    "end": "3533160"
  },
  {
    "text": "verified like you mentioned if you have a bank there's a total balance that should realistically stay the same and",
    "start": "3533160",
    "end": "3539039"
  },
  {
    "text": "then from there it's a matter of just throwing whatever you can at it so there are ways to to sort of like you can",
    "start": "3539039",
    "end": "3544839"
  },
  {
    "text": "verify that things are working but at the same time it's random enough that you can test things that you don't even",
    "start": "3544839",
    "end": "3550920"
  },
  {
    "text": "know what you're testing for which makes that you unique in that sense exactly and and as some of this test they would",
    "start": "3550920",
    "end": "3556799"
  },
  {
    "text": "not tell you which part is broken and that's not the job of these tests the job of these tests is to tell you if the",
    "start": "3556799",
    "end": "3563319"
  },
  {
    "text": "entire system has an issue or not just that and nothing more and then you have individual tests which will tell you",
    "start": "3563319",
    "end": "3569880"
  },
  {
    "text": "okay this particular part is not working correctly uh and then we go to like distributed tracing and all that stuff",
    "start": "3569880",
    "end": "3575680"
  },
  {
    "text": "which can help you identify these issues but uh but I think you do testing at multiple different levels and I I find a",
    "start": "3575680",
    "end": "3582599"
  },
  {
    "text": "lot of value in these blackbox testing I would say where the system should act in",
    "start": "3582599",
    "end": "3587880"
  },
  {
    "text": "a certain way and that's it y see I completely agree with you I think it's also hard when you're on the other end",
    "start": "3587880",
    "end": "3594119"
  },
  {
    "text": "of it where it's broken and you don't know why it's broken so you just want to bang your head off a wall for a while so",
    "start": "3594119",
    "end": "3600680"
  },
  {
    "text": "it's not that I you know I don't see value in like I see value in those tests it's more of a you know trying to figure",
    "start": "3600680",
    "end": "3606920"
  },
  {
    "text": "out how do you actually take the fact that you know a test is wrong and then and turn it into something to you act",
    "start": "3606920",
    "end": "3612680"
  },
  {
    "text": "upon and fix that sometimes becomes a challenge I would give you a story about exactly that scenario I think my last",
    "start": "3612680",
    "end": "3618640"
  },
  {
    "text": "here was spent on trying to fix some of the Jepson test and Jepson is this black BX testing testing scenario but was is",
    "start": "3618640",
    "end": "3624720"
  },
  {
    "text": "just tell you that system has a problem but does not help you in any way in identifying what the problem is and uh I",
    "start": "3624720",
    "end": "3632359"
  },
  {
    "text": "think me and my Engineers we we spent many months trying to like figure out all of the issues there and and why that",
    "start": "3632359",
    "end": "3639200"
  },
  {
    "text": "issue was being caused ultimately we introduced open census tracing into degraph and by connecting",
    "start": "3639200",
    "end": "3646880"
  },
  {
    "text": "that to jepson's own tests we could tra we could track it all the way down to the last last part and that helped us",
    "start": "3646880",
    "end": "3654599"
  },
  {
    "text": "just get an insight into what might be going on and we had to write these crazy",
    "start": "3654599",
    "end": "3659720"
  },
  {
    "text": "scripts to like figure out like what was state of the system at that time so we had to do a lot of things to be able to",
    "start": "3659720",
    "end": "3665880"
  },
  {
    "text": "understand why the test was failing it took us a while but if the test was not even there we would have we would think",
    "start": "3665880",
    "end": "3673200"
  },
  {
    "text": "that it's working just fine right um so yeah I think I think some of these um",
    "start": "3673200",
    "end": "3680839"
  },
  {
    "text": "I'm a big fan of open sensus I think like you know having that and open tracing Etc all those things are just",
    "start": "3680839",
    "end": "3686440"
  },
  {
    "text": "incredible um so one way to to deal with some of these issues is to is to add more instrumentation all right well I",
    "start": "3686440",
    "end": "3693480"
  },
  {
    "text": "think that about wraps up this episode of go time um thank you Manish thank you Carl and thank you Johnny for joining us",
    "start": "3693480",
    "end": "3700119"
  },
  {
    "text": "um if you have any other questions uh you guys can definitely ask in the go time slack uh if Manish if and Carl if",
    "start": "3700119",
    "end": "3707039"
  },
  {
    "text": "you guys want to check out that slack Channel and and answer some questions I'm assuming you guys can um but yeah",
    "start": "3707039",
    "end": "3712680"
  },
  {
    "text": "that sums it all up there you will thanks guys for having us thank",
    "start": "3712680",
    "end": "3718440"
  },
  {
    "text": "you all right thank you for tuning in to this week's episode of go time if you're not yet hang with us in go for slack we",
    "start": "3719799",
    "end": "3726400"
  },
  {
    "text": "have a channel called go time FM look it up you'll find us hang with us during the live shows connect with other",
    "start": "3726400",
    "end": "3732599"
  },
  {
    "text": "members of the community share stories share code share coffee recipes whatever it's a lot of fun also we have",
    "start": "3732599",
    "end": "3739520"
  },
  {
    "text": "discussions at changel love.com on every episode head to changel love.com",
    "start": "3739520",
    "end": "3744559"
  },
  {
    "text": "go time find this episode and discuss it with the community also thanks to fasty our bandwidth partner rbar for helping",
    "start": "3744559",
    "end": "3751000"
  },
  {
    "text": "us move fast and fix things and luno for hosting the change law platform our music is produced by the mysterious",
    "start": "3751000",
    "end": "3757520"
  },
  {
    "text": "break master cylinder and if you want to hear more awesome podcast like this subscribe to our Master feed it's one",
    "start": "3757520",
    "end": "3763520"
  },
  {
    "text": "feed to rule them all plus some extras that only hit the master feed and to change law.com slm or search for Chang",
    "start": "3763520",
    "end": "3770880"
  },
  {
    "text": "law master in your podcast client you'll find us thanks for tuning in and we'll see you next",
    "start": "3770880",
    "end": "3776510"
  },
  {
    "text": "[Music]",
    "start": "3776510",
    "end": "3803279"
  },
  {
    "text": "week [Music]",
    "start": "3803279",
    "end": "3825469"
  },
  {
    "text": "oh",
    "start": "3828480",
    "end": "3831480"
  }
]