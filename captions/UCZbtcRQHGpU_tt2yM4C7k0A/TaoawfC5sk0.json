[
  {
    "text": "we have go.mod files and now we have go. workk files so you create a go. workk",
    "start": "80",
    "end": "5240"
  },
  {
    "text": "file the syntax is very similar to go.mod we want it to be easy for people to pick up and the go. work has one new",
    "start": "5240",
    "end": "12840"
  },
  {
    "text": "directive is the use directive so you tell it which directories you want it to",
    "start": "12840",
    "end": "18240"
  },
  {
    "text": "use and all the modules in those directories if you're under the go. workk file the same where you're under a",
    "start": "18240",
    "end": "23560"
  },
  {
    "text": "go dood file before are in your",
    "start": "23560",
    "end": "27240"
  },
  {
    "text": "workspace hey Jared here one of the things we can count on in the software",
    "start": "28759",
    "end": "33800"
  },
  {
    "text": "industry is change the state-of-the-art changes so fast in fact that keeping up",
    "start": "33800",
    "end": "39760"
  },
  {
    "text": "can feel like a whole other job on top of your actual job that's why we created change log weekly it's our totally free",
    "start": "39760",
    "end": "47160"
  },
  {
    "text": "newsletter that we drop in your inbox each and every Sunday we link to the latest news the best articles and the",
    "start": "47160",
    "end": "54399"
  },
  {
    "text": "most interesting projects that you should be aware of we also add a little commentary from us saying why",
    "start": "54399",
    "end": "60199"
  },
  {
    "text": "something's important pointing you to other instances of a trend or just making a dorky joke to keep it Lively so",
    "start": "60199",
    "end": "66240"
  },
  {
    "text": "if you haven't yet I recommend subscribing to changelog weekly and help us help you keep up with the",
    "start": "66240",
    "end": "71799"
  },
  {
    "text": "latest head to changel log.com weekly and sign up today again it's totally",
    "start": "71799",
    "end": "76960"
  },
  {
    "text": "free and we never spam you yuck one last time that's Chang law.com",
    "start": "76960",
    "end": "82350"
  },
  {
    "text": "[Music]",
    "start": "82350",
    "end": "88530"
  },
  {
    "text": "weekly",
    "start": "88840",
    "end": "91840"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "98240",
    "end": "104880"
  },
  {
    "text": "about go one out 18 subscribe today at go time. FM and follow the show on",
    "start": "104880",
    "end": "110320"
  },
  {
    "text": "Twitter at gotime FM special thanks to our friends at fastly for a shipping go time super fast all around the world",
    "start": "110320",
    "end": "117159"
  },
  {
    "text": "check them out at fastly.com I'm all right let's get into it this is a good one I thinkink he promise here we",
    "start": "117159",
    "end": "126560"
  },
  {
    "text": "[Music] go hello and welcome to go time I'm Matt",
    "start": "126730",
    "end": "136080"
  },
  {
    "text": "ryer and today we're talking about the other features in",
    "start": "136080",
    "end": "141239"
  },
  {
    "text": "go18 now listen here you come here come here go18 has got two great big features",
    "start": "141239",
    "end": "148319"
  },
  {
    "text": "everyone's talking about I mean everybody all the popular people are talking about it everyone well we're",
    "start": "148319",
    "end": "154080"
  },
  {
    "text": "not popular we're going to be talking about the other features not those two",
    "start": "154080",
    "end": "159239"
  },
  {
    "text": "and just for anyone that doesn't know it's fuzzing and generics and that's the only time they're going to be mentioned on this episode in fact we've got a new",
    "start": "159239",
    "end": "166080"
  },
  {
    "text": "rule if they are mentioned by anyone even accidentally unfortunately you will be immediately booted from the podcast",
    "start": "166080",
    "end": "173599"
  },
  {
    "text": "so please bear that in mind no talk of those two subjects Pinky Promise that's",
    "start": "173599",
    "end": "179120"
  },
  {
    "text": "a pinky promise from me and we'll find out if we're also going to get a pinky promise from our special guests today",
    "start": "179120",
    "end": "186000"
  },
  {
    "text": "it's joining me Daniel Marty hello Daniel Hello nice to be back and nice to bring my technical problems along with",
    "start": "186000",
    "end": "193440"
  },
  {
    "text": "me your technical problems are like you always welcome Daniel Daniel's been",
    "start": "193440",
    "end": "199080"
  },
  {
    "text": "using and contributing to go for quite a few years now and you've actually written a few tools as well like the",
    "start": "199080",
    "end": "206319"
  },
  {
    "text": "stricter goof fumed and what could be described do the opposite a go code opy",
    "start": "206319",
    "end": "212439"
  },
  {
    "text": "skater so they're interesting tools Daniel how is the gofm more strict it",
    "start": "212439",
    "end": "219000"
  },
  {
    "text": "essentially restricts how you can write and format code in a few extra ways like for example no empty lines at the start",
    "start": "219000",
    "end": "225360"
  },
  {
    "text": "of a function body things that I generally do cool okay we'll put a link",
    "start": "225360",
    "end": "230720"
  },
  {
    "text": "to that in the show notes because if anyone likes I like the fact we have gof fumed and I like the idea of a more",
    "start": "230720",
    "end": "236920"
  },
  {
    "text": "strict one oh Daniel did pinky promise not going to talk about about those two of the subjects today pinky promised",
    "start": "236920",
    "end": "242480"
  },
  {
    "text": "okay Daniel's pinky promised okay this is really professional okay we've also you're not going to believe this Daniel",
    "start": "242480",
    "end": "248400"
  },
  {
    "text": "you will believe it you already know but imagine if you didn't we've also got Michael Mato with us hello Michael",
    "start": "248400",
    "end": "254599"
  },
  {
    "text": "welcome to go time hi uh great to be here oh it's a pleasure to have you Michael's on the gotools team at Google",
    "start": "254599",
    "end": "261359"
  },
  {
    "text": "living in you know New York City no big deal and he previously worked on go/",
    "start": "261359",
    "end": "267360"
  },
  {
    "text": "packages which is very useful if you're writing like code generation tools and things like that and infrastructure for",
    "start": "267360",
    "end": "274680"
  },
  {
    "text": "uh tooling and now works on the go Command right Michael yes and do you",
    "start": "274680",
    "end": "279759"
  },
  {
    "text": "pinky promise to not mention those two big subjects on this very episode I",
    "start": "279759",
    "end": "285080"
  },
  {
    "text": "won't mention them by name okay that's that sounds like a pinky caveat it is it",
    "start": "285080",
    "end": "291759"
  },
  {
    "text": "is a pinky caveat okay fine we won't mention them by name well let's see we'll see how we go well yeah so this",
    "start": "291759",
    "end": "299039"
  },
  {
    "text": "episode like obviously there's a lot of people blogging and talking about the big sort of headline features that we",
    "start": "299039",
    "end": "305160"
  },
  {
    "text": "are a lot of people are very excited a lot of people very dismayed about generics in particular I've just said it",
    "start": "305160",
    "end": "311000"
  },
  {
    "text": "I can't believe it I have to leave the podcast but a raft of other things and this release in particular seems very",
    "start": "311000",
    "end": "318759"
  },
  {
    "text": "packed and dense with features why is that do we think I believe they've been saving a few large features for some",
    "start": "318759",
    "end": "325800"
  },
  {
    "text": "time like like they've been building up to generics for like nearly 2 years years now and now it's shipping right",
    "start": "325800",
    "end": "331560"
  },
  {
    "text": "and I did mention the taboo subject but I think it's also happened with fuzzing which has been in the works for like a",
    "start": "331560",
    "end": "336880"
  },
  {
    "text": "year now yeah I see by the way just mentioning another taboo subject doesn't cancel out the other one yeah you're",
    "start": "336880",
    "end": "343479"
  },
  {
    "text": "just compounding the your crimes I asked Daniel and Michael to find a list of the",
    "start": "343479",
    "end": "349680"
  },
  {
    "text": "things that they're sort of excited about or interested in that we can go through and talk about and obviously",
    "start": "349680",
    "end": "355639"
  },
  {
    "text": "Michael worked on module workspaces as well so we'll carve some time out at the end to talk about that in particular but",
    "start": "355639",
    "end": "363600"
  },
  {
    "text": "Daniel maybe you could kick us off there's a really interesting one that to",
    "start": "363600",
    "end": "368720"
  },
  {
    "text": "me seemed like a silly unnecessary Helper but turns out to be actually",
    "start": "368720",
    "end": "374880"
  },
  {
    "text": "quite worthy that was strings. cut could you tell us about that yeah so I think",
    "start": "374880",
    "end": "381120"
  },
  {
    "text": "anybody who's written any non-trivial amount of code knows that they have to deal with strings they have to add strings look at prefixes and suffixes",
    "start": "381120",
    "end": "388120"
  },
  {
    "text": "and so on and one quite common operation is one wanting to cut a string in two so for example maybe you've got a domain",
    "start": "388120",
    "end": "394280"
  },
  {
    "text": "name and you want the actual name and the extension or maybe you've got a file name and you want the file name",
    "start": "394280",
    "end": "399319"
  },
  {
    "text": "extension uh that kind of thing you can use go apis like strings. index or",
    "start": "399319",
    "end": "404919"
  },
  {
    "text": "there's also strings that split n and you can give it the number two so like split this string up to in up to two",
    "start": "404919",
    "end": "411560"
  },
  {
    "text": "pieces right but these apis are not super easy to use for example if you use index it may give you minus one and if",
    "start": "411560",
    "end": "418560"
  },
  {
    "text": "you don't check for that that might panic and split has the same issue right because it gives you a a slice so cut is",
    "start": "418560",
    "end": "426520"
  },
  {
    "text": "a it has you could say cut has less sharp edges so it only gives you two",
    "start": "426520",
    "end": "431879"
  },
  {
    "text": "strings for the two sides and a Boolean telling you whether or not it successfully cut yeah so that's nice so",
    "start": "431879",
    "end": "438240"
  },
  {
    "text": "if say you were cutting on a colon and there wasn't a colon in there it wouldn't be in any way like a panic or a",
    "start": "438240",
    "end": "445039"
  },
  {
    "text": "problem you just get a false as the second argument exactly yeah what do you think about that Michael have you",
    "start": "445039",
    "end": "451479"
  },
  {
    "text": "written code that cuts things up like this I have yeah would it would be a",
    "start": "451479",
    "end": "456520"
  },
  {
    "text": "nice convenience I like conveniences yeah I thought this was like an unnecessary Helper because whenever you",
    "start": "456520",
    "end": "463280"
  },
  {
    "text": "can norly do something that's usually my preferred way I looked at some of the",
    "start": "463280",
    "end": "468520"
  },
  {
    "text": "commentary on this one and the number of cases where people were basically doing the same operation over and over again",
    "start": "468520",
    "end": "475560"
  },
  {
    "text": "it's kind of everywhere and including some places where we done it incorrectly or in a way that would Panic if if they",
    "start": "475560",
    "end": "483240"
  },
  {
    "text": "got some bad input or something if there was like some testing tool that helped you try test out all these different",
    "start": "483240",
    "end": "489080"
  },
  {
    "text": "possible ways of responding to input that'd be great but not on this episode there isn't but yeah okay so strings cut",
    "start": "489080",
    "end": "495560"
  },
  {
    "text": "and that's coming in go18 okay Daniel have you got another one for us so I've got another one",
    "start": "495560",
    "end": "500919"
  },
  {
    "text": "that's significantly more complex than strings at cut and I believe it was developed by the people at tail scale",
    "start": "500919",
    "end": "506720"
  },
  {
    "text": "over a few years and it's essentially a replacement for the net. I type so right",
    "start": "506720",
    "end": "511759"
  },
  {
    "text": "now IP's IP addresses in go they represented as a bite slice so you can",
    "start": "511759",
    "end": "517080"
  },
  {
    "text": "think of a bite slice it can have many lengths so an ipv4 is going to be shorter than an IP version 6 M for",
    "start": "517080",
    "end": "523279"
  },
  {
    "text": "example and they designed a new IP package which they called net Adder but",
    "start": "523279",
    "end": "528399"
  },
  {
    "text": "now it's being merged as net IP so it's net / net IP and it's got a bunch of",
    "start": "528399",
    "end": "534800"
  },
  {
    "text": "advantages mostly related around performance but the two main properties that it has as part of its design which",
    "start": "534800",
    "end": "541440"
  },
  {
    "text": "is not do not use a slice essentially one it's comparable so you cannot compare slices you can only compare them",
    "start": "541440",
    "end": "547160"
  },
  {
    "text": "to nil M and the other one is that it doesn't allocate so you can create a newp without calling make or new or",
    "start": "547160",
    "end": "554079"
  },
  {
    "text": "anything like that because I think it's backed by what is essentially a bunch of integers mhm so will the standard",
    "start": "554079",
    "end": "560279"
  },
  {
    "text": "Library bits of it be Rewritten to use this new type or is this just going to be something that's available for",
    "start": "560279",
    "end": "566959"
  },
  {
    "text": "calling code I think that's a good question I think anything that exposes apis with the old type will have to",
    "start": "566959",
    "end": "572920"
  },
  {
    "text": "remain the same because of backwards compatibility I seem to recall one of the reasons to add this to a standard",
    "start": "572920",
    "end": "579720"
  },
  {
    "text": "library is so that for example HTTP 2 and 3 which I think it's only HTTP 3",
    "start": "579720",
    "end": "585800"
  },
  {
    "text": "which reimplements something like TCP right in user space and that deals with",
    "start": "585800",
    "end": "591920"
  },
  {
    "text": "a lot of IP addresses so if you can remove a bunch of internal allocations that don't leak into the API that can be",
    "start": "591920",
    "end": "597680"
  },
  {
    "text": "a very large plus yeah that's nice and do you know if they're going to be helpers just kind of switch between the",
    "start": "597680",
    "end": "602959"
  },
  {
    "text": "two do you think we're going to see code like that flying around for a bit I believe the package comes with helpers",
    "start": "602959",
    "end": "609000"
  },
  {
    "text": "but my memory is failling me okay I mean if not people will probably end up doing that I imagine but yeah it's nice to",
    "start": "609000",
    "end": "616320"
  },
  {
    "text": "know that there's a sort of improved data type there and it's funny like you know with the go backwards compatibility",
    "start": "616320",
    "end": "622240"
  },
  {
    "text": "promise you can't just break things and break apis and break everyone's code you know it's not python I shouldn't have a",
    "start": "622240",
    "end": "629120"
  },
  {
    "text": "go other languages but python does that a lot but with that promise of course your hands get tied so this is kind of a",
    "start": "629120",
    "end": "636360"
  },
  {
    "text": "nice way of releasing almost like more modern implementations is to sort of",
    "start": "636360",
    "end": "641399"
  },
  {
    "text": "release them alongside and then they kind of coexist but does that create confusion like how will people know",
    "start": "641399",
    "end": "647920"
  },
  {
    "text": "which one to use that's a good question I think the go standard library has a bunch of cases where there are packages",
    "start": "647920",
    "end": "653639"
  },
  {
    "text": "and apis that everybody knows not to use like there's container SL list that has like a linked list for example and I I",
    "start": "653639",
    "end": "660240"
  },
  {
    "text": "don't think everybody's used that outside of an example I don't think they can deprecate net IP simply because as",
    "start": "660240",
    "end": "666560"
  },
  {
    "text": "in the existing net doip type because it is used in existing apis but I think",
    "start": "666560",
    "end": "672120"
  },
  {
    "text": "there is going to be a common understanding that if you want the extra nice features of the new type you can",
    "start": "672120",
    "end": "678240"
  },
  {
    "text": "you should just use it right great H thank you nice one right Michael maybe",
    "start": "678240",
    "end": "683560"
  },
  {
    "text": "you could pick pick one to talk about next I'll pick a couple of features that",
    "start": "683560",
    "end": "688600"
  },
  {
    "text": "my colleagues J Jay and Brian added to the go command so they are VCS build",
    "start": "688600",
    "end": "695560"
  },
  {
    "text": "stamping and a debug build info uh function to get information about the",
    "start": "695560",
    "end": "702600"
  },
  {
    "text": "versions of modules in a go Library as a as a and a go binary as an as an API so",
    "start": "702600",
    "end": "709600"
  },
  {
    "text": "both of these like have like a similar core motivation which is like to improve",
    "start": "709600",
    "end": "716279"
  },
  {
    "text": "visibility into binaries to know which packages they were built on so you can determine say if binaries were built",
    "start": "716279",
    "end": "723800"
  },
  {
    "text": "with certain commits of code in the case of VCS build sing because the main",
    "start": "723800",
    "end": "730200"
  },
  {
    "text": "module may not have a version associated with it and in the case of of the build",
    "start": "730200",
    "end": "735920"
  },
  {
    "text": "info of dependencies and like this is shaping up to be a a big thing in these",
    "start": "735920",
    "end": "741920"
  },
  {
    "text": "these days to know whether your dependencies and the code that you're built with have bugs or or Bad feat Fe",
    "start": "741920",
    "end": "749160"
  },
  {
    "text": "in them and if if the code that you're running with is safe and to audit everything properly like we've seen",
    "start": "749160",
    "end": "755519"
  },
  {
    "text": "several cases of bad libraries in the wild and people have to quickly audit if",
    "start": "755519",
    "end": "761360"
  },
  {
    "text": "all their code is safe or not all their code running and production is safe or not yeah and it's a tricky thing so I'm",
    "start": "761360",
    "end": "767880"
  },
  {
    "text": "picking that a little bit then so VCS Version Control Systems then like the gith has when you have a certain level",
    "start": "767880",
    "end": "775560"
  },
  {
    "text": "that you've committed up to and every time you commit you get a new hash and so now when we build that will be",
    "start": "775560",
    "end": "782480"
  },
  {
    "text": "incorporated is it is it like it supports all the major kind of VCS",
    "start": "782480",
    "end": "787600"
  },
  {
    "text": "systems so like it'll support git and yeah yeah I mean it definitely supports git I don't know what other vcs's we",
    "start": "787600",
    "end": "795800"
  },
  {
    "text": "support if we do support other V uh D you do know but they'll be coming soon I think there's Mercurial Bazaar",
    "start": "795800",
    "end": "803519"
  },
  {
    "text": "subversion and that might be it for these days that's a good selection could you name f",
    "start": "803519",
    "end": "809519"
  },
  {
    "text": "five five VCS systems yeah just five dead quick well Dan named four so I know",
    "start": "809519",
    "end": "815800"
  },
  {
    "text": "so it should be easy I think there was like I've seen in the go commands like a VCS named like fossil that had support",
    "start": "815800",
    "end": "822760"
  },
  {
    "text": "somewhere so that'll round us out there we go fossil there we go five brilliant there you go learning so okay and then",
    "start": "822760",
    "end": "830399"
  },
  {
    "text": "the other thing is that build info with all the dependencies because that is a big thing you know sometimes well we're",
    "start": "830399",
    "end": "837399"
  },
  {
    "text": "paying a lot more attention now to to reporting vulnerabilities capturing that data and then being able to in the",
    "start": "837399",
    "end": "843519"
  },
  {
    "text": "tooling use that to to know whether we are dealing or running something that has some known vulnerability yeah so",
    "start": "843519",
    "end": "850560"
  },
  {
    "text": "that is a massive thing and of course having this put in there automatically saves us a lot of effort right my",
    "start": "850560",
    "end": "858079"
  },
  {
    "text": "understanding is the build info is like a function that's like accessible to programs that was like just in the go",
    "start": "858079",
    "end": "865240"
  },
  {
    "text": "command before like Go version DM right so it makes it easier for other people",
    "start": "865240",
    "end": "871639"
  },
  {
    "text": "to write these auditing programs that can help detect if they're bad versions",
    "start": "871639",
    "end": "877560"
  },
  {
    "text": "in your dependencies and you know then flag it or fix it or whatever and these automated things I I hope can solve a",
    "start": "877560",
    "end": "885680"
  },
  {
    "text": "lot of like manual human work that we've had to do when these issues have come up",
    "start": "885680",
    "end": "891480"
  },
  {
    "text": "yeah it's very useful with like if you have dependabot or whatever running in your continuous integration or just",
    "start": "891480",
    "end": "897759"
  },
  {
    "text": "running in GitHub like like having those tools help you know it's all great so anything in that effort I think is worth",
    "start": "897759",
    "end": "904320"
  },
  {
    "text": "having very cool and yeah before we had to like use either build tags or do",
    "start": "904320",
    "end": "909399"
  },
  {
    "text": "something else funky to get the version I would always do that I would have some script that would I think I did it with",
    "start": "909399",
    "end": "915160"
  },
  {
    "text": "go go bed as well successfully recently but we just don't have to do that now",
    "start": "915160",
    "end": "920959"
  },
  {
    "text": "and so will we be able to access that version inside the build as well from somewhere sorry access the access like",
    "start": "920959",
    "end": "927480"
  },
  {
    "text": "the gith has inside the binary itself yeah it's in the binary so I don't know what the um API is yeah but there's some",
    "start": "927480",
    "end": "936079"
  },
  {
    "text": "either ref method or yeah it's honestly a bit confusing because before there was",
    "start": "936079",
    "end": "941880"
  },
  {
    "text": "an API to get the mod module information of yourself like of your own running binary but the new API they add it is",
    "start": "941880",
    "end": "948920"
  },
  {
    "text": "you can give it a binary path so you can use it with any binary without having to Shell out to go version DM blah blah",
    "start": "948920",
    "end": "955040"
  },
  {
    "text": "blah it's essentially the same feature oh so so the the build info includes that the hash oh well there we go okay",
    "start": "955040",
    "end": "962839"
  },
  {
    "text": "and I think the VCS stamping is also a bit confusing to end users because you tell them go18 now stamps VCS build info",
    "start": "962839",
    "end": "969759"
  },
  {
    "text": "but they might say if I go install a go package a go main package and I run Go version dm with go17 I already see the",
    "start": "969759",
    "end": "976680"
  },
  {
    "text": "module version right but where that doesn't work is If instead of doing a global git install via a module path if",
    "start": "976680",
    "end": "984040"
  },
  {
    "text": "you get clone and then go build or go install locally from that g clone go doesn't know what module version that is",
    "start": "984040",
    "end": "990360"
  },
  {
    "text": "it just has a get clone it's not resolving that module through the whole proxy system that tells it what version",
    "start": "990360",
    "end": "996959"
  },
  {
    "text": "it is in go17 it tells you version devil it it has no idea and in go18 it will",
    "start": "996959",
    "end": "1002959"
  },
  {
    "text": "add some extra separate metadata that will say hey this was built from G hash blah blah blah date blah blah blah and",
    "start": "1002959",
    "end": "1009800"
  },
  {
    "text": "so on all right okay Daniel your turn to pick one from the list what else is cool",
    "start": "1009800",
    "end": "1015800"
  },
  {
    "text": "coming in go 118 by the way do you say8 1.8",
    "start": "1015800",
    "end": "1021360"
  },
  {
    "text": "1.8 how do you say it now you're making me doubt myself about how I pronounce these things yeah you just have to",
    "start": "1021360",
    "end": "1027640"
  },
  {
    "text": "forget just clear your mind and then just say it see what happens 118 yeah I say 118 yeah okay that's good it is kind",
    "start": "1027640",
    "end": "1035400"
  },
  {
    "text": "of 118 isn't it it's not it's not a decimal number is it it's sver so that",
    "start": "1035400",
    "end": "1040678"
  },
  {
    "text": "second number is 18 I think we're right so does that mean that when we reach 120 we can go back to 1.2 I think for just",
    "start": "1040679",
    "end": "1048199"
  },
  {
    "text": "that release no you can't can you no because that's what I mean it's not decibel that's it yeah yeah we got that",
    "start": "1048199",
    "end": "1054559"
  },
  {
    "text": "in the end so another feature I mean it's maybe a bit cheeky that I bring this up because I worked on this but G",
    "start": "1054559",
    "end": "1060480"
  },
  {
    "text": "fump without a space now formats files in parallel so up until now you had well",
    "start": "1060480",
    "end": "1066520"
  },
  {
    "text": "you have two tools which is also confusing you have G fumed without a space and then you have go space fumed",
    "start": "1066520",
    "end": "1073200"
  },
  {
    "text": "yeah it's ironic that the gof fum tool it can be called in different ways just by changing the formatting",
    "start": "1073200",
    "end": "1080280"
  },
  {
    "text": "yeah oh God the difference between the two tools and I think it also confuses a",
    "start": "1080280",
    "end": "1085720"
  },
  {
    "text": "bunch of users is that without a space it takes files and directories but it doesn't know what packages are and with",
    "start": "1085720",
    "end": "1092720"
  },
  {
    "text": "with a space it takes a package pattern so you can give it do/ dot dot dot for example and the one that works on",
    "start": "1092720",
    "end": "1099480"
  },
  {
    "text": "packages has always been relatively well parallelized because what it does is I",
    "start": "1099480",
    "end": "1105159"
  },
  {
    "text": "believe it formats each package in parallel or something like that M but the one that takes directories and files",
    "start": "1105159",
    "end": "1110600"
  },
  {
    "text": "it would just do one at a time and now we've essentially removed the parallelism from the one with the space",
    "start": "1110600",
    "end": "1117840"
  },
  {
    "text": "and just made both tools use the same kind of parallelism which is uh gof without a space when you give it a bunch",
    "start": "1117840",
    "end": "1123880"
  },
  {
    "text": "of files to format it just going to figure out how to format them as fast as possible so that's cool does does gofm",
    "start": "1123880",
    "end": "1129600"
  },
  {
    "text": "work only within the context of a file at a time then like it doesn't need to know anything else about types and",
    "start": "1129600",
    "end": "1136159"
  },
  {
    "text": "things does it cuz it's just doing kind of formatting tasks yeah that's correct so it makes sense you just do all that",
    "start": "1136159",
    "end": "1141200"
  },
  {
    "text": "at the same time yeah even though there's a few tricky bits about that because initially my naive",
    "start": "1141200",
    "end": "1147280"
  },
  {
    "text": "implementation was just format each file as a separate gtin as they come in but",
    "start": "1147280",
    "end": "1153400"
  },
  {
    "text": "some files are really really tiny I think like a doc Dogo file that only has like 10 lines with like a package",
    "start": "1153400",
    "end": "1159240"
  },
  {
    "text": "documentation or something like that and spawning a new goutine synchronizing with the parent maybe allocating the new",
    "start": "1159240",
    "end": "1165679"
  },
  {
    "text": "parser the new printer and stuff like that actually consumed quite a lot more CPU just because of the overhead of",
    "start": "1165679",
    "end": "1171760"
  },
  {
    "text": "those all those tiny files so we ended up with something that's kind of like chunking groups of files in groups of",
    "start": "1171760",
    "end": "1178280"
  },
  {
    "text": "similar sizes so that they're big enough that actually doing that as parallel units it's fast oh that's really cool",
    "start": "1178280",
    "end": "1185080"
  },
  {
    "text": "that's a surprise I would not have expected it to be doing that but that's nice to know that that's measured and",
    "start": "1185080",
    "end": "1191120"
  },
  {
    "text": "done properly that's very cool have you used this then that have you really did you really noticed this in practice the",
    "start": "1191120",
    "end": "1198400"
  },
  {
    "text": "speed improvs I think it depends on what people do I think many people use the tool that works on packages and then",
    "start": "1198400",
    "end": "1204840"
  },
  {
    "text": "they just format their packages but I like using the one with directories so I",
    "start": "1204840",
    "end": "1209919"
  },
  {
    "text": "I go to the root of my repos repository and I just tell it format everything including test files including",
    "start": "1209919",
    "end": "1215120"
  },
  {
    "text": "everything and because I did that it was really slow before so now depending on your machine it's usually about three to",
    "start": "1215120",
    "end": "1221200"
  },
  {
    "text": "four times as fast MH so for me for example formatting a large repo might go from like 5 Seconds to 2 seconds seconds",
    "start": "1221200",
    "end": "1228559"
  },
  {
    "text": "which is nice mat Lu do you format your code yes I I mean we all format our code",
    "start": "1228559",
    "end": "1235520"
  },
  {
    "text": "it's not a trick question just no is there anyone who doesn't format their code cuz yeah I don't know I want to hear about it it's like a problem we",
    "start": "1235520",
    "end": "1242000"
  },
  {
    "text": "need to solve oh yeah no I don't I don't think so because you only have to do it a few times and then when PLL requests",
    "start": "1242000",
    "end": "1248880"
  },
  {
    "text": "although they improved it in GitHub where whites space was understood better but it certainly used to be that what",
    "start": "1248880",
    "end": "1254799"
  },
  {
    "text": "you'd get just pull request that every line has changed because some whites space thing and that got so annoying",
    "start": "1254799",
    "end": "1261480"
  },
  {
    "text": "that it's very high motivator I think to get people formatting but I don't know I assume everyone does format their code",
    "start": "1261480",
    "end": "1268880"
  },
  {
    "text": "do you do it in the way Daniel described then or do you do it like me where you just every time you save a file it does",
    "start": "1268880",
    "end": "1274320"
  },
  {
    "text": "just that file I don't think I've ever run either of the tools or I I certainly",
    "start": "1274320",
    "end": "1280000"
  },
  {
    "text": "haven't run either of the tools by hand in in years my editors are just set up to format files as I save them oh yeah",
    "start": "1280000",
    "end": "1287120"
  },
  {
    "text": "yeah I thought you was saying that you just write it in perfect G fumed way first time oh no no I I don't nailed it",
    "start": "1287120",
    "end": "1294080"
  },
  {
    "text": "I write it in the wrong way and just let the formatter take care of it like any",
    "start": "1294080",
    "end": "1299279"
  },
  {
    "text": "good go developer yeah exactly to be honest I'll deliberately make mistakes so that when I hit save I get the visual",
    "start": "1299279",
    "end": "1306039"
  },
  {
    "text": "clue that it has formatted because if I write it and I get it right and then I hit save and nothing happens I'm like",
    "start": "1306039",
    "end": "1311600"
  },
  {
    "text": "computer's not working so I genuinely sometimes like to see the little shift into place of things as a clue that it's",
    "start": "1311600",
    "end": "1318440"
  },
  {
    "text": "working yeah I mean that that's like a nice way to know that like oh the syntax is correct yeah that's true you know it",
    "start": "1318440",
    "end": "1324720"
  },
  {
    "text": "can parse yeah because if if it errors it doesn't complete it so we actually it is a feedback loop thing there you go",
    "start": "1324720",
    "end": "1331600"
  },
  {
    "text": "tip there for everyone I've actually done with that with tests like if you write a ton of software and some tests",
    "start": "1331600",
    "end": "1337600"
  },
  {
    "text": "and you run the tests and everything's green I often go like I don't believe that let me break one of the tests to",
    "start": "1337600",
    "end": "1343039"
  },
  {
    "text": "see if if I'm doing something really dumb right now yep yeah absolutely in PDD they do talk about that red green",
    "start": "1343039",
    "end": "1349880"
  },
  {
    "text": "testing for that reason like you have to see the test fail so you know it's saying something useful and then when",
    "start": "1349880",
    "end": "1357080"
  },
  {
    "text": "you fix it that's true if I write some code and it and it just even if I'm just running it and I'm going to run it myself and look at the results in the",
    "start": "1357080",
    "end": "1363400"
  },
  {
    "text": "terminal like without even any tests if that works first time I'm highly suspicious really suspicious so yeah in",
    "start": "1363400",
    "end": "1372159"
  },
  {
    "text": "a way I'm not happy when it does okay we've also got the Pacer red design in",
    "start": "1372159",
    "end": "1378440"
  },
  {
    "text": "the garbage collector right that's interesting what's going on there then I brought this up because I think it's a",
    "start": "1378440",
    "end": "1384039"
  },
  {
    "text": "very interesting topic but I think we should also warn that none of us here are experts in this area so we can talk",
    "start": "1384039",
    "end": "1391039"
  },
  {
    "text": "about it at a high level but I'm going to stop there if anybody wants to read more about it we can mention the issue",
    "start": "1391039",
    "end": "1397039"
  },
  {
    "text": "number and then they can go and read the the whole Doc and I think that's very reasonable yeah fair enough good",
    "start": "1397039",
    "end": "1404400"
  },
  {
    "text": "disclaimer to give a bit of an intro the way I it because again I just read this",
    "start": "1404400",
    "end": "1410080"
  },
  {
    "text": "the GC Pacer it's the part of the garbage collector that decides when a new collection should happen so it's",
    "start": "1410080",
    "end": "1416000"
  },
  {
    "text": "sort of the thing that times when the GC should be doing its work because if it happens too often then you're just",
    "start": "1416000",
    "end": "1421480"
  },
  {
    "text": "burning too much CPU you're wasting time but if you're running too little you might be holding on to too much memory",
    "start": "1421480",
    "end": "1427760"
  },
  {
    "text": "or you might be delaying some things happening in the runtime that you don't want to delay by very long it seems like",
    "start": "1427760",
    "end": "1433720"
  },
  {
    "text": "the GC Pacer was designed a while ago for the purpose that it was designed it",
    "start": "1433720",
    "end": "1438960"
  },
  {
    "text": "was good but over time it's accumulated a bunch of debt and a bunch of quirks",
    "start": "1438960",
    "end": "1444279"
  },
  {
    "text": "and they've sort of sat down and said okay let's redesign it in a way that it does a lot better in these edge cases",
    "start": "1444279",
    "end": "1449679"
  },
  {
    "text": "that we found in production workloads that the old one doesn't do very well in and I think that's that's where I'm",
    "start": "1449679",
    "end": "1455559"
  },
  {
    "text": "going to leave it that it's very exciting I I'm really interested Whenever there are these kind",
    "start": "1455559",
    "end": "1461520"
  },
  {
    "text": "of really lowlevel cuz it's funny like when you dig into these little subsystems they're just like other types",
    "start": "1461520",
    "end": "1468120"
  },
  {
    "text": "of programs like they are just doing the same things that we're doing in our programs but they're just so kind of",
    "start": "1468120",
    "end": "1474679"
  },
  {
    "text": "it's such an interesting domain I think that it's always makes it more interesting and the fact that I love the",
    "start": "1474679",
    "end": "1481039"
  },
  {
    "text": "fact that as programmers we get this for free like people are doing this work for us to make these improvements like I",
    "start": "1481039",
    "end": "1488520"
  },
  {
    "text": "didn't even know about a Pacer to be honest so it's very nice to know that that's happening what do you think about",
    "start": "1488520",
    "end": "1494760"
  },
  {
    "text": "that M Michael do you know anything about this no I mean I mean I'm not closely acquainted with it but I think",
    "start": "1494760",
    "end": "1502200"
  },
  {
    "text": "any runtime improvements are well appreciated good work team yep and it's",
    "start": "1502200",
    "end": "1508960"
  },
  {
    "text": "Michael there's another Michael who I think was the author of The redesign is that right yeah do you know all the",
    "start": "1508960",
    "end": "1515320"
  },
  {
    "text": "other Michaels on the go team or have you got together yet with all the rest of the Michael is there another there's",
    "start": "1515320",
    "end": "1522120"
  },
  {
    "text": "a Michael oh there may just be a contributor actually there two are there more than two",
    "start": "1522120",
    "end": "1528679"
  },
  {
    "text": "or there three I guess including myself okay I don't want to be forgetting anyone so if I forgot you no I think we",
    "start": "1528679",
    "end": "1534279"
  },
  {
    "text": "should spend time on this don't forget anyone we should not spend time on this",
    "start": "1534279",
    "end": "1539559"
  },
  {
    "text": "mind you you're just telling me a number even if you forgot a Michael they don't know which one that they've they don't",
    "start": "1539559",
    "end": "1544919"
  },
  {
    "text": "know that they've been forgotten it's just there you go I think it's safe so everyone can assume that I included them",
    "start": "1544919",
    "end": "1550799"
  },
  {
    "text": "in the list of Michaels yeah so calm down Michaels you accounted all Michaels",
    "start": "1550799",
    "end": "1555960"
  },
  {
    "text": "have been accounted for excellent I was thinking before we go on",
    "start": "1555960",
    "end": "1561960"
  },
  {
    "text": "the next topic if anybody wants to read about this the issue number is 44167 and at the end of the issue which",
    "start": "1561960",
    "end": "1568919"
  },
  {
    "text": "is very short there's a link to the full proposal design which is very long and you can read that carefully and get the",
    "start": "1568919",
    "end": "1575919"
  },
  {
    "text": "full picture yeah it it looks very well written and we'll post the uh link to",
    "start": "1575919",
    "end": "1581120"
  },
  {
    "text": "all of these in the show notes so you'll be able to go and actually look at the original issues and honestly like notice",
    "start": "1581120",
    "end": "1588279"
  },
  {
    "text": "that some of these issues aren't created by members of the go team or even popular contributors like Daniel who've",
    "start": "1588279",
    "end": "1595000"
  },
  {
    "text": "contributed massively sometimes these come from just people in the community that have a problem that they want to",
    "start": "1595000",
    "end": "1600279"
  },
  {
    "text": "solve or something they care about so we do get stuck in basically because you never know you might get some",
    "start": "1600279",
    "end": "1605760"
  },
  {
    "text": "improvements made and that'd be great for [Music]",
    "start": "1605760",
    "end": "1616600"
  },
  {
    "text": "everyone we are going to ship in three 2 one I'm",
    "start": "1616600",
    "end": "1624840"
  },
  {
    "text": "garu host of shipit a show with weekly episodes about getting your best ideas",
    "start": "1624840",
    "end": "1629919"
  },
  {
    "text": "into the world and seeing what happens we talk about code Ops infrastructure and the people that make it happen like",
    "start": "1629919",
    "end": "1636840"
  },
  {
    "text": "charity Majors from honeycomb we act like great engineers make great teams when it's exactly the opposite in fact",
    "start": "1636840",
    "end": "1643919"
  },
  {
    "text": "it is great teams that make great engineers and they farle when the founders of continuous delivery start",
    "start": "1643919",
    "end": "1651520"
  },
  {
    "text": "off assuming that we're wrong rather than assuming that we're right test our ideas try and falsify our ideas those",
    "start": "1651520",
    "end": "1657159"
  },
  {
    "text": "are better ways of doing work and it doesn't really matter what work it is that you're doing that stuff just works",
    "start": "1657159",
    "end": "1662799"
  },
  {
    "text": "better we even experiment on our own open-source podcasting platform so that",
    "start": "1662799",
    "end": "1668159"
  },
  {
    "text": "you can see how we Implement specific tools and services within change.com what works and what fails it's like",
    "start": "1668159",
    "end": "1675399"
  },
  {
    "text": "there's a brand new hammer and we grab hold of it and everyone gathers around we put our hand out and we we strike it",
    "start": "1675399",
    "end": "1681960"
  },
  {
    "text": "right on our thumb and then everybody knows that hammer really hurts when you strike it on your thumb I'm glad those",
    "start": "1681960",
    "end": "1687919"
  },
  {
    "text": "guys did it I've learned something instead yeah I think that's a very interesting perspective but I don't see",
    "start": "1687919",
    "end": "1694600"
  },
  {
    "text": "that way okay it's an amazing analogy but I'm not sure that applies here listen to an episode that seems",
    "start": "1694600",
    "end": "1700279"
  },
  {
    "text": "interesting or helpful and if you like it subscribe today we'd love to have you with",
    "start": "1700279",
    "end": "1706080"
  },
  {
    "text": "us does anyone have the M1 chip Apple's M1",
    "start": "1706440",
    "end": "1713039"
  },
  {
    "text": "I have it on my personal laptop yeah that counts it's fast isn't it oh yeah",
    "start": "1713039",
    "end": "1718240"
  },
  {
    "text": "it's great I've been surprised with how how fast it is me too I got the new",
    "start": "1718240",
    "end": "1723320"
  },
  {
    "text": "Macbook Pro recently and is phenomenal absolutely but go had support for the M1",
    "start": "1723320",
    "end": "1729320"
  },
  {
    "text": "chip for quite a while didn't it what does that look like how do we support another chip could someone just briefly",
    "start": "1729320",
    "end": "1735640"
  },
  {
    "text": "and I do mean briefly like we don't have to get into the weeds of it but what do we have to do is it literally we have to",
    "start": "1735640",
    "end": "1742200"
  },
  {
    "text": "add some kind of mapping file for all the instructions so that the compiler knows what to compile them into and it's",
    "start": "1742200",
    "end": "1748760"
  },
  {
    "text": "different if it's a different chip because there's also the Rosetta 2 stuff so that even if a a binary on these new",
    "start": "1748760",
    "end": "1755399"
  },
  {
    "text": "architectures hasn't been built for that architecture this is a translation layer and to be honest they're still lightning",
    "start": "1755399",
    "end": "1761960"
  },
  {
    "text": "fast like as far as I can see when I run programs like that but there are some improvements coming is that right I do",
    "start": "1761960",
    "end": "1768120"
  },
  {
    "text": "seem to recall that when the M1 first came out go did already support RM 64 so",
    "start": "1768120",
    "end": "1773799"
  },
  {
    "text": "the 64 version of the arm architecture M but binaries buil for go targeting the",
    "start": "1773799",
    "end": "1779919"
  },
  {
    "text": "architecture didn't work out of the box for one reason because there wasn't a Darwin SL arm64 Port yet so go did",
    "start": "1779919",
    "end": "1788840"
  },
  {
    "text": "support Mac and it supported r64 but not together yet so they needed to add some gluc code to essentially make those two",
    "start": "1788840",
    "end": "1796760"
  },
  {
    "text": "work together and I think the other major work they had to do was the whole thing about signing binaries because I",
    "start": "1796760",
    "end": "1802960"
  },
  {
    "text": "think the M1 was the first machine that required all binaries to be signed so they had to teach the the Linker how to",
    "start": "1802960",
    "end": "1808039"
  },
  {
    "text": "sign binaries locally something like that yeah yeah oh that's very cool well I just noticed it started working",
    "start": "1808039",
    "end": "1814039"
  },
  {
    "text": "there's also like a lot of work that needs to be done when we're signing binaries for when we're making releases",
    "start": "1814039",
    "end": "1821679"
  },
  {
    "text": "when Apple makes changes to their operating system we often have to like change the infrastructure we use to like",
    "start": "1821679",
    "end": "1829279"
  },
  {
    "text": "produce the go distributions that people get and that takes a lot of work and I",
    "start": "1829279",
    "end": "1834760"
  },
  {
    "text": "kind of just want to kind of mention like all the work that the go release team has done to make our releases",
    "start": "1834760",
    "end": "1841720"
  },
  {
    "text": "smooth because sometimes that goes it's not explicitly talked about as much so I",
    "start": "1841720",
    "end": "1847080"
  },
  {
    "text": "imagine every time Apple says a new major version of Mac OS is coming I imagine some people start sweating",
    "start": "1847080",
    "end": "1853120"
  },
  {
    "text": "thinking oh no what is coming yeah I mean sometimes there's there's like",
    "start": "1853120",
    "end": "1858159"
  },
  {
    "text": "nothing but sometimes they're they're disruptive was it Catalina that they like introduce like major like signing",
    "start": "1858159",
    "end": "1865919"
  },
  {
    "text": "requirements or something they cause big problems well we again yeah again we do",
    "start": "1865919",
    "end": "1871360"
  },
  {
    "text": "appreciate all that work newer x86 64 machines are also getting improvements",
    "start": "1871360",
    "end": "1877279"
  },
  {
    "text": "aren't they Daniel yeah so that that's a good segue because going from for example Arm based machines there's a lot",
    "start": "1877279",
    "end": "1884679"
  },
  {
    "text": "of versions if you have an old phone I believe that it's going to be like R version 6 but later phones are going to",
    "start": "1884679",
    "end": "1890039"
  },
  {
    "text": "be R version 8 or 9 which is 64 Bits And if you compile a binary that's targeting",
    "start": "1890039",
    "end": "1895399"
  },
  {
    "text": "like the lowest possible denominator the older version it's not going to run as fast as it could on a newer device so go",
    "start": "1895399",
    "end": "1902519"
  },
  {
    "text": "has had a flag called I think it's called go arm 64 and you tell it what",
    "start": "1902519",
    "end": "1907639"
  },
  {
    "text": "version of the architecture your machine your target machine supports and then if you swap a six for a N9 it might run 10%",
    "start": "1907639",
    "end": "1915080"
  },
  {
    "text": "faster depending on what kind of code you're running and de 8664 I.E amd64",
    "start": "1915080",
    "end": "1921799"
  },
  {
    "text": "desktop CPUs they don't suffer from as much of the same problem because they",
    "start": "1921799",
    "end": "1927039"
  },
  {
    "text": "haven't had as many versions with as many changes in the last decade or two but you have had some changes and sort",
    "start": "1927039",
    "end": "1934360"
  },
  {
    "text": "of mirroring the same environment variable for arm 64 now we have go amd64",
    "start": "1934360",
    "end": "1939600"
  },
  {
    "text": "and it targets one of four versions and these are sort of standard versions between Intel and AMD where roughly",
    "start": "1939600",
    "end": "1945960"
  },
  {
    "text": "speaking I believe version one is like the common denominator it's basically every single machine that's valid",
    "start": "1945960",
    "end": "1952320"
  },
  {
    "text": "amd64 and then you've got version two for things that are starting I think like 2010 or so version three starting",
    "start": "1952320",
    "end": "1959360"
  },
  {
    "text": "in like 2013 2014 and then version four which is I think AVX 512 which is mostly",
    "start": "1959360",
    "end": "1966039"
  },
  {
    "text": "server computers are very new desktop computers so if for example you know",
    "start": "1966039",
    "end": "1971080"
  },
  {
    "text": "you're targeting a cloud machine and you know the cloud machine has all these new instructions you can swap for from the",
    "start": "1971080",
    "end": "1977279"
  },
  {
    "text": "older version one to version three or four and maybe you're going to save 5 10% CPU cost depending on what kind of",
    "start": "1977279",
    "end": "1984039"
  },
  {
    "text": "code you're running and presumably if you if you choose a higher number and then the architecture is lower then",
    "start": "1984039",
    "end": "1990120"
  },
  {
    "text": "that's a problem I believe it's just going to fail refuse to run it's going to say not supported yeah okay cool yeah",
    "start": "1990120",
    "end": "1996559"
  },
  {
    "text": "makes sense huh yeah there you go that's good to know yeah I mean I often I'm I'm",
    "start": "1996559",
    "end": "2002159"
  },
  {
    "text": "so abstracted from the physical Hardware in certain environments the where that wouldn't be I wouldn't be able to make",
    "start": "2002159",
    "end": "2008039"
  },
  {
    "text": "use of that but there's certainly some cases where I could probably use that today I appreciate you telling me about",
    "start": "2008039",
    "end": "2014519"
  },
  {
    "text": "that one and even if you think well my workload is not that special I believe in Go amd64 version 3 there's an",
    "start": "2014519",
    "end": "2022600"
  },
  {
    "text": "instruction that the runtime garbage collector can use to quickly scan memory for for pointers or something like that",
    "start": "2022600",
    "end": "2029399"
  },
  {
    "text": "in a way that essentially batches the work and makes it a lot faster so you might get the runtime GCS being like a",
    "start": "2029399",
    "end": "2035399"
  },
  {
    "text": "few per faster even if you don't care about newus ah so even if you're not going to make use of it maybe the go",
    "start": "2035399",
    "end": "2042279"
  },
  {
    "text": "tooling and runtime and bits and pieces do very interesting I do want to speak",
    "start": "2042279",
    "end": "2047919"
  },
  {
    "text": "about one more subject before we get onto workspaces if we can and this is something I use a lot and these are the",
    "start": "2047919",
    "end": "2053720"
  },
  {
    "text": "templates in go so we've got text template and HTML template and these",
    "start": "2053720",
    "end": "2061000"
  },
  {
    "text": "sometimes get criticized as being too rudimentary and too lowlevel um but it",
    "start": "2061000",
    "end": "2066440"
  },
  {
    "text": "sort of has enough of what you need as long as you mix in go code usually in functions that you make available to the",
    "start": "2066440",
    "end": "2073000"
  },
  {
    "text": "templates you can kind of really do everything you need but are we getting some new functionality in templates yeah",
    "start": "2073000",
    "end": "2079679"
  },
  {
    "text": "so I added a couple here which are pretty simple to understand I think they both revolve around control flow or",
    "start": "2079679",
    "end": "2086638"
  },
  {
    "text": "logic if you want to think of it that way so one is about adding break and continue so it's the same feature that",
    "start": "2086639",
    "end": "2092158"
  },
  {
    "text": "you have in regular go Loops but for uh ranges in within a template mhm and the",
    "start": "2092159",
    "end": "2097480"
  },
  {
    "text": "other one is that the and and or operators in Boolean Expressions now",
    "start": "2097480",
    "end": "2103520"
  },
  {
    "text": "short circuit in a template lack and go which means that if you do a or b and a",
    "start": "2103520",
    "end": "2108880"
  },
  {
    "text": "is true then B is not evaluated whereas right now it evaluates all the expressions and then works out the the",
    "start": "2108880",
    "end": "2115160"
  },
  {
    "text": "Boolean expression yeah and the result on the expression itself is the same isn't it but if you like you're calling",
    "start": "2115160",
    "end": "2122000"
  },
  {
    "text": "functions within that then you can save those functions they won't get need to get called so that short circuiting",
    "start": "2122000",
    "end": "2127680"
  },
  {
    "text": "sometimes is very important that's very nice to know so the break and continue I",
    "start": "2127680",
    "end": "2133200"
  },
  {
    "text": "guess they are quite simple then so continue is going to loop back and well",
    "start": "2133200",
    "end": "2139079"
  },
  {
    "text": "actually I'm not sure that is that simple in a because the template is kind of declarative isn't it what does the",
    "start": "2139079",
    "end": "2145000"
  },
  {
    "text": "continue do then what happens if there was within the block like content after",
    "start": "2145000",
    "end": "2150079"
  },
  {
    "text": "the continue is that skipped so you can think of templates as sort of scripts I",
    "start": "2150079",
    "end": "2155800"
  },
  {
    "text": "don't believe they let you run code Forever at least not that I can remember but they do have a range yeah statement",
    "start": "2155800",
    "end": "2162160"
  },
  {
    "text": "where you can say range over for example a slice mhm and then within that body you can set variables or you can",
    "start": "2162160",
    "end": "2168520"
  },
  {
    "text": "template some like if you just type something without using the brackets right that's going to be output as part",
    "start": "2168520",
    "end": "2173960"
  },
  {
    "text": "of the template yeah if you have two blocks of code within a range and in between you say continue then the second",
    "start": "2173960",
    "end": "2179760"
  },
  {
    "text": "block is going to be emitted and then you're going to go back to the top of the range right yeah okay so that is how it works and goes so that should feel",
    "start": "2179760",
    "end": "2186200"
  },
  {
    "text": "quite natural but that is quite unusual for templating I don't think I've seen that before it is a bit unusual yes very",
    "start": "2186200",
    "end": "2192359"
  },
  {
    "text": "cool well we have somebody here of course Michael mat Loop who has done",
    "start": "2192359",
    "end": "2199200"
  },
  {
    "text": "Fair bit of work recently on workspaces and this is coming in go18 Michael could",
    "start": "2199200",
    "end": "2206400"
  },
  {
    "text": "you just tell us briefly what are go workspaces what problem did they solve so just like at a simple level the go",
    "start": "2206400",
    "end": "2214359"
  },
  {
    "text": "command in in the module mode allows you to have a single main module that you're",
    "start": "2214359",
    "end": "2219400"
  },
  {
    "text": "working on right like that's the module that your you know your current directory is in and all the files in the",
    "start": "2219400",
    "end": "2226960"
  },
  {
    "text": "module all the packages in the module are like the modules that are the packages that go builds by default and",
    "start": "2226960",
    "end": "2232960"
  },
  {
    "text": "if you have any other code on disk previously you would have to like add replaces or other ways of kind of",
    "start": "2232960",
    "end": "2240119"
  },
  {
    "text": "getting it in which are kind of annoying if you want to make changes across modules it was hard to work across two",
    "start": "2240119",
    "end": "2246839"
  },
  {
    "text": "modules at the same time basically now workspace is allow you to have more than one main module those are modules where",
    "start": "2246839",
    "end": "2254200"
  },
  {
    "text": "you are making edits and and go builds from rather than getting it from a specific version and so workspace",
    "start": "2254200",
    "end": "2261720"
  },
  {
    "text": "allowed you to say these are the modules on this that I'm working on and those are like the base that the uh minimal uh",
    "start": "2261720",
    "end": "2269839"
  },
  {
    "text": "version selection uses when Computing its dependency graph so we think this is",
    "start": "2269839",
    "end": "2276640"
  },
  {
    "text": "going to be useful because we've gotten a lot of uh feedback from people who work across multiple modules in fact",
    "start": "2276640",
    "end": "2283359"
  },
  {
    "text": "those like one of the number one complaints we saw in the go user survey",
    "start": "2283359",
    "end": "2288839"
  },
  {
    "text": "people working in um with modules that they they had problems when they're working in multiple modules they they",
    "start": "2288839",
    "end": "2294839"
  },
  {
    "text": "found it cumbersome and so we hope that multimodule workspaces make that workflow a lot easier for them yeah this",
    "start": "2294839",
    "end": "2301440"
  },
  {
    "text": "is definitely something I've encountered do you think people were like overusing",
    "start": "2301440",
    "end": "2306599"
  },
  {
    "text": "modules do you think that there's like you know we were doing something wrong it felt like that because we were kind",
    "start": "2306599",
    "end": "2312800"
  },
  {
    "text": "of fighting with the tools a little bit what do you mean overusing modules well",
    "start": "2312800",
    "end": "2317920"
  },
  {
    "text": "I mean like sometimes in a project you have like multiple packages sometimes",
    "start": "2317920",
    "end": "2323160"
  },
  {
    "text": "people will each one of those would be a module instead of just a package inside this bigger module things like that yeah",
    "start": "2323160",
    "end": "2329880"
  },
  {
    "text": "I feel like one thing that we learned after you know some experimentation with",
    "start": "2329880",
    "end": "2335119"
  },
  {
    "text": "modules like a after some time using like vgo and then",
    "start": "2335119",
    "end": "2340960"
  },
  {
    "text": "modules in the go command we learned that multimodule repositories are they",
    "start": "2340960",
    "end": "2348560"
  },
  {
    "text": "should be rare they have a lot of surprises when you're working with them",
    "start": "2348560",
    "end": "2353680"
  },
  {
    "text": "and so like now our general recommendation is for people to usually",
    "start": "2353680",
    "end": "2359079"
  },
  {
    "text": "have like one module per repository unless there's a specific very rare set",
    "start": "2359079",
    "end": "2366599"
  },
  {
    "text": "of use cases where they wanted to to have a subm module in their module so in",
    "start": "2366599",
    "end": "2372839"
  },
  {
    "text": "that sense yeah I guess people we were overusing modules because we were learning how to use modules and now",
    "start": "2372839",
    "end": "2380920"
  },
  {
    "text": "those modules exist and and we kind of have to work with them yeah I think for like packages and things for if you're",
    "start": "2380920",
    "end": "2387720"
  },
  {
    "text": "releasing a library that people are going to use I think that's kind of great advice definitely a time I've seen",
    "start": "2387720",
    "end": "2392880"
  },
  {
    "text": "where multiple modules exist is if you have a monor repo and the way that you you would do it the moment I use Vis",
    "start": "2392880",
    "end": "2398560"
  },
  {
    "text": "Visual Studio code you basically open the folder the subfolder just as the root and that's essentially like that",
    "start": "2398560",
    "end": "2405240"
  },
  {
    "text": "becomes the context of that module and that's a way to get around it if you have multiple folders and they have",
    "start": "2405240",
    "end": "2411160"
  },
  {
    "text": "modules in different ones the workspaces I think is is going to enable that now so you'll be able to operate right yeah",
    "start": "2411160",
    "end": "2418599"
  },
  {
    "text": "I mean one of the driving forces behind us starting to work on modules was the",
    "start": "2418599",
    "end": "2425440"
  },
  {
    "text": "user experience in not just Visual Studio code but like any editors that use go please which kind of powers the",
    "start": "2425440",
    "end": "2433240"
  },
  {
    "text": "visual studio code go experience the team was thinking of different ways of",
    "start": "2433240",
    "end": "2439280"
  },
  {
    "text": "representing multiple modules and providing that information to the go command but it had to like kind of",
    "start": "2439280",
    "end": "2446880"
  },
  {
    "text": "introduce A New Concept that like didn't exist in the go command like the go command had no concept of like people",
    "start": "2446880",
    "end": "2452839"
  },
  {
    "text": "working in multiple modules at the same time it just had you know replace directives or requirements and so we",
    "start": "2452839",
    "end": "2461200"
  },
  {
    "text": "decided like the best thing to do is to like make this a first class feature of the go command so not only could go",
    "start": "2461200",
    "end": "2466760"
  },
  {
    "text": "please use it but users who introduce modules can then open up you know command line and the go command",
    "start": "2466760",
    "end": "2473400"
  },
  {
    "text": "understands that they're working in the same workspace in the same set of modules so how does it actually work in",
    "start": "2473400",
    "end": "2478720"
  },
  {
    "text": "practice then do you have to like set up a workspace is this a new concept of a",
    "start": "2478720",
    "end": "2483920"
  },
  {
    "text": "thing you create yes so we have go.mod files and now we have go. work files so",
    "start": "2483920",
    "end": "2490480"
  },
  {
    "text": "you create a go. workk file the syntax is very similar to go dood we want it to be easy for people to pick up and the",
    "start": "2490480",
    "end": "2497920"
  },
  {
    "text": "go. workk has one new directive is the use directive so you tell it which",
    "start": "2497920",
    "end": "2503960"
  },
  {
    "text": "directories you want it to use and all the modules in those directories if you're under the gowork file the same",
    "start": "2503960",
    "end": "2510359"
  },
  {
    "text": "where you're under a go. mod file before are in your workspace so it just you",
    "start": "2510359",
    "end": "2515839"
  },
  {
    "text": "make your gowork file and CD under it and now you're using all those modules and any build that you do or go list or",
    "start": "2515839",
    "end": "2523119"
  },
  {
    "text": "any such command like that and it's going to be aware of those other modules and you're not going to be fighting the",
    "start": "2523119",
    "end": "2528960"
  },
  {
    "text": "tools anymore yep and can you do replaces as well in there you can we",
    "start": "2528960",
    "end": "2534640"
  },
  {
    "text": "don't think people should need to add replaces except in like very specific",
    "start": "2534640",
    "end": "2539960"
  },
  {
    "text": "circumstances we actually added replace because if you have multiple modules in your workspaces they might have flicting",
    "start": "2539960",
    "end": "2547319"
  },
  {
    "text": "replaces and so the replacing the work go. work file can override the replaces",
    "start": "2547319",
    "end": "2552839"
  },
  {
    "text": "that are fighting um but if you wanted to use a a specific module then usually",
    "start": "2552839",
    "end": "2559000"
  },
  {
    "text": "the right thing to do is just use that module in your gowork file yeah so I feel like lots of tools probably got",
    "start": "2559000",
    "end": "2566359"
  },
  {
    "text": "touched by adding this kind of support was it a difficult one to get in most of",
    "start": "2566359",
    "end": "2571640"
  },
  {
    "text": "the work was in the go command itself I mean there there is definely like an",
    "start": "2571640",
    "end": "2577440"
  },
  {
    "text": "amount of complexity in the go command because our module loading code is it",
    "start": "2577440",
    "end": "2582559"
  },
  {
    "text": "does more than you'd think but once we got it to work in the go command one of",
    "start": "2582559",
    "end": "2587880"
  },
  {
    "text": "the nice things is most of our tools call into the go command and so you know as long as they're making a call into",
    "start": "2587880",
    "end": "2594880"
  },
  {
    "text": "the you know go packages or the go command they kind of get all that for free as long as the gowork file exist on",
    "start": "2594880",
    "end": "2601839"
  },
  {
    "text": "disk you know we've had to like make on the vs code go and go pleas teams",
    "start": "2601839",
    "end": "2607280"
  },
  {
    "text": "they've made changes to understand gowork files and pass them into the go",
    "start": "2607280",
    "end": "2612640"
  },
  {
    "text": "command but you know once you pass it in like all the hard work is done by the go command itself this is a really nice",
    "start": "2612640",
    "end": "2619880"
  },
  {
    "text": "thing to have in the way that I work this is going to change a lot there's an experiment for a while where you could",
    "start": "2619880",
    "end": "2626599"
  },
  {
    "text": "try this out wasn't there with an environment variable yeah we you know I filed a proposal for this and I uh made",
    "start": "2626599",
    "end": "2635160"
  },
  {
    "text": "it available and we had a um we had a link for people to easily download a",
    "start": "2635160",
    "end": "2640440"
  },
  {
    "text": "like a development version that included these changes using the go tip command",
    "start": "2640440",
    "end": "2645559"
  },
  {
    "text": "and so people could try it in and get feedback and we got some feedback on it which was super help and we got a lot of",
    "start": "2645559",
    "end": "2652119"
  },
  {
    "text": "feedback on the issue too which was very helpful in developing the issue so or",
    "start": "2652119",
    "end": "2658000"
  },
  {
    "text": "the proposal um so yeah I mean hopefully uh We've addressed most of the important",
    "start": "2658000",
    "end": "2664599"
  },
  {
    "text": "issues people have for anything else just uh 119 absolutely well no I mean honestly I",
    "start": "2664599",
    "end": "2671280"
  },
  {
    "text": "think the the these kinds of things make such a difference so we're so pleased and honestly I feel like there's a lot",
    "start": "2671280",
    "end": "2676800"
  },
  {
    "text": "more to talk about with workspaces and modules maybe Michael you could come back one day and we'll do like a modules",
    "start": "2676800",
    "end": "2683400"
  },
  {
    "text": "and workspaces special oh sure i' I'd love to yeah okay cool well we we will",
    "start": "2683400",
    "end": "2689000"
  },
  {
    "text": "hold you to that this I do consider this to be legally binding like the pinky promises pinky promises are of all the",
    "start": "2689000",
    "end": "2696040"
  },
  {
    "text": "types of promise I think they're up there aren't they with the most important aren't they pinky you know",
    "start": "2696040",
    "end": "2701680"
  },
  {
    "text": "what I mean you've got like local kind of laws you've got like National laws",
    "start": "2701680",
    "end": "2707920"
  },
  {
    "text": "and then all the way at the top after the Supreme Court you've got the little pinky promise there which been pinky",
    "start": "2707920",
    "end": "2713680"
  },
  {
    "text": "promise at the top I got it yeah I think that's how it work I think that's the legal structure of the pinky promise",
    "start": "2713680",
    "end": "2719480"
  },
  {
    "text": "well and here's another pinky promise I promise you're about to hear some unpopular",
    "start": "2719480",
    "end": "2724880"
  },
  {
    "text": "opinions [Music]",
    "start": "2724880",
    "end": "2730480"
  },
  {
    "text": "you I actually think should probably leave un",
    "start": "2730480",
    "end": "2739318"
  },
  {
    "text": "opinion okay who's going to go first with I don't know why I'm speaking in",
    "start": "2741319",
    "end": "2746599"
  },
  {
    "text": "the spooky Voice who wants to say the first unpopular opinion so maybe I can start with mine mine is that I think",
    "start": "2746599",
    "end": "2753839"
  },
  {
    "text": "cenation should be avoided whenever possible possible I think the main reasons for",
    "start": "2753839",
    "end": "2759240"
  },
  {
    "text": "that is because it adds developer friction M it often increases build size and build time and often times people",
    "start": "2759240",
    "end": "2766800"
  },
  {
    "text": "overestimate the how slow reflection is if you is reflection well the cost is actually very reasonable and it's not",
    "start": "2766800",
    "end": "2774480"
  },
  {
    "text": "like you're building your whole program around reflection you're using it in very careful ways in in small",
    "start": "2774480",
    "end": "2780119"
  },
  {
    "text": "places what do you think of that Michael H I I guess I don't have like a very strong opinion",
    "start": "2780119",
    "end": "2786680"
  },
  {
    "text": "about this either way I do yes let's hear your opinion is it the popular or",
    "start": "2786680",
    "end": "2792440"
  },
  {
    "text": "unpopular variety the thing is I love code gen because it's like you're doing",
    "start": "2792440",
    "end": "2798280"
  },
  {
    "text": "loads and loads of typing you just do a bit of typing and you run a command and",
    "start": "2798280",
    "end": "2803720"
  },
  {
    "text": "it's like ah it's like you've done loads of typing so that's the thing like Reflections hard so it's quite",
    "start": "2803720",
    "end": "2809760"
  },
  {
    "text": "satisfying when you get it right but writing editing a template and then running a thing and having 12 00 methods",
    "start": "2809760",
    "end": "2816920"
  },
  {
    "text": "update you've like fixed 1,200 bugs at the same time what do you think of that",
    "start": "2816920",
    "end": "2822400"
  },
  {
    "text": "Michael I will say this I find that working with code generation when using",
    "start": "2822400",
    "end": "2828800"
  },
  {
    "text": "the go command is not very fun I don't like using go generate I don't think it",
    "start": "2828800",
    "end": "2833880"
  },
  {
    "text": "has a good user experience it's like it happens separate from the build so it's",
    "start": "2833880",
    "end": "2839520"
  },
  {
    "text": "really easy to have stale files you know I feel like this ship is sailed but like",
    "start": "2839520",
    "end": "2844920"
  },
  {
    "text": "if you're going to do a lot code generation like basil is is very nice for that but it's not very heavily used",
    "start": "2844920",
    "end": "2853160"
  },
  {
    "text": "in the go Community I mean I I miss uh inside of Google right we use I mean",
    "start": "2853160",
    "end": "2858960"
  },
  {
    "text": "mostly like uh generated protos right and it's like seamless because like the",
    "start": "2858960",
    "end": "2864839"
  },
  {
    "text": "build just generates them automatically and you don't need to think about them and the tools like take care of all of",
    "start": "2864839",
    "end": "2871520"
  },
  {
    "text": "the annoyances that are caused by code generation but tools don't really do",
    "start": "2871520",
    "end": "2876920"
  },
  {
    "text": "that so there's like a lot of friction when using generated code outside of",
    "start": "2876920",
    "end": "2882160"
  },
  {
    "text": "those build systems so I I get pretty annoyed if I have to like run a make",
    "start": "2882160",
    "end": "2887359"
  },
  {
    "text": "before my go build yeah I feel like there's like a a problem that's kind of answering a different question but you",
    "start": "2887359",
    "end": "2893319"
  },
  {
    "text": "know I think generics oh I've said it I'm going to get yeah get booted out here but I think this rule obviously is",
    "start": "2893319",
    "end": "2900720"
  },
  {
    "text": "very weakly enforced so much for Pinky promises eh after I was biging them up",
    "start": "2900720",
    "end": "2905960"
  },
  {
    "text": "and giving them all that legal weight look at it now it's been reduced to a silly childish thing how sad well what I",
    "start": "2905960",
    "end": "2913280"
  },
  {
    "text": "was saying is I think generics are going to get rid of a lot of cases for code",
    "start": "2913280",
    "end": "2918559"
  },
  {
    "text": "generation but reflection is pretty difficult to write because there's no",
    "start": "2918559",
    "end": "2923839"
  },
  {
    "text": "kind of feedback like you need unit tests really for your feedback to I mean",
    "start": "2923839",
    "end": "2929040"
  },
  {
    "text": "you don't really need that let me rephrase that I think reflection is quite hard to get right because it's",
    "start": "2929040",
    "end": "2935280"
  },
  {
    "text": "that sort of of meta programming but then code generation templates are also meta programming and they are often",
    "start": "2935280",
    "end": "2941760"
  },
  {
    "text": "quite difficult to look after and maintain so maybe you got some legs I'll be interested to find to test this one",
    "start": "2941760",
    "end": "2948440"
  },
  {
    "text": "on Twitter at gotime FM we will tweet out a poll and find out if this really",
    "start": "2948440",
    "end": "2953640"
  },
  {
    "text": "isn't poopular it's a candidate for one though it's a good one can you beat him Michael is the question my unpopular",
    "start": "2953640",
    "end": "2960760"
  },
  {
    "text": "opinion is we should bring back the tri proposal oh really and this is where I'm going to not mention the other features",
    "start": "2960760",
    "end": "2968280"
  },
  {
    "text": "by name but I'll I'll say of all the features that people have like proposed",
    "start": "2968280",
    "end": "2973599"
  },
  {
    "text": "to the go like as language changes to the go language I feel like not have",
    "start": "2973599",
    "end": "2978880"
  },
  {
    "text": "been as potentially impactful as the tri proposal was and I was I was sad to see",
    "start": "2978880",
    "end": "2985960"
  },
  {
    "text": "it pulled back because I think air handling properly is really important to",
    "start": "2985960",
    "end": "2992720"
  },
  {
    "text": "writing good code good go code and and I think the language ergonomics should",
    "start": "2992720",
    "end": "2999920"
  },
  {
    "text": "encourage people to handle their errors properly and so often people will just",
    "start": "2999920",
    "end": "3006760"
  },
  {
    "text": "if erir does not equal nil return error and just like not think about what they're doing with their erors and I",
    "start": "3006760",
    "end": "3014079"
  },
  {
    "text": "feel like try gave an opportunity to think like a little bit harder about",
    "start": "3014079",
    "end": "3020200"
  },
  {
    "text": "like wrapping errors properly and what to do with errors and kind of nudge",
    "start": "3020200",
    "end": "3025680"
  },
  {
    "text": "people to do the right thing a little bit more and certainly the proposal as it was like needed more work before it",
    "start": "3025680",
    "end": "3034400"
  },
  {
    "text": "should go in but I really do think we should bring back the the tri proposal and keep working on it and um make it",
    "start": "3034400",
    "end": "3042440"
  },
  {
    "text": "better I don't know when we'll have the bandwidth for another big language change like that but I have to agree",
    "start": "3042440",
    "end": "3049119"
  },
  {
    "text": "with Michael I think the reason the tri proposal got so much bad feedback is sort of the because go is so opinionated",
    "start": "3049119",
    "end": "3056880"
  },
  {
    "text": "a lot of its users have gotten into into this mentality of go doesn't need features so sometimes it the users can",
    "start": "3056880",
    "end": "3063640"
  },
  {
    "text": "have this knee knee-jerk reaction of somebody proposes a change to to the language and they go well but that",
    "start": "3063640",
    "end": "3070480"
  },
  {
    "text": "wouldn't be go right and I think I agree with Michael in the case of try I think it would have been a very interesting change and I hope it comes back so just",
    "start": "3070480",
    "end": "3077720"
  },
  {
    "text": "refresh our memories what did try do yeah so basically it gave you a",
    "start": "3077720",
    "end": "3084160"
  },
  {
    "text": "mechanism to try with an expression that that returned an error as its like final a",
    "start": "3084160",
    "end": "3090680"
  },
  {
    "text": "function that return an error as its final argument right and then it would allow you to handle that error elsewhere",
    "start": "3090680",
    "end": "3097400"
  },
  {
    "text": "so you could add like I think in one of the variations of The Proposal there was",
    "start": "3097400",
    "end": "3102760"
  },
  {
    "text": "like a handle for handling like a number of tries in a function I think in",
    "start": "3102760",
    "end": "3108319"
  },
  {
    "text": "another one if I remembering correctly recover was an option for handling the error but you could kind of have the",
    "start": "3108319",
    "end": "3116160"
  },
  {
    "text": "errors handled in a like a single place I mean basically like people realize",
    "start": "3116160",
    "end": "3122000"
  },
  {
    "text": "that eror handling is awkward and go and the awkwardness I think causes people to",
    "start": "3122000",
    "end": "3127359"
  },
  {
    "text": "take shortcuts and so addressing that awkwardness and nudging people towards doing the right thing especially if you",
    "start": "3127359",
    "end": "3133960"
  },
  {
    "text": "know try and handle came with helpers and and now we do have like functions like erors is and as that like help",
    "start": "3133960",
    "end": "3142240"
  },
  {
    "text": "people with like wrapping erors like those together what like provide a a",
    "start": "3142240",
    "end": "3147640"
  },
  {
    "text": "better model for handling errors and for people to think about handling errors W fascinating stuff there yeah I tell you",
    "start": "3147640",
    "end": "3154079"
  },
  {
    "text": "what that's it's interesting because I think see when I handle errors and I don't know if I do this different to",
    "start": "3154079",
    "end": "3160440"
  },
  {
    "text": "other people I think that there may be I may be unusual in this but I will wrap",
    "start": "3160440",
    "end": "3165960"
  },
  {
    "text": "when I return the error I add a quite a bit of context there so each one is",
    "start": "3165960",
    "end": "3171240"
  },
  {
    "text": "different I'll add and I'll include the thing it's trying to do in that wrap error so it's not that I'll have a WP",
    "start": "3171240",
    "end": "3178640"
  },
  {
    "text": "where I just put the method name or whatever into the error and it's the same every time so if it was the same",
    "start": "3178640",
    "end": "3185079"
  },
  {
    "text": "every time like having it pulled out and have it deal with it in one place is kind of quite nice but yeah the other",
    "start": "3185079",
    "end": "3191839"
  },
  {
    "text": "thing is I mean this doesn't hurt that but I I do like that error handling is at least explicit like and I think the",
    "start": "3191839",
    "end": "3198200"
  },
  {
    "text": "triy proposal didn't really interfere with that but I like the fact that in go we see we we are kind of handling errors",
    "start": "3198200",
    "end": "3205520"
  },
  {
    "text": "even if you are just returning it it's like as long as you're not forgetting about it you know it's kind of it's nice",
    "start": "3205520",
    "end": "3210839"
  },
  {
    "text": "that they are in Forefront of our minds when we're coding I literally was writing something today and I literally",
    "start": "3210839",
    "end": "3218640"
  },
  {
    "text": "had to write if error doesn't equal nil and then I to stop and think oh what do I do if this errors like that that",
    "start": "3218640",
    "end": "3225960"
  },
  {
    "text": "actually is a bit of a not a trivial problem in this particular case I wasn't",
    "start": "3225960",
    "end": "3231160"
  },
  {
    "text": "able to just return an error you know I had to handle that so I quite like that it's in the Forefront at least of the",
    "start": "3231160",
    "end": "3237280"
  },
  {
    "text": "language but yeah interesting we we we'll definitely find out what our other people think on Twitter when we post",
    "start": "3237280",
    "end": "3244079"
  },
  {
    "text": "that one it's going to be very interesting yeah I think I'm interested in seeing how unpopular that that uh",
    "start": "3244079",
    "end": "3250680"
  },
  {
    "text": "that is could do you think that could go for the most unpopular opinion Express in one of these segments could do or you",
    "start": "3250680",
    "end": "3256920"
  },
  {
    "text": "might surprises and maybe everyone's like yeah we loved that and honestly I think I think that point of like we're",
    "start": "3256920",
    "end": "3264200"
  },
  {
    "text": "now so familiar with go we we have to be careful we don't just become kudin about it and resist any change you know",
    "start": "3264200",
    "end": "3272640"
  },
  {
    "text": "because you know we do it should change it should evolve it should get better like all software so I I kind of like",
    "start": "3272640",
    "end": "3278160"
  },
  {
    "text": "yeah interested to to hear what people think of that I think Michael also needs to think that if this opinion is going",
    "start": "3278160",
    "end": "3284319"
  },
  {
    "text": "to be really unpopular then try is not going to come back so you want it to be very popular I hope it's I mean I would",
    "start": "3284319",
    "end": "3290440"
  },
  {
    "text": "like for it to be popular yeah that's not really in the spirit of the segment but that's fine I think it is unpopular",
    "start": "3290440",
    "end": "3297640"
  },
  {
    "text": "but it well we'll find out if it's an opinion that I hold I I you know I would like it to be less unpopular even though",
    "start": "3297640",
    "end": "3305160"
  },
  {
    "text": "it is unpopular sometimes you know when the case is made in fact it's hard to",
    "start": "3305160",
    "end": "3310200"
  },
  {
    "text": "get unpopular opinions this is what we found because people make the case so eloquently like you did and then people",
    "start": "3310200",
    "end": "3316720"
  },
  {
    "text": "on on Twitter you know they easily swayed they believe that now I mean if I",
    "start": "3316720",
    "end": "3322319"
  },
  {
    "text": "can make reference to the G word again yeah there was a time in the community where you brought up the GW and people",
    "start": "3322319",
    "end": "3330000"
  },
  {
    "text": "are like no not in my go and they people were right to be worried about you know",
    "start": "3330000",
    "end": "3337039"
  },
  {
    "text": "those things but I I think like the case was made people worked really hard to",
    "start": "3337039",
    "end": "3344200"
  },
  {
    "text": "present the case why it would actually be an improvement and really convince",
    "start": "3344200",
    "end": "3349799"
  },
  {
    "text": "people like convince people who use go that it was actually going to be a a n",
    "start": "3349799",
    "end": "3355079"
  },
  {
    "text": "positive and I I think the sentiment now towards the g-word is a lot more",
    "start": "3355079",
    "end": "3360760"
  },
  {
    "text": "positive than than it was five or six years ago yeah that is definitely true",
    "start": "3360760",
    "end": "3367480"
  },
  {
    "text": "and then the counter is you know we don't want it to be too easy to change things because of the backwards",
    "start": "3367480",
    "end": "3372680"
  },
  {
    "text": "compatibility promise I do quite like the fact that it's quite a rigorous process before we really get any big",
    "start": "3372680",
    "end": "3379920"
  },
  {
    "text": "changes like this I think that's there's value in that too so that really only the only good stuff is going to get",
    "start": "3379920",
    "end": "3385920"
  },
  {
    "text": "through hopefully every new thing we add is something we have to maintain",
    "start": "3385920",
    "end": "3392160"
  },
  {
    "text": "forever we do have to be careful about adding new things for sure yeah cuz forever is ages is it it's a pretty long",
    "start": "3392160",
    "end": "3399119"
  },
  {
    "text": "time yeah I also remember somebody recently criticizing go I think it was",
    "start": "3399119",
    "end": "3404160"
  },
  {
    "text": "on Hacker News saying something along the lines of go is a popular language that has ignored all the programming",
    "start": "3404160",
    "end": "3410559"
  },
  {
    "text": "language development in the past 15 years but that's kind of why it works",
    "start": "3410559",
    "end": "3415640"
  },
  {
    "text": "right because it it it only Builds on top of what has been well tested and I think the only major exception there is",
    "start": "3415640",
    "end": "3422200"
  },
  {
    "text": "modules which goes against everything else that has been done in package management yeah that's quite interesting",
    "start": "3422200",
    "end": "3427799"
  },
  {
    "text": "it is a very stable thing and yeah the that other thing of having lots of different ways to do the same thing in",
    "start": "3427799",
    "end": "3434799"
  },
  {
    "text": "JavaScript like you almost have to learn a particular flavor of JavaScript now in order to contribute to a project some",
    "start": "3434799",
    "end": "3441839"
  },
  {
    "text": "are using all the latest language features and like the little arrows for",
    "start": "3441839",
    "end": "3447000"
  },
  {
    "text": "functions and things like this and you sort of have to learn all that yeah I mean I find that sad from the other side",
    "start": "3447000",
    "end": "3454200"
  },
  {
    "text": "you know JavaScript and all the other parts of the web ecosystem have become",
    "start": "3454200",
    "end": "3460480"
  },
  {
    "text": "so big that it is impossible for anyone to make a new JavaScript interpreter",
    "start": "3460480",
    "end": "3467839"
  },
  {
    "text": "engine without the resources of a huge multinational corporation that sucks",
    "start": "3467839",
    "end": "3474160"
  },
  {
    "text": "well I'm Afra afraid that's all the time we have on that somber note you can forget about your dreams of",
    "start": "3474160",
    "end": "3481240"
  },
  {
    "text": "writing your own JavaScript engine it's not going to happen so just wake up sorry no it's",
    "start": "3481240",
    "end": "3488119"
  },
  {
    "text": "it's harsh it's a harsh wakeup call Michael but we needed it thank you very much thank you so much to our guests",
    "start": "3488119",
    "end": "3496440"
  },
  {
    "text": "today Michael mat luo joined us as did Daniel Marti it was a pleasure as always",
    "start": "3496440",
    "end": "3503119"
  },
  {
    "text": "thank you very much thanks for joining us on go time thanks to you we'll see you next",
    "start": "3503119",
    "end": "3508520"
  },
  {
    "text": "time all right that is go time for this week what are you most excited about in",
    "start": "3510920",
    "end": "3516240"
  },
  {
    "text": "go 1.18 is it fuzzing generics something we talked about today let us know in the",
    "start": "3516240",
    "end": "3522559"
  },
  {
    "text": "comments just pop open your show notes click the discuss on change log news link and let your voice be heard and if",
    "start": "3522559",
    "end": "3528920"
  },
  {
    "text": "you're a longtime listener do us a solid and tell a friend about the show it is the best way for you to support go to",
    "start": "3528920",
    "end": "3534799"
  },
  {
    "text": "time of course we have our change log Plus+ membership which is awesome and gets you closer to the metal but if you want to pitch in we would love a tweet a",
    "start": "3534799",
    "end": "3541760"
  },
  {
    "text": "blog post a redit thread however it is that you like to socialize thanks again to fastly for being our CDN partner for",
    "start": "3541760",
    "end": "3548200"
  },
  {
    "text": "all these years to break master cylinder for keeping our beats fresh and to you for listening we appreciate you an",
    "start": "3548200",
    "end": "3554680"
  },
  {
    "text": "episode on graphql is in the pipeline in fact it's coming up next time on go",
    "start": "3554680",
    "end": "3562160"
  },
  {
    "text": "time [Music]",
    "start": "3563640",
    "end": "3574300"
  },
  {
    "text": "k",
    "start": "3575799",
    "end": "3578799"
  }
]