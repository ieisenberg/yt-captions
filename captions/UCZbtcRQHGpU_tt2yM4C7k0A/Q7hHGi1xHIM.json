[
  {
    "text": "so if we can do that now we can write",
    "start": "480",
    "end": "2940"
  },
  {
    "text": "one function and go but we can have an",
    "start": "2940",
    "end": "6120"
  },
  {
    "text": "infinite number of actual",
    "start": "6120",
    "end": "8160"
  },
  {
    "text": "implementations of it because the type",
    "start": "8160",
    "end": "10320"
  },
  {
    "text": "can change so if you've got a function",
    "start": "10320",
    "end": "12540"
  },
  {
    "text": "that takes in a type parameter or a",
    "start": "12540",
    "end": "14940"
  },
  {
    "text": "parameter of type T where T is a type",
    "start": "14940",
    "end": "17160"
  },
  {
    "text": "parameter well I can invent Infinity",
    "start": "17160",
    "end": "20760"
  },
  {
    "text": "types right so if I can invent Infinity",
    "start": "20760",
    "end": "24060"
  },
  {
    "text": "types then that function can take in",
    "start": "24060",
    "end": "26100"
  },
  {
    "text": "Infinity different types of parameters",
    "start": "26100",
    "end": "28199"
  },
  {
    "text": "which means there are Infinity different",
    "start": "28199",
    "end": "30779"
  },
  {
    "text": "implementations of that function and you",
    "start": "30779",
    "end": "33899"
  },
  {
    "text": "know the go compiler is going to figure",
    "start": "33899",
    "end": "35340"
  },
  {
    "text": "out how to define actual implementations",
    "start": "35340",
    "end": "37980"
  },
  {
    "text": "that take into the actual types I don't",
    "start": "37980",
    "end": "39840"
  },
  {
    "text": "have to worry about that anymore which",
    "start": "39840",
    "end": "41700"
  },
  {
    "text": "means I don't have to generate code or",
    "start": "41700",
    "end": "43440"
  },
  {
    "text": "anything like that but now that we have",
    "start": "43440",
    "end": "45899"
  },
  {
    "text": "this power and this is immense amount of",
    "start": "45899",
    "end": "48000"
  },
  {
    "text": "power",
    "start": "48000",
    "end": "48980"
  },
  {
    "text": "now we can start to have things like say",
    "start": "48980",
    "end": "53640"
  },
  {
    "text": "take the map example we could start to",
    "start": "53640",
    "end": "56340"
  },
  {
    "text": "have things like a single function",
    "start": "56340",
    "end": "58800"
  },
  {
    "text": "called map that can operate on a list of",
    "start": "58800",
    "end": "62579"
  },
  {
    "text": "any type",
    "start": "62579",
    "end": "63780"
  },
  {
    "text": "instead of before we had to have a",
    "start": "63780",
    "end": "66840"
  },
  {
    "text": "function called map that only could",
    "start": "66840",
    "end": "68400"
  },
  {
    "text": "operate on a list of one type and we had",
    "start": "68400",
    "end": "70920"
  },
  {
    "text": "to repeat the implementation of map over",
    "start": "70920",
    "end": "73380"
  },
  {
    "text": "and over and over again for all our",
    "start": "73380",
    "end": "75119"
  },
  {
    "text": "different lists now the compiler just",
    "start": "75119",
    "end": "77280"
  },
  {
    "text": "does that for us like magic thank you go",
    "start": "77280",
    "end": "79619"
  },
  {
    "text": "team you all gave us this opportunity to",
    "start": "79619",
    "end": "82500"
  },
  {
    "text": "save tons of generated code and that's",
    "start": "82500",
    "end": "84540"
  },
  {
    "text": "amazing so that's kind of where we're at",
    "start": "84540",
    "end": "86880"
  },
  {
    "text": "now",
    "start": "86880",
    "end": "88799"
  },
  {
    "text": "right",
    "start": "88799",
    "end": "91460"
  }
]