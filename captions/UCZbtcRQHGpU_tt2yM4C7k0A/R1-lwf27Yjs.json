[
  {
    "text": "[Music] let's do it it's go time welcome to go",
    "start": "7390",
    "end": "13000"
  },
  {
    "text": "time your source for wide ranging discussions from all around the go Community good news everyone we just",
    "start": "13000",
    "end": "21000"
  },
  {
    "text": "dropped dance party our third full length album on Chang log beats buy it",
    "start": "21000",
    "end": "26720"
  },
  {
    "text": "on band camp and iTunes or stream it on Spotify by Apple music and the rest",
    "start": "26720",
    "end": "32800"
  },
  {
    "text": "enjoy the drop thank you to our partners at fly.io launch your app close to your",
    "start": "32800",
    "end": "38640"
  },
  {
    "text": "users find out how at fly.io okay here we",
    "start": "38640",
    "end": "45360"
  },
  {
    "text": "[Music]",
    "start": "45600",
    "end": "56199"
  },
  {
    "text": "go hello hello hello welcome to go time I am your host Johnny Boro joining me",
    "start": "56199",
    "end": "63920"
  },
  {
    "text": "today to discuss what is new in go 122",
    "start": "63920",
    "end": "69040"
  },
  {
    "text": "is my co-host Mr Ian Lopshire hello Ian hi happy to be here today glad you're",
    "start": "69040",
    "end": "74159"
  },
  {
    "text": "here also returning for I don't know this must be like the fifth sixth so I",
    "start": "74159",
    "end": "79759"
  },
  {
    "text": "don't know I'll stop keeping track but uh my guest um Carana Johnson hello car",
    "start": "79759",
    "end": "86079"
  },
  {
    "text": "how are you I'm back it's been six months yes it's a reliable schedule",
    "start": "86079",
    "end": "91400"
  },
  {
    "text": "that's right that's right every time every time we have a new releas of go in a changing world the one thing that's the same is the go release",
    "start": "91400",
    "end": "98360"
  },
  {
    "text": "cycle indeed indeed and for those who don't know um we indeed have a predictable",
    "start": "98360",
    "end": "105880"
  },
  {
    "text": "release cycle um for the go language um every six months we get a release uh in",
    "start": "105880",
    "end": "111719"
  },
  {
    "text": "between there we get patches of course um but yeah we we have uh the same freezing cycle the same release cycle",
    "start": "111719",
    "end": "119159"
  },
  {
    "text": "that pretty much we can set our clock by which is kind of cool um I I'm not sure of any other language communities um or",
    "start": "119159",
    "end": "127960"
  },
  {
    "text": "even software really um that follows such a Clockwork reliable release schedule iOS is pretty consistent about",
    "start": "127960",
    "end": "134440"
  },
  {
    "text": "coming out in the fall like apple will do you know Mac OS and iOS in the fall but then that's only once a year go",
    "start": "134440",
    "end": "141640"
  },
  {
    "text": "comes out twice a year so I don't know anything that's quite as big and as reliable on a six-month schedule that is",
    "start": "141640",
    "end": "147280"
  },
  {
    "text": "true that is true so as we are are recording this go 122 is not out quite",
    "start": "147280",
    "end": "154040"
  },
  {
    "text": "yet it's uh in the release candidate phase but uh based on you know again the",
    "start": "154040",
    "end": "159959"
  },
  {
    "text": "consistency we've been talking about here by the time you listen to it chances are pretty high that it will have been released so we expecting the",
    "start": "159959",
    "end": "166680"
  },
  {
    "text": "release um early February which starts basically uh in a couple days for us so",
    "start": "166680",
    "end": "172000"
  },
  {
    "text": "yeah it's upon us but at this point the freezes have occurred um if there's any",
    "start": "172000",
    "end": "178519"
  },
  {
    "text": "remaining work to be done it's very minor tidying up stuff uh but the release is being packaged up and is",
    "start": "178519",
    "end": "184599"
  },
  {
    "text": "coming very soon so Carolina we I know you came up with a few things I'm sure",
    "start": "184599",
    "end": "191120"
  },
  {
    "text": "Ian has his favorites and I have my favorites but I know you came up with a list for us to discuss so what is first",
    "start": "191120",
    "end": "198959"
  },
  {
    "text": "up on your agenda so I think where we can pick up um with as followup from the last episode was um we talked about last",
    "start": "198959",
    "end": "206599"
  },
  {
    "text": "time that they were making a change to how for loops work and now that change is it has gone from being an experiment",
    "start": "206599",
    "end": "213480"
  },
  {
    "text": "to being an official integrated part of um the go language um and so this is",
    "start": "213480",
    "end": "218760"
  },
  {
    "text": "basically a fix for if you have a loop variable you might not realize it but",
    "start": "218760",
    "end": "224879"
  },
  {
    "text": "the variable is reused every time you go through the loop and so that can lead to",
    "start": "224879",
    "end": "230280"
  },
  {
    "text": "a situation where you think that you're getting a new value every time through",
    "start": "230280",
    "end": "236560"
  },
  {
    "text": "the loop but actually it's getting captured in a closure and only the last value is seen so this happens a lot in",
    "start": "236560",
    "end": "243959"
  },
  {
    "text": "tests if you have a test and you're looping through some things that you're testing on the last Loop through you",
    "start": "243959",
    "end": "250079"
  },
  {
    "text": "know the value is whatever the last value is and if you do t.p parallel it's going to you know fan out and do all of",
    "start": "250079",
    "end": "257959"
  },
  {
    "text": "those tests in parallel but only the final value will be seen or actually it's a it's a racing bug so maybe it's",
    "start": "257959",
    "end": "264840"
  },
  {
    "text": "sort of random um what's seen so you might think you testing you know say 10 10 cases right but really you've just",
    "start": "264840",
    "end": "272400"
  },
  {
    "text": "successfully executed this the one one case 10 times yeah yeah that's a pretty common bug python has this same kind of",
    "start": "272400",
    "end": "279960"
  },
  {
    "text": "I don't even know if it's fair to call it a bug but it has the same grammatical issue that in Python if you do a for",
    "start": "279960",
    "end": "286000"
  },
  {
    "text": "Loop and you have a Lambda you might not realize it but your Lambda is going to capture the same variable will be reused",
    "start": "286000",
    "end": "293360"
  },
  {
    "text": "um so in go 121 they they introduced a fix for this and in go 122 it'll just",
    "start": "293360",
    "end": "300199"
  },
  {
    "text": "work the way that you expect it to so really ignore all the explanation don't remember any of that just use it the way",
    "start": "300199",
    "end": "307120"
  },
  {
    "text": "that you think that you would use it and now this is just trivia for like if you see an old go program and you wonder why",
    "start": "307120",
    "end": "314479"
  },
  {
    "text": "do they have I equals I at the top of this Loop or why do they have test case equals test case at the top of the loop",
    "start": "314479",
    "end": "320880"
  },
  {
    "text": "that's just like some historical detail delete that line it doesn't matter anymore only only if you have the",
    "start": "320880",
    "end": "326759"
  },
  {
    "text": "pleasure of working with go 122 and above other than that you know if you're",
    "start": "326759",
    "end": "333840"
  },
  {
    "text": "in like an Enterprise environment you might want to wait be hard to break that habit honestly right right right I Ian",
    "start": "333840",
    "end": "340280"
  },
  {
    "text": "doesn't think he's gonna be able to you know get get rid of that habit quite",
    "start": "340280",
    "end": "345400"
  },
  {
    "text": "soon so speaking of looping right we have some additional capabilities right",
    "start": "345400",
    "end": "351880"
  },
  {
    "text": "coming with being able to sort of loop over things like what's what's up on the what's up next okay so yeah this is a",
    "start": "351880",
    "end": "358120"
  },
  {
    "text": "very looping relas of go so there's one change that is official and there's",
    "start": "358120",
    "end": "363600"
  },
  {
    "text": "another change that's experimental so the official change is that now you can say for n or X colon equals range and",
    "start": "363600",
    "end": "372759"
  },
  {
    "text": "then use an integer so if you're used to those oldfashioned C style Loops where",
    "start": "372759",
    "end": "378720"
  },
  {
    "text": "you say you know for I equals z i less than n i++ you know the classic three",
    "start": "378720",
    "end": "385199"
  },
  {
    "text": "expression for Loop you don't have to do that anymore now you can just say for range integer and it will automatically",
    "start": "385199",
    "end": "392120"
  },
  {
    "text": "range from zero to one less than whatever the integer is so it's not totally perfect like if you wanted to do",
    "start": "392120",
    "end": "399520"
  },
  {
    "text": "something where oh I want to skip by two or I want to go backwards or you know",
    "start": "399520",
    "end": "405080"
  },
  {
    "text": "whatever it doesn't do those things uh it just is for going from zero to n or n",
    "start": "405080",
    "end": "412360"
  },
  {
    "text": "minus one but you know that's a pretty common case so it just cut down on the boiler plate a little bit an example of",
    "start": "412360",
    "end": "419000"
  },
  {
    "text": "where this is helpful is if you're writing a benchmark you're supposed to say well before you would say for I",
    "start": "419000",
    "end": "425599"
  },
  {
    "text": "colon equals z i less than Benchmark n i++ now you can just say for range",
    "start": "425599",
    "end": "432800"
  },
  {
    "text": "Benchmark n and it will automatically Loop through as many times as The Benchmark wants it to be looped through",
    "start": "432800",
    "end": "439000"
  },
  {
    "text": "right I love this honestly to me that's that's a huge sort of improvement in",
    "start": "439000",
    "end": "444080"
  },
  {
    "text": "sort of a readability and just succinctness right the I think I can't remember",
    "start": "444080",
    "end": "450360"
  },
  {
    "text": "I can't think of how many times I've actually relied on sort of the old SE style you know",
    "start": "450360",
    "end": "456479"
  },
  {
    "text": "initializer comparison in an increment like a whole three-part style I think the only place I consistently have had",
    "start": "456479",
    "end": "463440"
  },
  {
    "text": "to use that is when I'm trying to do this very thing right I'm trying to range from a you know from zero to up to a number and whatnot so I think this",
    "start": "463440",
    "end": "470039"
  },
  {
    "text": "will probably be sort of become my go-to for for this kind of use cases so I think that's definitely a nice Improvement so this is this is not",
    "start": "470039",
    "end": "477360"
  },
  {
    "text": "officially part of 122 yet right this one is official so this is this is officially part of the language I'm",
    "start": "477360",
    "end": "483280"
  },
  {
    "text": "going to be honest at some point I accused Russ Cox of throwing this out as like a distraction or something so that",
    "start": "483280",
    "end": "489759"
  },
  {
    "text": "we would all just debate about this instead of his like serious proposal I don't know if you guys remember that old",
    "start": "489759",
    "end": "495080"
  },
  {
    "text": "story that um there was the video game battle chess and the manager for the game was like a notorious micromanager",
    "start": "495080",
    "end": "502879"
  },
  {
    "text": "and so one of the artists who was drawing you know the animations for the game he was drawing the queen and he had",
    "start": "502879",
    "end": "508960"
  },
  {
    "text": "to draw the between attacking the different people and he knew that his manager was going to find something wrong with it so what he did is he drew",
    "start": "508960",
    "end": "515640"
  },
  {
    "text": "a little duck in the corner and the duck would jump up off the Queen's back and and Quack and Quack and Quack but he",
    "start": "515640",
    "end": "521120"
  },
  {
    "text": "drew it in such a way that the duck never actually overlapped with the queen and it was very easy to erase and so",
    "start": "521120",
    "end": "527320"
  },
  {
    "text": "when the manager came he looked at the animation and he said I love it the queen looks great her axe is really swinging and killing those other pawns",
    "start": "527320",
    "end": "534839"
  },
  {
    "text": "and things but just erase the duck and he's like oh yeah yeah yeah I'm going to erase the duck so I kind of had the theory that maybe Russ Cox had thrown",
    "start": "534839",
    "end": "541399"
  },
  {
    "text": "this in there as like a duck of like okay I've got this big idea for um how I'm going to change you know iteration",
    "start": "541399",
    "end": "548600"
  },
  {
    "text": "forever and go and people are going to be really excited and upset and have a lot of opinions about it but I'll throw",
    "start": "548600",
    "end": "554000"
  },
  {
    "text": "in this integer thing too and then everybody's just going to tell me to erase the duck and then uh that'll",
    "start": "554000",
    "end": "560079"
  },
  {
    "text": "that'll distract from my master plan I kind of had that theory he denies it he denied it in the issue tracker and it",
    "start": "560079",
    "end": "567079"
  },
  {
    "text": "does seem like it's popular I mean I agree it cuts down the boiler plate I think if it hadn't happened I would have",
    "start": "567079",
    "end": "572680"
  },
  {
    "text": "you know continued to do the three the traditional SE loops and not complained",
    "start": "572680",
    "end": "577760"
  },
  {
    "text": "about it but you know I think it's a good change it does make the language easier to use it just cuts down on a",
    "start": "577760",
    "end": "583519"
  },
  {
    "text": "little bit of typing which is always you know I love go but that is definitely the downside of it is that there's a",
    "start": "583519",
    "end": "589320"
  },
  {
    "text": "little bit of verbosity sometimes like for me like the whole",
    "start": "589320",
    "end": "595079"
  },
  {
    "text": "like B this whole class of of uh you know looping changes um I think does",
    "start": "595079",
    "end": "600360"
  },
  {
    "text": "wonders for the teachability of go like especially when I have to when I have to I mean I can't tell you how many times I",
    "start": "600360",
    "end": "606560"
  },
  {
    "text": "have to sort of contort how I'm teaching like that whole Loop closure thing so I",
    "start": "606560",
    "end": "611959"
  },
  {
    "text": "have to explain to people well if you're G to be in any way relying on this value",
    "start": "611959",
    "end": "617120"
  },
  {
    "text": "changing especially when using go routines or testing things in parallel right this is this odd thing you must do",
    "start": "617120",
    "end": "623760"
  },
  {
    "text": "in your code and I get like these these like Curious blank stairs I'm like hm",
    "start": "623760",
    "end": "629920"
  },
  {
    "text": "I'm like yes I know I I get it I get it I get it but this is the way you do this I mean now I don't have to you know even",
    "start": "629920",
    "end": "637040"
  },
  {
    "text": "mention this anymore matter of fact I'm gonna see if I can get away with not mentioning this ever again at all yeah I",
    "start": "637040",
    "end": "642720"
  },
  {
    "text": "actually think this is um I hadn't thought about it from the education angle but I do think you know as an",
    "start": "642720",
    "end": "647920"
  },
  {
    "text": "educator you know you want to start off with something that's really easy and simple to explain and so now you don't",
    "start": "647920",
    "end": "653519"
  },
  {
    "text": "have to explain about the closure thing at all so like that's just like if you don't have to explain it that's great",
    "start": "653519",
    "end": "658959"
  },
  {
    "text": "and then for the range Loops even like having to do the three form the three expression form if somebody has coming",
    "start": "658959",
    "end": "665240"
  },
  {
    "text": "from you know C or a language where this is the norm then maybe it won't be weird",
    "start": "665240",
    "end": "670959"
  },
  {
    "text": "to them but if you aren't coming from C that is weird like it is strange that",
    "start": "670959",
    "end": "676360"
  },
  {
    "text": "it's like okay there's three things the first one is the initializer the middle one is the condition the last one is the",
    "start": "676360",
    "end": "683600"
  },
  {
    "text": "post expression it's like it's weird and so I do think that you know just being",
    "start": "683600",
    "end": "688959"
  },
  {
    "text": "able say for range n it's like much faster to explain it's much easier for",
    "start": "688959",
    "end": "694000"
  },
  {
    "text": "people to use they will probably have a question about why it starts at zero and ends at one less than the number but you",
    "start": "694000",
    "end": "699880"
  },
  {
    "text": "know that's that's something you're going to have to explain anyway about how you know slices are indexed right I",
    "start": "699880",
    "end": "705800"
  },
  {
    "text": "do think from an education angle this makes it a lot simpler and then you know you can eventually get around to explaining oh yeah there's also this",
    "start": "705800",
    "end": "712240"
  },
  {
    "text": "weird three expression form that you hardly ever use so I think this is good",
    "start": "712240",
    "end": "717519"
  },
  {
    "text": "yeah I must still have to explain that hey if you happen to come across you know some oldc C bases where you see",
    "start": "717519",
    "end": "723519"
  },
  {
    "text": "this odd or these Oddities right this is the reason but for the sake of moving",
    "start": "723519",
    "end": "728560"
  },
  {
    "text": "forward we'll pretend they don't exist all right so we've covered a lot",
    "start": "728560",
    "end": "735920"
  },
  {
    "text": "of Loops right but that's not all there is in this relas there's one more Loop there wait what there is we still",
    "start": "735920",
    "end": "742279"
  },
  {
    "text": "looping all right we're still going in circles this is a pretty exciting change",
    "start": "742279",
    "end": "748240"
  },
  {
    "text": "so in go 1.22 there is a go experiment to introduce range over functions so as",
    "start": "748240",
    "end": "756240"
  },
  {
    "text": "uh listeners probably know generics were introduced uh a couple of years ago in go",
    "start": "756240",
    "end": "761600"
  },
  {
    "text": "1.18 and so basically ever since generics were introduced people have been saying all right generics are great",
    "start": "761600",
    "end": "768199"
  },
  {
    "text": "I can write libraries to work with slices to work with maps to work with channels but how do I write something",
    "start": "768199",
    "end": "774720"
  },
  {
    "text": "that will will go over an iterator because go does not have an officially",
    "start": "774720",
    "end": "779839"
  },
  {
    "text": "blessed pattern for iterators so if you look there have actually been a number of discussions and um proposals I",
    "start": "779839",
    "end": "787880"
  },
  {
    "text": "actually made my own proposal a couple of years ago which was not very different from what other people had",
    "start": "787880",
    "end": "793360"
  },
  {
    "text": "done and I think a lot of people if you just think how should iterators work and go your first thought is well there",
    "start": "793360",
    "end": "799760"
  },
  {
    "text": "should probably be some sort of interface and the interface has a next method and the next method returns a bu",
    "start": "799760",
    "end": "806839"
  },
  {
    "text": "and either there's also a Value method that Returns the value or the next method could return the value and a bull",
    "start": "806839",
    "end": "814000"
  },
  {
    "text": "people propose both the problem with doing it that way is that it's not",
    "start": "814000",
    "end": "819720"
  },
  {
    "text": "backwards compatible so if you have a slice and you define methods on the",
    "start": "819720",
    "end": "825639"
  },
  {
    "text": "slice this would change how it's interpreted so go would have to look at it and say should I be calling the next",
    "start": "825639",
    "end": "832399"
  },
  {
    "text": "method on this slice or should I call should I just use it and arrange the way I always have and so that was an initial",
    "start": "832399",
    "end": "839440"
  },
  {
    "text": "concern of how do we do this in a way that's backwards compatible and so Russ Cox realized that a way that you could",
    "start": "839440",
    "end": "846000"
  },
  {
    "text": "make this backwards compatible is right now range Loops are based on the type of the value passed so you could be ranging",
    "start": "846000",
    "end": "853240"
  },
  {
    "text": "over a slice over a map over a channel and the range statement is based on the underlying type of the value being",
    "start": "853240",
    "end": "859480"
  },
  {
    "text": "iterated over and so Rus Cox realized that the function type is not being used",
    "start": "859480",
    "end": "865160"
  },
  {
    "text": "so right now if you have a function and you say for range F that's an illegal",
    "start": "865160",
    "end": "870399"
  },
  {
    "text": "call because um you know f is just not the right kind of type to pass to a range statement and So based on that he",
    "start": "870399",
    "end": "877079"
  },
  {
    "text": "came up with the idea of all right well what if we have a function and the function will say will yield the values",
    "start": "877079",
    "end": "883519"
  },
  {
    "text": "that need to be iterated next so it's a little bit funky to look at when you see the code it kind of bends your mind a",
    "start": "883519",
    "end": "890240"
  },
  {
    "text": "little bit because you're taking a function and returning a function and getting a function back but when you",
    "start": "890240",
    "end": "895600"
  },
  {
    "text": "actually sit down to write the code it's not so bad and so this this is the new way that you can essentially just write",
    "start": "895600",
    "end": "901720"
  },
  {
    "text": "a little function that returns a function and now you've got an iterator so this is really good if you have let's",
    "start": "901720",
    "end": "906920"
  },
  {
    "text": "say a binary tree and you want to iterate over the binary tree traditionally if you were trying to",
    "start": "906920",
    "end": "912800"
  },
  {
    "text": "write that um using methods and you you would have to create like a tree",
    "start": "912800",
    "end": "917920"
  },
  {
    "text": "iterator type and give it a next method um and the next method either Returns the value or there's also like a Value",
    "start": "917920",
    "end": "924639"
  },
  {
    "text": "method and you have to keep track of where you are in the tree and it's pretty complicated",
    "start": "924639",
    "end": "929680"
  },
  {
    "text": "um but if you do it as a function actually the code is pretty simple um you just have to call the yield",
    "start": "929680",
    "end": "935600"
  },
  {
    "text": "parameter so you're you're taking a function that takes a function and you just take the yield parameter and it",
    "start": "935600",
    "end": "941079"
  },
  {
    "text": "works out pretty easily to write your own iterators so I've already been playing around with this for the HTML",
    "start": "941079",
    "end": "947319"
  },
  {
    "text": "package it's not in the go standard library but it's in the semi supported golang.org",
    "start": "947319",
    "end": "953199"
  },
  {
    "text": "SLX Library there's um a nice package for parsing HTML and so I just wrote my",
    "start": "953199",
    "end": "958759"
  },
  {
    "text": "own little iterator to you know go through the nodes of the tree and so then once I do that I can filter out",
    "start": "958759",
    "end": "964759"
  },
  {
    "text": "items or you know collect all of the things that match some selector underneath it and it's been really",
    "start": "964759",
    "end": "970399"
  },
  {
    "text": "helpful it's been very useful and like I say it's a little mind-bending to get used to just because there's like",
    "start": "970399",
    "end": "975880"
  },
  {
    "text": "functions returning functions but once you get used to it it's pretty handy and then it lets you build up you know",
    "start": "975880",
    "end": "982160"
  },
  {
    "text": "libraries that will take an iterator you know Loop through it collect it you know",
    "start": "982160",
    "end": "987639"
  },
  {
    "text": "do all those functional things that you're used to from you know languages like hasal or python or JavaScript where",
    "start": "987639",
    "end": "994000"
  },
  {
    "text": "there's a little bit more of the functional language influence than there is in go I've also been playing with this a little bit and I kind of think",
    "start": "994000",
    "end": "1000959"
  },
  {
    "text": "one of the killer features here is you can still use the the return to continue",
    "start": "1000959",
    "end": "1006000"
  },
  {
    "text": "the break like you would normally in your code um and those method-based iterators you know it breaks all those",
    "start": "1006000",
    "end": "1012319"
  },
  {
    "text": "semantics you have to kind of jump through hoops and I think that's what I'm most excited for is you can still",
    "start": "1012319",
    "end": "1018240"
  },
  {
    "text": "just program like it's a regular range yeah actually so i' I've been looking at some of the libraries for working with",
    "start": "1018240",
    "end": "1024959"
  },
  {
    "text": "iterators and I do sort of Wonder so a lot of languages have you know map and filter and reduce and I do sort of",
    "start": "1024959",
    "end": "1032400"
  },
  {
    "text": "Wonder like do we even need to use those if we're just looping over the variable you know a map is just you know it's",
    "start": "1032400",
    "end": "1038480"
  },
  {
    "text": "just adding things to a slice is it really going to be shorter to use you know a functional map versus a for Loop",
    "start": "1038480",
    "end": "1044480"
  },
  {
    "text": "especially you know a for Loop is a little more powerful you can continue you can break it lets you sort of do",
    "start": "1044480",
    "end": "1050200"
  },
  {
    "text": "things you know whichever way you want to so yeah I think it's pretty exciting",
    "start": "1050200",
    "end": "1055240"
  },
  {
    "text": "you know it's something that you could do before and go but now you can compose it in a way that you couldn't before you",
    "start": "1055240",
    "end": "1060760"
  },
  {
    "text": "can build libraries that have a standard iterator type that they expect to receive and a standard iterator type",
    "start": "1060760",
    "end": "1067200"
  },
  {
    "text": "that they can put out and other people can consume so yeah I think it's going to be something that you know assuming",
    "start": "1067200",
    "end": "1073000"
  },
  {
    "text": "the experiment is accepted and added to go 123 or 124 I I think it's going to be",
    "start": "1073000",
    "end": "1080039"
  },
  {
    "text": "basically since generics it'll be the biggest change to the nature of using go",
    "start": "1080039",
    "end": "1086159"
  },
  {
    "text": "and I think it'll be a positive one it's interesting like the watching how the language is now evolving finally taking",
    "start": "1086159",
    "end": "1093320"
  },
  {
    "text": "more advantage of generics like a full like four versions",
    "start": "1093320",
    "end": "1098520"
  },
  {
    "text": "later with generics being out in 118 right this is like you know 122",
    "start": "1098520",
    "end": "1103960"
  },
  {
    "text": "obviously there was some stuff in 121 and uh even I think maybe a handful of things in 120 but uh yeah you're",
    "start": "1103960",
    "end": "1110720"
  },
  {
    "text": "starting to see sort of a um jic sort of find its way into you know more of the",
    "start": "1110720",
    "end": "1115760"
  },
  {
    "text": "standard library and in how the language Works which is kind of cool yeah I think we said on the last what's new and Go",
    "start": "1115760",
    "end": "1121320"
  },
  {
    "text": "episode that it was like a deliberately slow March that there was this idea of like let's roll out generics and we'll",
    "start": "1121320",
    "end": "1127120"
  },
  {
    "text": "roll out all the generic packages at the same time uh and then before that happened there was like a pause and they",
    "start": "1127120",
    "end": "1132360"
  },
  {
    "text": "said well once we add it to the ghost standard Library we're never going to be able to take it back we have to support",
    "start": "1132360",
    "end": "1138120"
  },
  {
    "text": "it essentially forever so let's instead let's just take a breath you know the",
    "start": "1138120",
    "end": "1143159"
  },
  {
    "text": "third party packages are pretty easy to add to go now with um you know go mod so let's go ahead and put this external and",
    "start": "1143159",
    "end": "1150200"
  },
  {
    "text": "then we can add it to the standard library after everybody's comfortable and we've had some real world experience",
    "start": "1150200",
    "end": "1156039"
  },
  {
    "text": "and so at this point the real world experience is in and so now we're starting to see more and more generics",
    "start": "1156039",
    "end": "1161159"
  },
  {
    "text": "added to the libraries and I think the iterator is actually going to be something that unlocks even more so for",
    "start": "1161159",
    "end": "1166720"
  },
  {
    "text": "example there's a containers list package in the standard library and it's not generic it just uses interfaces and",
    "start": "1166720",
    "end": "1174799"
  },
  {
    "text": "so looking at it it's pretty obvious that you would want to update it for generics and I think one reason that",
    "start": "1174799",
    "end": "1180720"
  },
  {
    "text": "hasn't happened is because there hasn't been an iterator pattern so far so if you have your list how do you actually",
    "start": "1180720",
    "end": "1186720"
  },
  {
    "text": "get through the items in the list um so now that the iterators look like they're going to land in the next version of go",
    "start": "1186720",
    "end": "1193960"
  },
  {
    "text": "then I'm pretty sure you'll see a change to the containers list either in the next version of go or the version after",
    "start": "1193960",
    "end": "1199720"
  },
  {
    "text": "that yeah which which makes sense so I'm looking at the release notes um",
    "start": "1199720",
    "end": "1206679"
  },
  {
    "text": "candidates here and uh to experiment with this obviously you'll have to build your program with a go experiment flag",
    "start": "1206679",
    "end": "1213720"
  },
  {
    "text": "environment variable um to turn on the Range Funk and then you'll be able to sort of uh play around with this but uh",
    "start": "1213720",
    "end": "1219600"
  },
  {
    "text": "yeah this is cool this is very nice so okay is there any other surprise looping",
    "start": "1219600",
    "end": "1227039"
  },
  {
    "text": "things coming out in this releasee that's a good question I think that's all of them I feel we can just repeat",
    "start": "1227039",
    "end": "1232880"
  },
  {
    "text": "this segment it's like Groundhog Day all right all right so no more looping all right so what else do we have on the",
    "start": "1232880",
    "end": "1239000"
  },
  {
    "text": "docket here so speaking of how the standard library is forever one of the new changes is version two of a package",
    "start": "1239000",
    "end": "1246039"
  },
  {
    "text": "in the standard Library so now there's math Rand slv2 so if you've used go mod um if",
    "start": "1246039",
    "end": "1254480"
  },
  {
    "text": "you've been vendoring or importing third party packages something you may have know noticed is um when somebody",
    "start": "1254480",
    "end": "1260480"
  },
  {
    "text": "releases version two or more of their package when you import it you're supposed to import it with a slv2 at the",
    "start": "1260480",
    "end": "1267600"
  },
  {
    "text": "end and I know this is sort of one of the controversial things about go versioning it looks a little bit ugly it",
    "start": "1267600",
    "end": "1273799"
  },
  {
    "text": "looks a little bit weird and I think especially if you're coming in and you're used to you know npm or used to",
    "start": "1273799",
    "end": "1281080"
  },
  {
    "text": "you know python or some other language you might look at this and say why do I have to put a slv2 at the end it's so",
    "start": "1281080",
    "end": "1288200"
  },
  {
    "text": "weird but it is the go convention and I think the reason for it is that way it lets",
    "start": "1288200",
    "end": "1294039"
  },
  {
    "text": "you have both versions be supported at the same time so this actually started",
    "start": "1294039",
    "end": "1299279"
  },
  {
    "text": "before there was an official go package manager people would put their their packages on go PKG doin is that right I",
    "start": "1299279",
    "end": "1307919"
  },
  {
    "text": "think I'm pretty sure that was the right yeah yeah the website anyway there was just this convention of you would put",
    "start": "1307919",
    "end": "1313960"
  },
  {
    "text": "your code onto this particular code sharing website and when you released a new version you would add V2 into the",
    "start": "1313960",
    "end": "1320600"
  },
  {
    "text": "name of the code and so what that let people do is it let them import the old code and the new code at the same time",
    "start": "1320600",
    "end": "1327400"
  },
  {
    "text": "so if you had um something and you were trying to upgrade to the new version you didn't have to do all of the upgrade all",
    "start": "1327400",
    "end": "1333960"
  },
  {
    "text": "at once you could do it incrementally and so math rv2 lets you do the same",
    "start": "1333960",
    "end": "1340200"
  },
  {
    "text": "thing for random numbers you don't have to go in and say all right I'm going to go",
    "start": "1340200",
    "end": "1346120"
  },
  {
    "text": "1.22 and all of my random code is is broken so I need to you know do a quick GP for anything where it says r a n d",
    "start": "1346120",
    "end": "1354279"
  },
  {
    "text": "and I'm going to find all of those places and I'm going to fix all of the broken code no you don't have to do that",
    "start": "1354279",
    "end": "1359799"
  },
  {
    "text": "so the standard Library U really the the whole V2 thing with math ran this is the",
    "start": "1359799",
    "end": "1366279"
  },
  {
    "text": "only place or rather this is the first yeah yeah probably the only place I can think of in the standard Library where",
    "start": "1366279",
    "end": "1372159"
  },
  {
    "text": "that convention has finally made it in right is there any other standard Library package with a V2 in there there",
    "start": "1372159",
    "end": "1377880"
  },
  {
    "text": "is not and so this is deliberately they wanted to try it out in one package and",
    "start": "1377880",
    "end": "1383200"
  },
  {
    "text": "see how it goes so the the Rand package you know it it's important but it's not",
    "start": "1383200",
    "end": "1388760"
  },
  {
    "text": "the most Central package it was something where they were sort of persistently kind of annoyed that they",
    "start": "1388760",
    "end": "1393799"
  },
  {
    "text": "had picked a bad random number generator but they couldn't change it because anybody who wanted a particular sequence",
    "start": "1393799",
    "end": "1400120"
  },
  {
    "text": "to come out has to get the same input so it was on the the list of the go team's",
    "start": "1400120",
    "end": "1405679"
  },
  {
    "text": "annoyances about go for a long time and in fact I think in one of the recent versions they made it so that you don't",
    "start": "1405679",
    "end": "1411640"
  },
  {
    "text": "have to seed it it's now automatically random but uh yeah this is the first",
    "start": "1411640",
    "end": "1416799"
  },
  {
    "text": "case of using a V2 and a standard Library package and so hopefully all the tools will be updated to deal with this",
    "start": "1416799",
    "end": "1423960"
  },
  {
    "text": "and this opens the door to doing V2s of other packages so like I was saying",
    "start": "1423960",
    "end": "1429200"
  },
  {
    "text": "before there will probably be a V2 of containers list at some point that is",
    "start": "1429200",
    "end": "1434799"
  },
  {
    "text": "generic but once you do one V2 then it invites more and you do want to think",
    "start": "1434799",
    "end": "1440440"
  },
  {
    "text": "about like oh what what else is in the standard Library where we didn't quite get the API right the first time and if",
    "start": "1440440",
    "end": "1447120"
  },
  {
    "text": "we could do a breaking change we could make it better nice so from what I'm hearing does that mean I still have to",
    "start": "1447120",
    "end": "1453880"
  },
  {
    "text": "do the weirdness you know of seating and this and that for getting my random numbers or does this V2 fix that yeah V2",
    "start": "1453880",
    "end": "1461360"
  },
  {
    "text": "of math Rand should be automatically seated but it also lets you choose which random number algorithm you're using",
    "start": "1461360",
    "end": "1468960"
  },
  {
    "text": "and so I don't really understand anything about it but there are a couple of different versions of the pseudo",
    "start": "1468960",
    "end": "1474880"
  },
  {
    "text": "random number generation algorithm uh and you can pick between them whichever one is either faster or more random or",
    "start": "1474880",
    "end": "1482919"
  },
  {
    "text": "even or uses less memory so now now you can pick for yourself which one you want",
    "start": "1482919",
    "end": "1488520"
  },
  {
    "text": "nice so that's definitely worth exploring So speaking of sort of oddities things that uh we all wish you",
    "start": "1488520",
    "end": "1495080"
  },
  {
    "text": "know the standard Library you know had gotten right the first time around is the whole serveu changes that are coming",
    "start": "1495080",
    "end": "1502240"
  },
  {
    "text": "right I can't tell you how many times I have to do my own path extraction and manipulation and and I'm like man I",
    "start": "1502240",
    "end": "1508720"
  },
  {
    "text": "don't want to have to bring in a thirdparty module to do this I wish the C library did it for me so what what's",
    "start": "1508720",
    "end": "1515039"
  },
  {
    "text": "new what's what's gonna relieve this this annoyance for us in the next release so yeah net HTTP has always had",
    "start": "1515039",
    "end": "1522279"
  },
  {
    "text": "a built-in server it's very basic it's sort of like Express um from node if",
    "start": "1522279",
    "end": "1527880"
  },
  {
    "text": "people are familiar with that or um Sinatra in Ruby or flask in Python you",
    "start": "1527880",
    "end": "1534000"
  },
  {
    "text": "know it's just a very simple routing based um server but before one thing",
    "start": "1534000",
    "end": "1539159"
  },
  {
    "text": "that you couldn't do with it is you couldn't tell it if I get a get request send it to this Handler and if I get a",
    "start": "1539159",
    "end": "1544600"
  },
  {
    "text": "post request send it to that Handler and another thing that it didn't do out of the box is if you want to say all right",
    "start": "1544600",
    "end": "1551000"
  },
  {
    "text": "in this path segment just take whatever you know let's say I have SL API slash",
    "start": "1551000",
    "end": "1556240"
  },
  {
    "text": "users slash1 so I want to extract that third path segment give me the number",
    "start": "1556240",
    "end": "1561600"
  },
  {
    "text": "one and let me use that and then I'll process that and figure out you know which user to serve up there wasn't a",
    "start": "1561600",
    "end": "1567360"
  },
  {
    "text": "built-in way to do that and so between those two limitations a lot of people reached for third-party routers so one",
    "start": "1567360",
    "end": "1573679"
  },
  {
    "text": "that was popular very early on was the gorilla mck mu MX that one you know",
    "start": "1573679",
    "end": "1579520"
  },
  {
    "text": "gorilla it became super popular and then the maintainers couldn't keep up with it and so they retired and then I think",
    "start": "1579520",
    "end": "1586039"
  },
  {
    "text": "somebody actually did pick it up again but I think the go team looked at that and said look gorilla is super popular",
    "start": "1586039",
    "end": "1592240"
  },
  {
    "text": "because we're not providing these kind of basic utilities that people need and it's nice that the Guerilla team",
    "start": "1592240",
    "end": "1597480"
  },
  {
    "text": "reformed but really we should be just taking this on board if everybody reaches for a thirdparty router so yeah",
    "start": "1597480",
    "end": "1604559"
  },
  {
    "text": "so this basically lets you do what it lets you do is to register a route and register it based on the method so you",
    "start": "1604559",
    "end": "1611120"
  },
  {
    "text": "know get post put patch delete and also register to capture the the the parts of",
    "start": "1611120",
    "end": "1617200"
  },
  {
    "text": "the address it also fixes a longtime Quirk with um the go server router so",
    "start": "1617200",
    "end": "1623399"
  },
  {
    "text": "something that would come up is let's say you're making a website and you want to serve something on the homepage",
    "start": "1623399",
    "end": "1628760"
  },
  {
    "text": "that's a pretty normal thing to do if it's not just like an API server but it's a traditional HTML server well a",
    "start": "1628760",
    "end": "1635679"
  },
  {
    "text": "thing about the go server package was once you registered a route on the homepage it would become the default",
    "start": "1635679",
    "end": "1641840"
  },
  {
    "text": "route for any sub Pages as well because it routes to whatever the longest matching path is so if you go to",
    "start": "1641840",
    "end": "1648640"
  },
  {
    "text": "example.com 44 it'll say okay nothing matches for 404 but I do have a match on",
    "start": "1648640",
    "end": "1654080"
  },
  {
    "text": "slash and so I'll send you to the homepage and so when you built your homepage the the Handler for that you",
    "start": "1654080",
    "end": "1660600"
  },
  {
    "text": "had to say am I actually on the homepage or did I just like get a 404 and so now",
    "start": "1660600",
    "end": "1665840"
  },
  {
    "text": "there's a nice little way of distinguishing between those two cases and saying okay I'm going to put the 404",
    "start": "1665840",
    "end": "1671399"
  },
  {
    "text": "Handler at slash and I'm going to put the homepage at you know slash with a dollar sign on the end to signify that",
    "start": "1671399",
    "end": "1677919"
  },
  {
    "text": "it's the end so yeah hopefully this should be another one of those things where there's I think in terms of",
    "start": "1677919",
    "end": "1683200"
  },
  {
    "text": "Education this is going to be great because you don't have to explain okay now go to gorilla.com now go to chir",
    "start": "1683200",
    "end": "1690320"
  },
  {
    "text": "router.com now go to you know whatever Alex Edwards has a really great book about writing API servers in go and for",
    "start": "1690320",
    "end": "1698360"
  },
  {
    "text": "that you know he ended up writing his own I guess in the version of the book I read he recommended the Julian Schmidt",
    "start": "1698360",
    "end": "1705480"
  },
  {
    "text": "router and then he wrote his own router and I think maybe in the new version he uses his own router but whatever it's",
    "start": "1705480",
    "end": "1710760"
  },
  {
    "text": "like if you're writing a book about how to do server stuff and go you can just skip that part now and say okay here's",
    "start": "1710760",
    "end": "1717039"
  },
  {
    "text": "how you do it with the standard Library without too much trouble so again from an education point of view I think it's",
    "start": "1717039",
    "end": "1723080"
  },
  {
    "text": "good I think if you're in more of a corporate environment maybe you already are using whatever you're using and",
    "start": "1723080",
    "end": "1728640"
  },
  {
    "text": "there's no reason to rip it out and to go to the standard library but yeah I think for people who are starting new",
    "start": "1728640",
    "end": "1734640"
  },
  {
    "text": "projects or for people who are writing books this is going to be something that it's just one less thing off your plate you don't have to make a decision you",
    "start": "1734640",
    "end": "1740720"
  },
  {
    "text": "don't have to think what is the best router you don't have to Google or ask chat GPT yeah you can just start using",
    "start": "1740720",
    "end": "1747880"
  },
  {
    "text": "the standard library and you'll be fine right this is music to my ears because a",
    "start": "1747880",
    "end": "1753080"
  },
  {
    "text": "lot of times not times out of 10 I don't need the super fancy you know with all kinds of extra bells and whistles and",
    "start": "1753080",
    "end": "1759760"
  },
  {
    "text": "sometimes I don't need you know session management this that and the other I mean you know I just need a simple way",
    "start": "1759760",
    "end": "1766200"
  },
  {
    "text": "of routing you know to particular Handler or something like that so this is uh this is great news indeed I didn't",
    "start": "1766200",
    "end": "1772000"
  },
  {
    "text": "know the the gorilla team was was getting back together they getting a ban back together is that was is what is",
    "start": "1772000",
    "end": "1777600"
  },
  {
    "text": "that what I heard I mean the projects are all unarchived now which is at least a step in the right direction I suppose",
    "start": "1777600",
    "end": "1783120"
  },
  {
    "text": "well that's good that makes me feel a little better about some projects I have that still use gura [Laughter]",
    "start": "1783120",
    "end": "1788480"
  },
  {
    "text": "stuff all right so we of course we do have some contributions directly from",
    "start": "1788480",
    "end": "1794799"
  },
  {
    "text": "you as well Carolina let's talk about those so yeah I worked on a couple of different things I think I teased this",
    "start": "1794799",
    "end": "1799880"
  },
  {
    "text": "in the last episode that so for go 122 I had three things that I contributed so",
    "start": "1799880",
    "end": "1806720"
  },
  {
    "text": "the first one is something that I didn't propose it I just implemented it because I could see that it was like a a three",
    "start": "1806720",
    "end": "1813039"
  },
  {
    "text": "line function so it's always fun I say this every time I'm on if you're somebody who wants to contribute to open",
    "start": "1813039",
    "end": "1819000"
  },
  {
    "text": "source and you think you know what's a good go project that I could contribute to the actual go project is is a good",
    "start": "1819000",
    "end": "1825200"
  },
  {
    "text": "one that you can contribute to because there are a lot of these things where it's like okay somebody just has to write a three line function and you can",
    "start": "1825200",
    "end": "1831760"
  },
  {
    "text": "be that somebody so this is reflect. Type 4 so the reflect package is a",
    "start": "1831760",
    "end": "1837200"
  },
  {
    "text": "package in go that lets you look at your variables and figure out what type they are and um set things and get things so",
    "start": "1837200",
    "end": "1845440"
  },
  {
    "text": "this is how for example when you use the Json encoder um you pass in your struct",
    "start": "1845440",
    "end": "1850720"
  },
  {
    "text": "and your struct could be anything the go team doesn't know about your struct but using reflect they'll go in and they'll",
    "start": "1850720",
    "end": "1857240"
  },
  {
    "text": "see okay struct has an integer field and it has a string field and it'll put all",
    "start": "1857240",
    "end": "1862639"
  },
  {
    "text": "of the values where they're supposed to be based on that so reflect. Type 4 is just a very quick and easy way of",
    "start": "1862639",
    "end": "1869679"
  },
  {
    "text": "building um a reflect type and it uses generics to do it so you could do this",
    "start": "1869679",
    "end": "1875039"
  },
  {
    "text": "before using just the basic interface method but it was a little bit confusing because the reflect package isn't",
    "start": "1875039",
    "end": "1881720"
  },
  {
    "text": "special it's just a normal go package it's a little bit special in that",
    "start": "1881720",
    "end": "1886880"
  },
  {
    "text": "because it's from the go go team it knows the how the go internals work but other than that you could just write",
    "start": "1886880",
    "end": "1892519"
  },
  {
    "text": "your own version of reflect using unsafe and going in and examining values that",
    "start": "1892519",
    "end": "1898320"
  },
  {
    "text": "way like you'd be subject to if the go compiler team decides to change things",
    "start": "1898320",
    "end": "1903360"
  },
  {
    "text": "then your package would be broken but other than that you could write it yourself and so when you are passing",
    "start": "1903360",
    "end": "1909360"
  },
  {
    "text": "something to reflect. type of so not reflect. type 4 but reflect. type of",
    "start": "1909360",
    "end": "1915120"
  },
  {
    "text": "since it's just a regular interface you could sometimes get the values they would be going past as an interface and",
    "start": "1915120",
    "end": "1921320"
  },
  {
    "text": "if the thing that you were trying to pass was an interface you could lose the interface type and just get the concrete",
    "start": "1921320",
    "end": "1928120"
  },
  {
    "text": "type so it's a little hard to explain but this just makes it so much easier like you don't have to think about that",
    "start": "1928120",
    "end": "1934200"
  },
  {
    "text": "it's similar to the for Loop thing where it's like all right before you had to have these caveats and to understand how",
    "start": "1934200",
    "end": "1940399"
  },
  {
    "text": "interfaces are passed and exactly what to do if you wanted to get a particular",
    "start": "1940399",
    "end": "1945480"
  },
  {
    "text": "type and now you just do reflect. type for and with generics the right thing",
    "start": "1945480",
    "end": "1951080"
  },
  {
    "text": "will come out this would have saved me hours earlier this year or I guess late last year um doing some squel stuff so",
    "start": "1951080",
    "end": "1959399"
  },
  {
    "text": "definitely a good addition yeah it was confusing to me too so when I was trying to write something where I wanted to see",
    "start": "1959399",
    "end": "1965559"
  },
  {
    "text": "if something was the zero value or not I had the same issue of you know oh how do I actually get the type passed in if",
    "start": "1965559",
    "end": "1972960"
  },
  {
    "text": "it's an error type because I wanted to know if the error is nil or not and I ended up I was like I'm getting a nil",
    "start": "1972960",
    "end": "1979440"
  },
  {
    "text": "nil but I don't want a nil nil I want an error nil anyway it was a little bit confusing and so this just clears all",
    "start": "1979440",
    "end": "1986080"
  },
  {
    "text": "that up and you don't have to worry about it so that was like a like I said that was like a three line function it was proposed by Josh I think bleacher",
    "start": "1986080",
    "end": "1993240"
  },
  {
    "text": "Snider is how you say his last name he has his own podcast um and if you like go time you might like his new podcast",
    "start": "1993240",
    "end": "1999519"
  },
  {
    "text": "who whoa whoa whoa you can listen to more than one podcast Johnny are you he only has two episodes out so they'll",
    "start": "1999519",
    "end": "2006240"
  },
  {
    "text": "come back to us fine fine so that was it was something where it was like it was a two-line code and then",
    "start": "2006240",
    "end": "2012279"
  },
  {
    "text": "the testing is of course like 10 times longer just to make sure that it's covering all the different scenarios so",
    "start": "2012279",
    "end": "2018320"
  },
  {
    "text": "another thing that I worked on for go 122 this one that I did propose is slices. concat so this concatenates",
    "start": "2018320",
    "end": "2025720"
  },
  {
    "text": "slices and concatenate is just a fancy word for puts together slices. put",
    "start": "2025720",
    "end": "2030960"
  },
  {
    "text": "together I like I've written this a dozen times in programs yeah if you have a bunch of slices and you want to join",
    "start": "2030960",
    "end": "2036080"
  },
  {
    "text": "them it puts them together so actually I wrote a blog post about this and I started and I was like how am I going to",
    "start": "2036080",
    "end": "2042320"
  },
  {
    "text": "write about this because there's you know it's like a very basic function uh and then I started writing it and I ended up getting to like a thousand",
    "start": "2042320",
    "end": "2048679"
  },
  {
    "text": "words and it's like how am I oh yeah because there's actually a couple of like different little tricky bits to this so one of the tricky bits about",
    "start": "2048679",
    "end": "2055079"
  },
  {
    "text": "slices Con cat well let's see which which one do I want to do first uh one of the tricky bits is why does it not",
    "start": "2055079",
    "end": "2062118"
  },
  {
    "text": "have a destination argument so if you're looking at some of the other items in",
    "start": "2062119",
    "end": "2068118"
  },
  {
    "text": "the slices package the way that they work is the first argument will be an existing slice and then the other",
    "start": "2068119",
    "end": "2074000"
  },
  {
    "text": "arguments will just tack stuff onto that slice and so if you're thinking about slices concat you might think well sure",
    "start": "2074000",
    "end": "2080240"
  },
  {
    "text": "the first argument could be a destination slice and then we'll tack all the other slices onto that",
    "start": "2080240",
    "end": "2085320"
  },
  {
    "text": "destination and that's how I proposed it at first but when we went to implement it we realized that that actually",
    "start": "2085320",
    "end": "2091280"
  },
  {
    "text": "creates a problem because if the slice that you're trying to append to is the same as one of the slices that you're",
    "start": "2091280",
    "end": "2098640"
  },
  {
    "text": "getting your values from you can end up clobbering your own slice and things will go out of order and it'll get",
    "start": "2098640",
    "end": "2104640"
  },
  {
    "text": "really confusing and then the optimizer can't optimize it and so that turns out to be a problem and something you",
    "start": "2104640",
    "end": "2111520"
  },
  {
    "text": "wouldn't necessarily think about the other tricky bit to this is when you read the code for it it has a seemingly",
    "start": "2111520",
    "end": "2117160"
  },
  {
    "text": "redundant size check where it first goes through all the slices and it sees how long they are to so it can build one Big",
    "start": "2117160",
    "end": "2124119"
  },
  {
    "text": "Slice to paste them all into to copy them all into but when it's doing that it says if the size is less than zero",
    "start": "2124119",
    "end": "2129760"
  },
  {
    "text": "panic and you might say how could the size be less than zero but the answer is if you have more than the number of",
    "start": "2129760",
    "end": "2136520"
  },
  {
    "text": "integers in your slice so if you're on a 32bit system this could happen if you're on a 64-bit system this probably will",
    "start": "2136520",
    "end": "2144200"
  },
  {
    "text": "not happen although I wouldn't put it past like Google and some of the deep learning people but uh on 32-bit systems",
    "start": "2144200",
    "end": "2150680"
  },
  {
    "text": "this would happen a lot because that's only four billion items so 4 gigabytes is enough to overflow but what it does",
    "start": "2150680",
    "end": "2157319"
  },
  {
    "text": "is it looks and sees if the number has gone over to negative that means that there are so many items that it's",
    "start": "2157319",
    "end": "2163960"
  },
  {
    "text": "overflowed and so there's just a quick check in there and I think that is something that like Johnny you were saying you've written this a million",
    "start": "2163960",
    "end": "2170119"
  },
  {
    "text": "times but I bet when you wrote it you didn't check if there were more than four billion slices being appended sure",
    "start": "2170119",
    "end": "2176440"
  },
  {
    "text": "probably not yeah so I mean that's uh that's one of the nice things about using the standard Library you know in",
    "start": "2176440",
    "end": "2182319"
  },
  {
    "text": "this particular case like I thought of it myself and I added it in but anytime you're writing anything there's always",
    "start": "2182319",
    "end": "2188280"
  },
  {
    "text": "like that little corner case that you might not have thought of and so it's nice to use the standard library because",
    "start": "2188280",
    "end": "2193800"
  },
  {
    "text": "even if you don't think of it somebody will hit that bug for you and then it will get merged into the next version of",
    "start": "2193800",
    "end": "2198960"
  },
  {
    "text": "go it feels like we're transitioning a lot away from like that slices trick page yeah you know that Wiki I remember",
    "start": "2198960",
    "end": "2206000"
  },
  {
    "text": "that page I had it bookmarked same and I think that can only be a good thing for go yeah the the old slices trick Wiki",
    "start": "2206000",
    "end": "2214800"
  },
  {
    "text": "page it was it was something that you would have to return to every once in a while where you're like I'm filtering in place what's the best way to do that is",
    "start": "2214800",
    "end": "2222200"
  },
  {
    "text": "there something that's shorter and now you can just use slices. delete Funk and it's fine right I had to oh the most",
    "start": "2222200",
    "end": "2228640"
  },
  {
    "text": "common one's like I need to remove the third item from this",
    "start": "2228640",
    "end": "2234400"
  },
  {
    "text": "list the I could never remember how where do I put the colon where do I put like where do like what am I doing with",
    "start": "2234400",
    "end": "2241200"
  },
  {
    "text": "my life it was I mean it was it was ridiculous yeah so then the third thing",
    "start": "2241200",
    "end": "2246800"
  },
  {
    "text": "that I added to go 1.22 is cmp.org and",
    "start": "2246800",
    "end": "2251839"
  },
  {
    "text": "this one it's one where I think it's on the surface I think most people are going to read through the release notes",
    "start": "2251839",
    "end": "2257880"
  },
  {
    "text": "and not bother to read about cmp.org but if you know that it's there it's actually the one that you're going to use the most because I use this all the",
    "start": "2257880",
    "end": "2265920"
  },
  {
    "text": "time so the backstory of this is you know I'm always in the go issues and I'm",
    "start": "2265920",
    "end": "2271680"
  },
  {
    "text": "always proposing things and at one point I proposed what if we have the question mark question mark operator and what it",
    "start": "2271680",
    "end": "2277599"
  },
  {
    "text": "does is it will return the first nonzero value so let's say you have you know two",
    "start": "2277599",
    "end": "2282960"
  },
  {
    "text": "strings and you don't the first string is maybe from a user or it's from the environment and you don't know if it's",
    "start": "2282960",
    "end": "2288040"
  },
  {
    "text": "empty or not and then the second string could be a default value that you'd like to fall back to and so I had that",
    "start": "2288040",
    "end": "2294800"
  },
  {
    "text": "proposal and people were kind of lukewarm on it they're like do we really need a whole operator for this and I",
    "start": "2294800",
    "end": "2300079"
  },
  {
    "text": "think it was Ian Lance Taylor who said you can just write this as a generic function once we add generics because",
    "start": "2300079",
    "end": "2305240"
  },
  {
    "text": "this was several years ago before generics existed and I was like actually yeah if we had generics I could just",
    "start": "2305240",
    "end": "2310480"
  },
  {
    "text": "write this as a generic function so what I ended up doing was writing it as like a string Helper and so I just wrote",
    "start": "2310480",
    "end": "2316520"
  },
  {
    "text": "strings. first or string x.fir or string utility. first whatever I called my",
    "start": "2316520",
    "end": "2321880"
  },
  {
    "text": "string package and I found that I used it like all the time basically anytime I have strings from a user I'll say okay",
    "start": "2321880",
    "end": "2329680"
  },
  {
    "text": "here's the value from the user and if it's not that value then try this one and sometimes you'll even have three and",
    "start": "2329680",
    "end": "2335079"
  },
  {
    "text": "you'll say okay it might have been an environment of variable it might have been something that they passed on the command line and if it's not either of",
    "start": "2335079",
    "end": "2341160"
  },
  {
    "text": "those then here's the default value and so you end up using it all over the place and so cmp.org it's just that idea",
    "start": "2341160",
    "end": "2348319"
  },
  {
    "text": "of it it compares the values passed in and it returns whatever the first one that's not the zero value so if you have",
    "start": "2348319",
    "end": "2354880"
  },
  {
    "text": "strings it will return the first string that's not an empty string if you have integers it will return the first one",
    "start": "2354880",
    "end": "2360240"
  },
  {
    "text": "that's not zero it has to be a comparable type so unfortunately this doesn't work for like um anything that's",
    "start": "2360240",
    "end": "2367599"
  },
  {
    "text": "not comparable and I kind of I have another proposal to try to loosen this restriction but it hasn't it hasn't gone",
    "start": "2367599",
    "end": "2374160"
  },
  {
    "text": "anywhere yet so for now it just says that but it is it is pretty handy and in fact one of the things that it's handy",
    "start": "2374160",
    "end": "2380200"
  },
  {
    "text": "for is um if you're doing a comparison Funk and let's say you're doing one of those three-way comparisons where you",
    "start": "2380200",
    "end": "2386480"
  },
  {
    "text": "return minus one if the value is smaller and you return positive one if the value is bigger and you return zero if the",
    "start": "2386480",
    "end": "2392800"
  },
  {
    "text": "values are equal there's cm. compare already which will do that",
    "start": "2392800",
    "end": "2398400"
  },
  {
    "text": "but if you want to compare a struct that has several different fields now you can",
    "start": "2398400",
    "end": "2403440"
  },
  {
    "text": "compare those fields together by stringing together the ores so if you do cm. or and then do cm. compare the first",
    "start": "2403440",
    "end": "2411760"
  },
  {
    "text": "field the second field the Third Field it doesn't shortcut unfortunately so you don't want to do it for um really big",
    "start": "2411760",
    "end": "2418520"
  },
  {
    "text": "comparisons but if you're just saying okay compare these two structs and look at the first field look at the let's say",
    "start": "2418520",
    "end": "2425040"
  },
  {
    "text": "you have something and it's like the price and the distance and whatever else so I want to sort it by price and then",
    "start": "2425040",
    "end": "2431800"
  },
  {
    "text": "if they're the same price then sort it by distance and then if they're the same distance then sort it by first name of",
    "start": "2431800",
    "end": "2437079"
  },
  {
    "text": "the person who ordered it now you can do all of that just in a nice little tidy package using cmp.org so like I said",
    "start": "2437079",
    "end": "2443839"
  },
  {
    "text": "this is um a utility that I've been using like all over the place in my code basically anytime I have strings I end",
    "start": "2443839",
    "end": "2449920"
  },
  {
    "text": "up doing you know string utility. first so yeah I think this is one people are going to sleep on but if you know it's",
    "start": "2449920",
    "end": "2456599"
  },
  {
    "text": "there it's the hidden Gem of 1.22 yeah I I I can definitely see",
    "start": "2456599",
    "end": "2462000"
  },
  {
    "text": "myself using this like uh you know I think you gave some examples there like maybe checking for the environment variable and if it's not set then have a",
    "start": "2462000",
    "end": "2469520"
  },
  {
    "text": "fall back I mean I can see myself using this all over all over the place really cool yeah as a i a cols user big thumbs",
    "start": "2469520",
    "end": "2476760"
  },
  {
    "text": "up on this one nice nice you're showing your SQL",
    "start": "2476760",
    "end": "2483040"
  },
  {
    "text": "Roots so a lot of folks may not realize but like the slices stuff we were just talking about that's a package you know",
    "start": "2483440",
    "end": "2489359"
  },
  {
    "text": "the the CMP package we're just talking about I'm not sure you how do we pronounce that and it go oh it's go so",
    "start": "2489359",
    "end": "2494560"
  },
  {
    "text": "probably yeah we have to have a crazy pronunciation like the fmt package is not fmt it's fumed so I guess yeah CMP",
    "start": "2494560",
    "end": "2501839"
  },
  {
    "text": "would have to be exactly I'm not gonna say that comp you guys said it I didn't say",
    "start": "2501839",
    "end": "2508560"
  },
  {
    "text": "it oh boy right yeah yeah yeah it's say CMP yeah like I I usually like say CMP",
    "start": "2509800",
    "end": "2517280"
  },
  {
    "text": "right but I figured hey you know we go for like to come up with our own pronunciations with things well I think we have a we have a few more minutes we",
    "start": "2517280",
    "end": "2523560"
  },
  {
    "text": "can we can dive into some stuff here but a lot of a lot of this uh some of the new things obviously we don't have",
    "start": "2523560",
    "end": "2529160"
  },
  {
    "text": "enough time to cover everything that's new there's there's a ton of things I'm I'm looking at the release notes here that we're not going to have time to",
    "start": "2529160",
    "end": "2535040"
  },
  {
    "text": "cover maybe we'll have a second part of this episode because some of this stuff is actually quite interesting but as far",
    "start": "2535040",
    "end": "2540880"
  },
  {
    "text": "as the standard Library some of the things that folks may find useful is that there's some some additional stuff",
    "start": "2540880",
    "end": "2546079"
  },
  {
    "text": "on the net HTP p AG in terms of serving files and transport and whatnot like do",
    "start": "2546079",
    "end": "2551920"
  },
  {
    "text": "we have do we have a few moments to touch on those what what's the gist of of some of those on you yeah um so uh",
    "start": "2551920",
    "end": "2558040"
  },
  {
    "text": "what version was this at I think it was like 1.16 that the embed package was added do",
    "start": "2558040",
    "end": "2564000"
  },
  {
    "text": "you remember yeah that sounds about I was on the show so I should remember but they added the they added",
    "start": "2564000",
    "end": "2569599"
  },
  {
    "text": "the idea of an io/ FS um so a file system now the io package has always",
    "start": "2569599",
    "end": "2575400"
  },
  {
    "text": "been around and an IO read and an IO writer are essentially virtual files like a IO reader is a virtual file that",
    "start": "2575400",
    "end": "2583200"
  },
  {
    "text": "you can read from and an IO writer is a virtual file that you can write to so when they added iofs it now made it so",
    "start": "2583200",
    "end": "2589599"
  },
  {
    "text": "that you could have a directory of files uh and so this has been really handy uh one of the things you can do is you can",
    "start": "2589599",
    "end": "2594800"
  },
  {
    "text": "embed a whole virtual file system into your go program so you could have like a bunch of templates or a bunch of assets",
    "start": "2594800",
    "end": "2602040"
  },
  {
    "text": "and they could all get packaged up into your go program and you could serve them up but until now now to use them in net",
    "start": "2602040",
    "end": "2608599"
  },
  {
    "text": "HTTP it was a little bit awkward because you had to adapt them and there were a",
    "start": "2608599",
    "end": "2613960"
  },
  {
    "text": "few little gotes you had to do when you were adapting it to get the modification time right and stuff and now it's just",
    "start": "2613960",
    "end": "2620599"
  },
  {
    "text": "built right in so if you say are are building a a web server and you want to",
    "start": "2620599",
    "end": "2626480"
  },
  {
    "text": "serve let's say some static assets with your server you could just have those embedded with embed you could pass them",
    "start": "2626480",
    "end": "2633200"
  },
  {
    "text": "to Ben Johnson former guest of the show you could pass it to his um hashing file",
    "start": "2633200",
    "end": "2638359"
  },
  {
    "text": "system and then you could pass that into the uh HTTP do serve file fs and the",
    "start": "2638359",
    "end": "2644040"
  },
  {
    "text": "whole thing will just serve out automatically and you don't have to do any work to get it all wired up so I",
    "start": "2644040",
    "end": "2650599"
  },
  {
    "text": "think that'll make things just easier to use uh faster yeah and you don't have to",
    "start": "2650599",
    "end": "2655640"
  },
  {
    "text": "like figure out some of like the corner cases of what do I do if this um with the mod times and all of this and that",
    "start": "2655640",
    "end": "2663160"
  },
  {
    "text": "those are some pretty NE changes I'll have to take a peek at those um it's often I'm serving files from disk in my",
    "start": "2663160",
    "end": "2670920"
  },
  {
    "text": "go programs but I have to wonder do things like Yugo or or projects like it",
    "start": "2670920",
    "end": "2677599"
  },
  {
    "text": "rely on these capabilities um fairly heavily or like how what kind of do we have any popular projects that use uh",
    "start": "2677599",
    "end": "2683839"
  },
  {
    "text": "these P system serving from an hgp library that much well Hugo specifically it predates the iofs package so I don't",
    "start": "2683839",
    "end": "2692520"
  },
  {
    "text": "know if it's been Rewritten but traditionally it used um aaroh aaroh which was um Steve francia's earlier",
    "start": "2692520",
    "end": "2699760"
  },
  {
    "text": "version of a virtual file system and so I haven't looked at the Hugo internals",
    "start": "2699760",
    "end": "2705240"
  },
  {
    "text": "to know if they ever rewrote it to use the fs package instead of a pharaoh but I kind of suspect that it would it would",
    "start": "2705240",
    "end": "2711119"
  },
  {
    "text": "be like such a amount of work that they still use a pharaoh still use it yeah yeah I remember using a pharaoh quite a",
    "start": "2711119",
    "end": "2717720"
  },
  {
    "text": "bit when I was sort of basically especially in my tests when I went on sort of a simulator file system without actually having to you know like write a",
    "start": "2717720",
    "end": "2724520"
  },
  {
    "text": "ton of bits to to to dis um it kind of came in handy yeah it's a remember that package we used to serve terms of",
    "start": "2724520",
    "end": "2731160"
  },
  {
    "text": "services like just because they are static and you don't want to have to deploy them to the server like just a",
    "start": "2731160",
    "end": "2737520"
  },
  {
    "text": "fun little use case yeah I think probably most people who are using go are doing API servers instead of like",
    "start": "2737520",
    "end": "2744119"
  },
  {
    "text": "traditional HTML servers but I also think the HTML server thing is having a little bit of a Renaissance with um HTM",
    "start": "2744119",
    "end": "2751960"
  },
  {
    "text": "X which has been on the uh JS party podcast am I allowed to mention that one John or is that that's also a rival to",
    "start": "2751960",
    "end": "2759200"
  },
  {
    "text": "us they're on the same network it's part of it's part of the same part it's part of the same network yeah change log but",
    "start": "2759200",
    "end": "2765040"
  },
  {
    "text": "uh yeah we're still better obviously obviously you know that that goes without saying obviously so HTM X is sort of sibling",
    "start": "2765040",
    "end": "2772559"
  },
  {
    "text": "rivalry bringing the um the HTML on the back end back into popularity but I I",
    "start": "2772559",
    "end": "2778839"
  },
  {
    "text": "kind of suspect that the majority of people who are doing go web work are just doing API servers but you know I",
    "start": "2778839",
    "end": "2785359"
  },
  {
    "text": "think this this is going to be something that will make it more popular to do HTML servers with go because it's just",
    "start": "2785359",
    "end": "2790680"
  },
  {
    "text": "one more thing that's built in we already have built-in templating uh we now have the better servm so you don't have to use a third party router and",
    "start": "2790680",
    "end": "2797440"
  },
  {
    "text": "this makes it really easy to serve your static assets just right out of the box so I I think it is something that over",
    "start": "2797440",
    "end": "2803520"
  },
  {
    "text": "time we'll see more popularity nice nice nice I think this is a good PL I think",
    "start": "2803520",
    "end": "2809119"
  },
  {
    "text": "we've covered the the things that are going to probably affect most people most of the time one more cool thing",
    "start": "2809119",
    "end": "2815040"
  },
  {
    "text": "what do you think one more one more one more all right hit me this is a tiny change but the new there's the new",
    "start": "2815040",
    "end": "2820280"
  },
  {
    "text": "generic SQL null type and the number of times I've implemented that for different types I I love this right",
    "start": "2820280",
    "end": "2828640"
  },
  {
    "text": "right yeah tell us about it yeah so it's just SQL already had the other null types I don't know like strings and ins",
    "start": "2828640",
    "end": "2835480"
  },
  {
    "text": "and times null time null string just a generic type that can wrap anything and",
    "start": "2835480",
    "end": "2841040"
  },
  {
    "text": "allow SQL to parsit it nice that is pretty cool yeah obviously before you",
    "start": "2841040",
    "end": "2846480"
  },
  {
    "text": "use the vales you have that the ability to ask hey is this valid right before you start using it which is a nice",
    "start": "2846480",
    "end": "2851520"
  },
  {
    "text": "little AP yeah and I don't get a cool an err that says and we can't pars null as",
    "start": "2851520",
    "end": "2856960"
  },
  {
    "text": "a time right so oh yeah null time that comes up a lot actually this is a good segue into my unpopular opinion oo nice",
    "start": "2856960",
    "end": "2864599"
  },
  {
    "text": "nice nice nice nice so let let me let me play the music and then we'll transition",
    "start": "2864599",
    "end": "2870520"
  },
  {
    "text": "right over to [Music] unpops unpop",
    "start": "2870520",
    "end": "2878839"
  },
  {
    "text": "I actually think should probably [Music]",
    "start": "2879119",
    "end": "2883639"
  },
  {
    "text": "leave [Music]",
    "start": "2884160",
    "end": "2890319"
  },
  {
    "text": "opinion all right my unpopular opinion is that",
    "start": "2890319",
    "end": "2895920"
  },
  {
    "text": "99% of the time you should not when you're making a database use a nullable",
    "start": "2895920",
    "end": "2903280"
  },
  {
    "text": "string I can see that what's your reasoning maybe like to give listeners the context first um so the traditional",
    "start": "2903280",
    "end": "2910079"
  },
  {
    "text": "use for a nullable string is they would say Okay imagine you're modeling people's names and people have first",
    "start": "2910079",
    "end": "2916440"
  },
  {
    "text": "names and they have middle names and they have last names but you're not sure does this person have a middle name or",
    "start": "2916440",
    "end": "2921520"
  },
  {
    "text": "not have a middle name and so you can use null and null will represent now",
    "start": "2921520",
    "end": "2927079"
  },
  {
    "text": "here's the part that's hard does null represent that they don't have a middle name or that you don't know what it is I",
    "start": "2927079",
    "end": "2933400"
  },
  {
    "text": "don't know so I have found that for Strings specifically null is not a",
    "start": "2933400",
    "end": "2942240"
  },
  {
    "text": "good differentiator so most of the time with strings if you really want to know",
    "start": "2942240",
    "end": "2948400"
  },
  {
    "text": "is this value missing or is it it should be empty then you need to have a",
    "start": "2948400",
    "end": "2954079"
  },
  {
    "text": "separate column that's a bull and like in terms of the data entry like the user interface it absolutely has to be this",
    "start": "2954079",
    "end": "2960640"
  },
  {
    "text": "but I think it should also be this on the back end so let's say you know you have your your people who are entering",
    "start": "2960640",
    "end": "2967200"
  },
  {
    "text": "the data in and somebody doesn't have a middle name if you want to know that they don't have a middle name there",
    "start": "2967200",
    "end": "2972559"
  },
  {
    "text": "should be a checkbox and it should check no middle name and they they hit the check boox and now that is saved in the",
    "start": "2972559",
    "end": "2978599"
  },
  {
    "text": "database as middle name you know missing or middle name blank with one of one of",
    "start": "2978599",
    "end": "2984079"
  },
  {
    "text": "the two and that will have a checkbox and it will be understood by the operator exactly what's meant versus if",
    "start": "2984079",
    "end": "2989680"
  },
  {
    "text": "you have a null you're always like I think that when it's null that means",
    "start": "2989680",
    "end": "2995599"
  },
  {
    "text": "that their middle name isn't known and if it's blank that means that there's",
    "start": "2995599",
    "end": "3001000"
  },
  {
    "text": "someone who doesn't have a middle name but are you sure right I feel I feel",
    "start": "3001000",
    "end": "3006440"
  },
  {
    "text": "like I've experienced I've been in the sort of the end user end of this like",
    "start": "3006440",
    "end": "3011760"
  },
  {
    "text": "audity like and filling out random forums online and stuff like some",
    "start": "3011760",
    "end": "3016920"
  },
  {
    "text": "systems uh will will assume right that I have three there's three parts to my",
    "start": "3016920",
    "end": "3022400"
  },
  {
    "text": "name like I have a middle like I happen to not have a middle name right I was going to ask",
    "start": "3022400",
    "end": "3027520"
  },
  {
    "text": "forced to like right like I don't have a middle name so at times I've been was",
    "start": "3027520",
    "end": "3033040"
  },
  {
    "text": "unable to submit a form because you know the form was telling me that oh middle name required I'm like dude I don't have",
    "start": "3033040",
    "end": "3039760"
  },
  {
    "text": "a middle name so what do you want me to do like put underscore in there like I basically just just trying to figure out wa what what character can I put in here",
    "start": "3039760",
    "end": "3045880"
  },
  {
    "text": "for you to leave me alone right cuz you like you ask me for something I don't have or what if your middle name just happens to be",
    "start": "3045880",
    "end": "3052680"
  },
  {
    "text": "na which which I I have done I have done interestingly enough it allows me to submit like a middle initial with three",
    "start": "3052680",
    "end": "3059280"
  },
  {
    "text": "characters which is then again I'm like H whoever built this form you know validation not that strong suit I once",
    "start": "3059280",
    "end": "3065880"
  },
  {
    "text": "was working with some data and there were some people whose last name was null and I'm pretty sure that was really",
    "start": "3065880",
    "end": "3071760"
  },
  {
    "text": "their last name but I also sort of wonder if it was like just like a data entry error it's hard to know hard to",
    "start": "3071760",
    "end": "3077880"
  },
  {
    "text": "tell right you can't reminds me of those stories about people with license PL like there's a guy with a license plate",
    "start": "3077880",
    "end": "3084280"
  },
  {
    "text": "that was just blank and he get hundreds of parking tickets because when a a car",
    "start": "3084280",
    "end": "3089440"
  },
  {
    "text": "didn't have a plate the cop would say blank oh and so you just get wow yeah that's like the people who have",
    "start": "3089440",
    "end": "3095880"
  },
  {
    "text": "8675309 is their phone number oh man oh man sometimes you go to the grocery",
    "start": "3095880",
    "end": "3102640"
  },
  {
    "text": "store and they ask you for like the loyalty card and you're like I don't want to have to sign up for a loyalty",
    "start": "3102640",
    "end": "3107799"
  },
  {
    "text": "card for this one and so you try 8675309 and like half the time it'll work it definitely works at Publix I",
    "start": "3107799",
    "end": "3113720"
  },
  {
    "text": "used to do that all the time nice nice nice for th for those who miss the reference that is actually from a song",
    "start": "3113720",
    "end": "3119520"
  },
  {
    "text": "what is that song like who sings it oh who sings it I don't know but it's Jenny I got your number it says Tommy Tutone",
    "start": "3119520",
    "end": "3126200"
  },
  {
    "text": "yeah that's right Tommy Tutone that's right yeah if you YouTube it you'll find it",
    "start": "3126200",
    "end": "3132640"
  },
  {
    "text": "8675309 Johnny we're a copyright strike see now you got me going back you know down to through Memory Lane oh man all",
    "start": "3132760",
    "end": "3140319"
  },
  {
    "text": "right so Ian I know you've got a UNP I might be a little bit biased here",
    "start": "3140319",
    "end": "3145680"
  },
  {
    "text": "because I am a bit of a Apple Fanboy but I think the Vision Pro is cool and you're not gonna convince me otherwise",
    "start": "3145680",
    "end": "3151480"
  },
  {
    "text": "you think it's cool huh well I like it I really like it it's cool okay don't are you telling me you you dropped down 3500",
    "start": "3151480",
    "end": "3158079"
  },
  {
    "text": "bucks to pre-order yes yes I did against my better judgment but oh",
    "start": "3158079",
    "end": "3165839"
  },
  {
    "text": "man I might ask you to borrow some money after the show seriously Mr Ian lol it",
    "start": "3165839",
    "end": "3172119"
  },
  {
    "text": "was not financially responsible I think it's cool there's like a 45% chance that",
    "start": "3172119",
    "end": "3179079"
  },
  {
    "text": "it cut catches on like it does seem neat on the other hand 3D is something that",
    "start": "3179079",
    "end": "3186240"
  },
  {
    "text": "has like almost caught on maybe five or six times already like there were 3D",
    "start": "3186240",
    "end": "3192000"
  },
  {
    "text": "movies in the 50s and then they came back in like the '90s and again in the",
    "start": "3192000",
    "end": "3198680"
  },
  {
    "text": "2010s and they had the 3D TVs there was Nintendo 3DS there was virtual reality I",
    "start": "3198680",
    "end": "3205880"
  },
  {
    "text": "mean there's still virtual reality but that's kind of happened a couple times and I think part of the problem for 3D",
    "start": "3205880",
    "end": "3212000"
  },
  {
    "text": "is that you know a certain percentage of the population can't see 3D a lot of",
    "start": "3212000",
    "end": "3217400"
  },
  {
    "text": "people wear glasses and if you're in either of those categories it can be tricky the apple one is a little better",
    "start": "3217400",
    "end": "3223200"
  },
  {
    "text": "because they at least let you put your glasses into the thing but then that makes it cost more so I don't know I",
    "start": "3223200",
    "end": "3229280"
  },
  {
    "text": "think this one has like a chance it does seem cool but I also sort of wonder if I",
    "start": "3229280",
    "end": "3235000"
  },
  {
    "text": "think the success scenario is maybe it's like Apple watch where I mean you see people wearing Apple watches every day",
    "start": "3235000",
    "end": "3241799"
  },
  {
    "text": "on the other hand you also see people not wearing Apple watches every day versus like a telephone if somebody says",
    "start": "3241799",
    "end": "3247680"
  },
  {
    "text": "they don't have a smartphone it's because you know they're quirky you know it's not like a thing that you just",
    "start": "3247680",
    "end": "3253400"
  },
  {
    "text": "happen to not have a smartphone it's like you're deliberately being quirky if you don't have a smartphone like I have friends who don't",
    "start": "3253400",
    "end": "3259440"
  },
  {
    "text": "have smartphones but like that is a choice that they're like choosing to make right yeah I don't think it's replacing your laptop anytime soon right",
    "start": "3259440",
    "end": "3267079"
  },
  {
    "text": "but like when it when it when I first saw the demo right I was like oh this is so cool I want one and they showed the",
    "start": "3267079",
    "end": "3272799"
  },
  {
    "text": "price I'm like do I really want one but then again you know like it's one of those things where I'm like okay",
    "start": "3272799",
    "end": "3278920"
  },
  {
    "text": "this is for the definitely for the early adopter crowd right we we know that we get that right so I told myself like",
    "start": "3278920",
    "end": "3285920"
  },
  {
    "text": "look I am interested right but not at that price range right like there there's you know I still got kids who",
    "start": "3285920",
    "end": "3292319"
  },
  {
    "text": "put through college and to me that seems you know those take priority yeah my",
    "start": "3292319",
    "end": "3297680"
  },
  {
    "text": "kids are never going to college now you kid no college for you but you can use the Apple Vision Pro when you",
    "start": "3297680",
    "end": "3304440"
  },
  {
    "text": "buy your own glasses inserts and face mask mome Lawns to do that exactly exactly exactly exactly exactly I mean",
    "start": "3304440",
    "end": "3312960"
  },
  {
    "text": "I'm I'm going to wait I'm going to wait till they work out you know the little bugs and issues when they can have a",
    "start": "3312960",
    "end": "3318240"
  },
  {
    "text": "lighter weight um thing because I hear from all the reviews on YouTube and whatnot that you know it gets pretty",
    "start": "3318240",
    "end": "3323359"
  },
  {
    "text": "heavy after about you know a couple of hours so do these though I know those those those apple Max",
    "start": "3323359",
    "end": "3329599"
  },
  {
    "text": "headsets man they they are like I have to take this thing off my ears you know every every hour or so in the regular",
    "start": "3329599",
    "end": "3335280"
  },
  {
    "text": "because they are pretty heavy but you know they offer great sound quality right so for the same thing for the Apple Vision Pro I imagine that it'll",
    "start": "3335280",
    "end": "3341280"
  },
  {
    "text": "offer a great experience but not something you're going to be in all day you know every day kind of thing but you",
    "start": "3341280",
    "end": "3346520"
  },
  {
    "text": "know it's nice and it's Innovation that's cool U it's great to see um but",
    "start": "3346520",
    "end": "3351640"
  },
  {
    "text": "yeah I think I'm I'm I'm I'm going wait for v2 the the nonpr non 35 version if",
    "start": "3351640",
    "end": "3357079"
  },
  {
    "text": "I'm ever going to make that jump or or I can just come hang out with you Ian yeah anytime I didn't buy a new phone this",
    "start": "3357079",
    "end": "3364039"
  },
  {
    "text": "year so that makes it like a little bit better oh now you're looking for justification I got it there there is no justification to be",
    "start": "3364039",
    "end": "3372280"
  },
  {
    "text": "I bought the iPad 1 which was kind of not a perfect product like even at the",
    "start": "3372280",
    "end": "3377559"
  },
  {
    "text": "time you could tell that it was a little bit heavier than it needed to be and wasn't totally perfect and I guess that",
    "start": "3377559",
    "end": "3384440"
  },
  {
    "text": "was before it was retina but I was happy having bought it but it was not",
    "start": "3384440",
    "end": "3390000"
  },
  {
    "text": "3500 I don't know everything it's that it's that inflation you know like the postco inflation that it would have only",
    "start": "3390000",
    "end": "3397359"
  },
  {
    "text": "been like $500 for the uh the headset but then that inflation kicked in I",
    "start": "3397359",
    "end": "3402440"
  },
  {
    "text": "don't know I don't think Apple cares no I I think Apple was very happy to charge",
    "start": "3402440",
    "end": "3409039"
  },
  {
    "text": "3500 the carrying cases $200 I know seriously yeah apple always you know",
    "start": "3409039",
    "end": "3415319"
  },
  {
    "text": "people will self- select you know like if if the the fans the the die hards they know that you know at the very",
    "start": "3415319",
    "end": "3421640"
  },
  {
    "text": "least like maybe this is an experiment for them they just goingon to say okay let's let's make the best possible thing",
    "start": "3421640",
    "end": "3427559"
  },
  {
    "text": "we can get forget price right this is not for price you know budget conscious you know if you have to ask this is what",
    "start": "3427559",
    "end": "3433720"
  },
  {
    "text": "I was like if ask the price it's not for you right but uh you know if if you know let's put the best thing we can out",
    "start": "3433720",
    "end": "3440240"
  },
  {
    "text": "there um see who buys it get that early feedback get that early experimentation you know and then uh and then come out",
    "start": "3440240",
    "end": "3446079"
  },
  {
    "text": "with something you know for the masses you know in in one or two years so I fully expect that that's that's what's",
    "start": "3446079",
    "end": "3451640"
  },
  {
    "text": "going to happen yeah I think if in 10 years you know there's like a version where you just clip something on your",
    "start": "3451640",
    "end": "3457200"
  },
  {
    "text": "glasses and you know you don't have the battery pack is maybe in your pocket or",
    "start": "3457200",
    "end": "3462440"
  },
  {
    "text": "it's somehow Wireless or something I could see that you know becoming like really big I just think this particular",
    "start": "3462440",
    "end": "3469039"
  },
  {
    "text": "version of it where you know it's a full headset you have to put it on your head it's not inexpensive think probably",
    "start": "3469039",
    "end": "3477000"
  },
  {
    "text": "Apple will stick with it I think it will not be as big of a hit as the Apple watch even for this version but on the",
    "start": "3477000",
    "end": "3484400"
  },
  {
    "text": "other hand I think if they keep making it for five years 10 years and then they do make the glasses version then that'll",
    "start": "3484400",
    "end": "3489880"
  },
  {
    "text": "be like a huge hit well we shall wait and see huh we'll see all right when uh Go version 1.96",
    "start": "3489880",
    "end": "3498200"
  },
  {
    "text": "comes out we'll uh we'll come back about it again that'll have support for",
    "start": "3498200",
    "end": "3503559"
  },
  {
    "text": "everything nice I'm going to expect a full report Ian on how on how expensive",
    "start": "3503559",
    "end": "3509319"
  },
  {
    "text": "your face feels when you put that thing on well do you guys have 3D TVs nah I I",
    "start": "3509319",
    "end": "3514520"
  },
  {
    "text": "I I skipped that generation yeah I bought my TV right before my TV at this",
    "start": "3514520",
    "end": "3519599"
  },
  {
    "text": "point is like 11 years old I bought it right before 3D TVs hit I haven't bothered to replace it yet I'll probably",
    "start": "3519599",
    "end": "3525440"
  },
  {
    "text": "replace it in a couple years with something that's you know ultra high defa but in the intervening Time 3D came",
    "start": "3525440",
    "end": "3532559"
  },
  {
    "text": "and went then had the glasses that like had the shutters did you see this like so so man",
    "start": "3532559",
    "end": "3541079"
  },
  {
    "text": "perhaps that is my unpopular opinion some of some of these names are like dumb right like I I skipped the whole",
    "start": "3541079",
    "end": "3547760"
  },
  {
    "text": "you know 3D TV thing I skipped the whole Smart TV thing I just think these name",
    "start": "3547760",
    "end": "3553520"
  },
  {
    "text": "these names are just kind of I mean there was nothing smart about the television it's just that they rather",
    "start": "3553520",
    "end": "3558720"
  },
  {
    "text": "than buying a standalone you know like Alexa you know or whatever those things",
    "start": "3558720",
    "end": "3564799"
  },
  {
    "text": "are Apple te rather than you know they just baked it right into the software there was nothing smart about it um it's",
    "start": "3564799",
    "end": "3571000"
  },
  {
    "text": "just the naming conventions like sometimes I think they dumb it down so much right that that I think for",
    "start": "3571000",
    "end": "3577799"
  },
  {
    "text": "marketing purposes you know just to make it I don't know more accessible or like",
    "start": "3577799",
    "end": "3583079"
  },
  {
    "text": "simple or something I don't know like I think that was like a combination of consumers didn't want to have to buy a",
    "start": "3583079",
    "end": "3588920"
  },
  {
    "text": "separate box to plug in and then manufacturers realized that if they connect to the internet then they can",
    "start": "3588920",
    "end": "3595000"
  },
  {
    "text": "sell advertising data and reduce their prices and like once the first company did it they were the cheapest and then",
    "start": "3595000",
    "end": "3601680"
  },
  {
    "text": "everybody else had to do it to catch up to them you can't buy a Nots Smart TV now seriously yeah like youan say like I",
    "start": "3601680",
    "end": "3608480"
  },
  {
    "text": "went on Amazon the other day I'm like you know what what if I what if I wanted like a larger you know flat screen um",
    "start": "3608480",
    "end": "3614839"
  },
  {
    "text": "you know basically we've had the same one in in our family for for a few years and like even my the computers the the",
    "start": "3614839",
    "end": "3621839"
  },
  {
    "text": "monitors I use on my for my day-to-day work are about the same size as it I'm like okay if I wanted to have family",
    "start": "3621839",
    "end": "3627160"
  },
  {
    "text": "entertainment on a larger screen what's out there these days I was hard pressed to find a non-smart non non-integrated",
    "start": "3627160",
    "end": "3635000"
  },
  {
    "text": "non iot to hell right like a TV I'm like what happened to like a very simple good",
    "start": "3635000",
    "end": "3641960"
  },
  {
    "text": "quality flat screen without all the these bells and whistles like can we have those anymore you can buy the digital signage versions yeah but",
    "start": "3641960",
    "end": "3648480"
  },
  {
    "text": "they're more expensive yeah because they're they're not subsidized by selling your advertising data so then",
    "start": "3648480",
    "end": "3654880"
  },
  {
    "text": "that makes it too expensive and so then you can't buy them it's sort of it's like a paradox like but I'm like okay",
    "start": "3654880",
    "end": "3661760"
  },
  {
    "text": "like okay I know you can't I'm I'm willing like most things out there right",
    "start": "3661760",
    "end": "3666880"
  },
  {
    "text": "I'm willing to pay extra right for the simple thing like is this is where we",
    "start": "3666880",
    "end": "3672160"
  },
  {
    "text": "find ourselves right in this Society like we have to pay extra right for the non you know Big Brother version of",
    "start": "3672160",
    "end": "3679039"
  },
  {
    "text": "things it's kind of like a you know like food at at the food market where you have to pay extra for the stuff that",
    "start": "3679039",
    "end": "3684480"
  },
  {
    "text": "doesn't have like pesticides and things in it right like if you want the natural non non messed with version of the thing",
    "start": "3684480",
    "end": "3691960"
  },
  {
    "text": "you have to pay more for it I mean this is where we are so fine let me pay extra for but give me some options right now I",
    "start": "3691960",
    "end": "3697839"
  },
  {
    "text": "have like close to zero yeah it's sort of the same for smartphones like if you're one of those quirky people who",
    "start": "3697839",
    "end": "3702920"
  },
  {
    "text": "wants to have like a dumb phone I think you can get a cheap Nokia possibly but a",
    "start": "3702920",
    "end": "3709280"
  },
  {
    "text": "lot of them are like here's the dumb phone that costs $700 and has an eink",
    "start": "3709280",
    "end": "3715200"
  },
  {
    "text": "screen and you're like for $700 seriously seriously like I I",
    "start": "3715200",
    "end": "3721480"
  },
  {
    "text": "definitely wanted to have one of those things I'm like are you kidding me this thing costs more than the average smartphone to have the dumb version of",
    "start": "3721480",
    "end": "3728799"
  },
  {
    "text": "the thing oh my God this is infuriating anyways I think we yeah there's there's",
    "start": "3728799",
    "end": "3734880"
  },
  {
    "text": "too many gripes for us to be head out there we will not stop this is becoming yeah just like go complain about it",
    "start": "3734880",
    "end": "3741640"
  },
  {
    "text": "podcast seriously seriously I think we we all have a few things we could complain about but thank you so much",
    "start": "3741640",
    "end": "3749039"
  },
  {
    "text": "Carolina for joining us yet again for another episode of what's new and go",
    "start": "3749039",
    "end": "3754440"
  },
  {
    "text": "one. whatever at this point it might all be one do something CU I don't see I don't see any 2.0 in the Horizon at any",
    "start": "3754440",
    "end": "3761920"
  },
  {
    "text": "anytime soon so you know but thank you for joining and Ian thank you for co-hosting as usual um yeah until until",
    "start": "3761920",
    "end": "3769680"
  },
  {
    "text": "we bring you back for the next one that is go time for this week thanks",
    "start": "3769680",
    "end": "3776440"
  },
  {
    "text": "for hanging with us subscribe now if you haven't yet head to go time. FM for all",
    "start": "3776440",
    "end": "3782160"
  },
  {
    "text": "the ways and don't forget to check out our fresh Chang log beats the Dance",
    "start": "3782160",
    "end": "3787240"
  },
  {
    "text": "Party album is on Spotify Apple music and the rest there's a link in the show",
    "start": "3787240",
    "end": "3792680"
  },
  {
    "text": "notes for you thanks once again to our partners at fly.io to our beat freaking",
    "start": "3792680",
    "end": "3798279"
  },
  {
    "text": "residence breakmaster cylinder and to you for listening that is all for now but we'll talk to you again next time on",
    "start": "3798279",
    "end": "3805039"
  },
  {
    "text": "go time [Music]",
    "start": "3805039",
    "end": "3816609"
  },
  {
    "text": "[Music]",
    "start": "3818890",
    "end": "3821989"
  },
  {
    "text": "k",
    "start": "3828200",
    "end": "3831200"
  }
]