[
  {
    "start": "0",
    "end": "169000"
  },
  {
    "text": "we are joined today by Stfan Euan from",
    "start": "160",
    "end": "5400"
  },
  {
    "text": "reststate.devs stefan welcome to the change log hey thanks for having me it's a pleasure pleasure to have you as well",
    "start": "5400",
    "end": "12639"
  },
  {
    "text": "adam how you doing man so good jared how about you i am doing well always excited",
    "start": "12639",
    "end": "19199"
  },
  {
    "text": "at the beginning of a conversation to dig into something new something",
    "start": "19199",
    "end": "24760"
  },
  {
    "text": "different and uh something called restate this is supposed to be the",
    "start": "24760",
    "end": "30000"
  },
  {
    "text": "simplest way to build resilient applications this is a requested show",
    "start": "30000",
    "end": "35320"
  },
  {
    "text": "show Stfan so we do take episode requests this listener would like to remain",
    "start": "35320",
    "end": "41360"
  },
  {
    "text": "anonymous however they say that restate is a super exciting approach to managing",
    "start": "41360",
    "end": "48000"
  },
  {
    "text": "distributed systems and they say that we should get you on the show and so we just take orders around here and our",
    "start": "48000",
    "end": "54160"
  },
  {
    "text": "listeners often get what they want and so that's how we found you was a listener request awesome that's that",
    "start": "54160",
    "end": "60160"
  },
  {
    "text": "that's very cool to hear is that open source communities at work and all that",
    "start": "60160",
    "end": "66080"
  },
  {
    "text": "that's right so restate let's not get into restate itself at first let's talk about",
    "start": "66080",
    "end": "72479"
  },
  {
    "text": "resilient apps first because this is called tagline the simplest way to build resilient applications let's talk about",
    "start": "72479",
    "end": "79920"
  },
  {
    "text": "that what is exactly a resilient application in your in your estimation",
    "start": "79920",
    "end": "86640"
  },
  {
    "text": "okay yeah so in in the in the way we think of it in the context of restate um",
    "start": "86640",
    "end": "92320"
  },
  {
    "text": "we're talking mostly about the the back ends of application the sort of coordination and orchestration logic a",
    "start": "92320",
    "end": "98880"
  },
  {
    "text": "resilient application would be an application that doesn't accidentally drop your order that doesn't",
    "start": "98880",
    "end": "105000"
  },
  {
    "text": "accidentally place it twice if you hit F5 at the wrong point when you're in the browser that doesn't you know",
    "start": "105000",
    "end": "113720"
  },
  {
    "text": "accidentally book your Uber for two people instead of for one um that",
    "start": "113720",
    "end": "118880"
  },
  {
    "text": "doesn't you know just disconnect you from from your chatbot lose the history make you start",
    "start": "118880",
    "end": "126960"
  },
  {
    "text": "over all these kind of things this is what what we call like what we're talking about when we mean resilient",
    "start": "126960",
    "end": "133040"
  },
  {
    "text": "apps in the context of restate so basically apps that tolerate all sorts of hiccups errors in the infrastructure",
    "start": "133040",
    "end": "139520"
  },
  {
    "text": "unavailable endpoints you know network failures process failures temporary",
    "start": "139520",
    "end": "144920"
  },
  {
    "text": "outages but also like you know types of programming glitches that cause like",
    "start": "144920",
    "end": "151680"
  },
  {
    "text": "requests to fall through and and having to be retrieded in order to you know be processed reliably but then not get",
    "start": "151680",
    "end": "158239"
  },
  {
    "text": "duplicated that the system understanding how to either potently treat them as a retry or as a second request this is",
    "start": "158239",
    "end": "165519"
  },
  {
    "text": "sort of the the bigger picture of what we mean here with resilient applications can you take a moment to demystify that",
    "start": "165519",
    "end": "172239"
  },
  {
    "start": "169000",
    "end": "302000"
  },
  {
    "text": "term that you just said item potently for so everyone's on the same page what",
    "start": "172239",
    "end": "177360"
  },
  {
    "text": "does that mean item potently yeah um I think out of potenty you can can think",
    "start": "177360",
    "end": "182959"
  },
  {
    "text": "of it as just like understanding that a repeated request is actually not a new",
    "start": "182959",
    "end": "188080"
  },
  {
    "text": "request but it's the same request again you're just sending it again because you were maybe disconnected from the",
    "start": "188080",
    "end": "194319"
  },
  {
    "text": "original request or you got a you got an arrow back it's it's the thing that if you don't if you don't do it correctly",
    "start": "194319",
    "end": "201360"
  },
  {
    "text": "that is actually actually accidentally placing an order twice when you did when",
    "start": "201360",
    "end": "207440"
  },
  {
    "text": "it did draw to you know place it once right um it's a thing that many applications don't get right and that's",
    "start": "207440",
    "end": "212959"
  },
  {
    "text": "why you still see too many websites saying don't hit F5 while this is showing reload while we finish this",
    "start": "212959",
    "end": "219200"
  },
  {
    "text": "transaction exactly because it doesn't understand if you submit the thing again that this is actually supposed to be the",
    "start": "219200",
    "end": "225200"
  },
  {
    "text": "same thing it's just like another another submission of the same request it might it it has no way of identifying",
    "start": "225200",
    "end": "231120"
  },
  {
    "text": "that so it might accidentally treat it as a second one or it has just like a very uh rough way of doing this it's",
    "start": "231120",
    "end": "237040"
  },
  {
    "text": "it's a surprisingly complicated problem and there's like there's lots of applications that don't get it correct",
    "start": "237040",
    "end": "243040"
  },
  {
    "text": "and there are lots of weird ways applications work around this like as a as a fun fact I think my first the first",
    "start": "243040",
    "end": "250640"
  },
  {
    "text": "bank where I was a customer they they did only allow you to wire to a certain",
    "start": "250640",
    "end": "256959"
  },
  {
    "text": "recipient a certain amount once per day if you're trying to wire the same amount of the same person a second time for the",
    "start": "256959",
    "end": "263120"
  },
  {
    "text": "day they they just wouldn't allow it because they didn't know if that was like a a retry from like your browser or",
    "start": "263120",
    "end": "268960"
  },
  {
    "text": "if that was something stuck in a queue at some point in time that's just how they duplicated it and um yeah so",
    "start": "268960",
    "end": "274639"
  },
  {
    "text": "generally art and potency is dduplication uh in in a meaningful way understanding",
    "start": "274639",
    "end": "280400"
  },
  {
    "text": "retries versus new requests yeah that's called overkill i think when they did that they're like here how can we just",
    "start": "280400",
    "end": "286720"
  },
  {
    "text": "use a blunt tool to solve this tiny little problem let's just not let you do one more than one per day not ideal",
    "start": "286720",
    "end": "294320"
  },
  {
    "text": "surely for lots of uses okay so same request twice operates the first time won't",
    "start": "294320",
    "end": "301199"
  },
  {
    "text": "operate the second time generally speaking how do you achieve this i mean you could just limit to one request per",
    "start": "301199",
    "end": "306880"
  },
  {
    "start": "302000",
    "end": "451000"
  },
  {
    "text": "day but if you're not going to do that how do people usually implement or",
    "start": "306880",
    "end": "312080"
  },
  {
    "text": "ensure item potency in their applications yeah so um in a way you",
    "start": "312080",
    "end": "318000"
  },
  {
    "text": "basically have to find a way to anchor the identity of requests all the way through there's different standards for",
    "start": "318000",
    "end": "324639"
  },
  {
    "text": "doing that um the like the HTTP standard has actually a new um has a has a defined a",
    "start": "324639",
    "end": "334000"
  },
  {
    "text": "header where you can put an auto potency key and the servers when they support this are supposed to understand if that",
    "start": "334000",
    "end": "339520"
  },
  {
    "text": "key is set and u a previous request where the same key has come and the same parameters that this is uh that this is",
    "start": "339520",
    "end": "346320"
  },
  {
    "text": "a you know a duplicate request for the same operation but then you know down the road you basically just try to to to",
    "start": "346320",
    "end": "354800"
  },
  {
    "text": "anchor requests and and the processing of different steps in each other um when",
    "start": "354800",
    "end": "359919"
  },
  {
    "text": "you do message cues you place correlation ids uh when you're working with databases maybe you try to address",
    "start": "359919",
    "end": "367440"
  },
  {
    "text": "primary keys or transaction ids or uh or leases or tokens there's there's tons",
    "start": "367440",
    "end": "374319"
  },
  {
    "text": "and tons of of tricks people do but it's it's ultimately still very hard uh hard problem to do um if you want to do it",
    "start": "374319",
    "end": "381600"
  },
  {
    "text": "end to end it's kind of a mindset you have to set out to do it don't you otherwise I think you have to design",
    "start": "381600",
    "end": "386720"
  },
  {
    "text": "from this from the start for it like if it's the weakest link in the chain that breaks it's one of these things yes or",
    "start": "386720",
    "end": "392639"
  },
  {
    "text": "you can just say do not reload your page while you're hitting this API please exactly it's the simplest way to do it",
    "start": "392639",
    "end": "398400"
  },
  {
    "text": "just like make it the user's problem don't handle it in your infrastructure yeah i'll say as an engineer when I've",
    "start": "398400",
    "end": "403680"
  },
  {
    "text": "achieved item potency I I know it feels very good when you're like okay I'm for sure not going to do double execution in",
    "start": "403680",
    "end": "410720"
  },
  {
    "text": "this particular code path that feels good and as an end user I'm also happy when I know that I'm not going to get",
    "start": "410720",
    "end": "416960"
  },
  {
    "text": "charged twice for instance that's right so you you can you can actually see good APIs design this",
    "start": "416960",
    "end": "423919"
  },
  {
    "text": "design this in from the start I think the first the first API where I came across that I thought that was really",
    "start": "423919",
    "end": "429520"
  },
  {
    "text": "really well done was Stripe's payment API you can really see i think that's also why it got so insanely popular so",
    "start": "429520",
    "end": "434800"
  },
  {
    "text": "quick because they they the way they made that handling just seamless for for",
    "start": "434800",
    "end": "441680"
  },
  {
    "text": "folks that embedded this into their code to to really understand how do I make sure I I sent this request once and deal",
    "start": "441680",
    "end": "447599"
  },
  {
    "text": "with all these things like that that was really that was stellar all right so here's a harder question mhm where does",
    "start": "447599",
    "end": "455520"
  },
  {
    "start": "451000",
    "end": "586000"
  },
  {
    "text": "the word item potency come from and why do we use that to describe this thing it seems unnecessarily verbose and and",
    "start": "455520",
    "end": "463360"
  },
  {
    "text": "jargony do you know spell it first Jared i D E M P O T E N C Y would be the",
    "start": "463360",
    "end": "470400"
  },
  {
    "text": "adjective mhm do you know if you don't know you can just say I have no idea but if you don't",
    "start": "470400",
    "end": "476479"
  },
  {
    "text": "know you don't really know but my my guess is it's it's a Latin word it comes from Latin",
    "start": "476479",
    "end": "482199"
  },
  {
    "text": "like Adam i don't know it's all Greek to me maybe we can get a real time lookup for",
    "start": "482199",
    "end": "489120"
  },
  {
    "text": "that and follow up on it uh from some sort of LLM just prompting Adam behind",
    "start": "489120",
    "end": "494639"
  },
  {
    "text": "the scenes to prompt his Wikipedia as we speak okay good i was stalling for you",
    "start": "494639",
    "end": "500240"
  },
  {
    "text": "you know I don't really have a have the details here for you Jared i'm sorry I can't lm quickly enough for you but it",
    "start": "500240",
    "end": "506360"
  },
  {
    "text": "says item potence is the property of certain certain operations in",
    "start": "506360",
    "end": "513440"
  },
  {
    "text": "mathematics all right I went straight to the LLM and I got the answer to my question so the term item potent comes",
    "start": "513440",
    "end": "519919"
  },
  {
    "text": "from Latin roots so Stefan excellent call there item meaning the same and",
    "start": "519919",
    "end": "525519"
  },
  {
    "text": "potent meaning having power or being able to put together item potent roughly means having the power to remain the",
    "start": "525519",
    "end": "532000"
  },
  {
    "text": "same mhm so there's the actual word and then yes mathematics blah blah blah i've",
    "start": "532000",
    "end": "539360"
  },
  {
    "text": "stopped reading now so hopefully that wasn't a hallucination and we can all move on man that sounds about right like",
    "start": "539360",
    "end": "544800"
  },
  {
    "text": "if it's an elucination it's a it's a it's a good one a close one here yeah",
    "start": "544800",
    "end": "550080"
  },
  {
    "text": "idem plus potence same plus power there you go it's the same power very cool",
    "start": "550080",
    "end": "557360"
  },
  {
    "text": "well uh thank you for scratching my itch my curious itch there both of you and",
    "start": "557360",
    "end": "562880"
  },
  {
    "text": "chat GBT I suppose pitched in on that one um what else so we're talking resiliency",
    "start": "562880",
    "end": "568800"
  },
  {
    "text": "i'm curious obviously to have a resilient app just is like good right",
    "start": "568800",
    "end": "574160"
  },
  {
    "text": "like who wouldn't want these things and uh just taking one of those things item",
    "start": "574160",
    "end": "579600"
  },
  {
    "text": "potency and realizing it's hard to achieve on your own throughout especially more complicated",
    "start": "579600",
    "end": "585880"
  },
  {
    "text": "applications why did you all set out to solve this problem for folks to build",
    "start": "585880",
    "end": "590959"
  },
  {
    "start": "586000",
    "end": "1124000"
  },
  {
    "text": "restate and why did you feel like I'm the guy for the job yeah that that that has a long answer and a short answer i",
    "start": "590959",
    "end": "597680"
  },
  {
    "text": "can I can start with the short answer um the short answer is it's really the I",
    "start": "597680",
    "end": "603279"
  },
  {
    "text": "would say the state-ofthe-art to build backends that are supposed to back ends",
    "start": "603279",
    "end": "609200"
  },
  {
    "text": "that do any non-trivial state management and coordination is completely unsustainable i think the the way we're",
    "start": "609200",
    "end": "616000"
  },
  {
    "text": "building this today um just to to give you an example um so let's let's just or",
    "start": "616000",
    "end": "622959"
  },
  {
    "text": "let's actually start two example let's stay with LLM because we just talked about it right so let's say you're you're building you're building a",
    "start": "622959",
    "end": "628880"
  },
  {
    "text": "chatbot you're submitting something like a message there um this thing in the end",
    "start": "628880",
    "end": "634079"
  },
  {
    "text": "has to it has to reach the LLM but it has to look up the context um in which",
    "start": "634079",
    "end": "639680"
  },
  {
    "text": "that chat happened before it has to make the call has to go back store the context you don't want it to like just",
    "start": "639680",
    "end": "645600"
  },
  {
    "text": "lose everything if you know if you lose your connection in the middle if you let's go with the F5 thing again like",
    "start": "645600",
    "end": "650880"
  },
  {
    "text": "you don't want it to actually trigger the the same the same request twice or you know like lose the entire session",
    "start": "650880",
    "end": "656640"
  },
  {
    "text": "make you start over so you're you're probably just putting this as an asynchronous request that runs in the background that you're you know you're",
    "start": "656640",
    "end": "662720"
  },
  {
    "text": "sending from your from your shared session from your browser but it's a separate like asynchronous request that",
    "start": "662720",
    "end": "668000"
  },
  {
    "text": "runs that talks to the LLM we want it to be actually retrying in case something fails or is overloaded and it's it's",
    "start": "668000",
    "end": "674240"
  },
  {
    "text": "throttling your back and then you want to be able to reconnect to that uh to that task or request in case you know",
    "start": "674240",
    "end": "680079"
  },
  {
    "text": "something goes wrong or in your browser or you accidentally hit the back button or whatever like just implementing this",
    "start": "680079",
    "end": "685279"
  },
  {
    "text": "is a surprisingly surprisingly complicated thing where you start to stitch together like probably a queue a",
    "start": "685279",
    "end": "692279"
  },
  {
    "text": "database and a bunch of tasks to manage that uh to to give you another example we just talked about Strive right so",
    "start": "692279",
    "end": "698560"
  },
  {
    "text": "let's let's say you're sending a request there for a payment and sometimes they tell you look this is good or bad like we accepted or didn't sometimes they",
    "start": "698560",
    "end": "704959"
  },
  {
    "text": "tell you I don't really know like our fraud detector is still running or we have some weird thing in the background that you know we're still asking and it",
    "start": "704959",
    "end": "711120"
  },
  {
    "text": "hasn't told us so I'm going to send you a web hook in a moment to tell you whether this went through or not and now",
    "start": "711120",
    "end": "716640"
  },
  {
    "text": "you have like a synchronous request there and then somewhere else an asynchronous request coming up you just",
    "start": "716640",
    "end": "723040"
  },
  {
    "text": "want to make those two reliably meet even if this one fails you want it to sort of like recover somewhere understand where to you know reconnect",
    "start": "723040",
    "end": "729760"
  },
  {
    "text": "with the web hook that you're awaiting and like this little piece like it's it's really it's really just one case",
    "start": "729760",
    "end": "737040"
  },
  {
    "text": "handling in the back end where Stripe says \"Okay I'm processing instead of like yes or no.\" This is actually many",
    "start": "737040",
    "end": "742880"
  },
  {
    "text": "days of work to make that look look reliable to make that work reliable and it's like lots and lots and lots of things like this that just like get in",
    "start": "742880",
    "end": "749519"
  },
  {
    "text": "the way with so many moving pieces so many um yeah so many APIs to talk to so",
    "start": "749519",
    "end": "755920"
  },
  {
    "text": "much work so so much more work than you than originally happening asynchronously",
    "start": "755920",
    "end": "761120"
  },
  {
    "text": "in like separate requests than just in the in the synchronous user interaction",
    "start": "761120",
    "end": "766560"
  },
  {
    "text": "like just gluing this all together has become such a complicated thing that",
    "start": "766560",
    "end": "771920"
  },
  {
    "text": "that uh that we felt this this does need a better solution this is um this is",
    "start": "771920",
    "end": "776959"
  },
  {
    "text": "like the the motivation more from the let's say from the use case side i I can give you a motivation more from the like",
    "start": "776959",
    "end": "782800"
  },
  {
    "text": "why we actually ended up doing this i think this is a motivation that probably lots of folks stumbled across ultimately",
    "start": "782800",
    "end": "788399"
  },
  {
    "text": "and said like okay this this needs a better a better solution i think there's like different different projects",
    "start": "788399",
    "end": "793600"
  },
  {
    "text": "approaching that problem mhm um why are we approaching it the way we're doing this has to do with like where we come",
    "start": "793600",
    "end": "800000"
  },
  {
    "text": "from right before we worked on on restate um we were building Apache Flink is a different system is a stream",
    "start": "800000",
    "end": "807040"
  },
  {
    "text": "processing framework um it's basically events and analytics so you know you",
    "start": "807040",
    "end": "813120"
  },
  {
    "text": "have these events coming in often through a message queue and you want to you know aggregate them join them um",
    "start": "813120",
    "end": "821440"
  },
  {
    "text": "just to like a few examples where this is used is fraud detection banks like some some payment events go in you",
    "start": "821440",
    "end": "827279"
  },
  {
    "text": "aggregate feature vectors send that through a fraud model or um I think you",
    "start": "827279",
    "end": "832480"
  },
  {
    "text": "know things like the Tik Tok recom recommend I look flink to I use Flink to actually um join information uh from",
    "start": "832480",
    "end": "840240"
  },
  {
    "text": "users and interactions together in real time and and understand like how to how to create how to update update the",
    "start": "840240",
    "end": "847199"
  },
  {
    "text": "features that will go into the into the recommendation model um if you I think I",
    "start": "847199",
    "end": "853040"
  },
  {
    "text": "think companies like Uber use it for like determine pricing and traffic models and ETA so it's whenever you have",
    "start": "853040",
    "end": "858320"
  },
  {
    "text": "events and you want to analyze them in a way that you you aggregate them into some sort of yeah typically statistical",
    "start": "858320",
    "end": "865440"
  },
  {
    "text": "value or a materialized view this is what we were building before um so it's it's an analytical framework what did",
    "start": "865440",
    "end": "872560"
  },
  {
    "text": "actually happen then is at some point in time we saw folks were using that thing to solve so distributed transactional",
    "start": "872560",
    "end": "879160"
  },
  {
    "text": "processing the types of things that um where where you would say hey um let's",
    "start": "879160",
    "end": "884639"
  },
  {
    "text": "let's assume an an order processing uh service that you know takes the event",
    "start": "884639",
    "end": "889839"
  },
  {
    "text": "you know check out that check out that order and it has to do a bunch of steps let's say update the inventory trigger",
    "start": "889839",
    "end": "895279"
  },
  {
    "text": "payment uh call the service to prepare logistics maybe call another service to",
    "start": "895279",
    "end": "900399"
  },
  {
    "text": "like you know put this in the user's history um you know maybe more steps and so on and and we start we started to see",
    "start": "900399",
    "end": "907199"
  },
  {
    "text": "folks using using Flink for that because it had this interesting property that it had sort of this bakedin way of reliable",
    "start": "907199",
    "end": "915440"
  },
  {
    "text": "communication and state management it was all built for analytical use cases but they found this such an interesting",
    "start": "915440",
    "end": "920880"
  },
  {
    "text": "property that they started to apply this to the transactional to transactional use cases as well like order processing",
    "start": "920880",
    "end": "927120"
  },
  {
    "text": "just because they found that this is otherwise way too complicated to build and way too like way too e easy to to",
    "start": "927120",
    "end": "934240"
  },
  {
    "text": "build it in such a way that it is brittle not scalable that it it has corner cases where it violates a lot of",
    "start": "934240",
    "end": "940800"
  },
  {
    "text": "these properties that we just said and when this started happening repeatedly we thought okay but apparently there",
    "start": "940800",
    "end": "946720"
  },
  {
    "text": "isn't really a good a good rule out there yet and apparently this property of like correct stateful coordination is",
    "start": "946720",
    "end": "954480"
  },
  {
    "text": "something people really appreciate it they feel like it makes their life easier to build these type of frameworks",
    "start": "954480",
    "end": "959519"
  },
  {
    "text": "and then we set out to to build a solution for that and that became restate it's in many ways actually from the way it approaches things from its",
    "start": "959519",
    "end": "966160"
  },
  {
    "text": "architecture it's inspired by by our work on on Apache Flink but it's almost",
    "start": "966160",
    "end": "971920"
  },
  {
    "text": "it's almost a complete mirror image implementation of it takes almost the opposite design choice in in in in most",
    "start": "971920",
    "end": "980160"
  },
  {
    "text": "in most uh most aspects because it's really optimized for low latency",
    "start": "980160",
    "end": "985519"
  },
  {
    "text": "transactional processing rather than you know high throughput analytical processing which was Slink but but what",
    "start": "985519",
    "end": "992800"
  },
  {
    "text": "we retained from from this idea is yes uh stateful orchestration an event-",
    "start": "992800",
    "end": "998560"
  },
  {
    "text": "driven foundation and so on this is this is something we should we should build and we should be working on and yeah",
    "start": "998560",
    "end": "1003759"
  },
  {
    "text": "that became and restate what's the timing of all this like when did Flink start how mature was it or is it and",
    "start": "1003759",
    "end": "1011920"
  },
  {
    "text": "when did Reate be born out of the idea like what's give us a context in time",
    "start": "1011920",
    "end": "1018639"
  },
  {
    "text": "yeah so this is uh this this context is measured in decades I think okay that's",
    "start": "1018639",
    "end": "1024480"
  },
  {
    "text": "useful so yeah I mean Flink was officially founded in 2014 but the work that became",
    "start": "1024480",
    "end": "1031839"
  },
  {
    "text": "Flink is back to 2010 when I was still in university so there's like four years",
    "start": "1031839",
    "end": "1037280"
  },
  {
    "text": "of academic work and then there's Flink started 2014 i worked on it until 2022",
    "start": "1037280",
    "end": "1045120"
  },
  {
    "text": "so eight years after it became an open source project um and then I I left",
    "start": "1045120",
    "end": "1050480"
  },
  {
    "text": "Flink because I needed it to work on something else like for a change and then we we started working on restate um",
    "start": "1050480",
    "end": "1058320"
  },
  {
    "text": "uh like end of 22 early 23 so Reset is a bit over two years old now um Flink is",
    "start": "1058320",
    "end": "1065520"
  },
  {
    "text": "has had its 10th anniversary last year uh like Flink is super mature i think",
    "start": "1065520",
    "end": "1070960"
  },
  {
    "text": "it's used by thousands and thousands of companies at absolutely insane at absolutely insane scale um the the",
    "start": "1070960",
    "end": "1078960"
  },
  {
    "text": "probably largest installation of Flink that I know must be Alibaba who runs",
    "start": "1078960",
    "end": "1084080"
  },
  {
    "text": "tens of thousands of cores for like a single processing pipeline um to to to",
    "start": "1084080",
    "end": "1090080"
  },
  {
    "text": "like live compute their um their their e-commerce search and",
    "start": "1090080",
    "end": "1095440"
  },
  {
    "text": "recommener um continuously uh reset is not quite quite as old and quite as",
    "start": "1095440",
    "end": "1101679"
  },
  {
    "text": "mature as playing it's been two years but we've uh we've um we've released our",
    "start": "1101679",
    "end": "1107360"
  },
  {
    "text": "stable 1.0 last summer and we recently released our first distributed",
    "start": "1107360",
    "end": "1112720"
  },
  {
    "text": "replicated highly available architecture and have a bunch of folks that actually proactively use that so I would say",
    "start": "1112720",
    "end": "1120080"
  },
  {
    "text": "we're we're on course to get there nice was leaving",
    "start": "1120080",
    "end": "1125960"
  },
  {
    "start": "1124000",
    "end": "1500000"
  },
  {
    "text": "Flink difficult sad joyous like what was that like when you left because that's a",
    "start": "1125960",
    "end": "1132160"
  },
  {
    "text": "long time to work on one thing and then to move on to that thing i mean you come you become pretty attached don't you",
    "start": "1132160",
    "end": "1138320"
  },
  {
    "text": "yeah yeah absolutely so it it is definitely a difficult thing and it was not just leaving Flink so we created",
    "start": "1138320",
    "end": "1145039"
  },
  {
    "text": "Fling as an open source project but we also uh we also built a company around that and the company went through an",
    "start": "1145039",
    "end": "1151440"
  },
  {
    "text": "acquisition but we actually still stayed there started uh building and growing the team so I was simultaneously leaving",
    "start": "1151440",
    "end": "1158480"
  },
  {
    "text": "so the open source project and the company I built and everything and absolutely it's a it's a difficult thing",
    "start": "1158480",
    "end": "1164400"
  },
  {
    "text": "because that becomes like your babies actually two babies in a way right the project and the company and but yes I",
    "start": "1164400",
    "end": "1170400"
  },
  {
    "text": "feel that at some point I felt like there's this um I don't know how to say this in",
    "start": "1170400",
    "end": "1176960"
  },
  {
    "text": "English but I I felt I was getting this like tunnel vision on problems i've been working on this for so long and I've",
    "start": "1176960",
    "end": "1184799"
  },
  {
    "text": "seen so many sort of repeated things that like whenever I heard a problem I was just like putting it in this into",
    "start": "1184799",
    "end": "1189919"
  },
  {
    "text": "this category that I knew and that like it started happening that I did that with things and then later realized like",
    "start": "1189919",
    "end": "1195919"
  },
  {
    "text": "oh no that wasn't actually the right thing for that problem that might have been for the last nine but this one should actually have been different and",
    "start": "1195919",
    "end": "1202240"
  },
  {
    "text": "so you get this kind of if you work too long on the same thing you're starting to not see the forest for all the trees",
    "start": "1202240",
    "end": "1208480"
  },
  {
    "text": "and I felt I was reaching that point so it sounded like \"Yeah this I should probably start doing something new.\"",
    "start": "1208480",
    "end": "1215600"
  },
  {
    "text": "It's kind of like familiar grooves in your brain you know if you just go to the same thing over and over again it's",
    "start": "1215600",
    "end": "1221440"
  },
  {
    "text": "like your brain gets new grooves and uh then different problems fall into those",
    "start": "1221440",
    "end": "1226559"
  },
  {
    "text": "you know familiar grooves and they just slide in there sometimes when they don't even fit or they aren't a good fit i",
    "start": "1226559",
    "end": "1234000"
  },
  {
    "text": "certainly understand that i think when you've focused on one thing for a very long time it is hard to think outside",
    "start": "1234000",
    "end": "1241280"
  },
  {
    "text": "that groove and it's interesting that you're building a similar",
    "start": "1241280",
    "end": "1246840"
  },
  {
    "text": "system spiritually similar but I guess you could say radically different architecture is that the way you",
    "start": "1246840",
    "end": "1252960"
  },
  {
    "text": "described it like it's inspired by Flink but it seems like it takes the opposite approach of the world yes I think you",
    "start": "1252960",
    "end": "1259520"
  },
  {
    "text": "could you could call it like that it is and it is under the hood still an event driven system still as as flank is but",
    "start": "1259520",
    "end": "1267919"
  },
  {
    "text": "it it just does it just built for completely different traders just to give you an example uh the the core of",
    "start": "1267919",
    "end": "1274880"
  },
  {
    "text": "link is is the way it is this exactly wants stateful processing so it basically has the data streams that it",
    "start": "1274880",
    "end": "1282000"
  },
  {
    "text": "keeps moving operations that you know do stuff stateful stuff with events count",
    "start": "1282000",
    "end": "1287919"
  },
  {
    "text": "joint and so on and then there's this asynchronous process running in the background that takes these consistent",
    "start": "1287919",
    "end": "1293360"
  },
  {
    "text": "snapshots so if something goes down you can restore the state from the snapshot and sort of like just start start the",
    "start": "1293360",
    "end": "1299039"
  },
  {
    "text": "flow from there and has this like kind of clever way to do this um in a way that maintains consistency across all",
    "start": "1299039",
    "end": "1304960"
  },
  {
    "text": "the parallel machines and it is like efficiently incrementally frequently and so on but it's a very throughput",
    "start": "1304960",
    "end": "1310000"
  },
  {
    "text": "optimized thing so it stays off the critical path if you wish like runs in",
    "start": "1310000",
    "end": "1315200"
  },
  {
    "text": "the background m so it's a yeah it's really good for throughput but it you know it does this like persistence",
    "start": "1315200",
    "end": "1320960"
  },
  {
    "text": "operation once every couple of seconds if you know if you tune it to be like",
    "start": "1320960",
    "end": "1327200"
  },
  {
    "text": "very very frequent most people actually run it more in the order of minutes right so when when something goes down",
    "start": "1327200",
    "end": "1332720"
  },
  {
    "text": "in that in a pipeline you just like replay the last minute of data which typically doesn't quite take a minute because replay is faster than the than",
    "start": "1332720",
    "end": "1340480"
  },
  {
    "text": "the original uh the the data rate at which the events are produced but still like it takes you back a certain amount",
    "start": "1340480",
    "end": "1346880"
  },
  {
    "text": "in time which is usually okay for analytics the worst thing that happens is like okay you know like this this",
    "start": "1346880",
    "end": "1353039"
  },
  {
    "text": "feature here in that vector that goes into that traffic model or that recommendation like is maybe a few",
    "start": "1353039",
    "end": "1359120"
  },
  {
    "text": "seconds older than it would have otherwise been it's like not such a big deal typically mhm like on the",
    "start": "1359120",
    "end": "1364159"
  },
  {
    "text": "transactional uh processing side imagine you have this multi-step process you want to like you want a really fast",
    "start": "1364159",
    "end": "1369520"
  },
  {
    "text": "check out process and you say you know I do want to to just start the next step um after I know the payment has gone",
    "start": "1369520",
    "end": "1376000"
  },
  {
    "text": "through like before that I'm not updating inventory I'm not kicking off um any of the other processes then you",
    "start": "1376000",
    "end": "1381440"
  },
  {
    "text": "really need actually uh like a persistent step to be recorded ideally in milliseconds um maybe it's not that",
    "start": "1381440",
    "end": "1387919"
  },
  {
    "text": "critical for order processing but we're we're building this for like even more low latency use cases like payment",
    "start": "1387919",
    "end": "1392960"
  },
  {
    "text": "processing and settlement and so on and and there you you really just want to kick off the next step after you know",
    "start": "1392960",
    "end": "1398080"
  },
  {
    "text": "like the previous step is is persisted like possibly in a in a multi- multi-data center replication way and",
    "start": "1398080",
    "end": "1404720"
  },
  {
    "text": "only then do I start the next thing so you have to really design this completely differently it's it's it's completely optimized for low latency",
    "start": "1404720",
    "end": "1411760"
  },
  {
    "text": "transactional durability rather than analytical throughput so yeah it's a complete completely different design",
    "start": "1411760",
    "end": "1418720"
  },
  {
    "text": "even though both ultimately are event- driven architectures right but your your",
    "start": "1418720",
    "end": "1424799"
  },
  {
    "text": "atomic unit now is like is compute right like it's logic and perhaps data that",
    "start": "1424799",
    "end": "1431120"
  },
  {
    "text": "comes from that it's a it's a transactional step and so you can't just skip a transactional step because",
    "start": "1431120",
    "end": "1437600"
  },
  {
    "text": "there's a workflow here and certain things rely on other things and so the",
    "start": "1437600",
    "end": "1442799"
  },
  {
    "text": "way that you think about durability as opposed to analytical data",
    "start": "1442799",
    "end": "1448080"
  },
  {
    "text": "is like I said earlier radically different that makes sense to me yeah exactly the atomic step in in restate is",
    "start": "1448080",
    "end": "1455520"
  },
  {
    "text": "is is extremely fine grain right like we we're really building this in such a way that um you should feel comfortable in a",
    "start": "1455520",
    "end": "1463039"
  },
  {
    "text": "program that that you do to use to use restate to persist fine grain steps state updates it uses internally",
    "start": "1463039",
    "end": "1470000"
  },
  {
    "text": "actually this this durable mechanism for for leader election to understand um that it can like can lock and fence off",
    "start": "1470000",
    "end": "1477520"
  },
  {
    "text": "different retries um and this is yeah this is such a such",
    "start": "1477520",
    "end": "1482640"
  },
  {
    "text": "a fine grain nature what's really important that um recording a durable step has the lowest possible latency",
    "start": "1482640",
    "end": "1489360"
  },
  {
    "text": "versus in Flink the atomic step is like couple of million events being aggregated together in some state",
    "start": "1489360",
    "end": "1494480"
  },
  {
    "text": "distributed over 10 machines so that's one atomic step it's completely different yes this word durability is",
    "start": "1494480",
    "end": "1502159"
  },
  {
    "start": "1500000",
    "end": "1946000"
  },
  {
    "text": "being used a lot durable execution durability what exactly is durability",
    "start": "1502159",
    "end": "1508480"
  },
  {
    "text": "doesn't fall down doesn't break always good yeah some something like that i",
    "start": "1508480",
    "end": "1513600"
  },
  {
    "text": "think durability is probably the same as persistence maybe with a bit of a stronger emphasis on it's really doesn't",
    "start": "1513600",
    "end": "1522240"
  },
  {
    "text": "get lost after it happens um so durability is the D in in asset when it",
    "start": "1522240",
    "end": "1527440"
  },
  {
    "text": "comes to databases right databases say we're giving you atomicity consistency isolation and durability once you do an",
    "start": "1527440",
    "end": "1532960"
  },
  {
    "text": "update we're not going to lose it like no matter what crashes like the database has a mechanism to to to bring that",
    "start": "1532960",
    "end": "1541120"
  },
  {
    "text": "change to the database back if I told you I've recorded that row I've recorded that change it will be there no matter",
    "start": "1541120",
    "end": "1546720"
  },
  {
    "text": "what and in the in the context of restate um that that doesn't mean for example if",
    "start": "1546720",
    "end": "1553200"
  },
  {
    "text": "you the the core the core building block of restate is a stateful durable",
    "start": "1553200",
    "end": "1558480"
  },
  {
    "text": "function you can think of it like that and state the stateful durable function when when you you know schedule an",
    "start": "1558480",
    "end": "1564240"
  },
  {
    "text": "invoke for that or as you go through the code of that stateful durable function has like multiple steps recording",
    "start": "1564240",
    "end": "1571520"
  },
  {
    "text": "recording a step whenever you go beyond beyond a step that you asked restate to",
    "start": "1571520",
    "end": "1578720"
  },
  {
    "text": "treat as durable you know that no matter what happens you'll never reexecute that step",
    "start": "1578720",
    "end": "1584640"
  },
  {
    "text": "you'll never come up with a different value like if your machine goes down the reset server goes down if you deploy it",
    "start": "1584640",
    "end": "1591039"
  },
  {
    "text": "across availability zones the data center goes down the network gets partitioned whatever you'll never ever",
    "start": "1591039",
    "end": "1596480"
  },
  {
    "text": "go back and and re-execute that step if it if it once told you that it's",
    "start": "1596480",
    "end": "1602480"
  },
  {
    "text": "it's done it that that's the sort of the meaning of of of durability um once it says it's there it's always going to be",
    "start": "1602480",
    "end": "1608480"
  },
  {
    "text": "there and I think this is um this is in a is in a way",
    "start": "1608480",
    "end": "1614360"
  },
  {
    "text": "the I'd say almost the like one of the one of the magic ingredients is if you",
    "start": "1614360",
    "end": "1620720"
  },
  {
    "text": "the way reset looks at making distributed application development simple I'd say there's there's two two",
    "start": "1620720",
    "end": "1629640"
  },
  {
    "text": "core core pieces that you need to think about one of them is the durability make durability extremely fine grained and",
    "start": "1629640",
    "end": "1636799"
  },
  {
    "text": "extremely cheap so if because if you can if you can apply durability in in fine grand steps you always have to worry",
    "start": "1636799",
    "end": "1643760"
  },
  {
    "text": "about very little after a failure let's say you your durability is coarse grand",
    "start": "1643760",
    "end": "1648799"
  },
  {
    "text": "let's say the the order workflow is just like is is one durable step right and it crashes in the middle it gets retrieded",
    "start": "1648799",
    "end": "1656240"
  },
  {
    "text": "it's up to you to figure out well did I actually process the payment already or not maybe there is a way to just like",
    "start": "1656240",
    "end": "1661440"
  },
  {
    "text": "assume okay I don't put it I can't send it again or I might even not be able to ask the service did I do that or not did",
    "start": "1661440",
    "end": "1666720"
  },
  {
    "text": "I actually decrement the available count of product already or not maybe I have a way to again make this durable or not i",
    "start": "1666720",
    "end": "1673360"
  },
  {
    "text": "don't know um these things tend to be harder than one thinks because sometimes the API gives you you know it might have",
    "start": "1673360",
    "end": "1679200"
  },
  {
    "text": "given you an error back the first time and you thought I didn't do this and followed some control path flow and then the next time you actually get not an",
    "start": "1679200",
    "end": "1685840"
  },
  {
    "text": "error but the real result and then you follow a different path so people mess up this all the time it's really hard to",
    "start": "1685840",
    "end": "1691600"
  },
  {
    "text": "reconcile if you have these multiple steps as a coarse atomic unit what did I do how did I do it the last time how do",
    "start": "1691600",
    "end": "1697919"
  },
  {
    "text": "I recover from this but if you have extremely fine grant durability if you're recording every individual step",
    "start": "1697919",
    "end": "1703039"
  },
  {
    "text": "as durable in the system and when it comes back it can tell you exactly like this was the last step that you recorded",
    "start": "1703039",
    "end": "1708880"
  },
  {
    "text": "then you just have a very small amount of uncertainty okay here's this one thing that I might have tried already i",
    "start": "1708880",
    "end": "1716080"
  },
  {
    "text": "have to just worry about that bit instead of the whole history and and possible control flow and all the choices how I might have ended up here",
    "start": "1716080",
    "end": "1722480"
  },
  {
    "text": "that I need to reconstruct in order to proceed consistently from there so just like verifying durability is extremely",
    "start": "1722480",
    "end": "1728480"
  },
  {
    "text": "powerful in in simplifying things i'd say the second magic ingredient is then how do you anchor anchor this in in the",
    "start": "1728480",
    "end": "1735039"
  },
  {
    "text": "whole retrying and you know resolving potentially inconsistent situations with",
    "start": "1735039",
    "end": "1741279"
  },
  {
    "text": "partitions with with timeouts with zombie processes and so on so that there's always a very consistent view of",
    "start": "1741279",
    "end": "1747679"
  },
  {
    "text": "what the last durable step was i think that's the second sort of ingredient of free state it's not just durability it's",
    "start": "1747679",
    "end": "1753200"
  },
  {
    "text": "actually durability and consensus and and giving you a very very crystal clear",
    "start": "1753200",
    "end": "1758480"
  },
  {
    "text": "view on on what like where you left off where you need to continue from i think",
    "start": "1758480",
    "end": "1764000"
  },
  {
    "text": "if you take those two things in conceptually you've simplified the problem massively and the rest is almost",
    "start": "1764000",
    "end": "1770320"
  },
  {
    "text": "API sugar that you built on top of that that's the that's the that's the I would",
    "start": "1770320",
    "end": "1776640"
  },
  {
    "text": "say the magic that happens in the restate runtime it's a very low latency durable consensus log that that",
    "start": "1776640",
    "end": "1785159"
  },
  {
    "text": "fuses queuing state management locking fencing um creating futures resolving futures",
    "start": "1785159",
    "end": "1792880"
  },
  {
    "text": "like all these kind of operations that tend to be part of a distributed coordination process and yeah when you",
    "start": "1792880",
    "end": "1800080"
  },
  {
    "text": "say the restate runtime what can you liken that to for those of us who don't",
    "start": "1800080",
    "end": "1805279"
  },
  {
    "text": "know what a restate runtime is is it like is it like a NodeJS thing is it like a database is it like a like what",
    "start": "1805279",
    "end": "1811520"
  },
  {
    "text": "is that yes um so using reset is a bit like would say somewhere in between",
    "start": "1811520",
    "end": "1817440"
  },
  {
    "text": "using a database and using um a message broker okay so um you you write your",
    "start": "1817440",
    "end": "1824399"
  },
  {
    "text": "program pretty much as code however how you write it before but you're using the",
    "start": "1824399",
    "end": "1831120"
  },
  {
    "text": "reset SDK think of it a bit like your you know database driver um in order to",
    "start": "1831120",
    "end": "1837600"
  },
  {
    "text": "act to sort of wrap certain operations as okay this this operation here should",
    "start": "1837600",
    "end": "1842720"
  },
  {
    "text": "be recorded as a durable step or um you know attach this state to the invocation transactionally or um you know like",
    "start": "1842720",
    "end": "1850080"
  },
  {
    "text": "create this future complete this future and so on so this is uh you do these operations on like through the reset SDK",
    "start": "1850080",
    "end": "1856320"
  },
  {
    "text": "reset itself is is then like maybe message broker is the best comparison it's on the level of the message broker",
    "start": "1856320",
    "end": "1862720"
  },
  {
    "text": "so when you invoke your code you're not calling to that directly you're actually calling it to restate which makes the",
    "start": "1862720",
    "end": "1869039"
  },
  {
    "text": "the invocation of your function on behalf of you can you the the programming model that we try to provide",
    "start": "1869039",
    "end": "1874080"
  },
  {
    "text": "is you're writing a service that looks like an RPC service like you're writing handlers uh RPC handlers and then reset",
    "start": "1874080",
    "end": "1880799"
  },
  {
    "text": "almost looks like a reverse proxy for you so the other services instead of calling the code directly they call it indirectly through reset reset proxying",
    "start": "1880799",
    "end": "1887679"
  },
  {
    "text": "the call and it puts itself in the middle with its durable consensus log",
    "start": "1887679",
    "end": "1893440"
  },
  {
    "text": "and when it forwards the request to the service it just isn't forwarded naively as an HTTP request but it actually uses",
    "start": "1893440",
    "end": "1900399"
  },
  {
    "text": "a like an invocation protocol it uses like HTTP2 or another type of like",
    "start": "1900399",
    "end": "1905600"
  },
  {
    "text": "streaming connection holds onto that connection allows the service to sort of synchronize fine grain steps it will it",
    "start": "1905600",
    "end": "1912480"
  },
  {
    "text": "will when it forwards the an invocation for example tell it exactly what the supposed state of the world should be as",
    "start": "1912480",
    "end": "1919039"
  },
  {
    "text": "in here's the steps I know you should treat as completed here are the ones that uh here's where you should uh",
    "start": "1919039",
    "end": "1924799"
  },
  {
    "text": "continue and it will then allow to use that connection that that sort of lifeline to to let the let the",
    "start": "1924799",
    "end": "1931840"
  },
  {
    "text": "application you know create durable actions so the yeah it's like on the level of a",
    "start": "1931840",
    "end": "1938480"
  },
  {
    "text": "broker or database looks like a reverse proxy to the invoker looks like a maybe",
    "start": "1938480",
    "end": "1943760"
  },
  {
    "text": "almost like a database to the to the service that uses it and when would somebody reach for this now you said",
    "start": "1943760",
    "end": "1950399"
  },
  {
    "start": "1946000",
    "end": "2347000"
  },
  {
    "text": "distributed systems but some people think every network attached system is a distributed system so",
    "start": "1950399",
    "end": "1956480"
  },
  {
    "text": "I mean if I'm building a web application let's call it a monolith that answers",
    "start": "1956480",
    "end": "1961840"
  },
  {
    "text": "HTTP requests and has a database backend a Ruby on Rails or a Phoenix or a insert",
    "start": "1961840",
    "end": "1968600"
  },
  {
    "text": "your Django insert your backend framework here are those folks pulling",
    "start": "1968600",
    "end": "1974320"
  },
  {
    "text": "in restate and using it for certain aspects of their workflows or is that not necessary for them because they are",
    "start": "1974320",
    "end": "1980640"
  },
  {
    "text": "kind of a monolith like do I have to be building a services-based architecture like where does it fit in i I would very",
    "start": "1980640",
    "end": "1986880"
  },
  {
    "text": "much be with you on like almost any system we build is a distributed system yeah completely so so I think it becomes",
    "start": "1986880",
    "end": "1994399"
  },
  {
    "text": "useful very very quickly um maybe one way to think about this is your your",
    "start": "1994399",
    "end": "2000799"
  },
  {
    "text": "back end where you do where you maintain state and update it and you know run operations and changes it usually has a",
    "start": "2000799",
    "end": "2008080"
  },
  {
    "text": "database that has the sort of core business state some operations go just like purely straight to their database",
    "start": "2008080",
    "end": "2013360"
  },
  {
    "text": "that's all they do that's fine but anytime you have to do something that's",
    "start": "2013360",
    "end": "2019039"
  },
  {
    "text": "not straight against this like one like your core database but something that goes against like different API",
    "start": "2019039",
    "end": "2024399"
  },
  {
    "text": "something that runs in the background yeah something that is asynchronous work that goes beyond",
    "start": "2024399",
    "end": "2030640"
  },
  {
    "text": "just touching the database i think you already are at the point where it's starting to become useful then you know",
    "start": "2030640",
    "end": "2037960"
  },
  {
    "text": "if if the only thing you're doing is maybe forwarding one call yes maybe maybe it's overkill but the I think the",
    "start": "2037960",
    "end": "2046320"
  },
  {
    "text": "the usefulness starts much much sooner than than lots lots of folks realize um",
    "start": "2046320",
    "end": "2052960"
  },
  {
    "text": "I would say every time you think about pulling in a message queue you should probably start to think about pulling in",
    "start": "2052960",
    "end": "2059919"
  },
  {
    "text": "something like like restate um because it gives you the it gives you a a way to",
    "start": "2059919",
    "end": "2067118"
  },
  {
    "text": "do the things you're probably trying to do with a message cube but in a more in",
    "start": "2067119",
    "end": "2072878"
  },
  {
    "text": "a more high level in a more well-defined concrete concrete way um you're not",
    "start": "2072879",
    "end": "2078398"
  },
  {
    "text": "you're not treating events but you're you're dealing with stateful durable invocation stateful durable functions",
    "start": "2078399",
    "end": "2085040"
  },
  {
    "text": "all of a sudden which is very often what you really want if you want if you're putting something um of the synchronous",
    "start": "2085040",
    "end": "2090960"
  },
  {
    "text": "path with a queue you very often want to say okay here's something where I really",
    "start": "2090960",
    "end": "2096000"
  },
  {
    "text": "care about that this happens it shouldn't get lost right that's why I'm putting it in a queue um and",
    "start": "2096000",
    "end": "2102119"
  },
  {
    "text": "then you you probably care about this this thing happening",
    "start": "2102119",
    "end": "2107800"
  },
  {
    "text": "once having having reliable retries you quickly reach the state where the the",
    "start": "2107800",
    "end": "2114079"
  },
  {
    "text": "processing of this operation is actually multiple steps and then you're again in the okay how do I do reconciliation of",
    "start": "2114079",
    "end": "2119119"
  },
  {
    "text": "multiple steps if it failed somewhere in the middle and I don't know what I already completed or not so I would say",
    "start": "2119119",
    "end": "2124480"
  },
  {
    "text": "the moment you you start to pull in a message queue you probably should think about something like like restate the",
    "start": "2124480",
    "end": "2129920"
  },
  {
    "text": "point comes very quickly yeah but then it's it's that's the that's the simplest",
    "start": "2129920",
    "end": "2135920"
  },
  {
    "text": "use case i would say the most the most complicated ones that we see people build with this right now is using this",
    "start": "2135920",
    "end": "2143599"
  },
  {
    "text": "to replace complex complex choreography of like multiple Kafka topics and and",
    "start": "2143599",
    "end": "2150400"
  },
  {
    "text": "rabbit MQs and session servers and and workers and so on um or even like a",
    "start": "2150400",
    "end": "2157680"
  },
  {
    "text": "distributed sort of payment ledger keeping system so the it's really a very",
    "start": "2157680",
    "end": "2163119"
  },
  {
    "text": "broad spectrum the I would say in a in a way you could",
    "start": "2163119",
    "end": "2168320"
  },
  {
    "text": "think like all the type of work you do in the back end that's not the central database that keeps your business state",
    "start": "2168320",
    "end": "2174880"
  },
  {
    "text": "I think is ultimately is ultimately where reset comes in yeah what about a scenario",
    "start": "2174880",
    "end": "2181320"
  },
  {
    "text": "where it's publishing I'm thinking like Tik Tok or YouTube for example as a",
    "start": "2181320",
    "end": "2187520"
  },
  {
    "text": "creator we will upload videos to YouTube there's a process that happens there's a certain orchestration that happens it",
    "start": "2187520",
    "end": "2193599"
  },
  {
    "text": "has to be compressed it has to go through certain filters maybe there's even a content filter has to go through",
    "start": "2193599",
    "end": "2198880"
  },
  {
    "text": "a copyright filter is that an example of where you would use something like restate where you want it to go you want",
    "start": "2198880",
    "end": "2204880"
  },
  {
    "text": "the user to be able to upload properly and your server capture the data and you all the good things but then you got to",
    "start": "2204880",
    "end": "2210640"
  },
  {
    "text": "run it through a process of saying \"Okay this is now content that can be seen by",
    "start": "2210640",
    "end": "2215680"
  },
  {
    "text": "what we call the world because it's been blessed by the copyright filter etc etc is that is that a scenario where it",
    "start": "2215680",
    "end": "2221680"
  },
  {
    "text": "makes sense?\" Yeah absolutely it's this is basically a workflow again if you think about it right um you're you're",
    "start": "2221680",
    "end": "2228000"
  },
  {
    "text": "uploading the video let's say maybe the upload first puts it into some some cloud storage um but then as you said",
    "start": "2228000",
    "end": "2234320"
  },
  {
    "text": "you first pass it to the content filter then you have maybe a few steps that even run in parallel like recoding it for different resolutions optimizing it",
    "start": "2234320",
    "end": "2241040"
  },
  {
    "text": "to be served through the CDN and so on um then you're I don't know running it through a system that tries to figure",
    "start": "2241040",
    "end": "2247920"
  },
  {
    "text": "out what's the best sort of title frame to display and like all these different steps that you do and they they take a",
    "start": "2247920",
    "end": "2253839"
  },
  {
    "text": "they take potentially a long time so it's a longunning process there's a fair chance that the container goes down in the middle or wants to be migrated and",
    "start": "2253839",
    "end": "2259760"
  },
  {
    "text": "when it comes back up you really want this to understand where did I leave off like what are the processes I should",
    "start": "2259760",
    "end": "2265520"
  },
  {
    "text": "reconnect to that are doing the encoding or the yeah or the analysis like this is exactly the orchestration of that",
    "start": "2265520",
    "end": "2271680"
  },
  {
    "text": "process is where reset would come in you wouldn't feed the video frames to the system that's like overkill you don't need to feed the video frames to a",
    "start": "2271680",
    "end": "2277440"
  },
  {
    "text": "transactional log like you just that you put them in whatever cloud storage or so but the like the the orchestration of",
    "start": "2277440",
    "end": "2284480"
  },
  {
    "text": "the process of the workflow of the pipeline analysis that that's that's a very good reset use case actually yes",
    "start": "2284480",
    "end": "2289839"
  },
  {
    "text": "that's a great example Adam because it definitely makes it easy to think through i guess as people who upload to",
    "start": "2289839",
    "end": "2295760"
  },
  {
    "text": "YouTube we are intimately familiar with all the different steps that's why I enumerated very well and it is",
    "start": "2295760",
    "end": "2301359"
  },
  {
    "text": "asynchronous because you can go about doing the other things while it's working on you know the long running",
    "start": "2301359",
    "end": "2306640"
  },
  {
    "text": "tasks for instance and somebody coded up some nice orchestration behind that sucker to keep that thing running yeah",
    "start": "2306640",
    "end": "2312720"
  },
  {
    "text": "and uh Google has the engineers to code up reliable orchestration flows even in",
    "start": "2312720",
    "end": "2318960"
  },
  {
    "text": "a way that you know they're nicely observable you can you can reconnect uh",
    "start": "2318960",
    "end": "2324160"
  },
  {
    "text": "to to them they you know they're efficient they know how to parallelize step and synchronize steps and so on",
    "start": "2324160",
    "end": "2329920"
  },
  {
    "text": "it's a much harder thing to do for many companies who don't hire the same type",
    "start": "2329920",
    "end": "2335520"
  },
  {
    "text": "of engineers as Google does and I think I think for those reason it actually makes these type of things much more",
    "start": "2335520",
    "end": "2341400"
  },
  {
    "text": "achievable than if you try to to embark on that on that journey without even",
    "start": "2341400",
    "end": "2348320"
  },
  {
    "start": "2347000",
    "end": "2557000"
  },
  {
    "text": "when you were sharing how it worked early on you were saying that it seemed at least from my perspective it seemed",
    "start": "2348320",
    "end": "2353359"
  },
  {
    "text": "like it was user born every time every new application every new scenario every new job every new you know what have you",
    "start": "2353359",
    "end": "2361280"
  },
  {
    "text": "maybe even in your boring scenario where you were sort of focused for a bit there you know you keep recreating this uh",
    "start": "2361280",
    "end": "2369480"
  },
  {
    "text": "durable invocation world over and over and over again and why not turn it into",
    "start": "2369480",
    "end": "2377280"
  },
  {
    "text": "like you have done here with a server and a client and SDKs for different languages and a flow that every",
    "start": "2377280",
    "end": "2383280"
  },
  {
    "text": "developer can grab is that kind of where what landed you to this point here was",
    "start": "2383280",
    "end": "2388560"
  },
  {
    "text": "that frustration of the repetition and repeating and rebuilding every single time you build an application i think",
    "start": "2388560",
    "end": "2394640"
  },
  {
    "text": "that's a great way of putting it yes um the I would say the number one alternative to restate that people do or",
    "start": "2394640",
    "end": "2401040"
  },
  {
    "text": "use is roll your own absolutely and it's it's a very repetitive process and and",
    "start": "2401040",
    "end": "2406079"
  },
  {
    "text": "most of the time I would say folks don't realize really the all the edge cases",
    "start": "2406079",
    "end": "2412480"
  },
  {
    "text": "that existed what they do they just maybe don't even solve them so the",
    "start": "2412480",
    "end": "2417520"
  },
  {
    "text": "there's this there it's basically halfbaked roll your own and it's yeah",
    "start": "2417520",
    "end": "2424800"
  },
  {
    "text": "every time again and again and it's it's very often um it's very often very similar problems that you're solving",
    "start": "2424800",
    "end": "2431119"
  },
  {
    "text": "like let's say you're taking a message cue to say an action that I trigger should run asynchronously and it should",
    "start": "2431119",
    "end": "2436880"
  },
  {
    "text": "you know chat have reliable retro and then I'm I'm pulling in another store like reddis or or other key value store",
    "start": "2436880",
    "end": "2444079"
  },
  {
    "text": "to to record different steps then I might be pulling in something like",
    "start": "2444079",
    "end": "2449200"
  },
  {
    "text": "zookeeper orcd to place a lock on certain operations so no they don't happen concurrently like there shouldn't",
    "start": "2449200",
    "end": "2454880"
  },
  {
    "text": "be updating certain I don't know should a retry shouldn't work on the same",
    "start": "2454880",
    "end": "2460560"
  },
  {
    "text": "payment ID um if if it's if the log is still being held by the original process or so and",
    "start": "2460560",
    "end": "2466480"
  },
  {
    "text": "then you're trying to sort of going back to item potency trying to",
    "start": "2466480",
    "end": "2471920"
  },
  {
    "text": "make an update to another system and understand how do how do you actually anchor the idea of that processing",
    "start": "2471920",
    "end": "2477359"
  },
  {
    "text": "forward into the update to that other system like and you're recreating exactly you're recreating that type of pattern over and over and over again and",
    "start": "2477359",
    "end": "2485359"
  },
  {
    "text": "I think this is where in a way workflow engines were originally born if you wish like enterprise workflow engines we try",
    "start": "2485359",
    "end": "2490880"
  },
  {
    "text": "to say okay let's try to define a flow where um where we can have steps",
    "start": "2490880",
    "end": "2496160"
  },
  {
    "text": "following you know a a certain predefined control flow graph and we have we have the the workflow engine",
    "start": "2496160",
    "end": "2502240"
  },
  {
    "text": "giving you the guarantees that step B that follows step A really only starts",
    "start": "2502240",
    "end": "2507920"
  },
  {
    "text": "after step A is done and step A is transactionally persisted before B starts and so on they're they tend to be",
    "start": "2507920",
    "end": "2513040"
  },
  {
    "text": "extremely heavyweight and flexible yeah it's just not not they break all the",
    "start": "2513040",
    "end": "2518800"
  },
  {
    "text": "tools and and everything um when you want to interact with them and what what",
    "start": "2518800",
    "end": "2523839"
  },
  {
    "text": "Reese does and the durable execution space that what they're trying to do in general is kind of bring this level of",
    "start": "2523839",
    "end": "2530240"
  },
  {
    "text": "of of guarantees in in a very very lightweight way into like almost arbitrary programs because it's just",
    "start": "2530240",
    "end": "2536640"
  },
  {
    "text": "such a useful such useful power to have to kind of define these these uh durable",
    "start": "2536640",
    "end": "2542359"
  },
  {
    "text": "steps especially if you don't have to like branch out in a different lang like different domain specific language or",
    "start": "2542359",
    "end": "2548160"
  },
  {
    "text": "graphical way to define them if you could just like write your regular code but have it treated have it executed",
    "start": "2548160",
    "end": "2553440"
  },
  {
    "text": "with the same sort of guarantees as if it was an enterprise workflow it seems like you might have a large education",
    "start": "2553440",
    "end": "2559920"
  },
  {
    "start": "2557000",
    "end": "2815000"
  },
  {
    "text": "challenge in front of you because there's so much thought that has to go into this kind of architecture i think",
    "start": "2559920",
    "end": "2566960"
  },
  {
    "text": "the fact that your largest competitor is roll your own means most people don't know like like we kind of all discover",
    "start": "2566960",
    "end": "2574160"
  },
  {
    "text": "this pattern slowly over time inside of our own daily work and so I'm just curious like how you think you can",
    "start": "2574160",
    "end": "2581839"
  },
  {
    "text": "attack that or are there other people like is there a a common thread or",
    "start": "2581839",
    "end": "2589440"
  },
  {
    "text": "movement that you could attach to or create in which people are like yeah",
    "start": "2589440",
    "end": "2594560"
  },
  {
    "text": "here's this new style you I thought of this because you mentioned like workflow",
    "start": "2594560",
    "end": "2599599"
  },
  {
    "text": "and I think that's sort of in the wheelhouse or in the ballpark of what",
    "start": "2599599",
    "end": "2606400"
  },
  {
    "text": "restate is uh message Q i mean what is there like a simple idea or concept",
    "start": "2606400",
    "end": "2613800"
  },
  {
    "text": "pattern of which restate could be one or maybe restate is the the brand but have",
    "start": "2613800",
    "end": "2618880"
  },
  {
    "text": "you thought through this because you have a marketing problem here or a challenge I should call it yeah so um I",
    "start": "2618880",
    "end": "2624640"
  },
  {
    "text": "think I think that is that is very true in many ways the okay there's like lots",
    "start": "2624640",
    "end": "2630319"
  },
  {
    "text": "of layers of answers to that um I would say in the simplest way you can actually",
    "start": "2630319",
    "end": "2635680"
  },
  {
    "text": "explain it reasonably simple if you just start from you know it's stateful durable functions which have which have",
    "start": "2635680",
    "end": "2642800"
  },
  {
    "text": "guarantees that they execute they run to the end they able to record steps they're able to basically do these sort",
    "start": "2642800",
    "end": "2649760"
  },
  {
    "text": "of asynchronous building blocks that you have in in in you know in your usual programs uh calling other functions",
    "start": "2649760",
    "end": "2656079"
  },
  {
    "text": "creating promises resolving them updating state making calls and so on just in a in a in a fine grade precision",
    "start": "2656079",
    "end": "2661760"
  },
  {
    "text": "consistent way that knows how to recover this is sort of the the basic building block is stateful durable function now",
    "start": "2661760",
    "end": "2667839"
  },
  {
    "text": "the harder thing is actually in a way making people realize that they should be using something like this rather than",
    "start": "2667839",
    "end": "2673920"
  },
  {
    "text": "roll your own um it's it's not uncommon that uh it's mostly on the on the junior",
    "start": "2673920",
    "end": "2679760"
  },
  {
    "text": "side of engineers that that you talk to them they say like I don't get it like I know how to write a retry loop like what",
    "start": "2679760",
    "end": "2685839"
  },
  {
    "text": "what is this and then you know uh this there it's it's a journey from there the interestingly I think the most",
    "start": "2685839",
    "end": "2692319"
  },
  {
    "text": "enthusiastic audience is often the the engineers that have been",
    "start": "2692319",
    "end": "2697599"
  },
  {
    "text": "burnt before that that know okay I know how to build distributed systems but holy cow I know how hard it is and like",
    "start": "2697599",
    "end": "2703520"
  },
  {
    "text": "even though I'm really good at this I tend to overlook still two out of 10 corner cases and I get paged Sunday night or so right those those are the",
    "start": "2703520",
    "end": "2710480"
  },
  {
    "text": "ones that that really that often go like yes I know why I want to use this because I know how much time I would",
    "start": "2710480",
    "end": "2716240"
  },
  {
    "text": "otherwise spend on solving all these things if I have to do it myself right um so I guess I guess that's right like",
    "start": "2716240",
    "end": "2722319"
  },
  {
    "text": "there's definitely an an education challenge there and I would say a very a very sort of like in your face example",
    "start": "2722319",
    "end": "2728480"
  },
  {
    "text": "of this is if we look at the AI space and agents uh right now um I think every AI company is like reinventing workflows",
    "start": "2728480",
    "end": "2735839"
  },
  {
    "text": "in the context of like agents and agent agentic workflows like everybody's building and I would say slowly",
    "start": "2735839",
    "end": "2742960"
  },
  {
    "text": "rediscovering like all those things when there's been an entire sort of industry that has been working on this for like",
    "start": "2742960",
    "end": "2749200"
  },
  {
    "text": "wait I mean we've been working on this for two years but if you ask IBM they have been working on this for probably 30 years or something like this um I",
    "start": "2749200",
    "end": "2755839"
  },
  {
    "text": "mean in a very different way right but but still and I feel like the all the AI companies are kind of like bit by bit",
    "start": "2755839",
    "end": "2761839"
  },
  {
    "text": "rediscovering this and like when you when you start talking to them I think some of them understand okay even where",
    "start": "2761839",
    "end": "2769599"
  },
  {
    "text": "if you if you few building agents if you deploy them how how they ultimately end",
    "start": "2769599",
    "end": "2775520"
  },
  {
    "text": "up having to solve these problems again like imagine you have a chat that is your flight booking there's like there is something you have to do to make it",
    "start": "2775520",
    "end": "2782000"
  },
  {
    "text": "not rebook your flight twice if they the agent just crashes on the wrong point um",
    "start": "2782000",
    "end": "2787920"
  },
  {
    "text": "they they're ultimately going to the same same problems they actually have a perfect foundation to build on with these systems being built today but yes",
    "start": "2787920",
    "end": "2794880"
  },
  {
    "text": "I don't I think they're just this they're not aware yet right that this is is something that they'll run eventually",
    "start": "2794880",
    "end": "2800880"
  },
  {
    "text": "into so yeah the I think you can see this in many places that the industry is",
    "start": "2800880",
    "end": "2807200"
  },
  {
    "text": "rediscovering uh work in different sort of like sub fields that other fields have been done just because uh you know",
    "start": "2807200",
    "end": "2813599"
  },
  {
    "text": "information flow isn't perfect minor off-topic rant why are all of the AI",
    "start": "2813599",
    "end": "2819000"
  },
  {
    "start": "2815000",
    "end": "2900000"
  },
  {
    "text": "agent like hello world examples why are they all booking flights for us it's",
    "start": "2819000",
    "end": "2824560"
  },
  {
    "text": "like do you want some undeterministic halfbaked language model",
    "start": "2824560",
    "end": "2831119"
  },
  {
    "text": "booking your flight that's like a very difficult thing to roll back you know like I just don't that's going to be one",
    "start": "2831119",
    "end": "2836640"
  },
  {
    "text": "of my last human out of the loop like AI agent moves like can we start with something a little bit less critical i",
    "start": "2836640",
    "end": "2842640"
  },
  {
    "text": "don't know about you Adam but I get like serious heart palpitations thinking that someone's going to book a flight for me and you don't get heart palpitations",
    "start": "2842640",
    "end": "2848720"
  },
  {
    "text": "Jared you're a pretty chill dude i am i'm pretty chill but I just feel like gosh you know how hard it is to roll back a flight i mean come on h Yeah well",
    "start": "2848720",
    "end": "2856240"
  },
  {
    "text": "I think it depends i mean I don't mind i think it's the human dream to have",
    "start": "2856240",
    "end": "2862880"
  },
  {
    "text": "somebody or something take that kind of action right that specific action like book me a",
    "start": "2862880",
    "end": "2869359"
  },
  {
    "text": "flight let's simplify how about you appointment give me a Yeah exactly a restaurant reservation right you know",
    "start": "2869359",
    "end": "2875920"
  },
  {
    "text": "because worst case scenario I ghost it and feel bad but if I don't show up for my flight I lose my 400 bucks or",
    "start": "2875920",
    "end": "2881839"
  },
  {
    "text": "whatever you know maybe this is so much accumulated pain from people waiting in the like call",
    "start": "2881839",
    "end": "2887200"
  },
  {
    "text": "centers for airlines that I know all these companies feel like oh that's a perfect example for shed but like people",
    "start": "2887200",
    "end": "2893599"
  },
  {
    "text": "will want to use it because they will not want a single other minute to spend on the phone with these callers yeah",
    "start": "2893599",
    "end": "2899680"
  },
  {
    "text": "perhaps uh I'm going to go out on a limb to bring us back into uh somewhat left the center but basically center please",
    "start": "2899680",
    "end": "2906400"
  },
  {
    "start": "2900000",
    "end": "3610000"
  },
  {
    "text": "do and I must say that this is the year 2025 is the year Oh really where durable",
    "start": "2906400",
    "end": "2912480"
  },
  {
    "text": "execution of things is more important than it ever has been it's always been",
    "start": "2912480",
    "end": "2917839"
  },
  {
    "text": "important but more and more people are leveraging APIs they're building out this agentic world you keep hearing",
    "start": "2917839",
    "end": "2923680"
  },
  {
    "text": "about right and I think you keep having more and more people program against brittle APIs brittle latency of networks",
    "start": "2923680",
    "end": "2931280"
  },
  {
    "text": "databases etc and you need that promise so I'm going to say that this is the year where the marketing problem that",
    "start": "2931280",
    "end": "2938480"
  },
  {
    "text": "you have that Jared alluded to is still there i'm sorry but it's less and I'll",
    "start": "2938480",
    "end": "2943920"
  },
  {
    "text": "tell you why it's less because Render I just talked to HR Goell uh CEO founder",
    "start": "2943920",
    "end": "2949119"
  },
  {
    "text": "of of Render and this is on their radar so they're building an application for developers we did a whole show on this",
    "start": "2949119",
    "end": "2955920"
  },
  {
    "text": "and during that conversation he mentioned a brand at least I think I did actually uh I mentioned a brand that",
    "start": "2955920",
    "end": "2962400"
  },
  {
    "text": "sponsors us not this show but has been and I think still is a sponsor into Q2 and maybe Q3 and that brand is Temporal",
    "start": "2962400",
    "end": "2969760"
  },
  {
    "text": "so I'm going to ask you to to sort of help me understand the difference between temporal",
    "start": "2969760",
    "end": "2977400"
  },
  {
    "text": "natsia restate your open source flavors in your cloud what render may be doing",
    "start": "2977400",
    "end": "2983680"
  },
  {
    "text": "for application developers it seems like this durable execution retry model",
    "start": "2983680",
    "end": "2989680"
  },
  {
    "text": "doesn't live in the language itself it's something you have to build every single time that sucks and it seems like more",
    "start": "2989680",
    "end": "2995760"
  },
  {
    "text": "and more people are trying to solve it so break down all those for me temporal nats and nadia yourself what Render's",
    "start": "2995760",
    "end": "3002480"
  },
  {
    "text": "doing and anything else that may be doing I mean flink but you know that's a different world",
    "start": "3002480",
    "end": "3008800"
  },
  {
    "text": "there's another one called uh resonate you know that one Stefan do you know",
    "start": "3008800",
    "end": "3014000"
  },
  {
    "text": "yeah I know resonate I know the guy behind it um it's pretty new but anyways there is definitely like you said",
    "start": "3014000",
    "end": "3020160"
  },
  {
    "text": "there's other people trying to solve this problem yes exactly um I think this starts from from the same observation",
    "start": "3020160",
    "end": "3026319"
  },
  {
    "text": "like the state of how things are built if you don't rely on one of those tools it's like it's almost un unsustainable",
    "start": "3026319",
    "end": "3034400"
  },
  {
    "text": "it's hard to build it's hard to hand it over to another person there's often so much implicit and and brittle",
    "start": "3034400",
    "end": "3040640"
  },
  {
    "text": "assumptions and how this works so folks have been trying to come up with solutions from um from the ones you",
    "start": "3040640",
    "end": "3048520"
  },
  {
    "text": "mentioned temporal is absolutely the closest maybe yeah between her top and",
    "start": "3048520",
    "end": "3054079"
  },
  {
    "text": "resonate i would say those are those are the closest to uh to restate so I would",
    "start": "3054079",
    "end": "3059200"
  },
  {
    "text": "I would actually focus on those i would say uh nuts goes more in the in the direction of like flexible persistent",
    "start": "3059200",
    "end": "3067440"
  },
  {
    "text": "messaging together with like some state management blended in and so on but you can you can already see like folks are",
    "start": "3067440",
    "end": "3073200"
  },
  {
    "text": "trying to just like figure out what are the dis different aspects we need when building applications and sort of like",
    "start": "3073200",
    "end": "3078880"
  },
  {
    "text": "make them tight work together with each other in a tighter way and if you wish I think this is the this is for for me",
    "start": "3078880",
    "end": "3085920"
  },
  {
    "text": "reset is there's a couple of things that that make it unique but I would say two",
    "start": "3085920",
    "end": "3091359"
  },
  {
    "text": "things stand out first I would say the model goes a bit further than than every other system so restate is to if you",
    "start": "3091359",
    "end": "3098800"
  },
  {
    "text": "look at temporal temporal is workflows that's that's really what they implement workflows and activities so it's this uh",
    "start": "3098800",
    "end": "3105440"
  },
  {
    "text": "it's like durable steps and then you know with with sleeps in there and signals and so on so the like the",
    "start": "3105440",
    "end": "3112240"
  },
  {
    "text": "full-fledged workflows it's it's actually fairly flexible if you're if you're a power user and know how to use that reset goes beyond that by saying",
    "start": "3112240",
    "end": "3119119"
  },
  {
    "text": "we're not just looking at at at a workflow at like one durable execution",
    "start": "3119119",
    "end": "3124240"
  },
  {
    "text": "of of of multiple persistent steps but we're we're sort of generalizing this almost what temporal does for workflow",
    "start": "3124240",
    "end": "3130319"
  },
  {
    "text": "we're we're trying to do this for a distributed service architecture consisting of like multiple stateful",
    "start": "3130319",
    "end": "3136079"
  },
  {
    "text": "services that interact with each other and that um you can see this uh from the fact that reset has like uh persistent",
    "start": "3136079",
    "end": "3144640"
  },
  {
    "text": "messaging and RPC um built in it has state built in that lives across a",
    "start": "3144640",
    "end": "3151839"
  },
  {
    "text": "single durable execution so uh again in pole terms the workflow is done the",
    "start": "3151839",
    "end": "3157200"
  },
  {
    "text": "workflow is done like you know it's sort of a self-contained unit within the workflow across the durable steps it",
    "start": "3157200",
    "end": "3162960"
  },
  {
    "text": "remembers context but once the workflow is done it's done and and then reset is a stateful model where um you could",
    "start": "3162960",
    "end": "3168559"
  },
  {
    "text": "almost think of the activities are like decoupled from the workflow the activities can be stateful services and entities that live for a very long time",
    "start": "3168559",
    "end": "3174960"
  },
  {
    "text": "and then you have durable functions that interact with them it's it's a much more flexible and powerful model to build um",
    "start": "3174960",
    "end": "3181520"
  },
  {
    "text": "things like distributed state machines we have folks that actually start ditch certain elements of databases to put their state and restate because that is",
    "start": "3181520",
    "end": "3188240"
  },
  {
    "text": "transactionally integrated then with the durable steps and out of out of the box consistent so I'd say number one sort of",
    "start": "3188240",
    "end": "3196720"
  },
  {
    "text": "think of the temporal model but generalized into distributed services to include long lift state include uh",
    "start": "3196720",
    "end": "3204160"
  },
  {
    "text": "communication like between microservices it it makes for for like more powerful more flexible box that's the one thing",
    "start": "3204160",
    "end": "3211040"
  },
  {
    "text": "the second thing goes a bit back to to what I said earlier when we started this project we set out with with the",
    "start": "3211040",
    "end": "3219480"
  },
  {
    "text": "following you can implement durable execution i think just it's not terribly",
    "start": "3219480",
    "end": "3225280"
  },
  {
    "text": "complicated to implement a durable execution API on top of a database if you make it very simple um you know have",
    "start": "3225280",
    "end": "3232319"
  },
  {
    "text": "a step write it to a database you know on replay you just like query the database what are the steps that are already in there it has a lot of holes",
    "start": "3232319",
    "end": "3239680"
  },
  {
    "text": "but you know like it it gets you started but then okay let's talk about the holes right like all of a sudden you you have",
    "start": "3239680",
    "end": "3245760"
  },
  {
    "text": "a problem with like longunning processes that spend for a long time scaling this to zero you have a problem that you have",
    "start": "3245760",
    "end": "3252400"
  },
  {
    "text": "to worry Then in your library you have to implement your own distributed locking uh and and mutex with you know",
    "start": "3252400",
    "end": "3257760"
  },
  {
    "text": "in case you have time modes and zombie processes and so on and um so when you when you try to make it a really good",
    "start": "3257760",
    "end": "3264160"
  },
  {
    "text": "experience you quickly come to the point okay we we actually have to go a lot further than building a library on top of database then you start you know",
    "start": "3264160",
    "end": "3271280"
  },
  {
    "text": "maybe we're building a big orchestration server that still uses a database in the background and then then you really come",
    "start": "3271280",
    "end": "3279119"
  },
  {
    "text": "to the point of if you want to make durable execution so lightweight that you can use it almost pervasively how",
    "start": "3279119",
    "end": "3285359"
  },
  {
    "text": "how low latency do you have to make these steps under load what is the best you can actually do if you deploy this",
    "start": "3285359",
    "end": "3290800"
  },
  {
    "text": "across multiple data centers if you deploy this across multiple regions and then you come to the point that you know",
    "start": "3290800",
    "end": "3296160"
  },
  {
    "text": "distributed database across multiple data centers regions does a lot of coordination back and forth because the",
    "start": "3296160",
    "end": "3301920"
  },
  {
    "text": "database model it needs to you know guarantee in integrity it does a lot of",
    "start": "3301920",
    "end": "3307200"
  },
  {
    "text": "like transaction timestamping back and forth and round trips on the other hand if you build this on a on a log on a",
    "start": "3307200",
    "end": "3313040"
  },
  {
    "text": "like on a like optimized transaction log you can get as as good as make one",
    "start": "3313040",
    "end": "3318160"
  },
  {
    "text": "flexible quorum right across your across your different data centers and you have",
    "start": "3318160",
    "end": "3323359"
  },
  {
    "text": "the step persisted and you can continue right so reset's kind of going to the point where saying if we want to make",
    "start": "3323359",
    "end": "3329440"
  },
  {
    "text": "this extremely fast so low latency that it has you can actually start to use it",
    "start": "3329440",
    "end": "3335599"
  },
  {
    "text": "in in places where you didn't think you could use durable execution before because it becomes so cheap so low",
    "start": "3335599",
    "end": "3340800"
  },
  {
    "text": "latency how would you have to build a system to do that and that's that that's where we where we went you'd have to",
    "start": "3340800",
    "end": "3346640"
  },
  {
    "text": "build it from first principle starting with a low latency replicated log on top of that build it like end to end event",
    "start": "3346640",
    "end": "3354640"
  },
  {
    "text": "driven so you don't do like batch queries on a database but you do you do",
    "start": "3354640",
    "end": "3360319"
  },
  {
    "text": "the the most low latency thing you can do you do f fine grand uh messaging and",
    "start": "3360319",
    "end": "3365760"
  },
  {
    "text": "event pipelines and and you basically layer from there and then the other",
    "start": "3365760",
    "end": "3371200"
  },
  {
    "text": "thing is like okay let's not just make it really low latency but at the same time it has also to be an extremely lightweight thing because uh somebody",
    "start": "3371200",
    "end": "3378079"
  },
  {
    "text": "who you know we just said what's the simplest use case like when should you actually start looking at reset only when you have a distributed ledger to",
    "start": "3378079",
    "end": "3384000"
  },
  {
    "text": "build or do you want to do this if the only thing you want to do is like put your asynchronous email sending in the background but reliable so the next",
    "start": "3384000",
    "end": "3390799"
  },
  {
    "text": "thing is how do we actually make this extremely lightweight what's the most lightweight package we can give that thing and the most lightweight package",
    "start": "3390799",
    "end": "3396559"
  },
  {
    "text": "is single binary zero dependencies just download that thing it",
    "start": "3396559",
    "end": "3402160"
  },
  {
    "text": "has its log built in it's uh orchestration layer its metadata consensus module everything in a single",
    "start": "3402160",
    "end": "3407839"
  },
  {
    "text": "binary just download one command starts in a second and you're done like there's literally nothing else to do and then",
    "start": "3407839",
    "end": "3412880"
  },
  {
    "text": "you can take this thing actually and start scaling out just by adding more nodes um if you want to migrate it let",
    "start": "3412880",
    "end": "3418240"
  },
  {
    "text": "it take a snapshot to an object store start deploying the data send users resume go from there so what's really the what's really the the",
    "start": "3418240",
    "end": "3425319"
  },
  {
    "text": "experience that durable execution needs if you want to be able to take it",
    "start": "3425319",
    "end": "3431319"
  },
  {
    "text": "from from the point that it's so lightweight you almost want to embed it with almost any application to this",
    "start": "3431319",
    "end": "3436880"
  },
  {
    "text": "thing powers like distributed multi-reional payment processing what's the architecture need for that so that's",
    "start": "3436880",
    "end": "3442480"
  },
  {
    "text": "where we what we started building with reset so the second thing that was a very long way of saying the second thing",
    "start": "3442480",
    "end": "3447920"
  },
  {
    "text": "is reset is really sort of a durable executions deck built from first",
    "start": "3447920",
    "end": "3453079"
  },
  {
    "text": "principles for low latency serverless operations um high throughput and just",
    "start": "3453079",
    "end": "3459240"
  },
  {
    "text": "like really really nice nice operations from the small to the large scale rather",
    "start": "3459240",
    "end": "3464799"
  },
  {
    "text": "than saying let's start with whatever database we have I think in temporal's case when I came out of Uber they",
    "start": "3464799",
    "end": "3470160"
  },
  {
    "text": "started with Cassandra and say let's build a server that sort of like sits on top of Cassandra and like stores all all",
    "start": "3470160",
    "end": "3476880"
  },
  {
    "text": "the state that it needs for coordination in there and then you know you have like different pieces that you need to scale",
    "start": "3476880",
    "end": "3482160"
  },
  {
    "text": "you have a database that does actually a lot more than you really need for durable execution but on the way also",
    "start": "3482160",
    "end": "3488160"
  },
  {
    "text": "sort of sacrifices the the potential for optimizing",
    "start": "3488160",
    "end": "3493359"
  },
  {
    "text": "mhm those are the differences I would I would say gotcha built for speed",
    "start": "3493359",
    "end": "3498480"
  },
  {
    "text": "basically is what you're saying built to be lightweight scale down yeah scale down scale up and yeah lightweight",
    "start": "3498480",
    "end": "3506000"
  },
  {
    "text": "simple to operate i usually don't don't like to do this i usually like to talk more about like what makes reset great",
    "start": "3506000",
    "end": "3512640"
  },
  {
    "text": "than what makes other systems not Adam puts you on the spot well you know I think it's important well if I'm going",
    "start": "3512640",
    "end": "3517760"
  },
  {
    "text": "to say if I'm going to go on a limb and say this is the year then you have to follow me okay you have to follow me and",
    "start": "3517760",
    "end": "3523440"
  },
  {
    "text": "you have to answer my questions because I'm I'm reducing your marketing churn for you uh just by nature",
    "start": "3523440",
    "end": "3529559"
  },
  {
    "text": "so I'll just say if you look at the way reset is built and it allows you",
    "start": "3529559",
    "end": "3535799"
  },
  {
    "text": "to to get get started then scale from there if you say okay I care about",
    "start": "3535799",
    "end": "3542799"
  },
  {
    "text": "self-hosting this because what I what I pipe through this is like critical data it's not something I trust what some",
    "start": "3542799",
    "end": "3548720"
  },
  {
    "text": "managed cloud it really has to run in my account so I think the experience you",
    "start": "3548720",
    "end": "3554319"
  },
  {
    "text": "get out of reset is vastly different than what you get out that you get from many other systems and and that's because it's just been this right this",
    "start": "3554319",
    "end": "3562480"
  },
  {
    "text": "very thoughtfully crafted stack from the very beginning and not sort of",
    "start": "3562480",
    "end": "3568160"
  },
  {
    "text": "incrementally evolved from yeah from this database and then that server and yeah right if you're directly comparing",
    "start": "3568160",
    "end": "3573920"
  },
  {
    "text": "to temporal which is an incumbent which was spun off from as you mentioned Uber and has different principles for which",
    "start": "3573920",
    "end": "3580400"
  },
  {
    "text": "it built on you went back to first principles and said \"Okay if you want to get to the point where you can put this in almost everywhere you want to you",
    "start": "3580400",
    "end": "3586799"
  },
  {
    "text": "have to be low latency you have to be fast you have to these first principles you built on have to be there.\" Yeah and",
    "start": "3586799",
    "end": "3593760"
  },
  {
    "text": "you can't have the requirement to first install a distributed database before you get started",
    "start": "3593760",
    "end": "3599599"
  },
  {
    "text": "what is the requirement so that's where I was going to go too so it seems like it's client which is an SDK essentially",
    "start": "3599599",
    "end": "3605599"
  },
  {
    "text": "inside your codebase making calls to a server what are the what is the",
    "start": "3605599",
    "end": "3610880"
  },
  {
    "start": "3610000",
    "end": "3879000"
  },
  {
    "text": "architecture the infrastructure required so um the the reset the reset server",
    "start": "3610880",
    "end": "3617920"
  },
  {
    "text": "which is where the like low latency consensus log lives and the thing that",
    "start": "3617920",
    "end": "3623040"
  },
  {
    "text": "basically becomes the reverb proxy for for your service that thing has not really any requirement if you",
    "start": "3623040",
    "end": "3631440"
  },
  {
    "text": "want to get started it's a self-contained binary it embeds uh its own distributed log rocb storage engine",
    "start": "3631440",
    "end": "3637599"
  },
  {
    "text": "its own consensus engine um the only thing if you want to run it like as a single node is you need to give it a persistent disk it's almost that like",
    "start": "3637599",
    "end": "3645680"
  },
  {
    "text": "um let's say if you would want to run like SQL light or or posgress it's a little bit like let's go back to the",
    "start": "3645680",
    "end": "3651119"
  },
  {
    "text": "good old days where you download one binary i just like start it and it's actually running it's actually good like",
    "start": "3651119",
    "end": "3656400"
  },
  {
    "text": "there's nothing else you need to do um but then at the same point um it's it's also uh it's also able to go from that",
    "start": "3656400",
    "end": "3664400"
  },
  {
    "text": "single process that you start with a single binary to actually cluster up um and and and built a distributed um a",
    "start": "3664400",
    "end": "3672240"
  },
  {
    "text": "distributed cluster and there's a very um interesting architecture in there in the we built it basically for the cloud",
    "start": "3672240",
    "end": "3678880"
  },
  {
    "text": "native age where you would say um any system that you that you run at scale should not really store its own data but",
    "start": "3678880",
    "end": "3685599"
  },
  {
    "text": "it should just you make use of object stores for as much as it can because S3 and these these systems they're these",
    "start": "3685599",
    "end": "3692000"
  },
  {
    "text": "like bottomless insanely durable and insanely cheap storage systems so make",
    "start": "3692000",
    "end": "3697760"
  },
  {
    "text": "use of that as much as you can to put a lot of your uh a large a large chunk of your data so that that means while you",
    "start": "3697760",
    "end": "3705359"
  },
  {
    "text": "may be working with the data on your individual nodes you're not really required to safeguard it on the nodes because you can recover it uh from from",
    "start": "3705359",
    "end": "3712640"
  },
  {
    "text": "S3 or an object store right what restate then does is it it actually implements its log in such a way that it",
    "start": "3712640",
    "end": "3719200"
  },
  {
    "text": "only uses this for to really give you the very low latencies for the durable steps and then um in the background it",
    "start": "3719200",
    "end": "3727359"
  },
  {
    "text": "incrementally moves moves data to S3 which makes the individual nodes like",
    "start": "3727359",
    "end": "3732640"
  },
  {
    "text": "fairly lightweight to operate mhm so um to go go back to your question",
    "start": "3732640",
    "end": "3738559"
  },
  {
    "text": "like what are really the requirements when you want to run it if you want to run run it on a single node none or a",
    "start": "3738559",
    "end": "3743760"
  },
  {
    "text": "persistent volume if you actually want to run it like in production if you want to run it in a distributed setup give it",
    "start": "3743760",
    "end": "3749520"
  },
  {
    "text": "an S3 bucket those are the requirements um that's the if you want to if you want to use it",
    "start": "3749520",
    "end": "3756720"
  },
  {
    "text": "from your code the requirement in your code is to use the SDK and to to",
    "start": "3756720",
    "end": "3762680"
  },
  {
    "text": "basically create a reset entry point that reset can connect to and where it can use it sort of durable invocation",
    "start": "3762680",
    "end": "3768559"
  },
  {
    "text": "protocol that understands how to decode that this sort of entry point is is mimicking the the the popular frameworks",
    "start": "3768559",
    "end": "3775599"
  },
  {
    "text": "like you know relatively close to Express.js JS if you're talking in the JavaScript world in the Java world it",
    "start": "3775599",
    "end": "3782079"
  },
  {
    "text": "looks more like spring boot um and so on and then within an individual durable",
    "start": "3782079",
    "end": "3789280"
  },
  {
    "text": "function service handler um you need to to use the restate",
    "start": "3789280",
    "end": "3795119"
  },
  {
    "text": "context to say okay I want to run this step and record it as durable I want to create this as a durable promise for a",
    "start": "3795119",
    "end": "3801599"
  },
  {
    "text": "persistent call back or so but otherwise the structure of your code is very much",
    "start": "3801599",
    "end": "3806960"
  },
  {
    "text": "the same as it used to be So it's supposed to you know be as little",
    "start": "3806960",
    "end": "3812720"
  },
  {
    "text": "invasive or as little to get as little in the way of how you used to do things as it can just",
    "start": "3812720",
    "end": "3821039"
  },
  {
    "text": "sort of changing the paradigm as in because it has this fine durability for",
    "start": "3821039",
    "end": "3826240"
  },
  {
    "text": "these operations you can get rid of a lot of the sort of unhappy path code like",
    "start": "3826240",
    "end": "3832799"
  },
  {
    "text": "there's still cases you you need to treat but mostly you still need to treat sort of like persistent errors that come",
    "start": "3832799",
    "end": "3838799"
  },
  {
    "text": "from the application and where you say like okay you're making a call to an API where you're not authorized there's not really a way you can recover from this",
    "start": "3838799",
    "end": "3845440"
  },
  {
    "text": "it's trying to do something you're not supposed to um and you know handle this but don't worry about handling process",
    "start": "3845440",
    "end": "3850880"
  },
  {
    "text": "failures network failures uh rate limits where that that bounce you back",
    "start": "3850880",
    "end": "3856440"
  },
  {
    "text": "um don't don't worry about many classes of race conditions about you know like",
    "start": "3856440",
    "end": "3861760"
  },
  {
    "text": "the state being maintained in the database versus the logic that interacts with it in a function that can you know",
    "start": "3861760",
    "end": "3866960"
  },
  {
    "text": "where you don't know really did this go through or not just if you put the state at the reset handler it's just going to be consistent for you all of those all",
    "start": "3866960",
    "end": "3873760"
  },
  {
    "text": "of those things while keeping the structure of the code like close to what you used to",
    "start": "3873760",
    "end": "3879280"
  },
  {
    "start": "3879000",
    "end": "4126000"
  },
  {
    "text": "write so I made you talk about things you don't like to talk about except for maybe the architecture that seems kind of fun to you uh what is it that you do",
    "start": "3879280",
    "end": "3885680"
  },
  {
    "text": "like to talk about when it comes to defining and describing restate and why developers should consider it so now",
    "start": "3885680",
    "end": "3892160"
  },
  {
    "text": "what I don't like to talk about is competitors in the sense of I don't",
    "start": "3892160",
    "end": "3897359"
  },
  {
    "text": "want to say okay I don't like this about their competitor I don't like that about another competitor because number one",
    "start": "3897359",
    "end": "3902559"
  },
  {
    "text": "I'm not an expert in those systems i try to be honest uh I I look at them to the",
    "start": "3902559",
    "end": "3909839"
  },
  {
    "text": "extent I need to look at them but actually no deeper than I need to because I found this very liberating to",
    "start": "3909839",
    "end": "3916000"
  },
  {
    "text": "not have my like judgment sort of clouded or pre sort of pre-biased by having looked at something i feel if you",
    "start": "3916000",
    "end": "3922160"
  },
  {
    "text": "look for example if we look in in depth at how temporal would build their APIs and so on there's like a very good",
    "start": "3922160",
    "end": "3928079"
  },
  {
    "text": "chance that like oh yeah I get it this is why they did it and this makes sense and so on there's a good chance you'll probably do it the same way just because",
    "start": "3928079",
    "end": "3934079"
  },
  {
    "text": "you've sort of seen this example coded it understood it and you're preconditioned exactly if you don't do this cat is the cat alive or dead in the",
    "start": "3934079",
    "end": "3942720"
  },
  {
    "text": "box we won't know until we look maybe yeah but if you if you don't you actually have a chance to do something",
    "start": "3942720",
    "end": "3949200"
  },
  {
    "text": "to to come up with your own creativity possibly possibly do something better right so that's one one of the reasons why I don't like to talk about them so",
    "start": "3949200",
    "end": "3955359"
  },
  {
    "text": "much because I'm absolutely not an expert i look as much as I need to but I don't I usually don't try to go super deep into these systems um and the",
    "start": "3955359",
    "end": "3962640"
  },
  {
    "text": "second thing is it's I don't know there's so much I'd rather talk about",
    "start": "3962640",
    "end": "3967760"
  },
  {
    "text": "good things than than bad things it's like more of a it's more more fun to say nice things than bad things i I",
    "start": "3967760",
    "end": "3974000"
  },
  {
    "text": "understand your your discomfort than No definitely it's always uh it can be",
    "start": "3974000",
    "end": "3979599"
  },
  {
    "text": "tumultuous talking about competitors and what they do and what they don't do i think in the context and the reason why",
    "start": "3979599",
    "end": "3985520"
  },
  {
    "text": "the question is pertinent is because whenever like to Jared's point you have a marketing challenge ahead of you and I",
    "start": "3985520",
    "end": "3990960"
  },
  {
    "text": "think it's because the idea of durability and item potency is is mostly",
    "start": "3990960",
    "end": "3996440"
  },
  {
    "text": "wellnown not always easily implemented and there's options out there and so",
    "start": "3996440",
    "end": "4001839"
  },
  {
    "text": "when you when you sort of look at that challenge you think well what could someone reach for when would they reach",
    "start": "4001839",
    "end": "4007200"
  },
  {
    "text": "for it when does it make the most sense to reach for it and does it actually fit whenever they do try to implement it at",
    "start": "4007200",
    "end": "4013119"
  },
  {
    "text": "scale you know across different boundaries and whatnot and so I think when you compare that and you look at like wellnats nats is a whole different",
    "start": "4013119",
    "end": "4019280"
  },
  {
    "text": "scenario but they do similar things it's kind of funny because when you mentioned flink you're like well it does this in a",
    "start": "4019280",
    "end": "4024319"
  },
  {
    "text": "different way and then you got to restate because of your experience there and whatnot same thing with nats is like",
    "start": "4024319",
    "end": "4029760"
  },
  {
    "text": "nats does a lot of the similarity things where your broker messages there's a lot of retries there's a lot of key value",
    "start": "4029760",
    "end": "4035440"
  },
  {
    "text": "storing in there it's like a lot of that same principles but it's not about durability it's not about retries and",
    "start": "4035440",
    "end": "4041359"
  },
  {
    "text": "then you obviously have temporal you have render who's trying to or going to do something like that in the same",
    "start": "4041359",
    "end": "4046799"
  },
  {
    "text": "platform which I just had that conversation with honor and then you obviously have restate and how you went",
    "start": "4046799",
    "end": "4052559"
  },
  {
    "text": "back to first principles versus being spun out of something or what have you i",
    "start": "4052559",
    "end": "4057920"
  },
  {
    "text": "think from a a guide standpoint you're the most you're the you're the best suited guide in this conversation to",
    "start": "4057920",
    "end": "4064960"
  },
  {
    "text": "explore those cuz Jared and I can't do that for us yeah abs absolutely so the",
    "start": "4064960",
    "end": "4071280"
  },
  {
    "text": "if you um like if you want a a quick summary I I'm I'm very biased but I think",
    "start": "4071280",
    "end": "4078000"
  },
  {
    "text": "there's almost no reason to not use for reach for restate think it really is this solution from first principles with",
    "start": "4078000",
    "end": "4086000"
  },
  {
    "text": "amazing developer experience um with a a a very powerful abstraction",
    "start": "4086000",
    "end": "4093200"
  },
  {
    "text": "that allows you to build what you can build with workflows and signals but also so much more",
    "start": "4093200",
    "end": "4099199"
  },
  {
    "text": "and yeah just the just the journey from the beginning downloading the binary then you know migrating um getting out",
    "start": "4099199",
    "end": "4107278"
  },
  {
    "text": "is is an is an absolutely is is a is a great experience and the I mean the project is newer than",
    "start": "4107279",
    "end": "4114159"
  },
  {
    "text": "other projects so it will have a rough edge here or there but it's also moving moving very quick it's very good at",
    "start": "4114159",
    "end": "4119679"
  },
  {
    "text": "reacting to community feedback fast so I think it's a good it's a good choice it has made a lot of users happy so far",
    "start": "4119679",
    "end": "4126560"
  },
  {
    "start": "4126000",
    "end": "4805000"
  },
  {
    "text": "could we use maybe Jared an example from our application to consider how we would pick up restate i know we publish",
    "start": "4126560",
    "end": "4133838"
  },
  {
    "text": "episodes right we publish episodes we often will have scenarios where the slug isn't right we've had different",
    "start": "4133839",
    "end": "4139120"
  },
  {
    "text": "scenarios where we had to do things in prod to fix something you know it could be metadata and you've got different",
    "start": "4139120",
    "end": "4145040"
  },
  {
    "text": "checks before the publish process is there a way knowing what you know now about restate how you would consider",
    "start": "4145040",
    "end": "4152000"
  },
  {
    "text": "implementing something like that to safeguard publishing episodes uh in a in a durable way i've never",
    "start": "4152000",
    "end": "4159600"
  },
  {
    "text": "really used one of these tools before so it's difficult for me to say that um I",
    "start": "4159600",
    "end": "4164960"
  },
  {
    "text": "do know just at a technical level that I do not believe restate has an elixir SDK",
    "start": "4164960",
    "end": "4170400"
  },
  {
    "text": "so we might be out in the elixir one that that's a good ask um okay maybe I",
    "start": "4170400",
    "end": "4177600"
  },
  {
    "text": "can help you um like come come up with an example here let's say you're let's",
    "start": "4177600",
    "end": "4183520"
  },
  {
    "text": "say you're recording the episodes and then every time an episode is done let's",
    "start": "4183520",
    "end": "4189440"
  },
  {
    "text": "say you know let's let's do an AI thing here or so um so you're you're building your your your chat where you can chat",
    "start": "4189440",
    "end": "4196960"
  },
  {
    "text": "with an episode like okay you know show me or like like tell me when did they talk about this or tell me what episodes",
    "start": "4196960",
    "end": "4202159"
  },
  {
    "text": "talked about these topics and so on so what you're doing whenever um an whenever an episode is done you're",
    "start": "4202159",
    "end": "4208000"
  },
  {
    "text": "feeding it first through a model that that transcribes the audio then you're chunking it up um feed it through",
    "start": "4208000",
    "end": "4214560"
  },
  {
    "text": "embeddings model store it maybe in a vector database and then you have kind of a rack style um way of you know when",
    "start": "4214560",
    "end": "4222080"
  },
  {
    "text": "when a query comes create the embedding look up the similarity search in your in your vector database um feed it through",
    "start": "4222080",
    "end": "4228480"
  },
  {
    "text": "the model to yeah to get the to get the answer for for something like this if you let's say um let's say you started",
    "start": "4228480",
    "end": "4236320"
  },
  {
    "text": "just building the flow in let's say in a nojs application like in in a simpler way just said okay you know here's the",
    "start": "4236320",
    "end": "4242560"
  },
  {
    "text": "episode I I have a I have something like it gets uploaded let's say you're uploading into an S3 bucket and there's",
    "start": "4242560",
    "end": "4248000"
  },
  {
    "text": "like an event whenever something you know gets uploaded to this to this bucket you have an event that represents",
    "start": "4248000",
    "end": "4253040"
  },
  {
    "text": "this and then it starts like a NodeJS script or something like this and this script is of the type that you know if",
    "start": "4253040",
    "end": "4259040"
  },
  {
    "text": "it fails you know some somebody would have to restart it and now let's say you're you're you're trying to um to",
    "start": "4259040",
    "end": "4265679"
  },
  {
    "text": "implement that with restate i would say uh approach it the following way like the the first thing is get get a handle",
    "start": "4265679",
    "end": "4272960"
  },
  {
    "text": "of of reset itself like there's um uh there's a cloud service that you can use on our side which has uh which is like a",
    "start": "4272960",
    "end": "4279760"
  },
  {
    "text": "a free has a free tier either go there or just use use one of these ways to to run it",
    "start": "4279760",
    "end": "4287040"
  },
  {
    "text": "yourself on like a you know single machine with an EBS volume um then you have the server there then put your",
    "start": "4287040",
    "end": "4293280"
  },
  {
    "text": "Node.js script maybe you can actually put it on on something like Lambda ECS just like use a serverless option to",
    "start": "4293280",
    "end": "4298400"
  },
  {
    "text": "host this and then tell resate use the reset SDK to define the entry point and tell reset okay here's this service that",
    "start": "4298400",
    "end": "4305360"
  },
  {
    "text": "um that you now that you now should sort of durably manage so reset will then go",
    "start": "4305360",
    "end": "4310640"
  },
  {
    "text": "there and discover this and understand okay hey there's this uh you know like what what do we call it like video",
    "start": "4310640",
    "end": "4315679"
  },
  {
    "text": "transcriber or video um em better so service and then reset knows about this",
    "start": "4315679",
    "end": "4321199"
  },
  {
    "text": "um and then you can you would go to to your um to your Amazon uh console and",
    "start": "4321199",
    "end": "4327280"
  },
  {
    "text": "say okay for this type of event uh I want to create a web hook to restate so that it it it makes an invocation to to",
    "start": "4327280",
    "end": "4333520"
  },
  {
    "text": "reset and says okay this thing has been updated um you know the the kind of event that would previously call",
    "start": "4333520",
    "end": "4339520"
  },
  {
    "text": "directly your Node.js process or script um you know you actually make it an HTTP call to restate and reset will then call",
    "start": "4339520",
    "end": "4346320"
  },
  {
    "text": "your your process you've already gained one thing right away um you've you've",
    "start": "4346320",
    "end": "4351560"
  },
  {
    "text": "now basically have a reliable queue in front of it right like just just that if",
    "start": "4351560",
    "end": "4356880"
  },
  {
    "text": "you don't do anything special so when the web comes it's going to be acknowledged back and reset has this thinkings of your process if it crashes",
    "start": "4356880",
    "end": "4362880"
  },
  {
    "text": "it will retry this it will actually give you a nice observability like much more than you would get from like your average message queue about like",
    "start": "4362880",
    "end": "4368719"
  },
  {
    "text": "individual retries um configuration about about time offs and backoffs and",
    "start": "4368719",
    "end": "4374080"
  },
  {
    "text": "timelines and so on um as a next step you would actually then go into your script and say okay let's actually",
    "start": "4374080",
    "end": "4379360"
  },
  {
    "text": "identify the steps where if something fails in this step or after that step I don't want to go I want don't want it to",
    "start": "4379360",
    "end": "4385440"
  },
  {
    "text": "go back like let's say forking the process that does the uh that does the",
    "start": "4385440",
    "end": "4390960"
  },
  {
    "text": "transcribing um or um like calling the LLM to create",
    "start": "4390960",
    "end": "4396719"
  },
  {
    "text": "the embeddings you you use then the reset context that you get by using the",
    "start": "4396719",
    "end": "4401760"
  },
  {
    "text": "reset SDK and just say okay let me wrap these API calls just with reset or run",
    "start": "4401760",
    "end": "4406880"
  },
  {
    "text": "and that will that will capture the results of this durably and basically turn you've you've now turned it basically into a workflow um let's say",
    "start": "4406880",
    "end": "4415360"
  },
  {
    "text": "you want to do something like let's say you want to do something like",
    "start": "4415360",
    "end": "4422199"
  },
  {
    "text": "uh parallelize parallelize the different steps um you know maybe",
    "start": "4422199",
    "end": "4427960"
  },
  {
    "text": "just piping this one by one through this embeddings model is a little tricky thing so let's you want to fan out you",
    "start": "4427960",
    "end": "4433920"
  },
  {
    "text": "would then you could then go and say let me try and do the the exact same thing I do in a regular uh regular node",
    "start": "4433920",
    "end": "4439199"
  },
  {
    "text": "processor just make a bunch of function calls record like remember the promises sort of a way to promise all for those",
    "start": "4439199",
    "end": "4445679"
  },
  {
    "text": "in the end join the results put those in the database you can do exactly that in in your code um just again anchor this",
    "start": "4445679",
    "end": "4451600"
  },
  {
    "text": "in the reset context so you get like this durable parallelization durable sort of like scatter gather and so on",
    "start": "4451600",
    "end": "4457040"
  },
  {
    "text": "and so you would then incrementally sort of like rewrite your code to say okay let's actually make this step durable let's make that step durable and that",
    "start": "4457040",
    "end": "4463280"
  },
  {
    "text": "step durable say as a next thing um maybe one of your folks wants to approve it before it's really uh it really goes",
    "start": "4463280",
    "end": "4470239"
  },
  {
    "text": "goes goes out so um you then um possibly",
    "start": "4470239",
    "end": "4475520"
  },
  {
    "text": "let's say let's do that in the in the simplest most possible way we just create uh we create an like an awakable",
    "start": "4475520",
    "end": "4481600"
  },
  {
    "text": "or a durable promise in um in reset and say okay somebody needs to complete this",
    "start": "4481600",
    "end": "4486800"
  },
  {
    "text": "actively like send an event send make a make a an HTTP caller so to complete this and say okay this is approved go",
    "start": "4486800",
    "end": "4492800"
  },
  {
    "text": "through or no this is not approved like a board um you can then use for example",
    "start": "4492800",
    "end": "4498560"
  },
  {
    "text": "you could put the you could put the result in transcription just in restate state somebody could look at it from the UI and then say okay yeah I'm I'm making",
    "start": "4498560",
    "end": "4506159"
  },
  {
    "text": "a an making an API call here to prove this and and continues and so you can then incrementally build your process uh",
    "start": "4506159",
    "end": "4513199"
  },
  {
    "text": "rebuild your process into durable steps um as the next thing you could then for example take it and migrate it from a",
    "start": "4513199",
    "end": "4520080"
  },
  {
    "text": "longunning process to a lambda function because one of the nice things you have with durable execution is when it's",
    "start": "4520080",
    "end": "4526239"
  },
  {
    "text": "waiting for something else to happen it can actually just make this thing go away because with durable execution it",
    "start": "4526239",
    "end": "4532560"
  },
  {
    "text": "knows how to recover it to the back to the place where it was by you know replaying the history of durable steps",
    "start": "4532560",
    "end": "4539040"
  },
  {
    "text": "so you could then say you know if if you're on vacation and you approve it a week later you don't have like some",
    "start": "4539040",
    "end": "4544640"
  },
  {
    "text": "process running and waiting for it it's just like it's going to go away and when the approval finally comes it's going to come back use the durable steps to",
    "start": "4544640",
    "end": "4550800"
  },
  {
    "text": "replay back to the point and then do the remaining steps and so you typically folks would incrementally then rework",
    "start": "4550800",
    "end": "4558239"
  },
  {
    "text": "their non-durable services first connect them to reset to basically get the equivalent of a durable queue and then",
    "start": "4558239",
    "end": "4563760"
  },
  {
    "text": "like incrementally rework it and say \"Okay I want durable steps here maybe paralization maybe a signal and yeah I",
    "start": "4563760",
    "end": "4570640"
  },
  {
    "text": "think that's typically how you'd approach it that makes a lot of sense i do see also you have some guides uh on",
    "start": "4570640",
    "end": "4577920"
  },
  {
    "text": "the website about how to implement certain things i'm curious about the observability bit is that a part of your",
    "start": "4577920",
    "end": "4584239"
  },
  {
    "text": "hosted offering is that a part of the open-source project how does the business end fit in and is observability",
    "start": "4584239",
    "end": "4591520"
  },
  {
    "text": "part of that open core sort of thing yeah so",
    "start": "4591520",
    "end": "4597000"
  },
  {
    "text": "um at the moment at the moment the like what you get in the open source is is very broad",
    "start": "4597000",
    "end": "4604920"
  },
  {
    "text": "um you get in the open source compared to the the hosted offering pretty much",
    "start": "4604920",
    "end": "4612239"
  },
  {
    "text": "everything except the fact that you would you would self-host it and you know like the whole the whole",
    "start": "4612239",
    "end": "4617360"
  },
  {
    "text": "authentication and and API tokens and so on that that exists only in the in the managed offering but other than that",
    "start": "4617360",
    "end": "4623199"
  },
  {
    "text": "we've we've started with an open- source first approach so the open source has pretty much um the full suite at the",
    "start": "4623199",
    "end": "4629920"
  },
  {
    "text": "moment the observability there's there's two two things about observability in restate",
    "start": "4629920",
    "end": "4635360"
  },
  {
    "text": "like number one it can actually give you an amazing amount of observability itself out of the box because it funnels",
    "start": "4635360",
    "end": "4642640"
  },
  {
    "text": "all these durable steps through its consensus log so it has all the information of what happened it's not just function call but like to the",
    "start": "4642640",
    "end": "4649120"
  },
  {
    "text": "granularity of here's a step that happened or it's actually failed this is the last step that completed in this",
    "start": "4649120",
    "end": "4655120"
  },
  {
    "text": "failure and since then I've retried so and so many times and this is the last exception I've seen it has all that information available because it also is",
    "start": "4655120",
    "end": "4662320"
  },
  {
    "text": "connected to the service and understands okay what type of errors are happening is this like a retribable error or not",
    "start": "4662320",
    "end": "4667920"
  },
  {
    "text": "and it it gives you access to all that observability data in its own UI uh it's actually a fascinating way that this is",
    "start": "4667920",
    "end": "4674000"
  },
  {
    "text": "implemented i just can throw in one like one or two technical details sure",
    "start": "4674000",
    "end": "4679239"
  },
  {
    "text": "um so there's this durable log that recalls all the actions then everything",
    "start": "4679239",
    "end": "4684400"
  },
  {
    "text": "is indexed into into Rox DB instances to sort of retain it in a scalable way and we've built a SQL query engine using the",
    "start": "4684400",
    "end": "4691840"
  },
  {
    "text": "data fusion project around this that allows you to basically do SQL queries against all of that invocation and and",
    "start": "4691840",
    "end": "4700000"
  },
  {
    "text": "transaction journal state and so on so what the UI actually does is it's basically issue SQL query it's almost",
    "start": "4700000",
    "end": "4707360"
  },
  {
    "text": "it's almost like back to the good old days when every all your state was in a single postgress database and if you wanted to find out why your application",
    "start": "4707360",
    "end": "4713360"
  },
  {
    "text": "is stuck you just would open the SQL shell and start querying and we kind of lost that because we went into like distributed microservices and if you",
    "start": "4713360",
    "end": "4719600"
  },
  {
    "text": "want to find out what happened you now have to do a like murder mystery with 20 services yeah and you're bringing it",
    "start": "4719600",
    "end": "4724880"
  },
  {
    "text": "back and we're kind of bringing it back like yeah SQL query for the win um like for your distributed application state",
    "start": "4724880",
    "end": "4730880"
  },
  {
    "text": "so this is one of the things you get an amazing amount out of amazing amount of insights right out of just the restate journal um the second thing is because",
    "start": "4730880",
    "end": "4737600"
  },
  {
    "text": "like all the operations go through there um reset can also just uh out of the box generate open telemetry traces and and",
    "start": "4737600",
    "end": "4744400"
  },
  {
    "text": "spans for you so if you give it an OTEL endpoint that it should push those to um it should just give you the the the",
    "start": "4744400",
    "end": "4750480"
  },
  {
    "text": "traces right away without um without you needing to configure anything you can then extend it and augment it with your",
    "start": "4750480",
    "end": "4756800"
  },
  {
    "text": "own traces but yeah so those are the two things um the two things you can do so",
    "start": "4756800",
    "end": "4762880"
  },
  {
    "text": "and so the business end is basically cloud hosting for restate the business",
    "start": "4762880",
    "end": "4768320"
  },
  {
    "text": "end's going to be a lot more than that but this is what's going to look like",
    "start": "4768320",
    "end": "4773640"
  },
  {
    "text": "that's I don't think we can go into this yet interview us again in in 6 months",
    "start": "4773640",
    "end": "4779520"
  },
  {
    "text": "interview us again in 6 months um it's not ready to be to be announced but um",
    "start": "4779520",
    "end": "4785920"
  },
  {
    "text": "what's available right now is most of it what what we have built is also in the open source so yes on the on the",
    "start": "4785920",
    "end": "4792560"
  },
  {
    "text": "business side we do currently only only only hosting for the next six months or so",
    "start": "4792560",
    "end": "4799440"
  },
  {
    "text": "maybe fair enough cool well I think it sounds",
    "start": "4799440",
    "end": "4805920"
  },
  {
    "start": "4805000",
    "end": "5136000"
  },
  {
    "text": "like a really cool system i'm excited about this new world of durable",
    "start": "4805920",
    "end": "4812719"
  },
  {
    "text": "execution functions and some way to slap a name on that that brings all of the",
    "start": "4812719",
    "end": "4819600"
  },
  {
    "text": "junior engineers to the yard along with us seasoned engineers who have felt",
    "start": "4819600",
    "end": "4825040"
  },
  {
    "text": "these pains for all these years you know like the serverless folk did you know they just said it's serverless and",
    "start": "4825040",
    "end": "4830560"
  },
  {
    "text": "they're like \"Oh okay cool serverless maybe I should try it.\" I feel like restate and friends need some sort of a",
    "start": "4830560",
    "end": "4836640"
  },
  {
    "text": "marketing term to just simplify the overall concept of what you all are building but I do think it's very",
    "start": "4836640",
    "end": "4842719"
  },
  {
    "text": "interesting tech and very promising i do like the term resilient apps so I think maybe something with resiliency involved",
    "start": "4842719",
    "end": "4850560"
  },
  {
    "text": "but that's all for me Adam any other questions from you before we let them go i was liking durable personally i don't",
    "start": "4850560",
    "end": "4856560"
  },
  {
    "text": "if you want to word smith that a little bit here but I like durable i think that that seems to have so if if you're",
    "start": "4856560",
    "end": "4863760"
  },
  {
    "text": "interested like we've actually gone through a few iterations we started with something just calling a durable async",
    "start": "4863760",
    "end": "4870880"
  },
  {
    "text": "await because in in many ways that's what is underneath the hook it's like",
    "start": "4870880",
    "end": "4876960"
  },
  {
    "text": "durable asynchronous operations like a function invocation as an asynchronous operation made durable a step like a",
    "start": "4876960",
    "end": "4883280"
  },
  {
    "text": "sort of nice synchronous maybe API call with the durable result so and and there were like some sort of like expert",
    "start": "4883280",
    "end": "4889840"
  },
  {
    "text": "programmers that thought like \"Oh that's really cool i get it.\" Right but you know it's like distributed durable event loops uh it's very cool um but then 90%",
    "start": "4889840",
    "end": "4898000"
  },
  {
    "text": "of the folks did not get that then we just went with durable execution and then it turns out that's a very that's a",
    "start": "4898000",
    "end": "4904159"
  },
  {
    "text": "term that's maybe increasingly more recognized but it also underells a little bit what reset does because folks",
    "start": "4904159",
    "end": "4909600"
  },
  {
    "text": "actually think like oh yeah so it does the same thing as tempor but actually does a bit more um so yeah we're we're",
    "start": "4909600",
    "end": "4916639"
  },
  {
    "text": "we're still on the words smmithing side like yes distributed durability resilient apps uh resilient distributed",
    "start": "4916639",
    "end": "4923040"
  },
  {
    "text": "state management like there's so many things on the table um right the at the",
    "start": "4923040",
    "end": "4928480"
  },
  {
    "text": "moment um I I used this earlier in the talk um like stateful durable functions",
    "start": "4928480",
    "end": "4933679"
  },
  {
    "text": "is something we've used I think this is maybe increasingly getting recognized",
    "start": "4933679",
    "end": "4939040"
  },
  {
    "text": "because of a lot of the efforts that let's say um Cloudflare does with its",
    "start": "4939040",
    "end": "4945520"
  },
  {
    "text": "work or like durable objects um there's a construct in reset called a virtual",
    "start": "4945520",
    "end": "4950639"
  },
  {
    "text": "object that a surprising amount of similarities with durable objects and we would have called it durable object if",
    "start": "4950639",
    "end": "4955679"
  },
  {
    "text": "that term hadn't been trademarked by cloudflare um",
    "start": "4955679",
    "end": "4960880"
  },
  {
    "text": "Azure Azure durable functions is probably even closer to reset than temporal so if you I think you can",
    "start": "4960880",
    "end": "4967760"
  },
  {
    "text": "actually think like temporal Azure durable functions so reset is a bit more than that i think it combines a bit more",
    "start": "4967760",
    "end": "4974320"
  },
  {
    "text": "of like orchestration and stateful logic even in a more flexible way than durable functions does",
    "start": "4974320",
    "end": "4979679"
  },
  {
    "text": "um but yeah so stateful durable functions is where we've currently landed at um but look it's it's it's a",
    "start": "4979679",
    "end": "4986880"
  },
  {
    "text": "journey i think honestly even temporal hasn't figured that out after 5 years i think well that's why I said like it's a challenge that I think maybe you know",
    "start": "4986880",
    "end": "4994199"
  },
  {
    "text": "restate shouldn't solve it but I feel like maybe everybody who's in this category like you need it like there's a",
    "start": "4994199",
    "end": "5000639"
  },
  {
    "text": "missing category it's almost like a a style of application or an architecture",
    "start": "5000639",
    "end": "5006159"
  },
  {
    "text": "you know where it's like well what architecture is it well it's model view controller okay it's MVC I can build an",
    "start": "5006159",
    "end": "5011760"
  },
  {
    "text": "MVC style app you know or this is like I don't know what I don't know what",
    "start": "5011760",
    "end": "5017440"
  },
  {
    "text": "to call it I I'm missing a word but it's almost like you know it's restate style or something like maybe you have to term",
    "start": "5017440",
    "end": "5022880"
  },
  {
    "text": "it after yourself if you want to really own the market it's durable function style or it's uh Yeah durable functions",
    "start": "5022880",
    "end": "5029199"
  },
  {
    "text": "doesn't speak to me personally at all sounds really boring but that's just me and maybe it's working on other folks",
    "start": "5029199",
    "end": "5034400"
  },
  {
    "text": "adam likes durable durable to me just sounds like cool it's not going to stateful durable functions that's what",
    "start": "5034400",
    "end": "5040080"
  },
  {
    "text": "you said is that right that's what I said earlier yeah stful durable functions sdf make an acronym something",
    "start": "5040080",
    "end": "5045840"
  },
  {
    "text": "like that i don't know tdd SDS MVCs yeah i mean model view controller it",
    "start": "5045840",
    "end": "5052239"
  },
  {
    "text": "doesn't have any sort of appeal to it either on its face so maybe that wasn't a bad example anyways we could uh",
    "start": "5052239",
    "end": "5059440"
  },
  {
    "text": "continue to workshop it till we're blue in the face but obviously you've been working on it longer than this is the",
    "start": "5059440",
    "end": "5064560"
  },
  {
    "text": "year this is the year of it i'm just saying year of the what the year of whatever this is the durable function",
    "start": "5064560",
    "end": "5070480"
  },
  {
    "text": "whatever this is it's the year yeah i I feel there's something about durable in",
    "start": "5070480",
    "end": "5075760"
  },
  {
    "text": "itself that's not recognized by lots of folks i think you actually asked about that uh earlier as well like what does",
    "start": "5075760",
    "end": "5082400"
  },
  {
    "text": "durable really mean like durable is a maybe a stronger emphasis on persistent",
    "start": "5082400",
    "end": "5087920"
  },
  {
    "text": "or so um but I I'm think there's something to be said about resilient i",
    "start": "5087920",
    "end": "5094400"
  },
  {
    "text": "think resilience is a much more attractive word generally speaking and one that to me calls and says like is",
    "start": "5094400",
    "end": "5101040"
  },
  {
    "text": "your app resilient i'm like oo I don't know if it is i want resilient i want resilience so cuz durability can show",
    "start": "5101040",
    "end": "5108239"
  },
  {
    "text": "some wear whereas resilience is like you know what no matter what happens I'm going to succeed i'm going to I'm going to try until I bounce back yeah yeah and",
    "start": "5108239",
    "end": "5115920"
  },
  {
    "text": "I'm and I think you're right in the sense of durability is a means to an end like it's very implementation detail if",
    "start": "5115920",
    "end": "5122560"
  },
  {
    "text": "you wish the reset achieves resilience by doing a lot of fine grain durable operations which make it easy to bring",
    "start": "5122560",
    "end": "5129360"
  },
  {
    "text": "it back to a consistent state and that drives resilience again there you go now",
    "start": "5129360",
    "end": "5134639"
  },
  {
    "text": "you're getting your down love it now we're deep listeners hey you know we have a fun place to hang it's called",
    "start": "5134639",
    "end": "5141199"
  },
  {
    "start": "5136000",
    "end": "5157000"
  },
  {
    "text": "Zulip oh that's true go to changeelaw.com/ community join us in there and then if you have some ideas",
    "start": "5141199",
    "end": "5146400"
  },
  {
    "text": "about this name or this wordmith with us this world that uh Stefan is is creating",
    "start": "5146400",
    "end": "5153199"
  },
  {
    "text": "then you know pile on share your thoughts all the good stuff what else what's left anything left",
    "start": "5153199",
    "end": "5160159"
  },
  {
    "start": "5157000",
    "end": "5313000"
  },
  {
    "text": "unsaid about this durable resilient world we're going to live in what's unsaid about the durable world that we",
    "start": "5160159",
    "end": "5166800"
  },
  {
    "text": "live in um I think it's I think it's inevitable",
    "start": "5166800",
    "end": "5172960"
  },
  {
    "text": "to to come question is mostly in what in what shape is it coming i I think",
    "start": "5172960",
    "end": "5178440"
  },
  {
    "text": "there's it's being worked on actually from multiple dimensions they're like folks like us that work on this from the",
    "start": "5178440",
    "end": "5184960"
  },
  {
    "text": "reset side like here's the lightweight durable lock that sort of is easy to integrate with other functions i think",
    "start": "5184960",
    "end": "5190000"
  },
  {
    "text": "the sort of the the serverless folks and the Wom folks are working on that from a from a different side of uh from a",
    "start": "5190000",
    "end": "5196960"
  },
  {
    "text": "different side like saying okay hey I just let's compile everything to Wom and let the system sort of use the Wom",
    "start": "5196960",
    "end": "5203520"
  },
  {
    "text": "interpreter to to uh you know snapshot things then there's and I think there's",
    "start": "5203520",
    "end": "5208639"
  },
  {
    "text": "folks that kind of use container engines to implement this um there's so the",
    "start": "5208639",
    "end": "5214159"
  },
  {
    "text": "thing what they all share is just understanding of it's completely unsustainable to not have anything like",
    "start": "5214159",
    "end": "5219520"
  },
  {
    "text": "this it's it's harder it's hard um it gets increasingly more important the",
    "start": "5219520",
    "end": "5224719"
  },
  {
    "text": "more moving parts and the more asynchronous processes you have and I think if we all believe what the AI people tell us that like 80% of all this",
    "start": "5224719",
    "end": "5231679"
  },
  {
    "text": "is anyways going to be some agentic stuff in two years and I think you've just like created an even bigger problem",
    "start": "5231679",
    "end": "5239920"
  },
  {
    "text": "and an even bigger need for these type of systems so I think this is coming in one",
    "start": "5239920",
    "end": "5245280"
  },
  {
    "text": "in one shape or the other this is our sort of uh it's inevitable our our bet of how to best achieve it um and yeah",
    "start": "5245280",
    "end": "5252719"
  },
  {
    "text": "it's going to be fun to see it's going to be fun to see what happens there you",
    "start": "5252719",
    "end": "5257880"
  },
  {
    "text": "go all right Stefan well thank you so much for sharing the journey sharing the love sharing the things appreciate you",
    "start": "5257880",
    "end": "5265600"
  },
  {
    "text": "thanks for having me cheers [Music]",
    "start": "5265600",
    "end": "5282189"
  },
  {
    "text": "heat heat [Music]",
    "start": "5283840",
    "end": "5310960"
  },
  {
    "text": "hang on",
    "start": "5310960",
    "end": "5313840"
  }
]