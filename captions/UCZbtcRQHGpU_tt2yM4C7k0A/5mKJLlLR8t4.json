[
  {
    "text": "[Music] let's do it it's go time welcome to go",
    "start": "7390",
    "end": "12679"
  },
  {
    "text": "time your source for wide ranging discussions from all around the go Community find us on the web at go time.",
    "start": "12679",
    "end": "20199"
  },
  {
    "text": "FM on the fediverse at gotime at Chang log. social and on X at gotime FM thanks",
    "start": "20199",
    "end": "26760"
  },
  {
    "text": "to our partners at fly.io the home of changel log.com launch your app as close to your users as possible find out how",
    "start": "26760",
    "end": "34280"
  },
  {
    "text": "at fly.io okay here we",
    "start": "34280",
    "end": "39239"
  },
  {
    "text": "go what's up Gophers I'm here with Kyle Carberry CTO coder.com so Kyle I've",
    "start": "39960",
    "end": "46199"
  },
  {
    "text": "known coder as the IDE in the cloud and over time you've iterated to become a",
    "start": "46199",
    "end": "51960"
  },
  {
    "text": "fully open- Source Cloud development environment a CDE how do you explain what coder is and what it does coder is",
    "start": "51960",
    "end": "59199"
  },
  {
    "text": "a platform to provision you a development environment on any Cloud infrastructure that might be in a VM",
    "start": "59199",
    "end": "64760"
  },
  {
    "text": "that might be inside of a container but coder is kind of a developer route to provision infrastructure for them to",
    "start": "64760",
    "end": "70080"
  },
  {
    "text": "write software inside of we started with the IDE which is kind of like putting VSS code in the browser which is what",
    "start": "70080",
    "end": "76000"
  },
  {
    "text": "most people are certainly familiar with us for and we kind of funneled that into more of a platform where people",
    "start": "76000",
    "end": "81159"
  },
  {
    "text": "provision the infrastructure and a lot of people do use a web ID with coder a lot of people use a local IDE and just",
    "start": "81159",
    "end": "86240"
  },
  {
    "text": "connect in okay so what are teams coming to you for who's coming to you well what people really come to us for",
    "start": "86240",
    "end": "91600"
  },
  {
    "text": "particularly this problem is is really exacerbated if you're a large Enterprise is when you have like 500 Engineers that",
    "start": "91600",
    "end": "98079"
  },
  {
    "text": "are trying to update like a version of python and instead we allow one engineer to go through that tedious work of",
    "start": "98079",
    "end": "103880"
  },
  {
    "text": "updating some scripts or some Docker container and then you can actually just deploy that in one click to say like 500",
    "start": "103880",
    "end": "109280"
  },
  {
    "text": "engineers and make it really really simple let's laser focus in on the",
    "start": "109280",
    "end": "114880"
  },
  {
    "text": "platform engineer it is that team's job to provide the best infrastructure the",
    "start": "114880",
    "end": "119960"
  },
  {
    "text": "best platform for their given applications for their teams what are some signs or signals for platform",
    "start": "119960",
    "end": "127159"
  },
  {
    "text": "Engineers to think about when it might be time to consider a cloud development environment like coder.com so as a",
    "start": "127159",
    "end": "133280"
  },
  {
    "text": "platform engineer developers might constantly be opening like it tickets that their computer isn't working",
    "start": "133280",
    "end": "139040"
  },
  {
    "text": "properly they might constantly want to update dependencies but that's a big mess you constantly have to email people",
    "start": "139040",
    "end": "145840"
  },
  {
    "text": "across your team to say hey Adam could we update from java 17 to Java 18 those are the kinds of problems that people",
    "start": "145840",
    "end": "151959"
  },
  {
    "text": "typically have that's the status quo you ship people more powerful laptops to improve the build times of your projects",
    "start": "151959",
    "end": "158319"
  },
  {
    "text": "you try to reduce the complexity of your products instead of Simply you know leveraging better Hardware we believe",
    "start": "158319",
    "end": "164239"
  },
  {
    "text": "that the future is leveraging the cloud for a lot of these things you can get more powerful instances in gcp or AWS",
    "start": "164239",
    "end": "170440"
  },
  {
    "text": "that can make the build times faster instantly you can let one developer create a standardized environment and",
    "start": "170440",
    "end": "175519"
  },
  {
    "text": "then distribute it to a thousand so that when you're updating from java 17 to 18 it's just a simple pull request you can",
    "start": "175519",
    "end": "181800"
  },
  {
    "text": "collocate your servers right next to something like S3 or a database that you're using in development so that you",
    "start": "181800",
    "end": "187280"
  },
  {
    "text": "get immediate data transfers it's not slow many of our customers which is a crazy thing to say but they use",
    "start": "187280",
    "end": "192640"
  },
  {
    "text": "absolutely massive monor repos and they get clones that go from like 10 minutes or 20 minutes or an hour to Simply like",
    "start": "192640",
    "end": "198400"
  },
  {
    "text": "a minute or 30 seconds it's just a lot simpler when all of your engineers are standardized on one centralized piece of",
    "start": "198400",
    "end": "205360"
  },
  {
    "text": "infrastructure and then one person can can impact the lives of hundreds of Engineers and with that we don't believe",
    "start": "205360",
    "end": "211080"
  },
  {
    "text": "that everything belongs in the cloud we think that some workloads are really amazing for it and some are absolutely",
    "start": "211080",
    "end": "216200"
  },
  {
    "text": "terrible coder should be a selfs serve offering to your engineers it should not be prescriptive where you migrate all",
    "start": "216200",
    "end": "222239"
  },
  {
    "text": "pieces of software development into the cloud only the things that really get a lot better by running them In This Cloud",
    "start": "222239",
    "end": "227799"
  },
  {
    "text": "native way do we really promote moving well it might be time to consider a",
    "start": "227799",
    "end": "233120"
  },
  {
    "text": "cloud development environment and open source is awesome encoder is fully open source you can go to coder .c get a demo",
    "start": "233120",
    "end": "241840"
  },
  {
    "text": "or try it right now or even start a 30-day trial of coder Enterprise once",
    "start": "241840",
    "end": "247560"
  },
  {
    "text": "again coder.com that's c o d.com coder.com",
    "start": "247560",
    "end": "254120"
  },
  {
    "text": "[Music]",
    "start": "254120",
    "end": "259229"
  },
  {
    "text": "[Music]",
    "start": "263360",
    "end": "267258"
  },
  {
    "text": "right my name is Natalie and I'm here again with Jesus and we are for",
    "start": "270360",
    "end": "275520"
  },
  {
    "text": "recording now the second part of our topic of the 10 moments that Jus had",
    "start": "275520",
    "end": "282680"
  },
  {
    "text": "when reading the go code base and we stopped at 6 and we would you like to do",
    "start": "282680",
    "end": "289320"
  },
  {
    "text": "a quick recap before we jump into seven yes um great well hello everybody yes",
    "start": "289320",
    "end": "294800"
  },
  {
    "text": "welcome it's nice of you to join again I'm just jumping straight back in but yeah moments that that's fine uh let's",
    "start": "294800",
    "end": "301759"
  },
  {
    "text": "talk let let me recap the last episode we were talking about the Saha moments",
    "start": "301759",
    "end": "308000"
  },
  {
    "text": "that comes from some Explorations in the ghost source code that comes from a couple of talks that I did one was",
    "start": "308000",
    "end": "315880"
  },
  {
    "text": "around the the different parts of the the different building objects like slices maps and channels and the other",
    "start": "315880",
    "end": "323360"
  },
  {
    "text": "ones come from the from the compiler itself another talk that I did around the understanding the compiler",
    "start": "323360",
    "end": "330360"
  },
  {
    "text": "and we we explore these these different ah moments one of them was how a lies",
    "start": "330360",
    "end": "335639"
  },
  {
    "text": "work under the hood that was surprising for me another one was about the syntax",
    "start": "335639",
    "end": "341199"
  },
  {
    "text": "and how the the syntax of the of go have a representation inside the compiler",
    "start": "341199",
    "end": "346759"
  },
  {
    "text": "that is the abstract syntax 3 and having that knowledge about how the abstract",
    "start": "346759",
    "end": "352520"
  },
  {
    "text": "syntax Tre is represented was a a h moment for me because give me the the",
    "start": "352520",
    "end": "358199"
  },
  {
    "text": "understanding of what can have a file in go what what are the boundaries of what",
    "start": "358199",
    "end": "364560"
  },
  {
    "text": "exist in a go file and what can't exist what are the building blocks exactly",
    "start": "364560",
    "end": "370000"
  },
  {
    "text": "what are the the building blocks and the the fact that there's no more building blocks there's nothing else that I not",
    "start": "370000",
    "end": "375919"
  },
  {
    "text": "seen because I haven't read about it so that was another another coola moment",
    "start": "375919",
    "end": "381919"
  },
  {
    "text": "also another one was around the Cooperative nature of the go routines and how they wake up each other and how",
    "start": "381919",
    "end": "388880"
  },
  {
    "text": "they stop them themselves and things like that that was pretty cool also was another another very interesting thing",
    "start": "388880",
    "end": "395639"
  },
  {
    "text": "another one was H when I was investigating around the the compiler I start seeing this Escape analysis",
    "start": "395639",
    "end": "403479"
  },
  {
    "text": "concept the idea of how the compiler decide what goes to the Hep and what goes to the stack and also the inlining",
    "start": "403479",
    "end": "411319"
  },
  {
    "text": "that the compiler decides when to in line or not a function code how they",
    "start": "411319",
    "end": "416520"
  },
  {
    "text": "work together to give you way better usage of the memory because sometimes",
    "start": "416520",
    "end": "422319"
  },
  {
    "text": "the inlining process makes something that before went to the the Hep now",
    "start": "422319",
    "end": "429000"
  },
  {
    "text": "because the inlining process now goes to the stack and that is faster so that was",
    "start": "429000",
    "end": "435039"
  },
  {
    "text": "another one the other one that I I also was um super cool for me was",
    "start": "435039",
    "end": "440840"
  },
  {
    "text": "understanding when in the compiler start the code that is machine dependent where",
    "start": "440840",
    "end": "447400"
  },
  {
    "text": "in the process of compiling your program your code gets in a state that is",
    "start": "447400",
    "end": "452960"
  },
  {
    "text": "machine dependent this is pretty late in the process it's one of the passes of the a static single assignment",
    "start": "452960",
    "end": "460120"
  },
  {
    "text": "representation and that was um was really cool because then you you realize",
    "start": "460120",
    "end": "465759"
  },
  {
    "text": "that almost a huge percentage of the compiler is a architecture agnostic and",
    "start": "465759",
    "end": "471840"
  },
  {
    "text": "that's that's pretty amazing the other thing and that is related to that is the",
    "start": "471840",
    "end": "476960"
  },
  {
    "text": "the fact that tinyo leverage that idea and leverage the SSA representation to",
    "start": "476960",
    "end": "483479"
  },
  {
    "text": "build the the tiny go compiler basically you use the SSA representation of go to",
    "start": "483479",
    "end": "490240"
  },
  {
    "text": "get that SSA use the the whole compiler Machinery already there to generate this",
    "start": "490240",
    "end": "496400"
  },
  {
    "text": "SSA and instead of compile that SSA to a binary for your architecture it's going",
    "start": "496400",
    "end": "502479"
  },
  {
    "text": "to intercept that point convert that SSA into a llm intermediate representation",
    "start": "502479",
    "end": "508759"
  },
  {
    "text": "and that LL M intermediate represent llbm sorry llbm intermediate representation yeah llm is low level",
    "start": "508759",
    "end": "516000"
  },
  {
    "text": "virtual machine not the large language model exactly the llbm intermediate",
    "start": "516000",
    "end": "521680"
  },
  {
    "text": "representation and that llbm intermediate representation converts your that code into your uh",
    "start": "521680",
    "end": "527959"
  },
  {
    "text": "microcontroller specific architecture so I I found that pretty amazing and pretty",
    "start": "527959",
    "end": "533120"
  },
  {
    "text": "smart and that were the six aha moments that we explored yesterday was yesterday",
    "start": "533120",
    "end": "539120"
  },
  {
    "text": "the the previous it's okay it's okay it's okay to say what happened behind the scenes all good it became a became a",
    "start": "539120",
    "end": "545200"
  },
  {
    "text": "long episode longer than expected so we broke that down into two okay that I think that's it that was what we were",
    "start": "545200",
    "end": "552320"
  },
  {
    "text": "talking yesterday all right I'm ready to jump to number seven okay the number seven that comes from it's kind of the",
    "start": "552320",
    "end": "560079"
  },
  {
    "text": "interception between the my talk around understanding the go compiler and my",
    "start": "560079",
    "end": "565800"
  },
  {
    "text": "talk around understanding the go runtime that is the next obvious step well",
    "start": "565800",
    "end": "570880"
  },
  {
    "text": "actually the next obvious step on uh whenever you are exploring these kind of things is stopping it's not this make no",
    "start": "570880",
    "end": "578800"
  },
  {
    "text": "sense to keep going and keep going but well I'm I'm I'm a reckless person so I",
    "start": "578800",
    "end": "585040"
  },
  {
    "text": "still keep investigating and start investigating the the runtime and as",
    "start": "585040",
    "end": "590360"
  },
  {
    "text": "part of that there was some interesting thing that I I saw and was kind of",
    "start": "590360",
    "end": "596920"
  },
  {
    "text": "surprising not not necessarily surprising kind of if you think about it makes sense but I haven't thought about",
    "start": "596920",
    "end": "604360"
  },
  {
    "text": "it before and now and then when I saw that I was surprised and is the fact",
    "start": "604360",
    "end": "609600"
  },
  {
    "text": "that the compiler compiles to binary code in general so if you have an assignation of a variable it's going to",
    "start": "609600",
    "end": "616440"
  },
  {
    "text": "be compiled into some binary code that is going to do some register change and",
    "start": "616440",
    "end": "622600"
  },
  {
    "text": "some memory access and things like that but not everything ends up being",
    "start": "622600",
    "end": "628600"
  },
  {
    "text": "compiled to that binary code per se some of the syntax that you see in the in the",
    "start": "628600",
    "end": "636839"
  },
  {
    "text": "go uh source code is compiled to calls to the runtime instead of executing some",
    "start": "636839",
    "end": "645000"
  },
  {
    "text": "assembly code some CPU instruction is going to delegate that logic to a chunk",
    "start": "645000",
    "end": "651200"
  },
  {
    "text": "of code that is going to be always there that is the runtime for example some",
    "start": "651200",
    "end": "656279"
  },
  {
    "text": "very common syntax that we use is is inserting things in a Channel or reading",
    "start": "656279",
    "end": "661760"
  },
  {
    "text": "from a channel that syntax it's going to end up converting to a instruction in",
    "start": "661760",
    "end": "668399"
  },
  {
    "text": "the in the assembly that is a call function to the runtime module uh to the",
    "start": "668399",
    "end": "674480"
  },
  {
    "text": "specific function that sends messages to a Chann send data to a Channel or receive data from a channel so that was",
    "start": "674480",
    "end": "681360"
  },
  {
    "text": "very cool because is this you see how smart is um the design there because you",
    "start": "681360",
    "end": "688720"
  },
  {
    "text": "always have this run time the run time is kind of easy to follow code and converting all that into assembly to",
    "start": "688720",
    "end": "696279"
  },
  {
    "text": "represent the concept of a channel in the final assembly probably is going to get your binaries probably more bloated",
    "start": "696279",
    "end": "704560"
  },
  {
    "text": "but not only that it's kind of simpler to design that you have a package that is always there and your syntax can",
    "start": "704560",
    "end": "712200"
  },
  {
    "text": "compile to that based on the existent of that package so that was that was really",
    "start": "712200",
    "end": "717839"
  },
  {
    "text": "cool and you can EAS see that if you use the the goild flags if you pass the Das",
    "start": "717839",
    "end": "726160"
  },
  {
    "text": "s in GC flag you get the assembly generated when you build your your",
    "start": "726160",
    "end": "733279"
  },
  {
    "text": "program and you can see in the assembly there all that calls to the runtime",
    "start": "733279",
    "end": "738480"
  },
  {
    "text": "package so it's kind of easy to see that and and it's for me is is pretty cool",
    "start": "738480",
    "end": "744600"
  },
  {
    "text": "why do you think this was done this way or what would be another way kind of of doing that that would be maybe better",
    "start": "744600",
    "end": "750760"
  },
  {
    "text": "for another setup I think for example there is a a con in Rush that is zeroc",
    "start": "750760",
    "end": "757480"
  },
  {
    "text": "cost abstractions that is something that you have the syntax there but the compiler",
    "start": "757480",
    "end": "763399"
  },
  {
    "text": "is going to take care of all that and it's going to generate the final binary for that abstraction without any runtime",
    "start": "763399",
    "end": "772360"
  },
  {
    "text": "cost that is another way of doing that that is going to put more pressure in",
    "start": "772360",
    "end": "777880"
  },
  {
    "text": "the compiler is going to take more time into the compiler to compile all that code so probably that's one of the",
    "start": "777880",
    "end": "785240"
  },
  {
    "text": "reason if you have a runtime that is always there and it's always ready to",
    "start": "785240",
    "end": "790720"
  },
  {
    "text": "just be linked to your your binary or be embedded in your binary probably is more",
    "start": "790720",
    "end": "796560"
  },
  {
    "text": "is faster to compile and also I think the code is",
    "start": "796560",
    "end": "801920"
  },
  {
    "text": "going to be simpler because at the end of the day with all these transformation all these generate this a that suddenly",
    "start": "801920",
    "end": "809440"
  },
  {
    "text": "represents something an intermediate representation and that intermediate representation convert that into",
    "start": "809440",
    "end": "815639"
  },
  {
    "text": "instructions all that it's it's kind of more heavy lifting than saying yeah whenever you see a a channel sent just",
    "start": "815639",
    "end": "823279"
  },
  {
    "text": "add a call to a function and that's it's it's simpler I think that's the idea",
    "start": "823279",
    "end": "830040"
  },
  {
    "text": "behind that I don't know for sure but that's my my guess it's faster for",
    "start": "830040",
    "end": "837000"
  },
  {
    "text": "compiling or I guess it's fight faster for compiling and it's simpler from the",
    "start": "837000",
    "end": "843000"
  },
  {
    "text": "mental model perspective does it have something to do with a cross compilation flags that to kind of support that from",
    "start": "843000",
    "end": "849720"
  },
  {
    "text": "your guesstimate I know it's a yeah it's it's Cross of too many topics yeah I",
    "start": "849720",
    "end": "854920"
  },
  {
    "text": "know I think I think it doesn't need to be related to that because the cross",
    "start": "854920",
    "end": "860320"
  },
  {
    "text": "compiling part it's going to be well have some relationship because if you",
    "start": "860320",
    "end": "865759"
  },
  {
    "text": "are already you find your runtime already cross compiled for another architecture you don't need to recompile",
    "start": "865759",
    "end": "872600"
  },
  {
    "text": "that part over and over and over again so that is cross-compile one time and",
    "start": "872600",
    "end": "877720"
  },
  {
    "text": "the rest of your coin needs to be cross compiled that's the the one that needs needs to be cross compiled but at the",
    "start": "877720",
    "end": "883160"
  },
  {
    "text": "end of the day the run time is just a go package like any other go package so at",
    "start": "883160",
    "end": "889199"
  },
  {
    "text": "the end of the day probably the cross compiling wouldn't be that different",
    "start": "889199",
    "end": "894440"
  },
  {
    "text": "because at the at the end of the day what you will do is something like okay the send message to a channel",
    "start": "894440",
    "end": "899800"
  },
  {
    "text": "it's going to be a set of instructions that gos goes together and and that's it",
    "start": "899800",
    "end": "906040"
  },
  {
    "text": "so I would I wouldn't expect that to be affecting the cross compiling or but",
    "start": "906040",
    "end": "912560"
  },
  {
    "text": "again it's a guest as you say it's a guest is there any like recommendation",
    "start": "912560",
    "end": "918680"
  },
  {
    "text": "for when writing your code you can have this in mind or is this too many layers",
    "start": "918680",
    "end": "924040"
  },
  {
    "text": "and this is more of like a general bonus there yeah for me I think I think part",
    "start": "924040",
    "end": "930519"
  },
  {
    "text": "of this is about whenever you want to know more about how certain things works",
    "start": "930519",
    "end": "937639"
  },
  {
    "text": "you can check out that and say okay it's calling the run time directly so whenever I for example whenever I happen",
    "start": "937639",
    "end": "945319"
  },
  {
    "text": "something to a slies it's just calling the runtime so there's some things that",
    "start": "945319",
    "end": "950680"
  },
  {
    "text": "are are happening in the runtime that you can say okay if this is the runtime",
    "start": "950680",
    "end": "957160"
  },
  {
    "text": "responsibility I can easily go go to the runtime code and understand what is going on understand what means um happen",
    "start": "957160",
    "end": "965040"
  },
  {
    "text": "to a slice or what means to go to um add something into a map or send something",
    "start": "965040",
    "end": "971920"
  },
  {
    "text": "to a channel so you can easily explore that based on that that's the the only",
    "start": "971920",
    "end": "977519"
  },
  {
    "text": "thing that I see some value there in general my talks are completely useless",
    "start": "977519",
    "end": "983440"
  },
  {
    "text": "so they are they are interesting knowledge I found that knowledge interesting but but in general they are",
    "start": "983440",
    "end": "990120"
  },
  {
    "text": "useless there there's not much thing that you can apply directly because it's",
    "start": "990120",
    "end": "996000"
  },
  {
    "text": "about how things works and to be fair the go compiler works really well so you",
    "start": "996000",
    "end": "1002519"
  },
  {
    "text": "need to know how they work how how the compiler and the runtime work so it's",
    "start": "1002519",
    "end": "1008360"
  },
  {
    "text": "just for about being curious and understanding better certain things and yes time to time you find that knowledge",
    "start": "1008360",
    "end": "1016880"
  },
  {
    "text": "useful but in general it's more about the pleasure of understanding what is",
    "start": "1016880",
    "end": "1022120"
  },
  {
    "text": "going on under the hood yeah get that guess that one time where where suddenly memories eating in a wild way nobody",
    "start": "1022120",
    "end": "1029480"
  },
  {
    "text": "understands why that that one person knows that one very esoteric one fun fact this is where it comes in useful",
    "start": "1029480",
    "end": "1037120"
  },
  {
    "text": "yeah it's like it well I went to a talk from Niki Deca in grion UK that was",
    "start": "1037120",
    "end": "1043160"
  },
  {
    "text": "about brain teasers he has a book about that also but about brain teasers and",
    "start": "1043160",
    "end": "1048319"
  },
  {
    "text": "was like oh I was able to guess like 50% of them the other uh 50% I I was I got",
    "start": "1048319",
    "end": "1056679"
  },
  {
    "text": "caught but that easily actually was like okay this is not something that that I",
    "start": "1056679",
    "end": "1064400"
  },
  {
    "text": "will expect but there some of then I was like oh okay I know that it's going to",
    "start": "1064400",
    "end": "1070280"
  },
  {
    "text": "behave weirdly because I know how it works under the hood but yeah it's",
    "start": "1070280",
    "end": "1076200"
  },
  {
    "text": "pretty cool so but it's not especially useful in general as he said keep it in",
    "start": "1076200",
    "end": "1082000"
  },
  {
    "text": "the back of their mind basically is what you say yeah exactly it's that's one time where compilation is being weird",
    "start": "1082000",
    "end": "1088480"
  },
  {
    "text": "yeah and yeah yeah exactly understanding some some small things here and there that can be can be",
    "start": "1088480",
    "end": "1095110"
  },
  {
    "text": "[Music]",
    "start": "1095110",
    "end": "1100580"
  },
  {
    "text": "interesting what's up friends I'm here with two new friends of mine from Speak Easy sarbach you co founder and CEO and",
    "start": "1102679",
    "end": "1110240"
  },
  {
    "text": "George Hadar founding engineer so for the uninitiated Speak Easy takes care of",
    "start": "1110240",
    "end": "1115280"
  },
  {
    "text": "the entire SDK workflow to save you and your team significant time delivering Enterprise grade sdks to your customers",
    "start": "1115280",
    "end": "1123080"
  },
  {
    "text": "in minutes you can generate best inclass sdks in typescript Python go Java C and",
    "start": "1123080",
    "end": "1131640"
  },
  {
    "text": "even PHP so SAR what's your excitement level for apis and this API World we're",
    "start": "1131640",
    "end": "1138280"
  },
  {
    "text": "living in I'm super excited about apis I think we went to gen zero of the API",
    "start": "1138280",
    "end": "1145640"
  },
  {
    "text": "first Revolution and I think we're actually going to a second one now with the Tailwinds of the AI ecosystem kind",
    "start": "1145640",
    "end": "1150919"
  },
  {
    "text": "of causing that to be reinvigorated so yeah super super psych to be working in this space right now I think it's",
    "start": "1150919",
    "end": "1156799"
  },
  {
    "text": "everyone's at a point that where everyone knows about rest apis and grq apis and GPC apis and now I think we're",
    "start": "1156799",
    "end": "1163360"
  },
  {
    "text": "actually getting into the second phase of that which is how do people ship great developer experience in addition",
    "start": "1163360",
    "end": "1169640"
  },
  {
    "text": "to the apis and how do we build like truly best-in-class apis that turn into they long the infrastructure right this",
    "start": "1169640",
    "end": "1176720"
  },
  {
    "text": "is kind of the the vision I think that stripe helped manifest for everyone in the finex space which is the the an API",
    "start": "1176720",
    "end": "1183720"
  },
  {
    "text": "that really sets the bar for developer experience but also like it's something you can truly rely on right it's it's a",
    "start": "1183720",
    "end": "1189880"
  },
  {
    "text": "true if you make strip a dependency of your company you can feel confident doing that and I think that's that's a",
    "start": "1189880",
    "end": "1195840"
  },
  {
    "text": "part of API devel that really excites me I agree that is exciting so George teams who leverage Speak Easy are those who",
    "start": "1195840",
    "end": "1202679"
  },
  {
    "text": "have leaned all the way in on documenting a solid open API spec and",
    "start": "1202679",
    "end": "1208240"
  },
  {
    "text": "mostly want to be hands off of their sdks is that right precisely so you're coming to us because you want to be",
    "start": "1208240",
    "end": "1215480"
  },
  {
    "text": "hands off from that process you want to put all of your effort into documenting your API and then you're trusting and",
    "start": "1215480",
    "end": "1222320"
  },
  {
    "text": "relying on great quality tooling to turn that into code and documentation which is what we're doing for you you're not",
    "start": "1222320",
    "end": "1228280"
  },
  {
    "text": "meant to change or edit the code because it will be regenerated the next time you",
    "start": "1228280",
    "end": "1233400"
  },
  {
    "text": "change your open API so you ultimately put it in our hands once you've committed the changes to your open API",
    "start": "1233400",
    "end": "1239600"
  },
  {
    "text": "it's it's Off to the Races and you get a new release of your SDK you get a pull request to review you will you will have",
    "start": "1239600",
    "end": "1245480"
  },
  {
    "text": "the opportunity to look at the contents of the code but quite often you can let it h along creating sdks for you or new",
    "start": "1245480",
    "end": "1252640"
  },
  {
    "text": "releases of your SDK every time you change your API very cool well the thing that got me with Speaky that really",
    "start": "1252640",
    "end": "1259120"
  },
  {
    "text": "helped me understand it was that as George said it is hands off you can just focus on documenting your API via the",
    "start": "1259120",
    "end": "1265600"
  },
  {
    "text": "open API spec and you still have pull requests you still have visibility and in fact they will even hop into pull",
    "start": "1265600",
    "end": "1272120"
  },
  {
    "text": "requests with you to triage any sort of anomalies or issues that come from the",
    "start": "1272120",
    "end": "1277400"
  },
  {
    "text": "SDK generation and improve the back end of Speak Easy to make future releases",
    "start": "1277400",
    "end": "1283679"
  },
  {
    "text": "better for you I think this is so cool for teams who want to just be hands off of their SDK and focus on their product",
    "start": "1283679",
    "end": "1290159"
  },
  {
    "text": "focus on the core documentation around the open API spec but still have all",
    "start": "1290159",
    "end": "1295679"
  },
  {
    "text": "that awesome visibility okay so the next step is to go to Speak Easy API dodev",
    "start": "1295679",
    "end": "1302520"
  },
  {
    "text": "you can start off with one free SDK that's so cool because you can go there right now and try it out completely free",
    "start": "1302520",
    "end": "1310279"
  },
  {
    "text": "one free SDK let them know the change log sent you let them know JS party sent",
    "start": "1310279",
    "end": "1315360"
  },
  {
    "text": "you once again Speak Easy api. death",
    "start": "1315360",
    "end": "1320520"
  },
  {
    "text": "okay uh let's jump to number eight yeah this is another another one that is it",
    "start": "1321600",
    "end": "1326720"
  },
  {
    "text": "has to do with this understanding on on the knowledge that it's good to have and",
    "start": "1326720",
    "end": "1333120"
  },
  {
    "text": "sometimes you don't really understand what's going on and it's about the binary entry point whenever you execute",
    "start": "1333120",
    "end": "1339799"
  },
  {
    "text": "a go binary whenever you learn go the first thing that everybody said is oh",
    "start": "1339799",
    "end": "1345559"
  },
  {
    "text": "the the entry point of your program is this Main function that you defines and then your program start executing there",
    "start": "1345559",
    "end": "1352919"
  },
  {
    "text": "of course that's not true because we have a runtime so the very first uh",
    "start": "1352919",
    "end": "1358600"
  },
  {
    "text": "thing that is executed in your uh binary it's a function that is dependent on",
    "start": "1358600",
    "end": "1364240"
  },
  {
    "text": "your it's an assembly function a go assembly function that is dependent on your operating system and your",
    "start": "1364240",
    "end": "1371840"
  },
  {
    "text": "architecture and then it's start initializing things I start setting up a",
    "start": "1371840",
    "end": "1377120"
  },
  {
    "text": "lot of stuff the the memory allocator the garbage collector the different uh",
    "start": "1377120",
    "end": "1384120"
  },
  {
    "text": "CPU Flags security related stuff a lot of stuff is done before even your main",
    "start": "1384120",
    "end": "1392799"
  },
  {
    "text": "function is called so that was um very interesting because you see the amount",
    "start": "1392799",
    "end": "1398360"
  },
  {
    "text": "of things that are done before your your main function is executed and it's it's",
    "start": "1398360",
    "end": "1403960"
  },
  {
    "text": "pretty amazing also during that process one of the thing that happens is that",
    "start": "1403960",
    "end": "1411440"
  },
  {
    "text": "your function your main function it's is executed through a g routine also it's",
    "start": "1411440",
    "end": "1418039"
  },
  {
    "text": "not the main process and the goutine is something that happens after it's the G",
    "start": "1418039",
    "end": "1423640"
  },
  {
    "text": "the first G routin is created and start executing your main function so your main function is not executed outside",
    "start": "1423640",
    "end": "1430679"
  },
  {
    "text": "any go routine and then you spound go routines your main function is a go routine and actually after before your",
    "start": "1430679",
    "end": "1437480"
  },
  {
    "text": "main function is exec Ed there are other GS already executing that the system monitor and things like that so there is",
    "start": "1437480",
    "end": "1444240"
  },
  {
    "text": "a huge um not huge but a a very interesting process there before your",
    "start": "1444240",
    "end": "1451640"
  },
  {
    "text": "main function is executed and yeah I I found that pretty cool I mean on the one",
    "start": "1451640",
    "end": "1457039"
  },
  {
    "text": "hand it's very it's a lot happening but on the other hand it's so fast and uh it makes me think of that exity comic of",
    "start": "1457039",
    "end": "1464120"
  },
  {
    "text": "where're it's compiling right that they play swords and it's kind of how it stopped happening in go because the same",
    "start": "1464120",
    "end": "1469600"
  },
  {
    "text": "thing happens but just faster basically yeah it's it goes really fast it it is",
    "start": "1469600",
    "end": "1475480"
  },
  {
    "text": "actually the if you start digging into that initialization process most of them are very small tasks for example the the",
    "start": "1475480",
    "end": "1482679"
  },
  {
    "text": "memory allocator is just initializing some strs that are there but it's not",
    "start": "1482679",
    "end": "1488799"
  },
  {
    "text": "like it's not heavy lifting there then some things like the garbage collector",
    "start": "1488799",
    "end": "1493840"
  },
  {
    "text": "is just setting some Flags here and there and the garbage collector is set up it's all small things a small set of",
    "start": "1493840",
    "end": "1501320"
  },
  {
    "text": "structs that you define and a small initialization that you do and then when",
    "start": "1501320",
    "end": "1506440"
  },
  {
    "text": "the program start running it start using that thing so for example whenever you need memory it's going to start using",
    "start": "1506440",
    "end": "1511720"
  },
  {
    "text": "the memory allocator whenever you need to recollect the garbage the garbage",
    "start": "1511720",
    "end": "1516799"
  },
  {
    "text": "collector is going to kick off and and all that stuff so it's there's a lot of steps there's a lot of a lot of things",
    "start": "1516799",
    "end": "1523159"
  },
  {
    "text": "that happens be between when you start your binary and your main function it's",
    "start": "1523159",
    "end": "1529360"
  },
  {
    "text": "called but they are very small things very targeted things so yeah if you",
    "start": "1529360",
    "end": "1535159"
  },
  {
    "text": "would if one want to go about looking into that how would you do that well how",
    "start": "1535159",
    "end": "1540240"
  },
  {
    "text": "did you do this yeah I will recommend to go and check out my talk so that will be",
    "start": "1540240",
    "end": "1548080"
  },
  {
    "text": "a kind of a a a easy path but if you want to do it by yourself that is is",
    "start": "1548080",
    "end": "1553760"
  },
  {
    "text": "perfectly reasonable what I did was go to the well I go went to the GDB deer",
    "start": "1553760",
    "end": "1561279"
  },
  {
    "text": "and find the entry point that in my case was in the SL run SRC runtime rt0 Linux",
    "start": "1561279",
    "end": "1570399"
  },
  {
    "text": "amd64 dos that is uh the entry point that's an assembly code there and then I",
    "start": "1570399",
    "end": "1578440"
  },
  {
    "text": "start tracing that and going to the different calls that is doing and see",
    "start": "1578440",
    "end": "1584039"
  },
  {
    "text": "what are that calls doing what are they initializing and all that stuff so",
    "start": "1584039",
    "end": "1590320"
  },
  {
    "text": "basically I manually Trace all that execution and that was my process was",
    "start": "1590320",
    "end": "1599039"
  },
  {
    "text": "relatively hard it's not super easy because that you have some assembly code there that you have to can understand a",
    "start": "1599039",
    "end": "1606279"
  },
  {
    "text": "bit it's not something that you need to understand a lot of assembly but you have to understand a bit and then you",
    "start": "1606279",
    "end": "1612279"
  },
  {
    "text": "kind of just start tracing all these small steps here and there and then you",
    "start": "1612279",
    "end": "1618039"
  },
  {
    "text": "have the Schuler initialization but the schedular initialization includes the",
    "start": "1618039",
    "end": "1623200"
  },
  {
    "text": "memory allocator initialization the garbage collector initialization so there is a a big chunk that is the",
    "start": "1623200",
    "end": "1629559"
  },
  {
    "text": "schedular initialization but is initializing a lot of stuff inside so",
    "start": "1629559",
    "end": "1635240"
  },
  {
    "text": "tracing all that took me time but it's not specially hard it's more timec",
    "start": "1635240",
    "end": "1642320"
  },
  {
    "text": "consuming that hard that is what I perceived all the links will be in the show notes oh yeah yeah I can I can",
    "start": "1642320",
    "end": "1649520"
  },
  {
    "text": "share some links there and actually if you if you see I I I usually do that in",
    "start": "1649520",
    "end": "1655399"
  },
  {
    "text": "in my talks whenever I do I I explain these kind of things I usually have um",
    "start": "1655399",
    "end": "1661720"
  },
  {
    "text": "at the bottom right corner of my slides I have links to the source code that is kind of homework for the people if they",
    "start": "1661720",
    "end": "1668480"
  },
  {
    "text": "want to go there and and check the where the in the source code is happening whatever yeah if you if you go to the",
    "start": "1668480",
    "end": "1675720"
  },
  {
    "text": "slides of my talk and you start looking the different steps you are going to see that at the bottom right corner the link",
    "start": "1675720",
    "end": "1683000"
  },
  {
    "text": "to the to the source file and the specific version of the the go um",
    "start": "1683000",
    "end": "1688039"
  },
  {
    "text": "runtime or or compiler and yeah you can go there and check it it's it's",
    "start": "1688039",
    "end": "1693679"
  },
  {
    "text": "interesting I I don't know how many people do that to be honest but I put that there yeah it's fair it's um it's",
    "start": "1693679",
    "end": "1701440"
  },
  {
    "text": "nice to have sources for sure references yeah um okay number nine",
    "start": "1701440",
    "end": "1708559"
  },
  {
    "text": "okay it's kind of related with what we have been talking it's was the memory",
    "start": "1708559",
    "end": "1713600"
  },
  {
    "text": "allocator I probably that that was more my fault than any anything else but I",
    "start": "1713600",
    "end": "1720840"
  },
  {
    "text": "didn't know I didn't even know I didn't even thought about the concept of the memory allocator inside go whenever you",
    "start": "1720840",
    "end": "1728559"
  },
  {
    "text": "talk about memory management in go normally you talk about the the garbage collector but I never thought about the",
    "start": "1728559",
    "end": "1737080"
  },
  {
    "text": "memory allocator the memory alligator was an interesting piece of software that I didn't know and the memory",
    "start": "1737080",
    "end": "1743240"
  },
  {
    "text": "alligator is the responsible of talking with the operating system and reclaim pages and free pages so it's very",
    "start": "1743240",
    "end": "1752279"
  },
  {
    "text": "interesting part of the of the how memory is managed in in in go and",
    "start": "1752279",
    "end": "1758159"
  },
  {
    "text": "actually what it does it it organize the data in a way that it take Pages set of",
    "start": "1758159",
    "end": "1767600"
  },
  {
    "text": "pages what is called M spams memory spams and that memory spams have a",
    "start": "1767600",
    "end": "1774559"
  },
  {
    "text": "variables of the same size always so an MS span can have 30 pages but doesn't",
    "start": "1774559",
    "end": "1781919"
  },
  {
    "text": "matter the amount of pages that it has it always going to store variables of the same size that means if you have a",
    "start": "1781919",
    "end": "1790320"
  },
  {
    "text": "Ms spam of eight bytes all the variables of eight bytes is going to go there if",
    "start": "1790320",
    "end": "1795600"
  },
  {
    "text": "you have a mspan of 32 bytes variables of 32 bytes goes there and that is there",
    "start": "1795600",
    "end": "1802440"
  },
  {
    "text": "is a set of mspan size that are defined and are the the bigger is the spam the",
    "start": "1802440",
    "end": "1809039"
  },
  {
    "text": "bigger is the the space between them for example you have a 8 16 24 32 and then I",
    "start": "1809039",
    "end": "1816640"
  },
  {
    "text": "think it jumps to 48 or something like that and then to 60 and then to 96 or",
    "start": "1816640",
    "end": "1822480"
  },
  {
    "text": "something like that so it's jumping and there's more and more space between them I don't remember the exact numbers but",
    "start": "1822480",
    "end": "1829320"
  },
  {
    "text": "there's more space between them that is important to know because if for example you store a variable that is a 30 bytes",
    "start": "1829320",
    "end": "1838000"
  },
  {
    "text": "for example it's going to be a store in the M span of 32 so it's going to take",
    "start": "1838000",
    "end": "1843679"
  },
  {
    "text": "32 bytes of a space no matter the size of the of the stct so every single",
    "start": "1843679",
    "end": "1851039"
  },
  {
    "text": "variable that is between 24 and 32 it's going to be a store in the 32 span and",
    "start": "1851039",
    "end": "1856120"
  },
  {
    "text": "it's going to take 32 bytes so that's the idea that way you have less",
    "start": "1856120",
    "end": "1861600"
  },
  {
    "text": "fragmentation you have a very efficient way of storing and and retrieving that",
    "start": "1861600",
    "end": "1867440"
  },
  {
    "text": "variables also you have uh an easy way of reclaiming and freeding that pages in",
    "start": "1867440",
    "end": "1874360"
  },
  {
    "text": "memory so it's it's an interesting approach and that's the memory locator",
    "start": "1874360",
    "end": "1879399"
  },
  {
    "text": "apart from that you have all these Ms spans then you have for each CPU you have a 1M span and then you have a",
    "start": "1879399",
    "end": "1887080"
  },
  {
    "text": "centralized version of all the spans of all the CPUs and then you have a he a m",
    "start": "1887080",
    "end": "1893000"
  },
  {
    "text": "Hep that is managing everything and the other thing is the biggest mpan is 32 kilobytes I think so",
    "start": "1893000",
    "end": "1902279"
  },
  {
    "text": "everything that goes over 32 kilobytes is going to be handled directly from the mhip and is going to get its own memory",
    "start": "1902279",
    "end": "1910399"
  },
  {
    "text": "pages so really big data CHS are going to be handled independently outside m",
    "start": "1910399",
    "end": "1917480"
  },
  {
    "text": "spons and it's going to use Pages directly in memory and everything under",
    "start": "1917480",
    "end": "1922600"
  },
  {
    "text": "that is going to go in them and spams that is going to handle that in pages of memory so the memory allocator asks for",
    "start": "1922600",
    "end": "1930159"
  },
  {
    "text": "more pages and and free pages from the operating system so the memory",
    "start": "1930159",
    "end": "1937320"
  },
  {
    "text": "management is done by the memory allocator the garbage collector decides",
    "start": "1937320",
    "end": "1943279"
  },
  {
    "text": "what is its user and what is not but but the memory itself the memory asking for",
    "start": "1943279",
    "end": "1948519"
  },
  {
    "text": "memory and free the memory from the operating system is done by the m allocator and I didn't even know that",
    "start": "1948519",
    "end": "1954799"
  },
  {
    "text": "that exists before because I'm a web developer basically so so my my my focus",
    "start": "1954799",
    "end": "1962279"
  },
  {
    "text": "has been always in other place yeah I I would like to watch a talk about that I feel like I need to hear this one more",
    "start": "1962279",
    "end": "1969360"
  },
  {
    "text": "time yeah I think I think in the last europython Diana",
    "start": "1969360",
    "end": "1975720"
  },
  {
    "text": "uho well Diana give a talk dat do yeah from data do",
    "start": "1975720",
    "end": "1981120"
  },
  {
    "text": "give a talk about that about how they knowing how the memorial gor Works they were able to squeeze a lot of",
    "start": "1981120",
    "end": "1988960"
  },
  {
    "text": "performance and reduce the memory usage and the garbage collector pressure and all that stuff so that is is interesting",
    "start": "1988960",
    "end": "1996320"
  },
  {
    "text": "and actually about knowing how the garbage collector works and KN knowing how a structure packing Works how how",
    "start": "1996320",
    "end": "2004679"
  },
  {
    "text": "the how changing the order of the fields of stract can end up giving you a less",
    "start": "2004679",
    "end": "2011840"
  },
  {
    "text": "uh memory usage for that stract and if that falls into the right spot between M",
    "start": "2011840",
    "end": "2019679"
  },
  {
    "text": "spans you can end up saving big amounts of memory actually yeah probably",
    "start": "2019679",
    "end": "2024720"
  },
  {
    "text": "whenever the recording is there check out the the talk from Diana is there any",
    "start": "2024720",
    "end": "2029880"
  },
  {
    "text": "action item that or like recommended practice that somebody can take from",
    "start": "2029880",
    "end": "2035600"
  },
  {
    "text": "this a yeah it will say that knowing that that mpan size and all that stuff",
    "start": "2035600",
    "end": "2042600"
  },
  {
    "text": "and knowing that structure packing can lead you to Safe memory and that that is something that I think I would recommend",
    "start": "2042600",
    "end": "2049200"
  },
  {
    "text": "to check it out especially if you have a huge amount of instances of something",
    "start": "2049200",
    "end": "2055358"
  },
  {
    "text": "for example in data do if obuse that they have a huge amount of events so",
    "start": "2055359",
    "end": "2060599"
  },
  {
    "text": "they have some structure that is repeating millions and millions of times so that millions and millions of times",
    "start": "2060599",
    "end": "2067240"
  },
  {
    "text": "if you have have if you save I don't know 30 bytes on each structor there 30",
    "start": "2067240",
    "end": "2074280"
  },
  {
    "text": "bytes multiply by millions of times you are saving memory there and you are saving yeah back and forth with the with",
    "start": "2074280",
    "end": "2081720"
  },
  {
    "text": "the operating system reclaiming pages and all that stuff so I think I think is",
    "start": "2081720",
    "end": "2087000"
  },
  {
    "text": "something to check out if you have probably in the order of millions of",
    "start": "2087000",
    "end": "2092878"
  },
  {
    "text": "instances of of any object okay yeah still uh still trying",
    "start": "2092879",
    "end": "2099760"
  },
  {
    "text": "to think what uh like I have no it always helps me to kind of Link this in",
    "start": "2099760",
    "end": "2105040"
  },
  {
    "text": "my mind to something and it's still like hanging there but okay moving on to number 10 and the last",
    "start": "2105040",
    "end": "2112160"
  },
  {
    "text": "one yeah the number 10 it's it's kind of related one of the things that I always",
    "start": "2112160",
    "end": "2117760"
  },
  {
    "text": "say I I always have this oh when the garbage collector runs oh it runs whenever you have this memory threshold",
    "start": "2117760",
    "end": "2125800"
  },
  {
    "text": "but can run time to time without the memory threshold and but you can run manually but but when that runs",
    "start": "2125800",
    "end": "2133680"
  },
  {
    "text": "there can be different places right and was kind interesting when I just",
    "start": "2133680",
    "end": "2139440"
  },
  {
    "text": "realized that there are three cases only three specific cases where the garbage",
    "start": "2139440",
    "end": "2145880"
  },
  {
    "text": "collector runs one is whenever you call GC well whenever you explicitly call the",
    "start": "2145880",
    "end": "2153000"
  },
  {
    "text": "garbage collector to do a cycle so that is um the GC trigger cycle so it's",
    "start": "2153000",
    "end": "2160760"
  },
  {
    "text": "manual calling the garbage collector the obvious one in this case then you have",
    "start": "2160760",
    "end": "2165960"
  },
  {
    "text": "another one that is related to time there's a a gtin that is running under",
    "start": "2165960",
    "end": "2172480"
  },
  {
    "text": "the hood every 10 milliseconds in go that is called the system monitor and",
    "start": "2172480",
    "end": "2178040"
  },
  {
    "text": "that system monitor checks if the garbage collector hasn't been called for too much time and if that's the case",
    "start": "2178040",
    "end": "2185640"
  },
  {
    "text": "it's going to call the garbage collector a front there it's what is a GC Trigger",
    "start": "2185640",
    "end": "2190920"
  },
  {
    "text": "Time that is based on time it's the system monitor detects that and send um",
    "start": "2190920",
    "end": "2198200"
  },
  {
    "text": "and calls a a GC garbage collector then you have the one that was more",
    "start": "2198200",
    "end": "2203920"
  },
  {
    "text": "interesting for me that is the GC trigger Hep that is this one that is related to the go GC environment",
    "start": "2203920",
    "end": "2211240"
  },
  {
    "text": "variable that defines when the garbage collector have to pass based on the size",
    "start": "2211240",
    "end": "2217000"
  },
  {
    "text": "of the Heat de in the previous pass so by default is 100% so what it means is",
    "start": "2217000",
    "end": "2223000"
  },
  {
    "text": "whenever you do a garbage collection pass you end up with certain amount of memory let's say 16 megabytes for",
    "start": "2223000",
    "end": "2229079"
  },
  {
    "text": "example the next pass is going to be whenever you double that whenever you reach 32 megabytes of RAM is going to",
    "start": "2229079",
    "end": "2237800"
  },
  {
    "text": "trigger a garbage collection phase and for example after the garbage collection you get into 20 megabytes so the next",
    "start": "2237800",
    "end": "2245240"
  },
  {
    "text": "pass is in 40 that that reduce the the amount to X and then whenever you reach",
    "start": "2245240",
    "end": "2251560"
  },
  {
    "text": "2x it's going to call again and all that stuff so that is how the GC Pacer Works",
    "start": "2251560",
    "end": "2257079"
  },
  {
    "text": "to do that check of whenever you double the memory but when that happen exactly",
    "start": "2257079",
    "end": "2264960"
  },
  {
    "text": "in the code because you are asking for new variables new strs and things like",
    "start": "2264960",
    "end": "2270079"
  },
  {
    "text": "that all the time so when when are you checking if the if I surpass that memory",
    "start": "2270079",
    "end": "2276800"
  },
  {
    "text": "and it's kind of simpler when you understand that the memory allocator is there the trigger Hep the garbage",
    "start": "2276800",
    "end": "2283839"
  },
  {
    "text": "collection Hep check is done whenever you ask for a new page of memory",
    "start": "2283839",
    "end": "2290400"
  },
  {
    "text": "whenever you need a new page of memory whenever you request for new memory new block new chunk of memory to stort",
    "start": "2290400",
    "end": "2297480"
  },
  {
    "text": "variables in any of the MSP you are going to check if that is",
    "start": "2297480",
    "end": "2302880"
  },
  {
    "text": "surpassing the the threshold and then if it's surpassing the threshold it's going to to call the the garbage collector so",
    "start": "2302880",
    "end": "2309640"
  },
  {
    "text": "that is exactly the exact point where he's checking that so there's the three",
    "start": "2309640",
    "end": "2315280"
  },
  {
    "text": "this three cases is whenever you reclaim a page from from the operating system",
    "start": "2315280",
    "end": "2320880"
  },
  {
    "text": "it's when the garbage collector cool run if the thres is surpassed based on time",
    "start": "2320880",
    "end": "2327079"
  },
  {
    "text": "from the system monitor and whenever you call it manually so and that's it there's no any any other place where you",
    "start": "2327079",
    "end": "2335520"
  },
  {
    "text": "are calling the garbage collector what's a what's a practical takeaway",
    "start": "2335520",
    "end": "2342119"
  },
  {
    "text": "here well understanding I think understanding especially the the Heap",
    "start": "2342680",
    "end": "2349119"
  },
  {
    "text": "one it's going to understand better when you generate pressure in the garbage",
    "start": "2349119",
    "end": "2355040"
  },
  {
    "text": "collector if you for example start creating variables and and freeing them and creating them and freeing them and",
    "start": "2355040",
    "end": "2361040"
  },
  {
    "text": "creating them fre them inside the same kind of size of of variables probably",
    "start": "2361040",
    "end": "2367000"
  },
  {
    "text": "you are not going to need to reclaim more pages because you probably are reusing the same Ms spam and the same",
    "start": "2367000",
    "end": "2373760"
  },
  {
    "text": "pages that you have in memory so I'm not 100% sure if that is 100% accurate so",
    "start": "2373760",
    "end": "2381560"
  },
  {
    "text": "but yeah sounds like if I would want to like not hack but if I want to poke",
    "start": "2381560",
    "end": "2388359"
  },
  {
    "text": "around somebody's code somehow I'm trying to think in uh if this is a if you are playing some",
    "start": "2388359",
    "end": "2395119"
  },
  {
    "text": "capture the FL and you got this uh this piece of a program and you try to like",
    "start": "2395119",
    "end": "2400240"
  },
  {
    "text": "poke it to see where will it break maybe this is something to try there not not",
    "start": "2400240",
    "end": "2405400"
  },
  {
    "text": "the most everyday practical use case but yeah still trying to link that also into",
    "start": "2405400",
    "end": "2411880"
  },
  {
    "text": "somewhere yeah yeah it's kind of it's kind of hard for me because as I said I",
    "start": "2411880",
    "end": "2417400"
  },
  {
    "text": "I don't find a lot of practical usage for most of the things that I I see here",
    "start": "2417400",
    "end": "2423400"
  },
  {
    "text": "for me it's about knowledge and about understanding how how it works and",
    "start": "2423400",
    "end": "2429760"
  },
  {
    "text": "having better understanding on on on on things like this it's useful to know",
    "start": "2429760",
    "end": "2435160"
  },
  {
    "text": "when the garbage collector is going to run probably in very specific realtime",
    "start": "2435160",
    "end": "2441440"
  },
  {
    "text": "applications you need to know that but probably if you are doing real-time applications almost for sure you are not",
    "start": "2441440",
    "end": "2448119"
  },
  {
    "text": "using a garbage collected language uh so it's it's um anyway for",
    "start": "2448119",
    "end": "2454880"
  },
  {
    "text": "that kind of cases whenever you need to know hey the garbage collector is not going to run in this space you can say",
    "start": "2454880",
    "end": "2460920"
  },
  {
    "text": "okay I can run the garbage collector first so I reduce the possibility of the",
    "start": "2460920",
    "end": "2466960"
  },
  {
    "text": "timer one to Running by itself and then I can control the size of the hip to be",
    "start": "2466960",
    "end": "2474640"
  },
  {
    "text": "sure that during that time I'm not doubling the hip so I don't know if that is is something that I will do or I",
    "start": "2474640",
    "end": "2481960"
  },
  {
    "text": "would want probably I will try to disable the garbage collector and and enable it again later I don't know if",
    "start": "2481960",
    "end": "2487960"
  },
  {
    "text": "even possible in in in go anyway no interesting yeah it's it's",
    "start": "2487960",
    "end": "2495920"
  },
  {
    "text": "it's triing and yeah trying to poke around with this I don't know how you",
    "start": "2495920",
    "end": "2503760"
  },
  {
    "text": "can poke around with this H it's it's um",
    "start": "2503760",
    "end": "2508960"
  },
  {
    "text": "I don't know it's lots of arrays until something happens yeah no you can you can for sure",
    "start": "2508960",
    "end": "2515319"
  },
  {
    "text": "you can you can generate a lot of data and and start generating the garbage collector to to spin a lot actually you",
    "start": "2515319",
    "end": "2522560"
  },
  {
    "text": "can you can do things like playing around with the concept of Hey whenever you double memory I'm going to generate",
    "start": "2522560",
    "end": "2528560"
  },
  {
    "text": "the garbage collector pass I can easily double the memory reduce the memory",
    "start": "2528560",
    "end": "2533680"
  },
  {
    "text": "because I free that that thing and double the memory again and free that and double the memory again and free",
    "start": "2533680",
    "end": "2539359"
  },
  {
    "text": "that and double the memory again and that will be that will generate a lot of garbage collector Cycles but but you",
    "start": "2539359",
    "end": "2546319"
  },
  {
    "text": "need to play with that and and yeah you can you can play with that and screw a bit the",
    "start": "2546319",
    "end": "2554800"
  },
  {
    "text": "the performance of the of the thing because you are doing a lot of garbage collection work instead of real work",
    "start": "2554800",
    "end": "2562400"
  },
  {
    "text": "okay cool and probably you can do even better just reducing the amount of of",
    "start": "2562400",
    "end": "2567520"
  },
  {
    "text": "memory needed for the garbage collector phase you can tune the GC the go GC to",
    "start": "2567520",
    "end": "2574240"
  },
  {
    "text": "to instead of 100 you put that in 10 and every time the 10% is is reach or 1%",
    "start": "2574240",
    "end": "2580880"
  },
  {
    "text": "is reach to run a garbage collection phase and that's going to be craziest spin in the garbage collector all the",
    "start": "2580880",
    "end": "2587359"
  },
  {
    "text": "time so not not something that I would recommend but yeah very nice segue you gave me",
    "start": "2587359",
    "end": "2595240"
  },
  {
    "text": "here for an unpopular opinion but before we jump there could I ask you to recap the two episodes on this and uh just",
    "start": "2595240",
    "end": "2602079"
  },
  {
    "text": "quickly go over all the 10 again as a it's a very quick summary it's it is really it was really interesting to hear",
    "start": "2602079",
    "end": "2608359"
  },
  {
    "text": "them all yeah I can recap of them is one of them was the slices internals the",
    "start": "2608359",
    "end": "2613800"
  },
  {
    "text": "other one was the go routine cooperation the nature The Cooperative natur of go routines H the other one was the the",
    "start": "2613800",
    "end": "2621359"
  },
  {
    "text": "concept of the syntax the abstract syntax tree and how that sets the the",
    "start": "2621359",
    "end": "2626760"
  },
  {
    "text": "boundaries of all the things that can be there in a in a go file the other one",
    "start": "2626760",
    "end": "2632240"
  },
  {
    "text": "was Escape analysis Plus in lining and how they collaborate to get a better uh",
    "start": "2632240",
    "end": "2638559"
  },
  {
    "text": "memory usage the SSA lowering process that is the process that converts your",
    "start": "2638559",
    "end": "2645319"
  },
  {
    "text": "program representation at that point the SSA program representation from machine",
    "start": "2645319",
    "end": "2650359"
  },
  {
    "text": "independent to machine dependent um and how tiny go leverage",
    "start": "2650359",
    "end": "2656079"
  },
  {
    "text": "that as say to use the llvm technology to generate",
    "start": "2656079",
    "end": "2663240"
  },
  {
    "text": "microcontroller binaries using the exact same goal language and how the compiler and the",
    "start": "2663240",
    "end": "2671440"
  },
  {
    "text": "runtime collaborate together to provide a lot of the syntax that youing go like",
    "start": "2671440",
    "end": "2677440"
  },
  {
    "text": "sending things to Channel or appending things to a map the entry point of your binary and how that is not the main",
    "start": "2677440",
    "end": "2684960"
  },
  {
    "text": "function it's um more complex than that and the memory allocator and how",
    "start": "2684960",
    "end": "2691359"
  },
  {
    "text": "the memory allocator manage your memory and reclaim pages and all that stuff from the operating system and the final",
    "start": "2691359",
    "end": "2697359"
  },
  {
    "text": "one when the garbage collector the GC ER runs and what are the three places where",
    "start": "2697359",
    "end": "2705240"
  },
  {
    "text": "the garbage collector can run and why and I think that's it okay I would love",
    "start": "2705240",
    "end": "2711760"
  },
  {
    "text": "to hear from people who listened to the episodes on this topic either on slack",
    "start": "2711760",
    "end": "2717559"
  },
  {
    "text": "channel of the go Time Podcast or on Twitter what what was your mindblowing one or what was uh what was useful or",
    "start": "2717559",
    "end": "2725480"
  },
  {
    "text": "what was the biggest for you it is really cool go watch all the talks",
    "start": "2725480",
    "end": "2730720"
  },
  {
    "text": "fromus they all will be linked in the show notes and uh thank you so much for",
    "start": "2730720",
    "end": "2737079"
  },
  {
    "text": "joining do you have an unpopular opinion for today oh that's that's hard it took",
    "start": "2737079",
    "end": "2742839"
  },
  {
    "text": "me some time to realize that I had one so no I don't have one for today I I",
    "start": "2742839",
    "end": "2749680"
  },
  {
    "text": "going to stick to my mechanical keyboards and many unpopular opinion is",
    "start": "2749680",
    "end": "2756680"
  },
  {
    "text": "that two episodes recorded in two consecutive days are can share one unpopular opinion",
    "start": "2756680",
    "end": "2765000"
  },
  {
    "text": "yeah great then thank you so much for sharing your Insight and uh good luck in",
    "start": "2765000",
    "end": "2770720"
  },
  {
    "text": "all the cool talks that are coming up for you yeah thank you thank you for having me and and yeah was a I I had a",
    "start": "2770720",
    "end": "2777880"
  },
  {
    "text": "great time here so thank you and and I hope I I I really want to know more",
    "start": "2777880",
    "end": "2783960"
  },
  {
    "text": "about people getting this knowledge and and finding ways of doing that of using",
    "start": "2783960",
    "end": "2789079"
  },
  {
    "text": "that because to be honest as I said I'm a web developer my main focus is on API",
    "start": "2789079",
    "end": "2795119"
  },
  {
    "text": "development so there's a lot of fields out there that are um more system level",
    "start": "2795119",
    "end": "2803119"
  },
  {
    "text": "that probably can take advantage of this kind of knowledge but for building apis",
    "start": "2803119",
    "end": "2808400"
  },
  {
    "text": "everything works so smoothly and go that you don't really need to go deeper so",
    "start": "2808400",
    "end": "2814079"
  },
  {
    "text": "it's a yeah it's do share thoughts everybody who listens yep yeah let's see let's see what what",
    "start": "2814079",
    "end": "2820800"
  },
  {
    "text": "people what people say so all right thanks everyone for joining thanks for",
    "start": "2820800",
    "end": "2826000"
  },
  {
    "text": "bye-bye thank you bye that is go time for this week thanks",
    "start": "2826000",
    "end": "2832640"
  },
  {
    "text": "for listening along subscribe now if you haven't already head to go time. FM for",
    "start": "2832640",
    "end": "2838760"
  },
  {
    "text": "all the ways or simply search for go time wherever you get your podcasts",
    "start": "2838760",
    "end": "2843880"
  },
  {
    "text": "you'll find us hey do you receive our ch log newsletter each Monday if not let's",
    "start": "2843880",
    "end": "2849800"
  },
  {
    "text": "fix that bug one reader calls it so good he considers it a competitive Advantage",
    "start": "2849800",
    "end": "2855640"
  },
  {
    "text": "Sign up for $0 at changel log.com newws thanks once again to our partners",
    "start": "2855640",
    "end": "2862280"
  },
  {
    "text": "at fly.io to Our Mysterious beat freak break master cylinder and to our friends at Sentry we love Sentry you might too",
    "start": "2862280",
    "end": "2870359"
  },
  {
    "text": "use code change log when you're signing up for a team plan and save a 100 bucks why not right that is all for now but",
    "start": "2870359",
    "end": "2878040"
  },
  {
    "text": "we'll talk to you again next time on go time",
    "start": "2878040",
    "end": "2883640"
  },
  {
    "text": "[Music]",
    "start": "2886950",
    "end": "2890050"
  }
]