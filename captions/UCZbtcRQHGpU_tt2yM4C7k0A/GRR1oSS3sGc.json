[
  {
    "text": "bandwith for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at change log because of rbar check them out at roar.com and we're hosted on linode",
    "start": "5520",
    "end": "11480"
  },
  {
    "text": "cloud servers head to lin.com changelog this episode is brought to you",
    "start": "11480",
    "end": "17320"
  },
  {
    "text": "by lenoe our Cloud Server of choice it is so easy to get started with lenoe servers start at just five bucks a month",
    "start": "17320",
    "end": "23599"
  },
  {
    "text": "we host change log on Lino Cloud servers and we love it we get great 24/7 support Zeus like Powers with",
    "start": "23599",
    "end": "30519"
  },
  {
    "text": "ssds a super fast 40 GB per second Network and Incredibly fast CPUs for",
    "start": "30519",
    "end": "36360"
  },
  {
    "text": "processing and we trust L because they keep it fast they keep it simple check them out at lin.com",
    "start": "36360",
    "end": "44160"
  },
  {
    "text": "[Music]",
    "start": "44880",
    "end": "48609"
  },
  {
    "text": "[Music] changelog welcome to go time a podcast",
    "start": "55730",
    "end": "62280"
  },
  {
    "text": "featuring a diverse panel and special guests discussing Cloud infrastructure distributed systems micros Services",
    "start": "62280",
    "end": "68600"
  },
  {
    "text": "kubernetes Docker oh and also go we record live every Tuesday at 300 p.m.",
    "start": "68600",
    "end": "74000"
  },
  {
    "text": "Eastern new Pacific join the community slack with us in real time during the show in the gotime FM channel in go for",
    "start": "74000",
    "end": "80040"
  },
  {
    "text": "slack follow us on Twitter we're at gotime FM listen live at changel law.com or subscribe at changel law.com gotime",
    "start": "80040",
    "end": "88520"
  },
  {
    "text": "and now on to the show welcome to go time I'm Matt ryer today",
    "start": "88520",
    "end": "95880"
  },
  {
    "text": "we're talking about errors in go we're going to learn a bit about how they work we're going to talk to a panel about how",
    "start": "95880",
    "end": "103119"
  },
  {
    "text": "they use errors and we're also going to talk about the future of Errors including some of the new proposals that are flying around so joining me today uh",
    "start": "103119",
    "end": "110840"
  },
  {
    "text": "all the way from Australia it's Dave chy hello Dave hello Matt how are you I'm",
    "start": "110840",
    "end": "116840"
  },
  {
    "text": "good sir what time is it for you oh I don't know it's 10: in the morning",
    "start": "116840",
    "end": "123079"
  },
  {
    "text": "something like that yeah it's insane but it's and it's also tomorrow isn't it that's right asking what the football",
    "start": "123079",
    "end": "129319"
  },
  {
    "text": "pools are we're not allowed the queen has made it very clear no leaking",
    "start": "129319",
    "end": "134959"
  },
  {
    "text": "information across time zones I don't know what that means the editors by the way of this podcast do not edit out",
    "start": "134959",
    "end": "142160"
  },
  {
    "text": "anything that I say that's ridiculous by the way don't know why I've got an ongoing feud with them hopefully uh I'll",
    "start": "142160",
    "end": "148080"
  },
  {
    "text": "patch things up let me continue to introduce the panel here then cuz uh I'm also joined by it's only Peter borgan",
    "start": "148080",
    "end": "155519"
  },
  {
    "text": "hello Peter hi there I've never been on a panel before so it's very exciting for me oh well glad hopefully this is uh an",
    "start": "155519",
    "end": "163640"
  },
  {
    "text": "enjoyable experience where are you Peter currently I'm sitting in my uh bunker in",
    "start": "163640",
    "end": "169519"
  },
  {
    "text": "the center of Berlin where it is currently 9:00 p.m. and the Sun is still up there so that's me nice Berlin this",
    "start": "169519",
    "end": "178040"
  },
  {
    "text": "this is a very um world worldwide show today actually we're all over the place I'm in London Dave you're",
    "start": "178040",
    "end": "185879"
  },
  {
    "text": "in Australia right and uh Dave please remember is a podcast and um I'm going to introduce F",
    "start": "185879",
    "end": "193720"
  },
  {
    "text": "the guests this is going really well so far the introducing guests bit I'm also",
    "start": "193720",
    "end": "198760"
  },
  {
    "text": "joined by well it's common Ando isn't it hello common hello how are you good",
    "start": "198760",
    "end": "205360"
  },
  {
    "text": "afternoon from New York oh New York City how's the weather there hot like I like",
    "start": "205360",
    "end": "211519"
  },
  {
    "text": "it cool and we also have an an additional guest usually we don't have this many but this is a special show",
    "start": "211519",
    "end": "218480"
  },
  {
    "text": "it's Marcel Von lisen hello could you introduce your own self sure in my",
    "start": "218480",
    "end": "224720"
  },
  {
    "text": "accent in your accent I don't know if I can do that though I'll just stick with my own Marcel looh Hasen from",
    "start": "224720",
    "end": "230959"
  },
  {
    "text": "Switzerland also very hot here and um I'm on the go team you may know",
    "start": "230959",
    "end": "236040"
  },
  {
    "text": "excellent thank you so yes we're talking about errors today and I think it might",
    "start": "236040",
    "end": "242120"
  },
  {
    "text": "be nice to just sort of get started and talk a little bit about what it is that",
    "start": "242120",
    "end": "247319"
  },
  {
    "text": "makes errors different in go and what makes them special cuz they are unusual",
    "start": "247319",
    "end": "252640"
  },
  {
    "text": "for for people when they first come to the language does anyone want to chat a bit about the differences there I mean",
    "start": "252640",
    "end": "259160"
  },
  {
    "text": "essentially like the you know languages that have exceptions they're kind of",
    "start": "259160",
    "end": "264400"
  },
  {
    "text": "always there they're part of the uh they're part of the fabric really of everything whereas in go that's not",
    "start": "264400",
    "end": "270720"
  },
  {
    "text": "really the case is it the errors are really just values that you can return and in fact error is just an interface I",
    "start": "270720",
    "end": "278120"
  },
  {
    "text": "think I think maybe what you're alluding to is the fact that Ino error handling seems to be very explicit it's it's not",
    "start": "278120",
    "end": "284759"
  },
  {
    "text": "just the technicalities of like exceptions versus explicit return values it's more at least to me it's the",
    "start": "284759",
    "end": "291960"
  },
  {
    "text": "tradition that that we have of kind of people often say you think about the the unhappy or the sad path first um and",
    "start": "291960",
    "end": "298639"
  },
  {
    "text": "because because the error handling is part of the return value not any kind of",
    "start": "298639",
    "end": "304039"
  },
  {
    "text": "additional um mechanism it's kind of like the thing that you have to think about first that the language guides you",
    "start": "304039",
    "end": "310199"
  },
  {
    "text": "to not being able to like oh well I think I'll think about the a handling at the end or I'll put that in in a in a",
    "start": "310199",
    "end": "316120"
  },
  {
    "text": "catch block or something like that so maybe that's that's cly how I think about it that Ira handling is explicit",
    "start": "316120",
    "end": "321160"
  },
  {
    "text": "and that kind of has driven a culture of f focusing very much on well if we solve",
    "start": "321160",
    "end": "326560"
  },
  {
    "text": "all the unhappy paths at the end out of our c Falls the happy path yeah and I",
    "start": "326560",
    "end": "331800"
  },
  {
    "text": "think writing code like that also is quite nice if you if you do catch all",
    "start": "331800",
    "end": "336880"
  },
  {
    "text": "the errors early and and do that thing where you return early throughout the a function you do end up with the last",
    "start": "336880",
    "end": "343160"
  },
  {
    "text": "line in the function being kind of the happy return so it becomes quite a handy way as well of just being able to glance",
    "start": "343160",
    "end": "349120"
  },
  {
    "text": "at a function and see what's going on one thing I notice uh especially among people coming from different maybe not",
    "start": "349120",
    "end": "355880"
  },
  {
    "text": "so hardcore computer science backgrounds is that uh this style of sad path first",
    "start": "355880",
    "end": "361360"
  },
  {
    "text": "uh they don't see it as nice at all right their mind is strictly in uh the business logic of the thing and they",
    "start": "361360",
    "end": "368720"
  },
  {
    "text": "look at error handling as a necessary evil they want to think about specifically the thing that they're",
    "start": "368720",
    "end": "374000"
  },
  {
    "text": "doing and if it doesn't work then you know kind of oh well and I think that is kind of at the core of a lot of um",
    "start": "374000",
    "end": "380000"
  },
  {
    "text": "frustration with this part of the go language people expect to program in one way and go kind of uh in some ways",
    "start": "380000",
    "end": "386800"
  },
  {
    "text": "forces in other ways encourages them to think about the way they struct structure their programs in a completely",
    "start": "386800",
    "end": "392120"
  },
  {
    "text": "different way and I guess it's open for debate how much of that is good I would argue a lot of it is good but maybe there's space in the discussion to say",
    "start": "392120",
    "end": "399080"
  },
  {
    "text": "well maybe we don't need to go quite that far and I guess that's what all these new proposals are talking about at",
    "start": "399080",
    "end": "404360"
  },
  {
    "text": "least a little bit yeah maybe there are two two parts that the one is the actual like the explicitness of a handling",
    "start": "404360",
    "end": "411960"
  },
  {
    "text": "people would say it's it's in your it's in your face like you you feel you need to always be talking about it always be typing about it the the other one like",
    "start": "411960",
    "end": "419560"
  },
  {
    "text": "go into Peter's point about like a cultural um a cultural background or bringing bringing your history with you",
    "start": "419560",
    "end": "425440"
  },
  {
    "text": "from my point of view coming to software development from an operator's point of view always want to know about how this",
    "start": "425440",
    "end": "431479"
  },
  {
    "text": "software can fail that's all I I don't care if if it works if it works that's great it's not going to page me but I",
    "start": "431479",
    "end": "436840"
  },
  {
    "text": "want to know how it's going to fail and so that was I say for me one of the great things that attracted me to to go",
    "start": "436840",
    "end": "444160"
  },
  {
    "text": "in in the very first place I'm like we always talk about what if this doesn't work what if this file isn't here what",
    "start": "444160",
    "end": "449479"
  },
  {
    "text": "if I can't read from it what if I can't and so on and so on um and so being able to talk explicitly about the ways that a",
    "start": "449479",
    "end": "456720"
  },
  {
    "text": "particular operation doesn't work was like catnip to me like this is great I want to talk about this all the time",
    "start": "456720",
    "end": "463319"
  },
  {
    "text": "yeah another point is uh that Rob made early on is if you have a file that doesn't exist that is not really all",
    "start": "463319",
    "end": "469599"
  },
  {
    "text": "that different from if some uh values input by the user are not according to some spec you need to generate some",
    "start": "469599",
    "end": "475120"
  },
  {
    "text": "error these the same these are the same things so error really shouldn't be handled differently is anyr value in",
    "start": "475120",
    "end": "481039"
  },
  {
    "text": "most cases um for my sins I came from a from a background of java where always there was this this discussion about the",
    "start": "481039",
    "end": "486879"
  },
  {
    "text": "overuse of the idea of exception like like we make we make things which are not exceptional exceptions mainly",
    "start": "486879",
    "end": "492400"
  },
  {
    "text": "because of that uh driving forceing go in in Java to unify all things behind",
    "start": "492400",
    "end": "498840"
  },
  {
    "text": "this one exception mechanism therefore every kind of failure from the trivial to the catastrophic always smells the",
    "start": "498840",
    "end": "505240"
  },
  {
    "text": "same way and in Java they had the unchecked and checked exceptions didn't they what what were they trying to do",
    "start": "505240",
    "end": "511680"
  },
  {
    "text": "with that what were they does somebody else want to go I don't want to monopolize the conversation no one wants to talk about Java exceptions",
    "start": "511680",
    "end": "518800"
  },
  {
    "text": "Dave well put put me in that c that category too okay fine no no I I I put",
    "start": "518800",
    "end": "524080"
  },
  {
    "text": "um I I did some research about this like trying to like find out because the the",
    "start": "524080",
    "end": "529160"
  },
  {
    "text": "notion of Java's checked exception was absolutely a a reaction to the way the",
    "start": "529160",
    "end": "534360"
  },
  {
    "text": "exceptions in C++ are handled which are there is no there was no way of knowing does this function throw one of the",
    "start": "534360",
    "end": "541120"
  },
  {
    "text": "great Sports of C++ is to open up any of the C++ conference talks and Herb sule",
    "start": "541120",
    "end": "547839"
  },
  {
    "text": "will put a three line piece of code on the on the page and say you it'll be something like adding two numbers together and he'll say is this safe and",
    "start": "547839",
    "end": "554160"
  },
  {
    "text": "he'll spend the next hour talking about all the ways that adding two numbers together can be unsafe like can just blow up and and and part of that is",
    "start": "554160",
    "end": "560399"
  },
  {
    "text": "because well someone might have overwritten addition for that that type and it might throw an exception and you just don't know so the Java check",
    "start": "560399",
    "end": "567360"
  },
  {
    "text": "exceptions were very much a um reaction to that which is if this thing can throw an exception you have to put it in the",
    "start": "567360",
    "end": "574320"
  },
  {
    "text": "put it in the signature of the method Unfortunately they figured out eventually that that was going to",
    "start": "574320",
    "end": "579920"
  },
  {
    "text": "require every single thing to have a throws clause and so they kind of created the secondary category of what",
    "start": "579920",
    "end": "585680"
  },
  {
    "text": "we think of in go not as panic but as throw there's a concept inside the runtime there's actually a function",
    "start": "585680",
    "end": "591680"
  },
  {
    "text": "called Throw and throw you can think of as Panic that you can't catch so if if you think of checked exceptions there's",
    "start": "591680",
    "end": "597800"
  },
  {
    "text": "a category of those and then there's an even more a a larger ones which are you know things like dividing by zero out of",
    "start": "597800",
    "end": "604120"
  },
  {
    "text": "memory things like that which are subass from the not checked exception category",
    "start": "604120",
    "end": "609279"
  },
  {
    "text": "but the one that doesn't need to be checked so effectively you could throw exceptions and not have to mention them so all that work to say right we're",
    "start": "609279",
    "end": "616839"
  },
  {
    "text": "going to make sure that everyone has to write down all the exceptions that their code can throw was kind of undone by the reality that well that means we have to",
    "start": "616839",
    "end": "623839"
  },
  {
    "text": "write it down everywhere and and I never used them but is it true that you had to like uh enumerate all the transitively",
    "start": "623839",
    "end": "630120"
  },
  {
    "text": "thrown exceptions from all the functions you called is is that how that work precisely if you didn't catch them if",
    "start": "630120",
    "end": "635240"
  },
  {
    "text": "you if you passed them up then kind of the set set of possible exceptions group yeah okay and so the the research that I",
    "start": "635240",
    "end": "641800"
  },
  {
    "text": "end up doing is well was Java the only ones that ever implemented checked exceptions and within the caveat of",
    "start": "641800",
    "end": "649320"
  },
  {
    "text": "mainstream languages which is up for your your own interpretation I cannot find another language which went and",
    "start": "649320",
    "end": "655760"
  },
  {
    "text": "chose checked exceptions C certainly didn't there's a long thread from 2004",
    "start": "655760",
    "end": "661079"
  },
  {
    "text": "of interviewing with the the C designers like so you didn't you haven't done checked exceptions they're like yeah",
    "start": "661079",
    "end": "667079"
  },
  {
    "text": "we're just waiting we're going to see how it goes we might do it later 15 years later guess they didn't so Java's",
    "start": "667079",
    "end": "672600"
  },
  {
    "text": "kind of out there on its own of the mainstream languages that went down the path of actually forcing people to note",
    "start": "672600",
    "end": "678600"
  },
  {
    "text": "their exceptions great and when I when I write Mo go code these days I wrap the",
    "start": "678600",
    "end": "684200"
  },
  {
    "text": "errors I actually if I call some function and I get an error back Almost",
    "start": "684200",
    "end": "689720"
  },
  {
    "text": "100% of the time I will return that error wrapped in some way and actually I",
    "start": "689720",
    "end": "695519"
  },
  {
    "text": "use the PKG errors package um Dave which I know you worked on uh or did um so",
    "start": "695519",
    "end": "704600"
  },
  {
    "text": "does everyone do that same thing does everyone wrap errors and what's the value in wrapping an error uh I do and",
    "start": "704600",
    "end": "711360"
  },
  {
    "text": "don't so if I want to have context I wrap it if I uh create a new error I",
    "start": "711360",
    "end": "717279"
  },
  {
    "text": "wrap it but sometimes you're not really adding too much information and then I don't so it",
    "start": "717279",
    "end": "723040"
  },
  {
    "text": "depends on the situation yeah I I want to I want to just correct one thing I wrote piki errors but uh it was based on",
    "start": "723040",
    "end": "730519"
  },
  {
    "text": "four years of work that we did in in pych canonical at Juju and giving the credit with c d like a lot of the ideas",
    "start": "730519",
    "end": "737680"
  },
  {
    "text": "which PKG era's built on is built on Roger Pepe's ideas he had Juju errors",
    "start": "737680",
    "end": "743279"
  },
  {
    "text": "and um Ergo that he wrote if anything that the package erors that I have was in in my style of throwing out",
    "start": "743279",
    "end": "749279"
  },
  {
    "text": "everything which I possibly can and leaving only the the band minimalism that was all that I contributed to the",
    "start": "749279",
    "end": "755320"
  },
  {
    "text": "SS package but I I remember sitting sitting in Starbucks with with Roger like 201 2012 and we were we were saying",
    "start": "755320",
    "end": "764240"
  },
  {
    "text": "we had a tradition inside at the time of using form to error F to add an annotation CU always the classic example",
    "start": "764240",
    "end": "771199"
  },
  {
    "text": "something 20 layers down fails and the only area you get is I.O so we had we",
    "start": "771199",
    "end": "777440"
  },
  {
    "text": "had a tradition of r maing the errors with f error F you know the classic the classic style that's documented in um in",
    "start": "777440",
    "end": "785440"
  },
  {
    "text": "Alan Brian's book you know F errf notation colon percent V the error and",
    "start": "785440",
    "end": "790920"
  },
  {
    "text": "having that discussion back then well you know now we've got as a string and have to do substring matching that's",
    "start": "790920",
    "end": "796040"
  },
  {
    "text": "that's not cool like can we can we do it can we do it better and that that was really where the the the ideas for",
    "start": "796040",
    "end": "802160"
  },
  {
    "text": "wrapping an eror so that we could unwrap it so that we could get the original type back because back there at the time",
    "start": "802160",
    "end": "807399"
  },
  {
    "text": "we were very obsessed with the types of things and we really wanted to check them check we got exactly not just the",
    "start": "807399",
    "end": "814519"
  },
  {
    "text": "an error but its specific type ands its specific value so turning into a string form with fter f kind of blew that up",
    "start": "814519",
    "end": "822320"
  },
  {
    "text": "that was where a lot of those ideas um came from the work that the work that Roger um Gustavo did um on the juu",
    "start": "822320",
    "end": "829760"
  },
  {
    "text": "project one of the nice things I like about that story Dave is that errors the the the errors package came out of",
    "start": "829760",
    "end": "835519"
  },
  {
    "text": "actual use it wasn't imagined it came out of real real pain that you had and I think that shows cuz every time there's",
    "start": "835519",
    "end": "842360"
  },
  {
    "text": "a package that just really hits it on the head you realize they've just solved their own problem here and then they've",
    "start": "842360",
    "end": "848880"
  },
  {
    "text": "shared that afterwards sorry Peter yeah and speaking of coming out of actual use Marcel you mentioned that you rra error",
    "start": "848880",
    "end": "855000"
  },
  {
    "text": "sometimes and sometimes you don't and I'd like to dig into that a tiny bit and kind of ask you is is there kind of a",
    "start": "855000",
    "end": "861480"
  },
  {
    "text": "rubric a way to generalize when you do and when you don't that is a bit more um",
    "start": "861480",
    "end": "866680"
  },
  {
    "text": "concrete than you know when it feels like it adds information or not I have my own ideas but I want to hear yours",
    "start": "866680",
    "end": "872199"
  },
  {
    "text": "first sure well so if you have a helper functions within your code for example and you know um that might change you're",
    "start": "872199",
    "end": "879519"
  },
  {
    "text": "just passing an error through the chain up your code basically then some functions don't really add all that much",
    "start": "879519",
    "end": "884759"
  },
  {
    "text": "information so I wouldn't wrap of course there's this other problem that things like packages error solve if I really",
    "start": "884759",
    "end": "891079"
  },
  {
    "text": "want to return some Sentinel error but wrapping it would eradicate that I have to return the Sentinel error even though",
    "start": "891079",
    "end": "897920"
  },
  {
    "text": "I would want to R right sometimes you would want to add this information and we're just standardizing on something",
    "start": "897920",
    "end": "904040"
  },
  {
    "text": "like what package errors does is is uh important um but sometimes there is some",
    "start": "904040",
    "end": "910240"
  },
  {
    "text": "something like too much wrapping I think you you could go there okay so it's still yeah generally I would W try to W",
    "start": "910240",
    "end": "917880"
  },
  {
    "text": "more often than so this is also my experience but I I raised this uh in an",
    "start": "917880",
    "end": "923000"
  },
  {
    "text": "issue comment with um gosh who was it Robert Robert gimer somewhere in GitHub",
    "start": "923000",
    "end": "928360"
  },
  {
    "text": "and his position which I found a little interesting and it makes sense to me is that you only wrap errors once they",
    "start": "928360",
    "end": "934319"
  },
  {
    "text": "cross a package boundary right so the package boundary represents some kind of like a barrier beneath which everything",
    "start": "934319",
    "end": "941279"
  },
  {
    "text": "else is an implementation detail and I get that and I get that in code that has",
    "start": "941279",
    "end": "946560"
  },
  {
    "text": "been carefully thought through and produced and reviewed by essentially intermediate or Advanced programmers but",
    "start": "946560",
    "end": "953240"
  },
  {
    "text": "it really doesn't match with my experience of working in large teams or consulting or anything like like that",
    "start": "953240",
    "end": "959160"
  },
  {
    "text": "where it's very rare that packages are well defined it's very rare that the modularity of the code is such that",
    "start": "959160",
    "end": "965800"
  },
  {
    "text": "packages represent a good coherent boundary and much more often I say just wrap everything and you know maybe if",
    "start": "965800",
    "end": "972480"
  },
  {
    "text": "there's a tiny helper function don't do it there but the risk of overwrapping especially in like private code is much",
    "start": "972480",
    "end": "979279"
  },
  {
    "text": "lower than the risk of underw wrapping when you know the service crashes and you get IO and I wonder if this well like I",
    "start": "979279",
    "end": "986279"
  },
  {
    "text": "mentioned this to Robert and maybe it's worth talking here um I wonder if this represents a um a disconnect in a way",
    "start": "986279",
    "end": "992839"
  },
  {
    "text": "between how go is exper or go is perceived by the core team how it's used in real life and how like maybe those of",
    "start": "992839",
    "end": "1000360"
  },
  {
    "text": "us a bit uh further removed from the um the go team actually see it being used",
    "start": "1000360",
    "end": "1005759"
  },
  {
    "text": "and maybe that's something worth discussing especially in the context of this sort of thing yeah so I I looked at",
    "start": "1005759",
    "end": "1011199"
  },
  {
    "text": "a lot of different types of error uses so I didn't really go for frequency but I wanted to see when I did some research",
    "start": "1011199",
    "end": "1016959"
  },
  {
    "text": "in this like H what different error uh wrapping Styles or error creation styles that people have uh so I looked at uses",
    "start": "1016959",
    "end": "1024360"
  },
  {
    "text": "for different packages but also things like upspin do IO right who's using a",
    "start": "1024360",
    "end": "1029918"
  },
  {
    "text": "different approach to errors and generally there doesn't seem to be a lot of uh consistency here so there's really",
    "start": "1029919",
    "end": "1036240"
  },
  {
    "text": "a large variation of the way people use errors and rep errors um and I really",
    "start": "1036240",
    "end": "1042720"
  },
  {
    "text": "don't think there is one good way so whatever we do we shouldn't constrain people one way or the other right I",
    "start": "1042720",
    "end": "1048520"
  },
  {
    "text": "think it's completely valid in some cases to to w a lot um whereas in other",
    "start": "1048520",
    "end": "1053559"
  },
  {
    "text": "cases you really to so one thing I sometimes do is to not even have a to have an internal type like an quote",
    "start": "1053559",
    "end": "1060240"
  },
  {
    "text": "unquote error type that isn't even implementing the error interface and pass that around and only at a later",
    "start": "1060240",
    "end": "1066400"
  },
  {
    "text": "stage uh convert that into a different error right so that I can really use the compiler to to enforce different",
    "start": "1066400",
    "end": "1073120"
  },
  {
    "text": "properties of the error throughout the system until it you know makes its way out so this is is again very",
    "start": "1073120",
    "end": "1079440"
  },
  {
    "text": "inconsistent with with any of these approaches so yeah what's important is to standardizing something that I think",
    "start": "1079440",
    "end": "1086120"
  },
  {
    "text": "will still allow all these different cases but I think they're all legitimate",
    "start": "1086120",
    "end": "1091400"
  },
  {
    "text": "Carin I know you've done quite a lot of Outreach and probably more than anyone else Among Us do you have any perspective on like ways people use",
    "start": "1091400",
    "end": "1098200"
  },
  {
    "text": "errors or don't use them successfully a lot of it is actually looking at some of the data that other people are um doing",
    "start": "1098200",
    "end": "1105280"
  },
  {
    "text": "using tooling including what Marcel's done and including some people in the community running and it is a mixed bag",
    "start": "1105280",
    "end": "1111559"
  },
  {
    "text": "and it is highly so the community contains multitudes and that also includes people who don't maybe have",
    "start": "1111559",
    "end": "1118120"
  },
  {
    "text": "deep contextual knowledge about the goway or really have gropped an",
    "start": "1118120",
    "end": "1123240"
  },
  {
    "text": "understanding of the go away for error handling like errors as values or implementing the error and for face make",
    "start": "1123240",
    "end": "1129120"
  },
  {
    "text": "everything an error and so there's a lot of conversation and opinions um and it",
    "start": "1129120",
    "end": "1134440"
  },
  {
    "text": "comes back to you know my my final conclusion is the community is it just as because it's bigger we just have a",
    "start": "1134440",
    "end": "1141520"
  },
  {
    "text": "lot more here and there's you know this idea that there's just one way or two ways to do things and go no longer holds",
    "start": "1141520",
    "end": "1148159"
  },
  {
    "text": "water because people are using air handling trying to bridge from other languages that they're coming from",
    "start": "1148159",
    "end": "1153640"
  },
  {
    "text": "whether that be Java Dynamic languages that are um not really used to this idea",
    "start": "1153640",
    "end": "1158679"
  },
  {
    "text": "of sad path first or the idea of like two things that I kind of really like or",
    "start": "1158679",
    "end": "1164520"
  },
  {
    "text": "the idea of really understanding that error um or failure is the default in",
    "start": "1164520",
    "end": "1169720"
  },
  {
    "text": "any computer programming language and erors taught me that Ino and the second thing that I really learned was this",
    "start": "1169720",
    "end": "1176159"
  },
  {
    "text": "idea of mechanical sympathy which is something that I didn't hear prior to coming to go and using go but now I hear",
    "start": "1176159",
    "end": "1181720"
  },
  {
    "text": "it all the time and errors kind of becomes front and center in that and so",
    "start": "1181720",
    "end": "1187640"
  },
  {
    "text": "um I kind of went on a little bit on there Peter but yeah it's all over the the map I also wonder like when you say",
    "start": "1187640",
    "end": "1194200"
  },
  {
    "text": "um doing sort of analysis of the code that's out there right to me automatically um biases the data you're",
    "start": "1194200",
    "end": "1200840"
  },
  {
    "text": "getting because at least in my experience um Consulting and and and speaking to people and meetups and stuff",
    "start": "1200840",
    "end": "1207440"
  },
  {
    "text": "the I would say vast majority of go code is in private repos right and I can say more about my experience than that but I",
    "start": "1207440",
    "end": "1213960"
  },
  {
    "text": "wonder how how we're biasing oh an enormous amount a mountainous amount like that 90% below the below the water",
    "start": "1213960",
    "end": "1221120"
  },
  {
    "text": "line yeah so I I wonder if we're making decisions based on patterns we see in open source repos if we're really",
    "start": "1221120",
    "end": "1227600"
  },
  {
    "text": "responding to go as it is used in in practice don't don't don't forget how how how do you learn how do you learn",
    "start": "1227600",
    "end": "1233919"
  },
  {
    "text": "anything like like from from being a child through to being an experienced programmer first day you sit and you",
    "start": "1233919",
    "end": "1240520"
  },
  {
    "text": "look to the left you do what the person to your left is doing what I I'm see coming into recently I worked for was",
    "start": "1240520",
    "end": "1247440"
  },
  {
    "text": "acquired by another and coming into a very now very large company um that has very strong graduate recruitment program",
    "start": "1247440",
    "end": "1252960"
  },
  {
    "text": "so we have a very the The Funnel of experience is very very wide at the bottom f coming out of um either interns",
    "start": "1252960",
    "end": "1260799"
  },
  {
    "text": "or their first job um as grads they have only the background the the two tools",
    "start": "1260799",
    "end": "1266120"
  },
  {
    "text": "they have at their disposal are the background that they learned in in University which is probably driving",
    "start": "1266120",
    "end": "1271400"
  },
  {
    "text": "them more to towards Java there's a there's a huge kind of like tension inside University you should University",
    "start": "1271400",
    "end": "1277039"
  },
  {
    "text": "teach people to expand their mind or should it prepare them for um industry there this huge pressure inside the um C",
    "start": "1277039",
    "end": "1283960"
  },
  {
    "text": "curriculums to kind of resolve that in the way that in wants programmers trained so they can start straight away",
    "start": "1283960",
    "end": "1290679"
  },
  {
    "text": "so the languages they they use a little bit of python little bit of java um if you're coming out of the Australian",
    "start": "1290679",
    "end": "1295720"
  },
  {
    "text": "system a little bit of prologue just to you add some spice and then so that that's that's one tool that that they",
    "start": "1295720",
    "end": "1300880"
  },
  {
    "text": "have available to them the other is the code that they're being asked to maintain which is literally the the the",
    "start": "1300880",
    "end": "1307640"
  },
  {
    "text": "kind of conceptualization of look to your left cu the person to your left just wrote that code and so it can um",
    "start": "1307640",
    "end": "1314720"
  },
  {
    "text": "drive an enormous amount of group think of trying to fit in of trying to model",
    "start": "1314720",
    "end": "1320240"
  },
  {
    "text": "what they see to the left and uh what I'm getting at with that is literally like like a tiny perturbation of a a",
    "start": "1320240",
    "end": "1326679"
  },
  {
    "text": "particular house style will Bloom as this is the way that we do it here to make a completely Rand um random",
    "start": "1326679",
    "end": "1332640"
  },
  {
    "text": "observation you can trace the genus of that PKG directory I don't want to make",
    "start": "1332640",
    "end": "1337960"
  },
  {
    "text": "don't want to make make this a hobby horse to stand on but you can trace the genus of that PKG directory that is in",
    "start": "1337960",
    "end": "1343880"
  },
  {
    "text": "all the inside the kubernetes repos that have PKG all the way back to the way that goes written in 1.0 for for",
    "start": "1343880",
    "end": "1350960"
  },
  {
    "text": "historical reasons cuz we had a make file packages were in this directory called PKG and other things were in a",
    "start": "1350960",
    "end": "1356080"
  },
  {
    "text": "different directory and in the terms of like oh I see that in this is the big popular go repo I will follow that style",
    "start": "1356080",
    "end": "1363880"
  },
  {
    "text": "so most of what you most of what I see in private repositories is across now",
    "start": "1363880",
    "end": "1370640"
  },
  {
    "text": "six or seven different companies of I've programed go is a kind of this is the way that we do it here kind of thing",
    "start": "1370640",
    "end": "1376919"
  },
  {
    "text": "without a great deal of understanding of of why yeah so what about that though because being consistent within a code",
    "start": "1376919",
    "end": "1383440"
  },
  {
    "text": "base is there's value in that isn't there so but do you just mean that there's just this inertia that happens",
    "start": "1383440",
    "end": "1390480"
  },
  {
    "text": "and it just gets unchecked and that's how a lot of these things can come about a lack of reflexivity a lack of why do",
    "start": "1390480",
    "end": "1396880"
  },
  {
    "text": "we always wrap here and I think this goes to um both Peter and Marcel's point that there there there's enormous way",
    "start": "1396880",
    "end": "1402360"
  },
  {
    "text": "that to take the example of over rapping of like um annotating on every single um error return path comes out of",
    "start": "1402360",
    "end": "1408919"
  },
  {
    "text": "traditions of well this is just how we do it here you know you get if you're level one you get pulled up on your PR",
    "start": "1408919",
    "end": "1414679"
  },
  {
    "text": "reviews if you don't annotate every um error message I certainly remember that when we were really really into that um",
    "start": "1414679",
    "end": "1421320"
  },
  {
    "text": "in Juju we would you know that would be the number one thing we pick up on didn't wrap here didn't wrap here didn't wrap here didn't wrap here in the same",
    "start": "1421320",
    "end": "1427480"
  },
  {
    "text": "way it be like always comment your functions always had a a dock string that kind of thing so it can be enforced",
    "start": "1427480",
    "end": "1433120"
  },
  {
    "text": "by rot but also again without a lot of reflexivity of what is the value of this",
    "start": "1433120",
    "end": "1438480"
  },
  {
    "text": "so one one of the things that in the SS package that I made a mistake very early on is following these these patterns",
    "start": "1438480",
    "end": "1444679"
  },
  {
    "text": "that we established in Juju the first thing I had was a wrap function so that you could on every error return wrap on",
    "start": "1444679",
    "end": "1450279"
  },
  {
    "text": "every way out and and then after trying this on my own code for a while I realized that the message in the code",
    "start": "1450279",
    "end": "1456240"
  },
  {
    "text": "that I wrote was actually the name of the function that it was in so it was in an open file the message would be open",
    "start": "1456240",
    "end": "1462000"
  },
  {
    "text": "file failed to open file and so I thought oh well why am I just duplicate I'm literally in code duplicating the",
    "start": "1462000",
    "end": "1468880"
  },
  {
    "text": "stack trace and so I changed the errors package quite soon after it was released publicly to not just capture the stack",
    "start": "1468880",
    "end": "1475960"
  },
  {
    "text": "line but actually catch the whole stack Trace because and and I'm getting getting to Peter's point in in my mind",
    "start": "1475960",
    "end": "1482480"
  },
  {
    "text": "if your code is well factored and the audio listens I'm making the the scare quotes thing if your code is well",
    "start": "1482480",
    "end": "1488000"
  },
  {
    "text": "factored then kind of the the the stack Trace like the name of the function the stack Trace is a very good proxy for the",
    "start": "1488000",
    "end": "1494960"
  },
  {
    "text": "little message that you would annotate with but to get to Peter's point that that's a big if like code is well",
    "start": "1494960",
    "end": "1501159"
  },
  {
    "text": "factored like people have good function names they use packages all all these things which perhaps we we we as",
    "start": "1501159",
    "end": "1507320"
  },
  {
    "text": "advanced go programmers like well of course you do all these things okay I love to sit down and teach people how to",
    "start": "1507320",
    "end": "1512360"
  },
  {
    "text": "do these things but there's no evidence that those practices actually permeate",
    "start": "1512360",
    "end": "1517840"
  },
  {
    "text": "out into industry where people are learning either by a root or bringing a lot of their well this is how I used to",
    "start": "1517840",
    "end": "1523520"
  },
  {
    "text": "do it at high school kind of uh or this is how I used to do my last job or this is how I used to do it in Python when I",
    "start": "1523520",
    "end": "1529000"
  },
  {
    "text": "was a python programmer experience to go those Traditions don't translate over so",
    "start": "1529000",
    "end": "1534919"
  },
  {
    "text": "there are error handling strategies all of the ways that they approach go um go code is different the way that we I mean",
    "start": "1534919",
    "end": "1541640"
  },
  {
    "text": "but by definition we are successful we we've all I think Collective room be programming for 5 6 7 10 years in go",
    "start": "1541640",
    "end": "1547799"
  },
  {
    "text": "like we had to be doing something right to get this far we kind of transposing those values onto people without a lot",
    "start": "1547799",
    "end": "1553559"
  },
  {
    "text": "of um without a lot of background it's really interesting I never really thought about",
    "start": "1553559",
    "end": "1560039"
  },
  {
    "text": "[Music]",
    "start": "1560800",
    "end": "1570080"
  },
  {
    "text": "that this episode is brought to you by robar move fast and fix things resolve",
    "start": "1570080",
    "end": "1576240"
  },
  {
    "text": "errors in minutes and deploy with confidence head to roar.com changelog requested demo get started today it's",
    "start": "1576240",
    "end": "1583200"
  },
  {
    "text": "loved by developers trusted by Enterprises and most of all we use it here change log move fast and fix things",
    "start": "1583200",
    "end": "1590520"
  },
  {
    "text": "with rollbar once again rar.com [Music]",
    "start": "1590520",
    "end": "1607480"
  },
  {
    "text": "changelog whenever I wrap errors I do it really so that I don't need the stack Trace I kind of you know stack Trace",
    "start": "1607480",
    "end": "1613720"
  },
  {
    "text": "would also do for me too yeah it is about just finding finding out where that error came from some errors like in",
    "start": "1613720",
    "end": "1621399"
  },
  {
    "text": "the OS package for example the error will if if you try and open a file and it's not there it it contains the file",
    "start": "1621399",
    "end": "1628120"
  },
  {
    "text": "name I think in the actual error message so you kind of have everything you need really saying I trying to open this file",
    "start": "1628120",
    "end": "1634360"
  },
  {
    "text": "I didn't have it but if you if I was just opening one file in the program then of course I probably wouldn't bother wrapping that but if I'm going to",
    "start": "1634360",
    "end": "1640520"
  },
  {
    "text": "have some some program that's going to deal with files and and they've got a",
    "start": "1640520",
    "end": "1645840"
  },
  {
    "text": "few points throughout my codebase where I'm going to be doing that then I'll use wrapping to just sort of tell me where",
    "start": "1645840",
    "end": "1651720"
  },
  {
    "text": "you know where those points are and that idea of just having the errors just",
    "start": "1651720",
    "end": "1656880"
  },
  {
    "text": "wrapping them only when they cross the package boundary wouldn't work for me because you know internally i' still",
    "start": "1656880",
    "end": "1662399"
  },
  {
    "text": "need to know all that stuff as well I I think that goes to to um P Peter's early",
    "start": "1662399",
    "end": "1667840"
  },
  {
    "text": "point which is you know I'm a big fan of this manra of like package to do one thing its name",
    "start": "1667840",
    "end": "1674200"
  },
  {
    "text": "should be the you know the ultimate one on line description of of what what it provides to you that's really not the",
    "start": "1674200",
    "end": "1679720"
  },
  {
    "text": "case in Industry um I'm sure all of us have seen have seen so many code bases",
    "start": "1679720",
    "end": "1684919"
  },
  {
    "text": "that are packages are facted along Java lines or along ruon rails lines you know",
    "start": "1684919",
    "end": "1690760"
  },
  {
    "text": "a package called controllers a package called forms a million packages called utilities or no",
    "start": "1690760",
    "end": "1696720"
  },
  {
    "text": "packages at all and in that sense of I just wrote the code in the file because I didn't know where else to put it",
    "start": "1696720",
    "end": "1703919"
  },
  {
    "text": "without any of that structure that is where I I I in individually I find that people write a lot of kind of rapping",
    "start": "1703919",
    "end": "1710080"
  },
  {
    "text": "comments because they literally don't have any structure in their code to give them to to to fall back on it's all just",
    "start": "1710080",
    "end": "1717519"
  },
  {
    "text": "in one it's all just in one big old package or Worse they've imported a library that someone else has written",
    "start": "1717519",
    "end": "1723000"
  },
  {
    "text": "that was usually the advice from the ARs package I I I don't claim to have have made it up but um the example where",
    "start": "1723000",
    "end": "1730440"
  },
  {
    "text": "Where do you rrap um you wrap when you call into somebody else's code obviously",
    "start": "1730440",
    "end": "1735840"
  },
  {
    "text": "that that's in a different package but at the time before um the work that Marcel and um Jonathan Amsterdam did and",
    "start": "1735840",
    "end": "1743600"
  },
  {
    "text": "Daniel his last name putting wrapping into the standard Library if you're calling into something in the standard",
    "start": "1743600",
    "end": "1749200"
  },
  {
    "text": "Library by definition that error would be un unadorned unwrapped so it wouldn't",
    "start": "1749200",
    "end": "1754320"
  },
  {
    "text": "have a stack Trace associated with it and this was the thing that coming back to um what programmers expect coming to",
    "start": "1754320",
    "end": "1761720"
  },
  {
    "text": "go is they really expect a stack Trace whether that's useful or not to them is I think independent of the fact that",
    "start": "1761720",
    "end": "1768159"
  },
  {
    "text": "that's what they're used to in other languages python will explode with a stack Trace Java will give you a stack Trace any day of the week they're like",
    "start": "1768159",
    "end": "1775120"
  },
  {
    "text": "where's okay I have an error where's my stack trace and that was the one of the the selling features of the errors",
    "start": "1775120",
    "end": "1781159"
  },
  {
    "text": "package like people like errors with stack traces we love it this is we understand exactly how this works so if you want to if you want to guarantee",
    "start": "1781159",
    "end": "1787960"
  },
  {
    "text": "that you at least get a stack Trace that leads you at least part of the way there even if you fall into the standard",
    "start": "1787960",
    "end": "1793519"
  },
  {
    "text": "library or some package that somebody else has wrote at those interface B boundaries where you're talking to",
    "start": "1793519",
    "end": "1799640"
  },
  {
    "text": "somebody else's code that's where you WP there's a point to be made here and I'm seeing it also in the go time FM Flack",
    "start": "1799640",
    "end": "1806480"
  },
  {
    "text": "Channel and that is all the things that we're talking about take a really long time to develop an intuition for right",
    "start": "1806480",
    "end": "1813399"
  },
  {
    "text": "and especially in the goway of doing things it just takes time and there's a mental model that needs to build up and",
    "start": "1813399",
    "end": "1820039"
  },
  {
    "text": "if you're more pragmatic you just want to get the job done and so you're looking left as you say Dave and you",
    "start": "1820039",
    "end": "1825760"
  },
  {
    "text": "copy the thing and it compiles you build it and you run off and you're go into the sunset just get your job done 9 to5",
    "start": "1825760",
    "end": "1832080"
  },
  {
    "text": "and it takes a long time to build up these mental models surrounding like clear package boundaries or how best to",
    "start": "1832080",
    "end": "1839240"
  },
  {
    "text": "use errors or even like why would I want to do one versus the other are there maxims are there Proverbs and it just",
    "start": "1839240",
    "end": "1846000"
  },
  {
    "text": "takes a long time and it's really hard to teach and it's really hard unless you are in it every day for a number of",
    "start": "1846000",
    "end": "1852480"
  },
  {
    "text": "months even years absolutely for for for me I'm less interested in the your",
    "start": "1852480",
    "end": "1857679"
  },
  {
    "text": "rapping and more interested in the actual like to to to bring to the to today's topic the actual mechanics of",
    "start": "1857679",
    "end": "1864240"
  },
  {
    "text": "what happens in that if eror not equal nil block all the time that that I've been involved in go there have been this",
    "start": "1864240",
    "end": "1870720"
  },
  {
    "text": "kind of set of set of repeated themes of trying to reduce the verbosity of this",
    "start": "1870720",
    "end": "1875840"
  },
  {
    "text": "like I you know like like the meme of bad Fitzpatrick with his pedal that makes the makes the little stanza is is",
    "start": "1875840",
    "end": "1882080"
  },
  {
    "text": "a direct reaction to the I dislike having to type the same thing over again um there's an highly different R which",
    "start": "1882080",
    "end": "1888000"
  },
  {
    "text": "will not fit in this podcast about the evil of um the notion of dry above anything else but there's a reaction to",
    "start": "1888000",
    "end": "1894519"
  },
  {
    "text": "the like the visal reaction to the mechanical of having to type those you if error not equal nil return error and",
    "start": "1894519",
    "end": "1900880"
  },
  {
    "text": "and Dave if you don't mind I just want to jump in and and maybe highlight um maybe it's worth drawing a distinction",
    "start": "1900880",
    "end": "1906679"
  },
  {
    "text": "between simply the verbosity of that check um and all the parts that you have to repeat including the return whatever",
    "start": "1906679",
    "end": "1913840"
  },
  {
    "text": "within the middle of it and uh for me at least somehow the semantics of it and",
    "start": "1913840",
    "end": "1918880"
  },
  {
    "text": "that's probably the wrong word but the idea like we spoke at the beginning of the podcast um it's a critical part of",
    "start": "1918880",
    "end": "1925200"
  },
  {
    "text": "go in my opinion that errors are handled directly upfront and not kind of uh",
    "start": "1925200",
    "end": "1930440"
  },
  {
    "text": "deferred to some other scope or some other place where you know context might be lost and um for me at least that",
    "start": "1930440",
    "end": "1937760"
  },
  {
    "text": "semantic or whatever it is is extremely important to keep and to not lose uh the verocity we can talk about but I wonder",
    "start": "1937760",
    "end": "1944399"
  },
  {
    "text": "if other people feel that first of all that if that distinction make sense and second of all if they agree with me yeah",
    "start": "1944399",
    "end": "1949880"
  },
  {
    "text": "that that makes absolute sense and uh any of the proposals you'll see from the go team they have that property right",
    "start": "1949880",
    "end": "1955960"
  },
  {
    "text": "like we're going to treat errors as values going to keep the context I do not agree I do not agree well can you",
    "start": "1955960",
    "end": "1961760"
  },
  {
    "text": "give an example of one where it's not I think try definitely does not and I think that because uh because it's",
    "start": "1961760",
    "end": "1968080"
  },
  {
    "text": "designed as a built-in as a function it can be interlaced several times in an expression and the handling of that",
    "start": "1968080",
    "end": "1974240"
  },
  {
    "text": "error is then deferred to either uh the verb block at the top of the function or uh the the calling scope and you don't",
    "start": "1974240",
    "end": "1981480"
  },
  {
    "text": "actually uh deal with it in situe so in practice it's not actually a function",
    "start": "1981480",
    "end": "1986639"
  },
  {
    "text": "right it's a macro uh and I've stressed this very point that you've made I've stressed this to Robert and he assured",
    "start": "1986639",
    "end": "1992559"
  },
  {
    "text": "that we will be able to find the original location of the error what what do you mean by that uh so the context in",
    "start": "1992559",
    "end": "1999919"
  },
  {
    "text": "which which it occurred right so if you want to go oh but I mean I mean I mean visually like in a code review context",
    "start": "1999919",
    "end": "2005519"
  },
  {
    "text": "not yeah like a stack tra so how is that visually uh not retained because a tri a",
    "start": "2005519",
    "end": "2011679"
  },
  {
    "text": "a tri macro is just the uh a shorter version of the if then else right or if the if them check I think what Peter's",
    "start": "2011679",
    "end": "2018279"
  },
  {
    "text": "talking about is uh there's an example that's been posted many many times in the various issue forums which is",
    "start": "2018279",
    "end": "2024880"
  },
  {
    "text": "because try effectively two values enter one leaves and because there only now",
    "start": "2024880",
    "end": "2030519"
  },
  {
    "text": "you get a single single return value at the end you can chain things together so the the example people love love to show",
    "start": "2030519",
    "end": "2036480"
  },
  {
    "text": "is try os. open Dot doing something with the thing that was red do doing something that and stacking them up with",
    "start": "2036480",
    "end": "2044080"
  },
  {
    "text": "tries using try to kind of turn a multivariable multiple return argument",
    "start": "2044080",
    "end": "2049320"
  },
  {
    "text": "back into a single one and then build that kind of fluent pattern out of it so on one line you have many tries wrapped",
    "start": "2049320",
    "end": "2057480"
  },
  {
    "text": "either try this dot try that dot try something else or tries kind of wrapped one one in the other this is this is a",
    "start": "2057480",
    "end": "2063919"
  },
  {
    "text": "very very poor medium to express that um but the the thing is that you have now this option of this this idea of open",
    "start": "2063919",
    "end": "2070800"
  },
  {
    "text": "read and close all stacked onto one line permitted by this kind of TR macro or triy helper function that is taking",
    "start": "2070800",
    "end": "2078118"
  },
  {
    "text": "taking the error values strip stripping or filtering filtering them out and then returning you actually the thing in the",
    "start": "2078119",
    "end": "2084599"
  },
  {
    "text": "success success case that you can then move on you go from the very kind of",
    "start": "2084599",
    "end": "2089800"
  },
  {
    "text": "declarative um imperative style of open the thing check error return read the",
    "start": "2089800",
    "end": "2095118"
  },
  {
    "text": "thing check error return close the thing check ER return to more kind of fluent style of open the thing read the thing",
    "start": "2095119",
    "end": "2102079"
  },
  {
    "text": "close the thing all them online very very very neat and incise you can do that too with if you call a function",
    "start": "2102079",
    "end": "2108119"
  },
  {
    "text": "that returns another function that you can that you're then going to defer then you can cram that onto one line as well",
    "start": "2108119",
    "end": "2113599"
  },
  {
    "text": "and you end up with basically two sets of brackets at the end two sets of parentheses at the end is it just that we have to be disciplined when we write",
    "start": "2113599",
    "end": "2120960"
  },
  {
    "text": "code and just not do it like that or is is that nested try thing represented as",
    "start": "2120960",
    "end": "2126480"
  },
  {
    "text": "a feature of try I think they've they've been stressing the discipline uh part of it sorry uh uh quite a bit like you you",
    "start": "2126480",
    "end": "2134119"
  },
  {
    "text": "you just shouldn't go overboard with this if if we get to the point that we have generics and go like all of this",
    "start": "2134119",
    "end": "2139760"
  },
  {
    "text": "would be very easy to simulate also right so there is still a matter of of a",
    "start": "2139760",
    "end": "2145280"
  },
  {
    "text": "certain style that people should adopt to make things clear right like whether there's try or not whether there's",
    "start": "2145280",
    "end": "2150480"
  },
  {
    "text": "generics or not so this gets I think to an interesting uh maybe philosophical",
    "start": "2150480",
    "end": "2155640"
  },
  {
    "text": "point which is there's certainly people that want this chain ability right people who look at go and say well I",
    "start": "2155640",
    "end": "2160720"
  },
  {
    "text": "don't care I want to be able to change expressions and just um deal with it this way in fact there was recently a",
    "start": "2160720",
    "end": "2166040"
  },
  {
    "text": "blog post about the same program written in three programming languages image manipulation program they did one in",
    "start": "2166040",
    "end": "2172079"
  },
  {
    "text": "Rust in go and Python and the author explicitly said you know I wish go had this rust question mark uh macro or",
    "start": "2172079",
    "end": "2179000"
  },
  {
    "text": "whatever so I could do all this at once but my question is if we give them that does that not subvert what I think is",
    "start": "2179000",
    "end": "2185160"
  },
  {
    "text": "like a really core principle of Go the language which is that this sort of occlusion of the sad path is like",
    "start": "2185160",
    "end": "2193040"
  },
  {
    "text": "problematic I mean I certainly believe this but I've been doing this for a long time I'm like fully on board the uh the",
    "start": "2193040",
    "end": "2198960"
  },
  {
    "text": "hype train or whatever and maybe it's not true maybe maybe I am too rigid in this belief but that's certainly what I",
    "start": "2198960",
    "end": "2204440"
  },
  {
    "text": "think now and that's certainly why I push back against this kind of thing in my own head if I see try right um it's",
    "start": "2204440",
    "end": "2210480"
  },
  {
    "text": "it's exactly the same as what we had before just shorter right but I can imagine that it will be interpreted",
    "start": "2210480",
    "end": "2216200"
  },
  {
    "text": "differently by by other people okay I I I want to respond to that because the",
    "start": "2216200",
    "end": "2221560"
  },
  {
    "text": "tri proposal as it stands now cannot replace every instance of if error not",
    "start": "2221560",
    "end": "2227319"
  },
  {
    "text": "equal nil which which means when you say if I see try in a code review that means",
    "start": "2227319",
    "end": "2233480"
  },
  {
    "text": "there are plenty of cases where there there will not be try so now instead of having one way of handling the error",
    "start": "2233480",
    "end": "2240440"
  },
  {
    "text": "return from a function using good old if there are now two different ones the great concern that I have is again um",
    "start": "2240440",
    "end": "2247480"
  },
  {
    "text": "following this line of try Tres us outed the language people are going to want to use it I mean by definition why would a",
    "start": "2247480",
    "end": "2253800"
  },
  {
    "text": "feature be added to such a Spartan language if we weren't supposed to use it that's a really complicated um",
    "start": "2253800",
    "end": "2259720"
  },
  {
    "text": "message to try try and explain and teaching class and in in explaining blog",
    "start": "2259720",
    "end": "2265040"
  },
  {
    "text": "posts and explain certainly in my position explaining code reviews that that using the new shiny thing is",
    "start": "2265040",
    "end": "2271200"
  },
  {
    "text": "actually not appropriate in this case like looking at the data that's been provided let's let's let's in in any of",
    "start": "2271200",
    "end": "2277560"
  },
  {
    "text": "the data I've looked at it's less than 5% less than 1% in the case of my codas let's let's be let's be super generous",
    "start": "2277560",
    "end": "2283720"
  },
  {
    "text": "and say 20% of cases can be replaced with try like one in five that means",
    "start": "2283720",
    "end": "2289359"
  },
  {
    "text": "there's going to be this constant pressure in every single code review of like oh you should use try there and the",
    "start": "2289359",
    "end": "2295520"
  },
  {
    "text": "person arguing well I think it's actually more complicated it doesn't fit it's doesn't fit into that 20% case so",
    "start": "2295520",
    "end": "2301640"
  },
  {
    "text": "in attempting to bring uh to bring a style that that favors making the happy path e I enormously harder for the thing",
    "start": "2301640",
    "end": "2309640"
  },
  {
    "text": "every programmer does every day which is uh is negotiate incode R viws by by",
    "start": "2309640",
    "end": "2314839"
  },
  {
    "text": "giving an option by by saying oh this this you can use this most of the time",
    "start": "2314839",
    "end": "2320560"
  },
  {
    "text": "but actually 80% of the time this doesn't apply well um I I think the focus on trying to make the happy path",
    "start": "2320560",
    "end": "2326480"
  },
  {
    "text": "easier um to appease people who want this fluence St is in the broader view",
    "start": "2326480",
    "end": "2331520"
  },
  {
    "text": "that I look at and counterproductive so it depends a little bit on the type of code code you're dealing with how often",
    "start": "2331520",
    "end": "2338040"
  },
  {
    "text": "it would be useful so if you look at system code or if you if you look at the Go code base for example there's",
    "start": "2338040",
    "end": "2343520"
  },
  {
    "text": "actually very few cases where try will be useful uh the higher you go up to stack uh the more you're using other",
    "start": "2343520",
    "end": "2349920"
  },
  {
    "text": "people's libraries the more useful it will get uh sometimes it would even uh you know",
    "start": "2349920",
    "end": "2355400"
  },
  {
    "text": "reduce quite a large impact on the on the size of your code and actually make it more readable right so it really",
    "start": "2355400",
    "end": "2361720"
  },
  {
    "text": "depends on the the type of code you're writing I can't get on board with you make more readable that the but the",
    "start": "2361720",
    "end": "2366760"
  },
  {
    "text": "point that I wanted to make before is there's a thing that happens inside are every error check um and most people",
    "start": "2366760",
    "end": "2373160"
  },
  {
    "text": "don't see it because a lot of the time it's it's actually invisible it's the cleanup the thing that happens in the",
    "start": "2373160",
    "end": "2380079"
  },
  {
    "text": "block once you said error isn't actually nil open brace it happens on that line",
    "start": "2380079",
    "end": "2386520"
  },
  {
    "text": "before you return from the function and that's cleaning up that's undoing the work the work that you've done and yes",
    "start": "2386520",
    "end": "2392599"
  },
  {
    "text": "we have mechanisms like defer deferring that but the most important thing in my mind that you do in that error path is",
    "start": "2392599",
    "end": "2399160"
  },
  {
    "text": "you put the state back to where it was you make sure that you can retry that functional you do whatever it is that",
    "start": "2399160",
    "end": "2405359"
  },
  {
    "text": "okay this this failed to happen we need to put the we need to put this the we",
    "start": "2405359",
    "end": "2410400"
  },
  {
    "text": "need to correct the state and then return out of that function and let the caller deal with its correcting of the",
    "start": "2410400",
    "end": "2415440"
  },
  {
    "text": "state and dealing with the error um and even though it's uh it's explicit there",
    "start": "2415440",
    "end": "2421599"
  },
  {
    "text": "on the page the fact that if there is no line between if not equal nil and return",
    "start": "2421599",
    "end": "2426800"
  },
  {
    "text": "then you know that there is no cleanup it's not hidden anywhere else it's not smuggled it's not smuggled into a fur",
    "start": "2426800",
    "end": "2432160"
  },
  {
    "text": "it's not smuggled via um some some very clever thing of a named return value you",
    "start": "2432160",
    "end": "2437400"
  },
  {
    "text": "know right there that's that's all we need to and also as a code reviewer when you do see some work before that um eror",
    "start": "2437400",
    "end": "2445079"
  },
  {
    "text": "return you know very clearly ah I need to pay a lot of attention to this because this is this is in the aath this",
    "start": "2445079",
    "end": "2450160"
  },
  {
    "text": "is trying to this is trying to correct um correct or put the world into a sane State before this function returns this",
    "start": "2450160",
    "end": "2456440"
  },
  {
    "text": "is the most important thing because this is the this is part of the airor handling path and it's right there in the block but if you're not already",
    "start": "2456440",
    "end": "2463079"
  },
  {
    "text": "using the fur for those cases you would still be using a if D check right yes",
    "start": "2463079",
    "end": "2468720"
  },
  {
    "text": "the canonical example is the one that we've um always B around which is file copy which is you started to open one",
    "start": "2468720",
    "end": "2474280"
  },
  {
    "text": "file you you've you temporarily you started to uh make a new temporary file on disk defer isn't going to help you",
    "start": "2474280",
    "end": "2480960"
  },
  {
    "text": "because that that's only applicable for actions that happen on both success and the failure case normally those file",
    "start": "2480960",
    "end": "2486839"
  },
  {
    "text": "Copy Type examples you have to in your error path if you're at the point where you've created the temporary file you",
    "start": "2486839",
    "end": "2492240"
  },
  {
    "text": "need to delete the temporary file so the world goes back to how it was beforehand um so as you say that's not applicable",
    "start": "2492240",
    "end": "2497400"
  },
  {
    "text": "for try and I think that's kind of kind of my point I think there is a pressure to try and find more places to make",
    "start": "2497400",
    "end": "2504520"
  },
  {
    "text": "where try could work because there's no point in adding a feature that no one can use but from from my point of view",
    "start": "2504520",
    "end": "2511520"
  },
  {
    "text": "this explicitness is something that is um to be cherished like it's super",
    "start": "2511520",
    "end": "2516680"
  },
  {
    "text": "critical to making reliable code in any moves to kind of hide that or in cases",
    "start": "2516680",
    "end": "2522839"
  },
  {
    "text": "where it's not important introduce a kind of simple syntax misses the point it dissuades programmers from thinking about error handling first yes it is",
    "start": "2522839",
    "end": "2529920"
  },
  {
    "text": "annoying but you have to do it first if you want to write reliable programs is it a bit like G run because G run is",
    "start": "2529920",
    "end": "2537160"
  },
  {
    "text": "kind of we probably don't use G run in production anywhere you you know we use go build we build the binary we deploy",
    "start": "2537160",
    "end": "2543720"
  },
  {
    "text": "binaries and things like that but G run is use ful at the time when you when you're just sort of playing around with",
    "start": "2543720",
    "end": "2549200"
  },
  {
    "text": "things and you want to just as you're learning really go run can be useful to just run a you know you don't it doesn't",
    "start": "2549200",
    "end": "2555000"
  },
  {
    "text": "matter it's kind of magic it's doing a build secretly in a temp folder and things but it's okay because you know",
    "start": "2555000",
    "end": "2561240"
  },
  {
    "text": "it's a learning tool does try fall into that I think if you have to assume um or",
    "start": "2561240",
    "end": "2567040"
  },
  {
    "text": "you have to assume that if you're providing functionality like try it will be ending up in production codes all",
    "start": "2567040",
    "end": "2572400"
  },
  {
    "text": "over the place so if it's supposed to be that then it shouldn't be addit right so",
    "start": "2572400",
    "end": "2577920"
  },
  {
    "text": "it's not just for learning only but what I mean really is then for some if you",
    "start": "2577920",
    "end": "2583880"
  },
  {
    "text": "were going to write a really simple program I could see a case where you just use try because all you're going to",
    "start": "2583880",
    "end": "2589760"
  },
  {
    "text": "ever be doing is returning the error and you could write that program and maybe if you come from an a language with",
    "start": "2589760",
    "end": "2595800"
  },
  {
    "text": "exceptions maybe you could that would read in a more familiar way and things I mean you know I'm just trying to explore",
    "start": "2595800",
    "end": "2602480"
  },
  {
    "text": "that because I personally just because of the way that I do R all over the",
    "start": "2602480",
    "end": "2607680"
  },
  {
    "text": "place I don't think I would use try very often and then I'm in the situation",
    "start": "2607680",
    "end": "2614720"
  },
  {
    "text": "where there are like Dave said there are some some of the code has try some of it doesn't and and there's a few other",
    "start": "2614720",
    "end": "2621040"
  },
  {
    "text": "things that I feel like I would lose as well something that I noticed I do is the shape now of this little if air",
    "start": "2621040",
    "end": "2627319"
  },
  {
    "text": "doesn't equal nil check that when I scan through code that tells me something",
    "start": "2627319",
    "end": "2633280"
  },
  {
    "text": "about the landscape of this code you know it really helps with the sort of scanning it and I wonder if we'd lose",
    "start": "2633280",
    "end": "2640200"
  },
  {
    "text": "that or I mean if it was everywhere I feel like it's okay but the fact that we're going to have a mix of it I don't",
    "start": "2640200",
    "end": "2646920"
  },
  {
    "text": "know like it feels like multiple ways of doing something and and the tradeoffs and yeah I'm I'm sensitive that same",
    "start": "2646920",
    "end": "2654160"
  },
  {
    "text": "kind of instinct that you know something exists now that is useful to me the structure of the um there's a special",
    "start": "2654160",
    "end": "2660760"
  },
  {
    "text": "word for this thing where like everything's only one level indented it's like a it's even listed in the code",
    "start": "2660760",
    "end": "2666200"
  },
  {
    "text": "of view comments anyway whatever that property is it's nice I like it I can leverage it now and this uh new thing will change that but uh as I'm getting",
    "start": "2666200",
    "end": "2673400"
  },
  {
    "text": "older I realized this is the same format that a lot of things take that eventually turn you into an old man",
    "start": "2673400",
    "end": "2679200"
  },
  {
    "text": "yelling at a cloud I at least personally try to like dial that back down a little bit maybe it would be worse maybe not I'm not quite sure but I guess there's",
    "start": "2679200",
    "end": "2685400"
  },
  {
    "text": "one thing actually sorry to grab this again worth highlighting which is that",
    "start": "2685400",
    "end": "2690559"
  },
  {
    "text": "uh which I think you hinted at which is that you know we may not use it in our typical error handling patterns but",
    "start": "2690559",
    "end": "2695920"
  },
  {
    "text": "plenty of new people will right and uh at least I believe a lot of new people will overuse it and it will be our job",
    "start": "2695920",
    "end": "2702440"
  },
  {
    "text": "as like code reviewers to say you know it doesn't make sense here it does make sense here the point is that we're all kind of like we're not programming in",
    "start": "2702440",
    "end": "2708079"
  },
  {
    "text": "isolation we don't have to worry about only our use we have to worry about the use that other people have and the code that we will see that other people will",
    "start": "2708079",
    "end": "2714359"
  },
  {
    "text": "commit and push and um we may not have a voice in so it's it's like should a language fature you know guide people to",
    "start": "2714359",
    "end": "2720599"
  },
  {
    "text": "the right path gently or should it just you know be there and you can use it if you're a power user um should a language",
    "start": "2720599",
    "end": "2726920"
  },
  {
    "text": "feature have an opinion in this kind of discussion I have my opinions I don't know other people probably think",
    "start": "2726920",
    "end": "2732079"
  },
  {
    "text": "different things are there opinions about that here tried to think this from the perspective of maybe Robert or Russ",
    "start": "2732079",
    "end": "2738359"
  },
  {
    "text": "or the go team who's getting this input even if it is maybe sample bias by surveys or votes on Twitter or not and I",
    "start": "2738359",
    "end": "2745880"
  },
  {
    "text": "think language design is hard because Dave had a he had a wonderful proverb in",
    "start": "2745880",
    "end": "2752160"
  },
  {
    "text": "his eror handling gracefully goer 2016 talk and that was was um the frog in the well do you remember that Dave does not",
    "start": "2752160",
    "end": "2759559"
  },
  {
    "text": "know the ocean and I sometimes wonder if that can work in the opposite direction meaning you know what percentage of",
    "start": "2759559",
    "end": "2766400"
  },
  {
    "text": "people are gr programmers out of the larger world you know is it four is it six is it are we a small bunch and we're",
    "start": "2766400",
    "end": "2772960"
  },
  {
    "text": "a small Bunch that has gotten acclimated to things and is adoption being um",
    "start": "2772960",
    "end": "2778880"
  },
  {
    "text": "checked because we are so uh kind of rigid about the way that we like the things because we are the old men and",
    "start": "2778880",
    "end": "2785160"
  },
  {
    "text": "women yelling it clouds or to keep things how we want them or kerogens and",
    "start": "2785160",
    "end": "2790400"
  },
  {
    "text": "so it's hard we can certainly look at maybe the consequences of try being adopted and we can know the know the",
    "start": "2790400",
    "end": "2797800"
  },
  {
    "text": "known knowns right we know that this will probably create a conceptual overhead when reviewing and reading code",
    "start": "2797800",
    "end": "2804520"
  },
  {
    "text": "we know that this might mean that they're going to need a style guide or we're going to have to say we're a a a",
    "start": "2804520",
    "end": "2810280"
  },
  {
    "text": "strict try shop or we do not use try here I mean there's going to be consequences but what we don't know and",
    "start": "2810280",
    "end": "2816440"
  },
  {
    "text": "this is kind of having to look at a crystal ball and this is where the perception Gap comes into play is who",
    "start": "2816440",
    "end": "2822559"
  },
  {
    "text": "that would benefit right and we kind of can make some guesses and we kind of can make some assumptions and say oh it's",
    "start": "2822559",
    "end": "2827960"
  },
  {
    "text": "not really going a benefit because we're it's not really using all it's uh it's not an all or nothing or it's not a",
    "start": "2827960",
    "end": "2833480"
  },
  {
    "text": "comprehensive error handling but it is much harder to do that and so I'm kind of trying to put myself in the go team",
    "start": "2833480",
    "end": "2840599"
  },
  {
    "text": "shoes and look at the constraints that they have right there's uh solid complaints coming from the Community",
    "start": "2840599",
    "end": "2846559"
  },
  {
    "text": "they have to assess the authenticity and the well not authenticity but just like",
    "start": "2846559",
    "end": "2851880"
  },
  {
    "text": "okay are we biased or in and looking at these complaints and do we have a sense that this is a priority for us to fix",
    "start": "2851880",
    "end": "2858319"
  },
  {
    "text": "and looking at all these other things I see you raising your hand in the vid chat Dave I'm giving it to you um you",
    "start": "2858319",
    "end": "2865079"
  },
  {
    "text": "opened a bunch of really good points there and that is about is our sty ways holding adoption back I can't say",
    "start": "2865079",
    "end": "2871200"
  },
  {
    "text": "strongly enough no it is not in the last two months go for China had 2 people in",
    "start": "2871200",
    "end": "2876359"
  },
  {
    "text": "it we haven't even got that in go foron the usage of go is exploding everywhere",
    "start": "2876359",
    "end": "2882720"
  },
  {
    "text": "and to to talk to is is eror handling holding um holding go back absolutely",
    "start": "2882720",
    "end": "2888240"
  },
  {
    "text": "not you didn't even know that from the own survey data it's 5% it's Number Five Below web development on people's list",
    "start": "2888240",
    "end": "2895599"
  },
  {
    "text": "of complaints um I I cannot find any evidence to suggest that but belief the",
    "start": "2895599",
    "end": "2900680"
  },
  {
    "text": "velocity of go a handling is is true or is holding holding ad option back and",
    "start": "2900680",
    "end": "2905960"
  },
  {
    "text": "just to maybe add on to this point a little bit like even though it is a complaint somewhere in the list I don't",
    "start": "2905960",
    "end": "2911000"
  },
  {
    "text": "think anyone's really um given voice to specifically what the problem is only that the current state is too much of",
    "start": "2911000",
    "end": "2917559"
  },
  {
    "text": "Rose or something like that which uh yeah is like an an interesting and back",
    "start": "2917559",
    "end": "2922680"
  },
  {
    "text": "St point I think so sorry sorry to jump back in the the data which everybody seems to root be rotating off is the go",
    "start": "2922680",
    "end": "2929400"
  },
  {
    "text": "survey told us that error handling is hard what the g go go survey didn't say is do you want to add try it said go ER",
    "start": "2929400",
    "end": "2937280"
  },
  {
    "text": "handling is is hard and for the 5% of people said that's the hardest thing about using go Marcel and Jonathan are",
    "start": "2937280",
    "end": "2943559"
  },
  {
    "text": "rep did a huge amount of that work in adding um erors is and ads adding um",
    "start": "2943559",
    "end": "2949760"
  },
  {
    "text": "wrapping into one do into 13 I think there's a false dichotomy of rejecting",
    "start": "2949760",
    "end": "2955799"
  },
  {
    "text": "tries is implicitly rejecting all the people who wrote In The Go survey all error handling is too hard for me no",
    "start": "2955799",
    "end": "2960920"
  },
  {
    "text": "it's just one uh one related topic to this so so um I have my own reservations",
    "start": "2960920",
    "end": "2967200"
  },
  {
    "text": "about TR it's not all all colorful but one thing it's it's absolute prerequisite for TR to succeed if it",
    "start": "2967200",
    "end": "2973119"
  },
  {
    "text": "were uh there is to have uh something like the package that Russ proposed like",
    "start": "2973119",
    "end": "2978240"
  },
  {
    "text": "the Rd package it's a working name let's say um but you would need to in order to",
    "start": "2978240",
    "end": "2984000"
  },
  {
    "text": "still do wrapping when you use try you need to have something that facilitates wrapping in a deer otherwise it's not",
    "start": "2984000",
    "end": "2989119"
  },
  {
    "text": "possible so what do you guys think of that kind of style of rapping doing it",
    "start": "2989119",
    "end": "2994599"
  },
  {
    "text": "in the firm curious the thoughts I think it's an Abomination I I think I think I think",
    "start": "2994599",
    "end": "3000839"
  },
  {
    "text": "the the the use of named of forcing people to use named error returns so you can capture them in the defer because",
    "start": "3000839",
    "end": "3006720"
  },
  {
    "text": "the tri syntax is so weak is an Abomination Peter you like it though don't",
    "start": "3006720",
    "end": "3011880"
  },
  {
    "text": "you um I won't go all the way to Abomination but I can say that I have never wrapped errors in this way I never",
    "start": "3011880",
    "end": "3019119"
  },
  {
    "text": "have I've never suggested anybody do it it's nonintuitive to me and um actually",
    "start": "3019119",
    "end": "3024160"
  },
  {
    "text": "the first time I ever saw it was and I think the uh check handle um proposal that I even considered it could be a",
    "start": "3024160",
    "end": "3030359"
  },
  {
    "text": "possibility using defer kind of takes it away from the code too so if you're that kind of thinker that wants to keep it",
    "start": "3030359",
    "end": "3036720"
  },
  {
    "text": "close to where it's happening um as you go down the blocks that's the other kind of downside that I think from the way",
    "start": "3036720",
    "end": "3043440"
  },
  {
    "text": "that I like to think and use errors yeah one of the with the check handle approach one of the complaints was that",
    "start": "3043440",
    "end": "3049200"
  },
  {
    "text": "uh if if you if you go by the the normal recommendation of wrapping errors you will end up this is not often the case",
    "start": "3049200",
    "end": "3055200"
  },
  {
    "text": "with very often you will end up with repping like calling the same kind of FID error FS all throughout your code",
    "start": "3055200",
    "end": "3061240"
  },
  {
    "text": "right with the same message the same arguments and because that becomes so repetitive people would just prefer to",
    "start": "3061240",
    "end": "3067160"
  },
  {
    "text": "not r at all right that was the that was part of the the Assumption or what",
    "start": "3067160",
    "end": "3072319"
  },
  {
    "text": "seemed to be the case so so providing some doing it in the F was Al also not possible it was just too slow so the",
    "start": "3072319",
    "end": "3079040"
  },
  {
    "text": "check handle sort of uh address that issue but now with the fur becoming very performant um it could be different um",
    "start": "3079040",
    "end": "3086799"
  },
  {
    "text": "so one just one point uh Peter so so another advantage of of repping in uh",
    "start": "3086799",
    "end": "3092040"
  },
  {
    "text": "the first we're having this kind of idiom and it also allows us to address some of the other problems like checking",
    "start": "3092040",
    "end": "3097079"
  },
  {
    "text": "an error uh on close if you defer a close from a writer and things like that",
    "start": "3097079",
    "end": "3102119"
  },
  {
    "text": "right so this idiom might also help solve us other things that are really complicated in error handling right now",
    "start": "3102119",
    "end": "3107839"
  },
  {
    "text": "uh this is not really what we're looking at but it opens up some opportunities to to address uh things that a lot of",
    "start": "3107839",
    "end": "3113920"
  },
  {
    "text": "people get wrong right and that are very hard to explain how to do it right yeah so I just observed two things one is",
    "start": "3113920",
    "end": "3119760"
  },
  {
    "text": "that um I haven't personally seen repetition in locally wrapped errors but",
    "start": "3119760",
    "end": "3125480"
  },
  {
    "text": "I think that's because I don't wrap the error to say failure in the the function that I'm in I say uh error in the thing",
    "start": "3125480",
    "end": "3133160"
  },
  {
    "text": "that I called right and this is kind of a style difference but until I had read these proposals again I've never seen",
    "start": "3133160",
    "end": "3139000"
  },
  {
    "text": "anyone say error in uh the the enclosing function that's always been the responsibility of the caller to sort of",
    "start": "3139000",
    "end": "3145640"
  },
  {
    "text": "recontextualize the thing that they called so maybe it was a file operation but I don't want to expose that detail",
    "start": "3145640",
    "end": "3150799"
  },
  {
    "text": "to my callers um that's a decision that I [Music]",
    "start": "3150799",
    "end": "3161500"
  },
  {
    "text": "make this episode is brought to you by ghost CD with Native Integrations for kubernetes and a Helm chart to quickly",
    "start": "3162520",
    "end": "3169680"
  },
  {
    "text": "get started ghost CD is an easy choice for cloud native teams with ghost CI running on kubernetes you define your",
    "start": "3169680",
    "end": "3176040"
  },
  {
    "text": "build workflow and let G CD provision and scale build infrastructure on the Fly for you g CD installs as a",
    "start": "3176040",
    "end": "3183240"
  },
  {
    "text": "kubernetes native application which allows for ease of operations easily upgrade and maintain go C using Helm",
    "start": "3183240",
    "end": "3190040"
  },
  {
    "text": "scale your build infrastructure elastically with a new elastic agent that uses kubernetes conventions to",
    "start": "3190040",
    "end": "3195520"
  },
  {
    "text": "dynamically scale go agents G CD also has first class integration with Docker",
    "start": "3195520",
    "end": "3200559"
  },
  {
    "text": "Registries easily compose track and visualize deployments on kubernetes",
    "start": "3200559",
    "end": "3205760"
  },
  {
    "text": "learn more and get started at go.org kubernetes again go.org",
    "start": "3205760",
    "end": "3212599"
  },
  {
    "text": "[Music]",
    "start": "3214860",
    "end": "3222799"
  },
  {
    "text": "kubernetes marel remember in Paris we had we had lunch in Paris it was",
    "start": "3222799",
    "end": "3227880"
  },
  {
    "text": "beautiful uh but we uh we talked about this and that's where I started to",
    "start": "3227880",
    "end": "3233280"
  },
  {
    "text": "wonder whether I was wrapping things inre correctly because I do what Peter described where I wrap to describe the",
    "start": "3233280",
    "end": "3239480"
  },
  {
    "text": "thing I've just called I'm not describing this this function that I'm already in um and so that's why those",
    "start": "3239480",
    "end": "3246720"
  },
  {
    "text": "just setting the same message for within one function setting wrapping in the same way I never did that um and they",
    "start": "3246720",
    "end": "3253880"
  },
  {
    "text": "hadn't occurred to me that you actually could either yeah there's there's different styles in that and that's why you often see the stutter as in error",
    "start": "3253880",
    "end": "3260440"
  },
  {
    "text": "you know fied opening file colon error fied opening file",
    "start": "3260440",
    "end": "3265599"
  },
  {
    "text": "right and and so the ideas the usual convention was to to uh not repeat what",
    "start": "3265599",
    "end": "3272240"
  },
  {
    "text": "the error that you're wrapping says right and but yeah did go astray in a",
    "start": "3272240",
    "end": "3277599"
  },
  {
    "text": "lot of places that was that was definitely something that um I noticed in in package eras that immediately on",
    "start": "3277599",
    "end": "3284920"
  },
  {
    "text": "on having the ability to add add a little message when you're annotating the stack when in the return path I",
    "start": "3284920",
    "end": "3290839"
  },
  {
    "text": "realized I was just saying the same thing over and over again and that drove me to drove me to so well most of the",
    "start": "3290839",
    "end": "3297119"
  },
  {
    "text": "details of what the thing was doing if your if your function is well named it is actually in the name of the function",
    "start": "3297119",
    "end": "3304160"
  },
  {
    "text": "like the name of the function if the if you call the you know open file and dis function what do you think failed when",
    "start": "3304160",
    "end": "3310440"
  },
  {
    "text": "it when open F this didn't work um and so that that drives me more to a notion",
    "start": "3310440",
    "end": "3315640"
  },
  {
    "text": "of wrapping at the package level when when you're moving between domains when you're moving between um between",
    "start": "3315640",
    "end": "3321520"
  },
  {
    "text": "different purposes and the other you useful thing to add is uh is is arguments to that so argument values but",
    "start": "3321520",
    "end": "3327880"
  },
  {
    "text": "but yeah generally uh I think what you yeah what you're saying is is right right it should be in general sufficient",
    "start": "3327880",
    "end": "3334119"
  },
  {
    "text": "for repping errors oh sorry and I remembered my final point which will be quick the other thing that a defer block",
    "start": "3334119",
    "end": "3339200"
  },
  {
    "text": "does is it um splits your attention between the eror as it exists in tiu and",
    "start": "3339200",
    "end": "3344440"
  },
  {
    "text": "other things that happen elsewhere sometimes it's necessary when you need to clean up like on a file but I think those things are exceptions and I think",
    "start": "3344440",
    "end": "3350480"
  },
  {
    "text": "most of the time having all of that um important context right there is actually a really huge virtue that we",
    "start": "3350480",
    "end": "3357599"
  },
  {
    "text": "should be careful um like dissuading people from from taking advantage of yeah you if if if tribe becomes very",
    "start": "3357599",
    "end": "3364880"
  },
  {
    "text": "popular um or or it becomes the the question like why aren't you using it you can imagine the the classical the",
    "start": "3364880",
    "end": "3371039"
  },
  {
    "text": "classical big method that the the you have try everywhere down there because",
    "start": "3371039",
    "end": "3377400"
  },
  {
    "text": "it's like on a lot of the cloud management code I've written everything returns an error so these functions are",
    "start": "3377400",
    "end": "3382559"
  },
  {
    "text": "very long because you're building up a lot of state and then your little your little defer Handler has scrolled off the screen where it used to be right",
    "start": "3382559",
    "end": "3388559"
  },
  {
    "text": "there in the a paath it's some people save it for both other people say explicit I think they're actually saying",
    "start": "3388559",
    "end": "3394640"
  },
  {
    "text": "the same thing so one of the problems is there there's a certain uh number of people let's say certain percentage of",
    "start": "3394640",
    "end": "3400920"
  },
  {
    "text": "people that if it gets to this verocity their choice will be to not wrap at all right so the idea partly is how do you",
    "start": "3400920",
    "end": "3407599"
  },
  {
    "text": "find a happy medium so as to encourage most people to at least wrap something",
    "start": "3407599",
    "end": "3413280"
  },
  {
    "text": "when that would be uh a good good thing to do right so that's sort of a tradeoff you make yeah and I wonder if try does",
    "start": "3413280",
    "end": "3420559"
  },
  {
    "text": "that it probably wouldn't encourage that would it it encourages it feels like",
    "start": "3420559",
    "end": "3425599"
  },
  {
    "text": "it's kind of of all the features of the language it stands out as being the least go like only because you know it",
    "start": "3425599",
    "end": "3432599"
  },
  {
    "text": "is a bit magic it can return we don't know how many arguments it returns right it's a macro so I guess it's not a",
    "start": "3432599",
    "end": "3438160"
  },
  {
    "text": "function doesn't have a set thing whenever there's two arguments the the optional second argument for example",
    "start": "3438160",
    "end": "3445319"
  },
  {
    "text": "that stuff actually I feel like we should just always have the second argument and deal with it like I that's",
    "start": "3445319",
    "end": "3451720"
  },
  {
    "text": "what I always do when I write code say I'm going to check for a value in a map and cast it to a particular type I'll",
    "start": "3451720",
    "end": "3458799"
  },
  {
    "text": "always check to see if that succeeded or not I won't rely on the Panic just because I don't really like panics and",
    "start": "3458799",
    "end": "3464839"
  },
  {
    "text": "there's a bit it just feels like that it's certainly the most magical uh proposal I think we've seen and it",
    "start": "3464839",
    "end": "3471480"
  },
  {
    "text": "certainly doesn't feel like some of the core principle of of why I like go is",
    "start": "3471480",
    "end": "3476559"
  },
  {
    "text": "about this being very explicit and it feels like this steps away from that a",
    "start": "3476559",
    "end": "3482760"
  },
  {
    "text": "little bit and and the question really is are there other people for which this trade-off is then worth it like if this",
    "start": "3482760",
    "end": "3488960"
  },
  {
    "text": "meant that the language you could learn it much quicker or anyone that's because it's it's true that um I've heard it a",
    "start": "3488960",
    "end": "3495200"
  },
  {
    "text": "lot that when people are learning go and they see this all over and over again they'll say oh I'm not going to learn",
    "start": "3495200",
    "end": "3502160"
  },
  {
    "text": "this I have to keep typing this in C it was automatic at exceptions and it's not",
    "start": "3502160",
    "end": "3507319"
  },
  {
    "text": "really the point of course but but I wonder whether there's a there's an audience as well that we that isn't us a",
    "start": "3507319",
    "end": "3514520"
  },
  {
    "text": "bit like what we've talked about here yeah yeah no especially for uh things like generics right we've",
    "start": "3514520",
    "end": "3520520"
  },
  {
    "text": "definitely gotten feedback like our teams even if a lot of the team members were encouraging it you know some",
    "start": "3520520",
    "end": "3526520"
  },
  {
    "text": "manager override we will not adopt the language without generics right that doesn't still mean you need to add it",
    "start": "3526520",
    "end": "3532240"
  },
  {
    "text": "but this stuff happens quite a bit right and then what what do you do right we want to you want to increase adoption um",
    "start": "3532240",
    "end": "3538640"
  },
  {
    "text": "that set right like there's um nothing is set in stone with respect to try it",
    "start": "3538640",
    "end": "3543960"
  },
  {
    "text": "all right uh these things are put out so that people can you know like start to imagine like how would it look like how",
    "start": "3543960",
    "end": "3550480"
  },
  {
    "text": "would go look like using this would it benefit would it get shorter would it get awful uh you know by putting it out",
    "start": "3550480",
    "end": "3556640"
  },
  {
    "text": "it also allows you to allows people to come up with examples like look this is really a horrible idea right don't do",
    "start": "3556640",
    "end": "3562079"
  },
  {
    "text": "this so so either is is an option right yeah and this is and this really",
    "start": "3562079",
    "end": "3568000"
  },
  {
    "text": "hopefully this show also contributes to that conversation as well Robert in one of the issues suggested people write",
    "start": "3568000",
    "end": "3574839"
  },
  {
    "text": "experience reports is that something that our listeners should do if they've got something particular they want to",
    "start": "3574839",
    "end": "3581760"
  },
  {
    "text": "contribute on this subject I think it's useful yeah I mean it's uh the question is and how far are they representable",
    "start": "3581760",
    "end": "3589400"
  },
  {
    "text": "for the you know programs at large but yeah I think I think you had some observations on that Peter of of how",
    "start": "3589400",
    "end": "3596359"
  },
  {
    "text": "well in our little community that we can get on we can get on video conferences and talk and talk on Twitter like how",
    "start": "3596359",
    "end": "3602440"
  },
  {
    "text": "representative of that is actually of the um the actual Corpus of uh of go",
    "start": "3602440",
    "end": "3608280"
  },
  {
    "text": "program is what what do Russ estimated to be like one and a half million sure as sure as heck isn't one and a half",
    "start": "3608280",
    "end": "3614039"
  },
  {
    "text": "million in on any of the social forums where go is discussed that I'm aware of yeah there's definitely a local minority",
    "start": "3614039",
    "end": "3621680"
  },
  {
    "text": "and you asked Matt like is this going to be useful for people maybe in the SE STP Community who just get it out of the box",
    "start": "3621680",
    "end": "3627839"
  },
  {
    "text": "in the language and I think it's super interesting that language design and looking at the evolution of it like Rob",
    "start": "3627839",
    "end": "3633960"
  },
  {
    "text": "Pike even talked about this I think it's almost poetic like 10 years ago I think it was it oscon the public static void",
    "start": "3633960",
    "end": "3640640"
  },
  {
    "text": "talk I don't know if I'll link it but it's fascinating because he he quotes the list Gabriel like I'm always",
    "start": "3640640",
    "end": "3647000"
  },
  {
    "text": "delighted By the Light touch and Stillness of early programming languages and then he talks about how Java and",
    "start": "3647000",
    "end": "3652680"
  },
  {
    "text": "plus are now 10 years old and now go is 10 years old and we are thinking about this idea of inclusion and inclusion has",
    "start": "3652680",
    "end": "3660720"
  },
  {
    "text": "and always will have trade-offs it's a paradox and so that's the kind of thing that I'm wondering like okay you know do",
    "start": "3660720",
    "end": "3667640"
  },
  {
    "text": "we include to qu sort of make people who are really used to and entrenched in",
    "start": "3667640",
    "end": "3672839"
  },
  {
    "text": "their deep mindmeld of their other programming languages to include them into the go fold at the cost of",
    "start": "3672839",
    "end": "3679520"
  },
  {
    "text": "alienating go programmers and that's really a hard question to answer I'm not",
    "start": "3679520",
    "end": "3684599"
  },
  {
    "text": "I'm happy I'm not on the decision-making side of this I I totally agree that this is hard to answer um I think that it's",
    "start": "3684599",
    "end": "3691640"
  },
  {
    "text": "almost impossible to come up with a correct or even optimal answer and in this situation I think the right thing to do is to Instead try to come up with",
    "start": "3691640",
    "end": "3698599"
  },
  {
    "text": "a framework like what is a framework you use to decide um what changes we should",
    "start": "3698599",
    "end": "3704200"
  },
  {
    "text": "make what we should push back on and as far as I can tell or what makes the most sense to me is that framework is distill",
    "start": "3704200",
    "end": "3710760"
  },
  {
    "text": "the language down to its core principles right and you know we can argue about some of them but it feels to me that",
    "start": "3710760",
    "end": "3717200"
  },
  {
    "text": "explicit error handling in situ without um exceptions and all these other things",
    "start": "3717200",
    "end": "3722520"
  },
  {
    "text": "is one of the core principles and if that's true or not I I don't know but this feels this way to me so so yeah I",
    "start": "3722520",
    "end": "3730319"
  },
  {
    "text": "think that where we uh May disagree then is that uh try to me is still explicit error handling right so um it's it's not",
    "start": "3730319",
    "end": "3737319"
  },
  {
    "text": "exception it doesn't fall in the exception uh class of of error handling at least so one thing that I did or try",
    "start": "3737319",
    "end": "3744640"
  },
  {
    "text": "to do when I'm uh you know writing code is like always think how would this language Feature work right and then I",
    "start": "3744640",
    "end": "3750960"
  },
  {
    "text": "often write my code twice so once with the new features and of course it won't work and then I throw it out right the",
    "start": "3750960",
    "end": "3757559"
  },
  {
    "text": "way it would be uh just to get a feel on how would it be right or how would it look like if we have this new feature",
    "start": "3757559",
    "end": "3763880"
  },
  {
    "text": "how would I feel about it how would I structure things differently and um yeah",
    "start": "3763880",
    "end": "3769400"
  },
  {
    "text": "that that you know gives an interesting idea on on where it could be so on on",
    "start": "3769400",
    "end": "3774839"
  },
  {
    "text": "the subject of of trying try number of people have tried it like like people",
    "start": "3774839",
    "end": "3780799"
  },
  {
    "text": "have looked at it kind of statistically others have said oh I I I rewrote my code to look at it and it you know it",
    "start": "3780799",
    "end": "3786359"
  },
  {
    "text": "looked you know it made it shorter as if shorter is like a goal but the point I",
    "start": "3786359",
    "end": "3792160"
  },
  {
    "text": "want to make there is that we are experimenting with code that already works we we are taking programs which we",
    "start": "3792160",
    "end": "3799000"
  },
  {
    "text": "have already correctly implemented the handling correctly tested correctly fixed of those paths and then adding a",
    "start": "3799000",
    "end": "3804640"
  },
  {
    "text": "little as you call it a macro adding a little syntactic macro on there to clean it up a little we're not starting with",
    "start": "3804640",
    "end": "3810559"
  },
  {
    "text": "new programs we're not starting with new with new programmers trying to understand how their program operates",
    "start": "3810559",
    "end": "3815960"
  },
  {
    "text": "using this new feature we just think of all the things that go fix did over the time how it made up code shorter we're",
    "start": "3815960",
    "end": "3821880"
  },
  {
    "text": "like yes it worked before and now it's now it's a bit shorter I think it's a I don't think it's correct to apply try to",
    "start": "3821880",
    "end": "3828799"
  },
  {
    "text": "an existing codebase which we know very well which we know and say oh in those cases where it could in this this small",
    "start": "3828799",
    "end": "3835200"
  },
  {
    "text": "set of cases where it could clean up the error handling it has made this a little bit shorter like like we people look at",
    "start": "3835200",
    "end": "3840880"
  },
  {
    "text": "the the size of the diff as some kind of success factor it made my code shorter",
    "start": "3840880",
    "end": "3845920"
  },
  {
    "text": "it made correct code which was already working which was already tested and already knew shorter I don't think we",
    "start": "3845920",
    "end": "3853000"
  },
  {
    "text": "can extrapolate that to writing a new program that's a fair point that's quite an interesting one H I want to um go",
    "start": "3853000",
    "end": "3860000"
  },
  {
    "text": "back to something Peter said and something I wanted to follow up with about inclusion and things I'm also seeing in the chat which is inclusion is",
    "start": "3860000",
    "end": "3867760"
  },
  {
    "text": "important but maybe the way forward is also really making an effort to teach newcomers to the language about why",
    "start": "3867760",
    "end": "3874839"
  },
  {
    "text": "these things are the way they are and so having that as a way forward and you know when Peter you say like distilling",
    "start": "3874839",
    "end": "3881440"
  },
  {
    "text": "it down to just core language features and making sure that you know we always as Learners are trying to bridge from",
    "start": "3881440",
    "end": "3887480"
  },
  {
    "text": "existing knowledge right we have existing mental models and we have existing ways of doing things and we look left and I think I think that",
    "start": "3887480",
    "end": "3894640"
  },
  {
    "text": "having something um that's educational might help with this and is also another",
    "start": "3894640",
    "end": "3900200"
  },
  {
    "text": "way sort of attacking the problem as well yeah I think that's uh right and uh to address Dave's comment like um it's",
    "start": "3900200",
    "end": "3907839"
  },
  {
    "text": "not always about just being shorter right like a lot of the examples uh I looked at or a good chunk of them uh",
    "start": "3907839",
    "end": "3914559"
  },
  {
    "text": "using things like check handle or try didn't actually just make things shorter it made the essence of what the code was",
    "start": "3914559",
    "end": "3921000"
  },
  {
    "text": "doing clearer right and these were cases where you would just have repeated F erfs or whatever they're getting in the",
    "start": "3921000",
    "end": "3927880"
  },
  {
    "text": "way sometimes there were as much as 50% of the code um and and it was just hard to see what the code was actually doing",
    "start": "3927880",
    "end": "3934160"
  },
  {
    "text": "in the meantime right you could have like factored it out different functions but that's not necessarily think making",
    "start": "3934160",
    "end": "3939760"
  },
  {
    "text": "things better either um and this was some good quality code right I'm not talking about some crappy code that was",
    "start": "3939760",
    "end": "3946520"
  },
  {
    "text": "out there uh that looked better after using it so there there are cases where I think it really uh make things clearer",
    "start": "3946520",
    "end": "3953279"
  },
  {
    "text": "these kind of and I don't really want to say uh to counter that point but I do want to bring it back to something we",
    "start": "3953279",
    "end": "3959359"
  },
  {
    "text": "mentioned kind of at the beginning of the show which is that in a lot of cases and you know from some people people's",
    "start": "3959359",
    "end": "3965480"
  },
  {
    "text": "perspectives most cases or even all cases the air handling doesn't distract from what the code is doing the air",
    "start": "3965480",
    "end": "3971480"
  },
  {
    "text": "handling is often the most important part of what the code is doing and at least it seems to me that Go's",
    "start": "3971480",
    "end": "3977599"
  },
  {
    "text": "perspective from the very beginning has very much been aligned with this that uh the ad path first is how you should",
    "start": "3977599",
    "end": "3984640"
  },
  {
    "text": "think about constructing reliable code now we can talk about whether the the string the characters fmt do ER RF and",
    "start": "3984640",
    "end": "3993039"
  },
  {
    "text": "all the kind of ceremony that goes with that is necessary and I think probably there's a good case to be made that it's",
    "start": "3993039",
    "end": "3998279"
  },
  {
    "text": "not but I'm not sure that I don't know a counter point might be that uh all that",
    "start": "3998279",
    "end": "4003319"
  },
  {
    "text": "stuff you say is distracting is actually as important or even maybe more important I I would agree with uh",
    "start": "4003319",
    "end": "4010520"
  },
  {
    "text": "anything but uh sort of a wrapping string right that just as ADD messages and these can uh these can get pretty",
    "start": "4010520",
    "end": "4016920"
  },
  {
    "text": "fosen in the way of sort of visually being able to see the program um become sort of visual",
    "start": "4016920",
    "end": "4023039"
  },
  {
    "text": "overload if you were just returning the error plainly it would already get clearer right but that that we don't",
    "start": "4023039",
    "end": "4029440"
  },
  {
    "text": "want um or in many cases we don't want if you um if you add any code in your",
    "start": "4029440",
    "end": "4036119"
  },
  {
    "text": "error block by all means that should stay there right like you should not replace it with right yeah then I I",
    "start": "4036119",
    "end": "4041400"
  },
  {
    "text": "guess it's just a matter of opinion then does the does the prefix Str or whatever confuse things and I guess for me at",
    "start": "4041400",
    "end": "4046920"
  },
  {
    "text": "least it it never has but I can understand for that for some people it might well the point of it is to add information isn't it the point of it is",
    "start": "4046920",
    "end": "4054039"
  },
  {
    "text": "to make that more clear what's what's gone wrong yeah but if visually 50% or 60% of the characters on your screen are",
    "start": "4054039",
    "end": "4061000"
  },
  {
    "text": "related to error messages um you know it's just a visual overload to see what the code is doing",
    "start": "4061000",
    "end": "4067200"
  },
  {
    "text": "besides of that right it should be in proportion yeah I mean I tend I tend not",
    "start": "4067200",
    "end": "4072640"
  },
  {
    "text": "to read code sort of top to bottom like that I tend to jump around a bit more um",
    "start": "4072640",
    "end": "4078720"
  },
  {
    "text": "and that's why I do I always try and do that line of sight thing have the happy path down one Edge and indent to solve",
    "start": "4078720",
    "end": "4085640"
  },
  {
    "text": "the errors and handle things and do the early guard and all that stuff that for sure helps with this kind of glance",
    "start": "4085640",
    "end": "4091160"
  },
  {
    "text": "ability but what's nice is to be able to jump straight to a point in a file and then see what's happening and to be fair",
    "start": "4091160",
    "end": "4098040"
  },
  {
    "text": "try doesn't stop that I mean you would just be in that case returning the error untouched but",
    "start": "4098040",
    "end": "4104359"
  },
  {
    "text": "i' I've never felt like the error handling bits were got in the way in",
    "start": "4104359",
    "end": "4110359"
  },
  {
    "text": "fact they're there where they where I need them when I'm maintaining code as well and you're right by the way that if",
    "start": "4110359",
    "end": "4116400"
  },
  {
    "text": "you have um no indentation of all the indentation in a code is related to error handling it actually works quite",
    "start": "4116400",
    "end": "4122000"
  },
  {
    "text": "well right it's it's the cases where you have one extra indent where you have sort of normal happy path where it",
    "start": "4122000",
    "end": "4128400"
  },
  {
    "text": "starts to get uh annoying to yeah yeah but I suppose try would try would get",
    "start": "4128400",
    "end": "4134318"
  },
  {
    "text": "rid of the indent wouldn't it for for errors yeah I mean again I could just be like I feel like I've got something that",
    "start": "4134319",
    "end": "4140000"
  },
  {
    "text": "I'm going to lose and that worries me but I feel like there's value in that stuff and and I'm glad that that is sort",
    "start": "4140000",
    "end": "4146040"
  },
  {
    "text": "of part of this conversation too yeah and again like a whole um argument from the tri proposal or a whole result from",
    "start": "4146040",
    "end": "4152600"
  },
  {
    "text": "the tri proposal can be you know we are now much more confident or can much more clearer Express to newcomers to go um",
    "start": "4152600",
    "end": "4160960"
  },
  {
    "text": "that why we don't have something like try right that's that can very much be it yeah I I like the idea that um we",
    "start": "4160960",
    "end": "4168798"
  },
  {
    "text": "have a historical artifact that says this is why we know it won't work the other thing that um I just keep thinking",
    "start": "4168799",
    "end": "4175120"
  },
  {
    "text": "about you use the word glan ability we've talked about it in past podcasts Matt we talked about readability Rob",
    "start": "4175120",
    "end": "4180838"
  },
  {
    "text": "Pike has said readability is Paramount but readability is still quite subjective um and it can be also very",
    "start": "4180839",
    "end": "4187000"
  },
  {
    "text": "personal to the programmer and so um we can follow into fall into bias there as",
    "start": "4187000",
    "end": "4193080"
  },
  {
    "text": "well and I I did want to mention that but um again it becomes like I I have a",
    "start": "4193080",
    "end": "4199040"
  },
  {
    "text": "neural Groove that's well worn I start to look for familiar patterns and shapes",
    "start": "4199040",
    "end": "4204199"
  },
  {
    "text": "if you change that shape you're adding a conceptual overhead that I don't want and that's why change is hard but um I",
    "start": "4204199",
    "end": "4211400"
  },
  {
    "text": "just wanted to mention about that Kyle Robinson he was the one he's in the JavaScript world and he wrote you don't",
    "start": "4211400",
    "end": "4218080"
  },
  {
    "text": "know javascripts but he had a lovely talk I'll try to find the the link about readability and you know the assumptions",
    "start": "4218080",
    "end": "4224480"
  },
  {
    "text": "that we make about tness versus verbosity and all the other things and just kind of trying to contextualize",
    "start": "4224480",
    "end": "4229719"
  },
  {
    "text": "that and I wonder if we can have an equivalent for go great yeah it's funny on that I'm one of those people that",
    "start": "4229719",
    "end": "4235640"
  },
  {
    "text": "loves it when there's a new feature I get really excited so that's that it's not that for me for sure cuz I I love",
    "start": "4235640",
    "end": "4243080"
  },
  {
    "text": "when they add new things it's yeah it's it's more about whether this fits in as",
    "start": "4243080",
    "end": "4248880"
  },
  {
    "text": "like the rest it's that that it's the fit whe it's whether it fits or not but this is I mean I'm afraid we've we've",
    "start": "4248880",
    "end": "4256040"
  },
  {
    "text": "run out of time but this has been a very interesting discussion thank you so much to my uh panelists and my co-hosts uh",
    "start": "4256040",
    "end": "4264719"
  },
  {
    "text": "Marcel Dave kman and Peter we will see you next",
    "start": "4264719",
    "end": "4271640"
  },
  {
    "text": "week all right thank you for tuning in to this week's episode of go time if you're not yet hang with us in go for",
    "start": "4273159",
    "end": "4279320"
  },
  {
    "text": "slack we have a channel called go time FM look it up you'll find us hang with us during the live shows connect with",
    "start": "4279320",
    "end": "4285800"
  },
  {
    "text": "other members of the community share stories share codes share coffee recipes whatever it's a lot of fun also we have",
    "start": "4285800",
    "end": "4292840"
  },
  {
    "text": "discussions at changel love.com on every episode head to changel love.com gotime",
    "start": "4292840",
    "end": "4298400"
  },
  {
    "text": "find this episode and discuss it with the community also thanks to fast the our bandwidth partner rbar for helping",
    "start": "4298400",
    "end": "4304360"
  },
  {
    "text": "us move fast and fix things and Leno for hosting the change law platform our music is produced by the mysterious",
    "start": "4304360",
    "end": "4310880"
  },
  {
    "text": "break master cylinder and if you want to hear more awesome some podcast like this subscribe to our Master feed it's one",
    "start": "4310880",
    "end": "4316880"
  },
  {
    "text": "feed to rule them all plus some extras that only hit the master feed and to change law.com slm or search for Chang",
    "start": "4316880",
    "end": "4324239"
  },
  {
    "text": "law master in your podcast client you'll find us thanks for tuning in we'll see you next",
    "start": "4324239",
    "end": "4329970"
  },
  {
    "text": "[Music]",
    "start": "4329970",
    "end": "4337289"
  },
  {
    "text": "week",
    "start": "4342480",
    "end": "4345480"
  },
  {
    "text": "[Music]",
    "start": "4353100",
    "end": "4368970"
  },
  {
    "text": "that's",
    "start": "4372440",
    "end": "4375440"
  }
]