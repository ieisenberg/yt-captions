[
  {
    "text": "now we got to we got to learn how to maintain the order and the timing and everything and and how many times they",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "get run and functional programming has a lot of tools for doing that that other",
    "start": "5520",
    "end": "11280"
  },
  {
    "text": "paradigms you know borrow from functional programming that's really interesting you could almost describe it",
    "start": "11280",
    "end": "17720"
  },
  {
    "text": "as it's another way of thinking about separating concerns but in this case what you're separating is the easy stuff",
    "start": "17720",
    "end": "23359"
  },
  {
    "text": "and the hard stuff and you're making sure that those are dealt with differently so that you can really focus on the hard stuff right by exactly",
    "start": "23359",
    "end": "32279"
  },
  {
    "text": "exactly bandwith for change log is provided by fastly learn more at fastly.com our feature flags are powered",
    "start": "32280",
    "end": "39680"
  },
  {
    "text": "by launch darkley check them out at launch dark.com and we're hosted on Lino Cloud servers get $100 in hosting credit",
    "start": "39680",
    "end": "46600"
  },
  {
    "text": "at lin.com changelog what's up party people this episode is brought to you by strappy",
    "start": "46600",
    "end": "53199"
  },
  {
    "text": "strappy is an open source headless CMS that front Enders love it's 100% JavaScript fully customizable and",
    "start": "53199",
    "end": "60440"
  },
  {
    "text": "developer first strappy is more than a node framework and more than a headless CMS it saves API development time",
    "start": "60440",
    "end": "67320"
  },
  {
    "text": "through a beautiful admin panel anyone can use it's open source it's agnostic choose your preferred database and API",
    "start": "67320",
    "end": "74360"
  },
  {
    "text": "options using graphql or rest it's self-hosted and gdpr compliant control your data privacy and cost at all time",
    "start": "74360",
    "end": "81520"
  },
  {
    "text": "it's customizable create content structures that Flex to fit your needs customize the admin panel as well as the",
    "start": "81520",
    "end": "86880"
  },
  {
    "text": "API and extend your content management with custom plugins to get started head to the homepage using our special URL",
    "start": "86880",
    "end": "93159"
  },
  {
    "text": "strappy doio GSP party that's St R api.js party and click the get started",
    "start": "93159",
    "end": "100320"
  },
  {
    "text": "button for a step-by-step guide to create a sample app using Create strappy app strappy is also Enterprise ready for",
    "start": "100320",
    "end": "106079"
  },
  {
    "text": "those who need to unlock Enterprise features and services email JSP party strappy doio and connect with Maxim the",
    "start": "106079",
    "end": "112320"
  },
  {
    "text": "resident expert on guidance and a special offer for JS party listeners again that's strap. JSP party",
    "start": "112320",
    "end": "120490"
  },
  {
    "text": "[Music]",
    "start": "120490",
    "end": "127719"
  },
  {
    "text": "this is JS party your weekly celebration of JavaScript and the web we record live",
    "start": "127719",
    "end": "134519"
  },
  {
    "text": "on Thursdays at 1 p.m. us Eastern and you can be part of the show come hang",
    "start": "134519",
    "end": "140200"
  },
  {
    "text": "with us in our community slack it's totally free head to Chang log.com commmunity and sign up today okay let's",
    "start": "140200",
    "end": "147280"
  },
  {
    "text": "get into it hey it's party time y'all [Music]",
    "start": "147280",
    "end": "156459"
  },
  {
    "text": "oh yes it's time once again friends it's JS party time I'm Jared I'm your internet friend and I'm joined by long",
    "start": "163400",
    "end": "170680"
  },
  {
    "text": "time JS Party friend kall what's up kall hey hey glad to be here glad to have you",
    "start": "170680",
    "end": "176599"
  },
  {
    "text": "as always and we're joined by a special guest Eric Norman is here Eric thanks for coming on JS party yeah thanks for",
    "start": "176599",
    "end": "183640"
  },
  {
    "text": "having me this is quite a party we like to have fun we like to talk about JavaScript and the web we think these",
    "start": "183640",
    "end": "189680"
  },
  {
    "text": "things are fun and so it's a nice combination so today we are going to talk about some programming paradigms",
    "start": "189680",
    "end": "195879"
  },
  {
    "text": "one specific Paradigm and maybe contrast it to some other ones uh Eric is a longtime FP guy functional",
    "start": "195879",
    "end": "204080"
  },
  {
    "text": "programming and JavaScript is a functional language sort of JavaScript is a multi par language so it has some",
    "start": "204080",
    "end": "211120"
  },
  {
    "text": "functional things to it it has some objectoriented things to it it's very general purpose in that way and Eric is",
    "start": "211120",
    "end": "218519"
  },
  {
    "text": "an advocate of FP and says that you can improve a lot of things write good code maintainable Etc there's lots of Virtues",
    "start": "218519",
    "end": "225200"
  },
  {
    "text": "to functional programming so that's the topic of conversation today Eric why don't you start us off with the real",
    "start": "225200",
    "end": "231760"
  },
  {
    "text": "basics of like what makes a language functional what does that mean wow that's a really uh like deep",
    "start": "231760",
    "end": "238200"
  },
  {
    "text": "philosophical question what makes a functional language dang I was trying to start basic yeah yeah so JavaScript as",
    "start": "238200",
    "end": "246920"
  },
  {
    "text": "you said is a multi-paradigm language so functional programming is possible in",
    "start": "246920",
    "end": "252959"
  },
  {
    "text": "JavaScript it's actually quite good for you know it's above average for doing",
    "start": "252959",
    "end": "258359"
  },
  {
    "text": "functional programming but I don't think anyone would say it is a functional",
    "start": "258359",
    "end": "263360"
  },
  {
    "text": "language so there's other languages like hasle or closure or scheme or you know these",
    "start": "263360",
    "end": "271320"
  },
  {
    "text": "other languages are much more focused on functional programming and give you a",
    "start": "271320",
    "end": "277479"
  },
  {
    "text": "lot more uh features that support functional programming so JavaScript is",
    "start": "277479",
    "end": "284680"
  },
  {
    "text": "kind of in this place on that graph of like how functional is it it's more",
    "start": "284680",
    "end": "290120"
  },
  {
    "text": "functional than a lot of languages more functional than say Java for instance yeah it's not completely a dysfunctional",
    "start": "290120",
    "end": "296400"
  },
  {
    "text": "language like Java well it's both functional and functional right and it's not anti-",
    "start": "296400",
    "end": "303520"
  },
  {
    "text": "functional dysfunctional it is uh certainly possible to do functional",
    "start": "303520",
    "end": "309520"
  },
  {
    "text": "programming in JavaScript and occasionally functional language right occasionally functional if you and and",
    "start": "309520",
    "end": "316120"
  },
  {
    "text": "of course you have to do a lot of discipline to maintain the functional programming I like to say that",
    "start": "316120",
    "end": "322919"
  },
  {
    "text": "JavaScript is okay for doing javascri for doing functional programming it's",
    "start": "322919",
    "end": "327960"
  },
  {
    "text": "bad for learning functional program because you can always just slip back into procedural you know you can just",
    "start": "327960",
    "end": "334639"
  },
  {
    "text": "make a for Loop wherever but it's actually good for teaching functional program uh it has everything you need",
    "start": "334639",
    "end": "342520"
  },
  {
    "text": "but you kind of have to do it yourself because when I teach functional programming I want to show it's not just",
    "start": "342520",
    "end": "347800"
  },
  {
    "text": "some feature of the language it's a way of programming and so here is the odd",
    "start": "347800",
    "end": "353800"
  },
  {
    "text": "way that you would program in JavaScript right to keep it functional and so I",
    "start": "353800",
    "end": "359680"
  },
  {
    "text": "find it it's pretty good for teaching so what is the mindset then the what is the",
    "start": "359680",
    "end": "365039"
  },
  {
    "text": "way of programming that is functional versus imperative or objectoriented or any other way so functional programming",
    "start": "365039",
    "end": "371479"
  },
  {
    "text": "is like an onion okay all right so you can go real deep give you bad breath you",
    "start": "371479",
    "end": "377120"
  },
  {
    "text": "know some people who go super deep but that first layer that first like Gateway",
    "start": "377120",
    "end": "384319"
  },
  {
    "text": "into the onion okay Sor mixing metaphors The Onion routing it's like a tour Network",
    "start": "384319",
    "end": "390960"
  },
  {
    "text": "kind of a thing yeah I imagine it like you know have you ever seen the original show the get smart like the intro where",
    "start": "390960",
    "end": "397880"
  },
  {
    "text": "he has like 30 different doors he walks through and they yeah and then he holds up his his shoe to his to his ear and",
    "start": "397880",
    "end": "404520"
  },
  {
    "text": "talks into yeah and he has a phone he has a cell phone in his shoe yeah but he",
    "start": "404520",
    "end": "409639"
  },
  {
    "text": "uh you go through all these doors right and you get deeper and deeper into the sanctum of functional programming well",
    "start": "409639",
    "end": "415400"
  },
  {
    "text": "that first door is just recognizing the difference between what I call actions",
    "start": "415400",
    "end": "421479"
  },
  {
    "text": "calculations and data okay calculations are often known as pure functions there",
    "start": "421479",
    "end": "428120"
  },
  {
    "text": "the stuff you can do in your language that always gives you the same answer no matter how many times you run them or",
    "start": "428120",
    "end": "435039"
  },
  {
    "text": "when you run them okay so this is like addition right addition it's always",
    "start": "435039",
    "end": "440360"
  },
  {
    "text": "going to two plus two is always four doesn't matter how many times you run that but then there's actions that do",
    "start": "440360",
    "end": "446560"
  },
  {
    "text": "depend on when you run them or how many times you run them So reading from a mutable variable if you read after",
    "start": "446560",
    "end": "454919"
  },
  {
    "text": "someone has written to it you're going to get a different answer than reading before the other you know other part of",
    "start": "454919",
    "end": "461800"
  },
  {
    "text": "the code writes to it likewise sending an email or writing something to disk these are all actions because you know",
    "start": "461800",
    "end": "469720"
  },
  {
    "text": "sending the email zero times is different from sending it one time or 10 times uh and so making this distinction",
    "start": "469720",
    "end": "478120"
  },
  {
    "text": "between action that depend on time because they're hard to deal with and calculations is like",
    "start": "478120",
    "end": "486360"
  },
  {
    "text": "the first gateway into functional programming oh and data is easy data is",
    "start": "486360",
    "end": "493440"
  },
  {
    "text": "just you know the stuff that doesn't do anything it's just inert you know the strings and numbers and and hashmaps and",
    "start": "493440",
    "end": "501520"
  },
  {
    "text": "lists and stuff like that I like how simple your language is there cuz I feel like one of the barriers to a lot of",
    "start": "501520",
    "end": "506840"
  },
  {
    "text": "folks getting into FP is like it feels like there's a lot of jargon and you start talking with somebody and you're",
    "start": "506840",
    "end": "512560"
  },
  {
    "text": "like I just want to send an email and before you know it they're talking about monads and you're like what in the world",
    "start": "512560",
    "end": "517760"
  },
  {
    "text": "is all of this yeah I think that you know I speak for functional programming",
    "start": "517760",
    "end": "523479"
  },
  {
    "text": "as a a community we have over complicated it functional programming kind of has been incubated in",
    "start": "523479",
    "end": "531120"
  },
  {
    "text": "Academia and you don't get tenure by making stuff easy you have to find a",
    "start": "531120",
    "end": "537640"
  },
  {
    "text": "hard problem and like solve it in some weird way novel way and you don't show",
    "start": "537640",
    "end": "545560"
  },
  {
    "text": "credibility by just talking about Basics you have to use the jargon and show that",
    "start": "545560",
    "end": "550839"
  },
  {
    "text": "you're like one of the club right you you understand this you earn your PhD by",
    "start": "550839",
    "end": "556399"
  },
  {
    "text": "learning all these obscure terms so like that's a shame right for the rest of the industry for you know the non-academic",
    "start": "556399",
    "end": "563839"
  },
  {
    "text": "side that we don't have a lot of good literature that you know has taken the",
    "start": "563839",
    "end": "571000"
  },
  {
    "text": "time to like let me just shed all that academic stuff and start over and talk",
    "start": "571000",
    "end": "576760"
  },
  {
    "text": "like real people without all the jargon so when you describe actions and I'm",
    "start": "576760",
    "end": "582399"
  },
  {
    "text": "going to probably spend a lot of this like trying to map between this as I said beautifully simple language that",
    "start": "582399",
    "end": "587959"
  },
  {
    "text": "you're using here and like some of the language that I've previously absorbed for FP and things like that is there a",
    "start": "587959",
    "end": "593440"
  },
  {
    "text": "one to one between what you're calling actions and uh what are often called side effects or are those Rel but not",
    "start": "593440",
    "end": "600079"
  },
  {
    "text": "the same or like how are you thinking about that they're related this not Ono one the onetoone mapping is so",
    "start": "600079",
    "end": "607040"
  },
  {
    "text": "calculations are pure functions but that's not then you have this other",
    "start": "607040",
    "end": "613279"
  },
  {
    "text": "mapping of function in the mathematical sense versus the language feature right",
    "start": "613279",
    "end": "619680"
  },
  {
    "text": "you know pure function so there's that problem there so because like arithmetics not a function in JavaScript",
    "start": "619680",
    "end": "625040"
  },
  {
    "text": "right um anyway so calculations mapped to Pure functions actions mapped to",
    "start": "625040",
    "end": "632320"
  },
  {
    "text": "impure functions so it's not the act of sending the email that's an action it's",
    "start": "632320",
    "end": "639839"
  },
  {
    "text": "the piece of code that you know you can pass around",
    "start": "639839",
    "end": "644880"
  },
  {
    "text": "hasn't been run yet it's just a closure right it's just a function that you're passing around that when you call the",
    "start": "644880",
    "end": "651639"
  },
  {
    "text": "function it will send the email right so I toyed a lot with a whole bunch of",
    "start": "651639",
    "end": "658639"
  },
  {
    "text": "ideas like how do I name them so that the words are clear but don't have all",
    "start": "658639",
    "end": "665240"
  },
  {
    "text": "the wrong baggage but I don't want to invent new terms just because and so I",
    "start": "665240",
    "end": "671639"
  },
  {
    "text": "wound up just not using the term effect because well I mean to get deep into it",
    "start": "671639",
    "end": "678720"
  },
  {
    "text": "I didn't want to call them effect because it's not the effect it's the",
    "start": "678720",
    "end": "684000"
  },
  {
    "text": "Cause right I'm talking about the code that sends the email not the emails being sent so and then cause like that's",
    "start": "684000",
    "end": "693279"
  },
  {
    "text": "not the right word either so so get us on the same page with regards to a pure",
    "start": "693279",
    "end": "698320"
  },
  {
    "text": "function and an impure function let's just start at base principles there help people differentiate if that's the big",
    "start": "698320",
    "end": "704639"
  },
  {
    "text": "difference right right so a pure function like I said before the nice thing about a pure function is that you",
    "start": "704639",
    "end": "711120"
  },
  {
    "text": "can call it you know as long as you pass it the same arguments it's going to give you the same result and that makes it",
    "start": "711120",
    "end": "718480"
  },
  {
    "text": "great for test T in because when we test we test on our development machines we",
    "start": "718480",
    "end": "723600"
  },
  {
    "text": "test on the build server and then we want to make sure that that same function that we're testing is going to act exactly the same way in production",
    "start": "723600",
    "end": "731600"
  },
  {
    "text": "so we want we by making it a pure function we get that out of the box that",
    "start": "731600",
    "end": "737320"
  },
  {
    "text": "we can we can guarantee that we can test it a thousand times and it's going to give us the same answer um an impure",
    "start": "737320",
    "end": "745920"
  },
  {
    "text": "function uh you can't do that and so notice it's it starts to become a lot",
    "start": "745920",
    "end": "750959"
  },
  {
    "text": "harder to test so it might have to read from the database okay now in your test",
    "start": "750959",
    "end": "756000"
  },
  {
    "text": "environment you have to set up a database and put some data in there for it to read and the reproducibility",
    "start": "756000",
    "end": "762120"
  },
  {
    "text": "becomes a lot harder um you have to basically set up the like bubble that",
    "start": "762120",
    "end": "768320"
  },
  {
    "text": "that function that impure function runs in to like simulate it you know working",
    "start": "768320",
    "end": "775160"
  },
  {
    "text": "in production right because that's when you want it to actually work is in production the other thing about actions",
    "start": "775160",
    "end": "781920"
  },
  {
    "text": "that makes them hard besides being harder to test is ordering and the",
    "start": "781920",
    "end": "788079"
  },
  {
    "text": "number of times they get called is actually the point of your software right like I want the email to get sent",
    "start": "788079",
    "end": "795639"
  },
  {
    "text": "right like that's Point once and only once right once exactly unless this",
    "start": "795639",
    "end": "801240"
  },
  {
    "text": "condition happens right right I want to choose if the email gets sent or not and",
    "start": "801240",
    "end": "806279"
  },
  {
    "text": "when it gets sent so now this is kind of the point of your program right is to",
    "start": "806279",
    "end": "811600"
  },
  {
    "text": "like apply the break in the car or not or how much you apply The Brak and at what time and so by pushing as much",
    "start": "811600",
    "end": "820560"
  },
  {
    "text": "stuff as possible into calculations we've reduced the amount of",
    "start": "820560",
    "end": "826079"
  },
  {
    "text": "hard stuff that we have to focus on the actions and ordering and timing we've",
    "start": "826079",
    "end": "833079"
  },
  {
    "text": "reduce that so we can pay more attention to it those calculations like I think I",
    "start": "833079",
    "end": "838440"
  },
  {
    "text": "I I like to say that like functional programming in general has gotten it backwards like we like to focus on the",
    "start": "838440",
    "end": "844839"
  },
  {
    "text": "pure functions but really the reason we do so much code in pure functions is because",
    "start": "844839",
    "end": "852000"
  },
  {
    "text": "they're easy right and so we want to just get them over with and like throw them at the test server and it can deal",
    "start": "852000",
    "end": "858279"
  },
  {
    "text": "with them from now on now it's the actions now we got to we got to learn how to how to maintain the order and the",
    "start": "858279",
    "end": "863839"
  },
  {
    "text": "timing and everything and and how many times they get run yeah and functional programming has a lot of tools for doing",
    "start": "863839",
    "end": "871279"
  },
  {
    "text": "that that other paradigms you know borrow from functional programming",
    "start": "871279",
    "end": "877320"
  },
  {
    "text": "that's really interesting you could almost describe it as it's another way of thinking about separating concerns",
    "start": "877320",
    "end": "883120"
  },
  {
    "text": "but in this case what you're separating is the easy stuff and the hard stuff and you're making sure that those are dealt with differently so that you can really",
    "start": "883120",
    "end": "889920"
  },
  {
    "text": "focus on the hard stuff right by itself exactly exactly because the hard stuff",
    "start": "889920",
    "end": "895199"
  },
  {
    "text": "is the stuff that actually matters the most at the end of the day because that's not to use the word side effect again but like that's the point of our",
    "start": "895199",
    "end": "901279"
  },
  {
    "text": "programs is to change the world somehow right or maybe it's just to provide some information and that's could be a",
    "start": "901279",
    "end": "906720"
  },
  {
    "text": "calculation but most of the times valuable software changes the world interacts with the world in a way and",
    "start": "906720",
    "end": "911959"
  },
  {
    "text": "these are our actions and that's I haven't thought about it that way I always I always have once I started",
    "start": "911959",
    "end": "917000"
  },
  {
    "text": "picking up that distinction I've always thought yes I want as many pure functions as possible and I want to",
    "start": "917000",
    "end": "923240"
  },
  {
    "text": "minimize the impure functions because easy and hard right easy to test",
    "start": "923240",
    "end": "928440"
  },
  {
    "text": "hard to test the things you've just described but I never thought of it is is because the hard ones are the important ones and actually you're then",
    "start": "928440",
    "end": "935639"
  },
  {
    "text": "I mean it's all important so relative but the hard ones the actions are where",
    "start": "935639",
    "end": "941440"
  },
  {
    "text": "the focus needs to be because they're hard because they change their world because they're the point they're kind of the point it's interesting that's",
    "start": "941440",
    "end": "948040"
  },
  {
    "text": "right they're the point and and I I I really think that that in discussions about what functional programming is uh",
    "start": "948040",
    "end": "955880"
  },
  {
    "text": "we've gotten it backwards that we say oh functional programming is all about programming with only pure functions and",
    "start": "955880",
    "end": "963920"
  },
  {
    "text": "I think it's it's really the opposite it's like well we've got this tool called Pure functions that will let us",
    "start": "963920",
    "end": "970079"
  },
  {
    "text": "ignore them for a while because we know they're not going to change and they're really easy to deal with they're so easy",
    "start": "970079",
    "end": "975519"
  },
  {
    "text": "to deal with that we can put a type system on them and like the computer can figure stuff out about them it's the",
    "start": "975519",
    "end": "982199"
  },
  {
    "text": "side effects it's the you know when to launch the missile and the you know do I",
    "start": "982199",
    "end": "988079"
  },
  {
    "text": "do this first that first and how do I guarantee that in an asynchronous environment or a multi-threaded",
    "start": "988079",
    "end": "993440"
  },
  {
    "text": "environment how do I do that that's where functional programming has a lot to say and you know a lot of constructs",
    "start": "993440",
    "end": "1000839"
  },
  {
    "text": "for dealing with stuff like that so can we talk a little bit then about what are",
    "start": "1000839",
    "end": "1005920"
  },
  {
    "text": "the language features that are important for doing this because as we've currently described it U this is something that you could do in Java",
    "start": "1005920",
    "end": "1012440"
  },
  {
    "text": "right like you could separate out the easy deterministic functions from the",
    "start": "1012440",
    "end": "1019399"
  },
  {
    "text": "actions that are changing the world and yet as we described like Java is a",
    "start": "1019399",
    "end": "1024438"
  },
  {
    "text": "dysfunctional language it is not a good language for functional programming whereas JavaScript is you know",
    "start": "1024439",
    "end": "1031038"
  },
  {
    "text": "reasonable and then there are these dedicated functional languages or languages that are really functional oriented so what are the sort of layers",
    "start": "1031039",
    "end": "1037880"
  },
  {
    "text": "of language features that make this Paradigm easier or harder so I think the",
    "start": "1037880",
    "end": "1044000"
  },
  {
    "text": "first one is something that most languages have for this first gateway right it's Simply Having a way of not",
    "start": "1044000",
    "end": "1052200"
  },
  {
    "text": "changing stuff like like right something like machine code like every single",
    "start": "1052200",
    "end": "1060440"
  },
  {
    "text": "machine instruction modifies a register like it adds two numbers and stores it",
    "start": "1060440",
    "end": "1065559"
  },
  {
    "text": "somewhere add adds these two numbers and store like so you have to modify it and you you have to build in like a stack or",
    "start": "1065559",
    "end": "1072200"
  },
  {
    "text": "something to make sure that you can allocate local variables and all that",
    "start": "1072200",
    "end": "1077320"
  },
  {
    "text": "stuff that you don't get out of the box so most you know",
    "start": "1077320",
    "end": "1083440"
  },
  {
    "text": "languages that we use every day are have this they have local variables they have",
    "start": "1083440",
    "end": "1090240"
  },
  {
    "text": "uh ways to allocate new memory new values and then of course you need the discipline to like I'm not g to change",
    "start": "1090240",
    "end": "1097600"
  },
  {
    "text": "this after I said it or I'm not you know I have a list and I'm only GNA do a copy on right which we can talk about like an",
    "start": "1097600",
    "end": "1105080"
  },
  {
    "text": "immutability discipline but then there's the next Gateway which is sort of higher",
    "start": "1105080",
    "end": "1110760"
  },
  {
    "text": "order programming and to do that you need to be able to make a first class",
    "start": "1110760",
    "end": "1117360"
  },
  {
    "text": "function as you can in JavaScript in Java you can kind of do it with lambdas",
    "start": "1117360",
    "end": "1124280"
  },
  {
    "text": "that makes it kind of easier but even if you like you faked it with with classes",
    "start": "1124280",
    "end": "1130400"
  },
  {
    "text": "that you instantiated you could get by it just seems very heavyweight to like",
    "start": "1130400",
    "end": "1135960"
  },
  {
    "text": "make a a function or a class called plus then added two numbers right right but",
    "start": "1135960",
    "end": "1142440"
  },
  {
    "text": "in JavaScript it's like you know especially with the es6 syntax it's like six characters just to be clear when",
    "start": "1142440",
    "end": "1149039"
  },
  {
    "text": "we're talking about a first class function that is a function that you can pass around as an argument is that",
    "start": "1149039",
    "end": "1154640"
  },
  {
    "text": "that's right y that's it you can you can treat it like a value in your language so it can be an argument a return uh",
    "start": "1154640",
    "end": "1161919"
  },
  {
    "text": "value it can be stored in a variable or even in like the value of a of an object",
    "start": "1161919",
    "end": "1168240"
  },
  {
    "text": "like a property of an object put in an array you know anything you can do to a number or a string you can do it to a",
    "start": "1168240",
    "end": "1177940"
  },
  {
    "text": "[Music]",
    "start": "1177940",
    "end": "1193690"
  },
  {
    "text": "function this episode is brought to you by Source graph Source graph is code search for every developer and team",
    "start": "1194280",
    "end": "1200880"
  },
  {
    "text": "easily search across all the code that matters to you in your organization find example code explore and read code debug",
    "start": "1200880",
    "end": "1207600"
  },
  {
    "text": "issues and so much more and I talk with biang L CTO and co-founder of source graph and asked him to share what code",
    "start": "1207600",
    "end": "1214240"
  },
  {
    "text": "search is what developers and teams are missing out on and how Source graph provides code search to every developer",
    "start": "1214240",
    "end": "1220080"
  },
  {
    "text": "in the world if you've worked inside a Google or Facebook or any one of these",
    "start": "1220080",
    "end": "1225120"
  },
  {
    "text": "really big well respected technology companies chances are you've used something like code search before and",
    "start": "1225120",
    "end": "1230960"
  },
  {
    "text": "you know the value that provides to your team you know that almost every single engineer inside these organizations uses",
    "start": "1230960",
    "end": "1237080"
  },
  {
    "text": "it on a a daily basis if you've never had that experience chances are you may",
    "start": "1237080",
    "end": "1242120"
  },
  {
    "text": "not know what you're missing out on you know the term code search sounds a lot like you know grep or the search inside",
    "start": "1242120",
    "end": "1248320"
  },
  {
    "text": "your editor and that's what a lot of people think when they first hear it but it's really about much more than that it's really about connecting you as a",
    "start": "1248320",
    "end": "1254960"
  },
  {
    "text": "developer to the broader Universe of code and code related data that's relevant to you that you need at hand in",
    "start": "1254960",
    "end": "1261799"
  },
  {
    "text": "order to enter that you know magical Flow State of you know being your editor writing code quickly making rapid",
    "start": "1261799",
    "end": "1268440"
  },
  {
    "text": "progress towards that feature bug fix that you're working on it's really about making all that contextual information accessible at your finger tips and what",
    "start": "1268440",
    "end": "1275640"
  },
  {
    "text": "that means is think about every single repository every single file and every single language uh every single diff and",
    "start": "1275640",
    "end": "1283039"
  },
  {
    "text": "every single open source dependency or maybe closed Source dependency that's shared across your organization all that",
    "start": "1283039",
    "end": "1288679"
  },
  {
    "text": "that is searchable through a single text box and that's really powerful because it means all this friction is eliminated",
    "start": "1288679",
    "end": "1294840"
  },
  {
    "text": "between you and understanding that broader world of code you don't have to clone stuff down to your local machine you don't have to mess around with editor config you don't have to be",
    "start": "1294840",
    "end": "1302039"
  },
  {
    "text": "constantly bugging people on other teams who may not even know who you are in order to teach yourself how all that",
    "start": "1302039",
    "end": "1308400"
  },
  {
    "text": "code Works what source graph is is really a way for the rest of us the",
    "start": "1308400",
    "end": "1314159"
  },
  {
    "text": "people who don't work inside the Googles the Facebooks to get a tool that gives us access to that sort of information",
    "start": "1314159",
    "end": "1321880"
  },
  {
    "text": "readily and and at our fingertips it's really about bringing this this type of tool that a lot of the larger technology",
    "start": "1321880",
    "end": "1327440"
  },
  {
    "text": "companies have developed and invested hundreds of millions of dollars into making for the productivity of their own",
    "start": "1327440",
    "end": "1332960"
  },
  {
    "text": "engineers and making that accessible to every single developer in the world all right if code search powered by sourcc",
    "start": "1332960",
    "end": "1338840"
  },
  {
    "text": "sounds like something you and your team can use head to info. sourcegraph docomo and click the button that says Tri",
    "start": "1338840",
    "end": "1344840"
  },
  {
    "text": "Source graph now you can install locally deploy it to a server or to to a cluster they have a quick start guide that takes",
    "start": "1344840",
    "end": "1350440"
  },
  {
    "text": "less than 5 minutes to install sourcc using Docker so it's too easy to give a try again head to info. Source craft.com",
    "start": "1350440",
    "end": "1359559"
  },
  {
    "text": "[Music]",
    "start": "1361790",
    "end": "1370489"
  },
  {
    "text": "[Music] changelog",
    "start": "1372860",
    "end": "1380440"
  },
  {
    "text": "[Music] so we've talked about a couple aspects",
    "start": "1381360",
    "end": "1387760"
  },
  {
    "text": "of functional programming languages immutability which you avoided that word I wonder if you you had your own way of",
    "start": "1387760",
    "end": "1394000"
  },
  {
    "text": "describing it which was simpler but I can't remember what it was um immutability and first class functions",
    "start": "1394000",
    "end": "1400640"
  },
  {
    "text": "what was the way you described immutability was that on purpose because you seem very uh careful with your wording I think you said like the",
    "start": "1400640",
    "end": "1405919"
  },
  {
    "text": "ability to not change things right okay so yeah I Ed the term",
    "start": "1405919",
    "end": "1411440"
  },
  {
    "text": "immutability I made a very conscious decision not to talk about language features right and that's all we ask you",
    "start": "1411440",
    "end": "1418640"
  },
  {
    "text": "about well yeah that was me I'm the bad cop and yet here we are it's true you do",
    "start": "1418640",
    "end": "1424799"
  },
  {
    "text": "need you do need some language features but immutability is not a required language feature right um because do it",
    "start": "1424799",
    "end": "1432679"
  },
  {
    "text": "with discipline yes yeah you just don't change things exactly you just don't change things and so what I am calling",
    "start": "1432679",
    "end": "1438520"
  },
  {
    "text": "mutable is a value that you have even if it's just mentally marked as I'm not",
    "start": "1438520",
    "end": "1445799"
  },
  {
    "text": "going to change this sometimes you get help from your language so like in closure the data structures it gives you",
    "start": "1445799",
    "end": "1453320"
  },
  {
    "text": "are immutable can't do it like there's no methods on them that allow you to change them but in something like",
    "start": "1453320",
    "end": "1461000"
  },
  {
    "text": "JavaScript or Java like that's kind of the default is that you can change the stuff so you have to provide the imut",
    "start": "1461000",
    "end": "1468840"
  },
  {
    "text": "yourself as a discipline and then we talked about functional first class functions right so in JavaScript you can",
    "start": "1468840",
    "end": "1475640"
  },
  {
    "text": "do immutable programming in fact there's libraries and things out there that will help you practice that discipline but it",
    "start": "1475640",
    "end": "1482799"
  },
  {
    "text": "does have to be a discipline because you can mutate variables in JavaScript that's right and it's so easy",
    "start": "1482799",
    "end": "1489159"
  },
  {
    "text": "to just assign to a hashmap or you know an object as a hashmap and um delete",
    "start": "1489159",
    "end": "1496039"
  },
  {
    "text": "keys out of it like if you do any of that modifying it and any other piece of code that has a reference to it it's",
    "start": "1496039",
    "end": "1502679"
  },
  {
    "text": "also changed for them too right right and I'm not saying it's it's bad like",
    "start": "1502679",
    "end": "1507919"
  },
  {
    "text": "it's not bad to do that or to be able to do that but it's not immutable well to",
    "start": "1507919",
    "end": "1512960"
  },
  {
    "text": "go back to your your language from earlier you're kind of taking what would have been a calculation and turning it",
    "start": "1512960",
    "end": "1518440"
  },
  {
    "text": "into an action at that point because you are changing the world right and that's dangerous because you're increasing the",
    "start": "1518440",
    "end": "1524520"
  },
  {
    "text": "surface area of your actions and we already decided that we want to minimize those another thing about actions that I",
    "start": "1524520",
    "end": "1530399"
  },
  {
    "text": "didn't mention was that they spread so if you imagine function a",
    "start": "1530399",
    "end": "1536520"
  },
  {
    "text": "calls function B and function B calls function C IF function C is an action",
    "start": "1536520",
    "end": "1542080"
  },
  {
    "text": "meaning it depends on when it's called then function B has to be an action too",
    "start": "1542080",
    "end": "1547399"
  },
  {
    "text": "because it calls function C and then function a has to be an action because it calls function B so this is kind of",
    "start": "1547399",
    "end": "1554880"
  },
  {
    "text": "like a correl of the definition of actions calcul in data a lot of people",
    "start": "1554880",
    "end": "1560880"
  },
  {
    "text": "tried to like put layers and layers of wrapping around mutation so that like it",
    "start": "1560880",
    "end": "1569159"
  },
  {
    "text": "goes away but it can't if you put it down at the bottom everything above it",
    "start": "1569159",
    "end": "1574360"
  },
  {
    "text": "is going to have to be in action what you want to do is kind of reverse it that's interesting and put it all at the",
    "start": "1574360",
    "end": "1580120"
  },
  {
    "text": "top because that it's got that the top is going to be an action anyway your main function for instance that's going",
    "start": "1580120",
    "end": "1585640"
  },
  {
    "text": "to be an action there's no way to avoid that have a good piece of software yeah I ran it and nothing happened something",
    "start": "1585640",
    "end": "1591960"
  },
  {
    "text": "that just adds adds some numbers up I think we'll we'll get into this a little bit more later but I think that ties",
    "start": "1591960",
    "end": "1598080"
  },
  {
    "text": "deeply into the way that um in sort of front-end Frameworks and their move towards functionality how they think",
    "start": "1598080",
    "end": "1604279"
  },
  {
    "text": "about where State lives right and how you want to push State up the tree right so that you can have more and more pure",
    "start": "1604279",
    "end": "1611760"
  },
  {
    "text": "pure I was going to say pure components but I was trying to figure out like calculated components what's a nomenclature we might use here yeah the",
    "start": "1611760",
    "end": "1618360"
  },
  {
    "text": "move is that they become yeah like just functions of their props right they R",
    "start": "1618360",
    "end": "1626440"
  },
  {
    "text": "you know nodes and don't have state or side effects or anything I mean that's",
    "start": "1626440",
    "end": "1633360"
  },
  {
    "text": "what that's the ideal right right now do we have to worry about the fact that by",
    "start": "1633360",
    "end": "1638640"
  },
  {
    "text": "modifying the Dom they are in some ways have taking action or do we conceptualize that as they return what",
    "start": "1638640",
    "end": "1646000"
  },
  {
    "text": "the Dom should be and a higher level is what's actually having the action of changing the right right they they are",
    "start": "1646000",
    "end": "1652880"
  },
  {
    "text": "not actually modifying the Dom uh they are just returning a value and something",
    "start": "1652880",
    "end": "1658200"
  },
  {
    "text": "else which someone has carefully constructed and presumably tested uh is",
    "start": "1658200",
    "end": "1665159"
  },
  {
    "text": "managing the actual actions that happen uh which is a common pattern in",
    "start": "1665159",
    "end": "1671519"
  },
  {
    "text": "functional programming where you kind of return a data representation of what you",
    "start": "1671519",
    "end": "1677080"
  },
  {
    "text": "want to get done so you know simple example is instead of a function looping through a bunch of",
    "start": "1677080",
    "end": "1684559"
  },
  {
    "text": "customers and sending each one an email like at in inside the loop you could map",
    "start": "1684559",
    "end": "1690679"
  },
  {
    "text": "over the customers and generate a list of the",
    "start": "1690679",
    "end": "1695880"
  },
  {
    "text": "emails in a data representation so you know the two the subject the body and",
    "start": "1695880",
    "end": "1702320"
  },
  {
    "text": "then something else will Loop through that and send off the emails maybe in batches or or however you want to do it",
    "start": "1702320",
    "end": "1709679"
  },
  {
    "text": "and that way you're pushing more and more of the code into calculations and then you just have this little tight",
    "start": "1709679",
    "end": "1715360"
  },
  {
    "text": "Loop that just send email send email send an email send an email doesn't have to do any decision making or anything",
    "start": "1715360",
    "end": "1721240"
  },
  {
    "text": "it's just a very simple like you could you know just do a four each on it so",
    "start": "1721240",
    "end": "1726600"
  },
  {
    "text": "we're getting into some of these functional things now we talk about uh immutability this is not a feature of JavaScript but something you can do in",
    "start": "1726600",
    "end": "1732760"
  },
  {
    "text": "JavaScript then you have first class functions this is a JavaScript feature and so you can pass functions around as",
    "start": "1732760",
    "end": "1737799"
  },
  {
    "text": "value use and that's very useful in functional programming because that's what you want to do and now you also have these specific language features",
    "start": "1737799",
    "end": "1745480"
  },
  {
    "text": "which are sometimes standard Library oftentimes right there in the language uh where these are functions which are",
    "start": "1745480",
    "end": "1752760"
  },
  {
    "text": "useful to functional programming you have map reduce filter etc etc explain",
    "start": "1752760",
    "end": "1758960"
  },
  {
    "text": "why these are these lend themselves to make functional programming easy right so these I call functional tools they",
    "start": "1758960",
    "end": "1767039"
  },
  {
    "text": "are often they come in the form of a function that takes a value often a",
    "start": "1767039",
    "end": "1774200"
  },
  {
    "text": "collection you know like in the in the case of map or filter and a first class function as an",
    "start": "1774200",
    "end": "1780480"
  },
  {
    "text": "argument and what they let you do is stop writing for Loops basically so",
    "start": "1780480",
    "end": "1788039"
  },
  {
    "text": "for Loops are a very imperative construct they require you to initialize",
    "start": "1788039",
    "end": "1793799"
  },
  {
    "text": "a variable and then modify that variable you know yeah we've all done it the i++",
    "start": "1793799",
    "end": "1800399"
  },
  {
    "text": "and the I is less than array. link and all that stuff and instead of doing that",
    "start": "1800399",
    "end": "1806480"
  },
  {
    "text": "you notice these patterns where look I'm taking a list and doing something to every element over and over again I'm",
    "start": "1806480",
    "end": "1813799"
  },
  {
    "text": "doing that in a lot of different places like half of my for Loops probably are just that and so instead of writing that",
    "start": "1813799",
    "end": "1820840"
  },
  {
    "text": "over and over again I can consolidate that into one place sometimes you might",
    "start": "1820840",
    "end": "1826320"
  },
  {
    "text": "think of it as drying that up and the first class function is what",
    "start": "1826320",
    "end": "1831880"
  },
  {
    "text": "lets you represent the body of that Loop you couldn't do it without a first class",
    "start": "1831880",
    "end": "1838080"
  },
  {
    "text": "function because you know typically when you abstract with procedural abstraction",
    "start": "1838080",
    "end": "1844559"
  },
  {
    "text": "you take like you have a 10-step process and you say okay the first three steps I'm going to name them in a function and",
    "start": "1844559",
    "end": "1850320"
  },
  {
    "text": "I'll just call them and then the next steps I'll name them and then the last two I'll name those and so now I just",
    "start": "1850320",
    "end": "1856440"
  },
  {
    "text": "have a three-step function but you can't do that with a for Loop because the for Loop needs the opening",
    "start": "1856440",
    "end": "1863960"
  },
  {
    "text": "and closing braces and you can't separate them syntactically like it's just not valid syntax to do that so",
    "start": "1863960",
    "end": "1872039"
  },
  {
    "text": "there's no way to have like here's the two breads the two pieces of bread for",
    "start": "1872039",
    "end": "1878600"
  },
  {
    "text": "your sandwich together and then Define them the ingredients on your sandwich",
    "start": "1878600",
    "end": "1884600"
  },
  {
    "text": "separately at a different time right well first class functions let you do that so you could replace a a for loop",
    "start": "1884600",
    "end": "1890919"
  },
  {
    "text": "with a four each and the four each does the same thing looping through an array would do uh where it gives you access to",
    "start": "1890919",
    "end": "1898120"
  },
  {
    "text": "each element and then you pass in what you want done to each element as a",
    "start": "1898120",
    "end": "1904159"
  },
  {
    "text": "function and so anyway we have a bunch of tools like this what I really like about them is they're very simple like",
    "start": "1904159",
    "end": "1911480"
  },
  {
    "text": "you could write them yourself they're not like some complex thing you probably",
    "start": "1911480",
    "end": "1917000"
  },
  {
    "text": "have written them yourself maybe you didn't know it so map is like three lines long four lines long filter it's a",
    "start": "1917000",
    "end": "1924240"
  },
  {
    "text": "few lines reduce starts to get a little bit more complicated but you know you could write it in a couple lines and you",
    "start": "1924240",
    "end": "1931480"
  },
  {
    "text": "know there's a number of these uh low Dash has a bunch of them like already built in I know a lot of people use low",
    "start": "1931480",
    "end": "1938760"
  },
  {
    "text": "Dash it's it's a really great tool for that kind of thing and so the reason I think that they're useful is it lets you",
    "start": "1938760",
    "end": "1946519"
  },
  {
    "text": "transform really complicated nested for Loops into a sequence of steps so you",
    "start": "1946519",
    "end": "1953519"
  },
  {
    "text": "look at the for Loop and you're like I I mean I really have to trace through in my head what's happening in every iteration and like keep track of two",
    "start": "1953519",
    "end": "1960720"
  },
  {
    "text": "nestings of like what's going on at which point but if you turn it into a a",
    "start": "1960720",
    "end": "1967320"
  },
  {
    "text": "chain sequence of functional tools it might be four or five steps right and",
    "start": "1967320",
    "end": "1972960"
  },
  {
    "text": "each one is really simple and clear what it's doing so you could you know this",
    "start": "1972960",
    "end": "1979440"
  },
  {
    "text": "nested for Loop could have some conditionals inside so like that conditional could be turned into a",
    "start": "1979440",
    "end": "1985120"
  },
  {
    "text": "filter right it's like oh I'm only dealing with the even numbers okay and then the next step is um for each of",
    "start": "1985120",
    "end": "1992760"
  },
  {
    "text": "those numbers we're calculating a string an offset in the string okay that's a map because you're calculating based on",
    "start": "1992760",
    "end": "1999880"
  },
  {
    "text": "the input and then you know it just becomes this like sequence of what looks",
    "start": "1999880",
    "end": "2005440"
  },
  {
    "text": "like linear steps um operating on collections of data yeah and it's very",
    "start": "2005440",
    "end": "2011720"
  },
  {
    "text": "easy to reason about right because you see those boom boom boom boom and you can just like hop in the middle of that",
    "start": "2011720",
    "end": "2017000"
  },
  {
    "text": "and you know insert another thing right there that's right or take that thing out when I first learned about this",
    "start": "2017000",
    "end": "2023880"
  },
  {
    "text": "approach it was probably one of the biggest productivity improvements that",
    "start": "2023880",
    "end": "2029000"
  },
  {
    "text": "I've or leaps that I've had in my career programming because it it changes the way that you think about this and gets",
    "start": "2029000",
    "end": "2035320"
  },
  {
    "text": "you used to thinking about things as a series of trans informations to the data right right and it really forces you to",
    "start": "2035320",
    "end": "2042320"
  },
  {
    "text": "think about the data kind of pipeline of how it's going through which is in many",
    "start": "2042320",
    "end": "2048398"
  },
  {
    "text": "many examples a much more productive way to think about it and a much simpler way to think about it than trying to think",
    "start": "2048399",
    "end": "2054398"
  },
  {
    "text": "imperatively what are all the things I'm doing to a single item yeah you think smaller because you think in smaller",
    "start": "2054399",
    "end": "2060280"
  },
  {
    "text": "steps whereas in the past maybe you started that for Loop and then you got your editor like right there inside the",
    "start": "2060280",
    "end": "2065919"
  },
  {
    "text": "for Loop and you're like now what are the the eight things I got to do to get out of here right right but instead you",
    "start": "2065919",
    "end": "2071040"
  },
  {
    "text": "think like what's thing one I'm going to do that what's thing two right you think in those smaller steps the other thing",
    "start": "2071040",
    "end": "2076118"
  },
  {
    "text": "is you can just you know let's say you you do the first step you could just print it out you just print out the the",
    "start": "2076119",
    "end": "2083158"
  },
  {
    "text": "value you got you know test it out right there whereas if you're in a for Loop you're like well I haven't done anything",
    "start": "2083159",
    "end": "2088960"
  },
  {
    "text": "yet like I've just got this local variable that I've been like accumulating stuff in but at what point",
    "start": "2088960",
    "end": "2094679"
  },
  {
    "text": "do I print that out like at the end of the loop but then something else happens to it so I can't do that you know so",
    "start": "2094679",
    "end": "2101320"
  },
  {
    "text": "having these steps each one is an immutable collection you could print all of them",
    "start": "2101320",
    "end": "2107599"
  },
  {
    "text": "out uh and you know you have like a record of everything you've done and then the other thing is like often for",
    "start": "2107599",
    "end": "2114560"
  },
  {
    "text": "Loops start out really easy and then as you add features they accumulate local",
    "start": "2114560",
    "end": "2120720"
  },
  {
    "text": "variables and conditions conditionals and stuff and so they just become really",
    "start": "2120720",
    "end": "2125960"
  },
  {
    "text": "hard to to work with and uh modify but if you've got it in steps it might not be a linear series of",
    "start": "2125960",
    "end": "2133680"
  },
  {
    "text": "steps it might be four series of steps right but you can reuse the first two steps for the next set of steps like you",
    "start": "2133680",
    "end": "2141160"
  },
  {
    "text": "know you can you can compose these however you want but each step is clear each step shows you like okay I've gone",
    "start": "2141160",
    "end": "2149040"
  },
  {
    "text": "from a list of all numbers from one to 100 to a list of only the multiples of",
    "start": "2149040",
    "end": "2154440"
  },
  {
    "text": "three and that's a concrete step that is easy to understand so there's probably a",
    "start": "2154440",
    "end": "2160319"
  },
  {
    "text": "lot of people out there thinking holy cow I've been doing functional programming this whole time I just didn't know it I hope so at least in",
    "start": "2160319",
    "end": "2167040"
  },
  {
    "text": "some parts of my code right yeah what I've noticed is like a lot of people get to the map filter and reduce they stay",
    "start": "2167040",
    "end": "2174319"
  },
  {
    "text": "there and well they stay there yes they they get it and they use them really productively and that's great but I",
    "start": "2174319",
    "end": "2180440"
  },
  {
    "text": "would implore people to look at stuff that uh low Dash gives you besides map",
    "start": "2180440",
    "end": "2186960"
  },
  {
    "text": "filter and there's a lot of other cool tools that",
    "start": "2186960",
    "end": "2192240"
  },
  {
    "text": "could like really be great in your toolbx one I really like is called",
    "start": "2192240",
    "end": "2197599"
  },
  {
    "text": "frequencies so if you have a sequence or any collection but let's say it's an array of values it's surprising how",
    "start": "2197599",
    "end": "2204920"
  },
  {
    "text": "often it comes up where I just want to know how many of each thing I have like how many twos do I have how many threes",
    "start": "2204920",
    "end": "2211240"
  },
  {
    "text": "do I have how many tens do I have and you could write that really easily you",
    "start": "2211240",
    "end": "2217160"
  },
  {
    "text": "know you it's just a loop through this array and you plop it into a hashmap and",
    "start": "2217160",
    "end": "2224040"
  },
  {
    "text": "with a one but if it's already in the hashmap you just add one to it right you could just write this and now you have",
    "start": "2224040",
    "end": "2231960"
  },
  {
    "text": "this reusable very abstract reusable function that is useful in so many",
    "start": "2231960",
    "end": "2238839"
  },
  {
    "text": "algorithms use that all the time yeah yeah so there's that one there's one",
    "start": "2238839",
    "end": "2245440"
  },
  {
    "text": "called a group by which is similar which instead of counting them it actually",
    "start": "2245440",
    "end": "2251240"
  },
  {
    "text": "puts them together and The Bu means you're passing in the function of how to",
    "start": "2251240",
    "end": "2256920"
  },
  {
    "text": "how to group them so like let's say you have an array of of users user Maps",
    "start": "2256920",
    "end": "2263480"
  },
  {
    "text": "right user objects and you want to group them by like the first letter of their last name something like that you would",
    "start": "2263480",
    "end": "2270680"
  },
  {
    "text": "pass in this array and you would pass in the function that could calculate the",
    "start": "2270680",
    "end": "2276880"
  },
  {
    "text": "first letter of their last name given one of them and then it will make a map",
    "start": "2276880",
    "end": "2282200"
  },
  {
    "text": "where like all the e are in an array and all the bees are in an array and there",
    "start": "2282200",
    "end": "2288400"
  },
  {
    "text": "you go now you have them you know grouped in this way and that's great for making indices if you need an index so",
    "start": "2288400",
    "end": "2295960"
  },
  {
    "text": "that you can do quick lookup by a certain value like the first letter of their last name it's great for",
    "start": "2295960",
    "end": "2301839"
  },
  {
    "text": "algorithms yeah because you you avoid nesting because you effectively return yourself what is conceptually a list of",
    "start": "2301839",
    "end": "2309599"
  },
  {
    "text": "lists and then you're just applying the next operation on that list of lists and",
    "start": "2309599",
    "end": "2314800"
  },
  {
    "text": "then you're back to a you can flatten that back out and keep going that's right yeah that type of grouping is often a super valuable performance",
    "start": "2314800",
    "end": "2321839"
  },
  {
    "text": "improvement too because I so often run into code that I'm coming in having to make it scale after the fact where folks",
    "start": "2321839",
    "end": "2329160"
  },
  {
    "text": "have written something that basically does a nested pair of Loops right that square that scales quadratically it's",
    "start": "2329160",
    "end": "2334359"
  },
  {
    "text": "like okay for this case go and find for all the a Loop through and look figure",
    "start": "2334359",
    "end": "2339680"
  },
  {
    "text": "out if it's got an A okay now for all the B's Loop through yeah exactly and you do a pregroup buy single iteration",
    "start": "2339680",
    "end": "2346520"
  },
  {
    "text": "through through a list and then you list through the set of things you need to check and you you transformed a",
    "start": "2346520",
    "end": "2352160"
  },
  {
    "text": "quadratic operation into two linear ones and suddenly it's fast it's so funny because you know we often think of",
    "start": "2352160",
    "end": "2359520"
  },
  {
    "text": "making a data structure as like an expensive operation but these days",
    "start": "2359520",
    "end": "2364680"
  },
  {
    "text": "people have so much memory on their machines like a little hashmap I mean literally this hashmap",
    "start": "2364680",
    "end": "2370920"
  },
  {
    "text": "could have at most 26 entries in it like it's not big and you're not copying the",
    "start": "2370920",
    "end": "2378079"
  },
  {
    "text": "users right those objects are just being referenced so when you think about how",
    "start": "2378079",
    "end": "2384040"
  },
  {
    "text": "little is actually being allocated it's not that much you've got 26 entries in a",
    "start": "2384040",
    "end": "2389800"
  },
  {
    "text": "hashmap and 26 arrays and the rest is all just referenced to the original user",
    "start": "2389800",
    "end": "2396920"
  },
  {
    "text": "object right so you know we're we're we're like counting pennies over here",
    "start": "2396920",
    "end": "2403680"
  },
  {
    "text": "and people have millions in their",
    "start": "2403680",
    "end": "2408440"
  },
  {
    "text": "iPhone what's up JS party people have you ever wondered if you could be offering a faster less buggy experience",
    "start": "2418560",
    "end": "2424920"
  },
  {
    "text": "for your customers well with Ray Gun air and performance monitoring you have all the information you need at your",
    "start": "2424920",
    "end": "2430720"
  },
  {
    "text": "fingertips to quickly find and fix errors and performance issues across your text Stack Down to the line of code",
    "start": "2430720",
    "end": "2436960"
  },
  {
    "text": "ray gun makes it easy to monitor the impact of your performance improvements quickly identify issues across web and",
    "start": "2436960",
    "end": "2442000"
  },
  {
    "text": "mobile apps and see how your code performs in the hands of your customers this saves you time this saves you money",
    "start": "2442000",
    "end": "2448480"
  },
  {
    "text": "and this saves your sanity head to Ray gun.com to join thousands of customers and software teams who use ray gun every",
    "start": "2448480",
    "end": "2454000"
  },
  {
    "text": "single day again Ray gun.com to give them a try with a free 14-day",
    "start": "2454000",
    "end": "2459120"
  },
  {
    "text": "[Music]",
    "start": "2459120",
    "end": "2462219"
  },
  {
    "text": "[Music]",
    "start": "2467260",
    "end": "2470399"
  },
  {
    "text": "trial so one thing that I think is brought functional paradigms very much front and center for for many folks",
    "start": "2484760",
    "end": "2491040"
  },
  {
    "text": "using JavaScript is the trend in front-end Frameworks and react in particular to move towards more",
    "start": "2491040",
    "end": "2497880"
  },
  {
    "text": "functional paradigms and so I'd love to kind of get your sense of both what are the parts of that that are working well",
    "start": "2497880",
    "end": "2505800"
  },
  {
    "text": "what are the parts that are unintuitive and how do some of the kind of more react specific Concepts like Hooks and",
    "start": "2505800",
    "end": "2512680"
  },
  {
    "text": "things like that play into your mindset when you think about functional programming okay this is a big topic so",
    "start": "2512680",
    "end": "2519359"
  },
  {
    "text": "I think react is a great thing for the uh functional programming world just",
    "start": "2519359",
    "end": "2525560"
  },
  {
    "text": "making these ideas more popular the thing that is really the",
    "start": "2525560",
    "end": "2532319"
  },
  {
    "text": "most functional that I see is this idea",
    "start": "2532319",
    "end": "2538640"
  },
  {
    "text": "of a thing a component that takes props",
    "start": "2538640",
    "end": "2544319"
  },
  {
    "text": "and returns Dom and I don't know how old",
    "start": "2544319",
    "end": "2549960"
  },
  {
    "text": "the audience is but I remember jQuery and I remember having to like keep track",
    "start": "2549960",
    "end": "2557079"
  },
  {
    "text": "of like what the view has in it and like what I need to change and then every now",
    "start": "2557079",
    "end": "2562400"
  },
  {
    "text": "and then being like I'm just GNA rerender the whole thing because I've lost track and it was it was really hard",
    "start": "2562400",
    "end": "2569920"
  },
  {
    "text": "and you're basically doing your own little ad hoc virtual Dom each time so",
    "start": "2569920",
    "end": "2575599"
  },
  {
    "text": "this you know technology of the virtual Dom this trick is a really cool way of",
    "start": "2575599",
    "end": "2582520"
  },
  {
    "text": "making it for the programmer a very pure function experience and then having like",
    "start": "2582520",
    "end": "2590440"
  },
  {
    "text": "the react team figure out the virtual Dom diffing and actually modifying the",
    "start": "2590440",
    "end": "2596640"
  },
  {
    "text": "Dom one time for everybody so everyone using react is getting the benefit of",
    "start": "2596640",
    "end": "2601960"
  },
  {
    "text": "that one you know development and so I think that that's",
    "start": "2601960",
    "end": "2607400"
  },
  {
    "text": "great the stuff I worry about when I see people in the wild actually using react",
    "start": "2607400",
    "end": "2613880"
  },
  {
    "text": "is them making impure components so components that will like call out to",
    "start": "2613880",
    "end": "2622920"
  },
  {
    "text": "the server to get like user data whenever they're mounted into the Dom",
    "start": "2622920",
    "end": "2629319"
  },
  {
    "text": "right now they're doing it with hooks but they used to do it on like component will Mount or you know whatever life",
    "start": "2629319",
    "end": "2636040"
  },
  {
    "text": "cycle method they ch at the time and what that means is now",
    "start": "2636040",
    "end": "2641079"
  },
  {
    "text": "your component is in action it depends on when it mounts and and how many times",
    "start": "2641079",
    "end": "2646119"
  },
  {
    "text": "it mounts and you have the same problem and you see apps that have this issue",
    "start": "2646119",
    "end": "2651760"
  },
  {
    "text": "where every component on the page you know the idea is like the component is",
    "start": "2651760",
    "end": "2657319"
  },
  {
    "text": "supposed to be self-sufficient it's supposed to know where to get its data from and how to get it and it's going to",
    "start": "2657319",
    "end": "2663559"
  },
  {
    "text": "get it when it needs it and so you youve totally given up any ability to control",
    "start": "2663559",
    "end": "2670920"
  },
  {
    "text": "how many uh requests it makes or when they get made so you have a thing where",
    "start": "2670920",
    "end": "2676000"
  },
  {
    "text": "on a page it might make a hundred requests at the same time those are",
    "start": "2676000",
    "end": "2681319"
  },
  {
    "text": "going to get queued up in the browser in some random order because you can't",
    "start": "2681319",
    "end": "2686480"
  },
  {
    "text": "control it in an Ajax in a you know asynchronous environment and then maybe",
    "start": "2686480",
    "end": "2691839"
  },
  {
    "text": "three or four will go out at the same time and like you're just waiting on them and they're all blocking each other",
    "start": "2691839",
    "end": "2698079"
  },
  {
    "text": "like it's like the opposite of what I dreamed of when I first started using react and react is supposed to be very",
    "start": "2698079",
    "end": "2705359"
  },
  {
    "text": "reactive you click on something and it changes instantly without a like a loading spinner and stuff like that",
    "start": "2705359",
    "end": "2713000"
  },
  {
    "text": "nowadays we've like reimplemented you know the page refresh",
    "start": "2713000",
    "end": "2718040"
  },
  {
    "text": "poorly so I think that that's the wrong direction I see too many people you know",
    "start": "2718040",
    "end": "2723680"
  },
  {
    "text": "what I really think it is is that people don't know the functional ideas they haven't made this",
    "start": "2723680",
    "end": "2731280"
  },
  {
    "text": "this first gateway step of actions and calculations this distinguishing between",
    "start": "2731280",
    "end": "2737160"
  },
  {
    "text": "them and they're thinking of components as the building blocks of their whole",
    "start": "2737160",
    "end": "2743480"
  },
  {
    "text": "application when really they're just the building blocks of the view they're just",
    "start": "2743480",
    "end": "2749040"
  },
  {
    "text": "supposed to be used for projecting the state into HTML I mean",
    "start": "2749040",
    "end": "2756280"
  },
  {
    "text": "this is my opinion as a functional programmer okay like I know there's a lot of ways to write software but this",
    "start": "2756280",
    "end": "2763280"
  },
  {
    "text": "is the mistake I see as from my functional programming perspective I do a lot of closure script and we don't do",
    "start": "2763280",
    "end": "2770800"
  },
  {
    "text": "that in closure scripts you know closure and closure script they're functional languages and what we do is we keep the",
    "start": "2770800",
    "end": "2776960"
  },
  {
    "text": "state outside of the Dom mostly sometimes you have a little bit of State in the Dom uh where it makes sense when",
    "start": "2776960",
    "end": "2784040"
  },
  {
    "text": "I say when it makes sense I mean like if you have a a panel that opens and closes like that",
    "start": "2784040",
    "end": "2790160"
  },
  {
    "text": "open close state that can be in the panel it's tiny it doesn't have any effect on anything else you know it's",
    "start": "2790160",
    "end": "2796880"
  },
  {
    "text": "it's fine it doesn't hurt anything it's so manageable that you're you're not going to get into trouble but the",
    "start": "2796880",
    "end": "2803559"
  },
  {
    "text": "users's information come on that's going to be used in several places right like",
    "start": "2803559",
    "end": "2809359"
  },
  {
    "text": "the log you know you're going to have like a little Avatar up at the top you're going to use the username",
    "start": "2809359",
    "end": "2815599"
  },
  {
    "text": "somewhere in another component so you want to get that out of the Dom just get it out because it needs an Ajax request",
    "start": "2815599",
    "end": "2823160"
  },
  {
    "text": "like just take it out of the Dom so we don't put state in the Dom and we do all of our Ajax stuff outside of the Dom as",
    "start": "2823160",
    "end": "2831160"
  },
  {
    "text": "well outside of the components one question on that so thinking about the react Paradigm and different ways like",
    "start": "2831160",
    "end": "2836920"
  },
  {
    "text": "there are many different folks who use it in more or less kind of functional ways and I I love the language play of",
    "start": "2836920",
    "end": "2843880"
  },
  {
    "text": "the English meaning of functional as compared to our technical there but you know there's Trends",
    "start": "2843880",
    "end": "2849359"
  },
  {
    "text": "towards okay like every bit of State should be done in a component that",
    "start": "2849359",
    "end": "2854440"
  },
  {
    "text": "renders no View and then it should use its own set of components that are pure and there's things around that uh but",
    "start": "2854440",
    "end": "2860280"
  },
  {
    "text": "one thing I was wondering is you're talking about the the approach you use in closure uh script is does the the",
    "start": "2860280",
    "end": "2866760"
  },
  {
    "text": "model of contexts and context providers get closer there if you use context providers to manage the data or is that",
    "start": "2866760",
    "end": "2872880"
  },
  {
    "text": "not quite what you mean it does get closer we so we this is funny enclosure",
    "start": "2872880",
    "end": "2878960"
  },
  {
    "text": "script we were one of the first adopters of react I remember David Nolan the the",
    "start": "2878960",
    "end": "2884599"
  },
  {
    "text": "maintainer of closure script it's like experimenting with it back in 2013 and I I looked at it back then too and then",
    "start": "2884599",
    "end": "2891760"
  },
  {
    "text": "sort of all these there was like an explosion of rapper libraries enclosure script in 2013 and",
    "start": "2891760",
    "end": "2897720"
  },
  {
    "text": "2014 um and we kind of set the trajectory",
    "start": "2897720",
    "end": "2904079"
  },
  {
    "text": "back in 2014 so we haven't kept up to date with all of the developments in the",
    "start": "2904079",
    "end": "2909319"
  },
  {
    "text": "react World that I mean it must have been like react 10 or 11 like when we",
    "start": "2909319",
    "end": "2915800"
  },
  {
    "text": "when we stopped doing new features because we had everything we wanted we had the virtual Dom we had a better",
    "start": "2915800",
    "end": "2922119"
  },
  {
    "text": "event system that react gave us and like what more could you want like we could",
    "start": "2922119",
    "end": "2927920"
  },
  {
    "text": "make a rapper to provide anything else so we don't use context that much but I",
    "start": "2927920",
    "end": "2933160"
  },
  {
    "text": "am somewhat familiar with it it does get closer still think that the big problem",
    "start": "2933160",
    "end": "2939160"
  },
  {
    "text": "is that it requires those context wrapper elements and that you can't make",
    "start": "2939160",
    "end": "2946680"
  },
  {
    "text": "modifications outside of that so this is what I'm talking about I like to keep my",
    "start": "2946680",
    "end": "2952920"
  },
  {
    "text": "state in a global variable okay so an object that has like a semantics in a",
    "start": "2952920",
    "end": "2959480"
  },
  {
    "text": "global variable and that way I can do like what if I want to make a web socket",
    "start": "2959480",
    "end": "2965720"
  },
  {
    "text": "to the server and the websocket is going to send me data and I want to put that into the state why should I have to go",
    "start": "2965720",
    "end": "2973000"
  },
  {
    "text": "through a component to do that the context requires you're still in the Dom",
    "start": "2973000",
    "end": "2978520"
  },
  {
    "text": "and you have to use some kind of a hook or something to get a Setter for that",
    "start": "2978520",
    "end": "2983720"
  },
  {
    "text": "state that context State and then get it into the into the web socket like that's",
    "start": "2983720",
    "end": "2990319"
  },
  {
    "text": "weird it does how do you do that like without all these problems you can just have a a Handler on the the receive I",
    "start": "2990319",
    "end": "2998599"
  },
  {
    "text": "don't remember what it's called in the the event in um in the websocket world",
    "start": "2998599",
    "end": "3003640"
  },
  {
    "text": "that like I just got a message right like you handle that and you just update",
    "start": "3003640",
    "end": "3009440"
  },
  {
    "text": "the state and then because react is reactive it should just render",
    "start": "3009440",
    "end": "3015079"
  },
  {
    "text": "everything that's looking at that State so that's what I see as like one of the problems it's like a lot of workarounds",
    "start": "3015079",
    "end": "3021760"
  },
  {
    "text": "when why don't you just not have it in the Dom and you won't have all these problems I do think another great",
    "start": "3021760",
    "end": "3028640"
  },
  {
    "text": "Advance is the hooks you know they're they're composable which is really nice that you didn't have before with",
    "start": "3028640",
    "end": "3035240"
  },
  {
    "text": "class-based functionality but then the other thing which is very functional is so your",
    "start": "3035240",
    "end": "3042319"
  },
  {
    "text": "components are functions right and so they have arguments these are the explicit inputs to the function and they",
    "start": "3042319",
    "end": "3048760"
  },
  {
    "text": "have a return value which is the Dom that they are returning and so in in a strict sense like that's all you get you",
    "start": "3048760",
    "end": "3056720"
  },
  {
    "text": "shouldn't have any other inputs to your function right otherwise it would be impure but with hooks you can like do a",
    "start": "3056720",
    "end": "3065559"
  },
  {
    "text": "a use state or you know use use use something and you're getting data from",
    "start": "3065559",
    "end": "3071119"
  },
  {
    "text": "outside of the props from outside of the arguments but the nice thing is it's all",
    "start": "3071119",
    "end": "3076280"
  },
  {
    "text": "at the top and it's all kind of declared you know and it's a very declarative format and so you're bending",
    "start": "3076280",
    "end": "3083720"
  },
  {
    "text": "the rules because this functional programming stuff it's all mental construct okay down at the level of the",
    "start": "3083720",
    "end": "3089880"
  },
  {
    "text": "machine code it's all mutation everywhere right you just want to be explicit about where is the data coming",
    "start": "3089880",
    "end": "3098760"
  },
  {
    "text": "into this function and hooks make that easy because they usually go up at the",
    "start": "3098760",
    "end": "3104240"
  },
  {
    "text": "top and so you can see okay it's getting stuff from the props and it's also getting stuff from this other thing and",
    "start": "3104240",
    "end": "3110040"
  },
  {
    "text": "this you know Etc so that's the other good thing I like about well I have to say Eric you are very good at explaining",
    "start": "3110040",
    "end": "3117040"
  },
  {
    "text": "these things and your reasoning I like how careful you are with your words as I said at the top you've been doing this",
    "start": "3117040",
    "end": "3122520"
  },
  {
    "text": "for a very long time I think 2001 is what your bio says you've been teaching FP to people for like 14 15 years",
    "start": "3122520",
    "end": "3129160"
  },
  {
    "text": "something like that a long time right yeah long time yeah long time so you've",
    "start": "3129160",
    "end": "3134720"
  },
  {
    "text": "had a lot of like iterations on like how to explain these Concepts yes and I think you've gotten very good at it I",
    "start": "3134720",
    "end": "3140079"
  },
  {
    "text": "should say for those who want to hear more from Eric we had you on the change log back in 2017 can you believe it was",
    "start": "3140079",
    "end": "3145799"
  },
  {
    "text": "four years ago talking a lot about similar things cuz you've been uh beating the functional programming drum",
    "start": "3145799",
    "end": "3151520"
  },
  {
    "text": "for a very long time and that was a well-received episode so I'm sure we cover similar but different ground on",
    "start": "3151520",
    "end": "3157400"
  },
  {
    "text": "that we'll link that one up in the show notes and you're also working now on a book like I said you've been teaching",
    "start": "3157400",
    "end": "3162520"
  },
  {
    "text": "this stuff for a very long time in person online courses books videos all",
    "start": "3162520",
    "end": "3168839"
  },
  {
    "text": "the things you're working on a book right now called grocking Simplicity you want to tell us about it yeah sure so",
    "start": "3168839",
    "end": "3176599"
  },
  {
    "text": "the book is about functional programming it's the kind of stuff we've been talking about you know the first part is",
    "start": "3176599",
    "end": "3182720"
  },
  {
    "text": "all about actions calculations and data how to refactor actions into",
    "start": "3182720",
    "end": "3188599"
  },
  {
    "text": "calculations uh how to implement immutability and also how to do the your",
    "start": "3188599",
    "end": "3195160"
  },
  {
    "text": "functional tools and how to chain them and we also talk something we didn't talk about much is how to manage your",
    "start": "3195160",
    "end": "3203079"
  },
  {
    "text": "actions so there's a lot of stuff that once you get into first class functions",
    "start": "3203079",
    "end": "3208839"
  },
  {
    "text": "you can start to build little Primitives little tools for managing the order of",
    "start": "3208839",
    "end": "3215599"
  },
  {
    "text": "actions or managing the how often they get called and so those become like",
    "start": "3215599",
    "end": "3221359"
  },
  {
    "text": "higher order functions functions that take functions and so we we go over stuff like that we also do a little bit",
    "start": "3221359",
    "end": "3227880"
  },
  {
    "text": "of design and uh architecture of functional applications the whole idea",
    "start": "3227880",
    "end": "3234160"
  },
  {
    "text": "is that functional programming isn't like this like I don't know field of study this abstract field of study it's",
    "start": "3234160",
    "end": "3241160"
  },
  {
    "text": "a set of practical skills that industrial programmers meaning like",
    "start": "3241160",
    "end": "3246359"
  },
  {
    "text": "people who work on Commercial software that we use and to look at it in a more",
    "start": "3246359",
    "end": "3252640"
  },
  {
    "text": "practical way and start to document what we actually do because so much of the",
    "start": "3252640",
    "end": "3259319"
  },
  {
    "text": "literature is academic that there's not much to build on for someone who's like",
    "start": "3259319",
    "end": "3265040"
  },
  {
    "text": "getting interested in it just wants to get some practical stuff and also it's practical whether you go all in in",
    "start": "3265040",
    "end": "3272559"
  },
  {
    "text": "functional programming or not these skills are very practical for building",
    "start": "3272559",
    "end": "3277760"
  },
  {
    "text": "software and sometimes it's exactly what you need right and it'll help yeah absolutely and I think it's sometimes",
    "start": "3277760",
    "end": "3284839"
  },
  {
    "text": "hard I think a lot a lot of times the the way FP is presented it is Impractical pure and academic and I",
    "start": "3284839",
    "end": "3292000"
  },
  {
    "text": "think you're doing a great job of like bringing it to the pragmatists that the ones out there trying to use these",
    "start": "3292000",
    "end": "3297319"
  },
  {
    "text": "things like I said in some cases in small ways people using it without even realizing it it's empowering to know",
    "start": "3297319",
    "end": "3303440"
  },
  {
    "text": "what you're doing and how you can Embrace that and like follow uh follow through to its full exent so one thing",
    "start": "3303440",
    "end": "3308720"
  },
  {
    "text": "that's cool about this book is you have like some exercises and some other things as well right so not only are you",
    "start": "3308720",
    "end": "3314839"
  },
  {
    "text": "reading these things but aren't there ways you can take that because it's a way of thinking yeah and sometimes you just need to practice that way of",
    "start": "3314839",
    "end": "3320880"
  },
  {
    "text": "thinking right that's right and so there's opportunity there yeah I mean even just identifying in the actions and",
    "start": "3320880",
    "end": "3327559"
  },
  {
    "text": "the calculations people have told me early readers because it's in Early Access now uh it should be published",
    "start": "3327559",
    "end": "3333400"
  },
  {
    "text": "soon but people have told me like wow that has changed the way I see all software and I can now say like oh this",
    "start": "3333400",
    "end": "3340799"
  },
  {
    "text": "is going to be hard because look it's in action and all this other stuff oh that's easy to test let's just test it",
    "start": "3340799",
    "end": "3347280"
  },
  {
    "text": "get it out of the way like those kinds of things really help people and I haven't seen anyone",
    "start": "3347280",
    "end": "3355680"
  },
  {
    "text": "you know besides this book even in my my previous content because there's a lot",
    "start": "3355680",
    "end": "3360799"
  },
  {
    "text": "of work it wasn't just like me writing down what I know I had to like figure out like what's the best way to teach",
    "start": "3360799",
    "end": "3366520"
  },
  {
    "text": "this which is like why I came up with actions calculations and data and all these little pneumonics for remembering",
    "start": "3366520",
    "end": "3372520"
  },
  {
    "text": "this stuff this is stuff that we do and and changes the way you see programming",
    "start": "3372520",
    "end": "3379720"
  },
  {
    "text": "and no one had no one had gone through and actually broken down functional",
    "start": "3379720",
    "end": "3385119"
  },
  {
    "text": "programming to this basic level you know when you when you read a functional programming book they might have one or",
    "start": "3385119",
    "end": "3391640"
  },
  {
    "text": "two sentences explaining what a pure function is well we spend the whole first part on that right we spend eight",
    "start": "3391640",
    "end": "3400280"
  },
  {
    "text": "chapters just talking about like what's a pure function how do you make them how",
    "start": "3400280",
    "end": "3406079"
  },
  {
    "text": "do you recognize when it's impure and convert it into a pure function how do",
    "start": "3406079",
    "end": "3412000"
  },
  {
    "text": "you make data immutable all the stuff that like is just kind of like a footnote in other books like you know I",
    "start": "3412000",
    "end": "3420160"
  },
  {
    "text": "basically take a step back and say this is the stuff that people need you're you're not teaching the the meat of it",
    "start": "3420160",
    "end": "3426880"
  },
  {
    "text": "you're just teaching the the I mean I call it froth right it's the froth of like oh once you get all this other",
    "start": "3426880",
    "end": "3433400"
  },
  {
    "text": "stuff you can go super deep your four levels into the onion and you're doing all this cool stuff but no one knows how",
    "start": "3433400",
    "end": "3439200"
  },
  {
    "text": "you got there because you're not making a a path for people to follow from where",
    "start": "3439200",
    "end": "3445240"
  },
  {
    "text": "they are and so that's what I tried to do is like figure out where people are and and bring them so the book is called",
    "start": "3445240",
    "end": "3451799"
  },
  {
    "text": "grocking Simplicity it's published by Manning and it's available in Early Access so you can get it now if you buy",
    "start": "3451799",
    "end": "3458000"
  },
  {
    "text": "it now you'll get the updates and once it's finalized you'll get the printed",
    "start": "3458000",
    "end": "3463319"
  },
  {
    "text": "version so I think those mental model shifts are where the gold is right like",
    "start": "3463319",
    "end": "3468920"
  },
  {
    "text": "I mentioned I think early on in my programming career the shift of thinking about loops and into map and filter and",
    "start": "3468920",
    "end": "3476480"
  },
  {
    "text": "like as data pipelines just massive it's a mental model shift and it massively upped my productivity and I when you",
    "start": "3476480",
    "end": "3483520"
  },
  {
    "text": "started talking about this distinction of action and calculation and thinking about that like I can already see myself",
    "start": "3483520",
    "end": "3489960"
  },
  {
    "text": "like I'm I'm thinking about that now like I've learned about pure and impure but that it that shift that shifted",
    "start": "3489960",
    "end": "3495039"
  },
  {
    "text": "something for me and I'm excited to explore that I'm curious if there are other mind shifts you have identified",
    "start": "3495039",
    "end": "3502839"
  },
  {
    "text": "through your teaching or through going through this book that also provide those kind of Step function changes in",
    "start": "3502839",
    "end": "3508000"
  },
  {
    "text": "how you view programming the third one that I deal with in the book so just to",
    "start": "3508000",
    "end": "3513520"
  },
  {
    "text": "you know do them in order again the actions calculations and data uh then the first class functions and higher",
    "start": "3513520",
    "end": "3519720"
  },
  {
    "text": "order functions so you know just even learning that oh wait plus isn't a",
    "start": "3519720",
    "end": "3525280"
  },
  {
    "text": "function it's just a it's an operator it's part of Sy the syntax but I can wrap it in a function and now now it's",
    "start": "3525280",
    "end": "3532000"
  },
  {
    "text": "first class right that's a big leap and being able to pass it to a function in",
    "start": "3532000",
    "end": "3537079"
  },
  {
    "text": "that's another leap the third one is starting to think about having a I call",
    "start": "3537079",
    "end": "3542960"
  },
  {
    "text": "it first class maybe that's the wrong term but a an explicit model of time so",
    "start": "3542960",
    "end": "3549559"
  },
  {
    "text": "when you're dealing with any domain the domain itself is not going to always",
    "start": "3549559",
    "end": "3554920"
  },
  {
    "text": "match the languages model right so if for instance if you have a function that",
    "start": "3554920",
    "end": "3561200"
  },
  {
    "text": "sends an email every time you call it it's going to send that email but your",
    "start": "3561200",
    "end": "3566440"
  },
  {
    "text": "domain says wait I shouldn't send it more than once right so how do you make an explicit model of time which is like",
    "start": "3566440",
    "end": "3574760"
  },
  {
    "text": "once only how do you make that out of the implicit model of time that your",
    "start": "3574760",
    "end": "3581359"
  },
  {
    "text": "language gives you okay so you have something like how do you coordinate all",
    "start": "3581359",
    "end": "3588400"
  },
  {
    "text": "these Ajax requests that are coming in at random or in random order uh you put",
    "start": "3588400",
    "end": "3595079"
  },
  {
    "text": "them out in a certain order but they're coming back however they come back and so you need something to reorder them in",
    "start": "3595079",
    "end": "3602240"
  },
  {
    "text": "the order you want them to be in and Promises is one way to do that right but",
    "start": "3602240",
    "end": "3607599"
  },
  {
    "text": "we talk about different approaches and different constructs similar to promises",
    "start": "3607599",
    "end": "3613000"
  },
  {
    "text": "that you can do so you're actually making a new model of time that like",
    "start": "3613000",
    "end": "3618440"
  },
  {
    "text": "this is the order that things need to happen in uh in a way like so here's here's one",
    "start": "3618440",
    "end": "3624039"
  },
  {
    "text": "a simple one I can describe quickly let's say you have two things two Ajax",
    "start": "3624039",
    "end": "3629799"
  },
  {
    "text": "requests you need to send off and you need to wait for both of them okay I know you can do promise.all that exists",
    "start": "3629799",
    "end": "3636359"
  },
  {
    "text": "right but let's say you don't have a promise you want to do it a different way you can't put a call back on on like",
    "start": "3636359",
    "end": "3642920"
  },
  {
    "text": "the one that you think will take longer because it's not how Ajax works right like they just come back in random order",
    "start": "3642920",
    "end": "3649520"
  },
  {
    "text": "so you can create a little object that records how many times",
    "start": "3649520",
    "end": "3656920"
  },
  {
    "text": "the let's call it the done method gets called right so that object has a call",
    "start": "3656920",
    "end": "3662119"
  },
  {
    "text": "back and when the done method gets called twice because you have two Ajax requests it will then call the call back",
    "start": "3662119",
    "end": "3669960"
  },
  {
    "text": "right and so this is equivalent to like saying like you go to conferences a lot",
    "start": "3669960",
    "end": "3676039"
  },
  {
    "text": "like after the last session you're like hey let's meet down here for dinner right well you don't know who's going to",
    "start": "3676039",
    "end": "3681839"
  },
  {
    "text": "get done first right so if you get to the lobby and there's no one there you have to wait because the other person's",
    "start": "3681839",
    "end": "3688319"
  },
  {
    "text": "coming and but you both follow that rule and you you meet up and you go to dinner",
    "start": "3688319",
    "end": "3693720"
  },
  {
    "text": "right so you want to make little simple rules like that that you can put into",
    "start": "3693720",
    "end": "3699480"
  },
  {
    "text": "your code this is like a new model of time there that's the the third one I",
    "start": "3699480",
    "end": "3705119"
  },
  {
    "text": "think you've uh sold me here I definitely need to check this out I only have I only have one model a time and",
    "start": "3705119",
    "end": "3710640"
  },
  {
    "text": "it's the one that's always running out we have friends at Manning we've been working with them for a very long time",
    "start": "3710640",
    "end": "3716480"
  },
  {
    "text": "and they've been kind enough to give us three free ebook codes for Eric's new",
    "start": "3716480",
    "end": "3722240"
  },
  {
    "text": "book grocking Simplicity like you said it's in Early Access but getting close to done now and if you get it now you'll",
    "start": "3722240",
    "end": "3727760"
  },
  {
    "text": "get the the final version as the updates come out so three to give away and all",
    "start": "3727760",
    "end": "3734119"
  },
  {
    "text": "you have to do to enter is just join the JS party channel in our slack because we're going to keep it easy we're just",
    "start": "3734119",
    "end": "3740119"
  },
  {
    "text": "going to give it away to our friends in our JS party channel of our slack so if you're not in there hop in",
    "start": "3740119",
    "end": "3746440"
  },
  {
    "text": "at cha.com Community totally free totally easy and totally fun to hang out",
    "start": "3746440",
    "end": "3751559"
  },
  {
    "text": "with us during the show and in between shows as well of course if you do not win one of the three codes we also have",
    "start": "3751559",
    "end": "3757760"
  },
  {
    "text": "a coupon code uh for all Manning products 20% off all Manning products",
    "start": "3757760",
    "end": "3763599"
  },
  {
    "text": "use coupon code pod JS party2 at checkout to redeem that Eric this has",
    "start": "3763599",
    "end": "3769200"
  },
  {
    "text": "been a great conversation I feel like we really did just kind of scratch the surface just the just some froth on the",
    "start": "3769200",
    "end": "3775559"
  },
  {
    "text": "convers ation but uh you did a great job of explaining things to us and answering all K Ball's hard balls and my softballs",
    "start": "3775559",
    "end": "3782480"
  },
  {
    "text": "thanks for coming on JS party it's been a lot of fun cool thank you so much this was",
    "start": "3782480",
    "end": "3788440"
  },
  {
    "text": "fun support our work and help ensure JS party continues into the future with a",
    "start": "3789200",
    "end": "3795559"
  },
  {
    "text": "chang log Plus+ membership ditch the ads get closer to the metal and directly",
    "start": "3795559",
    "end": "3801160"
  },
  {
    "text": "contribute to all of Chang log's podcasts at changel log.com pluspl plus",
    "start": "3801160",
    "end": "3806359"
  },
  {
    "text": "once again that's cha.com plusus plusus music for JS party is provided by the",
    "start": "3806359",
    "end": "3812240"
  },
  {
    "text": "mysterious breakmaster cylinder and we're brought to you by our awesome sponsors thanks again to fley linode and",
    "start": "3812240",
    "end": "3819240"
  },
  {
    "text": "lunch darkley for their continued support next time on JS party there's an impostor among us as Matt ryer from go",
    "start": "3819240",
    "end": "3826880"
  },
  {
    "text": "time joins the panel we're talking the biggest stories from around the community sharing things we've learned recently dropping some unpopular",
    "start": "3826880",
    "end": "3833680"
  },
  {
    "text": "opinions and collecting a few new J Les as we go stay tuned for that one it'll be ready for your ear holes next",
    "start": "3833680",
    "end": "3840650"
  },
  {
    "text": "[Music]",
    "start": "3840650",
    "end": "3848529"
  },
  {
    "text": "week are the break it up break it up break it up so uh got to get props",
    "start": "3849079",
    "end": "3855160"
  },
  {
    "text": "before we go back into to eigor for the best drop in the chat room so far he says FP is like an onion if you go deep",
    "start": "3855160",
    "end": "3861160"
  },
  {
    "text": "into it it makes you cry nice",
    "start": "3861160",
    "end": "3866960"
  },
  {
    "text": "oh I like that one there's your hater there Eric yeah",
    "start": "3866960",
    "end": "3872200"
  },
  {
    "text": "yeah they're everywhere everywhere you find a",
    "start": "3872200",
    "end": "3876400"
  },
  {
    "text": "hater",
    "start": "3882039",
    "end": "3885039"
  }
]