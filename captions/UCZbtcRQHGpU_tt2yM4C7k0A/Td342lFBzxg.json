[
  {
    "text": "when I'm writing tests I just want to write my test and I want it to be fast I just need to get tests and I want to",
    "start": "120",
    "end": "6520"
  },
  {
    "text": "spend more time writing more tests and not more times writing less tests right",
    "start": "6520",
    "end": "12599"
  },
  {
    "text": "and just pulling out those if statements and pulling out that logic where you know in my go code that I'm testing of",
    "start": "12599",
    "end": "18640"
  },
  {
    "text": "course I'm going to take care to craft better error messages and have better syntax and all that sort of stuff but",
    "start": "18640",
    "end": "24640"
  },
  {
    "text": "I'm writing my tests I just need to say that these two things weren't equal and I don't need to keep repeating that",
    "start": "24640",
    "end": "32400"
  },
  {
    "text": "constantly BWI for change log is provided by fastly learn more at fastly.com we move fast and fix things",
    "start": "33399",
    "end": "41000"
  },
  {
    "text": "here at change law because of rollbar check them out at rar.com and we're hosted on linode cloud servers head to",
    "start": "41000",
    "end": "47320"
  },
  {
    "text": "lin.com changelog this episode is brought to you",
    "start": "47320",
    "end": "53440"
  },
  {
    "text": "by digital ocean droplets manage kubernetes manage databases spaces",
    "start": "53440",
    "end": "59239"
  },
  {
    "text": "Object Store storage volume block storage Advanced networking like virtual private clouds and Cloud firewalls",
    "start": "59239",
    "end": "65439"
  },
  {
    "text": "developer tooling with the robust API and CLI to make sure you can interact with your infrastructure the way you",
    "start": "65439",
    "end": "71320"
  },
  {
    "text": "want to digital ocean is designed for developers and built for businesses join",
    "start": "71320",
    "end": "76840"
  },
  {
    "text": "Over 150,000 businesses that develop manage and scale their applications with",
    "start": "76840",
    "end": "82119"
  },
  {
    "text": "digital ocean head to do. changelog to get started with a $100 credit again do.",
    "start": "82119",
    "end": "88840"
  },
  {
    "text": "changelog",
    "start": "88840",
    "end": "91840"
  },
  {
    "text": "oh let's do it it's go time welcome to go time your source for diverse",
    "start": "100960",
    "end": "107960"
  },
  {
    "text": "discussions from around the go Community Big Show next week we go deep with Ian",
    "start": "107960",
    "end": "113479"
  },
  {
    "text": "Lance Taylor and Robert Greer about the latest on generics so stay tuned for that one oh and stick around for the",
    "start": "113479",
    "end": "120159"
  },
  {
    "text": "outro today we're doing a giveaway and I think you're going to like it okay let's talk testing Frameworks here we",
    "start": "120159",
    "end": "127660"
  },
  {
    "text": "[Music]",
    "start": "127660",
    "end": "133909"
  },
  {
    "text": "[Music] [Applause]",
    "start": "136170",
    "end": "139509"
  },
  {
    "text": "go hello and welcome to go time I'm Matt Rya today we're talking about testing",
    "start": "141840",
    "end": "148440"
  },
  {
    "text": "Frameworks uh so some subjects which aren't controversial in other languages are sometimes controversial in go and",
    "start": "148440",
    "end": "155640"
  },
  {
    "text": "this is one of those and we're going to find out why that might be today I'm",
    "start": "155640",
    "end": "160800"
  },
  {
    "text": "joined it's only Mark Bates hello Mr Bates hello Mr Ry how you doing today",
    "start": "160800",
    "end": "166480"
  },
  {
    "text": "good how are you all right okay good I really thought I was gonna have something there and I just didn't yeah",
    "start": "166480",
    "end": "172879"
  },
  {
    "text": "you were just waiting and nothing came yeah I haven't been on the show in a while so I'm just a bit Rusty that's all",
    "start": "172879",
    "end": "178920"
  },
  {
    "text": "that's all right mate don't don't worry you're in good hands we're also joined by a special guest buan soof buan uh did",
    "start": "178920",
    "end": "186680"
  },
  {
    "text": "I welcome you welcome yeah okay let me do that did you welcome him yes did you say it correctly buan",
    "start": "186680",
    "end": "193480"
  },
  {
    "text": "sub that's perfect okay hey Matt hey Mark welcome to the show hey buyan no I",
    "start": "193480",
    "end": "199799"
  },
  {
    "text": "got to ask a question here the the folks at home can't see this but I think you're trying to pretend like you're in",
    "start": "199799",
    "end": "205680"
  },
  {
    "text": "some sort of fancy Mediterranean Paradise where I have a feeling it's beige wall behind you how close am I to",
    "start": "205680",
    "end": "212519"
  },
  {
    "text": "the truth pretty damn close because it's 500 a.m. in a in Sydney in winter so",
    "start": "212519",
    "end": "218959"
  },
  {
    "text": "it's anything but sunny and warm fair enough wow well thank you for",
    "start": "218959",
    "end": "224720"
  },
  {
    "text": "joining us so early not a problem yeah no it's great or maybe it's so late we",
    "start": "224720",
    "end": "230000"
  },
  {
    "text": "don't know maybe he's been up all night just getting in he's just getting",
    "start": "230000",
    "end": "235360"
  },
  {
    "text": "in he's been in like one of those all night Raves thankfully our un call schedule isn't that",
    "start": "235360",
    "end": "241959"
  },
  {
    "text": "bad fair enough well so today we're talking about testing Frameworks okay I",
    "start": "241959",
    "end": "247840"
  },
  {
    "text": "have a question Matt Sor before we go any further about testing Frameworks testing Frameworks what are we talking",
    "start": "247840",
    "end": "254159"
  },
  {
    "text": "about testing like Frameworks that help us test or testing Frameworks like",
    "start": "254159",
    "end": "260160"
  },
  {
    "text": "Buffalo oh no no sorry I just had to get the buffal plug in there early and then",
    "start": "260160",
    "end": "265720"
  },
  {
    "text": "that way it's like a Hitchcock thing people are just waiting for it yeah get it out quickly Buffalo then we just",
    "start": "265720",
    "end": "272639"
  },
  {
    "text": "exactly we get to move on to the the rest of it well we can talk about testing testing Frameworks later as well",
    "start": "272639",
    "end": "279039"
  },
  {
    "text": "if you like if we could really get creative yes I like to use a different testing framework to test the testing",
    "start": "279039",
    "end": "284680"
  },
  {
    "text": "framework just to be on the safe side you actually have to cuz the testing framework doesn't exist right and what",
    "start": "284680",
    "end": "291160"
  },
  {
    "text": "if there's a bug in it that's not true go is written in go come on go go yeah everybody knows you just first one's in",
    "start": "291160",
    "end": "298240"
  },
  {
    "text": "C and then your bootstrap what are testing Frameworks then and",
    "start": "298240",
    "end": "305120"
  },
  {
    "text": "what does it meaning go maybe it's worth just a bit of an overview for uh junior",
    "start": "305120",
    "end": "310199"
  },
  {
    "text": "developers or people that aren't familiar with this yet what are we talking about well that was actually uh",
    "start": "310199",
    "end": "315600"
  },
  {
    "text": "I was making a bad little joke there about you know the testing Frameworks but I do have a legitimate thing we do I",
    "start": "315600",
    "end": "321479"
  },
  {
    "text": "think we need to talk about the language right um are we talking about assertion",
    "start": "321479",
    "end": "327440"
  },
  {
    "text": "libraries which are you know this is no error no you know false true whatever",
    "start": "327440",
    "end": "333160"
  },
  {
    "text": "not nil or are we talking about Frameworks that like GCO and gega and",
    "start": "333160",
    "end": "338880"
  },
  {
    "text": "stuff where you have to buy in to their entire process like go convey has its",
    "start": "338880",
    "end": "344840"
  },
  {
    "text": "own scripting language if you want a testing scripting thing if you want to go through that so when we talk testing",
    "start": "344840",
    "end": "350960"
  },
  {
    "text": "Frameworks are we talking one we talking the other we talking both we're talking all of those things I think today I",
    "start": "350960",
    "end": "356960"
  },
  {
    "text": "think that it's a spectrum effectively h there's you know uh tradeoff says the",
    "start": "356960",
    "end": "362360"
  },
  {
    "text": "risk to everything where you have the lightweight stuff like well testifying is uh which is just almost like",
    "start": "362360",
    "end": "369520"
  },
  {
    "text": "syntactic sugar and you have as you mentioned Geno where it's on the complete opposite end where this is how",
    "start": "369520",
    "end": "376039"
  },
  {
    "text": "you will do it and it's almost like a fat middle Weare layer and the right tool for the job I",
    "start": "376039",
    "end": "382960"
  },
  {
    "text": "guess yeah so for anyone at home then that's new to this uh testing generally",
    "start": "382960",
    "end": "388280"
  },
  {
    "text": "in code is a way to really improve the quality of The Code by writing automatic",
    "start": "388280",
    "end": "394599"
  },
  {
    "text": "tests that can run and they basically become a user of your code and then they work as though your user of your code is",
    "start": "394599",
    "end": "401680"
  },
  {
    "text": "going to do the work and then they can make assertions about what happens so that's generally the process of testing",
    "start": "401680",
    "end": "407240"
  },
  {
    "text": "and then of course if you make little changes you can run your tests and make sure you haven't broken things and so",
    "start": "407240",
    "end": "412560"
  },
  {
    "text": "testing Frameworks help you with that process in various ways and there are different types so for example the",
    "start": "412560",
    "end": "420440"
  },
  {
    "text": "simplest case like the syntactic sugar case and I think testify at one point was the most imported package in go I",
    "start": "420440",
    "end": "427680"
  },
  {
    "text": "don't know if that's still true but it's certainly a popular choice so let's let's start with testify what is testify",
    "start": "427680",
    "end": "433919"
  },
  {
    "text": "what does it do and why would you use that well you you wrote it Matt why don't you tell us well uh I've just been",
    "start": "433919",
    "end": "442520"
  },
  {
    "text": "talking too much A lot of people don't know that Matt was one of the original authors so yeah so Matt and I share a",
    "start": "442520",
    "end": "448440"
  },
  {
    "text": "common thread on that one uh he obviously uh I mean Matt you know the history way better than I do and I know",
    "start": "448440",
    "end": "454680"
  },
  {
    "text": "the status quo I have a bit more context on the status squo I guess yeah I'd like",
    "start": "454680",
    "end": "460199"
  },
  {
    "text": "you to give the history though please sure no of course so obviously testify",
    "start": "460199",
    "end": "466960"
  },
  {
    "text": "well Matt you start I believe you were one of the original authors and okay yeah so yeah this was way back I think",
    "start": "466960",
    "end": "475400"
  },
  {
    "text": "even before the first goer con so this is like 2014 time and we we came from",
    "start": "475400",
    "end": "481720"
  },
  {
    "text": "Ruby and I did some I've done a lot of JavaScript and cop and a lot of these uh",
    "start": "481720",
    "end": "486879"
  },
  {
    "text": "languages have testing Frameworks or even some of them are just built in where you can use language like assert",
    "start": "486879",
    "end": "494720"
  },
  {
    "text": "equal and you give it two things and if it's if those two things aren't equal that's considered then a failing test so",
    "start": "494720",
    "end": "501599"
  },
  {
    "text": "in go if you don't use a testing framework you end up writing L hand",
    "start": "501599",
    "end": "506680"
  },
  {
    "text": "really that process so you'll say you'll use an if and check two variables if they're not equal or whatever the",
    "start": "506680",
    "end": "512479"
  },
  {
    "text": "condition is then you use the the testing T to do some work to either report the error or fail the test or",
    "start": "512479",
    "end": "519120"
  },
  {
    "text": "whatever it is you want to do um we did testify just because we're used to writing in that format that's all it was",
    "start": "519120",
    "end": "526080"
  },
  {
    "text": "purely kind of syntactic sugar and then because it was so early I think it just",
    "start": "526080",
    "end": "531480"
  },
  {
    "text": "kind of became part of an Easy Choice it was the the oldest probably at one point",
    "start": "531480",
    "end": "537120"
  },
  {
    "text": "and probably always is no an even older one came out yeah yeah an older one came",
    "start": "537120",
    "end": "543160"
  },
  {
    "text": "out after just last month actually yeah I think it's that it got",
    "start": "543160",
    "end": "549160"
  },
  {
    "text": "in early and people were complaining about writing tests in this longhand form and some people weren't writing",
    "start": "549160",
    "end": "555399"
  },
  {
    "text": "tests for that reason so that's why we did testify and we love testing and unit",
    "start": "555399",
    "end": "561800"
  },
  {
    "text": "testing and things so it was it was me and uh Tyler Stillwater that created the original and then lots of contributors",
    "start": "561800",
    "end": "568920"
  },
  {
    "text": "and the Project's grown and taken on a life of its own as these things do and that's really it I think for the history",
    "start": "568920",
    "end": "576920"
  },
  {
    "text": "right and just to add there I actually would disagree on a small Point okay you",
    "start": "576920",
    "end": "582200"
  },
  {
    "text": "did mention obviously because you're early I think that helps but I also think the majority of it is just it",
    "start": "582200",
    "end": "589920"
  },
  {
    "text": "saves the community time and the community finds it valuable because uh it's a simple",
    "start": "589920",
    "end": "596079"
  },
  {
    "text": "problem that's solved with a simple solution in my opinion anyways so exactly that and now the current state",
    "start": "596079",
    "end": "603120"
  },
  {
    "text": "is almost like a oh time to write some tests quickly po testified it's almost",
    "start": "603120",
    "end": "608760"
  },
  {
    "text": "second nature to a lot of gophers which in my opinion is a great",
    "start": "608760",
    "end": "614000"
  },
  {
    "text": "thing but it's also big responsibility because if something is shared by all Gophers it it has the the pressure of it",
    "start": "614000",
    "end": "621000"
  },
  {
    "text": "being all things to all people yeah absolutely and it's funny because some",
    "start": "621000",
    "end": "626040"
  },
  {
    "text": "of the Innovation that happened over the years with that one one of them was there used to be a well there is a require package which has a kind of",
    "start": "626040",
    "end": "632760"
  },
  {
    "text": "slightly different Behavior Uh I think one of them lets you carry on that's the",
    "start": "632760",
    "end": "637959"
  },
  {
    "text": "one I use require assert lets you your test keep running and just logs the",
    "start": "637959",
    "end": "643279"
  },
  {
    "text": "failures require stops the test so so that's one for me I love require I use",
    "start": "643279",
    "end": "648760"
  },
  {
    "text": "it for all my tests matter of fact my ulti Snips kind of go snippet when I",
    "start": "648760",
    "end": "654760"
  },
  {
    "text": "type test tab it fills in the require. new testing T thing like right there",
    "start": "654760",
    "end": "661240"
  },
  {
    "text": "it's just part of my tests I like the requir my problem with the assert is typically if something fails I want the",
    "start": "661240",
    "end": "667839"
  },
  {
    "text": "test to just stop um and not keep throwing panics for the next five",
    "start": "667839",
    "end": "673279"
  },
  {
    "text": "minutes you know which is usually what happens because something that wasn't supposed to be nil is nil now and your",
    "start": "673279",
    "end": "679760"
  },
  {
    "text": "tests are just panicking all over the place so I like that for me like I said I'm a huge huge fan of require I",
    "start": "679760",
    "end": "686639"
  },
  {
    "text": "probably use at the most 10 to 12 of the assertions you know error no error nil",
    "start": "686639",
    "end": "692720"
  },
  {
    "text": "not nil right really basic assertions I don't typically use some of the really",
    "start": "692720",
    "end": "698680"
  },
  {
    "text": "grandiose or kind of otter assertions but I'll do occasionally maybe grab a contains or something like that what I",
    "start": "698680",
    "end": "705600"
  },
  {
    "text": "like about it is it just what Matt was kind of saying earlier just all that repetitive code right just all those if",
    "start": "705600",
    "end": "712800"
  },
  {
    "text": "checks now I got to come up with a good log message right I when I'm writing tests I just want to write my test and I",
    "start": "712800",
    "end": "719959"
  },
  {
    "text": "want it to be fast like I just need to get tests and I want to spend more time",
    "start": "719959",
    "end": "725480"
  },
  {
    "text": "writing more tests and not more times writing less tests right and just",
    "start": "725480",
    "end": "731720"
  },
  {
    "text": "pulling out those if statements and pulling out that logic where you know in my go code that I'm testing of course",
    "start": "731720",
    "end": "738279"
  },
  {
    "text": "I'm going to take care to craft better error messages and you know have better",
    "start": "738279",
    "end": "743600"
  },
  {
    "text": "syntax and all that sort of stuff but I'm writing my tests I just needed to say that these two things weren't equal",
    "start": "743600",
    "end": "749199"
  },
  {
    "text": "and I don't need to keep repeating that constantly and things like require just",
    "start": "749199",
    "end": "754560"
  },
  {
    "text": "kind of do that I also quite like the way it reads too it as I'm my tests are a lot smaller maybe they're now a half",
    "start": "754560",
    "end": "761519"
  },
  {
    "text": "dozen or eight lines long as opposed to you know three times that with all the",
    "start": "761519",
    "end": "766600"
  },
  {
    "text": "if checks that you kind of need kind of going on in there and I can just read it it's like do this okay there was no",
    "start": "766600",
    "end": "772399"
  },
  {
    "text": "error this was not nil these are equal done I just read it quickly down and I",
    "start": "772399",
    "end": "778560"
  },
  {
    "text": "think I remember Matt you and I had a conversation around this offline one day",
    "start": "778560",
    "end": "783800"
  },
  {
    "text": "about is you mean offline you mean in real life",
    "start": "783800",
    "end": "790360"
  },
  {
    "text": "yeah that remember offline I I do remember that you know it's just sorry",
    "start": "790360",
    "end": "795720"
  },
  {
    "text": "don't mean to digress but uh go for con UK supposed to be next month and we were",
    "start": "795720",
    "end": "802000"
  },
  {
    "text": "gonna co-host together in London as always it's not going to happen I was so",
    "start": "802000",
    "end": "807720"
  },
  {
    "text": "looking forward to it yeah any back to the subject so yeah I love require and I like what it does for my test in terms",
    "start": "807720",
    "end": "814839"
  },
  {
    "text": "of just making a small quick clean and readable see it's an interesting point",
    "start": "814839",
    "end": "820160"
  },
  {
    "text": "because as I mentioned all things to all people we've had so many requests I get so many GitHub notifications and issues",
    "start": "820160",
    "end": "825560"
  },
  {
    "text": "saying please remove require it's useless we just use aert it is not",
    "start": "825560",
    "end": "831199"
  },
  {
    "text": "useless it's more useful than assert exactly if anything I would say remove",
    "start": "831199",
    "end": "836519"
  },
  {
    "text": "assert assert like why do you want your test to keep going I just boggled my",
    "start": "836519",
    "end": "842880"
  },
  {
    "text": "mind it's too late though we can't just remove assert now because what would happen no I know but like it's just like",
    "start": "842880",
    "end": "851040"
  },
  {
    "text": "why would you use assert over require I don't know yeah I always wondered that",
    "start": "851040",
    "end": "856320"
  },
  {
    "text": "actually in fact I remember in the original design we had the assert methods return Bulls as a way to get",
    "start": "856320",
    "end": "862880"
  },
  {
    "text": "around it so you could build you could do like an if block and say if this is not nil and then it turns",
    "start": "862880",
    "end": "869480"
  },
  {
    "text": "false if that failed I guess that's a weird yeah it's confusing I can see why",
    "start": "869480",
    "end": "874959"
  },
  {
    "text": "you got rid of that I think he's still there I don't know I don't use a certain",
    "start": "874959",
    "end": "880720"
  },
  {
    "text": "yeah and require doesn't have it I think as well actually Ernesto gimenez uh",
    "start": "880720",
    "end": "886360"
  },
  {
    "text": "who's one of the maintainers um who's a great engineer lovely chap too automated",
    "start": "886360",
    "end": "892759"
  },
  {
    "text": "the the the generation of rqu by inspecting assert so it was actually an",
    "start": "892759",
    "end": "898160"
  },
  {
    "text": "automatic process he didn't have to keep maintaining the two code bases correct to this day it's a great addition we",
    "start": "898160",
    "end": "905000"
  },
  {
    "text": "stole autogen require from the assert code yeah that's cool isn't",
    "start": "905000",
    "end": "910800"
  },
  {
    "text": "it I think that's cool that's awesome anything that we can do to get",
    "start": "910800",
    "end": "916040"
  },
  {
    "text": "computers to write code for as I'm all over it yeah",
    "start": "916040",
    "end": "921040"
  },
  {
    "text": "[Music]",
    "start": "922420",
    "end": "927600"
  },
  {
    "text": "exactly [Music] change log news is the best way to keep",
    "start": "927600",
    "end": "934720"
  },
  {
    "text": "up with the fast moving software world we track log and contextualize the",
    "start": "934720",
    "end": "940199"
  },
  {
    "text": "coolest projects the best practices and the biggest stories each and every week",
    "start": "940199",
    "end": "945720"
  },
  {
    "text": "make changel law.com your daily destination or hit the snooze button and subscribe to our Weekly Newsletter that",
    "start": "945720",
    "end": "951480"
  },
  {
    "text": "hits inboxes on Sunday mornings join more than 15,000 enthusiastic readers",
    "start": "951480",
    "end": "957120"
  },
  {
    "text": "it'll cost you exactly $ and you can subscribe right now at chain.com",
    "start": "957120",
    "end": "964160"
  },
  {
    "text": "[Music]",
    "start": "966200",
    "end": "974339"
  },
  {
    "text": "weekly well we talked about the way it reads so you can say require not nil or",
    "start": "975360",
    "end": "981680"
  },
  {
    "text": "uh you know assert equal those kinds of things I prefer the variable version to be perfectly honest so I'll do require.",
    "start": "981680",
    "end": "988040"
  },
  {
    "text": "new T MH and like assign that to R usually is what I do so I can just do r",
    "start": "988040",
    "end": "993279"
  },
  {
    "text": "no error whatever I right again it's all about that quick I just want to write",
    "start": "993279",
    "end": "999120"
  },
  {
    "text": "stuff I don't typing requir do equals T2",
    "start": "999120",
    "end": "1004199"
  },
  {
    "text": "things is so much more code than just r. equal two things right like yeah I know",
    "start": "1004199",
    "end": "1010720"
  },
  {
    "text": "that's just my preference yeah and testify wraps the testing t as well and I I don't think that's true for all of",
    "start": "1010720",
    "end": "1017199"
  },
  {
    "text": "them there are some others that do this the same and that's a kind of nice I think that's quite a nice little design",
    "start": "1017199",
    "end": "1022600"
  },
  {
    "text": "thing because I think originally again they were just Global functions and are",
    "start": "1022600",
    "end": "1027839"
  },
  {
    "text": "they still boy are they still Global functions you can still access the me package level yeah okay so that's",
    "start": "1027839",
    "end": "1033798"
  },
  {
    "text": "originally what it just was but you have to pass tea in to do it yes you pass tea in as the argument that's right yeah so",
    "start": "1033799",
    "end": "1040319"
  },
  {
    "text": "it's a different flavor of that yeah it's funny cuz it's it really is an example of a project that has evolved in",
    "start": "1040319",
    "end": "1047079"
  },
  {
    "text": "quite an interesting way over the years well I wanted to talk about the format the readability of it because there is",
    "start": "1047079",
    "end": "1053440"
  },
  {
    "text": "another kind of style of this which are Behavior driven tests someone want to",
    "start": "1053440",
    "end": "1058840"
  },
  {
    "text": "just tell us what what's a behavior driven test and how is the language different yeah so if you coming from",
    "start": "1058840",
    "end": "1065160"
  },
  {
    "text": "Ruby like a few of us did a lot of us did um so many people I know from Ruby",
    "start": "1065160",
    "end": "1071799"
  },
  {
    "text": "and go over the years that was one of the big things rspec being one of the",
    "start": "1071799",
    "end": "1077159"
  },
  {
    "text": "biggest testing framewor works in the Ruby world and in Ruby it works really",
    "start": "1077159",
    "end": "1082760"
  },
  {
    "text": "really well because of the nature of Ruby being a scripting language and you can write these really kind of",
    "start": "1082760",
    "end": "1088120"
  },
  {
    "text": "beautifully syntax sentences where it says you know almost Pro describe you",
    "start": "1088120",
    "end": "1093480"
  },
  {
    "text": "know as a user I want to do and then X Y and Z you know and you know log in and",
    "start": "1093480",
    "end": "1101520"
  },
  {
    "text": "then here's a little thing and I want to be able to you know forget my password and have it reset and this kind of more",
    "start": "1101520",
    "end": "1108080"
  },
  {
    "text": "of a natural language style where you're telling a story with it you know so that kind of",
    "start": "1108080",
    "end": "1115240"
  },
  {
    "text": "as a I want to kind of story that we all know of and we all hear that someday",
    "start": "1115240",
    "end": "1121799"
  },
  {
    "text": "they're the other side's going to write and then we can just test and that never happens but",
    "start": "1121799",
    "end": "1127919"
  },
  {
    "text": "that works really well in those uh languages like you know and most of us and Ruby I think lived in that world I",
    "start": "1127919",
    "end": "1136240"
  },
  {
    "text": "don't know about you Matt but did you write your tests that way or did you use more of a unit test",
    "start": "1136240",
    "end": "1142840"
  },
  {
    "text": "style um when you're doing rubit I always use the unit test style I found it to be quite unnecessarily verbose I",
    "start": "1142840",
    "end": "1150640"
  },
  {
    "text": "know that sometimes they cuz you literally put those things as strings into the test code don't you and then",
    "start": "1150640",
    "end": "1157559"
  },
  {
    "text": "from that you can generate some quite nice looking failures if if something fails you can you know it reads quite",
    "start": "1157559",
    "end": "1164240"
  },
  {
    "text": "nicely but I found it to be to Vose actually and just just saying you know not equal and then showing you the two",
    "start": "1164240",
    "end": "1170039"
  },
  {
    "text": "values or something was just easier to see the thing I like about bdd versus",
    "start": "1170039",
    "end": "1177240"
  },
  {
    "text": "unit testing actually has to do with those kind of the names of the tests you",
    "start": "1177240",
    "end": "1182480"
  },
  {
    "text": "know when you're writing a simple test right you know test that create does something right that's a pretty simple",
    "start": "1182480",
    "end": "1187960"
  },
  {
    "text": "test name but when you start having all those weird variants right then the string based",
    "start": "1187960",
    "end": "1194039"
  },
  {
    "text": "text names become really really useful you know when you can when you just need",
    "start": "1194039",
    "end": "1199360"
  },
  {
    "text": "a little bit more description as to what it is you're trying to test and that's harder to do in a unit type of a test",
    "start": "1199360",
    "end": "1206799"
  },
  {
    "text": "where you have a function name you know for me I get around that a little bit and go with underscores in my",
    "start": "1206799",
    "end": "1214280"
  },
  {
    "text": "test names all right so I have a different approach to how I do my test",
    "start": "1214280",
    "end": "1219360"
  },
  {
    "text": "name so it's obviously test something right because we all have to start there uh and then usually it's an underscore",
    "start": "1219360",
    "end": "1225600"
  },
  {
    "text": "with the next thing being if I'm testing I say something on a struct or type right then it'll be the type so it's",
    "start": "1225600",
    "end": "1231960"
  },
  {
    "text": "test underscore type underscore and then the method let's say or something like",
    "start": "1231960",
    "end": "1237159"
  },
  {
    "text": "that where I can kind of look at the tests read them a little bit better try to figure out what they're doing and",
    "start": "1237159",
    "end": "1243360"
  },
  {
    "text": "also when I'm trying to do run it helps me because I have a bit of a pattern so if I want to test all the",
    "start": "1243360",
    "end": "1251080"
  },
  {
    "text": "file stuff my types called file and I want to run all file test I can you know do test underscore file underscore and",
    "start": "1251080",
    "end": "1257679"
  },
  {
    "text": "it's going to get me all of the tests for the file type when I do the run mhm",
    "start": "1257679",
    "end": "1263919"
  },
  {
    "text": "so that's how I'm getting around it in go is with using that but there are",
    "start": "1263919",
    "end": "1270080"
  },
  {
    "text": "Frameworks like gko that let you experience that a bit more and go I",
    "start": "1270080",
    "end": "1275159"
  },
  {
    "text": "think a key thing there and at least my takeway of it is uh because the philosophies behind bdd and tdd at least",
    "start": "1275159",
    "end": "1283640"
  },
  {
    "text": "the way I I understand it is that uh bdd should be more focused on the US or the consumer that we're writing this code",
    "start": "1283640",
    "end": "1290600"
  },
  {
    "text": "for where stdd is a lot more technical or engineer focused personally I tend to",
    "start": "1290600",
    "end": "1295799"
  },
  {
    "text": "hybrid eyes where I'll do them tdd style because I find them simpler and less verbose I'm not expecting the user to",
    "start": "1295799",
    "end": "1302880"
  },
  {
    "text": "read my tests uh but I'll try and order and make the tests actually focus on",
    "start": "1302880",
    "end": "1309600"
  },
  {
    "text": "user behavior in you know in more complex functions rather than just proving that function works or stopping",
    "start": "1309600",
    "end": "1316799"
  },
  {
    "text": "it from regressing in a way yeah have you seen uh property based testing as well this is a another kind of uh style",
    "start": "1316799",
    "end": "1325799"
  },
  {
    "text": "yeah it's um almost like fuzzing for your functions where you specify not",
    "start": "1325799",
    "end": "1332080"
  },
  {
    "text": "what values to test with but what types of values your function takes as input",
    "start": "1332080",
    "end": "1338360"
  },
  {
    "text": "and obviously also what uh kind of output you expect and then the property",
    "start": "1338360",
    "end": "1345400"
  },
  {
    "text": "based testing framework of which one example is copter will then just generate uh you know whether it's random",
    "start": "1345400",
    "end": "1353400"
  },
  {
    "text": "or in some specific sequence will generate plenty of values to the test your function and try and find edge",
    "start": "1353400",
    "end": "1358840"
  },
  {
    "text": "cases for you that do not conform to the specification that's really cool isn't it yeah the first exposure I had to that",
    "start": "1358840",
    "end": "1366279"
  },
  {
    "text": "was with hypothesis in Python and it was pretty awesome I mean an obvious problem",
    "start": "1366279",
    "end": "1371640"
  },
  {
    "text": "there is you now have especially if your functions are a bit more complex that it",
    "start": "1371640",
    "end": "1376760"
  },
  {
    "text": "can take a while for test to run because you're now running the same function 10,000 times rather than once",
    "start": "1376760",
    "end": "1383840"
  },
  {
    "text": "or five times but you know for Pure functions where you know where your code",
    "start": "1383840",
    "end": "1389600"
  },
  {
    "text": "doesn't have side effects yeah it's very good at finding edge cases and and",
    "start": "1389600",
    "end": "1396440"
  },
  {
    "text": "little behaviors that you didn't anticipate does it explicitly have edge",
    "start": "1396440",
    "end": "1402200"
  },
  {
    "text": "cases programmed into it so if it's like an INT it's going to try extreme like Max int and minimum int and things like",
    "start": "1402200",
    "end": "1407640"
  },
  {
    "text": "this or is it is there an element of random more Randomness like fuzzing I think it depends on the framework but I",
    "start": "1407640",
    "end": "1414279"
  },
  {
    "text": "believe I haven't personally used cter just yet and go but in a lot of them you can actually specify uh where you know I",
    "start": "1414279",
    "end": "1421400"
  },
  {
    "text": "want to range from Min to Maxin or whatever whatever the minum maximum value is or you can just say give me",
    "start": "1421400",
    "end": "1429120"
  },
  {
    "text": "this distribution I believe it's it can be customized but if I'm not mistaken",
    "start": "1429120",
    "end": "1434880"
  },
  {
    "text": "the default is to just basically sample from the minimum to maximum and try and",
    "start": "1434880",
    "end": "1440320"
  },
  {
    "text": "find pathological cases of the input values do either of you do fuzz testing",
    "start": "1440320",
    "end": "1447360"
  },
  {
    "text": "fuzzing I have once but it was really to play with it but I think it's it depends",
    "start": "1447360",
    "end": "1453600"
  },
  {
    "text": "on the kind of code you're writing because it's not suitable for everything is it yeah like I think I'm the same as",
    "start": "1453600",
    "end": "1459279"
  },
  {
    "text": "Matt I done like once to try it out yeah daman's always on about Daman grisy how",
    "start": "1459279",
    "end": "1466279"
  },
  {
    "text": "do you pronounce this that about right I don't I let you do it thanks I apologize",
    "start": "1466279",
    "end": "1473520"
  },
  {
    "text": "um but you know he's always talking about fuzzing and so I do try to play with it every once in a while I think",
    "start": "1473520",
    "end": "1480080"
  },
  {
    "text": "you're right I feel like there's a type of code that it works really well for at",
    "start": "1480080",
    "end": "1485919"
  },
  {
    "text": "least I hav't I haven't figured it out well enough to see it Beyond like and to",
    "start": "1485919",
    "end": "1491840"
  },
  {
    "text": "see it in cases where it's useful to me I couldn't figure out how to get it to work say in a web environment",
    "start": "1491840",
    "end": "1499000"
  },
  {
    "text": "other than to pass in random Json kind of blobs but well yeah but one example",
    "start": "1499000",
    "end": "1505240"
  },
  {
    "text": "is the plush library in in the Buffalo project actually CU that takes input",
    "start": "1505240",
    "end": "1510720"
  },
  {
    "text": "user input and it paes it doesn't it and it literally breaks it into tokens into",
    "start": "1510720",
    "end": "1515840"
  },
  {
    "text": "an as and all all that so that's probably a good candidate for fuzzing because that was the one I tried it with",
    "start": "1515840",
    "end": "1521960"
  },
  {
    "text": "is it yeah yeah yeah because you want it to essentially fuzzing for those that don't know and do check it out cuz it is",
    "start": "1521960",
    "end": "1528440"
  },
  {
    "text": "very cool essentially yeah if you've got a string as an input to some method it'll just make loads of Bonkers strings",
    "start": "1528440",
    "end": "1536120"
  },
  {
    "text": "as as crazy as it can including massive ones and uh you know all sorts of random",
    "start": "1536120",
    "end": "1541360"
  },
  {
    "text": "uh nonsense in an attempt to sort of break your code and if it can it it tells you this input will break your",
    "start": "1541360",
    "end": "1548559"
  },
  {
    "text": "code so I guess the point about that is ideally Mark nothing should make that",
    "start": "1548559",
    "end": "1553720"
  },
  {
    "text": "plush anic it should always be an error meaningful error and you might find some panics or",
    "start": "1553720",
    "end": "1559799"
  },
  {
    "text": "something that you would just never think of because of fuzzing but who knows not",
    "start": "1559799",
    "end": "1566159"
  },
  {
    "text": "me apparently you just do it manually fuzzing don't you Mark we just established that I don't",
    "start": "1566159",
    "end": "1572399"
  },
  {
    "text": "know Mark just does manual fuzzing so he just types in he just writes loads of tests but it just does it manually like",
    "start": "1572399",
    "end": "1579640"
  },
  {
    "text": "mashing the keyboard n my dog takes care of it all pardon my dog takes care of it",
    "start": "1579640",
    "end": "1584960"
  },
  {
    "text": "all Ringo is an amazing fuzzer I've heard of cats walking on keyboards",
    "start": "1584960",
    "end": "1590760"
  },
  {
    "text": "I haven't heard of dogs walking on keyboards yeah well I said Ringo's a",
    "start": "1590760",
    "end": "1595960"
  },
  {
    "text": "special dog you know yeah things you see on Zoom",
    "start": "1595960",
    "end": "1602600"
  },
  {
    "text": "nowadays yeah this is good are we done",
    "start": "1602600",
    "end": "1608200"
  },
  {
    "text": "no no just kidding do we have questions from the audience we actually I seen the",
    "start": "1608200",
    "end": "1614120"
  },
  {
    "text": "go time FM channel and there's one about mocking mocking mocking okay so who",
    "start": "1614120",
    "end": "1620200"
  },
  {
    "text": "wants to tell us what mocking is not me I'll I'll give it a",
    "start": "1620200",
    "end": "1626120"
  },
  {
    "text": "shot bu to the rescue so we unfortunately don't live in an ideal",
    "start": "1626120",
    "end": "1631559"
  },
  {
    "text": "world where all our functions are pure and have no side effects uh sometimes for example they need to interact with",
    "start": "1631559",
    "end": "1638120"
  },
  {
    "text": "databases or external services and when we run tests especially unit tests or specifically",
    "start": "1638120",
    "end": "1644799"
  },
  {
    "text": "unit tests we want them to run quickly and just test that function rather than the side effects it has on these",
    "start": "1644799",
    "end": "1650200"
  },
  {
    "text": "external resources so a general and a common practice is to mock out those resources",
    "start": "1650200",
    "end": "1656559"
  },
  {
    "text": "so effectively return some blank known value for the test or preset that we",
    "start": "1656559",
    "end": "1663039"
  },
  {
    "text": "know for the test and we then assert that with these values the function did",
    "start": "1663039",
    "end": "1668399"
  },
  {
    "text": "what it was supposed to do given these inputs from the external resource right all yeah so that's great and so the",
    "start": "1668399",
    "end": "1675559"
  },
  {
    "text": "specific question from adtia was about database mocking so how do we",
    "start": "1675559",
    "end": "1681519"
  },
  {
    "text": "feel about mocking databases myself personally I find it's quite useful a",
    "start": "1681519",
    "end": "1687240"
  },
  {
    "text": "lot of the time an approach I actually like to take is to try and Abstract or",
    "start": "1687240",
    "end": "1694399"
  },
  {
    "text": "or or yeah abstract our database interface as an interface mhm and then",
    "start": "1694399",
    "end": "1700559"
  },
  {
    "text": "just spawn a new stab or a mocked version of that interface and pass it in",
    "start": "1700559",
    "end": "1706120"
  },
  {
    "text": "but what does the interface look like for a database yeah it's a good it's highly dependent obviously on what",
    "start": "1706120",
    "end": "1712679"
  },
  {
    "text": "you're using or what you're needing but you obviously have your basic crowd operations M or if if your functions",
    "start": "1712679",
    "end": "1719360"
  },
  {
    "text": "using them and then anything more specific in the abstract sense it's",
    "start": "1719360",
    "end": "1724679"
  },
  {
    "text": "difficult because it becomes incredibly context specific given what your code",
    "start": "1724679",
    "end": "1729919"
  },
  {
    "text": "does yeah it does and it is also possible to create tightly coupled test",
    "start": "1729919",
    "end": "1736320"
  },
  {
    "text": "code as well where it becomes so brittle that any change in the implementation will break something",
    "start": "1736320",
    "end": "1742960"
  },
  {
    "text": "you know because sometimes things are over tested I think I actually think 100% code coverage depending on the",
    "start": "1742960",
    "end": "1750240"
  },
  {
    "text": "project could be a mistake because essentially you have described probably",
    "start": "1750240",
    "end": "1757399"
  },
  {
    "text": "well almost certainly you've described everything in that package and any",
    "start": "1757399",
    "end": "1762559"
  },
  {
    "text": "change to that will then break the tests and that can from a practical point of view get really annoying when every time",
    "start": "1762559",
    "end": "1769799"
  },
  {
    "text": "you make little tweaks you have to then go and also update tests I always tell",
    "start": "1769799",
    "end": "1775440"
  },
  {
    "text": "people try to hit for around 90 right 90 is a good number like if you can get it",
    "start": "1775440",
    "end": "1781399"
  },
  {
    "text": "around there you're doing all right because you know what you're not going to get at 90 you're not going to get all those like if error equals nil return n",
    "start": "1781399",
    "end": "1789080"
  },
  {
    "text": "errors like you that's that's what you're going to get if you hit 90 you're just going to skip all those like those",
    "start": "1789080",
    "end": "1795840"
  },
  {
    "text": "particular cuz you're like you can look at them inv validate that they're returning an error you don't really need and sometimes it's more complicated to",
    "start": "1795840",
    "end": "1803360"
  },
  {
    "text": "try and get that error inserted yeah just so to get the test to pass when",
    "start": "1803360",
    "end": "1809799"
  },
  {
    "text": "it's more just like hey I don't really care if any error comes back from this just pass it back up like I don't need",
    "start": "1809799",
    "end": "1816799"
  },
  {
    "text": "to force an error there just to trigger that one code path for a test um but to",
    "start": "1816799",
    "end": "1821880"
  },
  {
    "text": "get back to the database thing I do not mock out my databases",
    "start": "1821880",
    "end": "1827519"
  },
  {
    "text": "right you use a real database I use a real database yeah in Ruby it was a real",
    "start": "1827519",
    "end": "1834360"
  },
  {
    "text": "problem and that's nothing against it's not Ruby it's not rails it's just the",
    "start": "1834360",
    "end": "1839480"
  },
  {
    "text": "work of something like active record taking all those database records and breaking them into all those Ruby",
    "start": "1839480",
    "end": "1845159"
  },
  {
    "text": "objects and all the work that it did in that highly Dynamic interpreted language",
    "start": "1845159",
    "end": "1850600"
  },
  {
    "text": "meant that to hit the database takes a long time and uses a lot of resource is",
    "start": "1850600",
    "end": "1858399"
  },
  {
    "text": "it really slowed your tests down after a while in Ruby in go it's not my",
    "start": "1858399",
    "end": "1866120"
  },
  {
    "text": "problem like my tests are still plenty fast I mean they're hitting postgress locally how how much of a Slowdown could",
    "start": "1866120",
    "end": "1873320"
  },
  {
    "text": "that be uh and honestly I find that it's usually plenty good enough uh it my",
    "start": "1873320",
    "end": "1879919"
  },
  {
    "text": "tests are fast enough I don't have to deal with trying to keep all those objects and when you're dealing with I",
    "start": "1879919",
    "end": "1885799"
  },
  {
    "text": "don't know I find when I'm dealing with data based stuff the amount of things I need to mock out to make it usable is",
    "start": "1885799",
    "end": "1893639"
  },
  {
    "text": "sizable yeah you end up building the an a database emulator in memory and and",
    "start": "1893639",
    "end": "1899679"
  },
  {
    "text": "and for me like I'm just like if I'm going to spend I I don't need to spend all that time like I'll just hit",
    "start": "1899679",
    "end": "1905000"
  },
  {
    "text": "postgress it's right there it's G to be there on my server it's G there my CI",
    "start": "1905000",
    "end": "1911279"
  },
  {
    "text": "like it's local it takes me 30 seconds to install like I'll just hit it and I",
    "start": "1911279",
    "end": "1916880"
  },
  {
    "text": "know that all my queries are correct I know that my marshalling to database and",
    "start": "1916880",
    "end": "1923120"
  },
  {
    "text": "from the database is correct right like yeah I feel like there's a whole and",
    "start": "1923120",
    "end": "1928399"
  },
  {
    "text": "this is my unpopular opinion Matt wanted me to come up with an unpopular opinion and I was going to say that i' like test",
    "start": "1928399",
    "end": "1933440"
  },
  {
    "text": "like assertion libraries but I think this is more unpopular okay well save it for the official segment well you got it",
    "start": "1933440",
    "end": "1940519"
  },
  {
    "text": "now man don't preempt the segment Bas maybe that's an unpopular opinion",
    "start": "1940519",
    "end": "1946159"
  },
  {
    "text": "that is an unpopular I should have to wait till the segment yeah it's the second unpopular",
    "start": "1946159",
    "end": "1952200"
  },
  {
    "text": "opinion that's very meta you're right though that's kind of an integration test in a way what you're describing",
    "start": "1952200",
    "end": "1958000"
  },
  {
    "text": "then Mark right but it is in in some respects and I think I mean you know",
    "start": "1958000",
    "end": "1963200"
  },
  {
    "text": "again we could talk about this this for a long time and and the distinctions between unit integration and even the",
    "start": "1963200",
    "end": "1969919"
  },
  {
    "text": "distinctions between mocking and stubbing and interfaces MH there starts to be a bit",
    "start": "1969919",
    "end": "1975960"
  },
  {
    "text": "of a pro completely agree that you know right to for the job if it works",
    "start": "1975960",
    "end": "1981000"
  },
  {
    "text": "fantastic but that starts being a problem when you have 5,000 other engineers and and you need to do this on",
    "start": "1981000",
    "end": "1989200"
  },
  {
    "text": "on services with a ton of complicated DB interactions and code I guess yeah I'm",
    "start": "1989200",
    "end": "1995440"
  },
  {
    "text": "not saying it's for everybody yeah I'm saying for my my stuff I see it",
    "start": "1995440",
    "end": "2002039"
  },
  {
    "text": "as something that I would rather try to come up with a couple good interfaces is",
    "start": "2002039",
    "end": "2007440"
  },
  {
    "text": "where I need them uh and typically a couple good interfaces are all I really",
    "start": "2007440",
    "end": "2012639"
  },
  {
    "text": "need and you know a couple one method two method interfaces are usually good enough to if I write my code well enough",
    "start": "2012639",
    "end": "2020000"
  },
  {
    "text": "to fully isolate kind of or at least for the most part isolate the the things that I really want to tweak and change",
    "start": "2020000",
    "end": "2027120"
  },
  {
    "text": "right and I try to allow myself those insert points in code where they might be in the form of",
    "start": "2027120",
    "end": "2035159"
  },
  {
    "text": "say a plug-in shape where I can can add certain plugins to my web server and",
    "start": "2035159",
    "end": "2040399"
  },
  {
    "text": "testing that mutate the request or do stuff that lets me fake out third party",
    "start": "2040399",
    "end": "2045799"
  },
  {
    "text": "requests with transports and all sorts of other stuff right so I can't remember what the point was but it sounded good",
    "start": "2045799",
    "end": "2053560"
  },
  {
    "text": "did spend time on what works right on the important things yeah oh that was it",
    "start": "2053560",
    "end": "2058839"
  },
  {
    "text": "yeah and then you know abstract and then when I find that I hit those problems",
    "start": "2058839",
    "end": "2064118"
  },
  {
    "text": "like you were just describing with other all these engineers and a bigger abstraction is needed then I put the",
    "start": "2064119",
    "end": "2069320"
  },
  {
    "text": "time into that level of abstraction but right from the beginning it's just like you got bigger fish to fry",
    "start": "2069320",
    "end": "2076358"
  },
  {
    "text": "than that abstraction I think yeah exactly yeah context probably is very important I have seen as well one one",
    "start": "2076359",
    "end": "2082679"
  },
  {
    "text": "simple way to mock context the interface or context like knowledge oh no I just",
    "start": "2082679",
    "end": "2089638"
  },
  {
    "text": "meant the English word context okay sorry I I was legitim really",
    "start": "2089639",
    "end": "2097160"
  },
  {
    "text": "confused for yeah no sorry that's fine yes there are some uh simple ways to",
    "start": "2097160",
    "end": "2103400"
  },
  {
    "text": "mock out databases as well that I've seen and and used in the past uh sometimes it's a case of uh just have",
    "start": "2103400",
    "end": "2110040"
  },
  {
    "text": "your own interface that that you describ in your code and your implementation of",
    "start": "2110040",
    "end": "2115640"
  },
  {
    "text": "it touches a real database and does the has the database code in there but that",
    "start": "2115640",
    "end": "2121000"
  },
  {
    "text": "could be quite easy to Mock and then you know you aren't making database calls",
    "start": "2121000",
    "end": "2126359"
  },
  {
    "text": "but it might be something like load user or load lesson you know and whereas in",
    "start": "2126359",
    "end": "2131880"
  },
  {
    "text": "where in production that's going to be a database request you could mock out that interface at that level so it's a kind",
    "start": "2131880",
    "end": "2137040"
  },
  {
    "text": "of slightly higher level way of doing it have you done things like that before",
    "start": "2137040",
    "end": "2142200"
  },
  {
    "text": "anyone personally that's uh at least yeah in the last few years that's uh",
    "start": "2142200",
    "end": "2147760"
  },
  {
    "text": "where I've been working in larger go teams definitely that has been the way",
    "start": "2147760",
    "end": "2152800"
  },
  {
    "text": "we've done things right we're F spending more time on getting the right interface and abstraction going but that's as",
    "start": "2152800",
    "end": "2159920"
  },
  {
    "text": "we've been talking purely because of the team size and the codebase size it becomes more practical to do that yeah",
    "start": "2159920",
    "end": "2166680"
  },
  {
    "text": "so the the other thing about mocking and if you want to mock out say even if it's a database or some third party service",
    "start": "2166680",
    "end": "2173240"
  },
  {
    "text": "or whatever it is useful in test code to be able to do that so that you can return realistic data so that your code",
    "start": "2173240",
    "end": "2180359"
  },
  {
    "text": "can do its thing and so that it's predictable and all that stuff um I have",
    "start": "2180359",
    "end": "2185440"
  },
  {
    "text": "in the past done assertions onside the mock almost and I feel like this might",
    "start": "2185440",
    "end": "2190960"
  },
  {
    "text": "be a step too far in most cases the idea is you know there's there's a method in",
    "start": "2190960",
    "end": "2197079"
  },
  {
    "text": "fact there's a project called mock mq uh which is one that I wrote with some",
    "start": "2197079",
    "end": "2203040"
  },
  {
    "text": "friends of mine I can't remember who it's in the repo though credit where credit is due the show in which Matt",
    "start": "2203040",
    "end": "2208720"
  },
  {
    "text": "tells us all about his former projects He no longer uses go on man no I do use",
    "start": "2208720",
    "end": "2214599"
  },
  {
    "text": "this one I do actually yes this was from David Hernandez and he came up with this",
    "start": "2214599",
    "end": "2220599"
  },
  {
    "text": "nice pattern for doing marks which was essentially you create a struct and then for every method there's a field that",
    "start": "2220599",
    "end": "2227800"
  },
  {
    "text": "matches the signature and then you implement on that struct those methods as well which just call those functions",
    "start": "2227800",
    "end": "2235000"
  },
  {
    "text": "and so that gives you almost just like a transparent layer of that type which you",
    "start": "2235000",
    "end": "2240160"
  },
  {
    "text": "can then in test code create and give it little functions which will that they'll be the things that get called and you",
    "start": "2240160",
    "end": "2246359"
  },
  {
    "text": "can do things like simulate errors um like we were talking about earlier more importantly they're good for returning",
    "start": "2246359",
    "end": "2252480"
  },
  {
    "text": "useful and predictable data um I think it's better not to make assertions about",
    "start": "2252480",
    "end": "2258599"
  },
  {
    "text": "what was called in that because it's kind of implementation detail potentially there but it probably does",
    "start": "2258599",
    "end": "2265760"
  },
  {
    "text": "again depend on each case doesn't it I think it's okay to to kind of assert errors and stuff like that in in there",
    "start": "2265760",
    "end": "2274079"
  },
  {
    "text": "you know if you're getting a new uu ID and it errors out or something like I think it's okay to do that but yeah",
    "start": "2274079",
    "end": "2280319"
  },
  {
    "text": "asserting on the data there I I often do that field function thing not just on",
    "start": "2280319",
    "end": "2286480"
  },
  {
    "text": "like test structs but regular types too where there are areas where I want to",
    "start": "2286480",
    "end": "2292240"
  },
  {
    "text": "provide maybe a default implementation and then allow people to replace it so",
    "start": "2292240",
    "end": "2298319"
  },
  {
    "text": "one might be around envs for example right so I've been kind of",
    "start": "2298319",
    "end": "2303760"
  },
  {
    "text": "recently playing around with this idea of using zero structs for my configuration where the methods on that",
    "start": "2303760",
    "end": "2311680"
  },
  {
    "text": "struct there's no real Fields just methods and those methods will look for an EnV and then if they find it return",
    "start": "2311680",
    "end": "2318720"
  },
  {
    "text": "it otherwise return maybe some default and I like that you just kind of grab a config just to VAR it up and boom all",
    "start": "2318720",
    "end": "2325640"
  },
  {
    "text": "your stuff's there you don't need to really initialize it but obviously when you're dealing with environments it's",
    "start": "2325640",
    "end": "2330760"
  },
  {
    "text": "really hard to test uh and sometimes not even that but you want to on maybe on a",
    "start": "2330760",
    "end": "2335839"
  },
  {
    "text": "specific requ Quest as you're passing maybe a config down you want to change a value right and you can't do that if",
    "start": "2335839",
    "end": "2343200"
  },
  {
    "text": "they're all functions so one of the things I do there is have kind of a get EnV function that matches os. get EnV",
    "start": "2343200",
    "end": "2350640"
  },
  {
    "text": "right but you can set it and all those functions in that are on my config will",
    "start": "2350640",
    "end": "2355800"
  },
  {
    "text": "check and say oh if there's this function defined let me use that and that could just be returning a test",
    "start": "2355800",
    "end": "2362319"
  },
  {
    "text": "value right or use the default which is OS get EnV um so I've been using I use",
    "start": "2362319",
    "end": "2369960"
  },
  {
    "text": "that pattern quite a lot too I like that of here's a default way of doing things and then here's a function you can",
    "start": "2369960",
    "end": "2375880"
  },
  {
    "text": "Implement as a field same signature and it'll call that instead if it has it",
    "start": "2375880",
    "end": "2382640"
  },
  {
    "text": "yeah good use of that is if you need to control time because the the time. Now",
    "start": "2382640",
    "end": "2389119"
  },
  {
    "text": "function just Returns the current time so obviously in real code that's different every time but you can have a",
    "start": "2389119",
    "end": "2396880"
  },
  {
    "text": "function field matches the time. now signature which I think is just empty Funk and then assign it by default to",
    "start": "2396880",
    "end": "2403000"
  },
  {
    "text": "time. now and then control that in your test code so yeah I love those sort of mini marks almost in Ruby we had a great",
    "start": "2403000",
    "end": "2411119"
  },
  {
    "text": "thing called time cop when it was such a random Ruby thing where it would override basically time.now to be",
    "start": "2411119",
    "end": "2419200"
  },
  {
    "text": "whatever wanted it to be cuz you could just override anything so you could say like I want to be 3 weeks into the",
    "start": "2419200",
    "end": "2425319"
  },
  {
    "text": "future and time do now would return 3 weeks in the future Great Scott oh",
    "start": "2425319",
    "end": "2431720"
  },
  {
    "text": "God it was spectacularly awful and good and fun",
    "start": "2431720",
    "end": "2437480"
  },
  {
    "text": "yeah it was one of those things you can only do in a dynamic language though yeah and it's also the reason I'm not using a dynamic",
    "start": "2437480",
    "end": "2445200"
  },
  {
    "text": "language now the the the way I look at it at least is uh if it's something",
    "start": "2445200",
    "end": "2450920"
  },
  {
    "text": "that's How likely is it to change uh basically How likely is your database state to change how How likely is your",
    "start": "2450920",
    "end": "2458160"
  },
  {
    "text": "time to change if it's anything other than low take it out mock it out make it",
    "start": "2458160",
    "end": "2463440"
  },
  {
    "text": "as a dependency that's injected but that's a rule of thumb that I follow",
    "start": "2463440",
    "end": "2468760"
  },
  {
    "text": "[Music]",
    "start": "2468760",
    "end": "2483360"
  },
  {
    "text": "anyways the change log is deep discussions in and around the world of software and it's been going for over a",
    "start": "2483480",
    "end": "2489800"
  },
  {
    "text": "decade we interview hackers like Chris Anderson from 3D robotics at the time drones were like predators and Global",
    "start": "2489800",
    "end": "2497280"
  },
  {
    "text": "Hawks and military-industrial they were classified in super you know10 billion",
    "start": "2497280",
    "end": "2502440"
  },
  {
    "text": "things and we had just built a drone with Lego pieces around the dining room table programmed by a 9-year-old and",
    "start": "2502440",
    "end": "2509079"
  },
  {
    "text": "it's like okay that should not be possible you know it when when a 9-year-old can do something that is",
    "start": "2509079",
    "end": "2515520"
  },
  {
    "text": "classified that literally export controlled as munition with Lego with toy pieces you know something important",
    "start": "2515520",
    "end": "2521520"
  },
  {
    "text": "in this world has changed leaders like Devon zugal from GitHub in the like 10",
    "start": "2521520",
    "end": "2527560"
  },
  {
    "text": "to 15E range or 20 year range what I would really like is for if you have like three 12-year-olds hanging out and",
    "start": "2527560",
    "end": "2534599"
  },
  {
    "text": "one of them's like I want to be a firefighter another one's like I want to be a lawyer I want one of them to say I want to be an open source developer and",
    "start": "2534599",
    "end": "2541359"
  },
  {
    "text": "innovators like Amal Hussein I've yet to kind of see applications at scale that don't use multiple languages that don't",
    "start": "2541359",
    "end": "2547160"
  },
  {
    "text": "you have just Arcane stories behind why this weirdo thing exists you know like",
    "start": "2547160",
    "end": "2552800"
  },
  {
    "text": "all right when you open this file you're going to have to turn around three times and tap your nose",
    "start": "2552800",
    "end": "2559359"
  },
  {
    "text": "once like it's just the most hilarious stories you know but applications are",
    "start": "2559359",
    "end": "2564800"
  },
  {
    "text": "living breathing they have craft that's it's normal so I want to normalize",
    "start": "2564800",
    "end": "2570920"
  },
  {
    "text": "weirdness because that's just how applications evolve over time well",
    "start": "2570920",
    "end": "2576160"
  },
  {
    "text": "welcome to the change log please listen to an episode from our catalog that interests you and subscribe today we'd",
    "start": "2576160",
    "end": "2582559"
  },
  {
    "text": "love to have you with [Music]",
    "start": "2582559",
    "end": "2588800"
  },
  {
    "text": "us talking about testify then uh buan what do you see are the sort of",
    "start": "2593520",
    "end": "2599720"
  },
  {
    "text": "challenges with maintaining a project like testify what's easy and what's",
    "start": "2599720",
    "end": "2604960"
  },
  {
    "text": "difficult and great Scott great question Great Scott so one due to its obviously size",
    "start": "2604960",
    "end": "2613599"
  },
  {
    "text": "and popularity uh there are a lot of people wanted to work for them and",
    "start": "2613599",
    "end": "2618640"
  },
  {
    "text": "that's fair enough our I think our goal is to have a framework that makes life",
    "start": "2618640",
    "end": "2624240"
  },
  {
    "text": "as easy for as many people as possible that being said you have infinite",
    "start": "2624240",
    "end": "2629359"
  },
  {
    "text": "different use cases for it so we have a big difficulty there is just how many different requests we have to add this",
    "start": "2629359",
    "end": "2636680"
  },
  {
    "text": "specific feature so that it works in my case and the specific feature in my case",
    "start": "2636680",
    "end": "2641920"
  },
  {
    "text": "we try and be as Fair as possible and consider each case but ultimately we're",
    "start": "2641920",
    "end": "2647280"
  },
  {
    "text": "Guided by what the community as a whole or as a greater have have benefit from",
    "start": "2647280",
    "end": "2653880"
  },
  {
    "text": "this and also a big thing is to always be vigilant of starting to couple it to",
    "start": "2653880",
    "end": "2660960"
  },
  {
    "text": "to be dependent on either some other technology or some other proprietary",
    "start": "2660960",
    "end": "2666119"
  },
  {
    "text": "standard or whatever because I I think a great example was we've had change requests to change how the framework",
    "start": "2666119",
    "end": "2672400"
  },
  {
    "text": "works so that makes it easier to run in goand which would break it for everyone",
    "start": "2672400",
    "end": "2679640"
  },
  {
    "text": "who's not using goand uh so that was a no no in our books one of the things",
    "start": "2679640",
    "end": "2687720"
  },
  {
    "text": "that I often hear people say about testify obviously because it's one of the big ones but about any of the",
    "start": "2687720",
    "end": "2693160"
  },
  {
    "text": "assertion libraries is well occasionally I'll hit a rough spot or I'll I'll hit",
    "start": "2693160",
    "end": "2699760"
  },
  {
    "text": "something that doesn't quite work uh equal is always a great example of that there's some really edge cases there I",
    "start": "2699760",
    "end": "2706079"
  },
  {
    "text": "ran into just yesterday an edge case with uh testify zero where I had an",
    "start": "2706079",
    "end": "2714240"
  },
  {
    "text": "expectation that if I implemented iszero returning a bull which is kind of like an unofficial interface you'll find",
    "start": "2714240",
    "end": "2721839"
  },
  {
    "text": "across the standard Library like time has it I thought that if I did that called you know not zero or zero on",
    "start": "2721839",
    "end": "2728960"
  },
  {
    "text": "testify that it would look at my type see that it implements the a zero returns false and then is not you know",
    "start": "2728960",
    "end": "2736079"
  },
  {
    "text": "whatever um and that's not the case and I even dug deep into reflects because it uses reflect zero and reflect you know",
    "start": "2736079",
    "end": "2743559"
  },
  {
    "text": "and even that doesn't call that interface so I hit one of those edge cases and it took me a few minutes to",
    "start": "2743559",
    "end": "2749960"
  },
  {
    "text": "dig through the code figure it out and then I said oh man okay that I really thought it worked that way it does",
    "start": "2749960",
    "end": "2756720"
  },
  {
    "text": "I'll just change the waying my test a little bit like and I just moved on so",
    "start": "2756720",
    "end": "2762599"
  },
  {
    "text": "you know I don't know I don't put a lot of credence into the like I hit one random Edge case so they're all terrible",
    "start": "2762599",
    "end": "2769319"
  },
  {
    "text": "argument I find that if you hit one Edge case you've hit one Edge case if the",
    "start": "2769319",
    "end": "2774520"
  },
  {
    "text": "rest of the time it's working just fine for you that's that's definitely a baby with a bath water kind of a thing like",
    "start": "2774520",
    "end": "2781240"
  },
  {
    "text": "if I threw out all my tests yesterday because the require zero did not",
    "start": "2781240",
    "end": "2786480"
  },
  {
    "text": "follow the iszero interface then I mean that would just be stupid on my part that'd be such a waste",
    "start": "2786480",
    "end": "2793160"
  },
  {
    "text": "of time and effort and energy because I hit one ede kid yes it's kind of like Perfection is the enemy of good isn't it",
    "start": "2793160",
    "end": "2800000"
  },
  {
    "text": "there and I understand if you're using a technology and it lets you down in some way like that I completely understand",
    "start": "2800000",
    "end": "2806599"
  },
  {
    "text": "why you you sort of The credibility gets lost a little bit but Mark your attitude of like ah 90% sort of like it's most",
    "start": "2806599",
    "end": "2814240"
  },
  {
    "text": "you know I think that is actually quite a help healthy perspective to have which is it's good enough isn't it yeah agreed",
    "start": "2814240",
    "end": "2821079"
  },
  {
    "text": "you know and I'll keep adding the tests as things break you know and I find those new edge cases and I'll keep",
    "start": "2821079",
    "end": "2826680"
  },
  {
    "text": "adding new tests to cover them but like yeah you just got to move on with your day at some point like said and there",
    "start": "2826680",
    "end": "2832160"
  },
  {
    "text": "was no way I was throwing out testify because iszero didn't behave quite the way I thought it did despite the fact",
    "start": "2832160",
    "end": "2838800"
  },
  {
    "text": "that and don't forget the documentation makes no claims to respecting that",
    "start": "2838800",
    "end": "2843839"
  },
  {
    "text": "pseudo random interface any I made an assumption on my part proved out to be wrong and I just changed my",
    "start": "2843839",
    "end": "2850760"
  },
  {
    "text": "test to like are true you know food. zero and that that was fine I just made",
    "start": "2850760",
    "end": "2857440"
  },
  {
    "text": "that little change but yeah I think that's right when testify was in its",
    "start": "2857440",
    "end": "2862680"
  },
  {
    "text": "early stages we had this policy of anybody that contributed a PR was uh",
    "start": "2862680",
    "end": "2868559"
  },
  {
    "text": "invited to become a maintainer so this was an idea that you know it's about because it's a community-owned thing you",
    "start": "2868559",
    "end": "2875480"
  },
  {
    "text": "know it was completely open source so it's kind of this sort of community spirit and inclusiveness and stuff the",
    "start": "2875480",
    "end": "2882280"
  },
  {
    "text": "effect of that I think in testify case was that the API grew quite a lot and",
    "start": "2882280",
    "end": "2888480"
  },
  {
    "text": "the the if you look at the index page in God do for stretcher testify assert",
    "start": "2888480",
    "end": "2894160"
  },
  {
    "text": "package it's massive and of of course the the requir one is too yeah so what's",
    "start": "2894160",
    "end": "2900079"
  },
  {
    "text": "the downside to having that much stuff there and there pros and cons to it so",
    "start": "2900079",
    "end": "2906480"
  },
  {
    "text": "what what are the pros what are the cons I don't know there are that many Pros but go on well the pros are it does all",
    "start": "2906480",
    "end": "2913359"
  },
  {
    "text": "those things that people want it to do yeah but the cons I don't know I'm not going to speak here but I would feel the",
    "start": "2913359",
    "end": "2919480"
  },
  {
    "text": "cons are far away the pros of a large API in this case but Bo what do you think no exactly I it's so there",
    "start": "2919480",
    "end": "2927599"
  },
  {
    "text": "obviously the pros are it covers a few specific use cases that some people have",
    "start": "2927599",
    "end": "2932680"
  },
  {
    "text": "but the cons are you have the scod that needs be maintained and we need to make sure it",
    "start": "2932680",
    "end": "2938799"
  },
  {
    "text": "doesn't regress uh but also a big one is people just end up importing and polluting",
    "start": "2938799",
    "end": "2944960"
  },
  {
    "text": "their package name space uh so I mean if you have a test and you want to assert",
    "start": "2944960",
    "end": "2952799"
  },
  {
    "text": "but you now want to figure out which assertion should I use with testify I mean that's uh I think that's",
    "start": "2952799",
    "end": "2960480"
  },
  {
    "text": "why people just default to equal and start doing a lot of the the hard work to to mangle it into an equals assertion",
    "start": "2960480",
    "end": "2968559"
  },
  {
    "text": "problem you know yeah yeah but that's quite a good strategy because then at least the complexity is with the user",
    "start": "2968559",
    "end": "2975079"
  },
  {
    "text": "it's in their code you know it's in userland and that's something that I have learned over time which is that if",
    "start": "2975079",
    "end": "2982000"
  },
  {
    "text": "you can solve this problem easily enough in userland I.E outside of this package",
    "start": "2982000",
    "end": "2987359"
  },
  {
    "text": "then that's a good kind of signal that it shouldn't be something that goes into the package that wasn't a policy or",
    "start": "2987359",
    "end": "2993440"
  },
  {
    "text": "anything uh as you can tell by this this size of um testify I think but I do wonder if we could use that big query",
    "start": "2993440",
    "end": "3000079"
  },
  {
    "text": "data set to find out an open source go code which methods are used and which",
    "start": "3000079",
    "end": "3005839"
  },
  {
    "text": "ones aren't really used and ban what about the future of testify what about",
    "start": "3005839",
    "end": "3011720"
  },
  {
    "text": "if we find out a lot of these methods aren't used ever or very rarely used what about phasing methods out and",
    "start": "3011720",
    "end": "3018040"
  },
  {
    "text": "cleaning tightening up that API or doing a V2 that has a much tighter API would",
    "start": "3018040",
    "end": "3025720"
  },
  {
    "text": "be the other idea so like I said I I personally use maybe 10 or 12 and those",
    "start": "3025720",
    "end": "3031559"
  },
  {
    "text": "are a mix of their uh pro and con methods right they're true false",
    "start": "3031559",
    "end": "3037400"
  },
  {
    "text": "variants so error you know no error right nil not nil equal not equal maybe",
    "start": "3037400",
    "end": "3046599"
  },
  {
    "text": "contains um if I'm looking like a Big Blob of HTML that gets dumped out and I want to assert that various elements are",
    "start": "3046599",
    "end": "3053000"
  },
  {
    "text": "in there yeah starts SK length length I'll use length the contains one",
    "start": "3053000",
    "end": "3058359"
  },
  {
    "text": "you can do by doing is or do like you know aert true strings contains yeah but",
    "start": "3058359",
    "end": "3064119"
  },
  {
    "text": "yeah I could do strings contains I mean I could do equals on but all these are like I don't want to write the error message right yeah that's it that's it",
    "start": "3064119",
    "end": "3071240"
  },
  {
    "text": "yeah that's why I use contain here but like things like the Delta methods and all that stuff I'm like that's just too",
    "start": "3071240",
    "end": "3077799"
  },
  {
    "text": "much for me and it's it's very overwhelming and intense ultimately my tests are so small that those 10 or 12",
    "start": "3077799",
    "end": "3087200"
  },
  {
    "text": "kind of basic ones true false nil error equal they cut it they they they do like",
    "start": "3087200",
    "end": "3094720"
  },
  {
    "text": "90 to 95% of my heavy lifting form and they're and they're not varieties and",
    "start": "3094720",
    "end": "3100559"
  },
  {
    "text": "they're no you no nail not nail whatever yeah and I think we exactly we've had",
    "start": "3100559",
    "end": "3106240"
  },
  {
    "text": "what you what we now discussed has touched on a lot of very good points which is you know where we're going is",
    "start": "3106240",
    "end": "3112480"
  },
  {
    "text": "you know we've heard a lot of feedback we've seen lot of people ask us you know why do you have this why do you have",
    "start": "3112480",
    "end": "3118319"
  },
  {
    "text": "that and things things functions that we've even never seen before are there in people submitting pull requests on so",
    "start": "3118319",
    "end": "3126760"
  },
  {
    "text": "the future for us is I mean myself and my two other co- maintainers George and Martin we think it it's about time to",
    "start": "3126760",
    "end": "3134200"
  },
  {
    "text": "look at a version two of we've had so many Breaking change requests where we",
    "start": "3134200",
    "end": "3139960"
  },
  {
    "text": "we would break the API you know we've got a nice long list that that we could put in whole separate version so that's",
    "start": "3139960",
    "end": "3147319"
  },
  {
    "text": "why we started a drive for version two and because it's Community First you",
    "start": "3147319",
    "end": "3152440"
  },
  {
    "text": "know we do this for the community not not for some ideals we have I I know how",
    "start": "3152440",
    "end": "3158559"
  },
  {
    "text": "if I were to write testify myself I know what it would look like but I'm not writing it for myself so that's why",
    "start": "3158559",
    "end": "3165799"
  },
  {
    "text": "we've actually got uh and Matt as you pointed out maybe we can do something with a DAT set but we mostly want to",
    "start": "3165799",
    "end": "3172200"
  },
  {
    "text": "hear what the community's opinions are rather than look at what because we can gauge what's used",
    "start": "3172200",
    "end": "3178760"
  },
  {
    "text": "and what's not at best even if we could but we can't gauge what's missing or",
    "start": "3178760",
    "end": "3185079"
  },
  {
    "text": "what the community would like to have changed and that's why we have a survey",
    "start": "3185079",
    "end": "3190559"
  },
  {
    "text": "out a simple Google form um if if I may plug it please do yeah where can we find",
    "start": "3190559",
    "end": "3197480"
  },
  {
    "text": "that it's on CU T.L testify and we would love to hear",
    "start": "3197480",
    "end": "3203920"
  },
  {
    "text": "the community's feedback and if it's time and if it is according to the community to move forward onto a",
    "start": "3203920",
    "end": "3210079"
  },
  {
    "text": "new Breaking version too what they would like it to look like we're doing it for the community can I ask you to put that",
    "start": "3210079",
    "end": "3216799"
  },
  {
    "text": "link in the chat room for the show as well as if you haven't already on the",
    "start": "3216799",
    "end": "3222000"
  },
  {
    "text": "readme for testify right at the top yes make it available there because that's the place I'm most likely to go and see",
    "start": "3222000",
    "end": "3228680"
  },
  {
    "text": "it awesome thanks yeah no of course and that'll also end up on you know package.",
    "start": "3228680",
    "end": "3233920"
  },
  {
    "text": "go.d as well too if you to put it in the read meate uh yeah so buyan thank you so much for that I think I'm very excited",
    "start": "3233920",
    "end": "3240599"
  },
  {
    "text": "about what a version two could be because of course it means you can break in changes we can take things out we can",
    "start": "3240599",
    "end": "3246119"
  },
  {
    "text": "simplify things just keep require get rid of a sir get rid of a s it's useless I've",
    "start": "3246119",
    "end": "3254640"
  },
  {
    "text": "just called time. now and it is now time for the officially sanctioned unpopular",
    "start": "3254640",
    "end": "3262000"
  },
  {
    "text": "[Music] opinion un you what I actually think you should",
    "start": "3262000",
    "end": "3269240"
  },
  {
    "text": "probably leave popular",
    "start": "3269240",
    "end": "3276280"
  },
  {
    "text": "[Music] opinion so who's got an unpopular",
    "start": "3276850",
    "end": "3283359"
  },
  {
    "text": "opinion for us today I've given you two today I'm done come on",
    "start": "3283359",
    "end": "3288960"
  },
  {
    "text": "then Mark you've given about 12 I have nothing but unpopular opinions the",
    "start": "3288960",
    "end": "3294520"
  },
  {
    "text": "segment is my life I I'd be hard oppressed to find a",
    "start": "3294520",
    "end": "3299799"
  },
  {
    "text": "popular opinion yeah at the risk of going a bit phos Raptor and",
    "start": "3299799",
    "end": "3305480"
  },
  {
    "text": "meta and this is tangentially relat to testing but I mean frankly the the code",
    "start": "3305480",
    "end": "3311119"
  },
  {
    "text": "that we've had the least issues with that's the most reliable that has the",
    "start": "3311119",
    "end": "3316559"
  },
  {
    "text": "most positive feedback is the one that really changes and that we haven't touched in in months if not years well",
    "start": "3316559",
    "end": "3322960"
  },
  {
    "text": "years I mean so frankly we do this because change you know because uh the",
    "start": "3322960",
    "end": "3329839"
  },
  {
    "text": "industry is growing and moving and progressing but sometimes it's just best to leave things alone would it be easier",
    "start": "3329839",
    "end": "3337039"
  },
  {
    "text": "if we slowed the industry down and stopped progressing would that make maintaining the library easier for you",
    "start": "3337039",
    "end": "3343920"
  },
  {
    "text": "or yeah it actually would just okay Matt can you get on that I have my nights",
    "start": "3343920",
    "end": "3349119"
  },
  {
    "text": "free I can I can watch movies again this is not Ruby Mark you can't",
    "start": "3349119",
    "end": "3354200"
  },
  {
    "text": "just choose what time is it's not even choosing what time it",
    "start": "3354200",
    "end": "3359720"
  },
  {
    "text": "is just overriding whole methods and like and fun stuff yes well uh yeah I",
    "start": "3359720",
    "end": "3368240"
  },
  {
    "text": "think that's a a great one actually boy you definitely there's definitely something in that I think a lot of what",
    "start": "3368240",
    "end": "3374640"
  },
  {
    "text": "we do is uh quite weird as software people but it's best not to think about",
    "start": "3374640",
    "end": "3379799"
  },
  {
    "text": "it too much and just get on with it I thank you so much we have reached the end of to Today's show but uh thank you",
    "start": "3379799",
    "end": "3386760"
  },
  {
    "text": "and anybody at home that's interested in uh talking about testify go to the",
    "start": "3386760",
    "end": "3392200"
  },
  {
    "text": "project check the show notes uh have a look in the uh the go time FM slack channel uh we'll be leaving the a link",
    "start": "3392200",
    "end": "3400559"
  },
  {
    "text": "to the survey there for you to do Brian thank you so much especially thank you for getting up so early but or going to",
    "start": "3400559",
    "end": "3407039"
  },
  {
    "text": "bed too late thank you for all all the work you do to support the community it's a pleasure sorry Mark no I was just",
    "start": "3407039",
    "end": "3414200"
  },
  {
    "text": "making a joke but I'm going to bed late I had to make a special concession",
    "start": "3414200",
    "end": "3421119"
  },
  {
    "text": "and go to bed early last night cuz I'm in the future I'm inan it's Friday for me",
    "start": "3421119",
    "end": "3427200"
  },
  {
    "text": "oh numbers it is Ruby land in in Australia right now I bet if we all did",
    "start": "3427200",
    "end": "3432799"
  },
  {
    "text": "time do now we'd get different answers oh someone clearly didn't write a unit",
    "start": "3432799",
    "end": "3438280"
  },
  {
    "text": "test for time zones oh no that's yeah unpopular opinion 101 oh get rid of time",
    "start": "3438280",
    "end": "3445760"
  },
  {
    "text": "zones why do we we don't need them now get rid of them I think time zones what are who are they",
    "start": "3445760",
    "end": "3452039"
  },
  {
    "text": "for what's the deal with time zone I don't mind waking up at 20 past G or whatever 20 past G if we want to change",
    "start": "3452039",
    "end": "3459079"
  },
  {
    "text": "to have a brand new system did you say 20 p g yeah yeah I think we should use letters for the hours I think we should",
    "start": "3459079",
    "end": "3465680"
  },
  {
    "text": "move to a 100 hour based day and go fullon metric with it the decad day Matt",
    "start": "3465680",
    "end": "3472960"
  },
  {
    "text": "is is your unpopular opinion today for everyone all time measurements to move to Unix",
    "start": "3472960",
    "end": "3479359"
  },
  {
    "text": "time that would be good I'd love to see someone with a Unix time watch that's",
    "start": "3479359",
    "end": "3484559"
  },
  {
    "text": "something I've not seen and I would like to see that when the Apple watch first came out my immediate thing I jumped",
    "start": "3484559",
    "end": "3490640"
  },
  {
    "text": "into xcode which I'm not an xcode programmer and I was like oh let me make an Apple Watch face that's just the Unix",
    "start": "3490640",
    "end": "3497680"
  },
  {
    "text": "time I'm like I'm sure some geek would buy that for $199 in the App Store you",
    "start": "3497680",
    "end": "3502920"
  },
  {
    "text": "can't do that you can't make custom uh watch faces or at least you couldn't then you might be able to now but yeah I",
    "start": "3502920",
    "end": "3509760"
  },
  {
    "text": "think you can make a complication you can do the complications the little things on it yeah but that's not the",
    "start": "3509760",
    "end": "3516000"
  },
  {
    "text": "same that' still be good you could have Unix time on your watch it's only useful for another 18 years though exactly",
    "start": "3516000",
    "end": "3524440"
  },
  {
    "text": "thank you very much everyone for listening see you next [Music]",
    "start": "3524440",
    "end": "3530480"
  },
  {
    "text": "time if you're listening to this in the month of July you got a sh shot at some free goodies we are doing a giveaway in",
    "start": "3530480",
    "end": "3537839"
  },
  {
    "text": "celebration of our friend and open source wiiz Zeno roach's new book 14 Habits of Highly productive developers",
    "start": "3537839",
    "end": "3544839"
  },
  {
    "text": "if you don't know Zeno by name you may have heard of his wildly popular Dracula theme it's an awesome dark mode theme",
    "start": "3544839",
    "end": "3550760"
  },
  {
    "text": "for text editors terminals Etc and we have free bundles of Dracula Pro and 14 habits to give away for absolutely free",
    "start": "3550760",
    "end": "3558079"
  },
  {
    "text": "that's a $60 value and there are three ways to enter you can be the reviewer the socializer and the recommender hit",
    "start": "3558079",
    "end": "3565160"
  },
  {
    "text": "up the link in your show notes to get started there will be three lucky winners and you could be one of them",
    "start": "3565160",
    "end": "3571200"
  },
  {
    "text": "thanks to our longtime sponsors fley lenoe and rollbar for their continued support to break master cylinder for our",
    "start": "3571200",
    "end": "3577799"
  },
  {
    "text": "amazing beats and to you for listening to go time we truly appreciate you that's all for now generics next",
    "start": "3577799",
    "end": "3585830"
  },
  {
    "text": "[Music]",
    "start": "3585830",
    "end": "3593640"
  },
  {
    "text": "week [Music]",
    "start": "3593640",
    "end": "3623559"
  },
  {
    "text": "something [Music]",
    "start": "3623559",
    "end": "3636130"
  }
]