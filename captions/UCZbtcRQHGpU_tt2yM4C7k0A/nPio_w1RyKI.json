[
  {
    "text": "so for anyone not familiar go does have goto if you want to listen back to Johnny's pun earlier is actually a",
    "start": "40",
    "end": "5960"
  },
  {
    "text": "double pun cuz he said he had the word go in it and go to mhm they they were responsible for spaghetti code",
    "start": "5960",
    "end": "12840"
  },
  {
    "text": "essentially because that's how you used to write code in basic you'd have line IDs every ID like 10 20 30 and then the",
    "start": "12840",
    "end": "20560"
  },
  {
    "text": "code was on those lines they went up in tens by the way so that you could insert other instructions between later on yeah",
    "start": "20560",
    "end": "28359"
  },
  {
    "text": "yeah because you've already put your number in so it's too late you didn't I don't know when they came up with",
    "start": "28359",
    "end": "33360"
  },
  {
    "text": "Dynamic line numbers but that changed the world let me tell",
    "start": "33360",
    "end": "39399"
  },
  {
    "text": "you bandwith for change log is provided by fastly learn more at fastly.com our",
    "start": "39399",
    "end": "45440"
  },
  {
    "text": "feature flags are powered by launch Darkly check them out at launch dark.com and we're hosted on Lino Cloud servers",
    "start": "45440",
    "end": "52039"
  },
  {
    "text": "get $100 in hosting credit at lin.com",
    "start": "52039",
    "end": "56640"
  },
  {
    "text": "changelog whether you're working on a personal project project or managing Enterprise infrastructure you deserve",
    "start": "57519",
    "end": "62840"
  },
  {
    "text": "simple affordable and accessible cloud computing Solutions so you can take your project to the next level simplify your",
    "start": "62840",
    "end": "69920"
  },
  {
    "text": "life with Leno's Linux VMS to develop deploy and scale your applications faster and easier get started on Lino",
    "start": "69920",
    "end": "77600"
  },
  {
    "text": "today with $100 in free credit for our listeners you can find all the details at lin.com changelog or if you're not at",
    "start": "77600",
    "end": "84880"
  },
  {
    "text": "your desk just text change log to 474747 and get instant access to that",
    "start": "84880",
    "end": "90280"
  },
  {
    "text": "100 bucks linode has 11 global data centers and provides 24/7 365 human",
    "start": "90280",
    "end": "96280"
  },
  {
    "text": "support with no tears or handoffs regardless of your plan size in addition to shared and dedicated compute",
    "start": "96280",
    "end": "102399"
  },
  {
    "text": "instances you can use that $100 credit on S3 compatible object storage manage kubernetes and more visit lin.com",
    "start": "102399",
    "end": "110119"
  },
  {
    "text": "changelog and click on the create free Account button to get started or just text change log to",
    "start": "110119",
    "end": "116200"
  },
  {
    "text": "474747 get started today on linode",
    "start": "116200",
    "end": "121840"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "129879",
    "end": "136440"
  },
  {
    "text": "from around the go Community if this is your first time listening subscribe now at go time. FM stay tuned for all three",
    "start": "136440",
    "end": "145000"
  },
  {
    "text": "of our gophercon episodes What to Expect When You're not expecting the secret life of gophers and we don't call it",
    "start": "145000",
    "end": "151440"
  },
  {
    "text": "Jeopardy but we do call it go panic all right let's do this here we",
    "start": "151440",
    "end": "156900"
  },
  {
    "text": "[Music]",
    "start": "156900",
    "end": "161849"
  },
  {
    "text": "go hello welcome to go time I'm Matt Riot today we're talking about what you",
    "start": "163400",
    "end": "168760"
  },
  {
    "text": "would remove from go H curious subject you may think well unpicking it with me",
    "start": "168760",
    "end": "175920"
  },
  {
    "text": "John Calhoun hello John hey Matt how's it going it is going pretty well glad to",
    "start": "175920",
    "end": "181800"
  },
  {
    "text": "hear that we've also got Johnny Boro here Johnny how's it going for you pretty well also uh yeah I have my milk",
    "start": "181800",
    "end": "188760"
  },
  {
    "text": "and I've come to the show about where everything is going to be an unpopular opinion from what I hear so I'm",
    "start": "188760",
    "end": "194519"
  },
  {
    "text": "ready okay yeah yeah this is going to be an interesting one um we also have uh",
    "start": "194519",
    "end": "200000"
  },
  {
    "text": "Daniel Marty was also joining us hello Daniel hi happy to be back yeah you're",
    "start": "200000",
    "end": "205560"
  },
  {
    "text": "more than welcome uh thanks for joining us I wonder if it's worth very first",
    "start": "205560",
    "end": "210959"
  },
  {
    "text": "just let's talk about why this subject turns out to be quite an interesting",
    "start": "210959",
    "end": "216040"
  },
  {
    "text": "subject um you know we do tend to kind of as developers we're very focused on what's new and new features you know",
    "start": "216040",
    "end": "222799"
  },
  {
    "text": "it's very exciting when there are new features in go and you know we think about generics and changes to the errors",
    "start": "222799",
    "end": "229720"
  },
  {
    "text": "and and things it's very exciting um what's the value in taking things out of",
    "start": "229720",
    "end": "235640"
  },
  {
    "text": "go why would that be a worthwhile Endeavor well I think a small language is on one side easier to learn but on",
    "start": "235640",
    "end": "242840"
  },
  {
    "text": "the other it's easier to read and maintain so it happened a lot years ago before I did go that I would do C++ or",
    "start": "242840",
    "end": "249280"
  },
  {
    "text": "python and a couple of years down the line I would write C++ or python in a different way because the language is so",
    "start": "249280",
    "end": "254920"
  },
  {
    "text": "fast and I would just not be able to read my own code and with go that doesn't happen nearly as often because",
    "start": "254920",
    "end": "260400"
  },
  {
    "text": "the go code you write today is very similar to how you write go like in five years or five years ago for the most",
    "start": "260400",
    "end": "266000"
  },
  {
    "text": "part yeah I'd say another part to that is that any friction you can remove from",
    "start": "266000",
    "end": "271039"
  },
  {
    "text": "teammates is useful so not having people bicker about the correct way to instantiate a variable or anything like",
    "start": "271039",
    "end": "276880"
  },
  {
    "text": "that that just gets them back to work is is a useful thing right so the gof stuff the fact that all the code is formatted",
    "start": "276880",
    "end": "284199"
  },
  {
    "text": "automatically by the tooling means it's it's kind of takes that conversation off the table doesn't it yeah and I think",
    "start": "284199",
    "end": "290039"
  },
  {
    "text": "anybody who's used a language with more features understands that when you have seven ways to do something you're going",
    "start": "290039",
    "end": "295320"
  },
  {
    "text": "to have seven different people who all think the different ways Better h so that is interesting then yeah a smaller",
    "start": "295320",
    "end": "302160"
  },
  {
    "text": "language tends to only have then one way to do something and that is quite a good",
    "start": "302160",
    "end": "307320"
  },
  {
    "text": "goal for readability and for maintainability purposes and also for learning like if if you want to know how",
    "start": "307320",
    "end": "313039"
  },
  {
    "text": "to do something and you want to figure that out it's easier if there's only one way you can do it you should see like",
    "start": "313039",
    "end": "319400"
  },
  {
    "text": "the the number of ways you can add arrays together in JavaScript and stuff like that there are some amazing uh and",
    "start": "319400",
    "end": "326160"
  },
  {
    "text": "wonderful and scary things and you don't really get that in go and I think sometimes people's people's opinion from",
    "start": "326160",
    "end": "333560"
  },
  {
    "text": "the outside when they first see it is that it's a drawback of the language that it's so simple but it turns out to",
    "start": "333560",
    "end": "339840"
  },
  {
    "text": "be one of its greatest strengths doesn't it and I I think it's multiplicative because for example when back when I",
    "start": "339840",
    "end": "345759"
  },
  {
    "text": "used to do Java at least in the context of Android you would look at the Android apis and you would wonder like oh",
    "start": "345759",
    "end": "351240"
  },
  {
    "text": "exactly what does this API do if it's not very well documented to go see the code but then you would find a class",
    "start": "351240",
    "end": "357240"
  },
  {
    "text": "that extends another class that extends abstract class and then you know you end up with like five layers of abstraction",
    "start": "357240",
    "end": "363840"
  },
  {
    "text": "and at least to me that made it very difficult to actually see what was going on whereas in go you know you click on the go do and you almost always just",
    "start": "363840",
    "end": "369960"
  },
  {
    "text": "reach the code directly right yeah that's very true the the class hierarch is when that's used in the in the exact",
    "start": "369960",
    "end": "378680"
  },
  {
    "text": "Perfect Situation they're so powerful but I was also guilty of this I got",
    "start": "378680",
    "end": "384440"
  },
  {
    "text": "addicted to that I've built some amazing structures in uh in types in type",
    "start": "384440",
    "end": "391039"
  },
  {
    "text": "hierarchies abstract classes and generics and in in C that I was doing you could have like generics could have",
    "start": "391039",
    "end": "398000"
  },
  {
    "text": "also constraints on them too so it's not just any type the type has to be have",
    "start": "398000",
    "end": "403319"
  },
  {
    "text": "certain properties and things it's it it is amazing and it feels very good when you can figure that out and get the code",
    "start": "403319",
    "end": "409759"
  },
  {
    "text": "working but when you have to then come back later and it doesn't have to be very much time pass for my code to look",
    "start": "409759",
    "end": "417440"
  },
  {
    "text": "like a stranger's code sometimes and yeah I couldn't figure it out and so I learned the hard way to I would just",
    "start": "417440",
    "end": "424680"
  },
  {
    "text": "use those features in those languages very sparingly yeah and I actually think this goes back to something that John",
    "start": "424680",
    "end": "430680"
  },
  {
    "text": "said earlier which is you know it's really good for working as part of a team because it removes a lot of friction but at least for myself it",
    "start": "430680",
    "end": "437240"
  },
  {
    "text": "removes friction with my s in the past and future uh because again you know what I coded two years ago I probably",
    "start": "437240",
    "end": "443680"
  },
  {
    "text": "don't remember most of the details so having the language be simple uh forces me to I'm not going to say Keep things",
    "start": "443680",
    "end": "449759"
  },
  {
    "text": "simple but at least it does constraint what magic I can do for sure so simple is a very sort of subjective kind of um",
    "start": "449759",
    "end": "457759"
  },
  {
    "text": "sort of quality we sort of apply to something right so what's simple for me",
    "start": "457759",
    "end": "462960"
  },
  {
    "text": "um may not be simple for for someone else huh even the term that we like to",
    "start": "462960",
    "end": "468680"
  },
  {
    "text": "throw around like readability right um within you know within the go community that too is is quite subjective right so",
    "start": "468680",
    "end": "476159"
  },
  {
    "text": "I'm wondering if any of us here in the panel know of of of perhaps studies or",
    "start": "476159",
    "end": "482280"
  },
  {
    "text": "research done around sort of code readability I'm I'm I'm sure I've come across uh one or two out there not",
    "start": "482280",
    "end": "488319"
  },
  {
    "text": "specifically on go per se but I'd be interested in in in sort of getting some more sort of data around sort of the",
    "start": "488319",
    "end": "497120"
  },
  {
    "text": "readability right or the Simplicity all these sort of qualitative sort of uh things we assigned to go I'd be",
    "start": "497120",
    "end": "502440"
  },
  {
    "text": "interested in sort of seeing if we can prove it right um out there Benchmark",
    "start": "502440",
    "end": "508000"
  },
  {
    "text": "readability somehow code right it's really interesting because like you say it's in some ways quite subjective",
    "start": "508000",
    "end": "514640"
  },
  {
    "text": "certainly like if you were to measure how long it took for a developer to be able to go and fix something in certain",
    "start": "514640",
    "end": "520760"
  },
  {
    "text": "codebase you know something like that and then tested that out I could imagine",
    "start": "520760",
    "end": "525800"
  },
  {
    "text": "um some interesting kind of results but they'd be so uh dependent on the that individual developer but in as far as",
    "start": "525800",
    "end": "532800"
  },
  {
    "text": "API design goes we probably can say that you know less less is better less is",
    "start": "532800",
    "end": "540040"
  },
  {
    "text": "simpler um in the API surface I mean maybe not cuz in some cases I could even",
    "start": "540040",
    "end": "546440"
  },
  {
    "text": "imagine now saying that I could imagine a case where adding a type really helps",
    "start": "546440",
    "end": "551640"
  },
  {
    "text": "explain something even though you may not have needed that type so yeah it is an interesting one yeah in some ways",
    "start": "551640",
    "end": "558959"
  },
  {
    "text": "some languages sort of embrace the notion of having like a very expressive ways of",
    "start": "558959",
    "end": "565200"
  },
  {
    "text": "sort of U um of articulating your intent within Co within a file or within your",
    "start": "565200",
    "end": "570440"
  },
  {
    "text": "project right having different ways of of basically contextual ways of basically saying the same thing right",
    "start": "570440",
    "end": "577240"
  },
  {
    "text": "but you know in this context using these keywords makes the code more readable by",
    "start": "577240",
    "end": "582600"
  },
  {
    "text": "some definition and in that context something that does the exact same thing but you know using different keywords",
    "start": "582600",
    "end": "588160"
  },
  {
    "text": "you know means more in that context right and I think Ruby for example language I'm familiar with it has that",
    "start": "588160",
    "end": "594399"
  },
  {
    "text": "sort of those sets of attributes uh going for it right you know you might have different things that the same",
    "start": "594399",
    "end": "599680"
  },
  {
    "text": "thing could be expressed in different ways and rubius sort of valued that expressiveness of the language right so",
    "start": "599680",
    "end": "605600"
  },
  {
    "text": "in go what is do do we I don't hear us talk about",
    "start": "605600",
    "end": "611560"
  },
  {
    "text": "expressiveness of of the go language like we don't really our our go-to tends",
    "start": "611560",
    "end": "617040"
  },
  {
    "text": "to be uh uh and forgive the pun here our go-to tends to be um sort of a",
    "start": "617040",
    "end": "622920"
  },
  {
    "text": "Simplicity right it's simple to read There are less um um keywords you know",
    "start": "622920",
    "end": "628200"
  },
  {
    "text": "uh um basic the the whole notion that less is more but is less really more if I'm playing",
    "start": "628200",
    "end": "633640"
  },
  {
    "text": "devil Devil's Advocate here right could having more expressive Ways by by some definition using say Ruby's definition",
    "start": "633640",
    "end": "640120"
  },
  {
    "text": "of expressiveness right would having that be sort of allow us to write more",
    "start": "640120",
    "end": "645320"
  },
  {
    "text": "readable code right um than than the lack of right certain ways of expressing",
    "start": "645320",
    "end": "650600"
  },
  {
    "text": "certain things yeah I think that is a good point yeah it's almost a subject for what we would do to kind of evolve",
    "start": "650600",
    "end": "658720"
  },
  {
    "text": "and add to go but that it's a it's really interesting one when you start to think",
    "start": "658720",
    "end": "664000"
  },
  {
    "text": "about that I don't know if anyone else has anything to add to I I think there was a recent example in the direction",
    "start": "664000",
    "end": "669839"
  },
  {
    "text": "that Johnny says which is people wanted an idium to remove all the elements from a map very in a very fast way and some",
    "start": "669839",
    "end": "676560"
  },
  {
    "text": "people were arguing for um some sort of built-in for that sort of like delete like delete all you could imagine but in",
    "start": "676560",
    "end": "682639"
  },
  {
    "text": "the end what they did was they taught the compiler to see the pattern for a simple Loop to delete all the elements",
    "start": "682639",
    "end": "688519"
  },
  {
    "text": "one by one and convert that into an efficient delete all so it's kind of because it's",
    "start": "688519",
    "end": "694639"
  },
  {
    "text": "it's sort of a trade-off right because if you add another method to delete all the elements then suddenly people have two options and the language gets a",
    "start": "694639",
    "end": "700880"
  },
  {
    "text": "little bit more complex so I think it's a trade-off between do you let people do higher level things but then they have",
    "start": "700880",
    "end": "706440"
  },
  {
    "text": "to choose between doing the higher level or lower level thing I think those trade-offs also like we talk about",
    "start": "706440",
    "end": "711959"
  },
  {
    "text": "context a lot but where you work and the goals of your company and the size of your company all play a big role in that",
    "start": "711959",
    "end": "718480"
  },
  {
    "text": "so if you were ever doing a readability study I would almost imagine you'd have to compare like small teams using more",
    "start": "718480",
    "end": "725440"
  },
  {
    "text": "expressive languages might be just as efficient at jumping in you know to some code that's maybe new to them but",
    "start": "725440",
    "end": "732440"
  },
  {
    "text": "existent within the team versus like one of the things that I think makes when we say about readable for go one of the",
    "start": "732440",
    "end": "738760"
  },
  {
    "text": "things for me at least is that you can jump into code that doesn't even have to come from your organization it can come",
    "start": "738760",
    "end": "744079"
  },
  {
    "text": "from pretty much anybody in the go community and you can jump in and read the code and usually you know help with",
    "start": "744079",
    "end": "749639"
  },
  {
    "text": "it but in some of these more expressive languages because everybody sort of has opinions within your small group you can",
    "start": "749639",
    "end": "757000"
  },
  {
    "text": "have readable code and be very efficient with it but once you get outside of that small group and you start working with",
    "start": "757000",
    "end": "762240"
  },
  {
    "text": "other people who have differing opinions then I think that's where things slow down and new developers jumping into",
    "start": "762240",
    "end": "767560"
  },
  {
    "text": "projects probably think things are less readable but it would would be definitely interesting to see a study",
    "start": "767560",
    "end": "773959"
  },
  {
    "text": "that you know evaluates that and sees like when new developers come in especially like new grads how quickly",
    "start": "773959",
    "end": "780040"
  },
  {
    "text": "are they picking this up versus other languages here yeah well okay so Johnny",
    "start": "780040",
    "end": "786800"
  },
  {
    "text": "next time don't ruin the episode by saying give me some evidence do some",
    "start": "786800",
    "end": "791920"
  },
  {
    "text": "science please makes it way too much more just tell to drink more",
    "start": "791920",
    "end": "797680"
  },
  {
    "text": "milk yeah but but no obviously the very very good points there what I was thinking then is so are there examples",
    "start": "797680",
    "end": "805760"
  },
  {
    "text": "within the language or within the standard library of things that we feel like if we were to remove them we would",
    "start": "805760",
    "end": "812800"
  },
  {
    "text": "be better off you know and so some of the things we've talked about like of having just one way to do something or",
    "start": "812800",
    "end": "820680"
  },
  {
    "text": "optimizing for you know being able to express ideas or you know whether that",
    "start": "820680",
    "end": "826360"
  },
  {
    "text": "does impact readability positively or negatively are there any things maybe we",
    "start": "826360",
    "end": "831519"
  },
  {
    "text": "could get into that and and I also think if any of us disagree on this we could",
    "start": "831519",
    "end": "836600"
  },
  {
    "text": "like you could just press a buzz make a buzzer sound with your mouth and the editor will change it later so it'll be",
    "start": "836600",
    "end": "842600"
  },
  {
    "text": "a proper sound right that I promise and then you can pick up the",
    "start": "842600",
    "end": "849519"
  },
  {
    "text": "gauntlet that was thrown down if you have a different opinion cuz there may be some things here that we don't agree",
    "start": "849519",
    "end": "855000"
  },
  {
    "text": "on and I think you know there's a lot of personal taste in this but who wants to go first with an example of something",
    "start": "855000",
    "end": "861160"
  },
  {
    "text": "that you would happily take out Daniel what would you take out of go so I'm",
    "start": "861160",
    "end": "866240"
  },
  {
    "text": "going to start with the language feature I I think Imports should be removed entirely and and Dot import is you know",
    "start": "866240",
    "end": "872680"
  },
  {
    "text": "an import statement that begins with a DOT saying that everything all the exported names in that package are",
    "start": "872680",
    "end": "878880"
  },
  {
    "text": "immediately in this package scope I don't have to do like food do something yeah all the DSL loving people are",
    "start": "878880",
    "end": "885880"
  },
  {
    "text": "looking at you sideways I feel like the DSL use case",
    "start": "885880",
    "end": "891320"
  },
  {
    "text": "can be valid but it's so extremely rare that I don't think go needs to have a feature just for that if that makes",
    "start": "891320",
    "end": "897320"
  },
  {
    "text": "sense like pretty much every single time I've seen a DOT import I've been like ah do you really have to like for",
    "start": "897320",
    "end": "903079"
  },
  {
    "text": "example in tests it just makes tests so much less readable because you see like a function call and you're like wait",
    "start": "903079",
    "end": "909360"
  },
  {
    "text": "where's this function oh wait there's a DOT import somewhere it's interesting to me that this one came up only because I",
    "start": "909360",
    "end": "916279"
  },
  {
    "text": "didn't think about this at all because I don't think I've seen a do import and code in like months so it I didn't even",
    "start": "916279",
    "end": "923079"
  },
  {
    "text": "think about it so it's one of those things where I can't disagree with you that like I haven't seen a good really",
    "start": "923079",
    "end": "928959"
  },
  {
    "text": "good use case for it but I guess it just wasn't high on my priority list cuz I'm like it doesn't seem like something",
    "start": "928959",
    "end": "935000"
  },
  {
    "text": "that's being abused so eh whatever that's brutal mate arrest him to come on",
    "start": "935000",
    "end": "940880"
  },
  {
    "text": "and tell us what he would remove and you're like no not on that is not our priority for me I'm just saying it",
    "start": "940880",
    "end": "946120"
  },
  {
    "text": "wouldn't be one of my priorities it's fine if it's one of his because you don't see it anyway like if he removed it I wouldn't know the difference so I",
    "start": "946120",
    "end": "952480"
  },
  {
    "text": "guess that's an argument in his favor is that I would never know well hang on hang on we've made a grave error we",
    "start": "952480",
    "end": "958399"
  },
  {
    "text": "we're assume that everybody listening to the show knows exactly what we're talking about all right so let's let's let's take a quick step back here so the",
    "start": "958399",
    "end": "965480"
  },
  {
    "text": "import right actually Dan you brought it up why don't you explain what the do import does and and what does it enable",
    "start": "965480",
    "end": "972399"
  },
  {
    "text": "sure so if you import a package named Fu to use anything from that package you would then do fu. bar for example for an",
    "start": "972399",
    "end": "980639"
  },
  {
    "text": "exported function called bar so if you import that package Fu with a DOT at the beginning so dot and then the package",
    "start": "980639",
    "end": "986600"
  },
  {
    "text": "path and quotes in your import statement then you can use bar directly without adding food dot as a prefix so it",
    "start": "986600",
    "end": "993880"
  },
  {
    "text": "essentially allows you to use the names directly as if they were defined in in in this very package that you're working",
    "start": "993880",
    "end": "999680"
  },
  {
    "text": "on but of course you lose something in the readability there because you don't at a glance know whether it it probably",
    "start": "999680",
    "end": "1006759"
  },
  {
    "text": "would look like a me a local method or something that's in the current package space and so yeah having package names",
    "start": "1006759",
    "end": "1013600"
  },
  {
    "text": "on everything to you know all the types that's a very nice readability",
    "start": "1013600",
    "end": "1019399"
  },
  {
    "text": "gain so I'm yeah I'm with you for that one what what are the pros why is it",
    "start": "1019399",
    "end": "1024798"
  },
  {
    "text": "just so that you can people can save key presses I think there's well as a pro I",
    "start": "1024799",
    "end": "1030079"
  },
  {
    "text": "don't know because I'm arguing that it should be removed enough that's just not a priority for us",
    "start": "1030079",
    "end": "1037000"
  },
  {
    "text": "though I'm going to bring up another con and I know that's going to be pretty Niche but it's tools uh tools that",
    "start": "1037000",
    "end": "1042199"
  },
  {
    "text": "analyze Cod code and so on because right now if you see a name you can figure out what it is by just you know looking at",
    "start": "1042199",
    "end": "1048079"
  },
  {
    "text": "your scope and the parent scope and so on and just you just work your way up but if there's a DOT import that kind of",
    "start": "1048079",
    "end": "1053480"
  },
  {
    "text": "goes out the window because you have to look at all the do imported packages and look at their Scopes as well and and",
    "start": "1053480",
    "end": "1058679"
  },
  {
    "text": "that's a linear search it's not like just um going up the parents in any way yeah I'm so convinced does anyone like",
    "start": "1058679",
    "end": "1065720"
  },
  {
    "text": "do Imports on here I like them for the very specific use case that the enable",
    "start": "1065720",
    "end": "1071600"
  },
  {
    "text": "um despite the fact that I actually do not make use of the patterns that they enable right so I mentioned dsls before",
    "start": "1071600",
    "end": "1078400"
  },
  {
    "text": "or like if you want to if you want a great example of a DSL that sort of leverages the do import capability look",
    "start": "1078400",
    "end": "1084320"
  },
  {
    "text": "at go. design it's a go library for writing apis and things like that and and it's it's a beautiful DSL um that",
    "start": "1084320",
    "end": "1091799"
  },
  {
    "text": "basically you know that allows you sort of be that whole expressive this thing we were talking about before sort of a",
    "start": "1091799",
    "end": "1096880"
  },
  {
    "text": "you know almost like you're writing Pros right to to basically to build your apis and and generates code for you and all",
    "start": "1096880",
    "end": "1102720"
  },
  {
    "text": "that stuff so it's it's a very it's a very good implementation right it's it's something that leverages that do",
    "start": "1102720",
    "end": "1108440"
  },
  {
    "text": "capability quite well it just so happens that I don't I don't use dsls to write my apis right so that's that's I'm not",
    "start": "1108440",
    "end": "1114120"
  },
  {
    "text": "knocking it um for that right so it's it's it exists it's a feature of the language um like other things I'm sure",
    "start": "1114120",
    "end": "1121039"
  },
  {
    "text": "we're going to come up with here it's part of the language um and enables certain use cases it's just not a very",
    "start": "1121039",
    "end": "1126200"
  },
  {
    "text": "common one and if I see and and personally if I see a do import not in this particular you know Goa use case",
    "start": "1126200",
    "end": "1131919"
  },
  {
    "text": "but if I see a Import in production code during a p request that developer and I are going to sit down and talk about you",
    "start": "1131919",
    "end": "1138320"
  },
  {
    "text": "you know some stuff like some life choices right cuz it's not something that you know you typically will see in",
    "start": "1138320",
    "end": "1144280"
  },
  {
    "text": "in sort of the the everyday go code and you must have a very good reason why right precisely because it is it is so",
    "start": "1144280",
    "end": "1150280"
  },
  {
    "text": "unexpected not because it's a bad thing right it's just not something you're going to see very often within a",
    "start": "1150280",
    "end": "1155559"
  },
  {
    "text": "production code base I think gko is another example of something that most",
    "start": "1155559",
    "end": "1160679"
  },
  {
    "text": "developers will probably relate to like if you've ever come from any bdd testing framework so Behavior driven development",
    "start": "1160679",
    "end": "1167720"
  },
  {
    "text": "type testing stuff I think arpec is one of them if you're from like the rails Community gko is very similar and to",
    "start": "1167720",
    "end": "1175240"
  },
  {
    "text": "make it sort of read like an rspec test they commonly use Imports like in the test file so that in your test code you",
    "start": "1175240",
    "end": "1182360"
  },
  {
    "text": "can just s say it and then pass a string into that method and then a function and then just describe things without using",
    "start": "1182360",
    "end": "1189400"
  },
  {
    "text": "the package space all the time yeah so you can say like it should be a book or something and and go test this code and",
    "start": "1189400",
    "end": "1195919"
  },
  {
    "text": "it it reads kind of like a story then hm well I also think underscore I think",
    "start": "1195919",
    "end": "1200960"
  },
  {
    "text": "underscore Imports oh well on do Imports one question whose decision is it that",
    "start": "1200960",
    "end": "1206320"
  },
  {
    "text": "it's a do import it's the person importing it right so if even if it's a",
    "start": "1206320",
    "end": "1212000"
  },
  {
    "text": "package that has a DSL in it you still can use it in the other way you just have to keep repeating the package",
    "start": "1212000",
    "end": "1218080"
  },
  {
    "text": "name yeah okay you could also rename it to something short like two letters I personally think that's fine for tests",
    "start": "1218080",
    "end": "1224120"
  },
  {
    "text": "for example and if you really truly want a DSL I honestly think you need something that's higher level than go",
    "start": "1224120",
    "end": "1229679"
  },
  {
    "text": "like something that generates go code for example yeah and then I was going to say the underscore Imports is another",
    "start": "1229679",
    "end": "1235400"
  },
  {
    "text": "one that I feel like could go on this list because this is the one where you",
    "start": "1235400",
    "end": "1240600"
  },
  {
    "text": "basically import the package but you you you don't bring it into the package space so that you can use it you can't",
    "start": "1240600",
    "end": "1247320"
  },
  {
    "text": "refer to the package name and access it or anything it's done only I think to access the side effect of in it which on",
    "start": "1247320",
    "end": "1255280"
  },
  {
    "text": "Twitter was a very popular option of something something to remove and definitely gets another one of my votes",
    "start": "1255280",
    "end": "1261400"
  },
  {
    "text": "in it which we're going talk about in a minute but so yeah these underscore Imports dead weird and there's a few",
    "start": "1261400",
    "end": "1268000"
  },
  {
    "text": "places in the standard library that does this like if you're doing image processing you import the image package",
    "start": "1268000",
    "end": "1274000"
  },
  {
    "text": "and then to support JPEG and PNG and gifs you import different packages but",
    "start": "1274000",
    "end": "1279279"
  },
  {
    "text": "you don't do anything you don't use those packages they just register themselves in their own little init so",
    "start": "1279279",
    "end": "1286279"
  },
  {
    "text": "that's that's why we don't like it it's because sort of magical side effect that you're just not expecting so how would",
    "start": "1286279",
    "end": "1292039"
  },
  {
    "text": "you implement it another reason I don't like that pattern is just because I feel like it's easy to not know if",
    "start": "1292039",
    "end": "1299320"
  },
  {
    "text": "something's been imported or where it needs imported like take the SQL package or the image packages for example people",
    "start": "1299320",
    "end": "1304600"
  },
  {
    "text": "are like well do I import this in my main package do I import this like in the actual package that uses it what",
    "start": "1304600",
    "end": "1309960"
  },
  {
    "text": "happens if somebody's importing another one in their code is that going to cause conflicts like there's all this weird",
    "start": "1309960",
    "end": "1316080"
  },
  {
    "text": "you know confusion in your head as to like what's going on whereas like if you actually were to say like a PNG do",
    "start": "1316080",
    "end": "1321840"
  },
  {
    "text": "driver or something you know along those lines and and call that in your code it's very clear where it needs to be all a sudden yeah so Daniel you were asking",
    "start": "1321840",
    "end": "1328840"
  },
  {
    "text": "how would you implement it otherwise and I think you would just import the package and then call a method you know",
    "start": "1328840",
    "end": "1336120"
  },
  {
    "text": "in fact if you if you get rid of all the global State Al together then you'd have",
    "start": "1336120",
    "end": "1341720"
  },
  {
    "text": "something to register the PNG or register the different types with you you don't have that because you sort of",
    "start": "1341720",
    "end": "1348000"
  },
  {
    "text": "registering them in a global way with that in it so that's the other thing it's that whole in it Global State",
    "start": "1348000",
    "end": "1353640"
  },
  {
    "text": "uncore Imports world I think we're we're better off clearing steering clear of",
    "start": "1353640",
    "end": "1359960"
  },
  {
    "text": "that even like if you look at something like the SQL package in my opinion it",
    "start": "1359960",
    "end": "1365320"
  },
  {
    "text": "would be easier to call like SQL do openen and just pass in the drivers the first argument than to pass in a string",
    "start": "1365320",
    "end": "1371320"
  },
  {
    "text": "naming the driver like it's not really any clear seeing the name of it versus just the actual imported driver does",
    "start": "1371320",
    "end": "1377120"
  },
  {
    "text": "anyone like underscore Imports nope",
    "start": "1377120",
    "end": "1383200"
  },
  {
    "text": "okay yeah and by proxy um since we touched on it um I I don't tend to I'm",
    "start": "1383200",
    "end": "1389559"
  },
  {
    "text": "not an init Basher but I don't tend to like init right because you know typically where there's an in it there's",
    "start": "1389559",
    "end": "1394880"
  },
  {
    "text": "a global and because I don't like Global I end up not liking um in it as a result yeah if you're not against them uh then",
    "start": "1394880",
    "end": "1402840"
  },
  {
    "text": "you for them Johnny okay that's just the way it is it's like that okay I'm I'm sorry yeah",
    "start": "1402840",
    "end": "1409200"
  },
  {
    "text": "cuz we've got to sort these inits out for anyone that doesn't know what they are they're little special functions and",
    "start": "1409200",
    "end": "1415679"
  },
  {
    "text": "you can have multiple of them in the same package in different files in fact I think even in the same file you can",
    "start": "1415679",
    "end": "1421440"
  },
  {
    "text": "have multiple inits so already it doesn't feel right does it something feels a bit wrong with it and then they",
    "start": "1421440",
    "end": "1428760"
  },
  {
    "text": "they that code is run when the package is first imported or immediately when",
    "start": "1428760",
    "end": "1433880"
  },
  {
    "text": "the main program is run so it's useful for and I think the original thinking was around more complex initializations",
    "start": "1433880",
    "end": "1442000"
  },
  {
    "text": "in you can just use the VAR keyword in package space and create a variable and",
    "start": "1442000",
    "end": "1447440"
  },
  {
    "text": "assign it to a simple value like a number or a string or something or even structs and stuff even slightly more",
    "start": "1447440",
    "end": "1453720"
  },
  {
    "text": "complicated structures but uh if you need to do anything slightly more",
    "start": "1453720",
    "end": "1459240"
  },
  {
    "text": "computational to prepare you know or maybe decompress some compressed data or",
    "start": "1459240",
    "end": "1464600"
  },
  {
    "text": "something in order to prepare it then you'd have to do some work first and so they inits were kind of weren't they",
    "start": "1464600",
    "end": "1471520"
  },
  {
    "text": "they were there for initialization time things where you couldn't use vs I think",
    "start": "1471520",
    "end": "1478039"
  },
  {
    "text": "they end up just being a bit too magic and again it sort of relies on global State package space state which is I",
    "start": "1478039",
    "end": "1487320"
  },
  {
    "text": "think something worth avoiding can I make an argument for them yes but you have to do your buzzer sound and in post",
    "start": "1487320",
    "end": "1493880"
  },
  {
    "text": "put it in there now come on mate do it proper I don't have a good buzzer that better no all right so this isn't really",
    "start": "1493880",
    "end": "1502159"
  },
  {
    "text": "a serious argument for but if you took the reflect package and then in the in it put a time do sleep for like one",
    "start": "1502159",
    "end": "1508200"
  },
  {
    "text": "minute punishing anybody who used it and then you'd have a good reason for it",
    "start": "1508200",
    "end": "1514720"
  },
  {
    "text": "right yeah what would that do stop the process from starting up for like a minute if you sleep in a yeah in an init",
    "start": "1514720",
    "end": "1521720"
  },
  {
    "text": "because all the inits have to complete then before I believe so I've never tried it but I assume so in which case",
    "start": "1521720",
    "end": "1528480"
  },
  {
    "text": "people would get a real you know penalty for using reflect you get a penalty for using it anyway well they get a bigger",
    "start": "1528480",
    "end": "1534679"
  },
  {
    "text": "one that's not safe that's har that's harsh there are there are some legitimate uses for reflect you know I",
    "start": "1534679",
    "end": "1542080"
  },
  {
    "text": "know there are but but they still got to they got to earn it by",
    "start": "1542080",
    "end": "1548720"
  },
  {
    "text": "waiting yeah yeah but you've got to earn it oh yeah I like John when he's brutal",
    "start": "1548720",
    "end": "1554279"
  },
  {
    "text": "I know absolutely brutal today",
    "start": "1554279",
    "end": "1559679"
  },
  {
    "text": "[Music]",
    "start": "1562450",
    "end": "1570919"
  },
  {
    "text": "how much time does your team spend building and maintaining internal tooling I'm talking about those behind the-scenes apps the ones no one else",
    "start": "1570919",
    "end": "1577960"
  },
  {
    "text": "sees the S3 uploader you built last year for the marketing team that quick Firebase admin panel that let you",
    "start": "1577960",
    "end": "1583679"
  },
  {
    "text": "monitor key kpis maybe even the tool your data science team has together so they can provide custom ad spend",
    "start": "1583679",
    "end": "1589960"
  },
  {
    "text": "analytics now these are tools you need so you build them and that makes sense but the question is could you have built",
    "start": "1589960",
    "end": "1597039"
  },
  {
    "text": "them in less time with less effort and less overhead and maintenance required and the answer to that question is yes",
    "start": "1597039",
    "end": "1604200"
  },
  {
    "text": "that's where retool comes in Rohan Chopra engineering director at door Dash has this to say about retool quote the",
    "start": "1604200",
    "end": "1610200"
  },
  {
    "text": "tools we've been able to quickly build with retool have allowed us to empower and scale our local operators all while",
    "start": "1610200",
    "end": "1616320"
  },
  {
    "text": "reducing the dependency on engineering end quote now the internal tooling process at door Dash was bogged down",
    "start": "1616320",
    "end": "1622039"
  },
  {
    "text": "with manual data entry missed handoffs and long turnaround times and after integrating retool door Dash was able to",
    "start": "1622039",
    "end": "1628159"
  },
  {
    "text": "cut the engineering time required to build tools by a factor of 10x and eliminate the airpr manual processes",
    "start": "1628159",
    "end": "1634200"
  },
  {
    "text": "that play their workflows they were able to empower backend Engineers who wouldn't otherwise be able to build front ends from scratch and these",
    "start": "1634200",
    "end": "1640200"
  },
  {
    "text": "Engineers were able to build fully functional apps in reto in hours not days or weeks your next step is to try",
    "start": "1640200",
    "end": "1646520"
  },
  {
    "text": "it free at ret.com changelog again ret tool.com",
    "start": "1646520",
    "end": "1651710"
  },
  {
    "text": "[Music]",
    "start": "1651710",
    "end": "1663079"
  },
  {
    "text": "[Music]",
    "start": "1666810",
    "end": "1674109"
  },
  {
    "text": "changelog okay okay so what about some others anything else you feel like you",
    "start": "1676279",
    "end": "1681640"
  },
  {
    "text": "would remove I can give one that's uh that's a little maybe more controversial because",
    "start": "1681640",
    "end": "1688080"
  },
  {
    "text": "I feel like a lot of the ones we've had are we've all pretty much agreed with so",
    "start": "1688080",
    "end": "1693120"
  },
  {
    "text": "one of the ones that I would get rid of is on line if statements so when you have something like if x comma ER colon",
    "start": "1693120",
    "end": "1699960"
  },
  {
    "text": "equals some function then you have a semicolon then you like check the error so my reasoning for this is that I've",
    "start": "1699960",
    "end": "1706880"
  },
  {
    "text": "found over time that there are a few good cases for on line if statements",
    "start": "1706880",
    "end": "1712000"
  },
  {
    "text": "most notably if you're just trying to see if something's in like a map or something like that it can be useful but",
    "start": "1712000",
    "end": "1718480"
  },
  {
    "text": "why why I generally dislike them is that most code that I find more readable",
    "start": "1718480",
    "end": "1723640"
  },
  {
    "text": "sticks to the left like all the happy path is left aligned and when you're",
    "start": "1723640",
    "end": "1728679"
  },
  {
    "text": "using on line if statements it pretty much forces you to break that yeah unless you're doing it for error if the",
    "start": "1728679",
    "end": "1734880"
  },
  {
    "text": "error is the type returned and you're going to know then only handle it in that little block yeah but I guess what",
    "start": "1734880",
    "end": "1740760"
  },
  {
    "text": "I mean is if there's a second variable ever to access that second variable that's not the error you either have to put an lse statement or you have to like",
    "start": "1740760",
    "end": "1747360"
  },
  {
    "text": "make your happy path ENT right and in those cases I'm just not a fan of it and even like the error case you're talking",
    "start": "1747360",
    "end": "1753440"
  },
  {
    "text": "about you end up shadowing at that point if I recall correctly so that can",
    "start": "1753440",
    "end": "1758559"
  },
  {
    "text": "potentially be another issue so I just it's not that there aren't a couple valid use cases for on line of",
    "start": "1758559",
    "end": "1763760"
  },
  {
    "text": "statements it's just that generally speaking I feel like people would write better code if it wasn't available to",
    "start": "1763760",
    "end": "1769279"
  },
  {
    "text": "them okay I'm going to disagree right do do the buz then yeah gaun",
    "start": "1769279",
    "end": "1775519"
  },
  {
    "text": "thr nice good buzzer Daniel that's the sample we're going to use for the rest of our buzzers that's how good that",
    "start": "1775519",
    "end": "1782399"
  },
  {
    "text": "that's how good that was so I'm going to say that you should prefer not to quote unquote pollute the",
    "start": "1782399",
    "end": "1789799"
  },
  {
    "text": "scope of your parent if you just want to do something that's like just for a few lines um and so for example like if you",
    "start": "1789799",
    "end": "1796720"
  },
  {
    "text": "do you know um if instead of doing if x comma error colon equal something for",
    "start": "1796720",
    "end": "1803279"
  },
  {
    "text": "example that error variable is only scoped to the if or the else so it's it's not leaking to the lines after the",
    "start": "1803279",
    "end": "1810760"
  },
  {
    "text": "if statement has finished so I feel like if you put it in the in the parent scope there's more chance that you might make",
    "start": "1810760",
    "end": "1816799"
  },
  {
    "text": "a mistake yeah but as John said if there is another value that you want to get out you that is also only scoped to that",
    "start": "1816799",
    "end": "1823559"
  },
  {
    "text": "block right so then you end up copying it out or something something else which",
    "start": "1823559",
    "end": "1829399"
  },
  {
    "text": "is fine but yeah the alternative then is just to flatten the if uh or to pull the",
    "start": "1829399",
    "end": "1834840"
  },
  {
    "text": "expression out um and have that happen first and then you test with the if",
    "start": "1834840",
    "end": "1839919"
  },
  {
    "text": "after so you do yeah it's a line you save with that little form Johnny Boro",
    "start": "1839919",
    "end": "1845679"
  },
  {
    "text": "what do you think of those oneline if statements uh they don't bother me as much as they bother John yeah they don't",
    "start": "1845679",
    "end": "1852200"
  },
  {
    "text": "actually bother me that much it's just something I've noticed where maybe it's just people who",
    "start": "1852200",
    "end": "1857720"
  },
  {
    "text": "are new to the language are looking for a quicker way to write something and I feel like they get overused in some ways",
    "start": "1857720",
    "end": "1864559"
  },
  {
    "text": "and then eventually they realize oh this code would be easier if I'd pull that out you know pull the actual function",
    "start": "1864559",
    "end": "1869600"
  },
  {
    "text": "call a line and then check the error statement afterwards and after seeing enough code and like refactoring enough",
    "start": "1869600",
    "end": "1876120"
  },
  {
    "text": "code that had it I just feel like my life would have been easier if I never used them in the first place right yeah",
    "start": "1876120",
    "end": "1882080"
  },
  {
    "text": "so you're just treating this episode basically like therapy for you yeah no enough but actually that's a",
    "start": "1882080",
    "end": "1888159"
  },
  {
    "text": "good point I mean that's why we're here to talk about these kinds of experiences one thing this has against it is it",
    "start": "1888159",
    "end": "1894600"
  },
  {
    "text": "fights again rubs against a little bit that philosophy of having just one way to do something you know that you can do",
    "start": "1894600",
    "end": "1901399"
  },
  {
    "text": "the exact same thing in a slightly different way but at the same time the the similar way of doing this would be",
    "start": "1901399",
    "end": "1907440"
  },
  {
    "text": "an explicit block that indents the whole thing which is kind of ugly and uses two extra lines right I guess I just",
    "start": "1907440",
    "end": "1913840"
  },
  {
    "text": "wouldn't do either of those I would just use the same eror variable throughout my code is what I tend to do I if I ever",
    "start": "1913840",
    "end": "1920600"
  },
  {
    "text": "have a case where like that stuff needs isolated I feel like it's better suited to be in another function but that's I",
    "start": "1920600",
    "end": "1925880"
  },
  {
    "text": "guess just my opinion well there you go it's not a priority for Daniel that",
    "start": "1925880",
    "end": "1931639"
  },
  {
    "text": "one I got one I got another one yeah Johnny what would you take out of the language sounds like Daniel was going to",
    "start": "1931639",
    "end": "1936960"
  },
  {
    "text": "add a little bit of spice to the to the wound oh no so I don't have another one but Bill has been bringing up one for",
    "start": "1936960",
    "end": "1942960"
  },
  {
    "text": "the past 15 minutes Bill's like it naked returns",
    "start": "1942960",
    "end": "1949080"
  },
  {
    "text": "so maybe we should talk about that yeah what did he say so I actually think I",
    "start": "1949600",
    "end": "1955039"
  },
  {
    "text": "agree so in I think in most cases naked returns don't make sense I think there's only one case where they do make sense",
    "start": "1955039",
    "end": "1961440"
  },
  {
    "text": "and it's if you want to recover a panic and then alter the return values and",
    "start": "1961440",
    "end": "1967320"
  },
  {
    "text": "then the naked return allows you to do that we're going to have to explain what they are I just see the the chat message",
    "start": "1967320",
    "end": "1973399"
  },
  {
    "text": "by the way you can join in the go time chat on the slack Channel go time FM I just see Bill say naked return I thought",
    "start": "1973399",
    "end": "1980000"
  },
  {
    "text": "he was asking for nudes it just keeps saying naked returns it's like a really like a Victorian way of of that really",
    "start": "1980000",
    "end": "1988200"
  },
  {
    "text": "went out the door yeah naked returns but what are they what are they",
    "start": "1988200",
    "end": "1995480"
  },
  {
    "text": "can someone explain them please oh sure um when you're declaring a function at the end you declare the types that",
    "start": "1995480",
    "end": "2001000"
  },
  {
    "text": "you're returning and when you're declaring those you can also give them names so each variable can have a name",
    "start": "2001000",
    "end": "2006639"
  },
  {
    "text": "which can be useful whenever you want to like make it more clear what each one stands for what it is right um a naked",
    "start": "2006639",
    "end": "2013200"
  },
  {
    "text": "return is when you name those then inside of your function you don't have to declare those variables they're already declared because of the way you",
    "start": "2013200",
    "end": "2019159"
  },
  {
    "text": "define the function and you can just write the word return and those variables will be the ones return for",
    "start": "2019159",
    "end": "2024200"
  },
  {
    "text": "those values MH so rather than saying like return nil comma errors. new or",
    "start": "2024200",
    "end": "2030200"
  },
  {
    "text": "something you could just say error equals you know some value and then at the end just write return and it would",
    "start": "2030200",
    "end": "2035240"
  },
  {
    "text": "return that error right yes so naming returns naming the return",
    "start": "2035240",
    "end": "2041240"
  },
  {
    "text": "arguments I just don't do that I've seen some code that does it and I can see why",
    "start": "2041240",
    "end": "2046799"
  },
  {
    "text": "and in some cases they've even saved an allocation by doing it because they need a type anyway to pass into something",
    "start": "2046799",
    "end": "2052599"
  },
  {
    "text": "else so it gets clever but yeah I like to just be explicit if you've got a",
    "start": "2052599",
    "end": "2057800"
  },
  {
    "text": "couple of strings you're going to return and you want to be clear about what it is I'd probably pop that in a struct I",
    "start": "2057800",
    "end": "2063720"
  },
  {
    "text": "think we might be getting two things confused cuz there's Nick get returns as in return with nothing else but you're",
    "start": "2063720",
    "end": "2069878"
  },
  {
    "text": "actually returning something and then there's naming the the result parameters in your function declaration I think",
    "start": "2069879",
    "end": "2075800"
  },
  {
    "text": "those two are different things but naming is required for naked returns I think is how yeah right yeah but you",
    "start": "2075800",
    "end": "2082000"
  },
  {
    "text": "could use you could name your results without using naked returns that's what I'm trying to say yeah right right right",
    "start": "2082000",
    "end": "2088000"
  },
  {
    "text": "like I use named like return values all the time just to make it clear what something is but then if you read my",
    "start": "2088000",
    "end": "2094599"
  },
  {
    "text": "code you would probably not really even tell that I'm using the named returns because I don't like tend to use those",
    "start": "2094599",
    "end": "2100280"
  },
  {
    "text": "variables the way that you know that would be honestly I would almost prefer it didn't initialize variables for me",
    "start": "2100280",
    "end": "2105560"
  },
  {
    "text": "some days just cuz in my code I'll like go to initialize it and not realize it's like oh it's already initialized because",
    "start": "2105560",
    "end": "2110960"
  },
  {
    "text": "it's a named return but yeah I still while I do see uses for the named return variables I really don't like like the",
    "start": "2110960",
    "end": "2118599"
  },
  {
    "text": "empty return do anyone want to make a case for keeping naked returns or named",
    "start": "2118599",
    "end": "2125640"
  },
  {
    "text": "arguments return on documents is it possible to do like when you're recovering from a panic I know you use",
    "start": "2125640",
    "end": "2133240"
  },
  {
    "text": "name returns but once you're inside the Deferred block do you have to use a",
    "start": "2133240",
    "end": "2138880"
  },
  {
    "text": "naked return there or can you like I don't actually know what that looks like I know you can say like return you know",
    "start": "2138880",
    "end": "2145839"
  },
  {
    "text": "nil comma error and that should work but I think you still have to assign the error I'm not positive though well the",
    "start": "2145839",
    "end": "2151079"
  },
  {
    "text": "the Deferred function returns nothing so the whole reason you need the named return parameters is so that you can",
    "start": "2151079",
    "end": "2156960"
  },
  {
    "text": "assign back to them in the parent right but you don't ever have to have a naked return in it do you no when I said that",
    "start": "2156960",
    "end": "2162000"
  },
  {
    "text": "earlier I was getting confused between the two features I think okay like I was going",
    "start": "2162000",
    "end": "2167079"
  },
  {
    "text": "to say that that's the hard part is I think the naked returns probably show up because the name variables are already there but I I do kind of agree that",
    "start": "2167079",
    "end": "2174640"
  },
  {
    "text": "getting rid of the naked return would make code clearer yeah I think one feature that people would want if naked",
    "start": "2174640",
    "end": "2180400"
  },
  {
    "text": "return was to go away was to be able to for example if you want to return a zero",
    "start": "2180400",
    "end": "2186040"
  },
  {
    "text": "value of a structure you have to like name the struct in a composite literal right you have to do like some very long",
    "start": "2186040",
    "end": "2192079"
  },
  {
    "text": "type name open curly brace Clos curly brace because that's a zero value it would be nice if instead you could use",
    "start": "2192079",
    "end": "2198160"
  },
  {
    "text": "something like underscore to say the zero value of whatever this is I don't care because the naked return does give",
    "start": "2198160",
    "end": "2204440"
  },
  {
    "text": "you that brevity that you would lose if you don't if you didn't have it so wouldn't it be possible to write a lint",
    "start": "2204440",
    "end": "2210319"
  },
  {
    "text": "tool that just finds all naked returns and puts the variables in there cuz you",
    "start": "2210319",
    "end": "2215359"
  },
  {
    "text": "have to have named like return variables sure so I feel like that should be Bill's next project so who wants to die",
    "start": "2215359",
    "end": "2221280"
  },
  {
    "text": "in that Hill when would you use that if you want them type them in well I mean",
    "start": "2221280",
    "end": "2226880"
  },
  {
    "text": "like you could just set it up in your tool chain so that like if you have the empty return it just automatically replaces them right and then if Bill",
    "start": "2226880",
    "end": "2233359"
  },
  {
    "text": "gets everybody to use it he'll never see them again why don't just have Bill in the pr everyone's PR process and then",
    "start": "2233359",
    "end": "2239760"
  },
  {
    "text": "bill can just do it himself Bill's already pretty busy I'm not so sure he would manage that somebody's going to",
    "start": "2239760",
    "end": "2246079"
  },
  {
    "text": "ride a lantern just called bill it's just fix your returns maybe it gives you",
    "start": "2246079",
    "end": "2253880"
  },
  {
    "text": "a pin if everything is green pen oh yeah like a a badge yeah for your a hat or",
    "start": "2253880",
    "end": "2260319"
  },
  {
    "text": "something so I think Johnny was going to say another feature that he would remove earlier Johnny do you have one something",
    "start": "2260319",
    "end": "2267160"
  },
  {
    "text": "you would remove from the language mate or from the standard Library I have one but my my stance against it has softened",
    "start": "2267160",
    "end": "2276240"
  },
  {
    "text": "since when I was looking for a reason to to use it to like it and I was like squinting you found one yeah I probably",
    "start": "2276240",
    "end": "2283480"
  },
  {
    "text": "still wouldn't use it but I I understand for those that do like you know like I'm",
    "start": "2283480",
    "end": "2288560"
  },
  {
    "text": "trying to understand where they're coming from labels and and go I'm not in and the the associated use of the go-to",
    "start": "2288560",
    "end": "2295880"
  },
  {
    "text": "all right yeah very rarely do I find myself wanting to do that like if I even",
    "start": "2295880",
    "end": "2302200"
  },
  {
    "text": "sense the need for something like that I just rewrite the the code to not have them yeah so for anyone not familiar go",
    "start": "2302200",
    "end": "2310599"
  },
  {
    "text": "does have go to um if you want to listen back to Johnny's pun earlier is actually a double pun cuz he said he had the word",
    "start": "2310599",
    "end": "2317560"
  },
  {
    "text": "go in it and go to mhm yeah they they were responsible for spaghetti code",
    "start": "2317560",
    "end": "2323599"
  },
  {
    "text": "essentially because that's how you used to write code in basic you'd have um line IDs every ID like 10 203 and then",
    "start": "2323599",
    "end": "2331680"
  },
  {
    "text": "the code was on those lines they went up in tens by the way so that you could insert other",
    "start": "2331680",
    "end": "2337680"
  },
  {
    "text": "instructions between later on yeah yeah because you've already put your number in so it's too late you didn't I don't",
    "start": "2337680",
    "end": "2344280"
  },
  {
    "text": "know when they came up with Dynamic line numbers but that changed the world let",
    "start": "2344280",
    "end": "2349359"
  },
  {
    "text": "me tell you and then You' use they would use goto to jump around the flow and in",
    "start": "2349359",
    "end": "2354920"
  },
  {
    "text": "some languages they didn't have functions and and sub routines and things which do that basically that's",
    "start": "2354920",
    "end": "2360200"
  },
  {
    "text": "what they're doing but they do it for you in a kind of safe way and you declare the ins and outs to that um so",
    "start": "2360200",
    "end": "2367079"
  },
  {
    "text": "yeah goto was kind of famous for creating it's very difficult to follow code but it's a bit like a one of those",
    "start": "2367079",
    "end": "2374319"
  },
  {
    "text": "um Write Your Own Adventure books where you'd go to a certain page and jump around you couldn't it's very difficult",
    "start": "2374319",
    "end": "2380680"
  },
  {
    "text": "to reason about that it was hard to hack those games you had to really just play them there there's another use case for",
    "start": "2380680",
    "end": "2386880"
  },
  {
    "text": "labels though isn't there which is in when you use break out of Loops M if you",
    "start": "2386880",
    "end": "2392720"
  },
  {
    "text": "have a few nested Loops even just two in some some deep situation inside the",
    "start": "2392720",
    "end": "2399400"
  },
  {
    "text": "inner loop you may want to exit either just this one which you can do easily enough with break but you might want to",
    "start": "2399400",
    "end": "2406040"
  },
  {
    "text": "also exit the outer loop um and you know you could set a flag and then check the flag and things and then break but",
    "start": "2406040",
    "end": "2413520"
  },
  {
    "text": "labels allow you to break a particular Loop which is kind of strange but again",
    "start": "2413520",
    "end": "2419880"
  },
  {
    "text": "as you were saying Johnny I've seen examples where that seems perfectly reasonable and usually when the code is",
    "start": "2419880",
    "end": "2426520"
  },
  {
    "text": "very small and succinct not in great big long you know",
    "start": "2426520",
    "end": "2432319"
  },
  {
    "text": "multi-page functions so just to make sure I remember correctly with labels",
    "start": "2432319",
    "end": "2438880"
  },
  {
    "text": "there's what go to break and continue mhm are there any others I think that's",
    "start": "2438880",
    "end": "2444040"
  },
  {
    "text": "it no that's it I didn't know if like fall through or any of those other keywords had something with them so you mean continue continue you can say",
    "start": "2444040",
    "end": "2451040"
  },
  {
    "text": "continue this lab particular you continue to a label so like if you're nested Loops you can say continue and",
    "start": "2451040",
    "end": "2456560"
  },
  {
    "text": "it'll like jump to the outer loop and continue you're really labeling the four block aren't you when you label those",
    "start": "2456560",
    "end": "2462680"
  },
  {
    "text": "things and you're saying continue this one yes so you're like jumping to the outer one that you want to go to right",
    "start": "2462680",
    "end": "2469920"
  },
  {
    "text": "it's magic and it's dark magic I'll say I agree with Johnny that I've seen some people make not awful Arguments for them",
    "start": "2469920",
    "end": "2479640"
  },
  {
    "text": "but I've never wanted to use them myself it's always felt like I don't know",
    "start": "2479640",
    "end": "2485560"
  },
  {
    "text": "easier clean or something to just if I have to use like a nested function or",
    "start": "2485560",
    "end": "2490599"
  },
  {
    "text": "something else like something has always felt better to me than doing that and",
    "start": "2490599",
    "end": "2497079"
  },
  {
    "text": "maybe just a personal preference I I can't really say but I mean they're there so I don't",
    "start": "2497079",
    "end": "2503920"
  },
  {
    "text": "know if like the people who created the language saw a really good reason that I didn't so it's hard for me to like really say don't use them or get rid of",
    "start": "2503920",
    "end": "2510760"
  },
  {
    "text": "them yeah I think listeners should take this show with a pinch of salt we're just discussing the things that we would",
    "start": "2510760",
    "end": "2516520"
  },
  {
    "text": "remove I mean please feel free to use these they are part of the language um but obviously if you've got any sense",
    "start": "2516520",
    "end": "2522560"
  },
  {
    "text": "listen to what we're saying we've made all the mistakes I guess a better way to put it would be uh if I was reviewing",
    "start": "2522560",
    "end": "2528520"
  },
  {
    "text": "code and it had a label I'd probably suggest a change yeah do you know what",
    "start": "2528520",
    "end": "2533720"
  },
  {
    "text": "I've definitely used it but only in very specific cases where it's the clearest",
    "start": "2533720",
    "end": "2541000"
  },
  {
    "text": "thing to do which is literally you're saying in this case we're just going to stop break the whole thing",
    "start": "2541000",
    "end": "2546760"
  },
  {
    "text": "but you you know you're in some other flow but yeah I mean you can always re architect it to avoid these problems I'm",
    "start": "2546760",
    "end": "2554040"
  },
  {
    "text": "actually going to use my buzzer again so oh yeah but what I'm going to say is could you do a few takes of it so we can",
    "start": "2554040",
    "end": "2560599"
  },
  {
    "text": "choose for the edior please no I'm okay thanks uh what I'm going to say is I I think",
    "start": "2560599",
    "end": "2566680"
  },
  {
    "text": "it's a bit of both I I do agree that I don't use labels all that often maybe like once or twice per package at most",
    "start": "2566680",
    "end": "2573559"
  },
  {
    "text": "uh but when I do use them having to split a function into two for example if it was a a 60 line function with two",
    "start": "2573559",
    "end": "2579280"
  },
  {
    "text": "levels of indentation I think being forced to split it up would not be good",
    "start": "2579280",
    "end": "2585079"
  },
  {
    "text": "and I'm actually going to make a case for go-tos as well um or rather two cases one of them is sort of like the",
    "start": "2585079",
    "end": "2591520"
  },
  {
    "text": "retry idiom so being able to go to retry to retry a function is pretty useful and",
    "start": "2591520",
    "end": "2597359"
  },
  {
    "text": "you can use a for Loop for that but the for Loop if you're going from the top reads like an endless loop and it's only",
    "start": "2597359",
    "end": "2604359"
  },
  {
    "text": "at the end that you go like oh wait do I want to break which honestly I don't feel like it's better and the other use",
    "start": "2604359",
    "end": "2610760"
  },
  {
    "text": "case is code generation for example if you want to generate an automata or some sort of Bot that jumps between states",
    "start": "2610760",
    "end": "2616960"
  },
  {
    "text": "having goto is pretty useful then it's hard because you almost have to see the case to really determine if it's better",
    "start": "2616960",
    "end": "2623119"
  },
  {
    "text": "to use a label or something else like when you say breaking into a function part of me wonders if you could just",
    "start": "2623119",
    "end": "2628480"
  },
  {
    "text": "like write an anonymous function or a closure or something and slap it in there and if that would work or not I",
    "start": "2628480",
    "end": "2634400"
  },
  {
    "text": "don't know though it would depend um I will say one of my other arguments against labels is that they're so rare",
    "start": "2634400",
    "end": "2641480"
  },
  {
    "text": "that I think somebody jumping into the language is going to be like wait what is this and while the other one might",
    "start": "2641480",
    "end": "2646880"
  },
  {
    "text": "not be as clear what it's doing the fact that it's going to be all stuff they're accustomed to might make it easier to",
    "start": "2646880",
    "end": "2652480"
  },
  {
    "text": "read yeah you just have to battle it out in the poll request comments for that one I think you see that's the thing",
    "start": "2652480",
    "end": "2659800"
  },
  {
    "text": "again you know that whole notion of what's easy for me to read is not necessarily what's easy for you to read",
    "start": "2659800",
    "end": "2665440"
  },
  {
    "text": "right so for somebody seeing a go-to to a label um makes perfect readable sense",
    "start": "2665440",
    "end": "2671240"
  },
  {
    "text": "right it it's just oh yeah I can definitely follow what's going on here you get to this point you need to break out of these loops and you know use the",
    "start": "2671240",
    "end": "2676839"
  },
  {
    "text": "go-to yep that makes perfect sense and then for someone like me who doesn't use them very often right uh just because I",
    "start": "2676839",
    "end": "2682520"
  },
  {
    "text": "don't use them very often that doesn't mean it's bad right it just means I don't typically use them um when I see that the first time and I'll scratch my",
    "start": "2682520",
    "end": "2688559"
  },
  {
    "text": "head be like H why are you doing that right then I take John's posture and I bring you into a p request a battle and",
    "start": "2688559",
    "end": "2694280"
  },
  {
    "text": "and force you to take it out like one example I can give there is if you had like three nested for loops and",
    "start": "2694280",
    "end": "2702160"
  },
  {
    "text": "the innermost one would continue to like a label that's like below where the",
    "start": "2702160",
    "end": "2707839"
  },
  {
    "text": "first one starts so it's like technically in the second one I think at that point only the second for Loop would be the one that gets continued but",
    "start": "2707839",
    "end": "2714559"
  },
  {
    "text": "I honestly don't know so I'd be like I need to run this code to actually figure out what it's doing at this point which",
    "start": "2714559",
    "end": "2720000"
  },
  {
    "text": "would kind of frustrate me you mean you don't run that code for every PR I don't like sit there and run the for loops",
    "start": "2720000",
    "end": "2726240"
  },
  {
    "text": "although I don't run into like triple nested for Loops very often so they run them in your head you could just run",
    "start": "2726240",
    "end": "2731839"
  },
  {
    "text": "them in your head you know I mean that's what CI is for right yeah actually I",
    "start": "2731839",
    "end": "2737240"
  },
  {
    "text": "kind of agree I feel like continue and break I would only ever do it just to jump over one parent not more than one",
    "start": "2737240",
    "end": "2743400"
  },
  {
    "text": "because the moment you jump over more than one it gets confusing so maybe you could replace labels for like break actually not this",
    "start": "2743400",
    "end": "2751000"
  },
  {
    "text": "one the parent but only the direct parent yeah okay we'll do that",
    "start": "2751000",
    "end": "2757720"
  },
  {
    "text": "yeah good one that um and by the way thank you Daniel you when you were defending goto you actually made three puns go in there go to itself uh and two",
    "start": "2757720",
    "end": "2768079"
  },
  {
    "text": "reasons the two yeah I've got I've got it in my pun",
    "start": "2768079",
    "end": "2774200"
  },
  {
    "text": "book let me go to my go-to puns there you go see I did a talk at Gotham go",
    "start": "2774200",
    "end": "2781559"
  },
  {
    "text": "called things in go I never use which was actually about this very subject really talking about the same kinds of",
    "start": "2781559",
    "end": "2788079"
  },
  {
    "text": "things really and another one that I talked about was else and it gets quite a funny re",
    "start": "2788079",
    "end": "2794079"
  },
  {
    "text": "reaction um because it sounds like of course you need else you know you're talking about you know doing something",
    "start": "2794079",
    "end": "2801319"
  },
  {
    "text": "if this and then if not you need to do something else but really it was a point about the kind of line of sight thing",
    "start": "2801319",
    "end": "2808040"
  },
  {
    "text": "the the garden check where you check errors early and handle the edge cases",
    "start": "2808040",
    "end": "2813480"
  },
  {
    "text": "in the indentation and leave as John mentioned earlier that happy path down the left so but else is an interesting",
    "start": "2813480",
    "end": "2820119"
  },
  {
    "text": "one and if you find yourself with a big else block and big if else blocks one",
    "start": "2820119",
    "end": "2826119"
  },
  {
    "text": "trick is you can flip if you flip the logic in the if so if you're saying like if do something if you flip the the if",
    "start": "2826119",
    "end": "2833760"
  },
  {
    "text": "do something into if not do something and then handle the else case in there then you can get back out into the main",
    "start": "2833760",
    "end": "2840240"
  },
  {
    "text": "path it's essentially the same thing it's just kind of a writing style do you use l",
    "start": "2840240",
    "end": "2846480"
  },
  {
    "text": "a lot you three Johnny how many times have you used else this week in the last",
    "start": "2846480",
    "end": "2851839"
  },
  {
    "text": "seven days zero zero right I can probably well I've been using go for I",
    "start": "2851839",
    "end": "2859520"
  },
  {
    "text": "I've been using go for a while I was going to say I can probably count the number of times I've used it in in my entire time of using the go language but",
    "start": "2859520",
    "end": "2865359"
  },
  {
    "text": "that's probably a Overkill um yeah it's just something that I don't tend to like the moment I have to use an else I have",
    "start": "2865359",
    "end": "2871800"
  },
  {
    "text": "to think really hard is there a way I could you know return early or or like you know like you said basically reason",
    "start": "2871800",
    "end": "2878359"
  },
  {
    "text": "about what I'm doing um differently so that I don't have to use an nails like the moment I see it like immediately I",
    "start": "2878359",
    "end": "2883880"
  },
  {
    "text": "start scratching my hand like that doesn't look quite right right again it's a part of the language that doesn't",
    "start": "2883880",
    "end": "2889599"
  },
  {
    "text": "mean you should avoid using it and there are some cases that you really do need to use it right but it's just like I",
    "start": "2889599",
    "end": "2894920"
  },
  {
    "text": "typically like even before if I know I'm going to have some conditionals and in a",
    "start": "2894920",
    "end": "2900079"
  },
  {
    "text": "function of something like that I'm already thinking ahead of time how am I going to avoid a Nails here it's it's second nature at this point that's",
    "start": "2900079",
    "end": "2906200"
  },
  {
    "text": "interesting yeah for that for that reason is it for the readability line of sight thing mhm",
    "start": "2906200",
    "end": "2911590"
  },
  {
    "text": "[Music]",
    "start": "2911590",
    "end": "2922000"
  },
  {
    "text": "yeah what's up friends have you ever seen a problem thought to yourself I bet I could do that better our friends at",
    "start": "2922000",
    "end": "2927119"
  },
  {
    "text": "equinex agree equinex is the world's digital infrastructure company and they've been connecting owering the",
    "start": "2927119",
    "end": "2932520"
  },
  {
    "text": "digital world for over 20 years now they just launched a new new product called equinix metal it's built from the ground",
    "start": "2932520",
    "end": "2938200"
  },
  {
    "text": "up to empower developers with low latency high performance infrastructure anywhere we love for you to try it out and give them your feedback visit",
    "start": "2938200",
    "end": "2944520"
  },
  {
    "text": "info.in xm.com changa to get $500 in free credit to play with plus a rad",
    "start": "2944520",
    "end": "2949599"
  },
  {
    "text": "t-shirt again info. equinix metal.com changa get $500 in free credit equinix",
    "start": "2949599",
    "end": "2955480"
  },
  {
    "text": "metal build [Music]",
    "start": "2955480",
    "end": "2962619"
  },
  {
    "text": "freely [Music]",
    "start": "2964520",
    "end": "2977409"
  },
  {
    "text": "so it's quite simple thing for if if you're new to writing go that is a little cognitive check just to do there",
    "start": "2982680",
    "end": "2989319"
  },
  {
    "text": "are definitely cases where the clearest thing is just a kind of five or six line if this then then set something else set",
    "start": "2989319",
    "end": "2997400"
  },
  {
    "text": "something else you know sometimes that logically is exactly what you need but yeah um there's some what happens if you",
    "start": "2997400",
    "end": "3004520"
  },
  {
    "text": "don't protect against that of course is once you have two or three of these in a in a function you really are nesting",
    "start": "3004520",
    "end": "3011160"
  },
  {
    "text": "quite deep um and you you know you're wasting a lot of tabs there You' be you",
    "start": "3011160",
    "end": "3016839"
  },
  {
    "text": "know what I mean like you don't need that many tabs in your code it's a waste um too many bites but",
    "start": "3016839",
    "end": "3024200"
  },
  {
    "text": "what if you replace them with spaces well they G they take up more don't they",
    "start": "3024200",
    "end": "3030480"
  },
  {
    "text": "tabs versus pieces fight well tabs wins in go doesn't it cuz go uses",
    "start": "3030480",
    "end": "3037880"
  },
  {
    "text": "TB but yeah you to send all those all that that white space to GitHub it's a",
    "start": "3037880",
    "end": "3043920"
  },
  {
    "text": "waste know how much white space is in GitHub has anyone ever thought to figure",
    "start": "3043920",
    "end": "3049520"
  },
  {
    "text": "that out should just count it all but there load and it's just all empty it's waste need like a website they just",
    "start": "3049520",
    "end": "3055720"
  },
  {
    "text": "updates every day yeah they've got them they've got those websites they update every day they're called the",
    "start": "3055720",
    "end": "3063400"
  },
  {
    "text": "news with the count of white space right with the count of yeah that's the hard bit did you know they have this language",
    "start": "3063400",
    "end": "3070160"
  },
  {
    "text": "where they waste a ton of white space I think it's called python so much wasted white",
    "start": "3070160",
    "end": "3076880"
  },
  {
    "text": "space oh boy well it's only white space to us or if you're looking at it on a white page",
    "start": "3077799",
    "end": "3085040"
  },
  {
    "text": "there's still characters there that's still data it's it's it's travesty we need to we need to trim down that white",
    "start": "3085040",
    "end": "3091400"
  },
  {
    "text": "space that's never mind I mean we can do climate change later we need to probably",
    "start": "3091400",
    "end": "3096920"
  },
  {
    "text": "sort this one out first I feel like Bill is outside of our window picketing right",
    "start": "3096920",
    "end": "3102760"
  },
  {
    "text": "now like he's kind of mastered that within slack right shouting in looking for naked",
    "start": "3102760",
    "end": "3109520"
  },
  {
    "text": "returns well now he wants us to talk about removing the ability to return an interface oh good lord except for the",
    "start": "3109520",
    "end": "3117920"
  },
  {
    "text": "empty interface I I disagree I mean I I think I see the intention like if you have a",
    "start": "3117920",
    "end": "3124480"
  },
  {
    "text": "Constructor it needs to return a specific type not an interface and in most cases you don't want to return an",
    "start": "3124480",
    "end": "3129559"
  },
  {
    "text": "unempty interface but in some cases you do and that's fine as long as you know what you're doing I",
    "start": "3129559",
    "end": "3135280"
  },
  {
    "text": "think part of the reason I like returning the interface occasionally is I feel like it's just clear as to what",
    "start": "3135280",
    "end": "3141119"
  },
  {
    "text": "your intent was like if I have a function that sets up I don't know like",
    "start": "3141119",
    "end": "3147559"
  },
  {
    "text": "a small little server and all I want to return is a Handler I don't really like",
    "start": "3147559",
    "end": "3152880"
  },
  {
    "text": "I want the ability sometimes to change how I implemented all that and just to return a Handler and sometimes in my",
    "start": "3152880",
    "end": "3159480"
  },
  {
    "text": "opinion that's easier is just to say look all you really care is that I'm giving you an HTTP Handler like the actual details are you know shouldn't",
    "start": "3159480",
    "end": "3166079"
  },
  {
    "text": "matter to you right now M but I I do think it's few and far between is to when that makes sense it also lets you",
    "start": "3166079",
    "end": "3173119"
  },
  {
    "text": "uh hide your internals a little bit as well sometimes you might not want to export those concrete types for whatever",
    "start": "3173119",
    "end": "3180240"
  },
  {
    "text": "reason and again maybe that's maybe you just can return those types but yeah",
    "start": "3180240",
    "end": "3185280"
  },
  {
    "text": "having that interface return I think also has this in a way comes from kind",
    "start": "3185280",
    "end": "3190720"
  },
  {
    "text": "of factory thinking a little bit potentially because it's possible that",
    "start": "3190720",
    "end": "3195799"
  },
  {
    "text": "you it returns a different type depending on something else you know what I mean so in that case you would",
    "start": "3195799",
    "end": "3201240"
  },
  {
    "text": "want the interface to be returned or you'd have to just have a couple of methods um and move that logic elsewhere but",
    "start": "3201240",
    "end": "3207880"
  },
  {
    "text": "that logic of which type to use sometimes is part of it I think the what's the argument against doing it",
    "start": "3207880",
    "end": "3214200"
  },
  {
    "text": "it's just that it's better to return the concrete type and the caller can still use the interface if they want to I",
    "start": "3214200",
    "end": "3220160"
  },
  {
    "text": "think one is that the caller can decide if they need an interface another that Bill's mentioning is that in 1.16 there",
    "start": "3220160",
    "end": "3226160"
  },
  {
    "text": "was an optimization I think it was something with Escape analysis and and",
    "start": "3226160",
    "end": "3231240"
  },
  {
    "text": "basically extra allocations or some I don't remember what it was but basically it was like not as efficient memory wise",
    "start": "3231240",
    "end": "3237240"
  },
  {
    "text": "if I recall correctly and they made a couple optimizations in the compiler specifically for it and it helped speed",
    "start": "3237240",
    "end": "3243839"
  },
  {
    "text": "up some code but I still think like it kind of depends on the context if I'm writing all the code so like I control",
    "start": "3243839",
    "end": "3250440"
  },
  {
    "text": "both the function that's returning something and the people like the functions that are like using it I think it's fine because I can change one and",
    "start": "3250440",
    "end": "3257480"
  },
  {
    "text": "go change the other spots and not really have an issue but like if I'm writing a library that I'm publishing on the",
    "start": "3257480",
    "end": "3263319"
  },
  {
    "text": "internet and lots of developers are going to grab use sometimes returning an interface means that I can make what",
    "start": "3263319",
    "end": "3268440"
  },
  {
    "text": "would otherwise be a breaking change without bumping major versions and to me that's worth a slight performance",
    "start": "3268440",
    "end": "3275520"
  },
  {
    "text": "loss it's a good one so what about the standard library is there anything in",
    "start": "3275520",
    "end": "3281240"
  },
  {
    "text": "particular that you would take out the standard Library Daniel's all over that",
    "start": "3281240",
    "end": "3286640"
  },
  {
    "text": "so I've got one that I I think might be very controversial or non-controversial whatsoever uh I don't know which way",
    "start": "3286640",
    "end": "3292520"
  },
  {
    "text": "it's going to go and that is the plug-in package because I think the plugin package is a very good idea but it's sort of Half",
    "start": "3292520",
    "end": "3299839"
  },
  {
    "text": "Baked you know has no window support it's very easy to misuse if somebody else builds a plugin and tries to run it",
    "start": "3299839",
    "end": "3306480"
  },
  {
    "text": "with your binary it's almost certainly not going to work um so I think it's a great idea but it should never have HD",
    "start": "3306480",
    "end": "3312839"
  },
  {
    "text": "the standard Library until it was finished yeah so this this is a kind of runtime way of loading other like almost",
    "start": "3312839",
    "end": "3319839"
  },
  {
    "text": "dynamically loading other go code and you do that through this quite strange",
    "start": "3319839",
    "end": "3325480"
  },
  {
    "text": "plugin um interface have have you has anyone ever seen this used or used it I don't think",
    "start": "3325480",
    "end": "3332760"
  },
  {
    "text": "I have say I have no I've seen people try that kind of speaks volumes",
    "start": "3332760",
    "end": "3339000"
  },
  {
    "text": "yeah yeah I think that probably speaks volumes yeah I think if your target platform is only like Linux or Linux and",
    "start": "3339000",
    "end": "3345400"
  },
  {
    "text": "Mac I think it's fine but if if it has to be portable or easy to use for essentially any go user or any user in",
    "start": "3345400",
    "end": "3352319"
  },
  {
    "text": "general I think it's just not an option at all M yeah I think I'm going to say boat here the idea of it was it had a",
    "start": "3352319",
    "end": "3359599"
  },
  {
    "text": "lot of Promise the fact that you can't swap plugins at runtime for example that",
    "start": "3359599",
    "end": "3365319"
  },
  {
    "text": "seems like a a big Miss missed opportunity yeah it's just I think I think it's just an unfinished sort of a",
    "start": "3365319",
    "end": "3372119"
  },
  {
    "text": "um capability but uh if it's unfinished right that also means that it could be",
    "start": "3372119",
    "end": "3378359"
  },
  {
    "text": "finished and made to be more robust um lots of",
    "start": "3378359",
    "end": "3383920"
  },
  {
    "text": "honking it could be made more robust I think the fact that not a lot of people",
    "start": "3383920",
    "end": "3389480"
  },
  {
    "text": "are using it I'm wondering if it's because it's not good enough yet or if",
    "start": "3389480",
    "end": "3394839"
  },
  {
    "text": "PE is it a chicken on the egg problem right is it they're not using it because it's not good enough or is that if it",
    "start": "3394839",
    "end": "3401559"
  },
  {
    "text": "was finished would they start using it and thereby would plugins become popular right it's kind of hard to tell I think",
    "start": "3401559",
    "end": "3407559"
  },
  {
    "text": "if it was finished as in with proper Windows support and some sort of wrapper",
    "start": "3407559",
    "end": "3412839"
  },
  {
    "text": "to allow for nice error messages if something doesn't align when you load a plugin um I think with those constraints",
    "start": "3412839",
    "end": "3419280"
  },
  {
    "text": "for some use cases where you load something but you never want to unload it I think plugin would be fine but the",
    "start": "3419280",
    "end": "3426000"
  },
  {
    "text": "thing is it hasn't been finished in the I think four three or four years that it's been in the standard Library so I",
    "start": "3426000",
    "end": "3432400"
  },
  {
    "text": "don't have high hopes for it being finished anytime soon and and right now you canu remove it right because once",
    "start": "3432400",
    "end": "3437799"
  },
  {
    "text": "it's in go one you can remove it from there we can and go to whenever that is",
    "start": "3437799",
    "end": "3444880"
  },
  {
    "text": "put an overload sorry when you're creating a new library or you or or",
    "start": "3444880",
    "end": "3449920"
  },
  {
    "text": "language in this case I I feel like some things are going to sneak in that you wish weren't there and this definitely",
    "start": "3449920",
    "end": "3456799"
  },
  {
    "text": "sounds like one of those where like it got in there and now if you asked anyone in the go team they'd probably be like yeah that that really shouldn't be there",
    "start": "3456799",
    "end": "3462319"
  },
  {
    "text": "just yet yeah sometimes there are like specific problems that have to be solved",
    "start": "3462319",
    "end": "3469520"
  },
  {
    "text": "and um we see there are some examples of that in the standard Library well tell me about John the container packages do",
    "start": "3469520",
    "end": "3476920"
  },
  {
    "text": "you ever use those so there's a couple container packages in the standard Library there's like list Heap and ring",
    "start": "3476920",
    "end": "3483400"
  },
  {
    "text": "I think is the other one um I've tried to use them before and every single time",
    "start": "3483400",
    "end": "3488720"
  },
  {
    "text": "I've used them I've just felt it's easier to just write my own link list or my own Heap or whatever like I feel like",
    "start": "3488720",
    "end": "3495960"
  },
  {
    "text": "because they're stuck using interfaces and there aren't generics and and there's not like they aren't set up to generate code it's it's almost just more",
    "start": "3495960",
    "end": "3503520"
  },
  {
    "text": "confusing than writing something on your own which was just I get why they're there you know that it seems like a type",
    "start": "3503520",
    "end": "3509440"
  },
  {
    "text": "you'd need in the standard library of some sort but it just kind of feels subpar and I feel like if that's the",
    "start": "3509440",
    "end": "3515720"
  },
  {
    "text": "first impression somebody gets of the language it really makes the language look worse than it is so if if I could",
    "start": "3515720",
    "end": "3522680"
  },
  {
    "text": "go back and redo things I think I would suggest like let's not put this in the standard Library let's instead like make a tool that generates list and you give",
    "start": "3522680",
    "end": "3530920"
  },
  {
    "text": "it a type and like make maybe a standard tool for that that'd be cool but don't actually like put that",
    "start": "3530920",
    "end": "3537359"
  },
  {
    "text": "specific package in the Le standard Library fair enough yeah do you think",
    "start": "3537359",
    "end": "3542400"
  },
  {
    "text": "generics will do you think we'll get a range of packages that are common sort of data structure types when generics if",
    "start": "3542400",
    "end": "3549599"
  },
  {
    "text": "generics lands in go I think somebody will write them whether or not it's the goat team or not is a probably the",
    "start": "3549599",
    "end": "3555160"
  },
  {
    "text": "biggest question well I think it should be the goat team because if not we're going to have lots of like competing",
    "start": "3555160",
    "end": "3562799"
  },
  {
    "text": "well maybe that's okay anti comp yeah but it'd be nice if there was a at least for the more common ones that",
    "start": "3562799",
    "end": "3570000"
  },
  {
    "text": "there were proper ways to do it a bit like how we have Maps yeah go it",
    "start": "3570000",
    "end": "3575480"
  },
  {
    "text": "probably depends like the harder part there is like how do you decide which ones are the more common ones like which ones deserve to be in the standard",
    "start": "3575480",
    "end": "3581760"
  },
  {
    "text": "library and I mean you could make the argument that like list Heap and ring are all in the standard library now so",
    "start": "3581760",
    "end": "3587440"
  },
  {
    "text": "like those ones are important enough but still it's I don't know well you could",
    "start": "3587440",
    "end": "3592680"
  },
  {
    "text": "put them in the uh in the X package and just as a hint to everybody that hey you know this is experimental but this is",
    "start": "3592680",
    "end": "3598319"
  },
  {
    "text": "something that we've we we we're thinking about and have thought about right um no need to reinvent the wheel",
    "start": "3598319",
    "end": "3603359"
  },
  {
    "text": "200 times um you know if you have improvements you know suggest them that kind of thing it'll be good as well as",
    "start": "3603359",
    "end": "3608599"
  },
  {
    "text": "part of the development of the go generics proposal because you know it's a good test I mean really that's where",
    "start": "3608599",
    "end": "3615960"
  },
  {
    "text": "generics almost there's no debate that that's a good use case for generics for",
    "start": "3615960",
    "end": "3621119"
  },
  {
    "text": "those kinds of problems but yeah I think that's so fair fair candidate U John I",
    "start": "3621119",
    "end": "3627359"
  },
  {
    "text": "hope it's on some people's priority lists to have that taken off deleted",
    "start": "3627359",
    "end": "3632599"
  },
  {
    "text": "okay it's that time we're running a little late um but if you'll bear with us a few more minutes dear listener it's",
    "start": "3632599",
    "end": "3639160"
  },
  {
    "text": "time for unpopular [Music]",
    "start": "3639160",
    "end": "3645960"
  },
  {
    "text": "opinions I actually think should probably [Music] leave un",
    "start": "3645960",
    "end": "3653520"
  },
  {
    "text": "opinion [Music] so any un I mean I feel like this has",
    "start": "3653520",
    "end": "3660200"
  },
  {
    "text": "been a kind of episode of unpopular opinions but are there any particular unpopular opinions you'd like to get off",
    "start": "3660200",
    "end": "3666799"
  },
  {
    "text": "your chest so I've got one and I'm not sure how I feel about it I think go as a",
    "start": "3666799",
    "end": "3673079"
  },
  {
    "text": "language is making a mistake by by investing so much into generics because they're putting a bunch of very smart",
    "start": "3673079",
    "end": "3679640"
  },
  {
    "text": "people for years and years into generics how to design them and how to implement them and if instead you invested those",
    "start": "3679640",
    "end": "3686200"
  },
  {
    "text": "resources in improving the compiler support of interfaces with changes like the one we discussed for 116 I think if",
    "start": "3686200",
    "end": "3693559"
  },
  {
    "text": "you covered the common use cases of interfaces and made them faster I think a lot of use use cases for uh generics",
    "start": "3693559",
    "end": "3701000"
  },
  {
    "text": "would go away H that's an interesting one is that",
    "start": "3701000",
    "end": "3706359"
  },
  {
    "text": "popular or unpopular Johnny what do you think what's your immediate reaction if you had to give an immediate reaction to",
    "start": "3706359",
    "end": "3712880"
  },
  {
    "text": "that would you do well what would it be so well I don't do immediate reactions",
    "start": "3712880",
    "end": "3718720"
  },
  {
    "text": "man I I I think about things do it in your style for sure yeah yeah so yeah I",
    "start": "3718720",
    "end": "3723960"
  },
  {
    "text": "think about these things right so here's the thing perhaps that is indicative of",
    "start": "3723960",
    "end": "3729079"
  },
  {
    "text": "perhaps the way sort of I approach these things in the beginning right when I first you know sort of was getting",
    "start": "3729079",
    "end": "3734880"
  },
  {
    "text": "comfortable with go and I was like ah the lack of generics that is that is that is a miss that is H like how could",
    "start": "3734880",
    "end": "3742000"
  },
  {
    "text": "they yeah that is just a big no no why do they not have that in the language right and then I learn to work around",
    "start": "3742000",
    "end": "3748240"
  },
  {
    "text": "them um some would say code which might have been sort of a confusing to write",
    "start": "3748240",
    "end": "3753520"
  },
  {
    "text": "it in generics you know because you had to do it the quotequote long way right I sort of took pride and and pleasure in",
    "start": "3753520",
    "end": "3759279"
  },
  {
    "text": "that and it's actually basically hey I'm I'm going to be more explicit here yes it might not be as elegant as it could",
    "start": "3759279",
    "end": "3764720"
  },
  {
    "text": "have been using generics but it's okay right so over the years I've gotten used to it and then I I I got into you know",
    "start": "3764720",
    "end": "3771200"
  },
  {
    "text": "the camp of of ah we don't need no stinking generics right and then I see the proposal and and it's it's you know",
    "start": "3771200",
    "end": "3777920"
  },
  {
    "text": "I've seen some documented use cases where it could be better and things like that and it's one of those places it's",
    "start": "3777920",
    "end": "3783359"
  },
  {
    "text": "one of those things again where my experience my use of the language right",
    "start": "3783359",
    "end": "3788799"
  },
  {
    "text": "is I'm Not The Only One using the language so there are some things that I'm naturally not going to see that other people are going to have different",
    "start": "3788799",
    "end": "3795039"
  },
  {
    "text": "experiences and and different uh needs and things so I've sort of uh um broadened my tent for for these",
    "start": "3795039",
    "end": "3801559"
  },
  {
    "text": "competing ideas so to speak so if we don't get generics for another year or two I'm fine with that if we get them",
    "start": "3801559",
    "end": "3808480"
  },
  {
    "text": "within the next year or two yeah I'll use them I'll probably be very um sort of a conservative and in and in sort of",
    "start": "3808480",
    "end": "3815160"
  },
  {
    "text": "a how often and how much I use them right but you know again like go- to and",
    "start": "3815160",
    "end": "3820359"
  },
  {
    "text": "labels and all these things they have their place and and when I see them like oh you know what this would make an",
    "start": "3820359",
    "end": "3825880"
  },
  {
    "text": "excellent use case for for you know having a generic type here or something like that right and again and and that's",
    "start": "3825880",
    "end": "3831079"
  },
  {
    "text": "the I think for me personally that's sort of been my evolution right as an engineer is basically knowing that sort",
    "start": "3831079",
    "end": "3837680"
  },
  {
    "text": "of living that well it depends right I used to hate that when people said that but I've learn over over the years that",
    "start": "3837680",
    "end": "3843720"
  },
  {
    "text": "yes it does depend right and your use case is going to drive which way you go so I have a question related to that I",
    "start": "3843720",
    "end": "3850319"
  },
  {
    "text": "guess are you more is your unpopular opinion that not as much time should have been put into it and they should",
    "start": "3850319",
    "end": "3856119"
  },
  {
    "text": "have just picked something and went with it or is it that generics are coming to",
    "start": "3856119",
    "end": "3861200"
  },
  {
    "text": "go itself or a combination of both so I'm not going to say that generics are a",
    "start": "3861200",
    "end": "3866319"
  },
  {
    "text": "bad idea or they're not needed because I I think generics as part of types are good in many cases such as Maps or",
    "start": "3866319",
    "end": "3872400"
  },
  {
    "text": "slices right what I'm what I'm trying to say is that it's a tradeoff and the",
    "start": "3872400",
    "end": "3877599"
  },
  {
    "text": "compiler right now is very basic in some ways like in lining and if that effort had been spent in those part of the",
    "start": "3877599",
    "end": "3883920"
  },
  {
    "text": "compiler a lot of the function kind of generics could probably be mostly solved",
    "start": "3883920",
    "end": "3890359"
  },
  {
    "text": "by just a better compiler with just plain interfaces yeah yeah but if if your argument is that they're smart",
    "start": "3890359",
    "end": "3896760"
  },
  {
    "text": "these really smart people and they're spending all their time on generics they could be doing better things why stop at compiling things why not like",
    "start": "3896760",
    "end": "3902920"
  },
  {
    "text": "hoverboards and maybe someone could invent a pill that makes all your hair makes your hair the plugin package or",
    "start": "3902920",
    "end": "3909760"
  },
  {
    "text": "fix the plug-in package yeah or Plugin hair Nash those two ideas together um",
    "start": "3909760",
    "end": "3916720"
  },
  {
    "text": "new startup idea top of my head that's what it could be called and it just",
    "start": "3916720",
    "end": "3922680"
  },
  {
    "text": "sends you random wig [Laughter] um sorry derated you you make a",
    "start": "3922680",
    "end": "3928680"
  },
  {
    "text": "compelling Point very good any other unpopular opinions today I'm still",
    "start": "3928680",
    "end": "3934680"
  },
  {
    "text": "thinking about Daniels it's it's more just in some ways",
    "start": "3934680",
    "end": "3940400"
  },
  {
    "text": "I understand what Daniel's saying but I I also kind of I think that as the",
    "start": "3940400",
    "end": "3945839"
  },
  {
    "text": "language grows and matures that it's probably going to have to slow down in some ways and take more time and thought",
    "start": "3945839",
    "end": "3952599"
  },
  {
    "text": "into what it adds to the Lang language and you know how it changes the language over time um I imagine you know before",
    "start": "3952599",
    "end": "3958960"
  },
  {
    "text": "1.0 was released especially you could get away with a lot but now that 1.0 is out and now that you know this is a",
    "start": "3958960",
    "end": "3965359"
  },
  {
    "text": "major change I'm in some ways it's promising to me that they're spending this much time on it because it means",
    "start": "3965359",
    "end": "3971520"
  },
  {
    "text": "that they're not just throwing something in there and like even when we saw the proposals for the error handling stuff",
    "start": "3971520",
    "end": "3977400"
  },
  {
    "text": "that they spent a lot of time on that it seemed like and that all got thrown out so you could say that was all wasted",
    "start": "3977400",
    "end": "3982720"
  },
  {
    "text": "effort but at the very least they're taking Community feedback into account and trying to decide like is this",
    "start": "3982720",
    "end": "3989039"
  },
  {
    "text": "something we can improve on and I think that's a positive thing so it would be",
    "start": "3989039",
    "end": "3994119"
  },
  {
    "text": "nice to see some compiler like you know performance improvements and stuff like that for me personally those aren't",
    "start": "3994119",
    "end": "3999760"
  },
  {
    "text": "actually a priority at all um I would have more use for generics than like compiler optimizations I'd rather they",
    "start": "3999760",
    "end": "4006559"
  },
  {
    "text": "spend the time and the money basically do an investigation and either going",
    "start": "4006559",
    "end": "4011920"
  },
  {
    "text": "forward something or throwing up out whatever it is that they deem not good",
    "start": "4011920",
    "end": "4017520"
  },
  {
    "text": "enough rather than sort of dism dismissing it out of hand right because a lot of people have been asking for generics for a long time and the fact",
    "start": "4017520",
    "end": "4024799"
  },
  {
    "text": "that um there's somebody footing the bill for all that work all that research I I welcome that the the one thing I",
    "start": "4024799",
    "end": "4031440"
  },
  {
    "text": "I'll mention here is that um when uh Robert um and Ian came on a show um a",
    "start": "4031440",
    "end": "4037960"
  },
  {
    "text": "few episodes ago I think uh the episode title is um the latest in generics one of Ian's um sort of a my drop moment",
    "start": "4037960",
    "end": "4045039"
  },
  {
    "text": "basically was that the community keeps asking for all these sort of language features basically to add things right",
    "start": "4045039",
    "end": "4050920"
  },
  {
    "text": "so we've done a whole show things we would remove right but generally speaking most of the time people are asking for things to be added to the",
    "start": "4050920",
    "end": "4057200"
  },
  {
    "text": "language right um but the advice that he gave which I thought was you know very apt was uh that uh before you ask for",
    "start": "4057200",
    "end": "4065880"
  },
  {
    "text": "these additional things so in terms of you know features and things that you want the language to to support and do",
    "start": "4065880",
    "end": "4071640"
  },
  {
    "text": "and these things like that not don't consider only the things it would add for your use cases but also consider the",
    "start": "4071640",
    "end": "4077640"
  },
  {
    "text": "things that it would make harder the things that would make sort of a harder sort of the reason about for readability",
    "start": "4077640",
    "end": "4083880"
  },
  {
    "text": "basically asking everybody sort of make a concerted effort to truly weigh the pros and cons of anything you add to the",
    "start": "4083880",
    "end": "4090599"
  },
  {
    "text": "language right because you know it's it's like I can give you an example so",
    "start": "4090599",
    "end": "4095920"
  },
  {
    "text": "many examples we can all probably all think of of a new a new language a new piece of software a new framework",
    "start": "4095920",
    "end": "4101278"
  },
  {
    "text": "something comes in and and we we relish to simplicity of that of that V1 right we're like oh thank goodness right I've",
    "start": "4101279",
    "end": "4106960"
  },
  {
    "text": "been dealing with this thing which with all these features and all the bells and all these whistles it gets complicated I",
    "start": "4106960",
    "end": "4112318"
  },
  {
    "text": "don't know the right way to do things and you know I spend all my time reading blog post so I can figure out which knob",
    "start": "4112319",
    "end": "4117480"
  },
  {
    "text": "and button to flip and things and and then when something simpler comes along we immediately gravitate towards that",
    "start": "4117480",
    "end": "4123238"
  },
  {
    "text": "thing because the Simplicity of it is the attractiveness right that's that's what we we we we like about it right but",
    "start": "4123239",
    "end": "4129798"
  },
  {
    "text": "over time if we're not careful go could find itself being one of those languages that we just keep throwing everything in",
    "start": "4129799",
    "end": "4136758"
  },
  {
    "text": "there and and it becomes more and more complicated over time right so let's let's not forget why we all most of us",
    "start": "4136759",
    "end": "4143880"
  },
  {
    "text": "anyway um love go right it is that Simplicity that that word we keep throwing around that Simplicity right",
    "start": "4143880",
    "end": "4149679"
  },
  {
    "text": "the fact that it doesn't have all these extra features bells and whistles that's why we love go I know personally for me",
    "start": "4149679",
    "end": "4155400"
  },
  {
    "text": "that's why I love go because it doesn't try to be everything to everybody well said I don't think we can beat that",
    "start": "4155400",
    "end": "4164000"
  },
  {
    "text": "great ending there Johnny thank you very much and thanks to everyone for listening we were joined today don't",
    "start": "4164000",
    "end": "4170318"
  },
  {
    "text": "forget by Daniel Marty Daniel thanks for coming happy to be here uh you're welcome back Johnny there's a cool",
    "start": "4170319",
    "end": "4176440"
  },
  {
    "text": "episode next week why don't you tell tell everyone about that do you know which one I mean yeah I know which one",
    "start": "4176440",
    "end": "4183040"
  },
  {
    "text": "you mean next week we'll have uh Kelsey back on the show Kelsey high tower um and we're going to be talking about uh",
    "start": "4183040",
    "end": "4190080"
  },
  {
    "text": "how distributed systems go bad and what you can do about it it's going to be an",
    "start": "4190080",
    "end": "4195159"
  },
  {
    "text": "exciting show so do join us sounds great we'll be there John coun was also on",
    "start": "4195159",
    "end": "4202480"
  },
  {
    "text": "this episode uh okay well thanks very much thanks for listening I'll see you next",
    "start": "4202480",
    "end": "4210960"
  },
  {
    "text": "time if you enjoyed this episode subscribe now in your favorite podcast",
    "start": "4212040",
    "end": "4217280"
  },
  {
    "text": "app or peruse the entire catalog at go time. FM there you'll find lists of recommended and popular episodes",
    "start": "4217280",
    "end": "4223679"
  },
  {
    "text": "episodes transcripts for each and a whole lot more we put our unpopular opinions to the test on Twitter it's",
    "start": "4223679",
    "end": "4230600"
  },
  {
    "text": "like hot or not but for ideas follow at gotime FM to vote for or against and let",
    "start": "4230600",
    "end": "4236320"
  },
  {
    "text": "your voice be heard our music is provided by the beat freak breakmaster cylinder and we are brought to you by",
    "start": "4236320",
    "end": "4241480"
  },
  {
    "text": "some awesome sponsors shout out to fley lenoe and our brand new partner launch darkley welcome aboard that's all for",
    "start": "4241480",
    "end": "4248840"
  },
  {
    "text": "now distributed systems go wrong next week",
    "start": "4248840",
    "end": "4255640"
  },
  {
    "text": "[Music]",
    "start": "4260180",
    "end": "4282560"
  },
  {
    "text": "he [Music]",
    "start": "4282560",
    "end": "4308609"
  },
  {
    "text": "TR [Music]",
    "start": "4312560",
    "end": "4317810"
  }
]