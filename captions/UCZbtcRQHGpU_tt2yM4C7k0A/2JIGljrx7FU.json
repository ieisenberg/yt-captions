[
  {
    "text": "the language is not perfect but every change to the language carries a heavy",
    "start": "160",
    "end": "5680"
  },
  {
    "text": "cost so when you want to come and argue for why the language should be changed",
    "start": "5680",
    "end": "11440"
  },
  {
    "text": "and you know we see that a lot I'd say that there's a probably one a day suggestion for some way to change the go",
    "start": "11440",
    "end": "17320"
  },
  {
    "text": "language don't just talk about how it makes the language better but also spend",
    "start": "17320",
    "end": "23480"
  },
  {
    "text": "some time to talk about how it makes the language worse B with for change log is is",
    "start": "23480",
    "end": "30160"
  },
  {
    "text": "provided by fastly learn more at fastly.com we move fast and fix things",
    "start": "30160",
    "end": "35280"
  },
  {
    "text": "here at change law because of rbar check them out at rar.com and we're hosted on Leno Cloud servers at the lin.com",
    "start": "35280",
    "end": "44239"
  },
  {
    "text": "changelog this episode is brought to you by digital ocean droplets manage kubernetes manage databases spaces",
    "start": "45559",
    "end": "53480"
  },
  {
    "text": "objects storage volume block storage Advanced networking like virtual private clouds and Cloud firewalls devel",
    "start": "53480",
    "end": "59879"
  },
  {
    "text": "developer toing a robust API and CLI to make sure you can interact with your infrastructure the way you want to",
    "start": "59879",
    "end": "66360"
  },
  {
    "text": "digital ocean is designed for developers and built for businesses join Over",
    "start": "66360",
    "end": "71840"
  },
  {
    "text": "150,000 businesses that develop manage and scale their applications with digital ocean head to do. changelog to",
    "start": "71840",
    "end": "79439"
  },
  {
    "text": "get started with a $100 credit again do. [Music]",
    "start": "79439",
    "end": "87180"
  },
  {
    "text": "changelog",
    "start": "88840",
    "end": "91840"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "96200",
    "end": "102759"
  },
  {
    "text": "from around the go Community if this is your first time listening make sure you subscribe to the podcast at Chang",
    "start": "102759",
    "end": "108240"
  },
  {
    "text": "log.com gotime there you'll find ways to sub via email RSS Apple podcast Spotify",
    "start": "108240",
    "end": "115159"
  },
  {
    "text": "whatever is your pleasure also follow us on Twitter for live show notifications clips and highlights from past episodes",
    "start": "115159",
    "end": "121600"
  },
  {
    "text": "and a whole lot more we are at gotime FM okay let's talk generics here we",
    "start": "121600",
    "end": "128679"
  },
  {
    "text": "[Music]",
    "start": "130320",
    "end": "135680"
  },
  {
    "text": "go welcome everybody to this edition of go time we have a very special episode",
    "start": "135680",
    "end": "141120"
  },
  {
    "text": "for you today the latest on generics here with us are Robert Grier and Ian",
    "start": "141120",
    "end": "147040"
  },
  {
    "text": "Lance Taylor of Google's go team good afternoon hello everybody and also with",
    "start": "147040",
    "end": "154040"
  },
  {
    "text": "us are our hosts with the mosts Johnny Boro hello and Don Calhoun hey and I",
    "start": "154040",
    "end": "161400"
  },
  {
    "text": "will be running point today I am Carmen Ando and welcome again to go time so I",
    "start": "161400",
    "end": "167720"
  },
  {
    "text": "guess let's start with the updates so we had Ian on here I think it was about",
    "start": "167720",
    "end": "175040"
  },
  {
    "text": "last uh October and discussing what was then the go for presentation given on",
    "start": "175040",
    "end": "181400"
  },
  {
    "text": "templates and since then a new draft proposal has come out so maybe you can",
    "start": "181400",
    "end": "186440"
  },
  {
    "text": "talk a little bit about what that update is in sure uh so uh Robert and I",
    "start": "186440",
    "end": "191760"
  },
  {
    "text": "released the updated design draft for moving forward with generic the biggest change was that we dropped the idea of",
    "start": "191760",
    "end": "199280"
  },
  {
    "text": "contract and uh just decided that instead of having a separate uh syntactic construct which was a contract",
    "start": "199280",
    "end": "207400"
  },
  {
    "text": "that we could just use interface types to describe the contract between the uh",
    "start": "207400",
    "end": "214239"
  },
  {
    "text": "type argument and the type parameter a lot of people looking at contracts had seen that they seemed a lot like",
    "start": "214239",
    "end": "220040"
  },
  {
    "text": "interfaces and people had trouble sort of separating out exactly when you would use a contract and when you would using",
    "start": "220040",
    "end": "225959"
  },
  {
    "text": "an interface so uh we simplified this um and this was I should add almost entirely due to Robert we simplified",
    "start": "225959",
    "end": "232640"
  },
  {
    "text": "this to uh just use interface types and then the second big step we made was we've released a translation tool and a",
    "start": "232640",
    "end": "240439"
  },
  {
    "text": "type Checker so we have a type Checker that works um for the design draft the",
    "start": "240439",
    "end": "245599"
  },
  {
    "text": "description of generics in the design draft so that gives us you know some confidence that what we have uh written",
    "start": "245599",
    "end": "251879"
  },
  {
    "text": "about can actually work and we have a translation tool which translates code into ordinary go the translation tool is",
    "start": "251879",
    "end": "258959"
  },
  {
    "text": "not by any means a final thing there's cases it doesn't handle it's just an experimental tool but it lets people",
    "start": "258959",
    "end": "264400"
  },
  {
    "text": "actually write code that can actually run using generics so we can get a feel for",
    "start": "264400",
    "end": "270199"
  },
  {
    "text": "whether generics actually works for people and whether it actually addresses the issues that they have can you talk a",
    "start": "270199",
    "end": "276880"
  },
  {
    "text": "little bit about what your understanding is based on the feedback so far of what people's issues are when it comes to",
    "start": "276880",
    "end": "284400"
  },
  {
    "text": "either lack of generics or this current draft proposal well a lot of the",
    "start": "284400",
    "end": "290320"
  },
  {
    "text": "feedback has actually been about the syntax which is sort of simultaneously",
    "start": "290320",
    "end": "296160"
  },
  {
    "text": "the least interesting and the most accessible part of The Proposal obviously it's really important to have a good syntax and uh we're really paying",
    "start": "296160",
    "end": "303479"
  },
  {
    "text": "attention to the feedback that people have given we actually now have two possible syntaxes uh implemented in the",
    "start": "303479",
    "end": "309240"
  },
  {
    "text": "translation tool which Robert did and uh beyond that there's the semantics of",
    "start": "309240",
    "end": "314320"
  },
  {
    "text": "course and I think the feedback on the semantics has been quite positive so far people have tried out generics they've",
    "start": "314320",
    "end": "319560"
  },
  {
    "text": "written some pretty extensive pieces of code and I think the feedback we've gotten there have been uniformly",
    "start": "319560",
    "end": "324919"
  },
  {
    "text": "positive Robert do you remember any sort of real concerns at this point no I",
    "start": "324919",
    "end": "329960"
  },
  {
    "text": "think most of the feedback was really based on on syntactic issues and and we tried to address this with this",
    "start": "329960",
    "end": "335960"
  },
  {
    "text": "alternative that we have now and we need to play with this a little bit more and then on the on the semantic side of",
    "start": "335960",
    "end": "341880"
  },
  {
    "text": "course there's not everything ironed out quite yet and we have even mentioned that in the design draft especially when",
    "start": "341880",
    "end": "349000"
  },
  {
    "text": "it comes to type lists and exactly what does it mean to have for instance type parameters in the typ list and things",
    "start": "349000",
    "end": "355319"
  },
  {
    "text": "like that and so we are in the midst of sort of refining that but I don't recall off hand right now",
    "start": "355319",
    "end": "362319"
  },
  {
    "text": "that this was a primary sticking point with feedback from the people yeah no I don't think it is we're trying to sort",
    "start": "362319",
    "end": "368199"
  },
  {
    "text": "of really pin down the real semantics of tpless as Robert said but I we haven't",
    "start": "368199",
    "end": "373319"
  },
  {
    "text": "had much feedback there's been some people wondering about the exact details of embedding a type parameter inside a",
    "start": "373319",
    "end": "380080"
  },
  {
    "text": "struct or an interface which we know we need to decide precisely what it means but it's going to affect almost no one",
    "start": "380080",
    "end": "387039"
  },
  {
    "text": "in terms of actually using generics and practice yes speaking of semantics one",
    "start": "387039",
    "end": "392400"
  },
  {
    "text": "of the things that you did in order to inform this new draft proposal version",
    "start": "392400",
    "end": "398800"
  },
  {
    "text": "is team up with type Theory experts including Philip wadler and you came out with a paper called featherweight go",
    "start": "398800",
    "end": "405440"
  },
  {
    "text": "which I don't understand a word of and I actually am giving a bounty to the entire go Community for anyone who wants",
    "start": "405440",
    "end": "413160"
  },
  {
    "text": "to try to demystify that I know that there is a panel that you were on with Phillip uh trying to talk talk about",
    "start": "413160",
    "end": "419879"
  },
  {
    "text": "that paper and pairing up with that but maybe you can try to demystify fate go",
    "start": "419879",
    "end": "426960"
  },
  {
    "text": "maybe in its Essence for our listeners right now do either of you want to try to take a step at that I I can I can try",
    "start": "426960",
    "end": "435000"
  },
  {
    "text": "maybe not a real step but maybe a little explanation so this cooperation I should",
    "start": "435000",
    "end": "441680"
  },
  {
    "text": "say happened because Rob Pike actually reached out to Phil wler and they you",
    "start": "441680",
    "end": "447360"
  },
  {
    "text": "know they knew each other from way back and filw was interested and then we started talking with fil waterer uh with",
    "start": "447360",
    "end": "454639"
  },
  {
    "text": "Rob Pike he didn't really have time to participate in this but then you know Phil wler Ian Taylor and I started",
    "start": "454639",
    "end": "461520"
  },
  {
    "text": "talking about what we want to do and they have of course a strong background in type Theory uh Phil wler has done",
    "start": "461520",
    "end": "469759"
  },
  {
    "text": "this not the same work of course but similar work many many years ago for",
    "start": "469759",
    "end": "474840"
  },
  {
    "text": "Java and so he's really an expert and so now we have a whole team it's not just just him that have been working on this",
    "start": "474840",
    "end": "482080"
  },
  {
    "text": "fed generic go which is based on go but very very much slim down so we now have",
    "start": "482080",
    "end": "489440"
  },
  {
    "text": "a language that really only has Type declarations and",
    "start": "489440",
    "end": "495319"
  },
  {
    "text": "methods and those type declarations are only interfaces and only structures",
    "start": "495319",
    "end": "501000"
  },
  {
    "text": "structs and the only thing you can have is methods and interfaces of course and methods associated with structs and",
    "start": "501000",
    "end": "507879"
  },
  {
    "text": "inside those methods can only have basically functional single functional expression so it's a very very",
    "start": "507879",
    "end": "514399"
  },
  {
    "text": "simplified language but what you can do is you can invoke a method and in this",
    "start": "514399",
    "end": "519880"
  },
  {
    "text": "paper he explores two situations this fed go which is like the basic go",
    "start": "519880",
    "end": "525839"
  },
  {
    "text": "simplified go without any generics and then the fedway generic go which is that",
    "start": "525839",
    "end": "531880"
  },
  {
    "text": "basic simplified go extended with generic features and those generic features are very much modeled along the",
    "start": "531880",
    "end": "539240"
  },
  {
    "text": "draft design with the exception of type lists so there's type",
    "start": "539240",
    "end": "545120"
  },
  {
    "text": "parameters as in the draft design the type parameters have what in the paper is called type bounds we call them now",
    "start": "545120",
    "end": "553360"
  },
  {
    "text": "constraints and they're interfaces there also interfaces in the paper and they",
    "start": "553360",
    "end": "558560"
  },
  {
    "text": "basically model you know in a very very simplified fashion what the design draft",
    "start": "558560",
    "end": "563800"
  },
  {
    "text": "is trying to do with real go and the goal of this paper is to prove Pro first",
    "start": "563800",
    "end": "569760"
  },
  {
    "text": "of all that this is a sensible design in the sense that the type system that",
    "start": "569760",
    "end": "574920"
  },
  {
    "text": "we're creating here is uh sound you cannot create situations where you could",
    "start": "574920",
    "end": "581320"
  },
  {
    "text": "write a program that would be unsound in terms of the type system and then also they try to prove and have proven that",
    "start": "581320",
    "end": "588600"
  },
  {
    "text": "it is possible to translate such a generic go simplified generic go program into a regular go program through a",
    "start": "588600",
    "end": "596000"
  },
  {
    "text": "process which is called monomorph isation basically expanding everything",
    "start": "596000",
    "end": "601959"
  },
  {
    "text": "for every possible instantiation of these generic functions and types and",
    "start": "601959",
    "end": "607600"
  },
  {
    "text": "then they Pro that you know these programs are basically equivalent so that's kind of the gist of this paper and this gives us very strong confidence",
    "start": "607600",
    "end": "615399"
  },
  {
    "text": "that we're not a know designing somewhere into the blue and and B that",
    "start": "615399",
    "end": "620440"
  },
  {
    "text": "what we're designing actually makes sense from a type system point of view we're not going to hopefully find",
    "start": "620440",
    "end": "627160"
  },
  {
    "text": "problems down the road where we have some you know internal inconsistency so I think that's really the the benefit",
    "start": "627160",
    "end": "633760"
  },
  {
    "text": "and I think it really helped us also understand a little bit better what it means to have interfaces as",
    "start": "633760",
    "end": "641440"
  },
  {
    "text": "constraints and how we need to you know type check this so I think there is a",
    "start": "641440",
    "end": "646839"
  },
  {
    "text": "real Synergy here very cool and would you say because of the partnership it",
    "start": "646839",
    "end": "651920"
  },
  {
    "text": "helped you understand some of the semantics better in terms of how it informed the newest draft proposal oh",
    "start": "651920",
    "end": "659160"
  },
  {
    "text": "absolutely I I think we had a prototype part of a prototype working before you",
    "start": "659160",
    "end": "664959"
  },
  {
    "text": "know this paper was complete and in the process there's of course all kinds of questions and and what we sort of",
    "start": "664959",
    "end": "670920"
  },
  {
    "text": "invented at hoc they basically did in parallel independently and then when we",
    "start": "670920",
    "end": "675959"
  },
  {
    "text": "started talking to each other especially when we went through the individual steps in the paper we we could basically",
    "start": "675959",
    "end": "682800"
  },
  {
    "text": "verify that our thinking was matching their thinking and vice versa so our ad hoc sort of design that was maybe more",
    "start": "682800",
    "end": "690279"
  },
  {
    "text": "based on what seemed to be the right thing to do and not so much from a",
    "start": "690279",
    "end": "695720"
  },
  {
    "text": "driven by a mathematical background uh matches and so that's that's great so that means we're not doing something",
    "start": "695720",
    "end": "701760"
  },
  {
    "text": "weird Phil wler actually took the time himself to to walk us through the the",
    "start": "701760",
    "end": "707920"
  },
  {
    "text": "paper in detail and this is how you know ours understanding of the paper came",
    "start": "707920",
    "end": "714000"
  },
  {
    "text": "about I'm not a type Theory person and so uh I now feel like okay I have some",
    "start": "714000",
    "end": "719920"
  },
  {
    "text": "sort of idea how to read the math but I I wouldn't clar I I should add that you",
    "start": "719920",
    "end": "725639"
  },
  {
    "text": "know my name is on the paper but I have no claim to understanding the paper at all okay all right you've heard it here",
    "start": "725639",
    "end": "732000"
  },
  {
    "text": "folks that it's not just you even Ian and Robert you know had a really hard time with the featherweight go paper and",
    "start": "732000",
    "end": "739480"
  },
  {
    "text": "all that math notation this is funny Let me let me add that um they really helped us uh with the move away from contracts",
    "start": "739480",
    "end": "746560"
  },
  {
    "text": "and toward interface types they pushed Us in that direction as Robert did as well and so it helped",
    "start": "746560",
    "end": "752360"
  },
  {
    "text": "make clear that it would be equally powerful and uh that it would be usable it's worth noting that there is a um a",
    "start": "752360",
    "end": "759639"
  },
  {
    "text": "YouTube video of a Phil actually um walking through portions of this as well",
    "start": "759639",
    "end": "764680"
  },
  {
    "text": "and uh I attempted to read the paper I couldn't get very far but I did",
    "start": "764680",
    "end": "769880"
  },
  {
    "text": "watch the video and and he did an excellent job of sort of walking through some of the key Concepts there um I",
    "start": "769880",
    "end": "775680"
  },
  {
    "text": "believe there is a plan for sort of an expanding on the ideas of feather weight go and uh I believe there's a bent to",
    "start": "775680",
    "end": "783639"
  },
  {
    "text": "weight or and some some other implementations coming down the road as well um these things are I imagine are",
    "start": "783639",
    "end": "789360"
  },
  {
    "text": "sort of a going to build on sort of foundation you have now to sort of uh try and figure out okay what else",
    "start": "789360",
    "end": "794959"
  },
  {
    "text": "haven't we thought of right with the gross generics and go is that correct yeah that's exactly right they're going",
    "start": "794959",
    "end": "800760"
  },
  {
    "text": "to try to add I mean as as Robert said f the way go really it's very very limited so they're going to try to add other",
    "start": "800760",
    "end": "806959"
  },
  {
    "text": "features of go in and make sure that uh it's still you know the type system is still sound and the generic system is",
    "start": "806959",
    "end": "813320"
  },
  {
    "text": "still sound which we think it will be but you know it will be very interesting to see what they come up with something",
    "start": "813320",
    "end": "818600"
  },
  {
    "text": "you mentioned earlier um was that the some of the feedback was uh somewhat",
    "start": "818600",
    "end": "823920"
  },
  {
    "text": "superficial in terms limited really only to sort of the syntax um obviously there's a lot more under the hood that",
    "start": "823920",
    "end": "829880"
  },
  {
    "text": "really must be solved in order to really have a sort of consistent implementation but to do that some justice um you have",
    "start": "829880",
    "end": "836959"
  },
  {
    "text": "folks that are sort of familiar with the um common utilization of angled brackets right as sort of the way of specifying",
    "start": "836959",
    "end": "843519"
  },
  {
    "text": "the generic types and whatnot and you know people are scratching their heads well you know like why first it was",
    "start": "843519",
    "end": "848560"
  },
  {
    "text": "parentheses now thinking about you know square brackets why can't we just you know do angle brackets what's the",
    "start": "848560",
    "end": "854079"
  },
  {
    "text": "problem right so maybe if you can just kind of explain sort of the the dangers",
    "start": "854079",
    "end": "859240"
  },
  {
    "text": "right of trying to put that into a go right now maybe that address some some of those arity feedback so Robert had a",
    "start": "859240",
    "end": "865320"
  },
  {
    "text": "really good example in the email he sent out about square brackets showing a case where you really can't parse",
    "start": "865320",
    "end": "873040"
  },
  {
    "text": "angle brackets uh if you don't know whether you're looking at a um generic",
    "start": "873040",
    "end": "879160"
  },
  {
    "text": "function or type or whether you're looking at a pair of Expressions that happen to have a comma in the middle",
    "start": "879160",
    "end": "884800"
  },
  {
    "text": "because it's some kind of multiple assignment so it's just um that's just sort of a fundamentally ambiguous syntax",
    "start": "884800",
    "end": "892399"
  },
  {
    "text": "Robert do you want to talk about the importance of parsing without uh type checking sure so so you know even in um",
    "start": "892399",
    "end": "900959"
  },
  {
    "text": "existing go we have some situations where we do not know at T time what we have like the the classical example is",
    "start": "900959",
    "end": "907680"
  },
  {
    "text": "if you have a conversion or a function call with exactly one argument so if you say f ofx is this a function call or is",
    "start": "907680",
    "end": "915120"
  },
  {
    "text": "it a conversion we do not know at par time but it doesn't matter because we can build the syntax tree at par time",
    "start": "915120",
    "end": "922959"
  },
  {
    "text": "that's the only thing that matters and that syntax tree that has a a functor you know maybe maybe it's a type in a",
    "start": "922959",
    "end": "929959"
  },
  {
    "text": "conversion and the list of arguments that's all we need and that's the same",
    "start": "929959",
    "end": "935040"
  },
  {
    "text": "for a function called aype conversion and then at type checking time we can look at this functor and see is it a",
    "start": "935040",
    "end": "944120"
  },
  {
    "text": "type well then it must be a type conversion or if it's a function then well it must be a function so that's all",
    "start": "944120",
    "end": "949639"
  },
  {
    "text": "Jolly the problem with the angle brackets is that at pars time you cannot",
    "start": "949639",
    "end": "955639"
  },
  {
    "text": "even know how to create the syntax Tree in in this specific case um especially in this example that I that we've given",
    "start": "955639",
    "end": "963079"
  },
  {
    "text": "in the mail we don't know how to parse this so we don't know how to build a syntax tree and that means there's just",
    "start": "963079",
    "end": "970279"
  },
  {
    "text": "no way forward to resolve this one way to go forward would be if we had type",
    "start": "970279",
    "end": "975880"
  },
  {
    "text": "information at par time and in languages such as C++ where they use angle",
    "start": "975880",
    "end": "982800"
  },
  {
    "text": "brackets for templates there is symbol information at pars time and the par",
    "start": "982800",
    "end": "988160"
  },
  {
    "text": "needs that to make the right decision but that also means that everything that you will use at the particular place",
    "start": "988160",
    "end": "994519"
  },
  {
    "text": "needs to be already declared at that point and so in C++ you need to make",
    "start": "994519",
    "end": "999839"
  },
  {
    "text": "sure that everything that you're using in an expression has been declared before some way or another maybe with a",
    "start": "999839",
    "end": "1005920"
  },
  {
    "text": "forward Declaration of sorts in go we cannot do this because well we could but",
    "start": "1005920",
    "end": "1011560"
  },
  {
    "text": "we don't have forward declarations in go and we don't want them in the very very very very first version of go that's",
    "start": "1011560",
    "end": "1018040"
  },
  {
    "text": "never SE SE in the day of light there was actually forward declarations but we got rid of them pretty quickly uh in go",
    "start": "1018040",
    "end": "1024558"
  },
  {
    "text": "you can have a package that is spanning multiple files and so if you refer to a",
    "start": "1024559",
    "end": "1030720"
  },
  {
    "text": "function in one file that function may not even be declared yet it may show up at the very end of the last file that",
    "start": "1030720",
    "end": "1037160"
  },
  {
    "text": "the parer is going to see so there's just no way to have this information available and so without that",
    "start": "1037160",
    "end": "1042880"
  },
  {
    "text": "information we cannot it's just not parsible and there's no way around it and so angle brackets as is right now",
    "start": "1042880",
    "end": "1049120"
  },
  {
    "text": "they're just it cannot work so it's not like we don't want to do it or we don't like them it's just cannot work with the",
    "start": "1049120",
    "end": "1055480"
  },
  {
    "text": "go as it is right [Music]",
    "start": "1055480",
    "end": "1071710"
  },
  {
    "text": "now change log news is the best way to keep up with the fast moving software",
    "start": "1071720",
    "end": "1077080"
  },
  {
    "text": "world we track log and contextualize the coolest projects the best practices and",
    "start": "1077080",
    "end": "1083559"
  },
  {
    "text": "the biggest stories each and every week make changel law.com your daily destination or hit this snooze button",
    "start": "1083559",
    "end": "1090000"
  },
  {
    "text": "and subscribe to our Weekly Newsletter that hits inboxes on Sunday mornings join more than 15,000 enthusiastic",
    "start": "1090000",
    "end": "1097080"
  },
  {
    "text": "readers it'll cost you exactly $0 and you can subscribe right now at chains.com",
    "start": "1097080",
    "end": "1104679"
  },
  {
    "text": "weekly [Music] so the email that Robert is referring to",
    "start": "1107320",
    "end": "1114320"
  },
  {
    "text": "is rather a discussion thread on gooling nuts and it is one of the most recent and it's an addendum to the draft",
    "start": "1114320",
    "end": "1120880"
  },
  {
    "text": "proposal where syntax feedback had been received and a new addition was adding",
    "start": "1120880",
    "end": "1127679"
  },
  {
    "text": "parentheses so now it's a case of getting feedback from the community about whether are the preferences for",
    "start": "1127679",
    "end": "1133520"
  },
  {
    "text": "square brackets versus parentheses Robert and what are some of the",
    "start": "1133520",
    "end": "1139240"
  },
  {
    "text": "trade-offs for either or of these in your minds so I'd say that the advantage",
    "start": "1139240",
    "end": "1144440"
  },
  {
    "text": "of parentheses I think is that um type parameters really are parameters and",
    "start": "1144440",
    "end": "1150919"
  },
  {
    "text": "type arguments really are arguments and so it makes sense to use a Syntax for",
    "start": "1150919",
    "end": "1156240"
  },
  {
    "text": "type parameters it's similar to the Syntax for regular non-type parameters and the current in code that current",
    "start": "1156240",
    "end": "1162360"
  },
  {
    "text": "syntax is parentheses so it makes sense to use parentheses and I find the uh result to be it sort of feels natural to",
    "start": "1162360",
    "end": "1169000"
  },
  {
    "text": "me at least and uh it reads well so the disadvantage is uh in a complex generic",
    "start": "1169000",
    "end": "1175679"
  },
  {
    "text": "function you can have lots of parentheses flying around you can have a you know you can have type parameters",
    "start": "1175679",
    "end": "1181520"
  },
  {
    "text": "you can have regular parameters you can have result parameters they're all parenthesize lists it can get a little hard to see exactly what's going on also",
    "start": "1181520",
    "end": "1189360"
  },
  {
    "text": "in a call at the call site sometimes you pass type arguments sometimes you don't",
    "start": "1189360",
    "end": "1194400"
  },
  {
    "text": "and uh it can be a little unclear again exactly what's going on on like if you had a new function the new function",
    "start": "1194400",
    "end": "1201080"
  },
  {
    "text": "might take a type and then you'd have to have another set of parentheses for regular parameters and so there's some",
    "start": "1201080",
    "end": "1207600"
  },
  {
    "text": "potential confusion there is also uh We've discovered uh certain ambiguities with parsing when using parentheses not",
    "start": "1207600",
    "end": "1215080"
  },
  {
    "text": "common cases but cases that do arise in real code there were cases where it was ambiguous when you referred to an",
    "start": "1215080",
    "end": "1222080"
  },
  {
    "text": "instantiated type or an instantiated function and it was hard to know exactly",
    "start": "1222080",
    "end": "1228600"
  },
  {
    "text": "uh what was going on like a simple example would be an embedded field inside a struct you can embed an instantiate to type in a struct it's not",
    "start": "1228600",
    "end": "1235320"
  },
  {
    "text": "really clear whether you're embedding a type in a struct or whether you're um doing some other kind of operation there",
    "start": "1235320",
    "end": "1241640"
  },
  {
    "text": "so square brackets by comparison there's still a a list syntax so now type",
    "start": "1241640",
    "end": "1247600"
  },
  {
    "text": "parameters and parameters don't look the same which for many people is an advantage but you know for some people",
    "start": "1247600",
    "end": "1252679"
  },
  {
    "text": "it's a disadvantage and then um there's seem to be at least so far fewer parsing",
    "start": "1252679",
    "end": "1257799"
  },
  {
    "text": "ambig duties when using square brackets and I I don't have a good feel right now",
    "start": "1257799",
    "end": "1263120"
  },
  {
    "text": "for sort of the sentiment of the broader go Community there are definitely people who like parentheses and definitely",
    "start": "1263120",
    "end": "1269080"
  },
  {
    "text": "people who like square brackets I don't have a clear sense as to one clearly being better than the other but I have",
    "start": "1269080",
    "end": "1275159"
  },
  {
    "text": "seen a lot of people saying that either could work that they don't have any big",
    "start": "1275159",
    "end": "1280320"
  },
  {
    "text": "objections do you have anything to add Robert uh no I think that's an accurate description I think we can confidently",
    "start": "1280320",
    "end": "1287760"
  },
  {
    "text": "say that the square brackets don't have the ambiguities at this point that we've",
    "start": "1287760",
    "end": "1293240"
  },
  {
    "text": "seen with the parentheses and we did not know this in the beginning um we only",
    "start": "1293240",
    "end": "1298960"
  },
  {
    "text": "found out after writing that code where we ran into problems but we decided to",
    "start": "1298960",
    "end": "1305000"
  },
  {
    "text": "stick with the parentheses because we wanted to make progress on all the other fronts and the reason for this",
    "start": "1305000",
    "end": "1312200"
  },
  {
    "text": "alternative uh now is that we revisiting this decision so we we can make uh sure",
    "start": "1312200",
    "end": "1319360"
  },
  {
    "text": "that at the end we have looked at all the Alternatives so anecdotally from what",
    "start": "1319360",
    "end": "1325360"
  },
  {
    "text": "I've seen and the Twitter verse and the feeds and and all these things I think there's a p towards the square brackets",
    "start": "1325360",
    "end": "1332080"
  },
  {
    "text": "from what I hear um most think it's uh more readily apparent what is going on",
    "start": "1332080",
    "end": "1337480"
  },
  {
    "text": "um when you look at the code you don't have to sort of do a double take okay what's applying to the parentheses here",
    "start": "1337480",
    "end": "1342640"
  },
  {
    "text": "and like we can more easily very quickly sort of figure out okay this has to do with the gener type and everything else",
    "start": "1342640",
    "end": "1349039"
  },
  {
    "text": "is is what I would expect so basically that's that's my two cents there from from what I'm seeing from the feedback",
    "start": "1349039",
    "end": "1354320"
  },
  {
    "text": "from the community so far great thanks so I do have one question on that have you guys talked with developers of like",
    "start": "1354320",
    "end": "1362120"
  },
  {
    "text": "idees or like syntax highlighting type tools that people use to see if any of",
    "start": "1362120",
    "end": "1367919"
  },
  {
    "text": "them have feedback on this sort of thing like an example is jet brains since they have goand I assume that maybe they'd",
    "start": "1367919",
    "end": "1373600"
  },
  {
    "text": "have some feedback on which one is easier to sort of make obvious inside the editor where people are actually",
    "start": "1373600",
    "end": "1378679"
  },
  {
    "text": "coding so have you had a chance to talk to people who are developing tools like that to get their feedback well we have",
    "start": "1378679",
    "end": "1384919"
  },
  {
    "text": "talked to um the people who developed the go please language plugin and um from their point of view I don't think",
    "start": "1384919",
    "end": "1391799"
  },
  {
    "text": "it matters that much because as they're just hooking into the parser and the parser does support both cases and the",
    "start": "1391799",
    "end": "1399240"
  },
  {
    "text": "parser is just going to feed back to them what the code looks like and so they didn't have much trouble adding",
    "start": "1399240",
    "end": "1404840"
  },
  {
    "text": "parentheses support and they they've just recently added square bracket support to go pleas is an experimental thing so I think at least at that level",
    "start": "1404840",
    "end": "1412799"
  },
  {
    "text": "hasn't been a problem we haven't talked to Jet brins though that's a it's a good idea so more practically for the go",
    "start": "1412799",
    "end": "1420760"
  },
  {
    "text": "Community when do you think that you're going to get this enough feedback to",
    "start": "1420760",
    "end": "1426080"
  },
  {
    "text": "move forward with moving from a draft proposal to actually putting it forth as",
    "start": "1426080",
    "end": "1431480"
  },
  {
    "text": "a proposal should change in the language yeah we don't have any timelines in mind",
    "start": "1431480",
    "end": "1437279"
  },
  {
    "text": "I'd say as we mentioned earlier we're still trying to pin down some of the precise semantics which I don't think is",
    "start": "1437279",
    "end": "1444320"
  },
  {
    "text": "going to affect any existing code effect I'm sure it's not going to affect any existing code we want to make sure that",
    "start": "1444320",
    "end": "1449400"
  },
  {
    "text": "we understand it we want to make sure that you know the multiple go compilers will implement the same thing we're",
    "start": "1449400",
    "end": "1455159"
  },
  {
    "text": "going to have to have some sense of how to add to the language spec so those are the steps we're looking at now I mean",
    "start": "1455159",
    "end": "1461520"
  },
  {
    "text": "we're certainly going to move forward as fast as we can toward making a formal proposal of course at that time none of",
    "start": "1461520",
    "end": "1466960"
  },
  {
    "text": "it will be a surprise people have seen all of the ideas already and uh we'll just have to see how it flies so far I",
    "start": "1466960",
    "end": "1473600"
  },
  {
    "text": "feel like the reaction's been largely positive which is encouraging but I don't know exactly what the timeline's",
    "start": "1473600",
    "end": "1479679"
  },
  {
    "text": "going to be what kinds of feedback at this point are you Robert and Ian",
    "start": "1479679",
    "end": "1486520"
  },
  {
    "text": "looking for oh I I think we want to see things that don't work you know and that",
    "start": "1486520",
    "end": "1493760"
  },
  {
    "text": "you would expect to work and we definitely have seen some of these things which tended to be just buck in",
    "start": "1493760",
    "end": "1499720"
  },
  {
    "text": "our prototype and we have spent some time fixing those bux and we have slowed",
    "start": "1499720",
    "end": "1504919"
  },
  {
    "text": "down a little bit on that because it's just a prototype and at some point you have to make a call as to how much time you want to spend on that and making",
    "start": "1504919",
    "end": "1511919"
  },
  {
    "text": "progress elsewhere but yeah generally I think we would like to know can you write the kind of generic code that you",
    "start": "1511919",
    "end": "1517760"
  },
  {
    "text": "expect to be writing with this design and if not you know why not let us know",
    "start": "1517760",
    "end": "1525200"
  },
  {
    "text": "is there things that you expect to be working but they don't and you know are",
    "start": "1525200",
    "end": "1530799"
  },
  {
    "text": "they fundamental to our design and if so you know is there something we need to do uh these are kind of the I think",
    "start": "1530799",
    "end": "1538000"
  },
  {
    "text": "important questions that we should try to answer ASAP because once we have something more firm it's going to be",
    "start": "1538000",
    "end": "1544760"
  },
  {
    "text": "very hard to make these changes later if not impossible yeah I totally agree and I'd say you know is there anything you",
    "start": "1544760",
    "end": "1551320"
  },
  {
    "text": "find surprising if you're looking at code that's written using generics you read that code is there anything that",
    "start": "1551320",
    "end": "1557200"
  },
  {
    "text": "just like you just say like I don't get it or it just doesn't act the way I expected it to act that kind of feedback",
    "start": "1557200",
    "end": "1563320"
  },
  {
    "text": "would be extremely useful were there any specifics that you guys wanted to avoid supporting like do other languages have",
    "start": "1563320",
    "end": "1570559"
  },
  {
    "text": "something in generics that you like looked at and decided this isn't something we want to support or you know",
    "start": "1570559",
    "end": "1576919"
  },
  {
    "text": "maybe it's just like a really obscure use case or something well my favorite example is that C++ templates are in",
    "start": "1576919",
    "end": "1583000"
  },
  {
    "text": "fact a touring complete language in and of themselves which is really cool and we decided we absolutely did not want to",
    "start": "1583000",
    "end": "1589880"
  },
  {
    "text": "support that in any way whatsoever and one of the things that I thought I happen to know about both of",
    "start": "1589880",
    "end": "1596000"
  },
  {
    "text": "you is that you have extensive experience in generics coming from other languages so uh Ian you were on the C++",
    "start": "1596000",
    "end": "1602760"
  },
  {
    "text": "readability team at Google when you famously saw a spec for the go language",
    "start": "1602760",
    "end": "1608720"
  },
  {
    "text": "and wrote a compiler for it I think and Robert you were on the va8 team that was",
    "start": "1608720",
    "end": "1614720"
  },
  {
    "text": "writing uh VM for Java so are there anything things from those",
    "start": "1614720",
    "end": "1620720"
  },
  {
    "text": "lenses of experience where you kind of want to make sure you prevent and I'm specifically trying to get the angle",
    "start": "1620720",
    "end": "1627360"
  },
  {
    "text": "here of the naysayers who say generics are going to add complexity to the language what is your experience about",
    "start": "1627360",
    "end": "1633960"
  },
  {
    "text": "keeping that complexity at Bay in this proposal so just to clarify I was",
    "start": "1633960",
    "end": "1639440"
  },
  {
    "text": "working on V8 in the very beginning for maybe barely a year I didn't really do",
    "start": "1639440",
    "end": "1645760"
  },
  {
    "text": "anything with generics in V8 so you know I was on the implementation side U my",
    "start": "1645760",
    "end": "1651559"
  },
  {
    "text": "experience with generics was maybe C++ with templates and probably the highest",
    "start": "1651559",
    "end": "1657600"
  },
  {
    "text": "point there was when I was able to as as Ian alluded to before it's t in complete I was able to write a program using C++",
    "start": "1657600",
    "end": "1666080"
  },
  {
    "text": "templates that would decide whether a constant was a prime number or not and the compiler would decide it at compile",
    "start": "1666080",
    "end": "1672000"
  },
  {
    "text": "time so that's not the kind of thing we would like to support with respect to to",
    "start": "1672000",
    "end": "1677720"
  },
  {
    "text": "you know what what I'd like to see or not see is honestly I'm I'm worried",
    "start": "1677720",
    "end": "1682960"
  },
  {
    "text": "about the kind of code that people are going to write I mean there's no question about that and we see some of",
    "start": "1682960",
    "end": "1689120"
  },
  {
    "text": "the examples that people send us that cause crashes in the Prototype and they're just unbelievably convoluted and",
    "start": "1689120",
    "end": "1695720"
  },
  {
    "text": "really really hard to decipher but as other people have pointed out those people are really pushing the envelope",
    "start": "1695720",
    "end": "1702159"
  },
  {
    "text": "they're trying to just see what can I do with this thing and I hope this is not going to be you know the kind of code",
    "start": "1702159",
    "end": "1707840"
  },
  {
    "text": "that people are going to write down the road I think one of the first things we need to do if we have this for real we",
    "start": "1707840",
    "end": "1713519"
  },
  {
    "text": "need to come up with a kind of best practices guide that guides everybody a",
    "start": "1713519",
    "end": "1720360"
  },
  {
    "text": "little bit as to how you should use generics and when you should use them and when you should not use them very",
    "start": "1720360",
    "end": "1725679"
  },
  {
    "text": "similar to what we developed for uh you know go routines and channels in the in",
    "start": "1725679",
    "end": "1731080"
  },
  {
    "text": "the early days of go everybody was using go routines and challs for everything and it took a little while for us to",
    "start": "1731080",
    "end": "1737000"
  },
  {
    "text": "learn where it was appropriate and where it wasn't I agree completely and I'll add that I think that one of the things",
    "start": "1737000",
    "end": "1743240"
  },
  {
    "text": "we've been really focusing on during this whole you know multi-year process is to uh avoid the complexity that",
    "start": "1743240",
    "end": "1750720"
  },
  {
    "text": "exists in C++ into a somewhat lesser extent in Java because those languages are very powerful and at the same time",
    "start": "1750720",
    "end": "1758720"
  },
  {
    "text": "they can lead to code that people find difficult to understand and we just that's just not a good fit for go I mean",
    "start": "1758720",
    "end": "1764960"
  },
  {
    "text": "and partly it's because they are languages that are much more object-oriented than go is that have U",
    "start": "1764960",
    "end": "1770519"
  },
  {
    "text": "inheritance built into the language and therefore they have to reflect inheritance in their implementation of",
    "start": "1770519",
    "end": "1775880"
  },
  {
    "text": "generics which then leads to considerable complexity and understanding you know how do you choose",
    "start": "1775880",
    "end": "1782279"
  },
  {
    "text": "the exact type that's going to be used to instantiate this C++ template and then they also have overloading so you",
    "start": "1782279",
    "end": "1788720"
  },
  {
    "text": "have to do overload resolution these are all really powerful techniques that let people write quite compact code that can",
    "start": "1788720",
    "end": "1796720"
  },
  {
    "text": "uh be extremely effective but at the same time you know novices come in and they just don't understand exactly which",
    "start": "1796720",
    "end": "1802960"
  },
  {
    "text": "type is going to be used so we wanted to make sure that we avoided that as much as possible we wanted to be very clear",
    "start": "1802960",
    "end": "1809120"
  },
  {
    "text": "exactly uh how a generic function or type was going to be instantiated what the Tope arguments were going to be it's",
    "start": "1809120",
    "end": "1817399"
  },
  {
    "text": "just like in you know we saw with the girl routines and there the overuse you know channels for everything I mean it",
    "start": "1817399",
    "end": "1823480"
  },
  {
    "text": "was kind of crazy there in the beginning but I'm letting you know right now you you are going to see that surge there is",
    "start": "1823480",
    "end": "1828799"
  },
  {
    "text": "going to be that Spike where everybody wants to use generics for everything under the sun and then you know we're",
    "start": "1828799",
    "end": "1834320"
  },
  {
    "text": "going to start sort of walking that back and sort of developing the best practices I'd definitely like to see sort of some leadership from the go team",
    "start": "1834320",
    "end": "1841039"
  },
  {
    "text": "on that maybe you know an expansion of effective go right on the go blog and and adding some of the ways to sort of a",
    "start": "1841039",
    "end": "1847679"
  },
  {
    "text": "caution right to to provide along with that says hey this is really the best use for this and whatnot so and",
    "start": "1847679",
    "end": "1853720"
  },
  {
    "text": "obviously I think a lot of the community members are are probably going to be step stepping up and writing blog post and sort of showing you know the dos and",
    "start": "1853720",
    "end": "1860240"
  },
  {
    "text": "don'ts and that kind of thing so it's definitely not not all on the shoulders of the go team but you know it is something that I think it is to be",
    "start": "1860240",
    "end": "1866559"
  },
  {
    "text": "expected like any new toy everybody's going to try and abuse it but it's all in the spirit of implementation right I",
    "start": "1866559",
    "end": "1872360"
  },
  {
    "text": "think we are going to sort of develop best practices around what should your generic code look like for production",
    "start": "1872360",
    "end": "1878399"
  },
  {
    "text": "system right for when you're the one who steps away from it and somebody else has to step in and take it understand and and read what is going on right I think",
    "start": "1878399",
    "end": "1885480"
  },
  {
    "text": "that's something that that is going to come I hope yeah yeah I think one of the",
    "start": "1885480",
    "end": "1890720"
  },
  {
    "text": "things that go that I really like about the go culture is that we have managed",
    "start": "1890720",
    "end": "1897480"
  },
  {
    "text": "complexity our idioms through the culture right we have absorbed values of",
    "start": "1897480",
    "end": "1903279"
  },
  {
    "text": "Simplicity and that we can continue to do so for generic go and I think that",
    "start": "1903279",
    "end": "1908799"
  },
  {
    "text": "will be a big part in whether we keep complexity at Bay not necessarily the",
    "start": "1908799",
    "end": "1914960"
  },
  {
    "text": "technical enforcement but the idiomatic SL cultural enforcement and we've talked",
    "start": "1914960",
    "end": "1920039"
  },
  {
    "text": "about idioms as culture on this show before and so it's kind of interesting to see it play out with",
    "start": "1920039",
    "end": "1926720"
  },
  {
    "text": "generics so one of the questions that we had was a forward-looking question and",
    "start": "1926720",
    "end": "1932559"
  },
  {
    "text": "it's assuming that this is going to be a proposal that gets ratified and and put into the language are there any plans",
    "start": "1932559",
    "end": "1940279"
  },
  {
    "text": "for managing The Surge of feature requests for the standard library now that generic data structures and",
    "start": "1940279",
    "end": "1946600"
  },
  {
    "text": "algorithms are possible are you going to let that happen in the ecosystem uh that's a great question are",
    "start": "1946600",
    "end": "1953360"
  },
  {
    "text": "there any plans I'd say no there are not at this point any plans uh but there will be plans the experimental",
    "start": "1953360",
    "end": "1959000"
  },
  {
    "text": "translation tool does come with a tiny little set of sample libraries and so",
    "start": "1959000",
    "end": "1964799"
  },
  {
    "text": "when I wrote those I viewed those as kind of prototypes for uh what we might",
    "start": "1964799",
    "end": "1969880"
  },
  {
    "text": "want to add to the standard Library going forward I don't think they're great examples or anything but I think",
    "start": "1969880",
    "end": "1975200"
  },
  {
    "text": "that they can sort of show areas where we might want to add new standard Library packages and um show",
    "start": "1975200",
    "end": "1982919"
  },
  {
    "text": "you know possible implementations subject to uh people really looking at them and making sure they make sense I",
    "start": "1982919",
    "end": "1990200"
  },
  {
    "text": "don't expect there to be a lot of additions to the existing standard",
    "start": "1990200",
    "end": "1995240"
  },
  {
    "text": "Library packages there might be a few but most of the existing standard Library packages were written without generics and they work fine and so yeah",
    "start": "1995240",
    "end": "2003120"
  },
  {
    "text": "there may be a lot of people saying what's that generics here but you know the truth is they work already and we don't need to add generics there I think",
    "start": "2003120",
    "end": "2008960"
  },
  {
    "text": "it's more going to be a matter of adding some new packages to really take advantage of um generics like the",
    "start": "2008960",
    "end": "2016720"
  },
  {
    "text": "translation tool for example has a slices package which has various slices functions that operate on slices of any",
    "start": "2016720",
    "end": "2023360"
  },
  {
    "text": "types and it has a chance package that operate on channels of any type this is the kind of code which we aren't able to",
    "start": "2023360",
    "end": "2029000"
  },
  {
    "text": "write with go today but we are able to write with generics and so I feel like that's going to be where we're going to",
    "start": "2029000",
    "end": "2034279"
  },
  {
    "text": "add to the standard Li we're not going to be moving fast on any of this for sure but you're right",
    "start": "2034279",
    "end": "2039960"
  },
  {
    "text": "that we should uh develop some kind of framework for how we're going to add [Music]",
    "start": "2039960",
    "end": "2053760"
  },
  {
    "text": "packages practical AI is a weekly podcast that's making artificial intelligence practical productive and",
    "start": "2053760",
    "end": "2061520"
  },
  {
    "text": "accessible to everyone if the world of AI affects your daily life this show is",
    "start": "2061520",
    "end": "2066638"
  },
  {
    "text": "for you from the practitioner wanting to keep up with the latest tools and Trends",
    "start": "2066639",
    "end": "2071960"
  },
  {
    "text": "Spacey is really a library that lets you put together a whole NP pipeline of the different things you might want to do um",
    "start": "2071960",
    "end": "2078440"
  },
  {
    "text": "and extract from your text you know you're not just interested in predicting one thing you might want to read in your text you want to find the individual",
    "start": "2078440",
    "end": "2084760"
  },
  {
    "text": "sentences you want to find out which concepts are mentioned in the text like which person names organizations dates",
    "start": "2084760",
    "end": "2092240"
  },
  {
    "text": "and then you also maybe want to predict something about like what's in the text to the AI curious trying to understand",
    "start": "2092240",
    "end": "2098400"
  },
  {
    "text": "the concepts at play and their implications on our lives would you rather be spending your time improving",
    "start": "2098400",
    "end": "2104839"
  },
  {
    "text": "your blue score by 0.1 on French to English or would you rather have a",
    "start": "2104839",
    "end": "2110800"
  },
  {
    "text": "breakthrough on kind of that underresourced language that by the way has 350 million people using it in",
    "start": "2110800",
    "end": "2119040"
  },
  {
    "text": "underprivileged areas around the world here's your expert hosts my name is",
    "start": "2119040",
    "end": "2124079"
  },
  {
    "text": "Chris Benson I am a principal AI strategist Lockheed Martin and with me as always is Daniel whack a data",
    "start": "2124079",
    "end": "2131200"
  },
  {
    "text": "scientist with s International hey how's it going today Daniel please listen to a recent episode And subscribe today we'd",
    "start": "2131200",
    "end": "2137920"
  },
  {
    "text": "love to have you as a [Music]",
    "start": "2137920",
    "end": "2150520"
  },
  {
    "text": "listener so one of our listeners in the uh slack had asked while you're",
    "start": "2150520",
    "end": "2155920"
  },
  {
    "text": "collecting feedback is there a good time or like a good expectation for measuring how build",
    "start": "2155920",
    "end": "2162800"
  },
  {
    "text": "speed changes over time um especially now that things are experimental I assume that it's not really fair to assume that that's exactly how things",
    "start": "2162800",
    "end": "2169800"
  },
  {
    "text": "are going to be whenever it actually ships so what should people expect and when's the right time to give feedback",
    "start": "2169800",
    "end": "2175480"
  },
  {
    "text": "on that okay that's a great question yeah the experimental tool has no",
    "start": "2175480",
    "end": "2180560"
  },
  {
    "text": "similarity whatsoever to any real implementation so we know it's slow and uh it's going to be slow and that just",
    "start": "2180560",
    "end": "2187599"
  },
  {
    "text": "inevitable if this does move forward to become a proposal and it gets accepted then we most likely the implementation",
    "start": "2187599",
    "end": "2194520"
  },
  {
    "text": "will be to start with a branch of the main uh gold tool chain and we'll start adding generic support on that branch",
    "start": "2194520",
    "end": "2201839"
  },
  {
    "text": "which will involve changing compiler mainly um and any other changes to other",
    "start": "2201839",
    "end": "2207280"
  },
  {
    "text": "tools that are required and so that'll be the time to start uh giving feedback about changes to build speed we've",
    "start": "2207280",
    "end": "2214400"
  },
  {
    "text": "talked about it with some of the compil Developers like Keith Randall especially and uh we we think we can do it without",
    "start": "2214400",
    "end": "2221520"
  },
  {
    "text": "a significant increase in build speed I mean there will be some increase in build speed we don't think it's going to be um a huge increase but you know this",
    "start": "2221520",
    "end": "2228079"
  },
  {
    "text": "is really speculative at this point so the time to give that feedback is when uh when we're able to start doing development and hopefully hopefully",
    "start": "2228079",
    "end": "2234520"
  },
  {
    "text": "people will also be able to contribute work when we start doing that work on the public Branch we can ask other",
    "start": "2234520",
    "end": "2239800"
  },
  {
    "text": "questions that uh on the slack Channel when generics are released would it be",
    "start": "2239800",
    "end": "2245240"
  },
  {
    "text": "released together with the idea of best practices what they call it here is a standardized collections interfaces to",
    "start": "2245240",
    "end": "2251240"
  },
  {
    "text": "avoid fragmentation or do you think this will not be a problem for example size versus Count versus length it's yeah I",
    "start": "2251240",
    "end": "2259960"
  },
  {
    "text": "it's a little hard for me to visualize exactly what a standard collection interface will look like in terms of go clearly it exists in C++ and maybe we",
    "start": "2259960",
    "end": "2267800"
  },
  {
    "text": "can just borrow what they do I'm not quite sure exactly that's going to work",
    "start": "2267800",
    "end": "2273000"
  },
  {
    "text": "that is certain things are pretty straightforward I think iteration is the more complicated one C++ in part because",
    "start": "2273000",
    "end": "2280160"
  },
  {
    "text": "of the sophistication of the template capabilities is able to have a generic iteration interface that works for any",
    "start": "2280160",
    "end": "2285960"
  },
  {
    "text": "collection and I'm not sure that we're there yet with our less powerful and less complex on the other hand I don't",
    "start": "2285960",
    "end": "2292960"
  },
  {
    "text": "know that anyone's really looked at any detail so maybe we can make some progress in that area I mean there",
    "start": "2292960",
    "end": "2298440"
  },
  {
    "text": "there's also a difference in the sense that you know in go we already have for instance Maps which of course is not the",
    "start": "2298440",
    "end": "2304359"
  },
  {
    "text": "whole collection hierarchy but it's a significant chance uh which doesn't exist in C++ and so",
    "start": "2304359",
    "end": "2310880"
  },
  {
    "text": "there is a Temptation there to to build this very complete hierarchy while in go",
    "start": "2310880",
    "end": "2317400"
  },
  {
    "text": "in many cases we just use a map for for various things and that works fine and and the map is in some sense generic",
    "start": "2317400",
    "end": "2323880"
  },
  {
    "text": "already but of course that's not to say that this would replace a a more comprehensive package perhaps it's a",
    "start": "2323880",
    "end": "2331160"
  },
  {
    "text": "good question though I think it's going to be interesting to see what what people will do with this the design",
    "start": "2331160",
    "end": "2336599"
  },
  {
    "text": "design we Tred to make it as orthogonal as possible to the rest of the language and so that really means adding generic",
    "start": "2336599",
    "end": "2343880"
  },
  {
    "text": "type parameters somewhere adds a new dimension to the kind of programs you can write so it really opens up an",
    "start": "2343880",
    "end": "2350839"
  },
  {
    "text": "entire new dimension of possibilities and it'll be very interesting to see what people do with this one other uh",
    "start": "2350839",
    "end": "2358119"
  },
  {
    "text": "comment from the slack is a technological guard rail if you will so for the language currently go vet and go",
    "start": "2358119",
    "end": "2365319"
  },
  {
    "text": "lint function as sanity checks that we depend on what is your opinion on adding",
    "start": "2365319",
    "end": "2370760"
  },
  {
    "text": "new checks added to discourage the use of generic code in this tool chain if all you need is a non-generic version",
    "start": "2370760",
    "end": "2377920"
  },
  {
    "text": "well we can easily make the compiler you know two times slower for each additional type parameter that would",
    "start": "2377920",
    "end": "2384280"
  },
  {
    "text": "limit the complexity quite quickly it's really going to have to probably be enforced through culture right or this",
    "start": "2384280",
    "end": "2390680"
  },
  {
    "text": "best practices and idioms it's quite easily um easy to see that programs have",
    "start": "2390680",
    "end": "2397160"
  },
  {
    "text": "one or two Tye parameters and functions but if it goes over two or three you",
    "start": "2397160",
    "end": "2402280"
  },
  {
    "text": "know then you are starting to wonder you know what what's happening here you know is this is this really necessary or is",
    "start": "2402280",
    "end": "2408800"
  },
  {
    "text": "this really good so I would say there's some immediate questions right there when you look at code like that but I'm",
    "start": "2408800",
    "end": "2415359"
  },
  {
    "text": "I'm shooting from the hip here so that's I'm just guessing here uh and I suspect that there may be things we can say you",
    "start": "2415359",
    "end": "2422880"
  },
  {
    "text": "know this is not good and maybe such things can go into a bit check eventually but I don't know what that",
    "start": "2422880",
    "end": "2428599"
  },
  {
    "text": "would be at this point I suspect things like the go Proverbs will sort of help on this front just because like we have",
    "start": "2428599",
    "end": "2434960"
  },
  {
    "text": "the ones like a little what a little copying is better than a little dependency I think is is one of them and",
    "start": "2434960",
    "end": "2440440"
  },
  {
    "text": "I think if people stick with that mindset of copying an entire type like if you're only using two different",
    "start": "2440440",
    "end": "2446319"
  },
  {
    "text": "versions of it or an entire function or whatever it happens to be is is better than writing the generic version for",
    "start": "2446319",
    "end": "2452319"
  },
  {
    "text": "Just Two version you know two different types but if you do find yourself in the situation where you need to use it for",
    "start": "2452319",
    "end": "2457359"
  },
  {
    "text": "six or seven different types then generics might actually be the right solution M the rule of three so applies",
    "start": "2457359",
    "end": "2464680"
  },
  {
    "text": "here um I think we've discussed this previously on the show usually I don't even start to think about sort of",
    "start": "2464680",
    "end": "2470319"
  },
  {
    "text": "abstracting way or making a generic version of anything until I've seen at least three sort of instances of it if",
    "start": "2470319",
    "end": "2476200"
  },
  {
    "text": "you will then I start to say okay well I'm starting to see the edges here I'm starting to see sort of a what is the",
    "start": "2476200",
    "end": "2481839"
  },
  {
    "text": "likelihood of this thing sort of being used in the future right because any code you write again we we we write the",
    "start": "2481839",
    "end": "2487680"
  },
  {
    "text": "code just once and then but we have to maintain that code possibly indefinitely so it's it's the same rule around sort",
    "start": "2487680",
    "end": "2494040"
  },
  {
    "text": "of uh those decisions we're making today asking ourselves these kinds of questions I think it's the same thing really should apply here but again you",
    "start": "2494040",
    "end": "2500119"
  },
  {
    "text": "are going to see folks who are sort of anti- generics uh I think in in our community I'd say it's like a 50-50",
    "start": "2500119",
    "end": "2505520"
  },
  {
    "text": "split we have people who who love go because of the lack of generics which is a very specific reason to Lo language",
    "start": "2505520",
    "end": "2511079"
  },
  {
    "text": "but hey um but then you have others who are like hey if go ahead generics I'll would be using it right so it's it's",
    "start": "2511079",
    "end": "2517520"
  },
  {
    "text": "kind of an odd mix um but uh again I think it's going to be up to the community as a whole to come up with the",
    "start": "2517520",
    "end": "2523079"
  },
  {
    "text": "what what are the idiomatic ways really we want to treat generics I think those would be nice too because if we have a",
    "start": "2523079",
    "end": "2528680"
  },
  {
    "text": "concrete implementation to point to even if you just copy it to the docs like for the comment and say like this is a",
    "start": "2528680",
    "end": "2534240"
  },
  {
    "text": "generic implementation of this concrete thing I think anybody who's unfamiliar with generics or you know a little bit",
    "start": "2534240",
    "end": "2539720"
  },
  {
    "text": "newer to programming could look at that and have a much better chance of understanding the code one of the things",
    "start": "2539720",
    "end": "2545359"
  },
  {
    "text": "I think about for generics if this does get put into the language is whether or",
    "start": "2545359",
    "end": "2550400"
  },
  {
    "text": "not it's going to bring on what I would call the wouldbe Gophers right right now",
    "start": "2550400",
    "end": "2555520"
  },
  {
    "text": "we have the diard Gophers people who love go and use go and maybe have internalized the no generic vosy of go",
    "start": "2555520",
    "end": "2563800"
  },
  {
    "text": "and having generics or implementing generics into the language successfully may bring new goers to the table and",
    "start": "2563800",
    "end": "2570480"
  },
  {
    "text": "those new Gophers are going to be your net and your C++ and your Java Gophers",
    "start": "2570480",
    "end": "2575880"
  },
  {
    "text": "so Robert nean do you have any thoughts or suggestions on how to help them keep go",
    "start": "2575880",
    "end": "2583160"
  },
  {
    "text": "go while also giving them this tool that they've leaned on so heavily on from coming from their other language um yeah",
    "start": "2583160",
    "end": "2591079"
  },
  {
    "text": "I hope that um I hope they will be able to carry on to carry their programming practices over where those uh practices",
    "start": "2591079",
    "end": "2597160"
  },
  {
    "text": "make sense I mean uh where they make sense for go I should say I I can't tell",
    "start": "2597160",
    "end": "2602400"
  },
  {
    "text": "whether um adding generics to go will make it that much more appealing to C++ or dver I certainly hope it will but uh",
    "start": "2602400",
    "end": "2608559"
  },
  {
    "text": "whether it really will in practice it's it's just hard to know I mean it's still going to be a different language of course certainly there have been people",
    "start": "2608559",
    "end": "2615400"
  },
  {
    "text": "in the past whove just rejected go outright because it doesn't have generics but I don't think there have been that many people who take that point of view and uh I hope that those",
    "start": "2615400",
    "end": "2623040"
  },
  {
    "text": "people will take another look when generics comes out but you know from my point of view I want go to be open to",
    "start": "2623040",
    "end": "2629359"
  },
  {
    "text": "everyone I want you know all these people to to find go to be productive language but uh it's not really a matter",
    "start": "2629359",
    "end": "2635520"
  },
  {
    "text": "of um pulling people from the other language communities you know I think generics is interesting mostly because",
    "start": "2635520",
    "end": "2641280"
  },
  {
    "text": "as Robert said it's orthogonal it's just write code that we couldn't write before in go it lets us write code that's um",
    "start": "2641280",
    "end": "2648640"
  },
  {
    "text": "solves problems in a way that we couldn't really solve before at least not without going through type",
    "start": "2648640",
    "end": "2654240"
  },
  {
    "text": "reflection or uh other more or massive copying or whatever so it'd be great to",
    "start": "2654240",
    "end": "2661400"
  },
  {
    "text": "open more people I hope that more people keep writing go but uh I think main interest is to give people another",
    "start": "2661400",
    "end": "2668200"
  },
  {
    "text": "powerful programming tool at least my main interest yeah I'd add on that that again this is not you know go is not now",
    "start": "2668200",
    "end": "2675000"
  },
  {
    "text": "becoming at the generic language you know it's just yet another mechanism in the language like we have you know",
    "start": "2675000",
    "end": "2681520"
  },
  {
    "text": "interfaces we have methods and uh doesn't mean go isn't you know now you have to write everything in an",
    "start": "2681520",
    "end": "2687240"
  },
  {
    "text": "objectoriented style go has always been a multi Paradigm we we enable different",
    "start": "2687240",
    "end": "2694200"
  },
  {
    "text": "ways of programming and we encourage people to choose the right approach for the problem at hand and so in a",
    "start": "2694200",
    "end": "2702520"
  },
  {
    "text": "situation where a generic approach might be the right approach you know then by all means go for it and if it's not then",
    "start": "2702520",
    "end": "2709040"
  },
  {
    "text": "you know don't don't do it and of course there's going to be people that you know really like the playing with types and",
    "start": "2709040",
    "end": "2717160"
  },
  {
    "text": "more so maybe than getting that code to just do what it supposed to do and so",
    "start": "2717160",
    "end": "2722319"
  },
  {
    "text": "for them it's of course appealing to have this this new mechanism but again if if your goal is to get something done",
    "start": "2722319",
    "end": "2727599"
  },
  {
    "text": "at the end of the day use the mechanism the tool that fits your needs and and",
    "start": "2727599",
    "end": "2733760"
  },
  {
    "text": "solves the problem the best way so along those lines that's actually a good segue for um the segment of the show where we",
    "start": "2733760",
    "end": "2740640"
  },
  {
    "text": "talk about unpopular [Music]",
    "start": "2740640",
    "end": "2747800"
  },
  {
    "text": "opinions I actually think should probably [Music]",
    "start": "2747800",
    "end": "2754880"
  },
  {
    "text": "leave so uh what I'd like to do is ask each",
    "start": "2754880",
    "end": "2761359"
  },
  {
    "text": "one of you to uh spill unto the mic your unpopular opinion it could be related to",
    "start": "2761359",
    "end": "2767960"
  },
  {
    "text": "what we've been talking about or on generics or it could be something that you're seeing out there that perhaps you",
    "start": "2767960",
    "end": "2774079"
  },
  {
    "text": "have a a different opinion from or if it helps some people have just told us they think buses are more efficient than",
    "start": "2774079",
    "end": "2779760"
  },
  {
    "text": "other forms of transportation in New York city so it can literally be anything",
    "start": "2779760",
    "end": "2786200"
  },
  {
    "text": "well let me start on on that so I cannot opine on you know the buses in New York City I'm a big fan of public",
    "start": "2786200",
    "end": "2792480"
  },
  {
    "text": "transportation even though this is perhaps not the right time to advocate for them for other reasons but um",
    "start": "2792480",
    "end": "2800680"
  },
  {
    "text": "unpopular opinions um I don't know if it's an unpopular opinion but you know I like short",
    "start": "2800680",
    "end": "2806680"
  },
  {
    "text": "identifiers I do and um I feel like the closer they are to where you",
    "start": "2806680",
    "end": "2813480"
  },
  {
    "text": "use them the shorter they can be and the further away they are from where you use them the longer they should be",
    "start": "2813480",
    "end": "2822079"
  },
  {
    "text": "and then there are some exceptions like when an identifier is really really really important in your package and",
    "start": "2822079",
    "end": "2829359"
  },
  {
    "text": "prevalent then it can be one letter even if it's a global and you know the most",
    "start": "2829359",
    "end": "2835040"
  },
  {
    "text": "prominent example for that is perhaps testing. T I'm not sure if you're allowed to be a teacher",
    "start": "2835040",
    "end": "2841160"
  },
  {
    "text": "now oh why Don every teacher like expect you to write really long like explanat",
    "start": "2841160",
    "end": "2848240"
  },
  {
    "text": "like self-explanatory variable names regardless of where you use them or when you're at least that was my experience I",
    "start": "2848240",
    "end": "2853520"
  },
  {
    "text": "felt like every teacher wanted long variable names so I I will comment on your change list if it uses you know in",
    "start": "2853520",
    "end": "2861400"
  },
  {
    "text": "a in a simple for Loop if the iteration variable is called index I will you know",
    "start": "2861400",
    "end": "2867359"
  },
  {
    "text": "probably comment on that say you know call it I or J whatever Ian what you got okay I don't",
    "start": "2867359",
    "end": "2875000"
  },
  {
    "text": "know if this opinion is unpopular but I feel like I write it a lot so there's certainly people who don't seem to grasp",
    "start": "2875000",
    "end": "2882240"
  },
  {
    "text": "it and that's that the language is not perfect but every change to the language",
    "start": "2882240",
    "end": "2888280"
  },
  {
    "text": "carries a heavy cost so when you want to come and argue for why the language",
    "start": "2888280",
    "end": "2894920"
  },
  {
    "text": "should be changed and you know we see that a lot I'd say that there's a probably one a day suggestion for some",
    "start": "2894920",
    "end": "2901119"
  },
  {
    "text": "way to change the go language don't just talk about how it makes the language",
    "start": "2901119",
    "end": "2906800"
  },
  {
    "text": "better but also spend some time to talk about how it makes the language worse",
    "start": "2906800",
    "end": "2912319"
  },
  {
    "text": "because there's no such thing as a 100% good change to language I shouldn't say there's no such thing maybe it's out",
    "start": "2912319",
    "end": "2918119"
  },
  {
    "text": "there maybe no one has thought of it yet but probably it's a good bet that all",
    "start": "2918119",
    "end": "2924480"
  },
  {
    "text": "the 100% good changes to the language have already been made and so when you want to change the language spend some",
    "start": "2924480",
    "end": "2931280"
  },
  {
    "text": "time to think about how it makes things worse as well as how it makes things better I think I just saw you drop a",
    "start": "2931280",
    "end": "2937880"
  },
  {
    "text": "metaphorical [Laughter]",
    "start": "2937880",
    "end": "2943160"
  },
  {
    "text": "mic we're gonna go back now and think a lot about how generics makes things",
    "start": "2943160",
    "end": "2949520"
  },
  {
    "text": "worse I think we got plenty of people telling us that already I was gonna say if you haven't gotten that feedback at",
    "start": "2949880",
    "end": "2955359"
  },
  {
    "text": "this point well it has been a pleasure on behalf of my co-hosts John and Johnny we",
    "start": "2955359",
    "end": "2963720"
  },
  {
    "text": "thank you uh Ian and Robert for taking the time to talk about the new draft",
    "start": "2963720",
    "end": "2968760"
  },
  {
    "text": "proposal and generics with us yeah my pleasure it's been fun thanks for having",
    "start": "2968760",
    "end": "2975599"
  },
  {
    "text": "us thanks to Robert and Ian for coming back on the show to Carmen for making it all happen to John and Johnny for",
    "start": "2976640",
    "end": "2983240"
  },
  {
    "text": "rounding out the panel and to you for listening if you love go time I have some semi-secret news to share on a way",
    "start": "2983240",
    "end": "2989720"
  },
  {
    "text": "that you can directly support the show we are beta testing a membership that lets you get closer to the medal we call",
    "start": "2989720",
    "end": "2995960"
  },
  {
    "text": "it change log Plus+ and this is the first time we're mentioning it publicly Read All About It help us test this",
    "start": "2995960",
    "end": "3002200"
  },
  {
    "text": "program and make the ads disappear at cha.com plusus plus go time is brought",
    "start": "3002200",
    "end": "3008319"
  },
  {
    "text": "to you by some awesome sponsors thanks again to fastly linode and rollbar and",
    "start": "3008319",
    "end": "3013520"
  },
  {
    "text": "our music is provided by the one and only brake master cylinder that's all for now we'll talk to you again next",
    "start": "3013520",
    "end": "3020040"
  },
  {
    "text": "[Music] week",
    "start": "3020040",
    "end": "3026220"
  },
  {
    "text": "[Music]",
    "start": "3026220",
    "end": "3050840"
  },
  {
    "text": "what [Music]",
    "start": "3054440",
    "end": "3080639"
  },
  {
    "text": "something Carmen I heard a lot of ifs from you today some what a lot of ifs from you",
    "start": "3084359",
    "end": "3091880"
  },
  {
    "text": "today what kind of ifs if this makes it into the language well you know what okay so I think partly because of what I",
    "start": "3091880",
    "end": "3099640"
  },
  {
    "text": "had learned with um with try last year um in that there a lot of time was spent",
    "start": "3099640",
    "end": "3106559"
  },
  {
    "text": "really thinking about this and trying to solve a good problem and then a lot of the community felt like it was a that's",
    "start": "3106559",
    "end": "3112480"
  },
  {
    "text": "a complet and I think and I probably speaking for Robert and Ian here when I say if a lot I think that the draft",
    "start": "3112480",
    "end": "3119240"
  },
  {
    "text": "proposal is explicitly meant to not seem as a f a compl compl yeah yeah I mean if",
    "start": "3119240",
    "end": "3125599"
  },
  {
    "text": "if there's something we learn from that is that we cannot just come out with a doesn't matter how well thought out idea",
    "start": "3125599",
    "end": "3133520"
  },
  {
    "text": "and you know put it out there and say you know say yes or no it's just not",
    "start": "3133520",
    "end": "3138760"
  },
  {
    "text": "going to going to work um there needs to be an educational process as we had to",
    "start": "3138760",
    "end": "3144160"
  },
  {
    "text": "go through it too and that we're trying to achieve now",
    "start": "3144160",
    "end": "3150440"
  },
  {
    "text": "through being more open and going you know in smaller steps and getting",
    "start": "3150440",
    "end": "3156200"
  },
  {
    "text": "everybody on board and it it's kind of strange because programming language",
    "start": "3156200",
    "end": "3162720"
  },
  {
    "text": "evolution is really a social process okay it doesn't actually matter if you",
    "start": "3162720",
    "end": "3168400"
  },
  {
    "text": "have if you have seen the light and you know exactly the perfect language you know and you would just put it out there",
    "start": "3168400",
    "end": "3175359"
  },
  {
    "text": "and you know maybe it's 20 years ahead nobody would even buy it because people would not see the reasoning why you got",
    "start": "3175359",
    "end": "3181280"
  },
  {
    "text": "to that point and so you really have to get everybody along and some people may",
    "start": "3181280",
    "end": "3187240"
  },
  {
    "text": "already be where you are and some people may not but you have to get everybody along in Little Steps and that's how we",
    "start": "3187240",
    "end": "3193920"
  },
  {
    "text": "eventually end up where we want to be and we can see this with all kinds of things like garbage collection garbage",
    "start": "3193920",
    "end": "3199839"
  },
  {
    "text": "collection was invented you know 1950 something with list you know the first",
    "start": "3199839",
    "end": "3205599"
  },
  {
    "text": "garbage collection 1958 I believe and it's taken forever before it became",
    "start": "3205599",
    "end": "3211559"
  },
  {
    "text": "accepted as something that the programming language should you know a mainstream programing language should have maybe Java was the first one that",
    "start": "3211559",
    "end": "3218640"
  },
  {
    "text": "really made it mainstream and and now this is not something that is I mean still disputed or debated I should say",
    "start": "3218640",
    "end": "3225760"
  },
  {
    "text": "but it's not as outrageous anymore and so I think that's true for other things",
    "start": "3225760",
    "end": "3232000"
  },
  {
    "text": "too",
    "start": "3232000",
    "end": "3235000"
  }
]