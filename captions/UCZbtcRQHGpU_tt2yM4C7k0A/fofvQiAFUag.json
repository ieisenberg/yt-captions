[
  {
    "text": "BWI for change log is provided by fastly learn more at fastly.com we move fast",
    "start": "40",
    "end": "5799"
  },
  {
    "text": "and fix things here at Chang log because of rbar check them out at roar.com and we're hosted on linode cloud servers at",
    "start": "5799",
    "end": "12759"
  },
  {
    "text": "the lin.com changelog do not underestimate the power",
    "start": "12759",
    "end": "19920"
  },
  {
    "text": "of the independent open Cloud for developers yes I'm talking about lenoe lenoe is our cloud of choice and it's",
    "start": "19920",
    "end": "27199"
  },
  {
    "text": "the home of Chang log.com we love most about Leno is their independence and",
    "start": "27199",
    "end": "32758"
  },
  {
    "text": "their commitment to open Cloud open Cloud means being unencumbered by outside investment and maximizing value",
    "start": "32759",
    "end": "39280"
  },
  {
    "text": "for the community not shareholders and that's exactly what Len represents no vendor lock in open at every layer if",
    "start": "39280",
    "end": "46719"
  },
  {
    "text": "you want to learn more head the lin.com slopen again lin.com",
    "start": "46719",
    "end": "52920"
  },
  {
    "text": "slopen [Music]",
    "start": "58920",
    "end": "64199"
  },
  {
    "text": "let's do it it's go time welcome to go time your weekly podcast discussing",
    "start": "65320",
    "end": "71479"
  },
  {
    "text": "everything inside goes expanding reach we've got clouds containers system architecture CIS you name it and of",
    "start": "71479",
    "end": "78200"
  },
  {
    "text": "course the people and language that make it all go we record live on Tuesdays it's a lot of fun join us in the go time",
    "start": "78200",
    "end": "84119"
  },
  {
    "text": "FM channel of go for slack at 300 p.m. Eastern we also take requests at cha.com",
    "start": "84119",
    "end": "89960"
  },
  {
    "text": "Quest select go time in the drop down and let us know what you like to hear about on the show okay here's Matt and the team go time",
    "start": "89960",
    "end": "97880"
  },
  {
    "text": "[Applause] baby hello and welcome to go time I'm",
    "start": "97880",
    "end": "102920"
  },
  {
    "text": "Matt ryer today we're talking about abstractions and interfaces and we're",
    "start": "102920",
    "end": "108079"
  },
  {
    "text": "obviously going to Deep dive on go interfaces and look at some patterns and things there joining me today it's Mark",
    "start": "108079",
    "end": "114920"
  },
  {
    "text": "Bates hello Mark hello Matthew how you doing today good thank you and yourself",
    "start": "114920",
    "end": "120000"
  },
  {
    "text": "uh not bad it says here in my show notes that I'm supposed to mention bitbar and compliment you accordingly wow that's",
    "start": "120000",
    "end": "127079"
  },
  {
    "text": "very kind of you to say Mark so this is my mention of bit bar yeah yeah thank",
    "start": "127079",
    "end": "132280"
  },
  {
    "text": "you very much complimenting you accordingly now you've surprised me there yeah but um I'll talk more about",
    "start": "132280",
    "end": "137360"
  },
  {
    "text": "that later because oh is that not the sponsorship portion of the show is that not wor no that's thought we did that",
    "start": "137360",
    "end": "142840"
  },
  {
    "text": "sorry sorry that's fastly we're also joined by Johnny",
    "start": "142840",
    "end": "148760"
  },
  {
    "text": "borico Hello Johnny hello Matthew wait your full name first name is Matthew yeah I never knew that",
    "start": "148760",
    "end": "155040"
  },
  {
    "text": "yeah yeah really H yeah Matt's just shter version of it but it's just one t",
    "start": "155040",
    "end": "160200"
  },
  {
    "text": "whoa whoa Matt is short for Matthew yeah I've just been huh oh mind blown mine",
    "start": "160200",
    "end": "166599"
  },
  {
    "text": "totally but I did not see that coming and John is short for Jonathan and speaking of which Jonathan it's John",
    "start": "166599",
    "end": "173120"
  },
  {
    "text": "Calhoun hello John he Matt how's it going good good we're going to talk",
    "start": "173120",
    "end": "179560"
  },
  {
    "text": "about about interfaces and abstractions today and I thought since you've done a lot of kind of training material and",
    "start": "179560",
    "end": "184720"
  },
  {
    "text": "stuff it might be cool if you could kick us off and uh just start with sort of tell us what is an interface and what",
    "start": "184720",
    "end": "190840"
  },
  {
    "text": "are they for yeah I mean edits very core they're just a way of defining behavior",
    "start": "190840",
    "end": "196120"
  },
  {
    "text": "that you want so you know when we talk about code a lot of times you look at strs and you'll see very concrete things",
    "start": "196120",
    "end": "201519"
  },
  {
    "text": "that say like what a user is or all these different things but whenever you're actually writing code a lot of times you don't care specifically about",
    "start": "201519",
    "end": "207480"
  },
  {
    "text": "the type that you're getting you don't care if it's a user or if it's uh in admin or if it's something else you just",
    "start": "207480",
    "end": "213200"
  },
  {
    "text": "care about some specific behavior that it might have and in go this is typically represented with methods of",
    "start": "213200",
    "end": "218319"
  },
  {
    "text": "some sort yeah so an interface is a type that just lists out methods and then any",
    "start": "218319",
    "end": "223599"
  },
  {
    "text": "other type that happens to have those same methods can be used wherever that interface is requested is that yep yeah",
    "start": "223599",
    "end": "232920"
  },
  {
    "text": "the example I always use uh when I'm doing training is like an Entertainer interface so if I'm starting a Club some",
    "start": "232920",
    "end": "240560"
  },
  {
    "text": "sort of an entertainment venue right if I use a concrete type if I say you know I want to use this concrete type the",
    "start": "240560",
    "end": "246879"
  },
  {
    "text": "concrete type is Beetle anybody who's a beetle can play at my club well there's only two people in the whole world who",
    "start": "246879",
    "end": "253000"
  },
  {
    "text": "can play admittedly if I got one of those two I could easily pack the house the other one would be tending bar",
    "start": "253000",
    "end": "260919"
  },
  {
    "text": "but uh but you know that's concrete behavior only I can only feel at two nights of the Year possibly right right",
    "start": "260919",
    "end": "267639"
  },
  {
    "text": "if I accept an interface if I say anybody who's an Entertainer anybody who can play something whether it be a",
    "start": "267639",
    "end": "273560"
  },
  {
    "text": "guitar or a flute or can read poetry or an improv troop they can all entertain",
    "start": "273560",
    "end": "278840"
  },
  {
    "text": "they all have this play Method on them just like a beetle would um now I can have Paul McCartney come play I can have",
    "start": "278840",
    "end": "286560"
  },
  {
    "text": "the flutist come play I can have that dance group come and perform um because they all Implement that they're not",
    "start": "286560",
    "end": "292240"
  },
  {
    "text": "concrete anymore to me that's always a clear analogy but yeah maybe not see I",
    "start": "292240",
    "end": "297560"
  },
  {
    "text": "like that because it's a good way of sort of showing that you can also do interfaces that are like a long running process like anything that can play and",
    "start": "297560",
    "end": "303880"
  },
  {
    "text": "that might block for a half hour you know everybody sits down and listens to an Entertainer play or you can have behaviors like if you're dealing with",
    "start": "303880",
    "end": "310919"
  },
  {
    "text": "like packages and you're like the post office all you really care about is like give me the dimensions you don't typically care what's specifically in",
    "start": "310919",
    "end": "316919"
  },
  {
    "text": "the box like you might have something like is this hazardous you know a couple things like that but once you've checked those things off and those are sort of",
    "start": "316919",
    "end": "323680"
  },
  {
    "text": "more behaviors that just give you some quick data back and they don't necessarily block but interfaces can cover everything on that broad spectrum",
    "start": "323680",
    "end": "329720"
  },
  {
    "text": "of you know start a server that can start up any type of server or it could be you just give me some information",
    "start": "329720",
    "end": "336039"
  },
  {
    "text": "yeah and I love in go that you don't have to explicitly say that you're implementing an interface so in a lot of",
    "start": "336039",
    "end": "342639"
  },
  {
    "text": "languages when you create your type you actually list out all the interfaces that you're going to implement and then",
    "start": "342639",
    "end": "349520"
  },
  {
    "text": "the IDE usually helps you enforce that and make sure that you put all the right methods in so that you satisfy the list",
    "start": "349520",
    "end": "355680"
  },
  {
    "text": "it doesn't work like that in go in go it's called structural typing so it's kind of like Duck typing but because it",
    "start": "355680",
    "end": "363120"
  },
  {
    "text": "happens at compile time it's called structural typing apparently but the duck typing idea is if it looks like a",
    "start": "363120",
    "end": "368560"
  },
  {
    "text": "duck and it sounds like a duck it's a duck and it's kind of like saying yeah so here's the interface with a few",
    "start": "368560",
    "end": "374599"
  },
  {
    "text": "methods and even if you didn't know about this interface you can still implement it or you can write interfaces",
    "start": "374599",
    "end": "382280"
  },
  {
    "text": "to things that already exist or that other people have written so that turns out to be really quite powerful as well",
    "start": "382280",
    "end": "389199"
  },
  {
    "text": "yeah the implicit over explicit is really where it shines in terms of the",
    "start": "389199",
    "end": "394400"
  },
  {
    "text": "interfaces and I know a lot of new people coming to go I've seen from class really struggle with that bit",
    "start": "394400",
    "end": "401639"
  },
  {
    "text": "understanding that just because they've written a method they are now implicitly implementing an interface and they get",
    "start": "401639",
    "end": "406919"
  },
  {
    "text": "hung up on well how do I know that I'm implementing that interface I'm like well it's not important until you need",
    "start": "406919",
    "end": "413440"
  },
  {
    "text": "to use it as an interface like that's the beauty of you say well how do I know you just look at the docs what is this",
    "start": "413440",
    "end": "418599"
  },
  {
    "text": "thing taking it's taking a writer what's a writer a writer is anything that implements the right function takes",
    "start": "418599",
    "end": "423639"
  },
  {
    "text": "slice of bites turns it into an error right that's the beauty of it you just kind of do it you don't have to worry",
    "start": "423639",
    "end": "428919"
  },
  {
    "text": "about tying into all these other things it also means and we can definitely talk on this later that you can break a lot",
    "start": "428919",
    "end": "435360"
  },
  {
    "text": "of dependencies too just you can keep dependencies out of the mix by using",
    "start": "435360",
    "end": "440639"
  },
  {
    "text": "interfaces in ways too as well which is quite nice so yeah along those lines my",
    "start": "440639",
    "end": "445879"
  },
  {
    "text": "favorite use of interfaces is to Leverage ability to provide that sort of",
    "start": "445879",
    "end": "451120"
  },
  {
    "text": "a independent means of sort of decoupling packages dependency between",
    "start": "451120",
    "end": "456840"
  },
  {
    "text": "packages right so for example I do a lot of work with the AWS sdks and for",
    "start": "456840",
    "end": "461919"
  },
  {
    "text": "example when writing a lot of data to say d DB I don't necessarily have to bring in the uh AWS SDK the Dynamo DB",
    "start": "461919",
    "end": "470599"
  },
  {
    "text": "interface or implementation anywhere near my code I can simply create an interface that I",
    "start": "470599",
    "end": "476879"
  },
  {
    "text": "expect my code to use and basically have that interface be local to my code not even export it to the rest of the",
    "start": "476879",
    "end": "483319"
  },
  {
    "text": "application at all have that be local to to my code and uh maybe in my main package when I'm initializing my",
    "start": "483319",
    "end": "489639"
  },
  {
    "text": "application I can then basically you know initialize a value that represents a client to my Dynamo DB um server and",
    "start": "489639",
    "end": "496039"
  },
  {
    "text": "then pass that in and as long as it satisfies the interface I've defined for for my code locally everything is good",
    "start": "496039",
    "end": "501879"
  },
  {
    "text": "right my code didn't have to know anything about the fact that it's even a dyn DB implementation at all right it",
    "start": "501879",
    "end": "506960"
  },
  {
    "text": "can be anything that actually implements that in the face so that ow you to create that separation that that decoupling you know because of that",
    "start": "506960",
    "end": "512320"
  },
  {
    "text": "implicit satisfaction of those methods then it it really allows you to keep your code separate and not depend on any",
    "start": "512320",
    "end": "518560"
  },
  {
    "text": "sort of externalities at all that's my favorite part of of using interfaces I'm glad you brought that up because like",
    "start": "518560",
    "end": "524399"
  },
  {
    "text": "Mark was saying a lot of people get hung up on this fact that how do I know if I'm implementing an interface and I I",
    "start": "524399",
    "end": "531240"
  },
  {
    "text": "think that that's it's a weird Paradigm to get used to is like you kind of lift that responsibility off your shoulders",
    "start": "531240",
    "end": "536760"
  },
  {
    "text": "and it's the person who's using the type that actually has to care about is this going to be implementing an interface and then they Define the interface like",
    "start": "536760",
    "end": "543800"
  },
  {
    "text": "you were saying Johnny your code that you know needs something that interacts with the database of some sort it defines the interface and it doesn't",
    "start": "543800",
    "end": "549920"
  },
  {
    "text": "even necessarily have to export it to the rest of the code and it's weird to get used to that when you come from another language like Java or something",
    "start": "549920",
    "end": "556680"
  },
  {
    "text": "where you're explicitly saying like here are all the interfaces I'm implementing and that's very different from the way it is and go and go you just write your",
    "start": "556680",
    "end": "562880"
  },
  {
    "text": "code and then if somebody wants it to be an interface it's their job to define the interface and you know sort of make sure that it's the right one yeah a lot",
    "start": "562880",
    "end": "570560"
  },
  {
    "text": "of especially again new developers don't realize is that you can create non-exported interfaces inside of a",
    "start": "570560",
    "end": "578120"
  },
  {
    "text": "function or a method and to use to check right there like you don't have to export them you don't have to have tons",
    "start": "578120",
    "end": "585240"
  },
  {
    "text": "of interfaces you can say I'm looking for one very specific thing create an interface in line right there and it's",
    "start": "585240",
    "end": "592399"
  },
  {
    "text": "amazing it's so wonderful that you can do stuff like that you know cuz you can even then turn around and create your",
    "start": "592399",
    "end": "597880"
  },
  {
    "text": "own like default implement mation of that interface using functions and types",
    "start": "597880",
    "end": "603200"
  },
  {
    "text": "right to have a backup in case the thing you're looking for doesn't exist or is nil or whatever it's such a wonderful",
    "start": "603200",
    "end": "609560"
  },
  {
    "text": "way of working and asking for and getting more and more enhanced functionality like along those lines",
    "start": "609560",
    "end": "615959"
  },
  {
    "text": "I've seen way too many times where as I'm writing my code if I happen to I used to create public interfaces all the",
    "start": "615959",
    "end": "622040"
  },
  {
    "text": "time and then now I realize okay first of all I don't need to and and the reason and I came to a point where I'm",
    "start": "622040",
    "end": "627440"
  },
  {
    "text": "like H every time I create a public interface right I'm kind of implicitly saying to whoever is going to use this",
    "start": "627440",
    "end": "634120"
  },
  {
    "text": "this package this code that hey you can actually depend on this because I've exported it right you can you can depend thereby making it hard for me to to",
    "start": "634120",
    "end": "641320"
  },
  {
    "text": "actually change that later on if I wanted to right so like every other type if you don't need to export something",
    "start": "641320",
    "end": "647720"
  },
  {
    "text": "don't right so by keeping it local and private to to to the package I'm basically saying hey I'm just going to",
    "start": "647720",
    "end": "653639"
  },
  {
    "text": "in my read me I'm saying hey this is what you should expect to send in or you can actually read the Cod implementation and then see what is expected what",
    "start": "653639",
    "end": "660279"
  },
  {
    "text": "interface you expected to satisfy and then that enforces that separation right so it removes the Temptation when I",
    "start": "660279",
    "end": "666240"
  },
  {
    "text": "don't export it it removes a temptation to actually sort of have that my interface be in your code yeah so that's",
    "start": "666240",
    "end": "673240"
  },
  {
    "text": "interesting you bring that up Johnny because Eric fuger on the slack channel",
    "start": "673240",
    "end": "678639"
  },
  {
    "text": "in gotime FM uh was actually talking just about that thing and he says that",
    "start": "678639",
    "end": "684920"
  },
  {
    "text": "he likes the idea of providing the interface with the implementation because you get sort of explicit",
    "start": "684920",
    "end": "690839"
  },
  {
    "text": "storytelling I guess and he apparently challenged this before and people have said you don't need to do it or it's un",
    "start": "690839",
    "end": "697079"
  },
  {
    "text": "necessary or something but he asks for a more concrete reason why why is it bad",
    "start": "697079",
    "end": "702560"
  },
  {
    "text": "to ship the interface and the stru say if you've got a package what are the pros and cons I don't think it's wrong",
    "start": "702560",
    "end": "708880"
  },
  {
    "text": "and I don't think that's what Johnny was saying I think what he was saying like most code is start with the least amount",
    "start": "708880",
    "end": "717040"
  },
  {
    "text": "exported and export what you need as you go and I can tell you from very much so",
    "start": "717040",
    "end": "722360"
  },
  {
    "text": "firsthand experience and I'm feeling a lot of pain around a lot of this is exposing too much of your API too early",
    "start": "722360",
    "end": "729839"
  },
  {
    "text": "and exporting too much of it does cause problems it causes a lot of problems down the line in terms of migrating",
    "start": "729839",
    "end": "735920"
  },
  {
    "text": "things just dependencies things get stuck and it becomes difficult to work with if you start by exposing nothing",
    "start": "735920",
    "end": "743000"
  },
  {
    "text": "and then expose the things you need as you go that's really very very useful",
    "start": "743000",
    "end": "748519"
  },
  {
    "text": "and so yes there are very much so reasons you should expose interfaces I don't think anybody would ever say don't",
    "start": "748519",
    "end": "755639"
  },
  {
    "text": "standard library is littered with them they are very useful I think what Johnny's saying and what most people advocating are don't expose the ones",
    "start": "755639",
    "end": "763399"
  },
  {
    "text": "that people don't need to know about the ones that are just useful for you inside of your package only expose the ones",
    "start": "763399",
    "end": "769800"
  },
  {
    "text": "that people need to fulfill to work with your package I don't maybe I'm misunderstanding the question but that's",
    "start": "769800",
    "end": "775959"
  },
  {
    "text": "kind of the way I was kind of viewing it yeah I think think that's right and I think I have a special place in my heart",
    "start": "775959",
    "end": "782040"
  },
  {
    "text": "as well for single method interfaces for that a kind of similar reason like about",
    "start": "782040",
    "end": "788000"
  },
  {
    "text": "the whole sort of minimalist mindset of keeping everything as Tiny as possible and doing that even down to the",
    "start": "788000",
    "end": "793959"
  },
  {
    "text": "interface level there's some surprising things that can happen which only work",
    "start": "793959",
    "end": "799440"
  },
  {
    "text": "with single method interfaces one example is just being able to use like a",
    "start": "799440",
    "end": "804639"
  },
  {
    "text": "function type like the Handler Funk is the great example of that if anyone that hasn't seen that code go and look look",
    "start": "804639",
    "end": "811079"
  },
  {
    "text": "up the Handler Funk and Handler types in the HTTP package it's not very much code",
    "start": "811079",
    "end": "816560"
  },
  {
    "text": "but it's very cool how there's a function type which happens to match the signature of the serve HTTP method in",
    "start": "816560",
    "end": "823480"
  },
  {
    "text": "the Handler interface and it to implements the serve HTTP method and",
    "start": "823480",
    "end": "829680"
  },
  {
    "text": "then just calls itself so it's this kind of weird Inception it's the weirdest little thing that I think you encounter",
    "start": "829680",
    "end": "836360"
  },
  {
    "text": "in go often it is it's a beautiful little Cod uh you know I know that if you ask you know it was very much so a",
    "start": "836360",
    "end": "842880"
  },
  {
    "text": "fall that wasn't an intended thing that was just a Fallout from the way the type system is designed you know for those of",
    "start": "842880",
    "end": "849320"
  },
  {
    "text": "you don't know and go you can you declare your own types like we type you know we do type Fu struct and that's",
    "start": "849320",
    "end": "855360"
  },
  {
    "text": "declaring a new type based off of struct or based off of interface we can do it off of ins we can do it off of slices we",
    "start": "855360",
    "end": "862160"
  },
  {
    "text": "can create new types off of anything including functions and when you do that then you can put methods on that new",
    "start": "862160",
    "end": "868800"
  },
  {
    "text": "type and that method can Implement in this case HTTP Handler and then just",
    "start": "868800",
    "end": "874120"
  },
  {
    "text": "call itself I use it all the time it's a wonderful little thing especially for those single method interface and even",
    "start": "874120",
    "end": "880839"
  },
  {
    "text": "double you know depending on what the other methods are you can easily mock those out too",
    "start": "880839",
    "end": "886440"
  },
  {
    "text": "yes yes thank you Matt that was some that was deep in insight into what I",
    "start": "886440",
    "end": "892040"
  },
  {
    "text": "just said there I appreciate that I was contemplating challenging it but um I was just going to let it go but actually",
    "start": "892040",
    "end": "897959"
  },
  {
    "text": "it only works with a single method interface the uh you know that trick of",
    "start": "897959",
    "end": "903199"
  },
  {
    "text": "doing the function thing um because you know there's only one function it can call all right unless it's like a like a",
    "start": "903199",
    "end": "910040"
  },
  {
    "text": "close sometimes you get like noop close and then you can you can Implement those actually and it just doesn't do anything",
    "start": "910040",
    "end": "916480"
  },
  {
    "text": "yeah but on the testing side it's incredibly useful that's where that's where I use it all the time is to",
    "start": "916480",
    "end": "922279"
  },
  {
    "text": "implement testing versions of these interfaces yeah so that's another use if you do have some kind of concrete",
    "start": "922279",
    "end": "929519"
  },
  {
    "text": "dependency like you're going to send an email and you're using a package from send grid let's say that they didn't",
    "start": "929519",
    "end": "935639"
  },
  {
    "text": "export an interface so you only have a struct to work with if you want to stub that out and test the code that you're",
    "start": "935639",
    "end": "942440"
  },
  {
    "text": "writing make sure it calls that uses that send grid API in the way you expect if that's indeed the kind of test you",
    "start": "942440",
    "end": "948800"
  },
  {
    "text": "want to do then that can be quite tricky if you forget that you can write the interface after you can write an",
    "start": "948800",
    "end": "955000"
  },
  {
    "text": "interface that just essentially describes the same methods that you're going to call call in the original send",
    "start": "955000",
    "end": "960720"
  },
  {
    "text": "grid API you use that type instead in your real code and then you've got an opportunity to build your own stub",
    "start": "960720",
    "end": "966639"
  },
  {
    "text": "version of that that you can use for testing so that if it some sometimes you can't avoid the situation of having to",
    "start": "966639",
    "end": "972880"
  },
  {
    "text": "test those types of dependencies if you want to unit test something and for those cases it's that's incredibly",
    "start": "972880",
    "end": "979360"
  },
  {
    "text": "useful so it's really worth remembering that you can write your own interface about something else it doesn't always",
    "start": "979360",
    "end": "984959"
  },
  {
    "text": "have to be the other way around another one that's come up with some of that weird stuff is uh any type that chains",
    "start": "984959",
    "end": "990959"
  },
  {
    "text": "like does method chaining can be really hard to use an interface for so you almost have to wrap the whole thing in",
    "start": "990959",
    "end": "996199"
  },
  {
    "text": "something else that returns interfaces and sort of Define your interface there and it can get frustrating I guess at",
    "start": "996199",
    "end": "1001920"
  },
  {
    "text": "times but it's just kind of the way it is so yeah method chaining is a real drag in that respect yeah it's not very",
    "start": "1001920",
    "end": "1009560"
  },
  {
    "text": "go actually I think no it's not fluent what we're talking about is these fluent apis where every method call returns",
    "start": "1009560",
    "end": "1017480"
  },
  {
    "text": "this the object so that you can add or a clone or modified or new version of it",
    "start": "1017480",
    "end": "1023440"
  },
  {
    "text": "yeah right right the same type yes yeah depending on what what it's doing yeah",
    "start": "1023440",
    "end": "1028678"
  },
  {
    "text": "and I get it and in some languages they really work well but they do in go go is",
    "start": "1028679",
    "end": "1033918"
  },
  {
    "text": "very strict about types and in this situation it's very difficult for you to",
    "start": "1033919",
    "end": "1039079"
  },
  {
    "text": "not replace wholesale some of these concepts with other you know regardless it's funny so I I ran into I think the",
    "start": "1039079",
    "end": "1046160"
  },
  {
    "text": "very first time I've ever really wanted generics and go the other day it was all",
    "start": "1046160",
    "end": "1051480"
  },
  {
    "text": "about interfaces and the problem I had was I have two identical interfaces and",
    "start": "1051480",
    "end": "1058320"
  },
  {
    "text": "and all they had was one method on them that returns a string that's it just",
    "start": "1058320",
    "end": "1064160"
  },
  {
    "text": "plain method just called name returns a string both the same both the like",
    "start": "1064160",
    "end": "1070440"
  },
  {
    "text": "they're both called plugin they both have a method called name they both return a string they're identical just",
    "start": "1070440",
    "end": "1076039"
  },
  {
    "text": "in different packages m but because they are in different packages they are now different types",
    "start": "1076039",
    "end": "1082840"
  },
  {
    "text": "and you cannot use one as the other and say a return even though they implement",
    "start": "1082840",
    "end": "1088360"
  },
  {
    "text": "the exact same interface yeah they're not the same type so therefore they don't work so it was that was like the",
    "start": "1088360",
    "end": "1094440"
  },
  {
    "text": "first time where it's like well the compiler could tell that that information is there they are identical",
    "start": "1094440",
    "end": "1101240"
  },
  {
    "text": "so they they do Implement each other they are interchangeable interfaces um so therefore their types",
    "start": "1101240",
    "end": "1108440"
  },
  {
    "text": "really shouldn't matter yeah and that's a case where I think generics would have solved that problem yeah so this was",
    "start": "1108440",
    "end": "1115360"
  },
  {
    "text": "Russ Cox when they did the uh the Alias do you remember that type Alias this was",
    "start": "1115360",
    "end": "1120679"
  },
  {
    "text": "to kind of solve it's still there you know it's here it's in our yeah I mean I've used it before it's",
    "start": "1120679",
    "end": "1127000"
  },
  {
    "text": "just I feel like you're using something you're not supposed to be using when you use that Alias that's that's the hard",
    "start": "1127000",
    "end": "1132520"
  },
  {
    "text": "part with it is like I've used it occasionally to experiment with some stuff and it just feels like I'm doing",
    "start": "1132520",
    "end": "1138000"
  },
  {
    "text": "something naughty that I'm not supposed to be doing and I'm like I probably don't want to advertise this code now",
    "start": "1138000",
    "end": "1143799"
  },
  {
    "text": "yeah it doesn't quite do feel right when I use it too I'm with you it was a it was a fix I think and yeah it didn't",
    "start": "1143799",
    "end": "1150240"
  },
  {
    "text": "quite do its thing now what's interesting we're hearing uh breaking news from the slack Channel Maran is",
    "start": "1150240",
    "end": "1157200"
  },
  {
    "text": "actually saying that in 114 there could be some changes oh no I think the",
    "start": "1157200",
    "end": "1162400"
  },
  {
    "text": "changes okay I'm reading it live as I speak for some reason like a it's like a proper live jour ISM this isn't it no",
    "start": "1162400",
    "end": "1170080"
  },
  {
    "text": "it's just me reading out of slack I'm distracted by slack even now the overlapping overlapping interfaces yeah",
    "start": "1170080",
    "end": "1176840"
  },
  {
    "text": "that's the overlapping in one struct I don't think that's the same yeah cuz you",
    "start": "1176840",
    "end": "1183520"
  },
  {
    "text": "can just do that with structs can't you if you've got two structs that have exactly the same Fields you can just",
    "start": "1183520",
    "end": "1188679"
  },
  {
    "text": "cast one to the other and it's a very cheap operation is that right I think that's right no you can cast the type",
    "start": "1188679",
    "end": "1195880"
  },
  {
    "text": "that's based on the other type what do you mean based on I'm pretty sure what Matt's saying is right it's just it's one of those things that every time you",
    "start": "1195880",
    "end": "1202120"
  },
  {
    "text": "happen to do it you're like let me go ahead and write this real quick and make sure it works sure this works well it's",
    "start": "1202120",
    "end": "1207520"
  },
  {
    "text": "like if you have a type that's you know type my int based on int you can cast it back and forth between my int and int so",
    "start": "1207520",
    "end": "1213120"
  },
  {
    "text": "I guess you could you could do that with a struct too yeah you can if you can do that with exactly with structs if the",
    "start": "1213120",
    "end": "1218200"
  },
  {
    "text": "same fields and the same structure essentially you can do the same just the name of it and then brackets and then pass the other type in yeah that's not",
    "start": "1218200",
    "end": "1224840"
  },
  {
    "text": "at all weird go code exactly and the fact I mean it just feels like so brittle but I guess if one of the",
    "start": "1224840",
    "end": "1231159"
  },
  {
    "text": "structures changes you get then a compile error it's a compiler time error the types are no longer compatible so",
    "start": "1231159",
    "end": "1237360"
  },
  {
    "text": "maybe it's quite reliable really um but is surprising to see because it looks like you're calling a method actually it",
    "start": "1237360",
    "end": "1243480"
  },
  {
    "text": "looks like you're calling a method and that is quite strange the 114 feature that's that's coming with",
    "start": "1243480",
    "end": "1250000"
  },
  {
    "text": "regards to the overlapping um interfaces is that you can now if you actually have",
    "start": "1250000",
    "end": "1255280"
  },
  {
    "text": "two interfaces that have the same method before 114 you couldn't do that now as",
    "start": "1255280",
    "end": "1260640"
  },
  {
    "text": "long as they match obviously then you can do that right and obviously your implementation can only have one say you have an open method or something or",
    "start": "1260640",
    "end": "1267080"
  },
  {
    "text": "whatever you your implementation only have one anyway so it makes the fact that you have two Bic the fact that the",
    "start": "1267080",
    "end": "1272240"
  },
  {
    "text": "embedder and the embedded have the same thing kind of makes it moot so now you're allowed to do that the component won't yell at you so that's that's the",
    "start": "1272240",
    "end": "1277880"
  },
  {
    "text": "new thing I didn't know you weren't allowed to do that before actually funnily enough yeah yeah I think I never",
    "start": "1277880",
    "end": "1283360"
  },
  {
    "text": "tried to do that yeah I don't think yeah certainly I haven't I didn't know you couldn't do that I thought they'd be all",
    "start": "1283360",
    "end": "1289960"
  },
  {
    "text": "right anyway well now it is doesn't solve the problem I had but yeah that is it is useful that that fixes",
    "start": "1289960",
    "end": "1298000"
  },
  {
    "text": "there this episode is brought to you by Brave we deserve a better internet",
    "start": "1301400",
    "end": "1306960"
  },
  {
    "text": "that's why the team behind Brave reimagined what a browser could be brave is like Chrome the good parts even your",
    "start": "1306960",
    "end": "1313440"
  },
  {
    "text": "extensions will just work it has built-in add and tracker blocking easy anonymization with the the tour Network",
    "start": "1313440",
    "end": "1318760"
  },
  {
    "text": "earn tokens while you browse and use them to tip your favorite creators and did I mention is lightning fast turns",
    "start": "1318760",
    "end": "1324720"
  },
  {
    "text": "out the web is super fast when you remove all the Cru Download Brave today using the link in the show notes and",
    "start": "1324720",
    "end": "1329840"
  },
  {
    "text": "give tipping to try on changel log.com",
    "start": "1329840",
    "end": "1333919"
  },
  {
    "text": "[Music] so I know this is like really delayed",
    "start": "1336010",
    "end": "1343120"
  },
  {
    "text": "but earlier we were talking about single method interfaces I think the one thing that I want to point out is that one of the aspects of them that I really really",
    "start": "1343120",
    "end": "1349320"
  },
  {
    "text": "like is just that it makes writing closures and turning them into an interface much much easier yeah cuz",
    "start": "1349320",
    "end": "1354679"
  },
  {
    "text": "otherwise like using a closure for an interface would be like a nightmare yeah so I do this a lot with uh Handler Funk",
    "start": "1354679",
    "end": "1361840"
  },
  {
    "text": "again actually so my handlers which usually are methods on some server type",
    "start": "1361840",
    "end": "1367120"
  },
  {
    "text": "they when called return a function so they return a Handler a funk essentially",
    "start": "1367120",
    "end": "1372440"
  },
  {
    "text": "and in that case the compiler will it'll cast the type for you if it matches actually for that function case and so",
    "start": "1372440",
    "end": "1378840"
  },
  {
    "text": "essentially you get that little closure environment that you were talking about John where you can do some setup you can you know prepare some resources if it's",
    "start": "1378840",
    "end": "1385480"
  },
  {
    "text": "a a web request which it is in this case and then in the body of the function you return that's the hand that's the real",
    "start": "1385480",
    "end": "1391440"
  },
  {
    "text": "Handler that gets called every time so it's a tiny bit of indirection but what you get from that is you can have per",
    "start": "1391440",
    "end": "1398000"
  },
  {
    "text": "Handler dependencies just passed in as arguments you can have the little setup code all in one place near to you know",
    "start": "1398000",
    "end": "1406159"
  },
  {
    "text": "where your actual Handler is being done the work of it and similarly you can have like request and response types",
    "start": "1406159",
    "end": "1411600"
  },
  {
    "text": "also in that space as well and it keeps them all in one place out of the way and so for some projects I think that's",
    "start": "1411600",
    "end": "1418640"
  },
  {
    "text": "quite a nice little neat package nice little neat way of Designing out these",
    "start": "1418640",
    "end": "1423960"
  },
  {
    "text": "services this is a good time for a commercial break please purchase this dead air brought to you by",
    "start": "1423960",
    "end": "1433158"
  },
  {
    "text": "bedbar bitb for all your stroking of mats ego we're going to like find out",
    "start": "1434039",
    "end": "1439240"
  },
  {
    "text": "after this that it's like bit Bar's not been working with the latest update or",
    "start": "1439240",
    "end": "1444480"
  },
  {
    "text": "something uh yeah well no it works it doesn't really need many updates frankly",
    "start": "1444520",
    "end": "1449600"
  },
  {
    "text": "it's kind of like done for anyone that doesn't know it's the little project which puts the script the output of any",
    "start": "1449600",
    "end": "1455760"
  },
  {
    "text": "script or program into your M menu bar and the contents of your password manager into Matt's",
    "start": "1455760",
    "end": "1463880"
  },
  {
    "text": "email no I did but it still comes through little black dots so I still",
    "start": "1464320",
    "end": "1469880"
  },
  {
    "text": "can't read it it was a mistake on my part open developer tools yeah uh but so",
    "start": "1469880",
    "end": "1476120"
  },
  {
    "text": "actually it's a nice example really if we're talking about abstractions because the key point is like this the little",
    "start": "1476120",
    "end": "1482760"
  },
  {
    "text": "tool doesn't really do anything it just calls another program and then the output of that program is what basically",
    "start": "1482760",
    "end": "1488080"
  },
  {
    "text": "builds the menu bar and the menu that you get when you click it so it it's a kind of perfect example of an",
    "start": "1488080",
    "end": "1495159"
  },
  {
    "text": "abstraction that really worked because there's hundreds now of plugins for this and they all do kind of wildly different",
    "start": "1495159",
    "end": "1501960"
  },
  {
    "text": "things none of them that I could have imagined when I just made bit bar for the one case that I had it for so it's",
    "start": "1501960",
    "end": "1509360"
  },
  {
    "text": "nice it's that that's the the side of interfaces that enables other people so if you do provide an interface or a very",
    "start": "1509360",
    "end": "1515720"
  },
  {
    "text": "simple way uh for people to integrate and extend what you're doing if that's",
    "start": "1515720",
    "end": "1521240"
  },
  {
    "text": "easy then more people are going to do it and you know the point of having that there surely is for people to use it is",
    "start": "1521240",
    "end": "1527200"
  },
  {
    "text": "what you know it's enabling other people to also build on top of what you're doing so that's a great even for its own",
    "start": "1527200",
    "end": "1533919"
  },
  {
    "text": "sake it's great but obviously in business there's massive value as we've seen as well so we've talked about all",
    "start": "1533919",
    "end": "1540679"
  },
  {
    "text": "the the benefits of using interfaces can you can you think of reasons when you",
    "start": "1540679",
    "end": "1545760"
  },
  {
    "text": "should not use an interface that's a really good one I've definitely in the past overd done it I've definitely done",
    "start": "1545760",
    "end": "1554039"
  },
  {
    "text": "cases where I've overused interfaces when a simple struct it it turns out to",
    "start": "1554039",
    "end": "1559840"
  },
  {
    "text": "be much simpler I tend not to do that anymore cuz I tend to start with the structs first and then I let the",
    "start": "1559840",
    "end": "1565440"
  },
  {
    "text": "interfaces kind of find themselves or reveal themselves over time so you don't",
    "start": "1565440",
    "end": "1571159"
  },
  {
    "text": "you don't design your code you don't you don't you don't try to abstract too early by saying oh yeah this thing's",
    "start": "1571159",
    "end": "1576679"
  },
  {
    "text": "going to receive an interface so so Matt you can you go on record right now as saying you don't design your code well",
    "start": "1576679",
    "end": "1585080"
  },
  {
    "text": "come on Johnny just asked you a question do you or do you not sir design your code I feel like it designs",
    "start": "1585080",
    "end": "1591760"
  },
  {
    "text": "me I don't even know what that means um no well yes I mean obviously you do and",
    "start": "1591760",
    "end": "1598039"
  },
  {
    "text": "and and interfaces are a great way to do that as well especially if you're collaborating with people like you could say well you know we know that we have",
    "start": "1598039",
    "end": "1604840"
  },
  {
    "text": "our two things have to communicate so let's agree on the interface between them and we can both build towards that",
    "start": "1604840",
    "end": "1610840"
  },
  {
    "text": "so that in those context is is great but yeah of course like it is useful if you're just sketching Out Concepts",
    "start": "1610840",
    "end": "1617159"
  },
  {
    "text": "actually as sometimes in my notebook I'll actually write out go interfaces to try and think about what these things",
    "start": "1617159",
    "end": "1623679"
  },
  {
    "text": "are going to be doing and stuff but yeah I do tend to wait you know if I'm doing a package I want that to be like the",
    "start": "1623679",
    "end": "1629840"
  },
  {
    "text": "smallest possible footprint so I am definitely in that camp of I wouldn't have an interface unless it was an",
    "start": "1629840",
    "end": "1636080"
  },
  {
    "text": "extremely important part of this package like the reader IO reader IO writer",
    "start": "1636080",
    "end": "1642120"
  },
  {
    "text": "those kinds of types I think like sort of building on what Matt said one of the",
    "start": "1642120",
    "end": "1647200"
  },
  {
    "text": "down Ides to Jumping straight to an interface is that it it causes you to think oh I'm going to have like three",
    "start": "1647200",
    "end": "1652240"
  },
  {
    "text": "implementations of this and starting to like focus on breaking things into like multiple versions when sometimes that's",
    "start": "1652240",
    "end": "1657919"
  },
  {
    "text": "just never the case the classic example is typically like your database you're like what if we switch out for another",
    "start": "1657919",
    "end": "1663000"
  },
  {
    "text": "database but in reality most people never do that so you know it's one of",
    "start": "1663000",
    "end": "1668159"
  },
  {
    "text": "those like it's not that you can't do some of that stuff to sort of make it easier for you but it doesn't make sense",
    "start": "1668159",
    "end": "1673880"
  },
  {
    "text": "to bend over backwards to make this possible later when in reality you're probably not going to do",
    "start": "1673880",
    "end": "1679159"
  },
  {
    "text": "it yes and often whenever you think like",
    "start": "1679159",
    "end": "1684240"
  },
  {
    "text": "that the the the detail actually doesn't allow it anyway like two different data stores often behave very differently you",
    "start": "1684240",
    "end": "1690840"
  },
  {
    "text": "wouldn't treat them the same so it's more likely to encourage bigger changes",
    "start": "1690840",
    "end": "1695960"
  },
  {
    "text": "anyway isn't it so I completely yeah I've found every inter like when I design interfaces up front they're",
    "start": "1695960",
    "end": "1702399"
  },
  {
    "text": "almost never correct you know it's just cuz you're guessing you're taking a wild stab at",
    "start": "1702399",
    "end": "1710279"
  },
  {
    "text": "what you think the interface you know is and especially if you go ahead and publish that now you know like I've been",
    "start": "1710279",
    "end": "1716720"
  },
  {
    "text": "doing a lot of work with interfaces and whatever but you know and recently and I can tell you that you know a lot of what",
    "start": "1716720",
    "end": "1722919"
  },
  {
    "text": "I've been doing now is working with stuff with problems that I do understand and problems that I do know what these",
    "start": "1722919",
    "end": "1728600"
  },
  {
    "text": "interfaces need to look like now and how people are using them but even then I'm still saying what's the simplest I can",
    "start": "1728600",
    "end": "1735640"
  },
  {
    "text": "get away with and see how I far can push that before it starts breaking right and before I need a second fit month method",
    "start": "1735640",
    "end": "1742200"
  },
  {
    "text": "or a concrete type or something further down the line but yeah yeah so in Buffalo um in the Buffalo project you",
    "start": "1742200",
    "end": "1750159"
  },
  {
    "text": "you're quite flexible it's kind of like a framework and it's flexible it lets people plug different things in and out",
    "start": "1750159",
    "end": "1755840"
  },
  {
    "text": "doesn't it wait a minute I feel like you jumped about 10 steps oh really yeah yeah oh no I mean",
    "start": "1755840",
    "end": "1763880"
  },
  {
    "text": "like generally though Buffalo well the reason why interfaces are important and these kinds of Concepts abstractions are",
    "start": "1763880",
    "end": "1770600"
  },
  {
    "text": "important they're especially important in the Buffalo project because of the nature of it the fact that you can use",
    "start": "1770600",
    "end": "1775840"
  },
  {
    "text": "different Technologies and well yeah the reason I jumped ahead was um I think Buffalo actually does a terrible job",
    "start": "1775840",
    "end": "1782080"
  },
  {
    "text": "today of doing that how does it work today well today we have a lot of hard",
    "start": "1782080",
    "end": "1788799"
  },
  {
    "text": "concrete types all over the place lots of dependencies you know we've got a plug-in system that goes and searches",
    "start": "1788799",
    "end": "1794919"
  },
  {
    "text": "your path for executable B AR's named a certain thing and asks them for",
    "start": "1794919",
    "end": "1800080"
  },
  {
    "text": "information it's very slow it just in generally as a whole the Buffalo project was very much so like a lot of projects",
    "start": "1800080",
    "end": "1807640"
  },
  {
    "text": "right I I started it when I first came to to go and you know I started writing",
    "start": "1807640",
    "end": "1814600"
  },
  {
    "text": "Ruby for go basically and we we all bring our baggage with us right and so a",
    "start": "1814600",
    "end": "1819799"
  },
  {
    "text": "lot of this has grown over time with just you know me making choices that at the time seem logical or at the time",
    "start": "1819799",
    "end": "1826559"
  },
  {
    "text": "where what I just knew how to do because I didn't know go well enough to make those choices and things kind of you",
    "start": "1826559",
    "end": "1832279"
  },
  {
    "text": "know and then as projects grow right you know things evolve and people come in",
    "start": "1832279",
    "end": "1837559"
  },
  {
    "text": "and changes are made and new requirements are added on whatever so today you know what we have with Buffalo",
    "start": "1837559",
    "end": "1844080"
  },
  {
    "text": "isn't as pluggable as I want it to be and it doesn't achieve the goals I wanted to in terms of you know saying I",
    "start": "1844080",
    "end": "1850640"
  },
  {
    "text": "don't want to use pop I want to use gorm I want to make that as seamless as possible I don't want to use gorm I want",
    "start": "1850640",
    "end": "1855960"
  },
  {
    "text": "to use nothing I want to use you know ego templates or Raymond",
    "start": "1855960",
    "end": "1861519"
  },
  {
    "text": "templates or whatever templating you want right or whatever it is you want to do right now you can't do that in",
    "start": "1861519",
    "end": "1866960"
  },
  {
    "text": "Buffalo so we we I definitely had to go back to the",
    "start": "1866960",
    "end": "1873799"
  },
  {
    "text": "drawing board and we're currently rewriting it all now using completely different system but all interface",
    "start": "1873799",
    "end": "1880480"
  },
  {
    "text": "driven using pretty much all of what we've just been talking about I have to ask though yeah if I'm going to use a",
    "start": "1880480",
    "end": "1887200"
  },
  {
    "text": "framework I wanted to make some decisions for me I wanted to be opinionated I mean personally I think",
    "start": "1887200",
    "end": "1892240"
  },
  {
    "text": "that's the reason why I use a framework and not kind of one of the reasons to use a framework right I'm with you so if you're now telling me hey",
    "start": "1892240",
    "end": "1900120"
  },
  {
    "text": "you're going to provide this whole new pluggable system that can basically take any RM tooling you want it can use any",
    "start": "1900120",
    "end": "1906600"
  },
  {
    "text": "any you know um UI interface you want whatever whatever all the bits and pieces if you make everything pluggable",
    "start": "1906600",
    "end": "1912399"
  },
  {
    "text": "then I think do you not create another problem now now you have to sort of document patterns hey you could use you",
    "start": "1912399",
    "end": "1918519"
  },
  {
    "text": "know this set of things this for RM this for you know template generation this for that it's almost like you're pushing",
    "start": "1918519",
    "end": "1925440"
  },
  {
    "text": "the decision to the user of the of the framework as opposed to being opinionate",
    "start": "1925440",
    "end": "1930880"
  },
  {
    "text": "about it absolutely doing that I think a little bit cleaner than than you might",
    "start": "1930880",
    "end": "1935960"
  },
  {
    "text": "be imagining it mhm you know I mean like Buffalo today right now you can say you know generate a new app and you get this",
    "start": "1935960",
    "end": "1941679"
  },
  {
    "text": "whole web stack and it's got node and it's got pop and it's got plush and all that sort of stuff right and that's that",
    "start": "1941679",
    "end": "1947360"
  },
  {
    "text": "very opinionated thing you're talking about and there's also a flag you can generate a Json one which slightly",
    "start": "1947360",
    "end": "1953120"
  },
  {
    "text": "different right and that won't ever go away that is just you know we will still have what you know those kind of I don't",
    "start": "1953120",
    "end": "1959240"
  },
  {
    "text": "know temp rails calls them like templates but I'm not quite sure exactly like kind of default presets if presets",
    "start": "1959240",
    "end": "1965720"
  },
  {
    "text": "a good word right You' say like give me the web preset you know and buffalo will ship with a few of them and you're going",
    "start": "1965720",
    "end": "1971840"
  },
  {
    "text": "to get a file you know you're going to get a go file that has all those plugins in them and you can just pull them out or add your own whatever or you could",
    "start": "1971840",
    "end": "1979279"
  },
  {
    "text": "come up with a different preset that your company has of all these plugins um and just use that instead so yeah I",
    "start": "1979279",
    "end": "1985720"
  },
  {
    "text": "there's always going to be opinions and it's just like you know rails basically generates a base camp for you when you",
    "start": "1985720",
    "end": "1991840"
  },
  {
    "text": "do rails new right I mean Buffalo New will always generate the base camp for me I would assume right or something",
    "start": "1991840",
    "end": "1999120"
  },
  {
    "text": "like that but we need to make it easier for other people you know not everybody wants pop not everybody wants these",
    "start": "1999120",
    "end": "2004679"
  },
  {
    "text": "things and and I know myself I have hit points where I'm like I need to do X Y",
    "start": "2004679",
    "end": "2010399"
  },
  {
    "text": "and Z and I can't because I don't have the hooks in the tooling I don't have the hooks in the the library itself",
    "start": "2010399",
    "end": "2019440"
  },
  {
    "text": "right and when we talk about tooling and CIS then you start talking about how do you get versioning and stuff like that",
    "start": "2019440",
    "end": "2024960"
  },
  {
    "text": "but that's getting way off this track do you think if you had the opportunity to",
    "start": "2024960",
    "end": "2031360"
  },
  {
    "text": "sit and design for much longer before you started Buffalo that you would have",
    "start": "2031360",
    "end": "2036600"
  },
  {
    "text": "come to to these realizations just just by exploring in your mind or do you think the the process was important oh",
    "start": "2036600",
    "end": "2043440"
  },
  {
    "text": "God no I think everybody else would probably agree with it you can't design stuff like this in a vacuum if you've",
    "start": "2043440",
    "end": "2050118"
  },
  {
    "text": "never written a web framework and managed a web framework and all that goes along with something like a like",
    "start": "2050119",
    "end": "2056878"
  },
  {
    "text": "Buffalo for example or if you're writing Docker or whatever tool it is you're talking about project you're talking",
    "start": "2056879",
    "end": "2062520"
  },
  {
    "text": "about you can't just start one of those in a vacuum and say I know how to solve this the problems are always infinitely",
    "start": "2062520",
    "end": "2069158"
  },
  {
    "text": "more complex than you know always it doesn't matter the domain",
    "start": "2069159",
    "end": "2074520"
  },
  {
    "text": "so no I could not have come up with a better design than I did when I first started writing Buffalo when I first",
    "start": "2074520",
    "end": "2079720"
  },
  {
    "text": "started writing Buffalo what I can do is spend the last six months going on a",
    "start": "2079720",
    "end": "2085200"
  },
  {
    "text": "kind of a Cod isance A Vision Quest if you will for code trying to to figure out what that needs to be what it needs",
    "start": "2085200",
    "end": "2091960"
  },
  {
    "text": "to be to be truly idiomatic and pluggable and easy and dependable and",
    "start": "2091960",
    "end": "2099200"
  },
  {
    "text": "trusted you can only do that sort of a thing with time you you in experience yeah absolutely so in the way this next",
    "start": "2099200",
    "end": "2106040"
  },
  {
    "text": "API is emerged in some ways out of what you had before but also of course it's not to",
    "start": "2106040",
    "end": "2113119"
  },
  {
    "text": "say you shouldn't do any design I mean that's what you're doing now is when you're thinking about this you're taking everything you know before and putting",
    "start": "2113119",
    "end": "2119440"
  },
  {
    "text": "into then a new design yeah so of course there's value in that yeah I mean we're currently rewriting the entire CLI",
    "start": "2119440",
    "end": "2126400"
  },
  {
    "text": "project uh to a V2 um using Puro and and kind of",
    "start": "2126400",
    "end": "2132480"
  },
  {
    "text": "interface based plugins to really drive this and and we're about I would say about 70% done and including some major",
    "start": "2132480",
    "end": "2140640"
  },
  {
    "text": "pieces like generate the generate subcommand the re generate resource and build and test and so far it's holding",
    "start": "2140640",
    "end": "2147839"
  },
  {
    "text": "up beautifully and we've got very small interfaces not a ton of them they're all",
    "start": "2147839",
    "end": "2153119"
  },
  {
    "text": "standard libraries there's no like Buffalo types everything is plugin even the sub commands are plugins and it's",
    "start": "2153119",
    "end": "2160440"
  },
  {
    "text": "all managed with just a slice of plugins it's ridiculously simple in its Concepts",
    "start": "2160440",
    "end": "2166520"
  },
  {
    "text": "but really powerful you can build really amazing things with just a few interfaces if you line them up",
    "start": "2166520",
    "end": "2172359"
  },
  {
    "text": "correctly and think about what it is you're doing and you set yourself a space to work in you know for me it's",
    "start": "2172359",
    "end": "2179079"
  },
  {
    "text": "been understanding that everything is a plugin and you know so you take something like Buffalo generate that",
    "start": "2179079",
    "end": "2185400"
  },
  {
    "text": "generate command is just another plugin and it implements the one interface you need to be a subcommand of Buffalo which",
    "start": "2185400",
    "end": "2192200"
  },
  {
    "text": "is a main function takes a context root string for where you are and a slice of arguments returns an error right that's",
    "start": "2192200",
    "end": "2198800"
  },
  {
    "text": "it now it's a sub command of Buffalo and that generate command that generate plugin issues I you know three or four",
    "start": "2198800",
    "end": "2207480"
  },
  {
    "text": "interfaces maybe that say Hey if you implement these you're going to get these different lifestyle hooks when you",
    "start": "2207480",
    "end": "2212839"
  },
  {
    "text": "run Buffalo generate one of them being say subcommand of Buffalo generate like resource course and that's it and so",
    "start": "2212839",
    "end": "2218480"
  },
  {
    "text": "this you if you're you can write your own implementation to generate if you speak those couple interfaces you can",
    "start": "2218480",
    "end": "2224920"
  },
  {
    "text": "write your own dropin replacement for it right or any of the other things so it's",
    "start": "2224920",
    "end": "2229960"
  },
  {
    "text": "not about a lot of interfaces it's about targeted interfaces it's about defining",
    "start": "2229960",
    "end": "2235000"
  },
  {
    "text": "the scope of where your interfaces are yeah I like that idea uh which I think",
    "start": "2235000",
    "end": "2240200"
  },
  {
    "text": "everyone could actually use potentially you don't have to be building a kind of Buffalo for it to apply but that idea of",
    "start": "2240200",
    "end": "2247040"
  },
  {
    "text": "having hooks into something so if you do have some process that's that's kind of a closed box process but you do you may",
    "start": "2247040",
    "end": "2254800"
  },
  {
    "text": "want some hooks into that uh having different interfaces for each hook",
    "start": "2254800",
    "end": "2260000"
  },
  {
    "text": "essentially each method gets its own interface and then the they get to just implement the methods that they care",
    "start": "2260000",
    "end": "2266319"
  },
  {
    "text": "about um you can of course check if a type implements an interfacing go very easily and if you use the two argument",
    "start": "2266319",
    "end": "2273520"
  },
  {
    "text": "format then you know you're not going to panic when they don't implement me that so that's pretty safe so you could use",
    "start": "2273520",
    "end": "2279280"
  },
  {
    "text": "that pattern to allow other people then to hook into your own code and a bit like how you've done it for Buffalo yeah",
    "start": "2279280",
    "end": "2285599"
  },
  {
    "text": "exactly one of the examples I like to use is um the Buffalo develop Buffalo Dev subcommand which currently you know",
    "start": "2285599",
    "end": "2292839"
  },
  {
    "text": "watches your go files compiles them restarts your app every time you're you're you're working which is in you",
    "start": "2292839",
    "end": "2298440"
  },
  {
    "text": "know when you're working with compiled language is great so every time you go back to your browser it's the fresh app again right and same thing with webpack",
    "start": "2298440",
    "end": "2305000"
  },
  {
    "text": "but the problem is you can't add your own build scripts right you can't say I want",
    "start": "2305000",
    "end": "2310160"
  },
  {
    "text": "something else that's watching my files and and running my tests you can't have something else that maybe is starting up",
    "start": "2310160",
    "end": "2316240"
  },
  {
    "text": "a Docker service right and that you know there's no way of hooking into that build life cycle right but you could",
    "start": "2316240",
    "end": "2323599"
  },
  {
    "text": "easily add a couple plugins and this is exactly what that the develop plugin for Buffalo does now or will do um in V2 is",
    "start": "2323599",
    "end": "2331880"
  },
  {
    "text": "it's like okay well we've got a before develop and after develop so if you want to set set up some stuff you need to",
    "start": "2331880",
    "end": "2337560"
  },
  {
    "text": "launch Docker whatever write some files you know run migrations before everything starts up do that there's a",
    "start": "2337560",
    "end": "2343800"
  },
  {
    "text": "tear down you can hook into and then there's this a develop that you can be you can Implement that the developer",
    "start": "2343800",
    "end": "2349800"
  },
  {
    "text": "interface and get spawn off in a go routine with everybody else you know to to run your things you need to and again",
    "start": "2349800",
    "end": "2356440"
  },
  {
    "text": "that's still that's context string slice of strings an error and you get context",
    "start": "2356440",
    "end": "2362560"
  },
  {
    "text": "gives you all that cancellation right you can easily test async code if you're taking a context as",
    "start": "2362560",
    "end": "2369079"
  },
  {
    "text": "your first argument so in this case testing this plugin that runs all these things in a go routine was super easy I",
    "start": "2369079",
    "end": "2376319"
  },
  {
    "text": "just wrote another plugin that implemented that one function and then I just canceled the context when it ran",
    "start": "2376319",
    "end": "2382359"
  },
  {
    "text": "that was that was all I needed to do so they're easily testable and you can hook in with so much ease that it's they're",
    "start": "2382359",
    "end": "2390800"
  },
  {
    "text": "really powerful if you start thinking about interfaces in the right way and yeah you can do some pretty amazing",
    "start": "2390800",
    "end": "2398119"
  },
  {
    "text": "stuff yeah you reminded me of another one that's that's great and John and I were talking about this the week as well",
    "start": "2398119",
    "end": "2405200"
  },
  {
    "text": "um and it's this it's that idea of being able to wrap things with interfaces so a",
    "start": "2405200",
    "end": "2411079"
  },
  {
    "text": "bit like how the middleware things work in the HTTP where you have a function that takes in a Handler and returns a",
    "start": "2411079",
    "end": "2416920"
  },
  {
    "text": "Handler and then what you can essentially do is create a new Handler that does extra things before and after",
    "start": "2416920",
    "end": "2423359"
  },
  {
    "text": "passing the execution on to the other Handler and so that thing of wrapping is actually quite useful and one trick that",
    "start": "2423359",
    "end": "2429839"
  },
  {
    "text": "you can use as well if you've got like a long running IO copy operation and you",
    "start": "2429839",
    "end": "2435119"
  },
  {
    "text": "want to cancel that with context you can create a kind of a reader with context",
    "start": "2435119",
    "end": "2441680"
  },
  {
    "text": "yourself which essentially wraps another reader and intercepts the read method",
    "start": "2441680",
    "end": "2447000"
  },
  {
    "text": "and that's obviously the first one that gets called checks to see if the context has been cancelled by checking the er er",
    "start": "2447000",
    "end": "2453760"
  },
  {
    "text": "method if that returns an error it can then the read method can return the error if not it passes it on to the",
    "start": "2453760",
    "end": "2459760"
  },
  {
    "text": "inner reader that's a way that you can actually get cancelable IO copy you know",
    "start": "2459760",
    "end": "2464800"
  },
  {
    "text": "which it's really cool to think that just because of these basic interfaces you can add actually quite a lot of",
    "start": "2464800",
    "end": "2471480"
  },
  {
    "text": "power just by uh thinking about it in the right way yeah the uh the reader is a really fun one to experiment with like",
    "start": "2471480",
    "end": "2478079"
  },
  {
    "text": "I would definitely encourage anybody trying to get like wrapped their head around this idea to spend some time with that because like when I was messing",
    "start": "2478079",
    "end": "2484640"
  },
  {
    "text": "around the context like Matt and I were talking about is it possible to cancel a reader and we for whatever reason we",
    "start": "2484640",
    "end": "2490480"
  },
  {
    "text": "hadn't read the whole thread on the GitHub issue where somebody actually proposed you know just wrapping it like",
    "start": "2490480",
    "end": "2495599"
  },
  {
    "text": "we said but in the in the process of looking at it I was like all right well let me go ahead and just you know throw this context in there and just check to",
    "start": "2495599",
    "end": "2501400"
  },
  {
    "text": "see if it's canceled and to stop it one of the issues you run into is if you're doing really small files to test it your",
    "start": "2501400",
    "end": "2506720"
  },
  {
    "text": "one read will just read the entire file in one method call so it's like well that doesn't work but then you can quickly be like okay can I write make",
    "start": "2506720",
    "end": "2513200"
  },
  {
    "text": "like another uh you know another reader that limits it to reading five byes at a time and like now you have an easy way",
    "start": "2513200",
    "end": "2519680"
  },
  {
    "text": "of saying like I you know I can chunk this and and make it a little bit easier to see when it cancels and I can",
    "start": "2519680",
    "end": "2524839"
  },
  {
    "text": "actually have another one that's set that after it reads maybe eight bytes it actually cancels the context so you can",
    "start": "2524839",
    "end": "2530119"
  },
  {
    "text": "do these things to sort of like sequentially exactly see what's happening and make sure your code's doing what you think it's doing and you",
    "start": "2530119",
    "end": "2536040"
  },
  {
    "text": "get this it ends up just it's really weird I guess at first but it's also really cool seeing like how much control",
    "start": "2536040",
    "end": "2541880"
  },
  {
    "text": "you have over these things by just chaining these interfaces together and this stems from a a single method",
    "start": "2541880",
    "end": "2547839"
  },
  {
    "text": "interface which is the crazy part you know it's not like we went ahead and had some really complicated types it was just a read method the single method",
    "start": "2547839",
    "end": "2554680"
  },
  {
    "text": "interfaces are really key for stuff like that because like we've been talking about you know you can just create those types right there in your test and have",
    "start": "2554680",
    "end": "2561920"
  },
  {
    "text": "them do whatever you need them to do whatever you need them to do and then",
    "start": "2561920",
    "end": "2567119"
  },
  {
    "text": "just an interface whether it's read five bytes and cancel whether it's you know",
    "start": "2567119",
    "end": "2572319"
  },
  {
    "text": "capture the arguments and whatever that came into this function so you can check them later and then cancel a context or",
    "start": "2572319",
    "end": "2578280"
  },
  {
    "text": "return some error you wanted to return you can just Implement those types right there implementations of them it using",
    "start": "2578280",
    "end": "2585480"
  },
  {
    "text": "simple functions or slices or whatever you need to do and it'll never get as complicated as abstract classes and big",
    "start": "2585480",
    "end": "2593359"
  },
  {
    "text": "class hierarchies used to in C because this technique really only works well with tiny little interfaces so I think",
    "start": "2593359",
    "end": "2600920"
  },
  {
    "text": "we kind of It Go protects us a little bit there there's another trick you reminded me of with when we talked about wrapping if you're doing an HTTP",
    "start": "2600920",
    "end": "2608200"
  },
  {
    "text": "response or you're writing to a file and you're and you're copying or you're writing to that file if you want to see",
    "start": "2608200",
    "end": "2614400"
  },
  {
    "text": "what's been written out you can actually just replace the writer with a um a multi-writer and pass in os. standardout",
    "start": "2614400",
    "end": "2622559"
  },
  {
    "text": "as one of the writers OS standard out is a file so it actually implements I",
    "start": "2622559",
    "end": "2627920"
  },
  {
    "text": "writer and you pass in also the original writer so it still carries on doing what it was doing before but because of that",
    "start": "2627920",
    "end": "2634119"
  },
  {
    "text": "multiwriter you also see it printed out into standard out so again tiny little",
    "start": "2634119",
    "end": "2639839"
  },
  {
    "text": "not many keystrokes and suddenly you can peer inside your code without having to open up a debugger and things and",
    "start": "2639839",
    "end": "2646000"
  },
  {
    "text": "they're difficult to use especially when you're dealing with bite streams and things there's a lot of really cool ones",
    "start": "2646000",
    "end": "2651440"
  },
  {
    "text": "like that in the iio package like t- reader is another one that it does kind of like what Matt was saying I believe except whenever you're reading you can",
    "start": "2651440",
    "end": "2658240"
  },
  {
    "text": "actually pass in something that'll write everything that it reads to that output so you can actually have it right to you know standard out everything that it's",
    "start": "2658240",
    "end": "2664200"
  },
  {
    "text": "reading from a file so you can actually see like what am I actually reading from this you know HTTP request body and what",
    "start": "2664200",
    "end": "2670559"
  },
  {
    "text": "does it look like and you don't interfere with the rest of your code you just wrap it real quick test it make sure you look at it and Visually see",
    "start": "2670559",
    "end": "2676319"
  },
  {
    "text": "like what am I getting and then you can remove it as soon as you're done yeah that the multi ride is awesome I use",
    "start": "2676319",
    "end": "2682680"
  },
  {
    "text": "that one all the time just for that purpose just for debugging what I'm expected to see if I'm generating files",
    "start": "2682680",
    "end": "2688640"
  },
  {
    "text": "or whatever it's like why am I not seeing that yeah it's important isn't it in",
    "start": "2688640",
    "end": "2694640"
  },
  {
    "text": "some cases and and sometimes you don't want to interfere with what it's doing you don't want to invoke the Heisenberg",
    "start": "2694640",
    "end": "2700760"
  },
  {
    "text": "Principle you want to be able to observe it and for it not to change Behavior I mean nothing's worse than like you're",
    "start": "2700760",
    "end": "2706440"
  },
  {
    "text": "trying to debug and in the process of like interfering with it you break it yourself and you're like it was never",
    "start": "2706440",
    "end": "2711480"
  },
  {
    "text": "going to work after I did that yeah right yeah I saw a great example which involved putting a log line the log line",
    "start": "2711480",
    "end": "2717920"
  },
  {
    "text": "slowed the program down enough that the behavior changed yeah and it was obviously the",
    "start": "2717920",
    "end": "2723640"
  },
  {
    "text": "kind of thing you do when you when you're debugging something you going put some log statements in even that can interfere in some cases yeah I I used to",
    "start": "2723640",
    "end": "2730720"
  },
  {
    "text": "have um weird ones in Ruby where just the act of printing it would cause",
    "start": "2730720",
    "end": "2737480"
  },
  {
    "text": "something in the the function or the whatever it was I was trying to debug would get kicked off and it would",
    "start": "2737480",
    "end": "2742960"
  },
  {
    "text": "actually produce different results when you printed it versus when you like just executed it I think that's one that",
    "start": "2742960",
    "end": "2749800"
  },
  {
    "text": "catches beginners off guard like if they're dealing with a linked list they'll like iterate through it to actually print it out and then they",
    "start": "2749800",
    "end": "2756040"
  },
  {
    "text": "won't realize that their list is pointing to the end of the list which is nothing and then they'll be like why is this L why is it not working anymore",
    "start": "2756040",
    "end": "2762880"
  },
  {
    "text": "I've seen so many beginners get messed up by that it's like no you need to reset back to the front of your list and like if you don't have a pointer to that",
    "start": "2762880",
    "end": "2769119"
  },
  {
    "text": "anymore like you're you're done like you so printing out really screws you up yeah that's a great one well in Ruby",
    "start": "2769119",
    "end": "2776839"
  },
  {
    "text": "of course you could just do anything there weren't any rules so someone probably that took the 2s method and",
    "start": "2776839",
    "end": "2783240"
  },
  {
    "text": "just wrote their own and did some some crazy in there and that's it well it's usually was never even anything that",
    "start": "2783240",
    "end": "2790880"
  },
  {
    "text": "like you know mean or intentional it's usually that like the 2s was probably",
    "start": "2790880",
    "end": "2796480"
  },
  {
    "text": "calling some other method that you that print that gave you a default value and",
    "start": "2796480",
    "end": "2802359"
  },
  {
    "text": "it was maybe calculating a default value or something right or they maybe had some cashing logic or something exctly",
    "start": "2802359",
    "end": "2809160"
  },
  {
    "text": "yeah and so it was never NE it's not wasn't I mean I'm sure it wasn't I wasn't suggesting Ruby people go around",
    "start": "2809160",
    "end": "2815960"
  },
  {
    "text": "casting spells on each other or anything no no no and I've certainly have never modified the plus sign on numeric and",
    "start": "2815960",
    "end": "2822559"
  },
  {
    "text": "Ruby to do division uh to my co-workers",
    "start": "2822559",
    "end": "2827599"
  },
  {
    "text": "ever yeah cuz why wouldn't you want a language that lets you change what the plus symbol",
    "start": "2827599",
    "end": "2832839"
  },
  {
    "text": "does hey you know what it made debugging fun you know it was an adventure every",
    "start": "2832839",
    "end": "2839040"
  },
  {
    "text": "time I don't know if I want to Adventure when I'm Co I mean when I was you didn't you",
    "start": "2839040",
    "end": "2844880"
  },
  {
    "text": "didn't like gripping source code that didn't exist that wasn't a fun time for you Johnny no I don't I don't miss",
    "start": "2844880",
    "end": "2851680"
  },
  {
    "text": "method miss you could Implement every interface that way yeah but you couldn't find it so it's hard to find it's hard to say it was missing right method",
    "start": "2851680",
    "end": "2858800"
  },
  {
    "text": "missing itself isn't defined anywhere right I do miss Ruby sometimes it was",
    "start": "2858800",
    "end": "2866200"
  },
  {
    "text": "fun to do you could do some really fun stuff with things like method missing but you could of course do do some very",
    "start": "2866200",
    "end": "2873119"
  },
  {
    "text": "appropriate use as well I did absolutely I mean really no but honestly you look",
    "start": "2873119",
    "end": "2878160"
  },
  {
    "text": "at rails and I mean rails was one of the things that made rails rails was method",
    "start": "2878160",
    "end": "2883319"
  },
  {
    "text": "missing and like a lot of rails is based entirely off of method missing all that",
    "start": "2883319",
    "end": "2889280"
  },
  {
    "text": "magic that everybody loves in rails is essentially using method missing",
    "start": "2889280",
    "end": "2894720"
  },
  {
    "text": "sometimes well and sometimes you know not yeah so for anyone not familiar basically if you call the method on an",
    "start": "2894720",
    "end": "2901359"
  },
  {
    "text": "object and if you do that in go if you call a method and it's not there that's a compile time error in Ruby it would",
    "start": "2901359",
    "end": "2906480"
  },
  {
    "text": "just let you do that but then it would just call like a catch all inside called method missing and so you could then say",
    "start": "2906480",
    "end": "2913720"
  },
  {
    "text": "then it gave you kind of second chance of seeing if you could do something with it and yeah a lot of the Rails things you could write things like find by name",
    "start": "2913720",
    "end": "2920960"
  },
  {
    "text": "and age and then that becomes a new method that you just invented yeah you",
    "start": "2920960",
    "end": "2926079"
  },
  {
    "text": "basically would then you parse out you could parse the the name of the method and generate what in that case it was",
    "start": "2926079",
    "end": "2932119"
  },
  {
    "text": "generating queries for SQL um and you could also in Ruby you could also if a",
    "start": "2932119",
    "end": "2937240"
  },
  {
    "text": "type didn't exist a module or a type you could also capture that uh and Define",
    "start": "2937240",
    "end": "2943799"
  },
  {
    "text": "Types on the fly so I I had a library that did uh distributed Ruby and it",
    "start": "2943799",
    "end": "2949359"
  },
  {
    "text": "would actually if you just ask for any type inside of a module it would just",
    "start": "2949359",
    "end": "2955040"
  },
  {
    "text": "create the module it would create the type and connect it to a remote data source somewhere um for the drb stuff",
    "start": "2955040",
    "end": "2961960"
  },
  {
    "text": "and and it just did all that by capturing those error hook where things don't exist in groovy",
    "start": "2961960",
    "end": "2968240"
  },
  {
    "text": "that's I know isn't it ter oh my god oh",
    "start": "2968240",
    "end": "2974200"
  },
  {
    "text": "[Applause] [Music] [Applause]",
    "start": "2976070",
    "end": "2981520"
  },
  {
    "text": "[Music] yeah hi there this is John Calhoun one",
    "start": "2981520",
    "end": "2987880"
  },
  {
    "text": "of your go time panelists when I'm not working on go time I create programming courses that help developers level up",
    "start": "2987880",
    "end": "2993640"
  },
  {
    "text": "their go skills and one of my more recent courses algorithms with go is live and I wanted to invite you to check",
    "start": "2993640",
    "end": "2999280"
  },
  {
    "text": "it out so it's completely free and in it we explore how algorithms and data structures work as well as how to",
    "start": "2999280",
    "end": "3005119"
  },
  {
    "text": "actually Implement them in go code so if you've ever had an interest in learning about algorithms or data structures or",
    "start": "3005119",
    "end": "3010920"
  },
  {
    "text": "if you felt like you understand them conceptually but just couldn't nail down that coding part this course is going to",
    "start": "3010920",
    "end": "3015960"
  },
  {
    "text": "be great for you we actually dive into coding everything we work on practice problems and it's a lot of fun you can",
    "start": "3015960",
    "end": "3021520"
  },
  {
    "text": "sign up completely free at algorithms withg go.com gotime again that's algorithms withg go.com gotime and don't",
    "start": "3021520",
    "end": "3029200"
  },
  {
    "text": "forget that last /go time bit it helps me keep track of how you found out about the course so that go time gets credit",
    "start": "3029200",
    "end": "3034520"
  },
  {
    "text": "for referring you thanks for [Music]",
    "start": "3034520",
    "end": "3054119"
  },
  {
    "text": "listening so getting back to go yes please I feel like we've talked about interfaces a bit how have we not talked",
    "start": "3054119",
    "end": "3060799"
  },
  {
    "text": "about errors like I feel like that's something we should talk about it's probably error is probably the most important interface we have in go",
    "start": "3060799",
    "end": "3067359"
  },
  {
    "text": "actually the best part of go you would say Matt Matthew the best interface in",
    "start": "3067359",
    "end": "3072640"
  },
  {
    "text": "go I thought bit bar is the best thing B bar is good there there's no bones no",
    "start": "3072640",
    "end": "3078599"
  },
  {
    "text": "one's ever said it's not yes Mark you have said it's not you",
    "start": "3078599",
    "end": "3083960"
  },
  {
    "text": "should yeah you shouldn't phone me at 3 to tell me just should you tell everyone",
    "start": "3083960",
    "end": "3090760"
  },
  {
    "text": "else your hours please your answer phones full by midnight I have no",
    "start": "3090760",
    "end": "3097280"
  },
  {
    "text": "choice yes well John I mean so I guess it depends on",
    "start": "3097599",
    "end": "3102960"
  },
  {
    "text": "what we want to talk about so the first the obvious thing is for anybody who's unaware um errors and go are just an",
    "start": "3102960",
    "end": "3108520"
  },
  {
    "text": "interface it's an interface that just has the single error method and it returns a string and it's it's weird how",
    "start": "3108520",
    "end": "3115640"
  },
  {
    "text": "powerful that ends up becoming because it allows you to return nil it allows you to just return any specific error",
    "start": "3115640",
    "end": "3120920"
  },
  {
    "text": "type you want you know I find that really useful because you'll see all this code where people get to return specific errors and you can actually",
    "start": "3120920",
    "end": "3127119"
  },
  {
    "text": "check them and see what they're doing it's probably led to some bad patterns too but but it does let you you know do",
    "start": "3127119",
    "end": "3133240"
  },
  {
    "text": "a lot more with the code than you otherwise could have so I guess I'd like to explore that more but I don't really know where to start any",
    "start": "3133240",
    "end": "3140799"
  },
  {
    "text": "suggestions I mean there's a couple things I'd like to look at like the first one is for you guys if you're writing code do you return specific",
    "start": "3140799",
    "end": "3147000"
  },
  {
    "text": "error types or do you just return an error that has a method and just tell them like look for this method with an",
    "start": "3147000",
    "end": "3154240"
  },
  {
    "text": "interface my first pass is with the simple aot types yeah um and then and",
    "start": "3154240",
    "end": "3159720"
  },
  {
    "text": "then if if the program gets complicated enough where I care where basically the",
    "start": "3159720",
    "end": "3165680"
  },
  {
    "text": "the call site needs to do different things depending on a kind of error it is then I'll start using a type terres",
    "start": "3165680",
    "end": "3172000"
  },
  {
    "text": "I'm assuming John you just just real quick just to clarify you're you're not ad advocating that we don't return the error interface you're just asking",
    "start": "3172000",
    "end": "3179280"
  },
  {
    "text": "whether we use simple like f. error F or errors. new or custom errors like to",
    "start": "3179280",
    "end": "3184400"
  },
  {
    "text": "give you examples like IO has like specific errors like end defile and different errors yeah so so there's some",
    "start": "3184400",
    "end": "3191079"
  },
  {
    "text": "like that but then you by using that you then make anybody who's using your package have a dependency on your",
    "start": "3191079",
    "end": "3196400"
  },
  {
    "text": "package which a lot of times when you're using interfaces your goal is to get rid of that new dependence right yeah mhm",
    "start": "3196400",
    "end": "3202640"
  },
  {
    "text": "but then the other side of it is you could return an error that you know just looks like the air but then they have to actually check does it implement this",
    "start": "3202640",
    "end": "3208880"
  },
  {
    "text": "interface where maybe it has another method of some sort right um and then more recently one of the things that",
    "start": "3208880",
    "end": "3214480"
  },
  {
    "text": "makes that even more confusing is with all the wrapping of erors when you start wrapping interfaces you lose access to",
    "start": "3214480",
    "end": "3220440"
  },
  {
    "text": "some of the embedded methods that are there which is something we didn't really get into but it is a a more",
    "start": "3220440",
    "end": "3225880"
  },
  {
    "text": "challenging thing to to tackle oh are we out of time we got to go we can't talk",
    "start": "3225880",
    "end": "3230960"
  },
  {
    "text": "about this anymore oh no we could always do another episode on the more advanced stuff as Mark tries to skirt out of the",
    "start": "3230960",
    "end": "3237680"
  },
  {
    "text": "issue I've used the error interface I I use errors. new by default for sure so",
    "start": "3237680",
    "end": "3243440"
  },
  {
    "text": "oh see I use f error F by the uh well I tend to use that there's an errors package Dave Cheney by the way was the",
    "start": "3243440",
    "end": "3249720"
  },
  {
    "text": "one that coined Sentinel errors and they're the special variable error types that you return context package does",
    "start": "3249720",
    "end": "3256160"
  },
  {
    "text": "this it has cancelled and deadline exceeded to errors that you can then see why the context has stopped so yes you",
    "start": "3256160",
    "end": "3263720"
  },
  {
    "text": "know that that's nice but as as John said it becomes part of the API doesn't it it becomes um part of the public",
    "start": "3263720",
    "end": "3270359"
  },
  {
    "text": "surface of it so you then can't change that you live with that that's then a designed decision Sentinel errors also",
    "start": "3270359",
    "end": "3276680"
  },
  {
    "text": "offer um a problem in that they can be changed at runtime oh right right oh",
    "start": "3276680",
    "end": "3282119"
  },
  {
    "text": "that's fun cuz they're just variables they're variables package level variables so you can declare you can",
    "start": "3282119",
    "end": "3287319"
  },
  {
    "text": "redeclare IO EO at any time Julie Q does a good talk on finding Dependable uh",
    "start": "3287319",
    "end": "3294319"
  },
  {
    "text": "dependencies Mark which I really recommend you watch again oh I've seen",
    "start": "3294319",
    "end": "3299440"
  },
  {
    "text": "that talk yeah yeah Dave Cheney is a good write up on making constant errors but I don't think everybody does it but",
    "start": "3299440",
    "end": "3305839"
  },
  {
    "text": "it is possible yeah but it depends what you're going to do with it that's the thing so it's nice to think oh we'll",
    "start": "3305839",
    "end": "3311359"
  },
  {
    "text": "build this system and all these errors will be strongly typed and everything will be brilliant but what's the real",
    "start": "3311359",
    "end": "3316720"
  },
  {
    "text": "use I mean you're going to end up just sticking these errors in a log or is it going to be a notification at some point",
    "start": "3316720",
    "end": "3322039"
  },
  {
    "text": "if if it's Mission critical so what I found myself doing is I find sometimes",
    "start": "3322039",
    "end": "3327880"
  },
  {
    "text": "for myself internally Sentinel errors can be very useful in a few different places so if I need one of those and and",
    "start": "3327880",
    "end": "3334559"
  },
  {
    "text": "sometimes not sorry not even a sentinel error let me take that back I just often might need to return the same error in",
    "start": "3334559",
    "end": "3340839"
  },
  {
    "text": "multiple places right you know uh file not found whatever the stupid era is",
    "start": "3340839",
    "end": "3345960"
  },
  {
    "text": "right resource not found and so I might declare that as a non-exported variable you know error at the top that I can",
    "start": "3345960",
    "end": "3352799"
  },
  {
    "text": "just return but it's not for anybody else to use it's not a sentinel error it's not exported documentation yeah",
    "start": "3352799",
    "end": "3358760"
  },
  {
    "text": "well it's no it's just more so I can say return file not found ER as opposed to f. error f file not file I can you know",
    "start": "3358760",
    "end": "3365960"
  },
  {
    "text": "I can just kind of declare the error once and return it but I'm not telling you to check for it I'm not making you",
    "start": "3365960",
    "end": "3371240"
  },
  {
    "text": "aware of it it's just so that I don't have to change yeah it's a shorthand exactly well it does let you change it",
    "start": "3371240",
    "end": "3377799"
  },
  {
    "text": "it does let you change it in one place also and so your methods would just return the error interface so externally",
    "start": "3377799",
    "end": "3383640"
  },
  {
    "text": "it just looks like a normal error right of course it is a normal error because you you have you either use errors new",
    "start": "3383640",
    "end": "3388680"
  },
  {
    "text": "to make it or it has somehow that error method on it yeah and I've been leaning",
    "start": "3388680",
    "end": "3393839"
  },
  {
    "text": "towards the behavior driven errors um again as you know the last few months as",
    "start": "3393839",
    "end": "3399319"
  },
  {
    "text": "I've been working more and more towards you know using interfaces a lot more that always that makes more sense to me",
    "start": "3399319",
    "end": "3406160"
  },
  {
    "text": "in terms of you know asking for information but I don't return a ton of errors that are customized like that anyway but we do have that that losing",
    "start": "3406160",
    "end": "3414440"
  },
  {
    "text": "that EMB Ed history thing becomes become a problem it's kind of like It's tricky because one of the cases that I'll use",
    "start": "3414440",
    "end": "3420720"
  },
  {
    "text": "like uh errors with extra methods on them for is like if I'm building a web server I sometimes like to differentiate",
    "start": "3420720",
    "end": "3425839"
  },
  {
    "text": "between an error where I can actually expose some information to the end user and an error where like the end user",
    "start": "3425839",
    "end": "3431039"
  },
  {
    "text": "just needs a generic something went wrong error that's it um because I've seen many applications that'll just expose the air every time and I'm like",
    "start": "3431039",
    "end": "3437319"
  },
  {
    "text": "that's probably a bad idea you know you shouldn't just be printing out strings when you don't really know what's in that string when it gets to the end user",
    "start": "3437319",
    "end": "3444039"
  },
  {
    "text": "and then the other like area I've seen it useful is if you have like users are submitting forms or they're doing",
    "start": "3444039",
    "end": "3449720"
  },
  {
    "text": "something um on the back end of your code you might have the same code handling an API and handling forms so it",
    "start": "3449720",
    "end": "3456440"
  },
  {
    "text": "might want to return something that says like this field is wrong or it's invalid or whatever um and then in the front end",
    "start": "3456440",
    "end": "3461720"
  },
  {
    "text": "you kind of render that differently you know if it's an HTML page you're going to render like an input box with a red line around it um if you're dealing with",
    "start": "3461720",
    "end": "3468640"
  },
  {
    "text": "Jon you might have something that says like this is the field that's wrong to try to help out the developer so there",
    "start": "3468640",
    "end": "3474359"
  },
  {
    "text": "are some errors that that's useful but when you start wrapping them it it becomes a little bit trickier and it's",
    "start": "3474359",
    "end": "3479680"
  },
  {
    "text": "not imposs like with wrapping it's not impossible luckily but that's like the one case of interface sort of embedding",
    "start": "3479680",
    "end": "3485440"
  },
  {
    "text": "that it doesn't cause you to lose it and that's because of the what the wrapper type is that what it is that has the",
    "start": "3485440",
    "end": "3491599"
  },
  {
    "text": "unwrap method yeah ER yeah that's like the the only interface where like the name of it is not what the method is so",
    "start": "3491599",
    "end": "3499319"
  },
  {
    "text": "like it always throws you off um but because of that you can actually write like errors do as or is I",
    "start": "3499319",
    "end": "3505760"
  },
  {
    "text": "forget which one it is but use one of those two you end like having to Def find a bunch of variables ahead of time",
    "start": "3505760",
    "end": "3511440"
  },
  {
    "text": "and it's kind of like it's not pretty looking but you can do it so like it not",
    "start": "3511440",
    "end": "3516880"
  },
  {
    "text": "being pretty kind of makes you only do it when it's important so that there is one upside of that is you just don't",
    "start": "3516880",
    "end": "3521960"
  },
  {
    "text": "throw it in there for everything it's like it has to be important enough for this code to look kind of ugly yeah but",
    "start": "3521960",
    "end": "3527400"
  },
  {
    "text": "but it is like tricky sometimes on that too whenever you have apis that return errors or if you're going to show them",
    "start": "3527400",
    "end": "3533880"
  },
  {
    "text": "in the UI somewh where I personally think that should be its own explicit mechanism in your code I don't think we",
    "start": "3533880",
    "end": "3541000"
  },
  {
    "text": "should use error for that I think error in go code means something's gone wrong like um it not not that like you this",
    "start": "3541000",
    "end": "3549319"
  },
  {
    "text": "this field doesn't exist or this um you know you don't have permission to access this resource those kinds of things",
    "start": "3549319",
    "end": "3556079"
  },
  {
    "text": "should be I think done explicitly because uh for these reasons it's too complicated and you expect these",
    "start": "3556079",
    "end": "3562720"
  },
  {
    "text": "different things to know too much about each other but yeah that was just a sort of extension on that otherwise I",
    "start": "3562720",
    "end": "3568079"
  },
  {
    "text": "completely agree I have to say uh we are approaching that special time where we",
    "start": "3568079",
    "end": "3573720"
  },
  {
    "text": "launch our new regular slot it's time for your unpopular",
    "start": "3573720",
    "end": "3580510"
  },
  {
    "text": "[Music] opinions unop",
    "start": "3580510",
    "end": "3585839"
  },
  {
    "text": "opinion I actually think you should probably",
    "start": "3585839",
    "end": "3590160"
  },
  {
    "text": "leave popular opinion",
    "start": "3591039",
    "end": "3596640"
  },
  {
    "text": "so let's go we actually have for the first time we have a an unpopular opinion from our slack Channel Dylan",
    "start": "3599200",
    "end": "3606799"
  },
  {
    "text": "writes that interface names should be adjectives rather than er verbs so he",
    "start": "3606799",
    "end": "3613200"
  },
  {
    "text": "prefers closable to closer what do you think about that is",
    "start": "3613200",
    "end": "3618760"
  },
  {
    "text": "that unpopular all I'll say is sometimes it is hard to twist a name into to",
    "start": "3618760",
    "end": "3625039"
  },
  {
    "text": "following that convention I mean I'm with deing on that one some you know you don't have to be dogmatic about it",
    "start": "3625039",
    "end": "3630400"
  },
  {
    "text": "sometimes you know it just for readability sake um just makes more sense to go what makes sense right I use",
    "start": "3630400",
    "end": "3636000"
  },
  {
    "text": "a combination of both cuz some are abs and some are SS I",
    "start": "3636000",
    "end": "3641960"
  },
  {
    "text": "mean some are more describing and some are more doing some are more verbs and some are more adjectives you know or",
    "start": "3641960",
    "end": "3648960"
  },
  {
    "text": "adverb I think that's fine I don't think you have to be dogmatic about it yeah I think it's nice to have a general",
    "start": "3648960",
    "end": "3654160"
  },
  {
    "text": "guideline to get everybody on the same page but it's not it's kind of like the uh what it was mentioned in the slack",
    "start": "3654160",
    "end": "3660599"
  },
  {
    "text": "Channel as well the accept interfaces return structs it's not a rule it's a it's a guideline to sort of get you",
    "start": "3660599",
    "end": "3666760"
  },
  {
    "text": "moving in the right direction but there's always exceptions to that yeah mhm uh choer Co powera on slack says",
    "start": "3666760",
    "end": "3675200"
  },
  {
    "text": "that they use a prefix for their interface names and I know that uh in C it was tradition to use like eye",
    "start": "3675200",
    "end": "3682240"
  },
  {
    "text": "closable so that you know it's an interface does anyone use prefixes or suffixes or anything like that if I see",
    "start": "3682240",
    "end": "3688880"
  },
  {
    "text": "I in front of any interface like that developer and I are going to have a little trap you refuse to implement it",
    "start": "3688880",
    "end": "3695880"
  },
  {
    "text": "yeah I'm not going to implement that ever I'm not going to implement that interface which takes a lot of work",
    "start": "3695880",
    "end": "3701160"
  },
  {
    "text": "that's just it well you know I mean again other languages do it and it's idiomatic in other languages so I think",
    "start": "3701160",
    "end": "3706520"
  },
  {
    "text": "that's fine for those languages in go it's not idiomatic and so right you know",
    "start": "3706520",
    "end": "3712400"
  },
  {
    "text": "if if a PR came across I would that had that for me I would probably ask them to to change it just because it doesn't",
    "start": "3712400",
    "end": "3719079"
  },
  {
    "text": "conform with kind of idiomatic go not for reasons I I may or may not agree",
    "start": "3719079",
    "end": "3725039"
  },
  {
    "text": "with it's just that's kind of what it is but yeah like all of these are interesting too because like the classic",
    "start": "3725039",
    "end": "3730839"
  },
  {
    "text": "example of a like so an example of a company like going completely against like style guides for a language is like",
    "start": "3730839",
    "end": "3737760"
  },
  {
    "text": "Google was pretty notorious for going against the python style guide slightly",
    "start": "3737760",
    "end": "3742799"
  },
  {
    "text": "internally and like even when the creator of python started working at Google he had to suddenly not use his",
    "start": "3742799",
    "end": "3748920"
  },
  {
    "text": "own style guide which would have been frustrating I'm sure but I think if you have an organization where your entire org is like using the I prefix then by",
    "start": "3748920",
    "end": "3756279"
  },
  {
    "text": "all means you know keep it consistent there that's probably more valuable than than being idiomatic but if you're working on open source then you need to",
    "start": "3756279",
    "end": "3762640"
  },
  {
    "text": "like conform to whatever the you the norm is there I say find out during the",
    "start": "3762640",
    "end": "3768760"
  },
  {
    "text": "interview I mean because I would seriously have a problem with that so Johnny the interviews is over do you",
    "start": "3768760",
    "end": "3774799"
  },
  {
    "text": "have any questions for us do you use any prefixes when naming your interfaces",
    "start": "3774799",
    "end": "3780079"
  },
  {
    "text": "well yes we do code I need some like legit production code with interfaces in it I need either a 10% bump or I'm",
    "start": "3780079",
    "end": "3790520"
  },
  {
    "text": "out I like there's still a price though there's always I am I am willing",
    "start": "3790520",
    "end": "3796400"
  },
  {
    "text": "to overlook this you know but you got to make it worth my watch they like have an intern just",
    "start": "3796400",
    "end": "3802520"
  },
  {
    "text": "write plugins for your everything you use just moves it it just hides it puts them back in and commit yeah exactly",
    "start": "3802520",
    "end": "3809559"
  },
  {
    "text": "just rewrites going Save Right your own version of gof fump just puts ey in front of every",
    "start": "3809559",
    "end": "3816599"
  },
  {
    "text": "interface go troll it could be a tool could make that nice nice unpopular",
    "start": "3816799",
    "end": "3823839"
  },
  {
    "text": "opinions I guess yeah yeah uh what about you Bates have you got an popular opinion mate got a popular one uh no I",
    "start": "3823839",
    "end": "3831200"
  },
  {
    "text": "don't have any popular ones uh everybody knows that so it's it was difficult",
    "start": "3831200",
    "end": "3837279"
  },
  {
    "text": "choosing an unpopular yeah that's the bit that you struggled with wasn't it that was the bit I struggled with yeah",
    "start": "3837279",
    "end": "3844039"
  },
  {
    "text": "and I think I I'm going to come up with uh I don't like the way that uh the main package and the main function is",
    "start": "3844039",
    "end": "3850480"
  },
  {
    "text": "designed I see explain explain explain uh yeah I think uh it promotes global",
    "start": "3850480",
    "end": "3858640"
  },
  {
    "text": "scope for example uh os. args comes to mind right uh we were talk just talking",
    "start": "3858640",
    "end": "3864000"
  },
  {
    "text": "about you can redefine I io. eof right uh for you know and the problem with you",
    "start": "3864000",
    "end": "3869119"
  },
  {
    "text": "know CIS is if you're not immediately taking that os. ARs and handing it off to something else it's hard to write",
    "start": "3869119",
    "end": "3875599"
  },
  {
    "text": "tests around everything's kind of globally scoped present working directory well it's technically is",
    "start": "3875599",
    "end": "3880920"
  },
  {
    "text": "global you know it again it's makes it hard to test if you're talking about those things right so I feel like those",
    "start": "3880920",
    "end": "3886960"
  },
  {
    "text": "that in a context we have no context when we're in there right and admittedly that was all after context came out",
    "start": "3886960",
    "end": "3893920"
  },
  {
    "text": "later but you know if the main package was exportable if we could call it if we",
    "start": "3893920",
    "end": "3900160"
  },
  {
    "text": "the main function was exportable and say took a context a work current working",
    "start": "3900160",
    "end": "3906079"
  },
  {
    "text": "directory the arguments and returned even a basic error maybe you still let us do os. exit whatever but if we return",
    "start": "3906079",
    "end": "3912839"
  },
  {
    "text": "an error just you know do a default exit of some kind and I think that would that",
    "start": "3912839",
    "end": "3918440"
  },
  {
    "text": "allows for better tested clis nicer looking code that go can give us that",
    "start": "3918440",
    "end": "3924200"
  },
  {
    "text": "information at runtime that's not difficult information to give us and I think it promotes a better kind of",
    "start": "3924200",
    "end": "3930960"
  },
  {
    "text": "generally a better way of writing our CIS right now I feel a lot of clis get written in the main function by accident",
    "start": "3930960",
    "end": "3938319"
  },
  {
    "text": "just because people are hacking away trying to get something right and they've got a big long main.go file",
    "start": "3938319",
    "end": "3943799"
  },
  {
    "text": "that's not very well tested or broken out and other people can't make use of",
    "start": "3943799",
    "end": "3949000"
  },
  {
    "text": "that CLI without compiling and shelling out I completely agree with that actually and what what I I solve that",
    "start": "3949000",
    "end": "3955839"
  },
  {
    "text": "problem though by I have a little run function and that takes in the args and it takes in an IO reader and a writer if",
    "start": "3955839",
    "end": "3963279"
  },
  {
    "text": "there's standard in standard out and returns an error and then I just have a standard little main I do create a",
    "start": "3963279",
    "end": "3969680"
  },
  {
    "text": "context in that main which is cancelled when command C is hit the first time that cancels the context then the second",
    "start": "3969680",
    "end": "3975839"
  },
  {
    "text": "command C exits the program so you know you don't want to be annoying people if if it's hanging for too long or",
    "start": "3975839",
    "end": "3981279"
  },
  {
    "text": "something right and then yeah and then you can write text code and just call run and pass in a different slice of",
    "start": "3981279",
    "end": "3987000"
  },
  {
    "text": "string for your arguments you could pass in different writer you could use a buffer so you can read then what was",
    "start": "3987000",
    "end": "3992359"
  },
  {
    "text": "written by your tool my biggest problem with that which you know again is definitely just having another giving it",
    "start": "3992359",
    "end": "3998440"
  },
  {
    "text": "to another function is a good thing my biggest problem there is I still can't as a third party I still can't use your",
    "start": "3998440",
    "end": "4003960"
  },
  {
    "text": "code programmatically from go yeah they're different aren't they packages and and programs are fundamentally",
    "start": "4003960",
    "end": "4009559"
  },
  {
    "text": "different so the way I I'm trying to solve it uh in my code now is my main is",
    "start": "4009559",
    "end": "4014599"
  },
  {
    "text": "very very simple it you know context background get the slice of Uggs get the working directory and then hand all of",
    "start": "4014599",
    "end": "4021279"
  },
  {
    "text": "that off to an exported main function that takes those things in a package",
    "start": "4021279",
    "end": "4026839"
  },
  {
    "text": "that I can then work with and I basically don't have to look at the main.go file ever again right now I'm",
    "start": "4026839",
    "end": "4032920"
  },
  {
    "text": "just kind of off and goand and then you can come along and import it and you can pass it a context a working directory",
    "start": "4032920",
    "end": "4039880"
  },
  {
    "text": "and some args and start using my CLI in your program and it's really nice and",
    "start": "4039880",
    "end": "4045760"
  },
  {
    "text": "clean and kind of top level and I don't know i' I've been finding it as a pattern that's been working really really well for me recently do you shell",
    "start": "4045760",
    "end": "4052720"
  },
  {
    "text": "out or do you call them directly what do you mean do you create a command exac and run an actual Pro subprocess is that",
    "start": "4052720",
    "end": "4059799"
  },
  {
    "text": "how you run things or do you just call I think he just has a method like he just calls a meth or a function on another",
    "start": "4059799",
    "end": "4066359"
  },
  {
    "text": "package yeah exactly or he might name the other package mark and it might have a main exported function and he calls",
    "start": "4066359",
    "end": "4072480"
  },
  {
    "text": "mark. main inside of his actual main that doesn't do much I bet he does have a program called that know I was",
    "start": "4072480",
    "end": "4079359"
  },
  {
    "text": "thinking the same thing I've been leaning towards a CLI package and then",
    "start": "4079359",
    "end": "4084839"
  },
  {
    "text": "like I said having a type not even a top level function but a a top level type you know a type there you know whatever",
    "start": "4084839",
    "end": "4090799"
  },
  {
    "text": "it is and that has the main function on it again it just no scope right I don't",
    "start": "4090799",
    "end": "4096359"
  },
  {
    "text": "want top level I don't want any Global scope here um a zero value struct should",
    "start": "4096359",
    "end": "4102238"
  },
  {
    "text": "be able to handle that CLI and like I said it's a pattern I found has been working really well for me because then",
    "start": "4102239",
    "end": "4107960"
  },
  {
    "text": "I can kind of manipulate whatever I need to just with those three kind of pieces",
    "start": "4107960",
    "end": "4113040"
  },
  {
    "text": "of function those three pieces it is nice though that go makes it easy enough to do that like you found a pattern that",
    "start": "4113040",
    "end": "4118679"
  },
  {
    "text": "works for you and you can sort of build around that and it's so like it I get what you're saying but I also feel like",
    "start": "4118679",
    "end": "4124159"
  },
  {
    "text": "because it's so easy to sort of just build around it that it's kind of a not that much of a limitation no it's not",
    "start": "4124159",
    "end": "4130318"
  },
  {
    "text": "necessarily a limit just is an unpopular opinion by the way I'm just saying it would you know like",
    "start": "4130319",
    "end": "4136520"
  },
  {
    "text": "if they were to rethink it for v2 those would be my suggestions for well on",
    "start": "4136520",
    "end": "4142758"
  },
  {
    "text": "those Bombshells of who who where's Johnny's isn't Johnny supposed to come up with one today no man that's next",
    "start": "4142759",
    "end": "4148520"
  },
  {
    "text": "week that's not I need time I need time to think about that fine he's too nice that's right he was too nice I I",
    "start": "4148520",
    "end": "4154798"
  },
  {
    "text": "remember now that's right he broke into a cold sweat when we said we might have to upset",
    "start": "4154799",
    "end": "4161080"
  },
  {
    "text": "somebody well that's just makes him a nice guy don't it like how these two offset each other Mark Mark's nowhere",
    "start": "4161319",
    "end": "4167880"
  },
  {
    "text": "near too nice oh yeah absolutely yeah Mark trolls him for being nice that's",
    "start": "4167880",
    "end": "4174199"
  },
  {
    "text": "how that's where we've got to that's how evil I am well welcome to the internet",
    "start": "4174199",
    "end": "4180679"
  },
  {
    "text": "and I'll say uh I'll say our goodbyes we've reached the end of the show thank you very much Mark Johnny and John uh",
    "start": "4180679",
    "end": "4187440"
  },
  {
    "text": "hopefully everyone's learned a little bit about interfaces and abstractions and grappled with them as you uh as you",
    "start": "4187440",
    "end": "4193560"
  },
  {
    "text": "go go into your future endeavors we wish you all the best we'll see you next [Music]",
    "start": "4193560",
    "end": "4201840"
  },
  {
    "text": "time that's our show for this week thanks to Dylan and the Gopher slack for sharing that unpopular opinion we love",
    "start": "4201840",
    "end": "4207760"
  },
  {
    "text": "hearing from all the Gophers out there hit us up on Twitter we are at gotime FM or comment directly on Chang log.com",
    "start": "4207760",
    "end": "4213480"
  },
  {
    "text": "just click the discuss on Chang doog news Link in your show notes this episode was hosted by Matt ryer with panelists Johnny borico John Calhoun and",
    "start": "4213480",
    "end": "4220520"
  },
  {
    "text": "Mark Bates it was produced by me Jared Santo with music by the oh so mysterious BMC we're brought to you by awesome",
    "start": "4220520",
    "end": "4226760"
  },
  {
    "text": "sponsors support them they support us we've got fastly on bandwidth lenot on hosting and RAR on bugs the changelog",
    "start": "4226760",
    "end": "4232800"
  },
  {
    "text": "Master feed is your One-Stop shop for all of our podcasts you can find it by searching changelog master in apple",
    "start": "4232800",
    "end": "4239040"
  },
  {
    "text": "podcasts overcast Spotify or wherever you get your podcasts all for the price of a free bit bar thanks again for",
    "start": "4239040",
    "end": "4245440"
  },
  {
    "text": "listening we'll talk to you next",
    "start": "4245440",
    "end": "4248760"
  },
  {
    "text": "week",
    "start": "4252640",
    "end": "4255640"
  },
  {
    "text": "[Music]",
    "start": "4258580",
    "end": "4280560"
  },
  {
    "text": "w [Music]",
    "start": "4282560",
    "end": "4307479"
  },
  {
    "text": "TR recording I see bars and",
    "start": "4312560",
    "end": "4318320"
  },
  {
    "text": "kilobytes all right that's good that's great I want that as my ring 10 kilobytes incoming killer bytes all",
    "start": "4318320",
    "end": "4326840"
  },
  {
    "text": "right are we cool with me going live yep yeah man do it all right we're live okay",
    "start": "4326840",
    "end": "4334320"
  },
  {
    "text": "2 minutes early well we still have to wait like 2 minutes yeah so that people in okay two minutes let's all sit in",
    "start": "4334320",
    "end": "4341520"
  },
  {
    "text": "uncomfortable silence then well I think it has to be silent can still be uncomfortable and",
    "start": "4341520",
    "end": "4347280"
  },
  {
    "text": "may be talking to be otherwise we're if we do that now then what are we going to do for the next 60 minutes",
    "start": "4347280",
    "end": "4354719"
  },
  {
    "text": "yeah not talk and make things uncomfortable",
    "start": "4354719",
    "end": "4360960"
  },
  {
    "text": "yes wait y'all weren't kidding about that then we just genuinely ran out of",
    "start": "4360960",
    "end": "4367800"
  },
  {
    "text": "things to say that's it folks we're done with the episode come back week is that it that",
    "start": "4367800",
    "end": "4374840"
  },
  {
    "text": "was amazing uh that hour flew by thank you for having me it's the best hour I've ever spent with you",
    "start": "4374840",
    "end": "4381199"
  },
  {
    "text": "mark silence H wow absolutely yeah not this isn't the show",
    "start": "4381199",
    "end": "4387639"
  },
  {
    "text": "yet I hope not no",
    "start": "4387639",
    "end": "4392480"
  }
]