[
  {
    "text": "I've thought of one just top of my head just see what you think of this switch true and false round to really separate",
    "start": "120",
    "end": "5960"
  },
  {
    "text": "the wheat from the chaff mad mad mad no shall I open it though and see",
    "start": "5960",
    "end": "14639"
  },
  {
    "text": "see what happens actually trying you could you",
    "start": "14639",
    "end": "19640"
  },
  {
    "text": "could B with for change log is provided by fastly learn more fastly.com our",
    "start": "19640",
    "end": "25680"
  },
  {
    "text": "feature flags are powered by launch darkley check them out at launchd dark.com and we're hosted on Lino Cloud",
    "start": "25680",
    "end": "31599"
  },
  {
    "text": "servers get $100 in hosting credit at lin.com changelog what's up Gophers this episode",
    "start": "31599",
    "end": "38520"
  },
  {
    "text": "is brought to you by kodish a podcast from the team at Heroku exploring code technology tools tips and developer life",
    "start": "38520",
    "end": "45440"
  },
  {
    "text": "there's a ton of great episodes on the Kish podcast so I'd encourage you to check it out and subscribe but in particular I want to bring to your",
    "start": "45440",
    "end": "51320"
  },
  {
    "text": "attention the recent episode featuring Cornelia Davis the C2 of we Works talking about Cloud native Cloud native",
    "start": "51320",
    "end": "56760"
  },
  {
    "text": "patterns and what it really means to be a cloud native application is a sneak peek can you define GI Ops",
    "start": "56760",
    "end": "63559"
  },
  {
    "text": "maybe give a formal definition and and talk about what some of the implications are I think that the simplest formal",
    "start": "63559",
    "end": "69200"
  },
  {
    "text": "definition actually doesn't involve the word get at all it is cloud native",
    "start": "69200",
    "end": "74720"
  },
  {
    "text": "operations is the way that I think of it now let me draw an an analog there in",
    "start": "74720",
    "end": "80000"
  },
  {
    "text": "that um one of the things I didn't mention in my intro is that I'm also the author of a book called Cloud native",
    "start": "80000",
    "end": "85200"
  },
  {
    "text": "patterns and that book is targeted at developers software developers and AR ects who are building these you know",
    "start": "85200",
    "end": "92640"
  },
  {
    "text": "highly distributed applications these microservice based applications and helping them understand all the patterns",
    "start": "92640",
    "end": "98560"
  },
  {
    "text": "that you have to put in place to be able to make these microservices based apps",
    "start": "98560",
    "end": "103920"
  },
  {
    "text": "work in this ever changing environment that they run in all right links are in the show notes or head to Heroku com/",
    "start": "103920",
    "end": "111280"
  },
  {
    "text": "podcast to listen to subscribe again check the show notes for links or Heroku comom",
    "start": "111280",
    "end": "117140"
  },
  {
    "text": "[Music] podcasts",
    "start": "117140",
    "end": "121840"
  },
  {
    "text": "let's do it it's go time welcome to go time your source for diverse discussions",
    "start": "136080",
    "end": "142640"
  },
  {
    "text": "from around the go Community we have some awesome episodes in the queue Brian ketton on code generation bill Kennedy",
    "start": "142640",
    "end": "150239"
  },
  {
    "text": "on design philosophy and an episode on the new go embed coming in 1.16",
    "start": "150239",
    "end": "155840"
  },
  {
    "text": "subscribe now if you haven't yet go to go time. FM or just search for go time in your favorite podcast app you'll find",
    "start": "155840",
    "end": "162680"
  },
  {
    "text": "us okay let's do this here we",
    "start": "162680",
    "end": "167239"
  },
  {
    "text": "go hello and welcome to go time I'm Matt rer and I close my browser tabs I'm not",
    "start": "169720",
    "end": "177879"
  },
  {
    "text": "like these people that just have millions of tabs open for weeks and weeks and then they can't find anything",
    "start": "177879",
    "end": "184319"
  },
  {
    "text": "and when you pair with them you know they can't even find anything so it's like close your tabs that's it I close",
    "start": "184319",
    "end": "192080"
  },
  {
    "text": "my tabs welcome to part two of our Deep dive on go language proposals you don't",
    "start": "192080",
    "end": "199640"
  },
  {
    "text": "have to have seen part one or heard part one um but you you know we're not that",
    "start": "199640",
    "end": "205159"
  },
  {
    "text": "organized but you can go back and listen to it afterwards um for different languag proposals that we all just",
    "start": "205159",
    "end": "211280"
  },
  {
    "text": "discuss and chat about so let's meet the panel today",
    "start": "211280",
    "end": "216640"
  },
  {
    "text": "joining me it's your friend and mine Johnny Boro Hello Johnny hello everyone",
    "start": "216640",
    "end": "223040"
  },
  {
    "text": "um and I do keep my tabs open how many oh I get to the point where I CH to the",
    "start": "223040",
    "end": "228280"
  },
  {
    "text": "little fa cons um sort of guess which which one of the multiple tabs with the",
    "start": "228280",
    "end": "233720"
  },
  {
    "text": "same Pon I have like it's really hard when you have like a a sort of a GitHub icons and like more than half the tabs",
    "start": "233720",
    "end": "241200"
  },
  {
    "text": "you have and I have usually like 50 60 of them and then and then I wonder why my fans like going off right so it's",
    "start": "241200",
    "end": "247000"
  },
  {
    "text": "like self-inflicted wound almost um but uh yeah I I did find I did find a neat",
    "start": "247000",
    "end": "252040"
  },
  {
    "text": "little tool the other day called a one tab it like close all the tabs and create links for you and put them put",
    "start": "252040",
    "end": "257519"
  },
  {
    "text": "them on on one one tab as the name implies so uh yeah so now I it's like I I choose that I use that as a sort of a",
    "start": "257519",
    "end": "264520"
  },
  {
    "text": "excuse to just open all kinds of things right because I can always one tab it and just now have a list of things",
    "start": "264520",
    "end": "270240"
  },
  {
    "text": "by the way am I the only one who doesn't use bookmarks anymore anyways let's move on to the other Fox that's a good",
    "start": "270240",
    "end": "275720"
  },
  {
    "text": "question i' I've honestly never really used bookmarks I like I I think I really",
    "start": "275720",
    "end": "281000"
  },
  {
    "text": "should because there's loads of stuff on the internet is there there's loads of stuff but yeah I don't I just Duck Duck",
    "start": "281000",
    "end": "287759"
  },
  {
    "text": "Go everything fresh every time let's also meet our other guests he's back",
    "start": "287759",
    "end": "294520"
  },
  {
    "text": "it's Roberto clais hello Roberto hello hello welcome and and I would like to",
    "start": "294520",
    "end": "300039"
  },
  {
    "text": "say that I pin some of my tabs and I close the others oo so here's yet",
    "start": "300039",
    "end": "305840"
  },
  {
    "text": "another approach nice professional how many pinned tabs do you have nine okay",
    "start": "305840",
    "end": "312960"
  },
  {
    "text": "okay what are they is that because that's the maximum number you allowed to have or that's where you really no it's",
    "start": "312960",
    "end": "318960"
  },
  {
    "text": "just because that's the amount of charts that I use and each one of them has to run in a separate tab because the web",
    "start": "318960",
    "end": "326840"
  },
  {
    "text": "yeahh okay MH what are the what are all the tabs what the URLs for them all can you just read them out quickly no no",
    "start": "326840",
    "end": "334520"
  },
  {
    "text": "it's fine it's fine I don't want to advertise any I just thought I'd ask yeah no there no props we've also are",
    "start": "334520",
    "end": "340280"
  },
  {
    "text": "very lucky to welcome back Daniel Marty Daniel welcome back happy to be back and",
    "start": "340280",
    "end": "345639"
  },
  {
    "text": "I feel like I'm back from the past cuz I just realized that tap pinning is a thing as as of 10 seconds ago it's like",
    "start": "345639",
    "end": "353720"
  },
  {
    "text": "Back to the Future I do close my tabs religiously in fact on my phone on Firefox I even enabled the setting to",
    "start": "353720",
    "end": "360360"
  },
  {
    "text": "automatically close tabs after 24 hours cuz I'm too lazy to do it myself so they just automatically die wow that is very",
    "start": "360360",
    "end": "367520"
  },
  {
    "text": "neat that's next level your life must be clean and simple and just minimalist you",
    "start": "367520",
    "end": "373880"
  },
  {
    "text": "know but so on the edge yeah just ignore my background and",
    "start": "373880",
    "end": "378840"
  },
  {
    "text": "yes great well maybe we should just uh jump straight in although actually I was",
    "start": "380759",
    "end": "386199"
  },
  {
    "text": "just thinking about this there may be new there are in fact new uh Watchers SL",
    "start": "386199",
    "end": "392440"
  },
  {
    "text": "listeners so maybe we could just quickly go around and tell us a little bit like what where you work and that and what",
    "start": "392440",
    "end": "398680"
  },
  {
    "text": "you do why like do you do computers and stuff anyone Johnny do you do computers",
    "start": "398680",
    "end": "404759"
  },
  {
    "text": "yeah yeah usually yeah my job involves finding out why they're not online",
    "start": "404759",
    "end": "410680"
  },
  {
    "text": "anymore oh yeah I'm an Sr yeah so usually I'm chasing down why they stop",
    "start": "410680",
    "end": "416800"
  },
  {
    "text": "working those computers yeah oh what would we do without you you know not have any internet I guess no web no web",
    "start": "416800",
    "end": "424240"
  },
  {
    "text": "for you no tabs for you you know yeah yeah exactly solve the tabs problem though",
    "start": "424240",
    "end": "430360"
  },
  {
    "text": "so difficult one there Roberto what are you doing with your days yeah I also",
    "start": "430360",
    "end": "435479"
  },
  {
    "text": "work with computers also the web and I make sure that if it works it doesn't work too much like it starts giving data",
    "start": "435479",
    "end": "442639"
  },
  {
    "text": "to people that are not supposed to get it so kind of the other side of the spectrum right yeah so to kind of",
    "start": "442639",
    "end": "449960"
  },
  {
    "text": "fighting in some ways you're trying to get things online and out there and you're sort of like if I could shut",
    "start": "449960",
    "end": "455000"
  },
  {
    "text": "everything everything down it would be perfect everything is secure if you can't access it yeah that is true great",
    "start": "455000",
    "end": "462400"
  },
  {
    "text": "Point yeah Daniel what about you mate do you do computers I do computers I've",
    "start": "462400",
    "end": "467879"
  },
  {
    "text": "also been contributing to go for a while especially some packages like Json so whenever any of our listeners complain",
    "start": "467879",
    "end": "474520"
  },
  {
    "text": "about Json I'm usually on the receiving end right yeah and I Roberto laughing at",
    "start": "474520",
    "end": "481960"
  },
  {
    "text": "that yeah we'll have to do a proper episode one time where you can just just",
    "start": "481960",
    "end": "487560"
  },
  {
    "text": "show us all the complaints that you get about Json I'd love that I worked with somebody once who complained um about",
    "start": "487560",
    "end": "495000"
  },
  {
    "text": "Json because he thought it had too many brackets and he wanted me to not use",
    "start": "495000",
    "end": "500280"
  },
  {
    "text": "that many brackets because it's waste so that's yaml yeah he invented",
    "start": "500280",
    "end": "508240"
  },
  {
    "text": "yaml okay so let's jump in why don't we go",
    "start": "508240",
    "end": "513599"
  },
  {
    "text": "straight to our first language proposal that we're going to discuss today anybody following along you can find",
    "start": "513599",
    "end": "520200"
  },
  {
    "text": "these on GitHub uh github.com goang slgo and then we'll read out the",
    "start": "520200",
    "end": "527000"
  },
  {
    "text": "issue number so you can follow along the first issue number is issue number",
    "start": "527000",
    "end": "534920"
  },
  {
    "text": "2733 and it's a proposal to redefine r Loop variables in each iteration this is",
    "start": "535399",
    "end": "542720"
  },
  {
    "text": "a common gotcha for a lot of people in Go Johnny have you seen this in the wild",
    "start": "542720",
    "end": "550040"
  },
  {
    "text": "bugs relate to this yeah I've seen it and I have committed the the foul myself",
    "start": "550040",
    "end": "558279"
  },
  {
    "text": "um not just as a newbie every once in a while still to this day mhm those you'll still catch me so yeah it's a pesky",
    "start": "558279",
    "end": "565720"
  },
  {
    "text": "little usually um the best example that's usually given is where you have some shadowing going on maybe you have a",
    "start": "565720",
    "end": "571000"
  },
  {
    "text": "go routine that you're launching and then you're closing kind of over your your iterator or something like that and and you realize that you're not quite U",
    "start": "571000",
    "end": "577240"
  },
  {
    "text": "the value You're Expecting you're not quite sort of you know that's not quite coming out with each uh sort of iteration and whatnot so it's a very",
    "start": "577240",
    "end": "583839"
  },
  {
    "text": "easy sort of a trap to fall into um and this proposal is is I looked at I'm like",
    "start": "583839",
    "end": "589800"
  },
  {
    "text": "yeah that kind of makes sense why doesn't it do that you know about default kind of thing um but yeah like",
    "start": "589800",
    "end": "595279"
  },
  {
    "text": "as we dive a little deeper into it there are some I think there are some reasons why that wasn't uh it wasn't adopted but",
    "start": "595279",
    "end": "601279"
  },
  {
    "text": "I'd be in favor of it actually okay so the problem is then when you range over",
    "start": "601279",
    "end": "606600"
  },
  {
    "text": "something it reuses the variables doesn't it mhm in each iteration so if",
    "start": "606600",
    "end": "611839"
  },
  {
    "text": "you do kickoff go routines and things you feel like it should you'd kick off that go routine and it's going to it's",
    "start": "611839",
    "end": "617839"
  },
  {
    "text": "going to use the value that was there in that iteration but actually as that's updating it'll update for all of the go",
    "start": "617839",
    "end": "624360"
  },
  {
    "text": "routines and that's where you then think usually you end up with like the last number and everything and it's the same",
    "start": "624360",
    "end": "630440"
  },
  {
    "text": "and it's such a strange bug it's like the last plus one so if you're iterating",
    "start": "630440",
    "end": "635680"
  },
  {
    "text": "over a slice you actually go out of bound which is even worse right yeah of course if you're arranging using it over",
    "start": "635680",
    "end": "642240"
  },
  {
    "text": "like numbers right yeah yeah uh that's a good point actually I've never had that one um I I just fixed one last week for",
    "start": "642240",
    "end": "650639"
  },
  {
    "text": "um a framework I'm working on that wasn't working because of this issue so it's a fresh thing it's a real",
    "start": "650639",
    "end": "658040"
  },
  {
    "text": "thing and I also think a pretty common case of this is when you have TBL driven",
    "start": "658040",
    "end": "663079"
  },
  {
    "text": "tests and then you suddenly say oh I'm going to make them parallel so that they all can run in parallel with each other",
    "start": "663079",
    "end": "668560"
  },
  {
    "text": "test cases that is and then like Days Later realize that one test should be failing but it's not and it's because",
    "start": "668560",
    "end": "674680"
  },
  {
    "text": "you're testing the last test case a 100 times instead of testing each of the test cases separately and it's because",
    "start": "674680",
    "end": "679959"
  },
  {
    "text": "you forgot to make a copy of the of the variable right so you're just reusing the same variable and then the parallel",
    "start": "679959",
    "end": "685120"
  },
  {
    "text": "test as a go routine so yeah so your tests are a lie then yeah but that last that last case definitely works really",
    "start": "685120",
    "end": "693519"
  },
  {
    "text": "it really works yeah um and there are workarounds aren't there but I genuinely",
    "start": "693519",
    "end": "700200"
  },
  {
    "text": "find the workarounds to be really strange like you end up just essentially",
    "start": "700200",
    "end": "706800"
  },
  {
    "text": "yes it looks like you're just assigning or creating a new variable and assigning it with the same name um that's weird",
    "start": "706800",
    "end": "713240"
  },
  {
    "text": "isn't it are there any other workarounds that yeah are better than that in in one of my first talks I was actually talking",
    "start": "713240",
    "end": "719120"
  },
  {
    "text": "about this because it was a talk on go pitfalls and um I propose to pass it as a parameter so if you're closing over",
    "start": "719120",
    "end": "725800"
  },
  {
    "text": "the variable you the closure instead of using a closure you just accept that as a parameter and you pass it to the",
    "start": "725800",
    "end": "731600"
  },
  {
    "text": "function but it's so like it's so unintuitive because you see the variable appearing at the end of your code and",
    "start": "731600",
    "end": "738639"
  },
  {
    "text": "when I was talking about this um Roger Pepe was in the audience and just raised the hand his hand",
    "start": "738639",
    "end": "745320"
  },
  {
    "text": "saying just shaking his hand his head and saying nope shouldn't be doing that because it's unreadable so I guess red",
    "start": "745320",
    "end": "752920"
  },
  {
    "text": "declaring the variable is the only readable way to do this I feel like red declaring a variable is also kind of",
    "start": "752920",
    "end": "758959"
  },
  {
    "text": "silly because if somebody's especially new somebody that's new to go they look at that code and they go like that's",
    "start": "758959",
    "end": "764240"
  },
  {
    "text": "kind of like a no up it's not doing anything right and then you kind of need a comment to say hey this is actually doing something don't delete it because",
    "start": "764240",
    "end": "770680"
  },
  {
    "text": "if you delete it the code might not actually break at all either so it's it's extra confusing I think yes",
    "start": "770680",
    "end": "777160"
  },
  {
    "text": "sometimes if you're kicking off go routines you can pass arguments in that's another way that it's actually",
    "start": "777160",
    "end": "782880"
  },
  {
    "text": "quite a nice workaround isn't it if you actually in the anonymous function you actually take an argument and then when",
    "start": "782880",
    "end": "788600"
  },
  {
    "text": "you call it you pass in that value at that point then it can it'll be copied into that scope so that that's then safe",
    "start": "788600",
    "end": "795120"
  },
  {
    "text": "that's not too bad but it is even that's quite strange So Daniel what is the",
    "start": "795120",
    "end": "800440"
  },
  {
    "text": "proposal suggesting so the proposal is essentially suggesting to change the default Behavior to redeclare the",
    "start": "800440",
    "end": "806600"
  },
  {
    "text": "variable at each iteration so essentially have a variable scoped within each iteration instead of sharing",
    "start": "806600",
    "end": "812399"
  },
  {
    "text": "one and then essentially I can't think of a single program that would break",
    "start": "812399",
    "end": "818240"
  },
  {
    "text": "that was doing something sane if somebody was depending on this reuse of variables and then I only use the last",
    "start": "818240",
    "end": "823639"
  },
  {
    "text": "one for you know uh closures I would argue that that was wrong to begin with",
    "start": "823639",
    "end": "829199"
  },
  {
    "text": "and it wasn't something that would always work anyway so I think it's a good change there is one extra data",
    "start": "829199",
    "end": "835320"
  },
  {
    "text": "point about that I found out that in the JavaScript specification um this is like if you use let in a for",
    "start": "835320",
    "end": "842519"
  },
  {
    "text": "Loop it is redeclared on every iteration so there is a specific entry in the JavaScript spec saying if you have a for",
    "start": "842519",
    "end": "849240"
  },
  {
    "text": "Loop and you use let the scope of let is inside the body of the for Loop not the",
    "start": "849240",
    "end": "854360"
  },
  {
    "text": "one that is for VAR for example that makes sense really does yeah and everyone that uses JavaScript has never",
    "start": "854360",
    "end": "860480"
  },
  {
    "text": "had any troubles with that this is something that no one knows because it just works it doesn't surprise anyone",
    "start": "860480",
    "end": "867399"
  },
  {
    "text": "that this is behaving this way yeah and I think to Daniel's point this is probably completely backwards compatible",
    "start": "867399",
    "end": "873560"
  },
  {
    "text": "because even code that has the weird quirky workarounds they'll still work they you know and they could be tidied",
    "start": "873560",
    "end": "879440"
  },
  {
    "text": "up later this has 91 thumbs up on GitHub",
    "start": "879440",
    "end": "884600"
  },
  {
    "text": "emojis there and six thumbs Downs it's got 11 of these weird party emojis and",
    "start": "884600",
    "end": "890800"
  },
  {
    "text": "nine love hearts I think emojis are essentially how we should make decisions these days in the modern world someone's",
    "start": "890800",
    "end": "896680"
  },
  {
    "text": "just done it deliberately partti it turned it to 12 so yeah I feel like this is actually",
    "start": "896680",
    "end": "903920"
  },
  {
    "text": "quite a good one are are there like is there a difficulty in implementation I mean was this a design decision do we",
    "start": "903920",
    "end": "911040"
  },
  {
    "text": "know or is this just what happened and we sort of found out later this was a",
    "start": "911040",
    "end": "916320"
  },
  {
    "text": "side effect of how it was built in my reading of the of the commentary going back and forth most folks seem to be in",
    "start": "916320",
    "end": "923480"
  },
  {
    "text": "favor of it um yet people that are on the go team obviously um chiming in",
    "start": "923480",
    "end": "929199"
  },
  {
    "text": "um people that are or were um are chiming in and for the most part I mean this seems like a like a change that",
    "start": "929199",
    "end": "936639"
  },
  {
    "text": "wouldn't get a lot of push back um again because you know the with the sort of implicit",
    "start": "936639",
    "end": "942720"
  },
  {
    "text": "implementation or support for this can't think of many situations where it would actually break someone's logic if your",
    "start": "942720",
    "end": "949680"
  },
  {
    "text": "stuff is is sort of behaves as as expected not to say that there are any edge cases but for the most part it",
    "start": "949680",
    "end": "956079"
  },
  {
    "text": "seems overwhelming overwhelmingly supported um so and there's a comment in there from uh Brad fatrick uh around",
    "start": "956079",
    "end": "964199"
  },
  {
    "text": "sort of giving it more consideration for go2 so who knows maybe we'll see",
    "start": "964199",
    "end": "970440"
  },
  {
    "text": "this yeah also if you look at the way this is compiled it's clear that the way",
    "start": "970440",
    "end": "977000"
  },
  {
    "text": "it is is because there is no exception there it just works this is the way the four Loops are compiled because the first statement is run only once includ",
    "start": "977000",
    "end": "984560"
  },
  {
    "text": "so and that's the Declaration and some people complain that um these could introduce some uh performance issues",
    "start": "984560",
    "end": "990880"
  },
  {
    "text": "because then you get a lot of variables and but if you look at it you can if you are really that concerned about",
    "start": "990880",
    "end": "996920"
  },
  {
    "text": "performance well it's weird because why are you optimizing that kind of things but if",
    "start": "996920",
    "end": "1003279"
  },
  {
    "text": "you are you can just declare it on the line before the four Loop and just don't use the first you can just do four",
    "start": "1003279",
    "end": "1009319"
  },
  {
    "text": "semicolon and go on with your life it's yeah so if if you were ranging over",
    "start": "1009319",
    "end": "1015639"
  },
  {
    "text": "some big chunks of data and you know and then they're suddenly now being copied",
    "start": "1015639",
    "end": "1020880"
  },
  {
    "text": "could you ever notice that would that ever make a market kind of difference if you don't close over it and if you don't",
    "start": "1020880",
    "end": "1028079"
  },
  {
    "text": "keep a reference no because it the variable will be inlined by the in liner it will disappear in the next loop I",
    "start": "1028079",
    "end": "1034520"
  },
  {
    "text": "don't think these Will Survive iterations yeah and I don't think copies",
    "start": "1034520",
    "end": "1040360"
  },
  {
    "text": "are going to be a worry because if you have large structures as the element value that you're ranging over uh they",
    "start": "1040360",
    "end": "1047160"
  },
  {
    "text": "they're getting copied today anyway um so it's just a different kind of copy but I think it's still just going to be one copy yeah well I know that um Junior",
    "start": "1047160",
    "end": "1056520"
  },
  {
    "text": "devs often uh and actually people sometimes from other languages um and and even just normal go people I'm",
    "start": "1056520",
    "end": "1062880"
  },
  {
    "text": "really not trying to single any people out here but there are some people that",
    "start": "1062880",
    "end": "1068039"
  },
  {
    "text": "really do get a bit too worried about that kind of thing where you know",
    "start": "1068039",
    "end": "1073160"
  },
  {
    "text": "they'll kind of use pointers unnecessarily sometimes because the idea of just passing pointers around is is",
    "start": "1073160",
    "end": "1080320"
  },
  {
    "text": "kind of much easier and lighter but in practice that's the thing in practice",
    "start": "1080320",
    "end": "1085559"
  },
  {
    "text": "what difference does it really make and I think that kind of a good point generally to make there so yeah I'm okay",
    "start": "1085559",
    "end": "1093640"
  },
  {
    "text": "we'll do that one we should do that one then that's our decision do we is this what this is we're just deciding now we",
    "start": "1093640",
    "end": "1098960"
  },
  {
    "text": "just well I've added a thumbs up maybe that that'll KCK it over over the edge what do you think yeah they'll be like",
    "start": "1098960",
    "end": "1105080"
  },
  {
    "text": "in in the go team HQ they'll be like we got a thumbs up from Johnny B let's get",
    "start": "1105080",
    "end": "1110520"
  },
  {
    "text": "on it I would actually bet on this one getting accepted soon of all the ones",
    "start": "1110520",
    "end": "1115600"
  },
  {
    "text": "that we've talked about at least it's funny because it's been there for I'm going to just check the date on",
    "start": "1115600",
    "end": "1122799"
  },
  {
    "text": "it June 27 yeah 201 so yeah it's few years but yeah be",
    "start": "1122799",
    "end": "1130799"
  },
  {
    "text": "great to have that one okay Daniel do you want to pick another one then unless anyone has",
    "start": "1130799",
    "end": "1137240"
  },
  {
    "text": "anything more to say on this yes yep we can go on to the next one then I'm actually going to go out of order",
    "start": "1137240",
    "end": "1142799"
  },
  {
    "text": "because I'm avoiding a complex one and leaving it for later so that we can get to smaller ones first so I want to talk",
    "start": "1142799",
    "end": "1149320"
  },
  {
    "text": "about issue 2936 and it's to make imported symboles",
    "start": "1149320",
    "end": "1155200"
  },
  {
    "text": "predictable and this is sort of a double proposal and that is right now when you",
    "start": "1155200",
    "end": "1160600"
  },
  {
    "text": "look at a go file and you see a name like Fu and you're thinking where does this come from um you would think that",
    "start": "1160600",
    "end": "1167159"
  },
  {
    "text": "the rules are pretty simple like is Fu in my current scope like in my current function declaration as a variable or is",
    "start": "1167159",
    "end": "1172960"
  },
  {
    "text": "it a parameter or is it a global or is it something that I imported um and",
    "start": "1172960",
    "end": "1178320"
  },
  {
    "text": "that's usually true but it's actually not always true in go because if something if you use a do import a do",
    "start": "1178320",
    "end": "1185159"
  },
  {
    "text": "import means import all the names from this other package and if you just look at the go file alone you don't know what",
    "start": "1185159",
    "end": "1191159"
  },
  {
    "text": "all those names are so it's sort of implicit and sort of explicit and the other case is when you import a package",
    "start": "1191159",
    "end": "1198440"
  },
  {
    "text": "and the last element the last element of its package path does not match its",
    "start": "1198440",
    "end": "1203520"
  },
  {
    "text": "package name and go allows that it allows you to then use the package name instead of the last element of the",
    "start": "1203520",
    "end": "1209640"
  },
  {
    "text": "package path and many people then use the name explicitly in the import but you don't have to and if you don't then",
    "start": "1209640",
    "end": "1216480"
  },
  {
    "text": "you could get back into this Edge case where the name is implicit it's not explicit so this proposal is essentially",
    "start": "1216480",
    "end": "1222520"
  },
  {
    "text": "forbid those two modes and then when you look at a name in a go file without loading all the dependencies without",
    "start": "1222520",
    "end": "1228480"
  },
  {
    "text": "loading all the type information you can always easily know where it comes from yeah this is one where it's kind of",
    "start": "1228480",
    "end": "1236159"
  },
  {
    "text": "one of those best practices is to name the folder of the package the same as the package because it just helps with",
    "start": "1236159",
    "end": "1243320"
  },
  {
    "text": "lots of things and then this proposal is talking about I suppose you always require that symbol to be explicit maybe",
    "start": "1243320",
    "end": "1251440"
  },
  {
    "text": "or it would be harder to make it um not allow you to to put a different package",
    "start": "1251440",
    "end": "1257480"
  },
  {
    "text": "name inside of a folder wouldn't it that would be quite strange but the is that the proposal then is to always it will",
    "start": "1257480",
    "end": "1264600"
  },
  {
    "text": "it will Define and you do it before the import so you do import the the name that you're going to use locally and",
    "start": "1264600",
    "end": "1270840"
  },
  {
    "text": "then the package as a string and that's how you can do that you can also Daniel",
    "start": "1270840",
    "end": "1276200"
  },
  {
    "text": "though you could make up any symbol name couldn't you but that's probably okay isn't it in because it's local and",
    "start": "1276200",
    "end": "1282960"
  },
  {
    "text": "that's up to you and in fact it's kind of a feature too isn't it if you especially if you've got clashing packages or even you just don't like the",
    "start": "1282960",
    "end": "1290360"
  },
  {
    "text": "package name right so I think what's being forbidden here is that if I declare a package path called go- Fu but",
    "start": "1290360",
    "end": "1298279"
  },
  {
    "text": "the package name is Fu right now I can import that as literally just some path SLG go- Fu but then use it as Fu because",
    "start": "1298279",
    "end": "1307240"
  },
  {
    "text": "the package name is implicit so there is saying no no if you want to use it you have to explicitly import it as Fu uh",
    "start": "1307240",
    "end": "1314679"
  },
  {
    "text": "because then the syntax alone will tell you where fu is being defined and I I think that's a good change I agree also",
    "start": "1314679",
    "end": "1320400"
  },
  {
    "text": "because we can have tools like go import automatically at that named import and",
    "start": "1320400",
    "end": "1325799"
  },
  {
    "text": "people will not touch it but when you read the file from GitHub or wherever you can just infer everything from the",
    "start": "1325799",
    "end": "1333240"
  },
  {
    "text": "file without having to look around and hope that you find the right name this",
    "start": "1333240",
    "end": "1338400"
  },
  {
    "text": "is one of the features I love about go is every file is self-contained like you you can understand a lot by just looking",
    "start": "1338400",
    "end": "1345080"
  },
  {
    "text": "at a file and if you can see every file of a certain package understand the whole thing the one thing I'll say I'm",
    "start": "1345080",
    "end": "1350520"
  },
  {
    "text": "not in love with with regards to um this proposal is sort of the elimination of",
    "start": "1350520",
    "end": "1355720"
  },
  {
    "text": "the DOA import there are some legitimate use cases I mean Al although I'll C of",
    "start": "1355720",
    "end": "1361360"
  },
  {
    "text": "get that by saying that um I don't use do Imports very often I can't honestly I can't remember the last time I eded that",
    "start": "1361360",
    "end": "1366600"
  },
  {
    "text": "in production code to be honest I do know of some use cases where it does",
    "start": "1366600",
    "end": "1371640"
  },
  {
    "text": "make for more elegant code more readable code um the code generator um I think Goa for example I think does a very good",
    "start": "1371640",
    "end": "1378120"
  },
  {
    "text": "job of that of using the U um the do import to allow you to sort of a",
    "start": "1378120",
    "end": "1383240"
  },
  {
    "text": "leverage sort of a very nice DSL like sort of mechanism and for those that",
    "start": "1383240",
    "end": "1388600"
  },
  {
    "text": "don't know what the do import does basically it just whatever package you're importing with the do import it just kind of pretends that whatever",
    "start": "1388600",
    "end": "1395080"
  },
  {
    "text": "youve just imported is in the same package where we actually using it so rather than saying Goa do API you can",
    "start": "1395080",
    "end": "1402600"
  },
  {
    "text": "just say if you import the go package you can just say API do whatever right without having to say go api. whatever",
    "start": "1402600",
    "end": "1409799"
  },
  {
    "text": "so it makes for um if you if you're writing dsls it can be like a nice tool to have",
    "start": "1409799",
    "end": "1416039"
  },
  {
    "text": "on your tool belt um but those are very those are very specific circumstances I",
    "start": "1416039",
    "end": "1421679"
  },
  {
    "text": "I think but even then like something like this would probably break a lot of",
    "start": "1421679",
    "end": "1426840"
  },
  {
    "text": "things so because of that I can see the the value of it but because of that we",
    "start": "1426840",
    "end": "1432320"
  },
  {
    "text": "probably have to sort of have some tools through do some rewriting and things like that to sort of prevent a widespread break AG of things but yeah I",
    "start": "1432320",
    "end": "1439640"
  },
  {
    "text": "think I'm not too too hot on this one I think that the first part of having",
    "start": "1439640",
    "end": "1445400"
  },
  {
    "text": "explicit naming will probably work like I don't see why this wouldn't be",
    "start": "1445400",
    "end": "1450720"
  },
  {
    "text": "accepted when I said the do import I see this as a harder one especially because",
    "start": "1450720",
    "end": "1456000"
  },
  {
    "text": "in tests I've seen a lot of uh packages that offer sort of a DSL for tests and",
    "start": "1456000",
    "end": "1462000"
  },
  {
    "text": "you just do import and you can just write assert or do stuff I personally don't like it I advise against it but I",
    "start": "1462000",
    "end": "1470240"
  },
  {
    "text": "can see why people would like to do this but these aren't mutually exclusive or",
    "start": "1470240",
    "end": "1475360"
  },
  {
    "text": "rather they don't have to go together do they you could still have dot Imports but then also make force the symbol",
    "start": "1475360",
    "end": "1483240"
  },
  {
    "text": "explicit symbol import yeah this is kind of a two in one kind of um yeah well",
    "start": "1483240",
    "end": "1489120"
  },
  {
    "text": "this one has 63 thumbs up and one thumb down just a single solitary thumb down",
    "start": "1489120",
    "end": "1496679"
  },
  {
    "text": "so does have some love there support yeah and and I think also like there's a",
    "start": "1496679",
    "end": "1502760"
  },
  {
    "text": "wider kind of Point here which comes up a lot when we talk about go and Daniel",
    "start": "1502760",
    "end": "1508600"
  },
  {
    "text": "you actually make this point in that issue you made it years ago like some kind of time traveler or something you",
    "start": "1508600",
    "end": "1516080"
  },
  {
    "text": "said you know go it's really like it's read much more often than it's written",
    "start": "1516080",
    "end": "1521360"
  },
  {
    "text": "so we ought to optimize for it being read right yeah and I actually think",
    "start": "1521360",
    "end": "1527960"
  },
  {
    "text": "there's also like we've talked a lot about the human element here but I also think we should remember the tooling",
    "start": "1527960",
    "end": "1533840"
  },
  {
    "text": "element the machine element go is pretty well optimized to being fast to compile but I feel like in these two cases tools",
    "start": "1533840",
    "end": "1541600"
  },
  {
    "text": "get slower uh because they can take shortcuts um if if names are predictable",
    "start": "1541600",
    "end": "1548120"
  },
  {
    "text": "uh you can predict where they're going to be something like go to definition could be a very simple go program you",
    "start": "1548120",
    "end": "1553640"
  },
  {
    "text": "would just read a go file look at a name where is this name defined you just look at your function your your Imports and",
    "start": "1553640",
    "end": "1559039"
  },
  {
    "text": "that's pretty much it and then you just follow the graph but the moment you add do Imports you know that kind of goes",
    "start": "1559039",
    "end": "1564480"
  },
  {
    "text": "out the window you have to look like a linear search across your dependencies I think in practice this might not affect",
    "start": "1564480",
    "end": "1569720"
  },
  {
    "text": "most people because most people don't use dot Imports and such but I feel like the Mantra of go being simple and being",
    "start": "1569720",
    "end": "1576360"
  },
  {
    "text": "fast to use and and compile would fit this",
    "start": "1576360",
    "end": "1581480"
  },
  {
    "text": "yeah cool that's a really interesting one tell us what you think tweeters at",
    "start": "1581480",
    "end": "1587679"
  },
  {
    "text": "show time FM and let us know your thoughts I've thought of one just top of my head just see what you think of this",
    "start": "1587679",
    "end": "1594440"
  },
  {
    "text": "switch true and false round to really separate the wheat from the chaff mad mad",
    "start": "1594440",
    "end": "1601000"
  },
  {
    "text": "mad no shall I open it though and see see what",
    "start": "1601000",
    "end": "1607520"
  },
  {
    "text": "happens actually trying you could you",
    "start": "1607520",
    "end": "1611799"
  },
  {
    "text": "could [Music]",
    "start": "1616600",
    "end": "1621720"
  },
  {
    "text": "what's up Gophers are you trying to take your infrastructure further faster of course you are on March 3rd joined",
    "start": "1621720",
    "end": "1627000"
  },
  {
    "text": "equinix medal for their first technical user conference called proximity proximity is a fall of the Sunday of",
    "start": "1627000",
    "end": "1632840"
  },
  {
    "text": "live streamed technical demonstration showcasing equinix Metals partners and their ecosystem visit metal.in x.com",
    "start": "1632840",
    "end": "1639559"
  },
  {
    "text": "proximity to view the schedule for this event and get closer to your digital Advantage again metal.in x.com proximity",
    "start": "1639559",
    "end": "1649520"
  },
  {
    "text": "[Music]",
    "start": "1652230",
    "end": "1665679"
  },
  {
    "text": "right Daniel let's what's the next one we should have a look at so I was thinking we could open the Pandoras box",
    "start": "1665679",
    "end": "1671039"
  },
  {
    "text": "that is type inferred composite literals and this is issue number",
    "start": "1671039",
    "end": "1676519"
  },
  {
    "text": "12854 and this is a pretty large change to the language and it's essentially saying uh",
    "start": "1676519",
    "end": "1683559"
  },
  {
    "text": "whenever a composite literal is essentially an expression with u the curly braces so you can think of stru",
    "start": "1683559",
    "end": "1689240"
  },
  {
    "text": "literals slice literals and such and the proposal is essentially if the compiler",
    "start": "1689240",
    "end": "1695120"
  },
  {
    "text": "can statically know what type that expression would be for example because you're assigning it to a struct uh",
    "start": "1695120",
    "end": "1701399"
  },
  {
    "text": "variable or you're assigning it or you're passing it as a parameter that's a map then it can statically know what",
    "start": "1701399",
    "end": "1706840"
  },
  {
    "text": "the type of that composite literal is then you don't have to spell it out you don't have to spell out the type and I",
    "start": "1706840",
    "end": "1713240"
  },
  {
    "text": "think I think a lot of people support this idea because go can be quite verbose when you use a lot of these",
    "start": "1713240",
    "end": "1718919"
  },
  {
    "text": "types uh and often times the type is repeated multiple times in the same function or in the same local code but",
    "start": "1718919",
    "end": "1726000"
  },
  {
    "text": "at the same time I feel like it might hurt readability especially in terms of what we talked about earlier about go",
    "start": "1726000",
    "end": "1732600"
  },
  {
    "text": "being easy to read at a local level yes that's interesting there there are examples of type inference in the",
    "start": "1732600",
    "end": "1740159"
  },
  {
    "text": "language and they do work quite nicely do you find that they affect readability",
    "start": "1740159",
    "end": "1746399"
  },
  {
    "text": "much the current examples that we have I don't think so because the current examples we have the type is always",
    "start": "1746399",
    "end": "1753480"
  },
  {
    "text": "spelled somewhere local yeah you cannot create a new composite literal without",
    "start": "1753480",
    "end": "1759279"
  },
  {
    "text": "having that the name of that type somewhere in your local scope it's I think it's impossible with this new",
    "start": "1759279",
    "end": "1765640"
  },
  {
    "text": "proposal it would be possible you might call an API that returns a type and then you assign a new literal to that type",
    "start": "1765640",
    "end": "1772279"
  },
  {
    "text": "but you don't you're not spelling out what that type is nowadays this mostly happens for",
    "start": "1772279",
    "end": "1777760"
  },
  {
    "text": "collections like you can say a slice of this type and of course you can just use",
    "start": "1777760",
    "end": "1783039"
  },
  {
    "text": "the literal without the type again because I mean you you just said what this is If This Were to change I would",
    "start": "1783039",
    "end": "1790360"
  },
  {
    "text": "be in favor of this proposal with a little twist to it which is you can type that code without the type and and then",
    "start": "1790360",
    "end": "1797960"
  },
  {
    "text": "go can just add the type for you so you write fast and then go kicks in and",
    "start": "1797960",
    "end": "1804600"
  },
  {
    "text": "makes everyone able to read it fast so you don't compromise you get readability",
    "start": "1804600",
    "end": "1810519"
  },
  {
    "text": "and writability that is a very interesting rep some are rather to speak",
    "start": "1810519",
    "end": "1815960"
  },
  {
    "text": "up for those that think omitting the type makes for more readable code right",
    "start": "1815960",
    "end": "1821360"
  },
  {
    "text": "I like the proposal right I I'll I'll start by saying that I think it would make for Less verocity but",
    "start": "1821360",
    "end": "1827760"
  },
  {
    "text": "there are those who value that verbosity as part of what makes go code readable",
    "start": "1827760",
    "end": "1832919"
  },
  {
    "text": "right so it's really one of those things where you have you know some folks that are on either side and they both make",
    "start": "1832919",
    "end": "1838840"
  },
  {
    "text": "valid arguments I like the GM sort of compromise if you will um that you can",
    "start": "1838840",
    "end": "1844320"
  },
  {
    "text": "type it quickly but if if your sensibilities are offended by seeing it and reading it that's not going to help",
    "start": "1844320",
    "end": "1851600"
  },
  {
    "text": "right well the the perhaps the best judge of readability might be the",
    "start": "1851600",
    "end": "1856840"
  },
  {
    "text": "beginner to to the language right how how much sense does that make sense when when you read that um you know do you",
    "start": "1856840",
    "end": "1862919"
  },
  {
    "text": "understand what's going on and uh the second best I'd say maintainers of of",
    "start": "1862919",
    "end": "1867960"
  },
  {
    "text": "code that's been around for a while right if you haven't looked at this code for a bit and you pull it up and you open it right um does does having that",
    "start": "1867960",
    "end": "1875559"
  },
  {
    "text": "type definition explicit right uh does that make the code more readable more glanceable right to you than not having",
    "start": "1875559",
    "end": "1883000"
  },
  {
    "text": "it right so I think this is one of those where we I think we we we'd have to sort of do a little bit of a research and",
    "start": "1883000",
    "end": "1889120"
  },
  {
    "text": "really figure out where everybody got it kind of leaned yeah Bill Kennedy makes a",
    "start": "1889120",
    "end": "1894240"
  },
  {
    "text": "good point he talks about this a lot in our gopher slack says this is about making things easy to do and not easy to",
    "start": "1894240",
    "end": "1902200"
  },
  {
    "text": "understand and actually making them easy to understand ought to be the priority so yeah very interesting I",
    "start": "1902200",
    "end": "1910200"
  },
  {
    "text": "don't know how I feel about this one there are some cases where I feel like it would still be clear enough with",
    "start": "1910200",
    "end": "1917200"
  },
  {
    "text": "without specifying the types but I could see for sure other cases where that gets",
    "start": "1917200",
    "end": "1924440"
  },
  {
    "text": "complicated too um I'm actually thinking that I agree with Johnny saying that",
    "start": "1924440",
    "end": "1929639"
  },
  {
    "text": "readability and maintainability is also a factor here and not just typing and I think Roberto's point is mostly solved",
    "start": "1929639",
    "end": "1936919"
  },
  {
    "text": "by editors and go please these days so completion if you if you're too lazy to type it out just rely on your Editor to",
    "start": "1936919",
    "end": "1943399"
  },
  {
    "text": "do it for you but I think my stance on all this is that I like the overall idea",
    "start": "1943399",
    "end": "1949639"
  },
  {
    "text": "to repeat types less if it's obvious enough from the local context but I also think this proposal as is is too broad",
    "start": "1949639",
    "end": "1957080"
  },
  {
    "text": "um if we have you know catch all type inference for composite literals it's going to be abused and it is going to",
    "start": "1957080",
    "end": "1963360"
  },
  {
    "text": "hurt maintainability so I would like to see proposals which are more narrowly scoped to cases where people pretty much",
    "start": "1963360",
    "end": "1970000"
  },
  {
    "text": "everybody agrees the code is better and I actually have a couple of uh follow-up proposals which are I think newer which",
    "start": "1970000",
    "end": "1976720"
  },
  {
    "text": "are a little bit narrowly scoped yeah yeah okay let's dig into those ones then",
    "start": "1976720",
    "end": "1982039"
  },
  {
    "text": "so the next one is so this first one that we talked about is from 2015 the next one is proposal number",
    "start": "1982039",
    "end": "1990639"
  },
  {
    "text": "35304 and it's from Roger Pepe again uh from 2019 and it's essentially Anonymous",
    "start": "1990639",
    "end": "1997559"
  },
  {
    "text": "struct literals so it's not about all composite literals it's only about structs and the basic idea is that you",
    "start": "1997559",
    "end": "2004840"
  },
  {
    "text": "can use an expression which is a struct but you don't say what type and then the compiler essentially figures out what",
    "start": "2004840",
    "end": "2011360"
  },
  {
    "text": "struct that fits into but it's only for structs yes so this one definitely looks",
    "start": "2011360",
    "end": "2018799"
  },
  {
    "text": "strange in the examples because in the proposal Roger written an underscore in",
    "start": "2018799",
    "end": "2024320"
  },
  {
    "text": "place of where the struct definition would previously have been and underscores in go to me mean like ignore",
    "start": "2024320",
    "end": "2032080"
  },
  {
    "text": "this or dismiss this uh so I that to me didn't stand out I didn't quite",
    "start": "2032080",
    "end": "2038639"
  },
  {
    "text": "understand that just by glancing at it but the principle is an interesting one",
    "start": "2038639",
    "end": "2044480"
  },
  {
    "text": "because yeah often you are just repeating yourself I do it quite a lot in test code but in other code too where",
    "start": "2044480",
    "end": "2051560"
  },
  {
    "text": "I'll just in line have a struct that I declare basically and then immediately I",
    "start": "2051560",
    "end": "2057079"
  },
  {
    "text": "will instantiate that create one of them and and set the fields and I do it all in one go and it's very repetitive it's",
    "start": "2057079",
    "end": "2065358"
  },
  {
    "text": "essentially a list of the fields with the types and then a list of the field names with their values would it help",
    "start": "2065359",
    "end": "2071960"
  },
  {
    "text": "with that situation probably wouldn't would it because you have to declare the struct still somewhere don't you part of",
    "start": "2071960",
    "end": "2077280"
  },
  {
    "text": "me feels like grabbing a chunk of the previous proposal and sort of merging it",
    "start": "2077280",
    "end": "2082760"
  },
  {
    "text": "with this one the what I don't like about this one is is the blank identifier the use of the blank identifier that's kind of rubbing me the",
    "start": "2082760",
    "end": "2089440"
  },
  {
    "text": "wrong way a little bit um like I associate that with what you said mat with whatever it is that I'm assigning",
    "start": "2089440",
    "end": "2095280"
  },
  {
    "text": "to this thing I don't care about it right so discarded you know GC it whatever so here I think we could get a",
    "start": "2095280",
    "end": "2103119"
  },
  {
    "text": "mix of this in a previous proposal by omitting the the blank identifier and",
    "start": "2103119",
    "end": "2109480"
  },
  {
    "text": "basically relying on the tap inference basically to to determine that okay I'm assigning this literal value right you",
    "start": "2109480",
    "end": "2116079"
  },
  {
    "text": "already know what the type is based on my uh VAR declaration or something that obviously it wouldn't work for the",
    "start": "2116079",
    "end": "2121440"
  },
  {
    "text": "bucktooth operator right but you know you could use it for if you know if you do VAR something of a given type then",
    "start": "2121440",
    "end": "2128240"
  },
  {
    "text": "you provide the the literal value then I could see that you know without the bling on infi I could see that working I",
    "start": "2128240",
    "end": "2133359"
  },
  {
    "text": "would like to clarify one thing which is that this proposal is not strictly a subset of the previous proposal so I I",
    "start": "2133359",
    "end": "2139280"
  },
  {
    "text": "lied a little bit my bad so there's one case that the previous proposal does not cover which is uh what if you just want",
    "start": "2139280",
    "end": "2146079"
  },
  {
    "text": "to create a struct expression but it's not a named type that's been defined",
    "start": "2146079",
    "end": "2151560"
  },
  {
    "text": "before so you're you know you're creating an an anonymous struct a variable of anonymous structure type so",
    "start": "2151560",
    "end": "2157760"
  },
  {
    "text": "you could do VAR something some name and then struct Define the struct in line",
    "start": "2157760",
    "end": "2163119"
  },
  {
    "text": "it's an anonymous struct type and then the value got so with the previous proposal because it's inferring what the",
    "start": "2163119",
    "end": "2168280"
  },
  {
    "text": "type will be there's nothing to infer to if you use you know uh Fu colon equals",
    "start": "2168280",
    "end": "2173920"
  },
  {
    "text": "and then underscore with this new syntax because there's nothing to invert to right but with this new proposal it",
    "start": "2173920",
    "end": "2180200"
  },
  {
    "text": "would essentially be like it's it's an anonymous stru type I'm not trying to fit it into any other type so it's just",
    "start": "2180200",
    "end": "2185839"
  },
  {
    "text": "an anonymous type and it would just work H so it figures out what the struct",
    "start": "2185839",
    "end": "2190920"
  },
  {
    "text": "shape and structure should be from the values that you set is that right yeah so if you're using that ex that",
    "start": "2190920",
    "end": "2197640"
  },
  {
    "text": "expression in the context where you're assigning it to something that has an explicit value then the compiler would",
    "start": "2197640",
    "end": "2203079"
  },
  {
    "text": "figure out is the shape the same and if so it would just work if the shape is different it would fail and if there's",
    "start": "2203079",
    "end": "2209480"
  },
  {
    "text": "nothing no specific type that you're assigning to it would just use an anonymous struct type just as if you had",
    "start": "2209480",
    "end": "2215079"
  },
  {
    "text": "spelled it out duplicating all the field F names on so on ah so that I quite like",
    "start": "2215079",
    "end": "2221200"
  },
  {
    "text": "because yeah there's no other way I mean apart from we're going to get into the world of like number types like is this",
    "start": "2221200",
    "end": "2228680"
  },
  {
    "text": "a float or an in and things like this which you have with constants anyway you have to sometimes be explicit if you",
    "start": "2228680",
    "end": "2234599"
  },
  {
    "text": "want it to be a a floating point you have to put a decimal point in it even if it's 0 zero at least you're just giving a clue that that's the type so I",
    "start": "2234599",
    "end": "2242160"
  },
  {
    "text": "quite like that yeah I've yet to sort of dive deeper into the Ms but is there a",
    "start": "2242160",
    "end": "2247640"
  },
  {
    "text": "performance penalty there with trying to because the compiler would have to figure out like do you have a match with",
    "start": "2247640",
    "end": "2254520"
  },
  {
    "text": "whatever it is that you're you're trying to sort of assign the value to right doesn't it already do this like if you",
    "start": "2254520",
    "end": "2261480"
  },
  {
    "text": "are signing like you currently as of today you can take any struct type and",
    "start": "2261480",
    "end": "2266880"
  },
  {
    "text": "assign it any other struct type just with a cast yeah and it needs to be able",
    "start": "2266880",
    "end": "2272599"
  },
  {
    "text": "to figure out if the field is a subset of the other field mhm so I think this is already there yeah it",
    "start": "2272599",
    "end": "2280440"
  },
  {
    "text": "this what will be statically uh so it's not at runtime right yeah yeah I wonder if you could just drop that underscore",
    "start": "2280440",
    "end": "2286240"
  },
  {
    "text": "and just use like the curly braces and say it's almost like JavaScript has just",
    "start": "2286240",
    "end": "2292240"
  },
  {
    "text": "jonon object notation in the language but it's a struct it's an anonymous",
    "start": "2292240",
    "end": "2297599"
  },
  {
    "text": "struct it doesn't have a type almost or or its type is created magically would that work is that",
    "start": "2297599",
    "end": "2304760"
  },
  {
    "text": "reserved that's not reserved for anything else is it a block I guess it's not reserved but what I love about go is",
    "start": "2304760",
    "end": "2311200"
  },
  {
    "text": "that is consistent if you have VAR token equals there must be two tokens",
    "start": "2311200",
    "end": "2318599"
  },
  {
    "text": "afterwards and it's like a type and a literal if you're doing a literal expression and I like when I read code I",
    "start": "2318599",
    "end": "2324000"
  },
  {
    "text": "can just glance over it and I know the order in which things come in if you drop one token it start feeling like",
    "start": "2324000",
    "end": "2331200"
  },
  {
    "text": "unbalanced or clunky so it would require more attention especially if you do like open brace and you go on the new line",
    "start": "2331200",
    "end": "2336760"
  },
  {
    "text": "which this proposal is using already and that would feel if you glance over the",
    "start": "2336760",
    "end": "2342240"
  },
  {
    "text": "code like an if or a statement or something because it doesn't have the",
    "start": "2342240",
    "end": "2347440"
  },
  {
    "text": "extra token and I like to be able to glance over the code and tokenize it it's like an inline like scope block or",
    "start": "2347440",
    "end": "2354920"
  },
  {
    "text": "something yeah yeah yeah something came to mind but quickly left so I'll",
    "start": "2354920",
    "end": "2360720"
  },
  {
    "text": "defer it wasn't flattering I was actually going to",
    "start": "2360720",
    "end": "2366480"
  },
  {
    "text": "follow up with what Roberto said which is that if we drop the underscore we change the go syntax because right now",
    "start": "2366480",
    "end": "2373440"
  },
  {
    "text": "when you parse a composite literal you parse type open curly brace the elements",
    "start": "2373440",
    "end": "2378800"
  },
  {
    "text": "Clos curly brace and if you drop the um the type if you drop drop the type expression be it the underscore be it",
    "start": "2378800",
    "end": "2385200"
  },
  {
    "text": "some name be it whatever you want then every single program out there that needs to parse go code has to be updated",
    "start": "2385200",
    "end": "2391000"
  },
  {
    "text": "and that has a pretty high cost maybe we can use a uh Robert's fix right just throw some gof fum that",
    "start": "2391000",
    "end": "2396920"
  },
  {
    "text": "it you could go have GP put it in there while we're at it why don't we",
    "start": "2396920",
    "end": "2403160"
  },
  {
    "text": "just have gof fumed write all the code for us I mean yeah yeah I mean soon it",
    "start": "2403160",
    "end": "2409079"
  },
  {
    "text": "should are we working on that yeah someone must be someone must be sorry",
    "start": "2409079",
    "end": "2415480"
  },
  {
    "text": "Daniel there is this joke that I've seen a lot in other community communities",
    "start": "2415480",
    "end": "2420680"
  },
  {
    "text": "that is in go what the Lang language can't do um the editors are supposed to",
    "start": "2420680",
    "end": "2426440"
  },
  {
    "text": "place like I've seen a lot of people saying that go uses generating code when generics are not there or like using",
    "start": "2426440",
    "end": "2432640"
  },
  {
    "text": "other tools to fill in where the language misses something and that is always for writing like all of the",
    "start": "2432640",
    "end": "2439119"
  },
  {
    "text": "things that I've seen is was always about writing never about reading so honestly I mean I wouldn't go as far as",
    "start": "2439119",
    "end": "2446520"
  },
  {
    "text": "like something like okay goam write my code because that would be you know",
    "start": "2446520",
    "end": "2451640"
  },
  {
    "text": "writing my job away Matt would you're telling me you wouldn't pay",
    "start": "2451640",
    "end": "2457040"
  },
  {
    "text": "for that if I could build it I don't know I like coding oh I never said",
    "start": "2457040",
    "end": "2462440"
  },
  {
    "text": "that what I'm doing tomorrow that's that's the rest of my week out right but",
    "start": "2463280",
    "end": "2469319"
  },
  {
    "text": "yeah so I I like to be able to quickly read code rather than quickly write and",
    "start": "2469319",
    "end": "2475119"
  },
  {
    "text": "if if tools have to kick in every other line I mean Java is successful and it's exactly the same so why not so we have",
    "start": "2475119",
    "end": "2482520"
  },
  {
    "text": "one more proposal in this little group of alighting types uh maybe we can quickly mention that one it's proposal",
    "start": "2482520",
    "end": "2489720"
  },
  {
    "text": "number 21496 and it's called permit elighting",
    "start": "2489720",
    "end": "2495000"
  },
  {
    "text": "the type of struct fields in nested composite literals so it's sort of a mix of the previous two because it's only",
    "start": "2495000",
    "end": "2501520"
  },
  {
    "text": "for struct fields and it's only within nested composite literals um but it's",
    "start": "2501520",
    "end": "2508079"
  },
  {
    "text": "still allision it's not about Anonymous types yeah right I like those ones where",
    "start": "2508079",
    "end": "2513720"
  },
  {
    "text": "the compil can figure out you know like put in the type for me you already know what it is what it's supposed to be just",
    "start": "2513720",
    "end": "2520280"
  },
  {
    "text": "put it in for me kind of thing um but again on the other side of that you you pay that readability cost so I think",
    "start": "2520280",
    "end": "2527560"
  },
  {
    "text": "this proposal might be the smallest in terms of effect I would even argue that this proposal is not going to affect readability because it's only within",
    "start": "2527560",
    "end": "2534480"
  },
  {
    "text": "nested types so if you're in a nested type then further up the chain you must have mentioned that type already yeah",
    "start": "2534480",
    "end": "2541359"
  },
  {
    "text": "yeah I like this yeah yeah I was just reading it at the same time I'm looking at the samples and they don't quite look",
    "start": "2541359",
    "end": "2547960"
  },
  {
    "text": "like go to me so I'm not sure how to feel about it yeah that's an interesting Instinct I",
    "start": "2547960",
    "end": "2554319"
  },
  {
    "text": "think it's actually quite important I was just sat here reading this which I realized doesn't make for great podcast",
    "start": "2554319",
    "end": "2561000"
  },
  {
    "text": "content um but yeah I don't know Roberto what do you think about this one uh this",
    "start": "2561000",
    "end": "2567480"
  },
  {
    "text": "one out of all of them is probably the one that I like the least because it's such an uncommon instance for like I",
    "start": "2567480",
    "end": "2575280"
  },
  {
    "text": "would have used this like like probably five times in the past 5 years so I mean",
    "start": "2575280",
    "end": "2580680"
  },
  {
    "text": "changing a language is a big is a long process it requires a lot of work and a lot of discussion and this small change",
    "start": "2580680",
    "end": "2588880"
  },
  {
    "text": "would address part of the issue not all of it and if you use an ID a modern ID",
    "start": "2588880",
    "end": "2595200"
  },
  {
    "text": "well I use Vim so not even a modern one and you are inside a struct and you're about to type a field and you just",
    "start": "2595200",
    "end": "2600599"
  },
  {
    "text": "careful T complete it it's going to be there so this one require would save me",
    "start": "2600599",
    "end": "2606119"
  },
  {
    "text": "two key strokes every 5 years so no not a big",
    "start": "2606119",
    "end": "2611760"
  },
  {
    "text": "fun yeah I think the reason I like this proposal is because it's it's a very small step we could take uh in the",
    "start": "2611960",
    "end": "2618520"
  },
  {
    "text": "direction of more type illusion and we could experiment with that and if people like it we could take other small steps",
    "start": "2618520",
    "end": "2624800"
  },
  {
    "text": "like maybe we also do it for maps or maybe we also do it for other very specific edge cases where we're sure",
    "start": "2624800",
    "end": "2630839"
  },
  {
    "text": "that readability is not harmed yeah we did talk about this in part one of this uh which is still available if you want",
    "start": "2630839",
    "end": "2637119"
  },
  {
    "text": "to go into your little podcast app find um find part one of this and you can you",
    "start": "2637119",
    "end": "2642720"
  },
  {
    "text": "can hear about that we talked about doing this kind of thing for maps I think the general point of what does it",
    "start": "2642720",
    "end": "2649400"
  },
  {
    "text": "do to readability I think has to be kind of like the the main consideration",
    "start": "2649400",
    "end": "2654839"
  },
  {
    "text": "really it's not naturally I think what you immediately go to because when we're",
    "start": "2654839",
    "end": "2660040"
  },
  {
    "text": "are doing the work we're typing it and that's kind of where all our conscious thought goes but yeah for sure the the",
    "start": "2660040",
    "end": "2667720"
  },
  {
    "text": "glance ability the readability these properties they are being considered I think which is great really to see that",
    "start": "2667720",
    "end": "2674400"
  },
  {
    "text": "people do think about this right and if this proposal is like uh Daniel said",
    "start": "2674400",
    "end": "2679960"
  },
  {
    "text": "which is we start you know taking these off and then we look around and we see what else we can address and maybe we",
    "start": "2679960",
    "end": "2686440"
  },
  {
    "text": "can start lighting some types here and there I would be in favor of that but this proposal as it is like just this is",
    "start": "2686440",
    "end": "2694920"
  },
  {
    "text": "for me not enough but if we start looking around and see again maybe in",
    "start": "2694920",
    "end": "2700160"
  },
  {
    "text": "this other context is very clear for the reader what the type is we can just remove it there too why",
    "start": "2700160",
    "end": "2707119"
  },
  {
    "text": "not I mean this is how we started to change the language like I think one of the first changes to the language in the",
    "start": "2707119",
    "end": "2713440"
  },
  {
    "text": "long time was numeric lits allowed underscores or something like that it was a small change but it was a change",
    "start": "2713440",
    "end": "2719160"
  },
  {
    "text": "so this was first step towards moving forward that was a great change by the way I found myself using that yeah I",
    "start": "2719160",
    "end": "2726200"
  },
  {
    "text": "agree very very quickly yeah what is it for people unfamiliar basically if you have very long numeric constants that",
    "start": "2726200",
    "end": "2733079"
  },
  {
    "text": "have too many digits you can just add underscores in between digits at any point that is ignored during comp",
    "start": "2733079",
    "end": "2740440"
  },
  {
    "text": "compilation but like if you have a billion it just looks nice because it's a one followed by three triplets of",
    "start": "2740440",
    "end": "2747119"
  },
  {
    "text": "zeros separated by underscore yeah yeah it's sort of an improvement of readability isn't it I've had another",
    "start": "2747119",
    "end": "2754559"
  },
  {
    "text": "thought that I'd like to float this is a serious one now it's not going to be silly you know how Ruby in Ruby when",
    "start": "2754559",
    "end": "2761960"
  },
  {
    "text": "you're accessing arrays you can use negative numbers to come at it from the other side so minus one essentially is",
    "start": "2761960",
    "end": "2769160"
  },
  {
    "text": "the last item and then minus two is the penultimate item minus 3 is you know",
    "start": "2769160",
    "end": "2774920"
  },
  {
    "text": "third from the end that sometimes is very useful often you do want to get the",
    "start": "2774920",
    "end": "2780079"
  },
  {
    "text": "last item and at the moment you have to take the length of it you have to explicitly do that and do you feel about",
    "start": "2780079",
    "end": "2786800"
  },
  {
    "text": "having those Ruby esque negative numbers in index accessors I don't like it why",
    "start": "2786800",
    "end": "2794119"
  },
  {
    "text": "not Roberto because most of the time that I got an off by one I noticed",
    "start": "2794119",
    "end": "2799720"
  },
  {
    "text": "because it panicked like most of the bugs that I saw in logs or stuff like",
    "start": "2799720",
    "end": "2805680"
  },
  {
    "text": "that was because of crashes because of off by ones and I found out that logic was flawed in other ways thanks to this",
    "start": "2805680",
    "end": "2812280"
  },
  {
    "text": "I would be in favor of having a built-in function called last that takes a slice",
    "start": "2812280",
    "end": "2817400"
  },
  {
    "text": "and returns slice or array and Returns the last item and the last index if you",
    "start": "2817400",
    "end": "2822520"
  },
  {
    "text": "read two values for example because I've never needed the penultimate element but",
    "start": "2822520",
    "end": "2827800"
  },
  {
    "text": "the last one is frequent as you say so I would prefer something like that rather",
    "start": "2827800",
    "end": "2832839"
  },
  {
    "text": "than having just weird minus one access unless maybe if it is a literal like a",
    "start": "2832839",
    "end": "2839040"
  },
  {
    "text": "numeric literal that you write in the source code which is a minus one in that case it's clear you're not iterating or",
    "start": "2839040",
    "end": "2844559"
  },
  {
    "text": "having enough off by one you mean debt right so you couldn't use it as a variable and count backwards through",
    "start": "2844559",
    "end": "2850240"
  },
  {
    "text": "them but see because that's the thing in Ruby you could do is you could Loop backwards that's silly really so yeah",
    "start": "2850240",
    "end": "2856480"
  },
  {
    "text": "actually a literal so it has to be spelled out right I'll take that",
    "start": "2856480",
    "end": "2862359"
  },
  {
    "text": "compromise if if it would convince you but you you you it's an interesting point this wrap around Johnny we're not",
    "start": "2862359",
    "end": "2868680"
  },
  {
    "text": "doing this one we've got some up next thing you're going to you",
    "start": "2868680",
    "end": "2874119"
  },
  {
    "text": "probably have loaded up is like like you know you want method Missing Method Miss",
    "start": "2874119",
    "end": "2881079"
  },
  {
    "text": "Ruby oh method missing don't you missing",
    "start": "2881440",
    "end": "2886599"
  },
  {
    "text": "some I've built some magic things magical things happen with method missing oh but yeah I don't think yeah",
    "start": "2886599",
    "end": "2893880"
  },
  {
    "text": "for those that who don't know in Ruby you can create Define something that",
    "start": "2893880",
    "end": "2899079"
  },
  {
    "text": "runs in in case someone is trying to use something that doesn't exist and",
    "start": "2899079",
    "end": "2904160"
  },
  {
    "text": "basically allows you to build a very simple shell interactive shell in Ruby by just defining that method missing and",
    "start": "2904160",
    "end": "2910880"
  },
  {
    "text": "that is one of the best and worst features of rui I would say yeah yeah",
    "start": "2910880",
    "end": "2917640"
  },
  {
    "text": "it's kind of amazing I mean literally it's like having a struct with methods",
    "start": "2917640",
    "end": "2922920"
  },
  {
    "text": "and another method called method missing that gets called if you call anything on",
    "start": "2922920",
    "end": "2928400"
  },
  {
    "text": "that so obviously that and by the way that was not what I was advocating for only as a joke said that that's what I",
    "start": "2928400",
    "end": "2934440"
  },
  {
    "text": "was advocating for it's that for sure is too magic imagine and this happened to me you just do a",
    "start": "2934440",
    "end": "2940480"
  },
  {
    "text": "typo and it's just not an error it's just like sure keep going no probs no",
    "start": "2940480",
    "end": "2946960"
  },
  {
    "text": "problem here probs I wanted to say probs like yeah um that's not quite the same",
    "start": "2946960",
    "end": "2953680"
  },
  {
    "text": "as the minus one thing but I don't know Daniel you might have to uh it's not a",
    "start": "2953680",
    "end": "2958799"
  },
  {
    "text": "casting vote of been defeated no tie I'm absolutely defeated was like what is",
    "start": "2958799",
    "end": "2964359"
  },
  {
    "text": "wrong with these people what do you reckon I was actually reading an old proposal again because",
    "start": "2964359",
    "end": "2970559"
  },
  {
    "text": "this idea has been proposed before the method missing great idea no",
    "start": "2970559",
    "end": "2976720"
  },
  {
    "text": "what method missing the negative index thing yes the",
    "start": "2976720",
    "end": "2982079"
  },
  {
    "text": "negative index one so it's issue number 33359 if anybody wants to look into it",
    "start": "2982079",
    "end": "2987280"
  },
  {
    "text": "it's rejected which is why we didn't consider it but there were some good points in that thread essentially the",
    "start": "2987280",
    "end": "2993400"
  },
  {
    "text": "main argument against a proposal was what said which is what if you've got an index variable and it happens to go",
    "start": "2993400",
    "end": "2998880"
  },
  {
    "text": "negative and then you wouldn't Panic you would do something weird and then people said what about doing Len minus",
    "start": "2998880",
    "end": "3006160"
  },
  {
    "text": "something instead of having to do Len of the slice minus something and that",
    "start": "3006160",
    "end": "3011720"
  },
  {
    "text": "seemed to be like the most reasonable option but I don't think it gained enough traction to keep the proposal",
    "start": "3011720",
    "end": "3017440"
  },
  {
    "text": "open H I see so inside the square brackets you'd say like Len minus one",
    "start": "3017440",
    "end": "3024119"
  },
  {
    "text": "and you don't have to say Len brackets then the variable again it's kind of like inferring what you mean although",
    "start": "3024119",
    "end": "3031799"
  },
  {
    "text": "sometimes you might mean a different length of a thing I guess and we're just back to being explicit is better than",
    "start": "3031799",
    "end": "3039280"
  },
  {
    "text": "magic as usual can't have nice things in go because they're too magic H all right is",
    "start": "3039280",
    "end": "3047680"
  },
  {
    "text": "that a definite no then everyone in that discussion I saw that people rejected the literal thing someone proposed the",
    "start": "3047680",
    "end": "3054559"
  },
  {
    "text": "same idea I had which is if it is a literal is fine if it is not uh it's not and what was the rejection of that based",
    "start": "3054559",
    "end": "3060920"
  },
  {
    "text": "on it doesn't click with me that I'm literally reading out of objective people say it doesn't click",
    "start": "3060920",
    "end": "3068240"
  },
  {
    "text": "with me okay fine okay fair [Music]",
    "start": "3068240",
    "end": "3081739"
  },
  {
    "text": "enough this episode is brought to you by our friends at source graph Source graph is code searge for every developer and",
    "start": "3084359",
    "end": "3090839"
  },
  {
    "text": "team and in this segment I'm talking with bangl co-founder in CTO of source graph and he's sharing exactly how code",
    "start": "3090839",
    "end": "3096799"
  },
  {
    "text": "search works and how it can work for you and your team so biang I want you to share exactly what code search is and",
    "start": "3096799",
    "end": "3102359"
  },
  {
    "text": "how teams can use it so Adam I think the best way to describe Source graph is that it's this single search and",
    "start": "3102359",
    "end": "3108079"
  },
  {
    "text": "exploration tool that encompasses the entire universe of code that you might care about and that includes all the",
    "start": "3108079",
    "end": "3114920"
  },
  {
    "text": "code inside your organization code written by other teams as well as code that might be external to your organization for example open source",
    "start": "3114920",
    "end": "3121640"
  },
  {
    "text": "dependencies that you're pulling in so it's a single portal the single search box that lets you type in uh string",
    "start": "3121640",
    "end": "3127520"
  },
  {
    "text": "literal or a Rex pattern and instantly search across all that code and jump to",
    "start": "3127520",
    "end": "3133480"
  },
  {
    "text": "the specific points in that code that you're interested in learning about and then it becomes this interface that",
    "start": "3133480",
    "end": "3138559"
  },
  {
    "text": "allows you to easily navigate and build up a mental model of how that part of",
    "start": "3138559",
    "end": "3144160"
  },
  {
    "text": "code works so whether it's trying to find a needle in a Hy stack that you're concerned about or trying to find uh",
    "start": "3144160",
    "end": "3150720"
  },
  {
    "text": "examples of how to use a particular unfamiliar library or package or maybe",
    "start": "3150720",
    "end": "3156240"
  },
  {
    "text": "you just want to jump to a bunch of places in code that you can then link to and discuss with teammates and this is",
    "start": "3156240",
    "end": "3161280"
  },
  {
    "text": "all in the service of eventually getting back into your editor so that you have all the context all the information that",
    "start": "3161280",
    "end": "3167559"
  },
  {
    "text": "you need to know about the area of code that you're modifying and get back into that flow state where you're just coding",
    "start": "3167559",
    "end": "3172799"
  },
  {
    "text": "at the speed of light and you feel like you're you're making rapid progress ress towards that bug fix or or that feature that you're currently building all right",
    "start": "3172799",
    "end": "3178920"
  },
  {
    "text": "if code search powered by Source graph sounds like something you and your team can use head to info. sourc craft.com",
    "start": "3178920",
    "end": "3184520"
  },
  {
    "text": "changelog and click the button that says try Source graph now you can install locally deploy it to a server or to a",
    "start": "3184520",
    "end": "3190280"
  },
  {
    "text": "cluster they have a quick start guide that takes less than 5 minutes to install Source graph using Docker so it's too easy to give a try again head",
    "start": "3190280",
    "end": "3196839"
  },
  {
    "text": "to info. sourcegraph [Music]",
    "start": "3196839",
    "end": "3204160"
  },
  {
    "text": "docomo [Music]",
    "start": "3204160",
    "end": "3211359"
  },
  {
    "text": "that's the thing with all these proposals right we don't have an objective we of measuring readability we",
    "start": "3219240",
    "end": "3224599"
  },
  {
    "text": "all have hunches right and ideally the more experienced you are as a developer",
    "start": "3224599",
    "end": "3231000"
  },
  {
    "text": "the better those hunches get but it's hard like when I sit down a pair with a",
    "start": "3231000",
    "end": "3236119"
  },
  {
    "text": "more Junior developer every time I feel like I have to rely on well because it's more readable in the back of my head I'm",
    "start": "3236119",
    "end": "3241799"
  },
  {
    "text": "thinking is there a better way I like how do I explain this right like how do I transfer this this bit of intuitional",
    "start": "3241799",
    "end": "3249240"
  },
  {
    "text": "wisdom you know like is there a better way to actually explain this right so",
    "start": "3249240",
    "end": "3254359"
  },
  {
    "text": "simply saying it's more readable less readable those are all what we think those are ideas we don't have a way of",
    "start": "3254359",
    "end": "3259839"
  },
  {
    "text": "measuring that so yeah yeah and it also depends on where it come from the other day was doing a readability review on",
    "start": "3259839",
    "end": "3266400"
  },
  {
    "text": "some code that was submitted and the person which was completely new to go called every receiver for every method",
    "start": "3266400",
    "end": "3273440"
  },
  {
    "text": "these so basically every receiver will was called these and I said well you should give it a more meaningful name",
    "start": "3273440",
    "end": "3280119"
  },
  {
    "text": "like s because the type started with s and he was like how is that more readable like please explain to me what",
    "start": "3280119",
    "end": "3287480"
  },
  {
    "text": "are you trying to convey here I was like so okay where where do I start it's not",
    "start": "3287480",
    "end": "3293520"
  },
  {
    "text": "it's not that easy because for me calling that type which was called something like um sorted something",
    "start": "3293520",
    "end": "3299440"
  },
  {
    "text": "calling it Sr which was that something would have been more meaningful than calling it just these because these",
    "start": "3299440",
    "end": "3306280"
  },
  {
    "text": "requires me to go back to the function definition and see what it is because maybe I lost context but it was a long",
    "start": "3306280",
    "end": "3312079"
  },
  {
    "text": "discussion let's put it this way so readability really changes but depending on your background and your expectations",
    "start": "3312079",
    "end": "3318640"
  },
  {
    "text": "yeah I think there's a good lesson in that because we can get a little bit dogmatic about things and go and we can",
    "start": "3318640",
    "end": "3325359"
  },
  {
    "text": "be like this is the way to do it and we feel very strongly about that and I I'm",
    "start": "3325359",
    "end": "3331119"
  },
  {
    "text": "a little bit guilty of this cuz I've done talks at conferences are available on YouTube um where like I'll show like",
    "start": "3331119",
    "end": "3339319"
  },
  {
    "text": "idiomatic things and and different idioms and patterns that are good and and things although I always try and",
    "start": "3339319",
    "end": "3345760"
  },
  {
    "text": "make the point that um you know it should be taken in the right kind of spirit and I think we should be a little",
    "start": "3345760",
    "end": "3352119"
  },
  {
    "text": "bit more open when we kind of consider these things we can sometimes be a little bit closed off like these are you",
    "start": "3352119",
    "end": "3359640"
  },
  {
    "text": "know this is the way to do it and that's it and we should watch that cuz uh that can be very exclusive um if we if we go",
    "start": "3359640",
    "end": "3366400"
  },
  {
    "text": "down that road can't it mhm um it's one last one oh I don't know",
    "start": "3366400",
    "end": "3372839"
  },
  {
    "text": "if oh we're at that time oh look at that we're at time yeah this has been a this has been a cracking show you remember",
    "start": "3372839",
    "end": "3378960"
  },
  {
    "text": "you have to let um Jared know that he has to come back on and yeah and he's either going to do it or he's not if he",
    "start": "3378960",
    "end": "3384599"
  },
  {
    "text": "doesn't do I'll just play it I'll just play it live we'll do it live you just grab your guitar",
    "start": "3384599",
    "end": "3391039"
  },
  {
    "text": "anding should we clap again but to get Jared it's not like a",
    "start": "3391039",
    "end": "3397160"
  },
  {
    "text": "dog just or a horse it just responds to claps he doesn't respond to them that's",
    "start": "3397160",
    "end": "3403280"
  },
  {
    "text": "the annoying thing I wish he was more like a horse in in a lot of ways okay well as I was saying before I was rudely",
    "start": "3403280",
    "end": "3410160"
  },
  {
    "text": "interrupted it's that time again it's time for unpopular opinion",
    "start": "3410160",
    "end": "3415410"
  },
  {
    "text": "[Music]",
    "start": "3415410",
    "end": "3421680"
  },
  {
    "text": "I actually think you should probably [Music]",
    "start": "3421680",
    "end": "3433960"
  },
  {
    "text": "leave okay I'm going to go first this time this is my unpopular opinion and",
    "start": "3433960",
    "end": "3439960"
  },
  {
    "text": "and and this one hurts me to say because people have done like lovely things for",
    "start": "3439960",
    "end": "3445520"
  },
  {
    "text": "me and this is now going to throw it back in their faces are you ready I",
    "start": "3445520",
    "end": "3450599"
  },
  {
    "text": "think we should stop doing conference swag it's landfill I mean give people more tickets",
    "start": "3450599",
    "end": "3457319"
  },
  {
    "text": "or something or licenses for software or something no more conference swag what",
    "start": "3457319",
    "end": "3463839"
  },
  {
    "text": "about t-shirts t-shirts are okay cuz they're useful I'm actually wearing one now yeah exactly I was about to go",
    "start": "3463839",
    "end": "3472000"
  },
  {
    "text": "t-shirts t-shirts yeah EXA t-shirts are great that's true I mean I mean you know",
    "start": "3472000",
    "end": "3477200"
  },
  {
    "text": "the other stuff that like it's lovely and and people go to such great lengths",
    "start": "3477200",
    "end": "3482280"
  },
  {
    "text": "and a lot of effort goes into it and this is why I was very reluctant to say this um but yeah it's a lot of garbage",
    "start": "3482280",
    "end": "3490640"
  },
  {
    "text": "what about like the little plushy gos and stuff I mean those little things we",
    "start": "3490640",
    "end": "3497000"
  },
  {
    "text": "we don't know if they're going to at some point come to life and try and get us do you see this he's like he's",
    "start": "3497000",
    "end": "3503559"
  },
  {
    "text": "looking at us exactly and also Daniel was holding up one was",
    "start": "3503559",
    "end": "3510079"
  },
  {
    "text": "creeping up the screen yeah there you go but yeah it's like I have this block from goer UK and I love this I like this",
    "start": "3510079",
    "end": "3517960"
  },
  {
    "text": "kind of stuff is fine but stuff like a squeeze bow I'm never going to use that is or like fridge magnets um I my my",
    "start": "3517960",
    "end": "3526039"
  },
  {
    "text": "fridge is in in a in a wooden thing like I can't use this You' got a wooden fridge no it's inside something to make",
    "start": "3526039",
    "end": "3532720"
  },
  {
    "text": "it look like a a cboard a wooden fridge like from the olden days know I put wood",
    "start": "3532720",
    "end": "3538599"
  },
  {
    "text": "good you have to hammer them in no it's just like I have to put wood in it it has to burn in order to produce",
    "start": "3538599",
    "end": "3544480"
  },
  {
    "text": "com combus oh classic so retro of you Roberto right steampunk yeah",
    "start": "3544480",
    "end": "3552039"
  },
  {
    "text": "very yeah I don't know what do you think is it too harsh what you're saying is you want more useful swag okay yeah",
    "start": "3552039",
    "end": "3559039"
  },
  {
    "text": "actually good point yeah actually yeah I don't know people love it as well don't",
    "start": "3559039",
    "end": "3564359"
  },
  {
    "text": "they so it's like I really do feel like a spoiled sport a little bit Daniel what you record do you like conference swag",
    "start": "3564359",
    "end": "3570720"
  },
  {
    "text": "mate I used to be big into free t-shirts and swag t-shirts and t-shirts that would say like go or whatever these days",
    "start": "3570720",
    "end": "3578319"
  },
  {
    "text": "not really anymore so I I tend to agree that there's too much swag I I feel like a little bit of Swag would be fine but",
    "start": "3578319",
    "end": "3585359"
  },
  {
    "text": "yeah too cool now aren't you to wear go t-shirts yeah now I just wear like literally white t-shirts yeah so",
    "start": "3585359",
    "end": "3593280"
  },
  {
    "text": "minimalist yeah you are an undercover minimalist my friend current background",
    "start": "3593280",
    "end": "3599039"
  },
  {
    "text": "not withstanding yeah no I like to be able",
    "start": "3599039",
    "end": "3604440"
  },
  {
    "text": "to see all Daniel's clothes it's a bonus for anyone watching live on YouTube uh",
    "start": "3604440",
    "end": "3610280"
  },
  {
    "text": "you don't get to see those clothes if you're if you're listening on the podcast for sure you need more more color though in your wardrobe I'd say",
    "start": "3610280",
    "end": "3617359"
  },
  {
    "text": "Daniel who brutal you you could do some more go",
    "start": "3617359",
    "end": "3623280"
  },
  {
    "text": "t-shirts Daniel actually yeah Dani you have some more variety in",
    "start": "3623280",
    "end": "3629240"
  },
  {
    "text": "your t-shirts I'll wear a really ugly free t-shirt next time I",
    "start": "3629240",
    "end": "3634720"
  },
  {
    "text": "promise yeah what's the best swag you've ever had one time I was at a conference",
    "start": "3634720",
    "end": "3641000"
  },
  {
    "text": "and they gave out hand sanitizer now you're talking was this like immediately before",
    "start": "3641000",
    "end": "3647280"
  },
  {
    "text": "Co no it wasn't actually especially now it' be great wouldn't it they were very forward looking like that that was",
    "start": "3647280",
    "end": "3654160"
  },
  {
    "text": "almost an oracle germs germs have been around for ages Roberto no I don't I I",
    "start": "3654160",
    "end": "3659640"
  },
  {
    "text": "don't know of any germs before 2020 sorry yeah once at a conference they were",
    "start": "3659640",
    "end": "3665680"
  },
  {
    "text": "giving out uh rechargeable batteries to charge your phone with because supposedly you're going around all day",
    "start": "3665680",
    "end": "3671400"
  },
  {
    "text": "with your phone so I was thinking wait now I need to remember to charge my second battery so I can charge my first",
    "start": "3671400",
    "end": "3676960"
  },
  {
    "text": "battery that's kind of yeah can you charge it from your phone can you do it that way if you if",
    "start": "3676960",
    "end": "3683440"
  },
  {
    "text": "it runs out you can just charge it with your phone no this was before the USBC days so it was like micro USB that would",
    "start": "3683440",
    "end": "3690200"
  },
  {
    "text": "only go one way no I a popular opinion what is it Johnny you want to know what",
    "start": "3690200",
    "end": "3696119"
  },
  {
    "text": "it is yes please you may not like it do you really do you really want to know what it is is it about British people",
    "start": "3696119",
    "end": "3702920"
  },
  {
    "text": "uh now it is now it",
    "start": "3702920",
    "end": "3707280"
  },
  {
    "text": "is yeah yeah uh but no seriously I do think that we in the Community can",
    "start": "3708039",
    "end": "3715559"
  },
  {
    "text": "suffer from a little bit of group think the whole thing about idiomatic go",
    "start": "3715559",
    "end": "3720880"
  },
  {
    "text": "what does it mean to write idiomatic go again to go back to the stuff that uh I",
    "start": "3720880",
    "end": "3726240"
  },
  {
    "text": "touched on earlier when I'm pairing with somebody the stuff that Roberto mentioned earlier like some things you",
    "start": "3726240",
    "end": "3732240"
  },
  {
    "text": "can't you can't really put a number or be specific about it you kind of have to get well that you know do it this way",
    "start": "3732240",
    "end": "3738359"
  },
  {
    "text": "because that's kind of the way we do it right now there's some wisdom right um",
    "start": "3738359",
    "end": "3743880"
  },
  {
    "text": "that can be gotten from the crowd when when a bunch of people try something and they all you",
    "start": "3743880",
    "end": "3748960"
  },
  {
    "text": "know discuss and and exchange ideas and realize okay doing it this way more more often than not we'll yield some benefits",
    "start": "3748960",
    "end": "3755279"
  },
  {
    "text": "doing it that way more often than not will will yield some Troublesome things there is value in that but I think",
    "start": "3755279",
    "end": "3762920"
  },
  {
    "text": "sometimes we can sort of uh like try so hard to sort of uh go with the pack um",
    "start": "3762920",
    "end": "3768599"
  },
  {
    "text": "that we we we we stop thinking for ourselves right I've come across folks that are trying to learn go that that",
    "start": "3768599",
    "end": "3775279"
  },
  {
    "text": "are beating themselves up they they have a working solution but they're beating themselves up because their code doesn't quite look like what a go developers",
    "start": "3775279",
    "end": "3782480"
  },
  {
    "text": "code is supposed to look like right they're like oh I have a working solution yeah it might be a little bit",
    "start": "3782480",
    "end": "3788240"
  },
  {
    "text": "of Gooby it might be a little bit of a Gaba Gava or you know a little bit of G gyon yeah we all we all go through those",
    "start": "3788240",
    "end": "3795640"
  },
  {
    "text": "we go through those phases Gava script ex Objective C no",
    "start": "3795640",
    "end": "3805960"
  },
  {
    "text": "all that right so it's it's we kind of have to sometimes we you know you know",
    "start": "3805960",
    "end": "3811319"
  },
  {
    "text": "Johnny I agree and actually my unpopular opinion was somewhat related to this so",
    "start": "3811319",
    "end": "3817079"
  },
  {
    "text": "I don't know if how unpopular this this is now because so basically my opinion is the",
    "start": "3817079",
    "end": "3823520"
  },
  {
    "text": "standard Library defines defines a lot of interfaces and every time someone comes up with an improvement people say",
    "start": "3823520",
    "end": "3829839"
  },
  {
    "text": "yeah but we don't know who implements them so we cannot change them like we we are kind of stuck with some of those",
    "start": "3829839",
    "end": "3835000"
  },
  {
    "text": "interfaces for example the HP Handler interface allows you to write a slice of",
    "start": "3835000",
    "end": "3841079"
  },
  {
    "text": "btes and that is I I work in security that is a nightmare like I've tried to",
    "start": "3841079",
    "end": "3847119"
  },
  {
    "text": "secure that there's no way to secure that and when I try to propose to write",
    "start": "3847119",
    "end": "3854160"
  },
  {
    "text": "something that would change that interface to something more secure that would look the same like you still write",
    "start": "3854160",
    "end": "3859720"
  },
  {
    "text": "something to it and it looks as close as possible to the standard library but in a secure way I got so much resistance",
    "start": "3859720",
    "end": "3868119"
  },
  {
    "text": "and friction and rejections like I think if there is a good reason to wrap or",
    "start": "3868119",
    "end": "3873839"
  },
  {
    "text": "hide the standard interface with something of a higher level why not there are so many Frameworks out there",
    "start": "3873839",
    "end": "3879839"
  },
  {
    "text": "there are not used because people say yeah but I don't want to use this because it's not using the starter",
    "start": "3879839",
    "end": "3885079"
  },
  {
    "text": "interface maybe it makes your code much easier to read why not go for that so",
    "start": "3885079",
    "end": "3891039"
  },
  {
    "text": "that that is my unpopular opinion well remember we test these by",
    "start": "3891039",
    "end": "3896799"
  },
  {
    "text": "tweeting them out from gotime FM we put a poll on it and we ask people so we find out we do that's science that and",
    "start": "3896799",
    "end": "3904200"
  },
  {
    "text": "that is science okay um and we find out if they're unpopular or not um so we we",
    "start": "3904200",
    "end": "3910400"
  },
  {
    "text": "we'll test these ones yeah Johnny on your unpopular opinion I completely agree we do always have to be more",
    "start": "3910400",
    "end": "3918400"
  },
  {
    "text": "understanding and accepting and flexible for sure but you know like some patterns",
    "start": "3918400",
    "end": "3924240"
  },
  {
    "text": "even if they're just they're just memes really they're just around because there were ideas that enough people liked and",
    "start": "3924240",
    "end": "3930240"
  },
  {
    "text": "enough people now say that that's how we do it there is an advantage in having",
    "start": "3930240",
    "end": "3935839"
  },
  {
    "text": "code that all kind of looks very similar when you jump into a repo that you didn't write and you read the code and",
    "start": "3935839",
    "end": "3943039"
  },
  {
    "text": "it feels like you could have written that that is a massive kind of shortcut",
    "start": "3943039",
    "end": "3948319"
  },
  {
    "text": "to to get in stuck in or understanding and and working with that code and the",
    "start": "3948319",
    "end": "3953760"
  },
  {
    "text": "other thing thing is there is such thing as good taste which is you can't really measure it is",
    "start": "3953760",
    "end": "3960079"
  },
  {
    "text": "subjective but it exists doesn't it doesn't good taste exist so yeah I don't",
    "start": "3960079",
    "end": "3966640"
  },
  {
    "text": "know if does it does it you were you were looking at",
    "start": "3966640",
    "end": "3972680"
  },
  {
    "text": "Daniel when you said that are you are you like throwing some shes I like his clothes no I like Daniel's clothes",
    "start": "3972680",
    "end": "3979720"
  },
  {
    "text": "actually to be fair to him look at those clothes they are they are very",
    "start": "3979720",
    "end": "3984880"
  },
  {
    "text": "so much judgment on this podcast from goodness how how did we end up here like",
    "start": "3984880",
    "end": "3990720"
  },
  {
    "text": "what happened yeah it's the internet is it it's the internet eventually everything",
    "start": "3990720",
    "end": "3996839"
  },
  {
    "text": "everything turns back the internet yeah um Johnny you said something earlier and",
    "start": "3996839",
    "end": "4002559"
  },
  {
    "text": "forgot and said you're going to defer it we're about to close the show so Now's the Time all the defers have to happen",
    "start": "4002559",
    "end": "4007760"
  },
  {
    "text": "so you want to want to do it no probably something like you know go from other things like Roberto says",
    "start": "4007760",
    "end": "4015680"
  },
  {
    "text": "go I love that on a swag t-shirt go all the things yeah well the we are over",
    "start": "4015680",
    "end": "4021599"
  },
  {
    "text": "time that is all the time we have for today thank you so much for joining us it's only Johnny boso Roberto clais and",
    "start": "4021599",
    "end": "4029960"
  },
  {
    "text": "Daniel Marti thank you very much and we'll see you next time",
    "start": "4029960",
    "end": "4036400"
  },
  {
    "text": "bye you can support our work and help ensure that go time can continues into",
    "start": "4039359",
    "end": "4044760"
  },
  {
    "text": "the future with a chang log Plus+ membership ditch the ads get closer to the medal and directly contribute to all",
    "start": "4044760",
    "end": "4051440"
  },
  {
    "text": "Chang Log podcasts at",
    "start": "4051440",
    "end": "4055000"
  },
  {
    "text": "changelog.txt John Calhoun is joined by the team at clever to hear all about how they started using go at the education",
    "start": "4072920",
    "end": "4079440"
  },
  {
    "text": "Focus startup that will be hit in your podcast feed next [Music]",
    "start": "4079440",
    "end": "4098539"
  },
  {
    "text": "week",
    "start": "4102839",
    "end": "4105838"
  },
  {
    "text": "[Music]",
    "start": "4111540",
    "end": "4114810"
  },
  {
    "text": "[Music] wait so did we skip uh Daniel's",
    "start": "4116850",
    "end": "4123719"
  },
  {
    "text": "unpopular opinion something tells me we skipped that did we Daniel uh yeah but it's fine I can just sa next time you",
    "start": "4123719",
    "end": "4129920"
  },
  {
    "text": "have to come back mate we just ran out of time we're way over have to come back yeah yeah come back just to deliver your",
    "start": "4129920",
    "end": "4135600"
  },
  {
    "text": "unpopular opinion it better be a good one we're going to have a whole show just for that yeah could do that think we should",
    "start": "4135600",
    "end": "4143480"
  },
  {
    "text": "address why Matt would prefer to replace me with a horse oh you were listening not replace you with one mate",
    "start": "4143480",
    "end": "4151000"
  },
  {
    "text": "oh augment yeah like a centor more like a centor is he can still do your",
    "start": "4151000",
    "end": "4156440"
  },
  {
    "text": "programming but you got a hes back so I get here faster is that is that I hope he not attached to your legs someone is",
    "start": "4156440",
    "end": "4163440"
  },
  {
    "text": "writing in the chat actually bill is writing in the chat that Daniel doesn't have any unpopular opinions want to",
    "start": "4163440",
    "end": "4168719"
  },
  {
    "text": "prove it I'm wrong Dan if you want to share I'll splice it I'll splice it yeah he'll splice it do it do it or I'll put",
    "start": "4168719",
    "end": "4174640"
  },
  {
    "text": "it in after the outro either way it'll get in hang on if we're splicing if we're splicing Cent we have the Centaur",
    "start": "4174640",
    "end": "4181238"
  },
  {
    "text": "first I want I'd love you as a centaur I don't slice anything for you",
    "start": "4181239",
    "end": "4187679"
  },
  {
    "text": "man slice I'll slice things out but I won't splice things in go ahead Daniel",
    "start": "4187679",
    "end": "4193080"
  },
  {
    "text": "so my popular opinion is going to be the vast majority of projects including open source should use monor repos for",
    "start": "4193080",
    "end": "4200520"
  },
  {
    "text": "example on GitHub yes I I see far too many projects that have like a sprinkling of 30 repos on GitHub and",
    "start": "4200520",
    "end": "4208640"
  },
  {
    "text": "often times it's un necessary um I feel like everybody should begin with a single repo and think very very hard",
    "start": "4208640",
    "end": "4214320"
  },
  {
    "text": "before splitting that up especially because it it does have some advantages like if you have some component that you",
    "start": "4214320",
    "end": "4220360"
  },
  {
    "text": "think many other people are going to want you might want to consider living with the downsides but do you really",
    "start": "4220360",
    "end": "4226280"
  },
  {
    "text": "think that many people are going to use it uh I don't think so at least in general or at least by default I agree",
    "start": "4226280",
    "end": "4232199"
  },
  {
    "text": "that one is not unpopular with me no I'm doing a um a reboot of a project of mine",
    "start": "4232199",
    "end": "4238239"
  },
  {
    "text": "called bitar and it's got a website it's it's an app it has a front end in the app it",
    "start": "4238239",
    "end": "4245280"
  },
  {
    "text": "has a back end it has go packages it has generation like generation code that is",
    "start": "4245280",
    "end": "4250960"
  },
  {
    "text": "all going to be in a monor repo it's I completely agree how do you manage to turn this into an advertisement for",
    "start": "4250960",
    "end": "4257320"
  },
  {
    "text": "bitar uh that was just an accident it's just a happy accident for everyone bit bar is still available yeah you can put",
    "start": "4257320",
    "end": "4263440"
  },
  {
    "text": "anything in your Mac OS you like to list any more of its features yeah in defense I don't know",
    "start": "4263440",
    "end": "4269280"
  },
  {
    "text": "what happened I was just saying you can put the output of any script or executable in your Mac OS menu bar and",
    "start": "4269280",
    "end": "4275640"
  },
  {
    "text": "you know that's all I'm saying I don't know it just it just ran away from there yeah no but the thing is like when when",
    "start": "4275640",
    "end": "4282800"
  },
  {
    "text": "you have a request often you're changing things across the entire stack very",
    "start": "4282800",
    "end": "4288800"
  },
  {
    "text": "often to have that all go in in one go is great including documentation you",
    "start": "4288800",
    "end": "4295640"
  },
  {
    "text": "know could be front-end JavaScript changes and server side changes at the same time all in one logical unit I mean",
    "start": "4295640",
    "end": "4304520"
  },
  {
    "text": "Manor rers for the win it's my motto it's not even just about G or repos it's",
    "start": "4304520",
    "end": "4311880"
  },
  {
    "text": "also about modules um often times you find projects that produce like 30 modules and you think this could all be",
    "start": "4311880",
    "end": "4318400"
  },
  {
    "text": "a single module it might be big but doesn't really matter it's not like I have to link in every single package from the",
    "start": "4318400",
    "end": "4324960"
  },
  {
    "text": "module yeah and also I'm in favor of monor repo I mean at work I only use one repo for everything and that works fine",
    "start": "4324960",
    "end": "4333280"
  },
  {
    "text": "so far so how long does it take to check out to tooling though you need tooling",
    "start": "4333280",
    "end": "4338920"
  },
  {
    "text": "for for for that to work well you don't check it out not the entire thing I mean",
    "start": "4338920",
    "end": "4344080"
  },
  {
    "text": "it's I don't know how many billion lines of code I think I don't check it",
    "start": "4344080",
    "end": "4349960"
  },
  {
    "text": "out well why stop there why don't you just put You Know github.com Thee repo",
    "start": "4349960",
    "end": "4355040"
  },
  {
    "text": "and we'll just all put our code in One Mono repo I mean if it's better git",
    "start": "4355040",
    "end": "4360480"
  },
  {
    "text": "doesn't I mean git is not very well fitted for that I would say well it's",
    "start": "4360480",
    "end": "4366880"
  },
  {
    "text": "funny because there's no such thing is there as pull requests across multiple",
    "start": "4366880",
    "end": "4372040"
  },
  {
    "text": "repos in gith H for example right it's not a thing right but could so you",
    "start": "4372040",
    "end": "4377520"
  },
  {
    "text": "cannot right if you want to change your API without breaking users one solution is to fix your users when you change the",
    "start": "4377520",
    "end": "4383960"
  },
  {
    "text": "API but you can't because you cannot your users are not able to sync on a",
    "start": "4383960",
    "end": "4390520"
  },
  {
    "text": "single commit with you so that that's a Pity fix your users there's something",
    "start": "4390520",
    "end": "4397199"
  },
  {
    "text": "there you can do with that you're holding it wrong yeah fix your users yeah if it's not it's not Roberto's code",
    "start": "4397199",
    "end": "4403080"
  },
  {
    "text": "that's broken it's the humans trying to use it that are broken no the it's different let's say that if you change",
    "start": "4403080",
    "end": "4409639"
  },
  {
    "text": "an API you should be responsible to fixing all the code that you broke for that change so you'll think twice before",
    "start": "4409639",
    "end": "4415400"
  },
  {
    "text": "doing that that that's the approach yeah yeah I could see that it's a good",
    "start": "4415400",
    "end": "4422480"
  },
  {
    "text": "good unpopular opinion again we'll test it I I don't think it's going to be very unpopular well it is isn't it actually",
    "start": "4422480",
    "end": "4427920"
  },
  {
    "text": "especially like there's a lot of projects that you don't see it much in practice but I think people will agree",
    "start": "4427920",
    "end": "4434199"
  },
  {
    "text": "with it I think if anybody agrees with it then they have to fix their splattering",
    "start": "4434199",
    "end": "4439320"
  },
  {
    "text": "of so that would have been a more unpopular opinion you should have said I think all these people need to fix their Remos Hing your Stakes yeah now you're",
    "start": "4439320",
    "end": "4448360"
  },
  {
    "text": "getting unpopular put your effort where your mouth [Laughter]",
    "start": "4448360",
    "end": "4454880"
  },
  {
    "text": "is can you imagine if you ah Hadad to deliver on the things we promise anyways that's why I don't make",
    "start": "4454880",
    "end": "4462280"
  },
  {
    "text": "promises too much of a failure to promise things",
    "start": "4462280",
    "end": "4470000"
  }
]