[
  {
    "text": "and if any one of those parts is corrupt dropped or goes missing then you can't",
    "start": "40",
    "end": "5600"
  },
  {
    "text": "reassemble the original UDP packet anymore the entire thing essentially is worthless and you just need to resend it",
    "start": "5600",
    "end": "11719"
  },
  {
    "text": "okay that definitely introduces some complications to to sending large messages that way so there's the",
    "start": "11719",
    "end": "17160"
  },
  {
    "text": "protocol trivial file transfer protocol I don't know if the only time I've ever used it is when I bricked a Wi-Fi router",
    "start": "17160",
    "end": "22439"
  },
  {
    "text": "and it was the only way I could load firmware on it was using tftp and that's UDP based and it essentially has what",
    "start": "22439",
    "end": "28720"
  },
  {
    "text": "we're talking about here as far as sequence numbers and acknowledgements but that's again at the application",
    "start": "28720",
    "end": "36120"
  },
  {
    "text": "layer big thanks to our partners Leno fastly and launch Darkly we love Leno they keep it fast and simple check them",
    "start": "36120",
    "end": "42320"
  },
  {
    "text": "out at lin.com changelog our bandwidth is provided by fastly learn more at",
    "start": "42320",
    "end": "47480"
  },
  {
    "text": "fastly.com and get your feature Flags powered by launch Darkly get a demo at launch dark.com",
    "start": "47480",
    "end": "54359"
  },
  {
    "text": "this episode is brought to you by our friends at o're many you know o're for their animal Tech techbooks and their",
    "start": "55039",
    "end": "60600"
  },
  {
    "text": "conferences but you may not know they have an online learning platform as well the platform has all their books all",
    "start": "60600",
    "end": "66960"
  },
  {
    "text": "their videos and all their conference talks plus you can learn by doing with live online training courses and virtual",
    "start": "66960",
    "end": "73439"
  },
  {
    "text": "conferences certification practice exams and interactive sandboxes and scenarios",
    "start": "73439",
    "end": "78560"
  },
  {
    "text": "to practice coding alongside what you're learning they cover a ton of Technology topics machine learning AI programming",
    "start": "78560",
    "end": "85040"
  },
  {
    "text": "languages devops data science Cloud containers security and even soft skills",
    "start": "85040",
    "end": "92040"
  },
  {
    "text": "like business management and presentation skills you name it it is all in there if you need to keep your",
    "start": "92040",
    "end": "97479"
  },
  {
    "text": "team or yourself up to speed on their Tech skills then check out A's online learning platform learn more and keep",
    "start": "97479",
    "end": "103000"
  },
  {
    "text": "your team skills sharp at ay.com changelog again a.com",
    "start": "103000",
    "end": "108370"
  },
  {
    "text": "[Music]",
    "start": "108370",
    "end": "111859"
  },
  {
    "text": "changelog let's do it it's go time welcome to go time your",
    "start": "118240",
    "end": "124159"
  },
  {
    "text": "source for diverse discussions from around the go Community thanks to our friends at noar press we are giving away",
    "start": "124159",
    "end": "131280"
  },
  {
    "text": "two physical copies of network programming with go stay tuned to the",
    "start": "131280",
    "end": "136440"
  },
  {
    "text": "end of the show and I'll tell you how to enter okay let's do this here we",
    "start": "136440",
    "end": "141830"
  },
  {
    "text": "[Music]",
    "start": "141830",
    "end": "148050"
  },
  {
    "text": "go hello everyone and welcome to go time",
    "start": "148760",
    "end": "155800"
  },
  {
    "text": "today I'm joined by Adam woodbeck how are you Adam I'm well how are you I am good so Adam is a software engineer that",
    "start": "155800",
    "end": "161920"
  },
  {
    "text": "writes distributed services for Barracuda networks and you recently released a book with no starch press",
    "start": "161920",
    "end": "167440"
  },
  {
    "text": "called Network programming with go is that correct that is correct awesome and today we're going to talk about some",
    "start": "167440",
    "end": "173200"
  },
  {
    "text": "little segment of that book I think TCP and UDP yes about four chapters in the book okay uh we also have panelist Chris",
    "start": "173200",
    "end": "180319"
  },
  {
    "text": "Brando here with us today how are you Chris doing well how are you I'm good I'm hoping you're ready to carry the conversation especially if you get real",
    "start": "180319",
    "end": "187599"
  },
  {
    "text": "technical it's been a while since I've read up on TCP and UDP so I'm I'm",
    "start": "187599",
    "end": "192720"
  },
  {
    "text": "excited about this one both to refresh my memory and to teach some people about something a little bit new hopefully so",
    "start": "192720",
    "end": "197879"
  },
  {
    "text": "to start off I guess the simple way would be just to say what are TCP and",
    "start": "197879",
    "end": "203720"
  },
  {
    "text": "UDP what do the acronyms stand for and at a high level can you sort of explain what these things are sure TCP stands",
    "start": "203720",
    "end": "210280"
  },
  {
    "text": "for transmission control protocol and uh UDP is user datagram protocol the",
    "start": "210280",
    "end": "216400"
  },
  {
    "text": "transmission control protocol is more of a uh streaming stateful protocol where",
    "start": "216400",
    "end": "221879"
  },
  {
    "text": "you're sending a stream of data and it's typically acknowledged by the other side so there's a a state throughout the",
    "start": "221879",
    "end": "227840"
  },
  {
    "text": "entire conversation whereas UDP has a lot less overhead there is uh very",
    "start": "227840",
    "end": "233560"
  },
  {
    "text": "little reliability there's there's really no reliability you simply just send data to the other side without any",
    "start": "233560",
    "end": "240920"
  },
  {
    "text": "promise of an acknowledgement or that the data is even going to arrive there it's stat Less in other words and it's",
    "start": "240920",
    "end": "248200"
  },
  {
    "text": "more message based as opposed to a stream of data that's something that's probably I think confusing to a lot of people because when you talk about like",
    "start": "248200",
    "end": "254760"
  },
  {
    "text": "sending data especially with programming you usually think like all of it needs to get there can you give some I guess a",
    "start": "254760",
    "end": "260639"
  },
  {
    "text": "little more insight into why UDP works for things like games where you know real time is more important I guess how",
    "start": "260639",
    "end": "266639"
  },
  {
    "text": "do they get by without having all the data so I would use UDP in the scenario where uh it's worse if a packet arrives",
    "start": "266639",
    "end": "273639"
  },
  {
    "text": "late than if it doesn't arrive at all right so if I'm playing a game for instance a first- person shooter I need",
    "start": "273639",
    "end": "280320"
  },
  {
    "text": "to know where that opponent is not necessarily where he was two seconds ago",
    "start": "280320",
    "end": "285720"
  },
  {
    "text": "when I lost that packet right or in this case if we're we're talking back and forth if packets are being dropped and",
    "start": "285720",
    "end": "292560"
  },
  {
    "text": "you're not receiving all of the audio that I'm saying right now then you're going to start talking to reply and now",
    "start": "292560",
    "end": "300039"
  },
  {
    "text": "you're starting to get all the words that I just said as TCP catches up so UDP is more concerned about getting the",
    "start": "300039",
    "end": "306680"
  },
  {
    "text": "data to you immediately even if it's not complete okay that makes sense I'm trying to think of I don't know if it's",
    "start": "306680",
    "end": "313600"
  },
  {
    "text": "video software or what but I recall using something where like when somebody would start to lag you'd all of a sudden see them catch up and it was always a",
    "start": "313600",
    "end": "319400"
  },
  {
    "text": "really weird experience when like their video stream would sort of like quickly replay back everything or something and",
    "start": "319400",
    "end": "325000"
  },
  {
    "text": "I'm guessing that was because they were using something like TCP to sort of Replay back what was there whereas you",
    "start": "325000",
    "end": "330039"
  },
  {
    "text": "know a lot of times what we normally experience with zoom is if somebody starts to have some sort of internet connection or something they just sort",
    "start": "330039",
    "end": "335720"
  },
  {
    "text": "of cut out for a minute and then come back in is that accurate or sound accurate yeah with real-time stuff you",
    "start": "335720",
    "end": "341160"
  },
  {
    "text": "don't have the advantage of buffering either right so TCP is really good at buffering data and so in the scenario",
    "start": "341160",
    "end": "347280"
  },
  {
    "text": "you just outlined we're probably catching up with everything that was coming in off the wire just just reading",
    "start": "347280",
    "end": "353280"
  },
  {
    "text": "it and so it looked like it fast forwarded to real time at that point right the user experience probably would",
    "start": "353280",
    "end": "358800"
  },
  {
    "text": "have been better if we we just dropped those packets and you just picked up from where they left off that makes sense so I guess let's dive into TCP",
    "start": "358800",
    "end": "365960"
  },
  {
    "text": "first because I think this is the one that people are going to relate to most at least in my experience I I feel like",
    "start": "365960",
    "end": "372360"
  },
  {
    "text": "most of the things I do networking wise are TCP so that's where I'm starting so",
    "start": "372360",
    "end": "377840"
  },
  {
    "text": "if you're not the same as me sorry everybody listening you said that TCP is something where they can actually have a",
    "start": "377840",
    "end": "383000"
  },
  {
    "text": "a session where packets aren't lost um what does that look like like what does the connection look like um what are the",
    "start": "383000",
    "end": "388479"
  },
  {
    "text": "steps and I guess how does that sort of work at a high level let me use an analogy first so TCP let's say you're",
    "start": "388479",
    "end": "395759"
  },
  {
    "text": "going to bake your neighbor a pie okay if we were doing this over TCP then I may shout from my window to my",
    "start": "395759",
    "end": "402120"
  },
  {
    "text": "neighbor's window to say hey are you there and my neighbor May reply and say yes I'm here and then I'll say I'd like",
    "start": "402120",
    "end": "408639"
  },
  {
    "text": "to bring you a pie we've just established a a conversation right and so neighbor acknowledges and says great",
    "start": "408639",
    "end": "416120"
  },
  {
    "text": "bring it on over so I bring the pie over okay and and then I say farewell",
    "start": "416120",
    "end": "421720"
  },
  {
    "text": "neighbor says farewell conversation's done okay that's TCP that's our stateful conversation now if I was doing the same",
    "start": "421720",
    "end": "429360"
  },
  {
    "text": "thing over UDP essentially I would take that pie and I would throw it at my neighbor's window without any regard for",
    "start": "429360",
    "end": "435400"
  },
  {
    "text": "whether the window's open or not right and I have no idea if my neighbor received it it's very possible that my",
    "start": "435400",
    "end": "441160"
  },
  {
    "text": "neighbor is going to be quite upset with me so that's kind of the highle difference of what one protocol looks",
    "start": "441160",
    "end": "447520"
  },
  {
    "text": "like and what the other one looks like one there's a lot more back and forth but there's reliability there there's a",
    "start": "447520",
    "end": "452879"
  },
  {
    "text": "conversation there's a a rapport I guess and the other one is just very abrupt",
    "start": "452879",
    "end": "458280"
  },
  {
    "text": "here's data hope you get it do something with it so to add reliability to UDP you",
    "start": "458280",
    "end": "465360"
  },
  {
    "text": "have to do that in your application so we're just simply talking about the transport layer right now okay so this",
    "start": "465360",
    "end": "471520"
  },
  {
    "text": "is below the application when you write something to a network socket and go",
    "start": "471520",
    "end": "477080"
  },
  {
    "text": "you're essentially writing it to the transport layer and this is where TCP would take over or U UDP would take over",
    "start": "477080",
    "end": "484240"
  },
  {
    "text": "so there's a lot of stuff that happens underneath at this layer that you don't have to account for in your",
    "start": "484240",
    "end": "490479"
  },
  {
    "text": "application so if we're talking about like say a web request I want to I visit",
    "start": "490479",
    "end": "496120"
  },
  {
    "text": "Google for instance then what that would look like is my computer would reach out",
    "start": "496120",
    "end": "502000"
  },
  {
    "text": "to Google it would open up a port on my computer a local port and it would reach",
    "start": "502000",
    "end": "507319"
  },
  {
    "text": "out to Google at Google's IP address Port 80 let's just say there's no TLS involved here so Port 80 and that now",
    "start": "507319",
    "end": "515560"
  },
  {
    "text": "establishes a u a unique connection it's it's a four Tuple right so it's my IP my",
    "start": "515560",
    "end": "522440"
  },
  {
    "text": "port number Google's IP and Google's port number there's no other connection right now that has those four components",
    "start": "522440",
    "end": "528519"
  },
  {
    "text": "so this is unique so then my computer sends a empty packet essentially with",
    "start": "528519",
    "end": "535120"
  },
  {
    "text": "just Header information to Google and it has a sin flag enable abled or synchronized which is essentially",
    "start": "535120",
    "end": "541399"
  },
  {
    "text": "telling Google these are the settings I would like to use for this conversation I want to have with you so if Google",
    "start": "541399",
    "end": "547040"
  },
  {
    "text": "wants to talk to me then Google will turn around and it will send back a packet an empty payload with just Header",
    "start": "547040",
    "end": "553760"
  },
  {
    "text": "information that has an acknowledgement that says I acknowledge I received your sin packet and here's a sin of my own",
    "start": "553760",
    "end": "561200"
  },
  {
    "text": "here's what I agree to as far as this conversation goes and then if my side",
    "start": "561200",
    "end": "566360"
  },
  {
    "text": "agrees it will send an acknowledgement back so an empty packet again with just the",
    "start": "566360",
    "end": "571720"
  },
  {
    "text": "acknowledgement flag flipped so that's the three-way handshake that all TCP connections start with okay from that",
    "start": "571720",
    "end": "578600"
  },
  {
    "text": "point forward we have an established session and data can flow in either",
    "start": "578600",
    "end": "583680"
  },
  {
    "text": "direction once we're done exchanging data then usually there's a graceful termination where either side can",
    "start": "583680",
    "end": "590800"
  },
  {
    "text": "initiate this but let's just say I do I would send a fin packet essentially it's",
    "start": "590800",
    "end": "596440"
  },
  {
    "text": "again it's an empty packet with just the fin flag flipped Google side will",
    "start": "596440",
    "end": "601680"
  },
  {
    "text": "acknowledge that and say all right I acknowledge I received your fin here's a fin of my own and then I would",
    "start": "601680",
    "end": "607079"
  },
  {
    "text": "acknowledge that and essentially the connection is terminated at that point there's no more active TCP connection so",
    "start": "607079",
    "end": "613240"
  },
  {
    "text": "to make sure that both myself and everybody listening understands like when I make a web request to google.com",
    "start": "613240",
    "end": "619200"
  },
  {
    "text": "is this something where like the entire time the page is open it's keeping the connection or is this something where it just keeps the connection open long",
    "start": "619200",
    "end": "624760"
  },
  {
    "text": "enough to you know get the website HTML and then after that it closes up or are there cases where it's a little bit of",
    "start": "624760",
    "end": "631279"
  },
  {
    "text": "both so TCP has keep Alives which I I believe are off by default in most of",
    "start": "631279",
    "end": "636720"
  },
  {
    "text": "the operating systems I've used but what essentially would happen let's say I send a request to Google and it's taking",
    "start": "636720",
    "end": "643639"
  },
  {
    "text": "Google a long time to respond there's a lot of latency there maybe it's having to Crunch a bunch of numbers and and",
    "start": "643639",
    "end": "648920"
  },
  {
    "text": "stuff and then send the response back to me my side may send a keep Al request which is a special request to Google's",
    "start": "648920",
    "end": "656880"
  },
  {
    "text": "Network layer it's transport layer uh doesn't go to the application it just goes to the TCP layer at Google to say",
    "start": "656880",
    "end": "663880"
  },
  {
    "text": "hey is this conversation still good are we still talking and then normally I would get an acknowledgement back which",
    "start": "663880",
    "end": "670120"
  },
  {
    "text": "essentially tells me yes we're still good I just haven't received your reply from the application layer yet and this",
    "start": "670120",
    "end": "676880"
  },
  {
    "text": "may go on for a while until either I receive a reply or we've reached some",
    "start": "676880",
    "end": "682160"
  },
  {
    "text": "sort of threshold and I just stop waiting and tear down the connection that way so when we talk about having",
    "start": "682160",
    "end": "688079"
  },
  {
    "text": "these Communications that are you know back and forth with different messages I think most of the time when we think",
    "start": "688079",
    "end": "693320"
  },
  {
    "text": "about like a web request we think of like I send a request they send a response back with all the data I I'm",
    "start": "693320",
    "end": "699200"
  },
  {
    "text": "assuming that TCP because we're at a lower level it's probably something where there's maybe a little more back",
    "start": "699200",
    "end": "704800"
  },
  {
    "text": "and forth than that so I guess my question is like how how does the actual data sort of get transferred at that",
    "start": "704800",
    "end": "711079"
  },
  {
    "text": "level is it like a binary encoding is it something completely unique or you what does that sort of messaging look like I",
    "start": "711079",
    "end": "717399"
  },
  {
    "text": "think we should talk about a few of the things that that were established during the handshake okay that help ensure the",
    "start": "717399",
    "end": "723440"
  },
  {
    "text": "reliability and it helps control the flow of information between the the boxes I said earlier that TCP is a",
    "start": "723440",
    "end": "730600"
  },
  {
    "text": "stream based protocol so if I'm sending a web page to you or I'm sending a bunch",
    "start": "730600",
    "end": "735760"
  },
  {
    "text": "of data it comes through as a bunch of btes and those btes may be composed of",
    "start": "735760",
    "end": "740800"
  },
  {
    "text": "several different individual messages right but my side when I'm reading from this data I'm just getting a bunch of",
    "start": "740800",
    "end": "747360"
  },
  {
    "text": "bites and have to make sense of it so we can talk about some methods of how you can properly encode things so each side",
    "start": "747360",
    "end": "754920"
  },
  {
    "text": "can encode and decode the data that we're sending but as far as a web page goes there's what's called a sequence",
    "start": "754920",
    "end": "761360"
  },
  {
    "text": "number that each side establishes as part of the handshake it's usually a large number it's usually only",
    "start": "761360",
    "end": "768120"
  },
  {
    "text": "meaningful in the session itself but for our purposes let's just say it starts at zero because that's an easy number for",
    "start": "768120",
    "end": "774839"
  },
  {
    "text": "everyone to remember so when the client sends the first sin part of that sin tells the server I want",
    "start": "774839",
    "end": "782560"
  },
  {
    "text": "to start with sequence number zero okay when the server acknowledges that even though the payload was empty I've seen",
    "start": "782560",
    "end": "789560"
  },
  {
    "text": "termed a ghost bite right so the server acknowledges uh sequence number of one",
    "start": "789560",
    "end": "794920"
  },
  {
    "text": "essentially saying that the client sent one bite even though it it didn't so just",
    "start": "794920",
    "end": "801360"
  },
  {
    "text": "bear with me it's a ghost bite okay the same thing happens in Reverse when the server sends the sin Act it says I'm",
    "start": "801360",
    "end": "809680"
  },
  {
    "text": "going to start my sequence number at zero in reality it's a large number right zero for our purposes and then the",
    "start": "809680",
    "end": "817760"
  },
  {
    "text": "third part of the three-way handshake is my side sends the acknowledgement of sequence number one so now both the",
    "start": "817760",
    "end": "825800"
  },
  {
    "text": "sequence number on both sides is set to one so the acknowledgments acknowledge",
    "start": "825800",
    "end": "830920"
  },
  {
    "text": "sequence numbers which is one of the ways that we ensure reliability here so if my get request for the resource was",
    "start": "830920",
    "end": "839680"
  },
  {
    "text": "500 bytes I send the 500 bytes in a request to Google Google then sends an",
    "start": "839680",
    "end": "847199"
  },
  {
    "text": "acknowledgement back of sequence number 501 because this sequence number is",
    "start": "847199",
    "end": "853199"
  },
  {
    "text": "incremented by the number of bytes that I'm sending okay so Google sequence",
    "start": "853199",
    "end": "858560"
  },
  {
    "text": "number is still set to one because it didn't send me any data yet it just sent me an acknowledgement so when Google",
    "start": "858560",
    "end": "866120"
  },
  {
    "text": "sends me the payload that I requested let's say it's 2,000 bytes it sends me",
    "start": "866120",
    "end": "872160"
  },
  {
    "text": "all that data and I acknowledge a sequence number of 2001 okay if I",
    "start": "872160",
    "end": "878079"
  },
  {
    "text": "acknowledged say 1,000 in one then Google realizes wait a minute he didn't",
    "start": "878079",
    "end": "883759"
  },
  {
    "text": "receive the last thousand bytes I should resend that okay so that's one of the ways we ensure reliability and kind of",
    "start": "883759",
    "end": "890279"
  },
  {
    "text": "keep track what was sent and acknowledge what was sent now the other Factor here",
    "start": "890279",
    "end": "895720"
  },
  {
    "text": "is that's negotiated during the handshake is the window size so every",
    "start": "895720",
    "end": "902880"
  },
  {
    "text": "TCP connection allocates a certain amount of ram that it's going to use as a receive window think of it as like a",
    "start": "902880",
    "end": "909199"
  },
  {
    "text": "bucket okay what this allows is it allows me as the sender to send data to Google that sits in that bucket and the",
    "start": "909199",
    "end": "916160"
  },
  {
    "text": "application can then come and read the application doesn't need to be actively reading from the socket at the time I'm",
    "start": "916160",
    "end": "924120"
  },
  {
    "text": "sending data it can sit in that bucket but I don't want to fill up that bucket",
    "start": "924120",
    "end": "929720"
  },
  {
    "text": "because if I do then anything I try to put in once the bucket's full just gets thrown away gets lost so in this case",
    "start": "929720",
    "end": "938160"
  },
  {
    "text": "and we may be getting too far into the weeds here if we want to talk about window scaling and stuff but essentially",
    "start": "938160",
    "end": "944120"
  },
  {
    "text": "I send the request in an attempt to fill the bucket and there is a maximum packet",
    "start": "944120",
    "end": "950759"
  },
  {
    "text": "size that I can send for each request for our purposes here the maximum uh",
    "start": "950759",
    "end": "955880"
  },
  {
    "text": "segment size will be 1460 let's say uh which means the maximum packet size",
    "start": "955880",
    "end": "961360"
  },
  {
    "text": "is500 bytes because there's a 20 byte header for TCP and a 20 by header for IP",
    "start": "961360",
    "end": "968240"
  },
  {
    "text": "okay so every request I send or every response that Google sends can be in",
    "start": "968240",
    "end": "973600"
  },
  {
    "text": "these chunks of essentially 1460 bytes of data at a time so if I request",
    "start": "973600",
    "end": "978800"
  },
  {
    "text": "something that is 2,000 bytes then I'm going to get essentially two packets one's going to be 1460 the second packet",
    "start": "978800",
    "end": "986440"
  },
  {
    "text": "is going to have the remainder of the so I keep getting this in these chunks",
    "start": "986440",
    "end": "992000"
  },
  {
    "text": "at a time until either my bucket is full and I can't accept anymore or until I got the entire payload that I requested",
    "start": "992000",
    "end": "998880"
  },
  {
    "text": "at the time so when you're talking about these buckets that the Bites come into I assume that's just the buffer like when",
    "start": "998880",
    "end": "1004000"
  },
  {
    "text": "we interactual code if we start reading these the incoming data from Google at that point it would like clear out the",
    "start": "1004000",
    "end": "1009079"
  },
  {
    "text": "buffer and it would get emptied up again is that correct yes so essentially if I'm receiving data from Google and I",
    "start": "1009079",
    "end": "1015560"
  },
  {
    "text": "never read that from my connection then it just sits in that bucket and the",
    "start": "1015560",
    "end": "1022040"
  },
  {
    "text": "bucket could eventually fill up and then my side's going to start telling Google don't send anything else I have no room",
    "start": "1022040",
    "end": "1027438"
  },
  {
    "text": "for you to send any data to me so the onus is on me and as the programmer to",
    "start": "1027439",
    "end": "1032839"
  },
  {
    "text": "make sure I'm reading data from that bucket so I can continue to receive more data from Google so as a developer this",
    "start": "1032839",
    "end": "1038640"
  },
  {
    "text": "is something that we never really see in our code like none of us are sitting here writing HTTP request where we're like okay we're going to send 100 bytes",
    "start": "1038640",
    "end": "1045199"
  },
  {
    "text": "then 200 bytes you know whatever the limits are sure so I'm assuming this is all something that like the standard library and everything sort of bakes",
    "start": "1045199",
    "end": "1051960"
  },
  {
    "text": "into it is this something where every language could sort of decide how they're going to change like you said if",
    "start": "1051960",
    "end": "1057840"
  },
  {
    "text": "your max is 1460 bytes I'm assuming that arguably you could send less than that if you wanted absolutely you could so",
    "start": "1057840",
    "end": "1064840"
  },
  {
    "text": "that's like up to the programming language or whoever wrote the library to sort of decide how to choose those numbers so there's defaults for your",
    "start": "1064840",
    "end": "1070960"
  },
  {
    "text": "operating system but we're talking about every hop along the way between my computer and Google this maximum size is",
    "start": "1070960",
    "end": "1077840"
  },
  {
    "text": "enforced along the way the good thing about TCP is we can split things up and it can",
    "start": "1077840",
    "end": "1084080"
  },
  {
    "text": "reassemble things packets can be received in the different order than I sent it on the remote side and TCP can",
    "start": "1084080",
    "end": "1090320"
  },
  {
    "text": "straighten all that out for the application so with like UDP we don't",
    "start": "1090320",
    "end": "1095760"
  },
  {
    "text": "want things to split up we want to stay under that size limit so it doesn't get",
    "start": "1095760",
    "end": "1101000"
  },
  {
    "text": "split but with TCP I can send a bunch of stuff I can send a giga data if I wanted to and TCP",
    "start": "1101000",
    "end": "1108960"
  },
  {
    "text": "is going to handle chunking that up for me sending that data across and of course the other side is going to handle",
    "start": "1108960",
    "end": "1115039"
  },
  {
    "text": "reassembling everything into the stream as I originally sent [Music]",
    "start": "1115039",
    "end": "1131679"
  },
  {
    "text": "it lenot is simple affordable and accessible cloud computing to developers",
    "start": "1131679",
    "end": "1136799"
  },
  {
    "text": "trust lenoe is are cloud of choice we trust them and we think you should build anything you're working on a fun side",
    "start": "1136799",
    "end": "1143240"
  },
  {
    "text": "project or that next big infro move at work with Leno the best part you can get started on Leno with a $100 in free",
    "start": "1143240",
    "end": "1149159"
  },
  {
    "text": "credit get all the details at lin.com changelog or text changelog to",
    "start": "1149159",
    "end": "1155400"
  },
  {
    "text": "474747 and get instant access to that $100 free credit again lin.com",
    "start": "1155400",
    "end": "1162120"
  },
  {
    "text": "[Music] changelog",
    "start": "1163160",
    "end": "1169460"
  },
  {
    "text": "[Music]",
    "start": "1169460",
    "end": "1175600"
  },
  {
    "text": "you mentioned that the data can basically come out of order so when you were talking about your analogy of you",
    "start": "1175600",
    "end": "1180679"
  },
  {
    "text": "know yelling out your window at your neighbor and having the conversation go out of order isn't something that most of us you know it's not something that's",
    "start": "1180679",
    "end": "1187039"
  },
  {
    "text": "really logically going to happen with a conversation so with the network I think sometimes it's it's easy to overlook",
    "start": "1187039",
    "end": "1192840"
  },
  {
    "text": "that because you just assume okay these things are going serial especially with a lot of programming until you get into concurrency or something something",
    "start": "1192840",
    "end": "1198919"
  },
  {
    "text": "things happen serially so can you elaborate a little bit on like how do things get out of sync what are some",
    "start": "1198919",
    "end": "1204679"
  },
  {
    "text": "ways that that might happen Okay so you could have the scenario where one packet takes one path to Google and another",
    "start": "1204679",
    "end": "1213320"
  },
  {
    "text": "packet takes a different path I don't have a direct cable from my house to Google so there's not just one",
    "start": "1213320",
    "end": "1220080"
  },
  {
    "text": "destination to Google we're talking about the internet so it's essentially a mesh I mean it can I can send a packet",
    "start": "1220080",
    "end": "1226240"
  },
  {
    "text": "from here to my ISP and my ISP can send it to you know different endpoints and",
    "start": "1226240",
    "end": "1231360"
  },
  {
    "text": "it keeps moving its way through the internet the shortest path that it can until it reaches Google and that",
    "start": "1231360",
    "end": "1237760"
  },
  {
    "text": "shortest path may change depending on the metrics at the time the packet is traversing the network so I'm not",
    "start": "1237760",
    "end": "1245280"
  },
  {
    "text": "guaranteed that all the packets I send are going to go over or take the same path as the packets before it they could",
    "start": "1245280",
    "end": "1253080"
  },
  {
    "text": "take another path we could be sending data communicating and a tree falls on a line and takes it out or someone Snips a",
    "start": "1253080",
    "end": "1260440"
  },
  {
    "text": "fiber optic cable that I was communicating and now those packets have to go some other way so they're not",
    "start": "1260440",
    "end": "1266960"
  },
  {
    "text": "guaranteed to arrive in the same order but when they arrive in the receive buffer TCP on that",
    "start": "1266960",
    "end": "1275039"
  },
  {
    "text": "end starts putting them back in order before it makes those available to the application to read and if anything is",
    "start": "1275039",
    "end": "1281240"
  },
  {
    "text": "missing then TCP will request it'll send me a request to say hey I I got",
    "start": "1281240",
    "end": "1286760"
  },
  {
    "text": "everything but this you know set of packets here I need you to resend just these so and that's technically",
    "start": "1286760",
    "end": "1292840"
  },
  {
    "text": "selective acknowledgements which we didn't really cover yet but and I think as well with that packets can get routed",
    "start": "1292840",
    "end": "1299159"
  },
  {
    "text": "differently but they can also just get dropped so if some Network device in there is just overloaded it might just",
    "start": "1299159",
    "end": "1304880"
  },
  {
    "text": "be like I'm going to drop all these packets cuz I can't handle I can't process them right now that's perfectly",
    "start": "1304880",
    "end": "1311000"
  },
  {
    "text": "valid to do in IP so TCP as Adam just mentioned can ask for packets to be",
    "start": "1311000",
    "end": "1316360"
  },
  {
    "text": "resent so that's how you could could also get them out of order sure there is limitations to how much data switches",
    "start": "1316360",
    "end": "1323200"
  },
  {
    "text": "and routers can handle and if they are overloaded they just drop it I think one of the things that's really cool to see",
    "start": "1323200",
    "end": "1329720"
  },
  {
    "text": "about TCP is that we talk about building redundant systems but like this is one of the most redundant systems like if",
    "start": "1329720",
    "end": "1337240"
  },
  {
    "text": "you think about it or at least it seems like one of the more redundant systems that we deal with on the Internet is the fact that literally anything can just",
    "start": "1337240",
    "end": "1342840"
  },
  {
    "text": "stop taking packets and everybody knows how to sort of handle that and and move forward yeah I mean don't have a lot of",
    "start": "1342840",
    "end": "1348600"
  },
  {
    "text": "experience with this but think about if you're uh watching a YouTube video and you're driving in your car and you're",
    "start": "1348600",
    "end": "1354640"
  },
  {
    "text": "watching it on your cell phone you're hopping from Tower to Tower and you're getting different IP addresses yet from your perspective TCP is able to handle",
    "start": "1354640",
    "end": "1362640"
  },
  {
    "text": "all of those different changes and interruptions and properly buffer things as it needs to so your playback is nice",
    "start": "1362640",
    "end": "1368480"
  },
  {
    "text": "and smooth So speaking of that and I don't know if this is too complicated but how do the TCP connections work when",
    "start": "1368480",
    "end": "1373520"
  },
  {
    "text": "you're doing that like if we're driving down the road is it making new connections like I said this is a little outside of my experience but the way I",
    "start": "1373520",
    "end": "1380640"
  },
  {
    "text": "envisioned something like that would happen is if you're hopping to a different Tower and you're getting a new IP address your application realizes",
    "start": "1380640",
    "end": "1387440"
  },
  {
    "text": "where it left off as far as what what frames it just requested from YouTube and when it establishes that new",
    "start": "1387440",
    "end": "1393640"
  },
  {
    "text": "connection it may ask for the frames from where it left off but if you ever watch your YouTube progress bar you'll",
    "start": "1393640",
    "end": "1400360"
  },
  {
    "text": "see that it buffers in other words it's downloaded more of the video than what you're currently watching right now so",
    "start": "1400360",
    "end": "1406600"
  },
  {
    "text": "it's giving itself some some buffer room here at the application Level and I think too with mobile networks",
    "start": "1406600",
    "end": "1414039"
  },
  {
    "text": "specifically there's a lot of magic they do behind the scenes to make it appear as if the TCP connection is kind of",
    "start": "1414039",
    "end": "1420679"
  },
  {
    "text": "living forever uh and we'll probably talk about it later but this is one of the reasons why HTTP",
    "start": "1420679",
    "end": "1427080"
  },
  {
    "text": "3qu uh was developed mainly to resolve this problem of TCP connections being at",
    "start": "1427080",
    "end": "1434440"
  },
  {
    "text": "odds with how mobile networks operate it's kind of interesting cuz when people design these things it's impossible to",
    "start": "1434440",
    "end": "1440000"
  },
  {
    "text": "see into the future and I imagine at the time it was probably impossible to imagine this world where somebody's driving down the road and literally like",
    "start": "1440000",
    "end": "1446520"
  },
  {
    "text": "that needs to pretend like it's one connection when in reality it's not so that's one of the crazy things about",
    "start": "1446520",
    "end": "1451559"
  },
  {
    "text": "software I guess is that you can never really predict what you need to design for in the future okay let's say I",
    "start": "1451559",
    "end": "1456720"
  },
  {
    "text": "wanted to dive into this a little bit more I wanted to actually see some of these bites what's some way that I might",
    "start": "1456720",
    "end": "1462440"
  },
  {
    "text": "be able to do it should I start with go code should I be looking at tools to watch my networking traffic what would",
    "start": "1462440",
    "end": "1467480"
  },
  {
    "text": "you of recommend on that side of it I absolutely recommend you familiarize yourself with wi shark it's an essential",
    "start": "1467480",
    "end": "1473960"
  },
  {
    "text": "tool if you're you're writing Network code and you want to see what's happening at that transport layer wire",
    "start": "1473960",
    "end": "1480880"
  },
  {
    "text": "shark is great as far it's it's free so it's it's very easy to install in your",
    "start": "1480880",
    "end": "1486840"
  },
  {
    "text": "system and then just install wire shark start a capture and then in your browser",
    "start": "1486840",
    "end": "1491960"
  },
  {
    "text": "go to a website and you'll see all of this traffic start flooding into wire shark and you can use wi shark to fill",
    "start": "1491960",
    "end": "1497720"
  },
  {
    "text": "filter in on a specific conversation and you can see that that three-way handshake that we talked about you can",
    "start": "1497720",
    "end": "1503600"
  },
  {
    "text": "see the the sequence numbers that they established and how those sequence",
    "start": "1503600",
    "end": "1508640"
  },
  {
    "text": "numbers and acknowledgements work similar to what we just described and how the graceful termination happens for",
    "start": "1508640",
    "end": "1515640"
  },
  {
    "text": "every web request that you make for every resource that you ask for okay so go check out wire Shar everybody if you",
    "start": "1515640",
    "end": "1522480"
  },
  {
    "text": "have questions bug Adam no I'm just kidding yeah there's a good book on that no star also sells that so that's where",
    "start": "1522480",
    "end": "1529240"
  },
  {
    "text": "I'd refer you okay awesome when you were talking about TCP you mentioned that it's streaming bytes and usually when",
    "start": "1529240",
    "end": "1536000"
  },
  {
    "text": "we're sending bytes like we have to get into some sort of encoding you know sort of letting people know how big bittes",
    "start": "1536000",
    "end": "1542640"
  },
  {
    "text": "are is that something I guess who controls that is that something and like what does that look like so let's say I",
    "start": "1542640",
    "end": "1548480"
  },
  {
    "text": "wanted to send a uh string over a network or I wanted the ability to send",
    "start": "1548480",
    "end": "1553840"
  },
  {
    "text": "numbers as well or different types and essentially what I'm doing is I'm writing a bite slice to the network and",
    "start": "1553840",
    "end": "1562399"
  },
  {
    "text": "when it's received on the other side it just reads a bite slice the other side sees is it's just a series of bites it",
    "start": "1562399",
    "end": "1569080"
  },
  {
    "text": "doesn't really make sense or know that this is a string or how big the string is because when I'm reading data from a",
    "start": "1569080",
    "end": "1575279"
  },
  {
    "text": "network I essentially allocate a bite slice of a certain size and when I use",
    "start": "1575279",
    "end": "1581880"
  },
  {
    "text": "that bite slice to to read into that bite slice the network will try to read",
    "start": "1581880",
    "end": "1587039"
  },
  {
    "text": "as many as it can that's in my buffer to fill that that bucket essentially that",
    "start": "1587039",
    "end": "1593200"
  },
  {
    "text": "that buffer that I created until we run out of btes to read or until that buffer",
    "start": "1593200",
    "end": "1598360"
  },
  {
    "text": "I allocated is full so if I send several strings at once to you and you start",
    "start": "1598360",
    "end": "1605159"
  },
  {
    "text": "reading them from your network they're all going to be in that same that same buffer that same bite slice you don't",
    "start": "1605159",
    "end": "1612720"
  },
  {
    "text": "know where one starts and one stops so one technique that works well is very",
    "start": "1612720",
    "end": "1618799"
  },
  {
    "text": "simple encoding such as like a a typ length Value method of encoding data where you say all right we're going to",
    "start": "1618799",
    "end": "1625559"
  },
  {
    "text": "say this first bite is going to represent a type one for string two for",
    "start": "1625559",
    "end": "1630960"
  },
  {
    "text": "an integer whatever whatever bytes you want to encode the next two bytes or the",
    "start": "1630960",
    "end": "1636799"
  },
  {
    "text": "next four bytes will represent the length of the payload I'm going to send and then the remaining bytes are that",
    "start": "1636799",
    "end": "1643440"
  },
  {
    "text": "payload so when I'm reading data from the socket now I can read the first bite and realize",
    "start": "1643440",
    "end": "1651080"
  },
  {
    "text": "okay this is a string I can read the next four bytes and then you know",
    "start": "1651080",
    "end": "1656279"
  },
  {
    "text": "convert that into an integer and say all right he's sending me I don't know 500",
    "start": "1656279",
    "end": "1661480"
  },
  {
    "text": "kilobytes of data and then I know I need to read the next 500 kilobytes of data",
    "start": "1661480",
    "end": "1667200"
  },
  {
    "text": "and that's my string if that makes sense yeah I guess in my mind that means that if I'm writing my own for lack of a",
    "start": "1667200",
    "end": "1673480"
  },
  {
    "text": "better word like client and server that are communicating I can sort of Define this paradigm myself where I can say these many bytes are the type these many",
    "start": "1673480",
    "end": "1680120"
  },
  {
    "text": "bytes are the size of the message and then I can just go from there so does that mean there's standards for things like the web or different places like",
    "start": "1680120",
    "end": "1686519"
  },
  {
    "text": "that that everybody just sort of agrees to because you know obviously I'm not writing Google server so I can't tell",
    "start": "1686519",
    "end": "1692360"
  },
  {
    "text": "them what to expect so is is that how the web works is is there some sort of standard there yeah so when you're",
    "start": "1692360",
    "end": "1698880"
  },
  {
    "text": "requesting a resource say you're requesting a web page just an HTML page you're going to get Header information",
    "start": "1698880",
    "end": "1704519"
  },
  {
    "text": "back that'll have your content length and that's essentially the length of the payload that's going to represent the",
    "start": "1704519",
    "end": "1710080"
  },
  {
    "text": "HTML that you requested for instance uh there's other encoding methods like go includes Gob in its standard library and",
    "start": "1710080",
    "end": "1717440"
  },
  {
    "text": "essentially it can do what we just talked about as far as I can instantiate a a struct of and and send that across",
    "start": "1717440",
    "end": "1725279"
  },
  {
    "text": "the network and it can be properly decoded on the other side using a",
    "start": "1725279",
    "end": "1730480"
  },
  {
    "text": "similar typ length value uh format that we just we just discussed but is this",
    "start": "1730480",
    "end": "1735919"
  },
  {
    "text": "something that like like both people sort of have to know about ahead of time or is this something that's communicated during the handshake is what I guess I",
    "start": "1735919",
    "end": "1742080"
  },
  {
    "text": "was trying to ask yes you have to agree on the encoding and decoding standard that you're using so in other words if",
    "start": "1742080",
    "end": "1750159"
  },
  {
    "text": "I'm sending you you Json for instance you need to know that it's going to",
    "start": "1750159",
    "end": "1755240"
  },
  {
    "text": "start with you know an opening curly brace and end with a closing curly brace you have to understand the garbled text",
    "start": "1755240",
    "end": "1761480"
  },
  {
    "text": "I'm sending you you have to be able to understand Json but if I sent you like yaml for instance and you're expecting",
    "start": "1761480",
    "end": "1768440"
  },
  {
    "text": "Json you're not going to know what to do with that it's not going to decode the way you expect it to decode okay awesome",
    "start": "1768440",
    "end": "1775440"
  },
  {
    "text": "so when we're dealing with these network connections I guess another question I have is TCP is you basically said it's",
    "start": "1775440",
    "end": "1781799"
  },
  {
    "text": "sort of like this conversation we're having is that something that we need to close because with UDP I assume you just",
    "start": "1781799",
    "end": "1787240"
  },
  {
    "text": "sort of send your message forget it don't worry about it so with TCP do you have to worry about telling people essentially goodbye in the conversation",
    "start": "1787240",
    "end": "1793440"
  },
  {
    "text": "or how does that sort of look yeah so it programmatically and go when you have have a network connection object it has",
    "start": "1793440",
    "end": "1799919"
  },
  {
    "text": "a close method if you do not call that close method your side of the the conversation doesn't send its fin it",
    "start": "1799919",
    "end": "1807440"
  },
  {
    "text": "doesn't tear it down it can keep your side of the conversation open and you're",
    "start": "1807440",
    "end": "1813240"
  },
  {
    "text": "essentially leaking the connection and so if you do that enough you can exhaust",
    "start": "1813240",
    "end": "1818320"
  },
  {
    "text": "the number of connections that your operating system can open and now you can't open any more network connections because you have all of these",
    "start": "1818320",
    "end": "1825200"
  },
  {
    "text": "essentially orphaned network connections that are in a what are called a closed weight State because you didn't properly",
    "start": "1825200",
    "end": "1830840"
  },
  {
    "text": "close them in your code with UDP you don't have to worry about that I have a question on TCP so you mentioned",
    "start": "1830840",
    "end": "1837200"
  },
  {
    "text": "sequence numbers with packets and you know how we increment them for the number of bytes I guess how are those",
    "start": "1837200",
    "end": "1843279"
  },
  {
    "text": "represented and if they're represented with some fixed sized fixed number of bytes what happens if it rolls over",
    "start": "1843279",
    "end": "1850279"
  },
  {
    "text": "right if we pick in random number and then we try to send if it's like 32 bytes and it sends like four gigs or 5",
    "start": "1850279",
    "end": "1855360"
  },
  {
    "text": "gigs of data with a TCP connection does it just wrap around and we just start from the beginning or how is that",
    "start": "1855360",
    "end": "1861279"
  },
  {
    "text": "handled I don't know oh I honestly would have to look at the the limitations of of what the sequence number is the size",
    "start": "1861279",
    "end": "1867159"
  },
  {
    "text": "of the sequence number it is a very large number I would be surprised if you did overflow it but I assume if it's",
    "start": "1867159",
    "end": "1875000"
  },
  {
    "text": "unsigned it would just wrap around okay and continue where it left off but essentially it only serves to uh as an",
    "start": "1875000",
    "end": "1882200"
  },
  {
    "text": "indication of how much data I've sent you and how much data you've received and we need that agreement there so if I",
    "start": "1882200",
    "end": "1888720"
  },
  {
    "text": "send you 5,000 bytes of data I expect an acknowledgement that is 5,000 more than",
    "start": "1888720",
    "end": "1894679"
  },
  {
    "text": "the last sequence number I sent you okay now if that happens to roll around or overflow then so be it as long as it's",
    "start": "1894679",
    "end": "1901519"
  },
  {
    "text": "5,000 more than what we had before it could be like a weird case for a bug if if everybody sort of stores that",
    "start": "1901519",
    "end": "1907200"
  },
  {
    "text": "separately and one end sort of gets it wrong but I it's hard to say how that actually works so you can see this in wi",
    "start": "1907200",
    "end": "1913159"
  },
  {
    "text": "shark wire shark it does a lot of very friendly things for you like it'll calculate your window size for you it'll",
    "start": "1913159",
    "end": "1919799"
  },
  {
    "text": "everything in wire shark that's in square brackets is something that wi shark calculated based on the uh packet",
    "start": "1919799",
    "end": "1927080"
  },
  {
    "text": "you're looking at and so the sequence number the raw sequence number may be in the so it is six bytes that's how many",
    "start": "1927080",
    "end": "1935159"
  },
  {
    "text": "bytes we have for the sequence number here but when you're looking at it wire shark gives you a relative sequence",
    "start": "1935159",
    "end": "1942200"
  },
  {
    "text": "number starting at zero just like we discussed here so it's easier for you to",
    "start": "1942200",
    "end": "1948000"
  },
  {
    "text": "to rationalize when you're looking at the packets if you wanted to see the raw sequence number you can do that too so I",
    "start": "1948000",
    "end": "1954120"
  },
  {
    "text": "got curious so I'm sitting here on stack Overflow looking this up and it looks like it is a 32bit number Chris oh and",
    "start": "1954120",
    "end": "1959760"
  },
  {
    "text": "it seems like generally speaking you're supposed to sort of choose a starting sequence number that you theoretically",
    "start": "1959760",
    "end": "1965799"
  },
  {
    "text": "wouldn't go over that limit it almost looks like it sort of wraps around if it needs to and they use time stamps to",
    "start": "1965799",
    "end": "1971240"
  },
  {
    "text": "sort of make that work ah yeah you would have to send a tremendous amount of data in order to lap yourself right I mean",
    "start": "1971240",
    "end": "1978480"
  },
  {
    "text": "it's four gigs right that'd be like four billion bytes it's about what you can represent with a 32-bit unsigned so",
    "start": "1978480",
    "end": "1985679"
  },
  {
    "text": "that's like I mean if you're downloading a 10 gig I don't know application or something or video file it's over a TCP",
    "start": "1985679",
    "end": "1992039"
  },
  {
    "text": "connection you can see it wrapping around yeah that's an interesting one because we've gotten to this point where 4 gigs isn't that much like it used to",
    "start": "1992039",
    "end": "1999120"
  },
  {
    "text": "be a lot but now it's like you download video games that are 30 gigs or something pretty regularly well maybe",
    "start": "1999120",
    "end": "2004639"
  },
  {
    "text": "not but if you're a gamer you probably download 30 G games somewhat regularly so yeah that would make it very tricky I",
    "start": "2004639",
    "end": "2010760"
  },
  {
    "text": "mean that's another one of those cases where I could see when they originally designed TCP they're like oh we'll never hit this number don't worry about it and",
    "start": "2010760",
    "end": "2016159"
  },
  {
    "text": "then later they're like we need to figure something out here yeah like ip4 addresses ip4 I didn't know if we wanted",
    "start": "2016159",
    "end": "2022399"
  },
  {
    "text": "to talk about that today or not because I think if I recall correctly wasn't TCP and IP all one thing at the start yeah",
    "start": "2022399",
    "end": "2028120"
  },
  {
    "text": "it was called was it transmission control program I believe until they they ended up splitting TCP from IP and",
    "start": "2028120",
    "end": "2036080"
  },
  {
    "text": "then since they abstracted TCP from IP they were then able to implement UDP as",
    "start": "2036080",
    "end": "2042120"
  },
  {
    "text": "well but yeah it used to TCP and IP used to be one monolithic protocol way back",
    "start": "2042120",
    "end": "2048800"
  },
  {
    "text": "when it's nice that they had the foresight to figure out separating that one otherwise it'd be pretty uh pretty",
    "start": "2048800",
    "end": "2055200"
  },
  {
    "text": "rough trying to upgrade TCP to V6 I guess okay so I guess the next thing we",
    "start": "2055200",
    "end": "2060560"
  },
  {
    "text": "want to talk about is UDP we've talked about TCP where you've got this um I don't know if we Ed the word stateful",
    "start": "2060560",
    "end": "2066280"
  },
  {
    "text": "but I assume that is is like a stateful connection because you have to keep track of how many bytes have been sent and all this information about the",
    "start": "2066280",
    "end": "2072398"
  },
  {
    "text": "conversation UDP you you said it's just of sort of sending messages what does",
    "start": "2072399",
    "end": "2077720"
  },
  {
    "text": "that look like in practice you know obviously we're not just going to randomly pick an IP address and just send it random data so can you give some",
    "start": "2077720",
    "end": "2084760"
  },
  {
    "text": "examples I suppose sure um DNS is probably one of the most common uses of",
    "start": "2084760",
    "end": "2090398"
  },
  {
    "text": "UDP that most people will encounter even if you're not aware of it and essentially that is where I'm asking I'm",
    "start": "2090399",
    "end": "2096440"
  },
  {
    "text": "sending a a UDP packet that usually has a maximum size of about 512 bytes to a",
    "start": "2096440",
    "end": "2102920"
  },
  {
    "text": "domain name server asking it for an IP address for instance for say google.com",
    "start": "2102920",
    "end": "2109040"
  },
  {
    "text": "and it would normally reply with my answer and if it doesn't reply because I",
    "start": "2109040",
    "end": "2115280"
  },
  {
    "text": "don't get an acknowledgement back that it received my request I simply just get an answer or I don't and if I don't get",
    "start": "2115280",
    "end": "2121760"
  },
  {
    "text": "it back in a timely manner then I'll ask again and again until I get sick of asking or I get a response if we look at",
    "start": "2121760",
    "end": "2129520"
  },
  {
    "text": "that what would that look like with TCP if we were making that same request with TCP we would have to go through our",
    "start": "2129520",
    "end": "2135560"
  },
  {
    "text": "three-way handshake I would have to send a request which it would acknowledge then it would send a result which I",
    "start": "2135560",
    "end": "2140680"
  },
  {
    "text": "would acknowledge and then we would tear that connection down right so many more",
    "start": "2140680",
    "end": "2145760"
  },
  {
    "text": "back and forth requests a lot more overhead if we were using TCP for this but for UDP considering we're talking",
    "start": "2145760",
    "end": "2152319"
  },
  {
    "text": "about a small amount of information less than 500 112 bytes in most cases there's",
    "start": "2152319",
    "end": "2159040"
  },
  {
    "text": "exceptions to that of course uh UDP is perfectly suitable for that I just send",
    "start": "2159040",
    "end": "2164240"
  },
  {
    "text": "a request and get an answer back and keep asking until I I get what I'm expecting so I guess one way to look at",
    "start": "2164240",
    "end": "2170599"
  },
  {
    "text": "this going back to your sort of piie analogy is that if you're bringing somebody a pie you kind of want them to acknowledge that they're there to pick",
    "start": "2170599",
    "end": "2176760"
  },
  {
    "text": "it up you don't want to have a pie sitting on their doorstep but if you let's say their mail happened to be in your mailbox if you just wanted to walk",
    "start": "2176760",
    "end": "2183520"
  },
  {
    "text": "it over and slip it in their mail slot you don't really need acknowledgement that they've received it or anything it's just slip it in there and sort of",
    "start": "2183520",
    "end": "2188839"
  },
  {
    "text": "forget about it because it's not something that you really care too much about you know you don't need to have a 5-minute conversation to sort of give",
    "start": "2188839",
    "end": "2194720"
  },
  {
    "text": "them their mail piece back and I assume like you said one of the major benefits for DNS using this is the fact that most",
    "start": "2194720",
    "end": "2200359"
  },
  {
    "text": "of the time if you just do two messages like one to say give me this information to to get the information back that's a",
    "start": "2200359",
    "end": "2205520"
  },
  {
    "text": "lot better than you know doing that whole handshake wasting a bunch of time having a conversation that you didn't need so if I wanted to go about doing",
    "start": "2205520",
    "end": "2212800"
  },
  {
    "text": "this in some go code what might that look like are there packages or anything or would you suggest again just using wi",
    "start": "2212800",
    "end": "2219160"
  },
  {
    "text": "shark like what are some ways to sort of experiment with UDP go is good support for UDP if you've used TCP and go code",
    "start": "2219160",
    "end": "2226960"
  },
  {
    "text": "you're probably familiar with the in the net package there's the con interface and if you use the dial or dial timeout",
    "start": "2226960",
    "end": "2236119"
  },
  {
    "text": "or uh the dialer in in the net package has a dial context function when or",
    "start": "2236119",
    "end": "2241839"
  },
  {
    "text": "method when you call that you receive a con interface back that allows you to do",
    "start": "2241839",
    "end": "2248319"
  },
  {
    "text": "a few things you can write to the network socket you can read from it you can change the deadlines which we",
    "start": "2248319",
    "end": "2254640"
  },
  {
    "text": "haven't talked about yet and you can tweak a few things in the connection",
    "start": "2254640",
    "end": "2260000"
  },
  {
    "text": "through that interface you can also uh do a type assertion to the TCP con",
    "start": "2260000",
    "end": "2266520"
  },
  {
    "text": "struct the object underneath that interface and it gives you a lot more options that you can do you can then",
    "start": "2266520",
    "end": "2272200"
  },
  {
    "text": "start modifying say your receive window your send window and other things like that enable keep Alives if you want to I",
    "start": "2272200",
    "end": "2278800"
  },
  {
    "text": "would think for most purposes though the con interface is suitable for most people using TCP now the reason I bring",
    "start": "2278800",
    "end": "2285599"
  },
  {
    "text": "that up is because when you use the dial function in the net package you can specify a network type of UDP as well",
    "start": "2285599",
    "end": "2293920"
  },
  {
    "text": "and you still get a con object however it's there's an underlying UDP",
    "start": "2293920",
    "end": "2300240"
  },
  {
    "text": "connection to that con interface now and it's going to function a little bit different that object although UDP is",
    "start": "2300240",
    "end": "2308079"
  },
  {
    "text": "stateless the object knows who it's sending to in other words when you create this connection object even",
    "start": "2308079",
    "end": "2314960"
  },
  {
    "text": "though it's UDP you give go an address that you want to communicate with so when you write to this this object it",
    "start": "2314960",
    "end": "2322680"
  },
  {
    "text": "will only write to that your destination and when you read from this object it",
    "start": "2322680",
    "end": "2329280"
  },
  {
    "text": "will only pay attention to UDP packets coming from that destination now there's a packet con as",
    "start": "2329280",
    "end": "2336000"
  },
  {
    "text": "well and that's probably better suited for UDP at least the way most people will use it because the difference with",
    "start": "2336000",
    "end": "2343480"
  },
  {
    "text": "TCP and UDP and go is TCP has a separate",
    "start": "2343480",
    "end": "2348680"
  },
  {
    "text": "like uh client that dials or reaches out and then a listener right that listens for incoming connections UDP isn't like",
    "start": "2348680",
    "end": "2355400"
  },
  {
    "text": "that when you establish a UDP object it's both a client if you",
    "start": "2355400",
    "end": "2361000"
  },
  {
    "text": "will and a listener it's listening on a local port on a port on your computer",
    "start": "2361000",
    "end": "2367520"
  },
  {
    "text": "and anything on the network can send messages to it so when you read data",
    "start": "2367520",
    "end": "2374200"
  },
  {
    "text": "from that UDP connection you get the amount of data you read you get an",
    "start": "2374200",
    "end": "2379280"
  },
  {
    "text": "address and an an error interface and so you as the programmer need to check and",
    "start": "2379280",
    "end": "2385839"
  },
  {
    "text": "see okay I need to look at this address who did this come from because it may not necessarily come from the",
    "start": "2385839",
    "end": "2392440"
  },
  {
    "text": "destination that you're communicating with it could have come from a third party potentially so there's more work at the application",
    "start": "2392440",
    "end": "2399079"
  },
  {
    "text": "layer to manage the incoming data through a UDP connection if you're using",
    "start": "2399079",
    "end": "2405480"
  },
  {
    "text": "that packet con I have a question about how the operating system handles data so",
    "start": "2405480",
    "end": "2410920"
  },
  {
    "text": "with TCP we have like this established connection so it has this receive window so if btes come in it just holds them",
    "start": "2410920",
    "end": "2417839"
  },
  {
    "text": "for you until your application reads them is there a similar mechanism for UDP or if it gets bites it just kind of",
    "start": "2417839",
    "end": "2424680"
  },
  {
    "text": "like if you're not listening I'm just going to to toss them way so UDP also has a receive buffer but if you send",
    "start": "2424680",
    "end": "2430440"
  },
  {
    "text": "data to a remote side just like we don't know if that if your neighbor's window is open or not we don't know if it's",
    "start": "2430440",
    "end": "2436480"
  },
  {
    "text": "been received we don't know it could be sitting in the receive Bucket over there but we don't know how much is in that",
    "start": "2436480",
    "end": "2441960"
  },
  {
    "text": "bucket so we could be filling up the bucket until it overflows and essentially when it overflows your UDP",
    "start": "2441960",
    "end": "2448359"
  },
  {
    "text": "packets start dropping so you don't get that indication back at the UDP level on",
    "start": "2448359",
    "end": "2455520"
  },
  {
    "text": "how full the remote sides bucket is you can keep sending and hopefully they're reading from it otherwise you're going",
    "start": "2455520",
    "end": "2461839"
  },
  {
    "text": "to start dropping these packets but there is that same concept of a receive",
    "start": "2461839",
    "end": "2467559"
  },
  {
    "text": "[Music] buffer this episode is brought to you by",
    "start": "2479560",
    "end": "2485079"
  },
  {
    "text": "Source graph SCE graph is universal code serves that let you move fast even in big code bases here's CTO and co-founder",
    "start": "2485079",
    "end": "2492720"
  },
  {
    "text": "byang luu explaining how Source graph helps you to get into that ideal state of flow and coding the ideal state of",
    "start": "2492720",
    "end": "2499599"
  },
  {
    "text": "software development is really being in that state of flow it's that state where all the relevant context and information",
    "start": "2499599",
    "end": "2506359"
  },
  {
    "text": "that you need to build whatever feature or bug that you're focused on uh building or fixing at the moment that's",
    "start": "2506359",
    "end": "2512359"
  },
  {
    "text": "all readily available now the question is how do you get into that state where you know you don't know anything about the code necessarily that you're going",
    "start": "2512359",
    "end": "2518440"
  },
  {
    "text": "to modify that's where Source graph comes in and so what you do with Source graph is you you jump into Source graph",
    "start": "2518440",
    "end": "2525040"
  },
  {
    "text": "it provides a single uh portal into that Universe of code you search for the string literal the pattern whatever it",
    "start": "2525040",
    "end": "2531319"
  },
  {
    "text": "is you're looking for you dive right into the the specific part of code that you want to understand and then you have all these code navigation capabilities",
    "start": "2531319",
    "end": "2537839"
  },
  {
    "text": "jump to definition find references that work across repository boundaries that work without having to clone the code to",
    "start": "2537839",
    "end": "2544160"
  },
  {
    "text": "your local machine and set up and mess around with editor config and all that everything is just designed to be",
    "start": "2544160",
    "end": "2549599"
  },
  {
    "text": "seamless and to Aid in that task of you know code spelunking or or Source diving and once you've acquired that",
    "start": "2549599",
    "end": "2555440"
  },
  {
    "text": "understanding then you can hop back in your editor dive right back into that flow state of hey all the information I",
    "start": "2555440",
    "end": "2560960"
  },
  {
    "text": "need is readily accessible let me just focus on writing the code that influence the feature or fixes the bug that I'm",
    "start": "2560960",
    "end": "2566280"
  },
  {
    "text": "working on all right learn more at source.com and also check out their bonly virtual series called Dev Tool",
    "start": "2566280",
    "end": "2572359"
  },
  {
    "text": "Time covering all things Dev tools at source.com /dev tool [Music]",
    "start": "2572359",
    "end": "2582260"
  },
  {
    "text": "time so I have a question about the net.com interface and at least in my",
    "start": "2588440",
    "end": "2594240"
  },
  {
    "text": "mind a lot of times when you're using an interface it's kind of meant to be something it's somewhat interchangeable",
    "start": "2594240",
    "end": "2599839"
  },
  {
    "text": "um you know like you might have an interface for interacting with your data store and you don't really care if it's",
    "start": "2599839",
    "end": "2604960"
  },
  {
    "text": "written in you know or post grass or you SQL light or something else generally you're just you're like I need this",
    "start": "2604960",
    "end": "2610760"
  },
  {
    "text": "interface to interact with it but it sounds like with TCP and UDP you kind of get the same net docon but at the same",
    "start": "2610760",
    "end": "2618079"
  },
  {
    "text": "time how you actually use them needs to be very different because with TCP like you know your messages are getting there",
    "start": "2618079",
    "end": "2623400"
  },
  {
    "text": "eventually but with UDP that's very much not the case is that something that you think is confusing or is that just so I",
    "start": "2623400",
    "end": "2630920"
  },
  {
    "text": "guess what are your thoughts on that if you're very used to using that netcon with TCP my personal preference is to",
    "start": "2630920",
    "end": "2637480"
  },
  {
    "text": "not use it for UDP because it does change the behavior subtly so for instance uh we we talked about reading",
    "start": "2637480",
    "end": "2644200"
  },
  {
    "text": "data from a TCP connection in go you create a bite slice of a certain size",
    "start": "2644200",
    "end": "2650720"
  },
  {
    "text": "and you read data into that and you will keep reading data into that until it's full or there's no more data to read",
    "start": "2650720",
    "end": "2657040"
  },
  {
    "text": "right with UDP it's different if I send you four messages four separate UDP",
    "start": "2657040",
    "end": "2663200"
  },
  {
    "text": "packets and they're sitting in your receive buffer if you're using that net conon and you",
    "start": "2663200",
    "end": "2669240"
  },
  {
    "text": "read even if the bite slice you've allocated is large enough to hold all four of those messages every invocation",
    "start": "2669240",
    "end": "2676200"
  },
  {
    "text": "of read only returns one message at a time so you would have to read those",
    "start": "2676200",
    "end": "2682160"
  },
  {
    "text": "four messages you would have to call read four times if we're talking about UDP but that's not netc con's behavior",
    "start": "2682160",
    "end": "2689720"
  },
  {
    "text": "when you're using TCP so my personal preference is to use packet con and then it's very explicit",
    "start": "2689720",
    "end": "2696880"
  },
  {
    "text": "that all right I'm using UDP in my code here it helps if I'm reading someone else's code too to know that okay this",
    "start": "2696880",
    "end": "2703640"
  },
  {
    "text": "is a netcon here I'm very familiar with this because I use it all the time with TCP but I didn't notice that they're",
    "start": "2703640",
    "end": "2709960"
  },
  {
    "text": "they're communicating over UDP now you know why do they they read this four times for instance when I think that the",
    "start": "2709960",
    "end": "2716160"
  },
  {
    "text": "buffer they're allocating should be able to hold everything that they're reading once yeah that makes sense I know",
    "start": "2716160",
    "end": "2722599"
  },
  {
    "text": "another thing that you sort of mentioned was I think you said that whenever on DNS communication it's 512 bytes I think",
    "start": "2722599",
    "end": "2729559"
  },
  {
    "text": "is what you said for the message size does message size matter for UDP like you just said that you you could have a",
    "start": "2729559",
    "end": "2734680"
  },
  {
    "text": "buffer that could hold much larger things yeah so this goes back to the maximum transmission unit of 1500 bytes",
    "start": "2734680",
    "end": "2741280"
  },
  {
    "text": "that you're you're likely to see on the internet okay so this is the maximum size of packets that most routers and",
    "start": "2741280",
    "end": "2748720"
  },
  {
    "text": "switches are comfortable transmitting you can certainly have you know these super packets that are much bigger than",
    "start": "2748720",
    "end": "2754280"
  },
  {
    "text": "that but, 1500 is is a good number to shoot for so with UDP whereas",
    "start": "2754280",
    "end": "2760400"
  },
  {
    "text": "fragmentation in TCP is perfectly fine so if if your packet in TCP is",
    "start": "2760400",
    "end": "2765480"
  },
  {
    "text": "traversing a router that doesn't support 15 MTU of 1500 bytes it may fragment it",
    "start": "2765480",
    "end": "2772760"
  },
  {
    "text": "it may split it up for you and then those will be reassembled later on and you'll ultimately receive all of those",
    "start": "2772760",
    "end": "2779640"
  },
  {
    "text": "fragments and therefore all of the data you sent at your destination TCP you know guarant tees that with an",
    "start": "2779640",
    "end": "2787319"
  },
  {
    "text": "acknowledgement so UDP is not the same way with UDP we don't have that reliability at the transport level so if",
    "start": "2787319",
    "end": "2794000"
  },
  {
    "text": "there's any fragmentation now each one of those fragments is subject to",
    "start": "2794000",
    "end": "2799880"
  },
  {
    "text": "corruption to being dropped to just being delivered out of order because",
    "start": "2799880",
    "end": "2804920"
  },
  {
    "text": "there's no orderedness now right when we're talking about fragmentation in UDP so you want to try to avoid",
    "start": "2804920",
    "end": "2811079"
  },
  {
    "text": "fragmentation in UDP if at all possible so normally what happens happens if if",
    "start": "2811079",
    "end": "2816440"
  },
  {
    "text": "I'm using UDP and making a DNS request and the response is going to be larger than",
    "start": "2816440",
    "end": "2822319"
  },
  {
    "text": "512 bytes then normally the server will tell me that the answer is truncated it",
    "start": "2822319",
    "end": "2828040"
  },
  {
    "text": "didn't give me the full answer so me as a client now I know okay if I want the full answer I need to repeat this query",
    "start": "2828040",
    "end": "2835200"
  },
  {
    "text": "but do it over TCP and then I can repeat this query over TCP and Cur the overhead",
    "start": "2835200",
    "end": "2840720"
  },
  {
    "text": "of the back and forth and establishing the session and stuff and then I'll get the entire answer answer so really the",
    "start": "2840720",
    "end": "2848280"
  },
  {
    "text": "reliability that we rely on or just sometimes take for granted in TCP is not there in UDP and you need to at least be",
    "start": "2848280",
    "end": "2856720"
  },
  {
    "text": "aware of ud's limitations in that regard and then account for that in your code",
    "start": "2856720",
    "end": "2863280"
  },
  {
    "text": "meaning like your code may need to when you're sending data from your application include your own sequence",
    "start": "2863280",
    "end": "2869400"
  },
  {
    "text": "number in the data and then on the other side when you read that data that message from the ud DP socket inspect",
    "start": "2869400",
    "end": "2877640"
  },
  {
    "text": "the sequence number in your application and decide this is the order I expected or you managed the order this yourself",
    "start": "2877640",
    "end": "2885480"
  },
  {
    "text": "and then send a UDP acknowledgement so the reliability that we have in TCP you",
    "start": "2885480",
    "end": "2892839"
  },
  {
    "text": "don't have with UDP but if you need that reliability and the speed of UDP the",
    "start": "2892839",
    "end": "2899200"
  },
  {
    "text": "onus is on you the developer to to add that reliability in your application itself question about fr mation when the",
    "start": "2899200",
    "end": "2907640"
  },
  {
    "text": "packet gets fragmented on the other side do you receive that as like two different UDP messages or is it like",
    "start": "2907640",
    "end": "2914119"
  },
  {
    "text": "combined at the OS layer into one it's not recombined is my understanding I mean even if it is fragments and now",
    "start": "2914119",
    "end": "2920680"
  },
  {
    "text": "each fragment has its own check sum it can be dropped it can be corrupt we've",
    "start": "2920680",
    "end": "2926119"
  },
  {
    "text": "basically just taken a single packet and split it into multiple parts and if any one of those parts is corrupt dropped or",
    "start": "2926119",
    "end": "2935119"
  },
  {
    "text": "you know go goes missing then you can't reassemble the original UDP packet",
    "start": "2935119",
    "end": "2940599"
  },
  {
    "text": "anymore the entire thing essentially is worthless and you just need to resend it okay that definitely introduces some",
    "start": "2940599",
    "end": "2946359"
  },
  {
    "text": "complications to to sending large messages that way so there's the protocol trivial file transfer protocol",
    "start": "2946359",
    "end": "2952559"
  },
  {
    "text": "I don't know if the only time I've ever used it is when I bricked a Wi-Fi router and it was the only way I could load",
    "start": "2952559",
    "end": "2958119"
  },
  {
    "text": "firmware on it was using tftp and that's UDP based and it essentially has what",
    "start": "2958119",
    "end": "2963480"
  },
  {
    "text": "we're talking about here as far as sequence number and acknowledgements but that's again at",
    "start": "2963480",
    "end": "2968920"
  },
  {
    "text": "the application layer I think it's chapter S in the book where you write a",
    "start": "2968920",
    "end": "2974599"
  },
  {
    "text": "tftp server essentially I think one of the interesting things about these",
    "start": "2974599",
    "end": "2980040"
  },
  {
    "text": "Network protocols is like why did we develop TCP the way we did I think a lot of that has to do with network",
    "start": "2980040",
    "end": "2986040"
  },
  {
    "text": "congestion and people just overloading networks and when networks overload like overloading the more like that's why we",
    "start": "2986040",
    "end": "2991440"
  },
  {
    "text": "have windows sizes and all of these other things I think it's interesting in that we've gotten to a point now where",
    "start": "2991440",
    "end": "2999319"
  },
  {
    "text": "those things have become more of a hindrance to us in some circumstances then they are a benefit I think a really",
    "start": "2999319",
    "end": "3005799"
  },
  {
    "text": "good example of that is the journey that htdp has been on you know we all started with HTTP",
    "start": "3005799",
    "end": "3011319"
  },
  {
    "text": "1/11 where it was a text protocol and you couldn't multilex we had this head of line blocking problem so you had to",
    "start": "3011319",
    "end": "3017440"
  },
  {
    "text": "open multiple TCP connections to make we to like make browsers faster and then we",
    "start": "3017440",
    "end": "3023280"
  },
  {
    "text": "made htb2 which added multiplexing but it was still over an HTTP connection or sorry still over a TCP connection and",
    "start": "3023280",
    "end": "3030440"
  },
  {
    "text": "immediately ran into more head of line block blocking problems because TCP is ordered so even if you have independent",
    "start": "3030440",
    "end": "3036720"
  },
  {
    "text": "streams of things happening if one gets blocked with processing or whatever then all of the streams get blocked and this",
    "start": "3036720",
    "end": "3043559"
  },
  {
    "text": "protocol That was supposed to be magically faster actually turned out to be really bad if you had a really crappy",
    "start": "3043559",
    "end": "3049640"
  },
  {
    "text": "Network and I think the other thing that we also started figuring out is that TCP",
    "start": "3049640",
    "end": "3054920"
  },
  {
    "text": "works really great if you're not moving right if you are like a desktop or",
    "start": "3054920",
    "end": "3060960"
  },
  {
    "text": "you're on Wi-Fi and you can establish this connection but as soon as you're hopping between like Wi-Fi and a mobile",
    "start": "3060960",
    "end": "3066760"
  },
  {
    "text": "network now you have problems because with the mobile network they kind of you know make it appear as if you still have",
    "start": "3066760",
    "end": "3071920"
  },
  {
    "text": "a TCP connection but if you switch to Wi-Fi your TCP connections are now gone",
    "start": "3071920",
    "end": "3076960"
  },
  {
    "text": "you have to reestablish them which is super expensive so quick htb3 is now",
    "start": "3076960",
    "end": "3083599"
  },
  {
    "text": "giving us the ability to move those connections between things right you can go between a mobile network and Wi-Fi",
    "start": "3083599",
    "end": "3090240"
  },
  {
    "text": "and keep your connections alive but it's essentially just rebuilding everything we had in TCP on top of UDP because TCP",
    "start": "3090240",
    "end": "3097200"
  },
  {
    "text": "is too restrictive yeah it's moving it all to the application layer one of the ones that's like that really stuck out",
    "start": "3097200",
    "end": "3102599"
  },
  {
    "text": "to me when you said about uh http2 Chris was when you see web pages where they like put all the JavaScript at the",
    "start": "3102599",
    "end": "3107920"
  },
  {
    "text": "bottom like the include tags I assume that's one of those things where if it gets blocked trying to load those is",
    "start": "3107920",
    "end": "3113680"
  },
  {
    "text": "that what you're referring to so it's more refer refering to if you have multiple files that you're trying to",
    "start": "3113680",
    "end": "3119559"
  },
  {
    "text": "load at the same time if one of those files is like taking a long time to",
    "start": "3119559",
    "end": "3124599"
  },
  {
    "text": "process or whatever inside the HTTP application code it will block anything",
    "start": "3124599",
    "end": "3129680"
  },
  {
    "text": "else coming through so if you're sending like a giant file and then like several smaller ones but the way it gets put",
    "start": "3129680",
    "end": "3135440"
  },
  {
    "text": "onto the wire is that like the last bite of one of the smaller files is after all the btes of the larger file you have to",
    "start": "3135440",
    "end": "3141680"
  },
  {
    "text": "go through all of the btes of the larger file before you can get to the bite of the smaller file with UDP since there is",
    "start": "3141680",
    "end": "3148200"
  },
  {
    "text": "no inherent ordering of those packets themselves if you get that smaller packet earlier you can just go and",
    "start": "3148200",
    "end": "3154599"
  },
  {
    "text": "process it you don't have to read everything in the order that the initiator sent it so that's the head of",
    "start": "3154599",
    "end": "3160720"
  },
  {
    "text": "line blocking problem that usually people run into if you have shaky networks where you're dropping a lot of",
    "start": "3160720",
    "end": "3166359"
  },
  {
    "text": "packets because you're just waiting for these packets to get redeliver to you or resent and you can't read anything after",
    "start": "3166359",
    "end": "3172799"
  },
  {
    "text": "the packets that are missing even if they're not relevant to the that you're reading so when we were talking about the sequence bites I'm assuming this",
    "start": "3172799",
    "end": "3178480"
  },
  {
    "text": "would be a case for like the word let's say we're at sequence number one and we get all the bites from like sequence",
    "start": "3178480",
    "end": "3184440"
  },
  {
    "text": "three to like a thousand but we haven't gotten two yet so we're like we got to sit here and wait you to do anything",
    "start": "3184440",
    "end": "3190079"
  },
  {
    "text": "with that data yeah okay the other thing Chris you had mentioned I think was uh HTTP 3 and was it quick yep yeah htbt",
    "start": "3190079",
    "end": "3197880"
  },
  {
    "text": "and quick I know nothing about this so if you guys want to talk about that you are more than welcome to but I cannot",
    "start": "3197880",
    "end": "3203720"
  },
  {
    "text": "lead that part of the conversation I guess we could probably start with just like an overview I gave it a brief",
    "start": "3203720",
    "end": "3209240"
  },
  {
    "text": "one I think of why we round up here I think one of the interesting things",
    "start": "3209240",
    "end": "3214359"
  },
  {
    "text": "about this is that you're probably already using HTP 3qu if you use Chrome",
    "start": "3214359",
    "end": "3219599"
  },
  {
    "text": "and you connect to a Google service most of that stuff is happening over this new protocol I guess the simple way to",
    "start": "3219599",
    "end": "3225160"
  },
  {
    "text": "describe it is whereas HTTP 1 and two rely on TCP as the mechanism to order",
    "start": "3225160",
    "end": "3231240"
  },
  {
    "text": "the bites so it just you know puts all the bites on the wire and what whatever format there's framing in http2 so you",
    "start": "3231240",
    "end": "3238520"
  },
  {
    "text": "can do that multiplexing so it okay if I have three connection or three streams that are sending data I'll chunk them",
    "start": "3238520",
    "end": "3245319"
  },
  {
    "text": "into smaller pieces and as I'm ready to send them I will Multiplex them onto the TCP connection htb3 is higher level than",
    "start": "3245319",
    "end": "3253559"
  },
  {
    "text": "this like all of that ordering is at a higher level of abstraction so instead",
    "start": "3253559",
    "end": "3259440"
  },
  {
    "text": "of relying on the connection to give you any sense of ordering or to do the framing there they do the framing",
    "start": "3259440",
    "end": "3265720"
  },
  {
    "text": "directly in UDP breaking up the packets to those sizes per stream and then they have all of the identifying information",
    "start": "3265720",
    "end": "3271160"
  },
  {
    "text": "inside each UDP packet as it's as it's getting sent along I already mentioned that the the biggest benefit to",
    "start": "3271160",
    "end": "3276720"
  },
  {
    "text": "something like this is that you get that nice I can switch between different networks and it's still works because",
    "start": "3276720",
    "end": "3282559"
  },
  {
    "text": "the connection information no longer lives within TCP within the that",
    "start": "3282559",
    "end": "3287720"
  },
  {
    "text": "protocol layer it lives within the application layer so the application just has to know oh this is part of this stream that I already have I do want to",
    "start": "3287720",
    "end": "3294520"
  },
  {
    "text": "say too that I think the interesting thing about this is That htdp Remains the Same throughout whether using one or",
    "start": "3294520",
    "end": "3302160"
  },
  {
    "text": "two or three that is all abstracted from you you don't have to worry about any of it the way that you interact with it in",
    "start": "3302160",
    "end": "3308440"
  },
  {
    "text": "most programming languages is the same way that you've interacted with any of the other ones which is really cool and",
    "start": "3308440",
    "end": "3314359"
  },
  {
    "text": "a really interesting design pattern so while I think it's really interesting to like play around with TCP and UDP",
    "start": "3314359",
    "end": "3320960"
  },
  {
    "text": "building things I think I would almost always go with HTTP unless there's a really good reason not to yeah I think",
    "start": "3320960",
    "end": "3326359"
  },
  {
    "text": "that was one of the reasons why I wanted to do this episode was that I think generally speaking most people are better off just using the HTTP package",
    "start": "3326359",
    "end": "3333400"
  },
  {
    "text": "but it's nice to sort of understand what's going on under the hood because sometimes we don't get time to nerd out",
    "start": "3333400",
    "end": "3339000"
  },
  {
    "text": "and actually just see like how is this actually working and that can be really cool and also inspiring for like if you",
    "start": "3339000",
    "end": "3344440"
  },
  {
    "text": "have an idea to build something and just want to see how people built things in the past yeah I think most people should go and Tinker with TCP and UDP and build",
    "start": "3344440",
    "end": "3352359"
  },
  {
    "text": "stuff probably not for production with it it helps you I think understand how all of this is working too I think a lot",
    "start": "3352359",
    "end": "3358680"
  },
  {
    "text": "of times it feels like this is all magical like oh TCP just handles everything for me I've had situations",
    "start": "3358680",
    "end": "3365400"
  },
  {
    "text": "where I had to debug an application and you know we're like oh well TCP always cleans up connections properly there's",
    "start": "3365400",
    "end": "3371480"
  },
  {
    "text": "never a state where you can just have a TCP connection stuck open and we debugged an application and we had one",
    "start": "3371480",
    "end": "3377559"
  },
  {
    "text": "side of the connection thinking it was still valid and trying to write for it was like 36 hours and the other side had",
    "start": "3377559",
    "end": "3384400"
  },
  {
    "text": "like killed connection ages ago and it caused a massive problem within our applications but people that knew how",
    "start": "3384400",
    "end": "3391599"
  },
  {
    "text": "TCP worked were like that shouldn't be possible but we had the ability to look at it and see okay this is happening and",
    "start": "3391599",
    "end": "3398160"
  },
  {
    "text": "you know implemented a timeout to make it so it didn't happen again or probably a deadline out of timeout but I think like understanding how this stuff works",
    "start": "3398160",
    "end": "3404799"
  },
  {
    "text": "demystifies it a lot so you can wind up being able to debug this type of thing or understand it better or maybe in the",
    "start": "3404799",
    "end": "3410920"
  },
  {
    "text": "future if you learn enough designing something like HTTP 3 to make you know the world better for everybody yeah we",
    "start": "3410920",
    "end": "3416119"
  },
  {
    "text": "didn't get to talk too much about deadlines and timeouts sadly but I assume those are like anytime you talk about networking stuff I assume that",
    "start": "3416119",
    "end": "3422160"
  },
  {
    "text": "becomes important so Adam is that something you could talk about relatively quickly as we get near the end of the episode yeah so uh we",
    "start": "3422160",
    "end": "3428039"
  },
  {
    "text": "mentioned TCP has keep Alives that try to maintain the Integrity or at least make sure that the other side is still",
    "start": "3428039",
    "end": "3434119"
  },
  {
    "text": "listening even if it's not receiving data yet that's not the most portable mechanism and those packets can be",
    "start": "3434119",
    "end": "3440039"
  },
  {
    "text": "filtered by intermediate firewalls so a method that I prefer",
    "start": "3440039",
    "end": "3445400"
  },
  {
    "text": "is to use deadlines and go so you can set a deadline on your connection to say",
    "start": "3445400",
    "end": "3451839"
  },
  {
    "text": "that as soon as this deadline is reached any blocking calls to read or write",
    "start": "3451839",
    "end": "3457160"
  },
  {
    "text": "immediately return so in that scenario let's say I'm communicating with a",
    "start": "3457160",
    "end": "3462640"
  },
  {
    "text": "client that I expect to send me data but I don't send data very often so I'm",
    "start": "3462640",
    "end": "3467839"
  },
  {
    "text": "essentially blocking on read on the read call and something happens where that client goes away but I didn't receive a",
    "start": "3467839",
    "end": "3474920"
  },
  {
    "text": "fin right so I'm not receiving any data maybe someone firewalled off that connection or something so I'm sitting",
    "start": "3474920",
    "end": "3481319"
  },
  {
    "text": "there with this open TCB connection thinking I'm talking to another side I could certainly enable TCP keep Alives",
    "start": "3481319",
    "end": "3489400"
  },
  {
    "text": "if their end supported it in my end did too but deadlines in my experience are a",
    "start": "3489400",
    "end": "3495359"
  },
  {
    "text": "better or a more portable way to handle this scenario so every time I receive a",
    "start": "3495359",
    "end": "3501079"
  },
  {
    "text": "message from the other side I could push that deadline L forward into the future",
    "start": "3501079",
    "end": "3506640"
  },
  {
    "text": "by whatever interval let's say 10 minutes so that means for the next 10 minutes I'm going to keep this open and I expect a reply or a message to come in",
    "start": "3506640",
    "end": "3513680"
  },
  {
    "text": "within that 10-minute window otherwise I'm going to terminate this TCB connection and I can set up some sort of",
    "start": "3513680",
    "end": "3520400"
  },
  {
    "text": "again in the application layer essentially like a a ping pong right or a challenge response if I wanted to",
    "start": "3520400",
    "end": "3526480"
  },
  {
    "text": "where if I haven't heard from them in a while I can send a a ping and I expect that to elicit a response to me which I",
    "start": "3526480",
    "end": "3532720"
  },
  {
    "text": "can then use to push the deadline forward if I don't receive one after a certain amount of time then I may let",
    "start": "3532720",
    "end": "3539480"
  },
  {
    "text": "the deadline expire and it essentially exits my blocking read call with an a",
    "start": "3539480",
    "end": "3545559"
  },
  {
    "text": "deadline exceeded error and then I can return at that point I can close down my end of the connection and then or",
    "start": "3545559",
    "end": "3552280"
  },
  {
    "text": "attempt to reestablish a new connection to that remote side and this is using like the context package is that how you",
    "start": "3552280",
    "end": "3557599"
  },
  {
    "text": "generally do that no on your your netcon on your con object or your interface there is a set deadline there's a set",
    "start": "3557599",
    "end": "3564960"
  },
  {
    "text": "right deadline and there is a set read deadline uh methods so you can control",
    "start": "3564960",
    "end": "3570160"
  },
  {
    "text": "either just the read deadline the right deadline or if you call set deadline it sets both the read and write deadline by",
    "start": "3570160",
    "end": "3577440"
  },
  {
    "text": "default there is no deadline in a network connection and go which means that you're essentially going to block",
    "start": "3577440",
    "end": "3583640"
  },
  {
    "text": "indefinitely until the operating system says we're done waiting and closes it for you if it's configured to do that",
    "start": "3583640",
    "end": "3590799"
  },
  {
    "text": "okay I was going to say that's something I think I've seen with uh even HTTP clients where people will set up a",
    "start": "3590799",
    "end": "3596160"
  },
  {
    "text": "client to make a request and I think you're supposed to set up a deadline it's been a little bit but basically set up the deadline so that you don't have",
    "start": "3596160",
    "end": "3602280"
  },
  {
    "text": "something that just sort of sits there I know that's something that people have talked about causing all sorts of issues where you leave it sitting open and you",
    "start": "3602280",
    "end": "3607960"
  },
  {
    "text": "really shouldn't be yeah the default HTTP client does not have a default timeout it'll just block indefinitely so",
    "start": "3607960",
    "end": "3615280"
  },
  {
    "text": "we're getting near the end of the episode for anybody who's listening live we're planning on doing a giveaway of I",
    "start": "3615280",
    "end": "3621520"
  },
  {
    "text": "think at least two copies of Adam's book it's going to be a physical copy mailed to you so if you want to go follow the",
    "start": "3621520",
    "end": "3628240"
  },
  {
    "text": "change log and the go time FM Twitter accounts probably the go time FM On's a biggest one to follow you can hopefully",
    "start": "3628240",
    "end": "3634599"
  },
  {
    "text": "get a copy of the book and if you haven't go check it out on no starch's website so Adam before we wind this down",
    "start": "3634599",
    "end": "3641280"
  },
  {
    "text": "we need an unpopular opinion from [Music] you unop opinion you I actually think",
    "start": "3641280",
    "end": "3650400"
  },
  {
    "text": "should probably [Music] leave un popular",
    "start": "3650400",
    "end": "3657720"
  },
  {
    "text": "[Music]",
    "start": "3658320",
    "end": "3662320"
  },
  {
    "text": "opinion okay this is an unpopular opinion but not like a popular unpopular opinion right it honestly it varies we",
    "start": "3664680",
    "end": "3672480"
  },
  {
    "text": "get all sorts of different opinions okay so usually they do a poll on Twitter and what Matt always says is if it proves to",
    "start": "3672480",
    "end": "3678720"
  },
  {
    "text": "be a popular opinion and it's not actually unpopular then you have to come back on the show oh okay that's how you lose you have to come back on the show",
    "start": "3678720",
    "end": "3685079"
  },
  {
    "text": "let's see this is a polarizing one so I am a uh big ThinkPad fan however I'm",
    "start": "3685079",
    "end": "3691079"
  },
  {
    "text": "also a fan of trackpad gestures I use a lot of gestures so I think that Lenovo",
    "start": "3691079",
    "end": "3698039"
  },
  {
    "text": "should drop the think pad's track point and make room for a larger better touchpad on par with the MacBook",
    "start": "3698039",
    "end": "3705240"
  },
  {
    "text": "trackpad so for everybody listening what you're referring to is the little red button that's on those laptops and the",
    "start": "3705240",
    "end": "3710640"
  },
  {
    "text": "physical buttons just below the space bar just get rid of those buttons you can can keep the nub if you want to keep",
    "start": "3710640",
    "end": "3715760"
  },
  {
    "text": "the nub keep that but get rid of the buttons the physical buttons and put a larger trackpad on there for me please",
    "start": "3715760",
    "end": "3723520"
  },
  {
    "text": "that would make me I mean that would be like my perfect laptop I think I don't think we can discuss this one yeah I",
    "start": "3723520",
    "end": "3729200"
  },
  {
    "text": "mean you know if you want to join in either agree or disagree you're inviting",
    "start": "3729200",
    "end": "3734720"
  },
  {
    "text": "hate mail it's hard for me because I don't use think pads or I haven't in a long time so I'm like I can't really",
    "start": "3734720",
    "end": "3742240"
  },
  {
    "text": "tune into this I I can't say I don't care for the but but I mean part of that's cuz I've been using a Macbook for so long that I'm just like used to it I",
    "start": "3742240",
    "end": "3749119"
  },
  {
    "text": "will say that occasionally if your like Palm hits the trackpad and clicks somewhere I've had it send an email",
    "start": "3749119",
    "end": "3754200"
  },
  {
    "text": "because of that before and it's just the most annoying thing in the world and I'm like son of a gun my email's like halfway done so I'm like yeah that that",
    "start": "3754200",
    "end": "3761000"
  },
  {
    "text": "email is not going to make any sense whatsoever right now but that's a rare thing it's it's only happened to be like once or twice any thoughts Chris I'd say",
    "start": "3761000",
    "end": "3768599"
  },
  {
    "text": "I I think that's a good idea like I think better trackpads are are always nice like gers are awesome like like I",
    "start": "3768599",
    "end": "3774480"
  },
  {
    "text": "don't know how to go back to a computer that doesn't have all of the gestures that Mac OS has like anytime I I have",
    "start": "3774480",
    "end": "3781319"
  },
  {
    "text": "the option of like getting one of those like magic mice versus a trackpad I'm like give me the trackpad the Magic",
    "start": "3781319",
    "end": "3786880"
  },
  {
    "text": "Mouse has like this tiny little like area to do gestures in but like I want the big area to do all the gestures that",
    "start": "3786880",
    "end": "3793920"
  },
  {
    "text": "I want so anything that's like give me the ability to do more gestures I'm thumbs up for me see I'm I'm pretty",
    "start": "3793920",
    "end": "3799359"
  },
  {
    "text": "spoiled in that most of the time I have a keyboard and mouse like sitting there so I'm fine I I'm used to the the",
    "start": "3799359",
    "end": "3804760"
  },
  {
    "text": "gestures I use some of them but I will definitely say that if you like natural scrolling that you and I aren't on the same page course at all I just get it I",
    "start": "3804760",
    "end": "3813160"
  },
  {
    "text": "have a Linux computer that's gaming and it obviously doesn't use natural scrolling and it it confuses my brain",
    "start": "3813160",
    "end": "3818720"
  },
  {
    "text": "which is also why I don't use my mouse as much with my Mac computers because I",
    "start": "3818720",
    "end": "3823839"
  },
  {
    "text": "like I just can't do it but I can switch easily be like if I'm doing a trackpad it's fine and then I can like scroll the",
    "start": "3823839",
    "end": "3829319"
  },
  {
    "text": "right way on my Linux computer but I can't use the same Mouse to do both I've run into the case where I'm like helping",
    "start": "3829319",
    "end": "3834359"
  },
  {
    "text": "a parent or relative or somebody with their laptop and I'll go to like scroll and I'm like why isn't it going like it",
    "start": "3834359",
    "end": "3840400"
  },
  {
    "text": "always throws me off because that's like one of the first settings I change when I get a new Macbook is get rid of this but do you change it on your phone do",
    "start": "3840400",
    "end": "3847039"
  },
  {
    "text": "you have scrolling inverted on your phone can you even I don't know if you could do that it's whatever is normal on my phone feels normal to me but for",
    "start": "3847039",
    "end": "3853599"
  },
  {
    "text": "whatever reason on a computer it just does not work for me it's just not what I'm used to I don't like it but I I think I change a couple of the gestures",
    "start": "3853599",
    "end": "3859520"
  },
  {
    "text": "too like my my setup's probably a little bit different for most cuz I think I do something where like three fingers and",
    "start": "3859520",
    "end": "3864599"
  },
  {
    "text": "four fingers in One Direction end up doing the same thing cuz I actually don't like them doing different things M it was something weird where one of the",
    "start": "3864599",
    "end": "3870599"
  },
  {
    "text": "gestures that's there I don't I don't ever use anyway so I was just like just make these both do the same thing I",
    "start": "3870599",
    "end": "3875680"
  },
  {
    "text": "think they both go back or something I'd have to go check it's one of those things where you don't actually know until you're doing it yeah it's like",
    "start": "3875680",
    "end": "3881480"
  },
  {
    "text": "setting up a new phone you're like some app goes here I don't know what but when I go to open it I'll remember yeah I",
    "start": "3881480",
    "end": "3887039"
  },
  {
    "text": "don't know if I'm the only one that does that but that's how I set up a new phone I've had problems with uh like when I'm on my iPhone accidentally dragging an",
    "start": "3887039",
    "end": "3893839"
  },
  {
    "text": "app and like moving them all around and I'm like I don't know where anything goes but I'm going to know that everything's wrong and I'm going to be",
    "start": "3893839",
    "end": "3899960"
  },
  {
    "text": "upset later when I try to open something and it's like where is it this is not where it's supposed to be all right um",
    "start": "3899960",
    "end": "3905920"
  },
  {
    "text": "Adam thank you for joining us for everybody listening uh when you do see the poll make sure you uh vote whether",
    "start": "3905920",
    "end": "3912200"
  },
  {
    "text": "you like his unpopular opinion and go check out Adam's book Network programming with go thank you I appreciate",
    "start": "3912200",
    "end": "3918240"
  },
  {
    "text": "[Music] it if you want to win an IRS copy of",
    "start": "3918240",
    "end": "3924920"
  },
  {
    "text": "Adam's new book Network programming with go all you have to do is follow @ gotime",
    "start": "3924920",
    "end": "3930440"
  },
  {
    "text": "FM on Twitter retweet us announcing this episode and reply on that thread telling",
    "start": "3930440",
    "end": "3935480"
  },
  {
    "text": "us why you're interested I'll put a direct link to the tweet in the show notes to save you some scrolling and",
    "start": "3935480",
    "end": "3940680"
  },
  {
    "text": "we'll announce the two lucky winners at the end of the month go time is produced by Jared Santo that's me with music by",
    "start": "3940680",
    "end": "3947079"
  },
  {
    "text": "The Mysterious break master cylinder we are brought to you by awesome sponsors special thanks to fley launch darkley",
    "start": "3947079",
    "end": "3953400"
  },
  {
    "text": "and lenoe next time on go time John is joined by a panel of Founders and CTO to discuss",
    "start": "3953400",
    "end": "3960440"
  },
  {
    "text": "building startups in go that episode will be hit in your podcast feed next [Music]",
    "start": "3960440",
    "end": "3982059"
  },
  {
    "text": "week [Music]",
    "start": "3983000",
    "end": "3996429"
  },
  {
    "text": "k",
    "start": "3999000",
    "end": "4002000"
  }
]