[
  {
    "text": "the main thing I really wanted to get across is that there are lots of existing Frameworks and quick is not yet",
    "start": "80",
    "end": "5759"
  },
  {
    "text": "just another one that has a different DX like it's a fundamental rethink from the ground app of how a web application",
    "start": "5759",
    "end": "11160"
  },
  {
    "text": "should work this episode is brought to you by",
    "start": "11160",
    "end": "18080"
  },
  {
    "text": "our friends at ray gun they give software teams instant visibility into the quality and the performance of their",
    "start": "18080",
    "end": "24279"
  },
  {
    "text": "software and I'm here with John Daniel tras co-founder and CEO of ray gun JD talk to me about the Joy a team feels",
    "start": "24279",
    "end": "31599"
  },
  {
    "text": "when they're able to find and resolve an issue even before a customer has a chance to get upset or reach out to",
    "start": "31599",
    "end": "38440"
  },
  {
    "text": "support about the issue talk me about that well I find it pretty exciting to be able to hit it off early so and being",
    "start": "38440",
    "end": "45039"
  },
  {
    "text": "able to tell people you resolved something so maybe they come through you know and they do report an issue and you",
    "start": "45039",
    "end": "50079"
  },
  {
    "text": "can say cool we don't need to ask you for any more context we've got all the details and we can have this fixed tomorrow it turns an atrisk customer",
    "start": "50079",
    "end": "56840"
  },
  {
    "text": "into an absolute raving advocate so that's a huge win and then the other thing that was a little bit embarrassing",
    "start": "56840",
    "end": "61960"
  },
  {
    "text": "we launched ray gun but we had these other products and we instrumented them and that's when we realized this less",
    "start": "61960",
    "end": "67400"
  },
  {
    "text": "than 1% of our users would ever actually report a problem and so you're sitting there thinking your software is actually",
    "start": "67400",
    "end": "72759"
  },
  {
    "text": "not bad and actually it's really really bad and that's hurting all of your conversion rates business performance",
    "start": "72759",
    "end": "79360"
  },
  {
    "text": "you know these aren't really Dev tools they're actually business tools all right if you want to see how this Dev tool impacts the entire business head to",
    "start": "79360",
    "end": "85880"
  },
  {
    "text": "run.com to learn more and start your 14-day free trial no credit card required join thousands of customer",
    "start": "85880",
    "end": "93000"
  },
  {
    "text": "Centric software teams who use ray gun every single day to deliver Flawless experiences to their customers again Ray",
    "start": "93000",
    "end": "99759"
  },
  {
    "text": "gun.com [Music]",
    "start": "99759",
    "end": "108480"
  },
  {
    "text": "this is JS party your weekly celebration of JavaScript and the web subscribe to",
    "start": "111200",
    "end": "117840"
  },
  {
    "text": "the Pod if you haven't already head to JSP party. FM for all the ways and if",
    "start": "117840",
    "end": "123000"
  },
  {
    "text": "you dig the show please do tell a friend or a colleague that'd be pretty cool special thanks to our partners at fastly",
    "start": "123000",
    "end": "129319"
  },
  {
    "text": "for shipping all of our pods super fast to wherever you listen check them out at fastly.com and to our friends at fly.io",
    "start": "129319",
    "end": "136720"
  },
  {
    "text": "Host your app Service close to your users no Ops required learn more at",
    "start": "136720",
    "end": "141840"
  },
  {
    "text": "fly.io okay hey it's party time [Applause]",
    "start": "141840",
    "end": "148520"
  },
  {
    "text": "y'all hello hello everybody it's Jared your internet friend and I am excited",
    "start": "148840",
    "end": "154120"
  },
  {
    "text": "for a great JS party town today we'll see about that teaser I'm joined today",
    "start": "154120",
    "end": "160680"
  },
  {
    "text": "by my friend kall what's up man hello hello excited for this show I'm excited too we have MCO heav you may know him",
    "start": "160680",
    "end": "166959"
  },
  {
    "text": "from angular he's now working at builder. as the CTO and he has a new",
    "start": "166959",
    "end": "172319"
  },
  {
    "text": "framework for us to check out quick that's qwi i k mishko welcome thanks for",
    "start": "172319",
    "end": "177959"
  },
  {
    "text": "having me we're excited we're going to let let you give us the sales pitch for quick why not just it's a good thing for",
    "start": "177959",
    "end": "183959"
  },
  {
    "text": "people to use but like kall should be using it Jared should be using it we're going to get into that and all the",
    "start": "183959",
    "end": "189879"
  },
  {
    "text": "details I'm sure we have plenty of questions for you around it but first it's time for our regular segment it's",
    "start": "189879",
    "end": "194959"
  },
  {
    "text": "time for holla can i h can I holl you can I can h of course holla is our opportunity to",
    "start": "194959",
    "end": "203159"
  },
  {
    "text": "holla at different community events meetups and things going around the JavaScript and web community so today we",
    "start": "203159",
    "end": "211000"
  },
  {
    "text": "are holling at react Brussels this is the first in-person react conference in",
    "start": "211000",
    "end": "217200"
  },
  {
    "text": "the heart of Europe it's taking place October 14th 2022 as I said in person",
    "start": "217200",
    "end": "224000"
  },
  {
    "text": "it's a hybrid so it'll also be online tickets are on sale now uh they've announced the first round of speakers",
    "start": "224000",
    "end": "230040"
  },
  {
    "text": "some awesome speakers announced already and they're announcing more on August 1st so if you're listening live you can",
    "start": "230040",
    "end": "236480"
  },
  {
    "text": "get in on the cheapest tickets available today if you're listening after we produced it sorry price has already gone",
    "start": "236480",
    "end": "243040"
  },
  {
    "text": "up so check out react Brussels I've talked with the organizers they're very cool very nice people in fact one of",
    "start": "243040",
    "end": "249680"
  },
  {
    "text": "them was at JS Nation hanging out with Nick n while we were there and sounds",
    "start": "249680",
    "end": "254920"
  },
  {
    "text": "like a really awesome conference I've never been to Brussels myself have either of you been to Brussels have not okay ball no mishko I think I flew",
    "start": "254920",
    "end": "261759"
  },
  {
    "text": "through there at some point okay airports almost count I've definitely I would upgrade my number of cities I've",
    "start": "261759",
    "end": "268120"
  },
  {
    "text": "been through if I count the airports but I've never been in Brussels either and I would certainly love to go if you're in",
    "start": "268120",
    "end": "273840"
  },
  {
    "text": "the area October 14th sounds like a fun time check it out at react.",
    "start": "273840",
    "end": "279520"
  },
  {
    "text": "Brussels okay let's get into it quick an HTML first framework mishko there's lots",
    "start": "279520",
    "end": "286960"
  },
  {
    "text": "of Frameworks out there you're the creator of one of them it's still out there people still use at kall lots of people are still using it but there's",
    "start": "286960",
    "end": "293120"
  },
  {
    "text": "react there's view there's felt there's new Frameworks like fresh from the dino",
    "start": "293120",
    "end": "298600"
  },
  {
    "text": "side why why another framework the million dollar question yeah that's a",
    "start": "298600",
    "end": "303880"
  },
  {
    "text": "very good place to start you know why another framework and you're right there is a dime a dozen for them are isn't",
    "start": "303880",
    "end": "309479"
  },
  {
    "text": "they're out there so I'm going to go on a Lim here and hopefully I'm not going to be too controversial and I'm going to",
    "start": "309479",
    "end": "315520"
  },
  {
    "text": "say that like all the existing Frameworks you're familiar with angular view SW Etc and kind of angular I'm",
    "start": "315520",
    "end": "321120"
  },
  {
    "text": "going to maybe take some credit here kind of started the trend of component based client side Frameworks they all",
    "start": "321120",
    "end": "328039"
  },
  {
    "text": "are essentially the same in the sense that how they work but of course the syntax and the DX is very different",
    "start": "328039",
    "end": "334440"
  },
  {
    "text": "right so do you like your templates in the form of a string do you like them in the form of a jsx do you like them",
    "start": "334440",
    "end": "339880"
  },
  {
    "text": "inline together with the code or separated in the files Etc these are all different kind of trade-offs different",
    "start": "339880",
    "end": "344919"
  },
  {
    "text": "Frameworks make but only in the heart of them like at the core of how they work they're all essentially the same and",
    "start": "344919",
    "end": "351039"
  },
  {
    "text": "what I mean by that is that they really have one concern and that is to just render things on the client and it's",
    "start": "351039",
    "end": "357319"
  },
  {
    "text": "pretty much what they kind of all do and so quick is a different thing right",
    "start": "357319",
    "end": "362960"
  },
  {
    "text": "quick is what I call resumable and the best way I can explain resumable is well",
    "start": "362960",
    "end": "368319"
  },
  {
    "text": "let me back up a second so the existing Frameworks that we have I call them replayable meaning that when they start",
    "start": "368319",
    "end": "374759"
  },
  {
    "text": "up on the client so if you do serers side rendering they have to replay all of the work that the server did in order",
    "start": "374759",
    "end": "380520"
  },
  {
    "text": "to get them in the correct state right and we we have a word for that and that word is hydration and what that means is",
    "start": "380520",
    "end": "386039"
  },
  {
    "text": "that when you navigate to a page you might immediately see serers side rendered content but there is some time",
    "start": "386039",
    "end": "392520"
  },
  {
    "text": "before you can actually interact with the page and the problem is the more complicated the page becomes the more time it requires to wake up and of",
    "start": "392520",
    "end": "400360"
  },
  {
    "text": "course we have tricks like lazy loading but it turns out lazy loading doesn't quite work here because lazy loading is only useful for components that are not",
    "start": "400360",
    "end": "406919"
  },
  {
    "text": "currently in the Dom tree if a component is in a Dom tree you have to hydrate it",
    "start": "406919",
    "end": "412120"
  },
  {
    "text": "and that means that even if it's lazy loaded component you have to load it and then do all this stuff so all of that means in practice that especially on",
    "start": "412120",
    "end": "418520"
  },
  {
    "text": "mobile devices and and slow connections the startup performance is kind of bad",
    "start": "418520",
    "end": "423960"
  },
  {
    "text": "and Google has this thing called Google page speed score and they they measure and they look at different websites and",
    "start": "423960",
    "end": "429479"
  },
  {
    "text": "how they do and they're just trying to kind of push the industry towards like faster better experiences for the end users and the Google page speed score is",
    "start": "429479",
    "end": "436560"
  },
  {
    "text": "not very good for most websites right so and then the reason I'm going to argue for that is because all these Frameworks",
    "start": "436560",
    "end": "442800"
  },
  {
    "text": "have this thing called hydration so I kind of spoke for a long time in the in the thing and I haven't really talked about quick but does that make sense so",
    "start": "442800",
    "end": "448960"
  },
  {
    "text": "far I'm with you kable you with him yeah okay so before I kind of explain how",
    "start": "448960",
    "end": "454840"
  },
  {
    "text": "quick works I think it's useful to kind of go and do a parallel so back in the day when like VMware first came out with",
    "start": "454840",
    "end": "462160"
  },
  {
    "text": "virtual machines I was blown away with a particular thing about them which is that on my host computer I can boot up",
    "start": "462160",
    "end": "469240"
  },
  {
    "text": "let's say Linux as my virtual machine and the Linux boots up goes into through",
    "start": "469240",
    "end": "474800"
  },
  {
    "text": "this boot up process and finally at some point I can log in and once I'm logged in I can let's say open up a uh Chrome",
    "start": "474800",
    "end": "480520"
  },
  {
    "text": "browser and I can navigate to like Google docs for example I can start writing my document and at some point I",
    "start": "480520",
    "end": "486840"
  },
  {
    "text": "can just save the virtual machine into a dis and I can take that file and send it to a friend of mine and that friend can",
    "start": "486840",
    "end": "493440"
  },
  {
    "text": "then just open the file up and continue exactly where I left off right specifically they don't have to go",
    "start": "493440",
    "end": "499080"
  },
  {
    "text": "through the budha process the login process the opening up of the Chrome or",
    "start": "499080",
    "end": "504319"
  },
  {
    "text": "uh Google Docs or anything like that they literally bam they're in the final thing and ready to go right and this is",
    "start": "504319",
    "end": "510599"
  },
  {
    "text": "what I call resumable okay and it is specifically how our current Frameworks do not work right they can't do that",
    "start": "510599",
    "end": "516760"
  },
  {
    "text": "trick instead what they do is they essentially every time you to navigate to a page they for all practical purposes they have to boot up and this",
    "start": "516760",
    "end": "523479"
  },
  {
    "text": "boot up process is what we call hydration is really the way the framework recovers all of the",
    "start": "523479",
    "end": "529760"
  },
  {
    "text": "information about where the components are where the listeners are what is the data and so on and so forth and we have",
    "start": "529760",
    "end": "536560"
  },
  {
    "text": "some tricks like we can like prevent the client application from doing fetch",
    "start": "536560",
    "end": "541920"
  },
  {
    "text": "request back to the server by pre fetching and pre-populating like local caches that we can inline into into our",
    "start": "541920",
    "end": "548800"
  },
  {
    "text": "page but end of the day like the application has to replay right it has to hydrate it has to boot up it has to",
    "start": "548800",
    "end": "554560"
  },
  {
    "text": "go through all of these phases and all of these phases kind of slow us down in terms of the startup what it means in",
    "start": "554560",
    "end": "560920"
  },
  {
    "text": "practice is that if somebody sends you a link on Twitter or somewhere says like look at these awesome shoes you should go buy them you get the link you click",
    "start": "560920",
    "end": "567399"
  },
  {
    "text": "on it and you see the shoes immediately and then you're like oh yeah I want to buy it I hit the out the shopping cart and nothing happens for several seconds",
    "start": "567399",
    "end": "573920"
  },
  {
    "text": "right and at some point you're just like you know what I don't really need the shoes right and you leave and so if we",
    "start": "573920",
    "end": "580200"
  },
  {
    "text": "can improve a startup performance I think it's a huge impact for companies and Amazon has done tons of studies on",
    "start": "580200",
    "end": "586920"
  },
  {
    "text": "this that they basically published and I don't know the exact numbers but basically they say for every you know 100 milliseconds that we can improve",
    "start": "586920",
    "end": "592519"
  },
  {
    "text": "rendering performance and interactivity performance it's like x million dollar worth of revenue for us right so they",
    "start": "592519",
    "end": "598160"
  },
  {
    "text": "actually know this and they spent huge amounts of time and effort making sure that they can be as fast as possible and",
    "start": "598160",
    "end": "605240"
  },
  {
    "text": "so this one of the reasons actually that Amazon actually doesn't use any framework because all Frameworks have",
    "start": "605240",
    "end": "611279"
  },
  {
    "text": "this hydration or re replayability property right this startup cost property and it would make the startup",
    "start": "611279",
    "end": "618200"
  },
  {
    "text": "performance of Amazon slow and so they have kind of a custom I don't know what they do but it's not any existing",
    "start": "618200",
    "end": "623760"
  },
  {
    "text": "framework right I just wanted to comment real quick on the impulse buy of those shoes like you know first three or four",
    "start": "623760",
    "end": "629320"
  },
  {
    "text": "4 seconds you're like I want to buy these suckers but the point is taken it's just funny to think about somebody",
    "start": "629320",
    "end": "634360"
  },
  {
    "text": "clicking a link and just like ready to buy shoes before the thing can even download the payload that being said around the world different places you",
    "start": "634360",
    "end": "640519"
  },
  {
    "text": "know maybe that could be 8 9 10 12 seconds if things are not going well so Google page speed right emulates things",
    "start": "640519",
    "end": "646760"
  },
  {
    "text": "and you can go and navigate to many popular brands I don't want to call anybody out and Google page speed will",
    "start": "646760",
    "end": "653399"
  },
  {
    "text": "say 30 seconds before the page is interactive really and it's like common big Brands right so the point is like",
    "start": "653399",
    "end": "660880"
  },
  {
    "text": "you can go and look at top 50 e-commerce websites and what you will discover is",
    "start": "660880",
    "end": "666519"
  },
  {
    "text": "that I think the number like in terms of performance like Google puts them in the red yellow and green bucket top 50",
    "start": "666519",
    "end": "673440"
  },
  {
    "text": "websites right nobody's in the green green is a unicorn that doesn't exist and I know for your simple Hello World",
    "start": "673440",
    "end": "680320"
  },
  {
    "text": "website you can probably get green but I'm talking about a real e-commerce websites with real needs right nobody's",
    "start": "680320",
    "end": "685639"
  },
  {
    "text": "in the green there are very few in the yellow I believe Amazon is in the yellow I believe Ikea is in the yellow and",
    "start": "685639",
    "end": "691760"
  },
  {
    "text": "Staples which kind of surprises me is in the yellow and then everybody else red for you wow even like Nike yeah yeah I",
    "start": "691760",
    "end": "699639"
  },
  {
    "text": "mean assuming everyone and so the interesting thing for me is that we have this thing in the industry we like say",
    "start": "699639",
    "end": "706519"
  },
  {
    "text": "your website is slow what we do is we we kind of blame the developers like oh your developers are not very good they",
    "start": "706519",
    "end": "712320"
  },
  {
    "text": "messed up like they should have done this this this like it's easy to kind of blame the developer for this thing but",
    "start": "712320",
    "end": "718519"
  },
  {
    "text": "it turns out that developer has actually very little choice about this or to put it differently like if I practice the",
    "start": "718519",
    "end": "724959"
  },
  {
    "text": "best practices for whatever framework I'm using right I will end up in a place",
    "start": "724959",
    "end": "730720"
  },
  {
    "text": "that is less than ideal right like you don't get performant website out of the box by just following the best practices",
    "start": "730720",
    "end": "737639"
  },
  {
    "text": "right it's usually like some crazy hacks that you have to do and spend time on afterwards in order to get there so I'd",
    "start": "737639",
    "end": "744079"
  },
  {
    "text": "love to dig in a little bit actually on the the virtual machine analogy yeah because I think it's quite interesting",
    "start": "744079",
    "end": "750560"
  },
  {
    "text": "to think about and I I don't know the numbers on this but when you send a virtual machine with State it's boot it",
    "start": "750560",
    "end": "756399"
  },
  {
    "text": "up I would assume and correct me if you know know better on this but you have to send much more data across because",
    "start": "756399",
    "end": "763199"
  },
  {
    "text": "you're sending application State and all these different things as compared to Simply booting from a boot file or",
    "start": "763199",
    "end": "769480"
  },
  {
    "text": "something like that and I know in the sort of web world was it cloudflare or someone was looking at doing web workers",
    "start": "769480",
    "end": "777959"
  },
  {
    "text": "and trying to make them boot faster so that you know if you were running JavaScript you wouldn't have to boot up the whole JavaScript process and they",
    "start": "777959",
    "end": "784279"
  },
  {
    "text": "compiled it down to an image in web assembly and it was much much faster to",
    "start": "784279",
    "end": "789320"
  },
  {
    "text": "boot but they're doing that on the machine where sending bites over the",
    "start": "789320",
    "end": "794639"
  },
  {
    "text": "wire is not a problem so I'm kind of curious first of all like do you happen to know what is the space differential",
    "start": "794639",
    "end": "800920"
  },
  {
    "text": "in terms of how much data you need to send to kind of booted up in space and how does that play out when we're",
    "start": "800920",
    "end": "805959"
  },
  {
    "text": "talking about something that's going to happen over a web connection potentially a slow one yeah so that's all excellent",
    "start": "805959",
    "end": "811079"
  },
  {
    "text": "questions actually I think the short answer is you're taking the analogy too far I think fair enough okay I was",
    "start": "811079",
    "end": "817079"
  },
  {
    "text": "wondering that as well yeah yeah so what I'm trying to get out is that we have this property we call reasonability",
    "start": "817079",
    "end": "822920"
  },
  {
    "text": "which is that the application can resume where the server left off and what we mean by that is that at no point should",
    "start": "822920",
    "end": "830320"
  },
  {
    "text": "there be duplication of work like if server did some work then the client shouldn't have to do that right now in",
    "start": "830320",
    "end": "837040"
  },
  {
    "text": "the normal VM machine yes you serialize the whole memory which is huge right and",
    "start": "837040",
    "end": "842839"
  },
  {
    "text": "that's not kind of how this works like we're not sending a serialized state in here instead what we do is we basically",
    "start": "842839",
    "end": "849079"
  },
  {
    "text": "say what we want to do is we want to serialize the state of the application as well as the state of the framework",
    "start": "849079",
    "end": "854839"
  },
  {
    "text": "people forget about the stat the framework because usually the framework kind of deals for it on your own right but when you let's say using nextjs with",
    "start": "854839",
    "end": "862040"
  },
  {
    "text": "react and by the way I'm not picking at any particular framework they all kind of work the same way so I'm just going to use react the next CH because it's a",
    "start": "862040",
    "end": "868759"
  },
  {
    "text": "common thing that people understand so if you use nextjs and react the nextjs will serialize your state I think in",
    "start": "868759",
    "end": "874279"
  },
  {
    "text": "something called the next data property or something like that yeah it'll just dump that on the page and everything boots up from there yeah it will just",
    "start": "874279",
    "end": "880560"
  },
  {
    "text": "dump that on the page right so that's the state of the app so to speak but what it doesn't dump on a page because",
    "start": "880560",
    "end": "886240"
  },
  {
    "text": "react doesn't kind of expose it is the state of the framework what I mean by state of the framework is like framework",
    "start": "886240",
    "end": "891759"
  },
  {
    "text": "needs to know like where are the components where the listeners what do I do when you click on this button and so on and so forth there's a huge amount of",
    "start": "891759",
    "end": "897519"
  },
  {
    "text": "state that exists inside of react that isn't exposed to you and you don't usually think about it but it's there",
    "start": "897519",
    "end": "904440"
  },
  {
    "text": "and what quick does is basically says not only am I going to serialize the App State which others already do right I'm",
    "start": "904440",
    "end": "911680"
  },
  {
    "text": "also going to serialize the internal state of the framework itself which others don't do right so that's one",
    "start": "911680",
    "end": "918199"
  },
  {
    "text": "thing that we do differently the second thing and by the way the amount of data isn't that big like the amount of State information is not that big right the",
    "start": "918199",
    "end": "924880"
  },
  {
    "text": "second thing we do is we now have to also serialize things like where are the component boundaries and we can serialize that directly into the HTML by",
    "start": "924880",
    "end": "931480"
  },
  {
    "text": "adding special tags and we also need to serialize where are the listeners in a d tree and we can do that as well by",
    "start": "931480",
    "end": "938160"
  },
  {
    "text": "adding special attribute tags into the HTML so between HTML and your Json payload that represents the state of the",
    "start": "938160",
    "end": "944440"
  },
  {
    "text": "system we can basically serialize everything we need to make this thing run now of course next question is like",
    "start": "944440",
    "end": "950519"
  },
  {
    "text": "where's the code so that's the next big problem and existing Frameworks have this particular problem which I call you",
    "start": "950519",
    "end": "957759"
  },
  {
    "text": "know single entry point problem what it means that that existing framework has a single main method so to speak right",
    "start": "957759",
    "end": "964720"
  },
  {
    "text": "where the application boots up and this main method is the only way to get into",
    "start": "964720",
    "end": "969880"
  },
  {
    "text": "the application system and therefore this the only way to get the system up and running and there's the only way to",
    "start": "969880",
    "end": "976880"
  },
  {
    "text": "create chunks bundles and so on so forth when you have something that's resumable like quick let's say you just have a",
    "start": "976880",
    "end": "983240"
  },
  {
    "text": "page with two buttons If I click on button a then I'm entering the system",
    "start": "983240",
    "end": "988440"
  },
  {
    "text": "through a different path different chunk different code that I have to download than when I click on a button B and so",
    "start": "988440",
    "end": "995880"
  },
  {
    "text": "quick not only has to figure out how to serialize all the state it has a second problem which is that it needs to take",
    "start": "995880",
    "end": "1001279"
  },
  {
    "text": "your source code and break it down into lots and lots of small JavaScript files",
    "start": "1001279",
    "end": "1006759"
  },
  {
    "text": "or the other way to think about it is it has to break it up into lots of entry points right every single interaction",
    "start": "1006759",
    "end": "1013839"
  },
  {
    "text": "that you can do with a page is a potential entry point that re-enters the system in a different way an existing uh",
    "start": "1013839",
    "end": "1021279"
  },
  {
    "text": "framework have this problem that like well they end up with a single chunk and therefore you have to download the whole",
    "start": "1021279",
    "end": "1026880"
  },
  {
    "text": "thing at once and not only do it whole thing at once you can't really resume it because you have to kind of execute the",
    "start": "1026880",
    "end": "1034079"
  },
  {
    "text": "main method in order to kind of build up the internal things what the quick needs to do is needs to take this the source",
    "start": "1034079",
    "end": "1039880"
  },
  {
    "text": "code and break it up into lots and lots and lots of small ones create lots of entry points and then every component",
    "start": "1039880",
    "end": "1045199"
  },
  {
    "text": "every listener every effect and so on and so forth be comes a separate entry point in a system and then when I click",
    "start": "1045199",
    "end": "1052440"
  },
  {
    "text": "button a I only download the buttons a behavior and when I click on button B I",
    "start": "1052440",
    "end": "1057640"
  },
  {
    "text": "only download button B's Behavior so in the end result here is that we are actually downloading a lot less code and",
    "start": "1057640",
    "end": "1064440"
  },
  {
    "text": "and equivalent regular application and specifically if you look at a typical app lots of components are what I would",
    "start": "1064440",
    "end": "1071679"
  },
  {
    "text": "call static in other words they're they're just kind of for the layout purposes they don't actually do anything right and quick can basically look at",
    "start": "1071679",
    "end": "1079799"
  },
  {
    "text": "all this stuff and say this is all static stuff it's already service at rendered I will never ever need to reender this on a client and therefore",
    "start": "1079799",
    "end": "1086640"
  },
  {
    "text": "this code never gets shipped to the client so you end up with actually a lot less JavaScript than you would on an",
    "start": "1086640",
    "end": "1092039"
  },
  {
    "text": "equivalent framework application so this is reminding me actually a lot about spelt which I think in some ways is",
    "start": "1092039",
    "end": "1098760"
  },
  {
    "text": "different than react view angular they take because of the pre-compile and I am",
    "start": "1098760",
    "end": "1104039"
  },
  {
    "text": "not a spelt expert but I have played around with it a little bit and I think they they do some amount of the same",
    "start": "1104039",
    "end": "1109400"
  },
  {
    "text": "types of optimizations where because they're pre-compiling they can have multiple entry points if there's no",
    "start": "1109400",
    "end": "1114640"
  },
  {
    "text": "dynamism you don't get any JavaScript for a component and they don't have this sort of virtual Dom thing which creates",
    "start": "1114640",
    "end": "1120720"
  },
  {
    "text": "that need for the centralized main Loop that you have in like a view or a react but I think they still do have a",
    "start": "1120720",
    "end": "1126559"
  },
  {
    "text": "hydration problem yeah so I'm kind of curious are those problems deeply connected for you they are they are",
    "start": "1126559",
    "end": "1133240"
  },
  {
    "text": "absolutely connected actually I'm also not an expert at spalt but my understanding is that they only have one entry point I don't think they can",
    "start": "1133240",
    "end": "1139400"
  },
  {
    "text": "create separate ones the thing that swelt does really well is they can prune the tree right because they don't have",
    "start": "1139400",
    "end": "1145240"
  },
  {
    "text": "vdom they can prune the tree and say like oh these things never change and therefore I don't have to do updates on",
    "start": "1145240",
    "end": "1151280"
  },
  {
    "text": "them but they still have hydration because in order to recover the state like swelt is also reactive which means",
    "start": "1151280",
    "end": "1157760"
  },
  {
    "text": "like if something changes they know how to just update a specific part on the page which is all great but in order to",
    "start": "1157760",
    "end": "1163919"
  },
  {
    "text": "rebuild the information about where the components are where the reactivity are like if I change this data I have to",
    "start": "1163919",
    "end": "1169640"
  },
  {
    "text": "change this component and so on and so forth in order to rebuild all this information they have to execute the application at least once at the very",
    "start": "1169640",
    "end": "1176559"
  },
  {
    "text": "beginning the theme for all of these Frameworks is that in order to recover",
    "start": "1176559",
    "end": "1182000"
  },
  {
    "text": "the internal state of the framework they have to execute the application in the process of executing of the application",
    "start": "1182000",
    "end": "1188039"
  },
  {
    "text": "is what rebuilds the internal state of the framework and you're correct that different Frameworks are you can say",
    "start": "1188039",
    "end": "1194200"
  },
  {
    "text": "have different efficiency factors in terms of how good they are at rebuilding but I think quick is in a category of",
    "start": "1194200",
    "end": "1200760"
  },
  {
    "text": "its own because it just serializes everything and you don't have to download anything in order to make it",
    "start": "1200760",
    "end": "1206679"
  },
  {
    "text": "page interactive right so imagine anything you can build in like swell you can build in react and vice versa right",
    "start": "1206679",
    "end": "1212520"
  },
  {
    "text": "there's like we all agree that all these Frameworks are kind of universally the same thing kind of apps that they allow",
    "start": "1212520",
    "end": "1218760"
  },
  {
    "text": "you to build and the same is true also for quick like whatever you can build in swell react view angular and so on you",
    "start": "1218760",
    "end": "1224280"
  },
  {
    "text": "can also build in quick so the kinds of applications you build are absolutely identical",
    "start": "1224280",
    "end": "1229320"
  },
  {
    "text": "that's different is how the application resumes on the client and all kinds of",
    "start": "1229320",
    "end": "1234520"
  },
  {
    "text": "other implications we can get into it in this show but the reasonability is kind of the key",
    "start": "1234520",
    "end": "1240680"
  },
  {
    "text": "[Music]",
    "start": "1240680",
    "end": "1252640"
  },
  {
    "text": "difference this episode is brought to you by our friends at Square develop on",
    "start": "1253000",
    "end": "1258159"
  },
  {
    "text": "the platform form that sellers trust support Square sellers by building apps for today's business needs as a square",
    "start": "1258159",
    "end": "1265080"
  },
  {
    "text": "app partner you can reach millions of business owners searching for trusted software Solutions as a square Solutions",
    "start": "1265080",
    "end": "1271279"
  },
  {
    "text": "partner you can get hired by sellers on the Square platform find new clients and build apps that meet their needs Square",
    "start": "1271279",
    "end": "1277600"
  },
  {
    "text": "loves developers they work hard to enable you to launch fast with their developer tools you get a full sandbox",
    "start": "1277600",
    "end": "1284000"
  },
  {
    "text": "environment an interactive API Explorer live event mod monitoring backend sdks",
    "start": "1284000",
    "end": "1290600"
  },
  {
    "text": "for PHP Ruby java.net Python and node you get secure payment SDK for iOS",
    "start": "1290600",
    "end": "1297840"
  },
  {
    "text": "Android react native and flutter you get it all learn more and get started at changel law.com Square again changel",
    "start": "1297840",
    "end": "1305360"
  },
  {
    "text": "log.com [Music]",
    "start": "1305360",
    "end": "1317149"
  },
  {
    "text": "ssquare [Music]",
    "start": "1317520",
    "end": "1324120"
  },
  {
    "text": "so I'm thinking about the statement that you said about the server side rendering and the client side rendering with quick",
    "start": "1324120",
    "end": "1330760"
  },
  {
    "text": "there's never any duplication there's never any work that's done twice and I'm",
    "start": "1330760",
    "end": "1336080"
  },
  {
    "text": "curious is quick aware of server is a server aware of quick how does a server",
    "start": "1336080",
    "end": "1342200"
  },
  {
    "text": "know the state of the page in order to not render things that have already been updated since it rendered last is there",
    "start": "1342200",
    "end": "1348120"
  },
  {
    "text": "service side is it full stack or I don't understand exactly how it works yeah yes that's an excellent question so the big",
    "start": "1348120",
    "end": "1353520"
  },
  {
    "text": "difference is that as I said existing Frameworks really they only care about client side rendering and the reason why",
    "start": "1353520",
    "end": "1360400"
  },
  {
    "text": "quick can do all these things is that quick doesn't just care about client side rendering it also cares about",
    "start": "1360400",
    "end": "1365640"
  },
  {
    "text": "serers side rendering it also cares about serialization of the data sending the data across deserialization bundling",
    "start": "1365640",
    "end": "1372960"
  },
  {
    "text": "breaking the application into chunks and so on and so forth so in that sense quick is a full stack like it cares",
    "start": "1372960",
    "end": "1378840"
  },
  {
    "text": "about the whole thing because that's the only way quick can deliver all these things also we also care about",
    "start": "1378840",
    "end": "1385559"
  },
  {
    "text": "prefetching of the code as well so basically all of the concerns that you",
    "start": "1385559",
    "end": "1391200"
  },
  {
    "text": "as a developer need to worry about in terms of like what makes an application performance are directly the",
    "start": "1391200",
    "end": "1397559"
  },
  {
    "text": "responsibility or the thing that the framework cares about and has an opinion about and lays everything out for you",
    "start": "1397559",
    "end": "1403400"
  },
  {
    "text": "and so that's kind of the biggest difference between it is because we own the whole thing end to end we can do",
    "start": "1403400",
    "end": "1410240"
  },
  {
    "text": "certain things that others cannot like let me give you an example in order to break up the application into pieces",
    "start": "1410240",
    "end": "1416480"
  },
  {
    "text": "let's take a simple example of let's say you have a component that's a counter there's a button you click on a count a button and it increments right we need",
    "start": "1416480",
    "end": "1423919"
  },
  {
    "text": "to be able to take this listener for the button and be able to Lazy load it now",
    "start": "1423919",
    "end": "1429320"
  },
  {
    "text": "in this particular example of course when you click on a button you're also going to have to reender the component and so they always come together but",
    "start": "1429320",
    "end": "1434679"
  },
  {
    "text": "like let's say it's a more complicated example that sometimes you don't have to rerender it so the problem is that",
    "start": "1434679",
    "end": "1440120"
  },
  {
    "text": "you'll do something like a button onclick equals you know State Plus+ or something along those lines right you",
    "start": "1440120",
    "end": "1448120"
  },
  {
    "text": "cannot take that function the closure that increments the counter and lazy load it because it closes over the state",
    "start": "1448120",
    "end": "1456520"
  },
  {
    "text": "right so if you pull out the function and make it Lazy loadable by itself the function will not work because it will",
    "start": "1456520",
    "end": "1462720"
  },
  {
    "text": "say well what's the current count like I'm incrementing something but what is it how do I get it right and if you just",
    "start": "1462720",
    "end": "1468559"
  },
  {
    "text": "lazy load code I say that the code has Amnesia right it doesn't have the information that you need so as",
    "start": "1468559",
    "end": "1475279"
  },
  {
    "text": "developers we know how to serialize code that's just JavaScript we know how to",
    "start": "1475279",
    "end": "1480840"
  },
  {
    "text": "serialize data well that's just Json but what we don't really know is how to",
    "start": "1480840",
    "end": "1486000"
  },
  {
    "text": "serialize closures right closure is function Plus data and so the thing that",
    "start": "1486000",
    "end": "1491600"
  },
  {
    "text": "quick can do is it can serialize closures so it can take the closure that",
    "start": "1491600",
    "end": "1496919"
  },
  {
    "text": "represents your button that you know add one to the count and we know how to",
    "start": "1496919",
    "end": "1501960"
  },
  {
    "text": "extract it on the top level and serialize the associated data with it and then make that whole thing lazy",
    "start": "1501960",
    "end": "1508840"
  },
  {
    "text": "loadable M the only way to do that is if the bundler and the runtime cooperate",
    "start": "1508840",
    "end": "1515919"
  },
  {
    "text": "right but existing Frameworks they're like I'm bundling is not my problem and therefore a bundler can't do anything",
    "start": "1515919",
    "end": "1523080"
  },
  {
    "text": "that would change the semantics of the code and so the bundlers are very limited in what they can do because",
    "start": "1523080",
    "end": "1528640"
  },
  {
    "text": "doing something crazy would make the application be broken right whereas the Frameworks are like well bundling is not",
    "start": "1528640",
    "end": "1534520"
  },
  {
    "text": "a problem and so the amount of things you can do are very minimal we are because we own the whole thing we can do",
    "start": "1534520",
    "end": "1541120"
  },
  {
    "text": "magical things where we can be like oh it's a closure that closes a bunch of variables let me extract it to a top",
    "start": "1541120",
    "end": "1546159"
  },
  {
    "text": "level function I understand which variables you closed over I know how to serialize them I know how to recover them I'm going to make a special kind of",
    "start": "1546159",
    "end": "1553279"
  },
  {
    "text": "function for you that of course won't run by itself but the framework expects",
    "start": "1553279",
    "end": "1558399"
  },
  {
    "text": "this and a framework knows how to put everything back together in such a way to kind of recover everything right and so this is where the magic is so you are",
    "start": "1558399",
    "end": "1566480"
  },
  {
    "text": "transforming the code you're applying custom compilations in order to make it resumable that's right interesting so",
    "start": "1566480",
    "end": "1574360"
  },
  {
    "text": "you've write code quick devel DX developer experience right is extremely similar to react so if you know react",
    "start": "1574360",
    "end": "1581240"
  },
  {
    "text": "you know quick and this is intentional right this is not like we thought about this and we're like this is the way to",
    "start": "1581240",
    "end": "1586720"
  },
  {
    "text": "do it so we intentionally designed the DX to be like react so you write your functions your components and so on and",
    "start": "1586720",
    "end": "1592320"
  },
  {
    "text": "so forth now quick has a special thing where we add dollar signs to the API so",
    "start": "1592320",
    "end": "1599120"
  },
  {
    "text": "it's not use effect we actually understand server and client so we added an extra word in there it's use client",
    "start": "1599120",
    "end": "1604520"
  },
  {
    "text": "effect dollar sign and a dollar sign communicates two things it both communicates to the developer and also",
    "start": "1604520",
    "end": "1610919"
  },
  {
    "text": "to what we call the optimizer the thing that can rearrange the source code so the optimizer it basically says pull",
    "start": "1610919",
    "end": "1617240"
  },
  {
    "text": "this out as a lazy load of able thing and to the developer it basically says special rules apply here like you can't",
    "start": "1617240",
    "end": "1623960"
  },
  {
    "text": "just do anything here like you can do a lot of things but special rules apply and basically the the special rules are",
    "start": "1623960",
    "end": "1629520"
  },
  {
    "text": "that you have to understand is one this thing is going to be uh behind a lazy loaded boundary which means it's a",
    "start": "1629520",
    "end": "1634960"
  },
  {
    "text": "promise it's not a direct thing and two is we can serialize lots of things but",
    "start": "1634960",
    "end": "1641600"
  },
  {
    "text": "not everything so you you have to be careful about like what kind of things are serializable but you know the",
    "start": "1641600",
    "end": "1648240"
  },
  {
    "text": "framework will eagerly tell you that you know you're trying to like capture something that's not serializable so that we have a good developer experience",
    "start": "1648240",
    "end": "1654720"
  },
  {
    "text": "but for the most part you'd be surprised how we basically figured out how to serialize just about anything so obviously the basic things like objects",
    "start": "1654720",
    "end": "1662080"
  },
  {
    "text": "Primitives are easy but we know how to serialize closures which is kind of",
    "start": "1662080",
    "end": "1667720"
  },
  {
    "text": "mind-blowing but like yes we know how to serialize that so that already gives you a lot of things and we recently figured",
    "start": "1667720",
    "end": "1672919"
  },
  {
    "text": "out how to serialize promises which is even more blind blowing right",
    "start": "1672919",
    "end": "1678840"
  },
  {
    "text": "and so certain things we cannot serialize like um I don't know if you create a set interval and then you know",
    "start": "1678840",
    "end": "1684960"
  },
  {
    "text": "you get a number back and it's a number like that has no meaning outside of the server or you know the place where you",
    "start": "1684960",
    "end": "1690120"
  },
  {
    "text": "got it so there are constraints you have to understand and work with but for the most part you can just like write your",
    "start": "1690120",
    "end": "1696519"
  },
  {
    "text": "application the way you want we know how to break it up into pieces and that's extremely difficult by the way like",
    "start": "1696519",
    "end": "1702880"
  },
  {
    "text": "that's that's one of the blackest magic we have with quick I mean I'm happy to go into the details it's not like it's",
    "start": "1702880",
    "end": "1708120"
  },
  {
    "text": "secret or anything right but it is this thing that was super hard to figure out and now because we have that we get the",
    "start": "1708120",
    "end": "1714519"
  },
  {
    "text": "resum ability property right so that on the client let's say you have the counter example on a client let's say",
    "start": "1714519",
    "end": "1721200"
  },
  {
    "text": "you click the button that says you know add one and let's say this button randomly decided whether or not to",
    "start": "1721200",
    "end": "1726360"
  },
  {
    "text": "increment the value or not right so when you click on the button the system has to download the closure that represents",
    "start": "1726360",
    "end": "1732240"
  },
  {
    "text": "the incrementer there's no choice about that so you have to download that and then let's say that button decides that",
    "start": "1732240",
    "end": "1737640"
  },
  {
    "text": "it's not going to increment things because it's random then the system is done there's nothing more to download",
    "start": "1737640",
    "end": "1743519"
  },
  {
    "text": "but if the button randomly decides actually I am going to increment the value then now the system has to be",
    "start": "1743519",
    "end": "1749039"
  },
  {
    "text": "reactive and say oh you modified this thing which component is invalidated",
    "start": "1749039",
    "end": "1754360"
  },
  {
    "text": "because of the action you have done right and most Frameworks are like oh I",
    "start": "1754360",
    "end": "1759399"
  },
  {
    "text": "give up just R renter everything and then there's like ways to kind of prune the tree right but when you say give up",
    "start": "1759399",
    "end": "1764679"
  },
  {
    "text": "and render everything you just mean like oh download the whole application so that's not a thing for us reactive",
    "start": "1764679",
    "end": "1769840"
  },
  {
    "text": "Frameworks are like oh I know you modified this therefore I have to modify this component and so they have an",
    "start": "1769840",
    "end": "1775240"
  },
  {
    "text": "advantage except in order for them to rebuild the reactivity graph they have to run the application once at the very",
    "start": "1775240",
    "end": "1782080"
  },
  {
    "text": "beginning so that's useless right so the thing that quick understands is what is",
    "start": "1782080",
    "end": "1788399"
  },
  {
    "text": "the reactivity graph but this reactivity graph is actually serialized into the HTML so that when you go and modify the",
    "start": "1788399",
    "end": "1795480"
  },
  {
    "text": "count value quick can say aha I know exactly which component I need to download and update and so it can be",
    "start": "1795480",
    "end": "1802159"
  },
  {
    "text": "extremely surgical about it right now imagine a page where you have add to shopping cart right you have your",
    "start": "1802159",
    "end": "1808000"
  },
  {
    "text": "prototypical shoe you say add to the shopping cart right so when you hit that button the code behind it will go",
    "start": "1808000",
    "end": "1813720"
  },
  {
    "text": "probably and update some shopping cart data object which then means that I have to render the shopping cart right so you",
    "start": "1813720",
    "end": "1819480"
  },
  {
    "text": "have to download the code for clicking on the button for out of the shopping cart and you have to download the code",
    "start": "1819480",
    "end": "1826440"
  },
  {
    "text": "for the rendering of the shopping card but notice what you didn't download first of all you didn't download anything else on the page but you didn't",
    "start": "1826440",
    "end": "1833000"
  },
  {
    "text": "even download the component Associated that originally rendered the button for adding to the shopping cart because like",
    "start": "1833000",
    "end": "1840039"
  },
  {
    "text": "you didn't change that part you didn't rerent done anything over there so why should we even download this right so",
    "start": "1840039",
    "end": "1846159"
  },
  {
    "text": "the one way to think about it is one of the things that quick is trying to do is to say look if you're going to go",
    "start": "1846159",
    "end": "1851279"
  },
  {
    "text": "through the trouble of downloading some JavaScript then you better execute the whole thing right like we don't want to",
    "start": "1851279",
    "end": "1856320"
  },
  {
    "text": "be in a situation where like we download JavaScript and then don't execute it like so if you look at code coverage for",
    "start": "1856320",
    "end": "1862880"
  },
  {
    "text": "a quick application you should be pretty close to 100 right because we're only downloading and executing stuff that we",
    "start": "1862880",
    "end": "1870159"
  },
  {
    "text": "actually need to do right and so the magical bit is like how do you take an application that is written in a",
    "start": "1870159",
    "end": "1876200"
  },
  {
    "text": "standard react like way and break it up into lots and lots of entry points",
    "start": "1876200",
    "end": "1881960"
  },
  {
    "text": "create ideal bundle sizes and do all of this magic that needs to happen and then basically push P all of this thing to",
    "start": "1881960",
    "end": "1889639"
  },
  {
    "text": "the browser in a way where the developer doesn't have to think about any of this stuff so I want to dig into one",
    "start": "1889639",
    "end": "1895600"
  },
  {
    "text": "particular thing there and that's how are you thinking about how State moves through these different components",
    "start": "1895600",
    "end": "1901120"
  },
  {
    "text": "because I was thinking about your example where you have a button somewhere on a page and you have a shopping cart somewhere else on the page",
    "start": "1901120",
    "end": "1907080"
  },
  {
    "text": "and you change some State based on the button and it only impacts the shopping cart yeah in many component-based",
    "start": "1907080",
    "end": "1914600"
  },
  {
    "text": "applications that state may live in like a prop or something that is propagated through a number of parents to get down",
    "start": "1914600",
    "end": "1921440"
  },
  {
    "text": "into whatever the actual component that's depending on it is yeah our current implementation is inspired by",
    "start": "1921440",
    "end": "1928399"
  },
  {
    "text": "mobex or kind of what I believe what spelt does as well so we have stores and",
    "start": "1928399",
    "end": "1933639"
  },
  {
    "text": "stores have properties and you pass stores around and then when you read from the store that's how we know that a",
    "start": "1933639",
    "end": "1939679"
  },
  {
    "text": "subscription has happened and when you write into a store that's how we know that you modified something that's one way to do it we're also actually",
    "start": "1939679",
    "end": "1946240"
  },
  {
    "text": "thinking hard about what solid JS does they have signals and that is another interesting thing that we would like to",
    "start": "1946240",
    "end": "1953440"
  },
  {
    "text": "explore we're kind of exploring it we're liking it we'll see what the thing actually lands but yeah the idea is that",
    "start": "1953440",
    "end": "1960000"
  },
  {
    "text": "you pass stores rather than props so that you don't do much prop drilling you can also have context Etc but yeah if",
    "start": "1960000",
    "end": "1966279"
  },
  {
    "text": "you do the classical prop tring then you have the problem that you'll Force rendering all throughout the system and",
    "start": "1966279",
    "end": "1972120"
  },
  {
    "text": "you don't want to do that right yeah that makes sense VI also has a store-based system a lot of the times so",
    "start": "1972120",
    "end": "1977440"
  },
  {
    "text": "yeah it's yeah what I'm kind of getting on is that like your developer experience for building an application",
    "start": "1977440",
    "end": "1982880"
  },
  {
    "text": "is very much unchanged and it's probably closest to react but like maybe some things like stores from viewer felt Etc",
    "start": "1982880",
    "end": "1989919"
  },
  {
    "text": "but fundamentally the DX is something you're very very familiar with right but",
    "start": "1989919",
    "end": "1995200"
  },
  {
    "text": "that's not what we're selling here like we're not selling you a better DX we're selling you a better experience for your",
    "start": "1995200",
    "end": "2001799"
  },
  {
    "text": "end user because we are smarter in a way we bundle execute and deliver the information to the client so what's the",
    "start": "2001799",
    "end": "2008880"
  },
  {
    "text": "Practical difference then so like what you're offering with quick let's say the DX is relatively the same as you using",
    "start": "2008880",
    "end": "2014240"
  },
  {
    "text": "react you know put some dollar signs at the end of things there's a few more rules or different rules what's the",
    "start": "2014240",
    "end": "2019320"
  },
  {
    "text": "Practical difference is it an order of magnitude in a complicated application like yeah we talking about your app's",
    "start": "2019320",
    "end": "2025080"
  },
  {
    "text": "going to be 10x faster 100x like what happens when I use quick instead of react yeah so we have our homepage",
    "start": "2025080",
    "end": "2030760"
  },
  {
    "text": "Builder iio homepage and we actually have the homepage originally was a xjs react homepage and uh we just switched",
    "start": "2030760",
    "end": "2037480"
  },
  {
    "text": "it over too quick and actually we have the ability to run both Pages simultaneously so if you go to Builder I question mark render equals next you get",
    "start": "2037480",
    "end": "2044480"
  },
  {
    "text": "the nextjs one if you just do without anything you get the quick one if you open up in Chrome sorry if you open up",
    "start": "2044480",
    "end": "2051599"
  },
  {
    "text": "in Google page speed we get I think around 40 our score is in Google page",
    "start": "2051599",
    "end": "2056760"
  },
  {
    "text": "speed on in nextjs and about 95 in quick now I'm not picking up and next CH like",
    "start": "2056760",
    "end": "2062599"
  },
  {
    "text": "we could have done this in any other framework I think the numbers will be about the same because they all fundament mentally have hydration that's",
    "start": "2062599",
    "end": "2069919"
  },
  {
    "text": "happening and what we're really paying for is the hydration here right okay so no matter which framework you kind of choose out of that category I think",
    "start": "2069919",
    "end": "2076158"
  },
  {
    "text": "you'll see similar numbers if you go to Chrome and if you open up you know Dev tools and you can go to the performance",
    "start": "2076159",
    "end": "2082560"
  },
  {
    "text": "and the performance you record the startup thing what you'll see is that Builder IO page on a on a you know",
    "start": "2082560",
    "end": "2089040"
  },
  {
    "text": "desktop computer spends I believe something around 80 milliseconds executing JavaScript at startup and that",
    "start": "2089040",
    "end": "2094520"
  },
  {
    "text": "includes quick and party town and party scripts and everything right and in the",
    "start": "2094520",
    "end": "2101040"
  },
  {
    "text": "nextjs version it takes I believe 800 milliseconds so we're talking 10x Improvement in the amount of JavaScript",
    "start": "2101040",
    "end": "2108320"
  },
  {
    "text": "that the browser has to execute on Startup but I think the Improvement is even greater because when you have a",
    "start": "2108320",
    "end": "2115359"
  },
  {
    "text": "regular framework like let's go to the example of somebody sends you a link to the shoe and there's a buy button you",
    "start": "2115359",
    "end": "2120720"
  },
  {
    "text": "want to click when you do the normal Frameworks right you render everything there's a button and you click on the",
    "start": "2120720",
    "end": "2126400"
  },
  {
    "text": "button and nothing's happen because you clicked on it too early right and so you have to wait until hydration is finished",
    "start": "2126400",
    "end": "2133119"
  },
  {
    "text": "before you can click on a button and that can take time and you know on a mobile device it can take literally tens",
    "start": "2133119",
    "end": "2138760"
  },
  {
    "text": "of seconds the nice property of quick is that the moment quick HTML loads the",
    "start": "2138760",
    "end": "2145440"
  },
  {
    "text": "HTML contains all of the information about where the listeners are and it also includes little tiny what we call a",
    "start": "2145440",
    "end": "2152800"
  },
  {
    "text": "poil which is a piece of JavaScript that sets up a global listener for everything at the RO root which is super tiny it's",
    "start": "2152800",
    "end": "2159200"
  },
  {
    "text": "about 1 kilobyte it executes in like under 10 milliseconds it costs nothing basically and this poil is ready to",
    "start": "2159200",
    "end": "2167280"
  },
  {
    "text": "listen for things immediately right so as soon as the HTML shows up with a button inline inside of the HTML is a",
    "start": "2167280",
    "end": "2174480"
  },
  {
    "text": "script T that already executed is already listening for click button so when you go and click that click goes",
    "start": "2174480",
    "end": "2180359"
  },
  {
    "text": "directly and gets immediately processed and now of course you have to fetch the JavaScript but instead of fetching this",
    "start": "2180359",
    "end": "2185839"
  },
  {
    "text": "huge thing which is the whole application you're fetching just the code necessary for that button right you",
    "start": "2185839",
    "end": "2191800"
  },
  {
    "text": "cannot get any more efficient like we have removed everything that is strictly not needed and we ended up with the",
    "start": "2191800",
    "end": "2198680"
  },
  {
    "text": "absolute bare essential like there's nothing else left to remove the other thing we do is we also know",
    "start": "2198680",
    "end": "2205960"
  },
  {
    "text": "statistically and also we can kind of guess through heuristics as to what are the possible things that you as a developer can do and so even before you",
    "start": "2205960",
    "end": "2213240"
  },
  {
    "text": "click on the button we already instruct the browser with a prefetch links to say like this is most likely what's going to",
    "start": "2213240",
    "end": "2219960"
  },
  {
    "text": "happen so go and start prefetching this JavaScript we don't execute the JavaScript we're just prefetching it but",
    "start": "2219960",
    "end": "2226240"
  },
  {
    "text": "the nice property is that if we guess wrong and you click on a button your request goes in front of the prefetch",
    "start": "2226240",
    "end": "2232000"
  },
  {
    "text": "requests right so you immediately even pull yourself up so all of this basically means is that you are",
    "start": "2232000",
    "end": "2237760"
  },
  {
    "text": "essentially ready to interact with the page immediately it's hard to imagine a scenario where the interaction would be",
    "start": "2237760",
    "end": "2244319"
  },
  {
    "text": "even better like I don't know what else could be removed out of this particular thing this equation right just a blank",
    "start": "2244319",
    "end": "2249520"
  },
  {
    "text": "page you know just white just nothing exactly so why did you guys build this",
    "start": "2249520",
    "end": "2255000"
  },
  {
    "text": "was Builder IO too slow and you hit a roadblock and you're like we can't possibly make it any better because of",
    "start": "2255000",
    "end": "2260640"
  },
  {
    "text": "hydration and so here comes you know I'm mishko I'm good at making Frameworks I'm going to make one or what was the",
    "start": "2260640",
    "end": "2267000"
  },
  {
    "text": "Genesis of why would you build quick and not just do what the rest of us do which is ship like kind of slow webs sites",
    "start": "2267000",
    "end": "2272440"
  },
  {
    "text": "that are still okay yeah yeah yeah so that's a good question actually back in 2019 I think think I gave a talk in NGC",
    "start": "2272440",
    "end": "2280280"
  },
  {
    "text": "on like crazy stuff I think about and in this talk I actually proposed this idea",
    "start": "2280280",
    "end": "2286119"
  },
  {
    "text": "of RIS Mobility now I think the idea is I don't know of any other Frameworks at",
    "start": "2286119",
    "end": "2293240"
  },
  {
    "text": "the time that had this concept of reasonability but Google internally had",
    "start": "2293240",
    "end": "2298319"
  },
  {
    "text": "this thing called whiz or still has this thing called whiz which by the way around search and Google photos and those are very interactive fast sites",
    "start": "2298319",
    "end": "2305599"
  },
  {
    "text": "right and it doesn't quite have resum ability depends on how you define it but it has this idea of having these Global",
    "start": "2305599",
    "end": "2312119"
  },
  {
    "text": "listeners and putting as much information into the Damas possible so",
    "start": "2312119",
    "end": "2317839"
  },
  {
    "text": "that the the client can for all practical purposes resume the reason I'm",
    "start": "2317839",
    "end": "2323359"
  },
  {
    "text": "kind of hesitating to use the word resume is because there is no equivalent like execution on a server that saves",
    "start": "2323359",
    "end": "2329880"
  },
  {
    "text": "the state and then sends it it's more like the server runs Java code has nothing to do with anything and like it",
    "start": "2329880",
    "end": "2334960"
  },
  {
    "text": "just pre- assembles everything in correct order but the effect is is essentially the same that you have these super fast startup applications right so",
    "start": "2334960",
    "end": "2342520"
  },
  {
    "text": "whiz is kind of maybe the inspiration for this particular thing and I wanted to see like could I take some this ideas",
    "start": "2342520",
    "end": "2348680"
  },
  {
    "text": "behind wz and turn it into at that point angular but what I realized along the",
    "start": "2348680",
    "end": "2355000"
  },
  {
    "text": "way is that the kind of changes you have to do to the framework are so drastic",
    "start": "2355000",
    "end": "2360920"
  },
  {
    "text": "that it would not be possible to basically you were in a sense you would be making a brand new framework right",
    "start": "2360920",
    "end": "2367640"
  },
  {
    "text": "like you come to quick and you're like oh it kind of looks like react so you think it's react it's like well yes for",
    "start": "2367640",
    "end": "2373000"
  },
  {
    "text": "99% of the time but 1% of the time it is so different that it will definitely",
    "start": "2373000",
    "end": "2378480"
  },
  {
    "text": "break your stuff right you can't have a a framework that's like 99% compatible",
    "start": "2378480",
    "end": "2383640"
  },
  {
    "text": "right like that doesn't work because you know even the simplest stuff usually has huge number of things and that 1% will",
    "start": "2383640",
    "end": "2389880"
  },
  {
    "text": "basically make sure that your app will never run I'd be curious to dig into what that 1% is if I were to take a",
    "start": "2389880",
    "end": "2395119"
  },
  {
    "text": "react app and try to drop it in quick what would break yeah a few things so first of all quick has to have this",
    "start": "2395119",
    "end": "2400920"
  },
  {
    "text": "concept of asynchronous rendering what I Me by that is that all the existing framework have this idea of a",
    "start": "2400920",
    "end": "2406319"
  },
  {
    "text": "synchronous rendering when you call the render function like all the data has to be ready to go and you have to and you render right now there are I would say",
    "start": "2406319",
    "end": "2413560"
  },
  {
    "text": "hacks or like react suspense we like oh we come across a promise so like we",
    "start": "2413560",
    "end": "2419200"
  },
  {
    "text": "basically stop the rendering quit and then the promise gets resolved we restart the rendering from the rout and",
    "start": "2419200",
    "end": "2425480"
  },
  {
    "text": "hopefully we'll end up in a different place right that's not really what I mean by asynchronous rendering what I mean by that is no our rendering system",
    "start": "2425480",
    "end": "2431800"
  },
  {
    "text": "can actually render things and then it comes across like a laser loaded boundary like a component and says well",
    "start": "2431800",
    "end": "2437079"
  },
  {
    "text": "I have to wait it's a promise and so it literally waits in that when the promise resolves it continues where it left off",
    "start": "2437079",
    "end": "2443119"
  },
  {
    "text": "and continues going further and it's not just lazy loading components but also lazy loading data that also has this",
    "start": "2443119",
    "end": "2450000"
  },
  {
    "text": "particular problem and then when you do that you have this problem of like well I can't render directly to the Dom",
    "start": "2450000",
    "end": "2455440"
  },
  {
    "text": "immediately because if I do then the user will see intermediate values and we don't want to do that right so you have",
    "start": "2455440",
    "end": "2460480"
  },
  {
    "text": "to have kind of a journal that says like these are all the operations I have to apply to the Dom when everything is done",
    "start": "2460480",
    "end": "2466640"
  },
  {
    "text": "once I finish rendering so to speak internally I flush the dam operation now",
    "start": "2466640",
    "end": "2471920"
  },
  {
    "text": "the nice benefit of that is that when the framework runs it doesn't run in like these huge monolithic execution",
    "start": "2471920",
    "end": "2479680"
  },
  {
    "text": "blocks right instead it's just all these tiny little promises being resolved what it means is that for animation this is",
    "start": "2479680",
    "end": "2485200"
  },
  {
    "text": "great because there is really no point where we have huge large operations",
    "start": "2485200",
    "end": "2491560"
  },
  {
    "text": "right it's always broken up into lots of small acing operations and if the browser needs to like insert itself and",
    "start": "2491560",
    "end": "2496599"
  },
  {
    "text": "like do some updates or animations or something like that it can always do so yeah that's great you're never going to freeze the browser that way yeah it's a",
    "start": "2496599",
    "end": "2503400"
  },
  {
    "text": "nice benefit and so when you actually look at quick applications running if you look at Google page speed scores",
    "start": "2503400",
    "end": "2508800"
  },
  {
    "text": "you'll see that there is lots of stuff happening when when you know when you're updating things but it's all tiny little",
    "start": "2508800",
    "end": "2515200"
  },
  {
    "text": "things and so the browser never has basically gives you this red flag saying like you took 40 milliseconds to do",
    "start": "2515200",
    "end": "2521240"
  },
  {
    "text": "something and therefore you messed up my rendering of the you know updates of animations so that doesn't actually happen and it's it's an interesting side",
    "start": "2521240",
    "end": "2527720"
  },
  {
    "text": "effect like we didn't intend to solve this particular problem but like we just unintentionally solved it because of",
    "start": "2527720",
    "end": "2533640"
  },
  {
    "text": "just how the system [Music] [Applause] [Music]",
    "start": "2533640",
    "end": "2541080"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2541080",
    "end": "2546109"
  },
  {
    "text": "works [Music] [Applause]",
    "start": "2546119",
    "end": "2553910"
  },
  {
    "text": "what's going on Party People this episode is brought to you by our friends at Hora Hora let you create Dynamic high",
    "start": "2555440",
    "end": "2562200"
  },
  {
    "text": "performance graphql and rest apis from your databases in minutes with granular authorization and cashing baked in all",
    "start": "2562200",
    "end": "2569839"
  },
  {
    "text": "this without touching your underline database go from data to API in literally minutes as the technology",
    "start": "2569839",
    "end": "2576119"
  },
  {
    "text": "landscape evolves a key bottleneck for teams is making data accessible",
    "start": "2576119",
    "end": "2581319"
  },
  {
    "text": "especially in Enterprise environments modernizing applications and building new features is critically dependent on",
    "start": "2581319",
    "end": "2587960"
  },
  {
    "text": "being able to shape control and ship your data to interfaces demanding always available real-time access a source",
    "start": "2587960",
    "end": "2594640"
  },
  {
    "text": "solves this problem by connecting your databases your rest servers your graphql servers and thirdparty API is to provide",
    "start": "2594640",
    "end": "2601920"
  },
  {
    "text": "a unified realtime graphql API across all your data sources imagine your Tech",
    "start": "2601920",
    "end": "2608240"
  },
  {
    "text": "stack is a postgress database go as your backend language rest apis and vendors",
    "start": "2608240",
    "end": "2614040"
  },
  {
    "text": "who only expose rest and react for your front end Hur can give you an instant",
    "start": "2614040",
    "end": "2619079"
  },
  {
    "text": "graph Cel API for your front end an API that's protected with rolls caching and",
    "start": "2619079",
    "end": "2624160"
  },
  {
    "text": "everything you expect from a secure API and the ability to connect all your services into a single API all this",
    "start": "2624160",
    "end": "2631520"
  },
  {
    "text": "while ensuring the performance the security and the reliability requirements of your API layer the most",
    "start": "2631520",
    "end": "2637520"
  },
  {
    "text": "important business value hisort provides is reducing time to Market imagine if your team can go from data to API in",
    "start": "2637520",
    "end": "2644359"
  },
  {
    "text": "literally minutes it would be a GameChanger everything they do is through the lens of making developers",
    "start": "2644359",
    "end": "2650200"
  },
  {
    "text": "productive and getting to production ready in minutes the easiest way to get started with Hora is with Hora Cloud it",
    "start": "2650200",
    "end": "2656480"
  },
  {
    "text": "is fully managed in skills as you grow head to H.O JS party that's h a s",
    "start": "2656480",
    "end": "2665000"
  },
  {
    "text": ".i/ JSP party again .io JSP party and by our friends at",
    "start": "2665000",
    "end": "2671160"
  },
  {
    "text": "source gra they recently launched code insights now you can track what really matters to you and your team in your codebase transform your code into a",
    "start": "2671160",
    "end": "2678040"
  },
  {
    "text": "quable database to create customizable visual dashboards in seconds here's how engineering teams are using Code",
    "start": "2678040",
    "end": "2684079"
  },
  {
    "text": "insights they can track migrations adoption and deprecation across the code base they can detect and track versions",
    "start": "2684079",
    "end": "2690839"
  },
  {
    "text": "of languages or packages they can ensure the removal of security vulnerabilities like log 4J can understand code by team",
    "start": "2690839",
    "end": "2698280"
  },
  {
    "text": "track code smells and health and visualize configurations and services here's what the engineering manager at",
    "start": "2698280",
    "end": "2704400"
  },
  {
    "text": "presy has to say about this new feature quote as we've grown so has a need to better track and communicate our",
    "start": "2704400",
    "end": "2710200"
  },
  {
    "text": "progress and our goals across the engineering team and the broader company with code insights our data and",
    "start": "2710200",
    "end": "2715839"
  },
  {
    "text": "migration tracking is accurate across our entire code base and our engineers and our managers can shift out of manual",
    "start": "2715839",
    "end": "2723160"
  },
  {
    "text": "spreadsheets and spend more time working on code end quote the next step is to",
    "start": "2723160",
    "end": "2728400"
  },
  {
    "text": "see how other teams are using this awesome feature head to about. source.com",
    "start": "2728400",
    "end": "2734880"
  },
  {
    "text": "/- insights this link will be in the show notes again about. source.com",
    "start": "2734880",
    "end": "2741640"
  },
  {
    "text": "code-in [Music]",
    "start": "2741640",
    "end": "2753760"
  },
  {
    "text": "sits so you were telling us why you built quicket Builder you're getting",
    "start": "2753760",
    "end": "2758880"
  },
  {
    "text": "very excited I can tell you get very excited about these things and we never actually learned the real nut of why you",
    "start": "2758880",
    "end": "2765720"
  },
  {
    "text": "know finish the story so to speak yes I gave the talk in I think it was May 2019",
    "start": "2765720",
    "end": "2772160"
  },
  {
    "text": "I can't remember at enom and I kind of laid it out and even in that talk I actually talked about resumable the idea",
    "start": "2772160",
    "end": "2777839"
  },
  {
    "text": "of reability if you have time you should watch it I think it's kind of hilarious because whenever I watch it I'm like this is exactly like it's amusing to me",
    "start": "2777839",
    "end": "2784800"
  },
  {
    "text": "just how many even the vocabulary have I got right anyways so I kind of made the talk and then nothing happened for years",
    "start": "2784800",
    "end": "2791079"
  },
  {
    "text": "and it was kind of in the back of my head and so I started kind of experimenting with it B last year and at",
    "start": "2791079",
    "end": "2797680"
  },
  {
    "text": "the same time I kind of want to just try something different something new right I mean I was at Google for 16 years and",
    "start": "2797680",
    "end": "2804160"
  },
  {
    "text": "that's a long time to be anywhere I kind of was feeling like you know I'm either going to like retire here or I have to",
    "start": "2804160",
    "end": "2809720"
  },
  {
    "text": "like try new things and explore new things and so I started exploring and I came across a company called Builder diet IO and what I found fascinating",
    "start": "2809720",
    "end": "2816960"
  },
  {
    "text": "about them is that they had a kind of a visual editor that allows marketing folks to update the websites but in a",
    "start": "2816960",
    "end": "2823720"
  },
  {
    "text": "way where it's compatible with the engineers vision of components and",
    "start": "2823720",
    "end": "2829680"
  },
  {
    "text": "Engineers vision of like oh I'm using react and so like I don't want you to just like randomly do random stuff I",
    "start": "2829680",
    "end": "2834880"
  },
  {
    "text": "want you to actually basically create a react component uh in my page so it was",
    "start": "2834880",
    "end": "2840240"
  },
  {
    "text": "kind of a headless CMS system but it's based on components rather than Fields",
    "start": "2840240",
    "end": "2846440"
  },
  {
    "text": "that's kind of the big differentiator about it and because it's based on components if the customer has a react",
    "start": "2846440",
    "end": "2853800"
  },
  {
    "text": "application then they generate a react component and if the customer has an angular application to generate an",
    "start": "2853800",
    "end": "2859480"
  },
  {
    "text": "angular component and so on and so forth right and so that's a lot of work to generate all the different outputs and so they built this other tool called",
    "start": "2859480",
    "end": "2865599"
  },
  {
    "text": "mitosis and mitosis allows them to say like oh we have this General concept of",
    "start": "2865599",
    "end": "2870640"
  },
  {
    "text": "a component that needs to be built it's like a counter or whatever because whatever the marketing decided in the drag and drop Editor to kind of build",
    "start": "2870640",
    "end": "2877079"
  },
  {
    "text": "and they can spit out like whatever format that's canonical to whatever",
    "start": "2877079",
    "end": "2882839"
  },
  {
    "text": "technology stack you happen to have and that's how this whole thing works now what's interesting about it is that I I",
    "start": "2882839",
    "end": "2888880"
  },
  {
    "text": "was like hm if I was to build another framework one of the hard things would be to get customers but if you have this",
    "start": "2888880",
    "end": "2895079"
  },
  {
    "text": "thing called mitosis that spits out whatever output you want it would be trivial to get uh quick output out of",
    "start": "2895079",
    "end": "2903520"
  },
  {
    "text": "this as well so that was the one thing that kind of attracted me to Builder but by Builder was attracted to me is",
    "start": "2903520",
    "end": "2910440"
  },
  {
    "text": "because they had this thing that they're building the Headless CMS systems and all the engineers are like oh yeah but",
    "start": "2910440",
    "end": "2916680"
  },
  {
    "text": "headless CMS systems are going to slow my site down you're going to slow things down and so you know they're always saying like no no we're fast we're",
    "start": "2916680",
    "end": "2922839"
  },
  {
    "text": "actually not slowing anything down but then the people would build websites and they' be like well the website is slow and then and then you be like yeah",
    "start": "2922839",
    "end": "2929319"
  },
  {
    "text": "because like hydration and things like not because of us we just gave you a react component that you just dropped",
    "start": "2929319",
    "end": "2934720"
  },
  {
    "text": "into your page and so if the application is slow it's not because of us like it's",
    "start": "2934720",
    "end": "2940319"
  },
  {
    "text": "because you have lots of components on a page right and so the realization was like it didn't matter whether they were",
    "start": "2940319",
    "end": "2947200"
  },
  {
    "text": "using react or spel or angular or view the websites all performed about the",
    "start": "2947200",
    "end": "2952240"
  },
  {
    "text": "same like I know every single framework claims they're the fastest but if you actually look at what's actually",
    "start": "2952240",
    "end": "2957520"
  },
  {
    "text": "happening in the real world they're all about the same there's two reasons why they're slow right one is hydration",
    "start": "2957520",
    "end": "2962880"
  },
  {
    "text": "which kind of we've been talking about all this time and the other one is third party code but before I talk about those",
    "start": "2962880",
    "end": "2969079"
  },
  {
    "text": "two things like let me just close the r right so Builder was like gee you know like we would would be awesome if we",
    "start": "2969079",
    "end": "2975000"
  },
  {
    "text": "could come to a customer and be like yeah you know the performance is about the same on all of the different things",
    "start": "2975000",
    "end": "2980720"
  },
  {
    "text": "it's not us it's just the way these things work but what if you could come with a different framework that would",
    "start": "2980720",
    "end": "2985920"
  },
  {
    "text": "just like blow the performance out of the way right and because you have mitosis it's easy to come to the",
    "start": "2985920",
    "end": "2991960"
  },
  {
    "text": "customer and be like just push this button over here and we'll generate quick instead of angular or instead of",
    "start": "2991960",
    "end": "2997280"
  },
  {
    "text": "VI or instead of whatever you happen to be using and when we generate quick look how fast this thing is MHM right and so",
    "start": "2997280",
    "end": "3005359"
  },
  {
    "text": "it was kind of like match made in heaven and so kind of we joined on it and we started working on it together like I start working on it full-time but also",
    "start": "3005359",
    "end": "3011799"
  },
  {
    "text": "in know in a context of what Builder eventually will become and so we're pretty close to this particular thing",
    "start": "3011799",
    "end": "3017960"
  },
  {
    "text": "anyways so why is your website slow the short answer is too much JavaScript",
    "start": "3017960",
    "end": "3023000"
  },
  {
    "text": "there are two pieces to that part one is you sort of control but not really which is the application code that you have",
    "start": "3023000",
    "end": "3028880"
  },
  {
    "text": "written your first party code and the second part is the third party code which you don't really control because marketing comes in and says we need",
    "start": "3028880",
    "end": "3035480"
  },
  {
    "text": "Google analytics we need hopspot we need amplitude we need whatever like Facebook pixel right 25 things yes on average",
    "start": "3035480",
    "end": "3043040"
  },
  {
    "text": "like 30 things or something are well and that's frequently an order of magnitude slower than the first- party code so",
    "start": "3043040",
    "end": "3048520"
  },
  {
    "text": "until you address that the framework's in the noise correct correct don't you just put an async on the script loader",
    "start": "3048520",
    "end": "3054280"
  },
  {
    "text": "though and you're done you just put async and then you're just like well no have you seen how much CPU some of those",
    "start": "3054280",
    "end": "3060520"
  },
  {
    "text": "advertising scripts chew up yeah but I used the async keyword on the attribute on the script so we started working on",
    "start": "3060520",
    "end": "3066240"
  },
  {
    "text": "quick and very quickly we basically realized exactly this is that the third party code is kind of ruining the party",
    "start": "3066240",
    "end": "3072119"
  },
  {
    "text": "here right and so the realization we had is that if you just make a blank page",
    "start": "3072119",
    "end": "3077359"
  },
  {
    "text": "with nothing on it and you add Google tag manager by itself it puts you at the",
    "start": "3077359",
    "end": "3082599"
  },
  {
    "text": "precipice of no longer getting 100 out of 100 on Google page P score right and",
    "start": "3082599",
    "end": "3087720"
  },
  {
    "text": "so like if that's the situation and that's just one of like 20 other things you have to add like you're not going to",
    "start": "3087720",
    "end": "3093920"
  },
  {
    "text": "win this battle and so party time was born the idea is you take third party",
    "start": "3093920",
    "end": "3099280"
  },
  {
    "text": "code and you run it in the web worker now that idea is not new right there's nothing like clever about that thing",
    "start": "3099280",
    "end": "3105079"
  },
  {
    "text": "that's like an obvious thing the problem is how do you do that because the web worker doesn't have Dom and all of these",
    "start": "3105079",
    "end": "3111280"
  },
  {
    "text": "scripts do something like document.title or they say document. EV listener click or like whatever that they do right in",
    "start": "3111280",
    "end": "3119119"
  },
  {
    "text": "there and so they don't have Dom and so people have tried to make kind of like fake Doms in the webworker and that",
    "start": "3119119",
    "end": "3125599"
  },
  {
    "text": "doesn't really work because they kind of go out of sync and a lot of things actually want to measure things like oh",
    "start": "3125599",
    "end": "3131240"
  },
  {
    "text": "how big is the box or where am I on a page or you know things of that sort and so none of that stuff really works if",
    "start": "3131240",
    "end": "3136400"
  },
  {
    "text": "you have a kind of a fake Dom so you need to have a real Dom and one thing you could do is you can make a proxy",
    "start": "3136400",
    "end": "3142079"
  },
  {
    "text": "meaning that whatever operations you do on a web worker you also do on the main thread and by proxying everything over",
    "start": "3142079",
    "end": "3149799"
  },
  {
    "text": "you can just have the script running inside of the webworker and if it says like what's the document. title you just",
    "start": "3149799",
    "end": "3155200"
  },
  {
    "text": "go out the main thread and say what is the document. title and then you return that back now all of that works easy",
    "start": "3155200",
    "end": "3161680"
  },
  {
    "text": "except for one tiny problem and that is that the communication Channel between the web worker and the main thread is",
    "start": "3161680",
    "end": "3168760"
  },
  {
    "text": "asynchronous meaning that if the web worker says what is document.title by",
    "start": "3168760",
    "end": "3174000"
  },
  {
    "text": "the time you come back and figure out what the title is and report back it's too late the code has executed past this",
    "start": "3174000",
    "end": "3181040"
  },
  {
    "text": "point and it's probably crashed because you couldn't really answer the question correctly right and so the magical bit",
    "start": "3181040",
    "end": "3186839"
  },
  {
    "text": "that partyon figured out is how to make a synchronous call from the web worker",
    "start": "3186839",
    "end": "3192000"
  },
  {
    "text": "to the main thread so we figured out a way to block the execution of the web",
    "start": "3192000",
    "end": "3197160"
  },
  {
    "text": "worker so that we can go and talk to the main thread asynchronously and then when we come",
    "start": "3197160",
    "end": "3203040"
  },
  {
    "text": "back we can resume running the web worker with the the script from where we",
    "start": "3203040",
    "end": "3208280"
  },
  {
    "text": "left off so that's the whole Magic right and so we put this together inside of party town and party town is great",
    "start": "3208280",
    "end": "3214160"
  },
  {
    "text": "because people just add it to their website and they'll increase their score you know 20 30 points on Google page",
    "start": "3214160",
    "end": "3219880"
  },
  {
    "text": "speed score just by adding it yeah and it's not like you have to change anything right like it's just third party scripts and so just moving them",
    "start": "3219880",
    "end": "3226319"
  },
  {
    "text": "over to a web worker can have a huge impact on your performance so I'm sold",
    "start": "3226319",
    "end": "3231400"
  },
  {
    "text": "on Party Town because we have very little JavaScript on our site and very little third party JavaScript but what",
    "start": "3231400",
    "end": "3237040"
  },
  {
    "text": "we do have is recapture because freaking spam Bots yes and recapture kills my",
    "start": "3237040",
    "end": "3243400"
  },
  {
    "text": "scores I'm just like everything I do is fast but I got recapture Y and I can't take it off because the spam Bots would",
    "start": "3243400",
    "end": "3250079"
  },
  {
    "text": "increase Party Town yeah Party Town it's a drop in I don't going to do anything I just drop it in that's spectacular all",
    "start": "3250079",
    "end": "3255559"
  },
  {
    "text": "right so party town is like a no-brainer like you just need to do Party Town it's just a no-brainer but now when you do",
    "start": "3255559",
    "end": "3260839"
  },
  {
    "text": "party town and you move the third party scripts over now you have the next problem and the next problem is the",
    "start": "3260839",
    "end": "3265920"
  },
  {
    "text": "framework itself right and this is where quick comes in what really what Builder wants to have is wants to have kind of a",
    "start": "3265920",
    "end": "3272400"
  },
  {
    "text": "solution where both the marketing people that are not code aware can go and edit the page and as well as Engineers can",
    "start": "3272400",
    "end": "3278880"
  },
  {
    "text": "edit the page in their own ways and the whole thing kind of comes together and we can be unbelievably fast and so",
    "start": "3278880",
    "end": "3285079"
  },
  {
    "text": "things like personalization AB testing Etc things that are historically very very difficult to do with classical",
    "start": "3285079",
    "end": "3291240"
  },
  {
    "text": "systems becom super easy with quick and party time kall you wanted to say something I could tell I was going to",
    "start": "3291240",
    "end": "3296599"
  },
  {
    "text": "ask if there's any limitations on what can run in Party Town yeah it's a good question yeah so there are some limitations like in theory you can",
    "start": "3296599",
    "end": "3303520"
  },
  {
    "text": "execute everything but the question is how good are our proxies about like",
    "start": "3303520",
    "end": "3309359"
  },
  {
    "text": "simulating the environment and we've been getting better and better about all these surprises for that part kind of",
    "start": "3309359",
    "end": "3315319"
  },
  {
    "text": "most things can run but there is a performance penalty for running them now it's a third- party script so I really don't care how long it takes for Google",
    "start": "3315319",
    "end": "3322039"
  },
  {
    "text": "analytics to boot up and send some data to Google right that that doesn't really matter whether it takes 50 milliseconds",
    "start": "3322039",
    "end": "3328280"
  },
  {
    "text": "or 200 milliseconds like whatever right yeah what I care about is that the user isn't getting blocked on the main thread",
    "start": "3328280",
    "end": "3335280"
  },
  {
    "text": "right that's the thing that matters right so if you try to run like a react application or any framework it doesn't",
    "start": "3335280",
    "end": "3341720"
  },
  {
    "text": "have to be react right in a web worker it works but you can definitely see that it's kind of sluggish right but it is",
    "start": "3341720",
    "end": "3348920"
  },
  {
    "text": "possible right but that's not the point of the thing the point of it is not to run the application in the third part in",
    "start": "3348920",
    "end": "3354440"
  },
  {
    "text": "the web worker right the point is to run all these analytics in a web worker off",
    "start": "3354440",
    "end": "3359720"
  },
  {
    "text": "the main thread so that the main thread is dedicated to the application and to the user good answer so we're running",
    "start": "3359720",
    "end": "3366240"
  },
  {
    "text": "short on time we could have you back for a whole another hour probably MCO this thing goes deep happy to come back man we have a few questions from the chat",
    "start": "3366240",
    "end": "3373160"
  },
  {
    "text": "let's do a few quick ones here Jarvis asks if there's any real world production websites using quick we know",
    "start": "3373160",
    "end": "3378599"
  },
  {
    "text": "Builder using it but are there anybody else I know it's pretty new but have you gotten any people using it and are they seeing the same thing yall are seeing",
    "start": "3378599",
    "end": "3384880"
  },
  {
    "text": "yes we are so Builder has it obviously the quick homepage has it we actually",
    "start": "3384880",
    "end": "3390520"
  },
  {
    "text": "Builder has a couple of customers that are actually using builder in production so that's exciting and there are also in",
    "start": "3390520",
    "end": "3397359"
  },
  {
    "text": "our community people have like built like their own personal work pages Etc in Builder as well it's happening but we",
    "start": "3397359",
    "end": "3403559"
  },
  {
    "text": "are still kind of early on in the game right I think we're C maybe a month or so away from declaring uh like beta one",
    "start": "3403559",
    "end": "3411599"
  },
  {
    "text": "of the things we are trying to do is we want to make sure that the whole stack Works end to end which includes so",
    "start": "3411599",
    "end": "3417520"
  },
  {
    "text": "there's quick on which is the framework quick city which is kind of like nextjs the meta framework that goes on top of",
    "start": "3417520",
    "end": "3422839"
  },
  {
    "text": "it and then on top of that we have this thing called quick SDK and a quick SDK is the thing that glues the quick City",
    "start": "3422839",
    "end": "3430119"
  },
  {
    "text": "website with Builder so you would only use Quick SDK if you wanted to integrate with Builder but we wanted to kind of",
    "start": "3430119",
    "end": "3435760"
  },
  {
    "text": "have the whole stack running before we declare beta and we're getting very very close also loving the way quick city has",
    "start": "3435760",
    "end": "3442640"
  },
  {
    "text": "turned out another talk for another day another talk for another day I would love to dig into that with you yeah",
    "start": "3442640",
    "end": "3449200"
  },
  {
    "text": "totally yeah Peter banjo wonders can quick work with different JS server Frameworks like fastify Express or yes",
    "start": "3449200",
    "end": "3456520"
  },
  {
    "text": "so that's another thing we kind of worked hard on the quick itself doesn't use any API which means anywhere there's",
    "start": "3456520",
    "end": "3462760"
  },
  {
    "text": "JavaScript library or JavaScript available will run right so we have adapters for Dino for fastly for cloud",
    "start": "3462760",
    "end": "3470640"
  },
  {
    "text": "flare for just about anything you can imagine including nodejs so you could just set up your",
    "start": "3470640",
    "end": "3476839"
  },
  {
    "text": "environment that you happen to be running in as long as it is Javascript right quick and run over there we even",
    "start": "3476839",
    "end": "3483280"
  },
  {
    "text": "have it running in a service worker because when you go to our examples our tutorial Pages we actually allow you to",
    "start": "3483280",
    "end": "3489640"
  },
  {
    "text": "play with the apps and so instead of being service side rendered on the server they actually get service side rendered in the service worker okay",
    "start": "3489640",
    "end": "3497160"
  },
  {
    "text": "interesting what about debugging tools or anything special for quick anything that you would run into using it built",
    "start": "3497160",
    "end": "3503799"
  },
  {
    "text": "into uh it's a standard debugging story you know in the browser you can just put break points Etc as you would imagine",
    "start": "3503799",
    "end": "3509520"
  },
  {
    "text": "same thing happens on a you know node.js or whatever you just open up the no. JS debuger Place break points and everything works the only difference is",
    "start": "3509520",
    "end": "3515960"
  },
  {
    "text": "kind of that you have to understand that like there's server and a client and the code could be running on both locations",
    "start": "3515960",
    "end": "3521359"
  },
  {
    "text": "and so you might have to like execute things you might have to debug things in a server versus debugging in a client but the source Maps works and all the",
    "start": "3521359",
    "end": "3527680"
  },
  {
    "text": "other standard stuff and and our Transformations on a source code are usually like very simple as in like take",
    "start": "3527680",
    "end": "3533480"
  },
  {
    "text": "this code and move it over here and so the source Maps work very very well so it's not like we rename the variable",
    "start": "3533480",
    "end": "3538799"
  },
  {
    "text": "names or we introduce extra things or move the code around or anything like that it's very mechanical of like this code goes here and this code goes there",
    "start": "3538799",
    "end": "3545359"
  },
  {
    "text": "and so the source Maps work beautifully last one Party Town what about the payload how what what's the cost of",
    "start": "3545359",
    "end": "3551119"
  },
  {
    "text": "including Party Town on our page is it significant is it insignificant that's a good question I don't remember I want to",
    "start": "3551119",
    "end": "3557079"
  },
  {
    "text": "say it's like few kilobytes that goes into the main thread okay and then I don't know how big is what gets loaded",
    "start": "3557079",
    "end": "3563640"
  },
  {
    "text": "in the web worker thread probably like on the order of several kilobytes I I",
    "start": "3563640",
    "end": "3569200"
  },
  {
    "text": "don't actually know okay so I'm just making stuff out but it's not that big but the gains you get is that you",
    "start": "3569200",
    "end": "3574480"
  },
  {
    "text": "offload these huge things like Google tag manager right right off of the main thread and so any kind of additional C",
    "start": "3574480",
    "end": "3580880"
  },
  {
    "text": "that party town brings in is insignificant compared to the savings you get from moving this thing out very",
    "start": "3580880",
    "end": "3586520"
  },
  {
    "text": "cool well the website is quick. builder. that's what a w and a k because you can't spell things the normal way and",
    "start": "3586520",
    "end": "3593359"
  },
  {
    "text": "still have a trademark you know we got to spell things differently so that's where it is of course it's in your show notes listener all the links to all the",
    "start": "3593359",
    "end": "3599480"
  },
  {
    "text": "things are in the show notes so if you're interested in quick if you're ready to drop Party Town into your page",
    "start": "3599480",
    "end": "3605839"
  },
  {
    "text": "and enjoy the third party sequestering your third parties into a web worker",
    "start": "3605839",
    "end": "3610960"
  },
  {
    "text": "definitely check the show notes for that mishko anything else you have to say we really appreciate this conversation it's",
    "start": "3610960",
    "end": "3616480"
  },
  {
    "text": "been very interesting I think it's like tantalizing there's still a lot of things that I have questions about but",
    "start": "3616480",
    "end": "3622680"
  },
  {
    "text": "we're going to call the show any final words before we let you go thanks for having me there's many things we haven't",
    "start": "3622680",
    "end": "3628079"
  },
  {
    "text": "talked about specifically the magic we can do on the server side optimizations Etc so if you want to go into some crazy",
    "start": "3628079",
    "end": "3634280"
  },
  {
    "text": "needed Duty stuff I would love to come back and get in there but thanks for having me and the main thing I really",
    "start": "3634280",
    "end": "3639559"
  },
  {
    "text": "wanted to get across is that there are lots of existing Frameworks and quick is not yet just another one that has a",
    "start": "3639559",
    "end": "3645559"
  },
  {
    "text": "different DX like it's a fundamental rethink from the ground app of how a web application should work and hopefully I",
    "start": "3645559",
    "end": "3651559"
  },
  {
    "text": "was able to kind of convey that in the the chat I think so and I will say this kall has been very polite he's been",
    "start": "3651559",
    "end": "3657720"
  },
  {
    "text": "biting his tongue the whole last 20 minutes he has so many things to ask and he's asked zero of them so we can",
    "start": "3657720",
    "end": "3663520"
  },
  {
    "text": "definitely have you back maybe kall can go one-onone and just have a deep dive into the nerdery of how these things are",
    "start": "3663520",
    "end": "3669119"
  },
  {
    "text": "fitting together kall does that sound cool or do you have any more questions I",
    "start": "3669119",
    "end": "3674440"
  },
  {
    "text": "was just thinking as you were saying there was so much I was like I feel like we could talk for hours on",
    "start": "3674440",
    "end": "3679760"
  },
  {
    "text": "these so if you're game I'm game let's find some time yeah anytime anytime I'm",
    "start": "3679760",
    "end": "3685160"
  },
  {
    "text": "game all right very good well for cable I'm Jared this has been JS party thanks for listening everybody and we will talk",
    "start": "3685160",
    "end": "3691079"
  },
  {
    "text": "to youall next",
    "start": "3691079",
    "end": "3693960"
  },
  {
    "text": "week are you sold on quick how about Party Town should we do a whole episode",
    "start": "3698160",
    "end": "3704559"
  },
  {
    "text": "on that or n let us know in the comments we would love to hear from you there's a discussion Link in your show notes and",
    "start": "3704559",
    "end": "3711400"
  },
  {
    "text": "if you're a longtime listener of JS party maybe join our membership program ditch the ass directly support our work",
    "start": "3711400",
    "end": "3717920"
  },
  {
    "text": "get bonuses like extended episodes and land yourself a free pack of stickers while you're at it that way your laptop",
    "start": "3717920",
    "end": "3723720"
  },
  {
    "text": "will look fresh and new when you're coding at the park the library or the bar/ pub sick frontend Feud call back",
    "start": "3723720",
    "end": "3730359"
  },
  {
    "text": "thanks again to our partners at fastly for the super fast bandwidth to fly.io for serving up our changel log.com app",
    "start": "3730359",
    "end": "3737240"
  },
  {
    "text": "to the mysterious breakmaster cylinder for these dope beats and to you for listening we appreciate it next up on",
    "start": "3737240",
    "end": "3743680"
  },
  {
    "text": "the Pod AEL returns after a lengthy Hiatus and she's going one-on-one with",
    "start": "3743680",
    "end": "3748799"
  },
  {
    "text": "Fred kshot talking about Astro and their big 1.0 release we'll have that episode",
    "start": "3748799",
    "end": "3753880"
  },
  {
    "text": "ready for you next [Music]",
    "start": "3753880",
    "end": "3764389"
  },
  {
    "text": "week",
    "start": "3764720",
    "end": "3767720"
  }
]