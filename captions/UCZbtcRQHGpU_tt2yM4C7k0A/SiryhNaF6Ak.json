[
  {
    "text": "hell that was a false start don't worry though the editors are excellent you get",
    "start": "480",
    "end": "6759"
  },
  {
    "text": "one of those I think yeah this will be in it because they don't ever edit in my favor that's basically that's why I'm",
    "start": "6759",
    "end": "12840"
  },
  {
    "text": "trying to flatter them um okay B with for change log is provided",
    "start": "12840",
    "end": "18960"
  },
  {
    "text": "by fastly learn more at fastly.com we move fast and fix things here at change",
    "start": "18960",
    "end": "24320"
  },
  {
    "text": "law because of rbar check them out at rar.com and we're hosted on linode cloud servers had lin.com",
    "start": "24320",
    "end": "32679"
  },
  {
    "text": "changelog Leno makes cloud computing simple affordable and accessible whether you're working on a personal project or",
    "start": "33760",
    "end": "39800"
  },
  {
    "text": "managing your Enterprises infrastructure linode has the pricing support and skill you need to take your ideas to the next",
    "start": "39800",
    "end": "45800"
  },
  {
    "text": "level We Trust Leno because they keep it fast and they keep it simple check them out at lin.com",
    "start": "45800",
    "end": "52960"
  },
  {
    "text": "changelog let's do it it's go time welcome to go",
    "start": "58920",
    "end": "66600"
  },
  {
    "text": "time your source for diverse discussions from around the go Community change log Plus+ has officially launched and it's",
    "start": "66600",
    "end": "74200"
  },
  {
    "text": "the best way for you to directly support go time join today to make the ads disappear get closer to the metal and",
    "start": "74200",
    "end": "81000"
  },
  {
    "text": "help sustain production of go time into the future learn more at Chang log.com slpl plus all right we've got a great",
    "start": "81000",
    "end": "88600"
  },
  {
    "text": "show for you today let's do some Q&A shall we here we",
    "start": "88600",
    "end": "93520"
  },
  {
    "text": "go hello and welcome to go time I'm Matt ryot today we're doing a very special",
    "start": "96280",
    "end": "102399"
  },
  {
    "text": "live Q&A episode cuz yesterday right John Calhoun who's with us today hello",
    "start": "102399",
    "end": "108840"
  },
  {
    "text": "John hey Matt yesterday John you posted on Reddit asking for people's questions",
    "start": "108840",
    "end": "114040"
  },
  {
    "text": "didn't you yes I did and what do you think quite a good response isn't it lot",
    "start": "114040",
    "end": "119520"
  },
  {
    "text": "a question questions lots of very good ones and we're going to do our best to answer them but don't worry we're not",
    "start": "119520",
    "end": "125520"
  },
  {
    "text": "doing it on our own uh joining us today Peter Bergen and Roberto clais hello hi",
    "start": "125520",
    "end": "131760"
  },
  {
    "text": "yeah hello welcome Peter how long have you been doing go I guess since the",
    "start": "131760",
    "end": "137480"
  },
  {
    "text": "beginning depending on what doing go means precisely I remember the day I came out it was like uh I had been at",
    "start": "137480",
    "end": "144879"
  },
  {
    "text": "that point working a lot in C++ and basically getting frustrated with how difficult it was to uh do concurrency",
    "start": "144879",
    "end": "151800"
  },
  {
    "text": "stuff correctly um so it was like very timely and appropriate and I remember",
    "start": "151800",
    "end": "156840"
  },
  {
    "text": "like building like sort or something on day one and being very frustrated and confused as to why I was wasn't fast uh",
    "start": "156840",
    "end": "163760"
  },
  {
    "text": "and that that was my that was my start and what about you Roberto how long have you been at it um five years",
    "start": "163760",
    "end": "171760"
  },
  {
    "text": "um and what made you get into it so basically I was using um piece of",
    "start": "171760",
    "end": "177400"
  },
  {
    "text": "software that was extremely slow and took way too many resources uh in my opinion so I just decided let's rewrite",
    "start": "177400",
    "end": "184040"
  },
  {
    "text": "it and go and see how it goes and it was much better that's a very interesting thing",
    "start": "184040",
    "end": "190040"
  },
  {
    "text": "we've got some questions that relate to that and I think that that's kind of an interesting clue um so that would be",
    "start": "190040",
    "end": "196080"
  },
  {
    "text": "interesting how about you John how long have you been doing go that's a good question probably not expect it it's",
    "start": "196080",
    "end": "203440"
  },
  {
    "text": "probably never had anybody ask me that one it's the first it was probably like 2012 2013 yeah that one stemmed from I",
    "start": "203440",
    "end": "211360"
  },
  {
    "text": "was working on a project where we had to talk with a bunch of apis concurrently and it was written in Ruby so it was",
    "start": "211360",
    "end": "217879"
  },
  {
    "text": "kind of just annoying because our you Ruby handles like one request for you know server you have up with if you're",
    "start": "217879",
    "end": "224280"
  },
  {
    "text": "using Ruby on Rails at least and while we could do all the different requests you know like in Threads and and wait",
    "start": "224280",
    "end": "229840"
  },
  {
    "text": "for the response it was annoying that our server would basically sit there doing nothing while it waited for some apis to respond and I was like if we",
    "start": "229840",
    "end": "236720"
  },
  {
    "text": "could actually have a server that you can handle multiple requests at once there's no real reason why this one can't do it it just wasn't set up to do",
    "start": "236720",
    "end": "242079"
  },
  {
    "text": "it at the time mhm yeah see that's another thing you get a few things that it does kind of out of the box that are",
    "start": "242079",
    "end": "250120"
  },
  {
    "text": "very attractive and actually one of our first questions uh from the the Reddit",
    "start": "250120",
    "end": "255239"
  },
  {
    "text": "feed is from D libian and D libian asks",
    "start": "255239",
    "end": "260479"
  },
  {
    "text": "what kinds of projects are best for learning go um are there any for people that",
    "start": "260479",
    "end": "266000"
  },
  {
    "text": "really want to start to learn go are there any types of projects that are more suited and more suitable or can",
    "start": "266000",
    "end": "273199"
  },
  {
    "text": "they just sort of pick any problem and go after it what do we think I think generally speaking diving in is more",
    "start": "273199",
    "end": "279280"
  },
  {
    "text": "important than getting the perfect project for me I always like doing things on my local file system like",
    "start": "279280",
    "end": "284800"
  },
  {
    "text": "opening up files appending to them maybe you know just simple stuff like that that I can actually go look at a file",
    "start": "284800",
    "end": "290720"
  },
  {
    "text": "and verify that it worked as I expected um not having to worry about servers and that sort of stuff that doesn't",
    "start": "290720",
    "end": "296240"
  },
  {
    "text": "necessarily make it super complicated and go but it's harder to verify everything um so that's where I tend to",
    "start": "296240",
    "end": "302039"
  },
  {
    "text": "start but I think each person's going to be different I totally agree with this impulse like um simple and and a domain",
    "start": "302039",
    "end": "308759"
  },
  {
    "text": "you're familiar with you don't want to be like learning both a new problem domain and the language at the same time",
    "start": "308759",
    "end": "313919"
  },
  {
    "text": "right you just some pick the thing to spend your energy on so ideally something you've written before and",
    "start": "313919",
    "end": "319360"
  },
  {
    "text": "won't take you like a month um but I've heard go described as like a DSL for",
    "start": "319360",
    "end": "324400"
  },
  {
    "text": "writing network servers which resonates with me all else equal um a simple thing",
    "start": "324400",
    "end": "330199"
  },
  {
    "text": "that deals in packets and requests and stuff I think is probably the um type of",
    "start": "330199",
    "end": "336639"
  },
  {
    "text": "project that's going to expose you to the most and widest uh variety of parts",
    "start": "336639",
    "end": "341960"
  },
  {
    "text": "of the language I think yeah for me one of the first things I wrote was um",
    "start": "341960",
    "end": "348000"
  },
  {
    "text": "crawler a web crawler and I think it in general go shines best in tooling when",
    "start": "348000",
    "end": "353440"
  },
  {
    "text": "you need to do something I don't know a repetitive task that you don't want to do by hand so you go like automate it",
    "start": "353440",
    "end": "358880"
  },
  {
    "text": "with go uh no UI no nothing you just write a console program and you run it and I think that's in general a good",
    "start": "358880",
    "end": "366080"
  },
  {
    "text": "thing to start with yeah that has the nice benefit of also solve being able to",
    "start": "366080",
    "end": "371240"
  },
  {
    "text": "solve a real problem that you have and I think that's always an advantage if you can when you're learning something new",
    "start": "371240",
    "end": "377720"
  },
  {
    "text": "if you can solve a real problem with it then you you're in a much better position aren't you to kind of focus",
    "start": "377720",
    "end": "385000"
  },
  {
    "text": "your learning you kind of have to learn the bits you need for this thing so it's quite a nice way to cut out a lot of",
    "start": "385000",
    "end": "391880"
  },
  {
    "text": "what you could be learning and really focus on something and then at the end of it hopefully you've got something useful I I know teams that have done",
    "start": "391880",
    "end": "399440"
  },
  {
    "text": "that as a way of introducing go into the team they've they've sort of found a",
    "start": "399440",
    "end": "405360"
  },
  {
    "text": "little Pro problem that they've all got and somebody's just taking it upon",
    "start": "405360",
    "end": "410560"
  },
  {
    "text": "themselves to solve it and usually is a tool it's exactly that some command line thing something that the developers are",
    "start": "410560",
    "end": "417039"
  },
  {
    "text": "using so you know it's not going to go straight into production or anything like that it's something that you can",
    "start": "417039",
    "end": "422560"
  },
  {
    "text": "have a slower introduction to I think that is kind of a good strategy and then yeah I Echo what what you say about the",
    "start": "422560",
    "end": "429720"
  },
  {
    "text": "the domain as well one thing I found really funny is that in a company a friend of mine works in uh they started",
    "start": "429720",
    "end": "435800"
  },
  {
    "text": "using code to generate code for Java so basically to generate some repetitive",
    "start": "435800",
    "end": "442680"
  },
  {
    "text": "code they found that the text template package in go was working pretty well for them so they just generate some code",
    "start": "442680",
    "end": "450759"
  },
  {
    "text": "with go in another language because that was just an option and they started using go with that which I found pretty",
    "start": "450759",
    "end": "456240"
  },
  {
    "text": "funny because many people say that go has the downside of having to generate code if you need to write generic kind",
    "start": "456240",
    "end": "462599"
  },
  {
    "text": "of algorithms and that was kind of funny experience to have I also wouldn't",
    "start": "462599",
    "end": "468360"
  },
  {
    "text": "expect that you know goes templating language which like I think we could all agree is maybe not the best in the world",
    "start": "468360",
    "end": "474440"
  },
  {
    "text": "would be like the best default choice for something like this I wonder if it had to do with the fact that it's built",
    "start": "474440",
    "end": "480000"
  },
  {
    "text": "into the standard library and in a lot of other languages that I'm aware of at least it's not really built into the standard Library yeah that and if I that",
    "start": "480000",
    "end": "487520"
  },
  {
    "text": "you could expose very easily expose language U functions that you wrote in the language to the template in language",
    "start": "487520",
    "end": "494800"
  },
  {
    "text": "so like it was very easy for them to just write most of the logic and go and just expose the function that they needed to the",
    "start": "494800",
    "end": "500879"
  },
  {
    "text": "template yeah another question that uh was asked by uh",
    "start": "500879",
    "end": "505960"
  },
  {
    "text": "9vol is um why should people try go so some people are kind of skeptical and I",
    "start": "505960",
    "end": "512000"
  },
  {
    "text": "understand this you know there's so many new things you don't want to have this shiny object syndrome where you're just chasing everything and you never really",
    "start": "512000",
    "end": "518440"
  },
  {
    "text": "get good at anything um but so some people therefore become automatically",
    "start": "518440",
    "end": "523599"
  },
  {
    "text": "skeptical and hold back from learning a language and this is the case for this",
    "start": "523599",
    "end": "529600"
  },
  {
    "text": "particular questioner and and they asked um yeah is is there anything is there a",
    "start": "529600",
    "end": "535040"
  },
  {
    "text": "kind of convincing sales pitch to convince people to try something with go",
    "start": "535040",
    "end": "540519"
  },
  {
    "text": "and by the way they are putting together like a a summer like sound bites thing",
    "start": "540519",
    "end": "546240"
  },
  {
    "text": "so if you're answers could be awesome little sound bites then that'd be great and and there's more chance to get on",
    "start": "546240",
    "end": "552640"
  },
  {
    "text": "the little sound bites if we can just drive all human conversation more towards the Twitter model and away from",
    "start": "552640",
    "end": "559279"
  },
  {
    "text": "reason Discord yeah I know understood yeah yeah because it's what works isn't it yeah it's clearly right and we're all",
    "start": "559279",
    "end": "565240"
  },
  {
    "text": "building our personal Brands here so this is also it's all part of the big picture yeah by the way that's going",
    "start": "565240",
    "end": "570600"
  },
  {
    "text": "that's a great example that's going in it's perect some gaps I'm waiting for",
    "start": "570600",
    "end": "578040"
  },
  {
    "text": "Pace to Pivot into like Zoom plugins that count your characters while you're talking whoa wow let's make that never",
    "start": "578040",
    "end": "585959"
  },
  {
    "text": "reality to please too complicated so like this is an interesting question because like there's a period of time I",
    "start": "585959",
    "end": "592000"
  },
  {
    "text": "think where it wasn't clear that go was going to like stick around and like you",
    "start": "592000",
    "end": "597320"
  },
  {
    "text": "did need to make the pitch to get people interested right it's like well I understand you're not convinced but you",
    "start": "597320",
    "end": "602519"
  },
  {
    "text": "know here's some use cases and here's some things that it has worked at and you know here are some success stories",
    "start": "602519",
    "end": "608640"
  },
  {
    "text": "but I think we're past that point right I think go as like carved out a reasonably well- defined um area context",
    "start": "608640",
    "end": "614720"
  },
  {
    "text": "in which it is like useful and I think if you look even a little bit you'll find the success stories and if you look",
    "start": "614720",
    "end": "621079"
  },
  {
    "text": "often if you don't look at all you'll find the things that people dislike about it and you can get a pretty good",
    "start": "621079",
    "end": "626160"
  },
  {
    "text": "idea of like what's good and what's bad and and if it it's appropriate to your use case so I think we're at a point and",
    "start": "626160",
    "end": "631800"
  },
  {
    "text": "this is like my personal opinion where like if you're not convinced then fine like there's nothing wrong with that",
    "start": "631800",
    "end": "638000"
  },
  {
    "text": "like uh uh if you need someone to pitch the language to you I don't know like take some of your short life on this",
    "start": "638000",
    "end": "644000"
  },
  {
    "text": "Earth and you know spend it in a way that brings you more joy like uh it's fine to like say go isn't something",
    "start": "644000",
    "end": "650480"
  },
  {
    "text": "that's going to be useful for for me right now and uh move on to something else in my opinion absolutely brutal as",
    "start": "650480",
    "end": "657399"
  },
  {
    "text": "expected thank you Peter my answer is a little bit less brutal which is um I think people should learn",
    "start": "657399",
    "end": "664000"
  },
  {
    "text": "go because it makes their code better even if they decide not to use go anymore afterwards so how does it do",
    "start": "664000",
    "end": "670279"
  },
  {
    "text": "that I found out that um after years of using go my code in other languages which I still use is better because I",
    "start": "670279",
    "end": "677600"
  },
  {
    "text": "try to keep like I don't know the line of sight uh stuff indented to the left code simple stick to the native types do",
    "start": "677600",
    "end": "684440"
  },
  {
    "text": "not create unnecessary types where they're not needed I would also say that the lack generics so far forced me into",
    "start": "684440",
    "end": "691079"
  },
  {
    "text": "trying to write the simplest code and code that was closer to the data that was touching instead of just being generic and maybe being efficient and",
    "start": "691079",
    "end": "697959"
  },
  {
    "text": "now I found that even when I write typescript which is the other language that I use the most and Java my code is",
    "start": "697959",
    "end": "703959"
  },
  {
    "text": "more readable yeah go biases you away from abstractions in general and I think this",
    "start": "703959",
    "end": "710360"
  },
  {
    "text": "impulse is probably extremely good in many different languages yeah I agree or like at least Motion in that direction I",
    "start": "710360",
    "end": "717120"
  },
  {
    "text": "would generally agree with Peter that if you have haven't been exposed to a scenario where you've already considered go there's probably not much at this",
    "start": "717120",
    "end": "724240"
  },
  {
    "text": "point that's going to sell you and I think trying to make the sales pitch is just not going to resonate the only",
    "start": "724240",
    "end": "729360"
  },
  {
    "text": "thing that I would probably add to like Roberto added and everything is that the community and go is also something that",
    "start": "729360",
    "end": "736560"
  },
  {
    "text": "I think other languages should sort of look at and get an example of like at least it's one of the better ones in my",
    "start": "736560",
    "end": "742199"
  },
  {
    "text": "experience so like getting a feel for what it could be and making sure they set the bar at the right level versus",
    "start": "742199",
    "end": "748480"
  },
  {
    "text": "just sort of accepting a toxic Community mhm yeah I think that's a great point I",
    "start": "748480",
    "end": "753760"
  },
  {
    "text": "think these are all great points for me I'd say that in particular if you're building web servers web services Json",
    "start": "753760",
    "end": "761160"
  },
  {
    "text": "apis those kinds of things go does a good job with those kinds of things you get a lot out of the box for free for",
    "start": "761160",
    "end": "767440"
  },
  {
    "text": "example each HTTP request runs in its own go routine because of the standard",
    "start": "767440",
    "end": "772680"
  },
  {
    "text": "Library the way that that works uh so kind of automatically you get a level of quite safe concurrency to work to",
    "start": "772680",
    "end": "779480"
  },
  {
    "text": "operate in and you may get that also with other languages another point is that there shouldn't be a kind of",
    "start": "779480",
    "end": "785199"
  },
  {
    "text": "language War thing going on as well which just seems to very naturally happen quite a lot people want to know",
    "start": "785199",
    "end": "792600"
  },
  {
    "text": "why is go the answer you know and really we don't have the question you know so",
    "start": "792600",
    "end": "797760"
  },
  {
    "text": "it depends on what that question is some languages are great at different things and I think that's probably something",
    "start": "797760",
    "end": "804600"
  },
  {
    "text": "that is worth avoiding in yourself early I know that used to think more like that",
    "start": "804600",
    "end": "811040"
  },
  {
    "text": "and you know a more relaxed sort of open-minded attitude I think that helps because like you say there's there's",
    "start": "811040",
    "end": "816560"
  },
  {
    "text": "things in other languages which uh we can learn from as well pure functions is",
    "start": "816560",
    "end": "821600"
  },
  {
    "text": "one example that rust makes extensive use of in fact it's the only way you can do it I think um and you can then write",
    "start": "821600",
    "end": "828639"
  },
  {
    "text": "pure functions in go and take some of those lessons if you want to um and so",
    "start": "828639",
    "end": "833880"
  },
  {
    "text": "that that sort of stuff's nice but yeah anything that that involves web and apis and I think tooling is another great",
    "start": "833880",
    "end": "840320"
  },
  {
    "text": "area when you've got a task something repetitive you want to run through go is",
    "start": "840320",
    "end": "845440"
  },
  {
    "text": "nice it's not just a good way to learn but it also does quite a good job even if you haven't written it perfectly I",
    "start": "845440",
    "end": "852440"
  },
  {
    "text": "think that's quite cool I just wanted to extend that a tiny bit because you touch on something that I've seen over and",
    "start": "852440",
    "end": "857759"
  },
  {
    "text": "over in the like newbies go slack I think it's a little bit like what go is or isn't suited for and you said it's",
    "start": "857759",
    "end": "864480"
  },
  {
    "text": "really good for like reading web servers right and I totally agree but I think something a lot of people don't",
    "start": "864480",
    "end": "870360"
  },
  {
    "text": "understand is that the go model of what a web server or HTTP request is",
    "start": "870360",
    "end": "877199"
  },
  {
    "text": "substantially different from a lot of other languages in go the central like",
    "start": "877199",
    "end": "882360"
  },
  {
    "text": "uh model is the request itself and the path that takes through the Handler stack in the same way the like um",
    "start": "882360",
    "end": "889759"
  },
  {
    "text": "execution path takes through a call stack right so this is what go wants you to think about in in in terms of this",
    "start": "889759",
    "end": "895560"
  },
  {
    "text": "like relatively mechanical bit of the thing and in many other languages the",
    "start": "895560",
    "end": "901720"
  },
  {
    "text": "model is completely different it's like the model view controller idea where it's like a route being matched to a",
    "start": "901720",
    "end": "908480"
  },
  {
    "text": "controller that in uh that interfaces with like domain models and a repository",
    "start": "908480",
    "end": "913920"
  },
  {
    "text": "and like uh a lot of people who are used to this latter one come to go and find it very like lowlevel and like",
    "start": "913920",
    "end": "920360"
  },
  {
    "text": "unproductive and I think for them it actually probably is uh so to go back to the questions like what is a bat fit for",
    "start": "920360",
    "end": "927079"
  },
  {
    "text": "if you want to build like in sort of the consultancy style um s of like high throughput very uh rapidly produced kind",
    "start": "927079",
    "end": "934920"
  },
  {
    "text": "of cruddy web uh Services I think go is probably not a great fit because that's",
    "start": "934920",
    "end": "940480"
  },
  {
    "text": "not the model that it uses to talk about HTTP I think this is like a really interesting that comes up over and over",
    "start": "940480",
    "end": "946319"
  },
  {
    "text": "again I don't know maybe that's just me I would say that to address that some people wrote Frameworks it's like I know",
    "start": "946319",
    "end": "953680"
  },
  {
    "text": "that there are some Frameworks that when you use them they don't feel like go but they allow you to write go in other",
    "start": "953680",
    "end": "960199"
  },
  {
    "text": "parts of the code and the entire HTTP kind of crud stock or MVC stock is",
    "start": "960199",
    "end": "965839"
  },
  {
    "text": "handled by the framework but um I would agree with you and there are other things in which go is not good for I",
    "start": "965839",
    "end": "972880"
  },
  {
    "text": "would say that um for example it happens all the time on Twitter when people discuss that something should be made in",
    "start": "972880",
    "end": "979120"
  },
  {
    "text": "rust or in go or in C or stuff like that and I would say that most of the time",
    "start": "979120",
    "end": "984240"
  },
  {
    "text": "one of the two is a better choice it's like if you need to write firware for an embeded device that has a very limited",
    "start": "984240",
    "end": "990360"
  },
  {
    "text": "amount of memory yes you could use tamago or tinyo which are two perfect options but I would just say that maybe",
    "start": "990360",
    "end": "997440"
  },
  {
    "text": "that is not what you're looking for like if you have to write a real-time application go still has a GC you can",
    "start": "997440",
    "end": "1003079"
  },
  {
    "text": "write GC free go is not pleasant so just use the right tool for the job so a",
    "start": "1003079",
    "end": "1011440"
  },
  {
    "text": "follow-up question sort of to this is best form had asked do you follow other programming languages and like do you",
    "start": "1011440",
    "end": "1017680"
  },
  {
    "text": "compare the design choices and the ones they're making with what go is making his design choices and if so I guess which ones are",
    "start": "1017680",
    "end": "1025038"
  },
  {
    "text": "you following like how is that sort of influenced you I'm following typescript JavaScript rust and Java",
    "start": "1025039",
    "end": "1033959"
  },
  {
    "text": "mostly and I have to say there are some things I really like about those",
    "start": "1033959",
    "end": "1039280"
  },
  {
    "text": "languages there are something that I have to use from those languages I try not to do the comparison it's like I",
    "start": "1039280",
    "end": "1046240"
  },
  {
    "text": "know what the languages are for some times I carry over some Concepts but it",
    "start": "1046240",
    "end": "1051919"
  },
  {
    "text": "doesn't influence me too much to know other languages or to follow other languages do you find that the like um",
    "start": "1051919",
    "end": "1058960"
  },
  {
    "text": "do you think about them in terms of their like uh founding principles or or like or like theories or like at a sort",
    "start": "1058960",
    "end": "1066320"
  },
  {
    "text": "of more abstract level and sort of compare that with go I find this often",
    "start": "1066320",
    "end": "1071600"
  },
  {
    "text": "like quite interesting although maybe ultimately nonproductive I don't know you know I've never think of it in this",
    "start": "1071600",
    "end": "1077480"
  },
  {
    "text": "regards I just just use them and I try to click in the mindset it's like when I",
    "start": "1077480",
    "end": "1083559"
  },
  {
    "text": "speak English or when I speak Italian it's not like I try to think in the other language and see how I would put",
    "start": "1083559",
    "end": "1089880"
  },
  {
    "text": "the sentence in the other language just click into it and try to think in it I've tried to build uis with go I still",
    "start": "1089880",
    "end": "1097320"
  },
  {
    "text": "prefer the typescript approach on some things and I've tried to build stuff",
    "start": "1097320",
    "end": "1104159"
  },
  {
    "text": "with rust and at one point I just gave up and said okay no I'm just going to use go doesn't work for me but most of",
    "start": "1104159",
    "end": "1110159"
  },
  {
    "text": "the time when I start with the language I just stay in that mindset so a followup I guess to that since you're",
    "start": "1110159",
    "end": "1115840"
  },
  {
    "text": "switching mindsets like one of the big things in go is you write readable code do you find in other languages that you don't",
    "start": "1115840",
    "end": "1121880"
  },
  {
    "text": "prioritize that as much as much just because that's kind of the norm in the language yes I find Java Java",
    "start": "1121880",
    "end": "1129559"
  },
  {
    "text": "unreadable I like I it it's a big liant for me because Java uses very long lines",
    "start": "1129559",
    "end": "1135799"
  },
  {
    "text": "and most of the time you have a auto format there that will split the line automatically so I'm us that in go one",
    "start": "1135799",
    "end": "1141520"
  },
  {
    "text": "line means one thing and in Java sometimes you have like 24 lines that are saying single statement that that",
    "start": "1141520",
    "end": "1147799"
  },
  {
    "text": "kills me what I find super interesting is that even what constitutes readable is like completely different from uh",
    "start": "1147799",
    "end": "1155280"
  },
  {
    "text": "ecosystem to ecosystem right or person to person also and so this like subjective uh definition difference is",
    "start": "1155280",
    "end": "1162280"
  },
  {
    "text": "also like super interesting to me because I think for a lot of people for example in maybe the rust sphere I don't",
    "start": "1162280",
    "end": "1167760"
  },
  {
    "text": "know readable is like um what is uh somewhat tur and Compact and conveys",
    "start": "1167760",
    "end": "1173200"
  },
  {
    "text": "like the most semantic information not the most of objectively the most but like a lot of semantic information in a",
    "start": "1173200",
    "end": "1180200"
  },
  {
    "text": "few I don't know characters but for go like Simplicity has a completely",
    "start": "1180200",
    "end": "1186240"
  },
  {
    "text": "different meaning right um what we mean when we say it is totally something else I think rust is probably the one I",
    "start": "1186240",
    "end": "1193280"
  },
  {
    "text": "see this the most in because people will show me I think it's May and they'll show me code that that like does",
    "start": "1193280",
    "end": "1198720"
  },
  {
    "text": "something like they'll compare it to error handling and go and they'll say look looking at that if error is not equal nil is like distracting and then",
    "start": "1198720",
    "end": "1206000"
  },
  {
    "text": "they'll show me the example in Rust and I'm like I don't know rust so I know that's my issue here but I don't know what that code is doing like it just is",
    "start": "1206000",
    "end": "1212720"
  },
  {
    "text": "not clear to me and I'm like so for me at least in go sense readability is somebody who basically is just a junior",
    "start": "1212720",
    "end": "1218960"
  },
  {
    "text": "programmer could look at this and probably get a pretty good idea of what it's doing but in Rust I think you're right it's they're like they're viewing",
    "start": "1218960",
    "end": "1225720"
  },
  {
    "text": "it differently what they consider readable is different M and and and like this air handling thing I'll just",
    "start": "1225720",
    "end": "1231799"
  },
  {
    "text": "quickly is like such a great example because in go air handling is explicit",
    "start": "1231799",
    "end": "1237360"
  },
  {
    "text": "as part of like the philosophy right go considers air handling to be programming right and in a lot of other languages",
    "start": "1237360",
    "end": "1243640"
  },
  {
    "text": "it's just not modeled that way that has like ramification for right but I also",
    "start": "1243640",
    "end": "1248679"
  },
  {
    "text": "think that is it matters how much of your brain you're willing to dedicate to",
    "start": "1248679",
    "end": "1254280"
  },
  {
    "text": "the language instead of the code that you're writing instead of logic that you're writing and and how much you're willing to dedicate to the actual",
    "start": "1254280",
    "end": "1260120"
  },
  {
    "text": "problem that you're trying to solve and sometimes go might exceed on the other side but I like that when I read go and",
    "start": "1260120",
    "end": "1266000"
  },
  {
    "text": "when I WR go my brain doesn't invest any energy in how how do I do this in go I I",
    "start": "1266000",
    "end": "1272919"
  },
  {
    "text": "know how to do this in go I just do it which is not true in many other cases",
    "start": "1272919",
    "end": "1278760"
  },
  {
    "text": "and so I like that Simplicity and I like that I don't have to focus to write go",
    "start": "1278760",
    "end": "1284440"
  },
  {
    "text": "on go but I can focus on something else [Music]",
    "start": "1284440",
    "end": "1298600"
  },
  {
    "text": "what's up Gophers are you looking for a way to instantly debug and troubleshoot your applications and services running a",
    "start": "1298600",
    "end": "1304600"
  },
  {
    "text": "production on kubernetes that's a mouthful well pixie gives you a magical API to get instant debug data and the",
    "start": "1304600",
    "end": "1312080"
  },
  {
    "text": "best part is this doesn't involve changing code there are no manual uis and all this lives in inside kubernetes",
    "start": "1312080",
    "end": "1319400"
  },
  {
    "text": "pixie is an API which lives inside your platform harvests all of your data that you need and exposes a bunch of",
    "start": "1319400",
    "end": "1326360"
  },
  {
    "text": "interfaces that you can ping to get data you need pixie is essentially like a decentralized Splunk it's a programmable",
    "start": "1326360",
    "end": "1333480"
  },
  {
    "text": "Edge intelligence platform which captures metrics traces logs and events without any code changes and the team",
    "start": "1333480",
    "end": "1340320"
  },
  {
    "text": "behind pixie is working hard to bring it to market for broad use by the end of 2020 but I'm here to tell you how you",
    "start": "1340320",
    "end": "1346440"
  },
  {
    "text": "can get your hands on the beta today links are in the show notes so check them out so you can click through to the beta and their slack Community once",
    "start": "1346440",
    "end": "1353200"
  },
  {
    "text": "again links are in the show notes check them out and look forward to pixie day coming [Music]",
    "start": "1353200",
    "end": "1367670"
  },
  {
    "text": "[Music]",
    "start": "1371360",
    "end": "1376960"
  },
  {
    "text": "soon there's some interesting questions actually around some of the specifics of",
    "start": "1376960",
    "end": "1382320"
  },
  {
    "text": "how we actually do things as well um there's a lot on structuring which I think we'll come to later but there's one that I quite like here which we can",
    "start": "1382320",
    "end": "1389200"
  },
  {
    "text": "discuss and we may have differing opinions to Constructor or not to",
    "start": "1389200",
    "end": "1395320"
  },
  {
    "text": "Constructor some languages uh make heavy use in fact sometimes they're compulsory in order to create a class you have a",
    "start": "1395320",
    "end": "1402039"
  },
  {
    "text": "Constructor in go you don't really have classes but you can still kind of have this idea of Constructors where you just",
    "start": "1402039",
    "end": "1407960"
  },
  {
    "text": "sort of have a function usually prefixed with new to create something and then it",
    "start": "1407960",
    "end": "1413120"
  },
  {
    "text": "Returns the thing and maybe sometimes an error if if there's some work to do to get that thing how do we feel about",
    "start": "1413120",
    "end": "1421400"
  },
  {
    "text": "Constructors I even have a followup question how do we feel about Builders like once we decide on Constructors what",
    "start": "1421400",
    "end": "1427279"
  },
  {
    "text": "about Builders okay let's do Constructors then first and we'll do Builders after I can start by saying",
    "start": "1427279",
    "end": "1433440"
  },
  {
    "text": "that when I started writing go I wrote a Constructor for everything m and I think part of that stemmed from my history is",
    "start": "1433440",
    "end": "1440600"
  },
  {
    "text": "Ruby and Java and Java go like in some ways just sort of felt a little bit more like Java because it was typed and some",
    "start": "1440600",
    "end": "1446279"
  },
  {
    "text": "of that stuff so I think I just jumped into that mindset of I need to write these and then I don't know when but at",
    "start": "1446279",
    "end": "1453200"
  },
  {
    "text": "some point I kind of realized that a lot of these Constructors were not useful you know I didn't need them at all so I",
    "start": "1453200",
    "end": "1459279"
  },
  {
    "text": "started sort of taking a step back and asking myself do I really need it for this type like or why don't I just",
    "start": "1459279",
    "end": "1464440"
  },
  {
    "text": "expose these fields and let the developer change you know set them so I don't really have like a specific yes",
    "start": "1464440",
    "end": "1469799"
  },
  {
    "text": "you should use them no you shouldn't type thing for me it was just stepping back and deciding you know Case by case",
    "start": "1469799",
    "end": "1476919"
  },
  {
    "text": "is it necessary and if it wasn't necessary I just tried not to do it because it didn't seem worth the effort the other thing that I would add is that",
    "start": "1476919",
    "end": "1483559"
  },
  {
    "text": "if you are using a Constructor I think the common approach that people take at first is to write like if you're writing",
    "start": "1483559",
    "end": "1489440"
  },
  {
    "text": "a thing you write like a new thing function that creates it and I think there's a lot of times where you can",
    "start": "1489440",
    "end": "1494640"
  },
  {
    "text": "make your Constructor function a little bit more clear as to what it's doing um the database SQL package is a good",
    "start": "1494640",
    "end": "1500559"
  },
  {
    "text": "example where you call SQL do open and it returns a DB instance I think that makes way more sense than SQL newb which",
    "start": "1500559",
    "end": "1508559"
  },
  {
    "text": "isn't really clear what it's doing so if it could be like a verb you think that if you can like explain what",
    "start": "1508559",
    "end": "1514840"
  },
  {
    "text": "it's doing I think that makes more sense and you're allowed to have multiple names in that case because you you might",
    "start": "1514840",
    "end": "1520720"
  },
  {
    "text": "construct something but doing performing different actions Pizza yeah like in any language",
    "start": "1520720",
    "end": "1527200"
  },
  {
    "text": "there's not like one answer that is generally applicable right um sometimes",
    "start": "1527200",
    "end": "1532279"
  },
  {
    "text": "Constructors make sense sometimes they don't the one thing that I think is important to like understand when thinking about this question is this",
    "start": "1532279",
    "end": "1539480"
  },
  {
    "text": "this fact of go that except for a very few exceptional circumstances it's always possible to to construct a type",
    "start": "1539480",
    "end": "1547640"
  },
  {
    "text": "the zero value of a type right basically there's no way to avoid allowing your callers to do that right so the zero",
    "start": "1547640",
    "end": "1553960"
  },
  {
    "text": "value a type is always something that can exist um okay so with that mind it would be cool if the zero value of the",
    "start": "1553960",
    "end": "1560399"
  },
  {
    "text": "type were like useful right that's also like a proverb if you can create a type",
    "start": "1560399",
    "end": "1565440"
  },
  {
    "text": "where that is true then like you know all equal maybe that's a good idea you don't need a Constructor you can just",
    "start": "1565440",
    "end": "1570480"
  },
  {
    "text": "like use it in a useful way without needing to initialize it of course that's not always possible if it's not",
    "start": "1570480",
    "end": "1576960"
  },
  {
    "text": "possible then it's probably better to use a Constructor because that gives you by convention control over what the um I",
    "start": "1576960",
    "end": "1586080"
  },
  {
    "text": "say by convention instead of like it's not enforceable by the compiler but it gives you some control over what the",
    "start": "1586080",
    "end": "1592480"
  },
  {
    "text": "the like the state will be in a way that like setting fields in the caller context doesn't",
    "start": "1592480",
    "end": "1598559"
  },
  {
    "text": "so PR and cons right PR and cons no single answer have you ever written a",
    "start": "1598559",
    "end": "1603679"
  },
  {
    "text": "Destructor it's not possible in go it's finalizers but that's something else I guess yeah have you ever written of a",
    "start": "1603679",
    "end": "1609919"
  },
  {
    "text": "finalizer no I haven't I have but it was almost always a mistake okay I'm glad I have now but",
    "start": "1609919",
    "end": "1618679"
  },
  {
    "text": "that's interesting about the zero value there are some examples like the btes buffer you can just kind of say I want a",
    "start": "1618679",
    "end": "1624720"
  },
  {
    "text": "bites buffer and it's and you can start using it immediately U one of the things you get with Constructors is you can you",
    "start": "1624720",
    "end": "1631600"
  },
  {
    "text": "can take in required arguments uh into the Constructor so then of course it's not possible to get the type according",
    "start": "1631600",
    "end": "1637840"
  },
  {
    "text": "to the API without providing those uh values of course the this the zero value is always there I think one of the other",
    "start": "1637840",
    "end": "1645080"
  },
  {
    "text": "counter things I hear is that in a way you're hiding what's happening you could",
    "start": "1645080",
    "end": "1650799"
  },
  {
    "text": "be spinning up go routines you could be allocating all kinds of memory inside a Constructor and by avoiding a",
    "start": "1650799",
    "end": "1656760"
  },
  {
    "text": "Constructor it makes it very clear what's happening if you're asking your user to create the instances they see ex",
    "start": "1656760",
    "end": "1663919"
  },
  {
    "text": "exactly everything that's kind of going on but to be honest I think the for me the convenience I I went through a",
    "start": "1663919",
    "end": "1670960"
  },
  {
    "text": "similar Evolution where I just I used to always create them and then I went off it and I started to just try and get the",
    "start": "1670960",
    "end": "1676519"
  },
  {
    "text": "zero value to be use F and then almost all of those types evolved eventually on",
    "start": "1676519",
    "end": "1682200"
  },
  {
    "text": "their own into basically needing a Constructor so yes but for me it depends on the case which doesn't help for",
    "start": "1682200",
    "end": "1688919"
  },
  {
    "text": "services and things like this if you've got these sort of service level object structs and things then I do tend to do",
    "start": "1688919",
    "end": "1695600"
  },
  {
    "text": "it because usually they have dependencies and it's kind of a nice way to tell that story but yeah it depends",
    "start": "1695600",
    "end": "1701360"
  },
  {
    "text": "if I was building some lower level thing or something you know that that had more",
    "start": "1701360",
    "end": "1706399"
  },
  {
    "text": "of a data structure kind of component to it I think I'd probably think maybe",
    "start": "1706399",
    "end": "1711799"
  },
  {
    "text": "differently what do you think about those the the options as well a way of customizing things by passing in little",
    "start": "1711799",
    "end": "1718760"
  },
  {
    "text": "option functions which can then run and modify things functional options is a configuration pattern right yeah right",
    "start": "1718760",
    "end": "1726200"
  },
  {
    "text": "what do you think of those I can start by saying that I don't like builders",
    "start": "1726200",
    "end": "1731559"
  },
  {
    "text": "that chain just and go they just don't feel right to me half the time I think",
    "start": "1731559",
    "end": "1736640"
  },
  {
    "text": "they're just I I don't know it probably comes down to like I've been bitten by error cases where like one of the ways",
    "start": "1736640",
    "end": "1741919"
  },
  {
    "text": "they'll handle errors in a builder pattern is they'll have the created object have like an error field and",
    "start": "1741919",
    "end": "1747200"
  },
  {
    "text": "you're expected to check it once you built it right um and I think it's really easy to miss that whereas if you use functional options instead it's much",
    "start": "1747200",
    "end": "1754279"
  },
  {
    "text": "much easier to make your Constructor actually return the thing and an error and you you know clearly what happened",
    "start": "1754279",
    "end": "1760960"
  },
  {
    "text": "mhm that's a good point actually if in creating or in constructing the thing if",
    "start": "1760960",
    "end": "1766679"
  },
  {
    "text": "something could error that is probably a case for having a Constructor isn't it yeah I agree we're all nodding our heads",
    "start": "1766679",
    "end": "1773440"
  },
  {
    "text": "for people who can't see us yeah and even for the builders that you were talking about what do you if something",
    "start": "1773440",
    "end": "1779600"
  },
  {
    "text": "in the middle of the chain errors does everything else become a no operation",
    "start": "1779600",
    "end": "1784640"
  },
  {
    "text": "but what if some of the parameters that were passed actually called the function or stuff like that and in that case do",
    "start": "1784640",
    "end": "1790360"
  },
  {
    "text": "you just return the error at the end and how do you know what was executed the",
    "start": "1790360",
    "end": "1795799"
  },
  {
    "text": "ones I've seen that that have done it well with those fluent apis they just change state they're basically just",
    "start": "1795799",
    "end": "1801480"
  },
  {
    "text": "changing internal state in a controlled way they can't error you know so that's why and then usually then there's an",
    "start": "1801480",
    "end": "1807240"
  },
  {
    "text": "operation at the end which is the big operation and that one will return an error potentially um but they they do",
    "start": "1807240",
    "end": "1814039"
  },
  {
    "text": "make testing hard or they can make testing hard if you want to stub things out or you know have some kind of",
    "start": "1814039",
    "end": "1820880"
  },
  {
    "text": "abstraction on that stuff they can get in the way a little bit since they're returning the concrete type often so you",
    "start": "1820880",
    "end": "1827080"
  },
  {
    "text": "can't do the trick of creating your own test interface um to you know in order to provide different mechanisms for it",
    "start": "1827080",
    "end": "1833640"
  },
  {
    "text": "or different implementation right did the one good use of builders that I've seen and",
    "start": "1833640",
    "end": "1839919"
  },
  {
    "text": "recently I had to uh use this was for security reasons like we wanted to make",
    "start": "1839919",
    "end": "1845200"
  },
  {
    "text": "sure that a certain object was constructed in a precise Way by passing ARS in a certain order and nothing would",
    "start": "1845200",
    "end": "1851320"
  },
  {
    "text": "ever happen out of order so basically in the middle of the chain you would call a",
    "start": "1851320",
    "end": "1856360"
  },
  {
    "text": "certain function that would return a new type and on that one you could specify more stuff so basically you returned",
    "start": "1856360",
    "end": "1862679"
  },
  {
    "text": "types that were not the entire thing but in every phase you you had to specify some things and then you had to move on",
    "start": "1862679",
    "end": "1869159"
  },
  {
    "text": "to the next stage how did you name those types that sounds like a nightmare I we",
    "start": "1869159",
    "end": "1874559"
  },
  {
    "text": "still have to decide yeah that that doesn't sound like an easy problem because they're all the same thing he's",
    "start": "1874559",
    "end": "1880039"
  },
  {
    "text": "like we started this six months ago and we still haven't decided it's just going to be one two three in it I bet step one",
    "start": "1880039",
    "end": "1886480"
  },
  {
    "text": "this issue was open a month ago and we haven't decided on the names yet so yeah you got the problem with that yeah wait",
    "start": "1886480",
    "end": "1893679"
  },
  {
    "text": "I'm trying to understand so you have like a a thing at a high level which is like in the end a sequence of substeps",
    "start": "1893679",
    "end": "1901519"
  },
  {
    "text": "or something like that right yeah and you're using the Builder pattern you're modeling the substeps of different types and you're using the Builder pattern to",
    "start": "1901519",
    "end": "1907840"
  },
  {
    "text": "like move from one substep to the next is that right yeah basically I can give you the concrete example we are building",
    "start": "1907840",
    "end": "1915120"
  },
  {
    "text": "a framework to develop web application and when you set up your entire server you register handlers after you have",
    "start": "1915120",
    "end": "1921880"
  },
  {
    "text": "registered handlers you're supposed to register plugins that is something that will intercept requests and responses",
    "start": "1921880",
    "end": "1927679"
  },
  {
    "text": "for security reasons uh most of the logic will just be in handlers and then after you're done you start a server and",
    "start": "1927679",
    "end": "1933320"
  },
  {
    "text": "at that point you are not supposed to change nor the handlers not the plugins anymore and VI Versa when you install a",
    "start": "1933320",
    "end": "1940320"
  },
  {
    "text": "plug-in is too late to register a Handler at that point and um we could do this by panicking if you do did things",
    "start": "1940320",
    "end": "1947120"
  },
  {
    "text": "out of order and this is still on the plate but we found out that checking this a compile time like making sure",
    "start": "1947120",
    "end": "1952760"
  },
  {
    "text": "that if you code compiles you you did stuff in the right order felt like a good thing to",
    "start": "1952760",
    "end": "1958919"
  },
  {
    "text": "provide I've genuinely never seen that as an example in go I would love to have a deeper conversation about this because",
    "start": "1958919",
    "end": "1965120"
  },
  {
    "text": "I have many many more questions that are not I guess appropriate to this to this to this call but okay let's see yeah we",
    "start": "1965120",
    "end": "1971840"
  },
  {
    "text": "can discuss it later interesting one um yeah just maybe quickly on functional options uh I really like them for a long",
    "start": "1971840",
    "end": "1978760"
  },
  {
    "text": "time um but another like again to like think about the actual property of the",
    "start": "1978760",
    "end": "1984600"
  },
  {
    "text": "language or the the invariant that they encode it's like you can always if you're using functional options your user can always not pass any right that",
    "start": "1984600",
    "end": "1991279"
  },
  {
    "text": "is that is a valid state which means that functional options are always like",
    "start": "1991279",
    "end": "1996519"
  },
  {
    "text": "you can always create a zero value for a type in a sense right if by not passing any options which means that they're",
    "start": "1996519",
    "end": "2003000"
  },
  {
    "text": "good when it's rare that you need to change anything away from the default value right and when you do you only",
    "start": "2003000",
    "end": "2009960"
  },
  {
    "text": "want to specif one or two things that are different um so if your if your type has like these semantics then they can",
    "start": "2009960",
    "end": "2016240"
  },
  {
    "text": "be good but with that said I rarely have types that work that way and when I do",
    "start": "2016240",
    "end": "2021799"
  },
  {
    "text": "um it's often equally easy to configure them in a different way this has been sort of my experience so uh these days I",
    "start": "2021799",
    "end": "2028159"
  },
  {
    "text": "don't really use them anymore I think the way they kind of like I don't know pollute or change the go dock for a",
    "start": "2028159",
    "end": "2034880"
  },
  {
    "text": "package or like make it slightly hard hard to understand like um outweighs the",
    "start": "2034880",
    "end": "2040480"
  },
  {
    "text": "benefits that they that they give you okay well uh moving on we have another",
    "start": "2040480",
    "end": "2046240"
  },
  {
    "text": "question here from data charmer and I'm going to paraphrase this but it's basically saying you know how when you",
    "start": "2046240",
    "end": "2052480"
  },
  {
    "text": "pause dates in go that's weird isn't it this magic date that is kind of uh you",
    "start": "2052480",
    "end": "2059358"
  },
  {
    "text": "know it's Monday and it's January it's like a really specific time why is it",
    "start": "2059359",
    "end": "2064760"
  },
  {
    "text": "like that and do you think it's weird I'm so confused by questions like this",
    "start": "2064760",
    "end": "2070480"
  },
  {
    "text": "I'm so confused why because like everything in a language is is like they made a lot of decisions right why is it",
    "start": "2070480",
    "end": "2077358"
  },
  {
    "text": "funk and not fun or function right why are declarations in the order they're in",
    "start": "2077359",
    "end": "2082560"
  },
  {
    "text": "why can you do VAR blocking with parenthesis like can you not do const of B like there's so many things that just",
    "start": "2082560",
    "end": "2088839"
  },
  {
    "text": "are right and so like you just accept it it's just something you have to learn right it's just the law of physics I",
    "start": "2088839",
    "end": "2094480"
  },
  {
    "text": "would say that's beautiful actually that's one of things I like the most about the date uh stuffing go because",
    "start": "2094480",
    "end": "2100960"
  },
  {
    "text": "when you think about passing a date usually you have an example in mind it's like I I've tried to use other libraries",
    "start": "2100960",
    "end": "2108320"
  },
  {
    "text": "especially Java ones for date parsing they're not intuitive at all yeah the go",
    "start": "2108320",
    "end": "2113880"
  },
  {
    "text": "one is odd but once you've understood it it's very easy to use it's like you just write a date in the form what you expect",
    "start": "2113880",
    "end": "2120520"
  },
  {
    "text": "it to come which is this is like user Centric apis it's it's not hard it can't",
    "start": "2120520",
    "end": "2127520"
  },
  {
    "text": "be the it's not your date is it it's a you have to use the right values in each",
    "start": "2127520",
    "end": "2132560"
  },
  {
    "text": "slot essentially and they're numbered aren't there it's basically counts up if you notice they yeah exactly yeah but",
    "start": "2132560",
    "end": "2138839"
  },
  {
    "text": "that is odd but you have to remember one two three doesn't help that the example they tend to give doesn't show it",
    "start": "2138839",
    "end": "2144640"
  },
  {
    "text": "obviously that it's counting up yeah like the one they give is like Monday I think it's usually like Monday January",
    "start": "2144640",
    "end": "2150880"
  },
  {
    "text": "2nd 045 the way it's put there you're like you don't realize that it's really going",
    "start": "2150880",
    "end": "2156160"
  },
  {
    "text": "1 2 3 4 5 because like 15 well that's 3 but like people don't quite realize that",
    "start": "2156160",
    "end": "2161720"
  },
  {
    "text": "it's 300 p.m. like that you throws them off and mmdd y y y these you know that",
    "start": "2161720",
    "end": "2168040"
  },
  {
    "text": "style kind of um I feel like that is used in more places what do you think I",
    "start": "2168040",
    "end": "2174560"
  },
  {
    "text": "I think the hard part is most mmdds have like capital M and lowercase M and they mean different things true and you still",
    "start": "2174560",
    "end": "2180319"
  },
  {
    "text": "have to look something up so I think at the end of the day the short answer is that you're going to have to look something up looking up specific date is",
    "start": "2180319",
    "end": "2187760"
  },
  {
    "text": "really not that big of a deal compared to looking something else up and there's tooling that makes that easier yeah like",
    "start": "2187760",
    "end": "2194480"
  },
  {
    "text": "I I always have to look up the surf Time stuff personally I never remember that",
    "start": "2194480",
    "end": "2199880"
  },
  {
    "text": "okay well I I'm with the question on that I think that is a bit weird but the answer is that's just the way it is this",
    "start": "2199880",
    "end": "2207079"
  },
  {
    "text": "actually could be quite easy we could just Hammer through these with that if that's our answer it's just the way it is yeah um the next one actually which",
    "start": "2207079",
    "end": "2213960"
  },
  {
    "text": "we got a couple of times is how come there is no enum or enumerators in go so",
    "start": "2213960",
    "end": "2219119"
  },
  {
    "text": "this is that thing in other languages where you get a kind of compiler time way of declaring a set of values that",
    "start": "2219119",
    "end": "2226960"
  },
  {
    "text": "are only valid for this particular type and uh you get kind of compile time help",
    "start": "2226960",
    "end": "2232520"
  },
  {
    "text": "there useful for if you've got say a status and you've only got four different statuses that are possible you",
    "start": "2232520",
    "end": "2238359"
  },
  {
    "text": "can make types give you kind of safety there what do you think about that because there is the Iota pattern which",
    "start": "2238359",
    "end": "2244319"
  },
  {
    "text": "is basically how we do it most of the time time what do you think about this it's the only feature that I'm missing",
    "start": "2244319",
    "end": "2250760"
  },
  {
    "text": "go like that is the one thing that I would add to go I would not add generics",
    "start": "2250760",
    "end": "2255960"
  },
  {
    "text": "I would not add many other things enm is the one thing that I miss yeah go ahead",
    "start": "2255960",
    "end": "2261880"
  },
  {
    "text": "Peter please disagree no I don't I just wanted to say it would be nice Definitely oh you've not disagreed I'm",
    "start": "2261880",
    "end": "2268240"
  },
  {
    "text": "sorry it's supposed to be controversial he didn't do it next one when we talk about Frameworks we'll get",
    "start": "2268240",
    "end": "2273319"
  },
  {
    "text": "into the get into the weeds okay but John you were going to say something something about it en I was going to say iotas terrify me because I always worry",
    "start": "2273319",
    "end": "2280200"
  },
  {
    "text": "that like somebody's going to insert a random one like in the middle of the Iota values and all of my code just going to break like every time I go to",
    "start": "2280200",
    "end": "2287280"
  },
  {
    "text": "use them I get terrified of that and I end up just like writing strings for everything cuz I'm like I know these are going to work if they're stored in a",
    "start": "2287280",
    "end": "2292839"
  },
  {
    "text": "database or something am I the only one that feels that way at times I'm also afraid of Iota I tend not to use",
    "start": "2292839",
    "end": "2299319"
  },
  {
    "text": "it to b i I use strings so the advice we give everybody we don't use well that's",
    "start": "2299319",
    "end": "2305920"
  },
  {
    "text": "the way that's the go way to do enums as I understand it but yeah the alternative is just to have constants with strings",
    "start": "2305920",
    "end": "2312280"
  },
  {
    "text": "or constants with integer values um you can still document them can't you you",
    "start": "2312280",
    "end": "2317680"
  },
  {
    "text": "can still describe it and usually if you use a prefix that's a quite a useful way HTTP status is an example they've got",
    "start": "2317680",
    "end": "2324720"
  },
  {
    "text": "all the status codes as constants and they've also done the HTTP methods which I don't know if we needed those but we",
    "start": "2324720",
    "end": "2331560"
  },
  {
    "text": "have them so you can do like HTTP do method get method post method patch but",
    "start": "2331560",
    "end": "2337119"
  },
  {
    "text": "that is weird yeah it's longer to type that than to type the the string right",
    "start": "2337119",
    "end": "2342280"
  },
  {
    "text": "it is but I don't know I I found that it doesn't bother me using it okay especially with auto completing",
    "start": "2342280",
    "end": "2348119"
  },
  {
    "text": "everything yeah right was like does it mean that we expect the get verb to",
    "start": "2348119",
    "end": "2353599"
  },
  {
    "text": "change from from get to another get because it's like that's here to stay I",
    "start": "2353599",
    "end": "2360839"
  },
  {
    "text": "don't know that feels weird yeah I probably wouldn't have done it but it's fine it's completely fine you could the",
    "start": "2360839",
    "end": "2366680"
  },
  {
    "text": "same argument for the status codes and frankly I find those to be much more readable especially because I don't know all the HTTP exactly that makes sense",
    "start": "2366680",
    "end": "2374920"
  },
  {
    "text": "because you read the words instead of number right I didn't actually know that the methods were defined in the htb",
    "start": "2374920",
    "end": "2381599"
  },
  {
    "text": "package oh EXA there you go so you don't use them it at times I feel weird not using them because I'm like somebody's",
    "start": "2381599",
    "end": "2387000"
  },
  {
    "text": "going to be like why aren't you using constants like why are you hardcoding strings in here and even with status codes I'll occasionally write 200",
    "start": "2387000",
    "end": "2393000"
  },
  {
    "text": "because I'm like if you're writing a web service and you don't know what 200 means you you probably need to go figure that out first that's true 404 is",
    "start": "2393000",
    "end": "2400000"
  },
  {
    "text": "another one that's actually seeing status. not found to me isn't as clear as 404 there's a couple that are like",
    "start": "2400000",
    "end": "2406880"
  },
  {
    "text": "that like you there's just a couple that it's like if you don't know these ones then you should probably figure them out but then there's other ones where okay I",
    "start": "2406880",
    "end": "2413720"
  },
  {
    "text": "get it this one's not quite as clear so I I have mixed feelings on that at times but I tend to just use the the written",
    "start": "2413720",
    "end": "2419720"
  },
  {
    "text": "out you know status okay or whatever just because I want all my code to be consistent but sometimes I'm like on the",
    "start": "2419720",
    "end": "2426119"
  },
  {
    "text": "fence there yeah if I want to say like as a string like post posters will post",
    "start": "2426119",
    "end": "2432119"
  },
  {
    "text": "you a t-shirt I'll use the post con there so I go the other way and use it way too much where you shouldn't use it",
    "start": "2432119",
    "end": "2438599"
  },
  {
    "text": "that's a joke by the way any beginners don't do that be crazy tell tell jokes",
    "start": "2438599",
    "end": "2443839"
  },
  {
    "text": "or yeah I don't tell jokes it's r a tricky game it's a tricky game",
    "start": "2443839",
    "end": "2448880"
  },
  {
    "text": "especially when your editors are not kind to you in the edit as tends to be the case for me okay so shifting gears a",
    "start": "2448880",
    "end": "2456440"
  },
  {
    "text": "little uh when should we inject dependencies maybe we could just have a",
    "start": "2456440",
    "end": "2462240"
  },
  {
    "text": "quick overview for of what we mean by dependency injection and then we could",
    "start": "2462240",
    "end": "2467280"
  },
  {
    "text": "we could talk a little bit about that who wants to tell us what what is a dependency injection if you mean when should you",
    "start": "2467280",
    "end": "2473440"
  },
  {
    "text": "pass dependencies to things that need them uh the answer is always never not yes but what about um like an",
    "start": "2473440",
    "end": "2481119"
  },
  {
    "text": "abstracted do do you believe in any sort of abstracted dependency injection mechanisms or is it just a case of pass",
    "start": "2481119",
    "end": "2488880"
  },
  {
    "text": "arguments because then you get all the compiler help I I like to have a struct",
    "start": "2488880",
    "end": "2494839"
  },
  {
    "text": "uh when I build web service especially that keeps all the dependencies that need to be injected so it's like if I",
    "start": "2494839",
    "end": "2500880"
  },
  {
    "text": "need Clockwork just to have a static time that I can measure in my test um is",
    "start": "2500880",
    "end": "2506800"
  },
  {
    "text": "fine to pass to inject time or like inject a random Source uh like have a crypto safe random Source a startup uh",
    "start": "2506800",
    "end": "2514319"
  },
  {
    "text": "on the in the real server and one that is unsafe and predictable in tests but I",
    "start": "2514319",
    "end": "2520119"
  },
  {
    "text": "despise with all my strength uh dependency injection Frameworks I do not",
    "start": "2520119",
    "end": "2526280"
  },
  {
    "text": "like them and that that's what a lot of people I guess mean when they ask about dependency injection they mean like the",
    "start": "2526280",
    "end": "2531720"
  },
  {
    "text": "the thing that sort of figures out your dependency graph for you based on like annotations or something like this I",
    "start": "2531720",
    "end": "2538000"
  },
  {
    "text": "agree I understand some circumstances where they might deliver value but I think they are so rare that anyone who's",
    "start": "2538000",
    "end": "2546720"
  },
  {
    "text": "asking the question shouldn't be using it basically yeah I think I think I'd agree",
    "start": "2546720",
    "end": "2552319"
  },
  {
    "text": "with that um you can't go wrong with just having fields and setting them and",
    "start": "2552319",
    "end": "2557599"
  },
  {
    "text": "if if you do have Constructors and and there's a service that relies on other services that you have as different",
    "start": "2557599",
    "end": "2563240"
  },
  {
    "text": "structs then you can take those as arguments or have them like in the struct on the type or whatever um and",
    "start": "2563240",
    "end": "2569960"
  },
  {
    "text": "that's very clear and sometimes when you're then adding something when you want to add a new thing there is then",
    "start": "2569960",
    "end": "2576800"
  },
  {
    "text": "some Plumbing to go and do and that's the bit that because it's repetitive we want to dry that up naturally I think as",
    "start": "2576800",
    "end": "2583720"
  },
  {
    "text": "programmers that's such an interesting point right because you you said there's some Plumbing to do but I I see that",
    "start": "2583720",
    "end": "2589240"
  },
  {
    "text": "work as like so virtuous right because it's not just you doing like this rot",
    "start": "2589240",
    "end": "2594280"
  },
  {
    "text": "mechanical stuff this is you expressing what is now a new truth in your application right there's this thing",
    "start": "2594280",
    "end": "2600960"
  },
  {
    "text": "which is now being used in this sort of like dependency chain that is now like visible right someone new to the code is",
    "start": "2600960",
    "end": "2607319"
  },
  {
    "text": "going to see that that's there and it's it like it's it's needed for these things and like that's so important to",
    "start": "2607319",
    "end": "2613200"
  },
  {
    "text": "make explicit right so that's so it's very rewarding and usually it's quite easy work too it's just a case of",
    "start": "2613200",
    "end": "2619760"
  },
  {
    "text": "looking at another service going and looking where that's wired up and doing the same so it's quite easy but you're",
    "start": "2619760",
    "end": "2626200"
  },
  {
    "text": "right it is quite rewarding um there is something there is something very satisfying when you get to the point of",
    "start": "2626200",
    "end": "2632520"
  },
  {
    "text": "actually exposing that service it does feel like a bit of a milestone that's a good point right and it allows you to do more",
    "start": "2632520",
    "end": "2638079"
  },
  {
    "text": "granular things like independency injection Frameworks one thing that really happens is that they compute the",
    "start": "2638079",
    "end": "2643160"
  },
  {
    "text": "graph and to serve a response they will they will need to build up the entire graph and construct most of the things",
    "start": "2643160",
    "end": "2648880"
  },
  {
    "text": "even if you're not going to use them because they don't know if you're going to use them uh but one thing that I like to do in my web service especially if I",
    "start": "2648880",
    "end": "2655599"
  },
  {
    "text": "use um cloud services I use sync on everywhere to construct my stuff so I",
    "start": "2655599",
    "end": "2660680"
  },
  {
    "text": "know that stuff will be constructed only if I actually need it and it's very hard to do that if you just inject magical",
    "start": "2660680",
    "end": "2666079"
  },
  {
    "text": "things that depend on other magical things yeah like I like to do the things that I need to do not more right so by",
    "start": "2666079",
    "end": "2673640"
  },
  {
    "text": "default try not to do anything and then when it's needed and that that comes down to also like the environment in",
    "start": "2673640",
    "end": "2679520"
  },
  {
    "text": "which you're going to deploy the code because if you put that into a situation where uh it scales down to zero",
    "start": "2679520",
    "end": "2686359"
  },
  {
    "text": "instances automatically very often um you're probably going to get a big saving with only doing things on demand",
    "start": "2686359",
    "end": "2692800"
  },
  {
    "text": "um whereas if you've got services that run for a long time or they're just permanently running maybe it's easier to",
    "start": "2692800",
    "end": "2699240"
  },
  {
    "text": "just get all the work done up front so you know it's going to succeed and then you can kind of go from there I think",
    "start": "2699240",
    "end": "2705200"
  },
  {
    "text": "yeah those kinds of decisions I think matter more for sure this type of question is hard for me because I agree",
    "start": "2705200",
    "end": "2712240"
  },
  {
    "text": "with you guys that most of the time when it's asked it's somebody coming from like a Java background or something",
    "start": "2712240",
    "end": "2717520"
  },
  {
    "text": "where they're expecting to inject things with a framework but on the off chance they're asking like when is it better to",
    "start": "2717520",
    "end": "2723960"
  },
  {
    "text": "just put a you know an actual type embedded into a struct versus or not necessarily embedded but you know as a",
    "start": "2723960",
    "end": "2729920"
  },
  {
    "text": "field in the struct OR to like put an interface instead I think for me it just comes down to are you actually going to",
    "start": "2729920",
    "end": "2737359"
  },
  {
    "text": "you replace this with something else at some point either in your code or in your tests or something and if so then the interface makes more sense but if",
    "start": "2737359",
    "end": "2743200"
  },
  {
    "text": "you're not ever replacing it just start with the struct it's really not that hard to change later why why is there this natural",
    "start": "2743200",
    "end": "2751160"
  },
  {
    "text": "aversion to this do you think that there's something about the fact that just setting field on a struct feels too",
    "start": "2751160",
    "end": "2758200"
  },
  {
    "text": "simple and too easy and therefore not professional in some way especially if people are used to Big Enterprise",
    "start": "2758200",
    "end": "2765000"
  },
  {
    "text": "Frameworks in the past I think some people just don't like having a main file that has all this like setup of",
    "start": "2765000",
    "end": "2771720"
  },
  {
    "text": "like okay now I have to initialize this thing and I got to assign it to all these different structs that need it um whereas if you come from like a",
    "start": "2771720",
    "end": "2777960"
  },
  {
    "text": "framework you know like a rails or whatever you don't do any of that it like does all that you whatever",
    "start": "2777960",
    "end": "2783800"
  },
  {
    "text": "assignment needs to happen everything happens automatically and you just access the things you need so I think sometimes people are looking",
    "start": "2783800",
    "end": "2790119"
  },
  {
    "text": "for this essentially they want to have some like Global DB instance that they can connect to and they don't want to have to inject it anywhere they just",
    "start": "2790119",
    "end": "2796359"
  },
  {
    "text": "want to be able to access it and I think they don't quite realize that down the road that could potentially introduce",
    "start": "2796359",
    "end": "2802040"
  },
  {
    "text": "some problems yeah I feel like people feel like that until they need to debug it",
    "start": "2802040",
    "end": "2808319"
  },
  {
    "text": "like they like the magic until they need to uh find what's wrong because for me having everything magically injected was",
    "start": "2808319",
    "end": "2815440"
  },
  {
    "text": "beautiful until I had to find out who was constructing that yeah that's true I think if any anytime you use a pre-built",
    "start": "2815440",
    "end": "2823000"
  },
  {
    "text": "framework or an abstraction or something you then are kind of um you know tied to",
    "start": "2823000",
    "end": "2828720"
  },
  {
    "text": "its decisions and if if you then have to fight it it can get very unpleasant and",
    "start": "2828720",
    "end": "2833880"
  },
  {
    "text": "that's I think a lot of people I hear talking about avoiding Frameworks are coming at it because they've been burned",
    "start": "2833880",
    "end": "2840520"
  },
  {
    "text": "so many times you know um and so that's why we talk so much about this avoiding",
    "start": "2840520",
    "end": "2845839"
  },
  {
    "text": "early abstractions I think it was Ben Johnson on Twitter made a good point about this which and he actually made",
    "start": "2845839",
    "end": "2852480"
  },
  {
    "text": "the counter point which was um sometimes the right abstraction basically is is",
    "start": "2852480",
    "end": "2858319"
  },
  {
    "text": "amazing is so powerful that if you do find that abstraction then you really",
    "start": "2858319",
    "end": "2863880"
  },
  {
    "text": "can enable a lot of you know unlock a lot of potential enable lots of people to do things um that's why I think",
    "start": "2863880",
    "end": "2870040"
  },
  {
    "text": "they're so attractive but they're a bit like the Holy Grail they're difficult to find I think the the Holy Grail is",
    "start": "2870040",
    "end": "2876839"
  },
  {
    "text": "difficult to find if I understand it anything else on that if not we have a question about in it which I want to put",
    "start": "2876839",
    "end": "2883160"
  },
  {
    "text": "to Peter I mean why you doing this well I know we're going to get a good answer",
    "start": "2883160",
    "end": "2889440"
  },
  {
    "text": "what what about in it what when should you use in it Peter so let's let's as",
    "start": "2889440",
    "end": "2894920"
  },
  {
    "text": "we've done a lot in this episode go back to like what are the mechanics of this thing right what what are the truths of",
    "start": "2894920",
    "end": "2901040"
  },
  {
    "text": "this part of the language well and it is a function that runs when you import package or uh runs as part of program",
    "start": "2901040",
    "end": "2908000"
  },
  {
    "text": "startup and uh it's run before main starts and like a product of how it's",
    "start": "2908000",
    "end": "2915359"
  },
  {
    "text": "How It exists in a package all it has access to like by definition are the",
    "start": "2915359",
    "end": "2920559"
  },
  {
    "text": "package level con and variables and the package level declarations right it",
    "start": "2920559",
    "end": "2925680"
  },
  {
    "text": "doesn't have access to any state that isn't declared at a package level so and it by like design its only purpose is to",
    "start": "2925680",
    "end": "2932920"
  },
  {
    "text": "manipulate package Global state right that's the only reason it exists but you shouldn't have package Global state",
    "start": "2932920",
    "end": "2938799"
  },
  {
    "text": "right there is no in general you should try to avoid it I take it a step further I say you should actually never have any",
    "start": "2938799",
    "end": "2945799"
  },
  {
    "text": "uh and so therefore uh for me every uh instance of funit is a huge red flag",
    "start": "2945799",
    "end": "2951680"
  },
  {
    "text": "you're doing something in there which ought to be done somewhere else yeah I cone with that I would say",
    "start": "2951680",
    "end": "2958680"
  },
  {
    "text": "just avoid in it it's a bit too magic and anything that's too magic like that",
    "start": "2958680",
    "end": "2964920"
  },
  {
    "text": "becomes a later it's so fun when you're first doing it and it gets things working when you're writing it's fun but",
    "start": "2964920",
    "end": "2971960"
  },
  {
    "text": "yeah when it come to debug code and figure out what's going on that's just too magic and probably worth avoiding",
    "start": "2971960",
    "end": "2978920"
  },
  {
    "text": "John what you Rec mate so I guess my only caveat to that would be like let's",
    "start": "2978920",
    "end": "2985359"
  },
  {
    "text": "say you're writing a SQL driver and the pretty much the convention at this point",
    "start": "2985359",
    "end": "2990440"
  },
  {
    "text": "is to register your driver via in it and as much as I wish that would change I think at this Point you're better off",
    "start": "2990440",
    "end": "2996400"
  },
  {
    "text": "just doing it because that's the convention but I don't love it it's just one of those like because that's",
    "start": "2996400",
    "end": "3001880"
  },
  {
    "text": "convention at this point trying to change that is not worth the effort just just do it so this is that thing where",
    "start": "3001880",
    "end": "3007359"
  },
  {
    "text": "just by importing a package it it's in it function will register itself with",
    "start": "3007359",
    "end": "3013319"
  },
  {
    "text": "another package yes see what I mean about magic right and like this is a I think I",
    "start": "3013319",
    "end": "3018559"
  },
  {
    "text": "hope it's uncon controversial to say this is like a design choice that was made in like preview one of the language",
    "start": "3018559",
    "end": "3024599"
  },
  {
    "text": "that there would be this global registry and package DB and this would be basically the way to to like use it and",
    "start": "3024599",
    "end": "3030079"
  },
  {
    "text": "like I hope it's uncontroversial to say that this pattern has like not stood the test of time I this is not a good",
    "start": "3030079",
    "end": "3035960"
  },
  {
    "text": "pattern right and so to use the global registry in uh package DB you have to do it this way and that that's true uh and",
    "start": "3035960",
    "end": "3043119"
  },
  {
    "text": "it's too bad but if you're writing your own package do not copy this pattern right this is not the way to do",
    "start": "3043119",
    "end": "3048930"
  },
  {
    "text": "[Music]",
    "start": "3048930",
    "end": "3054440"
  },
  {
    "text": "things what's up Gophers do you have an app in",
    "start": "3054440",
    "end": "3061040"
  },
  {
    "text": "production that's slower than you like of course you do I know but seriously is the performance of your apps all over",
    "start": "3061040",
    "end": "3067079"
  },
  {
    "text": "the place sometimes fast sometimes slow do you even know why well with data dog",
    "start": "3067079",
    "end": "3073119"
  },
  {
    "text": "you will you can troubleshoot your app's performance with end to end tracing and in one click correlate those go traces",
    "start": "3073119",
    "end": "3078920"
  },
  {
    "text": "with related logs and metrics you can also use data dog's detailed flame graphs to identify bottlenecks and",
    "start": "3078920",
    "end": "3085520"
  },
  {
    "text": "latency in your apps start tracking the performance of your apps today with a free trial at datto dog.com gotime and",
    "start": "3085520",
    "end": "3091960"
  },
  {
    "text": "here's a bonus if you sign up for a trial and install the agent dayto dog will send you a free t-shirt that's a",
    "start": "3091960",
    "end": "3097119"
  },
  {
    "text": "nice bonus once again datto dog.com",
    "start": "3097119",
    "end": "3101838"
  },
  {
    "text": "[Music]",
    "start": "3107010",
    "end": "3113690"
  },
  {
    "text": "gotime [Music]",
    "start": "3114359",
    "end": "3124920"
  },
  {
    "text": "I think probably our final question this is going to be a big meaty one we get this a lot I certainly get this a lot",
    "start": "3124920",
    "end": "3132240"
  },
  {
    "text": "and actually turns out to be a very difficult one to answer but we're going to do our best or your money back it's",
    "start": "3132240",
    "end": "3139839"
  },
  {
    "text": "free uh you get to you get to forget the ads that's the way we'll refund you you can just forget about all the ads from",
    "start": "3139839",
    "end": "3146520"
  },
  {
    "text": "this podcast the question is how do you structure go code you know and this is",
    "start": "3146520",
    "end": "3152760"
  },
  {
    "text": "something that people care a lot about it's the kind of thing that for beginners is very intimidating um you",
    "start": "3152760",
    "end": "3159799"
  },
  {
    "text": "know we know you can learn the mechanics of well this is how this is how packages work this is how you import packages but",
    "start": "3159799",
    "end": "3167160"
  },
  {
    "text": "what about when should we build a package when should it be in main um",
    "start": "3167160",
    "end": "3172200"
  },
  {
    "text": "what how should we structure this you know because of course of course a package is a folder and go so now we're",
    "start": "3172200",
    "end": "3178119"
  },
  {
    "text": "dealing with folder structures and things so this is the question I get a lot so I'm just going to ask you now how do you structure code Ino so I think we",
    "start": "3178119",
    "end": "3186520"
  },
  {
    "text": "can all agree on the general idea of creating a CMD or command folder and",
    "start": "3186520",
    "end": "3191880"
  },
  {
    "text": "inside of there sticking you your different main packages um and generally those just sort of initialize some State",
    "start": "3191880",
    "end": "3198520"
  },
  {
    "text": "and start the program um from there I think that's where it gets more",
    "start": "3198520",
    "end": "3203640"
  },
  {
    "text": "confusing for some people um you trying to figure out where to put the rest of the code and how it gets",
    "start": "3203640",
    "end": "3208680"
  },
  {
    "text": "organized so I'm just going to say let's assume we have that my general advice is stuff that I don't think people like to",
    "start": "3208680",
    "end": "3214400"
  },
  {
    "text": "hear but I really do think starting with a flat structure and waiting until you see a good way to break things up is the",
    "start": "3214400",
    "end": "3220200"
  },
  {
    "text": "best way to go um now I will say that I have shown people how to do MVC simply",
    "start": "3220200",
    "end": "3226040"
  },
  {
    "text": "because I didn't want them to think about it any longer I just wanted them to get their stuff up and going and I'm like later we can come back and figure",
    "start": "3226040",
    "end": "3232440"
  },
  {
    "text": "this out but for now your goal is just to write some code I think it gets asked so much because I think it's a something",
    "start": "3232440",
    "end": "3237720"
  },
  {
    "text": "that blocks people from moving forward and it shouldn't a lot of languages have this I guess Convention of all of the",
    "start": "3237720",
    "end": "3245559"
  },
  {
    "text": "project structures being roughly the same for the same type of project like if you're doing a web service in rubby",
    "start": "3245559",
    "end": "3251400"
  },
  {
    "text": "you're going to have this layout and the packages or whatever are going to be named after the architectural like",
    "start": "3251400",
    "end": "3257240"
  },
  {
    "text": "patterns you're using right MVC for example right controllers here blah blah blah but in go that's not really what we",
    "start": "3257240",
    "end": "3263160"
  },
  {
    "text": "do we have package and project structures that are basically reflective",
    "start": "3263160",
    "end": "3268559"
  },
  {
    "text": "of the domain of the thing we're implementing right not of the patterns we use not of the not of the the",
    "start": "3268559",
    "end": "3274000"
  },
  {
    "text": "scaffolding but of the specific types and entities in the domain of the",
    "start": "3274000",
    "end": "3280319"
  },
  {
    "text": "project that we're that we're working in and so it is always like idiomatically different from Project to project like",
    "start": "3280319",
    "end": "3285520"
  },
  {
    "text": "by definition what makes sense in one doesn't make sense in another not to say this is the only way to do things but this is what we tend to do and so yeah",
    "start": "3285520",
    "end": "3293200"
  },
  {
    "text": "there's no answer and that kind of like uh truth about what is idiomatic in the",
    "start": "3293200",
    "end": "3299160"
  },
  {
    "text": "language is extremely confusing for a lot of people and maybe the wrong choice as a result I don't I don't know but I",
    "start": "3299160",
    "end": "3305880"
  },
  {
    "text": "think that's the the main point I think it can be quite liberating though to say",
    "start": "3305880",
    "end": "3311520"
  },
  {
    "text": "that um there isn't really a way to do it which also means you can't really do it wrong it's what fits for your case",
    "start": "3311520",
    "end": "3319720"
  },
  {
    "text": "and if you're not sure yet then just sort of defer the defer it",
    "start": "3319720",
    "end": "3325599"
  },
  {
    "text": "worry about it later if you can it doesn't always work like that and of course if if you're talking teams at",
    "start": "3325599",
    "end": "3330720"
  },
  {
    "text": "scale I think that's a little bit different it's sometimes then worth",
    "start": "3330720",
    "end": "3335839"
  },
  {
    "text": "investing a bit of time and trying to do some kind of uh design that you know based on what you know about it but yeah",
    "start": "3335839",
    "end": "3343240"
  },
  {
    "text": "I personally follow the approach when I'm building something new of I just have a single folder it's got a main in",
    "start": "3343240",
    "end": "3349720"
  },
  {
    "text": "there and then all the types and I just use file name prefixes with underscores actually to group the functionality up",
    "start": "3349720",
    "end": "3358240"
  },
  {
    "text": "together and then have it all kind of together and then yeah later if if say",
    "start": "3358240",
    "end": "3364240"
  },
  {
    "text": "we have to deploy this other service in a different way or something changes like that then I've got a good reason to",
    "start": "3364240",
    "end": "3370960"
  },
  {
    "text": "go and have a look and make some changes but I'm doing it in an informed way I would say that the sentence that you",
    "start": "3370960",
    "end": "3377359"
  },
  {
    "text": "said is that since there is no scheme that we all adhere to uh you can't get",
    "start": "3377359",
    "end": "3382760"
  },
  {
    "text": "it wrong I would phrase it different they will say that since there is no mandatory structure you might have a",
    "start": "3382760",
    "end": "3388680"
  },
  {
    "text": "chance to get it right because so many times in a project I had less",
    "start": "3388680",
    "end": "3394520"
  },
  {
    "text": "optimistic right so many times in a project in another language I had to force my structure to adhere to the one",
    "start": "3394520",
    "end": "3400559"
  },
  {
    "text": "to the framewor or to the language that it made no sense for me and it was impossible for everyone to browse it",
    "start": "3400559",
    "end": "3405599"
  },
  {
    "text": "because if the structure is the same for every project it it gives no information right it's like sometimes when you visit",
    "start": "3405599",
    "end": "3412720"
  },
  {
    "text": "a package the package structure structure already gives you some information and in other languages you",
    "start": "3412720",
    "end": "3418480"
  },
  {
    "text": "lose that chance so do you think that within a project you might even have",
    "start": "3418480",
    "end": "3423760"
  },
  {
    "text": "contradictory kind of things you might have some things laid out one way and other parts laid out differently because",
    "start": "3423760",
    "end": "3430480"
  },
  {
    "text": "happens to suit yeah yeah I do because I try to the question how do structure your packages my answer is the best way",
    "start": "3430480",
    "end": "3437280"
  },
  {
    "text": "I can for the user and if I think that the user will benefit from one type for",
    "start": "3437280",
    "end": "3443039"
  },
  {
    "text": "example um uh being the exception of a rule that is General in that um in that framework in the thing I'm building I",
    "start": "3443039",
    "end": "3450039"
  },
  {
    "text": "will do that I will have that type stick out in another thing it's like cookies in HTTP they're a header but they're not",
    "start": "3450039",
    "end": "3457160"
  },
  {
    "text": "treated as a header in the HTP package and that makes it more so much more usable and I think there's a good reason",
    "start": "3457160",
    "end": "3463119"
  },
  {
    "text": "for that I I will say the one thing that I have seen is that people will try like Matt says there's no wrong way I guess",
    "start": "3463119",
    "end": "3469799"
  },
  {
    "text": "and I agree that you should go try things because truthfully if something is I'm going to say wrong in quotes not",
    "start": "3469799",
    "end": "3476359"
  },
  {
    "text": "really wrong but if something doesn't work it's easier to understand why it doesn't work when you actually build it",
    "start": "3476359",
    "end": "3482520"
  },
  {
    "text": "and and start to actually experience why it doesn't work and one of the common ones that you'll see is they'll end up with cyclical dependencies where they're",
    "start": "3482520",
    "end": "3489640"
  },
  {
    "text": "trying to import multiple packages this way and I'm curious to get your take on this but what I've been trying to advise",
    "start": "3489640",
    "end": "3496039"
  },
  {
    "text": "people lately when I talk to them about this is I I know nested folders don't really",
    "start": "3496039",
    "end": "3502280"
  },
  {
    "text": "matter for packages and go but I've basically said to try to think about your code almost as if you can only",
    "start": "3502280",
    "end": "3508039"
  },
  {
    "text": "import things going up the tree yeah like in in your you know in your packages so if you think about it that",
    "start": "3508039",
    "end": "3513760"
  },
  {
    "text": "way there's no way you can possibly have what do you mean by that John okay so let's say your root level you have like",
    "start": "3513760",
    "end": "3519520"
  },
  {
    "text": "an app like you just call your app package um underneath that you might have like a a SQL package that you're",
    "start": "3519520",
    "end": "3525200"
  },
  {
    "text": "writing your database stuff in and then inside of that you might have something even more specific like a a postgress",
    "start": "3525200",
    "end": "3530839"
  },
  {
    "text": "package or something right specific to database so like the postgress package can import the SQL package and it can",
    "start": "3530839",
    "end": "3536559"
  },
  {
    "text": "use whatever types in there and it can import the app package but but those ones can't actually import the postest package they have to Define an interface",
    "start": "3536559",
    "end": "3544039"
  },
  {
    "text": "that the postris implementation would be used to satisfy it's funny cuz I've done that the other way around where you can",
    "start": "3544039",
    "end": "3549720"
  },
  {
    "text": "only import packages that are inside and you do it the other way it's",
    "start": "3549720",
    "end": "3554920"
  },
  {
    "text": "the same kind of idea I think but I wonder if we're saying opposite things I'm kind of viewing it like it might be",
    "start": "3554920",
    "end": "3561160"
  },
  {
    "text": "similar I'm kind of viewing this as like you have a central object and it defines",
    "start": "3561160",
    "end": "3566400"
  },
  {
    "text": "sort of all your your it's like if you've ever read Ben Johnson's standard package layout it's the same idea you",
    "start": "3566400",
    "end": "3571559"
  },
  {
    "text": "have a central like app that defines interfaces and then as you expand you get more specific implementations and",
    "start": "3571559",
    "end": "3577599"
  },
  {
    "text": "you might still have interfaces there that get you know implemented by even more specifics um and it's a little bit",
    "start": "3577599",
    "end": "3583480"
  },
  {
    "text": "tricky because as you work your way out there's always going to be people who come up with some weird Edge case for instance if you're using like an omm",
    "start": "3583480",
    "end": "3590039"
  },
  {
    "text": "you'll be like well my app might have a user type but then my omm has a user type that's like representing what's in",
    "start": "3590039",
    "end": "3595520"
  },
  {
    "text": "the database and like which one's correct and I tend to treat that if you're going to use the orm at least at this point my suggestion is generally to",
    "start": "3595520",
    "end": "3602079"
  },
  {
    "text": "treat it like an API where your application might have you know a stripe",
    "start": "3602079",
    "end": "3607559"
  },
  {
    "text": "charge or some sort of like you know object representing that in internally but then the stripe API has their own",
    "start": "3607559",
    "end": "3613200"
  },
  {
    "text": "representation of it and you have to translate between the two to get it into your application and there are some",
    "start": "3613200",
    "end": "3618240"
  },
  {
    "text": "downsides to that like I don't think it's perfect but it tends to get you going in the right direction without you",
    "start": "3618240",
    "end": "3623799"
  },
  {
    "text": "know Cycles in your dependencies and things like that so Ben expressed this really well I think at one point he said",
    "start": "3623799",
    "end": "3628920"
  },
  {
    "text": "packages should stack and not interrelate right so there should be a clear like stacking effect relationship",
    "start": "3628920",
    "end": "3636440"
  },
  {
    "text": "between packages and this is another way of expressing in the like clean code or hexagonal architecture domain driven",
    "start": "3636440",
    "end": "3642039"
  },
  {
    "text": "design they call it the inward facing dependency role like your HTTP package can import your business logic but your",
    "start": "3642039",
    "end": "3648400"
  },
  {
    "text": "business logic cannot import the HTTP package right it should only go in One Direction yeah that's that is key and",
    "start": "3648400",
    "end": "3654799"
  },
  {
    "text": "that's that's when we talk about things going wrong or not working from a structure point of view is usually like",
    "start": "3654799",
    "end": "3661079"
  },
  {
    "text": "cyclical impes like you say John and those kinds of things are easier to avoid if you just have one folder so",
    "start": "3661079",
    "end": "3667880"
  },
  {
    "text": "that's another reason to you sort of just avoid those problems early by doing",
    "start": "3667880",
    "end": "3673039"
  },
  {
    "text": "that yeah but well it's that time of the",
    "start": "3673039",
    "end": "3678079"
  },
  {
    "text": "show where we do our unpopular [Music]",
    "start": "3678079",
    "end": "3683440"
  },
  {
    "text": "opinions [Music] you what I actually think should",
    "start": "3683440",
    "end": "3688760"
  },
  {
    "text": "probably [Music] leave",
    "start": "3688760",
    "end": "3695040"
  },
  {
    "text": "[Music] opion we did have an unpopular opinion",
    "start": "3695040",
    "end": "3702920"
  },
  {
    "text": "from Reddit and it said unpopular opinion this is from BK",
    "start": "3702920",
    "end": "3709799"
  },
  {
    "text": "limac and BK limac says the Simplicity of go makes it less useful in some use",
    "start": "3709799",
    "end": "3717520"
  },
  {
    "text": "cases which I think is probably probably has some truth in it you know there's a",
    "start": "3717520",
    "end": "3723400"
  },
  {
    "text": "there probably is a trade-off there what do you think well we don't have to debate that one do you have any other of",
    "start": "3723400",
    "end": "3728480"
  },
  {
    "text": "your own unpopular opinions I think we can I can quote Brad Fitz on this in",
    "start": "3728480",
    "end": "3734279"
  },
  {
    "text": "which he said that go does everything you need 100% of what you need 80% of",
    "start": "3734279",
    "end": "3739720"
  },
  {
    "text": "the time sounds like something from anoran",
    "start": "3739720",
    "end": "3745839"
  },
  {
    "text": "I mean which is true sometimes go doesn't cut it and that's fine like the",
    "start": "3745839",
    "end": "3752039"
  },
  {
    "text": "Simplicity and the benefit of having that hard opinionated language hard hard",
    "start": "3752039",
    "end": "3757160"
  },
  {
    "text": "very opinionated language um the benefit is overweights uh the downside of not",
    "start": "3757160",
    "end": "3762839"
  },
  {
    "text": "being able to write some code uh sometimes cool anyone any other",
    "start": "3762839",
    "end": "3767960"
  },
  {
    "text": "unpopular opinions well apparently qu uh Chris James has one but I don't remember",
    "start": "3767960",
    "end": "3774119"
  },
  {
    "text": "it in the the Reddit thread but he says if we don't say it he's going to Riot so",
    "start": "3774119",
    "end": "3779160"
  },
  {
    "text": "okay so we're not going to say it then obviously cuz we do not negotiate with terrorists on this show we never have",
    "start": "3779160",
    "end": "3786680"
  },
  {
    "text": "they might tolerate that kind of thing on JS party but not on this show maybe",
    "start": "3786680",
    "end": "3791839"
  },
  {
    "text": "um we can just do it though if you want as well Peter do you have one mate you didn't strike me as the type well",
    "start": "3791839",
    "end": "3798799"
  },
  {
    "text": "unpopular to who unpopular to who who what audience most most people I think",
    "start": "3798799",
    "end": "3804359"
  },
  {
    "text": "think it just has to be most people of% you to choose which people which",
    "start": "3804359",
    "end": "3810160"
  },
  {
    "text": "people yeah to like go people or to programmers in general I don't know any who am I",
    "start": "3810160",
    "end": "3816240"
  },
  {
    "text": "offending you can go this way you set the group and then you say the opinion",
    "start": "3816240",
    "end": "3821440"
  },
  {
    "text": "like you say this is unpopular in group and then you say yeah it's like targeted right I didn't know this was a tradition",
    "start": "3821440",
    "end": "3827839"
  },
  {
    "text": "actually so I I I wish I had prepared a little bit better because I'm sure I have lots of really offensive uh beliefs",
    "start": "3827839",
    "end": "3833480"
  },
  {
    "text": "in here somewhere so maybe it's better that you didn't no no no we we we'll drag up something and I'll try to keep",
    "start": "3833480",
    "end": "3839160"
  },
  {
    "text": "it piy in the Tweet format this is maybe a little bit easy but we that's fine we'll go with it I think that in almost",
    "start": "3839160",
    "end": "3846640"
  },
  {
    "text": "every case if you're choosing whether to bias in favor of more work for you as a",
    "start": "3846640",
    "end": "3853960"
  },
  {
    "text": "programmer if it makes the reader of your code do less work in like every",
    "start": "3853960",
    "end": "3859680"
  },
  {
    "text": "case you should make that bias optimize for read yeah yeah yeah and like the metric of how long it takes you to type",
    "start": "3859680",
    "end": "3866200"
  },
  {
    "text": "code into your editor is approximately never uh worth tracking like it's just",
    "start": "3866200",
    "end": "3872319"
  },
  {
    "text": "completely irrelevant and like uh anything that is is like a optimization for that metric is incorrect 100% of the",
    "start": "3872319",
    "end": "3880039"
  },
  {
    "text": "time great but what if I'm writing code that only I'll read and I'm very",
    "start": "3880039",
    "end": "3885880"
  },
  {
    "text": "sadistic don't bring us a Mist I don't know if you Ed the right word what JN",
    "start": "3885880",
    "end": "3891279"
  },
  {
    "text": "does in the privacy of his own dungeon is his own business in his code dungeon",
    "start": "3891279",
    "end": "3896880"
  },
  {
    "text": "gonna have a real treat for myself later when I try to read this well that's usually how how we",
    "start": "3896880",
    "end": "3903720"
  },
  {
    "text": "really learn these things is because we have actually done that and we hate ourselves for it so then we think oh",
    "start": "3903720",
    "end": "3909480"
  },
  {
    "text": "let's not do that again and then you do it again yeah yeah once I tried to reread some code the deeply used um map",
    "start": "3909480",
    "end": "3917960"
  },
  {
    "text": "filter reduce chains and I decided that it would have been easy to rewrite",
    "start": "3917960",
    "end": "3924119"
  },
  {
    "text": "trying to remember what he was trying to do rather than understand it don't do that to yourself or to anyone don't",
    "start": "3924119",
    "end": "3930839"
  },
  {
    "text": "don't do that kind of stuff yeah that's interesting because actually I like if if it's small enough I quite like that I",
    "start": "3930839",
    "end": "3937119"
  },
  {
    "text": "like that I can actually just rewrite it um you know because usually then it's better because you know there some time",
    "start": "3937119",
    "end": "3942880"
  },
  {
    "text": "has passed since I wrote it when I didn't know anything about it at the time I wrote it right you write the code",
    "start": "3942880",
    "end": "3950480"
  },
  {
    "text": "right on the third time right yeah if you look here",
    "start": "3950480",
    "end": "3955920"
  },
  {
    "text": "about being you know rain of sunshine in this podcast I think one of the like other",
    "start": "3955920",
    "end": "3962119"
  },
  {
    "text": "things to keep in mind there is just the fact that if you're going to rewrite it at least if it's for yourself sometimes",
    "start": "3962119",
    "end": "3968039"
  },
  {
    "text": "this is like I view it as I'll rewrite it better later but if I never actually get to rewriting it I saved myself some",
    "start": "3968039",
    "end": "3974319"
  },
  {
    "text": "time because it didn't really matter like I'm not looking at this code so there are cases where I'll just be like",
    "start": "3974319",
    "end": "3979640"
  },
  {
    "text": "I'll do this you know refactor it later but I think I consciously make that decision it's not",
    "start": "3979640",
    "end": "3984799"
  },
  {
    "text": "it's not like oh this took me less keystrokes it was like look this was just me getting the first version done",
    "start": "3984799",
    "end": "3989839"
  },
  {
    "text": "or some sometimes if it's like only going to live for a little while you just want to do one thing on your machine and you need to just crunch",
    "start": "3989839",
    "end": "3996799"
  },
  {
    "text": "through some data and then you're going to save it somewhere or something like that it's a one off you you sort of then",
    "start": "3996799",
    "end": "4002240"
  },
  {
    "text": "it doesn't matter I like to still kind of do it as exercise to to to write kind",
    "start": "4002240",
    "end": "4008319"
  },
  {
    "text": "of the cleanest code I can yeah also because these things grow don't they it's like let's say start with a small",
    "start": "4008319",
    "end": "4014720"
  },
  {
    "text": "Pearl script that processes some data in like one line and then after a while you're like I need to make this scale or",
    "start": "4014720",
    "end": "4021720"
  },
  {
    "text": "like use it for more than one thing and you have to do it again yeah it happens all the time someone wrote One script to",
    "start": "4021720",
    "end": "4027839"
  },
  {
    "text": "scrape some University website and that thing's grown and now it's Facebook yeah",
    "start": "4027839",
    "end": "4033400"
  },
  {
    "text": "exactly wor yeah and this is like an interesting thing that we probably don't talk about nearly enough which is like",
    "start": "4033400",
    "end": "4039119"
  },
  {
    "text": "we're we're saying all these things like you should do this we don't like that this is a good idiom this is a bad idiom but the context of all this stuff is",
    "start": "4039119",
    "end": "4045359"
  },
  {
    "text": "like maybe unstated it's stuff that you're C you're writing with other people right in an organization none of",
    "start": "4045359",
    "end": "4051319"
  },
  {
    "text": "this really applies if you're just like writing some code that generates a fractal or something like do whatever you want right we're talking in the",
    "start": "4051319",
    "end": "4057279"
  },
  {
    "text": "context of like how you can be a good citizen in an ecosystem right uh so like maybe it's worth like making that point",
    "start": "4057279",
    "end": "4063319"
  },
  {
    "text": "a bit more explicitly um I don't know yeah I think it's a good point because context actually applies it changes lots",
    "start": "4063319",
    "end": "4069880"
  },
  {
    "text": "of things too lots of advice changes with context like if you're just a tiny team of two people you might well behave",
    "start": "4069880",
    "end": "4076880"
  },
  {
    "text": "very differently to even a team of eight and certainly a team of 50 100 people",
    "start": "4076880",
    "end": "4082400"
  },
  {
    "text": "you're necessarily going to have different attitudes different problems different ways of interacting and this",
    "start": "4082400",
    "end": "4087720"
  },
  {
    "text": "is interesting too because go itself is biased for programming in the large at large organizations with lots of",
    "start": "4087720",
    "end": "4093720"
  },
  {
    "text": "Engineers who like come and go on big teams right that is explicitly what it's targeting right yeah yeah because",
    "start": "4093720",
    "end": "4099159"
  },
  {
    "text": "because the readability right the focus kind of is that optimized for read so you know yeah I think that's why lots of",
    "start": "4099159",
    "end": "4106080"
  },
  {
    "text": "people learn it quite quickly it's because it's smaller it's optimized for read and kind of easy to to get going",
    "start": "4106080",
    "end": "4113838"
  },
  {
    "text": "with you know the tools uh once you download it and install it it's kind of got everything you need and a bit more",
    "start": "4113839",
    "end": "4119600"
  },
  {
    "text": "so I think it is kind of yeah great for that Roberto what were you gonna say I'm",
    "start": "4119600",
    "end": "4124679"
  },
  {
    "text": "just saying that this also influences their Community it's like um there are communities which uh the smartest code",
    "start": "4124679",
    "end": "4131199"
  },
  {
    "text": "that you can write is a beautiful piece of code and I'm totally fine with that and there are communities like the Goan",
    "start": "4131199",
    "end": "4136719"
  },
  {
    "text": "in which if your code is marter is too smart you might want to consider dumbing it down a bit because that's going to be",
    "start": "4136719",
    "end": "4144120"
  },
  {
    "text": "hard to debug and hard for newcomers to start understanding whatever you're working with so it's like it's not just",
    "start": "4144120",
    "end": "4150278"
  },
  {
    "text": "that the language influenced the libraries and the ecosystem but also now the ecosystem influences the way we'",
    "start": "4150279",
    "end": "4156238"
  },
  {
    "text": "write the language to keep it simple and maintain that tradition which is something I like yeah well I'm afraid",
    "start": "4156239",
    "end": "4164000"
  },
  {
    "text": "that's all the time we have very sorry if we didn't get around to your question",
    "start": "4164000",
    "end": "4169480"
  },
  {
    "text": "and probably just means you know this wasn't interesting enough no we just didn't have time there were so many",
    "start": "4169480",
    "end": "4174758"
  },
  {
    "text": "great questions and thank you so much we will do another one of these again because I've learned loads and I'm sure",
    "start": "4174759",
    "end": "4180880"
  },
  {
    "text": "other people have too thank you so much to our guests Peter borgan Roberto clais um John Calhoun's also here and I was",
    "start": "4180880",
    "end": "4188400"
  },
  {
    "text": "here too obviously see you next time",
    "start": "4188400",
    "end": "4195040"
  },
  {
    "text": "comment on this and every episode of go time on Chang log.com there's a discussion Link in your show notes for",
    "start": "4195040",
    "end": "4201920"
  },
  {
    "text": "easy clickins we would love to hear from you and don't forget to follow the show on Twitter we are @ gotime FM this",
    "start": "4201920",
    "end": "4208400"
  },
  {
    "text": "episode was hosted by Matt ryer and John Calhoun it was produced by myself Jared Santo and our music is provided by the",
    "start": "4208400",
    "end": "4215600"
  },
  {
    "text": "beat freak breakmaster cylinder shout out to all of our longtime sponsors thanks again to fast Ley Leno and",
    "start": "4215600",
    "end": "4222640"
  },
  {
    "text": "rollbar that's all for now Brad Fitzpatrick joins us next",
    "start": "4222640",
    "end": "4227800"
  },
  {
    "text": "[Music]",
    "start": "4227800",
    "end": "4248899"
  },
  {
    "text": "week [Music]",
    "start": "4252640",
    "end": "4282560"
  },
  {
    "text": "TR [Music]",
    "start": "4282560",
    "end": "4298229"
  },
  {
    "text": "so if anyone's wondering why Matt has a team with just one other person it's probably comments like",
    "start": "4304159",
    "end": "4310158"
  },
  {
    "text": "that many other reasons you're the I just thought of a much better controversial opinion",
    "start": "4311159",
    "end": "4317400"
  },
  {
    "text": "unfortunately no no you can do it we can we're still live so yeah I can get edited in or whatever um still recording",
    "start": "4317400",
    "end": "4323960"
  },
  {
    "text": "well I mean like maybe maybe not worth it but uh yeah like I've spent a lot of time thinking about the semantic import",
    "start": "4323960",
    "end": "4330520"
  },
  {
    "text": "versioning rule in modules and I'm like increasingly convinced it it's just a a",
    "start": "4330520",
    "end": "4336239"
  },
  {
    "text": "a complete designer and uh modules is like fundamentally fundamentally broken in this way uh but uh no one seems to",
    "start": "4336239",
    "end": "4343239"
  },
  {
    "text": "agree with me so maybe that's a deeply unpopular opinion we did have a question",
    "start": "4343239",
    "end": "4348520"
  },
  {
    "text": "about which Go version you should choose in the go mod file do you think about that well it doesn't matter right at the",
    "start": "4348520",
    "end": "4355400"
  },
  {
    "text": "moment that doesn't really have an effect in the future it might but at the moment it just like doesn't really matter uh if the question is like which",
    "start": "4355400",
    "end": "4361960"
  },
  {
    "text": "Go version you should use in general it's like the latest table release always right like definitely yes and",
    "start": "4361960",
    "end": "4367880"
  },
  {
    "text": "I've had a problem with that because if you choose the latest table release for Library like for for example relies on",
    "start": "4367880",
    "end": "4374480"
  },
  {
    "text": "the SQL package in go15 a function was just added and my library is a wrapper",
    "start": "4374480",
    "end": "4382480"
  },
  {
    "text": "around the SQL package so I had to write two basically two versions that one that",
    "start": "4382480",
    "end": "4388440"
  },
  {
    "text": "was more back compatible one works with a new one and exposes that function yeah so for programs is easy just the latest",
    "start": "4388440",
    "end": "4396600"
  },
  {
    "text": "for libraries is not that easy in my opinion good stuff I wish I could I",
    "start": "4396600",
    "end": "4402440"
  },
  {
    "text": "could say the is that compiles with this code it's hard for me to talk about like",
    "start": "4402440",
    "end": "4408679"
  },
  {
    "text": "the versioning stuff because I'm just not in a situation where I run into the issues that some people have like my",
    "start": "4408679",
    "end": "4414840"
  },
  {
    "text": "dependency tree is not that complicated so as a result it's like what they have is fine so I kind of view my feedback on",
    "start": "4414840",
    "end": "4421239"
  },
  {
    "text": "that as I I don't have like I can give you the just somebody throwing something togethers feedback but really the",
    "start": "4421239",
    "end": "4427440"
  },
  {
    "text": "complicated cases are going to come from like kubernetes or some big project like that not mine but do you when you",
    "start": "4427440",
    "end": "4433880"
  },
  {
    "text": "do you have projects that have a reasonable rate of change yes but it's",
    "start": "4433880",
    "end": "4439480"
  },
  {
    "text": "probably not Library changes as much like Library changes are not like it's",
    "start": "4439480",
    "end": "4444679"
  },
  {
    "text": "whenever I decide to go back and change them I guess for the most part once something's in there and I used it for the things I'm using it for it's pretty",
    "start": "4444679",
    "end": "4450920"
  },
  {
    "text": "good okay and so they don't like you don't tend to have things that evolve every time lots of contributors are like",
    "start": "4450920",
    "end": "4457600"
  },
  {
    "text": "like right now no I don't have any like many projects like that no yeah yeah yeah okay yeah that would be different",
    "start": "4457600",
    "end": "4462960"
  },
  {
    "text": "wouldn't it especially if you Rel like when do you release you suddenly have to release to",
    "start": "4462960",
    "end": "4468440"
  },
  {
    "text": "tag versions and things right right which Port versioning makes like a much bigger deal out of than you know in any",
    "start": "4468440",
    "end": "4475560"
  },
  {
    "text": "other ecosystem and that's like the the entry door to my like Pandora's box of",
    "start": "4475560",
    "end": "4480719"
  },
  {
    "text": "complaints well maybe we'll have to do another episode on that Al together P I would love that so much and if you could",
    "start": "4480719",
    "end": "4486719"
  },
  {
    "text": "get Russ on so I can understand his perspective a little bit better better I think he should make an episode",
    "start": "4486719",
    "end": "4492920"
  },
  {
    "text": "on runs just you bring people that have complaints and you throw them against",
    "start": "4492920",
    "end": "4498480"
  },
  {
    "text": "someone that caused like that pain like face your face your uh yeah",
    "start": "4498480",
    "end": "4506800"
  },
  {
    "text": "it's Grim but yeah like justice you get some justice yeah I don't know I don't know",
    "start": "4506800",
    "end": "4513440"
  },
  {
    "text": "because we we're quite nice aren't we we're all a bit too nice for that sounds like a roast we could do like maybe we",
    "start": "4513440",
    "end": "4518719"
  },
  {
    "text": "should just do like go for roast where we just get Dave Cheney and we just write loads of horrible jokes about him",
    "start": "4518719",
    "end": "4524480"
  },
  {
    "text": "Sarah Silverman probably too yeah yeah get Sarah Silverman up to do a bit Jeff Ross will be in there obviously yeah no",
    "start": "4524480",
    "end": "4532120"
  },
  {
    "text": "okay won't do it then didn't get the support I was hoping for on that one gorilla gopher Leah Anthony on slack",
    "start": "4532120",
    "end": "4538600"
  },
  {
    "text": "said Gilla gopher Gilla gopher if it is a voluntary like the person agrees to that why not we might end up learning",
    "start": "4538600",
    "end": "4546320"
  },
  {
    "text": "something okay yeah fair enough Gilla gopher I don't know I don't think it's",
    "start": "4546320",
    "end": "4552719"
  },
  {
    "text": "right for Community is it no also a lot a lot of people in the community are",
    "start": "4552719",
    "end": "4557880"
  },
  {
    "text": "vegetarian doesn't sound good Goofer is an animal still you can still grill vegetables though goer like a person",
    "start": "4557880",
    "end": "4565320"
  },
  {
    "text": "though don't worry it's a person it's not an actual gopher animal right yeah",
    "start": "4565320",
    "end": "4571679"
  },
  {
    "text": "if they're prepared if the guidelines don't say anything now all of a sudden they'll be like an addition like we had",
    "start": "4571679",
    "end": "4577679"
  },
  {
    "text": "to add no grilling Gophers it's not I haven't seen it say you can't grill Gophers in the in the code of conducts",
    "start": "4577679",
    "end": "4584840"
  },
  {
    "text": "personally and I do and I read them every day just to be sure yeah just to be",
    "start": "4584840",
    "end": "4591639"
  },
  {
    "text": "sure yeah in other news we have an opening for a go time",
    "start": "4591639",
    "end": "4597440"
  },
  {
    "text": "panelist yeah because Matt's gonna lose his job okay all jokes aside Matt have",
    "start": "4597440",
    "end": "4602679"
  },
  {
    "text": "you ever hunted and killed a human being the most dangerous game uh no oh you",
    "start": "4602679",
    "end": "4607800"
  },
  {
    "text": "really should oh it's so thr how do it get so dark so soon well",
    "start": "4607800",
    "end": "4613120"
  },
  {
    "text": "it's time to go off live it was so sudden or are we still live we are yes",
    "start": "4613120",
    "end": "4618800"
  },
  {
    "text": "sorry Sor right it's obviously a joke I don't obviously it's a joke I don't think anyone listening would not think",
    "start": "4618800",
    "end": "4624360"
  },
  {
    "text": "that was a joke um but the answer Peter is no not yet that's the okay yeah very",
    "start": "4624360",
    "end": "4631280"
  },
  {
    "text": "good very good G wait for the purge kind of like postular yeah that was probably more thrilling that way too we could",
    "start": "4631280",
    "end": "4637719"
  },
  {
    "text": "have go for Purge where we just delete all the libraries that we don't like just one day we can forget the",
    "start": "4637719",
    "end": "4644440"
  },
  {
    "text": "consequences just go around delete all the libraries and then there's a there's a fun game if you could delete one",
    "start": "4644440",
    "end": "4649560"
  },
  {
    "text": "library from existence that's quite a fun game",
    "start": "4649560",
    "end": "4654600"
  },
  {
    "text": "oh one Library one package a go package yeah and force everyone who's using it",
    "start": "4654600",
    "end": "4659800"
  },
  {
    "text": "to use something else logus I feel like Peter would just be like we're going to delete SQL data",
    "start": "4659800",
    "end": "4665920"
  },
  {
    "text": "or database SQL just so we can fix that in it function or like that has an alternative",
    "start": "4665920",
    "end": "4672159"
  },
  {
    "text": "or you would would you build the alternative doesn't matter I mean I assume they'd have to rebuild something's got to oh it doesn't matter",
    "start": "4672159",
    "end": "4679000"
  },
  {
    "text": "HB HB like every day that is old what's what's wrong with it that is old client",
    "start": "4679000",
    "end": "4685239"
  },
  {
    "text": "and server in the same thing content type sniffing done the worst possible way uh too many default things uh",
    "start": "4685239",
    "end": "4692440"
  },
  {
    "text": "recovering panics too many things it's like I have a document red designers the",
    "start": "4692440",
    "end": "4697800"
  },
  {
    "text": "main thing I think for me is like allocations of course too yeah also there but I'm not that like I care about",
    "start": "4697800",
    "end": "4703320"
  },
  {
    "text": "performance when is the last concern and I have a a 24 pages document with the other concerns to be addressed before",
    "start": "4703320",
    "end": "4710080"
  },
  {
    "text": "performance that's too many pages mate so Brad that's a shot across the bow to you from Roberto here Brad Fitzpatrick",
    "start": "4710080",
    "end": "4717800"
  },
  {
    "text": "is on next week's show so we'll absolutely be playing a clip of this and getting his reaction he he would agree",
    "start": "4717800",
    "end": "4724440"
  },
  {
    "text": "he started redesigning the HP package a couple of years ago most of the stuff in my document",
    "start": "4724440",
    "end": "4730159"
  },
  {
    "text": "comes from his it it was written and it evolved at time kind of before we'd been",
    "start": "4730159",
    "end": "4735280"
  },
  {
    "text": "doing go for very long so you can see there's in the standard Library there are lots of examples of things that",
    "start": "4735280",
    "end": "4741840"
  },
  {
    "text": "really don't look very go likee at all and I think there's probably just stuff like that going around is there as well",
    "start": "4741840",
    "end": "4748159"
  },
  {
    "text": "I think this is a good thing for beginners too to realize that even these people they look up to as amazing",
    "start": "4748159",
    "end": "4753440"
  },
  {
    "text": "developers still look back on things they created and say this needs improve like it could be improved drastically",
    "start": "4753440",
    "end": "4759800"
  },
  {
    "text": "now that I know more and it's just in use by maybe millions of people certainly",
    "start": "4759800",
    "end": "4765480"
  },
  {
    "text": "hundreds of thousands of people using these things and yet they still feel like that I that is quite a good lesson",
    "start": "4765480",
    "end": "4771600"
  },
  {
    "text": "because it's sort of you know software's never really finished is it that could that must be quite um encouraging for a",
    "start": "4771600",
    "end": "4778639"
  },
  {
    "text": "junior developer to here I would hope yeah there's no hope you're going to feel awful about the things you write in",
    "start": "4778639",
    "end": "4785520"
  },
  {
    "text": "perpetuity yeah",
    "start": "4785520",
    "end": "4792000"
  }
]