[
  {
    "text": "bandwith for change log is provided by fastly learn more at fastly.com we move",
    "start": "40",
    "end": "5520"
  },
  {
    "text": "fast and fix things here at changelog because of rbar check them out at roar.com and we're hosted on Leno Cloud",
    "start": "5520",
    "end": "11840"
  },
  {
    "text": "servers at the lin.com changelog this episode is brought to you",
    "start": "11840",
    "end": "17199"
  },
  {
    "text": "by cucon cloudnativecon and you were invited to attend this Flagship conference from the cloud native Computing Foundation cucon",
    "start": "17199",
    "end": "23560"
  },
  {
    "text": "cloudnativecon North America 2019 that is a mouthful and an awesome conference to attend it's happening November 18th",
    "start": "23560",
    "end": "30720"
  },
  {
    "text": "to the 21st in San Diego California this conference gathers adopters and technologist from leading open source",
    "start": "30720",
    "end": "36079"
  },
  {
    "text": "and Cloud native communities use the code KC na change log 19 once again kcna",
    "start": "36079",
    "end": "43079"
  },
  {
    "text": "change log 19 to get 10% off registration or check the Shel for a special link to register and also a link",
    "start": "43079",
    "end": "49680"
  },
  {
    "text": "to the convince your boss letter again check the Shel for links to learn more and [Music]",
    "start": "49680",
    "end": "57479"
  },
  {
    "text": "register",
    "start": "58920",
    "end": "61920"
  },
  {
    "text": "[Music] welcome to go time a podcast featuring a",
    "start": "64390",
    "end": "71360"
  },
  {
    "text": "diverse panel and special guests discussing Cloud infrastructure distributed systems microservices",
    "start": "71360",
    "end": "77240"
  },
  {
    "text": "kubernetes Docker oh and also go we record live every Tuesday at 300 p.m.",
    "start": "77240",
    "end": "82640"
  },
  {
    "text": "Eastern new Pacific join the community slack with us in real time during the show and the go time FM channel and go",
    "start": "82640",
    "end": "88479"
  },
  {
    "text": "for slack follow us on Twitter we're atg gotime FM listen live at change.com or",
    "start": "88479",
    "end": "94280"
  },
  {
    "text": "subscribe at change.com gotime and now on to the",
    "start": "94280",
    "end": "100000"
  },
  {
    "text": "show hello and welcome to go time I'm Matt ryer today we're talking generics",
    "start": "100159",
    "end": "107119"
  },
  {
    "text": "and picking through this interesting and sometimes controversial issue I'm joined by John Calhoun hello John hey Matt I'm",
    "start": "107119",
    "end": "115079"
  },
  {
    "text": "joined also by Johnny Boro hello there and by one and only Ian Lance Taylor",
    "start": "115079",
    "end": "121200"
  },
  {
    "text": "hello Ian hi there thanks for having me yeah thanks for joining it's very exciting um you know we we all saw you",
    "start": "121200",
    "end": "129720"
  },
  {
    "text": "speaking at gophercon and actually today the videos went out so if anyone hasn't seen Ian's talk on this very subject at",
    "start": "129720",
    "end": "136519"
  },
  {
    "text": "goer con you probably can watch the video now not now like in a couple hours",
    "start": "136519",
    "end": "142400"
  },
  {
    "text": "good point good point thanks John maybe we could just start the conversation with a little bit about",
    "start": "142400",
    "end": "150959"
  },
  {
    "text": "what what generics are and uh what that means for go and why it's also a",
    "start": "150959",
    "end": "158480"
  },
  {
    "text": "conversation that we have and we hear a lot about again and again from uh people that look at go from other programming",
    "start": "158480",
    "end": "164560"
  },
  {
    "text": "languages so who wants to take a stab at first describing generics for anyone not",
    "start": "164560",
    "end": "170040"
  },
  {
    "text": "familiar with the subject well I'm happy to take a stab at it um generics is a",
    "start": "170040",
    "end": "176360"
  },
  {
    "text": "kind of programming in which um you do not specify the types the exact types of",
    "start": "176360",
    "end": "182239"
  },
  {
    "text": "your uh values at the time that you write the code um you use uh type",
    "start": "182239",
    "end": "188560"
  },
  {
    "text": "parameters which stand in for the actual types and then when you actually uh",
    "start": "188560",
    "end": "193680"
  },
  {
    "text": "execute your program or build your program and execute it then those types are chosen later on so it lets you write",
    "start": "193680",
    "end": "200080"
  },
  {
    "text": "a set of algorithms and data structures that um can be written and can work",
    "start": "200080",
    "end": "207040"
  },
  {
    "text": "independent of the actual types themselves that's great and so but these",
    "start": "207040",
    "end": "212879"
  },
  {
    "text": "are different to just anmt interface isn't it there's still compile time checks that happen with these types",
    "start": "212879",
    "end": "219360"
  },
  {
    "text": "that's right yes it's still all statically checked at compile time um based on the type argument so would you",
    "start": "219360",
    "end": "225760"
  },
  {
    "text": "say it's pretty safe to say that maps and slices are in a way just another example of generics yes maps and slices",
    "start": "225760",
    "end": "232840"
  },
  {
    "text": "are absolutely uh generic types um in and of themselves they happen to be built into the language so when people",
    "start": "232840",
    "end": "238599"
  },
  {
    "text": "talk about generics and so one way of saying it is they want to be able to write their own versions of maps and",
    "start": "238599",
    "end": "244239"
  },
  {
    "text": "slices not maps and slices themselves of course but you know other similar data",
    "start": "244239",
    "end": "249280"
  },
  {
    "text": "structures or algorithms that apply to those data structures so some of a",
    "start": "249280",
    "end": "254400"
  },
  {
    "text": "painful or rather what folks consider to be painful um um to do without the use",
    "start": "254400",
    "end": "259799"
  },
  {
    "text": "of generics is basically having to either rely on you know the empty interface and doing you know type",
    "start": "259799",
    "end": "265840"
  },
  {
    "text": "conversions and whatnot and then which is you know comes with its own risks and obviously you can you can also do some",
    "start": "265840",
    "end": "271440"
  },
  {
    "text": "code generation but really like what what what seems to be uh um the problem",
    "start": "271440",
    "end": "277600"
  },
  {
    "text": "to put it you know jokingly but there's there's obviously folks are coming in from different programming languages and",
    "start": "277600",
    "end": "284000"
  },
  {
    "text": "and and they they're used to being able to do these kinds of things using generics um but go has has from from the",
    "start": "284000",
    "end": "290759"
  },
  {
    "text": "start sort of ued that that that that that way of programming um I'm Shing if",
    "start": "290759",
    "end": "296560"
  },
  {
    "text": "you're if to hear like what what what are your thoughts for why it was sort of uh left out right what what the",
    "start": "296560",
    "end": "302960"
  },
  {
    "text": "reasoning was for that and why is so important to to actually be thinking about these things and sort of looking",
    "start": "302960",
    "end": "308960"
  },
  {
    "text": "to bring into the language now well it was left out because it's complicated um",
    "start": "308960",
    "end": "314400"
  },
  {
    "text": "it makes the it does um it adds a lot of um you know you have to think pretty",
    "start": "314400",
    "end": "320000"
  },
  {
    "text": "hard about how to do the type checking about how to how the program works um",
    "start": "320000",
    "end": "325160"
  },
  {
    "text": "it's also complicated just to specify type parameters and type arguments now hoping that we're minimizing the",
    "start": "325160",
    "end": "331039"
  },
  {
    "text": "complexity with our design draft but um there's no denying that it will make the language you know it adds a number of",
    "start": "331039",
    "end": "337000"
  },
  {
    "text": "new Concepts to the language um now that said uh the reason people look to see it",
    "start": "337000",
    "end": "342039"
  },
  {
    "text": "and go I mean as you say people are familiar with generics from other languages but um there's a set of um a",
    "start": "342039",
    "end": "349520"
  },
  {
    "text": "set of programs a set of kinds of code that we can't really write and go because we do not have generics um and",
    "start": "349520",
    "end": "356199"
  },
  {
    "text": "you know we're used to that um and we can still write obviously tons of good go code anyhow but if we had generics we",
    "start": "356199",
    "end": "363520"
  },
  {
    "text": "could for example write libraries um that provided um data structures that",
    "start": "363520",
    "end": "368720"
  },
  {
    "text": "don't currently exist a typical example would be a concurrent hashmap you know a hashmap which could be modified safely",
    "start": "368720",
    "end": "375240"
  },
  {
    "text": "by multiple go routines simultaneously and was type safe just like the uh",
    "start": "375240",
    "end": "380280"
  },
  {
    "text": "standard Library I mean the standard language map type is um another example",
    "start": "380280",
    "end": "385759"
  },
  {
    "text": "of uh would be a set of algorithms that we can't really write today like gorithms that work with channels um of",
    "start": "385759",
    "end": "392240"
  },
  {
    "text": "any type like you could write just simple functions that merge two channels or uh you know Multiplex one channel",
    "start": "392240",
    "end": "398800"
  },
  {
    "text": "onto a bunch of other channels or did whatever you wanted to do you know various kinds of client server architect",
    "start": "398800",
    "end": "405080"
  },
  {
    "text": "is written with channels that right now you have to write each one by itself because you can there's no way of saying",
    "start": "405080",
    "end": "410720"
  },
  {
    "text": "um I have a channel but I don't care what the type of the channel is you always have to say I've got a Chan int",
    "start": "410720",
    "end": "415840"
  },
  {
    "text": "or I've got a Chan of you know struct something or other you can't just say",
    "start": "415840",
    "end": "420960"
  },
  {
    "text": "I've just got a channel and I still want to write a select statement on it that's hard to write in C today I think was it",
    "start": "420960",
    "end": "428240"
  },
  {
    "text": "last week was it m where you guys are talking about the um io. writer interface and reader interface yes and",
    "start": "428240",
    "end": "433879"
  },
  {
    "text": "like this reminds me of that a lot where we can write a lot of really cool code around the fact that those interfaces",
    "start": "433879",
    "end": "439360"
  },
  {
    "text": "are very popular and we don't really care about what we're reading from and it sounds like what you're saying is like with the channels it's kind of",
    "start": "439360",
    "end": "446720"
  },
  {
    "text": "unfortunate that we can't do the same thing with channels even though there's a lot of common functionality we could have built around that that's right yeah",
    "start": "446720",
    "end": "454360"
  },
  {
    "text": "so one way that generics can help um go programmers is to uh as you say you can",
    "start": "454360",
    "end": "459720"
  },
  {
    "text": "write um you can write interfaces are very powerful but you have to write a method that implements those interfaces you could sort of conceptually think of",
    "start": "459720",
    "end": "466360"
  },
  {
    "text": "all the built-in types and go of having their own methods they're methods that we they're not written as methods",
    "start": "466360",
    "end": "471520"
  },
  {
    "text": "they're written as you know like the plus sign or the channel receive and send operator uh but there's no way to",
    "start": "471520",
    "end": "478199"
  },
  {
    "text": "capture those ideas in interface and generics let us um do that but generics are also more than interfaces uh you can",
    "start": "478199",
    "end": "486599"
  },
  {
    "text": "also write uh generics that describe the relationships between multiple types um",
    "start": "486599",
    "end": "493080"
  },
  {
    "text": "you don't have to always be working with a single type you could have um like a typical example would be a graph which",
    "start": "493080",
    "end": "498440"
  },
  {
    "text": "has different node and Edge types you could write General generic graph algorithms that work on types that",
    "start": "498440",
    "end": "506000"
  },
  {
    "text": "Implement whatever is required um by those graph algorithm but you don't have to specify what exactly those types are",
    "start": "506000",
    "end": "513159"
  },
  {
    "text": "so in that case and I saw that example in your talk in if you had a graph and a node and these two you have a a contract",
    "start": "513159",
    "end": "519760"
  },
  {
    "text": "that encap encapsulates both that contract would only make sense when you provided a type for both of them",
    "start": "519760",
    "end": "526120"
  },
  {
    "text": "wouldn't it you wouldn't be able you know what I mean so those types would essentially be required that's right you'd have to for the case of the graph",
    "start": "526120",
    "end": "533399"
  },
  {
    "text": "example in the talk yeah you'd have to provide two type arguments every time you wanted to work with the graph one",
    "start": "533399",
    "end": "539279"
  },
  {
    "text": "describing the node type and one describing the edge type that makes sense and of course the compiler would if you forgot one of those types or",
    "start": "539279",
    "end": "545440"
  },
  {
    "text": "whatever then of course the compiler is going to help you at that point I suppose yes the compiler you know it would be as though you called a function",
    "start": "545440",
    "end": "551760"
  },
  {
    "text": "without passing enough arguments to the function so when we talk about like all these different data structures um I",
    "start": "551760",
    "end": "558519"
  },
  {
    "text": "guess one question I have is would you see the standard Library getting much larger as a result of generics um it's",
    "start": "558519",
    "end": "565480"
  },
  {
    "text": "really hard to say I I wouldn't see it getting much larger what I would say is I would expect to see a new CH package",
    "start": "565480",
    "end": "572760"
  },
  {
    "text": "for example with the channel algorithms I mentioned and similarly there would be a new slices package which would have a",
    "start": "572760",
    "end": "578959"
  },
  {
    "text": "bunch of simple slice algorithms that worked on slices of any type and beyond that it's really difficult to say I",
    "start": "578959",
    "end": "585160"
  },
  {
    "text": "think that we would become possible for people to write data structures uh generic data structures that worked in",
    "start": "585160",
    "end": "590880"
  },
  {
    "text": "different ways but most of those would live outside the standard Library I think it would only be as we saw you",
    "start": "590880",
    "end": "596680"
  },
  {
    "text": "know clear use cases for them that would be uh desirable to pull them into the standard Library so I wouldn't think the",
    "start": "596680",
    "end": "602959"
  },
  {
    "text": "standard Library would grow a lot bigger right away but you know of course there would always be scope for adding new",
    "start": "602959",
    "end": "609120"
  },
  {
    "text": "things that have a clear General applicability I mean this has come up a lot with like goto is sort of where",
    "start": "609120",
    "end": "615079"
  },
  {
    "text": "generics seem to be talked about even though it might be possible to do this without your requiring goto but I",
    "start": "615079",
    "end": "620839"
  },
  {
    "text": "suspect one of the benefits is that there's probably some existing packages in the standard library that we would at",
    "start": "620839",
    "end": "626279"
  },
  {
    "text": "least I would imagine things like the sort package changing if we had generics do you see that as also being true or",
    "start": "626279",
    "end": "631600"
  },
  {
    "text": "yes I agree the sort package would change and also the uh container list",
    "start": "631600",
    "end": "636639"
  },
  {
    "text": "package would change and the hash package um those packages would very likely uh you know we'd still keep the",
    "start": "636639",
    "end": "642360"
  },
  {
    "text": "old packages around but there would likely be new versions of them that worked uh using generic facilities but",
    "start": "642360",
    "end": "648440"
  },
  {
    "text": "we wouldn't get a new SLP kind of slice would we that's going to likely stay the",
    "start": "648440",
    "end": "653519"
  },
  {
    "text": "same yeah yeah slices slices are good they're great there's no reason uh no",
    "start": "653519",
    "end": "659360"
  },
  {
    "text": "reason to change them they are great actually it's I do think like I look at the sort package and I I think it works",
    "start": "659360",
    "end": "665959"
  },
  {
    "text": "well especially once you figure it out but I I know from if you're used to another language and you come and you see that the sort package sometimes it",
    "start": "665959",
    "end": "672360"
  },
  {
    "text": "can throw you off at first and it's gotten way better over time but that's definitely one of the ones that I could see generics actually making go easier",
    "start": "672360",
    "end": "678839"
  },
  {
    "text": "to use well that package actually has one of the cool examples of a way a way",
    "start": "678839",
    "end": "684480"
  },
  {
    "text": "to achieve kind of a generic behavior in go today which is where you pass that",
    "start": "684480",
    "end": "689760"
  },
  {
    "text": "function and you you rely on the closure of having access to the data and the function you just get the the two uh in",
    "start": "689760",
    "end": "697000"
  },
  {
    "text": "the indexes of the two items to compare um and so you're doing the work it's kind of a trick but it really quite",
    "start": "697000",
    "end": "703760"
  },
  {
    "text": "Works uh generics of course goes way beyond that and it was interesting I uh",
    "start": "703760",
    "end": "709720"
  },
  {
    "text": "something you said really resonated earlier you said that generics was left out of go because it's complicated and I",
    "start": "709720",
    "end": "716240"
  },
  {
    "text": "think to developers to engineers that concept just really makes sense and to",
    "start": "716240",
    "end": "722320"
  },
  {
    "text": "anyone listening that works on the other side on the product side of things that really doesn't make any sense to them at",
    "start": "722320",
    "end": "729160"
  },
  {
    "text": "all in my experience so it's nice to hear that and also the fact that you you",
    "start": "729160",
    "end": "734560"
  },
  {
    "text": "are empowered on the go team to sort of make these decisions uh based on a sort",
    "start": "734560",
    "end": "739760"
  },
  {
    "text": "of technical reality and mechanical sympathy they call it and all that yeah I I think that um I think a lot of the",
    "start": "739760",
    "end": "746720"
  },
  {
    "text": "success of go has been that it's that it's simple you know I mean when you're writing a program and you're spending",
    "start": "746720",
    "end": "753800"
  },
  {
    "text": "minutes or hours trying to decide which language construct to use in some other language I mean then uh you know that's",
    "start": "753800",
    "end": "760600"
  },
  {
    "text": "not productive time uh you want you want your language to be a tool that's powerful enough to get everything done",
    "start": "760600",
    "end": "767040"
  },
  {
    "text": "but it's not too hard to use it's not you don't want to be puzzling over how some aspects of the language work so you",
    "start": "767040",
    "end": "773160"
  },
  {
    "text": "know if we do wind up adding generics to go that's a property we've got to preserve that's the most important",
    "start": "773160",
    "end": "778279"
  },
  {
    "text": "feature of language yeah and also the readability I talk a lot about this um",
    "start": "778279",
    "end": "783560"
  },
  {
    "text": "really writing code for uh using the API and reading the code and optimize for",
    "start": "783560",
    "end": "790040"
  },
  {
    "text": "that at the expense of writing which is why personally I don't mind writing if a equals nil all the time I'm actually",
    "start": "790040",
    "end": "796240"
  },
  {
    "text": "really good with that because when it comes to reading it which I do far more often it's very clear and and expresses",
    "start": "796240",
    "end": "803240"
  },
  {
    "text": "it very well and that is something I like about the latest proposal um if you",
    "start": "803240",
    "end": "808560"
  },
  {
    "text": "look at the code it kind of still looks like go um although there are of course",
    "start": "808560",
    "end": "814360"
  },
  {
    "text": "EXT there's an additional set of parentheses now that we have to think about yeah I'm glad to hear you say that",
    "start": "814360",
    "end": "820560"
  },
  {
    "text": "because that is one of the things we were really aiming for it should still look like go yeah that's a great goal to",
    "start": "820560",
    "end": "825680"
  },
  {
    "text": "have though I think as well and that was actually part of my objection to the tri proposal I digress a little but I think",
    "start": "825680",
    "end": "832600"
  },
  {
    "text": "the tri proposal kind of had it it was a bit it felt a bit magic and it felt it",
    "start": "832600",
    "end": "838160"
  },
  {
    "text": "didn't feel like the most expressive go that I'm sort of have become used to and",
    "start": "838160",
    "end": "843920"
  },
  {
    "text": "this definitely the latest proposal I think captures the still has the goess",
    "start": "843920",
    "end": "849440"
  },
  {
    "text": "in it if that's a thing good so when you guys were trying to decide how to make",
    "start": "849440",
    "end": "855639"
  },
  {
    "text": "this you know readable and easy to use um I'm assuming you looked at other languages to try to you know get some",
    "start": "855639",
    "end": "861279"
  },
  {
    "text": "inspiration to find out things that you thought didn't work um can you talk a little bit more about that process uh",
    "start": "861279",
    "end": "867279"
  },
  {
    "text": "sure obviously well maybe not obviously but the truth is the language that we're most familiar with with C++ so we spent",
    "start": "867279",
    "end": "873440"
  },
  {
    "text": "a lot of time looking at the C++ implementation of generics which of course is called templates in",
    "start": "873440",
    "end": "878959"
  },
  {
    "text": "C++ um so uh we knew I mean we knew",
    "start": "878959",
    "end": "884000"
  },
  {
    "text": "there were aspects of templates that were just going to be hard to bring into a language like go and that we didn't",
    "start": "884000",
    "end": "889079"
  },
  {
    "text": "even want in a language like go in C++ you can actually you could actually view",
    "start": "889079",
    "end": "894920"
  },
  {
    "text": "templates in C++ as another programming language which is I I believe is",
    "start": "894920",
    "end": "900079"
  },
  {
    "text": "actually touring complete that's sort of layered over the ordinary C++ language only it uses a completely different",
    "start": "900079",
    "end": "906480"
  },
  {
    "text": "syntax and uh it's evaluated at compile time uh so that's what people mean when",
    "start": "906480",
    "end": "911720"
  },
  {
    "text": "they talk about um template metaprogramming you can actually write entire programs in the template language",
    "start": "911720",
    "end": "917560"
  },
  {
    "text": "they're very difficult to understand um but that wasn't a direction we wanted to go we wanted to sort of hone away all",
    "start": "917560",
    "end": "925720"
  },
  {
    "text": "that to just get to the core idea of just being able to uh use types um we",
    "start": "925720",
    "end": "931639"
  },
  {
    "text": "also of course looked at the C++ syntax which many people are familiar with using angle brackets we couldn't figure out how to make that work in go and um",
    "start": "931639",
    "end": "939639"
  },
  {
    "text": "because uh because in go has the ability that you can parse the syntax without",
    "start": "939639",
    "end": "944759"
  },
  {
    "text": "knowing um the types of the names uh you can't you in order to fully",
    "start": "944759",
    "end": "950519"
  },
  {
    "text": "resolve the program you have to know the types but you can actually do all the parsing without knowing the types and that's not true in C++ when parsing C++",
    "start": "950519",
    "end": "958199"
  },
  {
    "text": "you need to know know if something is a template or an ordinary variable um and we needed to preserve the ability to",
    "start": "958199",
    "end": "965000"
  },
  {
    "text": "easily parse go it makes the compiler faster and it makes it much easier to write a lot of important tools like you",
    "start": "965000",
    "end": "970720"
  },
  {
    "text": "know go Imports um much easier for them to parse the code if they don't need to",
    "start": "970720",
    "end": "976240"
  },
  {
    "text": "understand the type of every name anyhow that's that's kind of where we started from and of course we looked at a lot of",
    "start": "976240",
    "end": "982279"
  },
  {
    "text": "other languages too um uh d uh Ada um clue clue had a lot these ideas back in",
    "start": "982279",
    "end": "989440"
  },
  {
    "text": "the 70s um it's too bad that language hasn't carried forward and of course",
    "start": "989440",
    "end": "995600"
  },
  {
    "text": "Java and one thing I like about this is in some ways when you're the user of it",
    "start": "995600",
    "end": "1001480"
  },
  {
    "text": "it's it's kind of an optional feature you might not even know it's there um one of the examples is where it can",
    "start": "1001480",
    "end": "1008199"
  },
  {
    "text": "infer the type from what you've passed in and so in those cases you it looks",
    "start": "1008199",
    "end": "1014079"
  },
  {
    "text": "like you're just calling a normal go function so I like yeah yeah and type",
    "start": "1014079",
    "end": "1020319"
  },
  {
    "text": "inference was actually something we spent a great deal of time on because we knew on the one hand we really knew that",
    "start": "1020319",
    "end": "1026079"
  },
  {
    "text": "we wanted it so that we could as you say people could call a generic function without even necessarily being deeply",
    "start": "1026079",
    "end": "1033280"
  },
  {
    "text": "aware that it was a generic function but we also had to make type inference rules uh that didn't surprise people which",
    "start": "1033280",
    "end": "1040520"
  },
  {
    "text": "again was something we knew from C++ C++ also has overloading and their",
    "start": "1040520",
    "end": "1046199"
  },
  {
    "text": "own um uh type deduction uh which is uh very complicated and",
    "start": "1046199",
    "end": "1051280"
  },
  {
    "text": "actually does surprise people sometimes so it took us a long time to write down a set of rules that were simple enough",
    "start": "1051280",
    "end": "1056919"
  },
  {
    "text": "to apply in most situations at least I should say we hope they're simple enough to apply in most situations because the",
    "start": "1056919",
    "end": "1063320"
  },
  {
    "text": "truth is not very much generic code has been written yet since there's no complete implementation so did you guys",
    "start": "1063320",
    "end": "1069240"
  },
  {
    "text": "write when you were like thinking about different approaches did you write partial implementations just to try it out yeah like I know at this point I",
    "start": "1069240",
    "end": "1075559"
  },
  {
    "text": "think there's a partial but I didn't know if that was like the normal for every approach you went with yeah we wrote partial implementations for many",
    "start": "1075559",
    "end": "1081760"
  },
  {
    "text": "of the different approaches we tried and that's it really helped in finding parsing problems you know we'd write",
    "start": "1081760",
    "end": "1088120"
  },
  {
    "text": "we'd implement it in the parser and we'd try it out with some test cases or or just writing it in the parser we'd see",
    "start": "1088120",
    "end": "1093280"
  },
  {
    "text": "like wow we've just gotten into this case and now we have no idea how to parse this code so that sort of helped",
    "start": "1093280",
    "end": "1099080"
  },
  {
    "text": "drive us toward the fairly simple syntax uh that we're uh suggesting today that's",
    "start": "1099080",
    "end": "1104880"
  },
  {
    "text": "a really interesting approach really because it's like thinking of it because of the fact you have to pass this",
    "start": "1104880",
    "end": "1111360"
  },
  {
    "text": "language so that being a primary concern of course it's not something we really think about from the outside when we",
    "start": "1111360",
    "end": "1117440"
  },
  {
    "text": "think about the design of generics we almost feel like well we can be anything we could just anything we can type into",
    "start": "1117440",
    "end": "1123400"
  },
  {
    "text": "a notepad but of course there's also a sympathy to be had with the existing tools and existing paes and all that",
    "start": "1123400",
    "end": "1130440"
  },
  {
    "text": "stuff I did see there is I think it's the contracts is is implemented in the",
    "start": "1130440",
    "end": "1135600"
  },
  {
    "text": "PES there's a PR for that's right yeah um yeah Robert grimer has written um has",
    "start": "1135600",
    "end": "1141320"
  },
  {
    "text": "written a parser and um most of a type Checker at this point uh so that work is going really well yeah so that's",
    "start": "1141320",
    "end": "1150120"
  },
  {
    "text": "[Music]",
    "start": "1151320",
    "end": "1159799"
  },
  {
    "text": "exciting what's up Gophers it's not too late if you're planning to attend coupon Cloud native con here in North America",
    "start": "1159799",
    "end": "1166720"
  },
  {
    "text": "later this November no that we have just entered late registration pricing but you can still save 10% off your",
    "start": "1166720",
    "end": "1173400"
  },
  {
    "text": "registration when you use our code KC na changelog 19 again that's casy NA",
    "start": "1173400",
    "end": "1179799"
  },
  {
    "text": "changelog 19 check the sh for links to learn more and [Music]",
    "start": "1179799",
    "end": "1196760"
  },
  {
    "text": "register is uh is that the uh only new sort of U um very visible other than",
    "start": "1196760",
    "end": "1203200"
  },
  {
    "text": "sort of the concept right being implemented in the language is that the the new sort of a keyword sort of being",
    "start": "1203200",
    "end": "1208240"
  },
  {
    "text": "introduced U that's going to be sort of the the very first thing sort of a developers um sort of uh um um realize",
    "start": "1208240",
    "end": "1215640"
  },
  {
    "text": "okay now generics has Leed because I can use this particular keyword like is that is that like the only one that's that's",
    "start": "1215640",
    "end": "1221760"
  },
  {
    "text": "um um sort of a surfacing at the moment yeah that's right one new keyword um",
    "start": "1221760",
    "end": "1227200"
  },
  {
    "text": "contract and current design that's uh that's all we're adding um and uh you",
    "start": "1227200",
    "end": "1233440"
  },
  {
    "text": "know you're right that's the first thing developers are are going to see but um the truth is I don't think I I don't",
    "start": "1233440",
    "end": "1239520"
  },
  {
    "text": "think contracts are going to be the first thing most people reach for I think contracts are a key element of the",
    "start": "1239520",
    "end": "1245440"
  },
  {
    "text": "of the uh design that we're suggesting but um you can write a lot of generic",
    "start": "1245440",
    "end": "1250760"
  },
  {
    "text": "code actually without contracts I mean at some point you're going to need contracts I think we do need them in there but uh you can actually go to go",
    "start": "1250760",
    "end": "1257679"
  },
  {
    "text": "pretty far are just writing um type parameters and type arguments without contracts so what would be do you mean",
    "start": "1257679",
    "end": "1264440"
  },
  {
    "text": "using like the existing contracts the built-in ones like no I mean like just writing code with no contract at all",
    "start": "1264440",
    "end": "1270559"
  },
  {
    "text": "like like the channel algorithms I mentioned you know you can write a lot of things with a channel a Channel of some type Te You Really Don't Care",
    "start": "1270559",
    "end": "1277279"
  },
  {
    "text": "anything about that type te so you don't need a contract for it I see so that's almost like can and then any type can be",
    "start": "1277279",
    "end": "1283919"
  },
  {
    "text": "passed in there that's right exactly yeah well actually I think a lot",
    "start": "1283919",
    "end": "1289279"
  },
  {
    "text": "of the a lot of the classic problems that this that will be immediately solved once generics is available and",
    "start": "1289279",
    "end": "1295600"
  },
  {
    "text": "and hopefully solved in the standard library and actually something i' I'd like to talk about in a minute is um",
    "start": "1295600",
    "end": "1301919"
  },
  {
    "text": "first of all how how's the community contributed but also I'm quite interested in how do we how do we not",
    "start": "1301919",
    "end": "1308240"
  },
  {
    "text": "all go off and build our own libraries that are all the common things that everyone's going to need how do we rally",
    "start": "1308240",
    "end": "1315200"
  },
  {
    "text": "around a central place for that um be quite an interesting you know hopefully",
    "start": "1315200",
    "end": "1322000"
  },
  {
    "text": "these all the things we need the common ones sets and you know the other types of uh the graph structures and and trees",
    "start": "1322000",
    "end": "1329559"
  },
  {
    "text": "and all this stuff do we expect them to live inside the standard library or do",
    "start": "1329559",
    "end": "1334720"
  },
  {
    "text": "we think somebody outside is going to make them first I think those are great questions and I don't know I don't know",
    "start": "1334720",
    "end": "1341279"
  },
  {
    "text": "how that's going to play out I think I mean a lot of things I hope are going to come outside first and then in but then",
    "start": "1341279",
    "end": "1347000"
  },
  {
    "text": "as you say there are some very obvious ones like sets that it does seem to make sense just to add them from the start I",
    "start": "1347000",
    "end": "1353799"
  },
  {
    "text": "I I don't I don't really know how it's going to work out I don't have an idea there yeah it's interesting I mean um",
    "start": "1353799",
    "end": "1360880"
  },
  {
    "text": "sync map is is one example you raised which would be great to have a typed sync map for example just out of the box",
    "start": "1360880",
    "end": "1368400"
  },
  {
    "text": "I mean yeah cuz when you hit the ground running in go usually concurrency is",
    "start": "1368400",
    "end": "1373559"
  },
  {
    "text": "something that you're really excited to play around with because of the language Primitives that make it possible so I",
    "start": "1373559",
    "end": "1380640"
  },
  {
    "text": "know a lot of people get very excited about that area of go and to be able to just use like the sync map or whatever",
    "start": "1380640",
    "end": "1387120"
  },
  {
    "text": "in a very sort of intuitive simple way I think that's going to just help with that with that that's the place where",
    "start": "1387120",
    "end": "1393960"
  },
  {
    "text": "I'm excited for new developers to be exposed to this because by and large I",
    "start": "1393960",
    "end": "1399440"
  },
  {
    "text": "think this is going to be a feature at least for those writing for more advanced um more seasoned developers I",
    "start": "1399440",
    "end": "1407360"
  },
  {
    "text": "think and I think Junior developers would likely stay stay away a little bit initially I don't know how you all feel",
    "start": "1407360",
    "end": "1413000"
  },
  {
    "text": "about that I mean I think it's at least in my opinion I i' kind of hope that it's one of those things that if you don't need it you don't necessarily have",
    "start": "1413000",
    "end": "1419720"
  },
  {
    "text": "to run into it I mean that's kind of the Hope because if you're not writing the libraries that are you know providing",
    "start": "1419720",
    "end": "1425520"
  },
  {
    "text": "generic implementations and you're just using something like you know like maps and slices as they are now you don't only",
    "start": "1425520",
    "end": "1431559"
  },
  {
    "text": "have to think about the fact that they are generic and I think if if that's the case that at least that's my opinion",
    "start": "1431559",
    "end": "1438000"
  },
  {
    "text": "that I hope that it won't scare them away right away yeah well one of the one of the big programming sins that I see",
    "start": "1438000",
    "end": "1445279"
  },
  {
    "text": "still and I'm also guilty of this as well is early abstraction and you know I",
    "start": "1445279",
    "end": "1452520"
  },
  {
    "text": "always whenever I see a concept emerging I'm very tempted to immediately build",
    "start": "1452520",
    "end": "1457960"
  },
  {
    "text": "the abstraction and I sort of resist that nowadays I've learned to implement",
    "start": "1457960",
    "end": "1463240"
  },
  {
    "text": "it a few times first and then look at where an abstraction comes so with the power of generics that's definitely an",
    "start": "1463240",
    "end": "1470320"
  },
  {
    "text": "area where we we might see people reaching a little bit too early for those abstractions it's going to be too",
    "start": "1470320",
    "end": "1476720"
  },
  {
    "text": "it's going to be very tempting so that's just something I think that we have to talk about as a community um and",
    "start": "1476720",
    "end": "1483559"
  },
  {
    "text": "speaking of the community well first of all anyone any thoughts on that well I think you're absolutely right and uh I",
    "start": "1483559",
    "end": "1489840"
  },
  {
    "text": "mean new things do tend to get overused I think the same thing happened with channels in the very early days AG go I",
    "start": "1489840",
    "end": "1495720"
  },
  {
    "text": "think it took us a while to understand where channels really are helpful and where they uh you know where they're a",
    "start": "1495720",
    "end": "1500880"
  },
  {
    "text": "little too uh I don't know where they introduce a little too much complexity or a little too much early abstraction as you say we're just going to have to",
    "start": "1500880",
    "end": "1507520"
  },
  {
    "text": "try and learn and hopefully build a good and simple base that we can learn on",
    "start": "1507520",
    "end": "1512960"
  },
  {
    "text": "yeah absolutely I think that's great I was I was one of those early adopters that abused channels I'd use them in all",
    "start": "1512960",
    "end": "1520000"
  },
  {
    "text": "kinds of places where I definitely shouldn't have and and actually now I sort of start with the uh usually just a",
    "start": "1520000",
    "end": "1526399"
  },
  {
    "text": "mutex I'll start there and and manage things like that and sometimes I never have to grow beyond that actually but",
    "start": "1526399",
    "end": "1532200"
  },
  {
    "text": "yeah I remember that where it's just so it's is so good that and we take it for",
    "start": "1532200",
    "end": "1538159"
  },
  {
    "text": "granted now that we can so easily spin up all these go routines have them communicating in a safe way and just use",
    "start": "1538159",
    "end": "1545520"
  },
  {
    "text": "these language Primitives to do things like that is extremely powerful so yeah I can see why people get excited and",
    "start": "1545520",
    "end": "1551919"
  },
  {
    "text": "want to use it yep on the community aspect how much of the community of",
    "start": "1551919",
    "end": "1557799"
  },
  {
    "text": "already contributed to generics uh I know there was there's always big conversation whenever whenever you start",
    "start": "1557799",
    "end": "1565080"
  },
  {
    "text": "to talk about any features or any changes to the language and I think that's a testament by the way to some of",
    "start": "1565080",
    "end": "1571760"
  },
  {
    "text": "the core values of the go team which is the Simplicity I mean the community is kind of resistant to change and a little",
    "start": "1571760",
    "end": "1578320"
  },
  {
    "text": "bit allergic to it so how did you find that Community engagement Ian and was it",
    "start": "1578320",
    "end": "1584039"
  },
  {
    "text": "was it all you wish it should be is there ways we can improve how was it um",
    "start": "1584039",
    "end": "1589120"
  },
  {
    "text": "I think it's been really good um I think we've taken a lot of ideas from the community over the years of course the",
    "start": "1589120",
    "end": "1594200"
  },
  {
    "text": "generics discussion's been going on you know since go started um a lot of people",
    "start": "1594200",
    "end": "1600640"
  },
  {
    "text": "have uh contributed really interesting and useful ideas along the way um there's also been people who've said you",
    "start": "1600640",
    "end": "1606799"
  },
  {
    "text": "know no generics can't take them too much um and you know I respect that",
    "start": "1606799",
    "end": "1612399"
  },
  {
    "text": "point of view too um and it this you know of course I'm talking about generics but I'm there's no guarantee",
    "start": "1612399",
    "end": "1618320"
  },
  {
    "text": "they'll go into the language at this point I hope they will um but I think that um you know there's been a lot of",
    "start": "1618320",
    "end": "1624640"
  },
  {
    "text": "discussion over the years there's been a lot of um different ideas different approaches taken and I think it's really",
    "start": "1624640",
    "end": "1631840"
  },
  {
    "text": "helped to inform us um how we can approach the problem and uh what we",
    "start": "1631840",
    "end": "1638720"
  },
  {
    "text": "could do with the problem it's also really helped us to see examples of code that really would be easier um if uh",
    "start": "1638720",
    "end": "1646840"
  },
  {
    "text": "generics been available when that code was written and um to make sure that um",
    "start": "1646840",
    "end": "1652240"
  },
  {
    "text": "any design we come up with is powerful enough to uh Implement those problems so",
    "start": "1652240",
    "end": "1658000"
  },
  {
    "text": "I mean so yeah let me try to say so that's the most useful thing we've seen examples where generics would have",
    "start": "1658000",
    "end": "1663320"
  },
  {
    "text": "helped and where we can uh make sure that our proposal really does help and",
    "start": "1663320",
    "end": "1668960"
  },
  {
    "text": "then you know there's been great ideas on syntax on um you know semantics and",
    "start": "1668960",
    "end": "1675320"
  },
  {
    "text": "uh and a lot of the ideas have been complicated but I think that they kind of helped us",
    "start": "1675320",
    "end": "1680440"
  },
  {
    "text": "hone in on kind of a common core of functionality and power that uh will",
    "start": "1680440",
    "end": "1686880"
  },
  {
    "text": "make this a useful addition to the language I think it was in the last year or two maybe as longer it could have",
    "start": "1686880",
    "end": "1692919"
  },
  {
    "text": "been um but I remember reading one of the I think it was somebody from the Google team actually had a good example of where using the empty interface was",
    "start": "1692919",
    "end": "1700200"
  },
  {
    "text": "actually causing performance issues and generics would have helped but it seemed like it really took us a while to",
    "start": "1700200",
    "end": "1705880"
  },
  {
    "text": "actually get to the point where people could provide real examples of when that happened is that true or am I just",
    "start": "1705880",
    "end": "1712000"
  },
  {
    "text": "missing examples no I think you're absolutely right it takes a while to understand of course these things it",
    "start": "1712000",
    "end": "1718240"
  },
  {
    "text": "takes a while to understand any language it takes a while to understand the performance implications of of interfaces of empty interfaces so yeah",
    "start": "1718240",
    "end": "1726279"
  },
  {
    "text": "you're absolutely right so do you think that's part of the reason that like I don't know maybe I'm misinterpreting but",
    "start": "1726279",
    "end": "1732039"
  },
  {
    "text": "it feels like generics are getting more of a focus now and I I would imagine that part of that might might be that",
    "start": "1732039",
    "end": "1737760"
  },
  {
    "text": "you're actually seeing examples where it makes more sense whereas in the past it was kind of like this would be nice but it's not important enough to prioritize",
    "start": "1737760",
    "end": "1743919"
  },
  {
    "text": "it I think there's some aspect to it to what you say yeah but I think that another part of the reason why generics",
    "start": "1743919",
    "end": "1749720"
  },
  {
    "text": "is uh getting more focused now is that we're actually getting to a point where we think we have a handle on the problem",
    "start": "1749720",
    "end": "1756200"
  },
  {
    "text": "uh I mean I of course most people have been using go very happily for many years I've been thinking about generics",
    "start": "1756200",
    "end": "1763360"
  },
  {
    "text": "for many years and um some of the earlier proposals have been published and they were all terrible and then",
    "start": "1763360",
    "end": "1769360"
  },
  {
    "text": "there were a bunch uh that were not published and they were even worse so um",
    "start": "1769360",
    "end": "1774519"
  },
  {
    "text": "you know so I I think that well we've I mean there there have been several unpublished proposals that I just sort",
    "start": "1774519",
    "end": "1780799"
  },
  {
    "text": "of would write up and think about and I would share just you know just to a couple people like to Robert and Russ",
    "start": "1780799",
    "end": "1786320"
  },
  {
    "text": "and they would say you know well this is this is pretty bad and uh I think that",
    "start": "1786320",
    "end": "1792320"
  },
  {
    "text": "what's happened is we finally gotten to the point um you know with a lot of help from a lot of people to something which",
    "start": "1792320",
    "end": "1798279"
  },
  {
    "text": "where the immediate reaction is not this is pretty bad but the immediate reaction is yeah maybe maybe we can get this to",
    "start": "1798279",
    "end": "1805039"
  },
  {
    "text": "something that will really work given that some of the um um the concerns around introducing um generics and and",
    "start": "1805039",
    "end": "1812480"
  },
  {
    "text": "the complexity that that it brings into tow um the do you think that the sort of",
    "start": "1812480",
    "end": "1818279"
  },
  {
    "text": "the current proposal is has reached a point where it it doesn't introduce too much of that complexity too much of the",
    "start": "1818279",
    "end": "1824519"
  },
  {
    "text": "burden on the user of of of these constructs to be able to sort of uh uh keep go feeling like go like not",
    "start": "1824519",
    "end": "1831720"
  },
  {
    "text": "introducing that that original complexity that that you know I think we all trying very hard not to not to that",
    "start": "1831720",
    "end": "1838000"
  },
  {
    "text": "sort of um get into go do do you think that the current proposal um um meets that standard yeah I I think I think",
    "start": "1838000",
    "end": "1844840"
  },
  {
    "text": "you've asked the essential question um we need to we need to answer that",
    "start": "1844840",
    "end": "1850120"
  },
  {
    "text": "question as a whole community so me personally yeah my answer is yes I think we have reached that balance but you",
    "start": "1850120",
    "end": "1857039"
  },
  {
    "text": "know I'm not the decider here um we've got to get to the point where we have an",
    "start": "1857039",
    "end": "1862559"
  },
  {
    "text": "implementation where people can try it out and then we have to see what a lot of people think I I think the",
    "start": "1862559",
    "end": "1868440"
  },
  {
    "text": "implementation's a huge part there because I know just looking at it it's like okay this looks okay but it's one",
    "start": "1868440",
    "end": "1874120"
  },
  {
    "text": "of those things until you kind of dive in you don't know you know what what it's actually going to feel like and if it's going to be just instinctive cuz",
    "start": "1874120",
    "end": "1880840"
  },
  {
    "text": "some things look simple from the outside and then they're not and other things look complex and then when you get",
    "start": "1880840",
    "end": "1886519"
  },
  {
    "text": "involved with them you're like oh this was actually pretty simple yeah I agree so our um Community slack channel is all",
    "start": "1886519",
    "end": "1894399"
  },
  {
    "text": "a Fizz uh people listening live asking questions and uh Maran asks uh how much",
    "start": "1894399",
    "end": "1900360"
  },
  {
    "text": "slower will go builds be anticipated to get and is are there any uh goals around",
    "start": "1900360",
    "end": "1906919"
  },
  {
    "text": "that Dylan Baro Barack follows up by saying he would be happy with 50 to 100%",
    "start": "1906919",
    "end": "1912880"
  },
  {
    "text": "and no more Ian if that's if that's possible well first first of all go builds that do not use generics should",
    "start": "1912880",
    "end": "1920200"
  },
  {
    "text": "not be affected at all um second let me say that um oh",
    "start": "1920200",
    "end": "1927000"
  },
  {
    "text": "sorry Ian do you mean do you mean writing generic code or even consuming generic code I mean even consuming",
    "start": "1927000",
    "end": "1934240"
  },
  {
    "text": "generic code so if you're I mean if an ordinary go an existing go program obviously doesn't use any generic code",
    "start": "1934240",
    "end": "1939840"
  },
  {
    "text": "the existing go program is not going to be any slower because generics are going to add into the language",
    "start": "1939840",
    "end": "1946080"
  },
  {
    "text": "um but uh but then um the current design",
    "start": "1946080",
    "end": "1951360"
  },
  {
    "text": "actually envisions a few different compilation strategies and uh we expect",
    "start": "1951360",
    "end": "1956760"
  },
  {
    "text": "that when it you know if it actually gets added to the language the compiler",
    "start": "1956760",
    "end": "1962240"
  },
  {
    "text": "is we're going to have to experiment with the compiler choosing different strategies for different kinds of cases",
    "start": "1962240",
    "end": "1968919"
  },
  {
    "text": "um so one strategy would be you know the slow version where we really do uh",
    "start": "1968919",
    "end": "1974760"
  },
  {
    "text": "recompile everything for each separate type type argument and I don't see a reason to use that strategy in most",
    "start": "1974760",
    "end": "1981799"
  },
  {
    "text": "cases um then there's a strategy of kind of approaching it more",
    "start": "1981799",
    "end": "1987519"
  },
  {
    "text": "like more like the way interfaces are implemented today but not the same because we don't want to have the same",
    "start": "1987519",
    "end": "1993840"
  },
  {
    "text": "allocation requirements that interfaces have but sort of to class type arguments",
    "start": "1993840",
    "end": "1999320"
  },
  {
    "text": "in different you know you can describe each type in terms of you know at the simplest level how many pointers it has",
    "start": "1999320",
    "end": "2006240"
  },
  {
    "text": "and so you can recompile each um each generic function",
    "start": "2006240",
    "end": "2011760"
  },
  {
    "text": "uh based on type arguments with different sets of pointers um and then if you if you do instantiate with a very",
    "start": "2011760",
    "end": "2018760"
  },
  {
    "text": "large type argument yeah maybe you do a special case for that but that's not going to happen very often so in that",
    "start": "2018760",
    "end": "2024799"
  },
  {
    "text": "case you'd compile each generic function say you know four times or eight times",
    "start": "2024799",
    "end": "2030840"
  },
  {
    "text": "but you know that doesn't mean that your compile is eight times slower because most functions are not generic functions",
    "start": "2030840",
    "end": "2037200"
  },
  {
    "text": "um so that's just an example of a couple of uh compilation strategies we could use so um you know I would say that if",
    "start": "2037200",
    "end": "2043440"
  },
  {
    "text": "the compiler got 100% slower that would be a failure we do not want to be that",
    "start": "2043440",
    "end": "2049878"
  },
  {
    "text": "much slower um I don't know if we could pursue generics if we really cost that",
    "start": "2049879",
    "end": "2055440"
  },
  {
    "text": "much compiled time for sort of ordinary programs I mean clearly you're going to",
    "start": "2055440",
    "end": "2060480"
  },
  {
    "text": "be able to write you know kind of torture programs that make the compiler",
    "start": "2060480",
    "end": "2065679"
  },
  {
    "text": "much slower there's no denying that but um but the",
    "start": "2065679",
    "end": "2071839"
  },
  {
    "text": "ordinary the ordinary case should not be uh should not be 100% slower I would",
    "start": "2071839",
    "end": "2078118"
  },
  {
    "text": "hope for say 25% slower I'm just making that up because we're a long way from a",
    "start": "2078119",
    "end": "2083480"
  },
  {
    "text": "serious implementation okay we won't hold you to it Ian but yeah no interesting well it's funny to hear",
    "start": "2083480",
    "end": "2089480"
  },
  {
    "text": "about all the different things you have to think about of course when when it comes to adding a feature to the language like I said we from the outside",
    "start": "2089480",
    "end": "2095839"
  },
  {
    "text": "often just think of it as the syntax and that's it um but of course there's lots more to it and I wonder also actually uh",
    "start": "2095839",
    "end": "2103720"
  },
  {
    "text": "Nathan Youngman in slack mentioned it doesn't say how old he is um it mentions that um the there might be more or asks",
    "start": "2103720",
    "end": "2112240"
  },
  {
    "text": "rather might there be compiler optimizations that could happen as well between interfaces and generics if we do",
    "start": "2112240",
    "end": "2118119"
  },
  {
    "text": "end up with something that runs or performs better interesting idea that's",
    "start": "2118119",
    "end": "2123280"
  },
  {
    "text": "an yeah that's an interesting idea I had not thought about it and I do not know",
    "start": "2123280",
    "end": "2128560"
  },
  {
    "text": "cool me [Music]",
    "start": "2128560",
    "end": "2137510"
  },
  {
    "text": "too this episode is brought to you by ghost CD with Native Integrations for kubernetes and a Helm chart to quickly",
    "start": "2138200",
    "end": "2145320"
  },
  {
    "text": "get started ghost CI is an easy choice for cloud native teams with ghost CI running on kubernetes you define your",
    "start": "2145320",
    "end": "2151720"
  },
  {
    "text": "build workflow and let go CD provision and scale build infrastructure on the Fly for you you ghost CD installs as a",
    "start": "2151720",
    "end": "2158880"
  },
  {
    "text": "kubernetes native application which allows for ease of operations easily upgrade and maintain ghost C using Helm",
    "start": "2158880",
    "end": "2165720"
  },
  {
    "text": "scale your build infrastructure elastically with a new elastic agent that uses kubernetes conventions to",
    "start": "2165720",
    "end": "2171200"
  },
  {
    "text": "dynamically scale G agents go CD also has first class integration with Docker",
    "start": "2171200",
    "end": "2176240"
  },
  {
    "text": "Registries easily compose track and visualize deployments on kubernetes",
    "start": "2176240",
    "end": "2181400"
  },
  {
    "text": "learn more and get started at g.org kubernetes again go.org",
    "start": "2181400",
    "end": "2188240"
  },
  {
    "text": "[Music]",
    "start": "2190020",
    "end": "2198000"
  },
  {
    "text": "kubernetes it's really interesting to hear the like the discussions around compilation times and things like that",
    "start": "2198000",
    "end": "2203960"
  },
  {
    "text": "like Matt said cuz it's just there are certain aspects that I would never think about because I don't tend to work on",
    "start": "2203960",
    "end": "2209720"
  },
  {
    "text": "projects where compilation time like you could literally 10x my compilation time and it wouldn't matter and there are",
    "start": "2209720",
    "end": "2215400"
  },
  {
    "text": "other people who are definitely not in that case but just I can imagine implementing this and and bringing about",
    "start": "2215400",
    "end": "2221640"
  },
  {
    "text": "new features has got to be very very complicated as a result of that John do do you write unit",
    "start": "2221640",
    "end": "2227720"
  },
  {
    "text": "tests yeah so 10x yes if they went slower but it's still wouldn't be that",
    "start": "2227720",
    "end": "2233359"
  },
  {
    "text": "much yeah I I just might not like run them every time I changed a couple lines of code instead I might just like sort",
    "start": "2233359",
    "end": "2239520"
  },
  {
    "text": "of run you know more specific things but it still wouldn't be I don't think it' be that much of an impact for me yeah",
    "start": "2239520",
    "end": "2245920"
  },
  {
    "text": "it's amazing actually that we we do I mean I when I hit save I do I do build",
    "start": "2245920",
    "end": "2252760"
  },
  {
    "text": "and run the tests and just if there's a failing test I show it in the in the IDE",
    "start": "2252760",
    "end": "2258160"
  },
  {
    "text": "just having that fast compile time and go it's something that was there kind of from the beginning and it's been up and",
    "start": "2258160",
    "end": "2263880"
  },
  {
    "text": "down but um it's another thing I think we take for granted but we would we",
    "start": "2263880",
    "end": "2269160"
  },
  {
    "text": "would miss it if it was gone yeah any any noticeable impact on on confile time",
    "start": "2269160",
    "end": "2275000"
  },
  {
    "text": "um I think you know as Ian sort of uh um um saying that would be would be",
    "start": "2275000",
    "end": "2280440"
  },
  {
    "text": "considered sort of a a big hit right um for for the language and and for the compiler and for a workflow developer",
    "start": "2280440",
    "end": "2286920"
  },
  {
    "text": "workflow right so I don't want to have to think about oh if I'm using generics and then my my my my workflow is going",
    "start": "2286920",
    "end": "2292520"
  },
  {
    "text": "to be impacted by that right that that I think that's I don't think that's something anybody wants yeah and it",
    "start": "2292520",
    "end": "2297560"
  },
  {
    "text": "sounds like it that that is in their minds and that's agree yeah I think that is it is important the other thing of",
    "start": "2297560",
    "end": "2304280"
  },
  {
    "text": "course is you know I hear a lot of people they avoid using defer because",
    "start": "2304280",
    "end": "2309400"
  },
  {
    "text": "defer has a kind of somewhat you know small performance hit and then I find out about the case that they're using it",
    "start": "2309400",
    "end": "2315560"
  },
  {
    "text": "in and there's no way it's going to make the slightest bit of difference um people C do get a little bit I think",
    "start": "2315560",
    "end": "2321960"
  },
  {
    "text": "obsessed with well can I shave off every little bit of performance out of something um and actually readability",
    "start": "2321960",
    "end": "2329119"
  },
  {
    "text": "you know what about the performance of you as a developer fixing that code later that what about that performance",
    "start": "2329119",
    "end": "2335160"
  },
  {
    "text": "yeah yeah absolutely right on the defer front though since you mentioned it I'll plug that in",
    "start": "2335160",
    "end": "2340359"
  },
  {
    "text": "114 I think defers are going to really be a lot cheaper there's some active work going on in that area I've not been",
    "start": "2340359",
    "end": "2347400"
  },
  {
    "text": "paying for mine already should I have been paying somebody every time I use defer I almost would by the way because",
    "start": "2347400",
    "end": "2353480"
  },
  {
    "text": "it's that good it's my favorite go keyword for sure but yeah that's that's",
    "start": "2353480",
    "end": "2359240"
  },
  {
    "text": "exciting see that's what I love is while we you know while the go team are working on making the standard Library",
    "start": "2359240",
    "end": "2366000"
  },
  {
    "text": "better making the compiler tools and all that better we can without doing anything just sort of reap all those",
    "start": "2366000",
    "end": "2372040"
  },
  {
    "text": "benefits I really kind of love the fact that um you all working on that stuff on our behalf so hard so thanks for that",
    "start": "2372040",
    "end": "2378440"
  },
  {
    "text": "for sure well you're welcome but you know a lot of the stuff is not coming from the go team a lot of improvements",
    "start": "2378440",
    "end": "2383839"
  },
  {
    "text": "are coming from uh other people as well it's uh we're uh we're doing a lot of",
    "start": "2383839",
    "end": "2389119"
  },
  {
    "text": "coordination but a lot of the work is coming from outside so thanks to everybody that's great to hear pretty",
    "start": "2389119",
    "end": "2394880"
  },
  {
    "text": "cool and and the other thing too is that there's no I don't think there's anything sort of driving um sort of the",
    "start": "2394880",
    "end": "2401440"
  },
  {
    "text": "the usage of the sort of the the versioning right the nomenclature around sort of go-to like I think the the the",
    "start": "2401440",
    "end": "2406680"
  },
  {
    "text": "changes being introduced with you know contracts um and sort of uh um generics",
    "start": "2406680",
    "end": "2412440"
  },
  {
    "text": "is backwards compatible right and basically still keeping the go on promise that your stuff is still going",
    "start": "2412440",
    "end": "2417839"
  },
  {
    "text": "to work and I think that's just amazing yeah that's a big goal of ours so that means it could go into go",
    "start": "2417839",
    "end": "2425640"
  },
  {
    "text": "one of the up go releases it doesn't have to wait for goto then um yeah goto is uh more of a uh a",
    "start": "2425640",
    "end": "2434480"
  },
  {
    "text": "conceptual idea at this point I think um I think we're going to try to be as go",
    "start": "2434480",
    "end": "2439520"
  },
  {
    "text": "one compatible as we can um going forward you know if we have to break",
    "start": "2439520",
    "end": "2444760"
  },
  {
    "text": "something then we can break something but we're going to try not to and so you",
    "start": "2444760",
    "end": "2450079"
  },
  {
    "text": "know maybe at some point maybe after uh maybe if generics lands you know maybe",
    "start": "2450079",
    "end": "2455160"
  },
  {
    "text": "if we uh get more airor handling improvements in maybe once modules are set maybe we'll",
    "start": "2455160",
    "end": "2460200"
  },
  {
    "text": "call it goto you know it might be a good marketing move might sound good might give people another reason to look at",
    "start": "2460200",
    "end": "2465920"
  },
  {
    "text": "the language but it doesn't mean that go1 programs are going to stop working I mean the example I like to use is that",
    "start": "2465920",
    "end": "2472280"
  },
  {
    "text": "you know you write a c program not literally from 1970 but a c program from",
    "start": "2472280",
    "end": "2477520"
  },
  {
    "text": "about 1980 still runs today there's never been a",
    "start": "2477520",
    "end": "2482560"
  },
  {
    "text": "C2 so uh why not emulate that it's a great successful language yeah well",
    "start": "2482560",
    "end": "2488880"
  },
  {
    "text": "absolutely in fact I like the idea that this goto could even have things removed",
    "start": "2488880",
    "end": "2495359"
  },
  {
    "text": "um but of course that would then mean breaking changes but those are the sorts",
    "start": "2495359",
    "end": "2500480"
  },
  {
    "text": "of break breaking changes I like to see is when we make things even simpler",
    "start": "2500480",
    "end": "2507119"
  },
  {
    "text": "agreed like removing Panic maybe yeah yeah remove Global",
    "start": "2507119",
    "end": "2514040"
  },
  {
    "text": "State you guys are getting real greedy yeah just randomize Global State you know how they had to introduce random to",
    "start": "2514040",
    "end": "2520440"
  },
  {
    "text": "the map cuz people were abusing it by the way I will I just abuse it now to",
    "start": "2520440",
    "end": "2525520"
  },
  {
    "text": "get random things now but I'm abusing it in a different way um yeah it'll just be",
    "start": "2525520",
    "end": "2531160"
  },
  {
    "text": "the same so I one of the questions I have is",
    "start": "2531160",
    "end": "2536240"
  },
  {
    "text": "so we've talked a little bit about how like this is going to change the language and we've talked about how the community people when they come to go",
    "start": "2536240",
    "end": "2542760"
  },
  {
    "text": "they want to use channels a lot even though it's not the right tool um one of the concerns I would definitely",
    "start": "2542760",
    "end": "2548119"
  },
  {
    "text": "have and I think a lot of people will have is that the minute we have generics people are going to want to use them so",
    "start": "2548119",
    "end": "2553359"
  },
  {
    "text": "they're going to write these libraries that are you know generic implementations of data structures or",
    "start": "2553359",
    "end": "2558880"
  },
  {
    "text": "whatever else and I I think one of the things that the go Community is good about right now is not importing stuff",
    "start": "2558880",
    "end": "2565599"
  },
  {
    "text": "all the time like they'll write something on their own but if we have generics do you think that's going to affect that mindset some well I don't",
    "start": "2565599",
    "end": "2572920"
  },
  {
    "text": "know I mean I think it's a good question I guess I don't know or what do you think yeah well I mean I think that",
    "start": "2572920",
    "end": "2581599"
  },
  {
    "text": "there's we're going to we we already have a space where we need to have a way",
    "start": "2581599",
    "end": "2587440"
  },
  {
    "text": "to be able to talk about like the quality of packages there's there's a few good talks I've seen uh Julie Q did",
    "start": "2587440",
    "end": "2594760"
  },
  {
    "text": "a talk about how to select dependencies in a sort of um conscious way rather",
    "start": "2594760",
    "end": "2601160"
  },
  {
    "text": "than just take anything from anywhere but have a look at the projects see if they seem robust if they seem used are",
    "start": "2601160",
    "end": "2607720"
  },
  {
    "text": "there tests you know that how does the API look how are the docks all that just sort of taking all of that into account",
    "start": "2607720",
    "end": "2614680"
  },
  {
    "text": "that is going to be more important because it' be it's going to be too tempting I think once if generics got",
    "start": "2614680",
    "end": "2621280"
  },
  {
    "text": "into the language it's going to be tempting we're going to see a big spring up of libraries doing all kinds of awesome",
    "start": "2621280",
    "end": "2627800"
  },
  {
    "text": "things and we're going to then have a sort of abundance of this to sort of sift through and we that's a general",
    "start": "2627800",
    "end": "2634720"
  },
  {
    "text": "problem I think that we still have anyway in the community is knowing which are the which are the dependencies we",
    "start": "2634720",
    "end": "2640800"
  },
  {
    "text": "can trust and which which are just more sort of playgroundyoutube",
    "start": "2640800",
    "end": "2647119"
  },
  {
    "text": "[Music]",
    "start": "2656030",
    "end": "2665929"
  },
  {
    "text": "you know the abuse of channels for example you know the sort of jumping into concurrency using all the bits and pieces you can whether your program need",
    "start": "2666079",
    "end": "2672680"
  },
  {
    "text": "needs it or not like a lot of these sort of things we've sort of worked it out of our system so to speak and there you",
    "start": "2672680",
    "end": "2678240"
  },
  {
    "text": "know there's enough sort of um material out there so to sort of educate right uh",
    "start": "2678240",
    "end": "2683359"
  },
  {
    "text": "you know try to do this avoid doing that you know for reason X Y and Z like over the years we've sort of developed um um",
    "start": "2683359",
    "end": "2689599"
  },
  {
    "text": "basically what we call idiomatic go right basically to to sort of adopt certain approaches and I think yes in",
    "start": "2689599",
    "end": "2695640"
  },
  {
    "text": "the beginning I think you're going to see an explosion of things that are that using the you know contracts and using sort of the everything all the bells and",
    "start": "2695640",
    "end": "2701599"
  },
  {
    "text": "whistles that that generics offer but I think you're going to see sort of a settling down right once we've shut",
    "start": "2701599",
    "end": "2707720"
  },
  {
    "text": "ourselves in the foot enough times to basically say well like this is now basically part of idiomatic go as as all",
    "start": "2707720",
    "end": "2715440"
  },
  {
    "text": "Gophers understanding kind of thing um but what I am what I am concerned a little bit about is sort of um um",
    "start": "2715440",
    "end": "2722720"
  },
  {
    "text": "newbies folks that are either coming from um different languages or that are learning um programming for the very",
    "start": "2722720",
    "end": "2728319"
  },
  {
    "text": "first time um and they happen to be using go to do so um basically how how to teach that concept because it",
    "start": "2728319",
    "end": "2734880"
  },
  {
    "text": "requires it requires that you sort of um really think about different things that",
    "start": "2734880",
    "end": "2740079"
  },
  {
    "text": "sort of multiple layers so to speak um to really understand where is this useful I think in the the uh on the go",
    "start": "2740079",
    "end": "2747240"
  },
  {
    "text": "Blog the W generics um post does a pretty good job of sort of introducing okay these are this this is how you",
    "start": "2747240",
    "end": "2753240"
  },
  {
    "text": "would do it today right you have to have you know like a reverse for for string like in Reverse for integers and and",
    "start": "2753240",
    "end": "2758760"
  },
  {
    "text": "this is how generic can help you sort of remove some of that boiler plate right so these kinds of things are going to be",
    "start": "2758760",
    "end": "2764319"
  },
  {
    "text": "like critical for for teaching people how to um um properly use these language",
    "start": "2764319",
    "end": "2769480"
  },
  {
    "text": "features and I think that's going to happen sort of naturally I guess like for me one of the examples I kind of",
    "start": "2769480",
    "end": "2775079"
  },
  {
    "text": "think of is all of the routers and like web Frameworks and things like that that have sprung up around go and like I",
    "start": "2775079",
    "end": "2782720"
  },
  {
    "text": "think it would be nice if there was something like like there's the gorilla kit that has all these different web tools that you can use um at this point",
    "start": "2782720",
    "end": "2789200"
  },
  {
    "text": "I think it's safe to say that they're all well battle tested they're all pretty good you know things to use um",
    "start": "2789200",
    "end": "2795000"
  },
  {
    "text": "and having that for generics and some data structures I think would be useful but I also worry that you might get this",
    "start": "2795000",
    "end": "2800839"
  },
  {
    "text": "case where we have 20 different implementations like we have 20 different routers that are all benchmarking against each other and just",
    "start": "2800839",
    "end": "2806680"
  },
  {
    "text": "focusing on the wrong details um so like that's on one hand I I do really hope the community figures it out and we you",
    "start": "2806680",
    "end": "2813240"
  },
  {
    "text": "know come up with some sort of consensus but I also see how we are on other fronts and I'm like I'm not 100%",
    "start": "2813240",
    "end": "2819400"
  },
  {
    "text": "confident that that's going to happen yeah that's not really a problem with generics as suppose that's a community",
    "start": "2819400",
    "end": "2825559"
  },
  {
    "text": "that's like a community thing I just I hope it's not worse with generics because I like you know with with",
    "start": "2825559",
    "end": "2831000"
  },
  {
    "text": "routers you'd think there's really not that much you can make different like there's really not but then like with data structures there's a lot of",
    "start": "2831000",
    "end": "2837520"
  },
  {
    "text": "different things you can change yeah true we'll just have to see I think um",
    "start": "2837520",
    "end": "2843599"
  },
  {
    "text": "but at least see one of the things one of the pieces of advice I like to give and this is this is some almost an",
    "start": "2843599",
    "end": "2850480"
  },
  {
    "text": "unofficial test that we can apply to any any suggestion of a change actually is",
    "start": "2850480",
    "end": "2855599"
  },
  {
    "text": "I'll tell people like somebody talked about the the confusion they had between",
    "start": "2855599",
    "end": "2861040"
  },
  {
    "text": "arrays and slices and I'd say well just learn slices for now and then you can be productive and then later you can figure",
    "start": "2861040",
    "end": "2867720"
  },
  {
    "text": "out what's going on and how it works under the hood when you need it and it's kind of like just in time learning it's",
    "start": "2867720",
    "end": "2873240"
  },
  {
    "text": "sort of the best time to learn it as well because you have all the context of why you need to know it so I'll tell",
    "start": "2873240",
    "end": "2878520"
  },
  {
    "text": "people well just don't worry about it and if you can say don't worry about it and and generics the the latest proposal",
    "start": "2878520",
    "end": "2885040"
  },
  {
    "text": "definitely passes this test don't worry about it um like you say a few cases",
    "start": "2885040",
    "end": "2890240"
  },
  {
    "text": "when reading the docs you're going to see these generic functions they're going to look a little bit different um",
    "start": "2890240",
    "end": "2896960"
  },
  {
    "text": "so you'll have to know how to invoke them but uh especially the case where it's the the type is inferred where you",
    "start": "2896960",
    "end": "2903280"
  },
  {
    "text": "can just sort of almost ignore that it's even generic in the first place that it has that going for it and so I think",
    "start": "2903280",
    "end": "2909280"
  },
  {
    "text": "that that will help for sure with this I certainly hope so so do you think we",
    "start": "2909280",
    "end": "2914920"
  },
  {
    "text": "could make tools as a community that would make that more likely to happen um I guess what I'm kind of thinking is",
    "start": "2914920",
    "end": "2920720"
  },
  {
    "text": "Matt you had mentioned like you don't want to early optimize you don't want to uh you know try to make something a generic implementation before you've",
    "start": "2920720",
    "end": "2927559"
  },
  {
    "text": "even written it once so if we had tools that made it very easy to take like a um you know you wrote like a tree that was",
    "start": "2927559",
    "end": "2933760"
  },
  {
    "text": "self-balancing tree and like we had some way to to easily turn that into a generic implementation after we've written a specific implementation for a",
    "start": "2933760",
    "end": "2940520"
  },
  {
    "text": "specific type like could tools like that help the community sort of stay on track and not do that early optimization",
    "start": "2940520",
    "end": "2947760"
  },
  {
    "text": "that's an interesting idea I mean that tool would be pretty easy to write I think uh whether people would find it",
    "start": "2947760",
    "end": "2953160"
  },
  {
    "text": "helpful I don't know yeah maybe John maybe you could contribute it see Ian",
    "start": "2953160",
    "end": "2958640"
  },
  {
    "text": "says it'll be easy to write I suspect it'll be much easier for him to write than for me not necessarily",
    "start": "2958640",
    "end": "2966920"
  },
  {
    "text": "yeah I don't know well I I probably would bet on that being the case but yeah I was also thinking about handlers",
    "start": "2966920",
    "end": "2972680"
  },
  {
    "text": "and HTTP and what might happen there even with uh and also like um context I",
    "start": "2972680",
    "end": "2980400"
  },
  {
    "text": "don't know if that whether we're going to see methods that will have a generic",
    "start": "2980400",
    "end": "2986119"
  },
  {
    "text": "flavor to them like the value stuff as I don't I don't know if that'll even work",
    "start": "2986119",
    "end": "2991280"
  },
  {
    "text": "would it be able to just have a method that's generic within a type that is",
    "start": "2991280",
    "end": "2996400"
  },
  {
    "text": "or um in the current design draft no that's not permitted um and the reason",
    "start": "2996400",
    "end": "3003119"
  },
  {
    "text": "for that is because it adds all this um it makes it more confusing to understand",
    "start": "3003119",
    "end": "3008280"
  },
  {
    "text": "when uh the type with the generic method implements an interface or possibly a",
    "start": "3008280",
    "end": "3013760"
  },
  {
    "text": "generic interface um so we kind of got stuck on a lot of confusing issues there",
    "start": "3013760",
    "end": "3019559"
  },
  {
    "text": "and we just said you know it's not necessary because you can always write a generic function instead",
    "start": "3019559",
    "end": "3026359"
  },
  {
    "text": "so we're just going to leave out methods maybe it's not impossible that they could be added to the language in the",
    "start": "3026359",
    "end": "3031760"
  },
  {
    "text": "future if we do understand it but I don't think they're going to be in the first version I did have one question I",
    "start": "3031760",
    "end": "3038240"
  },
  {
    "text": "know like in one of the examples you had a contract that was like the numeric value or something like that where it's",
    "start": "3038240",
    "end": "3043839"
  },
  {
    "text": "basically all the different you know integer types and different numbers I assume for things like that that",
    "start": "3043839",
    "end": "3049079"
  },
  {
    "text": "sometimes looking at zero values is useful uh do you see that I guess what",
    "start": "3049079",
    "end": "3055160"
  },
  {
    "text": "I'm kind kind of wondering is like how do you do comparisons with constant values like that is that just going to change the way the compiler looks at",
    "start": "3055160",
    "end": "3061520"
  },
  {
    "text": "that or you know is there going to be something special there",
    "start": "3061520",
    "end": "3067079"
  },
  {
    "text": "um no I mean again it goes back to the different compilation strategies you can use I mean there's a couple of different",
    "start": "3067079",
    "end": "3073200"
  },
  {
    "text": "ways that the compiler can handle it I mean from a language perspective I think it's pretty straightforward you know if",
    "start": "3073200",
    "end": "3078799"
  },
  {
    "text": "that if all the types that the uh contract permits permit a comparison",
    "start": "3078799",
    "end": "3084000"
  },
  {
    "text": "with zero then you can write a comparison with zero um as to how exactly that's going to be compiled um",
    "start": "3084000",
    "end": "3089640"
  },
  {
    "text": "it could be you know there's going to be a limited number of types maybe you compile it for each type or uh maybe you",
    "start": "3089640",
    "end": "3095680"
  },
  {
    "text": "do a more um you know sort of a method likee approach we effectively pass in here's how you're compared to zero I'm",
    "start": "3095680",
    "end": "3101680"
  },
  {
    "text": "not sure what the best solution is going to be at compile time well I think",
    "start": "3101680",
    "end": "3107440"
  },
  {
    "text": "that's all the time we have for today um thank you so much to our special guest",
    "start": "3107440",
    "end": "3113720"
  },
  {
    "text": "Ian Lance Taylor who is working on the generics proposals and uh Ian doing a",
    "start": "3113720",
    "end": "3119359"
  },
  {
    "text": "great job I think I especially do like the latest proposal if you haven't seen it check it out it's all over the",
    "start": "3119359",
    "end": "3125319"
  },
  {
    "text": "Internet and in talk is also now available if you search for gophercon um",
    "start": "3125319",
    "end": "3130839"
  },
  {
    "text": "gophercon generics 2019 you'll find Ian's talk and Johnny's talk too uh and",
    "start": "3130839",
    "end": "3136760"
  },
  {
    "text": "mine but it would be CR it would be CR of me to plug my own one Matt's never",
    "start": "3136760",
    "end": "3141960"
  },
  {
    "text": "done something like that it's not my style it's not my style but my book is still",
    "start": "3141960",
    "end": "3147440"
  },
  {
    "text": "available okay so uh yeah thank you very much as well to uh my other panelists John",
    "start": "3147440",
    "end": "3154920"
  },
  {
    "text": "Calhoun Johnny bosico um gentlemen thank you very much until next time",
    "start": "3154920",
    "end": "3161240"
  },
  {
    "text": "goodbye all right thank you for tuning in to this week's episode of go time if you're not yet hang with us in go for",
    "start": "3162880",
    "end": "3169040"
  },
  {
    "text": "slack we have a channel called go time FM look it up you'll find us hang with us during the live shows connect with",
    "start": "3169040",
    "end": "3175559"
  },
  {
    "text": "other members of the community share stories share codes share coffee recipes whatever it's a lot of fun also we have",
    "start": "3175559",
    "end": "3182559"
  },
  {
    "text": "discussions at changel law.com on every episode head to Chang law.com gotime",
    "start": "3182559",
    "end": "3188079"
  },
  {
    "text": "find this episode and discuss it with the community also thanks to fastly our bandwidth partner robbar for helping us",
    "start": "3188079",
    "end": "3194280"
  },
  {
    "text": "move fast and fix things and Leno for hosting the change law platform our music is produced by the mysterious",
    "start": "3194280",
    "end": "3200559"
  },
  {
    "text": "break master cylinder and if you want to hear more awesome podcasts like this subscribe to our Master feed it's one",
    "start": "3200559",
    "end": "3206599"
  },
  {
    "text": "feed to rule them all plus some extras that only hit the master feed and to Chang law.com slm or search for change",
    "start": "3206599",
    "end": "3213920"
  },
  {
    "text": "law master in your podcast client you'll find us thanks for tuning in we'll see you next",
    "start": "3213920",
    "end": "3219710"
  },
  {
    "text": "[Music]",
    "start": "3219710",
    "end": "3234160"
  },
  {
    "text": "week [Music]",
    "start": "3234160",
    "end": "3259280"
  },
  {
    "text": "TR",
    "start": "3264079",
    "end": "3267079"
  }
]