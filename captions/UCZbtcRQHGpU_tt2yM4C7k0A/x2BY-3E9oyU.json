[
  {
    "text": "this is John Rig you're listening to the change [Music]",
    "start": "160",
    "end": "13759"
  },
  {
    "text": "log push welcome to the change log episode",
    "start": "14759",
    "end": "20359"
  },
  {
    "text": "0.29 I'm Adam stovak and I'm W edelyn this is the Chang log we cover what fresh and new in the world of Open",
    "start": "20359",
    "end": "26439"
  },
  {
    "text": "Source if you found us on iTunes we're also in the web at the changelog and we're also up in GitHub yep head to",
    "start": "26439",
    "end": "32599"
  },
  {
    "text": "github.com exlore you'll find some trending repost some feature repost from our blog as well as the audio podcast",
    "start": "32599",
    "end": "39239"
  },
  {
    "text": "and if you're on Twitter go to twitter.com changelog show and hit the follow button and also follow Adam stack",
    "start": "39239",
    "end": "47399"
  },
  {
    "text": "and I'm penguin p n gwy NN fun interview this week with a guest host Michael",
    "start": "47399",
    "end": "52559"
  },
  {
    "text": "Smith from Australia we sit down with Jeremy ashkinos from document Cloud you may",
    "start": "52559",
    "end": "58480"
  },
  {
    "text": "remember from episode five yeah episode 5 yeah that was a lot of fun talked about uh what do we talk about in that",
    "start": "58480",
    "end": "63559"
  },
  {
    "text": "episode underscore.js you don't have the episodes are memorized my bad I'm sorry",
    "start": "63559",
    "end": "68920"
  },
  {
    "text": "there's what 29 of them now so there you go talking about coffee script this time so back to JavaScript uh you know we're",
    "start": "68920",
    "end": "74360"
  },
  {
    "text": "big fans of haml and zass and those are pre-processors WR HTML and and CSS",
    "start": "74360",
    "end": "79920"
  },
  {
    "text": "coffee script is kind of the same thing for JavaScript it allows you to write JavaScript in another way provide some",
    "start": "79920",
    "end": "86439"
  },
  {
    "text": "additional syntax Time Savers and enhancements to to Output JavaScript to",
    "start": "86439",
    "end": "92600"
  },
  {
    "text": "either using the browser in the server side with something like maybe a I don't know node.js cool are you using this",
    "start": "92600",
    "end": "98119"
  },
  {
    "text": "anywhere I'm using it in titanium personally which we've talked about I believe uh sevenish episode sevenish or",
    "start": "98119",
    "end": "104880"
  },
  {
    "text": "something yeah you don't know the episodes when I don't I don't have them rememorized so uh yeah I'm using it to",
    "start": "104880",
    "end": "111719"
  },
  {
    "text": "do some iPhone and iPad stuff lately very cool well you're you're a very out there kind of guy always mixing a bunch",
    "start": "111719",
    "end": "117600"
  },
  {
    "text": "of products into the mix of your work so this is kind of fun so is it fun to work with it is you know I'm a mashup of",
    "start": "117600",
    "end": "124159"
  },
  {
    "text": "design and development and my projects are a mashup of every fun toy that I want to play with cool and so Jeremy",
    "start": "124159",
    "end": "130080"
  },
  {
    "text": "gives us a lot of good nuggets in this interview he does um some insight into the design of the language and kind of",
    "start": "130080",
    "end": "137280"
  },
  {
    "text": "uh the inspiration behind it and some of the uh languages that he ripped off from",
    "start": "137280",
    "end": "143280"
  },
  {
    "text": "to uh to provide us this cool new syntax ripped off all right cool so it's a good interview that I suppose let's get to it",
    "start": "143280",
    "end": "149519"
  },
  {
    "text": "all right [Music]",
    "start": "149519",
    "end": "157149"
  },
  {
    "text": "man all right we're joined this afternoon by Jeremy ashkinos from document Cloud going to talk about",
    "start": "158519",
    "end": "164800"
  },
  {
    "text": "coffee script also should mention we've got a guest host today Michael Smith from way down under say hello Michael hi",
    "start": "164800",
    "end": "172159"
  },
  {
    "text": "so Jeremy I want you to introduce yourselves to the introduce yourself rather to the folks that maybe didn't",
    "start": "172159",
    "end": "177319"
  },
  {
    "text": "catch episode Z five that was uh document Cloud andore JS right so it's",
    "start": "177319",
    "end": "184480"
  },
  {
    "text": "been I guess it's been a little over six months since I talked to you guys the first time about the stuff that we were doing with document Cloud but um so",
    "start": "184480",
    "end": "192000"
  },
  {
    "text": "basically um I'm working on this project that is to make an online um repository",
    "start": "192000",
    "end": "197879"
  },
  {
    "text": "of primary source documents that news organizations contribute and the journalists get to use to do their",
    "start": "197879",
    "end": "203120"
  },
  {
    "text": "document based research and when they're done writing their story they put the documents online alongside the story for",
    "start": "203120",
    "end": "208439"
  },
  {
    "text": "extra context and so that's a large JavaScript application and we're doing a ton of client side JavaScript to to to",
    "start": "208439",
    "end": "214040"
  },
  {
    "text": "show the entities that are present in the documents and to show the dates that are present on timeline and uh and I've",
    "start": "214040",
    "end": "220159"
  },
  {
    "text": "been using JavaScript heavily on the client side um for a long time and I'm very excited about about what's going to",
    "start": "220159",
    "end": "226200"
  },
  {
    "text": "happen when we can start using the same language on both the server side and the client side and you know not only is it",
    "start": "226200",
    "end": "231239"
  },
  {
    "text": "going to be the same language but it's also going to be a very nice language and it's going to be very fast language and so I've had this kind of idea",
    "start": "231239",
    "end": "237959"
  },
  {
    "text": "kicking around the back of my head for a long time um about you know what would JavaScript look like if it could look like anything you wanted it to look like",
    "start": "237959",
    "end": "243920"
  },
  {
    "text": "you know if if it hadn't been basically stuck in a place where you had all the browsers trying to having to agree on",
    "start": "243920",
    "end": "250640"
  },
  {
    "text": "what JavaScript would be in order to make any progress if it had been a language that that had evolved what",
    "start": "250640",
    "end": "256239"
  },
  {
    "text": "could it look like so that's kind of what copy script was and it was just for fun sort of and it still is it's it's a it's for fun I'm not trying to sell it",
    "start": "256239",
    "end": "262840"
  },
  {
    "text": "or to build a business out of it or to persuade you to use it it's a thought experiment about about what JavaScript",
    "start": "262840",
    "end": "267880"
  },
  {
    "text": "could look like potentially and so yeah so that's what we're going to talk about today let's talk about what it looks like so what is the syntax influence of",
    "start": "267880",
    "end": "275960"
  },
  {
    "text": "coffee script there's there's actually been a whole bunch it's been kind of fun so my my own background is mostly doing",
    "start": "275960",
    "end": "281759"
  },
  {
    "text": "Ruby and JavaScript stuff with a little bit of java and uh but coffee script I guess people think that it looks a lot",
    "start": "281759",
    "end": "287600"
  },
  {
    "text": "more like python than it does like Ruby these days so it's got um it's got basically simple the regular simple",
    "start": "287600",
    "end": "293919"
  },
  {
    "text": "scripting language syntax that you're used to um but it uses significant white space to limit blocks so if you have a function or you have a class or you have",
    "start": "293919",
    "end": "300840"
  },
  {
    "text": "an array or switch statement or an IFL you use um whites space and indentation to Del liit the start and the end of",
    "start": "300840",
    "end": "306880"
  },
  {
    "text": "that and of course you can wrap it in parenthesis if it's not totally clear what you're up to and um but there's",
    "start": "306880",
    "end": "312479"
  },
  {
    "text": "also been a strong um bunch of contributions from the functional programming community and from hasle in",
    "start": "312479",
    "end": "318160"
  },
  {
    "text": "particular so there's been a whole bunch of haskers who have come on and have added features and have contributed both",
    "start": "318160",
    "end": "323319"
  },
  {
    "text": "sytax and implementation so I'd say there's a big big strain of that in there as well okay so you're since it",
    "start": "323319",
    "end": "329960"
  },
  {
    "text": "compiles down to JavaScript is there anything that you support in uh Coffey",
    "start": "329960",
    "end": "335919"
  },
  {
    "text": "script that you don't actually support in JavaScript or things that you can't sort of get access to because you",
    "start": "335919",
    "end": "342919"
  },
  {
    "text": "because you're cross compiling right so so an important thing to mention here is that is that uh cycript is a very um a",
    "start": "342919",
    "end": "351039"
  },
  {
    "text": "very limited language it's not like you have complete Freedom you're not working with C you're not working with assembly you can't do anything you want to you",
    "start": "351039",
    "end": "357440"
  },
  {
    "text": "can't Implement new new constructs or new semantics um very easily because",
    "start": "357440",
    "end": "363039"
  },
  {
    "text": "it's a it's a source to Source language and not only is it source to Source but we're trying to keep the compil JavaScript very clean and very readable",
    "start": "363039",
    "end": "370240"
  },
  {
    "text": "and in a perfect world if we were doing if we had everything worked out correctly then you know the the the",
    "start": "370240",
    "end": "375440"
  },
  {
    "text": "JavaScript that gets generated by the Coffey script compiler would be the code that you would have written anyway if you had done it by hand or something",
    "start": "375440",
    "end": "381520"
  },
  {
    "text": "very close to that so that's our goal um and so because of that there's a lot of things that we can't Implement a very",
    "start": "381520",
    "end": "387240"
  },
  {
    "text": "simple one that has actually come up several times before has been um indexing into an array it would be great",
    "start": "387240",
    "end": "392759"
  },
  {
    "text": "in JavaScript if you could index into array with a negative number and and get the um value off the end so instead of",
    "start": "392759",
    "end": "398479"
  },
  {
    "text": "having to do array array. length minus one to get the last element you could just say array negative 1 and get back",
    "start": "398479",
    "end": "405039"
  },
  {
    "text": "the final one but that's something that we could support naively in in Coffey script you know if you actually use a",
    "start": "405039",
    "end": "411000"
  },
  {
    "text": "literal number but because you could pass a variable in as the index or a function in there's absolutely no way for us to reliably do negative array",
    "start": "411000",
    "end": "418479"
  },
  {
    "text": "indexing um without actually changing the runtime which we can't do so that's just a very simple example of of a tiny",
    "start": "418479",
    "end": "424240"
  },
  {
    "text": "tiny feature that would take two seconds if we had access to the runtime but we don't so we can't implement it do you",
    "start": "424240",
    "end": "429440"
  },
  {
    "text": "actually need to learn JavaScript to write coffee script or can you just learn coffee script and forget about the",
    "start": "429440",
    "end": "435759"
  },
  {
    "text": "JavaScript um right I mean so that's kind that's that's more of a documentation question I think than uh",
    "start": "435759",
    "end": "441080"
  },
  {
    "text": "than an actual code question so you could you definitely could learn just the coffee script semantics which are",
    "start": "441080",
    "end": "446560"
  },
  {
    "text": "slightly different than than JavaScript and I can get into what those different are in a second um but right now the",
    "start": "446560",
    "end": "451800"
  },
  {
    "text": "documentation is basically a list of the ways in which it differs from JavaScript you know you're using the JavaScript",
    "start": "451800",
    "end": "457080"
  },
  {
    "text": "runtime JavaScript functions behave the same way you know numbers behave the same way um and basically all the",
    "start": "457080",
    "end": "463840"
  },
  {
    "text": "semantics are JavaScript semantics um so so yeah so right now it's basically you know JavaScript",
    "start": "463840",
    "end": "469120"
  },
  {
    "text": "here's a cleaner way to write it is the idea you know I'm a big fan I'm using it in a couple of projects now and when I",
    "start": "469120",
    "end": "476120"
  },
  {
    "text": "explain it to to folks that haven't seen it the example that I give is it's you know is haml is to HTML and SAS is to",
    "start": "476120",
    "end": "483240"
  },
  {
    "text": "CSS coffeescript is to JavaScript is that a fair statement um I'm not sure actually how fair that is because I",
    "start": "483240",
    "end": "490000"
  },
  {
    "text": "think the interesting thing about that comparison which of course has been what it's been since the beginning um is that you know with with CSS and with HTML you",
    "start": "490000",
    "end": "497759"
  },
  {
    "text": "have basically static languages and you're writing abbreviations that expand into larger formats and I think with",
    "start": "497759",
    "end": "503440"
  },
  {
    "text": "something like Coffey script you're actually compiling into programming language it goes a little bit beyond that because you can actually start",
    "start": "503440",
    "end": "509319"
  },
  {
    "text": "start to change you know the semantics of the code and change the way you would have written things it's not just a onetoone expansion you can actually",
    "start": "509319",
    "end": "515839"
  },
  {
    "text": "start to write things in a little bit of a different way um so to get into that a little bit um there's kind of I think",
    "start": "515839",
    "end": "522240"
  },
  {
    "text": "three core um aspects to Coffey script there's the syntax changes so at the at",
    "start": "522240",
    "end": "528680"
  },
  {
    "text": "the basic level it's a cleaner a you know you have to type less you don't have to type as many parentheses you",
    "start": "528680",
    "end": "533720"
  },
  {
    "text": "don't have to type as many semicolons or brackets um just to write what you would have written in JavaScript at the second",
    "start": "533720",
    "end": "539680"
  },
  {
    "text": "the second aspect of it is that there's semantic cleanups so the the the core thing there is that everything is an",
    "start": "539680",
    "end": "545760"
  },
  {
    "text": "expression in coffee script and we try to make every function returns a meaningful value every if statement or",
    "start": "545760",
    "end": "552480"
  },
  {
    "text": "switch or try catch is an expression that can be used as part of a larger computation there's no difference for",
    "start": "552480",
    "end": "558040"
  },
  {
    "text": "the most part between um statements and expressions so a lot of work has been",
    "start": "558040",
    "end": "564399"
  },
  {
    "text": "done there basically um as you sort of as you go as the as the nodes compile as",
    "start": "564399",
    "end": "571240"
  },
  {
    "text": "you have the compiler that's turning you know turning your code into tokens into nodes into JavaScript to say if you're",
    "start": "571240",
    "end": "577640"
  },
  {
    "text": "using the result of a particular statement then that statement gets converted into an expression in JavaScript and uh and so you can use it",
    "start": "577640",
    "end": "584760"
  },
  {
    "text": "so there's been a lot of effort there and that's an example of a semantic cleanup there's a couple other ones um like switch statements which don't work",
    "start": "584760",
    "end": "591160"
  },
  {
    "text": "very well in JavaScript unless you're using strings to compare on work on any object in copy script because we compile them into F El's chains instead of",
    "start": "591160",
    "end": "597440"
  },
  {
    "text": "switch statements um and things like that where the statements don't actually work the same as they would in JavaScript so that's the second aspect",
    "start": "597440",
    "end": "603880"
  },
  {
    "text": "is semantic cleanups and then the third aspect is bonus features so uh you know I always I thought it was really cute in",
    "start": "603880",
    "end": "609079"
  },
  {
    "text": "the in the last presidential campaign when uh when John McCain started talking about goodies in uh in get legislation",
    "start": "609079",
    "end": "615200"
  },
  {
    "text": "so I think of the bonus features as the goodies that you get alongside with uh with coffee script and so things like that are uh are the ray comprehension so",
    "start": "615200",
    "end": "622440"
  },
  {
    "text": "instead of having to write out your explicit for Loop you can do a comprehension over an array and get back the list of values and so that takes",
    "start": "622440",
    "end": "629279"
  },
  {
    "text": "care of mapping and filtering um and uh and reducing actually and you also get",
    "start": "629279",
    "end": "635639"
  },
  {
    "text": "um range comprehensions and object comprehensions too so things like that are bonus features and the existential",
    "start": "635639",
    "end": "641880"
  },
  {
    "text": "operator and Splats and all these goodies we can we can talk about so those are the three parts the syntax the",
    "start": "641880",
    "end": "647560"
  },
  {
    "text": "semantic cleanups and then the the goodies okay so with these goodies um",
    "start": "647560",
    "end": "653279"
  },
  {
    "text": "you're obviously adding on things like different four loops and things like that are you following the EC script 5",
    "start": "653279",
    "end": "662639"
  },
  {
    "text": "specifications when designing those or do you follow some other sort of standard um so in terms of in terms of",
    "start": "662639",
    "end": "669839"
  },
  {
    "text": "extra features so there's there's EOS script 5 which we now have um since this fall um and all the code that and we've",
    "start": "669839",
    "end": "677320"
  },
  {
    "text": "been yes we've been influenced by ecmascript um five but even to a large extent ecmascript Harmony so there's this great Wiki um with all the",
    "start": "677320",
    "end": "683240"
  },
  {
    "text": "suggestions that were in ecmascript 4 and didn't quite um make it out you know when ecmascript 5 came over and and took",
    "start": "683240",
    "end": "690240"
  },
  {
    "text": "and made it a much more minimal language than the next version of JavaScript was going to be there's a lot of great suggestions for things that they wanted",
    "start": "690240",
    "end": "695480"
  },
  {
    "text": "to do that aren't implemented yet in this ecus harmony Wiki and so we've taken a lot of things directly from",
    "start": "695480",
    "end": "700880"
  },
  {
    "text": "there where we can and where we think that that it makes sense so um the I mean for example the Syntax for I'm not",
    "start": "700880",
    "end": "707320"
  },
  {
    "text": "sure if this is on the wiki but the syntax for Splats for doing varic arguments where you can have a couple um",
    "start": "707320",
    "end": "713240"
  },
  {
    "text": "positional arguments and then a Splat that soaks up the rest of the arguments to a function or you could pass in a",
    "start": "713240",
    "end": "718639"
  },
  {
    "text": "variable number of functions into a sorry a variable number of arguments into a function without having to use apply um the Syntax for that with the",
    "start": "718639",
    "end": "725839"
  },
  {
    "text": "triple dots was suggested by Douglas crockford and uh and another piece of",
    "start": "725839",
    "end": "730959"
  },
  {
    "text": "syntax that we took from ecmascript 5 is the a string interpolation is you can look at the proposal they have on the",
    "start": "730959",
    "end": "736839"
  },
  {
    "text": "wiki right now and that's very similar to what was proposed for Eon script Harmony where you can interpolate naked variables just using a dollar sign into",
    "start": "736839",
    "end": "743839"
  },
  {
    "text": "a string or you can use a dollar sign with brackets and have arbitrary Expressions interpolated into a string",
    "start": "743839",
    "end": "750079"
  },
  {
    "text": "um so yes going off the usage and implementation of Splats in JavaScript",
    "start": "750079",
    "end": "757959"
  },
  {
    "text": "or in coffeescript um now that you've got these extra language features it's",
    "start": "757959",
    "end": "763639"
  },
  {
    "text": "doing a lot of behind the scenes work to make them actually work in JavaScript so one thing that I noticed",
    "start": "763639",
    "end": "770440"
  },
  {
    "text": "when I first saw some copy script was actually that the developer sent me the compiled JavaScript when I was trying to",
    "start": "770440",
    "end": "777560"
  },
  {
    "text": "help them out and try and figure out what their problem was with it now of course I couldn't actually read the",
    "start": "777560",
    "end": "784519"
  },
  {
    "text": "JavaScript that I had compiled a fair bit because there was so many things that were being done behind the scenes",
    "start": "784519",
    "end": "790199"
  },
  {
    "text": "and I couldn't say change these couple of lines because he wasn't actually writing those few lines is",
    "start": "790199",
    "end": "796040"
  },
  {
    "text": "cross-compiling from copy script to JavaScript adding a barrier in the uh debugging process um yes so absolutely",
    "start": "796040",
    "end": "803959"
  },
  {
    "text": "anytime you have a source to Source translation um there's going to be a barrier in the debugging process and so",
    "start": "803959",
    "end": "809639"
  },
  {
    "text": "the way it's worked out in practice is you know our our tactic instead of building a special you know Coffey",
    "start": "809639",
    "end": "815040"
  },
  {
    "text": "script only debugger has been to make the generated JavaScript as readable as we possibly can and use whatever tricks",
    "start": "815040",
    "end": "820440"
  },
  {
    "text": "we can to make it as readable as possible um and so if you do so example if you do compile a coffee script file the JavaScript you load it in the",
    "start": "820440",
    "end": "826399"
  },
  {
    "text": "browser and you get an exception in the browser it's going to give you the line number of the JavaScript and not the line number of the coffee script and",
    "start": "826399",
    "end": "832279"
  },
  {
    "text": "that is the single biggest problem with figuring out end de bug right now you have to keep your JavaScript um files",
    "start": "832279",
    "end": "837440"
  },
  {
    "text": "handy and go look up what's happening and then see where that occurs in the coffee script and fix it and I thought",
    "start": "837440",
    "end": "842639"
  },
  {
    "text": "it was going to be a larger problem personally than it has been for me I haven't had uh too much trouble with uh",
    "start": "842639",
    "end": "848920"
  },
  {
    "text": "with tracing back and figuring out where things are are going wrong um but from a from a beginner's perspective if you're",
    "start": "848920",
    "end": "854560"
  },
  {
    "text": "just getting started with it it certainly will be more daunting um so I think what you might have been referring to are our our use of temporary",
    "start": "854560",
    "end": "861320"
  },
  {
    "text": "variables so we do have to put in some temporary variables to do things like convert a comprehension um a on line",
    "start": "861320",
    "end": "869199"
  },
  {
    "text": "array comprehension in coffeescript into the equivalent JavaScript you have to use temporary variable for the for the",
    "start": "869199",
    "end": "874639"
  },
  {
    "text": "memoized array where you're caching all the result values before you turn the the computed result of of passing the",
    "start": "874639",
    "end": "880880"
  },
  {
    "text": "function through the array um so you'll get things like that you'll have a variable with a name usually underscore",
    "start": "880880",
    "end": "886000"
  },
  {
    "text": "aore bcore c a temporary variable that has no equivalent on the coffee script side um and so before you're familiar",
    "start": "886000",
    "end": "892959"
  },
  {
    "text": "with what that is doing then yeah it wouldn't make any sense with those temporary variables would it make more",
    "start": "892959",
    "end": "898120"
  },
  {
    "text": "sense to to uh assign them as a actual",
    "start": "898120",
    "end": "903320"
  },
  {
    "text": "meaningful value rather as a meaning as a meaningful name yeah yeah so rather",
    "start": "903320",
    "end": "908920"
  },
  {
    "text": "than underscore a actually have it so it's say underscore results arguments",
    "start": "908920",
    "end": "914480"
  },
  {
    "text": "length or something like that sure we could do that the problem is then you have name clashes with anything that's",
    "start": "914480",
    "end": "919600"
  },
  {
    "text": "in external scope that might already be defined um unless you happen to have a function wrapper around that and we",
    "start": "919600",
    "end": "926560"
  },
  {
    "text": "don't necessarily know what's in external scope because um because you could be including other scripts onto",
    "start": "926560",
    "end": "932600"
  },
  {
    "text": "the page that could be having um things at the global level so that that gets a little bit tricky it might it might",
    "start": "932600",
    "end": "938160"
  },
  {
    "text": "actually be um a worthwhile change to start doing underscore meaningful name and then if something's already declared",
    "start": "938160",
    "end": "943920"
  },
  {
    "text": "that we can detect to uh you know make it a double underscore or add a one after it or something like that um",
    "start": "943920",
    "end": "950199"
  },
  {
    "text": "because right now we do have a way of seeing in in the particular file you're compiling of seeing what's in scope",
    "start": "950199",
    "end": "955279"
  },
  {
    "text": "which is how copy script scoping is handled um for you you don't have to to use far to declare uh keyword and copy",
    "start": "955279",
    "end": "960920"
  },
  {
    "text": "script so we could take advantage of that probably to do better with meaningful names for those variables",
    "start": "960920",
    "end": "966040"
  },
  {
    "text": "getting back to the goodies for a moment two that that Drew me in were your approach to classes inheritance and also",
    "start": "966040",
    "end": "973360"
  },
  {
    "text": "for function binding could you talk about those two features for a moment sure um so with classes the idea is that",
    "start": "973360",
    "end": "981360"
  },
  {
    "text": "um this is actually been very controversial because people you know when you talk about classes in",
    "start": "981360",
    "end": "986399"
  },
  {
    "text": "JavaScript and of course a lot of people do significant work with with uh with prototypes and with inheritance in",
    "start": "986399",
    "end": "991680"
  },
  {
    "text": "JavaScript um you know will yell at you if you have something called a class so there's a big argument about whether we should call it class or whether should",
    "start": "991680",
    "end": "997519"
  },
  {
    "text": "call it Proto or or something else um to which my answer has always been that if",
    "start": "997519",
    "end": "1003519"
  },
  {
    "text": "you look at any amount of JavaScript code that uses um prototypes to do",
    "start": "1003519",
    "end": "1008639"
  },
  {
    "text": "inheritance um then they always work in classical patterns regardless of whether you call it a class or not you always",
    "start": "1008639",
    "end": "1014040"
  },
  {
    "text": "have a base object with a prototype and you always make many new new instances",
    "start": "1014040",
    "end": "1019079"
  },
  {
    "text": "of it with different data and so calling it you can call it whatever you want but I'd say call it call it a class just because that's what it is so um what",
    "start": "1019079",
    "end": "1026640"
  },
  {
    "text": "we're trying to do here is to make it easier to work with prototype chain because it's not very easy to correctly set up um a prototype chain so that you",
    "start": "1026640",
    "end": "1033760"
  },
  {
    "text": "can have more than one level of inheritance without it breaking and with having the instance of operator working",
    "start": "1033760",
    "end": "1039319"
  },
  {
    "text": "correctly and being able to call Super efficiently is one of the most difficult",
    "start": "1039319",
    "end": "1045240"
  },
  {
    "text": "things and so um usually if you override a function you want some way to reference the base implementation so",
    "start": "1045240",
    "end": "1050840"
  },
  {
    "text": "that you can so you can run that and then and then subass it you know and then do your specialized overheads on",
    "start": "1050840",
    "end": "1056160"
  },
  {
    "text": "that function and it's very very difficult to with regular prototypes to call Super in JavaScript you have to know the name of your parent and you",
    "start": "1056160",
    "end": "1062240"
  },
  {
    "text": "have to go look at their method and you have to apply it on your current object and so Coffey script is trying to make",
    "start": "1062240",
    "end": "1068039"
  },
  {
    "text": "that easier for you um so we use the a variant of the um Google closure",
    "start": "1068039",
    "end": "1074360"
  },
  {
    "text": "libraries um I think it's called goo. inherits uh function to do the sub",
    "start": "1074360",
    "end": "1079960"
  },
  {
    "text": "classing so it's about let's see it's about five lines of uh of JavaScript that actually makes the child class and",
    "start": "1079960",
    "end": "1086400"
  },
  {
    "text": "then anytime you call Super within a method inside of the subass it makes a direct reference to the parent class um",
    "start": "1086400",
    "end": "1092440"
  },
  {
    "text": "for you so you don't have to write it out by hand and performs very well for that reason so function binding is",
    "start": "1092440",
    "end": "1097559"
  },
  {
    "text": "another problem that tends to be a brain Bender for new JavaScript developers",
    "start": "1097559",
    "end": "1103480"
  },
  {
    "text": "right so talking about function binding we actually used to have more support for function binding in the language but",
    "start": "1103480",
    "end": "1109039"
  },
  {
    "text": "it was decided that instead of having kind of a cryptic operator for binding functions directly we would make that more of a standard Library thing you",
    "start": "1109039",
    "end": "1115640"
  },
  {
    "text": "know because you should really be able it really binding should be uh and and I guess um maybe in some future version of",
    "start": "1115640",
    "end": "1121480"
  },
  {
    "text": "Emma script it will be but it should be a method on a function object you should be able to call function. bind and pass",
    "start": "1121480",
    "end": "1126960"
  },
  {
    "text": "in the context you want to bind it um so what we have right now is basically the syntax for defining a function in copy",
    "start": "1126960",
    "end": "1133600"
  },
  {
    "text": "script looks like this you have your arguments you have an arrow and then you have your function body on the the right",
    "start": "1133600",
    "end": "1138640"
  },
  {
    "text": "hand side um and the function body can be many lines it can be indented so um so it's arguments goes to you know",
    "start": "1138640",
    "end": "1145960"
  },
  {
    "text": "computation and it's a it's a regular little sort of asy Arrow as the as the",
    "start": "1145960",
    "end": "1151159"
  },
  {
    "text": "function syntax but if you use a fat arrow with like the hash style Arrow if you're familiar with Ruby with the equal",
    "start": "1151159",
    "end": "1157320"
  },
  {
    "text": "sign and the and the arrow a hash rocket as we would call it in Ruby exactly hash rocket there you go you use a hash",
    "start": "1157320",
    "end": "1162480"
  },
  {
    "text": "rocket instead of a instead of a skinny Arrow you get a function that's bound to the current object so basically anytime",
    "start": "1162480",
    "end": "1168679"
  },
  {
    "text": "you're doing something Fancy with uh you know with jQuery where you have an Ajax call back and you need to have your",
    "start": "1168679",
    "end": "1174159"
  },
  {
    "text": "function stay bound to the current objects that you can reference you know everything else um you can use a fat Arrow to make sure that it stays bound",
    "start": "1174159",
    "end": "1180960"
  },
  {
    "text": "and it works the same way in classes if you have a method on a class you know you're going to pass that to a call back or pass that to something async you can",
    "start": "1180960",
    "end": "1186679"
  },
  {
    "text": "Define that with a fat arrow and that means you'll always stay bound to the instance of the of the class that you're creating so you don't have to worry",
    "start": "1186679",
    "end": "1192760"
  },
  {
    "text": "about creating a special wrapper function when you when you're ready to go do that call back so that's a little convenience",
    "start": "1192760",
    "end": "1199039"
  },
  {
    "text": "what about uh when Ecom script 5's uh bind is natively supported on",
    "start": "1199039",
    "end": "1205360"
  },
  {
    "text": "functions that's going to be a wonderful day so there's been a lot of a lot of um",
    "start": "1205360",
    "end": "1210799"
  },
  {
    "text": "of requests and and talk about you know adding things like Getters and Setters which are starting to get better supported to the coffee script syntax",
    "start": "1210799",
    "end": "1218799"
  },
  {
    "text": "and that would be fantastic and you know if so taking the function binding example when the day comes that that",
    "start": "1218799",
    "end": "1225080"
  },
  {
    "text": "bind is supported across all the browsers and you can rely on it then we could switch our implementation to",
    "start": "1225080",
    "end": "1230320"
  },
  {
    "text": "actually use bind and you know all your code would still work across all browsers like it had before and uh and",
    "start": "1230320",
    "end": "1237159"
  },
  {
    "text": "would now just work in a in a better way and I think in general we would hope to do that with uh with ecmascript features",
    "start": "1237159",
    "end": "1243440"
  },
  {
    "text": "that start being supported so Jeremy you're using coffee script on the client side or the server side so I've been",
    "start": "1243440",
    "end": "1250120"
  },
  {
    "text": "using it for a couple little fun projects and for some art projects I've been using it with canvas um a lot",
    "start": "1250120",
    "end": "1255280"
  },
  {
    "text": "because that's been a ton of fun to take you know old process and sketches and to do them in coffee script and canvas and",
    "start": "1255280",
    "end": "1262120"
  },
  {
    "text": "do things like the the Buddha BR fractal where uh where you have this great sort",
    "start": "1262120",
    "end": "1267799"
  },
  {
    "text": "of inverted mandal BR fractal and it's actually amazing because you know if you do it in processing and you have it you",
    "start": "1267799",
    "end": "1272880"
  },
  {
    "text": "have you know using Java and you think uh and actually so some of my background is in working on Ruby processing which",
    "start": "1272880",
    "end": "1278799"
  },
  {
    "text": "is which is doing processing through J Ruby um and so comparing the J Ruby version of a Buddha bro fractal to the",
    "start": "1278799",
    "end": "1285840"
  },
  {
    "text": "coffee script and canvas version like the speed is just unreal you can you can have you know these great mathematically",
    "start": "1285840",
    "end": "1291799"
  },
  {
    "text": "intensive computations running in the browser and going so much and being comparable to the speed at which",
    "start": "1291799",
    "end": "1297640"
  },
  {
    "text": "processing would do them you know in the jvm so yeah so I've been playing a lot with that and then also been using it a",
    "start": "1297640",
    "end": "1303799"
  },
  {
    "text": "little bit on the server side for um for some node.js applications I've been using it with Express um which has been",
    "start": "1303799",
    "end": "1309679"
  },
  {
    "text": "a lot of fun too because it's makes Express really fun to work with and uh and then also just raw nodejs we have a",
    "start": "1309679",
    "end": "1317360"
  },
  {
    "text": "a piece of document Cloud which is a pixel tracker um because people embed the documents that they upload on the",
    "start": "1317360",
    "end": "1324919"
  },
  {
    "text": "different websites so you'll have the Chicago Tribune basic right now the Chicago Tribune is a bunch of great documents um regarding the bovich trial",
    "start": "1324919",
    "end": "1332200"
  },
  {
    "text": "and I think they've got hundreds and hundreds of them in there and uh and so we have a little pixel tracker so that we can keep track of of the remote URL",
    "start": "1332200",
    "end": "1339400"
  },
  {
    "text": "that people are embedding these documents at we can start sending traffic to them and we have a public search and that's written in no. JS and",
    "start": "1339400",
    "end": "1345000"
  },
  {
    "text": "coffee script and uh yep it's about 100 lines is pretty short okay so with uh",
    "start": "1345000",
    "end": "1351360"
  },
  {
    "text": "node.js um I noticed that it's actually one of the requirements for coffee script and",
    "start": "1351360",
    "end": "1358480"
  },
  {
    "text": "the compiler actually runs on top of coffee script uh nodejs rather yep",
    "start": "1358480",
    "end": "1363520"
  },
  {
    "text": "that's correct so so the so coffee script is written in coffee script itself um when it started out it was a",
    "start": "1363520",
    "end": "1369279"
  },
  {
    "text": "ruby program um because I didn't have we didn't have anything to write it with um so I actually started with Ruby and with rack um and then it built and built and",
    "start": "1369279",
    "end": "1377320"
  },
  {
    "text": "eventually it became you know a viable language that had um that worked you know in the browser and uh and worked in",
    "start": "1377320",
    "end": "1384159"
  },
  {
    "text": "node.js and then there was a big I think it was around 0.3.0 but a really sort of",
    "start": "1384159",
    "end": "1389480"
  },
  {
    "text": "big switch so I rewrote I basically ported the entire Ruby um compiler over to coffeescript itself and then I ran it",
    "start": "1389480",
    "end": "1397799"
  },
  {
    "text": "on itself and then I ran that parser on itself and then we had a completely um bootstrapped um compiler that basically",
    "start": "1397799",
    "end": "1404799"
  },
  {
    "text": "so now compiles itself and the source code is written in copy script um and so yeah so we I played around a",
    "start": "1404799",
    "end": "1411320"
  },
  {
    "text": "little bit with doing it on narwhal and Rhino as opposed to node but then just the speed of node in terms of me for",
    "start": "1411320",
    "end": "1416960"
  },
  {
    "text": "because compiling can take a little while to generate the parser um the speed of node has been great and so now",
    "start": "1416960",
    "end": "1423000"
  },
  {
    "text": "the the basic the server side version of it that you would install into user local bin and you would use from the",
    "start": "1423000",
    "end": "1428320"
  },
  {
    "text": "command line um is based on node but the compiler also runs in the browser too so the JavaScript is pretty node agnostic",
    "start": "1428320",
    "end": "1435200"
  },
  {
    "text": "at the core you can run it in Firefox or Internet Explorer whatever so more than just node it's also has a dependency or",
    "start": "1435200",
    "end": "1441039"
  },
  {
    "text": "I guess can be aided in the install process with node package manager we found a our default package manager for",
    "start": "1441039",
    "end": "1448480"
  },
  {
    "text": "node now as npm yeah I think npm has won the battle at this point well uh development of TJ holay",
    "start": "1448480",
    "end": "1457200"
  },
  {
    "text": "Chuck's uh kiwi package manager seems to have halted now so mpm seems to be the",
    "start": "1457200",
    "end": "1463480"
  },
  {
    "text": "default so why the the um the dependency on uh",
    "start": "1463480",
    "end": "1468559"
  },
  {
    "text": "node from a uh a parsing standpoint are you uh it's just it's just a JavaScript",
    "start": "1468559",
    "end": "1473840"
  },
  {
    "text": "runtime so because because it also does run in the browser and people have gotten it to run on Rhino also it doesn't really matter where you run it",
    "start": "1473840",
    "end": "1479360"
  },
  {
    "text": "it's just our default our default runtime but you can take so there's a there's a compiled ver there's a if you",
    "start": "1479360",
    "end": "1485000"
  },
  {
    "text": "go into the extras cycript JS directory that's a compressed minified compiled",
    "start": "1485000",
    "end": "1491320"
  },
  {
    "text": "version of the entire compiler and you can drop that onto a web page you can load that into Rhino and uh and work",
    "start": "1491320",
    "end": "1496520"
  },
  {
    "text": "with that Al you do have some hooks to use coffee directly in the server um some hooks you mean the node",
    "start": "1496520",
    "end": "1504080"
  },
  {
    "text": "the node hooks yeah you could use coffee you've got some examples on the website of using coffee as your coffee script in",
    "start": "1504080",
    "end": "1510440"
  },
  {
    "text": "node right on the side that was right so that was that was a special hook that was actually that was added to node I",
    "start": "1510440",
    "end": "1516360"
  },
  {
    "text": "think by by Tim Smart um so that if you have a different file extension that's not JS node can run a pre-processor like",
    "start": "1516360",
    "end": "1522919"
  },
  {
    "text": "coffee script on it and then run it directly I still don't because of the debugging reason that we talked about before I still don't recommend running",
    "start": "1522919",
    "end": "1528960"
  },
  {
    "text": "it directly because effectively what you're doing is you're reading in a file and then you're generating JavaScript in",
    "start": "1528960",
    "end": "1534440"
  },
  {
    "text": "memory and then you're calling eval to run it which will work fine but as soon as you have to debug that you're debugging a huge eval and that's not",
    "start": "1534440",
    "end": "1540960"
  },
  {
    "text": "very fun so I still recommend compiling it to JavaScript before you actually launch node um in both cases for both",
    "start": "1540960",
    "end": "1546919"
  },
  {
    "text": "the server and for and for and for node work but it's certainly possible let's",
    "start": "1546919",
    "end": "1551960"
  },
  {
    "text": "talk about compilation for a second because you've got several different options um I guess the default that I'm",
    "start": "1551960",
    "end": "1557039"
  },
  {
    "text": "using is just coffee watch uh command line interface but there's also a lot of community contributed uh scripts for",
    "start": "1557039",
    "end": "1564200"
  },
  {
    "text": "rack and for uh rails plugins and others",
    "start": "1564200",
    "end": "1569279"
  },
  {
    "text": "yeah there's a great resources section on so cofy script. org is the web page and there's a resources section down at the bottom with a whole bunch of",
    "start": "1569279",
    "end": "1574720"
  },
  {
    "text": "different syntax highlighters and integration into different into different rails and rack and I think",
    "start": "1574720",
    "end": "1579919"
  },
  {
    "text": "there might be a python one to um ways to to compile it and to pre-process it if you have it as part of a website so",
    "start": "1579919",
    "end": "1586640"
  },
  {
    "text": "those just make it more convenient um but the basic you can also use the basic coffee command pretty easily because it can watch if you do coffee",
    "start": "1586640",
    "end": "1593760"
  },
  {
    "text": "watch and then a directory and give it an output directory it will compile every Coffey script file that's found",
    "start": "1593760",
    "end": "1599640"
  },
  {
    "text": "you know recursively in the directory anytime it changes using node's great watch file support which works um uses",
    "start": "1599640",
    "end": "1606039"
  },
  {
    "text": "you know the file system to do really good watching of files for when they change it'll compile that over into the",
    "start": "1606039",
    "end": "1611120"
  },
  {
    "text": "parallel directory structure in JavaScript so that makes it pretty easy to to have it running in the background in development and not have to worry",
    "start": "1611120",
    "end": "1617159"
  },
  {
    "text": "about it when you refresh your page you'll get your new code yeah that's exactly how I'm using it in in a",
    "start": "1617159",
    "end": "1622480"
  },
  {
    "text": "titanium abeler titanium mobile application right now it's written in JavaScript and just watching that folder",
    "start": "1622480",
    "end": "1627840"
  },
  {
    "text": "and it spits out uh the whole tree into the output folder as far as you know the",
    "start": "1627840",
    "end": "1633039"
  },
  {
    "text": "the debugging in stack Trace titanium currently doesn't support that in JavaScript anyway but so one of the the",
    "start": "1633039",
    "end": "1639039"
  },
  {
    "text": "pluses that I get from cycript um is that nice JS lint um evaluated script",
    "start": "1639039",
    "end": "1646000"
  },
  {
    "text": "you know there's no more warnings in the titanium compiler telling me that Mr a simic coling or something right yeah I",
    "start": "1646000",
    "end": "1651760"
  },
  {
    "text": "guess the titanium compiler is very strict about the JavaScript that it accepts I've heard um because I don't even know how it works when does it turn",
    "start": "1651760",
    "end": "1658440"
  },
  {
    "text": "it into Objective C or do you know how that's it does it creates uh Native objects uh on the fly but it goes",
    "start": "1658440",
    "end": "1665080"
  },
  {
    "text": "through even at runtime it goes through it uses webkit to uh interpret the JavaScript and then they have these",
    "start": "1665080",
    "end": "1670720"
  },
  {
    "text": "proxy objects that proxy between the JavaScript and the and the Coco object so you they creates Coco objects at",
    "start": "1670720",
    "end": "1676840"
  },
  {
    "text": "runtime great so I guess you're actually using JavaScript core As an interpreter um",
    "start": "1676840",
    "end": "1682039"
  },
  {
    "text": "inside of the app right I'm not sure if it's um the vanilla webkit JavaScript",
    "start": "1682039",
    "end": "1688279"
  },
  {
    "text": "interpreter or if they've forked that as well that's cool stuff so it's a nice",
    "start": "1688279",
    "end": "1693679"
  },
  {
    "text": "Fit until they uh introduce a debugger for the javascripting and this is like all upside no",
    "start": "1693679",
    "end": "1700600"
  },
  {
    "text": "downside okay so also on the debugging you mentioned before that you're if",
    "start": "1700600",
    "end": "1705840"
  },
  {
    "text": "you're using it in the browser and there's an example on the website or there has been an example I've seen",
    "start": "1705840",
    "end": "1711600"
  },
  {
    "text": "where you've used a text cycript uh script tag uhhuh when you're",
    "start": "1711600",
    "end": "1718440"
  },
  {
    "text": "using one of those uh rather when you use a script tag with text copy script",
    "start": "1718440",
    "end": "1727600"
  },
  {
    "text": "as the content type do you get the any enhanced debugging in the browser for",
    "start": "1727600",
    "end": "1734279"
  },
  {
    "text": "instance uh TJ holay chock recent templating engine Jade uh when you're",
    "start": "1734279",
    "end": "1741240"
  },
  {
    "text": "using it in the browser it'll actually give you a complete stack trace of where the error occurred in your template is",
    "start": "1741240",
    "end": "1748519"
  },
  {
    "text": "there anything like that you can do in Coffey script or so so again it's not it's not a completely static language",
    "start": "1748519",
    "end": "1754640"
  },
  {
    "text": "like HTML is so yes you can you could if you if you do it in the browser um and if you use the if you go to cp.org and",
    "start": "1754640",
    "end": "1761159"
  },
  {
    "text": "you do the try cofy script um page then yes you will absolutely get the syntax",
    "start": "1761159",
    "end": "1766840"
  },
  {
    "text": "error it'll tell what line it occurred on and it'll show you what went wrong which is basically just a feature that our pars your generator which is we use",
    "start": "1766840",
    "end": "1774480"
  },
  {
    "text": "gon which is uh I'm sorry which is a uh which is a great par of generator for JavaScript so yes if you have a syntax",
    "start": "1774480",
    "end": "1780840"
  },
  {
    "text": "there in your code you will get you that'll be pointed out to you but because it's not a static language you're actually running the code then",
    "start": "1780840",
    "end": "1786039"
  },
  {
    "text": "you have your real problem which is not a syntax ER your real problem is you have a bug in your code and then you're",
    "start": "1786039",
    "end": "1791600"
  },
  {
    "text": "basically doing an eval and that's the difficult part so the syntax errors aren aren't so much the issue for running it directly in the browser but but um",
    "start": "1791600",
    "end": "1798399"
  },
  {
    "text": "calling an eval on code instead of loading it as a regular JavaScript is which is why it's recommended to compile",
    "start": "1798399",
    "end": "1804600"
  },
  {
    "text": "the JavaScript first and then you don't have this problem um at all but if you're just doing some fun scripting around and you're not too worried about",
    "start": "1804600",
    "end": "1811279"
  },
  {
    "text": "you know having debug a major application then the text cycript thing is pretty fun and so that's what",
    "start": "1811279",
    "end": "1816640"
  },
  {
    "text": "coffeescript toor uses actually to to hook into jQuery and to set up the TR cycript box that's all done with a",
    "start": "1816640",
    "end": "1822080"
  },
  {
    "text": "little text cofy script tag down at the bottom and I think the best example of it is this website um the link",
    "start": "1822080",
    "end": "1827880"
  },
  {
    "text": "the Lincolnshire po.com by Chris Lloyd which has a whole bunch of Raphael sketches that are written in Coffey",
    "start": "1827880",
    "end": "1833480"
  },
  {
    "text": "script down at the bottom of the page you can click on the little refresh button to redraw the Raphael sketches",
    "start": "1833480",
    "end": "1838880"
  },
  {
    "text": "and so those are those are a good example of of a nice place to use it okay so a quick question on uh a couple",
    "start": "1838880",
    "end": "1845840"
  },
  {
    "text": "of your other projects you've also written horejs and",
    "start": "1845840",
    "end": "1851320"
  },
  {
    "text": "doco with underscorejs was that actually originally written in copy script or was",
    "start": "1851320",
    "end": "1856559"
  },
  {
    "text": "it written or in JavaScript so that was written in JavaScript first that's from the fall",
    "start": "1856559",
    "end": "1861840"
  },
  {
    "text": "actually so that that's from when I first started the document Cloud project and it's an so so so at document Cloud",
    "start": "1861840",
    "end": "1867960"
  },
  {
    "text": "everything that we do has to be released open source it's funded by the KN Foundation the idea is that is that we both make the service and also every",
    "start": "1867960",
    "end": "1874880"
  },
  {
    "text": "single bit of code that we write will be made open source sooner or later so it was extracted directly from uh the",
    "start": "1874880",
    "end": "1880559"
  },
  {
    "text": "application there and it was basically just a collection of all the little functional helpers that you might want to use when you're writing JavaScript",
    "start": "1880559",
    "end": "1886639"
  },
  {
    "text": "and trying to do sophisticated stuff on the client side being able to select and filter and reduce a lot of things",
    "start": "1886639",
    "end": "1891760"
  },
  {
    "text": "they're now in ecmascript 5 that underscore uses if they're available um so that was not written in cycript first",
    "start": "1891760",
    "end": "1897519"
  },
  {
    "text": "and uh but it was kind of a test you know to I think that was the so besides having the compiler of coffeescript",
    "start": "1897519",
    "end": "1903720"
  },
  {
    "text": "itself be written coffeescript doing the underscore Port was kind of a test of all right I've got this real world",
    "start": "1903720",
    "end": "1909200"
  },
  {
    "text": "Library I've got a bunch of performance benchmarks so I can know if it slows down I know I know I've got I've got a",
    "start": "1909200",
    "end": "1914679"
  },
  {
    "text": "big test Suite so I can make sure that it behaves correctly and is is it possible to write it in coffee script and have it work and so the answer was",
    "start": "1914679",
    "end": "1921720"
  },
  {
    "text": "yes it is possible and and we've got that as one of the examples in the copy script checkout and also that it's",
    "start": "1921720",
    "end": "1927240"
  },
  {
    "text": "actually a little bit faster than the JavaScript version because of things like comprehensions where at in",
    "start": "1927240",
    "end": "1932279"
  },
  {
    "text": "JavaScript you would have had to write out you know the for Loops by hand every time instead of using an each or for each but um you don't have to worry",
    "start": "1932279",
    "end": "1938240"
  },
  {
    "text": "about that as much in copy script because it'll generate the efficient for Loops for you where possible so it ended",
    "start": "1938240",
    "end": "1943279"
  },
  {
    "text": "up beating the original underscore and a couple of little benchmarks by a bit speaking of those four Loops real quick",
    "start": "1943279",
    "end": "1949639"
  },
  {
    "text": "the uh one that we didn't talk about was the four of that I fell in love with the the four of right the you add uh",
    "start": "1949639",
    "end": "1957799"
  },
  {
    "text": "basically it will give you the the key back and um evaluate the object on the Fly similar to what ruby does where you",
    "start": "1957799",
    "end": "1965039"
  },
  {
    "text": "can do multiple Keys into the to a loop right so so the comprehensions in coffee",
    "start": "1965039",
    "end": "1970519"
  },
  {
    "text": "script you have I guess you have sort of three basic types you have you can comprehend over an array or over an",
    "start": "1970519",
    "end": "1976159"
  },
  {
    "text": "object or over a range R so the range is the simple one the range is basically a for loop with with a fix start and end",
    "start": "1976159",
    "end": "1981679"
  },
  {
    "text": "you know from one up to 10 do this um so you say you know for I in range and you",
    "start": "1981679",
    "end": "1988600"
  },
  {
    "text": "give it a start and end point um and and then you have the array comprehensions",
    "start": "1988600",
    "end": "1994159"
  },
  {
    "text": "where you can say for um value comma index in Array and then you also have",
    "start": "1994159",
    "end": "2000360"
  },
  {
    "text": "object comprehensions where you can say for key comma value of object and we actually just added a new one um a new",
    "start": "2000360",
    "end": "2007039"
  },
  {
    "text": "variant of it where you can say um for all key comma value of object which which will so the difference between",
    "start": "2007039",
    "end": "2013200"
  },
  {
    "text": "there is is a subtle JavaScript thing where usually a four in in JavaScript will look up the entire prototype chain",
    "start": "2013200",
    "end": "2019080"
  },
  {
    "text": "and if you've added methods like say prototypejs does to the array prototype",
    "start": "2019080",
    "end": "2024320"
  },
  {
    "text": "you're going to get um methods that you don't care about that you're not interested in so by default cycript is",
    "start": "2024320",
    "end": "2030440"
  },
  {
    "text": "safe and only looks in and uses a has own property check to only look in the closest object but if you want to speed",
    "start": "2030440",
    "end": "2036639"
  },
  {
    "text": "that up a little bit you can say for all key comma value of object and then that'll give you everything with a with a vanilla um JavaScript for in with no",
    "start": "2036639",
    "end": "2044880"
  },
  {
    "text": "special checks and so this gives you a unified interface these three different kinds of comprehensions because you can",
    "start": "2044880",
    "end": "2050320"
  },
  {
    "text": "use all of them are expressions you can use them directly you know you can't usually just return a for Loop and have that mean anything but if you return a",
    "start": "2050320",
    "end": "2056599"
  },
  {
    "text": "comprehension that'll give you back um all the values the the computed results of all of the values being passed",
    "start": "2056599",
    "end": "2062960"
  },
  {
    "text": "through the the block of code that you've given and they all work um in identical ways with that",
    "start": "2062960",
    "end": "2069440"
  },
  {
    "text": "so well this is the part of the interview where we turn it upside down the folks that we speak to usually who's",
    "start": "2069440",
    "end": "2074560"
  },
  {
    "text": "on our open source radar so we get to turn it right back at you and ask what kind of projects are on your open source",
    "start": "2074560",
    "end": "2080720"
  },
  {
    "text": "radar I'm I'm getting pretty excited about it so I think when we talked in the fall um you asked me the same question you know and I talked about no.",
    "start": "2080720",
    "end": "2087358"
  },
  {
    "text": "JS and and you said that uh you know everyone's been saying that recently and I think that's that's still definitely",
    "start": "2087359",
    "end": "2093118"
  },
  {
    "text": "the case and still going strong and has a whole lot of steam and a whole bunch of great patches that uh that come out",
    "start": "2093119",
    "end": "2099200"
  },
  {
    "text": "constantly and uh you have to keep up with um and I'm still waiting for the",
    "start": "2099200",
    "end": "2104240"
  },
  {
    "text": "first sort of endtoend you know or at least the first the first person who glues it together end to end where you",
    "start": "2104240",
    "end": "2110680"
  },
  {
    "text": "actually have you know Rich models in the browser with a good standard library",
    "start": "2110680",
    "end": "2115720"
  },
  {
    "text": "of of common functions that then you know that then work seamlessly with the server side and you know maybe it",
    "start": "2115720",
    "end": "2121880"
  },
  {
    "text": "integrates Comet so you get live updates across you know all of your models because this is something that any client side app that that does a lot of",
    "start": "2121880",
    "end": "2128599"
  },
  {
    "text": "work in the browser ends up doing so in our case um we're dealing with with journalists in The Newsroom working with",
    "start": "2128599",
    "end": "2134040"
  },
  {
    "text": "documents and writing stories and annotating the documents and you can share those between different newsrooms",
    "start": "2134040",
    "end": "2139400"
  },
  {
    "text": "you could have someone you know in Chicago and someone in Miami working on the same project and annotating the same document and now you have to you know",
    "start": "2139400",
    "end": "2146040"
  },
  {
    "text": "what you want to do is you want to be able to live update the changes back and forth when someone you know kind of like a Google wave style or an etherpad style",
    "start": "2146040",
    "end": "2152720"
  },
  {
    "text": "um thing where as soon as someone starts finishes typing ornation it appears instantly and and you can really work",
    "start": "2152720",
    "end": "2158280"
  },
  {
    "text": "together and collaborate in that way and that's something that JavaScript is a great um language for enabling instead",
    "start": "2158280",
    "end": "2163480"
  },
  {
    "text": "of like a rich flash app and that's something that is very complicated right now because you have to use Comet you have to and you it's very very difficult",
    "start": "2163480",
    "end": "2170000"
  },
  {
    "text": "to get the changes pushed across correctly in a performant way and so node provides the performance that's",
    "start": "2170000",
    "end": "2175160"
  },
  {
    "text": "needed for doing that well and websockets coming of age are going to provide um the comet replacement that's",
    "start": "2175160",
    "end": "2182480"
  },
  {
    "text": "a little bit um nicer to work with and I think that someone's going to come out with an endtoend solution you know that",
    "start": "2182480",
    "end": "2189720"
  },
  {
    "text": "that knows how to talk to databases in the background for persisting data that has good ways of routing URLs to actions",
    "start": "2189720",
    "end": "2195680"
  },
  {
    "text": "in the server that has client side models that can be shared with the server and can do validations on both end and can transparently sync changes",
    "start": "2195680",
    "end": "2203040"
  },
  {
    "text": "so all you have to worry about is basically your client side app and you can call Save in the browser and it'll safely save it to the server with",
    "start": "2203040",
    "end": "2209079"
  },
  {
    "text": "validations um and has that all hooked together and I think that'll be that's that's what I'm waiting for that's that's what I'm hoping to see in the",
    "start": "2209079",
    "end": "2215000"
  },
  {
    "text": "next year that's quite the dream who does thought that five years ago you know and going into the next decade we'd be so excited about JavaScript yeah who",
    "start": "2215000",
    "end": "2222160"
  },
  {
    "text": "would have thought so where can folks catch up with you online the coffee script Twitter handle is that you or a fan that's",
    "start": "2222160",
    "end": "2228839"
  },
  {
    "text": "actually not me that's that's an unofficial one um but he answers questions pretty good too so you can ask him but um if you want to so right now",
    "start": "2228839",
    "end": "2234599"
  },
  {
    "text": "coffee script if you have an idea um for an enhancement or a question or an issue you should use the GitHub issues page",
    "start": "2234599",
    "end": "2241079"
  },
  {
    "text": "and if you want to just chat about it come into the coffee script room all one word coffee script on free node that's",
    "start": "2241079",
    "end": "2246240"
  },
  {
    "text": "the IR room and there's usually someone who can answer your question there cool thanks for joining us today Jeremy all",
    "start": "2246240",
    "end": "2252400"
  },
  {
    "text": "right thanks a lot it's been [Music]",
    "start": "2252400",
    "end": "2257790"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2257790",
    "end": "2265070"
  },
  {
    "text": "[Applause] [Music] fun",
    "start": "2265070",
    "end": "2271599"
  },
  {
    "text": "my so could I for",
    "start": "2271599",
    "end": "2277520"
  },
  {
    "text": "I found myself for",
    "start": "2277520",
    "end": "2281839"
  },
  {
    "text": "the",
    "start": "2288520",
    "end": "2291520"
  }
]