[
  {
    "text": "you're listening to JS party the award-winning weekly celebration of JavaScript and the web here ye here you",
    "start": "7160",
    "end": "15559"
  },
  {
    "text": "our new weekly podcast plus email newsletter covers all the developer news that's worth your attention we keep it",
    "start": "15559",
    "end": "22279"
  },
  {
    "text": "brief entertaining and always on point check out changelog news at Chang",
    "start": "22279",
    "end": "28080"
  },
  {
    "text": "log.com newws help me help you thanks to our partners at fastly for shipping JS",
    "start": "28080",
    "end": "35360"
  },
  {
    "text": "party all around the world to wherever you listen and to fly.io poost your app",
    "start": "35360",
    "end": "41399"
  },
  {
    "text": "close to your users no Ops required okay hey it's party time",
    "start": "41399",
    "end": "46970"
  },
  {
    "text": "[Music] [Applause] [Music]",
    "start": "46970",
    "end": "53980"
  },
  {
    "text": "[Applause] y'all uh Hoy Hoy welcome to another exciting Js party I'm your host this",
    "start": "53980",
    "end": "61079"
  },
  {
    "text": "week Nick ni oh ho Hoy and I am here to do an or amazing show with kall kall",
    "start": "61079",
    "end": "68000"
  },
  {
    "text": "how's it going I do not have a pun plan to head to one up you there so I'm going",
    "start": "68000",
    "end": "73720"
  },
  {
    "text": "to let you win that but I'm excited I like om's I think there's a lot of interesting conversations right now",
    "start": "73720",
    "end": "80400"
  },
  {
    "text": "about interfacing with SQL especially been playing around with using AI to",
    "start": "80400",
    "end": "85640"
  },
  {
    "text": "talk to squl and things like that so I think we have some opportunity for conversations about what are the right",
    "start": "85640",
    "end": "91000"
  },
  {
    "text": "levels of abstraction to talk with our data looking forward to it yeah I like that and because I can barely spell omm",
    "start": "91000",
    "end": "99159"
  },
  {
    "text": "uh we do have a guest to help us out with that as well and he he is the creator of joist om uh stevenh hman",
    "start": "99159",
    "end": "105960"
  },
  {
    "text": "Stephen how's it going yo I'm doing fine yeah thanks for having me awesome uh tell us about yourself sure I I mean a",
    "start": "105960",
    "end": "112840"
  },
  {
    "text": "software engineer been doing this for a little while and um yeah I don't know got started back in the day doing Java",
    "start": "112840",
    "end": "118680"
  },
  {
    "text": "uh you know back in Java I you know maybe that's gonna we won't hold it against you it's okay oh don't hold it against me uh but I actually did quite a",
    "start": "118680",
    "end": "125079"
  },
  {
    "text": "bit of that for a little while and enjoyed it and um about yeah four or five years ago found this little thing",
    "start": "125079",
    "end": "130520"
  },
  {
    "text": "called typescript and was just really surprised you know love the type system and you know back in the day you know",
    "start": "130520",
    "end": "136760"
  },
  {
    "text": "seeing people do node in you know circuit 2010 with the only thing you had was callbacks was just like guys are",
    "start": "136760",
    "end": "143040"
  },
  {
    "text": "crazy but like just you know the JavaScript language and Ted script on top of it has grown so much you know",
    "start": "143040",
    "end": "148440"
  },
  {
    "text": "with the evolution of ASN just everything that they've grown in the language has been really impressive and",
    "start": "148440",
    "end": "154080"
  },
  {
    "text": "um so I've been doing that lately and yeah really enjoy it did you hear that Jared did you hear all all of that",
    "start": "154080",
    "end": "160000"
  },
  {
    "text": "praise for typescript not listening not listening that's right it used to be you",
    "start": "160000",
    "end": "166200"
  },
  {
    "text": "were trying to convince me but I'm a convert for the last couple years so Jared might be the the uh one person",
    "start": "166200",
    "end": "174120"
  },
  {
    "text": "who's regular on the show who is still a hold out oh yeah oh that's you know",
    "start": "174120",
    "end": "179519"
  },
  {
    "text": "that's fair I I mean you know to a lot of what typescript has been able to do for sure is is on top of the core um",
    "start": "179519",
    "end": "187840"
  },
  {
    "text": "evolution of of just JavaScript itself you know all of the asyn stuff in the core uh languages has certainly",
    "start": "187840",
    "end": "193799"
  },
  {
    "text": "benefited typescript a lot they've got a lot from that now you're joining us to talk about ORS uh so maybe it'd be",
    "start": "193799",
    "end": "201480"
  },
  {
    "text": "appropriate to start with a definition of what that is oh sure yeah I mean there's the uh it's object relational uh",
    "start": "201480",
    "end": "209040"
  },
  {
    "text": "mapper so it's it's basically that you've got a relational database floating around uh that you'd like to",
    "start": "209040",
    "end": "214080"
  },
  {
    "text": "talk to as ergonomically as possible you know kind of the OG way of doing that uh is raw SQL strings like every time you",
    "start": "214080",
    "end": "220879"
  },
  {
    "text": "want to talk to uh your database to SQL you know select star from this and this and this actually I I'm I'm pretty um we",
    "start": "220879",
    "end": "229599"
  },
  {
    "text": "can get into the like you know pros and cons of orms later but uh for the mo more esoteric uh SQL that you do I'm a",
    "start": "229599",
    "end": "235640"
  },
  {
    "text": "big fan of doing custom SQL when you need to but for the 80 to 90% ratio of your code that is like I just want this",
    "start": "235640",
    "end": "241920"
  },
  {
    "text": "author entity I just want this book well and I'm playing my hand a little bit by saying the word entity I guess but I",
    "start": "241920",
    "end": "247560"
  },
  {
    "text": "just want this author row or the the book rows for this author I think it can get start to start to get kind of",
    "start": "247560",
    "end": "253079"
  },
  {
    "text": "tedious to uh do SQL selects for every single little boilerplate thing and so I I think that's where RMS come in of some",
    "start": "253079",
    "end": "259919"
  },
  {
    "text": "of them you know back in the day you could see ones that tried to do everything everything but but if I think if you stay in the circle of competence",
    "start": "259919",
    "end": "265720"
  },
  {
    "text": "of just you know treating your database uh for 80% of things as an object graph and then being able to very you know",
    "start": "265720",
    "end": "271600"
  },
  {
    "text": "ergonomically get your data out of your Rel relational database there's also reads but then also writes you know",
    "start": "271600",
    "end": "276759"
  },
  {
    "text": "writing back what you've changed I guess yeah I mean there's a spectrum of of how fancy orms go uh in so far as like you",
    "start": "276759",
    "end": "283360"
  },
  {
    "text": "know is it just doing just queries and then also doing the reads and writes back but as you go on the spectrum of",
    "start": "283360",
    "end": "288600"
  },
  {
    "text": "like Fanci your orms you'll start to see a lot of things where you know applying business logic around your rights of you",
    "start": "288600",
    "end": "294080"
  },
  {
    "text": "know validation rules and um life cycle even get into some of the reactivity that joist is bringing to the table and",
    "start": "294080",
    "end": "300919"
  },
  {
    "text": "um you know really leaning in on encapsulating business logic and business rules in a central location",
    "start": "300919",
    "end": "307080"
  },
  {
    "text": "Beyond just like I'm reading and writing data well can we start then with since there are so many different directions",
    "start": "307080",
    "end": "313400"
  },
  {
    "text": "that orms take and different trade-offs that they can make what inspired you to write a new one yeah that's a good",
    "start": "313400",
    "end": "318680"
  },
  {
    "text": "question so I think you know chy came around probably circuit 2019 or so and so what the problem that we were solving",
    "start": "318680",
    "end": "325319"
  },
  {
    "text": "there at the time was uh you know standing up a new Tex stack uh very stereotypical tchack at the time we had",
    "start": "325319",
    "end": "331840"
  },
  {
    "text": "graph ql on the back end and react on the front end and we're using Apollo and",
    "start": "331840",
    "end": "336919"
  },
  {
    "text": "post gray you know love post gray and yeah just trying to to find you know what was the most ergonomic way of",
    "start": "336919",
    "end": "342560"
  },
  {
    "text": "standing up our back end and when looking around for other tools at the time you know there's the class of tools",
    "start": "342560",
    "end": "348360"
  },
  {
    "text": "out there that like the huras and the postc files that are super ergonomic in terms of you know directly mapping your",
    "start": "348360",
    "end": "355000"
  },
  {
    "text": "database schema to your graphql public API you know super amazing but you know",
    "start": "355000",
    "end": "360160"
  },
  {
    "text": "kind of touched on that business logic thing we we had been wanting to find a way to you know do like 80 to 90% of",
    "start": "360160",
    "end": "366599"
  },
  {
    "text": "like just take your database schema and make your graph ql API out of that and do you know do that for the common case",
    "start": "366599",
    "end": "371800"
  },
  {
    "text": "but there's always this like last 10 to 20% uh where I think like the huster is in the post graph files you can start to",
    "start": "371800",
    "end": "378479"
  },
  {
    "text": "miss out on on well I don't want my graph Q API to exactly be my database schema right and so that ruled out those",
    "start": "378479",
    "end": "386880"
  },
  {
    "text": "and uh yeah just from my past had done enough orms that you know I I like or had used orm that you know you kind of",
    "start": "386880",
    "end": "392800"
  },
  {
    "text": "like those had used type orm in the past and was just looking to use something else we started out with micro orm which",
    "start": "392800",
    "end": "399160"
  },
  {
    "text": "is actually really great I I still like it it matched and and you can tell like probably 60 to 70% of Joy API matches",
    "start": "399160",
    "end": "405960"
  },
  {
    "text": "micro uh because our code base was on micro for probably six to n months uh before we we flipped over it to joist",
    "start": "405960",
    "end": "412720"
  },
  {
    "text": "and the big reason for moving away from micro I mean there was nothing wrong with it but we were very much in the",
    "start": "412720",
    "end": "420160"
  },
  {
    "text": "graphql environment where it's so easy to do n plus 1es and so we were really looking for an orm that would build in",
    "start": "420160",
    "end": "425479"
  },
  {
    "text": "data loading you know the whole Facebook data loader pattern of like you know you wait until the next event tick to kind",
    "start": "425479",
    "end": "431199"
  },
  {
    "text": "of like see whatever happened and then at the end of the event tick you're like oh you asked for 10 authors like instead",
    "start": "431199",
    "end": "436520"
  },
  {
    "text": "in in in this one event tick instead of 10 SQL calls I'm just going to do one SQL call for all 10 authors with a wear",
    "start": "436520",
    "end": "442120"
  },
  {
    "text": "in and uh I actually had a pull request into micro to to kind of start to do that and it worked but you know micro",
    "start": "442120",
    "end": "449000"
  },
  {
    "text": "was just mature enough at the time it was probably already I I really haven't kept up on it I like the micro author he",
    "start": "449000",
    "end": "455560"
  },
  {
    "text": "was great to work with uh but it was probably V I'm going to make up V3 or V4",
    "start": "455560",
    "end": "461199"
  },
  {
    "text": "I don't know it was a little while ago but already pretty a mature code base so uh it just wasn't as easy to wander in",
    "start": "461199",
    "end": "467319"
  },
  {
    "text": "and like put data loader into the guts of of the orm after it already you know been established and that sort of thing",
    "start": "467319",
    "end": "473000"
  },
  {
    "text": "and so really that that was it that and then and then the other thing that um for my days working on typo uh and again",
    "start": "473000",
    "end": "480159"
  },
  {
    "text": "I I haven't worked with tym in four or 5 years at this point uh but the biggest frustration I remember with disclaimers",
    "start": "480159",
    "end": "485639"
  },
  {
    "text": "that I I have no idea what it looks like these days but was that it was incredibly opaque whether your",
    "start": "485639",
    "end": "491199"
  },
  {
    "text": "collections were loaded or not or or even any relation so you might go get an author and oh so to go back to like one",
    "start": "491199",
    "end": "498000"
  },
  {
    "text": "of the things that orms are really good at is like lazy loading parts of your object graph as your business logic",
    "start": "498000",
    "end": "503639"
  },
  {
    "text": "needs them right so you might start at an author your endpoint is like do something with an author and so you get",
    "start": "503639",
    "end": "508759"
  },
  {
    "text": "the author and then um you know you do some business logic and you're like oh I need the books and then you do some",
    "start": "508759",
    "end": "514320"
  },
  {
    "text": "business logic and you oh you need some book reviews and so orms are really good about kind of you know making it",
    "start": "514320",
    "end": "519839"
  },
  {
    "text": "ergonomic to load more and more of your little sub graph as you go but like the",
    "start": "519839",
    "end": "525000"
  },
  {
    "text": "trade-off is is is that you you start out with it not loaded right so you start out with an author in like you",
    "start": "525000",
    "end": "530200"
  },
  {
    "text": "don't have the books yet and you don't have the book reviews and my uh recollection of typ orm was that it it",
    "start": "530200",
    "end": "536160"
  },
  {
    "text": "didn't have a way of representing the these two states in the system right and I'm trying to remember I think you could",
    "start": "536160",
    "end": "541800"
  },
  {
    "text": "do things like you know for the author in the books you know tell it that the books is always loaded but that would",
    "start": "541800",
    "end": "547200"
  },
  {
    "text": "meant like every time you you touched an author you de facto brought back the books but then at least on the type system you were guaranteed for the books",
    "start": "547200",
    "end": "553600"
  },
  {
    "text": "to have been loaded but you you rarely want that precisely because this kind of lazy loading of the object model is the",
    "start": "553600",
    "end": "559040"
  },
  {
    "text": "fact of what orms are good at and so T back to like why did Joyce come around so so the kind of two ahas that start",
    "start": "559040",
    "end": "565200"
  },
  {
    "text": "that kicked off Joyce was like uh want to build in data loader from day one for every single you know lazy loaded call",
    "start": "565200",
    "end": "571279"
  },
  {
    "text": "and the other one was you know figuring out a way in the type system to represent the two states of a collection is not loaded until I asked for it to be",
    "start": "571279",
    "end": "577200"
  },
  {
    "text": "loaded with a populate hint or load hint which the load hints and populate hints are are not novel to chist you know they",
    "start": "577200",
    "end": "583360"
  },
  {
    "text": "they go back to active record and I'm I'm sure you know other ones before where you know you kind of you start",
    "start": "583360",
    "end": "588560"
  },
  {
    "text": "with an author but you know before you go in and play with the guts of the author you say by the way you know I I",
    "start": "588560",
    "end": "593720"
  },
  {
    "text": "know I'm going to want the books and the book reviews loaded and so you give it a little hint up front to like please go get those for me uh and then your",
    "start": "593720",
    "end": "600240"
  },
  {
    "text": "business logic after that can can have that so like you've always had to do that with orms like the active records",
    "start": "600240",
    "end": "606040"
  },
  {
    "text": "and type RMS of the world what was novel joist about the time was that that transition changed the types so like you",
    "start": "606040",
    "end": "612800"
  },
  {
    "text": "you would start with the author and and you could you couldn't like do books. getet you would have to do books. load",
    "start": "612800",
    "end": "617839"
  },
  {
    "text": "which was a promise and then for every book you'd have to like uh you know do my book. reviews. load and that would be",
    "start": "617839",
    "end": "623000"
  },
  {
    "text": "a promise uh but if you did and so it's by default safe which is one of the things I don't think I liked about typ",
    "start": "623000",
    "end": "628680"
  },
  {
    "text": "orm was like by default like the collections would look like you could call yet but it would turn into a runtime exception if you hadn't made",
    "start": "628680",
    "end": "634600"
  },
  {
    "text": "extra sure that you had done a populate hint 10 or 20 lines up or or even a completely separate method right like",
    "start": "634600",
    "end": "640040"
  },
  {
    "text": "like that's where I think this can really break down like I I remember uh even active record still kind of has",
    "start": "640040",
    "end": "645399"
  },
  {
    "text": "problems with this where you might have an endpoint uh that kicks off and like lows an author in active record and then",
    "start": "645399",
    "end": "651839"
  },
  {
    "text": "eventually you get into uh abstractions like you you you know call this helper method and this helper method and this helper method and at some point one of",
    "start": "651839",
    "end": "658160"
  },
  {
    "text": "these helper methods is going to data that like you didn't remember to populate you know not only 10 or 20",
    "start": "658160",
    "end": "663519"
  },
  {
    "text": "lines up but way off in some other method in your endpoint method yeah so anyway so with joist you know I just",
    "start": "663519",
    "end": "668959"
  },
  {
    "text": "typescript map types are just so neat so I had been playing around with a prototype of like you know can I have a",
    "start": "668959",
    "end": "674200"
  },
  {
    "text": "domain model that is inherently unloaded and when I apply you know overlay this typeint of like please you know ask the",
    "start": "674200",
    "end": "680720"
  },
  {
    "text": "orm to go load the data both go load the data from the from the SQL database but Mark in the type system that all of",
    "start": "680720",
    "end": "686480"
  },
  {
    "text": "these are now loaded and you can do gets and uh so super long tangents but those are the two that you know once I had",
    "start": "686480",
    "end": "692320"
  },
  {
    "text": "those figured out both of those seem novel enough to like okay okay now it's worth you know taking what had been um",
    "start": "692320",
    "end": "698000"
  },
  {
    "text": "usings and turning them into an actual project and that's what kicked off choice there's a number of threads there",
    "start": "698000",
    "end": "704720"
  },
  {
    "text": "that we could pull on um I think I want to start first maybe going down the data",
    "start": "704720",
    "end": "710440"
  },
  {
    "text": "loader thread so I'm pretty familiar with the data load pattern but I don't know that everyone listening to this",
    "start": "710440",
    "end": "716000"
  },
  {
    "text": "podcast will be so can you kind of explain what that pattern is and what it enables yeah sure so uh data loader is",
    "start": "716000",
    "end": "723720"
  },
  {
    "text": "just a way of doing automatic batching of almost anything in your system and so it comes out of Facebook and and maybe",
    "start": "723720",
    "end": "730079"
  },
  {
    "text": "the the niftiest thing about data loader is it just works on top of raw promises so I don't know if this is maybe too",
    "start": "730079",
    "end": "736120"
  },
  {
    "text": "academic of a tangent but if you look at the concept of data loading is is not super new we' actually so Facebook has a",
    "start": "736120",
    "end": "742199"
  },
  {
    "text": "a library called haxel hxl that builds this concept in in hll and that was from",
    "start": "742199",
    "end": "748480"
  },
  {
    "text": "10 or more years ago and then somebody had written a version of that in Scola they had kind of ported it to Scola and",
    "start": "748480",
    "end": "753639"
  },
  {
    "text": "I'm going to forget the name of it there was maybe two libraries in Scola that did it and we had used it in again about",
    "start": "753639",
    "end": "759440"
  },
  {
    "text": "10 years ago when I was at a scholar shop but at least in in s of the pattern so like I think it's kind of easy to",
    "start": "759440",
    "end": "765040"
  },
  {
    "text": "talk about the non- JavaScript version of the patterns and and what those would be is instead of like you know directly",
    "start": "765040",
    "end": "770800"
  },
  {
    "text": "loading the data you would make little I'm going to go ahead and use the word promise because that's what it ends up",
    "start": "770800",
    "end": "775839"
  },
  {
    "text": "being in in JavaScript which is why it works so well but you know back in the scholar days you would say like well I'm",
    "start": "775839",
    "end": "781959"
  },
  {
    "text": "going to you know I'm going to have an author and I'm going to you know go Loop over the uh author's books and I want",
    "start": "781959",
    "end": "788600"
  },
  {
    "text": "this book this book this book this book this book but in these old libraries instead of literally getting the book",
    "start": "788600",
    "end": "794120"
  },
  {
    "text": "you would make a little as of like a promise to get this book promise to get the next book promise to get the next book promise to get the next you you'd",
    "start": "794120",
    "end": "800480"
  },
  {
    "text": "kind of have a layer of like the your intention to get the data and then you would ask the runtime system like the",
    "start": "800480",
    "end": "806320"
  },
  {
    "text": "hle the hackel runtime system or whatever the follow one is to like okay now please go do that and it would have",
    "start": "806320",
    "end": "811720"
  },
  {
    "text": "the the smarts to like oh I I can see that you're trying to load 10 books like but instead of doing you know maybe a",
    "start": "811720",
    "end": "817519"
  },
  {
    "text": "book wire call book wire call book wire call book wire call and all a sudden you have an N plus one of a whole bunch of IO calls a whole bunch of wire calls the",
    "start": "817519",
    "end": "825079"
  },
  {
    "text": "haxel and the other libraries would uh recognize that you're doing essentially the same operation with just for a",
    "start": "825079",
    "end": "830600"
  },
  {
    "text": "different wear Clause basically right and so you know can I do one operation one wire call that um you know for all",
    "start": "830600",
    "end": "837920"
  },
  {
    "text": "10 books and the Facebook data loader Library yeah so it does exactly the same thing The Innovation there is that they",
    "start": "837920",
    "end": "843600"
  },
  {
    "text": "realize you can use the event Loop instead of what in other language is you need some sort of like little kind of",
    "start": "843600",
    "end": "849399"
  },
  {
    "text": "interpreter thingy to do right like in in uh again I I I don't know if this is Meandering in kind of technical but but",
    "start": "849399",
    "end": "855639"
  },
  {
    "text": "the idea is that sure if I'm going to take an author and I want to Loop over the books of course you have to be doing",
    "start": "855639",
    "end": "861079"
  },
  {
    "text": "something with I I want to load each book you know each of those is going to be a promise you know so go to you know",
    "start": "861079",
    "end": "866320"
  },
  {
    "text": "load book one I get a promise load book two get a promise book three get a promise load book four get a promise and",
    "start": "866320",
    "end": "871600"
  },
  {
    "text": "what data loader lets Library authors do is you know since the promise has to wait anyway you don't you don't get the",
    "start": "871600",
    "end": "877839"
  },
  {
    "text": "book right away the promise is like well I'll give it to you in a little bit in a little bit and what data loader does is",
    "start": "877839",
    "end": "883880"
  },
  {
    "text": "it before it even kicks off the wire call so you ask for book one book two book three book four it doesn't immediately do the wire call but it it",
    "start": "883880",
    "end": "890560"
  },
  {
    "text": "puts onto the event Loop basically a flush that says like like okay you know do this wire call at the end of the",
    "start": "890560",
    "end": "896480"
  },
  {
    "text": "event Loop which will come up right away right because the event loops just going spin spin spin spin spin spin spin and",
    "start": "896480",
    "end": "901639"
  },
  {
    "text": "so it puts a little basically like a flush event at the end of the event Loop that then um when it gets hit can let",
    "start": "901639",
    "end": "908920"
  },
  {
    "text": "the library author or or whoever's using data loader realize that like oh okay there have been 10 promises that asked",
    "start": "908920",
    "end": "913959"
  },
  {
    "text": "for books before I actually kick off the wire calls I'm going to condense those down into one wire call that will load",
    "start": "913959",
    "end": "920639"
  },
  {
    "text": "10 books all at once and and data loaders it's really a pretty small it's probably I don't know 150 lines of",
    "start": "920639",
    "end": "927160"
  },
  {
    "text": "JavaScript maybe something like that and and could you know Auto batch anything",
    "start": "927160",
    "end": "932199"
  },
  {
    "text": "you know it could do it for micros service calls it could do it for SQL calls uh it's really very generic and and really awesome how well it uh fits",
    "start": "932199",
    "end": "939560"
  },
  {
    "text": "into the event Loop and into JavaScript so if I were to to kind of Replay that",
    "start": "939560",
    "end": "944839"
  },
  {
    "text": "back and simplify a little bit you know it's taking the concept that you know any sort of call that goes over the wire",
    "start": "944839",
    "end": "951480"
  },
  {
    "text": "whether it's to a database or an API that is slow and it has a sort of intrinsic latency to do that whether",
    "start": "951480",
    "end": "956920"
  },
  {
    "text": "you're fetching one book or to use your books example or 10 books and so it says",
    "start": "956920",
    "end": "962000"
  },
  {
    "text": "okay instead of sort of optimistically fetching as soon as you ask for it I'm going to accumulate the set of requests",
    "start": "962000",
    "end": "968519"
  },
  {
    "text": "that you have into an array and wait till the next uh time that that data is",
    "start": "968519",
    "end": "975360"
  },
  {
    "text": "requested or rather the end of the event Loop and now I have a list of things I'm going to try to condense that list of",
    "start": "975360",
    "end": "982000"
  },
  {
    "text": "things into a single query and pull it back and I think with data loader you actually Define how that condense that condensing happens so you get a list of",
    "start": "982000",
    "end": "988560"
  },
  {
    "text": "keys passed off to a function you define you say okay I have a list of keys I know how to batch this into a single query",
    "start": "988560",
    "end": "995279"
  },
  {
    "text": "grab that and then I you know hand back that list and so data ler is kind of letting you Multiplex a set of queries",
    "start": "995279",
    "end": "1002399"
  },
  {
    "text": "into a single query that goes over the wire and then demultiplex that data back out to all the the requesters that asked",
    "start": "1002399",
    "end": "1009160"
  },
  {
    "text": "for it yeah that's a great point that you have to both combine and then uncombine yeah because that that's also",
    "start": "1009160",
    "end": "1014360"
  },
  {
    "text": "important on the other side of of you get back one big batch response if here's all 10 books but you're like well",
    "start": "1014360",
    "end": "1019720"
  },
  {
    "text": "I I you know got to give the first book to the first caller and the second book to the second caller and do that bookkeeping yeah that's a great",
    "start": "1019720",
    "end": "1026120"
  },
  {
    "text": "explanation so one thing that that leads me down to for that's a question kind of",
    "start": "1026120",
    "end": "1031438"
  },
  {
    "text": "specifically for Joyce is and this this goes back I think to how active record would do this right so active record did",
    "start": "1031439",
    "end": "1037640"
  },
  {
    "text": "not have the data loader pattern but it still would lazy load and So within a particular kind of query you could",
    "start": "1037640",
    "end": "1043678"
  },
  {
    "text": "accumulate a set of queries um so you might say hey I'm loading a bunch of authors and for each of I want their",
    "start": "1043679",
    "end": "1049400"
  },
  {
    "text": "books and each of whatever and then like at the end when you actually go to load that data that's when it you know issues",
    "start": "1049400",
    "end": "1055360"
  },
  {
    "text": "that query and it tried to do something smart where sometimes it would issue a set of queries and sometimes it would",
    "start": "1055360",
    "end": "1061880"
  },
  {
    "text": "issue a single query with joins where I have seen data loader used in the past it was usually accumulating on a per",
    "start": "1061880",
    "end": "1068760"
  },
  {
    "text": "table basis it was not trying to do any of that joining but I'm curious with joist you have potentially more of a",
    "start": "1068760",
    "end": "1075520"
  },
  {
    "text": "global view or a global way of hooking this in are you able to accumulate",
    "start": "1075520",
    "end": "1081080"
  },
  {
    "text": "queries across tables yeah well actually we could we don't right now we could in",
    "start": "1081080",
    "end": "1087400"
  },
  {
    "text": "some cases so in the case you don't always know what the next level of table you would need is right it depends on",
    "start": "1087400",
    "end": "1093000"
  },
  {
    "text": "whether you give it an explicit populate hint so like one of the great things I think about joist uh is that you don't actually need to use populate hints so",
    "start": "1093000",
    "end": "1099360"
  },
  {
    "text": "as far as I understand with rails in your example if you knew your business logic was going to like you know I have an author and I'm going to go through",
    "start": "1099360",
    "end": "1105000"
  },
  {
    "text": "all the books and I'm going through all the reviews if you wanted to make that so and you're saying like you know you could either make one giant query to",
    "start": "1105000",
    "end": "1111039"
  },
  {
    "text": "like join in all three levels of data or you could do like one query per level exactly so what the ne thing with joy is",
    "start": "1111039",
    "end": "1117520"
  },
  {
    "text": "is is I'll go to what you know uh maybe why we don't do that right now is that with joy you don't even need that",
    "start": "1117520",
    "end": "1123480"
  },
  {
    "text": "upfront populate hint so like because a data loader you know what you can just say load the author and then you'll you",
    "start": "1123480",
    "end": "1128799"
  },
  {
    "text": "can accumulate all the levels asynchronously right and so if you do that like we don't know what you're going to need ahead of time right until",
    "start": "1128799",
    "end": "1135240"
  },
  {
    "text": "after we've loaded all the books and then you go on and like oh I also need the book reviews you're like oh you also need the book reviews we'll get those",
    "start": "1135240",
    "end": "1141080"
  },
  {
    "text": "for you and so if you're not using these ahead of time populate hints that you know the populate hints would tell us",
    "start": "1141080",
    "end": "1146600"
  },
  {
    "text": "ahead of time that we do we need ahead of time multiple levels of data so if you're not using that then no we",
    "start": "1146600",
    "end": "1152240"
  },
  {
    "text": "couldn't but if you do use that we could technically we don't right now for no real reason than then well two I mean",
    "start": "1152240",
    "end": "1157600"
  },
  {
    "text": "two reasons one just haven't gotten to it yet uh but the other reason is that you know to go back to that uh kind of",
    "start": "1157600",
    "end": "1163000"
  },
  {
    "text": "the her suras of the world that exactly match the domain model or uh you know take the database schema and exactly map",
    "start": "1163000",
    "end": "1169039"
  },
  {
    "text": "it out to your graph Q API uh Joy also you know wants to do that for 80% of things but there's this other 20% of",
    "start": "1169039",
    "end": "1176000"
  },
  {
    "text": "things that are in your domain model that are not necessarily uh strictly in the database you know so derived",
    "start": "1176000",
    "end": "1181320"
  },
  {
    "text": "properties and calculations that you might just want to do in memory and for the most part injy those look the same",
    "start": "1181320",
    "end": "1188280"
  },
  {
    "text": "you know in kind of a good way if you're consuming a domain model you can't always tell which collections are literally from the database and",
    "start": "1188280",
    "end": "1194480"
  },
  {
    "text": "literally from or and or more of a derived value and um it just ended up being easier for our initial",
    "start": "1194480",
    "end": "1200919"
  },
  {
    "text": "implementation of the popular logic to you you know not have to subdivide those because to do the join thing you really",
    "start": "1200919",
    "end": "1207039"
  },
  {
    "text": "have to be getting everything literally from the database to to get it into a joint and we could go back and Implement",
    "start": "1207039",
    "end": "1212559"
  },
  {
    "text": "that but we'd have to like split the populate hint into like okay here's this half of the populate hint is stuff that was literally coming from the database",
    "start": "1212559",
    "end": "1219200"
  },
  {
    "text": "and this other part of the populate hint is coming from uh drive collections and drive fields that we can't literally put",
    "start": "1219200",
    "end": "1224919"
  },
  {
    "text": "in the join interesting so so if I understand correctly you're kind of allowing someone to do a JavaScript",
    "start": "1224919",
    "end": "1231720"
  },
  {
    "text": "level sort of derived view or computed feature of some sort and at the joist",
    "start": "1231720",
    "end": "1236919"
  },
  {
    "text": "level you actually are able to treat those pretty much the same way yeah like a lot of the the uh accur record things",
    "start": "1236919",
    "end": "1243640"
  },
  {
    "text": "like it has many through we have terms that kind of come from active record but they don't map one to one so I'm",
    "start": "1243640",
    "end": "1249520"
  },
  {
    "text": "forgetting if I'm saying the choiced one or the active record one but uh has many through or has you know uh one drived",
    "start": "1249520",
    "end": "1256320"
  },
  {
    "text": "has many dried and these sort of things little like you know abstractions that are super commonly used in your domain",
    "start": "1256320",
    "end": "1261840"
  },
  {
    "text": "model that are little shortcuts almost like rail Scopes I haven't done a lot with rail Scopes uh actually I haven't",
    "start": "1261840",
    "end": "1267360"
  },
  {
    "text": "done a lot with rails like like like I I worked in rails for maybe six months Circa 2008 or something like this and",
    "start": "1267360",
    "end": "1273720"
  },
  {
    "text": "then was in a shop that uh was moving off of a rails monolith onto other things and so haven't done a lot in it",
    "start": "1273720",
    "end": "1280039"
  },
  {
    "text": "but did enough to be like oh wow this is nice like like like just the ergonomics of rails is is the ergonomics of active",
    "start": "1280039",
    "end": "1285919"
  },
  {
    "text": "record are as far as I've seen unparalleled it is totally agree really powerful uh and so I I've done just",
    "start": "1285919",
    "end": "1292679"
  },
  {
    "text": "enough to to know that you know I I want to I come back to like Ruby you know at least in the past didn't have types have",
    "start": "1292679",
    "end": "1298840"
  },
  {
    "text": "enough of a static typing bigot that that I I I like to play in the languages that have types but for sure 100% use",
    "start": "1298840",
    "end": "1305120"
  },
  {
    "text": "active record as an inspiration for um you know gold standard another Direction",
    "start": "1305120",
    "end": "1310159"
  },
  {
    "text": "I'd like to dig into a little bit was this piece you were talking about about sort of the being able to check with the",
    "start": "1310159",
    "end": "1316120"
  },
  {
    "text": "types whether something is pre-loaded or not mhm and I guess a part of me is wondering why you need it and here",
    "start": "1316120",
    "end": "1324679"
  },
  {
    "text": "here's let me let me flush that out a little bit more one of the benefits of going to a fully asynchronous model",
    "start": "1324679",
    "end": "1329880"
  },
  {
    "text": "which is what you need to do to be able to take advantage of data loader is that I as a caller don't need to know whether",
    "start": "1329880",
    "end": "1337559"
  },
  {
    "text": "you've loaded that data or not I treat it the same way because my code is",
    "start": "1337559",
    "end": "1343080"
  },
  {
    "text": "already having to be asynchronous I'm already having to treat it as if it might come back sometime undetermined in",
    "start": "1343080",
    "end": "1348240"
  },
  {
    "text": "the future future I already have to await it if I need it now so why do I need a type hint to say this is",
    "start": "1348240",
    "end": "1355559"
  },
  {
    "text": "pre-loaded versus not I can treat it the same regardless yeah uh no that's a great question I think it's just that",
    "start": "1355559",
    "end": "1361559"
  },
  {
    "text": "async programming can be pretty tedious once you get down to like it's it's great for this you know sort of dynamic",
    "start": "1361559",
    "end": "1367200"
  },
  {
    "text": "Discovery sort of thing or or your system kind of at least the data loading s of that kind of evolves or whatnot but",
    "start": "1367200",
    "end": "1373320"
  },
  {
    "text": "I think the uh best example I can think of is like Nick from uh the talk a week or two go like if you just look at I'm",
    "start": "1373320",
    "end": "1380440"
  },
  {
    "text": "going to have a book and I'm I'm going to go over the I have an author and I'm going to go over the books and you do",
    "start": "1380440",
    "end": "1385679"
  },
  {
    "text": "books that load like okay there's an await and that's not too bad but now you're going to have to do uh map you",
    "start": "1385679",
    "end": "1392559"
  },
  {
    "text": "know and and now each of your book dot reviews. load is going to be a promise",
    "start": "1392559",
    "end": "1398159"
  },
  {
    "text": "and like all of a sudden once you've got like four loops and maps and filters that are doing async starts to get kind",
    "start": "1398159",
    "end": "1403559"
  },
  {
    "text": "of ugly so like like when you know you've got like I've got 10 lines of business IC that I want to write right",
    "start": "1403559",
    "end": "1409840"
  },
  {
    "text": "here in you know in scope but it's like two or three levels deep and I'm going to like you know await promise all and",
    "start": "1409840",
    "end": "1416559"
  },
  {
    "text": "you know do an async map or an async filter for every single little operation just gets super tedious and I I think I",
    "start": "1416559",
    "end": "1424200"
  },
  {
    "text": "I don't have any examples uh at hand but I like to show off the like you know before and after of like yeah sure",
    "start": "1424200",
    "end": "1430159"
  },
  {
    "text": "here's how you can do it with you know a bunch of loads. loads. weights. weights and all these other sort of things but",
    "start": "1430159",
    "end": "1435480"
  },
  {
    "text": "if you do the preload hint where now it's just like dog gets and it's all synchronous uh you can do like flat maps",
    "start": "1435480",
    "end": "1441320"
  },
  {
    "text": "and and all filters and all sorts of things just like the you know your regular collections your regular lists",
    "start": "1441320",
    "end": "1446520"
  },
  {
    "text": "and Maps as if they're in memory and and all of a sudden code that is like gnarly and and just goes to like literally two",
    "start": "1446520",
    "end": "1453080"
  },
  {
    "text": "or three lines of functional programming uh I I think it's a huge night and day difference that makes sense well and it",
    "start": "1453080",
    "end": "1459159"
  },
  {
    "text": "makes me wonder if there's room for a utility that basically does that even in a non-preloaded case where it says I've",
    "start": "1459159",
    "end": "1464200"
  },
  {
    "text": "got all this data it might be loaded might not be loaded I want to flatten it into synchronous so that I can just work",
    "start": "1464200",
    "end": "1470320"
  },
  {
    "text": "with it that sounds a lot like what choice does yeah grounded super baked into an RM right so so you know if",
    "start": "1470320",
    "end": "1477120"
  },
  {
    "text": "you're using is like um kind of like how D generic data loader is you know could you do the same thing for um I mean you",
    "start": "1477120",
    "end": "1483520"
  },
  {
    "text": "know to go back to your question of like why we don't do the SQL loads for joining you know three levels data which",
    "start": "1483520",
    "end": "1488799"
  },
  {
    "text": "I do want to do someday but it is actually pretty generic like right around right now the joist code that",
    "start": "1488799",
    "end": "1493960"
  },
  {
    "text": "does this little like preloading thing you know like in a good way is pretty agnostic about that it's executing",
    "start": "1493960",
    "end": "1499279"
  },
  {
    "text": "asking SQL to be executed it's you know it just sees them as promises that then it you know anyway it does seem like it",
    "start": "1499279",
    "end": "1505640"
  },
  {
    "text": "feels like an interesting problem to even make that that aggregation into a join work potentially in the async case",
    "start": "1505640",
    "end": "1513000"
  },
  {
    "text": "right because if you could having joist as a sort of central pivot point for",
    "start": "1513000",
    "end": "1519279"
  },
  {
    "text": "data loader you could write a single data loader function that is receiving all of your different classes of loads",
    "start": "1519279",
    "end": "1525600"
  },
  {
    "text": "and aggregating and it could distribute them out into do distinct underlying fetches or it could say hey you know",
    "start": "1525600",
    "end": "1532080"
  },
  {
    "text": "what all of these things these things are connected I can join them because I know the relationships between the parts",
    "start": "1532080",
    "end": "1538159"
  },
  {
    "text": "of the objects yeah I hadn't thought of it that way in terms of doing it yeah I think I was leaning when I thought of",
    "start": "1538159",
    "end": "1543679"
  },
  {
    "text": "how we would implemented in chice I was leading more into like well we've got the populate hint and we would lean into the populate hint to know uh you know",
    "start": "1543679",
    "end": "1550960"
  },
  {
    "text": "ahead of time what we would need to do you know while you're loading books you know like oh I'm going to need book",
    "start": "1550960",
    "end": "1557200"
  },
  {
    "text": "reviews that might what that might be where it may not work without the populate hints is like unless you've got a hint explicitly telling you it's going",
    "start": "1557200",
    "end": "1563760"
  },
  {
    "text": "to want the next level of data the runtime doesn't actually know yet you like nobody has called book review. load",
    "start": "1563760",
    "end": "1569399"
  },
  {
    "text": "so so like the data loaders wouldn't have been primed to know that they need that yet oh because you have to load the",
    "start": "1569399",
    "end": "1576440"
  },
  {
    "text": "original author or book level before you can call you have an object that you can",
    "start": "1576440",
    "end": "1582279"
  },
  {
    "text": "call that loader on yeah 100% yeah and if you wanted to get around that you'd have to fake out promises and then it",
    "start": "1582279",
    "end": "1587399"
  },
  {
    "text": "gets really complex [Laughter] like I could I could imagine returning a customized thing that wraps a promise",
    "start": "1587399",
    "end": "1593919"
  },
  {
    "text": "right that is like this is a book promise and I can call on it to load you know book reviews and it knows now to",
    "start": "1593919",
    "end": "1601000"
  },
  {
    "text": "aggregate things but that that's probably more complexity than it's worth yeah you're like speculatively executing",
    "start": "1601000",
    "end": "1606960"
  },
  {
    "text": "the next layer of of business logic I guess to to see what it's going to ask for something like that that's that's",
    "start": "1606960",
    "end": "1612760"
  },
  {
    "text": "kind of what I was thinking it's kind of extrapolating down the data loader pattern of not fetching the data until",
    "start": "1612760",
    "end": "1618880"
  },
  {
    "text": "the absolute moment you actually finally need a piece of data and when you have a",
    "start": "1618880",
    "end": "1624679"
  },
  {
    "text": "the structure of the tables which you you do you understand the structure of the relationships here theoretically I",
    "start": "1624679",
    "end": "1630880"
  },
  {
    "text": "don't need to load the data on a book to understand how to load the associated",
    "start": "1630880",
    "end": "1637320"
  },
  {
    "text": "book reviews and so once again in theory you could create this like like I don't",
    "start": "1637320",
    "end": "1642679"
  },
  {
    "text": "know whether to call it beautiful or ridiculous but like this crazy structure that is keeping track of okay here's a",
    "start": "1642679",
    "end": "1650520"
  },
  {
    "text": "thing that's going to represent it's back to your point like this is this is going to represent a book it doesn't yet",
    "start": "1650520",
    "end": "1655760"
  },
  {
    "text": "but you can expose these operations on it which will then you know follow down the relationships and do the correct joining and all of that mess I don't",
    "start": "1655760",
    "end": "1662480"
  },
  {
    "text": "know that it's worth it at all but it's uh that's where my head got to yeah I think the trick there would be like I",
    "start": "1662480",
    "end": "1668919"
  },
  {
    "text": "would imagine that the the logic that you would execute on the pseudo book would would expect it to look and smell",
    "start": "1668919",
    "end": "1675159"
  },
  {
    "text": "so much like a book like it would want it would want to do like is your this or is your you know is is your and",
    "start": "1675159",
    "end": "1681880"
  },
  {
    "text": "interacted in a way that yeah you know you could return a a fake book a notbook that just return you know empty titles",
    "start": "1681880",
    "end": "1688279"
  },
  {
    "text": "and that sort of thing but since you're executing actual user business logic code against it it seems like it could pretty easily trip up potentially yeah I",
    "start": "1688279",
    "end": "1696559"
  },
  {
    "text": "think the moment that you have to to actually access data now you've got to issue your queries and load but you",
    "start": "1696559",
    "end": "1702799"
  },
  {
    "text": "could in theory delay and and once again I don't know how much this would show up but you could in theory delay up until",
    "start": "1702799",
    "end": "1708320"
  },
  {
    "text": "that point and maybe by then you've also said told the system hey I want the reviews and I want these other things I",
    "start": "1708320",
    "end": "1714399"
  },
  {
    "text": "don't know that it's worth it but I just seemed like an interesting Direction I i' love to see the experimentation with",
    "start": "1714399",
    "end": "1721200"
  },
  {
    "text": "data loader because I feel like asynchronous data access patterns that are easy to use are an innovation that",
    "start": "1721200",
    "end": "1728240"
  },
  {
    "text": "has happened but are not widely spread and so you know kind of exploring what those possibilities look like is fun",
    "start": "1728240",
    "end": "1735279"
  },
  {
    "text": "yeah yeah I agree Nick I've been talking a lot and you're sitting there nodding what's on your mind what are you thinking uh mostly trying to keep up I",
    "start": "1735279",
    "end": "1742640"
  },
  {
    "text": "think I think you answered my the question that I had coming up about like that example you had with W with like",
    "start": "1742640",
    "end": "1749480"
  },
  {
    "text": "you know loading books and then loading reviews for the book and I'm just curious how that looks from like a type",
    "start": "1749480",
    "end": "1756279"
  },
  {
    "text": "perspective would those be would you when you call load on the books would you get that data but then the reviews",
    "start": "1756279",
    "end": "1763200"
  },
  {
    "text": "is like a promise that will resolve to that data or or an object that you have to call load on again how does it work",
    "start": "1763200",
    "end": "1768799"
  },
  {
    "text": "in joist uh well so in the vanilla case which is like not using you know preload hints yeah you would say I've got a book",
    "start": "1768799",
    "end": "1775480"
  },
  {
    "text": "and I'm going to go to the reviews and I'll load the reviews you know that's a promise uh that gets you the book",
    "start": "1775480",
    "end": "1781039"
  },
  {
    "text": "reviews back you know you might have and they just look like objects now and so that's that's kind of pretty vanill now",
    "start": "1781039",
    "end": "1787440"
  },
  {
    "text": "we I guess we kind of already started a second layer down in the graph because you know now what's our let's say book",
    "start": "1787440",
    "end": "1792480"
  },
  {
    "text": "reviews have comments right and so if you had had books and you load a bunch of book reviews to access the promise to",
    "start": "1792480",
    "end": "1799200"
  },
  {
    "text": "to access a book reviews comments is going to look like a promise because you know we're not using any of the pre-load hints and so it's to Joy it's just a",
    "start": "1799200",
    "end": "1806600"
  },
  {
    "text": "book review there's there's nothing that has told joy to load the comments ahead of time and so you would go into book",
    "start": "1806600",
    "end": "1812080"
  },
  {
    "text": "review one. comments. load doing a wait you know book review two. comments.",
    "start": "1812080",
    "end": "1817440"
  },
  {
    "text": "loadad do await and that sort of thing but if you had you know done a thing where like you know book I want you to",
    "start": "1817440",
    "end": "1824039"
  },
  {
    "text": "populate your book reviews and I'm going to pass a little hash of like populate the book reviews and their comments you",
    "start": "1824039",
    "end": "1830279"
  },
  {
    "text": "know little nested hash of book reviews pull and comments that's going to like change the the type of of your book",
    "start": "1830279",
    "end": "1836600"
  },
  {
    "text": "itself uh granted you do technically have to have a new variable for that because you know maybe you're although",
    "start": "1836600",
    "end": "1841799"
  },
  {
    "text": "when you do if you know this ahead of time you can do like you know con B is you know load this book for this primary",
    "start": "1841799",
    "end": "1849200"
  },
  {
    "text": "key and then pass your populate hint here as like the third argument to load and then you'll your V parameter will",
    "start": "1849200",
    "end": "1854840"
  },
  {
    "text": "already be it'll have the type overlaid with it so you know there there's just the Normal book type that knows you know",
    "start": "1854840",
    "end": "1861840"
  },
  {
    "text": "that has knows book has a title and it has comments that you but the the normal one you have to load the comments when",
    "start": "1861840",
    "end": "1868039"
  },
  {
    "text": "you do this as a promise when you do this uh past the you know books as comments you basically get a type",
    "start": "1868039",
    "end": "1873639"
  },
  {
    "text": "overlay on top of this which adds all it does is add. get methods to the",
    "start": "1873639",
    "end": "1879360"
  },
  {
    "text": "collection or or to the to the relations so if you've told it that you know you",
    "start": "1879360",
    "end": "1885159"
  },
  {
    "text": "want the comments now when you do like you know book book. reviews actually",
    "start": "1885159",
    "end": "1890200"
  },
  {
    "text": "since you've told it you want reviews and comments you could now do you know book. reviews. and so you do book.",
    "start": "1890200",
    "end": "1895919"
  },
  {
    "text": "review set get no no promise Subzero it's just a regular array and you could do comments and then you could do it and",
    "start": "1895919",
    "end": "1903039"
  },
  {
    "text": "so now this comments is no longer just a um how much would be a one to many with",
    "start": "1903039",
    "end": "1908320"
  },
  {
    "text": "a load but we we've added the get overlaid on top of the type that like we've added the get method to the",
    "start": "1908320",
    "end": "1914200"
  },
  {
    "text": "comments property you know so so now instead of doing comments. lad in a waiting net you can do comments. getet",
    "start": "1914200",
    "end": "1920679"
  },
  {
    "text": "length or whatever and so it's added a bunch of Getters that are synchronous",
    "start": "1920679",
    "end": "1927240"
  },
  {
    "text": "into what would otherwise be relations that you have toload and and wait for I",
    "start": "1927240",
    "end": "1932360"
  },
  {
    "text": "don't know if that was maybe what you were asking yeah yeah I think so so the relations themselves are an object and",
    "start": "1932360",
    "end": "1939279"
  },
  {
    "text": "to access the underlying array if it's a one to many or something like that you use either dogat or load on a weit right",
    "start": "1939279",
    "end": "1945880"
  },
  {
    "text": "which I think has thrown some people off ergonomically with joy like like they would expect if I take a book and I've",
    "start": "1945880",
    "end": "1951159"
  },
  {
    "text": "got the book reviews they they want the book reviews to be like literally an array of book reviews and to your point",
    "start": "1951159",
    "end": "1956360"
  },
  {
    "text": "no it's not actually that like for book and book reviews it's it's a um uh you know we call it a property but it's like",
    "start": "1956360",
    "end": "1962679"
  },
  {
    "text": "a holder of them that uh doesn't have them yet right because or or maybe it does right like if it doesn't have them",
    "start": "1962679",
    "end": "1968679"
  },
  {
    "text": "yet you have to call that load right you know so but that lets you abstract around that yeah it it lets us change",
    "start": "1968679",
    "end": "1974000"
  },
  {
    "text": "the type because if if we couldn't do that it it becomes hard to yeah like",
    "start": "1974000",
    "end": "1979240"
  },
  {
    "text": "like you know book. book reviews like sometimes be just an array because you know it's in memory but sometimes it's",
    "start": "1979240",
    "end": "1985440"
  },
  {
    "text": "it's a promise of an array when it's not and by making it a property and then it is once you get used to it I I start it",
    "start": "1985440",
    "end": "1992039"
  },
  {
    "text": "super just Blends into the background uh but you know you do have to do do load if it's not a memory andg if it is and",
    "start": "1992039",
    "end": "1999080"
  },
  {
    "text": "then it's just as if it's a regular array can you so if it's not in memory can you do.get and it will forcibly you",
    "start": "1999080",
    "end": "2007480"
  },
  {
    "text": "know run the async under you know basically force you to wait there no right so so that's the no it'll blow up",
    "start": "2007480",
    "end": "2013360"
  },
  {
    "text": "and say you can't do that and uh the the assertion is that you that will be a compiler like like you'll never you're",
    "start": "2013360",
    "end": "2020000"
  },
  {
    "text": "never allowed to call doget in a way that would blow up at runtime because it's um without it being a compiler",
    "start": "2020000",
    "end": "2026080"
  },
  {
    "text": "where where the type system knows it's not it's not loaded got it so it it forces you to be explicit about when the",
    "start": "2026080",
    "end": "2032600"
  },
  {
    "text": "data is going to be loaded exactly and not sort of accidentally Force synchronization when you don't want it",
    "start": "2032600",
    "end": "2038760"
  },
  {
    "text": "right yeah which works out really well it's a sort of thing the thing I love the most about it is that that is",
    "start": "2038760",
    "end": "2045159"
  },
  {
    "text": "orthogonal to the N plus1 prevention so I think in a lot of ORS this whole thing of like well you know populating so you",
    "start": "2045159",
    "end": "2051520"
  },
  {
    "text": "can do the doget is super ergonomic which is great but you you like have to do that to get n plus1 prevention you",
    "start": "2051520",
    "end": "2057679"
  },
  {
    "text": "have to tell the orm up front that you want three levels of of things but with Joyce uh you can still do that you can",
    "start": "2057679",
    "end": "2063760"
  },
  {
    "text": "still use populate H to get dogs and and use it in memory and that's super great but you don't have to if if you if your",
    "start": "2063760",
    "end": "2069599"
  },
  {
    "text": "business logic is scattered over multiple functions that get called in a loop and all of these other sort of things it's still going to DN plus one",
    "start": "2069599",
    "end": "2076200"
  },
  {
    "text": "right because you if you don't do the populate then you're forced to program in an async style but that moves you",
    "start": "2076200",
    "end": "2082079"
  },
  {
    "text": "into Data loader land which can do that aggregation for you and you're golden regardless that's beautiful I like that",
    "start": "2082079",
    "end": "2087679"
  },
  {
    "text": "so that container package where the relation is actually an object wrapping it is that the same when you're doing",
    "start": "2087679",
    "end": "2093520"
  },
  {
    "text": "like a onet toone relationship we have different implementations of those so uh we we call the our term is just it's a",
    "start": "2093520",
    "end": "2099720"
  },
  {
    "text": "relation anytime you point to another entity or collection of entities uh and so you can have like two categories of",
    "start": "2099720",
    "end": "2106520"
  },
  {
    "text": "relations like some point to a single entity which is a reference a reference to another entity and others are",
    "start": "2106520",
    "end": "2112119"
  },
  {
    "text": "collections to other entities and on the point to one side you've got either a one to many which is just the foreign",
    "start": "2112119",
    "end": "2118440"
  },
  {
    "text": "key or a one: one which is an incoming foreign key and then on the collection side you can have uh one to many's or",
    "start": "2118440",
    "end": "2125480"
  },
  {
    "text": "many to manys and so yeah we have four or five implementations of each of those things that know how to you know have",
    "start": "2125480",
    "end": "2132520"
  },
  {
    "text": "get methods if it's in memory and if it's not they uh you call load and then they they each have their own data loader uh implementation that you know",
    "start": "2132520",
    "end": "2139359"
  },
  {
    "text": "because to uh to batch many to many is a slightly different than batching one to one slightly different than batching uh",
    "start": "2139359",
    "end": "2145040"
  },
  {
    "text": "each of these and so they each have their own data loader implementation that will do the n plus1 prevention",
    "start": "2145040",
    "end": "2150720"
  },
  {
    "text": "[Music]",
    "start": "2150720",
    "end": "2156640"
  },
  {
    "text": "cool do you find yourself itching to grow at",
    "start": "2156640",
    "end": "2161839"
  },
  {
    "text": "work but you're not getting the support you need from your manager or maybe you're at a career transition and trying to figure out what you want and how to",
    "start": "2161839",
    "end": "2168040"
  },
  {
    "text": "get it or you've got a great job but could use an external perspective on some tricky cross functional",
    "start": "2168040",
    "end": "2173440"
  },
  {
    "text": "relationships hi this is kall from JS party and these are the exact types of problems I'm helping folks with in my",
    "start": "2173440",
    "end": "2179240"
  },
  {
    "text": "new business I think about it as pair programming for non-technical problems if you're curious you can learn more and",
    "start": "2179240",
    "end": "2184839"
  },
  {
    "text": "sign up for a free Exploratory session at kall c/",
    "start": "2184839",
    "end": "2190520"
  },
  {
    "text": "[Music]",
    "start": "2192400",
    "end": "2202240"
  },
  {
    "text": "coaching can we talk now a little bit about how you enable putting business",
    "start": "2202240",
    "end": "2208520"
  },
  {
    "text": "logic in and I thought it was interesting looking at what Joyce does compared to you know active record where",
    "start": "2208520",
    "end": "2216119"
  },
  {
    "text": "you want your RM to be able to keep up with data migrations right table changes things like that and in the active",
    "start": "2216119",
    "end": "2222160"
  },
  {
    "text": "record world this is all done magically behind the scenes you don't see it uh whereas if I was understanding it",
    "start": "2222160",
    "end": "2228319"
  },
  {
    "text": "correctly in joist you actually have a sort of generated class that is visible",
    "start": "2228319",
    "end": "2234960"
  },
  {
    "text": "that presumably I don't touch because you're going to be modifying that to keep up with data and then you have another class that is where I can put my",
    "start": "2234960",
    "end": "2241880"
  },
  {
    "text": "custom logic is that right yeah 100% so oh I I was going to say that might relate to a question I had which was how",
    "start": "2241880",
    "end": "2247640"
  },
  {
    "text": "you define those relationships uh yeah we can cover both so the relationships at least all of the ones that we've",
    "start": "2247640",
    "end": "2253640"
  },
  {
    "text": "talked about are defined just their foreign Keys you and so Joy will look at your uh database schema and which is",
    "start": "2253640",
    "end": "2259800"
  },
  {
    "text": "also what active record does uh we'll get to you know cable all your point but um yeah so so we have a code gen step uh",
    "start": "2259800",
    "end": "2267040"
  },
  {
    "text": "where we we look at the database and all of the tables and pull in you know",
    "start": "2267040",
    "end": "2272640"
  },
  {
    "text": "foreign keys and figure out pointers and those sort of things and then yeah we we generate two there's two so there's an",
    "start": "2272640",
    "end": "2278119"
  },
  {
    "text": "author. TS which we will create once uh and then never again so it's safe for you to to put stuff in there but that",
    "start": "2278119",
    "end": "2284920"
  },
  {
    "text": "author TS uh extends an author Coen which has all of the like super just",
    "start": "2284920",
    "end": "2292000"
  },
  {
    "text": "super mirroring your database of like Getters and Setters for first name getter and Setters for last name Getters but also for those these relations of",
    "start": "2292000",
    "end": "2298520"
  },
  {
    "text": "like you know that's where in author Cen is where like we know books is a one to many uh but publisher you know author",
    "start": "2298520",
    "end": "2305200"
  },
  {
    "text": "has a publisher so that's a um to one and and you know just all of those things go in this author Coden class",
    "start": "2305200",
    "end": "2311920"
  },
  {
    "text": "which I think we could check it in actually but it's generated code you're not supposed to touch it so you don't have to and uh just like every time you",
    "start": "2311920",
    "end": "2318880"
  },
  {
    "text": "you run your database migrations you run your migrations and then you run the Cen step which which makes these author code",
    "start": "2318880",
    "end": "2324680"
  },
  {
    "text": "gen and book code gen and book review code gen exactly match your database schema you mentioned active record",
    "start": "2324680",
    "end": "2330040"
  },
  {
    "text": "that's actually extremely similar to what active record does it's just that we do it as an explicit Coen step and",
    "start": "2330040",
    "end": "2335880"
  },
  {
    "text": "they do it when your Ruby process boots right yeah they're doing it at runtime and I never see that code yes right and",
    "start": "2335880",
    "end": "2342880"
  },
  {
    "text": "uh we do it at Coden time solely well there is you know a slight assertion that like if you change your migration",
    "start": "2342880",
    "end": "2348160"
  },
  {
    "text": "once and then you're going to run like your test Loop 50 times like moving that like scanning of the schema and all of",
    "start": "2348160",
    "end": "2354119"
  },
  {
    "text": "that stuff you know it happen only once you know kind of would mortise the cost potentially but the the biggest reason",
    "start": "2354119",
    "end": "2359359"
  },
  {
    "text": "we do it is just so the typescript can see it that that's what I was going to guess right you get you get types available to a compiler they do not yes",
    "start": "2359359",
    "end": "2365960"
  },
  {
    "text": "100% that's 95% of why we do it but yeah and so uh just to follow on that a",
    "start": "2365960",
    "end": "2371720"
  },
  {
    "text": "little bit the the author Cod genen always exactly matches the database but the author to you know to go back to you",
    "start": "2371720",
    "end": "2377079"
  },
  {
    "text": "know active record in like 2008 when when you pop open a you know in active record you class author and like that is",
    "start": "2377079",
    "end": "2383119"
  },
  {
    "text": "it like versus all of the you know Java hibernate you know whatever annotations and gyration you have to do compared to",
    "start": "2383119",
    "end": "2389920"
  },
  {
    "text": "the DAT it's it's just like it's magical and so that's what Joy provides Tri to mimic but then that author TS yeah it",
    "start": "2389920",
    "end": "2396280"
  },
  {
    "text": "gives you a place to add business bus logic it adds you lets you add other Getters and Setters that are built on",
    "start": "2396280",
    "end": "2401680"
  },
  {
    "text": "top of the other ones or other um has you know relations that are built on top of the other ones or validation rules or",
    "start": "2401680",
    "end": "2409440"
  },
  {
    "text": "life cycle Hooks and and all of the real meat of your domain model separate from the boiler plate of what mys and Setters",
    "start": "2409440",
    "end": "2416000"
  },
  {
    "text": "are can you quickly go into what are the life cycle hooks that you Expose and how they interact with your validations and",
    "start": "2416000",
    "end": "2422000"
  },
  {
    "text": "other pieces yeah sure so we'll see if I think we only have three or four so uh",
    "start": "2422000",
    "end": "2427040"
  },
  {
    "text": "we have before flush uh we should start with before create and before update so before create only runs on creates",
    "start": "2427040",
    "end": "2433800"
  },
  {
    "text": "before update only runs on updates before flush runs on either so maybe you have business object that wants to run",
    "start": "2433800",
    "end": "2439520"
  },
  {
    "text": "on either Creator update and then we have before delete and then I think we've got like a after committed which",
    "start": "2439520",
    "end": "2447000"
  },
  {
    "text": "the idea there was like okay after I commit I want to make a wire call to another system but but like I need my primary key to be set first before I",
    "start": "2447000",
    "end": "2453640"
  },
  {
    "text": "make a wire call some of these things we don't use after committed very often but I think we've we've got that and there",
    "start": "2453640",
    "end": "2459839"
  },
  {
    "text": "might be one other one but really like like the meat and potatoes is you know before update before create and uh",
    "start": "2459839",
    "end": "2466359"
  },
  {
    "text": "before flush and uh we also have validation rules and the difference there is that uh so the the life cycle",
    "start": "2466359",
    "end": "2473280"
  },
  {
    "text": "Hooks could have side effects like you're allowed to in an author before create be like ah I I want a book",
    "start": "2473280",
    "end": "2478520"
  },
  {
    "text": "by default or something like this uh you're allowed to or you can tell that I already have some books but I need to",
    "start": "2478520",
    "end": "2484400"
  },
  {
    "text": "Auto publish them or I don't know you know whatever your business logic days but then in the validation rules those",
    "start": "2484400",
    "end": "2489920"
  },
  {
    "text": "don't have side effects and uh so then the the way that our uh so we use a unit of work pattern which also throws people",
    "start": "2489920",
    "end": "2496319"
  },
  {
    "text": "off a little bit like it's a little bit different like which actually that is uh where we depart from uh you know just",
    "start": "2496319",
    "end": "2501359"
  },
  {
    "text": "being a active record clone is in active record you'll do things of like you know author. saave and it literally does the",
    "start": "2501359",
    "end": "2508200"
  },
  {
    "text": "SQL there right or author. update and it literally does the sequel there we kind of like to the point of data letter we",
    "start": "2508200",
    "end": "2513960"
  },
  {
    "text": "want to wait a little bit anyway uh but also uh we use this unit of work pattern",
    "start": "2513960",
    "end": "2519359"
  },
  {
    "text": "uh it's called entity manager uh again Kudos micro because that's what it was called in micro but it's basically a per",
    "start": "2519359",
    "end": "2525480"
  },
  {
    "text": "request cache of data you've already got from the system so uh you know if you go back to the old days of of the hybrid",
    "start": "2525480",
    "end": "2531200"
  },
  {
    "text": "dates and these sort of things like caching was a really big thing but they would they would do like caching like at the Machine level or the process level",
    "start": "2531200",
    "end": "2537400"
  },
  {
    "text": "and and all of a sudden you have to worry about staleness and and all of these other sort of things and that's just too hard for me to to really be",
    "start": "2537400",
    "end": "2543880"
  },
  {
    "text": "excited about and so we Joyce does right now doesn't do uh any sort of process uh sort of cache it just does it per",
    "start": "2543880",
    "end": "2550480"
  },
  {
    "text": "request which is usually pretty safe like for this request have I already got this author and if you have like you",
    "start": "2550480",
    "end": "2556000"
  },
  {
    "text": "know any changes that you would have made to it would be in your little memory so you know um so anyway why was",
    "start": "2556000",
    "end": "2561359"
  },
  {
    "text": "I talking about the entity manager so so do you delay flushes until after you respond to the user yes right so so you",
    "start": "2561359",
    "end": "2567079"
  },
  {
    "text": "you start you start you start your so it's not like doesn't live across",
    "start": "2567079",
    "end": "2572480"
  },
  {
    "text": "request right but but I'm in my save author mutation or endpoint you're going to start it uh you're going to make an entity manager for this request and then",
    "start": "2572480",
    "end": "2579400"
  },
  {
    "text": "do do a bunch of stuff you're going to load some authors you're going to load some books and you're going to mutate some authors you're going M mutate some",
    "start": "2579400",
    "end": "2584800"
  },
  {
    "text": "books in memory just by touching the objects and then when you do em flush it's like oh let me go diff whatever",
    "start": "2584800",
    "end": "2591040"
  },
  {
    "text": "you've changed in your domain objects and figure out like oh I should like save all of the authors the really neat",
    "start": "2591040",
    "end": "2596640"
  },
  {
    "text": "thing there is like if you've touched 10 authors it'll batch those into a save so it batches saves and updates uh just",
    "start": "2596640",
    "end": "2602359"
  },
  {
    "text": "like it does loads that is a very nice Improvement yeah right I I was talking to a friend friend the other day who was",
    "start": "2602359",
    "end": "2607839"
  },
  {
    "text": "like ah this entity manager thing was a little weird but then like you know the first time I went to like think about",
    "start": "2607839",
    "end": "2613119"
  },
  {
    "text": "like oh yeah you know I don't want to have hundred little different inserts he's like oh wow that turns out that was",
    "start": "2613119",
    "end": "2619160"
  },
  {
    "text": "nice but the the other thing that em flush does is run our Hooks and our validation so it it technically runs the",
    "start": "2619160",
    "end": "2624800"
  },
  {
    "text": "hooks first because since the hooks can run side effects there might be other entities that it needs to than hook right like if you had an author and it's",
    "start": "2624800",
    "end": "2631559"
  },
  {
    "text": "hook you know touched a book well okay now I need to loop back around and like do the I don't I don't want to do the author hooks ever again cuz then you",
    "start": "2631559",
    "end": "2638240"
  },
  {
    "text": "could like you know infinite Loop but at least do the book hooks again and so there's this kind of you know step-wise",
    "start": "2638240",
    "end": "2643520"
  },
  {
    "text": "function where where you handle like running hooks on anything that might have been loaded by your other hooks uh",
    "start": "2643520",
    "end": "2649200"
  },
  {
    "text": "but then once all of that has is done uh then you just run all of the Val validation rules as a single you know",
    "start": "2649200",
    "end": "2654319"
  },
  {
    "text": "just one pass because now you're not allowed any side effects now that everything all the hooks have settled down and we can just validate anything",
    "start": "2654319",
    "end": "2660240"
  },
  {
    "text": "that has changed uh which you know could be anything from not nulls to you know formats of fields or you know anything",
    "start": "2660240",
    "end": "2666760"
  },
  {
    "text": "that you want to write as a validation rule o you know someday we can talk or not someday maybe later we can talk",
    "start": "2666760",
    "end": "2672119"
  },
  {
    "text": "about reactivity reactive validation rules but um anyway I'll run all of those and assuming they pass bash your",
    "start": "2672119",
    "end": "2678160"
  },
  {
    "text": "inserts updates in Bob's your uncle I haven't said that in a little while but Bob's your uncle okay two questions on",
    "start": "2678160",
    "end": "2683640"
  },
  {
    "text": "that so one is how do you can make sure there are no Cycles if",
    "start": "2683640",
    "end": "2688960"
  },
  {
    "text": "you're allowing you know sort of these hooks to to update things and generate hooks I mean I could write code that",
    "start": "2688960",
    "end": "2694520"
  },
  {
    "text": "creates a cycle so how do you make sure that doesn't happen yeah kudos to to Zach uh who wrote this",
    "start": "2694520",
    "end": "2700359"
  },
  {
    "text": "we just keep track of the entities that we've ran hooks on before right so we do have a loop uh but the first iteration",
    "start": "2700359",
    "end": "2706680"
  },
  {
    "text": "of the loop is like oh I I ran it on these five entities put them in the like hooks has already ran never run them",
    "start": "2706680",
    "end": "2713119"
  },
  {
    "text": "again and okay go on to my next discover any new entities and if there are new entities run that on the second",
    "start": "2713119",
    "end": "2718880"
  },
  {
    "text": "iteration but like just you know keep putting things in the list of never run the the hook on this author again for",
    "start": "2718880",
    "end": "2726240"
  },
  {
    "text": "for this em flush anyway so I couldn't if I were to create a rule where I had a",
    "start": "2726240",
    "end": "2732800"
  },
  {
    "text": "a hook on authors that updated books and then I hook hook on books that updated authors it would not work as I had like",
    "start": "2732800",
    "end": "2738800"
  },
  {
    "text": "the author's one would run and then the books would update but then the their hook to touch the authors wouldn't yeah",
    "start": "2738800",
    "end": "2745359"
  },
  {
    "text": "like the the author would not have a have a chance to respond to whatever the book had done got it you're right yeah",
    "start": "2745359",
    "end": "2750960"
  },
  {
    "text": "you know so so both will run uh the author will run the book will run but if for whatever reason your author wanted",
    "start": "2750960",
    "end": "2756319"
  },
  {
    "text": "to see latest changes then no see that change and react to it it couldn't got it okay so that that answers one",
    "start": "2756319",
    "end": "2763079"
  },
  {
    "text": "question the other question I had is so you're talking about batching when does that batch go out like does it wait",
    "start": "2763079",
    "end": "2769280"
  },
  {
    "text": "until I've done a user response or it just waits for some amount of work or like what what tells the the flush that",
    "start": "2769280",
    "end": "2775200"
  },
  {
    "text": "hey I've got enough things to to do an actual right over the wire you just have",
    "start": "2775200",
    "end": "2780599"
  },
  {
    "text": "to it's whenever you in your endpoint decide to call Em flush that's when the SQL calls happen so it's it's kind of up",
    "start": "2780599",
    "end": "2787359"
  },
  {
    "text": "to you got it so it's explicit yeah it's an explicit call to em to TM fles it's not like put on the event Loop to do I",
    "start": "2787359",
    "end": "2795079"
  },
  {
    "text": "don't know or something like that but no you and typically you know we do a lot of graph qal mutations and it'll be get",
    "start": "2795079",
    "end": "2800599"
  },
  {
    "text": "the input uh load the entity put the input into the entity and then call the",
    "start": "2800599",
    "end": "2805680"
  },
  {
    "text": "in flush and then return the you know result got it but you couldn't in some",
    "start": "2805680",
    "end": "2811359"
  },
  {
    "text": "ways you could start streaming that result back out and then put the the flush in like an after request or",
    "start": "2811359",
    "end": "2817200"
  },
  {
    "text": "something like that yeah yeah yeah Joyce does not have any opinions on when you",
    "start": "2817200",
    "end": "2822359"
  },
  {
    "text": "would start to uh re you know start returning data to your users versus when you try and commit things to the",
    "start": "2822359",
    "end": "2829240"
  },
  {
    "text": "database if you have do you have visibility into the request such that you could you can like catch if there is",
    "start": "2829240",
    "end": "2836079"
  },
  {
    "text": "unflushed changes that are still there at the end of a request off the top of my head no uh we do have some uh so",
    "start": "2836079",
    "end": "2843319"
  },
  {
    "text": "Joyce tries to be in general a pretty opinion unin it well I mean it has opinions but in terms of your uh apis",
    "start": "2843319",
    "end": "2850760"
  },
  {
    "text": "like like it doesn't really care about whether you're using RPC grpc or graphql or fastify Express or all of those sort",
    "start": "2850760",
    "end": "2857800"
  },
  {
    "text": "of things so I think because of that it doesn't doesn't really have any visibility into any of those my one",
    "start": "2857800",
    "end": "2863319"
  },
  {
    "text": "caveat is just like uh because we you know we personally use graphql we've built a fair amount of uh scaffolding",
    "start": "2863319",
    "end": "2869240"
  },
  {
    "text": "and glue kind of you know uh on top of uh joist for living in a graphql world",
    "start": "2869240",
    "end": "2874839"
  },
  {
    "text": "but there's a pretty clear delineation between the the core orm that could work with any anything and then like our",
    "start": "2874839",
    "end": "2880000"
  },
  {
    "text": "little you know graphql polish that is U pretty neat but but optional on top of it uh so yeah you know you for your your",
    "start": "2880000",
    "end": "2887599"
  },
  {
    "text": "aming of drilling into the request yeah would be exercise to the reader I guess yeah well I'm just so how do you how do",
    "start": "2887599",
    "end": "2895040"
  },
  {
    "text": "you have per request caching then if you're not if you don't have visibility into the request in the graphql server",
    "start": "2895040",
    "end": "2901559"
  },
  {
    "text": "you get a little hook of making a context you know and and graphql okay so it's outside of the the orm core yeah",
    "start": "2901559",
    "end": "2909200"
  },
  {
    "text": "yeah right so when we boot up our graphql server it's going to ask for you",
    "start": "2909200",
    "end": "2914319"
  },
  {
    "text": "know a new request came in and it's like a fastify request entity and like you know how do you want to turn this into a",
    "start": "2914319",
    "end": "2920720"
  },
  {
    "text": "graphql context parameter for the for all of the resolvers to use and that sort of thing and that's where we're",
    "start": "2920720",
    "end": "2926359"
  },
  {
    "text": "like oh okay this is a new request let's make a new entity manager and we put it on the graphql context or you know you",
    "start": "2926359",
    "end": "2932160"
  },
  {
    "text": "could do F toyless you put it uh put things onto their request too so you could do actually do that first we we've",
    "start": "2932160",
    "end": "2937960"
  },
  {
    "text": "got middleware that first sets like request. context so because we do have some fastify handlers that are not graph",
    "start": "2937960",
    "end": "2944559"
  },
  {
    "text": "qo and so they also have access to the request contacts and hence the entity manager if they wanted to do anything",
    "start": "2944559",
    "end": "2950440"
  },
  {
    "text": "but then most of our stuff ends up being graph q mations that then you know uses that context parameter to get the entity",
    "start": "2950440",
    "end": "2956720"
  },
  {
    "text": "manager uh out of the request context and do any loads or do any saves got it",
    "start": "2956720",
    "end": "2962440"
  },
  {
    "text": "so you're say basically you insert middleware and that's what sets up the eny manager caches for that instance of",
    "start": "2962440",
    "end": "2968240"
  },
  {
    "text": "the entity manager go go go so you could actually in theory at the end of your middleware request um you know wrapping",
    "start": "2968240",
    "end": "2974079"
  },
  {
    "text": "around on the other side say is there un are there unflushed changes maybe I need to throw an error or something like that",
    "start": "2974079",
    "end": "2980440"
  },
  {
    "text": "no yeah actually the the A system that I did you know back in the Java days did",
    "start": "2980440",
    "end": "2985680"
  },
  {
    "text": "do that like our our middleware uh you know created whatever our version of unit of work was back in the day and",
    "start": "2985680",
    "end": "2992160"
  },
  {
    "text": "auto flushed or Auto committed whatever the it was I surely was hibernate back",
    "start": "2992160",
    "end": "2997319"
  },
  {
    "text": "in the day but um the middleware did it right and our middleware doesn't and I I",
    "start": "2997319",
    "end": "3003680"
  },
  {
    "text": "guess I don't have a real good reason for why but no yeah you're right it could Nick I feel like I've been talking",
    "start": "3003680",
    "end": "3010000"
  },
  {
    "text": "a long time again what's going on going sorry I get excited about this stuff",
    "start": "3010000",
    "end": "3015319"
  },
  {
    "text": "good no I love it yeah yeah this is great you're asking way deeper questions than I I know as a casual om user that",
    "start": "3015319",
    "end": "3024280"
  },
  {
    "text": "usually just yells at it but bangs my head I the wall until it starts working well you haven't used Joy then I haven't",
    "start": "3024280",
    "end": "3031839"
  },
  {
    "text": "yet no the last one was typo RM and uh that's why I have those opinions I guess",
    "start": "3031839",
    "end": "3038000"
  },
  {
    "text": "yeah I was talking to a friend a mutual friend who was like you know you don't really you can't really understand the",
    "start": "3038000",
    "end": "3043720"
  },
  {
    "text": "ergonomics of an orm until you just use it use it in hate or or not or hopefully non-hate but um it's hard to know until",
    "start": "3043720",
    "end": "3049799"
  },
  {
    "text": "you get into the guts of whatever you're building and you're like oh this actually does or does not s so I guess",
    "start": "3049799",
    "end": "3055520"
  },
  {
    "text": "to take it up a a little higher level as an omm Creator and just like a user of",
    "start": "3055520",
    "end": "3062319"
  },
  {
    "text": "them too what are some arguments against orms that you've commonly heard yeah",
    "start": "3062319",
    "end": "3068799"
  },
  {
    "text": "sure I think that well and I'm going to insert my bias into these answers obviously because I'm kind of an orm",
    "start": "3068799",
    "end": "3074359"
  },
  {
    "text": "apologist but uh I can think of two things one is that uh and actually a",
    "start": "3074359",
    "end": "3079520"
  },
  {
    "text": "different mutual friend but we were talking about this the other uh week is if you go way back in time there's the",
    "start": "3079520",
    "end": "3084880"
  },
  {
    "text": "paper from the guy you know RM of their Vietnam of computer science I for forget his name which was you know made made",
    "start": "3084880",
    "end": "3091720"
  },
  {
    "text": "the rounds pre Hacker News you know and his his assert I actually it's been so long I I forget the assertions of his",
    "start": "3091720",
    "end": "3098079"
  },
  {
    "text": "paper but uh you know was one of the first like you know orm push back things back in the day and my recollection at",
    "start": "3098079",
    "end": "3104440"
  },
  {
    "text": "the time should go read it but uh was that you know if you go back to you know circuit",
    "start": "3104440",
    "end": "3110480"
  },
  {
    "text": "200025 uh which is where both like was maybe like Peak omm's but also Peak omm",
    "start": "3110480",
    "end": "3115599"
  },
  {
    "text": "hate and kind of put back what I saw the people who hated orms the most again this is where I'm going to read my bias",
    "start": "3115599",
    "end": "3121480"
  },
  {
    "text": "into it as kind of orm apologist was orms that would try to like work with a",
    "start": "3121480",
    "end": "3127000"
  },
  {
    "text": "database schema that just fundamentally was not great right so you know circuit 200 whatever you know typically you're",
    "start": "3127000",
    "end": "3133440"
  },
  {
    "text": "doing Java Enterprise stuff in the back office of an insurance company that has a schema designed in 1970 or or",
    "start": "3133440",
    "end": "3139119"
  },
  {
    "text": "something like this and you're like wow this schema has like you know fields that are like four characters long in all constants or something like this uh",
    "start": "3139119",
    "end": "3146000"
  },
  {
    "text": "which not of itself is not terrible but uh orms there in the mid 90s and and",
    "start": "3146000",
    "end": "3151559"
  },
  {
    "text": "into the 2000s you know tried to make their U pitch of of like taking",
    "start": "3151559",
    "end": "3156839"
  },
  {
    "text": "generally bad I don't want to say bad Legacy let's use Legacy relational schemas and then like crafting them into",
    "start": "3156839",
    "end": "3162760"
  },
  {
    "text": "this beautiful object model that was like like genuinely different from whatever the database schema was and",
    "start": "3162760",
    "end": "3168280"
  },
  {
    "text": "like you know patch over the sins of the past and these sort of things and I think that's where like that's just hard",
    "start": "3168280",
    "end": "3174880"
  },
  {
    "text": "and difficult and I don't you know it that that's where you get a lot of this like you know mismatch of the whole or",
    "start": "3174880",
    "end": "3180920"
  },
  {
    "text": "versus relational mismatch that's where all of this comes from right and and I assert that like if you don't try to do",
    "start": "3180920",
    "end": "3186720"
  },
  {
    "text": "that like if you just like make sure you join companies and jobs where you get a Green Field database schema disclaimer",
    "start": "3186720",
    "end": "3192760"
  },
  {
    "text": "you know that that you can cheat and and I certain that object relational mismatch goes away because if you've got",
    "start": "3192760",
    "end": "3199000"
  },
  {
    "text": "a nice schema and you just treat your tables as entities or even as a little graph right like like actually a lot of",
    "start": "3199000",
    "end": "3205079"
  },
  {
    "text": "what you if joist thinks in terms of graphs right it thinks of this entity points to this other entity and granted",
    "start": "3205079",
    "end": "3211440"
  },
  {
    "text": "we you know uh in the database nodes are not explicit entities it's not a true graph where you can go to a node and put",
    "start": "3211440",
    "end": "3216920"
  },
  {
    "text": "attributes or sorry on you can't go to an edge and put attributes on an edge on a foreign key but otherwise like you",
    "start": "3216920",
    "end": "3223559"
  },
  {
    "text": "really can't think of your the entities in your in your database as a graph and at that you know to me it's it's just",
    "start": "3223559",
    "end": "3229640"
  },
  {
    "text": "kind of this you know if you squint and you look at a relational database you can squint and see a graph or you can",
    "start": "3229640",
    "end": "3234839"
  },
  {
    "text": "look at a graph and squint and see a relational database and you know look at an RM and squint and see both either of",
    "start": "3234839",
    "end": "3240480"
  },
  {
    "text": "those so as long as you're doing a one toone mapping so like if you're as long as you're doing a onet to one mapping between those domains I think the object",
    "start": "3240480",
    "end": "3247720"
  },
  {
    "text": "relational mismatch doesn't exist you know maybe that's a strong statement but you know for at least in the way that",
    "start": "3247720",
    "end": "3253400"
  },
  {
    "text": "annoyed so many people back in the day and so so that's one of my big main assertions as as an orom myologist is is",
    "start": "3253400",
    "end": "3259400"
  },
  {
    "text": "don't just don't try to do that you know don't try to do all of the crazy stuff that they did Circuit 2000s of crafting",
    "start": "3259400",
    "end": "3265520"
  },
  {
    "text": "your database scheme to be something better and different one of the big arguments that I have seen and been on",
    "start": "3265520",
    "end": "3271280"
  },
  {
    "text": "both sides of in the past was uh ORS make it really easy to write non- performant sequel yep and I cannot tell",
    "start": "3271280",
    "end": "3278799"
  },
  {
    "text": "you how many n plus1 Loops I cleaned up back in the day however it seems as",
    "start": "3278799",
    "end": "3286119"
  },
  {
    "text": "though you may have solved that with joy right uh so that I mean that is a big",
    "start": "3286119",
    "end": "3292440"
  },
  {
    "text": "argument in in favor actually I mean and one of the things when I saw what you were doing with with data loader and joist I because I to be honest I looked",
    "start": "3292440",
    "end": "3300680"
  },
  {
    "text": "up joist this morning in preparation for this episode yeah but I saw that I was like whoa they solved that problem",
    "start": "3300680",
    "end": "3306520"
  },
  {
    "text": "that's amazing like that's really really good I do think there is a question around so one of the things that orms do",
    "start": "3306520",
    "end": "3313559"
  },
  {
    "text": "is they push you to kind of make some simplifying assumptions about structure of tables and one of the examples um is",
    "start": "3313559",
    "end": "3321319"
  },
  {
    "text": "the default easy way to do it is every table has a single ID that's a sequ sequence or INR menting number or",
    "start": "3321319",
    "end": "3328960"
  },
  {
    "text": "something like that and I have seen the argument and I I don't know how I feel",
    "start": "3328960",
    "end": "3335599"
  },
  {
    "text": "about it but I'm curious your take that you th those basically allow you to get away from from really deeply thinking",
    "start": "3335599",
    "end": "3342559"
  },
  {
    "text": "about how your data naturally should be structured now my argument is most of the people writing these database",
    "start": "3342559",
    "end": "3348440"
  },
  {
    "text": "migrations are not data scientists or data engineers and those simplifying assumptions on average lead to better",
    "start": "3348440",
    "end": "3353880"
  },
  {
    "text": "data or better data structures than when somebody's trying to do every custom one but I'm kind of curious what",
    "start": "3353880",
    "end": "3360680"
  },
  {
    "text": "you've seen in that domain yeah I I mean again maybe this is just my my bias or",
    "start": "3360680",
    "end": "3366319"
  },
  {
    "text": "my my background talking but I I'm just such a so bought into the concept of entities right like thinking about your",
    "start": "3366319",
    "end": "3372440"
  },
  {
    "text": "domain model in terms of authors and books and book reviews and claims or or",
    "start": "3372440",
    "end": "3377680"
  },
  {
    "text": "you know whatever domain that you're interested in is you know figuring out the uh logical uh you know identities of",
    "start": "3377680",
    "end": "3385960"
  },
  {
    "text": "of of the of the entities involved uh that's just like so much how I think",
    "start": "3385960",
    "end": "3392319"
  },
  {
    "text": "that of course I'm going to just have tables with ID primary keys that match my entities and that sort of thing so I",
    "start": "3392319",
    "end": "3397839"
  },
  {
    "text": "guess and and you know maybe it's maybe I I guide myself to be working in jobs that do that like I'm just building",
    "start": "3397839",
    "end": "3404319"
  },
  {
    "text": "another web back end in you know my version of rails or whatever that I I think it works out really well you know",
    "start": "3404319",
    "end": "3410880"
  },
  {
    "text": "for sure you know I'm sure there are you know Niche use cases out there of you know I can think of I I I do so much",
    "start": "3410880",
    "end": "3417920"
  },
  {
    "text": "oltp but like the oaps of the world you know which are all metrics and those sort of things like you know I could see",
    "start": "3417920",
    "end": "3423880"
  },
  {
    "text": "that you know when you really start caring about staring you know storing data and columns and column databases",
    "start": "3423880",
    "end": "3429400"
  },
  {
    "text": "and all of these although even then you knowbe you could represent those entities but yeah I I think I could buy",
    "start": "3429400",
    "end": "3434920"
  },
  {
    "text": "that for certain uh super optimized Niche cases but like you got to I would Asser the the you know benefit of the",
    "start": "3434920",
    "end": "3440799"
  },
  {
    "text": "doubt is is on that it's probably empty and onus would be on the other side to prove why it's not and they need some sort of esoteric way of storing it but",
    "start": "3440799",
    "end": "3448280"
  },
  {
    "text": "that you know the other thing is if you've got that re that rationale then go for it right like say have to use an",
    "start": "3448280",
    "end": "3454760"
  },
  {
    "text": "orm for everything under which was going to be my other point the other thing uh that I hear and often criticism of orms",
    "start": "3454760",
    "end": "3461400"
  },
  {
    "text": "kind of back to your queries is that it uh you know orms uh almost always have query Builders and like once you start",
    "start": "3461400",
    "end": "3468520"
  },
  {
    "text": "to get to a certain esoteric level of a query Builder that does like Aggregates and group bu and and inner queries and",
    "start": "3468520",
    "end": "3475880"
  },
  {
    "text": "and these other sort of things like is it really that much simpler than writing SQL and I agree it's not right so like",
    "start": "3475880",
    "end": "3481760"
  },
  {
    "text": "like once you hit a complexity of a SQL query that is like basically doing group buys and Aggregates I personally am not",
    "start": "3481760",
    "end": "3488119"
  },
  {
    "text": "interested in writing a query Builder to represent that especially in a type safe way except for the the I'm gonna say it",
    "start": "3488119",
    "end": "3493599"
  },
  {
    "text": "wrong but the the kisley guys kle kley however you say that they've done great so like go use that like like like if",
    "start": "3493599",
    "end": "3499559"
  },
  {
    "text": "you've got a sufficiently complex query that that needs all of these sort of things like get as low to the metal in",
    "start": "3499559",
    "end": "3505000"
  },
  {
    "text": "terms of SQL as you can but like you know if I look at our um you know the app that we've got in production",
    "start": "3505000",
    "end": "3511720"
  },
  {
    "text": "probably 90% of our queries and mutations don't need that and can go through the or for like super for free",
    "start": "3511720",
    "end": "3518839"
  },
  {
    "text": "data access and that last 10% like yeah don't don't treat an orm like the hammer that you have to do everything for for",
    "start": "3518839",
    "end": "3524319"
  },
  {
    "text": "that last 10% where you need the escape hatch to connect or kle or KY or even",
    "start": "3524319",
    "end": "3529880"
  },
  {
    "text": "just a raw SQL string like that's fine take take it if you need it uh but but that that I I don't I think a lot of uh",
    "start": "3529880",
    "end": "3536599"
  },
  {
    "text": "you know the anorm people like see those use cases and now mean like well I can't use the orm for the other 90% that it's",
    "start": "3536599",
    "end": "3542160"
  },
  {
    "text": "just like select star from books or ideas whatever right yeah I think that that's a big touchy point for me too is",
    "start": "3542160",
    "end": "3547760"
  },
  {
    "text": "when I like I could do this in SQL and I know how to do it there but now I have to learn this seemingly esoteric way of",
    "start": "3547760",
    "end": "3554000"
  },
  {
    "text": "doing the exact same thing right that kind of turns me off from it the thing that I love about ORS and was one of the",
    "start": "3554000",
    "end": "3561760"
  },
  {
    "text": "reasons I was advocating orms in a previous place that was some anti yeah",
    "start": "3561760",
    "end": "3567559"
  },
  {
    "text": "is the standardization of life cycles and validation yes because when you go",
    "start": "3567559",
    "end": "3572839"
  },
  {
    "text": "to Raw SQL or a raw query Builder or something like that yeah there's no",
    "start": "3572839",
    "end": "3579160"
  },
  {
    "text": "obvious place to put that validation in a way that you know no matter how this",
    "start": "3579160",
    "end": "3584520"
  },
  {
    "text": "thing is being updated no matter what's going on we're going to make sure that the things that need to be true or should be true are true yeah your",
    "start": "3584520",
    "end": "3590559"
  },
  {
    "text": "business in variance 100% exactly and so what an omm does is it provides proves a",
    "start": "3590559",
    "end": "3597200"
  },
  {
    "text": "standardized way of representing and and talking about and and writing invariants",
    "start": "3597200",
    "end": "3603480"
  },
  {
    "text": "that don't live in the database 100% And that's incredibly valuable yeah I agree I I've uh you know obviously I've heard",
    "start": "3603480",
    "end": "3610079"
  },
  {
    "text": "a lot of the feedback and assertions that you know you know of yeah the subset of the community or or set of the",
    "start": "3610079",
    "end": "3616000"
  },
  {
    "text": "community that likes to use R I go to the same thing like where where do you validate that your author title is what",
    "start": "3616000",
    "end": "3621359"
  },
  {
    "text": "you want it to be every time you touch an author and um I don't know yeah I'd",
    "start": "3621359",
    "end": "3626640"
  },
  {
    "text": "miss it is there anything that we haven't talked about that you would like to share with folks listening to this",
    "start": "3626640",
    "end": "3633440"
  },
  {
    "text": "episode whether it's about joist orms in general uh well yeah actually I was thinking that the one thing that we",
    "start": "3633440",
    "end": "3638480"
  },
  {
    "text": "haven't talked about too much and we we can try and keep it short because it could get well I don't know if long but",
    "start": "3638480",
    "end": "3643680"
  },
  {
    "text": "uh Joy concept of uh reactivity basically so like a lot of what we've talked about in Joyce so far is I mean",
    "start": "3643680",
    "end": "3649839"
  },
  {
    "text": "it's cool you know but not necessarily novel per se I guess data loader baked in all the way is probably novel I found",
    "start": "3649839",
    "end": "3656240"
  },
  {
    "text": "it novel yeah the data litter baked in all the way that's great I love it the type marking that the collections is",
    "start": "3656240",
    "end": "3662440"
  },
  {
    "text": "typed or not was novel actually micro I I believe inter took has a form of doing that now which is great uh he was I'm",
    "start": "3662440",
    "end": "3669280"
  },
  {
    "text": "trying to think if I had done a PR to do a version of that in micro but we I was chatting with the micro by and I took a",
    "start": "3669280",
    "end": "3675920"
  },
  {
    "text": "lot of stuff from micro and he's like I'm going to take the tight hints from Joyce and put him in which was you know cross pollination was great but I I",
    "start": "3675920",
    "end": "3682920"
  },
  {
    "text": "believe that the kind of the last sort of Novel thing that Joy has is the concept of reactive validation rules and",
    "start": "3682920",
    "end": "3688559"
  },
  {
    "text": "reactive Drive Fields so what these are is uh so a lot of life cycle Hooks and",
    "start": "3688559",
    "end": "3694200"
  },
  {
    "text": "validation Rules by default like only run if you're touching the entity itself right let's take an an author and you've",
    "start": "3694200",
    "end": "3700720"
  },
  {
    "text": "got some business rule that the first name has to be this or that or this or that right but what if you've got a",
    "start": "3700720",
    "end": "3706039"
  },
  {
    "text": "business rule on an author that depends on like entities that that are touches right like I can only have 10 books or",
    "start": "3706039",
    "end": "3712880"
  },
  {
    "text": "you know none of my books can be published until I'm published or I'm I'm over the age of 18 or something like",
    "start": "3712880",
    "end": "3718480"
  },
  {
    "text": "this and so joist has a way of defining both validation roles and then also",
    "start": "3718480",
    "end": "3723640"
  },
  {
    "text": "Drive fields in the database the quickest one that comes to mind is like author a number of books right like let's say you you've got an author",
    "start": "3723640",
    "end": "3730559"
  },
  {
    "text": "search you want to search about the ashers and one of the things you want to search on is number of books is greater",
    "start": "3730559",
    "end": "3735680"
  },
  {
    "text": "than 10 or greater than 100 and uh you know you can do that by uh doing the join into the books and then doing the",
    "start": "3735680",
    "end": "3741160"
  },
  {
    "text": "sum and Aggregate and all that but a lot of times with these dashboard Pages it's great to just have a column right I just",
    "start": "3741160",
    "end": "3747000"
  },
  {
    "text": "want an in column in the database yeah you have a counter cache basically that's like caching the count as it",
    "start": "3747000",
    "end": "3752119"
  },
  {
    "text": "right exactly and it makes it super easy and so let's say that we want to do these so in joist you can Define one of",
    "start": "3752119",
    "end": "3757319"
  },
  {
    "text": "these like I'm going to define a number of books and we take those populate hints that used to tell us like the subgraph of uh entities to populate so I",
    "start": "3757319",
    "end": "3765200"
  },
  {
    "text": "can get data to them we we take that same concept and we put it into our number of books declaration and say like",
    "start": "3765200",
    "end": "3771880"
  },
  {
    "text": "populate this subgraph of the author the author in the books so I can can count them and return 10 and and that's all",
    "start": "3771880",
    "end": "3778599"
  },
  {
    "text": "you do and you're like okay that's great but what does that get me what that gets you is that Joyce has a capability to",
    "start": "3778599",
    "end": "3783799"
  },
  {
    "text": "reverse that load hint and now find the find any place that would basically",
    "start": "3783799",
    "end": "3789319"
  },
  {
    "text": "invalidate that number and and have it walk back you have a book created let me go back and load this and and update it",
    "start": "3789319",
    "end": "3794960"
  },
  {
    "text": "yeah yeah I love that whenever a book is created whenever a book is deleted uh it also like in this little reactive hint",
    "start": "3794960",
    "end": "3801440"
  },
  {
    "text": "you can say like maybe you only want uh to count the books that are um published or something like this some attribute of",
    "start": "3801440",
    "end": "3807160"
  },
  {
    "text": "the book and so then if you go back to the book and that only when that attribute changes like you know the book",
    "start": "3807160",
    "end": "3812640"
  },
  {
    "text": "moves from published or whatnot uh it's like oh I know that the author Drive field or it could be a validation rule",
    "start": "3812640",
    "end": "3818440"
  },
  {
    "text": "you know depends on this field changing so I will go find my author even though he's not loaded into memory yet I will",
    "start": "3818440",
    "end": "3825400"
  },
  {
    "text": "go load him into memory and tell him to run as part of the EM flush another big",
    "start": "3825400",
    "end": "3830680"
  },
  {
    "text": "you know win for the EM flushes is like if you were just doing it will autosave these sort of deriv",
    "start": "3830680",
    "end": "3837240"
  },
  {
    "text": "yeah that's really cool yeah right like even though you've only loaded the book and you've only touched the book you'll",
    "start": "3837240",
    "end": "3842279"
  },
  {
    "text": "get into the flush and it'll be like oh I need to do these other 20 things that's beautiful and load them up and",
    "start": "3842279",
    "end": "3848920"
  },
  {
    "text": "and tell them to recal or revalidate and and that is uh slick well this is slick",
    "start": "3848920",
    "end": "3854640"
  },
  {
    "text": "that is no that is because this sort of it that allows you to do something we've",
    "start": "3854640",
    "end": "3860200"
  },
  {
    "text": "gotten very used to in the front end world at least in like uh View and and other things where you're basically creating these declarative interfaces",
    "start": "3860200",
    "end": "3866440"
  },
  {
    "text": "where you're like these are the things that must be true yes go and make it so I don't want to have to worry about them",
    "start": "3866440",
    "end": "3872440"
  },
  {
    "text": "but doing that at the day later is not something that I've seen done very often no yeah the only thing that I can think",
    "start": "3872440",
    "end": "3877880"
  },
  {
    "text": "of that's somewhat similar is like the super big data guys you get into like materialize IO you know the they'll sit",
    "start": "3877880",
    "end": "3883760"
  },
  {
    "text": "on top top of CED cues and and and watch for or the uh the other place the is if",
    "start": "3883760",
    "end": "3889160"
  },
  {
    "text": "postra ever gets like fully reactive views you know you can declare a view a materialized view but but the",
    "start": "3889160",
    "end": "3895000"
  },
  {
    "text": "materialized view refreshes every 10 minutes or so and there are certain places out there that are trying to get",
    "start": "3895000",
    "end": "3900079"
  },
  {
    "text": "you know materialized views that incrementally update when you know they can tell whenever the components of the",
    "start": "3900079",
    "end": "3905240"
  },
  {
    "text": "materialized view update and then do incremental updates you know not because the full update would be expensive and",
    "start": "3905240",
    "end": "3910640"
  },
  {
    "text": "so materialized does it and then like people have toed around with doing it like at the posten but no other than",
    "start": "3910640",
    "end": "3915680"
  },
  {
    "text": "that like you just but this is at the application layer right this is where I'm used to because I mean there are",
    "start": "3915680",
    "end": "3921039"
  },
  {
    "text": "ways that you can do these like you know triggers within your database and whatever whatever and I don't want to be around with stored procedures in my",
    "start": "3921039",
    "end": "3927680"
  },
  {
    "text": "database I want application logic that I can test writing my unit tests and just make it happen Okay so what are the what",
    "start": "3927680",
    "end": "3935880"
  },
  {
    "text": "are the limitations on that can I Bridge through entities can I say okay this entity depends on that entity which",
    "start": "3935880",
    "end": "3940960"
  },
  {
    "text": "depends on this following entity like how yeah yes I just okay just yes okay",
    "start": "3940960",
    "end": "3947440"
  },
  {
    "text": "uh okay only because we we do have one boundary case that came up just last week where or maybe it was two weeks ago",
    "start": "3947440",
    "end": "3954279"
  },
  {
    "text": "we've got it written up where where we we mentioned that so this difference in joice between the core database relations of yes is is a foreign key",
    "start": "3954279",
    "end": "3961520"
  },
  {
    "text": "yeses is a many to many yes is a many one right so you can string together these reactive things uh with the core",
    "start": "3961520",
    "end": "3967559"
  },
  {
    "text": "database relations and everything 100% works you can also do go through um one",
    "start": "3967559",
    "end": "3973799"
  },
  {
    "text": "of your derived relations where it's not quite in the database it's not in the database it's uh but you you want to",
    "start": "3973799",
    "end": "3978920"
  },
  {
    "text": "have what would it be like number of books depends on uh we've got an example",
    "start": "3978920",
    "end": "3984559"
  },
  {
    "text": "of this number of books depends on you know the book being public and that in it of itself is a is a drive drive value",
    "start": "3984559",
    "end": "3991240"
  },
  {
    "text": "but if you put two of these in a row we've got a bug there where we need to go fix you know like stacking going",
    "start": "3991240",
    "end": "3997160"
  },
  {
    "text": "through and stacking these non-core database things so like just being up for honest like like we've got a know",
    "start": "3997160",
    "end": "4002880"
  },
  {
    "text": "issue with that but I don't I don't think I think that's just that's a bug not a core limitation it's a bug it's a",
    "start": "4002880",
    "end": "4008200"
  },
  {
    "text": "bug the the core model the the core mental model works for anything you can think of asteris that guy but you know",
    "start": "4008200",
    "end": "4014520"
  },
  {
    "text": "we'll get fixed here next hack day or something like that I'm excited to go and build some stuff with Joyce now",
    "start": "4014520",
    "end": "4020599"
  },
  {
    "text": "because I have been looking for an a JavaScript or typescript omm that got",
    "start": "4020599",
    "end": "4025760"
  },
  {
    "text": "anywhere close to what I remember from active record yeah me",
    "start": "4025760",
    "end": "4030880"
  },
  {
    "text": "too the other disclaimer that we should you know we really like tagged IDs and I",
    "start": "4030880",
    "end": "4036319"
  },
  {
    "text": "don't know if this is tagged IDs are awesome but so like usually your entities come out with like you know it's an in in the database and then you",
    "start": "4036319",
    "end": "4042079"
  },
  {
    "text": "expect the author. ID to be a number RS or strings and we need a flag like like",
    "start": "4042079",
    "end": "4047359"
  },
  {
    "text": "like we love that like cuz you see and we put the every entity gets a little tag like author gets abbreviated to a",
    "start": "4047359",
    "end": "4053480"
  },
  {
    "text": "and book gets abbreviated to B and these sort of things and so those will show up in your IDs which actually we did",
    "start": "4053480",
    "end": "4058799"
  },
  {
    "text": "selfishly because we were doing graphql which want strings IDs anyway and so instead of every time we put an ID on",
    "start": "4058799",
    "end": "4065240"
  },
  {
    "text": "The Wire we're like in two string whatever I I played my Java hand there saying no going take it that anyway and",
    "start": "4065240",
    "end": "4071960"
  },
  {
    "text": "so it was just so ergonomic for us to have the ID getters take strings uh and then we took that opportunity to sneak",
    "start": "4071960",
    "end": "4078359"
  },
  {
    "text": "in prefixes which once you like I'm super addicted to that now like you know seeing an ID go by in the log and being",
    "start": "4078359",
    "end": "4084359"
  },
  {
    "text": "like Oh that's br26 I know that's a book review right and it also keeps your IDs from",
    "start": "4084359",
    "end": "4090200"
  },
  {
    "text": "accidentally switching right like oh I read it I read I got a response and I and I got an ID of two but then I put it",
    "start": "4090200",
    "end": "4096000"
  },
  {
    "text": "back into the system and it's technically a book ID but I put it back into the system as a book review ID",
    "start": "4096000",
    "end": "4101440"
  },
  {
    "text": "right well book review two technically worked and so my foreign key didn't catch it but if you tag your IDs uh",
    "start": "4101440",
    "end": "4106838"
  },
  {
    "text": "joist will notice that the tag is wrong and will blow up at run time that you you know I I mentioned that just in terms of this is a tangent away from if",
    "start": "4106839",
    "end": "4113080"
  },
  {
    "text": "you go play with it I think most people do probably expect the IDS to be numbers and uh we totally want to support that",
    "start": "4113080",
    "end": "4119199"
  },
  {
    "text": "because it's a very valid uh way to use orm but um just haven't gotten around to adding that config flag yet so hopefully",
    "start": "4119199",
    "end": "4125920"
  },
  {
    "text": "you don't mind ID strings strings IDs that are strings or or if you really don't like it you can submit a poll",
    "start": "4125920",
    "end": "4131480"
  },
  {
    "text": "request which would be great you know to support the numbers so question are they",
    "start": "4131480",
    "end": "4137120"
  },
  {
    "text": "strings in the database level as well no okay got it so you're you're basically",
    "start": "4137120",
    "end": "4142238"
  },
  {
    "text": "when you pull it out of the you're you're using a sequential integer or something but when you pull it out you put the tag at the front of it and",
    "start": "4142239",
    "end": "4148040"
  },
  {
    "text": "that's how it's represented within joist okay got it yeah right I mean that would be weird to do I agree to do string well",
    "start": "4148040",
    "end": "4154238"
  },
  {
    "text": "that's what that's that was my initial reaction I was kind of like wait yeah is he saying what I think he's saying but no it's okay it's that's entirely at the",
    "start": "4154239",
    "end": "4160318"
  },
  {
    "text": "joy layer yeah we do support U IDs string uh columns if you want to use U",
    "start": "4160319",
    "end": "4165400"
  },
  {
    "text": "IDs as primary Keys we had to user come by and request that so We snuck that one in but U and those are also tagged in",
    "start": "4165400",
    "end": "4171159"
  },
  {
    "text": "the joy layer you can choose uh you can choose to tag your uid or you can choose",
    "start": "4171159",
    "end": "4176640"
  },
  {
    "text": "not to and I guess I don't think we give you that choice with just the regular numbers we definitely don't give you the",
    "start": "4176640",
    "end": "4182679"
  },
  {
    "text": "choice to use a number number but I guess you know why not let you use technically it's to string with a with",
    "start": "4182679",
    "end": "4189480"
  },
  {
    "text": "an untagged number in it I agree that Joy is awesome uh I saw you present",
    "start": "4189480",
    "end": "4194960"
  },
  {
    "text": "about it at Nebraska JS and yeah I'm I'm excited to have an excuse to get away",
    "start": "4194960",
    "end": "4201560"
  },
  {
    "text": "from typm or to to explore more of what's out there yeah I don't have the uh I don't have the same history with",
    "start": "4201560",
    "end": "4208719"
  },
  {
    "text": "active record or rails or anything like that so yeah yeah but it's it's super interesting how much thought goes into",
    "start": "4208719",
    "end": "4216000"
  },
  {
    "text": "these and it really seems like you're you're doing really well with with the ideas in joist so I'm excited about it",
    "start": "4216000",
    "end": "4223080"
  },
  {
    "text": "yeah good yeah go for sure kick the tires let us know yeah you know we've got a little link to slack that I think",
    "start": "4223080",
    "end": "4228719"
  },
  {
    "text": "probably works there for a while it did not work so let me know if that doesn't work we do or uh file is shoe that let",
    "start": "4228719",
    "end": "4234800"
  },
  {
    "text": "let me know this definitely and we'll have links to all this in the show notes and um Stephen thank you so much for",
    "start": "4234800",
    "end": "4240600"
  },
  {
    "text": "joining us this week uh I learned a lot and I learned that there's a lot that I don't know as well oh no thanks for the",
    "start": "4240600",
    "end": "4247000"
  },
  {
    "text": "invite I just yeah had a ton of fun thought it weren't really well yeah uh kudos for driving the uh agenda really",
    "start": "4247000",
    "end": "4252640"
  },
  {
    "text": "well with great questions and yeah I aome all right well let us know what you think this was delightful thank you for",
    "start": "4252640",
    "end": "4259360"
  },
  {
    "text": "putting up with my like interest in diving down into weird niches no no it's great yeah it was a lot a fun",
    "start": "4259360",
    "end": "4265600"
  },
  {
    "text": "conversation all right we will see you next",
    "start": "4265600",
    "end": "4270198"
  },
  {
    "text": "time all right that is JS party for this week thanks for hanging with us next up",
    "start": "4274679",
    "end": "4281120"
  },
  {
    "text": "on the Pod kall Nick and myself partake in a grab B of goodness we are",
    "start": "4281120",
    "end": "4287280"
  },
  {
    "text": "explaining class variance Authority like we five discussing kall's new stack Bun's new bundler and much more",
    "start": "4287280",
    "end": "4295400"
  },
  {
    "text": "subscribe now so you don't miss it head to JSP party. FM for all the ways",
    "start": "4295400",
    "end": "4301360"
  },
  {
    "text": "special thanks once again to our partners fastly fly and typ sense for helping us bring you awesome pods each",
    "start": "4301360",
    "end": "4308360"
  },
  {
    "text": "and every week and to break master cylinder for keeping our beats fresh and banging Bears Beats",
    "start": "4308360",
    "end": "4315800"
  },
  {
    "text": "Battlestar Galactica that's all for now we'll party with you again next",
    "start": "4315800",
    "end": "4322170"
  },
  {
    "text": "[Music]",
    "start": "4322170",
    "end": "4329760"
  },
  {
    "text": "week",
    "start": "4329760",
    "end": "4332760"
  }
]