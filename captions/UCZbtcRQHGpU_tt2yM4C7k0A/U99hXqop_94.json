[
  {
    "text": "[Music] let's do it it's go time welcome to go",
    "start": "7460",
    "end": "13040"
  },
  {
    "text": "time your source for diverse discussions from all around the go Community big",
    "start": "13040",
    "end": "18880"
  },
  {
    "text": "thanks to our partners for helping us bring you awesome pods each and every week fast.com fly.io and types sense.org",
    "start": "18880",
    "end": "28960"
  },
  {
    "text": "okay here we [Music]",
    "start": "28960",
    "end": "36520"
  },
  {
    "text": "go what's up friends I'm here with Jeremy Tanner Devo at tail scale and I've been using tail scale for the past",
    "start": "36520",
    "end": "43079"
  },
  {
    "text": "I want to say the last year and I consider critical home lab infrastructure for me as you may know",
    "start": "43079",
    "end": "49039"
  },
  {
    "text": "I'm a home labber so that means I take pride in a solid home network Wi-Fi services that make the home run home",
    "start": "49039",
    "end": "55480"
  },
  {
    "text": "assistant for automation lighting and of course I run py hole to block ads at the",
    "start": "55480",
    "end": "60640"
  },
  {
    "text": "network level and to protect my family from ad tracking and pyul has this web",
    "start": "60640",
    "end": "65760"
  },
  {
    "text": "UI that you can access from the land but for a while there I just didn't have access to this service or other services",
    "start": "65760",
    "end": "72159"
  },
  {
    "text": "like painer or just anything else that had a web UI or something I would access via IP on the local area network but",
    "start": "72159",
    "end": "79360"
  },
  {
    "text": "Jeremy tell me about a world where via tail scale you can access py hole painer or any of these other services you might",
    "start": "79360",
    "end": "86159"
  },
  {
    "text": "run in your home lab and access it externally from the local area network",
    "start": "86159",
    "end": "91280"
  },
  {
    "text": "yeah you hit it when you said anything anything and from anywhere and so py hole being a a DNS blackhole um if you",
    "start": "91280",
    "end": "99399"
  },
  {
    "text": "notice the difference between the comfy experience that you had at home and when you were uh out of your house whether it",
    "start": "99399",
    "end": "106119"
  },
  {
    "text": "was uh for work a coffee shop or even on your mobile devices the um being able to",
    "start": "106119",
    "end": "112920"
  },
  {
    "text": "uh set up um tail scale on your mobile device and uh have access to the um same",
    "start": "112920",
    "end": "119479"
  },
  {
    "text": "uh pie hole and filtering rules that you do at home uh wherever you have a wherever you have an internet connection",
    "start": "119479",
    "end": "125680"
  },
  {
    "text": "is a thing same thing when talking about streaming instead of exposing your um exposing your network storage to the",
    "start": "125680",
    "end": "131760"
  },
  {
    "text": "internet and getting that Ransom weired keeping that on your private network but extending the private Network to any",
    "start": "131760",
    "end": "137280"
  },
  {
    "text": "device that can run the client and so having um anything that can run the client includes your steam deck that's",
    "start": "137280",
    "end": "142680"
  },
  {
    "text": "just a Linux box with uh the controllers grafted onto the sides of it and so if you're somewhere that has an internet",
    "start": "142680",
    "end": "148560"
  },
  {
    "text": "connection and wants to watch some of your video plug it up to a large TV and if you're in a hotel room use that as",
    "start": "148560",
    "end": "154239"
  },
  {
    "text": "your uh as your media center that's playing the uh the shows that you're trying to catch up on from home instead",
    "start": "154239",
    "end": "159640"
  },
  {
    "text": "of whatever Hotel TV has on it instead of um buying a service or paying a you",
    "start": "159640",
    "end": "165560"
  },
  {
    "text": "know small monthly subscription you're like you have you have Computing storage at home it's just an easy way to get",
    "start": "165560",
    "end": "171640"
  },
  {
    "text": "back to those instead of um usually inventing a bunch of things that you'd love to do but those sorts of things",
    "start": "171640",
    "end": "177760"
  },
  {
    "text": "become accessible to you on your phone while you're outside the house instead of something that's neat to use but then",
    "start": "177760",
    "end": "184280"
  },
  {
    "text": "you miss while you're away yeah for sure you know I run Plex so I'm uh in big agreement with that of course but just",
    "start": "184280",
    "end": "190519"
  },
  {
    "text": "being able to do what you can do with tail scale is so cool without having to learn all the VPN things it's just such",
    "start": "190519",
    "end": "196640"
  },
  {
    "text": "an easy tool to use Easy tool to install on anything really Linux Windows Mac so",
    "start": "196640",
    "end": "202519"
  },
  {
    "text": "easy to use big big fan of tail scale and for my home lab users out there you",
    "start": "202519",
    "end": "207760"
  },
  {
    "text": "can totally use tail scale 100% for free you get three users up to 100 devices",
    "start": "207760",
    "end": "213879"
  },
  {
    "text": "which is like way more devices than I think I would ever need to use Tails go on the free forever tier is amazing and",
    "start": "213879",
    "end": "221080"
  },
  {
    "text": "a great place to start and especially to use it for your home lab needs alone check them out at changel law.com",
    "start": "221080",
    "end": "227560"
  },
  {
    "text": "tailscale the free forever tier is waiting for you to try it out again changel law.com slil scale and make sure",
    "start": "227560",
    "end": "235599"
  },
  {
    "text": "you tell them your friends at change l sentu",
    "start": "235599",
    "end": "241170"
  },
  {
    "text": "[Music]",
    "start": "241170",
    "end": "248959"
  },
  {
    "text": "[Music] [Applause] hello and welcome to go time I'm Matt ryer today we're talking all about the",
    "start": "251100",
    "end": "258919"
  },
  {
    "text": "go stack what on Earth is it what does it do how much do we have to care about",
    "start": "258919",
    "end": "265560"
  },
  {
    "text": "it how much do we have to know about it as programmers in order to be effective we're going to dig in and find out",
    "start": "265560",
    "end": "271440"
  },
  {
    "text": "joining me today co-host of course Chris Brando hello Chris hi Matt how's it",
    "start": "271440",
    "end": "277280"
  },
  {
    "text": "going not bad has anything dramatic happened to you recently in your building unfortunately so New York City",
    "start": "277280",
    "end": "285080"
  },
  {
    "text": "has had uh some unfortunate accidents as of late and I was unfortunately affected so but we're all good now we're all good",
    "start": "285080",
    "end": "292160"
  },
  {
    "text": "okay good but you didn't cause any no it didn't cause it yeah no good we're also joined today by yarden life and F",
    "start": "292160",
    "end": "300400"
  },
  {
    "text": "uh yarden hello yarden yarden is a software engineer at rookout or as of",
    "start": "300400",
    "end": "305880"
  },
  {
    "text": "Monday Dino trce where you've been developing a production grade debugger for go that's very exciting we'll",
    "start": "305880",
    "end": "312800"
  },
  {
    "text": "definitely talk about that you're also uh one of the organizers of go foron Israel as well as the women who go",
    "start": "312800",
    "end": "319080"
  },
  {
    "text": "Israel group welcome yarden hi thanks for having me absolute pleasure and from",
    "start": "319080",
    "end": "324759"
  },
  {
    "text": "the go team we're joined by David Chase uh David's been working on compilers and runtimes for around 40 years and started",
    "start": "324759",
    "end": "332000"
  },
  {
    "text": "working on go in Google back in 2015 which is I think is eight years ago",
    "start": "332000",
    "end": "337080"
  },
  {
    "text": "David welcome to go time hi um I don't know what else to say yeah no hi is fine",
    "start": "337080",
    "end": "343479"
  },
  {
    "text": "absolutely fine but you actually something interesting in your bio that you grow lies and you're a judge for the",
    "start": "343479",
    "end": "349000"
  },
  {
    "text": "North American Lily society that was like this weird thing ages ago I mean",
    "start": "349000",
    "end": "355120"
  },
  {
    "text": "when we so when we do vacations ages ago we had a job we had a vacation and work",
    "start": "355120",
    "end": "360199"
  },
  {
    "text": "but they let me drive and my wife was along and she would plan some days and I",
    "start": "360199",
    "end": "366280"
  },
  {
    "text": "would plan some days and we're planning I'm she plans very well and I plan about",
    "start": "366280",
    "end": "373199"
  },
  {
    "text": "5 Seconds ahead and just in time planning yes really and so yes and so we're driving",
    "start": "373199",
    "end": "379080"
  },
  {
    "text": "along we see this sign that says Lily in Bonia is next right say oh that's cool we like Lily and we go and the guy that",
    "start": "379080",
    "end": "385680"
  },
  {
    "text": "we met was the um it turns out famous and Incredibly Innovative Lily breeder",
    "start": "385680",
    "end": "392039"
  },
  {
    "text": "and like oh this is cool he gives me his catalog and I just order a few and I start growing them and it basically took",
    "start": "392039",
    "end": "398360"
  },
  {
    "text": "and I've just been doing it for years and I like them and there's a local society and they said oh we need I help",
    "start": "398360",
    "end": "406039"
  },
  {
    "text": "out and I help out more we need judges and train myself up to be a judge",
    "start": "406039",
    "end": "411599"
  },
  {
    "text": "which is like this multi-year process and with exams and test judging and",
    "start": "411599",
    "end": "417319"
  },
  {
    "text": "everything and I need to emphasize I am like a kind of a junior judge which on",
    "start": "417319",
    "end": "424479"
  },
  {
    "text": "the one hand you kind of get amazed at the things that you learn and then on the other hand the guys who were really",
    "start": "424479",
    "end": "430240"
  },
  {
    "text": "good at it are just like okay wow you can get that much better it's it's it's",
    "start": "430240",
    "end": "435360"
  },
  {
    "text": "sort of weird so like you'll be out and people someone will ask you a question about Liles and you will just start riffing and explaining and like oh this",
    "start": "435360",
    "end": "442319"
  },
  {
    "text": "and this and this it's like oh geez I just did all that okay fine cool that well that's amazing are they",
    "start": "442319",
    "end": "448840"
  },
  {
    "text": "difficult to to grow I guess not especially and that's part of the one of the reasons I like them because I",
    "start": "448840",
    "end": "455800"
  },
  {
    "text": "am I can you know do a concentrated bit of work that's important and then it's",
    "start": "455800",
    "end": "461080"
  },
  {
    "text": "like I would just like to leave that there and let it take care of itself in",
    "start": "461080",
    "end": "466919"
  },
  {
    "text": "the US there was an introduced pest from Europe that for a while made it very",
    "start": "466919",
    "end": "473879"
  },
  {
    "text": "difficult they've introduced a natural control a a specific wasp with specific",
    "start": "473879",
    "end": "480440"
  },
  {
    "text": "taste in in host for its larvae and it's",
    "start": "480440",
    "end": "485520"
  },
  {
    "text": "naturalized here and it has made it be a fine thing to do you just grow them and they're fine that's amazing I should",
    "start": "485520",
    "end": "492199"
  },
  {
    "text": "stop I could talk longer no no no I mean maybe we should just do Lily time okay we can do that next yeah we'll do that",
    "start": "492199",
    "end": "498520"
  },
  {
    "text": "next yeah wow okay great and and yeah yarden and actually something you both have in common you both like bikes and",
    "start": "498520",
    "end": "505759"
  },
  {
    "text": "cycling and stuff right yarden do you do a lot of that I wrote it as a response",
    "start": "505759",
    "end": "511400"
  },
  {
    "text": "to David's mentioning of bikes yeah yeah I just read it again it says you're not good with",
    "start": "511400",
    "end": "516680"
  },
  {
    "text": "bikes that's true um I wouldn't say that I'm not good with them but I'm not you",
    "start": "516680",
    "end": "522200"
  },
  {
    "text": "did good with them I'm not especially good with bikes like I can ride one I I",
    "start": "522200",
    "end": "528640"
  },
  {
    "text": "do ride one what more do you need exactly yeah well fixing them I guess as well yeah someone else does that for me",
    "start": "528640",
    "end": "536640"
  },
  {
    "text": "I'm not yeah just get David to do it David fixes bikes as well David if you want lies if you want your L's growing",
    "start": "536640",
    "end": "543440"
  },
  {
    "text": "or you need your bicycle fixed David your man maybe yeah but so and yeah",
    "start": "543440",
    "end": "548959"
  },
  {
    "text": "yarden before you did go you wrote Java some Ruby some C C++ python what is it",
    "start": "548959",
    "end": "555800"
  },
  {
    "text": "about go that grabs your attention I'm actually doing all those now like at",
    "start": "555800",
    "end": "561760"
  },
  {
    "text": "rout or I guess I should say Dino Trace um we're supporting all of those now but",
    "start": "561760",
    "end": "567279"
  },
  {
    "text": "but my main focus is go I think before I before I did go I did see and I really",
    "start": "567279",
    "end": "574480"
  },
  {
    "text": "like that like the Simplicity of it and the closeness to like bar metal I know it's not really that close to Bare Metal",
    "start": "574480",
    "end": "580519"
  },
  {
    "text": "but it's as close as people usually get nowadays yeah relatively yeah exactly",
    "start": "580519",
    "end": "586279"
  },
  {
    "text": "and so I think I liked the similarities to go rather than all those like higher",
    "start": "586279",
    "end": "592200"
  },
  {
    "text": "level languages yeah what's what's your favorite language out of those then it it would be either go or C mhm",
    "start": "592200",
    "end": "599200"
  },
  {
    "text": "definitely nice good good answer okay cool so maybe we could just",
    "start": "599200",
    "end": "605480"
  },
  {
    "text": "get started I'd love to start at the basics what is the stack what what",
    "start": "605480",
    "end": "610560"
  },
  {
    "text": "actually is that and what does it do in go terms it's like a uh slice but",
    "start": "610560",
    "end": "616079"
  },
  {
    "text": "internally it's used very much that way it's it has a capacity it starts it",
    "start": "616079",
    "end": "622040"
  },
  {
    "text": "allocates from high addresses to lower rather than low to high which is what you would do in a slice and whenever you",
    "start": "622040",
    "end": "629240"
  },
  {
    "text": "make a call to a function or a method it extends the slice towards lower",
    "start": "629240",
    "end": "636600"
  },
  {
    "text": "addresses by a constant amount that per function each each function has its own",
    "start": "636600",
    "end": "642000"
  },
  {
    "text": "constant that's the size of its uh stack frame and it uses that for Scratch storage and so your local variables and",
    "start": "642000",
    "end": "650800"
  },
  {
    "text": "the Temporaries that might need to be spilled to memory that's the memory that they would spill to that's the memory",
    "start": "650800",
    "end": "657000"
  },
  {
    "text": "for the local variables and depending upon your call-in convention on your",
    "start": "657000",
    "end": "663560"
  },
  {
    "text": "architecture you may pass parameters to functions and methods that you call also",
    "start": "663560",
    "end": "669880"
  },
  {
    "text": "in stack space since go 1.17 on some architectures we use",
    "start": "669880",
    "end": "676519"
  },
  {
    "text": "registers but we still Reserve stack space for spilling them for certain",
    "start": "676519",
    "end": "683680"
  },
  {
    "text": "purposes the interesting difference from slices is well no actually that's not",
    "start": "683680",
    "end": "689440"
  },
  {
    "text": "true and so the slice your slice has a capacity but you can just keep on appending to a slice on and on and on",
    "start": "689440",
    "end": "695160"
  },
  {
    "text": "and on and if you append out past the capacity if you're app pending it says",
    "start": "695160",
    "end": "700519"
  },
  {
    "text": "oh need to make it bigger and it allocates a new slice if it's a slice",
    "start": "700519",
    "end": "707399"
  },
  {
    "text": "and in the case of the stack go is unlike a lot of programming languages here it malates a new stack copies the",
    "start": "707399",
    "end": "714560"
  },
  {
    "text": "old one to the new a thing that it does that is particular to go is all the",
    "start": "714560",
    "end": "721920"
  },
  {
    "text": "locations of all of the pointers that might be on the stack are recorded and",
    "start": "721920",
    "end": "727600"
  },
  {
    "text": "those are all updated when you do the stack copy and so your program has no",
    "start": "727600",
    "end": "733639"
  },
  {
    "text": "idea that this is going on you just did a function call and the stack got copied into a new place and it's bigger and all",
    "start": "733639",
    "end": "739959"
  },
  {
    "text": "of the internal pointers to its own stack got updated in that copy and it",
    "start": "739959",
    "end": "745800"
  },
  {
    "text": "carries on is that an expensive operation it is is I mean it's just",
    "start": "745800",
    "end": "751440"
  },
  {
    "text": "memory copying and then you know scanning the stack and interpreting the pointers but you don't do it very often",
    "start": "751440",
    "end": "757320"
  },
  {
    "text": "it's sort of a hysteresis you don't the stack stays large until the garbage",
    "start": "757320",
    "end": "762480"
  },
  {
    "text": "collector looks at a gotin stack and says wow we've allocated you a megabyte",
    "start": "762480",
    "end": "768560"
  },
  {
    "text": "and yet you're only using 10 kilobytes I think we'd like some of that back and",
    "start": "768560",
    "end": "773959"
  },
  {
    "text": "then and it fixes it and it puts you back into a smaller stack",
    "start": "773959",
    "end": "779360"
  },
  {
    "text": "and so it is an expensive operation to grow it but it doesn't happen very often you grow to a large enough",
    "start": "779360",
    "end": "785720"
  },
  {
    "text": "size an alternate implementation that they used earlier and that has been used",
    "start": "785720",
    "end": "792040"
  },
  {
    "text": "in other programming languages over from time to time is segmented stacks and so",
    "start": "792040",
    "end": "799000"
  },
  {
    "text": "you don't relocate the old one you just allocate a new piece of Stack to be in",
    "start": "799000",
    "end": "806440"
  },
  {
    "text": "and the problem with these is that you have you have sort of a hysteresis problem and a Crossing problem if you",
    "start": "806440",
    "end": "812720"
  },
  {
    "text": "happen to have that boundary at a place where you're doing a lot of function calls it's kind of a you always trip",
    "start": "812720",
    "end": "819320"
  },
  {
    "text": "over it because it's not a smooth easy increment it's like whoops I hit the end got to do an extra thing even if you've",
    "start": "819320",
    "end": "824959"
  },
  {
    "text": "got that other stack there it makes that function call more expensive even what I'm saying is even if you've set it",
    "start": "824959",
    "end": "830839"
  },
  {
    "text": "aside and say yeah I know I'm going to do this so I'm going to cash my next segment and reuse it you trip over that",
    "start": "830839",
    "end": "838079"
  },
  {
    "text": "and it's expensive enough that everyone that's done it that I know of that's done it the segmented way unless they",
    "start": "838079",
    "end": "843759"
  },
  {
    "text": "have a really good reason to keep on doing it in that segmented way and there are other reasons but go doesn't have",
    "start": "843759",
    "end": "850040"
  },
  {
    "text": "them they move to the contiguous stack in the",
    "start": "850040",
    "end": "854759"
  },
  {
    "text": "[Music] recopy this is a change log news break",
    "start": "855500",
    "end": "861759"
  },
  {
    "text": "have you already asked chat GPT how to design a good UI for your new AI app and gotten back bub kiss well check out",
    "start": "861759",
    "end": "870079"
  },
  {
    "text": "langui an open source Tailwind library of 60 plus responsive and dark mode",
    "start": "870079",
    "end": "876040"
  },
  {
    "text": "enabled components tailored for AI and gbt projects what exactly does that mean",
    "start": "876040",
    "end": "882959"
  },
  {
    "text": "it means prompt containers history panels sidebars message inputs and all",
    "start": "882959",
    "end": "888360"
  },
  {
    "text": "sorts of stuff that are Chapa related so you can stop asking chat GPT and build your own chat GPT with a sweet UI you",
    "start": "888360",
    "end": "896480"
  },
  {
    "text": "just heard one of our five top stories from Monday's Chang log news subscribe",
    "start": "896480",
    "end": "902000"
  },
  {
    "text": "to the podcast to get all of the week's top stories and pop your email address in at Chang log.com newws to also",
    "start": "902000",
    "end": "908839"
  },
  {
    "text": "receive our free companion email with even more developer news worth your attention once again that's changel",
    "start": "908839",
    "end": "915839"
  },
  {
    "text": "log.com [Music]",
    "start": "915839",
    "end": "922560"
  },
  {
    "text": "newws uh when the garbage scor shrinks the stack does that happen when like after like a good routine is is kind of",
    "start": "922560",
    "end": "929839"
  },
  {
    "text": "done being used or does it like happen like a like you pause the go routine or like at what point does that happen",
    "start": "929839",
    "end": "935519"
  },
  {
    "text": "because you said we grow Stacks when we hit like a function call that's like a clean space to do it so is there like a",
    "start": "935519",
    "end": "941759"
  },
  {
    "text": "similar analgous clean space where it can shrink the stack so certainly if you are paused so if your go routine is not",
    "start": "941759",
    "end": "949519"
  },
  {
    "text": "actually running it could be runable but not allocated to a thread and actually",
    "start": "949519",
    "end": "956199"
  },
  {
    "text": "running in those cases I believe that it if it's at a clean",
    "start": "956199",
    "end": "961480"
  },
  {
    "text": "stop it could shrink the stack so we have to talk about preemption here if",
    "start": "961480",
    "end": "967639"
  },
  {
    "text": "you preempt a go routine and excuse me if you need to preempt a go routine say if you need to do a garbage collection",
    "start": "967639",
    "end": "974399"
  },
  {
    "text": "so the garbage collector has to do a handshake with the thread there's two kinds cooperative and uncooperative and",
    "start": "974399",
    "end": "980800"
  },
  {
    "text": "so the Cooperative one is part of the entry sequence to every almost every",
    "start": "980800",
    "end": "987240"
  },
  {
    "text": "function where it checks to see if it has overflowed the stack bound and what it does is if",
    "start": "987240",
    "end": "993040"
  },
  {
    "text": "the runtime needs to interrupt it lies about what the stack bound is the Gober tetin says oops I guess I need a new",
    "start": "993040",
    "end": "999480"
  },
  {
    "text": "stack goes into that code and says oh actually I'm here for this other reason",
    "start": "999480",
    "end": "1004759"
  },
  {
    "text": "I you know someone needs to interact with me and that's a clean Cooperative preemption and the state of all the",
    "start": "1004759",
    "end": "1010839"
  },
  {
    "text": "pointers is well known and so you have the option of shrinking the stack at that point and since that's also the",
    "start": "1010839",
    "end": "1017120"
  },
  {
    "text": "place where you grow the stack if it need needs to grow that makes sense couldn't grow the stack if you couldn't",
    "start": "1017120",
    "end": "1022279"
  },
  {
    "text": "find the pointers either uncooperative preemption occurs if you have a a tight long",
    "start": "1022279",
    "end": "1028918"
  },
  {
    "text": "running Loop we don't check on back edges we profiled whether we should explicitly check there and we could not",
    "start": "1028919",
    "end": "1035438"
  },
  {
    "text": "get the cost down enough so we do a thing where we interrupt the go routine",
    "start": "1035439",
    "end": "1041678"
  },
  {
    "text": "and we there are places where we can't and it records those it looks and says am I at a safe a safe enough place so",
    "start": "1041679",
    "end": "1048000"
  },
  {
    "text": "it's not a safe point where you know everything but it's a safe enough place and you might not know everything but",
    "start": "1048000",
    "end": "1055039"
  },
  {
    "text": "you know that it's okay to run a garbage collection at that point and it's okay to examine the stack but you don't know",
    "start": "1055039",
    "end": "1062760"
  },
  {
    "text": "everything you need to know about the pointers in that last frame so you can't move the stack sorry this took so long",
    "start": "1062760",
    "end": "1069640"
  },
  {
    "text": "but it's it's like there's a reason and there's a reason and there's a reason it's it's more complicated than it used",
    "start": "1069640",
    "end": "1076000"
  },
  {
    "text": "to be eight years ago it certainly doesn't sound sound easy and something you mentioned which is interesting and",
    "start": "1076000",
    "end": "1081919"
  },
  {
    "text": "yarden maybe you could shed some light on this you mentioned that it's it grows the stack towards the lower memory",
    "start": "1081919",
    "end": "1088520"
  },
  {
    "text": "address right what's what's that all about how is it even doing that does it literally just have to reserve a load of",
    "start": "1088520",
    "end": "1095039"
  },
  {
    "text": "memory and then it's sort of working backwards what's the advantage of it doing that I'll start by saying that uh",
    "start": "1095039",
    "end": "1101200"
  },
  {
    "text": "GH stack works a lot like a regular stack and by that I mean like even if",
    "start": "1101200",
    "end": "1107720"
  },
  {
    "text": "you write a b in C where no there's no runtime that's controlling the stacks and stuff like that you'll still you're",
    "start": "1107720",
    "end": "1113919"
  },
  {
    "text": "still going to have a section of memory called the stack that works in a very similar way with a lot of the similar",
    "start": "1113919",
    "end": "1119400"
  },
  {
    "text": "things on it um and so go really mimics that behavior and it makes sense because it's it's a good concept and in a",
    "start": "1119400",
    "end": "1127120"
  },
  {
    "text": "regular I'm saying regular but just in a non-go or non-managed binary uh the",
    "start": "1127120",
    "end": "1132200"
  },
  {
    "text": "stack does go from the higher addresses to the lower addresses just because you have like this big section of memory and",
    "start": "1132200",
    "end": "1138640"
  },
  {
    "text": "you've got or you've got a big dump of memory and you've got sections in it and",
    "start": "1138640",
    "end": "1144360"
  },
  {
    "text": "so the stack will be one section and the Heap will be another and they'll kind of grow towards each other so the Heap will",
    "start": "1144360",
    "end": "1150200"
  },
  {
    "text": "go from low to high and the stack will go from high to low and they'll get closer and then so go I said go does it",
    "start": "1150200",
    "end": "1158960"
  },
  {
    "text": "like this and the thing with the allocations is that and and David correct me if I'm wrong it does usually",
    "start": "1158960",
    "end": "1167080"
  },
  {
    "text": "have like it will allocate a stack when it's needed but if I'm remembering correctly it does usually like keep the",
    "start": "1167080",
    "end": "1173720"
  },
  {
    "text": "stacks aside like there's a lot of reuse of of like allocated Stacks I don't",
    "start": "1173720",
    "end": "1179679"
  },
  {
    "text": "think it is intentionally reusing Stacks but it might that's a part of the runtime I don't know actually the",
    "start": "1179679",
    "end": "1186679"
  },
  {
    "text": "garbage collector would sort of tend to do it for these smaller sized",
    "start": "1186679",
    "end": "1192159"
  },
  {
    "text": "Stacks just because it would say well that's a size class and so anything of",
    "start": "1192159",
    "end": "1197520"
  },
  {
    "text": "that size goes in you know a little pile of 4K or 8K or 16k",
    "start": "1197520",
    "end": "1203360"
  },
  {
    "text": "chunks and it would go there again for the next time it needed something that size oh that's cool I I thought it was",
    "start": "1203360",
    "end": "1209799"
  },
  {
    "text": "like specifically for Stacks but I guess that makes sense for it it might be I I",
    "start": "1209799",
    "end": "1215679"
  },
  {
    "text": "that that's a chunk I don't know about it does sound like uh sacks and SLI like saacks really are just kind of slices",
    "start": "1215679",
    "end": "1221679"
  },
  {
    "text": "that are just in this oh they're just in this special place in memory and we just use them for go routines and all that doesn't sound like they're that special",
    "start": "1221679",
    "end": "1228240"
  },
  {
    "text": "of a thing the sort of the end of the stack has some extra now where did we",
    "start": "1228240",
    "end": "1235200"
  },
  {
    "text": "put the G um every go routine has this thing called the G or the G structure",
    "start": "1235200",
    "end": "1241360"
  },
  {
    "text": "and I don't actually know if we keep it at the base of the stack or the end of the stack what's the G stand for go",
    "start": "1241360",
    "end": "1247559"
  },
  {
    "text": "routine I think it's cool isn't it it's a good name well I don't know if I was looking at the code and I saw a struct",
    "start": "1247559",
    "end": "1253520"
  },
  {
    "text": "that it's just called G I mean obviously that's a concept that exists in that domain",
    "start": "1253520",
    "end": "1258640"
  },
  {
    "text": "there's a couple of those single letter things right there's like G's and P's and",
    "start": "1258640",
    "end": "1263960"
  },
  {
    "text": "M's yes the thing is how do you call your variable of type G lowercase G you",
    "start": "1263960",
    "end": "1271880"
  },
  {
    "text": "call it g g maybe no G just G just G",
    "start": "1271880",
    "end": "1279159"
  },
  {
    "text": "yeah but are these like primary Concepts and therefore they sort of deserve this CU it's almost like a status it's a bit",
    "start": "1279159",
    "end": "1285720"
  },
  {
    "text": "of a power play for a struct to call itself just a single letter I think isn't it it's like a bit of a it's a bit",
    "start": "1285720",
    "end": "1291720"
  },
  {
    "text": "of a move well it's in the runtime so there's the name space so it's not",
    "start": "1291720",
    "end": "1298159"
  },
  {
    "text": "polluting everyone else's name space you could you could have your own G you could have your own M and your own P",
    "start": "1298159",
    "end": "1303880"
  },
  {
    "text": "it's it's allowed yeah should you that's the question isn't it David I I do think",
    "start": "1303880",
    "end": "1310000"
  },
  {
    "text": "it's the basics though like when I so I I've my whole approach to learning about",
    "start": "1310000",
    "end": "1315240"
  },
  {
    "text": "the go run time has basically been looking at the code uh and just trying to understand what's",
    "start": "1315240",
    "end": "1320799"
  },
  {
    "text": "going on there you've done a pretty good job of like maintaining readable code but there are spaces that uh that have",
    "start": "1320799",
    "end": "1326919"
  },
  {
    "text": "been difficult especially since I might not know the the background for why it's there and so I do try to kind of",
    "start": "1326919",
    "end": "1336039"
  },
  {
    "text": "complete that with reading stuff that people who have written that code wrote",
    "start": "1336039",
    "end": "1341520"
  },
  {
    "text": "and so a lot of the the stuff when you start getting into the runtime we'll talk about P's and M's and G's and",
    "start": "1341520",
    "end": "1348039"
  },
  {
    "text": "because that's really the basics of how go even works and how it is so fast and",
    "start": "1348039",
    "end": "1354400"
  },
  {
    "text": "efficient and how it enables go routines or lightweight threads so so that's",
    "start": "1354400",
    "end": "1359679"
  },
  {
    "text": "really where everything starts MH yeah so one of the nice things of course",
    "start": "1359679",
    "end": "1365720"
  },
  {
    "text": "about go being open source is you we can go and look at this code we can actually go and dig in and and look at this and",
    "start": "1365720",
    "end": "1371799"
  },
  {
    "text": "it's go code it's like it doesn't sound like it's the easiest code base to",
    "start": "1371799",
    "end": "1377640"
  },
  {
    "text": "understand but it certainly sounds like we'll have a good chance but y yarden do you have to do a lot of that do you have",
    "start": "1377640",
    "end": "1383279"
  },
  {
    "text": "to dig in because of the work that you're doing and you you got to really understand I get to do a lot of it oh",
    "start": "1383279",
    "end": "1389120"
  },
  {
    "text": "you love it I do it's it's so interesting just because it is really complex and things",
    "start": "1389120",
    "end": "1397840"
  },
  {
    "text": "that are done there are amazing and because I'm also writing go code I'm like understanding what's happening in",
    "start": "1397840",
    "end": "1404200"
  },
  {
    "text": "my code because I'm WR reading the code that runs my code or that compiles my",
    "start": "1404200",
    "end": "1409520"
  },
  {
    "text": "code there's just so many layers to understanding it that make me a better developer and also like interest me I",
    "start": "1409520",
    "end": "1417919"
  },
  {
    "text": "guess so do you recommend people do dig in and learn about this for that reason",
    "start": "1417919",
    "end": "1423679"
  },
  {
    "text": "or or could you still be a good enough go programmer without even knowing and just let let David and that lot worry",
    "start": "1423679",
    "end": "1430320"
  },
  {
    "text": "about this and you I think that kind of varies I think that if you're just starting out with the language then diving into its internals or how it",
    "start": "1430320",
    "end": "1437400"
  },
  {
    "text": "works is not not the right way to go but I I I do think that if you've been",
    "start": "1437400",
    "end": "1443880"
  },
  {
    "text": "writing and go for a while or if it's like a big part of what you do it might",
    "start": "1443880",
    "end": "1451080"
  },
  {
    "text": "make you a better developer because it might not only help you understand things and like just help you avoid bugs",
    "start": "1451080",
    "end": "1459159"
  },
  {
    "text": "that might just happen because of incorrect use it might be common but it might still could be in correct use and",
    "start": "1459159",
    "end": "1465880"
  },
  {
    "text": "then if I'm going on to the more positive side it could also make your code better because you know how to",
    "start": "1465880",
    "end": "1472120"
  },
  {
    "text": "improve performance um using little like things from the runtime and how the runtime works and if you know of the",
    "start": "1472120",
    "end": "1479480"
  },
  {
    "text": "different sections of memory and you can control which things are where and stuff like that so definitely for more",
    "start": "1479480",
    "end": "1485559"
  },
  {
    "text": "advanced developers I think it's important I think having some historical",
    "start": "1485559",
    "end": "1490720"
  },
  {
    "text": "knowledge or like you know back in the day it was probably a little bit more useful like for instance you know we're talking about these G's and M's and PS",
    "start": "1490720",
    "end": "1498120"
  },
  {
    "text": "uh and the M's are threads I don't know why they're not called T's but you know whatever but the the P's are actually",
    "start": "1498120",
    "end": "1504240"
  },
  {
    "text": "like like cores on your processor and until go15 by default you only got one",
    "start": "1504240",
    "end": "1509600"
  },
  {
    "text": "of those so even though you have all these go routines running like you're still doing kind of single like single",
    "start": "1509600",
    "end": "1517039"
  },
  {
    "text": "thing at a time execution not doing parallel execution um which I think is one of those things you know at least in",
    "start": "1517039",
    "end": "1522640"
  },
  {
    "text": "my early days of go surpris me a lot is that like oh I'm doing all these things thinking they're Happ in parallel and",
    "start": "1522640",
    "end": "1528840"
  },
  {
    "text": "they're actually happening concurrently uh and I think when you start looking into the runtime stuff you can kind of",
    "start": "1528840",
    "end": "1534799"
  },
  {
    "text": "see where those differences are because that's really difficult to grow I remember the first time I watched Rob",
    "start": "1534799",
    "end": "1539919"
  },
  {
    "text": "Pike's talk about you know concurrencies not parallelism and being kind of like this is difficult to understand but when",
    "start": "1539919",
    "end": "1546120"
  },
  {
    "text": "you can go and look at something and see it tangibly I think that helps quite a bit yeah I totally agree I think like",
    "start": "1546120",
    "end": "1553919"
  },
  {
    "text": "also it it kind of brings it down to like our developer level I think like",
    "start": "1553919",
    "end": "1560960"
  },
  {
    "text": "when I think of the go developers they're like kind of these imaginary creatures in my mind that know",
    "start": "1560960",
    "end": "1566799"
  },
  {
    "text": "everything about everything and know how to create the perfect L programming languages and then you SE my",
    "start": "1566799",
    "end": "1574520"
  },
  {
    "text": "code oh the go the go team you mean yeah uhuh no not like individual go",
    "start": "1574520",
    "end": "1580440"
  },
  {
    "text": "developers just the goat team only them right um no but seriously I'm like okay",
    "start": "1580440",
    "end": "1585840"
  },
  {
    "text": "these people know everything about everything and they know how everything works um",
    "start": "1585840",
    "end": "1591360"
  },
  {
    "text": "and then reading the code it's like oh wait they write code like me like I write code and they write code and I can",
    "start": "1591360",
    "end": "1598440"
  },
  {
    "text": "read the code they write and suddenly community-wise I think it's really cool to think about how they're just part of",
    "start": "1598440",
    "end": "1605360"
  },
  {
    "text": "the community and like we're all in it together kind of yeah I I understand",
    "start": "1605360",
    "end": "1610720"
  },
  {
    "text": "that like that effect definitely happens the thing is y don't forget you are extremely intelligent and that you know",
    "start": "1610720",
    "end": "1617159"
  },
  {
    "text": "what I mean that's that's not all of us oh sorry man not",
    "start": "1617159",
    "end": "1623320"
  },
  {
    "text": "me about I talking about Chris about me no obviously I'm just I'm kidding",
    "start": "1623320",
    "end": "1630120"
  },
  {
    "text": "obviously not people in general yeah yeah actually I think um uh was it",
    "start": "1630120",
    "end": "1635240"
  },
  {
    "text": "George Carlin who said consider the average intelligence person and then realize half people are dumber than that",
    "start": "1635240",
    "end": "1642600"
  },
  {
    "text": "which is quite brutal but quite funny I mean I I think that's kind of mean",
    "start": "1642600",
    "end": "1648200"
  },
  {
    "text": "because little bit your other I mean the other way to look at it is that you're busy oh thank go and you have a lot of",
    "start": "1648200",
    "end": "1656039"
  },
  {
    "text": "things to do and stuff can slip your mind exactly that's why my socks are on the wrong way I'm just",
    "start": "1656039",
    "end": "1662080"
  },
  {
    "text": "busy yeah you have more important things than the orientation of your socks trouses and I I feel like we're all uh I",
    "start": "1662080",
    "end": "1669880"
  },
  {
    "text": "mean this is bit philosophical but I think we're all like intelligent in different ways and I think that's kind of like what you were getting at yarden",
    "start": "1669880",
    "end": "1675360"
  },
  {
    "text": "with you know seeing the go team and we're all like from the outside it's like oh man they all know everything about everything but it's like no",
    "start": "1675360",
    "end": "1681519"
  },
  {
    "text": "there's some people that are you know they know the compiler very well and they know the runtime very well they know this part of very well and they",
    "start": "1681519",
    "end": "1686840"
  },
  {
    "text": "have no idea how the other parts work and they rely on the breasts of the team to kind of fill in that information yeah",
    "start": "1686840",
    "end": "1692679"
  },
  {
    "text": "it's kind of comforting in a way yes it absolutely is well David when",
    "start": "1692679",
    "end": "1698120"
  },
  {
    "text": "you joined the goate ti how long had you been writing go before you joined the go team oh about zero days you must have",
    "start": "1698120",
    "end": "1705200"
  },
  {
    "text": "aced that interview somehow so there is a rule and it was told to me and we're",
    "start": "1705200",
    "end": "1710640"
  },
  {
    "text": "certainly allowed to repeat it which is it certainly interviews here how would",
    "start": "1710640",
    "end": "1716679"
  },
  {
    "text": "you put it politely don't don't try to um BS your way through the interview",
    "start": "1716679",
    "end": "1722519"
  },
  {
    "text": "right that's great advice generally I think and so stick to what you know and",
    "start": "1722519",
    "end": "1728760"
  },
  {
    "text": "that's you know that's what you're being evaluated on you're not being evaluated on the stuff you don't know you're being",
    "start": "1728760",
    "end": "1733840"
  },
  {
    "text": "you know how good are you at what you do and so I didn't know any go but that was okay did you take a lily in um not for",
    "start": "1733840",
    "end": "1740880"
  },
  {
    "text": "that no um I have brought them in a couple of times you have a nice one in your garden and you bring it in it's",
    "start": "1740880",
    "end": "1746919"
  },
  {
    "text": "nice nice that is actually genuinely nice but yeah so zero days started working in go it's not a hard language",
    "start": "1746919",
    "end": "1753919"
  },
  {
    "text": "to learn I had a little bit of trouble and and then I'm trying to think of like",
    "start": "1753919",
    "end": "1759440"
  },
  {
    "text": "how do you explain this to a a really beginning programmer they're types that are sort of reference is like slices and",
    "start": "1759440",
    "end": "1768080"
  },
  {
    "text": "Maps slices maps are really reference types if you pass a map and it gets modified you'll see the modifications if",
    "start": "1768080",
    "end": "1774799"
  },
  {
    "text": "you pass a slice and it gets modified you'll see some of the modifications you",
    "start": "1774799",
    "end": "1780200"
  },
  {
    "text": "won't see it if it grows you'll see your own your old copy of the data and so to me that's kind of a and you won't you",
    "start": "1780200",
    "end": "1787840"
  },
  {
    "text": "won't see the extensions you'll only see changes made to the part that you passed in yeah it's quite unusual yeah and so",
    "start": "1787840",
    "end": "1794799"
  },
  {
    "text": "that that's always that's like the one part of the language that has always sort of given me the creeps but then",
    "start": "1794799",
    "end": "1800360"
  },
  {
    "text": "when you look at problems people have in the field that they never get that wrong",
    "start": "1800360",
    "end": "1805799"
  },
  {
    "text": "seemingly and I do not understand and maybe people just it's maybe that's kind",
    "start": "1805799",
    "end": "1811640"
  },
  {
    "text": "of how do you put this like I'm always sort of a little worried about what's the pathological thing that could go",
    "start": "1811640",
    "end": "1817240"
  },
  {
    "text": "wrong and so I immediately gravitate to O they could do that and that would go wrong people don't do that so it's fine",
    "start": "1817240",
    "end": "1823240"
  },
  {
    "text": "maybe it's people have gotten like hurt by that like the first few times they've tried and then they've just like found",
    "start": "1823240",
    "end": "1830000"
  },
  {
    "text": "something that works and then they've stuck to it I don't even recall hearing",
    "start": "1830000",
    "end": "1835840"
  },
  {
    "text": "people being hurt by it this is what's so strange and I have a friend who is",
    "start": "1835840",
    "end": "1841279"
  },
  {
    "text": "working in go in sort of a very different way big you know huge programming language background um",
    "start": "1841279",
    "end": "1848399"
  },
  {
    "text": "former assistant professor and everything and worked at IBM research",
    "start": "1848399",
    "end": "1854120"
  },
  {
    "text": "and you you know he sort of explaining these things to him and he's like well that's just awful but it's never been a",
    "start": "1854120",
    "end": "1862480"
  },
  {
    "text": "problem yeah and so it's just kind of like this weird thing where no one no one seems to get it wrong but and so I",
    "start": "1863120",
    "end": "1870080"
  },
  {
    "text": "picked up the language pretty quickly and which was good because I was writing working on a compiler for it so I kind",
    "start": "1870080",
    "end": "1876840"
  },
  {
    "text": "of needed to know how it worked yeah but to to Yen's point this highlights something which I think is an important",
    "start": "1876840",
    "end": "1882600"
  },
  {
    "text": "lesson for everybody which is you have to get good at knowing how to learn learn and that and that's the important",
    "start": "1882600",
    "end": "1889360"
  },
  {
    "text": "skill you don't have to know all the things and have everything in your head you have to be able to learn in in a",
    "start": "1889360",
    "end": "1895760"
  },
  {
    "text": "targeted way you know based on what it is you're doing what problems you're solving because that's something that a",
    "start": "1895760",
    "end": "1901320"
  },
  {
    "text": "lot of Junior devs they see uh like yoden was saying they see people giving",
    "start": "1901320",
    "end": "1906679"
  },
  {
    "text": "a talk and the talk is just packed and obviously they've just done a lot of work to research that subject and",
    "start": "1906679",
    "end": "1913320"
  },
  {
    "text": "they've or they've got direct experience the best talks usually is someone telling stories of something real that",
    "start": "1913320",
    "end": "1919600"
  },
  {
    "text": "they've done so they've specialized in that in order to do that which is actually a great reason to give talks",
    "start": "1919600",
    "end": "1926120"
  },
  {
    "text": "because if you really care and you want to learn about something that's a great way to do it but they don't have to know",
    "start": "1926120",
    "end": "1931399"
  },
  {
    "text": "all the things and have all that stuff in your head and I think that is a nice thing for everyone to remember",
    "start": "1931399",
    "end": "1937120"
  },
  {
    "text": "especially when you're new because you don't have the experience of doing that so much and it can look like people are",
    "start": "1937120",
    "end": "1943279"
  },
  {
    "text": "just these Geniuses yeah like I have a of experience sort of mentoring I guess",
    "start": "1943279",
    "end": "1950760"
  },
  {
    "text": "um really really really beginners and the biggest like issue I've faced with",
    "start": "1950760",
    "end": "1956320"
  },
  {
    "text": "people who like this is the their first time writing code is having them like",
    "start": "1956320",
    "end": "1961799"
  },
  {
    "text": "try the thing they're thinking of cuz they'll kind of they'll sit at the computer and they look at the screen and",
    "start": "1961799",
    "end": "1968320"
  },
  {
    "text": "they'll be and and like I'll come and ask like what's going on and I'll be like I'm not sure how to do this and I'll be like okay how do you think and",
    "start": "1968320",
    "end": "1974440"
  },
  {
    "text": "they'll tell me the solution it may be right and it may be wrong but I'm like okay okay why don't you write it down and try it and there's no real answer",
    "start": "1974440",
    "end": "1981320"
  },
  {
    "text": "right it's just like oh I didn't know I could do that or like I didn't really think like put that get that step there",
    "start": "1981320",
    "end": "1988039"
  },
  {
    "text": "and I think that's the the first part to like advancing as a developer is just",
    "start": "1988039",
    "end": "1994120"
  },
  {
    "text": "trying things out and learning that way definitely the oh I didn't know oh really I can do that okay so same goes",
    "start": "1994120",
    "end": "2002279"
  },
  {
    "text": "for reading go go internal code yeah there are pieces of it that are little creepy the concurrency stuff",
    "start": "2002279",
    "end": "2009519"
  },
  {
    "text": "is just where the weirdly tuned things like I need to synchronize with that",
    "start": "2009519",
    "end": "2015559"
  },
  {
    "text": "thread over there and I think I'll spin for just a little bit and someone",
    "start": "2015559",
    "end": "2021200"
  },
  {
    "text": "figured out yeah yeah that was a good thing to do and then sometimes the spinning becomes inappropriate if",
    "start": "2021200",
    "end": "2027720"
  },
  {
    "text": "there's some weird architectural change how Numa is your processor is",
    "start": "2027720",
    "end": "2034000"
  },
  {
    "text": "that you know what if what if the thing that you're spinning on never makes it into your cash for some crazy reason I",
    "start": "2034000",
    "end": "2041399"
  },
  {
    "text": "and then then you have a horrible problem I feel like go is is pretty good at allowing you to still get access to",
    "start": "2041399",
    "end": "2048679"
  },
  {
    "text": "all of that kind of scary stuff but also uh not throwing it at you to start off with like I think your point about uh",
    "start": "2048679",
    "end": "2055158"
  },
  {
    "text": "slices David I think one of the reasons why people don't mess slices up is because they never learn about arrays",
    "start": "2055159",
    "end": "2061638"
  },
  {
    "text": "until you're kind of like much further into the language right it's not like a thing that comes up that often when",
    "start": "2061639",
    "end": "2067040"
  },
  {
    "text": "first language it's like here's a slice this is what you would have in another language that is an array use it just",
    "start": "2067040",
    "end": "2072720"
  },
  {
    "text": "like that whereas I think if like you kind of dove in and we were like okay well there's these slices things and",
    "start": "2072720",
    "end": "2077760"
  },
  {
    "text": "these array things and they're similar but different and one can grow and the other can't and this is like I think",
    "start": "2077760",
    "end": "2083118"
  },
  {
    "text": "that would probably lead to slicers being much more confusing but just having it be like here's the thing it's",
    "start": "2083119",
    "end": "2088320"
  },
  {
    "text": "a it's a list of data items go use it like that I think people are like okay I'll use it and you can stick new ones",
    "start": "2088320",
    "end": "2094720"
  },
  {
    "text": "on the end and just keep doing that and it's fine yeah it is I do I I agree that it's kind of interesting that people can",
    "start": "2094720",
    "end": "2101359"
  },
  {
    "text": "like intuitively understand it's like oh well if I if I modify something that's already in a slot I'll see it on both",
    "start": "2101359",
    "end": "2107560"
  },
  {
    "text": "sides but if I like grow the thing then it's a new thing but I think also the API helps a lot with that too right it's",
    "start": "2107560",
    "end": "2113920"
  },
  {
    "text": "like oh if I allocate if I append I get a new slice back and that's a different thing than the one I had before the one",
    "start": "2113920",
    "end": "2120760"
  },
  {
    "text": "I had before stays the same yeah that's true and but that is unusual to say when you append to a slice in in other",
    "start": "2120760",
    "end": "2127880"
  },
  {
    "text": "languages I haven't really seen that particularly I'm talking about ruby and c I guess yeah so you and I have seen",
    "start": "2127880",
    "end": "2135480"
  },
  {
    "text": "occasionally I've seen somebody will append and don't they don't reassign it back to the slice and then of course",
    "start": "2135480",
    "end": "2141480"
  },
  {
    "text": "it's just some sometimes you know it's just unusual but it's that like you said David that is really quite rare that",
    "start": "2141480",
    "end": "2148359"
  },
  {
    "text": "that happens it may just be how they explained in the beginning yeah you just learn that that's how you append to",
    "start": "2148359",
    "end": "2154680"
  },
  {
    "text": "things and therefore that's what you do and and you're good yeah so Yen I want",
    "start": "2154680",
    "end": "2160079"
  },
  {
    "text": "to go back to something you said because you talked about how learning about these internals has made you a better programmer how do we control what goes",
    "start": "2160079",
    "end": "2167520"
  },
  {
    "text": "on the stack and what goes on the Heap because at no point you're not saying like oh add to stack there's no",
    "start": "2167520",
    "end": "2174119"
  },
  {
    "text": "functions you're calling to do that so how do we know stuff's going to go on the stack or on the Heap how do we",
    "start": "2174119",
    "end": "2179400"
  },
  {
    "text": "actually control that uh that's a good question I am going to say that I'm not",
    "start": "2179400",
    "end": "2184839"
  },
  {
    "text": "like go has some magic voodoo that I'm not entirely sure about I can tell you",
    "start": "2184839",
    "end": "2190079"
  },
  {
    "text": "what like for sure Goes On The Stack which is like when you create a local variable for instance it's going to be",
    "start": "2190079",
    "end": "2197000"
  },
  {
    "text": "on the stack or or when you pass an argument to a function it's probably going to be on on the stack David did",
    "start": "2197000",
    "end": "2203319"
  },
  {
    "text": "mention earlier that it might be in a register but I think like when we think about it overall it's just not going to",
    "start": "2203319",
    "end": "2209200"
  },
  {
    "text": "be on the Heap so that's that's what we should be thinking about and then the place where this kind of get gets",
    "start": "2209200",
    "end": "2215480"
  },
  {
    "text": "complicated is that what's not on the stack which is things that are on the Heap and those are",
    "start": "2215480",
    "end": "2221400"
  },
  {
    "text": "things that are usually allocated and we don't know how much memory they're going to take ahead of time so like if we",
    "start": "2221400",
    "end": "2227680"
  },
  {
    "text": "think of a regular variable like um an integer or a float or anything like that we're going to know ahead of time",
    "start": "2227680",
    "end": "2233599"
  },
  {
    "text": "exactly how much memory it's going to take and so that's going to be on the stack but if we create a map or a slice",
    "start": "2233599",
    "end": "2240200"
  },
  {
    "text": "or an array with an unknown number of slots I guess or items that would",
    "start": "2240200",
    "end": "2248440"
  },
  {
    "text": "probably end up on the Heap and I did say there's some magic going on and it depends like exactly how you did it but",
    "start": "2248440",
    "end": "2256560"
  },
  {
    "text": "overall that's the idea and then when we talk about pointers it gets a little",
    "start": "2256560",
    "end": "2261640"
  },
  {
    "text": "more complicated because if we pass a pointer as an argument to a function and",
    "start": "2261640",
    "end": "2267359"
  },
  {
    "text": "this is where it gets interesting is how does the garbage collector know when",
    "start": "2267359",
    "end": "2272599"
  },
  {
    "text": "that pointer is out of use or when the data it's pointing at can be released and so overall the general idea is put",
    "start": "2272599",
    "end": "2280480"
  },
  {
    "text": "as much things on the stack because the stack as David said is scratch storage",
    "start": "2280480",
    "end": "2285760"
  },
  {
    "text": "it's like automatically cleaned up it does not need the garbage collector and then only if you need to use pointers",
    "start": "2285760",
    "end": "2292560"
  },
  {
    "text": "and only if you need something on the heat you'll do that just to like avoid the overhead of the garbage collector",
    "start": "2292560",
    "end": "2299359"
  },
  {
    "text": "running right you say when when it's on the stack it's automatically cleaned up so what happens when a function returns",
    "start": "2299359",
    "end": "2305480"
  },
  {
    "text": "because like presumably those arguments go on the stack in order to call a function so then when that",
    "start": "2305480",
    "end": "2311599"
  },
  {
    "text": "function returns is there something that happens so yes and no uh yes",
    "start": "2311599",
    "end": "2316920"
  },
  {
    "text": "theoretically like when we think about the stack we like to think of uh like some sort of pointer to the end of the",
    "start": "2316920",
    "end": "2324440"
  },
  {
    "text": "stack and then that moving once we remove once we return from a function so",
    "start": "2324440",
    "end": "2331560"
  },
  {
    "text": "everything um the way the stack is built as we said it's from a higher Addis to lower say and then the last chunk is",
    "start": "2331560",
    "end": "2339440"
  },
  {
    "text": "going to be the last function that was called and so if we look at like a stack Trace at a certain point we're going to",
    "start": "2339440",
    "end": "2346280"
  },
  {
    "text": "just see that's how our memory is going to look that's how our stack is going to look we're going to have like the",
    "start": "2346280",
    "end": "2351400"
  },
  {
    "text": "variables from the last function and then the variables from the function that called that and so on and so forth",
    "start": "2351400",
    "end": "2356680"
  },
  {
    "text": "and so we kind of like to think of the pointer to the end of the stack moving to the previous function when we return",
    "start": "2356680",
    "end": "2363000"
  },
  {
    "text": "from our current function and so that's a theoretical Park part where we actually do something in practice except",
    "start": "2363000",
    "end": "2370599"
  },
  {
    "text": "for that pointer we're not changing anything so that that memory isn't going anywhere it isn't being like zeroed out",
    "start": "2370599",
    "end": "2376640"
  },
  {
    "text": "or something like that but the next time that we write to that same space on the stack it's just going to be overwritten",
    "start": "2376640",
    "end": "2382880"
  },
  {
    "text": "and we're going to just basically think of it of it as not existing so the stack",
    "start": "2382880",
    "end": "2389200"
  },
  {
    "text": "isn't really growing in shrinking or not as we call functions and as we return",
    "start": "2389200",
    "end": "2394400"
  },
  {
    "text": "from them uh just the point pointer to the end of it is moving yeah cuz I guess it would be it would be just extra work",
    "start": "2394400",
    "end": "2401480"
  },
  {
    "text": "to just zero out the memory or something so there's no need for it right yeah exactly it's like doing the minimum you",
    "start": "2401480",
    "end": "2407880"
  },
  {
    "text": "can to to achieve what you want people don't want it it would be slower and people don't like slower there have been",
    "start": "2407880",
    "end": "2414760"
  },
  {
    "text": "people in the world of crypto who have asked for things like that how like if I",
    "start": "2414760",
    "end": "2420920"
  },
  {
    "text": "ever wrote an important thing anywhere in memory how quickly could I get that zeroed after I'm done with it so they",
    "start": "2420920",
    "end": "2429160"
  },
  {
    "text": "they kind of ask about that and it's been proposed we're not we don't know",
    "start": "2429160",
    "end": "2434400"
  },
  {
    "text": "what's the best way is there no way for them to just programmatically change it to a different value so the problem here",
    "start": "2434400",
    "end": "2441040"
  },
  {
    "text": "is that the compiler sees that they're doing a bunch of rights to something that they're not going to read or do anything with and it says I I could make",
    "start": "2441040",
    "end": "2447319"
  },
  {
    "text": "that run faster for you let me just get rid of those rights yeah I mean which also then tells you the right thing to",
    "start": "2447319",
    "end": "2452960"
  },
  {
    "text": "do which is you would have another piece of code that you ran that verified that what you wrote there was really and",
    "start": "2452960",
    "end": "2458280"
  },
  {
    "text": "truly zero but that would take more time and then they then the cryptog say well",
    "start": "2458280",
    "end": "2463440"
  },
  {
    "text": "wait we didn't want to me mean to take that much time so there's no pleasing them really",
    "start": "2463440",
    "end": "2469000"
  },
  {
    "text": "is there it's always the cryto crypto guys yeah there's no pleasing anybody yeah I mean when it comes to security",
    "start": "2469000",
    "end": "2474960"
  },
  {
    "text": "though talk about slow I was listening to uh own of the change log and Friends episode where they had the oxide",
    "start": "2474960",
    "end": "2480480"
  },
  {
    "text": "computer folks on and they were talking about how they had to like take the printer they printed out the secret key",
    "start": "2480480",
    "end": "2485960"
  },
  {
    "text": "on and like drill a hole through its microcontroller and all of this to make sure that all of the that you couldn't",
    "start": "2485960",
    "end": "2492319"
  },
  {
    "text": "ever like recover the key or anything so that in terms of slow is like okay well that's a whole whole big process but I",
    "start": "2492319",
    "end": "2498240"
  },
  {
    "text": "think it you know it does kind of say something important about you know how we think about Computing and how much we're like speed speed speed and it's",
    "start": "2498240",
    "end": "2505200"
  },
  {
    "text": "like well maybe sometimes we should have a little bit of a like safety trade-off for Speed just have to figure out where",
    "start": "2505200",
    "end": "2510359"
  },
  {
    "text": "that that balance is but how quickly could you smash a printer though Chris I reckon I could get I get a printer",
    "start": "2510359",
    "end": "2517160"
  },
  {
    "text": "smashed quite quickly like destroy a printer but it's not just any printer has to be the correct printer well you",
    "start": "2517160",
    "end": "2523640"
  },
  {
    "text": "and you have to smash it in the right way too right cuz you have to make sure that all of the chips and the memory and everything is just even the drum you",
    "start": "2523640",
    "end": "2530480"
  },
  {
    "text": "want to make sure if it's like one of those printers that like there's no Terminator it's it's a lot put it in",
    "start": "2530480",
    "end": "2535839"
  },
  {
    "text": "some hot lava that's one way throw it in the lava or lower it down like they did that's",
    "start": "2535839",
    "end": "2540920"
  },
  {
    "text": "what that's that's what I learned from the termin just one of the things I learned from the Terminator franchise and Shredder and it was a print and it's",
    "start": "2540920",
    "end": "2547920"
  },
  {
    "text": "a printer they've never been good to us no they haven't they're the worst thing that we have to deal with aren't they",
    "start": "2547920",
    "end": "2553960"
  },
  {
    "text": "printers they they're amazing now compared to what they were but they're still the worst thing in the world",
    "start": "2553960",
    "end": "2560200"
  },
  {
    "text": "aren't they the original iot device and the most terrible of any that we've ined",
    "start": "2560200",
    "end": "2565760"
  },
  {
    "text": "yeah yeah hay Prince I don't want to say that too loudly in case mine hears me and then I'll have the problems next",
    "start": "2565760",
    "end": "2572319"
  },
  {
    "text": "time yeah yeah it used to be like you used to be like oh you can't print because your printer is not online so",
    "start": "2572319",
    "end": "2579200"
  },
  {
    "text": "and then so you go and press a button to say right online and then it's like oh hang on then it's like why is this even a feature what do you mean why would you",
    "start": "2579200",
    "end": "2586400"
  },
  {
    "text": "want it to ever be offline I don't know bloody printers so uh speaking of",
    "start": "2586400",
    "end": "2591640"
  },
  {
    "text": "stacking Heap though y you mentioned like you know oh sometimes you want to like try and make things be in the stack",
    "start": "2591640",
    "end": "2596839"
  },
  {
    "text": "try and make things in the Heap do you have any like suggestions for people of how they might be able to control this",
    "start": "2596839",
    "end": "2601960"
  },
  {
    "text": "when they should control it when they should care about doing either of those things or any of that so as I like you",
    "start": "2601960",
    "end": "2609000"
  },
  {
    "text": "should almost always put things on the stack which means like okay I know like",
    "start": "2609000",
    "end": "2615440"
  },
  {
    "text": "from my experience I I I said that I wrote C for a while before I started with go and and C a really big thing is",
    "start": "2615440",
    "end": "2622440"
  },
  {
    "text": "to pass pointers around and the reason is not to copy big structures from one",
    "start": "2622440",
    "end": "2627680"
  },
  {
    "text": "place to another when it's not necessary to copy them I guess it's a thing of of the past when you know we didn't just",
    "start": "2627680",
    "end": "2635079"
  },
  {
    "text": "have like really small hard drives that have a lot of um space in them where we wanted to save on",
    "start": "2635079",
    "end": "2642240"
  },
  {
    "text": "memory which isn't really such a big deal now but that's how I was taught and so I kind of took this practice with me",
    "start": "2642240",
    "end": "2648319"
  },
  {
    "text": "to go but it's really wrong because anywhere you can copy a struct which",
    "start": "2648319",
    "end": "2653960"
  },
  {
    "text": "means just pass it around as it is without taking its pointer you should do that because then it can be as I said it",
    "start": "2653960",
    "end": "2660480"
  },
  {
    "text": "can be cleaned and you're not giving any extra work to the garbage collector which has to say oh there's a pointer",
    "start": "2660480",
    "end": "2665839"
  },
  {
    "text": "here here and then also just remember there's a pointer here and then also go back and see where's that pointing to",
    "start": "2665839",
    "end": "2672839"
  },
  {
    "text": "does that have any additional pointers okay so you should not be using pointers",
    "start": "2672839",
    "end": "2678119"
  },
  {
    "text": "to save on memory that's a big thing I learned but you should be using pointers in case you want to share a reference to",
    "start": "2678119",
    "end": "2684559"
  },
  {
    "text": "something so sticking to that will probably get you a performance boost if",
    "start": "2684559",
    "end": "2691680"
  },
  {
    "text": "if you haven't been doing that so far yeah so that's really counterintuitive and I think I see people even that are",
    "start": "2691680",
    "end": "2698000"
  },
  {
    "text": "new to go when they learn about a pointer and passing something and it gets copied and instinctively I think",
    "start": "2698000",
    "end": "2704920"
  },
  {
    "text": "even without that that experience with C instinctively you think well I'll just pass pointers all the time yeah I see",
    "start": "2704920",
    "end": "2711160"
  },
  {
    "text": "like slices to pointers of types and things like this um because it's like oh of course just pointing to it that's",
    "start": "2711160",
    "end": "2717559"
  },
  {
    "text": "much easier so that's really interesting I'm just sorry I'm just sitting here thinking about how it relates to the",
    "start": "2717559",
    "end": "2723119"
  },
  {
    "text": "colon convention uh what's that uh where where we do use registers we are willing",
    "start": "2723119",
    "end": "2729520"
  },
  {
    "text": "to use a whole lot of them what's the register what is a register",
    "start": "2729520",
    "end": "2735720"
  },
  {
    "text": "David oh what is a register that's you have a fixed amount of abstractly before",
    "start": "2735720",
    "end": "2742920"
  },
  {
    "text": "they started doing all the crazy things that they do in modern processors you have a very small amount of scratch",
    "start": "2742920",
    "end": "2749440"
  },
  {
    "text": "storage and it's a fixed size and they've got fixed names 0 1 2 3 4 five",
    "start": "2749440",
    "end": "2756160"
  },
  {
    "text": "you know yeah up to sometimes 31 and sometimes more and everything you do",
    "start": "2756160",
    "end": "2764319"
  },
  {
    "text": "really do you end up doing it moving it in and out of out out of memory into",
    "start": "2764319",
    "end": "2770280"
  },
  {
    "text": "those registers then you have all the operations on registers and then you want to hang on to it and you store it",
    "start": "2770280",
    "end": "2776520"
  },
  {
    "text": "sorry I don't know what they Implement them with nowadays don't know it's so abstracted",
    "start": "2776520",
    "end": "2782040"
  },
  {
    "text": "now it very much and now with speculative execution and hyperthreading",
    "start": "2782040",
    "end": "2789160"
  },
  {
    "text": "you have reg they they have a layer of indirection between the names and the",
    "start": "2789160",
    "end": "2794720"
  },
  {
    "text": "actual registers and there's still a relatively small amount of them compared to the gigabytes of memory that you",
    "start": "2794720",
    "end": "2800720"
  },
  {
    "text": "might have on a machine and so now instead of 31 or 64 you might have a",
    "start": "2800720",
    "end": "2806839"
  },
  {
    "text": "couple hundred but it's still a small fixed number you have a number of names for them and the instructions have a you",
    "start": "2806839",
    "end": "2813839"
  },
  {
    "text": "know the machine instructions which have a fixed size have special Fields where you code those small numbers which are",
    "start": "2813839",
    "end": "2821119"
  },
  {
    "text": "the names into them and that's a register I hope that works you were asking about pointers or mentioning you",
    "start": "2821119",
    "end": "2829280"
  },
  {
    "text": "know use of pointers and not and there's a thing that go does that Java does a",
    "start": "2829280",
    "end": "2835079"
  },
  {
    "text": "little bit other programming languages tend not to do it as much they do this",
    "start": "2835079",
    "end": "2840280"
  },
  {
    "text": "thing called Escape analysis so that just because you make a point there there were reasons sometimes to make a",
    "start": "2840280",
    "end": "2846760"
  },
  {
    "text": "pointer to something sometimes you need to call a function somebody else wrote and it's just I'm sorry I take a pointer",
    "start": "2846760",
    "end": "2852720"
  },
  {
    "text": "or you know maybe I wish to you know I wish to share that thing I wish to do some changes to it and then you need to",
    "start": "2852720",
    "end": "2858720"
  },
  {
    "text": "see them and then rather than taking a whole structure and passing it back I decided for whatever reason to operate",
    "start": "2858720",
    "end": "2864480"
  },
  {
    "text": "on a pointer go has this property on its package Imports that there aren't any",
    "start": "2864480",
    "end": "2871000"
  },
  {
    "text": "cycles and what that means is that if you look at the runtime package first it",
    "start": "2871000",
    "end": "2876400"
  },
  {
    "text": "doesn't depend upon anything else so you can compile it and you can be done and you can know things about the functions",
    "start": "2876400",
    "end": "2882000"
  },
  {
    "text": "in the runtime package and then you go up a little more and you have another layer of packages that depend upon",
    "start": "2882000",
    "end": "2887680"
  },
  {
    "text": "runtime and nothing else and so for each function you can say well I passed a",
    "start": "2887680",
    "end": "2892800"
  },
  {
    "text": "pointer to it but when that function was done it did not save a copy of that",
    "start": "2892800",
    "end": "2898280"
  },
  {
    "text": "pointer anywhere else it didn't store it into the Heap or anywhere else so it's done and you could leave the thing that",
    "start": "2898280",
    "end": "2905240"
  },
  {
    "text": "it pointed to On The Stack that would be okay and they what they call this is escaping so the the pointer did not",
    "start": "2905240",
    "end": "2912200"
  },
  {
    "text": "Escape it didn't get stored into the Heap or communicated to another thread",
    "start": "2912200",
    "end": "2917400"
  },
  {
    "text": "and they have this phase called Escape analysis and for functions and methods",
    "start": "2917400",
    "end": "2923079"
  },
  {
    "text": "they do Escape summaries so that you can call a function and in kind of a crude",
    "start": "2923079",
    "end": "2929680"
  },
  {
    "text": "way know that it did or didn't reveal it to the rest of the world didn't store in",
    "start": "2929680",
    "end": "2935839"
  },
  {
    "text": "the Heap and so this is a way that you can keep a little bit more stuff on the stack than you would ordinarily and is",
    "start": "2935839",
    "end": "2943400"
  },
  {
    "text": "that happen at compile time or is that a runtime thing that happens right now that happens at compile time we have",
    "start": "2943400",
    "end": "2951240"
  },
  {
    "text": "been talking about how to do more of it and do a better job and we there we have",
    "start": "2951240",
    "end": "2958839"
  },
  {
    "text": "a in among ourselves we have these competing proposals and we go back and it's kind of a which of these going to",
    "start": "2958839",
    "end": "2966119"
  },
  {
    "text": "yield the most Improvement are they going to have Associated like a runtime",
    "start": "2966119",
    "end": "2972319"
  },
  {
    "text": "tax to have this little Gadget sitting around helping um and you know sort of",
    "start": "2972319",
    "end": "2978720"
  },
  {
    "text": "what's the risk in the implementation how hard will it be to get this done and not have screwy bugs prop up and so",
    "start": "2978720",
    "end": "2986960"
  },
  {
    "text": "there's an idea that you might tell a function that returns something that it all since it returns memory that it",
    "start": "2986960",
    "end": "2993240"
  },
  {
    "text": "allocated says well I can't put that in my stack because my stack when I return my stack will be gone so I guess it has",
    "start": "2993240",
    "end": "3000839"
  },
  {
    "text": "to be on the Heap and there's this question of could we change the call- and Convention to functions that return",
    "start": "3000839",
    "end": "3006799"
  },
  {
    "text": "pointers to say here's a place you could use this memory here because the caller",
    "start": "3006799",
    "end": "3013240"
  },
  {
    "text": "might see the lifetime of the result and say yeah I I get this thing back I use it and I'm done and I don't do anything",
    "start": "3013240",
    "end": "3020400"
  },
  {
    "text": "more is there a way to hand it to him and in Java",
    "start": "3020400",
    "end": "3026359"
  },
  {
    "text": "there have been implementations of java there was actual Hardware with features",
    "start": "3026359",
    "end": "3031599"
  },
  {
    "text": "for this by a company called Azul where you would allocate initially and it",
    "start": "3031599",
    "end": "3036960"
  },
  {
    "text": "would try and keep it on the stack and say oops sorry and the hardware would have sort of a high-speed fault and it",
    "start": "3036960",
    "end": "3043760"
  },
  {
    "text": "would record that one was a bad idea to do on the stack don't do that again and",
    "start": "3043760",
    "end": "3049480"
  },
  {
    "text": "so but since it was in Hardware the overhead was low it was not like some software Gadget so in the future it",
    "start": "3049480",
    "end": "3055119"
  },
  {
    "text": "would no take the other path and but meanwhile this thing that you were just about to overwrite that you need to",
    "start": "3055119",
    "end": "3060440"
  },
  {
    "text": "escape put it somewhere else to fix it but in the future don't do this so it",
    "start": "3060440",
    "end": "3066400"
  },
  {
    "text": "had like little clever Hardware gadgets to help and the question is how much",
    "start": "3066400",
    "end": "3071640"
  },
  {
    "text": "could you do how far could you go in software would it be worth it the go garbage collector is not when you",
    "start": "3071640",
    "end": "3078960"
  },
  {
    "text": "compare it to others like the Java garbage collector it's a little slower to allocate and it's a little slower to",
    "start": "3078960",
    "end": "3085799"
  },
  {
    "text": "collect garbage what you get back is that it doesn't move memory it handles",
    "start": "3085799",
    "end": "3091480"
  },
  {
    "text": "interior pointers and it has an extremely small stop the world pause time so we have this kind of like these",
    "start": "3091480",
    "end": "3098040"
  },
  {
    "text": "interesting tradeoffs and it doesn't have a lot of overhead to use pointers but what that means is that so the",
    "start": "3098040",
    "end": "3104359"
  },
  {
    "text": "tradeoffs for what you might want to do to avoid a heap allocation you might be able to spend a little more and have it",
    "start": "3104359",
    "end": "3110359"
  },
  {
    "text": "still be profitable yeah that uh i' I've definitely done some things in code in the past to like make sure that what I'm",
    "start": "3110359",
    "end": "3117079"
  },
  {
    "text": "writing doesn't escape to the Heap just be like no I'm going to write this in a specific way to make sure that escape",
    "start": "3117079",
    "end": "3123720"
  },
  {
    "text": "you know analysis makes it okay this will definitely go on the on the stack and one of the things that I I wanted I",
    "start": "3123720",
    "end": "3129880"
  },
  {
    "text": "think we talked about it maybe in our tooling episode or episode on tools we love is like a way to run like analysis",
    "start": "3129880",
    "end": "3136920"
  },
  {
    "text": "in the same way you can do code coverage that will then in your editor turn things like green or red like I would like it to turn all my variables like I",
    "start": "3136920",
    "end": "3143160"
  },
  {
    "text": "don't know blue or some color to be like these all escaped to the Heap and these would all be on the stack so I think",
    "start": "3143160",
    "end": "3148240"
  },
  {
    "text": "that would be also really helpful as a way to like visualize for things that the compiler or analysis tools are very",
    "start": "3148240",
    "end": "3154640"
  },
  {
    "text": "sure will not Escape or are pretty sure will escape and that would be I think a really helpful thing in this area as",
    "start": "3154640",
    "end": "3160359"
  },
  {
    "text": "well because I think we're kind of lack tooling and it's a lot of intuition and then analyzing your code after the fact",
    "start": "3160359",
    "end": "3165680"
  },
  {
    "text": "to see like did that actually wind up on the Heap I I don't know um so if there's a way to see it more tangibly I think",
    "start": "3165680",
    "end": "3172079"
  },
  {
    "text": "that'd be super useful so there are two answers at least two answers to that and one of them is we have we've had these",
    "start": "3172079",
    "end": "3180160"
  },
  {
    "text": "discussions with people at go users in other companies some of them are very focused on",
    "start": "3180160",
    "end": "3186400"
  },
  {
    "text": "performance and also with people working on the IDE and so there's a flag you can",
    "start": "3186400",
    "end": "3192839"
  },
  {
    "text": "pass to the compiler it's kind of a little screwy it's not one that a that a human would be happy to do but it's",
    "start": "3192839",
    "end": "3199559"
  },
  {
    "text": "intended for some for an automated workflow you could say um here's this",
    "start": "3199559",
    "end": "3204680"
  },
  {
    "text": "flag - Json equals 0 comma a directory",
    "start": "3204680",
    "end": "3210079"
  },
  {
    "text": "name and it will for all the packages compiled drop Json in there in an",
    "start": "3210079",
    "end": "3216799"
  },
  {
    "text": "encoded I think it's a URL encoded I think name of the package and it will",
    "start": "3216799",
    "end": "3222559"
  },
  {
    "text": "talk about anything that the basically the compiler it logs all of its failures",
    "start": "3222559",
    "end": "3228119"
  },
  {
    "text": "there you know Maya Copa mayaula sorry couldn't get the bounce check out sorry had to keep allocate this sorry you know",
    "start": "3228119",
    "end": "3236200"
  },
  {
    "text": "and it's in LSP format the stuff that um VSS code uses and it was a little screwy",
    "start": "3236200",
    "end": "3243240"
  },
  {
    "text": "to encode you know air compiler messages this is like the information you'd get",
    "start": "3243240",
    "end": "3248680"
  },
  {
    "text": "from dhm equals 1 or m equals 2 but in Json LSP format Json and so you could in",
    "start": "3248680",
    "end": "3256240"
  },
  {
    "text": "principle pull this into an IDE but one problem with this is that I mean stuff",
    "start": "3256240",
    "end": "3264720"
  },
  {
    "text": "goes wrong all the time and it you know from the point of view of you know the compiler is failing you",
    "start": "3264720",
    "end": "3270960"
  },
  {
    "text": "constantly like the bounce checks are still in here sorry the null check is",
    "start": "3270960",
    "end": "3276040"
  },
  {
    "text": "still here sorry but most of the time it doesn't matter because most of your time is",
    "start": "3276040",
    "end": "3281920"
  },
  {
    "text": "spent in just a few places and so you you you you need to combine that I think",
    "start": "3281920",
    "end": "3288119"
  },
  {
    "text": "with something like profiling so that you focus your attention on where the problem is and on not not all the other",
    "start": "3288119",
    "end": "3294040"
  },
  {
    "text": "places because otherwise you just say oh look at this a compiler is so terrible look at look at all it didn't do for me",
    "start": "3294040",
    "end": "3301280"
  },
  {
    "text": "and we're sort of working on that there's pggo coming where are we at now I think it's experimental we're doing",
    "start": "3301280",
    "end": "3308319"
  },
  {
    "text": "more soon so that's why you mentioned that it's not really for a human because it's too noisy I don't think it's I",
    "start": "3308319",
    "end": "3315599"
  },
  {
    "text": "don't think it's really for a human because it's too noisy I think that there's another filtering step that you would need either to look at their",
    "start": "3315599",
    "end": "3322440"
  },
  {
    "text": "profile and say I need to look at this function please show me the bad news for this",
    "start": "3322440",
    "end": "3327880"
  },
  {
    "text": "function do you have a capture on it that says I am a robot they have to click that's one way no we do not I",
    "start": "3327880",
    "end": "3334720"
  },
  {
    "text": "think that would be actually like that the thing I was going to say too is like it'd be nice if this was integrated into go pleas or language servers in general",
    "start": "3334720",
    "end": "3341119"
  },
  {
    "text": "so you could kind of surface that information because I do think it's I think I would definitely use it in the way that I also use like coverage",
    "start": "3341119",
    "end": "3347599"
  },
  {
    "text": "testing and be like I care that this function in particular or this file or this package is like very optimized so",
    "start": "3347599",
    "end": "3354160"
  },
  {
    "text": "I'm going to go look at get you know all nice coverage stuff I think it'd be nice to be able to do that for like those specific places but I think you want",
    "start": "3354160",
    "end": "3360440"
  },
  {
    "text": "right too you don't want people just kind of looking at some random function that gets cold once and being like let",
    "start": "3360440",
    "end": "3365920"
  },
  {
    "text": "me make sure it doesn't put anything on the Heap it's it's it's it's okay A bit like reflection where people are like",
    "start": "3365920",
    "end": "3371400"
  },
  {
    "text": "you know I I've built a lot of those like uh startup utilities that do like flag analysis and all of that people",
    "start": "3371400",
    "end": "3376760"
  },
  {
    "text": "like you're using reflection here I'm like it gets cold once when your process is starting it is fine like don't worry",
    "start": "3376760",
    "end": "3382520"
  },
  {
    "text": "it's okay if it's slow we don't need to hyper optimize well that raises a really good point which we do we do mention this a lot",
    "start": "3382520",
    "end": "3389559"
  },
  {
    "text": "which is measure first and optimize after but this raises a good question since the go team are busy beavering",
    "start": "3389559",
    "end": "3396480"
  },
  {
    "text": "away under the h under the hood changing things and adding optimizations and and",
    "start": "3396480",
    "end": "3402280"
  },
  {
    "text": "uh and doing a lot of great work there is it possible that we optimize our code",
    "start": "3402280",
    "end": "3407319"
  },
  {
    "text": "and then a new version of go comes out which makes some changes that then makes our code less performant or makes some",
    "start": "3407319",
    "end": "3413559"
  },
  {
    "text": "of our optimizations unnecessary is that possible to happen is should we keep",
    "start": "3413559",
    "end": "3419119"
  },
  {
    "text": "remeasuring and reassessing I mean I would never say",
    "start": "3419119",
    "end": "3424680"
  },
  {
    "text": "never just said it twice David I did I",
    "start": "3424680",
    "end": "3430280"
  },
  {
    "text": "did I would say never seen ever more than twice um four times carry on okay",
    "start": "3430280",
    "end": "3437359"
  },
  {
    "text": "no God sorry it's been annoying right right so I mean I think that one thing",
    "start": "3437359",
    "end": "3443440"
  },
  {
    "text": "that we would aim to do is to make some of your hard work in the past now be",
    "start": "3443440",
    "end": "3448680"
  },
  {
    "text": "unnecessary I I have a be in my Bonnet to look into could we reorder fields and",
    "start": "3448680",
    "end": "3455799"
  },
  {
    "text": "quit telling people that they should sort their fields to make their structures more Compact and we could",
    "start": "3455799",
    "end": "3460960"
  },
  {
    "text": "make the optimization guide that much shorter and then all of your good work sorting those fields out sorry that was",
    "start": "3460960",
    "end": "3467839"
  },
  {
    "text": "time wasted Also if anyone actually cares about the the order of their fields like binary encoding or something",
    "start": "3467839",
    "end": "3474240"
  },
  {
    "text": "often mates yeah stuff like that good but you know that that and by the way this is not likely to happen anytime",
    "start": "3474240",
    "end": "3481559"
  },
  {
    "text": "soon but it's just kind of a you know if we did that we could do that and then it you know one step would be shorter but",
    "start": "3481559",
    "end": "3488960"
  },
  {
    "text": "ordinarily no we don't people don't like it when their code gets slower I can see",
    "start": "3488960",
    "end": "3496559"
  },
  {
    "text": "so you you may recall when Spectre and meltdown came out the um security so for",
    "start": "3496559",
    "end": "3501960"
  },
  {
    "text": "security things sometimes the security fix is just going to make your code be slower there's a um God I can't remember",
    "start": "3501960",
    "end": "3510720"
  },
  {
    "text": "where I saw it but it was something horrifying with Java strings and two",
    "start": "3510720",
    "end": "3516079"
  },
  {
    "text": "ways of encoding Java strings and passing them to something and you could",
    "start": "3516079",
    "end": "3522000"
  },
  {
    "text": "have a race and so it's it essentially it validates the data and then it uses the data and because it validates and",
    "start": "3522000",
    "end": "3530200"
  },
  {
    "text": "then uses it you could have a thread racing to screw the data up in ways that it was no longer valid oh if you got in",
    "start": "3530200",
    "end": "3537000"
  },
  {
    "text": "there in between those two operations yeah yeah yeah and so you get",
    "start": "3537000",
    "end": "3542319"
  },
  {
    "text": "strange you can get very strange behavior and and I'm sure they're going to fix it and the way they're going to",
    "start": "3542319",
    "end": "3547440"
  },
  {
    "text": "fix this thing is they're going to have to put in a copy so you're going to copy it then you're going to validate it and",
    "start": "3547440",
    "end": "3553119"
  },
  {
    "text": "then you're going to use the version that no one can mess with and so you added some expense inspector and",
    "start": "3553119",
    "end": "3559000"
  },
  {
    "text": "meltdown it's like you thought your processors were cool and fast and we're going to slow them down",
    "start": "3559000",
    "end": "3565200"
  },
  {
    "text": "a little bit and we're going to make you generate code a little differently if that's your problem it's",
    "start": "3565200",
    "end": "3571280"
  },
  {
    "text": "like too bad it's slower now and you and when you first hear about Spectre and meltdown and I guess row Hammer it's",
    "start": "3571280",
    "end": "3578400"
  },
  {
    "text": "just kind of you did that oh crap you because you know you like to",
    "start": "3578400",
    "end": "3584319"
  },
  {
    "text": "think that the hardware is just G to work and not do these bad things to you yeah yeah I think uh to kind of go back",
    "start": "3584319",
    "end": "3591160"
  },
  {
    "text": "to that point we were talking about with like struct field reordering one of the things I thought about it's like yeah it's nice when you order things so",
    "start": "3591160",
    "end": "3596200"
  },
  {
    "text": "they're nice and Compact and fit in a small amount of space but because of how cashes work sometimes you want the",
    "start": "3596200",
    "end": "3601440"
  },
  {
    "text": "opposite of that where you're like no no no I want these things to be on different cach lines if you put them on the same cach line my performance will",
    "start": "3601440",
    "end": "3608319"
  },
  {
    "text": "just go out the window completely so you can see how difficult of a of a problem",
    "start": "3608319",
    "end": "3613400"
  },
  {
    "text": "this would be to kind of automatically solve for people but that does not go 101 and I also don't think that we would",
    "start": "3613400",
    "end": "3618520"
  },
  {
    "text": "be solving that automatically well yes but I mean that's also not a thing that you would inflict on a go begin and go",
    "start": "3618520",
    "end": "3625839"
  },
  {
    "text": "programmer yeah I mean I was saying if like you reordered the fields of a struct you might reorder them in a way",
    "start": "3625839",
    "end": "3631000"
  },
  {
    "text": "that puts things in catch lines that shouldn't be next to each other or something like that well you you you also have to have a way to be specific",
    "start": "3631000",
    "end": "3638160"
  },
  {
    "text": "anytime you talk to another programming language or the OS things should be just",
    "start": "3638160",
    "end": "3643280"
  },
  {
    "text": "so and if they're not too bad for you right yeah speaking of that we've reached the point in the show where it",
    "start": "3643280",
    "end": "3649640"
  },
  {
    "text": "is time for our unpopular opinions",
    "start": "3649640",
    "end": "3656319"
  },
  {
    "text": "un opinion you what I actually think should probably [Music]",
    "start": "3656319",
    "end": "3663960"
  },
  {
    "text": "leave",
    "start": "3664039",
    "end": "3667039"
  },
  {
    "text": "opinion okay yarden do you have an unpopular opinion for us I do I think",
    "start": "3669799",
    "end": "3675760"
  },
  {
    "text": "it's really unpopular my my opinion is that uh go should not add any new big",
    "start": "3675760",
    "end": "3683680"
  },
  {
    "text": "features right to the language why not well I like I like simple I like Simplicity I",
    "start": "3683680",
    "end": "3691559"
  },
  {
    "text": "like like you asked me earlier what uh my favorite language is I said see and",
    "start": "3691559",
    "end": "3697280"
  },
  {
    "text": "go and I think the reason for that is because when I look at go code or when I",
    "start": "3697280",
    "end": "3703160"
  },
  {
    "text": "look at C code like I know what's going on there and when I look at Java code if",
    "start": "3703160",
    "end": "3710039"
  },
  {
    "text": "someone has different conventions like coding conventions or if someone use it is using a newer feature that I'm not",
    "start": "3710039",
    "end": "3716160"
  },
  {
    "text": "familiar with like the code might be virtually unreadable to me and I think",
    "start": "3716160",
    "end": "3723520"
  },
  {
    "text": "go did a great job of like really keeping it simple I love that it like",
    "start": "3723520",
    "end": "3730640"
  },
  {
    "text": "really forces you into a certain structure and it's not like I don't know we compare it to python where python",
    "start": "3730640",
    "end": "3737039"
  },
  {
    "text": "basically lets you do anything you want and go even like go lters will be like",
    "start": "3737039",
    "end": "3742160"
  },
  {
    "text": "that's not how you're supposed to name a variable in go and and I really like that and I think",
    "start": "3742160",
    "end": "3747279"
  },
  {
    "text": "it really helps get into the language it really helps uh read other people's code it really helps write good code because",
    "start": "3747279",
    "end": "3753720"
  },
  {
    "text": "if you only need to learn the basics and then you build off of that instead of just learning more and more and more and more and more then then you're becoming",
    "start": "3753720",
    "end": "3761039"
  },
  {
    "text": "like a better developer so much quicker and so all that to say that if we add",
    "start": "3761039",
    "end": "3766720"
  },
  {
    "text": "any new big features we're just getting away from that notion and I think like",
    "start": "3766720",
    "end": "3772200"
  },
  {
    "text": "most big features would just go go against that and not add too much value",
    "start": "3772200",
    "end": "3778559"
  },
  {
    "text": "to language users and I'm not on the go team I don't know yeah this isn't that",
    "start": "3778559",
    "end": "3784960"
  },
  {
    "text": "by statistics you're talking David out of a job but let me just ask you this what about generics how did you feel",
    "start": "3784960",
    "end": "3790640"
  },
  {
    "text": "about that well I think you can guess how I felt about generics Matt I just I really like it when",
    "start": "3790640",
    "end": "3797359"
  },
  {
    "text": "there's one way to do things and I know it's well I know like we've grown past that I guess as as Developers um and I",
    "start": "3797359",
    "end": "3805160"
  },
  {
    "text": "wish we'd go back to it no I'm kidding but like um I do like that we're advancing and that things are more",
    "start": "3805160",
    "end": "3811319"
  },
  {
    "text": "abstract but I also like that go keeps you kind of close to it you do need to",
    "start": "3811319",
    "end": "3816400"
  },
  {
    "text": "know what a pointer is um if if you heard this podcast you know what a stack is important stuff like that so oh my",
    "start": "3816400",
    "end": "3824920"
  },
  {
    "text": "God I completely lost my train of thought well that's that's fun okay so but David you're not thinking of adding",
    "start": "3824920",
    "end": "3830760"
  },
  {
    "text": "any big features are you what do you think of this I was curious how the generics were",
    "start": "3830760",
    "end": "3836480"
  },
  {
    "text": "received there's talk about extending iterators to be more General and there's",
    "start": "3836480",
    "end": "3843640"
  },
  {
    "text": "some question about whether that wants Coes or not and Coes would not be go",
    "start": "3843640",
    "end": "3850400"
  },
  {
    "text": "routines because when you code up co- routines with go routines they're not fast enough I I do feel like that's a",
    "start": "3850400",
    "end": "3857359"
  },
  {
    "text": "feature I want is code routines so the thing is these are all features I want like I want I wanted generics before",
    "start": "3857359",
    "end": "3864480"
  },
  {
    "text": "they existed I was like oh my God I need generics U I don't have the privilege of using them just because we have to",
    "start": "3864480",
    "end": "3869640"
  },
  {
    "text": "support like really old goo versions but like I'm torn but this is still my onp",
    "start": "3869640",
    "end": "3875359"
  },
  {
    "text": "on poopular I stand behind it cool okay David I have several I",
    "start": "3875359",
    "end": "3880720"
  },
  {
    "text": "don't think they're as good as no new features but I mean as unpopular no not no new features by the way I think the",
    "start": "3880720",
    "end": "3887319"
  },
  {
    "text": "standard Library could use some new features and I think and I think like adding Max and",
    "start": "3887319",
    "end": "3895079"
  },
  {
    "text": "stuff isn't bad y this isn't a performance review for David no I'm sorry I add like I wanted to say this",
    "start": "3895079",
    "end": "3902240"
  },
  {
    "text": "but I wanted to be like I'm so sorry I'm so so sorry yeah please continue working on go you're doing a great",
    "start": "3902240",
    "end": "3907520"
  },
  {
    "text": "job I mean I'm not sure I mean one of my imp poopular opinions is more I think unpopular with the go team and it's kind",
    "start": "3907520",
    "end": "3913799"
  },
  {
    "text": "of like squirly and Technical but years ago I had a lot to do with Fortran uh my",
    "start": "3913799",
    "end": "3920359"
  },
  {
    "text": "adviser they referred to him as Dr Fortran and sounds like a sounds like an evil villain I interned for John bakus",
    "start": "3920359",
    "end": "3928359"
  },
  {
    "text": "oh wow that's cool that is cool and so I have a real soft spot for Fortran and",
    "start": "3928359",
    "end": "3933920"
  },
  {
    "text": "the thing that makes Fortran fast is like one tiny little thing and it's",
    "start": "3933920",
    "end": "3939640"
  },
  {
    "text": "usually true in programs and that has to do with when you would say pass a pair",
    "start": "3939640",
    "end": "3946720"
  },
  {
    "text": "of slices to a function for Tran says they don't you can pretend they overlap",
    "start": "3946720",
    "end": "3951760"
  },
  {
    "text": "if they overlap it's not for Tran and it's this interesting it's this interesting rule that you can't check",
    "start": "3951760",
    "end": "3957760"
  },
  {
    "text": "with syntax but if your code overlaps passes overlapping memory in parameters",
    "start": "3957760",
    "end": "3964680"
  },
  {
    "text": "to a function and it can tell then it's not Fortran so that that's a convenient way of dealing with all the bug reports",
    "start": "3964680",
    "end": "3971240"
  },
  {
    "text": "they say my code can tell that you did this and it says well that's fine but that's not a Fortran bug that's a bug in",
    "start": "3971240",
    "end": "3976920"
  },
  {
    "text": "some other language you're imagined go away but what this does is it lets you",
    "start": "3976920",
    "end": "3982720"
  },
  {
    "text": "do it lets you vectorization just willy-nilly all sorts of vectorization",
    "start": "3982720",
    "end": "3988039"
  },
  {
    "text": "Transformations and parallelization Transformations and reordering and and",
    "start": "3988039",
    "end": "3993079"
  },
  {
    "text": "this is sort of like the key to why for Tran is so fast and so part of me says",
    "start": "3993079",
    "end": "3999520"
  },
  {
    "text": "there's like these Shaggy Dog stories of you know all and it gets back to Stacks actually like the pain of inter language",
    "start": "3999520",
    "end": "4006079"
  },
  {
    "text": "calls and translating data between this language and that language and it's",
    "start": "4006079",
    "end": "4012000"
  },
  {
    "text": "never fun and it's always annoying and so if you just said we could make it go fast in go you would need if you did",
    "start": "4012000",
    "end": "4019720"
  },
  {
    "text": "this and it would need a lot of compiler work and it would be more employment for people like me which is great but you",
    "start": "4019720",
    "end": "4027440"
  },
  {
    "text": "could do this you could do this little Fortran change to the parameter rules and then you could make code go faster",
    "start": "4027440",
    "end": "4033839"
  },
  {
    "text": "and you know to you know to take this out of the previous Century the previous Millennium I'd say machine learning woo",
    "start": "4033839",
    "end": "4041480"
  },
  {
    "text": "woo um so that's my unpopular opinion and it's probably more unpopular with",
    "start": "4041480",
    "end": "4048359"
  },
  {
    "text": "the rest of the go team um yeah they probably understand it yes I'm afraid",
    "start": "4048359",
    "end": "4053520"
  },
  {
    "text": "that's the problem that's the other problem is to have an unpopular opinion that people don't understand quite",
    "start": "4053520",
    "end": "4058680"
  },
  {
    "text": "clever in a way another one you wrote down David which I quite liked was go",
    "start": "4058680",
    "end": "4063920"
  },
  {
    "text": "needs larger integer types int 128 int 256 int 512 what are you doing with all",
    "start": "4063920",
    "end": "4071160"
  },
  {
    "text": "these massive inss David it's well it's the processors",
    "start": "4071160",
    "end": "4076680"
  },
  {
    "text": "nowadays have all of these crazy extra instructions that take giant inputs and",
    "start": "4076680",
    "end": "4083760"
  },
  {
    "text": "giant operands and they encode this in C by you for whatever reason they chose",
    "start": "4083760",
    "end": "4090640"
  },
  {
    "text": "stupid names for their integer types and c and so when they had to go to these big integer types they had to pick even",
    "start": "4090640",
    "end": "4097359"
  },
  {
    "text": "stupider names and you use them and you have to in you have to include a special",
    "start": "4097359",
    "end": "4102440"
  },
  {
    "text": "include file and you pollute your code with these terrible terrible names just to and go could and have these",
    "start": "4102440",
    "end": "4109480"
  },
  {
    "text": "instructions as intrinsics and go would have a perfectly good name for the input types in 128 in",
    "start": "4109480",
    "end": "4116359"
  },
  {
    "text": "256 in 512 and so that's I think that would be fine and we we can implement",
    "start": "4116359",
    "end": "4123480"
  },
  {
    "text": "this we already handle 64-bit integers on 32 bit machines it's not a hard thing",
    "start": "4123480",
    "end": "4130159"
  },
  {
    "text": "in a compiler and then we could because people ask ask us things like well we really want to get at the intrinsics we",
    "start": "4130159",
    "end": "4136480"
  },
  {
    "text": "want to we want to do that and we just go around and around on the best way and",
    "start": "4136480",
    "end": "4142238"
  },
  {
    "text": "we don't have good types and so we'd have to do this hacky thing with struct",
    "start": "4142239",
    "end": "4147400"
  },
  {
    "text": "but that struct is special it's like oh just just say it an 128 there it's done",
    "start": "4147400",
    "end": "4156359"
  },
  {
    "text": "that reminds me of I think it Rob Pike who might have put up a proposal to change in and U to uh arbitrary",
    "start": "4156359",
    "end": "4162520"
  },
  {
    "text": "Precision I was like I like that I want some arbitrary Precision directly in my",
    "start": "4162520",
    "end": "4168238"
  },
  {
    "text": "language but it could work I think it would be interesting to look into",
    "start": "4168239",
    "end": "4174520"
  },
  {
    "text": "whether you had a default Behavior or a way to ask to compile code so that if",
    "start": "4174520",
    "end": "4180159"
  },
  {
    "text": "they overflowed there was an a counter proposal was that if you overflow your signed integers boom that's a panic it's",
    "start": "4180159",
    "end": "4188278"
  },
  {
    "text": "a little bit of a security issue but it might not be a big one for go because the other Lang I mean there have been",
    "start": "4188279",
    "end": "4195840"
  },
  {
    "text": "exploits that involved integer overflow but they also made use of haha those guys don't check their array bounds so",
    "start": "4195840",
    "end": "4202719"
  },
  {
    "text": "they thought they checked their array bounds but we overflowed their integer we get to have fun and go would just say",
    "start": "4202719",
    "end": "4208400"
  },
  {
    "text": "yeah no we checked your array bounds get out of here right so that might not be necessary but that was a counter",
    "start": "4208400",
    "end": "4213560"
  },
  {
    "text": "proposal I think you know they would not go on the stack yeah I mean maybe sometimes they would go on the stack but",
    "start": "4213560",
    "end": "4219560"
  },
  {
    "text": "then they'd have to have an option to not go on the stack true yeah well on",
    "start": "4219560",
    "end": "4224679"
  },
  {
    "text": "that bombshell and thank you David for bringing us back to Stacks then and tying a neat bow on this yes thank you",
    "start": "4224679",
    "end": "4232320"
  },
  {
    "text": "so much yarden thank you so much for the all the community work that you do",
    "start": "4232320",
    "end": "4237600"
  },
  {
    "text": "goeran Israel uh anyone in that part of the world wants to go and meet Gophers",
    "start": "4237600",
    "end": "4242760"
  },
  {
    "text": "you know get on board and also the women who go Israel group like you know something great about the go community",
    "start": "4242760",
    "end": "4248800"
  },
  {
    "text": "and it's people like you putting all this work in and it it doesn't we if you don't do it you don't don't really know",
    "start": "4248800",
    "end": "4254159"
  },
  {
    "text": "how much work it is so you know I've glimpsed the amount of work that people put into this so you know thank you so",
    "start": "4254159",
    "end": "4260760"
  },
  {
    "text": "much for that um David Chase obviously all your work on the go team you know",
    "start": "4260760",
    "end": "4266679"
  },
  {
    "text": "what can we say but thank you so much for all that stuff it's great to have you here Chris I've got nothing to thank",
    "start": "4266679",
    "end": "4272000"
  },
  {
    "text": "you for apart from showing up and being yourself and thank you to our listeners",
    "start": "4272000",
    "end": "4277040"
  },
  {
    "text": "for listening because honestly without you this would be genuinely pointless I",
    "start": "4277040",
    "end": "4282320"
  },
  {
    "text": "was MIA thank you to me as well I'll say it no one else was going to step up thank you very much we'll see you next",
    "start": "4282320",
    "end": "4288480"
  },
  {
    "text": "time on go time okay I'll say it thank you Matt for",
    "start": "4288480",
    "end": "4296360"
  },
  {
    "text": "showing up and being yourself go time wouldn't be the same without you better maybe but not the same and to you dear",
    "start": "4296360",
    "end": "4302920"
  },
  {
    "text": "listener we would love for you to subscribe now if you haven't already and please do check out changelog news it's",
    "start": "4302920",
    "end": "4310000"
  },
  {
    "text": "the software world's best Weekly News brief plus newsletter it might be the software world's only Weekly News brief",
    "start": "4310000",
    "end": "4316400"
  },
  {
    "text": "plus newsletter but it's the best too check it out at Chang log.com newws and",
    "start": "4316400",
    "end": "4321639"
  },
  {
    "text": "wherever you get your podcasts thank you once again to our partners fast.com",
    "start": "4321639",
    "end": "4326880"
  },
  {
    "text": "fly.io and typ sense.org and to break master cylinder for hooking us up with",
    "start": "4326880",
    "end": "4332920"
  },
  {
    "text": "the best beats and all the biz that's it I'm done but we'll talk to you again next time on go",
    "start": "4332920",
    "end": "4340239"
  },
  {
    "text": "time [Music]",
    "start": "4342480",
    "end": "4352319"
  },
  {
    "text": "[Music] love",
    "start": "4360050",
    "end": "4366520"
  }
]