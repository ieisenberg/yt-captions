[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "okay so my name's turin i work for a start-up called steerer and i'm also the tech lead on a project called the open policy agent and today I'm gonna be",
    "start": "240",
    "end": "7620"
  },
  {
    "text": "talking about how you can enforce bespoke policies and kubernetes and so the focus of this talk is gonna be on how you can take admission controllers",
    "start": "7620",
    "end": "13980"
  },
  {
    "text": "in kubernetes and use them to enforce all kinds of custom policies in their organization specific in the matter to",
    "start": "13980",
    "end": "20220"
  },
  {
    "text": "your your companies so this isn't overview of what I'm going to talk about first I'm gonna get a little bit of",
    "start": "20220",
    "end": "25740"
  },
  {
    "start": "22000",
    "end": "168000"
  },
  {
    "text": "background on how we think of policy then I'm gonna introduce like an example scenario where you'd why not enforce",
    "start": "25740",
    "end": "31740"
  },
  {
    "text": "some some custom policy and then I'm gonna show how you can do that with admission control and then I'm going to introduce the open policy agent project",
    "start": "31740",
    "end": "37590"
  },
  {
    "text": "at the end so when we're talking about policy you know we're talking about sets",
    "start": "37590",
    "end": "42809"
  },
  {
    "text": "of rules that govern how the system should behave so these could be authorization rules or admission control rules or network policies and so on and",
    "start": "42809",
    "end": "50309"
  },
  {
    "text": "the interesting thing about policies is that while they apply to every single organization pretty much on the planet they're also vital to their long-term",
    "start": "50309",
    "end": "56910"
  },
  {
    "text": "success because they codify important requirements around things like cost and performance and security and internal",
    "start": "56910",
    "end": "62489"
  },
  {
    "text": "convention and so on the challenge with enforcing policy obviously is that they",
    "start": "62489",
    "end": "67740"
  },
  {
    "text": "apply across the stack they're typically very specific to organizations and they often sort of develop organically and",
    "start": "67740",
    "end": "73470"
  },
  {
    "text": "then evolve over time and so they're hard to predict and they're hard to plan for a lot of the time now when it comes",
    "start": "73470",
    "end": "79170"
  },
  {
    "text": "to actually enforcing policy the the approaches that are out there kind of are all over the place so you find a lot",
    "start": "79170",
    "end": "84780"
  },
  {
    "text": "of companies that just rely on tribal knowledge and wiki's and Docs and spreadsheets to actually enforce policy so they write it down on a wiki and they",
    "start": "84780",
    "end": "90810"
  },
  {
    "text": "hope it gets it enforced or you know when you have a policy question you have to go and ask somebody on another team",
    "start": "90810",
    "end": "96420"
  },
  {
    "text": "and they know how to like set the configuration just right to secure the system at the other end of the spectrum",
    "start": "96420",
    "end": "101759"
  },
  {
    "text": "a lot of companies start by like hard coding policies decisions into software and while that works initially the the",
    "start": "101759",
    "end": "108329"
  },
  {
    "text": "cost of that overtime goes up quite a bit because not only are the policies harder to understand because they're so tightly coupled with the rest of the",
    "start": "108329",
    "end": "114119"
  },
  {
    "text": "business logic in the system but they're also very expensive to change because you need to do like an entire software",
    "start": "114119",
    "end": "119430"
  },
  {
    "text": "release in order to get it changes out and and so this isn't necessarily a new",
    "start": "119430",
    "end": "124439"
  },
  {
    "text": "space there are lots of policy solutions out there but when you dig into them a lot of the time what you find is that they don't have the core kind of",
    "start": "124439",
    "end": "130860"
  },
  {
    "text": "expressiveness that you need to say what you want and you policies so you can't express that you can write the logic that you want you",
    "start": "130860",
    "end": "136480"
  },
  {
    "text": "don't have access to the data or the context that you need to make policy decisions you can't even necessarily generate the",
    "start": "136480",
    "end": "141579"
  },
  {
    "text": "kinds of policy decisions that matter right so a lot of the time you need to express more than just like is this thing allowed or denied you want to say",
    "start": "141579",
    "end": "147129"
  },
  {
    "text": "what fields are allowed to be displayed or you know what are the one of the annotations that have to be enforced or",
    "start": "147129",
    "end": "152530"
  },
  {
    "text": "applied to objects when they're created and then moreover a lot of the time the languages that they give you are not",
    "start": "152530",
    "end": "157629"
  },
  {
    "text": "particularly sophisticated and so you can't take policies and split them up and create reusable functions and rules",
    "start": "157629",
    "end": "164230"
  },
  {
    "text": "and so on that you can share it's really your throughout your policy codebase so",
    "start": "164230",
    "end": "169659"
  },
  {
    "start": "168000",
    "end": "223000"
  },
  {
    "text": "I want to sort of motivate this discussion around with an example scenario and so we've got this company",
    "start": "169659",
    "end": "175060"
  },
  {
    "text": "Acme Corp and they've got engineers and so Alice is a platform engineer she's responsible for setting up the the",
    "start": "175060",
    "end": "181269"
  },
  {
    "text": "kubernetes clusters and making sure they're secure and then bob is a bob as an application developer and he has to",
    "start": "181269",
    "end": "187120"
  },
  {
    "text": "like ship features as quickly as possible and sometimes those features don't work the way that he thought they",
    "start": "187120",
    "end": "192280"
  },
  {
    "text": "would and so he needs to be able to SSH or exec into those containers and run some commands to figure out what's going on the problem is that bob cannot be",
    "start": "192280",
    "end": "199870"
  },
  {
    "text": "trusted okay he has introduced too many vulnerabilities into the system he's brought down the system too many times and so Alice really needs a way to say",
    "start": "199870",
    "end": "206859"
  },
  {
    "text": "Bob cannot run kashchei cannot get shell access to containers that are you know",
    "start": "206859",
    "end": "212889"
  },
  {
    "text": "privileged security context in a certain namespace that happens to be running all their production workloads right so the",
    "start": "212889",
    "end": "219099"
  },
  {
    "text": "question is like what can Alice actually do to enforce this policy today and so over time kubernetes has has developed a",
    "start": "219099",
    "end": "226479"
  },
  {
    "start": "223000",
    "end": "338000"
  },
  {
    "text": "bunch of features as this matured around extensibility and so they've added lots of web hooks for things like authorization and authentication and",
    "start": "226479",
    "end": "234159"
  },
  {
    "text": "image policies and scheduling and all these different things but then in 1.7 they added a great feature called the",
    "start": "234159",
    "end": "241629"
  },
  {
    "text": "dynamic admission control and that's what we're gonna focus on here and so what that does is it allows you to decouple policy decisions and policy",
    "start": "241629",
    "end": "247180"
  },
  {
    "text": "enforcement from from kubernetes itself going forward there's there's a bunch of",
    "start": "247180",
    "end": "252220"
  },
  {
    "text": "other great features that are coming like you're going to have mutating web hooks these features are going to bethe and so that that's that's really",
    "start": "252220",
    "end": "258010"
  },
  {
    "text": "exciting so for people that don't know about admission control already it's",
    "start": "258010",
    "end": "264070"
  },
  {
    "text": "this it's this stage that runs whenever requests received by the API server so after a request is authenticated so whenever for",
    "start": "264070",
    "end": "271260"
  },
  {
    "text": "example Bob runs coop CTL exec that request that sends a request to the API server and that request has to be",
    "start": "271260",
    "end": "276780"
  },
  {
    "text": "authenticated and it has to be authorized using like role based access control and then it has to pass through",
    "start": "276780",
    "end": "281850"
  },
  {
    "text": "a series of admission controllers that decide what to do with it and so before",
    "start": "281850",
    "end": "287430"
  },
  {
    "text": "any request affects SC D or any clients get notified about a state change in the system these admission controllers run",
    "start": "287430",
    "end": "293640"
  },
  {
    "text": "and the goal of these admission controllers is to enforce various kinds of policies around resource management and security and defaulting and semantic",
    "start": "293640",
    "end": "301080"
  },
  {
    "text": "validation and so on and so each each resource are started each admission controller gets a chance to either just",
    "start": "301080",
    "end": "308220"
  },
  {
    "text": "allow the request or the change modify the change and pass it on or deny it and",
    "start": "308220",
    "end": "314820"
  },
  {
    "text": "so the difference between authorization and admission control what an important difference is that in in the authorization or authorizer framework if",
    "start": "314820",
    "end": "321660"
  },
  {
    "text": "a single authorizer allows the request then it'll be allowed however if a single admission controller denies the",
    "start": "321660",
    "end": "326850"
  },
  {
    "text": "request the request gets denied so it's like the last place where you can enforce policy in kubernetes before",
    "start": "326850",
    "end": "333240"
  },
  {
    "text": "resources are allowed into the cluster are created in the cluster so it's very important for policy enforcement now",
    "start": "333240",
    "end": "339300"
  },
  {
    "text": "before 1.7 this was sort of the state of things so you had to basically statically compiled and configure your",
    "start": "339300",
    "end": "345570"
  },
  {
    "text": "admission controllers inside of the API server and so over time like more and more admission controllers got added to",
    "start": "345570",
    "end": "351210"
  },
  {
    "text": "kubernetes and so you'd see like a handful of them added in each release and some of them are very simple some of",
    "start": "351210",
    "end": "356250"
  },
  {
    "text": "them are more complicated and some of them are very specific to certain certain use cases and so this is like a list of all these different ones that",
    "start": "356250",
    "end": "361950"
  },
  {
    "text": "you see in the code bases in in tube and an open shift today moreover in order to configure these",
    "start": "361950",
    "end": "367860"
  },
  {
    "text": "things because they're not always just like static logic you need to provide configuration to them for certain things you had to do that by reconfiguring",
    "start": "367860",
    "end": "374220"
  },
  {
    "text": "kubernetes you had to go and change the command line arguments that you use to start the API server with and then you have to like provide static",
    "start": "374220",
    "end": "380190"
  },
  {
    "text": "configuration files that you have to set up when you're bootstrapping the cluster and so that made it really hard to change the config on-the-fly and so for",
    "start": "380190",
    "end": "387510"
  },
  {
    "text": "example if Alice wants to implement her Bob protection policy she would first basically probably take kubernetes fork",
    "start": "387510",
    "end": "393300"
  },
  {
    "text": "it into her private github repo for for Acme Corp she's going to implement the policy inside of the admission control",
    "start": "393300",
    "end": "399150"
  },
  {
    "text": "framework and then she would have to go and build publish and upgrade kubernetes itself just to enforce this like relatively",
    "start": "399150",
    "end": "406380"
  },
  {
    "text": "simple policy right and so that's just that's not what we want the good news is",
    "start": "406380",
    "end": "411990"
  },
  {
    "text": "that in 1.7 now we have these external admission web hooks that you can use to running admission controllers on top of",
    "start": "411990",
    "end": "417420"
  },
  {
    "text": "kubernetes itself and so the web hooks act just like regular admission controllers they get a chance to allow or deny incoming write requests before",
    "start": "417420",
    "end": "424500"
  },
  {
    "text": "EDD is updated and before you know any clients are notified and so you're able to externalize or decouple policy",
    "start": "424500",
    "end": "430530"
  },
  {
    "text": "enforcement from the core of kubernetes now the really nice thing or one really nice thing about these web hooks is that you can actually configure them",
    "start": "430530",
    "end": "436350"
  },
  {
    "text": "dynamically through the kubernetes api so you can you can you can deploy your",
    "start": "436350",
    "end": "441990"
  },
  {
    "text": "web hook and then have the configuration change as the requirements for the web hook change now the way that you",
    "start": "441990",
    "end": "448890"
  },
  {
    "text": "actually configure them you base this is a just a high-level kind of view of the configuration but you basically specify",
    "start": "448890",
    "end": "453900"
  },
  {
    "text": "a bunch of match operations to say okay for example you know I want my web book to receive create requests on pods and",
    "start": "453900",
    "end": "459900"
  },
  {
    "text": "you know delete requests and services and then whenever whenever a request",
    "start": "459900",
    "end": "465180"
  },
  {
    "text": "comes in that effects that creates a pod or delete the service it triggers like a query or a call out to the admission",
    "start": "465180",
    "end": "470460"
  },
  {
    "text": "controller to choose whether or not to allow or deny the request and then you can also put wildcards into the into the",
    "start": "470460",
    "end": "476880"
  },
  {
    "text": "request so if you want to say just you know call me on any create delete or update for any kind of resource you can",
    "start": "476880",
    "end": "482010"
  },
  {
    "text": "also do that so it's kind of flexible it's nice now the important thing here is that the the admission control web",
    "start": "482010",
    "end": "488340"
  },
  {
    "text": "hooks give you all the context or the input the data that you need in order to make policy decisions over the resources",
    "start": "488340",
    "end": "493650"
  },
  {
    "text": "that are creating kubernetes so they provide the name of the operation the the user of the group and so on",
    "start": "493650",
    "end": "498840"
  },
  {
    "text": "providing or performing the operation as well as a representation of the like of the entire representation of the object itself so if you're working with author",
    "start": "498840",
    "end": "505710"
  },
  {
    "text": "authorization or authorizers you don't get this this full representation of the object you only get the name of the",
    "start": "505710",
    "end": "511080"
  },
  {
    "text": "object the type of the object and so on now so in this case though Alice has all",
    "start": "511080",
    "end": "516419"
  },
  {
    "text": "the information she needs in order to actually implement this policy to protect the system against Bob and so",
    "start": "516420",
    "end": "523169"
  },
  {
    "text": "she would write a web hook basically she could write a web hook now that makes a decision about whether or not to allow these connect requests and and then that",
    "start": "523170",
    "end": "530610"
  },
  {
    "text": "decision would result in a response being sent back from the web hook to the API server that says that you know this request",
    "start": "530610",
    "end": "536400"
  },
  {
    "text": "should be denied and then she can include a message that tells Bob why he's being why he's being denied when he",
    "start": "536400",
    "end": "541410"
  },
  {
    "text": "runs coop cuddle exec and so the test says it's important to know that if any",
    "start": "541410",
    "end": "546450"
  },
  {
    "text": "of the web hooks return a denial then the request gets rejected right so it's not doesn't behave like an authorizer",
    "start": "546450",
    "end": "552200"
  },
  {
    "start": "552000",
    "end": "759000"
  },
  {
    "text": "okay so I figured we would actually look at how you would go about implementing one of these web hooks so I was said I",
    "start": "552200",
    "end": "559410"
  },
  {
    "text": "was doing a dry run of this demo right before the talk and then my laptop crashed and so hopefully this goes well",
    "start": "559410",
    "end": "568160"
  },
  {
    "text": "okay so the first thing you need to do is create a service that the API server can use to look up your web hook that's",
    "start": "575710",
    "end": "581470"
  },
  {
    "text": "running on top of kubernetes so we're gonna go ahead and create that and then we're gonna basically create a",
    "start": "581470",
    "end": "587320"
  },
  {
    "text": "deployment that runs our web hook and so this is pretty standard it just identifies the the container image",
    "start": "587320",
    "end": "592480"
  },
  {
    "text": "that's run it that's got the web hook and then it also has to specify the the TLS certificates that the API server",
    "start": "592480",
    "end": "599860"
  },
  {
    "text": "will use to authenticate the the remote the endpoint so we're gonna go ahead and",
    "start": "599860",
    "end": "604959"
  },
  {
    "text": "ploy the admission controller now on top of kubernetes and then we can see that it's brought up immediately so that's",
    "start": "604959",
    "end": "612310"
  },
  {
    "text": "great and then we can see that the web hook it has actually registered itself",
    "start": "612310",
    "end": "617950"
  },
  {
    "text": "as an external admission controller in the API server so this is that configuration that controls whether or",
    "start": "617950",
    "end": "623110"
  },
  {
    "text": "not the web hook gets called so you can ignore this big certificate bundle at the top the the interesting bit down here is that it specified rules that say",
    "start": "623110",
    "end": "629950"
  },
  {
    "text": "okay for any operation on any sub resource of a pod invoke this this web hook and ask whether or not the",
    "start": "629950",
    "end": "636040"
  },
  {
    "text": "operation should be allowed or denied okay",
    "start": "636040",
    "end": "641800"
  },
  {
    "text": "so let's take a look at how this is actually implemented so this is the go code that actually implements a web hook",
    "start": "641800",
    "end": "646839"
  },
  {
    "text": "so you first you have just a main function where you you do the standard boilerplate of loading the kubernetes",
    "start": "646839",
    "end": "651880"
  },
  {
    "text": "config to talk to the API server and then you just start a web server that serves the web hook endpoint during",
    "start": "651880",
    "end": "661540"
  },
  {
    "text": "startup you need to register the web hook somehow so you can either do this in code or you can do this with configuration I've chosen to do with",
    "start": "661540",
    "end": "666790"
  },
  {
    "text": "code just cuz it makes it as soon as the web hook is deployed it registers itself it says you know please call me whenever something happens and so I'm just",
    "start": "666790",
    "end": "673690"
  },
  {
    "text": "specifying that configuration here using the go client library okay",
    "start": "673690",
    "end": "678970"
  },
  {
    "text": "and so then we actually get down to the business logic of the of the controller and so here we're basically checking",
    "start": "678970",
    "end": "684160"
  },
  {
    "text": "whether the incoming request is performing a connect operation on the production namespace and we're basically",
    "start": "684160",
    "end": "690430"
  },
  {
    "text": "looking up whether the pod that they were trying to get over the container and the pod that you're finding connect to is running in a privileged security",
    "start": "690430",
    "end": "696040"
  },
  {
    "text": "context and if it is then we log it and then we return a denial back to back to the back to the API server and then the",
    "start": "696040",
    "end": "703750"
  },
  {
    "text": "rest of this code is basically just setting up the the the web server that you need in order to accept these requests",
    "start": "703750",
    "end": "709150"
  },
  {
    "text": "from from kubernetes okay so that's about 150 lines ago or so okay so now",
    "start": "709150",
    "end": "717520"
  },
  {
    "text": "now we're gonna test this policy out so we're gonna create a privilege container that's just gonna run an Alpine image and what we'll do is we'll first create",
    "start": "717520",
    "end": "724210"
  },
  {
    "text": "it in the default namespace and then we'll create another one in the in the production namespace alright and so then",
    "start": "724210",
    "end": "730630"
  },
  {
    "text": "if we try to SSR exec into the default namespace it works as we'd expect but",
    "start": "730630",
    "end": "737050"
  },
  {
    "text": "hopefully this works this is what broke right before the talk if we try to log into the production namespace we get",
    "start": "737050",
    "end": "743380"
  },
  {
    "text": "this rejection back from from the API server and we get the message that was set by the admission controller okay so",
    "start": "743380",
    "end": "750970"
  },
  {
    "text": "the demo gods were kind to me this time and yeah everybody should clap for that",
    "start": "750970",
    "end": "756780"
  },
  {
    "text": "okay all right so if you start implementing these web hooks there's a",
    "start": "756990",
    "end": "763930"
  },
  {
    "start": "759000",
    "end": "990000"
  },
  {
    "text": "few things you probably want to keep in mind so the number one thing is that you really need to be careful with the dependencies that you introduce in the",
    "start": "763930",
    "end": "769780"
  },
  {
    "text": "web hooks because every single call coming into the API server is gonna be subject to whatever latency or",
    "start": "769780",
    "end": "775240"
  },
  {
    "text": "availability consider constraints you put on the on the on the web hook and so",
    "start": "775240",
    "end": "780400"
  },
  {
    "text": "you really want to be careful about that the other thing you want to pay attention to is that you don't want to be performing side effects if possible",
    "start": "780400",
    "end": "785830"
  },
  {
    "text": "at all costs inside of these admission controllers because just because if your admission controller decides to allow the request it doesn't necessarily mean",
    "start": "785830",
    "end": "792040"
  },
  {
    "text": "that an admission girl or later in the chain is going to allow it and so you don't necessarily know whether or not the quests are being allowed or denied",
    "start": "792040",
    "end": "797710"
  },
  {
    "text": "so you want to you want to be careful about that the second thing sort of big thing that you want to pay attention to or be aware",
    "start": "797710",
    "end": "803500"
  },
  {
    "text": "of is that right now the API server sends the internal representation of kubernetes objects over the wire and so",
    "start": "803500",
    "end": "809770"
  },
  {
    "text": "this means that it's a little bit trickier to get the objects to deserialize if you're using the client go framework and and they just won't",
    "start": "809770",
    "end": "816490"
  },
  {
    "text": "look exactly like the objects that you see when you when you do API requests against kubernetes so you all the date",
    "start": "816490",
    "end": "822340"
  },
  {
    "text": "same data is there it's just that the format of the data is slightly different a sort of thing that's sort of better or",
    "start": "822340",
    "end": "829390"
  },
  {
    "text": "getting better is that right now the API server fails open if the web hook call fails right so if there's a network partition or whatever and and the web or",
    "start": "829390",
    "end": "836470"
  },
  {
    "text": "the web book crashes or something like that then that failures going to that errors gonna go back to the API server and the APS are just going to allow the",
    "start": "836470",
    "end": "842080"
  },
  {
    "text": "request now this has been designed to be configurable from the start but they didn't allow you to actually set that",
    "start": "842080",
    "end": "847300"
  },
  {
    "text": "configuration until it's gonna come in 1.9 so that'll make this much more",
    "start": "847300",
    "end": "852760"
  },
  {
    "text": "applicable another thing to watch out for is that you need to actually serve or today you need to serve the webhook",
    "start": "852760",
    "end": "859420"
  },
  {
    "text": "endpoint from the from the root path so you can't like embed this in another in another API in another web server you",
    "start": "859420",
    "end": "865899"
  },
  {
    "text": "need to have your own you need to own the IP port but that's also becoming configurable in 1.9 so that's getting",
    "start": "865899",
    "end": "871990"
  },
  {
    "text": "better these things are improving the last thing I'll point out is that actually I think there's been a couple talks on client go so far but the the",
    "start": "871990",
    "end": "878529"
  },
  {
    "text": "venturing experience of getting client go to run inside from work inside of your project has improved a lot over the",
    "start": "878529",
    "end": "884079"
  },
  {
    "text": "last six months or so and so the first time I did it is there a question there yeah yeah so the question is whether or",
    "start": "884079",
    "end": "896740"
  },
  {
    "text": "not you need to use the kubernetes code in order to make these admission control decisions and you don't like you can",
    "start": "896740",
    "end": "902920"
  },
  {
    "text": "just receive these webhook calls as JSON and then do whatever you need to do with them but this but yeah you're getting",
    "start": "902920",
    "end": "909279"
  },
  {
    "text": "you're not getting the the versioned API objects over the wire okay yeah so that",
    "start": "909279",
    "end": "914350"
  },
  {
    "text": "I just want to point out that the client go experiences has gotten a lot better I had a lot of trouble getting it to work a few months ago the last time I did",
    "start": "914350",
    "end": "920890"
  },
  {
    "text": "this last week it was like super smooth so that's that's excellent okay so you know these web hooks and",
    "start": "920890",
    "end": "927190"
  },
  {
    "text": "other features that are part of dynamic admission control like initializers have sort of laid the groundwork for extensible policy enforcement which is",
    "start": "927190",
    "end": "934240"
  },
  {
    "text": "which is great because you don't want to have to go and modify kubernetes itself whenever you want to enforce some new policy inside of your organization the",
    "start": "934240",
    "end": "941500"
  },
  {
    "text": "reason for that is that these policy decisions have been decoupled from the enforcement point right so you take the",
    "start": "941500",
    "end": "946570"
  },
  {
    "text": "you take the policy decision about whether or not Bob should be able to connect to a container and you you offload that to this list webhook that's",
    "start": "946570",
    "end": "952510"
  },
  {
    "text": "running somewhere you don't bake it into your into your API server no they don't",
    "start": "952510",
    "end": "959350"
  },
  {
    "text": "so they're they're just it's just a it's just an API that you have to implement inside of your process the question is whether or not you need to implement",
    "start": "959350",
    "end": "965050"
  },
  {
    "text": "these and go and the answer is you don't but that's a great question because you",
    "start": "965050",
    "end": "970480"
  },
  {
    "text": "know I I think that we can probably actually do a little bit better than this right in the same way that when you like configure a firewall or something",
    "start": "970480",
    "end": "975940"
  },
  {
    "text": "like you don't write a bunch of C code to do that maybe we don't want to write a bunch of go code every single time",
    "start": "975940",
    "end": "980950"
  },
  {
    "text": "there's this new policy that we want so what I think we really want and what everybody should want is a declarative way of specifying these these kinds of",
    "start": "980950",
    "end": "987670"
  },
  {
    "text": "access controls in their in their clusters but obviously that this hasn't really been done so far and there's a",
    "start": "987670",
    "end": "994600"
  },
  {
    "start": "990000",
    "end": "1107000"
  },
  {
    "text": "few reasons for that but one of the reasons is because this is the type of thing you have to write policy over right it's this deeply nested data",
    "start": "994600",
    "end": "1001260"
  },
  {
    "text": "strike these deeply nested data structures that have all this embedding and these collections and and they have",
    "start": "1001260",
    "end": "1006570"
  },
  {
    "text": "these domain models that are incredibly complex sophisticated and complex so for example you know a pod has like 35",
    "start": "1006570",
    "end": "1013020"
  },
  {
    "text": "attributes or something like that that are deeply nested and then the metadata adds another 10 attributes right and so if you try to imagine how you would",
    "start": "1013020",
    "end": "1019010"
  },
  {
    "text": "apply like a firewall rule to this it doesn't definitely make sense when you work with firewall rules you're thinking about like five or seven tuples you know",
    "start": "1019010",
    "end": "1025500"
  },
  {
    "text": "this is like a 500 tuple or something like that so it's really it's really kind of tricky to think about how you would do this declaratively but this is",
    "start": "1025500",
    "end": "1032910"
  },
  {
    "text": "where what I'm interested in and what a lot of people are interested in and so if you had it as a solution for this that was declarative this is what it",
    "start": "1032910",
    "end": "1038069"
  },
  {
    "text": "could look like for example so first of all you're gonna need some way to reference these deeply nested data",
    "start": "1038069",
    "end": "1043470"
  },
  {
    "text": "structures that are inside of the JSON right so you want some way to dot into that JSON and refer to deeply nested",
    "start": "1043470",
    "end": "1050070"
  },
  {
    "text": "values the next thing you're gonna probably want is some sort of variable some way to have intermediate variables",
    "start": "1050070",
    "end": "1056220"
  },
  {
    "text": "so you don't have to like repeat these deeply nested paths all over the place and then you're also going to need some way to iterate right you're gonna need",
    "start": "1056220",
    "end": "1062250"
  },
  {
    "text": "somewhere to walk over for example the containers in in a pod to check whether or not the image is is what you want or",
    "start": "1062250",
    "end": "1068520"
  },
  {
    "text": "whether it's got a privileged security context and then once you have that you",
    "start": "1068520",
    "end": "1074460"
  },
  {
    "text": "need some way to actually express assertions write or write policies or you know have logic that decides whether",
    "start": "1074460",
    "end": "1079500"
  },
  {
    "text": "or not something should happen and then once you have that logic you're gonna want some way to share that right you're not gonna have to repeat that all over",
    "start": "1079500",
    "end": "1085170"
  },
  {
    "text": "the place and so you just need some way to wrap that up and share it and reuse it and then you finally you need some way to kind of take all of that together",
    "start": "1085170",
    "end": "1091200"
  },
  {
    "text": "and and build policies out of it and so for example we could say that given the incoming review you know if the user is",
    "start": "1091200",
    "end": "1098309"
  },
  {
    "text": "Bob and the operation is connect and the namespace is production and they can there's a container in that pod that's",
    "start": "1098309",
    "end": "1103530"
  },
  {
    "text": "privileged and deny it right we don't want Bob breaking the system and so this",
    "start": "1103530",
    "end": "1108660"
  },
  {
    "text": "is exactly what we to build the open policy agent for so oppa is an open-source general-purpose",
    "start": "1108660",
    "end": "1114240"
  },
  {
    "text": "policy engine and what that means that you can take it and apply it in any system at any layer of the stack and so",
    "start": "1114240",
    "end": "1120420"
  },
  {
    "text": "the way this works is that you basically offload policy decisions from your service so your service provides it",
    "start": "1120420",
    "end": "1126150"
  },
  {
    "text": "executes a policy query and it provides a bunch of input like a pod or a deployment or a service and then it gets",
    "start": "1126150",
    "end": "1132090"
  },
  {
    "text": "a policy decision back which may be you know do not allow this pod to run or here are the things that need to be",
    "start": "1132090",
    "end": "1137940"
  },
  {
    "text": "changed in the pod and so on so if the core of OPA is this high-level declarative language that we call Rago",
    "start": "1137940",
    "end": "1143550"
  },
  {
    "text": "and what Rago gives you is the ability to write policies to codify policy to answer questions like is this user",
    "start": "1143550",
    "end": "1148950"
  },
  {
    "text": "allowed to perform this operation on this resource or you know what cluster should this workload be deployed do or",
    "start": "1148950",
    "end": "1154140"
  },
  {
    "text": "what clusters rather should this workload be deployed to or what annotations need to be set on the objects when they're created and so the",
    "start": "1154140",
    "end": "1160230"
  },
  {
    "text": "neat thing about Rago is that you're not limited to just boolean policy decisions like yes or no allowed and I you can actually express decisions that are like",
    "start": "1160230",
    "end": "1166980"
  },
  {
    "text": "collections of values they're actually just arbitrary JSON data open itself is",
    "start": "1166980",
    "end": "1173130"
  },
  {
    "text": "written in go and you can take it you can use it as a library or a daemon and so the idea is that it's meant to be as",
    "start": "1173130",
    "end": "1178710"
  },
  {
    "text": "lightweight as possible so it stores all the policies and data in memory that it uses to do policy evaluation and then it",
    "start": "1178710",
    "end": "1183990"
  },
  {
    "text": "doesn't introduce any kind of runtime dependencies so there's no external database that it has to connect to or any external service that it has to",
    "start": "1183990",
    "end": "1189540"
  },
  {
    "text": "reach out to when it when you've got it deployed so it's very easy to deploy when you're using it on top of kubernetes you can actually just load",
    "start": "1189540",
    "end": "1195450"
  },
  {
    "text": "all your policies and it's config maps and I'll show that in a minute in addition to the sort of core evaluation",
    "start": "1195450",
    "end": "1201600"
  },
  {
    "text": "engine that gives you the the policy parser and compiler and interpreter we also provide a bunch of tooling around",
    "start": "1201600",
    "end": "1206880"
  },
  {
    "text": "to help you build test and debug your policies so for example there's an interactive shell that you can use to develop and experiment with policies and",
    "start": "1206880",
    "end": "1213450"
  },
  {
    "text": "write queries there's a test framework and a test runner that you can use so you can actually unit test your policies and verify that they're doing what you",
    "start": "1213450",
    "end": "1219180"
  },
  {
    "text": "think they should be doing and then there's a bunch of debugging functionality so you can trace the evaluation of policy and understand like",
    "start": "1219180",
    "end": "1224490"
  },
  {
    "text": "why it's returning a denial for this particular user or this particular pod or this particular deployment and then",
    "start": "1224490",
    "end": "1231210"
  },
  {
    "text": "lastly you know we have a growing community of people that are using it so the project itself is sponsored by steerer the company that I work for as",
    "start": "1231210",
    "end": "1236940"
  },
  {
    "text": "well as Google firebase we have a bunch of users we talked on Wednesday with Netflix about how they're using it to do",
    "start": "1236940",
    "end": "1242220"
  },
  {
    "text": "authorization across stock in HTTP API Zanjeer RPC and ssh and Kafka we've also got other users",
    "start": "1242220",
    "end": "1248160"
  },
  {
    "text": "they're using it for kubernetes and terraform and more and then we've got a bunch of integrations that you can use across projects like sto and kubernetes",
    "start": "1248160",
    "end": "1255480"
  },
  {
    "text": "and terraform and Pam and AWS and so on so you don't have to actually start from scratch if you want to use open to enforce policies you can use some of",
    "start": "1255480",
    "end": "1261120"
  },
  {
    "text": "these integrations out-of-the-box to enforce all kinds of custom policies inside of your organization's okay so",
    "start": "1261120",
    "end": "1269400"
  },
  {
    "text": "let's let's have a look at how this actually works okay this is the part I",
    "start": "1269400",
    "end": "1275040"
  },
  {
    "text": "really want to go what go go well ok so first I'm gonna create a namespace to deploy open into and then I'm gonna",
    "start": "1275040",
    "end": "1281190"
  },
  {
    "text": "create a similar service like we did before for the for the other admission controller and then I'm gonna create a deployment for open itself and I'm gonna",
    "start": "1281190",
    "end": "1288240"
  },
  {
    "text": "wait for open to start up and so it's there it's already running that's great",
    "start": "1288240",
    "end": "1293390"
  },
  {
    "text": "and so the next thing I can do is check to see if opens registered and so you can see here that it's registered and",
    "start": "1293390",
    "end": "1299880"
  },
  {
    "text": "it's actually saying give me all requests across all API groups versions",
    "start": "1299880",
    "end": "1305550"
  },
  {
    "text": "operations and resources and you can see that like the failure policy is actually ignore so this is what's changing in 1.9",
    "start": "1305550",
    "end": "1311340"
  },
  {
    "text": "so this will be configurable so you can say don't ignore failures if the endpoint crashes or something in a bad",
    "start": "1311340",
    "end": "1316470"
  },
  {
    "text": "treat that is as a denial which is what you want you want to fall back to to deny in this case ok so what I'm gonna",
    "start": "1316470",
    "end": "1325860"
  },
  {
    "text": "do is go ahead and create that that pod again that privilege pod in both namespaces and then I'm going to load in",
    "start": "1325860",
    "end": "1333210"
  },
  {
    "text": "a policy now as a config map to OPA so the policies that can all be stored in kubernetes is config Maps you don't",
    "start": "1333210",
    "end": "1339120"
  },
  {
    "text": "have to duplicate you don't have to add it another storage layer or something for OPA it can all just integrate with kubernetes very nicely and then when you",
    "start": "1339120",
    "end": "1346980"
  },
  {
    "text": "when you load the config Maps in you can see that OPA has actually annotated them with a with a status of that policy and",
    "start": "1346980",
    "end": "1352230"
  },
  {
    "text": "so in this case the status is ok which means the policy has been installed into OPA and it's being enforced so you can",
    "start": "1352230",
    "end": "1357270"
  },
  {
    "text": "actually tell whether or not there's been an error in the policy or something like that so you know that it's actually working",
    "start": "1357270",
    "end": "1363020"
  },
  {
    "text": "ok and so I'm gonna try to executive the alpine container that's in the default namespace and that's that's working fine",
    "start": "1363020",
    "end": "1368640"
  },
  {
    "text": "and now fingers crossed if we try to exact into the alpine container in the",
    "start": "1368640",
    "end": "1374730"
  },
  {
    "text": "production namespace that gets rejected okay so that's the same behavior we saw before but the implementation is a",
    "start": "1374730",
    "end": "1380610"
  },
  {
    "text": "little bit different this time so this is an example of a policy that we've written that implements this this this",
    "start": "1380610",
    "end": "1387030"
  },
  {
    "text": "sort of access control in kubernetes and so at the bottom there's a bit of boilerplate but at the top is sort of",
    "start": "1387030",
    "end": "1392100"
  },
  {
    "text": "the business logic of the policy so what we've done is we've defined a rule that generates an error message that says you",
    "start": "1392100",
    "end": "1398310"
  },
  {
    "text": "know you can't executive privilege containers in production namespace and then errors gonna be generated if the body of the rule is true and so you can",
    "start": "1398310",
    "end": "1405300"
  },
  {
    "text": "read the body basically as input spec operation matches get and spec namespace matches production and and the the pod",
    "start": "1405300",
    "end": "1413640"
  },
  {
    "text": "itself is rather is the containment pod refers to a privileged container and we have a little function that defines",
    "start": "1413640",
    "end": "1419520"
  },
  {
    "text": "whether or not a pod is pratas privileged and so we we look up the the pods back from kubernetes and we search",
    "start": "1419520",
    "end": "1427050"
  },
  {
    "text": "over the containers in that pod spec and then we check if any of them have that privileged bit set and then this this",
    "start": "1427050",
    "end": "1434040"
  },
  {
    "text": "policy the logic down here is just basically generating the the response that has to go back to the API server",
    "start": "1434040",
    "end": "1440810"
  },
  {
    "text": "okay so",
    "start": "1440810",
    "end": "1444860"
  },
  {
    "text": "so Bob the policy says the Bob is alive so the question was what happens if Bob changes the spec and so you can write a",
    "start": "1451620",
    "end": "1456990"
  },
  {
    "text": "policy that prevents Bob from actually modifying the spec if you want to but in this case he should be able to maybe he",
    "start": "1456990",
    "end": "1462360"
  },
  {
    "text": "should be able to do that maybe he should be able to exact into those containers but it's okay so now like so",
    "start": "1462360",
    "end": "1467640"
  },
  {
    "text": "that policy worked that's great but what I want to highlight is how open lets you write policies that are very dynamic and",
    "start": "1467640",
    "end": "1472710"
  },
  {
    "text": "so everything's on fire now something happened in the infrastructure and so we want to actually give Bob access now to",
    "start": "1472710",
    "end": "1478200"
  },
  {
    "text": "that container and so what I've done is I've defined its little simple policy here that just says break glass is true and so I'm gonna load that policy into",
    "start": "1478200",
    "end": "1486420"
  },
  {
    "text": "OPA as it config map again and now if I try to executive the container I can right so that's cool so this just shows",
    "start": "1486420",
    "end": "1494100"
  },
  {
    "text": "how you can actually like change the behavior at runtime very easily okay and so now that the calm has been restored",
    "start": "1494100",
    "end": "1500100"
  },
  {
    "text": "the issues been fixed and if I try to connect into the container again I get I get the original error message back right so these policies can be very",
    "start": "1500100",
    "end": "1506730"
  },
  {
    "text": "dynamic that I actually I specified break glass as a policy but it could also just be data that you load into the policy engine so you don't have here you",
    "start": "1506730",
    "end": "1513090"
  },
  {
    "text": "could you could hook it up in different ways okay so the demo gods were very good to me today and I'm very happy about that okay so",
    "start": "1513090",
    "end": "1522510"
  },
  {
    "start": "1520000",
    "end": "1622000"
  },
  {
    "text": "something we're announcing today that we're really excited about is this standard library of policies for the",
    "start": "1522510",
    "end": "1527670"
  },
  {
    "text": "open policy agent project so we have a bunch of integrations for OPA that let you hook it up to projects like",
    "start": "1527670",
    "end": "1532710"
  },
  {
    "text": "kubernetes in sto but we didn't until recently have a live standard library of policies that you could take off the",
    "start": "1532710",
    "end": "1537900"
  },
  {
    "text": "shelf and use to enforce all kinds of different things like admission control and authorization and placement and",
    "start": "1537900",
    "end": "1543270"
  },
  {
    "text": "auditing and so on across a wide range of different projects so for example we have risk management policies for",
    "start": "1543270",
    "end": "1549240"
  },
  {
    "text": "terraform we have security group auditing policies for Amazon we have admission control policies for",
    "start": "1549240",
    "end": "1555060"
  },
  {
    "text": "kubernetes we have auditing policies for kubernetes we've got similar things for docker and we've also got some auditing",
    "start": "1555060",
    "end": "1561060"
  },
  {
    "text": "policies for sto to make sure that your ISTE of cluster is set up correctly and so this is a great if you're interested",
    "start": "1561060",
    "end": "1566400"
  },
  {
    "text": "in this kind of stuff it's a great way to get get involved because these policies are very high-level they're pretty easy to write it's kind of fun",
    "start": "1566400",
    "end": "1572220"
  },
  {
    "text": "because you just have to work with data it's very predictable and enjoyable so yeah so I recommend that everybody check",
    "start": "1572220",
    "end": "1579120"
  },
  {
    "text": "out the extensibility features in kubernetes 1.9 I think that they're gonna really enable a bunch of new interesting use cases",
    "start": "1579120",
    "end": "1584810"
  },
  {
    "text": "projects like the meta controller or quite exciting OPA is a really cool",
    "start": "1584810",
    "end": "1590550"
  },
  {
    "text": "project that we're really excited about because it provides this reusable building block that you can use to enforce all kinds of different policies across all these different projects and",
    "start": "1590550",
    "end": "1597150"
  },
  {
    "text": "you can get started without having to write any code right you can take an off-the-shelf integration and a bunch of off-the-shelf policies and apply them to",
    "start": "1597150",
    "end": "1603420"
  },
  {
    "text": "your infrastructure to do all kinds of things like apply security controls and the resource management controls and so on it's the last thing I'll point out is",
    "start": "1603420",
    "end": "1610800"
  },
  {
    "text": "that it's just like what enables all of this is the extensibility that's been added into kubernetes so when you're thinking about designing these kinds of",
    "start": "1610800",
    "end": "1616530"
  },
  {
    "text": "systems think about extensibility and think about decoupling policy decisions from policy enforcement okay so thank",
    "start": "1616530",
    "end": "1623610"
  },
  {
    "start": "1622000",
    "end": "2088000"
  },
  {
    "text": "you very much if there are questions I'm happy to take them you can please go to the repo and and the OPA repo and star it and if you're interested in this demo",
    "start": "1623610",
    "end": "1630120"
  },
  {
    "text": "the code is all online you can check it out and yeah thank you [Applause]",
    "start": "1630120",
    "end": "1641060"
  },
  {
    "text": "[Music]",
    "start": "1642200",
    "end": "1645299"
  },
  {
    "text": "that's a great question so the question is in the policy that I showed before so",
    "start": "1648269",
    "end": "1658179"
  },
  {
    "text": "this policy is referring to kubernetes paw data kubernetes pods and the question is whether the question is",
    "start": "1658179",
    "end": "1663759"
  },
  {
    "text": "whether or not that's being queried synchronously or whether it's been cashed in Opa and the answer is that it's being actually being cashed so when",
    "start": "1663759",
    "end": "1670119"
  },
  {
    "text": "we deploy open on top of kubernetes you can configure it to actually replicate all the pods and deployments and config",
    "start": "1670119",
    "end": "1675669"
  },
  {
    "text": "maps and services and so on into OPA so then you can write policy over them okay so you can take the same idea and you",
    "start": "1675669",
    "end": "1681669"
  },
  {
    "text": "can use it to write auditing policies for example so if you want to like find whether or not you know all pods are specifying you know resource limits and",
    "start": "1681669",
    "end": "1688659"
  },
  {
    "text": "resource requests and so on you can do that or if you want to find pods that are not dropping you know privileges or",
    "start": "1688659",
    "end": "1694149"
  },
  {
    "text": "something like that our capability security capabilities and so on you can you can do that so you can get all this",
    "start": "1694149",
    "end": "1699249"
  },
  {
    "text": "data into open and then interact with it very very easily",
    "start": "1699249",
    "end": "1703470"
  },
  {
    "text": "that's that's a good question so we so the question is whether or not the logging the audit logging you mean is being handled by Etsy D we haven't",
    "start": "1714880",
    "end": "1723640"
  },
  {
    "text": "hooked up the audit logging to anything yet so right now you can just query OPA and get back these these events",
    "start": "1723640",
    "end": "1729190"
  },
  {
    "text": "basically are these warnings errors and info messages right but you could certainly take that and pump them as",
    "start": "1729190",
    "end": "1734350"
  },
  {
    "text": "events into kubernetes and then use use the kubernetes event system to take get access to them yeah",
    "start": "1734350",
    "end": "1742830"
  },
  {
    "text": "yes so I haven't shown this here but you can write basically built-in functions for the policy engine and those built-in",
    "start": "1749210",
    "end": "1755330"
  },
  {
    "text": "functions can call out to external think you can do whatever you want in a built-in function so you can execute a request against an external service to",
    "start": "1755330",
    "end": "1760490"
  },
  {
    "text": "get some data or whatever you need that obviously like if you do that then you kind of couple your policies to that",
    "start": "1760490",
    "end": "1767330"
  },
  {
    "text": "external system and so it makes them a little bit harder to test in your development environments locally with like unit tests but it's definitely",
    "start": "1767330",
    "end": "1773650"
  },
  {
    "text": "something worth worth doing if that's what you need yep",
    "start": "1773650",
    "end": "1786040"
  },
  {
    "text": "so the question is what happens if you delete a config map that contains the policies and the answer is that so the",
    "start": "1788570",
    "end": "1794600"
  },
  {
    "text": "the COPE is basically watching the API server free config maps that have a label on them that say they contain",
    "start": "1794600",
    "end": "1800020"
  },
  {
    "text": "policy and if that config Maps gets it gets deleted then Oakland gets that",
    "start": "1800020",
    "end": "1805580"
  },
  {
    "text": "notification that it's been deleted and it uninstalls the policy from the engine so just like it's adding them when it",
    "start": "1805580",
    "end": "1810680"
  },
  {
    "text": "sees them created or modified or up sorting them when it sees them created or or modified whenever they get deleted",
    "start": "1810680",
    "end": "1816590"
  },
  {
    "text": "they get retracted they get uninstalled",
    "start": "1816590",
    "end": "1820179"
  },
  {
    "text": "to date so today you would get an error back from the it would try to try to push an error back up but then I guess",
    "start": "1826090",
    "end": "1832430"
  },
  {
    "text": "yeah that's not well supported today so one of the improvements that we have probably we'd like to do is make this instead of using config Maps to use CRTs",
    "start": "1832430",
    "end": "1838640"
  },
  {
    "text": "because some resource definitions and then you can do synchronous validation of the of the changes that are made",
    "start": "1838640",
    "end": "1843860"
  },
  {
    "text": "against those those CRTs and prevent that from happening I guess you could also yeah that's that's why the best way to go yeah a third row and we'll go back",
    "start": "1843860",
    "end": "1851660"
  },
  {
    "text": "oh so here",
    "start": "1851660",
    "end": "1854680"
  },
  {
    "text": "so what I so in this case you can see that the packages are the policies are actually namespaced with a package",
    "start": "1862760",
    "end": "1868670"
  },
  {
    "text": "directive so you can prevent the question is like what whether it would happen if you defined the same function",
    "start": "1868670",
    "end": "1873860"
  },
  {
    "text": "in multiple files yeah so if there I guess if they're in the same package then we would the policies get compiled",
    "start": "1873860",
    "end": "1880400"
  },
  {
    "text": "so we would either return an error back to because there's a conflict or something like that or if there are",
    "start": "1880400",
    "end": "1885500"
  },
  {
    "text": "different packages that that's sort of a fine yeah next behind so the question is",
    "start": "1885500",
    "end": "1897830"
  },
  {
    "text": "how does our back compare to to this this model yeah sure so so role based",
    "start": "1897830",
    "end": "1904940"
  },
  {
    "text": "access control is great it provides a nice high level configurable way of controlling who can do what but it's",
    "start": "1904940",
    "end": "1910100"
  },
  {
    "text": "very limited in terms of the expressiveness that it gives you over who can do what because it limits you to",
    "start": "1910100",
    "end": "1915350"
  },
  {
    "text": "say like okay Torin can do pod creation in an in a namespace but it doesn't let",
    "start": "1915350",
    "end": "1920840"
  },
  {
    "text": "you say Tauron can cannot create pods that have that refer to an image that's",
    "start": "1920840",
    "end": "1926000"
  },
  {
    "text": "outside of our internal registry right or any kind of combination like that right so it's it's limited in terms expressiveness you can you can build",
    "start": "1926000",
    "end": "1932450"
  },
  {
    "text": "role based access control policies in this language though if you want so it's it's very expressive yeah yeah it's good",
    "start": "1932450",
    "end": "1939800"
  },
  {
    "text": "for segregation of duties",
    "start": "1939800",
    "end": "1942490"
  },
  {
    "text": "absolutely yeah yeah so you could take a bunch of these auditing policies for example and just run them over all of",
    "start": "1949930",
    "end": "1955820"
  },
  {
    "text": "your manifests in your CI CD pipeline and then get back warnings or errors and so on that you might want to pay",
    "start": "1955820",
    "end": "1962570"
  },
  {
    "text": "attention to or just ignore it sort of up to you",
    "start": "1962570",
    "end": "1967120"
  },
  {
    "text": "so the question is how do you use this in in in other environments effectively",
    "start": "1976790",
    "end": "1982010"
  },
  {
    "text": "okay so yeah so you can take open and you can run it as a library like so if you're building around services you can use it as a library by embedded in",
    "start": "1982010",
    "end": "1988290"
  },
  {
    "text": "getting to into those services or you can run it next to them either as a sidecar or on top or either on the host",
    "start": "1988290",
    "end": "1993300"
  },
  {
    "text": "and then your services can query open and ask for policy decisions now if you want to use it for something like",
    "start": "1993300",
    "end": "1998610"
  },
  {
    "text": "terraform for example you can like generate a terraform plan and then run run that plan through alpha to get an",
    "start": "1998610",
    "end": "2005050"
  },
  {
    "text": "authorization decision for example in your CI CD pipeline if you want to use it in in a in a cloud provider then we",
    "start": "2005050",
    "end": "2012530"
  },
  {
    "text": "need to have extensibility or hooks in those in those providers to call out to an external endpoint so kubernetes is it",
    "start": "2012530",
    "end": "2017720"
  },
  {
    "text": "does a very good job of that hopefully we see more of that from other other platforms yeah so that's this if you",
    "start": "2017720",
    "end": "2029510"
  },
  {
    "text": "check out the standard library that's that's where we're starting to build up this repository of common policies that",
    "start": "2029510",
    "end": "2035270"
  },
  {
    "text": "you can take and use to apply to different different different providers and different projects and so on okay",
    "start": "2035270",
    "end": "2043580"
  },
  {
    "text": "one more question",
    "start": "2043580",
    "end": "2046690"
  },
  {
    "text": "so the question is whether or not you can apply policies based on what the container is actually doing so right so",
    "start": "2055510",
    "end": "2061270"
  },
  {
    "text": "the policies I showed are just operating over kubernetes configuration right if you can get data that describes what's",
    "start": "2061270",
    "end": "2066700"
  },
  {
    "text": "happening inside of those containers into OPA then you can write policy over it so opens not coupled to any of these",
    "start": "2066700",
    "end": "2073419"
  },
  {
    "text": "projects or any these providers anyway it's all just dated oh but it doesn't we're not running a couple two kubernetes or anything like that okay",
    "start": "2073419",
    "end": "2080760"
  },
  {
    "text": "all right well if there's no other questions thank you very much [Applause] [Music]",
    "start": "2080760",
    "end": "2088809"
  }
]