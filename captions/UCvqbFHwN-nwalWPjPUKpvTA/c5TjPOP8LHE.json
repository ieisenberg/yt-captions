[
  {
    "text": "so thanks for joining us today uh kevin and i will be talking about unleashing declarative data access with graphql in",
    "start": "160",
    "end": "6960"
  },
  {
    "text": "your service mesh so lynn gave us an excellent introduction but just to clarify who's",
    "start": "6960",
    "end": "12880"
  },
  {
    "text": "who yes i'm psy and i'm kevin and we won't waste any more of your time um so a little bit about who we are",
    "start": "12880",
    "end": "20000"
  },
  {
    "text": "we've uh we're solo.i o uh you might have attended some of our talks earlier today um we're a small startup or not so small",
    "start": "20000",
    "end": "27199"
  },
  {
    "text": "startup anymore in cambridge that was started in 2017 and over the last five years we've learned from",
    "start": "27199",
    "end": "34160"
  },
  {
    "text": "helping many customers adopt service mesh among them numerous fortune 500",
    "start": "34160",
    "end": "39360"
  },
  {
    "text": "companies and two of the five top telecoms speaking of telecom companies uh now",
    "start": "39360",
    "end": "44800"
  },
  {
    "text": "that you know who we are kevin do you mind introducing us to the audience sure yes so you the audience today are",
    "start": "44800",
    "end": "52000"
  },
  {
    "text": "wayne telecom a telecom bit company based in gotham city you're the largest provider in gotham city and require",
    "start": "52000",
    "end": "58559"
  },
  {
    "text": "highly available low latency communication with services from your web to from your web clients",
    "start": "58559",
    "end": "63600"
  },
  {
    "text": "so stick with us as we lead you on our journey to spend less of your billions on cloud infrastructure and wasted",
    "start": "63600",
    "end": "68720"
  },
  {
    "text": "developer time and revolutionize your communication stack trust me it's going to be fun",
    "start": "68720",
    "end": "75200"
  },
  {
    "text": "so where do we start uh stand today uh we're hammering money uh clean and simple so we've got a mobile app uh our",
    "start": "75759",
    "end": "82560"
  },
  {
    "text": "users are reporting slow loading times uh our developer teams are understaffed and front end teams are experiencing",
    "start": "82560",
    "end": "88320"
  },
  {
    "text": "friction working with back-end teams let's take a look at a couple potential solutions",
    "start": "88320",
    "end": "95520"
  },
  {
    "text": "so just a concrete example here this is going to be our pseudo our rest api",
    "start": "96560",
    "end": "101920"
  },
  {
    "text": "a sample page from our billing application uh this page loads in all the phone plans for the current user",
    "start": "101920",
    "end": "107040"
  },
  {
    "text": "that they're paying for in order to get adequate information uh",
    "start": "107040",
    "end": "112159"
  },
  {
    "text": "for this planned summary page we must make multiple rest api calls per page your backends are microservices split",
    "start": "112159",
    "end": "117840"
  },
  {
    "text": "off into various business groups and so making multiple calls to biker services and agreeing on the back end is required",
    "start": "117840",
    "end": "123360"
  },
  {
    "text": "to get all the data required uh for our mobile app and so note that we've got the user id plan well and some of those",
    "start": "123360",
    "end": "129520"
  },
  {
    "text": "user ids and plan ids are used in other api calls uh a lot of this won't be new but just",
    "start": "129520",
    "end": "135440"
  },
  {
    "text": "to highlight and make sure we're on the same page one of the problems where we're seeing low slow loading times we can have",
    "start": "135440",
    "end": "141440"
  },
  {
    "text": "request waterfalls and so the problem here is that we make a rest api call we need to wait for that",
    "start": "141440",
    "end": "147520"
  },
  {
    "text": "response on the client before we remake that request on the back end",
    "start": "147520",
    "end": "152800"
  },
  {
    "text": "geographically our origin server might be in the west coast and on the right coast or sorry the eastern hemisphere uh",
    "start": "152800",
    "end": "159920"
  },
  {
    "text": "we might have our mobile app and so you know it takes 50 milliseconds to traverse the world we take the response",
    "start": "159920",
    "end": "165280"
  },
  {
    "text": "and we do it again we've just doubled how long it takes to make our api call",
    "start": "165280",
    "end": "171560"
  },
  {
    "text": "so uh bff this is a paradigm i'm sure many of us here already familiar with but one of the potential solutions here",
    "start": "172720",
    "end": "179040"
  },
  {
    "text": "is to develop a back end for front end we can solve some of our latency issues by just putting an intermediary service",
    "start": "179040",
    "end": "185200"
  },
  {
    "text": "in front of our backend microservices that's responsible for aggregating those results and so we send one single",
    "start": "185200",
    "end": "191040"
  },
  {
    "text": "request one specified for each client so our mobile app might have one back-end",
    "start": "191040",
    "end": "196080"
  },
  {
    "text": "for front-end and our desktop app might have a different back end for front end um both of those services will then go",
    "start": "196080",
    "end": "202319"
  },
  {
    "text": "ahead and actually make requests within the origin servers in your network and then send it all back thus we only pay",
    "start": "202319",
    "end": "207840"
  },
  {
    "text": "the cost of traversing the world once uh 45 milliseconds rather than twice um",
    "start": "207840",
    "end": "213360"
  },
  {
    "text": "just for a more complete picture here uh we you know we often have a cdn or load balancer also we're trying to",
    "start": "213360",
    "end": "218879"
  },
  {
    "text": "optimize our speed here um cdn a little about is going to help us but",
    "start": "218879",
    "end": "224640"
  },
  {
    "text": "you know this isn't going to fix everything we've obviously got to worry about http puts and posts uh we need to",
    "start": "224640",
    "end": "230000"
  },
  {
    "text": "you know if you have any mutation then this isn't going to solve the problem for us",
    "start": "230000",
    "end": "235599"
  },
  {
    "text": "so this is where graphql comes in we can solve request waterfalls large",
    "start": "237120",
    "end": "242480"
  },
  {
    "text": "payloads and improve developer efficiency with graphql and that by the way is our logo or our",
    "start": "242480",
    "end": "248879"
  },
  {
    "text": "little map mascot glue i try to make these little costumes for glue and so this is just one of them",
    "start": "248879",
    "end": "254560"
  },
  {
    "text": "that glue so yes thank you if our front end leverages",
    "start": "254560",
    "end": "260479"
  },
  {
    "text": "graphql it only has to create one graphql query to get all the data it needs and",
    "start": "260479",
    "end": "266080"
  },
  {
    "text": "hopefully the text is big enough for you to read but that's one single graphql query one http request that the",
    "start": "266080",
    "end": "271120"
  },
  {
    "text": "frontend's going to make to a graphql server and this will give us back all our data",
    "start": "271120",
    "end": "276160"
  },
  {
    "text": "that the front end needs in one response so we can transform our entire",
    "start": "276160",
    "end": "281840"
  },
  {
    "text": "communication stack with within the back end to use graphql and receive two major benefits",
    "start": "281840",
    "end": "290240"
  },
  {
    "text": "first graphql returns exactly what we need and nothing more this means that we can ask for exactly",
    "start": "290400",
    "end": "297360"
  },
  {
    "text": "what data we want from the graphql back-end and get back exactly what we asked for nothing more nothing less",
    "start": "297360",
    "end": "303520"
  },
  {
    "text": "and in addition we can fetch data from across different resources",
    "start": "303520",
    "end": "308880"
  },
  {
    "text": "from a single query and have all that data sort of aggregated by the graphql server in one response",
    "start": "308880",
    "end": "314960"
  },
  {
    "text": "this gets rid of obviously the problem of having to make multiple requests for one single piece of data",
    "start": "314960",
    "end": "322880"
  },
  {
    "text": "and second or i guess third graphql provides first class support for a typed",
    "start": "322960",
    "end": "328000"
  },
  {
    "text": "schema we are familiar with current open api uh grpc proto like specifications for apis",
    "start": "328000",
    "end": "335440"
  },
  {
    "text": "to see what data is available from back-end service but graphql has first-class support for a type schema",
    "start": "335440",
    "end": "344720"
  },
  {
    "text": "so in our case we have that query that our mobile application is sending to our graphql server",
    "start": "345360",
    "end": "350560"
  },
  {
    "text": "on the right we have our sorry on the left we have our graphql query and on the right we have the",
    "start": "350560",
    "end": "356160"
  },
  {
    "text": "graphql type schema which aligns perfectly to the query we're sending so i'm going to go ahead and just browse",
    "start": "356160",
    "end": "362319"
  },
  {
    "text": "through the query here and you'll see that every part of the query aligns with a specific type from the graphql schema",
    "start": "362319",
    "end": "369759"
  },
  {
    "text": "so what's the point of this well the graphql schema can now be accessed with amazing developer tools such as graphql",
    "start": "370479",
    "end": "377120"
  },
  {
    "text": "playground here and developers can now browse the schema as easily as browsing the internet you",
    "start": "377120",
    "end": "383199"
  },
  {
    "text": "can ask for whatever data you want from the schema and you can get it via a great ui like this and when it",
    "start": "383199",
    "end": "390240"
  },
  {
    "text": "comes to just making it into your application you just have to copy and paste the query into your application",
    "start": "390240",
    "end": "396160"
  },
  {
    "text": "so kevin now that we've seen the numerous benefits of graphql where do we stand with wayne telecom",
    "start": "396160",
    "end": "402479"
  },
  {
    "text": "yeah so just yeah we great graph brief graphql intro aside now let's just zig zoom back to where we are with wayne",
    "start": "402479",
    "end": "408960"
  },
  {
    "text": "telecom um you know we've implemented a graphql server we have uh on the left",
    "start": "408960",
    "end": "414000"
  },
  {
    "text": "here a sample set of queries and on the right we have a sample resolver and so",
    "start": "414000",
    "end": "419520"
  },
  {
    "text": "resolvers usually defined uh you know in code and here we've just kind of hard coded it but just reminder you know we",
    "start": "419520",
    "end": "425360"
  },
  {
    "text": "have some app dev teams that are responsible for maintaining these resolvers um these backend services these service",
    "start": "425360",
    "end": "431840"
  },
  {
    "text": "owners are creating those resolvers a platform team is now going to own that gateway uh that graphql gateway um but",
    "start": "431840",
    "end": "438560"
  },
  {
    "text": "our front-end devs are happy and productive uh you know our front end is snappy it loads quickly you know their",
    "start": "438560",
    "end": "443680"
  },
  {
    "text": "developer experience is improved um you know we've removed the friction of working between back-end and front-end",
    "start": "443680",
    "end": "448800"
  },
  {
    "text": "teams by basically doing it back in for front end via graphql um so front end we're definitely happy",
    "start": "448800",
    "end": "454800"
  },
  {
    "text": "uh continuing forward this is a service mesh conference we haven't mentioned the word service mesh yet service mesh con",
    "start": "454800",
    "end": "461199"
  },
  {
    "text": "yeah so we're telecom industry we see this commonly with our customers we're very heavily regulated uh this means",
    "start": "461199",
    "end": "467120"
  },
  {
    "text": "that we require things like zero trust networking so we'll just pick the de facto use case here we need mtls between all of our services",
    "start": "467120",
    "end": "474720"
  },
  {
    "text": "we also want things rate limiting caching uh you know weightlifting picture on the right [Music]",
    "start": "474720",
    "end": "480800"
  },
  {
    "text": "so now this is our current wake uh wayne telecom infrastructure we've got our you",
    "start": "480800",
    "end": "485919"
  },
  {
    "text": "know single cluster view kubernetes cluster with istio installed we have an istio ingress gateway where our traffic",
    "start": "485919",
    "end": "491840"
  },
  {
    "text": "enters from there we forward that to our graphql server which is then our bracket for front end and talks to all of our",
    "start": "491840",
    "end": "497680"
  },
  {
    "text": "backend services as required and then you also note that for example the users and plan service might talk directly and",
    "start": "497680",
    "end": "503599"
  },
  {
    "text": "that's also encrypted via mtls via istio so this is our current picture of things",
    "start": "503599",
    "end": "511039"
  },
  {
    "text": "so now i'd like to take a second and zoom in on those first two aspects so we've got the the ingress",
    "start": "511360",
    "end": "516719"
  },
  {
    "text": "gateway onboard proxy for istio and then we have our graphql server uh so",
    "start": "516719",
    "end": "522240"
  },
  {
    "text": "and then we talk to our backend microservices and so again this is the layer where we implement certain",
    "start": "522240",
    "end": "527360"
  },
  {
    "text": "policies like external off rate limiting laugh caching all these are just envoy",
    "start": "527360",
    "end": "532880"
  },
  {
    "text": "filters act on the filter chain again we're just securing our network at the edge and we do that because we have to",
    "start": "532880",
    "end": "538720"
  },
  {
    "text": "yeah we don't want this to live in the graphql server but we do want the benefits of graphql or any backend for front-end implementation",
    "start": "538720",
    "end": "547480"
  },
  {
    "text": "now just reminding everyone it's maybe it's already apparent to some of you here but graphql is a single endpoint um",
    "start": "549120",
    "end": "554240"
  },
  {
    "text": "behind our proxy here and so it means that we need to be identity aware and so there's a couple of you know outcomes",
    "start": "554240",
    "end": "561440"
  },
  {
    "text": "here the the first one is that we need to be aware of things like authorization right like if we're in a single endpoint",
    "start": "561440",
    "end": "566720"
  },
  {
    "text": "we still need to figure out who's querying that endpoint there's two two different ways that we could think about",
    "start": "566720",
    "end": "571920"
  },
  {
    "text": "solving this kind of problem uh on the left we could just delegate the problem so we could just take the the request",
    "start": "571920",
    "end": "577360"
  },
  {
    "text": "headers for example like an authorization header and just pass it through to our backend service and let our backend service project if we're not",
    "start": "577360",
    "end": "583440"
  },
  {
    "text": "authorized you know that works in many cases but not all and the other solution is to go",
    "start": "583440",
    "end": "588800"
  },
  {
    "text": "ahead and code it into our server and so we also see examples um you know use cases where customers go ahead and they",
    "start": "588800",
    "end": "595120"
  },
  {
    "text": "instrument their graphql server with identity aware logic like this that's enforcing authentication",
    "start": "595120",
    "end": "601279"
  },
  {
    "text": "it it moves beyond just platform concerns like authentication though you could also have to worry about things like circuit",
    "start": "601279",
    "end": "607760"
  },
  {
    "text": "breaking and failover and some of those things specifically circuit breaking failover we really kind of have to do on",
    "start": "607760",
    "end": "613360"
  },
  {
    "text": "the node that serves graphql right like if we want to actively figure out which endpoints we can reach from where we",
    "start": "613360",
    "end": "618399"
  },
  {
    "text": "live that concern can't be delegated to hypothetically another proxy behind graphql unless that server lives",
    "start": "618399",
    "end": "624720"
  },
  {
    "text": "co-located on that node so at some level or some point we have to re-instrument some platform concerns",
    "start": "624720",
    "end": "630880"
  },
  {
    "text": "in our graphql server so moving forward we also have uh you",
    "start": "630880",
    "end": "637040"
  },
  {
    "text": "know we've already invested in our graphql infrastructure here to help our front end teams",
    "start": "637040",
    "end": "642480"
  },
  {
    "text": "we've seen that the developer experience has improved we've already invested in infrastructure it feels natural why why",
    "start": "642480",
    "end": "648000"
  },
  {
    "text": "might we want to to leverage it certainly we don't need to worry about request waterfalls within our internal",
    "start": "648000",
    "end": "653600"
  },
  {
    "text": "network but we could still work you know decrease bandwidth if we wanted to um or have an improved developer experience",
    "start": "653600",
    "end": "659040"
  },
  {
    "text": "and we've already invested in our graphql infrastructure so it feels free to leverage",
    "start": "659040",
    "end": "664320"
  },
  {
    "text": "so you see here the user service might or could just talk to the graphql gateway and then make requests that get",
    "start": "664320",
    "end": "669440"
  },
  {
    "text": "served not that you have to but it's just an option",
    "start": "669440",
    "end": "675200"
  },
  {
    "text": "so just a quick checkpoint of where we're at right now with wayne's telecom we've solved a bunch of problems created",
    "start": "675200",
    "end": "681519"
  },
  {
    "text": "a couple as well so far we've increased front end dev efficiency we've reduced over fetching",
    "start": "681519",
    "end": "687680"
  },
  {
    "text": "we've naturally implemented a backend for front end uh we've got istio to enforce zero trust networking and we've",
    "start": "687680",
    "end": "693440"
  },
  {
    "text": "got of course we've gotten rid of crime in gotham city but also have we we've created a couple",
    "start": "693440",
    "end": "698480"
  },
  {
    "text": "more problems um you know our platform team has to maintain a new graphql gateway uh you know each app developer",
    "start": "698480",
    "end": "705120"
  },
  {
    "text": "team that wants to support this graphql gateway has to implement and maintain their own set of resolvers",
    "start": "705120",
    "end": "710240"
  },
  {
    "text": "uh they have to instrument some platform concerns into those resolvers to ensure that we have reliable service",
    "start": "710240",
    "end": "717360"
  },
  {
    "text": "that's pretty much the summary so yeah we've gone ahead and solved a",
    "start": "717360",
    "end": "723920"
  },
  {
    "text": "bunch of problems you know we've made our front-end developers happy",
    "start": "723920",
    "end": "729839"
  },
  {
    "text": "but there's a bunch of other problems you know the joker is still at large and most importantly the back end team",
    "start": "729839",
    "end": "736320"
  },
  {
    "text": "is unhappy so there must be a better way to solve for our backend team as well as our",
    "start": "736320",
    "end": "742000"
  },
  {
    "text": "front end team so this is our current architecture and uh",
    "start": "742000",
    "end": "748240"
  },
  {
    "text": "we see that the proxy the network proxy is a separate deployment a separate pod then our graphql server",
    "start": "748240",
    "end": "754240"
  },
  {
    "text": "and of course this means that we have to manage two different deployments different teams must manage different",
    "start": "754240",
    "end": "759680"
  },
  {
    "text": "pods but what if we went ahead and merged those two you might have seen this coming",
    "start": "759680",
    "end": "765519"
  },
  {
    "text": "given that this was in ediet's slide earlier but now we're proposing a new model proxy is",
    "start": "765519",
    "end": "772320"
  },
  {
    "text": "a graphql server so essentially we're merging the responsibilities of the platform and the application",
    "start": "772320",
    "end": "778560"
  },
  {
    "text": "networking team into a single component so here's a quick summary of the benefits first it completely eliminates",
    "start": "778560",
    "end": "784160"
  },
  {
    "text": "the developmental and operational expense of maintaining a separate application deployment for your graphql server",
    "start": "784160",
    "end": "790320"
  },
  {
    "text": "there's no additional network hop between the proxy and the graphql server because now the graphql server is just",
    "start": "790320",
    "end": "795600"
  },
  {
    "text": "in memory in the proxy and the graphql capabilities are based on declarative configuration which you",
    "start": "795600",
    "end": "801600"
  },
  {
    "text": "now use to manage istio envoy just like the rest of your cloud native infrastructure",
    "start": "801600",
    "end": "807040"
  },
  {
    "text": "so this means you're fully compatible with ci cd workflows and get ops",
    "start": "807040",
    "end": "813040"
  },
  {
    "text": "so we can also go ahead and leverage the existing capabilities that solo has provided within envoy so there's no need",
    "start": "813760",
    "end": "819680"
  },
  {
    "text": "to integrate with third-party libraries to create resolvers or graphql specific policies now we've mentioned these",
    "start": "819680",
    "end": "825600"
  },
  {
    "text": "policies multiple times waff web application firewall caching",
    "start": "825600",
    "end": "830800"
  },
  {
    "text": "external auth and rate limiting and now that's all built into your proxy with graphql",
    "start": "830800",
    "end": "837839"
  },
  {
    "text": "so those are a couple of the benefits but you might have noticed that we secretly converted these existing",
    "start": "838399",
    "end": "844800"
  },
  {
    "text": "services to graphql without uh without doing anything it's not magic though it seems like",
    "start": "844800",
    "end": "850800"
  },
  {
    "text": "magic but it's not each of these services exposes",
    "start": "850800",
    "end": "856160"
  },
  {
    "text": "a specific specification for example rest us exposes open api grpc exposes proto",
    "start": "856160",
    "end": "863199"
  },
  {
    "text": "buffs via reflection and uh soap exposes wisdom",
    "start": "863199",
    "end": "868800"
  },
  {
    "text": "so we can use each of these specifications to transform those specs into graphql schemas",
    "start": "868800",
    "end": "874079"
  },
  {
    "text": "automatically um",
    "start": "874079",
    "end": "879199"
  },
  {
    "text": "i'm going to go back a slide because i missed one point there is an existing library which does this that's completely open source in javascript",
    "start": "879199",
    "end": "885440"
  },
  {
    "text": "called graphql mesh the folks over at the guild have implemented that and it's a great project",
    "start": "885440",
    "end": "891680"
  },
  {
    "text": "however now that we're baking the graphql server into the proxy why not also bake this logic into the proxy as",
    "start": "891680",
    "end": "897360"
  },
  {
    "text": "well this discovery logic by putting a sidecar containing this discovery and translation logic next to",
    "start": "897360",
    "end": "903040"
  },
  {
    "text": "each service we're able to transform incoming graphql requests to the request",
    "start": "903040",
    "end": "908560"
  },
  {
    "text": "that each application understand in its own protocol effectively we've now converted all of our services",
    "start": "908560",
    "end": "914800"
  },
  {
    "text": "into graphql services by just including them in the mesh",
    "start": "914800",
    "end": "920959"
  },
  {
    "text": "so we're going to zoom out a little bit and we're going to go back to the graphql our yeah the back end for fun example",
    "start": "921279",
    "end": "927199"
  },
  {
    "text": "so the sidecar and gateway model opens up a bunch of new possibilities and one of them is for a more efficient bracket",
    "start": "927199",
    "end": "933519"
  },
  {
    "text": "for fronted architecture so we can see we have three back end for front ends here but these are actually",
    "start": "933519",
    "end": "940160"
  },
  {
    "text": "virtual back end for front ends they live within the proxy on different routes so they're just one",
    "start": "940160",
    "end": "945360"
  },
  {
    "text": "deployment still only one thing that you have to manage and each of these can request different",
    "start": "945360",
    "end": "951360"
  },
  {
    "text": "services make graphql requests to each of those services and do their own application logic",
    "start": "951360",
    "end": "958160"
  },
  {
    "text": "yep so not only you know we've is this more resource efficient but it's also going",
    "start": "959440",
    "end": "965040"
  },
  {
    "text": "to be easier for us to use as a maintainer of uh as a maintainer of our graphql platform",
    "start": "965040",
    "end": "971600"
  },
  {
    "text": "and gateway here and so we've got pictured here is some istio declarative configuration again going back to",
    "start": "971600",
    "end": "976639"
  },
  {
    "text": "service meshcon well envoy is you know the service mesh proxy for for istio we get to leverage the fact that it's built",
    "start": "976639",
    "end": "983040"
  },
  {
    "text": "in istio to do things that we we couldn't do before and so for example completely for free",
    "start": "983040",
    "end": "988160"
  },
  {
    "text": "on the left here you'll see a typical yaml this game will itself it's not particularly interesting but the interesting part is that it's",
    "start": "988160",
    "end": "994800"
  },
  {
    "text": "the circuit breaking config that you might have already applied to certain destinations in your cluster um because",
    "start": "994800",
    "end": "1000000"
  },
  {
    "text": "we've built a graphql server uh in envoy and c plus plus on the filter chain and we reuse onvoice",
    "start": "1000000",
    "end": "1006240"
  },
  {
    "text": "cluster routing like routing implementation then we get the circuit breaking knowledge aware for free so if",
    "start": "1006240",
    "end": "1012560"
  },
  {
    "text": "certain clusters are already unhealthy envoy's already aware we're already rerouting them no user configuration or",
    "start": "1012560",
    "end": "1018320"
  },
  {
    "text": "intelligence in your graphql server required further we can extend this to things that are still easier than they used to",
    "start": "1018320",
    "end": "1024319"
  },
  {
    "text": "be but not completely free on the right we might have a sample authorization policy uh you can apply you know",
    "start": "1024319",
    "end": "1030640"
  },
  {
    "text": "authorization to certain external auth on certain destinations going towards the back end",
    "start": "1030640",
    "end": "1036558"
  },
  {
    "text": "because again this is built in envoy we could build an internal listener to ourselves and then we could rerun that that authentication logic without",
    "start": "1036559",
    "end": "1043199"
  },
  {
    "text": "traversing the network stack without going down and out uh all in user space and just forward it along um we can do",
    "start": "1043199",
    "end": "1049120"
  },
  {
    "text": "that more effectively or quickly than we could before with a separate separate deployment",
    "start": "1049120",
    "end": "1054559"
  },
  {
    "text": "uh again so just back to our original solution we have uh our old programmatic",
    "start": "1054559",
    "end": "1060160"
  },
  {
    "text": "configuration for resolvers uh this is again we're instrumenting platform concerns into our resolver in this case",
    "start": "1060160",
    "end": "1067039"
  },
  {
    "text": "authentication but it's not just limited to authentication uh i'm sure some of you",
    "start": "1067039",
    "end": "1072160"
  },
  {
    "text": "have written graphql resolvers before yourself if you've done that you've also used javascript libraries i'm sure like data",
    "start": "1072160",
    "end": "1078240"
  },
  {
    "text": "loader to handle batching and caching those kinds of things all end up in your resolvers and make them perhaps verbose",
    "start": "1078240",
    "end": "1085360"
  },
  {
    "text": "complex and ideally you want them thin but unnecessarily these concerns creep in like to compare this to what we have",
    "start": "1085360",
    "end": "1091840"
  },
  {
    "text": "today what we'd like to propose for our graphql configuration uh our resolver",
    "start": "1091840",
    "end": "1097280"
  },
  {
    "text": "here config is entirely declarative so you can see on the bottom we have our schema definition i hope it's big enough",
    "start": "1097280",
    "end": "1104559"
  },
  {
    "text": "you have the your graphql query and then the information behind that query and a custom directive note the app resolve",
    "start": "1104559",
    "end": "1112000"
  },
  {
    "text": "with the name query plans and then we have an executable schema which defines how to actually",
    "start": "1112000",
    "end": "1118640"
  },
  {
    "text": "resolve that field so we're saying we have a query to get plans and we want to",
    "start": "1118640",
    "end": "1124240"
  },
  {
    "text": "if we want to resolve it we make a rest request with that header with that path to that destination um",
    "start": "1124240",
    "end": "1130880"
  },
  {
    "text": "it's like a custom string interpolation language that we'd come up with but you could imagine you know in that args for",
    "start": "1130880",
    "end": "1136720"
  },
  {
    "text": "example is grabbing from the graphql arguments if you're familiar with running the graphql resolver you could also grab from the parent object or or",
    "start": "1136720",
    "end": "1143360"
  },
  {
    "text": "other primitives that you're used to seeing so you can get dynamic information at runtime as part of your graphql",
    "start": "1143360",
    "end": "1148799"
  },
  {
    "text": "resolution but the important part is that it's declarative and it's very simple and we haven't instrumented a ton of platform concerns into our resolver",
    "start": "1148799",
    "end": "1155520"
  },
  {
    "text": "configuration so now i would just go ahead and and put",
    "start": "1155520",
    "end": "1161280"
  },
  {
    "text": "it all together again on the top right you'll see the yaml that we just looked at um this yaml",
    "start": "1161280",
    "end": "1167919"
  },
  {
    "text": "could have been generated uh per service so rather than being defined by a user we can discover and create this from the",
    "start": "1167919",
    "end": "1174799"
  },
  {
    "text": "backend service that uh fronted it from the wstl or the open api or the swagger",
    "start": "1174799",
    "end": "1180880"
  },
  {
    "text": "we can generate this using logic very similar to the graphql mesh and provide that you know via the control plane seo",
    "start": "1180880",
    "end": "1187039"
  },
  {
    "text": "service would have what have you and the bottom we just have another one of those but now that we have them per service we",
    "start": "1187039",
    "end": "1193440"
  },
  {
    "text": "can actually stitch them together and create like a super graph and so i'm not sure how many of you have heard of",
    "start": "1193440",
    "end": "1199280"
  },
  {
    "text": "schema stitching in graphql but we can go ahead and by reference staying on the left we",
    "start": "1199280",
    "end": "1205120"
  },
  {
    "text": "reference or use a label selector different schemas and then we can do a type merge if there's no conflicting",
    "start": "1205120",
    "end": "1210320"
  },
  {
    "text": "types everything just works on the first pass or we provide some kind of vml type merging configuration",
    "start": "1210320",
    "end": "1216159"
  },
  {
    "text": "but you can create like an api gateway that's like a superset of and allows you to make queries against both types or",
    "start": "1216159",
    "end": "1221679"
  },
  {
    "text": "across both schemas um and further than that we can also like i",
    "start": "1221679",
    "end": "1227039"
  },
  {
    "text": "mentioned there's there's data loader caching improvements um that's also just built in by by default because we can make",
    "start": "1227039",
    "end": "1233360"
  },
  {
    "text": "intelligent assumptions on the yaml we know that which queries will return similar responses and optimize those out",
    "start": "1233360",
    "end": "1239520"
  },
  {
    "text": "without extra user interaction",
    "start": "1239520",
    "end": "1242960"
  },
  {
    "text": "so now we're going to zoom out even more i know we're throwing a lot of information at you but let's take a look at this from a high level 10 000 foot",
    "start": "1245360",
    "end": "1251919"
  },
  {
    "text": "view of your clusters and your cloud architecture so we have multiple clusters multiple",
    "start": "1251919",
    "end": "1258480"
  },
  {
    "text": "environments dev staging prod and note that each microservice here issues graphql requests to its local",
    "start": "1258480",
    "end": "1264559"
  },
  {
    "text": "sidecar and those requests will be resolved from the sidecar thus our microservice thinks about the",
    "start": "1264559",
    "end": "1271120"
  },
  {
    "text": "data that it wants rather than the service that it wants it from or what service to request the data from",
    "start": "1271120",
    "end": "1276720"
  },
  {
    "text": "the service dependencies are now documented via declarative configuration yaml with all the change history",
    "start": "1276720",
    "end": "1283200"
  },
  {
    "text": "benefits if you were to use git ops rather than coded into services themselves",
    "start": "1283200",
    "end": "1289200"
  },
  {
    "text": "so we're no longer writing programmatic resolvers and having to enforce programmatic policies on developers",
    "start": "1289200",
    "end": "1295280"
  },
  {
    "text": "instead we're enforcing it via declarative configuration and also we no longer have to scale up",
    "start": "1295280",
    "end": "1301280"
  },
  {
    "text": "the graphql gateway to enable more mass services to leverage graphql if this is all controlled by git ops we",
    "start": "1301280",
    "end": "1308320"
  },
  {
    "text": "can promote changes from dev to staging to prod environments easily",
    "start": "1308320",
    "end": "1314720"
  },
  {
    "text": "so just going to overview the benefits we've seen from using graphql in the service mesh the biggest selling point",
    "start": "1315520",
    "end": "1322559"
  },
  {
    "text": "is obviously developer efficiency particularly in the request to reque service to service request flow",
    "start": "1322559",
    "end": "1328799"
  },
  {
    "text": "by merging the proxy and graphql server together as well as including graphql in your sidecar for your pro for your",
    "start": "1328799",
    "end": "1334880"
  },
  {
    "text": "service mesh from the get-go there are less deployments to manage and fewer points of failure in your graphql system",
    "start": "1334880",
    "end": "1342080"
  },
  {
    "text": "putting graphql directly into the gateway or sidecar proxy also reduces an additional network hop",
    "start": "1342080",
    "end": "1347840"
  },
  {
    "text": "we've gone over the declarative configuration and all the git ops benefits as well as the benefits of just using declarative configuration in",
    "start": "1347840",
    "end": "1353360"
  },
  {
    "text": "general and you get the graphql type safety that comes with using graphql as opposed to a",
    "start": "1353360",
    "end": "1359200"
  },
  {
    "text": "lot of different specifications and protocols like rest and resolvers are simple to find to",
    "start": "1359200",
    "end": "1365120"
  },
  {
    "text": "define in the declarative configuration and reason about so most platform confirm concerns have been moved back to",
    "start": "1365120",
    "end": "1371360"
  },
  {
    "text": "the proxy and the resolver is purely focused on fetching data and accessing data for schema field and type",
    "start": "1371360",
    "end": "1376799"
  },
  {
    "text": "relationships so uh also an interest of time to demo",
    "start": "1376799",
    "end": "1382320"
  },
  {
    "text": "going to go quickly but this chart should look very familiar again we've resolved all the the concerns from the",
    "start": "1382320",
    "end": "1387360"
  },
  {
    "text": "first half of the presentation um we've certainly if not solved made a lot easier the concerns that we had created",
    "start": "1387360",
    "end": "1393840"
  },
  {
    "text": "by automating a lot of the required processes on the new platform and back-end teams by discovering those",
    "start": "1393840",
    "end": "1400159"
  },
  {
    "text": "schemas by allowing you to merge them together with a stitch schema and doing most of that automatically",
    "start": "1400159",
    "end": "1405600"
  },
  {
    "text": "almost via the click of a button if you have open api wsdl or swagger exposed we've made all those problems be created",
    "start": "1405600",
    "end": "1413039"
  },
  {
    "text": "also solved awesome so it's demo time let's see how",
    "start": "1413039",
    "end": "1418720"
  },
  {
    "text": "kind the demo gods are to us today um yep",
    "start": "1418720",
    "end": "1423679"
  },
  {
    "text": "yeah so uh okay let's bring the terminal to the left left to the",
    "start": "1425360",
    "end": "1431360"
  },
  {
    "text": "left uh why it's not working",
    "start": "1431360",
    "end": "1436159"
  },
  {
    "text": "does that work can you see the term the screen there no",
    "start": "1438559",
    "end": "1444279"
  },
  {
    "text": "one second how do i mirror why'd you go to the left and like",
    "start": "1444880",
    "end": "1451200"
  },
  {
    "text": "minimize it let's bring this desktop over",
    "start": "1451200",
    "end": "1456320"
  },
  {
    "text": "does that work why is it not working",
    "start": "1456320",
    "end": "1459840"
  },
  {
    "text": "um i'm just trying to drag over a window why don't you let this",
    "start": "1463440",
    "end": "1470840"
  },
  {
    "text": "i cannot click this okay now you should be able to drag it over let's see ah",
    "start": "1473279",
    "end": "1480000"
  },
  {
    "text": "perfect yeah okay so i'm gonna be typing like this but we'll see how fast i can type",
    "start": "1481440",
    "end": "1487039"
  },
  {
    "text": "so in our cluster we have uh three services",
    "start": "1487039",
    "end": "1492080"
  },
  {
    "text": "the products reviews and users service services which are grpc services and",
    "start": "1492080",
    "end": "1497360"
  },
  {
    "text": "each of these are exposed reflection a reflection endpoint so we can use",
    "start": "1497360",
    "end": "1503120"
  },
  {
    "text": "grpc curl to which is a tool to essentially",
    "start": "1503120",
    "end": "1510600"
  },
  {
    "text": "is that better a little bit yeah um",
    "start": "1514240",
    "end": "1519679"
  },
  {
    "text": "the left side is pretty small isn't it oh yeah perfect um",
    "start": "1519679",
    "end": "1525760"
  },
  {
    "text": "yeah so these are grpc services and you're gonna have to trust me for that just in the interest of time we have four minutes left um",
    "start": "1525760",
    "end": "1532320"
  },
  {
    "text": "and we're going to want to create graphql services from these jrpg services without even touching application code",
    "start": "1532320",
    "end": "1538400"
  },
  {
    "text": "so how are we going to do that i'm actually going to open up canines on the left here to show the cluster once again",
    "start": "1538400",
    "end": "1545520"
  },
  {
    "text": "oh uh okay it's a little truncated but we'll",
    "start": "1545520",
    "end": "1550799"
  },
  {
    "text": "live with it so we have a discovery deployment which",
    "start": "1550799",
    "end": "1556799"
  },
  {
    "text": "is going to essentially do our discovery for us our graphql discovery which uh",
    "start": "1556799",
    "end": "1562159"
  },
  {
    "text": "is the magic i was talking about earlier where we just hit a button and the graphql api should show up on the",
    "start": "1562159",
    "end": "1569120"
  },
  {
    "text": "right and hitting the button there was just scaling the deployment to one we just enabled it the the controller there",
    "start": "1569120",
    "end": "1575200"
  },
  {
    "text": "and there we go okay well there they are so these graphql apis were just",
    "start": "1575200",
    "end": "1582000"
  },
  {
    "text": "generated when we created the discovery deployment and these are",
    "start": "1582000",
    "end": "1587760"
  },
  {
    "text": "fully flush graphql schemas that are generated from our protobuf types",
    "start": "1587760",
    "end": "1593760"
  },
  {
    "text": "this so this is kind of what the schema looks like with resolver configuration this is the",
    "start": "1593760",
    "end": "1599679"
  },
  {
    "text": "declarative configuration we were talking about earlier and we can",
    "start": "1599679",
    "end": "1605919"
  },
  {
    "text": "query these schemas remember port forward yes where's the",
    "start": "1606480",
    "end": "1613480"
  },
  {
    "text": "i'm going to go ahead and pour forward the gateway proxy that's doing the graphql logic",
    "start": "1618159",
    "end": "1624600"
  },
  {
    "text": "typing like this is a lot harder than i thought it would be",
    "start": "1628240",
    "end": "1632640"
  },
  {
    "text": "okay well there there it is so here's a query that we can issue to the user service",
    "start": "1636559",
    "end": "1642720"
  },
  {
    "text": "which gives us information about the user and we can see that we're creating a graphql query",
    "start": "1642720",
    "end": "1648159"
  },
  {
    "text": "which gets translated into a grpc call and we get back a grp3 response which",
    "start": "1648159",
    "end": "1653279"
  },
  {
    "text": "once again we're translating to a graphql response and this none of none of the application developers are",
    "start": "1653279",
    "end": "1659440"
  },
  {
    "text": "really doing this this is all happening in the graphql gateway and we can also do the same thing with",
    "start": "1659440",
    "end": "1665760"
  },
  {
    "text": "our product service where we're issuing a graphql query getting a graphql response and once again i want to",
    "start": "1665760",
    "end": "1672320"
  },
  {
    "text": "emphasize the fact that we're not changing any application code here we are",
    "start": "1672320",
    "end": "1677440"
  },
  {
    "text": "doing translation in the gateway that's translating our graphql request to grpc and once again response back to graphql",
    "start": "1677440",
    "end": "1685600"
  },
  {
    "text": "so now we want to stitch these two services together our user service and our product service you'll notice that the product service",
    "start": "1685600",
    "end": "1692640"
  },
  {
    "text": "exposes the seller field with a username but we might want more information for about the seller like their first name",
    "start": "1692640",
    "end": "1698799"
  },
  {
    "text": "the last name what country they live in but this schema doesn't expose that if it did you would see it in the",
    "start": "1698799",
    "end": "1705039"
  },
  {
    "text": "autocomplete so instead we've now created a graphql",
    "start": "1705039",
    "end": "1711039"
  },
  {
    "text": "stitch schema i'll try and zoom in a little more there so you can see the endpoint is a little bit different",
    "start": "1711039",
    "end": "1716240"
  },
  {
    "text": "essentially we're serving a different endpoint we're serving a stitched graphql schema and what we can do now is we can actually",
    "start": "1716240",
    "end": "1722960"
  },
  {
    "text": "query across schemas by stitching them together and so we've now created a query that",
    "start": "1722960",
    "end": "1729760"
  },
  {
    "text": "queries the products service as well as the user service and something really interesting that we",
    "start": "1729760",
    "end": "1735679"
  },
  {
    "text": "can do here is now if you remember the product service only gave us information about the username",
    "start": "1735679",
    "end": "1740799"
  },
  {
    "text": "well we can also query the product service for the first name which comes from the user service as",
    "start": "1740799",
    "end": "1746799"
  },
  {
    "text": "well as the last name anything that the user service exposes can now be accessed from the product",
    "start": "1746799",
    "end": "1752640"
  },
  {
    "text": "service and this is the magic of schema stitching so yeah that's basically the demo",
    "start": "1752640",
    "end": "1759600"
  },
  {
    "text": "let's get back to the slides",
    "start": "1759600",
    "end": "1763320"
  },
  {
    "text": "and uh yeah that's basically our the content of our talk yeah and we got one minute so if there's any quick questions",
    "start": "1768000",
    "end": "1774480"
  },
  {
    "text": "this would be the moment great job love the live demo let's give",
    "start": "1774480",
    "end": "1780159"
  },
  {
    "text": "them a round of applause",
    "start": "1780159",
    "end": "1783440"
  },
  {
    "text": "all right we have one question we only have time to take one question if you can walk to the middle and just speak",
    "start": "1786159",
    "end": "1792399"
  },
  {
    "text": "out your question that would be awesome",
    "start": "1792399",
    "end": "1796640"
  },
  {
    "text": "thank you how would you do payload validation when you have some different services to each",
    "start": "1798880",
    "end": "1804960"
  },
  {
    "text": "when you have such a state schema together i'm assuming you're saying we were to",
    "start": "1804960",
    "end": "1810240"
  },
  {
    "text": "have a service that's a grpc service for example and it sends a valid uh payload",
    "start": "1810240",
    "end": "1815440"
  },
  {
    "text": "that's not completely as in check in the schema of what incoming request you're getting for your particular service",
    "start": "1815440",
    "end": "1822720"
  },
  {
    "text": "would that fit in yeah so you're saying so graphql already has this built in like you can't issue a",
    "start": "1822720",
    "end": "1830559"
  },
  {
    "text": "request to a graphql server that doesn't exist within the schema you can't ask for data that doesn't exist within the",
    "start": "1830559",
    "end": "1836480"
  },
  {
    "text": "graphql yeah we send like a graphql query or mutation and it just to be spec compliant and so when we're working at",
    "start": "1836480",
    "end": "1842559"
  },
  {
    "text": "the graphql level all the types are graphql types the request that you send is a graphql query it has a specific",
    "start": "1842559",
    "end": "1849279"
  },
  {
    "text": "shape that can be validated and that just gets translated via resolver into how you resolve each field um so that's",
    "start": "1849279",
    "end": "1855279"
  },
  {
    "text": "really part of the graphql spec if i understand the connect question correctly okay",
    "start": "1855279",
    "end": "1860799"
  },
  {
    "text": "and if for example if you're upstream if your service falls out of",
    "start": "1860799",
    "end": "1866320"
  },
  {
    "text": "sync with the graphql schema that we generated um this can be done automatically as you saw we it was kind",
    "start": "1866320",
    "end": "1872399"
  },
  {
    "text": "of created on the fly every time your service changes we discover a more updated version of your graphical schema",
    "start": "1872399",
    "end": "1878159"
  },
  {
    "text": "so it always stays in sync thank you",
    "start": "1878159",
    "end": "1883039"
  }
]