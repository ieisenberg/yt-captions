[
  {
    "text": "okay so I'm going to talk about proxying HTTP 3 with connect UDP in Envoy this is",
    "start": "199",
    "end": "6440"
  },
  {
    "text": "a joint work with Eric Abby and David So before I talk about connect UDP",
    "start": "6440",
    "end": "13559"
  },
  {
    "text": "let's see the current landscape of proing protocols to understand why we needed a new",
    "start": "13559",
    "end": "19920"
  },
  {
    "text": "protocol so the simplest approach of uh proxying would be using a regular TCP or",
    "start": "19920",
    "end": "26760"
  },
  {
    "text": "UDP proxy uh which simply forwards packets based on F Tuple this approach may have some use",
    "start": "26760",
    "end": "34480"
  },
  {
    "text": "cases but it's limited to static forwarding rule based on F Tuple so it doesn't allow a client to connect to an",
    "start": "34480",
    "end": "40960"
  },
  {
    "text": "arbitrary Target 3 proxy so to overcome this limitation the",
    "start": "40960",
    "end": "46160"
  },
  {
    "text": "sock protocol was developed a long time ago and it defined request commands to",
    "start": "46160",
    "end": "52000"
  },
  {
    "text": "let clients open a TCP or UDP socket to a to an arbitrary Target address",
    "start": "52000",
    "end": "57559"
  },
  {
    "text": "Port however it sends those information in plain text so anyone who watches the",
    "start": "57559",
    "end": "63039"
  },
  {
    "text": "network can see whether the CL which which servers a client access",
    "start": "63039",
    "end": "68799"
  },
  {
    "text": "to so the HTTP connect method is an HTTP method uh that serves a similar purpose",
    "start": "68799",
    "end": "75000"
  },
  {
    "text": "to socks but with uh https or TLS it um highs the target information from",
    "start": "75000",
    "end": "81560"
  },
  {
    "text": "Network e dropper naturally however it only supports creating TCP connections to targets um",
    "start": "81560",
    "end": "89439"
  },
  {
    "text": "not p uh not UDP so you cannot use connect for UDP based protocols for",
    "start": "89439",
    "end": "95720"
  },
  {
    "text": "proxy someone may argue that we can just use VPN protocols like open bpn or or",
    "start": "95720",
    "end": "101320"
  },
  {
    "text": "ipac or wire guard but they require admin privileges so um they may not be",
    "start": "101320",
    "end": "107759"
  },
  {
    "text": "always a viable viable option to choose so to overcome those limitations",
    "start": "107759",
    "end": "114960"
  },
  {
    "text": "connect UDP was recently standardized in ietf it allows HTTP clients to send UDP",
    "start": "114960",
    "end": "122759"
  },
  {
    "text": "packets to an arbitrary Target 3 proxy so a client sends payload data as HTTP",
    "start": "122759",
    "end": "129840"
  },
  {
    "text": "messages and a proxy send those data as UDP datagrams to over to the",
    "start": "129840",
    "end": "136879"
  },
  {
    "text": "Target it is defined in the RFC 9298 and it supports all existing",
    "start": "136879",
    "end": "143400"
  },
  {
    "text": "versions of HTTP so for HTTP 1 and uh for HTTP 2 and HTTP 3 the connect UDP",
    "start": "143400",
    "end": "150400"
  },
  {
    "text": "request is sent as extended connect request and for HTTP 1.1 it's sent as an",
    "start": "150400",
    "end": "156040"
  },
  {
    "text": "upgrade request so I will show you how this work with more details in the protocol level",
    "start": "156040",
    "end": "162080"
  },
  {
    "text": "actually so let's see how um this works a client to establish a new UDP tunnel a",
    "start": "162080",
    "end": "169640"
  },
  {
    "text": "client first needs to send a connect UDP request in the following format to a",
    "start": "169640",
    "end": "175239"
  },
  {
    "text": "proxy so in h23 it's extended connect request and it it's how it looks like",
    "start": "175239",
    "end": "180519"
  },
  {
    "text": "and let's focus on the protocol and path header Fields now to indicate it's a connect gr",
    "start": "180519",
    "end": "187519"
  },
  {
    "text": "request the protocol header field is set to connect UDP and the target address",
    "start": "187519",
    "end": "193120"
  },
  {
    "text": "Port information is specified in the path header field in the URI",
    "start": "193120",
    "end": "198760"
  },
  {
    "text": "template and um the the target address can be a domain name and in that case",
    "start": "198760",
    "end": "204000"
  },
  {
    "text": "the proxy must perform DNS resolution before sending a response",
    "start": "204000",
    "end": "210640"
  },
  {
    "text": "then um proxy creates a UDP socket to the Target address and port and unlike connect um it's a UDP socket so no",
    "start": "210640",
    "end": "218000"
  },
  {
    "text": "handshake to be done at this setup phase and once the socket is created the",
    "start": "218000",
    "end": "223400"
  },
  {
    "text": "proxy sends a success response to the client like this and as soon as the client receives",
    "start": "223400",
    "end": "229480"
  },
  {
    "text": "a response it assumes that tunnel um is established and start to send data using",
    "start": "229480",
    "end": "235000"
  },
  {
    "text": "HTTP datagrams so the HTTP datagrams was also recent ly standardized in RFC 9297",
    "start": "235000",
    "end": "242720"
  },
  {
    "text": "and I I'll explain more about this and why why we needed this one later in the later",
    "start": "242720",
    "end": "248239"
  },
  {
    "text": "slides so with connect GP uh we can overcome the limitations of um existing",
    "start": "248239",
    "end": "253680"
  },
  {
    "text": "proing protocols I mentioned earlier it supports on arbitrary Target",
    "start": "253680",
    "end": "259479"
  },
  {
    "text": "um and it provides useful security and PR privacy properties um like HTP connect and it",
    "start": "259479",
    "end": "265880"
  },
  {
    "text": "can be implemented in the application Level and most importantly in support UDP protocols on likee",
    "start": "265880",
    "end": "272400"
  },
  {
    "text": "connect however I would like to emphasize that connect UDP is not just for um UDP",
    "start": "272400",
    "end": "279720"
  },
  {
    "text": "tunneling combined with quick or H3 it unlocks the power of application Level",
    "start": "279720",
    "end": "286360"
  },
  {
    "text": "proxying so with um H2 or H1 um a loss in a stream can block other indeep",
    "start": "286360",
    "end": "295240"
  },
  {
    "text": "independent HTTP streams because it's TCP but with http hp3 downstreams we can",
    "start": "295240",
    "end": "301080"
  },
  {
    "text": "now Multiplex multiple quick connections or hp3 Connections in a single quick or",
    "start": "301080",
    "end": "306840"
  },
  {
    "text": "ht3 connections without this head of head of line blocking",
    "start": "306840",
    "end": "312000"
  },
  {
    "text": "problem also the traffic to the proxy and also the target looks exactly like a",
    "start": "312000",
    "end": "317479"
  },
  {
    "text": "normal normal HTTP traffic so it provides excellent sensorship resistance um property and also obviously the",
    "start": "317479",
    "end": "325199"
  },
  {
    "text": "traffic is encrypted uh with TLS 1.3 inside quick so connect EDP was standardized in ITF",
    "start": "325199",
    "end": "333199"
  },
  {
    "text": "mask working group and there are multiple efforts going on in the group to leverage those excellent properties",
    "start": "333199",
    "end": "339600"
  },
  {
    "text": "of quick based application Level processing in other use",
    "start": "339600",
    "end": "344479"
  },
  {
    "text": "cases um so to explain how we implemented connect UDP in Envoy let's",
    "start": "345319",
    "end": "351319"
  },
  {
    "text": "first look at how Envoy handles on incoming HTTP request in a very high",
    "start": "351319",
    "end": "356560"
  },
  {
    "text": "level so first TCP um package or UDP data grams are received through a TCP",
    "start": "356560",
    "end": "362479"
  },
  {
    "text": "orp listener in Envoy and the envoy codak inside HTTP",
    "start": "362479",
    "end": "368080"
  },
  {
    "text": "codc inside HTTP Connection Manager decodes the decrypted by uh streams as",
    "start": "368080",
    "end": "374280"
  },
  {
    "text": "HTTP messages and the router is respon router",
    "start": "374280",
    "end": "379360"
  },
  {
    "text": "filter in htcm is responsible for selecting a cluster based on the",
    "start": "379360",
    "end": "384639"
  },
  {
    "text": "configured routing rule um and then the cluster manager ch uses a host in the cluster and the",
    "start": "384639",
    "end": "392319"
  },
  {
    "text": "corresponding Upstream connection pool to that host um is used to send a",
    "start": "392319",
    "end": "397520"
  },
  {
    "text": "request to Upstream through one of the connections in the Upstream connection",
    "start": "397520",
    "end": "402680"
  },
  {
    "text": "pool so for UDP tunnel establishment we've made uh the following changes so",
    "start": "402680",
    "end": "408960"
  },
  {
    "text": "I'll explain the details of those changes um in the in the next",
    "start": "408960",
    "end": "414440"
  },
  {
    "text": "slides so let's first focus on the changes made inside um HTTP connection man",
    "start": "414440",
    "end": "421400"
  },
  {
    "text": "manager so Envoy um internally normalizes http2 and HTTP 3 extended",
    "start": "422080",
    "end": "428599"
  },
  {
    "text": "connect request to http 1.1 upgrade request so this is not specific to",
    "start": "428599",
    "end": "434360"
  },
  {
    "text": "connect UDP this is mainly to use the same um HTTP upgrade logic regardless of",
    "start": "434360",
    "end": "440479"
  },
  {
    "text": "the HTTP Downstream um protocol level so this is an example connect GDP",
    "start": "440479",
    "end": "447919"
  },
  {
    "text": "request headers and it becomes the sorry so it becomes",
    "start": "447919",
    "end": "454080"
  },
  {
    "text": "the upgrade request in Envoy like this so as you can see uh the extended",
    "start": "454080",
    "end": "459240"
  },
  {
    "text": "connect method is transformed to get request uh with upgrade token in H1",
    "start": "459240",
    "end": "464360"
  },
  {
    "text": "inside envoy and um the upgrade header field value is set",
    "start": "464360",
    "end": "470800"
  },
  {
    "text": "to the same um protocol value header field in the in the get get",
    "start": "470800",
    "end": "477560"
  },
  {
    "text": "request and secondly uh the second change we made uh inside HTTP Connection",
    "start": "478319",
    "end": "484800"
  },
  {
    "text": "Manager was to make Envoy rewrite the Authority or host header field so existing Envoy codes and",
    "start": "484800",
    "end": "492440"
  },
  {
    "text": "filters assume that the filters um the target address in the is located inside",
    "start": "492440",
    "end": "499680"
  },
  {
    "text": "the Authority or host header field but as you can see in the connect GDP case",
    "start": "499680",
    "end": "505960"
  },
  {
    "text": "the target address information is inside a path header field so we wanted to make the subsequent on",
    "start": "505960",
    "end": "512560"
  },
  {
    "text": "filters work just correctly with the connect request so what we did was we made um htcm just rewrite the host",
    "start": "512560",
    "end": "520680"
  },
  {
    "text": "header part with the host uh the target address information in the path path",
    "start": "520680",
    "end": "525920"
  },
  {
    "text": "header field value so now the subsequent uh filters like router filter or any other HTTP filters would just work um",
    "start": "525920",
    "end": "535760"
  },
  {
    "text": "normally and then we made some changes in the router filter and as I mentioned the router is router filter is is",
    "start": "537279",
    "end": "544160"
  },
  {
    "text": "responsible for routing a a request to a correct um Upstream",
    "start": "544160",
    "end": "551000"
  },
  {
    "text": "cluster so we made um existing connect matcher which originally only matched um",
    "start": "551000",
    "end": "557839"
  },
  {
    "text": "HTTP connect methods um match also the HTTP connect UDP connect UDP request so",
    "start": "557839",
    "end": "566360"
  },
  {
    "text": "now connect match can match connect UDP request and we also introduced a new upgraded type token connect UDP so that",
    "start": "566360",
    "end": "574320"
  },
  {
    "text": "uh a routing word can spefic specifically match connect UDP request so in this example connect UDP config",
    "start": "574320",
    "end": "581279"
  },
  {
    "text": "yam file uh um HTTP connect UDP request",
    "start": "581279",
    "end": "586560"
  },
  {
    "text": "will be routed to a Upstream cluster one",
    "start": "586560",
    "end": "592640"
  },
  {
    "text": "here so now let's take a look at the Upstream connection pool part",
    "start": "594560",
    "end": "601120"
  },
  {
    "text": "so Envoy Associates a connection pool to each Upstream host or",
    "start": "602560",
    "end": "608320"
  },
  {
    "text": "endpoint and previously UMO had two types of Upstream connection",
    "start": "608320",
    "end": "615399"
  },
  {
    "text": "pools there was uh HTTP connection pool which is used for HTTP upstreams so enoy",
    "start": "616600",
    "end": "623680"
  },
  {
    "text": "creates multiple TCP or quick connections um and reuses them for",
    "start": "623680",
    "end": "629440"
  },
  {
    "text": "performance and efficiency reasons and there's a TCP connection",
    "start": "629440",
    "end": "634839"
  },
  {
    "text": "pool and this is specifically for HTTP connect method so omo creates only one",
    "start": "634839",
    "end": "640800"
  },
  {
    "text": "new connection for each Target host in the HTTP connect case so it's not really",
    "start": "640800",
    "end": "646240"
  },
  {
    "text": "a connection pool and enoy keeps the mapping between a downstream HTTP stream",
    "start": "646240",
    "end": "651680"
  },
  {
    "text": "and a created TCP connection so that it can convert incoming HTTP data frames",
    "start": "651680",
    "end": "658160"
  },
  {
    "text": "into TCP by streams so we need to implement it uh we need to implement something similar for",
    "start": "658160",
    "end": "664839"
  },
  {
    "text": "UDP UDP upstream and UDP connection Pole to support connect",
    "start": "664839",
    "end": "670279"
  },
  {
    "text": "UDP so we added UDP Upstream handling code that creates a UDP uh datagram socket inside UDP",
    "start": "670320",
    "end": "679360"
  },
  {
    "text": "connection pole so for um and if the socket creation um succeeds the UDP",
    "start": "679360",
    "end": "686720"
  },
  {
    "text": "Upstream code as the success stay status code to the response like",
    "start": "686720",
    "end": "691959"
  },
  {
    "text": "this then it stores the mapping between the HTTP Downstream and the",
    "start": "691959",
    "end": "697399"
  },
  {
    "text": "corresponding UTP socket created like HTTP connect case so that it can pass",
    "start": "697399",
    "end": "702560"
  },
  {
    "text": "HTTP data to the right of stream",
    "start": "702560",
    "end": "706839"
  },
  {
    "text": "socket so now let's switch gear to the data path I'll explain how we changed en",
    "start": "707880",
    "end": "713920"
  },
  {
    "text": "void to enable data exchange through the established UDP tunnel",
    "start": "713920",
    "end": "720959"
  },
  {
    "text": "so as I mentioned earlier HTTP datagrams and capsules are used to send uh data",
    "start": "721800",
    "end": "728240"
  },
  {
    "text": "after UDP tunnel is established and we've made the following changes in the hp3 codec and upam",
    "start": "728240",
    "end": "735560"
  },
  {
    "text": "connection pool to support um ht3 datagrams and capsule so before talking about HTTP",
    "start": "735560",
    "end": "743199"
  },
  {
    "text": "datagrams uh let let me first explain um the issue of HTTP 3 or quick proing and",
    "start": "743199",
    "end": "750680"
  },
  {
    "text": "to explain why we needed HTTP data Gams so for um ht3 proxying or quick proxying",
    "start": "750680",
    "end": "757399"
  },
  {
    "text": "in general first client and proxy establish a H3 connection then a client",
    "start": "757399",
    "end": "764399"
  },
  {
    "text": "sends a connect GP request to the proxy as an HTTP uh",
    "start": "764399",
    "end": "771399"
  },
  {
    "text": "stream and to establish a UDP tunnel to a Target server and through this stream a client",
    "start": "771399",
    "end": "779040"
  },
  {
    "text": "establishes a quick connection um to the Target then a client can send quick or",
    "start": "779040",
    "end": "785519"
  },
  {
    "text": "H3 streams through this inner connection and as you can see quick",
    "start": "785519",
    "end": "791959"
  },
  {
    "text": "connections are nasted in H3 or quick proxin case and this can cause uh the",
    "start": "791959",
    "end": "798160"
  },
  {
    "text": "following issues the most important one is double loss recovery uh when there's a packet",
    "start": "798160",
    "end": "804440"
  },
  {
    "text": "loss the both inner and outer quick connections um re react to that packet",
    "start": "804440",
    "end": "810120"
  },
  {
    "text": "loss and does redundant redundant R transmission and this can ex exagerate the network congestion um and degrades",
    "start": "810120",
    "end": "817519"
  },
  {
    "text": "the network performance quite significantly and there's another problem of n congestion control um and",
    "start": "817519",
    "end": "825120"
  },
  {
    "text": "this can make the client overreact to a packet loss and and it can lead to",
    "start": "825120",
    "end": "830880"
  },
  {
    "text": "network underutilization so to solve this problem we needed a way to send the data",
    "start": "830880",
    "end": "836920"
  },
  {
    "text": "unreliably in H3 Stream So to introduce this",
    "start": "836920",
    "end": "843160"
  },
  {
    "text": "unreliability um quick data gram is standardized in RFC",
    "start": "843160",
    "end": "849759"
  },
  {
    "text": "9221 and this allows an application to bypass the retr retransmission mechanism",
    "start": "849759",
    "end": "855720"
  },
  {
    "text": "of quick as necessary and RFC",
    "start": "855720",
    "end": "861199"
  },
  {
    "text": "92227 um H3 datagram format is was defined and it uses quick datagram to",
    "start": "861199",
    "end": "867720"
  },
  {
    "text": "send http data unreliably so with those new two",
    "start": "867720",
    "end": "873519"
  },
  {
    "text": "constructs we can send the data grams unreliably in",
    "start": "873519",
    "end": "878800"
  },
  {
    "text": "H3 so the previous picture is changed uh like this the outer H3 stream can now",
    "start": "878839",
    "end": "885199"
  },
  {
    "text": "become unreliable so we no longer have the nested loss recovery problem or nested congestion",
    "start": "885199",
    "end": "892360"
  },
  {
    "text": "control what about in H1 and H2 so the unreliable delivery is impossible",
    "start": "894199",
    "end": "899880"
  },
  {
    "text": "inherently inherently because they run over TCP uh but RFC 9297 still defined",
    "start": "899880",
    "end": "906240"
  },
  {
    "text": "datagram capsule to allow exchanging um HTTP datagrams um even when there is a",
    "start": "906240",
    "end": "912399"
  },
  {
    "text": "client or server or even proxy that do not support H3 or unreliably unreliable",
    "start": "912399",
    "end": "917720"
  },
  {
    "text": "delivery mechanism it uh but is it allows proxy can convert the um the",
    "start": "917720",
    "end": "924240"
  },
  {
    "text": "datagram capsule to H3 datagrams when H3 connection is available in the path so",
    "start": "924240",
    "end": "930639"
  },
  {
    "text": "it lets client to indicate it wants to send the data grams unreliably whenever",
    "start": "930639",
    "end": "935680"
  },
  {
    "text": "possible to utilize the underlying transport uh protocols unreliable",
    "start": "935680",
    "end": "940880"
  },
  {
    "text": "delivery mechanism as much as possible so I will not delve into the details of",
    "start": "940880",
    "end": "946040"
  },
  {
    "text": "it if you're interested please look at the RFC now let's briefly see how Envoy",
    "start": "946040",
    "end": "952440"
  },
  {
    "text": "handles the H3 data gramming capsules with our",
    "start": "952440",
    "end": "957279"
  },
  {
    "text": "changes so first um we made H3 codak um decode",
    "start": "957600",
    "end": "964480"
  },
  {
    "text": "H3 datagrams as datagram capture for normalization and this is mainly for um",
    "start": "964480",
    "end": "972160"
  },
  {
    "text": "our internal enoy processing logic can just um do everything on top on on",
    "start": "972160",
    "end": "978040"
  },
  {
    "text": "datagram capsule regardless of the HTTP Downstream version so for opum connection pool um",
    "start": "978040",
    "end": "985399"
  },
  {
    "text": "it can just decapsulate datagram capsule and and the payload as UDP uh UDP",
    "start": "985399",
    "end": "991800"
  },
  {
    "text": "datagrams Upstream so it becomes UDP diagrams uh from the perspective of the target",
    "start": "991800",
    "end": "998639"
  },
  {
    "text": "server and um in the Upstream to Downstream case it's pretty much the exact opposite the UDP diagram becomes um",
    "start": "998639",
    "end": "1006600"
  },
  {
    "text": "encapsulated into dat diagram capsule and for H3 Downstream connection the H3",
    "start": "1006600",
    "end": "1012880"
  },
  {
    "text": "codak uh encode the datagram capsule into H3 datagram using um quick datagram",
    "start": "1012880",
    "end": "1020480"
  },
  {
    "text": "so uh now let's take a quick look at a demo of this feature in action so there was no uh widely",
    "start": "1021959",
    "end": "1029959"
  },
  {
    "text": "available connect UDP client um because connect UDP was recently standardized so our team created a test task client for",
    "start": "1029959",
    "end": "1037798"
  },
  {
    "text": "connect UDP request and I'll just use the same config file in the envoy proxy",
    "start": "1037799",
    "end": "1042959"
  },
  {
    "text": "um GitHub repository",
    "start": "1042959",
    "end": "1050400"
  },
  {
    "text": "okay think I should have duplicated display okay um let me",
    "start": "1061799",
    "end": "1067519"
  },
  {
    "text": "see all right so I am running uh the envoy server now and this is running in",
    "start": "1068280",
    "end": "1074640"
  },
  {
    "text": "my laptop so as you can see I disabled the loging um and just enable the access",
    "start": "1074640",
    "end": "1080480"
  },
  {
    "text": "log to see uh to easily see what's going on on the eny",
    "start": "1080480",
    "end": "1085880"
  },
  {
    "text": "[Music] side and yeah this is a command for the",
    "start": "1087650",
    "end": "1093679"
  },
  {
    "text": "client um as you can see um you can focus on this part first this is the the",
    "start": "1093679",
    "end": "1099600"
  },
  {
    "text": "address of the proxy which is running inside my laptop and this is the port number and this is the target address so",
    "start": "1099600",
    "end": "1105320"
  },
  {
    "text": "let's first connect to uh google.com which supports",
    "start": "1105320",
    "end": "1110880"
  },
  {
    "text": "H3 um so yeah as you can see on the on proxy side it received um HTTP Conn UDP",
    "start": "1111320",
    "end": "1119159"
  },
  {
    "text": "request and it's transformed to upgrade request as you can see it's actually internally normalized into to get",
    "start": "1119159",
    "end": "1124799"
  },
  {
    "text": "request and you can see the uh Target information in the path field and the",
    "start": "1124799",
    "end": "1130520"
  },
  {
    "text": "the target information is is correctly parsed into into Envoy and on the right",
    "start": "1130520",
    "end": "1136760"
  },
  {
    "text": "side the client shows that um it received so the kind of order is the opposite but it first received the",
    "start": "1136760",
    "end": "1142280"
  },
  {
    "text": "success code for the successful UDP tunnel establishment and and the above you can see the HTML uh content that",
    "start": "1142280",
    "end": "1148960"
  },
  {
    "text": "google.com returned and we can go try um youtube.com as well and it works fine as",
    "start": "1148960",
    "end": "1156120"
  },
  {
    "text": "well if you want me to try a non-g Google server cloud flare let me see",
    "start": "1156120",
    "end": "1161200"
  },
  {
    "text": "Cloud flare also provide a test uh server for H3 as you can see yeah this",
    "start": "1161200",
    "end": "1166760"
  },
  {
    "text": "one also works fine",
    "start": "1166760",
    "end": "1170240"
  },
  {
    "text": "all right so obviously the major use case of connect UTP is is enabling enabling H3",
    "start": "1176960",
    "end": "1184320"
  },
  {
    "text": "proxy or with H3 a client can create um H3 connection to a proxy and then it can",
    "start": "1184320",
    "end": "1190720"
  },
  {
    "text": "create multiple H3 connections through that proxy without the head of line um",
    "start": "1190720",
    "end": "1195960"
  },
  {
    "text": "blocking problem I mentioned earlier so it really enables the high performance application Level",
    "start": "1195960",
    "end": "1201880"
  },
  {
    "text": "proxy and it also provides excellent security and privacy and C resistance thanks to the quick and TLS",
    "start": "1201880",
    "end": "1209039"
  },
  {
    "text": "1.3 and and specifically uh with H3 proxying the target servers can only see",
    "start": "1209039",
    "end": "1215880"
  },
  {
    "text": "the address of the proxy not the client because the UDP tunnel is established",
    "start": "1215880",
    "end": "1220960"
  },
  {
    "text": "between proxy and Target so it provides a kind some degree of IP address privacy",
    "start": "1220960",
    "end": "1227159"
  },
  {
    "text": "for client but the proxy can still see the target address and watch which ver which",
    "start": "1227159",
    "end": "1233840"
  },
  {
    "text": "servers a client is connecting to so can you hop over this",
    "start": "1233840",
    "end": "1239320"
  },
  {
    "text": "limitation we can hide even the target address from the proxy by just",
    "start": "1239320",
    "end": "1244880"
  },
  {
    "text": "introducing a second proxy and do two hop proxying and in this setup a client",
    "start": "1244880",
    "end": "1251720"
  },
  {
    "text": "opens a H3 connection to the second proxy through the first proxy using a",
    "start": "1251720",
    "end": "1256840"
  },
  {
    "text": "connect GDP like this and it uses that stream to connect to talk to the second proxy then the client",
    "start": "1256840",
    "end": "1264480"
  },
  {
    "text": "again uses connect UDP um to create U multiple H3 connection to the",
    "start": "1264480",
    "end": "1270640"
  },
  {
    "text": "Target like this so in this scenario multiple ht3",
    "start": "1270640",
    "end": "1275919"
  },
  {
    "text": "streams are nested inside outer H3 stream from the client's",
    "start": "1275919",
    "end": "1280960"
  },
  {
    "text": "perspective because the outer stream is encrypted with quick between the client",
    "start": "1280960",
    "end": "1287159"
  },
  {
    "text": "and proxy 2 the proxy one cannot see the connect UDP request sent to proxy 2 so",
    "start": "1287159",
    "end": "1293720"
  },
  {
    "text": "it HIDs the target address from the private from the proxy one's point of view and proxy 2 sees the target address",
    "start": "1293720",
    "end": "1301840"
  },
  {
    "text": "but it sees all those streams coming from the proxy one's address not the client because the the UDP tunnel is",
    "start": "1301840",
    "end": "1308360"
  },
  {
    "text": "established between proxy one and proxy 2 so it hdes the clients address from",
    "start": "1308360",
    "end": "1313520"
  },
  {
    "text": "the proxy to so as a result no proxies have complete information of which client accessing which Target",
    "start": "1313520",
    "end": "1321840"
  },
  {
    "text": "servers and this idea of toop proing for IP address protection has already been realized and deployed um Safari provides",
    "start": "1321840",
    "end": "1329559"
  },
  {
    "text": "iCloud private relay that uses the exact same architecture I showed earlier and chrome has been also announced uh um",
    "start": "1329559",
    "end": "1336480"
  },
  {
    "text": "announced to provide the same service and this 12 proxying with",
    "start": "1336480",
    "end": "1342080"
  },
  {
    "text": "connectp case the second processes are run by third party parties so that no parties can have the full picture of the",
    "start": "1342080",
    "end": "1348000"
  },
  {
    "text": "user traffic and this is actually quite similar to tour network if you're if you're familiar with that and it has",
    "start": "1348000",
    "end": "1353919"
  },
  {
    "text": "pros and cons compared to that so in the case of uh privacy proxying Services",
    "start": "1353919",
    "end": "1359760"
  },
  {
    "text": "clients are authenticated so the services use blind signature scheme to",
    "start": "1359760",
    "end": "1364880"
  },
  {
    "text": "Pro to hide the user ident entity when the proing is actually done um so this can potentially provide a better user",
    "start": "1364880",
    "end": "1371640"
  },
  {
    "text": "ability for repb browsing because if you have ever used tour browser um the last",
    "start": "1371640",
    "end": "1377159"
  },
  {
    "text": "IP address of the onion router are often blocked or the um so you the client",
    "start": "1377159",
    "end": "1382880"
  },
  {
    "text": "should should normally solve capture or their fors are often blocked because the",
    "start": "1382880",
    "end": "1388039"
  },
  {
    "text": "traffics are often associated with abnormal or malicious activities so authenticated traffic can provide some",
    "start": "1388039",
    "end": "1394080"
  },
  {
    "text": "better um Norm more repb browsing experience so that that's one of the cons but the uh compared to tour Network",
    "start": "1394080",
    "end": "1401240"
  },
  {
    "text": "um those Services currently only provide two two H proing uh on the other hand T",
    "start": "1401240",
    "end": "1407240"
  },
  {
    "text": "Network provide three proxy and but I think the both tour",
    "start": "1407240",
    "end": "1412400"
  },
  {
    "text": "Network I mean tour Network and PR and proing Technologies are not orthogonal so they can actually um introduce the",
    "start": "1412400",
    "end": "1420320"
  },
  {
    "text": "pros of the other approaches for example in privac proxy Can U just introduce one",
    "start": "1420320",
    "end": "1425440"
  },
  {
    "text": "more or several more uh proxies with connect UDP",
    "start": "1425440",
    "end": "1430640"
  },
  {
    "text": "easily so to conclude um connect UDP unlocks the power of HTTP proxying and",
    "start": "1430640",
    "end": "1437240"
  },
  {
    "text": "to a new level with quick and H3 and Eno is the first open source um proxy that",
    "start": "1437240",
    "end": "1442720"
  },
  {
    "text": "supports con UDP so um I believe that we believe that envo reporting connectp",
    "start": "1442720",
    "end": "1447840"
  },
  {
    "text": "will accelerate the adoption of this U proessing technology and this is the end of my talk um and I'll be happy to take",
    "start": "1447840",
    "end": "1454640"
  },
  {
    "text": "your question thank [Applause]",
    "start": "1454640",
    "end": "1463819"
  },
  {
    "text": "you question so outside of like Nation",
    "start": "1466799",
    "end": "1472799"
  },
  {
    "text": "where obvious want what who is",
    "start": "1472799",
    "end": "1481520"
  },
  {
    "text": "this",
    "start": "1481520",
    "end": "1484520"
  },
  {
    "text": "having so you're speciically asking about the Privacy proxying um Services okay so um so this is mainly for you",
    "start": "1489320",
    "end": "1497080"
  },
  {
    "text": "know hiding the the IP address from the end servers so for example uh when you're just when",
    "start": "1497080",
    "end": "1504799"
  },
  {
    "text": "a normal user just um browse websites and they those websites often have um",
    "start": "1504799",
    "end": "1511760"
  },
  {
    "text": "often have um tracking service embedded and the IP address and as you know the",
    "start": "1511760",
    "end": "1517360"
  },
  {
    "text": "third party cookies are now being uh being gone although some browsers still supported but IP address is actually a",
    "start": "1517360",
    "end": "1524480"
  },
  {
    "text": "very powerful identifier to identify each individual visual user because IP address um can uh barely changes for for",
    "start": "1524480",
    "end": "1532039"
  },
  {
    "text": "normal users actually so this means that the IP address um using the IP address",
    "start": "1532039",
    "end": "1538600"
  },
  {
    "text": "like there's a lot of incentives to using the IP address as a an identifier to identify and to uh to link the",
    "start": "1538600",
    "end": "1546919"
  },
  {
    "text": "identity of the user to their to their uh web browsing history so by providing those privacy proing services or",
    "start": "1546919",
    "end": "1553159"
  },
  {
    "text": "multihub proing Services uh we can unlink that uh linkability so kind of it",
    "start": "1553159",
    "end": "1558200"
  },
  {
    "text": "protects could potentially protect the privacy of the uh browser users from the",
    "start": "1558200",
    "end": "1564520"
  },
  {
    "text": "uh from those be third party um trackers or or things like that",
    "start": "1564520",
    "end": "1569559"
  },
  {
    "text": "yeah",
    "start": "1569559",
    "end": "1572559"
  },
  {
    "text": "yep you're asking uh if it can be used for hiding the server IP address um so",
    "start": "1577919",
    "end": "1584240"
  },
  {
    "text": "for this one it's a little tricky to do that because you know um here a clients",
    "start": "1584240",
    "end": "1589480"
  },
  {
    "text": "establish those those tunnels right to the server and the way the Privacy is",
    "start": "1589480",
    "end": "1594760"
  },
  {
    "text": "enforced is actually this kind of onion it's very similar to tour so your request is actually um routed through",
    "start": "1594760",
    "end": "1602279"
  },
  {
    "text": "the proxy so the and the server cannot see the um cannot see the IP IP address",
    "start": "1602279",
    "end": "1608840"
  },
  {
    "text": "of the client so I think with just with this uh technique I think it would be a little tricky to do that but",
    "start": "1608840",
    "end": "1616600"
  },
  {
    "text": "yeah",
    "start": "1616600",
    "end": "1619600"
  },
  {
    "text": "oh I see well um I'm not completely sure about that but yeah maybe uh probably",
    "start": "1626480",
    "end": "1631679"
  },
  {
    "text": "maybe possible we can just reverse the traffic direction actually from the server to the client so maybe might be possible yeah but the currently the main",
    "start": "1631679",
    "end": "1637480"
  },
  {
    "text": "use case is for for hiding the IP address of the",
    "start": "1637480",
    "end": "1641640"
  },
  {
    "text": "clients yeah",
    "start": "1643120",
    "end": "1649399"
  },
  {
    "text": "um I have",
    "start": "1649399",
    "end": "1653080"
  },
  {
    "text": "questions okay yeah um go so the first part you were asking um whether the",
    "start": "1676240",
    "end": "1681760"
  },
  {
    "text": "captures are are decapsulated in the in the",
    "start": "1681760",
    "end": "1686240"
  },
  {
    "text": "proxies okay I think I'm not sure I fully understood your question but uh so here just um to show this again um maybe",
    "start": "1697880",
    "end": "1705399"
  },
  {
    "text": "it'll be helped to understand the part so as I mentioned the the there's there's a two part one is UDP connection",
    "start": "1705399",
    "end": "1712279"
  },
  {
    "text": "and UDP tunnel and there separate part which is quick connection or H3 connections so um the UDP conect UDP",
    "start": "1712279",
    "end": "1719200"
  },
  {
    "text": "tunnel is established between client and proxy one and proxy one and proxy2 so there are two separate UDP um",
    "start": "1719200",
    "end": "1726000"
  },
  {
    "text": "connections but the quick connection H3 connections established between first client and proxy and then and and then",
    "start": "1726000",
    "end": "1733519"
  },
  {
    "text": "client and proxy 2 okay so that means that",
    "start": "1733519",
    "end": "1739398"
  },
  {
    "text": "yes that's correct yes you're right yeah yeah so right you're right so",
    "start": "1750000",
    "end": "1758360"
  },
  {
    "text": "and for the second question yeah this is a very good question so obviously you might think that um going through those",
    "start": "1758360",
    "end": "1764080"
  },
  {
    "text": "um those routers uh proxies can increase the latency and um but but you know uh",
    "start": "1764080",
    "end": "1771679"
  },
  {
    "text": "in often not the case that I mean I mean even though the packet are going through a a geographically longer distance it",
    "start": "1771679",
    "end": "1778120"
  },
  {
    "text": "may actually get better performance for example um I think I saw that because uh",
    "start": "1778120",
    "end": "1783200"
  },
  {
    "text": "Apple private relay has been already deployed and they have some data together and they show that actually they saw some performance gains in some",
    "start": "1783200",
    "end": "1790200"
  },
  {
    "text": "cases because you know many um the target servers do not support H3 so they",
    "start": "1790200",
    "end": "1797039"
  },
  {
    "text": "have to actually use um H2 to or H even H1 to connect to an end Target but with",
    "start": "1797039",
    "end": "1803360"
  },
  {
    "text": "this uh privacy proessing from the client to the proxy to the traffic can",
    "start": "1803360",
    "end": "1809320"
  },
  {
    "text": "be actually delivered through H3 and then only the last toop can will be delivered to H2 so actually in that case",
    "start": "1809320",
    "end": "1814919"
  },
  {
    "text": "this can actually increase the uh improve the rate inory even bandwidth so there are some um cases where actually",
    "start": "1814919",
    "end": "1820080"
  },
  {
    "text": "this kind of proxy even provide better perform performance even though it goes through the the the",
    "start": "1820080",
    "end": "1826240"
  },
  {
    "text": "proxies",
    "start": "1826240",
    "end": "1829240"
  },
  {
    "text": "oh Sor sorry",
    "start": "1832279",
    "end": "1835200"
  },
  {
    "text": "again so yeah it's a little hard to listen to I mean um catch your question so maybe I can talk to offline yeah yeah",
    "start": "1850760",
    "end": "1857639"
  },
  {
    "text": "we have folks it was working really well this morning we have the uh we have the question line the question mic if anybody wants to use",
    "start": "1857639",
    "end": "1863840"
  },
  {
    "text": "it yeah you can take that up offline any more questions we're",
    "start": "1863840",
    "end": "1869279"
  },
  {
    "text": "actually we're actually out of time so if anybody else wants to catch up we can do that afterwards thank you very much",
    "start": "1869279",
    "end": "1874320"
  },
  {
    "text": "great talk",
    "start": "1874320",
    "end": "1881240"
  }
]