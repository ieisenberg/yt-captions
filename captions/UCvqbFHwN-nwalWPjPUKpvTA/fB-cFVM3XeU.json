[
  {
    "text": "okay we'll start the next step so it's going to be from chaos to come improving service mesh reliability",
    "start": "6440",
    "end": "14400"
  },
  {
    "text": "so it's going to be by Atul Priya Sharma Atul is a senior developer Advocate",
    "start": "14400",
    "end": "19619"
  },
  {
    "text": "working with infra Cloud Technologies work on and talk about Cloud native",
    "start": "19619",
    "end": "25279"
  },
  {
    "text": "kubernetes and devops to help other developers and organizations adopt Cloud native",
    "start": "25279",
    "end": "31679"
  },
  {
    "text": "welcome Atul hey good afternoon everyone oh okay that was that was loud uh I'm not going to",
    "start": "31679",
    "end": "38399"
  },
  {
    "text": "ask how the lunch was whether you guys are awake or not so I'll straight away",
    "start": "38399",
    "end": "43440"
  },
  {
    "text": "get into the talk so I'll be talking about service mesh reliability using",
    "start": "43440",
    "end": "50399"
  },
  {
    "text": "chaos engineering principles so before that who am I uh I am Atul Priya Sharma and I work as a senior",
    "start": "50399",
    "end": "57600"
  },
  {
    "text": "developer Advocate at info Cloud Technologies I am also one of the 18 cncf ambassadors",
    "start": "57600",
    "end": "63239"
  },
  {
    "text": "in India and one of the organizers for cncf Hyderabad and as part of my job uh",
    "start": "63239",
    "end": "69540"
  },
  {
    "text": "I actually help developers adopt open source Technologies and I help them do so by means of creating developer",
    "start": "69540",
    "end": "76920"
  },
  {
    "text": "documentations blog posts webinars Twitter spaces and talks like these",
    "start": "76920",
    "end": "82640"
  },
  {
    "text": "outside of work I am a big time foodie and a travel blogger and I post my",
    "start": "82640",
    "end": "88860"
  },
  {
    "text": "stories on my blog social maharaj.com so if you are interested you can check that out on Twitter you can find me at the",
    "start": "88860",
    "end": "96000"
  },
  {
    "text": "tech Maharaj and with my name you can check me out on LinkedIn as well",
    "start": "96000",
    "end": "103400"
  },
  {
    "text": "so the agenda is fairly simple I'll talk about a little bit on service mesh something around reliability and",
    "start": "103500",
    "end": "110520"
  },
  {
    "text": "resiliency chaos engineering and how we can do chaos engineering for service",
    "start": "110520",
    "end": "116280"
  },
  {
    "text": "mesh and then I also have a short demo before I get into this uh how many of",
    "start": "116280",
    "end": "122460"
  },
  {
    "text": "you are from outside of Chennai can you have a quick raise of hands how many",
    "start": "122460",
    "end": "127560"
  },
  {
    "text": "people coming from outside of Chennai okay okay there are quite a few people",
    "start": "127560",
    "end": "132660"
  },
  {
    "text": "so uh my first visit to Chennai was in 2016 and I was here to attend a family",
    "start": "132660",
    "end": "139080"
  },
  {
    "text": "function and being the traveler that I am uh you know I took a day off and you",
    "start": "139080",
    "end": "144120"
  },
  {
    "text": "know let us explore Chennai so Chennai is a very vibrant uh City uh you know you have uh different places different",
    "start": "144120",
    "end": "150720"
  },
  {
    "text": "areas which which have their own specialty if you want to shop go to T nagar go to pondi Bazaar you know you",
    "start": "150720",
    "end": "156959"
  },
  {
    "text": "can get some really nice stuff there uh if you're interested in cultural things go to mylapore go to Marina Beach uh you",
    "start": "156959",
    "end": "164280"
  },
  {
    "text": "know these are the areas which are famous in Chennai and all of these are known for their own specific stuff",
    "start": "164280",
    "end": "170220"
  },
  {
    "text": "so when you come to software applications especially microservices our applications are similarly vibrant",
    "start": "170220",
    "end": "176099"
  },
  {
    "text": "so we have different microservices each of them responsible for one particular task I might have a micro service which",
    "start": "176099",
    "end": "182819"
  },
  {
    "text": "is responsible for authentication I might have a microservice which is responsible for observability getting",
    "start": "182819",
    "end": "188760"
  },
  {
    "text": "some metrics so on and so forth now I will not talk much about why did",
    "start": "188760",
    "end": "193920"
  },
  {
    "text": "we come to a micro service based approach from a monolith but we'll",
    "start": "193920",
    "end": "198959"
  },
  {
    "text": "straight away uh dive into what uh service mesh actually is so when I spoke about",
    "start": "198959",
    "end": "204900"
  },
  {
    "text": "Chennai and all these vibrant areas it's it's really important for everyone to",
    "start": "204900",
    "end": "210120"
  },
  {
    "text": "ensure that these all these areas are you know in sync they are working fine there's no issues and in the city you",
    "start": "210120",
    "end": "216000"
  },
  {
    "text": "have the municipality or you have the police who is ensuring that everything is working fine you know there's there's",
    "start": "216000",
    "end": "221940"
  },
  {
    "text": "Transportation going from one area to the other you have uh you know communication is fine the signaling the",
    "start": "221940",
    "end": "227879"
  },
  {
    "text": "transport Etc so similarly when it comes to microservice based application we have something called as a service mesh",
    "start": "227879",
    "end": "234000"
  },
  {
    "text": "which is responsible for managing your services uh the communication between",
    "start": "234000",
    "end": "239040"
  },
  {
    "text": "your various services and as well as adding security so the reason why do we need service",
    "start": "239040",
    "end": "245580"
  },
  {
    "text": "mesh I'll probably skip because right from the morning you know we have been listening about microservices monoliths",
    "start": "245580",
    "end": "251519"
  },
  {
    "text": "why do we need conversion so uh my talk is being reduced so thanks to everyone who spoke about it earlier in the day",
    "start": "251519",
    "end": "258239"
  },
  {
    "text": "uh to microservices you know uh sorry talking about service mesh it's it's fairly uh simple in terms of the",
    "start": "258239",
    "end": "264419"
  },
  {
    "text": "architecture you have a control plane you have a data plane and you have a sidecar container for most of the",
    "start": "264419",
    "end": "270000"
  },
  {
    "text": "service mesh if you talk about something like an istio and that's responsible for service to service interactions and it",
    "start": "270000",
    "end": "277020"
  },
  {
    "text": "sits as a proxy so whatever traffic that comes into your cluster it is routed through these uh proxies now the benefit",
    "start": "277020",
    "end": "284160"
  },
  {
    "text": "of service mesh what happened was when we approached for a microservice based architecture you certainly had a lot of",
    "start": "284160",
    "end": "290160"
  },
  {
    "text": "services but then there was a reason why we actually adopted it from the monolith version so the first one was uh you know",
    "start": "290160",
    "end": "296759"
  },
  {
    "text": "service Discovery what happens is when you build uh when you're working on a microservices application and the moment",
    "start": "296759",
    "end": "302340"
  },
  {
    "text": "you have a new microservice coming in instead of you manually configuring and telling for telling your application",
    "start": "302340",
    "end": "308880"
  },
  {
    "text": "that this is the microservice and this is where you need to hit the service mesh actually automates that for you so",
    "start": "308880",
    "end": "313919"
  },
  {
    "text": "the service Discovery is taken care of it also takes care of traffic routing so basically any traffic that comes into",
    "start": "313919",
    "end": "320400"
  },
  {
    "text": "your cluster and the destination so you just provide a rule to it that okay if the traffic is coming from here or",
    "start": "320400",
    "end": "326460"
  },
  {
    "text": "whatever the rule is based on that it should be transferred or transmitted to another instance so things like you know",
    "start": "326460",
    "end": "333000"
  },
  {
    "text": "when you talk about app deployments if you have heard about blue green or Canary releases when you are making",
    "start": "333000",
    "end": "338699"
  },
  {
    "text": "application releases your service mesh also helps you with that thanks to traffic routing it also has features for",
    "start": "338699",
    "end": "346320"
  },
  {
    "text": "load balancing it can do some sort of load balancing so if you have multiple instances you can Define what the",
    "start": "346320",
    "end": "352199"
  },
  {
    "text": "weights are and based on the weights your traffic will be uh you know load balanced it also comes with internal",
    "start": "352199",
    "end": "358320"
  },
  {
    "text": "traces internal mechanism for observability so once you have a service mesh which is implemented into your",
    "start": "358320",
    "end": "363720"
  },
  {
    "text": "cluster you get some sort of visibility into how your services are interacting how the request is flowing and you know",
    "start": "363720",
    "end": "369900"
  },
  {
    "text": "how everything else just just works uh they also enhance security so when I",
    "start": "369900",
    "end": "375840"
  },
  {
    "text": "started working with istio maybe a few months back I thought you know it is just like another service mesh where I",
    "start": "375840",
    "end": "381060"
  },
  {
    "text": "can you know just just put in put an Ingress put it as an Ingress somewhere and the traffic is routed but just last",
    "start": "381060",
    "end": "387300"
  },
  {
    "text": "month I did a webinar on cncf around key cloak and istio where basically your",
    "start": "387300",
    "end": "392520"
  },
  {
    "text": "authentication and authorization was taken care of by key clock and uh the the istio was basically approving the",
    "start": "392520",
    "end": "399840"
  },
  {
    "text": "request based on the tokens that is generated so if you think that a service mesh is required only for traffic",
    "start": "399840",
    "end": "405900"
  },
  {
    "text": "management no there are some numbers which I'll also Point once we move further",
    "start": "405900",
    "end": "411300"
  },
  {
    "text": "and also you know service meshes platform independent so it's not that the service mesh will always run on a",
    "start": "411300",
    "end": "416940"
  },
  {
    "text": "kubernetes cluster it can work on a virtual machine it can work on a server as well",
    "start": "416940",
    "end": "422400"
  },
  {
    "text": "now these are some stats based on the cncf survey that was done in 2022 that's",
    "start": "422400",
    "end": "427680"
  },
  {
    "text": "the source of it so as per the survey almost 60 percent of the respondents use",
    "start": "427680",
    "end": "433080"
  },
  {
    "text": "service mesh in production so you know service mesh is a tried and tested model and almost 19 20 were actually",
    "start": "433080",
    "end": "441000"
  },
  {
    "text": "evaluating it so they would want to use a service mesh in their production as well and one of the main reasons why",
    "start": "441000",
    "end": "448080"
  },
  {
    "text": "they want to use a service mesh was security so 79 of the respondents told that they want to use a service mesh for",
    "start": "448080",
    "end": "454800"
  },
  {
    "text": "improving the security and 78 for observability now there are some",
    "start": "454800",
    "end": "459960"
  },
  {
    "text": "challenges when it comes to implementing service mesh as well uh the first one as per the respondents was integration with",
    "start": "459960",
    "end": "466620"
  },
  {
    "text": "other tools so and the second one was reliability and consistency which will be the focus now because what",
    "start": "466620",
    "end": "472860"
  },
  {
    "text": "essentially happens with the service meshes that you are adding an extra layer on top of your entire infrastructure so you add some sort of",
    "start": "472860",
    "end": "479160"
  },
  {
    "text": "complexity and that is why you need to ensure whether your system including the service mesh will be reliable or not so",
    "start": "479160",
    "end": "487199"
  },
  {
    "text": "getting into reliability and resiliency so reliability as you all know is how your system behaves when you let's say",
    "start": "487199",
    "end": "494340"
  },
  {
    "text": "if it is one plus one is equal to two you know that every scenario you will have one plus one is equal to two so uh",
    "start": "494340",
    "end": "500280"
  },
  {
    "text": "that is what essentially reliability is when you talk about resiliency it's essentially",
    "start": "500280",
    "end": "505919"
  },
  {
    "text": "how fast your system can come back from a disaster so let's say something goes wrong your system has experienced a",
    "start": "505919",
    "end": "512640"
  },
  {
    "text": "downtime how fast is it able to come back to its state so I did prepare these slides I was",
    "start": "512640",
    "end": "519300"
  },
  {
    "text": "supposed to talk well but then if you all have attended the keynote by Uma earlier in the day I think he has covered a gamut of things when it comes",
    "start": "519300",
    "end": "525839"
  },
  {
    "text": "to reliability and resiliency so he did a umbrella talk that he gave in the",
    "start": "525839",
    "end": "530940"
  },
  {
    "text": "morning mine is just a subset of that so thanks to him I can skip a lot of things over here assuming you know you all have",
    "start": "530940",
    "end": "537300"
  },
  {
    "text": "attended it so I'll quickly just go through this so why do you need to check reliability of of your systems you know",
    "start": "537300",
    "end": "543120"
  },
  {
    "text": "a lot of reasons you know you start with uh traffic search if you're using let's say an IRCTC you know that the moment",
    "start": "543120",
    "end": "549180"
  },
  {
    "text": "that call booking happens the traffic just goes up so how does your system behave in that scenario does it respond",
    "start": "549180",
    "end": "554700"
  },
  {
    "text": "to your queries in a particular way as the steady state is possible uh multi-cloud deployments you know that",
    "start": "554700",
    "end": "560459"
  },
  {
    "text": "the applications today that we do are spread across a lot of different service",
    "start": "560459",
    "end": "565500"
  },
  {
    "text": "providers different clouds different regions so you need to see whether your system performs well in those scenarios",
    "start": "565500",
    "end": "570660"
  },
  {
    "text": "as well uh dependency outages Uma did mention about this as well so a lot of applications that we built today",
    "start": "570660",
    "end": "577080"
  },
  {
    "text": "are actually dependent on third party apis or some third-party services so what happens if that service goes down",
    "start": "577080",
    "end": "582660"
  },
  {
    "text": "how reliable is your application in that particular situation Auto scaling and elasticity these are terms we use often",
    "start": "582660",
    "end": "590580"
  },
  {
    "text": "when it comes to Cloud native you know your application should be Auto scalable it should be elastic but then does it",
    "start": "590580",
    "end": "596580"
  },
  {
    "text": "perform how it is required to in that particular scenario so you need to check that and obviously Disaster Recovery if",
    "start": "596580",
    "end": "602399"
  },
  {
    "text": "something goes wrong with your system does it come back in time or not so how do you test for reliability now there",
    "start": "602399",
    "end": "607740"
  },
  {
    "text": "are different ways different tools available different techniques on which you can by which you can test for",
    "start": "607740",
    "end": "613140"
  },
  {
    "text": "reliability the most simplest one is observability so if you are an application developer you write console.debug console.log that's a very",
    "start": "613140",
    "end": "620580"
  },
  {
    "text": "basic form of observability because that is going to help you understand how your application is behaving in a particular",
    "start": "620580",
    "end": "626700"
  },
  {
    "text": "scenario so we have logs metrics traces that is part of observability next thing",
    "start": "626700",
    "end": "632880"
  },
  {
    "text": "that you can do is you can do a load testing there are a lot of tools available something like an Apache jmeter just throw the load to your",
    "start": "632880",
    "end": "640200"
  },
  {
    "text": "application and see how it responds a fault injection so what you essentially do is in your infrastructure or in your",
    "start": "640200",
    "end": "646740"
  },
  {
    "text": "application you in insert a fault which basically can be you know you you snip out the network and you see how your",
    "start": "646740",
    "end": "653100"
  },
  {
    "text": "system responds or you add a delay to it you see how your system responds uh you can do security testing so you can have",
    "start": "653100",
    "end": "659700"
  },
  {
    "text": "a you know a pen a penetration test pen test as they call things like",
    "start": "659700",
    "end": "665040"
  },
  {
    "text": "authentication authorization you can check on those parameters and lastly you can do chaos engineering uh you know a",
    "start": "665040",
    "end": "673140"
  },
  {
    "text": "larger part again was spoken by Uma earlier in the day so chaos engineering",
    "start": "673140",
    "end": "678620"
  },
  {
    "text": "is basically how many of you have gone on a roller coaster ride here can you raise your",
    "start": "678620",
    "end": "684420"
  },
  {
    "text": "hand anyway roller coasters amusement parks yeah cool I have never been on a roller coaster I'm I don't know I'm",
    "start": "684420",
    "end": "691079"
  },
  {
    "text": "scared and that's not the adventure that that I like so what happens when you sit on a roller coaster you are all buckled",
    "start": "691079",
    "end": "696899"
  },
  {
    "text": "up you know that you know you are going to get into an exciting ride it's safe you sit on it your roller coaster just",
    "start": "696899",
    "end": "702660"
  },
  {
    "text": "starts going up and it reaches a point and after that it's just like zoops up zoops up and you're just all over the",
    "start": "702660",
    "end": "707880"
  },
  {
    "text": "place and eventually once you come back to your station you are like okay finally I I'm back and you are alive and",
    "start": "707880",
    "end": "714779"
  },
  {
    "text": "that is why you are here so chaos engineering if I have to explain in a very layman term that is what it's a",
    "start": "714779",
    "end": "720959"
  },
  {
    "text": "roller coaster ride for your application and infrastructure so you know your application is steady you know your",
    "start": "720959",
    "end": "726060"
  },
  {
    "text": "infrastructure is steady but what you do is you purposely add faults at different places at the same time and you see how",
    "start": "726060",
    "end": "732180"
  },
  {
    "text": "your system responds to that so that is a very Layman very easy way to explain what chaos engineering is",
    "start": "732180",
    "end": "739680"
  },
  {
    "text": "so what it is it's the practice of purposefully breaking things to make systems stronger so when you know your",
    "start": "739680",
    "end": "746579"
  },
  {
    "text": "system and infrastructure is in place you try to add faults you try to add failure scenarios to it and see how your",
    "start": "746579",
    "end": "751920"
  },
  {
    "text": "system responds to it uh when was chaos engineering found so early in 2000s when",
    "start": "751920",
    "end": "757680"
  },
  {
    "text": "Netflix pioneered with chaos monkey and the whole gamut of things around chaos engineering because we all know Netflix",
    "start": "757680",
    "end": "763740"
  },
  {
    "text": "is one of the Pioneers when it comes to microservices based application they have a mammoth application in place for",
    "start": "763740",
    "end": "769680"
  },
  {
    "text": "the streaming service uh why do we do that so we do that to ensure that our",
    "start": "769680",
    "end": "774839"
  },
  {
    "text": "systems are robust and reliable because when you are adding faults when you are doing Chaos experiments you are",
    "start": "774839",
    "end": "779940"
  },
  {
    "text": "essentially testing your system and that basically tells you how well your system is built",
    "start": "779940",
    "end": "785279"
  },
  {
    "text": "and how we'll do that we do that intentionally by adding control experiments and see how the failures",
    "start": "785279",
    "end": "792360"
  },
  {
    "text": "happen now chaos engineering as UMass spoke earlier also that it's a concept",
    "start": "792360",
    "end": "797940"
  },
  {
    "text": "which is gaining popularity it's it's important as well but from a distributed systems point of view because today if",
    "start": "797940",
    "end": "804060"
  },
  {
    "text": "you see all your applications that are built are distributed they are you know you have microservices running at",
    "start": "804060",
    "end": "809459"
  },
  {
    "text": "different places different regions a lot of network a lot of complexity so what you see on the screen are eight policies",
    "start": "809459",
    "end": "815639"
  },
  {
    "text": "of distributed computing now what are these so basically when you build a",
    "start": "815639",
    "end": "820860"
  },
  {
    "text": "distributed application these are the things that unknowingly you assume will be in place so when you build an",
    "start": "820860",
    "end": "826680"
  },
  {
    "text": "application you always assume a network will always be reliable they'll never be network will never go down but you know how networks are even in this Hall if",
    "start": "826680",
    "end": "833700"
  },
  {
    "text": "you try to put it to it it will not work because network is not working here so you cannot assume whatever is mentioned",
    "start": "833700",
    "end": "839339"
  },
  {
    "text": "here so your network is reliable latency is zero bandwidth is infinite the network is secure topology doesn't",
    "start": "839339",
    "end": "846540"
  },
  {
    "text": "change uh there is one administrator your transport cost is 0 and the network",
    "start": "846540",
    "end": "852120"
  },
  {
    "text": "is homogeneous so these are the eight things which you unknowingly have in mind when you're building applications",
    "start": "852120",
    "end": "857579"
  },
  {
    "text": "or infrastructure and because of these things you need a chaos Engineering in place because While You're Building",
    "start": "857579",
    "end": "862880"
  },
  {
    "text": "anything unknowingly you know I mean you just assume these things and you need something like a chaos engineering to",
    "start": "862880",
    "end": "870180"
  },
  {
    "text": "ensure that these things are met and your system is robust so I didn't say",
    "start": "870180",
    "end": "875339"
  },
  {
    "text": "this uh it is available at eight policies of distributed computing so I am not saying this but these are the",
    "start": "875339",
    "end": "881399"
  },
  {
    "text": "principles that are in place so while Uma spoke about uh chaos",
    "start": "881399",
    "end": "887760"
  },
  {
    "text": "engineering earlier in the day more from a business and a very high level point of things I am going to deep one level",
    "start": "887760",
    "end": "894120"
  },
  {
    "text": "down and talk about the specifics of what chaos is and mind you I am also very new to chaos engineering it's been",
    "start": "894120",
    "end": "900959"
  },
  {
    "text": "maybe a month I explored it I've been working with service mesh and I thought why not let's let's so I'm a cook also",
    "start": "900959",
    "end": "907199"
  },
  {
    "text": "so I thought just like I make recipes in the kitchen let me try a recipe with chaos engineering and service mesh let",
    "start": "907199",
    "end": "912959"
  },
  {
    "text": "us see what comes out and the result is this actually the result will be after the talk if you guys like it or not so",
    "start": "912959",
    "end": "918899"
  },
  {
    "text": "the chaos principle you know you basically started with a hypothesis so the hypothesis basically is uh what",
    "start": "918899",
    "end": "925860"
  },
  {
    "text": "happens when you introduce a failure in your system so you do that you figure out you write that that for example if I",
    "start": "925860",
    "end": "932339"
  },
  {
    "text": "introduce latency the response time will be affected so that's a hypothesis that you have what you do next is that you",
    "start": "932339",
    "end": "938940"
  },
  {
    "text": "define the steady state of your application so steady state is your application under normal conditions how are application behaves so you have a",
    "start": "938940",
    "end": "946019"
  },
  {
    "text": "hypothesis you have a steady state with you then you do chaos experiments so you simulate real world scenarios on your",
    "start": "946019",
    "end": "952920"
  },
  {
    "text": "application or infrastructure you get the results and then you compare your hypothesis versus the steady state",
    "start": "952920",
    "end": "959279"
  },
  {
    "text": "and whatever Gap is there in between you try to work on those gaps and you try to plug them so when Uma spoke about your",
    "start": "959279",
    "end": "966360"
  },
  {
    "text": "you know latency coming down from sorry increasing from five percent to ten percent uh you need to know that where",
    "start": "966360",
    "end": "972779"
  },
  {
    "text": "it has happened and this the the gap which you get here is actually what tells what you need to fix",
    "start": "972779",
    "end": "979620"
  },
  {
    "text": "now designing chaos experiments is ah is something really uh interesting that I",
    "start": "979620",
    "end": "985440"
  },
  {
    "text": "came across because when I was using uh litmus chaos which I'll show you next uh one someone can think that you know it's",
    "start": "985440",
    "end": "992279"
  },
  {
    "text": "just about designing an experiment so what do I need to do maybe let's just disconnect the internet and see how it",
    "start": "992279",
    "end": "997380"
  },
  {
    "text": "works but this is a real uh interesting Matrix uh you know that that we can assume so if you see I Have Known",
    "start": "997380",
    "end": "1003320"
  },
  {
    "text": "Unknown Known and unknown so this basically is the known input and the",
    "start": "1003320",
    "end": "1008420"
  },
  {
    "text": "output so we are checking if we know the input and if we know the output so the easiest one is known and known so these",
    "start": "1008420",
    "end": "1014060"
  },
  {
    "text": "are things that you are aware of and you understand for example you introduce a latency in your application you know the",
    "start": "1014060",
    "end": "1020060"
  },
  {
    "text": "response time will be affected so you know both the inputs as well as the output the other best thing is unknown",
    "start": "1020060",
    "end": "1025579"
  },
  {
    "text": "and unknown you don't know what will happen you don't know how your system will respond so these are the cases where you are least unfortunately very",
    "start": "1025579",
    "end": "1032298"
  },
  {
    "text": "least exposed to for example ec2 going down some region going down so these are something which you are not prepared to",
    "start": "1032299",
    "end": "1037938"
  },
  {
    "text": "handle so you don't know how your system will respond so that falls in the unknown unknown bracket the entire",
    "start": "1037939",
    "end": "1043280"
  },
  {
    "text": "interesting one is known and unknown so these are things that you are aware of but you don't fully understand so for",
    "start": "1043280",
    "end": "1049460"
  },
  {
    "text": "example you have a deployment on kubernetes I'm assuming a lot of people know kubernetes",
    "start": "1049460",
    "end": "1054860"
  },
  {
    "text": "yes cool so when you have a deployment in kubernetes there is a part attached to it so you know that when a part is",
    "start": "1054860",
    "end": "1061580"
  },
  {
    "text": "killed it will come back again but you don't know how much time it will take to come back so you have a known you have",
    "start": "1061580",
    "end": "1067039"
  },
  {
    "text": "an unknown similarly when you go to unknown unknown in this case let's say you don't know why or when your cluster",
    "start": "1067039",
    "end": "1073460"
  },
  {
    "text": "goes down but because your cluster goes down you know there is a secondary region sitting",
    "start": "1073460",
    "end": "1078500"
  },
  {
    "text": "there where the traffic will be transferred to so this is where you don't know the input but you know how the system will respond to that so",
    "start": "1078500",
    "end": "1084980"
  },
  {
    "text": "majority of the chaos experiments that you will Design will fall in any of these four so the easiest one you know",
    "start": "1084980",
    "end": "1091640"
  },
  {
    "text": "when you start is obviously no known scenarios uh you know Uma spoke about the maturity models so when you start in",
    "start": "1091640",
    "end": "1097460"
  },
  {
    "text": "your organization with chaos engineering the known known ones are the easier ones to start with and that is what I will",
    "start": "1097460",
    "end": "1103100"
  },
  {
    "text": "also talk about now coming to tools so how many of you are aware of the cncf I'm assuming a lot",
    "start": "1103100",
    "end": "1110360"
  },
  {
    "text": "of them so being a cncf Ambassador I'll talk about cncf as well so it's a it's a",
    "start": "1110360",
    "end": "1116240"
  },
  {
    "text": "foundation that is responsible for a lot of Open Source projects you can uh you know you name a project it's part of",
    "start": "1116240",
    "end": "1121760"
  },
  {
    "text": "cnci if kubernetes promises grafana all of them are there so they have a landscape a cncf landscape so you can",
    "start": "1121760",
    "end": "1128120"
  },
  {
    "text": "just Google it or go on their website and see so they have categorized applications on different areas different areas of the life cycle so you",
    "start": "1128120",
    "end": "1135559"
  },
  {
    "text": "have orchestration you have deployments you have build you have tests and you have chaos engineering so the tools that",
    "start": "1135559",
    "end": "1140960"
  },
  {
    "text": "you see here uh you have chaos mesh and litmus these are the cncf incubating tools and the other ones are you know",
    "start": "1140960",
    "end": "1148340"
  },
  {
    "text": "done by the companies or they are in the sandbox or any other mode",
    "start": "1148340",
    "end": "1153500"
  },
  {
    "text": "so the focus for today is litmus and we'll get into why chaos engineering",
    "start": "1153500",
    "end": "1159980"
  },
  {
    "text": "is required in a service mesh",
    "start": "1159980",
    "end": "1165400"
  },
  {
    "text": "okay so I think my slides are not updated anyway so when you talk about chaos uh litmus chaos yeah so there are",
    "start": "1165620",
    "end": "1174140"
  },
  {
    "text": "principles when it uh comes to chaos uh litmus chaos so there are five things",
    "start": "1174140",
    "end": "1179419"
  },
  {
    "text": "that you need to know one is your chaos core which is responsible for executing",
    "start": "1179419",
    "end": "1184520"
  },
  {
    "text": "all your experiments that you pass it and then you have a chaos operator so the chaos operator basically takes",
    "start": "1184520",
    "end": "1190760"
  },
  {
    "text": "instructions from the chaos core and then it passes it on to the cluster",
    "start": "1190760",
    "end": "1195980"
  },
  {
    "text": "where you want to run the particular experiment so that cluster can be the same cluster where chaos is deployed or",
    "start": "1195980",
    "end": "1201740"
  },
  {
    "text": "it can be a different cluster under operation then you have something called as which is a chaos experiment which is",
    "start": "1201740",
    "end": "1207740"
  },
  {
    "text": "nothing but an experiment that you do then you have a chaos result which is the result of the experiment that you",
    "start": "1207740",
    "end": "1213440"
  },
  {
    "text": "have done and lastly you have probes so litmus chaos provides you with health checks and probes so these are basically",
    "start": "1213440",
    "end": "1219200"
  },
  {
    "text": "some tests that you can run before the chaos experiment starts during the chaos",
    "start": "1219200",
    "end": "1225260"
  },
  {
    "text": "experiment elements and at the end of the chaos experiments so for example one of the pros is HTTP probe so example if",
    "start": "1225260",
    "end": "1231380"
  },
  {
    "text": "you are running a chaos experiment with a network you can have that probe attached at a different point in your experiment so you know how your service",
    "start": "1231380",
    "end": "1238700"
  },
  {
    "text": "is working or how your external application is responding now I don't think this slide",
    "start": "1238700",
    "end": "1245539"
  },
  {
    "text": "is much needed at this point it just talks about why we need to do chaos in",
    "start": "1245539",
    "end": "1250940"
  },
  {
    "text": "service mesh so as I told you know service mesh itself adds a complexity layer when it comes to any application",
    "start": "1250940",
    "end": "1256640"
  },
  {
    "text": "or infrastructure and because of that it becomes more evident to have something",
    "start": "1256640",
    "end": "1261679"
  },
  {
    "text": "like chaos in place and see how the system responds now talking about the",
    "start": "1261679",
    "end": "1268340"
  },
  {
    "text": "demo what I've done is I've kept it very simple like I told you know even I am new to this both these Technologies so I",
    "start": "1268340",
    "end": "1275480"
  },
  {
    "text": "have uh istio I am sure a lot of you would be aware of the istio service mesh",
    "start": "1275480",
    "end": "1280820"
  },
  {
    "text": "it's a popular service mesh so what I've done is I'm using istio I am using the",
    "start": "1280820",
    "end": "1286220"
  },
  {
    "text": "standard book info application so if you go through hcl's documentation they have a book info application which is a",
    "start": "1286220",
    "end": "1292220"
  },
  {
    "text": "microservice based application so they have it's basically a portal where you have books they you have the ability to",
    "start": "1292220",
    "end": "1298760"
  },
  {
    "text": "list books you have the ability to rate books and there are about four or five micro services with it so on my local",
    "start": "1298760",
    "end": "1304159"
  },
  {
    "text": "system on Mini Cube I have uh I have is deployed istio I have the book info",
    "start": "1304159",
    "end": "1310039"
  },
  {
    "text": "application done what I'm doing after that is I'm configuring kiali so kiali is an observability dashboard which will",
    "start": "1310039",
    "end": "1316700"
  },
  {
    "text": "give me insights into my cluster what all workloads are present how the traffic is moving and then to that I add",
    "start": "1316700",
    "end": "1323360"
  },
  {
    "text": "litmus chaos we configure the operator we run a fault uh sorry we do we do a",
    "start": "1323360",
    "end": "1328760"
  },
  {
    "text": "chaos experiment and then we see how our system responds so let me go to the",
    "start": "1328760",
    "end": "1335840"
  },
  {
    "text": "demo",
    "start": "1335840",
    "end": "1338679"
  },
  {
    "text": "so one learning for me from today is I need to increase the font size next time I'm giving a talk because I'm sure even",
    "start": "1341059",
    "end": "1347659"
  },
  {
    "text": "the first rows will not be able to see what's what's going on there forget the last row so what is essentially uh",
    "start": "1347659",
    "end": "1354320"
  },
  {
    "text": "Happening Here is I have configured the book info",
    "start": "1354320",
    "end": "1362179"
  },
  {
    "text": "application on my local cluster and what you will see now is",
    "start": "1362179",
    "end": "1369280"
  },
  {
    "text": "and yeah so this is the book info application that comes with",
    "start": "1371780",
    "end": "1378620"
  },
  {
    "text": "istio so you have books you have ratings you have stars to it so istio class",
    "start": "1378620",
    "end": "1385220"
  },
  {
    "text": "istio is deployed I have the book info application which is deployed the next thing that I'm doing is enabling which",
    "start": "1385220",
    "end": "1392780"
  },
  {
    "text": "is an add-on so once we see how that looks",
    "start": "1392780",
    "end": "1399280"
  },
  {
    "text": "yeah so what you see here is the keyle dashboard and this comes as an add-on with istio so once you are then into uh",
    "start": "1402200",
    "end": "1408740"
  },
  {
    "text": "you know getting started document you will find this and it basically lists all these Services all the workloads uh",
    "start": "1408740",
    "end": "1414320"
  },
  {
    "text": "you know that is present on your cluster here I am adding some load so basically doing a lot of curl requests at one time",
    "start": "1414320",
    "end": "1420980"
  },
  {
    "text": "and putting it them to that book info application and this is what kiali generates for me so you can see that",
    "start": "1420980",
    "end": "1427100"
  },
  {
    "text": "there is a HDO Ingress system and when I send the load you will be able to see an uh animation there on how the requests",
    "start": "1427100",
    "end": "1434840"
  },
  {
    "text": "are going so if you see those there are some dots which are just going from the Ingress to you know the other micro services so this is what key Ali does",
    "start": "1434840",
    "end": "1441740"
  },
  {
    "text": "for me it tells me how the traffic is Flowing between the various services that I have the next step what I'm doing",
    "start": "1441740",
    "end": "1447440"
  },
  {
    "text": "is I am installing litmus chaos so litmus basically comes as a Helm package so you",
    "start": "1447440",
    "end": "1454039"
  },
  {
    "text": "can just install it like any other Helm package the default login you know the",
    "start": "1454039",
    "end": "1459440"
  },
  {
    "text": "first time is this is what it will ask you and once you are into litmus cares",
    "start": "1459440",
    "end": "1465140"
  },
  {
    "text": "this is how it looks this is the UI for it and what it does by default is it actually creates uh chaos delegate the",
    "start": "1465140",
    "end": "1473360"
  },
  {
    "text": "point which is highlighted there so delegate is the one which will be where your experiments are executed or responsible for executing your",
    "start": "1473360",
    "end": "1479960"
  },
  {
    "text": "experiments so in this case if you see the chaos delicate is self-agent so the first time when you do it uh when you",
    "start": "1479960",
    "end": "1485900"
  },
  {
    "text": "run or when you deploy chaos it will by default do a self agent which will be",
    "start": "1485900",
    "end": "1491720"
  },
  {
    "text": "there and this is what is responsible for executing your test so if you see it",
    "start": "1491720",
    "end": "1497480"
  },
  {
    "text": "will take some few seconds it will deploy some custom resources and you will see the status as active once that",
    "start": "1497480",
    "end": "1502820"
  },
  {
    "text": "becomes active you will start you'll be able to create a chaos scenario you'll be able to create a chaos experiment and",
    "start": "1502820",
    "end": "1508820"
  },
  {
    "text": "go ahead so we'll use a self agent in this case because I want the chaos experiment to run on the same cluster",
    "start": "1508820",
    "end": "1514039"
  },
  {
    "text": "where it is deployed and to run a chaos experiment what you can do is you can either write your own experiment in form",
    "start": "1514039",
    "end": "1519620"
  },
  {
    "text": "of a yaml file or there is something called as chaos Hub so on chaos Hub what they have done is there are a list of by",
    "start": "1519620",
    "end": "1526159"
  },
  {
    "text": "a default or you know ready-made templates that you can use to run your chaos chaos experiments so if you see here",
    "start": "1526159",
    "end": "1533480"
  },
  {
    "text": "these are some generic list which is provided so container kill pod delete pod CPU hog these are the experiments",
    "start": "1533480",
    "end": "1539900"
  },
  {
    "text": "that you are that is available on litmus chaos so you can just choose any of this and then you can run it on the namespace",
    "start": "1539900",
    "end": "1545960"
  },
  {
    "text": "that you want so in this case what I'm doing is uh since istio you know uses a sidecar proxy for for the uh you know",
    "start": "1545960",
    "end": "1552860"
  },
  {
    "text": "sidecar container for the communication I am actually going to kill the sidecar in one of the pods and then we'll see",
    "start": "1552860",
    "end": "1558320"
  },
  {
    "text": "how how that happens so this is the chaos experiment screen this is where I choose where I want the",
    "start": "1558320",
    "end": "1565279"
  },
  {
    "text": "chaos experiment to run so the namespace is default the kind will be deployment and I'm selecting the container based on",
    "start": "1565279",
    "end": "1573440"
  },
  {
    "text": "the label that is provided by istio so if you see service.hto.io that will help",
    "start": "1573440",
    "end": "1578539"
  },
  {
    "text": "me identify the container where I want to run this experiment and then there are a few other settings which I make",
    "start": "1578539",
    "end": "1585559"
  },
  {
    "text": "and then I have an option to set the schedule so if I want this to run immediately or if I wanted to run every",
    "start": "1585559",
    "end": "1590900"
  },
  {
    "text": "time you know as a Crown schedule I do that and once that is done what I've done is I have increased the load so now so that",
    "start": "1590900",
    "end": "1598159"
  },
  {
    "text": "we can you know see what is going on so if you see at this point in time there is no traffic going to the application",
    "start": "1598159",
    "end": "1603380"
  },
  {
    "text": "so there is absolutely nothing and now you see the traffic is going the load is being generated and you have this graph",
    "start": "1603380",
    "end": "1608900"
  },
  {
    "text": "because the traffic is moving now meanwhile what is happening is the container is being created the scenario",
    "start": "1608900",
    "end": "1614179"
  },
  {
    "text": "that we did it is deploying the container to run the chaos experiment and the moment you see you have your",
    "start": "1614179",
    "end": "1620360"
  },
  {
    "text": "experiment which is created let us try to see the access the website and see what happens so it takes a few seconds",
    "start": "1620360",
    "end": "1627080"
  },
  {
    "text": "for the experiment to to run and the moment the experiment starts",
    "start": "1627080",
    "end": "1632419"
  },
  {
    "text": "running you will get an error on your application so it says no healthy upstreams now why this is happening",
    "start": "1632419",
    "end": "1638360"
  },
  {
    "text": "because I have killed the container the sidecar container which is present now immediately if I go to key Ali you see",
    "start": "1638360",
    "end": "1644659"
  },
  {
    "text": "yellow and red lines coming because that traffic is now blocked because the container is not able to handle the",
    "start": "1644659",
    "end": "1649880"
  },
  {
    "text": "traffic and the moment I click on it I can see that there is error 500 which is",
    "start": "1649880",
    "end": "1655760"
  },
  {
    "text": "increasing so it increases from three percent and it goes on all the way to four percent depending on the schedule",
    "start": "1655760",
    "end": "1661279"
  },
  {
    "text": "that I have so I have given a schedule of only 30 seconds but based on your actual production scenarios it can be",
    "start": "1661279",
    "end": "1667159"
  },
  {
    "text": "this is just one very simple experiment where I knew that when I'm killing the container it's a non-known scenario I'm",
    "start": "1667159",
    "end": "1672440"
  },
  {
    "text": "kill the container I know the traffic will be affected but on a real production level setup what you need to",
    "start": "1672440",
    "end": "1677539"
  },
  {
    "text": "do is you need to identify the scenarios that are very specific to your use case and instead of running one you can run",
    "start": "1677539",
    "end": "1683840"
  },
  {
    "text": "multiple the roller coaster example that I gave you don't need to run one experiment this was just to show you how",
    "start": "1683840",
    "end": "1689960"
  },
  {
    "text": "uh you know chaos engineering works so in a practical scenario you will be having a lot more other scenarios so you",
    "start": "1689960",
    "end": "1696380"
  },
  {
    "text": "can kill a part you can kill a container you can add you can add a HTTP header you can add latency and a lot of other",
    "start": "1696380",
    "end": "1702440"
  },
  {
    "text": "complex things that you can do to check the reliability of your system so if you see here you know the status and",
    "start": "1702440",
    "end": "1708380"
  },
  {
    "text": "everything is still being shown as unhealthy or and the moment now you see",
    "start": "1708380",
    "end": "1714799"
  },
  {
    "text": "the status is green this is because my chaos experiment has completed and once that completes you will see everything",
    "start": "1714799",
    "end": "1721220"
  },
  {
    "text": "is in green the experiment is done and you will see the result on chaos scenario Center which will say the the",
    "start": "1721220",
    "end": "1728419"
  },
  {
    "text": "test has passed and then if I have any probes in between I can set up probes additional probes",
    "start": "1728419",
    "end": "1734900"
  },
  {
    "text": "which will give me additional details about the experiment that I have run so just few seconds and it should turn",
    "start": "1734900",
    "end": "1741200"
  },
  {
    "text": "green yep so this is how you can run a chaos experiment on a service mesh it",
    "start": "1741200",
    "end": "1747200"
  },
  {
    "text": "can be any any application since if it's deployed on a kubernetes cluster and this is what we get an uh output",
    "start": "1747200",
    "end": "1755720"
  },
  {
    "text": "so so what next",
    "start": "1755720",
    "end": "1760880"
  },
  {
    "text": "now since we did the chaos experiment uh we got to know we hypothetize a scenario",
    "start": "1760880",
    "end": "1766340"
  },
  {
    "text": "we know what the steady state is we got to know the Gap in between so what are the next steps after this so now that",
    "start": "1766340",
    "end": "1771980"
  },
  {
    "text": "you know the gaps you analyze you analyze the data this was a very simple scenario just one experiment but on a",
    "start": "1771980",
    "end": "1777679"
  },
  {
    "text": "production scale you'll have a lot of experiments uh at a very large scale so you gather the data you analyze why",
    "start": "1777679",
    "end": "1783080"
  },
  {
    "text": "something is happening and try to see the plug the loopholes that you can plug things that you can improve whether it's",
    "start": "1783080",
    "end": "1789679"
  },
  {
    "text": "uh whether it's from a developer and point of view or it's from an SRE point of view whether it's an infrastructure thing or it's a code Improvement you do",
    "start": "1789679",
    "end": "1796520"
  },
  {
    "text": "that you assess the impact you do a root cause analysis as to why that particular incident happened and then documentation",
    "start": "1796520",
    "end": "1802940"
  },
  {
    "text": "is really important I think Uma spoke about it as well because whatever happens whatever scenarios that has",
    "start": "1802940",
    "end": "1808700"
  },
  {
    "text": "happened you need to ensure that you have a proper documentation in place so that next time something of that's what",
    "start": "1808700",
    "end": "1814039"
  },
  {
    "text": "happens your team is geared up to handle that remediate repeat and reiterate so chaos is something that you should not",
    "start": "1814039",
    "end": "1820279"
  },
  {
    "text": "be doing it for one version and stop it like Uma gave an example of a banking company with the RBA you cannot run a",
    "start": "1820279",
    "end": "1827419"
  },
  {
    "text": "chaos for version 1.2 and you say when you have 1.24 you say that it's working on 1.2 and you don't run it here so I",
    "start": "1827419",
    "end": "1834320"
  },
  {
    "text": "think reiteration is again important as it is like in any other form of testing okay so I'm out of time",
    "start": "1834320",
    "end": "1841580"
  },
  {
    "text": "I think I timed myself perfectly I've been practicing for a couple of days and I know I was hitting the 30 minutes Mark",
    "start": "1841580",
    "end": "1846620"
  },
  {
    "text": "so uh in case you have any questions uh I'm around you can ask me uh and uh",
    "start": "1846620",
    "end": "1851899"
  },
  {
    "text": "thank you so much for being such a wonderful audience I hope you found this talk insightful thanks to the team for",
    "start": "1851899",
    "end": "1858080"
  },
  {
    "text": "having me here thanks Atul and last plug seamless plug you can reach out to me on",
    "start": "1858080",
    "end": "1865220"
  },
  {
    "text": "Twitter at the rate the tech Maharaj and you can also",
    "start": "1865220",
    "end": "1870559"
  },
  {
    "text": "connect with me on LinkedIn as Atul Priya Sharma and then you can email me",
    "start": "1870559",
    "end": "1875840"
  },
  {
    "text": "on Atul Priya Sharma at infraclout.io if you are interested in travel and food story social maharaj.com and at the rate",
    "start": "1875840",
    "end": "1882620"
  },
  {
    "text": "Atul Maharaj on Instagram I am making an Instagram story because this will be posted there thank you so much",
    "start": "1882620",
    "end": "1889659"
  },
  {
    "text": "thanks um we'd love to give you a small token of appreciation",
    "start": "1890120",
    "end": "1896679"
  }
]