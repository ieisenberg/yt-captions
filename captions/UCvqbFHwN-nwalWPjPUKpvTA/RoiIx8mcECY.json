[
  {
    "text": "welcome everybody to our cryo security deep dive i'm sasha i'm one of the hosts today and",
    "start": "160",
    "end": "7120"
  },
  {
    "text": "i'm a maintainer of cryo and one of the presenters today and i'm happy to serve",
    "start": "7120",
    "end": "13360"
  },
  {
    "text": "for you as well and i also have dan walsh on my uh on the presentation who is also very well",
    "start": "13360",
    "end": "18640"
  },
  {
    "text": "known for contributions to container run times like cryo and also some other container runtimes like potman scorpio builder and",
    "start": "18640",
    "end": "26000"
  },
  {
    "text": "many more so what are we going to talk about today so first of all i would like to talk a",
    "start": "26000",
    "end": "32719"
  },
  {
    "text": "little bit about the basics of container security so",
    "start": "32719",
    "end": "37600"
  },
  {
    "text": "so generally we have to talk a little bit about how we want to",
    "start": "38640",
    "end": "44719"
  },
  {
    "text": "have container security in terms of actual kubernetes and things",
    "start": "44719",
    "end": "49920"
  },
  {
    "text": "like that after that um i would like to talk a little bit about how we secure container",
    "start": "49920",
    "end": "55440"
  },
  {
    "text": "images and for example container signing in container encryption um and after that we can speak about",
    "start": "55440",
    "end": "63039"
  },
  {
    "text": "actual container security features like linux capabilities segcomp selinux and also app armor",
    "start": "63039",
    "end": "71119"
  },
  {
    "text": "and after that we will give a little look out into the next namespace changes in cryo which are",
    "start": "71119",
    "end": "78400"
  },
  {
    "text": "yeah one of the upcoming topics in container runtime development",
    "start": "78400",
    "end": "83759"
  },
  {
    "text": "so basic container security principles um first of all yeah we have to choose",
    "start": "84479",
    "end": "89840"
  },
  {
    "text": "the right amount of isolation when it comes to securing a container workload and this can be very hard because we have to deal",
    "start": "89840",
    "end": "96400"
  },
  {
    "text": "with different kind of layers of container security like we have security in run times like run c and we",
    "start": "96400",
    "end": "103280"
  },
  {
    "text": "have also security in terms for cryo for example and on top of that we also have to speak about",
    "start": "103280",
    "end": "109600"
  },
  {
    "text": "container security in conjunction with kubernetes so we have to speak about features like how to utilize seconds",
    "start": "109600",
    "end": "115520"
  },
  {
    "text": "linux and even app armor to make our workloads more secure by default",
    "start": "115520",
    "end": "122719"
  },
  {
    "text": "so this basically means that container workloads have to run with the least possible privileges",
    "start": "122719",
    "end": "129200"
  },
  {
    "text": "so but this doesn't only apply to container to running containers it also applies to container images so they have",
    "start": "129200",
    "end": "135680"
  },
  {
    "text": "to be secured as well and the container content for example for example um the default execution parameters of",
    "start": "135680",
    "end": "143200"
  },
  {
    "text": "the container images can be reduced to reduce the actual attack surface from a container runtime",
    "start": "143200",
    "end": "150560"
  },
  {
    "text": "so distributing container images should also happen in a secure fashion so we have to deal with container",
    "start": "150560",
    "end": "156319"
  },
  {
    "text": "encryption and also container signing but what is actually a privileged container",
    "start": "156319",
    "end": "162800"
  },
  {
    "text": "so we have i found multiple definitions of across different projects like kubernetes and docker",
    "start": "162800",
    "end": "168800"
  },
  {
    "text": "so privileged containers have most of root capabilities on the host machine",
    "start": "168800",
    "end": "174000"
  },
  {
    "text": "so for example if we speak about kubernetes then the pod sandbox shares the network pit and the ipc namespaces of the host",
    "start": "174000",
    "end": "182159"
  },
  {
    "text": "a running privileged containers also disables features like app armor zek comp and linux capabilities at all",
    "start": "182159",
    "end": "188959"
  },
  {
    "text": "so you have to be aware that if we run containers in privileged mode then we can't use features like",
    "start": "188959",
    "end": "194560"
  },
  {
    "text": "app armor or that comb in the same in the same manner privileged containers also mount",
    "start": "194560",
    "end": "200879"
  },
  {
    "text": "critical paths into the container for example the host devices",
    "start": "200879",
    "end": "206480"
  },
  {
    "text": "and kubernetes for example um supports privileged containers by the pod spec so",
    "start": "206480",
    "end": "212319"
  },
  {
    "text": "we can specify a pod dot spec and containers privilege security context and then we can set privilege to",
    "start": "212319",
    "end": "219200"
  },
  {
    "text": "true if we set just one container in the overall workload to true then the",
    "start": "219200",
    "end": "225040"
  },
  {
    "text": "sandbox will also run in privileged mode this is root caused by",
    "start": "225040",
    "end": "230959"
  },
  {
    "text": "because the pot spec doesn't have the privileged field and the security context at all",
    "start": "230959",
    "end": "237439"
  },
  {
    "text": "so what is the least privileged container we want to run so restricting pot and container",
    "start": "238560",
    "end": "244959"
  },
  {
    "text": "security context to a bare minimum is actually a good approach so we don't",
    "start": "244959",
    "end": "250000"
  },
  {
    "text": "want to share the host pit or ipc namespaces which are also off by default so we are good to go",
    "start": "250000",
    "end": "256320"
  },
  {
    "text": "then we would like to run the workload as non-root user and in a non-privileged group so this can be",
    "start": "256320",
    "end": "263280"
  },
  {
    "text": "done by for example if you build a container image then we can specify all that default users that we don't",
    "start": "263280",
    "end": "269520"
  },
  {
    "text": "have a need to actually run the container workload as root user we also want",
    "start": "269520",
    "end": "274720"
  },
  {
    "text": "to drop unnecessary capabilities from the container and in the best case we would drop all",
    "start": "274720",
    "end": "280400"
  },
  {
    "text": "capabilities from the workload but that that is not possible in every case because usually capabilities span um and",
    "start": "280400",
    "end": "288000"
  },
  {
    "text": "some syscalls which can be more frank granular adapted by for example like features like setcomp",
    "start": "288000",
    "end": "294880"
  },
  {
    "text": "we also may want to disable the privilege escalation to forbid that higher privileges can be accessed",
    "start": "294880",
    "end": "300560"
  },
  {
    "text": "by the parent browsers this is on by default and i can just recommend to turn it off",
    "start": "300560",
    "end": "306160"
  },
  {
    "text": "and then we can also apply a zaccom profile the most container runtimes come with a default.com profile",
    "start": "306160",
    "end": "311919"
  },
  {
    "text": "but if we we are able to actually specify a custom segment profile for our workload",
    "start": "311919",
    "end": "317120"
  },
  {
    "text": "then we can drop even more capabilities or can also drop even more this calls we can also",
    "start": "317120",
    "end": "323919"
  },
  {
    "text": "consider um adding app and app armor or the linux profile to the to the actual workload",
    "start": "323919",
    "end": "330160"
  },
  {
    "text": "for example this kind of overlaps with setcomp but if we speak about app armor then we are",
    "start": "330160",
    "end": "335440"
  },
  {
    "text": "able to yeah limit access to their different paths inside of the container as well",
    "start": "335440",
    "end": "341680"
  },
  {
    "text": "and on top of that we can also enable root only root file systems read only root file",
    "start": "341680",
    "end": "346880"
  },
  {
    "text": "systems from a pod level it's just a great security enhancement as well",
    "start": "346880",
    "end": "352400"
  },
  {
    "text": "and yeah on and on i must say that reducing the attack surface of a single workload is more or less a try and error",
    "start": "352400",
    "end": "358000"
  },
  {
    "text": "approach so we can not be sure in every case that the workload still works as intended if we just drop some",
    "start": "358000",
    "end": "364400"
  },
  {
    "text": "capabilities for example so but there is more than just securing",
    "start": "364400",
    "end": "369919"
  },
  {
    "text": "the workload so we have different kubernetes features on top of that which should be taken into consideration",
    "start": "369919",
    "end": "376800"
  },
  {
    "text": "so for example we can use service accounts cluster roles or names based roles and cluster",
    "start": "376800",
    "end": "382160"
  },
  {
    "text": "rule bindings or namespace rule bindings to strip down the possibilities the application has per default",
    "start": "382160",
    "end": "388800"
  },
  {
    "text": "we also have to consider port security policies which should go away in future",
    "start": "388800",
    "end": "393919"
  },
  {
    "text": "kubernetes releases but we don't have an adequate alternative for it so we can consider using port security policies",
    "start": "393919",
    "end": "400560"
  },
  {
    "text": "and we can also apply network policies to the whole application which makes the application all in all",
    "start": "400560",
    "end": "405919"
  },
  {
    "text": "more secure besides that we also have some other security hardening possibilities on a",
    "start": "405919",
    "end": "411360"
  },
  {
    "text": "note level in kubernetes for example container image signing features um",
    "start": "411360",
    "end": "416800"
  },
  {
    "text": "and like enabled image signing cryo and enabled image encryption in cryo",
    "start": "416800",
    "end": "422000"
  },
  {
    "text": "will reduce that possible attack surface when it comes to man-in-the-middle attacks for example",
    "start": "422000",
    "end": "428319"
  },
  {
    "text": "then the container images can yeah can can be encrypted as well and we can also access limited access to",
    "start": "428319",
    "end": "434639"
  },
  {
    "text": "lcd and for example we can also encrypt secrets at rest level and there are many more features which",
    "start": "434639",
    "end": "440560"
  },
  {
    "text": "are a little bit out of scope of this talk for now so let's focus a little bit on the cryo perspective from the cryo container on",
    "start": "440560",
    "end": "445840"
  },
  {
    "text": "time perspective and so the first thing so container images signing and encryption in cryo",
    "start": "445840",
    "end": "452000"
  },
  {
    "text": "works out of the box we added some the new configuration option which can be specified via the decryption keys",
    "start": "452000",
    "end": "458639"
  },
  {
    "text": "path is an option in which defaults to etc cryo keys and if we put our keys into",
    "start": "458639",
    "end": "465599"
  },
  {
    "text": "that directory then cryo supports oci image encryption this encrypted images are usually visible via",
    "start": "465599",
    "end": "472639"
  },
  {
    "text": "the media type plus encrypted and pulling designed images is also possible",
    "start": "472639",
    "end": "479759"
  },
  {
    "text": "in cryo so we have the container configuration in etc containers and we can also enforce signing",
    "start": "479759",
    "end": "486319"
  },
  {
    "text": "container images via portal policy.json um we",
    "start": "486319",
    "end": "493120"
  },
  {
    "text": "just let me share my screen i prepared a little demo for you",
    "start": "493120",
    "end": "498879"
  },
  {
    "text": "so here we go what we see is that we have a single node kubernetes",
    "start": "500960",
    "end": "506960"
  },
  {
    "text": "cluster and we have a running running cryo on that window this is my demo and then we have a running kubernetes",
    "start": "506960",
    "end": "514560"
  },
  {
    "text": "stack so everyone cube ctl",
    "start": "514560",
    "end": "520560"
  },
  {
    "text": "get bots then we can see that we have just running cube dns here",
    "start": "520560",
    "end": "527279"
  },
  {
    "text": "so let's take a look how container image designing works if we look into our registries directory",
    "start": "527279",
    "end": "533920"
  },
  {
    "text": "on my local machine then we can see that we have a default file which specifies a default sig store",
    "start": "533920",
    "end": "542080"
  },
  {
    "text": "for staging so this stick store will be used signature storage will be used when we actually design those",
    "start": "542080",
    "end": "548240"
  },
  {
    "text": "images so they will be put in there and we also have two other files where we can specify container",
    "start": "548240",
    "end": "554880"
  },
  {
    "text": "registries and signature storage locations which are served from an https endpoint and for",
    "start": "554880",
    "end": "561279"
  },
  {
    "text": "example for registry.opensuse.org we have specified a signature storage radio c opensuse.org",
    "start": "561279",
    "end": "568240"
  },
  {
    "text": "six store to enforce a policy like that we can write a policy json file for",
    "start": "568240",
    "end": "575600"
  },
  {
    "text": "example we can specify that in that json file where our transport docker is specified and then",
    "start": "575600",
    "end": "582320"
  },
  {
    "text": "we enforce on registry.opensuse.org add gpg and encrypt that",
    "start": "582320",
    "end": "589040"
  },
  {
    "text": "key and the key path is can be distributed for example by the distribution itself",
    "start": "589040",
    "end": "594399"
  },
  {
    "text": "and in our case it's the public key from registry.opensuse.org",
    "start": "594399",
    "end": "599600"
  },
  {
    "text": "and yeah if we now pull a container image from registry.opensuse.org",
    "start": "599600",
    "end": "606640"
  },
  {
    "text": "then we can have a look if should succeed at all in a couple of seconds",
    "start": "606640",
    "end": "615600"
  },
  {
    "text": "and we can also",
    "start": "616240",
    "end": "619839"
  },
  {
    "text": "have a look into the cryologs and for example here we can see that",
    "start": "621440",
    "end": "628959"
  },
  {
    "text": "cryo automatically tries to access the signature storage and also down automatically downloads the signatures",
    "start": "628959",
    "end": "635519"
  },
  {
    "text": "for the container images layer and this usually works in a couple of",
    "start": "635519",
    "end": "641440"
  },
  {
    "text": "seconds and now we are done we downloaded the image and",
    "start": "641440",
    "end": "647519"
  },
  {
    "text": "yeah if we for example now consider removing that image again",
    "start": "647519",
    "end": "655279"
  },
  {
    "text": "and yeah just for demonstration purposes we move the gpg key to a different",
    "start": "655279",
    "end": "660720"
  },
  {
    "text": "location and then we try to pull the container image again",
    "start": "660720",
    "end": "666320"
  },
  {
    "text": "then it should fail because the policy.json would like to enforce the i copied it one second i have to",
    "start": "666320",
    "end": "674560"
  },
  {
    "text": "move it that's not correct",
    "start": "674560",
    "end": "678000"
  },
  {
    "text": "otherwise the file wouldn't move so if we go into edc containers gpg then we can see that we just have as",
    "start": "679760",
    "end": "686240"
  },
  {
    "text": "a backup image let me just remove the image again and then we pull it then we usually should get an",
    "start": "686240",
    "end": "693839"
  },
  {
    "text": "error hopefully this works",
    "start": "693839",
    "end": "703839"
  },
  {
    "text": "yes all right so now we get an error message that none of the signatures were accepted so the regular gpg keys or try it doesn't",
    "start": "705440",
    "end": "713519"
  },
  {
    "text": "work at all because it's not existing but even if the gpg key is not valid or not valid for our",
    "start": "713519",
    "end": "718959"
  },
  {
    "text": "signed image then we would get a different or a similar error message that it's not",
    "start": "718959",
    "end": "724480"
  },
  {
    "text": "possible to download the image at all now let me just move it i can do it",
    "start": "724480",
    "end": "730480"
  },
  {
    "text": "later on so then",
    "start": "730480",
    "end": "736000"
  },
  {
    "text": "let's talk a little bit about running secure workloads with cryo and secomp so setcomp graduated graduated to",
    "start": "736079",
    "end": "742959"
  },
  {
    "text": "general availability in kubernetes 1.19 which should not well it should be released in the next couple",
    "start": "742959",
    "end": "749200"
  },
  {
    "text": "of days if we speak about kubecon europe and previously this will be would be handled via pod annotations",
    "start": "749200",
    "end": "756480"
  },
  {
    "text": "and from 1 19 on we have a dedicated field on the pod security context or on the security",
    "start": "756480",
    "end": "762560"
  },
  {
    "text": "context on the container level this means that we have now a security context then zaccom profile",
    "start": "762560",
    "end": "768639"
  },
  {
    "text": "then we can specify a type like runtime default or localhost or unconfined and if we",
    "start": "768639",
    "end": "774480"
  },
  {
    "text": "specify localhost then we can also set the localhost profile to a local profile",
    "start": "774480",
    "end": "779519"
  },
  {
    "text": "so those local profiles will be looked up in the cubelet into the cubelet directory which should be usually wallet",
    "start": "779519",
    "end": "786399"
  },
  {
    "text": "cubelet it's the cubelet root and then slash secomp so if we put the",
    "start": "786399",
    "end": "791760"
  },
  {
    "text": "profile into that directory then we can usually reference them directly via myprofilename.json",
    "start": "791760",
    "end": "800240"
  },
  {
    "text": "i can demo that for you as well and we are now on the same cluster",
    "start": "800240",
    "end": "809360"
  },
  {
    "text": "so as already shown let's just have a look at our zek comp",
    "start": "809360",
    "end": "814959"
  },
  {
    "text": "example one so what we have here we have deployment nginx deployment then we",
    "start": "814959",
    "end": "821760"
  },
  {
    "text": "specify our security context and our zaccom profile in our case runtime default so cryo ships a default con second",
    "start": "821760",
    "end": "829199"
  },
  {
    "text": "profile which is included in the cryo binary and but also with some distributions",
    "start": "829199",
    "end": "835760"
  },
  {
    "text": "distributed via a file called an etc container second",
    "start": "835760",
    "end": "840839"
  },
  {
    "text": "json well this is a pretty pretty good setcom profile but you can see for example",
    "start": "840839",
    "end": "847440"
  },
  {
    "text": "we have some this calls which are allowed by default and not every application may need all",
    "start": "847440",
    "end": "852800"
  },
  {
    "text": "those this calls to be executed in the in a normal way but let's try it out",
    "start": "852800",
    "end": "858399"
  },
  {
    "text": "just let's create our nginx deployment and",
    "start": "858399",
    "end": "864959"
  },
  {
    "text": "the containers are now in container creating state",
    "start": "864959",
    "end": "870240"
  },
  {
    "text": "and now they are running and if we run cry ctlps to get an idea about which containers are running",
    "start": "870240",
    "end": "877120"
  },
  {
    "text": "so we have both here and everyone try ctl inspect and",
    "start": "877120",
    "end": "883120"
  },
  {
    "text": "then we can specify the container id then we can see that the whole",
    "start": "883120",
    "end": "890000"
  },
  {
    "text": "then we have a reference to the whole second profile directly in the inspect because usually the container runtime like",
    "start": "890000",
    "end": "895519"
  },
  {
    "text": "container run times like cryo pass down the second profile to the underlying container runtime which is",
    "start": "895519",
    "end": "900800"
  },
  {
    "text": "run c in that case and then run c applies the second profile so that's this one",
    "start": "900800",
    "end": "911040"
  },
  {
    "text": "so this works pretty cool and let's just delete our deployment again",
    "start": "911360",
    "end": "919680"
  },
  {
    "text": "because usually we can't change the socket profile on the fly so we have to would have to recreate the workload",
    "start": "919680",
    "end": "925680"
  },
  {
    "text": "and if we now look into our second example",
    "start": "925680",
    "end": "931519"
  },
  {
    "text": "then i just did more or less the same but now we add the security context to our",
    "start": "931519",
    "end": "937519"
  },
  {
    "text": "container so we specify now a second profile from localhostpath",
    "start": "937519",
    "end": "942720"
  },
  {
    "text": "and we choose our demo.json now demo.json is located in walletcubelet.comdemo.json",
    "start": "942720",
    "end": "953360"
  },
  {
    "text": "and it's basically the same the same as the default as the default profile but it",
    "start": "953360",
    "end": "959759"
  },
  {
    "text": "just forbids rmd on the arm there is just a syscall to remove a directory so it shouldn't be harmful for our nginx",
    "start": "959759",
    "end": "965839"
  },
  {
    "text": "application but let's just try it out we just recreate the workload",
    "start": "965839",
    "end": "973519"
  },
  {
    "text": "wait for the containers to be created and yeah then let's just",
    "start": "974240",
    "end": "982480"
  },
  {
    "text": "exec into our one of our nginx pots",
    "start": "982480",
    "end": "988720"
  },
  {
    "text": "and here we are and now yeah i'm root user inside",
    "start": "989360",
    "end": "997839"
  },
  {
    "text": "this container but i usually should be able to for example create",
    "start": "998560",
    "end": "1004240"
  },
  {
    "text": "direct a directory test but i'm not shouldn't be able to remove the directory again yeah",
    "start": "1004240",
    "end": "1009600"
  },
  {
    "text": "and now it says that the operation is not permitted because the second profile enforces that",
    "start": "1009600",
    "end": "1015279"
  },
  {
    "text": "and yeah if we speak about second at all then it's not that easy to",
    "start": "1015279",
    "end": "1020959"
  },
  {
    "text": "write those profiles at by hand but there's a little nice fancy project called the ocis.com bpf hook",
    "start": "1020959",
    "end": "1028798"
  },
  {
    "text": "which can be used or which is just the general oci hook which is supported by cryo at all and this oci hook can be used to trace",
    "start": "1028799",
    "end": "1035438"
  },
  {
    "text": "this calls and generate second profiles out of the box so i can really recommend to play around with it and it works also very well with",
    "start": "1035439",
    "end": "1042640"
  },
  {
    "text": "podman and for example if you run it with potman then you can specify the annotation io.containers.tracescall",
    "start": "1042640",
    "end": "1050720"
  },
  {
    "text": "and then some input it's not necessary to specify input path but it's necessary to specify an output path and then you",
    "start": "1050720",
    "end": "1056880"
  },
  {
    "text": "will get the second profile generated into that path",
    "start": "1056880",
    "end": "1061919"
  },
  {
    "text": "so let's what other options do we have to",
    "start": "1062160",
    "end": "1068799"
  },
  {
    "text": "actually secure our workloads so the next thing i would like to talk to you about is app armor so app armor is",
    "start": "1068799",
    "end": "1076960"
  },
  {
    "text": "still a better feature in kubernetes but we also try to also consider to move it to ga very soon",
    "start": "1076960",
    "end": "1082240"
  },
  {
    "text": "maybe in 120 or 121 and right now we have to handle via pod annotations",
    "start": "1082240",
    "end": "1087600"
  },
  {
    "text": "so we have to specify an annotation at the port level which is called",
    "start": "1087600",
    "end": "1092840"
  },
  {
    "text": "container.app.armor.security.beta and then we have to reference the container name and the profile ref",
    "start": "1092840",
    "end": "1099039"
  },
  {
    "text": "and this profile ref can be run time default it can be also localhost profile name",
    "start": "1099039",
    "end": "1104960"
  },
  {
    "text": "like we do in seccomp and then we can also set it to unconfined which disables the feature at",
    "start": "1104960",
    "end": "1110799"
  },
  {
    "text": "all so i just would like to give you a short demo about that as well because i'm running on a system which",
    "start": "1110799",
    "end": "1117120"
  },
  {
    "text": "supports app armor and let me just",
    "start": "1117120",
    "end": "1123840"
  },
  {
    "text": "delete my second workload and app armor works a little bit",
    "start": "1124400",
    "end": "1130640"
  },
  {
    "text": "different than zaccom so app armor profiles are usually stored in memory and to i created a profile called",
    "start": "1130640",
    "end": "1139039"
  },
  {
    "text": "container engine x and etc app rmod and every profile in etc app on modi will be automatically",
    "start": "1139039",
    "end": "1144480"
  },
  {
    "text": "loaded if i boot up the system because app only starts automatically so this profile looks like this and we",
    "start": "1144480",
    "end": "1151360"
  },
  {
    "text": "can't or we don't only have to can limit network uh restrictions to the to the actual",
    "start": "1151360",
    "end": "1156960"
  },
  {
    "text": "workload we can also specify a root root level permissions and can",
    "start": "1156960",
    "end": "1162559"
  },
  {
    "text": "yeah also uh for example drop capabilities down here so we have a lot of",
    "start": "1162559",
    "end": "1168000"
  },
  {
    "text": "flexibility in that profile but it follows a dedicated syntax so we also have to test it",
    "start": "1168000",
    "end": "1173120"
  },
  {
    "text": "or create it manually there is also something like an app armor recorder but i don't want to talk about this at",
    "start": "1173120",
    "end": "1178880"
  },
  {
    "text": "that point so this profile seems pretty pretty well um now let's just",
    "start": "1178880",
    "end": "1186320"
  },
  {
    "text": "check if app armor is running so we can run our aaa status and then we look for",
    "start": "1186320",
    "end": "1191600"
  },
  {
    "text": "nginx and then we there we can see that our nginx profile is successfully loaded so if we now",
    "start": "1191600",
    "end": "1197919"
  },
  {
    "text": "look at our app armor demo example then we can see that we have the",
    "start": "1197919",
    "end": "1203360"
  },
  {
    "text": "annotation here we specify container app armor security and our container is named engine x minus the ctr",
    "start": "1203360",
    "end": "1211280"
  },
  {
    "text": "and that's the container down here and we use the localhost nginx profile",
    "start": "1211280",
    "end": "1216720"
  },
  {
    "text": "so let me now apply that profile edit workload sorry",
    "start": "1216720",
    "end": "1224720"
  },
  {
    "text": "and if we now we can see that it's running again let me just",
    "start": "1224720",
    "end": "1230639"
  },
  {
    "text": "check the containers running and if we inspect that container",
    "start": "1232240",
    "end": "1238720"
  },
  {
    "text": "and then we can see that the app armor profile engine x has",
    "start": "1239600",
    "end": "1245039"
  },
  {
    "text": "been loaded successfully so this is pretty nice and usually",
    "start": "1245039",
    "end": "1250320"
  },
  {
    "text": "we can also go into the let's just exact into our engine x container again",
    "start": "1250320",
    "end": "1258159"
  },
  {
    "text": "and if we look we take another look at the profile then we can see that we can't access",
    "start": "1261200",
    "end": "1267600"
  },
  {
    "text": "yeah slash spin there so i'm just rooting to that in that",
    "start": "1267600",
    "end": "1273840"
  },
  {
    "text": "container so i can i usually have root level access i can create directories like test",
    "start": "1273840",
    "end": "1279360"
  },
  {
    "text": "and i can't go into bin and create their directories like test yeah and it says",
    "start": "1279360",
    "end": "1285200"
  },
  {
    "text": "permission delight and usually the audit log and do it does give us an indicator",
    "start": "1285200",
    "end": "1294320"
  },
  {
    "text": "uh audit log give us an indicator about what actually happened on the system",
    "start": "1294320",
    "end": "1300640"
  },
  {
    "text": "and we can there we can see for example there is an audit log for nginx and we try to create yeah",
    "start": "1300640",
    "end": "1308159"
  },
  {
    "text": "our root level directory test and this actually works",
    "start": "1308159",
    "end": "1314080"
  },
  {
    "text": "all right so that's it from my demo for app armor and now i would like to",
    "start": "1314240",
    "end": "1319760"
  },
  {
    "text": "hand over to dan who speaks about capabilities okay great job sasha um so basically",
    "start": "1319760",
    "end": "1327360"
  },
  {
    "text": "this part of the talk i'm just you know uh sasha in the beginning of the talk talked about we really recommend that everybody run",
    "start": "1327360",
    "end": "1333760"
  },
  {
    "text": "containers without being root inside of the containers um and you know for the most part i",
    "start": "1333760",
    "end": "1338960"
  },
  {
    "text": "believe that almost all workloads should be able to run without being root and that's probably the most secure way you're able",
    "start": "1338960",
    "end": "1344640"
  },
  {
    "text": "to run it but in certain work certain workloads people need to be run as root or need to",
    "start": "1344640",
    "end": "1350240"
  },
  {
    "text": "have multiple uids inside of a container and need some of the root capabilities so the idea of linux capabilities is it",
    "start": "1350240",
    "end": "1356799"
  },
  {
    "text": "divided the power of root so sort of everybody understood this root as being all-powerful and many many",
    "start": "1356799",
    "end": "1363039"
  },
  {
    "text": "years ago the linux root capabilities linux kernel",
    "start": "1363039",
    "end": "1368080"
  },
  {
    "text": "basically broke down root into a whole series of different capabilities",
    "start": "1368080",
    "end": "1373679"
  },
  {
    "text": "so the uh um the interesting thing about containers",
    "start": "1373679",
    "end": "1379280"
  },
  {
    "text": "and this this was sort of developed by docker a long time ago is they figured out that you could run almost",
    "start": "1379280",
    "end": "1384400"
  },
  {
    "text": "all workloads uh by default with um you know just a small group of the",
    "start": "1384400",
    "end": "1390640"
  },
  {
    "text": "capabilities so the power route was broken into 37 different capabilities but actually docker sort of standardized",
    "start": "1390640",
    "end": "1397440"
  },
  {
    "text": "on 14 capabilities that it ran for containers and we sort of you know",
    "start": "1397440",
    "end": "1403360"
  },
  {
    "text": "latched into that and most container engines now have settled on those 14 capabilities",
    "start": "1403360",
    "end": "1408880"
  },
  {
    "text": "um the the problem with those 14 capabilities is um nobody knows what they are right",
    "start": "1408880",
    "end": "1416159"
  },
  {
    "text": "so it's sort of you know you you even even i who deal with this a lot i couldn't probably answer uh tests and",
    "start": "1416159",
    "end": "1422159"
  },
  {
    "text": "get all 14 right um so uh what what i have done is i've actually looked and so here that here",
    "start": "1422159",
    "end": "1428159"
  },
  {
    "text": "are the 14 capabilities that are allowed by default um in most container engines but when i",
    "start": "1428159",
    "end": "1434159"
  },
  {
    "text": "sit down look at these i look you know what is the history of some of these you know why why these on so um for instance this one is",
    "start": "1434159",
    "end": "1441440"
  },
  {
    "text": "audit right and audit right his ability to write to the auditing subsystem so",
    "start": "1441440",
    "end": "1446480"
  },
  {
    "text": "sasha showed you you know looking at app armor errors in an audit log so this the auto right allows",
    "start": "1446480",
    "end": "1452240"
  },
  {
    "text": "you to modify parts of the uh auditing system to be able to manipulate the auditing system",
    "start": "1452240",
    "end": "1457679"
  },
  {
    "text": "so why would we have that on by default in containers and it turns out that when containers were first becoming popular",
    "start": "1457679",
    "end": "1463600"
  },
  {
    "text": "most people thought of them as as virtual machines and what they wanted to do was they wanted to run ssh daemon",
    "start": "1463600",
    "end": "1469360"
  },
  {
    "text": "inside of them but when they'd launch a container with ssh demon running inside of it will blow up because the ssh demon once",
    "start": "1469360",
    "end": "1475919"
  },
  {
    "text": "someone tried to log into a system would basically write a record that said dan walsh logged into the system",
    "start": "1475919",
    "end": "1481279"
  },
  {
    "text": "and that would be blocked because it didn't have audit right so that got turned on by defaults for all all containers and of course almost",
    "start": "1481279",
    "end": "1488320"
  },
  {
    "text": "nobody runs this as hdmi inside of containers now so but we still have that on by default",
    "start": "1488320",
    "end": "1494000"
  },
  {
    "text": "the next one i want to look at is make node so make node is a capability that allows you to create device nodes",
    "start": "1494000",
    "end": "1500000"
  },
  {
    "text": "inside of containers so you know but again you know when we look at cryo and",
    "start": "1500000",
    "end": "1506240"
  },
  {
    "text": "kubernetes we're looking at running containers in production and you really don't want to allow containers to create random device nodes",
    "start": "1506240",
    "end": "1512960"
  },
  {
    "text": "what we want is the container engine to create the device nodes and not allow them to just create random device nodes",
    "start": "1512960",
    "end": "1518480"
  },
  {
    "text": "on their own but we allow this by default and the reason we did that is because originally people were doing lots of",
    "start": "1518480",
    "end": "1524240"
  },
  {
    "text": "installs and builds and and certain packages i believe from ubuntu you know actually created device",
    "start": "1524240",
    "end": "1529760"
  },
  {
    "text": "nodes during the installation procedure um and so really you know when we're running containers of production we're",
    "start": "1529760",
    "end": "1535679"
  },
  {
    "text": "not building container images we're not installing rpms we're you know so why do we need make node on by",
    "start": "1535679",
    "end": "1541440"
  },
  {
    "text": "default the next one i want to talk about is net raw and that rar is a capability that allows you to create any type of ip",
    "start": "1541440",
    "end": "1548480"
  },
  {
    "text": "packet so tcp icmp any type of ip packet can be created and",
    "start": "1548480",
    "end": "1553600"
  },
  {
    "text": "then put out on the on the vpn and the problem with this is it really gives an incredible amount of",
    "start": "1553600",
    "end": "1559840"
  },
  {
    "text": "power and and has led to some escapes where people were able to break out of the",
    "start": "1559840",
    "end": "1564880"
  },
  {
    "text": "virtual private network by forming packets in certain way um and and the real reason for net raw",
    "start": "1564880",
    "end": "1570640"
  },
  {
    "text": "being on by default is that so people could actually execute the ping command so when i execute a ping command",
    "start": "1570640",
    "end": "1576240"
  },
  {
    "text": "i created an icmp packet and and put it over so when i went into a container i'd want to create",
    "start": "1576240",
    "end": "1581760"
  },
  {
    "text": "that so again it's it's an incredibly powerful capability that really we don't need on",
    "start": "1581760",
    "end": "1587840"
  },
  {
    "text": "by default um especially for containers in production and and the linux kernel has other ways of running",
    "start": "1587840",
    "end": "1593840"
  },
  {
    "text": "um allowing you to create icmp packets so you can continue to ping um so we actually you know enable",
    "start": "1593840",
    "end": "1600480"
  },
  {
    "text": "that by default in cryo instead of net raw and then the last one is sister root and systrood is a capability",
    "start": "1600480",
    "end": "1606880"
  },
  {
    "text": "that allows you to create a route inside of a container but you know a container is really kind",
    "start": "1606880",
    "end": "1612320"
  },
  {
    "text": "of a super powerful to root so why you know most people aren't creating roots inside of containers",
    "start": "1612320",
    "end": "1617919"
  },
  {
    "text": "so why do we allow that by default um so so when um in cryo what we've done is",
    "start": "1617919",
    "end": "1624320"
  },
  {
    "text": "we've looked at this original list and we basically said let's let's get rid of some of these ones that are",
    "start": "1624320",
    "end": "1629440"
  },
  {
    "text": "less less necessary and and we're able to run almost all of our containers without these four capabilities so we",
    "start": "1629440",
    "end": "1635840"
  },
  {
    "text": "can drop down to you know just basically nine or ten capabilities that we run by default uh for our containers when",
    "start": "1635840",
    "end": "1642159"
  },
  {
    "text": "you're running it as root um the next thing um and obviously and",
    "start": "1642159",
    "end": "1647200"
  },
  {
    "text": "you know if capabilities are fully available inside of kubernetes so if you",
    "start": "1647200",
    "end": "1652240"
  },
  {
    "text": "do find a container that needs additional capabilities or something that's not allowed by default",
    "start": "1652240",
    "end": "1657679"
  },
  {
    "text": "um then you can you know add those capabilities through your uh your kubernetes yaml file so you know we",
    "start": "1657679",
    "end": "1664320"
  },
  {
    "text": "can override those if if you need them but really you know at base level we want to run",
    "start": "1664320",
    "end": "1670000"
  },
  {
    "text": "everything as as tightly as possible from a container point of view the next thing i'm going to talk about is sc linux and and",
    "start": "1670000",
    "end": "1676480"
  },
  {
    "text": "sc linux and app armor are two ways of doing what's called mandatory access control or control on systems",
    "start": "1676480",
    "end": "1683360"
  },
  {
    "text": "one difference between the way sc linux works and the way app arma works is that app armor is controlling mainly what's",
    "start": "1683360",
    "end": "1688720"
  },
  {
    "text": "going on inside of the container and what selinux does is it wraps the external part of the container",
    "start": "1688720",
    "end": "1694480"
  },
  {
    "text": "but the really great thing about sc linux is that just about every type of file system breakout when the process is",
    "start": "1694480",
    "end": "1700080"
  },
  {
    "text": "able to break out of the container and get to the host or attack other containers has been blocked by sc linux out of the",
    "start": "1700080",
    "end": "1705760"
  },
  {
    "text": "box um so quickly people you know tend not to really understand what sc linux is and a",
    "start": "1705760",
    "end": "1710960"
  },
  {
    "text": "few years ago i wrote a coloring book on that and i'll just go through it real quick and try to",
    "start": "1710960",
    "end": "1716640"
  },
  {
    "text": "sort of explain what's going on with sc linux and uh think of every you know sc linux labeling system every everything on the",
    "start": "1716640",
    "end": "1723520"
  },
  {
    "text": "system has a label so let's say there was a cat process and a dog process and so we have a process type a type of a cat and a",
    "start": "1723520",
    "end": "1730240"
  },
  {
    "text": "type of a dog and then i have food so every object every you know directory file system",
    "start": "1730240",
    "end": "1736720"
  },
  {
    "text": "everything on the system is is labeled um you know with you know a label",
    "start": "1736720",
    "end": "1742080"
  },
  {
    "text": "and basically we have label is cat food and we label it one is dog food and then we write rules into the lace",
    "start": "1742080",
    "end": "1748000"
  },
  {
    "text": "kernel that basically says allow a cat process to eat cat food and allow a dog process to eat dog food",
    "start": "1748000",
    "end": "1754559"
  },
  {
    "text": "and the basic idea here is that everything that isn't allowed is denied and this is really exactly what an esee",
    "start": "1754559",
    "end": "1760240"
  },
  {
    "text": "linux rule looks like when ridden to the container so now if the cat tries to eat the cat food it's",
    "start": "1760240",
    "end": "1765440"
  },
  {
    "text": "allowed to eat and if the dog tries to eat the dog food it's allowed to eat that but when the dog tries to eat the cat",
    "start": "1765440",
    "end": "1771600"
  },
  {
    "text": "food it's blocked so from a container point of view this means that when i'm inside of my container i can",
    "start": "1771600",
    "end": "1776880"
  },
  {
    "text": "you know we basically launched the process as being the container type and we launched the content inside the",
    "start": "1776880",
    "end": "1781919"
  },
  {
    "text": "containers being container files and we write a rule that says the container can read and write container",
    "start": "1781919",
    "end": "1786960"
  },
  {
    "text": "files if the container process broke out and tried to read the home directory or try",
    "start": "1786960",
    "end": "1792240"
  },
  {
    "text": "to read any other directory on the system if that content is labeled as container content or",
    "start": "1792240",
    "end": "1798640"
  },
  {
    "text": "container files then it will be blocked by default and that's how essie linux is blocking all the you know potential",
    "start": "1798640",
    "end": "1804240"
  },
  {
    "text": "escapes of file system escapes and in containers um so those are",
    "start": "1804240",
    "end": "1810399"
  },
  {
    "text": "sort of the hard-coded built-in uh tools that we talked about your setcomp um capabilities se linux and app armor",
    "start": "1810399",
    "end": "1818399"
  },
  {
    "text": "and some of the other features that sasha talked well one of the things we're really trying to finally accomplish is actually to get username",
    "start": "1818399",
    "end": "1826000"
  },
  {
    "text": "space so i mentioned earlier that you know people want to be able to run route inside of a container or they want",
    "start": "1826000",
    "end": "1832080"
  },
  {
    "text": "to be able to run multiple uids inside of a container and so we have a pull request right now",
    "start": "1832080",
    "end": "1837279"
  },
  {
    "text": "into cryo that hopefully will get merged soon and and will become a feature to allow you to specify",
    "start": "1837279",
    "end": "1843039"
  },
  {
    "text": "a um a an attribute that allows you to basically enable",
    "start": "1843039",
    "end": "1850159"
  },
  {
    "text": "usernamespace so what happens if you need root inside of a container you know and what happens if you need more than one uid",
    "start": "1850159",
    "end": "1857200"
  },
  {
    "text": "and some use cases where this becomes important is things like building container images so most people that do builds inside of",
    "start": "1857200",
    "end": "1864159"
  },
  {
    "text": "kubernetes right now need to have root or need to have multiple uids inside of the container so they end up having to",
    "start": "1864159",
    "end": "1869519"
  },
  {
    "text": "run privileged containers or they end up having to do things like leak the docker socket or",
    "start": "1869519",
    "end": "1874960"
  },
  {
    "text": "some other container engine socket in and basically break break out of confinement another thing would",
    "start": "1874960",
    "end": "1880320"
  },
  {
    "text": "be you know they're needing to launch multiple processes inside of the same uid so by enabling username space username",
    "start": "1880320",
    "end": "1887600"
  },
  {
    "text": "space allows us to map root and other uids inside of a container as non-root on the host",
    "start": "1887600",
    "end": "1894000"
  },
  {
    "text": "and and what we've done in in trio now with the latest pull request is to allow",
    "start": "1894000",
    "end": "1900640"
  },
  {
    "text": "us to basically run different containers different workloads that require root or multiple uids",
    "start": "1900640",
    "end": "1906720"
  },
  {
    "text": "to be able to run as root inside of the container but if they break out they're treated as like non-root on the rest of",
    "start": "1906720",
    "end": "1912559"
  },
  {
    "text": "the system and we've enabled that from the top you know from the highest level um you know in in cryo all the way down",
    "start": "1912559",
    "end": "1919440"
  },
  {
    "text": "to container storage and with handling some of the re-labels and images so this is a really cool",
    "start": "1919440",
    "end": "1925120"
  },
  {
    "text": "feature that's going to be coming very soon um to cryosystems so at this point",
    "start": "1925120",
    "end": "1930480"
  },
  {
    "text": "you know we're racing to get this talk done and at this point we could open up for",
    "start": "1930480",
    "end": "1935519"
  },
  {
    "text": "any questions",
    "start": "1935519",
    "end": "1938240"
  },
  {
    "text": "hello everybody so here we are live and then color and first of all i would like to",
    "start": "1944240",
    "end": "1949840"
  },
  {
    "text": "apologize for not uploading the slides to sketch but i did share the link in the slack channel and",
    "start": "1949840",
    "end": "1955519"
  },
  {
    "text": "you can access them via that",
    "start": "1955519",
    "end": "1959278"
  },
  {
    "text": "okay then we have a couple of questions left",
    "start": "1961039",
    "end": "1965200"
  },
  {
    "text": "so one of the uh questions earlier was uh talking about basically talking about",
    "start": "1969200",
    "end": "1975440"
  },
  {
    "text": "an exploit loud because of cape uh cap make node um and i you know said in the talk cap make",
    "start": "1975440",
    "end": "1982799"
  },
  {
    "text": "node should really be turned off by default is there's almost no reason for that to be on and if you need",
    "start": "1982799",
    "end": "1988799"
  },
  {
    "text": "additional capabilities for your containers then you can specify that in the kubernetes gmo file",
    "start": "1988799",
    "end": "1995360"
  },
  {
    "text": "another question about what is the relationship between cryo and podman so podman is a container engine for running sort",
    "start": "1995919",
    "end": "2003279"
  },
  {
    "text": "of traditional what people think of as the darker workloads cryo is a is basically a demon process for",
    "start": "2003279",
    "end": "2011360"
  },
  {
    "text": "running kubernetes workloads they both share the underlying",
    "start": "2011360",
    "end": "2016720"
  },
  {
    "text": "mechanisms for pulling images and storing images so they share a lot in common but they both can run totally",
    "start": "2016720",
    "end": "2023440"
  },
  {
    "text": "independent of each other",
    "start": "2023440",
    "end": "2033840"
  },
  {
    "text": "um",
    "start": "2034640",
    "end": "2036960"
  },
  {
    "text": "so the question on is there's a question on se linux is there a new seo linux syntax for",
    "start": "2041440",
    "end": "2047200"
  },
  {
    "text": "selectors configuration to distinguish between in container object processes and things",
    "start": "2047200",
    "end": "2052240"
  },
  {
    "text": "outside of the container so in in from an essay linux point of view we'd like to run all the contents inside of",
    "start": "2052240",
    "end": "2059280"
  },
  {
    "text": "the container is a single label we believe that this is the way microservices should be written",
    "start": "2059280",
    "end": "2065040"
  },
  {
    "text": "so we treat all content inside the container as one label and then if they break out they treat it as a as",
    "start": "2065040",
    "end": "2071839"
  },
  {
    "text": "a container and therefore they're only allowed to read container read and write container content",
    "start": "2071839",
    "end": "2077118"
  },
  {
    "text": "each container has a separate what we call mcs label but basically it's a unique identifiers for",
    "start": "2077119",
    "end": "2082560"
  },
  {
    "text": "specific containers but right now we don't support multiple labels inside of containers",
    "start": "2082560",
    "end": "2087839"
  },
  {
    "text": "this is one big difference between app armor and sc linux and app armor is is actually providing security or",
    "start": "2087839",
    "end": "2095040"
  },
  {
    "text": "separation inside of the container whereas the linux is providing separation outside of the container so they work a",
    "start": "2095040",
    "end": "2101599"
  },
  {
    "text": "little bit differently in that case one question is um what is the",
    "start": "2101599",
    "end": "2107520"
  },
  {
    "text": "relationship between docker and cryo so does it work as the same as an as it does in potmen",
    "start": "2107520",
    "end": "2113200"
  },
  {
    "text": "yeah cryo and potman share common source code and dedicated libraries so all security",
    "start": "2113200",
    "end": "2119520"
  },
  {
    "text": "patterns which apply to potman should also apply to cryo and there is not that big relationship",
    "start": "2119520",
    "end": "2125760"
  },
  {
    "text": "to docker anymore but for example if we look at a default second profile then we can just say that",
    "start": "2125760",
    "end": "2131440"
  },
  {
    "text": "historically it has been inherited by docker yes that's it's a historical relationship",
    "start": "2131440",
    "end": "2138720"
  },
  {
    "text": "yeah the main comparison between docker and and cryo is around container engine",
    "start": "2138720",
    "end": "2144800"
  },
  {
    "text": "container images so um grio and darker both support",
    "start": "2144800",
    "end": "2150400"
  },
  {
    "text": "uh what's called oci images and um so if the input so anything that exists",
    "start": "2150400",
    "end": "2157119"
  },
  {
    "text": "at any container registry you know dr io quay dot io uh auto factory um is supported because",
    "start": "2157119",
    "end": "2165200"
  },
  {
    "text": "there's a standard around one of the container images and also the way we launch containers we also use a standard called the oci",
    "start": "2165200",
    "end": "2172000"
  },
  {
    "text": "runtime specification i am both using right now run c for launching containers so the",
    "start": "2172000",
    "end": "2178320"
  },
  {
    "text": "way you the containers on the input and the containers on you know when you execute them are both run the same exact way between docker",
    "start": "2178320",
    "end": "2185280"
  },
  {
    "text": "and cryo so therefore they can support all of the same content and podman as well",
    "start": "2185280",
    "end": "2191040"
  },
  {
    "text": "we've just been notified that we're running out of time now we will be available on the slack",
    "start": "2191040",
    "end": "2196079"
  },
  {
    "text": "channel to answer any other questions that people have or if we didn't get to a question here just",
    "start": "2196079",
    "end": "2202400"
  },
  {
    "text": "ask it on the slack channel so thanks for listening and uh goodbye happy to see you there",
    "start": "2202400",
    "end": "2212560"
  }
]