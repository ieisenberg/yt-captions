[
  {
    "text": "okay so welcome to kubernetes map",
    "start": "30",
    "end": "5910"
  },
  {
    "text": "kubernetes metrics api's past present and future of the Prometheus adapter i'm",
    "start": "5910",
    "end": "11969"
  },
  {
    "text": "sergey romanyuk don't try to spell my name just call me search sir or whatever works for you I work on different things",
    "start": "11969",
    "end": "19590"
  },
  {
    "text": "and kubernetes since around five years and currently I'm a member of the monitoring team at Red Hat integrating",
    "start": "19590",
    "end": "26400"
  },
  {
    "text": "Prometheus into communities and many satellite in projects and around it so I",
    "start": "26400",
    "end": "34230"
  },
  {
    "text": "met a matter or Matias as most people call me but that's my github panda I'm",
    "start": "34230",
    "end": "39960"
  },
  {
    "text": "also part of the same team working on integrating Prometheus and kubernetes yeah so today we are going to take a",
    "start": "39960",
    "end": "49890"
  },
  {
    "text": "deep dive through the cooper kubernetes metrics api and take a look what's",
    "start": "49890",
    "end": "56160"
  },
  {
    "text": "actually going on so first a bit about the history the metrics in kubernetes",
    "start": "56160",
    "end": "62760"
  },
  {
    "text": "1.1 were yeah CPU and memory so that's",
    "start": "62760",
    "end": "67830"
  },
  {
    "text": "about it and they were coming from the node reporting to the kubernetes api so",
    "start": "67830",
    "end": "73229"
  },
  {
    "text": "that was actually used by the by the scheduler to know what's going on in the kubernetes cluster and that's the way it",
    "start": "73229",
    "end": "80340"
  },
  {
    "text": "was back and back in the days that was the architecture we had like he'd sir in",
    "start": "80340",
    "end": "85950"
  },
  {
    "text": "the middle of it all and that would communicate to the to the api server and",
    "start": "85950",
    "end": "91259"
  },
  {
    "text": "it had its own kind small storage back-end and it would communicate to the",
    "start": "91259",
    "end": "97110"
  },
  {
    "text": "cube latency advisor so yeah I think that's like the rough idea so there were",
    "start": "97110",
    "end": "105570"
  },
  {
    "text": "a lot of problems with hipster and it's been deprecated for one or two I think like two versions of kubernetes already",
    "start": "105570",
    "end": "112500"
  },
  {
    "text": "there was a push based model it has Sync plugins and that meant that basically",
    "start": "112500",
    "end": "118860"
  },
  {
    "text": "everything that needs to be supported needed to be put in into hipster and there was kind of a feature creep so to",
    "start": "118860",
    "end": "127020"
  },
  {
    "text": "say like everything needed to be actually implemented in that code it was",
    "start": "127020",
    "end": "132840"
  },
  {
    "text": "an opinionated too no abstractions and yeah what if you wanted to use Prometheus instead so we",
    "start": "132840",
    "end": "139830"
  },
  {
    "text": "have some goats to improve the situation it was about decoupling the scheduling",
    "start": "139830",
    "end": "145020"
  },
  {
    "text": "and scaling decisions from hipster for the reasons we were just talking about and introduced an abstract API scheme to",
    "start": "145020",
    "end": "152700"
  },
  {
    "text": "do the same just to point out we are not",
    "start": "152700",
    "end": "158910"
  },
  {
    "text": "talking out the about the Prometheus exposition format we are talking about metric API types and those are real",
    "start": "158910",
    "end": "165240"
  },
  {
    "text": "types like go struct definitions inside the kubernetes code and as you can see",
    "start": "165240",
    "end": "171180"
  },
  {
    "text": "it's yeah it's a struct and that's it you can find those types by using curl",
    "start": "171180",
    "end": "177810"
  },
  {
    "text": "on the API server endpoint and the ones we are talking about are in bolt and the",
    "start": "177810",
    "end": "183990"
  },
  {
    "text": "slash metrics API or endpoint is actually what gives back the Prometheus",
    "start": "183990",
    "end": "190380"
  },
  {
    "text": "exposition format and there's scraped by Prometheus but we don't really care about this today so yeah there are three",
    "start": "190380",
    "end": "198360"
  },
  {
    "text": "types of metrics API or types in kubernetes one is the resource metrics",
    "start": "198360",
    "end": "204750"
  },
  {
    "text": "API and there was the one we were talking about earlier in kubernetes 1.1 already so it was CPU and memory and",
    "start": "204750",
    "end": "212100"
  },
  {
    "text": "that's it then we have now custom metric API and that is actually doing taking an object",
    "start": "212100",
    "end": "221280"
  },
  {
    "text": "inside of kubernetes and turning that into a metric and then we have external metrics API which is what we can use",
    "start": "221280",
    "end": "228840"
  },
  {
    "text": "inside kubernetes to do something to talk or to get metrics from an external",
    "start": "228840",
    "end": "234030"
  },
  {
    "text": "provider like a cloud provider for example because it's only an API and",
    "start": "234030",
    "end": "240620"
  },
  {
    "text": "it's decoupled we can have several implementations and those are I think",
    "start": "240620",
    "end": "246800"
  },
  {
    "text": "mostly it there's the metrics the metric server which is most likely shipped as a",
    "start": "246800",
    "end": "255090"
  },
  {
    "text": "default for for most kubernetes clusters but it only gives you the resource metrics then we have the kubernetes",
    "start": "255090",
    "end": "262560"
  },
  {
    "text": "Prometheus adapter that is talking to Prometheus and then there are a bunch of club",
    "start": "262560",
    "end": "268979"
  },
  {
    "text": "provider specific adapters and yeah out",
    "start": "268979",
    "end": "274229"
  },
  {
    "text": "of interest yeah who a few uses metrics server exactly like in production okay",
    "start": "274229",
    "end": "280039"
  },
  {
    "text": "who a few uses any of the other adapters or knows about it that's quite okay",
    "start": "280039",
    "end": "288240"
  },
  {
    "text": "that's way less that's actually expected yeah cool all right so what about",
    "start": "288240",
    "end": "295440"
  },
  {
    "text": "Prometheus right so say yours is gonna tell us about the Prometheus adapter and",
    "start": "295440",
    "end": "301220"
  },
  {
    "text": "about integrating Prometheus and kubernetes now yep before I go into the",
    "start": "301220",
    "end": "306660"
  },
  {
    "text": "details into the parameters that have to let me point out that since these are three separate api's and kubernetes",
    "start": "306660",
    "end": "314280"
  },
  {
    "text": "resource metrics custom metrics and external metrics what you can do actually is to deploy a mix of those",
    "start": "314280",
    "end": "323070"
  },
  {
    "text": "tools here the most canonical example would be probably many of you have by default the metric server deployed it's",
    "start": "323070",
    "end": "329580"
  },
  {
    "text": "a quick win it's deployed by default by many distributions the drawback though",
    "start": "329580",
    "end": "334740"
  },
  {
    "text": "is that the metric server only serves the resource metrics API so the thing that you see when you invoke cube cut",
    "start": "334740",
    "end": "340860"
  },
  {
    "text": "all top parts or Q capital Q couple top notes um but you can in addition to have",
    "start": "340860",
    "end": "347099"
  },
  {
    "text": "custom metrics in order for instance to introduce your own metrics that communities doesn't know about anything",
    "start": "347099",
    "end": "352729"
  },
  {
    "text": "you need another piece of software desta that does that so you could deploy a metric server in addition to that if",
    "start": "352729",
    "end": "359550"
  },
  {
    "text": "you're for instance on Azure you could deploy the asura metrics adapter which hosts the other two endpoints or and",
    "start": "359550",
    "end": "367080"
  },
  {
    "text": "this is what I'm going to talk about here you can use the Prometheus adapter which as of today can host all the three",
    "start": "367080",
    "end": "375360"
  },
  {
    "text": "metric API endpoints inside Cuba Nettie's note though external metrics was merged in just recently it's still a",
    "start": "375360",
    "end": "382800"
  },
  {
    "text": "little shaky but already quite usable and just out of interest so Leros are",
    "start": "382800",
    "end": "388650"
  },
  {
    "text": "you here no Salyers unfortunately he I saw him on the attendee list but a big",
    "start": "388650",
    "end": "393780"
  },
  {
    "text": "shout out to Sally Ross because she was the initial creator of the Prometheus adapter project he went",
    "start": "393780",
    "end": "399050"
  },
  {
    "text": "to other duties inside the kubernetes ecosystem the API machinery but we are actively maintaining or continuing to",
    "start": "399050",
    "end": "405319"
  },
  {
    "text": "maintain that project okay so what our prometheus let's say you have a",
    "start": "405319",
    "end": "411650"
  },
  {
    "text": "kubernetes deployment that has prometheus is a first-class metrics backend and you just want to use that so",
    "start": "411650",
    "end": "420110"
  },
  {
    "text": "you have configured to Prometheus to scrape all the resource metrics these",
    "start": "420110",
    "end": "427220"
  },
  {
    "text": "are mostly coming from couplet see advisor you would like to add additional",
    "start": "427220",
    "end": "432349"
  },
  {
    "text": "custom metrics canonical example here being HTTP requests per second by",
    "start": "432349",
    "end": "437389"
  },
  {
    "text": "workload and potentially also external metrics that means the metrics that are",
    "start": "437389",
    "end": "442639"
  },
  {
    "text": "coming totally outside of the cluster which are not related to any objects and",
    "start": "442639",
    "end": "447830"
  },
  {
    "text": "all of those metrics are being scraped into your Prometheus instance in this",
    "start": "447830",
    "end": "452930"
  },
  {
    "text": "case you could use Prometheus adapter and host all of the three API endpoints",
    "start": "452930",
    "end": "459590"
  },
  {
    "text": "all that works internally is that the Prometheus adapter and by the way all the other tools do it the same way",
    "start": "459590",
    "end": "464860"
  },
  {
    "text": "register asks what kubernetes calls an aggregated API server and that's",
    "start": "464860",
    "end": "470419"
  },
  {
    "text": "actually a pretty straightforward approach as you may know kubernetes is a huge API of many things and it's",
    "start": "470419",
    "end": "477830"
  },
  {
    "text": "actually an API tree and whenever kubernetes wants to serve metrics API",
    "start": "477830",
    "end": "483979"
  },
  {
    "text": "endpoints in that case it simply dispatches to the premise of the adapter or metric server or any any tool that",
    "start": "483979",
    "end": "490759"
  },
  {
    "text": "you like in order to host those metric endpoints what the Prometheus adapter",
    "start": "490759",
    "end": "496789"
  },
  {
    "text": "internally does it simply converts those API requests into real Prometheus",
    "start": "496789",
    "end": "502069"
  },
  {
    "text": "theories and gives back the results and how this is being configured I will show",
    "start": "502069",
    "end": "507469"
  },
  {
    "text": "you in very much detail here and other of interest who have you configured Prometheus adapter already in the past",
    "start": "507469",
    "end": "513909"
  },
  {
    "text": "Steffie okay who of you had issues with configuring it okay so hopefully I'm",
    "start": "513909",
    "end": "522018"
  },
  {
    "text": "gonna clear things a little bit up in this talk make it more approachable for you to configure Prometheus adapter but",
    "start": "522019",
    "end": "528860"
  },
  {
    "text": "also we're going to give an outlook on the future of of the project resource metrics else Matias",
    "start": "528860",
    "end": "536420"
  },
  {
    "text": "mentioned these are actually hard-coded metrics into kubernetes itself currently",
    "start": "536420",
    "end": "542450"
  },
  {
    "text": "most famous ones these are node metrics and plot metrics CPU memory you will",
    "start": "542450",
    "end": "548390"
  },
  {
    "text": "find out if you actually have this API enabled by calling cube cuddle get API services it's a good way to check if",
    "start": "548390",
    "end": "555770"
  },
  {
    "text": "this returns true and that means that your aggregated API set up is actually correctly configured and then there is",
    "start": "555770",
    "end": "563060"
  },
  {
    "text": "another need sub command of Q capital called API resources here you can grab four metrics and you will get exactly",
    "start": "563060",
    "end": "569450"
  },
  {
    "text": "those two metric names that are interest for for resource metrics namely notes",
    "start": "569450",
    "end": "576260"
  },
  {
    "text": "and parts note notes on namespace name spell notes are North namespaced",
    "start": "576260",
    "end": "582590"
  },
  {
    "text": "parts or names based metrics obviously you know probably most of you know Cube",
    "start": "582590",
    "end": "589760"
  },
  {
    "text": "shuttle depart this is exactly the API that is be invoked behind the scenes but",
    "start": "589760",
    "end": "595670"
  },
  {
    "text": "the same way you do cue cut will get part or cue cattle get deployment you can dupe you capital get part of metric",
    "start": "595670",
    "end": "601730"
  },
  {
    "text": "static ASIO and then the pot name and you will get a DC realized version of the metric and can inspect the values so",
    "start": "601730",
    "end": "610040"
  },
  {
    "text": "what you see here we have the pot metric in this case Gravano in the namespace",
    "start": "610040",
    "end": "615470"
  },
  {
    "text": "monitoring and it actually contains two containers inside this part one with the named refer nor the other continuous",
    "start": "615470",
    "end": "621440"
  },
  {
    "text": "unnamed and there you have the CPU and memory matrix so the question is how do",
    "start": "621440",
    "end": "627830"
  },
  {
    "text": "these values get in here by the means of prometheus",
    "start": "627830",
    "end": "633279"
  },
  {
    "text": "Prometheus adapter ships with a simple config map that you can configure and to",
    "start": "633790",
    "end": "639620"
  },
  {
    "text": "configure resource metrics we have a section that is called resource rules and the first thing you simply specify",
    "start": "639620",
    "end": "646040"
  },
  {
    "text": "here is CPU and a corresponding container theory that will give back the",
    "start": "646040",
    "end": "654740"
  },
  {
    "text": "container CPU usages for for this constraint there's this metric here",
    "start": "654740",
    "end": "661400"
  },
  {
    "text": "container CPU usage seconds total comes directly from C advice in this case the nice thing here is the",
    "start": "661400",
    "end": "668150"
  },
  {
    "text": "whole theoretically this metric could come from anywhere right the most canonical deployment and also the sample",
    "start": "668150",
    "end": "674780"
  },
  {
    "text": "deployment that we ship in the Prometheus adapter comes pre-configured with three advisor metrics but",
    "start": "674780",
    "end": "680150"
  },
  {
    "text": "theoretically you could grab those values from anywhere else in addition to",
    "start": "680150",
    "end": "685400"
  },
  {
    "text": "that you see you have those templates variables called label measures a label",
    "start": "685400",
    "end": "690560"
  },
  {
    "text": "mature and grew by and I will give you also a table on what those mean exactly you have the container theory net con",
    "start": "690560",
    "end": "697700"
  },
  {
    "text": "next comes the knot theory for CPU metrics literally the same same thing",
    "start": "697700",
    "end": "703690"
  },
  {
    "text": "and then since these are Prometheus metrics you have certain labels on those",
    "start": "703690",
    "end": "711560"
  },
  {
    "text": "metrics attached and you want to associate those labels with a resource",
    "start": "711560",
    "end": "716600"
  },
  {
    "text": "type that I available in kubernetes for resource metrics obviously these are nodes and parts in addition to namespace",
    "start": "716600",
    "end": "724880"
  },
  {
    "text": "and this is exactly what you do in the resources section of the promisee setup the configuration what you say here is",
    "start": "724880",
    "end": "731240"
  },
  {
    "text": "okay Prometheus adapter please take the label node and associate that with the",
    "start": "731240",
    "end": "737090"
  },
  {
    "text": "note resource type in kubernetes and when you have deviations from that you would say okay whenever we have a",
    "start": "737090",
    "end": "745000"
  },
  {
    "text": "label called pot under screw name please associate that with the resource type",
    "start": "745000",
    "end": "750110"
  },
  {
    "text": "pot pretty straightforward in addition to that we also since for the pot",
    "start": "750110",
    "end": "758950"
  },
  {
    "text": "resource metrics we also have a distinction between containers you also specify explicitly the container label",
    "start": "758950",
    "end": "764690"
  },
  {
    "text": "inside inside your metrics little tip for debugging this Prometheus is a very",
    "start": "764690",
    "end": "771590"
  },
  {
    "text": "nice API endpoint the series API endpoint so if you are unsure oh what",
    "start": "771590",
    "end": "777590"
  },
  {
    "text": "labels does my metric have and what do I associate with simply take the label at",
    "start": "777590",
    "end": "783530"
  },
  {
    "text": "take the metric name stitch it into this slash API v1 Col request against the",
    "start": "783530",
    "end": "790700"
  },
  {
    "text": "Prometheus and there you will have a nice listing of all the series that are available and then you can",
    "start": "790700",
    "end": "797650"
  },
  {
    "text": "the labels that are of interest for you and associate them with the resource types in communities so in this case",
    "start": "797650",
    "end": "803080"
  },
  {
    "text": "obviously container name is associated with the container namespace is associated with namespace pot name and",
    "start": "803080",
    "end": "810730"
  },
  {
    "text": "node are pretty obvious same goes for memory the one that I showed you here",
    "start": "810730",
    "end": "817390"
  },
  {
    "text": "were CPU metrics the same exactly the same applies for memory metrics with",
    "start": "817390",
    "end": "823540"
  },
  {
    "text": "just a little different metric name coming from prometheus in addition to it to this just be",
    "start": "823540",
    "end": "830440"
  },
  {
    "text": "careful to have a match whenever you have an aggregated function like in this one the rate function and you have a",
    "start": "830440",
    "end": "836260"
  },
  {
    "text": "window specified please set also the window here because that is the same window here because that is exactly what",
    "start": "836260",
    "end": "842160"
  },
  {
    "text": "communities also expects you to incur in figure so please be aware to set this to",
    "start": "842160",
    "end": "847180"
  },
  {
    "text": "the same value custom metrics that's",
    "start": "847180",
    "end": "852430"
  },
  {
    "text": "actually like the second gear which those metrics are pretty simple they are just to metric types no not metrics and",
    "start": "852430",
    "end": "858580"
  },
  {
    "text": "pop metrics for custom metrics these are metrics that are coming from you like abilities doesn't know which one you",
    "start": "858580",
    "end": "864550"
  },
  {
    "text": "would like to expose inside kubernetes for instance for the horizontal pod autoscaler but there are certain",
    "start": "864550",
    "end": "871570"
  },
  {
    "text": "constraints which you have to fulfill before exposing those custom metrics the biggest differentiator matías explained between custom metrics",
    "start": "871570",
    "end": "878380"
  },
  {
    "text": "and external metrics is that custom metrics are always associated with the concrete kubernetes resource a pot",
    "start": "878380",
    "end": "885810"
  },
  {
    "text": "service a job deployment whatever there is where as external metrics the only",
    "start": "885810",
    "end": "891730"
  },
  {
    "text": "Association they have is the name space so there there is no connection to concrete artifacts inside Cuban Ares therefore",
    "start": "891730",
    "end": "900100"
  },
  {
    "text": "custom metrics are a little bit more complex to configure again the same",
    "start": "900100",
    "end": "905440"
  },
  {
    "text": "thing if you want to see if custom metrics on abled correctly in your deployment check out the Q cattle gate",
    "start": "905440",
    "end": "912490"
  },
  {
    "text": "API services v1 better one custom metrics KS IO and then you should see if",
    "start": "912490",
    "end": "917800"
  },
  {
    "text": "it's available or new or not to see which metrics are available inside your",
    "start": "917800",
    "end": "924580"
  },
  {
    "text": "cluster it's not as nice as with the resource metrics because again you",
    "start": "924580",
    "end": "930610"
  },
  {
    "text": "define them yourself so there is no automatic discovery mechanisms of the metric types that you",
    "start": "930610",
    "end": "936970"
  },
  {
    "text": "pre configure but you can still use the cute couple Rock command and say cube cut will get raw custom metrics Kate Sao",
    "start": "936970",
    "end": "943030"
  },
  {
    "text": "and then kubernetes will print out all the known custom metrics that are",
    "start": "943030",
    "end": "949060"
  },
  {
    "text": "configured in this case in this example we configured HTTP requests per second which we want to expose and feed this",
    "start": "949060",
    "end": "957010"
  },
  {
    "text": "value back into their horizontal put out a scalar to scale up and down your parts",
    "start": "957010",
    "end": "963450"
  },
  {
    "text": "so how does this work how do we expose those things well there are four steps",
    "start": "963450",
    "end": "968530"
  },
  {
    "text": "in the parameters adapter which you have to configure first you have to somehow specify a/c risk theory that will let",
    "start": "968530",
    "end": "976990"
  },
  {
    "text": "the permutation have to discover all the custom metrics that you want to slurp into kubernetes that's the first step",
    "start": "976990",
    "end": "983170"
  },
  {
    "text": "second step I showed you already and then resource metrics how that works out you want to associate because these are",
    "start": "983170",
    "end": "989980"
  },
  {
    "text": "custom metrics all certain labels with kubernetes resource types parts services",
    "start": "989980",
    "end": "997330"
  },
  {
    "text": "deployments second step third step is you have to define the name of the",
    "start": "997330",
    "end": "1003300"
  },
  {
    "text": "exposed metric inside kubernetes you may for instance apply certain aggregation",
    "start": "1003300",
    "end": "1009090"
  },
  {
    "text": "functions like the write function to a raw metric so you maybe want to add the suffix per second to the metric exposed",
    "start": "1009090",
    "end": "1016050"
  },
  {
    "text": "inside communities so there is another configuration section for that and finally step four you want to specify",
    "start": "1016050",
    "end": "1022830"
  },
  {
    "text": "the actual theory that is being executed against Prometheus whenever you get a",
    "start": "1022830",
    "end": "1029329"
  },
  {
    "text": "concrete custom metric so let's go through the configurations one by one",
    "start": "1029330",
    "end": "1034730"
  },
  {
    "text": "discovery series query as I showed you we want to expose HTTP requests total",
    "start": "1034730",
    "end": "1041550"
  },
  {
    "text": "per second so you could say okay I have a Prometheus and I have certain metrics",
    "start": "1041550",
    "end": "1048600"
  },
  {
    "text": "inside it that I'm already stripping HTTP requests total maybe not all of",
    "start": "1048600",
    "end": "1054060"
  },
  {
    "text": "them are related to parts that are being scraped so you would add another constraint namespaced not empty and by",
    "start": "1054060",
    "end": "1063090"
  },
  {
    "text": "doing so you say the parameters adapter okay please execute this serious query against the Prometheus API that one will",
    "start": "1063090",
    "end": "1071690"
  },
  {
    "text": "return a list of metrics and all of these metrics will be considered the ones that you are interested in to be",
    "start": "1071690",
    "end": "1077690"
  },
  {
    "text": "present inside Cuba Nettie's as I show you before what we did essentially to",
    "start": "1077690",
    "end": "1083090"
  },
  {
    "text": "debug these things and configure Prometheus adapter ourselves you can take this exact series theory and",
    "start": "1083090",
    "end": "1088159"
  },
  {
    "text": "execute it yourself against this end point so you see exactly the same result",
    "start": "1088159",
    "end": "1093590"
  },
  {
    "text": "that the primitive promises adapter will observe next step Association and the",
    "start": "1093590",
    "end": "1101090"
  },
  {
    "text": "resource metrics I showed you one way to associate the labels with kubernetes",
    "start": "1101090",
    "end": "1106279"
  },
  {
    "text": "resource types namely explicitly say okay node corresponds to the node label",
    "start": "1106279",
    "end": "1112309"
  },
  {
    "text": "pot underscore name port underscore name label corresponds to pot resources but",
    "start": "1112309",
    "end": "1118399"
  },
  {
    "text": "you could say well my labels match exactly so my metrics have pot name space",
    "start": "1118399",
    "end": "1124929"
  },
  {
    "text": "service whatever labels are known also to kubernetes resource types in this",
    "start": "1124929",
    "end": "1130519"
  },
  {
    "text": "case you could simply use this template variable dot resource beware though this",
    "start": "1130519",
    "end": "1136249"
  },
  {
    "text": "is dangerous we were bitten by it and I will show you exactly in an example how",
    "start": "1136249",
    "end": "1141940"
  },
  {
    "text": "namely when you stitch this to the serious matching endpoint of Prometheus",
    "start": "1141940",
    "end": "1148669"
  },
  {
    "text": "you will see the name space part and service labels are correctly associated",
    "start": "1148669",
    "end": "1153950"
  },
  {
    "text": "with the corresponding types well we have to jump label which is pretty ubiquitous inside primitives and this",
    "start": "1153950",
    "end": "1159679"
  },
  {
    "text": "one will be simply associated with the jobs resource type inside kubernetes so please be careful if you use this dot",
    "start": "1159679",
    "end": "1166070"
  },
  {
    "text": "resource templates template because you might have too many associations third",
    "start": "1166070",
    "end": "1174019"
  },
  {
    "text": "step naming once you know which metrics you",
    "start": "1174019",
    "end": "1179749"
  },
  {
    "text": "want to fit into the Prometheus adapter we have a reg X based configuration",
    "start": "1179749",
    "end": "1184909"
  },
  {
    "text": "scheme where you say ok whenever these series come in take whatever is that",
    "start": "1184909",
    "end": "1192769"
  },
  {
    "text": "starts and ends with the underscore total have a reg X group defined and use",
    "start": "1192769",
    "end": "1198499"
  },
  {
    "text": "that that one and suffix it with per second so HTTP requests total becomes HTTP",
    "start": "1198499",
    "end": "1205220"
  },
  {
    "text": "requests total per second right that's that's a concrete example here final",
    "start": "1205220",
    "end": "1213650"
  },
  {
    "text": "step the actual theory then that is being executed well in this case it's a",
    "start": "1213650",
    "end": "1219770"
  },
  {
    "text": "simple sum over rate and pretty much all the values that are needed to be feed it",
    "start": "1219770",
    "end": "1226310"
  },
  {
    "text": "into this theory already come from the configuration above like the series name label match isn't and the like so you",
    "start": "1226310",
    "end": "1233480"
  },
  {
    "text": "can use those template variables down here to configure the key fury what you",
    "start": "1233480",
    "end": "1239930"
  },
  {
    "text": "get as a result when you involve cube cut' will get raw custom metrics KS IL for a certain namespace and a certain",
    "start": "1239930",
    "end": "1247070"
  },
  {
    "text": "part and HTTP requests per second you get exactly what what we wanted to",
    "start": "1247070",
    "end": "1252470"
  },
  {
    "text": "achieve a concrete value in this case it was 5,000 Milly's HTTP requests per",
    "start": "1252470",
    "end": "1259910"
  },
  {
    "text": "second associated with this concrete part when you bump up the verbosity",
    "start": "1259910",
    "end": "1265370"
  },
  {
    "text": "level of committed after you can also copy paste this query and execute it yourself against Prometheus and recheck",
    "start": "1265370",
    "end": "1271310"
  },
  {
    "text": "if the values are the same so which template variables are",
    "start": "1271310",
    "end": "1276710"
  },
  {
    "text": "available inside the parameters adapter well first the series name that's the one that you essentially also specify",
    "start": "1276710",
    "end": "1283580"
  },
  {
    "text": "and the series query so in this case is HTTP request total then you have a pre",
    "start": "1283580",
    "end": "1290000"
  },
  {
    "text": "rendered version of all the associated resources like in this case namespace",
    "start": "1290000",
    "end": "1295400"
  },
  {
    "text": "come apart it's a comma delimited list then you have all the label matches",
    "start": "1295400",
    "end": "1300410"
  },
  {
    "text": "which is the same as group by but includes also the values so namespace equals default pot equals some name and",
    "start": "1300410",
    "end": "1309080"
  },
  {
    "text": "then you have two additional template variables which one is a map the label values by name and the group by slice",
    "start": "1309080",
    "end": "1315680"
  },
  {
    "text": "which you could use in standard goal template range queries to do more",
    "start": "1315680",
    "end": "1320780"
  },
  {
    "text": "elaborate like query definitions",
    "start": "1320780",
    "end": "1324910"
  },
  {
    "text": "finally external metrics good news here is the configuration fortunately is",
    "start": "1326869",
    "end": "1333330"
  },
  {
    "text": "nearly exactly the same as with custom metrics with one biggest differentiation by the way again the same same procedure",
    "start": "1333330",
    "end": "1341009"
  },
  {
    "text": "is above to get the API services and check if this metrics endpoint is",
    "start": "1341009",
    "end": "1346139"
  },
  {
    "text": "available you have exactly the same steps as with custom metrics you have for discovery we have the Association",
    "start": "1346139",
    "end": "1354409"
  },
  {
    "text": "naming and clearing the Association is different though because external",
    "start": "1354409",
    "end": "1359820"
  },
  {
    "text": "metrics are not associated with communities resource type types with one exception the namespace external metrics",
    "start": "1359820",
    "end": "1367679"
  },
  {
    "text": "are per definition in cuba Nettie's namespaced so you would have still to associate",
    "start": "1367679",
    "end": "1373049"
  },
  {
    "text": "some namespace label that you get and this is a concrete example again this",
    "start": "1373049",
    "end": "1380190"
  },
  {
    "text": "feature was was merged very recently this is some external metrics i took literally the same example HTTP request",
    "start": "1380190",
    "end": "1386219"
  },
  {
    "text": "total which will be in this case associated with the cube system namespace coming from the control plane",
    "start": "1386219",
    "end": "1393649"
  },
  {
    "text": "so yeah we merged the external metrics",
    "start": "1395479",
    "end": "1400799"
  },
  {
    "text": "support I don't know like three weeks ago same thing so it's it's pretty new but we are in the future kind of already",
    "start": "1400799",
    "end": "1408419"
  },
  {
    "text": "know we want to move the Prometheus adapter somewhere else it's still in service namespace which is fine but we",
    "start": "1408419",
    "end": "1415499"
  },
  {
    "text": "want to like make it a bit more obvious that's a really supported thing by us at",
    "start": "1415499",
    "end": "1420629"
  },
  {
    "text": "least we want to really take out the config complexity as you saw it's quite",
    "start": "1420629",
    "end": "1427109"
  },
  {
    "text": "a lot yeah so that's like going to to be improved by savior's probably yeah and",
    "start": "1427109",
    "end": "1434249"
  },
  {
    "text": "for this I would like also to do like a little survey the whole configuration story that I showed you who liked this",
    "start": "1434249",
    "end": "1440789"
  },
  {
    "text": "configuration hands up very very ok",
    "start": "1440789",
    "end": "1446279"
  },
  {
    "text": "so I agree with you personally I also don't like the way we currently have",
    "start": "1446279",
    "end": "1451440"
  },
  {
    "text": "parameters set up to configured please if you would like to use Prometheus as your first class metrics back-end please",
    "start": "1451440",
    "end": "1459029"
  },
  {
    "text": "tell us or tell me or Matias you stole how you would like to have the configuration to happen for you as a best case that's",
    "start": "1459029",
    "end": "1466740"
  },
  {
    "text": "that's the input that would I would love to get here as a QA after this presentation so yeah next to the attack",
    "start": "1466740",
    "end": "1473910"
  },
  {
    "text": "of the scalability issues flatten the library dependencies and yeah we are thinking about actually creating a CR D",
    "start": "1473910",
    "end": "1479549"
  },
  {
    "text": "to kind of wrap everything that we just shown in the configuration and make it a",
    "start": "1479549",
    "end": "1485070"
  },
  {
    "text": "bit more high-level a bit more approachable yeah so that's the future plan so I said you said please approach",
    "start": "1485070",
    "end": "1490920"
  },
  {
    "text": "this and if you want to talk about specific use cases here's a sample HP a",
    "start": "1490920",
    "end": "1497790"
  },
  {
    "text": "configuration just to mention this we have this HTTP requests per second and",
    "start": "1497790",
    "end": "1503190"
  },
  {
    "text": "there's actually the metric that was defined in one of the earlier examples",
    "start": "1503190",
    "end": "1510950"
  },
  {
    "text": "so we can now reference these metrics in the horizontal pod autoscaler yeah so",
    "start": "1510950",
    "end": "1519030"
  },
  {
    "text": "yeah the target average value is 1000 and if that threshold is crossed we're",
    "start": "1519030",
    "end": "1525179"
  },
  {
    "text": "gonna like scale up the number of parts that we have and the minimum replicas is one and we add most have 10 replicas for",
    "start": "1525179",
    "end": "1532290"
  },
  {
    "text": "for that specific deployment so if you want to actually try the Prometheus",
    "start": "1532290",
    "end": "1538830"
  },
  {
    "text": "adapter or everything we just talked about we are also the maintainer of the Prometheus operator and the Q Prometheus",
    "start": "1538830",
    "end": "1546240"
  },
  {
    "text": "project which we finally moved out of the old repository so it's a separate project now and yeah the Prometheus",
    "start": "1546240",
    "end": "1554790"
  },
  {
    "text": "adapter is part of the Q Prometheus project which assembles all the good things like cube set metrics Prometheus",
    "start": "1554790",
    "end": "1561929"
  },
  {
    "text": "adapter not export or like yeah graph Anna even so we basically ship a full",
    "start": "1561929",
    "end": "1567960"
  },
  {
    "text": "class time monitoring stack that you can just do a cube cut and apply on the",
    "start": "1567960",
    "end": "1573299"
  },
  {
    "text": "manifest folder that is pre-rendered for you and you already have the Prometheus adapter once final one single note on",
    "start": "1573299",
    "end": "1582450"
  },
  {
    "text": "this do make sure that you don't have the metric server installed on your casa",
    "start": "1582450",
    "end": "1588630"
  },
  {
    "text": "otherwise it were failure cuz we have this matrix API and only one thing",
    "start": "1588630",
    "end": "1593730"
  },
  {
    "text": "surf this metrics API at one time so make sure to not have the metric server",
    "start": "1593730",
    "end": "1598770"
  },
  {
    "text": "serving that API and then you are good to go if you're interested in this topic",
    "start": "1598770",
    "end": "1606590"
  },
  {
    "text": "please to get involved come to us talk about your use cases but even better if",
    "start": "1606590",
    "end": "1612630"
  },
  {
    "text": "you want to really yeah develop this kind of stuff upstream with the kubernetes community we are part of the",
    "start": "1612630",
    "end": "1619830"
  },
  {
    "text": "sig instrumentation and parts of this are also interesting for the auto scaling for example it's used by the",
    "start": "1619830",
    "end": "1627030"
  },
  {
    "text": "horizontal pot autoscaler and both have a mailing list and be weekly meetings I assume so thank you and questions",
    "start": "1627030",
    "end": "1637540"
  },
  {
    "text": "[Applause]",
    "start": "1637540",
    "end": "1647680"
  },
  {
    "text": "please show your hand again yeah yeah hey one question is it possible to use several Prometheus instances with the",
    "start": "1651660",
    "end": "1658170"
  },
  {
    "text": "doctor why I have to put the rate metric to 1 and then only link it to one so",
    "start": "1658170",
    "end": "1663420"
  },
  {
    "text": "yeah it is definitely possible to use separate from it either I think I should don't have to repeat",
    "start": "1663420",
    "end": "1669570"
  },
  {
    "text": "the question because it was done with microphone it's definitely possible but per metrics API endpoint so that's",
    "start": "1669570",
    "end": "1675510"
  },
  {
    "text": "essentially also the same thing that we are doing in the commercial version context that we are shipping in",
    "start": "1675510",
    "end": "1680730"
  },
  {
    "text": "OpenShift we have a Prometheus adapter that is being deployed that points to a dedicated cluster monitoring Prometheus",
    "start": "1680730",
    "end": "1686700"
  },
  {
    "text": "and then what you could do in addition on top of it have a separate primitives adapter deployed as completely separate",
    "start": "1686700",
    "end": "1692700"
  },
  {
    "text": "deployment and pointed to a Prometheus that is hosting workload metrics and",
    "start": "1692700",
    "end": "1698370"
  },
  {
    "text": "that's I would even say even recommended and consider the best practice ok in the",
    "start": "1698370",
    "end": "1706020"
  },
  {
    "text": "previous version when for example your matrix was not present in Prometheus at some time you have to restart every",
    "start": "1706020",
    "end": "1712710"
  },
  {
    "text": "single time the the adapter going to talk to this thing sorry you have to",
    "start": "1712710",
    "end": "1719310"
  },
  {
    "text": "restart so when you do discovery for the matrix and the matrix are not developing",
    "start": "1719310",
    "end": "1725130"
  },
  {
    "text": "parameters because the compound has not been started and so and so on so how do you tackle this thing so as I understand",
    "start": "1725130",
    "end": "1732900"
  },
  {
    "text": "your problem is what happens if Prometheus adapter is not able to discover all the metrics that you are",
    "start": "1732900",
    "end": "1738000"
  },
  {
    "text": "interested in right you have to simply kick it yes exactly so there are retries",
    "start": "1738000",
    "end": "1744600"
  },
  {
    "text": "being made as part of a regular HTTP client retries but if you have a Borg Prometheus that is serving wrong series",
    "start": "1744600",
    "end": "1752040"
  },
  {
    "text": "and point then yes you would have to Rick again",
    "start": "1752040",
    "end": "1755960"
  },
  {
    "text": "thanks for the presentation and for your work on the project first of all could",
    "start": "1760059",
    "end": "1765559"
  },
  {
    "text": "you go over how to configure the kubernetes echo great aggregation layer in terms of certificates and how to have",
    "start": "1765559",
    "end": "1772820"
  },
  {
    "text": "the Prometheus adapter generate the correct certificate so that even system",
    "start": "1772820",
    "end": "1778399"
  },
  {
    "text": "anonymous requests get accepted oh that's that's a good question yes so there's actually a question on how to",
    "start": "1778399",
    "end": "1785360"
  },
  {
    "text": "configure aggregated API endpoints and there is an API servers resource type",
    "start": "1785360",
    "end": "1792260"
  },
  {
    "text": "inside kubernetes that you essentially it has a couple of sections inside that",
    "start": "1792260",
    "end": "1797539"
  },
  {
    "text": "that you tell the kubernetes api hey i have an adapter it may be the",
    "start": "1797539",
    "end": "1803120"
  },
  {
    "text": "permutation adapter but it may be something else deployed and it's reachable under a certain service and it",
    "start": "1803120",
    "end": "1809720"
  },
  {
    "text": "uses this certificate right but that's only part of the story they're actually three methods on how to configure like",
    "start": "1809720",
    "end": "1817220"
  },
  {
    "text": "this mutual trust relationship between the API server and the Greg Righetti API server so TLS is one of them they are",
    "start": "1817220",
    "end": "1827679"
  },
  {
    "text": "actually there is also an example in the deployment of the Prometheus adapter I'm not sure if it uses already certificates",
    "start": "1827679",
    "end": "1834769"
  },
  {
    "text": "or it still uses unsecure skip verify but I can if you want to come afterwards to me I can definitely punch it to our",
    "start": "1834769",
    "end": "1841490"
  },
  {
    "text": "repository inside the cluster monitoring operator where we have all of this setup which can give you a guiding path on how",
    "start": "1841490",
    "end": "1848750"
  },
  {
    "text": "to set up TLS certificates for API services by the way this is not really nothing to do with like the metrics",
    "start": "1848750",
    "end": "1854799"
  },
  {
    "text": "adapters this is ubiquitous topic like across all API services I can give you a",
    "start": "1854799",
    "end": "1860510"
  },
  {
    "text": "concrete example we have some open source yeah I think Q Prometheus doesn't have us but we have it in OpenShift yeah",
    "start": "1860510",
    "end": "1867200"
  },
  {
    "text": "exactly yeah any more questions raise your hand I happy to run around I need some exercise",
    "start": "1867200",
    "end": "1875350"
  },
  {
    "text": "now I need to run No",
    "start": "1877539",
    "end": "1881470"
  },
  {
    "text": "so in a multi-tenancy cluster and you have multiple teams in different namespaces can say configure the",
    "start": "1883150",
    "end": "1890380"
  },
  {
    "text": "adapters for their own metrics themselves or does it have to be done by the operators that's actually a very",
    "start": "1890380",
    "end": "1895750"
  },
  {
    "text": "good very good question unfortunately this is not 100% possible as if today like multi-tenancy is definitely",
    "start": "1895750",
    "end": "1901300"
  },
  {
    "text": "something we want to tackle also in the context of OpenShift but this also will need more involvement",
    "start": "1901300",
    "end": "1909310"
  },
  {
    "text": "of the API machinery because currently API services are not names based once",
    "start": "1909310",
    "end": "1914920"
  },
  {
    "text": "that is possible and you can define an API service for instance custom metrics / namespace and let them point to",
    "start": "1914920",
    "end": "1921790"
  },
  {
    "text": "different services then you would have nice tenancy model and you would deploy a Prometheus adapter per tenant but",
    "start": "1921790",
    "end": "1929620"
  },
  {
    "text": "currently we have a couple of hurdles essentially yeah implied by the way API",
    "start": "1929620",
    "end": "1935890"
  },
  {
    "text": "services are architected any other questions how are we I'm talking by the",
    "start": "1935890",
    "end": "1941410"
  },
  {
    "text": "way no two minutes all right two minutes",
    "start": "1941410",
    "end": "1948750"
  },
  {
    "text": "no questions okay okay thanks okay",
    "start": "1950190",
    "end": "1955740"
  },
  {
    "text": "[Applause]",
    "start": "1956040",
    "end": "1963390"
  }
]