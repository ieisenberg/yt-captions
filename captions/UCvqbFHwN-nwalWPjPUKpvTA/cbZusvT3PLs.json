[
  {
    "start": "0",
    "end": "58000"
  },
  {
    "text": "all right hello everyone welcome to my session on data consistency across Cloud native systems I'm Jimmy zalinski um",
    "start": "1260",
    "end": "9360"
  },
  {
    "text": "this talk is going to be relatively technical I'm going to cover some kind",
    "start": "9360",
    "end": "14700"
  },
  {
    "text": "of fundamental distributed systems topics um but I'm going to give an example at a",
    "start": "14700",
    "end": "20580"
  },
  {
    "text": "very high level that kind of introduces the concept of going to ask and answer the questions of what is consistency why",
    "start": "20580",
    "end": "27060"
  },
  {
    "text": "is it important um then walk you through that example and then we're going to look at a couple",
    "start": "27060",
    "end": "32640"
  },
  {
    "text": "different systems that are kind of ubiquitous components that you'll find in Cloud native architectures and talk",
    "start": "32640",
    "end": "38579"
  },
  {
    "text": "about some aspects about them that are interesting some aspects that may be surprising",
    "start": "38579",
    "end": "43739"
  },
  {
    "text": "um and the things that they've kind of the history behind the ideas that they have and what they kind of contributed",
    "start": "43739",
    "end": "48780"
  },
  {
    "text": "to the overall kind of landscape for architecting software with an eye towards the consistency of the data",
    "start": "48780",
    "end": "55079"
  },
  {
    "text": "being used um so jumping into that uh I am Jimmy",
    "start": "55079",
    "end": "60899"
  },
  {
    "start": "58000",
    "end": "291000"
  },
  {
    "text": "zilinski I am the co-founder of a company called auth Zed we are the creators of a database system called",
    "start": "60899",
    "end": "66960"
  },
  {
    "text": "Spice TV um Space TV is a data store specifically designed for storing and Computing",
    "start": "66960",
    "end": "74119"
  },
  {
    "text": "authorization data um so that means that it is basically the core engine that your business would",
    "start": "74119",
    "end": "80939"
  },
  {
    "text": "use to compute whether a person has access to perform an action or not",
    "start": "80939",
    "end": "86580"
  },
  {
    "text": "um I like to use that term permission or permission system rather than authorization system I think it's far",
    "start": "86580",
    "end": "93000"
  },
  {
    "text": "more approachable and defines the problem way better but you can understand how consistency is kind of a",
    "start": "93000",
    "end": "99720"
  },
  {
    "text": "core part of this just because fundamentally permission systems for",
    "start": "99720",
    "end": "106200"
  },
  {
    "text": "software they have to be correct or else there is a security flaw if um some software allows someone to",
    "start": "106200",
    "end": "112680"
  },
  {
    "text": "perform an action that they otherwise shouldn't that is absolutely Mission critical in most software and doing this",
    "start": "112680",
    "end": "119220"
  },
  {
    "text": "kind of work at scale and at low latency because absolutely uh every action has",
    "start": "119220",
    "end": "125460"
  },
  {
    "text": "to take place in your software system has to check whether it has uh the access allowed to perform that action it",
    "start": "125460",
    "end": "132120"
  },
  {
    "text": "puts us in the critical path so um data consistency super important for Spice TV",
    "start": "132120",
    "end": "137400"
  },
  {
    "text": "um but before I've said I was previously working in the cloud native space I",
    "start": "137400",
    "end": "142739"
  },
  {
    "text": "worked at a company called Red Hat by means of the chorus acquisition um so I've been kind of working in this",
    "start": "142739",
    "end": "149340"
  },
  {
    "text": "space since before actually the cncf was created um core OS was kind of building uh",
    "start": "149340",
    "end": "155220"
  },
  {
    "text": "distributed systems and kind of container Technologies basically the foundation of cloud native software",
    "start": "155220",
    "end": "160860"
  },
  {
    "text": "um uh since before uh kind of the cncf and this whole kubernetes ecosystem",
    "start": "160860",
    "end": "166319"
  },
  {
    "text": "emerged and in that time I have contributed to a bunch of cloud native",
    "start": "166319",
    "end": "172500"
  },
  {
    "text": "projects I've co-created some I am also a maintainer of oci which is the",
    "start": "172500",
    "end": "178260"
  },
  {
    "text": "standard body for container images um and kind of this all kind of folds back",
    "start": "178260",
    "end": "185280"
  },
  {
    "text": "into my passion for distributed systems even before working at core OS I always",
    "start": "185280",
    "end": "190379"
  },
  {
    "text": "had an eye towards distributed systems um and as an early adopter of a project",
    "start": "190379",
    "end": "195840"
  },
  {
    "text": "called SCD which ultimately became the data store that's used by kubernetes I'm",
    "start": "195840",
    "end": "201540"
  },
  {
    "text": "going to talk a bit about NCD later in this talk but then also as a part of kind of building kind of large-scale SAS",
    "start": "201540",
    "end": "209760"
  },
  {
    "text": "systems on cloud native software I have also ran MySQL and postgres these type",
    "start": "209760",
    "end": "214800"
  },
  {
    "text": "of relational databases um at scale I've seen where they fall over I know sharp edges um when you build",
    "start": "214800",
    "end": "221700"
  },
  {
    "text": "enterprise software for example you try to do things um uh without introducing new",
    "start": "221700",
    "end": "227400"
  },
  {
    "text": "dependencies on other systems so your customers don't have to set up yet another software dependency and you",
    "start": "227400",
    "end": "232860"
  },
  {
    "text": "start to bend a lot of these products to their will um so in ways they should not Bend so",
    "start": "232860",
    "end": "238560"
  },
  {
    "text": "you're trying to like actually get different database properties out of databases that were never designed to do certain things",
    "start": "238560",
    "end": "243900"
  },
  {
    "text": "um I've been down those dark roads as well um so I definitely have some very like scary knowledge of some of these systems",
    "start": "243900",
    "end": "250260"
  },
  {
    "text": "and know when you're doing the right thing and when you're doing the wrong thing and how you should really focus on",
    "start": "250260",
    "end": "255840"
  },
  {
    "text": "architecting uh things for success in the space um so I also left my my contact",
    "start": "255840",
    "end": "261120"
  },
  {
    "text": "information on this slide so if at any point in time uh you want to reach out",
    "start": "261120",
    "end": "266340"
  },
  {
    "text": "to me feel free to just shoot me an email with a question um or uh actually and the final slide",
    "start": "266340",
    "end": "272040"
  },
  {
    "text": "I'm also going to link to uh Discord community that you can join to kind of discuss distributed systems in general",
    "start": "272040",
    "end": "277080"
  },
  {
    "text": "or data consistency um but I I prefer email and then you might see me around on Twitter or GitHub",
    "start": "277080",
    "end": "283139"
  },
  {
    "text": "under these handles as well um and enough about me uh it's on it's",
    "start": "283139",
    "end": "289139"
  },
  {
    "text": "time to move on to the actual primary subject which is you may have seen these terms thrown around uh in your software",
    "start": "289139",
    "end": "296699"
  },
  {
    "text": "development career um a lot of these are specifically kind of like used particularly in the the",
    "start": "296699",
    "end": "303540"
  },
  {
    "text": "database World um if you're selecting database reading database documentation maybe you're",
    "start": "303540",
    "end": "308759"
  },
  {
    "text": "taking a course in college on uh how to build databases um you're definitely going to hear these",
    "start": "308759",
    "end": "314400"
  },
  {
    "text": "terms thrown around um but uh fundamentally these Concepts uh",
    "start": "314400",
    "end": "321240"
  },
  {
    "text": "they're not kind of unique to databases uh because so many software systems all",
    "start": "321240",
    "end": "327120"
  },
  {
    "text": "store data eventually they kind of Punt it off to a database that is then responsible for maintaining that data",
    "start": "327120",
    "end": "333479"
  },
  {
    "text": "but like the fundamental systems are still offering views of data and they're modifying data potentially and before",
    "start": "333479",
    "end": "339600"
  },
  {
    "text": "they pass it all around so whether we're talking about databases or microservices",
    "start": "339600",
    "end": "344720"
  },
  {
    "text": "the concept of kind of the data you're working with is always going to be relevant",
    "start": "344720",
    "end": "349800"
  },
  {
    "text": "um it's actually really interesting um acid which is like one of the super popular acronyms thrown around in this",
    "start": "349800",
    "end": "356639"
  },
  {
    "text": "space which stands for atomicity consistency isolation and durability",
    "start": "356639",
    "end": "361919"
  },
  {
    "text": "um that that acronym actually has this kind of uh story around it where",
    "start": "361919",
    "end": "367620"
  },
  {
    "text": "actually folks believe that the sea was just made up to make the acronym work well that c is consistency which is the",
    "start": "367620",
    "end": "373740"
  },
  {
    "text": "topic of this whole uh this whole presentation so I hope by the end of it uh I can kind of formally explain at",
    "start": "373740",
    "end": "379919"
  },
  {
    "text": "least uh how I think about consistency and why it is almost certainly even if that was the initial intent definitely",
    "start": "379919",
    "end": "386280"
  },
  {
    "text": "not the case that it is it is a made-up concept that is that is just to make an acronym work um because you'll find that",
    "start": "386280",
    "end": "393180"
  },
  {
    "text": "it's used in many other places and other discussions outside of just the term acid so it clearly has some relevancy on",
    "start": "393180",
    "end": "399479"
  },
  {
    "text": "its own um so I'm gonna actually use some of these terms in here I'm going to use them in different contexts so that there",
    "start": "399479",
    "end": "406500"
  },
  {
    "text": "are kind of definitions become more clear rather than just kind of trying to describe them um abstractly in a vacuum",
    "start": "406500",
    "end": "413340"
  },
  {
    "text": "so um I've talked a lot about these things but I still haven't like covered the very Basics yet which is what actually",
    "start": "413340",
    "end": "421440"
  },
  {
    "start": "420000",
    "end": "611000"
  },
  {
    "text": "is consistency um now I didn't use the the Wikipedia definition that like you just Google for",
    "start": "421440",
    "end": "428520"
  },
  {
    "text": "um and find instead I kind of defined it the way I like to think about it and the way I feel like most Engineers",
    "start": "428520",
    "end": "434460"
  },
  {
    "text": "colloquially use it I think that's really important because um there's you can go and look up a lot",
    "start": "434460",
    "end": "440699"
  },
  {
    "text": "of this terminology and read a very dense uh article or read research papers that talk about these Concepts",
    "start": "440699",
    "end": "447720"
  },
  {
    "text": "um but that doesn't matter if you're just trying to communicate something to your fellow engineer what actually matters is that kind of you have this",
    "start": "447720",
    "end": "454500"
  },
  {
    "text": "effective communication tool and you both have a shared understanding of this topic um so I tried to Define it in my own",
    "start": "454500",
    "end": "460800"
  },
  {
    "text": "words rather than like the mathematical terms that you might find elsewhere um so how I Define it is strictly around",
    "start": "460800",
    "end": "468419"
  },
  {
    "text": "the contract between how data can be observed in a system um",
    "start": "468419",
    "end": "473840"
  },
  {
    "text": "I often kind of talk about freshness uh with this like that the concern of like",
    "start": "473840",
    "end": "479819"
  },
  {
    "text": "how fresh is the data that you're working with becomes a part of that equation but fundamentally",
    "start": "479819",
    "end": "485160"
  },
  {
    "text": "um I think the core concept here and the way people most often use this term is",
    "start": "485160",
    "end": "490440"
  },
  {
    "text": "largely around what I would say quote-unquote correctness and correctness basically uh is context",
    "start": "490440",
    "end": "498419"
  },
  {
    "text": "dependent which makes it kind of tricky it depends on what type of system you're trying to build and when you're trying",
    "start": "498419",
    "end": "504300"
  },
  {
    "text": "to build these systems you're going to first kind of talk about the problem and then work backwards to find the",
    "start": "504300",
    "end": "510120"
  },
  {
    "text": "consistency model that is going to work for your solution um",
    "start": "510120",
    "end": "515279"
  },
  {
    "text": "so why does consistency matter and why are we working backwards to arrive at it it's because if you're building",
    "start": "515279",
    "end": "521159"
  },
  {
    "text": "applications and um fundamentally you have a contract",
    "start": "521159",
    "end": "527820"
  },
  {
    "text": "between what your expectations of the data that you're going to use in the application and the data in the database",
    "start": "527820",
    "end": "533940"
  },
  {
    "text": "for example or that the users will see and your application that you've built if that contract is broken",
    "start": "533940",
    "end": "541140"
  },
  {
    "text": "um systems can explode in catastrophic ways uh basically silent errors can",
    "start": "541140",
    "end": "546540"
  },
  {
    "text": "occur data corruption can occur um and fundamentally if you want to",
    "start": "546540",
    "end": "552060"
  },
  {
    "text": "solve this problems like these problems between this inconsistency",
    "start": "552060",
    "end": "557160"
  },
  {
    "text": "um certain things will actually just be impossible for you to do without totally re-architecting your software around",
    "start": "557160",
    "end": "563459"
  },
  {
    "text": "something that works more consistent the door closes behind you when you open up",
    "start": "563459",
    "end": "568620"
  },
  {
    "text": "and move to a less consistent system you don't have the capability of adding this in retroactively and that's kind of the",
    "start": "568620",
    "end": "574860"
  },
  {
    "text": "scary um part about consistency is you really need to understand your problem and your",
    "start": "574860",
    "end": "580440"
  },
  {
    "text": "domain first because um if you pick something that is not going to jive with the system in the",
    "start": "580440",
    "end": "586440"
  },
  {
    "text": "future you are going to be in a world of pain probably re-architecting or carving out some subsection of your application",
    "start": "586440",
    "end": "592800"
  },
  {
    "text": "that has to be treated special with completely isolated data that works at a",
    "start": "592800",
    "end": "598440"
  },
  {
    "text": "higher consistency level and all that might not mean too much now but I'm going to go through a concrete kind of",
    "start": "598440",
    "end": "604200"
  },
  {
    "text": "like example uh now and then eventually we'll talk about some systems in the real world those components how uh how",
    "start": "604200",
    "end": "611160"
  },
  {
    "start": "611000",
    "end": "1066000"
  },
  {
    "text": "this all plays out in those components so uh here I've got this example and",
    "start": "611160",
    "end": "616620"
  },
  {
    "text": "this type of Medical but it's a real problem that's actually faced by everyone designing e-commerce systems in",
    "start": "616620",
    "end": "622800"
  },
  {
    "text": "the world um unless they're building on top of a pre-existing system of someone who has",
    "start": "622800",
    "end": "627899"
  },
  {
    "text": "already solved this problem for them but even then as you extend that those systems with your own systems you still",
    "start": "627899",
    "end": "633360"
  },
  {
    "text": "have to continually think about consistency and how that plays out but uh I digress",
    "start": "633360",
    "end": "639060"
  },
  {
    "text": "um here is the hypothetical scenario there are two humans involved in the scenario a child in a parent the parent",
    "start": "639060",
    "end": "646800"
  },
  {
    "text": "is supervising the purchase of an item by a child online um the child is going to basically",
    "start": "646800",
    "end": "652860"
  },
  {
    "text": "review uh the the orders on their account and see if the item has been",
    "start": "652860",
    "end": "657959"
  },
  {
    "text": "purchased yet then they're going to purchase the item and then the parent is going to double check just make sure",
    "start": "657959",
    "end": "663600"
  },
  {
    "text": "that the the child did the correct thing um and so basically we have this flow",
    "start": "663600",
    "end": "669360"
  },
  {
    "text": "over time uh which is the child first reads the orders um they see that an order hasn't taken",
    "start": "669360",
    "end": "676260"
  },
  {
    "text": "place yet so then they're going to purchase the item and then the parent is going to read the orders and find that the child",
    "start": "676260",
    "end": "682700"
  },
  {
    "text": "successfully purchased the item their child was good everything acted accordingly",
    "start": "682700",
    "end": "688560"
  },
  {
    "text": "um and I just wanted to make this kind of concrete one more time nowhere have I mentioned servers databases",
    "start": "688560",
    "end": "694380"
  },
  {
    "text": "microservices none of that this is all actually purely from the external facing",
    "start": "694380",
    "end": "699540"
  },
  {
    "text": "side of the system the user at the end of the day um sometimes your your users are real",
    "start": "699540",
    "end": "706320"
  },
  {
    "text": "people sometimes your users are other services and your microservice architecture sometimes the they are the",
    "start": "706320",
    "end": "711779"
  },
  {
    "text": "actual service and you are the database right um but the the point here is that these",
    "start": "711779",
    "end": "717420"
  },
  {
    "text": "types of problems that I'm going to describe in the scenario this plays out regardless of that it does not matter actually what those are",
    "start": "717420",
    "end": "724260"
  },
  {
    "text": "um it's equally capable of happening in all of these scenarios so um here is the problem this is another",
    "start": "724260",
    "end": "731579"
  },
  {
    "text": "way the order of events can take place um the child reads the orders the parent",
    "start": "731579",
    "end": "736860"
  },
  {
    "text": "reads the orders the child buys the item and then the parent buys the item now why did this happen it's because the",
    "start": "736860",
    "end": "743579"
  },
  {
    "text": "parent checked the orders right before the time in between the child was going",
    "start": "743579",
    "end": "748980"
  },
  {
    "text": "to actually purchase the item and at that point in time the parent looked at the order list and said oh my child",
    "start": "748980",
    "end": "755160"
  },
  {
    "text": "didn't purchase this so now I have to as the failover I have to go and purchase this item because the the shop was not",
    "start": "755160",
    "end": "761220"
  },
  {
    "text": "successful but actually the child was successful the parent just checked too early um and the these events got basically",
    "start": "761220",
    "end": "768000"
  },
  {
    "text": "interweaved um and this is kind of a problem because the parent fundamentally made their",
    "start": "768000",
    "end": "774959"
  },
  {
    "text": "decision based on stale data so by the time they made their purchase technically the read that they they made",
    "start": "774959",
    "end": "782279"
  },
  {
    "text": "was invalid because the child actually had um had already purchased the item so",
    "start": "782279",
    "end": "788339"
  },
  {
    "text": "they would have had to reread before uh actually finally making that purchase to",
    "start": "788339",
    "end": "793680"
  },
  {
    "text": "do this successfully but they have absolutely no signal to tell them that they needed to reread",
    "start": "793680",
    "end": "800880"
  },
  {
    "text": "so uh computer scientists love to sound really smart and they like to use words from math and physics so there's",
    "start": "800880",
    "end": "807779"
  },
  {
    "text": "actually a term for uh the relationship between these two events um which is causality or causal ordering",
    "start": "807779",
    "end": "814380"
  },
  {
    "text": "or causal dependency um because the purchasing of the item is",
    "start": "814380",
    "end": "819720"
  },
  {
    "text": "dependent on the read um basically if you look at this from",
    "start": "819720",
    "end": "824880"
  },
  {
    "text": "like a physics relativity perspective the only reason why the purchase happens is because uh the read happened and the",
    "start": "824880",
    "end": "832079"
  },
  {
    "text": "output of the read the outcome of the read was there's no item re in the",
    "start": "832079",
    "end": "837300"
  },
  {
    "text": "purchase history so I'm going to progress with purchasing this um",
    "start": "837300",
    "end": "842459"
  },
  {
    "text": "so fundamentally uh this is kind of the type of language that a lot of people",
    "start": "842459",
    "end": "848820"
  },
  {
    "text": "used to talk about these types of ordering of events and systems um because these types of events where causality",
    "start": "848820",
    "end": "856800"
  },
  {
    "text": "involved when you have overlapping leads to inconsistencies in data",
    "start": "856800",
    "end": "862440"
  },
  {
    "text": "um so moving on from here there kind of is a really obvious way that a lot of",
    "start": "862440",
    "end": "868800"
  },
  {
    "text": "people think about solving this problem and it truly does solve the problem um which is to just combine things with",
    "start": "868800",
    "end": "875639"
  },
  {
    "text": "causal uh dependencies why can't they happen at one point in time so",
    "start": "875639",
    "end": "881339"
  },
  {
    "text": "um when folks typically think about this they think about like transactions and relational databases or Atomic",
    "start": "881339",
    "end": "887399"
  },
  {
    "text": "operations in um like the sync libraries and like their their programming languages",
    "start": "887399",
    "end": "893040"
  },
  {
    "text": "um so this does solve the problem um and it also leads to a pretty good",
    "start": "893040",
    "end": "901800"
  },
  {
    "text": "segue which is that actually so far I've really been describing atomicity in this",
    "start": "901800",
    "end": "908699"
  },
  {
    "text": "example so that's the a in acid if you'll recall uh but not the C in acid",
    "start": "908699",
    "end": "914459"
  },
  {
    "text": "oh that's because um while we have grouped all these things together we've been working under",
    "start": "914459",
    "end": "919980"
  },
  {
    "text": "the assumption that every single time an action takes place here",
    "start": "919980",
    "end": "925199"
  },
  {
    "text": "um and if we follow the flow of time that is immediately visible to all of the outside actors in that system",
    "start": "925199",
    "end": "932279"
  },
  {
    "text": "um and this is where we start to really get deep into like the physics and relativity kind of uh analogies that",
    "start": "932279",
    "end": "939600"
  },
  {
    "text": "exist in distributed systems um but we can actually imagine scenarios",
    "start": "939600",
    "end": "945000"
  },
  {
    "text": "where um when you actually perform these actions uh the visibility happens later",
    "start": "945000",
    "end": "951560"
  },
  {
    "text": "so a child and a parent the exact same story plays out",
    "start": "951560",
    "end": "957139"
  },
  {
    "text": "theyatomically still the child performs the atomic operation um but when the parent goes to read it",
    "start": "957139",
    "end": "964380"
  },
  {
    "text": "actually happens before the atomic operation is visible to all participants in the system",
    "start": "964380",
    "end": "970199"
  },
  {
    "text": "um so this happens obviously way more in um distributed systems because for",
    "start": "970199",
    "end": "975779"
  },
  {
    "text": "example you might have a read replica that is getting changes um stream to it asynchronously and it is",
    "start": "975779",
    "end": "983220"
  },
  {
    "text": "best effort trying to stay up to date with the most recent information so that maybe folks in another Geo region on the",
    "start": "983220",
    "end": "990540"
  },
  {
    "text": "planet um get fast performance for for sale data or not maybe just not up to the",
    "start": "990540",
    "end": "997980"
  },
  {
    "text": "um most consistent level of data so quite a common real life scenario",
    "start": "997980",
    "end": "1004220"
  },
  {
    "text": "largely in uh just read it systems this is the difference between animus atomicity and consistency",
    "start": "1004220",
    "end": "1009680"
  },
  {
    "text": "um is like this visibility aspect um that happens in relativistic systems",
    "start": "1009680",
    "end": "1015259"
  },
  {
    "text": "um and this is what will play out time after time in any distributed system",
    "start": "1015259",
    "end": "1022040"
  },
  {
    "text": "um it may seem like kind of far-fetched looking at this like the example that",
    "start": "1022040",
    "end": "1027438"
  },
  {
    "text": "like well hey how's the visibility actually like how can this be delayed maybe if it's not a distributed system",
    "start": "1027439",
    "end": "1033438"
  },
  {
    "text": "but even in um normal database you're running a database on a single system the time at",
    "start": "1033439",
    "end": "1039798"
  },
  {
    "text": "which um it takes for a transaction to commit in the time at which it is actually then",
    "start": "1039799",
    "end": "1046400"
  },
  {
    "text": "propagated um to to actually the visible data that is queried that actually is a Time",
    "start": "1046400",
    "end": "1053360"
  },
  {
    "text": "window in which you can race against the visibility so this can even happen on",
    "start": "1053360",
    "end": "1058400"
  },
  {
    "text": "single nodes that's getting a little bit in the weeds but I just wanted to be clear that this was not purely",
    "start": "1058400",
    "end": "1064520"
  },
  {
    "text": "distributed systems problem um so I kind of have this consistency",
    "start": "1064520",
    "end": "1070640"
  },
  {
    "start": "1066000",
    "end": "1426000"
  },
  {
    "text": "Spectrum where I kind of lay out the problem in two different dimensions when we're talking about the uh types of",
    "start": "1070640",
    "end": "1077960"
  },
  {
    "text": "um consistency that systems can have across the bottom uh the x-axis I have",
    "start": "1077960",
    "end": "1083360"
  },
  {
    "text": "immediate consistency which is uh what I was talking about for most of the example like when I was talking about",
    "start": "1083360",
    "end": "1088820"
  },
  {
    "text": "atomicity that is once a change happens it is immediately visible to everyone in the system and then on the right hand",
    "start": "1088820",
    "end": "1095480"
  },
  {
    "text": "side of the x-axis I have eventual consistency which is time passes and eventually folks will receive an update",
    "start": "1095480",
    "end": "1102620"
  },
  {
    "text": "they'll eventually see the change that has occurred um and that could be basically arbitrary",
    "start": "1102620",
    "end": "1108860"
  },
  {
    "text": "amount of time until that happens this is what's most commonly talked about I feel like when when folks talk",
    "start": "1108860",
    "end": "1115220"
  },
  {
    "text": "about consistency do we need immediate or eventual consistency what does the system look like especially a few years",
    "start": "1115220",
    "end": "1121520"
  },
  {
    "text": "ago when there's a lot of discussion of nosql systems a lot of those were making consistency trade-offs and and opting",
    "start": "1121520",
    "end": "1127160"
  },
  {
    "text": "for more ventral consistent systems um so I feel like a lot of folks talk about",
    "start": "1127160",
    "end": "1133580"
  },
  {
    "text": "that but they actually less so talk about what I have uh portrayed here on the y-axis going vertically we have",
    "start": "1133580",
    "end": "1140240"
  },
  {
    "text": "strict and weak ordering um so I think the other important aspect of consistency that uh often gets",
    "start": "1140240",
    "end": "1147080"
  },
  {
    "text": "overlooked is the order of the operations that go in um so that means that uh if something",
    "start": "1147080",
    "end": "1154400"
  },
  {
    "text": "occurs first it's guaranteed to be before the thing that happens after it",
    "start": "1154400",
    "end": "1159799"
  },
  {
    "text": "um that that sounds a little bit uh spacious but I'll get into why that's",
    "start": "1159799",
    "end": "1165260"
  },
  {
    "text": "relevant and the systems that benefit from it later I've kind of dropped in some examples here of these types of",
    "start": "1165260",
    "end": "1173059"
  },
  {
    "text": "systems um for example linearizability you can see",
    "start": "1173059",
    "end": "1178160"
  },
  {
    "text": "that's on the but that's the most immediate and the most strict ordering so that is one like",
    "start": "1178160",
    "end": "1184520"
  },
  {
    "text": "the strong strong strong strongest uh kind of guarantee that you can find in a system and what that actually means is",
    "start": "1184520",
    "end": "1190280"
  },
  {
    "text": "there is a total Global ordering across of all the systems for each change in",
    "start": "1190280",
    "end": "1196580"
  },
  {
    "text": "the system and when those changes are applied they are immediately visible to everyone in the system",
    "start": "1196580",
    "end": "1202220"
  },
  {
    "text": "um this is the strongest guarantee you could possibly get and then on the polar opposite of that I have this eventual uh",
    "start": "1202220",
    "end": "1208039"
  },
  {
    "text": "consistency that is also weekly ordered now that is um a kind of interesting bit of",
    "start": "1208039",
    "end": "1214340"
  },
  {
    "text": "Technology called a conflict-free replicated data type and crdts are a",
    "start": "1214340",
    "end": "1220039"
  },
  {
    "text": "kind of building block that a lot of systems are kind of exploring right now um and what that actually lets you do is",
    "start": "1220039",
    "end": "1228200"
  },
  {
    "text": "propagate changes uh that can basically when you have a scenario where changes",
    "start": "1228200",
    "end": "1234440"
  },
  {
    "text": "don't matter what ordering is applied um you can actually use this as a very effective way to synchron eyes data",
    "start": "1234440",
    "end": "1242179"
  },
  {
    "text": "the they basically rely on this property of commutativity um uh you might actually remember this",
    "start": "1242179",
    "end": "1247940"
  },
  {
    "text": "from uh maybe you've had an abstract algebra class or maybe you just remember",
    "start": "1247940",
    "end": "1253520"
  },
  {
    "text": "um basically learning addition as a child um addition is commutative so that means",
    "start": "1253520",
    "end": "1259700"
  },
  {
    "text": "that you can do things uh like one plus two equals three or two plus one equals three it doesn't matter what order you",
    "start": "1259700",
    "end": "1266419"
  },
  {
    "text": "receive those changes when you sum together a bunch of numbers they're always going to converge to the same",
    "start": "1266419",
    "end": "1271760"
  },
  {
    "text": "result so if you're performing operations on your data that regardless of whatever order you apply to them",
    "start": "1271760",
    "end": "1278000"
  },
  {
    "text": "you're always going to converge of the same result um that's great",
    "start": "1278000",
    "end": "1283520"
  },
  {
    "text": "um that means you're going to be good and you can use one of these systems and still get correct answers",
    "start": "1283520",
    "end": "1289280"
  },
  {
    "text": "um so there's kind of other variants in the space I kind of use serializability which is that there is an order for",
    "start": "1289280",
    "end": "1296720"
  },
  {
    "text": "example immediately consistent there's no total Global ordering it just means everything happens independent like",
    "start": "1296720",
    "end": "1303020"
  },
  {
    "text": "independently and isolated in an order and then we also have eventual consistency which is more similar to",
    "start": "1303020",
    "end": "1309020"
  },
  {
    "text": "what you see out of a lot of the new SQL systems I just kind of wanted to show that like there's there's varying levels",
    "start": "1309020",
    "end": "1314780"
  },
  {
    "text": "in the Spectrum it's not just kind of like the opposite corners and then the middle ground um",
    "start": "1314780",
    "end": "1319820"
  },
  {
    "text": "but I kind of wanted to dig a little bit deeper into this because um there is",
    "start": "1319820",
    "end": "1326120"
  },
  {
    "text": "super important to understand properties involved here",
    "start": "1326120",
    "end": "1331280"
  },
  {
    "text": "if you'll look at the bottom and the x-axis I've replaced immediate and",
    "start": "1331280",
    "end": "1336380"
  },
  {
    "text": "eventual with slow and fast because in the real world this is the implication",
    "start": "1336380",
    "end": "1341600"
  },
  {
    "text": "of choosing one of these um effectively it is way way less",
    "start": "1341600",
    "end": "1346760"
  },
  {
    "text": "performant to choose something that is immediately consistent because you have to make sure before you write something that it is going to be visible to",
    "start": "1346760",
    "end": "1354200"
  },
  {
    "text": "everyone so that means it probably has to be replicated everywhere before it becomes visible and accept it as a right",
    "start": "1354200",
    "end": "1359919"
  },
  {
    "text": "and then crdts for example you can just basically dump out a stream of changes",
    "start": "1359919",
    "end": "1365960"
  },
  {
    "text": "hope that eventually someone gets all the changes and then they're good um and what is really interesting here",
    "start": "1365960",
    "end": "1372799"
  },
  {
    "text": "is that we kind of have this middle ground this box and I call this box cleverness because this is where you're",
    "start": "1372799",
    "end": "1378080"
  },
  {
    "text": "going to find a lot of the stuff in the real world that's compromising and trying to make a lot of systems viable",
    "start": "1378080",
    "end": "1384260"
  },
  {
    "text": "um if you have a problem that needs to be solved with linearizability",
    "start": "1384260",
    "end": "1391159"
  },
  {
    "text": "or you have a problem that can be solved with crdts you kind of got your choices pretty easily made for you uh your",
    "start": "1391159",
    "end": "1397640"
  },
  {
    "text": "problem domain has made it really obvious you're stuck in one of these camps you're stuck in either corner of the spectrum but actually most systems",
    "start": "1397640",
    "end": "1404600"
  },
  {
    "text": "will not actually have those problems and instead they're going to live somewhere in this middle ground and this",
    "start": "1404600",
    "end": "1409820"
  },
  {
    "text": "Middle Ground is where there's going to be a lot of interesting tricks and things that you're going to be able to",
    "start": "1409820",
    "end": "1414980"
  },
  {
    "text": "partially apply and to gain a lot of benefits in your system um without necessarily paying the costs",
    "start": "1414980",
    "end": "1421400"
  },
  {
    "text": "globally across all of the data that you're working with um so uh some some typos in those slides um",
    "start": "1421400",
    "end": "1429919"
  },
  {
    "start": "1426000",
    "end": "1594000"
  },
  {
    "text": "so that was basically what I wanted to cover uh at the high level of kind of like the conceptual side of consistency",
    "start": "1429919",
    "end": "1435860"
  },
  {
    "text": "and now I kind of want to jump into some examples of uh basically live systems components that",
    "start": "1435860",
    "end": "1442640"
  },
  {
    "text": "folks are using in Industry to to solve their problems in the cloud native ecosystem um S3 I wanted a really good example",
    "start": "1442640",
    "end": "1449299"
  },
  {
    "text": "this is actually kind of funny I wanted a good example of a ubiquitous system that's eventually consistent that a lot of folks are using",
    "start": "1449299",
    "end": "1455240"
  },
  {
    "text": "um and I immediately thought of S3 I built product in the past on top of S3 and yeah you basically would submit blobs to",
    "start": "1455240",
    "end": "1463640"
  },
  {
    "text": "S3 it would tell you hey I wrote it that's great but if someone else immediately then tried to pull down that",
    "start": "1463640",
    "end": "1469520"
  },
  {
    "text": "blob it would not be available yet so there was no necessarily uh guarantee that after you had written something it",
    "start": "1469520",
    "end": "1476299"
  },
  {
    "text": "was immediately viewable um to external uh actors and actually as",
    "start": "1476299",
    "end": "1483020"
  },
  {
    "text": "I went to go make this presentation I found an article um AWS actually fixed this they actually changed this a couple",
    "start": "1483020",
    "end": "1488900"
  },
  {
    "text": "years ago so I don't know if this is actually true across all the implementations of blob storage um so if you go to Google for Google",
    "start": "1488900",
    "end": "1495620"
  },
  {
    "text": "Cloud Storage or Azure for Azure blob storage or Min i o if you're running something yourself",
    "start": "1495620",
    "end": "1500659"
  },
  {
    "text": "um I'm not actually sure if they all make those same strict guarantees but",
    "start": "1500659",
    "end": "1507039"
  },
  {
    "text": "certainly for the vast majority of the lifetime of these kind of blob Services um eventual consistency was kind of the",
    "start": "1507039",
    "end": "1514340"
  },
  {
    "text": "the uh the status quo there and um what is kind of interesting is uh I'm",
    "start": "1514340",
    "end": "1522380"
  },
  {
    "text": "gonna dive into it deeper later but the system backing S3 storing metadata uh",
    "start": "1522380",
    "end": "1528380"
  },
  {
    "text": "was given additional consistency capabilities which is what made it possible for uh the developers of S3 to",
    "start": "1528380",
    "end": "1535400"
  },
  {
    "text": "actually uh change this consistency to make it actually more consistent",
    "start": "1535400",
    "end": "1540860"
  },
  {
    "text": "um that is very typical for systems and this is uh actually an example that's kind of rebutting my",
    "start": "1540860",
    "end": "1547940"
  },
  {
    "text": "conjecture that it's actually uh it's actually impossible or hard uh to uh Pro",
    "start": "1547940",
    "end": "1555500"
  },
  {
    "text": "prohibitively hard to kind of add this add consistency after you've designed a system that doesn't have it",
    "start": "1555500",
    "end": "1562159"
  },
  {
    "text": "um but us3 is actually sufficiently simple that it was actually not much of a hurdle once the underlying dependency",
    "start": "1562159",
    "end": "1568700"
  },
  {
    "text": "that they had offered that capability so uh remember take everything with a grain",
    "start": "1568700",
    "end": "1574039"
  },
  {
    "text": "of sand that I say a grain of salt that I say uh because you know the system you're working with and uh I have to",
    "start": "1574039",
    "end": "1582260"
  },
  {
    "text": "kind of speak in generalities for systems that I think are what are the most common place and that I've seen",
    "start": "1582260",
    "end": "1588440"
  },
  {
    "text": "most commonplace but maybe you're building something that is it's not exactly that",
    "start": "1588440",
    "end": "1594320"
  },
  {
    "start": "1594000",
    "end": "2043000"
  },
  {
    "text": "um so here's one that's going to be really fun relational databases this is kind of a system that a lot of people",
    "start": "1594320",
    "end": "1599840"
  },
  {
    "text": "are familiar with um and I think that in the general case a lot of developers believe that by",
    "start": "1599840",
    "end": "1606799"
  },
  {
    "text": "simply adopting transactions uh in their usage of a relational database that they",
    "start": "1606799",
    "end": "1614179"
  },
  {
    "text": "have kind of solved consistency problems and um I'm here to tell you that transactions are not a silver bullet not",
    "start": "1614179",
    "end": "1620419"
  },
  {
    "text": "nearly and actually what dictates your consistency in these systems far more",
    "start": "1620419",
    "end": "1626840"
  },
  {
    "text": "than transactions is actually um basically the isolation level set in the",
    "start": "1626840",
    "end": "1633559"
  },
  {
    "text": "database and even if you don't include transactions whatsoever uh implicitly",
    "start": "1633559",
    "end": "1640220"
  },
  {
    "text": "the statements that you send the server are going to be wrapped in transactions so like whether you think like",
    "start": "1640220",
    "end": "1645940"
  },
  {
    "text": "everything is a transaction basically it's an atomic unit inside of a earth relational database whether you use the",
    "start": "1645940",
    "end": "1652100"
  },
  {
    "text": "keyword or not in the SQL you're you're writing um all right so what are isolation levels",
    "start": "1652100",
    "end": "1659480"
  },
  {
    "text": "isolation levels are kind of this aspect of the database and it's usually defined",
    "start": "1659480",
    "end": "1666200"
  },
  {
    "text": "at the table the table layer um effectively what it says is the the",
    "start": "1666200",
    "end": "1672980"
  },
  {
    "text": "consistency of the data that you're working with um on that particular table uh so there's no standard for this or anything",
    "start": "1672980",
    "end": "1680240"
  },
  {
    "text": "like that but across MySQL and postgres they kind of agreed that these are kind of the basic",
    "start": "1680240",
    "end": "1686000"
  },
  {
    "text": "isolation layers um in my sequel the default isolation level is repeatable read so you'll see",
    "start": "1686000",
    "end": "1694340"
  },
  {
    "text": "that's the second from the top and then in postgres it's actually recommitted so you'll see that's actually the third from the top so postgres is actually by",
    "start": "1694340",
    "end": "1700880"
  },
  {
    "text": "default more lenient it can actually have less consistent responses uh by default if you don't",
    "start": "1700880",
    "end": "1708679"
  },
  {
    "text": "actually go in and clarify what what isolation level you need in the SQL you're writing um",
    "start": "1708679",
    "end": "1714080"
  },
  {
    "text": "so I kind of wanted to run through like the different types of scenarios it's uh that like are kind of outlined here",
    "start": "1714080",
    "end": "1720740"
  },
  {
    "text": "um dirty reads are when you perform a transaction and when you read a row a",
    "start": "1720740",
    "end": "1726020"
  },
  {
    "text": "another transaction which has not been committed yet it hasn't been written to the database you'll see that data you'll",
    "start": "1726020",
    "end": "1732380"
  },
  {
    "text": "see changes that have occurred um so basically",
    "start": "1732380",
    "end": "1737900"
  },
  {
    "text": "I open a transaction I try to uh modify something you open a transaction you go to read that thing you'll see the change",
    "start": "1737900",
    "end": "1745100"
  },
  {
    "text": "um that is a dirty read and so you'll see that unless you're really kind of",
    "start": "1745100",
    "end": "1750260"
  },
  {
    "text": "like explicitly choosing to go inconsistent that is unlikely to be ever a scenario you'll see when you're using",
    "start": "1750260",
    "end": "1756080"
  },
  {
    "text": "relational database unless you specifically say I want read uncommitted um so that's not a super common problem but",
    "start": "1756080",
    "end": "1763100"
  },
  {
    "text": "it's interesting to note that it's even possible um and then effectively that that guarante",
    "start": "1763100",
    "end": "1769580"
  },
  {
    "text": "that eliminates some of the benefits that you get from what's called a mvcc or a multiversion concurrency control",
    "start": "1769580",
    "end": "1775940"
  },
  {
    "text": "system database system so that is super atypical unless you're working with a",
    "start": "1775940",
    "end": "1781820"
  },
  {
    "text": "database that is not in VCC um so uh then we have non-repeatable read",
    "start": "1781820",
    "end": "1788299"
  },
  {
    "text": "which this is when um you basically you reread data",
    "start": "1788299",
    "end": "1793880"
  },
  {
    "text": "committed by other transactions and bind has been modified so this means that you're in your transaction another",
    "start": "1793880",
    "end": "1800240"
  },
  {
    "text": "transaction modifies some data that you've already read and then if you go to read that data",
    "start": "1800240",
    "end": "1807200"
  },
  {
    "text": "again you'll see it's updated within your transaction so this is kind of breaking the kind of atomicity",
    "start": "1807200",
    "end": "1813440"
  },
  {
    "text": "um thing that a lot of people consider transactions to provide them um but actually you'll find that this",
    "start": "1813440",
    "end": "1818720"
  },
  {
    "text": "non-repeatable read um and recommitted that's that's actually possible um so that by default in postgres this",
    "start": "1818720",
    "end": "1827120"
  },
  {
    "text": "is totally a scenario that can happen to you even though that's probably shocking to to people to believe that hey like",
    "start": "1827120",
    "end": "1832760"
  },
  {
    "text": "I'm supposed to just be reading from that particular snapshot I'm not supposed to see these types of changes um but that's quite possible",
    "start": "1832760",
    "end": "1838940"
  },
  {
    "text": "um and then finally we have Phantom read which this is more commonly the the thing that is it's most quiet because",
    "start": "1838940",
    "end": "1846919"
  },
  {
    "text": "you're not going to see it but also it's the thing that's going to actually corrupt your well it's going to be it's",
    "start": "1846919",
    "end": "1852320"
  },
  {
    "text": "not going to corrupt your data but it is definitely going to be the most surprising way that could possibly corrupt your data which is",
    "start": "1852320",
    "end": "1859039"
  },
  {
    "text": "um basically you read some data in your transaction another transaction modifies",
    "start": "1859039",
    "end": "1864080"
  },
  {
    "text": "it and when the database goes to apply it it just happily applies both um it doesn't try to rerun your",
    "start": "1864080",
    "end": "1869720"
  },
  {
    "text": "transaction um and uh your transaction performs a",
    "start": "1869720",
    "end": "1875000"
  },
  {
    "text": "read and then depending on the value of that read it performs its right if another transaction before it comes in",
    "start": "1875000",
    "end": "1880820"
  },
  {
    "text": "it just totally swaps that out doesn't matter it's just going to progress anyway um if you had reread it reread the value",
    "start": "1880820",
    "end": "1889460"
  },
  {
    "text": "um in the non-repeatable read scenario it would not have mattered uh it would have lied to you and say the value",
    "start": "1889460",
    "end": "1894559"
  },
  {
    "text": "hasn't changed but then fundamentally when these transactions kind of get committed that's the wish the time uh",
    "start": "1894559",
    "end": "1900860"
  },
  {
    "text": "the value is going to have changed and you're going to be uh Sol so",
    "start": "1900860",
    "end": "1906020"
  },
  {
    "text": "um Phantom reads are actually even possible uh basically at um the default isolation level in my SQL",
    "start": "1906020",
    "end": "1912799"
  },
  {
    "text": "so unless you have explicitly configured your data store to be serializable",
    "start": "1912799",
    "end": "1918980"
  },
  {
    "text": "um that's the only opportunity for all of these to not occur to you um now the interestingness that you get",
    "start": "1918980",
    "end": "1926840"
  },
  {
    "text": "in kind of like that cleverness box uh that I kind of showed off in the diagram earlier",
    "start": "1926840",
    "end": "1932539"
  },
  {
    "text": "um the interesting thing that you you get to have is there are constructs in SQL that allow you to do individual row",
    "start": "1932539",
    "end": "1939500"
  },
  {
    "text": "level locking um so uh in SQL there is a select for update Clause that you can write that",
    "start": "1939500",
    "end": "1946220"
  },
  {
    "text": "says I'm going to read this row because I am going to causally update some other",
    "start": "1946220",
    "end": "1952940"
  },
  {
    "text": "row based on its value so that actually lets you describe this causal dependency this causal ordering in uh in terms that",
    "start": "1952940",
    "end": "1960740"
  },
  {
    "text": "the database can understand and what actually happens internally when you use select for update is it does a row level",
    "start": "1960740",
    "end": "1966320"
  },
  {
    "text": "lock on that data so that that actually locks that data and prevents any other transactions from modifying that data",
    "start": "1966320",
    "end": "1973640"
  },
  {
    "text": "for the duration of your transaction until you can actually commit your transaction um so this is what's going to give you",
    "start": "1973640",
    "end": "1980299"
  },
  {
    "text": "guarantees that no one else changed that value at from underneath you and this is",
    "start": "1980299",
    "end": "1986480"
  },
  {
    "text": "kind of having your caking eating it too you don't have to turn on full serializability to get that guarantee",
    "start": "1986480",
    "end": "1991640"
  },
  {
    "text": "you can do that with any of these modes so that is where you're you're in that",
    "start": "1991640",
    "end": "1997220"
  },
  {
    "text": "cleverness box again you're selectively choosing I need consistency for this operation right here locally but I don't",
    "start": "1997220",
    "end": "2004059"
  },
  {
    "text": "need consistency across the board everywhere um so there's there's a lot more and",
    "start": "2004059",
    "end": "2010360"
  },
  {
    "text": "there's a lot of other tricks deep inside these relational databases for for kind of like working with this data",
    "start": "2010360",
    "end": "2015760"
  },
  {
    "text": "but I think this is the very high level most important thing if I had to like teach someone about consistency and",
    "start": "2015760",
    "end": "2021220"
  },
  {
    "text": "relational databases that uh if I had 10 minutes to tell you something this is it",
    "start": "2021220",
    "end": "2026620"
  },
  {
    "text": "um walk away knowing that like isolation levels are a thing that you should constantly make sure you're reminded of",
    "start": "2026620",
    "end": "2031720"
  },
  {
    "text": "and familiar with when you're you're writing schemas for relational databases and also knowing that like if you need",
    "start": "2031720",
    "end": "2037539"
  },
  {
    "text": "to uh read them right in a relational database you should be using select for update most likely",
    "start": "2037539",
    "end": "2044200"
  },
  {
    "start": "2043000",
    "end": "2290000"
  },
  {
    "text": "um cool so let's talk about a less commonly used system but an equally interesting",
    "start": "2044200",
    "end": "2049960"
  },
  {
    "text": "and very relevant one which is Lock Services um and that is kind of what I call this",
    "start": "2049960",
    "end": "2056740"
  },
  {
    "text": "class of of software although um they were originally designed to be locked Services they kind of have",
    "start": "2056740",
    "end": "2063820"
  },
  {
    "text": "um larger Scopes these days um these are projects like SCD and zookeeper so uh what are the guarantees",
    "start": "2063820",
    "end": "2070540"
  },
  {
    "text": "here or actually let's let's a little bit talk about what Lock Services are um",
    "start": "2070540",
    "end": "2076000"
  },
  {
    "text": "so basically in the probably mid to late 2000s Google wrote a paper about a",
    "start": "2076000",
    "end": "2082118"
  },
  {
    "text": "system that they had built internally called chubby and that internal system is a distributed lock service",
    "start": "2082119",
    "end": "2088000"
  },
  {
    "text": "um and the point of the system was we have a we have distributed systems we have a bunch of different applications",
    "start": "2088000",
    "end": "2093960"
  },
  {
    "text": "they all need to coordinate together so they need to they need some mechanism",
    "start": "2093960",
    "end": "2099400"
  },
  {
    "text": "for them to safely one of them needs to acquire exclusive access to some resource they need a lock a distributed",
    "start": "2099400",
    "end": "2106359"
  },
  {
    "text": "lock um that's very tricky and it turns out formally that to solve that problem you",
    "start": "2106359",
    "end": "2112060"
  },
  {
    "text": "need a linearizable system um so what ended up happening is they they wrote A paper how they designed",
    "start": "2112060",
    "end": "2118660"
  },
  {
    "text": "this this distributed lock service um and um ultimately we we see projects",
    "start": "2118660",
    "end": "2125560"
  },
  {
    "text": "inspired by that a zookeeper is I believe um it is definitely inspired by that",
    "start": "2125560",
    "end": "2131200"
  },
  {
    "text": "paper it doesn't implement it directly it implements a completely it's its own unique algorithm called Sab um but then",
    "start": "2131200",
    "end": "2136900"
  },
  {
    "text": "we also see systems like SCD which is also inspired by kind of uh later computer science research around kind of",
    "start": "2136900",
    "end": "2143320"
  },
  {
    "text": "the the same um uh consensus research in distributed systems",
    "start": "2143320",
    "end": "2149500"
  },
  {
    "text": "um and ultimately these are linearizable systems but then we as the stems have",
    "start": "2149500",
    "end": "2157000"
  },
  {
    "text": "gotten more and more mature um they kind of decided hey this is a really useful property having something",
    "start": "2157000",
    "end": "2163480"
  },
  {
    "text": "that is linearizable so we have always guarantees about whatever like critical",
    "start": "2163480",
    "end": "2168820"
  },
  {
    "text": "beta we have in our distributed system let's save it all over there um we don't just need it for locks we need it for more things",
    "start": "2168820",
    "end": "2175240"
  },
  {
    "text": "um so actually a lot of these Services expanded Beyond just locking as a capability that they could serve and our",
    "start": "2175240",
    "end": "2182320"
  },
  {
    "text": "general purpose key value Stores um and so notably at CD as the solves",
    "start": "2182320",
    "end": "2188440"
  },
  {
    "text": "this exact problem it's a key value store that is actually the core data store used for kubernetes",
    "start": "2188440",
    "end": "2193599"
  },
  {
    "text": "um and what's really interesting is that kind of while it is realizable there are",
    "start": "2193599",
    "end": "2200619"
  },
  {
    "text": "lots of tricks that you can kind of use in the protocol and under the hood to optimize",
    "start": "2200619",
    "end": "2206980"
  },
  {
    "text": "um the the consistency and like the performance of such a system",
    "start": "2206980",
    "end": "2212140"
  },
  {
    "text": "um without kind of impacting the external user facing um appearance the freshness of the data",
    "start": "2212140",
    "end": "2218619"
  },
  {
    "text": "that they're seeing so there's a lot of really interesting distributed system tricks here um I'm just going to call them tricks um",
    "start": "2218619",
    "end": "2225160"
  },
  {
    "text": "because I don't want to dive too deep into them and there's lots of variations of algorithms under the hood that are shortcutting things to to make this",
    "start": "2225160",
    "end": "2233020"
  },
  {
    "text": "really fast and then there's also capabilities in a lot of these systems to kind of relax the consistency that",
    "start": "2233020",
    "end": "2238960"
  },
  {
    "text": "you can actually use with the system if you would like to trade that in order to get higher performance um and the important thing to note here",
    "start": "2238960",
    "end": "2246220"
  },
  {
    "text": "is that when you are kind of like relaxing this consistency and like really kind of playing with these things",
    "start": "2246220",
    "end": "2252220"
  },
  {
    "text": "uh these are the authors of these systems and they're doing it kind of at the protocol level and like in the API",
    "start": "2252220",
    "end": "2258160"
  },
  {
    "text": "level so it's not really exposed to anyone on the outside consuming the system",
    "start": "2258160",
    "end": "2263380"
  },
  {
    "text": "um so much as kind of like optimized uh around uh the guarantees that they can",
    "start": "2263380",
    "end": "2269140"
  },
  {
    "text": "provide there are some that provide apis so you don't necessarily you can choose",
    "start": "2269140",
    "end": "2274540"
  },
  {
    "text": "if this needs to be a quorum read or not for example but by and large um lots of your tricks are internal to",
    "start": "2274540",
    "end": "2280300"
  },
  {
    "text": "these systems um so most critical most strictly required",
    "start": "2280300",
    "end": "2285339"
  },
  {
    "text": "strong consistency systems they get stored in blog Services",
    "start": "2285339",
    "end": "2290740"
  },
  {
    "start": "2290000",
    "end": "2458000"
  },
  {
    "text": "um so then basically what happened was the new SQL Revolution right",
    "start": "2290740",
    "end": "2296500"
  },
  {
    "text": "um and that eventually turned into kind of what we we all kind of refer to now as",
    "start": "2296500",
    "end": "2303099"
  },
  {
    "text": "distributed SQL I think of databases uh in this space as Cocker's DB and tidb",
    "start": "2303099",
    "end": "2308740"
  },
  {
    "text": "um but there are a couple more this era is really interesting because",
    "start": "2308740",
    "end": "2315099"
  },
  {
    "text": "um they basically looked at solving the problem of scaling out a relational",
    "start": "2315099",
    "end": "2320560"
  },
  {
    "text": "database in a horizontal fashion so you can keep spinning up individual nodes",
    "start": "2320560",
    "end": "2325740"
  },
  {
    "text": "and scale up the system without any like replication lag there is you don't have to direct rights to one particular node",
    "start": "2325740",
    "end": "2333280"
  },
  {
    "text": "um they're kind of solving these traditional problems and scaling uh these relational databases and doing so",
    "start": "2333280",
    "end": "2339700"
  },
  {
    "text": "by applying um some of the research from the lock service optimizations so what happened",
    "start": "2339700",
    "end": "2346359"
  },
  {
    "text": "was the creators of these databases looked at the research uh that kind of",
    "start": "2346359",
    "end": "2351400"
  },
  {
    "text": "gone into like the the lock services and went well hey the data we need to",
    "start": "2351400",
    "end": "2357220"
  },
  {
    "text": "effectively the internal data in our database the bookkeeping we need to make sure that we can actually scale these",
    "start": "2357220",
    "end": "2363400"
  },
  {
    "text": "systems um we can serve that basically store that in using these Lock Service",
    "start": "2363400",
    "end": "2369880"
  },
  {
    "text": "techniques using this the consistency tricks that these systems have developed",
    "start": "2369880",
    "end": "2375099"
  },
  {
    "text": "and um that is going to make it so we can actually scale and provide our SQL systems now you'll notice that as a part",
    "start": "2375099",
    "end": "2383440"
  },
  {
    "text": "of this process uh they're not actually kind of passing on any of that to the end users they're still providing the",
    "start": "2383440",
    "end": "2390339"
  },
  {
    "text": "same uh kind of isolation levels transaction logic selector update logic all this all the things that I mentioned",
    "start": "2390339",
    "end": "2396640"
  },
  {
    "text": "previously about relational databases those guarantees are still here in these systems they've only just been made",
    "start": "2396640",
    "end": "2402760"
  },
  {
    "text": "possible to be expanded uh in this kind of new uh kind of Auto scaling World",
    "start": "2402760",
    "end": "2409599"
  },
  {
    "text": "um but that's not to say that magically these distributed SQL systems are",
    "start": "2409599",
    "end": "2415780"
  },
  {
    "text": "linearizable in fact the examples I've given here cockroachdb and tidb neither",
    "start": "2415780",
    "end": "2421119"
  },
  {
    "text": "of those are linearizable so really the the major benefits of",
    "start": "2421119",
    "end": "2427359"
  },
  {
    "text": "folks uh from the consistency being used here are the database admins the The Operators the sres running these systems",
    "start": "2427359",
    "end": "2434260"
  },
  {
    "text": "because they're able to basically uh scale out these relational databases uh",
    "start": "2434260",
    "end": "2440079"
  },
  {
    "text": "using the more effective um kind of consistency for only the core data necessary there but not any of the",
    "start": "2440079",
    "end": "2447160"
  },
  {
    "text": "end user application developer data um so cool that unlocked like a bunch of",
    "start": "2447160",
    "end": "2452619"
  },
  {
    "text": "new capabilities for the the SQL databases but the end users themselves didn't necessarily get anything better",
    "start": "2452619",
    "end": "2458500"
  },
  {
    "text": "um and this is kind of where uh this is the less defined what I would say is like the interesting New Era of",
    "start": "2458500",
    "end": "2466960"
  },
  {
    "text": "um kind of databases which I'm calling adoc here but I think this is kind of flexible consistency systems",
    "start": "2466960",
    "end": "2472599"
  },
  {
    "text": "um I use two examples here Cosmos DB and dynamodb which are kind of",
    "start": "2472599",
    "end": "2479020"
  },
  {
    "text": "foundational data stores at Azure and AWS respectively Dynamo is actually",
    "start": "2479020",
    "end": "2484780"
  },
  {
    "text": "notorious for having uh been a paper published um many many years ago uh probably mid",
    "start": "2484780",
    "end": "2492280"
  },
  {
    "text": "yeah mid late 2000s and um what has actually happened is the Dynamo described in that paper is not at",
    "start": "2492280",
    "end": "2499119"
  },
  {
    "text": "all like the Dynamo that currently runs at Amazon now which is why they're able to add capabilities uh to S3 right to",
    "start": "2499119",
    "end": "2505480"
  },
  {
    "text": "actually kind of add more consistency because now um systems like this expose",
    "start": "2505480",
    "end": "2510700"
  },
  {
    "text": "consistency to the end user API so the folks consuming this uh these databases on the Fly can choose what level of",
    "start": "2510700",
    "end": "2518079"
  },
  {
    "text": "consistency they want for the data in the response um so if we like touch back on the other",
    "start": "2518079",
    "end": "2523180"
  },
  {
    "text": "systems Lock Services are very strict and strong",
    "start": "2523180",
    "end": "2528640"
  },
  {
    "text": "consistency no matter what you do and then relational databases you don't have any Ops there beyond the isolation level",
    "start": "2528640",
    "end": "2535359"
  },
  {
    "text": "and kind of Select for update mechanisms but um that that is all like very very uh",
    "start": "2535359",
    "end": "2542320"
  },
  {
    "text": "domain specific and and kind of it's still uh non-obvious there's no way to",
    "start": "2542320",
    "end": "2549040"
  },
  {
    "text": "say this particular treat this whole glob of things this whole operation I'm going to perform with this this amount",
    "start": "2549040",
    "end": "2554320"
  },
  {
    "text": "of consistency in those systems so um very very different from what we",
    "start": "2554320",
    "end": "2560140"
  },
  {
    "text": "previously had this is actually kind of what I would describe as like unifying all of the things all the benefits that",
    "start": "2560140",
    "end": "2565540"
  },
  {
    "text": "I just talked about because now the end users are more in control of the consistency of their data they get to pay for exactly what they use in terms",
    "start": "2565540",
    "end": "2571599"
  },
  {
    "text": "of like the performance cost of when things need to be consistent they can actually slow things down just for that",
    "start": "2571599",
    "end": "2578260"
  },
  {
    "text": "part and then for the things that don't need to be consistent they can actually take advantage of the optimization um and and really go for it",
    "start": "2578260",
    "end": "2585160"
  },
  {
    "text": "um and what's interesting here is uh space DB so the database that my company",
    "start": "2585160",
    "end": "2590500"
  },
  {
    "text": "builds uh is an example of one of these ad hoc systems users per request can",
    "start": "2590500",
    "end": "2596140"
  },
  {
    "text": "specify the consistency they need and there is a default to be done specify one um but what is really really interesting",
    "start": "2596140",
    "end": "2603400"
  },
  {
    "text": "is that um this is an opportunity for a lot of user experience research",
    "start": "2603400",
    "end": "2609460"
  },
  {
    "text": "um because uh at least in our domain because we're specifically",
    "start": "2609460",
    "end": "2616300"
  },
  {
    "text": "handling authorization data uh we can actually tell users what is going to",
    "start": "2616300",
    "end": "2621940"
  },
  {
    "text": "happen at the different levels of consistency because we know more about their data because we know about the",
    "start": "2621940",
    "end": "2626980"
  },
  {
    "text": "domain they're operating in so we don't just have to explain kind of like these distributed systems research Concepts to",
    "start": "2626980",
    "end": "2633280"
  },
  {
    "text": "every user of the system instead we can make it obvious that like if you check this permission with this it's going to",
    "start": "2633280",
    "end": "2639640"
  },
  {
    "text": "be based on time where time is rounded um for for performance reasons um so",
    "start": "2639640",
    "end": "2646060"
  },
  {
    "text": "like we can we can actually draw on actually analogies that folks understand",
    "start": "2646060",
    "end": "2651400"
  },
  {
    "text": "about our domain um rather than trying to treat uh teach them very low level Concepts",
    "start": "2651400",
    "end": "2658300"
  },
  {
    "text": "um I'm actually super excited for for more of this I would really like to see",
    "start": "2658300",
    "end": "2664180"
  },
  {
    "text": "um apis where you kind of can sneak the concepts of consistent C into it so",
    "start": "2664180",
    "end": "2671140"
  },
  {
    "text": "Folks by choosing the proper apis thinking about their use case they they no longer think about consistency they",
    "start": "2671140",
    "end": "2677380"
  },
  {
    "text": "think about their use case and then by virtue of picking that then they have just chosen the API with the proper",
    "start": "2677380",
    "end": "2682839"
  },
  {
    "text": "consistency for what they need um so it's very very cool stuff",
    "start": "2682839",
    "end": "2688780"
  },
  {
    "text": "um I'm really excited about this space generally um and it wouldn't be possible if not",
    "start": "2688780",
    "end": "2694540"
  },
  {
    "text": "for an approach where we kind of start with very consistent world view and then allow folks to relax that over time",
    "start": "2694540",
    "end": "2703119"
  },
  {
    "text": "um because I feel like when you work with the relational database model where it is very relaxed and then you layer on",
    "start": "2703119",
    "end": "2708700"
  },
  {
    "text": "more and more strictness when you do that you just have to know too much",
    "start": "2708700",
    "end": "2714220"
  },
  {
    "text": "about both the domain details and the internal knowledge of the data store you're working with or the internal knowledge of the system you're working",
    "start": "2714220",
    "end": "2719920"
  },
  {
    "text": "with and I think it's only by starting from a safe posture and relaxing yourself that we're actually able to see",
    "start": "2719920",
    "end": "2725079"
  },
  {
    "text": "more of these ad hoc style systems where it's way more flexible adding consistency or using consistency",
    "start": "2725079",
    "end": "2733180"
  },
  {
    "start": "2733000",
    "end": "2891000"
  },
  {
    "text": "and with that that's all I have for today um this is a very deep subject uh and I",
    "start": "2733180",
    "end": "2738819"
  },
  {
    "text": "just want folks to know that I have only like kind of scratched the surface here um people spend their whole professional",
    "start": "2738819",
    "end": "2745900"
  },
  {
    "text": "careers researching this stuff um that's a cuckoo clock that's how I",
    "start": "2745900",
    "end": "2751180"
  },
  {
    "text": "know I hit my my number for the time for this this uh webinar um but yeah",
    "start": "2751180",
    "end": "2757660"
  },
  {
    "text": "consistency is a super super important subject I still see very seasoned developers overlooking it or downplaying",
    "start": "2757660",
    "end": "2764380"
  },
  {
    "text": "it in their systems and especially when they make architectural decisions for",
    "start": "2764380",
    "end": "2770079"
  },
  {
    "text": "their overall design of their system and it really it really shouldn't be",
    "start": "2770079",
    "end": "2775540"
  },
  {
    "text": "overlooked it's one of the most important things that like you need to discuss and decide when you're designing",
    "start": "2775540",
    "end": "2781119"
  },
  {
    "text": "something because excluding very few of these occasions",
    "start": "2781119",
    "end": "2786520"
  },
  {
    "text": "we have previously not worked with a lot of systems that give you that flexibility to",
    "start": "2786520",
    "end": "2793000"
  },
  {
    "text": "um actually adopt more consistency if you need it so if you've foregone",
    "start": "2793000",
    "end": "2798099"
  },
  {
    "text": "consistency and chosen a system where you would have been have to somehow layer on more you hear off you often",
    "start": "2798099",
    "end": "2804160"
  },
  {
    "text": "just can't go back you often are stuck and you'll break the contract and things",
    "start": "2804160",
    "end": "2810400"
  },
  {
    "text": "will start breaking there are many of large companies that folks in Industry",
    "start": "2810400",
    "end": "2817119"
  },
  {
    "text": "think are the bastions of Pinnacle of engineering that get to hire experts all",
    "start": "2817119",
    "end": "2822819"
  },
  {
    "text": "around the world they pay well because they're a giant company building a really cool product but a lot of these",
    "start": "2822819",
    "end": "2827920"
  },
  {
    "text": "companies have huge problems because they the way they",
    "start": "2827920",
    "end": "2833740"
  },
  {
    "text": "grew they were incapable of dealing with consistency they didn't have the technology at the time to deal with the consistency of their systems and they",
    "start": "2833740",
    "end": "2840280"
  },
  {
    "text": "have outages as a result they have data loss as a result and they are stuck in a",
    "start": "2840280",
    "end": "2846099"
  },
  {
    "text": "state where they're forever trying to migrate critical data or the data that has different consistency into new",
    "start": "2846099",
    "end": "2851800"
  },
  {
    "text": "systems and I do not want to see um more developers in that scenario",
    "start": "2851800",
    "end": "2857140"
  },
  {
    "text": "especially since we've made so much progress on this subject as an industry and with that I'd like to thank everyone",
    "start": "2857140",
    "end": "2863380"
  },
  {
    "text": "for watching if you want to discuss more topics like this or learn more about how for example space DB uses ad hoc",
    "start": "2863380",
    "end": "2869920"
  },
  {
    "text": "consistency you can join our Discord um the link is right in front of you and",
    "start": "2869920",
    "end": "2875859"
  },
  {
    "text": "uh if that's not just exclusively for spice DB users it's an open source Community where folks that care about",
    "start": "2875859",
    "end": "2881319"
  },
  {
    "text": "distributed systems can talk about all kinds of all kinds of research and",
    "start": "2881319",
    "end": "2886780"
  },
  {
    "text": "practical usage in Industry so thanks for time",
    "start": "2886780",
    "end": "2892619"
  }
]