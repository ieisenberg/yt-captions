[
  {
    "text": "hi everyone i'm eric from mirantis",
    "start": "3280",
    "end": "6080"
  },
  {
    "text": "in today's on-demand webinar we're going",
    "start": "6080",
    "end": "8000"
  },
  {
    "text": "to walk you through the setup process",
    "start": "8000",
    "end": "9760"
  },
  {
    "text": "for a web app built on node react and",
    "start": "9760",
    "end": "12160"
  },
  {
    "text": "mysql to be deployed as containerized",
    "start": "12160",
    "end": "15040"
  },
  {
    "text": "services our goal here is to be able to",
    "start": "15040",
    "end": "17600"
  },
  {
    "text": "work on this application with our front",
    "start": "17600",
    "end": "19279"
  },
  {
    "text": "end back end and database all running in",
    "start": "19279",
    "end": "21520"
  },
  {
    "text": "containers so we can build out our app",
    "start": "21520",
    "end": "23680"
  },
  {
    "text": "and then smoothly deploy to kubernetes",
    "start": "23680",
    "end": "25599"
  },
  {
    "text": "or docker swarm",
    "start": "25599",
    "end": "27359"
  },
  {
    "text": "big picture we want to make cloud native",
    "start": "27359",
    "end": "29039"
  },
  {
    "text": "development easier so you can focus on",
    "start": "29039",
    "end": "31519"
  },
  {
    "text": "your app itself",
    "start": "31519",
    "end": "33280"
  },
  {
    "text": "this walkthrough is intended as a",
    "start": "33280",
    "end": "35040"
  },
  {
    "text": "hands-on lesson for beginners to cloud",
    "start": "35040",
    "end": "36960"
  },
  {
    "text": "native development",
    "start": "36960",
    "end": "38320"
  },
  {
    "text": "we'll be working with the docker engine",
    "start": "38320",
    "end": "39920"
  },
  {
    "text": "and we'll be pausing frequently to talk",
    "start": "39920",
    "end": "41600"
  },
  {
    "text": "through the commands we're using",
    "start": "41600",
    "end": "43680"
  },
  {
    "text": "by the end you should feel confident",
    "start": "43680",
    "end": "45200"
  },
  {
    "text": "getting started with your own",
    "start": "45200",
    "end": "46239"
  },
  {
    "text": "containerized app using these components",
    "start": "46239",
    "end": "48800"
  },
  {
    "text": "along the way you should get a solid",
    "start": "48800",
    "end": "50399"
  },
  {
    "text": "primer or refresher on container",
    "start": "50399",
    "end": "52239"
  },
  {
    "text": "concepts like volumes port forwarding",
    "start": "52239",
    "end": "54879"
  },
  {
    "text": "and networking",
    "start": "54879",
    "end": "56800"
  },
  {
    "text": "if you'd like to follow along you'll",
    "start": "56800",
    "end": "58320"
  },
  {
    "text": "need the docker engine installed and",
    "start": "58320",
    "end": "59840"
  },
  {
    "text": "running on your machine",
    "start": "59840",
    "end": "61520"
  },
  {
    "text": "on windows or mac that will probably",
    "start": "61520",
    "end": "63199"
  },
  {
    "text": "mean you're using docker desktop",
    "start": "63199",
    "end": "65360"
  },
  {
    "text": "it'll be helpful to have a basic",
    "start": "65360",
    "end": "66640"
  },
  {
    "text": "understanding of the linux command line",
    "start": "66640",
    "end": "68159"
  },
  {
    "text": "as well but you should be able to follow",
    "start": "68159",
    "end": "69920"
  },
  {
    "text": "along regardless",
    "start": "69920",
    "end": "72560"
  },
  {
    "text": "before we jump in a few details about me",
    "start": "72560",
    "end": "75520"
  },
  {
    "text": "my name is eric gregory and i'm senior",
    "start": "75520",
    "end": "77439"
  },
  {
    "text": "technical writer at mirantis",
    "start": "77439",
    "end": "79439"
  },
  {
    "text": "i'm the author of learn containers five",
    "start": "79439",
    "end": "81119"
  },
  {
    "text": "minutes at a time and co-host of the",
    "start": "81119",
    "end": "82960"
  },
  {
    "text": "radio cloud native podcast with nick",
    "start": "82960",
    "end": "84840"
  },
  {
    "text": "chase in a past life i was computer",
    "start": "84840",
    "end": "87280"
  },
  {
    "text": "science instructor and today i write on",
    "start": "87280",
    "end": "89360"
  },
  {
    "text": "kubernetes containers and other topics",
    "start": "89360",
    "end": "91439"
  },
  {
    "text": "in the cloud native space",
    "start": "91439",
    "end": "93920"
  },
  {
    "text": "so if we're setting out to develop our",
    "start": "93920",
    "end": "95759"
  },
  {
    "text": "app as a set of containerized services",
    "start": "95759",
    "end": "98560"
  },
  {
    "text": "those services will need to be able to",
    "start": "98560",
    "end": "100000"
  },
  {
    "text": "communicate with one another on a",
    "start": "100000",
    "end": "101759"
  },
  {
    "text": "network so we'll start by creating a",
    "start": "101759",
    "end": "103840"
  },
  {
    "text": "user-defined bridge network where our",
    "start": "103840",
    "end": "105600"
  },
  {
    "text": "containers can reach each other by dns",
    "start": "105600",
    "end": "108479"
  },
  {
    "text": "i'm going to imagine i'm building just a",
    "start": "108479",
    "end": "111119"
  },
  {
    "text": "template app here a test app so we'll",
    "start": "111119",
    "end": "113520"
  },
  {
    "text": "name its network accordingly",
    "start": "113520",
    "end": "117039"
  },
  {
    "text": "so what exactly is happening here",
    "start": "119280",
    "end": "121520"
  },
  {
    "text": "we're creating a new network named",
    "start": "121520",
    "end": "123520"
  },
  {
    "text": "testnet",
    "start": "123520",
    "end": "124640"
  },
  {
    "text": "and we're using the d or driver argument",
    "start": "124640",
    "end": "127600"
  },
  {
    "text": "to specify that it should use a",
    "start": "127600",
    "end": "128879"
  },
  {
    "text": "particular model for the new network the",
    "start": "128879",
    "end": "131120"
  },
  {
    "text": "options here are bridge overlay or a",
    "start": "131120",
    "end": "134480"
  },
  {
    "text": "custom driver option added by the user",
    "start": "134480",
    "end": "138239"
  },
  {
    "text": "bridge networks allow containers within",
    "start": "138239",
    "end": "139920"
  },
  {
    "text": "the network all of which must be on the",
    "start": "139920",
    "end": "141680"
  },
  {
    "text": "same docker demon host to communicate",
    "start": "141680",
    "end": "143680"
  },
  {
    "text": "with one another while isolating them",
    "start": "143680",
    "end": "145280"
  },
  {
    "text": "from other networks overlay networks",
    "start": "145280",
    "end": "147520"
  },
  {
    "text": "allow containers within the network",
    "start": "147520",
    "end": "149200"
  },
  {
    "text": "which may be spread across multiple",
    "start": "149200",
    "end": "150800"
  },
  {
    "text": "docker demon hosts to communicate with",
    "start": "150800",
    "end": "153040"
  },
  {
    "text": "one another while isolating them from",
    "start": "153040",
    "end": "154879"
  },
  {
    "text": "other networks this driver is used by",
    "start": "154879",
    "end": "156800"
  },
  {
    "text": "docker swarm for container orchestration",
    "start": "156800",
    "end": "159040"
  },
  {
    "text": "and custom drivers allow for custom",
    "start": "159040",
    "end": "160800"
  },
  {
    "text": "network rules if we didn't create and",
    "start": "160800",
    "end": "162959"
  },
  {
    "text": "specify a new network for our containers",
    "start": "162959",
    "end": "165360"
  },
  {
    "text": "they would live on the default bridge",
    "start": "165360",
    "end": "167040"
  },
  {
    "text": "network and when containers are on the",
    "start": "167040",
    "end": "168640"
  },
  {
    "text": "default bridge they can't communicate by",
    "start": "168640",
    "end": "170640"
  },
  {
    "text": "dns instead they need to know one",
    "start": "170640",
    "end": "172879"
  },
  {
    "text": "another's specific ip addresses to",
    "start": "172879",
    "end": "175040"
  },
  {
    "text": "transmit data back and forth",
    "start": "175040",
    "end": "177200"
  },
  {
    "text": "when we have a group of containers that",
    "start": "177200",
    "end": "178560"
  },
  {
    "text": "need to communicate instead of using the",
    "start": "178560",
    "end": "180560"
  },
  {
    "text": "default bridge we can place them in",
    "start": "180560",
    "end": "182000"
  },
  {
    "text": "their own user-defined network while",
    "start": "182000",
    "end": "184000"
  },
  {
    "text": "this isn't the only way to let",
    "start": "184000",
    "end": "185440"
  },
  {
    "text": "containers communicate it is the",
    "start": "185440",
    "end": "187440"
  },
  {
    "text": "docker-preferred way of doing things",
    "start": "187440",
    "end": "189280"
  },
  {
    "text": "since this creates a precisely scoped",
    "start": "189280",
    "end": "191599"
  },
  {
    "text": "layer of isolation",
    "start": "191599",
    "end": "193599"
  },
  {
    "text": "so now we have our user-defined network",
    "start": "193599",
    "end": "195760"
  },
  {
    "text": "since we'll be running a mysql database",
    "start": "195760",
    "end": "198000"
  },
  {
    "text": "we'll also need a volume for persistent",
    "start": "198000",
    "end": "200080"
  },
  {
    "text": "storage",
    "start": "200080",
    "end": "201440"
  },
  {
    "text": "our containers themselves will be super",
    "start": "201440",
    "end": "203200"
  },
  {
    "text": "ephemeral but we want our database",
    "start": "203200",
    "end": "205040"
  },
  {
    "text": "configuration and app data to last",
    "start": "205040",
    "end": "206799"
  },
  {
    "text": "beyond the lifespan of any particular",
    "start": "206799",
    "end": "208560"
  },
  {
    "text": "container volumes give us a way to do",
    "start": "208560",
    "end": "210480"
  },
  {
    "text": "that",
    "start": "210480",
    "end": "211440"
  },
  {
    "text": "we'll see another approach in a few",
    "start": "211440",
    "end": "212720"
  },
  {
    "text": "minutes but in the meantime let's create",
    "start": "212720",
    "end": "214879"
  },
  {
    "text": "our volume",
    "start": "214879",
    "end": "217519"
  },
  {
    "text": "so now we have a network and we have",
    "start": "217760",
    "end": "220080"
  },
  {
    "text": "storage",
    "start": "220080",
    "end": "221360"
  },
  {
    "text": "let's create a container to make use of",
    "start": "221360",
    "end": "222879"
  },
  {
    "text": "them",
    "start": "222879",
    "end": "223840"
  },
  {
    "text": "our first container will run the mysql",
    "start": "223840",
    "end": "225920"
  },
  {
    "text": "database",
    "start": "225920",
    "end": "227740"
  },
  {
    "text": "[Music]",
    "start": "227740",
    "end": "233650"
  },
  {
    "text": "all right let's break down this command",
    "start": "233920",
    "end": "235680"
  },
  {
    "text": "we're using docker run to start a new",
    "start": "235680",
    "end": "237680"
  },
  {
    "text": "container and we're naming it test mysql",
    "start": "237680",
    "end": "240400"
  },
  {
    "text": "the network argument specifies that the",
    "start": "240400",
    "end": "242400"
  },
  {
    "text": "container is going to use our",
    "start": "242400",
    "end": "243680"
  },
  {
    "text": "user-defined test net network the v for",
    "start": "243680",
    "end": "246959"
  },
  {
    "text": "volume argument says that the container",
    "start": "246959",
    "end": "248720"
  },
  {
    "text": "will use our new volume and associates",
    "start": "248720",
    "end": "250959"
  },
  {
    "text": "the volume with the directory in the",
    "start": "250959",
    "end": "252319"
  },
  {
    "text": "mysql container where it expects to be",
    "start": "252319",
    "end": "254319"
  },
  {
    "text": "able to save persistent data the d",
    "start": "254319",
    "end": "256880"
  },
  {
    "text": "argument means we're going to run the",
    "start": "256880",
    "end": "258479"
  },
  {
    "text": "container in detached mode which means",
    "start": "258479",
    "end": "260720"
  },
  {
    "text": "the container process won't be bound to",
    "start": "260720",
    "end": "262479"
  },
  {
    "text": "our current terminal session we'll be",
    "start": "262479",
    "end": "264080"
  },
  {
    "text": "able to keep working rather than just",
    "start": "264080",
    "end": "265520"
  },
  {
    "text": "watch it run the e argument specifies an",
    "start": "265520",
    "end": "268560"
  },
  {
    "text": "environment variable in this case a root",
    "start": "268560",
    "end": "271040"
  },
  {
    "text": "user password for the database i'm using",
    "start": "271040",
    "end": "273040"
  },
  {
    "text": "the password oktoberfest here finally",
    "start": "273040",
    "end": "275440"
  },
  {
    "text": "we're building from the official docker",
    "start": "275440",
    "end": "277040"
  },
  {
    "text": "hub image for mysql alright now we have",
    "start": "277040",
    "end": "280160"
  },
  {
    "text": "our containerized database running",
    "start": "280160",
    "end": "282639"
  },
  {
    "text": "we have two more services to go and both",
    "start": "282639",
    "end": "284880"
  },
  {
    "text": "are ultimately built on node.js our",
    "start": "284880",
    "end": "287360"
  },
  {
    "text": "backend is going to be a simple express",
    "start": "287360",
    "end": "289280"
  },
  {
    "text": "server while our frontend is going to",
    "start": "289280",
    "end": "290960"
  },
  {
    "text": "use the react library for this setup",
    "start": "290960",
    "end": "292960"
  },
  {
    "text": "we're going to assume that we want to be",
    "start": "292960",
    "end": "294479"
  },
  {
    "text": "able to use code editors like vs code on",
    "start": "294479",
    "end": "296800"
  },
  {
    "text": "our local machine",
    "start": "296800",
    "end": "298160"
  },
  {
    "text": "but we want to run node from containers",
    "start": "298160",
    "end": "300479"
  },
  {
    "text": "so let's set up a simple project",
    "start": "300479",
    "end": "302479"
  },
  {
    "text": "directory on our host machine",
    "start": "302479",
    "end": "304720"
  },
  {
    "text": "i'm going to create an overall project",
    "start": "304720",
    "end": "306720"
  },
  {
    "text": "directory called testdemo this is where",
    "start": "306720",
    "end": "309120"
  },
  {
    "text": "we'll be working from here on out",
    "start": "309120",
    "end": "312720"
  },
  {
    "text": "inside the overall project directory",
    "start": "313759",
    "end": "315919"
  },
  {
    "text": "we'll create a new directory for the",
    "start": "315919",
    "end": "317759"
  },
  {
    "text": "backend app",
    "start": "317759",
    "end": "320479"
  },
  {
    "text": "next we're going to initialize our",
    "start": "320639",
    "end": "322479"
  },
  {
    "text": "projects with node which means we're",
    "start": "322479",
    "end": "324240"
  },
  {
    "text": "going to use the npm package manager to",
    "start": "324240",
    "end": "326639"
  },
  {
    "text": "create some core configurations and",
    "start": "326639",
    "end": "328560"
  },
  {
    "text": "download packages we'll need for our app",
    "start": "328560",
    "end": "330800"
  },
  {
    "text": "we could do this with a version of node",
    "start": "330800",
    "end": "332479"
  },
  {
    "text": "running on our local machine but we're",
    "start": "332479",
    "end": "334639"
  },
  {
    "text": "not going to",
    "start": "334639",
    "end": "335919"
  },
  {
    "text": "instead we're going to keep things",
    "start": "335919",
    "end": "337120"
  },
  {
    "text": "really simple and clean and consistent",
    "start": "337120",
    "end": "339199"
  },
  {
    "text": "by running our setup from a node",
    "start": "339199",
    "end": "340639"
  },
  {
    "text": "container",
    "start": "340639",
    "end": "341759"
  },
  {
    "text": "now in this command we're going to run",
    "start": "341759",
    "end": "344000"
  },
  {
    "text": "node from the official container image",
    "start": "344000",
    "end": "345600"
  },
  {
    "text": "on docker hub",
    "start": "345600",
    "end": "347570"
  },
  {
    "text": "[Music]",
    "start": "347570",
    "end": "353480"
  },
  {
    "text": "there are a few details we should point",
    "start": "355759",
    "end": "357280"
  },
  {
    "text": "out here",
    "start": "357280",
    "end": "358319"
  },
  {
    "text": "the it argument means we're running this",
    "start": "358319",
    "end": "360479"
  },
  {
    "text": "container interactively so we can start",
    "start": "360479",
    "end": "362400"
  },
  {
    "text": "a bash session inside we're using the",
    "start": "362400",
    "end": "365039"
  },
  {
    "text": "mount argument to connect the container",
    "start": "365039",
    "end": "366880"
  },
  {
    "text": "directly to our hard drive and we're",
    "start": "366880",
    "end": "368720"
  },
  {
    "text": "telling it to start the mount at our",
    "start": "368720",
    "end": "370560"
  },
  {
    "text": "present working directory this is the",
    "start": "370560",
    "end": "372479"
  },
  {
    "text": "overall project directory we're also",
    "start": "372479",
    "end": "374720"
  },
  {
    "text": "telling docker to map that directory to",
    "start": "374720",
    "end": "377120"
  },
  {
    "text": "user slash source app inside the",
    "start": "377120",
    "end": "379600"
  },
  {
    "text": "container file system",
    "start": "379600",
    "end": "381280"
  },
  {
    "text": "the w argument defines a working",
    "start": "381280",
    "end": "383199"
  },
  {
    "text": "directory inside the container so that's",
    "start": "383199",
    "end": "385039"
  },
  {
    "text": "where we'll land when we actually run",
    "start": "385039",
    "end": "387039"
  },
  {
    "text": "this",
    "start": "387039",
    "end": "388400"
  },
  {
    "text": "so",
    "start": "388400",
    "end": "389199"
  },
  {
    "text": "let's go ahead and here we are we're at",
    "start": "389199",
    "end": "391919"
  },
  {
    "text": "the working directory that we defined",
    "start": "391919",
    "end": "394240"
  },
  {
    "text": "now here inside the container we can use",
    "start": "394240",
    "end": "396720"
  },
  {
    "text": "ls",
    "start": "396720",
    "end": "397919"
  },
  {
    "text": "and hey there's the project directory",
    "start": "397919",
    "end": "400240"
  },
  {
    "text": "that we created perfect",
    "start": "400240",
    "end": "402400"
  },
  {
    "text": "now that's our actual directory our",
    "start": "402400",
    "end": "404800"
  },
  {
    "text": "actual test app directory not a copy so",
    "start": "404800",
    "end": "407199"
  },
  {
    "text": "anything we do here will be reflected on",
    "start": "407199",
    "end": "409039"
  },
  {
    "text": "the host machine let's hop into our app",
    "start": "409039",
    "end": "411599"
  },
  {
    "text": "directory",
    "start": "411599",
    "end": "414160"
  },
  {
    "text": "and since we're inside a node container",
    "start": "414400",
    "end": "416639"
  },
  {
    "text": "we can initialize the project with the",
    "start": "416639",
    "end": "418319"
  },
  {
    "text": "containers instance of npm",
    "start": "418319",
    "end": "421520"
  },
  {
    "text": "this is going to set up our package.json",
    "start": "421520",
    "end": "423919"
  },
  {
    "text": "file we should also install the mysql2",
    "start": "423919",
    "end": "426960"
  },
  {
    "text": "driver so our backend app can connect to",
    "start": "426960",
    "end": "429039"
  },
  {
    "text": "the database note that we're using the",
    "start": "429039",
    "end": "431080"
  },
  {
    "text": "mysql2 driver that's important you'll",
    "start": "431080",
    "end": "433759"
  },
  {
    "text": "hit errors if you try to use the vanilla",
    "start": "433759",
    "end": "435440"
  },
  {
    "text": "mysql driver",
    "start": "435440",
    "end": "438400"
  },
  {
    "text": "we also want to use the express web",
    "start": "439919",
    "end": "441759"
  },
  {
    "text": "framework so we'll go ahead and install",
    "start": "441759",
    "end": "443280"
  },
  {
    "text": "that now too",
    "start": "443280",
    "end": "445919"
  },
  {
    "text": "that's all the setup we need to do on",
    "start": "449440",
    "end": "450880"
  },
  {
    "text": "the back inside so we'll head on over to",
    "start": "450880",
    "end": "452800"
  },
  {
    "text": "the overall project directory",
    "start": "452800",
    "end": "456000"
  },
  {
    "text": "here we're going to run a bit of npm",
    "start": "456000",
    "end": "458000"
  },
  {
    "text": "configuration to help react get going",
    "start": "458000",
    "end": "459759"
  },
  {
    "text": "without any errors",
    "start": "459759",
    "end": "461280"
  },
  {
    "text": "then we'll run npx create react app test",
    "start": "461280",
    "end": "464879"
  },
  {
    "text": "client which will create a new folder",
    "start": "464879",
    "end": "466960"
  },
  {
    "text": "and populate it with files for our react",
    "start": "466960",
    "end": "468639"
  },
  {
    "text": "project",
    "start": "468639",
    "end": "470840"
  },
  {
    "text": "[Music]",
    "start": "470840",
    "end": "483870"
  },
  {
    "text": "okay that's it for our initial setup we",
    "start": "484639",
    "end": "487199"
  },
  {
    "text": "can type exit to exit out of the",
    "start": "487199",
    "end": "488720"
  },
  {
    "text": "container shell session",
    "start": "488720",
    "end": "490400"
  },
  {
    "text": "if we check the project directories",
    "start": "490400",
    "end": "491840"
  },
  {
    "text": "through our host system we'll see all",
    "start": "491840",
    "end": "493759"
  },
  {
    "text": "the new files we've created",
    "start": "493759",
    "end": "496240"
  },
  {
    "text": "now it's time to build out the",
    "start": "496240",
    "end": "497280"
  },
  {
    "text": "foundation of our application",
    "start": "497280",
    "end": "499360"
  },
  {
    "text": "we'll start with the back end create a",
    "start": "499360",
    "end": "501280"
  },
  {
    "text": "file called index.js in the test app",
    "start": "501280",
    "end": "503680"
  },
  {
    "text": "directory",
    "start": "503680",
    "end": "504720"
  },
  {
    "text": "i'm going to go ahead and do that with",
    "start": "504720",
    "end": "505840"
  },
  {
    "text": "vs code",
    "start": "505840",
    "end": "507870"
  },
  {
    "text": "[Music]",
    "start": "507870",
    "end": "513779"
  },
  {
    "text": "[Music]",
    "start": "517860",
    "end": "520899"
  },
  {
    "text": "okay so up top we've declared",
    "start": "524640",
    "end": "527760"
  },
  {
    "text": "a dependency the mysql driver",
    "start": "527760",
    "end": "531200"
  },
  {
    "text": "then we've defined our database",
    "start": "531200",
    "end": "533200"
  },
  {
    "text": "connection",
    "start": "533200",
    "end": "534959"
  },
  {
    "text": "with our credentials",
    "start": "534959",
    "end": "536560"
  },
  {
    "text": "a couple things to note here we'll be",
    "start": "536560",
    "end": "538480"
  },
  {
    "text": "able to use the hostname of the test",
    "start": "538480",
    "end": "540800"
  },
  {
    "text": "mysql container",
    "start": "540800",
    "end": "542480"
  },
  {
    "text": "and that'll resolve just fine via dns",
    "start": "542480",
    "end": "545440"
  },
  {
    "text": "that's a nice model that we can scale",
    "start": "545440",
    "end": "547279"
  },
  {
    "text": "pretty easily when deploying to a",
    "start": "547279",
    "end": "548640"
  },
  {
    "text": "container orchestrator",
    "start": "548640",
    "end": "550560"
  },
  {
    "text": "make sure to be careful",
    "start": "550560",
    "end": "552000"
  },
  {
    "text": "of your passwords though",
    "start": "552000",
    "end": "553680"
  },
  {
    "text": "we're keeping things simple here for the",
    "start": "553680",
    "end": "555040"
  },
  {
    "text": "sake of a quick walkthrough but in",
    "start": "555040",
    "end": "556640"
  },
  {
    "text": "practice you'll want to make sure to use",
    "start": "556640",
    "end": "558320"
  },
  {
    "text": "secrets and to be sure that sensitive",
    "start": "558320",
    "end": "560160"
  },
  {
    "text": "passwords aren't hanging out in the open",
    "start": "560160",
    "end": "561680"
  },
  {
    "text": "on git repositories or what have you",
    "start": "561680",
    "end": "564640"
  },
  {
    "text": "all right next we're connecting to the",
    "start": "564640",
    "end": "566959"
  },
  {
    "text": "database and basically just checking to",
    "start": "566959",
    "end": "569200"
  },
  {
    "text": "see if everything is working properly",
    "start": "569200",
    "end": "571360"
  },
  {
    "text": "if the connection succeeds we'll",
    "start": "571360",
    "end": "573200"
  },
  {
    "text": "generate a confirmation message in the",
    "start": "573200",
    "end": "575600"
  },
  {
    "text": "console",
    "start": "575600",
    "end": "576720"
  },
  {
    "text": "if it fails we'll throw an error",
    "start": "576720",
    "end": "579680"
  },
  {
    "text": "okay let's see if this works",
    "start": "579680",
    "end": "583100"
  },
  {
    "text": "[Music]",
    "start": "583100",
    "end": "588339"
  },
  {
    "text": "with this command we're running a",
    "start": "588560",
    "end": "590320"
  },
  {
    "text": "container based on the node image again",
    "start": "590320",
    "end": "592640"
  },
  {
    "text": "we're running on the test net network",
    "start": "592640",
    "end": "594480"
  },
  {
    "text": "and mounting the hard drive as before",
    "start": "594480",
    "end": "596640"
  },
  {
    "text": "we've added the dash dash rm flag which",
    "start": "596640",
    "end": "599360"
  },
  {
    "text": "will automatically delete the container",
    "start": "599360",
    "end": "601040"
  },
  {
    "text": "once it's stopped and we're going to use",
    "start": "601040",
    "end": "603040"
  },
  {
    "text": "node to run index.js let's give it a",
    "start": "603040",
    "end": "605760"
  },
  {
    "text": "shot",
    "start": "605760",
    "end": "607120"
  },
  {
    "text": "as you can see everything is working",
    "start": "607120",
    "end": "608880"
  },
  {
    "text": "nicely the containerized app connected",
    "start": "608880",
    "end": "611200"
  },
  {
    "text": "with the containerized database but we",
    "start": "611200",
    "end": "613760"
  },
  {
    "text": "want to take our app template a little",
    "start": "613760",
    "end": "615519"
  },
  {
    "text": "further and bring in the front end so in",
    "start": "615519",
    "end": "617600"
  },
  {
    "text": "another terminal tab we'll stop the test",
    "start": "617600",
    "end": "619760"
  },
  {
    "text": "app container",
    "start": "619760",
    "end": "622399"
  },
  {
    "text": "this is going to take a minute to stop",
    "start": "624480",
    "end": "625920"
  },
  {
    "text": "but let's go ahead and add a little more",
    "start": "625920",
    "end": "628320"
  },
  {
    "text": "logic to our back end now in vs code",
    "start": "628320",
    "end": "633680"
  },
  {
    "text": "[Music]",
    "start": "633970",
    "end": "641978"
  },
  {
    "text": "now we've added the express framework as",
    "start": "644560",
    "end": "647200"
  },
  {
    "text": "a dependency",
    "start": "647200",
    "end": "648720"
  },
  {
    "text": "using express we've opened port 3001 for",
    "start": "648720",
    "end": "651519"
  },
  {
    "text": "traffic and created the bare bones",
    "start": "651519",
    "end": "653360"
  },
  {
    "text": "beginnings of an api",
    "start": "653360",
    "end": "655680"
  },
  {
    "text": "in this case we're simply answering",
    "start": "655680",
    "end": "657200"
  },
  {
    "text": "calls to the api with the results of our",
    "start": "657200",
    "end": "659279"
  },
  {
    "text": "database connection",
    "start": "659279",
    "end": "661760"
  },
  {
    "text": "let's save these updates and then we'll",
    "start": "661760",
    "end": "663279"
  },
  {
    "text": "run the back end on a container again",
    "start": "663279",
    "end": "665440"
  },
  {
    "text": "this time with the detached flag and",
    "start": "665440",
    "end": "667519"
  },
  {
    "text": "some port mapping",
    "start": "667519",
    "end": "670470"
  },
  {
    "text": "[Music]",
    "start": "670470",
    "end": "676379"
  },
  {
    "text": "[Music]",
    "start": "680450",
    "end": "682640"
  },
  {
    "text": "since we're mapping the containers port",
    "start": "682640",
    "end": "684399"
  },
  {
    "text": "3001 to localhost we should be able to",
    "start": "684399",
    "end": "687040"
  },
  {
    "text": "check out our api at low close 3001",
    "start": "687040",
    "end": "690399"
  },
  {
    "text": "so let's bring a web browser over",
    "start": "690399",
    "end": "695519"
  },
  {
    "text": "great we have our json message that we",
    "start": "698000",
    "end": "700640"
  },
  {
    "text": "wanted to see so that's two services",
    "start": "700640",
    "end": "703279"
  },
  {
    "text": "down",
    "start": "703279",
    "end": "704079"
  },
  {
    "text": "let's turn our attention to the front",
    "start": "704079",
    "end": "706000"
  },
  {
    "text": "end client",
    "start": "706000",
    "end": "707279"
  },
  {
    "text": "we can test the container with",
    "start": "707279",
    "end": "711200"
  },
  {
    "text": "[Music]",
    "start": "711200",
    "end": "716440"
  },
  {
    "text": "now this is going to take a minute to",
    "start": "716480",
    "end": "718000"
  },
  {
    "text": "start up but once it gets going the",
    "start": "718000",
    "end": "720399"
  },
  {
    "text": "react front end will be exposed on port",
    "start": "720399",
    "end": "722560"
  },
  {
    "text": "3000 which we've mapped to localhost",
    "start": "722560",
    "end": "725120"
  },
  {
    "text": "3000",
    "start": "725120",
    "end": "726970"
  },
  {
    "text": "[Music]",
    "start": "726970",
    "end": "732879"
  },
  {
    "text": "perfect everything is running and as it",
    "start": "735360",
    "end": "737680"
  },
  {
    "text": "says here on the default landing page",
    "start": "737680",
    "end": "739360"
  },
  {
    "text": "we'll want to edit app.js in the source",
    "start": "739360",
    "end": "741519"
  },
  {
    "text": "folder in the client directory",
    "start": "741519",
    "end": "743600"
  },
  {
    "text": "so let's open that in vs code and make a",
    "start": "743600",
    "end": "745839"
  },
  {
    "text": "few changes",
    "start": "745839",
    "end": "748570"
  },
  {
    "text": "[Music]",
    "start": "748570",
    "end": "754479"
  },
  {
    "text": "[Music]",
    "start": "758560",
    "end": "761600"
  },
  {
    "text": "[Applause]",
    "start": "762830",
    "end": "763540"
  },
  {
    "text": "[Music]",
    "start": "763540",
    "end": "776459"
  },
  {
    "text": "now we haven't changed too much here",
    "start": "778240",
    "end": "780320"
  },
  {
    "text": "really what we've added is a way for",
    "start": "780320",
    "end": "782160"
  },
  {
    "text": "this front end to fetch a json message",
    "start": "782160",
    "end": "784320"
  },
  {
    "text": "from the api and then pass it on to the",
    "start": "784320",
    "end": "786480"
  },
  {
    "text": "front page",
    "start": "786480",
    "end": "787680"
  },
  {
    "text": "but there's one wrinkle there's no api",
    "start": "787680",
    "end": "790079"
  },
  {
    "text": "running here this is a dedicated",
    "start": "790079",
    "end": "791760"
  },
  {
    "text": "front-end service",
    "start": "791760",
    "end": "793279"
  },
  {
    "text": "to deal with that we'll open the",
    "start": "793279",
    "end": "795079"
  },
  {
    "text": "package.json file for the client",
    "start": "795079",
    "end": "798240"
  },
  {
    "text": "and we'll add a",
    "start": "798240",
    "end": "800480"
  },
  {
    "text": "line establishing a proxy at test app",
    "start": "800480",
    "end": "803920"
  },
  {
    "text": "port",
    "start": "803920",
    "end": "804880"
  },
  {
    "text": "3001.",
    "start": "804880",
    "end": "807880"
  },
  {
    "text": "all right with that our pieces are in",
    "start": "808480",
    "end": "810880"
  },
  {
    "text": "place",
    "start": "810880",
    "end": "812160"
  },
  {
    "text": "let's save and run everything here",
    "start": "812160",
    "end": "816370"
  },
  {
    "text": "[Music]",
    "start": "816370",
    "end": "821620"
  },
  {
    "text": "so this is going to start up our client",
    "start": "822480",
    "end": "824959"
  },
  {
    "text": "in its container we're running in",
    "start": "824959",
    "end": "826320"
  },
  {
    "text": "detached mode so we're not going to see",
    "start": "826320",
    "end": "828079"
  },
  {
    "text": "the output and it's going to take a",
    "start": "828079",
    "end": "830560"
  },
  {
    "text": "minute to get going so",
    "start": "830560",
    "end": "833120"
  },
  {
    "text": "we'll wait a second we'll probably fast",
    "start": "833120",
    "end": "835519"
  },
  {
    "text": "forward ahead a minute or two to when",
    "start": "835519",
    "end": "837680"
  },
  {
    "text": "our client is running",
    "start": "837680",
    "end": "840079"
  },
  {
    "text": "and voila",
    "start": "840079",
    "end": "841360"
  },
  {
    "text": "we have three containerized services all",
    "start": "841360",
    "end": "843279"
  },
  {
    "text": "linked up and ready to serve as a",
    "start": "843279",
    "end": "844720"
  },
  {
    "text": "foundation for whatever you create",
    "start": "844720",
    "end": "847120"
  },
  {
    "text": "this is obviously just the skeleton of",
    "start": "847120",
    "end": "849040"
  },
  {
    "text": "an app and there are all kinds of",
    "start": "849040",
    "end": "850399"
  },
  {
    "text": "quality of life improvements that we'd",
    "start": "850399",
    "end": "852000"
  },
  {
    "text": "probably want to add",
    "start": "852000",
    "end": "853519"
  },
  {
    "text": "but there's one major efficiency we",
    "start": "853519",
    "end": "855120"
  },
  {
    "text": "should definitely talk about and that's",
    "start": "855120",
    "end": "856720"
  },
  {
    "text": "docker compose",
    "start": "856720",
    "end": "858240"
  },
  {
    "text": "you're not going to want to have to",
    "start": "858240",
    "end": "859519"
  },
  {
    "text": "launch all of these services",
    "start": "859519",
    "end": "860639"
  },
  {
    "text": "independently with a bunch of unwieldy",
    "start": "860639",
    "end": "862320"
  },
  {
    "text": "arguments every time you work on your",
    "start": "862320",
    "end": "863760"
  },
  {
    "text": "app",
    "start": "863760",
    "end": "864800"
  },
  {
    "text": "fortunately we can create a docker",
    "start": "864800",
    "end": "866320"
  },
  {
    "text": "compose file that does all of that for",
    "start": "866320",
    "end": "868000"
  },
  {
    "text": "us",
    "start": "868000",
    "end": "869360"
  },
  {
    "text": "first let's save the current state of",
    "start": "869360",
    "end": "871120"
  },
  {
    "text": "our container images",
    "start": "871120",
    "end": "873500"
  },
  {
    "text": "[Music]",
    "start": "873500",
    "end": "880480"
  },
  {
    "text": "with our images saved locally we'll stop",
    "start": "880480",
    "end": "882560"
  },
  {
    "text": "the current containers and they should",
    "start": "882560",
    "end": "883839"
  },
  {
    "text": "be removed automatically",
    "start": "883839",
    "end": "886400"
  },
  {
    "text": "[Music]",
    "start": "886400",
    "end": "891199"
  },
  {
    "text": "now in the test demo directory we'll",
    "start": "891199",
    "end": "893199"
  },
  {
    "text": "write a yaml file that contains all the",
    "start": "893199",
    "end": "894880"
  },
  {
    "text": "configurations we've used for each of",
    "start": "894880",
    "end": "896480"
  },
  {
    "text": "our containers and we'll go ahead and do",
    "start": "896480",
    "end": "898320"
  },
  {
    "text": "that in vs code as well",
    "start": "898320",
    "end": "901470"
  },
  {
    "text": "[Music]",
    "start": "901470",
    "end": "907378"
  },
  {
    "text": "[Music]",
    "start": "911460",
    "end": "914499"
  },
  {
    "text": "[Applause]",
    "start": "915730",
    "end": "916440"
  },
  {
    "text": "[Music]",
    "start": "916440",
    "end": "926890"
  },
  {
    "text": "let's walk through what's happening here",
    "start": "927040",
    "end": "929600"
  },
  {
    "text": "we're declaring the volume and",
    "start": "929600",
    "end": "932160"
  },
  {
    "text": "user-defined network that we've been",
    "start": "932160",
    "end": "934320"
  },
  {
    "text": "using",
    "start": "934320",
    "end": "935279"
  },
  {
    "text": "which here are defined as external which",
    "start": "935279",
    "end": "938160"
  },
  {
    "text": "simply means that they're outside the",
    "start": "938160",
    "end": "939759"
  },
  {
    "text": "scope of the docker compose file itself",
    "start": "939759",
    "end": "942720"
  },
  {
    "text": "typically the docker compose file is",
    "start": "942720",
    "end": "944880"
  },
  {
    "text": "going to assume that it defines its own",
    "start": "944880",
    "end": "947040"
  },
  {
    "text": "scope and wherever you've defined a",
    "start": "947040",
    "end": "950240"
  },
  {
    "text": "volume or a network it's going to create",
    "start": "950240",
    "end": "952480"
  },
  {
    "text": "a new one but here let's just use what",
    "start": "952480",
    "end": "954560"
  },
  {
    "text": "we already have so",
    "start": "954560",
    "end": "956240"
  },
  {
    "text": "we're bringing in our test net and test",
    "start": "956240",
    "end": "959199"
  },
  {
    "text": "data",
    "start": "959199",
    "end": "960639"
  },
  {
    "text": "and then we're using them across our",
    "start": "960639",
    "end": "963519"
  },
  {
    "text": "different containers as we've been doing",
    "start": "963519",
    "end": "966000"
  },
  {
    "text": "uh",
    "start": "966000",
    "end": "966800"
  },
  {
    "text": "we are defining all the different",
    "start": "966800",
    "end": "968880"
  },
  {
    "text": "configuration details our ports uh our",
    "start": "968880",
    "end": "972240"
  },
  {
    "text": "network that we're going to use our",
    "start": "972240",
    "end": "973519"
  },
  {
    "text": "working directories we can define all of",
    "start": "973519",
    "end": "975440"
  },
  {
    "text": "this in the compose file",
    "start": "975440",
    "end": "978000"
  },
  {
    "text": "now",
    "start": "978000",
    "end": "978800"
  },
  {
    "text": "when we have our yaml file here saved as",
    "start": "978800",
    "end": "981759"
  },
  {
    "text": "docker dash compose in our project",
    "start": "981759",
    "end": "983920"
  },
  {
    "text": "directory",
    "start": "983920",
    "end": "985040"
  },
  {
    "text": "we can simply run",
    "start": "985040",
    "end": "988079"
  },
  {
    "text": "docker",
    "start": "989680",
    "end": "991199"
  },
  {
    "text": "compose",
    "start": "991199",
    "end": "992720"
  },
  {
    "text": "up",
    "start": "992720",
    "end": "994879"
  },
  {
    "text": "and there we go our app is up and",
    "start": "995680",
    "end": "997680"
  },
  {
    "text": "running and we can bring up our",
    "start": "997680",
    "end": "999199"
  },
  {
    "text": "containers with a simple docker compose",
    "start": "999199",
    "end": "1001120"
  },
  {
    "text": "up command",
    "start": "1001120",
    "end": "1001680"
  },
  {
    "text": "[Music]",
    "start": "1001680",
    "end": "1002880"
  },
  {
    "text": "and if we wait a minute for our client",
    "start": "1002880",
    "end": "1006560"
  },
  {
    "text": "we see that everything is running",
    "start": "1007519",
    "end": "1008959"
  },
  {
    "text": "perfectly",
    "start": "1008959",
    "end": "1010720"
  },
  {
    "text": "and that brings us to a close for today",
    "start": "1010720",
    "end": "1012560"
  },
  {
    "text": "i hope this has been a useful",
    "start": "1012560",
    "end": "1013759"
  },
  {
    "text": "introduction or refresher to the",
    "start": "1013759",
    "end": "1015120"
  },
  {
    "text": "concepts underlying containerized",
    "start": "1015120",
    "end": "1016639"
  },
  {
    "text": "services deployment",
    "start": "1016639",
    "end": "1018240"
  },
  {
    "text": "if you'd like to play with any of the",
    "start": "1018240",
    "end": "1019440"
  },
  {
    "text": "code from today you can find it on",
    "start": "1019440",
    "end": "1020800"
  },
  {
    "text": "github at github.com eric gregory",
    "start": "1020800",
    "end": "1023759"
  },
  {
    "text": "testdemo",
    "start": "1023759",
    "end": "1025038"
  },
  {
    "text": "if you'd like to review any of the",
    "start": "1025039",
    "end": "1026160"
  },
  {
    "text": "concepts here you can check out my free",
    "start": "1026160",
    "end": "1027678"
  },
  {
    "text": "ebook from marantispress learn",
    "start": "1027679",
    "end": "1029360"
  },
  {
    "text": "containers five minutes at a time which",
    "start": "1029360",
    "end": "1031038"
  },
  {
    "text": "is available at mirantis.com",
    "start": "1031039",
    "end": "1033199"
  },
  {
    "text": "press",
    "start": "1033199",
    "end": "1034720"
  },
  {
    "text": "thanks so much to the cncf for the",
    "start": "1034720",
    "end": "1036400"
  },
  {
    "text": "opportunity to give this walkthrough and",
    "start": "1036400",
    "end": "1038079"
  },
  {
    "text": "thanks to all of you for joining take",
    "start": "1038079",
    "end": "1039918"
  },
  {
    "text": "care",
    "start": "1039919",
    "end": "1042639"
  }
]