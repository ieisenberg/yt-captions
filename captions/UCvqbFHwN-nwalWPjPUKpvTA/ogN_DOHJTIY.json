[
  {
    "text": "all right welcome everybody I'm so glad you're here I'm going to be talking about adventures in data and uh leaning",
    "start": "240",
    "end": "7879"
  },
  {
    "text": "on kubernetes storage to run hundreds of real-time analytic databases as you'll see in a moment I am a database person",
    "start": "7879",
    "end": "14519"
  },
  {
    "text": "let's just jump into the intro Parts my name is Robert Hodges I've been working on databases for over 40 years and as a",
    "start": "14519",
    "end": "22560"
  },
  {
    "text": "database person we love storage uh kubernetes has made it very interesting",
    "start": "22560",
    "end": "28039"
  },
  {
    "text": "because it's quite different from the storage that we the things we used to love about storage return things like",
    "start": "28039",
    "end": "33040"
  },
  {
    "text": "battery back cash and firmware versions and raid and stuff like that there's a whole new set of of resources that we",
    "start": "33040",
    "end": "39680"
  },
  {
    "text": "have to think about um been working on kubernetes for uh since 2018 my day job",
    "start": "39680",
    "end": "44800"
  },
  {
    "text": "is I'm a CEO of a database startup called ality and what I'm going to be",
    "start": "44800",
    "end": "50680"
  },
  {
    "text": "talking about here is actually based on our experience in that startup we are a service provider for click house 5 years",
    "start": "50680",
    "end": "57359"
  },
  {
    "text": "ago we made a decision to move our processing to make a bet basically that",
    "start": "57359",
    "end": "62559"
  },
  {
    "text": "kubernetes was going to be the wave of the future for uh management of data that has turned out to be true in Spades",
    "start": "62559",
    "end": "70080"
  },
  {
    "text": "and among other things we as part of that bet we built an operator for first of all for click House popular data",
    "start": "70080",
    "end": "76400"
  },
  {
    "text": "warehouse uh service that I'll be talking about a little bit here and um then built a cloud on top of it have",
    "start": "76400",
    "end": "83360"
  },
  {
    "text": "there's now at this point thousands of clusters uh running on this we ourselves in our Cloud running are running about",
    "start": "83360",
    "end": "89520"
  },
  {
    "text": "200 40 prod clusters uh data warehouse clusters at this time um some of them",
    "start": "89520",
    "end": "95720"
  },
  {
    "text": "are pretty big you know sort of 24 nodes 40 uh 40 terabytes of attached storage",
    "start": "95720",
    "end": "102439"
  },
  {
    "text": "uh these are these are not small so uh that's the engineering and in fact as I",
    "start": "102439",
    "end": "108079"
  },
  {
    "text": "go through here I will be talking about specifically about click house so that I know what I'm talking about but just",
    "start": "108079",
    "end": "114280"
  },
  {
    "text": "about everything we do here is generalizes to other database systems so",
    "start": "114280",
    "end": "119399"
  },
  {
    "text": "let's just talk a little bit about analytic databases and introduce click house so click house is what's called a",
    "start": "119399",
    "end": "125680"
  },
  {
    "text": "real-time analytic database and there's some kind of marketing words here that explain it but what's simpler is to",
    "start": "125680",
    "end": "132520"
  },
  {
    "text": "explain what it does imagine a security event and Incident Management System it",
    "start": "132520",
    "end": "138400"
  },
  {
    "text": "could be a multi-tenant system say run by some big company like Cisco it could be",
    "start": "138400",
    "end": "143920"
  },
  {
    "text": "reading tens of millions of events per second that are based on you know data",
    "start": "143920",
    "end": "150360"
  },
  {
    "text": "from various types of sources and looking for trouble people breaking into systems uh you know calls to servers DNS",
    "start": "150360",
    "end": "158400"
  },
  {
    "text": "uh requests to servers that are uh you know are known malware sources things like that so very high rates of ingest",
    "start": "158400",
    "end": "165440"
  },
  {
    "text": "you also want to be able to react to things that happen quickly if somebody does start making those DNS requests you",
    "start": "165440",
    "end": "171440"
  },
  {
    "text": "want to know about it moreover you want to be able to go through the whole history that led up to that event so",
    "start": "171440",
    "end": "177360"
  },
  {
    "text": "being able to you know for for example be able to scan over billions or even",
    "start": "177360",
    "end": "182400"
  },
  {
    "text": "trillions of rows trillions of rows to find out what's going on in zero in on the cause this is the kind of problem",
    "start": "182400",
    "end": "189159"
  },
  {
    "text": "that databases like click house solve very well so what's the architecture to do",
    "start": "189159",
    "end": "195640"
  },
  {
    "text": "this so this is a database that is optimized for reading large amounts of data very fast so there's a number of",
    "start": "195640",
    "end": "203400"
  },
  {
    "text": "features here I'll just highlight some of the key things uh it uses columnar storage that's not really relevant",
    "start": "203400",
    "end": "210439"
  },
  {
    "text": "um when we when we think about the underlying dis or or SSD that represents it but that's a fundamental part of it",
    "start": "210439",
    "end": "217120"
  },
  {
    "text": "um in modern analytic systems uh we of course we tend to have block storage uh",
    "start": "217120",
    "end": "223400"
  },
  {
    "text": "you know using Cloud block storage for example we'll talk about that quite a bit or SSD and also increasingly you see",
    "start": "223400",
    "end": "230239"
  },
  {
    "text": "uh S3 or S3 compatible object storage used as backing stores for the tables",
    "start": "230239",
    "end": "236319"
  },
  {
    "text": "sometimes for the source data itself we won't talk about that so much in this uh",
    "start": "236319",
    "end": "242159"
  },
  {
    "text": "presentation uh databases like click house are complex distributed systems so",
    "start": "242159",
    "end": "247319"
  },
  {
    "text": "this just shows two nodes but uh and with replication between them so that'",
    "start": "247319",
    "end": "252519"
  },
  {
    "text": "be one Shard of data two replicas but they could have 10 shards of data three uh three replicas each these are quite",
    "start": "252519",
    "end": "258759"
  },
  {
    "text": "large systems that communicate through networks so that's the architecture",
    "start": "258759",
    "end": "264680"
  },
  {
    "text": "we're going to be putting this onto kubernetes and then figuring out how to make it access storage efficiently",
    "start": "264680",
    "end": "271039"
  },
  {
    "text": "so the first thing I'll talk about is mapping that database to kubernetes and",
    "start": "271039",
    "end": "276199"
  },
  {
    "text": "since this is kubernetes and it is a database of course we're going to start by writing an operator so when we",
    "start": "276199",
    "end": "283759"
  },
  {
    "text": "started this back in 2019 operators were not that common um it was I don't know",
    "start": "283759",
    "end": "289160"
  },
  {
    "text": "when the model officially uh you know sort of joined kubernetes but it was not long before that but basically an",
    "start": "289160",
    "end": "295520"
  },
  {
    "text": "operator if you haven't used one before allows you to Define new types of",
    "start": "295520",
    "end": "300600"
  },
  {
    "text": "resources uh we call this a custom resource definition and then Supply the operator which is a special kind of",
    "start": "300600",
    "end": "306960"
  },
  {
    "text": "controller which can basically carry out operations to make that resource",
    "start": "306960",
    "end": "312840"
  },
  {
    "text": "definition become reality and the thing that's really cool about them is that the the resource definition allows you",
    "start": "312840",
    "end": "319160"
  },
  {
    "text": "to take a complex system like click house like Druid uh like Cassandra and",
    "start": "319160",
    "end": "324520"
  },
  {
    "text": "reduce it to maybe 2 feet of yaml which you can then you know kind of uh reason",
    "start": "324520",
    "end": "330000"
  },
  {
    "text": "about change easily and what the operator does is when it sees one of these yaml files come up it goes out and",
    "start": "330000",
    "end": "336039"
  },
  {
    "text": "looks at the corresponding resources that should be there in kubernetes to make it reality if they're not there it",
    "start": "336039",
    "end": "342520"
  },
  {
    "text": "creates them if they are there but different it changes them that process is called reconciliation where you're",
    "start": "342520",
    "end": "348400"
  },
  {
    "text": "looking at looking at what the you know the desired definition desired state of the world is the resources and you make",
    "start": "348400",
    "end": "354479"
  },
  {
    "text": "it happen so the first design question that",
    "start": "354479",
    "end": "359680"
  },
  {
    "text": "we had which was relevant to storage was how to even represent uh a database like click house",
    "start": "359680",
    "end": "367720"
  },
  {
    "text": "in kubernetes resources and I think how many people here are familiar with stateful",
    "start": "367720",
    "end": "372880"
  },
  {
    "text": "sets everybody yes uh so stateful sets um are the the sort of standard abstract",
    "start": "372880",
    "end": "380680"
  },
  {
    "text": "you know low-level abstraction in kubernetes for dealing with data they have a notion of a you know a fixed name",
    "start": "380680",
    "end": "387680"
  },
  {
    "text": "for the uh for each replica and then logic to make sure that you can connect that replica to storage um and",
    "start": "387680",
    "end": "395240"
  },
  {
    "text": "if the replica restarts reconnect it stuff like that so the question is if you you know just starting with a simple",
    "start": "395240",
    "end": "401000"
  },
  {
    "text": "example like this where we have a database running in a container and some stories that we want to talk to it what's the right representation to",
    "start": "401000",
    "end": "407759"
  },
  {
    "text": "actually result you know down on some worker node you know having a process is talking to uh th and block storage so um",
    "start": "407759",
    "end": "417479"
  },
  {
    "text": "what we ended up choosing was to use stateful sets uh as I'll describe there",
    "start": "417479",
    "end": "422919"
  },
  {
    "text": "are some limitations to them but what you see here is a stateful set um it",
    "start": "422919",
    "end": "428080"
  },
  {
    "text": "defines a pod that represents in our case a couple of containers that that manage the data or manage the database",
    "start": "428080",
    "end": "435599"
  },
  {
    "text": "and it has a persistent volume claim in fact it could have a number of them uh where you know because we can we often",
    "start": "435599",
    "end": "442759"
  },
  {
    "text": "have uh things laid out with multiple uh multiple volumes uh but a persistent",
    "start": "442759",
    "end": "448039"
  },
  {
    "text": "volume talking to excuse me a persistent volume claim that then corresponds to a patch of storage represented by a PV um",
    "start": "448039",
    "end": "456400"
  },
  {
    "text": "so that's the basic abstraction but then the question is should you just lean on that for example I talked about replicas",
    "start": "456400",
    "end": "462560"
  },
  {
    "text": "should we use stateful sets to do that um and it turns out the answer is no uh",
    "start": "462560",
    "end": "467759"
  },
  {
    "text": "and this has to do not just with storage but with the way that databases work in general and the thing is in clustered",
    "start": "467759",
    "end": "475520"
  },
  {
    "text": "databases even though yes these things should all be you know these things should be cattle not pets I mean in the",
    "start": "475520",
    "end": "482360"
  },
  {
    "text": "database industry we've kind of resisted that they in fact are more pet-like than you would like uh database replicas",
    "start": "482360",
    "end": "489720"
  },
  {
    "text": "often have different resources like they could even have different differing amounts of storage different types of storage uh different distributions of",
    "start": "489720",
    "end": "496879"
  },
  {
    "text": "volumes they could have different um software versions they could be in azs a",
    "start": "496879",
    "end": "501960"
  },
  {
    "text": "very common thing in datab basis is to uh particularly clusters is to have some nodes be uh dedicated to ingested data",
    "start": "501960",
    "end": "509520"
  },
  {
    "text": "and the other ones dedicated to reads for this reason you have a very you have the potential for very asymmetric",
    "start": "509520",
    "end": "515880"
  },
  {
    "text": "architectures and as a result what we we made a design decision very early on to",
    "start": "515880",
    "end": "522959"
  },
  {
    "text": "go ahead and use stateful sets because they have a lot of good properties and they do map the Pod to the storage in a",
    "start": "522959",
    "end": "529080"
  },
  {
    "text": "fairly convenient way but we just use one stateful set per database server and",
    "start": "529080",
    "end": "535440"
  },
  {
    "text": "this doesn't seem very exciting now but you you can believe we spent like literally weeks thinking about whether",
    "start": "535440",
    "end": "540600"
  },
  {
    "text": "this is the right thing to do um and then once we did it we stuck with it so",
    "start": "540600",
    "end": "545959"
  },
  {
    "text": "that's the basic um that's the basic map and what that means is that the",
    "start": "545959",
    "end": "551240"
  },
  {
    "text": "crds and what we did further beyond that is that when we defined our crds we actually imitated the good parts",
    "start": "551240",
    "end": "559640"
  },
  {
    "text": "of stateful sets which are the Pod template that allows you to define the pods and it's very flexible you can do",
    "start": "559640",
    "end": "566480"
  },
  {
    "text": "whatever you want with the Pod definition so when you look at our crds you'll see we refer to pod templates and",
    "start": "566480",
    "end": "573839"
  },
  {
    "text": "then we also have uh staple sets have volume templates uh we have a volume",
    "start": "573839",
    "end": "579320"
  },
  {
    "text": "claim template but it used very similar syntax almost identical to a stateful",
    "start": "579320",
    "end": "585440"
  },
  {
    "text": "set what that means is you can configure the pods and the um and the volumes",
    "start": "585440",
    "end": "592360"
  },
  {
    "text": "virtually any way you want because we allow all of the um you know all of the relevant syntax so this is the top level",
    "start": "592360",
    "end": "600160"
  },
  {
    "text": "I don't show the Pod templates yet and the volume claim template because I'm going to show them in a couple slides from now but we basically in our in our",
    "start": "600160",
    "end": "608240"
  },
  {
    "text": "crd the key point is we then imitated the stuff you know and love from stateful",
    "start": "608240",
    "end": "614399"
  },
  {
    "text": "sets so I'm going to take a quick detour here because now we're going to start to talk about storage in a little bit more",
    "start": "614399",
    "end": "620839"
  },
  {
    "text": "detail and um if you were going to EB let me ask a question for the crowd if",
    "start": "620839",
    "end": "626720"
  },
  {
    "text": "you going to EBS you're doing a rewrite performance test and you were going to",
    "start": "626720",
    "end": "632440"
  },
  {
    "text": "SSD which would be faster how many people would vote SSD and let's say nvme SSD and it's locally attached how many",
    "start": "632440",
    "end": "640680"
  },
  {
    "text": "votes for SSD how about how about EBS block storage on Amazon ah one brave",
    "start": "640680",
    "end": "648320"
  },
  {
    "text": "soul you won okay let's uh so let's look at this this is and this is relevant",
    "start": "648320",
    "end": "654440"
  },
  {
    "text": "because that it uh it then leads us to some things like uh separation of storage and compute so here's the basic",
    "start": "654440",
    "end": "661200"
  },
  {
    "text": "architectures um you know for a database that's going to be talking to in this case mapped to uh uh process running an",
    "start": "661200",
    "end": "670079"
  },
  {
    "text": "I3 4X large VM which is sort of an older um Amazon VM that has attached uh nvme",
    "start": "670079",
    "end": "677160"
  },
  {
    "text": "SSD and then another volume or excuse me another VM with elastic uh block storage",
    "start": "677160",
    "end": "682560"
  },
  {
    "text": "or EBS and what's kind of interesting is when you test these guys um here's a",
    "start": "682560",
    "end": "688760"
  },
  {
    "text": "there's a popular test called click bench it's used to uh uh do benchmarks against click housee and also other",
    "start": "688760",
    "end": "695600"
  },
  {
    "text": "databases when I run this test and allow the storage to be cached in other words",
    "start": "695600",
    "end": "701959"
  },
  {
    "text": "to you know run it multiple times so that the pages are pulled into the page cache one really interesting result that",
    "start": "701959",
    "end": "707839"
  },
  {
    "text": "pops up is that that EBS uh attach the volume the VM with EBS storage is",
    "start": "707839",
    "end": "715040"
  },
  {
    "text": "universally faster has higher performance than the um than the nvme",
    "start": "715040",
    "end": "721079"
  },
  {
    "text": "this is a test where smaller is better the red line is the EBS ATT VM and it's",
    "start": "721079",
    "end": "726680"
  },
  {
    "text": "faster in every single case and so that's just one simple example of how sometimes storage behavior in database",
    "start": "726680",
    "end": "733800"
  },
  {
    "text": "is not quite what you think and in this particular case um you know we asked you know why",
    "start": "733800",
    "end": "740480"
  },
  {
    "text": "is why is it faster well it turns out since we're mostly reading out of memory is clock speed uh the the I the I3 is",
    "start": "740480",
    "end": "748160"
  },
  {
    "text": "kind of an old older Zeon it's got a clock speed that's about 2third of the",
    "start": "748160",
    "end": "753639"
  },
  {
    "text": "speed of the uh the m6i and that accounts for probably most",
    "start": "753639",
    "end": "758959"
  },
  {
    "text": "of the difference we're seeing there in these performance test results now you're thinking I came here to hear",
    "start": "758959",
    "end": "766399"
  },
  {
    "text": "something kind of obvious but what's interesting is if we test it again and even if we",
    "start": "766399",
    "end": "772199"
  },
  {
    "text": "force um you know direct IO we actually get similar results which is kind of",
    "start": "772199",
    "end": "777279"
  },
  {
    "text": "surprising this is another run of the same test and actually we have the nvme",
    "start": "777279",
    "end": "783000"
  },
  {
    "text": "direct that's the Blue Line the red line is EBS you can see they're pretty much the same not a lot of difference we even",
    "start": "783000",
    "end": "788839"
  },
  {
    "text": "threw object storage in there S3 storage that's also really fast and part of this",
    "start": "788839",
    "end": "795920"
  },
  {
    "text": "is because databases like click house are designed to dampen out the effects",
    "start": "795920",
    "end": "801560"
  },
  {
    "text": "of storage so that's important because it means we can use EBS block storage",
    "start": "801560",
    "end": "807839"
  },
  {
    "text": "for these database clusters so that's a kind of interesting finding something that again was not obvious to us when we",
    "start": "807839",
    "end": "814399"
  },
  {
    "text": "got into this but then has major consequences going forward let me just dig into one of them separation of",
    "start": "814399",
    "end": "821560"
  },
  {
    "text": "storage and compute so in modern databased systems as much as possible we",
    "start": "821560",
    "end": "827639"
  },
  {
    "text": "want to break the the bond between the storage and the compute that's applied",
    "start": "827639",
    "end": "834440"
  },
  {
    "text": "to it to do to it to do things like calculate page bounce rate rates or time",
    "start": "834440",
    "end": "839639"
  },
  {
    "text": "on page or um you know sort of histograms things like that these are relatively compute intensive and",
    "start": "839639",
    "end": "846399"
  },
  {
    "text": "depending on how often you do them you might want to have powerful VMS and or you might want to have weak VMS because",
    "start": "846399",
    "end": "852279"
  },
  {
    "text": "there's a huge cost difference and what's cool about kubernetes is if you use block storage in the cloud you",
    "start": "852279",
    "end": "860360"
  },
  {
    "text": "basically get separation of compute and storage for free and so we lean pretty",
    "start": "860360",
    "end": "866000"
  },
  {
    "text": "heavily on this um so this is some people will say oh that's just vertical",
    "start": "866000",
    "end": "871440"
  },
  {
    "text": "uh you know it's just vertical scaling of database nodes but the fact is it works and it means that you can choose",
    "start": "871440",
    "end": "877959"
  },
  {
    "text": "by choosing the node size the most expensive part of many of these database uh systems becomes variable so here's a",
    "start": "877959",
    "end": "884720"
  },
  {
    "text": "simple example what we do and this is actually really important is we in a databases tend to like having a VM to",
    "start": "884720",
    "end": "891839"
  },
  {
    "text": "themselves because they like for example they make assumptions that they own the entire page cache and that they have",
    "start": "891839",
    "end": "898079"
  },
  {
    "text": "access to all Ram that they can see on the machine when you're running in kubernetes kubernetes does not hide the",
    "start": "898079",
    "end": "903600"
  },
  {
    "text": "fact that if you're in a container kubernetes doesn't hide the fact that you may have 16 gigs of RAM everybody",
    "start": "903600",
    "end": "909120"
  },
  {
    "text": "can see that so somebody has an assumption that I'm going to use 16 I'm going to use 90% of that and you have a",
    "start": "909120",
    "end": "916440"
  },
  {
    "text": "couple of them running they will contend with each other so we run them on um",
    "start": "916440",
    "end": "921560"
  },
  {
    "text": "each on a VM and then of course we have the attached storage uh which we're going to raise as as they need more data",
    "start": "921560",
    "end": "928360"
  },
  {
    "text": "so so how do we do that well that just kind of you know if you know how um",
    "start": "928360",
    "end": "933440"
  },
  {
    "text": "compute and storage are allocated um here's an example we set up the VM set",
    "start": "933440",
    "end": "939639"
  },
  {
    "text": "up the kubernetes Clusters and first of all for the VMS we'll use a provisioner in our production systems we typically",
    "start": "939639",
    "end": "945959"
  },
  {
    "text": "use node groups um our our cloud guys like them better personally I use",
    "start": "945959",
    "end": "951639"
  },
  {
    "text": "Carpenter because it's it's very flexible and you install it once and it works for all VM types but the other",
    "start": "951639",
    "end": "957800"
  },
  {
    "text": "thing that's important for storage is that of course you have the in in modern",
    "start": "957800",
    "end": "962839"
  },
  {
    "text": "kubernetes particularly managed kubernetes use a CSI driver which then has a connects to a provisioner that can",
    "start": "962839",
    "end": "969800"
  },
  {
    "text": "allocate EBS what you actually get allocated the properties of what gets allocated are controlled by the storage",
    "start": "969800",
    "end": "976279"
  },
  {
    "text": "class so the storage class will will say things like oh it's gp3 storage on",
    "start": "976279",
    "end": "982279"
  },
  {
    "text": "Amazon uh EBS um and you can set the number of iops you can set the throughput up to a a gigabyte per second",
    "start": "982279",
    "end": "990440"
  },
  {
    "text": "so on and so forth so this is how storage gets allocated and if you set",
    "start": "990440",
    "end": "995519"
  },
  {
    "text": "this up properly it then becomes very easy within an operator like ours to use",
    "start": "995519",
    "end": "1002800"
  },
  {
    "text": "this this well-known label uh the instance type and just say hey you know give us M5 uh give us m5. large so um",
    "start": "1002800",
    "end": "1013440"
  },
  {
    "text": "this doesn't again is not very profound but it has uh incredible effects for",
    "start": "1013440",
    "end": "1018759"
  },
  {
    "text": "databases because it allows us this could be a very large cluster like it could have storage that you know holds a",
    "start": "1018759",
    "end": "1025079"
  },
  {
    "text": "trillion rows of data when I'm developing I'll run on this instance type and then what I'll do is I'll flip",
    "start": "1025079",
    "end": "1031558"
  },
  {
    "text": "it to like an m6i 8X large when I want to do performance testing I just make",
    "start": "1031559",
    "end": "1037438"
  },
  {
    "text": "that change and the operator will take care of basically um reallocating the",
    "start": "1037439",
    "end": "1044520"
  },
  {
    "text": "Pod with a new definition and uh boom in the background old VM drops new VM is uh",
    "start": "1044520",
    "end": "1051440"
  },
  {
    "text": "comes up and it now has extra compute horsepower applied to storage so this is",
    "start": "1051440",
    "end": "1056960"
  },
  {
    "text": "this is really really nice and kubernetes it just falls out of the box I'm making this simple because normally",
    "start": "1056960",
    "end": "1063160"
  },
  {
    "text": "I would do some other things like I have the node selector and you can see I've got a a selector for zones to put it in",
    "start": "1063160",
    "end": "1069679"
  },
  {
    "text": "a particular availability zones I would also do things like add anti-affinity so",
    "start": "1069679",
    "end": "1075200"
  },
  {
    "text": "that I'm not going to have two click house servers trying to be on the same",
    "start": "1075200",
    "end": "1080440"
  },
  {
    "text": "VM at the same time I would probably also in a heterogeneous system I would",
    "start": "1080440",
    "end": "1086039"
  },
  {
    "text": "probably add um you know taints and and tolerations so that I could make sure",
    "start": "1086039",
    "end": "1091799"
  },
  {
    "text": "I'm also not contending with other services that aren't click housee but this is all very very easy to do and",
    "start": "1091799",
    "end": "1097400"
  },
  {
    "text": "it's just a few inches of yaml so um and then the volume claim",
    "start": "1097400",
    "end": "1103640"
  },
  {
    "text": "templates which are the other part are equally easy so we can just pick the storage type name um you can what's you",
    "start": "1103640",
    "end": "1110880"
  },
  {
    "text": "know if you're just playing around you don't have to include a storage a storage class but um in this case I want",
    "start": "1110880",
    "end": "1116880"
  },
  {
    "text": "to be sure I'm getting gp3 because this is good storage very performant I want it to be encrypted and then there's the",
    "start": "1116880",
    "end": "1123440"
  },
  {
    "text": "size um that's again all I have to do to allocate storage moreover um let's see",
    "start": "1123440",
    "end": "1129960"
  },
  {
    "text": "if I have the I'll get to this in a second um the I can now extend this",
    "start": "1129960",
    "end": "1135640"
  },
  {
    "text": "storage while the system is running and I'll talk about that in in just a minute so again this is this is kind of cool",
    "start": "1135640",
    "end": "1142679"
  },
  {
    "text": "because these are things that are actually essential to making these large analytic systems work efficiently",
    "start": "1142679",
    "end": "1148200"
  },
  {
    "text": "particularly cost efficiently and they just fall out of running on kubernetes there's we do we do have users that are",
    "start": "1148200",
    "end": "1155760"
  },
  {
    "text": "still doing this through anible on VMS and believe me every time every time I work with one of those folks I get a",
    "start": "1155760",
    "end": "1162000"
  },
  {
    "text": "syncing feeling because we're going to have to help them get their anable scripts you know fixed so that they can",
    "start": "1162000",
    "end": "1169080"
  },
  {
    "text": "deallocate VMS and then remount them you know on the new VM when it comes up make",
    "start": "1169080",
    "end": "1174360"
  },
  {
    "text": "sure everything gets properly installed make sure all the mounts come up it's it's a total pain and kubernetes just",
    "start": "1174360",
    "end": "1179880"
  },
  {
    "text": "makes it happen easily so with that we can now map the",
    "start": "1179880",
    "end": "1185760"
  },
  {
    "text": "servers as I've said precisely to the VMS in storage and as I said before you",
    "start": "1185760",
    "end": "1191200"
  },
  {
    "text": "know if I want to change it I just change that value resubmit the uh the yaml and it happens automatically",
    "start": "1191200",
    "end": "1200240"
  },
  {
    "text": "so there's another cool thing I mean it's just like these all these little tricks and they another really cool",
    "start": "1200400",
    "end": "1206000"
  },
  {
    "text": "thing that drops out of this is because we're using the stateful set do you guys know this trick about dialing the",
    "start": "1206000",
    "end": "1211960"
  },
  {
    "text": "replicas the zero anybody do this okay if you have a stateful set it has a it",
    "start": "1211960",
    "end": "1218760"
  },
  {
    "text": "has this setting here number of replicas and that's the number of PODS that get started Each of which is attached to",
    "start": "1218760",
    "end": "1224960"
  },
  {
    "text": "storage in our case it's normally one and it was that way for a while and then",
    "start": "1224960",
    "end": "1230159"
  },
  {
    "text": "we discovered this trick that if we wanted to just shut the Pod off like hey",
    "start": "1230159",
    "end": "1235520"
  },
  {
    "text": "um you know I've got storage but you know I'm developing I'm working 9 to5 and I'm going home now let's just turn",
    "start": "1235520",
    "end": "1241440"
  },
  {
    "text": "this thing off you can just dial it down to zero and at that point what kubernetes will do is it'll just shut",
    "start": "1241440",
    "end": "1246840"
  },
  {
    "text": "the Pod down but it'll keep the storage alive so this is ideal so we use this to",
    "start": "1246840",
    "end": "1252760"
  },
  {
    "text": "um to implement what we call uptime schedules these are similar to what snowflake does if you've ever used",
    "start": "1252760",
    "end": "1258679"
  },
  {
    "text": "snowflake datab data warehouse you can have a schedule to run your virtual data warehouse you can also do this in",
    "start": "1258679",
    "end": "1264840"
  },
  {
    "text": "kubernetes very very easily that's important because actually what we're doing with this open- Source database",
    "start": "1264840",
    "end": "1272000"
  },
  {
    "text": "and kubernetes with the operator we're actually helping people our part of our goal here is to help people build",
    "start": "1272000",
    "end": "1279600"
  },
  {
    "text": "proprietary or or sort of custom equivalent of snowflake that solve particular problems and kubernetes makes",
    "start": "1279600",
    "end": "1286279"
  },
  {
    "text": "this work very very well we also I mean you can just go patch the the the uh",
    "start": "1286279",
    "end": "1291840"
  },
  {
    "text": "replica set and do that but to make this convenient we actually add added something to the yaml that we consume in",
    "start": "1291840",
    "end": "1298159"
  },
  {
    "text": "the crd so we just say stop equals yes that turns off the compute and then you can go home and you don't run up a Big",
    "start": "1298159",
    "end": "1307080"
  },
  {
    "text": "Bill so and that's the effect you'll just run it and basically what will happen your stateful set is still there",
    "start": "1307640",
    "end": "1314320"
  },
  {
    "text": "your persistent volume claim is there but the pods they just vaporize until you turn them back on",
    "start": "1314320",
    "end": "1322960"
  },
  {
    "text": "again so but we're not done there's still more tricks and we got 12 minutes",
    "start": "1323679",
    "end": "1329200"
  },
  {
    "text": "um so that was we were feeling pretty good about this but actually gp3 when it",
    "start": "1329200",
    "end": "1335159"
  },
  {
    "text": "came along how many people are familiar with the difference between how many people use EBS so elastic block Storch okay about",
    "start": "1335159",
    "end": "1342400"
  },
  {
    "text": "half of you what do you the rest of you on Google or aure okay I I see somebody noing when I",
    "start": "1342400",
    "end": "1348520"
  },
  {
    "text": "said a your uh yeah so um gp3 is one of these things where you",
    "start": "1348520",
    "end": "1355320"
  },
  {
    "text": "wouldn't think this would be a big deal but people were probably lifting beers in um it's really good block storage",
    "start": "1355320",
    "end": "1361760"
  },
  {
    "text": "it's way better than the previous generation of elastic block storage which is gp2 um includes things like the",
    "start": "1361760",
    "end": "1368159"
  },
  {
    "text": "ability to set the actual throughput that you can dial it up and down so you don't have used to be that EBS had these",
    "start": "1368159",
    "end": "1374799"
  },
  {
    "text": "kind of weird um you know sort of uh weird rules where um for example in",
    "start": "1374799",
    "end": "1380880"
  },
  {
    "text": "order to get adequate throughput we would end up stacking uh EBS volumes so",
    "start": "1380880",
    "end": "1386840"
  },
  {
    "text": "you know because it would for every volume you added to the to the VM it would give you you know more bandwidth we don't have to do that anymore the",
    "start": "1386840",
    "end": "1392960"
  },
  {
    "text": "throughput is is uh you can just dial it up and down up to a th000 mega uh megabytes per second you can set the",
    "start": "1392960",
    "end": "1399760"
  },
  {
    "text": "iops um and there's also um allowing volume expansion I believe that one existed in gp2 already in fact I'm",
    "start": "1399760",
    "end": "1407400"
  },
  {
    "text": "pretty conf it did but the interesting thing is these can be set in the storage class now so this is the storage class",
    "start": "1407400",
    "end": "1414159"
  },
  {
    "text": "and this is the definition of the storage the class of service of the storage that you're going to get when",
    "start": "1414159",
    "end": "1420799"
  },
  {
    "text": "you refer to this gp3 um encrypted there just one problem that is that these",
    "start": "1420799",
    "end": "1427559"
  },
  {
    "text": "parameters particular those that list of parameters right there you cannot change them once they're set because CSI",
    "start": "1427559",
    "end": "1435039"
  },
  {
    "text": "drivers that the the CSI interface doesn't know about these things and there's no way to get them from inside",
    "start": "1435039",
    "end": "1441880"
  },
  {
    "text": "kubernetes out to Amazon where they can get changed and actually do you some good and people do change this stuff I",
    "start": "1441880",
    "end": "1448720"
  },
  {
    "text": "mean we have people who will allocate you know sort of the lowest level storage performance and then they discover things are slow they want to",
    "start": "1448720",
    "end": "1455679"
  },
  {
    "text": "change it so we need to give them a way to do that so what we want to do effectively",
    "start": "1455679",
    "end": "1461960"
  },
  {
    "text": "is have a simple way of changing these parameters on demand and so what we did",
    "start": "1461960",
    "end": "1469360"
  },
  {
    "text": "was we applied a kind of idiomatic pattern to uh use for from kubernetes which is to",
    "start": "1469360",
    "end": "1477320"
  },
  {
    "text": "build a controller for it and so what we do when we make our persistent volume claims now is we add a um special labels",
    "start": "1477320",
    "end": "1486640"
  },
  {
    "text": "or special annotations I should say and this is an annotation you can see it has our name alinity doom on it it it says",
    "start": "1486640",
    "end": "1493200"
  },
  {
    "text": "throughput 1000 this is a request on the persistent volume claim",
    "start": "1493200",
    "end": "1498360"
  },
  {
    "text": "to go make this have higher throughput um kubernetes doesn't really know what this does kubernetes you know",
    "start": "1498360",
    "end": "1504679"
  },
  {
    "text": "annotations you can do practically anything you want um so kubernetes ignores this but our controller that we",
    "start": "1504679",
    "end": "1513080"
  },
  {
    "text": "built does not so we have a controller called the EBS pams controller and what",
    "start": "1513080",
    "end": "1518480"
  },
  {
    "text": "it does and this is kind of an expansion of the model I showed a couple slides back is we have the persistent volume",
    "start": "1518480",
    "end": "1524320"
  },
  {
    "text": "claim it points to a storage class that storage class then is the the EBS uh the",
    "start": "1524320",
    "end": "1530320"
  },
  {
    "text": "CSI driver sees that and it actually creates the volumes that's you know that gets you the initial volume but what we",
    "start": "1530320",
    "end": "1537799"
  },
  {
    "text": "have is the we also have these annotations which are on the claim the EBS params controller is watching and",
    "start": "1537799",
    "end": "1544480"
  },
  {
    "text": "every time one of these claims changes it will go out and it'll actually it'll take the the annotations it finds and",
    "start": "1544480",
    "end": "1551080"
  },
  {
    "text": "it'll actually apply them to the EBS service directly so that we can now make",
    "start": "1551080",
    "end": "1556399"
  },
  {
    "text": "these changes to um you know two elastic block storage",
    "start": "1556399",
    "end": "1561440"
  },
  {
    "text": "very simply from within kubernetes it gets better so um not only",
    "start": "1561440",
    "end": "1568559"
  },
  {
    "text": "do we change the values and this is totally simple I mean it wasn't really it's the I think the the controller is",
    "start": "1568559",
    "end": "1575520"
  },
  {
    "text": "about this much go code it's really pretty really pretty small one other interesting thing it does is it reads",
    "start": "1575520",
    "end": "1582120"
  },
  {
    "text": "the current properties back from the storage from the volume and this is turn",
    "start": "1582120",
    "end": "1587799"
  },
  {
    "text": "out to be exceedingly useful because if you want to make changes to EBS volumes you can only do them like expand it for",
    "start": "1587799",
    "end": "1594679"
  },
  {
    "text": "example you can only do it once every six hours uh so one of the things we do",
    "start": "1594679",
    "end": "1599799"
  },
  {
    "text": "is collect the the um the the state of the the current mod you know is it completed or not when did it start when",
    "start": "1599799",
    "end": "1606480"
  },
  {
    "text": "did it end and this allows us for management purposes again from within kubernetes to keep track of what's going",
    "start": "1606480",
    "end": "1612840"
  },
  {
    "text": "on out there in in Cloudland um and uh",
    "start": "1612840",
    "end": "1618159"
  },
  {
    "text": "you know and sort of manage it correctly so um I've used Amazon",
    "start": "1618159",
    "end": "1624559"
  },
  {
    "text": "examples throughout here but this um controller we're actually going to be using we're we're now certifying aure we",
    "start": "1624559",
    "end": "1630840"
  },
  {
    "text": "have users actually already on it but we're certifying this controller to to do the same thing Azure it turns out",
    "start": "1630840",
    "end": "1636520"
  },
  {
    "text": "that Azure has similar um uh has a similar need to control",
    "start": "1636520",
    "end": "1641720"
  },
  {
    "text": "storage so this is kind of a cool trick um one of the things that follow",
    "start": "1641720",
    "end": "1647840"
  },
  {
    "text": "from it is that every now and then we have users who say hey you know I've got 24 volumes I need them changed fast uh",
    "start": "1647840",
    "end": "1656000"
  },
  {
    "text": "well you can now just by applying these labels this is a cube cuddle uh annotate command we can apply that annotation",
    "start": "1656000",
    "end": "1663960"
  },
  {
    "text": "sort of Lock Stock and Barrel to for example all of the all of the persistent",
    "start": "1663960",
    "end": "1670080"
  },
  {
    "text": "volume claims that are um have the label my my- click house and so we can apply",
    "start": "1670080",
    "end": "1676640"
  },
  {
    "text": "this to all of them at once so this is a very uh very useful if we need to do",
    "start": "1676640",
    "end": "1681679"
  },
  {
    "text": "something quickly otherwise um you know we would have to go and um you know sort",
    "start": "1681679",
    "end": "1688600"
  },
  {
    "text": "of uh do this in a much much more combersome way so we can just get it applied",
    "start": "1688600",
    "end": "1694679"
  },
  {
    "text": "instantly okay so um how we making good time here so there's a final trick and",
    "start": "1695799",
    "end": "1702320"
  },
  {
    "text": "um this is kind of interesting one of the one of the great things in addition to the fact you can re hat block storage",
    "start": "1702320",
    "end": "1708919"
  },
  {
    "text": "one of the other cool things about it is that in in Amazon in Google in Azure you",
    "start": "1708919",
    "end": "1714399"
  },
  {
    "text": "can also extend its size on a live system and that's totally cool because",
    "start": "1714399",
    "end": "1720480"
  },
  {
    "text": "the most common configuration problem that we have a resource problem we have in data warehouses is people are",
    "start": "1720480",
    "end": "1726720"
  },
  {
    "text": "ingesting more data and they go up you know they get 70% you know if they dis allocated 75 80",
    "start": "1726720",
    "end": "1734640"
  },
  {
    "text": "85 around the time it hits 90 then we're starting to get nervous because they could run out of storage and then things",
    "start": "1734640",
    "end": "1741000"
  },
  {
    "text": "will stop they will call us they will be mad we will be uh won't be happy",
    "start": "1741000",
    "end": "1746679"
  },
  {
    "text": "so so what you can do is of course you can fix this in like if you're just",
    "start": "1746679",
    "end": "1752559"
  },
  {
    "text": "using a stateful set you can go ahead and fix this by changing the storage",
    "start": "1752559",
    "end": "1758159"
  },
  {
    "text": "allocation in the volume claim template and that is fine because it actually",
    "start": "1758159",
    "end": "1764120"
  },
  {
    "text": "gets the job done but there's a problem and and in stateful sets when you do it",
    "start": "1764120",
    "end": "1770159"
  },
  {
    "text": "that way what it's going to do is it's going to alter your pod definition and it's going to cause the",
    "start": "1770159",
    "end": "1776960"
  },
  {
    "text": "Pod to restart and that's bad because um why is",
    "start": "1776960",
    "end": "1782279"
  },
  {
    "text": "it bad well it could be really slow data warehouses when they open up in fact",
    "start": "1782279",
    "end": "1787840"
  },
  {
    "text": "databases in general tend to have to do things like go have a look at all the files that that they're processing they",
    "start": "1787840",
    "end": "1793799"
  },
  {
    "text": "may need to rebuild caches things like that that's slow you really really don't want to restart a database so one of the",
    "start": "1793799",
    "end": "1800159"
  },
  {
    "text": "things that we recently added uh back in May is we've actually taken the",
    "start": "1800159",
    "end": "1805640"
  },
  {
    "text": "responsibility we give users the option of taking the responsibility for managing storage away from the stateful",
    "start": "1805640",
    "end": "1812720"
  },
  {
    "text": "set and we just do it for them and so what happens is this option right here",
    "start": "1812720",
    "end": "1818720"
  },
  {
    "text": "says Hey the operator is going to manage the storage for you um we remove the",
    "start": "1818720",
    "end": "1823760"
  },
  {
    "text": "template for it from the stateful set that we generate and we do it in the background and as a result these",
    "start": "1823760",
    "end": "1830279"
  },
  {
    "text": "operations can can be taken without forcing the pods to",
    "start": "1830279",
    "end": "1835880"
  },
  {
    "text": "restart so that's the tricks that we've learned so far I think there are others but",
    "start": "1835880",
    "end": "1842039"
  },
  {
    "text": "these were the uh these were the the main ones um let me just give a few",
    "start": "1842039",
    "end": "1848080"
  },
  {
    "text": "final words I think we're right on time here um so learnings kubernetes is great",
    "start": "1848080",
    "end": "1854200"
  },
  {
    "text": "for running databases I want to emphasize that and operators are are probably the biggest single uh reason",
    "start": "1854200",
    "end": "1861039"
  },
  {
    "text": "for the for the greatness but the kuet I I think another sort of secret power or",
    "start": "1861039",
    "end": "1866080"
  },
  {
    "text": "not so secret power of kubernetes is this it does work portably across many environments we operate in multiple",
    "start": "1866080",
    "end": "1872840"
  },
  {
    "text": "clouds our users want the ability to run these clusters everything from you know",
    "start": "1872840",
    "end": "1878159"
  },
  {
    "text": "mini Cube on a laptop all the way up to to uh to C to you know clusters with you",
    "start": "1878159",
    "end": "1884080"
  },
  {
    "text": "know dozens or even hundreds of nodes in the cloud kubernetes does that and so",
    "start": "1884080",
    "end": "1889240"
  },
  {
    "text": "the thing that the things that that we sort of got out of this experience are first of all build on the existing",
    "start": "1889240",
    "end": "1894720"
  },
  {
    "text": "kubernetes uh resources wherever possible we went with stateful sets I",
    "start": "1894720",
    "end": "1900320"
  },
  {
    "text": "think in the end we're sort in the end we're sort of taking things out of stateful sets and we're at a point where",
    "start": "1900320",
    "end": "1906399"
  },
  {
    "text": "you might say hey maybe we should have just had a different you know just implemented our own control or our own",
    "start": "1906399",
    "end": "1912159"
  },
  {
    "text": "uh specific resource for this other operators have taken that but we went with what was there and that had the",
    "start": "1912159",
    "end": "1918440"
  },
  {
    "text": "advantage of making it pretty flexible and easy to understand um performance is",
    "start": "1918440",
    "end": "1924600"
  },
  {
    "text": "important there is no cost that we know of to using to running things in",
    "start": "1924600",
    "end": "1930960"
  },
  {
    "text": "kubernetes as far as performance is concerned um this was something we were",
    "start": "1930960",
    "end": "1936000"
  },
  {
    "text": "I I should have mentioned this earlier we had concerns that somehow kubernetes you know maybe because it's using",
    "start": "1936000",
    "end": "1941440"
  },
  {
    "text": "overlay networks or something like that that it would affect performance it does not and certainly it has no impact on a",
    "start": "1941440",
    "end": "1948159"
  },
  {
    "text": "process talking to storage because and and in the end that's all that kubernetes is managing um there's it",
    "start": "1948159",
    "end": "1955120"
  },
  {
    "text": "doesn't insert anything in the way but you definitely want to test performance carefully because how performance",
    "start": "1955120",
    "end": "1961000"
  },
  {
    "text": "behaves with a particular application like a database may be very dependent on",
    "start": "1961000",
    "end": "1966559"
  },
  {
    "text": "on the use case and the way you're accessing it this uh kubernetes plus Cloud block",
    "start": "1966559",
    "end": "1972080"
  },
  {
    "text": "storage that gives you separation of of of compute and storage that is such an important proper property for large",
    "start": "1972080",
    "end": "1978399"
  },
  {
    "text": "systems uh the ability to scale the compute which is often the most costly",
    "start": "1978399",
    "end": "1983880"
  },
  {
    "text": "part of these systems to scale it up and down efficiently um and using an operator to do so without taking apps",
    "start": "1983880",
    "end": "1990200"
  },
  {
    "text": "out by using rolling rolling upgrades that's that's a really wonderful feature and actually it's been one of the things",
    "start": "1990200",
    "end": "1996240"
  },
  {
    "text": "that's allowed us to build a business on this and then there's just storage of course is complex there are these extra",
    "start": "1996240",
    "end": "2003679"
  },
  {
    "text": "parameters there are these these tricks you have to you know things that you want to avoid like restarts fortunately",
    "start": "2003679",
    "end": "2009919"
  },
  {
    "text": "there's idiomatic ways to get around these within kubernetes it's a very flexible model I think this the",
    "start": "2009919",
    "end": "2016320"
  },
  {
    "text": "controller pattern that idiom of using controllers with um you know that look",
    "start": "2016320",
    "end": "2021919"
  },
  {
    "text": "for special labels is a very powerful one and can enable you to sort of hack around excuse me to engineer around uh",
    "start": "2021919",
    "end": "2029000"
  },
  {
    "text": "limitations in apis so where are we going next um I",
    "start": "2029000",
    "end": "2034480"
  },
  {
    "text": "mean the current stuff we've got works pretty well uh there's there's two things we're looking at first is object storage I haven't talked about it much",
    "start": "2034480",
    "end": "2040880"
  },
  {
    "text": "in this talk and it actually isn't isn't really something that kubernetes has",
    "start": "2040880",
    "end": "2047480"
  },
  {
    "text": "that much to say about because object storage like S3 is just another application service runs on the same",
    "start": "2047480",
    "end": "2053280"
  },
  {
    "text": "network as your applications are using to communicate but it does have some",
    "start": "2053280",
    "end": "2058560"
  },
  {
    "text": "interesting storage implications because object storage does require NV it does require caches to use it efficiently you",
    "start": "2058560",
    "end": "2065520"
  },
  {
    "text": "don't want to typically you do not want to read everything from object storage you'd rather you know if you're",
    "start": "2065520",
    "end": "2070679"
  },
  {
    "text": "repeating queries suck it over um you know put it on Fast storage locally and then process the blocks there so we will",
    "start": "2070679",
    "end": "2078118"
  },
  {
    "text": "be coming back to nvme SSD that will be more prominent in our architectures and this is why um the other thing is we'll",
    "start": "2078119",
    "end": "2085960"
  },
  {
    "text": "probably be we we're backup is a big issue in all databases in data",
    "start": "2085960",
    "end": "2092480"
  },
  {
    "text": "warehouses it's kind of a interesting problem because",
    "start": "2092480",
    "end": "2097520"
  },
  {
    "text": "data warehouses often have such huge volumes of data that maybe you just don't bother to back them up it just",
    "start": "2097520",
    "end": "2104000"
  },
  {
    "text": "adds so much cost to your system maybe what you do is recreate stuff from Source data if you have it but we are",
    "start": "2104000",
    "end": "2110760"
  },
  {
    "text": "definitely very interested in dis snapshots or volume snapshots which are available in kubernetes other operators",
    "start": "2110760",
    "end": "2117359"
  },
  {
    "text": "have applied them very successfully so that may be another place sort of a new uh place that we're going in terms of uh",
    "start": "2117359",
    "end": "2124240"
  },
  {
    "text": "volume management some references by the way these slides",
    "start": "2124240",
    "end": "2129599"
  },
  {
    "text": "are are up um on sced um I want to give special thanks I you know I mostly work",
    "start": "2129599",
    "end": "2136240"
  },
  {
    "text": "with spreadsheets and SQL and stuff like that Alexander ZF is our CTO Vlad clco is the engineer that wrote the operator",
    "start": "2136240",
    "end": "2143560"
  },
  {
    "text": "these guys are great engineers and have figured out they and other people on the cloud team uh are the ones who really",
    "start": "2143560",
    "end": "2149560"
  },
  {
    "text": "figured out these ideas and that's it thank you very",
    "start": "2149560",
    "end": "2155800"
  },
  {
    "text": "much [Applause] and we don't have another talk so if you",
    "start": "2155800",
    "end": "2162160"
  },
  {
    "text": "want to ask questions you can just step up to the mic uh or you can uh and we",
    "start": "2162160",
    "end": "2167640"
  },
  {
    "text": "can go outside after a while but I'd be happy to take stay around and take questions please go ahead yeah my",
    "start": "2167640",
    "end": "2173359"
  },
  {
    "text": "question is with the use of uh EBS or blog storage how do you deal with challenges around multis Zone support",
    "start": "2173359",
    "end": "2179839"
  },
  {
    "text": "and dealing with fail over at least I heard EBS will be multizone in the",
    "start": "2179839",
    "end": "2184880"
  },
  {
    "text": "future but at the moment it's not well um actually on Amazon uh EBS is it's",
    "start": "2184880",
    "end": "2190160"
  },
  {
    "text": "interesting uh so Google block storage actually does have the ability to replicate to other locations um we don't",
    "start": "2190160",
    "end": "2197040"
  },
  {
    "text": "use it it turns out the click house data warehouses have are pretty good at replication themselves so we just spread",
    "start": "2197040",
    "end": "2204200"
  },
  {
    "text": "the we just use the Pod um uh definitions to force them to particular",
    "start": "2204200",
    "end": "2209920"
  },
  {
    "text": "availability zones and just make sure they're spread out evenly so we'll we'll just we can operate perfectly well over",
    "start": "2209920",
    "end": "2216040"
  },
  {
    "text": "A's thanks if I could ask one more quickly U the data the benchmarks you showed S3",
    "start": "2216040",
    "end": "2222240"
  },
  {
    "text": "was almost close to EBS which was surprising so how do you explain that I mean yeah how do we explain that well",
    "start": "2222240",
    "end": "2227440"
  },
  {
    "text": "you know what the that's a it's a really interesting result and there are two things actually to notice about that I'm going to flip back to",
    "start": "2227440",
    "end": "2233920"
  },
  {
    "text": "it uh one thing is S3 is pretty darn fast",
    "start": "2233920",
    "end": "2242040"
  },
  {
    "text": "this is something that people don't realize that like for example S3 and EBS actually compare pretty favorably and",
    "start": "2242040",
    "end": "2248160"
  },
  {
    "text": "the network performance on Amazon is very good so um so that's one of the",
    "start": "2248160",
    "end": "2253240"
  },
  {
    "text": "reasons now one thing that's interesting the yellow graph that this is something you where you actually can see a",
    "start": "2253240",
    "end": "2258960"
  },
  {
    "text": "difference all the little queries so this is a log scale so the ler queries",
    "start": "2258960",
    "end": "2264480"
  },
  {
    "text": "you tend to see a bigger gap between the S3 line on the larger queries you don't",
    "start": "2264480",
    "end": "2269839"
  },
  {
    "text": "what you're seeing there is the latency to go fetch data off S3 there is a real cost because the it's a longer hop to to",
    "start": "2269839",
    "end": "2277480"
  },
  {
    "text": "get to the S3 data and get back and you actually do see that in these test results um the other thing is that yeah",
    "start": "2277480",
    "end": "2284760"
  },
  {
    "text": "so S3 where it gets expensive is that S3 doesn't have a a buffer cache I mean you",
    "start": "2284760",
    "end": "2292040"
  },
  {
    "text": "have to put you have to write application logic to pull the data down and cach it in order to use it efficiently so there's definitely",
    "start": "2292040",
    "end": "2298520"
  },
  {
    "text": "there's no free lunch here but um this is a these are these are relatively uh",
    "start": "2298520",
    "end": "2305040"
  },
  {
    "text": "queries on relatively small amount of data I think it's about um 100 Megs or something like that and for that S3 is",
    "start": "2305040",
    "end": "2311000"
  },
  {
    "text": "very very fast one thing about S3 is",
    "start": "2311000",
    "end": "2316440"
  },
  {
    "text": "like yeah so I comment comment here yeah with S3 you get P90 outliers yes you do",
    "start": "2316920",
    "end": "2323920"
  },
  {
    "text": "and or P95 or P99 and yeah anything that runs on a network moreover S3 contends",
    "start": "2323920",
    "end": "2330560"
  },
  {
    "text": "with other stuff your application is doing on the network that's a key thing EBS I think this is this is certainly",
    "start": "2330560",
    "end": "2337240"
  },
  {
    "text": "something I didn't understand well but EBS is a sand and so there's a separate Network the EBS you will and Amazon in",
    "start": "2337240",
    "end": "2346119"
  },
  {
    "text": "particular is very good at allocating bandwidth so you won't uh you know so you don't get contention with other",
    "start": "2346119",
    "end": "2352160"
  },
  {
    "text": "things the application is",
    "start": "2352160",
    "end": "2355200"
  },
  {
    "text": "doing you want to step up to the mic and just ask that so we get are are these S3 numbers through a",
    "start": "2357560",
    "end": "2364440"
  },
  {
    "text": "VPC endpoint coming from like your VPC over Amazon's private backline or are you going we didn't do anything special",
    "start": "2364440",
    "end": "2370720"
  },
  {
    "text": "I I just set up a a VPC and I'm going straight to Amazon there's no there's no endpoint in",
    "start": "2370720",
    "end": "2376920"
  },
  {
    "text": "there yeah yeah S3 is yeah there's S3 is has a",
    "start": "2377920",
    "end": "2386280"
  },
  {
    "text": "bunch of this is why I'm not doing this talk because so yeah so this point yeah the special costs around S3 I think one",
    "start": "2386280",
    "end": "2393440"
  },
  {
    "text": "that people really underestimate this is another reason for cash is is a API calls can just you know blow you out of",
    "start": "2393440",
    "end": "2399359"
  },
  {
    "text": "the water normally people you know look at S3 and what's attractive about it is it's internally replicated you only keep",
    "start": "2399359",
    "end": "2405520"
  },
  {
    "text": "one copy you know compared to block storage where like we replicate maybe two or three ways so already that's a",
    "start": "2405520",
    "end": "2411760"
  },
  {
    "text": "huge difference in cost um but then of course you you add in the API calls and",
    "start": "2411760",
    "end": "2417400"
  },
  {
    "text": "and maybe it doesn't look so good anymore you had another question yeah yes I have a question does AL C run on",
    "start": "2417400",
    "end": "2427520"
  },
  {
    "text": "top of kubernetes by using your operator mhm yes uh can you repeat that question",
    "start": "2427520",
    "end": "2434079"
  },
  {
    "text": "please does alterity cloud run on top of",
    "start": "2434079",
    "end": "2439920"
  },
  {
    "text": "kubernetes yes Clow your autic Crow runs",
    "start": "2439920",
    "end": "2445880"
  },
  {
    "text": "on top of oh does it run on top of kubernetes oh yes I'm so sorry uh yes completely uh we are we do 100% of our",
    "start": "2445880",
    "end": "2454640"
  },
  {
    "text": "processing is on kubernetes we don't do anything we don't do anything on on Raw VMS and so if we will we want to use",
    "start": "2454640",
    "end": "2464319"
  },
  {
    "text": "authentic cloud in AWS yes and do we",
    "start": "2464319",
    "end": "2469640"
  },
  {
    "text": "need to build our clust or not all you you can if you",
    "start": "2469640",
    "end": "2476000"
  },
  {
    "text": "but only if you want to so the question is do we want to do we have to build our do we force our users to build their own",
    "start": "2476000",
    "end": "2481040"
  },
  {
    "text": "clouds No what we do is by default if you if you use our cloud and this is",
    "start": "2481040",
    "end": "2486960"
  },
  {
    "text": "there's other clouds do it the same way we will build the kubernetes in our own",
    "start": "2486960",
    "end": "2492119"
  },
  {
    "text": "account and you just get an endpoint and under the covers is kubernetes but you don't know that it's there oh what you",
    "start": "2492119",
    "end": "2497839"
  },
  {
    "text": "can do and this is I think another place where kubernetes is very powerful is because it's portable we actually have a",
    "start": "2497839",
    "end": "2504480"
  },
  {
    "text": "model where we can just you can pop a container into your your own kubernetes",
    "start": "2504480",
    "end": "2510280"
  },
  {
    "text": "and it will form a management connection a secure management connection with our Cloud management plane at that point we",
    "start": "2510280",
    "end": "2516040"
  },
  {
    "text": "can manage data warehouses in your kubernetes this is how we bring up people on Azure so we don't formally",
    "start": "2516040",
    "end": "2522359"
  },
  {
    "text": "certify Azure yet we're getting there uh or we don't run it in our own account is what I should say but we can allow",
    "start": "2522359",
    "end": "2529040"
  },
  {
    "text": "people to run it in their accounts okay thanks you're welcome yeah that's that's a great illustration of",
    "start": "2529040",
    "end": "2534960"
  },
  {
    "text": "the portability of of uh kubernetes so now that that we're here on the cubon",
    "start": "2534960",
    "end": "2540480"
  },
  {
    "text": "you mentioned all you have to do uh to go around the uh",
    "start": "2540480",
    "end": "2546760"
  },
  {
    "text": "parameters that you specify in the storage class because you cannot change the storage",
    "start": "2546760",
    "end": "2552599"
  },
  {
    "text": "class first and and and H the they they will they will ignore changes so how do",
    "start": "2552599",
    "end": "2559359"
  },
  {
    "text": "you think Um this can be modified to be able to do what you have done but",
    "start": "2559359",
    "end": "2564720"
  },
  {
    "text": "without having like uh oh you know what I would expect is and I don't know C I",
    "start": "2564720",
    "end": "2570200"
  },
  {
    "text": "don't know the CSI interface very well uh in fact I don't know it at all I I normally work in the database um but I",
    "start": "2570200",
    "end": "2576839"
  },
  {
    "text": "would expect it be some sort of custom parameters uh argument that you could pass in so that you could in fact",
    "start": "2576839",
    "end": "2583200"
  },
  {
    "text": "control like have a way of taking those parameters and just pushing them through that would",
    "start": "2583200",
    "end": "2589520"
  },
  {
    "text": "um yeah so all right I'll take one more question",
    "start": "2589520",
    "end": "2597319"
  },
  {
    "text": "and then we're then we'll we'll go outside yes so uh this is more on click house I hope that's okay to ask so u u",
    "start": "2597319",
    "end": "2605880"
  },
  {
    "text": "one one of the things we were evaluating and I wanted your input was uh one is you know click house being used",
    "start": "2605880",
    "end": "2612240"
  },
  {
    "text": "Standalone versus click house being used as a query Engine with the data in park",
    "start": "2612240",
    "end": "2618119"
  },
  {
    "text": "files in S3 you know these are fragmented yes uh you know partition data uh or chunking in S3 so right U so",
    "start": "2618119",
    "end": "2626920"
  },
  {
    "text": "your thoughts on one versus the other Oh you mean what's you mean using it in paret versus using it in Click house I",
    "start": "2626920",
    "end": "2633040"
  },
  {
    "text": "me one is use click house stand alone for everything the other is used click house as a query engine yes and data is",
    "start": "2633040",
    "end": "2638760"
  },
  {
    "text": "in in fragmented chunking uh chunked par files",
    "start": "2638760",
    "end": "2643800"
  },
  {
    "text": "in S3 Y and so yeah you know that's a great topic like the the difference and",
    "start": "2643800",
    "end": "2648960"
  },
  {
    "text": "this sort of extends into object storage the the difference between having uh",
    "start": "2648960",
    "end": "2654079"
  },
  {
    "text": "storage you know using things inside a table versus external data we're trying to merge those models and uh in fact one",
    "start": "2654079",
    "end": "2661960"
  },
  {
    "text": "of the things we're we even talking about yesterday was to have a parquet uh",
    "start": "2661960",
    "end": "2668599"
  },
  {
    "text": "basically part type so that click house tables would just store the the data in parquet we we can read parquet very well",
    "start": "2668599",
    "end": "2677000"
  },
  {
    "text": "um and what we're seeing is that in in analytic systems this is a you know sort",
    "start": "2677000",
    "end": "2683440"
  },
  {
    "text": "of a a secular Development Across many systems is that parquet is the favored long-term sort of readon storage type",
    "start": "2683440",
    "end": "2691079"
  },
  {
    "text": "and people put it out on S3 and then you want to have your data warehouse be able to read it because it's fast and can do",
    "start": "2691079",
    "end": "2697760"
  },
  {
    "text": "real-time query but at the same time you'd also like it to be accessible to for example your machine learning and",
    "start": "2697760",
    "end": "2703800"
  },
  {
    "text": "and AI so so there is ongoing work in Click house I think the most important",
    "start": "2703800",
    "end": "2708839"
  },
  {
    "text": "thing in Click house right now is just to make paret reads fast and and we have seen that things like predicate push",
    "start": "2708839",
    "end": "2715040"
  },
  {
    "text": "Downs row groups are done better in parket than click house um no actually well okay so see paret is just a format",
    "start": "2715040",
    "end": "2723760"
  },
  {
    "text": "and and so predicate push down is something thing that which is in other words taking a condition and you know",
    "start": "2723760",
    "end": "2729040"
  },
  {
    "text": "sort of applying it you know within the paret within the paret library um yeah",
    "start": "2729040",
    "end": "2734079"
  },
  {
    "text": "that it's just a matter of how well the database uses those features and right",
    "start": "2734079",
    "end": "2739359"
  },
  {
    "text": "now there are some databases like Duck DB that are really quick on parket uh our first priority is catching up you",
    "start": "2739359",
    "end": "2746359"
  },
  {
    "text": "know so great I'm G to call it good because I I think our av guys got to go",
    "start": "2746359",
    "end": "2751760"
  },
  {
    "text": "home but thank you so much everybody feel free to come yeah and thank you all for coming",
    "start": "2751760",
    "end": "2760599"
  }
]