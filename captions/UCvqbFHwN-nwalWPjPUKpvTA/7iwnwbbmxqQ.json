[
  {
    "text": "good afternoon everyone and welcome to three surprising kubernetes networking features and how to defend against them",
    "start": "160",
    "end": "9120"
  },
  {
    "text": "so just a little bit of a background about me uh i used to be a penetration tester",
    "start": "9519",
    "end": "15200"
  },
  {
    "text": "and these days i work at control plane uh predominantly being a security consultant but i also help out with",
    "start": "15200",
    "end": "22240"
  },
  {
    "text": "training and workshops and contribute to our ctf events such as the one we ran at",
    "start": "22240",
    "end": "28000"
  },
  {
    "text": "cloud native security days so what are we going to talk about today",
    "start": "28000",
    "end": "35280"
  },
  {
    "text": "we're going to run through the external attack surface of a kubernetes cluster",
    "start": "35280",
    "end": "40480"
  },
  {
    "text": "having a little bit of look at what we can discover having a little bit of a look at",
    "start": "40480",
    "end": "45760"
  },
  {
    "text": "some of the underlying primitives of the cluster and some ways that we can abuse them",
    "start": "45760",
    "end": "51760"
  },
  {
    "text": "we'll take a little bit of a deeper dive into some cni primitives in two separate parts",
    "start": "51760",
    "end": "59520"
  },
  {
    "text": "and then we'll run through how we can defend against the attacks that we mentioned",
    "start": "59520",
    "end": "67600"
  },
  {
    "text": "so why do we care about any of this typically in",
    "start": "69840",
    "end": "75600"
  },
  {
    "text": "a kubernetes assessment a security assessment in my experience will start from the perspective",
    "start": "75600",
    "end": "81920"
  },
  {
    "text": "of a compromised workload a compromise pod maybe we assume that a developer",
    "start": "81920",
    "end": "87439"
  },
  {
    "text": "laptop's been compromised but there is still some attack service",
    "start": "87439",
    "end": "94640"
  },
  {
    "text": "that is not accounted for let's have a look at what we can get",
    "start": "94640",
    "end": "99759"
  },
  {
    "text": "from an authentic and authenticated perspective in the network",
    "start": "99759",
    "end": "104799"
  },
  {
    "text": "using some more classical techniques",
    "start": "104799",
    "end": "108560"
  },
  {
    "text": "so we're going to start by having a look at open ports",
    "start": "110320",
    "end": "116560"
  },
  {
    "text": "on our nodes so if you use one of our favorite port mapping tools",
    "start": "116560",
    "end": "122560"
  },
  {
    "text": "and take a typical worker node we might expect something like this to show up",
    "start": "122560",
    "end": "130239"
  },
  {
    "text": "uh so as we're using linux kubernetes nodes uh it's fairly typical to expect ssh to",
    "start": "130479",
    "end": "137440"
  },
  {
    "text": "be open but port 10256 and 10 2",
    "start": "137440",
    "end": "143200"
  },
  {
    "text": "5 0 are kubernetes components we can verify this just by jumping on",
    "start": "143200",
    "end": "148480"
  },
  {
    "text": "one of the machines and verifying that",
    "start": "148480",
    "end": "153840"
  },
  {
    "text": "q proxy owns 10.256 and this exposes a",
    "start": "153840",
    "end": "160160"
  },
  {
    "text": "healthy health check api which doesn't really have too much",
    "start": "160160",
    "end": "165599"
  },
  {
    "text": "attack surface so we'll move on",
    "start": "165599",
    "end": "171200"
  },
  {
    "text": "port 10250 is a little bit more interesting as this is the cubelet api",
    "start": "171200",
    "end": "177680"
  },
  {
    "text": "in modern versions of kubernetes this is authenticated however and so from a perspective on the network",
    "start": "178080",
    "end": "184560"
  },
  {
    "text": "where we don't have any credentials there's not much to see here",
    "start": "184560",
    "end": "190239"
  },
  {
    "text": "on that topic however if we did find any credentials um there's an excellent tool um cybrok",
    "start": "191599",
    "end": "197680"
  },
  {
    "text": "called cubelet ctl that actually documents this api it's a little bit outside of",
    "start": "197680",
    "end": "203760"
  },
  {
    "text": "the scope of the talk today",
    "start": "203760",
    "end": "206959"
  },
  {
    "text": "so if we move on to what a control plane load might look like uh in in a self-managed cluster",
    "start": "208959",
    "end": "216400"
  },
  {
    "text": "we can see some familiar ports from the worker node",
    "start": "216400",
    "end": "221440"
  },
  {
    "text": "um so we've still got those cubelet and q proxy ports and ssh for administration",
    "start": "221440",
    "end": "227840"
  },
  {
    "text": "we also have ports tcp 2 3 7 9 and 2 380",
    "start": "227840",
    "end": "233439"
  },
  {
    "text": "which are used by the xcd theme and running on a control plane if",
    "start": "233439",
    "end": "238640"
  },
  {
    "text": "we're running in a configuration um where cds running on our control plane",
    "start": "238640",
    "end": "244480"
  },
  {
    "text": "nodes by default this uses mutual tls and so",
    "start": "244480",
    "end": "249680"
  },
  {
    "text": "again not much we can we can gain here the most interesting port here is 6443.",
    "start": "249680",
    "end": "259120"
  },
  {
    "text": "this is the default port for the kubernetes api server and we can start learning some information",
    "start": "259120",
    "end": "268160"
  },
  {
    "text": "as the nmap scan indicates uh it it's detected that there might be",
    "start": "268160",
    "end": "274479"
  },
  {
    "text": "some ssl or tls uh service listing on that port",
    "start": "274479",
    "end": "280800"
  },
  {
    "text": "so if we attempt to connect to it with openssl we can actually dump",
    "start": "280800",
    "end": "287199"
  },
  {
    "text": "tls certificate listening on that port although there's a lot of information in",
    "start": "287199",
    "end": "293120"
  },
  {
    "text": "there the most interesting thing to us at this stage is the subject alternative",
    "start": "293120",
    "end": "298560"
  },
  {
    "text": "name field so this can contain two types of information",
    "start": "298560",
    "end": "305680"
  },
  {
    "text": "the first of which is a dns name and the second of which is an ip address",
    "start": "305680",
    "end": "311840"
  },
  {
    "text": "so by default kubernetes will assign an ip address",
    "start": "311919",
    "end": "317520"
  },
  {
    "text": "to each or sorry assign an ip address in the certificate to each ip address which the",
    "start": "317520",
    "end": "324080"
  },
  {
    "text": "ip api server listens so in this instance",
    "start": "324080",
    "end": "330639"
  },
  {
    "text": "we can see that it contains the ip address of the api server kubernetes service",
    "start": "330639",
    "end": "335759"
  },
  {
    "text": "which is an information leak which could help us determine the kubernetes service",
    "start": "335759",
    "end": "341199"
  },
  {
    "text": "network range this will be important later",
    "start": "341199",
    "end": "347360"
  },
  {
    "text": "the api server also has one or two unauthenticated endpoints",
    "start": "350720",
    "end": "355759"
  },
  {
    "text": "probably the most common of which is the slash version endpoint it's not a huge amount of information here but it does at least tell us",
    "start": "355759",
    "end": "362479"
  },
  {
    "text": "exactly the exact version of the cluster that we're running which might be useful if we want to check for",
    "start": "362479",
    "end": "368479"
  },
  {
    "text": "already known vulnerabilities or cves",
    "start": "368479",
    "end": "372400"
  },
  {
    "text": "so just to make this a bit easier i've written a little march script that'll tell us both the subject names and that",
    "start": "377919",
    "end": "385360"
  },
  {
    "text": "version information also makes it a little bit easier if we're enumerating across several hosts",
    "start": "385360",
    "end": "393879"
  },
  {
    "text": "so one area that is sometimes overlooked with network scanning is udp scanning",
    "start": "396319",
    "end": "402000"
  },
  {
    "text": "so sometimes because it can be a bit slow or the nature of the thing",
    "start": "402000",
    "end": "407440"
  },
  {
    "text": "is just a bit awkward but in this scenario we have a good idea of what we're expecting to be running on",
    "start": "407440",
    "end": "413360"
  },
  {
    "text": "the other side so we have a higher chance of success so we can look for ports which run",
    "start": "413360",
    "end": "419440"
  },
  {
    "text": "common networking and storage protocols so for example here in the scan on",
    "start": "419440",
    "end": "426160"
  },
  {
    "text": "screen we can see that we have port 4789 which is commonly used for vxlan overlay",
    "start": "426160",
    "end": "432639"
  },
  {
    "text": "networking we'll talk a little bit more about that later",
    "start": "432639",
    "end": "438400"
  },
  {
    "text": "so in this first section all these issues have been uh",
    "start": "441039",
    "end": "446080"
  },
  {
    "text": "informational we wouldn't really expect",
    "start": "446080",
    "end": "451240"
  },
  {
    "text": "them to be we wouldn't raise them as any kind of exploit really",
    "start": "451520",
    "end": "456880"
  },
  {
    "text": "but in this next section we'll have a little bit of a look at some of the primitives of the linux",
    "start": "456880",
    "end": "463120"
  },
  {
    "text": "nodes that we're running and see if we can achieve something that we might call an exploit",
    "start": "463120",
    "end": "469440"
  },
  {
    "text": "so for those of you that have set up a cube adm cluster or a cluster with a",
    "start": "471039",
    "end": "476240"
  },
  {
    "text": "tool like ud cube adm will be aware that before you're able to run the tool",
    "start": "476240",
    "end": "481919"
  },
  {
    "text": "the node that you're running on has to make to meet certain requirements and this is based on the",
    "start": "481919",
    "end": "488240"
  },
  {
    "text": "features of the linux kernel on the node so one example of this is the ipv4",
    "start": "488240",
    "end": "495039"
  },
  {
    "text": "forwarding feature and what this means if we turn it on",
    "start": "495039",
    "end": "500240"
  },
  {
    "text": "is that the the linux machine will root ip packets based on the rules it's",
    "start": "500240",
    "end": "507039"
  },
  {
    "text": "configured with so this will be its ip tables rules or nf tables rules",
    "start": "507039",
    "end": "513120"
  },
  {
    "text": "so in the words of rory mcune kubernetes is a router and this has some implications that we",
    "start": "513200",
    "end": "519760"
  },
  {
    "text": "may not expect so if you consider for a moment we have",
    "start": "519760",
    "end": "525760"
  },
  {
    "text": "a [Music] uh architecture something like the above",
    "start": "525760",
    "end": "532000"
  },
  {
    "text": "where we've tried to harden our cluster by not exposing our api server to the public internet",
    "start": "532000",
    "end": "537839"
  },
  {
    "text": "so we implemented a jump host and how we've implemented it is we've got one",
    "start": "537839",
    "end": "542880"
  },
  {
    "text": "network one subnet with our bastion and that's the same as the all of our",
    "start": "542880",
    "end": "548720"
  },
  {
    "text": "kubernetes nodes",
    "start": "548720",
    "end": "551680"
  },
  {
    "text": "using the previous described routing functionality we can actually",
    "start": "554399",
    "end": "560160"
  },
  {
    "text": "add roots to this but to this bastion that will allow us to talk to pods and services within",
    "start": "560160",
    "end": "567440"
  },
  {
    "text": "within the cluster so let me show you what i mean",
    "start": "567440",
    "end": "573399"
  },
  {
    "text": "how are we doing everyone at the box see that grand thank you",
    "start": "581680",
    "end": "588000"
  },
  {
    "text": "so to start was we used that script i showed to enumerate uh some basic information",
    "start": "588320",
    "end": "594720"
  },
  {
    "text": "about the cluster and we can see that here we're able to",
    "start": "594720",
    "end": "600800"
  },
  {
    "text": "reveal the first ip in the service network",
    "start": "600800",
    "end": "607040"
  },
  {
    "text": "so what we'll do now is make a small assumption",
    "start": "612640",
    "end": "618200"
  },
  {
    "text": "that this network is a slash 24 network we can increase it at a later stage if we need to but for the time being this",
    "start": "619440",
    "end": "626160"
  },
  {
    "text": "will allow us to allow our allow us to add a route via one of the nodes",
    "start": "626160",
    "end": "633279"
  },
  {
    "text": "that we've previously discovered like so",
    "start": "633279",
    "end": "639680"
  },
  {
    "text": "what we'll now do is look for the commonly deployed kubernetes dns component or core dns",
    "start": "641040",
    "end": "648640"
  },
  {
    "text": "we know this is going to listen on port tcp 53 so we can scan this service range",
    "start": "648640",
    "end": "655600"
  },
  {
    "text": "for all ip addresses looking for that port",
    "start": "655600",
    "end": "660200"
  },
  {
    "text": "great looks like we found it so we can see that",
    "start": "662160",
    "end": "668320"
  },
  {
    "text": "uh core dns is running on the service ip 10 100 not 10. this is really powerful because",
    "start": "668320",
    "end": "675200"
  },
  {
    "text": "chordion s contains a lot of information about the state of the cluster",
    "start": "675200",
    "end": "680720"
  },
  {
    "text": "so what we'll do in this next step is we'll use the wildcard functionality",
    "start": "680720",
    "end": "686000"
  },
  {
    "text": "of core dns to list all other services within the cluster",
    "start": "686000",
    "end": "691040"
  },
  {
    "text": "and although that's slightly wrapped hopefully you should be able to see that we have",
    "start": "693200",
    "end": "699360"
  },
  {
    "text": "the core dns service the default kubernetes service and this other dashboard in the default",
    "start": "699360",
    "end": "705120"
  },
  {
    "text": "namespace so we should be able to just connect to that dashboard to see what it presents",
    "start": "705120",
    "end": "711680"
  },
  {
    "text": "let's try it and as we can see we can connect direct",
    "start": "711680",
    "end": "718079"
  },
  {
    "text": "to that service ip from our bastion without any authentication",
    "start": "718079",
    "end": "723680"
  },
  {
    "text": "we're going to take this a step further and query core dns for all the service endpoints",
    "start": "724320",
    "end": "731040"
  },
  {
    "text": "so these are all the pod ips that the services and the cluster talk to",
    "start": "731040",
    "end": "737279"
  },
  {
    "text": "and what this allows us to see is some of the pod ips in use by the cluster",
    "start": "739519",
    "end": "745200"
  },
  {
    "text": "so we can see down here we have the 10 naught 102",
    "start": "745200",
    "end": "750800"
  },
  {
    "text": "range ip addresses and this allows us to make a further educated guess as to what network range",
    "start": "750800",
    "end": "759600"
  },
  {
    "text": "the pod network is using and we're going to guess that it's using",
    "start": "759600",
    "end": "765839"
  },
  {
    "text": "the 10 not nor 16 range and again we can add this add a root to",
    "start": "765839",
    "end": "772399"
  },
  {
    "text": "this via one of our nodes",
    "start": "772399",
    "end": "776959"
  },
  {
    "text": "following this we can scan directly across this range and this will allow us to detect",
    "start": "781120",
    "end": "788160"
  },
  {
    "text": "all pods even if they weren't necessarily assigned to a service",
    "start": "788160",
    "end": "793200"
  },
  {
    "text": "so over here we're just using three ports but you could conduct a full port scan if you wanted to",
    "start": "793200",
    "end": "800760"
  },
  {
    "text": "and we can see that we've found a pod ip address 1.8080 and again we can curl it to check",
    "start": "804320",
    "end": "811040"
  },
  {
    "text": "we can reach it for this example we're using the same dashboard but with this time we're using",
    "start": "811040",
    "end": "817200"
  },
  {
    "text": "the pod ip address we can confirm that we can reach that service from our bastion",
    "start": "817200",
    "end": "824160"
  },
  {
    "text": "without any authentication whatsoever",
    "start": "824160",
    "end": "828360"
  },
  {
    "text": "what",
    "start": "840399",
    "end": "843399"
  },
  {
    "text": "come on slides",
    "start": "846240",
    "end": "849639"
  },
  {
    "text": "so you might think this is a little bit of a little bit dodgy functionality why does it exist",
    "start": "871760",
    "end": "876880"
  },
  {
    "text": "but in truth it's actually used as functionality by some of the existing",
    "start": "876880",
    "end": "883040"
  },
  {
    "text": "cni's so both romana and kubuta make use of this",
    "start": "883040",
    "end": "889600"
  },
  {
    "text": "and it's with good reason because there are performance and complex complexity benefits to using this kind",
    "start": "889600",
    "end": "896399"
  },
  {
    "text": "of routing over say an overlay network but i'll leave you to decide whether it's a valid valid feature or is indeed",
    "start": "896399",
    "end": "903839"
  },
  {
    "text": "a bug",
    "start": "903839",
    "end": "906160"
  },
  {
    "text": "so so far we've looked at layer 2 networks but in the real world",
    "start": "910079",
    "end": "915760"
  },
  {
    "text": "it's likely that we'll have nodes deployed in different subnets different regions different availability zones",
    "start": "915760",
    "end": "921360"
  },
  {
    "text": "maybe and so we might want to bridge our traffic over a low 3 network this is",
    "start": "921360",
    "end": "928399"
  },
  {
    "text": "where overlay networks come in many cni's these days will deploy with",
    "start": "928399",
    "end": "935279"
  },
  {
    "text": "some kind of overlay network and under the hood these will use either vxlan or ipnip technology",
    "start": "935279",
    "end": "944560"
  },
  {
    "text": "so if you could consider for a moment at the following architecture similar to before we have a bastion host",
    "start": "949440",
    "end": "956399"
  },
  {
    "text": "that we're asking users to pivot through but this simulation before we have",
    "start": "956399",
    "end": "962399"
  },
  {
    "text": "uh our kubernetes nodes are running in one or more other subnets that are not directly",
    "start": "962399",
    "end": "968480"
  },
  {
    "text": "the same one as our bastion",
    "start": "968480",
    "end": "972279"
  },
  {
    "text": "so to give an overview of the the ipip protocol we'll look at the layers two",
    "start": "982079",
    "end": "987199"
  },
  {
    "text": "through two through four of the networking stack",
    "start": "987199",
    "end": "992720"
  },
  {
    "text": "ipip encapsulation works by encapsulating a layer 3 ip",
    "start": "992959",
    "end": "998320"
  },
  {
    "text": "packet with another layer 3 ip packet in a standard pod pod communication",
    "start": "998320",
    "end": "1005360"
  },
  {
    "text": "the outer packet will contain the source node ip and the destination",
    "start": "1005360",
    "end": "1010560"
  },
  {
    "text": "node ip and the inner packet will use the source pod ipop address and the",
    "start": "1010560",
    "end": "1017120"
  },
  {
    "text": "destination port ip address",
    "start": "1017120",
    "end": "1020480"
  },
  {
    "text": "however if an attacker were to have access to a bastion they may be able to forge or create",
    "start": "1023040",
    "end": "1029918"
  },
  {
    "text": "malicious packets so they may they would be able to change the content of any of these",
    "start": "1029919",
    "end": "1035678"
  },
  {
    "text": "headers that we care about so for in order for an attacker",
    "start": "1035679",
    "end": "1043360"
  },
  {
    "text": "to root to pods in our cluster they would need to specify",
    "start": "1043360",
    "end": "1049600"
  },
  {
    "text": "the right destination node ip in the outer ip packet and the right destination polyp in the inner packet",
    "start": "1049600",
    "end": "1057039"
  },
  {
    "text": "however they have some control over the source ip addresses",
    "start": "1057039",
    "end": "1063000"
  },
  {
    "text": "the inner ip packet source ip address is important as the attacker",
    "start": "1066160",
    "end": "1072640"
  },
  {
    "text": "the attacker can set this to influence the return route of the ip packet",
    "start": "1073840",
    "end": "1080280"
  },
  {
    "text": "let me explain that a bit so because",
    "start": "1080400",
    "end": "1085440"
  },
  {
    "text": "we're because the kubernetes node has no does not understand that we are sending",
    "start": "1085440",
    "end": "1092400"
  },
  {
    "text": "it ipip packets we have a single single sided tunnel",
    "start": "1092400",
    "end": "1097760"
  },
  {
    "text": "it has no route or has no rules to be able to encapsulate for the return journey",
    "start": "1098480",
    "end": "1104240"
  },
  {
    "text": "so therefore we need to find a way of returning data to the bastion host",
    "start": "1104240",
    "end": "1109280"
  },
  {
    "text": "if we set the in an ip packet source address to the attack to the attacker's bastion",
    "start": "1109280",
    "end": "1116559"
  },
  {
    "text": "when this packet gets unencapsulated",
    "start": "1116559",
    "end": "1121000"
  },
  {
    "text": "and then a response from whichever pod we're talking to we'll use this source address as the",
    "start": "1122640",
    "end": "1128240"
  },
  {
    "text": "destination in this manner we can",
    "start": "1128240",
    "end": "1133520"
  },
  {
    "text": "achieve a form of asymmetric routing which allows us to to retrieve a response from the node",
    "start": "1133520",
    "end": "1141440"
  },
  {
    "text": "the outer ipp packet source address is important as we can use it to bypass",
    "start": "1142000",
    "end": "1148480"
  },
  {
    "text": "host firewall rules in some scenarios so i appreciate that a bit to take in so",
    "start": "1148480",
    "end": "1155520"
  },
  {
    "text": "let me give a little bit of context here",
    "start": "1155520",
    "end": "1159440"
  },
  {
    "text": "this is a proof of concept script which demonstrates the concept",
    "start": "1161120",
    "end": "1166640"
  },
  {
    "text": "using the escapee packet manipulation library",
    "start": "1166640",
    "end": "1171519"
  },
  {
    "text": "we can see that in the outer packet we're using the 10.123",
    "start": "1172799",
    "end": "1179679"
  },
  {
    "text": "ip address is the source so this is just any other node in our cluster",
    "start": "1179679",
    "end": "1184799"
  },
  {
    "text": "we can see that we're using the 10.123.0.20 ip address as our",
    "start": "1184799",
    "end": "1190559"
  },
  {
    "text": "destination node iv this is the one where the pod we're targeting is running",
    "start": "1190559",
    "end": "1197280"
  },
  {
    "text": "for the inner packet we're using the best unip address as the source",
    "start": "1197360",
    "end": "1203760"
  },
  {
    "text": "and the target ip address of the pod which in this case is called dns",
    "start": "1203760",
    "end": "1210159"
  },
  {
    "text": "as the destination p ip of the inner packet we then",
    "start": "1210159",
    "end": "1215440"
  },
  {
    "text": "assemble the packet using scapy targeting the any service cluster.local",
    "start": "1215440",
    "end": "1221360"
  },
  {
    "text": "dns address hoping to achieve similar results to before",
    "start": "1221360",
    "end": "1227280"
  },
  {
    "text": "so we can see that this executes and that we",
    "start": "1228480",
    "end": "1233600"
  },
  {
    "text": "send and receive normal dns packets if we look a bit deeper we can see that",
    "start": "1233600",
    "end": "1239600"
  },
  {
    "text": "the sent packet isn't is ip and ip encapsulated",
    "start": "1239600",
    "end": "1245039"
  },
  {
    "text": "and our response is not thus showing we're able to achieve",
    "start": "1245039",
    "end": "1250960"
  },
  {
    "text": "asymmetric routing and communicate with services inside the cluster",
    "start": "1250960",
    "end": "1256960"
  },
  {
    "text": "from the bastion from an authenticated perspective",
    "start": "1256960",
    "end": "1261799"
  },
  {
    "text": "so",
    "start": "1268480",
    "end": "1271480"
  },
  {
    "text": "so not all overlay networks use ip in ip",
    "start": "1278400",
    "end": "1285440"
  },
  {
    "text": "we also have vxlan networks",
    "start": "1285840",
    "end": "1290039"
  },
  {
    "text": "again looking at the structure of layers two through four",
    "start": "1293039",
    "end": "1297760"
  },
  {
    "text": "we can see that this time it's much more complicated",
    "start": "1299440",
    "end": "1304440"
  },
  {
    "text": "in vxlan a layer 2 ethernet frame and a vxlan header is",
    "start": "1307440",
    "end": "1314720"
  },
  {
    "text": "encapsulated in a layer 4 udp datagram",
    "start": "1314720",
    "end": "1320158"
  },
  {
    "text": "the header fields that we care about in the outer ip packet are again the source",
    "start": "1321840",
    "end": "1328640"
  },
  {
    "text": "node ip and the destination which in the normal flow is the node ip",
    "start": "1328640",
    "end": "1337120"
  },
  {
    "text": "in the inner ib packet",
    "start": "1337120",
    "end": "1340480"
  },
  {
    "text": "the pod ip will be the source ip address sorry will be the will be the source polyp and the",
    "start": "1343120",
    "end": "1349520"
  },
  {
    "text": "destination ip address will be the destination polyp however in vxlan we have some additional",
    "start": "1349520",
    "end": "1355760"
  },
  {
    "text": "headers so in the vxlan header we have the vni id",
    "start": "1355760",
    "end": "1362559"
  },
  {
    "text": "while it's used in other vxlan implementations in all the kubernetes cni's i've seen it's",
    "start": "1362559",
    "end": "1368400"
  },
  {
    "text": "hardcoded to one we also have this concept of vtep which",
    "start": "1368400",
    "end": "1374640"
  },
  {
    "text": "is the vxlan tunnel endpoint unfortunately for us this is a randomly generated",
    "start": "1374640",
    "end": "1381520"
  },
  {
    "text": "hardware address and so to attack against vxlan",
    "start": "1381520",
    "end": "1386720"
  },
  {
    "text": "in a reasonable time frame we need to leak list in the cluster",
    "start": "1386720",
    "end": "1392000"
  },
  {
    "text": "this is annotated on a node resource object so the permissions we'd need would be",
    "start": "1392400",
    "end": "1398559"
  },
  {
    "text": "get nodes",
    "start": "1398559",
    "end": "1401799"
  },
  {
    "text": "so thinking back to our network architecture where we have that bastion in a separate",
    "start": "1406320",
    "end": "1412799"
  },
  {
    "text": "subnet and we have our nodes in adjacent subnets",
    "start": "1412799",
    "end": "1419679"
  },
  {
    "text": "let's have a look at which headers an attacker would want to modify",
    "start": "1421279",
    "end": "1427520"
  },
  {
    "text": "so in order to route to the right node and right pod",
    "start": "1427919",
    "end": "1434480"
  },
  {
    "text": "the destination ip addresses in both of the ip packets will need to be set",
    "start": "1434480",
    "end": "1439520"
  },
  {
    "text": "correctly as before and as before",
    "start": "1439520",
    "end": "1444799"
  },
  {
    "text": "we can set the source ip address in the inner ip packet",
    "start": "1444799",
    "end": "1449919"
  },
  {
    "text": "to achieve asymmetric routing we can also set the source ip address in",
    "start": "1449919",
    "end": "1455760"
  },
  {
    "text": "the outer ip packet to that of another node try and bypass",
    "start": "1455760",
    "end": "1462559"
  },
  {
    "text": "any host firewall rules that prevent us from",
    "start": "1462559",
    "end": "1468000"
  },
  {
    "text": "sending packets to that node",
    "start": "1468080",
    "end": "1472039"
  },
  {
    "text": "an attacker can fairly safely just hard code the vni the vni to one",
    "start": "1473200",
    "end": "1478480"
  },
  {
    "text": "although if they know that targeting a cni that uses something different they can protect potentially modify it",
    "start": "1478480",
    "end": "1485600"
  },
  {
    "text": "and as previously mentioned they would need to leak the vtep address",
    "start": "1485600",
    "end": "1491360"
  },
  {
    "text": "from the cluster via another method",
    "start": "1491360",
    "end": "1496440"
  },
  {
    "text": "so let's have a little bit of a look at how that looks in a proof of concept script",
    "start": "1500240",
    "end": "1506480"
  },
  {
    "text": "so in the script we set the outer source ip address to 10123 0.10",
    "start": "1506559",
    "end": "1514240"
  },
  {
    "text": "which allow which is the ip address of another node and we set the outer destination ip",
    "start": "1514240",
    "end": "1520799"
  },
  {
    "text": "address 2.20 which is the target node we set the vxlan port to 4789 which is",
    "start": "1520799",
    "end": "1528880"
  },
  {
    "text": "well known and we enumerated during our nmap script earlier",
    "start": "1528880",
    "end": "1534960"
  },
  {
    "text": "and we set the vni to rot one we include the vtep address that we",
    "start": "1534960",
    "end": "1540960"
  },
  {
    "text": "leaked from the cluster and we set the",
    "start": "1540960",
    "end": "1546159"
  },
  {
    "text": "source ip addresses the inner packet to our bastion and similarly to before we are going to",
    "start": "1546159",
    "end": "1552799"
  },
  {
    "text": "be targeting the core dns service and use the service address of that pod",
    "start": "1552799",
    "end": "1561919"
  },
  {
    "text": "we then can construct the packet using scapy and send to our cluster",
    "start": "1562159",
    "end": "1569960"
  },
  {
    "text": "we can see we're able to successfully do so",
    "start": "1571760",
    "end": "1575759"
  },
  {
    "text": "and that we are able to send a request in in the right format and receive a",
    "start": "1578640",
    "end": "1584640"
  },
  {
    "text": "response in the right format",
    "start": "1584640",
    "end": "1588320"
  },
  {
    "text": "if we look a little bit deeper we can see our request is vxlan encapsulated as",
    "start": "1590000",
    "end": "1595840"
  },
  {
    "text": "expected and our response is not just a standard dns response",
    "start": "1595840",
    "end": "1604399"
  },
  {
    "text": "so showing this shows that we can if we have knowledge of the vtep address of a node we can communicate with pods and",
    "start": "1606000",
    "end": "1614400"
  },
  {
    "text": "services inside our cluster from an adjacent subnet",
    "start": "1614400",
    "end": "1621240"
  },
  {
    "text": "so some of the the eagle eye amongst you will have noticed that in the proof of concept scripts they're",
    "start": "1626559",
    "end": "1633039"
  },
  {
    "text": "run as the root user although we used it for the proof of",
    "start": "1633039",
    "end": "1639200"
  },
  {
    "text": "concept we could use the bash dev tcp and devudp sudo devices to achieve",
    "start": "1639200",
    "end": "1645120"
  },
  {
    "text": "similar results so we don't necessarily need the user to achieve this attack",
    "start": "1645120",
    "end": "1651760"
  },
  {
    "text": "in order to mitigate some of the level 2 attacks discussed in the first section",
    "start": "1653279",
    "end": "1658720"
  },
  {
    "text": "i would strongly recommend that you isolate any bastion hosts or any",
    "start": "1658720",
    "end": "1663840"
  },
  {
    "text": "untrusted workloads in different subnets to that of your nodes",
    "start": "1663840",
    "end": "1670640"
  },
  {
    "text": "if we do if we do that it also means that we're able to write firewall rules",
    "start": "1673279",
    "end": "1678480"
  },
  {
    "text": "strict firewall rules to prevent any kind of other traffic traversing between these",
    "start": "1678480",
    "end": "1684240"
  },
  {
    "text": "machines so for example in the in the second half there were no",
    "start": "1684240",
    "end": "1690159"
  },
  {
    "text": "in in my lab environment there were no rules between these two subnets to prevent that traffic which is one of the",
    "start": "1690159",
    "end": "1695440"
  },
  {
    "text": "reasons why we're able to do it in terms of kubernetes native things we",
    "start": "1695440",
    "end": "1701760"
  },
  {
    "text": "can do network policies also help us here we can implement policies",
    "start": "1701760",
    "end": "1708080"
  },
  {
    "text": "between workloads in our cluster so between individual pods and this will prevent us",
    "start": "1708080",
    "end": "1715120"
  },
  {
    "text": "uh being able to communicate with pods from outside the cluster so we wouldn't have been able to",
    "start": "1715120",
    "end": "1721200"
  },
  {
    "text": "curl that unauthenticated dashboard",
    "start": "1721200",
    "end": "1725398"
  },
  {
    "text": "additionally we can also add network policies around cube system if we wanted to prevent access to privileged",
    "start": "1726240",
    "end": "1731919"
  },
  {
    "text": "components so if we added a network policy to prevent we can",
    "start": "1731919",
    "end": "1737200"
  },
  {
    "text": "add a network policy to prevent access to core dns from outside the cluster",
    "start": "1737200",
    "end": "1743200"
  },
  {
    "text": "and it's probably a good idea in terms of general hardening",
    "start": "1743200",
    "end": "1748158"
  },
  {
    "text": "i mentioned a couple of times that we could set the source ip address of the outer",
    "start": "1749679",
    "end": "1756720"
  },
  {
    "text": "ip packet to avoid host firewall limitations",
    "start": "1756720",
    "end": "1762000"
  },
  {
    "text": "this is more commonly known as ip spoofing and routers",
    "start": "1762000",
    "end": "1768320"
  },
  {
    "text": "often have protection against this but it's not always turned on so",
    "start": "1768320",
    "end": "1774000"
  },
  {
    "text": "in my research some cni's uh needed this some didn't and so",
    "start": "1774000",
    "end": "1781120"
  },
  {
    "text": "you may want to investigate turning this protection on to prevent these kind of attacks",
    "start": "1781120",
    "end": "1787120"
  },
  {
    "text": "the linux kernel actually has a [Music] feature to prevent some of the",
    "start": "1789360",
    "end": "1796640"
  },
  {
    "text": "uh asymmetric routing that i mentioned earlier",
    "start": "1796640",
    "end": "1801840"
  },
  {
    "text": "called reverse path filtering um most distributions don't actually enable",
    "start": "1801840",
    "end": "1806880"
  },
  {
    "text": "this by default so it's either off or in a permissive mode",
    "start": "1806880",
    "end": "1812320"
  },
  {
    "text": "you could experiment with setting this to a strict mode so that these kind of",
    "start": "1812480",
    "end": "1819440"
  },
  {
    "text": "attacks are not possible although it's unclear whether this will in fact affect any of the kubernetes functionality",
    "start": "1819440",
    "end": "1826480"
  },
  {
    "text": "so you should test this well",
    "start": "1826960",
    "end": "1830480"
  },
  {
    "text": "so i've released the nmap cumulative info script on github",
    "start": "1833279",
    "end": "1838399"
  },
  {
    "text": "and the kubernetes um the other proof of concept scripts um",
    "start": "1838399",
    "end": "1843600"
  },
  {
    "text": "that you're welcome to use and contribute to and that's my twitter handle if you want to follow me but thanks for",
    "start": "1843600",
    "end": "1850640"
  },
  {
    "text": "listening [Applause]",
    "start": "1850640",
    "end": "1864430"
  },
  {
    "text": "think we've got time for questions if anyone has any",
    "start": "1864880",
    "end": "1869640"
  },
  {
    "text": "[Applause]",
    "start": "1874970",
    "end": "1878069"
  },
  {
    "text": "yes sir down at the front i think we've got mike",
    "start": "1880080",
    "end": "1885080"
  },
  {
    "text": "um could you bypass network policies using the method um if you just used an",
    "start": "1893840",
    "end": "1900559"
  },
  {
    "text": "internal ip address so you set the package in you don't expect",
    "start": "1900559",
    "end": "1905919"
  },
  {
    "text": "for blind exploitation you don't expect an answer but people trigger something so the question was could i",
    "start": "1905919",
    "end": "1915039"
  },
  {
    "text": "could i use an internal ip address to buy person network policy",
    "start": "1915039",
    "end": "1920559"
  },
  {
    "text": "good question",
    "start": "1920559",
    "end": "1923278"
  },
  {
    "text": "i don't think so because i think that the",
    "start": "1929919",
    "end": "1937440"
  },
  {
    "text": "in order to buy part network network policy you would need to be able to set the ip address of the inner packet",
    "start": "1937440",
    "end": "1943760"
  },
  {
    "text": "which which you well",
    "start": "1943760",
    "end": "1948039"
  },
  {
    "text": "i guess it would be kind of almost like a csrf kind of situation",
    "start": "1950240",
    "end": "1957519"
  },
  {
    "text": "if you had a workload where",
    "start": "1957919",
    "end": "1964240"
  },
  {
    "text": "because you'd probably also not be able to make a connection so you'd need something that accepted udp packets",
    "start": "1964320",
    "end": "1971840"
  },
  {
    "text": "that you could make a permanent request",
    "start": "1971840",
    "end": "1976000"
  },
  {
    "text": "[Music]",
    "start": "1976960",
    "end": "1980049"
  },
  {
    "text": "it would be quite convoluted i'm not sure",
    "start": "1982240",
    "end": "1986840"
  },
  {
    "text": "cool if that's it thanks very much [Applause]",
    "start": "1991440",
    "end": "2000400"
  }
]