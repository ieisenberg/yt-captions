[
  {
    "text": "hello and welcome to my talk my name is",
    "start": "560",
    "end": "2879"
  },
  {
    "text": "rastisal",
    "start": "2879",
    "end": "3919"
  },
  {
    "text": "and today i'll be speaking about",
    "start": "3919",
    "end": "5279"
  },
  {
    "text": "multi-cluster service deployments with",
    "start": "5279",
    "end": "7279"
  },
  {
    "text": "operators and keep carrier",
    "start": "7279",
    "end": "10160"
  },
  {
    "text": "so before we start let me introduce",
    "start": "10160",
    "end": "12080"
  },
  {
    "text": "myself",
    "start": "12080",
    "end": "13280"
  },
  {
    "text": "i am a software engineer at cobramatik",
    "start": "13280",
    "end": "15280"
  },
  {
    "text": "where i am working on cobramatic",
    "start": "15280",
    "end": "16880"
  },
  {
    "text": "kubernetes platform",
    "start": "16880",
    "end": "18240"
  },
  {
    "text": "and cubecarrier open source projects i",
    "start": "18240",
    "end": "21039"
  },
  {
    "text": "am specialized on multi-cluster",
    "start": "21039",
    "end": "22800"
  },
  {
    "text": "application management and multi-cluster",
    "start": "22800",
    "end": "24480"
  },
  {
    "text": "networking",
    "start": "24480",
    "end": "25760"
  },
  {
    "text": "and in the past i also contributed to",
    "start": "25760",
    "end": "27599"
  },
  {
    "text": "several other other open source projects",
    "start": "27599",
    "end": "30000"
  },
  {
    "text": "such as regatta i o fdi go vp",
    "start": "30000",
    "end": "33360"
  },
  {
    "text": "contvp cni or sysripo",
    "start": "33360",
    "end": "37360"
  },
  {
    "text": "so as the title of the talk suggests it",
    "start": "37360",
    "end": "39760"
  },
  {
    "text": "will be",
    "start": "39760",
    "end": "40800"
  },
  {
    "text": "about multi-cluster service deployments",
    "start": "40800",
    "end": "42840"
  },
  {
    "text": "today during the talk i will go through",
    "start": "42840",
    "end": "45760"
  },
  {
    "text": "different aspects of multi-cluster",
    "start": "45760",
    "end": "47360"
  },
  {
    "text": "service deployments and i will also",
    "start": "47360",
    "end": "49360"
  },
  {
    "text": "mention some community driven",
    "start": "49360",
    "end": "50960"
  },
  {
    "text": "open source projects related to them we",
    "start": "50960",
    "end": "53840"
  },
  {
    "text": "will go to multi-cluster infrastructure",
    "start": "53840",
    "end": "55760"
  },
  {
    "text": "management",
    "start": "55760",
    "end": "56800"
  },
  {
    "text": "then multi-cluster application",
    "start": "56800",
    "end": "58239"
  },
  {
    "text": "management and finally multi-cluster",
    "start": "58239",
    "end": "60480"
  },
  {
    "text": "networking",
    "start": "60480",
    "end": "61760"
  },
  {
    "text": "at the end of the talk i will also show",
    "start": "61760",
    "end": "64239"
  },
  {
    "text": "a quick demo of multi-cluster",
    "start": "64239",
    "end": "65760"
  },
  {
    "text": "application deployment with cube carrier",
    "start": "65760",
    "end": "68000"
  },
  {
    "text": "and multi-cluster networking with",
    "start": "68000",
    "end": "70840"
  },
  {
    "text": "submariner",
    "start": "70840",
    "end": "72479"
  },
  {
    "text": "so before we go into any details let me",
    "start": "72479",
    "end": "75040"
  },
  {
    "text": "talk about",
    "start": "75040",
    "end": "75680"
  },
  {
    "text": "use cases for deploying applications",
    "start": "75680",
    "end": "77520"
  },
  {
    "text": "across multiple clusters",
    "start": "77520",
    "end": "80080"
  },
  {
    "text": "one of the reasons for doing that may be",
    "start": "80080",
    "end": "83119"
  },
  {
    "text": "close user proximity",
    "start": "83119",
    "end": "85040"
  },
  {
    "text": "for example we would like to serve users",
    "start": "85040",
    "end": "87119"
  },
  {
    "text": "from different parts of the world",
    "start": "87119",
    "end": "88799"
  },
  {
    "text": "without high latency another reason",
    "start": "88799",
    "end": "91759"
  },
  {
    "text": "maybe regional high availability",
    "start": "91759",
    "end": "94799"
  },
  {
    "text": "where we may want to minimize the impact",
    "start": "94799",
    "end": "97920"
  },
  {
    "text": "of regional outages another reason",
    "start": "97920",
    "end": "100720"
  },
  {
    "text": "may be security and organizational",
    "start": "100720",
    "end": "102960"
  },
  {
    "text": "separation",
    "start": "102960",
    "end": "104399"
  },
  {
    "text": "for instance we may have to use",
    "start": "104399",
    "end": "106159"
  },
  {
    "text": "dedicated clusters for each organization",
    "start": "106159",
    "end": "108720"
  },
  {
    "text": "or",
    "start": "108720",
    "end": "109119"
  },
  {
    "text": "organization you didn't the next one may",
    "start": "109119",
    "end": "112399"
  },
  {
    "text": "be data locality for example databases",
    "start": "112399",
    "end": "115200"
  },
  {
    "text": "with sensitive data",
    "start": "115200",
    "end": "116479"
  },
  {
    "text": "may be only available on in on-premises",
    "start": "116479",
    "end": "119680"
  },
  {
    "text": "clusters",
    "start": "119680",
    "end": "121119"
  },
  {
    "text": "and last but not least one of the",
    "start": "121119",
    "end": "123200"
  },
  {
    "text": "biggest use cases",
    "start": "123200",
    "end": "124320"
  },
  {
    "text": "is edge computing where we usually run",
    "start": "124320",
    "end": "127360"
  },
  {
    "text": "many smaller",
    "start": "127360",
    "end": "128000"
  },
  {
    "text": "clusters distributed across multiple",
    "start": "128000",
    "end": "130000"
  },
  {
    "text": "locations",
    "start": "130000",
    "end": "131200"
  },
  {
    "text": "uh because of flow latency requirements",
    "start": "131200",
    "end": "135599"
  },
  {
    "text": "so let's start our multi-cluster service",
    "start": "135840",
    "end": "138080"
  },
  {
    "text": "deployment story with the necessary",
    "start": "138080",
    "end": "139760"
  },
  {
    "text": "infrastructure for running and managing",
    "start": "139760",
    "end": "141520"
  },
  {
    "text": "multiple",
    "start": "141520",
    "end": "142000"
  },
  {
    "text": "clusters for that each cloud provider",
    "start": "142000",
    "end": "145599"
  },
  {
    "text": "usually provides their own solution",
    "start": "145599",
    "end": "147920"
  },
  {
    "text": "but if you wanted to automate operation",
    "start": "147920",
    "end": "150640"
  },
  {
    "text": "of many",
    "start": "150640",
    "end": "151360"
  },
  {
    "text": "clusters across multiple regions and",
    "start": "151360",
    "end": "154239"
  },
  {
    "text": "different cloud providers",
    "start": "154239",
    "end": "155680"
  },
  {
    "text": "including on-premises infrastructure and",
    "start": "155680",
    "end": "158480"
  },
  {
    "text": "do that",
    "start": "158480",
    "end": "159040"
  },
  {
    "text": "all by a single pane of glass or a",
    "start": "159040",
    "end": "161200"
  },
  {
    "text": "single api endpoint",
    "start": "161200",
    "end": "162959"
  },
  {
    "text": "i really recommend you to take a look at",
    "start": "162959",
    "end": "164959"
  },
  {
    "text": "the open source",
    "start": "164959",
    "end": "166160"
  },
  {
    "text": "kubernetes kubernetes platform which can",
    "start": "166160",
    "end": "168720"
  },
  {
    "text": "easily do it for you",
    "start": "168720",
    "end": "171200"
  },
  {
    "text": "okay let's assume that we have our",
    "start": "171200",
    "end": "173280"
  },
  {
    "text": "hundreds or thousands of clusters",
    "start": "173280",
    "end": "174959"
  },
  {
    "text": "running",
    "start": "174959",
    "end": "176080"
  },
  {
    "text": "now let's talk about distributing some",
    "start": "176080",
    "end": "177680"
  },
  {
    "text": "workloads on them",
    "start": "177680",
    "end": "179120"
  },
  {
    "text": "the kubernetes sigmatic cluster provides",
    "start": "179120",
    "end": "181280"
  },
  {
    "text": "two possible solutions for that",
    "start": "181280",
    "end": "183519"
  },
  {
    "text": "the other one is called cubefet it aims",
    "start": "183519",
    "end": "186319"
  },
  {
    "text": "to solve much more than just",
    "start": "186319",
    "end": "187760"
  },
  {
    "text": "multi-cluster application deployment",
    "start": "187760",
    "end": "190319"
  },
  {
    "text": "for instance it also aims to solve",
    "start": "190319",
    "end": "192159"
  },
  {
    "text": "scheduling dns",
    "start": "192159",
    "end": "193599"
  },
  {
    "text": "policies etc it is widely used but",
    "start": "193599",
    "end": "197360"
  },
  {
    "text": "quite complex to use the newer concept",
    "start": "197360",
    "end": "200400"
  },
  {
    "text": "is called work api it is a simpler",
    "start": "200400",
    "end": "202640"
  },
  {
    "text": "approach for deploying workloads to",
    "start": "202640",
    "end": "204159"
  },
  {
    "text": "clusters",
    "start": "204159",
    "end": "205920"
  },
  {
    "text": "for instance it does not cover cluster",
    "start": "205920",
    "end": "207840"
  },
  {
    "text": "registrations or scheduling",
    "start": "207840",
    "end": "210159"
  },
  {
    "text": "but at this point it is just the api",
    "start": "210159",
    "end": "212000"
  },
  {
    "text": "definition without any implementation",
    "start": "212000",
    "end": "214799"
  },
  {
    "text": "it is based on the work custom resource",
    "start": "214799",
    "end": "216560"
  },
  {
    "text": "definition which can contain a list of",
    "start": "216560",
    "end": "218560"
  },
  {
    "text": "resources that should be applied to a",
    "start": "218560",
    "end": "220239"
  },
  {
    "text": "target cluster",
    "start": "220239",
    "end": "222080"
  },
  {
    "text": "on the right side of the slide you can",
    "start": "222080",
    "end": "223519"
  },
  {
    "text": "see how the work",
    "start": "223519",
    "end": "225120"
  },
  {
    "text": "api custom resource may look like it",
    "start": "225120",
    "end": "227840"
  },
  {
    "text": "refers to a specific cluster",
    "start": "227840",
    "end": "229599"
  },
  {
    "text": "and in the workload manifests section it",
    "start": "229599",
    "end": "232239"
  },
  {
    "text": "contains a config map",
    "start": "232239",
    "end": "234319"
  },
  {
    "text": "both approaches share some common",
    "start": "234319",
    "end": "236159"
  },
  {
    "text": "concepts they contain a single source of",
    "start": "236159",
    "end": "238319"
  },
  {
    "text": "true from where the",
    "start": "238319",
    "end": "239360"
  },
  {
    "text": "workload manifests are propagated into",
    "start": "239360",
    "end": "242080"
  },
  {
    "text": "managed clusters",
    "start": "242080",
    "end": "243599"
  },
  {
    "text": "and a control loop which applies",
    "start": "243599",
    "end": "245360"
  },
  {
    "text": "resources and tracks their status",
    "start": "245360",
    "end": "249200"
  },
  {
    "text": "now we are getting to the cube carry",
    "start": "249840",
    "end": "251360"
  },
  {
    "text": "project which we created in kubermatic",
    "start": "251360",
    "end": "254879"
  },
  {
    "text": "it builds on similar concepts as the",
    "start": "254879",
    "end": "257040"
  },
  {
    "text": "previously mentioned solutions",
    "start": "257040",
    "end": "259519"
  },
  {
    "text": "there is one management cluster which is",
    "start": "259519",
    "end": "261519"
  },
  {
    "text": "our single source of true",
    "start": "261519",
    "end": "263120"
  },
  {
    "text": "we call it service hub and there is",
    "start": "263120",
    "end": "266080"
  },
  {
    "text": "there are multiple service clusters that",
    "start": "266080",
    "end": "268080"
  },
  {
    "text": "can",
    "start": "268080",
    "end": "268560"
  },
  {
    "text": "run application workloads the difference",
    "start": "268560",
    "end": "271600"
  },
  {
    "text": "is that",
    "start": "271600",
    "end": "272720"
  },
  {
    "text": "by design it only works with kubernetes",
    "start": "272720",
    "end": "274880"
  },
  {
    "text": "operators",
    "start": "274880",
    "end": "276400"
  },
  {
    "text": "application operators run in the service",
    "start": "276400",
    "end": "278320"
  },
  {
    "text": "clusters",
    "start": "278320",
    "end": "279919"
  },
  {
    "text": "carrier discovers their custom resource",
    "start": "279919",
    "end": "281840"
  },
  {
    "text": "definitions and make them available for",
    "start": "281840",
    "end": "283919"
  },
  {
    "text": "users in the service app",
    "start": "283919",
    "end": "286320"
  },
  {
    "text": "and cubecad then propagates the custom",
    "start": "286320",
    "end": "288560"
  },
  {
    "text": "resources from the service app to",
    "start": "288560",
    "end": "290320"
  },
  {
    "text": "service clusters to drive the operators",
    "start": "290320",
    "end": "292400"
  },
  {
    "text": "running in them",
    "start": "292400",
    "end": "294160"
  },
  {
    "text": "finally keep carrier has built in",
    "start": "294160",
    "end": "296000"
  },
  {
    "text": "multi-tenancy",
    "start": "296000",
    "end": "297199"
  },
  {
    "text": "so multiple service provider and",
    "start": "297199",
    "end": "298800"
  },
  {
    "text": "multiple service consumer accounts are",
    "start": "298800",
    "end": "300479"
  },
  {
    "text": "supported",
    "start": "300479",
    "end": "303120"
  },
  {
    "text": "the reason why we decided to use",
    "start": "304000",
    "end": "305520"
  },
  {
    "text": "operators in cubecarrier",
    "start": "305520",
    "end": "307840"
  },
  {
    "text": "to build our multi-cluster application",
    "start": "307840",
    "end": "309680"
  },
  {
    "text": "management platform",
    "start": "309680",
    "end": "311120"
  },
  {
    "text": "is that operators help us to automate",
    "start": "311120",
    "end": "313120"
  },
  {
    "text": "full application lifecycle within a",
    "start": "313120",
    "end": "315120"
  },
  {
    "text": "cluster",
    "start": "315120",
    "end": "316160"
  },
  {
    "text": "that includes deployment upgrades",
    "start": "316160",
    "end": "317919"
  },
  {
    "text": "backups etc",
    "start": "317919",
    "end": "320160"
  },
  {
    "text": "and at the scale of hundreds of or",
    "start": "320160",
    "end": "322560"
  },
  {
    "text": "thousands of clusters",
    "start": "322560",
    "end": "324560"
  },
  {
    "text": "it is really necessary to have this",
    "start": "324560",
    "end": "326080"
  },
  {
    "text": "automation in place managing individual",
    "start": "326080",
    "end": "328160"
  },
  {
    "text": "kubernetes resources for each",
    "start": "328160",
    "end": "329919"
  },
  {
    "text": "application",
    "start": "329919",
    "end": "331680"
  },
  {
    "text": "in every single cluster just cannot work",
    "start": "331680",
    "end": "334000"
  },
  {
    "text": "at this scale",
    "start": "334000",
    "end": "336560"
  },
  {
    "text": "this picture illustrates how keepcare",
    "start": "336560",
    "end": "338479"
  },
  {
    "text": "works from a higher level",
    "start": "338479",
    "end": "340960"
  },
  {
    "text": "the service users interact only with the",
    "start": "340960",
    "end": "342960"
  },
  {
    "text": "management cluster like kubernetes apis",
    "start": "342960",
    "end": "346800"
  },
  {
    "text": "they deploy custom resources derived",
    "start": "346800",
    "end": "349120"
  },
  {
    "text": "from the original",
    "start": "349120",
    "end": "350400"
  },
  {
    "text": "crds provided by application operators",
    "start": "350400",
    "end": "352880"
  },
  {
    "text": "running in the service clusters",
    "start": "352880",
    "end": "355280"
  },
  {
    "text": "gibb carrier then distributes those",
    "start": "355280",
    "end": "357840"
  },
  {
    "text": "custom resources across clusters",
    "start": "357840",
    "end": "360400"
  },
  {
    "text": "which drives the operators running in",
    "start": "360400",
    "end": "362160"
  },
  {
    "text": "them and operators in the",
    "start": "362160",
    "end": "364800"
  },
  {
    "text": "service clusters deploy and manage the",
    "start": "364800",
    "end": "366800"
  },
  {
    "text": "application instances",
    "start": "366800",
    "end": "368080"
  },
  {
    "text": "based on the content of the custom",
    "start": "368080",
    "end": "369759"
  },
  {
    "text": "resources deployed by cubecarrier",
    "start": "369759",
    "end": "374080"
  },
  {
    "text": "this slide shows how multi-tenancy works",
    "start": "374639",
    "end": "377360"
  },
  {
    "text": "with cubecarrier",
    "start": "377360",
    "end": "378639"
  },
  {
    "text": "as you can see keepcare supports",
    "start": "378639",
    "end": "380720"
  },
  {
    "text": "multiple service provider and service",
    "start": "380720",
    "end": "382560"
  },
  {
    "text": "consumer accounts",
    "start": "382560",
    "end": "384000"
  },
  {
    "text": "which are separated by namespaces also",
    "start": "384000",
    "end": "387280"
  },
  {
    "text": "users within each account get proper",
    "start": "387280",
    "end": "389680"
  },
  {
    "text": "kubernetes arbitrals set up and assign",
    "start": "389680",
    "end": "392840"
  },
  {
    "text": "automatically",
    "start": "392840",
    "end": "394240"
  },
  {
    "text": "we have three personas illustrated on",
    "start": "394240",
    "end": "396080"
  },
  {
    "text": "this picture",
    "start": "396080",
    "end": "397280"
  },
  {
    "text": "the platform operator operates uh the",
    "start": "397280",
    "end": "400240"
  },
  {
    "text": "management cluster and manages the keep",
    "start": "400240",
    "end": "402160"
  },
  {
    "text": "carry installation itself",
    "start": "402160",
    "end": "404160"
  },
  {
    "text": "and also manages the carrier accounts",
    "start": "404160",
    "end": "408639"
  },
  {
    "text": "the service provider manages service",
    "start": "408639",
    "end": "410960"
  },
  {
    "text": "clusters",
    "start": "410960",
    "end": "412080"
  },
  {
    "text": "operators running in the service",
    "start": "412080",
    "end": "413680"
  },
  {
    "text": "clusters and registers the",
    "start": "413680",
    "end": "415919"
  },
  {
    "text": "services or their customer resource",
    "start": "415919",
    "end": "418479"
  },
  {
    "text": "definitions",
    "start": "418479",
    "end": "419599"
  },
  {
    "text": "in the service app the service consumers",
    "start": "419599",
    "end": "423680"
  },
  {
    "text": "interact only with the management",
    "start": "423680",
    "end": "425039"
  },
  {
    "text": "cluster where they request and manage",
    "start": "425039",
    "end": "427199"
  },
  {
    "text": "their service instances",
    "start": "427199",
    "end": "430400"
  },
  {
    "text": "okay so now we have our hundreds or",
    "start": "431360",
    "end": "434479"
  },
  {
    "text": "thousands of clusters running",
    "start": "434479",
    "end": "436000"
  },
  {
    "text": "and we can automate the deployment of",
    "start": "436000",
    "end": "437680"
  },
  {
    "text": "applications into them",
    "start": "437680",
    "end": "439520"
  },
  {
    "text": "via our central service app now let's",
    "start": "439520",
    "end": "442479"
  },
  {
    "text": "talk about how the applications can talk",
    "start": "442479",
    "end": "444639"
  },
  {
    "text": "to each other",
    "start": "444639",
    "end": "445360"
  },
  {
    "text": "across these clusters the kubernetes",
    "start": "445360",
    "end": "448960"
  },
  {
    "text": "multi-cluster",
    "start": "448960",
    "end": "450319"
  },
  {
    "text": "provides a solution for that as well and",
    "start": "450319",
    "end": "452639"
  },
  {
    "text": "that is called multi-cluster services",
    "start": "452639",
    "end": "454560"
  },
  {
    "text": "api",
    "start": "454560",
    "end": "456080"
  },
  {
    "text": "it extends the kubernetes service",
    "start": "456080",
    "end": "457919"
  },
  {
    "text": "concept across multiple clusters",
    "start": "457919",
    "end": "461280"
  },
  {
    "text": "in the provider cluster services have to",
    "start": "461280",
    "end": "463280"
  },
  {
    "text": "be explicitly exported",
    "start": "463280",
    "end": "465520"
  },
  {
    "text": "using a service export customer resource",
    "start": "465520",
    "end": "468879"
  },
  {
    "text": "the multi-cluster services",
    "start": "468879",
    "end": "470240"
  },
  {
    "text": "implementation that proper then",
    "start": "470240",
    "end": "472000"
  },
  {
    "text": "propagates",
    "start": "472000",
    "end": "473280"
  },
  {
    "text": "the service export into service imports",
    "start": "473280",
    "end": "476240"
  },
  {
    "text": "in all clusters in the cluster set",
    "start": "476240",
    "end": "479360"
  },
  {
    "text": "and the exported service will then",
    "start": "479360",
    "end": "481759"
  },
  {
    "text": "become accessible from each cluster in",
    "start": "481759",
    "end": "484000"
  },
  {
    "text": "the cluster set at",
    "start": "484000",
    "end": "485680"
  },
  {
    "text": "the dns name service name dot",
    "start": "485680",
    "end": "490319"
  },
  {
    "text": "servicenamespace.sbc.clusterset",
    "start": "490840",
    "end": "493840"
  },
  {
    "text": "an open source project which implements",
    "start": "494160",
    "end": "496160"
  },
  {
    "text": "this api is",
    "start": "496160",
    "end": "497280"
  },
  {
    "text": "called submariner io i will use this",
    "start": "497280",
    "end": "499919"
  },
  {
    "text": "project in my demo",
    "start": "499919",
    "end": "502400"
  },
  {
    "text": "okay now i would like to show you a demo",
    "start": "502400",
    "end": "504720"
  },
  {
    "text": "of multi-cluster application management",
    "start": "504720",
    "end": "506720"
  },
  {
    "text": "with cubecarrier",
    "start": "506720",
    "end": "508240"
  },
  {
    "text": "combined with multi-cluster networking",
    "start": "508240",
    "end": "510560"
  },
  {
    "text": "with submariner",
    "start": "510560",
    "end": "513200"
  },
  {
    "text": "the demo topology would be similar to",
    "start": "513200",
    "end": "515039"
  },
  {
    "text": "the picture that i have already",
    "start": "515039",
    "end": "516320"
  },
  {
    "text": "described",
    "start": "516320",
    "end": "517599"
  },
  {
    "text": "we'll have one management cluster that",
    "start": "517599",
    "end": "520159"
  },
  {
    "text": "we'll use as our service app",
    "start": "520159",
    "end": "522560"
  },
  {
    "text": "and three service clusters where we'll",
    "start": "522560",
    "end": "524399"
  },
  {
    "text": "be deploying our workloads",
    "start": "524399",
    "end": "526720"
  },
  {
    "text": "for the demo we'll use the redis",
    "start": "526720",
    "end": "528480"
  },
  {
    "text": "database as our managed application",
    "start": "528480",
    "end": "531680"
  },
  {
    "text": "we will run submariner across all four",
    "start": "531680",
    "end": "533600"
  },
  {
    "text": "clusters to provide multi-cluster",
    "start": "533600",
    "end": "535440"
  },
  {
    "text": "services connectivity",
    "start": "535440",
    "end": "537920"
  },
  {
    "text": "okay so what you can see here is the",
    "start": "537920",
    "end": "539839"
  },
  {
    "text": "kubernete kubernetes platform",
    "start": "539839",
    "end": "541600"
  },
  {
    "text": "where i have created four clusters each",
    "start": "541600",
    "end": "544399"
  },
  {
    "text": "one had a different cloud provider",
    "start": "544399",
    "end": "546560"
  },
  {
    "text": "in a different region one of the",
    "start": "546560",
    "end": "548720"
  },
  {
    "text": "clusters",
    "start": "548720",
    "end": "549680"
  },
  {
    "text": "i'll be using is a management cluster",
    "start": "549680",
    "end": "551600"
  },
  {
    "text": "that will be our service hub through",
    "start": "551600",
    "end": "553200"
  },
  {
    "text": "which we'll manage the deployment of",
    "start": "553200",
    "end": "554959"
  },
  {
    "text": "applications into",
    "start": "554959",
    "end": "556399"
  },
  {
    "text": "three service clusters so let me go into",
    "start": "556399",
    "end": "559200"
  },
  {
    "text": "the console",
    "start": "559200",
    "end": "560800"
  },
  {
    "text": "in the top left corner you can see uh",
    "start": "560800",
    "end": "563360"
  },
  {
    "text": "the management cluster",
    "start": "563360",
    "end": "565120"
  },
  {
    "text": "and then we have three service clusters",
    "start": "565120",
    "end": "567120"
  },
  {
    "text": "here so it's cluster one",
    "start": "567120",
    "end": "569040"
  },
  {
    "text": "two and three",
    "start": "569040",
    "end": "572399"
  },
  {
    "text": "the cube carrier has been already",
    "start": "572399",
    "end": "574240"
  },
  {
    "text": "installed in the management cluster",
    "start": "574240",
    "end": "576080"
  },
  {
    "text": "and the service clusters have been",
    "start": "576080",
    "end": "578240"
  },
  {
    "text": "registered in the",
    "start": "578240",
    "end": "579600"
  },
  {
    "text": "cubecarrier management cluster also",
    "start": "579600",
    "end": "582880"
  },
  {
    "text": "the submariner have been installed in",
    "start": "582880",
    "end": "585040"
  },
  {
    "text": "each one of the clusters",
    "start": "585040",
    "end": "587040"
  },
  {
    "text": "so the multicluster services should be",
    "start": "587040",
    "end": "589519"
  },
  {
    "text": "working",
    "start": "589519",
    "end": "590560"
  },
  {
    "text": "when we'll need them so",
    "start": "590560",
    "end": "593680"
  },
  {
    "text": "let me start the demo with showing you",
    "start": "593680",
    "end": "597200"
  },
  {
    "text": "the cubecarrier accounts that i have",
    "start": "597200",
    "end": "600320"
  },
  {
    "text": "created",
    "start": "600320",
    "end": "602160"
  },
  {
    "text": "so we'll have three keep clear accounts",
    "start": "602160",
    "end": "604320"
  },
  {
    "text": "uh",
    "start": "604320",
    "end": "605360"
  },
  {
    "text": "in this demo uh one of them will be the",
    "start": "605360",
    "end": "608079"
  },
  {
    "text": "service provider account",
    "start": "608079",
    "end": "609839"
  },
  {
    "text": "and then we will have two tenant",
    "start": "609839",
    "end": "611360"
  },
  {
    "text": "accounts so the service provider will",
    "start": "611360",
    "end": "613120"
  },
  {
    "text": "provide",
    "start": "613120",
    "end": "614560"
  },
  {
    "text": "a ready service to the tenants",
    "start": "614560",
    "end": "619519"
  },
  {
    "text": "in each one of the user clusters",
    "start": "619519",
    "end": "622640"
  },
  {
    "text": "in service clusters i deployed the",
    "start": "622640",
    "end": "624800"
  },
  {
    "text": "radius operator already",
    "start": "624800",
    "end": "627279"
  },
  {
    "text": "but so far nowhere these instances are",
    "start": "627279",
    "end": "630800"
  },
  {
    "text": "running in any of those clusters",
    "start": "630800",
    "end": "634880"
  },
  {
    "text": "at this point we can check via cube ctl",
    "start": "635360",
    "end": "639040"
  },
  {
    "text": "get catalog entry",
    "start": "639040",
    "end": "640800"
  },
  {
    "text": "that cubecarrier has already discovered",
    "start": "640800",
    "end": "644000"
  },
  {
    "text": "the custom resource definitions in the",
    "start": "644000",
    "end": "646399"
  },
  {
    "text": "service clusters",
    "start": "646399",
    "end": "647760"
  },
  {
    "text": "so uh so in our catalog entries",
    "start": "647760",
    "end": "651600"
  },
  {
    "text": "list we can see redis in cluster one red",
    "start": "651600",
    "end": "654480"
  },
  {
    "text": "is in cluster two and release",
    "start": "654480",
    "end": "656160"
  },
  {
    "text": "in cluster three which are ready uh for",
    "start": "656160",
    "end": "659680"
  },
  {
    "text": "for using by our tenants",
    "start": "659680",
    "end": "663360"
  },
  {
    "text": "so at this point our tenants",
    "start": "663360",
    "end": "666560"
  },
  {
    "text": "can request an instance of",
    "start": "666560",
    "end": "669760"
  },
  {
    "text": "redis in any of those service clusters",
    "start": "669760",
    "end": "674000"
  },
  {
    "text": "and the way how they can do it is uh by",
    "start": "674000",
    "end": "677279"
  },
  {
    "text": "creating a custom resource which is",
    "start": "677279",
    "end": "680240"
  },
  {
    "text": "derived from the",
    "start": "680240",
    "end": "681279"
  },
  {
    "text": "original redis custom resource",
    "start": "681279",
    "end": "683839"
  },
  {
    "text": "definition",
    "start": "683839",
    "end": "685120"
  },
  {
    "text": "uh but the api version refers to a",
    "start": "685120",
    "end": "688240"
  },
  {
    "text": "particular cluster and a particular",
    "start": "688240",
    "end": "690480"
  },
  {
    "text": "service provider",
    "start": "690480",
    "end": "692560"
  },
  {
    "text": "so in this case by using this",
    "start": "692560",
    "end": "695600"
  },
  {
    "text": "custom resource we will deploy a redis",
    "start": "695600",
    "end": "698160"
  },
  {
    "text": "instance",
    "start": "698160",
    "end": "698720"
  },
  {
    "text": "in service cluster one and the spec of",
    "start": "698720",
    "end": "702000"
  },
  {
    "text": "the of this custom resource contains uh",
    "start": "702000",
    "end": "704720"
  },
  {
    "text": "some",
    "start": "704720",
    "end": "705360"
  },
  {
    "text": "some uh information uh",
    "start": "705360",
    "end": "708399"
  },
  {
    "text": "needed to deploy already instance such",
    "start": "708399",
    "end": "710639"
  },
  {
    "text": "as a password for accessing the",
    "start": "710639",
    "end": "712800"
  },
  {
    "text": "database that we will use later",
    "start": "712800",
    "end": "716560"
  },
  {
    "text": "so let me now use this",
    "start": "716560",
    "end": "721279"
  },
  {
    "text": "deployment yaml file and deploy a",
    "start": "721279",
    "end": "724800"
  },
  {
    "text": "redis instance in the service cluster",
    "start": "724800",
    "end": "727600"
  },
  {
    "text": "one",
    "start": "727600",
    "end": "728720"
  },
  {
    "text": "as a tenant a uh",
    "start": "728720",
    "end": "732880"
  },
  {
    "text": "to make uh to make sure that we can see",
    "start": "732880",
    "end": "735440"
  },
  {
    "text": "what happens i'll run a watch commands",
    "start": "735440",
    "end": "737839"
  },
  {
    "text": "here in the service clusters one two",
    "start": "737839",
    "end": "740880"
  },
  {
    "text": "and three uh they'll be watching for all",
    "start": "740880",
    "end": "743519"
  },
  {
    "text": "ports",
    "start": "743519",
    "end": "744000"
  },
  {
    "text": "and uh well we are correcting the the",
    "start": "744000",
    "end": "746880"
  },
  {
    "text": "name redis",
    "start": "746880",
    "end": "747680"
  },
  {
    "text": "in in across all the bots so i'll",
    "start": "747680",
    "end": "750959"
  },
  {
    "text": "now go ahead and fire uh this command",
    "start": "750959",
    "end": "754320"
  },
  {
    "text": "uh so again we'll apply this",
    "start": "754320",
    "end": "757839"
  },
  {
    "text": "custom resource which refers to cluster",
    "start": "757839",
    "end": "761600"
  },
  {
    "text": "one",
    "start": "761600",
    "end": "763440"
  },
  {
    "text": "under tenant a uh and that will create",
    "start": "763440",
    "end": "766639"
  },
  {
    "text": "an redis instance for our tenant",
    "start": "766639",
    "end": "770320"
  },
  {
    "text": "so soon we should be able to see that",
    "start": "770320",
    "end": "772880"
  },
  {
    "text": "the redis instance has been deployed for",
    "start": "772880",
    "end": "774959"
  },
  {
    "text": "tenant a",
    "start": "774959",
    "end": "775839"
  },
  {
    "text": "in the service cluster one similarly we",
    "start": "775839",
    "end": "779519"
  },
  {
    "text": "can",
    "start": "779519",
    "end": "779920"
  },
  {
    "text": "we can request a redis instance for the",
    "start": "779920",
    "end": "782800"
  },
  {
    "text": "for the tenant b",
    "start": "782800",
    "end": "784079"
  },
  {
    "text": "so using the same custom resource",
    "start": "784079",
    "end": "788399"
  },
  {
    "text": "uh under tenant b user",
    "start": "788399",
    "end": "792399"
  },
  {
    "text": "we can request a redis instance for the",
    "start": "792399",
    "end": "794720"
  },
  {
    "text": "tenant b",
    "start": "794720",
    "end": "795839"
  },
  {
    "text": "and as you can see it has been just",
    "start": "795839",
    "end": "797440"
  },
  {
    "text": "started",
    "start": "797440",
    "end": "799839"
  },
  {
    "text": "very similarly we can also deploy some",
    "start": "799839",
    "end": "802079"
  },
  {
    "text": "radius instance uh",
    "start": "802079",
    "end": "803519"
  },
  {
    "text": "in in the service cluster too",
    "start": "803519",
    "end": "806560"
  },
  {
    "text": "so the deployment manifest would look uh",
    "start": "806560",
    "end": "810079"
  },
  {
    "text": "exactly same apart from the api version",
    "start": "810079",
    "end": "813839"
  },
  {
    "text": "where we refer to service cluster 2.",
    "start": "813839",
    "end": "817120"
  },
  {
    "text": "so let me deploy that one as well",
    "start": "817120",
    "end": "820880"
  },
  {
    "text": "and we should see in the service cluster",
    "start": "820880",
    "end": "822880"
  },
  {
    "text": "2 that our",
    "start": "822880",
    "end": "824639"
  },
  {
    "text": "redis instance has been started",
    "start": "824639",
    "end": "828000"
  },
  {
    "text": "okay at this point we have triggered",
    "start": "828000",
    "end": "830959"
  },
  {
    "text": "these instances running into different",
    "start": "830959",
    "end": "832800"
  },
  {
    "text": "clusters",
    "start": "832800",
    "end": "835279"
  },
  {
    "text": "now let's try to connect to those random",
    "start": "835279",
    "end": "838399"
  },
  {
    "text": "instances",
    "start": "838399",
    "end": "839760"
  },
  {
    "text": "from a different cluster so in the",
    "start": "839760",
    "end": "842959"
  },
  {
    "text": "cluster 3",
    "start": "842959",
    "end": "844160"
  },
  {
    "text": "we are not running any radius instance",
    "start": "844160",
    "end": "848000"
  },
  {
    "text": "and potentially we could",
    "start": "848800",
    "end": "852160"
  },
  {
    "text": "we could try to connect to those randy's",
    "start": "852160",
    "end": "855120"
  },
  {
    "text": "instances from this cluster",
    "start": "855120",
    "end": "856639"
  },
  {
    "text": "so in order to do that",
    "start": "856639",
    "end": "859760"
  },
  {
    "text": "we can rely on multi-cluster services",
    "start": "859760",
    "end": "864000"
  },
  {
    "text": "api which is which is implemented",
    "start": "864000",
    "end": "867920"
  },
  {
    "text": "by submariner which is already installed",
    "start": "867920",
    "end": "870480"
  },
  {
    "text": "in our clusters",
    "start": "870480",
    "end": "872560"
  },
  {
    "text": "and so in order to export the service",
    "start": "872560",
    "end": "876959"
  },
  {
    "text": "to a different cluster we should first",
    "start": "876959",
    "end": "880240"
  },
  {
    "text": "review",
    "start": "880240",
    "end": "880880"
  },
  {
    "text": "what are the existing services of our",
    "start": "880880",
    "end": "882800"
  },
  {
    "text": "radius instances",
    "start": "882800",
    "end": "884560"
  },
  {
    "text": "so as we can see we have a radius",
    "start": "884560",
    "end": "886399"
  },
  {
    "text": "instance",
    "start": "886399",
    "end": "887760"
  },
  {
    "text": "service in the tenant a namespace which",
    "start": "887760",
    "end": "890320"
  },
  {
    "text": "is of",
    "start": "890320",
    "end": "891040"
  },
  {
    "text": "type cluster ip and similarly we have",
    "start": "891040",
    "end": "893839"
  },
  {
    "text": "already instance",
    "start": "893839",
    "end": "895600"
  },
  {
    "text": "service in the tenant b namespace which",
    "start": "895600",
    "end": "898399"
  },
  {
    "text": "is of cluster iptype",
    "start": "898399",
    "end": "900240"
  },
  {
    "text": "so in order to export them uh",
    "start": "900240",
    "end": "903839"
  },
  {
    "text": "to other clusters in our cluster",
    "start": "903839",
    "end": "907040"
  },
  {
    "text": "federation i would use",
    "start": "907040",
    "end": "910399"
  },
  {
    "text": "the command subctl export service",
    "start": "910399",
    "end": "913839"
  },
  {
    "text": "substitute is a binary provided by",
    "start": "913839",
    "end": "915760"
  },
  {
    "text": "submariner",
    "start": "915760",
    "end": "917199"
  },
  {
    "text": "but essentially what it does is that it",
    "start": "917199",
    "end": "919519"
  },
  {
    "text": "deploys a",
    "start": "919519",
    "end": "920959"
  },
  {
    "text": "service export custom resource with the",
    "start": "920959",
    "end": "924839"
  },
  {
    "text": "name",
    "start": "924839",
    "end": "926560"
  },
  {
    "text": "with the service name read this instance",
    "start": "926560",
    "end": "929040"
  },
  {
    "text": "and the namespace",
    "start": "929040",
    "end": "930160"
  },
  {
    "text": "uh as as given here",
    "start": "930160",
    "end": "935120"
  },
  {
    "text": "similarly we can also export",
    "start": "935120",
    "end": "939199"
  },
  {
    "text": "the other service instance in the tenant",
    "start": "939199",
    "end": "942399"
  },
  {
    "text": "b namespace",
    "start": "942399",
    "end": "945120"
  },
  {
    "text": "and at this point we should be able to",
    "start": "945839",
    "end": "948639"
  },
  {
    "text": "verify",
    "start": "948639",
    "end": "949519"
  },
  {
    "text": "that service export exports have been",
    "start": "949519",
    "end": "952639"
  },
  {
    "text": "properly created by showing keep cattle",
    "start": "952639",
    "end": "956240"
  },
  {
    "text": "get service exports",
    "start": "956240",
    "end": "957759"
  },
  {
    "text": "and yes as you can see our",
    "start": "957759",
    "end": "961519"
  },
  {
    "text": "radish instances in tenant a and tenant",
    "start": "961519",
    "end": "964240"
  },
  {
    "text": "b namespaces have been",
    "start": "964240",
    "end": "966839"
  },
  {
    "text": "exported",
    "start": "966839",
    "end": "969519"
  },
  {
    "text": "similarly we can do a service export",
    "start": "969519",
    "end": "973440"
  },
  {
    "text": "in the cluster 2 for there this instance",
    "start": "973440",
    "end": "977199"
  },
  {
    "text": "running in there",
    "start": "977199",
    "end": "979680"
  },
  {
    "text": "and again we can verify that",
    "start": "979680",
    "end": "983040"
  },
  {
    "text": "that service export customer resources",
    "start": "983040",
    "end": "985680"
  },
  {
    "text": "have been properly created in this",
    "start": "985680",
    "end": "987120"
  },
  {
    "text": "cluster",
    "start": "987120",
    "end": "988880"
  },
  {
    "text": "at this point in the cluster 3",
    "start": "988880",
    "end": "992000"
  },
  {
    "text": "we should be able to see",
    "start": "992000",
    "end": "995279"
  },
  {
    "text": "the service imports automatically",
    "start": "995279",
    "end": "997360"
  },
  {
    "text": "created",
    "start": "997360",
    "end": "998320"
  },
  {
    "text": "from the exported services in cluster",
    "start": "998320",
    "end": "1001600"
  },
  {
    "text": "one and",
    "start": "1001600",
    "end": "1002160"
  },
  {
    "text": "cluster two and as you can see",
    "start": "1002160",
    "end": "1006320"
  },
  {
    "text": "uh cubecat will get service imports",
    "start": "1006320",
    "end": "1009440"
  },
  {
    "text": "gives us three service imports",
    "start": "1009440",
    "end": "1013360"
  },
  {
    "text": "two in cluster one and one in cluster",
    "start": "1013360",
    "end": "1015600"
  },
  {
    "text": "two",
    "start": "1015600",
    "end": "1016800"
  },
  {
    "text": "so now we should be able to access",
    "start": "1016800",
    "end": "1019839"
  },
  {
    "text": "any of those three services from this",
    "start": "1019839",
    "end": "1022959"
  },
  {
    "text": "cluster",
    "start": "1022959",
    "end": "1023680"
  },
  {
    "text": "so let me exit into a client port",
    "start": "1023680",
    "end": "1026319"
  },
  {
    "text": "running in this",
    "start": "1026319",
    "end": "1027360"
  },
  {
    "text": "cluster and the way how we can",
    "start": "1027360",
    "end": "1030480"
  },
  {
    "text": "connect to those services is using uh",
    "start": "1030480",
    "end": "1033360"
  },
  {
    "text": "dns names",
    "start": "1033360",
    "end": "1034720"
  },
  {
    "text": "uh that refer to original",
    "start": "1034720",
    "end": "1038240"
  },
  {
    "text": "service name original namespace",
    "start": "1038240",
    "end": "1041839"
  },
  {
    "text": "dot service dot cluster set dot local",
    "start": "1041839",
    "end": "1045839"
  },
  {
    "text": "so this uh domain name should we should",
    "start": "1045839",
    "end": "1048799"
  },
  {
    "text": "be able to resolve right now",
    "start": "1048799",
    "end": "1051120"
  },
  {
    "text": "and it seems that resolving works so we",
    "start": "1051120",
    "end": "1053840"
  },
  {
    "text": "can go ahead and try",
    "start": "1053840",
    "end": "1055600"
  },
  {
    "text": "connecting to the transit redis instance",
    "start": "1055600",
    "end": "1058640"
  },
  {
    "text": "uh with the redis cli uh",
    "start": "1058640",
    "end": "1061760"
  },
  {
    "text": "tool uh we are just referring to the",
    "start": "1061760",
    "end": "1064320"
  },
  {
    "text": "exactly same",
    "start": "1064320",
    "end": "1066080"
  },
  {
    "text": "domain name and we are using the",
    "start": "1066080",
    "end": "1068240"
  },
  {
    "text": "password",
    "start": "1068240",
    "end": "1069840"
  },
  {
    "text": "that we specified in our radius custom",
    "start": "1069840",
    "end": "1072880"
  },
  {
    "text": "resource",
    "start": "1072880",
    "end": "1074400"
  },
  {
    "text": "up here so this should work and if it",
    "start": "1074400",
    "end": "1077760"
  },
  {
    "text": "works",
    "start": "1077760",
    "end": "1078640"
  },
  {
    "text": "we should be able to run a ping command",
    "start": "1078640",
    "end": "1081760"
  },
  {
    "text": "and we should get the punk from the",
    "start": "1081760",
    "end": "1083520"
  },
  {
    "text": "server",
    "start": "1083520",
    "end": "1085600"
  },
  {
    "text": "right uh exactly same way we can we can",
    "start": "1085600",
    "end": "1089760"
  },
  {
    "text": "also verify the connectivity to the",
    "start": "1089760",
    "end": "1091919"
  },
  {
    "text": "redis instance in the cluster",
    "start": "1091919",
    "end": "1094000"
  },
  {
    "text": "too so it should just work uh",
    "start": "1094000",
    "end": "1097360"
  },
  {
    "text": "as for the radius instances in the",
    "start": "1097360",
    "end": "1099520"
  },
  {
    "text": "cluster one",
    "start": "1099520",
    "end": "1102320"
  },
  {
    "text": "okay that was it for the demo and for my",
    "start": "1102400",
    "end": "1104799"
  },
  {
    "text": "talk as well",
    "start": "1104799",
    "end": "1106240"
  },
  {
    "text": "if you have any questions feel free to",
    "start": "1106240",
    "end": "1108080"
  },
  {
    "text": "contact me at this email address",
    "start": "1108080",
    "end": "1109840"
  },
  {
    "text": "or via slack right after the session and",
    "start": "1109840",
    "end": "1113120"
  },
  {
    "text": "thank you for",
    "start": "1113120",
    "end": "1113919"
  },
  {
    "text": "watching my talk",
    "start": "1113919",
    "end": "1118480"
  }
]