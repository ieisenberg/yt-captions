[
  {
    "text": "welcome to the cloud native container networking in a double is using CNI",
    "start": "120",
    "end": "5370"
  },
  {
    "text": "plugin session obviously I went for the buzzword bingo here I tried my best to",
    "start": "5370",
    "end": "10740"
  },
  {
    "text": "shove in service mesh and on were in there to make it cooler but I fail on a",
    "start": "10740",
    "end": "16350"
  },
  {
    "text": "serious note I know it's late in the day there's the party to go to and some of",
    "start": "16350",
    "end": "22320"
  },
  {
    "text": "you are jet-lagged including myself and I really appreciate your patience and interest in attending this session we",
    "start": "22320",
    "end": "29820"
  },
  {
    "text": "spent a good part of last year making the container networking story better on",
    "start": "29820",
    "end": "35550"
  },
  {
    "text": "AWS and I hope to share some of these requirements the design choices we had",
    "start": "35550",
    "end": "42960"
  },
  {
    "text": "and how we implemented this using cni",
    "start": "42960",
    "end": "48450"
  },
  {
    "text": "plugins in this session so a bit of",
    "start": "48450",
    "end": "53730"
  },
  {
    "text": "introduction about myself my name is anita diethyl i am an engineer in the elastic container services team my",
    "start": "53730",
    "end": "59879"
  },
  {
    "text": "immediate team mostly focuses on the container execution environment in ECS",
    "start": "59879",
    "end": "65460"
  },
  {
    "text": "so this includes the container runtime we have an easiest agent that manages",
    "start": "65460",
    "end": "72479"
  },
  {
    "text": "the state of containers we also have a number of networking plugins including the cni plugins that are the focus of",
    "start": "72479",
    "end": "78930"
  },
  {
    "text": "today's session my team maintains most of that you can find me on github in",
    "start": "78930",
    "end": "84240"
  },
  {
    "text": "twitter on my alias so the agenda for",
    "start": "84240",
    "end": "90450"
  },
  {
    "text": "today is mostly covering the cni plugins that we wrote for the VPC amazon VPC",
    "start": "90450",
    "end": "98340"
  },
  {
    "text": "which is the software-defined networking solution if you are running in the AWS cloud so i'm going to make certain",
    "start": "98340",
    "end": "103770"
  },
  {
    "text": "assumptions that some of you are already at least have heard some of these terms",
    "start": "103770",
    "end": "109549"
  },
  {
    "text": "before that I would like to go a little bit into the primitives that make up",
    "start": "109549",
    "end": "114899"
  },
  {
    "text": "both container networking and VPC but as with everything in Amazon the biggest",
    "start": "114899",
    "end": "122600"
  },
  {
    "text": "thing I want to share with you today is the requirements that our customers came to us with and how even though these",
    "start": "122600",
    "end": "131640"
  },
  {
    "text": "requirements are not new four containers container certainly",
    "start": "131640",
    "end": "139510"
  },
  {
    "text": "exacerbate the need for some of these primitives that our customers are looking for so in our customer conversations we",
    "start": "139510",
    "end": "149080"
  },
  {
    "text": "heard requirements that could be mostly put into three different buckets the first one is usability so whatever",
    "start": "149080",
    "end": "156550"
  },
  {
    "text": "networking solutions solution that we were going to provide hard to be super easy to use and super easy to integrate",
    "start": "156550",
    "end": "162640"
  },
  {
    "text": "with so what this means is ask developers all you need to say is my",
    "start": "162640",
    "end": "168100"
  },
  {
    "text": "application needs networking and my application needs to communicate with this other set of applications and that",
    "start": "168100",
    "end": "174670"
  },
  {
    "text": "should be it you should be able to use the same abstractions in the cloud as",
    "start": "174670",
    "end": "180040"
  },
  {
    "text": "you use when you're developing code and as an infrastructure provider or a network administrator you should be able",
    "start": "180040",
    "end": "186370"
  },
  {
    "text": "to say that you should be able to integrate with whatever solution we were providing and bring in your own custom",
    "start": "186370",
    "end": "195540"
  },
  {
    "text": "interfaces or higher level constructs or higher level abstractions on top of these things for example if you want to",
    "start": "195540",
    "end": "202150"
  },
  {
    "text": "bring in your own software-defined load balancer solution you should be able to do that if you wanted to bring in your",
    "start": "202150",
    "end": "207340"
  },
  {
    "text": "own service discovery solution you should be able to do that and service discovery is also interesting example",
    "start": "207340",
    "end": "215400"
  },
  {
    "text": "for the next set of requirements which is containers need to communicate with",
    "start": "215400",
    "end": "221500"
  },
  {
    "text": "each other I'm going to use the word container interchangeably with pod in kubernetes",
    "start": "221500",
    "end": "227140"
  },
  {
    "text": "and tasks in easiest so containers need to essentially our applications need to",
    "start": "227140",
    "end": "233350"
  },
  {
    "text": "essentially discover each other and communicate with each other using that IP addresses which hopefully are",
    "start": "233350",
    "end": "239620"
  },
  {
    "text": "natively routable this means that the IP address that you give the container it has to be routable from whatever top of",
    "start": "239620",
    "end": "247180"
  },
  {
    "text": "the rack switch or the router that you maintain the next set of requirements",
    "start": "247180",
    "end": "252310"
  },
  {
    "text": "were around security security is something that our customers care about",
    "start": "252310",
    "end": "257380"
  },
  {
    "text": "deeply and our tenet is being secured by default so what does this mean it means",
    "start": "257380",
    "end": "264460"
  },
  {
    "text": "that container a should be able to isolate its traffic from container B in the sense that container",
    "start": "264460",
    "end": "271420"
  },
  {
    "text": "we shouldn't be able to snoop on or influence the pattern of container a and even from a processor running on the",
    "start": "271420",
    "end": "277990"
  },
  {
    "text": "horse so if you have a rogue process on the host even that should not be able to mess up with your containers traffic the",
    "start": "277990",
    "end": "285340"
  },
  {
    "text": "next part of this is access control being able to enforce network policies by a network administrator rather than",
    "start": "285340",
    "end": "292900"
  },
  {
    "text": "at a user level makes it a lot more secure environment to work with for",
    "start": "292900",
    "end": "299710"
  },
  {
    "text": "example is a network administrator care really about the fact that none of the",
    "start": "299710",
    "end": "305020"
  },
  {
    "text": "containers will respond to any traffic on port 22 or port 80 or something like",
    "start": "305020",
    "end": "312460"
  },
  {
    "text": "that so being able to describe this at the network administrator level was also something that was very important to our",
    "start": "312460",
    "end": "319240"
  },
  {
    "text": "customers the next one is being able to audit that whatever policies you have enforced are actually taking place on",
    "start": "319240",
    "end": "326980"
  },
  {
    "text": "these instances so how do you check that you can enforce these policies and being",
    "start": "326980",
    "end": "334570"
  },
  {
    "text": "able to get alerts when these policies are not being enforced the last one is",
    "start": "334570",
    "end": "339640"
  },
  {
    "text": "being able to have a scalable performance solution which doesn't",
    "start": "339640",
    "end": "345580"
  },
  {
    "text": "follow when you go from 100 containers to 100,000 containers or even to a million containers so just because you",
    "start": "345580",
    "end": "351850"
  },
  {
    "text": "have more endpoints to deal with doesn't mean that your networking solution should follower",
    "start": "351850",
    "end": "356910"
  },
  {
    "text": "similarly you shouldn't suffer any performance regression in terms of low",
    "start": "356910",
    "end": "363790"
  },
  {
    "text": "higher latency lower bandwidth just because you have more endpoints in your network and the last one is monitoring",
    "start": "363790",
    "end": "370930"
  },
  {
    "text": "so being able to identify hotspots and",
    "start": "370930",
    "end": "376890"
  },
  {
    "text": "address them in an automated manner or being able to identify bottlenecks is also something that our customers",
    "start": "376890",
    "end": "384090"
  },
  {
    "text": "brought up as a pain point this also another aspect here even if we as a",
    "start": "384090",
    "end": "390370"
  },
  {
    "text": "network solutions provider can't provide the solution we should provide you the abstraction so that you can build your",
    "start": "390370",
    "end": "395680"
  },
  {
    "text": "own solution on top of this so extensible in a way all",
    "start": "395680",
    "end": "400960"
  },
  {
    "text": "comes into this picture so with these requirements in mind let's look at how",
    "start": "400960",
    "end": "406919"
  },
  {
    "text": "traditionally applications have been able to network with each other so in",
    "start": "406919",
    "end": "413740"
  },
  {
    "text": "this example I have a HTTP daemon process it's listening on port 80 let's",
    "start": "413740",
    "end": "420250"
  },
  {
    "text": "assume that it's bound to the default networking interface or it's 0 the out",
    "start": "420250",
    "end": "426340"
  },
  {
    "text": "outer-box is an ec2 instance this can be a host or a virtual machine or whatever",
    "start": "426340",
    "end": "431410"
  },
  {
    "text": "translates with you the best the default network interface also has an IP address but before the packet actually reaches",
    "start": "431410",
    "end": "437860"
  },
  {
    "text": "the h0 interface it goes through some of the routing rules routing table applies",
    "start": "437860",
    "end": "445630"
  },
  {
    "text": "some of the rules and you also have net filter in Linux which is applying",
    "start": "445630",
    "end": "451000"
  },
  {
    "text": "firewall rules using the IP tables command is typically how you interact with it so all of these together",
    "start": "451000",
    "end": "457440"
  },
  {
    "text": "including the local host interface form what you call a networking stack so if",
    "start": "457440",
    "end": "462880"
  },
  {
    "text": "you zoom in a little bit what's actually happening underneath is all of these networking resources are present in the",
    "start": "462880",
    "end": "469870"
  },
  {
    "text": "default network namespace so namespaces are a construct in Linux where you can",
    "start": "469870",
    "end": "475870"
  },
  {
    "text": "create logical copies of your ease of a particular resource network namespaces let you create logical copies of the",
    "start": "475870",
    "end": "482469"
  },
  {
    "text": "networking resource and by default all processes inherit namespace from their parent which is why HTTP daemon which is",
    "start": "482469",
    "end": "489940"
  },
  {
    "text": "a child of the init process has access to all the networking resources that init process has access to so if you run",
    "start": "489940",
    "end": "497139"
  },
  {
    "text": "more processes on this host all of them can discover each other using the local host interface because they're all",
    "start": "497139",
    "end": "503669"
  },
  {
    "text": "sharing this default network namespace containers change this paradigm where",
    "start": "503669",
    "end": "509620"
  },
  {
    "text": "you can have multiple network namespaces and half processors belong to these",
    "start": "509620",
    "end": "514839"
  },
  {
    "text": "namespaces so by default these namespaces are isolated from each other so if I wanted to run two HTTP demons on",
    "start": "514839",
    "end": "523240"
  },
  {
    "text": "on one host I would instead create a container and the second HTTP daemon is",
    "start": "523240",
    "end": "531190"
  },
  {
    "text": "running within the container and the first one is in the default namespace so now I",
    "start": "531190",
    "end": "537040"
  },
  {
    "text": "essentially have two HTTP demons running on the same host and I didn't have to",
    "start": "537040",
    "end": "542410"
  },
  {
    "text": "change the port number on which these processes were listening one because that's the other alternative solution",
    "start": "542410",
    "end": "547810"
  },
  {
    "text": "right if I want to run three-headed repiy demons on the default namespace I essentially have to change the port",
    "start": "547810",
    "end": "553029"
  },
  {
    "text": "numbers and that's not a scalable solution or a manageable solution so now",
    "start": "553029",
    "end": "560230"
  },
  {
    "text": "we have this new container it has its own network namespace this creepy daemon running within it but it is it's still",
    "start": "560230",
    "end": "567009"
  },
  {
    "text": "not connected to anything so how do you connect namespaces together you use something called virtual Ethernet base",
    "start": "567009",
    "end": "573399"
  },
  {
    "text": "or read bits in Linux we Paes establish a tunnel or a pipe between two network",
    "start": "573399",
    "end": "579579"
  },
  {
    "text": "namespaces they look act and feel like Ethernet devices but they always exist",
    "start": "579579",
    "end": "584829"
  },
  {
    "text": "in pairs so here we have one end of the vapor which is VEC one connected to the",
    "start": "584829",
    "end": "591579"
  },
  {
    "text": "other end which is VC one peer and both of them have IP addresses associated with them and the VEC one pair actually",
    "start": "591579",
    "end": "599439"
  },
  {
    "text": "belongs to an overlay this can also be a bridge or an that I'm using the term overlay in a generic sense here and you",
    "start": "599439",
    "end": "608110"
  },
  {
    "text": "have a connection from this overlay to the at zero interface and now this httpd",
    "start": "608110",
    "end": "613899"
  },
  {
    "text": "container can receive traffic from the internet or wherever this endpoint is",
    "start": "613899",
    "end": "619779"
  },
  {
    "text": "connected to using this V pairs so if we zoom out a little bit more this is a",
    "start": "619779",
    "end": "627189"
  },
  {
    "text": "scenario in which you have multiple containers running in multiple instances",
    "start": "627189",
    "end": "632920"
  },
  {
    "text": "so again this you can replace virtual machine or host for this instance but",
    "start": "632920",
    "end": "640889"
  },
  {
    "text": "the underlying thing here is these containers are connected with each other",
    "start": "640889",
    "end": "647290"
  },
  {
    "text": "using an overlay Network so in an overlay network you have generally some",
    "start": "647290",
    "end": "655630"
  },
  {
    "text": "sort of a proxy running in the default namespace that knows how to communicate with container one the same proxy also",
    "start": "655630",
    "end": "662949"
  },
  {
    "text": "runs here knows how to communicate with container two proxies maintain the state of the world",
    "start": "662949",
    "end": "668380"
  },
  {
    "text": "laughs they do the address translation packet forwarding and everything so in",
    "start": "668380",
    "end": "675100"
  },
  {
    "text": "the world of overlay networking let's look at how packets are usually travels",
    "start": "675100",
    "end": "681070"
  },
  {
    "text": "so here c1 wants to send a packet to c2 and the",
    "start": "681070",
    "end": "690550"
  },
  {
    "text": "very first hop for the packet is the virtual Ethernet pair and the next hop for the packet is the overlay network",
    "start": "690550",
    "end": "697350"
  },
  {
    "text": "which is the virtual Ethernet device the",
    "start": "697350",
    "end": "702580"
  },
  {
    "text": "peel of the one on which the packet was sent from and then something interesting happens the proxy will still forward the",
    "start": "702580",
    "end": "709780"
  },
  {
    "text": "packet through at zero and then eventually the packet ends up on the",
    "start": "709780",
    "end": "715600"
  },
  {
    "text": "other host assuming these two hosts are connected and then sorry",
    "start": "715600",
    "end": "722430"
  },
  {
    "text": "and then the packet the proxy that's",
    "start": "723150",
    "end": "729790"
  },
  {
    "text": "running here or the overlays data plane component forwards the packet to the virtual Ethernet pair and then it",
    "start": "729790",
    "end": "736150"
  },
  {
    "text": "eventually ends up on the destination container so this process took roughly",
    "start": "736150",
    "end": "742180"
  },
  {
    "text": "five hops depending on your overlay solution this could be less or more some",
    "start": "742180",
    "end": "750330"
  },
  {
    "text": "providers have lesser number of hops because they optimize on some routes others do not",
    "start": "750330",
    "end": "756300"
  },
  {
    "text": "so how did we how did this overlays solution fit into our requirements so we",
    "start": "756300",
    "end": "763360"
  },
  {
    "text": "were still working with very simple abstractions discovery was still easy because all the containers were getting",
    "start": "763360",
    "end": "769060"
  },
  {
    "text": "native IP addresses but we lost on security and we lost big time because all of the traffic in this was flowing",
    "start": "769060",
    "end": "776680"
  },
  {
    "text": "through this h0 on this host and being",
    "start": "776680",
    "end": "781840"
  },
  {
    "text": "received through h0 on this host isolation was very hard for us to do and",
    "start": "781840",
    "end": "788200"
  },
  {
    "text": "the same reason is why access control was also very hard for us to do because when you have traffic from multiple",
    "start": "788200",
    "end": "795310"
  },
  {
    "text": "streams exiting and entering through the same through one network interface you can't essentially enforce access",
    "start": "795310",
    "end": "801160"
  },
  {
    "text": "control rules at a finer granularity also because",
    "start": "801160",
    "end": "806290"
  },
  {
    "text": "overlays have to maintain the state of the world all the time and if one of the components die they are usually not",
    "start": "806290",
    "end": "813820"
  },
  {
    "text": "highly scalable although some vendors do have solutions that do really scale well",
    "start": "813820",
    "end": "819220"
  },
  {
    "text": "and we suffered big time on performance as well because all of the traffic is flowing through one endpoint there's a",
    "start": "819220",
    "end": "826390"
  },
  {
    "text": "single point of failure and this means that it's constricted both at a network",
    "start": "826390",
    "end": "834550"
  },
  {
    "text": "path and also if something bad happens to the network interface then all of the",
    "start": "834550",
    "end": "839740"
  },
  {
    "text": "containers lose their network connectivity so we went back looked at how ec2 instances are networked and see",
    "start": "839740",
    "end": "850029"
  },
  {
    "text": "if we can get any inspiration from this so this is a typical ec2 instance setup",
    "start": "850029",
    "end": "855130"
  },
  {
    "text": "we have V PC which stands for virtual private cloud which is a",
    "start": "855130",
    "end": "860170"
  },
  {
    "text": "software-defined network all customers get one in AWS and V PC usually has a",
    "start": "860170",
    "end": "867160"
  },
  {
    "text": "large IP address range it's almost like your data center networking and you have",
    "start": "867160",
    "end": "874950"
  },
  {
    "text": "so by default it gets a slash 16 range which means we can create 65,000 535",
    "start": "874950",
    "end": "880540"
  },
  {
    "text": "endpoints within it and then a V PC can be carved out into multiple subnets",
    "start": "880540",
    "end": "885810"
  },
  {
    "text": "subnets are a network partition construct in V PC and you can associate",
    "start": "885810",
    "end": "891040"
  },
  {
    "text": "a subnet with an availability zone availability zone or a reliability constructing a double is where logically",
    "start": "891040",
    "end": "898660"
  },
  {
    "text": "group data centers are partitioned together into an availability zone if your application runs in multiple",
    "start": "898660",
    "end": "904839"
  },
  {
    "text": "abilities availability zones even if one of these subnets go down the other",
    "start": "904839",
    "end": "910390"
  },
  {
    "text": "subnet will be up and you won't suffer downtime so in this example we have two subnets they have slash twenty Cedars",
    "start": "910390",
    "end": "918430"
  },
  {
    "text": "the large V PC you can assume has a slash sixteen cedar and you have instance one and instance two this also",
    "start": "918430",
    "end": "925029"
  },
  {
    "text": "this thing called security group which is the PC level construct where you can enforce access control policies using",
    "start": "925029",
    "end": "931600"
  },
  {
    "text": "firewall rules so you can save which IP addresses allow are allowed to communicate with these",
    "start": "931600",
    "end": "938770"
  },
  {
    "text": "instances and which ports are exposed you can also block boots and you can also do traffic shaping using these",
    "start": "938770",
    "end": "944950"
  },
  {
    "text": "routing tables which are also VPC level construct and our customers are already used to this",
    "start": "944950",
    "end": "950770"
  },
  {
    "text": "so and VPC essentially creates the illusion of a flat network so VPC itself",
    "start": "950770",
    "end": "958390"
  },
  {
    "text": "is kind of acting like an overlay so in this diagram if we send a packet from",
    "start": "958390",
    "end": "963970"
  },
  {
    "text": "instance one to instance to it's pretty straightforward or packet exits instance",
    "start": "963970",
    "end": "969100"
  },
  {
    "text": "one and it just shows up an incident store so there's no additional hops there's no performance penalty or",
    "start": "969100",
    "end": "974290"
  },
  {
    "text": "anything because VPC essentially has this notion of a flat network so this is",
    "start": "974290",
    "end": "981130"
  },
  {
    "text": "very appealing to us and we wanted to see what made this so magical and if we",
    "start": "981130",
    "end": "986800"
  },
  {
    "text": "can leverage the same thing for our containers so under the hood each ec2 instance essentially gets a",
    "start": "986800",
    "end": "993730"
  },
  {
    "text": "virtual network interface card which is also called an elastic network interface or an Eni and all Ian ice in a VPC are",
    "start": "993730",
    "end": "1002580"
  },
  {
    "text": "networked together there's no additional performance penalty for communicating between tui and ice and each ec2",
    "start": "1002580",
    "end": "1009870"
  },
  {
    "text": "instance by default gets one e ni and the interesting thing here is you can",
    "start": "1009870",
    "end": "1015180"
  },
  {
    "text": "create en ice on demand and associate multiple Ian ice to an instance so",
    "start": "1015180",
    "end": "1021380"
  },
  {
    "text": "that's what essentially led to the solution that we eventually implemented which was creating Ian ice for tasks or",
    "start": "1021380",
    "end": "1029850"
  },
  {
    "text": "parts so I don't know member last year we released to CNI plugins the ECSC ni",
    "start": "1029850",
    "end": "1036089"
  },
  {
    "text": "plug-in and the V PCC and I plug in for kubernetes both of which essentially do",
    "start": "1036090",
    "end": "1041400"
  },
  {
    "text": "the same thing you can find the source code and design details on github this detailed design documents with workflows",
    "start": "1041400",
    "end": "1047370"
  },
  {
    "text": "and everything for both of these plugins the central idea for both of these plugins is the same each container or",
    "start": "1047370",
    "end": "1054090"
  },
  {
    "text": "each task or each pod gets its own en I the e ni gets provisioned on-demand and",
    "start": "1054090",
    "end": "1060680"
  },
  {
    "text": "because so this brings this this brings the same level of abstraction to ec2",
    "start": "1060680",
    "end": "1066930"
  },
  {
    "text": "instances to containers so containers are now glass networking primitive with these features and because they have on ena",
    "start": "1066930",
    "end": "1075180"
  },
  {
    "text": "per application discovery is very simple as well so if you look at the diagram",
    "start": "1075180",
    "end": "1082140"
  },
  {
    "text": "now instead of any overlay there is no overlay here a container one has a ena",
    "start": "1082140",
    "end": "1090540"
  },
  {
    "text": "this container has an ene as well and all of these are for part of the same VPC so network traffic communication in",
    "start": "1090540",
    "end": "1099270"
  },
  {
    "text": "this world is pretty straightforward container one wants to send a packet to",
    "start": "1099270",
    "end": "1104490"
  },
  {
    "text": "a container - it knows the container - scipy address this IP address is natively addressable within the VPC and",
    "start": "1104490",
    "end": "1111990"
  },
  {
    "text": "the packet just ends up on the other container so no extra hops no",
    "start": "1111990",
    "end": "1117960"
  },
  {
    "text": "performance penalty you can enforce security group rules so you can actually enforce firewall rules a top network",
    "start": "1117960",
    "end": "1123990"
  },
  {
    "text": "administrator layer rather than at an application layer there's no additional state for us to maintain because VPC",
    "start": "1123990",
    "end": "1130800"
  },
  {
    "text": "does all of the IP address management so overall it turns out to be a pretty",
    "start": "1130800",
    "end": "1136050"
  },
  {
    "text": "simple solution for our customers to use",
    "start": "1136050",
    "end": "1140450"
  },
  {
    "text": "so if we look back at the requirements we achieved on-demand delivery because",
    "start": "1143090",
    "end": "1152030"
  },
  {
    "text": "via treating network as a resource constraint for our scheduler to do the",
    "start": "1152030",
    "end": "1158310"
  },
  {
    "text": "placement on discovery is pretty simple because we're using native IP addresses you have isolation from network",
    "start": "1158310",
    "end": "1165030"
  },
  {
    "text": "namespaces you can enforce access control policies using security groups you have audit logs from VPC few logs so",
    "start": "1165030",
    "end": "1173220"
  },
  {
    "text": "if you haven't used VPC flow locks before it's a pretty cool feature it lets you essentially do a tcp dump",
    "start": "1173220",
    "end": "1179760"
  },
  {
    "text": "kind of a semantics on your VPC so you can at real time see what interface is",
    "start": "1179760",
    "end": "1185370"
  },
  {
    "text": "sending what traffic to what endpoint and get alerts based on that so CNI for",
    "start": "1185370",
    "end": "1194760"
  },
  {
    "text": "us was a vehicle to do the instance implementation for all of these things",
    "start": "1194760",
    "end": "1199820"
  },
  {
    "text": "and it really helped us a lot because our implementation for these",
    "start": "1199820",
    "end": "1206159"
  },
  {
    "text": "plugins was using CNA which meant that our solution verdant restricted to a",
    "start": "1206159",
    "end": "1212190"
  },
  {
    "text": "container Orchestrator so as long as your ARCA straighter knew how to do see how to integrate with CNI you could use",
    "start": "1212190",
    "end": "1219360"
  },
  {
    "text": "your user plugins with any network Orchestrator in fact our vp c c and i",
    "start": "1219360",
    "end": "1224940"
  },
  {
    "text": "plug in which we were which was optimized for e CS is being used by at least two customers on communities and",
    "start": "1224940",
    "end": "1231529"
  },
  {
    "text": "vice versa so let's look at some of the design constraints or design decisions",
    "start": "1231529",
    "end": "1239250"
  },
  {
    "text": "that we had to make the very first one was should we do c ni or should we do c",
    "start": "1239250",
    "end": "1244620"
  },
  {
    "text": "NM so c NM if you're not aware was still i think two years ago this dorkus",
    "start": "1244620",
    "end": "1253140"
  },
  {
    "text": "networking model here this in this model you still write plugins but docker",
    "start": "1253140",
    "end": "1260250"
  },
  {
    "text": "daemon integrates with these plugins instead of the orchestrator and your",
    "start": "1260250",
    "end": "1266039"
  },
  {
    "text": "plugins are running as long-running demons whereas in c na they're short-lived executables so we had four major axis on",
    "start": "1266039",
    "end": "1275250"
  },
  {
    "text": "which we were trying to decide which route to take so the most important",
    "start": "1275250",
    "end": "1281309"
  },
  {
    "text": "thing for us is being able being minimally intrusive to contain a life cycle so what this means is that if our",
    "start": "1281309",
    "end": "1288360"
  },
  {
    "text": "orchestrated dies for whatever reason we don't want that to affect the availability of our container and its",
    "start": "1288360",
    "end": "1295169"
  },
  {
    "text": "traffic so containers we should still be able to function normally from a",
    "start": "1295169",
    "end": "1300480"
  },
  {
    "text": "networking perspective if the plug-in dies and we don't want to be in the",
    "start": "1300480",
    "end": "1306120"
  },
  {
    "text": "business of managing the lifecycle of these plugins themselves because then you will have to write a rule",
    "start": "1306120",
    "end": "1311730"
  },
  {
    "text": "supervising process which makes it even more complicated and if you are running",
    "start": "1311730",
    "end": "1317279"
  },
  {
    "text": "a daemon rolling out updates is also a real pain because you need to drain",
    "start": "1317279",
    "end": "1322380"
  },
  {
    "text": "things and then you need to shut things down then you need to install a new version then you need to bring the new",
    "start": "1322380",
    "end": "1328799"
  },
  {
    "text": "version back up and maintain its health so we didn't want to be in any of that business and CNI plugins fit right into",
    "start": "1328799",
    "end": "1336659"
  },
  {
    "text": "the because CLA plugins such as short chip executables they come provision and then",
    "start": "1336659",
    "end": "1342840"
  },
  {
    "text": "they go away and the second aspect was simplicity so CNA has a specification",
    "start": "1342840",
    "end": "1349100"
  },
  {
    "text": "against which you can actually write reliable and repeatable tests so this",
    "start": "1349100",
    "end": "1355680"
  },
  {
    "text": "means that you have a consistent interface to program against which was",
    "start": "1355680",
    "end": "1360690"
  },
  {
    "text": "also a big blast furnace and CNA plugins are actually chainable so they're great",
    "start": "1360690",
    "end": "1368460"
  },
  {
    "text": "in terms of extensibility our customers can extend networking solution on their own or it makes us easy to extend our",
    "start": "1368460",
    "end": "1376290"
  },
  {
    "text": "networking solution for them because CNI has this changed execution it's almost like working with a linux shell or you",
    "start": "1376290",
    "end": "1383580"
  },
  {
    "text": "can pipe the result of one plug-in to another plug-in and it still works and the last one is ecosystem support lip",
    "start": "1383580",
    "end": "1390840"
  },
  {
    "text": "CNI which is the library against which all CNI users integrate with so cubelet",
    "start": "1390840",
    "end": "1397380"
  },
  {
    "text": "ECS asian integrated with lips ena is battle tested multiple customers already",
    "start": "1397380",
    "end": "1405120"
  },
  {
    "text": "use it in production and that was a great thing for us so here's a brief",
    "start": "1405120",
    "end": "1412130"
  },
  {
    "text": "just to illustrate how simple it is to use CNI plugins this is a sequence diagram of how CNI plugins are invoked",
    "start": "1412130",
    "end": "1418290"
  },
  {
    "text": "so CNI plugins essentially respect two verbs add and delete and you just invoke",
    "start": "1418290",
    "end": "1424650"
  },
  {
    "text": "the add command with a networking config all invoke the delete command with a networking config add creates the",
    "start": "1424650",
    "end": "1430500"
  },
  {
    "text": "network delete taste on the network and it's as simple as that in this diagram I actually have two plugins but if you",
    "start": "1430500",
    "end": "1437040"
  },
  {
    "text": "have just one plug-in even the last part goes away and it's two arrows which is",
    "start": "1437040",
    "end": "1443400"
  },
  {
    "text": "pretty much a dream for anybody who is programming against it the next aspect was which programming language to use",
    "start": "1443400",
    "end": "1450420"
  },
  {
    "text": "gulang or something else we chose golang because of its support for static",
    "start": "1450420",
    "end": "1455490"
  },
  {
    "text": "binaries installing sia static binary system it's simple to installing",
    "start": "1455490",
    "end": "1462050"
  },
  {
    "text": "third-party packages on which you'd like binary depends on and so on and you can",
    "start": "1462050",
    "end": "1468000"
  },
  {
    "text": "also package this into a container so that so it was a default programming language",
    "start": "1468000",
    "end": "1474420"
  },
  {
    "text": "for us to use again the ecosystem support is something worth noting here as well lip CNI is pretty mature and is",
    "start": "1474420",
    "end": "1481980"
  },
  {
    "text": "written in go so it's pretty much a no-brainer that we would use go I do",
    "start": "1481980",
    "end": "1487890"
  },
  {
    "text": "know some people who have written plugins interest but I don't say hi to them that often",
    "start": "1487890",
    "end": "1494390"
  },
  {
    "text": "next is packaging this distribution we package the plugin as in a docker",
    "start": "1496040",
    "end": "1502860"
  },
  {
    "text": "container which means that we get all of the advantage of packaging containers",
    "start": "1502860",
    "end": "1509250"
  },
  {
    "text": "sorry packaging advantages the containers give you here's an example of a docker file you can find this in a",
    "start": "1509250",
    "end": "1515670"
  },
  {
    "text": "repo for how we actually package these plugins they get copied along with the",
    "start": "1515670",
    "end": "1521880"
  },
  {
    "text": "ECAC agent binary or if you are running the kubernetes flavor of it they get deployed as daemon sets and all of this",
    "start": "1521880",
    "end": "1528930"
  },
  {
    "text": "is made possible and much easier because we are packaging them as containers",
    "start": "1528930",
    "end": "1534170"
  },
  {
    "text": "another thing here even if you're not writing a CNI plugin",
    "start": "1534170",
    "end": "1539510"
  },
  {
    "text": "is just a good software practice is to version your executables and version",
    "start": "1539510",
    "end": "1549240"
  },
  {
    "text": "them especially with the get hash from which they were built because when",
    "start": "1549240",
    "end": "1555450"
  },
  {
    "text": "you're deploying these things at scale when you have hundreds of thousands of copies of this running if there's any",
    "start": "1555450",
    "end": "1562620"
  },
  {
    "text": "problems it's very easy to determine which build caused the issue so we have human readable version numbers but we",
    "start": "1562620",
    "end": "1569490"
  },
  {
    "text": "also have get short hashes and we actually automate this version by using",
    "start": "1569490",
    "end": "1576330"
  },
  {
    "text": "build flags and go so go has this concept of Bill Flags where you can inject constants into your binaries and",
    "start": "1576330",
    "end": "1584280"
  },
  {
    "text": "when these binaries are built they take the version information and then when",
    "start": "1584280",
    "end": "1590160"
  },
  {
    "text": "you run the - - version command on these plugins they just omit the sort of",
    "start": "1590160",
    "end": "1596190"
  },
  {
    "text": "information we saw in the previous slide so excuse me so versioning everything in",
    "start": "1596190",
    "end": "1604290"
  },
  {
    "text": "an automated manner is something that I would HIGHLY encourage you do in whatever software system you're building next testing the",
    "start": "1604290",
    "end": "1613230"
  },
  {
    "text": "plugins we actually have close to 100% unit dis coverage not that it guarantees",
    "start": "1613230",
    "end": "1619020"
  },
  {
    "text": "absence of books but it's cleared to have that sort of coverage we also run",
    "start": "1619020",
    "end": "1624390"
  },
  {
    "text": "integration tests and end-to-end tests in our CI CD pipelines so if you",
    "start": "1624390",
    "end": "1631230"
  },
  {
    "text": "remember Dan Cohen's keynote from yesterday CI is something that you should be deeply care about if you don't",
    "start": "1631230",
    "end": "1637140"
  },
  {
    "text": "already and our end-to-end tests actually create a ena provision it for a",
    "start": "1637140",
    "end": "1642390"
  },
  {
    "text": "container alert as if there's any issues and that rated detecting regression or",
    "start": "1642390",
    "end": "1650760"
  },
  {
    "text": "any such problems very early on in our development process so just to conclude",
    "start": "1650760",
    "end": "1660440"
  },
  {
    "text": "avoid feature and v4 containers are bringing the same abstraction as you",
    "start": "1660440",
    "end": "1666510"
  },
  {
    "text": "have for virtual machines at least in terms of networking because it makes a lot of things very simple and we are",
    "start": "1666510",
    "end": "1675480"
  },
  {
    "text": "really grateful to authors of the cni plugins because it's an awesome project for anyone to integrate with and it made",
    "start": "1675480",
    "end": "1681510"
  },
  {
    "text": "our lives a lot simpler and version everything with kit sauce it helps you a",
    "start": "1681510",
    "end": "1688380"
  },
  {
    "text": "lot when you're dealing with the distributed complicated application to detect what actually caused the issue so",
    "start": "1688380",
    "end": "1697620"
  },
  {
    "text": "here's some related links in case you're downloading the slide on the internet or",
    "start": "1697620",
    "end": "1702780"
  },
  {
    "text": "something this the net link library the siene project are all great resources",
    "start": "1702780",
    "end": "1710010"
  },
  {
    "text": "not just for using but also looking at how to write good maintainable gulang",
    "start": "1710010",
    "end": "1715650"
  },
  {
    "text": "code so it highly encourage you to read that and with that it set up thanks for",
    "start": "1715650",
    "end": "1721890"
  },
  {
    "text": "your time or you can reach me all our team on github using these links and",
    "start": "1721890",
    "end": "1728190"
  },
  {
    "text": "yeah thanks again I guess we have time for questions if",
    "start": "1728190",
    "end": "1736970"
  },
  {
    "text": "anybody has questions yes I don't know",
    "start": "1736970",
    "end": "1743720"
  },
  {
    "text": "if you have a mic or anything",
    "start": "1743720",
    "end": "1746710"
  },
  {
    "text": "I couldn't hear you at all I'm sorry",
    "start": "1751640",
    "end": "1757480"
  },
  {
    "text": "okay yes",
    "start": "1757480",
    "end": "1761980"
  },
  {
    "text": "yeah so the question is what's the provisioning latency for here nice if you are provisioning an e ni for each",
    "start": "1774289",
    "end": "1780360"
  },
  {
    "text": "part so we actually have a daemon set that provisions ionized ahead of time",
    "start": "1780360",
    "end": "1786240"
  },
  {
    "text": "for the part so when the instance starts up we provision as many en eyes as we",
    "start": "1786240",
    "end": "1791789"
  },
  {
    "text": "can so the initial provision latency you only take a hit when the instance starts",
    "start": "1791789",
    "end": "1798179"
  },
  {
    "text": "so the containers themselves don't see this performance head ya know the",
    "start": "1798179",
    "end": "1815789"
  },
  {
    "text": "question is this a limit on the number of en is that we can attach to an instance does it limit the number of parts yes it does and it's something",
    "start": "1815789",
    "end": "1823380"
  },
  {
    "text": "that we are working on to increase behind the scenes with that networking team if you're using parts we also",
    "start": "1823380",
    "end": "1831149"
  },
  {
    "text": "optimize it by creating secondary IP addresses for en eyes so that helps it a",
    "start": "1831149",
    "end": "1836159"
  },
  {
    "text": "bit but not a whole lot but yes that's something that we are aware of and we are working on yes right so the question",
    "start": "1836159",
    "end": "1863880"
  },
  {
    "text": "is how do you apply cluster level access control policies as a network administrator so you can create a",
    "start": "1863880",
    "end": "1871620"
  },
  {
    "text": "security group at a cluster level and when you're creating your instances you",
    "start": "1871620",
    "end": "1876809"
  },
  {
    "text": "can tell them to inherit from that security group and then have it be applied in that manner also I think you",
    "start": "1876809",
    "end": "1884730"
  },
  {
    "text": "can use vendors like cilium and one mode",
    "start": "1884730",
    "end": "1891510"
  },
  {
    "text": "that I can't recall flannel who also have such provisions if you're using",
    "start": "1891510",
    "end": "1896730"
  },
  {
    "text": "like the BGP version of a plugin you can enforce policy set your router level as well",
    "start": "1896730",
    "end": "1903060"
  },
  {
    "text": "yes huh so the question is how",
    "start": "1903060",
    "end": "1914970"
  },
  {
    "text": "production-ready is this because you're using other providers and you want to switch to it it's actually",
    "start": "1914970",
    "end": "1921450"
  },
  {
    "text": "production-ready we released this back in October last year and the ECS version",
    "start": "1921450",
    "end": "1929850"
  },
  {
    "text": "of it is actually being used in production a lot by our customers the kubernetes version of it was built with",
    "start": "1929850",
    "end": "1936630"
  },
  {
    "text": "our partners and some of them are already using it in their in the e KS",
    "start": "1936630",
    "end": "1943050"
  },
  {
    "text": "preview but you can use it of course outside of the eks product as well in your own cluster we think it's pretty",
    "start": "1943050",
    "end": "1950280"
  },
  {
    "text": "production ready if you find any issues or do reach out to us on github yeah yes the question is do Eni support",
    "start": "1950280",
    "end": "1963930"
  },
  {
    "text": "public IPS the secondary Ian eyes do not support public IP addresses it's a",
    "start": "1963930",
    "end": "1969300"
  },
  {
    "text": "feature request that we've heard often from our customers but we haven't",
    "start": "1969300",
    "end": "1974880"
  },
  {
    "text": "arrived it if they should really support public IP addresses because public IP",
    "start": "1974880",
    "end": "1981600"
  },
  {
    "text": "addresses have both security concerns in this also IP exhaustion concerns so we",
    "start": "1981600",
    "end": "1987750"
  },
  {
    "text": "do want to provide some sort of public IP addressing scheme we don't know if",
    "start": "1987750",
    "end": "1992760"
  },
  {
    "text": "it's essentially going to be ipv4 or ipv6 yes the question is if I want my",
    "start": "1992760",
    "end": "2005540"
  },
  {
    "text": "cluster to span regions will be PC peering work and the answer is it should",
    "start": "2005540",
    "end": "2012710"
  },
  {
    "text": "work in theory but I would also question your motive for spanning regions in a",
    "start": "2012710",
    "end": "2018920"
  },
  {
    "text": "cluster but it should be doable V PC",
    "start": "2018920",
    "end": "2026210"
  },
  {
    "text": "peering does allow it and it I think is one of the use cases for customers using",
    "start": "2026210",
    "end": "2031280"
  },
  {
    "text": "that so as long as the ENS are created in the proper region it should just work",
    "start": "2031280",
    "end": "2037129"
  },
  {
    "text": "yes yeah the question is are the CNAs",
    "start": "2037129",
    "end": "2050750"
  },
  {
    "text": "registerable as targets to lbs and lbs the answer is yes and that's why we went",
    "start": "2050750",
    "end": "2057388"
  },
  {
    "text": "with the Eni route because we wanted integrations at as many places in layers as possible if you wanted to use a",
    "start": "2057389",
    "end": "2064559"
  },
  {
    "text": "service discovery using route 53 you should be able to register these as targets if you're using load balancers",
    "start": "2064559",
    "end": "2070049"
  },
  {
    "text": "you should be able to register these as targets and they are register well as targets yes the",
    "start": "2070049",
    "end": "2102690"
  },
  {
    "text": "the previous attempts to do this have involved modifying routing tables and there's limits to how many and hysts are",
    "start": "2102690",
    "end": "2108540"
  },
  {
    "text": "there in a routing table is this going to hit similar limits the answer is",
    "start": "2108540",
    "end": "2113930"
  },
  {
    "text": "routing table still has a limit of 50 entries but this will not hit the limit because oh all ye a nice in a VPC are",
    "start": "2113930",
    "end": "2123000"
  },
  {
    "text": "addressable from our addressable with each with respect to each other",
    "start": "2123000",
    "end": "2128040"
  },
  {
    "text": "just because they belong to a VPC and like the very first rule you see in the routing table says use local so all of",
    "start": "2128040",
    "end": "2135420"
  },
  {
    "text": "them should be able to just utilize that and communicate with each other they do",
    "start": "2135420",
    "end": "2144630"
  },
  {
    "text": "have to be part of the subnets that are card out of the vp CS yes",
    "start": "2144630",
    "end": "2152420"
  },
  {
    "text": "yes the question is if we're using second the IP adresses will the load",
    "start": "2167470",
    "end": "2172880"
  },
  {
    "text": "balance is still be able to use the ena as a target in theory I think it's it",
    "start": "2172880",
    "end": "2182060"
  },
  {
    "text": "should be possible because if you use the network load balancer it uses the IP address and port as a target so it",
    "start": "2182060",
    "end": "2189589"
  },
  {
    "text": "should be doable but I haven't tried it myself so I can't say for sure come talk",
    "start": "2189589",
    "end": "2196099"
  },
  {
    "text": "to me after the session I am at the 8th of this booth and we can hash it out so",
    "start": "2196099",
    "end": "2203300"
  },
  {
    "text": "you had a question sir can you please",
    "start": "2203300",
    "end": "2213230"
  },
  {
    "text": "elaborate what's so when you say global",
    "start": "2213230",
    "end": "2235640"
  },
  {
    "text": "IP is it the elastic IP is it the elastic IP that you are referring to",
    "start": "2235640",
    "end": "2240820"
  },
  {
    "text": "yeah so the question is if if my service has an elastic IP address or village",
    "start": "2240820",
    "end": "2246890"
  },
  {
    "text": "still work with Jia nice the answer is yes elastic IP addresses are also of epc",
    "start": "2246890",
    "end": "2251960"
  },
  {
    "text": "level construct so any VPC level abstraction that works with traditional ec2 instances will work with this",
    "start": "2251960",
    "end": "2259010"
  },
  {
    "text": "solution sit oh yes",
    "start": "2259010",
    "end": "2266560"
  },
  {
    "text": "right so the question is what's preventing a rogue process from just",
    "start": "2286119",
    "end": "2291650"
  },
  {
    "text": "randomly creating and provision indianized on a host and this security",
    "start": "2291650",
    "end": "2297109"
  },
  {
    "text": "concerns with that I agree with that security concern the answer here is to",
    "start": "2297109",
    "end": "2304490"
  },
  {
    "text": "run your provisioning process in as part of your API server or in easiest it's up",
    "start": "2304490",
    "end": "2312950"
  },
  {
    "text": "it's happening at a scheduler layer so only the scheduler is privileged to create a anaïs and whatever components",
    "start": "2312950",
    "end": "2320480"
  },
  {
    "text": "are on the host can just use the CNAs so they get the information that this part of this task should use the CNA and then",
    "start": "2320480",
    "end": "2328700"
  },
  {
    "text": "they provision it so as long as you constrict the only the provisioning part",
    "start": "2328700",
    "end": "2334250"
  },
  {
    "text": "of the network to the plugin you should be safe yeah awesome thank you",
    "start": "2334250",
    "end": "2344440"
  }
]