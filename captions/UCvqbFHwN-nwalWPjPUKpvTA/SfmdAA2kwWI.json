[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "hi my name is marco ferreira and the",
    "start": "320",
    "end": "2080"
  },
  {
    "text": "title of this session is next level grpc",
    "start": "2080",
    "end": "4080"
  },
  {
    "text": "with kotlin and co-routines",
    "start": "4080",
    "end": "5759"
  },
  {
    "text": "in this session we're going to cover",
    "start": "5759",
    "end": "6960"
  },
  {
    "text": "what the available options are for gft's",
    "start": "6960",
    "end": "8880"
  },
  {
    "text": "development",
    "start": "8880",
    "end": "9840"
  },
  {
    "text": "on the jvm using kotlin we're going to",
    "start": "9840",
    "end": "12639"
  },
  {
    "text": "take a look at what the general api",
    "start": "12639",
    "end": "14080"
  },
  {
    "text": "ergonomics look like for the available",
    "start": "14080",
    "end": "15599"
  },
  {
    "text": "offerings",
    "start": "15599",
    "end": "16560"
  },
  {
    "text": "as well as demonstrate how we can use",
    "start": "16560",
    "end": "19279"
  },
  {
    "text": "some of the special features of",
    "start": "19279",
    "end": "20400"
  },
  {
    "text": "coroutines to improve",
    "start": "20400",
    "end": "21920"
  },
  {
    "text": "our grpc service implementations",
    "start": "21920",
    "end": "25840"
  },
  {
    "text": "for those who aren't familiar kotlin",
    "start": "28160",
    "end": "30160"
  },
  {
    "text": "started out as a jvm-based language",
    "start": "30160",
    "end": "32238"
  },
  {
    "text": "developed and released by jetbrains in",
    "start": "32239",
    "end": "33680"
  },
  {
    "text": "2011.",
    "start": "33680",
    "end": "35040"
  },
  {
    "text": "it is that since then evolved to be a",
    "start": "35040",
    "end": "36880"
  },
  {
    "text": "full multi-platform language allowing",
    "start": "36880",
    "end": "39040"
  },
  {
    "text": "users to write and share codes",
    "start": "39040",
    "end": "40480"
  },
  {
    "text": "across various runtimes what kotlin is",
    "start": "40480",
    "end": "43200"
  },
  {
    "text": "most well known for",
    "start": "43200",
    "end": "44239"
  },
  {
    "text": "is the fact that it's now an official",
    "start": "44239",
    "end": "46320"
  },
  {
    "text": "preferred language for android",
    "start": "46320",
    "end": "47680"
  },
  {
    "text": "development",
    "start": "47680",
    "end": "48800"
  },
  {
    "text": "and this fact is what has caused it to",
    "start": "48800",
    "end": "51120"
  },
  {
    "text": "gain so much popularity in recent years",
    "start": "51120",
    "end": "55198"
  },
  {
    "start": "55000",
    "end": "55000"
  },
  {
    "text": "now co-routines coroutines aren't a new",
    "start": "55760",
    "end": "58079"
  },
  {
    "text": "concept",
    "start": "58079",
    "end": "58879"
  },
  {
    "text": "they've existed for quite some time and",
    "start": "58879",
    "end": "60320"
  },
  {
    "text": "appeared in various flavors of various",
    "start": "60320",
    "end": "61920"
  },
  {
    "text": "names",
    "start": "61920",
    "end": "62960"
  },
  {
    "text": "some of the more recent examples include",
    "start": "62960",
    "end": "66000"
  },
  {
    "text": "go routines",
    "start": "66000",
    "end": "67600"
  },
  {
    "text": "in a few years time java will also have",
    "start": "67600",
    "end": "69360"
  },
  {
    "text": "cover teams in the form of project loom",
    "start": "69360",
    "end": "72880"
  },
  {
    "text": "one thing each current incarnation of",
    "start": "72880",
    "end": "74720"
  },
  {
    "text": "core team sets out to accomplish is to",
    "start": "74720",
    "end": "76880"
  },
  {
    "text": "simplify writing and reasoning about",
    "start": "76880",
    "end": "78880"
  },
  {
    "text": "asynchronous software",
    "start": "78880",
    "end": "80640"
  },
  {
    "text": "there are a few key characteristics that",
    "start": "80640",
    "end": "82000"
  },
  {
    "text": "kotlin core teams embody",
    "start": "82000",
    "end": "84080"
  },
  {
    "text": "which we're not going to cover in this",
    "start": "84080",
    "end": "85119"
  },
  {
    "text": "session but i really do recommend",
    "start": "85119",
    "end": "86560"
  },
  {
    "text": "checking out a talk given by roman",
    "start": "86560",
    "end": "88159"
  },
  {
    "text": "elizorov",
    "start": "88159",
    "end": "89119"
  },
  {
    "text": "uh the library lead at jet brains and",
    "start": "89119",
    "end": "90960"
  },
  {
    "text": "it's called kotlin core routines in",
    "start": "90960",
    "end": "92640"
  },
  {
    "text": "practice",
    "start": "92640",
    "end": "93360"
  },
  {
    "text": "and it's from kotlin conf 2018.",
    "start": "93360",
    "end": "97119"
  },
  {
    "start": "97000",
    "end": "97000"
  },
  {
    "text": "so to give a little bit of an example as",
    "start": "98159",
    "end": "100000"
  },
  {
    "text": "to why we're going to be using",
    "start": "100000",
    "end": "101600"
  },
  {
    "text": "co-routines or why we would want to use",
    "start": "101600",
    "end": "103119"
  },
  {
    "text": "co-routines for our service development",
    "start": "103119",
    "end": "105520"
  },
  {
    "text": "we are going to do a little toy problem",
    "start": "105520",
    "end": "107520"
  },
  {
    "text": "and in this problem we're going to start",
    "start": "107520",
    "end": "109200"
  },
  {
    "text": "off",
    "start": "109200",
    "end": "109759"
  },
  {
    "text": "by executing 10 000 co-routines",
    "start": "109759",
    "end": "114079"
  },
  {
    "text": "in parallel and each of those core",
    "start": "114079",
    "end": "116719"
  },
  {
    "text": "routines are going to",
    "start": "116719",
    "end": "118079"
  },
  {
    "text": "sleep for a second and print a period to",
    "start": "118079",
    "end": "120719"
  },
  {
    "text": "the console",
    "start": "120719",
    "end": "122880"
  },
  {
    "text": "the total execution time for this comes",
    "start": "122880",
    "end": "125920"
  },
  {
    "text": "out to about",
    "start": "125920",
    "end": "127040"
  },
  {
    "text": "one second or so if you take factor in",
    "start": "127040",
    "end": "129840"
  },
  {
    "text": "the i o of printing out our string",
    "start": "129840",
    "end": "132239"
  },
  {
    "text": "now if we look at what that example",
    "start": "132239",
    "end": "134000"
  },
  {
    "text": "looks like using",
    "start": "134000",
    "end": "135840"
  },
  {
    "text": "threads um we'll end up having to kill",
    "start": "135840",
    "end": "138720"
  },
  {
    "text": "the process",
    "start": "138720",
    "end": "139440"
  },
  {
    "text": "because of the fact that threads",
    "start": "139440",
    "end": "142800"
  },
  {
    "text": "and it's specifically in this example",
    "start": "142800",
    "end": "144480"
  },
  {
    "text": "when we're performing our sleep",
    "start": "144480",
    "end": "146319"
  },
  {
    "text": "we're actually blocking that thread and",
    "start": "146319",
    "end": "148640"
  },
  {
    "text": "no other",
    "start": "148640",
    "end": "150000"
  },
  {
    "text": "computations can be performed that",
    "start": "150000",
    "end": "151519"
  },
  {
    "text": "thread is locked until we're ready",
    "start": "151519",
    "end": "153519"
  },
  {
    "text": "or in our sleep cont finishes whereas in",
    "start": "153519",
    "end": "156080"
  },
  {
    "text": "the coroutines example",
    "start": "156080",
    "end": "157599"
  },
  {
    "text": "we're not using thread.sleep but we're",
    "start": "157599",
    "end": "159120"
  },
  {
    "text": "using a built-in function called delay",
    "start": "159120",
    "end": "161440"
  },
  {
    "text": "and what delay does is suspend the",
    "start": "161440",
    "end": "163599"
  },
  {
    "text": "execution of that method",
    "start": "163599",
    "end": "164959"
  },
  {
    "text": "pauses it essentially and allows the",
    "start": "164959",
    "end": "167440"
  },
  {
    "text": "resources",
    "start": "167440",
    "end": "168959"
  },
  {
    "text": "that we're going to be blocked by that",
    "start": "168959",
    "end": "173120"
  },
  {
    "text": "by that method that computation to be",
    "start": "173120",
    "end": "175280"
  },
  {
    "text": "freed up and used for some other tasks",
    "start": "175280",
    "end": "177120"
  },
  {
    "text": "that's been queued up in the background",
    "start": "177120",
    "end": "180560"
  },
  {
    "start": "182000",
    "end": "182000"
  },
  {
    "text": "so without all the way we can take a",
    "start": "183040",
    "end": "184640"
  },
  {
    "text": "look at what our grpc apis look like",
    "start": "184640",
    "end": "187040"
  },
  {
    "text": "in kotlin we currently have a few",
    "start": "187040",
    "end": "189519"
  },
  {
    "text": "options",
    "start": "189519",
    "end": "190400"
  },
  {
    "text": "there's chrono plus a library and suite",
    "start": "190400",
    "end": "192319"
  },
  {
    "text": "of protoc plugins",
    "start": "192319",
    "end": "193440"
  },
  {
    "text": "i initially released a few years ago uh",
    "start": "193440",
    "end": "196400"
  },
  {
    "text": "there's",
    "start": "196400",
    "end": "196879"
  },
  {
    "text": "very recently the google official",
    "start": "196879",
    "end": "198640"
  },
  {
    "text": "binaries or bindings",
    "start": "198640",
    "end": "200319"
  },
  {
    "text": "sorry released um which is very exciting",
    "start": "200319",
    "end": "203840"
  },
  {
    "text": "for the community",
    "start": "203840",
    "end": "205120"
  },
  {
    "text": "and finally there is the wire grpc",
    "start": "205120",
    "end": "207519"
  },
  {
    "text": "runtime developed by square",
    "start": "207519",
    "end": "209440"
  },
  {
    "text": "for today's session though we're only",
    "start": "209440",
    "end": "211120"
  },
  {
    "text": "going to focus on the examples",
    "start": "211120",
    "end": "212640"
  },
  {
    "text": "written using stubs created by google",
    "start": "212640",
    "end": "214799"
  },
  {
    "text": "and the quota plus compiler plugins",
    "start": "214799",
    "end": "217040"
  },
  {
    "text": "uh and we'll actually start off by",
    "start": "217040",
    "end": "219280"
  },
  {
    "text": "taking a look at unary apis",
    "start": "219280",
    "end": "222319"
  },
  {
    "start": "222000",
    "end": "222000"
  },
  {
    "text": "so this should look somewhat familiar to",
    "start": "222319",
    "end": "225280"
  },
  {
    "text": "developers that have used grpc java",
    "start": "225280",
    "end": "227360"
  },
  {
    "text": "it's a service implementation for a",
    "start": "227360",
    "end": "229040"
  },
  {
    "text": "unary method",
    "start": "229040",
    "end": "231040"
  },
  {
    "text": "but with the key difference being that",
    "start": "231040",
    "end": "232799"
  },
  {
    "text": "it's using kotlin syntax",
    "start": "232799",
    "end": "235120"
  },
  {
    "text": "now if we take a look at what that looks",
    "start": "235120",
    "end": "236799"
  },
  {
    "text": "like using co routines",
    "start": "236799",
    "end": "238879"
  },
  {
    "text": "you'll see that first our signature no",
    "start": "238879",
    "end": "240879"
  },
  {
    "text": "longer acceptance accepts an instance of",
    "start": "240879",
    "end": "242799"
  },
  {
    "text": "stream observer",
    "start": "242799",
    "end": "244000"
  },
  {
    "text": "we no longer have to worry about the",
    "start": "244000",
    "end": "245680"
  },
  {
    "text": "song and dance of calling on next",
    "start": "245680",
    "end": "247519"
  },
  {
    "text": "on complete or on there ah the method",
    "start": "247519",
    "end": "250080"
  },
  {
    "text": "now has a return type defined that",
    "start": "250080",
    "end": "251840"
  },
  {
    "text": "matches our api's response type",
    "start": "251840",
    "end": "254319"
  },
  {
    "text": "you also notice that the method is",
    "start": "254319",
    "end": "255599"
  },
  {
    "text": "marked with a suspend keyword meaning",
    "start": "255599",
    "end": "257359"
  },
  {
    "text": "that its execution can be paused and",
    "start": "257359",
    "end": "258880"
  },
  {
    "text": "resumed",
    "start": "258880",
    "end": "259519"
  },
  {
    "text": "allowing us to free up resources for",
    "start": "259519",
    "end": "261120"
  },
  {
    "text": "other methods that are or other code",
    "start": "261120",
    "end": "262639"
  },
  {
    "text": "routines that are being executed in the",
    "start": "262639",
    "end": "263840"
  },
  {
    "text": "background",
    "start": "263840",
    "end": "265440"
  },
  {
    "text": "both proto plus and google's grpc kotlin",
    "start": "265440",
    "end": "267919"
  },
  {
    "text": "use this",
    "start": "267919",
    "end": "268479"
  },
  {
    "text": "this same syntax with one exception",
    "start": "268479",
    "end": "270479"
  },
  {
    "text": "being that",
    "start": "270479",
    "end": "271840"
  },
  {
    "text": "in kroto plus you can build your methods",
    "start": "271840",
    "end": "275680"
  },
  {
    "text": "uh your response messages with",
    "start": "275680",
    "end": "278800"
  },
  {
    "text": "a lambda that accepts and sets all these",
    "start": "278800",
    "end": "281199"
  },
  {
    "text": "properties instead of the fluent builder",
    "start": "281199",
    "end": "284800"
  },
  {
    "text": "when looking at the urinary client usage",
    "start": "285919",
    "end": "287759"
  },
  {
    "text": "though you see that core team",
    "start": "287759",
    "end": "289680"
  },
  {
    "text": "interface doesn't differ much from",
    "start": "289680",
    "end": "291280"
  },
  {
    "text": "vanilla java blocking subs",
    "start": "291280",
    "end": "293440"
  },
  {
    "text": "with the one exception being that the",
    "start": "293440",
    "end": "294800"
  },
  {
    "text": "say hello method in this example",
    "start": "294800",
    "end": "296960"
  },
  {
    "text": "is actually suspending method meaning",
    "start": "296960",
    "end": "300160"
  },
  {
    "text": "that we're not blocking the current",
    "start": "300160",
    "end": "301600"
  },
  {
    "text": "thread while we wait for a response from",
    "start": "301600",
    "end": "303440"
  },
  {
    "text": "the server",
    "start": "303440",
    "end": "306000"
  },
  {
    "text": "and then again if we're using chronoplus",
    "start": "306639",
    "end": "308240"
  },
  {
    "text": "we actually have builder lambdas for",
    "start": "308240",
    "end": "310000"
  },
  {
    "start": "310000",
    "end": "310000"
  },
  {
    "text": "creating and instantiating our protobuf",
    "start": "310000",
    "end": "311680"
  },
  {
    "text": "messages to",
    "start": "311680",
    "end": "313120"
  },
  {
    "text": "execute our requests but now one thing",
    "start": "313120",
    "end": "316080"
  },
  {
    "text": "that you're probably going to ask",
    "start": "316080",
    "end": "316960"
  },
  {
    "text": "yourself is like this works well",
    "start": "316960",
    "end": "318560"
  },
  {
    "text": "for sequential operations but",
    "start": "318560",
    "end": "321600"
  },
  {
    "text": "concurrency we need to be able to make",
    "start": "321600",
    "end": "323440"
  },
  {
    "text": "calls in parallel call other things",
    "start": "323440",
    "end": "325840"
  },
  {
    "text": "and aggregate the results of those calls",
    "start": "325840",
    "end": "327600"
  },
  {
    "text": "all at once and",
    "start": "327600",
    "end": "330560"
  },
  {
    "text": "we're going to basically show that",
    "start": "330560",
    "end": "334240"
  },
  {
    "text": "although in core teens um in the core",
    "start": "334240",
    "end": "336880"
  },
  {
    "text": "team api interfaces",
    "start": "336880",
    "end": "338320"
  },
  {
    "text": "there are no future stubs concurrent",
    "start": "338320",
    "end": "341600"
  },
  {
    "text": "execution is still made possible",
    "start": "341600",
    "end": "343680"
  },
  {
    "text": "um but there's a few caveats one of the",
    "start": "343680",
    "end": "346560"
  },
  {
    "text": "caveats means that we want to",
    "start": "346560",
    "end": "348320"
  },
  {
    "text": "adopt co-routines practice of explicit",
    "start": "348320",
    "end": "351520"
  },
  {
    "text": "concurrency",
    "start": "351520",
    "end": "352479"
  },
  {
    "text": "and i'm not going to go into too much",
    "start": "352479",
    "end": "353759"
  },
  {
    "text": "detail but in summary it means that by",
    "start": "353759",
    "end": "356160"
  },
  {
    "text": "default",
    "start": "356160",
    "end": "356880"
  },
  {
    "text": "apis and methods should behave and",
    "start": "356880",
    "end": "358720"
  },
  {
    "text": "execute sequentially",
    "start": "358720",
    "end": "360080"
  },
  {
    "text": "and when concurrency is needed you",
    "start": "360080",
    "end": "361600"
  },
  {
    "text": "should explicitly opt into that",
    "start": "361600",
    "end": "363919"
  },
  {
    "text": "so that there's no unknown or unexpected",
    "start": "363919",
    "end": "366960"
  },
  {
    "text": "behavior",
    "start": "366960",
    "end": "367759"
  },
  {
    "text": "or the risk of um",
    "start": "367759",
    "end": "370880"
  },
  {
    "text": "orphaning resources and not closing out",
    "start": "370880",
    "end": "373039"
  },
  {
    "text": "uh specific things",
    "start": "373039",
    "end": "374800"
  },
  {
    "text": "so instead of needing a whole different",
    "start": "374800",
    "end": "376240"
  },
  {
    "text": "stub we can actually make our",
    "start": "376240",
    "end": "378400"
  },
  {
    "text": "code concurrent by wrapping our method",
    "start": "378400",
    "end": "381199"
  },
  {
    "text": "calls within a",
    "start": "381199",
    "end": "382240"
  },
  {
    "text": "core teams async block now",
    "start": "382240",
    "end": "386000"
  },
  {
    "text": "we're going to take a look at streaming",
    "start": "386000",
    "end": "387680"
  },
  {
    "text": "apis",
    "start": "387680",
    "end": "389199"
  },
  {
    "start": "388000",
    "end": "388000"
  },
  {
    "text": "for the sake of brevity we're only going",
    "start": "389199",
    "end": "390880"
  },
  {
    "text": "to cover bi-directional streaming",
    "start": "390880",
    "end": "393759"
  },
  {
    "text": "simply because the client and server",
    "start": "393759",
    "end": "395280"
  },
  {
    "text": "streaming apis or their implementations",
    "start": "395280",
    "end": "397199"
  },
  {
    "text": "at least",
    "start": "397199",
    "end": "398240"
  },
  {
    "text": "they can be inferred easily from these",
    "start": "398240",
    "end": "399759"
  },
  {
    "text": "examples we'll start with",
    "start": "399759",
    "end": "401759"
  },
  {
    "text": "a vanilla java bidirectional streaming",
    "start": "401759",
    "end": "404639"
  },
  {
    "text": "method",
    "start": "404639",
    "end": "405520"
  },
  {
    "text": "but written in kotlin syntax and its",
    "start": "405520",
    "end": "409039"
  },
  {
    "text": "implementation",
    "start": "409039",
    "end": "410240"
  },
  {
    "text": "is very basic in that we validate each",
    "start": "410240",
    "end": "413120"
  },
  {
    "text": "request",
    "start": "413120",
    "end": "414160"
  },
  {
    "text": "and we respond to the client and in the",
    "start": "414160",
    "end": "416000"
  },
  {
    "text": "event of a client error we log the",
    "start": "416000",
    "end": "419759"
  },
  {
    "text": "description",
    "start": "420840",
    "end": "423840"
  },
  {
    "text": "so the first example we'll go over is",
    "start": "426080",
    "end": "427840"
  },
  {
    "text": "using the proto plus api",
    "start": "427840",
    "end": "429199"
  },
  {
    "text": "which exposes channels a coordinate",
    "start": "429199",
    "end": "430960"
  },
  {
    "text": "primitive meant for hot streams of data",
    "start": "430960",
    "end": "433520"
  },
  {
    "text": "we're then going to convert that channel",
    "start": "433520",
    "end": "435280"
  },
  {
    "text": "into a reactive core team stream",
    "start": "435280",
    "end": "437120"
  },
  {
    "text": "also known as a flow then we compose an",
    "start": "437120",
    "end": "440720"
  },
  {
    "text": "operator for",
    "start": "440720",
    "end": "441759"
  },
  {
    "text": "catching and logging client errors and",
    "start": "441759",
    "end": "444479"
  },
  {
    "text": "then you'll notice here that",
    "start": "444479",
    "end": "446720"
  },
  {
    "text": "we'll finally be able to consume the",
    "start": "446720",
    "end": "448880"
  },
  {
    "text": "stream performing the same validation",
    "start": "448880",
    "end": "450639"
  },
  {
    "text": "and response handling",
    "start": "450639",
    "end": "452400"
  },
  {
    "text": "and throwing our status exception",
    "start": "452400",
    "end": "455039"
  },
  {
    "text": "instead of invoking on error",
    "start": "455039",
    "end": "456960"
  },
  {
    "text": "or stream observer callback handler",
    "start": "456960",
    "end": "460080"
  },
  {
    "text": "um now we can look at what the equipment",
    "start": "460080",
    "end": "462319"
  },
  {
    "text": "looks like using the grpc java",
    "start": "462319",
    "end": "464080"
  },
  {
    "text": "grpc kotlin official findings",
    "start": "464080",
    "end": "468800"
  },
  {
    "text": "the key thing to notice is that instead",
    "start": "469919",
    "end": "472720"
  },
  {
    "text": "of accepting two channels",
    "start": "472720",
    "end": "474319"
  },
  {
    "text": "the official bindings will actually",
    "start": "474319",
    "end": "476000"
  },
  {
    "text": "accept a flow of requests and return",
    "start": "476000",
    "end": "478400"
  },
  {
    "text": "a flow of responses and these are called",
    "start": "478400",
    "end": "480720"
  },
  {
    "text": "streams of data",
    "start": "480720",
    "end": "481759"
  },
  {
    "text": "that's the main difference but other",
    "start": "481759",
    "end": "483919"
  },
  {
    "text": "than that the implementation remains",
    "start": "483919",
    "end": "485599"
  },
  {
    "text": "largely the same",
    "start": "485599",
    "end": "487919"
  },
  {
    "text": "we'll go ahead and catch and log our",
    "start": "487919",
    "end": "489840"
  },
  {
    "text": "client errors and finally consume our",
    "start": "489840",
    "end": "491680"
  },
  {
    "text": "requests",
    "start": "491680",
    "end": "493599"
  },
  {
    "text": "and since this is the official bindings",
    "start": "493599",
    "end": "495919"
  },
  {
    "text": "we're using the fluent builders to build",
    "start": "495919",
    "end": "497520"
  },
  {
    "text": "out our messages",
    "start": "497520",
    "end": "500240"
  },
  {
    "start": "500000",
    "end": "500000"
  },
  {
    "text": "now on the other side of streaming apis",
    "start": "501440",
    "end": "504720"
  },
  {
    "text": "we're going to look at what the client",
    "start": "504720",
    "end": "506879"
  },
  {
    "text": "implementation is like we create our",
    "start": "506879",
    "end": "510240"
  },
  {
    "text": "stub",
    "start": "510240",
    "end": "511199"
  },
  {
    "text": "and when using proto plus we're when",
    "start": "511199",
    "end": "513360"
  },
  {
    "text": "invoking our streaming method we",
    "start": "513360",
    "end": "514640"
  },
  {
    "text": "actually get returned",
    "start": "514640",
    "end": "515680"
  },
  {
    "text": "a pair of two values our request and",
    "start": "515680",
    "end": "517839"
  },
  {
    "text": "response channel",
    "start": "517839",
    "end": "520320"
  },
  {
    "text": "in this example you'll see that we're",
    "start": "520320",
    "end": "521599"
  },
  {
    "text": "actually destructing those two values",
    "start": "521599",
    "end": "523200"
  },
  {
    "text": "into their own separate variables",
    "start": "523200",
    "end": "524399"
  },
  {
    "text": "allowing us to perform operations",
    "start": "524399",
    "end": "525760"
  },
  {
    "text": "independently",
    "start": "525760",
    "end": "528399"
  },
  {
    "text": "but funny thing is that the square wire",
    "start": "528560",
    "end": "530800"
  },
  {
    "text": "api also has a very similar design",
    "start": "530800",
    "end": "532640"
  },
  {
    "text": "with one exception being that the square",
    "start": "532640",
    "end": "536399"
  },
  {
    "text": "api actually uses a custom primitive",
    "start": "536399",
    "end": "538880"
  },
  {
    "text": "that behaves",
    "start": "538880",
    "end": "539920"
  },
  {
    "text": "that behaves sort of like a data stream",
    "start": "539920",
    "end": "543839"
  },
  {
    "text": "for this example we're going to kick off",
    "start": "544160",
    "end": "545600"
  },
  {
    "text": "our stream with a message that says",
    "start": "545600",
    "end": "547040"
  },
  {
    "text": "start iterating",
    "start": "547040",
    "end": "549360"
  },
  {
    "text": "afterwards we start consuming our",
    "start": "549360",
    "end": "550800"
  },
  {
    "text": "responses we cancel the call if we",
    "start": "550800",
    "end": "552640"
  },
  {
    "text": "receive an invalid",
    "start": "552640",
    "end": "553920"
  },
  {
    "text": "response otherwise we send the next",
    "start": "553920",
    "end": "555839"
  },
  {
    "text": "request",
    "start": "555839",
    "end": "557040"
  },
  {
    "text": "and since we're using the kodo plus uh",
    "start": "557040",
    "end": "559680"
  },
  {
    "text": "variant",
    "start": "559680",
    "end": "560320"
  },
  {
    "text": "you see that we're using the lambda",
    "start": "560320",
    "end": "562160"
  },
  {
    "text": "builder to instantiate our method",
    "start": "562160",
    "end": "564080"
  },
  {
    "text": "to send our response or create an",
    "start": "564080",
    "end": "566720"
  },
  {
    "text": "instance of our response method",
    "start": "566720",
    "end": "569839"
  },
  {
    "text": "um when using the official grpc kotlin",
    "start": "569839",
    "end": "572880"
  },
  {
    "text": "bindings the api is a little bit",
    "start": "572880",
    "end": "574880"
  },
  {
    "text": "different you'll notice that",
    "start": "574880",
    "end": "578320"
  },
  {
    "text": "we actually need to pass in a cold flow",
    "start": "578320",
    "end": "581040"
  },
  {
    "text": "and we'll get a cold flow and response",
    "start": "581040",
    "end": "583120"
  },
  {
    "text": "now this makes it difficult when we're",
    "start": "583120",
    "end": "584640"
  },
  {
    "text": "trying to",
    "start": "584640",
    "end": "586560"
  },
  {
    "text": "make changes or",
    "start": "586560",
    "end": "589680"
  },
  {
    "text": "react to the responses that we're",
    "start": "590080",
    "end": "592160"
  },
  {
    "text": "receiving from the stream",
    "start": "592160",
    "end": "593839"
  },
  {
    "text": "like sending requests based off of",
    "start": "593839",
    "end": "596080"
  },
  {
    "text": "responses that we've already received",
    "start": "596080",
    "end": "598160"
  },
  {
    "text": "um but there's very easy ways to get",
    "start": "598160",
    "end": "601839"
  },
  {
    "text": "around this limitation",
    "start": "601839",
    "end": "603040"
  },
  {
    "text": "in this uh in this specific example",
    "start": "603040",
    "end": "606160"
  },
  {
    "text": "we just instantiate a channel that lets",
    "start": "606160",
    "end": "608640"
  },
  {
    "text": "us have a reference to our request",
    "start": "608640",
    "end": "610560"
  },
  {
    "text": "stream",
    "start": "610560",
    "end": "611360"
  },
  {
    "text": "and we'll send that into um our argument",
    "start": "611360",
    "end": "614240"
  },
  {
    "text": "for our method",
    "start": "614240",
    "end": "616800"
  },
  {
    "text": "the request channel we go ahead and we",
    "start": "617040",
    "end": "619360"
  },
  {
    "text": "start iterating as well",
    "start": "619360",
    "end": "620800"
  },
  {
    "text": "only difference is using our fluent",
    "start": "620800",
    "end": "622320"
  },
  {
    "text": "builders and we collect our responses",
    "start": "622320",
    "end": "624959"
  },
  {
    "text": "and",
    "start": "624959",
    "end": "626240"
  },
  {
    "text": "close out our channel once we've",
    "start": "626240",
    "end": "627360"
  },
  {
    "text": "completed or we cancel the call",
    "start": "627360",
    "end": "629920"
  },
  {
    "text": "once we've encountered some kind of",
    "start": "629920",
    "end": "632240"
  },
  {
    "text": "invalid",
    "start": "632240",
    "end": "632959"
  },
  {
    "text": "uh response",
    "start": "632959",
    "end": "636000"
  },
  {
    "start": "636000",
    "end": "636000"
  },
  {
    "text": "so going a little deeper we're gonna",
    "start": "636560",
    "end": "638640"
  },
  {
    "text": "look past syntactical differences",
    "start": "638640",
    "end": "640320"
  },
  {
    "text": "and we're gonna dive into the behavior",
    "start": "640320",
    "end": "642560"
  },
  {
    "text": "of what's using co-routines",
    "start": "642560",
    "end": "644399"
  },
  {
    "text": "with grpc um the behavior of",
    "start": "644399",
    "end": "648079"
  },
  {
    "text": "our apis specifically we're going to",
    "start": "648079",
    "end": "650000"
  },
  {
    "text": "look at how the concept of structured",
    "start": "650000",
    "end": "651920"
  },
  {
    "text": "concurrency and cooperative cancellation",
    "start": "651920",
    "end": "654000"
  },
  {
    "text": "affect our api implementations these",
    "start": "654000",
    "end": "656880"
  },
  {
    "text": "concepts are",
    "start": "656880",
    "end": "657839"
  },
  {
    "text": "first-class citizens in kotlin covered",
    "start": "657839",
    "end": "659600"
  },
  {
    "text": "scenes they allow us to write safer more",
    "start": "659600",
    "end": "661680"
  },
  {
    "text": "efficient concurrent code",
    "start": "661680",
    "end": "663760"
  },
  {
    "text": "at a high level core routines are",
    "start": "663760",
    "end": "665519"
  },
  {
    "text": "hierarchical their scopes are",
    "start": "665519",
    "end": "667760"
  },
  {
    "text": "their scopes bear a parent-child",
    "start": "667760",
    "end": "669120"
  },
  {
    "text": "relationship with scopes created within",
    "start": "669120",
    "end": "670800"
  },
  {
    "text": "them",
    "start": "670800",
    "end": "671440"
  },
  {
    "text": "and we'll see how that plays out when",
    "start": "671440",
    "end": "673040"
  },
  {
    "text": "we're orchestrating multiple api calls",
    "start": "673040",
    "end": "676399"
  },
  {
    "text": "cancellation cooperative cancellation is",
    "start": "676399",
    "end": "678959"
  },
  {
    "text": "very beneficial because we're able to",
    "start": "678959",
    "end": "681200"
  },
  {
    "text": "not only terminate unnecessary calls",
    "start": "681200",
    "end": "685200"
  },
  {
    "text": "early but free up those resources so",
    "start": "685200",
    "end": "687279"
  },
  {
    "text": "that we can continue processing",
    "start": "687279",
    "end": "689040"
  },
  {
    "text": "actual requests that are",
    "start": "689040",
    "end": "692240"
  },
  {
    "text": "not in an errored state",
    "start": "692240",
    "end": "695360"
  },
  {
    "text": "so here's our small example we have a",
    "start": "695680",
    "end": "698160"
  },
  {
    "text": "method in this method we're going to be",
    "start": "698160",
    "end": "699839"
  },
  {
    "text": "making three",
    "start": "699839",
    "end": "700959"
  },
  {
    "text": "uh concurrent requests to um",
    "start": "700959",
    "end": "704640"
  },
  {
    "text": "to a service um each request we're",
    "start": "704640",
    "end": "707760"
  },
  {
    "text": "actually going to do",
    "start": "707760",
    "end": "709600"
  },
  {
    "text": "a fire off in an async block",
    "start": "709600",
    "end": "712720"
  },
  {
    "text": "and the actual method will",
    "start": "712720",
    "end": "715839"
  },
  {
    "text": "suspend until we receive the result from",
    "start": "715839",
    "end": "718320"
  },
  {
    "text": "the service",
    "start": "718320",
    "end": "719040"
  },
  {
    "text": "before finally we await the results of",
    "start": "719040",
    "end": "721440"
  },
  {
    "text": "all three of those",
    "start": "721440",
    "end": "722720"
  },
  {
    "text": "and print the message to the console",
    "start": "722720",
    "end": "726399"
  },
  {
    "text": "unfortunately though look one of our",
    "start": "726399",
    "end": "727680"
  },
  {
    "text": "calls has failed which threw an",
    "start": "727680",
    "end": "729440"
  },
  {
    "text": "exception and terminated the child core",
    "start": "729440",
    "end": "730959"
  },
  {
    "text": "routine",
    "start": "730959",
    "end": "731920"
  },
  {
    "text": "now we're still waiting for the",
    "start": "731920",
    "end": "732880"
  },
  {
    "text": "responses for the other two calls and",
    "start": "732880",
    "end": "734480"
  },
  {
    "text": "then even though our method requires all",
    "start": "734480",
    "end": "736160"
  },
  {
    "text": "the values in order to complete",
    "start": "736160",
    "end": "737440"
  },
  {
    "text": "successfully",
    "start": "737440",
    "end": "738639"
  },
  {
    "text": "we don't really need those values",
    "start": "738639",
    "end": "741200"
  },
  {
    "text": "anymore but how do we",
    "start": "741200",
    "end": "742800"
  },
  {
    "text": "cancel the other two calls because",
    "start": "742800",
    "end": "745920"
  },
  {
    "text": "our method is now in an invalid state",
    "start": "745920",
    "end": "749360"
  },
  {
    "text": "well since that child co-routine",
    "start": "749360",
    "end": "752000"
  },
  {
    "text": "completed exceptionally it actually",
    "start": "752000",
    "end": "753760"
  },
  {
    "text": "propagates its cancellation to its",
    "start": "753760",
    "end": "756399"
  },
  {
    "text": "parent",
    "start": "756399",
    "end": "757120"
  },
  {
    "text": "and in this case the parent begins to",
    "start": "757120",
    "end": "759200"
  },
  {
    "text": "now cancel",
    "start": "759200",
    "end": "760399"
  },
  {
    "text": "itself canceling itself uh",
    "start": "760399",
    "end": "764160"
  },
  {
    "text": "essentially equates to notifying",
    "start": "764160",
    "end": "767279"
  },
  {
    "text": "all of its children that",
    "start": "767279",
    "end": "770399"
  },
  {
    "text": "they need to uh cease execution",
    "start": "770399",
    "end": "773760"
  },
  {
    "text": "so if they were suspended go ahead",
    "start": "773760",
    "end": "776800"
  },
  {
    "text": "uh run any cancellation callbacks that",
    "start": "776800",
    "end": "778959"
  },
  {
    "text": "might be registered",
    "start": "778959",
    "end": "780399"
  },
  {
    "text": "but go ahead and exit early",
    "start": "780399",
    "end": "783600"
  },
  {
    "text": "and if we look in our case",
    "start": "783600",
    "end": "787440"
  },
  {
    "text": "since we're using grpc kotlin",
    "start": "787440",
    "end": "790720"
  },
  {
    "text": "we actually are able to hook into the",
    "start": "790720",
    "end": "793519"
  },
  {
    "text": "cancellation of our scope",
    "start": "793519",
    "end": "795040"
  },
  {
    "text": "of our co-routine scope and call the",
    "start": "795040",
    "end": "798720"
  },
  {
    "text": "cancel method",
    "start": "798720",
    "end": "799600"
  },
  {
    "text": "on the underlying grpc call that means",
    "start": "799600",
    "end": "802639"
  },
  {
    "text": "that our scope cancellations are then",
    "start": "802639",
    "end": "804320"
  },
  {
    "text": "propagated to the server",
    "start": "804320",
    "end": "806720"
  },
  {
    "text": "via the underlying gpc call and allows",
    "start": "806720",
    "end": "809200"
  },
  {
    "text": "us to",
    "start": "809200",
    "end": "810000"
  },
  {
    "text": "do some cleanup or actually behave",
    "start": "810000",
    "end": "813200"
  },
  {
    "text": "accordingly or react accordingly on the",
    "start": "813200",
    "end": "814720"
  },
  {
    "text": "server side",
    "start": "814720",
    "end": "815680"
  },
  {
    "text": "while exiting this method early",
    "start": "815680",
    "end": "819600"
  },
  {
    "text": "so now that the children have cancelled",
    "start": "819600",
    "end": "822000"
  },
  {
    "text": "inside of the uh",
    "start": "822000",
    "end": "823040"
  },
  {
    "text": "parent core routine the parent can then",
    "start": "823040",
    "end": "825279"
  },
  {
    "text": "be considered cancelled",
    "start": "825279",
    "end": "827040"
  },
  {
    "text": "and once it's finished basically it",
    "start": "827040",
    "end": "830880"
  },
  {
    "text": "terminates and what you want to find out",
    "start": "830880",
    "end": "834240"
  },
  {
    "text": "though is",
    "start": "834240",
    "end": "835199"
  },
  {
    "text": "like how does that cancellation signal",
    "start": "835199",
    "end": "837680"
  },
  {
    "text": "that we sent to the server",
    "start": "837680",
    "end": "839120"
  },
  {
    "text": "affect the execution of the server so",
    "start": "839120",
    "end": "842880"
  },
  {
    "text": "if we take a look at service a",
    "start": "842880",
    "end": "846079"
  },
  {
    "text": "one of the services we were calling and",
    "start": "846079",
    "end": "848160"
  },
  {
    "text": "if our service is implemented using co",
    "start": "848160",
    "end": "850399"
  },
  {
    "text": "routines",
    "start": "850399",
    "end": "851279"
  },
  {
    "text": "then the core routine scope of our",
    "start": "851279",
    "end": "852639"
  },
  {
    "text": "method handler is actually canceled",
    "start": "852639",
    "end": "855040"
  },
  {
    "text": "and the flow will match",
    "start": "855040",
    "end": "858320"
  },
  {
    "text": "what was done in uh in the client side",
    "start": "858320",
    "end": "861440"
  },
  {
    "text": "essentially the cancellation will",
    "start": "861440",
    "end": "864560"
  },
  {
    "text": "propagate to",
    "start": "864560",
    "end": "865440"
  },
  {
    "text": "all of the calls being made to other",
    "start": "865440",
    "end": "867519"
  },
  {
    "text": "resources",
    "start": "867519",
    "end": "868560"
  },
  {
    "text": "and that cancellation will actually go",
    "start": "868560",
    "end": "870320"
  },
  {
    "text": "all the way down the call graph",
    "start": "870320",
    "end": "872240"
  },
  {
    "text": "um if there are other services that are",
    "start": "872240",
    "end": "874880"
  },
  {
    "text": "implementing the",
    "start": "874880",
    "end": "875839"
  },
  {
    "text": "the co-routines or at least hooked into",
    "start": "875839",
    "end": "877600"
  },
  {
    "text": "the cancellation uh",
    "start": "877600",
    "end": "879040"
  },
  {
    "text": "hook or the cancellation callback for",
    "start": "879040",
    "end": "881199"
  },
  {
    "text": "the uh service calls",
    "start": "881199",
    "end": "883360"
  },
  {
    "text": "so this is a cooperative cancellation",
    "start": "883360",
    "end": "884880"
  },
  {
    "text": "across network boundaries",
    "start": "884880",
    "end": "886480"
  },
  {
    "text": "and it helps prevent our services from",
    "start": "886480",
    "end": "888240"
  },
  {
    "text": "from performing unnecessary operations",
    "start": "888240",
    "end": "890480"
  },
  {
    "text": "and wasting resources but it's not",
    "start": "890480",
    "end": "894399"
  },
  {
    "text": "something that it's not a behavior that",
    "start": "894399",
    "end": "896160"
  },
  {
    "text": "we always want it's there are times",
    "start": "896160",
    "end": "898320"
  },
  {
    "text": "where we want to",
    "start": "898320",
    "end": "899199"
  },
  {
    "text": "opt out of consolation there are times",
    "start": "899199",
    "end": "901279"
  },
  {
    "text": "where we want to",
    "start": "901279",
    "end": "902399"
  },
  {
    "text": "basically ensure that whatever method or",
    "start": "902399",
    "end": "905600"
  },
  {
    "text": "or",
    "start": "905600",
    "end": "906000"
  },
  {
    "text": "logic that we're running that we either",
    "start": "906000",
    "end": "908320"
  },
  {
    "text": "complete it successfully or that we wrap",
    "start": "908320",
    "end": "910079"
  },
  {
    "text": "it in some kind of transaction and make",
    "start": "910079",
    "end": "911519"
  },
  {
    "text": "sure we roll back",
    "start": "911519",
    "end": "912639"
  },
  {
    "text": "there's hundreds of different uh cases",
    "start": "912639",
    "end": "915279"
  },
  {
    "text": "where",
    "start": "915279",
    "end": "915839"
  },
  {
    "text": "we actually don't want to terminate even",
    "start": "915839",
    "end": "917519"
  },
  {
    "text": "though the client has finished something",
    "start": "917519",
    "end": "920639"
  },
  {
    "text": "and that's very easy to",
    "start": "920639",
    "end": "923680"
  },
  {
    "start": "921000",
    "end": "921000"
  },
  {
    "text": "that that's very easy to implement um",
    "start": "923680",
    "end": "926560"
  },
  {
    "text": "there are plenty of",
    "start": "926560",
    "end": "927760"
  },
  {
    "text": "ways and options on how you can",
    "start": "927760",
    "end": "929519"
  },
  {
    "text": "implement like",
    "start": "929519",
    "end": "931120"
  },
  {
    "text": "opting out of uh cooperative",
    "start": "931120",
    "end": "933519"
  },
  {
    "text": "cancellation",
    "start": "933519",
    "end": "934480"
  },
  {
    "text": "um the most the simplest option though",
    "start": "934480",
    "end": "937360"
  },
  {
    "text": "is just wrapping your method",
    "start": "937360",
    "end": "938839"
  },
  {
    "text": "implementation with",
    "start": "938839",
    "end": "940639"
  },
  {
    "text": "with context non-cancelable and still",
    "start": "940639",
    "end": "942720"
  },
  {
    "text": "perform your uh",
    "start": "942720",
    "end": "944160"
  },
  {
    "text": "your logic and what this will do is just",
    "start": "944160",
    "end": "946880"
  },
  {
    "text": "protect",
    "start": "946880",
    "end": "947440"
  },
  {
    "text": "your that particular block of code from",
    "start": "947440",
    "end": "951120"
  },
  {
    "text": "any receiving any signals that might",
    "start": "951120",
    "end": "954160"
  },
  {
    "text": "try to cancel its execution",
    "start": "954160",
    "end": "958079"
  },
  {
    "start": "959000",
    "end": "959000"
  },
  {
    "text": "so we've gone ahead and looked at",
    "start": "959040",
    "end": "963199"
  },
  {
    "text": "the apis that are available the",
    "start": "963199",
    "end": "966240"
  },
  {
    "text": "differences in those apis we've looked",
    "start": "966240",
    "end": "968320"
  },
  {
    "text": "at",
    "start": "968320",
    "end": "969279"
  },
  {
    "text": "how co-routines make our services better",
    "start": "969279",
    "end": "972079"
  },
  {
    "text": "and we've looked at",
    "start": "972079",
    "end": "974240"
  },
  {
    "text": "how they make our implementations more",
    "start": "974240",
    "end": "976320"
  },
  {
    "text": "concise",
    "start": "976320",
    "end": "977600"
  },
  {
    "text": "but that's not all that we have to",
    "start": "977600",
    "end": "979519"
  },
  {
    "text": "really look forward to when it comes to",
    "start": "979519",
    "end": "980959"
  },
  {
    "text": "this ecosystem",
    "start": "980959",
    "end": "982959"
  },
  {
    "text": "and what's really exciting is the future",
    "start": "982959",
    "end": "986639"
  },
  {
    "text": "the google grpc kotlin implementation is",
    "start": "986639",
    "end": "989120"
  },
  {
    "text": "still new",
    "start": "989120",
    "end": "989759"
  },
  {
    "text": "but it's already gaining a lot of",
    "start": "989759",
    "end": "991040"
  },
  {
    "text": "traction and as optimizations and",
    "start": "991040",
    "end": "993360"
  },
  {
    "text": "improvements are made",
    "start": "993360",
    "end": "994560"
  },
  {
    "text": "it'll no doubt solidify kotlin as a",
    "start": "994560",
    "end": "996480"
  },
  {
    "text": "first class grpc citizen",
    "start": "996480",
    "end": "998880"
  },
  {
    "text": "separately there's exciting work being",
    "start": "998880",
    "end": "1000880"
  },
  {
    "text": "done to improve the protobuf message",
    "start": "1000880",
    "end": "1002959"
  },
  {
    "text": "support",
    "start": "1002959",
    "end": "1003759"
  },
  {
    "text": "so that we can get native first-class",
    "start": "1003759",
    "end": "1005600"
  },
  {
    "text": "features of kotlin like",
    "start": "1005600",
    "end": "1007360"
  },
  {
    "text": "data classes when we're building out our",
    "start": "1007360",
    "end": "1009120"
  },
  {
    "text": "our messages",
    "start": "1009120",
    "end": "1011120"
  },
  {
    "text": "um and thinking in the long term",
    "start": "1011120",
    "end": "1015360"
  },
  {
    "text": "the the one feature or the one",
    "start": "1015360",
    "end": "1020079"
  },
  {
    "text": "like thing that keeps coming up in the",
    "start": "1020079",
    "end": "1022639"
  },
  {
    "text": "community",
    "start": "1022639",
    "end": "1023519"
  },
  {
    "text": "is multi-platform grpc and what that",
    "start": "1023519",
    "end": "1026798"
  },
  {
    "text": "means is that if we",
    "start": "1026799",
    "end": "1028480"
  },
  {
    "text": "can work to build a multi-platform grpc",
    "start": "1028480",
    "end": "1031600"
  },
  {
    "text": "implementation",
    "start": "1031600",
    "end": "1032798"
  },
  {
    "text": "then we're able to use",
    "start": "1032799",
    "end": "1035839"
  },
  {
    "text": "and share our grpc business logic across",
    "start": "1035839",
    "end": "1038880"
  },
  {
    "text": "our platforms",
    "start": "1038880",
    "end": "1039918"
  },
  {
    "text": "even more specifically ios and android",
    "start": "1039919",
    "end": "1043199"
  },
  {
    "text": "letting us share that code letting us",
    "start": "1043199",
    "end": "1046480"
  },
  {
    "text": "centralize it right at once run",
    "start": "1046480",
    "end": "1048558"
  },
  {
    "text": "everywhere",
    "start": "1048559",
    "end": "1049679"
  },
  {
    "text": "and actually uh minimize",
    "start": "1049679",
    "end": "1053600"
  },
  {
    "text": "the work being done by teams that have",
    "start": "1053600",
    "end": "1055440"
  },
  {
    "text": "to support multiple platforms",
    "start": "1055440",
    "end": "1057440"
  },
  {
    "text": "um this is something that's",
    "start": "1057440",
    "end": "1061520"
  },
  {
    "text": "been talked a lot about but there hasn't",
    "start": "1061520",
    "end": "1063200"
  },
  {
    "text": "been a lot of",
    "start": "1063200",
    "end": "1064720"
  },
  {
    "text": "um work in that field just because of",
    "start": "1064720",
    "end": "1067280"
  },
  {
    "text": "the fact that grpc collin",
    "start": "1067280",
    "end": "1069200"
  },
  {
    "text": "uh in general is still so young but",
    "start": "1069200",
    "end": "1072720"
  },
  {
    "text": "there are implementations specifically",
    "start": "1072720",
    "end": "1074799"
  },
  {
    "text": "square wire which is built from the",
    "start": "1074799",
    "end": "1076400"
  },
  {
    "text": "ground up",
    "start": "1076400",
    "end": "1077280"
  },
  {
    "text": "on kotlin multi-platform that have the",
    "start": "1077280",
    "end": "1080000"
  },
  {
    "text": "potential to",
    "start": "1080000",
    "end": "1081120"
  },
  {
    "text": "fill this niche in the future um",
    "start": "1081120",
    "end": "1084799"
  },
  {
    "text": "so going over all of that it's uh",
    "start": "1084799",
    "end": "1087840"
  },
  {
    "text": "it's easy to see how we have not just",
    "start": "1087840",
    "end": "1091280"
  },
  {
    "text": "evolved but provided an api that",
    "start": "1091280",
    "end": "1094640"
  },
  {
    "text": "is covered first class code routines api",
    "start": "1094640",
    "end": "1098160"
  },
  {
    "text": "first class provided by the actual",
    "start": "1098160",
    "end": "1102080"
  },
  {
    "text": "grpc team with all the exciting things",
    "start": "1102080",
    "end": "1104720"
  },
  {
    "text": "coming",
    "start": "1104720",
    "end": "1105840"
  },
  {
    "text": "it's easy to see how kotlin and grpc",
    "start": "1105840",
    "end": "1109520"
  },
  {
    "text": "are really going to start growing much",
    "start": "1109520",
    "end": "1111840"
  },
  {
    "text": "faster now than they've done in previous",
    "start": "1111840",
    "end": "1113360"
  },
  {
    "text": "years",
    "start": "1113360",
    "end": "1114400"
  },
  {
    "text": "i thank you all for taking the time to",
    "start": "1114400",
    "end": "1116559"
  },
  {
    "text": "watch my talk",
    "start": "1116559",
    "end": "1117840"
  },
  {
    "text": "and um i'm going to leave it up for",
    "start": "1117840",
    "end": "1120400"
  },
  {
    "text": "questions and answers now on anything",
    "start": "1120400",
    "end": "1122559"
  },
  {
    "text": "related to",
    "start": "1122559",
    "end": "1123919"
  },
  {
    "text": "either the api designs or just",
    "start": "1123919",
    "end": "1127520"
  },
  {
    "text": "implementations or cover teams in",
    "start": "1127520",
    "end": "1128799"
  },
  {
    "text": "general thank you for your time",
    "start": "1128799",
    "end": "1134480"
  }
]