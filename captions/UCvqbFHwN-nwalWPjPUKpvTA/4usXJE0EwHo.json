[
  {
    "text": "hello hello everyone all right it is 5 to 12 so it is time to talk about",
    "start": "0",
    "end": "5640"
  },
  {
    "text": "contour alright thank you for coming my",
    "start": "5640",
    "end": "11580"
  },
  {
    "text": "name is David I am a staff systems engineer at hep tear and I'm here to talk to you about contour which is a",
    "start": "11580",
    "end": "17750"
  },
  {
    "text": "project that I've been working on since I joined hippy oh this is a presentation",
    "start": "17750",
    "end": "22800"
  },
  {
    "text": "it's in unequal parts the first is about the design of contour and the second is",
    "start": "22800",
    "end": "28199"
  },
  {
    "text": "really about the act of developing a kubernetes controller so hopefully there'll be something something for",
    "start": "28199",
    "end": "33960"
  },
  {
    "text": "everyone here in this room um I want to I want to recognize that I'm actually in",
    "start": "33960",
    "end": "39120"
  },
  {
    "text": "the envoy track so let's get a let's get an idea here like who here is here because you're here for to talk about envoy some people ok good",
    "start": "39120",
    "end": "46920"
  },
  {
    "text": "who's here because it's koukaon you here to talk about kubernetes other people excellent and who's here to talk about",
    "start": "46920",
    "end": "52860"
  },
  {
    "text": "go nice all right ok so I want to give a",
    "start": "52860",
    "end": "58680"
  },
  {
    "text": "little with the background we have in this room I want to give a little bit about what an ingress controller does",
    "start": "58680",
    "end": "64670"
  },
  {
    "text": "we're here in Northern Europe so you'll recognize signs like this this is Danish",
    "start": "64670",
    "end": "69930"
  },
  {
    "text": "for entrance and the word it gang has",
    "start": "69930",
    "end": "75090"
  },
  {
    "text": "the route in Latin of ingress which is roughly to step in so an ingress controller is responsible for traffic",
    "start": "75090",
    "end": "81990"
  },
  {
    "text": "entering a cluster and the takeaway from this slide is as much what I just said",
    "start": "81990",
    "end": "87060"
  },
  {
    "text": "as what I didn't so an ingress control and kubernetes is concerned with incoming traffic that's it and the next",
    "start": "87060",
    "end": "96420"
  },
  {
    "text": "question you might have is probably along the lines of well I'm already running enable us or GCE or something",
    "start": "96420",
    "end": "102450"
  },
  {
    "text": "and I'm using a service load balancer like why don't need to care about this ingress thing like what is it going to",
    "start": "102450",
    "end": "108210"
  },
  {
    "text": "do for me and to answer that I want to go through a little bit of what I",
    "start": "108210",
    "end": "114689"
  },
  {
    "text": "perhaps pretentiously call the philosophy of ingress like if you're running this extra component in your",
    "start": "114689",
    "end": "120780"
  },
  {
    "text": "infrastructure it has a non zero maintenance cost so what is it what is it going to give you in return for that",
    "start": "120780",
    "end": "126600"
  },
  {
    "text": "cost and the simples work and I can put it is that a good ingress controller",
    "start": "126600",
    "end": "133020"
  },
  {
    "text": "should about 90% of the things that you would have to deploy Apache or nginx or squid",
    "start": "133020",
    "end": "140160"
  },
  {
    "text": "or some kind of front proxy in your request path it should take care of that you know that 90% number now now don't",
    "start": "140160",
    "end": "147180"
  },
  {
    "text": "get fixated on like Dave said 90 it could be 80 percent it could be 82 percent the exact number is not",
    "start": "147180",
    "end": "152910"
  },
  {
    "text": "important what is important is I'm trying to make an argument for a common",
    "start": "152910",
    "end": "158340"
  },
  {
    "text": "subset of functionality and so there are four things which I think contribute to",
    "start": "158340",
    "end": "164400"
  },
  {
    "text": "an ingress controller getting to this 90 percent level and the first one is",
    "start": "164400",
    "end": "170070"
  },
  {
    "text": "traffic consolidation if every time you deploy a service you deploy it behind",
    "start": "170070",
    "end": "175770"
  },
  {
    "text": "it's only lb or GK load balancer or whatever that's going to have a cost",
    "start": "175770",
    "end": "181410"
  },
  {
    "text": "it's going to have a maintenance cost these things are not free and neither a public IPS they're kind of getting rare",
    "start": "181410",
    "end": "187530"
  },
  {
    "text": "these days and depending on the security posture of your organization there may",
    "start": "187530",
    "end": "192690"
  },
  {
    "text": "not be cool with having so many ways for traffic to come into your network they may really want it to all come through one place and a good friend pointed out",
    "start": "192690",
    "end": "201630"
  },
  {
    "text": "last night that service load balancer isn't just cloud specific it's kind of",
    "start": "201630",
    "end": "208080"
  },
  {
    "text": "cloud only if you're running kubernetes on your own infrastructure bare metal or in your own data center service load",
    "start": "208080",
    "end": "215610"
  },
  {
    "text": "balancers just don't work so the second is TLS management its 2018 in a couple",
    "start": "215610",
    "end": "223050"
  },
  {
    "text": "of months chrome is going to start marking things which are not HTTPS is insecure so we've got to get on board with that we have great projects like",
    "start": "223050",
    "end": "230760"
  },
  {
    "text": "let's encrypt and cert manager we're going to take care of that the mechanisms of getting you that TLS",
    "start": "230760",
    "end": "236700"
  },
  {
    "text": "certificate all you have to do is now present it to people now you can do this",
    "start": "236700",
    "end": "242130"
  },
  {
    "text": "with your cloud provider you can go directly to your EOB or alb and set up",
    "start": "242130",
    "end": "248100"
  },
  {
    "text": "the certificate but that's not something kubernetes is going to help you with and we really want this to be integrated into the kubernetes kind of",
    "start": "248100",
    "end": "254850"
  },
  {
    "text": "reconciliation loop the third is perhaps an ocean of abstract",
    "start": "254850",
    "end": "260900"
  },
  {
    "text": "configuration like if you've if ten years ago you deployed your application",
    "start": "260900",
    "end": "266780"
  },
  {
    "text": "behind Apache you have an Apache config can you take that and run that straight on nginx no they speak different",
    "start": "266780",
    "end": "272720"
  },
  {
    "text": "languages so a good ingress control I should give you a notion of abstracting",
    "start": "272720",
    "end": "278090"
  },
  {
    "text": "this configuration so it's portable across solutions and the last thing like",
    "start": "278090",
    "end": "284750"
  },
  {
    "text": "once you've got a single set of IPs you've got your TLS set up there might be some other things which might still",
    "start": "284750",
    "end": "290030"
  },
  {
    "text": "you might still need to have something in your request flow and I call these kind of table stakes path based routing",
    "start": "290030",
    "end": "297770"
  },
  {
    "text": "if using a service load bouncer you're working at layer 3 all that traffic is going to go directly to your application",
    "start": "297770",
    "end": "303880"
  },
  {
    "text": "there's plenty of cases where you want to take your static data and have that served from a different application maybe your ads comes from a different",
    "start": "303880",
    "end": "310699"
  },
  {
    "text": "service so you want to do path based routing and we'd like that to be in an abstract configuration form not kind of",
    "start": "310699",
    "end": "316849"
  },
  {
    "text": "handled in your application as I said before TLS so it's very common to need",
    "start": "316849",
    "end": "323419"
  },
  {
    "text": "something to do that HTTP HTTP ups HTTP upgrade and it'll be a real shame to have to run a web server in front of",
    "start": "323419",
    "end": "330080"
  },
  {
    "text": "your application just to do that fix up and this is the last one request",
    "start": "330080",
    "end": "335630"
  },
  {
    "text": "rewriting is something that we don't currently do in contour but we certainly want to do it is that there are plenty",
    "start": "335630",
    "end": "341150"
  },
  {
    "text": "of times in my career where a URL has been published like got tweeted out or it's in some marketing material it's",
    "start": "341150",
    "end": "347479"
  },
  {
    "text": "slightly wrong so you need you have you have the choice in do I add do I change my application to like match the",
    "start": "347479",
    "end": "354500"
  },
  {
    "text": "marketing material or like how am I going to fix this up and so one of the things I think an ingress controller",
    "start": "354500",
    "end": "360560"
  },
  {
    "text": "should do is some at least basic rewrite rewriting not going crazy but just some",
    "start": "360560",
    "end": "366289"
  },
  {
    "text": "basic stuff and so contour exists as an ingress controller to fulfill these",
    "start": "366289",
    "end": "373130"
  },
  {
    "text": "requirements that I talked about this is our goal and it's also important to note",
    "start": "373130",
    "end": "378320"
  },
  {
    "text": "that contour is only concerned with what you can put in the ingress document you",
    "start": "378320",
    "end": "384110"
  },
  {
    "text": "might want TCP forwarding or SSL pass-through but if you can't talk about it in the schema of the ingress object",
    "start": "384110",
    "end": "391249"
  },
  {
    "text": "and unfortunately contour can't help you do that this isn't necessarily like",
    "start": "391249",
    "end": "396349"
  },
  {
    "text": "contours fault or envoys fault it's widely recognized that the ingress object in kubernetes is underdeveloped",
    "start": "396349",
    "end": "402469"
  },
  {
    "text": "but that's kind of out of scope for this talk the goal of contour is to accompany as",
    "start": "402469",
    "end": "409249"
  },
  {
    "text": "much of this ingress philosophy get to that eighty or ninety percent use case that you might otherwise have to break",
    "start": "409249",
    "end": "415249"
  },
  {
    "text": "out Apache with mod rewrite or just put something in your requests flow and it",
    "start": "415249",
    "end": "420739"
  },
  {
    "text": "turns out that envoy is a really wonderful fit for the declarative nature of kubernetes so the question is why did",
    "start": "420739",
    "end": "431239"
  },
  {
    "text": "we choose to build contour on envoy and the simplest answer is that envoy is a",
    "start": "431239",
    "end": "436459"
  },
  {
    "text": "proxy design for dynamic configuration the cute appreciating why I think that",
    "start": "436459",
    "end": "441919"
  },
  {
    "text": "this is important is that the difference to every other server I've used every",
    "start": "441919",
    "end": "448009"
  },
  {
    "text": "other Network appliance that I've used that has an API is that yeah you can you can connect to their API and you can",
    "start": "448009",
    "end": "453829"
  },
  {
    "text": "change some configuration values as a client of that device but the the the",
    "start": "453829",
    "end": "459169"
  },
  {
    "text": "source of truth the configuration lives in that device they own it envoy is",
    "start": "459169",
    "end": "465379"
  },
  {
    "text": "completely different it's an API that connects to a server which unimaginative",
    "start": "465379",
    "end": "471049"
  },
  {
    "text": "Lee they call the management server and it asks for its configuration and this is the linchpin this is what makes the",
    "start": "471049",
    "end": "477559"
  },
  {
    "text": "difference by default envoy doesn't do anything it just waits for configuration",
    "start": "477559",
    "end": "482959"
  },
  {
    "text": "to be streamed to it and the similarity with the couplet is really strong think",
    "start": "482959",
    "end": "488449"
  },
  {
    "text": "about what the Kubler does it just runs pods that match a filter it doesn't know",
    "start": "488449",
    "end": "493459"
  },
  {
    "text": "doesn't know what care how they got there doesn't care where they're going afterwards it just makes the world match",
    "start": "493459",
    "end": "499819"
  },
  {
    "text": "the data that it can see in the API and this is exactly the same story for Envoy",
    "start": "499819",
    "end": "504860"
  },
  {
    "text": "and why envoy and contour was such a great match for this project and so if",
    "start": "504860",
    "end": "512419"
  },
  {
    "text": "this boils down to contour is just a gateway a translator between kubernetes",
    "start": "512419",
    "end": "517490"
  },
  {
    "text": "api and the Envoy api the traffic flows",
    "start": "517490",
    "end": "522500"
  },
  {
    "text": "from your left to right contour just watches the kubernetes api and translates it into the gr pc stream",
    "start": "522500",
    "end": "529080"
  },
  {
    "text": "that envoy needs and it turns out there's some pretty good synergies",
    "start": "529080",
    "end": "534540"
  },
  {
    "text": "between coop the kubernetes starter model and the envoy data model",
    "start": "534540",
    "end": "540410"
  },
  {
    "text": "kubernetes is in grocers mapped to RDS which is routes and LDS which is",
    "start": "540410",
    "end": "546420"
  },
  {
    "text": "listeners for TLS and SNI services in kubernetes map almost directly to the",
    "start": "546420",
    "end": "554130"
  },
  {
    "text": "cluster object in Envoy the backend abstract cluster endpoints map even more",
    "start": "554130",
    "end": "560070"
  },
  {
    "text": "directly to EDS which is the endpoint data service they which contains cluster",
    "start": "560070",
    "end": "566580"
  },
  {
    "text": "load assignments the elements of instances of a service and kubernetes",
    "start": "566580",
    "end": "571980"
  },
  {
    "text": "secrets are a little bit a little bit harder to handle because while the",
    "start": "571980",
    "end": "577320"
  },
  {
    "text": "ingress says I want this URL to be on tier on HTTP the secret actually",
    "start": "577320",
    "end": "583589"
  },
  {
    "text": "contains the certificate data but we can manage that with a small state machine and as a brief digression um people",
    "start": "583589",
    "end": "592860"
  },
  {
    "text": "people frequently ask me so contour uses envoy ride so it's a service mesh right",
    "start": "592860",
    "end": "599279"
  },
  {
    "text": "and I think the answer I've clearly shown is that no we are focused just on",
    "start": "599279",
    "end": "604529"
  },
  {
    "text": "HTTP contour only deals with ingress but it has made a really great base to build",
    "start": "604529",
    "end": "610440"
  },
  {
    "text": "upon so for example if you'd like to hear about the things we're building on top of contour you can drop by the",
    "start": "610440",
    "end": "616290"
  },
  {
    "text": "egipto booth outside or you can come here my colleague ross talked about gimbal which is a project which builds",
    "start": "616290",
    "end": "622320"
  },
  {
    "text": "about contour and a number of our other open-source products for multicast or",
    "start": "622320",
    "end": "627390"
  },
  {
    "text": "traffic management right ten minutes that was a whirlwind introduction to",
    "start": "627390",
    "end": "633209"
  },
  {
    "text": "contour the ingress controller so for the rest of the talk I want to address you the audience as developers of Cuban",
    "start": "633209",
    "end": "641160"
  },
  {
    "text": "age components you're going to develop controllers that run and extend your kubernetes clusters will leave that",
    "start": "641160",
    "end": "651660"
  },
  {
    "text": "dangerously there so as of yesterday contour is just shy",
    "start": "651660",
    "end": "657350"
  },
  {
    "text": "of about 10,000 lines of code we have about 2900 lines of source and about",
    "start": "657350",
    "end": "664190"
  },
  {
    "text": "7,000 lines of tests and I think this is about the right ratio also a contour as",
    "start": "664190",
    "end": "671839"
  },
  {
    "text": "a moderately complicated kubernetes controller 10,000 line feels about the right size certainly 3,000 lines for",
    "start": "671839",
    "end": "679220"
  },
  {
    "text": "actual the code that feels about the right size so if you're writing a",
    "start": "679220",
    "end": "684529"
  },
  {
    "text": "controller and you're getting into tens or hundreds of thousands of lines of code my suggestion is to stop and wonder",
    "start": "684529",
    "end": "692000"
  },
  {
    "text": "if you're trying to do too much if you need to decompose your problem a bit more this is a quick overview of what",
    "start": "692000",
    "end": "699470"
  },
  {
    "text": "contour looks like in the repo it's slightly edited we have our nice skinny command which just sets up the logging",
    "start": "699470",
    "end": "707269"
  },
  {
    "text": "connects to the Kuban A's client sets up sets up all the little bits and pieces",
    "start": "707269",
    "end": "712459"
  },
  {
    "text": "and then lets them go off and run we do very little work actually in the command internal contour is the translator the",
    "start": "712459",
    "end": "719660"
  },
  {
    "text": "bit in the middle that you saw and this is where all the horror show of converting kubernetes objects to envoy objects happens each we is our",
    "start": "719660",
    "end": "727550"
  },
  {
    "text": "integration tests and we'll come back to those later in the talk and then we just have a bunch of helpers this is mainly",
    "start": "727550",
    "end": "733520"
  },
  {
    "text": "around constructing the bootstrap config the this is a gr PC server which",
    "start": "733520",
    "end": "739250"
  },
  {
    "text": "implements the protocol that envoy uses so called XDS some kubernetes helpers",
    "start": "739250",
    "end": "745700"
  },
  {
    "text": "and some goroutine helpers which we'll talk about later on and that's all there",
    "start": "745700",
    "end": "750980"
  },
  {
    "text": "is that's all there is to it now it's common in projects that descend from the kubernetes family to put all your code",
    "start": "750980",
    "end": "757730"
  },
  {
    "text": "into a package subdirectory and personally I think this is a little redundant like in go we don't start",
    "start": "757730",
    "end": "763970"
  },
  {
    "text": "types that our interfaces with an I so putting packages in a directory called package seems a little bit redundant but",
    "start": "763970",
    "end": "771170"
  },
  {
    "text": "I do see the the similarity with putting commands in a directory called command",
    "start": "771170",
    "end": "776320"
  },
  {
    "text": "so I'd like to offer an alternate suggestion which is to place your code",
    "start": "776320",
    "end": "781339"
  },
  {
    "text": "that you do not intend other projects or packages to use inside an internal folder internal is a",
    "start": "781339",
    "end": "788410"
  },
  {
    "text": "special name that the go tool recognizes and will effectively prevent packages",
    "start": "788410",
    "end": "793480"
  },
  {
    "text": "which are not siblings of that package from importing it it effectively makes them private to your project of course",
    "start": "793480",
    "end": "801220"
  },
  {
    "text": "later on you can move them out of the internal directory if you want them to become part of your versions supported",
    "start": "801220",
    "end": "807640"
  },
  {
    "text": "API but I think it's better to start with it with a much smaller surface area rather than rather than exposing",
    "start": "807640",
    "end": "814210"
  },
  {
    "text": "everything and then having to have a difficult conversation that like oh we refactored that I didn't think anyone",
    "start": "814210",
    "end": "819280"
  },
  {
    "text": "was using it the next thing I want to talk about is go team management all all",
    "start": "819280",
    "end": "827620"
  },
  {
    "text": "go programs all kubernetes controllers are consisting of a number of go routines working at there very few that",
    "start": "827620",
    "end": "833770"
  },
  {
    "text": "are just a single thread of execution I mean for example contour we have to",
    "start": "833770",
    "end": "839230"
  },
  {
    "text": "watch services ingresses endpoints and secrets so it's a goroutine each just for the watcher then we need to host a",
    "start": "839230",
    "end": "847690"
  },
  {
    "text": "gr PC server and we also host that HTTP server for the debug prof endpoint so at",
    "start": "847690",
    "end": "854590"
  },
  {
    "text": "six or seven different go routines right there and they all represent the running program what we need is a way to link",
    "start": "854590",
    "end": "862420"
  },
  {
    "text": "them together because if one of them stops we want the rest of them to stop like if if if if one starts working then",
    "start": "862420",
    "end": "870250"
  },
  {
    "text": "the service doesn't work so we we want if one stops we're going to shut the rest of them down and what we came up",
    "start": "870250",
    "end": "877750"
  },
  {
    "text": "with uninventive Lee is called a workgroup or just a group and with this",
    "start": "877750",
    "end": "884020"
  },
  {
    "text": "you can register a function with the group it takes one parameter which is a channel which will be closed when you're",
    "start": "884020",
    "end": "890650"
  },
  {
    "text": "asked to shut down so it's your your shutdown signal and then this is the",
    "start": "890650",
    "end": "900430"
  },
  {
    "text": "main run method we create a workgroup we start a goroutine for each function that",
    "start": "900430",
    "end": "906760"
  },
  {
    "text": "was registered we passed them in a channel so that we can ask them to stop later and then at the end whoa hey there",
    "start": "906760",
    "end": "915930"
  },
  {
    "text": "and at the end we just wait for one of them to stop then we ask all the rest of",
    "start": "917770",
    "end": "924880"
  },
  {
    "text": "them to stop wait for them to do and then then run returns now how this works",
    "start": "924880",
    "end": "931300"
  },
  {
    "text": "in practice this is verbatim from command contour this is how we construct contour and run",
    "start": "931300",
    "end": "937060"
  },
  {
    "text": "it we start with a work group we build a kubernetes client and we register each",
    "start": "937060",
    "end": "942700"
  },
  {
    "text": "of the watches passing in a reference to that group so they register themselves we add our debugging handlers and we add",
    "start": "942700",
    "end": "951340"
  },
  {
    "text": "a handler for the gr PC server and then",
    "start": "951340",
    "end": "956350"
  },
  {
    "text": "we just sort them all and wait for them all to exit and that that's all there is",
    "start": "956350",
    "end": "961600"
  },
  {
    "text": "to it and the reason we do this is I'm a firm believer in crash only software we did not try to recover",
    "start": "961600",
    "end": "967780"
  },
  {
    "text": "of course we check errors and we don't want our code to be crappy in crash but if there is something that causes one of",
    "start": "967780",
    "end": "973930"
  },
  {
    "text": "those go routines to exit we just we let contour exit and we go through the recovery process that kubernetes",
    "start": "973930",
    "end": "979750"
  },
  {
    "text": "provides to us we don't try to recover failures inside the program and a lot of",
    "start": "979750",
    "end": "986620"
  },
  {
    "text": "these ideas came from a wonderful presentation from peter berg on last year at go SF if you've got time you",
    "start": "986620",
    "end": "992500"
  },
  {
    "text": "should check that out now in kubernetes",
    "start": "992500",
    "end": "998080"
  },
  {
    "text": "speak contours translator is an instance of a cache resource event handler this",
    "start": "998080",
    "end": "1003810"
  },
  {
    "text": "is the type that you pass to the watcher to be called with events and so what it",
    "start": "1003810",
    "end": "1011670"
  },
  {
    "text": "looks like is that we have a bunch of different watches running in their own go routines who are all calling back to",
    "start": "1011670",
    "end": "1017640"
  },
  {
    "text": "contour and so so to be safe in this situation we need to do two things the",
    "start": "1017640",
    "end": "1023730"
  },
  {
    "text": "first is that we need to make sure that the data structures inside contour are not going to be damaged by race conditions by two because it's quite",
    "start": "1023730",
    "end": "1032010"
  },
  {
    "text": "easy for two events to arrive simultaneously to provide different watches and the",
    "start": "1032010",
    "end": "1037650"
  },
  {
    "text": "second one is that we want to make sure the processing of two events doesn't happen at the same time and I'll explain",
    "start": "1037650",
    "end": "1044790"
  },
  {
    "text": "why on the next slide",
    "start": "1044790",
    "end": "1047690"
  },
  {
    "text": "to properly set up LDS to set up a TLS listener you need the ingress which has",
    "start": "1050110",
    "end": "1056360"
  },
  {
    "text": "the name and mentions a secret by name and you also need the secret which has the the certificate data you need both",
    "start": "1056360",
    "end": "1063260"
  },
  {
    "text": "of these pieces to make it work so if we're watching for events we may see a",
    "start": "1063260",
    "end": "1068899"
  },
  {
    "text": "new ingress arrive and we look and we say oh it mentions the secret we haven't",
    "start": "1068899",
    "end": "1074630"
  },
  {
    "text": "seen that secret yet what what we need",
    "start": "1074630",
    "end": "1079639"
  },
  {
    "text": "to do is we we have to wait until we have the secret before we can proceed",
    "start": "1079639",
    "end": "1086570"
  },
  {
    "text": "now if these events could happen concurrently we do we would just have to sit and spin and wait but what we",
    "start": "1086570",
    "end": "1093230"
  },
  {
    "text": "arrange to do is that only one event is in processed by contour at a time so we",
    "start": "1093230",
    "end": "1099529"
  },
  {
    "text": "can say we don't have the secret now that's fine we'll just record that we record what we have and then the secret",
    "start": "1099529",
    "end": "1106130"
  },
  {
    "text": "will come along later and we'll match up with the ingress that we were just putting together so normally how would",
    "start": "1106130",
    "end": "1114350"
  },
  {
    "text": "you do this and go you just wrap a big mutex around around contour around the",
    "start": "1114350",
    "end": "1119720"
  },
  {
    "text": "whole translator and say this is a critical section we're only going to do one thing at a time and that would",
    "start": "1119720",
    "end": "1124789"
  },
  {
    "text": "definitely work but I was a little bit concerned about blocking the API watches",
    "start": "1124789",
    "end": "1130130"
  },
  {
    "text": "for a long time and so this is a good application of channels and go so we",
    "start": "1130130",
    "end": "1137269"
  },
  {
    "text": "have a small helper inside contour which is called a buffer which wraps a resource event handler so create a",
    "start": "1137269",
    "end": "1145700"
  },
  {
    "text": "create a new buffer around around the resource event handler that we want to",
    "start": "1145700",
    "end": "1151519"
  },
  {
    "text": "buffer now buffer fulfills the resource event handler interface so it can be",
    "start": "1151519",
    "end": "1157220"
  },
  {
    "text": "substituted for the thing that you were wanting to buffer immediately each of",
    "start": "1157220",
    "end": "1165350"
  },
  {
    "text": "the sends will try and put the event that happened onto a channel and in most",
    "start": "1165350",
    "end": "1170419"
  },
  {
    "text": "cases that will succeed because the channel has some free space if it doesn't we default we go back to",
    "start": "1170419",
    "end": "1176870"
  },
  {
    "text": "blocking but we also have the opportunity of saying hey now the the channel is full is you you should be aware of that",
    "start": "1176870",
    "end": "1183600"
  },
  {
    "text": "whereas if we were just using a sink mutex this blocking would be completely hidden to us and then on the other side",
    "start": "1183600",
    "end": "1192030"
  },
  {
    "text": "of the buffer it just loops reading events from the channel and dispatching them to the event handler that we passed",
    "start": "1192030",
    "end": "1198690"
  },
  {
    "text": "in and so that means that we know two things events now happen in sequence we",
    "start": "1198690",
    "end": "1205470"
  },
  {
    "text": "are either reading from the channel or down in the on add an update or on",
    "start": "1205470",
    "end": "1210570"
  },
  {
    "text": "delete event we know these things do not happen simultaneously so events now",
    "start": "1210570",
    "end": "1216360"
  },
  {
    "text": "occurrence sequence we don't expect don't specifically know the sequence we don't know if the ingress will arrive",
    "start": "1216360",
    "end": "1222150"
  },
  {
    "text": "before the service but we do know that they won't happen at the same time and this makes writing the state machines",
    "start": "1222150",
    "end": "1227730"
  },
  {
    "text": "inside the translator much easier the second one is that we had now some",
    "start": "1227730",
    "end": "1234180"
  },
  {
    "text": "buffering so that watchers consider can go can send their data on the channel",
    "start": "1234180",
    "end": "1239250"
  },
  {
    "text": "and then go back to reading i reading immediately i was i was initially concerned that this would this would be",
    "start": "1239250",
    "end": "1245370"
  },
  {
    "text": "a problem i didn't know what would happen if we blocked the watches for too long i think it's probably not as as bad",
    "start": "1245370",
    "end": "1252540"
  },
  {
    "text": "as i thought it was going to be but effectively we get this for free with this structure and we also get a place to put a nice little warning message to",
    "start": "1252540",
    "end": "1259410"
  },
  {
    "text": "say now your buffers fall okay so at the",
    "start": "1259410",
    "end": "1265530"
  },
  {
    "text": "moment we use depth for dependency management i'm sure the question is going to be what do I think about Vigo",
    "start": "1265530",
    "end": "1270750"
  },
  {
    "text": "and the simple answer is I tried to use Vigo to build a project with client go and it couldn't do it I consider that to",
    "start": "1270750",
    "end": "1277380"
  },
  {
    "text": "be the kind of table stakes of any dependency management tool I'm sure this will change in the future but for the",
    "start": "1277380",
    "end": "1283020"
  },
  {
    "text": "moment depths working for us now client",
    "start": "1283020",
    "end": "1288990"
  },
  {
    "text": "go has been traditionally quite hard to manage with tools like Glide and depth but it has gotten sufficient",
    "start": "1288990",
    "end": "1294840"
  },
  {
    "text": "significantly better in release six and upgrading from six to seven was",
    "start": "1294840",
    "end": "1300090"
  },
  {
    "text": "virtually painless and in fact removed a transit transitive dependencies from our project who went from 46 dependencies",
    "start": "1300090",
    "end": "1307200"
  },
  {
    "text": "down to 42 down to 40 down to 36",
    "start": "1307200",
    "end": "1312320"
  },
  {
    "text": "and so if you want to use client go with a go project using depth these are the",
    "start": "1312320",
    "end": "1317480"
  },
  {
    "text": "three lines that you need this is all you need the next bit is that we don't",
    "start": "1317480",
    "end": "1323810"
  },
  {
    "text": "check in vendor and from a person who's written a go dependency management tool specifically focused on repeatable",
    "start": "1323810",
    "end": "1330800"
  },
  {
    "text": "builds I think I should be quite clear about this um not checking in vendor keeps our repository much much smaller",
    "start": "1330800",
    "end": "1338380"
  },
  {
    "text": "like those nine and a half thousand lines of code is tiny comparison to the",
    "start": "1338380",
    "end": "1343760"
  },
  {
    "text": "half a million lines of code of our dependencies so we don't have to maintain that in our repo we don't have to have huge pull requests the github",
    "start": "1343760",
    "end": "1350600"
  },
  {
    "text": "can't even show you so instead when you're when you go to contribute to",
    "start": "1350600",
    "end": "1356270"
  },
  {
    "text": "contour just check out the project as usual and then you run this one-line DEP ensure vendor only and that just says",
    "start": "1356270",
    "end": "1364160"
  },
  {
    "text": "replay the contents of go package dot lock just check that check out exactly those revisions um and on the whole this",
    "start": "1364160",
    "end": "1373280"
  },
  {
    "text": "has worked out very well for us there have been a few very few downsides if you change your branch you may",
    "start": "1373280",
    "end": "1379490"
  },
  {
    "text": "occasionally need to rerun DEP ensure because the the set of dependencies has",
    "start": "1379490",
    "end": "1386210"
  },
  {
    "text": "changed between a branch but we normally do that kind of update at the start of each development cycle I'll have a card",
    "start": "1386210",
    "end": "1392390"
  },
  {
    "text": "very early on in the cycle to freshen our dependencies upgrade to the latest client do that and so that's done and",
    "start": "1392390",
    "end": "1399650"
  },
  {
    "text": "then we're good for two months and in the unlikely case that you get a compile failure you just run DEP ensure and",
    "start": "1399650",
    "end": "1406220"
  },
  {
    "text": "you're good to go again so it's working out pretty well the second one is of course this doesn't protect us from a",
    "start": "1406220",
    "end": "1412400"
  },
  {
    "text": "dependency going away this is a reasonable concern like some environments you do not want to have to",
    "start": "1412400",
    "end": "1419120"
  },
  {
    "text": "depend on the Internet to build your code where we are as an open source project and especially because we depend",
    "start": "1419120",
    "end": "1425930"
  },
  {
    "text": "on like the kubernetes libraries is so hot like all of our dependencies coming because of client go so if there was",
    "start": "1425930",
    "end": "1432890"
  },
  {
    "text": "going to be a problem with one of those a lot of people are going to work very hard to fix those straightaway so I'm prepared to lean on that guarantee",
    "start": "1432890",
    "end": "1441040"
  },
  {
    "text": "but because we're developing an application that runs inside kubernetes it means we have to build your",
    "start": "1442100",
    "end": "1448220"
  },
  {
    "text": "application as a docker image so want to spend some time about how I approach living with docker and the first",
    "start": "1448220",
    "end": "1456620"
  },
  {
    "text": "suggestion I have for you which was a great this came from one of our contributors is docker ignore when you",
    "start": "1456620",
    "end": "1464840"
  },
  {
    "text": "run docker build it takes everything in your working directory and downwards from that and sends it all to the dock",
    "start": "1464840",
    "end": "1470540"
  },
  {
    "text": "edemen just in case so it's taking the vendor directory which we don't need it's taking the whole get subdirectory",
    "start": "1470540",
    "end": "1476840"
  },
  {
    "text": "which we don't need in our case this was getting up to about 120 megabytes of data for no no good reason so there's",
    "start": "1476840",
    "end": "1485870"
  },
  {
    "text": "one little PR um change the amount of data we sent to the docker demon to",
    "start": "1485870",
    "end": "1491360"
  },
  {
    "text": "under a megabyte I think it actually doesn't go lower than a megabyte I think it's the granularity is too is too low",
    "start": "1491360",
    "end": "1496490"
  },
  {
    "text": "there but all we do is we just ignore the vendor directory and the get directory and so I want to give you a",
    "start": "1496490",
    "end": "1504260"
  },
  {
    "text": "walkthrough about how I approach building go projects with docker so we",
    "start": "1504260",
    "end": "1509540"
  },
  {
    "text": "use the main golang image that comes from the docker hub the next thing we do",
    "start": "1509540",
    "end": "1515990"
  },
  {
    "text": "is that we fetch DEP and we build it inside the image then we copy in our go",
    "start": "1515990",
    "end": "1522320"
  },
  {
    "text": "package lock and tunnel files and then we run DEP ensure of minus V so we actually check out the dependencies we",
    "start": "1522320",
    "end": "1529130"
  },
  {
    "text": "need to build this code inside the container now the thing is that the run",
    "start": "1529130",
    "end": "1534950"
  },
  {
    "text": "step is only going to run if the hash of the previous step has changed so if you",
    "start": "1534950",
    "end": "1540980"
  },
  {
    "text": "have not touch go package dot Tamil and go package dot lock you won't need to take the hit of downloading all those",
    "start": "1540980",
    "end": "1546620"
  },
  {
    "text": "dependencies in this container and even better if you switch between branches as",
    "start": "1546620",
    "end": "1552260"
  },
  {
    "text": "long as you have a previous build that has the hash that matches go package stock and lock so it's not if you change",
    "start": "1552260",
    "end": "1559370"
  },
  {
    "text": "them it's only if you change them to something new do you need to do this download step so that works out pretty",
    "start": "1559370",
    "end": "1564920"
  },
  {
    "text": "well then we do the traditional thing of copying our source in building building",
    "start": "1564920",
    "end": "1572690"
  },
  {
    "text": "our binary and then we use a feature call I believe it's multistage builds where",
    "start": "1572690",
    "end": "1577850"
  },
  {
    "text": "we actually start again with a new Alpine image we stick in the certificates and we copy in the contour",
    "start": "1577850",
    "end": "1584720"
  },
  {
    "text": "binary from the previous step so we don't have this enormous enormous set of",
    "start": "1584720",
    "end": "1590620"
  },
  {
    "text": "of images built that contain all the artifacts from building the code we just",
    "start": "1590620",
    "end": "1595940"
  },
  {
    "text": "have a final final image which is based almost directly on Alpine so I want to",
    "start": "1595940",
    "end": "1602690"
  },
  {
    "text": "show you what our docker build process looks like how does it show me that on my screen so",
    "start": "1602690",
    "end": "1610010"
  },
  {
    "text": "you saw we didn't do any downloading of dependencies that step we're skipped it's a little harder to skip the actual",
    "start": "1610010",
    "end": "1616340"
  },
  {
    "text": "full full build of the code but I mean it's it would be possible but it would be quite fragile but as you see it's",
    "start": "1616340",
    "end": "1623240"
  },
  {
    "text": "only going to take a few seconds unfortunately what does not take a few seconds is pushing to the docker",
    "start": "1623240",
    "end": "1629660"
  },
  {
    "text": "registry from Australia now I'm not",
    "start": "1629660",
    "end": "1636500"
  },
  {
    "text": "going to make you watch the whole thing because I do that all day but it effectively it takes between three and",
    "start": "1636500",
    "end": "1642320"
  },
  {
    "text": "five minutes to do this cycle to push up to the docker hub to bump my local development environment running in gke",
    "start": "1642320",
    "end": "1648560"
  },
  {
    "text": "have it pull down the image so really try to avoid this as much as you can try",
    "start": "1648560",
    "end": "1656180"
  },
  {
    "text": "to avoid making docker build and push part of your edit compile in a loop",
    "start": "1656180",
    "end": "1661420"
  },
  {
    "text": "because even with like my Australian education I can tell you that five minutes to do this cycle means you can",
    "start": "1661420",
    "end": "1667700"
  },
  {
    "text": "do it whose is it twelve times an hour yeah it's you want to avoid that you",
    "start": "1667700",
    "end": "1674210"
  },
  {
    "text": "want to keep your velocity up and so this is what a normal edit compile cycle",
    "start": "1674210",
    "end": "1680180"
  },
  {
    "text": "looks for us we take advantage of go one tens built-in test occasion you can see",
    "start": "1680180",
    "end": "1686870"
  },
  {
    "text": "some of those tests occation because none of the none of the files they depend on changed therefore we don't",
    "start": "1686870",
    "end": "1691910"
  },
  {
    "text": "need to rerun the tests and so we have a cycle on the order of seconds not",
    "start": "1691910",
    "end": "1697010"
  },
  {
    "text": "minutes and you really really want this you want to be able to catch mistakes and iterate in the order of seconds not",
    "start": "1697010",
    "end": "1703640"
  },
  {
    "text": "in minutes and so we have unit tests that pass we know",
    "start": "1703640",
    "end": "1708870"
  },
  {
    "text": "but how do we know that things are actually working you know like that this would be that this would be the step you",
    "start": "1708870",
    "end": "1715080"
  },
  {
    "text": "would actually do the darker push and then do some testing and we have a bunch of ways of avoiding this so what happens",
    "start": "1715080",
    "end": "1723240"
  },
  {
    "text": "is that we can run I can run contour locally on my laptop connected to my gke cluster so it's running as it would but",
    "start": "1723240",
    "end": "1730710"
  },
  {
    "text": "I don't have to go through the whole docker push step and on the right hand",
    "start": "1730710",
    "end": "1736050"
  },
  {
    "text": "side we have a tool called the CLI which pretends to be Envoy it connects the",
    "start": "1736050",
    "end": "1741059"
  },
  {
    "text": "same the same endpoints that Envoy does and receives the same data and because",
    "start": "1741059",
    "end": "1746940"
  },
  {
    "text": "envoy uses protocol buffers which are strongly typed you have a fairly good chance that if it actually can pass if",
    "start": "1746940",
    "end": "1754200"
  },
  {
    "text": "you actually put the right type values in the right parts of the data structure your message is syntactically correct so",
    "start": "1754200",
    "end": "1760590"
  },
  {
    "text": "that eliminates a whole bunch of like kind of experimental try and file type",
    "start": "1760590",
    "end": "1766500"
  },
  {
    "text": "development and we now include the CLI in the docker image because it turns out that it's a really useful tool to debug",
    "start": "1766500",
    "end": "1773580"
  },
  {
    "text": "problems in production you can basically docker exactly sorry OOP cattle exec into that run at the CLI",
    "start": "1773580",
    "end": "1780630"
  },
  {
    "text": "and get a text version of what is being sent to envoy so now you've seen how we",
    "start": "1780630",
    "end": "1786600"
  },
  {
    "text": "optimize for the development in a loop but I want to talk about how we handle functional testing in contour so in my",
    "start": "1786600",
    "end": "1796080"
  },
  {
    "text": "experience functional tests into n tests that sometimes called are terrible",
    "start": "1796080",
    "end": "1802220"
  },
  {
    "text": "they're really slow and because they're really slow that leads to engineering",
    "start": "1802220",
    "end": "1809100"
  },
  {
    "text": "effort spent to make them faster make them paralyzed rather than start and stop processes",
    "start": "1809100",
    "end": "1815880"
  },
  {
    "text": "which are being tested against every time you just kind of like try and reset them or scrub the data in them and that",
    "start": "1815880",
    "end": "1823200"
  },
  {
    "text": "just makes them unreliable that just makes them flaky like how many how many people in this room went when they see a",
    "start": "1823200",
    "end": "1831770"
  },
  {
    "text": "favor from CI a-- like mmm if i just rerun that again it'll probably be okay",
    "start": "1831770",
    "end": "1837620"
  },
  {
    "text": "right so in my opinion not representing my",
    "start": "1837620",
    "end": "1843150"
  },
  {
    "text": "employer in any way end-to-end tests become a boat anchor on your velocity",
    "start": "1843150",
    "end": "1848419"
  },
  {
    "text": "like they are that the value that the value they bring has a lot of has a lot",
    "start": "1848419",
    "end": "1855059"
  },
  {
    "text": "of cost as well I mean I'm not saying you shouldn't do them I'm just saying they're very expensive so I put them off",
    "start": "1855059",
    "end": "1861630"
  },
  {
    "text": "as long as I could being a single person on a single team but there are some scenarios that unit",
    "start": "1861630",
    "end": "1867840"
  },
  {
    "text": "tests cannot cover because there is an impedance mismatch between kubernetes",
    "start": "1867840",
    "end": "1873900"
  },
  {
    "text": "and envoy and what we need to do to functionally test contour is that we",
    "start": "1873900",
    "end": "1880860"
  },
  {
    "text": "need to model not just a single interaction a single translation of like here's an ingress object what did you",
    "start": "1880860",
    "end": "1886230"
  },
  {
    "text": "how did you translate it we need to actually model the sequence of events you saw on the table before that for",
    "start": "1886230",
    "end": "1894059"
  },
  {
    "text": "some outputs to Envoy it actually requires several inputs from kubernetes",
    "start": "1894059",
    "end": "1899340"
  },
  {
    "text": "so it's always a sequence of events so",
    "start": "1899340",
    "end": "1904530"
  },
  {
    "text": "just a refresher this is what contour looks like and I want to explain the",
    "start": "1904530",
    "end": "1910980"
  },
  {
    "text": "philosophy of our functional testing by saying what are we not testing we are",
    "start": "1910980",
    "end": "1917490"
  },
  {
    "text": "not testing kubernetes we assume that it works we are not going to start an API",
    "start": "1917490",
    "end": "1923280"
  },
  {
    "text": "server to test contour and we are not",
    "start": "1923280",
    "end": "1928559"
  },
  {
    "text": "testing on voi we assume somebody else did that already so we're not going to start an envoy to",
    "start": "1928559",
    "end": "1934230"
  },
  {
    "text": "test the output of contour so if we apply those two rules this is what we're",
    "start": "1934230",
    "end": "1941280"
  },
  {
    "text": "actually testing we just need the inputs and we check the outputs and you can do",
    "start": "1941280",
    "end": "1947159"
  },
  {
    "text": "that pretty reasonably with just the standard go testing framework we have a little setup helper it makes a contour",
    "start": "1947159",
    "end": "1954080"
  },
  {
    "text": "it creates a G RPC server listening on a random port because G RPC refuses to not",
    "start": "1954080",
    "end": "1961620"
  },
  {
    "text": "listen on the network we create a client to dial that server we just created so",
    "start": "1961620",
    "end": "1968159"
  },
  {
    "text": "we've created a little a single use client and server and then we hand them back to the caller",
    "start": "1968159",
    "end": "1975480"
  },
  {
    "text": "along with a shutdown function that's going to clean up all of this when the test is done and so this is an example",
    "start": "1975480",
    "end": "1983670"
  },
  {
    "text": "of how we do an interim test case we get the resource handler which is our input",
    "start": "1983670",
    "end": "1989990"
  },
  {
    "text": "the left-hand side we get the G RPC client which is our output we can every",
    "start": "1989990",
    "end": "1995580"
  },
  {
    "text": "time we change the input we can then check the output and then we make a",
    "start": "1995580",
    "end": "2003290"
  },
  {
    "text": "kubernetes service object we just construct it by hand we insert it into the API like we're not we don't need to",
    "start": "2003290",
    "end": "2009470"
  },
  {
    "text": "have the kubernetes api server running because fundamentally all that's going to do is call a watcher to call our",
    "start": "2009470",
    "end": "2016160"
  },
  {
    "text": "resource event handler so we just call it directly and skip the middleman and then we query contour to check the",
    "start": "2016160",
    "end": "2025340"
  },
  {
    "text": "expected results and we just go on and do that we can model it by adding extra",
    "start": "2025340",
    "end": "2031850"
  },
  {
    "text": "services changing them from one to another we can model all the all the cases of data arriving in any sequence",
    "start": "2031850",
    "end": "2038840"
  },
  {
    "text": "pretty pretty easily with this so how's this worked out for us um we'll start",
    "start": "2038840",
    "end": "2045980"
  },
  {
    "text": "with the bad news as you probably figured out it's quite verbose even with",
    "start": "2045980",
    "end": "2051500"
  },
  {
    "text": "lots of helpers and you know this is a sad face but it's explicit when this",
    "start": "2051500",
    "end": "2059659"
  },
  {
    "text": "event happens I expect this output you will not find a sleep or a retry in our",
    "start": "2059660",
    "end": "2065300"
  },
  {
    "text": "test code we're never waiting for we're never kind of dealing with the fact that we put the input into the kubernetes api",
    "start": "2065300",
    "end": "2070730"
  },
  {
    "text": "server and it hasn't quite got back to us yet you will not find a sleep in our into n tests they run in seconds not",
    "start": "2070730",
    "end": "2078050"
  },
  {
    "text": "tens of minutes the highlights we get from this approach a really high success",
    "start": "2078050",
    "end": "2086720"
  },
  {
    "text": "rate of reproducing bugs that are reported in the field we have people come onto slack or raise issues in",
    "start": "2086720",
    "end": "2092389"
  },
  {
    "text": "github I can model what they're telling me like I asked them tell me about the service show me the Amaral document show",
    "start": "2092390",
    "end": "2098990"
  },
  {
    "text": "me what you see in the output of on voice debugging and I can model that as a test",
    "start": "2098990",
    "end": "2105820"
  },
  {
    "text": "um it's really easy it's a really easy pattern for contributors to add tests like literally just follow the follow",
    "start": "2106580",
    "end": "2113490"
  },
  {
    "text": "the pattern and so when they submit features we can have tests along with that to make sure they don't regress in",
    "start": "2113490",
    "end": "2118950"
  },
  {
    "text": "the future and because it's easy to model failing scenarios it enables us to",
    "start": "2118950",
    "end": "2125820"
  },
  {
    "text": "do good old TDD we can start with a failing end-to-end test work down",
    "start": "2125820",
    "end": "2130830"
  },
  {
    "text": "through the different packages right down until we find writing a test every time right down to the point where we",
    "start": "2130830",
    "end": "2136320"
  },
  {
    "text": "find the bug we fix that bug all of those new tests go green put it in a PR",
    "start": "2136320",
    "end": "2141600"
  },
  {
    "text": "job done nothing more to do and it avoids debugging in production involves",
    "start": "2141600",
    "end": "2149130"
  },
  {
    "text": "that docker push and then doing manual testing of I'm trying to recreate the scenario someone told me on slack",
    "start": "2149130",
    "end": "2154500"
  },
  {
    "text": "like.we it avoids entirely both the the",
    "start": "2154500",
    "end": "2159600"
  },
  {
    "text": "overhead the human overhead of doing manual testing and just the time complexity of this docker pushed kind of",
    "start": "2159600",
    "end": "2165510"
  },
  {
    "text": "workflow so thank you very much for listening this is all the time I have um if you'd like to ask me questions I'm",
    "start": "2165510",
    "end": "2172380"
  },
  {
    "text": "pretty sure I've used up all my time but I will be outside of the hippo booth and around all the rest of the week so thank",
    "start": "2172380",
    "end": "2178110"
  },
  {
    "text": "you so much for coming today [Applause]",
    "start": "2178110",
    "end": "2182849"
  }
]