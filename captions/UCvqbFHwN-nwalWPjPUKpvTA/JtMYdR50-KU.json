[
  {
    "text": "hello welcome who knew so many people wanted to learn about stful storage um",
    "start": "400",
    "end": "6319"
  },
  {
    "text": "so my name is Alex Kirkup uh I'm a chief architect at Akamise Cloud um and I'm",
    "start": "6319",
    "end": "12000"
  },
  {
    "text": "also uh a member of the technical oversight committee for the CNCF um this",
    "start": "12000",
    "end": "17520"
  },
  {
    "text": "is my colleague hey y'all my name is Lori i'm the head of community at Perona",
    "start": "17520",
    "end": "23039"
  },
  {
    "text": "and I am also a CNCF ambassador hey I'm Alex Reed i'm a principal engineer at",
    "start": "23039",
    "end": "28720"
  },
  {
    "text": "Akami and last but not least my name is Chris Milstead i'm a product architect at",
    "start": "28720",
    "end": "34160"
  },
  {
    "text": "Akami as well welcome everyone and back to you Alex okay then",
    "start": "34160",
    "end": "40280"
  },
  {
    "text": "so why should we be thinking about um cloud native storage because it's often something that's that's uh ignored in",
    "start": "40280",
    "end": "46960"
  },
  {
    "text": "our in our environments i mean seriously hasn't everything been stateless",
    "start": "46960",
    "end": "53239"
  },
  {
    "text": "forever now this is something which I always put up in in all my talks to kind",
    "start": "53239",
    "end": "58320"
  },
  {
    "text": "of say there is no such thing as a stateless architecture it's just someone else's problem and it's probably all of",
    "start": "58320",
    "end": "64960"
  },
  {
    "text": "your problems or some some of your problems um because all applications end",
    "start": "64960",
    "end": "70799"
  },
  {
    "text": "up storing state somewhere and why would we want therefore our storage to be cloudnative",
    "start": "70799",
    "end": "78799"
  },
  {
    "text": "because of course we've learned so much over the years from our Kubernetes environments where we've made workloads",
    "start": "78799",
    "end": "85880"
  },
  {
    "text": "declarative and self-healing and autoscaling so of course all of the stateful",
    "start": "85880",
    "end": "93200"
  },
  {
    "text": "workloads can also benefit from the automation that you get from a cloud native environment the ability to easily",
    "start": "93200",
    "end": "101280"
  },
  {
    "text": "scale and deploy complex topologies the self-healing and the automatic failover",
    "start": "101280",
    "end": "106720"
  },
  {
    "text": "and of course the performance and what do we mean by all of those things so when we talk about automation",
    "start": "106720",
    "end": "112399"
  },
  {
    "text": "we're talking about the declarative nature of cloud native storage you can have a set of YAML that defines not only",
    "start": "112399",
    "end": "120640"
  },
  {
    "text": "that you want to run uh or or define a a stable workload but it also allows you",
    "start": "120640",
    "end": "126320"
  },
  {
    "text": "to define very complex topologies using operators and we're going to give some demos to show that it also allows you to",
    "start": "126320",
    "end": "134400"
  },
  {
    "text": "easily scale and and apply um scaling as your capacity or your uh RPS",
    "start": "134400",
    "end": "141040"
  },
  {
    "text": "requirements grow over time and it provides an automatic self-healing so when you want to upgrade nodes when you",
    "start": "141040",
    "end": "147920"
  },
  {
    "text": "when a node fails and you need to fail over a workload somewhere else you get that automatic self-healing failover and",
    "start": "147920",
    "end": "154160"
  },
  {
    "text": "when it comes to performance with all the um flexibility that we have with nodes in a in a cloud native workload",
    "start": "154160",
    "end": "161280"
  },
  {
    "text": "like Kubernetes where you have um uh local NVMe for example or distributed",
    "start": "161280",
    "end": "168400"
  },
  {
    "text": "storage solutions that you can utilize you're also talking about now getting native performance like there isn't an",
    "start": "168400",
    "end": "174080"
  },
  {
    "text": "overhead of of deploying in a cloudnative environment and more importantly the ability to get",
    "start": "174080",
    "end": "179599"
  },
  {
    "text": "deterministic performance right so so the ability that the ability for a",
    "start": "179599",
    "end": "184640"
  },
  {
    "text": "particular query to always take the same amount of time every time and when we talk about cloud native",
    "start": "184640",
    "end": "191440"
  },
  {
    "text": "storage it's obviously more than just storage you know we we very familiar with you know the block volumes or the",
    "start": "191440",
    "end": "198080"
  },
  {
    "text": "file systems uh and the shared file systems which are much more common nowadays with uh machine learning",
    "start": "198080",
    "end": "203920"
  },
  {
    "text": "workloads but it's also of course the object stores and the databases and the key value pairs that you're connecting",
    "start": "203920",
    "end": "209280"
  },
  {
    "text": "to and and actually querying uh and today we're going to talk about a demo of a complex database topology and a",
    "start": "209280",
    "end": "216560"
  },
  {
    "text": "very fast scale out uh key value uh demo too but it's the it's it's not just",
    "start": "216560",
    "end": "224480"
  },
  {
    "text": "those products it's all the ecosystem that goes around this so all of the",
    "start": "224480",
    "end": "230959"
  },
  {
    "text": "Kubernetes integrations that make this possible like the CSI drivers for block storage the cozy drivers for object",
    "start": "230959",
    "end": "236560"
  },
  {
    "text": "storage and all of the operators that make this possible and the operators of course also enable all of our day2",
    "start": "236560",
    "end": "243280"
  },
  {
    "text": "operations so things like upgrades and the ability to back up the ability to fail over and perform disaster recovery",
    "start": "243280",
    "end": "249680"
  },
  {
    "text": "and then it's taking advantage of the rest of your cloud native stack because you've already invested in the",
    "start": "249680",
    "end": "255920"
  },
  {
    "text": "observability and the secrets management and certificate management and the encryption um and the scaling and",
    "start": "255920",
    "end": "262120"
  },
  {
    "text": "elasticity right so when you want to be able to move to more cores or when you",
    "start": "262120",
    "end": "267759"
  },
  {
    "text": "want to be able to um upgrade the number of nodes for a distributed system the cloud native environment makes all of",
    "start": "267759",
    "end": "274160"
  },
  {
    "text": "these things so much simpler um putting my uh CNCF storage",
    "start": "274160",
    "end": "280560"
  },
  {
    "text": "tag hat on for a little bit um the tag has put together a storage white paper",
    "start": "280560",
    "end": "286880"
  },
  {
    "text": "which kind of covers some of the landscape of the cloud native storage environment covering things like what",
    "start": "286880",
    "end": "293520"
  },
  {
    "text": "the attributes of a cloud native storage system look like so you know when we're think thinking about high",
    "start": "293520",
    "end": "299960"
  },
  {
    "text": "availability also thinking about what the consistency requirements are for example or what the durability",
    "start": "299960",
    "end": "305759"
  },
  {
    "text": "requirements are and when we're talking about scale what are we talking about is it just you know the number of requests",
    "start": "305759",
    "end": "312800"
  },
  {
    "text": "or the number of IO's or is it the number of throughput etc and different systems provides different um different",
    "start": "312800",
    "end": "320000"
  },
  {
    "text": "benefits so it's really important that you work out what your application needs",
    "start": "320000",
    "end": "325199"
  },
  {
    "text": "and of course in cloud native systems there are multiple layers of virtualization you have object stores",
    "start": "325199",
    "end": "330720"
  },
  {
    "text": "built on file systems or file systems built on object stores or block devices built on all sorts of complicated uh",
    "start": "330720",
    "end": "337039"
  },
  {
    "text": "systems so in the end of the day you do need to understand those layers where the caching in those layers happen and",
    "start": "337039",
    "end": "343680"
  },
  {
    "text": "and that enables you know the performance and the scalability and of course we also talk a",
    "start": "343680",
    "end": "349039"
  },
  {
    "text": "lot about you know the deployment options the topologies the the management interfaces like CSI for",
    "start": "349039",
    "end": "354880"
  },
  {
    "text": "example and those different access interfaces too um now putting my TOC hat on for a",
    "start": "354880",
    "end": "363400"
  },
  {
    "text": "second it's also important to to say that you know we're doing some demos",
    "start": "363400",
    "end": "368479"
  },
  {
    "text": "today for a couple of different products projects but there are lots of CNCF",
    "start": "368479",
    "end": "373520"
  },
  {
    "text": "storage projects um uh both graduated and incubating so things like Rook which",
    "start": "373520",
    "end": "380960"
  },
  {
    "text": "provides an operator for um uh for SE fit test which is a distributed MySQL",
    "start": "380960",
    "end": "386639"
  },
  {
    "text": "cluster Xcd which of course you will run in your Kubernetes environments TIKv",
    "start": "386639",
    "end": "392000"
  },
  {
    "text": "which we're going to be talking about today cube fest which is a uh recently graduated just a couple of months ago um",
    "start": "392000",
    "end": "399039"
  },
  {
    "text": "uh shared file system used for a lot for AI and machine learning and there are some very cool incubating projects too",
    "start": "399039",
    "end": "406680"
  },
  {
    "text": "um but there are 200 and something projects in the CNCF now so uh it's",
    "start": "406680",
    "end": "412639"
  },
  {
    "text": "really good idea to navigate those and have a look at some of the sandbox projects where a lot of the innovation",
    "start": "412639",
    "end": "418319"
  },
  {
    "text": "and experimentation is happening too so now we're going to do a little",
    "start": "418319",
    "end": "425360"
  },
  {
    "text": "sacrifice of the demo guards and I'm going to pass it over to Chris hello everyone uh nice to meet you all um I'm",
    "start": "425360",
    "end": "432000"
  },
  {
    "text": "going to talk about cloud native PG and a demo with that um all of the kind of repo all the kind",
    "start": "432000",
    "end": "439280"
  },
  {
    "text": "of YAML all you need and the Terraform and everything you need to get this up and running is in there we will upload",
    "start": "439280",
    "end": "444720"
  },
  {
    "text": "the slides after the talk because we found spelling mistakes this morning that we fixed so we haven't done that yet um so I'm going to go back about 20",
    "start": "444720",
    "end": "452080"
  },
  {
    "text": "years when I first started on it stateful applications were Oracle clusters i think I remember Oracle 7 was",
    "start": "452080",
    "end": "459360"
  },
  {
    "text": "the first production cluster I broke um and we basically got given I went and had a look today this is Oracle the",
    "start": "459360",
    "end": "465360"
  },
  {
    "text": "latest version of Oracle grid infrastructure it's a 290 page PDF if you want to install it and that includes",
    "start": "465360",
    "end": "471680"
  },
  {
    "text": "every option and every configuration you need to run that database generally that's not how you'd",
    "start": "471680",
    "end": "477520"
  },
  {
    "text": "set things up and I remember after that we had I think Sun had the blue books IBM had the red books so we got people",
    "start": "477520",
    "end": "484639"
  },
  {
    "text": "using these things in production then we worked out actually the hardware is different how they install it different",
    "start": "484639",
    "end": "490160"
  },
  {
    "text": "what the workload's different so we'll now come up with another book to tell you how to use the",
    "start": "490160",
    "end": "496360"
  },
  {
    "text": "application um all this changes in Kubernetes the thing about Kubernetes is",
    "start": "496360",
    "end": "501599"
  },
  {
    "text": "it basically takes an underlying platform and abstracts all that complexity so this is my argument to you",
    "start": "501599",
    "end": "507199"
  },
  {
    "text": "today is running stateful workloads on top of Kubernetes is the best most repeatable and I would argue in some",
    "start": "507199",
    "end": "513599"
  },
  {
    "text": "respects the safest place to do it now when you start looking at things like pod disruption budgets and all the other",
    "start": "513599",
    "end": "518800"
  },
  {
    "text": "in-built mechanisms in Kubernetes to make them safe all this builds on the operator",
    "start": "518800",
    "end": "524399"
  },
  {
    "text": "framework so you know that 290 page document that it took a bunch of engineers to write the red book it took",
    "start": "524399",
    "end": "531200"
  },
  {
    "text": "a bunch of uh field engineers to go and write and distill all that information about as well all of that information",
    "start": "531200",
    "end": "537040"
  },
  {
    "text": "can be captured in these operators these are programmatic uh applications that um uh will basically make your application",
    "start": "537040",
    "end": "543200"
  },
  {
    "text": "work in the way it's designed to so you can distill that 290 page document into",
    "start": "543200",
    "end": "548240"
  },
  {
    "text": "90 lines of YAML um the indentation is completely broken when I pasted these",
    "start": "548240",
    "end": "554640"
  },
  {
    "text": "into this slide so please don't copy them from here go look at the GitHub repository but the you know the important thing here instances three",
    "start": "554640",
    "end": "560880"
  },
  {
    "text": "give me a highly available clustered master and two replicas of my Postgress",
    "start": "560880",
    "end": "566399"
  },
  {
    "text": "install init DB on the lefth hand side initialize my database from scratch",
    "start": "566399",
    "end": "571519"
  },
  {
    "text": "plugins i'm using bar man here to stream my um well logs out to a um an object",
    "start": "571519",
    "end": "577920"
  },
  {
    "text": "store in another location so that I can recover this database and on the right hand side you know instances three and",
    "start": "577920",
    "end": "584800"
  },
  {
    "text": "I'm doing an external cluster restore so these 90 lines of YAML will give you a highly available stateful application",
    "start": "584800",
    "end": "591600"
  },
  {
    "text": "and recover it from a remote object storage much easier than going through all those books um quick picture if you",
    "start": "591600",
    "end": "599120"
  },
  {
    "text": "want to come and talk to me more about this you can find me at the Akami stand akami and Lode are the same thing and",
    "start": "599120",
    "end": "604240"
  },
  {
    "text": "I'm building all of this on top of the Lode Kubernetes engine so if you want to talk about managed Kubernetes come and",
    "start": "604240",
    "end": "609760"
  },
  {
    "text": "have a chat to me there about that as well um and just to prove there's no smoke and mirrors and I can show you this at the stand with the system ID",
    "start": "609760",
    "end": "617040"
  },
  {
    "text": "from the backup and the restore on either side is the same so let's see it in action let's see what happens when we",
    "start": "617040",
    "end": "622079"
  },
  {
    "text": "fire up those 90 lines of YAML and I'm just going to have to change this to high definition because",
    "start": "622079",
    "end": "629200"
  },
  {
    "text": "it the Wi-Fi has gone for a burden so what we're doing here is we're going in in a live demo and we're actually going",
    "start": "629200",
    "end": "635600"
  },
  {
    "text": "into the cloud manager and we're killing one of the nodes where a live database is running now the operator is fantastic",
    "start": "635600",
    "end": "642000"
  },
  {
    "text": "um they've actually made a conscious decision in cloud native Postgress to write their own operator and that's",
    "start": "642000",
    "end": "648320"
  },
  {
    "text": "because your storage could be local and your storage could be remote so we've gone in and killed our node there if we",
    "start": "648320",
    "end": "653839"
  },
  {
    "text": "fast forward a little bit into the into the demo you can see we got some red lines red lines are bad we've lost one",
    "start": "653839",
    "end": "660640"
  },
  {
    "text": "of our instances so as we go through the demo and have a little bit bit f further in",
    "start": "660640",
    "end": "667040"
  },
  {
    "text": "time a little bit up here what we'll start to see is Kubernetes is starting to recover so Kubernetes has gone hey",
    "start": "667040",
    "end": "673279"
  },
  {
    "text": "wait a minute one of my nodes is missing um so Kubernetes goes all right I'll I'll bring your node back and I'll get",
    "start": "673279",
    "end": "679120"
  },
  {
    "text": "my node into the ready state at this point the cloudnative Postgress operator comes along and goes \"How was your data",
    "start": "679120",
    "end": "685279"
  },
  {
    "text": "laid out was it replicated was it using local storage was it using remote",
    "start": "685279",
    "end": "690320"
  },
  {
    "text": "storage do I need to recreate volumes do I need to recopy data into those volumes do I need to just move up a new node and",
    "start": "690320",
    "end": "698079"
  },
  {
    "text": "attach my storage that's on a remote um network attack storage back to the Kubernetes node that's now recovered and",
    "start": "698079",
    "end": "704640"
  },
  {
    "text": "brought is now up and running so as we go through this you'll see nodes are starting to come up pods are starting to",
    "start": "704640",
    "end": "711600"
  },
  {
    "text": "initialize you can see them going to the init state here and it's starting to say actually reinitialize those pods",
    "start": "711600",
    "end": "717360"
  },
  {
    "text": "reattach the storage to those pods and bring that database back up into a running and working state so as we get",
    "start": "717360",
    "end": "724079"
  },
  {
    "text": "to the end of the demo here you'll start to see that the um um the container comes into a uh I think",
    "start": "724079",
    "end": "731040"
  },
  {
    "text": "it comes into next one and here we go standby starting up so on",
    "start": "731040",
    "end": "738160"
  },
  {
    "text": "the bottom there you can see the status has gone to starting up so the LA what we've done is basically killed one of",
    "start": "738160",
    "end": "743279"
  },
  {
    "text": "our stateful applications don't have to worry about how it's laid out don't have to worry about anything the operator's just",
    "start": "743279",
    "end": "748959"
  },
  {
    "text": "taking care of all of that and all the while all of our well logs and all of our backups are being streamed remotely",
    "start": "748959",
    "end": "754800"
  },
  {
    "text": "so as we come out of this the quick demo we've seen there of how we can recover from the nose how do I get out full screen press",
    "start": "754800",
    "end": "763040"
  },
  {
    "text": "escape there we go uh",
    "start": "763040",
    "end": "768399"
  },
  {
    "text": "that's we come out of presentation mode",
    "start": "769880",
    "end": "774560"
  },
  {
    "text": "brilliant um so just to kind of summarize that last bit there you know what was good",
    "start": "775160",
    "end": "781680"
  },
  {
    "text": "about that um and what did we see from everything that was working on that the pod disruption budgets you can go into a",
    "start": "781680",
    "end": "787839"
  },
  {
    "text": "Kubernetes cluster and you can try and kill pods you can try and kill nodes you can try and take things down if your",
    "start": "787839",
    "end": "793200"
  },
  {
    "text": "application is set up with pod disruption budgets you have a safer more stable more resilient persistent",
    "start": "793200",
    "end": "800000"
  },
  {
    "text": "workload than if you're running on just on uh commodity infrastructure and all of these other components added by the",
    "start": "800000",
    "end": "805760"
  },
  {
    "text": "operators give you all all this additional componentry out of the box you don't have to go and read a 290 page",
    "start": "805760",
    "end": "811839"
  },
  {
    "text": "manual to understand what you're talking about so with that I'm gonna hand over to Alex",
    "start": "811839",
    "end": "818800"
  },
  {
    "text": "who's now going to show you uh another demo and another part of um stable applications running Kubernetes over to",
    "start": "818800",
    "end": "824560"
  },
  {
    "text": "you Alex cheers Chris right so we're going to take a look at TIKV so TIKV is a highly scalable low",
    "start": "824560",
    "end": "832959"
  },
  {
    "text": "latency distributed key value store so it provides both a raw key value API and",
    "start": "832959",
    "end": "839279"
  },
  {
    "text": "also an acid compliant transactional API so you can think of your raw key value API is get put delete for a key or batch",
    "start": "839279",
    "end": "845199"
  },
  {
    "text": "of keys and then acid compliant transactions obviously allow you to compose operations together and submit",
    "start": "845199",
    "end": "850959"
  },
  {
    "text": "them to the database as one atomic operation um and you can build on top of that to do more complex databases like",
    "start": "850959",
    "end": "858880"
  },
  {
    "text": "SQL for example so TIKV actually has um um an an SQL component which is built on",
    "start": "858880",
    "end": "865920"
  },
  {
    "text": "top of the the low-level TIKV database um so it's very easy to deploy in",
    "start": "865920",
    "end": "871040"
  },
  {
    "text": "Kubernetes and it's a graduated CNCF project so it's mature it's been used in",
    "start": "871040",
    "end": "876160"
  },
  {
    "text": "production by a bunch of companies so let's just touch on some of",
    "start": "876160",
    "end": "881360"
  },
  {
    "text": "the kind of highlights of TIKV so it's really designed with scale in mind it can scale horizontally to hundreds if",
    "start": "881360",
    "end": "887519"
  },
  {
    "text": "not thousands of terabytes of data billions of keys and hundreds of thousands of RPS in fact millions of RPS",
    "start": "887519",
    "end": "893519"
  },
  {
    "text": "and hopefully that's what we're going to see today so it does that by splitting your key space up into regions um",
    "start": "893519",
    "end": "899920"
  },
  {
    "text": "typically a region is about 100 megabytes but that's tunable and it'll split those regions up among your",
    "start": "899920",
    "end": "905279"
  },
  {
    "text": "storage nodes so as your capacity or RPS requirements grow you can add more nodes to your cluster and TIKV has got a bunch",
    "start": "905279",
    "end": "912399"
  },
  {
    "text": "of intelligence to scale out that data balance it address any hot spots things",
    "start": "912399",
    "end": "917760"
  },
  {
    "text": "like that and obviously all the fault tolerant kind of stuff we come to expect as well from a production key value",
    "start": "917760",
    "end": "924839"
  },
  {
    "text": "store so it's also very low latency it's definitely capable of operating in that",
    "start": "924839",
    "end": "930079"
  },
  {
    "text": "kind of 1 to 10 millisecond latency range that's for reads and writes um and that's largely in part because it's",
    "start": "930079",
    "end": "935279"
  },
  {
    "text": "based on Rox DB which is a lightning fast non-distributed key value store um which has had over 15 years of kind of",
    "start": "935279",
    "end": "942000"
  },
  {
    "text": "engineering and optimization time behind it and of course it's kind of cloud native it's got a fantastic Kubernet",
    "start": "942000",
    "end": "948720"
  },
  {
    "text": "Kubernetes operator to handle your deployment upgrades automated failover and it comes with a bunch of great",
    "start": "948720",
    "end": "955120"
  },
  {
    "text": "observability out the box um so in particular the the kind of preconfigured graphana graphana dashboards are really",
    "start": "955120",
    "end": "962480"
  },
  {
    "text": "useful and we'll we'll dig into that in a sec so installation wise there's not a",
    "start": "962480",
    "end": "967839"
  },
  {
    "text": "whole bunch to say here it's your standard Kubernetes install process there's a bunch of CRDs you can install",
    "start": "967839",
    "end": "974000"
  },
  {
    "text": "then you grab the operator helm's probably the easiest way to do it and then after that you can define your",
    "start": "974000",
    "end": "980160"
  },
  {
    "text": "cluster and apply it so before we go into the demo I'm going to just show you",
    "start": "980160",
    "end": "987279"
  },
  {
    "text": "um an example cluster definition I have here and this is the cluster definition we're going to use in the forthcoming",
    "start": "987279",
    "end": "992639"
  },
  {
    "text": "demo um so we've got five copies of the data we're not cheating here this is a",
    "start": "992639",
    "end": "997920"
  },
  {
    "text": "like production level replication we want to be fault tolerant we want to be able to lose one if not two if not three nodes um we have 12 that second line",
    "start": "997920",
    "end": "1006880"
  },
  {
    "text": "down there 12 replicas that means we have 12 nodes for storage so in this demo I'm going to load up 10 billion G",
    "start": "1006880",
    "end": "1013680"
  },
  {
    "text": "keys into the database well I'm not going to do that as part of the demo i did that beforehand because it takes a while um so we've got 10 billion keys",
    "start": "1013680",
    "end": "1020160"
  },
  {
    "text": "fiveway replication that's 50 billion keys in total about a terabyte and a half of of key value",
    "start": "1020160",
    "end": "1026520"
  },
  {
    "text": "data next line down is really important so you can see here we've set the storage class to SSD storage so what",
    "start": "1026520",
    "end": "1033038"
  },
  {
    "text": "we've done here is we've exposed the local NVMEs on the Kubernetes nodes through to the TIKv pods so again like",
    "start": "1033039",
    "end": "1040400"
  },
  {
    "text": "Chris's demo this is running in LKE Linda Kubernetes Engine um and one of the benefits of LKE is you get access to",
    "start": "1040400",
    "end": "1046959"
  },
  {
    "text": "these fast local NVMEs so if you want to be doing low latency hundreds of thousands of IOPS in your key value",
    "start": "1046959",
    "end": "1052039"
  },
  {
    "text": "store you better have some pretty quick storage and the final line there is just",
    "start": "1052039",
    "end": "1057120"
  },
  {
    "text": "showing that we've used the Kubernetes pod anti-affffinity feature to ensure that we have one Tik KV pod running per",
    "start": "1057120",
    "end": "1064080"
  },
  {
    "text": "Kubernetes node um if you have beefier nodes you might want to consider running multiple pods per node but TIKB in the",
    "start": "1064080",
    "end": "1071360"
  },
  {
    "text": "way we're using it it's quite a hungry application so we want to ensure that that pod gets full access to the",
    "start": "1071360",
    "end": "1078360"
  },
  {
    "text": "node okay start the",
    "start": "1078360",
    "end": "1082720"
  },
  {
    "text": "demo okay so this is my 20 node Kubernetes cluster 13 of the nodes I've",
    "start": "1086600",
    "end": "1092320"
  },
  {
    "text": "reserved for TIKv sorry 13 of the nodes I've reserved for TIKv the other seven",
    "start": "1092320",
    "end": "1097360"
  },
  {
    "text": "are for the benchmark client so the benchmark client here is a tool called go YCSB which is an open source database",
    "start": "1097360",
    "end": "1104640"
  },
  {
    "text": "benchmarking tool and we've just put some scripting around it to kind of run it in Kubernetes and bring up multiple",
    "start": "1104640",
    "end": "1109679"
  },
  {
    "text": "pods um and do things like collect the results afterwards and analyze latencies which we won't get into today um so out",
    "start": "1109679",
    "end": "1117200"
  },
  {
    "text": "of the 13 TIKV nodes 12 of them are actually for storage like I said earlier",
    "start": "1117200",
    "end": "1122640"
  },
  {
    "text": "one of the nodes and one of the pods is reserved for the Kubernetes um the TIKV",
    "start": "1122640",
    "end": "1128080"
  },
  {
    "text": "control plane so what I'm going to do is I've got a bunch of bash scripts that",
    "start": "1128080",
    "end": "1133440"
  },
  {
    "text": "basically bring up my benchmark and that's going to start running in a second and the idea is we're going to try and target 1 million random read",
    "start": "1133440",
    "end": "1141520"
  },
  {
    "text": "IOPS so those seven benchmark nodes we're going to spin up about 15",
    "start": "1141520",
    "end": "1147120"
  },
  {
    "text": "benchmark pods I think across those seven nodes and they're each just going to read a random key out of that 10 billion um 10 billion key key space and",
    "start": "1147120",
    "end": "1155919"
  },
  {
    "text": "the idea is can we hit a million IOPS on a fairly modest cluster so there we go that's the",
    "start": "1155919",
    "end": "1162799"
  },
  {
    "text": "benchmark just coming up now we'll give it a bit of a bit of time to",
    "start": "1162799",
    "end": "1167960"
  },
  {
    "text": "run and we're going to jump over to the Graphana dashboards and see what's going on",
    "start": "1167960",
    "end": "1174679"
  },
  {
    "text": "so like I said TIKV comes with a bunch of super useful uh dashboards um you can",
    "start": "1175039",
    "end": "1182400"
  },
  {
    "text": "get a high level view of your cluster or you can really get into the weeds and look at specific subcomponent components",
    "start": "1182400",
    "end": "1188480"
  },
  {
    "text": "within the stack um this is just one of the dashboards there's probably about a dozen others um but you can see even",
    "start": "1188480",
    "end": "1194559"
  },
  {
    "text": "this one is got a whole wealth of information um and what we're going to do is we're going to jump into one of",
    "start": "1194559",
    "end": "1199600"
  },
  {
    "text": "the more high level panels the cluster dashboard and as you can see you've got along the top row you've got your",
    "start": "1199600",
    "end": "1205760"
  },
  {
    "text": "available capacity how much space you're currently using all those kind of headline stats next row down we've got",
    "start": "1205760",
    "end": "1211679"
  },
  {
    "text": "things like CPU usage in memory and the row below that we've got uh our current",
    "start": "1211679",
    "end": "1216880"
  },
  {
    "text": "cur queries per second rate through um and there's a whole bunch more I can",
    "start": "1216880",
    "end": "1222000"
  },
  {
    "text": "show you in that as well so if we dive into the CPU panel you can see we've got 12 Tik KV nodes um our 12 storage nodes",
    "start": "1222000",
    "end": "1230159"
  },
  {
    "text": "they're all running pretty hot so between 900% and thousand% CPU usage um",
    "start": "1230159",
    "end": "1235679"
  },
  {
    "text": "as you'd expect TIKVS balanced our data pretty evenly which is why all the CPU",
    "start": "1235679",
    "end": "1240720"
  },
  {
    "text": "usage across the nodes is is pretty pretty uniform um just looking at the",
    "start": "1240720",
    "end": "1245760"
  },
  {
    "text": "memory panel here so we're using about 20 gig of memory on each of these TKV pods that's not a memory leak it's",
    "start": "1245760",
    "end": "1252159"
  },
  {
    "text": "nothing to be alarmed about by default TKV will try and use a bunch of memory",
    "start": "1252159",
    "end": "1257360"
  },
  {
    "text": "um as an inmemory cache for your data so depending on your workload that can really accelerate performance probably",
    "start": "1257360",
    "end": "1264159"
  },
  {
    "text": "not so much for this random read test because our working set is much larger than the available RAM in the cluster",
    "start": "1264159",
    "end": "1270640"
  },
  {
    "text": "but it's something to be aware of and of course you can tune all this um so just to prove it's not all smoke and mirrors",
    "start": "1270640",
    "end": "1276640"
  },
  {
    "text": "we're going to go into the gpc panel and take a look at the um queries per second",
    "start": "1276640",
    "end": "1283080"
  },
  {
    "text": "dashboard and it might be a bit small to see there but I promise you I'm not lying we've been pinned at about a million RPS for the past couple of",
    "start": "1283080",
    "end": "1290159"
  },
  {
    "text": "minutes thanks i'm gonna hand it over Loy",
    "start": "1290159",
    "end": "1295559"
  },
  {
    "text": "all right okay so you got the theory and the education from Alex you got the demos from Alex and Chris and now I'm",
    "start": "1301440",
    "end": "1308320"
  },
  {
    "text": "going to give you some real world application of what we just heard about so we are going to talk about Nokia and",
    "start": "1308320",
    "end": "1314000"
  },
  {
    "text": "Civo and just so you know I have speaker notes on my phone i'm not like texting people while I'm up here okay so I work",
    "start": "1314000",
    "end": "1321280"
  },
  {
    "text": "for Perona and Perona is a 100% open source company and being head of community for 100% open source company",
    "start": "1321280",
    "end": "1327600"
  },
  {
    "text": "has got to be like the highlight of my career why because everything that I'm talking about everything that we do everything that we build is open source",
    "start": "1327600",
    "end": "1334559"
  },
  {
    "text": "you can try it today right you don't have to pay us anything but we're here to help you along the way but again 100%",
    "start": "1334559",
    "end": "1340320"
  },
  {
    "text": "open source so to be able to be up here on stage with Achammy and to talk about CNCF and open source projects it's just",
    "start": "1340320",
    "end": "1347559"
  },
  {
    "text": "awesome so let's get into it no no Nokia you guys remember the phones yeah okay",
    "start": "1347559",
    "end": "1353360"
  },
  {
    "text": "so Nokia is one of our customers and uh we are going to help them so they have",
    "start": "1353360",
    "end": "1358679"
  },
  {
    "text": "90,000 internal users right they have 6,000 projects five data centers and 61",
    "start": "1358679",
    "end": "1365600"
  },
  {
    "text": "pabytes of storage so they're not busy at all right like that's why no calls get dropped um so what is their main",
    "start": "1365600",
    "end": "1372880"
  },
  {
    "text": "pain their main pain is operational efficiency right the lack of database self- storage growing number of",
    "start": "1372880",
    "end": "1379480"
  },
  {
    "text": "microservices uh and what are their requirements number one it's 100% open source so they called us number two they",
    "start": "1379480",
    "end": "1385840"
  },
  {
    "text": "needed MySQL and Postgress support which is cool so what is the solution so they",
    "start": "1385840",
    "end": "1391120"
  },
  {
    "text": "decided to run databases on NKSK their version uh they used our MySQL and Postgress operators to build a private",
    "start": "1391120",
    "end": "1397840"
  },
  {
    "text": "DBAS this allowed them to shift databases from virtual environments to Kubernetes to improve resource",
    "start": "1397840",
    "end": "1404000"
  },
  {
    "text": "utilization and reduce infrastructure costs things cost money and they shift responsibility for database management",
    "start": "1404000",
    "end": "1410080"
  },
  {
    "text": "left to the devs team so they were responsible for their own uh their own um path forward and so like just to do a",
    "start": "1410080",
    "end": "1417200"
  },
  {
    "text": "little bit of a call back to what Alex was saying this is a real life user taking advantage of automation scaling",
    "start": "1417200",
    "end": "1423760"
  },
  {
    "text": "and day2 um complexity using Kubernetes and it's Nokia guys big telecom operator",
    "start": "1423760",
    "end": "1431280"
  },
  {
    "text": "Fortune 500 company hey girl what you doing all",
    "start": "1431280",
    "end": "1438240"
  },
  {
    "text": "right sorry civo uh so Civo is a cloudnative service provider providing",
    "start": "1438240",
    "end": "1444559"
  },
  {
    "text": "public private cloud all on Kubernetes and you're like okay well if you're already on Kubernetes why do you need any help well they wanted to launch a",
    "start": "1444559",
    "end": "1451440"
  },
  {
    "text": "MySQL and Postgress DBAS on K8s for their customers so what did they need they needed something that was reliable",
    "start": "1451440",
    "end": "1458240"
  },
  {
    "text": "it was battleproven uh battleproven database operators they didn't want to create their own they wanted something",
    "start": "1458240",
    "end": "1463520"
  },
  {
    "text": "that could they could just use out of the box they needed isolated tenant and multi-tenant environment support again",
    "start": "1463520",
    "end": "1469760"
  },
  {
    "text": "open source and integrated with the Civo cloud control plane so open- source",
    "start": "1469760",
    "end": "1475279"
  },
  {
    "text": "battle tested an operator that's works that they can count on because now they're going to have their customers",
    "start": "1475279",
    "end": "1480400"
  },
  {
    "text": "count on it as well my goodness there we go so what was",
    "start": "1480400",
    "end": "1486400"
  },
  {
    "text": "the solution they used uh our operators for MySQL and Postgress to automate operations in the back end they",
    "start": "1486400",
    "end": "1492960"
  },
  {
    "text": "namespace operator deployments to provide the required separation of tenants which allowed them to create",
    "start": "1492960",
    "end": "1498559"
  },
  {
    "text": "this great service offering for their customers so they could launch a MySQL and pro so their customers could launch",
    "start": "1498559",
    "end": "1504320"
  },
  {
    "text": "MySQL and Postgress DBAs quickly so they could have their own control because it's a DBAS they could keep cloudnative",
    "start": "1504320",
    "end": "1510720"
  },
  {
    "text": "design approach which is end to end and they could continue to to develop um",
    "start": "1510720",
    "end": "1515760"
  },
  {
    "text": "continue the development of projects but that's why they wanted open source right so they can continue to build on what they've already had going so again Alex",
    "start": "1515760",
    "end": "1523600"
  },
  {
    "text": "gave you like the why the guys gave you the how and this is us telling you like",
    "start": "1523600",
    "end": "1530320"
  },
  {
    "text": "it's being done every day so uh hand it back to you so hopefully this was a bit",
    "start": "1530320",
    "end": "1538000"
  },
  {
    "text": "of a whirlwind tour into why cloud native storage is a good idea how you",
    "start": "1538000",
    "end": "1543360"
  },
  {
    "text": "can um deploy it in your environments today and cover both some of the complex",
    "start": "1543360",
    "end": "1549039"
  },
  {
    "text": "topology aspects as well as the performance as well as some real life use cases and I think we have a few",
    "start": "1549039",
    "end": "1554320"
  },
  {
    "text": "minutes left so um if anybody has any questions we're open to taking any questions there's a microphone right",
    "start": "1554320",
    "end": "1560720"
  },
  {
    "text": "here um to help yourself be heard don't be shy",
    "start": "1560720",
    "end": "1569720"
  },
  {
    "text": "is there any god that was a little bit loud is there any push from all of these",
    "start": "1574480",
    "end": "1580799"
  },
  {
    "text": "operators to solve some of the underlying problems that staple sets have being completely immutable",
    "start": "1580799",
    "end": "1588080"
  },
  {
    "text": "um there is so so both both in terms of um helping with stateful sets but also",
    "start": "1588080",
    "end": "1594240"
  },
  {
    "text": "the operators in some cases move to doing deployments instead of statesful sets and having the operators implement",
    "start": "1594240",
    "end": "1601360"
  },
  {
    "text": "some of that logic and and and sort of correlating the workloads to the storage",
    "start": "1601360",
    "end": "1609279"
  },
  {
    "text": "yeah uh thanks for the talks and demos um could you talk a bit more about local storage versus network storage for",
    "start": "1609279",
    "end": "1617120"
  },
  {
    "text": "Kubernetes services yeah so so there isn't there is you know there isn't a",
    "start": "1617120",
    "end": "1622360"
  },
  {
    "text": "one-sizefits-all um I think when we when we talk about um some workloads where",
    "start": "1622360",
    "end": "1627600"
  },
  {
    "text": "you have like an individual workload that needs to move around a lot then block storage um uh you know a",
    "start": "1627600",
    "end": "1633440"
  },
  {
    "text": "distributed block storage capability or a shared block storage capability might be the right option but more and more",
    "start": "1633440",
    "end": "1638960"
  },
  {
    "text": "what we're seeing is we're seeing the the ability to do to utilize fast NVME",
    "start": "1638960",
    "end": "1645440"
  },
  {
    "text": "local storage which which is often not just extremely fast but also much cheaper than than you know attached blog",
    "start": "1645440",
    "end": "1651840"
  },
  {
    "text": "storage um and then using the facilities like what we just saw say with TKV or or",
    "start": "1651840",
    "end": "1657760"
  },
  {
    "text": "Postgress replication to actually handle the availability and the durability side of things can I just say one more thing",
    "start": "1657760",
    "end": "1664720"
  },
  {
    "text": "on that which is um if you're trying to build something ultra fast like that and you don't control the network the jitter",
    "start": "1664720",
    "end": "1672000"
  },
  {
    "text": "and the latency if you try and use network attached storage will probably kill you so um I'd just say I think as",
    "start": "1672000",
    "end": "1679600"
  },
  {
    "text": "we get to more and more data workloads and all the kind of AI stuff we're hearing about I think we're going back",
    "start": "1679600",
    "end": "1685120"
  },
  {
    "text": "to local attached storage in Kubernetes clusters is my prediction we'll see where we get to",
    "start": "1685120",
    "end": "1692399"
  },
  {
    "text": "quick question about scaling how do we manage scaling the storage so it's not",
    "start": "1692399",
    "end": "1697840"
  },
  {
    "text": "entirely true with local storage because the scaling is finite due to the local storage but in case of attached storage",
    "start": "1697840",
    "end": "1705360"
  },
  {
    "text": "and also how do we scale the CPU of the database with a minimum of interruption",
    "start": "1705360",
    "end": "1713120"
  },
  {
    "text": "in both case so that is a how long is a piece of",
    "start": "1713120",
    "end": "1718880"
  },
  {
    "text": "string kind of question because it it it does very much depend on you know the actual database technology or storage",
    "start": "1718880",
    "end": "1725279"
  },
  {
    "text": "technology that's that's in the stack um for for things like say a relational database like like Postgress",
    "start": "1725279",
    "end": "1732159"
  },
  {
    "text": "um you often scale that by having uh by having sort of some level of vertical",
    "start": "1732159",
    "end": "1738000"
  },
  {
    "text": "scaling but then also having replicas that can be used to um facilitate",
    "start": "1738000",
    "end": "1743200"
  },
  {
    "text": "queries or you know data warehousing or that sort of thing in in a in in modern",
    "start": "1743200",
    "end": "1749360"
  },
  {
    "text": "uh systems like TIKV where we have um a very distributed sharded store um",
    "start": "1749360",
    "end": "1756159"
  },
  {
    "text": "effectively you get more or less linear performance on as you add the number of",
    "start": "1756159",
    "end": "1761600"
  },
  {
    "text": "nodes and the number of local discs and the the operator and the control plane",
    "start": "1761600",
    "end": "1767600"
  },
  {
    "text": "um take the sort of um add the cleverness if you wish to make sure that",
    "start": "1767600",
    "end": "1773840"
  },
  {
    "text": "hotspots are identified and moved around and distributed across the cluster so that you can use all of the resources",
    "start": "1773840",
    "end": "1779919"
  },
  {
    "text": "across all of the different nodes i'd almost say as well it's as the",
    "start": "1779919",
    "end": "1785200"
  },
  {
    "text": "database owner or operator it's almost our responsibility to give the",
    "start": "1785200",
    "end": "1790559"
  },
  {
    "text": "infrastructure or the cloud teams the input of what we need but if you want to change the underlying node and move them",
    "start": "1790559",
    "end": "1796000"
  },
  {
    "text": "to bigger smaller nodes or do a redirected restore to bigger nodes you a lot of these operators will just do that",
    "start": "1796000",
    "end": "1801600"
  },
  {
    "text": "all for you nowadays so actually on the application side it's nice and easy but",
    "start": "1801600",
    "end": "1806720"
  },
  {
    "text": "it is still our job to give um accurate kind of inputs to the team of what we need underlying and I I think we're",
    "start": "1806720",
    "end": "1812960"
  },
  {
    "text": "about to run out of completely out of time we are out of time we're We're all going to be around",
    "start": "1812960",
    "end": "1819520"
  }
]