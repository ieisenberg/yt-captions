[
  {
    "text": "hello everyone and Welcome to our talk Mish mes I'll be using the service Mash",
    "start": "280",
    "end": "5359"
  },
  {
    "text": "to compromise kubernetes environments my name is neld and here with me on stage",
    "start": "5359",
    "end": "10519"
  },
  {
    "text": "is Eli bason we are both security researchers from Israel and we work for wiiz the cloud security company now you",
    "start": "10519",
    "end": "17400"
  },
  {
    "text": "might be familiar with some of our previous findings notable Cloud incidents like Kos DB oh my God bing",
    "start": "17400",
    "end": "23840"
  },
  {
    "text": "bang and some AI Services which we're going to talk about later on in this talk",
    "start": "23840",
    "end": "30400"
  },
  {
    "text": "in this talk we're also going to talk about a quick introduction to what is service MH and our attackers might abuse",
    "start": "30400",
    "end": "36800"
  },
  {
    "text": "service MH solutions to map internal networks and how we did just that in",
    "start": "36800",
    "end": "42160"
  },
  {
    "text": "NL we're also going to talk about how attackers might bypass the security rules imposed by service M Solutions and",
    "start": "42160",
    "end": "49840"
  },
  {
    "text": "how we did exactly that to accept sap Ai and we'll finish things off with some",
    "start": "49840",
    "end": "55000"
  },
  {
    "text": "summary and takeaways it's important to note that we're not going to show you",
    "start": "55000",
    "end": "60079"
  },
  {
    "text": "vulnerabilities in service M Solutions rather we're going to show you legitimate features that attackers might",
    "start": "60079",
    "end": "66520"
  },
  {
    "text": "abuse to escalate low severity vulnerabilities to high or even",
    "start": "66520",
    "end": "71920"
  },
  {
    "text": "critical and with that let's begin a service Mash is essentially a",
    "start": "71920",
    "end": "78640"
  },
  {
    "text": "dedicated infrastructure layer that manages the traffic between the different microservices within your",
    "start": "78640",
    "end": "84079"
  },
  {
    "text": "cluster some examples include EO linkerd selum and console there are many more",
    "start": "84079",
    "end": "91600"
  },
  {
    "text": "service M Solutions on the market but these are just like honorable mentions and these Solutions are the",
    "start": "91600",
    "end": "99000"
  },
  {
    "text": "network backbone of many production kubernetes environments and quite frankly a",
    "start": "99000",
    "end": "104600"
  },
  {
    "text": "critical component in many of our engagement so we figure that if we see them so often we need to find a way to",
    "start": "104600",
    "end": "111920"
  },
  {
    "text": "take them to our own Advantage now getting a bit more technical this is like a general",
    "start": "111920",
    "end": "117880"
  },
  {
    "text": "blueprint of how a service mesh might be implemented essentially each part has",
    "start": "117880",
    "end": "123320"
  },
  {
    "text": "some kind of a networking middleware and the entire post trffic is redirected to that Network in middleware",
    "start": "123320",
    "end": "130520"
  },
  {
    "text": "into the mesh once the traffic is in the mesh the user is benefited from like a",
    "start": "130520",
    "end": "136400"
  },
  {
    "text": "few improvements like enhance observability enhan Security in the form",
    "start": "136400",
    "end": "141840"
  },
  {
    "text": "of mutual TLS and other features and quite frankly more in in our experience",
    "start": "141840",
    "end": "148560"
  },
  {
    "text": "this network in Middle is usually implemented using a networking cite",
    "start": "148560",
    "end": "153920"
  },
  {
    "text": "container each part spins up with another cite container that shares the",
    "start": "153920",
    "end": "159280"
  },
  {
    "text": "network name space with all of the other containers running on the Pod and using IP tables the entire pod traffic is",
    "start": "159280",
    "end": "165879"
  },
  {
    "text": "redirected to that container and from there into the mesh so now that we have like a general",
    "start": "165879",
    "end": "173159"
  },
  {
    "text": "understanding of how service meses might be implemented we show you a real life example for a major cloud provider that",
    "start": "173159",
    "end": "179560"
  },
  {
    "text": "show how attackers use to can use like several tricks to abuse Service Solutions and hack world class",
    "start": "179560",
    "end": "186640"
  },
  {
    "text": "production in production environments and we'll begin with",
    "start": "186640",
    "end": "192360"
  },
  {
    "text": "aurl for those of you are not familiar with aurl it's one of the world's leading AI",
    "start": "192360",
    "end": "198440"
  },
  {
    "text": "Services supporting dozens of Fortune 500 companies and it's also one of the",
    "start": "198440",
    "end": "203959"
  },
  {
    "text": "most comprehensive AI platforms as you can see on the left azour has bunch of",
    "start": "203959",
    "end": "210280"
  },
  {
    "text": "features but we are not machine learning experts nor AI researchers we are",
    "start": "210280",
    "end": "215519"
  },
  {
    "text": "security researchers and for us each and every one of these features is just another attack surface it's essentially",
    "start": "215519",
    "end": "222840"
  },
  {
    "text": "a subservice that we can attack and maybe get a glimpse on how is the infrastructure is",
    "start": "222840",
    "end": "228120"
  },
  {
    "text": "implemented and not too long after we started browsing the Azure ml portal we",
    "start": "228120",
    "end": "233560"
  },
  {
    "text": "landed on this page essentially it's like a feature that allows customers to fetch remote data sets",
    "start": "233560",
    "end": "240840"
  },
  {
    "text": "you just Supply an arbitrary URL and in return Azure will send a request from",
    "start": "240840",
    "end": "246400"
  },
  {
    "text": "their servers to the mode server and preview the response now after a few minutes of",
    "start": "246400",
    "end": "253360"
  },
  {
    "text": "playing with this feature we actually realize that this URL is not sanitized nor",
    "start": "253360",
    "end": "259600"
  },
  {
    "text": "validated basically introducing a server side for request fory",
    "start": "259600",
    "end": "264880"
  },
  {
    "text": "vulnerability because this uh server within Azure is probably in some sort of",
    "start": "264880",
    "end": "270800"
  },
  {
    "text": "an Azure ml internal environment and it's accessible to other servers that we are",
    "start": "270800",
    "end": "276199"
  },
  {
    "text": "not so what's next we have the ability to send arbitrary HTTP requests and to",
    "start": "276199",
    "end": "281639"
  },
  {
    "text": "get the response what should we do we first part about communicating with the",
    "start": "281639",
    "end": "286880"
  },
  {
    "text": "imds maybe this way we can get the machine token and laterally move from there but unfortunately this is azure",
    "start": "286880",
    "end": "294520"
  },
  {
    "text": "and the Azure imds server requires a special header and we don't control the request headers",
    "start": "294520",
    "end": "300320"
  },
  {
    "text": "we also figure that we are probably in some sort of a kubernetes environment and we should contact the kubernetes API",
    "start": "300320",
    "end": "307039"
  },
  {
    "text": "so and while we were able to communicate with the kubernetes API we like the required",
    "start": "307039",
    "end": "313120"
  },
  {
    "text": "credentials and at this point we're quite desert we had this amazing ability",
    "start": "313120",
    "end": "318319"
  },
  {
    "text": "to send arbitary requests but couldn't know where to direct them so we thought about just scanning the entire azur",
    "start": "318319",
    "end": "327280"
  },
  {
    "text": "subnet but which subnet we didn't know anything about how is the this",
    "start": "327280",
    "end": "333160"
  },
  {
    "text": "infrastructure is implemented so we decided to scan the only IP address that you are sure to",
    "start": "333160",
    "end": "339400"
  },
  {
    "text": "exist basically the only the IP the IP address that always exists and he",
    "start": "339400",
    "end": "347520"
  },
  {
    "text": "guesses exactly we decided to scan the entire Port range of Locos to see if we",
    "start": "348039",
    "end": "354560"
  },
  {
    "text": "can find any neighbor Technologies other the than the vulnerable srf component so we began",
    "start": "354560",
    "end": "361720"
  },
  {
    "text": "with 1 2 3 all the way up to 65,000 and",
    "start": "361720",
    "end": "367199"
  },
  {
    "text": "after filter filtering out the results we found this open port",
    "start": "367199",
    "end": "374280"
  },
  {
    "text": "4191 I can see some confused faces in the audience we weren't familiar with that Port either it's apparently the",
    "start": "374639",
    "end": "381199"
  },
  {
    "text": "linkerd CER container Port so while we were thinking that we",
    "start": "381199",
    "end": "388639"
  },
  {
    "text": "are communicating with the vulnerable component we're actually communicating with its side car so we weren't familiar",
    "start": "388639",
    "end": "396080"
  },
  {
    "text": "with linkerd we D in delved into this documentation and source code and found",
    "start": "396080",
    "end": "401639"
  },
  {
    "text": "that the 4191 Port is an actually an admin API Port we felt really",
    "start": "401639",
    "end": "409280"
  },
  {
    "text": "optimistic but diving a bit further exp showed us that it's actually a pretty simplistic API exposing only three end",
    "start": "409280",
    "end": "416440"
  },
  {
    "text": "points shutdown and and Metric shutdown is quite",
    "start": "416440",
    "end": "422479"
  },
  {
    "text": "self-explanatory right off the bat we can cause some disruption on the Azure ml platform but we are not this kind of",
    "start": "422479",
    "end": "429199"
  },
  {
    "text": "researchers so we begin to we decided to move forward n Json prints the site",
    "start": "429199",
    "end": "435840"
  },
  {
    "text": "containers envirment variables and Matrix exposes that cite container p",
    "start": "435840",
    "end": "442840"
  },
  {
    "text": "metrix and this is an example of the environment variables as you can see it has like IP addresses p poost names",
    "start": "442840",
    "end": "450319"
  },
  {
    "text": "service account names certificates a bunch of stuff but what was even more",
    "start": "450319",
    "end": "455360"
  },
  {
    "text": "interesting was the metrix endpoint usually metrics endpoint are quite useless but in this case it was",
    "start": "455360",
    "end": "463400"
  },
  {
    "text": "quite like gave like a lot of information including IP address internal IP",
    "start": "463400",
    "end": "469319"
  },
  {
    "text": "addresses host names and ports service account names and bunch of information and it also answered the",
    "start": "469319",
    "end": "476240"
  },
  {
    "text": "question of which subject should we scan so this are like a quick recap of our",
    "start": "476240",
    "end": "483159"
  },
  {
    "text": "findings of the Linker container we can cause a denial of service we can print",
    "start": "483159",
    "end": "488280"
  },
  {
    "text": "environment variables and we can map internal host and ports using the metrix",
    "start": "488280",
    "end": "494759"
  },
  {
    "text": "endpoint and but to this point we only researched a very small portion of linker D Linker D also have a very",
    "start": "494759",
    "end": "502440"
  },
  {
    "text": "robust control plane with a bunch of apis one of them is the destination API",
    "start": "502440",
    "end": "508240"
  },
  {
    "text": "this is essentially the API that the proxy queries before it redirect the request to the",
    "start": "508240",
    "end": "514360"
  },
  {
    "text": "destination so after a few couple of moments of reading the link the source",
    "start": "514360",
    "end": "519760"
  },
  {
    "text": "code getting familiar with it prot of bindings we landed on something like this the ability to manually query the",
    "start": "519760",
    "end": "526800"
  },
  {
    "text": "destination API with every service you that we want and this was done in our own mock",
    "start": "526800",
    "end": "533959"
  },
  {
    "text": "environment that we set it up using the linkerd intro tutorial and quering one",
    "start": "533959",
    "end": "539200"
  },
  {
    "text": "of the Services he did something that looks like this HTTP end points so while",
    "start": "539200",
    "end": "546160"
  },
  {
    "text": "it doesn't seem like a lot after all it's just an HTTP endpoint the amount of time that we as security researchers",
    "start": "546160",
    "end": "553600"
  },
  {
    "text": "were in an engagement found some random HTTP server but couldn't tell how to communicate with it it's like count",
    "start": "553600",
    "end": "560440"
  },
  {
    "text": "countless of times but when we did manage to understand the HTTP PS or the",
    "start": "560440",
    "end": "566200"
  },
  {
    "text": "protocol we can we were able to find like signic findings so why it sounds like security",
    "start": "566200",
    "end": "573200"
  },
  {
    "text": "by obscurity for attackers HTV paths matter matter they're like a gold mine",
    "start": "573200",
    "end": "580839"
  },
  {
    "text": "so and it's another tool in our linkerd tool kit we can cause the theal service",
    "start": "580839",
    "end": "586560"
  },
  {
    "text": "we can extract environment variables map internal post and ports and now also map",
    "start": "586560",
    "end": "592200"
  },
  {
    "text": "HTTP end points but there was also one question",
    "start": "592200",
    "end": "597279"
  },
  {
    "text": "that always bugged our mind and which is how does the linkerd cycle container",
    "start": "597279",
    "end": "603040"
  },
  {
    "text": "magically appears in every pod in a linkerd in AED environment so apparently",
    "start": "603040",
    "end": "608720"
  },
  {
    "text": "linkerd uses something called admission controllers admission controllers are essentially plugins that intercept",
    "start": "608720",
    "end": "614640"
  },
  {
    "text": "request before they reach to the kubernetes API server this means that when you type Cube C create pod before",
    "start": "614640",
    "end": "623000"
  },
  {
    "text": "the request reaches the kubernetes API it goes through a series of admission controllers and those admission control",
    "start": "623000",
    "end": "629320"
  },
  {
    "text": "rollers can either validate reject and modify the resource request and linkerd",
    "start": "629320",
    "end": "635279"
  },
  {
    "text": "does exactly that it has the Linker poxy injector admission controller that",
    "start": "635279",
    "end": "641120"
  },
  {
    "text": "modifies the PO ppec to inject the linkerd site car before into that P",
    "start": "641120",
    "end": "646680"
  },
  {
    "text": "before the kubernetes API creates it but for us as security researchers",
    "start": "646680",
    "end": "652800"
  },
  {
    "text": "this is essentially a privileged HTTP server open without any authentication",
    "start": "652800",
    "end": "658279"
  },
  {
    "text": "so we decided to the game this is how like a valid admission",
    "start": "658279",
    "end": "663480"
  },
  {
    "text": "review to the Linker the admission controller might look like as you can see we can control a bunch of parameters",
    "start": "663480",
    "end": "670639"
  },
  {
    "text": "we can control the kind we can control the name control the Nam space a bunch of different",
    "start": "670639",
    "end": "676760"
  },
  {
    "text": "fields and we started our research with sending a baseline request a valid request the lerd admission controller",
    "start": "676760",
    "end": "683800"
  },
  {
    "text": "and observe the response the response included something that identifies our",
    "start": "683800",
    "end": "689399"
  },
  {
    "text": "Quest as valid and the modified Port spec now that we have a baseline we have",
    "start": "689399",
    "end": "695040"
  },
  {
    "text": "something to work with and we decided to play around with the different parameters the first parameter that we",
    "start": "695040",
    "end": "700519"
  },
  {
    "text": "decided to that immediately looks suspicious to us is the Nam space we",
    "start": "700519",
    "end": "706959"
  },
  {
    "text": "wondered what would happen if we change the namespace to a namespace that simply does not exist for example",
    "start": "706959",
    "end": "715160"
  },
  {
    "text": "Jenkins and the response from the link the admission controller was that",
    "start": "715160",
    "end": "720720"
  },
  {
    "text": "the Nam space Jenkins is not found so what we have here is basically",
    "start": "720720",
    "end": "725959"
  },
  {
    "text": "an oracle we as attacker with a mere ssrf vulnerability vulnerability can",
    "start": "725959",
    "end": "731760"
  },
  {
    "text": "start enumerating Nam spaces and from that deduce the underlying technologies that run on that cluster these",
    "start": "731760",
    "end": "738800"
  },
  {
    "text": "Technologies can include cicd components debugging components and security measures and for",
    "start": "738800",
    "end": "747079"
  },
  {
    "text": "outside attackers this is a very valuable information and this is a like small namespace wish list the kind of",
    "start": "747079",
    "end": "754600"
  },
  {
    "text": "technologies that you want to see in a cluster and with theity can enumerate",
    "start": "754600",
    "end": "761279"
  },
  {
    "text": "them and now we have another tool in our linkerd",
    "start": "761279",
    "end": "767560"
  },
  {
    "text": "toolkit now that we have more than enough Primitives from linkerd we",
    "start": "767560",
    "end": "772680"
  },
  {
    "text": "decided to take one of them to the next level and basically map the entire azure",
    "start": "772680",
    "end": "779680"
  },
  {
    "text": "internal Network basically we decided to scan them",
    "start": "779680",
    "end": "786279"
  },
  {
    "text": "all and this is how you went about it we decided we started with",
    "start": "786440",
    "end": "792639"
  },
  {
    "text": "communicating with the ssrf end points Linker the instance to its Matrix endpoint and Inon we got a bunch of IP",
    "start": "792639",
    "end": "800880"
  },
  {
    "text": "addresses host names and ports we then took each and every one of these IP",
    "start": "800880",
    "end": "805920"
  },
  {
    "text": "addresses and contacted its Matrix endpoint and in return we",
    "start": "805920",
    "end": "811839"
  },
  {
    "text": "got more IP addresses more host names more ports we did that again and again",
    "start": "811839",
    "end": "819000"
  },
  {
    "text": "until eventually we got something like",
    "start": "819000",
    "end": "823519"
  },
  {
    "text": "this a full Network map of the internal Azure ml Network including the most",
    "start": "828240",
    "end": "835199"
  },
  {
    "text": "connected servers which might be the more the most important ones and the most neglected servers which might have",
    "start": "835199",
    "end": "842040"
  },
  {
    "text": "not have the best kind of security in total we scan more than",
    "start": "842040",
    "end": "849160"
  },
  {
    "text": "1,800 IP addresses and found more than 80 unique open ports and gained an",
    "start": "849160",
    "end": "855839"
  },
  {
    "text": "unauthorized and unauthenticated access to promus debugging tools like",
    "start": "855839",
    "end": "862079"
  },
  {
    "text": "goldinger engine in controller Secret store metrics and other internal Azure",
    "start": "862079",
    "end": "867920"
  },
  {
    "text": "stuff so with this level of access in our hands and let me remind you all of",
    "start": "867920",
    "end": "873120"
  },
  {
    "text": "this using only an ssrf on ability we decided to report all of the issues to",
    "start": "873120",
    "end": "878480"
  },
  {
    "text": "Microsoft which concluded with four bugs we found the research and collaborate",
    "start": "878480",
    "end": "885120"
  },
  {
    "text": "together to help them fix the bugs and I also want to take a moment to thank the Microsoft team to being super",
    "start": "885120",
    "end": "892199"
  },
  {
    "text": "professional and super quick and responsible in this case and as always it was a pleasure to work with them",
    "start": "892199",
    "end": "899399"
  },
  {
    "text": "so to sum up linkerd we think linkerd is a very wellb built and a very secure mes",
    "start": "899399",
    "end": "905120"
  },
  {
    "text": "solution and we can also see them striving towards mitigating attacks like this for example the shutdown Endo was",
    "start": "905120",
    "end": "912120"
  },
  {
    "text": "disabled shortly after this this research it was actually reported by another researcher but it was nice nice",
    "start": "912120",
    "end": "918800"
  },
  {
    "text": "to see but even with this like production level kind of",
    "start": "918800",
    "end": "925480"
  },
  {
    "text": "solutions before introducing any solution into a kuber kubernetes environment it's important to understand",
    "start": "925480",
    "end": "932519"
  },
  {
    "text": "its potential attack suffers and reconnaissance opportunities because as of you as you seen in this case an",
    "start": "932519",
    "end": "939519"
  },
  {
    "text": "attacker with a mere SSR ability can escalate to a full-blown Network map and",
    "start": "939519",
    "end": "945040"
  },
  {
    "text": "with that I want to invite my very good friend and colleague Eli to work you through how we hacked sap AI",
    "start": "945040",
    "end": "953920"
  },
  {
    "text": "Thank you new so after we saw how we were able to abuse linkerd in order to",
    "start": "959199",
    "end": "964440"
  },
  {
    "text": "hack asml let's talk about how we were able to abuse ISO bypass the rules that",
    "start": "964440",
    "end": "970240"
  },
  {
    "text": "ISO limited us with and utilize this to hack Sap's AI service let's begin okay",
    "start": "970240",
    "end": "976360"
  },
  {
    "text": "so when I said the name sap I think most of you are probably imagining uh Sap's Flagship product the sap Erp system",
    "start": "976360",
    "end": "983399"
  },
  {
    "text": "you're imagining all these like crazy dashboards with graphs and charts and business data uh but the truth is sap",
    "start": "983399",
    "end": "988560"
  },
  {
    "text": "today is more than that they're a cloud company with a large suite of different cloud services and then AI Service as",
    "start": "988560",
    "end": "994480"
  },
  {
    "text": "well uh which looks actually kind of the same but this service called sap AI Core",
    "start": "994480",
    "end": "1001880"
  },
  {
    "text": "allows us to do lots of different operations relating to Ai and machine learning uh like running AI models",
    "start": "1001880",
    "end": "1008440"
  },
  {
    "text": "running AI running AI applications and even training AI models now the latter",
    "start": "1008440",
    "end": "1013880"
  },
  {
    "text": "one sounded really compelling to us we wanted to know how exactly do you train AI models on sap",
    "start": "1013880",
    "end": "1019480"
  },
  {
    "text": "so the way that it works uh at the end of the day is it's an Argo workflows environment you provide an Argo",
    "start": "1019480",
    "end": "1025240"
  },
  {
    "text": "configuration file like the one you see here as a screenshot you basically press enter and you're good to go uh you just",
    "start": "1025240",
    "end": "1031160"
  },
  {
    "text": "run arbitrary Argo configurations uh if we take a look a closer look at this configuration uh we can see that it's",
    "start": "1031160",
    "end": "1037319"
  },
  {
    "text": "pretty straightforward to understand uh you have you started by declaring that this is an Argo workflow then you define",
    "start": "1037319",
    "end": "1043798"
  },
  {
    "text": "uh the container you want to run like what sort of container image do I want to use what sort of flags they I want to pass to the container etc etc uh and",
    "start": "1043799",
    "end": "1050880"
  },
  {
    "text": "finally you pass the command you want to run inside the container which is very useful for us because that means that",
    "start": "1050880",
    "end": "1056919"
  },
  {
    "text": "running our own arbitrary code on the service is not a bu it's a feature no vulnerability needed",
    "start": "1056919",
    "end": "1062760"
  },
  {
    "text": "so running our own code on uh the question is what's next uh what do we do",
    "start": "1062760",
    "end": "1067880"
  },
  {
    "text": "now so when we Le in a new environment we want to take a little look uh to our right to our left try to understand what",
    "start": "1067880",
    "end": "1074120"
  },
  {
    "text": "sort of environment this is and do we have any access to something that we're not supposed to have access to so so the first question is what's our environment",
    "start": "1074120",
    "end": "1080919"
  },
  {
    "text": "are we running it uh now we're running at a kubernetes cluster duh this is cubec Con it will be very surprising I",
    "start": "1080919",
    "end": "1087559"
  },
  {
    "text": "wasn't talking about the kubernetes environment uh but we are uh and the next question we want to ask ourselves",
    "start": "1087559",
    "end": "1092720"
  },
  {
    "text": "is what sort of privileges are we running in inside this container it's very common uh for cloud providers to",
    "start": "1092720",
    "end": "1098440"
  },
  {
    "text": "give us root privileges within our own container uh which can be very useful for us in order to do any sort of privileg escalation tricks however in",
    "start": "1098440",
    "end": "1105360"
  },
  {
    "text": "this case we did not run as Ruth we ran as a weak user even inside our own container the nobody user which is kind",
    "start": "1105360",
    "end": "1111080"
  },
  {
    "text": "of a bummer because it limited us from doing lots of things inside the container uh but maybe we have an",
    "start": "1111080",
    "end": "1116280"
  },
  {
    "text": "interesting set of kubernetes permission maybe rpod is an interesting entity uh inside the cluster and we can maybe do",
    "start": "1116280",
    "end": "1122240"
  },
  {
    "text": "any sort of lateral movement pass inside the cluster with our kubernets however we did not have any",
    "start": "1122240",
    "end": "1128280"
  },
  {
    "text": "sort of service account no identity no token nothing so we look at this sort of",
    "start": "1128280",
    "end": "1133919"
  },
  {
    "text": "starting picture and we realize that it doesn't look very good uh however it doesn't look very good for us looks very",
    "start": "1133919",
    "end": "1139080"
  },
  {
    "text": "good for a CP uh but uh we have a very interesting Advantage here uper sleeve",
    "start": "1139080",
    "end": "1144559"
  },
  {
    "text": "which we can use we control the full configuration of our pod like start to finish uh so we can try to modify the",
    "start": "1144559",
    "end": "1151120"
  },
  {
    "text": "Pod to twak the environment to feed our needs better first order business run me",
    "start": "1151120",
    "end": "1156159"
  },
  {
    "text": "as root please however that does not work whenever we try to alter the configuration to make ourselves run with",
    "start": "1156159",
    "end": "1162760"
  },
  {
    "text": "u ID zero with the root user ID uh that doesn't work we are getting blocked and our container won't allow stuff to run his root uh which is a bummer but still",
    "start": "1162760",
    "end": "1170120"
  },
  {
    "text": "there are many other interesting flags that we can add to pods and kubernetes like we can try to make our container a",
    "start": "1170120",
    "end": "1175440"
  },
  {
    "text": "privileged container we can mount a new network name space a new PID name space mount a new disc from the host so many",
    "start": "1175440",
    "end": "1181559"
  },
  {
    "text": "other things however none of these things work every sort of interesting flag that we try to attach gets",
    "start": "1181559",
    "end": "1187039"
  },
  {
    "text": "immediately blocked by Sap's admission controller they have like a very tight list of rules and every sort of spicy",
    "start": "1187039",
    "end": "1192960"
  },
  {
    "text": "flag that we try to add to our container the container won't allow itself to run with it uh so seems like our compute is",
    "start": "1192960",
    "end": "1198080"
  },
  {
    "text": "very limited which is very frustrating but this is still kubernetes there's an internal mesh Network ahead of us",
    "start": "1198080",
    "end": "1203960"
  },
  {
    "text": "presumably uh let's try to scan the internal Network like we did before try to find interesting Services inside and",
    "start": "1203960",
    "end": "1209960"
  },
  {
    "text": "communicate with them however that also doesn't work because we're getting blocked by something we're not really",
    "start": "1209960",
    "end": "1216480"
  },
  {
    "text": "sure what exactly at this point but we know that every single request that we try to send gets blocked so I wanted to",
    "start": "1216480",
    "end": "1222640"
  },
  {
    "text": "understand What's blocking us is it an EDR is it a firewall is it a bird is it",
    "start": "1222640",
    "end": "1227760"
  },
  {
    "text": "a plane no it's is still again not very surprisingly",
    "start": "1227760",
    "end": "1233200"
  },
  {
    "text": "considering the title of this talk uh but in this case it's kind of acting like a quote unquote firewall it sap",
    "start": "1233200",
    "end": "1239799"
  },
  {
    "text": "used it to block all the traffic that we tried to send from reaching the internal network uh this bothered us and we",
    "start": "1239799",
    "end": "1245760"
  },
  {
    "text": "wanted to get rid of it uh but in order to do that uh we first have to understand how exactly does it still work how are these limitations actually",
    "start": "1245760",
    "end": "1253280"
  },
  {
    "text": "implemented behind the scenes so this is the sto infrastructure it's kind of similar to the way Linker d works we",
    "start": "1253280",
    "end": "1259720"
  },
  {
    "text": "know we have our own container we can run our own arbitrary code inside it we control it pretty much fully uh and this",
    "start": "1259720",
    "end": "1265159"
  },
  {
    "text": "container runs on a kubernetes pot and in addition to our container there is an sto sidecar container that lives in the",
    "start": "1265159",
    "end": "1271440"
  },
  {
    "text": "same pot as we do now whenever I try to send a request to something within the internal Network that request doesn't",
    "start": "1271440",
    "end": "1277400"
  },
  {
    "text": "actually go through the request gets to ISO to the iso side car that if ISO allows is will send the request on its",
    "start": "1277400",
    "end": "1284600"
  },
  {
    "text": "own to the kubernetes network using its e support receive the response to its ing port and then return that response",
    "start": "1284600",
    "end": "1290880"
  },
  {
    "text": "right back to us now to us this entire process was transparent like we didn't even realize that is was standing in the",
    "start": "1290880",
    "end": "1296320"
  },
  {
    "text": "middle uh if everything works if nothing works then St will just block us and the request won't get through uh now there's",
    "start": "1296320",
    "end": "1302919"
  },
  {
    "text": "another component in this equation uh it's called stod that's like the centralized sto server managing all the",
    "start": "1302919",
    "end": "1308640"
  },
  {
    "text": "different St side cards but at this point I don't really care about this part of the equation I care about this part of the equation why is my traffic",
    "start": "1308640",
    "end": "1315919"
  },
  {
    "text": "getting redirected through ISO and is there a way that I can not do that uh so",
    "start": "1315919",
    "end": "1321120"
  },
  {
    "text": "the way that this works is using a l feature called IP tables is to said all these IP tables",
    "start": "1321120",
    "end": "1327000"
  },
  {
    "text": "rules inside your uh inside your Linux machine uh your container uh and basically tells uh the Linux skel take",
    "start": "1327000",
    "end": "1333240"
  },
  {
    "text": "all the traffic going in and out pass it througho first theno can decide what to do with it however there was one",
    "start": "1333240",
    "end": "1340039"
  },
  {
    "text": "interesting stipulation attached to each one of those rules that kind of boggled my mind when I first saw it it's take",
    "start": "1340039",
    "end": "1345960"
  },
  {
    "text": "all the traffic going in and out except traffic coming from the user ID",
    "start": "1345960",
    "end": "1352840"
  },
  {
    "text": "1337 I was looking at this kind of scratching my head why is the uid leit explicitly",
    "start": "1353200",
    "end": "1360840"
  },
  {
    "text": "excluded from all the traffic rules here uh so I did a little digging and apparently this is not like an sap",
    "start": "1360840",
    "end": "1366320"
  },
  {
    "text": "specific configuration this is the way ISO Works uh 1337 is iso's own user ID",
    "start": "1366320",
    "end": "1371640"
  },
  {
    "text": "and this is the way that they ensure that ISO won't be bound by iso's rules Like This Is How They prevent like an",
    "start": "1371640",
    "end": "1377760"
  },
  {
    "text": "infinite Loop but I was looking at this thinking okay I guess that makes sense but still if I'm reading this correctly",
    "start": "1377760",
    "end": "1384200"
  },
  {
    "text": "it means that anyone with the user ID Le will be completely excluded from any traffic rules enforced by is so I went",
    "start": "1384200",
    "end": "1390720"
  },
  {
    "text": "back to the to the drawing board to the uh Argo configuration and I said okay I",
    "start": "1390720",
    "end": "1396159"
  },
  {
    "text": "know that if I set my UD to zero if I try to be root I will be blocked by uh",
    "start": "1396159",
    "end": "1401200"
  },
  {
    "text": "the admission controller however why don't I try to set my ID to 1337 instead",
    "start": "1401200",
    "end": "1406720"
  },
  {
    "text": "and see what happens so first well this worked sap admission controller didn't",
    "start": "1406720",
    "end": "1412919"
  },
  {
    "text": "care that I set my to 157 which was already a great start uh and now I was",
    "start": "1412919",
    "end": "1418039"
  },
  {
    "text": "running as 1537 and I wanted to test my new privil my new privileges out so this",
    "start": "1418039",
    "end": "1423159"
  },
  {
    "text": "is how it uh turned out at first when I was the nobody user as you can see in the screenshot and I tried to send a",
    "start": "1423159",
    "end": "1428600"
  },
  {
    "text": "request to literally anything uh inside the internal Network I immediately got a bedg to response not from the resource",
    "start": "1428600",
    "end": "1435039"
  },
  {
    "text": "that I was trying to access but from ISO ISO never actually sent my request out all the way through however when I",
    "start": "1435039",
    "end": "1440320"
  },
  {
    "text": "change my uid to 1337 and I execute the exact same request again suddenly I get",
    "start": "1440320",
    "end": "1445520"
  },
  {
    "text": "a 200 okay response my request went through and it seems like I now have unrestricted access to this clusters",
    "start": "1445520",
    "end": "1451640"
  },
  {
    "text": "inal Network Amazing now what so normally I would maybe say let's try to",
    "start": "1451640",
    "end": "1458840"
  },
  {
    "text": "scan the internal Network Let's uh fire up nmap try to scan whatever we can we can find maybe we'll find something",
    "start": "1458840",
    "end": "1464760"
  },
  {
    "text": "interesting to communicate with but this time we didn't actually have to do that we have an amazing cheat code Upper",
    "start": "1464760",
    "end": "1470600"
  },
  {
    "text": "sleeve that we can utilize and we will utilize so this is another configuration uh that",
    "start": "1470600",
    "end": "1477039"
  },
  {
    "text": "Sap's Mission controler fail to block this configuration is called share process namespace and as the name",
    "start": "1477039",
    "end": "1482480"
  },
  {
    "text": "implies it allows you to share the process namespace with everything all the containers running inside your prod",
    "start": "1482480",
    "end": "1488120"
  },
  {
    "text": "in our case that means sharing the namespace with is so this is yet another great configuration that we can add to",
    "start": "1488120",
    "end": "1494480"
  },
  {
    "text": "our configuration file once we were sharing our process name space is you're able to gain access too's file system",
    "start": "1494480",
    "end": "1501480"
  },
  {
    "text": "inside the file system we found this fileo token uh which is a very useful",
    "start": "1501480",
    "end": "1507760"
  },
  {
    "text": "file because I can now take this sto token and communicate with the stod",
    "start": "1507760",
    "end": "1512799"
  },
  {
    "text": "centralized server just think that five minutes ago I couldn't even reach theod server in",
    "start": "1512799",
    "end": "1519760"
  },
  {
    "text": "the internal Network and even if even if I did I couldn't authenticate to it now I can both reach it on the internal",
    "start": "1519760",
    "end": "1525720"
  },
  {
    "text": "Network and I have authenticated access to it and it's many useful apis like",
    "start": "1525720",
    "end": "1530880"
  },
  {
    "text": "this API on Port 1 1514 it's the debug API of stod and it",
    "start": "1530880",
    "end": "1537120"
  },
  {
    "text": "has a lot of end points and I mean a lot of different endpoints containing",
    "start": "1537120",
    "end": "1543120"
  },
  {
    "text": "lots of different useful information uh this endpoint for example / debug caches",
    "start": "1543120",
    "end": "1548840"
  },
  {
    "text": "basically provides you with a list of all of his ste's rules you can very clearly see what the rules mean like this is an outbound Ru outbound rule for",
    "start": "1548840",
    "end": "1556120"
  },
  {
    "text": "traffic on this host and this port so to the administrators this is a list of",
    "start": "1556120",
    "end": "1561279"
  },
  {
    "text": "rules but to me this is a list of thousands of host and ports which exist",
    "start": "1561279",
    "end": "1566320"
  },
  {
    "text": "in the network I don't even have to scan for them I just have a list of all the hosts and ports in the network that I can just go and check so amazing uh",
    "start": "1566320",
    "end": "1574320"
  },
  {
    "text": "quick recap of what we did instead of just uh running n map and basically spamming the internal Network until we",
    "start": "1574320",
    "end": "1579960"
  },
  {
    "text": "maybe find something we just qu queried the STD server using our new found access token we took a look at all st's",
    "start": "1579960",
    "end": "1586679"
  },
  {
    "text": "rules and we basically found a list of thousands of host and ports that we can scan we can check so this is exactly",
    "start": "1586679",
    "end": "1592559"
  },
  {
    "text": "what we did that's what we found we started out uh as attackers with legitimate access to the AI workflows",
    "start": "1592559",
    "end": "1599440"
  },
  {
    "text": "engine the Argo engine this entire activity happened inside a quote unquote DMZ like an enclosed Network that didn't",
    "start": "1599440",
    "end": "1605159"
  },
  {
    "text": "have any access to anything internal once we were able to break out of that jail using our sto bypass we gained",
    "start": "1605159",
    "end": "1610880"
  },
  {
    "text": "access to the Clusters inal network uh while inside there we found an exposed",
    "start": "1610880",
    "end": "1616240"
  },
  {
    "text": "uh instance of graan Loki which gave us access to huge troves of internal customer logs from sap customers we then",
    "start": "1616240",
    "end": "1623600"
  },
  {
    "text": "found a bunch of exposed AWS EFS file shars which gave us access to terabytes",
    "start": "1623600",
    "end": "1628799"
  },
  {
    "text": "of private customers models uh data sets source code and basically all the private files that were stored uh inside",
    "start": "1628799",
    "end": "1635039"
  },
  {
    "text": "that service and finally we found an exposed Helm server a tiller server uh",
    "start": "1635039",
    "end": "1640720"
  },
  {
    "text": "for those who are familiar now this server gave us an insane level of access in this cluster it gave us admin access",
    "start": "1640720",
    "end": "1646880"
  },
  {
    "text": "to Sap's artifactory server admin access to Sap's Docker container Registries and",
    "start": "1646880",
    "end": "1652080"
  },
  {
    "text": "cluster admin privileges on the entire kubernetes cluster of the service giving us access to read write and modify",
    "start": "1652080",
    "end": "1658159"
  },
  {
    "text": "anything going on in sapi and also giving us access to customer credentials and customer",
    "start": "1658159",
    "end": "1664240"
  },
  {
    "text": "data so of course we reported all these issues to sap as soon as we found them",
    "start": "1664240",
    "end": "1671440"
  },
  {
    "text": "and uh we collaborated closely with thep security team uh to help fix these bugs as much as we can we actually went",
    "start": "1671440",
    "end": "1676559"
  },
  {
    "text": "through like several iterations of fix until we were able to really be sure uh that these attacks won't be able to be",
    "start": "1676559",
    "end": "1682120"
  },
  {
    "text": "replicated again uh so shout out to the SCP security team and development team maybe some of you are on here I thought",
    "start": "1682120",
    "end": "1687519"
  },
  {
    "text": "there's a there's a booth going on uh so thank you uh you guys were great to work with and of course all the secrets that",
    "start": "1687519",
    "end": "1692679"
  },
  {
    "text": "we have been able to access have been rotated set so you don't have to worry about that uh if you want to read more",
    "start": "1692679",
    "end": "1697880"
  },
  {
    "text": "about this particular research because this is seriously just a tip of the iceberg of what we did uh you can take a",
    "start": "1697880",
    "end": "1703279"
  },
  {
    "text": "look at our blog that we wrote about this uh there's like a URL either visit this URL or this Q code I we call this",
    "start": "1703279",
    "end": "1710240"
  },
  {
    "text": "saone uh so you're welcome to learn more about that in our blog uh in terms of",
    "start": "1710240",
    "end": "1715559"
  },
  {
    "text": "parallels to Linker d as we said uh the architecture is very similar between the two Services uh and linkerd also works",
    "start": "1715559",
    "end": "1722240"
  },
  {
    "text": "in the exact same sort of architecture you have uh the side car container and you have IP tables rules redirecting",
    "start": "1722240",
    "end": "1728720"
  },
  {
    "text": "everything to there uh and one of those IP tables rules in Linker D is called ignore proxy uid as the name implies it",
    "start": "1728720",
    "end": "1736120"
  },
  {
    "text": "ignores any traffic coming from the proxy ID uh in this case it's 2102 that's like the linkd equivalent toos 1337 and once",
    "start": "1736120",
    "end": "1744120"
  },
  {
    "text": "again if you're able to have that user ID you will be exempt from all the IP tables rules and go directly into the",
    "start": "1744120",
    "end": "1750240"
  },
  {
    "text": "network so these were our two uh like real life case studies uh for today now",
    "start": "1750240",
    "end": "1755519"
  },
  {
    "text": "let some things up with some takeaways on how to uh secure service M environments so first of all to sum up",
    "start": "1755519",
    "end": "1763200"
  },
  {
    "text": "uh observability features like the many observability features we've seen here today are very valuable components in kubernetes environments that's why",
    "start": "1763200",
    "end": "1769440"
  },
  {
    "text": "they're attached to virtually every single kubernetes component in existence however it's very clear to everyone who",
    "start": "1769440",
    "end": "1776000"
  },
  {
    "text": "design these features that they should be accessible from trusted environments only they were all made with trusted environments in mind and once attackers",
    "start": "1776000",
    "end": "1782559"
  },
  {
    "text": "are able to like breach this trust to gain access to these environments then they can basically abuse these",
    "start": "1782559",
    "end": "1787600"
  },
  {
    "text": "legitimate features to do things like reconnaissance like uh like leral Movement Like privil escalation and all",
    "start": "1787600",
    "end": "1794080"
  },
  {
    "text": "the other sort of things we've seen here today uh now this is not a problem that's limited to lqu in only it's",
    "start": "1794080",
    "end": "1799440"
  },
  {
    "text": "actually pretty standard in uh kubernetes components to have these sort of observability features accessible without authentication uh assuming that",
    "start": "1799440",
    "end": "1806559"
  },
  {
    "text": "these environments are trusted uh so when they're not then this can introduce all the risks we've seen here today uh",
    "start": "1806559",
    "end": "1812880"
  },
  {
    "text": "in terms of the takeaways that we want you to like leave with here today uh we would recommend first of all to assess",
    "start": "1812880",
    "end": "1818600"
  },
  {
    "text": "any new kubernetes component that you add your environment with an offensive Outlook meaning in addition to looking",
    "start": "1818600",
    "end": "1824320"
  },
  {
    "text": "at a tool and thinking like what sort of tools does this give me uh to to the cluster uh also think what sort of",
    "start": "1824320",
    "end": "1830640"
  },
  {
    "text": "attack surface does this tool introduce in my environment uh like in the linkerd example we seed today you have the",
    "start": "1830640",
    "end": "1836720"
  },
  {
    "text": "admission controller component uh which in addition to its many legitimate usages can also be abused to numer name",
    "start": "1836720",
    "end": "1842120"
  },
  {
    "text": "spaces uh the destination API component uh enables attackers to map HTP endpoints in uh apis and the cluster uh",
    "start": "1842120",
    "end": "1849200"
  },
  {
    "text": "the sidecar admin API allows attackers to map your network and to disclosed environment variables so these sort of",
    "start": "1849200",
    "end": "1854360"
  },
  {
    "text": "risks should be considered when when building a defense network using this service uh the second takeaway is that",
    "start": "1854360",
    "end": "1860679"
  },
  {
    "text": "you should always properly segment your kubernetes networks uh with specific specifically uh the separate between",
    "start": "1860679",
    "end": "1866559"
  },
  {
    "text": "anything that's considered data plane where all your workloads run and the control plane where all the important",
    "start": "1866559",
    "end": "1872159"
  },
  {
    "text": "management infrastructure lives how the strong emphasis on obviously customer facing environments like what the ones",
    "start": "1872159",
    "end": "1877720"
  },
  {
    "text": "we've seen here today some of which literally allow customers to run their own arbitrary code these sort of environment should always be very",
    "start": "1877720",
    "end": "1883320"
  },
  {
    "text": "strongly separated from everything that can be considered a control plane and we would advise if you have very critical",
    "start": "1883320",
    "end": "1888399"
  },
  {
    "text": "access rules to to also enforce them in the kubernetes level as an additional Safeguard uh to setting them at the",
    "start": "1888399",
    "end": "1894440"
  },
  {
    "text": "service mesh uh and the third and final takeaway that we want you to leave with here uh to leave this stock with is that",
    "start": "1894440",
    "end": "1901080"
  },
  {
    "text": "you should always use multiple security barriers when you're trying to separate between different sorts of environments",
    "start": "1901080",
    "end": "1906200"
  },
  {
    "text": "like these VAR these barriers can come in many different like shapes and forms it can be compute related barriers like",
    "start": "1906200",
    "end": "1912480"
  },
  {
    "text": "containerization like virtualization and even separation of physical server separation if you're really uh paranoid",
    "start": "1912480",
    "end": "1918919"
  },
  {
    "text": "if you really want to separate strongly uh it can be a network related barriers like firewall Solutions like service",
    "start": "1918919",
    "end": "1924360"
  },
  {
    "text": "Smash and different segmentations the network hardware and it could also be uh barriers relating to authentication and",
    "start": "1924360",
    "end": "1929960"
  },
  {
    "text": "authorization like uses uses of Secrets identities tokens passwords uh Mutual",
    "start": "1929960",
    "end": "1935039"
  },
  {
    "text": "TLS and any other form of authenticated between different uh Services uh we",
    "start": "1935039",
    "end": "1941279"
  },
  {
    "text": "think that it's always correct to assume that the first line of defense will eventually be bypassed like in our cases",
    "start": "1941279",
    "end": "1946880"
  },
  {
    "text": "today the first L of defense was a very strong one like linkerd and ISO uh basically uh didn't enable us to do",
    "start": "1946880",
    "end": "1954360"
  },
  {
    "text": "anything interesting but once you were able to bypass that first obstacle it seemed like the rest of the obstacle weren't as strong as the first one so I",
    "start": "1954360",
    "end": "1961559"
  },
  {
    "text": "think we should always assume that the first line of defense will eventually be breached and that to make sure that it",
    "start": "1961559",
    "end": "1967039"
  },
  {
    "text": "would never be the sole security barrier St of within an attacker and sensitive infrastructure if it will be then we'll",
    "start": "1967039",
    "end": "1972880"
  },
  {
    "text": "be able to enable attacks like the one we SE today thank you very much uh if there any questions uh you're welcome to",
    "start": "1972880",
    "end": "1979399"
  },
  {
    "text": "step up to the microphones uh and yeah thank you",
    "start": "1979399",
    "end": "1984760"
  },
  {
    "text": "[Applause]",
    "start": "1986420",
    "end": "1991660"
  }
]