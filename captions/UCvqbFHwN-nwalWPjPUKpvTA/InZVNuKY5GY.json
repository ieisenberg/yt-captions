[
  {
    "text": "welcome to communication is key understanding kubernetes networking my name is jeff poole this is a",
    "start": "160",
    "end": "7759"
  },
  {
    "text": "tutorial so it'll be hands-on you can either watch me as i work or i'll give you the",
    "start": "7759",
    "end": "14240"
  },
  {
    "text": "instructions so that you can try to work along with me kubernetes is",
    "start": "14240",
    "end": "20080"
  },
  {
    "text": "a distributed system so it relies heavily on networking like all distributed systems",
    "start": "20080",
    "end": "26640"
  },
  {
    "text": "but kubernetes is also very plugable you can change all sorts of things about it including the networking plugins you can",
    "start": "26640",
    "end": "33520"
  },
  {
    "text": "change whether it uses ip tables or ebpf there's all sorts of",
    "start": "33520",
    "end": "40399"
  },
  {
    "text": "knobs that you can tune in kubernetes in terms of the networking stack which makes it even more complicated",
    "start": "40399",
    "end": "46719"
  },
  {
    "text": "than a normal distributed system that has fairly fixed networking protocols and",
    "start": "46719",
    "end": "52239"
  },
  {
    "text": "standards so this makes it challenging to understand the goal of this tutorial",
    "start": "52239",
    "end": "59039"
  },
  {
    "text": "is to demonstrate how things are supposed to work",
    "start": "59039",
    "end": "63920"
  },
  {
    "text": "to also gain show you how to gain visibility",
    "start": "64239",
    "end": "69360"
  },
  {
    "text": "into how it is working and learn how to debug networking issues",
    "start": "69360",
    "end": "77600"
  },
  {
    "text": "in kubernetes as a result and application issues that could have a networking aspect to",
    "start": "77600",
    "end": "84840"
  },
  {
    "text": "them so what i plan to cover here i'm going",
    "start": "84840",
    "end": "90880"
  },
  {
    "text": "to do a brief introduction to general networking network name spaces and container networking mostly to make sure that",
    "start": "90880",
    "end": "97360"
  },
  {
    "text": "we're on the same page and that i can use terminology without too much confusion",
    "start": "97360",
    "end": "105119"
  },
  {
    "text": "then i'm going to focus on kubernetes services do a little dive into flannel with vxlan",
    "start": "105119",
    "end": "112000"
  },
  {
    "text": "encapsulation and then take a tour of calico using ip over ip encapsulation",
    "start": "112000",
    "end": "119438"
  },
  {
    "text": "so who's this for who should be attending this so first i think anyone who sets up",
    "start": "120159",
    "end": "125520"
  },
  {
    "text": "clusters and needs to know how they work it'd be hard to be in a position where",
    "start": "125520",
    "end": "130959"
  },
  {
    "text": "you have to bring up a cluster and then not know anything about the networking just have to rely on it",
    "start": "130959",
    "end": "137120"
  },
  {
    "text": "magically working for you especially if you're bringing up on bare metal hosts or in a",
    "start": "137120",
    "end": "143040"
  },
  {
    "text": "a less packaged environment than perhaps one of the cloud providers",
    "start": "143040",
    "end": "149280"
  },
  {
    "text": "you know easy scale up kubernetes services i also think that",
    "start": "149280",
    "end": "154480"
  },
  {
    "text": "developers who want to understand the limitations and advantages of how networking works in kubernetes",
    "start": "154480",
    "end": "161440"
  },
  {
    "text": "i have had various roles over the years and in my roles as a software developer i",
    "start": "161680",
    "end": "168640"
  },
  {
    "text": "found that if i don't understand what's going on in the layers below my code it's often hard to understand problems",
    "start": "168640",
    "end": "176080"
  },
  {
    "text": "that come up in those layers or whether there's a problem with my application code or with the hardware operating system",
    "start": "176080",
    "end": "183360"
  },
  {
    "text": "networking whatever so understanding how things work can help and then you know understanding for example",
    "start": "183360",
    "end": "188879"
  },
  {
    "text": "can you send uh non-ip protocols to other pods things like that",
    "start": "188879",
    "end": "195760"
  },
  {
    "text": "is useful depending on what you're trying to develop but i also think operations and network engineers who",
    "start": "195760",
    "end": "202080"
  },
  {
    "text": "either are in charge of keeping things running and may have to debug them or just that you know need to",
    "start": "202080",
    "end": "209760"
  },
  {
    "text": "be able to understand cluster networking so that they can do their jobs whether it's configuring network equipment that the cluster uses",
    "start": "209760",
    "end": "217280"
  },
  {
    "text": "whether it's configuring networking on the hosts whether it's figuring out when things have gone wrong",
    "start": "217280",
    "end": "223120"
  },
  {
    "text": "and you know it's a classic problem that your software developers",
    "start": "223120",
    "end": "229440"
  },
  {
    "text": "want to say hey my code isn't working i think it's a network so you need to understand how the network is supposed to work so that you",
    "start": "229440",
    "end": "235439"
  },
  {
    "text": "can tell them no it's actually your code i do expect a working knowledge of basic networking",
    "start": "235439",
    "end": "240799"
  },
  {
    "text": "and linux tools here mostly because i can only teach so much without taking up",
    "start": "240799",
    "end": "247360"
  },
  {
    "text": "all the time of introductory material so the environment that i'm planning on",
    "start": "247360",
    "end": "253439"
  },
  {
    "text": "teaching in first if you want to follow along there's a repo here on the slide that",
    "start": "253439",
    "end": "258880"
  },
  {
    "text": "you will want to clone it's github and you can read the url there and then",
    "start": "258880",
    "end": "267199"
  },
  {
    "text": "once you clone that there are two options i've designed it so that you can run all",
    "start": "267199",
    "end": "272800"
  },
  {
    "text": "this with docker and a tool called footloose footloose is a tool from weaveworks that",
    "start": "272800",
    "end": "278639"
  },
  {
    "text": "lets you spin up a bunch of docker images that look like virtual machines and so",
    "start": "278639",
    "end": "285120"
  },
  {
    "text": "this is the lightest weight way to get a kubernetes cluster up and running on your machine one of the problems i",
    "start": "285120",
    "end": "292320"
  },
  {
    "text": "ran into when i was trying out different environments for this is that the amount",
    "start": "292320",
    "end": "297680"
  },
  {
    "text": "of resources it can take to run several virtual machines at the same time it can be intense and i can't make any",
    "start": "297680",
    "end": "305199"
  },
  {
    "text": "assumptions about what kind of hardware people are running with so i can't be like oh well everyone out",
    "start": "305199",
    "end": "310400"
  },
  {
    "text": "there's got 32 gigs of ram so you know no problem if we give four gigs to each vm",
    "start": "310400",
    "end": "315440"
  },
  {
    "text": "that's probably not a viable option so this is the lightweight lightest weight way to do it the biggest",
    "start": "315440",
    "end": "320800"
  },
  {
    "text": "downsides of this other than having to have footloose running is that there are some weird",
    "start": "320800",
    "end": "327600"
  },
  {
    "text": "interactions between the containers and the kernel of the host",
    "start": "327600",
    "end": "333120"
  },
  {
    "text": "for example iptables if the kernel the host doesn't match the version that iptables and the container expects",
    "start": "333120",
    "end": "340560"
  },
  {
    "text": "sometimes you'll see some weird results so that can't happen now if you've got a working vagrant and virtualbox setup",
    "start": "340560",
    "end": "346639"
  },
  {
    "text": "i also have a vagrant file that should work that said it has been tested to the bare",
    "start": "346639",
    "end": "352720"
  },
  {
    "text": "minimum so uh you know if you're comfortable debugging it great if not you can try either of these",
    "start": "352720",
    "end": "360400"
  },
  {
    "text": "options and if all else fails i'll be around to try to help people out during",
    "start": "360400",
    "end": "366160"
  },
  {
    "text": "this this talk but i also think that maybe the answer is you watch me do it and try to figure it",
    "start": "366160",
    "end": "372880"
  },
  {
    "text": "out later um you probably can do all these demonstrations on other kubernetes",
    "start": "372880",
    "end": "377919"
  },
  {
    "text": "clusters but if you want to do the exact same stuff i'm doing in the same environment i'm doing it",
    "start": "377919",
    "end": "383360"
  },
  {
    "text": "then this is this is the best way to go obviously you're probably not going to",
    "start": "383360",
    "end": "388880"
  },
  {
    "text": "get your production kubernetes cluster and swap out the networking layer so there are some things that would be hard to do in",
    "start": "388880",
    "end": "396080"
  },
  {
    "text": "environments that people are depending on but certainly if you wanted to spin up sets of vms in different environments",
    "start": "396080",
    "end": "402160"
  },
  {
    "text": "you could probably replicate these without using my tools at all",
    "start": "402160",
    "end": "407120"
  },
  {
    "text": "i'm using k3s as my kubernetes layer it's a little bit different from vanilla",
    "start": "407360",
    "end": "414160"
  },
  {
    "text": "kubernetes however it's lighter weight and very fast to start up and for a networking perspective it looks very",
    "start": "414160",
    "end": "420400"
  },
  {
    "text": "close there's also a project k3d which is designed to run like k3s except in docker the only",
    "start": "420400",
    "end": "427520"
  },
  {
    "text": "reason i didn't use that is because that leans on docker for the networking and therefore it's",
    "start": "427520",
    "end": "432800"
  },
  {
    "text": "really hard to actually look into networking tools whereas this using k3d in these",
    "start": "432800",
    "end": "440319"
  },
  {
    "text": "footloose virtual machines for lack of a term the containers that",
    "start": "440319",
    "end": "445599"
  },
  {
    "text": "look like virtual machines they actually think that they are basically virtual machines on a real",
    "start": "445599",
    "end": "451440"
  },
  {
    "text": "network so it looks a lot more like what you would expect if you were setting up actual hardware",
    "start": "451440",
    "end": "458240"
  },
  {
    "text": "servers and connecting them with switches so this seemed to be the right trade-off for me in terms of having an environment",
    "start": "458240",
    "end": "464160"
  },
  {
    "text": "that is relatively lightweight and easy to start up but also fairly true to how kubernetes works",
    "start": "464160",
    "end": "473759"
  },
  {
    "text": "okay now i'm going to do a demo of how to get the environment set up and running okay let's talk about your options if",
    "start": "476479",
    "end": "482720"
  },
  {
    "text": "you want to do these labs along with me the first thing you'll do regardless is",
    "start": "482720",
    "end": "488560"
  },
  {
    "text": "you want to clone the repo where i've put all the scripts",
    "start": "488560",
    "end": "493840"
  },
  {
    "text": "super simple now if you have a system where you have",
    "start": "494879",
    "end": "500639"
  },
  {
    "text": "docker installed and footloose then you're you're ready to go now you",
    "start": "500639",
    "end": "507840"
  },
  {
    "text": "can start running these scripts i've got bootscrap bootstrap.sh",
    "start": "507840",
    "end": "513039"
  },
  {
    "text": "scripts in each of these folders to start a footloose cluster if you're in an environment where that won't work or you need",
    "start": "513039",
    "end": "520240"
  },
  {
    "text": "to have a pristine outer environment there's a few cases where this will matter for example if you look at ip",
    "start": "520240",
    "end": "525279"
  },
  {
    "text": "tables in a docker-based virtual machine running footloose",
    "start": "525279",
    "end": "531519"
  },
  {
    "text": "and your kernel doesn't match what's in your host machine you sometimes get some weird results",
    "start": "531519",
    "end": "539519"
  },
  {
    "text": "these are fairly small issues so the lightest weight way to run this is",
    "start": "539519",
    "end": "544560"
  },
  {
    "text": "with footloose but if you need more you can",
    "start": "544560",
    "end": "551360"
  },
  {
    "text": "run vagrant up and there's a vagrant file it's got a plug-in it's expected to use virtualbox it's set",
    "start": "552160",
    "end": "559200"
  },
  {
    "text": "to use three gigs of ram i if any of these things don't work for you it may not",
    "start": "559200",
    "end": "564399"
  },
  {
    "text": "work out like all sorts of weird stuff here in this case i don't have a virtual box",
    "start": "564399",
    "end": "570160"
  },
  {
    "text": "on this this vm but you can run vagrant up vapor and ssh",
    "start": "570160",
    "end": "575760"
  },
  {
    "text": "so after you run vagrant up and then vagrant ssh to get into the machine",
    "start": "575760",
    "end": "581360"
  },
  {
    "text": "assuming everything works you can then become root because footloose is going",
    "start": "581360",
    "end": "589040"
  },
  {
    "text": "to get unhappy with you if you're not root and then cd into the",
    "start": "589040",
    "end": "594399"
  },
  {
    "text": "labs directory now i'm not in my vagrant machine right now so that that folder doesn't exist",
    "start": "594399",
    "end": "599440"
  },
  {
    "text": "but slash labs will have mounted the git repo you started from so you'll have all the same folders that",
    "start": "599440",
    "end": "607519"
  },
  {
    "text": "you would have if you were just sitting in that cloned repo and running this for footloose",
    "start": "607519",
    "end": "614320"
  },
  {
    "text": "either option works like i said footloose directly is going to be the lightest weight version but if for some",
    "start": "614800",
    "end": "621040"
  },
  {
    "text": "reason you need a compatible image on the outside that vagrant box uses debian 10 which is",
    "start": "621040",
    "end": "626800"
  },
  {
    "text": "the same image that's used in the footloose docker based vms fair quotes",
    "start": "626800",
    "end": "633839"
  },
  {
    "text": "and so that will make sure that the host kernel and the guest kernels are compatible and you won't see anything",
    "start": "633839",
    "end": "640160"
  },
  {
    "text": "strange okay now let's cover some basic networking concepts just so i can refer to them",
    "start": "640160",
    "end": "646800"
  },
  {
    "text": "later let's talk about how encapsulation works",
    "start": "646800",
    "end": "651839"
  },
  {
    "text": "in networking in general for the purposes of this discussion i'm going to assume we're talking about ipv4 over ethernet",
    "start": "651839",
    "end": "658800"
  },
  {
    "text": "ipv6 isn't super common yet and ethernet is the de facto standard for just about",
    "start": "658800",
    "end": "664640"
  },
  {
    "text": "everything so let's say we want to send a packet",
    "start": "664640",
    "end": "669920"
  },
  {
    "text": "via arbitrarily say udp could be tcp just as easily but we start with some data",
    "start": "669920",
    "end": "677680"
  },
  {
    "text": "and then we wrap that in a udp packet so there's a udp header and then a payload of data",
    "start": "678000",
    "end": "685600"
  },
  {
    "text": "and then the udp or tcp portion has the source destination ports that's part of",
    "start": "685680",
    "end": "690959"
  },
  {
    "text": "the udp or tcp level which is layer four",
    "start": "690959",
    "end": "696160"
  },
  {
    "text": "we then get that udp packet and we stick an ip header on it that's layer 3 in",
    "start": "696160",
    "end": "701519"
  },
  {
    "text": "the networking stack that has the ip addresses source and destination and this is the",
    "start": "701519",
    "end": "707440"
  },
  {
    "text": "level at which routing happens then we stick a layer 2 ethernet header",
    "start": "707440",
    "end": "715440"
  },
  {
    "text": "on top of that and what this is used is to get your packet to the next hop on your local",
    "start": "715440",
    "end": "721040"
  },
  {
    "text": "network so you either know the final destinations on your local",
    "start": "721040",
    "end": "727360"
  },
  {
    "text": "network and address the ethernet packet to that destination or you know what the next hop should be",
    "start": "727360",
    "end": "734079"
  },
  {
    "text": "and you address your ethernet packet to that hop on your local network",
    "start": "734079",
    "end": "739760"
  },
  {
    "text": "when the packet gets to the next hop if it's destined for that machine",
    "start": "739760",
    "end": "747040"
  },
  {
    "text": "then the ethernet packet ethernet header is removed the ip packet's sticking out and it's handed to the ip stack",
    "start": "747040",
    "end": "754079"
  },
  {
    "text": "on the uh on the machine to to route to whatever process or the kernel",
    "start": "754079",
    "end": "759519"
  },
  {
    "text": "or whatever needs to to get that packet if it's just an intermediate hop",
    "start": "759519",
    "end": "765519"
  },
  {
    "text": "it'll look at the ip packet figure out what the next hop should be to get to that destination",
    "start": "765519",
    "end": "771839"
  },
  {
    "text": "which may or may not be the final destination but it's the next hop that is reachable on the local network",
    "start": "771839",
    "end": "777440"
  },
  {
    "text": "and it will put a new ethernet header on there with its address as a source address",
    "start": "777440",
    "end": "782720"
  },
  {
    "text": "and that next top as the destination address so ethernet packets only last within a",
    "start": "782720",
    "end": "788079"
  },
  {
    "text": "local network and the ip packet may be carried along in several ethernet packets along its way to the final ip",
    "start": "788079",
    "end": "794720"
  },
  {
    "text": "destination okay now let's talk about docker or more",
    "start": "794720",
    "end": "800320"
  },
  {
    "text": "generally container networking so docker allows you to run a process",
    "start": "800320",
    "end": "806959"
  },
  {
    "text": "with various forms of isolation from the host operating system but for our purposes we're really",
    "start": "806959",
    "end": "812639"
  },
  {
    "text": "worried about network isolation the other method other parts of it don't really matter for talk on networking",
    "start": "812639",
    "end": "819120"
  },
  {
    "text": "so docker containers are run in network name spaces this means that they don't have access",
    "start": "819120",
    "end": "824160"
  },
  {
    "text": "to the host network adapters by default and network name spaces allow you to isolate uh networking functionality",
    "start": "824160",
    "end": "830959"
  },
  {
    "text": "the there's a default uh network name space often referred to as the root network namespace and that's where everything is",
    "start": "830959",
    "end": "837440"
  },
  {
    "text": "by default unless you put it in a different network namespace",
    "start": "837440",
    "end": "842720"
  },
  {
    "text": "let's talk about how docker works in in bridge mode we have a node it's got its root network namespace and also it has an ethernet",
    "start": "842720",
    "end": "849600"
  },
  {
    "text": "adapter eth0 when docker comes up it creates a bridge",
    "start": "849600",
    "end": "855040"
  },
  {
    "text": "device generally called docker zero and it allocates a block of ips to containers",
    "start": "855040",
    "end": "860480"
  },
  {
    "text": "the defaults 172.17 16. so that means the last two octets",
    "start": "860480",
    "end": "866560"
  },
  {
    "text": "are available for containers in this bridge device it operates like an ethernet switch running in software",
    "start": "866560",
    "end": "875199"
  },
  {
    "text": "so that bridge gets attached to the host network interface and docker will create a new network",
    "start": "875600",
    "end": "881199"
  },
  {
    "text": "namespace for each container it's trying to create i'm putting two here just to demonstrate",
    "start": "881199",
    "end": "886480"
  },
  {
    "text": "a little bit better now docker will then create a virtual",
    "start": "886480",
    "end": "891680"
  },
  {
    "text": "ethernet pair this is two devices that are effectively connected by a pipe",
    "start": "891680",
    "end": "898639"
  },
  {
    "text": "you put data in one one of these devices it comes out the other very simple so it attaches one of the",
    "start": "898639",
    "end": "905600"
  },
  {
    "text": "devices to the docker zero bridge and the other moves into the container's network namespace",
    "start": "905600",
    "end": "911519"
  },
  {
    "text": "and names it if0 within that namespace it then gets assigned an ip from the",
    "start": "911519",
    "end": "918480"
  },
  {
    "text": "range of ip addresses that that are associated with that bridge",
    "start": "918480",
    "end": "924079"
  },
  {
    "text": "and then this means that the different containers have interfaces within the same subnet",
    "start": "924079",
    "end": "929759"
  },
  {
    "text": "but with different ips so they can talk to each other across that bridge just like two devices on the same subnet",
    "start": "929759",
    "end": "935279"
  },
  {
    "text": "with different ips can talk to each other across an ethernet switch uh traditionally docker doesn't really",
    "start": "935279",
    "end": "942000"
  },
  {
    "text": "expose those container ips anything off the host containers or raw there's there's all sorts of solutions for this",
    "start": "942000",
    "end": "947199"
  },
  {
    "text": "and docker swarm obviously has some solutions you can do port forwarding but it's not really part of the base docker",
    "start": "947199",
    "end": "953040"
  },
  {
    "text": "functionality so getting traffic to and from containers on on other machines is one of the problems that kubernetes",
    "start": "953040",
    "end": "959920"
  },
  {
    "text": "needs to solve to make this useful across a cluster of machines",
    "start": "959920",
    "end": "965600"
  },
  {
    "text": "okay now let's take a look at container networking at the command line okay so let's take a",
    "start": "965600",
    "end": "972160"
  },
  {
    "text": "quick look at how these interfaces work in the real world this is a fresh alpine vm",
    "start": "972160",
    "end": "979759"
  },
  {
    "text": "you can see if i run ip adder there's a loopback and an ethernet interface pretty standard e0",
    "start": "979759",
    "end": "988240"
  },
  {
    "text": "if i go ahead and install docker",
    "start": "990959",
    "end": "997839"
  },
  {
    "text": "and then i start it you'll see we now have a docker zero interface",
    "start": "1000240",
    "end": "1006399"
  },
  {
    "text": "and if i run bridge control show you can see it is in fact a bridge called docker 0.",
    "start": "1007759",
    "end": "1013920"
  },
  {
    "text": "let's try creating a vm",
    "start": "1013920",
    "end": "1025839"
  },
  {
    "text": "okay so let's just run an alpine vm and have it sleep",
    "start": "1032079",
    "end": "1038880"
  },
  {
    "text": "okay if i run an ipad or you can now see there's a new virtual ethernet interface it's",
    "start": "1038880",
    "end": "1045918"
  },
  {
    "text": "interface number five and then ends with at if4 this will be interesting so um another",
    "start": "1045919",
    "end": "1053360"
  },
  {
    "text": "thing we can look at if you look at the bridge we now see that this same",
    "start": "1053360",
    "end": "1059120"
  },
  {
    "text": "virtual ethernet interface is attached to it now what happens if we exec into that",
    "start": "1059120",
    "end": "1068400"
  },
  {
    "text": "container okay i'm inside the container",
    "start": "1071280",
    "end": "1076799"
  },
  {
    "text": "you can see inside here we have an interface it's just e0 but it says at ifive note it's list is",
    "start": "1076799",
    "end": "1083679"
  },
  {
    "text": "interface four this interface five in the root namespace",
    "start": "1083679",
    "end": "1089360"
  },
  {
    "text": "network name space is a virtual ethernet device and it says at if4 these are two halves",
    "start": "1089360",
    "end": "1097360"
  },
  {
    "text": "of the same pair so anything that you send out this interface",
    "start": "1097360",
    "end": "1102799"
  },
  {
    "text": "actually goes through this virtual ethernet interface to our bridge",
    "start": "1102799",
    "end": "1109840"
  },
  {
    "text": "and you can see another example this if i go and create a second alpine container",
    "start": "1110400",
    "end": "1117520"
  },
  {
    "text": "you can see we now have another virtual ethernet interface",
    "start": "1120000",
    "end": "1124799"
  },
  {
    "text": "we now have two interfaces attached to our docker zero bridge",
    "start": "1126400",
    "end": "1136559"
  },
  {
    "text": "if i go into this new container you can see it says it's interface six",
    "start": "1136559",
    "end": "1142640"
  },
  {
    "text": "e01 if7 a7 in the root network namespace is at if6",
    "start": "1142640",
    "end": "1148559"
  },
  {
    "text": "so you can see that these are the two houses pair another thing you can look at if",
    "start": "1148559",
    "end": "1154240"
  },
  {
    "text": "i was to look it inside that other container you can see its ip address is 172.17.0.2",
    "start": "1154240",
    "end": "1161840"
  },
  {
    "text": "in this container i can go ahead and ping that and what happens is it can reach that",
    "start": "1161840",
    "end": "1167440"
  },
  {
    "text": "other host through the bridge they're on the same subnet so they",
    "start": "1167440",
    "end": "1172559"
  },
  {
    "text": "because they're on the same segment there's actually an arp request that goes through if i do a um",
    "start": "1172559",
    "end": "1179360"
  },
  {
    "text": "if i show my ip neighbor table you can see that i see that 172.17.0.2 ip address",
    "start": "1184320",
    "end": "1193360"
  },
  {
    "text": "and i've got a mac address for it that is what we see in fact if i look in the",
    "start": "1193360",
    "end": "1199039"
  },
  {
    "text": "other container that is the mac address it showed there",
    "start": "1199039",
    "end": "1206159"
  },
  {
    "text": "so you can see that just like two devices plugged into a switch on a normal network",
    "start": "1206159",
    "end": "1211360"
  },
  {
    "text": "these two containers can see each other across the bridge",
    "start": "1211360",
    "end": "1215919"
  },
  {
    "text": "okay let's talk about ips so there's really three main groups of",
    "start": "1216640",
    "end": "1222720"
  },
  {
    "text": "ip addresses in kubernetes node addresses pod addresses and service addresses",
    "start": "1222720",
    "end": "1229919"
  },
  {
    "text": "for node addresses it's pretty simple every every node every machine needs an ip address this",
    "start": "1230480",
    "end": "1236559"
  },
  {
    "text": "is used for nodes to talk to each other and the outside world and it exists before kubernetes is set up",
    "start": "1236559",
    "end": "1242400"
  },
  {
    "text": "it's really outside the scope of kubernetes and it's designed by some outside process you know dhcp is an option can be manual",
    "start": "1242400",
    "end": "1249919"
  },
  {
    "text": "a cloud provider might just magically assign it somehow and you just know it has an ip when it boots up doesn't really matter",
    "start": "1249919",
    "end": "1258320"
  },
  {
    "text": "so pod addresses to review how kubernetes works in kubernetes a pod consists of",
    "start": "1258480",
    "end": "1264320"
  },
  {
    "text": "one or more containers sharing the same network name space so they have that same virtual ethernet",
    "start": "1264320",
    "end": "1269600"
  },
  {
    "text": "device as their e0 in the kubernetes network model every pod receives its own ip address",
    "start": "1269600",
    "end": "1275520"
  },
  {
    "text": "and the idea is that all these ip addresses are globally routable within the cluster so any pod can talk to any other pod no",
    "start": "1275520",
    "end": "1280720"
  },
  {
    "text": "matter what machine it's on these addresses are going to be allocated through the ipm functionality",
    "start": "1280720",
    "end": "1286159"
  },
  {
    "text": "ip address management of the cni container network interface plugins you're using",
    "start": "1286159",
    "end": "1291760"
  },
  {
    "text": "the most basic method is assigning a subnet to each node and then allowing that node to just hand",
    "start": "1291760",
    "end": "1297600"
  },
  {
    "text": "out ips from that subnet because it knows which ones are in use on on itself and so it requires very",
    "start": "1297600",
    "end": "1303919"
  },
  {
    "text": "little coordination other than assigning a unique subnet when the node gets set up in the first place",
    "start": "1303919",
    "end": "1309919"
  },
  {
    "text": "sometimes networking plugins will do something fancier like allocate dynamic ips",
    "start": "1309919",
    "end": "1316000"
  },
  {
    "text": "the cube api server process has a cluster sider flag which tells kubernetes what the",
    "start": "1316080",
    "end": "1323200"
  },
  {
    "text": "range of expected pod ips are across the cluster okay now services",
    "start": "1323200",
    "end": "1330080"
  },
  {
    "text": "the kubernetes service is an abstraction over a set of pods it's something that you can talk to and",
    "start": "1330080",
    "end": "1335840"
  },
  {
    "text": "get a pod behind it without having to know how many pods are there if there's even more",
    "start": "1335840",
    "end": "1341200"
  },
  {
    "text": "than one if it's on your host or different host doesn't matter all non-headless services",
    "start": "1341200",
    "end": "1346400"
  },
  {
    "text": "will have a cluster ip assigned to them these cluster ips are handed out from a pool based on",
    "start": "1346400",
    "end": "1353280"
  },
  {
    "text": "this kube api server flag service cluster ip range and the api server takes care of this",
    "start": "1353280",
    "end": "1359440"
  },
  {
    "text": "generally the networking plugins aren't involved in ip address assignment for services at all because these services have to be",
    "start": "1359440",
    "end": "1365600"
  },
  {
    "text": "globally assigned within the cluster anyway a service has one ip and the cluster",
    "start": "1365600",
    "end": "1371679"
  },
  {
    "text": "so um the the api server will tell the kubelet",
    "start": "1371679",
    "end": "1377200"
  },
  {
    "text": "processes what the service ips are and what the endpoints are for them",
    "start": "1377200",
    "end": "1382400"
  },
  {
    "text": "and then the local networking stack on each node gets to be configured to support that service",
    "start": "1382400",
    "end": "1390080"
  },
  {
    "text": "okay let's go take a look at it okay let's talk about getting the footloose cluster",
    "start": "1390240",
    "end": "1395440"
  },
  {
    "text": "up and running and look into how services do",
    "start": "1395440",
    "end": "1401039"
  },
  {
    "text": "routing to pods through ip tables so this is the repo that we checked out",
    "start": "1401039",
    "end": "1407919"
  },
  {
    "text": "if you look in here we've got a calico directory in a final directory we're going to start in flannel",
    "start": "1407919",
    "end": "1413760"
  },
  {
    "text": "and you'd see here we have a bootstrap.bootstrap.sh file",
    "start": "1414000",
    "end": "1419840"
  },
  {
    "text": "you can see here we have a bootstrap.sh file and a footloose.yaml file",
    "start": "1419840",
    "end": "1426000"
  },
  {
    "text": "first let's look at the footloose.yaml so this is the configuration for the",
    "start": "1426000",
    "end": "1431279"
  },
  {
    "text": "footloose cluster now this spins up a bunch of uh docker images",
    "start": "1431279",
    "end": "1436720"
  },
  {
    "text": "as if they were vms so it gives us a very lightweight way of having a cluster of vms",
    "start": "1436720",
    "end": "1444159"
  },
  {
    "text": "just to show a few things here there's a cluster name i'm calling this footloose k8s",
    "start": "1444159",
    "end": "1450960"
  },
  {
    "text": "you tell it how many machines to create this is designed for creating sets of homogenous machines so we're",
    "start": "1450960",
    "end": "1456960"
  },
  {
    "text": "creating three machines we're using this debian temp image with a few extra things i've built into it so",
    "start": "1456960",
    "end": "1463120"
  },
  {
    "text": "you don't have to download them later all the nodes are going to be named node 0 1",
    "start": "1463120",
    "end": "1468640"
  },
  {
    "text": "2. we need privileged for some some functionality of the os it's going",
    "start": "1468640",
    "end": "1475919"
  },
  {
    "text": "to use a docker network called footloose cluster and the rest of this is sort of boilerplate",
    "start": "1475919",
    "end": "1482240"
  },
  {
    "text": "if i look at bootstrap.sh this is the script you can run to bring this up",
    "start": "1482240",
    "end": "1487760"
  },
  {
    "text": "it creates the docker network it will pull the image just to make sure you've got the latest version",
    "start": "1487760",
    "end": "1495039"
  },
  {
    "text": "it runs footloose create which by default will use footloose.yaml to configure it",
    "start": "1495039",
    "end": "1502880"
  },
  {
    "text": "once it's created the cluster i use footloose ssh to shell into node 0",
    "start": "1503039",
    "end": "1510880"
  },
  {
    "text": "and i run the k3s installer so that that could set up as a master we're",
    "start": "1510880",
    "end": "1516720"
  },
  {
    "text": "using k3s because it's a lighter weight distribution of kubernetes and while it's got a few quirks such as",
    "start": "1516720",
    "end": "1522320"
  },
  {
    "text": "it doesn't use scd by default it's a compliant kubernetes distribution",
    "start": "1522320",
    "end": "1527600"
  },
  {
    "text": "and its network behavior is very similar to what you would expect from a normal kubernetes distribution so",
    "start": "1527600",
    "end": "1533279"
  },
  {
    "text": "it's a pretty good tool for this purpose after we set up the master there's a",
    "start": "1533279",
    "end": "1540400"
  },
  {
    "text": "process to get the node token from the server which is what you need to authenticate",
    "start": "1540400",
    "end": "1546000"
  },
  {
    "text": "uh agents or worker nodes against that master and then we install k3 us on the",
    "start": "1546000",
    "end": "1555039"
  },
  {
    "text": "two worker nodes using that token and pointing them to node zero",
    "start": "1555039",
    "end": "1561120"
  },
  {
    "text": "okay so let's go ahead and run the bootstrap script",
    "start": "1564320",
    "end": "1568640"
  },
  {
    "text": "so the first thing that popped out that long string is just the id of the network docker created",
    "start": "1569520",
    "end": "1577279"
  },
  {
    "text": "uh pulls the image fortunately i already have pulled so you don't have to wait very long",
    "start": "1577279",
    "end": "1582960"
  },
  {
    "text": "you can see it's creating the three machines and you see how quickly it does it this",
    "start": "1582960",
    "end": "1588000"
  },
  {
    "text": "is why i'm using footloose it's running the initial installer",
    "start": "1588000",
    "end": "1594960"
  },
  {
    "text": "running on the second node and third node we're already up and running",
    "start": "1595279",
    "end": "1599840"
  },
  {
    "text": "we can now foot loose ssh root at node 0 and we are now on node 0.",
    "start": "1600799",
    "end": "1608080"
  },
  {
    "text": "and just to prove it worked",
    "start": "1608080",
    "end": "1613840"
  },
  {
    "text": "okay so you can see i can run cube cuddle get nodes right now it's the master node's fully",
    "start": "1615200",
    "end": "1621360"
  },
  {
    "text": "up node one is not ready all the way okay node one's ready node two is not ready",
    "start": "1621360",
    "end": "1627760"
  },
  {
    "text": "okay so we now have three nodes",
    "start": "1627760",
    "end": "1634158"
  },
  {
    "text": "you can see they've got ip addresses 172.19.0",
    "start": "1635120",
    "end": "1640240"
  },
  {
    "text": "and then two three and four and just to prove that things are running",
    "start": "1640240",
    "end": "1647519"
  },
  {
    "text": "you can see that we've got a bunch of stuff running in coop system that it started by default",
    "start": "1650320",
    "end": "1655919"
  },
  {
    "text": "so now",
    "start": "1655919",
    "end": "1658398"
  },
  {
    "text": "let's apply this hello kubernetes yml file i've got what this does it creates a service and three web servers behind it",
    "start": "1662000",
    "end": "1670960"
  },
  {
    "text": "and it creates a default name space so i can just get po and you can see those are getting created",
    "start": "1672159",
    "end": "1678720"
  },
  {
    "text": "service you can see here's the hello kubernetes service it's got a cluster ip",
    "start": "1680720",
    "end": "1685760"
  },
  {
    "text": "that's its ip and it takes requests on port 80. so standard",
    "start": "1685760",
    "end": "1692159"
  },
  {
    "text": "http okay our pods are running now another thing we can do is",
    "start": "1692159",
    "end": "1697679"
  },
  {
    "text": "instead of get service we can get endpoints",
    "start": "1697679",
    "end": "1702320"
  },
  {
    "text": "and you can see that we have these three endpoints behind that surface",
    "start": "1707760",
    "end": "1712880"
  },
  {
    "text": "if i get the service ip",
    "start": "1713919",
    "end": "1717120"
  },
  {
    "text": "and i curl it you see we get a page back now the part that's interesting here is",
    "start": "1719760",
    "end": "1727039"
  },
  {
    "text": "it gives you its pod id it's the main reason i use this image",
    "start": "1727039",
    "end": "1739840"
  },
  {
    "text": "so you can see if i keep running it i can see three",
    "start": "1739840",
    "end": "1746880"
  },
  {
    "text": "different pod ids i end up getting so i know that by hitting that service ip i'm getting to all three pods on the",
    "start": "1746880",
    "end": "1753039"
  },
  {
    "text": "back end so the next question is how does that",
    "start": "1753039",
    "end": "1758240"
  },
  {
    "text": "happen and the the standard way of doing that kubernetes is through ip tables there's a few other solutions out there",
    "start": "1758240",
    "end": "1764840"
  },
  {
    "text": "but most kubernetes installations right now we'll be using ip tables",
    "start": "1764840",
    "end": "1771200"
  },
  {
    "text": "so let's take a look at the nat table and in particular let's look at",
    "start": "1771679",
    "end": "1779360"
  },
  {
    "text": "cube service okay so we've got a chain called kube",
    "start": "1779360",
    "end": "1786399"
  },
  {
    "text": "services and you'll see if we look down here",
    "start": "1786399",
    "end": "1794880"
  },
  {
    "text": "we have some relating to hello kubernetes now this kube mark mask one",
    "start": "1794880",
    "end": "1804159"
  },
  {
    "text": "we'll talk about in a little bit but just recognize that this only gets hit if the source is not",
    "start": "1804159",
    "end": "1811520"
  },
  {
    "text": "in the pod network so if you if we scroll up and look at these",
    "start": "1811520",
    "end": "1817360"
  },
  {
    "text": "pods they were 10.42 dot whatever",
    "start": "1817360",
    "end": "1823200"
  },
  {
    "text": "so this is saying if it's not in the 10.42 network which means it's",
    "start": "1823200",
    "end": "1829200"
  },
  {
    "text": "not coming from the pod network we're going to hit this path because if",
    "start": "1829200",
    "end": "1834799"
  },
  {
    "text": "the destination is our service ip we're going to want to tag this to do",
    "start": "1834799",
    "end": "1840480"
  },
  {
    "text": "some masquerading later if it is a pod we don't need to do the masquerading",
    "start": "1840480",
    "end": "1847279"
  },
  {
    "text": "this next one says anything going to the service ip goes to this chain well let's take a look at that chain",
    "start": "1847279",
    "end": "1856480"
  },
  {
    "text": "so this chain has three uh three rules in it and you may note we had three pods the",
    "start": "1857519",
    "end": "1864399"
  },
  {
    "text": "first one gets hit with a random probability of one third",
    "start": "1864399",
    "end": "1869679"
  },
  {
    "text": "so there's a one and three chance you'll go to the first one if you don't go to the first one you",
    "start": "1869679",
    "end": "1875440"
  },
  {
    "text": "only have two pods left so there's only a 50 percent chance to hear the second and then if you fall",
    "start": "1875440",
    "end": "1881840"
  },
  {
    "text": "through both of those you always go to the third one so let's take a look at these",
    "start": "1881840",
    "end": "1892000"
  },
  {
    "text": "so the first one here it's also got a mark masquerade roll this one is the",
    "start": "1892000",
    "end": "1897600"
  },
  {
    "text": "pods ip that we're the destination so what this next rule does it's a it's",
    "start": "1897600",
    "end": "1904640"
  },
  {
    "text": "a dnat so destination net it says hey if we made it here we're going to change",
    "start": "1904640",
    "end": "1911120"
  },
  {
    "text": "the destination from the service ip port 80 to the this pods ip port 8080.",
    "start": "1911120",
    "end": "1920159"
  },
  {
    "text": "the reason we have this masquerade that matches at the source address is the same as that pod's ip",
    "start": "1920159",
    "end": "1925679"
  },
  {
    "text": "is that if a pod tries to talk to some service ip",
    "start": "1925679",
    "end": "1931760"
  },
  {
    "text": "the destination gets changed back to itself and it gets that packet when it tries to respond it's going to",
    "start": "1931760",
    "end": "1936880"
  },
  {
    "text": "go i know exactly how to get there and try to send it locally it needs to go back through the nat",
    "start": "1936880",
    "end": "1943279"
  },
  {
    "text": "process or else when the return packet comes back with an address that's not expected",
    "start": "1943279",
    "end": "1948799"
  },
  {
    "text": "things are gonna get really confusing so this makes sure that it gets routed",
    "start": "1948799",
    "end": "1954640"
  },
  {
    "text": "back through the host networking stack",
    "start": "1954640",
    "end": "1958880"
  },
  {
    "text": "okay so as you can probably imagine if i look at another one of these i will",
    "start": "1960240",
    "end": "1965600"
  },
  {
    "text": "just see a different pod ip so this one's 1.4",
    "start": "1965600",
    "end": "1971760"
  },
  {
    "text": "and if i grab the pods again",
    "start": "1971760",
    "end": "1978960"
  },
  {
    "text": "you can see that 10.42.1.4 is the one running on node 1 10.42.0.7",
    "start": "1981440",
    "end": "1990000"
  },
  {
    "text": "the one running on node 0. if i pulled up the last one it would have 10.42.2.3",
    "start": "1990000",
    "end": "1997039"
  },
  {
    "text": "so this is how it gets for a destination service ip",
    "start": "1997039",
    "end": "2003360"
  },
  {
    "text": "the networking stack randomly picks one of the back ends one other thing just to show the",
    "start": "2003360",
    "end": "2012000"
  },
  {
    "text": "details of what happens with the the marking and masquerading",
    "start": "2012000",
    "end": "2020158"
  },
  {
    "text": "and i guess i should also pull",
    "start": "2025039",
    "end": "2028320"
  },
  {
    "text": "like up so if any of those cube mark mask rules get hit",
    "start": "2031679",
    "end": "2039120"
  },
  {
    "text": "it will add hex 4000 to the mark and then when you get to the",
    "start": "2039120",
    "end": "2045360"
  },
  {
    "text": "post routing chain it will masquerade if it",
    "start": "2045360",
    "end": "2051760"
  },
  {
    "text": "the mark matches uh 4 000 hex this random foley thing is nice in terms",
    "start": "2051760",
    "end": "2058398"
  },
  {
    "text": "of it forces the networking stack to use random source ports",
    "start": "2058399",
    "end": "2063679"
  },
  {
    "text": "so um you know the cases where you have one pod talking to another pod things",
    "start": "2063679",
    "end": "2069440"
  },
  {
    "text": "are fine because the address will get translated on the way out get to the destination pod and then",
    "start": "2069440",
    "end": "2077358"
  },
  {
    "text": "when uh when the traffic needs to come back it'll come back uh the net will be rev then adding will",
    "start": "2077359",
    "end": "2084320"
  },
  {
    "text": "be reversed and the original pod won't know it's talking to some other ip",
    "start": "2084320",
    "end": "2091679"
  },
  {
    "text": "but if the traffic was from outside the kubernetes cluster or you're not a pod then we probably",
    "start": "2091679",
    "end": "2098079"
  },
  {
    "text": "need to force it to go through the current node just to make sure that it's handling",
    "start": "2098079",
    "end": "2103200"
  },
  {
    "text": "both directions of traffic so it can reverse the nat and if it's coming from the destination",
    "start": "2103200",
    "end": "2109040"
  },
  {
    "text": "pod itself we need to sort of force it to go through the node so it doesn't try to take a shortcut",
    "start": "2109040",
    "end": "2114640"
  },
  {
    "text": "and skip that that natting phase",
    "start": "2114640",
    "end": "2120240"
  },
  {
    "text": "so that's how services work with iptables okay let's talk about flannel a little",
    "start": "2120240",
    "end": "2125440"
  },
  {
    "text": "bit so flannel's one of the earliest networking plugins and it's a decent",
    "start": "2125440",
    "end": "2130480"
  },
  {
    "text": "choice for small clusters there are some issues when you get too large in terms of having to make sure",
    "start": "2130480",
    "end": "2136079"
  },
  {
    "text": "your table size is large enough and it's really the same reasons why you don't make one ethernet",
    "start": "2136079",
    "end": "2144480"
  },
  {
    "text": "subnet or you know ethernet lan too big but for small to medium-sized clusters",
    "start": "2144480",
    "end": "2151599"
  },
  {
    "text": "just fine it's also the default for k3s which makes it a great place for us to start because we don't have to do anything",
    "start": "2151599",
    "end": "2157040"
  },
  {
    "text": "special to configure it flannel runs on layer 2 ethernet and the networking stack so all",
    "start": "2157040",
    "end": "2163599"
  },
  {
    "text": "the pods can talk via ethernet as opposed to only ip so you don't have to necessarily use an ip-based protocol to talk between pods",
    "start": "2163599",
    "end": "2171280"
  },
  {
    "text": "you can actually encapsulate non-ip stuff between your pods",
    "start": "2171280",
    "end": "2177838"
  },
  {
    "text": "flannel uses a pod subnet that's statically assigned each kubernetes node when it comes to ip address management",
    "start": "2180400",
    "end": "2186720"
  },
  {
    "text": "so pod ip allocation decisions are local to the node super simple the default encapsulation",
    "start": "2186720",
    "end": "2192720"
  },
  {
    "text": "for flannel is vxlan which involves wrapping a layer 2 ethernet packet inside a udp packet",
    "start": "2192720",
    "end": "2198079"
  },
  {
    "text": "so you have your ip packet typically wrapped in ethernet which then gets",
    "start": "2198079",
    "end": "2203359"
  },
  {
    "text": "wrapped in udp which gets wrapped in ip which gets wrapped in ethernet there's a lot of pieces there and then",
    "start": "2203359",
    "end": "2208880"
  },
  {
    "text": "vxlan has a little bit of header in that udp packet it's it's a little complicated and adds some overhead",
    "start": "2208880",
    "end": "2214960"
  },
  {
    "text": "but it works pretty well and that way you can transport raw ethernet packets between pods",
    "start": "2214960",
    "end": "2221839"
  },
  {
    "text": "okay let's dig in and take a look okay",
    "start": "2221839",
    "end": "2228240"
  },
  {
    "text": "so let's take a little bit of a look at how flannel works",
    "start": "2228240",
    "end": "2232800"
  },
  {
    "text": "first let's take a look at the interfaces we have",
    "start": "2235280",
    "end": "2239200"
  },
  {
    "text": "you can see we've got a docker 0 but that's actually just a leftover from having docker installed",
    "start": "2240560",
    "end": "2247119"
  },
  {
    "text": "it's not actually being used right now we have an interface called flannel1",
    "start": "2247119",
    "end": "2253920"
  },
  {
    "text": "and we have an interface called cni0 and then you can see all of our normal",
    "start": "2253920",
    "end": "2258960"
  },
  {
    "text": "virtual ethernet interfaces so",
    "start": "2258960",
    "end": "2263920"
  },
  {
    "text": "let's take a quick look at our bridges so you see docker 0 is a bridge but it's not really doing anything cni 0 is actually the bridge",
    "start": "2265839",
    "end": "2272640"
  },
  {
    "text": "that this kubernetes cluster is using and you can see that the virtual ethernet",
    "start": "2272640",
    "end": "2277680"
  },
  {
    "text": "interfaces from all my pods are attached to cni 0.",
    "start": "2277680",
    "end": "2284960"
  },
  {
    "text": "so what happens if one pod tries to talk to another let's",
    "start": "2284960",
    "end": "2291280"
  },
  {
    "text": "look at the routes okay so there's a couple routes here we can look at the first one",
    "start": "2291280",
    "end": "2299240"
  },
  {
    "text": "172.19 172.19 is the network that",
    "start": "2299240",
    "end": "2306320"
  },
  {
    "text": "the nodes are on so this is the route that they take if we're talking node to node",
    "start": "2306320",
    "end": "2313440"
  },
  {
    "text": "in this case you can see this node is not two so if it's trying to talk to the other",
    "start": "2313440",
    "end": "2319599"
  },
  {
    "text": "nodes or dot three or dot four it'll go out eth0",
    "start": "2319599",
    "end": "2325359"
  },
  {
    "text": "makes sense we can ignore the docker01 because like i said that's not really",
    "start": "2325359",
    "end": "2330400"
  },
  {
    "text": "not really being used so 10.42 is our pod network",
    "start": "2330400",
    "end": "2338880"
  },
  {
    "text": "and it just so happens that 10.42.0.0 is attached to this node in fact i can",
    "start": "2338880",
    "end": "2347838"
  },
  {
    "text": "go take a quick look at the node information and you can see the pod cider is 10.42.0.0",
    "start": "2352839",
    "end": "2363440"
  },
  {
    "text": "24. so slash 24 means only the last octet changes so everything on this all the pods on",
    "start": "2363440",
    "end": "2369280"
  },
  {
    "text": "this node are going to start 10.42.0 so if we open up that route table again",
    "start": "2369280",
    "end": "2380480"
  },
  {
    "text": "10.42.0 is going to go to cni 0. that's our bridge so that makes sense if a packet",
    "start": "2380839",
    "end": "2387839"
  },
  {
    "text": "is destined for a pod on this node we send it to the bridge and the bridge will figure out",
    "start": "2387839",
    "end": "2393280"
  },
  {
    "text": "which interface it goes to to get to that pod now if we're looking at a pod on a",
    "start": "2393280",
    "end": "2398480"
  },
  {
    "text": "different node those will be 10.42. something else dot one and dot two",
    "start": "2398480",
    "end": "2406160"
  },
  {
    "text": "and you can see that both of these route via device flannel one",
    "start": "2406160",
    "end": "2411680"
  },
  {
    "text": "so the question is what does flannel one do so by default flannel uses vxlan",
    "start": "2411680",
    "end": "2418800"
  },
  {
    "text": "encapsulation vxlam encapsulates entire ethernet",
    "start": "2418800",
    "end": "2424160"
  },
  {
    "text": "frames it gets them and it sticks them in a udp packet",
    "start": "2424160",
    "end": "2429440"
  },
  {
    "text": "that it then sends to the other side so the question here is how's this all",
    "start": "2429440",
    "end": "2435520"
  },
  {
    "text": "going to work let's see if we can demonstrate it",
    "start": "2435520",
    "end": "2440240"
  },
  {
    "text": "first let's take a look at our what we've got going on i killed my pods since last time",
    "start": "2440880",
    "end": "2447280"
  },
  {
    "text": "so let's go ahead and get those installed",
    "start": "2449280",
    "end": "2453839"
  },
  {
    "text": "okay so those don't have ips yet but it looks like we'll get one on each node which is perfect so our node zero one is gonna be this",
    "start": "2457920",
    "end": "2464839"
  },
  {
    "text": "guy i guess while i'm at it take a look at the services that's our service ip",
    "start": "2464839",
    "end": "2471839"
  },
  {
    "text": "okay so our pods up yet great",
    "start": "2471839",
    "end": "2478880"
  },
  {
    "text": "so let's see what happens if i",
    "start": "2478880",
    "end": "2484318"
  },
  {
    "text": "in a different interface let's show you what i'm doing here this",
    "start": "2486079",
    "end": "2491119"
  },
  {
    "text": "is t-shark so this is a terminal version of wireshark now there are several tools you can use",
    "start": "2491119",
    "end": "2498640"
  },
  {
    "text": "for capturing packets on the terminal tcp dump is probably the most standard n grip is another one",
    "start": "2498640",
    "end": "2505760"
  },
  {
    "text": "especially if you're great if you're looking at text-based network traffic and looking for like strings in a packet",
    "start": "2505760",
    "end": "2511839"
  },
  {
    "text": "t-shark is like the terminal version of wireshark so it's got a lot of extra capabilities",
    "start": "2511839",
    "end": "2517760"
  },
  {
    "text": "um which is which i'm going to take advantage of here so you may wonder i'm looking at port 8472",
    "start": "2517760",
    "end": "2524880"
  },
  {
    "text": "oh you'll see in a moment okay so our pods are running so let's do",
    "start": "2524880",
    "end": "2530720"
  },
  {
    "text": "a cube control uh exec",
    "start": "2530720",
    "end": "2537040"
  },
  {
    "text": "let's go into the pod locally because we want to see stuff on this",
    "start": "2537040",
    "end": "2542240"
  },
  {
    "text": "node so i want to make sure i don't totally involve unrelated pods",
    "start": "2542240",
    "end": "2548240"
  },
  {
    "text": "and then let's just do a curl uh use the service ip",
    "start": "2548240",
    "end": "2557599"
  },
  {
    "text": "and for fun let's go and grew up for",
    "start": "2560720",
    "end": "2565838"
  },
  {
    "text": "hello kubernetes",
    "start": "2568640",
    "end": "2579838"
  },
  {
    "text": "and that's when i remember that i don't have curl installed",
    "start": "2580960",
    "end": "2593839"
  },
  {
    "text": "okay that's clean",
    "start": "2595680",
    "end": "2598640"
  },
  {
    "text": "so let's take a look here so we've got a bunch of packets um so the note i'm on so node zero has",
    "start": "2601520",
    "end": "2609599"
  },
  {
    "text": "the ip address ends in dot two it tried to talk to this guy which is",
    "start": "2609599",
    "end": "2614800"
  },
  {
    "text": "node one and send a udp packet and the udp packet came",
    "start": "2614800",
    "end": "2620000"
  },
  {
    "text": "back and then sent another one and sent another one another one back another one back",
    "start": "2620000",
    "end": "2627520"
  },
  {
    "text": "um this node sent one sent another received one send one",
    "start": "2627520",
    "end": "2635280"
  },
  {
    "text": "okay so you look at this and you think what in the world's going on here this isn't very useful",
    "start": "2635280",
    "end": "2640720"
  },
  {
    "text": "uh and that's true so what we're seeing here is the vxlan traffic by default uh flannel is going to use port 8472 for",
    "start": "2640720",
    "end": "2647680"
  },
  {
    "text": "its vxlan traffic but as you can see here all we can tell is two nodes are exchanging udp",
    "start": "2647680",
    "end": "2653119"
  },
  {
    "text": "packets so when you're trying to debug what's going on in a network running flannel you have to dig",
    "start": "2653119",
    "end": "2659839"
  },
  {
    "text": "a little deeper because right now all you can see is packets are flowing between two nodes and in a decent size cluster with a lot of",
    "start": "2659839",
    "end": "2666800"
  },
  {
    "text": "pods doing a lot of things you're just going to see a ton of udp traffic and have no idea what's talking to what",
    "start": "2666800",
    "end": "2674839"
  },
  {
    "text": "so let's try this again except i'm going to add something else this tells",
    "start": "2674839",
    "end": "2682800"
  },
  {
    "text": "t-shark that things on udp port 8472 should be considered",
    "start": "2682800",
    "end": "2688880"
  },
  {
    "text": "vxlan and t-shark knows about vxlan so that",
    "start": "2688880",
    "end": "2694560"
  },
  {
    "text": "works so let me try this",
    "start": "2694560",
    "end": "2699599"
  },
  {
    "text": "okay now when we look at this packet capture you",
    "start": "2700000",
    "end": "2706480"
  },
  {
    "text": "can see it's showing i should probably come up here and check",
    "start": "2706480",
    "end": "2713040"
  },
  {
    "text": "our new our pod on node 0 that we're writing the request from has this 10.42.0.9 ip",
    "start": "2713040",
    "end": "2720960"
  },
  {
    "text": "and we were we sent that request to the one on node 1. so we should be sending from 0.9",
    "start": "2720960",
    "end": "2727760"
  },
  {
    "text": "to 1.3 so sure enough 0.9 sent a tcp syn packet",
    "start": "2727760",
    "end": "2737359"
  },
  {
    "text": "starting connection to 1.3 uh we got a syn ack back",
    "start": "2737359",
    "end": "2744800"
  },
  {
    "text": "which is the next part in the handshake an act gets sent and then because",
    "start": "2744800",
    "end": "2751359"
  },
  {
    "text": "t-shark and wireshark have advanced packet dissectors they can dig in there and go hey this",
    "start": "2751359",
    "end": "2756640"
  },
  {
    "text": "was actually an http request getting slash and then you can see that",
    "start": "2756640",
    "end": "2762000"
  },
  {
    "text": "we got a response of a 200 okay and then the connection got torn down",
    "start": "2762000",
    "end": "2767599"
  },
  {
    "text": "so by actually telling it to get these udp packets interpret them as",
    "start": "2767599",
    "end": "2773440"
  },
  {
    "text": "vxlan we can see what's inside them and for an extra level of detail",
    "start": "2773440",
    "end": "2780160"
  },
  {
    "text": "we can use dash capital v now i'm only going to capture two packets here because this is really verbose so",
    "start": "2780160",
    "end": "2788720"
  },
  {
    "text": "let's run another one of these okay lots of stuff let me just scroll to",
    "start": "2788720",
    "end": "2795760"
  },
  {
    "text": "the top so it captured a frame so it captured an",
    "start": "2795760",
    "end": "2802240"
  },
  {
    "text": "ethernet frame okay everything's pretty much ethernet at the at the lowest level here",
    "start": "2802240",
    "end": "2808640"
  },
  {
    "text": "inside the ethernet is an ipv4 packet okay sounds good and you can see this is between two node addresses",
    "start": "2808640",
    "end": "2817760"
  },
  {
    "text": "inside that ipv4 packet is a udp packet i'm going to port 8472",
    "start": "2817760",
    "end": "2826560"
  },
  {
    "text": "hey look it interpreted that as virtual extensible local area network or",
    "start": "2827200",
    "end": "2832880"
  },
  {
    "text": "vxlan and so you can read the details of vxlan packet there's not a whole lot of data",
    "start": "2832880",
    "end": "2838560"
  },
  {
    "text": "there the main thing that you might care about if you run multiple vxlan networks is that the",
    "start": "2838560",
    "end": "2845119"
  },
  {
    "text": "vxlan network id vni is right here so the vni of one",
    "start": "2845119",
    "end": "2852800"
  },
  {
    "text": "that's a default you can change it if you have multiple vxl networks but that that helps you separate traffic if",
    "start": "2852800",
    "end": "2859359"
  },
  {
    "text": "you need to inside the vxlan packet is an ethernet",
    "start": "2859359",
    "end": "2864720"
  },
  {
    "text": "packet remember vxlan encapsulates layer two packets so it encapsulates the entire",
    "start": "2864720",
    "end": "2870000"
  },
  {
    "text": "ethernet packet this is interesting because there's some protocols you can't run over ip alone so things that rely on",
    "start": "2870000",
    "end": "2876800"
  },
  {
    "text": "like multicast or you know like dhcp you can't run over ip",
    "start": "2876800",
    "end": "2883280"
  },
  {
    "text": "it runs over over ethernet so we have an ethernet pack inside our",
    "start": "2883280",
    "end": "2889920"
  },
  {
    "text": "vxlan packet i don't feel like looking up all the mac addresses but we could and it would we'd",
    "start": "2889920",
    "end": "2895920"
  },
  {
    "text": "be able to make some sense out of them if we did but you can see inside that username packet is an ip packet",
    "start": "2895920",
    "end": "2901440"
  },
  {
    "text": "and this one is going between pod ips so we had ip packets between the nodes",
    "start": "2901440",
    "end": "2909520"
  },
  {
    "text": "that had udp payloads that were interpreted as vxlan that had ethernet",
    "start": "2909520",
    "end": "2914800"
  },
  {
    "text": "packets that had ip packets between the pods",
    "start": "2914800",
    "end": "2920160"
  },
  {
    "text": "and you can see also that inside this ip packet is tcp",
    "start": "2920160",
    "end": "2926559"
  },
  {
    "text": "because http requests are tcp so vxlan uses udp on the outside but when",
    "start": "2926559",
    "end": "2933760"
  },
  {
    "text": "you dig all the way in you're actually seeing tcp packets in the middle",
    "start": "2933760",
    "end": "2938640"
  },
  {
    "text": "and then t-sharp can give you all sorts of information and then here we have the next frame",
    "start": "2939760",
    "end": "2946800"
  },
  {
    "text": "which is another ethernet packet with another ip packet in it this one",
    "start": "2946800",
    "end": "2952480"
  },
  {
    "text": "from our destination node back to the node we sent the request",
    "start": "2952480",
    "end": "2957920"
  },
  {
    "text": "from inside that's a udp packet",
    "start": "2957920",
    "end": "2963520"
  },
  {
    "text": "going to port 8472 note for um vxlan it's always the destination port is 8472",
    "start": "2963520",
    "end": "2968800"
  },
  {
    "text": "the source port is random or at least consistently defined it the",
    "start": "2968800",
    "end": "2974400"
  },
  {
    "text": "source port can be anything here's our vxlan information that we",
    "start": "2974400",
    "end": "2981040"
  },
  {
    "text": "found inside the udp packet inside that another ethernet frame another ipv4",
    "start": "2981040",
    "end": "2987520"
  },
  {
    "text": "ipv4 packet with uh the source being the",
    "start": "2987520",
    "end": "2994880"
  },
  {
    "text": "pod that was running the http server and the destination being where our client was running",
    "start": "2994880",
    "end": "3002558"
  },
  {
    "text": "inside that's a tcp packet now in this case the source ports 8080 because we we made a request to 8080 and is sending",
    "start": "3002800",
    "end": "3009040"
  },
  {
    "text": "a response back and you can see that this one is a connection established acknowledge send",
    "start": "3009040",
    "end": "3015520"
  },
  {
    "text": "plus ack packet so the first one is the syn packet establishing the connection this one's the syntax packet back",
    "start": "3015520",
    "end": "3020640"
  },
  {
    "text": "so you can go through and you can pull apart all these layers and see the each individual piece of it",
    "start": "3020640",
    "end": "3028720"
  },
  {
    "text": "so that if you ever need to debug this in many cases if you just tell a tool like t-shark to",
    "start": "3028720",
    "end": "3036000"
  },
  {
    "text": "interpret the packets it sees on uh udp port 8472",
    "start": "3036000",
    "end": "3043599"
  },
  {
    "text": "as vxlan then you can at least see what's inside and that's usually what you care about",
    "start": "3043599",
    "end": "3049760"
  },
  {
    "text": "but if you really want to know everything that's going on you can actually dissect the whole",
    "start": "3049760",
    "end": "3054880"
  },
  {
    "text": "packets and you can also do this by saving a pcap file and loading in wireshark if you don't want",
    "start": "3054880",
    "end": "3060000"
  },
  {
    "text": "all this information spewing to your console and you can use that to see everything",
    "start": "3060000",
    "end": "3066000"
  },
  {
    "text": "that happened inside so you can see the outside packet the vxlan information and the inside packet",
    "start": "3066000",
    "end": "3071280"
  },
  {
    "text": "and you know you can also use this to display the payload if you need to and that should cover the basics of",
    "start": "3071280",
    "end": "3079359"
  },
  {
    "text": "flannel and vxlan now onto calico so calico is easily the",
    "start": "3079359",
    "end": "3086319"
  },
  {
    "text": "most common networking plug-in with tigera which is the company behind it claiming that you can use to",
    "start": "3086319",
    "end": "3092240"
  },
  {
    "text": "some degree at least implied for network policies in most cloud provider kubernetes environments",
    "start": "3092240",
    "end": "3099119"
  },
  {
    "text": "runs at layer 3 ipm the networking stack so only ip traffic can be encapsulated and everything is routed",
    "start": "3099119",
    "end": "3104400"
  },
  {
    "text": "there's no way to broadcast ethernet packets across your calico",
    "start": "3104400",
    "end": "3110160"
  },
  {
    "text": "your calico layer for ipm calico actually each node goes and asks either",
    "start": "3110160",
    "end": "3117760"
  },
  {
    "text": "the kubernetes api server or its own lcd cluster for a block of ip addresses that can",
    "start": "3117760",
    "end": "3123680"
  },
  {
    "text": "allocate out but it can keep going back for more blocks of ip addresses as needed",
    "start": "3123680",
    "end": "3128800"
  },
  {
    "text": "so it is nice because it lets you dynamically adjust how many ip addresses are",
    "start": "3128800",
    "end": "3133920"
  },
  {
    "text": "allocated to each node and then as far as encapsulation the default encapsulation for calco is ip",
    "start": "3133920",
    "end": "3141119"
  },
  {
    "text": "and ip which involves wrapping a layer 3 ip packet inside an extra ip header so it's very",
    "start": "3141119",
    "end": "3147680"
  },
  {
    "text": "low overhead all you need is an extra ip header not even tcp or udp and definitely not",
    "start": "3147680",
    "end": "3152880"
  },
  {
    "text": "an extra ethernet header but it can only encapsulate ip packets literally the",
    "start": "3152880",
    "end": "3158800"
  },
  {
    "text": "the protocol definition says this there's an ip header and inside it is an ip header which then may have tcp udp",
    "start": "3158800",
    "end": "3165760"
  },
  {
    "text": "whatever inside of it okay let's take a look let me show you",
    "start": "3165760",
    "end": "3171440"
  },
  {
    "text": "how to start up the calico cluster so first thing",
    "start": "3171440",
    "end": "3177119"
  },
  {
    "text": "back in your final cluster you actually run a run",
    "start": "3177119",
    "end": "3181838"
  },
  {
    "text": "the k8s net labs get repo there's a calico folder this",
    "start": "3193040",
    "end": "3199359"
  },
  {
    "text": "one has a simple bootstrap calico so just like bringing up the footloose",
    "start": "3199359",
    "end": "3204640"
  },
  {
    "text": "one or the just like bringing up the flannel one it's does everything for you creates a",
    "start": "3204640",
    "end": "3211680"
  },
  {
    "text": "docker network it makes sure the image is pulled it creates the cluster um and it does all the stuff required to",
    "start": "3211680",
    "end": "3218720"
  },
  {
    "text": "get k3s to properly uh initialize on the master and",
    "start": "3218720",
    "end": "3224000"
  },
  {
    "text": "have the other nodes connect to that master this one adds a few different flags so if i look at i'll first let's take a",
    "start": "3224000",
    "end": "3230640"
  },
  {
    "text": "quick look this footloose calico yaml um",
    "start": "3230640",
    "end": "3235760"
  },
  {
    "text": "i name the network the cholesterol differently i put calico in front of the node names",
    "start": "3235760",
    "end": "3243119"
  },
  {
    "text": "i use a different docker network just to keep everything separate but otherwise exactly the same as the",
    "start": "3243119",
    "end": "3250000"
  },
  {
    "text": "last one the bootstrap script for one thing it",
    "start": "3250000",
    "end": "3256400"
  },
  {
    "text": "passes this dash c footloose calico.yaml to every footloose command",
    "start": "3256400",
    "end": "3261920"
  },
  {
    "text": "to tell it which file to use i just wanted to keep that clear because i originally had these in",
    "start": "3261920",
    "end": "3267280"
  },
  {
    "text": "the same directory then it does the same thing both did before ssh is into the first node",
    "start": "3267280",
    "end": "3273920"
  },
  {
    "text": "but it says flannel backend equals none and gives it a cluster side or parameter",
    "start": "3273920",
    "end": "3281200"
  },
  {
    "text": "that is the only thing you have to do in order to tell it to not use flannel",
    "start": "3281200",
    "end": "3287040"
  },
  {
    "text": "and the cluster cider is needed for calico to understand what should do",
    "start": "3287040",
    "end": "3293280"
  },
  {
    "text": "and then we're going to ssh into the node",
    "start": "3293280",
    "end": "3300240"
  },
  {
    "text": "so same things before footloose except i've got a use of the footloose calico dot yaml and ssh",
    "start": "3305040",
    "end": "3311599"
  },
  {
    "text": "root at calico dash node zero because like i said i named it differently this time",
    "start": "3311599",
    "end": "3317599"
  },
  {
    "text": "so first thing do i have the nodes yes and i can even see the rep addresses",
    "start": "3318640",
    "end": "3326079"
  },
  {
    "text": "this uses 172.20 so i've got here okay",
    "start": "3326079",
    "end": "3335839"
  },
  {
    "text": "now you can see i've got a bunch of stuff that's in container creating and it's all on node 0. well that's because i haven't actually",
    "start": "3338079",
    "end": "3345520"
  },
  {
    "text": "uh set up calico yet okay so we'll do coop control",
    "start": "3345520",
    "end": "3350799"
  },
  {
    "text": "ply calico k3s.ml",
    "start": "3350799",
    "end": "3356319"
  },
  {
    "text": "so this is basically the calico gamble that came from calico or from tigera",
    "start": "3356319",
    "end": "3362720"
  },
  {
    "text": "it has one little tweak in it because you have to turn on ip forwarding in your pods for some of the stuff in k3 has to work",
    "start": "3362720",
    "end": "3370160"
  },
  {
    "text": "so the difference between this",
    "start": "3370160",
    "end": "3377839"
  },
  {
    "text": "and the default is just container settings allow ip forwarding true so super simple",
    "start": "3378799",
    "end": "3391838"
  },
  {
    "text": "okay and now we actually have some pods starting up and in particular you can see we've got pod initializing on calico",
    "start": "3393119",
    "end": "3398640"
  },
  {
    "text": "node zero one and two so we'll have to wait a moment for for this doll startup because obviously",
    "start": "3398640",
    "end": "3404480"
  },
  {
    "text": "until calico comes up we're not going to have a whole lot of luck getting the rest of our pods to come up",
    "start": "3404480",
    "end": "3411760"
  },
  {
    "text": "there we go so now we have one calico node running",
    "start": "3412559",
    "end": "3419838"
  },
  {
    "text": "and oh and this one running as well and this one running great",
    "start": "3420799",
    "end": "3426960"
  },
  {
    "text": "okay so now we've got all the pods coming up so this will have given us a calico",
    "start": "3427920",
    "end": "3434559"
  },
  {
    "text": "installation so let's take a look around and see see",
    "start": "3434559",
    "end": "3441599"
  },
  {
    "text": "how this looks one thing that's interesting is with calico it names its virtual ethernet pairs",
    "start": "3441599",
    "end": "3448000"
  },
  {
    "text": "starting with cali that's just a preference i guess but it",
    "start": "3448000",
    "end": "3453280"
  },
  {
    "text": "makes it look a little different but these things that i'll start with cali those are all the ones that were the same as the v-e-t-h",
    "start": "3453280",
    "end": "3461599"
  },
  {
    "text": "interfaces that we had in flannel",
    "start": "3461599",
    "end": "3465839"
  },
  {
    "text": "now you can see here something's interesting if we look at our bridges we've got docker zero again which yet",
    "start": "3470319",
    "end": "3476079"
  },
  {
    "text": "again isn't doing anything nothing's attached to it so this is where calico and flannel",
    "start": "3476079",
    "end": "3482640"
  },
  {
    "text": "differ calico does everything at layer three it's ip",
    "start": "3482640",
    "end": "3487680"
  },
  {
    "text": "based routing based so because of that it doesn't rely on bridges",
    "start": "3487680",
    "end": "3495200"
  },
  {
    "text": "whereas before if you look at the route table in flannel you saw one route towards the bridge for",
    "start": "3495200",
    "end": "3501920"
  },
  {
    "text": "all ips that are pods that belong to this node and then you saw",
    "start": "3501920",
    "end": "3508079"
  },
  {
    "text": "other routes for the other nodes that said hey send them to the flannel interface",
    "start": "3508079",
    "end": "3515040"
  },
  {
    "text": "let's take a look and see what the routes look like here okay so first thing",
    "start": "3515040",
    "end": "3524480"
  },
  {
    "text": "i should probably clarify this let me grab the pods and grep for node zero",
    "start": "3527040",
    "end": "3534559"
  },
  {
    "text": "let me know aside from calico which came up with its own ip address because calico wasn't giving out ips then we",
    "start": "3535920",
    "end": "3544079"
  },
  {
    "text": "have 192.168.43 addresses so calico",
    "start": "3544079",
    "end": "3551839"
  },
  {
    "text": "you tell you give it a block of ip addresses that can use and then using fcd",
    "start": "3551839",
    "end": "3559599"
  },
  {
    "text": "uh and and depending on how your setup it can either use the kubernetes cluster at cd or can have its own sad",
    "start": "3559599",
    "end": "3565839"
  },
  {
    "text": "um it will each node will grab reservations from that block of ip addresses the",
    "start": "3565839",
    "end": "3572559"
  },
  {
    "text": "calico nodes can grab as much ips as they need and in fact if you look here you'll see",
    "start": "3572559",
    "end": "3579200"
  },
  {
    "text": "that we've got a route for 192.168.63.128",
    "start": "3579200",
    "end": "3584839"
  },
  {
    "text": "26. so we're with flannel we gave a simple slash 24 which means the the whole last octet is",
    "start": "3584839",
    "end": "3592240"
  },
  {
    "text": "usable by the node depending on how you want to count it you know 254",
    "start": "3592240",
    "end": "3599119"
  },
  {
    "text": "ish usable ips there um",
    "start": "3599119",
    "end": "3604160"
  },
  {
    "text": "calico actually grabbed two fewer bits of address space",
    "start": "3604160",
    "end": "3609280"
  },
  {
    "text": "so this one's only more like 64-ish but it can grab as many of those",
    "start": "3609280",
    "end": "3615200"
  },
  {
    "text": "reservations as it needs and then if you run out of ip blocks big",
    "start": "3615200",
    "end": "3620480"
  },
  {
    "text": "enough it has a way where it can reserve individual ips as needed",
    "start": "3620480",
    "end": "3626160"
  },
  {
    "text": "so what happened here is node 0 appears to have gotten",
    "start": "3626160",
    "end": "3635599"
  },
  {
    "text": "192.168.43.0 26. which makes sense dot 43.1.43.2.43.4",
    "start": "3637240",
    "end": "3646000"
  },
  {
    "text": "etc node zero got that block and then node one",
    "start": "3646000",
    "end": "3656400"
  },
  {
    "text": "got this block dot 63.128 26",
    "start": "3656400",
    "end": "3661440"
  },
  {
    "text": "and node 2 got 186.64 26. so they aren't even",
    "start": "3661440",
    "end": "3670000"
  },
  {
    "text": "adjacent so that's one thing each each node dynamically grabs blocks they can have more than one",
    "start": "3670000",
    "end": "3676880"
  },
  {
    "text": "so when we look at this routing table what else do we see so like for example um metric server is running here on 168 to",
    "start": "3676880",
    "end": "3683839"
  },
  {
    "text": "43.1 well we have a route here that says to go to",
    "start": "3683839",
    "end": "3689440"
  },
  {
    "text": "this interface so instead of having a route that says oh this is a",
    "start": "3689440",
    "end": "3695520"
  },
  {
    "text": "local pod go to the bridge and the bridge will figure out where to send you this one actually has a route for each",
    "start": "3695520",
    "end": "3702079"
  },
  {
    "text": "pod going directly to that pod's interface similarly for things it knows",
    "start": "3702079",
    "end": "3710480"
  },
  {
    "text": "are on node node one",
    "start": "3710480",
    "end": "3715920"
  },
  {
    "text": "spits out to be clear calico node one has dot three",
    "start": "3717200",
    "end": "3724160"
  },
  {
    "text": "for things that knows that are in node one it knows what the ip range is or all the ipa",
    "start": "3724160",
    "end": "3729839"
  },
  {
    "text": "ranges that node one has reserved so it sticks around and that says hey um",
    "start": "3729839",
    "end": "3735520"
  },
  {
    "text": "for anything going to this pod range we're gonna send it via node 1",
    "start": "3735520",
    "end": "3742798"
  },
  {
    "text": "dev tunnel 0. now if we look up here at our interfaces",
    "start": "3743359",
    "end": "3750559"
  },
  {
    "text": "from ip adder you can see we have this tunnel zero interface",
    "start": "3750559",
    "end": "3756079"
  },
  {
    "text": "and it is mentions link slash ipip this",
    "start": "3756079",
    "end": "3762640"
  },
  {
    "text": "interface will encapsulate the packet in ipip what does that mean well let's see if we",
    "start": "3762640",
    "end": "3769280"
  },
  {
    "text": "can get an example of this",
    "start": "3769280",
    "end": "3772799"
  },
  {
    "text": "okay let's see what happens if we do a t-shark",
    "start": "3778880",
    "end": "3786078"
  },
  {
    "text": "let's see what that does let's start up our hello kubernetes",
    "start": "3792799",
    "end": "3799039"
  },
  {
    "text": "service again because why not",
    "start": "3799039",
    "end": "3810799"
  },
  {
    "text": "this is going to be our service ip",
    "start": "3810799",
    "end": "3825839"
  },
  {
    "text": "see what that does i forgot to tell what the capture on it captured on the ip over ip interface which actually",
    "start": "3836799",
    "end": "3844160"
  },
  {
    "text": "is useful because here you can see it went from a pod ip to a pod ip because that's what was sent",
    "start": "3844160",
    "end": "3850880"
  },
  {
    "text": "to that tunnel interface i might get a lot of traffic here so",
    "start": "3850880",
    "end": "3858240"
  },
  {
    "text": "i was going to localhost okay there we go",
    "start": "3858240",
    "end": "3862880"
  },
  {
    "text": "okay so this actually properly decoded this packet",
    "start": "3865520",
    "end": "3871519"
  },
  {
    "text": "let's see if we can",
    "start": "3872160",
    "end": "3881838"
  },
  {
    "text": "it's local local",
    "start": "3884079",
    "end": "3889200"
  },
  {
    "text": "so much for random okay so you can see that um here i use dash",
    "start": "3889440",
    "end": "3896240"
  },
  {
    "text": "capital y which instead of using a tcp dump syntax which is very low level it uses wireshark syntax the reason i",
    "start": "3896240",
    "end": "3903039"
  },
  {
    "text": "did that is wireshark understands what http is tcp dump really doesn't so in this case",
    "start": "3903039",
    "end": "3910880"
  },
  {
    "text": "i told look for http and it found this now let's see what happens",
    "start": "3910880",
    "end": "3918078"
  },
  {
    "text": "if i decode it all the way",
    "start": "3918559",
    "end": "3923839"
  },
  {
    "text": "so you see everything including the payload if i come up here to the top",
    "start": "3925680",
    "end": "3932720"
  },
  {
    "text": "okay captures a frame ethernet packet ip packet now this ip packet is going",
    "start": "3932720",
    "end": "3938400"
  },
  {
    "text": "from host to host inside the ipv4 packet",
    "start": "3938400",
    "end": "3945680"
  },
  {
    "text": "you have an ipv4 packet in fact if you look here at the protocol listed in the the outer i p packet it",
    "start": "3945680",
    "end": "3952960"
  },
  {
    "text": "says it's i p over i p so what happens is this gets the whole",
    "start": "3952960",
    "end": "3958720"
  },
  {
    "text": "packet the whole ip packet that you want to send and just sticks another ip header on it but if you look",
    "start": "3958720",
    "end": "3964400"
  },
  {
    "text": "inside that ip packet you don't see tcp or udp you see just another ip packet",
    "start": "3964400",
    "end": "3970880"
  },
  {
    "text": "it's a very simplistic way of doing encapsulation but you know all your",
    "start": "3970880",
    "end": "3977839"
  },
  {
    "text": "network devices are going to be routing the ip packet so unless you've got some sort of stateful firewall that's looking",
    "start": "3977839",
    "end": "3983599"
  },
  {
    "text": "for the type of protocol or digging inside the ip packet it's going to go it's an ip packet i know how to",
    "start": "3983599",
    "end": "3989280"
  },
  {
    "text": "send that to the next hop so inside the outer ip packet is the",
    "start": "3989280",
    "end": "3994480"
  },
  {
    "text": "inner ip packet this one has the pod ips in it",
    "start": "3994480",
    "end": "3998799"
  },
  {
    "text": "and then you'll see the protocol inside that's tcp because it's http runs over tcp so you've got there's",
    "start": "3999599",
    "end": "4005839"
  },
  {
    "text": "your tcp packet destination port 8080 which is what the web server is running on inside these pods",
    "start": "4005839",
    "end": "4011280"
  },
  {
    "text": "and then you can dig all the way down see it does a http get on the other side the same thing anytime",
    "start": "4011280",
    "end": "4018720"
  },
  {
    "text": "packet with an ip packet going between the nodes",
    "start": "4018720",
    "end": "4024960"
  },
  {
    "text": "and then inside that is another ip packet going between the pods protocol and the other one was ipip",
    "start": "4025359",
    "end": "4030559"
  },
  {
    "text": "protocol and the inner one is tcp and then tcp packet this is the response",
    "start": "4030559",
    "end": "4036160"
  },
  {
    "text": "coming back from port 8080 and it has a response in it there were more packets here because i",
    "start": "4036160",
    "end": "4042559"
  },
  {
    "text": "told it to look for http it ignored anything it couldn't detect the http in so if you look at",
    "start": "4042559",
    "end": "4048079"
  },
  {
    "text": "these packets for example the tcp flags there's no sin",
    "start": "4048079",
    "end": "4056640"
  },
  {
    "text": "because the connection's already established the connection got established and then it started sending enough stuff that t-shirt could say oh",
    "start": "4056640",
    "end": "4062480"
  },
  {
    "text": "that's http so it ignored the early packets but this is this way you can see what happens you",
    "start": "4062480",
    "end": "4068880"
  },
  {
    "text": "have an outer ip packet with an inner ip packet immediately inside of it with whatever your actual",
    "start": "4068880",
    "end": "4074000"
  },
  {
    "text": "you know payload tcp udp whatever isn't inside that but you can only encapsulate things that",
    "start": "4074000",
    "end": "4079359"
  },
  {
    "text": "go over ip because the thing you encapsulate has to be an ip packet you can't encapsulate um you know",
    "start": "4079359",
    "end": "4088240"
  },
  {
    "text": "ipx or apple talk or any of those things uh that that didn't use",
    "start": "4088240",
    "end": "4095200"
  },
  {
    "text": "uh an ip as an outer you know that don't have an outer ip layer to them similarly you",
    "start": "4095200",
    "end": "4100719"
  },
  {
    "text": "can't do anything that's that's raw ethernet packets where you actually have to get the ethernet headers to the other side",
    "start": "4100719",
    "end": "4107758"
  },
  {
    "text": "so the other part that's interesting about this is that how does calico know",
    "start": "4109120",
    "end": "4116159"
  },
  {
    "text": "where to send all the different packets like what what pods are on what nodes",
    "start": "4116159",
    "end": "4121838"
  },
  {
    "text": "and it actually runs bgp daemon so for anyone who doesn't know bgp is a",
    "start": "4121839",
    "end": "4129199"
  },
  {
    "text": "routing protocol and it's the most common one across the internet in terms of",
    "start": "4129199",
    "end": "4134719"
  },
  {
    "text": "when different networks need to talk to each other bgp is typically what they use you might use a different protocol",
    "start": "4134719",
    "end": "4140480"
  },
  {
    "text": "within your network but if you want to exchange routes of comcast or at t or whoever you're going to use",
    "start": "4140480",
    "end": "4149520"
  },
  {
    "text": "bgp that's the standard protocol for for exchanging routes",
    "start": "4149520",
    "end": "4155198"
  },
  {
    "text": "so you can look here and see bgp using the",
    "start": "4158839",
    "end": "4164480"
  },
  {
    "text": "lovely etsy services file runs on tcp port 179. so it's tcp",
    "start": "4164480",
    "end": "4170480"
  },
  {
    "text": "it's point to point and with calico they connect in a full mesh",
    "start": "4170480",
    "end": "4176719"
  },
  {
    "text": "so let's see what happens if i let's do tcp dump this time just for fun let's look at e0",
    "start": "4177520",
    "end": "4184880"
  },
  {
    "text": "and let's look for port 179",
    "start": "4184880",
    "end": "4190560"
  },
  {
    "text": "calico node 0 on its bgp port",
    "start": "4192400",
    "end": "4197440"
  },
  {
    "text": "sent something to node two and presumably node two connected to",
    "start": "4198400",
    "end": "4205280"
  },
  {
    "text": "node zero that's why it's got an arbitrary port here",
    "start": "4205280",
    "end": "4209840"
  },
  {
    "text": "let's see",
    "start": "4210480",
    "end": "4217840"
  },
  {
    "text": "see what t-sharp finds have to give in a moment they they send",
    "start": "4221679",
    "end": "4227760"
  },
  {
    "text": "messages occasionally but it's not something that happens uh non-stop",
    "start": "4227760",
    "end": "4234239"
  },
  {
    "text": "if things aren't changing the network bgp shouldn't be chatting too much",
    "start": "4234239",
    "end": "4240719"
  },
  {
    "text": "now you see there we got a bgp keep a live message so this is how you can see that um the",
    "start": "4241840",
    "end": "4249199"
  },
  {
    "text": "different nodes all talk to each other over bgp um oh great so there we go that's what we",
    "start": "4249199",
    "end": "4255760"
  },
  {
    "text": "needed so you can see we have a keep alive message that went between dot four and dot two and then the other",
    "start": "4255760",
    "end": "4262640"
  },
  {
    "text": "way and then between dot three and dot two and then the other way so this is showing you that node zero is",
    "start": "4262640",
    "end": "4269920"
  },
  {
    "text": "talking to both of the other nodes if you build a big enough network calico",
    "start": "4269920",
    "end": "4276159"
  },
  {
    "text": "is ways you can put in route reflectors because one of the problems you run into is that",
    "start": "4276159",
    "end": "4281199"
  },
  {
    "text": "the number of connections you need is roughly on the order of n squared not quite but",
    "start": "4281199",
    "end": "4286400"
  },
  {
    "text": "this gets a little bit out of control as that number gets closer to a hundred nodes or more so there are",
    "start": "4286400",
    "end": "4292800"
  },
  {
    "text": "ways of creating route reflectors which let a subset of nodes talk to one route reflector",
    "start": "4292800",
    "end": "4298000"
  },
  {
    "text": "but that's something you would you would want to do if you were having to scale this but one of the nice things about bgp is",
    "start": "4298000",
    "end": "4303199"
  },
  {
    "text": "it has been tried and true at internet scale for a very long time and so the",
    "start": "4303199",
    "end": "4308320"
  },
  {
    "text": "confidence that this will do what's expected is pretty high just for fun",
    "start": "4308320",
    "end": "4315840"
  },
  {
    "text": "i'm going to delete a pod so you can see one's terminating one's",
    "start": "4323679",
    "end": "4329920"
  },
  {
    "text": "running okay all done so we didn't exchange any bgp information then because none of the",
    "start": "4329920",
    "end": "4336159"
  },
  {
    "text": "routes actually changed remember when we look at the routes",
    "start": "4336159",
    "end": "4343280"
  },
  {
    "text": "you know we have routes locally for the pods that are running on our local machine but we only have routes to the subnets",
    "start": "4343280",
    "end": "4349600"
  },
  {
    "text": "that these other uh these other machines have so the only way that we could get this to well",
    "start": "4349600",
    "end": "4356960"
  },
  {
    "text": "let's see if we can do this",
    "start": "4356960",
    "end": "4370640"
  },
  {
    "text": "this may or may not work but hey",
    "start": "4370640",
    "end": "4374080"
  },
  {
    "text": "so you can see i'm getting more and more of these individual routes the other nodes still only have one",
    "start": "4376320",
    "end": "4383520"
  },
  {
    "text": "block of ips but we don't have that many pods so",
    "start": "4383520",
    "end": "4390640"
  },
  {
    "text": "actually",
    "start": "4396840",
    "end": "4399840"
  },
  {
    "text": "since we haven't done this okay so",
    "start": "4403520",
    "end": "4412320"
  },
  {
    "text": "that's the that's the route for node zero right now in fact",
    "start": "4412320",
    "end": "4419360"
  },
  {
    "text": "you see we still have bgp keep alive messages okay we have now hit dot 63.",
    "start": "4423120",
    "end": "4441840"
  },
  {
    "text": "this is a total of 49 pods running here so it probably has a few ips it could fill in that hasn't used yet like you can see 61",
    "start": "4443679",
    "end": "4451040"
  },
  {
    "text": "wasn't used yet",
    "start": "4451040",
    "end": "4455840"
  },
  {
    "text": "here we go we have bgp update messages route refresh suddenly",
    "start": "4457520",
    "end": "4464239"
  },
  {
    "text": "our nodes are trying to",
    "start": "4464239",
    "end": "4469840"
  },
  {
    "text": "there we go that's what i was looking for so 172.20 is node 0.",
    "start": "4476560",
    "end": "4485199"
  },
  {
    "text": "and it now has too many for type block so you can see it now got allocated another ip block",
    "start": "4485199",
    "end": "4490640"
  },
  {
    "text": "dot 64 which gives another",
    "start": "4490640",
    "end": "4496239"
  },
  {
    "text": "60 well depending on how it used it could use up to 64",
    "start": "4496239",
    "end": "4501840"
  },
  {
    "text": "of those ips but sometimes you don't use the first and last so it could be 62.",
    "start": "4501840",
    "end": "4511040"
  },
  {
    "text": "so anyway that's what we've got and actually didn't realize that's also node zero so",
    "start": "4511040",
    "end": "4518000"
  },
  {
    "text": "node zero now has three ip blocks node two has one ip block and",
    "start": "4518000",
    "end": "4524880"
  },
  {
    "text": "i'm on node one so i can't see my own routes but um looks like",
    "start": "4524880",
    "end": "4532480"
  },
  {
    "text": "it's still under control so just for fun i'm going to bring that back down so that my",
    "start": "4533120",
    "end": "4538400"
  },
  {
    "text": "cluster doesn't fall apart okay so that's calico uses bgp to",
    "start": "4538400",
    "end": "4545600"
  },
  {
    "text": "exchange routes each node gets reservations of blocks of ips",
    "start": "4545600",
    "end": "4551360"
  },
  {
    "text": "from either the kubernetes api servers at cd or its own fcd and it uses routes",
    "start": "4551360",
    "end": "4558640"
  },
  {
    "text": "both to get to local pods and to get to other nodes and the standard",
    "start": "4558640",
    "end": "4566000"
  },
  {
    "text": "installs encapsulating via ip over ip now calico also supports network policies",
    "start": "4566000",
    "end": "4571840"
  },
  {
    "text": "it also uh supports different encapsulation as well you know you can actually get flannel to",
    "start": "4571840",
    "end": "4578000"
  },
  {
    "text": "run an ip over ip and you can get calicodes vxlan it's just not their standard standard",
    "start": "4578000",
    "end": "4584159"
  },
  {
    "text": "configuration and so it made more sense to show you the standard configurations of the two",
    "start": "4584159",
    "end": "4589440"
  },
  {
    "text": "and get to see both flannel and calico in action as well as both vxlan and ipo ip in",
    "start": "4589440",
    "end": "4595760"
  },
  {
    "text": "action okay so that brings us to the end this has been a quick tour through",
    "start": "4595760",
    "end": "4602159"
  },
  {
    "text": "container networking service routing and flannel and calico in particular",
    "start": "4602159",
    "end": "4608159"
  },
  {
    "text": "kubernetes networking is a huge topic so any talk can only cover a small slice",
    "start": "4608159",
    "end": "4614239"
  },
  {
    "text": "there's a lot of things i would love to go into uh you know for example psyllium is fascinating",
    "start": "4614239",
    "end": "4619840"
  },
  {
    "text": "um there's a bunch of other i mean the list of networking plugins is tremendous",
    "start": "4619840",
    "end": "4625120"
  },
  {
    "text": "uh we could have used several other encapsulations there's all sorts of new technologies",
    "start": "4625120",
    "end": "4630320"
  },
  {
    "text": "out there we could have dug deep into network policies but",
    "start": "4630320",
    "end": "4635520"
  },
  {
    "text": "there's only so much we can do in a limited amount of time but hopefully this covered the tools that would make sense for",
    "start": "4635520",
    "end": "4641840"
  },
  {
    "text": "looking into any of these things and at least would get you started on further exploration if you did want to",
    "start": "4641840",
    "end": "4647760"
  },
  {
    "text": "go into these other topics this has been pre-recorded so i can't",
    "start": "4647760",
    "end": "4653760"
  },
  {
    "text": "sit here and answer questions live but i should be available to answer questions throughout this",
    "start": "4653760",
    "end": "4658800"
  },
  {
    "text": "and if you need to reach me after the talk you can email me at jeff jeffpool.net",
    "start": "4658800",
    "end": "4665840"
  },
  {
    "text": "thank you",
    "start": "4666000",
    "end": "4669760"
  }
]