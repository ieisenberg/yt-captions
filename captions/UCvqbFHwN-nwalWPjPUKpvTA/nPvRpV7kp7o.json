[
  {
    "text": "before I was at fermion I did a lot of work on the net stack of a c-sharp",
    "start": "4799",
    "end": "10559"
  },
  {
    "text": "program of 15 years and this talk is kind of combining those two strands of my developer existence",
    "start": "10559",
    "end": "20420"
  },
  {
    "text": "so looking all the way back to the early 1990s",
    "start": "25080",
    "end": "31619"
  },
  {
    "text": "in the beginning there was Visual Basic a rapid application development environment for 16-bit and later 32-bit",
    "start": "31619",
    "end": "39600"
  },
  {
    "text": "windows it was a monolith that kind of got gradually",
    "start": "39600",
    "end": "46020"
  },
  {
    "text": "priced apart but always stayed pretty much tied to its own proprietary runtime",
    "start": "46020",
    "end": "53399"
  },
  {
    "text": "and as things like Java began began competing with it mostly wanted to",
    "start": "53399",
    "end": "59039"
  },
  {
    "text": "do another language and they figured out that if they were going to do that they should share a run",
    "start": "59039",
    "end": "65880"
  },
  {
    "text": "time because then you could have lots of other languages on those as well",
    "start": "65880",
    "end": "72479"
  },
  {
    "text": "um and thus was the common language runtime born also known because marketing at the time.net",
    "start": "72479",
    "end": "80340"
  },
  {
    "text": "so initially.net was released as a as a Windows framework",
    "start": "80880",
    "end": "86100"
  },
  {
    "text": "um it was closed Source but it was a specification submitted to ecma and that meant that",
    "start": "86100",
    "end": "93659"
  },
  {
    "text": "other implementers could come along the mono project implemented.net for Linux",
    "start": "93659",
    "end": "102240"
  },
  {
    "text": "electron and we don't like to talk about this too much um there was Silverlight which was a",
    "start": "102240",
    "end": "109579"
  },
  {
    "text": "cross-platform implementation of a subset of.net to run in the browser",
    "start": "109579",
    "end": "116960"
  },
  {
    "text": "and then when Microsoft began embracing open source a bit more there was.net core which is now actually the primary",
    "start": "117899",
    "end": "123840"
  },
  {
    "text": "development stream of.net that is fully cross-platform Linux Mac Windows",
    "start": "123840",
    "end": "130020"
  },
  {
    "text": "um and is a a much smaller refocused version of the the framework and then a",
    "start": "130020",
    "end": "137280"
  },
  {
    "text": "few years ago Steve Sanderson from Microsoft figured out that they could compile the.net",
    "start": "137280",
    "end": "142980"
  },
  {
    "text": "runtime they could compile this this this execution environment to webassembly and run it in the browser",
    "start": "142980",
    "end": "151319"
  },
  {
    "text": "and that was called Blazer",
    "start": "151319",
    "end": "155340"
  },
  {
    "text": "so and I want to shift and give you some context on how this all works",
    "start": "158760",
    "end": "164640"
  },
  {
    "text": "when you write C sharp code or F-sharp or vb.net or whatever and compile that",
    "start": "164640",
    "end": "171840"
  },
  {
    "text": "you end up with these Blobs of what's called Intermediate Language Cil coming into media language bundled into",
    "start": "171840",
    "end": "178080"
  },
  {
    "text": "assemblies and those are self-described they've got metadata they can talk to each other and",
    "start": "178080",
    "end": "184739"
  },
  {
    "text": "together they form an application that Intermediate Language is not",
    "start": "184739",
    "end": "189780"
  },
  {
    "text": "machine gun it's more like Java byte code and it's run by an execution engine",
    "start": "189780",
    "end": "194900"
  },
  {
    "text": "called the virtual execution system and that sits over the host that's the",
    "start": "194900",
    "end": "199920"
  },
  {
    "text": "classic.net model when we take that to Blazer all we need",
    "start": "199920",
    "end": "205560"
  },
  {
    "text": "to do all we need to do is to recompile the execution engine",
    "start": "205560",
    "end": "212060"
  },
  {
    "text": "from targeting machine code from from from from x86 instructions to wasm",
    "start": "212060",
    "end": "217319"
  },
  {
    "text": "instructions and then you get an execution environment that's able to run these IL instructions",
    "start": "217319",
    "end": "224760"
  },
  {
    "text": "in the browser now recently Steve Sanderson has added",
    "start": "224760",
    "end": "232379"
  },
  {
    "text": "wazzy support via a project called the.net ysdk experimental project should probably stress called the.net was the",
    "start": "232379",
    "end": "239220"
  },
  {
    "text": "SDK and this is going to allow dotted applications to run to be compiled to",
    "start": "239220",
    "end": "244560"
  },
  {
    "text": "Asm on the the server now notice once again still we've got the IL blobs the",
    "start": "244560",
    "end": "250500"
  },
  {
    "text": "dlls the assemblies but now we've got a wasi host such as wasm time instead of a browser and it",
    "start": "250500",
    "end": "257100"
  },
  {
    "text": "means that the standard Library The Base Class Library can do things like file i o by talking to the Wazi interface",
    "start": "257100",
    "end": "264080"
  },
  {
    "text": "rather than having to drop it on the drop it on the floor or fail",
    "start": "264080",
    "end": "270259"
  },
  {
    "text": "the wasi SDK has one limitation from certainly from fermion's point of view",
    "start": "273060",
    "end": "278900"
  },
  {
    "text": "which is that it's a it's a it's a it's a it's a wazzy start",
    "start": "278900",
    "end": "286020"
  },
  {
    "text": "model underscore style which means that the execution comes in the top runs to",
    "start": "286020",
    "end": "291600"
  },
  {
    "text": "the bottom and then exits that's not what we need for the future",
    "start": "291600",
    "end": "298139"
  },
  {
    "text": "of the the component model and why some interface types",
    "start": "298139",
    "end": "304199"
  },
  {
    "text": "what we need is something more like this where in addition to the IL blobs",
    "start": "304199",
    "end": "309900"
  },
  {
    "text": "talking to each other they can also talk to services that are export they",
    "start": "309900",
    "end": "316259"
  },
  {
    "text": "can import Services exported by The Host and they can provide callable interfaces",
    "start": "316259",
    "end": "321960"
  },
  {
    "text": "the host can enter instead of just the the start point and this is coming back to Luke's world's concept the the host",
    "start": "321960",
    "end": "331380"
  },
  {
    "text": "now is sort of it is or implements a world which the dotnet components live",
    "start": "331380",
    "end": "338400"
  },
  {
    "text": "in and satisfy the the contracts of so",
    "start": "338400",
    "end": "345740"
  },
  {
    "text": "this opens up additional potential because",
    "start": "347039",
    "end": "353639"
  },
  {
    "text": "we can now talk to other components in that same world via their contracts and",
    "start": "353639",
    "end": "360180"
  },
  {
    "text": "that means we're not limited to talking.net.net or dot net host we can also talk for example.net to job we can",
    "start": "360180",
    "end": "367620"
  },
  {
    "text": "use the work that Joel did to build say some business rules we've got in Java into a wasm module and then we can have",
    "start": "367620",
    "end": "375479"
  },
  {
    "text": "our net application using those business rules via the wasm interface we don't",
    "start": "375479",
    "end": "381900"
  },
  {
    "text": "care that it's Java on the other side don't care that it's built from rust or C or go or Java or whatever it's all",
    "start": "381900",
    "end": "387660"
  },
  {
    "text": "wasm it's always some interface types",
    "start": "387660",
    "end": "392819"
  },
  {
    "text": "so that's the that's the rainbow dream but",
    "start": "392819",
    "end": "398520"
  },
  {
    "text": "there's always a butt so if we look inside the Wazi SDK what",
    "start": "398520",
    "end": "404940"
  },
  {
    "text": "we find is that um it's got it there was the SDK hijacks.net",
    "start": "404940",
    "end": "412560"
  },
  {
    "text": "compilation instead of just putting out a a.net dll an IL blob",
    "start": "412560",
    "end": "420660"
  },
  {
    "text": "it actually puts out a it actually adds in some C code",
    "start": "420660",
    "end": "427020"
  },
  {
    "text": "which gets compiled to wasm and it's the C code that talks to that loads the.net",
    "start": "427020",
    "end": "432840"
  },
  {
    "text": "blobs as opposed to the the Raw vs so where's the SDK exposes an underscore",
    "start": "432840",
    "end": "439800"
  },
  {
    "text": "start or a c main method that's compiled to see that method that",
    "start": "439800",
    "end": "447660"
  },
  {
    "text": "piece of C code launches the mono implementation of the.net CLR",
    "start": "447660",
    "end": "454620"
  },
  {
    "text": "and asks it to load the user's assembly and call it Main",
    "start": "454620",
    "end": "461940"
  },
  {
    "text": "and that's all hardwired into the wazy SDK what we want is something more like this",
    "start": "461940",
    "end": "469520"
  },
  {
    "text": "where we can have C code that exposes.net exports and consume sorry",
    "start": "469520",
    "end": "477300"
  },
  {
    "text": "that exports Quantum interfaces and consume can import wasm interfaces that",
    "start": "477300",
    "end": "483300"
  },
  {
    "text": "are exported by The Host now within that export entry point we need to launch the VES and that can",
    "start": "483300",
    "end": "491940"
  },
  {
    "text": "then launch the user implementation and find the right entry point for that",
    "start": "491940",
    "end": "497780"
  },
  {
    "text": "and then those can call back we can map c-sharp libraries c-sharp methods onto C",
    "start": "497819",
    "end": "505560"
  },
  {
    "text": "methods and those can then call back through the the widget the generated generated import layer",
    "start": "505560",
    "end": "514760"
  },
  {
    "text": "is that making sense so far any questions so far",
    "start": "515219",
    "end": "521599"
  },
  {
    "text": "all right so what you see here is what can kind of be called Franken code it's",
    "start": "523200",
    "end": "528779"
  },
  {
    "text": "a mix of C sharp for the user application the the user code and see",
    "start": "528779",
    "end": "536279"
  },
  {
    "text": "for those interop layers and I'm now going to see how far I can get with",
    "start": "536279",
    "end": "542339"
  },
  {
    "text": "building one of these things live",
    "start": "542339",
    "end": "546660"
  },
  {
    "text": "so what I've got here what I've got here is some",
    "start": "549660",
    "end": "557640"
  },
  {
    "text": "why doesn't interface files I've got a um an export thing so this is going to",
    "start": "557640",
    "end": "563700"
  },
  {
    "text": "handle console triggers it's going to handle a line of input and I wanted to return a line of output",
    "start": "563700",
    "end": "572839"
  },
  {
    "text": "well first of all I'll start by creating myself a project",
    "start": "572880",
    "end": "580220"
  },
  {
    "text": "so that's just created a new empty.net project and then I'm going to",
    "start": "589380",
    "end": "596279"
  },
  {
    "text": "use the whip bind gen tool that Luke alluded to",
    "start": "596279",
    "end": "601920"
  },
  {
    "text": "and I'm going to say I wanted to create exports from",
    "start": "601920",
    "end": "608180"
  },
  {
    "text": "wit slash console.wit and I'm going to put them",
    "start": "608399",
    "end": "614160"
  },
  {
    "text": "inside that project",
    "start": "614160",
    "end": "618379"
  },
  {
    "text": "so what have we oh",
    "start": "623399",
    "end": "628040"
  },
  {
    "text": "dear thank you very much",
    "start": "630240",
    "end": "633560"
  },
  {
    "text": "so what do we got coming out from that um our life we've got this native and we've",
    "start": "637500",
    "end": "645000"
  },
  {
    "text": "got this console.c and console.h and in that console.c because it's an export",
    "start": "645000",
    "end": "652760"
  },
  {
    "text": "you'll see it's exporting this function",
    "start": "653640",
    "end": "660540"
  },
  {
    "text": "from the Seeker that's going to get compiled down to wasm and it's going to become a wasm export and inside that",
    "start": "660540",
    "end": "666959"
  },
  {
    "text": "function does some marshalling and then it calls this function which if we were",
    "start": "666959",
    "end": "672300"
  },
  {
    "text": "to look through the C code we will find that that function was not defined anywhere we've got to Define that",
    "start": "672300",
    "end": "677880"
  },
  {
    "text": "and to do that we will have some custom",
    "start": "677880",
    "end": "684779"
  },
  {
    "text": "C code which I will add",
    "start": "684779",
    "end": "689060"
  },
  {
    "text": "there so what's this doing well you can see there's a bunch of hash includes of the",
    "start": "690660",
    "end": "696420"
  },
  {
    "text": "the mono Source there so we're loading we're going to be loading the the mono Source",
    "start": "696420",
    "end": "702600"
  },
  {
    "text": "I'll scroll down to the the end here so this is",
    "start": "702600",
    "end": "709560"
  },
  {
    "text": "the missing function this is going to get linked by the the clan compiler which is",
    "start": "709560",
    "end": "716519"
  },
  {
    "text": "invoked by the wasi SDK this is going to get linked with that export whitbine gen",
    "start": "716519",
    "end": "722399"
  },
  {
    "text": "export code and that means that when our host calls",
    "start": "722399",
    "end": "727980"
  },
  {
    "text": "that export we will go through that c marshalling code and we will end up here",
    "start": "727980",
    "end": "733680"
  },
  {
    "text": "and what does this do well it does some sorcery it does some stuff we prefer not to talk about because that's supposed to",
    "start": "733680",
    "end": "738959"
  },
  {
    "text": "be internals but it doesn't work if we don't do that and then it initializes",
    "start": "738959",
    "end": "747199"
  },
  {
    "text": "the CLR it loads the runtime",
    "start": "747360",
    "end": "753600"
  },
  {
    "text": "it does some stuff called attaching internal calls which don't need yet so we can probably",
    "start": "753600",
    "end": "759360"
  },
  {
    "text": "get rid of that and it tries to find an entry point in the user code now this is where",
    "start": "759360",
    "end": "767399"
  },
  {
    "text": "things get a little bit sticky because there's no obvious entry point as there is with Main",
    "start": "767399",
    "end": "774420"
  },
  {
    "text": "so how are we going to solve that well a common way of doing that in.net is to",
    "start": "774420",
    "end": "779639"
  },
  {
    "text": "either Implement a marker interface or to use an attribute for the way that I've done it",
    "start": "779639",
    "end": "785639"
  },
  {
    "text": "um in my project I've used an attribute so I'm going to need to add that",
    "start": "785639",
    "end": "792779"
  },
  {
    "text": "declaration to my project",
    "start": "792779",
    "end": "798779"
  },
  {
    "text": "as well and for those who knows there's nothing",
    "start": "798779",
    "end": "806639"
  },
  {
    "text": "really going on there it's just a market just a way of labeling a method",
    "start": "806639",
    "end": "813440"
  },
  {
    "text": "and I'm also going to need the",
    "start": "814920",
    "end": "820019"
  },
  {
    "text": "the hairy bit that finds the method which I've not made a snippet for so let's go copy that out from",
    "start": "820019",
    "end": "829760"
  },
  {
    "text": "from here so come on C and we'll drop that into the native",
    "start": "829920",
    "end": "837480"
  },
  {
    "text": "directory this is doing a a whole bunch of",
    "start": "837480",
    "end": "844680"
  },
  {
    "text": "effectively reflection but it's doing Reflection from the the",
    "start": "844680",
    "end": "850560"
  },
  {
    "text": "mono hosting side so it's using mono apis to inspect the.net assembly and",
    "start": "850560",
    "end": "856440"
  },
  {
    "text": "find something that's decorated with that attribute",
    "start": "856440",
    "end": "861620"
  },
  {
    "text": "so now I should be able to go in here",
    "start": "862139",
    "end": "868500"
  },
  {
    "text": "and write public static",
    "start": "868500",
    "end": "875579"
  },
  {
    "text": "um string",
    "start": "875579",
    "end": "880940"
  },
  {
    "text": "my Handler screen input",
    "start": "883860",
    "end": "890120"
  },
  {
    "text": "and that should get called I'm sorry I need to add a",
    "start": "890519",
    "end": "895940"
  },
  {
    "text": "space so it all shows up",
    "start": "902339",
    "end": "905779"
  },
  {
    "text": "all right now we need to get it to compile all that stuff together because we've referenced the ycsdk went to tell",
    "start": "913320",
    "end": "919740"
  },
  {
    "text": "the wasi SDK that there are some additional files that we need to bring in and that's handled by",
    "start": "919740",
    "end": "928639"
  },
  {
    "text": "this targets file which says I want you to include the",
    "start": "933380",
    "end": "939360"
  },
  {
    "text": "console.c",
    "start": "939360",
    "end": "942360"
  },
  {
    "text": "I want you to include my console.cmiutil.c and I'm also going to need to",
    "start": "944579",
    "end": "952860"
  },
  {
    "text": "to include that console export the thing that's actually handling",
    "start": "952860",
    "end": "959100"
  },
  {
    "text": "the entry point",
    "start": "959100",
    "end": "966620"
  },
  {
    "text": "and then I will need to reference those in my",
    "start": "967199",
    "end": "972839"
  },
  {
    "text": "CS project file so I'll just again copy those from",
    "start": "972839",
    "end": "980300"
  },
  {
    "text": "a previous version",
    "start": "980459",
    "end": "983600"
  },
  {
    "text": "so I'll need to have those in",
    "start": "989820",
    "end": "996899"
  },
  {
    "text": "my project and I will also need to",
    "start": "996899",
    "end": "1005060"
  },
  {
    "text": "just save all",
    "start": "1005060",
    "end": "1010820"
  },
  {
    "text": "and I'm also going to need to",
    "start": "1010820",
    "end": "1014920"
  },
  {
    "text": "add the package",
    "start": "1016100",
    "end": "1020380"
  },
  {
    "text": "to my project",
    "start": "1023959",
    "end": "1027339"
  },
  {
    "text": "all right",
    "start": "1033980",
    "end": "1036819"
  },
  {
    "text": "you can tell why I don't like to do this too often all right so that's added the",
    "start": "1043459",
    "end": "1049340"
  },
  {
    "text": "was the SDK that will take care of handing compilation duties over to to",
    "start": "1049340",
    "end": "1055039"
  },
  {
    "text": "clang um and",
    "start": "1055039",
    "end": "1060799"
  },
  {
    "text": "now we can give this a go and see how it works out and this is kind of calling",
    "start": "1060799",
    "end": "1067400"
  },
  {
    "text": "back to what we heard earlier about wanting to use familiar tools this does work with just.net build there's no",
    "start": "1067400",
    "end": "1073280"
  },
  {
    "text": "special wasm compilation it's all taken care of by the where's the SDK so let's see what we've",
    "start": "1073280",
    "end": "1080000"
  },
  {
    "text": "see what we missed okay what we've missed is that c strings",
    "start": "1080000",
    "end": "1085220"
  },
  {
    "text": "are not DOT net strings so if I look in my console Dot h",
    "start": "1085220",
    "end": "1095000"
  },
  {
    "text": "the type that's being passed across the boundary is one of these it's a it's a pointer",
    "start": "1095000",
    "end": "1101240"
  },
  {
    "text": "and a length and that's not a.net string so I need to actually map something that corresponds",
    "start": "1101240",
    "end": "1107179"
  },
  {
    "text": "to I need to have something that corresponds to that on the C sharp side so things can pass across",
    "start": "1107179",
    "end": "1112460"
  },
  {
    "text": "correctly and the way I can do that",
    "start": "1112460",
    "end": "1118760"
  },
  {
    "text": "is",
    "start": "1118760",
    "end": "1121480"
  },
  {
    "text": "by creating a struct a C sharp struct",
    "start": "1125780",
    "end": "1131260"
  },
  {
    "text": "that represents that canonical ABI format so you can see there it's got the",
    "start": "1132280",
    "end": "1141320"
  },
  {
    "text": "the pointer and the length and it's marked as sequential layout and",
    "start": "1141320",
    "end": "1147620"
  },
  {
    "text": "what that means is it's telling the c-sharp compiler that that struct should adopt the the C ABI it should be",
    "start": "1147620",
    "end": "1155600"
  },
  {
    "text": "laid out in memory according to the C API",
    "start": "1155600",
    "end": "1161000"
  },
  {
    "text": "and then there's some health methods on there that can convert it to and from strings",
    "start": "1164120",
    "end": "1169640"
  },
  {
    "text": "so now I can switch back to my",
    "start": "1169640",
    "end": "1174740"
  },
  {
    "text": "my application code this needs to return",
    "start": "1174740",
    "end": "1179840"
  },
  {
    "text": "and",
    "start": "1179840",
    "end": "1182679"
  },
  {
    "text": "an interrupt string and it needs to take",
    "start": "1188419",
    "end": "1195340"
  },
  {
    "text": "an interrupt string and for the time being I'll do I'll",
    "start": "1196760",
    "end": "1202160"
  },
  {
    "text": "return interrupt string Dot from string",
    "start": "1202160",
    "end": "1207880"
  },
  {
    "text": "and will just save that and",
    "start": "1227720",
    "end": "1235480"
  },
  {
    "text": "all right and we'll try that",
    "start": "1242780",
    "end": "1248299"
  },
  {
    "text": "again all right unsafe code",
    "start": "1248299",
    "end": "1255559"
  },
  {
    "text": "that means that I need to also allow on such code to be a thing",
    "start": "1255559",
    "end": "1261200"
  },
  {
    "text": "which means I need to go back in here and I need to",
    "start": "1261200",
    "end": "1267340"
  },
  {
    "text": "now on safe blocks true",
    "start": "1270860",
    "end": "1275799"
  },
  {
    "text": "and we'll try building that again and now the C sharp has built successfully and what it's doing is it's building",
    "start": "1284000",
    "end": "1290600"
  },
  {
    "text": "it's built those dlls including all the dependency dlls and it's now trying to link those with the the C code and when",
    "start": "1290600",
    "end": "1299539"
  },
  {
    "text": "it fails it does tend to produce these very long error messages",
    "start": "1299539",
    "end": "1306080"
  },
  {
    "text": "all right this is a little bit of a silly issue that's caused by whip by and Jen the way that it generates these",
    "start": "1306080",
    "end": "1313700"
  },
  {
    "text": "things it creates the wrong include statement",
    "start": "1313700",
    "end": "1322240"
  },
  {
    "text": "for the dot h file so we just need to massage that",
    "start": "1322240",
    "end": "1328100"
  },
  {
    "text": "generated code which I we always hate doing but we've not found a workaround for that",
    "start": "1328100",
    "end": "1334220"
  },
  {
    "text": "yet",
    "start": "1334220",
    "end": "1336400"
  },
  {
    "text": "and",
    "start": "1340220",
    "end": "1343000"
  },
  {
    "text": "okay I will switch back to my pre-prepared one thank you for your patience but I",
    "start": "1346880",
    "end": "1354559"
  },
  {
    "text": "was getting a bit over optimistic there so let's switch back to dotnet guest and Dot net",
    "start": "1354559",
    "end": "1360980"
  },
  {
    "text": "build that one and this is what you've seen except without the the mistakes it's the",
    "start": "1360980",
    "end": "1367100"
  },
  {
    "text": "same same code that you've you've just been looking at",
    "start": "1367100",
    "end": "1372340"
  },
  {
    "text": "so how can I use this well I've got a little host program written in in Rust",
    "start": "1373400",
    "end": "1380480"
  },
  {
    "text": "um that loads that just loads",
    "start": "1380480",
    "end": "1387860"
  },
  {
    "text": "um low spasm time",
    "start": "1387860",
    "end": "1391360"
  },
  {
    "text": "and calls through that that export so it's just looping reading",
    "start": "1393700",
    "end": "1398840"
  },
  {
    "text": "the line from the console and when it gets one it calls into",
    "start": "1398840",
    "end": "1404840"
  },
  {
    "text": "it calls for an export so I'm going to",
    "start": "1404840",
    "end": "1411640"
  },
  {
    "text": "um change up I will go dot host",
    "start": "1413299",
    "end": "1418520"
  },
  {
    "text": "Target release host and I'll pass it the wasm file that I want to use as a",
    "start": "1418520",
    "end": "1426380"
  },
  {
    "text": "command line argument which is going to be .net",
    "start": "1426380",
    "end": "1431720"
  },
  {
    "text": "guest bin",
    "start": "1431720",
    "end": "1437780"
  },
  {
    "text": "debug net 7.0 uh why isn't a",
    "start": "1437780",
    "end": "1445600"
  },
  {
    "text": "got my namespace now why someday.net",
    "start": "1452179",
    "end": "1459820"
  },
  {
    "text": "thank you",
    "start": "1460159",
    "end": "1462880"
  },
  {
    "text": "for some reason I'm not getting completion on the argument",
    "start": "1469940",
    "end": "1476539"
  },
  {
    "text": "so rust the rust host is now working for command and I will give it a command of",
    "start": "1476539",
    "end": "1483140"
  },
  {
    "text": "jump and that's now calling into my application here",
    "start": "1483140",
    "end": "1491720"
  },
  {
    "text": "so we've received a line I've matched the line on joke",
    "start": "1492200",
    "end": "1498440"
  },
  {
    "text": "and that is now calling out via a",
    "start": "1498440",
    "end": "1504799"
  },
  {
    "text": "an import",
    "start": "1504799",
    "end": "1507639"
  },
  {
    "text": "the random thing import so I'm just constructing a and again",
    "start": "1514940",
    "end": "1522740"
  },
  {
    "text": "this is one of these interop structures and then I'm passing that to",
    "start": "1522740",
    "end": "1531019"
  },
  {
    "text": "this call what's that",
    "start": "1531260",
    "end": "1537880"
  },
  {
    "text": "that's got this internal call decoration on that means it's a call that is implemented by the runtime Itself by the",
    "start": "1540140",
    "end": "1548720"
  },
  {
    "text": "by the execution system itself um which and this is how we achieve Imports because if I go and look",
    "start": "1548720",
    "end": "1555559"
  },
  {
    "text": "for where that's done I can see that that internal call",
    "start": "1555559",
    "end": "1564039"
  },
  {
    "text": "is attached to oh",
    "start": "1564320",
    "end": "1571120"
  },
  {
    "text": "is attached to a c function and that c function has been generated by another whip bind gen",
    "start": "1571279",
    "end": "1579020"
  },
  {
    "text": "that's in here",
    "start": "1579020",
    "end": "1585580"
  },
  {
    "text": "and that whip by engine then backs out onto a service that's implemented in the world",
    "start": "1588140",
    "end": "1593779"
  },
  {
    "text": "of the rust host",
    "start": "1593779",
    "end": "1596740"
  },
  {
    "text": "all right does that make sense I'm sorry that's been a little bit I've shown that in a slightly confusing way does it does it make sense to people how that's",
    "start": "1599419",
    "end": "1604820"
  },
  {
    "text": "hanging together that we've got the the C generated code",
    "start": "1604820",
    "end": "1611000"
  },
  {
    "text": "um forming the interface to the to the host to the world exporting and",
    "start": "1611000",
    "end": "1616940"
  },
  {
    "text": "importing things this binding layer of C interrupts stuff like the interop string",
    "start": "1616940",
    "end": "1623120"
  },
  {
    "text": "and the internal call melding that into the c-sharp.net world and then the",
    "start": "1623120",
    "end": "1629179"
  },
  {
    "text": "application being able to handle those callbacks and call out through the",
    "start": "1629179",
    "end": "1635299"
  },
  {
    "text": "interop yes",
    "start": "1635299",
    "end": "1638200"
  },
  {
    "text": "can I come back it's a great question can I come back to so the question was about can we generate the bindings in C",
    "start": "1641840",
    "end": "1647600"
  },
  {
    "text": "sharp and I will come back to that in just a moment so thank you",
    "start": "1647600",
    "end": "1654860"
  },
  {
    "text": "any other questions around that all right",
    "start": "1654860",
    "end": "1662440"
  },
  {
    "text": "so let's talk about challenges where are we at with this well one",
    "start": "1665840",
    "end": "1671000"
  },
  {
    "text": "challenge that we hit quite hard when we're working with this for spin was startup time",
    "start": "1671000",
    "end": "1678440"
  },
  {
    "text": "the the.net design is is aimed at amortizing startup time you you expect",
    "start": "1678440",
    "end": "1684559"
  },
  {
    "text": "to be a long running process it takes a while to spin up the runtime maybe sort of 30 40 milliseconds something like",
    "start": "1684559",
    "end": "1690500"
  },
  {
    "text": "that but then each call should be quite quick but in a",
    "start": "1690500",
    "end": "1696140"
  },
  {
    "text": "in a western environment in a world like event where your export is being called quite frequently you don't have the res it's wasteful to",
    "start": "1696140",
    "end": "1703640"
  },
  {
    "text": "spin.net up every time the solution that we have for that is to",
    "start": "1703640",
    "end": "1708860"
  },
  {
    "text": "use a tool called wiser and we can and if you look in the spindle escort I'll put a link to",
    "start": "1708860",
    "end": "1715520"
  },
  {
    "text": "wiser allows us to run the module to a certain point",
    "start": "1715520",
    "end": "1720559"
  },
  {
    "text": "so what we can do is we can in our wiser function we can start the",
    "start": "1720559",
    "end": "1726860"
  },
  {
    "text": "run time load the assemblies inject a fake request to warm up",
    "start": "1726860",
    "end": "1733220"
  },
  {
    "text": "the actual Handler and then capture the state of the module at that point and",
    "start": "1733220",
    "end": "1739279"
  },
  {
    "text": "that means that every request that goes to that captured version of the module is going into something that's already",
    "start": "1739279",
    "end": "1744799"
  },
  {
    "text": "pre-warmed and ready to go so it's not a great workaround and there are some weird side effects which are",
    "start": "1744799",
    "end": "1750980"
  },
  {
    "text": "documented in the spin SDK but it it certainly helps a lot in a lot",
    "start": "1750980",
    "end": "1757159"
  },
  {
    "text": "of cases stability is a problem that I've hit to",
    "start": "1757159",
    "end": "1763340"
  },
  {
    "text": "the point of banging my head against the desk a few times um we're doing some kind of Fairly hairy",
    "start": "1763340",
    "end": "1770000"
  },
  {
    "text": "sea magic here um in a experimental environment and",
    "start": "1770000",
    "end": "1776480"
  },
  {
    "text": "I've sudden hit a few kind of mismatched signature which I just don't have a lot of those do seem to be down to wiser but",
    "start": "1776480",
    "end": "1783140"
  },
  {
    "text": "again not fully understood yet size is a bit of a problem at the moment",
    "start": "1783140",
    "end": "1789440"
  },
  {
    "text": "the the generated binaries are about 20 Megs for hello world which is not out of",
    "start": "1789440",
    "end": "1795080"
  },
  {
    "text": "proportion for some of those big run times but it does allocate a whole lot of",
    "start": "1795080",
    "end": "1800240"
  },
  {
    "text": "memory a whole lot of Western linear memory um which we've had to work around",
    "start": "1800240",
    "end": "1806600"
  },
  {
    "text": "um future versions of the Westy SDK should improve that and the one that you so rightly",
    "start": "1806600",
    "end": "1812960"
  },
  {
    "text": "identified convenience you do not you do not want to go through what I just went through on a regular basis",
    "start": "1812960",
    "end": "1820539"
  },
  {
    "text": "even if you know what you're doing um the the the process of generating the C",
    "start": "1820539",
    "end": "1829039"
  },
  {
    "text": "files setting up all the linkage linkages writing those interop bridges and writing the the gunky stuff on the C",
    "start": "1829039",
    "end": "1836240"
  },
  {
    "text": "C sharp side is a mess where we would like to be is to be able to generate",
    "start": "1836240",
    "end": "1842059"
  },
  {
    "text": "those C sharp bindings directly which would be a whip buying gen back end and",
    "start": "1842059",
    "end": "1847940"
  },
  {
    "text": "then somehow from there generate the sea bridging or the the",
    "start": "1847940",
    "end": "1853159"
  },
  {
    "text": "equivalent ABI level bridging stuff which might be doable within.net or we",
    "start": "1853159",
    "end": "1859640"
  },
  {
    "text": "might be able to we might need to use something like Rosalind Source generators to spit out that c code and",
    "start": "1859640",
    "end": "1865039"
  },
  {
    "text": "make sure it gets Linked In so some definite tooling improvements that absolutely need to be done before this",
    "start": "1865039",
    "end": "1871220"
  },
  {
    "text": "can be production ready and with that I'll say go play with it",
    "start": "1871220",
    "end": "1878480"
  },
  {
    "text": "we've got an SDK for work working with.net with c-sharp in spin you can",
    "start": "1878480",
    "end": "1884059"
  },
  {
    "text": "just add it as a nuget package and use it in spin today",
    "start": "1884059",
    "end": "1889399"
  },
  {
    "text": "but I hope what I've shown you is also relevant even if you're not interested in in working with net I hope that this",
    "start": "1889399",
    "end": "1895580"
  },
  {
    "text": "is Illustrated a technique that you could be able to use for other languages for supporting those worlds and",
    "start": "1895580",
    "end": "1903020"
  },
  {
    "text": "interfaces in other languages that don't compile down directly to Azam that that live",
    "start": "1903020",
    "end": "1911480"
  },
  {
    "text": "inside these run times and with that I'll leave you some links",
    "start": "1911480",
    "end": "1916880"
  },
  {
    "text": "the the working code is in that top repo the Western day 22 one the spin.net one",
    "start": "1916880",
    "end": "1922700"
  },
  {
    "text": "which illustrates a more real world use case and illustrates the wisering technique is instrumental in SDK and I",
    "start": "1922700",
    "end": "1930559"
  },
  {
    "text": "need to acknowledge the foundational work that Steve Sanderson has done with the Wazi SDK thank you very much",
    "start": "1930559",
    "end": "1938120"
  },
  {
    "text": "foreign",
    "start": "1938120",
    "end": "1941120"
  },
  {
    "text": "thank you so much Ivan appreciate it",
    "start": "1948740",
    "end": "1952840"
  },
  {
    "text": "all right our next two speakers are no strangers to open source by any means uh Daniel",
    "start": "1953899",
    "end": "1959779"
  },
  {
    "text": "um uh is a Serial entrepreneur in his own right and was the past founder of vietnami and Rafael among his many other",
    "start": "1959779",
    "end": "1966559"
  },
  {
    "text": "things they're both now in the VMware Office of the CTO I worked on KDE for like forever right like 16 years",
    "start": "1966559",
    "end": "1974539"
  },
  {
    "text": "long time so blame him for all the Linux presentation that she's not working today I think",
    "start": "1974539",
    "end": "1980200"
  }
]