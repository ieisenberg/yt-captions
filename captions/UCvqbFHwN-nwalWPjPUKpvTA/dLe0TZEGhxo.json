[
  {
    "text": "hello and welcome to choose wisely understanding kubernetes selectors",
    "start": "1199",
    "end": "6480"
  },
  {
    "text": "my name is chris and i'll be taking you through this session uh i work for a company",
    "start": "6480",
    "end": "12000"
  },
  {
    "text": "called rxm we are a cloud native training and consulting firm so",
    "start": "12000",
    "end": "17279"
  },
  {
    "text": "i do a lot of training i do some consulting and i do a lot of speaking so you may have seen me last year",
    "start": "17279",
    "end": "22720"
  },
  {
    "text": "at uh kubecon here in europe well i suppose it was virtual",
    "start": "22720",
    "end": "28480"
  },
  {
    "text": "because of co-ed and talked about uh roll outs and roll backs and behaviors with controllers",
    "start": "28480",
    "end": "34480"
  },
  {
    "text": "today it's sort of related in that we're going to talk about controller behavior with selectors",
    "start": "34480",
    "end": "39760"
  },
  {
    "text": "so without further ado let's get started so before we talk about how controllers",
    "start": "39760",
    "end": "47200"
  },
  {
    "text": "use selectors we need to talk about what they're selecting right so in a",
    "start": "47200",
    "end": "54399"
  },
  {
    "text": "kubernetes cluster most objects have some sort of",
    "start": "54399",
    "end": "60079"
  },
  {
    "text": "label and they may even have some sort of annotation and this could be any object a pod a",
    "start": "60079",
    "end": "68640"
  },
  {
    "text": "node service the nice thing about labels is that",
    "start": "68640",
    "end": "73760"
  },
  {
    "text": "they're selectable right and so uh we can actually use kubectl commands",
    "start": "73760",
    "end": "78880"
  },
  {
    "text": "to create labels uh review labels so as you can see on",
    "start": "78880",
    "end": "84080"
  },
  {
    "text": "the slide we've got the show labels flag we can add a label after the fact so if an object already",
    "start": "84080",
    "end": "90560"
  },
  {
    "text": "exists we can use the label command to add additional labels we can overwrite",
    "start": "90560",
    "end": "96799"
  },
  {
    "text": "existing labels if we want a new value for a particular key and we can remove them as well for",
    "start": "96799",
    "end": "104799"
  },
  {
    "text": "existing objects in terms of using patterns to select things there's",
    "start": "104799",
    "end": "112240"
  },
  {
    "text": "three patterns here there's the quality based which means that objects returned by that query",
    "start": "112240",
    "end": "119200"
  },
  {
    "text": "have satisfied all the constraints uh they may have additional labels so if you just selected one label",
    "start": "119200",
    "end": "125280"
  },
  {
    "text": "but there are several others the the object would still get returned by the cube ctl command as we see here they're",
    "start": "125280",
    "end": "132239"
  },
  {
    "text": "set based so you may want to filter based on a key with several values and you want to see the",
    "start": "132239",
    "end": "138800"
  },
  {
    "text": "objects that have um one or more values and then the key name uh you can just",
    "start": "138800",
    "end": "145520"
  },
  {
    "text": "use the key and and see all the values for a particular uh key value pair and so you can see",
    "start": "145520",
    "end": "150800"
  },
  {
    "text": "some patterns here we've got the team key and we're using in scarif",
    "start": "150800",
    "end": "156800"
  },
  {
    "text": "with bespin and we're separating the two values with a comma and that",
    "start": "156800",
    "end": "162160"
  },
  {
    "text": "logically ends and so we get uh all of the results back for the objects that have both team",
    "start": "162160",
    "end": "169840"
  },
  {
    "text": "equal scarif and team equal specimen we can expand upon that by using a",
    "start": "169840",
    "end": "175920"
  },
  {
    "text": "set base selector and an equality-based selector so a second example here is team in scarif best been with",
    "start": "175920",
    "end": "184000"
  },
  {
    "text": "apical's rideshare and then of course that minimizes the results that get returned we can even",
    "start": "184000",
    "end": "190400"
  },
  {
    "text": "use labels with things like the logs command if i don't know the name of a pod but i want to get its logs as long as i know",
    "start": "190400",
    "end": "197280"
  },
  {
    "text": "a key value pair that is on that pod then i can just use logs with the minus",
    "start": "197280",
    "end": "202560"
  },
  {
    "text": "l and you can see here that we've got three different pods that answer right",
    "start": "202560",
    "end": "208400"
  },
  {
    "text": "and they've got 36.3 40.2 and 40.3 each has a different ip address so we",
    "start": "208400",
    "end": "214480"
  },
  {
    "text": "can tell that comes from three different apache web servers we can even delete things with uh selectors so we can in this case",
    "start": "214480",
    "end": "222080"
  },
  {
    "text": "we delete a deployment based on a team plus a release",
    "start": "222080",
    "end": "227200"
  },
  {
    "text": "key value pair so just like we can use labels and selectors in cubectl",
    "start": "227200",
    "end": "235360"
  },
  {
    "text": "commands controllers we'll use selectors to find and manage",
    "start": "235360",
    "end": "242799"
  },
  {
    "text": "other objects so selectors are used by application controllers like deployments replica sets and others",
    "start": "242799",
    "end": "249760"
  },
  {
    "text": "to target sets of pods to manage and deployments",
    "start": "249760",
    "end": "254879"
  },
  {
    "text": "and replica sets and jobs and daemon sets will support both the equality based selector as well",
    "start": "254879",
    "end": "262400"
  },
  {
    "text": "as the set base selector okay so i've got several node cluster",
    "start": "262400",
    "end": "268479"
  },
  {
    "text": "here that that i'm going to be working with we'll just do some do something simple",
    "start": "268479",
    "end": "274160"
  },
  {
    "text": "uh first let's start a watch i gotta watch here so we're gonna watch uh deployments",
    "start": "274160",
    "end": "282800"
  },
  {
    "text": "replica sets and pods we're going to show their labels so that we can actually see those i don't have anything deployed yet so",
    "start": "282800",
    "end": "289919"
  },
  {
    "text": "it's just going to be empty for now and then we'll create",
    "start": "289919",
    "end": "295199"
  },
  {
    "text": "a uh deployment and we'll just call it casey deploy uh just very simple uh use a particular",
    "start": "295199",
    "end": "301360"
  },
  {
    "text": "image the host info image that we're gonna use throughout the demos here uh when we query it directly it will",
    "start": "301360",
    "end": "307520"
  },
  {
    "text": "give us its ip address and its host name which will be valuable for demonstration purposes we're just going to run three replicas",
    "start": "307520",
    "end": "314400"
  },
  {
    "text": "in this case so we see the deployment the replica set and the pods get deployed and we can see the labels that are used",
    "start": "314400",
    "end": "321280"
  },
  {
    "text": "right the deployment has the app equals kc deploy",
    "start": "321280",
    "end": "328160"
  },
  {
    "text": "label and it has that because we use the create command and we're using an imperative so",
    "start": "328160",
    "end": "333520"
  },
  {
    "text": "when you do create deployment and the name then the key value pair becomes app",
    "start": "333520",
    "end": "340479"
  },
  {
    "text": "equal to the name so we called it kc deploy so we've got app equals casey deploy but we can also",
    "start": "340479",
    "end": "346639"
  },
  {
    "text": "see that an additional label was generated the pod template hash",
    "start": "346639",
    "end": "352880"
  },
  {
    "text": "with the replica set and then that also shows up on the pods so what that means is if i run",
    "start": "352880",
    "end": "360560"
  },
  {
    "text": "another pod right so i'm going to run this kc deploy pod just use the same image",
    "start": "360560",
    "end": "366880"
  },
  {
    "text": "and then label it with the kc app or sorry app equals casey deploy what we",
    "start": "366880",
    "end": "373199"
  },
  {
    "text": "would expect is that the replica set is going to ignore it because it doesn't",
    "start": "373199",
    "end": "378960"
  },
  {
    "text": "have that extra key value pair that's being used by the selector",
    "start": "378960",
    "end": "384080"
  },
  {
    "text": "that the replica set is using even though we're using the exact same label because we had that extra dynamic",
    "start": "384080",
    "end": "390560"
  },
  {
    "text": "label we avoid that kind of situation so what that means is",
    "start": "390560",
    "end": "395600"
  },
  {
    "text": "that a deployment controller will use a dynamically generated key",
    "start": "395600",
    "end": "401919"
  },
  {
    "text": "value pair and that will avoid any potential overlaps with standalone pods and",
    "start": "401919",
    "end": "408479"
  },
  {
    "text": "the pod template hash key value pair really isn't intended for a user to create right it's it's going",
    "start": "408479",
    "end": "415520"
  },
  {
    "text": "to be managed by the automation and with every revision of the pod template that gets deployed",
    "start": "415520",
    "end": "422800"
  },
  {
    "text": "the hash is going to change the label's value is going to change too and this allows us to",
    "start": "422800",
    "end": "428960"
  },
  {
    "text": "again only control the pods that we intend to control and avoid any potential collisions so let's take a",
    "start": "428960",
    "end": "435039"
  },
  {
    "text": "look at another type of controller let's look at the rs directly so if i use an rs directly",
    "start": "435039",
    "end": "442720"
  },
  {
    "text": "rather than using it with a deployment the behavior is a little bit different so let's take a look at a demo",
    "start": "442720",
    "end": "449039"
  },
  {
    "text": "using replica sets all right so this time around we're going to look at replica sets",
    "start": "449039",
    "end": "456479"
  },
  {
    "text": "to see how they behave and we'll do another watch",
    "start": "456479",
    "end": "463120"
  },
  {
    "text": "so this time we're going to watch just public sets and pods but also taking a look at their labels",
    "start": "463120",
    "end": "469759"
  },
  {
    "text": "again nothing running cleaned up after the last demo",
    "start": "469759",
    "end": "475599"
  },
  {
    "text": "and so first off we will run",
    "start": "475599",
    "end": "481759"
  },
  {
    "text": "a pod that is going to use the label we'll use with our replica",
    "start": "482639",
    "end": "489199"
  },
  {
    "text": "sets we're going to start with the pod this time and see that it's running first",
    "start": "489199",
    "end": "495520"
  },
  {
    "text": "rather than as we did before running the pod after the fact and then i've got a",
    "start": "495520",
    "end": "503280"
  },
  {
    "text": "replica set and i've done it in yaml form because",
    "start": "503280",
    "end": "508960"
  },
  {
    "text": "there's no way to do that imperatively if you take a look at the slides you'll see the yaml",
    "start": "508960",
    "end": "514240"
  },
  {
    "text": "in the deck so i'm just going to cube ctl apply that",
    "start": "514240",
    "end": "521839"
  },
  {
    "text": "and just called rs.yaml and what we're going to see is that",
    "start": "524560",
    "end": "532640"
  },
  {
    "text": "in that replica sets uh manifest that the desired count was",
    "start": "532640",
    "end": "539120"
  },
  {
    "text": "three and so when we deploy that it actually only created two pots that",
    "start": "539120",
    "end": "547040"
  },
  {
    "text": "were deployed when the rs was deployed and we can see that",
    "start": "547040",
    "end": "552640"
  },
  {
    "text": "it has now taken control of our original pod",
    "start": "552640",
    "end": "558160"
  },
  {
    "text": "so unlike deployments using a replica set directly means that we do have potential",
    "start": "558160",
    "end": "565519"
  },
  {
    "text": "if the label selector is basic like this and matches one of the",
    "start": "565519",
    "end": "572240"
  },
  {
    "text": "label selectors of an existing pot it will maintain control of it now let's say we had a second",
    "start": "572240",
    "end": "581519"
  },
  {
    "text": "rs so i'm going to create a second one that called clash rs it's identical yaml file",
    "start": "581519",
    "end": "587680"
  },
  {
    "text": "to the first one with the same selector just with a",
    "start": "587680",
    "end": "592720"
  },
  {
    "text": "different name and we're going to see that it is going to create two replicas and of course",
    "start": "592720",
    "end": "600800"
  },
  {
    "text": "it does that without detecting the original pod so it essentially",
    "start": "600800",
    "end": "607519"
  },
  {
    "text": "ignores our original pod because that has now come into the control of our original",
    "start": "607519",
    "end": "612720"
  },
  {
    "text": "replica set so what that means is they're not going to",
    "start": "612720",
    "end": "618240"
  },
  {
    "text": "fight each other now if i coup ctl delete",
    "start": "618240",
    "end": "624240"
  },
  {
    "text": "and we'll do both of these",
    "start": "624320",
    "end": "633839"
  },
  {
    "text": "we should see that everything gets garbage collected so that all of our pods now go into",
    "start": "636160",
    "end": "642959"
  },
  {
    "text": "terminating state even though that pod was created first independently because it's under the control",
    "start": "642959",
    "end": "648320"
  },
  {
    "text": "of our uh rs controller it is now terminated along with",
    "start": "648320",
    "end": "654399"
  },
  {
    "text": "everything else so what that means is that replica sets on their own don't create that extra dynamic key",
    "start": "654399",
    "end": "661680"
  },
  {
    "text": "value pair to try and avoid collisions so it is possible that a given replica set could",
    "start": "661680",
    "end": "668480"
  },
  {
    "text": "inadvertently begin controlling a standalone pod that has identical labels that is being",
    "start": "668480",
    "end": "675040"
  },
  {
    "text": "used by the replica sets selector however once that happens",
    "start": "675040",
    "end": "681920"
  },
  {
    "text": "if we have a second or third or additional rs using the exact same label query it gets",
    "start": "681920",
    "end": "688240"
  },
  {
    "text": "ignored so the only one replica set will pay attention to it that way we don't",
    "start": "688240",
    "end": "694160"
  },
  {
    "text": "have any sort of fights happen between the two rss you know if one replica one had a replication factor of two and",
    "start": "694160",
    "end": "700880"
  },
  {
    "text": "the other one had a replication factor of three right you could imagine they could uh start to",
    "start": "700880",
    "end": "708000"
  },
  {
    "text": "fight each other and lead to thrashing so that's a good question uh",
    "start": "708000",
    "end": "714480"
  },
  {
    "text": "just in general and what about not standalone pods but controller-based pods that have",
    "start": "714480",
    "end": "720959"
  },
  {
    "text": "overlapping labels right so again the example being two rs's use the same selector one has a",
    "start": "720959",
    "end": "727279"
  },
  {
    "text": "replication factor of two one has a replication factor of three would they thrash right adding and deleting pods until we went into crash",
    "start": "727279",
    "end": "734240"
  },
  {
    "text": "loops in current versions of kubernetes no because",
    "start": "734240",
    "end": "739920"
  },
  {
    "text": "the controlled objects actually have a reference to their owner",
    "start": "739920",
    "end": "746160"
  },
  {
    "text": "right so uh around the one sixth time frame uh this was added to a number of the",
    "start": "746160",
    "end": "752240"
  },
  {
    "text": "controllers and you can actually see it if you use coupsy tail explain you can see that there's an owner reference and in the highlighted text",
    "start": "752240",
    "end": "758959"
  },
  {
    "text": "here we point out that if the object is managed by a controller then there's a",
    "start": "758959",
    "end": "764240"
  },
  {
    "text": "subfield called controller that is set to true and of course we use cube ctl explain again to show that",
    "start": "764240",
    "end": "770480"
  },
  {
    "text": "so really uh label overlaps really only occur with standalone pods not pods that come under",
    "start": "770480",
    "end": "779360"
  },
  {
    "text": "a controller already like from the very beginning but then of course once the standalone pod is taken over by a",
    "start": "779360",
    "end": "784880"
  },
  {
    "text": "controller it actually receives the owner reference and that's why we saw when we deployed the second rs",
    "start": "784880",
    "end": "792160"
  },
  {
    "text": "the first rs had updated the pod to give it that owner reference",
    "start": "792160",
    "end": "797680"
  },
  {
    "text": "so there's no way that the second rs could have taken control over it",
    "start": "797680",
    "end": "804320"
  },
  {
    "text": "now what about other controllers things like daemon sets staple sets jobs and cron jobs",
    "start": "804320",
    "end": "809360"
  },
  {
    "text": "each one of these controllers has implemented some kind of labeling scheme that allows them to",
    "start": "809360",
    "end": "817120"
  },
  {
    "text": "avoid any sort of collisions with standalone pods and of course",
    "start": "817120",
    "end": "823360"
  },
  {
    "text": "pods that have been deployed by a given controller have that owner reference as well so",
    "start": "823360",
    "end": "830000"
  },
  {
    "text": "it's not just deployments and rs's but each one of these controllers have had that owner reference",
    "start": "830000",
    "end": "838160"
  },
  {
    "text": "added to them over time but we can see like deployment based pods the damon set",
    "start": "838160",
    "end": "844240"
  },
  {
    "text": "pods are given a hash label a staple set pods are given both a hash label and a pod name label",
    "start": "844240",
    "end": "850800"
  },
  {
    "text": "so an extra label for staple set pods and then jobs and cron jobs the pods controlled by these are given a",
    "start": "850800",
    "end": "858800"
  },
  {
    "text": "unique label related to their controller's id uh just some thoughts about how we could",
    "start": "858800",
    "end": "863920"
  },
  {
    "text": "use this could those dynamic labels be used in a standalone pod",
    "start": "863920",
    "end": "869440"
  },
  {
    "text": "let's say you wanted to bring a pod of course the controller is trying to",
    "start": "869440",
    "end": "875120"
  },
  {
    "text": "avoid inadvertent control but maybe this is a desired behavior right",
    "start": "875120",
    "end": "880160"
  },
  {
    "text": "uh yeah you could you could add a dynamic [Music]",
    "start": "880160",
    "end": "885519"
  },
  {
    "text": "pod template hash for example to a pod that you wanted to add to a deployment",
    "start": "885519",
    "end": "891040"
  },
  {
    "text": "after the fact so you could use the label command on that pod",
    "start": "891040",
    "end": "896320"
  },
  {
    "text": "with some caveats uh if the deployment was created first and all of its pods were deployed first",
    "start": "896320",
    "end": "903360"
  },
  {
    "text": "when you added the standalone pod if you ran it subsequently and then labeled it the replica set is",
    "start": "903360",
    "end": "910560"
  },
  {
    "text": "basically gonna kill it because it's last in first out and so you actually have to create the pod first and you saw me do that in the",
    "start": "910560",
    "end": "917199"
  },
  {
    "text": "demo with the rss i created the pod first and then i created the rs with the three replicas",
    "start": "917199",
    "end": "924399"
  },
  {
    "text": "right that's because if i created the rs first and then ran the pod the rs would have",
    "start": "924399",
    "end": "931440"
  },
  {
    "text": "seen the mismatch between the desired and current and just killed the one that was the newest you have to",
    "start": "931440",
    "end": "937600"
  },
  {
    "text": "make sure that your pod that you want to add to your deployment is older",
    "start": "937600",
    "end": "942800"
  },
  {
    "text": "and then if you're using something like a deployment a rolling update will essentially",
    "start": "942800",
    "end": "949279"
  },
  {
    "text": "replace that standalone pod with a pod based on the template so",
    "start": "949279",
    "end": "954800"
  },
  {
    "text": "you'll lose that pod and one of the ones from the template will come in its place with the change a work",
    "start": "954800",
    "end": "962320"
  },
  {
    "text": "around could be to basically disable that right so you can do a rollout pause on the deployment",
    "start": "962320",
    "end": "969360"
  },
  {
    "text": "even if config changes happened of course the rolling up update would not trigger",
    "start": "969360",
    "end": "975680"
  },
  {
    "text": "but it's kind of a lose-lose right because either you're going to lose your standalone pod when the rolling update",
    "start": "975680",
    "end": "981839"
  },
  {
    "text": "triggers or you're basically losing the rolling update feature so yeah you can do it but you know there's",
    "start": "981839",
    "end": "989279"
  },
  {
    "text": "lots of caveats in place so moving on from controllers",
    "start": "989279",
    "end": "995120"
  },
  {
    "text": "or application controllers we want to look at another type of controller which is this",
    "start": "995120",
    "end": "1000480"
  },
  {
    "text": "a services endpoints controller so in this case the controller is used to target a set of pods",
    "start": "1000480",
    "end": "1007680"
  },
  {
    "text": "and create a pool of ips for load balancing so that we can load balance client and peer",
    "start": "1007680",
    "end": "1012880"
  },
  {
    "text": "requests to a set of backends unlike other controllers that we've",
    "start": "1012880",
    "end": "1018480"
  },
  {
    "text": "looked at before the services or the the endpoints controller",
    "start": "1018480",
    "end": "1023759"
  },
  {
    "text": "can only support a quality-based selector so you can't do group a selection here in this demo i've broken up the",
    "start": "1023759",
    "end": "1029600"
  },
  {
    "text": "terminals into three parts because what i want to do is first i want to establish a watch",
    "start": "1029600",
    "end": "1036160"
  },
  {
    "text": "for all the objects we're going to use so we're going to use a deployment we're going to expose that deployment with a service and then we're going to",
    "start": "1036160",
    "end": "1042000"
  },
  {
    "text": "use a standalone pod and we're going to again have label overlaps",
    "start": "1042000",
    "end": "1047520"
  },
  {
    "text": "on purpose to show how the behavior of service selectors",
    "start": "1047520",
    "end": "1052799"
  },
  {
    "text": "work so of course nothing just yet we will uh",
    "start": "1052799",
    "end": "1057840"
  },
  {
    "text": "run our client pod so in this case it's just a",
    "start": "1057840",
    "end": "1064240"
  },
  {
    "text": "busy box so i can get a shell and run a loop now in this case i'm",
    "start": "1064240",
    "end": "1070240"
  },
  {
    "text": "going to grab the loop",
    "start": "1070240",
    "end": "1075760"
  },
  {
    "text": "here and paste it in and so we're just going to query the service called kc and of",
    "start": "1075760",
    "end": "1083360"
  },
  {
    "text": "course we don't have one yet so let's create",
    "start": "1083360",
    "end": "1088480"
  },
  {
    "text": "the deployment and the plan is just going to be called kc again using the host info",
    "start": "1088480",
    "end": "1094240"
  },
  {
    "text": "image to give us the host names give us three replicas so just basic deployment and then we'll",
    "start": "1094240",
    "end": "1101760"
  },
  {
    "text": "expose it so in this case again we're just exposing the kc deployment",
    "start": "1101760",
    "end": "1107360"
  },
  {
    "text": "mapping the port that it listens on to a standard port to make things",
    "start": "1107360",
    "end": "1112559"
  },
  {
    "text": "simple now that i have the service established i can start my query",
    "start": "1112559",
    "end": "1118240"
  },
  {
    "text": "but what i want to do first is run a standalone pod that has a similar",
    "start": "1118240",
    "end": "1124160"
  },
  {
    "text": "label so we can see this service is using app equals kc as the selector",
    "start": "1124160",
    "end": "1130960"
  },
  {
    "text": "and so we'll run another pod using the same image because i want to see the host name of course",
    "start": "1130960",
    "end": "1138480"
  },
  {
    "text": "as part of the demo and then label it so that it falls underneath the uh the service and so we'll run this",
    "start": "1138480",
    "end": "1146799"
  },
  {
    "text": "loop oh and the very first uh request goes to our standalone plot right so",
    "start": "1146799",
    "end": "1154080"
  },
  {
    "text": "um of course we're uh randomizing our load balancing with a with a normal",
    "start": "1154080",
    "end": "1159760"
  },
  {
    "text": "service so what that means is like unlike other controllers that we've seen",
    "start": "1159760",
    "end": "1165280"
  },
  {
    "text": "the endpoints controller does not try to avoid any sort of selector overlap so of course this could be",
    "start": "1165280",
    "end": "1171440"
  },
  {
    "text": "problematic if unrelated uh an unrelated pod or",
    "start": "1171440",
    "end": "1176640"
  },
  {
    "text": "unrelated groups of pods inadvertently end up under a given service but",
    "start": "1176640",
    "end": "1182320"
  },
  {
    "text": "the nice thing is we can actually use this to our advantage because application controllers support",
    "start": "1182320",
    "end": "1188640"
  },
  {
    "text": "the implicit config change trigger and rolling update features but they don't really expose other",
    "start": "1188640",
    "end": "1195840"
  },
  {
    "text": "strategies so like blue green highlander dark or canary the staple set controller does have a",
    "start": "1195840",
    "end": "1202960"
  },
  {
    "text": "partition where you could do a canary but what if you don't have a staple application you have a stateless one and",
    "start": "1202960",
    "end": "1208960"
  },
  {
    "text": "you want to use a deployment controller well this is where we can use the service selector to our advantage",
    "start": "1208960",
    "end": "1217039"
  },
  {
    "text": "for the blue green strategy we will start with a an existing",
    "start": "1217039",
    "end": "1224320"
  },
  {
    "text": "deployment of pods but we're not going to use the deployment controller this is because we're going to need to",
    "start": "1224320",
    "end": "1230159"
  },
  {
    "text": "make subsequent edits to the pod template if you're familiar",
    "start": "1230159",
    "end": "1236559"
  },
  {
    "text": "with the rolling update you know that that comes with the deployment you know that",
    "start": "1236559",
    "end": "1241679"
  },
  {
    "text": "when you make changes to a pod template in a deployment controller the implicit config change trigger fires",
    "start": "1241679",
    "end": "1249039"
  },
  {
    "text": "and you're going to have rolling update but we don't want that strategy so we're going to use replica sets directly",
    "start": "1249039",
    "end": "1254960"
  },
  {
    "text": "create a service that is going to use a selector that can be shared between",
    "start": "1254960",
    "end": "1260080"
  },
  {
    "text": "two groups of pods the the blue and the green and then uh we will add the label that",
    "start": "1260080",
    "end": "1266799"
  },
  {
    "text": "common label that we're gonna use with this the service selector to the pod subsequently so you can see the replica set uh on the",
    "start": "1266799",
    "end": "1274559"
  },
  {
    "text": "left here has a single label demo equals blue rs and then we're just going to use the",
    "start": "1274559",
    "end": "1279760"
  },
  {
    "text": "label command to add the pod uh labels directly so once we've got the",
    "start": "1279760",
    "end": "1285120"
  },
  {
    "text": "blue pods in place you know we've got them running for some time right we want to do an update to the",
    "start": "1285120",
    "end": "1291520"
  },
  {
    "text": "application then we create a second rs in this case we're",
    "start": "1291520",
    "end": "1296960"
  },
  {
    "text": "changing the image from the alpine version to the latest version we deploy the green rs and pods and",
    "start": "1296960",
    "end": "1304000"
  },
  {
    "text": "if you want to do a dark strategy here we just don't immediately add the labels to the green ponds",
    "start": "1304000",
    "end": "1311600"
  },
  {
    "text": "and we kind of let them warm up in the background and then subsequently",
    "start": "1311600",
    "end": "1317679"
  },
  {
    "text": "we will then add the labels using the label command to the to the green pods and we'll have",
    "start": "1317679",
    "end": "1324960"
  },
  {
    "text": "a big pool where the blue pods and the green pods are all going to be rolled up under the service we can't",
    "start": "1324960",
    "end": "1332080"
  },
  {
    "text": "immediately remove the label from the blue pods because remember that controllers and kubernetes",
    "start": "1332080",
    "end": "1337440"
  },
  {
    "text": "have eventual consistency so the endpoint controller is going to take a minute to",
    "start": "1337440",
    "end": "1343200"
  },
  {
    "text": "not a literal minute but uh it won't be immediate right to update",
    "start": "1343200",
    "end": "1349760"
  },
  {
    "text": "itself um get the all the pod ips and cooperox is going to need to implement this so in",
    "start": "1349760",
    "end": "1355600"
  },
  {
    "text": "our case we're using the default configuration of coup proxy which is using ip tables and of course",
    "start": "1355600",
    "end": "1361200"
  },
  {
    "text": "cuproxy has to go and do that work there needs to be a little bit of overlap during this period you're going to see",
    "start": "1361200",
    "end": "1366480"
  },
  {
    "text": "that both blue and green pods are behind the load balancer",
    "start": "1366480",
    "end": "1371840"
  },
  {
    "text": "once we're satisfied that we have enough endpoints behind the service then we can simply",
    "start": "1371840",
    "end": "1379280"
  },
  {
    "text": "again use the label command to remove the labels from the blue pods and the",
    "start": "1379280",
    "end": "1385440"
  },
  {
    "text": "traffic will just be directed to the green ones we can retain the blue pods for roll back or undo if something",
    "start": "1385440",
    "end": "1392480"
  },
  {
    "text": "is wrong with green or if you want to go the highlander strategy route you can immediately",
    "start": "1392480",
    "end": "1399520"
  },
  {
    "text": "remove the blue rs pods after removing those labels so let's take a look at a demo of this",
    "start": "1399520",
    "end": "1405760"
  },
  {
    "text": "particular strategy so again we're just going to watch deployments",
    "start": "1405760",
    "end": "1410960"
  },
  {
    "text": "replica sets pods and services see all the things that we have deployed nothing right now we're",
    "start": "1410960",
    "end": "1417760"
  },
  {
    "text": "also going to run a client so we can actually see again we'll use the host info image so we can see those",
    "start": "1417760",
    "end": "1425120"
  },
  {
    "text": "hostnames come back so i'll start the client right now you'll see it creating and then we'll again",
    "start": "1425120",
    "end": "1433679"
  },
  {
    "text": "have another loop going just copy that the service is going to be called blue",
    "start": "1433679",
    "end": "1439200"
  },
  {
    "text": "green so we'll query that but we're going to wait so first let's",
    "start": "1439200",
    "end": "1446000"
  },
  {
    "text": "apply our blue rs",
    "start": "1446000",
    "end": "1453039"
  },
  {
    "text": "and it's identical to the blue rs we saw in the slides and so it just has",
    "start": "1457360",
    "end": "1463919"
  },
  {
    "text": "the one label right now demo equals blue rs we will then",
    "start": "1463919",
    "end": "1469520"
  },
  {
    "text": "also apply our blue green service",
    "start": "1469520",
    "end": "1475200"
  },
  {
    "text": "and the selector we're using is going to be method equal to blue green so right now the",
    "start": "1479200",
    "end": "1484320"
  },
  {
    "text": "service isn't going to have any uh pods behind it and we can confirm that",
    "start": "1484320",
    "end": "1492080"
  },
  {
    "text": "uh with the endpoints and of course the blue green service has",
    "start": "1492080",
    "end": "1497919"
  },
  {
    "text": "no endpoints but if we label",
    "start": "1497919",
    "end": "1503039"
  },
  {
    "text": "try that again we're going to label pods that have the current label",
    "start": "1504720",
    "end": "1512960"
  },
  {
    "text": "demo equals blue rs which is our rs pods so we're going to pass that command to",
    "start": "1512960",
    "end": "1519840"
  },
  {
    "text": "the label command and then add the method blue green so we'll have some pods that will be",
    "start": "1519840",
    "end": "1526000"
  },
  {
    "text": "behind that service and down below you can see that we've got the now we've got the blue green",
    "start": "1526000",
    "end": "1531760"
  },
  {
    "text": "and we can repeat our get endpoints and of course we've got some endpoints for the",
    "start": "1531760",
    "end": "1536799"
  },
  {
    "text": "blue green service now now i can start my client loop and of course we get the blue rss so",
    "start": "1536799",
    "end": "1543919"
  },
  {
    "text": "we've got our blue version of the application deployed and we need to",
    "start": "1543919",
    "end": "1549440"
  },
  {
    "text": "then add the green let's go back to the apply and",
    "start": "1549440",
    "end": "1557679"
  },
  {
    "text": "use the green rs like we saw on the slides",
    "start": "1557679",
    "end": "1563039"
  },
  {
    "text": "right and so again we've just got the demo equals green rs labels for these pods so of course we",
    "start": "1563039",
    "end": "1570000"
  },
  {
    "text": "wouldn't expect them to be under the service right away now we can use that same label command that we used here",
    "start": "1570000",
    "end": "1578880"
  },
  {
    "text": "uh just change the demo blue rs to green",
    "start": "1578880",
    "end": "1585840"
  },
  {
    "text": "and this will add the method blue green to our green pods",
    "start": "1588000",
    "end": "1595679"
  },
  {
    "text": "and we'll start to see them show up in the load balancing with the client on the right once i hit enter here we go",
    "start": "1595679",
    "end": "1603200"
  },
  {
    "text": "so now we've got some green mixed in with our blue so the endpoints controller is updated q proxy",
    "start": "1606080",
    "end": "1612480"
  },
  {
    "text": "has implemented the new targets and we've got the blue and the green mixed in",
    "start": "1612480",
    "end": "1619039"
  },
  {
    "text": "and then we can go ahead and remove the label uh actually we'll go do this one and",
    "start": "1619039",
    "end": "1627120"
  },
  {
    "text": "syntax is just label but method minus that will remove",
    "start": "1627120",
    "end": "1634880"
  },
  {
    "text": "the label that we don't want from the blue rss",
    "start": "1634880",
    "end": "1641840"
  },
  {
    "text": "and there we go now our load balancer is just sending traffic to only our green pods lastly here we",
    "start": "1644720",
    "end": "1650880"
  },
  {
    "text": "can do a canary experiment using similar technique so in this case",
    "start": "1650880",
    "end": "1656159"
  },
  {
    "text": "we can actually use deployments and you absolutely can use rss2 so your production let's say your",
    "start": "1656159",
    "end": "1662080"
  },
  {
    "text": "production set of pods is using a deployment and",
    "start": "1662080",
    "end": "1667520"
  },
  {
    "text": "we're not going to really do that many or really any edits to the production what we're going to do is add baseline and canary so",
    "start": "1667520",
    "end": "1673760"
  },
  {
    "text": "it sort of depends on how you want to do it so we can use a deployment with baseline",
    "start": "1673760",
    "end": "1679760"
  },
  {
    "text": "and canary and deploy them with the labels that",
    "start": "1679760",
    "end": "1687039"
  },
  {
    "text": "the endpoints controller is using and they'll just be added to the load bouncing pool or of course you could use",
    "start": "1687039",
    "end": "1692080"
  },
  {
    "text": "rss deploy the pods first and then use the technique we used in the blue green",
    "start": "1692080",
    "end": "1698399"
  },
  {
    "text": "adding the labels subsequently it's really up to you how you want to do it but either way you",
    "start": "1698399",
    "end": "1704720"
  },
  {
    "text": "can achieve a canary experiment okay again we're just going to watch deployments rss pods",
    "start": "1704720",
    "end": "1709840"
  },
  {
    "text": "and services this case i'm going to use the deployment",
    "start": "1709840",
    "end": "1715760"
  },
  {
    "text": "method so i'm not going to use rss which means that my yam manifests",
    "start": "1715760",
    "end": "1721039"
  },
  {
    "text": "for my deployments already have the correct label so we'll run this again we'll run",
    "start": "1721039",
    "end": "1727919"
  },
  {
    "text": "another client here so we can see the load balancing across the production the",
    "start": "1727919",
    "end": "1735120"
  },
  {
    "text": "baseline and then the canary let that go for a minute we'll set up the loop",
    "start": "1735120",
    "end": "1740960"
  },
  {
    "text": "but not start it like we did before so in this case the service is going to be called canary demo",
    "start": "1740960",
    "end": "1748080"
  },
  {
    "text": "so let's actually take a look at some of these so",
    "start": "1748080",
    "end": "1753840"
  },
  {
    "text": "look at our prod first right so the common label that we're going to use",
    "start": "1753919",
    "end": "1759600"
  },
  {
    "text": "is amp equals demo and each one of the deployments is going to have its own release version so",
    "start": "1759600",
    "end": "1766000"
  },
  {
    "text": "if we wanted to let's say query for a particular",
    "start": "1766000",
    "end": "1771360"
  },
  {
    "text": "deployment by its release type we can do that and delete them so i could use like a",
    "start": "1771360",
    "end": "1778840"
  },
  {
    "text": "delete uh minus l and then like pick a release that i wanted to delete so",
    "start": "1778840",
    "end": "1785360"
  },
  {
    "text": "uh same image that we've been using uh up to this point so we'll go ahead",
    "start": "1785360",
    "end": "1792840"
  },
  {
    "text": "and apply that",
    "start": "1792840",
    "end": "1796559"
  },
  {
    "text": "we've got some our production pods rolled out right so let's also look",
    "start": "1802000",
    "end": "1807919"
  },
  {
    "text": "at the service so it is service canary here",
    "start": "1807919",
    "end": "1816880"
  },
  {
    "text": "and so again it's just going to be using the selector of app equals demo and that will be a common label across all of our deployments",
    "start": "1816880",
    "end": "1823760"
  },
  {
    "text": "just a basic service using a cluster ip so we'll apply that",
    "start": "1823760",
    "end": "1836399"
  },
  {
    "text": "ah it would help if i use the word apply",
    "start": "1836399",
    "end": "1841600"
  },
  {
    "text": "right so we've got our service we've got our uh production deployment we'll go ahead",
    "start": "1841919",
    "end": "1848640"
  },
  {
    "text": "and start the the loop here for the client and of course we've got our production pods",
    "start": "1848640",
    "end": "1853919"
  },
  {
    "text": "aptly named so we know how the mix shakes out so now",
    "start": "1853919",
    "end": "1859360"
  },
  {
    "text": "we can look at our baseline",
    "start": "1859360",
    "end": "1865519"
  },
  {
    "text": "and uh very similar uh it's using the same release which is the alpine release right uh it should be the same release version",
    "start": "1865519",
    "end": "1873039"
  },
  {
    "text": "or whatever experiment you're gonna do right should be identical to the production version",
    "start": "1873039",
    "end": "1879519"
  },
  {
    "text": "and then we'll also look at the canary",
    "start": "1879519",
    "end": "1884240"
  },
  {
    "text": "right so in this case we're again doing the uh update of the image from the alpine",
    "start": "1884960",
    "end": "1891919"
  },
  {
    "text": "version to the latest and you can see that these pods are going to have the apicals demo",
    "start": "1891919",
    "end": "1898320"
  },
  {
    "text": "label too so they can fall underneath the service now in this case i'm going",
    "start": "1898399",
    "end": "1904559"
  },
  {
    "text": "to do applies at the same time so we have an honest experiment",
    "start": "1904559",
    "end": "1910240"
  },
  {
    "text": "because we don't want to have an experiment where we deploy one first that would not be a",
    "start": "1912480",
    "end": "1919279"
  },
  {
    "text": "proper experiment so we'll apply baseline and we'll apply canary",
    "start": "1919279",
    "end": "1927200"
  },
  {
    "text": "at the same time now we've got a whole bunch of pods some",
    "start": "1927200",
    "end": "1932559"
  },
  {
    "text": "of which uh coming off the screen a little bit so we'll move this up and we can already see on the load balancing here on the",
    "start": "1932559",
    "end": "1937600"
  },
  {
    "text": "right that uh the canary uh pod has been queried a couple times and",
    "start": "1937600",
    "end": "1945360"
  },
  {
    "text": "there's our baseline right so we've got a mix of canary baseline and production and of",
    "start": "1945360",
    "end": "1950640"
  },
  {
    "text": "course uh while the clients are communicating with the various uh releases",
    "start": "1950640",
    "end": "1958320"
  },
  {
    "text": "right we can collect all of our metrics uh uh measure",
    "start": "1958320",
    "end": "1965679"
  },
  {
    "text": "and then determine whether or not the um the experiment is a pass or fail based",
    "start": "1965679",
    "end": "1971120"
  },
  {
    "text": "on whatever we're trying to prove right like does the change to the",
    "start": "1971120",
    "end": "1976880"
  },
  {
    "text": "image uh introduce more latency to the application right are there more error rates or whatever it might be",
    "start": "1976880",
    "end": "1983279"
  },
  {
    "text": "right and then at the end of this what we'll do then is simply uh",
    "start": "1983279",
    "end": "1991279"
  },
  {
    "text": "say oh okay well the let's say the canary experiment was a success and so this is a long command i'm just",
    "start": "1991279",
    "end": "1997360"
  },
  {
    "text": "going to copy and paste it from some notes i've got here and so we're going to delete the baseline",
    "start": "1997360",
    "end": "2003200"
  },
  {
    "text": "we're going to delete the canary and then we're going to set the image for the production deployment to the",
    "start": "2003200",
    "end": "2009679"
  },
  {
    "text": "latest because the canary was successful so we want to update the version what you'll see",
    "start": "2009679",
    "end": "2014720"
  },
  {
    "text": "is the rs hash for the production pods in the load balancing",
    "start": "2014720",
    "end": "2021760"
  },
  {
    "text": "will transition from the 5f hash to the new hash so let's go ahead and trigger that",
    "start": "2021760",
    "end": "2027919"
  },
  {
    "text": "change ah you know what i need to do is",
    "start": "2027919",
    "end": "2034399"
  },
  {
    "text": "um do the right path for this delete well we're doing the rolling update",
    "start": "2034399",
    "end": "2040640"
  },
  {
    "text": "right so there's the new hash for production and i just need to give the full paths",
    "start": "2040640",
    "end": "2047039"
  },
  {
    "text": "for these guys so",
    "start": "2047039",
    "end": "2050560"
  },
  {
    "text": "and we'll get them out of there right so ideally of course we do that",
    "start": "2052399",
    "end": "2059040"
  },
  {
    "text": "all at the same time really wouldn't hurt if it wasn't all at the same time",
    "start": "2059040",
    "end": "2064720"
  },
  {
    "text": "like we did there but of course we delete the baseline in the canary and we've got our",
    "start": "2064720",
    "end": "2071919"
  },
  {
    "text": "new production deployment based on a successful test and that brings us to the end i just",
    "start": "2071919",
    "end": "2077599"
  },
  {
    "text": "want to say thank you for your time come find us over at rxm.com",
    "start": "2077599",
    "end": "2083040"
  },
  {
    "text": "we have quite a few training courses that are available as open enrollments or",
    "start": "2083040",
    "end": "2088560"
  },
  {
    "text": "also private trainings with teams we even have certification boot camps and self-study so if you're looking to",
    "start": "2088560",
    "end": "2095040"
  },
  {
    "text": "take the ccad the cka or the cks we've got you covered once again thank",
    "start": "2095040",
    "end": "2100480"
  },
  {
    "text": "you and enjoy the rest of the show",
    "start": "2100480",
    "end": "2105839"
  }
]