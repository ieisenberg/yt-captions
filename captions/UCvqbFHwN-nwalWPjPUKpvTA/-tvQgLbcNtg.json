[
  {
    "text": "alright let's get started thank you everyone for coming to our talk inside Katy native serving I am Andrew Chen I'm",
    "start": "30",
    "end": "7259"
  },
  {
    "text": "a program manager and a technical writer and with me is Dominick tour now a principal engineer so for the past year",
    "start": "7259",
    "end": "15420"
  },
  {
    "text": "we've been working together to try to figure out why kubernetes is so hard to understand when I started as a Technical",
    "start": "15420",
    "end": "21900"
  },
  {
    "text": "Writer over two years ago I was bombarded with terms such as control plane data plane kubernetes object",
    "start": "21900",
    "end": "28769"
  },
  {
    "text": "controller ingress you know and the list goes on and on all right I had at my disposal all of the",
    "start": "28769",
    "end": "35820"
  },
  {
    "text": "committee's documentation yet I still lacked a big picture understanding of how everything worked together was it",
    "start": "35820",
    "end": "43140"
  },
  {
    "text": "because I didn't read all the source code who even has the time to do that and do you even believe that it's",
    "start": "43140",
    "end": "49559"
  },
  {
    "text": "possible to understand a software system without examining its source code well Dominic showed me that there is",
    "start": "49559",
    "end": "55770"
  },
  {
    "text": "another way it's called systems modeling so for the past year we've been writing",
    "start": "55770",
    "end": "61020"
  },
  {
    "text": "blog posts using formal and conceptual models to help people better understand how kubernetes works so that they may",
    "start": "61020",
    "end": "67710"
  },
  {
    "text": "reason about its behavior with confidence so we're applying this methodology now to K native serving so",
    "start": "67710",
    "end": "76049"
  },
  {
    "text": "that you may understand K native better and what makes this presentation a little different than others you may see",
    "start": "76049",
    "end": "81750"
  },
  {
    "text": "is that we're not going to show you source code we're not going to show you a console we're not going to do a demo",
    "start": "81750",
    "end": "87390"
  },
  {
    "text": "we're just going to be showing you systems models and yet you should still be able to walk away today with the",
    "start": "87390",
    "end": "94200"
  },
  {
    "text": "crystal clear understanding of how cane ativ serving works and without further",
    "start": "94200",
    "end": "99479"
  },
  {
    "text": "delay here is dominic turnout to talk about cane and is serving thanks Angela",
    "start": "99479",
    "end": "106850"
  },
  {
    "text": "thank you if you heard of K native before you probably heard that K native",
    "start": "109070",
    "end": "116130"
  },
  {
    "text": "is a kubernetes extension designed to manage service applications this",
    "start": "116130",
    "end": "121799"
  },
  {
    "text": "statement about K native is correct however this statement does not describe K native well k native is a kubernetes",
    "start": "121799",
    "end": "129660"
  },
  {
    "text": "extension a kubernetes extension is a collection of custom controllers and",
    "start": "129660",
    "end": "135360"
  },
  {
    "text": "custom resource definitions that an ember that enable new use cases on top",
    "start": "135360",
    "end": "141360"
  },
  {
    "text": "of kubernetes if you hear members of the kubernetes community safe kubernetes is",
    "start": "141360",
    "end": "146910"
  },
  {
    "text": "a platform to build a platform they're talking about kubernetes extensions Kay",
    "start": "146910",
    "end": "153780"
  },
  {
    "text": "native is in fact a collection of three kubernetes extensions candidate build k",
    "start": "153780",
    "end": "159510"
  },
  {
    "text": "native serving and k native eventing in combination k native is not just a server list",
    "start": "159510",
    "end": "166680"
  },
  {
    "text": "extension but it is a zero operations extension for reactive micro service",
    "start": "166680",
    "end": "172170"
  },
  {
    "text": "applications hosted on kubernetes zero ops also called no ops or more formally",
    "start": "172170",
    "end": "180630"
  },
  {
    "text": "operation automation refers to the fact that most or all tasks which are",
    "start": "180630",
    "end": "187680"
  },
  {
    "text": "required to operate an application are performed by the system not performed by",
    "start": "187680",
    "end": "193260"
  },
  {
    "text": "the developer today we will discuss K native serving in particular we will",
    "start": "193260",
    "end": "199799"
  },
  {
    "text": "discuss two aspects canada serving as a zero operations extension for the",
    "start": "199799",
    "end": "205530"
  },
  {
    "text": "lifecycle management of reactive micro services and k native serving as a",
    "start": "205530",
    "end": "210720"
  },
  {
    "text": "server list extension to understand the benefits of canada serving we need to",
    "start": "210720",
    "end": "217470"
  },
  {
    "text": "shift our point of view from an architectural perspective to an operational perspective from an",
    "start": "217470",
    "end": "225120"
  },
  {
    "text": "architectural perspective a reactive micro service is an individual stateless",
    "start": "225120",
    "end": "230850"
  },
  {
    "text": "component the processes individual requests micro services are located",
    "start": "230850",
    "end": "237900"
  },
  {
    "text": "behind the Gateway the Gateway is responsible for traffic management the Gateway acts as a reverse",
    "start": "237900",
    "end": "244570"
  },
  {
    "text": "proxy routing a request from a service consumer to the correct service provider",
    "start": "244570",
    "end": "252030"
  },
  {
    "text": "from an operational perspective for each micro service there exists at least one",
    "start": "255000",
    "end": "260920"
  },
  {
    "text": "version also called revision in order to",
    "start": "260920",
    "end": "266800"
  },
  {
    "text": "release the initial revision of a service you have to perform two steps first you have to deploy the revision to",
    "start": "266800",
    "end": "276720"
  },
  {
    "text": "deploy a revision you have to create a workload specification a workload",
    "start": "277410",
    "end": "283200"
  },
  {
    "text": "specification is a set of resources that specify how to process requests and by",
    "start": "283200",
    "end": "289990"
  },
  {
    "text": "the way if you are thinking workload specification that sounds like pod specification in essence you are correct",
    "start": "289990",
    "end": "298170"
  },
  {
    "text": "second you have to roll out the revision",
    "start": "298170",
    "end": "303420"
  },
  {
    "text": "to roll out a revision you have to create a traffic split specification a",
    "start": "306439",
    "end": "311449"
  },
  {
    "text": "traffic split specification is a set of resources that specify how to route",
    "start": "311449",
    "end": "316759"
  },
  {
    "text": "requests and now if you are thinking traffic split specification that sounds",
    "start": "316759",
    "end": "322009"
  },
  {
    "text": "like ingress specification again in essence you are correct here all traffic",
    "start": "322009",
    "end": "328009"
  },
  {
    "text": "splits are probabilistic traffic splits in order to release the next revision of",
    "start": "328009",
    "end": "334369"
  },
  {
    "text": "a service you have to repeat these steps first you have to deploy the new",
    "start": "334369",
    "end": "340069"
  },
  {
    "text": "revision second you have to roll out the revision with a probabilistic traffic",
    "start": "340069",
    "end": "347839"
  },
  {
    "text": "split you have two options to do a rollout you may choose an immediate",
    "start": "347839",
    "end": "352849"
  },
  {
    "text": "rollout or you may choose a gradual rollout to perform an immediate rollout",
    "start": "352849",
    "end": "359779"
  },
  {
    "text": "you have to update the traffic split specification only once shifting all",
    "start": "359779",
    "end": "365300"
  },
  {
    "text": "requests from the current to the next revision in an instant",
    "start": "365300",
    "end": "371110"
  },
  {
    "text": "to perform a gradual rollout you have to update the traffic split specification multiple times shifting all requests",
    "start": "378400",
    "end": "385630"
  },
  {
    "text": "from the current to the next revision over a period of time",
    "start": "385630",
    "end": "390870"
  },
  {
    "text": "as an operator of a micro service you are locked in an endless tedious cycle",
    "start": "399260",
    "end": "405350"
  },
  {
    "text": "of deployments and rollouts and if this dire situation does not ask for automation nothing else does but let's",
    "start": "405350",
    "end": "412970"
  },
  {
    "text": "not get ahead of ourselves so far we talked about micro services",
    "start": "412970",
    "end": "418310"
  },
  {
    "text": "but we did not talk about kubernetes and we did not talk about Canada's yet well",
    "start": "418310",
    "end": "424340"
  },
  {
    "text": "let's talk about kubernetes first kubernetes is a prominent platform for",
    "start": "424340",
    "end": "429620"
  },
  {
    "text": "hosting micro services kubernetes provides an extensive set of very",
    "start": "429620",
    "end": "435980"
  },
  {
    "text": "rounded abstractions to compose a micro service however kubernetes does not",
    "start": "435980",
    "end": "441950"
  },
  {
    "text": "provide a dedicated abstraction for a micro service simply put kubernetes",
    "start": "441950",
    "end": "447950"
  },
  {
    "text": "gives us everything we need but we have to piece everything together ourselves",
    "start": "447950",
    "end": "453530"
  },
  {
    "text": "and there are many options to choose from turns out the most prominent is",
    "start": "453530",
    "end": "460670"
  },
  {
    "text": "also the most basic pattern here one micro service is represented by",
    "start": "460670",
    "end": "466730"
  },
  {
    "text": "composing four kinds of objects a kubernetes deployment a kubernetes",
    "start": "466730",
    "end": "473090"
  },
  {
    "text": "horizontal pod autoscaler a kubernetes service and o kubernetes ingress deployment and HP a represent",
    "start": "473090",
    "end": "483110"
  },
  {
    "text": "the workload specification service and ingress represent the traffic split specification in order to release the",
    "start": "483110",
    "end": "492500"
  },
  {
    "text": "initial revision the developer has to create a deployment object a horizontal",
    "start": "492500",
    "end": "497630"
  },
  {
    "text": "port or a scalar object a service object and an ingress object in order to",
    "start": "497630",
    "end": "504440"
  },
  {
    "text": "release a subsequent revision the developer has to update the deployment object again the basic pattern from an",
    "start": "504440",
    "end": "513919"
  },
  {
    "text": "actions point of view in order to release the initial revision of a micro",
    "start": "513920",
    "end": "520490"
  },
  {
    "text": "service the developer has to create a deployment object a horizontal port order scalar object an ingress object",
    "start": "520490",
    "end": "526370"
  },
  {
    "text": "and a service object in order to release a subsequent",
    "start": "526370",
    "end": "531540"
  },
  {
    "text": "vision the developer has to update the deployment object this pattern is simple",
    "start": "531540",
    "end": "536880"
  },
  {
    "text": "to implement and simple to operate however the developer has limited control over the rollout that is limited",
    "start": "536880",
    "end": "544680"
  },
  {
    "text": "control over the traffic split specification this diagram illustrates",
    "start": "544680",
    "end": "550079"
  },
  {
    "text": "in mechanics of the traffic split specification of the basic pattern here we have one microservice that is",
    "start": "550079",
    "end": "556800"
  },
  {
    "text": "currently in rollout that is traffic is shifted from deployment number one",
    "start": "556800",
    "end": "562440"
  },
  {
    "text": "replica set number one to deployment number one replica set number two kubernetes ingress directs all requests",
    "start": "562440",
    "end": "570360"
  },
  {
    "text": "that are bound to one micro service to one kubernetes service in turn the",
    "start": "570360",
    "end": "576360"
  },
  {
    "text": "kubernetes service directs request to matching parts with equal probability in",
    "start": "576360",
    "end": "582839"
  },
  {
    "text": "summary traffic split is implicit in effect determined solely by the",
    "start": "582839",
    "end": "589279"
  },
  {
    "text": "kubernetes service and dependent on the number of ports per replica set for",
    "start": "589279",
    "end": "595050"
  },
  {
    "text": "example here if there are three parts in replica set number one and three parts",
    "start": "595050",
    "end": "600810"
  },
  {
    "text": "in replica set number two the resulting traffic split is 50/50 to grant the",
    "start": "600810",
    "end": "609029"
  },
  {
    "text": "developer full control over the traffic split specification a more advanced",
    "start": "609029",
    "end": "614310"
  },
  {
    "text": "pattern emerged here again one micro service is represented by composing four",
    "start": "614310",
    "end": "620339"
  },
  {
    "text": "different kinds of objects a kubernetes deployment a kubernetes horizontal pod autoscaler",
    "start": "620339",
    "end": "625470"
  },
  {
    "text": "a kubernetes service and an sto virtual service deployment and HP a represent",
    "start": "625470",
    "end": "633600"
  },
  {
    "text": "the workload specification service and virtual service represent the traffic",
    "start": "633600",
    "end": "638970"
  },
  {
    "text": "split specification in order to release the initial revision the developer has",
    "start": "638970",
    "end": "646410"
  },
  {
    "text": "to create a deployment object a horizontal port autoscaler object a service object and an easier virtual",
    "start": "646410",
    "end": "652949"
  },
  {
    "text": "service object in order to release a subsequent revision the developer has to",
    "start": "652949",
    "end": "659430"
  },
  {
    "text": "create a new deployment object a new horizontal pod or a scalar object and a new service object and has to",
    "start": "659430",
    "end": "666240"
  },
  {
    "text": "update the existing sto virtual service object again the advance pattern from an",
    "start": "666240",
    "end": "672899"
  },
  {
    "text": "actions point of view in order to release the initial revision of a micro",
    "start": "672899",
    "end": "678180"
  },
  {
    "text": "service the developer has to create a deployment object a horizontal port or a scalar object a service object and an",
    "start": "678180",
    "end": "684750"
  },
  {
    "text": "sto virtual service object in order to release a subsequent revision the",
    "start": "684750",
    "end": "691560"
  },
  {
    "text": "developer has to create a new deployment object a new horizontal port or the scalar object a new service object and",
    "start": "691560",
    "end": "698279"
  },
  {
    "text": "has to update the existing is your virtual service object in case of an",
    "start": "698279",
    "end": "704189"
  },
  {
    "text": "immediate rollout the developer has to update the ISTE of virtual service only once in case of a gradual rollout the",
    "start": "704189",
    "end": "711420"
  },
  {
    "text": "developer has to update the ischial virtual service multiple times this pattern is still simple to implement but",
    "start": "711420",
    "end": "719790"
  },
  {
    "text": "way more involved to operate however the developer has full control over the",
    "start": "719790",
    "end": "726689"
  },
  {
    "text": "rollout that is full control over the traffic split specification this diagram",
    "start": "726689",
    "end": "733019"
  },
  {
    "text": "illustrates the mechanics of the traffic split specification of the advanced pattern here we have one micro service",
    "start": "733019",
    "end": "739949"
  },
  {
    "text": "that is currently in rollout that is traffic is split from I'm sorry traffic",
    "start": "739949",
    "end": "745079"
  },
  {
    "text": "is shifted from deployment number one replica set number one to deployment number two replica set number one is to",
    "start": "745079",
    "end": "753029"
  },
  {
    "text": "virtual service directs all requests that are bound to one micro service to a",
    "start": "753029",
    "end": "758279"
  },
  {
    "text": "configurable set of kubernetes services in turn the kubernetes service directs",
    "start": "758279",
    "end": "763680"
  },
  {
    "text": "request to matching parts with equal probability in summary traffic split is explicit in",
    "start": "763680",
    "end": "770790"
  },
  {
    "text": "fact determined solely by the ISTE of virtual service so far we had good news",
    "start": "770790",
    "end": "777689"
  },
  {
    "text": "and we have bad news the good news kubernetes is a convenient choice to implement micro service applications the",
    "start": "777689",
    "end": "785100"
  },
  {
    "text": "bad news kubernetes is not a convenient choice to operate micro service applications you have to perform an",
    "start": "785100",
    "end": "792509"
  },
  {
    "text": "involved with edit of sequence of steps for the initial release in every",
    "start": "792509",
    "end": "798029"
  },
  {
    "text": "subsequent release well meet K native serving finally K native serving",
    "start": "798029",
    "end": "805379"
  },
  {
    "text": "automates the sequence of steps for the initial release and every subsequent release of your microservice K native",
    "start": "805379",
    "end": "814079"
  },
  {
    "text": "provides a custom resource definition the K native service object that implements the advanced pattern and",
    "start": "814079",
    "end": "821550"
  },
  {
    "text": "automates its operations when you create a K native service object K native",
    "start": "821550",
    "end": "828949"
  },
  {
    "text": "automatically creates an initial deployment the initial autoscaler the initial service and the sto virtual",
    "start": "828949",
    "end": "836790"
  },
  {
    "text": "service for you please note that K native replaces the horizontal part",
    "start": "836790",
    "end": "842850"
  },
  {
    "text": "autoscaler with a K native pod autoscaler the kubernetes horizontal pod",
    "start": "842850",
    "end": "848009"
  },
  {
    "text": "autoscaler scales instances based on metrics like CPU utilization or memory",
    "start": "848009",
    "end": "853589"
  },
  {
    "text": "utilization the K native pod autoscaler scales instances based on in-flight",
    "start": "853589",
    "end": "859079"
  },
  {
    "text": "request count in addition the k p8 can scale from n to 0 we will go into more",
    "start": "859079",
    "end": "866279"
  },
  {
    "text": "detail in the next section of the presentation when you update a K native",
    "start": "866279",
    "end": "872790"
  },
  {
    "text": "service object K native automatically creates the next deployment the next",
    "start": "872790",
    "end": "878370"
  },
  {
    "text": "autoscaler and the next service and updates is to virtual service for you in",
    "start": "878370",
    "end": "885629"
  },
  {
    "text": "conclusion from an actions point of view K native reduces the operational burden",
    "start": "885629",
    "end": "890970"
  },
  {
    "text": "on the developer in order to release the initial revision of a micro service the",
    "start": "890970",
    "end": "896490"
  },
  {
    "text": "developer simply has to create a K native serving object in turn can ativ",
    "start": "896490",
    "end": "903410"
  },
  {
    "text": "automatically creates a required set of objects",
    "start": "903410",
    "end": "908178"
  },
  {
    "text": "in order to release this subsequent revision the developer simply has to update the tentative serving object and",
    "start": "910440",
    "end": "916889"
  },
  {
    "text": "in turn Canada automatically creates and updates a required set of objects still",
    "start": "916889",
    "end": "924000"
  },
  {
    "text": "in case traffic is shifted immediately the developer updates the key native service once in case traffic is shifted",
    "start": "924000",
    "end": "931470"
  },
  {
    "text": "gradually the developer updates the key native service multiple times let's take",
    "start": "931470",
    "end": "938279"
  },
  {
    "text": "a closer look at the mechanics of Canada's AK a native service object",
    "start": "938279",
    "end": "943879"
  },
  {
    "text": "combines the workload and traffic split specification of your micro service",
    "start": "943879",
    "end": "949490"
  },
  {
    "text": "ultimately the workload specification is your part specification specifying the",
    "start": "949490",
    "end": "954629"
  },
  {
    "text": "image of your service the traffic split specification is the ISTE of virtual",
    "start": "954629",
    "end": "960959"
  },
  {
    "text": "service specification specifying one revision or two revisions with the",
    "start": "960959",
    "end": "966329"
  },
  {
    "text": "traffic split as your traffic target for each K native service there exists",
    "start": "966329",
    "end": "973050"
  },
  {
    "text": "exactly one K native configuration when the service object is created a",
    "start": "973050",
    "end": "978259"
  },
  {
    "text": "configuration object will be created with the services initial workload specification when the workload",
    "start": "978259",
    "end": "985310"
  },
  {
    "text": "specification of the service object is updated the configuration will be updated with the services new workload",
    "start": "985310",
    "end": "992029"
  },
  {
    "text": "specification for each K native configuration there exists at least one",
    "start": "992029",
    "end": "998759"
  },
  {
    "text": "K native revision when the configuration object is created a revision object is",
    "start": "998759",
    "end": "1004579"
  },
  {
    "text": "created with the configurations initial workload specification when the",
    "start": "1004579",
    "end": "1009889"
  },
  {
    "text": "configuration object is updated a new revision object will be created with the",
    "start": "1009889",
    "end": "1014990"
  },
  {
    "text": "configurations new workload specification each revision results in a",
    "start": "1014990",
    "end": "1020149"
  },
  {
    "text": "deployment a K native port autoscaler and a service in addition for each K",
    "start": "1020149",
    "end": "1028188"
  },
  {
    "text": "native service there exists a K native route when the service object is created a route object will be created with the",
    "start": "1028189",
    "end": "1034909"
  },
  {
    "text": "services traffic split specification when the traffic split specification of the service object is updated the route",
    "start": "1034909",
    "end": "1042110"
  },
  {
    "text": "object will be updated with services new traffic split specification and ultimately a route results in an sto",
    "start": "1042110",
    "end": "1050610"
  },
  {
    "text": "virtual service let's take a closer look at the workload specification of your",
    "start": "1050610",
    "end": "1056070"
  },
  {
    "text": "service as stated the workload",
    "start": "1056070",
    "end": "1061559"
  },
  {
    "text": "specification is a part specification you have to specify one image called the",
    "start": "1061559",
    "end": "1067860"
  },
  {
    "text": "user container image that contains your application or more specifically that contains a revision of your application",
    "start": "1067860",
    "end": "1075350"
  },
  {
    "text": "your application must be an HTTP application processing HTTP requests",
    "start": "1075350",
    "end": "1082940"
  },
  {
    "text": "kay native injects another image into the pot specification on creation of the",
    "start": "1085910",
    "end": "1091280"
  },
  {
    "text": "deployment called the cue container image the cue container is a reverse",
    "start": "1091280",
    "end": "1096290"
  },
  {
    "text": "proxy to the user container the cue container intercepts all requests to the",
    "start": "1096290",
    "end": "1101930"
  },
  {
    "text": "user container and is responsible for collecting and reporting statistics namely the in-flight request count to",
    "start": "1101930",
    "end": "1109100"
  },
  {
    "text": "the autoscaler again we will go into more detail in the next section of the presentation so to release the initial",
    "start": "1109100",
    "end": "1118160"
  },
  {
    "text": "revision of a micro service the developer creates a que native service object with an initial workload and an",
    "start": "1118160",
    "end": "1124220"
  },
  {
    "text": "initial traffic split specification in turn can aid of creates a Canadian",
    "start": "1124220",
    "end": "1129620"
  },
  {
    "text": "configuration object with the workload specification in turn can ativ creates a",
    "start": "1129620",
    "end": "1136550"
  },
  {
    "text": "candidate revision object with the workload specification in turn que",
    "start": "1136550",
    "end": "1142730"
  },
  {
    "text": "native creates a deployment object with the workload specification a service and make a native autoscaler additionally",
    "start": "1142730",
    "end": "1150500"
  },
  {
    "text": "que native creates a Canada Froude object with the initial traffic split specification in turn can aid of creates",
    "start": "1150500",
    "end": "1159650"
  },
  {
    "text": "an SEO virtual service with the traffic split specification at this point the",
    "start": "1159650",
    "end": "1165140"
  },
  {
    "text": "initial revision is released and receiving 100% of requests to release",
    "start": "1165140",
    "end": "1171560"
  },
  {
    "text": "the next revision of a micro service the developer updates the kinetic service object here with an updated workload and",
    "start": "1171560",
    "end": "1178400"
  },
  {
    "text": "an updated traffic split specification Canada updates a configuration object",
    "start": "1178400",
    "end": "1183740"
  },
  {
    "text": "and in turn creates a new revision object additionally que native updates a",
    "start": "1183740",
    "end": "1189200"
  },
  {
    "text": "route object and in turn updates a virtual service at this point the next",
    "start": "1189200",
    "end": "1194510"
  },
  {
    "text": "revision is deployed and receiving 100% of requests so we could stop here and",
    "start": "1194510",
    "end": "1201500"
  },
  {
    "text": "enjoy the sweet benefits of operation automation however Canada has one more",
    "start": "1201500",
    "end": "1207470"
  },
  {
    "text": "trick up its sleeve que native serving is able to scale a revision from n to",
    "start": "1207470",
    "end": "1213320"
  },
  {
    "text": "zero an approach that is frequently called serve as computing in a traditional",
    "start": "1213320",
    "end": "1222490"
  },
  {
    "text": "environment resources must be acquired before a request can be received simply",
    "start": "1222490",
    "end": "1230320"
  },
  {
    "text": "put in kubernetes terms if your pod is not up and running yet your application",
    "start": "1230320",
    "end": "1236710"
  },
  {
    "text": "cannot receive requests in a service",
    "start": "1236710",
    "end": "1243190"
  },
  {
    "text": "environment resources may be acquired after a request has been received in",
    "start": "1243190",
    "end": "1248460"
  },
  {
    "text": "kubernetes terms even if your pod is not up and running yet your application may",
    "start": "1248460",
    "end": "1255040"
  },
  {
    "text": "already receive requests typical",
    "start": "1255040",
    "end": "1260800"
  },
  {
    "text": "implementations of a service environment do not release resources after processing a request immediately instead",
    "start": "1260800",
    "end": "1269080"
  },
  {
    "text": "once acquired resources are held in anticipation of additional requests for",
    "start": "1269080",
    "end": "1275500"
  },
  {
    "text": "some period of time code path refers to",
    "start": "1275500",
    "end": "1280990"
  },
  {
    "text": "the situation where receiving a request and processing a request are separated",
    "start": "1280990",
    "end": "1287050"
  },
  {
    "text": "by acquiring resources hot path refers",
    "start": "1287050",
    "end": "1292540"
  },
  {
    "text": "to the situation where receiving a request and processing a request are not",
    "start": "1292540",
    "end": "1298050"
  },
  {
    "text": "separated by acquiring resources but how does key native scale from n20 and if",
    "start": "1298050",
    "end": "1307960"
  },
  {
    "text": "there is no part who is listening to your requests meet the key native",
    "start": "1307960",
    "end": "1316330"
  },
  {
    "text": "serving activator for this walkthrough I assume one key native service service",
    "start": "1316330",
    "end": "1323290"
  },
  {
    "text": "number one to revisions revision number one in revision number two and that the",
    "start": "1323290",
    "end": "1328960"
  },
  {
    "text": "service is currently in roll out that is traffic is split between revisions",
    "start": "1328960",
    "end": "1334470"
  },
  {
    "text": "currently both revision number one and revision number two are scale it to zero",
    "start": "1334470",
    "end": "1342059"
  },
  {
    "text": "now this is a fun part when a request enters the system the",
    "start": "1342059",
    "end": "1347580"
  },
  {
    "text": "Gateway inspects a request determines the service and selects a revision to",
    "start": "1347580",
    "end": "1353670"
  },
  {
    "text": "process the request here I assume the Gateway selects revision number one",
    "start": "1353670",
    "end": "1359930"
  },
  {
    "text": "since no instance of revision number one is running requests to revision number",
    "start": "1359930",
    "end": "1366120"
  },
  {
    "text": "one are on a code path the Gateway is configured to forward the request to the",
    "start": "1366120",
    "end": "1372030"
  },
  {
    "text": "activator the activator buffers the original request and sends a request to",
    "start": "1372030",
    "end": "1379620"
  },
  {
    "text": "the autoscaler to scale revision number one the autoscaler sends a request to",
    "start": "1379620",
    "end": "1387870"
  },
  {
    "text": "kubernetes to increase the replicas count of the deployment object corresponding to revision number one",
    "start": "1387870",
    "end": "1395990"
  },
  {
    "text": "kubernetes creates a pot object and executes the queue and user container",
    "start": "1398600",
    "end": "1404250"
  },
  {
    "text": "therefore scaling from zero to one the",
    "start": "1404250",
    "end": "1409380"
  },
  {
    "text": "Gateway is configured to forward future requests for revision number one",
    "start": "1409380",
    "end": "1414390"
  },
  {
    "text": "directly to a part of that revision by passing the activator the activator",
    "start": "1414390",
    "end": "1421410"
  },
  {
    "text": "forwards a buffered original request of the queue container the queue container",
    "start": "1421410",
    "end": "1427740"
  },
  {
    "text": "forwards the original request to the user container for processing in",
    "start": "1427740",
    "end": "1435150"
  },
  {
    "text": "addition the queue container sends a request to the autoscaler to increase the in-flight request count omitted in",
    "start": "1435150",
    "end": "1442950"
  },
  {
    "text": "this animation when the response of the user container is returned to the caller the queue container sends another",
    "start": "1442950",
    "end": "1449850"
  },
  {
    "text": "request to the autoscaler to decrease the in-flight request count now to do",
    "start": "1449850",
    "end": "1458280"
  },
  {
    "text": "this all over again when a new request enters the system the Gateway inspects a request determines the service and",
    "start": "1458280",
    "end": "1465270"
  },
  {
    "text": "selects a revision to process the request here I assume the gateway",
    "start": "1465270",
    "end": "1471090"
  },
  {
    "text": "selects revision number one again since an instance of revision number",
    "start": "1471090",
    "end": "1477690"
  },
  {
    "text": "is running requests to revision number one are on a hot path the Gateway is",
    "start": "1477690",
    "end": "1483720"
  },
  {
    "text": "configured to forward requests for revision number one directly to a part of that revision bypassing the activator",
    "start": "1483720",
    "end": "1492950"
  },
  {
    "text": "again the queue container forwards to originally request to the user container for processing again the queue container",
    "start": "1492950",
    "end": "1501390"
  },
  {
    "text": "sends a request to the autoscaler to increase in flight request count if the",
    "start": "1501390",
    "end": "1508230"
  },
  {
    "text": "number of in-flight requests passes a configurable threshold the autoscaler",
    "start": "1508230",
    "end": "1514020"
  },
  {
    "text": "sends a request to kubernetes to increase the replica count of the deployment object corresponding to",
    "start": "1514020",
    "end": "1519870"
  },
  {
    "text": "revision number one kubernetes creates additional pods and execute the queue",
    "start": "1519870",
    "end": "1526380"
  },
  {
    "text": "and you can use a container here scaling from one to three ultimately the same",
    "start": "1526380",
    "end": "1533370"
  },
  {
    "text": "process takes place for revision number two in summary que native is a zero",
    "start": "1533370",
    "end": "1543800"
  },
  {
    "text": "operations extension for reactive micro service applications on kubernetes",
    "start": "1543800",
    "end": "1549680"
  },
  {
    "text": "within canada 'the que native serving is a zero operations extension for the",
    "start": "1549680",
    "end": "1555150"
  },
  {
    "text": "lifecycle management of reactive micro service applications on kubernetes k",
    "start": "1555150",
    "end": "1561270"
  },
  {
    "text": "native serving provides a dedicated abstraction for a micro service and automates its operation that is it",
    "start": "1561270",
    "end": "1568320"
  },
  {
    "text": "automates deployment and rollout additionally k native serving is a",
    "start": "1568320",
    "end": "1575730"
  },
  {
    "text": "service extension k native serving is able to scale a micro service from n to",
    "start": "1575730",
    "end": "1583650"
  },
  {
    "text": "zero instances in response to service requests thank you very much with that I",
    "start": "1583650",
    "end": "1591780"
  },
  {
    "text": "hand back to Andrew thank you thanks Dominic that was great",
    "start": "1591780",
    "end": "1598740"
  },
  {
    "text": "so if you like how Dominic explained K native serving not just the content",
    "start": "1598740",
    "end": "1604380"
  },
  {
    "text": "please come and talk to us after the presentation we'd love to hear your feedback and I think we have some time",
    "start": "1604380",
    "end": "1609600"
  },
  {
    "text": "for some questions just one second for",
    "start": "1609600",
    "end": "1617670"
  },
  {
    "text": "the microphone to arrive I won't ask if",
    "start": "1617670",
    "end": "1625260"
  },
  {
    "text": "I run application in cognitive service and which component to ensures that my",
    "start": "1625260",
    "end": "1632520"
  },
  {
    "text": "applications is a high available because my application perhaps you know has some",
    "start": "1632520",
    "end": "1639960"
  },
  {
    "text": "trouble and it can be broke down in the Canadian Canadian service container so I",
    "start": "1639960",
    "end": "1647930"
  },
  {
    "text": "should I develop another application to fix these to fix this problem or the",
    "start": "1647930",
    "end": "1657120"
  },
  {
    "text": "Canadian who has a internal mechanism to have me to do that Canada actually does",
    "start": "1657120",
    "end": "1663270"
  },
  {
    "text": "not address this problem can it it falls back on to kubernetes because a que",
    "start": "1663270",
    "end": "1669330"
  },
  {
    "text": "native service or more specifically a revision of ack a native service ultimately translates into a deployment",
    "start": "1669330",
    "end": "1676310"
  },
  {
    "text": "so from there on it inherits all the properties that the deployment exposes",
    "start": "1676310",
    "end": "1683460"
  },
  {
    "text": "and since kubernetes deployment controller makes sure or at least tries",
    "start": "1683460",
    "end": "1688740"
  },
  {
    "text": "as much as you can to bring up as many pots as specified in the replicas count k native falls back on to the",
    "start": "1688740",
    "end": "1696000"
  },
  {
    "text": "availability guarantees of kubernetes but the problem the the point stands and",
    "start": "1696000",
    "end": "1701970"
  },
  {
    "text": "is correct kubernetes deployment does not give you a guarantee that it can",
    "start": "1701970",
    "end": "1707430"
  },
  {
    "text": "scale yes to this point it just gives you the guarantee it will keep trying k",
    "start": "1707430",
    "end": "1712800"
  },
  {
    "text": "native does the same thing yep because you know our applications",
    "start": "1712800",
    "end": "1718610"
  },
  {
    "text": "always was deployed deployed in our production environment through",
    "start": "1718610",
    "end": "1726149"
  },
  {
    "text": "deployment workload and the stiff side workload but our application is a",
    "start": "1726149",
    "end": "1732789"
  },
  {
    "text": "database system so there are so many unstable problems will be happened in",
    "start": "1732789",
    "end": "1740169"
  },
  {
    "text": "the container so the Canadian stories is very convenient - for us if we want to",
    "start": "1740169",
    "end": "1748500"
  },
  {
    "text": "provide as a database service to our customers yeah actually in that case so Canada Canada",
    "start": "1748500",
    "end": "1755710"
  },
  {
    "text": "serving is specifically designed for reactive micro services that is stateless components that process HTTP",
    "start": "1755710",
    "end": "1762100"
  },
  {
    "text": "requests if a database is running in your container then ke native serving is",
    "start": "1762100",
    "end": "1767380"
  },
  {
    "text": "not the choice for you it's not a solution okay thank you you're welcome",
    "start": "1767380",
    "end": "1774090"
  },
  {
    "text": "well thank you I'm a little bit confused with the concept with the cold path and",
    "start": "1778080",
    "end": "1783600"
  },
  {
    "text": "how paths also so here confused about like say it seems that a native can",
    "start": "1783600",
    "end": "1790560"
  },
  {
    "text": "sense first sense that there whether there is a rollout going on and then to",
    "start": "1790560",
    "end": "1797190"
  },
  {
    "text": "put it and to trigger that with a cue container and then is that means that",
    "start": "1797190",
    "end": "1802350"
  },
  {
    "text": "the to wait to finish that rollout and intuitive scaling so I mean like so if I",
    "start": "1802350",
    "end": "1807480"
  },
  {
    "text": "see I mean the rollout and scaling will they happens simultaneously or a little",
    "start": "1807480",
    "end": "1813390"
  },
  {
    "text": "bit confused about that thank you I see so actually the cue container is not",
    "start": "1813390",
    "end": "1822600"
  },
  {
    "text": "involved in cold path or hot path the only component that is involved in cold",
    "start": "1822600",
    "end": "1828600"
  },
  {
    "text": "path or hot path is the gateway and the activator the ingress gateway is if",
    "start": "1828600",
    "end": "1836610"
  },
  {
    "text": "there is no no pod running the ingress gateway is configured to forward a",
    "start": "1836610",
    "end": "1842700"
  },
  {
    "text": "request to the activator and then the activator will talk to the autoscaler to scale up in the future after just one",
    "start": "1842700",
    "end": "1854220"
  },
  {
    "text": "second",
    "start": "1854220",
    "end": "1856669"
  },
  {
    "text": "in the future after a pot has been acquired the gateway is reconfigured we",
    "start": "1862760",
    "end": "1869809"
  },
  {
    "text": "are the ISTE of virtual service to then direct requests directly to the pot so",
    "start": "1869809",
    "end": "1877040"
  },
  {
    "text": "this situation now or actually the blue line you can think of the blue line as the hot path and the queue container",
    "start": "1877040",
    "end": "1884960"
  },
  {
    "text": "within the pot its sole responsibility is to count statistics so it every time",
    "start": "1884960",
    "end": "1893870"
  },
  {
    "text": "it receives the requests it increases in flight requests count and every time it returns a response it decreases in",
    "start": "1893870",
    "end": "1900740"
  },
  {
    "text": "flight requests come in super helpful",
    "start": "1900740",
    "end": "1905860"
  },
  {
    "text": "please me have one question over there thank you",
    "start": "1907570",
    "end": "1914380"
  },
  {
    "text": "there's some in the back",
    "start": "1915039",
    "end": "1918460"
  },
  {
    "text": "hi the Gateway is configured to route certain requests to service one revision",
    "start": "1922120",
    "end": "1927909"
  },
  {
    "text": "one and certain to say revision 2 while the rollout is happening right so now in",
    "start": "1927909",
    "end": "1933520"
  },
  {
    "text": "the cold path we had the first request come to revision one and your user container came up and now it's directly",
    "start": "1933520",
    "end": "1941289"
  },
  {
    "text": "going to the queue container off so this one revision one now say a request comes",
    "start": "1941289",
    "end": "1947409"
  },
  {
    "text": "where the Gateway has to route it to revision 2 but the cold path is still enable there so to reduce the response",
    "start": "1947409",
    "end": "1953770"
  },
  {
    "text": "time does it route it to so revision 1 meanwhile no no no now not to my",
    "start": "1953770",
    "end": "1961750"
  },
  {
    "text": "knowledge I mean to do please do not quote me on that but I am 99% sure no it does not",
    "start": "1961750",
    "end": "1967750"
  },
  {
    "text": "right so if we wish for us to have SLA of 99 like triple nine or something and",
    "start": "1967750",
    "end": "1974460"
  },
  {
    "text": "have lower response times can we configure it to do that though I do not",
    "start": "1974460",
    "end": "1979750"
  },
  {
    "text": "think that this is a possibility no it's a it's a strictly probabilistic traffic",
    "start": "1979750",
    "end": "1986770"
  },
  {
    "text": "split that does not take any other environmental conditions into account understand alright thank you very much",
    "start": "1986770",
    "end": "1996990"
  },
  {
    "text": "all right I got I got the final warning so I'm not sure I can take more questions up here on stage but please do",
    "start": "1999030",
    "end": "2005420"
  },
  {
    "text": "not hesitate come find us we're gonna hang out right in front of this room and are happy to answer any more questions",
    "start": "2005420",
    "end": "2011330"
  },
  {
    "text": "thank you very much thanks for coming [Applause]",
    "start": "2011330",
    "end": "2018150"
  }
]