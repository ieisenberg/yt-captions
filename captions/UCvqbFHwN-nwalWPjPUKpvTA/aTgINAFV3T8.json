[
  {
    "text": "uh we're gonna get started in a couple minutes thank you for coming uh",
    "start": "539",
    "end": "7759"
  },
  {
    "text": "all right",
    "start": "49620",
    "end": "52218"
  },
  {
    "text": "okay",
    "start": "65939",
    "end": "68540"
  },
  {
    "text": "okay great let's get started",
    "start": "99600",
    "end": "104118"
  },
  {
    "text": "hello and welcome to my talk on multi-tenancy for Argo workflows in Argo CD at Adobe I'm Serena vasmati I'm a",
    "start": "104700",
    "end": "112920"
  },
  {
    "text": "software engineer at Adobe who works on the internal developer platform at Adobe so before I get started I do want to",
    "start": "112920",
    "end": "119759"
  },
  {
    "text": "give credit by emphasizing that the work I'll be preparing today is not just a product of my own efforts but a combined",
    "start": "119759",
    "end": "125460"
  },
  {
    "text": "product of efforts of many of my colleagues at Adobe and so with that let's get started",
    "start": "125460",
    "end": "131819"
  },
  {
    "text": "so this is our agenda for today we will be starting with some background information about what my team does some",
    "start": "131819",
    "end": "137580"
  },
  {
    "text": "terminology referenced in this presentation and an architecture overview before we dive into how we address multi-tenancy for Argo workflows",
    "start": "137580",
    "end": "144959"
  },
  {
    "text": "and Argo CD let's get started with the internal developer platform",
    "start": "144959",
    "end": "150780"
  },
  {
    "text": "so Adobe has three main categories of product offerings there's document Cloud Creative Cloud experience Cloud which",
    "start": "150780",
    "end": "157440"
  },
  {
    "text": "are themselves comprised of different services and products that are developed by various internal teams at Adobe",
    "start": "157440",
    "end": "163260"
  },
  {
    "text": "these products and services may be deployed and run using different internal platforms that serve their",
    "start": "163260",
    "end": "169200"
  },
  {
    "text": "specific needs and in order to build and deploy and run successfully these different platforms leverage certain",
    "start": "169200",
    "end": "175019"
  },
  {
    "text": "core mechanisms infrastructure tooling and services that are provided by the internal developer platform",
    "start": "175019",
    "end": "181860"
  },
  {
    "text": "as part of its offering IDP internal developer platform uses and provides access to resources on various Cloud",
    "start": "181860",
    "end": "189480"
  },
  {
    "text": "providers like AWS Azure and Adobe data centers",
    "start": "189480",
    "end": "194819"
  },
  {
    "text": "the internal developer platform standardizes best practices and consolidates Engineering efforts across",
    "start": "194819",
    "end": "201540"
  },
  {
    "text": "the various internal developer teams at Adobe while providing a CI CD experience that remains flexible for the different",
    "start": "201540",
    "end": "207840"
  },
  {
    "text": "use cases you see on the screen here and next let's go over some terminology",
    "start": "207840",
    "end": "213959"
  },
  {
    "text": "that we will be referencing for the rest of the presentation get Ops so git Ops is an architectural",
    "start": "213959",
    "end": "220200"
  },
  {
    "text": "Paradigm where desired System state is first defined and tracked and get somewhere by some tooling",
    "start": "220200",
    "end": "227459"
  },
  {
    "text": "that tooling then deploys that defined state to a live State on a running system the githapsulin regularly",
    "start": "227459",
    "end": "233879"
  },
  {
    "text": "synchronizes the two states so that the live State can get automatically pulled in with any updates and it pulls in any",
    "start": "233879",
    "end": "240599"
  },
  {
    "text": "changes made inside git Argo CDE is an example of one such git",
    "start": "240599",
    "end": "246060"
  },
  {
    "text": "Ops tooling it supports tracking of kubernetes or Kates manifests in git and",
    "start": "246060",
    "end": "251700"
  },
  {
    "text": "supports their deployment and synchronization to for example a namespace on a cluster",
    "start": "251700",
    "end": "258018"
  },
  {
    "text": "Argo CD is implemented as a kubernetes controller it uses various crds one of",
    "start": "258060",
    "end": "263220"
  },
  {
    "text": "them is called an Argo CD application and that stores information about what",
    "start": "263220",
    "end": "268380"
  },
  {
    "text": "defines state to track and where to track it as well as where to deploy it so here's an example of what that looks",
    "start": "268380",
    "end": "274380"
  },
  {
    "text": "like the yaml Manifest for an Argo CD application as you can see there are sections in the Manifest defining the",
    "start": "274380",
    "end": "280560"
  },
  {
    "text": "source and intended deployment destination of the defined State and Argo CD itself supports automated",
    "start": "280560",
    "end": "285960"
  },
  {
    "text": "deployment self-healing complex rollout strategies monitoring and much more",
    "start": "285960",
    "end": "292639"
  },
  {
    "text": "through the Argo City UI which we will discuss more later the Argo CD also visualizes the health and deployment",
    "start": "292680",
    "end": "298380"
  },
  {
    "text": "status of the developers deployed resources wherever it's deployed on the cluster",
    "start": "298380",
    "end": "303960"
  },
  {
    "text": "Argo workflows Argo workflows is a workflow engine that can run CI CD pipelines among other things on acades",
    "start": "303960",
    "end": "310800"
  },
  {
    "text": "cluster there are many different kinds of workflows but generally a workflow can be thought of as a set of tasks and",
    "start": "310800",
    "end": "317040"
  },
  {
    "text": "each task runs in its own pod and can also be modeled as a dependency on other tasks",
    "start": "317040",
    "end": "322680"
  },
  {
    "text": "the resulting workflow can actually be templated and defined using yaml files like this on the screen and this",
    "start": "322680",
    "end": "329100"
  },
  {
    "text": "demonstrates a directed acyclic graph type template it's an example I I pulled online",
    "start": "329100",
    "end": "335060"
  },
  {
    "text": "the use of templating opens the door to sharing a template to be used as a sub",
    "start": "335340",
    "end": "340560"
  },
  {
    "text": "template in other workflows since a workflow is implemented in a",
    "start": "340560",
    "end": "346620"
  },
  {
    "text": "kubernetes crd and each task runs in a pod for example this means that",
    "start": "346620",
    "end": "352860"
  },
  {
    "text": "workflows natively integrate with existing kubernetes objects such as volumes config Maps config map secrets",
    "start": "352860",
    "end": "360479"
  },
  {
    "text": "and much more now let's get a better understanding of the cicd offering that IDP at Adobe",
    "start": "360479",
    "end": "366900"
  },
  {
    "text": "provides and what it looks like with Argo workflows and Argo CD working together",
    "start": "366900",
    "end": "372660"
  },
  {
    "text": "so we start with the Hub cluster where we have Argo workflows and Argo CD installed we also have client namespaces",
    "start": "372660",
    "end": "378780"
  },
  {
    "text": "where client workflows are run additionally there are remote clusters with remote client name spaces that are",
    "start": "378780",
    "end": "384539"
  },
  {
    "text": "running client applications alongside any case resources that they need to support it these remote clusters are",
    "start": "384539",
    "end": "390660"
  },
  {
    "text": "usually pulling an image from some registry to run as part of the deployment now the defined state for all of this is",
    "start": "390660",
    "end": "397560"
  },
  {
    "text": "actually stored in git and using git Ops this includes of course client repositories which includes the",
    "start": "397560",
    "end": "403199"
  },
  {
    "text": "application code as well as a deploy repository deploy repository contains CI",
    "start": "403199",
    "end": "408780"
  },
  {
    "text": "CD resources as well as resources associated with any of the Kate's resources deployed on the remote",
    "start": "408780",
    "end": "413819"
  },
  {
    "text": "namespace so you have your service case manifest and of course you have your workflow manifest which are the cicd",
    "start": "413819",
    "end": "419340"
  },
  {
    "text": "resources themselves so these repositories may also refer to",
    "start": "419340",
    "end": "425639"
  },
  {
    "text": "other IDP owned resources that they can refer to and we do this through Helm we'll talk more about that later as well",
    "start": "425639",
    "end": "431639"
  },
  {
    "text": "so how do these pieces connect so to start with Argo CD is always",
    "start": "431639",
    "end": "437160"
  },
  {
    "text": "tracking the client deploy repository manifests and it's doing this because it's constantly deploying them to the",
    "start": "437160",
    "end": "443940"
  },
  {
    "text": "workflows on the Hub cluster as well as the actual deployed resources on the remote cluster itself",
    "start": "443940",
    "end": "450240"
  },
  {
    "text": "following this setup any change made to the application code will trigger a workflow inside the client Hub namespace",
    "start": "450240",
    "end": "456840"
  },
  {
    "text": "and specifically what actually happens is this requests a workflow from the Argo workflows controller that's running and the Argo workflows controller will",
    "start": "456840",
    "end": "463800"
  },
  {
    "text": "execute a workflow in namespace that requested it so one of the steps in the workflow is a",
    "start": "463800",
    "end": "469620"
  },
  {
    "text": "build step and that actually builds and uploads an image to the image registry that we mentioned earlier the other step",
    "start": "469620",
    "end": "475680"
  },
  {
    "text": "after that goes ahead and takes that tag or whatever information about that build and enters it into the service case",
    "start": "475680",
    "end": "482039"
  },
  {
    "text": "manifests so that it's recorded somewhere in git now as mentioned earlier that state is",
    "start": "482039",
    "end": "488039"
  },
  {
    "text": "constantly being tracked by Argo CD and so that information is then deployed to the actual running State on the remote",
    "start": "488039",
    "end": "493979"
  },
  {
    "text": "cluster so now the running state knows where to pull it's the new image tag and",
    "start": "493979",
    "end": "499440"
  },
  {
    "text": "it pulls it from the image registry that was pushed to in the first place by the workflow so in this way Argo workflows and Argo",
    "start": "499440",
    "end": "506039"
  },
  {
    "text": "CD are used to allow our clients to run cic pipelines on the cluster with a focus on githubs",
    "start": "506039",
    "end": "513360"
  },
  {
    "text": "so now that we've gone over the general walkthrough the general architecture let's take a look at how we make this multi-tenant",
    "start": "513360",
    "end": "519479"
  },
  {
    "text": "so multi-tenancy it's an architecture where multiple clients are sharing a single resource in this case it's a",
    "start": "519479",
    "end": "525420"
  },
  {
    "text": "running instance of Argo workflows and Argo CD it can reduce waste by reducing",
    "start": "525420",
    "end": "530940"
  },
  {
    "text": "idle time as well as a number of running instances depending on how you manage load and how scaling is handled it can",
    "start": "530940",
    "end": "537180"
  },
  {
    "text": "save developer time mainly because it allows them to spin up faster they don't need to sort of spin up their own",
    "start": "537180",
    "end": "542459"
  },
  {
    "text": "instance because they're using something that exists already it provides an opportunity to consolidate best practices fixes",
    "start": "542459",
    "end": "549420"
  },
  {
    "text": "maintenance and other updates and that reduces the need for domain expertise from developers or IDP clients",
    "start": "549420",
    "end": "557279"
  },
  {
    "text": "it's efficient because every Improvement or feature that's made to the shared resource is a force multiplier that can",
    "start": "557279",
    "end": "562560"
  },
  {
    "text": "be used across every single team that's leveraging it and because of all of this it scales really well because by reusing",
    "start": "562560",
    "end": "568500"
  },
  {
    "text": "previous work relating to setup and maintenance we are reducing the amount of friction it takes for a client to get",
    "start": "568500",
    "end": "574500"
  },
  {
    "text": "up and get started some of the questions we had to answer when addressing multi-tenancy with Argo",
    "start": "574500",
    "end": "581220"
  },
  {
    "text": "workflows in argocu were how do we make sure that clients can only access what's theirs how do we isolate client",
    "start": "581220",
    "end": "587339"
  },
  {
    "text": "workflows and processes and deployments and what's the best way to get updates and fixes out to clients for resources",
    "start": "587339",
    "end": "593279"
  },
  {
    "text": "that we don't control and of course how do we design for reliability as load increases",
    "start": "593279",
    "end": "600779"
  },
  {
    "text": "so let's start with access for Argo workflows this page shows the Argo workflows UI it's exposed by the Argo",
    "start": "600779",
    "end": "607019"
  },
  {
    "text": "server that's part of the workflows installation on the Hub cluster and it visualizes client workflows that run",
    "start": "607019",
    "end": "612420"
  },
  {
    "text": "inside client namespaces based on our architecture we can see here that workflows are being",
    "start": "612420",
    "end": "617459"
  },
  {
    "text": "returned for a specific namespace that we entered and also that a workflow is currently in progress",
    "start": "617459",
    "end": "623459"
  },
  {
    "text": "after clicking into a workflow a client can view workflow tasks and logs as well as execute actions like suspending",
    "start": "623459",
    "end": "629580"
  },
  {
    "text": "retrying or even deleting workflows and while this is great functionality to have how do we make sure that clients",
    "start": "629580",
    "end": "634620"
  },
  {
    "text": "are only doing this for workflows that belong in their own namespace on the cluster so when a client wants to access a",
    "start": "634620",
    "end": "641279"
  },
  {
    "text": "workflow resource to the UI whether or not they can access that resource depends on two things the client's group",
    "start": "641279",
    "end": "647579"
  },
  {
    "text": "membership as well as the presence of a service account in the namespace of the",
    "start": "647579",
    "end": "652740"
  },
  {
    "text": "requested resource so to achieve this we use single sign-on and the workflow's namespace rbac",
    "start": "652740",
    "end": "658620"
  },
  {
    "text": "feature let's go through this step by step so after receiving a client's request to access the workflow resource",
    "start": "658620",
    "end": "664680"
  },
  {
    "text": "the Argo server will first get the group member information for that client through the configured identity provider",
    "start": "664680",
    "end": "670740"
  },
  {
    "text": "in our case that's Azure active directory the Argo server then goes ahead and checks whether a service",
    "start": "670740",
    "end": "675779"
  },
  {
    "text": "account is associated with any of those groups inside the namespace of the requested resource if it does and the",
    "start": "675779",
    "end": "681600"
  },
  {
    "text": "service account has the necessary permissions to access that resource then the access is granted and if it does not",
    "start": "681600",
    "end": "686640"
  },
  {
    "text": "the access is blocked so this access flow allows us to scope client access down to workflow resources at the",
    "start": "686640",
    "end": "693300"
  },
  {
    "text": "namespace level and it's using service accounts so it's highly scalable since it leverages you know case related rbac",
    "start": "693300",
    "end": "699000"
  },
  {
    "text": "through service accounts this allows a many-to-many relationship between our clients and namespaces on the Hub",
    "start": "699000",
    "end": "704339"
  },
  {
    "text": "cluster the namespace rbac feature that comes with Argo workflows requires that the",
    "start": "704339",
    "end": "709980"
  },
  {
    "text": "service account is annotated with the authorized groups that are allowed to leverage it for access to the resources",
    "start": "709980",
    "end": "715320"
  },
  {
    "text": "in the hub cluster you can see this in the example manifest here which specifies that only clients in group a",
    "start": "715320",
    "end": "720660"
  },
  {
    "text": "can use a service account for Access it's in a list by default so you can add to those groups there's also a",
    "start": "720660",
    "end": "726839"
  },
  {
    "text": "precedence field and that's mainly used to break ties for service accounts that might Match multiple service accounts",
    "start": "726839",
    "end": "732540"
  },
  {
    "text": "that might match to a client the Argo workflows command line interface or CLI is also exposed by the",
    "start": "732540",
    "end": "739920"
  },
  {
    "text": "Argo server but the mechanism for scoping access here is slightly different this time instead of an",
    "start": "739920",
    "end": "745140"
  },
  {
    "text": "identity provider the Argo server actually delegates authentication in our architecture and in the general Argo",
    "start": "745140",
    "end": "751079"
  },
  {
    "text": "workflows architecture for SSO to the sorry for the CLI to the cube API server",
    "start": "751079",
    "end": "757500"
  },
  {
    "text": "the client includes a bearer token in their request which may be automatically included as part of an exported",
    "start": "757500",
    "end": "763920"
  },
  {
    "text": "cubeconfig file locally or as part of a token in the actual CLI request that's going out the token is validated by the",
    "start": "763920",
    "end": "770940"
  },
  {
    "text": "case API server and if the token is valid and contains the necessary permissions for the requested resource",
    "start": "770940",
    "end": "775980"
  },
  {
    "text": "then the request is granted so here's an example of what a successful CLI looks like when I'm",
    "start": "775980",
    "end": "781320"
  },
  {
    "text": "querying for my own workflows from the CLI as you can see this is my own namespace and I'm getting back my",
    "start": "781320",
    "end": "786480"
  },
  {
    "text": "workflows and here's an example of what happens when I try to query for workflows in the CLI that I do not have",
    "start": "786480",
    "end": "792000"
  },
  {
    "text": "access to using that flow now that we've covered how access is scoped or how we scope access in the",
    "start": "792000",
    "end": "798420"
  },
  {
    "text": "workflows UI let's take a look at the Argo CD UI and how it does it the Argo",
    "start": "798420",
    "end": "803579"
  },
  {
    "text": "City UI visual visualizes applications that track and deploy State defined in git the goal here is that clients should",
    "start": "803579",
    "end": "811019"
  },
  {
    "text": "only be able to view their own Argo CD applications through the UI this is because access to Argo CD",
    "start": "811019",
    "end": "817500"
  },
  {
    "text": "applications also provides access to the visualizations of the associated deployed resources and it may also",
    "start": "817500",
    "end": "824160"
  },
  {
    "text": "include access to thinking that resource or even deleting the underlying deployed state",
    "start": "824160",
    "end": "830420"
  },
  {
    "text": "so in the Argo CDU you the UI and CLI use the same mechanism this time to",
    "start": "831480",
    "end": "836700"
  },
  {
    "text": "scope client access for resources like Argo CD applications similar to workflows these are exposed by the Argo",
    "start": "836700",
    "end": "843720"
  },
  {
    "text": "CD server in this case Argo City also has other resources in addition to Argo CD applications such as",
    "start": "843720",
    "end": "850200"
  },
  {
    "text": "logs connected repositories connected clusters certificates as well as app",
    "start": "850200",
    "end": "855839"
  },
  {
    "text": "projects the app project resource is important as we'll see later because it can be used",
    "start": "855839",
    "end": "861000"
  },
  {
    "text": "to scope or group Argo CD resources which can then be used to scope access",
    "start": "861000",
    "end": "867540"
  },
  {
    "text": "some but not all Argo CD resources can be grouped together",
    "start": "867540",
    "end": "872639"
  },
  {
    "text": "into an app project access to those resources can then be scoped to clients who have access to the on the the parent",
    "start": "872639",
    "end": "879060"
  },
  {
    "text": "app project itself for resources that cannot be scoped to app projects access is usually defined",
    "start": "879060",
    "end": "884760"
  },
  {
    "text": "using a global config map we generally don't use Global rbac in our architecture for client access because",
    "start": "884760",
    "end": "890339"
  },
  {
    "text": "it can act as a single point of failure it's prone to typos on the other hand the app projects are really great",
    "start": "890339",
    "end": "895560"
  },
  {
    "text": "because they cannot buy design be used to provide access for resources that don't fall under those app projects",
    "start": "895560",
    "end": "900779"
  },
  {
    "text": "making it ideal from an access scoping perspective",
    "start": "900779",
    "end": "905720"
  },
  {
    "text": "after setting up project scoping a client can request access to a resource",
    "start": "906000",
    "end": "911100"
  },
  {
    "text": "and the Argo CD server gets the client's group information from again the configured identity provider which again",
    "start": "911100",
    "end": "916740"
  },
  {
    "text": "here for Argo CD is azure active directory the Argo CD server then checks",
    "start": "916740",
    "end": "922139"
  },
  {
    "text": "if any of the clients groups are authorized by the parent project of the requested resource if so then the",
    "start": "922139",
    "end": "927899"
  },
  {
    "text": "request is granted if not the request is blocked",
    "start": "927899",
    "end": "932720"
  },
  {
    "text": "this is an example of what the Argo City app project that we use looks like you can see that the project definition",
    "start": "933000",
    "end": "938699"
  },
  {
    "text": "includes specified authorized groups and their Associated role permissions over",
    "start": "938699",
    "end": "943860"
  },
  {
    "text": "the resources in this project so when setting up scoped Client app",
    "start": "943860",
    "end": "950160"
  },
  {
    "text": "projects we usually set up three roles by default out of the box and admin role a read-only role and an automation rule",
    "start": "950160",
    "end": "956459"
  },
  {
    "text": "for external Argo CD application access for example from the Argo workflows right",
    "start": "956459",
    "end": "962279"
  },
  {
    "text": "so now that we've finished covering how access is configured for our workflows in Argo CD let's go over how isolation",
    "start": "962279",
    "end": "967440"
  },
  {
    "text": "is Achieve for the respective tools beginning with Argo workflows so as mentioned each other workflow runs in a",
    "start": "967440",
    "end": "973440"
  },
  {
    "text": "pod and they run the client Hub namespaces so far we've ensured that clients can only access their own",
    "start": "973440",
    "end": "978839"
  },
  {
    "text": "resources but how do we make sure that they can't access other resources through their workflows and how do we protect their workflows from other",
    "start": "978839",
    "end": "984720"
  },
  {
    "text": "clients first we require that all clients bring their own secrets to the namespace so this helps with workflow access",
    "start": "984720",
    "end": "990600"
  },
  {
    "text": "automatically scoping it through automatically scope git tokens our Factory credentials Argo CD automation",
    "start": "990600",
    "end": "996000"
  },
  {
    "text": "tokens and any other secrets that we pull from vault next we leverage the lack of shared secrets to configure individual client",
    "start": "996000",
    "end": "1002899"
  },
  {
    "text": "artifact repositories and this adds another layer of isolation for the artifacts that are passed between steps in a workflow with regards to the",
    "start": "1002899",
    "end": "1009440"
  },
  {
    "text": "executor that's actually running the containers inside the workflow pods we allow the recommended Emissary executor",
    "start": "1009440",
    "end": "1014959"
  },
  {
    "text": "by default as well as the Kate's API executor the latter requires some Network policies but we lock that down",
    "start": "1014959",
    "end": "1020600"
  },
  {
    "text": "by using default Network policies to control for Ingress and egress by",
    "start": "1020600",
    "end": "1026240"
  },
  {
    "text": "default when triggering workflows we specify a service account that is not the default",
    "start": "1026240",
    "end": "1031819"
  },
  {
    "text": "service account to run under this defines the permissions the entire workflow runs under or rather each task and also helps us be intentional about",
    "start": "1031819",
    "end": "1038120"
  },
  {
    "text": "what permissions we're giving to the workflow itself we also have cluster level pod security",
    "start": "1038120",
    "end": "1043339"
  },
  {
    "text": "policies that limit pod capabilities and force default setcom profiles and prevent privileged pods from even being",
    "start": "1043339",
    "end": "1049880"
  },
  {
    "text": "spun up on the cluster itself in client namespaces to accommodate this we use kaniko to build and that's because",
    "start": "1049880",
    "end": "1056720"
  },
  {
    "text": "Canada code does not require any special privileges in order to build our uh our client images and we also use",
    "start": "1056720",
    "end": "1063140"
  },
  {
    "text": "multi-stage builds in addition to that so for clients that do require privileges for example Docker and Docker",
    "start": "1063140",
    "end": "1069320"
  },
  {
    "text": "we offer off cluster bills through code build and this again helps to give them",
    "start": "1069320",
    "end": "1075200"
  },
  {
    "text": "these privileges while maintaining the kind of isolation we want in our workflows and this is also directly",
    "start": "1075200",
    "end": "1080840"
  },
  {
    "text": "integrated with the Argo workflow step that we use so the result of these layers is that",
    "start": "1080840",
    "end": "1086720"
  },
  {
    "text": "client workflows and the underlying pods are isolated to the client Hub namespace in which they're running and this",
    "start": "1086720",
    "end": "1092600"
  },
  {
    "text": "prevents their resource from being accessed by other clients and also prevents them from accessing other clients resources",
    "start": "1092600",
    "end": "1099080"
  },
  {
    "text": "with Argo CD isolation has to happen at the Argo CD application Level first so as mentioned previously an Argosy",
    "start": "1099080",
    "end": "1104480"
  },
  {
    "text": "application is a crd that can be deployed to specific that can be used to deploy to specific namespaces on",
    "start": "1104480",
    "end": "1110000"
  },
  {
    "text": "specific remote clusters the rocd application is also configured to track Kate's manifest from a git repository in",
    "start": "1110000",
    "end": "1116000"
  },
  {
    "text": "this case the deploy repository that's owned by the client in this situation the deploy repository might be referring to other repositories for example in",
    "start": "1116000",
    "end": "1122539"
  },
  {
    "text": "Helm charts or Helm dependencies in artifactory so how do we restrict what a client through their Argo CD application",
    "start": "1122539",
    "end": "1128660"
  },
  {
    "text": "can deploy to and track the answer again here is actually Argo CD app projects in",
    "start": "1128660",
    "end": "1134120"
  },
  {
    "text": "fact the Argo CDF project has to specifically allow tracking of git locations of the child Argo CD",
    "start": "1134120",
    "end": "1140900"
  },
  {
    "text": "applications in order for those Argo CD applications to be allowed to track those similarly it has to specifically allow",
    "start": "1140900",
    "end": "1147380"
  },
  {
    "text": "deployment to name spaces on clusters in order for the child Argo City applications to be able to deploy to",
    "start": "1147380",
    "end": "1153020"
  },
  {
    "text": "them if the Argo City application does not follow these rules then an error will",
    "start": "1153020",
    "end": "1158419"
  },
  {
    "text": "actually be thrown when attempting to create the application or put it inside the project and by default all our gocd",
    "start": "1158419",
    "end": "1165440"
  },
  {
    "text": "applications have to be inside a project finally we also restrict Argo CD",
    "start": "1165440",
    "end": "1170600"
  },
  {
    "text": "applications from creating any cluster level resources like creating or deleting namespaces because that's not",
    "start": "1170600",
    "end": "1175940"
  },
  {
    "text": "good when you're sharing a cluster with other clients the other Argo CD component that we look",
    "start": "1175940",
    "end": "1182600"
  },
  {
    "text": "at with regards to isolation is the argosity operator itself that's running on the Hub cluster so the operator is",
    "start": "1182600",
    "end": "1188240"
  },
  {
    "text": "connected to multiple remote clusters that it deploys through a hub and spoke model and this means that the operator running on the Hub cluster is connected",
    "start": "1188240",
    "end": "1195260"
  },
  {
    "text": "and deploys to all of these possible remote namespaces on different remote clusters so how do we ensure that we're",
    "start": "1195260",
    "end": "1201080"
  },
  {
    "text": "appropriately limiting the permissions that the Argo CD operator is running with well we need to secure it so that in",
    "start": "1201080",
    "end": "1207080"
  },
  {
    "text": "case of a vulnerability and in general we limit the extent to which a client or malicious actor can actually take",
    "start": "1207080",
    "end": "1212360"
  },
  {
    "text": "advantage of Argo CD to interfere with other client resources deployed on the remote cluster itself",
    "start": "1212360",
    "end": "1219520"
  },
  {
    "text": "so I was CD when registering a cluster actually first needs to have a service account that's on the cluster and by",
    "start": "1219620",
    "end": "1226100"
  },
  {
    "text": "default this service account is created in the registration process in the cube system namespace with admin cluster",
    "start": "1226100",
    "end": "1231380"
  },
  {
    "text": "level permissions Argo CD is then given the token associated with that service account and then uses that token to manage and",
    "start": "1231380",
    "end": "1237679"
  },
  {
    "text": "deploy to that cluster now there are two things that could be wrong with this picture the first is that by default the",
    "start": "1237679",
    "end": "1244640"
  },
  {
    "text": "registration process out of the box puts the service account in the cube system namespace now as we mentioned earlier",
    "start": "1244640",
    "end": "1249799"
  },
  {
    "text": "the cube system namespace or rather as we mentioned earlier you may be using pod security policies to be preventing",
    "start": "1249799",
    "end": "1255620"
  },
  {
    "text": "privileged pods from being spun up on your cluster a lot of the times best practice is actually to allow list",
    "start": "1255620",
    "end": "1261500"
  },
  {
    "text": "service accounts inside the cube system namespace so that they actually aren't restricted by those pod security",
    "start": "1261500",
    "end": "1266660"
  },
  {
    "text": "policies if that's so if that's true for you then this default setup will actually allow the Argo CD service",
    "start": "1266660",
    "end": "1273380"
  },
  {
    "text": "account to also be allowed to spin up privileged pods on your cluster which means that clients through Argo CD might",
    "start": "1273380",
    "end": "1280760"
  },
  {
    "text": "actually be able to spin up privileged pods through the default setup the second thing that could be wrong with",
    "start": "1280760",
    "end": "1286340"
  },
  {
    "text": "this picture is that Argo CD by default has admin cluster level access which isn't necessarily good because there may",
    "start": "1286340",
    "end": "1292520"
  },
  {
    "text": "be namespaces on the cluster that have nothing to do with Argo CD deployments and so Argo CD shouldn't necessarily be",
    "start": "1292520",
    "end": "1297559"
  },
  {
    "text": "able to deploy to edit or even view those namespaces and the resources inside them",
    "start": "1297559",
    "end": "1304240"
  },
  {
    "text": "so in order to begin fixing these issues let's start with the cube system namespace issue",
    "start": "1304820",
    "end": "1310760"
  },
  {
    "text": "so the cube system namespace issue if you just change the namespace then if you have pod security policies that",
    "start": "1310760",
    "end": "1315980"
  },
  {
    "text": "restrict privileged pods being spun up on your cluster then it will work as expected and we've restricted Argo",
    "start": "1315980",
    "end": "1321679"
  },
  {
    "text": "series ability to deploy privileged resources and by extension clients that use Argo CD now let's go ahead and",
    "start": "1321679",
    "end": "1327200"
  },
  {
    "text": "change that admin cluster role to a read-only cluster role so cluster-wide read access is still required by rocd",
    "start": "1327200",
    "end": "1333860"
  },
  {
    "text": "and this is because Argosy does a bulk read of the API whenever deploying to or syncing to a remote cluster itself",
    "start": "1333860",
    "end": "1341480"
  },
  {
    "text": "it's this check will actually error out if it does not have a cluster-wide read access and now argocd will generally be fine",
    "start": "1341480",
    "end": "1348080"
  },
  {
    "text": "with cluster read access but still needs admin access to the individual namespaces when deploying resources to",
    "start": "1348080",
    "end": "1353240"
  },
  {
    "text": "and we achieved this through individual role bindings in each of the namespaces give the service account right access to",
    "start": "1353240",
    "end": "1358940"
  },
  {
    "text": "the namespaces themselves and this limits the blast radius to just the namespaces that are supposed to be managed by Argo CD themselves so we can",
    "start": "1358940",
    "end": "1366440"
  },
  {
    "text": "do better actually we can remove Secrets especially if you use some sort of Vault integration to provision Kate Secrets",
    "start": "1366440",
    "end": "1372020"
  },
  {
    "text": "separate from Argo CD on namespaces so argocity does not need to read secrets to the cluster level we can also remove",
    "start": "1372020",
    "end": "1377659"
  },
  {
    "text": "secrets from the right access that it needs for namespaces itself because again Argo C is not deploying Secrets as",
    "start": "1377659",
    "end": "1384440"
  },
  {
    "text": "mentioned earlier though how do we prevent the cluster bulk rate from erroring out when it's trying to sync and we do that through exclusions we",
    "start": "1384440",
    "end": "1390500"
  },
  {
    "text": "tell argocd please ignore secrets on this cluster or on all remote clusters and it will do that and so you won't",
    "start": "1390500",
    "end": "1395960"
  },
  {
    "text": "have any issues when trying to sync or any errors when trying to deploy to a remote cluster",
    "start": "1395960",
    "end": "1401299"
  },
  {
    "text": "so the result of this isolation of The Argosy operator is that we end up with a more secure Hub and spoke model and by",
    "start": "1401299",
    "end": "1407240"
  },
  {
    "text": "extension clients they can't do as much on the connected remote clusters that are shared between",
    "start": "1407240",
    "end": "1412520"
  },
  {
    "text": "them so we've explored access and isolation for Argo workflows in Argo CD and I've",
    "start": "1412520",
    "end": "1417980"
  },
  {
    "text": "seen that clients have various repositories that are involved in line with the git Ops model that we follow",
    "start": "1417980",
    "end": "1423400"
  },
  {
    "text": "clients have an application repository that's running application code they also have a deploy repository that",
    "start": "1423400",
    "end": "1428960"
  },
  {
    "text": "contains service manifests for the actual running service and Cates resources on the remote cluster as well as workflow manifest for the cicd",
    "start": "1428960",
    "end": "1435500"
  },
  {
    "text": "pipelines that they're running on the Hub cluster so unlike the shared instances of Argo workflows and Argo CD these resources",
    "start": "1435500",
    "end": "1441620"
  },
  {
    "text": "are actually client owned so how does IDP help distribute fixes updates maintenance to these client-owned",
    "start": "1441620",
    "end": "1447320"
  },
  {
    "text": "repositories that can drift over time well the answer here is that we try to centralize what we can and so for the",
    "start": "1447320",
    "end": "1454100"
  },
  {
    "text": "application code for example we provide generation templates that can be used to help clients spin up more quickly in terms of their application code",
    "start": "1454100",
    "end": "1461120"
  },
  {
    "text": "for the CI CD resources and the service case manifest we use our own repositories and we connect them because",
    "start": "1461120",
    "end": "1467659"
  },
  {
    "text": "everything's a home chart so we can use Helm dependencies to automatically pull in any changes that we deploy to our",
    "start": "1467659",
    "end": "1473960"
  },
  {
    "text": "centrally managed name to our centrally managed repositories themselves and we actually use semantic versioning",
    "start": "1473960",
    "end": "1480860"
  },
  {
    "text": "in order to achieve this in a more seamless way so Helm supports semantic versioning which is a system where",
    "start": "1480860",
    "end": "1486200"
  },
  {
    "text": "version numbers actually convey meaning about things like backward compatibility and breaking changes through semantic",
    "start": "1486200",
    "end": "1492140"
  },
  {
    "text": "versioning client Helm charts actually configured to automatically pull in minor or patch releases made on the",
    "start": "1492140",
    "end": "1497539"
  },
  {
    "text": "idp-owned repositories of course minor patch releases they have to be Backward Compatible which is what makes them",
    "start": "1497539",
    "end": "1503120"
  },
  {
    "text": "minor or patch releases and here are some examples of what such a release would look like the first is a patch",
    "start": "1503120",
    "end": "1508460"
  },
  {
    "text": "that moves from 1.2.3 to 1.2.4 and the second is one that moves from 1.2.3 to",
    "start": "1508460",
    "end": "1514039"
  },
  {
    "text": "1.3.0 both such releases made for IDP Helm charts on the right would automatically",
    "start": "1514039",
    "end": "1520400"
  },
  {
    "text": "be pulled into the chart Helm Helm charts on the left due to semantic version integration this is powerful",
    "start": "1520400",
    "end": "1526159"
  },
  {
    "text": "because it allows us to get critical security updates fixes best practices out to clients immediately provided that",
    "start": "1526159",
    "end": "1532159"
  },
  {
    "text": "these are all Backward Compatible now what do we do if a change that we would like to push out the clients is",
    "start": "1532159",
    "end": "1537860"
  },
  {
    "text": "not Backward Compatible and contains breaking changes well semantic versioning allows us to do this through",
    "start": "1537860",
    "end": "1543200"
  },
  {
    "text": "the major version releases this requires clients to manually bump the version of the IDP Helm dependency",
    "start": "1543200",
    "end": "1550159"
  },
  {
    "text": "that they're using inside their own repositories we usually try to include release notes on the breaking change and",
    "start": "1550159",
    "end": "1556100"
  },
  {
    "text": "once clients make the necessary adjustments if any to accommodate these changes they can immediately pull in all the work and fixes that we've made",
    "start": "1556100",
    "end": "1562460"
  },
  {
    "text": "inside our dependency that we control here's an example of a major release change and what it looks like moving",
    "start": "1562460",
    "end": "1568159"
  },
  {
    "text": "from 1.1.0 to 2.0.0 and here's an example of what a client's",
    "start": "1568159",
    "end": "1574279"
  },
  {
    "text": "chart.yaml looks like that shows how we use Helm dependencies with semantic versioning we can see the name version",
    "start": "1574279",
    "end": "1579679"
  },
  {
    "text": "and repository that the IDP owned Helm dependency here corresponds to we can also see a carrot to the left of the",
    "start": "1579679",
    "end": "1585919"
  },
  {
    "text": "version number in semantic versioning this means please keep me updated to the latest compatible version which roughly",
    "start": "1585919",
    "end": "1593299"
  },
  {
    "text": "translates to what we're trying to do is please pull in all minor or patch versions but don't automatically pull in",
    "start": "1593299",
    "end": "1598880"
  },
  {
    "text": "major versions let me do that this is what it looks like in a client's Repository",
    "start": "1598880",
    "end": "1604880"
  },
  {
    "text": "so as we build out multi-terrain architecture how do we prepare for heavy load that may appear as we scale up",
    "start": "1604880",
    "end": "1610640"
  },
  {
    "text": "well for high availability the Argo workflow documentation is actually quite great and it details improvements such",
    "start": "1610640",
    "end": "1615679"
  },
  {
    "text": "as pod disruption budgets and minimum replica counts for the Argo server and this helps generally improve the",
    "start": "1615679",
    "end": "1621799"
  },
  {
    "text": "components inside the Argo workflows installation as we onboarded more clients running workflows in different",
    "start": "1621799",
    "end": "1626960"
  },
  {
    "text": "namespaces on the Hub cluster we noticed that it helped to mirror common images that were being used across the",
    "start": "1626960",
    "end": "1632840"
  },
  {
    "text": "workflows in the hub cluster and this was because if all the workflows are pulling in images at the same time we",
    "start": "1632840",
    "end": "1638299"
  },
  {
    "text": "quickly hit Docker Hub or rate limits in general so mirroring them to our own internal repositories was quite useful",
    "start": "1638299",
    "end": "1644000"
  },
  {
    "text": "for us we also increase the workflow executor's default resource allocations for CPU and",
    "start": "1644000",
    "end": "1650419"
  },
  {
    "text": "memory since this was limiting the size of the artifacts that clients were passing through or between workflow",
    "start": "1650419",
    "end": "1655760"
  },
  {
    "text": "tasks themselves and we also increased the default main container resource",
    "start": "1655760",
    "end": "1660860"
  },
  {
    "text": "allocation to accommodate more resource intensive workflows the main container is the the containers is actually",
    "start": "1660860",
    "end": "1666080"
  },
  {
    "text": "running the task on the other hand since we've removed or increased these limits we also needed to",
    "start": "1666080",
    "end": "1672080"
  },
  {
    "text": "be able to limit what a client workflow itself could consume on the cluster and we did this through namespace level quotas that limit the impact a single",
    "start": "1672080",
    "end": "1680000"
  },
  {
    "text": "client can have on the resources being shared by all the clients on the Hub cluster running workflows",
    "start": "1680000",
    "end": "1685760"
  },
  {
    "text": "Argo workflows provides Prometheus metrics relating to workflow controller State and also provides support for",
    "start": "1685760",
    "end": "1691400"
  },
  {
    "text": "custom metrics at the workflow or template level documentation on the default metrics exposed and how to",
    "start": "1691400",
    "end": "1696679"
  },
  {
    "text": "create custom ones as well as example grafana dashboards are available online as well and they're great",
    "start": "1696679",
    "end": "1702679"
  },
  {
    "text": "we encounter similar challenges when scaling our OCD but for different reasons the Argo City documentation has",
    "start": "1702679",
    "end": "1708919"
  },
  {
    "text": "well documentation documented High availability configurations settings for",
    "start": "1708919",
    "end": "1714080"
  },
  {
    "text": "each of the Argo CD components and also a conveniently packaged ha release",
    "start": "1714080",
    "end": "1719419"
  },
  {
    "text": "itself that we actually use as we onboarded more clients we switched",
    "start": "1719419",
    "end": "1724760"
  },
  {
    "text": "to using GitHub apps to register repositories uh this was both due to the fact that GitHub apps have higher rate",
    "start": "1724760",
    "end": "1730760"
  },
  {
    "text": "limits than generic users or personal access tokens that you may be trying to clone from for example when Argo CD is",
    "start": "1730760",
    "end": "1736880"
  },
  {
    "text": "tracking stayed in git and also because it actually reduces client friction instead of having to generate a deploy",
    "start": "1736880",
    "end": "1743960"
  },
  {
    "text": "repo clients don't need to do anything except install the GitHub app on their repository and we already have the",
    "start": "1743960",
    "end": "1749720"
  },
  {
    "text": "GitHub app credentials so we can go ahead and use that to clone the repository so that's one last step for clients as well",
    "start": "1749720",
    "end": "1755360"
  },
  {
    "text": "as we scale up we also looked into issues like limiting the ability for an individual client to be able to",
    "start": "1755360",
    "end": "1761539"
  },
  {
    "text": "overwhelm Argo CD resources for example with a very large repository for the Argo CD repo server and we also looked",
    "start": "1761539",
    "end": "1768380"
  },
  {
    "text": "into sharding Argo CD operators across different Hub clusters in order to help distribute the load as we start scaling",
    "start": "1768380",
    "end": "1773539"
  },
  {
    "text": "with more clients Argo City as well exposes various Prometheus metrics that are well",
    "start": "1773539",
    "end": "1779240"
  },
  {
    "text": "documented as well as for the different components such as the API server as",
    "start": "1779240",
    "end": "1785240"
  },
  {
    "text": "well as the application controller operations and these are great for monitoring and they also include",
    "start": "1785240",
    "end": "1791779"
  },
  {
    "text": "examples of grafana dashboards online so here you can see our own grafana",
    "start": "1791779",
    "end": "1797000"
  },
  {
    "text": "dashboards that draw on the metrics available for Argo workflows in Argo CD and these really do help as you scale up",
    "start": "1797000",
    "end": "1802940"
  },
  {
    "text": "because you can catch problems early as you debug them so to recap multi-tenancy and Argo",
    "start": "1802940",
    "end": "1809480"
  },
  {
    "text": "workflows and Argo CD have similar challenges but are addressed differently because there are different tools with different features we saw how these",
    "start": "1809480",
    "end": "1816080"
  },
  {
    "text": "existing features are leveraged today at Adobe with Git Ops for a multi-tenant architecture that scales well with more",
    "start": "1816080",
    "end": "1821840"
  },
  {
    "text": "clients and keeps clients isolated from each other provides them with scoped access to their own resources and helps",
    "start": "1821840",
    "end": "1828080"
  },
  {
    "text": "us maintain a distributed support framework that helps clients continue to accelerate and this generally supports",
    "start": "1828080",
    "end": "1834020"
  },
  {
    "text": "the ability of the internal developer platform at Adobe to create a CI CD experience that remains",
    "start": "1834020",
    "end": "1840380"
  },
  {
    "text": "flexible for different use cases and represents a force multiplier for all of our developer teams thank you for your",
    "start": "1840380",
    "end": "1847100"
  },
  {
    "text": "time [Applause]",
    "start": "1847100",
    "end": "1852200"
  },
  {
    "text": "please provide feedback thank you",
    "start": "1854380",
    "end": "1858399"
  },
  {
    "text": "any questions feel free yeah",
    "start": "1860779",
    "end": "1864940"
  },
  {
    "text": "hi thanks for the great talk just a quick question about the authentication and Azure ad",
    "start": "1870860",
    "end": "1876340"
  },
  {
    "text": "I think in your in your diagram I caught that you just showed the the user",
    "start": "1876340",
    "end": "1881779"
  },
  {
    "text": "presenting to workflows a bearer token when they log in I was curious how does that process the",
    "start": "1881779",
    "end": "1888500"
  },
  {
    "text": "authentication process work where did they get that token how is the single sign-on done yeah uh let me just",
    "start": "1888500",
    "end": "1894260"
  },
  {
    "text": "actually go ahead and just find that real quick",
    "start": "1894260",
    "end": "1898059"
  },
  {
    "text": "yeah so the token itself so that's what the CLI acts oh the question was uh where do users get the",
    "start": "1902480",
    "end": "1908659"
  },
  {
    "text": "token in order to access the Argo workflows CLI um because we showed this this is",
    "start": "1908659",
    "end": "1915679"
  },
  {
    "text": "yeah because this is the UI but we showed the perspective from a client's a client's",
    "start": "1915679",
    "end": "1923120"
  },
  {
    "text": "perspective so where do they get that token so two ways they get it from their Cube config which uh the internal",
    "start": "1923120",
    "end": "1929179"
  },
  {
    "text": "developer platform provides and that's one way so they have this Cube config that's exported locally and that's",
    "start": "1929179",
    "end": "1934220"
  },
  {
    "text": "present so the client is even aware of this they just go ahead and run Argo commands it automatically uses the",
    "start": "1934220",
    "end": "1939860"
  },
  {
    "text": "exported cubeconfig and it just works for them that's one the other way is if they actually have any Bearer token if",
    "start": "1939860",
    "end": "1946460"
  },
  {
    "text": "they have a service account token if they have any kids token they can actually include it in the CLI request",
    "start": "1946460",
    "end": "1952640"
  },
  {
    "text": "as an additional flag right but usually the first use case is the more common one because most of our clients have q",
    "start": "1952640",
    "end": "1958640"
  },
  {
    "text": "config yaml files available that are exported locally that allow them to access the cluster itself there are",
    "start": "1958640",
    "end": "1965480"
  },
  {
    "text": "scope to their namespaces yeah great question thank you um you mentioned that um Argo CD doesn't",
    "start": "1965480",
    "end": "1971720"
  },
  {
    "text": "create the namespaces what creates the namespaces and how do you manage those that is a great question um it does not uh so we have a",
    "start": "1971720",
    "end": "1979279"
  },
  {
    "text": "tool uh as well as uh another uh Team itself that sort of helps us standardize namespace Creations uh it's a",
    "start": "1979279",
    "end": "1985820"
  },
  {
    "text": "provisioner tool um and that sort of uh integrates with Argo CD as well and the GitHub uh git",
    "start": "1985820",
    "end": "1991399"
  },
  {
    "text": "Ops model itself to create and manage those namespaces so that they're isolated from clients that's a great question thank you",
    "start": "1991399",
    "end": "1998559"
  },
  {
    "text": "uh so I've seen people use the Argo CD operator as well as like a management cluster pattern where you're using one",
    "start": "2004360",
    "end": "2011559"
  },
  {
    "text": "Argo CD instance to deploy to multiple clusters I'm kind of wondering uh what your options analysis was and you know",
    "start": "2011559",
    "end": "2017679"
  },
  {
    "text": "maybe why you switched or why you use the Argosy operator because I think it's a little bit less common and if it's a",
    "start": "2017679",
    "end": "2024039"
  },
  {
    "text": "performance like related issue if you can maybe say roughly like where you hit that performance uh sort of bottleneck",
    "start": "2024039",
    "end": "2030760"
  },
  {
    "text": "and made the switch Yeah so just just to clarify uh you're referring to having an",
    "start": "2030760",
    "end": "2035799"
  },
  {
    "text": "Argo City operator in the hub cluster and so on namespace versus a separate one for each of the each of the clients",
    "start": "2035799",
    "end": "2041860"
  },
  {
    "text": "right that that's that's what you're doing thing yeah yeah exactly like a single Argosy instance doing the",
    "start": "2041860",
    "end": "2048339"
  },
  {
    "text": "deployments versus multiple yeah so I guess uh the thinking here was we would evaluate that as we scale and see if",
    "start": "2048339",
    "end": "2054580"
  },
  {
    "text": "it's necessary so first we wanted to start out with seeing if we could Shard across multiple Hub clusters which is slightly you know one step lower than",
    "start": "2054580",
    "end": "2060760"
  },
  {
    "text": "what you were mentioning and see if that could actually scale well but I think probably you're also bringing up because",
    "start": "2060760",
    "end": "2066099"
  },
  {
    "text": "of the security concerns that they have on the security blog about you know uh our back not being a silver bullet and",
    "start": "2066099",
    "end": "2071320"
  },
  {
    "text": "stuff like that but generally I think when we were building this out the main consideration we have was how do we help",
    "start": "2071320",
    "end": "2078638"
  },
  {
    "text": "uh consolidate maintenance and um best practices and simplify things for",
    "start": "2078639",
    "end": "2084040"
  },
  {
    "text": "clients as while providing a secure experience so because we had the r back and because it provides secure",
    "start": "2084040",
    "end": "2089740"
  },
  {
    "text": "experience and it simplified things so that's a great question if I can extend just a little bit I think one thing I've",
    "start": "2089740",
    "end": "2095500"
  },
  {
    "text": "seen is like people looking at trying to get a single pane of glass for sort of deployments across like an sdlc if your",
    "start": "2095500",
    "end": "2102040"
  },
  {
    "text": "setup's not like that like you know I've seen setups where you have like a Dev cluster and product cluster and the same",
    "start": "2102040",
    "end": "2107200"
  },
  {
    "text": "versions of applications deployed to both so if you have one instance then you have that but I'm wondering are you",
    "start": "2107200",
    "end": "2112420"
  },
  {
    "text": "tracking applications like through a set of clusters or are they kind of like orthogonal",
    "start": "2112420",
    "end": "2117640"
  },
  {
    "text": "uh sorry what was that last part or are they kind of what really orthogonal like completely separate yeah so um I'm not",
    "start": "2117640",
    "end": "2124119"
  },
  {
    "text": "sure if I caught the entirety of the first part sorry about that but uh all the Argo CD applications are technically",
    "start": "2124119",
    "end": "2129400"
  },
  {
    "text": "living inside the installation namespace on the Hub cluster um so it's it's being tracked by the arbor City operator on the Hub cluster",
    "start": "2129400",
    "end": "2135760"
  },
  {
    "text": "but those applications of course are deploying onto remote clusters um themselves I'm uh we can also talk",
    "start": "2135760",
    "end": "2142540"
  },
  {
    "text": "offline because I feel like I might have missed something important in the first like sentence or so and that's I'm sorry about that yeah",
    "start": "2142540",
    "end": "2149020"
  },
  {
    "text": "yeah a great presentation so I have a question like you create the",
    "start": "2149020",
    "end": "2154599"
  },
  {
    "text": "name Space by different tools uh I think you can use a cross plane but right now we use this terraform and we have a",
    "start": "2154599",
    "end": "2161680"
  },
  {
    "text": "resource quotas um on the top of namespace but when you deploy using the the Argo workflows or",
    "start": "2161680",
    "end": "2169180"
  },
  {
    "text": "the uh the task basically I mean have you ever seen like any problems you hit the quota's and all yeah that's that's",
    "start": "2169180",
    "end": "2176440"
  },
  {
    "text": "true we have so that was part of why we had to modify the resource allocations out of the box for the workflow executor",
    "start": "2176440",
    "end": "2182680"
  },
  {
    "text": "so both for the main containers as well as the executor itself when you modify the resource allocation for the executor",
    "start": "2182680",
    "end": "2188440"
  },
  {
    "text": "that automatically uh trickles down to the init container as well as the weight containers that are sometimes affecting",
    "start": "2188440",
    "end": "2194380"
  },
  {
    "text": "whether or not the workflow task will run properly and then the main container itself is just where the task runs but",
    "start": "2194380",
    "end": "2200980"
  },
  {
    "text": "that's part of why we did that the namespace level quotas that we enforce are configurable so teams if they think",
    "start": "2200980",
    "end": "2206920"
  },
  {
    "text": "that you know they're running very heavy workloads they can actually actually come to us through a process a process in place for them to increase that but",
    "start": "2206920",
    "end": "2213640"
  },
  {
    "text": "we have seen issues and that's why with the workflow level resources themselves and that's why we had to change those",
    "start": "2213640",
    "end": "2219099"
  },
  {
    "text": "limits to just accommodate okay I'm yet not an Argo customer but are there any",
    "start": "2219099",
    "end": "2225280"
  },
  {
    "text": "specific reason that you are installing not utilizing the SAS platform for Argo",
    "start": "2225280",
    "end": "2231820"
  },
  {
    "text": "uh sorry again the last three words I think I'm saying like you are installing",
    "start": "2231820",
    "end": "2237280"
  },
  {
    "text": "Argo CD in your cluster yep right I mean are there any limitations in the the SAS",
    "start": "2237280",
    "end": "2243099"
  },
  {
    "text": "environment for the Argo which well uh I think I touched on the provisioner earlier uh we just it just",
    "start": "2243099",
    "end": "2250180"
  },
  {
    "text": "gives us more granular control over how we manage certain parts of our architecture I think again as we scale",
    "start": "2250180",
    "end": "2256180"
  },
  {
    "text": "up I think we're still looking to grow we have a good multi-terrent architecture right now we're satisfied",
    "start": "2256180",
    "end": "2261640"
  },
  {
    "text": "with but depending on the needs of our clients and as you can see we have a lot of different use cases we might very",
    "start": "2261640",
    "end": "2267160"
  },
  {
    "text": "well change uh based on where that direction goes but for now I think really we wanted flexibility that was",
    "start": "2267160",
    "end": "2273400"
  },
  {
    "text": "the main that was the main point yeah oh yeah okay and I'm getting the uh feel",
    "start": "2273400",
    "end": "2280180"
  },
  {
    "text": "free to come up I'll be in the hallway it's lunchtime uh thanks thanks for thanks for attending",
    "start": "2280180",
    "end": "2286680"
  }
]