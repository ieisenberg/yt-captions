[
  {
    "text": "hi there thank you for taking the time",
    "start": "840",
    "end": "2760"
  },
  {
    "text": "to attend this presentation my name is",
    "start": "2760",
    "end": "5440"
  },
  {
    "text": "Prana of Mara and today I'm going to be",
    "start": "5440",
    "end": "8240"
  },
  {
    "text": "talking to you about how you can get",
    "start": "8240",
    "end": "10040"
  },
  {
    "text": "more out of Lua influent bit",
    "start": "10040",
    "end": "13080"
  },
  {
    "text": "specifically this is what I'm going to",
    "start": "13080",
    "end": "14920"
  },
  {
    "text": "cover today after briefly introducing",
    "start": "14920",
    "end": "17760"
  },
  {
    "text": "myself I'm going to talk about the",
    "start": "17760",
    "end": "19760"
  },
  {
    "text": "motivation behind this talk go over the",
    "start": "19760",
    "end": "22359"
  },
  {
    "text": "basics of using Lua influent bit walked",
    "start": "22359",
    "end": "25560"
  },
  {
    "text": "through some example programs provide",
    "start": "25560",
    "end": "28199"
  },
  {
    "text": "some general tips and finally wrap up",
    "start": "28199",
    "end": "31640"
  },
  {
    "text": "with a list of helpful resources as well",
    "start": "31640",
    "end": "34040"
  },
  {
    "text": "as my contact information to start a few",
    "start": "34040",
    "end": "37399"
  },
  {
    "text": "words about myself I am a senior",
    "start": "37399",
    "end": "40239"
  },
  {
    "text": "software engineer at Fidelity",
    "start": "40239",
    "end": "42160"
  },
  {
    "text": "Investments where I build solutions that",
    "start": "42160",
    "end": "44600"
  },
  {
    "text": "allow other teams of fidelity to monitor",
    "start": "44600",
    "end": "46920"
  },
  {
    "text": "their applications running in the cloud",
    "start": "46920",
    "end": "49559"
  },
  {
    "text": "over the course of my work I've gained",
    "start": "49559",
    "end": "51280"
  },
  {
    "text": "experience with a variety of Open Source",
    "start": "51280",
    "end": "53239"
  },
  {
    "text": "tools including kubernetes Helm fluent D",
    "start": "53239",
    "end": "56680"
  },
  {
    "text": "and fluent bit most importantly the",
    "start": "56680",
    "end": "59280"
  },
  {
    "text": "question on everyone's Minds no sadly",
    "start": "59280",
    "end": "62440"
  },
  {
    "text": "those are not my cats next up let's talk",
    "start": "62440",
    "end": "66080"
  },
  {
    "text": "about the motivation behind this",
    "start": "66080",
    "end": "67759"
  },
  {
    "text": "presentation as you all know fluent bit",
    "start": "67759",
    "end": "70640"
  },
  {
    "text": "has many filters that allow you to",
    "start": "70640",
    "end": "72680"
  },
  {
    "text": "extend its",
    "start": "72680",
    "end": "74000"
  },
  {
    "text": "functionality of those filters the most",
    "start": "74000",
    "end": "76680"
  },
  {
    "text": "powerful one is the Lua filter the Lua",
    "start": "76680",
    "end": "79720"
  },
  {
    "text": "filter lets you call a custom script",
    "start": "79720",
    "end": "82040"
  },
  {
    "text": "written in a programming language called",
    "start": "82040",
    "end": "83600"
  },
  {
    "text": "Lua on each matching record this means",
    "start": "83600",
    "end": "87119"
  },
  {
    "text": "that unlike the other filters which all",
    "start": "87119",
    "end": "89360"
  },
  {
    "text": "have very specific predefined",
    "start": "89360",
    "end": "91439"
  },
  {
    "text": "functionality the Lua filters",
    "start": "91439",
    "end": "93360"
  },
  {
    "text": "functionality is essentially Limitless",
    "start": "93360",
    "end": "95720"
  },
  {
    "text": "since just calls whatever program you",
    "start": "95720",
    "end": "97640"
  },
  {
    "text": "write in theory you're constrained only",
    "start": "97640",
    "end": "100399"
  },
  {
    "text": "by your",
    "start": "100399",
    "end": "101320"
  },
  {
    "text": "imagination in practice though in my",
    "start": "101320",
    "end": "103680"
  },
  {
    "text": "experience this incredibly powerful",
    "start": "103680",
    "end": "105960"
  },
  {
    "text": "feature is criminally underutilized if",
    "start": "105960",
    "end": "108880"
  },
  {
    "text": "people use it at all they tend to limit",
    "start": "108880",
    "end": "111399"
  },
  {
    "text": "themselves to making minor tweaks to the",
    "start": "111399",
    "end": "113560"
  },
  {
    "text": "existing sampler programs provided in",
    "start": "113560",
    "end": "115920"
  },
  {
    "text": "the fluent bit",
    "start": "115920",
    "end": "117439"
  },
  {
    "text": "documentation to get an idea of why this",
    "start": "117439",
    "end": "119640"
  },
  {
    "text": "is let's look at the most recent toobi",
    "start": "119640",
    "end": "122200"
  },
  {
    "text": "index and red monk rankings they have",
    "start": "122200",
    "end": "125280"
  },
  {
    "text": "two things in common one they are both",
    "start": "125280",
    "end": "127759"
  },
  {
    "text": "measures of programming language",
    "start": "127759",
    "end": "129319"
  },
  {
    "text": "popularity and two Lua doesn't appear in",
    "start": "129319",
    "end": "132560"
  },
  {
    "text": "the top 10 or even the top 20 of either",
    "start": "132560",
    "end": "135280"
  },
  {
    "text": "of them in fact if we want to find Lua",
    "start": "135280",
    "end": "137959"
  },
  {
    "text": "in the toobi index we need to go down",
    "start": "137959",
    "end": "140160"
  },
  {
    "text": "the list all the way to number 39 below",
    "start": "140160",
    "end": "143280"
  },
  {
    "text": "Ada Lis and Cobalt and I believe this is",
    "start": "143280",
    "end": "147000"
  },
  {
    "text": "the Crux of the issue the average user",
    "start": "147000",
    "end": "149599"
  },
  {
    "text": "is unfamiliar with the Lua programming",
    "start": "149599",
    "end": "151640"
  },
  {
    "text": "language and because of that finds it",
    "start": "151640",
    "end": "154400"
  },
  {
    "text": "too intimidating to stray outside the",
    "start": "154400",
    "end": "156440"
  },
  {
    "text": "guard rails or the sample",
    "start": "156440",
    "end": "158120"
  },
  {
    "text": "scripts now over the course of my work",
    "start": "158120",
    "end": "160599"
  },
  {
    "text": "with laa I had to do just that and I",
    "start": "160599",
    "end": "163760"
  },
  {
    "text": "ended up spending considerable time and",
    "start": "163760",
    "end": "165599"
  },
  {
    "text": "effort trolling through manuals and just",
    "start": "165599",
    "end": "168080"
  },
  {
    "text": "going through a lot of trial and error",
    "start": "168080",
    "end": "170080"
  },
  {
    "text": "so my hope is that by sharing what I've",
    "start": "170080",
    "end": "172440"
  },
  {
    "text": "learned I can spare you that effort and",
    "start": "172440",
    "end": "174800"
  },
  {
    "text": "make your Lua Journey",
    "start": "174800",
    "end": "176640"
  },
  {
    "text": "smoother let's start by going over the",
    "start": "176640",
    "end": "179159"
  },
  {
    "text": "basics the Lua filter INF fluent bit",
    "start": "179159",
    "end": "182040"
  },
  {
    "text": "takes two main parameters the name of",
    "start": "182040",
    "end": "184599"
  },
  {
    "text": "the file containing your Lua program as",
    "start": "184599",
    "end": "187159"
  },
  {
    "text": "well as the name of the specific",
    "start": "187159",
    "end": "188720"
  },
  {
    "text": "function that you want fluent bit to",
    "start": "188720",
    "end": "190640"
  },
  {
    "text": "call on each record matched by the",
    "start": "190640",
    "end": "192599"
  },
  {
    "text": "filter for those of you who don't know",
    "start": "192599",
    "end": "194560"
  },
  {
    "text": "what a record is every input log is",
    "start": "194560",
    "end": "196959"
  },
  {
    "text": "represented in fluent bit as a",
    "start": "196959",
    "end": "198440"
  },
  {
    "text": "structured collection of key value pairs",
    "start": "198440",
    "end": "201040"
  },
  {
    "text": "which we call a record the Luma function",
    "start": "201040",
    "end": "203680"
  },
  {
    "text": "takes three arguments which are",
    "start": "203680",
    "end": "205200"
  },
  {
    "text": "automatically supplied by fluent bit",
    "start": "205200",
    "end": "207120"
  },
  {
    "text": "every time it calls a function on a",
    "start": "207120",
    "end": "208599"
  },
  {
    "text": "matching record the first argument is a",
    "start": "208599",
    "end": "211200"
  },
  {
    "text": "flu bit tag associated with the record",
    "start": "211200",
    "end": "214000"
  },
  {
    "text": "the second is the fluent bit timestamp",
    "start": "214000",
    "end": "216040"
  },
  {
    "text": "associated with the record formatted as",
    "start": "216040",
    "end": "218000"
  },
  {
    "text": "an Epoch timestamp with nanc resolution",
    "start": "218000",
    "end": "221120"
  },
  {
    "text": "and the third and final argument is the",
    "start": "221120",
    "end": "223080"
  },
  {
    "text": "record itself formatted as a lower table",
    "start": "223080",
    "end": "226200"
  },
  {
    "text": "for those of you who don't know what a",
    "start": "226200",
    "end": "227239"
  },
  {
    "text": "lower table is it's an associative array",
    "start": "227239",
    "end": "230040"
  },
  {
    "text": "which is essentially also a structured",
    "start": "230040",
    "end": "232040"
  },
  {
    "text": "collection of key value pairs so for",
    "start": "232040",
    "end": "234840"
  },
  {
    "text": "example let's say we have the following",
    "start": "234840",
    "end": "236760"
  },
  {
    "text": "input log representing in fluent bit as",
    "start": "236760",
    "end": "239280"
  },
  {
    "text": "the f record associated with the",
    "start": "239280",
    "end": "241799"
  },
  {
    "text": "following record timestamp and the",
    "start": "241799",
    "end": "243920"
  },
  {
    "text": "following tag If This Record matches our",
    "start": "243920",
    "end": "246959"
  },
  {
    "text": "Lua filter then fluent bit automatically",
    "start": "246959",
    "end": "249760"
  },
  {
    "text": "calls the specified Lua function on that",
    "start": "249760",
    "end": "252000"
  },
  {
    "text": "record and supplies the associated tag",
    "start": "252000",
    "end": "254959"
  },
  {
    "text": "the equivalent EO timestamp and the",
    "start": "254959",
    "end": "257359"
  },
  {
    "text": "equivalent Lua table as",
    "start": "257359",
    "end": "260040"
  },
  {
    "text": "arguments this function also has a",
    "start": "260040",
    "end": "262400"
  },
  {
    "text": "specific format when it comes to the",
    "start": "262400",
    "end": "264280"
  },
  {
    "text": "return values in particular it always",
    "start": "264280",
    "end": "267120"
  },
  {
    "text": "returns the following three values",
    "start": "267120",
    "end": "269120"
  },
  {
    "text": "starting from the right we have a Lu",
    "start": "269120",
    "end": "271560"
  },
  {
    "text": "table representing a record an Epoch",
    "start": "271560",
    "end": "274360"
  },
  {
    "text": "timestamp and finally a return",
    "start": "274360",
    "end": "277840"
  },
  {
    "text": "code this return code is an integer",
    "start": "277840",
    "end": "280720"
  },
  {
    "text": "which tells fluent bit what to do with a",
    "start": "280720",
    "end": "282400"
  },
  {
    "text": "record that trigger this function call",
    "start": "282400",
    "end": "284400"
  },
  {
    "text": "and which effectively determines whether",
    "start": "284400",
    "end": "286320"
  },
  {
    "text": "or not the other two return values play",
    "start": "286320",
    "end": "288560"
  },
  {
    "text": "any role at all specifically if the",
    "start": "288560",
    "end": "291560"
  },
  {
    "text": "return code is minus one flu bid drops",
    "start": "291560",
    "end": "294240"
  },
  {
    "text": "the entire record if it's zero fluent",
    "start": "294240",
    "end": "296919"
  },
  {
    "text": "bid does nothing if it's one fluent bit",
    "start": "296919",
    "end": "300000"
  },
  {
    "text": "replaces both the record timestamp and",
    "start": "300000",
    "end": "302400"
  },
  {
    "text": "the record itself with the second and",
    "start": "302400",
    "end": "304759"
  },
  {
    "text": "third return values from the function",
    "start": "304759",
    "end": "307039"
  },
  {
    "text": "and finally if it's two fluin bit",
    "start": "307039",
    "end": "309440"
  },
  {
    "text": "replaces only the record itself with the",
    "start": "309440",
    "end": "311759"
  },
  {
    "text": "Third Return value from the function so",
    "start": "311759",
    "end": "314800"
  },
  {
    "text": "now that we're all clear on the basics",
    "start": "314800",
    "end": "316560"
  },
  {
    "text": "let's move on to some actual programs",
    "start": "316560",
    "end": "319039"
  },
  {
    "text": "let's start with one of the canonical",
    "start": "319039",
    "end": "320720"
  },
  {
    "text": "examples provided to us in fluent bits",
    "start": "320720",
    "end": "322840"
  },
  {
    "text": "documentation replacing the record Tim",
    "start": "322840",
    "end": "325280"
  },
  {
    "text": "stamp for example let's say we have the",
    "start": "325280",
    "end": "328080"
  },
  {
    "text": "following record with the following",
    "start": "328080",
    "end": "329919"
  },
  {
    "text": "record Tim stamp as you can see on the",
    "start": "329919",
    "end": "333080"
  },
  {
    "text": "right the record also contains another",
    "start": "333080",
    "end": "335360"
  },
  {
    "text": "timestamp within its my time field and",
    "start": "335360",
    "end": "338000"
  },
  {
    "text": "we would like that timestamp to replace",
    "start": "338000",
    "end": "340199"
  },
  {
    "text": "the record timestamp on the left we can",
    "start": "340199",
    "end": "343240"
  },
  {
    "text": "accomplish this fairly easily with a Lua",
    "start": "343240",
    "end": "345600"
  },
  {
    "text": "program first we get the value stored in",
    "start": "345600",
    "end": "348759"
  },
  {
    "text": "the my time field and save it to a",
    "start": "348759",
    "end": "350840"
  },
  {
    "text": "variable which I'll call new timestamp",
    "start": "350840",
    "end": "353880"
  },
  {
    "text": "next since we want fluin bit to replace",
    "start": "353880",
    "end": "356080"
  },
  {
    "text": "the record timestamp with new timestamp",
    "start": "356080",
    "end": "358880"
  },
  {
    "text": "we return one as our return code we",
    "start": "358880",
    "end": "361840"
  },
  {
    "text": "return new timestamp as our replacement",
    "start": "361840",
    "end": "364080"
  },
  {
    "text": "timestamp and finally even though a",
    "start": "364080",
    "end": "366680"
  },
  {
    "text": "return code of one tells fluent bit to",
    "start": "366680",
    "end": "368479"
  },
  {
    "text": "replace both the timestamp and the",
    "start": "368479",
    "end": "370520"
  },
  {
    "text": "record since in this case we don't",
    "start": "370520",
    "end": "372560"
  },
  {
    "text": "actually want to change the record we",
    "start": "372560",
    "end": "374280"
  },
  {
    "text": "just return the same original record as",
    "start": "374280",
    "end": "376919"
  },
  {
    "text": "our replacement record all right so now",
    "start": "376919",
    "end": "380639"
  },
  {
    "text": "this function does what we want but",
    "start": "380639",
    "end": "382280"
  },
  {
    "text": "let's take a closer look at it and see",
    "start": "382280",
    "end": "384199"
  },
  {
    "text": "if we can improve it first of all I",
    "start": "384199",
    "end": "386520"
  },
  {
    "text": "don't know about you but I can never",
    "start": "386520",
    "end": "388199"
  },
  {
    "text": "remember which return code means what",
    "start": "388199",
    "end": "390639"
  },
  {
    "text": "and I'm definitely not going to remember",
    "start": "390639",
    "end": "392120"
  },
  {
    "text": "6 months from now which means that",
    "start": "392120",
    "end": "393759"
  },
  {
    "text": "maintaining and debugging this code will",
    "start": "393759",
    "end": "395560"
  },
  {
    "text": "be that much harder so my first tip is",
    "start": "395560",
    "end": "398520"
  },
  {
    "text": "to replace this hard-coded integer with",
    "start": "398520",
    "end": "400680"
  },
  {
    "text": "a well-named variable in this case I'm",
    "start": "400680",
    "end": "403360"
  },
  {
    "text": "going with replace timestamp and record",
    "start": "403360",
    "end": "406960"
  },
  {
    "text": "and this applies to all programming",
    "start": "406960",
    "end": "408720"
  },
  {
    "text": "languages really your life will become a",
    "start": "408720",
    "end": "410520"
  },
  {
    "text": "lot easier once you replace all the",
    "start": "410520",
    "end": "412360"
  },
  {
    "text": "mysterious magic numbers in your code",
    "start": "412360",
    "end": "414759"
  },
  {
    "text": "with well-named",
    "start": "414759",
    "end": "416440"
  },
  {
    "text": "variables now looking at this code you",
    "start": "416440",
    "end": "418960"
  },
  {
    "text": "might notice that since this variable is",
    "start": "418960",
    "end": "421000"
  },
  {
    "text": "defined outside this function it's a",
    "start": "421000",
    "end": "422800"
  },
  {
    "text": "global variable but what you might not",
    "start": "422800",
    "end": "424919"
  },
  {
    "text": "know is that in fact new timestamp is",
    "start": "424919",
    "end": "427680"
  },
  {
    "text": "also Global variable in other words even",
    "start": "427680",
    "end": "430360"
  },
  {
    "text": "though I've defined it inside this",
    "start": "430360",
    "end": "431840"
  },
  {
    "text": "function its scope is not limited to",
    "start": "431840",
    "end": "434039"
  },
  {
    "text": "this function in fact in Lua unlike in",
    "start": "434039",
    "end": "437000"
  },
  {
    "text": "other languages by default all variables",
    "start": "437000",
    "end": "439479"
  },
  {
    "text": "are Global variables and this brings us",
    "start": "439479",
    "end": "441960"
  },
  {
    "text": "to my next tip wherever possible use",
    "start": "441960",
    "end": "445039"
  },
  {
    "text": "local variables instead of global",
    "start": "445039",
    "end": "446759"
  },
  {
    "text": "variables this is because Global",
    "start": "446759",
    "end": "448800"
  },
  {
    "text": "variables can make make your code harder",
    "start": "448800",
    "end": "450400"
  },
  {
    "text": "to reason about and more error prone and",
    "start": "450400",
    "end": "453240"
  },
  {
    "text": "in Lua it's slower to access a global",
    "start": "453240",
    "end": "455720"
  },
  {
    "text": "variable than it is to access a local",
    "start": "455720",
    "end": "458080"
  },
  {
    "text": "one so how do we do this in Lua the way",
    "start": "458080",
    "end": "462080"
  },
  {
    "text": "you declare a local variable is by",
    "start": "462080",
    "end": "463720"
  },
  {
    "text": "adding the word local in front of it",
    "start": "463720",
    "end": "465680"
  },
  {
    "text": "which takes care of new time stamp as",
    "start": "465680",
    "end": "468000"
  },
  {
    "text": "for the variable above it when you want",
    "start": "468000",
    "end": "470000"
  },
  {
    "text": "to reference an existing Global variable",
    "start": "470000",
    "end": "472199"
  },
  {
    "text": "inside your function a common pattern in",
    "start": "472199",
    "end": "474400"
  },
  {
    "text": "Lua is to declare a local variable with",
    "start": "474400",
    "end": "476520"
  },
  {
    "text": "the same name so that it Shadows the",
    "start": "476520",
    "end": "478720"
  },
  {
    "text": "global variable",
    "start": "478720",
    "end": "479960"
  },
  {
    "text": "so now when we reference replace",
    "start": "479960",
    "end": "482159"
  },
  {
    "text": "timestamp and record inside the function",
    "start": "482159",
    "end": "484560"
  },
  {
    "text": "we're actually referencing the local",
    "start": "484560",
    "end": "486120"
  },
  {
    "text": "variable and this is good because not",
    "start": "486120",
    "end": "488280"
  },
  {
    "text": "only is it faster to access but even if",
    "start": "488280",
    "end": "490879"
  },
  {
    "text": "another function accidentally changes",
    "start": "490879",
    "end": "492680"
  },
  {
    "text": "the value of the global variable we now",
    "start": "492680",
    "end": "494919"
  },
  {
    "text": "have a copy of its original value",
    "start": "494919",
    "end": "497120"
  },
  {
    "text": "preserved in the local",
    "start": "497120",
    "end": "498720"
  },
  {
    "text": "variable now let's consider a more",
    "start": "498720",
    "end": "501120"
  },
  {
    "text": "advanced example let's say you want to",
    "start": "501120",
    "end": "503360"
  },
  {
    "text": "generate a new timestamp every time",
    "start": "503360",
    "end": "505240"
  },
  {
    "text": "fluen bit processes a log and then",
    "start": "505240",
    "end": "507639"
  },
  {
    "text": "inject that timestamp into the record as",
    "start": "507639",
    "end": "509800"
  },
  {
    "text": "a new field one reason you might want to",
    "start": "509800",
    "end": "512240"
  },
  {
    "text": "do this is if your flu bit collector is",
    "start": "512240",
    "end": "514320"
  },
  {
    "text": "just one part of a distributed log",
    "start": "514320",
    "end": "516360"
  },
  {
    "text": "pipeline in which case debugging any",
    "start": "516360",
    "end": "518599"
  },
  {
    "text": "delays in that pipeline can be tricky",
    "start": "518599",
    "end": "520599"
  },
  {
    "text": "when the only information contained",
    "start": "520599",
    "end": "522240"
  },
  {
    "text": "within your log is when it was first",
    "start": "522240",
    "end": "524640"
  },
  {
    "text": "created however if your log contains",
    "start": "524640",
    "end": "527080"
  },
  {
    "text": "another Tim stamp letting you know when",
    "start": "527080",
    "end": "529080"
  },
  {
    "text": "it was subsequently processed by fluent",
    "start": "529080",
    "end": "530880"
  },
  {
    "text": "bit then that can help you narrow down",
    "start": "530880",
    "end": "532800"
  },
  {
    "text": "where the delay is coming",
    "start": "532800",
    "end": "534399"
  },
  {
    "text": "from at first glance this seems fairly",
    "start": "534399",
    "end": "537200"
  },
  {
    "text": "simple to accomplish with Lua for every",
    "start": "537200",
    "end": "539440"
  },
  {
    "text": "every record we create a new field let's",
    "start": "539440",
    "end": "541600"
  },
  {
    "text": "call it collector timestamp and we set",
    "start": "541600",
    "end": "543760"
  },
  {
    "text": "it equal to the current time so the",
    "start": "543760",
    "end": "546160"
  },
  {
    "text": "question then becomes how do we get the",
    "start": "546160",
    "end": "548160"
  },
  {
    "text": "current time in Lua well there are two",
    "start": "548160",
    "end": "550880"
  },
  {
    "text": "functions that can help us here os. time",
    "start": "550880",
    "end": "553959"
  },
  {
    "text": "and os. dat os. time produces an Epoch",
    "start": "553959",
    "end": "557519"
  },
  {
    "text": "timestamp whereas os. date produces a",
    "start": "557519",
    "end": "560279"
  },
  {
    "text": "human readable timestamp unfortunately",
    "start": "560279",
    "end": "563160"
  },
  {
    "text": "as you can see they both share the same",
    "start": "563160",
    "end": "565200"
  },
  {
    "text": "problem the time stamp has only second",
    "start": "565200",
    "end": "567600"
  },
  {
    "text": "resolution and that is definitely not",
    "start": "567600",
    "end": "569640"
  },
  {
    "text": "precise enough for our needs ideally",
    "start": "569640",
    "end": "571959"
  },
  {
    "text": "what we really want is a nanc resolution",
    "start": "571959",
    "end": "574200"
  },
  {
    "text": "Tim stamp but Lua is not currently",
    "start": "574200",
    "end": "576399"
  },
  {
    "text": "capable of producing that so where do we",
    "start": "576399",
    "end": "579160"
  },
  {
    "text": "get it from well the solution I",
    "start": "579160",
    "end": "582000"
  },
  {
    "text": "eventually came up with was to force",
    "start": "582000",
    "end": "583640"
  },
  {
    "text": "fluent bit to generate it for us to",
    "start": "583640",
    "end": "586640"
  },
  {
    "text": "understand how this works let's take a",
    "start": "586640",
    "end": "588279"
  },
  {
    "text": "step back and see where fluent bit gets",
    "start": "588279",
    "end": "590720"
  },
  {
    "text": "the record time stamp from it obtains it",
    "start": "590720",
    "end": "593560"
  },
  {
    "text": "in two different ways depending on the",
    "start": "593560",
    "end": "595600"
  },
  {
    "text": "structure of the incoming log the first",
    "start": "595600",
    "end": "597800"
  },
  {
    "text": "method is when you have a structured log",
    "start": "597800",
    "end": "599640"
  },
  {
    "text": "with a well- defined Time Field like",
    "start": "599640",
    "end": "601680"
  },
  {
    "text": "this when fluent bit parses this log it",
    "start": "601680",
    "end": "604839"
  },
  {
    "text": "produces the following record with the",
    "start": "604839",
    "end": "606959"
  },
  {
    "text": "following record timestamp note that the",
    "start": "606959",
    "end": "609640"
  },
  {
    "text": "record timestamp is the same as the log",
    "start": "609640",
    "end": "611800"
  },
  {
    "text": "timestamp in other words for structured",
    "start": "611800",
    "end": "614360"
  },
  {
    "text": "logs flu bit extracts the pre-existing",
    "start": "614360",
    "end": "616839"
  },
  {
    "text": "log Tim stamp from the log and uses that",
    "start": "616839",
    "end": "619959"
  },
  {
    "text": "as a record timestamp which here",
    "start": "619959",
    "end": "622720"
  },
  {
    "text": "represents the time when the log was",
    "start": "622720",
    "end": "624440"
  },
  {
    "text": "created before it reached flu and",
    "start": "624440",
    "end": "626959"
  },
  {
    "text": "bit the second method is when you have",
    "start": "626959",
    "end": "629160"
  },
  {
    "text": "an unstructured log without a",
    "start": "629160",
    "end": "630800"
  },
  {
    "text": "well-defined Time Field like this when",
    "start": "630800",
    "end": "633519"
  },
  {
    "text": "fluen bit processes this log it produces",
    "start": "633519",
    "end": "636079"
  },
  {
    "text": "the following record with the following",
    "start": "636079",
    "end": "637880"
  },
  {
    "text": "record timestamp note that this record",
    "start": "637880",
    "end": "640320"
  },
  {
    "text": "timestamp doesn't match anything in the",
    "start": "640320",
    "end": "642079"
  },
  {
    "text": "log in other words for unstructured logs",
    "start": "642079",
    "end": "644920"
  },
  {
    "text": "since fluin bit cannot find any",
    "start": "644920",
    "end": "646639"
  },
  {
    "text": "pre-existing log time stamp to extract",
    "start": "646639",
    "end": "648920"
  },
  {
    "text": "it generates its own record time stamp",
    "start": "648920",
    "end": "650920"
  },
  {
    "text": "instead which here represents the time",
    "start": "650920",
    "end": "653880"
  },
  {
    "text": "when the log was processed by fluent bit",
    "start": "653880",
    "end": "656680"
  },
  {
    "text": "so for unstructured logs fluent bit",
    "start": "656680",
    "end": "659360"
  },
  {
    "text": "already does essentially what we want",
    "start": "659360",
    "end": "661680"
  },
  {
    "text": "the problem arises when we have",
    "start": "661680",
    "end": "663000"
  },
  {
    "text": "structured logs since there the record",
    "start": "663000",
    "end": "665079"
  },
  {
    "text": "time stamp represents the time when the",
    "start": "665079",
    "end": "666720"
  },
  {
    "text": "log was created not when it was",
    "start": "666720",
    "end": "669079"
  },
  {
    "text": "processed so what do we do well let's",
    "start": "669079",
    "end": "672560"
  },
  {
    "text": "take another look at our structured log",
    "start": "672560",
    "end": "674399"
  },
  {
    "text": "setup notice that at ingestion time we",
    "start": "674399",
    "end": "677760"
  },
  {
    "text": "configure fluent bit to parse the log",
    "start": "677760",
    "end": "679560"
  },
  {
    "text": "with an appropriate parser in this case",
    "start": "679560",
    "end": "681760"
  },
  {
    "text": "a Json parser since it's a Json log so",
    "start": "681760",
    "end": "685000"
  },
  {
    "text": "all we need to do is get rid of that",
    "start": "685000",
    "end": "686720"
  },
  {
    "text": "parser and now even though we know it's",
    "start": "686720",
    "end": "688959"
  },
  {
    "text": "a structured log fluent bit thinks it's",
    "start": "688959",
    "end": "691440"
  },
  {
    "text": "an unstructured log which means that",
    "start": "691440",
    "end": "693320"
  },
  {
    "text": "it's going to generate a new record",
    "start": "693320",
    "end": "695440"
  },
  {
    "text": "timestamp so at this point we've been",
    "start": "695440",
    "end": "697880"
  },
  {
    "text": "sure that fluent bit is generating a new",
    "start": "697880",
    "end": "699600"
  },
  {
    "text": "timestamp for all our records and is",
    "start": "699600",
    "end": "701880"
  },
  {
    "text": "setting that new timestamp as the record",
    "start": "701880",
    "end": "703920"
  },
  {
    "text": "timestamp and if you recall when flu bit",
    "start": "703920",
    "end": "706920"
  },
  {
    "text": "calls oura function on each record it",
    "start": "706920",
    "end": "709320"
  },
  {
    "text": "automatically passes that record Tim",
    "start": "709320",
    "end": "711079"
  },
  {
    "text": "stamp in as the timestamp",
    "start": "711079",
    "end": "713279"
  },
  {
    "text": "argument this means that if we return to",
    "start": "713279",
    "end": "716000"
  },
  {
    "text": "our initial Lua function all we have to",
    "start": "716000",
    "end": "718160"
  },
  {
    "text": "do is set collector time stamp to the",
    "start": "718160",
    "end": "720079"
  },
  {
    "text": "timestamp argument we then return the",
    "start": "720079",
    "end": "722600"
  },
  {
    "text": "appropriate return code to let fluent",
    "start": "722600",
    "end": "724320"
  },
  {
    "text": "bit know that we made a change to the",
    "start": "724320",
    "end": "725560"
  },
  {
    "text": "record and return the modified record as",
    "start": "725560",
    "end": "727800"
  },
  {
    "text": "our third return value in this case the",
    "start": "727800",
    "end": "730279"
  },
  {
    "text": "second return value doesn't matter so we",
    "start": "730279",
    "end": "732160"
  },
  {
    "text": "can just stick with the",
    "start": "732160",
    "end": "733600"
  },
  {
    "text": "default now let's see this in action we",
    "start": "733600",
    "end": "736360"
  },
  {
    "text": "have the following record representing",
    "start": "736360",
    "end": "738360"
  },
  {
    "text": "our unpassed structured log with the",
    "start": "738360",
    "end": "741440"
  },
  {
    "text": "following record timestamp generated by",
    "start": "741440",
    "end": "743440"
  },
  {
    "text": "fluent bit fluent bit then calls our Lua",
    "start": "743440",
    "end": "746480"
  },
  {
    "text": "function on this record and passes in",
    "start": "746480",
    "end": "748800"
  },
  {
    "text": "the tag the record timestamp and the",
    "start": "748800",
    "end": "751240"
  },
  {
    "text": "record itself and finally our Lua",
    "start": "751240",
    "end": "754000"
  },
  {
    "text": "function returns a modified record with",
    "start": "754000",
    "end": "756279"
  },
  {
    "text": "a new collector timestamp field",
    "start": "756279",
    "end": "758519"
  },
  {
    "text": "containing the same value as a record",
    "start": "758519",
    "end": "760519"
  },
  {
    "text": "timestamp so we're done right well not",
    "start": "760519",
    "end": "763800"
  },
  {
    "text": "quite if you look closely although the",
    "start": "763800",
    "end": "766360"
  },
  {
    "text": "nanc resolution record time stamp has",
    "start": "766360",
    "end": "769120"
  },
  {
    "text": "nine decimal places The Collector time",
    "start": "769120",
    "end": "771440"
  },
  {
    "text": "stamp only has six and unfortunately",
    "start": "771440",
    "end": "774639"
  },
  {
    "text": "this represents a fundamental limitation",
    "start": "774639",
    "end": "777079"
  },
  {
    "text": "when that floating point record Tim",
    "start": "777079",
    "end": "778639"
  },
  {
    "text": "stamp is converted from C to Lua and",
    "start": "778639",
    "end": "781160"
  },
  {
    "text": "then back to C there are some",
    "start": "781160",
    "end": "782839"
  },
  {
    "text": "unavoidable loss of precision which",
    "start": "782839",
    "end": "784800"
  },
  {
    "text": "means that the original nine decimal",
    "start": "784800",
    "end": "786600"
  },
  {
    "text": "places of the record time stamp are not",
    "start": "786600",
    "end": "788760"
  },
  {
    "text": "preserved in The Collector time stamp so",
    "start": "788760",
    "end": "792079"
  },
  {
    "text": "now we have a microsc resolution",
    "start": "792079",
    "end": "794040"
  },
  {
    "text": "collector time stamp which is better",
    "start": "794040",
    "end": "795800"
  },
  {
    "text": "than second resolution but it's still",
    "start": "795800",
    "end": "797839"
  },
  {
    "text": "not quite what we want so what do we do",
    "start": "797839",
    "end": "800440"
  },
  {
    "text": "now well in response to this issue the",
    "start": "800440",
    "end": "803279"
  },
  {
    "text": "folks of fluent bit came out with a new",
    "start": "803279",
    "end": "805000"
  },
  {
    "text": "parameter for the Lua filter called time",
    "start": "805000",
    "end": "807680"
  },
  {
    "text": "as table when this setting is enabled",
    "start": "807680",
    "end": "810680"
  },
  {
    "text": "flu bit no longer passes the record Tim",
    "start": "810680",
    "end": "813079"
  },
  {
    "text": "stamp to the Lua function as a floating",
    "start": "813079",
    "end": "815079"
  },
  {
    "text": "Point number instead it passes it as a",
    "start": "815079",
    "end": "817959"
  },
  {
    "text": "Lua table with two keys SEC containing",
    "start": "817959",
    "end": "821639"
  },
  {
    "text": "the integer part in other words",
    "start": "821639",
    "end": "823320"
  },
  {
    "text": "everything to the left of the decimal",
    "start": "823320",
    "end": "824680"
  },
  {
    "text": "point and nsec contain the fractional",
    "start": "824680",
    "end": "827600"
  },
  {
    "text": "part in other words everything to the",
    "start": "827600",
    "end": "829560"
  },
  {
    "text": "right of the decimal point although this",
    "start": "829560",
    "end": "832160"
  },
  {
    "text": "takes a little more work for us to parse",
    "start": "832160",
    "end": "834199"
  },
  {
    "text": "and manipulate it allows us to preserve",
    "start": "834199",
    "end": "836519"
  },
  {
    "text": "the original nanc resolution of the",
    "start": "836519",
    "end": "838680"
  },
  {
    "text": "record time stamp let's return to our",
    "start": "838680",
    "end": "841199"
  },
  {
    "text": "lure function and see how it works first",
    "start": "841199",
    "end": "844639"
  },
  {
    "text": "we extract the integer part and the",
    "start": "844639",
    "end": "846480"
  },
  {
    "text": "fractional part from the timestamp",
    "start": "846480",
    "end": "848759"
  },
  {
    "text": "argument using the string. format",
    "start": "848759",
    "end": "851160"
  },
  {
    "text": "function we then put the two pieces",
    "start": "851160",
    "end": "853079"
  },
  {
    "text": "together to reassemble the record",
    "start": "853079",
    "end": "854680"
  },
  {
    "text": "timestamp as a string and finally we",
    "start": "854680",
    "end": "857560"
  },
  {
    "text": "inject that string into the record as",
    "start": "857560",
    "end": "859639"
  },
  {
    "text": "collector timestamp if we return to our",
    "start": "859639",
    "end": "862160"
  },
  {
    "text": "example we can see that our modified",
    "start": "862160",
    "end": "864360"
  },
  {
    "text": "function now returns a collector",
    "start": "864360",
    "end": "866240"
  },
  {
    "text": "timestamp containing all nine digits of",
    "start": "866240",
    "end": "868600"
  },
  {
    "text": "the record time stamp this looks good",
    "start": "868600",
    "end": "871920"
  },
  {
    "text": "but there is a subtle bug in this code",
    "start": "871920",
    "end": "874000"
  },
  {
    "text": "to demonstrate let's try this again with",
    "start": "874000",
    "end": "876160"
  },
  {
    "text": "a different record Tim stamp just like",
    "start": "876160",
    "end": "878480"
  },
  {
    "text": "before fluent bit calls a Lua function",
    "start": "878480",
    "end": "880920"
  },
  {
    "text": "passes in the record time stamp as a",
    "start": "880920",
    "end": "882519"
  },
  {
    "text": "table and the Lua function then injects",
    "start": "882519",
    "end": "884880"
  },
  {
    "text": "it into the record as collector",
    "start": "884880",
    "end": "887120"
  },
  {
    "text": "timestamp however notice that this",
    "start": "887120",
    "end": "889360"
  },
  {
    "text": "collector Tim stamp does not match the",
    "start": "889360",
    "end": "891440"
  },
  {
    "text": "record time stamp specifically it is",
    "start": "891440",
    "end": "893959"
  },
  {
    "text": "missing the leading zero in the",
    "start": "893959",
    "end": "895560"
  },
  {
    "text": "fractional",
    "start": "895560",
    "end": "896639"
  },
  {
    "text": "portion this is because up above",
    "start": "896639",
    "end": "899680"
  },
  {
    "text": "when the time stamp is passed in as a",
    "start": "899680",
    "end": "901320"
  },
  {
    "text": "Lua table the fractional portion is",
    "start": "901320",
    "end": "903720"
  },
  {
    "text": "passed in as an integer which means that",
    "start": "903720",
    "end": "905680"
  },
  {
    "text": "any leading zeros get dropped so let's",
    "start": "905680",
    "end": "908839"
  },
  {
    "text": "go back to our function and fix this bug",
    "start": "908839",
    "end": "911560"
  },
  {
    "text": "instead of including the fractional part",
    "start": "911560",
    "end": "913160"
  },
  {
    "text": "in the time stamp string right after we",
    "start": "913160",
    "end": "915120"
  },
  {
    "text": "extract it let's first modify the",
    "start": "915120",
    "end": "917279"
  },
  {
    "text": "fraction part such that if it contains",
    "start": "917279",
    "end": "919519"
  },
  {
    "text": "less than nine digits we pad it with",
    "start": "919519",
    "end": "921680"
  },
  {
    "text": "leading zeros we then include that",
    "start": "921680",
    "end": "924240"
  },
  {
    "text": "padded fractional part in the time stamp",
    "start": "924240",
    "end": "926079"
  },
  {
    "text": "string and if we go back to example we",
    "start": "926079",
    "end": "929079"
  },
  {
    "text": "can see that the collector time stamp",
    "start": "929079",
    "end": "930759"
  },
  {
    "text": "now includes the leading zero and is",
    "start": "930759",
    "end": "932759"
  },
  {
    "text": "once again a perfect match for the",
    "start": "932759",
    "end": "934480"
  },
  {
    "text": "record timestamp so at this point we",
    "start": "934480",
    "end": "937560"
  },
  {
    "text": "have successfully injected the record",
    "start": "937560",
    "end": "939199"
  },
  {
    "text": "timestamp into the record as a field",
    "start": "939199",
    "end": "941440"
  },
  {
    "text": "named collector timestamp however",
    "start": "941440",
    "end": "944040"
  },
  {
    "text": "collector timestamp is still formatted",
    "start": "944040",
    "end": "945880"
  },
  {
    "text": "as an Epoch timestamp and especially if",
    "start": "945880",
    "end": "948440"
  },
  {
    "text": "we want to use it for debugging it would",
    "start": "948440",
    "end": "950360"
  },
  {
    "text": "be better if it was formatted as a more",
    "start": "950360",
    "end": "952199"
  },
  {
    "text": "intuitive human readable timestamp so",
    "start": "952199",
    "end": "955240"
  },
  {
    "text": "let's return to our function instead of",
    "start": "955240",
    "end": "957440"
  },
  {
    "text": "including the integer part in the time",
    "start": "957440",
    "end": "959360"
  },
  {
    "text": "stamp string right after we extract it",
    "start": "959360",
    "end": "961880"
  },
  {
    "text": "let's first use the os. DAT function to",
    "start": "961880",
    "end": "964639"
  },
  {
    "text": "convert the integer part from an Epoch",
    "start": "964639",
    "end": "966800"
  },
  {
    "text": "format to a human readable format we",
    "start": "966800",
    "end": "969560"
  },
  {
    "text": "then include that human readable integer",
    "start": "969560",
    "end": "971480"
  },
  {
    "text": "part in the timestamp string and now if",
    "start": "971480",
    "end": "973759"
  },
  {
    "text": "we go back for example we can see that",
    "start": "973759",
    "end": "975759"
  },
  {
    "text": "the collector timestamp has been",
    "start": "975759",
    "end": "977319"
  },
  {
    "text": "converted from an Epoch timestamp to a",
    "start": "977319",
    "end": "979680"
  },
  {
    "text": "human readable timestamp let's zoom in",
    "start": "979680",
    "end": "982519"
  },
  {
    "text": "and take a closer look The Collector",
    "start": "982519",
    "end": "984720"
  },
  {
    "text": "timestamp says September 5th 1 p.m. but",
    "start": "984720",
    "end": "988199"
  },
  {
    "text": "note that there is no indication as to",
    "start": "988199",
    "end": "989839"
  },
  {
    "text": "what time zone it's set in in fact this",
    "start": "989839",
    "end": "992199"
  },
  {
    "text": "turns out to be the local time zone",
    "start": "992199",
    "end": "994000"
  },
  {
    "text": "because that's what the os. date",
    "start": "994000",
    "end": "995360"
  },
  {
    "text": "function defaults do now in general I",
    "start": "995360",
    "end": "999199"
  },
  {
    "text": "strongly recommend that whenever you're",
    "start": "999199",
    "end": "1000680"
  },
  {
    "text": "dealing with timestamps you never set",
    "start": "1000680",
    "end": "1002680"
  },
  {
    "text": "them in the local time zone it makes",
    "start": "1002680",
    "end": "1005120"
  },
  {
    "text": "interacting with systems located in",
    "start": "1005120",
    "end": "1006639"
  },
  {
    "text": "other time zones very confusing and it",
    "start": "1006639",
    "end": "1009160"
  },
  {
    "text": "can even cause confusion within your own",
    "start": "1009160",
    "end": "1010839"
  },
  {
    "text": "system if your local time zone has a",
    "start": "1010839",
    "end": "1012959"
  },
  {
    "text": "concept of daylight saving time instead",
    "start": "1012959",
    "end": "1015600"
  },
  {
    "text": "I strongly recommend keeping all your",
    "start": "1015600",
    "end": "1017240"
  },
  {
    "text": "time stamps in UTC which is essentially",
    "start": "1017240",
    "end": "1019920"
  },
  {
    "text": "a neutral time standard which all time",
    "start": "1019920",
    "end": "1021759"
  },
  {
    "text": "zones are based on so returning to our",
    "start": "1021759",
    "end": "1024160"
  },
  {
    "text": "Lua function we can force os. date to",
    "start": "1024160",
    "end": "1026600"
  },
  {
    "text": "give us a time stamp in UTC instead of",
    "start": "1026600",
    "end": "1028640"
  },
  {
    "text": "in the local time zone by adding an",
    "start": "1028640",
    "end": "1030760"
  },
  {
    "text": "exclamation mark in front of the format",
    "start": "1030760",
    "end": "1032480"
  },
  {
    "text": "string argument in addition the",
    "start": "1032480",
    "end": "1034678"
  },
  {
    "text": "convention is to add the letter Zed at",
    "start": "1034679",
    "end": "1036918"
  },
  {
    "text": "the end of the timestamp to let people",
    "start": "1036919",
    "end": "1038760"
  },
  {
    "text": "know that it's in",
    "start": "1038760",
    "end": "1040120"
  },
  {
    "text": "UTC returning to our collector timestamp",
    "start": "1040120",
    "end": "1042918"
  },
  {
    "text": "in my case my local time zone is 4 hours",
    "start": "1042919",
    "end": "1045520"
  },
  {
    "text": "behind UTC which means that instead of",
    "start": "1045520",
    "end": "1047918"
  },
  {
    "text": "the local time of September 5th 1 p.m.",
    "start": "1047919",
    "end": "1051039"
  },
  {
    "text": "our corrected Lua function will now",
    "start": "1051039",
    "end": "1052919"
  },
  {
    "text": "return the UTC time of September 5th 5:",
    "start": "1052919",
    "end": "1056080"
  },
  {
    "text": "p.m. so at this point our log finally",
    "start": "1056080",
    "end": "1059200"
  },
  {
    "text": "contains a human readable collector",
    "start": "1059200",
    "end": "1061120"
  },
  {
    "text": "timestamp that clearly tells us when the",
    "start": "1061120",
    "end": "1063480"
  },
  {
    "text": "log was processed by fluent bit however",
    "start": "1063480",
    "end": "1066440"
  },
  {
    "text": "we still have two issues left one our",
    "start": "1066440",
    "end": "1069720"
  },
  {
    "text": "record Tim stamp still measures the time",
    "start": "1069720",
    "end": "1072039"
  },
  {
    "text": "when the log is processed by flu bit but",
    "start": "1072039",
    "end": "1074840"
  },
  {
    "text": "now that we've successfully saved that",
    "start": "1074840",
    "end": "1076360"
  },
  {
    "text": "information in the collector timestamp",
    "start": "1076360",
    "end": "1078480"
  },
  {
    "text": "we would would prefer it if the record",
    "start": "1078480",
    "end": "1079840"
  },
  {
    "text": "Tim stamp went back to its default",
    "start": "1079840",
    "end": "1081559"
  },
  {
    "text": "behavior of matching the log Tim stamp",
    "start": "1081559",
    "end": "1084320"
  },
  {
    "text": "thus letting us know when the log was",
    "start": "1084320",
    "end": "1085760"
  },
  {
    "text": "first created and number two our",
    "start": "1085760",
    "end": "1088720"
  },
  {
    "text": "structured log is still being treated as",
    "start": "1088720",
    "end": "1091039"
  },
  {
    "text": "an unstructured log we can solve both",
    "start": "1091039",
    "end": "1094080"
  },
  {
    "text": "these issues by parsing our structured",
    "start": "1094080",
    "end": "1095840"
  },
  {
    "text": "log as you recall we purposely chose not",
    "start": "1095840",
    "end": "1098280"
  },
  {
    "text": "to pars it at ingestion time so what we",
    "start": "1098280",
    "end": "1100520"
  },
  {
    "text": "want now is a way to retroactively parse",
    "start": "1100520",
    "end": "1102520"
  },
  {
    "text": "it and we can do just that with the help",
    "start": "1102520",
    "end": "1105159"
  },
  {
    "text": "of a fluent bit parser filter once again",
    "start": "1105159",
    "end": "1108080"
  },
  {
    "text": "we configured use an appropriate parser",
    "start": "1108080",
    "end": "1110480"
  },
  {
    "text": "and finally we get a nice clean looking",
    "start": "1110480",
    "end": "1113280"
  },
  {
    "text": "record with a record timestamp that now",
    "start": "1113280",
    "end": "1115559"
  },
  {
    "text": "matches the log Tim stamp and with that",
    "start": "1115559",
    "end": "1118559"
  },
  {
    "text": "we are finally done with the world's",
    "start": "1118559",
    "end": "1120360"
  },
  {
    "text": "longest example so now let's go over",
    "start": "1120360",
    "end": "1123360"
  },
  {
    "text": "some tips we've already mentioned the",
    "start": "1123360",
    "end": "1125320"
  },
  {
    "text": "following tips use variables instead of",
    "start": "1125320",
    "end": "1127600"
  },
  {
    "text": "magic numbers use local variables",
    "start": "1127600",
    "end": "1129679"
  },
  {
    "text": "instead of global ones and for your",
    "start": "1129679",
    "end": "1131559"
  },
  {
    "text": "timestamps use UTC instead of your local",
    "start": "1131559",
    "end": "1134480"
  },
  {
    "text": "time zone but let's go over some more",
    "start": "1134480",
    "end": "1137159"
  },
  {
    "text": "starting with truthiness in other words",
    "start": "1137159",
    "end": "1140080"
  },
  {
    "text": "whether or not a particular value",
    "start": "1140080",
    "end": "1141880"
  },
  {
    "text": "evaluates as true when used in a",
    "start": "1141880",
    "end": "1144000"
  },
  {
    "text": "conditional statement let's consider the",
    "start": "1144000",
    "end": "1146360"
  },
  {
    "text": "following Lu values the Boolean value",
    "start": "1146360",
    "end": "1149039"
  },
  {
    "text": "false nil which is a reserved word used",
    "start": "1149039",
    "end": "1152559"
  },
  {
    "text": "in Lu used to indicate the absence of a",
    "start": "1152559",
    "end": "1154880"
  },
  {
    "text": "meaningful value zero an empty string",
    "start": "1154880",
    "end": "1158640"
  },
  {
    "text": "and an empty table if you're used to",
    "start": "1158640",
    "end": "1161320"
  },
  {
    "text": "other languages like python you might",
    "start": "1161320",
    "end": "1163039"
  },
  {
    "text": "expect all these values to evaluate as",
    "start": "1163039",
    "end": "1164960"
  },
  {
    "text": "false but in fact in Lua only the first",
    "start": "1164960",
    "end": "1168200"
  },
  {
    "text": "two values vales that is false and nil",
    "start": "1168200",
    "end": "1170840"
  },
  {
    "text": "evaluate as false everything else",
    "start": "1170840",
    "end": "1173080"
  },
  {
    "text": "evaluates as true so for example if",
    "start": "1173080",
    "end": "1176240"
  },
  {
    "text": "you're checking whether a table is valid",
    "start": "1176240",
    "end": "1178080"
  },
  {
    "text": "before you make use of it make sure",
    "start": "1178080",
    "end": "1179919"
  },
  {
    "text": "you're clear on whether or not you want",
    "start": "1179919",
    "end": "1181559"
  },
  {
    "text": "your program to consider an empty table",
    "start": "1181559",
    "end": "1183799"
  },
  {
    "text": "valid since that will affect what",
    "start": "1183799",
    "end": "1185840"
  },
  {
    "text": "conditional check you choose next let's",
    "start": "1185840",
    "end": "1188640"
  },
  {
    "text": "talk about the contents of the main Lua",
    "start": "1188640",
    "end": "1190360"
  },
  {
    "text": "function as you recall from the",
    "start": "1190360",
    "end": "1192039"
  },
  {
    "text": "beginning of this talk the Lua filter",
    "start": "1192039",
    "end": "1193919"
  },
  {
    "text": "takes two arguments the main Lua",
    "start": "1193919",
    "end": "1196080"
  },
  {
    "text": "function that gets called by the filter",
    "start": "1196080",
    "end": "1198159"
  },
  {
    "text": "and the Lua file where that function is",
    "start": "1198159",
    "end": "1200760"
  },
  {
    "text": "located till now we've dealt with",
    "start": "1200760",
    "end": "1203120"
  },
  {
    "text": "relatively simpler programs where the",
    "start": "1203120",
    "end": "1204640"
  },
  {
    "text": "Lua file contains only the main function",
    "start": "1204640",
    "end": "1207200"
  },
  {
    "text": "and that main function contains all the",
    "start": "1207200",
    "end": "1208960"
  },
  {
    "text": "Lowa code however as your programs get",
    "start": "1208960",
    "end": "1211919"
  },
  {
    "text": "larger and more complex this might not",
    "start": "1211919",
    "end": "1214200"
  },
  {
    "text": "always be the most efficient approach",
    "start": "1214200",
    "end": "1216120"
  },
  {
    "text": "for example let's say you have the",
    "start": "1216120",
    "end": "1218000"
  },
  {
    "text": "following main Lua function containing",
    "start": "1218000",
    "end": "1220480"
  },
  {
    "text": "code that needs to be executed",
    "start": "1220480",
    "end": "1221960"
  },
  {
    "text": "repeatedly that is for every record as",
    "start": "1221960",
    "end": "1224720"
  },
  {
    "text": "well as code that only needs to be",
    "start": "1224720",
    "end": "1226280"
  },
  {
    "text": "executed once because the filter calls",
    "start": "1226280",
    "end": "1229640"
  },
  {
    "text": "this main function every time it matches",
    "start": "1229640",
    "end": "1231480"
  },
  {
    "text": "a record if the filter matches three",
    "start": "1231480",
    "end": "1233600"
  },
  {
    "text": "records then both these pieces of code",
    "start": "1233600",
    "end": "1235960"
  },
  {
    "text": "will be executed three times even though",
    "start": "1235960",
    "end": "1238919"
  },
  {
    "text": "the first piece of code only needed to",
    "start": "1238919",
    "end": "1240640"
  },
  {
    "text": "be executed once however if you move the",
    "start": "1240640",
    "end": "1243559"
  },
  {
    "text": "first piece of code out of the main",
    "start": "1243559",
    "end": "1244840"
  },
  {
    "text": "function then although they will still",
    "start": "1244840",
    "end": "1247440"
  },
  {
    "text": "both be executed for the very first",
    "start": "1247440",
    "end": "1249400"
  },
  {
    "text": "matching record for every subsequent",
    "start": "1249400",
    "end": "1251640"
  },
  {
    "text": "matching record only the repeated code",
    "start": "1251640",
    "end": "1253840"
  },
  {
    "text": "within the main function will be",
    "start": "1253840",
    "end": "1255799"
  },
  {
    "text": "executed thus I recommend restricting",
    "start": "1255799",
    "end": "1258520"
  },
  {
    "text": "the the contents of your main Lua",
    "start": "1258520",
    "end": "1260080"
  },
  {
    "text": "function to only that code that needs to",
    "start": "1260080",
    "end": "1262600"
  },
  {
    "text": "be executed for every record on a",
    "start": "1262600",
    "end": "1265280"
  },
  {
    "text": "similar note let's talk about the",
    "start": "1265280",
    "end": "1266760"
  },
  {
    "text": "contents of the Lua file till now we",
    "start": "1266760",
    "end": "1269400"
  },
  {
    "text": "dealt with relatively simple programs",
    "start": "1269400",
    "end": "1271400"
  },
  {
    "text": "where we want to execute the same Lua",
    "start": "1271400",
    "end": "1273200"
  },
  {
    "text": "code on all the matching records however",
    "start": "1273200",
    "end": "1276360"
  },
  {
    "text": "what if we want to execute different Lu",
    "start": "1276360",
    "end": "1278279"
  },
  {
    "text": "code on different subsets of the records",
    "start": "1278279",
    "end": "1280960"
  },
  {
    "text": "initially this might still seem fairly",
    "start": "1280960",
    "end": "1283039"
  },
  {
    "text": "straightforward we create three",
    "start": "1283039",
    "end": "1284799"
  },
  {
    "text": "different Lua filters with three",
    "start": "1284799",
    "end": "1286720"
  },
  {
    "text": "different tags and three different Lua",
    "start": "1286720",
    "end": "1289279"
  },
  {
    "text": "functions but now the question arises",
    "start": "1289279",
    "end": "1291960"
  },
  {
    "text": "what about the Lua file do we store the",
    "start": "1291960",
    "end": "1294520"
  },
  {
    "text": "code for all three Lua filters in one",
    "start": "1294520",
    "end": "1296679"
  },
  {
    "text": "big file or does each filter get its own",
    "start": "1296679",
    "end": "1299039"
  },
  {
    "text": "separate file let's try out both these",
    "start": "1299039",
    "end": "1301600"
  },
  {
    "text": "approaches and see what happens first",
    "start": "1301600",
    "end": "1304120"
  },
  {
    "text": "let's specify the same Lua file in all",
    "start": "1304120",
    "end": "1306320"
  },
  {
    "text": "three filters next let's take a look at",
    "start": "1306320",
    "end": "1309279"
  },
  {
    "text": "the contents of that shared Lua file it",
    "start": "1309279",
    "end": "1312360"
  },
  {
    "text": "has the main function for the first",
    "start": "1312360",
    "end": "1314039"
  },
  {
    "text": "group of records as well as the onetime",
    "start": "1314039",
    "end": "1316159"
  },
  {
    "text": "code for the first group of Records",
    "start": "1316159",
    "end": "1318080"
  },
  {
    "text": "similarly it also has the main function",
    "start": "1318080",
    "end": "1320240"
  },
  {
    "text": "and onetime code for the second group of",
    "start": "1320240",
    "end": "1322320"
  },
  {
    "text": "records and the third group of Records",
    "start": "1322320",
    "end": "1325360"
  },
  {
    "text": "now we already know that the main",
    "start": "1325360",
    "end": "1327159"
  },
  {
    "text": "function will be executed every time the",
    "start": "1327159",
    "end": "1329159"
  },
  {
    "text": "corresponding filter matches a record so",
    "start": "1329159",
    "end": "1331320"
  },
  {
    "text": "let's focus on the very first time that",
    "start": "1331320",
    "end": "1333440"
  },
  {
    "text": "a filter matches a record since we know",
    "start": "1333440",
    "end": "1335880"
  },
  {
    "text": "that's the only time that the onetime",
    "start": "1335880",
    "end": "1337720"
  },
  {
    "text": "code will also be",
    "start": "1337720",
    "end": "1339559"
  },
  {
    "text": "executed for example the first time that",
    "start": "1339559",
    "end": "1342400"
  },
  {
    "text": "the group one filter matches a record",
    "start": "1342400",
    "end": "1344520"
  },
  {
    "text": "both the onetime code for group one as",
    "start": "1344520",
    "end": "1346760"
  },
  {
    "text": "well as the main function for group one",
    "start": "1346760",
    "end": "1348279"
  },
  {
    "text": "get executed which is what we want in",
    "start": "1348279",
    "end": "1351000"
  },
  {
    "text": "addition the one time code for group two",
    "start": "1351000",
    "end": "1353320"
  },
  {
    "text": "and group three also get executed which",
    "start": "1353320",
    "end": "1355760"
  },
  {
    "text": "is not what we want similarly the first",
    "start": "1355760",
    "end": "1358480"
  },
  {
    "text": "time that the group two filter matches a",
    "start": "1358480",
    "end": "1360080"
  },
  {
    "text": "record not only does the group two code",
    "start": "1360080",
    "end": "1362080"
  },
  {
    "text": "get executed but also the onetime code",
    "start": "1362080",
    "end": "1364640"
  },
  {
    "text": "for the other two groups and so on for",
    "start": "1364640",
    "end": "1367120"
  },
  {
    "text": "the group three",
    "start": "1367120",
    "end": "1368240"
  },
  {
    "text": "code so as we can see when all the L",
    "start": "1368240",
    "end": "1371679"
  },
  {
    "text": "filters share the same Lua file we end",
    "start": "1371679",
    "end": "1373840"
  },
  {
    "text": "up needlessly executing unrelated",
    "start": "1373840",
    "end": "1376080"
  },
  {
    "text": "onetime code meant for other groups of",
    "start": "1376080",
    "end": "1378120"
  },
  {
    "text": "Records",
    "start": "1378120",
    "end": "1379440"
  },
  {
    "text": "now let's return to our L filters and",
    "start": "1379440",
    "end": "1381960"
  },
  {
    "text": "this time specify a different Lu file",
    "start": "1381960",
    "end": "1384120"
  },
  {
    "text": "for each filter looking at the contents",
    "start": "1384120",
    "end": "1386679"
  },
  {
    "text": "of those files we can see that now each",
    "start": "1386679",
    "end": "1389360"
  },
  {
    "text": "group's code is located in its own",
    "start": "1389360",
    "end": "1391360"
  },
  {
    "text": "separate L file now let's run through",
    "start": "1391360",
    "end": "1394159"
  },
  {
    "text": "our example again the first time that",
    "start": "1394159",
    "end": "1396400"
  },
  {
    "text": "the group one filter matches a record",
    "start": "1396400",
    "end": "1398320"
  },
  {
    "text": "the only code that gets executed is a",
    "start": "1398320",
    "end": "1400480"
  },
  {
    "text": "onetime code for group one as well as",
    "start": "1400480",
    "end": "1402520"
  },
  {
    "text": "the main function for group one no other",
    "start": "1402520",
    "end": "1405039"
  },
  {
    "text": "code gets executed which is what we want",
    "start": "1405039",
    "end": "1407760"
  },
  {
    "text": "similarly the first time the group two",
    "start": "1407760",
    "end": "1409600"
  },
  {
    "text": "filter matches a record only the group",
    "start": "1409600",
    "end": "1411600"
  },
  {
    "text": "two code gets executed and the first",
    "start": "1411600",
    "end": "1413960"
  },
  {
    "text": "time that the group three filter matches",
    "start": "1413960",
    "end": "1415400"
  },
  {
    "text": "a record only the group three code gets",
    "start": "1415400",
    "end": "1417760"
  },
  {
    "text": "executed so as we can see this time only",
    "start": "1417760",
    "end": "1421440"
  },
  {
    "text": "the code that we wanted to be executed",
    "start": "1421440",
    "end": "1423480"
  },
  {
    "text": "got executed thus when you have multiple",
    "start": "1423480",
    "end": "1426360"
  },
  {
    "text": "Lua filters operating on different",
    "start": "1426360",
    "end": "1428320"
  },
  {
    "text": "subsets of Records I recommend creating",
    "start": "1428320",
    "end": "1430840"
  },
  {
    "text": "a separate Lua file for each filter such",
    "start": "1430840",
    "end": "1433400"
  },
  {
    "text": "that each file only contains the code",
    "start": "1433400",
    "end": "1435760"
  },
  {
    "text": "relevant to that particular filter",
    "start": "1435760",
    "end": "1438679"
  },
  {
    "text": "moving on let's talk about some helpful",
    "start": "1438679",
    "end": "1440799"
  },
  {
    "text": "resources that you can use to build upon",
    "start": "1440799",
    "end": "1442919"
  },
  {
    "text": "the stock and to dive deeper into the",
    "start": "1442919",
    "end": "1444919"
  },
  {
    "text": "areas that you're interested in from the",
    "start": "1444919",
    "end": "1447000"
  },
  {
    "text": "fluent bit side you have the Lua filter",
    "start": "1447000",
    "end": "1449279"
  },
  {
    "text": "documentation and you have some sample",
    "start": "1449279",
    "end": "1451240"
  },
  {
    "text": "Lua programs from the Lua side you have",
    "start": "1451240",
    "end": "1454400"
  },
  {
    "text": "the official Lua manual but personally I",
    "start": "1454400",
    "end": "1456960"
  },
  {
    "text": "recommend starting with the programming",
    "start": "1456960",
    "end": "1458880"
  },
  {
    "text": "in Lua book written by one of the",
    "start": "1458880",
    "end": "1460919"
  },
  {
    "text": "creators of Lua as that provides a much",
    "start": "1460919",
    "end": "1463360"
  },
  {
    "text": "friendlier introduction to Lua than the",
    "start": "1463360",
    "end": "1465000"
  },
  {
    "text": "manual",
    "start": "1465000",
    "end": "1466279"
  },
  {
    "text": "does one thing to keep in mind when",
    "start": "1466279",
    "end": "1468600"
  },
  {
    "text": "Consulting Lua documentation is that",
    "start": "1468600",
    "end": "1471120"
  },
  {
    "text": "although Lua itself is now on version",
    "start": "1471120",
    "end": "1473279"
  },
  {
    "text": "5.4 fluent bits distri distribution of",
    "start": "1473279",
    "end": "1476200"
  },
  {
    "text": "Lua is limited to version 5.1 that's",
    "start": "1476200",
    "end": "1479399"
  },
  {
    "text": "because fluent bit doesn't embed native",
    "start": "1479399",
    "end": "1481200"
  },
  {
    "text": "Lua instead it embeds Lua jit which is",
    "start": "1481200",
    "end": "1484440"
  },
  {
    "text": "essentially a fork of Lua that is frozen",
    "start": "1484440",
    "end": "1486640"
  },
  {
    "text": "at version 5.1 with a few newer features",
    "start": "1486640",
    "end": "1489919"
  },
  {
    "text": "backported so before you incorporate",
    "start": "1489919",
    "end": "1492200"
  },
  {
    "text": "features introduced in newer versions of",
    "start": "1492200",
    "end": "1494000"
  },
  {
    "text": "Lua into your code make sure that their",
    "start": "1494000",
    "end": "1496399"
  },
  {
    "text": "support to influent bit finally if you'd",
    "start": "1496399",
    "end": "1499559"
  },
  {
    "text": "like to reach out with any questions or",
    "start": "1499559",
    "end": "1501640"
  },
  {
    "text": "comments here is my LinkedIn profile my",
    "start": "1501640",
    "end": "1504080"
  },
  {
    "text": "GitHub page and my email address and",
    "start": "1504080",
    "end": "1507039"
  },
  {
    "text": "with that we are done thanks again for",
    "start": "1507039",
    "end": "1510120"
  },
  {
    "text": "giving me your time today I hope that",
    "start": "1510120",
    "end": "1511880"
  },
  {
    "text": "you found this talk helpful and I hope",
    "start": "1511880",
    "end": "1513840"
  },
  {
    "text": "that going forward it makes the prospect",
    "start": "1513840",
    "end": "1515720"
  },
  {
    "text": "of using Lua to build in whatever",
    "start": "1515720",
    "end": "1517720"
  },
  {
    "text": "additional functionality you need in",
    "start": "1517720",
    "end": "1519159"
  },
  {
    "text": "fluent bit less daunting thank you",
    "start": "1519159",
    "end": "1524240"
  }
]