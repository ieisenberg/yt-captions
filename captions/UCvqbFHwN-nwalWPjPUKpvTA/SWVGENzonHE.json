[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "welcome to a little bit of Northern",
    "start": "30",
    "end": "2220"
  },
  {
    "text": "California winter in this room I hope",
    "start": "2220",
    "end": "6720"
  },
  {
    "text": "you guys got a chance to stand up and",
    "start": "6720",
    "end": "8730"
  },
  {
    "text": "actually warm up a little I'm Mitch",
    "start": "8730",
    "end": "11820"
  },
  {
    "text": "sakowski from workday and I'm up here",
    "start": "11820",
    "end": "14940"
  },
  {
    "text": "with my colleagues from lift Nico Flacco",
    "start": "14940",
    "end": "17850"
  },
  {
    "text": "and Henry yang we're here to talk about",
    "start": "17850",
    "end": "21210"
  },
  {
    "text": "the evolution of envoy as a dynamic read",
    "start": "21210",
    "end": "26580"
  },
  {
    "text": "it is proxy I have the easy part",
    "start": "26580",
    "end": "30830"
  },
  {
    "text": "tell you about what we're gonna actually",
    "start": "30830",
    "end": "32640"
  },
  {
    "text": "talk about in this talk first we could",
    "start": "32640",
    "end": "35219"
  },
  {
    "text": "start out with a little bit about why",
    "start": "35219",
    "end": "36450"
  },
  {
    "text": "envoy and then Henry is going to jump",
    "start": "36450",
    "end": "39329"
  },
  {
    "text": "into the actual evolution of redis",
    "start": "39329",
    "end": "42329"
  },
  {
    "text": "support and we'll show you some of the",
    "start": "42329",
    "end": "44910"
  },
  {
    "text": "deeper internals of what's going on and",
    "start": "44910",
    "end": "47520"
  },
  {
    "text": "then Nico is going to actually cover",
    "start": "47520",
    "end": "49879"
  },
  {
    "text": "online data migration and as a real",
    "start": "49879",
    "end": "55879"
  },
  {
    "text": "production use case and then we'll end",
    "start": "55879",
    "end": "60300"
  },
  {
    "text": "up a little bit with what's next and",
    "start": "60300",
    "end": "62660"
  },
  {
    "text": "hopefully we'll have time for Q&A so why",
    "start": "62660",
    "end": "68369"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "envoy envoy using envoy actually",
    "start": "68369",
    "end": "72840"
  },
  {
    "text": "provides us with a really nice set of",
    "start": "72840",
    "end": "76830"
  },
  {
    "text": "advantages one of the things that envoy",
    "start": "76830",
    "end": "80430"
  },
  {
    "text": "is to do is support complex behavior",
    "start": "80430",
    "end": "84720"
  },
  {
    "text": "that we want to implement in the proxy",
    "start": "84720",
    "end": "86869"
  },
  {
    "text": "and relieve the Redis client from",
    "start": "86869",
    "end": "90600"
  },
  {
    "text": "actually having to to implement or do",
    "start": "90600",
    "end": "93360"
  },
  {
    "text": "correctly and this actually helps quite",
    "start": "93360",
    "end": "97290"
  },
  {
    "text": "a bit and like I said we can support",
    "start": "97290",
    "end": "100500"
  },
  {
    "text": "very complex operational environments we",
    "start": "100500",
    "end": "103710"
  },
  {
    "text": "can handle dynamic configuration changes",
    "start": "103710",
    "end": "106079"
  },
  {
    "text": "we can implement smart read policies we",
    "start": "106079",
    "end": "110460"
  },
  {
    "text": "can federate over multiple clusters",
    "start": "110460",
    "end": "112409"
  },
  {
    "text": "using things like prefix routing and",
    "start": "112409",
    "end": "115340"
  },
  {
    "text": "then we can do zero code change online",
    "start": "115340",
    "end": "118259"
  },
  {
    "text": "data migrations all just by using a",
    "start": "118259",
    "end": "124219"
  },
  {
    "text": "Envoy as a single control point of",
    "start": "124219",
    "end": "128580"
  },
  {
    "text": "course as you've heard from all the",
    "start": "128580",
    "end": "130379"
  },
  {
    "text": "talks earlier today we also get",
    "start": "130379",
    "end": "133040"
  },
  {
    "text": "observability which also helps quite a",
    "start": "133040",
    "end": "135590"
  },
  {
    "text": "bit in any sort of operational",
    "start": "135590",
    "end": "137359"
  },
  {
    "text": "environment and I'd also like to point",
    "start": "137359",
    "end": "141049"
  },
  {
    "text": "out that really what Envoy provides that",
    "start": "141049",
    "end": "144230"
  },
  {
    "text": "that we find at work day very useful and",
    "start": "144230",
    "end": "147230"
  },
  {
    "text": "folks that live feel very useful is that",
    "start": "147230",
    "end": "149180"
  },
  {
    "text": "it's flexible its flexible and it's",
    "start": "149180",
    "end": "152209"
  },
  {
    "text": "flexible you can deploy in any sort of",
    "start": "152209",
    "end": "154819"
  },
  {
    "text": "environment which is really important in",
    "start": "154819",
    "end": "157430"
  },
  {
    "text": "sort of complex environments where your",
    "start": "157430",
    "end": "160430"
  },
  {
    "text": "movie and say from you know a",
    "start": "160430",
    "end": "163090"
  },
  {
    "text": "self-hosted private cloud implementation",
    "start": "163090",
    "end": "167359"
  },
  {
    "text": "of your own set of jury-rigged protocols",
    "start": "167359",
    "end": "171079"
  },
  {
    "text": "and and products to something like",
    "start": "171079",
    "end": "173989"
  },
  {
    "text": "kubernetes and vastly performance on",
    "start": "173989",
    "end": "180409"
  },
  {
    "text": "voice worker thread architecture and the",
    "start": "180409",
    "end": "185030"
  },
  {
    "text": "ability to do Retta spy planning and a",
    "start": "185030",
    "end": "187519"
  },
  {
    "text": "variety of other things the focus on",
    "start": "187519",
    "end": "189079"
  },
  {
    "text": "performance is conceived in to the",
    "start": "189079",
    "end": "193010"
  },
  {
    "text": "architecture and it's something that I",
    "start": "193010",
    "end": "195439"
  },
  {
    "text": "feel like you'll you'll see in Henry's",
    "start": "195439",
    "end": "198889"
  },
  {
    "text": "talks when we start going through the",
    "start": "198889",
    "end": "200840"
  },
  {
    "text": "internals so I'll turn this over to",
    "start": "200840",
    "end": "203090"
  },
  {
    "text": "Henry all right so I am just going to go",
    "start": "203090",
    "end": "210440"
  },
  {
    "start": "208000",
    "end": "208000"
  },
  {
    "text": "with kind of rip the band-aid off",
    "start": "210440",
    "end": "213079"
  },
  {
    "text": "approach and show you kind of what uh",
    "start": "213079",
    "end": "216010"
  },
  {
    "text": "what the envoys are reddy's proxied",
    "start": "216010",
    "end": "219370"
  },
  {
    "text": "looks light and the red is proxy really",
    "start": "219370",
    "end": "223609"
  },
  {
    "text": "evolved over time and this is where it's",
    "start": "223609",
    "end": "227239"
  },
  {
    "text": "in its first iterations and it actually",
    "start": "227239",
    "end": "231669"
  },
  {
    "text": "would be an interesting case to look",
    "start": "231669",
    "end": "234530"
  },
  {
    "text": "that are to extending on voids as a",
    "start": "234530",
    "end": "237470"
  },
  {
    "text": "proxy for other stateful services so in",
    "start": "237470",
    "end": "242750"
  },
  {
    "text": "these iterations if we look under the",
    "start": "242750",
    "end": "244849"
  },
  {
    "text": "hood you can see there are a lot of",
    "start": "244849",
    "end": "247549"
  },
  {
    "text": "boxes so to kind of look at it we can go",
    "start": "247549",
    "end": "252949"
  },
  {
    "text": "from left to right when the client makes",
    "start": "252949",
    "end": "258530"
  },
  {
    "text": "the connections are to the envoys eye",
    "start": "258530",
    "end": "261109"
  },
  {
    "text": "card first thing we see is the filter",
    "start": "261109",
    "end": "265190"
  },
  {
    "text": "things where we",
    "start": "265190",
    "end": "266570"
  },
  {
    "text": "Dakotah that is reading the binary",
    "start": "266570",
    "end": "271330"
  },
  {
    "text": "reddest promo code from from the",
    "start": "271330",
    "end": "274520"
  },
  {
    "text": "connections and we decode that and go",
    "start": "274520",
    "end": "277550"
  },
  {
    "text": "into the readies filter so the first",
    "start": "277550",
    "end": "281600"
  },
  {
    "text": "challenge we have for doing this proxy",
    "start": "281600",
    "end": "285620"
  },
  {
    "text": "and trying to create an illusion that we",
    "start": "285620",
    "end": "287810"
  },
  {
    "text": "instead of talking to a cluster of",
    "start": "287810",
    "end": "290200"
  },
  {
    "text": "radius nodes create the illusion that we",
    "start": "290200",
    "end": "294470"
  },
  {
    "text": "are really only talking to a single",
    "start": "294470",
    "end": "295970"
  },
  {
    "text": "Redis incidence is we need to actually",
    "start": "295970",
    "end": "298430"
  },
  {
    "text": "split the command so because a single",
    "start": "298430",
    "end": "300830"
  },
  {
    "text": "command can spend multiple keys and",
    "start": "300830",
    "end": "303350"
  },
  {
    "text": "those keys are actually stored in",
    "start": "303350",
    "end": "306260"
  },
  {
    "text": "different nodes so we need to split them",
    "start": "306260",
    "end": "308390"
  },
  {
    "text": "to create different requests that we can",
    "start": "308390",
    "end": "313190"
  },
  {
    "text": "then route to the correct collaborators",
    "start": "313190",
    "end": "316790"
  },
  {
    "text": "nodes and then once we get the response",
    "start": "316790",
    "end": "319040"
  },
  {
    "text": "we need to also use this command sweeter",
    "start": "319040",
    "end": "321620"
  },
  {
    "text": "to aggregate them and return to the",
    "start": "321620",
    "end": "324860"
  },
  {
    "text": "client and next lap is where we have the",
    "start": "324860",
    "end": "329120"
  },
  {
    "text": "connection pool this is where a lot of",
    "start": "329120",
    "end": "330680"
  },
  {
    "text": "the interesting thing that are happening",
    "start": "330680",
    "end": "333490"
  },
  {
    "text": "as far as proxying is concerned when we",
    "start": "333490",
    "end": "337910"
  },
  {
    "text": "are talking about proxying to a cluster",
    "start": "337910",
    "end": "339590"
  },
  {
    "text": "of nodes one of the things we need to",
    "start": "339590",
    "end": "342370"
  },
  {
    "text": "think about is actually what is the",
    "start": "342370",
    "end": "345110"
  },
  {
    "text": "cluster or a very related question is",
    "start": "345110",
    "end": "347840"
  },
  {
    "text": "how do we do service discovery how do we",
    "start": "347840",
    "end": "350480"
  },
  {
    "text": "discover and update the membership of",
    "start": "350480",
    "end": "353420"
  },
  {
    "text": "this cluster and in the first iteration",
    "start": "353420",
    "end": "355790"
  },
  {
    "text": "a cluster is very simple it's a flat",
    "start": "355790",
    "end": "359300"
  },
  {
    "text": "list of nodes that we are interested in",
    "start": "359300",
    "end": "362270"
  },
  {
    "text": "it then the connection pool knowing what",
    "start": "362270",
    "end": "365590"
  },
  {
    "text": "the holes are then we can start making",
    "start": "365590",
    "end": "368560"
  },
  {
    "text": "connections and sending our routing",
    "start": "368560",
    "end": "371170"
  },
  {
    "text": "requests so in this case we actually can",
    "start": "371170",
    "end": "376970"
  },
  {
    "text": "just use the other box",
    "start": "376970",
    "end": "379460"
  },
  {
    "text": "Casta implementations for envoys where",
    "start": "379460",
    "end": "382640"
  },
  {
    "text": "we can either use DNS or XPS forecasted",
    "start": "382640",
    "end": "387200"
  },
  {
    "text": "discovery service and in in any",
    "start": "387200",
    "end": "390770"
  },
  {
    "text": "environment so we actually don't need to",
    "start": "390770",
    "end": "393260"
  },
  {
    "text": "change that the next thing when we're",
    "start": "393260",
    "end": "397340"
  },
  {
    "text": "talking about sending traffic to",
    "start": "397340",
    "end": "400310"
  },
  {
    "text": "multiple nodes is how do we distribute",
    "start": "400310",
    "end": "403160"
  },
  {
    "text": "the different command and this is where",
    "start": "403160",
    "end": "405860"
  },
  {
    "text": "the low balancer comes in",
    "start": "405860",
    "end": "407090"
  },
  {
    "text": "envoy come out of box with a large",
    "start": "407090",
    "end": "409790"
  },
  {
    "text": "number of load balancers randoms power",
    "start": "409790",
    "end": "414170"
  },
  {
    "text": "of two etc etc however unlike a lot of",
    "start": "414170",
    "end": "418160"
  },
  {
    "text": "other proxies where we're talking to",
    "start": "418160",
    "end": "420020"
  },
  {
    "text": "stateless service things like randoms or",
    "start": "420020",
    "end": "424910"
  },
  {
    "text": "round-robin actually doesn't make sense",
    "start": "424910",
    "end": "426650"
  },
  {
    "text": "for stateful service because we need to",
    "start": "426650",
    "end": "428690"
  },
  {
    "text": "make sure the same key is always as as",
    "start": "428690",
    "end": "432320"
  },
  {
    "text": "much as possible route it to the same",
    "start": "432320",
    "end": "434420"
  },
  {
    "text": "Redis note so luckily we have kind of",
    "start": "434420",
    "end": "438320"
  },
  {
    "text": "the alpha box consistent hashing load",
    "start": "438320",
    "end": "441320"
  },
  {
    "text": "balancer which is the ring hash which is",
    "start": "441320",
    "end": "443690"
  },
  {
    "text": "the Kodama hashing algorithms that",
    "start": "443690",
    "end": "446030"
  },
  {
    "text": "everyone's very familiar with consistent",
    "start": "446030",
    "end": "449030"
  },
  {
    "text": "hashing ring or the Maglev hashing and",
    "start": "449030",
    "end": "452210"
  },
  {
    "text": "we can in this case again because I'll",
    "start": "452210",
    "end": "455600"
  },
  {
    "text": "note just a flat list of nodes we can",
    "start": "455600",
    "end": "458720"
  },
  {
    "text": "just use those out of the box and then",
    "start": "458720",
    "end": "461830"
  },
  {
    "text": "for the up that's where the filter",
    "start": "461830",
    "end": "464780"
  },
  {
    "text": "chains are for upstream so each guy is",
    "start": "464780",
    "end": "469000"
  },
  {
    "text": "is very local so we can guarantee",
    "start": "469000",
    "end": "471440"
  },
  {
    "text": "performance without doing any locks and",
    "start": "471440",
    "end": "473750"
  },
  {
    "text": "then is the rivers of our downstream",
    "start": "473750",
    "end": "477260"
  },
  {
    "text": "where we encode what we have understand",
    "start": "477260",
    "end": "480650"
  },
  {
    "text": "as the Redis connections radix command",
    "start": "480650",
    "end": "483380"
  },
  {
    "text": "and request and then we send upstream to",
    "start": "483380",
    "end": "486640"
  },
  {
    "text": "Redis node somewhere it could be in",
    "start": "486640",
    "end": "489260"
  },
  {
    "text": "kubernetes it could be in your other G's",
    "start": "489260",
    "end": "493910"
  },
  {
    "text": "or yeah and then once we get the",
    "start": "493910",
    "end": "497330"
  },
  {
    "text": "response we travel backwards and of",
    "start": "497330",
    "end": "500870"
  },
  {
    "text": "course we also have to extend the",
    "start": "500870",
    "end": "502940"
  },
  {
    "text": "configuration so that this can all be",
    "start": "502940",
    "end": "505970"
  },
  {
    "text": "configured and on top of that we get the",
    "start": "505970",
    "end": "509870"
  },
  {
    "text": "amazing sets framework and the admins",
    "start": "509870",
    "end": "515890"
  },
  {
    "text": "endpoints that we can look at all the",
    "start": "515890",
    "end": "518659"
  },
  {
    "text": "metrics and the cluster memberships and",
    "start": "518660",
    "end": "521770"
  },
  {
    "text": "also out of the box envoy provides hot",
    "start": "521770",
    "end": "526370"
  },
  {
    "text": "restart so and the configuration can be",
    "start": "526370",
    "end": "528950"
  },
  {
    "text": "dynamic meaning compared to what these",
    "start": "528950",
    "end": "533730"
  },
  {
    "text": "was kind of inspired by the term poxy",
    "start": "533730",
    "end": "537899"
  },
  {
    "text": "where we we have a lot less human",
    "start": "537899",
    "end": "540959"
  },
  {
    "text": "interactions we don't have to take the",
    "start": "540959",
    "end": "542490"
  },
  {
    "text": "downtime to update the configurations",
    "start": "542490",
    "end": "544880"
  },
  {
    "text": "etc so this looks pretty good but in",
    "start": "544880",
    "end": "551790"
  },
  {
    "start": "551000",
    "end": "551000"
  },
  {
    "text": "real life",
    "start": "551790",
    "end": "552740"
  },
  {
    "text": "failures happens and we need to know how",
    "start": "552740",
    "end": "556920"
  },
  {
    "text": "to handle that failure and in order to",
    "start": "556920",
    "end": "560250"
  },
  {
    "text": "do that better we want to have both",
    "start": "560250",
    "end": "562820"
  },
  {
    "text": "pathy passive and active health check",
    "start": "562820",
    "end": "565649"
  },
  {
    "text": "so for passive health track it's",
    "start": "565649",
    "end": "568339"
  },
  {
    "text": "actually quite simple we just make sure",
    "start": "568339",
    "end": "572130"
  },
  {
    "text": "whenever we get a failure in the client",
    "start": "572130",
    "end": "574589"
  },
  {
    "text": "that we register with the Allied",
    "start": "574589",
    "end": "578399"
  },
  {
    "text": "detection that is provide the other box",
    "start": "578399",
    "end": "580889"
  },
  {
    "text": "for envoy but what about for active",
    "start": "580889",
    "end": "585389"
  },
  {
    "text": "health check how do we actually know a",
    "start": "585389",
    "end": "587279"
  },
  {
    "text": "radius know is actually healthy before",
    "start": "587279",
    "end": "591720"
  },
  {
    "text": "it gets removed from the discovery well",
    "start": "591720",
    "end": "595290"
  },
  {
    "text": "we actually have to implement a Redis",
    "start": "595290",
    "end": "599100"
  },
  {
    "text": "health checker again we leverage the",
    "start": "599100",
    "end": "601019"
  },
  {
    "text": "same Redis encoder and decoder to send",
    "start": "601019",
    "end": "604139"
  },
  {
    "text": "either pink or exists exists requests to",
    "start": "604139",
    "end": "609269"
  },
  {
    "text": "every single Redis note so you might be",
    "start": "609269",
    "end": "612930"
  },
  {
    "text": "wondering like for health check isn't a",
    "start": "612930",
    "end": "615209"
  },
  {
    "text": "successful being enough well actually if",
    "start": "615209",
    "end": "618360"
  },
  {
    "text": "we that is actually true but if we use",
    "start": "618360",
    "end": "621990"
  },
  {
    "text": "exists we have just implements a",
    "start": "621990",
    "end": "625279"
  },
  {
    "text": "mechanism where we can start draining",
    "start": "625279",
    "end": "627690"
  },
  {
    "text": "traffic's from a particular node before",
    "start": "627690",
    "end": "629639"
  },
  {
    "text": "it is actually remove from through the",
    "start": "629639",
    "end": "633149"
  },
  {
    "text": "discovery service so if we are",
    "start": "633149",
    "end": "635699"
  },
  {
    "text": "proactively trying to replace a node",
    "start": "635699",
    "end": "637500"
  },
  {
    "text": "then we can put in a special key to say",
    "start": "637500",
    "end": "639510"
  },
  {
    "text": "hey like and this underscore underscore",
    "start": "639510",
    "end": "641730"
  },
  {
    "text": "drink and then the health check would",
    "start": "641730",
    "end": "644630"
  },
  {
    "text": "check for the existence of that drink E",
    "start": "644630",
    "end": "647310"
  },
  {
    "text": "and then we can use that to remove this",
    "start": "647310",
    "end": "652170"
  },
  {
    "text": "particular node from the cluster and",
    "start": "652170",
    "end": "654720"
  },
  {
    "text": "then we stop rushing to it so at this",
    "start": "654720",
    "end": "658680"
  },
  {
    "text": "point we have a pretty well functioning",
    "start": "658680",
    "end": "661819"
  },
  {
    "text": "Redis proxy it even survived Network",
    "start": "661819",
    "end": "666720"
  },
  {
    "text": "partitions",
    "start": "666720",
    "end": "667380"
  },
  {
    "text": "which is one of the hard things to do",
    "start": "667380",
    "end": "669840"
  },
  {
    "text": "because if there is a pairwise network",
    "start": "669840",
    "end": "673050"
  },
  {
    "text": "partitions we just our health checker",
    "start": "673050",
    "end": "675510"
  },
  {
    "text": "would detect that and it would evict it",
    "start": "675510",
    "end": "678060"
  },
  {
    "text": "from the node and it would the law will",
    "start": "678060",
    "end": "681660"
  },
  {
    "text": "be roughly to just a different note so",
    "start": "681660",
    "end": "685830"
  },
  {
    "text": "what more can we want well if you talk",
    "start": "685830",
    "end": "692220"
  },
  {
    "start": "689000",
    "end": "689000"
  },
  {
    "text": "to well understand the cap theorems you",
    "start": "692220",
    "end": "695160"
  },
  {
    "text": "know as the number of services that use",
    "start": "695160",
    "end": "697590"
  },
  {
    "text": "this thing increases engineers come back",
    "start": "697590",
    "end": "699930"
  },
  {
    "text": "and say hey we were always one more if",
    "start": "699930",
    "end": "701880"
  },
  {
    "text": "you are available and you survive then",
    "start": "701880",
    "end": "704160"
  },
  {
    "text": "we partition we want consistency and",
    "start": "704160",
    "end": "706490"
  },
  {
    "text": "it's it's a reasonable request because",
    "start": "706490",
    "end": "710390"
  },
  {
    "text": "for some services where consistency is",
    "start": "710390",
    "end": "713280"
  },
  {
    "text": "more important they would rather evict",
    "start": "713280",
    "end": "715920"
  },
  {
    "text": "the node that is having network",
    "start": "715920",
    "end": "718890"
  },
  {
    "text": "partitions so that everyone's would",
    "start": "718890",
    "end": "721830"
  },
  {
    "text": "always write the same key to the to the",
    "start": "721830",
    "end": "725520"
  },
  {
    "text": "same Redis nodes rather than having kind",
    "start": "725520",
    "end": "729360"
  },
  {
    "text": "of working in a split brain situations",
    "start": "729360",
    "end": "732320"
  },
  {
    "text": "and secondly when we're dealing with",
    "start": "732320",
    "end": "736890"
  },
  {
    "text": "stateful services sometimes having more",
    "start": "736890",
    "end": "739950"
  },
  {
    "text": "predictable failure behavior is is",
    "start": "739950",
    "end": "743460"
  },
  {
    "text": "important when we remove a node from a",
    "start": "743460",
    "end": "748050"
  },
  {
    "text": "consistent hashing ring they it's it's",
    "start": "748050",
    "end": "751110"
  },
  {
    "text": "not very predictable on where the shards",
    "start": "751110",
    "end": "754080"
  },
  {
    "text": "would be landing on and it is possible",
    "start": "754080",
    "end": "757320"
  },
  {
    "text": "that we can have multiple hotkeys",
    "start": "757320",
    "end": "760680"
  },
  {
    "text": "landing on a new node and also we want",
    "start": "760680",
    "end": "766290"
  },
  {
    "text": "to be able to say hey like exactly what",
    "start": "766290",
    "end": "769020"
  },
  {
    "text": "the performance would look like and if",
    "start": "769020",
    "end": "771630"
  },
  {
    "text": "we have which is kind of related to the",
    "start": "771630",
    "end": "774270"
  },
  {
    "text": "next points are related to replications",
    "start": "774270",
    "end": "777030"
  },
  {
    "text": "is we want to be able for on a replica",
    "start": "777030",
    "end": "780720"
  },
  {
    "text": "if possible rather than just hashing to",
    "start": "780720",
    "end": "785060"
  },
  {
    "text": "the rest of the cluster also in the last",
    "start": "785060",
    "end": "789540"
  },
  {
    "text": "couple of years there is really strong",
    "start": "789540",
    "end": "791430"
  },
  {
    "text": "community support and momentum going",
    "start": "791430",
    "end": "794160"
  },
  {
    "text": "towards embracing the Redis cluster",
    "start": "794160",
    "end": "797570"
  },
  {
    "text": "protocol way it's about some of these",
    "start": "797570",
    "end": "801529"
  },
  {
    "text": "features and what are some of the",
    "start": "801529",
    "end": "805170"
  },
  {
    "text": "challenges of adding these well prior to",
    "start": "805170",
    "end": "809189"
  },
  {
    "text": "trying to implement this feature on",
    "start": "809189",
    "end": "811489"
  },
  {
    "text": "voice service discovery discovery",
    "start": "811489",
    "end": "814860"
  },
  {
    "text": "mechanism is Bill as part of own voice",
    "start": "814860",
    "end": "817290"
  },
  {
    "text": "and obviously we don't want to be ready",
    "start": "817290",
    "end": "820319"
  },
  {
    "text": "specific implementation into the call of",
    "start": "820319",
    "end": "823410"
  },
  {
    "text": "own voice so we need to have a mechanism",
    "start": "823410",
    "end": "825029"
  },
  {
    "text": "to extend that and to come up with the",
    "start": "825029",
    "end": "829410"
  },
  {
    "text": "Redis cost the protocol we have a more",
    "start": "829410",
    "end": "832079"
  },
  {
    "text": "complicated topology well especially",
    "start": "832079",
    "end": "835049"
  },
  {
    "text": "when we want to support things like",
    "start": "835049",
    "end": "837920"
  },
  {
    "text": "replications now we don't just have a",
    "start": "837920",
    "end": "841230"
  },
  {
    "text": "flat list of note we have primaries and",
    "start": "841230",
    "end": "844679"
  },
  {
    "text": "we have replicas we have concepts of",
    "start": "844679",
    "end": "848600"
  },
  {
    "text": "slots and wear and shot and another",
    "start": "848600",
    "end": "854939"
  },
  {
    "text": "thing that will come with the Redis",
    "start": "854939",
    "end": "858959"
  },
  {
    "text": "protocol so the Redis Perl code",
    "start": "858959",
    "end": "860730"
  },
  {
    "text": "basically is you have a consensus a",
    "start": "860730",
    "end": "865350"
  },
  {
    "text": "gossip promo code on the on the Redis",
    "start": "865350",
    "end": "868110"
  },
  {
    "text": "castle itself to determines what the",
    "start": "868110",
    "end": "871970"
  },
  {
    "text": "topology will be and then you can make",
    "start": "871970",
    "end": "876809"
  },
  {
    "text": "amends to it to say hey like tell me",
    "start": "876809",
    "end": "879179"
  },
  {
    "text": "what the topologies are and if you send",
    "start": "879179",
    "end": "883019"
  },
  {
    "text": "the requests let's say you're your",
    "start": "883019",
    "end": "885839"
  },
  {
    "text": "discovery is is is out of date you send",
    "start": "885839",
    "end": "890069"
  },
  {
    "text": "commands to the wrong note you give you",
    "start": "890069",
    "end": "892739"
  },
  {
    "text": "a inline redirection to say hey like",
    "start": "892739",
    "end": "895429"
  },
  {
    "text": "instead of sending this command to me",
    "start": "895429",
    "end": "898470"
  },
  {
    "text": "you should send it to this other node",
    "start": "898470",
    "end": "900209"
  },
  {
    "text": "and the challenge with that is that the",
    "start": "900209",
    "end": "903629"
  },
  {
    "text": "other node might not be in our cluster",
    "start": "903629",
    "end": "905610"
  },
  {
    "text": "it might not be a know that we already",
    "start": "905610",
    "end": "907379"
  },
  {
    "text": "know so how do we deal with that well",
    "start": "907379",
    "end": "911209"
  },
  {
    "text": "that's what the next iteration looks",
    "start": "911209",
    "end": "914279"
  },
  {
    "text": "like so we implemented a extensions that",
    "start": "914279",
    "end": "919619"
  },
  {
    "text": "would handle the raddest custard",
    "start": "919619",
    "end": "923689"
  },
  {
    "text": "discovery so on on initializations we",
    "start": "923689",
    "end": "927540"
  },
  {
    "text": "would get some list of seed clusters and",
    "start": "927540",
    "end": "931769"
  },
  {
    "text": "then we make the Redis",
    "start": "931769",
    "end": "935040"
  },
  {
    "text": "commands to those to call the cluster",
    "start": "935040",
    "end": "938730"
  },
  {
    "text": "slots to get the topology and then we",
    "start": "938730",
    "end": "942660"
  },
  {
    "text": "use that to inform the connections now",
    "start": "942660",
    "end": "945779"
  },
  {
    "text": "on the data pipelines when we make a",
    "start": "945779",
    "end": "950310"
  },
  {
    "text": "request to read this note and then it",
    "start": "950310",
    "end": "954570"
  },
  {
    "text": "come back with either ask or move",
    "start": "954570",
    "end": "957149"
  },
  {
    "text": "basically in redirections then we will",
    "start": "957149",
    "end": "961410"
  },
  {
    "text": "just resend the request to the new nodes",
    "start": "961410",
    "end": "965639"
  },
  {
    "text": "and we are asked to redirect to know",
    "start": "965639",
    "end": "969930"
  },
  {
    "text": "that we are not currently aware of that",
    "start": "969930",
    "end": "972720"
  },
  {
    "text": "will create a temporary host in the",
    "start": "972720",
    "end": "975360"
  },
  {
    "text": "connection pool and and then I would try",
    "start": "975360",
    "end": "979079"
  },
  {
    "text": "to drain those once they discover in the",
    "start": "979079",
    "end": "982980"
  },
  {
    "text": "next time we we do the discovery one of",
    "start": "982980",
    "end": "988320"
  },
  {
    "text": "the small trade off of doing this is now",
    "start": "988320",
    "end": "993930"
  },
  {
    "text": "we have to hold on to the request for",
    "start": "993930",
    "end": "998250"
  },
  {
    "text": "longer because in the case like before",
    "start": "998250",
    "end": "1000440"
  },
  {
    "text": "we will get the request we send it off",
    "start": "1000440",
    "end": "1002990"
  },
  {
    "text": "and we can create that from the memory",
    "start": "1002990",
    "end": "1006380"
  },
  {
    "text": "but now we have to hold on until we get",
    "start": "1006380",
    "end": "1010579"
  },
  {
    "text": "either error or a failure response",
    "start": "1010579",
    "end": "1013760"
  },
  {
    "text": "because there's a chance that we need to",
    "start": "1013760",
    "end": "1015500"
  },
  {
    "text": "resend that so there is a small increase",
    "start": "1015500",
    "end": "1017990"
  },
  {
    "text": "in memory footprint so at this point we",
    "start": "1017990",
    "end": "1023870"
  },
  {
    "text": "are not making we don't need to make any",
    "start": "1023870",
    "end": "1025730"
  },
  {
    "text": "changes to the load balancer and this is",
    "start": "1025730",
    "end": "1029780"
  },
  {
    "text": "what the open source readies community",
    "start": "1029780",
    "end": "1034819"
  },
  {
    "text": "called a dumb client you could actually",
    "start": "1034819",
    "end": "1036829"
  },
  {
    "text": "even use a random a load balancer",
    "start": "1036829",
    "end": "1039319"
  },
  {
    "text": "because what we rely on the correctness",
    "start": "1039319",
    "end": "1042079"
  },
  {
    "text": "is that you doesn't matter you send it",
    "start": "1042079",
    "end": "1044660"
  },
  {
    "text": "to any Redis note and if you get it",
    "start": "1044660",
    "end": "1047089"
  },
  {
    "text": "right it gives you the answer you want",
    "start": "1047089",
    "end": "1049580"
  },
  {
    "text": "and if you get you get it wrong it's",
    "start": "1049580",
    "end": "1051890"
  },
  {
    "text": "sent back a redirection to point you to",
    "start": "1051890",
    "end": "1054429"
  },
  {
    "text": "the correct note but obviously I mean we",
    "start": "1054429",
    "end": "1058490"
  },
  {
    "text": "are working in although we don't want",
    "start": "1058490",
    "end": "1060440"
  },
  {
    "text": "anything dumb so we will find a way to",
    "start": "1060440",
    "end": "1065980"
  },
  {
    "start": "1063000",
    "end": "1063000"
  },
  {
    "text": "to get around that",
    "start": "1065980",
    "end": "1068770"
  },
  {
    "text": "so we need to create a reddest specific",
    "start": "1068770",
    "end": "1073790"
  },
  {
    "text": "load balancer that can understand this",
    "start": "1073790",
    "end": "1075770"
  },
  {
    "text": "that can handle these protocols so it",
    "start": "1075770",
    "end": "1078860"
  },
  {
    "text": "has to understand the the cluster",
    "start": "1078860",
    "end": "1081260"
  },
  {
    "text": "topology it has to understand okay no",
    "start": "1081260",
    "end": "1084830"
  },
  {
    "text": "coral correlates to a shot and then",
    "start": "1084830",
    "end": "1087500"
  },
  {
    "text": "there are primaries and replicas but",
    "start": "1087500",
    "end": "1091880"
  },
  {
    "text": "also if we I really want to send",
    "start": "1091880",
    "end": "1094450"
  },
  {
    "text": "requests to replicas we we can't do",
    "start": "1094450",
    "end": "1097400"
  },
  {
    "text": "right request to replicas we can only do",
    "start": "1097400",
    "end": "1102130"
  },
  {
    "text": "read commands so now we have to update",
    "start": "1102130",
    "end": "1106310"
  },
  {
    "text": "our proxy to understand what is the",
    "start": "1106310",
    "end": "1109130"
  },
  {
    "text": "difference between a recommand and the",
    "start": "1109130",
    "end": "1111650"
  },
  {
    "text": "right command but once we can do this we",
    "start": "1111650",
    "end": "1115340"
  },
  {
    "text": "can actually opens a lot of options are",
    "start": "1115340",
    "end": "1119150"
  },
  {
    "text": "to tune how our services use our Redis",
    "start": "1119150",
    "end": "1124690"
  },
  {
    "text": "configurations and this is actually",
    "start": "1124690",
    "end": "1127010"
  },
  {
    "text": "something that is surprisingly uncommon",
    "start": "1127010",
    "end": "1130370"
  },
  {
    "text": "in the current Redis clients to be able",
    "start": "1130370",
    "end": "1134180"
  },
  {
    "text": "to natively say hey like I want to send",
    "start": "1134180",
    "end": "1136820"
  },
  {
    "text": "out all of our require a read request to",
    "start": "1136820",
    "end": "1141140"
  },
  {
    "text": "the master only in that case you say hey",
    "start": "1141140",
    "end": "1143690"
  },
  {
    "text": "I want to make sure I'm consistent",
    "start": "1143690",
    "end": "1146090"
  },
  {
    "text": "always I can't tolerate in any",
    "start": "1146090",
    "end": "1148460"
  },
  {
    "text": "inconsistency and the replica is there",
    "start": "1148460",
    "end": "1151100"
  },
  {
    "text": "only to serve fair over oh you can you",
    "start": "1151100",
    "end": "1156740"
  },
  {
    "text": "can say hey I want to send to the master",
    "start": "1156740",
    "end": "1158870"
  },
  {
    "text": "if it's available it's it's healthy and",
    "start": "1158870",
    "end": "1161510"
  },
  {
    "text": "if not I don't want to wait for the load",
    "start": "1161510",
    "end": "1163700"
  },
  {
    "text": "balance I just want to send the require",
    "start": "1163700",
    "end": "1166850"
  },
  {
    "text": "green request to replicas and similarly",
    "start": "1166850",
    "end": "1170060"
  },
  {
    "text": "if you want to protect your master then",
    "start": "1170060",
    "end": "1171770"
  },
  {
    "text": "you can draw all of the traffic to the",
    "start": "1171770",
    "end": "1174230"
  },
  {
    "text": "replicas and and any is like hey I want",
    "start": "1174230",
    "end": "1177920"
  },
  {
    "text": "to prioritize sending to any healthy",
    "start": "1177920",
    "end": "1182060"
  },
  {
    "text": "host regardless of whether they're",
    "start": "1182060",
    "end": "1184280"
  },
  {
    "text": "replicas or master so what does it look",
    "start": "1184280",
    "end": "1188750"
  },
  {
    "text": "like once we implement this then we we",
    "start": "1188750",
    "end": "1193550"
  },
  {
    "text": "have to come up with a new mechanisms",
    "start": "1193550",
    "end": "1195410"
  },
  {
    "text": "for the cluster itself to provide the",
    "start": "1195410",
    "end": "1198290"
  },
  {
    "text": "load balancer rather than the load",
    "start": "1198290",
    "end": "1201050"
  },
  {
    "text": "balancer being",
    "start": "1201050",
    "end": "1202400"
  },
  {
    "text": "for its configurations on the listener",
    "start": "1202400",
    "end": "1205780"
  },
  {
    "text": "and that looked pretty straightforward",
    "start": "1205780",
    "end": "1208490"
  },
  {
    "text": "the Redis Costner would update the Redis",
    "start": "1208490",
    "end": "1211550"
  },
  {
    "text": "load balancer with all the shots and it",
    "start": "1211550",
    "end": "1213740"
  },
  {
    "text": "actually is we we now don't have to",
    "start": "1213740",
    "end": "1217390"
  },
  {
    "text": "recompute this topology mapping",
    "start": "1217390",
    "end": "1222460"
  },
  {
    "start": "1223000",
    "end": "1223000"
  },
  {
    "text": "similarly with health check we find that",
    "start": "1223390",
    "end": "1227630"
  },
  {
    "text": "in practice we have this dilemma whether",
    "start": "1227630",
    "end": "1230870"
  },
  {
    "text": "if we want to have a very quick failover",
    "start": "1230870",
    "end": "1234590"
  },
  {
    "text": "times when a no fail or when we add a",
    "start": "1234590",
    "end": "1237650"
  },
  {
    "text": "note we have to have very short if we",
    "start": "1237650",
    "end": "1239960"
  },
  {
    "text": "only rely on periodic updates we have to",
    "start": "1239960",
    "end": "1242090"
  },
  {
    "text": "have a really short refresh cycles like",
    "start": "1242090",
    "end": "1246560"
  },
  {
    "text": "we would be pinging the Redis cluster",
    "start": "1246560",
    "end": "1248720"
  },
  {
    "text": "for topology up there all the time oh we",
    "start": "1248720",
    "end": "1252590"
  },
  {
    "text": "have to tolerate a long period of",
    "start": "1252590",
    "end": "1254240"
  },
  {
    "text": "increase our redirections surely we can",
    "start": "1254240",
    "end": "1257720"
  },
  {
    "text": "do better and that's when we introduced",
    "start": "1257720",
    "end": "1259790"
  },
  {
    "text": "this redirection managers say whenever",
    "start": "1259790",
    "end": "1262010"
  },
  {
    "text": "we gather redirections",
    "start": "1262010",
    "end": "1263270"
  },
  {
    "text": "we tell the reduction manager hey we're",
    "start": "1263270",
    "end": "1265790"
  },
  {
    "text": "receiving redirections this is probably",
    "start": "1265790",
    "end": "1268850"
  },
  {
    "text": "a good idea to trigger topology updates",
    "start": "1268850",
    "end": "1271700"
  },
  {
    "text": "and updates what our cluster should look",
    "start": "1271700",
    "end": "1274640"
  },
  {
    "text": "like and we also use the reduction",
    "start": "1274640",
    "end": "1276950"
  },
  {
    "text": "manager to protect the cluster so that",
    "start": "1276950",
    "end": "1279440"
  },
  {
    "text": "we can say hey you can't send keep",
    "start": "1279440",
    "end": "1282950"
  },
  {
    "text": "sending topology update you can do it",
    "start": "1282950",
    "end": "1284600"
  },
  {
    "text": "once every 10 seconds or something like",
    "start": "1284600",
    "end": "1286370"
  },
  {
    "text": "that so this is actually pretty feature",
    "start": "1286370",
    "end": "1292070"
  },
  {
    "text": "complete as fast proxy against a single",
    "start": "1292070",
    "end": "1296870"
  },
  {
    "text": "cluster is concerned but then when we",
    "start": "1296870",
    "end": "1299090"
  },
  {
    "text": "start using it more we find out we have",
    "start": "1299090",
    "end": "1301400"
  },
  {
    "text": "a lot of scenarios where we actually",
    "start": "1301400",
    "end": "1303800"
  },
  {
    "text": "want to involve multiple clusters we",
    "start": "1303800",
    "end": "1307610"
  },
  {
    "text": "want to be able to mirror to multiple",
    "start": "1307610",
    "end": "1311930"
  },
  {
    "text": "clusters maybe cross regions so or maybe",
    "start": "1311930",
    "end": "1316670"
  },
  {
    "text": "we want to have on the manage where this",
    "start": "1316670",
    "end": "1320740"
  },
  {
    "text": "all these commands goat-like we can have",
    "start": "1320740",
    "end": "1324200"
  },
  {
    "text": "a share Custer with different prefix and",
    "start": "1324200",
    "end": "1327320"
  },
  {
    "text": "then we can route them just like how we",
    "start": "1327320",
    "end": "1329000"
  },
  {
    "text": "draw HTTP requests and so we we added",
    "start": "1329000",
    "end": "1334040"
  },
  {
    "text": "this router where we",
    "start": "1334040",
    "end": "1335720"
  },
  {
    "text": "can wrap a request not just on what",
    "start": "1335720",
    "end": "1339559"
  },
  {
    "text": "notes in the classroom but across",
    "start": "1339559",
    "end": "1341150"
  },
  {
    "text": "multiple classes and Nico Nico he is",
    "start": "1341150",
    "end": "1345260"
  },
  {
    "text": "going to talk about a very interesting",
    "start": "1345260",
    "end": "1348039"
  },
  {
    "text": "case where we use these thanks Henry",
    "start": "1348039",
    "end": "1353809"
  },
  {
    "text": "so over the last year we've done all",
    "start": "1353809",
    "end": "1358130"
  },
  {
    "start": "1356000",
    "end": "1356000"
  },
  {
    "text": "this hard work and the real world",
    "start": "1358130",
    "end": "1360740"
  },
  {
    "text": "application is migrating millions of QPS",
    "start": "1360740",
    "end": "1363620"
  },
  {
    "text": "to Redis cluster at lyft we have",
    "start": "1363620",
    "end": "1366980"
  },
  {
    "text": "hundreds of clusters something like 40",
    "start": "1366980",
    "end": "1369710"
  },
  {
    "text": "million QPS or more during peak ordering",
    "start": "1369710",
    "end": "1372230"
  },
  {
    "text": "load tests the biggest clusters 500",
    "start": "1372230",
    "end": "1374480"
  },
  {
    "text": "nodes with you know a quarter of that",
    "start": "1374480",
    "end": "1376820"
  },
  {
    "text": "whole load these clusters aren't all",
    "start": "1376820",
    "end": "1380210"
  },
  {
    "text": "just straight-up caches some of them are",
    "start": "1380210",
    "end": "1382340"
  },
  {
    "text": "more like transient data where there's a",
    "start": "1382340",
    "end": "1383630"
  },
  {
    "text": "source of record and you can't just",
    "start": "1383630",
    "end": "1385250"
  },
  {
    "text": "throw away to data and rehydrate from",
    "start": "1385250",
    "end": "1386780"
  },
  {
    "text": "you know dynamo let's say and these",
    "start": "1386780",
    "end": "1389360"
  },
  {
    "text": "services are in Python go lots of",
    "start": "1389360",
    "end": "1391880"
  },
  {
    "text": "different languages and like Henry was",
    "start": "1391880",
    "end": "1394520"
  },
  {
    "text": "saying about Redis clients you know each",
    "start": "1394520",
    "end": "1396620"
  },
  {
    "text": "language kind of has its own",
    "start": "1396620",
    "end": "1398059"
  },
  {
    "text": "implementation and with Redis cluster",
    "start": "1398059",
    "end": "1399830"
  },
  {
    "text": "where you have a smart client this",
    "start": "1399830",
    "end": "1402110"
  },
  {
    "text": "becomes really critical because you want",
    "start": "1402110",
    "end": "1403820"
  },
  {
    "text": "your topology updates to be the same you",
    "start": "1403820",
    "end": "1405679"
  },
  {
    "text": "and a lot of that behavior to be",
    "start": "1405679",
    "end": "1406730"
  },
  {
    "text": "consistent so how do we migrate all",
    "start": "1406730",
    "end": "1410929"
  },
  {
    "text": "these things you know zero plan downtime",
    "start": "1410929",
    "end": "1414830"
  },
  {
    "text": "zero outages zero data loss how do we do",
    "start": "1414830",
    "end": "1418640"
  },
  {
    "text": "that and the answer of course is envoy",
    "start": "1418640",
    "end": "1420590"
  },
  {
    "text": "as you guessed traditionally Redis",
    "start": "1420590",
    "end": "1423890"
  },
  {
    "text": "migration has been really painful you",
    "start": "1423890",
    "end": "1426740"
  },
  {
    "text": "know you look across all the",
    "start": "1426740",
    "end": "1428210"
  },
  {
    "text": "applications that might be using a given",
    "start": "1428210",
    "end": "1429730"
  },
  {
    "text": "Redis cluster and like a regular itís",
    "start": "1429730",
    "end": "1432679"
  },
  {
    "text": "not just Redis cluster and you know",
    "start": "1432679",
    "end": "1435159"
  },
  {
    "text": "instrument everything do right if things",
    "start": "1435159",
    "end": "1438500"
  },
  {
    "text": "look all right then you do read and then",
    "start": "1438500",
    "end": "1442730"
  },
  {
    "text": "you kind of hope and if you're lucky it",
    "start": "1442730",
    "end": "1444950"
  },
  {
    "text": "works well otherwise need to go back and",
    "start": "1444950",
    "end": "1447020"
  },
  {
    "text": "you know monitor the Redis check where",
    "start": "1447020",
    "end": "1448760"
  },
  {
    "text": "all the connections are coming from and",
    "start": "1448760",
    "end": "1450260"
  },
  {
    "text": "with Envoy you don't need to do this",
    "start": "1450260",
    "end": "1453049"
  },
  {
    "text": "anymore you know you can really can know",
    "start": "1453049",
    "end": "1456169"
  },
  {
    "text": "where everything's going if you're",
    "start": "1456169",
    "end": "1457190"
  },
  {
    "text": "already talking to Redis be Envoy you",
    "start": "1457190",
    "end": "1459559"
  },
  {
    "text": "have consistent stats you don't need to",
    "start": "1459559",
    "end": "1462230"
  },
  {
    "text": "make any changes to the application with",
    "start": "1462230",
    "end": "1465110"
  },
  {
    "text": "our you know cluster support you don't",
    "start": "1465110",
    "end": "1468320"
  },
  {
    "text": "need to",
    "start": "1468320",
    "end": "1468860"
  },
  {
    "text": "a cluster at his client that's really",
    "start": "1468860",
    "end": "1470780"
  },
  {
    "text": "the key part because you'll have now",
    "start": "1470780",
    "end": "1472670"
  },
  {
    "text": "consistent behavior across everything",
    "start": "1472670",
    "end": "1474880"
  },
  {
    "text": "envoy manages the apology with the stats",
    "start": "1474880",
    "end": "1479299"
  },
  {
    "text": "you know one thing owner to call out is",
    "start": "1479299",
    "end": "1480530"
  },
  {
    "text": "that because you can get stats in the",
    "start": "1480530",
    "end": "1483140"
  },
  {
    "text": "upstream not just the downstream right",
    "start": "1483140",
    "end": "1485210"
  },
  {
    "text": "you know can traditionally just look at",
    "start": "1485210",
    "end": "1486500"
  },
  {
    "text": "her downstream stats but if you have",
    "start": "1486500",
    "end": "1488000"
  },
  {
    "text": "multiple up streams where you're",
    "start": "1488000",
    "end": "1489350"
  },
  {
    "text": "mirroring across traffic you can just",
    "start": "1489350",
    "end": "1492170"
  },
  {
    "text": "kind of individual per upstream request",
    "start": "1492170",
    "end": "1493970"
  },
  {
    "text": "stats and then we also have some special",
    "start": "1493970",
    "end": "1495530"
  },
  {
    "text": "rhetta's command stats so you can get",
    "start": "1495530",
    "end": "1497480"
  },
  {
    "text": "kind of per command counts and really",
    "start": "1497480",
    "end": "1499010"
  },
  {
    "text": "get more confidence that things are all",
    "start": "1499010",
    "end": "1502309"
  },
  {
    "text": "in sync and then you know finally you",
    "start": "1502309",
    "end": "1506299"
  },
  {
    "text": "can mirror the traffic from one Redis to",
    "start": "1506299",
    "end": "1508040"
  },
  {
    "text": "another and like Henry was talking about",
    "start": "1508040",
    "end": "1510320"
  },
  {
    "text": "you know we have prefix routing which if",
    "start": "1510320",
    "end": "1512809"
  },
  {
    "text": "you've unique prefixes allows you to",
    "start": "1512809",
    "end": "1514640"
  },
  {
    "text": "compose and decompose traffic from",
    "start": "1514640",
    "end": "1517700"
  },
  {
    "text": "different services which becomes very",
    "start": "1517700",
    "end": "1519169"
  },
  {
    "text": "powerful later on soo let's now talk",
    "start": "1519169",
    "end": "1524120"
  },
  {
    "text": "about how a migration looks practically",
    "start": "1524120",
    "end": "1528919"
  },
  {
    "text": "speaking it's a four-step process if we",
    "start": "1528919",
    "end": "1531710"
  },
  {
    "text": "have a single service to talks to Redis",
    "start": "1531710",
    "end": "1533419"
  },
  {
    "text": "via envoy like we do it lifts it's",
    "start": "1533419",
    "end": "1536120"
  },
  {
    "text": "really straightforward you know assuming",
    "start": "1536120",
    "end": "1537650"
  },
  {
    "text": "you've provisioned your new Redis you'll",
    "start": "1537650",
    "end": "1540320"
  },
  {
    "text": "then just add the Redis in the cluster",
    "start": "1540320",
    "end": "1544040"
  },
  {
    "text": "section on droid config and you know",
    "start": "1544040",
    "end": "1546169"
  },
  {
    "text": "immediately you'll start to see health",
    "start": "1546169",
    "end": "1547280"
  },
  {
    "text": "checks come in you know if you go and",
    "start": "1547280",
    "end": "1548809"
  },
  {
    "text": "read us Redis and monitor or the",
    "start": "1548809",
    "end": "1551510"
  },
  {
    "text": "connections you'll see the connections",
    "start": "1551510",
    "end": "1552890"
  },
  {
    "text": "and you don't have to add a listener for",
    "start": "1552890",
    "end": "1555500"
  },
  {
    "text": "the new Redis if you want to you know",
    "start": "1555500",
    "end": "1558290"
  },
  {
    "text": "you could just to make sure things are",
    "start": "1558290",
    "end": "1559640"
  },
  {
    "text": "up and running but thistles enough to",
    "start": "1559640",
    "end": "1561799"
  },
  {
    "text": "get you started the next step is adding",
    "start": "1561799",
    "end": "1565460"
  },
  {
    "text": "a mirror policy so this is where we",
    "start": "1565460",
    "end": "1568640"
  },
  {
    "text": "essentially just tell it you know you",
    "start": "1568640",
    "end": "1570890"
  },
  {
    "text": "can shift this or you can copy this much",
    "start": "1570890",
    "end": "1573020"
  },
  {
    "text": "traffic over to new Redis and it's",
    "start": "1573020",
    "end": "1575240"
  },
  {
    "text": "useful not just for arena warming the",
    "start": "1575240",
    "end": "1577370"
  },
  {
    "text": "cache but also load testing and sizing",
    "start": "1577370",
    "end": "1579650"
  },
  {
    "text": "and it's pretty performant for that one",
    "start": "1579650",
    "end": "1582620"
  },
  {
    "text": "big cluster I mentioned you know at peak",
    "start": "1582620",
    "end": "1584780"
  },
  {
    "text": "of load tests were something like 23",
    "start": "1584780",
    "end": "1586400"
  },
  {
    "text": "million queries per second across a",
    "start": "1586400",
    "end": "1588970"
  },
  {
    "text": "thousand plus service nodes I think and",
    "start": "1588970",
    "end": "1591850"
  },
  {
    "text": "there was no degradation in performance",
    "start": "1591850",
    "end": "1594980"
  },
  {
    "text": "that was really great and then you know",
    "start": "1594980",
    "end": "1597620"
  },
  {
    "text": "monitoring we have our upstream stats on",
    "start": "1597620",
    "end": "1600350"
  },
  {
    "text": "both sides",
    "start": "1600350",
    "end": "1601740"
  },
  {
    "text": "then we essentially can mirror for a",
    "start": "1601740",
    "end": "1604380"
  },
  {
    "text": "while in our max TTL we might new in a",
    "start": "1604380",
    "end": "1605910"
  },
  {
    "text": "bake a little bit longer if we have a",
    "start": "1605910",
    "end": "1607410"
  },
  {
    "text": "new computer environment like moving to",
    "start": "1607410",
    "end": "1609179"
  },
  {
    "text": "kubernetes or a new cloud provider and",
    "start": "1609179",
    "end": "1611670"
  },
  {
    "text": "then once we're there we can validate",
    "start": "1611670",
    "end": "1615660"
  },
  {
    "text": "our data so for lift migrations were",
    "start": "1615660",
    "end": "1619350"
  },
  {
    "text": "chosen essentially just you know say",
    "start": "1619350",
    "end": "1620880"
  },
  {
    "text": "given a reddish shard in our old Redis",
    "start": "1620880",
    "end": "1623550"
  },
  {
    "text": "let's get all the keys and then run",
    "start": "1623550",
    "end": "1626670"
  },
  {
    "text": "those keys through envoy for old new and",
    "start": "1626670",
    "end": "1628730"
  },
  {
    "text": "compare them by data type and if we have",
    "start": "1628730",
    "end": "1630840"
  },
  {
    "text": "a under a certain threshold differences",
    "start": "1630840",
    "end": "1633120"
  },
  {
    "text": "we're good now mirroring has one case",
    "start": "1633120",
    "end": "1637679"
  },
  {
    "text": "where it won't work and this is if you",
    "start": "1637679",
    "end": "1638940"
  },
  {
    "text": "have data that doesn't have a TTL like",
    "start": "1638940",
    "end": "1640559"
  },
  {
    "text": "you're using Redis as a queue so you",
    "start": "1640559",
    "end": "1642780"
  },
  {
    "text": "know there you need to do some sort of",
    "start": "1642780",
    "end": "1645179"
  },
  {
    "text": "copying su finally you can essentially",
    "start": "1645179",
    "end": "1650010"
  },
  {
    "text": "switch over traffic now one thing I want",
    "start": "1650010",
    "end": "1653970"
  },
  {
    "text": "to note in this diagram up here is that",
    "start": "1653970",
    "end": "1655860"
  },
  {
    "text": "we do a reverse mirror to keep the data",
    "start": "1655860",
    "end": "1657840"
  },
  {
    "text": "in sync on the old Redis so we can bake",
    "start": "1657840",
    "end": "1660840"
  },
  {
    "text": "you know especially if we're moving like",
    "start": "1660840",
    "end": "1662190"
  },
  {
    "text": "ElastiCache or a new environment you",
    "start": "1662190",
    "end": "1665100"
  },
  {
    "text": "know just let it sit for awhile and we",
    "start": "1665100",
    "end": "1666660"
  },
  {
    "text": "can switch back in emergency the other",
    "start": "1666660",
    "end": "1669210"
  },
  {
    "text": "point here to note is that we're not",
    "start": "1669210",
    "end": "1672570"
  },
  {
    "text": "doing a selective read really like you",
    "start": "1672570",
    "end": "1674610"
  },
  {
    "text": "might do normally we're just in the",
    "start": "1674610",
    "end": "1677160"
  },
  {
    "text": "listener we'll just say you know pointer",
    "start": "1677160",
    "end": "1678600"
  },
  {
    "text": "to do cluster and then change your",
    "start": "1678600",
    "end": "1679770"
  },
  {
    "text": "mirror policy to pointer to old cluster",
    "start": "1679770",
    "end": "1681540"
  },
  {
    "text": "but we've been weaving reading and",
    "start": "1681540",
    "end": "1683580"
  },
  {
    "text": "writing to both clusters the whole time",
    "start": "1683580",
    "end": "1686309"
  },
  {
    "text": "so it's not really that different we",
    "start": "1686309",
    "end": "1687720"
  },
  {
    "text": "have stats to basically show",
    "start": "1687720",
    "end": "1688800"
  },
  {
    "text": "everything's working and then we've done",
    "start": "1688800",
    "end": "1690570"
  },
  {
    "text": "a validation and you know then we've",
    "start": "1690570",
    "end": "1693240"
  },
  {
    "text": "baked a little bit longer and you get",
    "start": "1693240",
    "end": "1695340"
  },
  {
    "text": "ready to turn off all the Redis and then",
    "start": "1695340",
    "end": "1697260"
  },
  {
    "text": "we do that we've done this for a number",
    "start": "1697260",
    "end": "1699179"
  },
  {
    "text": "of lift services and it's worked pretty",
    "start": "1699179",
    "end": "1700890"
  },
  {
    "text": "well and we've done tens of clusters you",
    "start": "1700890",
    "end": "1702720"
  },
  {
    "text": "know millions of QPS and we haven't had",
    "start": "1702720",
    "end": "1705300"
  },
  {
    "text": "an outage yet it makes me very happy",
    "start": "1705300",
    "end": "1708030"
  },
  {
    "text": "so finally what's next we'd like to",
    "start": "1708030",
    "end": "1711090"
  },
  {
    "start": "1709000",
    "end": "1709000"
  },
  {
    "text": "support some more commands we'd like to",
    "start": "1711090",
    "end": "1713580"
  },
  {
    "text": "support new data structures like",
    "start": "1713580",
    "end": "1714690"
  },
  {
    "text": "streaming we wondered implement fault",
    "start": "1714690",
    "end": "1717660"
  },
  {
    "text": "injection next year HTTP side of envoy",
    "start": "1717660",
    "end": "1721110"
  },
  {
    "text": "has this but Redis does not you know",
    "start": "1721110",
    "end": "1722880"
  },
  {
    "text": "with chaos monkey we can kill a node but",
    "start": "1722880",
    "end": "1725429"
  },
  {
    "text": "we really want to have more fine-grained",
    "start": "1725429",
    "end": "1727230"
  },
  {
    "text": "control we also want to do stuff like",
    "start": "1727230",
    "end": "1729929"
  },
  {
    "text": "add could consistent retries across all",
    "start": "1729929",
    "end": "1733830"
  },
  {
    "text": "of our Redis",
    "start": "1733830",
    "end": "1735100"
  },
  {
    "text": "users just like you know you have it the",
    "start": "1735100",
    "end": "1738460"
  },
  {
    "text": "stats and then we'd like to add rate",
    "start": "1738460",
    "end": "1740169"
  },
  {
    "text": "limiting and finally compression when",
    "start": "1740169",
    "end": "1742000"
  },
  {
    "text": "people start storing big blobs so that's",
    "start": "1742000",
    "end": "1744700"
  },
  {
    "text": "it",
    "start": "1744700",
    "end": "1745600"
  },
  {
    "text": "I think we've like I don't know if we've",
    "start": "1745600",
    "end": "1747730"
  },
  {
    "text": "enough time for Q&A here we don't have",
    "start": "1747730",
    "end": "1749049"
  },
  {
    "text": "better minute left we're all hiring come",
    "start": "1749049",
    "end": "1751570"
  },
  {
    "text": "and grab us if you have any questions",
    "start": "1751570",
    "end": "1755009"
  },
  {
    "text": "[Applause]",
    "start": "1756180",
    "end": "1759559"
  }
]