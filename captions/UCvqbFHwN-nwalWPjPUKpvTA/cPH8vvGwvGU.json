[
  {
    "text": "guys this is a story of an experiment that's ongoing so my name is Hugo smitter I'm a platform architect with",
    "start": "160",
    "end": "7519"
  },
  {
    "text": "FICO and when I mention FICO immediately my friends say Okay FICO this guy what",
    "start": "7519",
    "end": "13000"
  },
  {
    "text": "can you do for my score my credit score everybody conjures image of scores and it's true FICO is a company that is well",
    "start": "13000",
    "end": "22359"
  },
  {
    "text": "known for the score business but FICO is much more than than scores FICO is a",
    "start": "22359",
    "end": "28960"
  },
  {
    "text": "company that provides services and vared capabilities for our clients to",
    "start": "28960",
    "end": "35200"
  },
  {
    "text": "essentially make better decisions smarter decisions faster and we've been",
    "start": "35200",
    "end": "40440"
  },
  {
    "text": "around for 68 years I haven't been around with them for 68",
    "start": "40440",
    "end": "46879"
  },
  {
    "text": "years but uh in those 68 years yes the business be started with um scores",
    "start": "46879",
    "end": "54280"
  },
  {
    "text": "that's the core uh well-known established business at FICO but FICO",
    "start": "54280",
    "end": "60079"
  },
  {
    "text": "offers has grown Through The Years an ecosystem of solutions to address pretty much every manageable use case in the",
    "start": "60079",
    "end": "67799"
  },
  {
    "text": "finance industry mostly although we have customers in other Industries these businesses each one has",
    "start": "67799",
    "end": "75479"
  },
  {
    "text": "within FICO grown as as its own profit and loss um um business and they're",
    "start": "75479",
    "end": "83079"
  },
  {
    "text": "pretty much independent and Through Time what has happened and like many of your",
    "start": "83079",
    "end": "88200"
  },
  {
    "text": "companies probably have gone through realize that if you factor out the",
    "start": "88200",
    "end": "93280"
  },
  {
    "text": "commonalities of these common businesses and you focus on building a platform you",
    "start": "93280",
    "end": "99320"
  },
  {
    "text": "can monetize the platform better and you can offer more Nuance Solutions better",
    "start": "99320",
    "end": "105880"
  },
  {
    "text": "solutions to your customers and enable this platform to your partners also for",
    "start": "105880",
    "end": "112920"
  },
  {
    "text": "them to combine various components and generate even more value for their",
    "start": "112920",
    "end": "118880"
  },
  {
    "text": "customers so this Evolution from point solutions to a platform it's fairly",
    "start": "118880",
    "end": "125240"
  },
  {
    "text": "painful it it's it's but it's worthy and we're in this journey still of building",
    "start": "125240",
    "end": "131360"
  },
  {
    "text": "our platform and part of that part of that construction led us to uh pick up",
    "start": "131360",
    "end": "137360"
  },
  {
    "text": "an event service to handle our the intercommunication between our components the more components we have",
    "start": "137360",
    "end": "144160"
  },
  {
    "text": "in our platform the more different paradigms we need to connect these components with each other so the",
    "start": "144160",
    "end": "150200"
  },
  {
    "text": "service is something that um is one of those architectural services that we have to build so part of this story of",
    "start": "150200",
    "end": "157239"
  },
  {
    "text": "this experiment is when we picked that middleware which in our case was Apache Pulsar we're migrating from Apache calfa",
    "start": "157239",
    "end": "164519"
  },
  {
    "text": "to Pulsar we also needed an abstraction layer",
    "start": "164519",
    "end": "169680"
  },
  {
    "text": "to uh protect us from locking us into the Apache pulse or API it's one like",
    "start": "169680",
    "end": "175480"
  },
  {
    "text": "one of those bad breakups where hey uh you don't want to repeat the story of",
    "start": "175480",
    "end": "181480"
  },
  {
    "text": "locking yourself with Apachi kfka apis if we move to this thing called Apache pulser what are you going to do to",
    "start": "181480",
    "end": "187519"
  },
  {
    "text": "protect yourself from being again a few years from now locked into a Pache",
    "start": "187519",
    "end": "193400"
  },
  {
    "text": "pulser so that's where Dapper comes in now I want to raise your hand this is a platform engineering event so who's",
    "start": "193400",
    "end": "199840"
  },
  {
    "text": "familiar with crossplane it has used cross plan obviously there a lot of people here now what about Dapper have",
    "start": "199840",
    "end": "206120"
  },
  {
    "text": "you heard of dapper use Dapper okay great so this experiment is about matchmaking",
    "start": "206120",
    "end": "212640"
  },
  {
    "text": "cross plane with Dapper and you think well what are what are the synergies here why are you",
    "start": "212640",
    "end": "218480"
  },
  {
    "text": "combining these two things and that's the point of the story and I as I was running this",
    "start": "218480",
    "end": "223680"
  },
  {
    "text": "experiment an Ask was made of okay can you help us with policies how can you",
    "start": "223680",
    "end": "231239"
  },
  {
    "text": "improve the way we check that our cicd which is based on crossplane our one",
    "start": "231239",
    "end": "237640"
  },
  {
    "text": "engineering system uh is complying with the policies that we want to implement for these things that",
    "start": "237640",
    "end": "243920"
  },
  {
    "text": "we're deploying and one of our policy engines is kyno are you familiar with",
    "start": "243920",
    "end": "249360"
  },
  {
    "text": "kyero you know missing controllers and so on okay so I use the",
    "start": "249360",
    "end": "254640"
  },
  {
    "text": "policy um eval evaluation in in our cicd",
    "start": "254640",
    "end": "260600"
  },
  {
    "text": "pipeline as a a proof of concept of how this integration with Dapper could work",
    "start": "260600",
    "end": "266080"
  },
  {
    "text": "with crossplane and I'll get into the motivation of it so here's the agenda basically a crossplane overview look uh",
    "start": "266080",
    "end": "274160"
  },
  {
    "text": "I can't do a better job than the folks from upbound folks like uh Victor Farsi Steven Borelli Jared Watts their videos",
    "start": "274160",
    "end": "281320"
  },
  {
    "text": "are awesome so um I'm just have a you know cursory description of the basic",
    "start": "281320",
    "end": "287720"
  },
  {
    "text": "functions of crossplane but I want to focus on functions because what the change that happened last year is the",
    "start": "287720",
    "end": "294639"
  },
  {
    "text": "crossplane came up with this wonderful set of features called the crossplane functions a fun function brings",
    "start": "294639",
    "end": "300560"
  },
  {
    "text": "crossplaying to another level where now you can do very sophisticated things programmatically and with that great",
    "start": "300560",
    "end": "306520"
  },
  {
    "text": "power comes uh also technical challenges how challenges of how you provide these",
    "start": "306520",
    "end": "312280"
  },
  {
    "text": "capabilities to your engineers in in a govern way and in a in a way they they",
    "start": "312280",
    "end": "317600"
  },
  {
    "text": "can take full advantage of crossplay so there are opportunities and challenges using functions and and I'll get into",
    "start": "317600",
    "end": "324800"
  },
  {
    "text": "thater without getting into a lot of detail I have in the presentation slides that you can look at they're tailored",
    "start": "324800",
    "end": "332120"
  },
  {
    "text": "for crossplane so it's these are Dapper slides but I customized them for crossplane so you can see where these",
    "start": "332120",
    "end": "338800"
  },
  {
    "text": "two worlds meet then I'll show you how to integrate Dapper with crossplane and I'll walk you through the proof of",
    "start": "338800",
    "end": "345039"
  },
  {
    "text": "concept I have a demo but I think given the time that I have I've recorded the",
    "start": "345039",
    "end": "350440"
  },
  {
    "text": "demo and I'll put it in GitHub for you guys so you'll have the software the demo and the slides and then you can",
    "start": "350440",
    "end": "356240"
  },
  {
    "text": "experiment yourselves and see if this is going in the right direction okay so with that let me get into a",
    "start": "356240",
    "end": "362720"
  },
  {
    "text": "quick overview I don't think I need to tell you about manage resources and providers manage resources I heard the",
    "start": "362720",
    "end": "369840"
  },
  {
    "text": "analogy of digital twin so think of a manage Resource as a digital twin",
    "start": "369840",
    "end": "375680"
  },
  {
    "text": "running in kubernetes that represents the thing that you're trying to manage and that thing may be living within",
    "start": "375680",
    "end": "381520"
  },
  {
    "text": "kubernetes or outside kubernetes like in in the cloud for instance it could be pretty much anything and providers are",
    "start": "381520",
    "end": "387880"
  },
  {
    "text": "these layers that connect the manage resource with that generates the manage resource so you can uh manage the thing",
    "start": "387880",
    "end": "395759"
  },
  {
    "text": "that you're uh controlling through cross plan then we have claims and composite resource definitions and so on this is",
    "start": "395759",
    "end": "402680"
  },
  {
    "text": "you know the basic this is basic crossplane now where it gets interesting is with these functions and if you look",
    "start": "402680",
    "end": "408840"
  },
  {
    "text": "at the documentation you see that functions are pieces of program you can",
    "start": "408840",
    "end": "414319"
  },
  {
    "text": "write them in Python and in or Ino PR your prefer language and these functions",
    "start": "414319",
    "end": "420759"
  },
  {
    "text": "can be assembled in a pipeline within a Cross Point composition so we went from",
    "start": "420759",
    "end": "426000"
  },
  {
    "text": "this world of static templates in crossplane that you would fill in",
    "start": "426000",
    "end": "432080"
  },
  {
    "text": "basically programmatically to this world where you have these programmatic functions where you can do whatever you",
    "start": "432080",
    "end": "438199"
  },
  {
    "text": "want and assemble them in a pipeline and generate these resources out of thin air",
    "start": "438199",
    "end": "443599"
  },
  {
    "text": "if you want the the problem with that and you will see later um what what that",
    "start": "443599",
    "end": "450160"
  },
  {
    "text": "involves so in a in functions you can do loops you can do things whatever you want from a programmatic standpoint you",
    "start": "450160",
    "end": "455840"
  },
  {
    "text": "can go check on databases now why not you can do pop sub against Pulsar why",
    "start": "455840",
    "end": "461400"
  },
  {
    "text": "not go get a secret um pretty much anything you can do programmatically so",
    "start": "461400",
    "end": "466800"
  },
  {
    "text": "this opens this power to the platform engineers and how do you do it in a uh",
    "start": "466800",
    "end": "473639"
  },
  {
    "text": "govern way in in a in a you don't end up with so you don't end up with spaghetti",
    "start": "473639",
    "end": "478720"
  },
  {
    "text": "code now what you see in the bottom is my my",
    "start": "478720",
    "end": "484280"
  },
  {
    "text": "concern my concern as a platform architect at FICO a lot of my time it's",
    "start": "484280",
    "end": "491120"
  },
  {
    "text": "involved with Apache pstar so what you're seeing in in yellow are the Apache psart operator constructs or CR",
    "start": "491120",
    "end": "498879"
  },
  {
    "text": "are these that will generate um a tenant in psart a namespace topics so I use",
    "start": "498879",
    "end": "504520"
  },
  {
    "text": "that as an example because that's the beginning of my proof of concept when I began this journey",
    "start": "504520",
    "end": "509960"
  },
  {
    "text": "and so the output of this pipeline is the manage resources that consists of a",
    "start": "509960",
    "end": "516518"
  },
  {
    "text": "composite resource called the xplatform tenant that's like the overarching composite resource and underneath I have",
    "start": "516519",
    "end": "523479"
  },
  {
    "text": "a tenant a pulser tenant a name space and a topic very good it doesn't sound so",
    "start": "523479",
    "end": "530560"
  },
  {
    "text": "difficult you submit a claim your pipeline wakes up within the composition these things run boom and you get your",
    "start": "530560",
    "end": "536839"
  },
  {
    "text": "stuff on the other end a factory right not so fast you know when I started",
    "start": "536839",
    "end": "543320"
  },
  {
    "text": "playing with these functions and by the way I I don't know a lot about the static side of crossplane you know folks",
    "start": "543320",
    "end": "550560"
  },
  {
    "text": "here are you know can build very sophisticated uh infrastructure components with templates and create",
    "start": "550560",
    "end": "557519"
  },
  {
    "text": "very sophisticated you know complete platforms with vpcs and subnets and internet gateways and all the stuff",
    "start": "557519",
    "end": "565240"
  },
  {
    "text": "statically I haven't focused on that I'm I've Focus I've been focusing on the function side so I'm fairly new to",
    "start": "565240",
    "end": "571560"
  },
  {
    "text": "crossplane now what I learned through the hard knocks is that this this",
    "start": "571560",
    "end": "577079"
  },
  {
    "text": "calling of functions in a pipeline doesn't happen linearly not quite uh yes",
    "start": "577079",
    "end": "582399"
  },
  {
    "text": "the the crossplane will receive a claim to create something through the pipeline",
    "start": "582399",
    "end": "588120"
  },
  {
    "text": "and then the first function gets invoked but there is a loop going on and if you read the documentation carefully you'll",
    "start": "588120",
    "end": "594040"
  },
  {
    "text": "see the loop in their sequence diagrams so function number one says oh I need to",
    "start": "594040",
    "end": "599399"
  },
  {
    "text": "creat some resources and it launches his logic and does his thing but it needs to",
    "start": "599399",
    "end": "604880"
  },
  {
    "text": "ask crossplane to ask kubernetes what's going on with the resources I'm creating",
    "start": "604880",
    "end": "611680"
  },
  {
    "text": "and so there's a loop and there's a limit of five Loops so that they don't go indefinitely but while that while",
    "start": "611680",
    "end": "618519"
  },
  {
    "text": "that Loop is going on in Function One function two gets called because function one will finish its job and",
    "start": "618519",
    "end": "626440"
  },
  {
    "text": "asynchronously keep asking kubernetes what's going going on with my stuff it's like going to a a food cord and you're",
    "start": "626440",
    "end": "634040"
  },
  {
    "text": "you stand in line that line is your pipeline and first customer orders second customer comes in and so on then",
    "start": "634040",
    "end": "640079"
  },
  {
    "text": "you stand on the side waiting like in Starbucks you're waiting around here for your stuff and your stuff is not showing up so you start asking where's my stuff",
    "start": "640079",
    "end": "647320"
  },
  {
    "text": "and then people are behind the counter your stuff what is it you ordered so this is going on uh this is basically",
    "start": "647320",
    "end": "654720"
  },
  {
    "text": "what's going on you have these functions that are sitting already or you know they their job and they're waiting over",
    "start": "654720",
    "end": "661800"
  },
  {
    "text": "here to see if their stuff is ready very natural because they're leveraging the kubernetes reconciliation Loop now if",
    "start": "661800",
    "end": "669800"
  },
  {
    "text": "you're writing functions that do stuff like application developers do you'll be",
    "start": "669800",
    "end": "675279"
  },
  {
    "text": "in trouble because if I'm uh doing a query in a database to go get templates I'm not going to get call once I'm going",
    "start": "675279",
    "end": "681680"
  },
  {
    "text": "to get call multiple times if for instance I'm calling kyero to do something I'm not going to get called",
    "start": "681680",
    "end": "687360"
  },
  {
    "text": "once your function gets called over and over and again so it gets a little more comp the programming model gets a little",
    "start": "687360",
    "end": "693880"
  },
  {
    "text": "bit more complicated so you got you have to be aware of these Loops okay fine so some of the challenges with functions",
    "start": "693880",
    "end": "700800"
  },
  {
    "text": "number one like any good software development you want separation of",
    "start": "700800",
    "end": "705880"
  },
  {
    "text": "concerns so that um you have better control and if those concerns change",
    "start": "705880",
    "end": "711480"
  },
  {
    "text": "you're not affecting the whole because one part changed second um you got to",
    "start": "711480",
    "end": "716760"
  },
  {
    "text": "deal with those reconciliation Loops they're not going to go away in fact they they'll probably get more intense",
    "start": "716760",
    "end": "722480"
  },
  {
    "text": "with time and then if you have all these programmatic functionality why not take",
    "start": "722480",
    "end": "729120"
  },
  {
    "text": "advantage of stairs State Stores I want to pull things from a key value store",
    "start": "729120",
    "end": "734360"
  },
  {
    "text": "and I go I want to go after secret vaults puffs of middleware workflows encryption and so on you know you want",
    "start": "734360",
    "end": "740760"
  },
  {
    "text": "to build complicated stuff because you're building a platform that in our case it's not just for infrastructure",
    "start": "740760",
    "end": "746440"
  },
  {
    "text": "we're building everything on our one engine ER ing system it's not just the infrastructure it's everything on top so",
    "start": "746440",
    "end": "753440"
  },
  {
    "text": "you may need sophisticated capabilities to go after repositories they'll pull",
    "start": "753440",
    "end": "758600"
  },
  {
    "text": "things that are at running at the application layer at the middleware layer and so on all the way up the stack",
    "start": "758600",
    "end": "765279"
  },
  {
    "text": "so the next thing is okay where you want to write to Common apis let's say you want to access a database you want a",
    "start": "765279",
    "end": "772320"
  },
  {
    "text": "common API so that if you move to a different cloud provider or you use a different database you don't have to re",
    "start": "772320",
    "end": "778560"
  },
  {
    "text": "rewrite your code and then finally you want to do all this and still take",
    "start": "778560",
    "end": "784480"
  },
  {
    "text": "advantage of the Cross Point power of developing on your workstation rendering",
    "start": "784480",
    "end": "790279"
  },
  {
    "text": "the stuff you're rendering and then deploying in kubernetes without changes so you you want that that that that",
    "start": "790279",
    "end": "798040"
  },
  {
    "text": "developer experience with it so how do you how can you make this better if you're just chising code by hand Python",
    "start": "798040",
    "end": "804560"
  },
  {
    "text": "and go well one day one way is with dapper so what does dapper bring to the table",
    "start": "804560",
    "end": "812240"
  },
  {
    "text": "this is my I got two slides on Dapper the rest are in the appendix so what is Dapper distributed application runtime",
    "start": "812240",
    "end": "819279"
  },
  {
    "text": "it's been around since 2019 it just graduated this year uh from incubation",
    "start": "819279",
    "end": "826240"
  },
  {
    "text": "what it provides you is a framework to build distributed systems so on the application API side on the on the",
    "start": "826240",
    "end": "833120"
  },
  {
    "text": "customer application facing API you can write applications with through an HTTP",
    "start": "833120",
    "end": "838480"
  },
  {
    "text": "rest AP or through grpc using an SDK that's your view of the of the world you access",
    "start": "838480",
    "end": "845680"
  },
  {
    "text": "Dapper through an API HTTP or grpc Dapper offers building BLX what are the",
    "start": "845680",
    "end": "851639"
  },
  {
    "text": "building block there are a set of cuss cutting concerns the things that you as an application developer would need you",
    "start": "851639",
    "end": "857519"
  },
  {
    "text": "want to access a state store you want to do Popa you want to access a secret you want to fire a workflow you want access",
    "start": "857519",
    "end": "865320"
  },
  {
    "text": "uh some external system through asynchronous binding to something these building blocks are part of dapper and",
    "start": "865320",
    "end": "873279"
  },
  {
    "text": "each building block can be underneath that building block you can access",
    "start": "873279",
    "end": "878320"
  },
  {
    "text": "different Technologies so for instance state store well it could be Dynamo DB in AWS it could be myl bcra SQL uh",
    "start": "878320",
    "end": "886759"
  },
  {
    "text": "reddish and so on you get the idea the API Remains the Same but the building block is decoratively can be",
    "start": "886759",
    "end": "894399"
  },
  {
    "text": "decoratively changed you don't have to change anything and here comes the other",
    "start": "894399",
    "end": "900440"
  },
  {
    "text": "the other thing about Dapper Dapper exploits the SAR model so all the logic",
    "start": "900440",
    "end": "905800"
  },
  {
    "text": "in Dapper is running on a pyer or a demon set nowadays you can deploy thater",
    "start": "905800",
    "end": "911680"
  },
  {
    "text": "as a demon set but the the traditional model the mental model is you have a scar with all the logic and Dapper and",
    "start": "911680",
    "end": "919240"
  },
  {
    "text": "then um all these building blocks are part of that scar my application the only touch point to Dapper is that",
    "start": "919240",
    "end": "927000"
  },
  {
    "text": "API uh therefore if I want to reconfigure thater it's a manifest in",
    "start": "927000",
    "end": "932160"
  },
  {
    "text": "kubernetes and then I'm pointing something else one day I'm I'm accessing CFA next day I'm accessing pulser and",
    "start": "932160",
    "end": "939240"
  },
  {
    "text": "pretty much the parameters between say Kafka and pulser are decoratively defined in a manifest for that",
    "start": "939240",
    "end": "946079"
  },
  {
    "text": "particular technology stack pretty cool now so this slide I",
    "start": "946079",
    "end": "953279"
  },
  {
    "text": "configure for crossplane so this is right by the way the Dapper Community has a d",
    "start": "953279",
    "end": "959560"
  },
  {
    "text": "PowerPoint deck so if you ever find yourself in the need of to present Dapper all the slides are in the Dapper",
    "start": "959560",
    "end": "965440"
  },
  {
    "text": "community so what I did is I morphed the Dapper slides to match crossplane so now",
    "start": "965440",
    "end": "972000"
  },
  {
    "text": "instead of just the generic microservice that will use Dapper I'm talking about crossplaying functions in this in this",
    "start": "972000",
    "end": "977920"
  },
  {
    "text": "context okay so this is the a birdside view of the building box and underneath",
    "start": "977920",
    "end": "983120"
  },
  {
    "text": "you have some of the technologies that support that state store uh that sorry that building block and these are built",
    "start": "983120",
    "end": "990079"
  },
  {
    "text": "by the community so Dapper came out with a state I'm using the state store example of Pop sub and then the",
    "start": "990079",
    "end": "996079"
  },
  {
    "text": "community in CFA and PSAR and so on come in and they write the um the the adapter",
    "start": "996079",
    "end": "1002279"
  },
  {
    "text": "for that building block all all these building blocks are written in go so the cyer is pretty the footprint is pretty",
    "start": "1002279",
    "end": "1009880"
  },
  {
    "text": "small so in might uh the other aspect I mention it here is that when you want to",
    "start": "1009880",
    "end": "1016399"
  },
  {
    "text": "configure a building block you use a manifest so like any other kubernetes",
    "start": "1016399",
    "end": "1021519"
  },
  {
    "text": "resource you have a manifest that says here's a state store that I'm using is reddish today and here are the",
    "start": "1021519",
    "end": "1027558"
  },
  {
    "text": "parameters for for reddis uh so for the PC that I ran with",
    "start": "1027559",
    "end": "1035079"
  },
  {
    "text": "kerno um I used the state store building block the secrets building block the",
    "start": "1035079",
    "end": "1040400"
  },
  {
    "text": "distributor lock which came super really handy now get into it and then the service invocation service block or",
    "start": "1040400",
    "end": "1046839"
  },
  {
    "text": "building block and then on the next steps what I have after this week is to",
    "start": "1046839",
    "end": "1052120"
  },
  {
    "text": "go after a pop sub uh with the outbox uh pattern I'll get into that in a minute",
    "start": "1052120",
    "end": "1059960"
  },
  {
    "text": "um and also the external configuration building block these don't make sense a lot of sense right now but it will make",
    "start": "1059960",
    "end": "1066600"
  },
  {
    "text": "sense in a few minutes um from the deployment standpoint if you're want to",
    "start": "1066600",
    "end": "1072640"
  },
  {
    "text": "deploy Dapper Dapper has its own control plane a set of operators to inject Dapper for instance in your in your",
    "start": "1072640",
    "end": "1079200"
  },
  {
    "text": "application in this case your application is crossplane functions and this is where I'm going to cover right",
    "start": "1079200",
    "end": "1085080"
  },
  {
    "text": "now um this um diagram comes directly from",
    "start": "1085080",
    "end": "1091600"
  },
  {
    "text": "the crossplane documentation and it I just want to illustrate where Dapper fits in you can find this in the latest",
    "start": "1091600",
    "end": "1098720"
  },
  {
    "text": "crossplane Dock and it's all about a sequence diagram of how uh functions get",
    "start": "1098720",
    "end": "1103880"
  },
  {
    "text": "invoked so a claim arrives reaches the kubernetes a",
    "start": "1103880",
    "end": "1109200"
  },
  {
    "text": "crossplane wakes up says I have a claim what's the composition goes with it fine here's the composition open it up",
    "start": "1109200",
    "end": "1115280"
  },
  {
    "text": "there's a pipeline functions okay called the function inside that function the function does its thing and there's a",
    "start": "1115280",
    "end": "1122559"
  },
  {
    "text": "loop here and that's the the famous Loop where the function is going and getting resources from crossplane or from",
    "start": "1122559",
    "end": "1129360"
  },
  {
    "text": "kubernetes crossplane on behalf of of the function to find out what's going on",
    "start": "1129360",
    "end": "1134960"
  },
  {
    "text": "and then this discontinues this flow is for one function but it will happen",
    "start": "1134960",
    "end": "1140280"
  },
  {
    "text": "concurrently for all the functions you have in your pipeline where Dapper comes in is here so Dapper is only the",
    "start": "1140280",
    "end": "1148039"
  },
  {
    "text": "function is the only component it's aware that it has Dapper and so it's calling Dapper at the application Level",
    "start": "1148039",
    "end": "1154960"
  },
  {
    "text": "to do something go get me this template from a database instead of reading it hardcoded in the composition let me go",
    "start": "1154960",
    "end": "1161000"
  },
  {
    "text": "to mongodb and get a template for my particular resource I'm going to call uh",
    "start": "1161000",
    "end": "1166520"
  },
  {
    "text": "another microserver somewhere else to do something in specific I'm going to pop some I'm going to publish a message at",
    "start": "1166520",
    "end": "1173240"
  },
  {
    "text": "the end of my composition to notify GitHub or some dashboard that the composition is done so that's the sort",
    "start": "1173240",
    "end": "1180520"
  },
  {
    "text": "of thing the Dapper will do at the end to install Dapper there's a",
    "start": "1180520",
    "end": "1186039"
  },
  {
    "text": "CLI uh you just installed the Dapper CLI to brew or some other uh mechanism in",
    "start": "1186039",
    "end": "1192240"
  },
  {
    "text": "Windows you can do an inet in your laptop and it will spin a couple",
    "start": "1192240",
    "end": "1197320"
  },
  {
    "text": "containers where your have you'll have a state store and a pup sub as red as",
    "start": "1197320",
    "end": "1202559"
  },
  {
    "text": "containers running on your laptop so you can start developing on Dapper right there on your laptop and then if you if",
    "start": "1202559",
    "end": "1208960"
  },
  {
    "text": "you can if you have a Dax uh a Sandbox where you can do this you can do a Dapper in nit minus K and it will launch",
    "start": "1208960",
    "end": "1216200"
  },
  {
    "text": "that um Dapper in your kubernetes typically in a in a more you know",
    "start": "1216200",
    "end": "1222240"
  },
  {
    "text": "governed location you you run a Dapper Helm chart but if you're running on a Sandbox and you have a kubernetes",
    "start": "1222240",
    "end": "1229240"
  },
  {
    "text": "A system that you you have line of sight to you can just issue a Dapper in it minus K and off you go with your Dapper",
    "start": "1229240",
    "end": "1236440"
  },
  {
    "text": "control plane running on on kubernetes so this is all the setup for okay what",
    "start": "1236440",
    "end": "1241960"
  },
  {
    "text": "do we do how do we make this thing work this is out of the the template for a",
    "start": "1241960",
    "end": "1247000"
  },
  {
    "text": "python project from crossplane and I'm more I know I'm more handy with python",
    "start": "1247000",
    "end": "1254480"
  },
  {
    "text": "than I am with go but what I'm going to say works for both the template is great",
    "start": "1254480",
    "end": "1260679"
  },
  {
    "text": "you just clone a template project for Python and you have everything you need to test locally your crossplane",
    "start": "1260679",
    "end": "1267640"
  },
  {
    "text": "functions and to deploy them in kubernetes it's wonderful so I didn't want to mess with it too much and I",
    "start": "1267640",
    "end": "1274240"
  },
  {
    "text": "still wanted to make it work with Dappers so how do you do that a little surgery so the first surgery you do in",
    "start": "1274240",
    "end": "1280240"
  },
  {
    "text": "the python environment is I I want to access Dapper from my",
    "start": "1280240",
    "end": "1286320"
  },
  {
    "text": "crossplane function with a minimum of um cross talk or the minute of touch so the",
    "start": "1286320",
    "end": "1293400"
  },
  {
    "text": "easiest thing would be to http do an HTTP rest call I do that with a request",
    "start": "1293400",
    "end": "1298919"
  },
  {
    "text": "the python request package you can use httpx I chose request so all you need is that line in the dependencies in your",
    "start": "1298919",
    "end": "1305760"
  },
  {
    "text": "pite project Tomo file number one change number one because when you run your",
    "start": "1305760",
    "end": "1312320"
  },
  {
    "text": "function locally and in down when the docker file gets generated for you um",
    "start": "1312320",
    "end": "1318799"
  },
  {
    "text": "the tools within the template is hatch is the project manager in the python environment will pull this request",
    "start": "1318799",
    "end": "1325360"
  },
  {
    "text": "package locally and also will generate it the the docker container at the end when you're deploying in kubernetes so",
    "start": "1325360",
    "end": "1332159"
  },
  {
    "text": "this is a m if you miss it then it will you'll give you an you'll get you an an error um that's pretty much it from the",
    "start": "1332159",
    "end": "1340039"
  },
  {
    "text": "request standpoint the other thing is okay you have a function in crossplane",
    "start": "1340039",
    "end": "1345440"
  },
  {
    "text": "under the hood this crd called functioning in crossplane under the hood is generating a",
    "start": "1345440",
    "end": "1350600"
  },
  {
    "text": "deployment in kubernetes so the goal is to inject a Dapper cyer in that",
    "start": "1350600",
    "end": "1357159"
  },
  {
    "text": "deployment so how do you do that the way you do that is crossplane gives you a a",
    "start": "1357159",
    "end": "1363400"
  },
  {
    "text": "crd a manifest called the deployment runtime uh config so this manifest which",
    "start": "1363400",
    "end": "1370000"
  },
  {
    "text": "is not part of the template it's just these few lines of code over here the deployment runtime config for your",
    "start": "1370000",
    "end": "1376159"
  },
  {
    "text": "function you add annotation that tell the function hey you're going",
    "start": "1376159",
    "end": "1381520"
  },
  {
    "text": "to be you're going to ask Dapper to inject a sar when this thing gets",
    "start": "1381520",
    "end": "1387240"
  },
  {
    "text": "deployed this by the way works in kubernetes but you'll see how you make",
    "start": "1387240",
    "end": "1392400"
  },
  {
    "text": "it work locally as well and then the next change is in the function itself you're going to tell the",
    "start": "1392400",
    "end": "1400440"
  },
  {
    "text": "function that here's your configuration file that's it that's pretty much all",
    "start": "1400440",
    "end": "1406400"
  },
  {
    "text": "you have to do now okay you you all set up to deploy a sar in kubernetes well",
    "start": "1406400",
    "end": "1411640"
  },
  {
    "text": "how do I do my development locally with Dapper well it turns out the Dapper when it's running kubernetes yes it runs as a",
    "start": "1411640",
    "end": "1418720"
  },
  {
    "text": "sar or it could run as a demon set the new Dapper version has something called a Dapper shared where instead of a sar",
    "start": "1418720",
    "end": "1426400"
  },
  {
    "text": "it deploys a demon set and then your applications talk to the demon set similar to esto and andian same model",
    "start": "1426400",
    "end": "1433360"
  },
  {
    "text": "but what do you do on your laptop for so Dapper runs as a process in your lap",
    "start": "1433360",
    "end": "1438480"
  },
  {
    "text": "laptop so if you play with the crossplaying functions you'll see that there's a on the right side in green you",
    "start": "1438480",
    "end": "1445919"
  },
  {
    "text": "recognize in Python the command you know you call hatch run uh development and it",
    "start": "1445919",
    "end": "1451760"
  },
  {
    "text": "will launch a container with all the dependencies and your function and so on it will be running in the",
    "start": "1451760",
    "end": "1457080"
  },
  {
    "text": "background Dapper has a similar concept if you want to run a Dapper eyes application on your laptop you just do a",
    "start": "1457080",
    "end": "1464880"
  },
  {
    "text": "a Dapper run the name of the app Dapper app name and then the application name",
    "start": "1464880",
    "end": "1470200"
  },
  {
    "text": "in this case you just marry these two commands and now you you got yourself a um a running Dapper a running crossplane",
    "start": "1470200",
    "end": "1476919"
  },
  {
    "text": "function with Dapper on your laptop so in the GitHub that I'll you'll point you",
    "start": "1476919",
    "end": "1482480"
  },
  {
    "text": "to at the end I just wrote a little script where you can you can call this in one in one line and you're done okay",
    "start": "1482480",
    "end": "1490320"
  },
  {
    "text": "so if you put these two things together crossplay and Dapper they work really well so I'll get into the kyno policy",
    "start": "1490320",
    "end": "1497760"
  },
  {
    "text": "validator for a minute and what's what's going on with kerno so kerno is this",
    "start": "1497760",
    "end": "1503080"
  },
  {
    "text": "powerful is that it I got one minute left geez okay",
    "start": "1503080",
    "end": "1508279"
  },
  {
    "text": "so uh kerno is a very powerful project to deal with polies of code now it works",
    "start": "1508279",
    "end": "1516000"
  },
  {
    "text": "on the principle that you have admission controllers where you enforce the policies and then you have Upstream in",
    "start": "1516000",
    "end": "1523520"
  },
  {
    "text": "your GitHub the ability to call kerno to check on policies that are on things",
    "start": "1523520",
    "end": "1528640"
  },
  {
    "text": "that are being created at the at the cicd level the thing the observation of of what's going on with",
    "start": "1528640",
    "end": "1536039"
  },
  {
    "text": "crossplane functions is that now you have this power to create all these resources dynamically from the thin air",
    "start": "1536039",
    "end": "1543080"
  },
  {
    "text": "in your cicd so at GitHub time you probably has to have a claim in fact",
    "start": "1543080",
    "end": "1548520"
  },
  {
    "text": "like in my example I have a composition they have zero template code all the code is coming from a database or is",
    "start": "1548520",
    "end": "1554799"
  },
  {
    "text": "being generated dynamically so kyverna is kind of out of touch because Upstream in the cic level it doesn't know what's",
    "start": "1554799",
    "end": "1561480"
  },
  {
    "text": "going to be generated and then if you if you're just trying to validate policies in the admission control that's a big",
    "start": "1561480",
    "end": "1568000"
  },
  {
    "text": "hammer you're going to you're not going to know what was generated until the very end if you're",
    "start": "1568000",
    "end": "1573880"
  },
  {
    "text": "the platform engineer your composite you can't validate right there so the point of this pocc is to give you a way to",
    "start": "1573880",
    "end": "1581440"
  },
  {
    "text": "validate your caval policies within the composition as one function part of the",
    "start": "1581440",
    "end": "1588480"
  },
  {
    "text": "part of the part of the composition at the very end so if you imagine that",
    "start": "1588480",
    "end": "1593520"
  },
  {
    "text": "resources are being created and handed over from one function to the next to the next to the next the desire State",
    "start": "1593520",
    "end": "1600080"
  },
  {
    "text": "you can add a function at the close to the end that will get the desire resources run kerno against them and say",
    "start": "1600080",
    "end": "1607320"
  },
  {
    "text": "yeah it passes no it fails so that's the point of the proof of concept why because Cross Point can now with",
    "start": "1607320",
    "end": "1613799"
  },
  {
    "text": "function create Dynamic resources so just if in a nutshell this is the policy",
    "start": "1613799",
    "end": "1620840"
  },
  {
    "text": "validator this function will be in the GitHub repo is another function written in Python on the left side very simple",
    "start": "1620840",
    "end": "1628960"
  },
  {
    "text": "it doesn't do anything other than trap the desired resources the whole",
    "start": "1628960",
    "end": "1634200"
  },
  {
    "text": "resources being generated and uses ad Dappers service to service invocation to",
    "start": "1634200",
    "end": "1639799"
  },
  {
    "text": "call microservice running outside crossplane that has all the smarts to go after GitHub with secrets you know",
    "start": "1639799",
    "end": "1647200"
  },
  {
    "text": "secure go get the policies and tests for that particular composite bring them all in bring bring the resources into uh a",
    "start": "1647200",
    "end": "1655520"
  },
  {
    "text": "file system run the kerno test command and return a pass or fail so now your",
    "start": "1655520",
    "end": "1663000"
  },
  {
    "text": "composition when the composite resource finishes you'll have an event in your composite resource that says",
    "start": "1663000",
    "end": "1670279"
  },
  {
    "text": "look you you fail sorry you failed um",
    "start": "1670279",
    "end": "1675440"
  },
  {
    "text": "now I mentioned earlier that uh there's this Loop so the the this",
    "start": "1675440",
    "end": "1681480"
  },
  {
    "text": "function policy validation function is going to get called over and over again and it is going to call that other",
    "start": "1681480",
    "end": "1687360"
  },
  {
    "text": "microservice over and over again I don't want to be pulling from GitHub and doing all that work over and over again",
    "start": "1687360",
    "end": "1694240"
  },
  {
    "text": "unnecessarily so that's where my distributed lock comes in uh it's very",
    "start": "1694240",
    "end": "1699279"
  },
  {
    "text": "easy with Dapper to write a distributed lock and say you'll Lo for 50 seconds or",
    "start": "1699279",
    "end": "1705120"
  },
  {
    "text": "60 seconds and just return a status ass say I'm locked right now don't bother me",
    "start": "1705120",
    "end": "1710159"
  },
  {
    "text": "so Dapper was very powerful in allowing me to first of all bu build Dynamic",
    "start": "1710159",
    "end": "1716080"
  },
  {
    "text": "resources get them from a database go get secrets for GitHub pop sub at the",
    "start": "1716080",
    "end": "1721240"
  },
  {
    "text": "end of the composition lock when I didn't want the reconciliation Loop to wake me up uh in the service to service",
    "start": "1721240",
    "end": "1728279"
  },
  {
    "text": "invocation as well all these things came together it's pretty easy and all the",
    "start": "1728279",
    "end": "1733799"
  },
  {
    "text": "code that is heavy lifting is in Dapper and I have a very API to that Dapper card to do the heavy",
    "start": "1733799",
    "end": "1741840"
  },
  {
    "text": "lifting and I think that's that's that's it that's what that's the goal of the",
    "start": "1741840",
    "end": "1747559"
  },
  {
    "text": "PLC architecture diagram you'll get it on the slide and then the next step is to keep going with the uh the some of",
    "start": "1747559",
    "end": "1755159"
  },
  {
    "text": "the features that come with the Apper one of them is the transactional outbox I think that's the the biggest highlight",
    "start": "1755159",
    "end": "1761279"
  },
  {
    "text": "it is so hard to update a database and send a popup message and have them both",
    "start": "1761279",
    "end": "1767000"
  },
  {
    "text": "happen when they work as a as an unit of work if you send if you update the database and then send the event maybe",
    "start": "1767000",
    "end": "1774840"
  },
  {
    "text": "the event doesn't make it if you fliping then you you you may get the event out but the database update fails that's",
    "start": "1774840",
    "end": "1781360"
  },
  {
    "text": "hard to code that's not a trivial thing Dapper offers it out of the box we just",
    "start": "1781360",
    "end": "1786960"
  },
  {
    "text": "configure I want outbox pattern run for this state store and this puff sub and",
    "start": "1786960",
    "end": "1792000"
  },
  {
    "text": "off you go and it works with any state store or Pub sub Fabric and with that I thank you and I that's the that's the QR",
    "start": "1792000",
    "end": "1800519"
  },
  {
    "text": "code for the GitHub repo that has the demo code with a policy validator and if you give me a couple of",
    "start": "1800519",
    "end": "1807480"
  },
  {
    "text": "days I'll put in the the the MP4 recordings and the",
    "start": "1807480",
    "end": "1813919"
  },
  {
    "text": "deck thank you so much very patient",
    "start": "1813919",
    "end": "1819278"
  }
]