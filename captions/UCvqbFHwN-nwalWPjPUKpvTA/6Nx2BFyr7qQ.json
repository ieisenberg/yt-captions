[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "all right let's get started um welcome everyone uh to our talk about thanos absorbing",
    "start": "80",
    "end": "6879"
  },
  {
    "text": "thanos infinite powers for a multi-cluster telemetry i'm frederick i'm the founder and ceo of",
    "start": "6879",
    "end": "12880"
  },
  {
    "text": "polar signals and today i have with me and bartek hello everyone hello yeah",
    "start": "12880",
    "end": "20880"
  },
  {
    "start": "15000",
    "end": "50000"
  },
  {
    "text": "uh my name is kim il i'm a software engineer and red hat i'm working for a platformer",
    "start": "20880",
    "end": "26320"
  },
  {
    "text": "observability team and i'm also a thanos maintainer my name is bartek and i work with with",
    "start": "26320",
    "end": "34000"
  },
  {
    "text": "kamal a software engineer as well in openshift monitoring team and i am produce maintainer and co-founder",
    "start": "34000",
    "end": "40320"
  },
  {
    "text": "of thanos and i also am a technique of sick observability cncf",
    "start": "40320",
    "end": "46480"
  },
  {
    "text": "all right super cool um so let's get get right to it um so for some of you",
    "start": "46480",
    "end": "53440"
  },
  {
    "start": "50000",
    "end": "100000"
  },
  {
    "text": "you may be entirely new to thanos so we want to give you a quick overview of uh what thomas is and this is kind of",
    "start": "53440",
    "end": "61440"
  },
  {
    "text": "a reoccurring um slot at kubecons where we kind of talk about um introduction to thanos for",
    "start": "61440",
    "end": "68640"
  },
  {
    "text": "those who are new to it but then the second half is kind of what happened um in the recent past in the tunnels",
    "start": "68640",
    "end": "75280"
  },
  {
    "text": "project kind of as an update so that everybody doesn't have to necessarily follow the github repos and follow what what's",
    "start": "75280",
    "end": "82080"
  },
  {
    "text": "happening but can just every now and then join some of these sessions and",
    "start": "82080",
    "end": "87119"
  },
  {
    "text": "and kind of see what's new so that's uh kind of what we're going to be doing today and i'll kick us",
    "start": "87119",
    "end": "92400"
  },
  {
    "text": "off with uh the introduction then kemal and batek will take over with",
    "start": "92400",
    "end": "97600"
  },
  {
    "text": "the with what's new so when when i talk about thanos i often like to",
    "start": "97600",
    "end": "104399"
  },
  {
    "text": "refer to it as kind of distributed prometheus plus plus what i mean by that is",
    "start": "104399",
    "end": "110320"
  },
  {
    "text": "prometheus is kind of intentionally a monolithic application right the storage is in the same binary",
    "start": "110320",
    "end": "117280"
  },
  {
    "text": "the scraping is the querying is everything is intentionally monolithic to kind of",
    "start": "117280",
    "end": "122880"
  },
  {
    "text": "increase reliability that we can have on this process that's really great for prometheus but",
    "start": "122880",
    "end": "128959"
  },
  {
    "text": "it kind of limits prometheus in a little bit um in terms of like horizontally",
    "start": "128959",
    "end": "134800"
  },
  {
    "text": "uh scaling uh prometheus because obviously you can only scale as much as a single machine can and",
    "start": "134800",
    "end": "142640"
  },
  {
    "text": "that that isn't to diminish the need uh for prometheus you'll later see how prometheus and",
    "start": "142640",
    "end": "148080"
  },
  {
    "text": "tanos harmonize really nicely together but thanos is kind of",
    "start": "148080",
    "end": "153200"
  },
  {
    "text": "um the additional bits and pieces to make prometh turn prometheus into um",
    "start": "153200",
    "end": "159680"
  },
  {
    "text": "a global scale monitoring system and so a couple of things that thanos provides on top of prometheus is",
    "start": "159680",
    "end": "167680"
  },
  {
    "text": "a global view so that you can query data across all of your prometheus instances long-term storage so that you don't have",
    "start": "167680",
    "end": "174239"
  },
  {
    "text": "to only rely on the local disk that the prometheus has available and then a couple of other features that",
    "start": "174239",
    "end": "179840"
  },
  {
    "text": "are neat probably the most interesting one being down sampling which is",
    "start": "179840",
    "end": "185200"
  },
  {
    "text": "kind of related to long-term storage because when we talk about storing long-term",
    "start": "185200",
    "end": "191519"
  },
  {
    "text": "metrics data we tend to also query that data long term but when we scrape data or collect data",
    "start": "191519",
    "end": "199840"
  },
  {
    "text": "at 15 or 30 second intervals but query it over a year we're not actually interested in that",
    "start": "199840",
    "end": "206080"
  },
  {
    "text": "super high resolution data we don't even have enough pixels on our screen to show all of this data and so downside",
    "start": "206080",
    "end": "212319"
  },
  {
    "text": "thing comes in really handy in those kind of situations because if we query data over a year",
    "start": "212319",
    "end": "218159"
  },
  {
    "text": "it's plenty enough to query data at a one hour resolution",
    "start": "218159",
    "end": "223440"
  },
  {
    "text": "for example and still get an accurate picture as a matter of fact you would still get exactly the same picture but down",
    "start": "223440",
    "end": "230560"
  },
  {
    "text": "sampling drastically speeds up these kinds of queries so",
    "start": "230560",
    "end": "235760"
  },
  {
    "text": "this is just a very high level overview of of what thanos provides and i also often",
    "start": "235760",
    "end": "243760"
  },
  {
    "text": "the in terms of the analogy that i mentioned earlier what i also like to say is that thanos",
    "start": "243760",
    "end": "249439"
  },
  {
    "text": "essentially pulls prometheus apart into its individual modules so the query layer",
    "start": "249439",
    "end": "255200"
  },
  {
    "text": "the rule evaluation the storage et cetera and puts these into individual",
    "start": "255200",
    "end": "261840"
  },
  {
    "text": "components so that we can then horizontally scale those and as a matter of fact thomas tries to",
    "start": "261840",
    "end": "268080"
  },
  {
    "text": "implement as little as possible and make as much reuse",
    "start": "268080",
    "end": "273840"
  },
  {
    "text": "as possible from prometheus so thanos tries to just kind of fill the gap and not reinvent things",
    "start": "273840",
    "end": "279919"
  },
  {
    "text": "but build on top of giants essentially being prometheus here so what that kind of results and and i",
    "start": "279919",
    "end": "286560"
  },
  {
    "start": "284000",
    "end": "340000"
  },
  {
    "text": "like to describe it as a toolkit because thomas provides a number of components",
    "start": "286560",
    "end": "293840"
  },
  {
    "text": "and you can really pick and choose these components to build the monitoring stack your organization",
    "start": "293840",
    "end": "299520"
  },
  {
    "text": "really needs thanos gives you all the components and then you can",
    "start": "299520",
    "end": "304880"
  },
  {
    "text": "choose what really suits your organization and we'll see in a little bit what uh",
    "start": "304880",
    "end": "311199"
  },
  {
    "text": "what that can um mean practically um but the components that are available are the",
    "start": "311199",
    "end": "316639"
  },
  {
    "text": "querier the store component and we'll see in a little bit um and clarify a bit more the",
    "start": "316639",
    "end": "321759"
  },
  {
    "text": "rule component the compactor the sidecar component and the receiver",
    "start": "321759",
    "end": "328800"
  },
  {
    "text": "this is just just a list just so you can refer to this list later once we go",
    "start": "329120",
    "end": "335440"
  },
  {
    "text": "through examples of uses of all of these components so let's say dive right in and get",
    "start": "335440",
    "end": "342800"
  },
  {
    "start": "340000",
    "end": "445000"
  },
  {
    "text": "to the first uh kind of example um usage and this is probably the most",
    "start": "342800",
    "end": "348240"
  },
  {
    "text": "common thing that i see people starting out with with tunnels and that if you're just starting out",
    "start": "348240",
    "end": "354080"
  },
  {
    "text": "this is what i would probably recommend you you trying out so you may",
    "start": "354080",
    "end": "359919"
  },
  {
    "text": "be just be running prometheus already and you want to run prometheus in high in",
    "start": "359919",
    "end": "365440"
  },
  {
    "text": "highly available manner obviously because this is your monitoring system you kind of are relying on your",
    "start": "365440",
    "end": "371759"
  },
  {
    "text": "monitoring system to monitor the rest of your infrastructure so you want that to be available right um and then the typical thing when",
    "start": "371759",
    "end": "380000"
  },
  {
    "text": "we're not using tunnels just with prometheus what we tend to do is we put a load balancer in front of",
    "start": "380000",
    "end": "385600"
  },
  {
    "text": "prometheus and we query our two prometheus servers through that",
    "start": "385600",
    "end": "390880"
  },
  {
    "text": "load balancer now this is a little bit problematic but why the problem is because",
    "start": "390880",
    "end": "397840"
  },
  {
    "text": "prometheus is a pull-based model the prometheuses prometheus servers that we're seeing here",
    "start": "397840",
    "end": "403840"
  },
  {
    "text": "are scraping the same targets but it's slightly offset at intervals so that means while for alerting",
    "start": "403840",
    "end": "410160"
  },
  {
    "text": "purposes they're close enough when you're querying data and graphing it over time this can lead",
    "start": "410160",
    "end": "417680"
  },
  {
    "text": "to inconsistencies and so this tends to be problematic or at least confusing to users",
    "start": "417680",
    "end": "424000"
  },
  {
    "text": "um this gets uh more problematic when we talk about rollouts for example",
    "start": "424000",
    "end": "429199"
  },
  {
    "text": "there may be like gaps in one prometheus or the other or maybe one prometheus has",
    "start": "429199",
    "end": "434960"
  },
  {
    "text": "downtime and the other one doesn't and then there's kind of gaps in data and this is exactly",
    "start": "434960",
    "end": "440800"
  },
  {
    "text": "where the first thanos component comes in super handy being the thanos courier and",
    "start": "440800",
    "end": "447280"
  },
  {
    "start": "445000",
    "end": "560000"
  },
  {
    "text": "the thomas querier is essentially a layer that you can put on top of these prometheus servers to have a",
    "start": "447280",
    "end": "453919"
  },
  {
    "text": "global view and what the autonomous query does here is it queries both prometheuses for all",
    "start": "453919",
    "end": "459520"
  },
  {
    "text": "the data they have available for a particular query and then merges these",
    "start": "459520",
    "end": "465280"
  },
  {
    "text": "using a deduplication algorithm and presents you with one consistent result and the way that this",
    "start": "465280",
    "end": "473120"
  },
  {
    "text": "integration kind of works is through the tanos sidecar the sidecar is really just a shim between",
    "start": "473120",
    "end": "479520"
  },
  {
    "text": "prometheus and thanos and it really just converts thanos",
    "start": "479520",
    "end": "486160"
  },
  {
    "text": "api calls grpc calls into prometheus native api calls",
    "start": "486160",
    "end": "493360"
  },
  {
    "text": "and this is already a really really useful example of how people can make",
    "start": "493360",
    "end": "498960"
  },
  {
    "text": "use of towns and it's a very common thing that people do you may just stop here",
    "start": "498960",
    "end": "505120"
  },
  {
    "text": "and um this is already extremely useful i want to take a moment to talk about",
    "start": "505440",
    "end": "512959"
  },
  {
    "text": "something that i personally find very exciting about the thomas project which is the store api",
    "start": "512959",
    "end": "519440"
  },
  {
    "text": "pretty much everything in tanos that can serve data serve time series data um serves what we",
    "start": "519440",
    "end": "526000"
  },
  {
    "text": "call antennas the grpc store api and so",
    "start": "526000",
    "end": "531040"
  },
  {
    "text": "this is essentially in a data exchange format that everybody can implement and then serve data through that and",
    "start": "531040",
    "end": "538320"
  },
  {
    "text": "this is exciting because every component in thanos implements this",
    "start": "538320",
    "end": "543680"
  },
  {
    "text": "this api and something that i personally found really ingenious about thanos when",
    "start": "543680",
    "end": "549120"
  },
  {
    "text": "i first started working with it is that the courier itself",
    "start": "549120",
    "end": "554240"
  },
  {
    "text": "implements the store api as well and so what that allows us to do is actually if we want to layer",
    "start": "554240",
    "end": "562720"
  },
  {
    "start": "560000",
    "end": "627000"
  },
  {
    "text": "thanos in a in a distributed way essentially we can have regions of thanos clusters let's say one",
    "start": "562720",
    "end": "570240"
  },
  {
    "text": "per data center or because we're at kubecon one per kubernetes cluster",
    "start": "570240",
    "end": "576160"
  },
  {
    "text": "and then have a global query layer that we layer on top of that and that works because the tanos querier",
    "start": "576160",
    "end": "582320"
  },
  {
    "text": "implements the store api as well and so this is why why i often refer to thomas as a toolkit",
    "start": "582320",
    "end": "589040"
  },
  {
    "text": "right because we can pick and choose and architect",
    "start": "589040",
    "end": "594640"
  },
  {
    "text": "our monitoring system to exactly the way that our organization needs and only to the",
    "start": "594640",
    "end": "601360"
  },
  {
    "text": "extent that our organization needs because we could build an arbitrarily complex and arbitrarily featureful monitoring",
    "start": "601360",
    "end": "608959"
  },
  {
    "text": "system but it's so much better if people can actually just have",
    "start": "608959",
    "end": "614399"
  },
  {
    "text": "the complexity that they truly need right and so i think that's what's really powerful about the tunnels",
    "start": "614399",
    "end": "620800"
  },
  {
    "text": "project but these these are just two kind of examples",
    "start": "620800",
    "end": "626079"
  },
  {
    "text": "of what thomas can do i talked about long-term storage being one of the primary things that thanos",
    "start": "626079",
    "end": "633040"
  },
  {
    "start": "627000",
    "end": "870000"
  },
  {
    "text": "provides right so let's talk about how that can look like as an example long-term storage in tanos",
    "start": "633040",
    "end": "640240"
  },
  {
    "text": "always revolves around object storage and so the way that that happens is essentially",
    "start": "640240",
    "end": "647360"
  },
  {
    "text": "that these side cars that i talked about earlier kind of converting the",
    "start": "647360",
    "end": "652480"
  },
  {
    "text": "store api calls to prometheus native api calls it actually has a second kind of",
    "start": "652480",
    "end": "658399"
  },
  {
    "text": "responsibility which is it whenever prometheus produces data on",
    "start": "658399",
    "end": "663600"
  },
  {
    "text": "disk it takes that data and uploads it to object storage um now pretty much every object storage",
    "start": "663600",
    "end": "671519"
  },
  {
    "text": "provider from any like well-known cloud provider is supported by thanos",
    "start": "671519",
    "end": "679440"
  },
  {
    "text": "and many of the kind of the ones that you can run yourself as well basically anything",
    "start": "679440",
    "end": "685440"
  },
  {
    "text": "that's amazon s3 compatible works and then the way that you can actually",
    "start": "685440",
    "end": "691600"
  },
  {
    "text": "query this long-term data is by using the tanostore component this component again implements the",
    "start": "691600",
    "end": "699120"
  },
  {
    "text": "tunnel store api but instead of interfacing with a prometheus server",
    "start": "699120",
    "end": "704880"
  },
  {
    "text": "it reads that data from object storage and then provides it to the courier whenever you",
    "start": "704880",
    "end": "710079"
  },
  {
    "text": "query a promptql query and then in this kind of scenario the",
    "start": "710079",
    "end": "717120"
  },
  {
    "text": "last component that you would make use of is the compactor if you're maybe already familiar with",
    "start": "717120",
    "end": "722800"
  },
  {
    "text": "database technologies compaction is kind of the process of post optimizing data",
    "start": "722800",
    "end": "729519"
  },
  {
    "text": "in a database and so what that means here is that the compactor looks at data that is in object storage",
    "start": "729519",
    "end": "736560"
  },
  {
    "text": "and sees where there are possibilities for merging data to make it",
    "start": "736560",
    "end": "742399"
  },
  {
    "text": "more efficient to improve compression or deduplicate things um there are various things that the",
    "start": "742399",
    "end": "748800"
  },
  {
    "text": "compactor can do and i won't get into too many things about that but you can think of it",
    "start": "748800",
    "end": "754079"
  },
  {
    "text": "as a data optimization post-processing component the compactor itself doesn't",
    "start": "754079",
    "end": "760320"
  },
  {
    "text": "actually serve any data whenever it replaces some data in object storage the store just loads that and from there",
    "start": "760320",
    "end": "767680"
  },
  {
    "text": "on serves that optimized data so that's how we do um long-term storage",
    "start": "767680",
    "end": "774399"
  },
  {
    "text": "and uh one thing that i forgot to mention is the compactor also takes care of down",
    "start": "774399",
    "end": "779760"
  },
  {
    "text": "sampling remember when i said that down sampling is really useful for querying long-term data well",
    "start": "779760",
    "end": "785920"
  },
  {
    "text": "this down sampling actually needs to be computed somewhere right so the compactor is one of those things",
    "start": "785920",
    "end": "791120"
  },
  {
    "text": "uh what is the component that does does that um so these are",
    "start": "791120",
    "end": "797440"
  },
  {
    "text": "this is my probably um the next step that you would take if you go with the um with the",
    "start": "797440",
    "end": "804720"
  },
  {
    "text": "previously mentioned architecture of like introducing thanos",
    "start": "804720",
    "end": "810240"
  },
  {
    "text": "into your organization and here we can also also see the nice uh kind of iterative",
    "start": "810240",
    "end": "816720"
  },
  {
    "text": "process that we can take of um introducing tunnels into your organization you can start with just the querier and",
    "start": "816720",
    "end": "823199"
  },
  {
    "text": "the sidecars right but if you want local storage well then you add object storage",
    "start": "823199",
    "end": "828639"
  },
  {
    "text": "the store component and the compactor and just like that you can kind of upgrade your monitoring",
    "start": "828639",
    "end": "835199"
  },
  {
    "text": "system based on your actual organization's needs and not just throw a bunch of processes",
    "start": "835199",
    "end": "842959"
  },
  {
    "text": "into your into your organization that you may not even need right so",
    "start": "842959",
    "end": "848000"
  },
  {
    "text": "um i i think it's always important to kind of evaluate what your organization really",
    "start": "848000",
    "end": "853199"
  },
  {
    "text": "um is looking for and then kind of architect the monitoring system to those needs and this is where we come",
    "start": "853199",
    "end": "861120"
  },
  {
    "text": "to the next architecture and this is really a very different type of architecture than from what i've been talking about",
    "start": "861120",
    "end": "868480"
  },
  {
    "text": "so far which is um something that i was very heavily involved in",
    "start": "868480",
    "end": "873760"
  },
  {
    "start": "870000",
    "end": "992000"
  },
  {
    "text": "um or still am and very heavily involved in in the thomas project",
    "start": "873760",
    "end": "878880"
  },
  {
    "text": "being when you have a kind of service relationship with your prometheus server so you may have",
    "start": "878880",
    "end": "884240"
  },
  {
    "text": "totally remote prometheus servers that may be on edge infrastructure or something like",
    "start": "884240",
    "end": "889680"
  },
  {
    "text": "that and you want to push that data as opposed to having all the tunnels components",
    "start": "889680",
    "end": "894720"
  },
  {
    "text": "pull data whenever it wants to query something in this kind of scenario",
    "start": "894720",
    "end": "901600"
  },
  {
    "text": "you may want to push this data so that it's available at a low latency essentially",
    "start": "901600",
    "end": "908320"
  },
  {
    "text": "and what we have for that is what we call the receive component so this component implements the remote",
    "start": "908320",
    "end": "915120"
  },
  {
    "text": "write protocol from prometheus this is essentially a generic almost database replication type",
    "start": "915120",
    "end": "921680"
  },
  {
    "text": "protocol that prometheus implements that you can just use to send off all data that prometheus",
    "start": "921680",
    "end": "928320"
  },
  {
    "text": "writes to disk um off to a off to a remote storage and the receive component implements",
    "start": "928320",
    "end": "933759"
  },
  {
    "text": "exactly that um and i won't get into too many details of how that works but it's essentially a",
    "start": "933759",
    "end": "939360"
  },
  {
    "text": "dynamo style replicated hash ring and then",
    "start": "939360",
    "end": "944959"
  },
  {
    "text": "once that's kind of received and stored by the receive component you can configure the thanos querier to",
    "start": "944959",
    "end": "952079"
  },
  {
    "text": "query all these received notes merge all the data at query time and as",
    "start": "952079",
    "end": "957279"
  },
  {
    "text": "again present a deduplicated result to you so this is a very different type of",
    "start": "957279",
    "end": "963279"
  },
  {
    "text": "architecture but also one that has become increasingly popular because you can very nicely",
    "start": "963279",
    "end": "969440"
  },
  {
    "text": "kind of separate the the responsibility of running this",
    "start": "969440",
    "end": "975920"
  },
  {
    "text": "thanos cluster and people just running prometheus servers and just pushing all their data for long-term",
    "start": "975920",
    "end": "981920"
  },
  {
    "text": "storage for long-term analysis into this service type relationship",
    "start": "981920",
    "end": "988720"
  },
  {
    "text": "so with that this is kind of this kind of concludes the",
    "start": "988720",
    "end": "994399"
  },
  {
    "start": "992000",
    "end": "1048000"
  },
  {
    "text": "architectures that i wanted to present today as an introduction to tanos and just to reiterate um and i hope this",
    "start": "994399",
    "end": "1002079"
  },
  {
    "text": "has kind of become clear to everyone thomas is really a toolkit that you can use to build",
    "start": "1002079",
    "end": "1007279"
  },
  {
    "text": "exactly the um monitoring system that your organization needs and",
    "start": "1007279",
    "end": "1012800"
  },
  {
    "text": "you can pick and choose from all these wonderful components to build exactly that and at heart the thing that really",
    "start": "1012800",
    "end": "1020399"
  },
  {
    "text": "powers all of this is the store api this kind of generic api that we have for reading",
    "start": "1020399",
    "end": "1025678"
  },
  {
    "text": "data in thanos and again this is kind of why we can have this",
    "start": "1025679",
    "end": "1032720"
  },
  {
    "text": "toolkit kind of approach because we can just swap out implementations even right so i",
    "start": "1032720",
    "end": "1038959"
  },
  {
    "text": "think that's really powerful and that's one of the things that makes me really excited about the thanos project",
    "start": "1038959",
    "end": "1045038"
  },
  {
    "text": "but with that that kind of concludes the introduction and now i'll hand it off to kemal to",
    "start": "1045039",
    "end": "1051120"
  },
  {
    "start": "1048000",
    "end": "1245000"
  },
  {
    "text": "tell us what kind of has been happening lately in the thomas project all right",
    "start": "1051120",
    "end": "1056720"
  },
  {
    "text": "i hope you can see my screen so let's get to the news uh so we've been busy for the past",
    "start": "1056720",
    "end": "1063600"
  },
  {
    "text": "months we've implemented a couple of new features and we have a lot of",
    "start": "1063600",
    "end": "1068880"
  },
  {
    "text": "optimizations regarding uh all the components over the board so let's start with uh querier for the",
    "start": "1068880",
    "end": "1076799"
  },
  {
    "text": "query now we can we have the ability to concurrently execute select queries uh so this would",
    "start": "1076799",
    "end": "1084000"
  },
  {
    "text": "uh really be helpful for the queries that for the complex queries that you have",
    "start": "1084000",
    "end": "1090080"
  },
  {
    "text": "with multiple select statements and moreover now we have a couple of uh",
    "start": "1090080",
    "end": "1095760"
  },
  {
    "text": "like multiple layers of uh caches uh especially using memcache d uh using this uh functionality uh for",
    "start": "1095760",
    "end": "1103360"
  },
  {
    "text": "the stor gateway component we can actually cache the metadata files and chunks",
    "start": "1103360",
    "end": "1110559"
  },
  {
    "text": "itself and this kind of helps us to reduce the traffic and latency between the object",
    "start": "1110559",
    "end": "1116960"
  },
  {
    "text": "store and your like data cluster moreover",
    "start": "1116960",
    "end": "1122400"
  },
  {
    "text": "now we introduced a new component called thanos query front end",
    "start": "1122400",
    "end": "1127600"
  },
  {
    "text": "this component will be splitting your queries uh for certain intervals and then it",
    "start": "1127600",
    "end": "1134559"
  },
  {
    "text": "will be uh caching the responses of your queries and that will uh see the kind of hope that",
    "start": "1134559",
    "end": "1142960"
  },
  {
    "text": "this will uh improve your query performance significantly and i'm gonna demo it in a bit",
    "start": "1142960",
    "end": "1150720"
  },
  {
    "text": "moreover we have a lot of ui enhancement now we have a new",
    "start": "1150720",
    "end": "1156960"
  },
  {
    "text": "component for what we call bucket view for all the components that actually serves",
    "start": "1156960",
    "end": "1162880"
  },
  {
    "text": "blocks and with using this ui you can actually",
    "start": "1162880",
    "end": "1168160"
  },
  {
    "text": "introspect your blocks and for the last update uh now we have",
    "start": "1168160",
    "end": "1175200"
  },
  {
    "text": "an evi based on react components and we are like reusing components from",
    "start": "1175200",
    "end": "1181200"
  },
  {
    "text": "prometheus itself and we also plan to publish a components",
    "start": "1181200",
    "end": "1186720"
  },
  {
    "text": "library in the long run so that we can reuse other compo reuse these components in",
    "start": "1186720",
    "end": "1193039"
  },
  {
    "text": "the other projects as well thanks to our mentees so for this part this is how",
    "start": "1193039",
    "end": "1201039"
  },
  {
    "text": "it actually looks right now for the query one of the cool features that we have",
    "start": "1201039",
    "end": "1206480"
  },
  {
    "text": "recently implemented is the enabling this uh store filters",
    "start": "1206480",
    "end": "1211679"
  },
  {
    "text": "uh with this you can actually select uh which store do you want to query uh to",
    "start": "1211679",
    "end": "1218320"
  },
  {
    "text": "debug that particular story api component",
    "start": "1218320",
    "end": "1223520"
  },
  {
    "text": "and this is how the new bucket viewer looks like you can see your blocks with the",
    "start": "1223520",
    "end": "1229120"
  },
  {
    "text": "different intervals and different sizes of blocks and you can see their metadata information",
    "start": "1229120",
    "end": "1235280"
  },
  {
    "text": "and you can actually download the meta json file itself if you want to further debug things with",
    "start": "1235280",
    "end": "1242720"
  },
  {
    "text": "that let's get to the demo and in this part i'm gonna uh like we will",
    "start": "1242720",
    "end": "1250000"
  },
  {
    "start": "1245000",
    "end": "1519000"
  },
  {
    "text": "talk about a simple architecture uh which we use uh sidecar",
    "start": "1250000",
    "end": "1255520"
  },
  {
    "text": "uh fan of sidecar instead of uh prometheuses and for each for our each cluster we will",
    "start": "1255520",
    "end": "1261840"
  },
  {
    "text": "deploy prometheus and we then we will for to have a global uh",
    "start": "1261840",
    "end": "1267120"
  },
  {
    "text": "overview we will deploy a query and user gonna read that what makes this uh",
    "start": "1267120",
    "end": "1273360"
  },
  {
    "text": "demo special will be the our new component query front-end and we will try to",
    "start": "1273360",
    "end": "1279679"
  },
  {
    "text": "demo you how we can actually reduce the latencies",
    "start": "1279679",
    "end": "1285440"
  },
  {
    "text": "so for that so for our demo purposes we will use",
    "start": "1285440",
    "end": "1290799"
  },
  {
    "text": "katakura so that viewers can later on visit the same tutorials and they can",
    "start": "1290799",
    "end": "1296799"
  },
  {
    "text": "actually interact with those things themselves so let's start",
    "start": "1296799",
    "end": "1305120"
  },
  {
    "text": "so in our demo we will just uh first deploy prometheuses and for each",
    "start": "1305120",
    "end": "1311200"
  },
  {
    "text": "prometeurs you can see we kind of configure uh script configure primitives to scrape",
    "start": "1311200",
    "end": "1318559"
  },
  {
    "text": "themselves and for each cluster we will have one prometheus",
    "start": "1318559",
    "end": "1324159"
  },
  {
    "text": "and for each parameters we will deploy prometheus plus a ton of sidecar aside",
    "start": "1324159",
    "end": "1331679"
  },
  {
    "text": "this could take a minute okay this was fast nice let's see if everything's work yeah",
    "start": "1331679",
    "end": "1338400"
  },
  {
    "text": "so for this demo we are using darker to just darker to make things simple and",
    "start": "1338400",
    "end": "1344400"
  },
  {
    "text": "you can see all the processes are kind of running from now on we are we will uh deploy the",
    "start": "1344400",
    "end": "1351360"
  },
  {
    "text": "thanos query for like global overview for sake of demo we are also",
    "start": "1351360",
    "end": "1359360"
  },
  {
    "text": "deploying a siteguy proxy to kind of inject some latency to the querier",
    "start": "1359360",
    "end": "1365120"
  },
  {
    "text": "because we don't have enough data to actually create and load in in this environment and now",
    "start": "1365120",
    "end": "1372480"
  },
  {
    "text": "we can actually access our query content and for the last part",
    "start": "1372480",
    "end": "1379919"
  },
  {
    "text": "let's deploy thanos query front-end for that we have a configuration for the",
    "start": "1379919",
    "end": "1386880"
  },
  {
    "text": "cache which tells us to actually cache everything in memory and we",
    "start": "1386880",
    "end": "1394080"
  },
  {
    "text": "kind of deploy it now and let's go to",
    "start": "1394080",
    "end": "1399200"
  },
  {
    "text": "yes okay i hope you can see that this is a thanos queer frontend ui it's actually",
    "start": "1401120",
    "end": "1407440"
  },
  {
    "text": "the same with the thundersquare here so when we execute let's make it a bit",
    "start": "1407440",
    "end": "1413600"
  },
  {
    "text": "bigger and when we actually execute a query a query to be specific a range query",
    "start": "1413600",
    "end": "1423679"
  },
  {
    "text": "it's supposed to get more than five seconds because we also yeah injecting some",
    "start": "1423679",
    "end": "1429840"
  },
  {
    "text": "latencies uh yeah for this query it takes over five seconds but now it should be cached",
    "start": "1429840",
    "end": "1437360"
  },
  {
    "text": "and then we execute this again this should be a lot faster yeah as you can see now it took only one",
    "start": "1437360",
    "end": "1444000"
  },
  {
    "text": "second and uh one of the other like one of the things that we specified over",
    "start": "1444000",
    "end": "1450880"
  },
  {
    "text": "here is the split interval so when we are executing this query we",
    "start": "1450880",
    "end": "1456480"
  },
  {
    "text": "actually split this query by a minute and so it",
    "start": "1456480",
    "end": "1461919"
  },
  {
    "text": "it behind the scenes actually executed five different queries and cached all the results of it we also",
    "start": "1461919",
    "end": "1469520"
  },
  {
    "text": "specify another thing called uh max freshness and this make expressions",
    "start": "1469520",
    "end": "1475520"
  },
  {
    "text": "actually say that like it's bliss to query but it kind of it doesn't catch the",
    "start": "1475520",
    "end": "1482880"
  },
  {
    "text": "mo the most recent one so to actually demonstrate that we have the same query",
    "start": "1482880",
    "end": "1489520"
  },
  {
    "text": "it's yeah fast enough but now we can kind of shift these things a bit and we can see",
    "start": "1489520",
    "end": "1496400"
  },
  {
    "text": "it's still fast so yeah uh this is relatively a",
    "start": "1496400",
    "end": "1502159"
  },
  {
    "text": "new component for us so it would be great for if you can just",
    "start": "1502159",
    "end": "1508480"
  },
  {
    "text": "use and give us feedback and so that we can improve and work more on these components with",
    "start": "1508480",
    "end": "1515520"
  },
  {
    "text": "that start i'm going to pass uh the microphone to backpack",
    "start": "1515520",
    "end": "1522000"
  },
  {
    "start": "1519000",
    "end": "1690000"
  },
  {
    "text": "thank you camera thank you for the rick so um so kemon mentioned about few things we",
    "start": "1522000",
    "end": "1529360"
  },
  {
    "text": "we created over last month but that's not everything right we we actually did much more",
    "start": "1529360",
    "end": "1535679"
  },
  {
    "text": "and from the high level things it's worth to mention um kind of stuff around apis and and the",
    "start": "1535679",
    "end": "1542159"
  },
  {
    "text": "user experience so first of all we kind of because well thanks of the of the fact that we",
    "start": "1542159",
    "end": "1548559"
  },
  {
    "text": "um that we used promote use code it was as easy as upgrading the the few dependencies to",
    "start": "1548559",
    "end": "1554000"
  },
  {
    "text": "get um shiny new psdb isolation mechanism which allows um well kind of",
    "start": "1554000",
    "end": "1561120"
  },
  {
    "text": "weapons and queries to be um kind of isolated um and and and that's pretty sweet",
    "start": "1561120",
    "end": "1567679"
  },
  {
    "text": "um furthermore we are active on the analytic api side so we are actually with the",
    "start": "1567679",
    "end": "1574159"
  },
  {
    "text": "sick observability so uh a special interest group on the cncf site we are collaborating on",
    "start": "1574159",
    "end": "1581120"
  },
  {
    "text": "kind of exploring the use cases and and apis that an integration that would allow us",
    "start": "1581120",
    "end": "1586960"
  },
  {
    "text": "to better leverage uh metric data for analytic use cases so for example",
    "start": "1586960",
    "end": "1592240"
  },
  {
    "text": "this is like our poc opslytics project which allows you to convert",
    "start": "1592240",
    "end": "1599279"
  },
  {
    "text": "prometheus and thanos metrics into the packet file so this is pretty convenient we are",
    "start": "1599279",
    "end": "1605440"
  },
  {
    "text": "planning to add more more you know apis and formats like apache arrow or maybe um",
    "start": "1605440",
    "end": "1614400"
  },
  {
    "text": "arrow itself and and pandas and stuff so all of this um well if you have any ideas please and",
    "start": "1614400",
    "end": "1620559"
  },
  {
    "text": "and feedback and want to help and join us here yeah please visit this this repo we are we are your help is welcome",
    "start": "1620559",
    "end": "1627360"
  },
  {
    "text": "one thing that i want to focus as the last thing for this talk is um kind of multi-tenancy aspect because",
    "start": "1627360",
    "end": "1633600"
  },
  {
    "text": "um especially when building centralized monitoring system like tunnels with long-term",
    "start": "1633600",
    "end": "1638880"
  },
  {
    "text": "storage retention you really think about like long-term use cases when more teams will use the same system and",
    "start": "1638880",
    "end": "1645919"
  },
  {
    "text": "you know how they can collaborate do i need to create another thanos cluster just for a separate team",
    "start": "1645919",
    "end": "1651679"
  },
  {
    "text": "what if you are a sas provider and you have you know customers that are not part of the same custom",
    "start": "1651679",
    "end": "1657520"
  },
  {
    "text": "organization but actually you know uh they their data have to be securely isolated right",
    "start": "1657520",
    "end": "1663200"
  },
  {
    "text": "we actually built thanos in mind with that obviously with the multi-density features being um",
    "start": "1663200",
    "end": "1669440"
  },
  {
    "text": "like in more advanced part of the story of thanos but well here we are after um third year of of um",
    "start": "1669440",
    "end": "1676880"
  },
  {
    "text": "thanos products so i want to demo and and kind of showcase you um a way of making tunnels a multi-multi",
    "start": "1676880",
    "end": "1685840"
  },
  {
    "text": "multi-tenant system a configuration and deployment model describing that so let's go for that so",
    "start": "1685840",
    "end": "1691919"
  },
  {
    "start": "1690000",
    "end": "1911000"
  },
  {
    "text": "i would describe what we'll see in the demo so um first we'll introduce kind of two",
    "start": "1691919",
    "end": "1697440"
  },
  {
    "text": "set of let's say um penance prometheuses tenants data we call first theme fruit",
    "start": "1697440",
    "end": "1703679"
  },
  {
    "text": "and second vegetable veggie um so you can see they have separate collection path",
    "start": "1703679",
    "end": "1709279"
  },
  {
    "text": "they already have set up tunnels with sidecar so they can query their own data and",
    "start": "1709279",
    "end": "1715679"
  },
  {
    "text": "because you have the separate kind of infrastructure for both team for each team you",
    "start": "1715679",
    "end": "1721279"
  },
  {
    "text": "kind of expect the isolation and um so without there's no multita multi-tenant",
    "start": "1721279",
    "end": "1728320"
  },
  {
    "text": "um infrastructure it's rather a separate infrastructure for each tenant but yeah technically it",
    "start": "1728320",
    "end": "1733760"
  },
  {
    "text": "works right but there are problems with that and especially with bigger bigger systems you get introduced i i we",
    "start": "1733760",
    "end": "1740960"
  },
  {
    "text": "call it tomato problem tomato because um if you're aware this is actually both",
    "start": "1740960",
    "end": "1746240"
  },
  {
    "text": "fruit and vegetable in the same time so um if you are from let's say a tomato",
    "start": "1746240",
    "end": "1751360"
  },
  {
    "text": "team you'd like to have access to both fruits and vegetable data so this particular problem is called like cross",
    "start": "1751360",
    "end": "1758640"
  },
  {
    "text": "tenant view so it's actually important to have a secure",
    "start": "1758640",
    "end": "1763919"
  },
  {
    "text": "way to allow joints between different datasets from different tenants this is kind of",
    "start": "1763919",
    "end": "1769840"
  },
  {
    "text": "something you cannot easily achieve with this with this particular deployment",
    "start": "1769840",
    "end": "1775760"
  },
  {
    "text": "additionally what if you have more teams right and how do you scale if you need to set",
    "start": "1775760",
    "end": "1780799"
  },
  {
    "text": "up a separate cluster or separate you know kind of infrastructure for each tenant that doesn't scale well so",
    "start": "1780799",
    "end": "1786799"
  },
  {
    "text": "ideally you want to raise more and have some multi-tenancy system and thanos was definitely thinking about",
    "start": "1786799",
    "end": "1793919"
  },
  {
    "text": "that use case for a long time um so let's do first step obviously we",
    "start": "1793919",
    "end": "1799120"
  },
  {
    "text": "can um you know join this data within single global view so put like multi-time",
    "start": "1799120",
    "end": "1804159"
  },
  {
    "text": "querier and um and allow accessing the data from both to team fruit and to veggie however",
    "start": "1804159",
    "end": "1812159"
  },
  {
    "text": "because we believe in tunnels in the unix philosophy where you are you know doing one thing one",
    "start": "1812159",
    "end": "1818559"
  },
  {
    "text": "functionality and doing it good so you don't want to spread your focus that's why there is no",
    "start": "1818559",
    "end": "1823840"
  },
  {
    "text": "like you know direct alf or airbag system built into the tunnels however we",
    "start": "1823840",
    "end": "1828880"
  },
  {
    "text": "integrate with and we kind of build ecosystem on top of that so to achieve this um red hat actually built um prom label",
    "start": "1828880",
    "end": "1836960"
  },
  {
    "text": "proxy project which is uh part of the product use community org so you can add that as a side car",
    "start": "1836960",
    "end": "1842480"
  },
  {
    "text": "and this properly understand uh promoters api so actually thanos apis as well um http",
    "start": "1842480",
    "end": "1849440"
  },
  {
    "text": "ones for for querying and accessing metadata and all other source stuff",
    "start": "1849440",
    "end": "1855039"
  },
  {
    "text": "and injects the proper tenant uh label of your choice into the query",
    "start": "1855039",
    "end": "1860480"
  },
  {
    "text": "system to ensure the data isolation the critical path here is kind of how we separate tenants",
    "start": "1860480",
    "end": "1868960"
  },
  {
    "text": "between themselves how we identify them and we do we use the same mechanism for as for",
    "start": "1868960",
    "end": "1874559"
  },
  {
    "text": "anything else as for series as for tsd blocks we use labels so tenant is just another label for us",
    "start": "1874559",
    "end": "1881200"
  },
  {
    "text": "and you will see that on the demo so things of chrome label proxy and some authorization proxy of your choice",
    "start": "1881200",
    "end": "1887039"
  },
  {
    "text": "because we don't want to you know force you to use odc or whatever so with that you can easily set up a",
    "start": "1887039",
    "end": "1894000"
  },
  {
    "text": "multi-tenant read buff that isolate queries depending on the password or maybe port",
    "start": "1894000",
    "end": "1899279"
  },
  {
    "text": "that that is exposed to the certain team um so you can either have dedicated",
    "start": "1899279",
    "end": "1904399"
  },
  {
    "text": "views or crosstalk views for any of us cases so let's try to",
    "start": "1904399",
    "end": "1910480"
  },
  {
    "text": "actually demo it quickly um for this we um i also use katakura hopefully we",
    "start": "1910480",
    "end": "1918080"
  },
  {
    "start": "1911000",
    "end": "2205000"
  },
  {
    "text": "can expose that um after kubecon um for the for the public",
    "start": "1918080",
    "end": "1923200"
  },
  {
    "text": "use so let's go for that and let's start with just starting those produces",
    "start": "1923200",
    "end": "1928880"
  },
  {
    "text": "we have probabilities for team fruit let's copy configuration for that and two replicas for teamveggie",
    "start": "1928880",
    "end": "1935760"
  },
  {
    "text": "let's copy those files and now let's prepare a directory",
    "start": "1935760",
    "end": "1940880"
  },
  {
    "text": "for for our prompt users let's start the promptus",
    "start": "1940880",
    "end": "1947279"
  },
  {
    "text": "it might um take some time actually well we started um let's create",
    "start": "1947360",
    "end": "1953760"
  },
  {
    "text": "a sidecar after that let's now create uh team veggie promises and sidecar and",
    "start": "1953760",
    "end": "1961760"
  },
  {
    "text": "another pro materials and side car as you can see i can i'm using just docker machines",
    "start": "1961760",
    "end": "1967200"
  },
  {
    "text": "for for um for simple showcase and let's start you know with no data tenancy model",
    "start": "1967200",
    "end": "1974480"
  },
  {
    "text": "um so this means that we start a separate querier for veggie and for fruit teams and um",
    "start": "1974480",
    "end": "1981519"
  },
  {
    "text": "so it should look like um i presented before so let's try to access our queries let's",
    "start": "1981519",
    "end": "1988000"
  },
  {
    "text": "see how it goes so as you can see on store page we can only see one",
    "start": "1988000",
    "end": "1993760"
  },
  {
    "text": "sidecar from team fruits so it's kind of obvious that we'll have only data from the team fruit",
    "start": "1993760",
    "end": "2000399"
  },
  {
    "text": "yep now i can quickly show you the veggie one but it's pretty similar",
    "start": "2000399",
    "end": "2007760"
  },
  {
    "text": "you only have data for team veggie and there are two replicas so you have two um two um two values because there are",
    "start": "2007760",
    "end": "2016559"
  },
  {
    "text": "two promises that are scraping themselves and kind of each other okay but we have tomato problem as we as",
    "start": "2016559",
    "end": "2023120"
  },
  {
    "text": "we describe and we have also reused infra so problem so let's try to build a multi-tenant",
    "start": "2023120",
    "end": "2029440"
  },
  {
    "text": "um read path for tunnels so let's stop our aquarius because we want to set up a one",
    "start": "2029440",
    "end": "2035200"
  },
  {
    "text": "multi-talent querier that will be safe to use uh let's start that and the difference",
    "start": "2035200",
    "end": "2040480"
  },
  {
    "text": "here is that we just point to all the stores so all the sidecars we have for both mv",
    "start": "2040480",
    "end": "2046320"
  },
  {
    "text": "veggie and team and team fruit without anything else as we describe",
    "start": "2046320",
    "end": "2052158"
  },
  {
    "text": "this is like single purpose thing so as long as you have all stores store",
    "start": "2052159",
    "end": "2057520"
  },
  {
    "text": "apis so two side cards from veggie and one from fruit we",
    "start": "2057520",
    "end": "2062638"
  },
  {
    "text": "will have all the data right so this is kind of our admin tomato view whatever you want to call",
    "start": "2062639",
    "end": "2068720"
  },
  {
    "text": "yeah we see all the data which is uh not great if you want to ensure some isolation so",
    "start": "2068720",
    "end": "2074000"
  },
  {
    "text": "let's let's actually go for prom label proxy project right so it is as simple as yeah this is like",
    "start": "2074000",
    "end": "2080638"
  },
  {
    "text": "a status uh proxy with where you point the upstream and url which is like where your",
    "start": "2080639",
    "end": "2087599"
  },
  {
    "text": "multitown query is and then what's the listing part and the key part is that what's the label",
    "start": "2087599",
    "end": "2093040"
  },
  {
    "text": "and because as you can see our prompt uses have three labels and one of",
    "start": "2093040",
    "end": "2098880"
  },
  {
    "text": "them is tenant describing critically you know what team this promoters",
    "start": "2098880",
    "end": "2103920"
  },
  {
    "text": "is um is part of um we can kind of isolate tenants based on",
    "start": "2103920",
    "end": "2109680"
  },
  {
    "text": "that so once we create the proxy uh let's leverage this proxy with some kind",
    "start": "2109680",
    "end": "2114880"
  },
  {
    "text": "of alf and i choose the caddy server which is like a fancy engines and there is some configuration very",
    "start": "2114880",
    "end": "2121440"
  },
  {
    "text": "simple configuration which exposes two ports 39091",
    "start": "2121440",
    "end": "2126640"
  },
  {
    "text": "for team fruit so in this part it will just append um the the parameter to the url",
    "start": "2126640",
    "end": "2134480"
  },
  {
    "text": "um portion with tenant equal steam fruit and there is a second part which will",
    "start": "2134480",
    "end": "2140240"
  },
  {
    "text": "inject tenant costing veggies veggies so depending on what part you are",
    "start": "2140240",
    "end": "2146240"
  },
  {
    "text": "using it should inject the correct parameter um and also it points to the prom label",
    "start": "2146240",
    "end": "2152800"
  },
  {
    "text": "proxy that understand this parameter and kind of knows how to inject that into query",
    "start": "2152800",
    "end": "2158000"
  },
  {
    "text": "into other critical prompt use apis so once we start that um we should have",
    "start": "2158000",
    "end": "2165520"
  },
  {
    "text": "a query for fruit team which is which should actually give us um",
    "start": "2165520",
    "end": "2173280"
  },
  {
    "text": "yeah only team fruit data even though this kind of query have access to all of",
    "start": "2173280",
    "end": "2179599"
  },
  {
    "text": "the stores right and kind of the same will be for veggie team just uh it isolate for it has all the side cars",
    "start": "2179599",
    "end": "2187920"
  },
  {
    "text": "even team fruit however we can see only um only go routines let's say or like yeah",
    "start": "2187920",
    "end": "2194000"
  },
  {
    "text": "memphis gcc cpu fraction for team veggie so that's the whole point um",
    "start": "2194000",
    "end": "2200400"
  },
  {
    "text": "of this demo um let's go back to slides um and i think we don't have",
    "start": "2200400",
    "end": "2208000"
  },
  {
    "text": "you know a long time here to describe all of this and hopefully maybe on the next crypt comes we can demo",
    "start": "2208000",
    "end": "2213040"
  },
  {
    "text": "um further multi-tenancy parts because we talked about you know read path of the multi-dance uh",
    "start": "2213040",
    "end": "2218880"
  },
  {
    "text": "multi-tenant you know reits isolation but um there is much more we already solved you know storage soft",
    "start": "2218880",
    "end": "2226160"
  },
  {
    "text": "tenancy where you maybe include upload order blocks all the data into the same",
    "start": "2226160",
    "end": "2232000"
  },
  {
    "text": "bucket you can totally do that it's still multitenant you can have separate buckets for each",
    "start": "2232000",
    "end": "2238720"
  },
  {
    "text": "tenon that's okay we call it hard tenancy and the same for receiver",
    "start": "2238720",
    "end": "2243760"
  },
  {
    "text": "we can we build receiver with multitenants in mind so you can have soft tenancy where you have",
    "start": "2243760",
    "end": "2249839"
  },
  {
    "text": "just same ingestion receiver notes used for multiple tenants building you know",
    "start": "2249839",
    "end": "2256240"
  },
  {
    "text": "separate blocks still but um same ingestion path um but you can have heart tendency where you distinct",
    "start": "2256240",
    "end": "2262560"
  },
  {
    "text": "injection nodes to make sure it's it's just much safer and you can have greater sll slo on that",
    "start": "2262560",
    "end": "2268480"
  },
  {
    "text": "um so that's it from the multi-tenancy and uh i know many people really looking forward to that and and we are leveling",
    "start": "2268480",
    "end": "2275119"
  },
  {
    "text": "we are leveraging that at redcot as well so this is pretty exciting to actually yeah prepare a demo so to showcase and",
    "start": "2275119",
    "end": "2282400"
  },
  {
    "text": "showcase this for you all right and last but not the least we are not stopping we have",
    "start": "2282400",
    "end": "2288000"
  },
  {
    "text": "lots of lots of stuff to do um quickly mentioning you know bucket viewer uh we want to contribute up to problem",
    "start": "2288000",
    "end": "2294160"
  },
  {
    "text": "cues we want to have finally proper deletions uh backfilling internals",
    "start": "2294160",
    "end": "2299839"
  },
  {
    "text": "query of dev safeguards so we are working hard on making sure um your infrastructure is stable",
    "start": "2299839",
    "end": "2305599"
  },
  {
    "text": "especially in the multi-tenant scenarios uh performance improvements like reality lots of lots of help from community",
    "start": "2305599",
    "end": "2312000"
  },
  {
    "text": "to to make that happen so it's pretty amazing and uh yeah some different cashback and supports and",
    "start": "2312000",
    "end": "2318880"
  },
  {
    "text": "i want to also mention the mentorship like we spent the amazing couple of months of monitoring",
    "start": "2318880",
    "end": "2324800"
  },
  {
    "text": "like multiple amazing people and some of them are you know becoming tunnels maintainers",
    "start": "2324800",
    "end": "2330400"
  },
  {
    "text": "and or like you know helping us with the community actually starting some cncf meetups as well so",
    "start": "2330400",
    "end": "2336880"
  },
  {
    "text": "yeah um if you want to mentor someone or mentored on be mentored yeah please be",
    "start": "2336880",
    "end": "2343280"
  },
  {
    "text": "uh yeah follow our twitter and and promote use twitter to to get more info yeah we are happy to",
    "start": "2343280",
    "end": "2348480"
  },
  {
    "text": "to help in some way thank you um that's it and yeah we are happy to",
    "start": "2348480",
    "end": "2354640"
  },
  {
    "text": "take questions",
    "start": "2354640",
    "end": "2358880"
  }
]