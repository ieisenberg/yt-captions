[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "hello everyone and welcome to my talk",
    "start": "0",
    "end": "2480"
  },
  {
    "text": "today i'd like to talk about",
    "start": "2480",
    "end": "4560"
  },
  {
    "text": "rust based secure and lightweight",
    "start": "4560",
    "end": "6480"
  },
  {
    "text": "container on time for emitted systems",
    "start": "6480",
    "end": "10559"
  },
  {
    "text": "my name is manuel sigmotor i'm a system",
    "start": "10639",
    "end": "12559"
  },
  {
    "text": "software engineer at",
    "start": "12559",
    "end": "13679"
  },
  {
    "text": "sony id center my research interests",
    "start": "13679",
    "end": "17359"
  },
  {
    "text": "are container virtualization unicornos",
    "start": "17359",
    "end": "19680"
  },
  {
    "text": "and linux kernel",
    "start": "19680",
    "end": "22720"
  },
  {
    "start": "22000",
    "end": "22000"
  },
  {
    "text": "here is the ultra outline of my",
    "start": "23279",
    "end": "25119"
  },
  {
    "text": "presentation first",
    "start": "25119",
    "end": "26880"
  },
  {
    "text": "i'd like to start by talking about linux",
    "start": "26880",
    "end": "28960"
  },
  {
    "text": "container virtualization and container",
    "start": "28960",
    "end": "30880"
  },
  {
    "text": "runtime software",
    "start": "30880",
    "end": "32480"
  },
  {
    "text": "second i want to share how we have",
    "start": "32480",
    "end": "34719"
  },
  {
    "text": "managed these containers on embedded",
    "start": "34719",
    "end": "36559"
  },
  {
    "text": "systems",
    "start": "36559",
    "end": "37440"
  },
  {
    "text": "and the problems of existing control",
    "start": "37440",
    "end": "39680"
  },
  {
    "text": "alone times",
    "start": "39680",
    "end": "41840"
  },
  {
    "text": "then let me introduce our raspberries",
    "start": "41840",
    "end": "43840"
  },
  {
    "text": "secure and lightweight container on time",
    "start": "43840",
    "end": "46000"
  },
  {
    "text": "optimized for embedded systems after",
    "start": "46000",
    "end": "49039"
  },
  {
    "text": "that i will show the evaluation of our",
    "start": "49039",
    "end": "51280"
  },
  {
    "text": "raspberries runtime",
    "start": "51280",
    "end": "52960"
  },
  {
    "text": "finally i'll talk about the future work",
    "start": "52960",
    "end": "55120"
  },
  {
    "text": "of our runtime",
    "start": "55120",
    "end": "56160"
  },
  {
    "text": "under the conclusion of this",
    "start": "56160",
    "end": "57440"
  },
  {
    "text": "presentation",
    "start": "57440",
    "end": "59840"
  },
  {
    "text": "so let's start with the first",
    "start": "60640",
    "end": "62399"
  },
  {
    "text": "introduction",
    "start": "62399",
    "end": "64720"
  },
  {
    "text": "linux container provides isolation and",
    "start": "64720",
    "end": "66960"
  },
  {
    "start": "65000",
    "end": "65000"
  },
  {
    "text": "containment for applications",
    "start": "66960",
    "end": "69040"
  },
  {
    "text": "and this mechanism can prevent the text",
    "start": "69040",
    "end": "71040"
  },
  {
    "text": "from interested applications",
    "start": "71040",
    "end": "73439"
  },
  {
    "text": "recently the container has been utilized",
    "start": "73439",
    "end": "75600"
  },
  {
    "text": "increasingly in embedded",
    "start": "75600",
    "end": "77360"
  },
  {
    "text": "systems because techniques is more",
    "start": "77360",
    "end": "79680"
  },
  {
    "text": "attractive to resource concerning the",
    "start": "79680",
    "end": "81360"
  },
  {
    "text": "systems due to the lightweight",
    "start": "81360",
    "end": "83520"
  },
  {
    "text": "these containers are created by the",
    "start": "83520",
    "end": "85360"
  },
  {
    "text": "software it's called",
    "start": "85360",
    "end": "86560"
  },
  {
    "text": "called container on time",
    "start": "86560",
    "end": "89920"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "what is container on time container on",
    "start": "90159",
    "end": "92560"
  },
  {
    "text": "time is the software that",
    "start": "92560",
    "end": "93840"
  },
  {
    "text": "spawns and runs containers and is",
    "start": "93840",
    "end": "96000"
  },
  {
    "text": "responsible for the mechanics of running",
    "start": "96000",
    "end": "98159"
  },
  {
    "text": "the containers the container runtimes",
    "start": "98159",
    "end": "100960"
  },
  {
    "text": "such as rancid sometimes are referred to",
    "start": "100960",
    "end": "103040"
  },
  {
    "text": "as rollable runtimes",
    "start": "103040",
    "end": "105040"
  },
  {
    "text": "the container runtimes are compatible",
    "start": "105040",
    "end": "106799"
  },
  {
    "text": "with ocr runtime specification",
    "start": "106799",
    "end": "108960"
  },
  {
    "text": "to be able to receive requests from",
    "start": "108960",
    "end": "110880"
  },
  {
    "text": "higher layers such as container d",
    "start": "110880",
    "end": "114079"
  },
  {
    "text": "rci stands for open container initiative",
    "start": "114079",
    "end": "117600"
  },
  {
    "text": "as you already know containers are",
    "start": "117600",
    "end": "119680"
  },
  {
    "text": "implemented using linux namespaces",
    "start": "119680",
    "end": "121920"
  },
  {
    "text": "c groups capabilities and so on",
    "start": "121920",
    "end": "124960"
  },
  {
    "text": "so the library controller on time are",
    "start": "124960",
    "end": "127200"
  },
  {
    "text": "responsible for setting up these linux",
    "start": "127200",
    "end": "129360"
  },
  {
    "text": "features for containers",
    "start": "129360",
    "end": "132640"
  },
  {
    "start": "132000",
    "end": "132000"
  },
  {
    "text": "this slide shows the software stack of",
    "start": "132879",
    "end": "134720"
  },
  {
    "text": "its container on time",
    "start": "134720",
    "end": "136160"
  },
  {
    "text": "red supports users create containers by",
    "start": "136160",
    "end": "138720"
  },
  {
    "text": "kubernetes",
    "start": "138720",
    "end": "139920"
  },
  {
    "text": "first kubernetes of kubernetes",
    "start": "139920",
    "end": "141840"
  },
  {
    "text": "communicates with high level container",
    "start": "141840",
    "end": "143760"
  },
  {
    "text": "on time such as container d",
    "start": "143760",
    "end": "145280"
  },
  {
    "text": "and cryo through cli crs stands for",
    "start": "145280",
    "end": "148640"
  },
  {
    "text": "container on time interface",
    "start": "148640",
    "end": "150720"
  },
  {
    "text": "second however runtime employ images",
    "start": "150720",
    "end": "153120"
  },
  {
    "text": "from registries",
    "start": "153120",
    "end": "154239"
  },
  {
    "text": "manage them and hands order to available",
    "start": "154239",
    "end": "156959"
  },
  {
    "text": "runtime",
    "start": "156959",
    "end": "157440"
  },
  {
    "text": "through all ci lastly notable runtimes",
    "start": "157440",
    "end": "161040"
  },
  {
    "text": "such as run c create and launch the",
    "start": "161040",
    "end": "162879"
  },
  {
    "text": "containers using the linux features",
    "start": "162879",
    "end": "166800"
  },
  {
    "text": "so today's topic is here we're relatable",
    "start": "167120",
    "end": "169360"
  },
  {
    "text": "control on time",
    "start": "169360",
    "end": "172319"
  },
  {
    "text": "now i'd like to talk about the",
    "start": "172400",
    "end": "174000"
  },
  {
    "text": "motivation of our study",
    "start": "174000",
    "end": "177440"
  },
  {
    "start": "177000",
    "end": "177000"
  },
  {
    "text": "first i'll talk about the requirements",
    "start": "177440",
    "end": "179280"
  },
  {
    "text": "of embedded systems",
    "start": "179280",
    "end": "181200"
  },
  {
    "text": "the main difference between general",
    "start": "181200",
    "end": "183200"
  },
  {
    "text": "purpose systems and",
    "start": "183200",
    "end": "184319"
  },
  {
    "text": "embedded systems is that embedded",
    "start": "184319",
    "end": "186000"
  },
  {
    "text": "systems have more restrictions than",
    "start": "186000",
    "end": "187680"
  },
  {
    "text": "server systems",
    "start": "187680",
    "end": "189440"
  },
  {
    "text": "in resource constraining the systems the",
    "start": "189440",
    "end": "191200"
  },
  {
    "text": "memory size is small",
    "start": "191200",
    "end": "192720"
  },
  {
    "text": "stretch capacity is lower and the cpu is",
    "start": "192720",
    "end": "195040"
  },
  {
    "text": "not high",
    "start": "195040",
    "end": "196480"
  },
  {
    "text": "in the case of mission clinical systems",
    "start": "196480",
    "end": "198720"
  },
  {
    "text": "real-time applications",
    "start": "198720",
    "end": "200159"
  },
  {
    "text": "run with critical functionality on the",
    "start": "200159",
    "end": "202080"
  },
  {
    "text": "systems and the systems are",
    "start": "202080",
    "end": "204080"
  },
  {
    "text": "longer life cycles than servers so we",
    "start": "204080",
    "end": "207120"
  },
  {
    "text": "needed to manage containers while",
    "start": "207120",
    "end": "208720"
  },
  {
    "text": "meeting",
    "start": "208720",
    "end": "209120"
  },
  {
    "text": "these requirements",
    "start": "209120",
    "end": "212560"
  },
  {
    "start": "212000",
    "end": "212000"
  },
  {
    "text": "how we land continue runtime on such",
    "start": "212560",
    "end": "215120"
  },
  {
    "text": "embedded systems",
    "start": "215120",
    "end": "216480"
  },
  {
    "text": "it is difficult to use kubernetes or",
    "start": "216480",
    "end": "218400"
  },
  {
    "text": "docker on embedded systems because those",
    "start": "218400",
    "end": "220400"
  },
  {
    "text": "software includes performance overhead",
    "start": "220400",
    "end": "222319"
  },
  {
    "text": "and high resource usage to manage",
    "start": "222319",
    "end": "224080"
  },
  {
    "text": "containers",
    "start": "224080",
    "end": "225280"
  },
  {
    "text": "for example kubernetes and the docker",
    "start": "225280",
    "end": "227280"
  },
  {
    "text": "includes a high level runtime that",
    "start": "227280",
    "end": "228879"
  },
  {
    "text": "manages container images",
    "start": "228879",
    "end": "231040"
  },
  {
    "text": "in the case of the mission critical",
    "start": "231040",
    "end": "232560"
  },
  {
    "text": "systems we cannot ignore the overhead",
    "start": "232560",
    "end": "234720"
  },
  {
    "text": "because response time on the system",
    "start": "234720",
    "end": "236720"
  },
  {
    "text": "should be high for real-time",
    "start": "236720",
    "end": "238840"
  },
  {
    "text": "applications",
    "start": "238840",
    "end": "240560"
  },
  {
    "text": "in addition the right operations shot in",
    "start": "240560",
    "end": "242560"
  },
  {
    "text": "the live span or emmc",
    "start": "242560",
    "end": "244319"
  },
  {
    "text": "that stands for embedded multimedia card",
    "start": "244319",
    "end": "246560"
  },
  {
    "text": "that is a standard",
    "start": "246560",
    "end": "247680"
  },
  {
    "text": "specification of embedded memory please",
    "start": "247680",
    "end": "250400"
  },
  {
    "text": "look at the figure on the left",
    "start": "250400",
    "end": "252480"
  },
  {
    "text": "a demo sub such as darkerly always",
    "start": "252480",
    "end": "254720"
  },
  {
    "text": "writes up rights to metadata files in",
    "start": "254720",
    "end": "257040"
  },
  {
    "text": "mounts on emmc of embedded",
    "start": "257040",
    "end": "258959"
  },
  {
    "text": "systems we want to avoid the right",
    "start": "258959",
    "end": "261440"
  },
  {
    "text": "applications",
    "start": "261440",
    "end": "262400"
  },
  {
    "text": "as much as possible to extend the",
    "start": "262400",
    "end": "264320"
  },
  {
    "text": "lifespan of the emmc",
    "start": "264320",
    "end": "267120"
  },
  {
    "text": "to solve these problems we learned a lot",
    "start": "267120",
    "end": "269280"
  },
  {
    "text": "about content among time along on the",
    "start": "269280",
    "end": "271040"
  },
  {
    "text": "systems",
    "start": "271040",
    "end": "272000"
  },
  {
    "text": "in the figure on the right container on",
    "start": "272000",
    "end": "274160"
  },
  {
    "text": "timelines without any services",
    "start": "274160",
    "end": "276639"
  },
  {
    "text": "in this way we can manage containers",
    "start": "276639",
    "end": "278560"
  },
  {
    "text": "effectively on the systems",
    "start": "278560",
    "end": "282400"
  },
  {
    "start": "282000",
    "end": "282000"
  },
  {
    "text": "however the existing container on times",
    "start": "282400",
    "end": "284560"
  },
  {
    "text": "should have some problems in terms of",
    "start": "284560",
    "end": "286320"
  },
  {
    "text": "security and the right way",
    "start": "286320",
    "end": "287759"
  },
  {
    "text": "we realize the runtimes on embedded",
    "start": "287759",
    "end": "289759"
  },
  {
    "text": "systems because runtimes are not",
    "start": "289759",
    "end": "291440"
  },
  {
    "text": "optimized for systems first in terms of",
    "start": "291440",
    "end": "294960"
  },
  {
    "text": "security linux capabilities are not fine",
    "start": "294960",
    "end": "297199"
  },
  {
    "text": "land access control",
    "start": "297199",
    "end": "299520"
  },
  {
    "text": "when a user wants to use a ping command",
    "start": "299520",
    "end": "302080"
  },
  {
    "text": "the user needs to have a cab network",
    "start": "302080",
    "end": "304000"
  },
  {
    "text": "capability",
    "start": "304000",
    "end": "305039"
  },
  {
    "text": "however cabinet role also allows users",
    "start": "305039",
    "end": "307919"
  },
  {
    "text": "to run up spoofing attacks",
    "start": "307919",
    "end": "310320"
  },
  {
    "text": "second the looters container by username",
    "start": "310320",
    "end": "312560"
  },
  {
    "text": "spaces is",
    "start": "312560",
    "end": "313520"
  },
  {
    "text": "very strict for the systems the username",
    "start": "313520",
    "end": "316320"
  },
  {
    "text": "space allows the containers that",
    "start": "316320",
    "end": "318320"
  },
  {
    "text": "are pre um privileged outside the name",
    "start": "318320",
    "end": "321039"
  },
  {
    "text": "space to have root privileges",
    "start": "321039",
    "end": "323680"
  },
  {
    "text": "but at the same time limiting their",
    "start": "323680",
    "end": "325520"
  },
  {
    "text": "scope of that privilege to the name",
    "start": "325520",
    "end": "327680"
  },
  {
    "text": "space",
    "start": "327680",
    "end": "329120"
  },
  {
    "text": "however the reader's container cannot",
    "start": "329120",
    "end": "331280"
  },
  {
    "text": "emulate all system code because the",
    "start": "331280",
    "end": "333120"
  },
  {
    "text": "containers in the username space cannot",
    "start": "333120",
    "end": "335199"
  },
  {
    "text": "manipulate the global resources",
    "start": "335199",
    "end": "337360"
  },
  {
    "text": "in the systems in the case of the",
    "start": "337360",
    "end": "340000"
  },
  {
    "text": "embedded systems",
    "start": "340000",
    "end": "340880"
  },
  {
    "text": "it is not good because some embedded",
    "start": "340880",
    "end": "342800"
  },
  {
    "text": "system embedded applications",
    "start": "342800",
    "end": "344400"
  },
  {
    "text": "needed to access devices via such mount",
    "start": "344400",
    "end": "346720"
  },
  {
    "text": "system core",
    "start": "346720",
    "end": "348080"
  },
  {
    "text": "second in terms of lightweight container",
    "start": "348080",
    "end": "350720"
  },
  {
    "text": "setup time is not fast enough for real",
    "start": "350720",
    "end": "353120"
  },
  {
    "text": "time",
    "start": "353120",
    "end": "353440"
  },
  {
    "text": "system most container long time such as",
    "start": "353440",
    "end": "355919"
  },
  {
    "text": "ranci are written in guru language",
    "start": "355919",
    "end": "358080"
  },
  {
    "text": "the language is very good but",
    "start": "358080",
    "end": "359759"
  },
  {
    "text": "unfortunately the",
    "start": "359759",
    "end": "361280"
  },
  {
    "text": "application binary size is big for the",
    "start": "361280",
    "end": "363280"
  },
  {
    "text": "embedded systems and the garbage",
    "start": "363280",
    "end": "364639"
  },
  {
    "text": "collection by go run time increase high",
    "start": "364639",
    "end": "366560"
  },
  {
    "text": "cpu utilization",
    "start": "366560",
    "end": "368639"
  },
  {
    "text": "so we have to solve the problems in",
    "start": "368639",
    "end": "371120"
  },
  {
    "text": "embedded systems",
    "start": "371120",
    "end": "374000"
  },
  {
    "text": "okay now i'll talk proposal to solve",
    "start": "374080",
    "end": "376479"
  },
  {
    "text": "these problems",
    "start": "376479",
    "end": "379199"
  },
  {
    "start": "379000",
    "end": "379000"
  },
  {
    "text": "here i propose sl run time that is rust",
    "start": "379199",
    "end": "382000"
  },
  {
    "text": "based secure and the light which could",
    "start": "382000",
    "end": "383600"
  },
  {
    "text": "turn on on timing for embedded systems",
    "start": "383600",
    "end": "386160"
  },
  {
    "text": "sm runtime is implemented freely in rust",
    "start": "386160",
    "end": "388639"
  },
  {
    "text": "with modern flights",
    "start": "388639",
    "end": "389759"
  },
  {
    "text": "and lca compatible minimal container on",
    "start": "389759",
    "end": "392000"
  },
  {
    "text": "time for embedded systems",
    "start": "392000",
    "end": "394479"
  },
  {
    "text": "slr on time is largely divided into a",
    "start": "394479",
    "end": "396479"
  },
  {
    "text": "secure mechanism and",
    "start": "396479",
    "end": "397680"
  },
  {
    "text": "right-wing mechanism in the secure",
    "start": "397680",
    "end": "400240"
  },
  {
    "text": "features",
    "start": "400240",
    "end": "401360"
  },
  {
    "text": "isolation by container for high",
    "start": "401360",
    "end": "402960"
  },
  {
    "text": "dependability the essential runtime",
    "start": "402960",
    "end": "404960"
  },
  {
    "text": "has a fine landing access control and",
    "start": "404960",
    "end": "406479"
  },
  {
    "text": "the memory safety by rust forcibility",
    "start": "406479",
    "end": "409280"
  },
  {
    "text": "in the lightweight mechanism raw memory",
    "start": "409280",
    "end": "411599"
  },
  {
    "text": "usage and the smaller binary sizes from",
    "start": "411599",
    "end": "413680"
  },
  {
    "text": "the benefits for the rest",
    "start": "413680",
    "end": "415520"
  },
  {
    "text": "and the first setup that is our original",
    "start": "415520",
    "end": "417599"
  },
  {
    "text": "features and their real-time support for",
    "start": "417599",
    "end": "419919"
  },
  {
    "text": "embedded",
    "start": "419919",
    "end": "421840"
  },
  {
    "text": "i'll explain these mechanisms in detail",
    "start": "421840",
    "end": "424319"
  },
  {
    "text": "later slide",
    "start": "424319",
    "end": "427039"
  },
  {
    "start": "427000",
    "end": "427000"
  },
  {
    "text": "here you can see the compiling table of",
    "start": "427280",
    "end": "429680"
  },
  {
    "text": "srn time and existing container on times",
    "start": "429680",
    "end": "432639"
  },
  {
    "text": "its runtime is more lightweight and",
    "start": "432639",
    "end": "434639"
  },
  {
    "text": "secure than their existing controller on",
    "start": "434639",
    "end": "436960"
  },
  {
    "text": "time",
    "start": "436960",
    "end": "437599"
  },
  {
    "text": "the finally size base runtime is 2.63",
    "start": "437599",
    "end": "440720"
  },
  {
    "text": "megabyte",
    "start": "440720",
    "end": "441919"
  },
  {
    "text": "so that is much smaller resiliency",
    "start": "441919",
    "end": "444400"
  },
  {
    "text": "container long-term radical developed by",
    "start": "444400",
    "end": "446319"
  },
  {
    "text": "oracle",
    "start": "446319",
    "end": "446960"
  },
  {
    "text": "is also implemented in rus-like external",
    "start": "446960",
    "end": "449440"
  },
  {
    "text": "time",
    "start": "449440",
    "end": "450160"
  },
  {
    "text": "however the development was stopped in",
    "start": "450160",
    "end": "452400"
  },
  {
    "text": "2018",
    "start": "452400",
    "end": "453360"
  },
  {
    "text": "and the repository has already been",
    "start": "453360",
    "end": "455520"
  },
  {
    "text": "archived",
    "start": "455520",
    "end": "456960"
  },
  {
    "text": "the rust features and creates use in",
    "start": "456960",
    "end": "459120"
  },
  {
    "text": "radical have been updated because rust",
    "start": "459120",
    "end": "461520"
  },
  {
    "text": "is a fast growing language",
    "start": "461520",
    "end": "464000"
  },
  {
    "text": "compared to radical acronym time is the",
    "start": "464000",
    "end": "466240"
  },
  {
    "text": "latest rats based content around time",
    "start": "466240",
    "end": "470080"
  },
  {
    "start": "470000",
    "end": "470000"
  },
  {
    "text": "why did we choose ras over golang or cc",
    "start": "471520",
    "end": "474240"
  },
  {
    "text": "practice to develop content around time",
    "start": "474240",
    "end": "476879"
  },
  {
    "text": "the answer is that rust is a great fit",
    "start": "476879",
    "end": "479039"
  },
  {
    "text": "for embedded systems",
    "start": "479039",
    "end": "480639"
  },
  {
    "text": "first the performance is equivalent to",
    "start": "480639",
    "end": "483120"
  },
  {
    "text": "cc press press",
    "start": "483120",
    "end": "484800"
  },
  {
    "text": "second last guarantees memory safety",
    "start": "484800",
    "end": "486960"
  },
  {
    "text": "without garbage collection",
    "start": "486960",
    "end": "489039"
  },
  {
    "text": "third the rust community has awesome",
    "start": "489039",
    "end": "491120"
  },
  {
    "text": "place for developing the content on time",
    "start": "491120",
    "end": "494080"
  },
  {
    "text": "i'll introduce this phrase in the next",
    "start": "494080",
    "end": "495919"
  },
  {
    "text": "slide",
    "start": "495919",
    "end": "497280"
  },
  {
    "text": "lastly ras ffizer stands for following",
    "start": "497280",
    "end": "499919"
  },
  {
    "text": "function interface is",
    "start": "499919",
    "end": "501199"
  },
  {
    "text": "very helpful to bind linux api go rank",
    "start": "501199",
    "end": "504639"
  },
  {
    "text": "adapted by many existing container",
    "start": "504639",
    "end": "506560"
  },
  {
    "text": "runtimes is also good",
    "start": "506560",
    "end": "508319"
  },
  {
    "text": "but has some limitations in embedded",
    "start": "508319",
    "end": "510240"
  },
  {
    "text": "systems",
    "start": "510240",
    "end": "511520"
  },
  {
    "text": "the goal has a problem interacting with",
    "start": "511520",
    "end": "513599"
  },
  {
    "text": "name spaces by go run time",
    "start": "513599",
    "end": "515839"
  },
  {
    "text": "in addition the application finally says",
    "start": "515839",
    "end": "518080"
  },
  {
    "text": "is big compared to rust and they go",
    "start": "518080",
    "end": "520399"
  },
  {
    "text": "based around time include performance",
    "start": "520399",
    "end": "522240"
  },
  {
    "text": "overhead by garbage collection",
    "start": "522240",
    "end": "525760"
  },
  {
    "start": "527000",
    "end": "527000"
  },
  {
    "text": "here i'd like to share the clients for",
    "start": "527120",
    "end": "529120"
  },
  {
    "text": "developing the container on time",
    "start": "529120",
    "end": "531279"
  },
  {
    "text": "rust has already a useful class for",
    "start": "531279",
    "end": "534080"
  },
  {
    "text": "creating containers such as",
    "start": "534080",
    "end": "535600"
  },
  {
    "text": "capability remit c group second and",
    "start": "535600",
    "end": "538480"
  },
  {
    "text": "things like that",
    "start": "538480",
    "end": "540000"
  },
  {
    "text": "passively phrase is used for the fine",
    "start": "540000",
    "end": "542080"
  },
  {
    "text": "grained access control of the slr on",
    "start": "542080",
    "end": "543839"
  },
  {
    "text": "time",
    "start": "543839",
    "end": "544320"
  },
  {
    "text": "and the co-affinity is used for the",
    "start": "544320",
    "end": "546160"
  },
  {
    "text": "excel on time real time support",
    "start": "546160",
    "end": "549120"
  },
  {
    "text": "as you already know we can develop the",
    "start": "549120",
    "end": "551200"
  },
  {
    "text": "software easily using crafts or json",
    "start": "551200",
    "end": "553360"
  },
  {
    "text": "bitmaps or ci of json format to",
    "start": "553360",
    "end": "555519"
  },
  {
    "text": "interrupt data structures",
    "start": "555519",
    "end": "558959"
  },
  {
    "start": "559000",
    "end": "559000"
  },
  {
    "text": "this slide shows that srm times",
    "start": "559440",
    "end": "561360"
  },
  {
    "text": "architecture overview",
    "start": "561360",
    "end": "562800"
  },
  {
    "text": "in the next few slides i will show the",
    "start": "562800",
    "end": "564800"
  },
  {
    "text": "lightweight mechanism",
    "start": "564800",
    "end": "566000"
  },
  {
    "text": "and secure mechanism first",
    "start": "566000",
    "end": "569440"
  },
  {
    "text": "lightweight mechanism i will explain the",
    "start": "569440",
    "end": "573120"
  },
  {
    "text": "first",
    "start": "573120",
    "end": "573519"
  },
  {
    "text": "setup feature the process up around",
    "start": "573519",
    "end": "577600"
  },
  {
    "text": "choose a container speedly by leveraging",
    "start": "577600",
    "end": "579600"
  },
  {
    "text": "a pre-created container",
    "start": "579600",
    "end": "581600"
  },
  {
    "text": "by using the first setup sron time can",
    "start": "581600",
    "end": "584080"
  },
  {
    "text": "omit time before initializing the",
    "start": "584080",
    "end": "585760"
  },
  {
    "text": "runtime and creating the container",
    "start": "585760",
    "end": "588080"
  },
  {
    "text": "faster setup replaces only the execution",
    "start": "588080",
    "end": "590720"
  },
  {
    "text": "process",
    "start": "590720",
    "end": "591200"
  },
  {
    "text": "inside the container at a setup so the",
    "start": "591200",
    "end": "593760"
  },
  {
    "text": "runtime can be used as a configuration",
    "start": "593760",
    "end": "595760"
  },
  {
    "text": "except for the execution process this",
    "start": "595760",
    "end": "598480"
  },
  {
    "text": "feature is useful because some",
    "start": "598480",
    "end": "600000"
  },
  {
    "text": "containers use",
    "start": "600000",
    "end": "600959"
  },
  {
    "text": "actually same configuration such as the",
    "start": "600959",
    "end": "602720"
  },
  {
    "text": "namespaces capabilities and things like",
    "start": "602720",
    "end": "604959"
  },
  {
    "text": "that",
    "start": "604959",
    "end": "605519"
  },
  {
    "text": "except for the execution process inside",
    "start": "605519",
    "end": "607519"
  },
  {
    "text": "the container",
    "start": "607519",
    "end": "609120"
  },
  {
    "text": "please look at the figure on the left",
    "start": "609120",
    "end": "610800"
  },
  {
    "text": "side now some containers are created",
    "start": "610800",
    "end": "614000"
  },
  {
    "text": "these containers do not align yet after",
    "start": "614000",
    "end": "616560"
  },
  {
    "text": "that when you need to run a real-time",
    "start": "616560",
    "end": "618640"
  },
  {
    "text": "application",
    "start": "618640",
    "end": "619279"
  },
  {
    "text": "srn term replaces the dummy process with",
    "start": "619279",
    "end": "622160"
  },
  {
    "text": "real-time application",
    "start": "622160",
    "end": "623360"
  },
  {
    "text": "you want to run please look at the",
    "start": "623360",
    "end": "625839"
  },
  {
    "text": "figure on the right",
    "start": "625839",
    "end": "627040"
  },
  {
    "text": "the normal run has initializing runtime",
    "start": "627040",
    "end": "629120"
  },
  {
    "text": "creating a container",
    "start": "629120",
    "end": "630320"
  },
  {
    "text": "and starting the container phase in the",
    "start": "630320",
    "end": "632640"
  },
  {
    "text": "case of the first",
    "start": "632640",
    "end": "633519"
  },
  {
    "text": "setup you can reduce the time of",
    "start": "633519",
    "end": "635760"
  },
  {
    "text": "initializing return time and creating",
    "start": "635760",
    "end": "637760"
  },
  {
    "text": "the container",
    "start": "637760",
    "end": "639200"
  },
  {
    "text": "so it is possible to run the container",
    "start": "639200",
    "end": "641200"
  },
  {
    "text": "faster than normal run",
    "start": "641200",
    "end": "644480"
  },
  {
    "start": "644000",
    "end": "644000"
  },
  {
    "text": "in addition slr on time has a real time",
    "start": "644640",
    "end": "646720"
  },
  {
    "text": "support feature that enables runtime to",
    "start": "646720",
    "end": "648800"
  },
  {
    "text": "set a cpu affinity advanced setup",
    "start": "648800",
    "end": "651519"
  },
  {
    "text": "by using the future users can set cpu",
    "start": "651519",
    "end": "654079"
  },
  {
    "text": "affinity depending on the cpu rolled at",
    "start": "654079",
    "end": "656320"
  },
  {
    "text": "a setup",
    "start": "656320",
    "end": "658800"
  },
  {
    "start": "659000",
    "end": "659000"
  },
  {
    "text": "here i'd like to talk about the control",
    "start": "659360",
    "end": "661360"
  },
  {
    "text": "flow of the first setup and",
    "start": "661360",
    "end": "662880"
  },
  {
    "text": "real-time support red supports a user",
    "start": "662880",
    "end": "665600"
  },
  {
    "text": "creates a container by slr on time",
    "start": "665600",
    "end": "668399"
  },
  {
    "text": "first the user prepares a container",
    "start": "668399",
    "end": "670480"
  },
  {
    "text": "configuration file config.json in",
    "start": "670480",
    "end": "672839"
  },
  {
    "text": "advance the configuration describes the",
    "start": "672839",
    "end": "675839"
  },
  {
    "text": "dummy process as an",
    "start": "675839",
    "end": "676959"
  },
  {
    "text": "execution processing system container",
    "start": "676959",
    "end": "680160"
  },
  {
    "text": "after that the user issues create",
    "start": "680160",
    "end": "682399"
  },
  {
    "text": "application and sr on time initializing",
    "start": "682399",
    "end": "685279"
  },
  {
    "text": "the container based on the configuration",
    "start": "685279",
    "end": "688079"
  },
  {
    "text": "at the end of",
    "start": "688079",
    "end": "688880"
  },
  {
    "text": "this phase the container collection is",
    "start": "688880",
    "end": "690720"
  },
  {
    "text": "complete and all settings about",
    "start": "690720",
    "end": "692560"
  },
  {
    "text": "container initialization are complete at",
    "start": "692560",
    "end": "695519"
  },
  {
    "text": "this point",
    "start": "695519",
    "end": "696560"
  },
  {
    "text": "the container goes into a clay create",
    "start": "696560",
    "end": "698800"
  },
  {
    "text": "status and slam time and monitors are a",
    "start": "698800",
    "end": "701519"
  },
  {
    "text": "file descriptor then when the user wants",
    "start": "701519",
    "end": "704640"
  },
  {
    "text": "to run the container using process setup",
    "start": "704640",
    "end": "706880"
  },
  {
    "text": "the user creates the processor json",
    "start": "706880",
    "end": "709279"
  },
  {
    "text": "describes the real-time process to be",
    "start": "709279",
    "end": "711279"
  },
  {
    "text": "executed inside the container",
    "start": "711279",
    "end": "713040"
  },
  {
    "text": "and the cpu core that is due the process",
    "start": "713040",
    "end": "716160"
  },
  {
    "text": "then the user runs the first setup and",
    "start": "716160",
    "end": "718480"
  },
  {
    "text": "the slr runtime",
    "start": "718480",
    "end": "719360"
  },
  {
    "text": "writes the contents of the first startup",
    "start": "719360",
    "end": "721279"
  },
  {
    "text": "configuration",
    "start": "721279",
    "end": "722720"
  },
  {
    "text": "at the moment since the container that",
    "start": "722720",
    "end": "725040"
  },
  {
    "text": "is waiting can read",
    "start": "725040",
    "end": "727440"
  },
  {
    "text": "file descriptor just run runtime causes",
    "start": "727440",
    "end": "729680"
  },
  {
    "text": "the container to resume",
    "start": "729680",
    "end": "731360"
  },
  {
    "text": "execution so as long time sets the",
    "start": "731360",
    "end": "733839"
  },
  {
    "text": "process under the container runs",
    "start": "733839",
    "end": "736240"
  },
  {
    "text": "execution process",
    "start": "736240",
    "end": "739440"
  },
  {
    "text": "now let me move on the secure mechanism",
    "start": "739920",
    "end": "742160"
  },
  {
    "text": "of srn time",
    "start": "742160",
    "end": "745279"
  },
  {
    "text": "alright explains the fine gland access",
    "start": "745279",
    "end": "747040"
  },
  {
    "text": "control this is",
    "start": "747040",
    "end": "748399"
  },
  {
    "text": "here it's a runtime the fine line access",
    "start": "748399",
    "end": "752880"
  },
  {
    "start": "751000",
    "end": "751000"
  },
  {
    "text": "control enables the routers containers",
    "start": "752880",
    "end": "754800"
  },
  {
    "text": "to execute the system code safely",
    "start": "754800",
    "end": "757200"
  },
  {
    "text": "by using this fine blend access control",
    "start": "757200",
    "end": "759040"
  },
  {
    "text": "feature the looters container can",
    "start": "759040",
    "end": "760800"
  },
  {
    "text": "emulate",
    "start": "760800",
    "end": "761440"
  },
  {
    "text": "even system course that changes gravel",
    "start": "761440",
    "end": "763839"
  },
  {
    "text": "resources because the final and access",
    "start": "763839",
    "end": "765680"
  },
  {
    "text": "control server emulates assessment core",
    "start": "765680",
    "end": "767760"
  },
  {
    "text": "in user space on the behalf of the",
    "start": "767760",
    "end": "769440"
  },
  {
    "text": "container based on the security policy",
    "start": "769440",
    "end": "771360"
  },
  {
    "text": "that is set in advanced by the",
    "start": "771360",
    "end": "773279"
  },
  {
    "text": "administrator please look at the figure",
    "start": "773279",
    "end": "777120"
  },
  {
    "text": "now we have the root raise container a",
    "start": "777120",
    "end": "779279"
  },
  {
    "text": "and b and the fine gland access control",
    "start": "779279",
    "end": "781680"
  },
  {
    "text": "server with the security policy that",
    "start": "781680",
    "end": "783680"
  },
  {
    "text": "allows container aid to the mount tempe",
    "start": "783680",
    "end": "785760"
  },
  {
    "text": "fs",
    "start": "785760",
    "end": "786240"
  },
  {
    "text": "and the profits container b from zooming",
    "start": "786240",
    "end": "788160"
  },
  {
    "text": "amount temperatures",
    "start": "788160",
    "end": "790079"
  },
  {
    "text": "if container a does mount temperatures",
    "start": "790079",
    "end": "792240"
  },
  {
    "text": "the server catches the mount system call",
    "start": "792240",
    "end": "795519"
  },
  {
    "text": "before executing it checks whether the",
    "start": "795519",
    "end": "798079"
  },
  {
    "text": "destination of the",
    "start": "798079",
    "end": "799279"
  },
  {
    "text": "amount is temperature under the",
    "start": "799279",
    "end": "801360"
  },
  {
    "text": "performance a performance",
    "start": "801360",
    "end": "802800"
  },
  {
    "text": "amount on behalf of the container a",
    "start": "802800",
    "end": "806560"
  },
  {
    "text": "thanks to this mechanism the router's",
    "start": "806560",
    "end": "808959"
  },
  {
    "text": "containers can issue the mount system",
    "start": "808959",
    "end": "810880"
  },
  {
    "text": "call safely",
    "start": "810880",
    "end": "812240"
  },
  {
    "text": "if container b does not does mount",
    "start": "812240",
    "end": "814560"
  },
  {
    "text": "tempest",
    "start": "814560",
    "end": "815279"
  },
  {
    "text": "the server denies amount because of the",
    "start": "815279",
    "end": "817279"
  },
  {
    "text": "security policy",
    "start": "817279",
    "end": "818880"
  },
  {
    "text": "this fine land access control mechanism",
    "start": "818880",
    "end": "821199"
  },
  {
    "text": "is achieved using the new sitcom notify",
    "start": "821199",
    "end": "823360"
  },
  {
    "text": "feature",
    "start": "823360",
    "end": "825760"
  },
  {
    "start": "825000",
    "end": "825000"
  },
  {
    "text": "here i'll explain the second notified",
    "start": "825920",
    "end": "828399"
  },
  {
    "text": "feature that is introduced in linux",
    "start": "828399",
    "end": "830639"
  },
  {
    "text": "5.0 the second nullify provides a way to",
    "start": "830639",
    "end": "834320"
  },
  {
    "text": "handle a particular system call in user",
    "start": "834320",
    "end": "836560"
  },
  {
    "text": "space",
    "start": "836560",
    "end": "837839"
  },
  {
    "text": "now in this example we have a container",
    "start": "837839",
    "end": "840000"
  },
  {
    "text": "and a second agent which handles the",
    "start": "840000",
    "end": "841680"
  },
  {
    "text": "system course",
    "start": "841680",
    "end": "842560"
  },
  {
    "text": "on behalf of the container first the",
    "start": "842560",
    "end": "845040"
  },
  {
    "text": "container will issue a system call",
    "start": "845040",
    "end": "847199"
  },
  {
    "text": "second second catches a cisco call and",
    "start": "847199",
    "end": "849680"
  },
  {
    "text": "executes a ppf program and the bpf",
    "start": "849680",
    "end": "852160"
  },
  {
    "text": "returns notify after that",
    "start": "852160",
    "end": "855279"
  },
  {
    "text": "sitcom asks the circum agent to want to",
    "start": "855279",
    "end": "857600"
  },
  {
    "text": "run the system call",
    "start": "857600",
    "end": "858959"
  },
  {
    "text": "and the agent makes a decision on",
    "start": "858959",
    "end": "861279"
  },
  {
    "text": "whether the container performs the",
    "start": "861279",
    "end": "862880"
  },
  {
    "text": "seismical",
    "start": "862880",
    "end": "864240"
  },
  {
    "text": "to make the decision to set compensation",
    "start": "864240",
    "end": "866320"
  },
  {
    "text": "to read the seismic or arguments",
    "start": "866320",
    "end": "868079"
  },
  {
    "text": "and validate the system goal if okay the",
    "start": "868079",
    "end": "871199"
  },
  {
    "text": "agent performs the system goal on behalf",
    "start": "871199",
    "end": "873440"
  },
  {
    "text": "of the behalf of the process and",
    "start": "873440",
    "end": "875839"
  },
  {
    "text": "otherwise rejects the systemic goal",
    "start": "875839",
    "end": "878399"
  },
  {
    "text": "when the agent can successfully",
    "start": "878399",
    "end": "880079"
  },
  {
    "text": "successfully execute a multi-system call",
    "start": "880079",
    "end": "883440"
  },
  {
    "text": "agent sets the return value and return",
    "start": "883440",
    "end": "885760"
  },
  {
    "text": "it to the container",
    "start": "885760",
    "end": "888800"
  },
  {
    "start": "889000",
    "end": "889000"
  },
  {
    "text": "here this slide shows how their",
    "start": "889120",
    "end": "891440"
  },
  {
    "text": "experimental implements find glenda",
    "start": "891440",
    "end": "893199"
  },
  {
    "text": "access control using the cell comp",
    "start": "893199",
    "end": "894880"
  },
  {
    "text": "notify",
    "start": "894880",
    "end": "895920"
  },
  {
    "text": "first a system administrator launches a",
    "start": "895920",
    "end": "898480"
  },
  {
    "text": "final and access control server resolute",
    "start": "898480",
    "end": "900720"
  },
  {
    "text": "before starting a container",
    "start": "900720",
    "end": "903120"
  },
  {
    "text": "second user runs a container using",
    "start": "903120",
    "end": "905120"
  },
  {
    "text": "config.json that describes the set",
    "start": "905120",
    "end": "907120"
  },
  {
    "text": "combinatory",
    "start": "907120",
    "end": "908880"
  },
  {
    "text": "a few months ago ocl on time",
    "start": "908880",
    "end": "910720"
  },
  {
    "text": "specification added the second notify",
    "start": "910720",
    "end": "912800"
  },
  {
    "text": "support to use it in containers",
    "start": "912800",
    "end": "915920"
  },
  {
    "text": "in the configuration file listener first",
    "start": "915920",
    "end": "918240"
  },
  {
    "text": "specifies",
    "start": "918240",
    "end": "918959"
  },
  {
    "text": "the path of unix domain socket which is",
    "start": "918959",
    "end": "921040"
  },
  {
    "text": "used by the component for action",
    "start": "921040",
    "end": "923760"
  },
  {
    "text": "a user will create a router's container",
    "start": "923760",
    "end": "925680"
  },
  {
    "text": "using with configuration",
    "start": "925680",
    "end": "928000"
  },
  {
    "text": "after srm term receives a create request",
    "start": "928000",
    "end": "930959"
  },
  {
    "text": "address",
    "start": "930959",
    "end": "931600"
  },
  {
    "text": "runtime initializes a container and",
    "start": "931600",
    "end": "933440"
  },
  {
    "text": "creates a second notify file descriptor",
    "start": "933440",
    "end": "936320"
  },
  {
    "text": "then the runtime passes the descriptor",
    "start": "936320",
    "end": "938480"
  },
  {
    "text": "to the server",
    "start": "938480",
    "end": "941839"
  },
  {
    "text": "i will show the demo of findland access",
    "start": "942000",
    "end": "944399"
  },
  {
    "text": "control",
    "start": "944399",
    "end": "946959"
  },
  {
    "text": "our config.json describes that execution",
    "start": "950000",
    "end": "952480"
  },
  {
    "text": "process is",
    "start": "952480",
    "end": "953120"
  },
  {
    "text": "shell and the username space",
    "start": "953120",
    "end": "956720"
  },
  {
    "text": "setting and there's a comp notify",
    "start": "956720",
    "end": "959199"
  },
  {
    "text": "configuration",
    "start": "959199",
    "end": "960320"
  },
  {
    "text": "in this demo a limits mount seismic call",
    "start": "960320",
    "end": "964079"
  },
  {
    "text": "please look at the top right first i",
    "start": "964079",
    "end": "965920"
  },
  {
    "text": "want to find land access control server",
    "start": "965920",
    "end": "967839"
  },
  {
    "text": "that allows the container to the mount",
    "start": "967839",
    "end": "969600"
  },
  {
    "text": "only when the destination",
    "start": "969600",
    "end": "970959"
  },
  {
    "text": "is flew directly second runs in routers",
    "start": "970959",
    "end": "973920"
  },
  {
    "text": "container buyers along time",
    "start": "973920",
    "end": "975839"
  },
  {
    "text": "the user id is not root is root inside",
    "start": "975839",
    "end": "978639"
  },
  {
    "text": "the container",
    "start": "978639",
    "end": "979440"
  },
  {
    "text": "but on the host messenger user is",
    "start": "979440",
    "end": "982320"
  },
  {
    "text": "non-loot",
    "start": "982320",
    "end": "983600"
  },
  {
    "text": "now if he is not mounted when i try to",
    "start": "983600",
    "end": "986880"
  },
  {
    "text": "mount bar the mount fed to because",
    "start": "986880",
    "end": "988720"
  },
  {
    "text": "destination buys not allowed suburb",
    "start": "988720",
    "end": "991040"
  },
  {
    "text": "you can see the error message in the",
    "start": "991040",
    "end": "992639"
  },
  {
    "text": "server",
    "start": "992639",
    "end": "994320"
  },
  {
    "text": "however if i mount food directly the",
    "start": "994320",
    "end": "997519"
  },
  {
    "text": "mount was successful",
    "start": "997519",
    "end": "1000320"
  },
  {
    "text": "or we can confirm that the food directly",
    "start": "1000320",
    "end": "1002880"
  },
  {
    "text": "is mounted",
    "start": "1002880",
    "end": "1003680"
  },
  {
    "text": "correctly inside the rootless container",
    "start": "1003680",
    "end": "1011839"
  },
  {
    "text": "now let me move on the evaluation of esl",
    "start": "1013199",
    "end": "1016000"
  },
  {
    "text": "on time",
    "start": "1016000",
    "end": "1017519"
  },
  {
    "start": "1017000",
    "end": "1017000"
  },
  {
    "text": "the aberration goals are measuring two",
    "start": "1017519",
    "end": "1019440"
  },
  {
    "text": "types of start time",
    "start": "1019440",
    "end": "1020639"
  },
  {
    "text": "normal run and faster setup and the",
    "start": "1020639",
    "end": "1022800"
  },
  {
    "text": "memory consumption of the container on",
    "start": "1022800",
    "end": "1024720"
  },
  {
    "text": "times",
    "start": "1024720",
    "end": "1025280"
  },
  {
    "text": "the existing runtimes that we use in",
    "start": "1025280",
    "end": "1027438"
  },
  {
    "text": "this evaluation runs to see singularity",
    "start": "1027439",
    "end": "1029760"
  },
  {
    "text": "run c",
    "start": "1029760",
    "end": "1030319"
  },
  {
    "text": "series and right curve in the",
    "start": "1030319",
    "end": "1032480"
  },
  {
    "text": "experimental setup",
    "start": "1032480",
    "end": "1033918"
  },
  {
    "text": "original runtimes uses the same",
    "start": "1033919",
    "end": "1035520"
  },
  {
    "text": "config.json",
    "start": "1035520",
    "end": "1037839"
  },
  {
    "text": "remove the c grip's configuration",
    "start": "1037839",
    "end": "1039438"
  },
  {
    "text": "because s runtime does not support it",
    "start": "1039439",
    "end": "1041520"
  },
  {
    "text": "yet",
    "start": "1041520",
    "end": "1042480"
  },
  {
    "text": "then we learn the container runtimes",
    "start": "1042480",
    "end": "1044079"
  },
  {
    "text": "alone without any client tools",
    "start": "1044079",
    "end": "1046000"
  },
  {
    "text": "the container executes to execute true",
    "start": "1046000",
    "end": "1048640"
  },
  {
    "text": "commands inside the containers",
    "start": "1048640",
    "end": "1051200"
  },
  {
    "start": "1051000",
    "end": "1051000"
  },
  {
    "text": "the result of a startup time shows that",
    "start": "1051200",
    "end": "1053360"
  },
  {
    "text": "sron time is the fastest among the",
    "start": "1053360",
    "end": "1055200"
  },
  {
    "text": "existing continental run times",
    "start": "1055200",
    "end": "1056960"
  },
  {
    "text": "because the runtime is minimal please",
    "start": "1056960",
    "end": "1059039"
  },
  {
    "text": "look at the graph on the left side",
    "start": "1059039",
    "end": "1061280"
  },
  {
    "text": "the normal round of srn time achieves",
    "start": "1061280",
    "end": "1063280"
  },
  {
    "text": "7.4 times speed up compared to run c",
    "start": "1063280",
    "end": "1066160"
  },
  {
    "text": "the radical is also rust based container",
    "start": "1066160",
    "end": "1068240"
  },
  {
    "text": "on time but restaurant time is much",
    "start": "1068240",
    "end": "1070160"
  },
  {
    "text": "faster than regular",
    "start": "1070160",
    "end": "1071679"
  },
  {
    "text": "please look at the graph on the right",
    "start": "1071679",
    "end": "1073360"
  },
  {
    "text": "side process setup time",
    "start": "1073360",
    "end": "1075360"
  },
  {
    "text": "is a 5.1 millisecond and first up",
    "start": "1075360",
    "end": "1078400"
  },
  {
    "text": "start up achieves 1.5 times speed up",
    "start": "1078400",
    "end": "1081840"
  },
  {
    "text": "compared to",
    "start": "1081840",
    "end": "1082559"
  },
  {
    "text": "the normal run here this slide shows the",
    "start": "1082559",
    "end": "1085840"
  },
  {
    "start": "1084000",
    "end": "1084000"
  },
  {
    "text": "memory usage of the container runtimes",
    "start": "1085840",
    "end": "1088160"
  },
  {
    "text": "the result of the memory usage shows",
    "start": "1088160",
    "end": "1089919"
  },
  {
    "text": "that sron time is 3.824",
    "start": "1089919",
    "end": "1093760"
  },
  {
    "text": "and it is small compared to go based or",
    "start": "1093760",
    "end": "1096480"
  },
  {
    "text": "controller end times",
    "start": "1096480",
    "end": "1097679"
  },
  {
    "text": "the important point here is that srn",
    "start": "1097679",
    "end": "1099679"
  },
  {
    "text": "times memory usage is equivalent to",
    "start": "1099679",
    "end": "1101600"
  },
  {
    "text": "serum written in c language",
    "start": "1101600",
    "end": "1103760"
  },
  {
    "text": "c is the most preferred language for",
    "start": "1103760",
    "end": "1105440"
  },
  {
    "text": "embedded systems paragraphs is also a",
    "start": "1105440",
    "end": "1107520"
  },
  {
    "text": "great fit for the systems",
    "start": "1107520",
    "end": "1111039"
  },
  {
    "text": "let me move on the last section summary",
    "start": "1111200",
    "end": "1114240"
  },
  {
    "start": "1114000",
    "end": "1114000"
  },
  {
    "text": "here i'll talk about the future work",
    "start": "1114240",
    "end": "1116880"
  },
  {
    "text": "first of all",
    "start": "1116880",
    "end": "1117600"
  },
  {
    "text": "we need to make sr long time fully",
    "start": "1117600",
    "end": "1119679"
  },
  {
    "text": "compliant with australian time",
    "start": "1119679",
    "end": "1121280"
  },
  {
    "text": "specification",
    "start": "1121280",
    "end": "1122799"
  },
  {
    "text": "currently sr antenna does not support",
    "start": "1122799",
    "end": "1124880"
  },
  {
    "text": "some features such as c",
    "start": "1124880",
    "end": "1126320"
  },
  {
    "text": "groups or ci and things like that",
    "start": "1126320",
    "end": "1128480"
  },
  {
    "text": "because serrante is a research prototype",
    "start": "1128480",
    "end": "1131280"
  },
  {
    "text": "second we need to enable kubernetes to",
    "start": "1131280",
    "end": "1133679"
  },
  {
    "text": "use excel on time",
    "start": "1133679",
    "end": "1135360"
  },
  {
    "text": "lastly we plan to integrate slr on time",
    "start": "1135360",
    "end": "1138080"
  },
  {
    "text": "into cate containers because cadet",
    "start": "1138080",
    "end": "1139760"
  },
  {
    "text": "community",
    "start": "1139760",
    "end": "1140480"
  },
  {
    "text": "has already developed their container",
    "start": "1140480",
    "end": "1142640"
  },
  {
    "text": "runtime in rust",
    "start": "1142640",
    "end": "1145440"
  },
  {
    "start": "1145000",
    "end": "1145000"
  },
  {
    "text": "conclusion first rash language is a",
    "start": "1145440",
    "end": "1148320"
  },
  {
    "text": "great fit for america's system due to",
    "start": "1148320",
    "end": "1150160"
  },
  {
    "text": "the small manually fit plant and binary",
    "start": "1150160",
    "end": "1152240"
  },
  {
    "text": "size",
    "start": "1152240",
    "end": "1153039"
  },
  {
    "text": "in addition rust guarantees memory",
    "start": "1153039",
    "end": "1154960"
  },
  {
    "text": "safety without any overhead",
    "start": "1154960",
    "end": "1157039"
  },
  {
    "text": "so we developed rust-based container",
    "start": "1157039",
    "end": "1159039"
  },
  {
    "text": "on-time information embedded systems",
    "start": "1159039",
    "end": "1161280"
  },
  {
    "text": "our runtime has the first asylum",
    "start": "1161280",
    "end": "1163039"
  },
  {
    "text": "mechanism they're fine grand access",
    "start": "1163039",
    "end": "1164880"
  },
  {
    "text": "control for embedded systems",
    "start": "1164880",
    "end": "1168000"
  },
  {
    "text": "the evaluation shows that the runtime",
    "start": "1168000",
    "end": "1169919"
  },
  {
    "text": "launch is a container 7.4 times faster",
    "start": "1169919",
    "end": "1172400"
  },
  {
    "text": "than run c and the runtime",
    "start": "1172400",
    "end": "1173840"
  },
  {
    "text": "memory usage is equivalent to see basic",
    "start": "1173840",
    "end": "1176880"
  },
  {
    "text": "runtime",
    "start": "1176880",
    "end": "1179760"
  },
  {
    "text": "this is all for my presentation thank",
    "start": "1179760",
    "end": "1181919"
  },
  {
    "text": "you for listening",
    "start": "1181919",
    "end": "1185519"
  }
]