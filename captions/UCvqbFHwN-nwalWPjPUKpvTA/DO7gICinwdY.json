[
  {
    "start": "0",
    "end": "190000"
  },
  {
    "text": "hello everyone and welcome to our talk uh we are super excited here to walk you",
    "start": "1280",
    "end": "6799"
  },
  {
    "text": "through a concept of auto instrumentation of your metrics uh you collect your own cloud infrastructure",
    "start": "6799",
    "end": "12719"
  },
  {
    "text": "cloud native applications and beyond and you know we can distinguish",
    "start": "12719",
    "end": "18400"
  },
  {
    "text": "three main goals behind this talk and those were motivation why we are doing it first of",
    "start": "18400",
    "end": "24640"
  },
  {
    "text": "all you know recently we hear a lot about ebpf and and for a good reason because it's quite powerful so we want",
    "start": "24640",
    "end": "31760"
  },
  {
    "text": "to explain how ebpf actually works and how it can be leveraged in the cloud environments for monitoring purposes uh",
    "start": "31760",
    "end": "38800"
  },
  {
    "text": "with promote use since you know there might be high potential secondly technology is often you know um over",
    "start": "38800",
    "end": "46239"
  },
  {
    "text": "hyped so we need to be careful we want to look on with pragmatic eye on how this",
    "start": "46239",
    "end": "51680"
  },
  {
    "text": "concept is really feasible on modern clusters uh like communities and you know is it ready",
    "start": "51680",
    "end": "58640"
  },
  {
    "text": "last but not the least we would love to share some practical tips and give starting point for those",
    "start": "58640",
    "end": "64878"
  },
  {
    "text": "who really want to start using ebpf right now for observability purposes we hope it will get you you know started",
    "start": "64879",
    "end": "71760"
  },
  {
    "text": "faster and so we can get we can together make a space of ebpf uh",
    "start": "71760",
    "end": "78799"
  },
  {
    "text": "in clouds uh more nature especially for observability um purposes but before",
    "start": "78799",
    "end": "85280"
  },
  {
    "text": "that let's start with the short introduction i'm here with harshita hi this is",
    "start": "85280",
    "end": "90880"
  },
  {
    "text": "hersheda uh i'm a software development engineer at amazon and i was a ex-thanos",
    "start": "90880",
    "end": "96159"
  },
  {
    "text": "d-soc mendee and bi-tech was my mentor my name is bartek",
    "start": "96159",
    "end": "102560"
  },
  {
    "text": "full name is bartuami but you can call me bartek i'm prince principal software engineer at red hat i'm from use",
    "start": "102560",
    "end": "108479"
  },
  {
    "text": "maintainer i also maintain thanos project and i am cncf attack observability tech",
    "start": "108479",
    "end": "116079"
  },
  {
    "text": "lead and i also write a book with already called efficient go so as you can see we are not necessarily",
    "start": "116079",
    "end": "123040"
  },
  {
    "text": "ebpf experts although we spent quite quite much time debugging and programming in bbpf last week",
    "start": "123040",
    "end": "130720"
  },
  {
    "text": "yet technically we are observability experts um looking into low-level ebpf",
    "start": "130720",
    "end": "135760"
  },
  {
    "text": "programming as a way to improve observability in cloud-native ecosystem that's why we will be looking um on this",
    "start": "135760",
    "end": "142640"
  },
  {
    "text": "concept right now in this talk from usability perspective um especially on how realistic is this to be applied",
    "start": "142640",
    "end": "149200"
  },
  {
    "text": "today in the cloud native computing foundation um space",
    "start": "149200",
    "end": "155680"
  },
  {
    "text": "so the flow of the talk is following first of all we will explain red method what",
    "start": "155680",
    "end": "161920"
  },
  {
    "text": "exactly this is how it is useful we'll talk about you know practical instrumentation nowadays for",
    "start": "161920",
    "end": "169360"
  },
  {
    "text": "implementing great method and challenges into obtaining and maintaining those we will talk about ebpf and how it can",
    "start": "169360",
    "end": "178319"
  },
  {
    "text": "improve the situation we'll show a quick demo and talk about practical you know adoption concerns or",
    "start": "178319",
    "end": "186879"
  },
  {
    "text": "potential harshita do you want to tell us more",
    "start": "186879",
    "end": "192959"
  },
  {
    "start": "190000",
    "end": "328000"
  },
  {
    "text": "about red metals there are several methods of monitoring when it comes to managing workloads in",
    "start": "192959",
    "end": "199440"
  },
  {
    "text": "production on the cloud for example learning the health and status of the system to alert when",
    "start": "199440",
    "end": "205360"
  },
  {
    "text": "something is not expected to efficiently do that we need to look at the service from many perspectives",
    "start": "205360",
    "end": "211920"
  },
  {
    "text": "especially if it's a web service and there are methodologies and patterns people invented that help us to identify",
    "start": "211920",
    "end": "219200"
  },
  {
    "text": "what things can be good to monitor and which might be unnecessary so red method",
    "start": "219200",
    "end": "225040"
  },
  {
    "text": "is one example in the beginning there was something like golden signals that we could read",
    "start": "225040",
    "end": "230239"
  },
  {
    "text": "from google sorry book there is used method by brendan grick and fairly",
    "start": "230239",
    "end": "235599"
  },
  {
    "text": "recently red method was invented i think by tom wilkie so so what is the red",
    "start": "235599",
    "end": "241280"
  },
  {
    "text": "method it is essentially a method to monitor request based service",
    "start": "241280",
    "end": "248159"
  },
  {
    "text": "rate which is which is the number of requests per second your service is serving how much",
    "start": "248159",
    "end": "254720"
  },
  {
    "text": "traffic you have and errors number of fail requests per second",
    "start": "254720",
    "end": "261199"
  },
  {
    "text": "duration distributions of the amount of time each request takes how long things are actually performing example may be",
    "start": "261199",
    "end": "268400"
  },
  {
    "text": "nice traffic not to not too much and no errors but requests are taking too long",
    "start": "268400",
    "end": "274880"
  },
  {
    "text": "so red methods indeed pretty amazing we can build automation around it reuse it",
    "start": "274880",
    "end": "281759"
  },
  {
    "text": "for example we can build dashboards to show the common views of the system held for one service",
    "start": "281759",
    "end": "288160"
  },
  {
    "text": "we can build slo views alerts and recording rules all the prometheus guris",
    "start": "288160",
    "end": "295199"
  },
  {
    "text": "but if any other services using red method we can easily reuse save resources so",
    "start": "295199",
    "end": "302320"
  },
  {
    "text": "dashboards alerts recording and so on no need for magic templating or",
    "start": "302320",
    "end": "307440"
  },
  {
    "text": "reproducing things from scratch for every application all developers need to think is how do i",
    "start": "307440",
    "end": "314560"
  },
  {
    "text": "satisfy those signals described by red method and style devops tooling will be",
    "start": "314560",
    "end": "319840"
  },
  {
    "text": "compatible with it but how we how can we instrument application in order to satisfy red",
    "start": "319840",
    "end": "325360"
  },
  {
    "text": "method let's take the simplest example ever",
    "start": "325360",
    "end": "332240"
  },
  {
    "start": "328000",
    "end": "465000"
  },
  {
    "text": "we have prometheus server it is a web server that serves some http",
    "start": "332240",
    "end": "337520"
  },
  {
    "text": "requests for example it responds to promptgear queries but it also collects metrics and",
    "start": "337520",
    "end": "343600"
  },
  {
    "text": "allows monitoring so let's use prometheus to collect metrics about itself to show how we can monitor",
    "start": "343600",
    "end": "349440"
  },
  {
    "text": "prometheus in red method fashion we could then reproduce the same pattern",
    "start": "349440",
    "end": "355039"
  },
  {
    "text": "for any other application then prompt you let's go [Music]",
    "start": "355039",
    "end": "361840"
  },
  {
    "text": "as we mentioned prometheus collects the metrics but it is also a server so it exposes some",
    "start": "361840",
    "end": "369039"
  },
  {
    "text": "metrics about its web serving one of the most important metric about it is",
    "start": "369039",
    "end": "374319"
  },
  {
    "text": "prometheus http request total which is a counter of all requests by method and",
    "start": "374319",
    "end": "380639"
  },
  {
    "text": "status code so how it was done well in fact we could see this metrics",
    "start": "380639",
    "end": "387199"
  },
  {
    "text": "so instrumentation was implemented by han and promise code and in this graph",
    "start": "387199",
    "end": "392639"
  },
  {
    "text": "we can see that it overall gives us the rate of request served by prometheus so",
    "start": "392639",
    "end": "398960"
  },
  {
    "text": "it satisfies the rate item in our red method great",
    "start": "398960",
    "end": "404240"
  },
  {
    "text": "but that's not all of it it also satisfies the red error error site as it has a response code",
    "start": "404240",
    "end": "411919"
  },
  {
    "text": "metrics label so we know if this request was successful or if it failed then we",
    "start": "411919",
    "end": "418319"
  },
  {
    "text": "calculate the rate of errors percentage of those and satisfy error element on",
    "start": "418319",
    "end": "424000"
  },
  {
    "text": "red method what about duration we can look into the histogram",
    "start": "424000",
    "end": "430240"
  },
  {
    "text": "prometheus exposes promises http request duration seconds it allows us to know",
    "start": "430240",
    "end": "436400"
  },
  {
    "text": "the latencies of those requests and again this is the last item on our red method",
    "start": "436400",
    "end": "442319"
  },
  {
    "text": "so with just two metrics we satisfy all of items on red method we can kind of sure",
    "start": "442319",
    "end": "449120"
  },
  {
    "text": "that we have a basic and essential monitoring enable for prometheus we",
    "start": "449120",
    "end": "455280"
  },
  {
    "text": "measure and collect enough metrics to use red method dashboards alerts recording rules and so on",
    "start": "455280",
    "end": "462080"
  },
  {
    "text": "so that's the red method let's now talk about how we can",
    "start": "462080",
    "end": "468479"
  },
  {
    "text": "implement the red method i mentioned that the way prometheus implements red method is kind of handcrafted",
    "start": "468479",
    "end": "475840"
  },
  {
    "text": "which means that atheist maintainers like biotech wrote the code from scratch",
    "start": "475840",
    "end": "481599"
  },
  {
    "text": "literally imported the client of prometheus and go defined and registered required metrics and incremented the",
    "start": "481599",
    "end": "487280"
  },
  {
    "text": "counter everywhere web handler returned the response this works great but this has its own",
    "start": "487280",
    "end": "493840"
  },
  {
    "text": "limitations so there are a few challenges firstly we have to implement it",
    "start": "493840",
    "end": "499680"
  },
  {
    "text": "but what if we don't have access to the goal of the application maybe it's closed source maybe you don't",
    "start": "499680",
    "end": "505759"
  },
  {
    "text": "have enough knowledge comparation tooling or dependencies since you're implementing from scratch",
    "start": "505759",
    "end": "512560"
  },
  {
    "text": "you can make mistakes and it's harder to maintain there will be inconsistencies when one",
    "start": "512560",
    "end": "518560"
  },
  {
    "text": "team crashed their instrumentation they might have different metric labels but",
    "start": "518560",
    "end": "523760"
  },
  {
    "text": "different behavior different listener position from the other hand for the same metrics bringing in inconsistencies",
    "start": "523760",
    "end": "531839"
  },
  {
    "text": "yes some of it can be fixed with templates but it is not so easy",
    "start": "531839",
    "end": "538080"
  },
  {
    "text": "so that's why handcrafted method is not the best it's it's not what we would recommend",
    "start": "538080",
    "end": "545040"
  },
  {
    "text": "the other thing you can do is to use a well-known library like some gi pc or",
    "start": "546240",
    "end": "551600"
  },
  {
    "text": "http middlewares for example biotic is a maintainer of thanos and i was a thanos mentee and in thanos we",
    "start": "551600",
    "end": "558399"
  },
  {
    "text": "used certain x hdb package that we wrote which is a library anyone can use",
    "start": "558399",
    "end": "565200"
  },
  {
    "text": "it can be hooked into any http server that will immediately",
    "start": "565200",
    "end": "570320"
  },
  {
    "text": "instrument all the roots and http handlers the same can be done in grpc using go",
    "start": "570320",
    "end": "576480"
  },
  {
    "text": "grpc middleware project that biotech maintains similar to http middlewares for focus on",
    "start": "576480",
    "end": "582959"
  },
  {
    "text": "gi pc in form of interceptors thanks to those reusable libraries as",
    "start": "582959",
    "end": "589519"
  },
  {
    "text": "long as those are red method friendly well tested and used they are much better choices thanks",
    "start": "589519",
    "end": "597040"
  },
  {
    "text": "to consistency if you use the same library in all your applications",
    "start": "597040",
    "end": "602560"
  },
  {
    "text": "those helps with maintainability and avoiding mistakes but still we have problems for example",
    "start": "602560",
    "end": "609760"
  },
  {
    "text": "we still might not have access to the code applications can be written in many languages so you would consistency",
    "start": "609760",
    "end": "618240"
  },
  {
    "text": "across libraries in different languages and those middleware and libraries might not",
    "start": "618240",
    "end": "625040"
  },
  {
    "text": "be existing in all languages we know it works and go but maybe not for other languages like java ruby python etc",
    "start": "625040",
    "end": "634560"
  },
  {
    "start": "634000",
    "end": "725000"
  },
  {
    "text": "last but not least if people do instrument their example hjp applications using something like a",
    "start": "634800",
    "end": "641760"
  },
  {
    "text": "service mesh for example istio link3d or maybe just proxies where",
    "start": "641760",
    "end": "648720"
  },
  {
    "text": "you don't have to add a full service mesh just this sidecar proxy to",
    "start": "648720",
    "end": "654240"
  },
  {
    "text": "application like nginx or envoy those proxies are part of every http request so these can collaborate metric",
    "start": "654240",
    "end": "662240"
  },
  {
    "text": "read method friendly statistics about the pro about the traffic what are the pros",
    "start": "662240",
    "end": "668560"
  },
  {
    "text": "those are tested and reliable you don't need to write your own stuff so you can",
    "start": "668560",
    "end": "673920"
  },
  {
    "text": "avoid making mistakes the there is solid consistency because",
    "start": "673920",
    "end": "679120"
  },
  {
    "text": "every application has the same side current this service mesh and it will have the same metrics but there are",
    "start": "679120",
    "end": "686000"
  },
  {
    "text": "problems is much more complex to operate such system because service mesh is just",
    "start": "686000",
    "end": "692720"
  },
  {
    "text": "another processes and other side curtains and containers there are a lot of things that can go wrong it's hard to",
    "start": "692720",
    "end": "699760"
  },
  {
    "text": "operate on scale for sam application there is also introducing significant latencies making",
    "start": "699760",
    "end": "706800"
  },
  {
    "text": "it so it won't work for everybody there is some extra cost it uses",
    "start": "706800",
    "end": "712560"
  },
  {
    "text": "extra compute power like cpu or so this is this can translate to real money on",
    "start": "712560",
    "end": "718639"
  },
  {
    "text": "scale so at the end this might not be an ideal solution",
    "start": "718639",
    "end": "724480"
  },
  {
    "text": "great thank you harshita so as hashtag explained um we have quite",
    "start": "724480",
    "end": "729680"
  },
  {
    "text": "many choices when it comes to collecting promotes metrics for red method uh monitoring of our http requests",
    "start": "729680",
    "end": "737200"
  },
  {
    "text": "but they all have had its own traders pros and cons and you know none of those",
    "start": "737200",
    "end": "742880"
  },
  {
    "text": "can be described as automatic right so let's explore if this ebpa thing",
    "start": "742880",
    "end": "749839"
  },
  {
    "text": "can get us there but exactly where like what could what would be the dream world",
    "start": "749839",
    "end": "755040"
  },
  {
    "text": "that we can call auto instrumentation of our metrics",
    "start": "755040",
    "end": "760160"
  },
  {
    "start": "759000",
    "end": "810000"
  },
  {
    "text": "so to us auto instrumentation is when i can create a new application from scratch in",
    "start": "760160",
    "end": "766639"
  },
  {
    "text": "any programming language i want or i can take some application from somewhere and",
    "start": "766639",
    "end": "772240"
  },
  {
    "text": "when i put that into the container deploy on my communities and on many clusters and point my",
    "start": "772240",
    "end": "778720"
  },
  {
    "text": "point my promote servers around those applications i will have a consistent metrics about what http traffic is",
    "start": "778720",
    "end": "785839"
  },
  {
    "text": "happening so i can use red method to measure it consistently using my dashboards alerts",
    "start": "785839",
    "end": "792800"
  },
  {
    "text": "i can create my run books consistently slos and all of those goodies that we care about all kind of",
    "start": "792800",
    "end": "800320"
  },
  {
    "text": "consistency consistently that's beautiful right that's that's amazing um let's see if ebpf can get us",
    "start": "800320",
    "end": "807920"
  },
  {
    "text": "there can help us here so what dbpf is first of all nowadays it",
    "start": "807920",
    "end": "814160"
  },
  {
    "start": "810000",
    "end": "850000"
  },
  {
    "text": "is the whole ecosystem actually with its own foundation called non-surprisingly ebpa foundation",
    "start": "814160",
    "end": "821360"
  },
  {
    "text": "this foundation is aimed to help ebpf projects ebbf-related projects to to try",
    "start": "821360",
    "end": "826720"
  },
  {
    "text": "to be maintained but also ensures that the core ebpf is maintained",
    "start": "826720",
    "end": "832000"
  },
  {
    "text": "and you know it's still open source because you never know um big players are in this foundation so",
    "start": "832000",
    "end": "838399"
  },
  {
    "text": "it looks pretty serious um there is google facebook microsoft clouther and",
    "start": "838399",
    "end": "843440"
  },
  {
    "text": "more so um it it looks very uh very ambitious so what is the ebpf car",
    "start": "843440",
    "end": "850560"
  },
  {
    "start": "850000",
    "end": "936000"
  },
  {
    "text": "the core is essentially a technology that allows uh allows this hooking into",
    "start": "850560",
    "end": "856800"
  },
  {
    "text": "kernel functions for example syscalls and by executing small save mall snippet",
    "start": "856800",
    "end": "863040"
  },
  {
    "text": "of code every time this function is invoked right and everything in the kernel space so",
    "start": "863040",
    "end": "870720"
  },
  {
    "text": "you know very close to the kernel and um quickly and safely this is kind of the",
    "start": "870720",
    "end": "877120"
  },
  {
    "text": "the underlying technology of evpf the feature was itself added in kernel 3.15",
    "start": "877120",
    "end": "883199"
  },
  {
    "text": "which is like quite old kernels so nowadays we have like five something um so the technology is quite mature",
    "start": "883199",
    "end": "890639"
  },
  {
    "text": "so you can also store some data through ebpf",
    "start": "890639",
    "end": "896079"
  },
  {
    "text": "program it can store insert in in a in stack of course in here but also in ebpf",
    "start": "896079",
    "end": "901680"
  },
  {
    "text": "map that can be accessed by the user space so some application that is loading this and managing this program",
    "start": "901680",
    "end": "908800"
  },
  {
    "text": "and in our diagram it is this go library that is doing this for example ebpf program can gather how many pcp packets",
    "start": "908800",
    "end": "916399"
  },
  {
    "text": "your linux socket process for example and and and and then a user space",
    "start": "916399",
    "end": "921839"
  },
  {
    "text": "program can access that information through by looking on this ebpf map so",
    "start": "921839",
    "end": "927920"
  },
  {
    "text": "this goliath library will would know about that so how we can practically practically use such data in prometheus",
    "start": "927920",
    "end": "935040"
  },
  {
    "text": "with prometheus it's quite simple in theory right we could develop an exporter which by the",
    "start": "935040",
    "end": "940639"
  },
  {
    "start": "936000",
    "end": "988000"
  },
  {
    "text": "way is already developed by cloudflare which is super amazing that allows us to inject our ebpf program",
    "start": "940639",
    "end": "947839"
  },
  {
    "text": "and do certain mapping between ebpf map data and the prometeus metrics with what",
    "start": "947839",
    "end": "956000"
  },
  {
    "text": "labels we want and and then this ebpf exporter will periodically check ebp map or actually",
    "start": "956000",
    "end": "963279"
  },
  {
    "text": "on every scrape to expose them the the data in the",
    "start": "963279",
    "end": "968639"
  },
  {
    "text": "metric form in a time series form so then it's as easy as pointing",
    "start": "968639",
    "end": "973759"
  },
  {
    "text": "prometheus to this exporter so kind of scrape it every whatever interval you",
    "start": "973759",
    "end": "979440"
  },
  {
    "text": "want and collect this data periodically and expose it for the prom ql and further",
    "start": "979440",
    "end": "984880"
  },
  {
    "text": "integrations sounds very easy right and indeed it is actually matching you",
    "start": "984880",
    "end": "991040"
  },
  {
    "start": "988000",
    "end": "1060000"
  },
  {
    "text": "know um lots of items from uh from elements from our goal",
    "start": "991040",
    "end": "996639"
  },
  {
    "text": "you can actually you know implement one ebpf application that will hook into places",
    "start": "997199",
    "end": "1003199"
  },
  {
    "text": "you want in order to gather those hdp requests statistics",
    "start": "1003199",
    "end": "1009120"
  },
  {
    "text": "and then if you have that it will actually whatever application you will",
    "start": "1009120",
    "end": "1014880"
  },
  {
    "text": "you will write in whatever language in whatever um you know technology as as long as it",
    "start": "1014880",
    "end": "1021680"
  },
  {
    "text": "uses like normal http requests through kernel you know we can",
    "start": "1021680",
    "end": "1028000"
  },
  {
    "text": "we can measure that in a consistent way so there's no custom code involved i don't change anything in the application",
    "start": "1028000",
    "end": "1034558"
  },
  {
    "text": "i don't add any sidecar so there's no additional cost no significant additional cost or",
    "start": "1034559",
    "end": "1041280"
  },
  {
    "text": "operational burden and there is consistency because whatever application i use you know this",
    "start": "1041280",
    "end": "1047360"
  },
  {
    "text": "ebpf exporter will provide a metric with the exactly the same name and behavior so it's kind of powerful",
    "start": "1047360",
    "end": "1053679"
  },
  {
    "text": "but you know as everything you know this obviously has some trade-offs like everything has trade-offs",
    "start": "1053679",
    "end": "1060000"
  },
  {
    "start": "1060000",
    "end": "1145000"
  },
  {
    "text": "and there are some catches this code is from our demo ebpf program we wrote and you",
    "start": "1060000",
    "end": "1067039"
  },
  {
    "text": "can see it's written in the c and it's kind of worse than that because it's limited see",
    "start": "1067039",
    "end": "1072799"
  },
  {
    "text": "so you cannot import standard libraries you can you have you can only use few dedicated helpers",
    "start": "1072799",
    "end": "1079440"
  },
  {
    "text": "and that really depends on the kernel version you are using you have only 55 12",
    "start": "1079440",
    "end": "1085520"
  },
  {
    "text": "bytes for your stack so you cannot allocate lots of a huge variable to to store i don't know",
    "start": "1085520",
    "end": "1092160"
  },
  {
    "text": "some some buffer or whatever um and like that even expects you to understand what is",
    "start": "1092160",
    "end": "1099200"
  },
  {
    "text": "the stack which is not normal knowledge of devop engine develops engineer or",
    "start": "1099200",
    "end": "1104400"
  },
  {
    "text": "sres really not required so that's already a challenge um and you can still kill performance of your kernel so of",
    "start": "1104400",
    "end": "1111520"
  },
  {
    "text": "the coal machine because you can't create deadlock still you can have major slowdowns uh",
    "start": "1111520",
    "end": "1119039"
  },
  {
    "text": "so so it is serious and also certain errors are um",
    "start": "1119039",
    "end": "1124559"
  },
  {
    "text": "we know um some you cannot hook into certain functions even though they are in the kernel code",
    "start": "1124559",
    "end": "1130320"
  },
  {
    "text": "because they are in line for example so uh which is kind of a compiler optimization so there are lots of um",
    "start": "1130320",
    "end": "1137200"
  },
  {
    "text": "the the the development in in this uh is is quite brittle i would say and you",
    "start": "1137200",
    "end": "1142880"
  },
  {
    "text": "know that there is more like um the error handling is is just painful",
    "start": "1142880",
    "end": "1148480"
  },
  {
    "start": "1145000",
    "end": "1187000"
  },
  {
    "text": "like and i guess this is just c uh so lots of mistling errors like for example this is",
    "start": "1148480",
    "end": "1155039"
  },
  {
    "text": "unexpected type name something but actually this function this macro bpf per cpu is just not",
    "start": "1155039",
    "end": "1162559"
  },
  {
    "text": "existing why it doesn't tell me that this is just not existing i was you know super confused and also like this is",
    "start": "1162559",
    "end": "1168880"
  },
  {
    "text": "pointing to line 25 but indeed it was it wasn't light quantified it was some some other",
    "start": "1168880",
    "end": "1175360"
  },
  {
    "text": "you know line because everything is shifted because of those micro so you can rely on that and like it's quite",
    "start": "1175360",
    "end": "1180720"
  },
  {
    "text": "painful in comparison to you know beautiful programming in go in python so you need to use to that",
    "start": "1180720",
    "end": "1186080"
  },
  {
    "text": "um second catch second major catch is that you have to know linux very well you",
    "start": "1186080",
    "end": "1192080"
  },
  {
    "start": "1187000",
    "end": "1259000"
  },
  {
    "text": "need to be able to understand the tools and helpers which are available through this bcc so bpf compiler collection you",
    "start": "1192080",
    "end": "1198480"
  },
  {
    "text": "need to understand what is available what's not in your kernel in a specific version of the corner and your operating",
    "start": "1198480",
    "end": "1204559"
  },
  {
    "text": "systems and how to exactly check the signatures of those functions and cisco's because",
    "start": "1204559",
    "end": "1210400"
  },
  {
    "text": "you know you need to know those signatures in order to use sometimes to even hook into it and then",
    "start": "1210400",
    "end": "1216880"
  },
  {
    "text": "use those arguments of those functions for your tracing or or um",
    "start": "1216880",
    "end": "1222080"
  },
  {
    "text": "or monitoring right so it's kind of kind of hard and you know there's also this also mean",
    "start": "1222080",
    "end": "1229440"
  },
  {
    "text": "that uh this this kind of being specific to the kernel version is that really none of the tutorials i i saw work for",
    "start": "1229440",
    "end": "1236480"
  },
  {
    "text": "me for example because i have like pretty new 5.11 kernel version so i had to dig everything from scratch",
    "start": "1236480",
    "end": "1243120"
  },
  {
    "text": "my function names were totally different and it just was well i have to build things from from the bottom up",
    "start": "1243120",
    "end": "1249200"
  },
  {
    "text": "so expect your code to be not portable across operating systems and kernel versions um so there's a lot of effort",
    "start": "1249200",
    "end": "1255760"
  },
  {
    "text": "to to maintain such programs on the scale right um like imagine i don't know like as an",
    "start": "1255760",
    "end": "1262159"
  },
  {
    "start": "1259000",
    "end": "1292000"
  },
  {
    "text": "example i couldn't use key probes uh which is essentially a certain way into",
    "start": "1262159",
    "end": "1267280"
  },
  {
    "text": "hooking uh creating a hook or into some function on in the kernel on the accept",
    "start": "1267280",
    "end": "1272960"
  },
  {
    "text": "for cisco uh which is what typically you use to kind of trace tcp connections i had to use trace",
    "start": "1272960",
    "end": "1280559"
  },
  {
    "text": "point which is like a different mechanism it was kind of fine like at the end i could use that but it just",
    "start": "1280559",
    "end": "1286720"
  },
  {
    "text": "took me four hours to figure it out so great it is a bit hard um so let's go to demo like what what",
    "start": "1286720",
    "end": "1294559"
  },
  {
    "start": "1292000",
    "end": "1331000"
  },
  {
    "text": "what we want to show what's the architecture so in this demo you will see one way of getting two of the redmi",
    "start": "1294559",
    "end": "1300720"
  },
  {
    "text": "method monitoring signals using ebpf rate and errors and we have cloud for ebpf exporter",
    "start": "1300720",
    "end": "1307360"
  },
  {
    "text": "running everything in the containers because we are cloud native and we have a promotion server as",
    "start": "1307360",
    "end": "1313600"
  },
  {
    "text": "harshita mentioned we collect use this prompt used to collect metric but also we want to use this rec method we want",
    "start": "1313600",
    "end": "1320400"
  },
  {
    "text": "to monitor from use itself so we want to compare the handcrafted metric with this ebpf",
    "start": "1320400",
    "end": "1327360"
  },
  {
    "text": "based metric and the critical part of this demo is you know the actual ebpf program so",
    "start": "1327360",
    "end": "1334080"
  },
  {
    "text": "there are kind of three ways i found how we can get the http uh request kind of metric",
    "start": "1334080",
    "end": "1340480"
  },
  {
    "text": "statistics you could trace your program right so there is something like you probes your",
    "start": "1340480",
    "end": "1345840"
  },
  {
    "text": "probes which allows you to essentially hook into function which is not in the",
    "start": "1345840",
    "end": "1351840"
  },
  {
    "text": "kernel but actually in your application so it's kind of similar how you do that in",
    "start": "1351840",
    "end": "1357200"
  },
  {
    "text": "debugger right um and um this is great you we know that in golang we use http",
    "start": "1357200",
    "end": "1363679"
  },
  {
    "text": "uh slash net http packages and there's a certain function that is invoked when we have a",
    "start": "1363679",
    "end": "1370720"
  },
  {
    "text": "request response and we could hook into that and every time we hit this into our code uh our bbf program will be involved",
    "start": "1370720",
    "end": "1377840"
  },
  {
    "text": "so we can make statistics from it but as you can imagine this is really",
    "start": "1377840",
    "end": "1383280"
  },
  {
    "text": "code dependent because suddenly the library changed the semantic of the version changes every time code changes",
    "start": "1383280",
    "end": "1388640"
  },
  {
    "text": "we need to update our ebpf program not fun like we're kind of breaking our goal here and also it doesn't work with java",
    "start": "1388640",
    "end": "1395600"
  },
  {
    "text": "applications for example because all of those are running in jvm which is a virtual machine of java so everything is",
    "start": "1395600",
    "end": "1402640"
  },
  {
    "text": "compiled in time it's just hard um second thing i've seen is",
    "start": "1402640",
    "end": "1408480"
  },
  {
    "text": "you can attach your program to the socket and this is useful for filtering packets or filtering http request",
    "start": "1408480",
    "end": "1416320"
  },
  {
    "text": "unfortunately i couldn't use that but maybe useful stuff and the last item i i chosen to do",
    "start": "1416320",
    "end": "1423679"
  },
  {
    "text": "is kind of a neat neat way into hooking into important",
    "start": "1423679",
    "end": "1429679"
  },
  {
    "text": "accept four which is uh required to um you can use other stuff but like this",
    "start": "1429679",
    "end": "1435360"
  },
  {
    "text": "is typically used what when you want to obtain a tcp connection and the file description to the",
    "start": "1435360",
    "end": "1442080"
  },
  {
    "text": "descriptor to the connection and then you can read from that connection or write to that connection so we do that",
    "start": "1442080",
    "end": "1447520"
  },
  {
    "text": "as an in the server side we read requests and the right response right and then we close this connection so if",
    "start": "1447520",
    "end": "1454000"
  },
  {
    "text": "we hook we have kind of visibility into what's happening the the tricky part is that you need to",
    "start": "1454000",
    "end": "1460640"
  },
  {
    "text": "you know read and write it's used for any i o so any file reading writing so",
    "start": "1460640",
    "end": "1465679"
  },
  {
    "text": "we need to be able to really filter out the tcp connections only and ideally only http request and ideally only from",
    "start": "1465679",
    "end": "1472799"
  },
  {
    "text": "our container so this is a lot of work you will see that and i have no idea how to do it with the tls",
    "start": "1472799",
    "end": "1479279"
  },
  {
    "text": "i hope yeah someone will show me at some point so let's go um so in order to show that",
    "start": "1479279",
    "end": "1488400"
  },
  {
    "text": "i we wrote some kind of golang test which is kind of end-to-end test using using go test",
    "start": "1488400",
    "end": "1495200"
  },
  {
    "start": "1490000",
    "end": "1627000"
  },
  {
    "text": "library and um so we what we have we have here a",
    "start": "1495200",
    "end": "1502240"
  },
  {
    "text": "docker environment where we start prometheus and we start i obtain some",
    "start": "1502240",
    "end": "1507279"
  },
  {
    "text": "kind of hacky in hacky way a prometus process id because this is",
    "start": "1507279",
    "end": "1512880"
  },
  {
    "text": "how i will i i will filter all those requests in ebpa program and i can start abpf exporter in the container as well",
    "start": "1512880",
    "end": "1520240"
  },
  {
    "text": "so you can see it is a kind of privileged container here that um",
    "start": "1520240",
    "end": "1525919"
  },
  {
    "text": "that i have to build my own ebpf kind of exporter version i have to patch it a little bit uh but you need to provide a",
    "start": "1525919",
    "end": "1531919"
  },
  {
    "text": "lots of stuff right um you need to provide headers you need to provide",
    "start": "1531919",
    "end": "1537039"
  },
  {
    "text": "access to the to the prods resources and and some debug",
    "start": "1537039",
    "end": "1542559"
  },
  {
    "text": "uh trace point um kind of file path but you overall start the you know kind of containerized",
    "start": "1542559",
    "end": "1549200"
  },
  {
    "text": "environment exporter in the containers environment in the privilege manner so then i have to configure exporter and",
    "start": "1549200",
    "end": "1556559"
  },
  {
    "text": "x ebay exporter has a nice configuration file i kind of have it typed here but at the end it's the yaml",
    "start": "1556559",
    "end": "1563039"
  },
  {
    "text": "i specify a program i specify metrics i choose to have started",
    "start": "1563039",
    "end": "1568480"
  },
  {
    "text": "connection closed connection and overall requests and i tell which bbpf map i use kind of",
    "start": "1568480",
    "end": "1575440"
  },
  {
    "text": "it's called table here um and then i choose where i want to hook my program",
    "start": "1575440",
    "end": "1580799"
  },
  {
    "text": "so i have four functions i want to hook into when when the when we enter the accept for function",
    "start": "1580799",
    "end": "1588640"
  },
  {
    "text": "six call actually when i exit that and when i enter right and i when i enter close",
    "start": "1588640",
    "end": "1594640"
  },
  {
    "text": "and then i parse um this program and i kind of put it here in this yamo but i also substitute",
    "start": "1594640",
    "end": "1601360"
  },
  {
    "text": "some pit because i want to also filter by certain process id all right",
    "start": "1601360",
    "end": "1607840"
  },
  {
    "text": "so we do that and then we just start everything make sure prometus knows about the cppf exporters and",
    "start": "1607840",
    "end": "1615039"
  },
  {
    "text": "let's start it up and we open some kind of browsers that's it so when this starts",
    "start": "1615039",
    "end": "1620799"
  },
  {
    "text": "um both ebp of exporter and promotes should be running and it should open our browser",
    "start": "1620799",
    "end": "1626720"
  },
  {
    "text": "and we should see after some time that uh we obtain some metrics so the",
    "start": "1626720",
    "end": "1634159"
  },
  {
    "start": "1627000",
    "end": "1869000"
  },
  {
    "text": "first metric is what hashtag shown it's like a prompt use metric for http requests",
    "start": "1634159",
    "end": "1640640"
  },
  {
    "text": "we have apparently like around 30 of those and this is exactly the same well it's",
    "start": "1640640",
    "end": "1647440"
  },
  {
    "text": "kind of the same we aim for this to be the same information http request but from ebps",
    "start": "1647440",
    "end": "1653360"
  },
  {
    "text": "directly we have like similar value um around 30.",
    "start": "1653360",
    "end": "1658880"
  },
  {
    "text": "um there might be like some different delays on on where we check this data so",
    "start": "1658880",
    "end": "1664080"
  },
  {
    "text": "so that's why maybe the numbers are not exactly the same or maybe i have back in my bp program but um in in ideal world",
    "start": "1664080",
    "end": "1672320"
  },
  {
    "text": "those you provide the same you get the same information from from both methods just ebpf just more it has its own benefits",
    "start": "1672320",
    "end": "1680399"
  },
  {
    "text": "as we mentioned and we also have like you you can see that process started nine",
    "start": "1680399",
    "end": "1686159"
  },
  {
    "text": "connections and didn't close any of those yet so um you know you have some additional information so let's test it",
    "start": "1686159",
    "end": "1692399"
  },
  {
    "text": "out so for example let's um let's go to my code and when i",
    "start": "1692399",
    "end": "1697520"
  },
  {
    "text": "kill this i should open a browser with like a wrong query so i do an api call",
    "start": "1697520",
    "end": "1703520"
  },
  {
    "text": "that was bad so it should return with 400 status code so we can see that uh",
    "start": "1703520",
    "end": "1709919"
  },
  {
    "text": "prometheus handcrafted metric it you know found it really nicely yes we",
    "start": "1709919",
    "end": "1715279"
  },
  {
    "text": "have just one metric which was which was uh which was found uh as a 400 and then",
    "start": "1715279",
    "end": "1722080"
  },
  {
    "text": "um let's see if vba program found it yep it found that there was a one",
    "start": "1722080",
    "end": "1727679"
  },
  {
    "text": "bat request happening in the system but there is one more thing which i want to show so",
    "start": "1727679",
    "end": "1734000"
  },
  {
    "text": "when we go to the code and click to another step and we'd make a different call which is a wrong uh",
    "start": "1734000",
    "end": "1741600"
  },
  {
    "text": "essentially not found error but you will see something interesting where",
    "start": "1741600",
    "end": "1746640"
  },
  {
    "text": "handcrafted metric doesn't show that we have only like one error however ebpf",
    "start": "1746640",
    "end": "1752799"
  },
  {
    "text": "metric shows that you can see there is increase and there are two um",
    "start": "1752799",
    "end": "1758559"
  },
  {
    "text": "two errors with 400 code so this is pretty neat because what is happening is",
    "start": "1758559",
    "end": "1763919"
  },
  {
    "text": "that we in prometheus and i maintain prometheus we probably forgot to",
    "start": "1763919",
    "end": "1768960"
  },
  {
    "text": "or maybe yeah we didn't plan to put put this metric uh instrumentation",
    "start": "1768960",
    "end": "1775279"
  },
  {
    "text": "for all the paths in prometheus server so we missed this path of kind of root and",
    "start": "1775279",
    "end": "1782799"
  },
  {
    "text": "some broken um broken path and we didn't instrument we wouldn't know about that if someone",
    "start": "1782799",
    "end": "1788080"
  },
  {
    "text": "would be spamming there and maybe kill our service because of ddos of those requests right we would miss that",
    "start": "1788080",
    "end": "1793200"
  },
  {
    "text": "because our handcrafted implementation was maybe is missing something but ebpa",
    "start": "1793200",
    "end": "1798320"
  },
  {
    "text": "program knows about all calls so immediately we know more than than just handcrafted metric right we know that",
    "start": "1798320",
    "end": "1805679"
  },
  {
    "text": "there are some and if you make more of those you know and you know maybe someone spamming in",
    "start": "1805679",
    "end": "1811600"
  },
  {
    "text": "this request we'll know about that from the ebpf implementation uh right",
    "start": "1811600",
    "end": "1818080"
  },
  {
    "text": "so this is the whole demo um i can also show you the code of",
    "start": "1818080",
    "end": "1823200"
  },
  {
    "text": "um ebpf program itself but you know um it takes some time to explain all of this um and we can do it at some point",
    "start": "1823200",
    "end": "1830720"
  },
  {
    "text": "um but it and maybe i will provide like a blog post about that but essentially yeah",
    "start": "1830720",
    "end": "1836720"
  },
  {
    "text": "lots of lots of work were in there and kind of the most tricky part is to how to ensure we",
    "start": "1836720",
    "end": "1841760"
  },
  {
    "text": "measure um really http requests only and only the rights that gives",
    "start": "1841760",
    "end": "1847919"
  },
  {
    "text": "because you know when you write response you you do lots of write cisco's potentially not only one because you",
    "start": "1847919",
    "end": "1853919"
  },
  {
    "text": "maybe write like some response and and and not only http headers right so so we",
    "start": "1853919",
    "end": "1860080"
  },
  {
    "text": "want to also measure only that so there's a lot of lots of complexity but once once you do that properly it is",
    "start": "1860080",
    "end": "1866720"
  },
  {
    "text": "rewarding right so just to finish um we have",
    "start": "1866720",
    "end": "1872880"
  },
  {
    "start": "1869000",
    "end": "1961000"
  },
  {
    "text": "kind of um you you know you can do it but let's understand this feasibility",
    "start": "1872880",
    "end": "1877919"
  },
  {
    "text": "right um the technology is major but we see um that it need it requires some kind of",
    "start": "1877919",
    "end": "1884559"
  },
  {
    "text": "low level programming skills you need to know about kernel you need to be aware that there is literally zero portability",
    "start": "1884559",
    "end": "1891440"
  },
  {
    "text": "here uh you need to be very aware of your kernel versions so you need to deploy for example when you deploy that",
    "start": "1891440",
    "end": "1897200"
  },
  {
    "text": "into kubernetes you need to probably be in not probably you have to be in control of your current version of all of the",
    "start": "1897200",
    "end": "1903360"
  },
  {
    "text": "nodes and operating system which usually you have so that's possible um you need to fix your containerization",
    "start": "1903360",
    "end": "1909440"
  },
  {
    "text": "access so it has to be privileged container and so on still doable things",
    "start": "1909440",
    "end": "1914640"
  },
  {
    "text": "and uh and mapping challenges so all ebpa programs usually have is like say group c group id",
    "start": "1914640",
    "end": "1921440"
  },
  {
    "text": "which is like number of e-node and then thread process id and there are",
    "start": "1921440",
    "end": "1927360"
  },
  {
    "text": "ways to map it i have to create a patch on ebp exporter to decode that but you",
    "start": "1927360",
    "end": "1932880"
  },
  {
    "text": "know i think with some work it is totally doable so um",
    "start": "1932880",
    "end": "1938320"
  },
  {
    "text": "thank you i think i hope you learned something i hope it will get you started if you want to go and and and try to",
    "start": "1938320",
    "end": "1946320"
  },
  {
    "text": "make something production ready with ebpf for observability needs and check our demo and sources in this repo",
    "start": "1946320",
    "end": "1954080"
  },
  {
    "text": "and follow us on twitter and ask any questions if you want",
    "start": "1954080",
    "end": "1959440"
  },
  {
    "text": "thank you",
    "start": "1959440",
    "end": "1962679"
  }
]