[
  {
    "start": "0",
    "end": "135000"
  },
  {
    "text": "okay good afternoon everyone great to meet you my name is adam i have with me liam we're from touchrate and we're super",
    "start": "719",
    "end": "6799"
  },
  {
    "text": "excited to be able to talk on this topic of how we can turn our cloud native applications inside out",
    "start": "6799",
    "end": "12480"
  },
  {
    "text": "using a service mesh so as by way of introduction i'm part of our solution engineering",
    "start": "12480",
    "end": "17840"
  },
  {
    "text": "organization at tetrad really a long time proponent and contributor to open source very active in the cloud",
    "start": "17840",
    "end": "24400"
  },
  {
    "text": "foundry spring and kubernetes ecosystems and i have like i said liam with me i'll let him introduce",
    "start": "24400",
    "end": "30560"
  },
  {
    "text": "himself hi yes i'm liam uh i'm a software engineer at tetri um i lead the cloud team",
    "start": "30560",
    "end": "38559"
  },
  {
    "text": "um so and i'm also an student maintainer so i'm a rare combination of seo maintainer and user so that provides",
    "start": "38559",
    "end": "45920"
  },
  {
    "text": "some interesting insight great so what we're going to cover today",
    "start": "45920",
    "end": "51280"
  },
  {
    "text": "is first a little bit of a history or what we kind of view as the common patterns and building blocks that",
    "start": "51280",
    "end": "56559"
  },
  {
    "text": "are used for building cloud native applications specifically using the spring ecosystem and spring",
    "start": "56559",
    "end": "62320"
  },
  {
    "text": "cloud and some of the iep that netflix contributed to the open source then we're going to cover how does",
    "start": "62320",
    "end": "67520"
  },
  {
    "text": "service mesh fit in with this type of architecture and this type of approach with java applications then lastly we'll walk",
    "start": "67520",
    "end": "74320"
  },
  {
    "text": "through a little bit of a migration example of how we go from potentially using some of these netflix libraries to",
    "start": "74320",
    "end": "80560"
  },
  {
    "text": "introducing service mesh into the app now we're going to go through a couple of code examples architecture examples",
    "start": "80560",
    "end": "87119"
  },
  {
    "text": "pretty quickly but you'll notice there is a link to a github repo that actually has the before and after",
    "start": "87119",
    "end": "92720"
  },
  {
    "text": "code that you all can take a look at and maybe even try and run and use as an example",
    "start": "92720",
    "end": "100320"
  },
  {
    "text": "as we start out i definitely want to preface this whole presentation with touch rate myself we all heart spring and spring",
    "start": "100320",
    "end": "107759"
  },
  {
    "text": "cloud so the take away from this should not be abandoned spring cloud or abandoned",
    "start": "107759",
    "end": "112799"
  },
  {
    "text": "spring and go a different route use service mesh as a completely new alternative the point is to show you how this can",
    "start": "112799",
    "end": "119680"
  },
  {
    "text": "augment and support your spring and your spring boot applications potentially unlocking",
    "start": "119680",
    "end": "125040"
  },
  {
    "text": "some new capabilities that maybe you don't have today and maybe making a few things a little",
    "start": "125040",
    "end": "130160"
  },
  {
    "text": "bit easier for you your developers and your operators of your cloud platforms",
    "start": "130160",
    "end": "136879"
  },
  {
    "start": "135000",
    "end": "235000"
  },
  {
    "text": "so how do we get to this point where looking at the end of the timeline where we are in 2020 or now 2021 um in",
    "start": "137120",
    "end": "145599"
  },
  {
    "text": "what i see as most organizations looking at how do i build microservice or cloud native",
    "start": "145599",
    "end": "151440"
  },
  {
    "text": "applications and then spread them across clusters and across multiple clouds",
    "start": "151440",
    "end": "156800"
  },
  {
    "text": "well we rewrite we've arrived at this point because there's been a number of very important",
    "start": "156800",
    "end": "162400"
  },
  {
    "text": "and interesting uh contributions to the open source and technologies that make building cloud-native applications and",
    "start": "162400",
    "end": "168720"
  },
  {
    "text": "microservices a little bit easier it goes all the way back to 2012 when netflix realized they need to",
    "start": "168720",
    "end": "174640"
  },
  {
    "text": "build smaller services iterate over them quickly optimize for velocity",
    "start": "174640",
    "end": "179760"
  },
  {
    "text": "and then begin to be very vocal about the patterns and technologies and the ways they did this",
    "start": "179760",
    "end": "184800"
  },
  {
    "text": "and even open sourced many of these libraries supporting this there is the emergence of docker and containers containers",
    "start": "184800",
    "end": "191680"
  },
  {
    "text": "scheduling platforms like kubernetes and cloud foundry then we really saw the standard or the buzzword of",
    "start": "191680",
    "end": "197200"
  },
  {
    "text": "microservices being the way to go for building applications now around this 2014",
    "start": "197200",
    "end": "203280"
  },
  {
    "text": "timeline the spring community made it very very easy to start to build these types of applications with spring",
    "start": "203280",
    "end": "209760"
  },
  {
    "text": "boot and then later spring cloud which uh embodies and and releases some of these netflix contributions",
    "start": "209760",
    "end": "216319"
  },
  {
    "text": "in the way spring developers have known to grow and love with convention over configuration an",
    "start": "216319",
    "end": "221840"
  },
  {
    "text": "opinionated out of the box configuration that gets you started really quickly and then a few years later istio was",
    "start": "221840",
    "end": "228400"
  },
  {
    "text": "open sourced and released to 1.0 and we'll talk about why that's important when it comes to",
    "start": "228400",
    "end": "233599"
  },
  {
    "text": "cloud native applications now the ingredients or why do we actually do this is the fundamental",
    "start": "233599",
    "end": "239680"
  },
  {
    "start": "235000",
    "end": "420000"
  },
  {
    "text": "thing when we move to microservices or cloud native or just smaller units of work",
    "start": "239680",
    "end": "245280"
  },
  {
    "text": "is we end up in the situation where everything we depend on or anyone that depends on us begins to",
    "start": "245280",
    "end": "251040"
  },
  {
    "text": "communicate with us over the network and this is uh especially problematic if either the",
    "start": "251040",
    "end": "257440"
  },
  {
    "text": "network or we could say more broadly the compute the cloud the infrastructure that we're running on",
    "start": "257440",
    "end": "263040"
  },
  {
    "text": "becomes more dynamic um more maybe somewhat less resilient in the terms of one individual unit of commute",
    "start": "263040",
    "end": "270400"
  },
  {
    "text": "compute and so we don't want to lose any resilience if you take the example of an application let's say depends on 30",
    "start": "270400",
    "end": "277440"
  },
  {
    "text": "different microservices to build a complete experience for end user if each of those",
    "start": "277440",
    "end": "283280"
  },
  {
    "text": "services has an uptime of four nines and then we multiply that though across",
    "start": "283280",
    "end": "288479"
  },
  {
    "text": "30 services the overall experience is only slightly above two nines of availability that's if",
    "start": "288479",
    "end": "294320"
  },
  {
    "text": "every single service meets its objective or sla so that's why i love this description of",
    "start": "294320",
    "end": "300560"
  },
  {
    "text": "one of my friends and former co-workers duncan nguyen who he describes cloud native as this",
    "start": "300560",
    "end": "307120"
  },
  {
    "text": "way we build software that's designed to run and scale reliably and predictably on on top of unreliable cloud-based",
    "start": "307120",
    "end": "314639"
  },
  {
    "text": "infrastructure or we could also say uh dynamic cloud-based infrastructure so that leads us to begin to build into our",
    "start": "314639",
    "end": "321360"
  },
  {
    "text": "application and since we're talking about spring applications and java applications built right into our jvm patterns around",
    "start": "321360",
    "end": "328400"
  },
  {
    "text": "how do i discover the services i need how do i load balance across them how do i do that in a resilient way and how do",
    "start": "328400",
    "end": "334479"
  },
  {
    "text": "i fail fast when there's problems that are taking place then how do i get visibility into what is taking place",
    "start": "334479",
    "end": "339680"
  },
  {
    "text": "with metrics and telemetry and then trace calls to service to service to service",
    "start": "339680",
    "end": "344720"
  },
  {
    "text": "and that's really what is needed to begin to build cloud-native applications that are going to be spread across multiple",
    "start": "344720",
    "end": "351360"
  },
  {
    "text": "clusters multiple clouds multiple kubernetes environments",
    "start": "351360",
    "end": "357440"
  },
  {
    "text": "and so how would we actually do this in practice well here's a little super simple snippet of code if i were",
    "start": "357440",
    "end": "362960"
  },
  {
    "text": "building an application application like this i go to start.spring.io which really helps me get started",
    "start": "362960",
    "end": "369759"
  },
  {
    "text": "building including the dependencies in either my maven or gradle build system to define my application",
    "start": "369759",
    "end": "377039"
  },
  {
    "text": "and then with just a couple annotations i can indicate that this application which is uh modeling a to",
    "start": "377039",
    "end": "382400"
  },
  {
    "text": "do's application is going to have some circuit breaking capabilities within it",
    "start": "382400",
    "end": "387520"
  },
  {
    "text": "unable to wire together a rest template which is making calls over the network and a load",
    "start": "387520",
    "end": "392560"
  },
  {
    "text": "balance across endpoints that are going to be under the covers are resolved using some sort of service",
    "start": "392560",
    "end": "398160"
  },
  {
    "text": "discovery mechanism and as you see from my url to my dependent service which is called to",
    "start": "398160",
    "end": "403199"
  },
  {
    "text": "do's redis it's able to resolve that to the end points transparently to my application",
    "start": "403199",
    "end": "409360"
  },
  {
    "text": "and then lastly i'm able to give it a couple annotations so that when things maybe get slow i can fail fast or when",
    "start": "409360",
    "end": "415280"
  },
  {
    "text": "things back up i cannot have a cascading failure with my application",
    "start": "415280",
    "end": "420720"
  },
  {
    "start": "420000",
    "end": "579000"
  },
  {
    "text": "so if we lay that across how we actually deploy it uh across maybe a kubernetes cluster i'll point out a couple",
    "start": "420720",
    "end": "427280"
  },
  {
    "text": "common uh ingredients that we might have in our architecture here first we probably get traffic into our",
    "start": "427280",
    "end": "433360"
  },
  {
    "text": "applications using a standard kubernetes ingress controller and that typically will land at a spring",
    "start": "433360",
    "end": "438960"
  },
  {
    "text": "cloud gateway which then knows how to talk with eureka our service registry find out where our web",
    "start": "438960",
    "end": "444560"
  },
  {
    "text": "ui is where our api service is also our api service is going to talk with that",
    "start": "444560",
    "end": "449759"
  },
  {
    "text": "registry to both register where it's running and then how it finds its dependencies",
    "start": "449759",
    "end": "454960"
  },
  {
    "text": "and then lastly since almost every application i see in the wild today is running across multiple clusters this",
    "start": "454960",
    "end": "461280"
  },
  {
    "text": "eureka instance is probably going to be appearing with other eurekas in other clusters to provide service",
    "start": "461280",
    "end": "467759"
  },
  {
    "text": "discovery for either replicas of that same application or its dependent services",
    "start": "467759",
    "end": "473039"
  },
  {
    "text": "so this is a pretty standard architecture but there's a couple of gaps or challenges that arise with this first this is",
    "start": "473039",
    "end": "479360"
  },
  {
    "text": "really optimized for the jvm or for java applications because these libraries to solve these problems are",
    "start": "479360",
    "end": "485680"
  },
  {
    "text": "built right into the application so the polyglot experience is really less than ideal",
    "start": "485680",
    "end": "491360"
  },
  {
    "text": "if you're writing or want to build a service in something other than java secondly since it is in the application",
    "start": "491360",
    "end": "497360"
  },
  {
    "text": "you have a very tight coupling with solving these uh cloud patterns or these cloud challenges",
    "start": "497360",
    "end": "503360"
  },
  {
    "text": "i even call a network or platform challenges that's coupled right with your code right with",
    "start": "503360",
    "end": "509280"
  },
  {
    "text": "the arctic artifact that you're going to deploy whether it's the jar or you could say more broadly the container you're shipping",
    "start": "509280",
    "end": "515760"
  },
  {
    "text": "and then lastly usually some of these semantics of how to solve these problems end up creeping into your cd",
    "start": "515760",
    "end": "522159"
  },
  {
    "text": "processes and this is going to add overall complexity because you have platform and infrastructure",
    "start": "522159",
    "end": "527519"
  },
  {
    "text": "level concerns being solved right next to your business logic",
    "start": "527519",
    "end": "532640"
  },
  {
    "text": "and then these these patterns don't have the most robust semantics and primitives for multi-cluster definitions",
    "start": "532640",
    "end": "539360"
  },
  {
    "text": "multi-cloud definitions it becomes kind of hard to say if you're running right next to me here's how you can discover me but if",
    "start": "539360",
    "end": "545600"
  },
  {
    "text": "you're not running in my cluster you should discover me a different way it gets complex really quickly using",
    "start": "545600",
    "end": "550720"
  },
  {
    "text": "these patterns and then lastly there's a certain set of applications that this just won't be applicable for if you can't rewrite your application or",
    "start": "550720",
    "end": "557200"
  },
  {
    "text": "at least modify it enough to include these libraries it won't be able to participate and then commercial off the shelf",
    "start": "557200",
    "end": "562800"
  },
  {
    "text": "software certainly won't be able to run in this manner and so that's where the importance of a transparent layer",
    "start": "562800",
    "end": "569040"
  },
  {
    "text": "that solves some of these concerns comes in a transparent network layer which now my colleague colleague liam is going",
    "start": "569040",
    "end": "575920"
  },
  {
    "text": "to talk about how service mesh can bring that to the table all right so transparent network layer",
    "start": "575920",
    "end": "582880"
  },
  {
    "start": "579000",
    "end": "719000"
  },
  {
    "text": "so if you go and look at the envoy docs um you'll see one of the core tenants of the project is that the network should be",
    "start": "582880",
    "end": "589040"
  },
  {
    "text": "transparent applications and when network and application problems do occur it should be easy to",
    "start": "589040",
    "end": "594240"
  },
  {
    "text": "determine the source of the problem there are two parts to this obviously there is the transparency so what this",
    "start": "594240",
    "end": "599600"
  },
  {
    "text": "means is the application shouldn't be aware or even care that it's part of a service mesh right and by extension this includes",
    "start": "599600",
    "end": "605839"
  },
  {
    "text": "developers if i'm a developer my job is to produce business value i shouldn't have to care about mutual tls it should just be done for me",
    "start": "605839",
    "end": "612800"
  },
  {
    "text": "um i might care about retries or timeouts right um but beyond that because that's maybe",
    "start": "612800",
    "end": "619440"
  },
  {
    "text": "application specific beyond that i don't care i just want to solve business problems and the second part is about visibility",
    "start": "619440",
    "end": "625440"
  },
  {
    "text": "and because envoy is a tcp and udp proxy with uh cons with an understanding of",
    "start": "625440",
    "end": "631519"
  },
  {
    "text": "how to deal with http 2 and http 3 for quick um it knows everything about network",
    "start": "631519",
    "end": "638480"
  },
  {
    "text": "communications about the network communication between your services and it can use this information to make visible",
    "start": "638480",
    "end": "643680"
  },
  {
    "text": "to everyone what's happening within your uh across your within and across your clusters so how",
    "start": "643680",
    "end": "650079"
  },
  {
    "text": "does it solve this problem um we can see there on the left we've got the netflix oss",
    "start": "650079",
    "end": "655120"
  },
  {
    "text": "model where you know we bundle in discovery load balancing traffic",
    "start": "655120",
    "end": "661600"
  },
  {
    "text": "management resiliency metrics tracing into the uh service itself as a library",
    "start": "661600",
    "end": "666959"
  },
  {
    "text": "when we are using kubernetes and envoy we extract that info we extract that",
    "start": "666959",
    "end": "672160"
  },
  {
    "text": "functionality out into envoy itself um an envoy runs uh as a separate",
    "start": "672160",
    "end": "677279"
  },
  {
    "text": "process uh alongside uh alongside your service in a different container",
    "start": "677279",
    "end": "682320"
  },
  {
    "text": "in kubernetes world it's in a in the same pod but in a different container but the key is that it's a separate",
    "start": "682320",
    "end": "687440"
  },
  {
    "text": "process um so what does the request look like well",
    "start": "687440",
    "end": "692560"
  },
  {
    "text": "uh request comes into a pod uh it gets intercepted by envoy gets forwarded on to the service",
    "start": "692560",
    "end": "697839"
  },
  {
    "text": "the service when it makes uh outward requests goes in the reverse direction um so like i mentioned in the previous",
    "start": "697839",
    "end": "703760"
  },
  {
    "text": "section it's separate container same pod they share a network name space and kubernetes",
    "start": "703760",
    "end": "709279"
  },
  {
    "text": "um so we can do all kind of messing around with ib tables and that's how we do it transparently in",
    "start": "709279",
    "end": "715279"
  },
  {
    "text": "instagram excellent",
    "start": "715279",
    "end": "719680"
  },
  {
    "start": "719000",
    "end": "999000"
  },
  {
    "text": "so envoy refers to this um as an out of process architecture and what this really means",
    "start": "720639",
    "end": "726480"
  },
  {
    "text": "is moving the logic from the libraries within the codes out to a separate binary that can run as",
    "start": "726480",
    "end": "732560"
  },
  {
    "text": "a separate process separate container technically those two things are the same thing in kubernetes and in docker",
    "start": "732560",
    "end": "740240"
  },
  {
    "text": "but within the same pod and doing this has quite a few benefits so moving this out means that it works",
    "start": "740240",
    "end": "748240"
  },
  {
    "text": "with any language because it works like i mentioned at the network level it speaks tcp or udp",
    "start": "748240",
    "end": "753360"
  },
  {
    "text": "you might have some crazy protocol but you can extend envoy to actually speak that protocol if you can write something that compiles",
    "start": "753360",
    "end": "760079"
  },
  {
    "text": "down to waser if you're a purely java shop then this might not be much of an advantage",
    "start": "760079",
    "end": "765440"
  },
  {
    "text": "however the next one is which is it allows it to work with any legacy in third party applications",
    "start": "765440",
    "end": "770800"
  },
  {
    "text": "so you have postgres you have redis you have um some legacy system running on a",
    "start": "770800",
    "end": "777200"
  },
  {
    "text": "mainframe that you're never that you don't want to touch um we just",
    "start": "777200",
    "end": "782399"
  },
  {
    "text": "deploy either envoy alongside it or if you're deploying on a mainframe maybe you deploy it as",
    "start": "782399",
    "end": "787760"
  },
  {
    "text": "an egress gateway on the way out to the mainframe right um and then we see then we have",
    "start": "787760",
    "end": "793440"
  },
  {
    "text": "that visibility and control of the traffic in the same way that you would a modern cloud native application",
    "start": "793440",
    "end": "800959"
  },
  {
    "text": "the next advantage is that um upgrades of libraries are painful right in a containerized world you have",
    "start": "800959",
    "end": "806959"
  },
  {
    "text": "to recompile all your images or rebuild all your images probably not compile them and then you have to make sure",
    "start": "806959",
    "end": "812000"
  },
  {
    "text": "each of these deployed sometimes this requires coordinating with dev teams sometimes it doesn't",
    "start": "812000",
    "end": "817200"
  },
  {
    "text": "um but if we decouple uh decouple this functionality so that the platform team can just roll",
    "start": "817200",
    "end": "823680"
  },
  {
    "text": "out security fixes and roll out new versions of envoy for instance uh application devs",
    "start": "823680",
    "end": "828959"
  },
  {
    "text": "need be number wiser right and again they can just focus on actually",
    "start": "828959",
    "end": "834000"
  },
  {
    "text": "uh writing the core business logic the other advantage of this uh separation is if we aren't if we're",
    "start": "834000",
    "end": "843519"
  },
  {
    "text": "if we're using an envoy-based service mesh nearly pretty much all of them are api driven much like kubernetes is",
    "start": "843519",
    "end": "849920"
  },
  {
    "text": "so in a similar way to uh if you uh needed to scale out",
    "start": "849920",
    "end": "855199"
  },
  {
    "text": "capacity you needed to increase the number of replicas uh for a specific uh deployment",
    "start": "855199",
    "end": "861760"
  },
  {
    "text": "um because you're pinning your cpu you can just scale it up via an api change you don't have to",
    "start": "861760",
    "end": "867199"
  },
  {
    "text": "kind of like change anything else you just change that one thing",
    "start": "867199",
    "end": "872399"
  },
  {
    "text": "and we can do that using a number based service mesh as well right like maybe uh you're something slow",
    "start": "872399",
    "end": "879839"
  },
  {
    "text": "and it's taking 11 seconds to respond and you have a 10 second retry right you can just make a single config",
    "start": "879839",
    "end": "885440"
  },
  {
    "text": "change um to an api and that also that can automatically increase your timeout um so that you're no longer",
    "start": "885440",
    "end": "893760"
  },
  {
    "text": "having an outage you're just extremely slow and extremely slow but usually better",
    "start": "893760",
    "end": "899120"
  },
  {
    "text": "usually usually better than uh no request",
    "start": "899120",
    "end": "904160"
  },
  {
    "text": "now um there is obviously one disadvantage which is relatively obvious from an out process architecture and that's latency",
    "start": "904320",
    "end": "912399"
  },
  {
    "text": "right so moving out process means that uh when you're making a request you're now going through the network stack",
    "start": "912399",
    "end": "917839"
  },
  {
    "text": "within the kernel uh within the kernel and user space uh you're going in and out of it an extra",
    "start": "917839",
    "end": "923120"
  },
  {
    "text": "one two three four times right um and this like it legitimately does",
    "start": "923120",
    "end": "929440"
  },
  {
    "text": "increase except for some circumstances it legitimately does increase latency that i have seen",
    "start": "929440",
    "end": "935440"
  },
  {
    "text": "examples like if the python's tls implementation is basically less efficient than using envoy so if",
    "start": "935440",
    "end": "942560"
  },
  {
    "text": "you're doing tls in python and you move it to envoy sometimes you can see a speed up but generally you",
    "start": "942560",
    "end": "947600"
  },
  {
    "text": "will see an increase in latency so this is an issue if your workloads",
    "start": "947600",
    "end": "953279"
  },
  {
    "text": "have strict latency requirements then the grpc team is currently working on implementing",
    "start": "953279",
    "end": "958639"
  },
  {
    "text": "the envoy apis so on latency specific paths you can choose to use grpc you won't have to do the kernel user",
    "start": "958639",
    "end": "966079"
  },
  {
    "text": "space network stack uh jumps you just kind of do the thing uh i think as well uh cilia maybe have",
    "start": "966079",
    "end": "974240"
  },
  {
    "text": "some stuff that does a it basically prevents you from needing",
    "start": "974240",
    "end": "979759"
  },
  {
    "text": "to go through uh from user space into the kernel and back out again when you're doing this network",
    "start": "979759",
    "end": "985759"
  },
  {
    "text": "hop uh but you need to speak to them more about that i don't fully i haven't been paying too much attention to what they've been doing but i believe",
    "start": "985759",
    "end": "991839"
  },
  {
    "text": "they offer some uh stuff specifically for onboard next slide so",
    "start": "991839",
    "end": "1001279"
  },
  {
    "start": "999000",
    "end": "1189000"
  },
  {
    "text": "moving this out process gives us uh consistency this kind of breaks down into four things first one being traffic",
    "start": "1001279",
    "end": "1007680"
  },
  {
    "text": "management so it doesn't matter if it's a third-party application postgres redis",
    "start": "1007680",
    "end": "1012720"
  },
  {
    "text": "legacy application uh homegrown non-java application right you get this you use the same api",
    "start": "1012720",
    "end": "1019680"
  },
  {
    "text": "to configure all of the traffic management it doesn't matter kind of it doesn't matter about any of those",
    "start": "1019680",
    "end": "1025678"
  },
  {
    "text": "things so this functionality includes like retries circuit breaking request shadowing session stickiness uh",
    "start": "1025679",
    "end": "1032640"
  },
  {
    "text": "locality load balancing so keeping keeping your aws or other cloud provider network costs",
    "start": "1032640",
    "end": "1038319"
  },
  {
    "text": "down by keeping your traffic all within the same az where possible um canarying ap test and fault injection",
    "start": "1038319",
    "end": "1045520"
  },
  {
    "text": "whatever whatever uh functionality that android you need to leverage it's the same api for configuring all of",
    "start": "1045520",
    "end": "1051600"
  },
  {
    "text": "those things it's also the same api for configuring uh security and policy",
    "start": "1051600",
    "end": "1058000"
  },
  {
    "text": "right so third party whatever doesn't matter same api um if you're using istio we leverage",
    "start": "1058000",
    "end": "1064720"
  },
  {
    "text": "envoys sds so secret discovery service um",
    "start": "1064720",
    "end": "1070160"
  },
  {
    "text": "and we allow you to incrementally adopt mtls everywhere um we handle certificate rotation for",
    "start": "1070160",
    "end": "1075919"
  },
  {
    "text": "you we assure identities based on hours or days not weeks or months and we do this",
    "start": "1075919",
    "end": "1081600"
  },
  {
    "text": "because certificate revocation is extremely painful um so we just have short-lived certificates",
    "start": "1081600",
    "end": "1089280"
  },
  {
    "text": "um and yeah it's we have this consistent way of writing policy for all of all of your",
    "start": "1089280",
    "end": "1095919"
  },
  {
    "text": "applications the next one is behavior so",
    "start": "1095919",
    "end": "1103039"
  },
  {
    "text": "the if you have a bunch of implementations of different client libraries so you might have a java library that does",
    "start": "1103120",
    "end": "1108960"
  },
  {
    "text": "retries a go library that does retries um maybe i don't know postgre",
    "start": "1108960",
    "end": "1115360"
  },
  {
    "text": "postgres has its own thing but maybe you have a legacy application doesn't really do time notes or something retries right whatever um the behavior",
    "start": "1115360",
    "end": "1123360"
  },
  {
    "text": "is going to be different across all of the implementations or it might not be there at all right and because we have the",
    "start": "1123360",
    "end": "1129280"
  },
  {
    "text": "same binary everywhere save the grpc stuff we mentioned earlier um we get consistent uh but more",
    "start": "1129280",
    "end": "1135520"
  },
  {
    "text": "importantly predictable behavior and predictable behavior is uh always better",
    "start": "1135520",
    "end": "1140640"
  },
  {
    "text": "uh not only that we can move like you know and like i mentioned we can put the uh we can put",
    "start": "1140640",
    "end": "1146559"
  },
  {
    "text": "envoy at the ingress gateway so um we have that consistency there",
    "start": "1146559",
    "end": "1152160"
  },
  {
    "text": "and the same goes for telemetry right because envoy produces the same metrics across the same protocol regardless of",
    "start": "1152160",
    "end": "1159600"
  },
  {
    "text": "you know third-party uh your own application right we're going to have the same metrics we're going to have the same",
    "start": "1159600",
    "end": "1165520"
  },
  {
    "text": "metrics names we aren't going to have to coordinate metric names across teams they just get given metrics names um so we can just generate",
    "start": "1165520",
    "end": "1172799"
  },
  {
    "text": "dashboards like by usually by code by templating right like because the names are always",
    "start": "1172799",
    "end": "1179039"
  },
  {
    "text": "the same um and the uh attributes are always the same um we just get kind of we can just auto",
    "start": "1179039",
    "end": "1186400"
  },
  {
    "text": "generate all of that stuff all right so let's let's um now take a",
    "start": "1186400",
    "end": "1192640"
  },
  {
    "start": "1189000",
    "end": "1263000"
  },
  {
    "text": "look at how we could apply some of these things that liam just mentioned in our same application and again",
    "start": "1192640",
    "end": "1198559"
  },
  {
    "text": "we're gonna go through a couple examples pretty quickly on how we can enable mesh capabilities around ingress service discovery um client-side",
    "start": "1198559",
    "end": "1205919"
  },
  {
    "text": "load balancing some resiliency capabilities security uh grab the actual code examples from our",
    "start": "1205919",
    "end": "1213039"
  },
  {
    "text": "gearhead repo so you can see them working for yourself now with this updated architecture there's some obvious changes that we've made the",
    "start": "1213039",
    "end": "1219840"
  },
  {
    "text": "client libraries are no longer in the spring boot application we now have an envoy instance that's",
    "start": "1219840",
    "end": "1225840"
  },
  {
    "text": "paired up with every single application container that's running in kubernetes secondly our",
    "start": "1225840",
    "end": "1231679"
  },
  {
    "text": "our kubernetes ingress has changed we're able to actually use envoy itself as an ingress gateway and have some of",
    "start": "1231679",
    "end": "1238159"
  },
  {
    "text": "these capabilities that we're talking about at the furthest edge ingress of our cluster and then lastly the thing",
    "start": "1238159",
    "end": "1244159"
  },
  {
    "text": "you'll notice is our service registry actually has disappeared so inherently within whatever control plane we're",
    "start": "1244159",
    "end": "1250960"
  },
  {
    "text": "using to program istio it's able to uh give information about where services are",
    "start": "1250960",
    "end": "1257360"
  },
  {
    "text": "running endpoints and provide that service discovery capabilities inherently into the platform",
    "start": "1257360",
    "end": "1263520"
  },
  {
    "start": "1263000",
    "end": "1380000"
  },
  {
    "text": "so let's talk about this first item server ingress and service discovery so in our spring boot application there's a",
    "start": "1263520",
    "end": "1268960"
  },
  {
    "text": "couple changes that we simply can remove and drop stuff out of our application optionally we could remove the gateway",
    "start": "1268960",
    "end": "1275520"
  },
  {
    "text": "well that's not a hard requirement there might be certain use cases where you leave your spring cloud gateway in the mech in the mix but optionally",
    "start": "1275520",
    "end": "1282480"
  },
  {
    "text": "that could be removed secondly we'll strip out our eureka dependencies and any code that's",
    "start": "1282480",
    "end": "1288080"
  },
  {
    "text": "annotated with load balancing a discovery client or any of those related constructs can",
    "start": "1288080",
    "end": "1293760"
  },
  {
    "text": "be removed and then lastly as i mentioned in the previous slide here our eureka registry complete be completely retired",
    "start": "1293760",
    "end": "1300960"
  },
  {
    "text": "now i'm going to show you a couple code snippets that are a little bit more how you would program this imagine imagining that issue is",
    "start": "1300960",
    "end": "1307679"
  },
  {
    "text": "your control plane but ultimately this gets materialized into envoy configuration to actually program the data path um",
    "start": "1307679",
    "end": "1315520"
  },
  {
    "text": "and so any any control plane that's programming envoy typically would behave about the same even though the semantics",
    "start": "1315520",
    "end": "1321600"
  },
  {
    "text": "might be slightly different so if we're utilizing envoy as our ingress gateway we simply need to tell uh our",
    "start": "1321600",
    "end": "1329679"
  },
  {
    "text": "our ingress and then program our envoy instances where it can route traffic to so it's a",
    "start": "1329679",
    "end": "1335760"
  },
  {
    "text": "very simple definition of my traffic's coming in to my uh redis prefix at my endpoint",
    "start": "1335760",
    "end": "1341600"
  },
  {
    "text": "send that to my redistended destination in my cluster my code i mentioned on the left there's",
    "start": "1341600",
    "end": "1347360"
  },
  {
    "text": "a bunch of stuff that's extracted out of your java code nothing needs to be added so i can still refer to my service my",
    "start": "1347360",
    "end": "1354679"
  },
  {
    "text": "to-do's-redis service and port 8080. and if you actually look at what's manifested itself in envoy",
    "start": "1354679",
    "end": "1360720"
  },
  {
    "text": "we can ask envoy what routes do you know how to send traffic to what endpoints exist for those routes",
    "start": "1360720",
    "end": "1366400"
  },
  {
    "text": "and it would report back to us why no produce redis exists and here's the actual",
    "start": "1366400",
    "end": "1371520"
  },
  {
    "text": "internal kubernetes ips that i could send traffic to or if it's going across plus across cluster it might be an externally",
    "start": "1371520",
    "end": "1378320"
  },
  {
    "text": "routable ip so going part and parcel with that service discovery and initial",
    "start": "1378320",
    "end": "1384960"
  },
  {
    "start": "1380000",
    "end": "1477000"
  },
  {
    "text": "load balancing or initial ingress is actual more full-scale client-side load balancing",
    "start": "1384960",
    "end": "1390480"
  },
  {
    "text": "so if we haven't already done so we can strip out of our java code out of our application those load balance or",
    "start": "1390480",
    "end": "1397120"
  },
  {
    "text": "discovery client annotations potentially if we've done something more sophisticated",
    "start": "1397120",
    "end": "1402159"
  },
  {
    "text": "like provide a custom implementation for the ribbon load balancers or a more sophisticated algorithm or configuration",
    "start": "1402159",
    "end": "1408480"
  },
  {
    "text": "for that that also can drop out off and now we can program our envoys of how we want to",
    "start": "1408480",
    "end": "1414320"
  },
  {
    "text": "shape traffic so i have three very simple examples here of how we can split traffic",
    "start": "1414320",
    "end": "1419679"
  },
  {
    "text": "across multiple instances in this case it's sending 95 percent of our traffic",
    "start": "1419679",
    "end": "1425039"
  },
  {
    "text": "to our original version of our cash service five percent will go to our new version",
    "start": "1425039",
    "end": "1430640"
  },
  {
    "text": "uh using application labels under the covers and then we're giving it a little bit of information when things might",
    "start": "1430640",
    "end": "1436000"
  },
  {
    "text": "misbehave at half a second time out uh retry three times and what are the type of scenarios",
    "start": "1436000",
    "end": "1441520"
  },
  {
    "text": "we should retry on we also can tell envoy what is going to be the actual load",
    "start": "1441520",
    "end": "1447440"
  },
  {
    "text": "balancing strategy the traffic policy that's going to be applied when we establish these connections",
    "start": "1447440",
    "end": "1452559"
  },
  {
    "text": "and then lastly you know one really interesting thing we can do since we're controlling all traffic we can actually uh control how we",
    "start": "1452559",
    "end": "1459919"
  },
  {
    "text": "connect to things outside of uh our service mesh or even outside of our kurendi's clusters and have that do",
    "start": "1459919",
    "end": "1466559"
  },
  {
    "text": "things like tls mutual authentication when i get to a little bit of a security",
    "start": "1466559",
    "end": "1471600"
  },
  {
    "text": "uh slide i'll talk why that's pretty significant and important for our applications",
    "start": "1471600",
    "end": "1478000"
  },
  {
    "start": "1477000",
    "end": "1560000"
  },
  {
    "text": "now we also want to make sure our applications are resilient things are ejected from our client-side",
    "start": "1478400",
    "end": "1484000"
  },
  {
    "text": "load balancers as as needed and so in our application we can drop out uh",
    "start": "1484000",
    "end": "1489360"
  },
  {
    "text": "any histrix or spring cloud circuit breaker dependencies that are in our greater build or maven palm files remove",
    "start": "1489360",
    "end": "1496400"
  },
  {
    "text": "all the annotations that are related to that and then if we have implemented any circuit breaker factories",
    "start": "1496400",
    "end": "1501840"
  },
  {
    "text": "or potentially we're using more modern resilience for j we can remove the config the properties",
    "start": "1501840",
    "end": "1507760"
  },
  {
    "text": "the annotations that we placed on our methods regarding that then we can tell any redis or",
    "start": "1507760",
    "end": "1513200"
  },
  {
    "text": "excuse me any envoy sidecar how it should behave when it connects so in this example uh",
    "start": "1513200",
    "end": "1519520"
  },
  {
    "text": "we're fictitiously saying my api service is connecting to four pods of my cash service one of",
    "start": "1519520",
    "end": "1526080"
  },
  {
    "text": "them's misbehaving well we're able to configure it so that it can only do ten connections at once",
    "start": "1526080",
    "end": "1533279"
  },
  {
    "text": "it's going to time out after five seconds and what are the ways for how should we eject endpoints when",
    "start": "1533279",
    "end": "1538880"
  },
  {
    "text": "they don't behave correctly so in this configuration we're saying in any 10 second window if we have 10 5 0x",
    "start": "1538880",
    "end": "1545360"
  },
  {
    "text": "errors we should eject that endpoint for a minute and obviously there's more robust and verbose configurations that we can",
    "start": "1545360",
    "end": "1551600"
  },
  {
    "text": "made make for this but very easy to transparently interject this into power traffic's flowing through the",
    "start": "1551600",
    "end": "1557919"
  },
  {
    "text": "system now as a little bit of extra credit i'll talk about some security items",
    "start": "1557919",
    "end": "1564400"
  },
  {
    "start": "1560000",
    "end": "1644000"
  },
  {
    "text": "because that's one uh inherent capability that this transparent networking layer the service mesh gives",
    "start": "1564400",
    "end": "1569760"
  },
  {
    "text": "to us so within our application we can strip out any of the complex trustor key store stuff that we may have",
    "start": "1569760",
    "end": "1576159"
  },
  {
    "text": "had to do in our jvm we can connect to services just simply over tls",
    "start": "1576159",
    "end": "1581200"
  },
  {
    "text": "and rely on the service mesh to and and our our on voice side cars to handle",
    "start": "1581200",
    "end": "1587440"
  },
  {
    "text": "all the security for inbound and outbound so in this example let's say we only want our caching service to be talked to",
    "start": "1587440",
    "end": "1594400"
  },
  {
    "text": "by the api service things closer to the edge like our web ui or our ingress shouldn't directly uh",
    "start": "1594400",
    "end": "1601760"
  },
  {
    "text": "connect to that so we're very easily able to author policy that says for all traffic",
    "start": "1601760",
    "end": "1607200"
  },
  {
    "text": "mp mtls is going to be strictly reinforced and we're also going to inspect that",
    "start": "1607200",
    "end": "1612720"
  },
  {
    "text": "certificate that's presented by the client and we're going to only allow principles identified",
    "start": "1612720",
    "end": "1618480"
  },
  {
    "text": "by the to-do's api certificate to connect and so that's the certificate in x509",
    "start": "1618480",
    "end": "1623760"
  },
  {
    "text": "certificate that's issued to every single envoy a sidecar to our application that's going to have a unique identity",
    "start": "1623760",
    "end": "1630240"
  },
  {
    "text": "so we can author both off and on z policy that looks like this so this is controlling service to",
    "start": "1630240",
    "end": "1636240"
  },
  {
    "text": "service communication and the security aspect of it but we can also control",
    "start": "1636240",
    "end": "1642080"
  },
  {
    "text": "the request level uh security so this varies very very widely of how",
    "start": "1642080",
    "end": "1648000"
  },
  {
    "start": "1644000",
    "end": "1706000"
  },
  {
    "text": "we would implement this in our application using spring security so i'm not going to cover what we might be able to remove from our",
    "start": "1648000",
    "end": "1654480"
  },
  {
    "text": "application that could probably be a 30 minute talk on itself but within the actual service",
    "start": "1654480",
    "end": "1659520"
  },
  {
    "text": "mesh we can author policy that is going to validate tokens and so in this case it's going to be",
    "start": "1659520",
    "end": "1666000"
  },
  {
    "text": "talking to key cloak inspecting the jot tokens that are going to be presented by",
    "start": "1666000",
    "end": "1671919"
  },
  {
    "text": "the request both validate that that token is valid and was issued from our identity",
    "start": "1671919",
    "end": "1677279"
  },
  {
    "text": "provider and then in this example we're looking at all the claims that are associated with it to make sure that the",
    "start": "1677279",
    "end": "1683039"
  },
  {
    "text": "user invoking our service has the to-do's user role so we're able",
    "start": "1683039",
    "end": "1688080"
  },
  {
    "text": "to not only identify what is a service to service communication and control that traffic",
    "start": "1688080",
    "end": "1693279"
  },
  {
    "text": "at a very fine-grained level but also the end user who is uh invoking our service and propagate that",
    "start": "1693279",
    "end": "1700159"
  },
  {
    "text": "throughout our service mesh and enforce that using envoy as a policy enforcement point",
    "start": "1700159",
    "end": "1707440"
  },
  {
    "start": "1706000",
    "end": "1804000"
  },
  {
    "text": "so to wrap this up or to kind of summarize what is this new architecture that we have with",
    "start": "1707679",
    "end": "1712880"
  },
  {
    "text": "service mesh and spring spring can still bring to the table uh the very easy way to get started and",
    "start": "1712880",
    "end": "1719520"
  },
  {
    "text": "build microservice applications with spring boot and all the libraries that make consuming data services messaging",
    "start": "1719520",
    "end": "1726000"
  },
  {
    "text": "services reactive patterns building uis all the things that spring does are great can be built into application",
    "start": "1726000",
    "end": "1733200"
  },
  {
    "text": "we can decouple the common cloud native patterns out of our application to simplify the architecture we can have that platform",
    "start": "1733200",
    "end": "1740159"
  },
  {
    "text": "provided for us and so that's going to unlock and simplify anytime we want to take a polyglot approach and introduce non-java",
    "start": "1740159",
    "end": "1748720"
  },
  {
    "text": "services into our application architecture then it also will greatly simplify once",
    "start": "1748720",
    "end": "1753840"
  },
  {
    "text": "we begin to span multiple kubernetes clusters multiple cloud environments or multiple cloud providers themselves",
    "start": "1753840",
    "end": "1760159"
  },
  {
    "text": "and the semantics for expressing that to our applications are much much easier and then this also unlocks the",
    "start": "1760159",
    "end": "1766559"
  },
  {
    "text": "opportunity to begin to introduce non-cloud-native applications into our cloud-native architecture",
    "start": "1766559",
    "end": "1772159"
  },
  {
    "text": "and then lastly as we saw in kind of the extra credit portion we can very easily consistently",
    "start": "1772159",
    "end": "1777279"
  },
  {
    "text": "and transparently enable all of our applications by default with some pretty sophisticated and advanced security primitives to",
    "start": "1777279",
    "end": "1784399"
  },
  {
    "text": "move us towards uh initiatives like zero trust architecture within our applications so service mesh",
    "start": "1784399",
    "end": "1792320"
  },
  {
    "text": "envoy that's really like a peanut butter and chocolate with a spring you put them together you're going to get a really",
    "start": "1792320",
    "end": "1798080"
  },
  {
    "text": "great recipe so thanks for attention with that now i think we have just a few minutes for questions",
    "start": "1798080",
    "end": "1803279"
  },
  {
    "text": "to answer",
    "start": "1803279",
    "end": "1806320"
  }
]