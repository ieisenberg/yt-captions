[
  {
    "text": "um so hello welcome everyone on one of the last talk today so it's going to be about securing the superpowers and who",
    "start": "840",
    "end": "8580"
  },
  {
    "text": "loaded the evpf program so basically auditing ebpf programs",
    "start": "8580",
    "end": "14040"
  },
  {
    "text": "so who is speaking today I'm Natalia I'm a security product lead at ISO villain",
    "start": "14040",
    "end": "19140"
  },
  {
    "text": "and here is with me John who is a tetragon lead and psyllium maintainer as",
    "start": "19140",
    "end": "24720"
  },
  {
    "text": "well as staff engineer at ISO Island so I wanted to start with a background",
    "start": "24720",
    "end": "30539"
  },
  {
    "text": "and the motivation to this talk first and as you already know like evpf is on the rise or already Rose it became one",
    "start": "30539",
    "end": "38460"
  },
  {
    "text": "of the leading Linux kernel technology today so more and more projects are using it",
    "start": "38460",
    "end": "44340"
  },
  {
    "text": "under the hood for different use cases for example networking observability and security",
    "start": "44340",
    "end": "50219"
  },
  {
    "text": "so this is just a small subset of projects that are using ebpf but this would give you a glimpse of what can be",
    "start": "50219",
    "end": "57120"
  },
  {
    "text": "done in different areas so for example in networking it can be used for high performance and load",
    "start": "57120",
    "end": "63539"
  },
  {
    "text": "balancing in other data centers as well as in Cloud native environments so one",
    "start": "63539",
    "end": "68700"
  },
  {
    "text": "good example is catron which is a high performance load balancing from Facebook that they created to replace ipvs this",
    "start": "68700",
    "end": "76560"
  },
  {
    "text": "is another software-based load branching solution so they switched actually to ebpf and saw a massive performance",
    "start": "76560",
    "end": "82740"
  },
  {
    "text": "increase this is actually open source so you can actually go to the GitHub repository and check it out it's",
    "start": "82740",
    "end": "90360"
  },
  {
    "text": "Facebook specific but good for other Linux based software infrastructure systems as well",
    "start": "90360",
    "end": "96240"
  },
  {
    "text": "so we have celium which is providing networking load balancing security for",
    "start": "96240",
    "end": "101340"
  },
  {
    "text": "kubernetes services on the observability side in the middle",
    "start": "101340",
    "end": "106500"
  },
  {
    "text": "we have BCC and BPF trees so these are for application profiling and tracing so",
    "start": "106500",
    "end": "112979"
  },
  {
    "text": "for example understanding what my application is doing what my my",
    "start": "112979",
    "end": "118320"
  },
  {
    "text": "application is not behaving the way we expect for example how many block I occurs it's using and so on",
    "start": "118320",
    "end": "125460"
  },
  {
    "text": "we have Hubble which is the visibility component of psyllium and it can use for",
    "start": "125460",
    "end": "131280"
  },
  {
    "text": "example for Network policy troubleshooting auditing so for example which network flows are denied by which",
    "start": "131280",
    "end": "138239"
  },
  {
    "text": "network we see what is the source spot and so on and then for security so we will deep",
    "start": "138239",
    "end": "145319"
  },
  {
    "text": "dive into these use cases later but we have tetragon and Falco which is",
    "start": "145319",
    "end": "150360"
  },
  {
    "text": "applying BPF for container runtime security so inspect the kernel function system cause and figuring out if a",
    "start": "150360",
    "end": "157680"
  },
  {
    "text": "malicious behavior has happened we can also Implement for example these privilege policies and then we can",
    "start": "157680",
    "end": "165540"
  },
  {
    "text": "create proflies based on the observed event and then we should say like these",
    "start": "165540",
    "end": "171840"
  },
  {
    "text": "are only the allow Demons by that Source but and then we should prevent",
    "start": "171840",
    "end": "177360"
  },
  {
    "text": "everything else we can also use BPF for preventative security so terminate any",
    "start": "177360",
    "end": "183200"
  },
  {
    "text": "kernel functions or system calls inside the kernel instead of having like a user",
    "start": "183200",
    "end": "188640"
  },
  {
    "text": "space agent observing it so for example these are two security",
    "start": "188640",
    "end": "194760"
  },
  {
    "text": "use cases that we can do one is data ex filtration so a security team can observe occupancy's namespace and figure",
    "start": "194760",
    "end": "201599"
  },
  {
    "text": "out like which which parts were the most outbound to occurs in the last hour is",
    "start": "201599",
    "end": "206940"
  },
  {
    "text": "it expected who sent out the most traffic can it be detox filtration",
    "start": "206940",
    "end": "212700"
  },
  {
    "text": "and we can also do like file Integrity monitoring so which pods or workloads",
    "start": "212700",
    "end": "217739"
  },
  {
    "text": "open sensitive files with which binaries who was root and is it even expected",
    "start": "217739",
    "end": "224879"
  },
  {
    "text": "we can also do capability and namespace success monitoring so security team",
    "start": "224879",
    "end": "230040"
  },
  {
    "text": "camera for example certain name spaces and ask questions like which ports were running with cops's admin or cut net",
    "start": "230040",
    "end": "237599"
  },
  {
    "text": "rule do we expect this which which ports had for example whose speed or network",
    "start": "237599",
    "end": "243540"
  },
  {
    "text": "names with success do we even expect this how long who started this spot and",
    "start": "243540",
    "end": "248940"
  },
  {
    "text": "so on so EVPs became cross-platform",
    "start": "248940",
    "end": "254659"
  },
  {
    "text": "and windows machines with the windows runtime recently it's available on most",
    "start": "254659",
    "end": "259739"
  },
  {
    "text": "Linux distributions and then all the major Cloud providers also supports",
    "start": "259739",
    "end": "266160"
  },
  {
    "text": "so um as a motivation since EVP has become so powerful",
    "start": "266160",
    "end": "271979"
  },
  {
    "text": "security teams needs to answer functions like who is watching evpf",
    "start": "271979",
    "end": "277680"
  },
  {
    "text": "um during a secure it's actually important to keep track and audit which",
    "start": "277680",
    "end": "283259"
  },
  {
    "text": "BPF programs have alluded and then which ppf's map were created",
    "start": "283259",
    "end": "288840"
  },
  {
    "text": "so what does how did it mean exactly like who what did it which guberty's workload which process of each binary",
    "start": "288840",
    "end": "295800"
  },
  {
    "text": "from which ancestors when was it loaded um should this program be expected have",
    "start": "295800",
    "end": "302639"
  },
  {
    "text": "you seen this program or process before and should this process touch BPS at all",
    "start": "302639",
    "end": "309360"
  },
  {
    "text": "so these are the questions that we are trying to answer today with um tetragon",
    "start": "309360",
    "end": "314520"
  },
  {
    "text": "okay hey everyone",
    "start": "314520",
    "end": "318800"
  },
  {
    "text": "awesome all right so first I want to talk about tetragon so that's our tool right and um and we saw some of the use",
    "start": "319800",
    "end": "326280"
  },
  {
    "text": "cases that it solves and we saw some of the dashboards that you can create and so I'm going to kind of talk a little",
    "start": "326280",
    "end": "331740"
  },
  {
    "text": "bit about the architecture here from this um this cartoon but at least it gives you the big kind of bullet points",
    "start": "331740",
    "end": "337139"
  },
  {
    "text": "and then from there we can dive into how we address the BPF monitoring piece of",
    "start": "337139",
    "end": "342780"
  },
  {
    "text": "it that specific part that the talk is going to focus on so first what is tetragon it's our security observability",
    "start": "342780",
    "end": "349139"
  },
  {
    "text": "and runtime enforcement what this means is you take BPF you hook the Linux kernel and you can hook all of these",
    "start": "349139",
    "end": "355860"
  },
  {
    "text": "locations right use it the tcpip stack you can hook system calls to process execution file systems you get all of",
    "start": "355860",
    "end": "362639"
  },
  {
    "text": "your c groups and namespace monitoring right and and what tetragon can do inside is kubernetes since we're at the",
    "start": "362639",
    "end": "369900"
  },
  {
    "text": "cncf here is you can take all of that kernel level data and put on top of it",
    "start": "369900",
    "end": "375900"
  },
  {
    "text": "the kubernetes metadata and get something that operators and people that monitor and manage kubernetes",
    "start": "375900",
    "end": "381720"
  },
  {
    "text": "environments can make some sense of right because if you didn't do this and you just said okay I'm going to put a",
    "start": "381720",
    "end": "387479"
  },
  {
    "text": "BPF probe here maybe I'm running BPF trace or I'm running BCC tools if you're familiar with that these are kind of low",
    "start": "387479",
    "end": "393360"
  },
  {
    "text": "level BPF things what you would really just get out of your system then is uh",
    "start": "393360",
    "end": "399240"
  },
  {
    "text": "you know PID name a random PID launch some file fd3 and oh by the way it's in",
    "start": "399240",
    "end": "405479"
  },
  {
    "text": "some random C group on some random node in your system right so what you really want to do is up level all of that and",
    "start": "405479",
    "end": "410940"
  },
  {
    "text": "that's what tetragon is really good at doing taking these low-level data so you can monitor all your files monitor all",
    "start": "410940",
    "end": "417539"
  },
  {
    "text": "your execution create a nice execution trace for anywhere in your cluster along with timestamps into a data stream right",
    "start": "417539",
    "end": "424919"
  },
  {
    "text": "so now you can analyze all of that data right you can ask questions like what",
    "start": "424919",
    "end": "430080"
  },
  {
    "text": "executed three days ago on this system and what programs did it run what files",
    "start": "430080",
    "end": "435479"
  },
  {
    "text": "did it open who did it connect to this question um you might even ask you know what are",
    "start": "435479",
    "end": "441419"
  },
  {
    "text": "the DNS entries for those IP addresses that I saw these connects for and what's really interesting for today what BPF",
    "start": "441419",
    "end": "448740"
  },
  {
    "text": "programs did it launch right um because that's what we want to answer",
    "start": "448740",
    "end": "455180"
  },
  {
    "text": "so when we talk about BPF the next thing we want to talk about is what is a BPF program right so typically I think of an",
    "start": "455580",
    "end": "463380"
  },
  {
    "text": "application program you're thinking of a set of a like an executable something that you launched but BPF is slightly",
    "start": "463380",
    "end": "468960"
  },
  {
    "text": "different for one that runs in the kernel that's also interesting but what is kind of interesting from the question",
    "start": "468960",
    "end": "474060"
  },
  {
    "text": "of what's running is that BPF is not just a set of instructions there's an entire run time around it so you can",
    "start": "474060",
    "end": "481020"
  },
  {
    "text": "think of it as a set of instructions plus all this other stuff and the other stuff here include core what core does",
    "start": "481020",
    "end": "487979"
  },
  {
    "text": "is when you load your BPF program it's actually a runtime rewriting kind of framework and so it takes the program it",
    "start": "487979",
    "end": "494699"
  },
  {
    "text": "loads it in you're going to replace a bunch of the instructions with kernel specifics so if you think about I want",
    "start": "494699",
    "end": "501840"
  },
  {
    "text": "to read a structure a field in a structure maybe the PID of a task or something and when you do that that PID",
    "start": "501840",
    "end": "508379"
  },
  {
    "text": "location that structure you're going to say read the task struct and then read the offset into that task direct is not",
    "start": "508379",
    "end": "515279"
  },
  {
    "text": "the same across all the kernels so what it will do when you load your program but the core infrastructure does is",
    "start": "515279",
    "end": "520320"
  },
  {
    "text": "rewrite those instructions so that they actually read what you're interested in so for one that's interesting because now your set of instructions that you",
    "start": "520320",
    "end": "526620"
  },
  {
    "text": "downloaded onto your program it's not the same instructions that you actually run okay um just one I one kind of point on why",
    "start": "526620",
    "end": "533220"
  },
  {
    "text": "your BPF program is sort of different than just a set of instructions in",
    "start": "533220",
    "end": "538260"
  },
  {
    "text": "addition you have a bunch of maps so the maps are the piece between BPF um between the kernel and user space",
    "start": "538260",
    "end": "544560"
  },
  {
    "text": "that communicate between the different programs so your kernel piece might write to that BPF map but also multiple",
    "start": "544560",
    "end": "550680"
  },
  {
    "text": "user space applications might write to that map are multiple kernel pieces might write to that Spectrum so if you think about it it's almost like a um",
    "start": "550680",
    "end": "556320"
  },
  {
    "text": "like a message bus between different programs and applications it can be memory mapped for example so that",
    "start": "556320",
    "end": "562800"
  },
  {
    "text": "influences what map that program is attached to will influence kind of what the system is doing",
    "start": "562800",
    "end": "568560"
  },
  {
    "text": "um and then you know there's what are you connected to what type of program you are and so on",
    "start": "568560",
    "end": "574019"
  },
  {
    "text": "um and all that together in my mind is actually what you want to monitor you want to monitor that bundle of BPF stuff",
    "start": "574019",
    "end": "580320"
  },
  {
    "text": "because if you imagine a BPF program that's connected to the wrong map is going to be buggy or Worse malicious a",
    "start": "580320",
    "end": "588360"
  },
  {
    "text": "BPF program that's attached to the wrong function isn't going to work either in the way you expect so you really want to",
    "start": "588360",
    "end": "594180"
  },
  {
    "text": "get that full full profile um this is a diagram that Brendan Gregg",
    "start": "594180",
    "end": "600000"
  },
  {
    "text": "made and then we modified it slightly Daniel borkman um one of my colleagues also modified it and what it shows Is That Flow graph of",
    "start": "600000",
    "end": "607620"
  },
  {
    "text": "what loading a BPF program involves and so on the right side you see the application side what is the BPF",
    "start": "607620",
    "end": "613140"
  },
  {
    "text": "application or sorry yeah left side you see the BPF application and what we have over there",
    "start": "613140",
    "end": "620040"
  },
  {
    "text": "is like the instructions like we talked about you have a compiler because at some point you need to create probably C",
    "start": "620040",
    "end": "626339"
  },
  {
    "text": "code into bytecode um and you create your maps and all this kind of stuff and then what we see",
    "start": "626339",
    "end": "631680"
  },
  {
    "text": "between the left and the right side is the boundary between the um between the kernel and the user space slide and you",
    "start": "631680",
    "end": "639360"
  },
  {
    "text": "see a bunch of different objects you can modify the bottom there you have perforing BPF ring buffer shared Maps",
    "start": "639360",
    "end": "646320"
  },
  {
    "text": "Perforating is just a high performance way to get stuff out of the kernel between user space and kernel shared BPF",
    "start": "646320",
    "end": "652620"
  },
  {
    "text": "Maps or any of the other map types we have hash Maps array Maps Stacks so on people are always adding",
    "start": "652620",
    "end": "660779"
  },
  {
    "text": "new things there and then the top is where you actually load your programs which is actually done through a system",
    "start": "660779",
    "end": "666240"
  },
  {
    "text": "call and um and loaded that way with an opcode",
    "start": "666240",
    "end": "672240"
  },
  {
    "text": "so when we think about monitoring this the question is like how do we want to monitor this well we don't want to hook",
    "start": "672240",
    "end": "679079"
  },
  {
    "text": "the syscalls directly usually there's a good reason for that one of them being",
    "start": "679079",
    "end": "686820"
  },
  {
    "text": "that we don't want to hook every possible syscall that interfaces with BPF and so what we do is we hook the BPF",
    "start": "686820",
    "end": "692220"
  },
  {
    "text": "verifier the verifier is the piece that when you load your program it's going to make sure your program is safe to run in",
    "start": "692220",
    "end": "697860"
  },
  {
    "text": "the kernel it's going to make sure it's not writing to random data trying not to make sure it's not reading random data",
    "start": "697860",
    "end": "702920"
  },
  {
    "text": "it'll also do other things for safety uh check for divide by zero those kind of",
    "start": "702920",
    "end": "708420"
  },
  {
    "text": "things that you would think of what should normally cause seg faults in normal programs so there's one one reason to put it",
    "start": "708420",
    "end": "715140"
  },
  {
    "text": "there is just because it's the central place where all BPF programs come through the other advantage of having it",
    "start": "715140",
    "end": "720360"
  },
  {
    "text": "there is it's after the user to Kernel space copy okay so one thing about BPF",
    "start": "720360",
    "end": "726060"
  },
  {
    "text": "if you hook a syscall what can happen is if you try to read user memory which is just a pointer into user memory it's",
    "start": "726060",
    "end": "732899"
  },
  {
    "text": "entirely owned by the user space process at that point right so from a security standpoint we don't want to try to read",
    "start": "732899",
    "end": "738899"
  },
  {
    "text": "user memory and race with a user right because a user owns the memory they can they can change the data right so if we're trying",
    "start": "738899",
    "end": "745260"
  },
  {
    "text": "to do a security property and we say I want to read your instructions or read the name of your BPF program",
    "start": "745260",
    "end": "751500"
  },
  {
    "text": "and I'm going to say do some some analysis of that program from the BPS side or even if I'm going to copy it out",
    "start": "751500",
    "end": "757740"
  },
  {
    "text": "to user space for sort of post analysis I need to make sure that I can't do that copy and then have the user just change",
    "start": "757740",
    "end": "764820"
  },
  {
    "text": "the data right there's also a more fundamental reason um would be that user space can actually",
    "start": "764820",
    "end": "770579"
  },
  {
    "text": "just fault right you try to read user memory it's not in um it's not in Cache it's going to fault",
    "start": "770579",
    "end": "776459"
  },
  {
    "text": "and then because BPF on most instances does not want to sleep will not be able",
    "start": "776459",
    "end": "781920"
  },
  {
    "text": "to pull that fault into the memory and so what you'll get is just an error you'll get no data and now you have a",
    "start": "781920",
    "end": "788519"
  },
  {
    "text": "big glaring Gap in your um in your security analysis tools presumably",
    "start": "788519",
    "end": "793740"
  },
  {
    "text": "running behind this um so that's why we hook BPF verify the summary is we see every BPF program",
    "start": "793740",
    "end": "799800"
  },
  {
    "text": "that's loaded we've put a BPF program right on that call anytime you load something we'll get a call back and then",
    "start": "799800",
    "end": "805980"
  },
  {
    "text": "I'll talk in the next couple slides what we do with that callback and then we also hook these other entries you have",
    "start": "805980",
    "end": "811620"
  },
  {
    "text": "to be a little bit careful for the syscall reason um they're actually done on the other side of the copy inside",
    "start": "811620",
    "end": "818519"
  },
  {
    "text": "that was this call so they're not technically ciscalled but in this box we just show them on the edge there",
    "start": "818519",
    "end": "823680"
  },
  {
    "text": "um and those are for all your maps and the important thing is um if you look at that dotted line everything that's going",
    "start": "823680",
    "end": "829560"
  },
  {
    "text": "from the user space to Kernel space going across that dotted line can't get to the core networking part in this",
    "start": "829560",
    "end": "836339"
  },
  {
    "text": "example but we have other slides that show kind of K probes and other things can't get to the far right without going",
    "start": "836339",
    "end": "841680"
  },
  {
    "text": "from one of our red boxes from left to right",
    "start": "841680",
    "end": "845959"
  },
  {
    "text": "oh okay so the the text in red is where we're going to put hooks um BPF hooks to",
    "start": "849000",
    "end": "856800"
  },
  {
    "text": "capture the BPF loads and so the um sorry if I wasn't clear so when you",
    "start": "856800",
    "end": "862500"
  },
  {
    "text": "look at like this flowchart going from left to right we want to make sure that we go through a red box before we get to",
    "start": "862500",
    "end": "868139"
  },
  {
    "text": "the far right where the programs actually run to ensure that our analysis",
    "start": "868139",
    "end": "873180"
  },
  {
    "text": "tools that are running in BPF get an event that something happened from the from the application to the kernel side",
    "start": "873180",
    "end": "879120"
  },
  {
    "text": "is that clear great perfect thanks sorry about that if I didn't say that up front",
    "start": "879120",
    "end": "885420"
  },
  {
    "text": "so then once we get this flowchart instrumented with BPF we now have a way",
    "start": "885420",
    "end": "892320"
  },
  {
    "text": "to get these events so then the question is like what are we actually looking for and",
    "start": "892320",
    "end": "897480"
  },
  {
    "text": "what do we care about so the first case in our kind of cartoon picture here is",
    "start": "897480",
    "end": "903660"
  },
  {
    "text": "the good case where you have some application I call it Alice here",
    "start": "903660",
    "end": "910019"
  },
  {
    "text": "um that application probably has a hash associated with it that's like a shot",
    "start": "910019",
    "end": "915240"
  },
  {
    "text": "256 for the executable I called it Foo here but you know usually it's 256 a",
    "start": "915240",
    "end": "920820"
  },
  {
    "text": "shot 256 or 512 or whatever you set up your system for and then it has a program and some maps",
    "start": "920820",
    "end": "927420"
  },
  {
    "text": "so alice.o is the BPF executable here and then I call it map a and map B are those two maps that let you push data",
    "start": "927420",
    "end": "934019"
  },
  {
    "text": "between kernel and user space um what that application is then going to do is cause that call that CIS BPF",
    "start": "934019",
    "end": "940680"
  },
  {
    "text": "call that's the system call to load a BPF program if you go back a slide to this what that's going to do is cause",
    "start": "940680",
    "end": "948420"
  },
  {
    "text": "that BPF loader Block in the Middle top middle there to call the BPF verifier with that alice.o which is then going to",
    "start": "948420",
    "end": "955680"
  },
  {
    "text": "trigger our event system so that we get a notification that a program has actually been loaded okay",
    "start": "955680",
    "end": "961740"
  },
  {
    "text": "and then on the bottom here as I put what our system spits out at that event we see that event we say there's a BPF",
    "start": "961740",
    "end": "968339"
  },
  {
    "text": "load happened um this is annotated with the kubernetes",
    "start": "968339",
    "end": "974339"
  },
  {
    "text": "namespace so we put the kubernetes namespace there BPF and S the Pod Alice in this case",
    "start": "974339",
    "end": "982019"
  },
  {
    "text": "along with the application that loaded it Espin Alice we can put the shot 256",
    "start": "982019",
    "end": "988620"
  },
  {
    "text": "there if you have the system set up for it we gave a talk at kubecon about that so I won't go into details there we give",
    "start": "988620",
    "end": "995100"
  },
  {
    "text": "you the program type which will tell you what it what kind of program it was if you're familiar with BPF there's K",
    "start": "995100",
    "end": "1000199"
  },
  {
    "text": "probes and there's networking Hooks and there's security Hooks and all this kind of stuff so you kind of want to know that as well and then we'll give you",
    "start": "1000199",
    "end": "1006440"
  },
  {
    "text": "some details about the function about the instruction set that was loaded they have a name Alice function here",
    "start": "1006440",
    "end": "1012079"
  },
  {
    "text": "extraction count and because with BPF program now has access to the entire BPF op as it's being loaded we can put",
    "start": "1012079",
    "end": "1020000"
  },
  {
    "text": "arbitrary other data there as well for pretty printing pick some things that we think are as interesting but we actually",
    "start": "1020000",
    "end": "1026540"
  },
  {
    "text": "have access to the entire BPF instruction so you can do things like copy that program out so that you have a",
    "start": "1026540",
    "end": "1033620"
  },
  {
    "text": "copy of every program ppf program that was loaded they can be kind of large 4K instructions but you know one page",
    "start": "1033620",
    "end": "1040880"
  },
  {
    "text": "BPF loading BPF programs is usually not something that you're doing very frequently so doing a copy of 4K bytes",
    "start": "1040880",
    "end": "1047058"
  },
  {
    "text": "is usually negligible but it depends on what your use case actually is so this is the good case program gets loaded",
    "start": "1047059",
    "end": "1054200"
  },
  {
    "text": "events happen nice nice pretty printing of the auditing flow",
    "start": "1054200",
    "end": "1059840"
  },
  {
    "text": "so let's just explode our example slightly and to check my time explode our example",
    "start": "1059840",
    "end": "1067039"
  },
  {
    "text": "slightly and we'll add Eve and Bob here and of course they have their Shaws and I think we called it",
    "start": "1067039",
    "end": "1072500"
  },
  {
    "text": "um bad and bar there so the next question is what happens if Eve tries to load something we don't",
    "start": "1072500",
    "end": "1078919"
  },
  {
    "text": "expect Eve to load something right well just like before since the since the tooling doesn't care right it's going to",
    "start": "1078919",
    "end": "1085700"
  },
  {
    "text": "give you the event for the two but what's actually a little bit extra interesting about",
    "start": "1085700",
    "end": "1090799"
  },
  {
    "text": "this is I think you would make the argument that if Eve is running in its own pod you",
    "start": "1090799",
    "end": "1096559"
  },
  {
    "text": "probably should have never gave it cut BPF if it wasn't meant to load BPF programs right like basic uh basic",
    "start": "1096559",
    "end": "1102380"
  },
  {
    "text": "capabilities here for pods but what's extra interesting about this is even if this eve happens to be running in Alice",
    "start": "1102380",
    "end": "1109160"
  },
  {
    "text": "which you gave cap vpf because you needed Alice to load a BPF program you still get the audit so if for some",
    "start": "1109160",
    "end": "1115760"
  },
  {
    "text": "reason something inside your pod is loading BPF programs besides what you expect to you'll get an audit record for",
    "start": "1115760",
    "end": "1121460"
  },
  {
    "text": "it and the next interesting thing is with tetragon we have enforcement and which",
    "start": "1121460",
    "end": "1127460"
  },
  {
    "text": "allows you to say match on binaries or Shaw 256s if you want it's easier to",
    "start": "1127460",
    "end": "1133100"
  },
  {
    "text": "look at it's easier to look at um uh program names than Shaw names what",
    "start": "1133100",
    "end": "1139160"
  },
  {
    "text": "you can say is if I see this call and it's not Alice",
    "start": "1139160",
    "end": "1144380"
  },
  {
    "text": "stop it from happening right so even if you're in the same pod so you need to have cat BPF but you know exactly what",
    "start": "1144380",
    "end": "1150620"
  },
  {
    "text": "program should be loading BPF programs you can encode that into your policy that's a crd and tetragon world and then",
    "start": "1150620",
    "end": "1157100"
  },
  {
    "text": "what happens is if anything else inside that pod tries to load the program under BPF program we'll block it out right",
    "start": "1157100",
    "end": "1164660"
  },
  {
    "text": "an extra layer of kind of protection from things trying to load BPF programs for you",
    "start": "1164660",
    "end": "1170740"
  },
  {
    "text": "um and of course like I mentioned you could also use Shaw's but that's a different talk requires a little bit of extra setup",
    "start": "1170840",
    "end": "1177380"
  },
  {
    "text": "um so the next question would be what happens if you have a file system problem where you have since Maps inside",
    "start": "1177380",
    "end": "1184940"
  },
  {
    "text": "of BPF are usually filed descriptors but they're always file descriptors sometimes those file descriptors are",
    "start": "1184940",
    "end": "1191240"
  },
  {
    "text": "penned into a file system and so you might say well Eve tries to access a file from Alice and this could be like a",
    "start": "1191240",
    "end": "1198260"
  },
  {
    "text": "policy file it might have sensitive data in it and so on um well your first layer of his fans should",
    "start": "1198260",
    "end": "1204140"
  },
  {
    "text": "be well don't let Eve actually access the file you know maintain your amounts but if you can't do that for some other",
    "start": "1204140",
    "end": "1210440"
  },
  {
    "text": "reason tetragon can also monitor file access so you'll be able to see which BPF programs access which files those",
    "start": "1210440",
    "end": "1218299"
  },
  {
    "text": "files are to Maps so you can see Eve is accessing map B there and um again you",
    "start": "1218299",
    "end": "1224900"
  },
  {
    "text": "can enforce or you can just create an audit Trail for it",
    "start": "1224900",
    "end": "1229179"
  },
  {
    "text": "um so this is so that",
    "start": "1232280",
    "end": "1239299"
  },
  {
    "text": "um if this is the other discussion we're talking about Bob loading BPF and I'll just skip this one I think for",
    "start": "1239299",
    "end": "1244820"
  },
  {
    "text": "now so um in summary what we've covered then is Alice is the good case Alice loads a",
    "start": "1244820",
    "end": "1251900"
  },
  {
    "text": "program we get a nice audit log for it Eve is the malicious program or at least erroneous program tries to load",
    "start": "1251900",
    "end": "1258200"
  },
  {
    "text": "something gets blocked even when it's in the same pod because we built this policy um",
    "start": "1258200",
    "end": "1264020"
  },
  {
    "text": "and then we have the file monitoring so there is one case that I want to call out that the um we're working on inside",
    "start": "1264020",
    "end": "1269780"
  },
  {
    "text": "the BPF foundation and there's kind of a working group around this if you're interested is what you can say well what",
    "start": "1269780",
    "end": "1275299"
  },
  {
    "text": "if Alice or Bob in this case is allowed to load BPF programs but they load a",
    "start": "1275299",
    "end": "1280520"
  },
  {
    "text": "different BPF program than they are supposed to meaning you launch Bob you checked you did some",
    "start": "1280520",
    "end": "1287140"
  },
  {
    "text": "Integrity check to make sure it has the right Shaw somewhere along its lifetime it decided to load some random",
    "start": "1287140",
    "end": "1293059"
  },
  {
    "text": "instructions that are not the instructions you expect right which it's allowed to do but these are perhaps",
    "start": "1293059",
    "end": "1299179"
  },
  {
    "text": "instructions you didn't want it to load like a malicious program because the maybe Bob has been compromised somehow",
    "start": "1299179",
    "end": "1305600"
  },
  {
    "text": "um so there's a couple things you can do",
    "start": "1305600",
    "end": "1310658"
  },
  {
    "text": "one thing we've suggested is if you just keep a log of all these app these programs since they're loaded copy the",
    "start": "1310940",
    "end": "1317179"
  },
  {
    "text": "instructions out at least you'll know what programs are loaded and you can kind of post analysis and say this",
    "start": "1317179",
    "end": "1322880"
  },
  {
    "text": "application is loading this BPF program it's not the one I expect it's a new one I've seen I've never seen this one",
    "start": "1322880",
    "end": "1328400"
  },
  {
    "text": "before please fire an alert off to my alerting tools the there's a working group also going",
    "start": "1328400",
    "end": "1334340"
  },
  {
    "text": "on about how to get the right um how to put a Shaw on that BPF program",
    "start": "1334340",
    "end": "1340220"
  },
  {
    "text": "itself and this is actually more difficult than it may sound on the surface because if",
    "start": "1340220",
    "end": "1346100"
  },
  {
    "text": "we go back to when I talked about the core that that application is not static it's being Rewritten by the runtime so",
    "start": "1346100",
    "end": "1353179"
  },
  {
    "text": "if you were to just take a shot of the program up front it wouldn't match what the Shah was",
    "start": "1353179",
    "end": "1359059"
  },
  {
    "text": "after the program's been Rewritten to load on your kernel so um what we're doing is trying to get the",
    "start": "1359059",
    "end": "1364880"
  },
  {
    "text": "kernel to do a lot of these rewrites and have sort of a consistent Shaw before and after the modifications",
    "start": "1364880",
    "end": "1371000"
  },
  {
    "text": "um find me afterwards if you want to talk about it it's really quite interesting but it's it's a kind of a work in progress I don't think anyone",
    "start": "1371000",
    "end": "1377240"
  },
  {
    "text": "has it fully deployed yet although some of the newer kernels can support most of the base functionality for that",
    "start": "1377240",
    "end": "1384700"
  },
  {
    "text": "and I think in summary like you said Alice is good to load we get an audit we can block Eve we can",
    "start": "1384700",
    "end": "1392059"
  },
  {
    "text": "watch the files and then we got a plan um at least to audit the the kind of erroneous program loading bad",
    "start": "1392059",
    "end": "1397400"
  },
  {
    "text": "instructions um and then in the future we'll have a full solution for signing the VPN",
    "start": "1397400",
    "end": "1402500"
  },
  {
    "text": "programs yeah so in the last 10 minutes five",
    "start": "1402500",
    "end": "1407840"
  },
  {
    "text": "minutes I will just show you like a quick demo like how could we actually do it with um tetragon",
    "start": "1407840",
    "end": "1414080"
  },
  {
    "text": "so how we will do it we will introduce a test environment apply a security policy",
    "start": "1414080",
    "end": "1419780"
  },
  {
    "text": "which would actually observe BPF program loads and the map creations and then we",
    "start": "1419780",
    "end": "1425419"
  },
  {
    "text": "will have like a simple use case just from raiko test pod it's called BPF Droid and then the last one will be",
    "start": "1425419",
    "end": "1433520"
  },
  {
    "text": "um we will actually see like what kind of BPF programs clu loads and then what kind of BPF map serium craze during its",
    "start": "1433520",
    "end": "1441140"
  },
  {
    "text": "boot up so how the test environment looks like it's going to be a one node GK cluster",
    "start": "1441140",
    "end": "1447080"
  },
  {
    "text": "we are going to have tetragon deployed on it as a demon set and then we will",
    "start": "1447080",
    "end": "1453260"
  },
  {
    "text": "apply a security policy which would generate events during a BPF program loads and then BPF map creation so for",
    "start": "1453260",
    "end": "1461780"
  },
  {
    "text": "example if you would have like a multiple node cluster then you would",
    "start": "1461780",
    "end": "1466940"
  },
  {
    "text": "Deploy tetragon on each node as well and then you would use a grpc collector to",
    "start": "1466940",
    "end": "1472100"
  },
  {
    "text": "observe actually all these events so this is how actually the policy would",
    "start": "1472100",
    "end": "1477919"
  },
  {
    "text": "look like uh we are going to observe like three main kernel functions BPF",
    "start": "1477919",
    "end": "1483080"
  },
  {
    "text": "check so this is when the verifier actually checks the program before loading it we have security perfect",
    "start": "1483080",
    "end": "1490400"
  },
  {
    "text": "event unlock so this is actually creating a map um to transfer events between user space",
    "start": "1490400",
    "end": "1496159"
  },
  {
    "text": "and the kernel and then the last one is security BPF metallic this is basically",
    "start": "1496159",
    "end": "1501919"
  },
  {
    "text": "um when we create a BPF map so we have a simpler pod and then what",
    "start": "1501919",
    "end": "1508580"
  },
  {
    "text": "it's doing it's actually loading uh BPF programs yet a BPF prog and then via",
    "start": "1508580",
    "end": "1514280"
  },
  {
    "text": "bpf2 and then it's going to sleep for 30 seconds and then it's going to create a",
    "start": "1514280",
    "end": "1519799"
  },
  {
    "text": "map a tetragram BPF map with hash type and then it's going to sleep for 30",
    "start": "1519799",
    "end": "1525320"
  },
  {
    "text": "seconds as well and then this is actually how the events",
    "start": "1525320",
    "end": "1530840"
  },
  {
    "text": "look like so we extract it as Json events and this is just a CLI like 3D",
    "start": "1530840",
    "end": "1536419"
  },
  {
    "text": "printing it and then basically in the first row we can see that the BPF tool probe load process started we can see",
    "start": "1536419",
    "end": "1543860"
  },
  {
    "text": "the kubernetes namespace and then the Pod we can see Washington namespace and the Seattle BPF Android mode and then on",
    "start": "1543860",
    "end": "1552860"
  },
  {
    "text": "the third row we can actually see like that our program was loaded we can see",
    "start": "1552860",
    "end": "1557900"
  },
  {
    "text": "the function name the amazing function and the instructions and then a couple of row later we can actually see like",
    "start": "1557900",
    "end": "1564140"
  },
  {
    "text": "when the map was created so we can see like it's tetragram BPF we can see the key and values and then we can see also",
    "start": "1564140",
    "end": "1571520"
  },
  {
    "text": "the um hashmap type so for cerium it's a bit more",
    "start": "1571520",
    "end": "1577279"
  },
  {
    "text": "complicated so I will just like highlight certain events and steps that are that are executed during the boot up",
    "start": "1577279",
    "end": "1585140"
  },
  {
    "text": "so it's going to grow probe a bunch of features and maps that are available in the curler version and then it's going",
    "start": "1585140",
    "end": "1592279"
  },
  {
    "text": "to check and remove some IP tables and then it's going to execute a script",
    "start": "1592279",
    "end": "1598039"
  },
  {
    "text": "um basically figuring out like which programs to load and then what network devices to load them on and then",
    "start": "1598039",
    "end": "1604460"
  },
  {
    "text": "basically it's going to compile those programs and then basically it's going to load those programs for each pod on",
    "start": "1604460",
    "end": "1611539"
  },
  {
    "text": "the Node so basically this is the screenshot um that was captured by during the demo",
    "start": "1611539",
    "end": "1617659"
  },
  {
    "text": "and then we will see it alive so these are all the programs um that are going to be loaded for each",
    "start": "1617659",
    "end": "1623120"
  },
  {
    "text": "but on the Node so we can actually see here for example um an example like a program named sand",
    "start": "1623120",
    "end": "1630020"
  },
  {
    "text": "drop node so this is basically Bambi send notification whenever a packet was",
    "start": "1630020",
    "end": "1635059"
  },
  {
    "text": "dropped we can actually see how many instruction did it count we can also see",
    "start": "1635059",
    "end": "1640279"
  },
  {
    "text": "the Terra call handling programs um we can also see policy handle so this",
    "start": "1640279",
    "end": "1647059"
  },
  {
    "text": "is related to how psyllium handles actually um Network policies and so on",
    "start": "1647059",
    "end": "1653059"
  },
  {
    "text": "so I will just switch the terminal and show it um live",
    "start": "1653059",
    "end": "1659860"
  },
  {
    "text": "if it works all right",
    "start": "1659900",
    "end": "1666020"
  },
  {
    "text": "so I'm just connected to the GK cluster and I should have tetragon running on it",
    "start": "1666020",
    "end": "1675580"
  },
  {
    "text": "all right here we go so let me just start to observe the events related to the",
    "start": "1680960",
    "end": "1687679"
  },
  {
    "text": "um to the BPF trade the test spot first and",
    "start": "1687679",
    "end": "1693740"
  },
  {
    "text": "then after I will show the celium use case as well",
    "start": "1693740",
    "end": "1698380"
  },
  {
    "text": "all right so I will just apply the pod",
    "start": "1724059",
    "end": "1729220"
  },
  {
    "text": "and the money one seeds get it gets created we should see some events as well",
    "start": "1735799",
    "end": "1742340"
  },
  {
    "text": "all right so basically we will see like the bpf2 progload you can see the",
    "start": "1742340",
    "end": "1747620"
  },
  {
    "text": "program uh program type here um like BPI prototype crypto we can see",
    "start": "1747620",
    "end": "1754640"
  },
  {
    "text": "the functions and the instructions and then we can see actually the sleep and then we can see also the kubernetes",
    "start": "1754640",
    "end": "1761480"
  },
  {
    "text": "information here like Washington namespace and the Seattle BPF Droid dot source code and then it's going to stay",
    "start": "1761480",
    "end": "1768559"
  },
  {
    "text": "for 30 seconds and then we are going to see actually the um the map creation so it's BPF mapa log",
    "start": "1768559",
    "end": "1775279"
  },
  {
    "text": "then we can actually see the BPF map uh the hash no it's a hash map and then we",
    "start": "1775279",
    "end": "1781460"
  },
  {
    "text": "can see the type here and then we can actually see the name the map name and",
    "start": "1781460",
    "end": "1786799"
  },
  {
    "text": "then basically a key and values and the max entries so I will actually just stop this and",
    "start": "1786799",
    "end": "1794179"
  },
  {
    "text": "then I will start to observe the events from psyllium I actually have psyllium set up on on a different namespace it's",
    "start": "1794179",
    "end": "1802640"
  },
  {
    "text": "the celium namespace all right",
    "start": "1802640",
    "end": "1808340"
  },
  {
    "text": "so it's actually running on the celium namespace so I will just restart the",
    "start": "1808340",
    "end": "1813559"
  },
  {
    "text": "agent and then we will see all the BPF program loads and map Creations so it's",
    "start": "1813559",
    "end": "1819679"
  },
  {
    "text": "going to load or going to probe a bunch of features like what features are available on that kernel version and",
    "start": "1819679",
    "end": "1826399"
  },
  {
    "text": "what BPF map types are available on that corner version so",
    "start": "1826399",
    "end": "1831620"
  },
  {
    "text": "um we will see a bunch of Proverbs in the beginning okay so we will see actually the",
    "start": "1831620",
    "end": "1838340"
  },
  {
    "text": "termination we will see the put up",
    "start": "1838340",
    "end": "1843679"
  },
  {
    "text": "so these are all the probes that cilium is actually like running to figure out like what features are available and",
    "start": "1843679",
    "end": "1849799"
  },
  {
    "text": "what what map types are available we will see some IP table rules like",
    "start": "1849799",
    "end": "1856279"
  },
  {
    "text": "figuring out like what um delete delete so",
    "start": "1856279",
    "end": "1863960"
  },
  {
    "text": "I will just like [Music] um highlight the ones which are related to",
    "start": "1863960",
    "end": "1869840"
  },
  {
    "text": "program loads so there is always like a recurring pattern here and then it always starts",
    "start": "1869840",
    "end": "1877340"
  },
  {
    "text": "with like um filter replace and then basically it ends when the command exits so for",
    "start": "1877340",
    "end": "1884360"
  },
  {
    "text": "example these are what the BPF programs that are loaded for example for each pod",
    "start": "1884360",
    "end": "1889640"
  },
  {
    "text": "and then we can see for example the center of notification here and then for",
    "start": "1889640",
    "end": "1894860"
  },
  {
    "text": "example the terracott related ones and then we can also see for example handle policy which is like how",
    "start": "1894860",
    "end": "1902299"
  },
  {
    "text": "um psyllium handle policies and then basically it just does it for",
    "start": "1902299",
    "end": "1907820"
  },
  {
    "text": "each board on that specific node so this is for example like um audiover the",
    "start": "1907820",
    "end": "1912919"
  },
  {
    "text": "example like how could we create for example audit list for each programs like",
    "start": "1912919",
    "end": "1918020"
  },
  {
    "text": "um from each pod from each binary and then basically keep track of like what",
    "start": "1918020",
    "end": "1923779"
  },
  {
    "text": "has been loaded and should we expect this um or not",
    "start": "1923779",
    "end": "1929919"
  },
  {
    "text": "so let me just switch back to these slides",
    "start": "1929980",
    "end": "1934658"
  },
  {
    "text": "groups",
    "start": "1941659",
    "end": "1944320"
  },
  {
    "text": "all right so as I wrap up like ebpf is on the rise and then we see more and",
    "start": "1948380",
    "end": "1953960"
  },
  {
    "text": "more applications for networking observability and security um it's basically cross-platform and",
    "start": "1953960",
    "end": "1961159"
  },
  {
    "text": "then what is important to keep track and that would it like um who is watching eppf like um reach",
    "start": "1961159",
    "end": "1968240"
  },
  {
    "text": "programs and Maps were created by who and when and then basically we saw an",
    "start": "1968240",
    "end": "1973640"
  },
  {
    "text": "implementation on how tetragon could do it so a bit more on like how to contribute",
    "start": "1973640",
    "end": "1981940"
  },
  {
    "text": "sorry there we go um how to contribute yeah so join the join",
    "start": "1986240",
    "end": "1993919"
  },
  {
    "text": "the slack Channel come to the GitHub page and um",
    "start": "1993919",
    "end": "1999559"
  },
  {
    "text": "what else did I put up sorry um oh we're always looking for more use cases so if you do if you go to the",
    "start": "1999559",
    "end": "2005380"
  },
  {
    "text": "tetracon repo there's the crd's examples um you know they're sort of incomplete list of things that we care about but",
    "start": "2005380",
    "end": "2011200"
  },
  {
    "text": "you know mostly it's things that I thought were interesting but either contribute or if you just file an issue",
    "start": "2011200",
    "end": "2017679"
  },
  {
    "text": "and say like I have this use case um the nice thing about getting them in there is that we generally run those",
    "start": "2017679",
    "end": "2023980"
  },
  {
    "text": "before we do a release so if you're using tetragon for something or you want to use tetragon for something put your",
    "start": "2023980",
    "end": "2029500"
  },
  {
    "text": "use case in there and that's a really good way to make sure that we know if we break it somehow even better would be to write a CI test",
    "start": "2029500",
    "end": "2036460"
  },
  {
    "text": "case but hey we do run those before we release so that's kind of your first",
    "start": "2036460",
    "end": "2041500"
  },
  {
    "text": "gate um yeah and any feedback uh let us know to",
    "start": "2041500",
    "end": "2047080"
  },
  {
    "text": "find a bug let us know of course we always always fixing things and adding new things so if you have a new use case",
    "start": "2047080",
    "end": "2052720"
  },
  {
    "text": "let us know um and you know documentation and all that good stuff would be would be great",
    "start": "2052720",
    "end": "2058240"
  },
  {
    "text": "so thanks a lot okay thank you [Applause]",
    "start": "2058240",
    "end": "2066759"
  },
  {
    "text": "any questions right we have a few minutes for questions if anybody's got anything if not",
    "start": "2071619",
    "end": "2078280"
  },
  {
    "text": "yeah",
    "start": "2078280",
    "end": "2080580"
  },
  {
    "text": "okay I'll just repeat the question the question is does tetragon use bpfl at",
    "start": "2085300",
    "end": "2090700"
  },
  {
    "text": "SIM for anything um to preemptively block things no we do not use BPF LSM we do preemptively block",
    "start": "2090700",
    "end": "2096460"
  },
  {
    "text": "things though we have a synchronous way to use um to kill processes so instead of blocking the call we just kill the",
    "start": "2096460",
    "end": "2103000"
  },
  {
    "text": "process if it's violating the policy no the action would not have gone",
    "start": "2103000",
    "end": "2110440"
  },
  {
    "text": "through because we do the Sig the the send happens in in line in the kernel so",
    "start": "2110440",
    "end": "2115540"
  },
  {
    "text": "we kill the process from the BPF program which will then cause all of the cores on the application to see it as a",
    "start": "2115540",
    "end": "2121839"
  },
  {
    "text": "terminating signal that it cannot block because it's a Sig kill so your application cannot catch and block a Sig",
    "start": "2121839",
    "end": "2127060"
  },
  {
    "text": "Kill from the kernel is from a BPF probe yeah",
    "start": "2127060",
    "end": "2132339"
  },
  {
    "text": "so there's a BPF helper to do it yeah",
    "start": "2132339",
    "end": "2137500"
  },
  {
    "text": "yeah and so that does it uh there there is uh some slight",
    "start": "2137500",
    "end": "2142839"
  },
  {
    "text": "caution you can't do that from anywhere in the kernel but when we deploy this we ensure that we do it from the right places in the kernel so it requires some",
    "start": "2142839",
    "end": "2149320"
  },
  {
    "text": "care when using but um it is doable",
    "start": "2149320",
    "end": "2154200"
  },
  {
    "text": "yeah anything else maybe I just that's where that um when",
    "start": "2155740",
    "end": "2162339"
  },
  {
    "text": "you looked at the BPF when we stopped blocked the BPF program that's that's how we did that",
    "start": "2162339",
    "end": "2167640"
  },
  {
    "text": "anything else cool all right well thanks for coming yeah",
    "start": "2169000",
    "end": "2175300"
  },
  {
    "text": "thank you for coming [Applause]",
    "start": "2175300",
    "end": "2180859"
  }
]