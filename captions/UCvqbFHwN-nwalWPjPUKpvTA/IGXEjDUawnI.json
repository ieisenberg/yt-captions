[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "hello folks i'm going to talk a little bit about stateful applications and patterns for",
    "start": "80",
    "end": "5600"
  },
  {
    "text": "building stateful applications with serverless i'm tanmai i'm one of the founders at hasura",
    "start": "5600",
    "end": "11280"
  },
  {
    "text": "a lot of this talk is inspired by the work that we've done with asura with our users and with the product itself to give you",
    "start": "11280",
    "end": "19039"
  },
  {
    "text": "a quick background um is a graphql engine it's a service that provides an instant graphql api on",
    "start": "19039",
    "end": "25599"
  },
  {
    "text": "your databases specifically the postgres family and other databases coming soon as well",
    "start": "25599",
    "end": "31279"
  },
  {
    "text": "you can also use hustler to kind of create a unified graphql api over multiple data sources so not just",
    "start": "31279",
    "end": "36480"
  },
  {
    "text": "a database but also graphql services and rest services like sas services hustler also provides",
    "start": "36480",
    "end": "42800"
  },
  {
    "text": "an eventing engine that can help you react to changes on data or react to api events or even time",
    "start": "42800",
    "end": "48399"
  },
  {
    "text": "based events asura runs as a docker container on your own infrastructure or also we also have a managed service that we",
    "start": "48399",
    "end": "54480"
  },
  {
    "text": "launched recently at hasta dot io cloud as well as open source under the apache license and so",
    "start": "54480",
    "end": "61039"
  },
  {
    "text": "you know do check it out at on on github and uh let us know what you think uh and with that i shall dive in",
    "start": "61039",
    "end": "68640"
  },
  {
    "text": "to the talk so um let's talk a little bit about serverless and why developers",
    "start": "68640",
    "end": "74479"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "love it right um and i'm sure i'm kind of preaching to the coil here but for me in my personal journey when uh",
    "start": "74479",
    "end": "81119"
  },
  {
    "text": "when i started looking at service functions i used to i used to hate serverless uh i was like what what are these",
    "start": "81119",
    "end": "87759"
  },
  {
    "text": "serverless functions right like this is this is terrible because i don't get to use you know whatever framework",
    "start": "87759",
    "end": "92960"
  },
  {
    "text": "or language or runtime that i want to use i have these cold start use cases especially for you know api style use",
    "start": "92960",
    "end": "99360"
  },
  {
    "text": "cases um and then i can't manipulate state i don't have shared memory and so all of these like application server things",
    "start": "99360",
    "end": "105600"
  },
  {
    "text": "that i knew are kind of out of the window right um and so so i didn't like it but over time i realized that you know",
    "start": "105600",
    "end": "111759"
  },
  {
    "text": "the benefits are actually quite real and and the idea that that kind of",
    "start": "111759",
    "end": "118079"
  },
  {
    "text": "serverless and specifically serverless functions are moving towards and the vision that it's moving moving towards",
    "start": "118079",
    "end": "123200"
  },
  {
    "text": "is to say you know how do you get that ultimate place where you can build stuff deploy it and just forget",
    "start": "123200",
    "end": "130959"
  },
  {
    "text": "about it and let it just run and scale and never have any operational issues ever",
    "start": "130959",
    "end": "136480"
  },
  {
    "text": "right that's kind of the ultimate vision right that's what we that's where we want to get to there is an ergonomic benefit right which is basically the the",
    "start": "136480",
    "end": "143599"
  },
  {
    "text": "experience of building things and the experience of deploying things is tremendously improved um and then there's also an economic",
    "start": "143599",
    "end": "149599"
  },
  {
    "text": "benefit which is kind of twofold right sometimes you might have particular loads where the",
    "start": "149599",
    "end": "155440"
  },
  {
    "text": "cost of running serverless or running things as serverless functions is genuinely lower than the cost of kind of maintaining a",
    "start": "155440",
    "end": "161760"
  },
  {
    "text": "service or even otherwise there is usually a fairly uh good impact to your tco right so the",
    "start": "161760",
    "end": "169120"
  },
  {
    "text": "total cost of ownership of basically uh shipping code uh is reduced because there is a significant amount of",
    "start": "169120",
    "end": "175280"
  },
  {
    "text": "expertise that is reduced and the uh and in terms of the number of people that you need the tooling that you need",
    "start": "175280",
    "end": "181040"
  },
  {
    "text": "uh is goes through a reduction and and these kinds of things that i used to not like about serverless functions",
    "start": "181040",
    "end": "186560"
  },
  {
    "start": "186000",
    "end": "186000"
  },
  {
    "text": "right these kind of problems are getting solved right so if you think about for example ah not being able to use my favorite",
    "start": "186560",
    "end": "192159"
  },
  {
    "text": "framework well of course one the the kind of support for different runtimes and different frameworks is itself improving all of",
    "start": "192159",
    "end": "198080"
  },
  {
    "text": "the different serverless vendors and providers and substrates are kind of improving support for runtimes",
    "start": "198080",
    "end": "204400"
  },
  {
    "text": "specifically with the rise of webassembly as a target because you know node.js runtimes have",
    "start": "204400",
    "end": "210400"
  },
  {
    "text": "the v8 times and isolates and stuff have gotten really good uh and that can you can use it as a wasm target and then you can have a bunch of",
    "start": "210400",
    "end": "216799"
  },
  {
    "text": "languages that you can compile down to vassam and run it uh which is nice uh there's still caveats there it's not fully there",
    "start": "216799",
    "end": "223200"
  },
  {
    "text": "but you know there's kind of progress in that direction uh and then of course you have things like cloud run uh where you can kind of you know have",
    "start": "223200",
    "end": "230400"
  },
  {
    "text": "this docker container and so you have a docker image that just runs everything that you want to run and",
    "start": "230400",
    "end": "235599"
  },
  {
    "text": "a container that's triggered on demand right so it's it's a it's a really nice kind of place in the middle uh and and things like this are also",
    "start": "235599",
    "end": "241840"
  },
  {
    "text": "happening um on on the cold starts front uh there's obviously been kind of improvements to",
    "start": "241840",
    "end": "247439"
  },
  {
    "text": "improve cold starts and that's kind of what all the vendors are doing but it's also important to understand that cold starts only really affect",
    "start": "247439",
    "end": "253519"
  },
  {
    "text": "synchronous api style use cases largely i mean not i shouldn't say only but largely affect api style use cases",
    "start": "253519",
    "end": "261199"
  },
  {
    "text": "and the nice thing is that there are patterns that are kind of emerging to solve that problem as well right so for example one of the things",
    "start": "261199",
    "end": "267199"
  },
  {
    "text": "is that if you move to an event-driven style where you're not synchronous but where processing or that",
    "start": "267199",
    "end": "272800"
  },
  {
    "text": "business logic inside the api is running asynchronously it kind of forces your entire application to become reactive right",
    "start": "272800",
    "end": "278960"
  },
  {
    "text": "so you kind of make the api call don't wait for the response let it run let it do a bunch of things come back to you",
    "start": "278960",
    "end": "285199"
  },
  {
    "text": "and then an event gets pushed to you or you subscribe to an event and then the the client is also reactive",
    "start": "285199",
    "end": "291199"
  },
  {
    "text": "right um and that's not ideal but uh you know that's kind of one of the ways to work around that kind",
    "start": "291199",
    "end": "296960"
  },
  {
    "text": "of synchronous problem um but also otherwise there's kind of genuinely amazing technical stuff that's happening for example",
    "start": "296960",
    "end": "302800"
  },
  {
    "text": "cloudflare workers recently launched an update where ah to kind of avoid even hitting that",
    "start": "302800",
    "end": "309520"
  },
  {
    "text": "cold start one they already had millisecond start times uh because of uh because because of the",
    "start": "309520",
    "end": "315039"
  },
  {
    "text": "way that they were using isolates instead of kind of trying to bring up full vms or containers um",
    "start": "315039",
    "end": "320160"
  },
  {
    "text": "and and now the kind of update that they've launched allows uh them to run these isolates or boot them",
    "start": "320160",
    "end": "327039"
  },
  {
    "text": "while the tls handshake is happening because the tls handshake itself takes a millisecond or or two and especially if you factor in",
    "start": "327039",
    "end": "333360"
  },
  {
    "text": "kind of that latency for the client to connect the edge um and then you know do the tls handshake during that time",
    "start": "333360",
    "end": "339520"
  },
  {
    "text": "you can start the process for firing up uh the the serverless function runtime",
    "start": "339520",
    "end": "344960"
  },
  {
    "text": "right um so so there's kind of improvements on that front as well and then of course there's uh this other",
    "start": "344960",
    "end": "351039"
  },
  {
    "text": "problem of dealing with state which is well you know i'm going to talk about it so ha those heart problems are getting solved",
    "start": "351039",
    "end": "357199"
  },
  {
    "text": "as well i'm i'm joking i'm just going to talk about a bunch of these problems i'm not going to address all of the possible",
    "start": "357199",
    "end": "363120"
  },
  {
    "text": "problems they're just maybe a category or a set of problems so uh so you know this pattern is emerging to solve that problem as well",
    "start": "363120",
    "end": "368880"
  },
  {
    "text": "so so let's kind of talk a little bit about state right um so the first question is you know is is state and and being",
    "start": "368880",
    "end": "376160"
  },
  {
    "start": "371000",
    "end": "371000"
  },
  {
    "text": "stateful really that important right um and and the answer is yes because if you're not dealing with state or you",
    "start": "376160",
    "end": "382319"
  },
  {
    "text": "don't have any side effects and you're just running compute well all you're doing is heating up the cpu or someone's cpu uh",
    "start": "382319",
    "end": "387680"
  },
  {
    "text": "and in fact you're heating up the earth and uh and given how uh surprisingly problematic it has been",
    "start": "387680",
    "end": "393520"
  },
  {
    "text": "to agree on the fact that the earth is heating up don't don't don't contribute to it",
    "start": "393520",
    "end": "398560"
  },
  {
    "text": "um but uh uh but kind of more tangibly right like side effects and state is",
    "start": "398560",
    "end": "404160"
  },
  {
    "text": "kind of how ultimately humans deal with is what humans deal with right and how humans trying to talk to computers and",
    "start": "404160",
    "end": "409840"
  },
  {
    "text": "computers talk to computers by which i mean you know the way programs exchange information or the way end users",
    "start": "409840",
    "end": "415280"
  },
  {
    "text": "exchange information programs ah is through state right and so so obviously dealing with state is",
    "start": "415280",
    "end": "421440"
  },
  {
    "text": "important but serverless the entire benefit of serverless is because it's stateless",
    "start": "421440",
    "end": "426880"
  },
  {
    "text": "which means that when you don't deal with things that require shared memory or you don't deal with things that",
    "start": "426880",
    "end": "432479"
  },
  {
    "text": "require you to deal with you know stateful things uh then as as a developer then the cloud vendors",
    "start": "432479",
    "end": "440000"
  },
  {
    "text": "and the the serverless vendors the runtimes can absorb guarantees around scaling or or you know around",
    "start": "440000",
    "end": "446319"
  },
  {
    "text": "concurrent execution right um and uh and and the reason why they're able to absorb those guarantees",
    "start": "446319",
    "end": "451759"
  },
  {
    "text": "is because there's kind of this thing of saying that the developer is not allowed to be stateful and so the",
    "start": "451759",
    "end": "457840"
  },
  {
    "text": "developer can't screw things up and so well you know your code is stateless i mean your code stateless and your code is is",
    "start": "457840",
    "end": "464000"
  },
  {
    "text": "scalable but but the solution that's kind of emerged to deal with this to kind of not have state in your code",
    "start": "464000",
    "end": "470720"
  },
  {
    "text": "to not save to a file uh to not directly speak to a database to not uh",
    "start": "470720",
    "end": "475919"
  },
  {
    "text": "to not have shared memory or deals with things that require shared memory is to serviceify all of these stateful",
    "start": "475919",
    "end": "482080"
  },
  {
    "text": "things so as and that's kind of been a general trend that's happening in the world as well right more and more things more and more",
    "start": "482080",
    "end": "487280"
  },
  {
    "text": "parts of our stack of portions of code that we use to typically write are becoming services they're becoming either sas services or",
    "start": "487280",
    "end": "493759"
  },
  {
    "text": "they're becoming managed services by infrastructure providers right um and and as this kind of",
    "start": "493759",
    "end": "498879"
  },
  {
    "text": "servicification is happening a lot of these services or managed services are absorbing this state",
    "start": "498879",
    "end": "504720"
  },
  {
    "text": "right so you don't have to deal with it um and and to interact with these things you have to do i o so that means you have to",
    "start": "504720",
    "end": "511440"
  },
  {
    "text": "kind of well you know you have to you have to contact a remote service to to make it do your work and the idea",
    "start": "511440",
    "end": "518159"
  },
  {
    "text": "there is to not make the i o stateful so if the i o is stateless for example you're using http",
    "start": "518159",
    "end": "523760"
  },
  {
    "text": "which is kind of designed to be stateless as an interface for the developer right i mean",
    "start": "523760",
    "end": "528880"
  },
  {
    "text": "underneath it it might be stateful and use a connection pool and stuff like that but as a developer your experience of",
    "start": "528880",
    "end": "534399"
  },
  {
    "text": "the way you work with uh with io is uh if you use http you know that ios stateless as well right as",
    "start": "534399",
    "end": "540959"
  },
  {
    "text": "opposed to say a long living tcp connection uh you're kind of dealing with http where you know you think in stateless",
    "start": "540959",
    "end": "546720"
  },
  {
    "text": "terms and you know if there are optimizations to be done they kind of happen earlier uh below you you don't think about it um",
    "start": "546720",
    "end": "552880"
  },
  {
    "text": "and so um and so so that's kind of you know that's kind of the broad pattern and the broad trend that we're moving towards",
    "start": "552880",
    "end": "558320"
  },
  {
    "text": "so in that uh with that kind of context right i'm going to talk about uh three kinds",
    "start": "558320",
    "end": "564160"
  },
  {
    "start": "559000",
    "end": "559000"
  },
  {
    "text": "of state so the first thing i'm going to talk about is um i mean the the three kinds of",
    "start": "564160",
    "end": "569440"
  },
  {
    "text": "uh the three different ways of handling state or three different kinds of state that we have to deal with right",
    "start": "569440",
    "end": "574560"
  },
  {
    "text": "um and while this might not be mutually exclusive collectively exhaustive ah this is kind of a rough list or",
    "start": "574560",
    "end": "581920"
  },
  {
    "text": "almost a set of three heuristics for thinking about the way you have to deal with state so",
    "start": "581920",
    "end": "588160"
  },
  {
    "text": "the first is accessing data when you need to kind of read data from sources right",
    "start": "588160",
    "end": "593200"
  },
  {
    "text": "the second is persisting data when you need to write data to places so that once your business",
    "start": "593200",
    "end": "598399"
  },
  {
    "text": "logic finishes running you know you've made some side effect in the world and some state has changed somewhere and the third is shared memory which is",
    "start": "598399",
    "end": "606000"
  },
  {
    "text": "you know state that is persisted you know across a consecutive runs let's say for example your",
    "start": "606000",
    "end": "611360"
  },
  {
    "text": "you you run once you increment a counter and then the next time it runs you increment the same counter but this",
    "start": "611360",
    "end": "617200"
  },
  {
    "text": "counter is only required in memory right let's say for example you're doing rate limiting or some kind of memoization or caching to",
    "start": "617200",
    "end": "623279"
  },
  {
    "text": "improve performance you don't want to recompute things or you don't you don't want to re-fetch",
    "start": "623279",
    "end": "629519"
  },
  {
    "text": "things and rewrite things right and you want to deal with it in memory because it's not important to",
    "start": "629519",
    "end": "634880"
  },
  {
    "text": "persist but it's important across consecutive runs another thing here is for example state",
    "start": "634880",
    "end": "640640"
  },
  {
    "text": "that is shared across concurrent runs and a very typical example there is connection pooling where you have",
    "start": "640640",
    "end": "646160"
  },
  {
    "text": "many different executions that are happening that are that are then finally kind of speaking to the same",
    "start": "646160",
    "end": "651279"
  },
  {
    "text": "uh system uh they often they might need to say share a connection pool to a database right",
    "start": "651279",
    "end": "656720"
  },
  {
    "text": "and so typically what happens is that if you have like a hundred different say api calls um they and they're speaking to a",
    "start": "656720",
    "end": "662320"
  },
  {
    "text": "database you don't need a hundred connections to the database you can have a connection pool of ten and then you can kind of multiplex these",
    "start": "662320",
    "end": "668240"
  },
  {
    "text": "hundred ah concurrent executions and you can kind of pick up a connection with the connection pool",
    "start": "668240",
    "end": "673600"
  },
  {
    "text": "and and well it's not truly concurrent in that sense it's kind of fake concurrency ah but you keep that request waiting",
    "start": "673600",
    "end": "678959"
  },
  {
    "text": "till ah till you're able to get a connection from the connection pool but this connection pool",
    "start": "678959",
    "end": "684000"
  },
  {
    "text": "this this resource is maintained in shared memory right so that's another example of needing shared memory uh another",
    "start": "684000",
    "end": "691200"
  },
  {
    "text": "example of dealing with shared memory for example might be things that things where you sleep and",
    "start": "691200",
    "end": "697519"
  },
  {
    "text": "you need to run after a period of time right let's say for example i want to sleep for a few seconds or a few minutes",
    "start": "697519",
    "end": "703360"
  },
  {
    "text": "or i want to run at a particular period of time in the future very often in an application server",
    "start": "703360",
    "end": "709440"
  },
  {
    "text": "you're able to kind of set that delay right and because the application server is running 24 7",
    "start": "709440",
    "end": "714639"
  },
  {
    "text": "you can use the application server to use an internal clock to file an event so that you can run a piece of code",
    "start": "714639",
    "end": "720079"
  },
  {
    "text": "inside the application server um so that's kind of another case of dealing with state inside",
    "start": "720079",
    "end": "725440"
  },
  {
    "text": "uh inside the context of an application server you know you're not persisting stuff uh or you're not accessing stuff",
    "start": "725440",
    "end": "730959"
  },
  {
    "text": "from a person's store but it is kind of you know in memory and using kind of a let's say a clock",
    "start": "730959",
    "end": "736000"
  },
  {
    "text": "um so so those are kind of the three uh types of dealing with state that i'm gonna talk about",
    "start": "736000",
    "end": "741120"
  },
  {
    "start": "741000",
    "end": "741000"
  },
  {
    "text": "all right so let's talk about the first uh first problem here which is accessing data so what are kind of the problems",
    "start": "741120",
    "end": "747360"
  },
  {
    "text": "when we need to access data right and accessing data is kind of like the kind of like getting inputs that are",
    "start": "747360",
    "end": "753360"
  },
  {
    "text": "required for your computation right um and that's kind of what you need to do when you're accessing data right you're fetching the input",
    "start": "753360",
    "end": "759600"
  },
  {
    "text": "that is kind of required for your computation um and uh and one thing when i you know when i kind of think about this problem",
    "start": "759600",
    "end": "766160"
  },
  {
    "text": "i like to think about serverless functions as if they're actually web or mobile apps right because if you think",
    "start": "766160",
    "end": "771279"
  },
  {
    "text": "about weber mobile apps their characteristics are very similar to serverless functions you know they don't have any shared memory",
    "start": "771279",
    "end": "777279"
  },
  {
    "text": "um which means that by which i mean that like two different uh runs of the mobile app",
    "start": "777279",
    "end": "783839"
  },
  {
    "text": "or the web app that run across user one user two they don't really have any shared memory so when you're writing kind of code you're writing code inside",
    "start": "783839",
    "end": "790320"
  },
  {
    "text": "a context it's not a perfect analogy but just helps you know think about the properties and the kinds of constraints that you would",
    "start": "790320",
    "end": "796480"
  },
  {
    "text": "have from other services that we would use serverless functions can also support kind of fairly",
    "start": "796480",
    "end": "802160"
  },
  {
    "text": "massive you know massively concurrent execution which is that you can have a thousand serverless functions or",
    "start": "802160",
    "end": "807279"
  },
  {
    "text": "5000 servers functions running at the same time or even hundreds of thousands of serverless functions running at the same time",
    "start": "807279",
    "end": "812720"
  },
  {
    "text": "right uh and that's very similar to web and mobile apps right you might have a hundred thousand users that are",
    "start": "812720",
    "end": "818079"
  },
  {
    "text": "currently accessing your web app uh or your api right so um there's this",
    "start": "818079",
    "end": "823199"
  },
  {
    "text": "kind of uh uh you you can have fairly you can have a large amount of concurrent usage",
    "start": "823199",
    "end": "828320"
  },
  {
    "text": "and then of course the other interesting thing also is that there is a security context right which means that often",
    "start": "828320",
    "end": "834399"
  },
  {
    "text": "when you're when you're running web mobile apps there's kind of a boundary usually kind of a network boundary",
    "start": "834399",
    "end": "840480"
  },
  {
    "text": "that determines a trusted context right so they're running outside a trusted context ah and very often when we're dealing",
    "start": "840480",
    "end": "845760"
  },
  {
    "text": "with serverless functions that are kind of you know trying to work with data they might also be running in a security context that is",
    "start": "845760",
    "end": "852160"
  },
  {
    "text": "not the same as security context of your of where your data systems are right um",
    "start": "852160",
    "end": "857519"
  },
  {
    "text": "it might be say for example running on the edge right it might be running on a cloud vendor whereas your data might be in a legacy system",
    "start": "857519",
    "end": "864079"
  },
  {
    "text": "um and and ah and and when when you have kind of properties like this",
    "start": "864079",
    "end": "869199"
  },
  {
    "text": "you realize that reasoning reading data from existing databases where you already have data",
    "start": "869199",
    "end": "874800"
  },
  {
    "text": "is hard right it's uh you know it's great to think of serverless is",
    "start": "874800",
    "end": "880800"
  },
  {
    "text": "helping us when we're building net new applications but most of the applications that we build and most of the value that we want",
    "start": "880800",
    "end": "886160"
  },
  {
    "text": "to add is on systems that have existing data and specifically when you want to read data from these existing systems",
    "start": "886160",
    "end": "891680"
  },
  {
    "text": "you run into kind of these similar challenges that you would run into while building web and mobile apps as well right one problem there is that you have",
    "start": "891680",
    "end": "900480"
  },
  {
    "text": "a problem of connection management right traditionally databases and even most modern databases support",
    "start": "900480",
    "end": "905680"
  },
  {
    "text": "kind of a limited number of simultaneous connections that you can hold with the database right",
    "start": "905680",
    "end": "911199"
  },
  {
    "text": "and so you need to do things like connection pooling you also sometimes have state with the way you're talking to the database right for example if you have",
    "start": "911199",
    "end": "916959"
  },
  {
    "text": "read replicas or you're dealing with failovers then there's certain amount of state that you have to maintain to understand whether something is a",
    "start": "916959",
    "end": "923760"
  },
  {
    "text": "read replica or something is something is a primary something is a read and you have",
    "start": "923760",
    "end": "930079"
  },
  {
    "text": "maybe failovers where you need to kind of abstract the failover logic um let's say for example you have a",
    "start": "930079",
    "end": "935360"
  },
  {
    "text": "geo-distributed database or some kind of sharding logic in place right then you need to kind of understand",
    "start": "935360",
    "end": "940720"
  },
  {
    "text": "which shard to connect to as well right so the complexity kind of ah increases uh even for modern database",
    "start": "940720",
    "end": "946480"
  },
  {
    "text": "systems because you there is some amount of state associated with connection management right um and the second is that well the",
    "start": "946480",
    "end": "952800"
  },
  {
    "text": "second reason why connecting to existing databases is hard is because you need to have security credentials to access that scope data right and this",
    "start": "952800",
    "end": "959920"
  },
  {
    "text": "is not necessarily unique to serverless functions but but you know especially because serverless functions can be running",
    "start": "959920",
    "end": "965600"
  },
  {
    "text": "wherever you you need to have some kind of security protocol to make sure that you you understand",
    "start": "965600",
    "end": "971199"
  },
  {
    "text": "what piece of data they're going to have access to the serverless function they're going to have access to and so one of the kind of solutions that",
    "start": "971199",
    "end": "977199"
  },
  {
    "start": "975000",
    "end": "975000"
  },
  {
    "text": "emerges to this is to say uh you know instead of connecting to a database let serverless functions kind of connect",
    "start": "977199",
    "end": "983440"
  },
  {
    "text": "to a data api or a data service and a data service should kind of abstract these concerns these problems",
    "start": "983440",
    "end": "989360"
  },
  {
    "text": "and provide an api a stateless http api uh to to kind of you you know",
    "start": "989360",
    "end": "996240"
  },
  {
    "text": "read or query that data right um and so here that api can abstract connection management",
    "start": "996240",
    "end": "1001600"
  },
  {
    "text": "right because it's an http api it's stateless that means you know it's a stateless api so you don't need to maintain a connection and",
    "start": "1001600",
    "end": "1008160"
  },
  {
    "text": "and again because it's an api boundary you can handle some kind of credential exchange you can implement some kind of authentication and authorization",
    "start": "1008160",
    "end": "1014079"
  },
  {
    "text": "to make sure that you're able to scope in that data right um and and then your and then this kind",
    "start": "1014079",
    "end": "1019680"
  },
  {
    "text": "of becomes a pattern of you know how to manage rotation of credentials and what not as well and again it's not like",
    "start": "1019680",
    "end": "1025360"
  },
  {
    "text": "it's rocket science it's just that there are patterns that we can leverage uh and and ideas that we can leverage to",
    "start": "1025360",
    "end": "1030480"
  },
  {
    "text": "solve these problems instead of reinventing the wheel one of the nice things here that we've discovered is a graphql is a phenomenal",
    "start": "1030480",
    "end": "1035678"
  },
  {
    "text": "fit because it's a fairly flexible api that allows you to query you know whatever you want but at the same time it's restricted it's not as",
    "start": "1035679",
    "end": "1041918"
  },
  {
    "text": "it's not as flexible as a full-on uh database query api uh it's kind of more restricted so you can scope",
    "start": "1041919",
    "end": "1048240"
  },
  {
    "text": "in access to particular entities or particular objects inside your inside your data source graphql is also",
    "start": "1048240",
    "end": "1054000"
  },
  {
    "text": "great because it's json first that means you don't really need to do any heavy lifting to uh inside your serverless function to",
    "start": "1054000",
    "end": "1061200"
  },
  {
    "text": "figure out you know how to get data from the database and convert it to something you want um you know marshall and marshall that",
    "start": "1061200",
    "end": "1067760"
  },
  {
    "text": "it's just json and graphql is a json api so you know you're getting results in json which is again great for developers who",
    "start": "1067760",
    "end": "1075039"
  },
  {
    "text": "kind of just want to get work done deal with json because they're probably going to be dealing with json on the other end anyway right and so it's a good fit for",
    "start": "1075039",
    "end": "1081919"
  },
  {
    "text": "a lot of use cases again a lot of stuff that i'm saying is not applicable 100 of the times and so you might have you might have",
    "start": "1081919",
    "end": "1089039"
  },
  {
    "text": "data that is not json in which case this this doesn't really work but the other kind of pattern here for accessing data",
    "start": "1089039",
    "end": "1096799"
  },
  {
    "text": "is to not really access data after the serverless function runs but is to kind of send",
    "start": "1096799",
    "end": "1102400"
  },
  {
    "text": "data to the serverless function and trigger that serverless function with an event payload so for example you kind of react to",
    "start": "1102400",
    "end": "1108880"
  },
  {
    "text": "changes inside a stateful system so you capture relevant data uh in in the change and then you deliver",
    "start": "1108880",
    "end": "1115039"
  },
  {
    "text": "that as a payload which then becomes an input to the serverless function right and that's kind of a nice uh that's kind",
    "start": "1115039",
    "end": "1122080"
  },
  {
    "text": "of a nice method to deal with it as well as long as you don't require more data right so the the the data capture mechanism and",
    "start": "1122080",
    "end": "1128559"
  },
  {
    "text": "how you construct the event payload uh becomes a little bit important but you know you can kind of absorb some of",
    "start": "1128559",
    "end": "1133919"
  },
  {
    "text": "that complexity there and then just deliver the event right so now your serverless function the read part of it",
    "start": "1133919",
    "end": "1139200"
  },
  {
    "text": "at least becomes stateless to a certain degree so that becomes a way to kind of think about uh you know that data access which is",
    "start": "1139200",
    "end": "1145200"
  },
  {
    "text": "not data access but data given right um and so those two kind of patterns emerge um",
    "start": "1145200",
    "end": "1151200"
  },
  {
    "start": "1150000",
    "end": "1150000"
  },
  {
    "text": "next let's shift gears to kind of talking about persisting data um and so the problems with persisting data are very similar to the problems of you know",
    "start": "1151200",
    "end": "1157280"
  },
  {
    "text": "reading data same kind of database problems ah but there's kind of one uh special problem that you know is a thorn",
    "start": "1157280",
    "end": "1165200"
  },
  {
    "text": "in my side from uh from experience which is kind of dealing with transactions right i like dealing with i like transactions",
    "start": "1165200",
    "end": "1172559"
  },
  {
    "text": "because you know some things are transactional uh especially for online applications and and they do kind of important",
    "start": "1172559",
    "end": "1179600"
  },
  {
    "text": "properties to transactions as a developer right one is that transaction transactions",
    "start": "1179600",
    "end": "1184640"
  },
  {
    "text": "absorb an all or nothing kind of semantic right so uh we'll run this transaction if it fails",
    "start": "1184640",
    "end": "1190160"
  },
  {
    "text": "things automatically roll back and the other thing is that you can have concurrent transactions that are",
    "start": "1190160",
    "end": "1195520"
  },
  {
    "text": "operating on the same uh persistent data but they can run concurrently and you know things will be seen at the",
    "start": "1195520",
    "end": "1201760"
  },
  {
    "text": "end of those updates right so if they're operating on the same data some transactions will fail if they are operating on data that is independent it",
    "start": "1201760",
    "end": "1208559"
  },
  {
    "text": "will be fine you can have different kinds of transaction semantics and it's great it's a massive amount of convenience",
    "start": "1208559",
    "end": "1214159"
  },
  {
    "text": "for for developers right to not have to think about that and this basically gets screwed when you",
    "start": "1214159",
    "end": "1220559"
  },
  {
    "text": "move to a place where you can't connect directly to database",
    "start": "1220559",
    "end": "1225919"
  },
  {
    "text": "to get a transaction api because a transaction api is usually over a tcp connection a long living connection where where you",
    "start": "1225919",
    "end": "1232720"
  },
  {
    "text": "can invoke and run a transaction so ah you know what are some kinds of solutions that we've seen",
    "start": "1232720",
    "end": "1239520"
  },
  {
    "start": "1235000",
    "end": "1235000"
  },
  {
    "text": "once again if you kind of think about the data api pattern in the data api pattern you know",
    "start": "1239520",
    "end": "1244960"
  },
  {
    "text": "obviously you get the same benefits of the read side but specifically talking about transactions there are two kinds of",
    "start": "1244960",
    "end": "1250320"
  },
  {
    "text": "patents that we've seen one is that instead of dealing with the transaction inside the serverless",
    "start": "1250320",
    "end": "1255360"
  },
  {
    "text": "function you kind of ask the people who are maintaining the data api the data service",
    "start": "1255360",
    "end": "1260480"
  },
  {
    "text": "to absorb the transaction logic expose that as an api endpoint kind of like a stored procedure right whether it's a",
    "start": "1260480",
    "end": "1266240"
  },
  {
    "text": "stored procedure or whether it's in code doesn't matter but it kind of feels like a stored procedure",
    "start": "1266240",
    "end": "1272080"
  },
  {
    "text": "and and only the variables are exposed as api parameters right so you have to kind of shift uh that",
    "start": "1272080",
    "end": "1278080"
  },
  {
    "text": "transaction logic and you have to absorb that into you have to think of it as stored procedures that the data service gives",
    "start": "1278080",
    "end": "1283440"
  },
  {
    "text": "you right so uh think of it like this there's databases which have kind of models that you can read right on and",
    "start": "1283440",
    "end": "1289200"
  },
  {
    "text": "databases have stored procs and now in a data service we'll have apis that give us the ability to read",
    "start": "1289200",
    "end": "1294320"
  },
  {
    "text": "and write pieces of data but the data api will also expose a stored proc right as an api endpoint and that kind",
    "start": "1294320",
    "end": "1300720"
  },
  {
    "text": "of becomes a pattern which is which hurts agility sometimes right because sometimes for these transactions",
    "start": "1300720",
    "end": "1306000"
  },
  {
    "text": "you would rather be you would rather kind of want to run the transaction logic yourself in the business logic",
    "start": "1306000",
    "end": "1311360"
  },
  {
    "text": "that you're writing as a developer um and so there's a little kind of a con here that you have to have like this has to be a change",
    "start": "1311360",
    "end": "1317360"
  },
  {
    "text": "management with the person who's building the data api the team that's building the data api the other kind of uh pattern is that you",
    "start": "1317360",
    "end": "1324080"
  },
  {
    "text": "know transactions over web sockets um which is not necessarily a great solution like for example",
    "start": "1324080",
    "end": "1329440"
  },
  {
    "text": "you know you might not be able to handle massive concurrent loads but it's kind of similar to the same problem that",
    "start": "1329440",
    "end": "1334799"
  },
  {
    "text": "you would have had of executing transactions anyway right if you had a large number of concurrent",
    "start": "1334799",
    "end": "1340000"
  },
  {
    "text": "users all trying to run transactions on the same pieces of data and so it's kind of the same problem but",
    "start": "1340000",
    "end": "1345600"
  },
  {
    "text": "but if you think about exposing transactions or websockets the nice thing here is that you again have an api boundary websockets are a",
    "start": "1345600",
    "end": "1352080"
  },
  {
    "text": "first-class citizens of http um and so again with kind of this data api model",
    "start": "1352080",
    "end": "1358320"
  },
  {
    "text": "you can expose web sockets or transaction semantics over web sockets and then you have an api boundary",
    "start": "1358320",
    "end": "1363360"
  },
  {
    "text": "to provide some kind of control around the number of concurrent transactions the quality of service you know who gets to be able to run transactions who",
    "start": "1363360",
    "end": "1369360"
  },
  {
    "text": "doesn't and also kind of arbitrating security context right so it's not as terrible as running a",
    "start": "1369360",
    "end": "1374480"
  },
  {
    "text": "transaction directly on a database and there's definitely an element of control there the the con here is that",
    "start": "1374480",
    "end": "1379919"
  },
  {
    "text": "you have to set it up uh you have to set up transactions or websockets and then you have to create some kind of a protocol",
    "start": "1379919",
    "end": "1385360"
  },
  {
    "text": "over you know over embedding transaction semantics over a websocket protocol right so some way of",
    "start": "1385360",
    "end": "1390640"
  },
  {
    "text": "specifying the beginning of a transaction or the end of a transaction um the other kind of approach uh if you",
    "start": "1390640",
    "end": "1396799"
  },
  {
    "text": "know one was the data api approach the other is the event approach so if you take the event approach to this we can break a transaction up into a set",
    "start": "1396799",
    "end": "1403039"
  },
  {
    "text": "of events right um and so the way we think about it is that we have a series of serverless functions that",
    "start": "1403039",
    "end": "1409200"
  },
  {
    "text": "will run each serverless function will make atomic changes to data and then stop and then at the end of it",
    "start": "1409200",
    "end": "1414960"
  },
  {
    "text": "you know maybe they'll just persist data uh and that persistence will emit a change event that will go trigger",
    "start": "1414960",
    "end": "1421120"
  },
  {
    "text": "something else or the servers function itself can emit a business event and then shut and then and then shut itself down um",
    "start": "1421120",
    "end": "1427600"
  },
  {
    "text": "and the challenge here is uh and then of course sorry the the the next kind of event that is emitted",
    "start": "1427600",
    "end": "1433200"
  },
  {
    "text": "uh runs and triggers the next piece of compute the challenge here is i mean this is this is not really a solution it's it's",
    "start": "1433200",
    "end": "1439039"
  },
  {
    "text": "a pain right because you're kind of losing transaction semantics right you have to kind of emulate transactions",
    "start": "1439039",
    "end": "1444480"
  },
  {
    "text": "you you're not necessarily for example getting that all or nothing style uh semantics right you're not necessarily getting the same kind of",
    "start": "1444480",
    "end": "1450799"
  },
  {
    "text": "concurrent mental model for concurrent execution that you were getting with transactions um and to a degree",
    "start": "1450799",
    "end": "1456240"
  },
  {
    "text": "you can have things like exactly once processing or in-order delivery",
    "start": "1456240",
    "end": "1461919"
  },
  {
    "text": "which can improve the ergonomics of use but it does reduce your kind of",
    "start": "1461919",
    "end": "1466960"
  },
  {
    "text": "in practice that would kind of reduce the performance that you would get in the number of transactions that you can process",
    "start": "1466960",
    "end": "1472000"
  },
  {
    "text": "uh because a database is kind of geared towards processing a large number of transactions at the same time if you start making things uh if you",
    "start": "1472000",
    "end": "1478320"
  },
  {
    "text": "start if you start forcing things to be in order delivery uh you know what do you order by and so",
    "start": "1478320",
    "end": "1483520"
  },
  {
    "text": "you have to understand you know what the unique objects that you're operating on are and so you have to make sure that",
    "start": "1483520",
    "end": "1489279"
  },
  {
    "text": "the ordering is done not necessarily just according to time but the ordering is done according to",
    "start": "1489279",
    "end": "1494720"
  },
  {
    "text": "the data that you're operating on right and and so it's it's not a solution but uh",
    "start": "1494720",
    "end": "1500880"
  },
  {
    "start": "1497000",
    "end": "1497000"
  },
  {
    "text": "it's not a 100 solution but it might kind of be able to uh give you the same properties",
    "start": "1500880",
    "end": "1506799"
  },
  {
    "text": "of of a transaction uh if you're able to absorb exactly once delivery of events or in order delivery uh exactly once",
    "start": "1506799",
    "end": "1513520"
  },
  {
    "text": "processing or in order delivery of events um let's kind of talk a little bit about shared memory uh in the shared memory context uh you",
    "start": "1513520",
    "end": "1520640"
  },
  {
    "text": "know especially for especially for for a person like me that comes from a web application server background serving",
    "start": "1520640",
    "end": "1527440"
  },
  {
    "text": "application the request in production is actually a fairly stateful affair right we think that oh it's a stateless api",
    "start": "1527440",
    "end": "1532480"
  },
  {
    "text": "that just runs in practice it's not right uh and for for some of the examples that we talked about like rate limiting or memorization",
    "start": "1532480",
    "end": "1538559"
  },
  {
    "text": "or caching right ah and and the fact that like a function comes up and then dies it it sucks",
    "start": "1538559",
    "end": "1544400"
  },
  {
    "text": "because uh you know you don't have any place to persist this data in memory right you can't memo stuff you can't uh increment a counter",
    "start": "1544400",
    "end": "1550799"
  },
  {
    "text": "you can't decrement a counter and then keep that around right you can't maintain an in application server timer",
    "start": "1550799",
    "end": "1556480"
  },
  {
    "text": "right um and of course we talked about why you can't for example share a connection pool which are things that you can do um and",
    "start": "1556480",
    "end": "1563120"
  },
  {
    "text": "so the kind of uh the kind of pattern that emerges here is to say you know before i get to that sorry web",
    "start": "1563120",
    "end": "1570960"
  },
  {
    "text": "sockets are another example of having to share uh in-memory resources across concurrent",
    "start": "1570960",
    "end": "1577120"
  },
  {
    "text": "executions right for example you might have multiple websockets that are opened up ah that by clients and then you might",
    "start": "1577120",
    "end": "1583360"
  },
  {
    "text": "have the same event that needs to be sent to multiple websockets right to send to multiple uh clients that are connected so you",
    "start": "1583360",
    "end": "1590000"
  },
  {
    "text": "kind of need to take that one event and push it down multiple uh you know multiple sockets",
    "start": "1590000",
    "end": "1595039"
  },
  {
    "text": "that are connected and this is very easy this is much easier to do uh in in an application server kind of",
    "start": "1595039",
    "end": "1601440"
  },
  {
    "text": "environment right where you can exploit threads and have multiple threads and stuff like that it's much harder to think about that uh",
    "start": "1601440",
    "end": "1607360"
  },
  {
    "text": "in in a service environment and so the kind of solution that's emerging to this is to kind of you know absorb",
    "start": "1607360",
    "end": "1612720"
  },
  {
    "start": "1609000",
    "end": "1609000"
  },
  {
    "text": "all of these stateful shared memory portions of an api server into uh into into kind of a thicker",
    "start": "1612720",
    "end": "1618720"
  },
  {
    "text": "gateway right and so you never invoke a serverless function with an api call directly but you kind of always go",
    "start": "1618720",
    "end": "1624159"
  },
  {
    "text": "through a gateway to solve some of these problems um and the gateway because it's now a little bit thicker uh because it's",
    "start": "1624159",
    "end": "1630400"
  },
  {
    "text": "absorbing a little uh absorbing some more work than than just a proxy or a load balancing kind of",
    "start": "1630400",
    "end": "1635919"
  },
  {
    "text": "gateway uh you have to the gateway has to be uh fairly flexible and has it should be",
    "start": "1635919",
    "end": "1641600"
  },
  {
    "text": "declaratively configured configurable right because you want to deal with it as infrastructure the entire idea",
    "start": "1641600",
    "end": "1646960"
  },
  {
    "text": "of moving to serverless is that everything else is infrastructure and managed right so you don't want to build this gateway",
    "start": "1646960",
    "end": "1652399"
  },
  {
    "text": "and then have a gateway that you're writing code for and managing unless unless unless a platform team is building it out right you as a developer",
    "start": "1652399",
    "end": "1658880"
  },
  {
    "text": "don't want to build a gateway and a serverless function because if you're doing both of these pieces you might as well just not use serverless functions",
    "start": "1658880",
    "end": "1664960"
  },
  {
    "text": "um and and here for example if you think about caching uh you know you can uh like application",
    "start": "1664960",
    "end": "1670559"
  },
  {
    "text": "level caching right uh the application level caching has to be done at the gateway level not inside your serverless functions",
    "start": "1670559",
    "end": "1676799"
  },
  {
    "text": "because it's harder to kind of think about caching at the serverless function level um i mean technically you",
    "start": "1676799",
    "end": "1682399"
  },
  {
    "text": "can kind of use redis and stuff like that but let's say uh there is this kind of more of like the in-memory caching that you need to",
    "start": "1682399",
    "end": "1688080"
  },
  {
    "text": "do and in those cases what you need to do is set up some kind of hints or a contract uh between the",
    "start": "1688080",
    "end": "1695279"
  },
  {
    "text": "serverless function the gateway to exchange information on what is cacheable and how long you can cache it for and",
    "start": "1695279",
    "end": "1701039"
  },
  {
    "text": "again i can't go into too much of detail because too much detail because we don't have time for this but there's some kind of contract that you",
    "start": "1701039",
    "end": "1706080"
  },
  {
    "text": "need to have maybe it's a cache control header or maybe some http request and response headers they kind of indicate to a gateway",
    "start": "1706080",
    "end": "1712000"
  },
  {
    "text": "hey you know what this resource is cacheable is the next time we need to we need to operate on this we can just",
    "start": "1712000",
    "end": "1717120"
  },
  {
    "text": "the gateway itself can just use the cache and not even hit the serverless function and similarly when you think about web",
    "start": "1717120",
    "end": "1722320"
  },
  {
    "text": "sockets the idea would be to terminate websockets the gateway and then just convert everything into events right so you don't have web",
    "start": "1722320",
    "end": "1727840"
  },
  {
    "text": "sockets after that uh you the gateway con dominates the web sockets holds the web socket connection then converts it to an event delivers",
    "start": "1727840",
    "end": "1733600"
  },
  {
    "text": "the event to serverless function uh the serverless function itself goes does something uh and and then that response event or the",
    "start": "1733600",
    "end": "1740960"
  },
  {
    "text": "end result event is then sent back to the uh to the websocket client and here a typical kind of",
    "start": "1740960",
    "end": "1746799"
  },
  {
    "text": "a pattern is to thread that series of events uh via something like",
    "start": "1746799",
    "end": "1752240"
  },
  {
    "text": "an action idea we have some id that you can use as a thread so that if ultimately there is a data change event",
    "start": "1752240",
    "end": "1758159"
  },
  {
    "text": "and the data change event has an action id or there's an event queue that has an action id your your gateway can thread that back",
    "start": "1758159",
    "end": "1765200"
  },
  {
    "text": "and say oh you know what this was for that web socket client right or this was for that particular um action or message that happened",
    "start": "1765200",
    "end": "1773919"
  },
  {
    "text": "at the website at uh for this particular websocket connection and again i can't go into much detail",
    "start": "1773919",
    "end": "1778960"
  },
  {
    "text": "but this is just kind of an abstract idea of of of things that the gateway needs to absorb",
    "start": "1778960",
    "end": "1784399"
  },
  {
    "text": "right and and again here graphql subscriptions turn out to be a really",
    "start": "1784399",
    "end": "1789600"
  },
  {
    "text": "nice fit because graphql subscriptions can be kind of handled at the gateway level uh and especially for for kind of a web",
    "start": "1789600",
    "end": "1796320"
  },
  {
    "text": "server like a web application kind of model and and then the business logic itself can just be run uh",
    "start": "1796320",
    "end": "1802240"
  },
  {
    "text": "inside serverless functions right so the graphql subscription part of it the the authorization the connection",
    "start": "1802240",
    "end": "1807919"
  },
  {
    "text": "management the concurrent programming stuff can be done at the gateway and then you cannot care about it and",
    "start": "1807919",
    "end": "1813760"
  },
  {
    "text": "just deal with business logic and serverless functions um so at a high level the way i think about this is that if",
    "start": "1813760",
    "end": "1819200"
  },
  {
    "start": "1815000",
    "end": "1815000"
  },
  {
    "text": "if you come from an application server background it's kind of like turning the app server inside out right a traditional app server has business",
    "start": "1819200",
    "end": "1824559"
  },
  {
    "text": "logic and other things right other things i'm just going to call it other things and so what we're doing here",
    "start": "1824559",
    "end": "1830000"
  },
  {
    "text": "is that we're converting the other things into a service and then integrating our business logic over serverless functions and when we",
    "start": "1830000",
    "end": "1836399"
  },
  {
    "text": "think about integrating business logic uh with uh with uh uh with the bits of the",
    "start": "1836399",
    "end": "1842080"
  },
  {
    "text": "app server that we don't want to deal with there are two ways to deal with it right one is that kind of event method",
    "start": "1842080",
    "end": "1847200"
  },
  {
    "text": "event based way of dealing with it which is that we are triggering our business logic uh on changes on data changes on api",
    "start": "1847200",
    "end": "1853279"
  },
  {
    "text": "calls on time on websocket events right um and we're pushing events again back",
    "start": "1853279",
    "end": "1859120"
  },
  {
    "text": "uh and and then and then the the the the uh the other bits right uh of the app",
    "start": "1859120",
    "end": "1865200"
  },
  {
    "text": "server uh like for example the gateway or whatever can can pick up from that right so there's the events can be one",
    "start": "1865200",
    "end": "1870960"
  },
  {
    "text": "contract and the other contract is the data api which is that uh the you need to have another service or maybe the same",
    "start": "1870960",
    "end": "1876720"
  },
  {
    "text": "service that also provides an abstraction for giving you a way to read and write data so that uh",
    "start": "1876720",
    "end": "1882159"
  },
  {
    "text": "abstracting some of those kind of stateful problems there so that again your business logic can just be a function that runs right",
    "start": "1882159",
    "end": "1888000"
  },
  {
    "text": "so it kind of turns the app server inside out and then just kind of distributes it right that's kind of what's happening it's kind of becoming",
    "start": "1888000",
    "end": "1893760"
  },
  {
    "text": "from one piece into this broken piece uh apologies for my very technical sound that i made",
    "start": "1893760",
    "end": "1899840"
  },
  {
    "text": "but uh but it kind of breaks up into this piece where you have services that do this other bit of the traditional app server",
    "start": "1899840",
    "end": "1905760"
  },
  {
    "text": "and then the business logic pieces of the app server your controllers or functions they just become serverless functions",
    "start": "1905760",
    "end": "1911039"
  },
  {
    "text": "right and of course there is a impact to this right it's not it's not roses it's not great",
    "start": "1911039",
    "end": "1916399"
  },
  {
    "text": "but but if everything else becomes a service and then you just have to deal with business logic as serverless functions",
    "start": "1916399",
    "end": "1921919"
  },
  {
    "text": "that's that's taking us towards our ideal of that ergonomic and economic benefit of not having to deal with the",
    "start": "1921919",
    "end": "1927600"
  },
  {
    "text": "operations of our business logic right um the key changes in that that have happened that we need to do is one",
    "start": "1927600",
    "end": "1933679"
  },
  {
    "text": "there's a phenomenal amount of plumbing that we need to set up to make this work it's not trivial um and and and your mental",
    "start": "1933679",
    "end": "1939360"
  },
  {
    "text": "model is shifting a little bit right you can't do traditional stuff anymore things have shifted a little bit for example",
    "start": "1939360",
    "end": "1944480"
  },
  {
    "text": "uh transactional workloads have to shift to event driven models not uh not a trivial shift to make inside your mind right ah",
    "start": "1944480",
    "end": "1951039"
  },
  {
    "text": "one of the ways that i like to think about this is that we we are changing our way of thinking from a crud style",
    "start": "1951039",
    "end": "1956320"
  },
  {
    "text": "to a cqrs style right um and and this is kind of one of the things that we've seen",
    "start": "1956320",
    "end": "1961360"
  },
  {
    "start": "1959000",
    "end": "1959000"
  },
  {
    "text": "with hasura and that we've been able to do really well right so if you think about for example",
    "start": "1961360",
    "end": "1966399"
  },
  {
    "text": "you're using kind of a monolith and the the monolith kind of absorbs all kinds of business logic and then talks to",
    "start": "1966399",
    "end": "1971760"
  },
  {
    "text": "various services right databases and data services you're kind of moving to a cqrs style",
    "start": "1971760",
    "end": "1976960"
  },
  {
    "text": "where you're saying we have this kind of thick uh data gateway an event gateway that basically helps us that gives us",
    "start": "1976960",
    "end": "1982880"
  },
  {
    "text": "kind of a unified api on these data sources um and uh and then and then this kind of",
    "start": "1982880",
    "end": "1989039"
  },
  {
    "text": "becomes uh a query engine that can then be used by other serverless functions uh and then when",
    "start": "1989039",
    "end": "1995120"
  },
  {
    "text": "you kind of want to invoke functions uh you know what we do inside with the event engine is that we",
    "start": "1995120",
    "end": "2000159"
  },
  {
    "text": "we capture changes on the data sources here and and convert them into events right we capture time based events convert them",
    "start": "2000159",
    "end": "2006720"
  },
  {
    "text": "into events we capture api calls and web sockets and convert them into events uh and then those events",
    "start": "2006720",
    "end": "2012159"
  },
  {
    "text": "uh kind of go and ultimately fire serverless business logic that business logic itself now uh can",
    "start": "2012159",
    "end": "2017760"
  },
  {
    "text": "you know speak to other data sources or services or manage services or even use husura as the data api to",
    "start": "2017760",
    "end": "2023679"
  },
  {
    "text": "talk and read write to these data sources right um and so the idea is that that query engine and the event engine helps you",
    "start": "2023679",
    "end": "2030399"
  },
  {
    "text": "kind of abstract away the stateful bits of the app server and you get to deal only with the",
    "start": "2030399",
    "end": "2035679"
  },
  {
    "text": "stateless bits of the app server and it's kind of very similar to the cqrs pattern but again spread out into",
    "start": "2035679",
    "end": "2041120"
  },
  {
    "text": "multiple decoupled components and again decoupling is not necessarily",
    "start": "2041120",
    "end": "2046240"
  },
  {
    "text": "great uh there's tremendous amounts of pros and cons to it so you have to think through it carefully and you don't have to wholesale shift the whole thing",
    "start": "2046240",
    "end": "2052638"
  },
  {
    "text": "right the nice thing is you can shift over only parts of your workloads right you can only say well you know i'm going",
    "start": "2052639",
    "end": "2057760"
  },
  {
    "text": "to keep most of it in my traditional legacy app and let me the way it is but the new stuff for the new stuff i'll",
    "start": "2057760",
    "end": "2063839"
  },
  {
    "text": "kind of start moving to this kind of approach right uh and and that becomes a possible",
    "start": "2063839",
    "end": "2069118"
  },
  {
    "text": "way of going migrations um i'm probably a little bit over time sort of over time uh do feel free to reach out to me on",
    "start": "2069119",
    "end": "2075040"
  },
  {
    "text": "twitter i'm gonna go on twitter and would love to get into more detail about serverless state graphql uh how things",
    "start": "2075040",
    "end": "2082878"
  },
  {
    "text": "are evolving for developers what are pain points and what are not pain points and of course please do check out io as",
    "start": "2082879",
    "end": "2088638"
  },
  {
    "text": "well uh to see uh if that helps solve some of your problems with serverless and state",
    "start": "2088639",
    "end": "2093679"
  },
  {
    "text": "uh and uh thank you so much and hope you have a great day uh at the rest of the conference",
    "start": "2093679",
    "end": "2101280"
  }
]