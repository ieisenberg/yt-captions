[
  {
    "text": "hey we're gonna go ahead and get started I'd like to thank everybody doing us",
    "start": "2860",
    "end": "8120"
  },
  {
    "text": "today welcome today's CNC equipment are getting started with containers and kubernetes I'm Taylor Wagoner the",
    "start": "8120",
    "end": "14929"
  },
  {
    "text": "Operations Manager here at CNCs I'll be moderating today's webinar we would like to welcome our presenter",
    "start": "14929",
    "end": "20869"
  },
  {
    "text": "today Wayne warren is a software engineer at digitalocean before we get going I'd",
    "start": "20869",
    "end": "26420"
  },
  {
    "text": "like to go over a few housekeeping items during the webinar you are not able to talk as an attendee there is a Q&A box",
    "start": "26420",
    "end": "33769"
  },
  {
    "text": "at the bottom of your zoom screen please feel free to drop your questions in the Q&A rather than the chat and we'll get",
    "start": "33769",
    "end": "39379"
  },
  {
    "text": "to as many as we can at the end I'd like to remind you this is an official webinar of the CNCs and as such is",
    "start": "39379",
    "end": "46010"
  },
  {
    "text": "subject to CNCs code of conduct please do not add anything to the chat or questions that would be in violation of",
    "start": "46010",
    "end": "53030"
  },
  {
    "text": "that code of conduct basically please be respectful of all of your fellow participants and presenters",
    "start": "53030",
    "end": "58539"
  },
  {
    "text": "and also reminder that we will be posting the recording of slides to the",
    "start": "58539",
    "end": "63829"
  },
  {
    "text": "since you have webinar page later today with that I'm gonna hand it over to Wayne to kick off today's presentation",
    "start": "63829",
    "end": "71979"
  },
  {
    "text": "thanks Taylor so first off thanks everyone for joining",
    "start": "71979",
    "end": "78250"
  },
  {
    "text": "today I'd like to present an introduction to modern distributed",
    "start": "78250",
    "end": "84590"
  },
  {
    "text": "application design containers and kubernetes and throughout my",
    "start": "84590",
    "end": "90200"
  },
  {
    "text": "presentation I'll be threading in a demo of deploying of building a flask based",
    "start": "90200",
    "end": "98649"
  },
  {
    "text": "web app that will deploy on to a digital ocean kubernetes cluster yeah so as",
    "start": "98649",
    "end": "110390"
  },
  {
    "text": "Taylor mentioned my name is Wayne I'm a software engineer I'm based out of Chicago and I I work at digitalocean on",
    "start": "110390",
    "end": "117799"
  },
  {
    "text": "the kubernetes product and again our goals today are going to be discussing",
    "start": "117799",
    "end": "124960"
  },
  {
    "text": "trends in application design and deployment we'll get a high-level overview of and motivation for",
    "start": "124960",
    "end": "132430"
  },
  {
    "text": "containers as a technology and we'll learn about communities architecture and objects much of this",
    "start": "132430",
    "end": "139550"
  },
  {
    "text": "through a demo where we'll build a container image for a demo flask app",
    "start": "139550",
    "end": "145160"
  },
  {
    "text": "we'll deploy that flask app to the container the kubernetes cluster and then we'll make it publicly available",
    "start": "145160",
    "end": "151000"
  },
  {
    "text": "using a load balancer so when we talk",
    "start": "151000",
    "end": "158720"
  },
  {
    "text": "about application modernization we're talking about transitioning from a like legacy monolith architecture towards",
    "start": "158720",
    "end": "166940"
  },
  {
    "text": "more of a micro services architecture and micro services are a core concept in",
    "start": "166940",
    "end": "173240"
  },
  {
    "text": "cloud native apps in infrastructure so so we'll start by considering what a",
    "start": "173240",
    "end": "181250"
  },
  {
    "text": "monolithic application is and here on the slide you can see we have a Flickr",
    "start": "181250",
    "end": "187100"
  },
  {
    "text": "like app that includes user management photo management a database adapter and",
    "start": "187100",
    "end": "193490"
  },
  {
    "text": "a front-end and what makes this monolithic is that all of these components are intertwined in a single",
    "start": "193490",
    "end": "201080"
  },
  {
    "text": "large code base which presents a number of challenges so all of the components",
    "start": "201080",
    "end": "207920"
  },
  {
    "text": "must be deployed as the whole and they must be scaled together even if only one of the components say photo management",
    "start": "207920",
    "end": "214730"
  },
  {
    "text": "is is a over overloaded for its for the",
    "start": "214730",
    "end": "221900"
  },
  {
    "text": "resources it has available to it and speaking of resources each component",
    "start": "221900",
    "end": "227060"
  },
  {
    "text": "may have distinctly different resource needs and deploying them together makes it impossible to optimize each one",
    "start": "227060",
    "end": "233330"
  },
  {
    "text": "according to those needs in isolation from the others and then releasing a",
    "start": "233330",
    "end": "242560"
  },
  {
    "text": "monolithic application can be tedious and error-prone because if there's a bug in say the the photo management",
    "start": "242560",
    "end": "249560"
  },
  {
    "text": "component of the application you have to roll back all the the components to a",
    "start": "249560",
    "end": "255920"
  },
  {
    "text": "previous version as opposed to rolling back just the the buggy component and",
    "start": "255920",
    "end": "261890"
  },
  {
    "text": "finally we have lots of code handling different pieces of logic intertwined in dependent on one another which",
    "start": "261890",
    "end": "268520"
  },
  {
    "text": "makes refactoring or swapping out chunks of functionality difficult and inconvenient so what's the alternative",
    "start": "268520",
    "end": "276490"
  },
  {
    "text": "well the alternative is a microservices baker based architecture where we split",
    "start": "276490",
    "end": "283069"
  },
  {
    "text": "up the app into microservices a collection of loosely coupled service",
    "start": "283069",
    "end": "288889"
  },
  {
    "text": "apps that each handle a domain-specific subset of the overall system functionality so here in our",
    "start": "288889",
    "end": "295310"
  },
  {
    "text": "presentation you can see we have our front-end web UI we have our photo",
    "start": "295310",
    "end": "302930"
  },
  {
    "text": "management component and we have our user management component each each of",
    "start": "302930",
    "end": "309380"
  },
  {
    "text": "these components is free to use the appropriate data store for the data type that we'll manage so here we have a user",
    "start": "309380",
    "end": "316190"
  },
  {
    "text": "management relational database management system and a photo management",
    "start": "316190",
    "end": "321770"
  },
  {
    "text": "relational database management system with a spaces with spaces for an object",
    "start": "321770",
    "end": "327919"
  },
  {
    "text": "storage so you can imagine storing the actual photos in in the object storage",
    "start": "327919",
    "end": "334990"
  },
  {
    "text": "system and metadata about users and photos in the relational database",
    "start": "334990",
    "end": "340520"
  },
  {
    "text": "management systems so one of the advantages here is that each of these",
    "start": "340520",
    "end": "346729"
  },
  {
    "text": "components can be scaled in isolation from the others allowing for more flexibility and efficient use of",
    "start": "346729",
    "end": "352789"
  },
  {
    "text": "resources and yeah so in one of the",
    "start": "352789",
    "end": "359750"
  },
  {
    "text": "considerations that that you have to take keep in mind when building a micro",
    "start": "359750",
    "end": "364909"
  },
  {
    "text": "services based architecture is that within a given engineering organization",
    "start": "364909",
    "end": "370310"
  },
  {
    "text": "typically Micra service teams would will have to agree on protocols or api's for",
    "start": "370310",
    "end": "376430"
  },
  {
    "text": "inter service communication as opposed to making direct calls to functions or",
    "start": "376430",
    "end": "381639"
  },
  {
    "text": "libraries within a monolithic architecture so it doesn't introduce",
    "start": "381639",
    "end": "389719"
  },
  {
    "text": "some complexity in that sense but yeah so why is this relevant to containers",
    "start": "389719",
    "end": "396319"
  },
  {
    "text": "and kubernetes the microservices architecture lends itself especially well to kubernetes",
    "start": "396319",
    "end": "402080"
  },
  {
    "text": "because communities has built-in abstractions that parallel this design pattern for example services to expose",
    "start": "402080",
    "end": "409729"
  },
  {
    "text": "groups of identical containers as a single endpoint and deployments to manage groups of identical workloads to",
    "start": "409729",
    "end": "416090"
  },
  {
    "text": "in order to scale them quickly up or down we'll learn more about these shortly but",
    "start": "416090",
    "end": "422090"
  },
  {
    "text": "first now that we've discussed some advantages of the micro service architecture let's introduce a method of packaging and running these smaller",
    "start": "422090",
    "end": "428659"
  },
  {
    "text": "self-contained applications containers to understand the motivation of",
    "start": "428659",
    "end": "434719"
  },
  {
    "text": "containers it's helpful to know what came before early on in infrastructure consisted of",
    "start": "434719",
    "end": "444139"
  },
  {
    "text": "a one-to-one relationship between an operating system and a hardware computing platform which could lead to",
    "start": "444139",
    "end": "453789"
  },
  {
    "text": "resource inefficiencies in the sense that you have to figure out how to pack",
    "start": "453789",
    "end": "460430"
  },
  {
    "text": "all of your applications onto a single hardware host in a way that they all",
    "start": "460430",
    "end": "466669"
  },
  {
    "text": "work together without interfering with each other in terms of dependencies or",
    "start": "466669",
    "end": "471969"
  },
  {
    "text": "shared resource usage like memory or ports that they depend on in order to",
    "start": "471969",
    "end": "479599"
  },
  {
    "text": "provide their services so the next step",
    "start": "479599",
    "end": "485210"
  },
  {
    "text": "in evolution from hard work and keeping platforms were of virtual machines so",
    "start": "485210",
    "end": "490550"
  },
  {
    "text": "virtual machines introduced the ability to run multiple full operating systems on a single physical host from virtual",
    "start": "490550",
    "end": "498349"
  },
  {
    "text": "images containing all the software necessary for the application in question and then these multiple full",
    "start": "498349",
    "end": "505430"
  },
  {
    "text": "operating systems are managed by a low-level hypervisor operating system",
    "start": "505430",
    "end": "510800"
  },
  {
    "text": "that allocates the actual the physical systems resources to the virtual hosts this allows for a more granular",
    "start": "510800",
    "end": "518810"
  },
  {
    "text": "application sandbox inverse versioning and it increases efficiency compared to",
    "start": "518810",
    "end": "524540"
  },
  {
    "text": "the use of physical hosts because it allows otherwise underutilized compute resources to be shared between",
    "start": "524540",
    "end": "530290"
  },
  {
    "text": "virtualized applications however there are still some inefficiencies here",
    "start": "530290",
    "end": "535710"
  },
  {
    "text": "because each virtual host comes with the overhead of its own full operating system so the next step away from",
    "start": "535710",
    "end": "543980"
  },
  {
    "text": "virtual machines is our containers which are essentially a lightweight virtual",
    "start": "543980",
    "end": "549960"
  },
  {
    "text": "machines that accomplish the goals of sandboxing apps in providing a consistent reproducible runtime with",
    "start": "549960",
    "end": "557130"
  },
  {
    "text": "less infrastructure overhead some advantages of the containers over virtual machines include they don't",
    "start": "557130",
    "end": "562770"
  },
  {
    "text": "require their full their own full operating system but just a container",
    "start": "562770",
    "end": "567810"
  },
  {
    "text": "runtime they the container image files are generally much smaller than virtual",
    "start": "567810",
    "end": "573990"
  },
  {
    "text": "machine files they generally start up much quicker than virtual machines and there is an ecosystem of pre-built",
    "start": "573990",
    "end": "581420"
  },
  {
    "text": "pre-configured images available for use for example images that provide specific",
    "start": "581420",
    "end": "586830"
  },
  {
    "text": "versions of golang and genetics Python nodejs etc but what our containers",
    "start": "586830",
    "end": "596610"
  },
  {
    "text": "really well we've discussed how containers are kind of like VM but more lightweight and portable but how are",
    "start": "596610",
    "end": "602790"
  },
  {
    "text": "they implemented in what do they all play at their core containers are an",
    "start": "602790",
    "end": "609080"
  },
  {
    "text": "abstraction built on top of two Linux kernel features that allow you to isolate and contain processes namespaces",
    "start": "609080",
    "end": "616920"
  },
  {
    "text": "in C groups we won't go into these concepts in detail since this is a beginner oriented webinar but they are",
    "start": "616920",
    "end": "622830"
  },
  {
    "text": "worth reading up on if you're curious the important thing to know is that they help accomplish the goals of sandboxing",
    "start": "622830",
    "end": "628830"
  },
  {
    "text": "apps and providing a consistent reproducible runtime environment much more efficiently than full-on virtual",
    "start": "628830",
    "end": "635400"
  },
  {
    "text": "machines now we'll take a look at some of the",
    "start": "635400",
    "end": "642570"
  },
  {
    "text": "more practical terminologies surrounding the containers ecosystem so first off a",
    "start": "642570",
    "end": "648000"
  },
  {
    "text": "container is one or more sandbox processes running within their own root filesystem managed by a container",
    "start": "648000",
    "end": "654810"
  },
  {
    "text": "runtime like docker and the container runtime allows you to run containers on",
    "start": "654810",
    "end": "661410"
  },
  {
    "text": "a host operating system and oftentimes as in the case of docker the runtime",
    "start": "661410",
    "end": "667050"
  },
  {
    "text": "also lets you build and push or pull images to a registry a",
    "start": "667050",
    "end": "672850"
  },
  {
    "text": "container image is a set of filesystem layers and metadata with all of",
    "start": "672850",
    "end": "677990"
  },
  {
    "text": "applications dependencies libraries system utilities etc and the doctor says",
    "start": "677990",
    "end": "684890"
  },
  {
    "text": "ecosystem we often define and create images using a docker file as we kind of",
    "start": "684890",
    "end": "692300"
  },
  {
    "text": "show briefly here we'll also take a more in-depth look at a docker file in an",
    "start": "692300",
    "end": "698089"
  },
  {
    "text": "upcoming slide and then I also mentioned",
    "start": "698089",
    "end": "703160"
  },
  {
    "text": "a container registry that the runtime will allow you to push images to and pull images from this is where the",
    "start": "703160",
    "end": "710300"
  },
  {
    "text": "ecosystem of pre-existing docker images comes in that so the container registry",
    "start": "710300",
    "end": "717110"
  },
  {
    "text": "is a packaging system that makes container images available for download by the runtime so you can think of",
    "start": "717110",
    "end": "723440"
  },
  {
    "text": "registry as similar as being similar to code repositories except they're geared",
    "start": "723440",
    "end": "728720"
  },
  {
    "text": "towards container images so example is include docker hub queda i/o google",
    "start": "728720",
    "end": "733850"
  },
  {
    "text": "container registry and digitalocean container registry and then examples of",
    "start": "733850",
    "end": "740180"
  },
  {
    "text": "container runtimes include docker as I've already mentioned container D and",
    "start": "740180",
    "end": "745580"
  },
  {
    "text": "cryo alright so the next thing I want to",
    "start": "745580",
    "end": "754339"
  },
  {
    "text": "do is introduce you to how to build and",
    "start": "754339",
    "end": "759440"
  },
  {
    "text": "run a container locally so we're going to do that by showing or by using a",
    "start": "759440",
    "end": "768170"
  },
  {
    "text": "bare-bones flask app that will do that we'll eventually but not right away deploy onto kubernetes so the first",
    "start": "768170",
    "end": "775760"
  },
  {
    "text": "thing we're going to do is we're going to take a look at the flask ab we're gonna look at the docker file that we use to build a docker image from the app",
    "start": "775760",
    "end": "782480"
  },
  {
    "text": "and then later on in the presentation we'll we'll look at how to deploy the",
    "start": "782480",
    "end": "789080"
  },
  {
    "text": "docker image we build to kubernetes and for those of you who are curious flask",
    "start": "789080",
    "end": "796010"
  },
  {
    "text": "is just a lightweight Python web the application framework designed to make it easy to to",
    "start": "796010",
    "end": "802259"
  },
  {
    "text": "get up and started so the code you see here we won't talk about in depth but",
    "start": "802259",
    "end": "808049"
  },
  {
    "text": "it's all we need to get a web server up and running on port 5,000 that's that",
    "start": "808049",
    "end": "814350"
  },
  {
    "text": "returns an HTTP body that just says hello world all right so how do we get",
    "start": "814350",
    "end": "822809"
  },
  {
    "text": "it running in docker in order to do that we need a docker file where we define a",
    "start": "822809",
    "end": "829259"
  },
  {
    "text": "series of steps that are involved in building the layers for the docker",
    "start": "829259",
    "end": "834720"
  },
  {
    "text": "container image and so yeah we'll start with the the from step here I'll just",
    "start": "834720",
    "end": "841679"
  },
  {
    "text": "describe each of these steps in and what they do so the the from step says",
    "start": "841679",
    "end": "849299"
  },
  {
    "text": "where's our image isn't starting from an empty file system system it's starting",
    "start": "849299",
    "end": "855029"
  },
  {
    "text": "from a pre-existing container image so this is a Python specific container",
    "start": "855029",
    "end": "860789"
  },
  {
    "text": "image specifically one that's built on the Alpine Linux distribution and it's",
    "start": "860789",
    "end": "866579"
  },
  {
    "text": "specifically geared towards Python 3 so what we have here is an image name and",
    "start": "866579",
    "end": "873449"
  },
  {
    "text": "then a colon and then the image tag that specifies the the version of that image",
    "start": "873449",
    "end": "879149"
  },
  {
    "text": "that that were that will end up pulling in order to begin building our container",
    "start": "879149",
    "end": "885679"
  },
  {
    "text": "image so the the next step is work der which just sets the working directory",
    "start": "885679",
    "end": "891779"
  },
  {
    "text": "for all the future steps in the docker file and then we have a copy which so",
    "start": "891779",
    "end": "900259"
  },
  {
    "text": "let me just switch over to my terminal here to show you where I'm where I'm working from and that is our the a",
    "start": "900259",
    "end": "912119"
  },
  {
    "text": "kate's intro meetup kit which is used by the",
    "start": "912119",
    "end": "917429"
  },
  {
    "text": "digital ocean community folks to to demonstrate this presentation and the",
    "start": "917429",
    "end": "923699"
  },
  {
    "text": "demo in meetups situation so yeah so we",
    "start": "923699",
    "end": "929579"
  },
  {
    "text": "have the app directory here which contains all the files that we'll be",
    "start": "929579",
    "end": "935189"
  },
  {
    "text": "talking about while building this container so we've got app dot pi which we already looked",
    "start": "935189",
    "end": "940319"
  },
  {
    "text": "at doctor file which we're looking at right now and then requirements dot txt which we don't need to look at that's",
    "start": "940319",
    "end": "946649"
  },
  {
    "text": "just part of the part of building a Python application so so we'll be",
    "start": "946649",
    "end": "953519"
  },
  {
    "text": "copying that requirement txt from the the working directory context into the",
    "start": "953519",
    "end": "963170"
  },
  {
    "text": "into the container image at this layer",
    "start": "963170",
    "end": "969209"
  },
  {
    "text": "and I just want to stop pause here for a second and talk about layers so when I",
    "start": "969209",
    "end": "974490"
  },
  {
    "text": "say that a docker image can consists of a set of layers what I mean is that",
    "start": "974490",
    "end": "982170"
  },
  {
    "text": "every one of these steps that runs creates a new a new layer in that file",
    "start": "982170",
    "end": "989279"
  },
  {
    "text": "system and the advantage of using a layered approach to building file systems is that say you have say you",
    "start": "989279",
    "end": "996779"
  },
  {
    "text": "have like five different applications that you want to build containers for",
    "start": "996779",
    "end": "1002149"
  },
  {
    "text": "and they all have a requirement set txt file and they all have an app dot PI file and the only difference might be",
    "start": "1002149",
    "end": "1009380"
  },
  {
    "text": "say you're exposing a different HTTP or sorry a different TCP port for the",
    "start": "1009380",
    "end": "1017569"
  },
  {
    "text": "application everything up - I guess",
    "start": "1017569",
    "end": "1023540"
  },
  {
    "text": "copying in the requirements file if each application had a different requirements",
    "start": "1023540",
    "end": "1029360"
  },
  {
    "text": "file would be able to reuse the previous layers so all the layers that go into",
    "start": "1029360",
    "end": "1034780"
  },
  {
    "text": "building the original Python app the layer that defines the worker and then",
    "start": "1034780",
    "end": "1040819"
  },
  {
    "text": "any other common files shared between those those applications would would be",
    "start": "1040819",
    "end": "1051340"
  },
  {
    "text": "duplicated through the way container images are described at the metadata",
    "start": "1051340",
    "end": "1057950"
  },
  {
    "text": "level which we won't go any further into the details than that but it's suffice",
    "start": "1057950",
    "end": "1064220"
  },
  {
    "text": "it to say it's a way to efficiently store lots of similar",
    "start": "1064220",
    "end": "1070020"
  },
  {
    "text": "images in a given registry alright so moving on we just the last thing I had",
    "start": "1070020",
    "end": "1077070"
  },
  {
    "text": "described was copying the requirements dot txt into your container the next",
    "start": "1077070",
    "end": "1082470"
  },
  {
    "text": "thing that you can do is you can run arbitrary commands within the the build",
    "start": "1082470",
    "end": "1087570"
  },
  {
    "text": "context of that container so here we're gonna pip install which for for those of",
    "start": "1087570",
    "end": "1093630"
  },
  {
    "text": "you who aren't familiar with Python packaging pip is just a Python packaging",
    "start": "1093630",
    "end": "1098790"
  },
  {
    "text": "tool that lets you reference a set of dependencies and install them in your",
    "start": "1098790",
    "end": "1104910"
  },
  {
    "text": "local file system and then we're gonna copy are all the rest of the files from",
    "start": "1104910",
    "end": "1111360"
  },
  {
    "text": "the current directory into into the container image and then we're going to",
    "start": "1111360",
    "end": "1118320"
  },
  {
    "text": "expose port 5000 and then we're gonna say that the default command that runs when we run this image when we run",
    "start": "1118320",
    "end": "1126330"
  },
  {
    "text": "docker run here will be Python app dot pi in the work door / app all right so",
    "start": "1126330",
    "end": "1135020"
  },
  {
    "text": "now that I've described the docker file the next thing I'm gonna do is switch over to my terminal and I'm gonna run",
    "start": "1135020",
    "end": "1143250"
  },
  {
    "text": "docker build and what this command does is it builds the image just describe",
    "start": "1143250",
    "end": "1150690"
  },
  {
    "text": "that I just described and this - T flag specifies the name of that we're going",
    "start": "1150690",
    "end": "1157080"
  },
  {
    "text": "to give our image that we can reference it later and then the dot at the end of",
    "start": "1157080",
    "end": "1162450"
  },
  {
    "text": "the docker build command line is basically saying the context for the",
    "start": "1162450",
    "end": "1167670"
  },
  {
    "text": "build is the current directory you can actually specify an arbitrary directory",
    "start": "1167670",
    "end": "1173700"
  },
  {
    "text": "here and that's the directory that you specify is what docker will see when",
    "start": "1173700",
    "end": "1179940"
  },
  {
    "text": "it's building your image so without further ado let's do that and I've got",
    "start": "1179940",
    "end": "1189750"
  },
  {
    "text": "some extra arguments here to make this this work in on my machine and I'm also",
    "start": "1189750",
    "end": "1195180"
  },
  {
    "text": "going to say no cache so that it doesn't use the build cache so you can actually see it doing it actually running the",
    "start": "1195180",
    "end": "1202860"
  },
  {
    "text": "build steps because I previously built this image tour so yeah",
    "start": "1202860",
    "end": "1209340"
  },
  {
    "text": "again we're pulling from Python 3 - Alpine studying the work directory",
    "start": "1209340",
    "end": "1215640"
  },
  {
    "text": "copying the departments that txt and then we're running pip install so you can see all the the packages that get",
    "start": "1215640",
    "end": "1221830"
  },
  {
    "text": "installed in the image then we're copying the app PI into the into the image exposing port 5000 and setting the",
    "start": "1221830",
    "end": "1230020"
  },
  {
    "text": "command that we want to run so let's look at the images we've got here so I'm",
    "start": "1230020",
    "end": "1236710"
  },
  {
    "text": "gonna say docker image LS and I'm only going to look at the top ten lines of",
    "start": "1236710",
    "end": "1246610"
  },
  {
    "text": "output because I have a lot of images on my laptop and here you can see we just",
    "start": "1246610",
    "end": "1254560"
  },
  {
    "text": "created this image 27 seconds ago it's 118 megabytes in size and the the tag",
    "start": "1254560",
    "end": "1264580"
  },
  {
    "text": "name is flask or the tag names latest in the the repository name is flask and",
    "start": "1264580",
    "end": "1271060"
  },
  {
    "text": "then our image ID which is a shot 56 digest of the image manifest is shown",
    "start": "1271060",
    "end": "1280240"
  },
  {
    "text": "here and this is kind of a to kind of like go off on a little bit of a tangent here this image ID and the tag plus the",
    "start": "1280240",
    "end": "1289450"
  },
  {
    "text": "name ar-ar-ar this sorry I'll stir over the image ID and the tag are alternate",
    "start": "1289450",
    "end": "1297550"
  },
  {
    "text": "ways of specifying which version of an image that you want so if I wanted to",
    "start": "1297550",
    "end": "1302940"
  },
  {
    "text": "docker run a docker run of flash let me",
    "start": "1302940",
    "end": "1317920"
  },
  {
    "text": "refer back to the port forward",
    "start": "1317920",
    "end": "1323580"
  },
  {
    "text": "5,000 on localhost in to 5,000 in a container and then we'll say the you say",
    "start": "1323580",
    "end": "1333010"
  },
  {
    "text": "latest here so this is this is one way to specify i specify the image that you want to run",
    "start": "1333010",
    "end": "1342259"
  },
  {
    "text": "another way to do it would be to replace this tag here with the image ID oh sorry",
    "start": "1342259",
    "end": "1361879"
  },
  {
    "text": "yeah replace the the tag with this image ID so that yeah they're just alternate",
    "start": "1361879",
    "end": "1369269"
  },
  {
    "text": "ways for referencing the same image one thing to note about tags is that they are mutable so you can overwrite a given",
    "start": "1369269",
    "end": "1377519"
  },
  {
    "text": "tag so if we rebuilt if we rebuild this",
    "start": "1377519",
    "end": "1387330"
  },
  {
    "text": "image we're going to end up with a different image ID but since we specified the flask tag here we're gonna",
    "start": "1387330",
    "end": "1395940"
  },
  {
    "text": "get we're gonna overwrite the existing tag with this new image ID yeah so let's",
    "start": "1395940",
    "end": "1405570"
  },
  {
    "text": "go ahead and show that our app is actually running in the container by",
    "start": "1405570",
    "end": "1410899"
  },
  {
    "text": "running at latest and then curling localhost at Port 5,000 which",
    "start": "1410899",
    "end": "1422299"
  },
  {
    "text": "may not be working well skip this because it's not that important",
    "start": "1426730",
    "end": "1432250"
  },
  {
    "text": "the important thing is container clusters so now that we've discussed",
    "start": "1432250",
    "end": "1437560"
  },
  {
    "text": "containers we built our first container and we've kind of shown it working let's",
    "start": "1437560",
    "end": "1445390"
  },
  {
    "text": "talk about how we move from this sandboxed application running in a local",
    "start": "1445390",
    "end": "1450490"
  },
  {
    "text": "development machine to a production deployment running in the cloud so yeah",
    "start": "1450490",
    "end": "1458590"
  },
  {
    "text": "we've introduced we've introduced containers using docker and a bare-bones web app but now say you're running",
    "start": "1458590",
    "end": "1463990"
  },
  {
    "text": "multiple copies of this container and you want them to scale across multiple physical or virtual machines how would",
    "start": "1463990",
    "end": "1471670"
  },
  {
    "text": "you manage the lifecycle of these containers roll them out or you know roll them out as blue/green deploys or",
    "start": "1471670",
    "end": "1479670"
  },
  {
    "text": "perform other types of distributed system management techniques",
    "start": "1479670",
    "end": "1486340"
  },
  {
    "text": "that's where container clusters come in so examples of container clusters would be Mesa docker swarm or kubernetes this",
    "start": "1486340",
    "end": "1494740"
  },
  {
    "text": "talk is gonna be focusing on kubernetes which consists of a set of master nodes",
    "start": "1494740",
    "end": "1501130"
  },
  {
    "text": "that manage the cluster scheduling health checking maintaining state and worker nodes that actually run the",
    "start": "1501130",
    "end": "1507460"
  },
  {
    "text": "containers and communicate with the masters so kubernetes I'll just give a",
    "start": "1507460",
    "end": "1514390"
  },
  {
    "text": "brief overview of its history it's often abbreviated as k-8 and the k-8 is just",
    "start": "1514390",
    "end": "1522190"
  },
  {
    "text": "kind of a play on the number of letters between the candy s here so you have one",
    "start": "1522190",
    "end": "1527590"
  },
  {
    "text": "two three four five six seven eight yeah",
    "start": "1527590",
    "end": "1533640"
  },
  {
    "text": "and kubernetes isn't an open source project that came out of Google's",
    "start": "1533640",
    "end": "1541060"
  },
  {
    "text": "internal cluster management system and it's now one of them the most popular or",
    "start": "1541060",
    "end": "1546670"
  },
  {
    "text": "it is now the most popular container cluster management system most cloud",
    "start": "1546670",
    "end": "1553600"
  },
  {
    "text": "platforms have some sort of managed turbine Eddie's offering features are added pretty regularly but bugs are",
    "start": "1553600",
    "end": "1560380"
  },
  {
    "text": "fixed up to three major version or three minor versions back and it is",
    "start": "1560380",
    "end": "1569430"
  },
  {
    "text": "facilitated it's the community if this is facilitated by the cloud native computing foundation which also",
    "start": "1571740",
    "end": "1578340"
  },
  {
    "text": "facilitates other projects such as Prometheus fluent D and others that I",
    "start": "1578340",
    "end": "1583630"
  },
  {
    "text": "don't have listed here so let's talk a",
    "start": "1583630",
    "end": "1588820"
  },
  {
    "text": "little bit about kubernetes architecture since we've covered containers and we've",
    "start": "1588820",
    "end": "1595240"
  },
  {
    "text": "made a case for the need to manage them let's yeah so yeah kubernetes has a",
    "start": "1595240",
    "end": "1604540"
  },
  {
    "text": "client-server architecture I mentioned previously that the server manages the",
    "start": "1604540",
    "end": "1609700"
  },
  {
    "text": "cluster we often refer to it as the control plane and then we have clients",
    "start": "1609700",
    "end": "1614980"
  },
  {
    "text": "which are the the nodes that that actually run the workloads that you",
    "start": "1614980",
    "end": "1621370"
  },
  {
    "text": "deploy to your group Nettie's cluster and they are managed by the control",
    "start": "1621370",
    "end": "1626860"
  },
  {
    "text": "plane so here we'll talk briefly about",
    "start": "1626860",
    "end": "1633100"
  },
  {
    "text": "the control plane it's broken down into API server scheduler controllers at CD",
    "start": "1633100",
    "end": "1639870"
  },
  {
    "text": "the API server is essentially the front end for kubernetes it's where all of the",
    "start": "1639870",
    "end": "1645580"
  },
  {
    "text": "opera API operations land so it has a REST API over HTTP it stores and it",
    "start": "1645580",
    "end": "1656140"
  },
  {
    "text": "stores all these API objects in the persistent storage back-end at CD and",
    "start": "1656140",
    "end": "1662880"
  },
  {
    "text": "communicates with nodes through a component that sits on the nodes called",
    "start": "1662880",
    "end": "1668350"
  },
  {
    "text": "cubelet the scheduler is what decides where to run pods it it schedules them",
    "start": "1668350",
    "end": "1674650"
  },
  {
    "text": "on to worker nodes based on resource availability and other constraints the controllers are you can kind of think of",
    "start": "1674650",
    "end": "1682570"
  },
  {
    "text": "them as loops that maintain a desired cluster state so for example if you have",
    "start": "1682570",
    "end": "1690240"
  },
  {
    "text": "block volumes or load balancers or you know virtual machines that that",
    "start": "1690240",
    "end": "1696690"
  },
  {
    "text": "you need to manage the cloud there are cloud specific controller managers which",
    "start": "1696690",
    "end": "1703380"
  },
  {
    "text": "perform all that management and then you have the cube controller manager which",
    "start": "1703380",
    "end": "1710010"
  },
  {
    "text": "manages kubernetes resources like groups of pods endpoints deployments etc and",
    "start": "1710010",
    "end": "1715260"
  },
  {
    "text": "then I mentioned earlier at CD it's a basically a persistent data store for",
    "start": "1715260",
    "end": "1721650"
  },
  {
    "text": "kubernetes cluster data which it's a it can be deployed in a highly available",
    "start": "1721650",
    "end": "1727670"
  },
  {
    "text": "distributed manner to be to be a reliable key value store and it's also a",
    "start": "1727670",
    "end": "1734100"
  },
  {
    "text": "CNC F project together these form the control plane that manage the operations",
    "start": "1734100",
    "end": "1739320"
  },
  {
    "text": "of kubernetes cluster and in a managed",
    "start": "1739320",
    "end": "1745410"
  },
  {
    "text": "offering of kubernetes the kubernetes api is often the only thing that's",
    "start": "1745410",
    "end": "1751350"
  },
  {
    "text": "really exposed to the user all the other components are typically hidden and can't be customized modified or",
    "start": "1751350",
    "end": "1757220"
  },
  {
    "text": "interacted with other than through the kubernetes api so now let's take a look",
    "start": "1757220",
    "end": "1763620"
  },
  {
    "text": "at worker nodes the central component of a worker node is the cubelet which is an",
    "start": "1763620",
    "end": "1769170"
  },
  {
    "text": "agent process that manages containers running on the node and it communicates with the control plane api server",
    "start": "1769170",
    "end": "1775560"
  },
  {
    "text": "receives pod specs and performs all of the the interactions with the container",
    "start": "1775560",
    "end": "1783930"
  },
  {
    "text": "runtime which like I mentioned earlier",
    "start": "1783930",
    "end": "1789000"
  },
  {
    "text": "it could be docker cryo or container D or some other runtime yeah I won't talk",
    "start": "1789000",
    "end": "1797340"
  },
  {
    "text": "about queue proxy or C advisor too much queue proxy is basically a network proxy",
    "start": "1797340",
    "end": "1803310"
  },
  {
    "text": "that runs is on each node it allows internode communication between pods and",
    "start": "1803310",
    "end": "1808530"
  },
  {
    "text": "C advisor is a container metrics component which basically reports",
    "start": "1808530",
    "end": "1816600"
  },
  {
    "text": "metrics back up through the sorry back",
    "start": "1816600",
    "end": "1824460"
  },
  {
    "text": "up through the kubernetes masters but so I mentioned that the API server",
    "start": "1824460",
    "end": "1833280"
  },
  {
    "text": "is how users interact with kubernetes clusters but it's actually more simple",
    "start": "1833280",
    "end": "1840450"
  },
  {
    "text": "than just hitting a REST API directly what you can do if you bought we there's",
    "start": "1840450",
    "end": "1845760"
  },
  {
    "text": "actually a tool called cube cuddle which is a command-line tool that interacts",
    "start": "1845760",
    "end": "1850800"
  },
  {
    "text": "with the control the control plane via the API server and abstracts away the REST API details that most users",
    "start": "1850800",
    "end": "1860100"
  },
  {
    "text": "shouldn't care too much about and it provides different functionality for mutating your cluster like creating",
    "start": "1860100",
    "end": "1867420"
  },
  {
    "text": "different resources of listing results and filtering them so the next thing I",
    "start": "1867420",
    "end": "1874020"
  },
  {
    "text": "want to do is for this presentation I've pre created a kubernetes cluster in",
    "start": "1874020",
    "end": "1881690"
  },
  {
    "text": "using digital ocean so I'll go ahead and download the kubernetes config for my",
    "start": "1881690",
    "end": "1888810"
  },
  {
    "text": "cluster so that I'm ready to create resources in subsequent steps and it'll",
    "start": "1888810",
    "end": "1894600"
  },
  {
    "text": "also be an example for me to show you some cute cuddle commands all right so",
    "start": "1894600",
    "end": "1902490"
  },
  {
    "text": "I'm going to so like I said I already created my cluster the next thing I'm gonna do is get my cube config so that's",
    "start": "1902490",
    "end": "1912300"
  },
  {
    "text": "basically dough cuddle kubernetes cluster cube config save and then the",
    "start": "1912300",
    "end": "1917370"
  },
  {
    "text": "name of the cluster and then so what",
    "start": "1917370",
    "end": "1922770"
  },
  {
    "text": "that does is it adds the cluster credentials to a cube config file my",
    "start": "1922770",
    "end": "1928170"
  },
  {
    "text": "default cube config file and then sets the default context for that cube config",
    "start": "1928170",
    "end": "1934410"
  },
  {
    "text": "file to that new cluster and the reason it needs to do that is the cube config",
    "start": "1934410",
    "end": "1941820"
  },
  {
    "text": "data structure actually allows you to have multiple clusters referenced and it",
    "start": "1941820",
    "end": "1949800"
  },
  {
    "text": "allows you to swap between multiple clusters quickly and easily yeah so yeah",
    "start": "1949800",
    "end": "1956970"
  },
  {
    "text": "that's a downloading the cube confit now we can type keep cuddle cluster info",
    "start": "1956970",
    "end": "1965370"
  },
  {
    "text": "just to show that the cute config is active for the cluster that I created",
    "start": "1965370",
    "end": "1971520"
  },
  {
    "text": "before this presentation so it tells me where the queue brunet kubernetes master can be reached which is necessary for so",
    "start": "1971520",
    "end": "1979980"
  },
  {
    "text": "so when we were talking about the API server that's what this address is referring to and it also talks about",
    "start": "1979980",
    "end": "1986520"
  },
  {
    "text": "core DNS which we don't need to worry about for this presentation you can also",
    "start": "1986520",
    "end": "1991890"
  },
  {
    "text": "run commands like cute cuddle get name spaces or keep cuddle get nodes or get",
    "start": "1991890",
    "end": "2002570"
  },
  {
    "text": "all - and you just so um basically I'm",
    "start": "2002570",
    "end": "2010400"
  },
  {
    "text": "just showing you that cute cuddle provides a really user friendly way to",
    "start": "2010400",
    "end": "2015670"
  },
  {
    "text": "view your system resources being managed by your kubernetes cluster so yeah I",
    "start": "2015670",
    "end": "2026900"
  },
  {
    "text": "talked about cube code all different commands that you can run here's just a list of different commands so you can",
    "start": "2026900",
    "end": "2034150"
  },
  {
    "text": "explicitly create or delete resources you can expose services running in your",
    "start": "2034150",
    "end": "2040790"
  },
  {
    "text": "cluster but we'll move on so we've covered how kubernetes is implemented",
    "start": "2040790",
    "end": "2047270"
  },
  {
    "text": "and designed and now let's talk about how to actually create kubernetes",
    "start": "2047270",
    "end": "2054618"
  },
  {
    "text": "objects so the first type of object",
    "start": "2054619",
    "end": "2062750"
  },
  {
    "text": "we'll consider and that will create in our cluster is a namespace and to set up",
    "start": "2062750",
    "end": "2070220"
  },
  {
    "text": "the motivation for why you'd want to create a namespace consider you have a hundred people working against a single",
    "start": "2070220",
    "end": "2076220"
  },
  {
    "text": "kubernetes cluster and you want to limit their access and organize their workloads so that they're not stepping",
    "start": "2076220",
    "end": "2081888"
  },
  {
    "text": "on each other's toes you know creating resources with the same names that overwrite each other a namespace is what",
    "start": "2081889",
    "end": "2089868"
  },
  {
    "text": "allows you to provide this logical separation and access control workloads get launched into the default",
    "start": "2089869",
    "end": "2097920"
  },
  {
    "text": "namespace unless you specify a namespace and a manifest or on the command line so",
    "start": "2097920",
    "end": "2103920"
  },
  {
    "text": "I already showed in in the terminal here how to like list resources in a specific",
    "start": "2103920",
    "end": "2110220"
  },
  {
    "text": "namespace so the way I did that was I ran Q cuddle - n cube system and then I",
    "start": "2110220",
    "end": "2117420"
  },
  {
    "text": "just wrote get all I could also write to get a specific type of resource so just",
    "start": "2117420",
    "end": "2123270"
  },
  {
    "text": "get them get the pods in that namespace yeah so the next thing we'll do is we'll",
    "start": "2123270",
    "end": "2131300"
  },
  {
    "text": "create our namespace so we're gonna create a namespace for our flask app so we're going to call it flask q total",
    "start": "2131300",
    "end": "2139580"
  },
  {
    "text": "create create namespace flask so now",
    "start": "2139580",
    "end": "2147510"
  },
  {
    "text": "we've created that flask namespace and let's just show that it's empty it",
    "start": "2147510",
    "end": "2153630"
  },
  {
    "text": "doesn't have any resources in it yet so we'll type Q cuddle - n flask to get all",
    "start": "2153630",
    "end": "2159870"
  },
  {
    "text": "and Q cuddle tells us that it didn't find any resources in the flask",
    "start": "2159870",
    "end": "2165720"
  },
  {
    "text": "namespace yeah you know all right so the",
    "start": "2165720",
    "end": "2175860"
  },
  {
    "text": "first type of resource that we're gonna add to our namespace is a pod which is",
    "start": "2175860",
    "end": "2183560"
  },
  {
    "text": "the fundamental unit of work or workload in a kubernetes cluster and it differs",
    "start": "2183560",
    "end": "2188640"
  },
  {
    "text": "from a container in a sense that a pod can run multiple containers and can also",
    "start": "2188640",
    "end": "2195140"
  },
  {
    "text": "attach to volumes or attach volumes to those containers a pod kind of models a",
    "start": "2195140",
    "end": "2202050"
  },
  {
    "text": "logical host it in the sense that it allows it provides everything you need to run an instance of an application for",
    "start": "2202050",
    "end": "2210120"
  },
  {
    "text": "example if you have an app that serves files consisting of a container that does the serving and a container that fetches the files and does some",
    "start": "2210120",
    "end": "2216420"
  },
  {
    "text": "processing these two tightly coupled containers can run as a single pod they",
    "start": "2216420",
    "end": "2221520"
  },
  {
    "text": "would share storage they would talk over localhost and they're guaranteed to run on the same physical node",
    "start": "2221520",
    "end": "2227890"
  },
  {
    "text": "most pods however will consist of a single container they tend to be ephemeral and when they when they died",
    "start": "2227890",
    "end": "2234069"
  },
  {
    "text": "new pods must be started and finally just to reiterate you don't explicitly",
    "start": "2234069",
    "end": "2240700"
  },
  {
    "text": "run containers on kubernetes you run pods and to show you an example of that",
    "start": "2240700",
    "end": "2247559"
  },
  {
    "text": "here is what's called a pod manifest in",
    "start": "2247559",
    "end": "2252700"
  },
  {
    "text": "kubernetes you define and create objects using manifest files typically in Yambol but you can also use JSON if you want",
    "start": "2252700",
    "end": "2259380"
  },
  {
    "text": "and yeah I'll just quickly step through the different fields here we've got API",
    "start": "2259380",
    "end": "2265660"
  },
  {
    "text": "version kind metadata and the metadata consists of kind of arbitrary key values",
    "start": "2265660",
    "end": "2273220"
  },
  {
    "text": "although some of the some of the those key values are or sorry it's it's the",
    "start": "2273220",
    "end": "2279039"
  },
  {
    "text": "labels that contain arbitrary key values that allow you to associate different parts of your cluster with a key key",
    "start": "2279039",
    "end": "2287589"
  },
  {
    "text": "value approach but other metadata includes the name of your your pod and",
    "start": "2287589",
    "end": "2294039"
  },
  {
    "text": "then finally the last top-level item we have here is a spec and this is a pod",
    "start": "2294039",
    "end": "2302970"
  },
  {
    "text": "specification it allows you to define the containers and volumes that you have",
    "start": "2302970",
    "end": "2308589"
  },
  {
    "text": "related to your your your pod so here we have an image called digitalocean slash",
    "start": "2308589",
    "end": "2316000"
  },
  {
    "text": "flask - hello world : latest so we're not actually going to use the the container we built the container image",
    "start": "2316000",
    "end": "2323470"
  },
  {
    "text": "we built earlier we're going to use one that has already been pushed up to docker hub which is kind of implicit in",
    "start": "2323470",
    "end": "2331660"
  },
  {
    "text": "the name here there's another part of an image name that you could add which would be the host name of the container",
    "start": "2331660",
    "end": "2338950"
  },
  {
    "text": "registry but dr. by default just implicitly assumes that you're referring",
    "start": "2338950",
    "end": "2345220"
  },
  {
    "text": "to hub docker comm for your image registry and then also at the bottom of",
    "start": "2345220",
    "end": "2354640"
  },
  {
    "text": "the spec you can see you were exposing the container port 5,000",
    "start": "2354640",
    "end": "2361500"
  },
  {
    "text": "in our cluster so yeah let's create a pod blasts - pod all right so what we're",
    "start": "2361500",
    "end": "2376680"
  },
  {
    "text": "running here is cue cuddle - and in flask so we're running in the the name",
    "start": "2376680",
    "end": "2382050"
  },
  {
    "text": "space flask that we just created and we're going to apply the manifest",
    "start": "2382050",
    "end": "2387890"
  },
  {
    "text": "pointed to by this - F argument which is a flash - pod yam long so let's just",
    "start": "2387890",
    "end": "2395370"
  },
  {
    "text": "take a look at the contents of the kate's directory that we're working in",
    "start": "2395370",
    "end": "2400860"
  },
  {
    "text": "in which it'll contain flask - pod and later we'll look at flask - deployment",
    "start": "2400860",
    "end": "2407760"
  },
  {
    "text": "in flask - service alright so we've",
    "start": "2407760",
    "end": "2413220"
  },
  {
    "text": "created our pod let's apologies for that",
    "start": "2413220",
    "end": "2418740"
  },
  {
    "text": "I lost my team accession flask here we",
    "start": "2418740",
    "end": "2429120"
  },
  {
    "text": "go yeah so let's take a look get all in the",
    "start": "2429120",
    "end": "2435420"
  },
  {
    "text": "flask namespace so we can see that our pod is now running in the cluster it's",
    "start": "2435420",
    "end": "2440730"
  },
  {
    "text": "been up for 20 seconds that is running zero restarts 1 out of 1 container is ready within that pod and in order to",
    "start": "2440730",
    "end": "2449130"
  },
  {
    "text": "show that our app is actually running in the pod let's create a quart forward to",
    "start": "2449130",
    "end": "2456710"
  },
  {
    "text": "that pod it's actually last - pod here",
    "start": "2456710",
    "end": "2465740"
  },
  {
    "text": "unable to listen it's probably unable to listen I'm still running this app here",
    "start": "2465920",
    "end": "2472100"
  },
  {
    "text": "now we try that and this time the curl should work yep there we go so we can",
    "start": "2472100",
    "end": "2481230"
  },
  {
    "text": "see a handling connection for port 5000 that's that's a message coming from cube",
    "start": "2481230",
    "end": "2487920"
  },
  {
    "text": "cuddle indicating that it's handling that port forward connection then here below our curl command shows",
    "start": "2487920",
    "end": "2495900"
  },
  {
    "text": "that we actually did get a hello world body out of when we hit localhost at",
    "start": "2495900",
    "end": "2502680"
  },
  {
    "text": "port 5,000 so that that proves that our flats cap is running in the cluster we",
    "start": "2502680",
    "end": "2509849"
  },
  {
    "text": "can move on I think nope let's first delete that pod",
    "start": "2509849",
    "end": "2515539"
  },
  {
    "text": "yeah so I mentioned earlier that you can you can either create or delete",
    "start": "2516410",
    "end": "2525770"
  },
  {
    "text": "kubernetes resources using cube cuddle so here we're running cube cuddle - and",
    "start": "2525770",
    "end": "2531000"
  },
  {
    "text": "flask and we're using the delete command and we're deleting a pod specifically",
    "start": "2531000",
    "end": "2536760"
  },
  {
    "text": "and the name of that pod is flask - pod and we're deleting it because we're",
    "start": "2536760",
    "end": "2543750"
  },
  {
    "text": "gonna be creating a different type of resource shortly that that creates its",
    "start": "2543750",
    "end": "2550650"
  },
  {
    "text": "own flash - pod instances so we're",
    "start": "2550650",
    "end": "2557099"
  },
  {
    "text": "getting kind of short on time so I'm going to skip over discussing labels",
    "start": "2557099",
    "end": "2563180"
  },
  {
    "text": "suffice it to say labels allow you to associate different resource types such",
    "start": "2563180",
    "end": "2570210"
  },
  {
    "text": "as services with other resource types such as deployments in pods now we're",
    "start": "2570210",
    "end": "2578279"
  },
  {
    "text": "going to talk about workloads so we've we've covered the core kubernetes unit",
    "start": "2578279",
    "end": "2583319"
  },
  {
    "text": "pods now the we don't always work with pods when we're creating like a full",
    "start": "2583319",
    "end": "2590000"
  },
  {
    "text": "application because we often want more abstraction on top of pods so",
    "start": "2590000",
    "end": "2597440"
  },
  {
    "text": "deployments are probably the most common workload controller and as previously or",
    "start": "2597440",
    "end": "2604859"
  },
  {
    "text": "as defined previously sorry deployments",
    "start": "2604859",
    "end": "2609960"
  },
  {
    "text": "are used for stateless applications and allow you to run several replicas of a given pod without having to create each",
    "start": "2609960",
    "end": "2617039"
  },
  {
    "text": "of those pods manually so through a deployment you can update the pod image",
    "start": "2617039",
    "end": "2623670"
  },
  {
    "text": "scale the number of replicas up and down and it's the only workload that we're gonna cover in this presentation also",
    "start": "2623670",
    "end": "2630900"
  },
  {
    "text": "worthy mention our stateful sets daemon sets jobs in cron jobs worth so so the",
    "start": "2630900",
    "end": "2639000"
  },
  {
    "text": "it's worth looking these up in the upstream kubernetes documentation if you're interested but we're just we're",
    "start": "2639000",
    "end": "2645540"
  },
  {
    "text": "not going to cover them because we're running short on time right now alright",
    "start": "2645540",
    "end": "2651060"
  },
  {
    "text": "so we previously covered pods and deployments allow us to run multiple",
    "start": "2651060",
    "end": "2657390"
  },
  {
    "text": "copies of a given pod and within a deployment there's another level of",
    "start": "2657390",
    "end": "2662700"
  },
  {
    "text": "abstraction between deployment and pod called a replica set that kind of handles a lot of the details of managing",
    "start": "2662700",
    "end": "2670290"
  },
  {
    "text": "the number of pods running at a given time but you typically won't have to worry about replica sets your you will",
    "start": "2670290",
    "end": "2677130"
  },
  {
    "text": "most likely be working with deployments directly and as I mentioned earlier",
    "start": "2677130",
    "end": "2682920"
  },
  {
    "text": "deployments are used to run stateless apps and they're stateless because when a pod gets destroyed it doesn't have",
    "start": "2682920",
    "end": "2692910"
  },
  {
    "text": "none of the the data that it's created and locally within its file system gets preserved and deployments allow you to",
    "start": "2692910",
    "end": "2699300"
  },
  {
    "text": "control rollout rates which is which is like the rate at which the the pods the",
    "start": "2699300",
    "end": "2707250"
  },
  {
    "text": "number of pods scale up and down and they also allow you to roll back to a",
    "start": "2707250",
    "end": "2712530"
  },
  {
    "text": "specific release like with you know a release of your container image all",
    "start": "2712530",
    "end": "2719820"
  },
  {
    "text": "right so moving on to a deployment example similar to our pod manifest here",
    "start": "2719820",
    "end": "2725820"
  },
  {
    "text": "we have a deployment manifest some similarities you can see API version",
    "start": "2725820",
    "end": "2730920"
  },
  {
    "text": "pined metadata and then aspect topple up top-level directive but within that spec",
    "start": "2730920",
    "end": "2739410"
  },
  {
    "text": "is where the deployment begins to differ from a pod so here we've introduced",
    "start": "2739410",
    "end": "2745470"
  },
  {
    "text": "replicas a selector and the selector will become so later when we're working",
    "start": "2745470",
    "end": "2754290"
  },
  {
    "text": "with a load balancer service we'll be using this selector here",
    "start": "2754290",
    "end": "2759820"
  },
  {
    "text": "in order to tell the load balancer which deployment its ports or its traffic",
    "start": "2759820",
    "end": "2766420"
  },
  {
    "text": "should be forwarded to and then the the final part of the deployment spec is the",
    "start": "2766420",
    "end": "2773950"
  },
  {
    "text": "template and this is specifically a pod template so it's gonna look very similar",
    "start": "2773950",
    "end": "2779440"
  },
  {
    "text": "to the pod manifest itself just sitting within a like deeper within the the data",
    "start": "2779440",
    "end": "2786160"
  },
  {
    "text": "structure hierarchy so I won't I won't talk about that again since I already talked about the the pod",
    "start": "2786160",
    "end": "2792070"
  },
  {
    "text": "manifest I'll go straight to creating the deployment so I'll apply flask",
    "start": "2792070",
    "end": "2798400"
  },
  {
    "text": "deployment yeah ml and then you see",
    "start": "2798400",
    "end": "2804280"
  },
  {
    "text": "again we have deployment to apps flask - tip created and let's take a look at",
    "start": "2804280",
    "end": "2811350"
  },
  {
    "text": "what resources that created within our namespace so it created first off the",
    "start": "2811350",
    "end": "2816880"
  },
  {
    "text": "deployment and then it created a replica set that manages two pods so we've got",
    "start": "2816880",
    "end": "2822930"
  },
  {
    "text": "this time we have two pods automatically created by our single deployment which",
    "start": "2822930",
    "end": "2828160"
  },
  {
    "text": "kind of gives you some beginning of insight into like how a deployment is a",
    "start": "2828160",
    "end": "2836530"
  },
  {
    "text": "more like a higher level abstraction over a pod yeah so again we can port",
    "start": "2836530",
    "end": "2844780"
  },
  {
    "text": "forward here and but instead of port forwarding - directly to the pod we'll",
    "start": "2844780",
    "end": "2850240"
  },
  {
    "text": "just port forward to the deployment itself and then we'll curl to show it",
    "start": "2850240",
    "end": "2856180"
  },
  {
    "text": "working similar to the pod it yeah works fine yeah let's move on to talk about so",
    "start": "2856180",
    "end": "2871300"
  },
  {
    "text": "so up to this point we've talked about objects and components internal to the cluster but we also want to be able to",
    "start": "2871300",
    "end": "2878380"
  },
  {
    "text": "expose those workloads to the outside world and provide a stable endpoint for",
    "start": "2878380",
    "end": "2883390"
  },
  {
    "text": "a set of running pods services provide this external exposure and I'm kind",
    "start": "2883390",
    "end": "2891099"
  },
  {
    "text": "I'm kind of going to skip over discussion of the different types of",
    "start": "2891099",
    "end": "2896400"
  },
  {
    "text": "services because the one we're most interested in is a load balancer because",
    "start": "2896400",
    "end": "2903130"
  },
  {
    "text": "that's the one we're going to be creating and what that's going to provide for us is it's going to give us",
    "start": "2903130",
    "end": "2908170"
  },
  {
    "text": "an external IP that traffic from outside of our cluster can hit and then that",
    "start": "2908170",
    "end": "2914529"
  },
  {
    "text": "external IP is going to get translated into addresses and ports internal to the",
    "start": "2914529",
    "end": "2923079"
  },
  {
    "text": "cluster that ultimately get get distributed to instances of our",
    "start": "2923079",
    "end": "2929229"
  },
  {
    "text": "application running on different nodes to you know depending on the the load balancing algorithm here which we won't",
    "start": "2929229",
    "end": "2935680"
  },
  {
    "text": "we won't talk about those details either we'll just go ahead and create our",
    "start": "2935680",
    "end": "2942190"
  },
  {
    "text": "service and again I'll just briefly talk about the service manifest and like",
    "start": "2942190",
    "end": "2948640"
  },
  {
    "text": "point out how we have some similarities with a deployment and a pod in a sense we have API version kind metadata and",
    "start": "2948640",
    "end": "2956109"
  },
  {
    "text": "then a spec and then inside the spec is where the service again differs from the",
    "start": "2956109",
    "end": "2962859"
  },
  {
    "text": "pod in the deployment we're gonna say we're gonna build a load balancer type service where we're forwarding traffic",
    "start": "2962859",
    "end": "2971680"
  },
  {
    "text": "on our external IP at port 82 port 5000",
    "start": "2971680",
    "end": "2978009"
  },
  {
    "text": "on our internal applications and the the",
    "start": "2978009",
    "end": "2983140"
  },
  {
    "text": "internal applications are specified by the selector at the bottom of the manifest which says app colon flask -",
    "start": "2983140",
    "end": "2990430"
  },
  {
    "text": "hello world which that's that's what I pointed out - in the deployment manifest earlier so let's go ahead and start",
    "start": "2990430",
    "end": "2998559"
  },
  {
    "text": "creating that that service because it it",
    "start": "2998559",
    "end": "3003809"
  },
  {
    "text": "takes a few minutes for the for the external IP address to get assigned and",
    "start": "3003809",
    "end": "3011069"
  },
  {
    "text": "for the service to become available so I want to get this going here and we'll",
    "start": "3011069",
    "end": "3016469"
  },
  {
    "text": "also will run cube cuddle - n flask get",
    "start": "3016469",
    "end": "3022079"
  },
  {
    "text": "service and then we're - w flag so that cube cuddle doesn't exit right away but instead continuously",
    "start": "3022079",
    "end": "3029860"
  },
  {
    "text": "shows updates to the the object as they",
    "start": "3029860",
    "end": "3035330"
  },
  {
    "text": "may happen so the thing we're waiting for here is for this this external IP",
    "start": "3035330",
    "end": "3041810"
  },
  {
    "text": "field to change from pending to a specific IP address and then once that",
    "start": "3041810",
    "end": "3047510"
  },
  {
    "text": "happens we'll curl to that IP address at port 80 and observe from outside the",
    "start": "3047510",
    "end": "3058790"
  },
  {
    "text": "cluster accessing the application we've deployed inside the cluster and for",
    "start": "3058790",
    "end": "3065000"
  },
  {
    "text": "those of you following along at home if you have a terminal open and you're comfortable writing a curl command line",
    "start": "3065000",
    "end": "3071090"
  },
  {
    "text": "you can follow along and do the same thing so here we go you can take this",
    "start": "3071090",
    "end": "3077000"
  },
  {
    "text": "public IP address and run curl HTTP colon slash slash and you can also",
    "start": "3077000",
    "end": "3085490"
  },
  {
    "text": "access this application running in the cluster that I've created for this",
    "start": "3085490",
    "end": "3092060"
  },
  {
    "text": "presentation yeah pretty cool and let me",
    "start": "3092060",
    "end": "3099320"
  },
  {
    "text": "see so I'm gonna very briefly talk about",
    "start": "3099320",
    "end": "3104900"
  },
  {
    "text": "other types of kubernetes resources I'm not gonna put too much time on this because I want to save a couple minutes",
    "start": "3104900",
    "end": "3110810"
  },
  {
    "text": "and maybe get one question in if anybody has a question so other types of",
    "start": "3110810",
    "end": "3116750"
  },
  {
    "text": "resources includes configuration Maps secrets volumes persistent volumes",
    "start": "3116750",
    "end": "3123920"
  },
  {
    "text": "persistent volume claims these these things are ways that you can persist or",
    "start": "3123920",
    "end": "3132160"
  },
  {
    "text": "so the config maps and secrets are ways that you can pass configuration into your application without storing it in",
    "start": "3132160",
    "end": "3139040"
  },
  {
    "text": "the application itself volumes and persistent volumes are way that you can",
    "start": "3139040",
    "end": "3144650"
  },
  {
    "text": "share data between containers and a pod and they get mounted just like a you",
    "start": "3144650",
    "end": "3150230"
  },
  {
    "text": "know a normal block storage volume on your file system but inside the",
    "start": "3150230",
    "end": "3157270"
  },
  {
    "text": "container file systems other features include resource requests and limits",
    "start": "3157270",
    "end": "3162400"
  },
  {
    "text": "auto-scaling node affinity taints and toleration x' dashboard metrics server and then you",
    "start": "3162400",
    "end": "3170350"
  },
  {
    "text": "also have third-party applications that provide some of the previously mentioned features but also third-party like open",
    "start": "3170350",
    "end": "3177880"
  },
  {
    "text": "source applications like like helm which is a kind of kubernetes package manager",
    "start": "3177880",
    "end": "3184780"
  },
  {
    "text": "for common applications such as nginx apache my sequel Postgres and other",
    "start": "3184780",
    "end": "3193090"
  },
  {
    "text": "things I can't think about time ahead all right so if you wanted to learn more",
    "start": "3193090",
    "end": "3198510"
  },
  {
    "text": "you could these slides will be available will be made available after this",
    "start": "3198510",
    "end": "3205540"
  },
  {
    "text": "presentation and you can click through some of these links to to learn more so",
    "start": "3205540",
    "end": "3212950"
  },
  {
    "text": "for example the digital ocean kubernetes community tutorials the kubernetes white paper which kind of goes more in-depth",
    "start": "3212950",
    "end": "3219370"
  },
  {
    "text": "into kubernetes architecture there's the history of kubernetes and the community",
    "start": "3219370",
    "end": "3226060"
  },
  {
    "text": "behind it the communities get proper github project itself and then the official documentation which is",
    "start": "3226060",
    "end": "3232120"
  },
  {
    "text": "spectacular I can't recommend that high enough highly enough all right does",
    "start": "3232120",
    "end": "3238180"
  },
  {
    "text": "anybody have any questions yes we have quite a few questions in the Q&A box",
    "start": "3238180",
    "end": "3244950"
  },
  {
    "text": "makes me sorry I didn't stop to just now",
    "start": "3244950",
    "end": "3252730"
  },
  {
    "text": "so I don't know if you want to go far back I can ask you a couple quick questions if you pop up in the Q&A you",
    "start": "3252730",
    "end": "3259840"
  },
  {
    "text": "can take a look as well I'm sure we get you a Q&A open here so I just skim",
    "start": "3259840",
    "end": "3265870"
  },
  {
    "text": "through it for a few seconds here and thinking wouldn't it answer in a minute or two let's see so somebody asked",
    "start": "3265870",
    "end": "3278350"
  },
  {
    "text": "running the container on time without a hypervisor is possible but how many users actually deploy that on bare metal",
    "start": "3278350",
    "end": "3284620"
  },
  {
    "text": "compared to VMs that's not very common",
    "start": "3284620",
    "end": "3289720"
  },
  {
    "text": "in my experience typically you have virtual machines running the container runtime is kind of",
    "start": "3289720",
    "end": "3297729"
  },
  {
    "text": "like another you know another layer of abstraction within your cloud provider that allows the cloud provider to",
    "start": "3297729",
    "end": "3305309"
  },
  {
    "text": "provide efficient or to make the most efficient use of their hardware",
    "start": "3305309",
    "end": "3310660"
  },
  {
    "text": "resources while still you know allowing you to create a cluster that's separate",
    "start": "3310660",
    "end": "3316029"
  },
  {
    "text": "from other users clusters but there are some some use cases like on-prem where",
    "start": "3316029",
    "end": "3323019"
  },
  {
    "text": "people will deploy a container runtime",
    "start": "3323019",
    "end": "3328059"
  },
  {
    "text": "on you know a bare metal operating system let's see let's see somebody",
    "start": "3328059",
    "end": "3336279"
  },
  {
    "text": "asked would wouldn't the wouldn't the",
    "start": "3336279",
    "end": "3342549"
  },
  {
    "text": "build process overwrite files in previous layers so so the way the the",
    "start": "3342549",
    "end": "3348579"
  },
  {
    "text": "layered file system works is that yes if you if you create a file at the exact",
    "start": "3348579",
    "end": "3355420"
  },
  {
    "text": "same path as a file that was created in a previous iteration of the layers that",
    "start": "3355420",
    "end": "3361029"
  },
  {
    "text": "that new layer will be authoritative like users of that layer will only see",
    "start": "3361029",
    "end": "3367749"
  },
  {
    "text": "the the file that that it'll it'll",
    "start": "3367749",
    "end": "3373210"
  },
  {
    "text": "essentially mask out similarly named files in previous layers so yes somebody",
    "start": "3373210",
    "end": "3380049"
  },
  {
    "text": "asked our commands such as from work der copy run expose command are those case",
    "start": "3380049",
    "end": "3385089"
  },
  {
    "text": "sensitive and no they're not can you",
    "start": "3385089",
    "end": "3390640"
  },
  {
    "text": "explain how the port mapping in docker containers actually work like when we",
    "start": "3390640",
    "end": "3396430"
  },
  {
    "text": "search for HTTP colon slash slash localhost colon port number I can't",
    "start": "3396430",
    "end": "3403029"
  },
  {
    "text": "explain that I'm sorry it would take like I have like some inkling of how it",
    "start": "3403029",
    "end": "3408729"
  },
  {
    "text": "works but it would it would be a big hole to try to explain it here should we",
    "start": "3408729",
    "end": "3416019"
  },
  {
    "text": "use doctor composed for the prod can we have pros and cons for it so for those",
    "start": "3416019",
    "end": "3421359"
  },
  {
    "text": "of you who don't know docker compose is a come online tool written in Python which",
    "start": "3421359",
    "end": "3427770"
  },
  {
    "text": "allows you to create a bunch of docker containers together at the same time",
    "start": "3427770",
    "end": "3434530"
  },
  {
    "text": "like within your local development environment so say say you're working on a stateless app that requires my sequel",
    "start": "3434530",
    "end": "3444040"
  },
  {
    "text": "service running and you want to run integration tests for your my sequel service doctor compose the docker",
    "start": "3444040",
    "end": "3451000"
  },
  {
    "text": "compose use case for for local development would be to you know create",
    "start": "3451000",
    "end": "3456250"
  },
  {
    "text": "a docker compose file that's that describes each of the doctor images that you want to build and run and then you",
    "start": "3456250",
    "end": "3462700"
  },
  {
    "text": "would run a docker compose sub command that runs it local on your local system",
    "start": "3462700",
    "end": "3468700"
  },
  {
    "text": "and yes and to answer the question",
    "start": "3468700",
    "end": "3473830"
  },
  {
    "text": "should we use docker compose for prod I don't think so I don't I wouldn't I",
    "start": "3473830",
    "end": "3479860"
  },
  {
    "text": "would stick with kubernetes just because I'm I'm biased towards kubernetes since",
    "start": "3479860",
    "end": "3485860"
  },
  {
    "text": "I work on the digitalocean kubernetes product and I've got a few years of experience with it now and docker",
    "start": "3485860",
    "end": "3492880"
  },
  {
    "text": "compose doesn't actually interact with kubernetes it's a docker specific tool a",
    "start": "3492880",
    "end": "3503880"
  },
  {
    "text": "question around here shell operating system how can you delete a block of command at once for example in your",
    "start": "3503880",
    "end": "3513640"
  },
  {
    "text": "shell window when you type in command docker run flask how did you manage to leak Falasca one go oh those are that's",
    "start": "3513640",
    "end": "3520950"
  },
  {
    "text": "kind of an off topic question but they're different like control plus",
    "start": "3520950",
    "end": "3527620"
  },
  {
    "text": "letter keys so like if I want to just delete one word back in my shell I would",
    "start": "3527620",
    "end": "3533740"
  },
  {
    "text": "type ctrl W and that would delete one word back that should work for most shells and then the way I like I call up",
    "start": "3533740",
    "end": "3542980"
  },
  {
    "text": "old command mines that I've already run is hitting ctrl R and there's like a whole category of like control codes",
    "start": "3542980",
    "end": "3550660"
  },
  {
    "text": "that work in most shells that let you do things more quickly at the command line",
    "start": "3550660",
    "end": "3558329"
  },
  {
    "text": "that was a fun question what is a bootstrapping of kate's mean does it",
    "start": "3558340",
    "end": "3564950"
  },
  {
    "text": "include creation of kubernetes master and worker nodes yeah bootstrapping at",
    "start": "3564950",
    "end": "3571190"
  },
  {
    "text": "kubernetes cluster is exactly that creating the kubernetes master and",
    "start": "3571190",
    "end": "3576520"
  },
  {
    "text": "creating worker nodes that then attach to the master and that's that's the",
    "start": "3576520",
    "end": "3582230"
  },
  {
    "text": "process that cloud providers like GCP",
    "start": "3582230",
    "end": "3587540"
  },
  {
    "text": "AWS digitalocean as you were that's that boot pressing strapping",
    "start": "3587540",
    "end": "3595250"
  },
  {
    "text": "process is what cloud providers abstract away from you the user so that you don't",
    "start": "3595250",
    "end": "3602330"
  },
  {
    "text": "have to worry about managing the cluster itself you just have to worry about or",
    "start": "3602330",
    "end": "3607340"
  },
  {
    "text": "or you just get to worry about managing your applications running in cluster",
    "start": "3607340",
    "end": "3614770"
  },
  {
    "text": "alright somebody asked what is a kubernetes object so when I talk about a kubernetes object let's let's go back",
    "start": "3614770",
    "end": "3621470"
  },
  {
    "text": "here for a second to our service when I'm talking about a kubernetes object I'm talking about the data structure",
    "start": "3621470",
    "end": "3627980"
  },
  {
    "text": "that you see here in this manifest file which like I like I've mentioned before",
    "start": "3627980",
    "end": "3633859"
  },
  {
    "text": "consists of all the metadata about your kubernetes object that kubernetes needs",
    "start": "3633859",
    "end": "3640910"
  },
  {
    "text": "to know in order to continuously assert its state in in the control the",
    "start": "3640910",
    "end": "3648800"
  },
  {
    "text": "kubernetes controller manager of loops let's",
    "start": "3648800",
    "end": "3656290"
  },
  {
    "text": "today we manage a lot of applications specific configuration which is unique to servers we deploy for using doctor",
    "start": "3660640",
    "end": "3669460"
  },
  {
    "text": "how will this how will we manage this application configuration so if you have",
    "start": "3669460",
    "end": "3676510"
  },
  {
    "text": "application specific configuration that is unique to your servers if assuming",
    "start": "3676510",
    "end": "3684310"
  },
  {
    "text": "you're running virtual servers in a cloud somewhere you probably have virtual machine images and you start",
    "start": "3684310",
    "end": "3691060"
  },
  {
    "text": "with those virtual machine images you create a new instance of your of your server and then the way you might deploy",
    "start": "3691060",
    "end": "3699010"
  },
  {
    "text": "your configuration to that server your to deploy that application and the configuration might be through a",
    "start": "3699010",
    "end": "3705360"
  },
  {
    "text": "configuration management tool such as",
    "start": "3705360",
    "end": "3709620"
  },
  {
    "text": "brainfart puppet or chef or ansible and",
    "start": "3711120",
    "end": "3718390"
  },
  {
    "text": "then so you would run those you would use configuration described in those the",
    "start": "3718390",
    "end": "3723880"
  },
  {
    "text": "the languages of those tools to specify what applications and configuration need",
    "start": "3723880",
    "end": "3730660"
  },
  {
    "text": "to be on your server with docker the all like the alternative using docker",
    "start": "3730660",
    "end": "3736180"
  },
  {
    "text": "is not to use those configuration management tools but to build images that contain your applications and then",
    "start": "3736180",
    "end": "3743110"
  },
  {
    "text": "have a cluster management system similar to kubernetes like specifically",
    "start": "3743110",
    "end": "3749470"
  },
  {
    "text": "kubernetes in in this context that we're talking about today that's where your",
    "start": "3749470",
    "end": "3757090"
  },
  {
    "text": "configuration would lie so if we if we scroll back a little bit or maybe it's",
    "start": "3757090",
    "end": "3762160"
  },
  {
    "text": "forward here let's talk about so i talked about config maps and secrets",
    "start": "3762160",
    "end": "3768910"
  },
  {
    "text": "earlier so a configuration map is basically a kubernetes like resource",
    "start": "3768910",
    "end": "3777520"
  },
  {
    "text": "object that allows you to store configuration files in the HDD database",
    "start": "3777520",
    "end": "3784120"
  },
  {
    "text": "of the cluster and provide those configuration maps mounted into your",
    "start": "3784120",
    "end": "3790150"
  },
  {
    "text": "your applications pod containers at runtime and similarly",
    "start": "3790150",
    "end": "3796069"
  },
  {
    "text": "secrets are secrets are similar to config Maps except they're typically",
    "start": "3796069",
    "end": "3802640"
  },
  {
    "text": "encrypted and when you view a secret on the command line say using cube cuddle",
    "start": "3802640",
    "end": "3808960"
  },
  {
    "text": "the the output would be obscured so that you don't reveal secret information",
    "start": "3808960",
    "end": "3815710"
  },
  {
    "text": "accidentally wait I think we need to wrap up if you are one was just",
    "start": "3815710",
    "end": "3822050"
  },
  {
    "text": "questioning her yeah yep yep I was just gonna reiterate what the question was because I kind of went off on a big",
    "start": "3822050",
    "end": "3828530"
  },
  {
    "text": "tangent sure so so like I was answering the question man like like what's the",
    "start": "3828530",
    "end": "3835550"
  },
  {
    "text": "alternative using docker containers and cluster management systems as opposed to",
    "start": "3835550",
    "end": "3842829"
  },
  {
    "text": "a traditional of either virtual or Hardware server where you use some kind",
    "start": "3842829",
    "end": "3849200"
  },
  {
    "text": "of configuration management tool to push application and configuration code two",
    "start": "3849200",
    "end": "3854690"
  },
  {
    "text": "years to your server well like we said",
    "start": "3854690",
    "end": "3860510"
  },
  {
    "text": "earlier we have links to the digital ocean community page that will make",
    "start": "3860510",
    "end": "3866000"
  },
  {
    "text": "available in the slides you can get from the webinar page later today um let's",
    "start": "3866000",
    "end": "3873170"
  },
  {
    "text": "see um that's all the time we have obviously and we'd like to thank Wayne for such a great presentation today and",
    "start": "3873170",
    "end": "3879200"
  },
  {
    "text": "thanks everybody for joining will have those slides we're recording up later today for your viewing pleasure and we",
    "start": "3879200",
    "end": "3885049"
  },
  {
    "text": "will see you guys again in the future seems you have to webinar thanks everybody so much thanks Taylor and",
    "start": "3885049",
    "end": "3891470"
  },
  {
    "text": "thanks everyone for listening to me talk yes great presentation great questions",
    "start": "3891470",
    "end": "3896630"
  },
  {
    "text": "everybody thanks so much",
    "start": "3896630",
    "end": "3899440"
  }
]