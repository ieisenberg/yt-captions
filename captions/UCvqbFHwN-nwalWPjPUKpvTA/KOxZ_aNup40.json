[
  {
    "text": "uh hello everyone I'm very happy to be here today uh this is my first cubec",
    "start": "320",
    "end": "5919"
  },
  {
    "text": "con and it turns out the best way to attend cucon is to actually speak at",
    "start": "5919",
    "end": "11000"
  },
  {
    "text": "cucon so those of you on YouTube if you want to join if you want to attend submit proposals and maybe just maybe",
    "start": "11000",
    "end": "19160"
  },
  {
    "text": "you will get in uh so the title of today's St is",
    "start": "19160",
    "end": "24480"
  },
  {
    "text": "fuzzing for stability um",
    "start": "24480",
    "end": "30840"
  },
  {
    "text": "my name is Jacob uh I'm working at Alpha sense as a cloud platform Tech",
    "start": "30840",
    "end": "38399"
  },
  {
    "text": "lead uh and I'm very grateful to Alpha sense for sponsoring the tickets for sponsoring the hotel room and also",
    "start": "38559",
    "end": "45840"
  },
  {
    "text": "enforcing the kind of culture that allows you to do this kind of work and I'm very lucky to be joined by around 10",
    "start": "45840",
    "end": "52879"
  },
  {
    "text": "of my co-workers right here uh they are supporting me it's very nice of them and",
    "start": "52879",
    "end": "58680"
  },
  {
    "text": "a bit more about me uh I come from Europe I have a dual uh nationality so",
    "start": "58680",
    "end": "65320"
  },
  {
    "text": "I'm both the citizen of Poland and a citizen of Sweden and for those of you",
    "start": "65320",
    "end": "70640"
  },
  {
    "text": "in India that maybe never we in Europe or you don't know much about the Polish or Swedish culture an interesting thing",
    "start": "70640",
    "end": "77960"
  },
  {
    "text": "common among those two countries is that we have a pretty interesting alphabet so",
    "start": "77960",
    "end": "83079"
  },
  {
    "text": "you can see the example of a Polish bison the Zuber you can see the cute Z with the dot and the Swedish Alia which",
    "start": "83079",
    "end": "91000"
  },
  {
    "text": "is the word for the Moose has two dos over the a um so my day job is around cloud",
    "start": "91000",
    "end": "98880"
  },
  {
    "text": "orchestration cloud apis um but some of my other interests include",
    "start": "98880",
    "end": "104960"
  },
  {
    "text": "compilers uh cloud computing cyber security and performance optimization so this talk will include",
    "start": "104960",
    "end": "111880"
  },
  {
    "text": "all of those topics um and what I want you to get out of this talk is learn more about the CV",
    "start": "111880",
    "end": "119079"
  },
  {
    "text": "process how does it happen uh learn what fasing is and how can you use it for",
    "start": "119079",
    "end": "125680"
  },
  {
    "text": "various means and also hopefully hopefully you can try to contribute",
    "start": "125680",
    "end": "133239"
  },
  {
    "text": "yourself uh so first things first uh CV 2024",
    "start": "133239",
    "end": "138959"
  },
  {
    "text": "26147 this is a high severity denial of service vulnerability I identified in",
    "start": "138959",
    "end": "146120"
  },
  {
    "text": "February and this was found in Helm how many of you know Helm is can you raise",
    "start": "146120",
    "end": "151640"
  },
  {
    "text": "your hands quite many this is a very popular major core Cloud uh",
    "start": "151640",
    "end": "157200"
  },
  {
    "text": "software it's quite not a common occurrence to find vulnerabilities but apparently it still can",
    "start": "157200",
    "end": "163480"
  },
  {
    "text": "happen um so when I reported this it was actually two different",
    "start": "163480",
    "end": "169920"
  },
  {
    "text": "vulnerabilities and I reported this at two different points in time but since the core cause was the",
    "start": "169920",
    "end": "177360"
  },
  {
    "text": "same the helm maintainers decided to bound it together and release a single cve so the first part of the",
    "start": "177360",
    "end": "184720"
  },
  {
    "text": "vulnerability affected the repository system in Helm so Helm allows you to add",
    "start": "184720",
    "end": "191080"
  },
  {
    "text": "repositories and every repository comes with a metadata file called index yaml",
    "start": "191080",
    "end": "197120"
  },
  {
    "text": "that encodes some additional data and on the left side you see the vanilla normal healthy metadata file and on the right",
    "start": "197120",
    "end": "205480"
  },
  {
    "text": "side you can see the malicious version of it that is a bit smaller",
    "start": "205480",
    "end": "211760"
  },
  {
    "text": "so the core issue here was that the metadata was missing and that led to a nil pointer",
    "start": "211920",
    "end": "218159"
  },
  {
    "text": "the reference that causes program termination and this is the fix four",
    "start": "218159",
    "end": "226439"
  },
  {
    "text": "lines um so basically we check if the metadata is nil if it's nil we zero initialize",
    "start": "226439",
    "end": "232360"
  },
  {
    "text": "it um this is the second part of the vulnerability affecting the plug-in",
    "start": "232360",
    "end": "237959"
  },
  {
    "text": "subsystem again similar sorry on the left side we have a healthy metadata for",
    "start": "237959",
    "end": "243400"
  },
  {
    "text": "a plug-in and on the right side we have a malicious version of it and you are right you are correct it's an empty file",
    "start": "243400",
    "end": "250319"
  },
  {
    "text": "so an empty file was enough to trigger this um yes there is no white space",
    "start": "250319",
    "end": "259160"
  },
  {
    "text": "there and this was the fix again four lines we check if the metadata is nil if",
    "start": "259560",
    "end": "265040"
  },
  {
    "text": "it's nil we zero initialize it uh and the core issue was that",
    "start": "265040",
    "end": "271039"
  },
  {
    "text": "metadata can be a pointer and we deference this pointer without checking first if it's",
    "start": "271039",
    "end": "277600"
  },
  {
    "text": "nil and for those of you that have never seen a CV get patched in an open source",
    "start": "277600",
    "end": "284479"
  },
  {
    "text": "software typically when it happens when a vulnerability gets fixed the comet is",
    "start": "284479",
    "end": "289520"
  },
  {
    "text": "very innocent it doesn't announce the vulnerability it tries to be as lowkey as possible so if you see a comet that",
    "start": "289520",
    "end": "296800"
  },
  {
    "text": "looks kind of weird a maintainer sends some weird not described Comet and you",
    "start": "296800",
    "end": "302639"
  },
  {
    "text": "are wondering what's happening it's very likely they're patching a security vulnerability and in this case you can",
    "start": "302639",
    "end": "308400"
  },
  {
    "text": "see the hel maintainer sent a comit called some fixes okay so that was the",
    "start": "308400",
    "end": "313479"
  },
  {
    "text": "entire story um why is that well if you think about it the reason is quite",
    "start": "313479",
    "end": "318560"
  },
  {
    "text": "simple uh if this is open source software before you release the cve you",
    "start": "318560",
    "end": "324280"
  },
  {
    "text": "need to release the new version right you need to build it you need to release it and only then can you publish the CV",
    "start": "324280",
    "end": "331319"
  },
  {
    "text": "right because if you don't do that then the malicious actors have a window of opportunity to exploit",
    "start": "331319",
    "end": "339199"
  },
  {
    "text": "this uh so I was curious what kind of impact this had in community and I",
    "start": "339199",
    "end": "344600"
  },
  {
    "text": "checked around two weeks ago uh when I took the screenshot there was around 750",
    "start": "344600",
    "end": "350000"
  },
  {
    "text": "pull requests mentioning the cve in various projects from console kis",
    "start": "350000",
    "end": "356199"
  },
  {
    "text": "operator SDK C manager triy Argos CD flx CD so there were hundreds of projects",
    "start": "356199",
    "end": "362520"
  },
  {
    "text": "affected uh there were some commercial products impacted um so Google released two",
    "start": "362520",
    "end": "369160"
  },
  {
    "text": "patches for gke on Prem and classified this as a high severity container",
    "start": "369160",
    "end": "374240"
  },
  {
    "text": "vulnerability and then redut uh released several rhca uh including an rhca for",
    "start": "374240",
    "end": "380280"
  },
  {
    "text": "open shift so it was also quite a a real",
    "start": "380280",
    "end": "385560"
  },
  {
    "text": "vulnerability so what I will try to do now is actually demonstrate it",
    "start": "385560",
    "end": "390720"
  },
  {
    "text": "and I actually hope things fail because this demo is supposed to trigger a failure so let's",
    "start": "390720",
    "end": "396759"
  },
  {
    "text": "see um so as L has it I actually prepared the malicious Helm repository",
    "start": "396759",
    "end": "402960"
  },
  {
    "text": "and I do have an older preat version of Helm so I will try to use that",
    "start": "402960",
    "end": "409319"
  },
  {
    "text": "repository now and we see a beautiful stck trace a",
    "start": "409319",
    "end": "415039"
  },
  {
    "text": "nil pointer the reference and you might think to yourself so what right this is a CLI tool I can just run another",
    "start": "415039",
    "end": "422879"
  },
  {
    "text": "command for example hel version right it still works well the thing is that Helm",
    "start": "422879",
    "end": "428120"
  },
  {
    "text": "is both the CLI project but it is also the SDK okay the",
    "start": "428120",
    "end": "433919"
  },
  {
    "text": "library and hundreds of projects embedded so projects like Argo CD flux CD what have you so if you were able to",
    "start": "433919",
    "end": "440879"
  },
  {
    "text": "trick that program into interacting with this malicious repository it would actually explode it would crash and you",
    "start": "440879",
    "end": "447319"
  },
  {
    "text": "could trigger a denial of service uh which I think was kind of",
    "start": "447319",
    "end": "453280"
  },
  {
    "text": "cool um the second part of the vulnerability I think is much more interesting to me so Helm allows you to",
    "start": "453280",
    "end": "461680"
  },
  {
    "text": "install custom plugins right so I",
    "start": "461680",
    "end": "467960"
  },
  {
    "text": "prepared a malicious plugin and if you want to try it out on your machine it's",
    "start": "468120",
    "end": "473159"
  },
  {
    "text": "in my git uh repo so let's see what happens when I try to install it",
    "start": "473159",
    "end": "480039"
  },
  {
    "text": "we get a n pointer the reference right same story like what's different here it's boring like who uses plugins anyway",
    "start": "482240",
    "end": "490159"
  },
  {
    "text": "well let's see what happens when I try to list releases it panics again right",
    "start": "490159",
    "end": "498639"
  },
  {
    "text": "what happens if I try to invoke the simplest of all Helm commands Helm version that basically just prints a",
    "start": "498639",
    "end": "504879"
  },
  {
    "text": "string to the CLI right okay again we get a sigv uh",
    "start": "504879",
    "end": "511519"
  },
  {
    "text": "and it turns out that even though hel Panic during installation the malicious plug-in",
    "start": "511519",
    "end": "518479"
  },
  {
    "text": "metadata was inserted into your file system and what H does on every single",
    "start": "518479",
    "end": "524320"
  },
  {
    "text": "invocation and it happens very fast so you don't notice but it happens every time is it will look over the uh local",
    "start": "524320",
    "end": "531360"
  },
  {
    "text": "file system load the plug-in into memory tries try to parse it and then it",
    "start": "531360",
    "end": "537000"
  },
  {
    "text": "encounters that nil pointer the reference and it blocks all subsequent actions so if you were able to trick",
    "start": "537000",
    "end": "542959"
  },
  {
    "text": "anyone into installing this you could break their home which was kind of interesting",
    "start": "542959",
    "end": "549320"
  },
  {
    "text": "um so but how do you think I found",
    "start": "549320",
    "end": "554480"
  },
  {
    "text": "this a did I mess up copy pasting yaml was there a typo somewhere",
    "start": "554720",
    "end": "561920"
  },
  {
    "text": "or B a reading the code maybe I called a friend that knows",
    "start": "561920",
    "end": "568320"
  },
  {
    "text": "this kind of stuff usually knows this kind of stuff um actually it was D no one guessed bad",
    "start": "568320",
    "end": "577000"
  },
  {
    "text": "luck this was a result of a targeted fuzzing effort against",
    "start": "577000",
    "end": "582360"
  },
  {
    "text": "Helm um but before that really like this vulnerability is cool it's really nice to have a CV in a very popular Cloud",
    "start": "582360",
    "end": "589959"
  },
  {
    "text": "software right like it's a kind of bragging point but really this wasn't a very impactful",
    "start": "589959",
    "end": "595880"
  },
  {
    "text": "vulnerability there wasn't a big of there wasn't big economical damage you",
    "start": "595880",
    "end": "601000"
  },
  {
    "text": "couldn't really do much with it but let's look at some other",
    "start": "601000",
    "end": "607000"
  },
  {
    "text": "vulnerabilities for example heart bed how many of you heard about heart bed right very famous vulnerability",
    "start": "607000",
    "end": "614760"
  },
  {
    "text": "published around 10 years ago how about shell shock a few of them yes finally a more",
    "start": "614760",
    "end": "623000"
  },
  {
    "text": "recent example w a cry Eternal blue very big famous attack back run somewhere",
    "start": "623000",
    "end": "631160"
  },
  {
    "text": "many hospitals were shut down airports were shut down billions of dollars in",
    "start": "631160",
    "end": "637120"
  },
  {
    "text": "damage is there anything else common amongst them besides the economical",
    "start": "637120",
    "end": "642160"
  },
  {
    "text": "impact why am I talking about them well it turns out that all of them were found",
    "start": "642160",
    "end": "647800"
  },
  {
    "text": "using fuzzing and this is a bit of a secret in the industry it's not often talked about but many high severity real",
    "start": "647800",
    "end": "655959"
  },
  {
    "text": "vulnerabilities get discovered using fers okay",
    "start": "655959",
    "end": "661240"
  },
  {
    "text": "okay and uh yeah the wry was a result of someone reverse engineering malare",
    "start": "661680",
    "end": "667279"
  },
  {
    "text": "created by NSA which is kind of interesting I think what goes around comes around",
    "start": "667279",
    "end": "673680"
  },
  {
    "text": "um what is fuzzing how many of you know what fuzzing is h a few people so it's really a",
    "start": "673680",
    "end": "682040"
  },
  {
    "text": "simple technique what you do when you fuz software is you take your program part",
    "start": "682040",
    "end": "689519"
  },
  {
    "text": "of your program perhaps a single function and you feed it with random",
    "start": "689519",
    "end": "695399"
  },
  {
    "text": "data okay and you do it very fast some fers like the ghost standard",
    "start": "695399",
    "end": "702399"
  },
  {
    "text": "Library fazer I used to find the CV in Helm are a bit smarter than that not",
    "start": "702399",
    "end": "708560"
  },
  {
    "text": "only will they generate data not only will they execute your function but they",
    "start": "708560",
    "end": "713920"
  },
  {
    "text": "are also aware how your program executes so they can be even more smarter about how they generate",
    "start": "713920",
    "end": "721240"
  },
  {
    "text": "data but before that a little workshop so I prepare two",
    "start": "721639",
    "end": "727399"
  },
  {
    "text": "problems the first one is easy the second one is hard and maybe we can",
    "start": "727399",
    "end": "733040"
  },
  {
    "text": "figure them out together so let's look at the easy level I know not all of you are go",
    "start": "733040",
    "end": "739519"
  },
  {
    "text": "developers probably not all of you are programmers but maybe there is some in the audience so my question to you is",
    "start": "739519",
    "end": "747880"
  },
  {
    "text": "what value of n makes this program",
    "start": "747880",
    "end": "752600"
  },
  {
    "text": "panic and what is the length of the",
    "start": "756000",
    "end": "760000"
  },
  {
    "text": "string uh well it turns out three would also make it panic but almost there almost there so why is that because in",
    "start": "762720",
    "end": "770199"
  },
  {
    "text": "go like in many uh programming languages we count indices from zero so a is zero B is one",
    "start": "770199",
    "end": "777880"
  },
  {
    "text": "C is two if you tell it to print character at position three you are technically telling it to print position",
    "start": "777880",
    "end": "785800"
  },
  {
    "text": "four okay and that memory doesn't exist so go being the memory save language it",
    "start": "785800",
    "end": "791560"
  },
  {
    "text": "is it exits it protects you against those kind of failures so this was kind",
    "start": "791560",
    "end": "796959"
  },
  {
    "text": "of easy humans can figure this stuff out but then let's look at this",
    "start": "796959",
    "end": "803800"
  },
  {
    "text": "one so this code is from go 117 time paring Library official standard Library",
    "start": "805000",
    "end": "812519"
  },
  {
    "text": "function can you tell me the string that makes this one",
    "start": "812519",
    "end": "817680"
  },
  {
    "text": "panic anyone no well obviously it's x85 x85",
    "start": "818120",
    "end": "824120"
  },
  {
    "text": "like you can see it well apparently it's very hard for humans to figure this out",
    "start": "824120",
    "end": "829399"
  },
  {
    "text": "but if you take the ghost standard Library fer it will find this in one second or less than one second so it's a",
    "start": "829399",
    "end": "836360"
  },
  {
    "text": "very powerful technique in many ways Superior to",
    "start": "836360",
    "end": "841399"
  },
  {
    "text": "humans um and it used to be the case that fasing was a very Arcane",
    "start": "841399",
    "end": "846639"
  },
  {
    "text": "technology it was very hard to use it required you to have a lot of domain",
    "start": "846639",
    "end": "851800"
  },
  {
    "text": "knowledge but go is the first language that has it as a first class citizen of",
    "start": "851800",
    "end": "857600"
  },
  {
    "text": "its testing Library so fuzing this code is as simple as writing those five lines",
    "start": "857600",
    "end": "863079"
  },
  {
    "text": "and running it and it's very simple uh okay so I will do some",
    "start": "863079",
    "end": "870240"
  },
  {
    "text": "fuzzing and we'll start with the second case um I prepared a",
    "start": "870240",
    "end": "878440"
  },
  {
    "text": "Target uh yes so this is the target for the",
    "start": "880519",
    "end": "888759"
  },
  {
    "text": "plug-in part and you can see the screen is",
    "start": "888759",
    "end": "894440"
  },
  {
    "text": "cooperating the title of the talk is fuzzing and the screen is very fuzzy so it's it's it's not a bug it's a",
    "start": "894440",
    "end": "900519"
  },
  {
    "text": "feature um I around the fer it found the failing",
    "start": "900519",
    "end": "906639"
  },
  {
    "text": "input it stopped and what it did is it saved uh the malicious input into the",
    "start": "906639",
    "end": "913480"
  },
  {
    "text": "local file system so you can actually inspect it take it write it up send it to maintainers they will acknowledge it and",
    "start": "913480",
    "end": "921040"
  },
  {
    "text": "release a fix right very simple it wasn't hard it took me one second right",
    "start": "921040",
    "end": "926240"
  },
  {
    "text": "uh now the second part is a bit trickier",
    "start": "926240",
    "end": "933440"
  },
  {
    "text": "because fuzzing is probabilistic it's it's random and sometimes the functions",
    "start": "933680",
    "end": "939399"
  },
  {
    "text": "are very complex so it's not very simple for it to find some cases like the case",
    "start": "939399",
    "end": "945519"
  },
  {
    "text": "of the repo uh index so if I were to run",
    "start": "945519",
    "end": "950720"
  },
  {
    "text": "this from zero on my MacBook it takes approximately 3 hours okay so in the",
    "start": "950720",
    "end": "957800"
  },
  {
    "text": "interest of time I will par you that okay we will not wait here",
    "start": "957800",
    "end": "963199"
  },
  {
    "text": "um so I prepared um faster fast test version of it which",
    "start": "963199",
    "end": "971480"
  },
  {
    "text": "basically encodes the failing input so you can again see when I run this one it will",
    "start": "971480",
    "end": "977160"
  },
  {
    "text": "explode hopefully it should fail right yes we get the stack Trace so that's basically it how simple was it like did",
    "start": "977160",
    "end": "985560"
  },
  {
    "text": "I have to do a lot of stuff no I just used the tech right it's not that not",
    "start": "985560",
    "end": "992240"
  },
  {
    "text": "that hard so what's in it for you well there is three main",
    "start": "992240",
    "end": "998480"
  },
  {
    "text": "paths so the first one obviously you can fuz your internal projects",
    "start": "998480",
    "end": "1005000"
  },
  {
    "text": "right and fuzzing isn't limited to Cloud native software and it isn't limited to",
    "start": "1005000",
    "end": "1011560"
  },
  {
    "text": "go okay there are fers for all different kinds of languages so you can integrate them in",
    "start": "1011560",
    "end": "1017639"
  },
  {
    "text": "your CI random on every commit and given the random nature of haard you have a",
    "start": "1017639",
    "end": "1023240"
  },
  {
    "text": "chance of uncovering bugs and security issues the second path which is also",
    "start": "1023240",
    "end": "1030720"
  },
  {
    "text": "interesting as to fuz open source software like I did with Helm",
    "start": "1030720",
    "end": "1036400"
  },
  {
    "text": "okay so there is likely hundreds of undiscovered bugs in cncf software that",
    "start": "1036400",
    "end": "1043038"
  },
  {
    "text": "are waiting to be found in projects like Helm kubernetes docker crossplane yada",
    "start": "1043039",
    "end": "1050039"
  },
  {
    "text": "yada um you can fuz uh those projects if",
    "start": "1050039",
    "end": "1055200"
  },
  {
    "text": "you find something reported to maintainers and you can help the ecosystem",
    "start": "1055200",
    "end": "1061080"
  },
  {
    "text": "right and the third path which is the most interesting to me is to improve the base fuzing",
    "start": "1061080",
    "end": "1066799"
  },
  {
    "text": "technology but before we do that let's maybe explain a bit how fuzing actually works in",
    "start": "1066799",
    "end": "1073360"
  },
  {
    "text": "go so when I ask you how does a program look like what do you imagine imagine lines",
    "start": "1073360",
    "end": "1081080"
  },
  {
    "text": "of code right like that's what pops into your mind if you work with compilers or",
    "start": "1081080",
    "end": "1086799"
  },
  {
    "text": "you had a compiler engineering course in University this is yet another representation of the very same",
    "start": "1086799",
    "end": "1094039"
  },
  {
    "text": "program uh using the SSA static single assignment CFG control flow graph so you",
    "start": "1094039",
    "end": "1100640"
  },
  {
    "text": "can see the basic blocks in the SSA form that show the control flow of the",
    "start": "1100640",
    "end": "1106440"
  },
  {
    "text": "function and if you squint hard and kind of look sideways this kind of looks like",
    "start": "1106440",
    "end": "1111679"
  },
  {
    "text": "a banana okay I want you to remember that because it's important",
    "start": "1111679",
    "end": "1117679"
  },
  {
    "text": "um so that was a simple function the control flow can get very",
    "start": "1117679",
    "end": "1123880"
  },
  {
    "text": "complex we have different kinds of blocks we have uh here at the top we",
    "start": "1123880",
    "end": "1130280"
  },
  {
    "text": "have the B1 which is our starting block a conditional block then we have",
    "start": "1130280",
    "end": "1135720"
  },
  {
    "text": "more conditional blocks like B6 B10 b14 B8 18 B22 then we have red blocks which return",
    "start": "1135720",
    "end": "1143960"
  },
  {
    "text": "the execution to the color and we have the very interesting block B20 which a panic compiles to this is",
    "start": "1143960",
    "end": "1152400"
  },
  {
    "text": "this is an abnormal program termination uh and like I said the",
    "start": "1152400",
    "end": "1159080"
  },
  {
    "text": "control flow can get very complex so this is another function it's not very",
    "start": "1159080",
    "end": "1164320"
  },
  {
    "text": "complex there are functions that are 100 times more complex okay",
    "start": "1164320",
    "end": "1169480"
  },
  {
    "text": "and because we have conditional blocks because we we can have loops what ends",
    "start": "1169480",
    "end": "1175240"
  },
  {
    "text": "up happening is if you were to try to trace the amount of unique path your execution can take in this program it's",
    "start": "1175240",
    "end": "1182280"
  },
  {
    "text": "over 1,000 or maybe even over 2,000 okay and if you try to do that by hand it",
    "start": "1182280",
    "end": "1188120"
  },
  {
    "text": "would take you ages but fers can do that uh very",
    "start": "1188120",
    "end": "1194039"
  },
  {
    "text": "quickly so let's do some fuzzing okay let's do some manual fuzzing",
    "start": "1194039",
    "end": "1200000"
  },
  {
    "text": "so I prepared a um toy",
    "start": "1200000",
    "end": "1205400"
  },
  {
    "text": "function and we will keep giving it some inputs and see what happens so first",
    "start": "1205400",
    "end": "1212120"
  },
  {
    "text": "input not five letters it's a string what happens on line four we",
    "start": "1212120",
    "end": "1219159"
  },
  {
    "text": "check if the length of the string is five if it's not we go to line 202 and",
    "start": "1219159",
    "end": "1226880"
  },
  {
    "text": "then in the SSA CFG form you basically go from the B1 block to B2 block okay we",
    "start": "1226880",
    "end": "1235120"
  },
  {
    "text": "didn't get very far let's try more bliss okay this",
    "start": "1235120",
    "end": "1242919"
  },
  {
    "text": "time um the string is five characters long right so we got a slightly",
    "start": "1243480",
    "end": "1251360"
  },
  {
    "text": "further but then we fail on this line the first character is in B is in C so",
    "start": "1251360",
    "end": "1258840"
  },
  {
    "text": "we exit right and in the CFG form we went from B1 to B6 to",
    "start": "1258840",
    "end": "1264520"
  },
  {
    "text": "B5 and then if we continue doing this charm we get four",
    "start": "1264520",
    "end": "1272159"
  },
  {
    "text": "blocks crisp we get five blocks crave we get six",
    "start": "1272159",
    "end": "1281400"
  },
  {
    "text": "blocks um Crush we didn't get B20 why didn't we",
    "start": "1281400",
    "end": "1287279"
  },
  {
    "text": "get B20 yes because for your CPU lowercase H is",
    "start": "1287279",
    "end": "1296679"
  },
  {
    "text": "a different number than uppercase H for humans it's easy to see okay it's the same one but CPUs operate on numbers and",
    "start": "1296679",
    "end": "1303799"
  },
  {
    "text": "those are two different values so you don't take this Branch but actually you take this Branch but then let's see what",
    "start": "1303799",
    "end": "1310760"
  },
  {
    "text": "happens if we run the crush with lowercase H we reach block B20 right",
    "start": "1310760",
    "end": "1320159"
  },
  {
    "text": "and then we have a beautiful explosion we found a vulnerability in our awesome function right um so that's",
    "start": "1320159",
    "end": "1328159"
  },
  {
    "text": "how fuzzing works if you were to fuz the function by hand that's how it works um a bit more lowlevel details uh",
    "start": "1328159",
    "end": "1337400"
  },
  {
    "text": "so a little bit of trivia the go compiler and Shrek are both like onions they have layers so on the left side you",
    "start": "1337400",
    "end": "1343480"
  },
  {
    "text": "have the vanilla go code okay and then you have the optimization onion that",
    "start": "1343480",
    "end": "1348960"
  },
  {
    "text": "progressively improves the quality of your code makes it smaller makes it",
    "start": "1348960",
    "end": "1354360"
  },
  {
    "text": "faster and at the end you end up with raow assembly that your CPU will actually",
    "start": "1354360",
    "end": "1360799"
  },
  {
    "text": "execute why am I talking about this well it turns out that a big trick in the go faser is",
    "start": "1360799",
    "end": "1369760"
  },
  {
    "text": "that it is smart okay so when you compile that function the typical way it",
    "start": "1369760",
    "end": "1375679"
  },
  {
    "text": "looks like the one on the left but when you f it the go compiler",
    "start": "1375679",
    "end": "1381000"
  },
  {
    "text": "actually compiles it differently so it will instrument the basic blocks it will",
    "start": "1381000",
    "end": "1386080"
  },
  {
    "text": "insert transition blocks between the other blocks and then our banana tree uh looks",
    "start": "1386080",
    "end": "1393000"
  },
  {
    "text": "more like a Christmas tree okay and I will explain why do you get some of you might think why are we",
    "start": "1393000",
    "end": "1399080"
  },
  {
    "text": "getting more conditionals in this instrumented version I will explain that uh this is yet another view on the",
    "start": "1399080",
    "end": "1405559"
  },
  {
    "text": "left side you have the raw vanilla comp version of the function beautiful",
    "start": "1405559",
    "end": "1411320"
  },
  {
    "text": "control flow on the right side the highlighted parts are the coverage counters so we",
    "start": "1411320",
    "end": "1418039"
  },
  {
    "text": "load values from memory we check them we increment them and that's how it works",
    "start": "1418039",
    "end": "1423080"
  },
  {
    "text": "that's how God knows whether it's covering new code or not uh so how does this all work well",
    "start": "1423080",
    "end": "1432240"
  },
  {
    "text": "the first phase is to instrument the code right insert the coverage",
    "start": "1432240",
    "end": "1437279"
  },
  {
    "text": "trackers uh the second part is about bringing up the entire system so at its core you have the main process that's",
    "start": "1437279",
    "end": "1443760"
  },
  {
    "text": "kind of like the kubernetes API server it it manages all the elements of the",
    "start": "1443760",
    "end": "1448880"
  },
  {
    "text": "system then you have something with a really cool name mutator that integrates a very fast",
    "start": "1448880",
    "end": "1455080"
  },
  {
    "text": "random number generator and generates huge amounts of data okay and then what",
    "start": "1455080",
    "end": "1461000"
  },
  {
    "text": "we do is we spin up several instances of your function to FAS in parallel right",
    "start": "1461000",
    "end": "1467679"
  },
  {
    "text": "the mutator will generate data we will feed it to the instances of your program",
    "start": "1467679",
    "end": "1473200"
  },
  {
    "text": "they will get executed and the worker will look at the vector describing the",
    "start": "1473200",
    "end": "1478960"
  },
  {
    "text": "execution path report it back and we check whether this was a new path or not",
    "start": "1478960",
    "end": "1485080"
  },
  {
    "text": "okay this is very important we are all only interested in paths that are actually new if we've seen this path we",
    "start": "1485080",
    "end": "1491960"
  },
  {
    "text": "discarded okay because it's not very useful to us and you basically keep doing this",
    "start": "1491960",
    "end": "1497880"
  },
  {
    "text": "okay like that that's how it works you keep doing this until you get a crash and that's it that's the whole",
    "start": "1497880",
    "end": "1504440"
  },
  {
    "text": "story it it isn't really rocket science uh a bit more detailed this is",
    "start": "1504440",
    "end": "1510840"
  },
  {
    "text": "an entire set of all the bite slice and string mutators the go faser implements",
    "start": "1510840",
    "end": "1517080"
  },
  {
    "text": "those are simple Transformations and they have to be simple because the fazer quality is very",
    "start": "1517080",
    "end": "1523799"
  },
  {
    "text": "proportional to its speed of execution So the faster you can generate new input",
    "start": "1523799",
    "end": "1529200"
  },
  {
    "text": "the faster you can execute them the more path you can discover okay so we have",
    "start": "1529200",
    "end": "1534720"
  },
  {
    "text": "some very simple Transformations removal of bites insertion of random bites",
    "start": "1534720",
    "end": "1540559"
  },
  {
    "text": "swapping bites and this is a sample mutation",
    "start": "1540559",
    "end": "1546000"
  },
  {
    "text": "removal of bites so let's say we have this candidate here uh we apply the remove mutator and",
    "start": "1546000",
    "end": "1554399"
  },
  {
    "text": "we end up with our Crasher insertion again we have cr we insert",
    "start": "1554399",
    "end": "1561360"
  },
  {
    "text": "random bites we end up with our Crusher uh swapping of random bites we end up with our",
    "start": "1561360",
    "end": "1568679"
  },
  {
    "text": "Crusher so why am I talking about this when the gaser was released it was a",
    "start": "1568679",
    "end": "1574520"
  },
  {
    "text": "really big news there was a lot of B around this people very excited but if",
    "start": "1574520",
    "end": "1580799"
  },
  {
    "text": "you look over the last year there's only really a single person working on it and",
    "start": "1580799",
    "end": "1588399"
  },
  {
    "text": "this is an open source project you can contribute okay and you might think how do I contribute to something as Arcane",
    "start": "1588399",
    "end": "1595640"
  },
  {
    "text": "as a fer okay that sounds hard well you do it the same way you do it for any",
    "start": "1595640",
    "end": "1601520"
  },
  {
    "text": "other kind of software so you fix bugs you add new features or something that",
    "start": "1601520",
    "end": "1608000"
  },
  {
    "text": "I'm most interested in optimize performance uh so it turns out I did",
    "start": "1608000",
    "end": "1616240"
  },
  {
    "text": "some work around this and remember when I said that our banana tree becomes a Christmas tree the reason Earth that the",
    "start": "1616240",
    "end": "1623520"
  },
  {
    "text": "go go fazer implements the never zero strategy from the AFL",
    "start": "1623520",
    "end": "1628919"
  },
  {
    "text": "fer uh which basically means when we count the amount of times a block could",
    "start": "1628919",
    "end": "1635080"
  },
  {
    "text": "executed we increment it but if we are about to overflow which is go from 255",
    "start": "1635080",
    "end": "1641720"
  },
  {
    "text": "to Zer we don't go to zero we go to one and that results in control flow",
    "start": "1641720",
    "end": "1649279"
  },
  {
    "text": "okay and for those of you that care about performance optimization CPUs",
    "start": "1649279",
    "end": "1654559"
  },
  {
    "text": "really hate control flow okay they have this part called Branch predictor and it's really awesome about guessing where",
    "start": "1654559",
    "end": "1660840"
  },
  {
    "text": "your program will go but in general it's still much nicer to try to use",
    "start": "1660840",
    "end": "1667000"
  },
  {
    "text": "branchless algorithms so in this case I implemented uh the function at the",
    "start": "1667000",
    "end": "1673000"
  },
  {
    "text": "bottom I swapped the part in the compiler that instruments the fil targets",
    "start": "1673000",
    "end": "1678480"
  },
  {
    "text": "and implemented a branchless version of it and the benefit of it is that our",
    "start": "1678480",
    "end": "1684559"
  },
  {
    "text": "banana tree Remains the banana Tre okay so that's really nice and you might think okay the the tree is much simpler",
    "start": "1684559",
    "end": "1692000"
  },
  {
    "text": "like how big of an impact did it have well it turns out only 2%",
    "start": "1692000",
    "end": "1697399"
  },
  {
    "text": "performance gain not much it was very hard to implement this you have to have uh the context of the",
    "start": "1697399",
    "end": "1704880"
  },
  {
    "text": "compiler uh so it was I mean I mean it's nice that it's 2% faster because what",
    "start": "1704880",
    "end": "1710760"
  },
  {
    "text": "does it mean now if you run the fazer for the same amount of time it's 2% more",
    "start": "1710760",
    "end": "1716200"
  },
  {
    "text": "likely to uncover new code paths new vulnerabilities um but let's look at",
    "start": "1716200",
    "end": "1721600"
  },
  {
    "text": "something simpler so remember when I said when the",
    "start": "1721600",
    "end": "1726919"
  },
  {
    "text": "worker executes an input after that execution we look at",
    "start": "1726919",
    "end": "1732559"
  },
  {
    "text": "the coverage vector and we report it back and it turns out the Google",
    "start": "1732559",
    "end": "1739120"
  },
  {
    "text": "engineer that implemented this did a great job and uh cores and uh those",
    "start": "1739120",
    "end": "1745120"
  },
  {
    "text": "coverage trackers so instead of reporting the actual number of executions for every block we round down",
    "start": "1745120",
    "end": "1752919"
  },
  {
    "text": "to the nearest power of two and that beautiful bitwise trick those four lines actually do that like",
    "start": "1752919",
    "end": "1759320"
  },
  {
    "text": "if you run any bite through this you will end up with a nearest power of two",
    "start": "1759320",
    "end": "1766640"
  },
  {
    "text": "Okay so I looked at this and I thought to myself I you know this is a very hot",
    "start": "1766640",
    "end": "1772799"
  },
  {
    "text": "path it executes every time you feed it an input so it runs very often the coverage Vector can be very long also we",
    "start": "1772799",
    "end": "1779039"
  },
  {
    "text": "can have many blocks but I looked at this and I thought you know when you are in middle school and",
    "start": "1779039",
    "end": "1786840"
  },
  {
    "text": "the teacher asked you how much is 5 * 9 were you counting on your",
    "start": "1786840",
    "end": "1791960"
  },
  {
    "text": "fingers I know some of you did but most of us didn't what did we do",
    "start": "1791960",
    "end": "1798640"
  },
  {
    "text": "we remembered right we remembered so it turns out what if we",
    "start": "1798640",
    "end": "1806600"
  },
  {
    "text": "actually precompute all the answers once ahead of time on initialization and then",
    "start": "1806600",
    "end": "1813480"
  },
  {
    "text": "instead of doing this awesome beautiful bitwise trick let's just look up the answer so 17 should be 16 33 should be",
    "start": "1813480",
    "end": "1822279"
  },
  {
    "text": "32 9 should be eight y yada much simpler optimization you didn't have to touch",
    "start": "1822279",
    "end": "1828799"
  },
  {
    "text": "the compiler there was no SSA none of that stuff well it turns out that's an",
    "start": "1828799",
    "end": "1835080"
  },
  {
    "text": "18% performance gain in the fazer which is nice because it means if we combine",
    "start": "1835080",
    "end": "1841120"
  },
  {
    "text": "those two optimizations now we will have 20% higher chance of uncovering new codepath",
    "start": "1841120",
    "end": "1847159"
  },
  {
    "text": "and since this is a foundational software hundreds of people rely on it",
    "start": "1847159",
    "end": "1852480"
  },
  {
    "text": "so if you are able to improve base technology you can improve all the work done by all those people actually use it",
    "start": "1852480",
    "end": "1859120"
  },
  {
    "text": "so I think it's a really good karma if you want to do something good for the world this is one way to do",
    "start": "1859120",
    "end": "1866960"
  },
  {
    "text": "it um and to finalize I just want to reiterate that fasing is absolutely not",
    "start": "1866960",
    "end": "1874720"
  },
  {
    "text": "limited to go in Cloud native software uh there are fers for all kinds of",
    "start": "1874720",
    "end": "1881559"
  },
  {
    "text": "languages Java python JavaScript C++ C",
    "start": "1881559",
    "end": "1888000"
  },
  {
    "text": "you can fuz all kinds of software customer facing",
    "start": "1888000",
    "end": "1893080"
  },
  {
    "text": "apis Mission critic Mission critical systems uh business applications like",
    "start": "1893080",
    "end": "1898440"
  },
  {
    "text": "really anything that takes inputs okay like you can if it accepts something you can send something right um and you can",
    "start": "1898440",
    "end": "1905519"
  },
  {
    "text": "find many different types of issues SQL injection vulnerabilities denial of service",
    "start": "1905519",
    "end": "1912120"
  },
  {
    "text": "vulnerabilities of different kinds uh you can also apply a very interesting technique called",
    "start": "1912120",
    "end": "1918279"
  },
  {
    "text": "differential fuzing so let's imagine you are implementing a compression algorithm a",
    "start": "1918279",
    "end": "1924360"
  },
  {
    "text": "lossless compression algorithm you could make the faser generate inputs compress them using your",
    "start": "1924360",
    "end": "1932000"
  },
  {
    "text": "compressor then decompress them using your decompressor and what should you see the",
    "start": "1932000",
    "end": "1938360"
  },
  {
    "text": "the input and output should match if they don't it means there is a bug there's a logic bug uh in your",
    "start": "1938360",
    "end": "1946519"
  },
  {
    "text": "function um so this is all I had for you today um feel free to reach out on",
    "start": "1946519",
    "end": "1953919"
  },
  {
    "text": "LinkedIn you can email me if you have any questions um and try try it out like the the code",
    "start": "1953919",
    "end": "1961919"
  },
  {
    "text": "base is a few thousand lines of code you can spend a few weeks trying to",
    "start": "1961919",
    "end": "1967159"
  },
  {
    "text": "understand that it's likely that you might find ways to contribute and thank you any questions",
    "start": "1967159",
    "end": "1977480"
  },
  {
    "text": "I was expecting uh roasting like very hard questions you know to come like oh what about that father like no one has",
    "start": "1986559",
    "end": "1993480"
  },
  {
    "text": "any of those oh someone's",
    "start": "1993480",
    "end": "2000158"
  },
  {
    "text": "coming hello hi great talk first of all thank you so uh my question is regarding",
    "start": "2001399",
    "end": "2008279"
  },
  {
    "text": "uh you mentioned we can fuzz uh customer facing apis as well yes right so uh I'm",
    "start": "2008279",
    "end": "2015000"
  },
  {
    "text": "thinking Jason or any kind of structured input where some keys have to have certain values so are there uh",
    "start": "2015000",
    "end": "2022760"
  },
  {
    "text": "predicates that we can give to fuzzers that I I want it's up to you to define",
    "start": "2022760",
    "end": "2028799"
  },
  {
    "text": "the predicate in the case of G fuzer if you don't have a predicate it will fail on",
    "start": "2028799",
    "end": "2035480"
  },
  {
    "text": "crashes obviously like but you can can have additional predicates okay so I can uh Nest",
    "start": "2035480",
    "end": "2042360"
  },
  {
    "text": "predicates as well if I want make one yes it's basically a program like you can make it as long as you want you",
    "start": "2042360",
    "end": "2048320"
  },
  {
    "text": "know okay yeah thank",
    "start": "2048320",
    "end": "2052280"
  },
  {
    "text": "you any more questions please don't be shy",
    "start": "2058560",
    "end": "2064000"
  },
  {
    "text": "yes are there any c tools yes you can use GitHub actions or",
    "start": "2069839",
    "end": "2076320"
  },
  {
    "text": "bit bucket and just use you know you can have the go CLI if you have the F test defined you",
    "start": "2076320",
    "end": "2083040"
  },
  {
    "text": "can just run go test fuz you can have a simple pipeline that does that and then",
    "start": "2083040",
    "end": "2088158"
  },
  {
    "text": "what you can do is you can Define the amount of time it's supposed to execute",
    "start": "2088159",
    "end": "2093240"
  },
  {
    "text": "for okay so you can say please F this for one minute on every comet",
    "start": "2093240",
    "end": "2099280"
  },
  {
    "text": "and given the random probabilistic nature of fers it will have a chance of uncovering new code paath uh a potential",
    "start": "2099280",
    "end": "2107359"
  },
  {
    "text": "optimization you can do is you can um because when it finds interesting inputs",
    "start": "2107359",
    "end": "2113280"
  },
  {
    "text": "it will save them to the file system right but if you run it in CI it will lose them on every uh execution so you",
    "start": "2113280",
    "end": "2121000"
  },
  {
    "text": "can try to implement caching for it you know there's a little bit of you have to kind of integrate it with with c like it",
    "start": "2121000",
    "end": "2128119"
  },
  {
    "text": "requires a bit of as",
    "start": "2128119",
    "end": "2132519"
  },
  {
    "text": "mun so can I have a sort of CI to that already have a memory function and only",
    "start": "2135240",
    "end": "2141800"
  },
  {
    "text": "does the fuzzing for the change um you can do that but the thing is like",
    "start": "2141800",
    "end": "2148079"
  },
  {
    "text": "you know some functions if you were to F them it will take you know a year to",
    "start": "2148079",
    "end": "2153920"
  },
  {
    "text": "find the The Bu input it's a very probabilistic process so you it's not",
    "start": "2153920",
    "end": "2159560"
  },
  {
    "text": "like okay I will Fast it for one minute and I will you know find all the bugs you have a chance of of finding",
    "start": "2159560",
    "end": "2165800"
  },
  {
    "text": "something like and sometimes there are areas of your code that exist the compiler emitted it but you will never",
    "start": "2165800",
    "end": "2173079"
  },
  {
    "text": "reach them no matter what kind of input you pass uh they exist but you you you",
    "start": "2173079",
    "end": "2178440"
  },
  {
    "text": "will not be able to ever reach them in any any way",
    "start": "2178440",
    "end": "2184000"
  },
  {
    "text": "uh so what you can do in that case is you can save all the interesting inputs",
    "start": "2193000",
    "end": "2199560"
  },
  {
    "text": "you got and run them with something that has",
    "start": "2199560",
    "end": "2205000"
  },
  {
    "text": "coverage tracking like a unit test you can have a unit test that sources all the inputs executes them and then you",
    "start": "2205000",
    "end": "2210920"
  },
  {
    "text": "can see which lines were covered okay if you see okay I covered all the lines there's probably nothing to find here",
    "start": "2210920",
    "end": "2217319"
  },
  {
    "text": "then probably you're safe but uh the search space in some functions especially the",
    "start": "2217319",
    "end": "2223280"
  },
  {
    "text": "ones that accept bite slices or strings of unlimited length like it's infinite like you can never really execute for",
    "start": "2223280",
    "end": "2230839"
  },
  {
    "text": "all the",
    "start": "2230839",
    "end": "2234200"
  },
  {
    "text": "yes uh so what you I didn't talk about it but this is very good to do is you",
    "start": "2246240",
    "end": "2251640"
  },
  {
    "text": "can add the seed Corpus so when you start fuzzing you can show the F",
    "start": "2251640",
    "end": "2257400"
  },
  {
    "text": "examples of valid inputs okay it will try to mangle them and it's much more likely it will find",
    "start": "2257400",
    "end": "2264319"
  },
  {
    "text": "like real code F because if you don't do that it will start from zero like it will start with an empty string random",
    "start": "2264319",
    "end": "2270079"
  },
  {
    "text": "characters and then imagine you have to uh start passing valid hand chart",
    "start": "2270079",
    "end": "2276280"
  },
  {
    "text": "metadata it will take you like 3 hours you know for the fer to kind of find that structure so it's good",
    "start": "2276280",
    "end": "2283560"
  },
  {
    "text": "to provide a high quality seed Corpus uh that can significantly speed it",
    "start": "2283560",
    "end": "2289760"
  },
  {
    "text": "up yes yes if you have a nested class structure",
    "start": "2289760",
    "end": "2296000"
  },
  {
    "text": "where you main class is delegating the next classes what is the best",
    "start": "2296000",
    "end": "2302359"
  },
  {
    "text": "practice to start POS from the dep or from the",
    "start": "2302359",
    "end": "2309400"
  },
  {
    "text": "H that's a good question I probably would have to think about it to not mislead you",
    "start": "2309400",
    "end": "2316079"
  },
  {
    "text": "um well I think it depends how do you actually consume that class",
    "start": "2317319",
    "end": "2322560"
  },
  {
    "text": "like you because you know you f things that actually you can feed inputs into",
    "start": "2322560",
    "end": "2328880"
  },
  {
    "text": "like that's what you f okay apis file system something that you can send data",
    "start": "2328880",
    "end": "2335839"
  },
  {
    "text": "over like you take that you feed data and then you wait till it explodes so if",
    "start": "2335839",
    "end": "2341400"
  },
  {
    "text": "you know depending how your code actually integrates there like f that",
    "start": "2341400",
    "end": "2348520"
  },
  {
    "text": "okay yes so you C",
    "start": "2350880",
    "end": "2358480"
  },
  {
    "text": "yes running it for hours so how",
    "start": "2358480",
    "end": "2365119"
  },
  {
    "text": "you um so I because you can fuz outside of CI and that's why I did and the",
    "start": "2366000",
    "end": "2371079"
  },
  {
    "text": "question was um that I mentioned that you can run in CI but I also mentioned that you can run uh for 3 hours and the",
    "start": "2371079",
    "end": "2379319"
  },
  {
    "text": "way I did it is I basically made my computer run for 3 hours and it found it but there are",
    "start": "2379319",
    "end": "2385800"
  },
  {
    "text": "projects uh I think there is one called OSS Faz that handle uh continuous they",
    "start": "2385800",
    "end": "2392800"
  },
  {
    "text": "they fast continuously using huge amounts of machines and I think project Zero from Google also does that like",
    "start": "2392800",
    "end": "2399760"
  },
  {
    "text": "they have a lot of hardware and they F popular programs and find bugs in in",
    "start": "2399760",
    "end": "2405359"
  },
  {
    "text": "Google Chrome and all kinds of software so the more Hardware you can throw at it",
    "start": "2405359",
    "end": "2411119"
  },
  {
    "text": "the better okay like it's kind of nice you set it up and then you wait until it finds something you can go",
    "start": "2411119",
    "end": "2420400"
  },
  {
    "text": "somewhere yes in cases where you",
    "start": "2422200",
    "end": "2429119"
  },
  {
    "text": "yes and there is a part of the F that I did not mention it there is a part that handles what's called",
    "start": "2440599",
    "end": "2446560"
  },
  {
    "text": "minimization so there is a step where you find a crasher you actually try to make it as short as possible so you",
    "start": "2446560",
    "end": "2452599"
  },
  {
    "text": "remove random characters you run it again and you see am I still triggering this same code path yes okay can I make",
    "start": "2452599",
    "end": "2460440"
  },
  {
    "text": "it smaller and then you continuously do that until you cannot minimize it more um yes there is a minimization step",
    "start": "2460440",
    "end": "2468920"
  },
  {
    "text": "though it isn't perfect yes uh yes",
    "start": "2468920",
    "end": "2476760"
  },
  {
    "text": "yes so yeah I I copy pasted the input that the fazer found and then the",
    "start": "2477480",
    "end": "2482920"
  },
  {
    "text": "maintainer was like oh it can be a smaller one so it isn't perfect you know it isn't perfect um sometimes",
    "start": "2482920",
    "end": "2491400"
  },
  {
    "text": "there is too much uh too many characters and that's like",
    "start": "2491400",
    "end": "2496640"
  },
  {
    "text": "an area you can contribute to like maybe there's a better way to do minimization you know like",
    "start": "2496640",
    "end": "2503160"
  },
  {
    "text": "yeah yes so you already covered that it",
    "start": "2503160",
    "end": "2508400"
  },
  {
    "text": "takes a lot of time it requires high quality seeds and uh you might have to",
    "start": "2508400",
    "end": "2515480"
  },
  {
    "text": "be probably aware about what kind of predicates you want to run and because",
    "start": "2515480",
    "end": "2523000"
  },
  {
    "text": "of that uh it may go over a budget and everybody every team has a budget so my",
    "start": "2523000",
    "end": "2529000"
  },
  {
    "text": "question is how can I learn more about best practices of creating a good seed",
    "start": "2529000",
    "end": "2537359"
  },
  {
    "text": "and making sure my predicates are good but they are not too minimized that I",
    "start": "2537359",
    "end": "2543880"
  },
  {
    "text": "would never actually go and break my uh well there is likely you can get a lot",
    "start": "2543880",
    "end": "2550000"
  },
  {
    "text": "of benefit just from base fuzzing like not elaborate fuzzing if you start",
    "start": "2550000",
    "end": "2555520"
  },
  {
    "text": "fuzing basic code it's very likely it will find issues you know um so good resources where we can",
    "start": "2555520",
    "end": "2564599"
  },
  {
    "text": "learn more about fuzzing and get the team ready for that well I",
    "start": "2564599",
    "end": "2570280"
  },
  {
    "text": "think the official documentation is quite good like if you if you if you read through that it's quite good I think there are some tutorials on",
    "start": "2570280",
    "end": "2576200"
  },
  {
    "text": "YouTube also a few other talks about fuzing also um so there is there are",
    "start": "2576200",
    "end": "2583280"
  },
  {
    "text": "resources and once you write your first fast test and run it like it clicks okay",
    "start": "2583280",
    "end": "2588920"
  },
  {
    "text": "it's quite it's quite nice",
    "start": "2588920",
    "end": "2592400"
  },
  {
    "text": "so okay I think we are done right what time is it now 28 no more",
    "start": "2594040",
    "end": "2603880"
  },
  {
    "text": "questions thank you now you had you yes",
    "start": "2604880",
    "end": "2611599"
  },
  {
    "text": "yes",
    "start": "2613520",
    "end": "2616520"
  },
  {
    "text": "yes that's also a code you know like you can if it runs on a machine it's Cod",
    "start": "2620920",
    "end": "2626880"
  },
  {
    "text": "like uh you can find ways of uh fuzing apis for containers for",
    "start": "2626880",
    "end": "2635359"
  },
  {
    "text": "example um there is there is something called blackbox fuzing which is doesn't have",
    "start": "2635359",
    "end": "2641839"
  },
  {
    "text": "this it doesn't have this instrumentation step so you can you can fast using the blackbox technique where",
    "start": "2641839",
    "end": "2646920"
  },
  {
    "text": "you just send data and like see what happens like but it's much slower you know like if you don't have this",
    "start": "2646920",
    "end": "2653000"
  },
  {
    "text": "instrumentation if you don't integrate the fer with your source code it's significantly slower uh but sometimes",
    "start": "2653000",
    "end": "2658680"
  },
  {
    "text": "it's the only way right like if maybe there isn't a better way",
    "start": "2658680",
    "end": "2665720"
  },
  {
    "text": "okay thank you for today [Applause]",
    "start": "2668000",
    "end": "2674499"
  }
]